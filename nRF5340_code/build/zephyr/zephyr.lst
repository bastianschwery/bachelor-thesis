
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	c8 d3 00 20 41 da 00 00 0d e1 01 00 71 da 00 00     ... A.......q...
    8010:	71 da 00 00 71 da 00 00 71 da 00 00 71 da 00 00     q...q...q...q...
	...
    802c:	09 d8 00 00 71 da 00 00 00 00 00 00 ad d7 00 00     ....q...........
    803c:	a9 c5 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8050:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8060:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8070:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8080:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8090:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    80a0:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    80b0:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    80c0:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    80d0:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    80e0:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    80f0:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8100:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8110:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8120:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8130:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8140:	01 da 00 00 01 da 00 00 01 da 00 00 01 da 00 00     ................
    8150:	01 da 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	98 eb 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
}

/*
 * calculate speed
 */
uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
    8f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const uint8_t * buffer = (uint8_t *) buf;
    diameter = (uint8_t ) *buffer;
    8f04:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8f88 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x88>
{
    8f08:	460e      	mov	r6, r1
    diameter = (uint8_t ) *buffer;
    8f0a:	7811      	ldrb	r1, [r2, #0]
{
    8f0c:	4607      	mov	r7, r0
    diameter = (uint8_t ) *buffer;
    8f0e:	f888 1000 	strb.w	r1, [r8]

    printk("diameter: %d\n", diameter & 0b10000000);
    8f12:	481e      	ldr	r0, [pc, #120]	; (8f8c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8c>)
    8f14:	f001 0180 	and.w	r1, r1, #128	; 0x80
{
    8f18:	461c      	mov	r4, r3
    8f1a:	4615      	mov	r5, r2
    printk("diameter: %d\n", diameter & 0b10000000);
    8f1c:	f013 fd3c 	bl	1c998 <printk>
    // check if last bit is '1', then add 0.5 to dia and convert it to cm
    if ((diameter & 0b10000000) == 0b10000000)
    8f20:	f998 3000 	ldrsb.w	r3, [r8]
    8f24:	f898 0000 	ldrb.w	r0, [r8]
    8f28:	2b00      	cmp	r3, #0
    8f2a:	da1e      	bge.n	8f6a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x6a>
    {
        dia = (diameter + 0.5) * 2.54;
    8f2c:	f7ff fada 	bl	84e4 <__aeabi_i2d>
    8f30:	2200      	movs	r2, #0
    8f32:	4b17      	ldr	r3, [pc, #92]	; (8f90 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x90>)
    8f34:	f7ff f98a 	bl	824c <__adddf3>
    }
    else {
        dia = diameter * 2.54;
    8f38:	a311      	add	r3, pc, #68	; (adr r3, 8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>)
    8f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f3e:	f7ff fb3b 	bl	85b8 <__aeabi_dmul>
    8f42:	4b14      	ldr	r3, [pc, #80]	; (8f94 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x94>)
    }
    
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f44:	463a      	mov	r2, r7
    8f46:	e9c3 0100 	strd	r0, r1, [r3]
    8f4a:	8a31      	ldrh	r1, [r6, #16]
    8f4c:	4812      	ldr	r0, [pc, #72]	; (8f98 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x98>)
    8f4e:	f013 fd23 	bl	1c998 <printk>
    8f52:	2100      	movs	r1, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f54:	4f11      	ldr	r7, [pc, #68]	; (8f9c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x9c>)
    for(uint8_t i = 0; i < len; i++){
    8f56:	1c4e      	adds	r6, r1, #1
    8f58:	b2c9      	uxtb	r1, r1
    8f5a:	42a1      	cmp	r1, r4
    8f5c:	da08      	bge.n	8f70 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x70>
        printk("%02X", buffer[i]);
    8f5e:	5c69      	ldrb	r1, [r5, r1]
    8f60:	4638      	mov	r0, r7
    8f62:	f013 fd19 	bl	1c998 <printk>
    for(uint8_t i = 0; i < len; i++){
    8f66:	4631      	mov	r1, r6
    8f68:	e7f5      	b.n	8f56 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x56>
        dia = diameter * 2.54;
    8f6a:	f7ff fabb 	bl	84e4 <__aeabi_i2d>
    8f6e:	e7e3      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    }
    printk("\n");
    8f70:	480b      	ldr	r0, [pc, #44]	; (8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa0>)
    8f72:	f013 fd11 	bl	1c998 <printk>
 	return len;
}
    8f76:	4620      	mov	r0, r4
    8f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f7c:	f3af 8000 	nop.w
    8f80:	851eb852 	.word	0x851eb852
    8f84:	400451eb 	.word	0x400451eb
    8f88:	2000b231 	.word	0x2000b231
    8f8c:	00022c9d 	.word	0x00022c9d
    8f90:	3fe00000 	.word	0x3fe00000
    8f94:	200086f8 	.word	0x200086f8
    8f98:	00022cab 	.word	0x00022cab
    8f9c:	00022cd7 	.word	0x00022cd7
    8fa0:	00026266 	.word	0x00026266
    8fa4:	00000000 	.word	0x00000000

00008fa8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    8fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8faa:	4d5f      	ldr	r5, [pc, #380]	; (9128 <bt_init+0x180>)
    8fac:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    8fb0:	6899      	ldr	r1, [r3, #8]
    8fb2:	f011 0101 	ands.w	r1, r1, #1
    8fb6:	d11e      	bne.n	8ff6 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    8fb8:	f640 4003 	movw	r0, #3075	; 0xc03
    8fbc:	aa01      	add	r2, sp, #4
    8fbe:	f005 ffcd 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    8fc2:	4604      	mov	r4, r0
    8fc4:	2800      	cmp	r0, #0
    8fc6:	f040 80ac 	bne.w	9122 <bt_init+0x17a>
	uint8_t status = buf->data[0];
    8fca:	9b01      	ldr	r3, [sp, #4]
    8fcc:	689b      	ldr	r3, [r3, #8]
	if (status) {
    8fce:	781b      	ldrb	r3, [r3, #0]
    8fd0:	b973      	cbnz	r3, 8ff0 <bt_init+0x48>
	scan_dev_found_cb = NULL;
    8fd2:	4a56      	ldr	r2, [pc, #344]	; (912c <bt_init+0x184>)
    8fd4:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    8fd6:	f105 0394 	add.w	r3, r5, #148	; 0x94
    8fda:	4618      	mov	r0, r3
    8fdc:	f015 faa7 	bl	1e52e <atomic_get>
    8fe0:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8fe4:	e8d3 2fef 	ldaex	r2, [r3]
    8fe8:	e8c3 0fe1 	stlex	r1, r0, [r3]
    8fec:	2900      	cmp	r1, #0
    8fee:	d1f9      	bne.n	8fe4 <bt_init+0x3c>
		net_buf_unref(rsp);
    8ff0:	9801      	ldr	r0, [sp, #4]
    8ff2:	f00e fb3b 	bl	1766c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    8ff6:	2100      	movs	r1, #0
    8ff8:	f241 0003 	movw	r0, #4099	; 0x1003
    8ffc:	aa01      	add	r2, sp, #4
    8ffe:	f005 ffad 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    9002:	4604      	mov	r4, r0
    9004:	2800      	cmp	r0, #0
    9006:	f040 808c 	bne.w	9122 <bt_init+0x17a>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    900a:	9b01      	ldr	r3, [sp, #4]
    900c:	2208      	movs	r2, #8
    900e:	6899      	ldr	r1, [r3, #8]
    9010:	4847      	ldr	r0, [pc, #284]	; (9130 <bt_init+0x188>)
    9012:	3101      	adds	r1, #1
    9014:	f015 f978 	bl	1e308 <memcpy>
	net_buf_unref(rsp);
    9018:	9801      	ldr	r0, [sp, #4]
    901a:	f00e fb27 	bl	1766c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    901e:	4621      	mov	r1, r4
    9020:	f241 0001 	movw	r0, #4097	; 0x1001
    9024:	aa01      	add	r2, sp, #4
    9026:	f005 ff99 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    902a:	4604      	mov	r4, r0
    902c:	2800      	cmp	r0, #0
    902e:	d178      	bne.n	9122 <bt_init+0x17a>
	read_local_ver_complete(rsp);
    9030:	9801      	ldr	r0, [sp, #4]
    9032:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    9034:	785a      	ldrb	r2, [r3, #1]
    9036:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    903a:	78d9      	ldrb	r1, [r3, #3]
    903c:	789a      	ldrb	r2, [r3, #2]
    903e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9042:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    9044:	791a      	ldrb	r2, [r3, #4]
    9046:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    904a:	7a19      	ldrb	r1, [r3, #8]
    904c:	79da      	ldrb	r2, [r3, #7]
    904e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9052:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9054:	795a      	ldrb	r2, [r3, #5]
    9056:	799b      	ldrb	r3, [r3, #6]
    9058:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    905c:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    905e:	f00e fb05 	bl	1766c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9062:	4621      	mov	r1, r4
    9064:	f241 0002 	movw	r0, #4098	; 0x1002
    9068:	aa01      	add	r2, sp, #4
    906a:	f005 ff77 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    906e:	4604      	mov	r4, r0
    9070:	2800      	cmp	r0, #0
    9072:	d156      	bne.n	9122 <bt_init+0x17a>
	memcpy(bt_dev.supported_commands, rp->commands,
    9074:	9b01      	ldr	r3, [sp, #4]
    9076:	2240      	movs	r2, #64	; 0x40
    9078:	6899      	ldr	r1, [r3, #8]
    907a:	482e      	ldr	r0, [pc, #184]	; (9134 <bt_init+0x18c>)
    907c:	3101      	adds	r1, #1
    907e:	f015 f943 	bl	1e308 <memcpy>
	net_buf_unref(rsp);
    9082:	9801      	ldr	r0, [sp, #4]
    9084:	f00e faf2 	bl	1766c <net_buf_unref>
		err = prng_init();
    9088:	f007 ff60 	bl	10f4c <prng_init>
		if (err) {
    908c:	4604      	mov	r4, r0
    908e:	2800      	cmp	r0, #0
    9090:	d147      	bne.n	9122 <bt_init+0x17a>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9092:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    9096:	069a      	lsls	r2, r3, #26
    9098:	d40e      	bmi.n	90b8 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    909a:	2157      	movs	r1, #87	; 0x57
    909c:	4826      	ldr	r0, [pc, #152]	; (9138 <bt_init+0x190>)
    909e:	f013 fc7b 	bl	1c998 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    90a2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    90a6:	065b      	lsls	r3, r3, #25
    90a8:	d44a      	bmi.n	9140 <bt_init+0x198>
		BT_ERR("Non-LE capable controller detected!");
    90aa:	2145      	movs	r1, #69	; 0x45
    90ac:	4823      	ldr	r0, [pc, #140]	; (913c <bt_init+0x194>)
    90ae:	f013 fc73 	bl	1c998 <printk>
		return -ENODEV;
    90b2:	f06f 0412 	mvn.w	r4, #18
    90b6:	e034      	b.n	9122 <bt_init+0x17a>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    90b8:	2107      	movs	r1, #7
    90ba:	f640 4033 	movw	r0, #3123	; 0xc33
    90be:	f005 ff03 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    90c2:	4607      	mov	r7, r0
    90c4:	b910      	cbnz	r0, 90cc <bt_init+0x124>
		return -ENOBUFS;
    90c6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    90ca:	e02a      	b.n	9122 <bt_init+0x17a>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    90cc:	2107      	movs	r1, #7
    90ce:	3008      	adds	r0, #8
    90d0:	f00e fbe2 	bl	17898 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    90d4:	4621      	mov	r1, r4
    90d6:	2207      	movs	r2, #7
    90d8:	4606      	mov	r6, r0
    90da:	f015 f940 	bl	1e35e <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    90de:	2345      	movs	r3, #69	; 0x45
    90e0:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    90e2:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    90e4:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    90e6:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    90e8:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    90ea:	4639      	mov	r1, r7
    90ec:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    90f0:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    90f2:	f005 ff33 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    90f6:	4604      	mov	r4, r0
    90f8:	b998      	cbnz	r0, 9122 <bt_init+0x17a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    90fa:	2101      	movs	r1, #1
    90fc:	f640 4031 	movw	r0, #3121	; 0xc31
    9100:	f005 fee2 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    9104:	4606      	mov	r6, r0
    9106:	2800      	cmp	r0, #0
    9108:	d0dd      	beq.n	90c6 <bt_init+0x11e>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
    910a:	2101      	movs	r1, #1
    910c:	f015 fa4a 	bl	1e5a4 <net_buf_add_u8.isra.0>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    9110:	4622      	mov	r2, r4
    9112:	4631      	mov	r1, r6
    9114:	f640 4031 	movw	r0, #3121	; 0xc31
    9118:	f005 ff20 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    911c:	4604      	mov	r4, r0
    911e:	2800      	cmp	r0, #0
    9120:	d0bf      	beq.n	90a2 <bt_init+0xfa>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    9122:	4620      	mov	r0, r4
    9124:	b003      	add	sp, #12
    9126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9128:	20008000 	.word	0x20008000
    912c:	20009c14 	.word	0x20009c14
    9130:	2000803c 	.word	0x2000803c
    9134:	20008044 	.word	0x20008044
    9138:	00024758 	.word	0x00024758
    913c:	0002478b 	.word	0x0002478b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9140:	2100      	movs	r1, #0
    9142:	f242 0003 	movw	r0, #8195	; 0x2003
    9146:	aa01      	add	r2, sp, #4
    9148:	f005 ff08 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    914c:	4604      	mov	r4, r0
    914e:	2800      	cmp	r0, #0
    9150:	d1e7      	bne.n	9122 <bt_init+0x17a>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9152:	9b01      	ldr	r3, [sp, #4]
    9154:	2208      	movs	r2, #8
    9156:	6899      	ldr	r1, [r3, #8]
    9158:	48b9      	ldr	r0, [pc, #740]	; (9440 <bt_init+0x498>)
    915a:	3101      	adds	r1, #1
    915c:	f015 f8d4 	bl	1e308 <memcpy>
	net_buf_unref(rsp);
    9160:	9801      	ldr	r0, [sp, #4]
    9162:	f00e fa83 	bl	1766c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9166:	4621      	mov	r1, r4
    9168:	f242 0002 	movw	r0, #8194	; 0x2002
    916c:	aa01      	add	r2, sp, #4
    916e:	f005 fef5 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    9172:	4604      	mov	r4, r0
    9174:	2800      	cmp	r0, #0
    9176:	d1d4      	bne.n	9122 <bt_init+0x17a>
		le_read_buffer_size_complete(rsp);
    9178:	9b01      	ldr	r3, [sp, #4]
    917a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    917c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9180:	b291      	uxth	r1, r2
    9182:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    9186:	b121      	cbz	r1, 9192 <bt_init+0x1ea>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9188:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    918a:	48ae      	ldr	r0, [pc, #696]	; (9444 <bt_init+0x49c>)
    918c:	4611      	mov	r1, r2
    918e:	f018 f96b 	bl	21468 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    9192:	9801      	ldr	r0, [sp, #4]
    9194:	f00e fa6a 	bl	1766c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9198:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    919c:	f016 0620 	ands.w	r6, r6, #32
    91a0:	f000 80f3 	beq.w	938a <bt_init+0x3e2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    91a4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    91a8:	071f      	lsls	r7, r3, #28
    91aa:	d512      	bpl.n	91d2 <bt_init+0x22a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    91ac:	2100      	movs	r1, #0
    91ae:	f242 001c 	movw	r0, #8220	; 0x201c
    91b2:	aa01      	add	r2, sp, #4
    91b4:	f005 fed2 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    91b8:	4604      	mov	r4, r0
    91ba:	2800      	cmp	r0, #0
    91bc:	d1b1      	bne.n	9122 <bt_init+0x17a>
		le_read_supp_states_complete(rsp);
    91be:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    91c0:	6883      	ldr	r3, [r0, #8]
    91c2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    91c6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    91ca:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    91ce:	f00e fa4d 	bl	1766c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    91d2:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    91d6:	069e      	lsls	r6, r3, #26
    91d8:	d524      	bpl.n	9224 <bt_init+0x27c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    91da:	4668      	mov	r0, sp
    91dc:	f10d 0102 	add.w	r1, sp, #2
    91e0:	f005 ff1e 	bl	f020 <hci_le_read_max_data_len>
		if (err) {
    91e4:	4604      	mov	r4, r0
    91e6:	2800      	cmp	r0, #0
    91e8:	d19b      	bne.n	9122 <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    91ea:	2104      	movs	r1, #4
    91ec:	f242 0024 	movw	r0, #8228	; 0x2024
    91f0:	f005 fe6a 	bl	eec8 <bt_hci_cmd_create>
		if (!buf) {
    91f4:	4606      	mov	r6, r0
    91f6:	2800      	cmp	r0, #0
    91f8:	f43f af65 	beq.w	90c6 <bt_init+0x11e>
    91fc:	2104      	movs	r1, #4
    91fe:	3008      	adds	r0, #8
    9200:	f00e fb4a 	bl	17898 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9204:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9208:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    920a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    920c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9210:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9212:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9214:	f242 0024 	movw	r0, #8228	; 0x2024
    9218:	f005 fea0 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    921c:	4604      	mov	r4, r0
    921e:	2800      	cmp	r0, #0
    9220:	f47f af7f 	bne.w	9122 <bt_init+0x17a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9224:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9228:	065c      	lsls	r4, r3, #25
    922a:	d510      	bpl.n	924e <bt_init+0x2a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    922c:	2100      	movs	r1, #0
    922e:	f242 002a 	movw	r0, #8234	; 0x202a
    9232:	aa01      	add	r2, sp, #4
    9234:	f005 fe92 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    9238:	4604      	mov	r4, r0
    923a:	2800      	cmp	r0, #0
    923c:	f47f af71 	bne.w	9122 <bt_init+0x17a>
		le_read_resolving_list_size_complete(rsp);
    9240:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
    9242:	6883      	ldr	r3, [r0, #8]
    9244:	785b      	ldrb	r3, [r3, #1]
    9246:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    924a:	f00e fa0f 	bl	1766c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    924e:	2108      	movs	r1, #8
    9250:	f242 0001 	movw	r0, #8193	; 0x2001
    9254:	f005 fe38 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    9258:	4604      	mov	r4, r0
    925a:	2800      	cmp	r0, #0
    925c:	f43f af33 	beq.w	90c6 <bt_init+0x11e>
    9260:	2108      	movs	r1, #8
    9262:	4408      	add	r0, r1
    9264:	f00e fb18 	bl	17898 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9268:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    926c:	f240 2302 	movw	r3, #514	; 0x202
    9270:	f011 0f40 	tst.w	r1, #64	; 0x40
    9274:	bf08      	it	eq
    9276:	2303      	moveq	r3, #3
    9278:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    927a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    927c:	bf4c      	ite	mi
    927e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9282:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9286:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    928a:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    928c:	bf48      	it	mi
    928e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9292:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9296:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    929a:	bf18      	it	ne
    929c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    92a0:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    92a4:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    92a6:	bf48      	it	mi
    92a8:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    92ac:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    92ae:	bf08      	it	eq
    92b0:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    92b4:	2100      	movs	r1, #0
    92b6:	f015 f978 	bl	1e5aa <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    92ba:	4621      	mov	r1, r4
    92bc:	2200      	movs	r2, #0
    92be:	f242 0001 	movw	r0, #8193	; 0x2001
    92c2:	f005 fe4b 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    92c6:	4604      	mov	r4, r0
    92c8:	2800      	cmp	r0, #0
    92ca:	f47f af2a 	bne.w	9122 <bt_init+0x17a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    92ce:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    92d2:	0698      	lsls	r0, r3, #26
    92d4:	d41e      	bmi.n	9314 <bt_init+0x36c>
	if (bt_dev.le.acl_mtu) {
    92d6:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    92da:	b9d9      	cbnz	r1, 9314 <bt_init+0x36c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    92dc:	f241 0005 	movw	r0, #4101	; 0x1005
    92e0:	aa01      	add	r2, sp, #4
    92e2:	f005 fe3b 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    92e6:	4604      	mov	r4, r0
    92e8:	2800      	cmp	r0, #0
    92ea:	f47f af1a 	bne.w	9122 <bt_init+0x17a>
	if (bt_dev.le.acl_mtu) {
    92ee:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    92f2:	b963      	cbnz	r3, 930e <bt_init+0x366>
    92f4:	9b01      	ldr	r3, [sp, #4]
    92f6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    92f8:	785a      	ldrb	r2, [r3, #1]
    92fa:	7899      	ldrb	r1, [r3, #2]
    92fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9300:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9304:	889a      	ldrh	r2, [r3, #4]
    9306:	484f      	ldr	r0, [pc, #316]	; (9444 <bt_init+0x49c>)
    9308:	4611      	mov	r1, r2
    930a:	f018 f8ad 	bl	21468 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    930e:	9801      	ldr	r0, [sp, #4]
    9310:	f00e f9ac 	bl	1766c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9314:	2108      	movs	r1, #8
    9316:	f640 4001 	movw	r0, #3073	; 0xc01
    931a:	f005 fdd5 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    931e:	4604      	mov	r4, r0
    9320:	2800      	cmp	r0, #0
    9322:	f43f aed0 	beq.w	90c6 <bt_init+0x11e>
    9326:	2108      	movs	r1, #8
    9328:	4408      	add	r0, r1
    932a:	f00e fab5 	bl	17898 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    932e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9332:	4602      	mov	r2, r0
    9334:	07d9      	lsls	r1, r3, #31
    9336:	d543      	bpl.n	93c0 <bt_init+0x418>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9338:	a13f      	add	r1, pc, #252	; (adr r1, 9438 <bt_init+0x490>)
    933a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    933e:	f015 f934 	bl	1e5aa <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9342:	4621      	mov	r1, r4
    9344:	2200      	movs	r2, #0
    9346:	f640 4001 	movw	r0, #3073	; 0xc01
    934a:	f005 fe07 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    934e:	4604      	mov	r4, r0
    9350:	2800      	cmp	r0, #0
    9352:	f47f aee6 	bne.w	9122 <bt_init+0x17a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9356:	4601      	mov	r1, r0
    9358:	aa01      	add	r2, sp, #4
    935a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    935e:	f005 fdfd 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    9362:	4604      	mov	r4, r0
    9364:	b380      	cbz	r0, 93c8 <bt_init+0x420>
		BT_WARN("Vendor HCI extensions not available");
    9366:	2157      	movs	r1, #87	; 0x57
    9368:	4837      	ldr	r0, [pc, #220]	; (9448 <bt_init+0x4a0>)
			BT_WARN("Failed to read supported vendor features");
    936a:	f013 fb15 	bl	1c998 <printk>
		err = bt_conn_init();
    936e:	f008 fd6b 	bl	11e48 <bt_conn_init>
		if (err) {
    9372:	4604      	mov	r4, r0
    9374:	2800      	cmp	r0, #0
    9376:	f47f aed4 	bne.w	9122 <bt_init+0x17a>
		if (!bt_dev.id_count) {
    937a:	79eb      	ldrb	r3, [r5, #7]
    937c:	2b00      	cmp	r3, #0
    937e:	d154      	bne.n	942a <bt_init+0x482>
			BT_INFO("No ID address. App must call settings_load()");
    9380:	2149      	movs	r1, #73	; 0x49
    9382:	4832      	ldr	r0, [pc, #200]	; (944c <bt_init+0x4a4>)
    9384:	f013 fb08 	bl	1c998 <printk>
			return 0;
    9388:	e6cb      	b.n	9122 <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    938a:	2102      	movs	r1, #2
    938c:	f640 406d 	movw	r0, #3181	; 0xc6d
    9390:	f005 fd9a 	bl	eec8 <bt_hci_cmd_create>
		if (!buf) {
    9394:	4604      	mov	r4, r0
    9396:	2800      	cmp	r0, #0
    9398:	f43f ae95 	beq.w	90c6 <bt_init+0x11e>
    939c:	2102      	movs	r1, #2
    939e:	3008      	adds	r0, #8
    93a0:	f00e fa7a 	bl	17898 <net_buf_simple_add>
		cp_le->le = 0x01;
    93a4:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    93a6:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    93a8:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    93aa:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    93ac:	4632      	mov	r2, r6
    93ae:	f640 406d 	movw	r0, #3181	; 0xc6d
    93b2:	f005 fdd3 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    93b6:	4604      	mov	r4, r0
    93b8:	2800      	cmp	r0, #0
    93ba:	f43f aef3 	beq.w	91a4 <bt_init+0x1fc>
    93be:	e6b0      	b.n	9122 <bt_init+0x17a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    93c0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    93c4:	4822      	ldr	r0, [pc, #136]	; (9450 <bt_init+0x4a8>)
    93c6:	e7ba      	b.n	933e <bt_init+0x396>
	net_buf_unref(rsp);
    93c8:	9801      	ldr	r0, [sp, #4]
    93ca:	f00e f94f 	bl	1766c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    93ce:	4621      	mov	r1, r4
    93d0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    93d4:	aa01      	add	r2, sp, #4
    93d6:	f005 fdc1 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    93da:	4604      	mov	r4, r0
    93dc:	b110      	cbz	r0, 93e4 <bt_init+0x43c>
		BT_WARN("Failed to read supported vendor commands");
    93de:	2157      	movs	r1, #87	; 0x57
    93e0:	481c      	ldr	r0, [pc, #112]	; (9454 <bt_init+0x4ac>)
    93e2:	e7c2      	b.n	936a <bt_init+0x3c2>
	rp.cmds = (void *)rsp->data;
    93e4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    93e6:	2202      	movs	r2, #2
    93e8:	6899      	ldr	r1, [r3, #8]
    93ea:	481b      	ldr	r0, [pc, #108]	; (9458 <bt_init+0x4b0>)
    93ec:	3101      	adds	r1, #1
    93ee:	f014 ff8b 	bl	1e308 <memcpy>
	net_buf_unref(rsp);
    93f2:	9801      	ldr	r0, [sp, #4]
    93f4:	f00e f93a 	bl	1766c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    93f8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    93fc:	075b      	lsls	r3, r3, #29
    93fe:	d5b6      	bpl.n	936e <bt_init+0x3c6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9400:	4621      	mov	r1, r4
    9402:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9406:	aa01      	add	r2, sp, #4
    9408:	f005 fda8 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    940c:	b110      	cbz	r0, 9414 <bt_init+0x46c>
			BT_WARN("Failed to read supported vendor features");
    940e:	2157      	movs	r1, #87	; 0x57
    9410:	4812      	ldr	r0, [pc, #72]	; (945c <bt_init+0x4b4>)
    9412:	e7aa      	b.n	936a <bt_init+0x3c2>
		memcpy(bt_dev.vs_features, rp.feat->features,
    9414:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    9416:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9418:	4811      	ldr	r0, [pc, #68]	; (9460 <bt_init+0x4b8>)
    941a:	6899      	ldr	r1, [r3, #8]
    941c:	4411      	add	r1, r2
    941e:	f014 ff73 	bl	1e308 <memcpy>
		net_buf_unref(rsp);
    9422:	9801      	ldr	r0, [sp, #4]
    9424:	f00e f922 	bl	1766c <net_buf_unref>
    9428:	e7a1      	b.n	936e <bt_init+0x3c6>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    942a:	2104      	movs	r1, #4
    942c:	480d      	ldr	r0, [pc, #52]	; (9464 <bt_init+0x4bc>)
    942e:	f015 f884 	bl	1e53a <atomic_or>
	bt_finalize_init();
    9432:	f006 ffa5 	bl	10380 <bt_finalize_init>
	return 0;
    9436:	e674      	b.n	9122 <bt_init+0x17a>
    9438:	02008890 	.word	0x02008890
    943c:	20008000 	.word	0x20008000
    9440:	20008098 	.word	0x20008098
    9444:	200080c8 	.word	0x200080c8
    9448:	000247b4 	.word	0x000247b4
    944c:	00024839 	.word	0x00024839
    9450:	02008810 	.word	0x02008810
    9454:	000247dd 	.word	0x000247dd
    9458:	20008085 	.word	0x20008085
    945c:	0002480b 	.word	0x0002480b
    9460:	20008084 	.word	0x20008084
    9464:	20008094 	.word	0x20008094

00009468 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    9468:	b500      	push	{lr}
	printk("Application start\n");
    946a:	4807      	ldr	r0, [pc, #28]	; (9488 <main+0x20>)
{
    946c:	b093      	sub	sp, #76	; 0x4c
	printk("Application start\n");
    946e:	f013 fa93 	bl	1c998 <printk>
	// create a new device manager
	deviceManager dManager;
    9472:	4668      	mov	r0, sp
    9474:	f000 f9ac 	bl	97d0 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9478:	2201      	movs	r2, #1
    947a:	4668      	mov	r0, sp
    947c:	4611      	mov	r1, r2
    947e:	f000 faf5 	bl	9a6c <_ZN13deviceManager9setDeviceEbb>
    9482:	b013      	add	sp, #76	; 0x4c
    9484:	f85d fb04 	ldr.w	pc, [sp], #4
    9488:	00022704 	.word	0x00022704

0000948c <_ZN13deviceManager13app_button_cbEv>:
/*
 * button callback method
 */
bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    948c:	4b01      	ldr	r3, [pc, #4]	; (9494 <_ZN13deviceManager13app_button_cbEv+0x8>)
    948e:	7818      	ldrb	r0, [r3, #0]
    9490:	4770      	bx	lr
    9492:	bf00      	nop
    9494:	2000b04c 	.word	0x2000b04c

00009498 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
 * callback method
 * called when while discovering an error appears
 */
void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    9498:	4801      	ldr	r0, [pc, #4]	; (94a0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    949a:	f013 ba7d 	b.w	1c998 <printk>
    949e:	bf00      	nop
    94a0:	00022717 	.word	0x00022717

000094a4 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    94a4:	b513      	push	{r0, r1, r4, lr}
    94a6:	4604      	mov	r4, r0
	printk("Service not found!\n");
    94a8:	4815      	ldr	r0, [pc, #84]	; (9500 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x5c>)
    94aa:	f013 fa75 	bl	1c998 <printk>
	error[0] = 10;
    94ae:	230a      	movs	r3, #10
    94b0:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    94b4:	4b13      	ldr	r3, [pc, #76]	; (9504 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x60>)
    94b6:	2201      	movs	r2, #1
    94b8:	6818      	ldr	r0, [r3, #0]
    94ba:	a901      	add	r1, sp, #4
    94bc:	f000 fd2a 	bl	9f14 <_Z17data_service_sendP7bt_connPKht>
	if (cnt < 2)
    94c0:	4a11      	ldr	r2, [pc, #68]	; (9508 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x64>)
    94c2:	7813      	ldrb	r3, [r2, #0]
    94c4:	2b01      	cmp	r3, #1
    94c6:	d814      	bhi.n	94f2 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x4e>
		cnt++;
    94c8:	3301      	adds	r3, #1
    94ca:	7013      	strb	r3, [r2, #0]
		printk("nbr central connections: %d\n", nbrConnectionsCentral);
    94cc:	4b0f      	ldr	r3, [pc, #60]	; (950c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x68>)
    94ce:	4810      	ldr	r0, [pc, #64]	; (9510 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x6c>)
    94d0:	7819      	ldrb	r1, [r3, #0]
    94d2:	f013 fa61 	bl	1c998 <printk>
		err = bt_gatt_dm_start(conn, BT_UUID_CSC, &discovery_cb, NULL);
    94d6:	490f      	ldr	r1, [pc, #60]	; (9514 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x70>)
    94d8:	2300      	movs	r3, #0
    94da:	4620      	mov	r0, r4
    94dc:	4a0e      	ldr	r2, [pc, #56]	; (9518 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x74>)
    94de:	f003 fb9b 	bl	cc18 <bt_gatt_dm_start>
		if (err) 
    94e2:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    94e6:	d002      	beq.n	94ee <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x4a>
			printk("Could not start service discovery, err %d\n", err);
    94e8:	480c      	ldr	r0, [pc, #48]	; (951c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x78>)
    94ea:	f013 fa55 	bl	1c998 <printk>
}
    94ee:	b002      	add	sp, #8
    94f0:	bd10      	pop	{r4, pc}
		cnt = 0;
    94f2:	2300      	movs	r3, #0
		printk("Service definitly not found -> Restart application\n");
    94f4:	480a      	ldr	r0, [pc, #40]	; (9520 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x7c>)
		cnt = 0;
    94f6:	7013      	strb	r3, [r2, #0]
		printk("Service definitly not found -> Restart application\n");
    94f8:	f013 fa4e 	bl	1c998 <printk>
}
    94fc:	e7f7      	b.n	94ee <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x4a>
    94fe:	bf00      	nop
    9500:	0002273f 	.word	0x0002273f
    9504:	200096e8 	.word	0x200096e8
    9508:	2000b050 	.word	0x2000b050
    950c:	2000b04e 	.word	0x2000b04e
    9510:	00022753 	.word	0x00022753
    9514:	00022664 	.word	0x00022664
    9518:	20008160 	.word	0x20008160
    951c:	00022770 	.word	0x00022770
    9520:	0002279b 	.word	0x0002279b

00009524 <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    9524:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    9526:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9528:	d507      	bpl.n	953a <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    952a:	1e04      	subs	r4, r0, #0
    952c:	bf18      	it	ne
    952e:	2401      	movne	r4, #1
    9530:	4620      	mov	r0, r4
    9532:	f003 ff29 	bl	d388 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    9536:	4b01      	ldr	r3, [pc, #4]	; (953c <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9538:	701c      	strb	r4, [r3, #0]
}
    953a:	bd10      	pop	{r4, pc}
    953c:	2000b04c 	.word	0x2000b04c

00009540 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
 * callback method
 * called every second with data
 */
uint8_t deviceManager::onReceived(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params,
			const void *data, uint16_t length) {
    9540:	b513      	push	{r0, r1, r4, lr}
    9542:	4611      	mov	r1, r2

	// start calculating and showing data only when all characteristics are subscribed
	if (subscriptionDone)
    9544:	4a31      	ldr	r2, [pc, #196]	; (960c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    9546:	7812      	ldrb	r2, [r2, #0]
    9548:	2a00      	cmp	r2, #0
    954a:	d034      	beq.n	95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
	{
		if (length > 0)
    954c:	2b00      	cmp	r3, #0
    954e:	d032      	beq.n	95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
		{
			// save the new received data
			deviceManager::data.saveData(data);
    9550:	4c2f      	ldr	r4, [pc, #188]	; (9610 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9552:	4620      	mov	r0, r4
    9554:	f000 fc58 	bl	9e08 <_ZN7dataCSC8saveDataEPKv>

			uint8_t val_after_comma;
			uint8_t dataToSend[3];

			if (getDiameter() != 0 && diameterSet == false)
    9558:	f000 fd06 	bl	9f68 <_Z11getDiameterv>
    955c:	2200      	movs	r2, #0
    955e:	2300      	movs	r3, #0
    9560:	f7ff fa92 	bl	8a88 <__aeabi_dcmpeq>
    9564:	bb50      	cbnz	r0, 95bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    9566:	4b2b      	ldr	r3, [pc, #172]	; (9614 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9568:	781a      	ldrb	r2, [r3, #0]
    956a:	bb3a      	cbnz	r2, 95bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
			{
				diameterSet = true;
    956c:	2201      	movs	r2, #1
    956e:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    9570:	f000 fcfa 	bl	9f68 <_Z11getDiameterv>
    9574:	e9c4 0106 	strd	r0, r1, [r4, #24]
			{
				// reset button was pressed
				diameterSet = false;
			}
			
			if (deviceManager::data.type == CSC_SPEED)
    9578:	7c24      	ldrb	r4, [r4, #16]
    957a:	2c01      	cmp	r4, #1
    957c:	d12d      	bne.n	95da <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
			{
				// calculate speed
				if (diameterSet)
    957e:	4b25      	ldr	r3, [pc, #148]	; (9614 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9580:	781b      	ldrb	r3, [r3, #0]
    9582:	b1c3      	cbz	r3, 95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				{
					uint16_t speed = deviceManager::data.calcSpeed();
    9584:	4822      	ldr	r0, [pc, #136]	; (9610 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9586:	f7ff fc5f 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>

					if (speed > 0)
    958a:	b1a0      	cbz	r0, 95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					{
						// 1. value: type -> speed
						// 2. value: 8 bit on the left side of comma
						// 3. value: 8 bit on the right side of comma
						dataToSend[0] = CSC_SPEED;
						dataToSend[1] = (uint8_t) (speed/100);	
    958c:	2164      	movs	r1, #100	; 0x64
    958e:	fbb0 f1f1 	udiv	r1, r0, r1
						dataToSend[0] = CSC_SPEED;
    9592:	f88d 4004 	strb.w	r4, [sp, #4]
						val_after_comma = (uint8_t) (speed);
						dataToSend[2] = val_after_comma;

						if (peripheralConn != nullptr)
    9596:	4c20      	ldr	r4, [pc, #128]	; (9618 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[1] = (uint8_t) (speed/100);	
    9598:	b289      	uxth	r1, r1
						if (peripheralConn != nullptr)
    959a:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) (speed/100);	
    959c:	f88d 1005 	strb.w	r1, [sp, #5]
						val_after_comma = (uint8_t) (speed);
    95a0:	f88d 0006 	strb.w	r0, [sp, #6]
						if (peripheralConn != nullptr)
    95a4:	b13b      	cbz	r3, 95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						{	
							printk("Speed: %d\n",speed/100);
    95a6:	481d      	ldr	r0, [pc, #116]	; (961c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
						dataToSend[0] = CSC_CADENCE;	
						dataToSend[1] = (uint8_t) rpm;
						dataToSend[2] = (uint8_t) (rpm >> 8);	
						if (peripheralConn != nullptr)
						{
							printk("Cadence rpm: %d\n",rpm);
    95a8:	f013 f9f6 	bl	1c998 <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    95ac:	2203      	movs	r2, #3
    95ae:	6820      	ldr	r0, [r4, #0]
    95b0:	a901      	add	r1, sp, #4
    95b2:	f000 fcaf 	bl	9f14 <_Z17data_service_sendP7bt_connPKht>
				}
			}
		}
	}
	return BT_GATT_ITER_CONTINUE;
}
    95b6:	2001      	movs	r0, #1
    95b8:	b002      	add	sp, #8
    95ba:	bd10      	pop	{r4, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    95bc:	f000 fcd4 	bl	9f68 <_Z11getDiameterv>
    95c0:	2200      	movs	r2, #0
    95c2:	2300      	movs	r3, #0
    95c4:	f7ff fa60 	bl	8a88 <__aeabi_dcmpeq>
    95c8:	2800      	cmp	r0, #0
    95ca:	d0d5      	beq.n	9578 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    95cc:	4b11      	ldr	r3, [pc, #68]	; (9614 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    95ce:	781a      	ldrb	r2, [r3, #0]
    95d0:	2a00      	cmp	r2, #0
    95d2:	d0d1      	beq.n	9578 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
				diameterSet = false;
    95d4:	2200      	movs	r2, #0
    95d6:	701a      	strb	r2, [r3, #0]
    95d8:	e7ce      	b.n	9578 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
			else if (deviceManager::data.type == CSC_CADENCE)
    95da:	2c02      	cmp	r4, #2
    95dc:	d1eb      	bne.n	95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				if (diameterSet)
    95de:	4b0d      	ldr	r3, [pc, #52]	; (9614 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    95e0:	781b      	ldrb	r3, [r3, #0]
    95e2:	2b00      	cmp	r3, #0
    95e4:	d0e7      	beq.n	95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t rpm = deviceManager::data.calcRPM();
    95e6:	480a      	ldr	r0, [pc, #40]	; (9610 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    95e8:	f000 fc30 	bl	9e4c <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0)
    95ec:	4601      	mov	r1, r0
    95ee:	2800      	cmp	r0, #0
    95f0:	d0e1      	beq.n	95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[0] = CSC_CADENCE;	
    95f2:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    95f6:	4c08      	ldr	r4, [pc, #32]	; (9618 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    95f8:	0a03      	lsrs	r3, r0, #8
    95fa:	f88d 3006 	strb.w	r3, [sp, #6]
						if (peripheralConn != nullptr)
    95fe:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    9600:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    9604:	2b00      	cmp	r3, #0
    9606:	d0d6      	beq.n	95b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Cadence rpm: %d\n",rpm);
    9608:	4805      	ldr	r0, [pc, #20]	; (9620 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    960a:	e7cd      	b.n	95a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
    960c:	2000b04d 	.word	0x2000b04d
    9610:	200086c8 	.word	0x200086c8
    9614:	2000b049 	.word	0x2000b049
    9618:	200096e8 	.word	0x200096e8
    961c:	000227cf 	.word	0x000227cf
    9620:	000227da 	.word	0x000227da

00009624 <bt_addr_le_to_str.constprop.0.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9624:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    9626:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9628:	b08a      	sub	sp, #40	; 0x28
    962a:	4604      	mov	r4, r0
    962c:	460e      	mov	r6, r1
    962e:	ad07      	add	r5, sp, #28
    9630:	2b03      	cmp	r3, #3
    9632:	d820      	bhi.n	9676 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    9634:	e8df f003 	tbb	[pc, r3]
    9638:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    963c:	4911      	ldr	r1, [pc, #68]	; (9684 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    963e:	4628      	mov	r0, r5
    9640:	f014 fe08 	bl	1e254 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9644:	7863      	ldrb	r3, [r4, #1]
    9646:	211e      	movs	r1, #30
    9648:	9304      	str	r3, [sp, #16]
    964a:	78a3      	ldrb	r3, [r4, #2]
    964c:	4630      	mov	r0, r6
    964e:	9303      	str	r3, [sp, #12]
    9650:	78e3      	ldrb	r3, [r4, #3]
    9652:	4a0d      	ldr	r2, [pc, #52]	; (9688 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    9654:	9302      	str	r3, [sp, #8]
    9656:	7923      	ldrb	r3, [r4, #4]
    9658:	9505      	str	r5, [sp, #20]
    965a:	9301      	str	r3, [sp, #4]
    965c:	7963      	ldrb	r3, [r4, #5]
    965e:	9300      	str	r3, [sp, #0]
    9660:	79a3      	ldrb	r3, [r4, #6]
    9662:	f013 f9a6 	bl	1c9b2 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    9666:	b00a      	add	sp, #40	; 0x28
    9668:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    966a:	4908      	ldr	r1, [pc, #32]	; (968c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    966c:	e7e7      	b.n	963e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    966e:	4908      	ldr	r1, [pc, #32]	; (9690 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    9670:	e7e5      	b.n	963e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    9672:	4908      	ldr	r1, [pc, #32]	; (9694 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    9674:	e7e3      	b.n	963e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9676:	210a      	movs	r1, #10
    9678:	4628      	mov	r0, r5
    967a:	4a07      	ldr	r2, [pc, #28]	; (9698 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    967c:	f013 f999 	bl	1c9b2 <snprintk>
		break;
    9680:	e7e0      	b.n	9644 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    9682:	bf00      	nop
    9684:	000227eb 	.word	0x000227eb
    9688:	00022814 	.word	0x00022814
    968c:	000227f2 	.word	0x000227f2
    9690:	000227f9 	.word	0x000227f9
    9694:	00022803 	.word	0x00022803
    9698:	0002280d 	.word	0x0002280d

0000969c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    969c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    96a0:	b099      	sub	sp, #100	; 0x64
    char speed_sensor_1[18] = "D4:D6:5E:D1:66:D";
    96a2:	ad01      	add	r5, sp, #4
			      bool connectable) {
    96a4:	4604      	mov	r4, r0
    96a6:	4616      	mov	r6, r2
    96a8:	462f      	mov	r7, r5
    char speed_sensor_1[18] = "D4:D6:5E:D1:66:D";
    96aa:	4b3d      	ldr	r3, [pc, #244]	; (97a0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x104>)
    96ac:	f103 0c10 	add.w	ip, r3, #16
    96b0:	462a      	mov	r2, r5
    96b2:	6818      	ldr	r0, [r3, #0]
    96b4:	6859      	ldr	r1, [r3, #4]
    96b6:	3308      	adds	r3, #8
    96b8:	c203      	stmia	r2!, {r0, r1}
    96ba:	4563      	cmp	r3, ip
    96bc:	4615      	mov	r5, r2
    96be:	d1f7      	bne.n	96b0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14>
    96c0:	781b      	ldrb	r3, [r3, #0]
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    96c2:	ad06      	add	r5, sp, #24
    char speed_sensor_1[18] = "D4:D6:5E:D1:66:D";
    96c4:	7013      	strb	r3, [r2, #0]
    96c6:	2300      	movs	r3, #0
    96c8:	46a8      	mov	r8, r5
    96ca:	f88d 3015 	strb.w	r3, [sp, #21]
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    96ce:	4b35      	ldr	r3, [pc, #212]	; (97a4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x108>)
    96d0:	f103 0c10 	add.w	ip, r3, #16
    96d4:	462a      	mov	r2, r5
    96d6:	6818      	ldr	r0, [r3, #0]
    96d8:	6859      	ldr	r1, [r3, #4]
    96da:	3308      	adds	r3, #8
    96dc:	c203      	stmia	r2!, {r0, r1}
    96de:	4563      	cmp	r3, ip
    96e0:	4615      	mov	r5, r2
    96e2:	d1f7      	bne.n	96d4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x38>
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    96e4:	ad0b      	add	r5, sp, #44	; 0x2c
    96e6:	46a9      	mov	r9, r5
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    96e8:	881b      	ldrh	r3, [r3, #0]
    96ea:	8013      	strh	r3, [r2, #0]
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    96ec:	4b2e      	ldr	r3, [pc, #184]	; (97a8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10c>)
    96ee:	f103 0c10 	add.w	ip, r3, #16
    96f2:	462a      	mov	r2, r5
    96f4:	6818      	ldr	r0, [r3, #0]
    96f6:	6859      	ldr	r1, [r3, #4]
    96f8:	3308      	adds	r3, #8
    96fa:	c203      	stmia	r2!, {r0, r1}
    96fc:	4563      	cmp	r3, ip
    96fe:	4615      	mov	r5, r2
    9700:	d1f7      	bne.n	96f2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x56>
    9702:	881b      	ldrh	r3, [r3, #0]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9704:	a910      	add	r1, sp, #64	; 0x40
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    9706:	8013      	strh	r3, [r2, #0]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9708:	6823      	ldr	r3, [r4, #0]
    970a:	6818      	ldr	r0, [r3, #0]
    970c:	f7ff ff8a 	bl	9624 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
    9710:	4b26      	ldr	r3, [pc, #152]	; (97ac <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    9712:	4a27      	ldr	r2, [pc, #156]	; (97b0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    9714:	4827      	ldr	r0, [pc, #156]	; (97b4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9716:	a910      	add	r1, sp, #64	; 0x40
    9718:	2e00      	cmp	r6, #0
    971a:	bf08      	it	eq
    971c:	461a      	moveq	r2, r3
    971e:	f013 f93b 	bl	1c998 <printk>
	if ((strstr(addr,speed_sensor_1) || strstr(addr,speed_sensor_1)) && !once_speed)
    9722:	4639      	mov	r1, r7
    9724:	a810      	add	r0, sp, #64	; 0x40
    9726:	f014 fd75 	bl	1e214 <strstr>
    972a:	b190      	cbz	r0, 9752 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xb6>
    972c:	4b22      	ldr	r3, [pc, #136]	; (97b8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    972e:	781a      	ldrb	r2, [r3, #0]
    9730:	b9aa      	cbnz	r2, 975e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc2>
		once_speed = true;
    9732:	2201      	movs	r2, #1
    9734:	701a      	strb	r2, [r3, #0]
		bt_scan_stop();
    9736:	f014 f82e 	bl	1d796 <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
    973a:	4b20      	ldr	r3, [pc, #128]	; (97bc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    973c:	6820      	ldr	r0, [r4, #0]
    973e:	781a      	ldrb	r2, [r3, #0]
    9740:	4b1f      	ldr	r3, [pc, #124]	; (97c0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9742:	4920      	ldr	r1, [pc, #128]	; (97c4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9744:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9748:	6800      	ldr	r0, [r0, #0]
    974a:	6862      	ldr	r2, [r4, #4]
    974c:	f008 f8ae 	bl	118ac <bt_conn_le_create>
    9750:	e005      	b.n	975e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc2>
	if ((strstr(addr,speed_sensor_1) || strstr(addr,speed_sensor_1)) && !once_speed)
    9752:	4639      	mov	r1, r7
    9754:	a810      	add	r0, sp, #64	; 0x40
    9756:	f014 fd5d 	bl	1e214 <strstr>
    975a:	2800      	cmp	r0, #0
    975c:	d1e6      	bne.n	972c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x90>
	if ((strstr(addr,cadence_sensor_1) || strstr(addr,cadence_sensor_2)) && !once_cadence)
    975e:	4641      	mov	r1, r8
    9760:	a810      	add	r0, sp, #64	; 0x40
    9762:	f014 fd57 	bl	1e214 <strstr>
    9766:	b190      	cbz	r0, 978e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf2>
    9768:	4b17      	ldr	r3, [pc, #92]	; (97c8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    976a:	781a      	ldrb	r2, [r3, #0]
    976c:	b9aa      	cbnz	r2, 979a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xfe>
		once_cadence = true;
    976e:	2201      	movs	r2, #1
    9770:	701a      	strb	r2, [r3, #0]
		bt_scan_stop();
    9772:	f014 f810 	bl	1d796 <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
    9776:	4b11      	ldr	r3, [pc, #68]	; (97bc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9778:	6820      	ldr	r0, [r4, #0]
    977a:	781a      	ldrb	r2, [r3, #0]
    977c:	4b10      	ldr	r3, [pc, #64]	; (97c0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    977e:	4913      	ldr	r1, [pc, #76]	; (97cc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9780:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9784:	6800      	ldr	r0, [r0, #0]
    9786:	6862      	ldr	r2, [r4, #4]
    9788:	f008 f890 	bl	118ac <bt_conn_le_create>
}
    978c:	e005      	b.n	979a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xfe>
	if ((strstr(addr,cadence_sensor_1) || strstr(addr,cadence_sensor_2)) && !once_cadence)
    978e:	4649      	mov	r1, r9
    9790:	a810      	add	r0, sp, #64	; 0x40
    9792:	f014 fd3f 	bl	1e214 <strstr>
    9796:	2800      	cmp	r0, #0
    9798:	d1e6      	bne.n	9768 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xcc>
}
    979a:	b019      	add	sp, #100	; 0x64
    979c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    97a0:	00021b60 	.word	0x00021b60
    97a4:	0002286c 	.word	0x0002286c
    97a8:	0002287e 	.word	0x0002287e
    97ac:	0002283b 	.word	0x0002283b
    97b0:	00022837 	.word	0x00022837
    97b4:	0002283e 	.word	0x0002283e
    97b8:	2000b048 	.word	0x2000b048
    97bc:	2000b04e 	.word	0x2000b04e
    97c0:	200096ec 	.word	0x200096ec
    97c4:	00021c5c 	.word	0x00021c5c
    97c8:	2000b04b 	.word	0x2000b04b
    97cc:	00021c6c 	.word	0x00021c6c

000097d0 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    97d0:	b510      	push	{r4, lr}
    97d2:	221c      	movs	r2, #28
    97d4:	4604      	mov	r4, r0
    97d6:	2100      	movs	r1, #0
    97d8:	f014 fdc1 	bl	1e35e <memset>
    97dc:	4a0d      	ldr	r2, [pc, #52]	; (9814 <_ZN13deviceManagerC1Ev+0x44>)
    97de:	4b0e      	ldr	r3, [pc, #56]	; (9818 <_ZN13deviceManagerC1Ev+0x48>)
    97e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    97e4:	2224      	movs	r2, #36	; 0x24
    97e6:	6023      	str	r3, [r4, #0]
    97e8:	4b0c      	ldr	r3, [pc, #48]	; (981c <_ZN13deviceManagerC1Ev+0x4c>)
    97ea:	6063      	str	r3, [r4, #4]
    97ec:	f104 031c 	add.w	r3, r4, #28
    97f0:	e883 0003 	stmia.w	r3, {r0, r1}
    97f4:	18a0      	adds	r0, r4, r2
    97f6:	2100      	movs	r1, #0
    97f8:	f014 fdb1 	bl	1e35e <memset>
		centralConnections[i] = nullptr;
    97fc:	2300      	movs	r3, #0
    97fe:	4a08      	ldr	r2, [pc, #32]	; (9820 <_ZN13deviceManagerC1Ev+0x50>)
}
    9800:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    9802:	e9c2 3300 	strd	r3, r3, [r2]
    9806:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    980a:	4a06      	ldr	r2, [pc, #24]	; (9824 <_ZN13deviceManagerC1Ev+0x54>)
    980c:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    980e:	4a06      	ldr	r2, [pc, #24]	; (9828 <_ZN13deviceManagerC1Ev+0x58>)
    9810:	7013      	strb	r3, [r2, #0]
}
    9812:	bd10      	pop	{r4, pc}
    9814:	00021b74 	.word	0x00021b74
    9818:	00009ab1 	.word	0x00009ab1
    981c:	00009b8d 	.word	0x00009b8d
    9820:	200096ec 	.word	0x200096ec
    9824:	2000b047 	.word	0x2000b047
    9828:	2000b046 	.word	0x2000b046

0000982c <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    982c:	4a07      	ldr	r2, [pc, #28]	; (984c <_ZN13deviceManager9getDeviceEv+0x20>)
    982e:	4b08      	ldr	r3, [pc, #32]	; (9850 <_ZN13deviceManager9getDeviceEv+0x24>)
    9830:	7812      	ldrb	r2, [r2, #0]
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	b122      	cbz	r2, 9840 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    9836:	2b00      	cmp	r3, #0
    9838:	bf14      	ite	ne
    983a:	2003      	movne	r0, #3
    983c:	2001      	moveq	r0, #1
    983e:	4770      	bx	lr
        return 0;
    9840:	2b00      	cmp	r3, #0
    9842:	bf14      	ite	ne
    9844:	2002      	movne	r0, #2
    9846:	2000      	moveq	r0, #0
}
    9848:	4770      	bx	lr
    984a:	bf00      	nop
    984c:	2000b04f 	.word	0x2000b04f
    9850:	2000b04a 	.word	0x2000b04a

00009854 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    9854:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    9856:	4805      	ldr	r0, [pc, #20]	; (986c <_ZN13deviceManager10initButtonEv+0x18>)
    9858:	f00f f8c2 	bl	189e0 <dk_buttons_init>
	if (err) {
    985c:	4604      	mov	r4, r0
    985e:	b118      	cbz	r0, 9868 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    9860:	4601      	mov	r1, r0
    9862:	4803      	ldr	r0, [pc, #12]	; (9870 <_ZN13deviceManager10initButtonEv+0x1c>)
    9864:	f013 f898 	bl	1c998 <printk>
}
    9868:	4620      	mov	r0, r4
    986a:	bd10      	pop	{r4, pc}
    986c:	00009525 	.word	0x00009525
    9870:	00022890 	.word	0x00022890

00009874 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9874:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    9876:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9878:	490b      	ldr	r1, [pc, #44]	; (98a8 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    987a:	9300      	str	r3, [sp, #0]
    987c:	2202      	movs	r2, #2
    987e:	4b0b      	ldr	r3, [pc, #44]	; (98ac <_ZN13deviceManager16startAdvertisingEv+0x38>)
    9880:	480b      	ldr	r0, [pc, #44]	; (98b0 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    9882:	f007 f82f 	bl	108e4 <bt_le_adv_start>
	if (err) {
    9886:	4601      	mov	r1, r0
    9888:	b128      	cbz	r0, 9896 <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    988a:	480a      	ldr	r0, [pc, #40]	; (98b4 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    988c:	b003      	add	sp, #12
    988e:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    9892:	f013 b881 	b.w	1c998 <printk>
	printk("Advertising successfully started\n");
    9896:	4808      	ldr	r0, [pc, #32]	; (98b8 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    9898:	f013 f87e 	bl	1c998 <printk>
	printk("Waiting for connection...\n");
    989c:	4807      	ldr	r0, [pc, #28]	; (98bc <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    989e:	b003      	add	sp, #12
    98a0:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    98a4:	f013 b878 	b.w	1c998 <printk>
    98a8:	00021cb8 	.word	0x00021cb8
    98ac:	00021cc8 	.word	0x00021cc8
    98b0:	00021c48 	.word	0x00021c48
    98b4:	000228af 	.word	0x000228af
    98b8:	000228d5 	.word	0x000228d5
    98bc:	000228f7 	.word	0x000228f7

000098c0 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    98c0:	b510      	push	{r4, lr}
    98c2:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    98c4:	f7ff ffb2 	bl	982c <_ZN13deviceManager9getDeviceEv>
    98c8:	1e83      	subs	r3, r0, #2
    98ca:	b2db      	uxtb	r3, r3
    98cc:	2b01      	cmp	r3, #1
    98ce:	d82d      	bhi.n	992c <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    98d0:	f00f f820 	bl	18914 <dk_leds_init>
        if (err) {
    98d4:	4601      	mov	r1, r0
    98d6:	b120      	cbz	r0, 98e2 <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    98d8:	4815      	ldr	r0, [pc, #84]	; (9930 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    98da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    98de:	f013 b85b 	b.w	1c998 <printk>
        err = initButton();
    98e2:	f7ff ffb7 	bl	9854 <_ZN13deviceManager10initButtonEv>
    98e6:	4601      	mov	r1, r0
        if (err) {
    98e8:	b108      	cbz	r0, 98ee <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    98ea:	4812      	ldr	r0, [pc, #72]	; (9934 <_ZN13deviceManager14initPeripheralEv+0x74>)
    98ec:	e7f5      	b.n	98da <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    98ee:	f006 fd5f 	bl	103b0 <bt_enable>
        if (err) {
    98f2:	4601      	mov	r1, r0
    98f4:	b108      	cbz	r0, 98fa <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    98f6:	4810      	ldr	r0, [pc, #64]	; (9938 <_ZN13deviceManager14initPeripheralEv+0x78>)
    98f8:	e7ef      	b.n	98da <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    98fa:	4810      	ldr	r0, [pc, #64]	; (993c <_ZN13deviceManager14initPeripheralEv+0x7c>)
    98fc:	f013 f84c 	bl	1c998 <printk>
		bt_conn_cb_register(&conn_callbacks);
    9900:	4620      	mov	r0, r4
    9902:	f007 fcad 	bl	11260 <bt_conn_cb_register>
            settings_load();
    9906:	f013 fcd7 	bl	1d2b8 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    990a:	f104 001c 	add.w	r0, r4, #28
    990e:	f003 fd31 	bl	d374 <bt_lbs_init>
        if (err) {
    9912:	4601      	mov	r1, r0
    9914:	b108      	cbz	r0, 991a <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    9916:	480a      	ldr	r0, [pc, #40]	; (9940 <_ZN13deviceManager14initPeripheralEv+0x80>)
    9918:	e7df      	b.n	98da <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    991a:	f000 fae9 	bl	9ef0 <_Z17data_service_initv>
		if (err) 
    991e:	4601      	mov	r1, r0
    9920:	2800      	cmp	r0, #0
    9922:	d1f8      	bne.n	9916 <_ZN13deviceManager14initPeripheralEv+0x56>
}
    9924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    9928:	f7ff bfa4 	b.w	9874 <_ZN13deviceManager16startAdvertisingEv>
}
    992c:	bd10      	pop	{r4, pc}
    992e:	bf00      	nop
    9930:	00022912 	.word	0x00022912
    9934:	0002292d 	.word	0x0002292d
    9938:	0002294a 	.word	0x0002294a
    993c:	0002296a 	.word	0x0002296a
    9940:	00022981 	.word	0x00022981

00009944 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    9944:	b500      	push	{lr}
    9946:	b089      	sub	sp, #36	; 0x24
	struct bt_le_scan_param scanParam =
    9948:	ab03      	add	r3, sp, #12
    994a:	2100      	movs	r1, #0
    994c:	4618      	mov	r0, r3
    994e:	2214      	movs	r2, #20
    9950:	f014 fd05 	bl	1e35e <memset>
    9954:	2201      	movs	r2, #1
    9956:	f88d 200c 	strb.w	r2, [sp, #12]
    995a:	9204      	str	r2, [sp, #16]
    995c:	4a0f      	ldr	r2, [pc, #60]	; (999c <_ZN13deviceManager8initScanEv+0x58>)
	};
    995e:	9000      	str	r0, [sp, #0]
	struct bt_le_scan_param scanParam =
    9960:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9962:	2200      	movs	r2, #0
    9964:	9201      	str	r2, [sp, #4]
    9966:	4a0e      	ldr	r2, [pc, #56]	; (99a0 <_ZN13deviceManager8initScanEv+0x5c>)
	bt_scan_init(&scanInit);
    9968:	4668      	mov	r0, sp
	struct bt_scan_init_param scanInit = {
    996a:	9202      	str	r2, [sp, #8]
	bt_scan_init(&scanInit);
    996c:	f003 fc88 	bl	d280 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    9970:	480c      	ldr	r0, [pc, #48]	; (99a4 <_ZN13deviceManager8initScanEv+0x60>)
    9972:	f003 faef 	bl	cf54 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9976:	490c      	ldr	r1, [pc, #48]	; (99a8 <_ZN13deviceManager8initScanEv+0x64>)
    9978:	2003      	movs	r0, #3
    997a:	f003 fafb 	bl	cf74 <bt_scan_filter_add>
	if (err) {
    997e:	4601      	mov	r1, r0
    9980:	b128      	cbz	r0, 998e <_ZN13deviceManager8initScanEv+0x4a>
		printk("Scanning filters cannot be set\n");
    9982:	480a      	ldr	r0, [pc, #40]	; (99ac <_ZN13deviceManager8initScanEv+0x68>)
		printk("Filters cannot be turned on\n");
    9984:	f013 f808 	bl	1c998 <printk>
}
    9988:	b009      	add	sp, #36	; 0x24
    998a:	f85d fb04 	ldr.w	pc, [sp], #4
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    998e:	2004      	movs	r0, #4
    9990:	f003 fb54 	bl	d03c <bt_scan_filter_enable>
	if (err) {
    9994:	2800      	cmp	r0, #0
    9996:	d0f7      	beq.n	9988 <_ZN13deviceManager8initScanEv+0x44>
		printk("Filters cannot be turned on\n");
    9998:	4805      	ldr	r0, [pc, #20]	; (99b0 <_ZN13deviceManager8initScanEv+0x6c>)
    999a:	e7f3      	b.n	9984 <_ZN13deviceManager8initScanEv+0x40>
    999c:	00300060 	.word	0x00300060
    99a0:	00022648 	.word	0x00022648
    99a4:	2000816c 	.word	0x2000816c
    99a8:	00022650 	.word	0x00022650
    99ac:	0002299e 	.word	0x0002299e
    99b0:	000229be 	.word	0x000229be

000099b4 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    99b4:	2001      	movs	r0, #1
void deviceManager::startScan(){
    99b6:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    99b8:	f003 fc94 	bl	d2e4 <bt_scan_start>
	if (err) {
    99bc:	4601      	mov	r1, r0
    99be:	b110      	cbz	r0, 99c6 <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    99c0:	4803      	ldr	r0, [pc, #12]	; (99d0 <_ZN13deviceManager9startScanEv+0x1c>)
    99c2:	f012 ffe9 	bl	1c998 <printk>
}
    99c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    99ca:	4802      	ldr	r0, [pc, #8]	; (99d4 <_ZN13deviceManager9startScanEv+0x20>)
    99cc:	f012 bfe4 	b.w	1c998 <printk>
    99d0:	000229db 	.word	0x000229db
    99d4:	000229fd 	.word	0x000229fd

000099d8 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    99d8:	b510      	push	{r4, lr}
    99da:	4604      	mov	r4, r0
	printk("Init Central\n");
    99dc:	481c      	ldr	r0, [pc, #112]	; (9a50 <_ZN13deviceManager11initCentralEv+0x78>)
    99de:	f012 ffdb 	bl	1c998 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    99e2:	f7ff ff23 	bl	982c <_ZN13deviceManager9getDeviceEv>
    99e6:	2801      	cmp	r0, #1
    99e8:	d00a      	beq.n	9a00 <_ZN13deviceManager11initCentralEv+0x28>
    99ea:	2803      	cmp	r0, #3
    99ec:	d12f      	bne.n	9a4e <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    99ee:	4620      	mov	r0, r4
    99f0:	f007 fc36 	bl	11260 <bt_conn_cb_register>
		initScan();
    99f4:	f7ff ffa6 	bl	9944 <_ZN13deviceManager8initScanEv>
}
    99f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    99fc:	f7ff bfda 	b.w	99b4 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9a00:	2000      	movs	r0, #0
    9a02:	f006 fcd5 	bl	103b0 <bt_enable>
			if (err) {
    9a06:	4601      	mov	r1, r0
    9a08:	b120      	cbz	r0, 9a14 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    9a0a:	4812      	ldr	r0, [pc, #72]	; (9a54 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9a10:	f012 bfc2 	b.w	1c998 <printk>
			printk("Bluetooth ready\n");
    9a14:	4810      	ldr	r0, [pc, #64]	; (9a58 <_ZN13deviceManager11initCentralEv+0x80>)
    9a16:	f012 ffbf 	bl	1c998 <printk>
			err = dk_leds_init();
    9a1a:	f00e ff7b 	bl	18914 <dk_leds_init>
			if (err) {
    9a1e:	4601      	mov	r1, r0
    9a20:	b108      	cbz	r0, 9a26 <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    9a22:	480e      	ldr	r0, [pc, #56]	; (9a5c <_ZN13deviceManager11initCentralEv+0x84>)
    9a24:	e7f2      	b.n	9a0c <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    9a26:	f7ff ff15 	bl	9854 <_ZN13deviceManager10initButtonEv>
			if (err) {
    9a2a:	4601      	mov	r1, r0
    9a2c:	b108      	cbz	r0, 9a32 <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    9a2e:	480c      	ldr	r0, [pc, #48]	; (9a60 <_ZN13deviceManager11initCentralEv+0x88>)
    9a30:	e7ec      	b.n	9a0c <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    9a32:	f104 001c 	add.w	r0, r4, #28
    9a36:	f003 fc9d 	bl	d374 <bt_lbs_init>
			if (err) {
    9a3a:	4601      	mov	r1, r0
    9a3c:	b108      	cbz	r0, 9a42 <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9a3e:	4809      	ldr	r0, [pc, #36]	; (9a64 <_ZN13deviceManager11initCentralEv+0x8c>)
    9a40:	e7e4      	b.n	9a0c <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    9a42:	f013 fc39 	bl	1d2b8 <settings_load>
				printk("Settings loaded\n");
    9a46:	4808      	ldr	r0, [pc, #32]	; (9a68 <_ZN13deviceManager11initCentralEv+0x90>)
    9a48:	f012 ffa6 	bl	1c998 <printk>
    9a4c:	e7cf      	b.n	99ee <_ZN13deviceManager11initCentralEv+0x16>
}
    9a4e:	bd10      	pop	{r4, pc}
    9a50:	00022a0a 	.word	0x00022a0a
    9a54:	0002294a 	.word	0x0002294a
    9a58:	00022a18 	.word	0x00022a18
    9a5c:	00022912 	.word	0x00022912
    9a60:	0002292d 	.word	0x0002292d
    9a64:	00022981 	.word	0x00022981
    9a68:	00022a29 	.word	0x00022a29

00009a6c <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    9a6c:	b410      	push	{r4}
    isPeripheral = p;
    9a6e:	4c09      	ldr	r4, [pc, #36]	; (9a94 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    9a70:	4603      	mov	r3, r0
    isPeripheral = p;
    9a72:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9a74:	4c08      	ldr	r4, [pc, #32]	; (9a98 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    9a76:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9a78:	b139      	cbz	r1, 9a8a <_ZN13deviceManager9setDeviceEbb+0x1e>
    9a7a:	b11a      	cbz	r2, 9a84 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9a7c:	4618      	mov	r0, r3
}
    9a7e:	bc10      	pop	{r4}
		initPeripheral();
    9a80:	f7ff bf1e 	b.w	98c0 <_ZN13deviceManager14initPeripheralEv>
}
    9a84:	bc10      	pop	{r4}
		initCentral();
    9a86:	f7ff bfa7 	b.w	99d8 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9a8a:	2a00      	cmp	r2, #0
    9a8c:	d1f6      	bne.n	9a7c <_ZN13deviceManager9setDeviceEbb+0x10>
}
    9a8e:	bc10      	pop	{r4}
    9a90:	4770      	bx	lr
    9a92:	bf00      	nop
    9a94:	2000b04a 	.word	0x2000b04a
    9a98:	2000b04f 	.word	0x2000b04f

00009a9c <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9a9c:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9a9e:	4803      	ldr	r0, [pc, #12]	; (9aac <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9aa0:	f012 ff7a 	bl	1c998 <printk>
}
    9aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9aa8:	f7ff bf84 	b.w	99b4 <_ZN13deviceManager9startScanEv>
    9aac:	00022a3a 	.word	0x00022a3a

00009ab0 <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9ab0:	b570      	push	{r4, r5, r6, lr}
    9ab2:	b090      	sub	sp, #64	; 0x40
    9ab4:	460d      	mov	r5, r1
	int error = bt_conn_get_info(conn,&info);
    9ab6:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9ab8:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9aba:	f007 fecb 	bl	11854 <bt_conn_get_info>
	if (error)
    9abe:	b120      	cbz	r0, 9aca <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    9ac0:	4826      	ldr	r0, [pc, #152]	; (9b5c <_ZN13deviceManager9connectedEP7bt_connh+0xac>)
    9ac2:	f012 ff69 	bl	1c998 <printk>
}
    9ac6:	b010      	add	sp, #64	; 0x40
    9ac8:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9aca:	f89d 4005 	ldrb.w	r4, [sp, #5]
    9ace:	bb4c      	cbnz	r4, 9b24 <_ZN13deviceManager9connectedEP7bt_connh+0x74>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9ad0:	4630      	mov	r0, r6
    9ad2:	f015 f83f 	bl	1eb54 <bt_conn_get_dst>
    9ad6:	a908      	add	r1, sp, #32
    9ad8:	f7ff fda4 	bl	9624 <bt_addr_le_to_str.constprop.0.isra.0>
		if (err) {
    9adc:	b13d      	cbz	r5, 9aee <_ZN13deviceManager9connectedEP7bt_connh+0x3e>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9ade:	462a      	mov	r2, r5
    9ae0:	481f      	ldr	r0, [pc, #124]	; (9b60 <_ZN13deviceManager9connectedEP7bt_connh+0xb0>)
    9ae2:	a908      	add	r1, sp, #32
    9ae4:	f012 ff58 	bl	1c998 <printk>
			startScan();
    9ae8:	f7ff ff64 	bl	99b4 <_ZN13deviceManager9startScanEv>
    9aec:	e7eb      	b.n	9ac6 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected: %s\n", addr);
    9aee:	481d      	ldr	r0, [pc, #116]	; (9b64 <_ZN13deviceManager9connectedEP7bt_connh+0xb4>)
    9af0:	a908      	add	r1, sp, #32
    9af2:	f012 ff51 	bl	1c998 <printk>
		centralConnections[nbrConnectionsCentral] = conn;
    9af6:	4b1c      	ldr	r3, [pc, #112]	; (9b68 <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9af8:	481c      	ldr	r0, [pc, #112]	; (9b6c <_ZN13deviceManager9connectedEP7bt_connh+0xbc>)
    9afa:	781c      	ldrb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9afc:	491c      	ldr	r1, [pc, #112]	; (9b70 <_ZN13deviceManager9connectedEP7bt_connh+0xc0>)
		centralConnections[nbrConnectionsCentral] = conn;
    9afe:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
		nbrConnectionsCentral++;
    9b02:	3401      	adds	r4, #1
    9b04:	b2e4      	uxtb	r4, r4
    9b06:	701c      	strb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9b08:	3c01      	subs	r4, #1
    9b0a:	462b      	mov	r3, r5
    9b0c:	4a19      	ldr	r2, [pc, #100]	; (9b74 <_ZN13deviceManager9connectedEP7bt_connh+0xc4>)
    9b0e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    9b12:	f003 f881 	bl	cc18 <bt_gatt_dm_start>
		if (err) 
    9b16:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9b1a:	d0d4      	beq.n	9ac6 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			printk("Could not start service discovery, err %d\n", err);
    9b1c:	4816      	ldr	r0, [pc, #88]	; (9b78 <_ZN13deviceManager9connectedEP7bt_connh+0xc8>)
			printk("Connection failed (err %u)\n", err);
    9b1e:	f012 ff3b 	bl	1c998 <printk>
			return;
    9b22:	e7d0      	b.n	9ac6 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9b24:	2c01      	cmp	r4, #1
    9b26:	d1ce      	bne.n	9ac6 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9b28:	b115      	cbz	r5, 9b30 <_ZN13deviceManager9connectedEP7bt_connh+0x80>
			printk("Connection failed (err %u)\n", err);
    9b2a:	4629      	mov	r1, r5
    9b2c:	4813      	ldr	r0, [pc, #76]	; (9b7c <_ZN13deviceManager9connectedEP7bt_connh+0xcc>)
    9b2e:	e7f6      	b.n	9b1e <_ZN13deviceManager9connectedEP7bt_connh+0x6e>
		printk("Connected\n");
    9b30:	4813      	ldr	r0, [pc, #76]	; (9b80 <_ZN13deviceManager9connectedEP7bt_connh+0xd0>)
    9b32:	f012 ff31 	bl	1c998 <printk>
		connectedP = true;
    9b36:	4b13      	ldr	r3, [pc, #76]	; (9b84 <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9b38:	4628      	mov	r0, r5
		connectedP = true;
    9b3a:	701c      	strb	r4, [r3, #0]
		peripheralConn = conn;
    9b3c:	4b12      	ldr	r3, [pc, #72]	; (9b88 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    9b3e:	601e      	str	r6, [r3, #0]
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9b40:	f016 ffe5 	bl	20b0e <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9b44:	f7ff fe72 	bl	982c <_ZN13deviceManager9getDeviceEv>
    9b48:	2803      	cmp	r0, #3
    9b4a:	d1bc      	bne.n	9ac6 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9b4c:	4b06      	ldr	r3, [pc, #24]	; (9b68 <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9b4e:	781b      	ldrb	r3, [r3, #0]
    9b50:	2b00      	cmp	r3, #0
    9b52:	d1b8      	bne.n	9ac6 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9b54:	f7ff fef6 	bl	9944 <_ZN13deviceManager8initScanEv>
    9b58:	e7c6      	b.n	9ae8 <_ZN13deviceManager9connectedEP7bt_connh+0x38>
    9b5a:	bf00      	nop
    9b5c:	00022a4d 	.word	0x00022a4d
    9b60:	00022a73 	.word	0x00022a73
    9b64:	00022a91 	.word	0x00022a91
    9b68:	2000b04e 	.word	0x2000b04e
    9b6c:	200096ec 	.word	0x200096ec
    9b70:	00022654 	.word	0x00022654
    9b74:	20008174 	.word	0x20008174
    9b78:	00022770 	.word	0x00022770
    9b7c:	00022aa0 	.word	0x00022aa0
    9b80:	00022abc 	.word	0x00022abc
    9b84:	2000b047 	.word	0x2000b047
    9b88:	200096e8 	.word	0x200096e8

00009b8c <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b90:	b0a4      	sub	sp, #144	; 0x90
    9b92:	468a      	mov	sl, r1
	int error = bt_conn_get_info(conn,&info);
    9b94:	a915      	add	r1, sp, #84	; 0x54
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9b96:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9b98:	f007 fe5c 	bl	11854 <bt_conn_get_info>
	char speed_sensor_1[18] = "D4:D6:5E:D1:66:D";
    9b9c:	aa01      	add	r2, sp, #4
	int error = bt_conn_get_info(conn,&info);
    9b9e:	4604      	mov	r4, r0
	char speed_sensor_1[18] = "D4:D6:5E:D1:66:D";
    9ba0:	4617      	mov	r7, r2
    9ba2:	4b56      	ldr	r3, [pc, #344]	; (9cfc <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
    9ba4:	f103 0c10 	add.w	ip, r3, #16
    9ba8:	4616      	mov	r6, r2
    9baa:	6818      	ldr	r0, [r3, #0]
    9bac:	6859      	ldr	r1, [r3, #4]
    9bae:	3308      	adds	r3, #8
    9bb0:	c603      	stmia	r6!, {r0, r1}
    9bb2:	4563      	cmp	r3, ip
    9bb4:	4632      	mov	r2, r6
    9bb6:	d1f7      	bne.n	9ba8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
    9bb8:	781b      	ldrb	r3, [r3, #0]
	char speed_sensor_2[18] = "D9:3F:F2:D1:0B:1B";
    9bba:	aa06      	add	r2, sp, #24
	char speed_sensor_1[18] = "D4:D6:5E:D1:66:D";
    9bbc:	7033      	strb	r3, [r6, #0]
    9bbe:	2300      	movs	r3, #0
    9bc0:	4616      	mov	r6, r2
    9bc2:	f88d 3015 	strb.w	r3, [sp, #21]
	char speed_sensor_2[18] = "D9:3F:F2:D1:0B:1B";
    9bc6:	4b4e      	ldr	r3, [pc, #312]	; (9d00 <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>)
    9bc8:	f103 0e10 	add.w	lr, r3, #16
    9bcc:	4694      	mov	ip, r2
    9bce:	6818      	ldr	r0, [r3, #0]
    9bd0:	6859      	ldr	r1, [r3, #4]
    9bd2:	3308      	adds	r3, #8
    9bd4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    9bd8:	4573      	cmp	r3, lr
    9bda:	4662      	mov	r2, ip
    9bdc:	d1f6      	bne.n	9bcc <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    9bde:	aa0b      	add	r2, sp, #44	; 0x2c
    9be0:	4690      	mov	r8, r2
	char speed_sensor_2[18] = "D9:3F:F2:D1:0B:1B";
    9be2:	881b      	ldrh	r3, [r3, #0]
    9be4:	f8ac 3000 	strh.w	r3, [ip]
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    9be8:	4b46      	ldr	r3, [pc, #280]	; (9d04 <_ZN13deviceManager12disconnectedEP7bt_connh+0x178>)
    9bea:	f103 0e10 	add.w	lr, r3, #16
    9bee:	4694      	mov	ip, r2
    9bf0:	6818      	ldr	r0, [r3, #0]
    9bf2:	6859      	ldr	r1, [r3, #4]
    9bf4:	3308      	adds	r3, #8
    9bf6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    9bfa:	4573      	cmp	r3, lr
    9bfc:	4662      	mov	r2, ip
    9bfe:	d1f6      	bne.n	9bee <_ZN13deviceManager12disconnectedEP7bt_connh+0x62>
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    9c00:	aa10      	add	r2, sp, #64	; 0x40
    9c02:	4691      	mov	r9, r2
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    9c04:	881b      	ldrh	r3, [r3, #0]
    9c06:	f8ac 3000 	strh.w	r3, [ip]
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    9c0a:	4b3f      	ldr	r3, [pc, #252]	; (9d08 <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9c0c:	f103 0e10 	add.w	lr, r3, #16
    9c10:	4694      	mov	ip, r2
    9c12:	6818      	ldr	r0, [r3, #0]
    9c14:	6859      	ldr	r1, [r3, #4]
    9c16:	3308      	adds	r3, #8
    9c18:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    9c1c:	4573      	cmp	r3, lr
    9c1e:	4662      	mov	r2, ip
    9c20:	d1f6      	bne.n	9c10 <_ZN13deviceManager12disconnectedEP7bt_connh+0x84>
    9c22:	881b      	ldrh	r3, [r3, #0]
    9c24:	f8ac 3000 	strh.w	r3, [ip]
	if (error)
    9c28:	b12c      	cbz	r4, 9c36 <_ZN13deviceManager12disconnectedEP7bt_connh+0xaa>
		printk("Cannot get info of connection object\n");
    9c2a:	4838      	ldr	r0, [pc, #224]	; (9d0c <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9c2c:	f012 feb4 	bl	1c998 <printk>
}
    9c30:	b024      	add	sp, #144	; 0x90
    9c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9c36:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
    9c3a:	2b01      	cmp	r3, #1
    9c3c:	d10d      	bne.n	9c5a <_ZN13deviceManager12disconnectedEP7bt_connh+0xce>
		printk("Disconnected from Application (reason %u)\n", reason);
    9c3e:	4651      	mov	r1, sl
    9c40:	4833      	ldr	r0, [pc, #204]	; (9d10 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9c42:	f012 fea9 	bl	1c998 <printk>
		connectedP = false;
    9c46:	4b33      	ldr	r3, [pc, #204]	; (9d14 <_ZN13deviceManager12disconnectedEP7bt_connh+0x188>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9c48:	4620      	mov	r0, r4
		connectedP = false;
    9c4a:	701c      	strb	r4, [r3, #0]
		peripheralConn = nullptr;
    9c4c:	4b32      	ldr	r3, [pc, #200]	; (9d18 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
    9c4e:	601c      	str	r4, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9c50:	f016 ff60 	bl	20b14 <dk_set_led_off>
		startAdvertising();
    9c54:	f7ff fe0e 	bl	9874 <_ZN13deviceManager16startAdvertisingEv>
    9c58:	e7ea      	b.n	9c30 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa4>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d1e8      	bne.n	9c30 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa4>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9c5e:	4628      	mov	r0, r5
    9c60:	f014 ff78 	bl	1eb54 <bt_conn_get_dst>
    9c64:	a91c      	add	r1, sp, #112	; 0x70
    9c66:	f7ff fcdd 	bl	9624 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9c6a:	482c      	ldr	r0, [pc, #176]	; (9d1c <_ZN13deviceManager12disconnectedEP7bt_connh+0x190>)
    9c6c:	a91c      	add	r1, sp, #112	; 0x70
    9c6e:	4652      	mov	r2, sl
    9c70:	f012 fe92 	bl	1c998 <printk>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9c74:	482a      	ldr	r0, [pc, #168]	; (9d20 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
			if (centralConnections[i] == conn)
    9c76:	492b      	ldr	r1, [pc, #172]	; (9d24 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9c78:	7803      	ldrb	r3, [r0, #0]
    9c7a:	f103 3cff 	add.w	ip, r3, #4294967295
    9c7e:	b2e2      	uxtb	r2, r4
    9c80:	4562      	cmp	r2, ip
    9c82:	da13      	bge.n	9cac <_ZN13deviceManager12disconnectedEP7bt_connh+0x120>
			if (centralConnections[i] == conn)
    9c84:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
    9c88:	3401      	adds	r4, #1
    9c8a:	45ae      	cmp	lr, r5
    9c8c:	d1f7      	bne.n	9c7e <_ZN13deviceManager12disconnectedEP7bt_connh+0xf2>
				centralConnections[i] = nullptr;
    9c8e:	2300      	movs	r3, #0
    9c90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				disconnectedError[0] = 11;
    9c94:	230b      	movs	r3, #11
    9c96:	f88d 3000 	strb.w	r3, [sp]
				data_service_send(peripheralConn,disconnectedError, sizeof(error));
    9c9a:	4b1f      	ldr	r3, [pc, #124]	; (9d18 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
				nbrConnectionsCentral--;
    9c9c:	f880 c000 	strb.w	ip, [r0]
				data_service_send(peripheralConn,disconnectedError, sizeof(error));
    9ca0:	2204      	movs	r2, #4
    9ca2:	4669      	mov	r1, sp
    9ca4:	6818      	ldr	r0, [r3, #0]
    9ca6:	f000 f935 	bl	9f14 <_Z17data_service_sendP7bt_connPKht>
				return;
    9caa:	e7c1      	b.n	9c30 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa4>
		if (nbrConnectionsCentral == 0)
    9cac:	b923      	cbnz	r3, 9cb8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x12c>
			connectedC = false;
    9cae:	4a1e      	ldr	r2, [pc, #120]	; (9d28 <_ZN13deviceManager12disconnectedEP7bt_connh+0x19c>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9cb0:	2001      	movs	r0, #1
			connectedC = false;
    9cb2:	7013      	strb	r3, [r2, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9cb4:	f016 ff2e 	bl	20b14 <dk_set_led_off>
		if (strstr(addr,speed_sensor_1) || strstr(addr,speed_sensor_2))
    9cb8:	4639      	mov	r1, r7
    9cba:	a81c      	add	r0, sp, #112	; 0x70
    9cbc:	f014 faaa 	bl	1e214 <strstr>
    9cc0:	b168      	cbz	r0, 9cde <_ZN13deviceManager12disconnectedEP7bt_connh+0x152>
			once_speed = false;
    9cc2:	2200      	movs	r2, #0
    9cc4:	4b19      	ldr	r3, [pc, #100]	; (9d2c <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a0>)
    9cc6:	701a      	strb	r2, [r3, #0]
		if (strstr(addr,cadence_sensor_1) || strstr(addr,cadence_sensor_2))
    9cc8:	4641      	mov	r1, r8
    9cca:	a81c      	add	r0, sp, #112	; 0x70
    9ccc:	f014 faa2 	bl	1e214 <strstr>
    9cd0:	b160      	cbz	r0, 9cec <_ZN13deviceManager12disconnectedEP7bt_connh+0x160>
			once_cadence = false;
    9cd2:	2200      	movs	r2, #0
    9cd4:	4b16      	ldr	r3, [pc, #88]	; (9d30 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
    9cd6:	701a      	strb	r2, [r3, #0]
		startScan();	
    9cd8:	f7ff fe6c 	bl	99b4 <_ZN13deviceManager9startScanEv>
    9cdc:	e7a8      	b.n	9c30 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa4>
		if (strstr(addr,speed_sensor_1) || strstr(addr,speed_sensor_2))
    9cde:	4631      	mov	r1, r6
    9ce0:	a81c      	add	r0, sp, #112	; 0x70
    9ce2:	f014 fa97 	bl	1e214 <strstr>
    9ce6:	2800      	cmp	r0, #0
    9ce8:	d1eb      	bne.n	9cc2 <_ZN13deviceManager12disconnectedEP7bt_connh+0x136>
    9cea:	e7ed      	b.n	9cc8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x13c>
		if (strstr(addr,cadence_sensor_1) || strstr(addr,cadence_sensor_2))
    9cec:	4649      	mov	r1, r9
    9cee:	a81c      	add	r0, sp, #112	; 0x70
    9cf0:	f014 fa90 	bl	1e214 <strstr>
    9cf4:	2800      	cmp	r0, #0
    9cf6:	d1ec      	bne.n	9cd2 <_ZN13deviceManager12disconnectedEP7bt_connh+0x146>
    9cf8:	e7ee      	b.n	9cd8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x14c>
    9cfa:	bf00      	nop
    9cfc:	00021b60 	.word	0x00021b60
    9d00:	00022b20 	.word	0x00022b20
    9d04:	0002286c 	.word	0x0002286c
    9d08:	0002287e 	.word	0x0002287e
    9d0c:	00022a4d 	.word	0x00022a4d
    9d10:	00022ac7 	.word	0x00022ac7
    9d14:	2000b047 	.word	0x2000b047
    9d18:	200096e8 	.word	0x200096e8
    9d1c:	00022af2 	.word	0x00022af2
    9d20:	2000b04e 	.word	0x2000b04e
    9d24:	200096ec 	.word	0x200096ec
    9d28:	2000b046 	.word	0x2000b046
    9d2c:	2000b048 	.word	0x2000b048
    9d30:	2000b04b 	.word	0x2000b04b

00009d34 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9d34:	b570      	push	{r4, r5, r6, lr}
	chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    9d36:	4927      	ldr	r1, [pc, #156]	; (9dd4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa0>)
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9d38:	4604      	mov	r4, r0
	chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    9d3a:	f002 ff41 	bl	cbc0 <bt_gatt_dm_char_by_uuid>
	if (!chrc) {
    9d3e:	4605      	mov	r5, r0
    9d40:	b960      	cbnz	r0, 9d5c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x28>
		printk("Missing CSC measurement characteristic\n");
    9d42:	4825      	ldr	r0, [pc, #148]	; (9dd8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa4>)
		printk("Missing CSC measurement char CCC descriptor\n");
    9d44:	f012 fe28 	bl	1c998 <printk>
		err = bt_gatt_dm_data_release(disc);
    9d48:	4620      	mov	r0, r4
    9d4a:	f013 fd0c 	bl	1d766 <bt_gatt_dm_data_release>
		if (err) {
    9d4e:	4601      	mov	r1, r0
    9d50:	b360      	cbz	r0, 9dac <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x78>
}
    9d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Could not release discovery data, err: %d\n", err);
    9d56:	4821      	ldr	r0, [pc, #132]	; (9ddc <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa8>)
    9d58:	f012 be1e 	b.w	1c998 <printk>
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_CSC_MEASUREMENT);
    9d5c:	4601      	mov	r1, r0
    9d5e:	4a20      	ldr	r2, [pc, #128]	; (9de0 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xac>)
    9d60:	4620      	mov	r0, r4
    9d62:	f013 fcee 	bl	1d742 <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    9d66:	b908      	cbnz	r0, 9d6c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x38>
		printk("Missing CSC measurement char CCC descriptor\n");
    9d68:	481e      	ldr	r0, [pc, #120]	; (9de4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xb0>)
    9d6a:	e7eb      	b.n	9d44 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x10>
	param.value_handle = desc->handle;
    9d6c:	8883      	ldrh	r3, [r0, #4]
    9d6e:	4e1e      	ldr	r6, [pc, #120]	; (9de8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xb4>)
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9d70:	4629      	mov	r1, r5
    9d72:	4620      	mov	r0, r4
    9d74:	4a1d      	ldr	r2, [pc, #116]	; (9dec <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xb8>)
	param.value_handle = desc->handle;
    9d76:	8133      	strh	r3, [r6, #8]
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9d78:	f013 fce3 	bl	1d742 <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d0f3      	beq.n	9d68 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x34>
	param.ccc_handle = desc->handle;
    9d80:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9d82:	4620      	mov	r0, r4
	param.ccc_handle = desc->handle;
    9d84:	8173      	strh	r3, [r6, #10]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9d86:	f013 fc8f 	bl	1d6a8 <bt_gatt_dm_conn_get>
    9d8a:	4631      	mov	r1, r6
    9d8c:	f00b f818 	bl	14dc0 <bt_gatt_subscribe>
	if (err) {
    9d90:	4601      	mov	r1, r0
    9d92:	b110      	cbz	r0, 9d9a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x66>
		printk("Subscribtion failed (err %d)\n", err);
    9d94:	4816      	ldr	r0, [pc, #88]	; (9df0 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xbc>)
    9d96:	f012 fdff 	bl	1c998 <printk>
	bt_gatt_dm_data_release(disc);
    9d9a:	4620      	mov	r0, r4
    9d9c:	f013 fce3 	bl	1d766 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9da0:	4b14      	ldr	r3, [pc, #80]	; (9df4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc0>)
    9da2:	781b      	ldrb	r3, [r3, #0]
    9da4:	2b01      	cmp	r3, #1
    9da6:	d002      	beq.n	9dae <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
    9da8:	2b02      	cmp	r3, #2
    9daa:	d007      	beq.n	9dbc <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x88>
}
    9dac:	bd70      	pop	{r4, r5, r6, pc}
		startScan();
    9dae:	f7ff fe01 	bl	99b4 <_ZN13deviceManager9startScanEv>
}
    9db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("First discovery completed\n");
    9db6:	4810      	ldr	r0, [pc, #64]	; (9df8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc4>)
    9db8:	f012 bdee 	b.w	1c998 <printk>
		printk("Second discovery completed\n");
    9dbc:	480f      	ldr	r0, [pc, #60]	; (9dfc <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc8>)
    9dbe:	f012 fdeb 	bl	1c998 <printk>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9dc2:	2001      	movs	r0, #1
    9dc4:	f016 fea3 	bl	20b0e <dk_set_led_on>
		connectedC = true;	
    9dc8:	2301      	movs	r3, #1
    9dca:	4a0d      	ldr	r2, [pc, #52]	; (9e00 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xcc>)
    9dcc:	7013      	strb	r3, [r2, #0]
		subscriptionDone = true;
    9dce:	4a0d      	ldr	r2, [pc, #52]	; (9e04 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xd0>)
    9dd0:	7013      	strb	r3, [r2, #0]
		break;
    9dd2:	e7eb      	b.n	9dac <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x78>
    9dd4:	00022658 	.word	0x00022658
    9dd8:	00022b32 	.word	0x00022b32
    9ddc:	00022b5a 	.word	0x00022b5a
    9de0:	0002265c 	.word	0x0002265c
    9de4:	00022b85 	.word	0x00022b85
    9de8:	20008148 	.word	0x20008148
    9dec:	00022660 	.word	0x00022660
    9df0:	00022bb2 	.word	0x00022bb2
    9df4:	2000b04e 	.word	0x2000b04e
    9df8:	00022bd0 	.word	0x00022bd0
    9dfc:	00022beb 	.word	0x00022beb
    9e00:	2000b046 	.word	0x2000b046
    9e04:	2000b04d 	.word	0x2000b04d

00009e08 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9e08:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9e0a:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9e0c:	7403      	strb	r3, [r0, #16]
    switch (type)
    9e0e:	d004      	beq.n	9e1a <_ZN7dataCSC8saveDataEPKv+0x12>
    9e10:	2b02      	cmp	r3, #2
    9e12:	d00d      	beq.n	9e30 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9e14:	480c      	ldr	r0, [pc, #48]	; (9e48 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9e16:	f012 bdbf 	b.w	1c998 <printk>
        oldSumRevSpeed = sumRevSpeed;
    9e1a:	8803      	ldrh	r3, [r0, #0]
    9e1c:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9e1e:	8903      	ldrh	r3, [r0, #8]
    9e20:	8143      	strh	r3, [r0, #10]
	return ((uint16_t)src[1] << 8) | src[0];
    9e22:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9e26:	8003      	strh	r3, [r0, #0]
    9e28:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9e2c:	8103      	strh	r3, [r0, #8]
        break;
    9e2e:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9e30:	8883      	ldrh	r3, [r0, #4]
    9e32:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9e34:	8983      	ldrh	r3, [r0, #12]
    9e36:	81c3      	strh	r3, [r0, #14]
    9e38:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9e3c:	8083      	strh	r3, [r0, #4]
    9e3e:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9e42:	8183      	strh	r3, [r0, #12]
}
    9e44:	4770      	bx	lr
    9e46:	bf00      	nop
    9e48:	00022c19 	.word	0x00022c19

00009e4c <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9e50:	8985      	ldrh	r5, [r0, #12]
    9e52:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9e54:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9e56:	429d      	cmp	r5, r3
    9e58:	d02f      	beq.n	9eba <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9e5a:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9e5e:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9e62:	45c8      	cmp	r8, r9
    9e64:	d029      	beq.n	9eba <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9e66:	1aed      	subs	r5, r5, r3
    9e68:	4628      	mov	r0, r5
    9e6a:	f7fe fb3b 	bl	84e4 <__aeabi_i2d>
    9e6e:	2200      	movs	r2, #0
    9e70:	4b13      	ldr	r3, [pc, #76]	; (9ec0 <_ZN7dataCSC7calcRPMEv+0x74>)
    9e72:	f7fe fba1 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9e76:	2200      	movs	r2, #0
    9e78:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9e7a:	4606      	mov	r6, r0
    9e7c:	460f      	mov	r7, r1
        if (time < 0)
    9e7e:	f7fe fe0d 	bl	8a9c <__aeabi_dcmplt>
    9e82:	b130      	cbz	r0, 9e92 <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9e84:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9e88:	30ff      	adds	r0, #255	; 0xff
    9e8a:	f7fe fb2b 	bl	84e4 <__aeabi_i2d>
    9e8e:	4606      	mov	r6, r0
    9e90:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9e92:	203c      	movs	r0, #60	; 0x3c
    9e94:	eba8 0809 	sub.w	r8, r8, r9
    9e98:	fb00 f008 	mul.w	r0, r0, r8
    9e9c:	f7fe fb22 	bl	84e4 <__aeabi_i2d>
    9ea0:	4632      	mov	r2, r6
    9ea2:	463b      	mov	r3, r7
    9ea4:	f7fe fcb2 	bl	880c <__aeabi_ddiv>
    9ea8:	4602      	mov	r2, r0
    9eaa:	460b      	mov	r3, r1
    9eac:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9eb0:	f7fe fe1c 	bl	8aec <__aeabi_d2uiz>
    9eb4:	b280      	uxth	r0, r0
}
    9eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9eba:	2000      	movs	r0, #0
    9ebc:	e7fb      	b.n	9eb6 <_ZN7dataCSC7calcRPMEv+0x6a>
    9ebe:	bf00      	nop
    9ec0:	3f500000 	.word	0x3f500000

00009ec4 <_Z15on_cccd_changedPK12bt_gatt_attrt>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    9ec4:	2901      	cmp	r1, #1
    9ec6:	d004      	beq.n	9ed2 <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9ec8:	2902      	cmp	r1, #2
    9eca:	d005      	beq.n	9ed8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9ecc:	b931      	cbnz	r1, 9edc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9ece:	4804      	ldr	r0, [pc, #16]	; (9ee0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9ed0:	e000      	b.n	9ed4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9ed2:	4804      	ldr	r0, [pc, #16]	; (9ee4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9ed4:	f012 bd60 	b.w	1c998 <printk>
            printk("Notifications ON with Indications\n");
    9ed8:	4803      	ldr	r0, [pc, #12]	; (9ee8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9eda:	e7fb      	b.n	9ed4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9edc:	4803      	ldr	r0, [pc, #12]	; (9eec <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9ede:	e7f9      	b.n	9ed4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9ee0:	00022c5c 	.word	0x00022c5c
    9ee4:	00022c27 	.word	0x00022c27
    9ee8:	00022c39 	.word	0x00022c39
    9eec:	00022c6f 	.word	0x00022c6f

00009ef0 <_Z17data_service_initv>:
{
    9ef0:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9ef2:	22f0      	movs	r2, #240	; 0xf0
    9ef4:	2100      	movs	r1, #0
    9ef6:	4805      	ldr	r0, [pc, #20]	; (9f0c <_Z17data_service_initv+0x1c>)
    9ef8:	f014 fa31 	bl	1e35e <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9efc:	22f0      	movs	r2, #240	; 0xf0
    9efe:	2100      	movs	r1, #0
    9f00:	4803      	ldr	r0, [pc, #12]	; (9f10 <_Z17data_service_initv+0x20>)
    9f02:	f014 fa2c 	bl	1e35e <memset>
}
    9f06:	2000      	movs	r0, #0
    9f08:	bd08      	pop	{r3, pc}
    9f0a:	bf00      	nop
    9f0c:	2000b051 	.word	0x2000b051
    9f10:	2000b141 	.word	0x2000b141

00009f14 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9f14:	2300      	movs	r3, #0
{
    9f16:	b510      	push	{r4, lr}
    9f18:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9f1a:	9303      	str	r3, [sp, #12]
    9f1c:	9305      	str	r3, [sp, #20]
    9f1e:	4b0d      	ldr	r3, [pc, #52]	; (9f54 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9f20:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9f24:	9300      	str	r3, [sp, #0]
    9f26:	4b0c      	ldr	r3, [pc, #48]	; (9f58 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9f28:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9f2a:	9304      	str	r3, [sp, #16]
    };
    9f2c:	4b0b      	ldr	r3, [pc, #44]	; (9f5c <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9f2e:	4604      	mov	r4, r0
    };
    9f30:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9f34:	4619      	mov	r1, r3
    9f36:	f00a fb2f 	bl	14598 <bt_gatt_is_subscribed>
    9f3a:	b148      	cbz	r0, 9f50 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9f3c:	4669      	mov	r1, sp
    9f3e:	4620      	mov	r0, r4
    9f40:	f00a f932 	bl	141a8 <bt_gatt_notify_cb>
    9f44:	b110      	cbz	r0, 9f4c <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9f46:	4806      	ldr	r0, [pc, #24]	; (9f60 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9f48:	f012 fd26 	bl	1c998 <printk>
    }
}
    9f4c:	b006      	add	sp, #24
    9f4e:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9f50:	4804      	ldr	r0, [pc, #16]	; (9f64 <_Z17data_service_sendP7bt_connPKht+0x50>)
    9f52:	e7f9      	b.n	9f48 <_Z17data_service_sendP7bt_connPKht+0x34>
    9f54:	00022d92 	.word	0x00022d92
    9f58:	0001c861 	.word	0x0001c861
    9f5c:	00021d1c 	.word	0x00021d1c
    9f60:	00022cdc 	.word	0x00022cdc
    9f64:	00022d00 	.word	0x00022d00

00009f68 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
    9f68:	4b01      	ldr	r3, [pc, #4]	; (9f70 <_Z11getDiameterv+0x8>)
    9f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
    9f6e:	4770      	bx	lr
    9f70:	200086f8 	.word	0x200086f8

00009f74 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    9f74:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9f76:	4c0a      	ldr	r4, [pc, #40]	; (9fa0 <crc8_ccitt+0x2c>)
    9f78:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    9f7a:	4291      	cmp	r1, r2
    9f7c:	d100      	bne.n	9f80 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    9f7e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    9f80:	f811 3b01 	ldrb.w	r3, [r1], #1
    9f84:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9f86:	0903      	lsrs	r3, r0, #4
    9f88:	5ce3      	ldrb	r3, [r4, r3]
    9f8a:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    9f8e:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9f90:	f3c3 1303 	ubfx	r3, r3, #4, #4
    9f94:	5ce0      	ldrb	r0, [r4, r3]
    9f96:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    9f9a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    9f9c:	e7ed      	b.n	9f7a <crc8_ccitt+0x6>
    9f9e:	bf00      	nop
    9fa0:	00022da3 	.word	0x00022da3

00009fa4 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9fa4:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9fa6:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    9fa8:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9fac:	2b02      	cmp	r3, #2
{
    9fae:	4604      	mov	r4, r0
    9fb0:	460e      	mov	r6, r1
	notify->result = res;
    9fb2:	6081      	str	r1, [r0, #8]
	switch (method) {
    9fb4:	d010      	beq.n	9fd8 <sys_notify_finalize+0x34>
    9fb6:	2b03      	cmp	r3, #3
    9fb8:	d004      	beq.n	9fc4 <sys_notify_finalize+0x20>
    9fba:	2b01      	cmp	r3, #1
    9fbc:	d10f      	bne.n	9fde <sys_notify_finalize+0x3a>
    9fbe:	2500      	movs	r5, #0
    9fc0:	4628      	mov	r0, r5
    9fc2:	e001      	b.n	9fc8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9fc4:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9fc6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9fc8:	2300      	movs	r3, #0
    9fca:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9fcc:	b110      	cbz	r0, 9fd4 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9fce:	4631      	mov	r1, r6
    9fd0:	f012 fbb4 	bl	1c73c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9fd4:	4628      	mov	r0, r5
    9fd6:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    9fd8:	2500      	movs	r5, #0
		sig = notify->method.signal;
    9fda:	6800      	ldr	r0, [r0, #0]
		break;
    9fdc:	e7f4      	b.n	9fc8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9fde:	2245      	movs	r2, #69	; 0x45
    9fe0:	4904      	ldr	r1, [pc, #16]	; (9ff4 <sys_notify_finalize+0x50>)
    9fe2:	4805      	ldr	r0, [pc, #20]	; (9ff8 <sys_notify_finalize+0x54>)
    9fe4:	f012 fcd8 	bl	1c998 <printk>
    9fe8:	2145      	movs	r1, #69	; 0x45
    9fea:	4802      	ldr	r0, [pc, #8]	; (9ff4 <sys_notify_finalize+0x50>)
    9fec:	f012 ff7a 	bl	1cee4 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    9ff0:	2500      	movs	r5, #0
    9ff2:	e7e8      	b.n	9fc6 <sys_notify_finalize+0x22>
    9ff4:	00022db3 	.word	0x00022db3
    9ff8:	00022dd6 	.word	0x00022dd6

00009ffc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9ffc:	680b      	ldr	r3, [r1, #0]
    9ffe:	3301      	adds	r3, #1
    a000:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a002:	4b01      	ldr	r3, [pc, #4]	; (a008 <char_out+0xc>)
    a004:	681b      	ldr	r3, [r3, #0]
    a006:	4718      	bx	r3
    a008:	200081bc 	.word	0x200081bc

0000a00c <__printk_hook_install>:
	_char_out = fn;
    a00c:	4b01      	ldr	r3, [pc, #4]	; (a014 <__printk_hook_install+0x8>)
    a00e:	6018      	str	r0, [r3, #0]
}
    a010:	4770      	bx	lr
    a012:	bf00      	nop
    a014:	200081bc 	.word	0x200081bc

0000a018 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a018:	b507      	push	{r0, r1, r2, lr}
    a01a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a01c:	2100      	movs	r1, #0
{
    a01e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a020:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a022:	4803      	ldr	r0, [pc, #12]	; (a030 <vprintk+0x18>)
    a024:	a901      	add	r1, sp, #4
    a026:	f000 fbe9 	bl	a7fc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a02a:	b003      	add	sp, #12
    a02c:	f85d fb04 	ldr.w	pc, [sp], #4
    a030:	00009ffd 	.word	0x00009ffd

0000a034 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a034:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a036:	2500      	movs	r5, #0
{
    a038:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a03a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a03e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a040:	a901      	add	r1, sp, #4
    a042:	4805      	ldr	r0, [pc, #20]	; (a058 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a044:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a046:	f000 fbd9 	bl	a7fc <cbvprintf>

	if (ctx.count < ctx.max) {
    a04a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a04e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a050:	bfb8      	it	lt
    a052:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a054:	b005      	add	sp, #20
    a056:	bd30      	pop	{r4, r5, pc}
    a058:	0001c973 	.word	0x0001c973

0000a05c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a060:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a064:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a066:	f01a 0f08 	tst.w	sl, #8
{
    a06a:	4693      	mov	fp, r2
	if (processing) {
    a06c:	d01c      	beq.n	a0a8 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a06e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a070:	bf0c      	ite	eq
    a072:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a076:	f04a 0a20 	orrne.w	sl, sl, #32
    a07a:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a07e:	f104 0014 	add.w	r0, r4, #20
    a082:	f011 fcc3 	bl	1ba0c <z_spin_unlock_valid>
    a086:	b940      	cbnz	r0, a09a <process_event+0x3e>
    a088:	4992      	ldr	r1, [pc, #584]	; (a2d4 <process_event+0x278>)
    a08a:	4893      	ldr	r0, [pc, #588]	; (a2d8 <process_event+0x27c>)
    a08c:	22a7      	movs	r2, #167	; 0xa7
    a08e:	f012 fc83 	bl	1c998 <printk>
    a092:	21a7      	movs	r1, #167	; 0xa7
    a094:	488f      	ldr	r0, [pc, #572]	; (a2d4 <process_event+0x278>)
    a096:	f012 ff25 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a09a:	f38b 8811 	msr	BASEPRI, fp
    a09e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a0a2:	b003      	add	sp, #12
    a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a0a8:	4f8c      	ldr	r7, [pc, #560]	; (a2dc <process_event+0x280>)
    a0aa:	f8df 822c 	ldr.w	r8, [pc, #556]	; a2d8 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a0ae:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a0b2:	2902      	cmp	r1, #2
    a0b4:	d106      	bne.n	a0c4 <process_event+0x68>
			evt = process_recheck(mgr);
    a0b6:	4620      	mov	r0, r4
    a0b8:	f012 fc88 	bl	1c9cc <process_recheck>
		if (evt == EVT_NOP) {
    a0bc:	2800      	cmp	r0, #0
    a0be:	d0de      	beq.n	a07e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a0c0:	2801      	cmp	r0, #1
    a0c2:	d163      	bne.n	a18c <process_event+0x130>
			res = mgr->last_res;
    a0c4:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a0c8:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a0ca:	f1b9 0f00 	cmp.w	r9, #0
    a0ce:	da19      	bge.n	a104 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a0d0:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a0d2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0d4:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a0d8:	e9c4 6600 	strd	r6, r6, [r4]
    a0dc:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a0e0:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a0e2:	8ba3      	ldrh	r3, [r4, #28]
    a0e4:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a0e8:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a0ea:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a0ec:	d003      	beq.n	a0f6 <process_event+0x9a>
		if (do_monitors
    a0ee:	68a2      	ldr	r2, [r4, #8]
    a0f0:	2a00      	cmp	r2, #0
    a0f2:	f040 80f5 	bne.w	a2e0 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a0f6:	b915      	cbnz	r5, a0fe <process_event+0xa2>
		    || (transit != NULL)) {
    a0f8:	2e00      	cmp	r6, #0
    a0fa:	f000 812f 	beq.w	a35c <process_event+0x300>
    a0fe:	f04f 0a00 	mov.w	sl, #0
    a102:	e0ef      	b.n	a2e4 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a104:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a108:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a10a:	2901      	cmp	r1, #1
    a10c:	d820      	bhi.n	a150 <process_event+0xf4>
	list->head = NULL;
    a10e:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a110:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    a114:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    a116:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a118:	b29b      	uxth	r3, r3
	list->tail = NULL;
    a11a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a11e:	d10a      	bne.n	a136 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a120:	b13d      	cbz	r5, a132 <process_event+0xd6>
    a122:	4629      	mov	r1, r5
    a124:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a126:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a128:	3201      	adds	r2, #1
    a12a:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a12c:	2900      	cmp	r1, #0
    a12e:	d1fa      	bne.n	a126 <process_event+0xca>
    a130:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a132:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a136:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a138:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a13a:	f012 fc47 	bl	1c9cc <process_recheck>
    a13e:	4606      	mov	r6, r0
    a140:	2800      	cmp	r0, #0
    a142:	d0ce      	beq.n	a0e2 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a144:	8ba3      	ldrh	r3, [r4, #28]
    a146:	f043 0320 	orr.w	r3, r3, #32
    a14a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a14c:	2600      	movs	r6, #0
    a14e:	e7c8      	b.n	a0e2 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a150:	2a04      	cmp	r2, #4
    a152:	d10d      	bne.n	a170 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a154:	f023 0307 	bic.w	r3, r3, #7
    a158:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a15a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a15c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a15e:	f012 fc35 	bl	1c9cc <process_recheck>
    a162:	4605      	mov	r5, r0
    a164:	b180      	cbz	r0, a188 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a166:	f042 0220 	orr.w	r2, r2, #32
    a16a:	2500      	movs	r5, #0
    a16c:	83a2      	strh	r2, [r4, #28]
    a16e:	e7ed      	b.n	a14c <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a170:	f240 1219 	movw	r2, #281	; 0x119
    a174:	4639      	mov	r1, r7
    a176:	4640      	mov	r0, r8
    a178:	f012 fc0e 	bl	1c998 <printk>
    a17c:	f240 1119 	movw	r1, #281	; 0x119
    a180:	4638      	mov	r0, r7
    a182:	f012 feaf 	bl	1cee4 <assert_post_action>
    a186:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a188:	462e      	mov	r6, r5
    a18a:	e7aa      	b.n	a0e2 <process_event+0x86>
		} else if (evt == EVT_START) {
    a18c:	2803      	cmp	r0, #3
    a18e:	d131      	bne.n	a1f4 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a190:	f1ba 0f00 	cmp.w	sl, #0
    a194:	d00a      	beq.n	a1ac <process_event+0x150>
    a196:	4639      	mov	r1, r7
    a198:	4640      	mov	r0, r8
    a19a:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a19e:	f012 fbfb 	bl	1c998 <printk>
    a1a2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a1a6:	4638      	mov	r0, r7
    a1a8:	f012 fe9c 	bl	1cee4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a1ac:	6823      	ldr	r3, [r4, #0]
    a1ae:	b953      	cbnz	r3, a1c6 <process_event+0x16a>
    a1b0:	4639      	mov	r1, r7
    a1b2:	4640      	mov	r0, r8
    a1b4:	f240 1255 	movw	r2, #341	; 0x155
    a1b8:	f012 fbee 	bl	1c998 <printk>
    a1bc:	f240 1155 	movw	r1, #341	; 0x155
    a1c0:	4638      	mov	r0, r7
    a1c2:	f012 fe8f 	bl	1cee4 <assert_post_action>
			transit = mgr->transitions->start;
    a1c6:	6923      	ldr	r3, [r4, #16]
    a1c8:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a1ca:	b956      	cbnz	r6, a1e2 <process_event+0x186>
    a1cc:	4639      	mov	r1, r7
    a1ce:	4640      	mov	r0, r8
    a1d0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a1d4:	f012 fbe0 	bl	1c998 <printk>
    a1d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a1dc:	4638      	mov	r0, r7
    a1de:	f012 fe81 	bl	1cee4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a1e2:	8ba3      	ldrh	r3, [r4, #28]
    a1e4:	f023 0307 	bic.w	r3, r3, #7
    a1e8:	f043 0306 	orr.w	r3, r3, #6
}
    a1ec:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a1ee:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a1f0:	46a9      	mov	r9, r5
}
    a1f2:	e776      	b.n	a0e2 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a1f4:	2804      	cmp	r0, #4
    a1f6:	d12e      	bne.n	a256 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a1f8:	f1ba 0f02 	cmp.w	sl, #2
    a1fc:	d00a      	beq.n	a214 <process_event+0x1b8>
    a1fe:	4639      	mov	r1, r7
    a200:	4640      	mov	r0, r8
    a202:	f240 125b 	movw	r2, #347	; 0x15b
    a206:	f012 fbc7 	bl	1c998 <printk>
    a20a:	f240 115b 	movw	r1, #347	; 0x15b
    a20e:	4638      	mov	r0, r7
    a210:	f012 fe68 	bl	1cee4 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a214:	8be3      	ldrh	r3, [r4, #30]
    a216:	b153      	cbz	r3, a22e <process_event+0x1d2>
    a218:	4639      	mov	r1, r7
    a21a:	4640      	mov	r0, r8
    a21c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a220:	f012 fbba 	bl	1c998 <printk>
    a224:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a228:	4638      	mov	r0, r7
    a22a:	f012 fe5b 	bl	1cee4 <assert_post_action>
			transit = mgr->transitions->stop;
    a22e:	6923      	ldr	r3, [r4, #16]
    a230:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a232:	b956      	cbnz	r6, a24a <process_event+0x1ee>
    a234:	4639      	mov	r1, r7
    a236:	4640      	mov	r0, r8
    a238:	f240 125f 	movw	r2, #351	; 0x15f
    a23c:	f012 fbac 	bl	1c998 <printk>
    a240:	f240 115f 	movw	r1, #351	; 0x15f
    a244:	4638      	mov	r0, r7
    a246:	f012 fe4d 	bl	1cee4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a24a:	8ba3      	ldrh	r3, [r4, #28]
    a24c:	f023 0307 	bic.w	r3, r3, #7
    a250:	f043 0304 	orr.w	r3, r3, #4
    a254:	e7ca      	b.n	a1ec <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a256:	2805      	cmp	r0, #5
    a258:	d12e      	bne.n	a2b8 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a25a:	f1ba 0f01 	cmp.w	sl, #1
    a25e:	d00a      	beq.n	a276 <process_event+0x21a>
    a260:	4639      	mov	r1, r7
    a262:	4640      	mov	r0, r8
    a264:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a268:	f012 fb96 	bl	1c998 <printk>
    a26c:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a270:	4638      	mov	r0, r7
    a272:	f012 fe37 	bl	1cee4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a276:	6823      	ldr	r3, [r4, #0]
    a278:	b953      	cbnz	r3, a290 <process_event+0x234>
    a27a:	4639      	mov	r1, r7
    a27c:	4640      	mov	r0, r8
    a27e:	f240 1263 	movw	r2, #355	; 0x163
    a282:	f012 fb89 	bl	1c998 <printk>
    a286:	f240 1163 	movw	r1, #355	; 0x163
    a28a:	4638      	mov	r0, r7
    a28c:	f012 fe2a 	bl	1cee4 <assert_post_action>
			transit = mgr->transitions->reset;
    a290:	6923      	ldr	r3, [r4, #16]
    a292:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a294:	b956      	cbnz	r6, a2ac <process_event+0x250>
    a296:	4639      	mov	r1, r7
    a298:	4640      	mov	r0, r8
    a29a:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a29e:	f012 fb7b 	bl	1c998 <printk>
    a2a2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a2a6:	4638      	mov	r0, r7
    a2a8:	f012 fe1c 	bl	1cee4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a2ac:	8ba3      	ldrh	r3, [r4, #28]
    a2ae:	f023 0307 	bic.w	r3, r3, #7
    a2b2:	f043 0305 	orr.w	r3, r3, #5
    a2b6:	e799      	b.n	a1ec <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a2b8:	2500      	movs	r5, #0
    a2ba:	f240 1269 	movw	r2, #361	; 0x169
    a2be:	4639      	mov	r1, r7
    a2c0:	4640      	mov	r0, r8
    a2c2:	f012 fb69 	bl	1c998 <printk>
    a2c6:	f240 1169 	movw	r1, #361	; 0x169
    a2ca:	4638      	mov	r0, r7
    a2cc:	f012 fe0a 	bl	1cee4 <assert_post_action>
		onoff_transition_fn transit = NULL;
    a2d0:	462e      	mov	r6, r5
    a2d2:	e78d      	b.n	a1f0 <process_event+0x194>
    a2d4:	00022e10 	.word	0x00022e10
    a2d8:	00022dd6 	.word	0x00022dd6
    a2dc:	00022dee 	.word	0x00022dee
				   && !sys_slist_is_empty(&mgr->monitors);
    a2e0:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a2e4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a2e8:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a2ea:	f104 0314 	add.w	r3, r4, #20
    a2ee:	4618      	mov	r0, r3
    a2f0:	9301      	str	r3, [sp, #4]
    a2f2:	f011 fb8b 	bl	1ba0c <z_spin_unlock_valid>
    a2f6:	b940      	cbnz	r0, a30a <process_event+0x2ae>
    a2f8:	4640      	mov	r0, r8
    a2fa:	4931      	ldr	r1, [pc, #196]	; (a3c0 <process_event+0x364>)
    a2fc:	22a7      	movs	r2, #167	; 0xa7
    a2fe:	f012 fb4b 	bl	1c998 <printk>
    a302:	21a7      	movs	r1, #167	; 0xa7
    a304:	482e      	ldr	r0, [pc, #184]	; (a3c0 <process_event+0x364>)
    a306:	f012 fded 	bl	1cee4 <assert_post_action>
    a30a:	f38b 8811 	msr	BASEPRI, fp
    a30e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a312:	f1ba 0f00 	cmp.w	sl, #0
    a316:	d130      	bne.n	a37a <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a318:	2d00      	cmp	r5, #0
    a31a:	d140      	bne.n	a39e <process_event+0x342>
			if (transit != NULL) {
    a31c:	b116      	cbz	r6, a324 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a31e:	4620      	mov	r0, r4
    a320:	4928      	ldr	r1, [pc, #160]	; (a3c4 <process_event+0x368>)
    a322:	47b0      	blx	r6
	__asm__ volatile(
    a324:	f04f 0320 	mov.w	r3, #32
    a328:	f3ef 8b11 	mrs	fp, BASEPRI
    a32c:	f383 8811 	msr	BASEPRI, r3
    a330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a334:	9801      	ldr	r0, [sp, #4]
    a336:	f011 fb5b 	bl	1b9f0 <z_spin_lock_valid>
    a33a:	b940      	cbnz	r0, a34e <process_event+0x2f2>
    a33c:	4640      	mov	r0, r8
    a33e:	4920      	ldr	r1, [pc, #128]	; (a3c0 <process_event+0x364>)
    a340:	227c      	movs	r2, #124	; 0x7c
    a342:	f012 fb29 	bl	1c998 <printk>
    a346:	217c      	movs	r1, #124	; 0x7c
    a348:	481d      	ldr	r0, [pc, #116]	; (a3c0 <process_event+0x364>)
    a34a:	f012 fdcb 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
    a34e:	9801      	ldr	r0, [sp, #4]
    a350:	f011 fb6a 	bl	1ba28 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a354:	8ba3      	ldrh	r3, [r4, #28]
    a356:	f023 0308 	bic.w	r3, r3, #8
    a35a:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a35c:	8ba3      	ldrh	r3, [r4, #28]
    a35e:	06da      	lsls	r2, r3, #27
    a360:	d525      	bpl.n	a3ae <process_event+0x352>
			evt = EVT_COMPLETE;
    a362:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a364:	f023 0310 	bic.w	r3, r3, #16
    a368:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a36a:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a36e:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a372:	2900      	cmp	r1, #0
    a374:	f47f ae9d 	bne.w	a0b2 <process_event+0x56>
out:
    a378:	e681      	b.n	a07e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a37a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a37c:	2900      	cmp	r1, #0
    a37e:	d0cb      	beq.n	a318 <process_event+0x2bc>
	return node->next;
    a380:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a384:	464b      	mov	r3, r9
    a386:	4620      	mov	r0, r4
    a388:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a38c:	9a00      	ldr	r2, [sp, #0]
    a38e:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a390:	f1ba 0f00 	cmp.w	sl, #0
    a394:	d0c0      	beq.n	a318 <process_event+0x2bc>
    a396:	4651      	mov	r1, sl
    a398:	f8da a000 	ldr.w	sl, [sl]
    a39c:	e7f2      	b.n	a384 <process_event+0x328>
    a39e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a3a0:	464b      	mov	r3, r9
    a3a2:	4620      	mov	r0, r4
    a3a4:	9a00      	ldr	r2, [sp, #0]
    a3a6:	682d      	ldr	r5, [r5, #0]
    a3a8:	f012 fb2c 	bl	1ca04 <notify_one>
    a3ac:	e7b4      	b.n	a318 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a3ae:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a3b2:	bf1e      	ittt	ne
    a3b4:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a3b8:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a3ba:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a3bc:	e7d5      	b.n	a36a <process_event+0x30e>
    a3be:	bf00      	nop
    a3c0:	00022e10 	.word	0x00022e10
    a3c4:	0000a3c9 	.word	0x0000a3c9

0000a3c8 <transition_complete>:
{
    a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3ca:	4604      	mov	r4, r0
    a3cc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a3ce:	f100 0614 	add.w	r6, r0, #20
    a3d2:	f04f 0320 	mov.w	r3, #32
    a3d6:	f3ef 8711 	mrs	r7, BASEPRI
    a3da:	f383 8811 	msr	BASEPRI, r3
    a3de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3e2:	4630      	mov	r0, r6
    a3e4:	f011 fb04 	bl	1b9f0 <z_spin_lock_valid>
    a3e8:	b940      	cbnz	r0, a3fc <transition_complete+0x34>
    a3ea:	490a      	ldr	r1, [pc, #40]	; (a414 <transition_complete+0x4c>)
    a3ec:	480a      	ldr	r0, [pc, #40]	; (a418 <transition_complete+0x50>)
    a3ee:	227c      	movs	r2, #124	; 0x7c
    a3f0:	f012 fad2 	bl	1c998 <printk>
    a3f4:	217c      	movs	r1, #124	; 0x7c
    a3f6:	4807      	ldr	r0, [pc, #28]	; (a414 <transition_complete+0x4c>)
    a3f8:	f012 fd74 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
    a3fc:	4630      	mov	r0, r6
    a3fe:	f011 fb13 	bl	1ba28 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a402:	463a      	mov	r2, r7
    a404:	4620      	mov	r0, r4
	mgr->last_res = res;
    a406:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a408:	2101      	movs	r1, #1
}
    a40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a40e:	f7ff be25 	b.w	a05c <process_event>
    a412:	bf00      	nop
    a414:	00022e10 	.word	0x00022e10
    a418:	00022dd6 	.word	0x00022dd6

0000a41c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a420:	4604      	mov	r4, r0
    a422:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a424:	f012 fb04 	bl	1ca30 <validate_args>

	if (rv < 0) {
    a428:	1e05      	subs	r5, r0, #0
    a42a:	db54      	blt.n	a4d6 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a42c:	f104 0914 	add.w	r9, r4, #20
    a430:	f04f 0320 	mov.w	r3, #32
    a434:	f3ef 8a11 	mrs	sl, BASEPRI
    a438:	f383 8811 	msr	BASEPRI, r3
    a43c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a440:	4648      	mov	r0, r9
    a442:	f011 fad5 	bl	1b9f0 <z_spin_lock_valid>
    a446:	b940      	cbnz	r0, a45a <onoff_request+0x3e>
    a448:	4933      	ldr	r1, [pc, #204]	; (a518 <onoff_request+0xfc>)
    a44a:	4834      	ldr	r0, [pc, #208]	; (a51c <onoff_request+0x100>)
    a44c:	227c      	movs	r2, #124	; 0x7c
    a44e:	f012 faa3 	bl	1c998 <printk>
    a452:	217c      	movs	r1, #124	; 0x7c
    a454:	4830      	ldr	r0, [pc, #192]	; (a518 <onoff_request+0xfc>)
    a456:	f012 fd45 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
    a45a:	4648      	mov	r0, r9
    a45c:	f011 fae4 	bl	1ba28 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a460:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a464:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a466:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a468:	428b      	cmp	r3, r1
    a46a:	f002 0607 	and.w	r6, r2, #7
    a46e:	d04a      	beq.n	a506 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a470:	2e02      	cmp	r6, #2
    a472:	d11f      	bne.n	a4b4 <onoff_request+0x98>
	rv = state;
    a474:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a476:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a47a:	3301      	adds	r3, #1
    a47c:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a47e:	4648      	mov	r0, r9
    a480:	f011 fac4 	bl	1ba0c <z_spin_unlock_valid>
    a484:	b940      	cbnz	r0, a498 <onoff_request+0x7c>
    a486:	4924      	ldr	r1, [pc, #144]	; (a518 <onoff_request+0xfc>)
    a488:	4824      	ldr	r0, [pc, #144]	; (a51c <onoff_request+0x100>)
    a48a:	22a7      	movs	r2, #167	; 0xa7
    a48c:	f012 fa84 	bl	1c998 <printk>
    a490:	21a7      	movs	r1, #167	; 0xa7
    a492:	4821      	ldr	r0, [pc, #132]	; (a518 <onoff_request+0xfc>)
    a494:	f012 fd26 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
    a498:	f38a 8811 	msr	BASEPRI, sl
    a49c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a4a0:	f1b8 0f00 	cmp.w	r8, #0
    a4a4:	d017      	beq.n	a4d6 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a4a6:	2300      	movs	r3, #0
    a4a8:	4632      	mov	r2, r6
    a4aa:	4639      	mov	r1, r7
    a4ac:	4620      	mov	r0, r4
    a4ae:	f012 faa9 	bl	1ca04 <notify_one>
    a4b2:	e010      	b.n	a4d6 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a4b4:	0793      	lsls	r3, r2, #30
    a4b6:	d001      	beq.n	a4bc <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a4b8:	2e06      	cmp	r6, #6
    a4ba:	d10f      	bne.n	a4dc <onoff_request+0xc0>
	parent->next = child;
    a4bc:	2300      	movs	r3, #0
    a4be:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a4c0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a4c2:	b9eb      	cbnz	r3, a500 <onoff_request+0xe4>
	list->head = node;
    a4c4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a4c8:	4635      	mov	r5, r6
    a4ca:	b9f6      	cbnz	r6, a50a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a4cc:	4652      	mov	r2, sl
    a4ce:	2102      	movs	r1, #2
    a4d0:	4620      	mov	r0, r4
    a4d2:	f7ff fdc3 	bl	a05c <process_event>
		}
	}

	return rv;
}
    a4d6:	4628      	mov	r0, r5
    a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a4dc:	2e05      	cmp	r6, #5
    a4de:	d017      	beq.n	a510 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a4e0:	2e01      	cmp	r6, #1
    a4e2:	d00a      	beq.n	a4fa <onoff_request+0xde>
    a4e4:	490e      	ldr	r1, [pc, #56]	; (a520 <onoff_request+0x104>)
    a4e6:	480d      	ldr	r0, [pc, #52]	; (a51c <onoff_request+0x100>)
    a4e8:	f240 12c5 	movw	r2, #453	; 0x1c5
    a4ec:	f012 fa54 	bl	1c998 <printk>
    a4f0:	f240 11c5 	movw	r1, #453	; 0x1c5
    a4f4:	480a      	ldr	r0, [pc, #40]	; (a520 <onoff_request+0x104>)
    a4f6:	f012 fcf5 	bl	1cee4 <assert_post_action>
		rv = -EIO;
    a4fa:	f06f 0504 	mvn.w	r5, #4
    a4fe:	e004      	b.n	a50a <onoff_request+0xee>
	parent->next = child;
    a500:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a502:	6067      	str	r7, [r4, #4]
}
    a504:	e7e0      	b.n	a4c8 <onoff_request+0xac>
		rv = -EAGAIN;
    a506:	f06f 050a 	mvn.w	r5, #10
    a50a:	f04f 0800 	mov.w	r8, #0
    a50e:	e7b6      	b.n	a47e <onoff_request+0x62>
		rv = -ENOTSUP;
    a510:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a514:	e7f9      	b.n	a50a <onoff_request+0xee>
    a516:	bf00      	nop
    a518:	00022e10 	.word	0x00022e10
    a51c:	00022dd6 	.word	0x00022dd6
    a520:	00022dee 	.word	0x00022dee

0000a524 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a528:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a52a:	4e14      	ldr	r6, [pc, #80]	; (a57c <z_work_q_main+0x58>)
    a52c:	f8df 8050 	ldr.w	r8, [pc, #80]	; a580 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a530:	f04f 32ff 	mov.w	r2, #4294967295
    a534:	f04f 33ff 	mov.w	r3, #4294967295
    a538:	4628      	mov	r0, r5
    a53a:	f010 f801 	bl	1a540 <z_impl_k_queue_get>
		if (work == NULL) {
    a53e:	4604      	mov	r4, r0
    a540:	2800      	cmp	r0, #0
    a542:	d0f5      	beq.n	a530 <z_work_q_main+0xc>
		handler = work->handler;
    a544:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a546:	b947      	cbnz	r7, a55a <z_work_q_main+0x36>
    a548:	4631      	mov	r1, r6
    a54a:	4640      	mov	r0, r8
    a54c:	221c      	movs	r2, #28
    a54e:	f012 fa23 	bl	1c998 <printk>
    a552:	211c      	movs	r1, #28
    a554:	4630      	mov	r0, r6
    a556:	f012 fcc5 	bl	1cee4 <assert_post_action>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a55a:	f104 0308 	add.w	r3, r4, #8
    a55e:	e8d3 2fef 	ldaex	r2, [r3]
    a562:	f022 0101 	bic.w	r1, r2, #1
    a566:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a56a:	2800      	cmp	r0, #0
    a56c:	d1f7      	bne.n	a55e <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a56e:	07d3      	lsls	r3, r2, #31
    a570:	d501      	bpl.n	a576 <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a572:	4620      	mov	r0, r4
    a574:	47b8      	blx	r7
	z_impl_k_yield();
    a576:	f010 ff0d 	bl	1b394 <z_impl_k_yield>
    a57a:	e7d9      	b.n	a530 <z_work_q_main+0xc>
    a57c:	00022e36 	.word	0x00022e36
    a580:	00022dd6 	.word	0x00022dd6

0000a584 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a584:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a586:	2900      	cmp	r1, #0
    a588:	d039      	beq.n	a5fe <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a58a:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a58c:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a58e:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a590:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a596:	bf2c      	ite	cs
    a598:	2408      	movcs	r4, #8
    a59a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a59c:	1b0c      	subs	r4, r1, r4
    a59e:	1b64      	subs	r4, r4, r5
    a5a0:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a5a2:	4621      	mov	r1, r4
    a5a4:	f012 fa70 	bl	1ca88 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a5a8:	07c3      	lsls	r3, r0, #31
    a5aa:	d408      	bmi.n	a5be <sys_heap_free+0x3a>
    a5ac:	4914      	ldr	r1, [pc, #80]	; (a600 <sys_heap_free+0x7c>)
    a5ae:	4815      	ldr	r0, [pc, #84]	; (a604 <sys_heap_free+0x80>)
    a5b0:	229a      	movs	r2, #154	; 0x9a
    a5b2:	f012 f9f1 	bl	1c998 <printk>
    a5b6:	219a      	movs	r1, #154	; 0x9a
    a5b8:	4811      	ldr	r0, [pc, #68]	; (a600 <sys_heap_free+0x7c>)
    a5ba:	f012 fc93 	bl	1cee4 <assert_post_action>
	return c + chunk_size(h, c);
    a5be:	4621      	mov	r1, r4
    a5c0:	4628      	mov	r0, r5
    a5c2:	f012 fa77 	bl	1cab4 <chunk_size>
    a5c6:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a5c8:	4631      	mov	r1, r6
    a5ca:	2200      	movs	r2, #0
    a5cc:	4628      	mov	r0, r5
    a5ce:	f012 fa5b 	bl	1ca88 <chunk_field>
    a5d2:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a5d4:	42b4      	cmp	r4, r6
    a5d6:	d008      	beq.n	a5ea <sys_heap_free+0x66>
    a5d8:	4909      	ldr	r1, [pc, #36]	; (a600 <sys_heap_free+0x7c>)
    a5da:	480a      	ldr	r0, [pc, #40]	; (a604 <sys_heap_free+0x80>)
    a5dc:	22a2      	movs	r2, #162	; 0xa2
    a5de:	f012 f9db 	bl	1c998 <printk>
    a5e2:	21a2      	movs	r1, #162	; 0xa2
    a5e4:	4806      	ldr	r0, [pc, #24]	; (a600 <sys_heap_free+0x7c>)
    a5e6:	f012 fc7d 	bl	1cee4 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a5ea:	4621      	mov	r1, r4
    a5ec:	4628      	mov	r0, r5
    a5ee:	2200      	movs	r2, #0
    a5f0:	f012 fa66 	bl	1cac0 <set_chunk_used>
	free_chunk(h, c);
    a5f4:	4621      	mov	r1, r4
}
    a5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a5fa:	f012 bba3 	b.w	1cd44 <free_chunk>
}
    a5fe:	bd70      	pop	{r4, r5, r6, pc}
    a600:	00022e59 	.word	0x00022e59
    a604:	00022dd6 	.word	0x00022dd6

0000a608 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a60c:	f101 39ff 	add.w	r9, r1, #4294967295
    a610:	ea19 0f01 	tst.w	r9, r1
{
    a614:	4680      	mov	r8, r0
    a616:	460f      	mov	r7, r1
    a618:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a61a:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a61c:	d008      	beq.n	a630 <sys_heap_aligned_alloc+0x28>
    a61e:	4931      	ldr	r1, [pc, #196]	; (a6e4 <sys_heap_aligned_alloc+0xdc>)
    a620:	4831      	ldr	r0, [pc, #196]	; (a6e8 <sys_heap_aligned_alloc+0xe0>)
    a622:	22fc      	movs	r2, #252	; 0xfc
    a624:	f012 f9b8 	bl	1c998 <printk>
    a628:	21fc      	movs	r1, #252	; 0xfc
    a62a:	482e      	ldr	r0, [pc, #184]	; (a6e4 <sys_heap_aligned_alloc+0xdc>)
    a62c:	f012 fc5a 	bl	1cee4 <assert_post_action>
	return big_heap_chunks(h->len);
    a630:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a632:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a636:	bf2c      	ite	cs
    a638:	2308      	movcs	r3, #8
    a63a:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a63c:	429f      	cmp	r7, r3
    a63e:	d805      	bhi.n	a64c <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a640:	4621      	mov	r1, r4
    a642:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a644:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a648:	f012 bbbe 	b.w	1cdc8 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a64c:	b91c      	cbnz	r4, a656 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a64e:	2600      	movs	r6, #0
}
    a650:	4630      	mov	r0, r6
    a652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a656:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a65a:	d9f8      	bls.n	a64e <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a65c:	1939      	adds	r1, r7, r4
    a65e:	1ac9      	subs	r1, r1, r3
    a660:	f012 fa4a 	bl	1caf8 <bytes_to_chunksz.isra.0>
    a664:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a666:	4628      	mov	r0, r5
    a668:	f012 faa1 	bl	1cbae <alloc_chunk>
	if (c0 == 0) {
    a66c:	4680      	mov	r8, r0
    a66e:	2800      	cmp	r0, #0
    a670:	d0ed      	beq.n	a64e <sys_heap_aligned_alloc+0x46>
    a672:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a674:	427f      	negs	r7, r7
    a676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a67a:	bf2c      	ite	cs
    a67c:	2308      	movcs	r3, #8
    a67e:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a680:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a684:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a686:	444e      	add	r6, r9
    a688:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a68a:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a68c:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a68e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a690:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a692:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a696:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a698:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a69c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a6a0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a6a4:	d208      	bcs.n	a6b8 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a6a6:	4601      	mov	r1, r0
    a6a8:	463a      	mov	r2, r7
    a6aa:	4628      	mov	r0, r5
    a6ac:	f012 fac2 	bl	1cc34 <split_chunks>
		free_list_add(h, c0);
    a6b0:	4641      	mov	r1, r8
    a6b2:	4628      	mov	r0, r5
    a6b4:	f012 fb03 	bl	1ccbe <free_list_add>
	return c + chunk_size(h, c);
    a6b8:	4639      	mov	r1, r7
    a6ba:	4628      	mov	r0, r5
    a6bc:	f012 f9fa 	bl	1cab4 <chunk_size>
    a6c0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a6c2:	4284      	cmp	r4, r0
    a6c4:	d208      	bcs.n	a6d8 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a6c6:	4639      	mov	r1, r7
    a6c8:	4628      	mov	r0, r5
    a6ca:	4622      	mov	r2, r4
    a6cc:	f012 fab2 	bl	1cc34 <split_chunks>
		free_list_add(h, c_end);
    a6d0:	4621      	mov	r1, r4
    a6d2:	4628      	mov	r0, r5
    a6d4:	f012 faf3 	bl	1ccbe <free_list_add>
	set_chunk_used(h, c, true);
    a6d8:	2201      	movs	r2, #1
    a6da:	4639      	mov	r1, r7
    a6dc:	4628      	mov	r0, r5
    a6de:	f012 f9ef 	bl	1cac0 <set_chunk_used>
	return mem;
    a6e2:	e7b5      	b.n	a650 <sys_heap_aligned_alloc+0x48>
    a6e4:	00022e59 	.word	0x00022e59
    a6e8:	00022dd6 	.word	0x00022dd6

0000a6ec <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a6ec:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6f2:	4607      	mov	r7, r0
    a6f4:	460c      	mov	r4, r1
    a6f6:	4616      	mov	r6, r2
    a6f8:	d20e      	bcs.n	a718 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a6fa:	2a04      	cmp	r2, #4
    a6fc:	d80a      	bhi.n	a714 <sys_heap_init+0x28>
    a6fe:	493d      	ldr	r1, [pc, #244]	; (a7f4 <sys_heap_init+0x108>)
    a700:	483d      	ldr	r0, [pc, #244]	; (a7f8 <sys_heap_init+0x10c>)
    a702:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a706:	f012 f947 	bl	1c998 <printk>
    a70a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a70e:	4839      	ldr	r0, [pc, #228]	; (a7f4 <sys_heap_init+0x108>)
    a710:	f012 fbe8 	bl	1cee4 <assert_post_action>
    a714:	2204      	movs	r2, #4
    a716:	e000      	b.n	a71a <sys_heap_init+0x2e>
    a718:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a71a:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a71c:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a71e:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a720:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a724:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a728:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a72a:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a72c:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a730:	d80a      	bhi.n	a748 <sys_heap_init+0x5c>
    a732:	4930      	ldr	r1, [pc, #192]	; (a7f4 <sys_heap_init+0x108>)
    a734:	4830      	ldr	r0, [pc, #192]	; (a7f8 <sys_heap_init+0x10c>)
    a736:	f240 1275 	movw	r2, #373	; 0x175
    a73a:	f012 f92d 	bl	1c998 <printk>
    a73e:	f240 1175 	movw	r1, #373	; 0x175
    a742:	482c      	ldr	r0, [pc, #176]	; (a7f4 <sys_heap_init+0x108>)
    a744:	f012 fbce 	bl	1cee4 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a748:	2300      	movs	r3, #0
    a74a:	2200      	movs	r2, #0
	heap->heap = h;
    a74c:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a74e:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a752:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a754:	4631      	mov	r1, r6
    a756:	4630      	mov	r0, r6
	h->len = buf_sz;
    a758:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a75a:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a75c:	f012 f9d5 	bl	1cb0a <bucket_idx.isra.0>
    a760:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a762:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a764:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a766:	4630      	mov	r0, r6
    a768:	f012 f9c6 	bl	1caf8 <bytes_to_chunksz.isra.0>
    a76c:	341b      	adds	r4, #27
    a76e:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a770:	4420      	add	r0, r4
    a772:	42b0      	cmp	r0, r6
    a774:	d30a      	bcc.n	a78c <sys_heap_init+0xa0>
    a776:	491f      	ldr	r1, [pc, #124]	; (a7f4 <sys_heap_init+0x108>)
    a778:	481f      	ldr	r0, [pc, #124]	; (a7f8 <sys_heap_init+0x10c>)
    a77a:	f240 1281 	movw	r2, #385	; 0x181
    a77e:	f012 f90b 	bl	1c998 <printk>
    a782:	f240 1181 	movw	r1, #385	; 0x181
    a786:	481b      	ldr	r0, [pc, #108]	; (a7f4 <sys_heap_init+0x108>)
    a788:	f012 fbac 	bl	1cee4 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a78c:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a78e:	4619      	mov	r1, r3
    a790:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a794:	42bb      	cmp	r3, r7
    a796:	db28      	blt.n	a7ea <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a798:	4622      	mov	r2, r4
    a79a:	4628      	mov	r0, r5
    a79c:	2100      	movs	r1, #0
    a79e:	f012 f9a7 	bl	1caf0 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a7a2:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a7a4:	4628      	mov	r0, r5
    a7a6:	2201      	movs	r2, #1
    a7a8:	2100      	movs	r1, #0
    a7aa:	f012 f989 	bl	1cac0 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a7ae:	463a      	mov	r2, r7
    a7b0:	4621      	mov	r1, r4
    a7b2:	f012 f99d 	bl	1caf0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a7b6:	4623      	mov	r3, r4
    a7b8:	2200      	movs	r2, #0
    a7ba:	4621      	mov	r1, r4
    a7bc:	4628      	mov	r0, r5
    a7be:	f012 f96e 	bl	1ca9e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a7c2:	4631      	mov	r1, r6
    a7c4:	4628      	mov	r0, r5
    a7c6:	f012 f993 	bl	1caf0 <set_chunk_size>
    a7ca:	463b      	mov	r3, r7
    a7cc:	4631      	mov	r1, r6
    a7ce:	4628      	mov	r0, r5
    a7d0:	2200      	movs	r2, #0
    a7d2:	f012 f964 	bl	1ca9e <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a7d6:	4631      	mov	r1, r6
    a7d8:	4628      	mov	r0, r5
    a7da:	2201      	movs	r2, #1
    a7dc:	f012 f970 	bl	1cac0 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a7e0:	4621      	mov	r1, r4
}
    a7e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a7e6:	f012 ba6a 	b.w	1ccbe <free_list_add>
		h->buckets[i].next = 0;
    a7ea:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a7ee:	3301      	adds	r3, #1
    a7f0:	e7d0      	b.n	a794 <sys_heap_init+0xa8>
    a7f2:	bf00      	nop
    a7f4:	00022e59 	.word	0x00022e59
    a7f8:	00022dd6 	.word	0x00022dd6

0000a7fc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a800:	468b      	mov	fp, r1
    a802:	4692      	mov	sl, r2
    a804:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a806:	2500      	movs	r5, #0
{
    a808:	b091      	sub	sp, #68	; 0x44
    a80a:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a80c:	f89a 0000 	ldrb.w	r0, [sl]
    a810:	b908      	cbnz	r0, a816 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a812:	4628      	mov	r0, r5
    a814:	e35f      	b.n	aed6 <cbvprintf+0x6da>
		if (*fp != '%') {
    a816:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a818:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a81c:	d007      	beq.n	a82e <cbvprintf+0x32>
			OUTC('%');
    a81e:	4659      	mov	r1, fp
    a820:	9b02      	ldr	r3, [sp, #8]
    a822:	4798      	blx	r3
    a824:	2800      	cmp	r0, #0
    a826:	f2c0 8356 	blt.w	aed6 <cbvprintf+0x6da>
    a82a:	3501      	adds	r5, #1
			break;
    a82c:	e212      	b.n	ac54 <cbvprintf+0x458>
		} state = {
    a82e:	2218      	movs	r2, #24
    a830:	2100      	movs	r1, #0
    a832:	a80a      	add	r0, sp, #40	; 0x28
    a834:	f013 fd93 	bl	1e35e <memset>
	if (*sp == '%') {
    a838:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a83c:	2b25      	cmp	r3, #37	; 0x25
    a83e:	d078      	beq.n	a932 <cbvprintf+0x136>
    a840:	2200      	movs	r2, #0
    a842:	4694      	mov	ip, r2
    a844:	4696      	mov	lr, r2
    a846:	4616      	mov	r6, r2
    a848:	4610      	mov	r0, r2
    a84a:	4639      	mov	r1, r7
		switch (*sp) {
    a84c:	f817 3b01 	ldrb.w	r3, [r7], #1
    a850:	2b2b      	cmp	r3, #43	; 0x2b
    a852:	f000 809d 	beq.w	a990 <cbvprintf+0x194>
    a856:	f200 8094 	bhi.w	a982 <cbvprintf+0x186>
    a85a:	2b20      	cmp	r3, #32
    a85c:	f000 809a 	beq.w	a994 <cbvprintf+0x198>
    a860:	2b23      	cmp	r3, #35	; 0x23
    a862:	f000 809a 	beq.w	a99a <cbvprintf+0x19e>
    a866:	b128      	cbz	r0, a874 <cbvprintf+0x78>
    a868:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a86c:	f040 0004 	orr.w	r0, r0, #4
    a870:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a874:	b12e      	cbz	r6, a882 <cbvprintf+0x86>
    a876:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a87a:	f040 0008 	orr.w	r0, r0, #8
    a87e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a882:	f1be 0f00 	cmp.w	lr, #0
    a886:	d005      	beq.n	a894 <cbvprintf+0x98>
    a888:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a88c:	f040 0010 	orr.w	r0, r0, #16
    a890:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a894:	f1bc 0f00 	cmp.w	ip, #0
    a898:	d005      	beq.n	a8a6 <cbvprintf+0xaa>
    a89a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a89e:	f040 0020 	orr.w	r0, r0, #32
    a8a2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a8a6:	b12a      	cbz	r2, a8b4 <cbvprintf+0xb8>
    a8a8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a8ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a8b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    a8b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a8b8:	f002 0044 	and.w	r0, r2, #68	; 0x44
    a8bc:	2844      	cmp	r0, #68	; 0x44
    a8be:	d103      	bne.n	a8c8 <cbvprintf+0xcc>
		conv->flag_zero = false;
    a8c0:	f36f 1286 	bfc	r2, #6, #1
    a8c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    a8c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a8cc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    a8ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a8d2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a8d6:	d17b      	bne.n	a9d0 <cbvprintf+0x1d4>
		conv->width_star = true;
    a8d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    a8dc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a8de:	f042 0201 	orr.w	r2, r2, #1
    a8e2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    a8e6:	781a      	ldrb	r2, [r3, #0]
    a8e8:	2a2e      	cmp	r2, #46	; 0x2e
    a8ea:	bf0c      	ite	eq
    a8ec:	2101      	moveq	r1, #1
    a8ee:	2100      	movne	r1, #0
    a8f0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a8f4:	f361 0241 	bfi	r2, r1, #1, #1
    a8f8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    a8fc:	d174      	bne.n	a9e8 <cbvprintf+0x1ec>
	if (*sp == '*') {
    a8fe:	785a      	ldrb	r2, [r3, #1]
    a900:	2a2a      	cmp	r2, #42	; 0x2a
    a902:	d06a      	beq.n	a9da <cbvprintf+0x1de>
	size_t val = 0;
    a904:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    a906:	260a      	movs	r6, #10
	++sp;
    a908:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a90a:	4618      	mov	r0, r3
    a90c:	f810 2b01 	ldrb.w	r2, [r0], #1
    a910:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a914:	2f09      	cmp	r7, #9
    a916:	f240 808e 	bls.w	aa36 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    a91a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    a91e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    a920:	f3c2 0040 	ubfx	r0, r2, #1, #1
    a924:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    a928:	f361 0241 	bfi	r2, r1, #1, #1
    a92c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a930:	e05a      	b.n	a9e8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    a932:	f10a 0702 	add.w	r7, sl, #2
    a936:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    a93a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a93e:	07d9      	lsls	r1, r3, #31
    a940:	f140 8149 	bpl.w	abd6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    a944:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    a948:	f1b9 0f00 	cmp.w	r9, #0
    a94c:	da07      	bge.n	a95e <cbvprintf+0x162>
				conv->flag_dash = true;
    a94e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    a952:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    a956:	f042 0204 	orr.w	r2, r2, #4
    a95a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    a95e:	075a      	lsls	r2, r3, #29
    a960:	f140 8142 	bpl.w	abe8 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    a964:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    a968:	f1b8 0f00 	cmp.w	r8, #0
    a96c:	f280 8141 	bge.w	abf2 <cbvprintf+0x3f6>
				conv->prec_present = false;
    a970:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a974:	f36f 0341 	bfc	r3, #1, #1
    a978:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    a97c:	f04f 38ff 	mov.w	r8, #4294967295
    a980:	e137      	b.n	abf2 <cbvprintf+0x3f6>
		switch (*sp) {
    a982:	2b2d      	cmp	r3, #45	; 0x2d
    a984:	d00c      	beq.n	a9a0 <cbvprintf+0x1a4>
    a986:	2b30      	cmp	r3, #48	; 0x30
    a988:	f47f af6d 	bne.w	a866 <cbvprintf+0x6a>
			conv->flag_zero = true;
    a98c:	2201      	movs	r2, #1
	} while (loop);
    a98e:	e75c      	b.n	a84a <cbvprintf+0x4e>
			conv->flag_plus = true;
    a990:	2601      	movs	r6, #1
    a992:	e75a      	b.n	a84a <cbvprintf+0x4e>
			conv->flag_space = true;
    a994:	f04f 0e01 	mov.w	lr, #1
    a998:	e757      	b.n	a84a <cbvprintf+0x4e>
			conv->flag_hash = true;
    a99a:	f04f 0c01 	mov.w	ip, #1
    a99e:	e754      	b.n	a84a <cbvprintf+0x4e>
		switch (*sp) {
    a9a0:	2001      	movs	r0, #1
    a9a2:	e752      	b.n	a84a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    a9a4:	4633      	mov	r3, r6
    a9a6:	fb0c 0202 	mla	r2, ip, r2, r0
    a9aa:	3a30      	subs	r2, #48	; 0x30
    a9ac:	461e      	mov	r6, r3
    a9ae:	f816 0b01 	ldrb.w	r0, [r6], #1
    a9b2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a9b6:	2f09      	cmp	r7, #9
    a9b8:	d9f4      	bls.n	a9a4 <cbvprintf+0x1a8>
	if (sp != wp) {
    a9ba:	4299      	cmp	r1, r3
    a9bc:	d093      	beq.n	a8e6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a9be:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    a9c2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    a9c4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a9c6:	f362 0141 	bfi	r1, r2, #1, #1
    a9ca:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    a9ce:	e78a      	b.n	a8e6 <cbvprintf+0xea>
    a9d0:	460b      	mov	r3, r1
	size_t val = 0;
    a9d2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a9d4:	f04f 0c0a 	mov.w	ip, #10
    a9d8:	e7e8      	b.n	a9ac <cbvprintf+0x1b0>
		conv->prec_star = true;
    a9da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    a9de:	3302      	adds	r3, #2
		conv->prec_star = true;
    a9e0:	f042 0204 	orr.w	r2, r2, #4
    a9e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    a9e8:	461f      	mov	r7, r3
    a9ea:	f817 2b01 	ldrb.w	r2, [r7], #1
    a9ee:	2a6c      	cmp	r2, #108	; 0x6c
    a9f0:	d041      	beq.n	aa76 <cbvprintf+0x27a>
    a9f2:	d825      	bhi.n	aa40 <cbvprintf+0x244>
    a9f4:	2a68      	cmp	r2, #104	; 0x68
    a9f6:	d02b      	beq.n	aa50 <cbvprintf+0x254>
    a9f8:	2a6a      	cmp	r2, #106	; 0x6a
    a9fa:	d046      	beq.n	aa8a <cbvprintf+0x28e>
    a9fc:	2a4c      	cmp	r2, #76	; 0x4c
    a9fe:	d04c      	beq.n	aa9a <cbvprintf+0x29e>
    aa00:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    aa02:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    aa0a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    aa0c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    aa10:	f200 80d9 	bhi.w	abc6 <cbvprintf+0x3ca>
    aa14:	2a57      	cmp	r2, #87	; 0x57
    aa16:	d84d      	bhi.n	aab4 <cbvprintf+0x2b8>
    aa18:	2a41      	cmp	r2, #65	; 0x41
    aa1a:	d003      	beq.n	aa24 <cbvprintf+0x228>
    aa1c:	3a45      	subs	r2, #69	; 0x45
    aa1e:	2a02      	cmp	r2, #2
    aa20:	f200 80d1 	bhi.w	abc6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    aa24:	2204      	movs	r2, #4
    aa26:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    aa2a:	f362 0302 	bfi	r3, r2, #0, #3
    aa2e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    aa32:	2301      	movs	r3, #1
			break;
    aa34:	e09e      	b.n	ab74 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    aa36:	fb06 2101 	mla	r1, r6, r1, r2
    aa3a:	4603      	mov	r3, r0
    aa3c:	3930      	subs	r1, #48	; 0x30
    aa3e:	e764      	b.n	a90a <cbvprintf+0x10e>
	switch (*sp) {
    aa40:	2a74      	cmp	r2, #116	; 0x74
    aa42:	d026      	beq.n	aa92 <cbvprintf+0x296>
    aa44:	2a7a      	cmp	r2, #122	; 0x7a
    aa46:	d1db      	bne.n	aa00 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    aa48:	2206      	movs	r2, #6
    aa4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aa4e:	e00d      	b.n	aa6c <cbvprintf+0x270>
		if (*++sp == 'h') {
    aa50:	785a      	ldrb	r2, [r3, #1]
    aa52:	2a68      	cmp	r2, #104	; 0x68
    aa54:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aa58:	d106      	bne.n	aa68 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    aa5a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    aa5c:	f361 02c6 	bfi	r2, r1, #3, #4
    aa60:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    aa64:	1c9f      	adds	r7, r3, #2
    aa66:	e7cc      	b.n	aa02 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    aa68:	4613      	mov	r3, r2
    aa6a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    aa6c:	f362 03c6 	bfi	r3, r2, #3, #4
    aa70:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    aa74:	e7c5      	b.n	aa02 <cbvprintf+0x206>
		if (*++sp == 'l') {
    aa76:	785a      	ldrb	r2, [r3, #1]
    aa78:	2a6c      	cmp	r2, #108	; 0x6c
    aa7a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aa7e:	d101      	bne.n	aa84 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    aa80:	2104      	movs	r1, #4
    aa82:	e7eb      	b.n	aa5c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    aa84:	4613      	mov	r3, r2
    aa86:	2203      	movs	r2, #3
    aa88:	e7f0      	b.n	aa6c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    aa8a:	2205      	movs	r2, #5
    aa8c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aa90:	e7ec      	b.n	aa6c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    aa92:	2207      	movs	r2, #7
    aa94:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aa98:	e7e8      	b.n	aa6c <cbvprintf+0x270>
		conv->unsupported = true;
    aa9a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    aa9e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    aaa2:	f023 0302 	bic.w	r3, r3, #2
    aaa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    aaaa:	f043 0302 	orr.w	r3, r3, #2
    aaae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    aab2:	e7a6      	b.n	aa02 <cbvprintf+0x206>
    aab4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    aab8:	2920      	cmp	r1, #32
    aaba:	f200 8084 	bhi.w	abc6 <cbvprintf+0x3ca>
    aabe:	a001      	add	r0, pc, #4	; (adr r0, aac4 <cbvprintf+0x2c8>)
    aac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    aac4:	0000ab89 	.word	0x0000ab89
    aac8:	0000abc7 	.word	0x0000abc7
    aacc:	0000abc7 	.word	0x0000abc7
    aad0:	0000abc7 	.word	0x0000abc7
    aad4:	0000abc7 	.word	0x0000abc7
    aad8:	0000abc7 	.word	0x0000abc7
    aadc:	0000abc7 	.word	0x0000abc7
    aae0:	0000abc7 	.word	0x0000abc7
    aae4:	0000abc7 	.word	0x0000abc7
    aae8:	0000aa25 	.word	0x0000aa25
    aaec:	0000abc7 	.word	0x0000abc7
    aaf0:	0000ab89 	.word	0x0000ab89
    aaf4:	0000ab49 	.word	0x0000ab49
    aaf8:	0000aa25 	.word	0x0000aa25
    aafc:	0000aa25 	.word	0x0000aa25
    ab00:	0000aa25 	.word	0x0000aa25
    ab04:	0000abc7 	.word	0x0000abc7
    ab08:	0000ab49 	.word	0x0000ab49
    ab0c:	0000abc7 	.word	0x0000abc7
    ab10:	0000abc7 	.word	0x0000abc7
    ab14:	0000abc7 	.word	0x0000abc7
    ab18:	0000abc7 	.word	0x0000abc7
    ab1c:	0000ab91 	.word	0x0000ab91
    ab20:	0000ab89 	.word	0x0000ab89
    ab24:	0000abad 	.word	0x0000abad
    ab28:	0000abc7 	.word	0x0000abc7
    ab2c:	0000abc7 	.word	0x0000abc7
    ab30:	0000abad 	.word	0x0000abad
    ab34:	0000abc7 	.word	0x0000abc7
    ab38:	0000ab89 	.word	0x0000ab89
    ab3c:	0000abc7 	.word	0x0000abc7
    ab40:	0000abc7 	.word	0x0000abc7
    ab44:	0000ab89 	.word	0x0000ab89
		conv->specifier_cat = SPECIFIER_SINT;
    ab48:	2001      	movs	r0, #1
    ab4a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab4e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ab52:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab56:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ab58:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    ab5c:	bf02      	ittt	eq
    ab5e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    ab62:	f041 0101 	orreq.w	r1, r1, #1
    ab66:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    ab6a:	2a63      	cmp	r2, #99	; 0x63
    ab6c:	d131      	bne.n	abd2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ab6e:	3b00      	subs	r3, #0
    ab70:	bf18      	it	ne
    ab72:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    ab74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ab78:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ab7c:	430b      	orrs	r3, r1
    ab7e:	f363 0241 	bfi	r2, r3, #1, #1
    ab82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    ab86:	e6d8      	b.n	a93a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    ab88:	2002      	movs	r0, #2
    ab8a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    ab8e:	e7de      	b.n	ab4e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    ab90:	2103      	movs	r1, #3
    ab92:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab96:	f003 0378 	and.w	r3, r3, #120	; 0x78
    ab9a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    ab9e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aba2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    aba4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aba8:	4143      	adcs	r3, r0
    abaa:	e7e3      	b.n	ab74 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    abac:	2103      	movs	r1, #3
    abae:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    abb2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    abb6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    abba:	bf14      	ite	ne
    abbc:	2301      	movne	r3, #1
    abbe:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    abc0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    abc4:	e7d6      	b.n	ab74 <cbvprintf+0x378>
		conv->invalid = true;
    abc6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    abca:	f043 0301 	orr.w	r3, r3, #1
    abce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    abd2:	2300      	movs	r3, #0
    abd4:	e7ce      	b.n	ab74 <cbvprintf+0x378>
		} else if (conv->width_present) {
    abd6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    abda:	2a00      	cmp	r2, #0
		int width = -1;
    abdc:	bfac      	ite	ge
    abde:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    abe2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    abe6:	e6ba      	b.n	a95e <cbvprintf+0x162>
		} else if (conv->prec_present) {
    abe8:	079b      	lsls	r3, r3, #30
    abea:	f57f aec7 	bpl.w	a97c <cbvprintf+0x180>
			precision = conv->prec_value;
    abee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    abf2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    abf4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    abf8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    abfc:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    ac00:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    ac04:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ac06:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ac0a:	d138      	bne.n	ac7e <cbvprintf+0x482>
			switch (length_mod) {
    ac0c:	1ecb      	subs	r3, r1, #3
    ac0e:	2b04      	cmp	r3, #4
    ac10:	d822      	bhi.n	ac58 <cbvprintf+0x45c>
    ac12:	e8df f003 	tbb	[pc, r3]
    ac16:	0903      	.short	0x0903
    ac18:	2109      	.short	0x2109
    ac1a:	21          	.byte	0x21
    ac1b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    ac1c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    ac20:	17da      	asrs	r2, r3, #31
    ac22:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    ac26:	e006      	b.n	ac36 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    ac28:	3407      	adds	r4, #7
    ac2a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    ac2e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ac32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    ac36:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ac3a:	f013 0603 	ands.w	r6, r3, #3
    ac3e:	d056      	beq.n	acee <cbvprintf+0x4f2>
			OUTS(sp, fp);
    ac40:	463b      	mov	r3, r7
    ac42:	4652      	mov	r2, sl
    ac44:	4659      	mov	r1, fp
    ac46:	9802      	ldr	r0, [sp, #8]
    ac48:	f012 f936 	bl	1ceb8 <outs>
    ac4c:	2800      	cmp	r0, #0
    ac4e:	f2c0 8142 	blt.w	aed6 <cbvprintf+0x6da>
    ac52:	4405      	add	r5, r0
			continue;
    ac54:	46ba      	mov	sl, r7
    ac56:	e5d9      	b.n	a80c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ac58:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ac5c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ac5e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ac62:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    ac66:	d105      	bne.n	ac74 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    ac68:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    ac6c:	930a      	str	r3, [sp, #40]	; 0x28
    ac6e:	2300      	movs	r3, #0
    ac70:	930b      	str	r3, [sp, #44]	; 0x2c
    ac72:	e7e0      	b.n	ac36 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    ac74:	2902      	cmp	r1, #2
    ac76:	d1de      	bne.n	ac36 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    ac78:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    ac7c:	e7d0      	b.n	ac20 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ac7e:	2b02      	cmp	r3, #2
    ac80:	d123      	bne.n	acca <cbvprintf+0x4ce>
			switch (length_mod) {
    ac82:	1ecb      	subs	r3, r1, #3
    ac84:	2b04      	cmp	r3, #4
    ac86:	d813      	bhi.n	acb0 <cbvprintf+0x4b4>
    ac88:	e8df f003 	tbb	[pc, r3]
    ac8c:	120a0a03 	.word	0x120a0a03
    ac90:	12          	.byte	0x12
    ac91:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    ac92:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    ac94:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    ac96:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    ac98:	920a      	str	r2, [sp, #40]	; 0x28
    ac9a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    ac9c:	4604      	mov	r4, r0
    ac9e:	e7ca      	b.n	ac36 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    aca0:	1de0      	adds	r0, r4, #7
    aca2:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    aca6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    acaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    acae:	e7f5      	b.n	ac9c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    acb0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    acb4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    acb6:	930a      	str	r3, [sp, #40]	; 0x28
    acb8:	f04f 0300 	mov.w	r3, #0
    acbc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    acbe:	d0d3      	beq.n	ac68 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    acc0:	2902      	cmp	r1, #2
    acc2:	d1b8      	bne.n	ac36 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    acc4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    acc8:	e7d0      	b.n	ac6c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    acca:	2b04      	cmp	r3, #4
    accc:	d109      	bne.n	ace2 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    acce:	1de3      	adds	r3, r4, #7
    acd0:	f023 0307 	bic.w	r3, r3, #7
    acd4:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    acdc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ace0:	e7a9      	b.n	ac36 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ace2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ace4:	bf04      	itt	eq
    ace6:	f854 3b04 	ldreq.w	r3, [r4], #4
    acea:	930a      	streq	r3, [sp, #40]	; 0x28
    acec:	e7a3      	b.n	ac36 <cbvprintf+0x43a>
		switch (conv->specifier) {
    acee:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    acf2:	2878      	cmp	r0, #120	; 0x78
    acf4:	d8ae      	bhi.n	ac54 <cbvprintf+0x458>
    acf6:	2862      	cmp	r0, #98	; 0x62
    acf8:	d822      	bhi.n	ad40 <cbvprintf+0x544>
    acfa:	2825      	cmp	r0, #37	; 0x25
    acfc:	f43f ad8f 	beq.w	a81e <cbvprintf+0x22>
    ad00:	2858      	cmp	r0, #88	; 0x58
    ad02:	d1a7      	bne.n	ac54 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    ad04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ad08:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ad0c:	9300      	str	r3, [sp, #0]
    ad0e:	aa0c      	add	r2, sp, #48	; 0x30
    ad10:	ab04      	add	r3, sp, #16
    ad12:	f012 f88b 	bl	1ce2c <encode_uint>
    ad16:	4682      	mov	sl, r0
			if (precision >= 0) {
    ad18:	f1b8 0f00 	cmp.w	r8, #0
    ad1c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ad20:	db0c      	blt.n	ad3c <cbvprintf+0x540>
				conv->flag_zero = false;
    ad22:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ad26:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    ad2a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ad2e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ad30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    ad34:	d902      	bls.n	ad3c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    ad36:	eba8 0303 	sub.w	r3, r8, r3
    ad3a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    ad3c:	4680      	mov	r8, r0
    ad3e:	e03d      	b.n	adbc <cbvprintf+0x5c0>
    ad40:	3863      	subs	r0, #99	; 0x63
    ad42:	2815      	cmp	r0, #21
    ad44:	d886      	bhi.n	ac54 <cbvprintf+0x458>
    ad46:	a201      	add	r2, pc, #4	; (adr r2, ad4c <cbvprintf+0x550>)
    ad48:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ad4c:	0000adcd 	.word	0x0000adcd
    ad50:	0000ae31 	.word	0x0000ae31
    ad54:	0000ac55 	.word	0x0000ac55
    ad58:	0000ac55 	.word	0x0000ac55
    ad5c:	0000ac55 	.word	0x0000ac55
    ad60:	0000ac55 	.word	0x0000ac55
    ad64:	0000ae31 	.word	0x0000ae31
    ad68:	0000ac55 	.word	0x0000ac55
    ad6c:	0000ac55 	.word	0x0000ac55
    ad70:	0000ac55 	.word	0x0000ac55
    ad74:	0000ac55 	.word	0x0000ac55
    ad78:	0000ae8b 	.word	0x0000ae8b
    ad7c:	0000ae59 	.word	0x0000ae59
    ad80:	0000ae5d 	.word	0x0000ae5d
    ad84:	0000ac55 	.word	0x0000ac55
    ad88:	0000ac55 	.word	0x0000ac55
    ad8c:	0000ada5 	.word	0x0000ada5
    ad90:	0000ac55 	.word	0x0000ac55
    ad94:	0000ae59 	.word	0x0000ae59
    ad98:	0000ac55 	.word	0x0000ac55
    ad9c:	0000ac55 	.word	0x0000ac55
    ada0:	0000ae59 	.word	0x0000ae59
			if (precision >= 0) {
    ada4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    ada8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    adac:	db0a      	blt.n	adc4 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    adae:	4641      	mov	r1, r8
    adb0:	4650      	mov	r0, sl
    adb2:	f013 fa72 	bl	1e29a <strnlen>
		char sign = 0;
    adb6:	2600      	movs	r6, #0
			bpe = bps + len;
    adb8:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    adbc:	f1ba 0f00 	cmp.w	sl, #0
    adc0:	d10c      	bne.n	addc <cbvprintf+0x5e0>
    adc2:	e747      	b.n	ac54 <cbvprintf+0x458>
				len = strlen(bps);
    adc4:	4650      	mov	r0, sl
    adc6:	f013 fa61 	bl	1e28c <strlen>
    adca:	e7f4      	b.n	adb6 <cbvprintf+0x5ba>
			break;
    adcc:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    add0:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    add4:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    add8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    addc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    ade0:	b106      	cbz	r6, ade4 <cbvprintf+0x5e8>
			nj_len += 1U;
    ade2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    ade4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ade8:	06d0      	lsls	r0, r2, #27
    adea:	d568      	bpl.n	aebe <cbvprintf+0x6c2>
			nj_len += 2U;
    adec:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    adee:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    adf0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    adf2:	bf48      	it	mi
    adf4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    adf6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    adf8:	bf48      	it	mi
    adfa:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    adfc:	f1b9 0f00 	cmp.w	r9, #0
    ae00:	dd76      	ble.n	aef0 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    ae02:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    ae06:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    ae0a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    ae0e:	9303      	str	r3, [sp, #12]
    ae10:	0753      	lsls	r3, r2, #29
    ae12:	d46d      	bmi.n	aef0 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    ae14:	0650      	lsls	r0, r2, #25
    ae16:	d561      	bpl.n	aedc <cbvprintf+0x6e0>
					if (sign != 0) {
    ae18:	b146      	cbz	r6, ae2c <cbvprintf+0x630>
						OUTC(sign);
    ae1a:	4659      	mov	r1, fp
    ae1c:	4630      	mov	r0, r6
    ae1e:	9b02      	ldr	r3, [sp, #8]
    ae20:	4798      	blx	r3
    ae22:	2800      	cmp	r0, #0
    ae24:	db57      	blt.n	aed6 <cbvprintf+0x6da>
						sign = 0;
    ae26:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    ae28:	3501      	adds	r5, #1
						sign = 0;
    ae2a:	461e      	mov	r6, r3
					pad = '0';
    ae2c:	2330      	movs	r3, #48	; 0x30
    ae2e:	e056      	b.n	aede <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    ae30:	071e      	lsls	r6, r3, #28
    ae32:	d40f      	bmi.n	ae54 <cbvprintf+0x658>
				sign = ' ';
    ae34:	f013 0610 	ands.w	r6, r3, #16
    ae38:	bf18      	it	ne
    ae3a:	2620      	movne	r6, #32
			if (value->sint < 0) {
    ae3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    ae40:	2b00      	cmp	r3, #0
    ae42:	f6bf af5f 	bge.w	ad04 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    ae46:	4252      	negs	r2, r2
    ae48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ae4c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    ae4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ae52:	e757      	b.n	ad04 <cbvprintf+0x508>
				sign = '+';
    ae54:	262b      	movs	r6, #43	; 0x2b
    ae56:	e7f1      	b.n	ae3c <cbvprintf+0x640>
		switch (conv->specifier) {
    ae58:	2600      	movs	r6, #0
    ae5a:	e753      	b.n	ad04 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    ae5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae5e:	b340      	cbz	r0, aeb2 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ae60:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ae64:	9300      	str	r3, [sp, #0]
    ae66:	2100      	movs	r1, #0
    ae68:	ab04      	add	r3, sp, #16
    ae6a:	aa0c      	add	r2, sp, #48	; 0x30
    ae6c:	f011 ffde 	bl	1ce2c <encode_uint>
				conv->altform_0c = true;
    ae70:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ae74:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ae76:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ae7a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ae7e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ae82:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ae84:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ae88:	e746      	b.n	ad18 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    ae8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ae8c:	2907      	cmp	r1, #7
    ae8e:	f63f aee1 	bhi.w	ac54 <cbvprintf+0x458>
    ae92:	e8df f001 	tbb	[pc, r1]
    ae96:	040c      	.short	0x040c
    ae98:	08080c06 	.word	0x08080c06
    ae9c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ae9e:	701d      	strb	r5, [r3, #0]
		break;
    aea0:	e6d8      	b.n	ac54 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    aea2:	801d      	strh	r5, [r3, #0]
		break;
    aea4:	e6d6      	b.n	ac54 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    aea6:	17ea      	asrs	r2, r5, #31
    aea8:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    aeac:	e6d2      	b.n	ac54 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    aeae:	601d      	str	r5, [r3, #0]
		break;
    aeb0:	e6d0      	b.n	ac54 <cbvprintf+0x458>
			bps = "(nil)";
    aeb2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; af7c <cbvprintf+0x780>
    aeb6:	4606      	mov	r6, r0
			bpe = bps + 5;
    aeb8:	f10a 0805 	add.w	r8, sl, #5
    aebc:	e78e      	b.n	addc <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    aebe:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    aec0:	bf48      	it	mi
    aec2:	3301      	addmi	r3, #1
    aec4:	e793      	b.n	adee <cbvprintf+0x5f2>
					OUTC(pad);
    aec6:	4618      	mov	r0, r3
    aec8:	9303      	str	r3, [sp, #12]
    aeca:	4659      	mov	r1, fp
    aecc:	9b02      	ldr	r3, [sp, #8]
    aece:	4798      	blx	r3
    aed0:	2800      	cmp	r0, #0
    aed2:	9b03      	ldr	r3, [sp, #12]
    aed4:	da04      	bge.n	aee0 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    aed6:	b011      	add	sp, #68	; 0x44
    aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    aedc:	2320      	movs	r3, #32
    aede:	444d      	add	r5, r9
    aee0:	464a      	mov	r2, r9
				while (width-- > 0) {
    aee2:	2a00      	cmp	r2, #0
    aee4:	eba5 0109 	sub.w	r1, r5, r9
    aee8:	f109 39ff 	add.w	r9, r9, #4294967295
    aeec:	dceb      	bgt.n	aec6 <cbvprintf+0x6ca>
    aeee:	460d      	mov	r5, r1
		if (sign != 0) {
    aef0:	b136      	cbz	r6, af00 <cbvprintf+0x704>
			OUTC(sign);
    aef2:	4659      	mov	r1, fp
    aef4:	4630      	mov	r0, r6
    aef6:	9b02      	ldr	r3, [sp, #8]
    aef8:	4798      	blx	r3
    aefa:	2800      	cmp	r0, #0
    aefc:	dbeb      	blt.n	aed6 <cbvprintf+0x6da>
    aefe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    af00:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    af04:	06d9      	lsls	r1, r3, #27
    af06:	d401      	bmi.n	af0c <cbvprintf+0x710>
    af08:	071a      	lsls	r2, r3, #28
    af0a:	d506      	bpl.n	af1a <cbvprintf+0x71e>
				OUTC('0');
    af0c:	4659      	mov	r1, fp
    af0e:	2030      	movs	r0, #48	; 0x30
    af10:	9b02      	ldr	r3, [sp, #8]
    af12:	4798      	blx	r3
    af14:	2800      	cmp	r0, #0
    af16:	dbde      	blt.n	aed6 <cbvprintf+0x6da>
    af18:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    af1a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    af1e:	06db      	lsls	r3, r3, #27
    af20:	d507      	bpl.n	af32 <cbvprintf+0x736>
				OUTC(conv->specifier);
    af22:	4659      	mov	r1, fp
    af24:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    af28:	9b02      	ldr	r3, [sp, #8]
    af2a:	4798      	blx	r3
    af2c:	2800      	cmp	r0, #0
    af2e:	dbd2      	blt.n	aed6 <cbvprintf+0x6da>
    af30:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    af32:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    af34:	442e      	add	r6, r5
    af36:	1b73      	subs	r3, r6, r5
    af38:	2b00      	cmp	r3, #0
    af3a:	dc16      	bgt.n	af6a <cbvprintf+0x76e>
			OUTS(bps, bpe);
    af3c:	4643      	mov	r3, r8
    af3e:	4652      	mov	r2, sl
    af40:	4659      	mov	r1, fp
    af42:	9802      	ldr	r0, [sp, #8]
    af44:	f011 ffb8 	bl	1ceb8 <outs>
    af48:	2800      	cmp	r0, #0
    af4a:	dbc4      	blt.n	aed6 <cbvprintf+0x6da>
    af4c:	4405      	add	r5, r0
		while (width > 0) {
    af4e:	44a9      	add	r9, r5
    af50:	eba9 0305 	sub.w	r3, r9, r5
    af54:	2b00      	cmp	r3, #0
    af56:	f77f ae7d 	ble.w	ac54 <cbvprintf+0x458>
			OUTC(' ');
    af5a:	4659      	mov	r1, fp
    af5c:	2020      	movs	r0, #32
    af5e:	9b02      	ldr	r3, [sp, #8]
    af60:	4798      	blx	r3
    af62:	2800      	cmp	r0, #0
    af64:	dbb7      	blt.n	aed6 <cbvprintf+0x6da>
    af66:	3501      	adds	r5, #1
			--width;
    af68:	e7f2      	b.n	af50 <cbvprintf+0x754>
				OUTC('0');
    af6a:	4659      	mov	r1, fp
    af6c:	2030      	movs	r0, #48	; 0x30
    af6e:	9b02      	ldr	r3, [sp, #8]
    af70:	4798      	blx	r3
    af72:	2800      	cmp	r0, #0
    af74:	dbaf      	blt.n	aed6 <cbvprintf+0x6da>
    af76:	3501      	adds	r5, #1
    af78:	e7dd      	b.n	af36 <cbvprintf+0x73a>
    af7a:	bf00      	nop
    af7c:	00022e7a 	.word	0x00022e7a

0000af80 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    af80:	b148      	cbz	r0, af96 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    af82:	4b05      	ldr	r3, [pc, #20]	; (af98 <arch_busy_wait+0x18>)
    af84:	681a      	ldr	r2, [r3, #0]
    af86:	4b05      	ldr	r3, [pc, #20]	; (af9c <arch_busy_wait+0x1c>)
    af88:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    af8c:	4b04      	ldr	r3, [pc, #16]	; (afa0 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    af8e:	4350      	muls	r0, r2
    af90:	f043 0301 	orr.w	r3, r3, #1
    af94:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    af96:	4770      	bx	lr
    af98:	200083e8 	.word	0x200083e8
    af9c:	000f4240 	.word	0x000f4240
    afa0:	00021c40 	.word	0x00021c40

0000afa4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    afa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    afa8:	460e      	mov	r6, r1
    afaa:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    afac:	2108      	movs	r1, #8
    afae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    afb0:	f012 f87a 	bl	1d0a8 <nvs_al_size.isra.0>
    afb4:	4607      	mov	r7, r0

	*addr -= ate_size;
    afb6:	6834      	ldr	r4, [r6, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    afb8:	f8df 9044 	ldr.w	r9, [pc, #68]	; b000 <nvs_recover_last_ate+0x5c>
	*addr -= ate_size;
    afbc:	1a24      	subs	r4, r4, r0
    afbe:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    afc0:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    afc4:	42ac      	cmp	r4, r5
    afc6:	d803      	bhi.n	afd0 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    afc8:	2000      	movs	r0, #0
}
    afca:	b003      	add	sp, #12
    afcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    afd0:	2308      	movs	r3, #8
    afd2:	466a      	mov	r2, sp
    afd4:	4621      	mov	r1, r4
    afd6:	4640      	mov	r0, r8
    afd8:	f011 ffc2 	bl	1cf60 <nvs_flash_rd>
		if (rc) {
    afdc:	2800      	cmp	r0, #0
    afde:	d1f4      	bne.n	afca <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    afe0:	4668      	mov	r0, sp
    afe2:	f012 f841 	bl	1d068 <nvs_ate_crc8_check>
    afe6:	b940      	cbnz	r0, affa <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    afe8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    afec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    aff0:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    aff4:	4413      	add	r3, r2
    aff6:	441d      	add	r5, r3
			*addr = ate_end_addr;
    aff8:	6034      	str	r4, [r6, #0]
		ate_end_addr -= ate_size;
    affa:	1be4      	subs	r4, r4, r7
    affc:	e7e2      	b.n	afc4 <nvs_recover_last_ate+0x20>
    affe:	bf00      	nop
    b000:	ffff0000 	.word	0xffff0000

0000b004 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b008:	2108      	movs	r1, #8
{
    b00a:	b093      	sub	sp, #76	; 0x4c
    b00c:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b00e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b010:	f012 f84a 	bl	1d0a8 <nvs_al_size.isra.0>
    b014:	4680      	mov	r8, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    b016:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    b018:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    b01a:	0c1b      	lsrs	r3, r3, #16
    b01c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    b01e:	a901      	add	r1, sp, #4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    b020:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    b022:	f012 f836 	bl	1d092 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    b026:	9b01      	ldr	r3, [sp, #4]
    b028:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b02a:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    b02c:	4419      	add	r1, r3
    b02e:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b032:	2308      	movs	r3, #8
    b034:	aa04      	add	r2, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    b036:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b038:	f011 ff92 	bl	1cf60 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    b03c:	2800      	cmp	r0, #0
    b03e:	f2c0 8083 	blt.w	b148 <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    b042:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b044:	aa04      	add	r2, sp, #16
    b046:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b048:	2300      	movs	r3, #0
		if (data8[i] != value) {
    b04a:	f812 0b01 	ldrb.w	r0, [r2], #1
    b04e:	4281      	cmp	r1, r0
    b050:	d16c      	bne.n	b12c <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b052:	3301      	adds	r3, #1
    b054:	2b08      	cmp	r3, #8
    b056:	d1f8      	bne.n	b04a <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    b058:	4620      	mov	r0, r4
    b05a:	9901      	ldr	r1, [sp, #4]
    b05c:	f011 ffdd 	bl	1d01a <nvs_flash_erase_sector>
		if (rc) {
    b060:	e072      	b.n	b148 <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    b062:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    b064:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    b068:	0c1b      	lsrs	r3, r3, #16
    b06a:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    b06c:	4413      	add	r3, r2
    b06e:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    b070:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b150 <nvs_gc+0x14c>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    b074:	4620      	mov	r0, r4
    b076:	aa06      	add	r2, sp, #24
    b078:	a902      	add	r1, sp, #8
		gc_prev_addr = gc_addr;
    b07a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    b07e:	f012 f81d 	bl	1d0bc <nvs_prev_ate>
		if (rc) {
    b082:	2800      	cmp	r0, #0
    b084:	d160      	bne.n	b148 <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    b086:	a806      	add	r0, sp, #24
    b088:	f011 ffee 	bl	1d068 <nvs_ate_crc8_check>
    b08c:	bb80      	cbnz	r0, b0f0 <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    b08e:	6863      	ldr	r3, [r4, #4]
    b090:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b092:	4620      	mov	r0, r4
    b094:	aa08      	add	r2, sp, #32
    b096:	a903      	add	r1, sp, #12
			wlk_prev_addr = wlk_addr;
    b098:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b09a:	f012 f80f 	bl	1d0bc <nvs_prev_ate>
			if (rc) {
    b09e:	2800      	cmp	r0, #0
    b0a0:	d152      	bne.n	b148 <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    b0a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    b0a6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b0aa:	429a      	cmp	r2, r3
    b0ac:	d023      	beq.n	b0f6 <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    b0ae:	6862      	ldr	r2, [r4, #4]
    b0b0:	9b03      	ldr	r3, [sp, #12]
    b0b2:	429a      	cmp	r2, r3
    b0b4:	d1ed      	bne.n	b092 <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    b0b6:	454d      	cmp	r5, r9
    b0b8:	d11a      	bne.n	b0f0 <nvs_gc+0xec>
    b0ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b0be:	b1bb      	cbz	r3, b0f0 <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    b0c0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    b0c4:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    b0c8:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b0ca:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    b0cc:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b0ce:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    b0d2:	f011 ffd5 	bl	1d080 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    b0d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    b0d8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    b0dc:	681d      	ldr	r5, [r3, #0]
    b0de:	426d      	negs	r5, r5
	block_size =
    b0e0:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    b0e4:	b96f      	cbnz	r7, b102 <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    b0e6:	4620      	mov	r0, r4
    b0e8:	a906      	add	r1, sp, #24
    b0ea:	f012 f895 	bl	1d218 <nvs_flash_ate_wrt>
			if (rc) {
    b0ee:	bb58      	cbnz	r0, b148 <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    b0f0:	45c1      	cmp	r9, r8
    b0f2:	d1bf      	bne.n	b074 <nvs_gc+0x70>
    b0f4:	e7b0      	b.n	b058 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    b0f6:	a808      	add	r0, sp, #32
    b0f8:	f011 ffb6 	bl	1d068 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    b0fc:	2800      	cmp	r0, #0
    b0fe:	d1d6      	bne.n	b0ae <nvs_gc+0xaa>
    b100:	e7d9      	b.n	b0b6 <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    b102:	42bd      	cmp	r5, r7
    b104:	46ab      	mov	fp, r5
    b106:	bf28      	it	cs
    b108:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    b10a:	4631      	mov	r1, r6
    b10c:	465b      	mov	r3, fp
    b10e:	4620      	mov	r0, r4
    b110:	aa0a      	add	r2, sp, #40	; 0x28
    b112:	f011 ff25 	bl	1cf60 <nvs_flash_rd>
		if (rc) {
    b116:	b9b8      	cbnz	r0, b148 <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    b118:	465a      	mov	r2, fp
    b11a:	4620      	mov	r0, r4
    b11c:	a90a      	add	r1, sp, #40	; 0x28
    b11e:	f012 f868 	bl	1d1f2 <nvs_flash_data_wrt>
		if (rc) {
    b122:	b988      	cbnz	r0, b148 <nvs_gc+0x144>
		len -= bytes_to_copy;
    b124:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    b128:	445e      	add	r6, fp
    b12a:	e7db      	b.n	b0e4 <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    b12c:	9802      	ldr	r0, [sp, #8]
    b12e:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    b132:	a804      	add	r0, sp, #16
    b134:	f011 ff98 	bl	1d068 <nvs_ate_crc8_check>
    b138:	2800      	cmp	r0, #0
    b13a:	d092      	beq.n	b062 <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    b13c:	4620      	mov	r0, r4
    b13e:	a902      	add	r1, sp, #8
    b140:	f7ff ff30 	bl	afa4 <nvs_recover_last_ate>
		if (rc) {
    b144:	2800      	cmp	r0, #0
    b146:	d093      	beq.n	b070 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    b148:	b013      	add	sp, #76	; 0x4c
    b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b14e:	bf00      	nop
    b150:	ffff0000 	.word	0xffff0000

0000b154 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    b154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b158:	4604      	mov	r4, r0
    b15a:	460d      	mov	r5, r1
    b15c:	b086      	sub	sp, #24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    b15e:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    b162:	4630      	mov	r0, r6
    b164:	f016 f908 	bl	21378 <z_impl_k_mutex_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b168:	4628      	mov	r0, r5
    b16a:	f00e fc7f 	bl	19a6c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    b16e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    b170:	b948      	cbnz	r0, b186 <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    b172:	2145      	movs	r1, #69	; 0x45
    b174:	488b      	ldr	r0, [pc, #556]	; (b3a4 <nvs_init+0x250>)
    b176:	f011 fc0f 	bl	1c998 <printk>
		return -ENXIO;
    b17a:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    b17e:	4628      	mov	r0, r5
    b180:	b006      	add	sp, #24
    b182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b186:	6883      	ldr	r3, [r0, #8]
    b188:	691b      	ldr	r3, [r3, #16]
    b18a:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    b18c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    b18e:	b930      	cbnz	r0, b19e <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
    b190:	2145      	movs	r1, #69	; 0x45
    b192:	4885      	ldr	r0, [pc, #532]	; (b3a8 <nvs_init+0x254>)
		LOG_ERR("Configuration error - sector count");
    b194:	f011 fc00 	bl	1c998 <printk>
		return -EINVAL;
    b198:	f06f 0515 	mvn.w	r5, #21
    b19c:	e7ef      	b.n	b17e <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    b19e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    b1a0:	6883      	ldr	r3, [r0, #8]
    b1a2:	691b      	ldr	r3, [r3, #16]
    b1a4:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    b1a6:	6803      	ldr	r3, [r0, #0]
    b1a8:	3b01      	subs	r3, #1
    b1aa:	2b1f      	cmp	r3, #31
    b1ac:	d902      	bls.n	b1b4 <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
    b1ae:	2145      	movs	r1, #69	; 0x45
    b1b0:	487e      	ldr	r0, [pc, #504]	; (b3ac <nvs_init+0x258>)
    b1b2:	e7ef      	b.n	b194 <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    b1b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b1b6:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b1b8:	aa03      	add	r2, sp, #12
    b1ba:	f015 fb39 	bl	20830 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    b1be:	b110      	cbz	r0, b1c6 <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
    b1c0:	2145      	movs	r1, #69	; 0x45
    b1c2:	487b      	ldr	r0, [pc, #492]	; (b3b0 <nvs_init+0x25c>)
    b1c4:	e7e6      	b.n	b194 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    b1c6:	89a5      	ldrh	r5, [r4, #12]
    b1c8:	b12d      	cbz	r5, b1d6 <nvs_init+0x82>
    b1ca:	9b04      	ldr	r3, [sp, #16]
    b1cc:	fbb5 f2f3 	udiv	r2, r5, r3
    b1d0:	fb03 5512 	mls	r5, r3, r2, r5
    b1d4:	b115      	cbz	r5, b1dc <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
    b1d6:	2145      	movs	r1, #69	; 0x45
    b1d8:	4876      	ldr	r0, [pc, #472]	; (b3b4 <nvs_init+0x260>)
    b1da:	e7db      	b.n	b194 <nvs_init+0x40>
	if (fs->sector_count < 2) {
    b1dc:	89e3      	ldrh	r3, [r4, #14]
    b1de:	2b01      	cmp	r3, #1
    b1e0:	d802      	bhi.n	b1e8 <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
    b1e2:	2145      	movs	r1, #69	; 0x45
    b1e4:	4874      	ldr	r0, [pc, #464]	; (b3b8 <nvs_init+0x264>)
    b1e6:	e7d5      	b.n	b194 <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b1e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    b1ea:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b1ec:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b1f0:	f04f 33ff 	mov.w	r3, #4294967295
    b1f4:	f04f 32ff 	mov.w	r2, #4294967295
    b1f8:	4630      	mov	r0, r6
    b1fa:	f00e ff59 	bl	1a0b0 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b1fe:	2108      	movs	r1, #8
    b200:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b202:	f011 ff51 	bl	1d0a8 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    b206:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b208:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    b20a:	89e3      	ldrh	r3, [r4, #14]
    b20c:	fa1f fa85 	uxth.w	sl, r5
    b210:	4553      	cmp	r3, sl
    b212:	d868      	bhi.n	b2e6 <nvs_init+0x192>
	if (closed_sectors == fs->sector_count) {
    b214:	89e3      	ldrh	r3, [r4, #14]
    b216:	4543      	cmp	r3, r8
    b218:	f000 80a8 	beq.w	b36c <nvs_init+0x218>
	if (i == fs->sector_count) {
    b21c:	459a      	cmp	sl, r3
    b21e:	d10b      	bne.n	b238 <nvs_init+0xe4>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    b220:	9900      	ldr	r1, [sp, #0]
    b222:	2308      	movs	r3, #8
    b224:	464a      	mov	r2, r9
    b226:	4620      	mov	r0, r4
    b228:	1bc9      	subs	r1, r1, r7
    b22a:	f011 fed1 	bl	1cfd0 <nvs_flash_cmp_const>
		if (!rc) {
    b22e:	b918      	cbnz	r0, b238 <nvs_init+0xe4>
			nvs_sector_advance(fs, &addr);
    b230:	4669      	mov	r1, sp
    b232:	89e0      	ldrh	r0, [r4, #14]
    b234:	f011 ff2d 	bl	1d092 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    b238:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b23a:	f8df 8180 	ldr.w	r8, [pc, #384]	; b3bc <nvs_init+0x268>
	fs->ate_wra = addr - ate_size;
    b23e:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    b240:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    b244:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b246:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    b248:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    b24c:	4299      	cmp	r1, r3
    b24e:	d30f      	bcc.n	b270 <nvs_init+0x11c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b250:	2308      	movs	r3, #8
    b252:	4620      	mov	r0, r4
    b254:	aa01      	add	r2, sp, #4
    b256:	f011 fe83 	bl	1cf60 <nvs_flash_rd>
		if (rc) {
    b25a:	4605      	mov	r5, r0
    b25c:	bb30      	cbnz	r0, b2ac <nvs_init+0x158>
    b25e:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    b260:	f813 2b01 	ldrb.w	r2, [r3], #1
    b264:	4591      	cmp	r9, r2
    b266:	f040 8084 	bne.w	b372 <nvs_init+0x21e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b26a:	3501      	adds	r5, #1
    b26c:	2d08      	cmp	r5, #8
    b26e:	d1f7      	bne.n	b260 <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
    b270:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    b274:	428b      	cmp	r3, r1
    b276:	d907      	bls.n	b288 <nvs_init+0x134>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    b278:	464a      	mov	r2, r9
    b27a:	4620      	mov	r0, r4
    b27c:	1a5b      	subs	r3, r3, r1
    b27e:	f011 fea7 	bl	1cfd0 <nvs_flash_cmp_const>
		if (rc < 0) {
    b282:	1e05      	subs	r5, r0, #0
    b284:	db12      	blt.n	b2ac <nvs_init+0x158>
		if (!rc) {
    b286:	d153      	bne.n	b330 <nvs_init+0x1dc>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b288:	6863      	ldr	r3, [r4, #4]
    b28a:	f8df 8130 	ldr.w	r8, [pc, #304]	; b3bc <nvs_init+0x268>
	nvs_sector_advance(fs, &addr);
    b28e:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b290:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    b294:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b296:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    b298:	f011 fefb 	bl	1d092 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    b29c:	464a      	mov	r2, r9
    b29e:	4620      	mov	r0, r4
    b2a0:	89a3      	ldrh	r3, [r4, #12]
    b2a2:	9900      	ldr	r1, [sp, #0]
    b2a4:	f011 fe94 	bl	1cfd0 <nvs_flash_cmp_const>
	if (rc < 0) {
    b2a8:	1e05      	subs	r5, r0, #0
    b2aa:	da47      	bge.n	b33c <nvs_init+0x1e8>
	return z_impl_k_mutex_unlock(mutex);
    b2ac:	4630      	mov	r0, r6
    b2ae:	f00e ffcb 	bl	1a248 <z_impl_k_mutex_unlock>
	if (rc) {
    b2b2:	2d00      	cmp	r5, #0
    b2b4:	f47f af63 	bne.w	b17e <nvs_init+0x2a>
	fs->ready = true;
    b2b8:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b2ba:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
    b2bc:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b2be:	2149      	movs	r1, #73	; 0x49
    b2c0:	89a3      	ldrh	r3, [r4, #12]
    b2c2:	483f      	ldr	r0, [pc, #252]	; (b3c0 <nvs_init+0x26c>)
    b2c4:	f011 fb68 	bl	1c998 <printk>
	LOG_INF("alloc wra: %d, %x",
    b2c8:	6862      	ldr	r2, [r4, #4]
    b2ca:	2149      	movs	r1, #73	; 0x49
    b2cc:	b293      	uxth	r3, r2
    b2ce:	483d      	ldr	r0, [pc, #244]	; (b3c4 <nvs_init+0x270>)
    b2d0:	0c12      	lsrs	r2, r2, #16
    b2d2:	f011 fb61 	bl	1c998 <printk>
	LOG_INF("data wra: %d, %x",
    b2d6:	68a2      	ldr	r2, [r4, #8]
    b2d8:	2149      	movs	r1, #73	; 0x49
    b2da:	b293      	uxth	r3, r2
    b2dc:	483a      	ldr	r0, [pc, #232]	; (b3c8 <nvs_init+0x274>)
    b2de:	0c12      	lsrs	r2, r2, #16
    b2e0:	f011 fb5a 	bl	1c998 <printk>
	return 0;
    b2e4:	e74b      	b.n	b17e <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
    b2e6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    b2e8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    b2ea:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    b2ec:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b2f0:	464a      	mov	r2, r9
    b2f2:	2308      	movs	r3, #8
    b2f4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    b2f6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b2f8:	f011 fe6a 	bl	1cfd0 <nvs_flash_cmp_const>
		if (rc) {
    b2fc:	b180      	cbz	r0, b320 <nvs_init+0x1cc>
			nvs_sector_advance(fs, &addr);
    b2fe:	4669      	mov	r1, sp
    b300:	89e0      	ldrh	r0, [r4, #14]
    b302:	f011 fec6 	bl	1d092 <nvs_sector_advance.isra.0>
			closed_sectors++;
    b306:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b30a:	2308      	movs	r3, #8
    b30c:	464a      	mov	r2, r9
    b30e:	4620      	mov	r0, r4
    b310:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    b312:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b316:	f011 fe5b 	bl	1cfd0 <nvs_flash_cmp_const>
			if (!rc) {
    b31a:	2800      	cmp	r0, #0
    b31c:	f43f af7a 	beq.w	b214 <nvs_init+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    b320:	3501      	adds	r5, #1
    b322:	e772      	b.n	b20a <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b324:	f1ba 0f00 	cmp.w	sl, #0
    b328:	d039      	beq.n	b39e <nvs_init+0x24a>
				rc = -ESPIPE;
    b32a:	f06f 051c 	mvn.w	r5, #28
    b32e:	e7bd      	b.n	b2ac <nvs_init+0x158>
		fs->data_wra += fs->flash_parameters->write_block_size;
    b330:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b332:	68a3      	ldr	r3, [r4, #8]
    b334:	6812      	ldr	r2, [r2, #0]
    b336:	4413      	add	r3, r2
    b338:	60a3      	str	r3, [r4, #8]
    b33a:	e799      	b.n	b270 <nvs_init+0x11c>
	if (rc) {
    b33c:	d0b6      	beq.n	b2ac <nvs_init+0x158>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    b33e:	4620      	mov	r0, r4
    b340:	6861      	ldr	r1, [r4, #4]
    b342:	f011 fe6a 	bl	1d01a <nvs_flash_erase_sector>
		if (rc) {
    b346:	4605      	mov	r5, r0
    b348:	2800      	cmp	r0, #0
    b34a:	d1af      	bne.n	b2ac <nvs_init+0x158>
		fs->ate_wra &= ADDR_SECT_MASK;
    b34c:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b34e:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    b350:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b354:	4403      	add	r3, r0
    b356:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    b35a:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    b35c:	ea00 0008 	and.w	r0, r0, r8
    b360:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    b362:	4620      	mov	r0, r4
    b364:	f7ff fe4e 	bl	b004 <nvs_gc>
    b368:	4605      	mov	r5, r0
end:
    b36a:	e79f      	b.n	b2ac <nvs_init+0x158>
		rc = -EDEADLK;
    b36c:	f06f 0520 	mvn.w	r5, #32
    b370:	e79c      	b.n	b2ac <nvs_init+0x158>
		if (!nvs_ate_crc8_check(&last_ate)) {
    b372:	a801      	add	r0, sp, #4
    b374:	f011 fe78 	bl	1d068 <nvs_ate_crc8_check>
    b378:	6865      	ldr	r5, [r4, #4]
    b37a:	b980      	cbnz	r0, b39e <nvs_init+0x24a>
			fs->data_wra = addr & ADDR_SECT_MASK;
    b37c:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    b37e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b382:	f8bd a008 	ldrh.w	sl, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    b386:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    b38a:	441a      	add	r2, r3
    b38c:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b38e:	4651      	mov	r1, sl
    b390:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b392:	f011 fe89 	bl	1d0a8 <nvs_al_size.isra.0>
    b396:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b398:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b39a:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b39c:	d0c2      	beq.n	b324 <nvs_init+0x1d0>
		fs->ate_wra -= ate_size;
    b39e:	1bed      	subs	r5, r5, r7
    b3a0:	6065      	str	r5, [r4, #4]
    b3a2:	e751      	b.n	b248 <nvs_init+0xf4>
    b3a4:	00022ec5 	.word	0x00022ec5
    b3a8:	00022ee6 	.word	0x00022ee6
    b3ac:	00022f0d 	.word	0x00022f0d
    b3b0:	00022f2f 	.word	0x00022f2f
    b3b4:	00022f4c 	.word	0x00022f4c
    b3b8:	00022f65 	.word	0x00022f65
    b3bc:	ffff0000 	.word	0xffff0000
    b3c0:	00022f8d 	.word	0x00022f8d
    b3c4:	00022fa9 	.word	0x00022fa9
    b3c8:	00022fc0 	.word	0x00022fc0

0000b3cc <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3d0:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    b3d2:	7c03      	ldrb	r3, [r0, #16]
{
    b3d4:	4604      	mov	r4, r0
    b3d6:	4689      	mov	r9, r1
    b3d8:	4690      	mov	r8, r2
    b3da:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    b3dc:	b94b      	cbnz	r3, b3f2 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    b3de:	2145      	movs	r1, #69	; 0x45
    b3e0:	485d      	ldr	r0, [pc, #372]	; (b558 <nvs_write+0x18c>)
    b3e2:	f011 fad9 	bl	1c998 <printk>
		return -EACCES;
    b3e6:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    b3ea:	4628      	mov	r0, r5
    b3ec:	b009      	add	sp, #36	; 0x24
    b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b3f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b3f4:	2108      	movs	r1, #8
    b3f6:	4610      	mov	r0, r2
    b3f8:	f011 fe56 	bl	1d0a8 <nvs_al_size.isra.0>
    b3fc:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    b3fe:	4631      	mov	r1, r6
    b400:	4610      	mov	r0, r2
    b402:	f011 fe51 	bl	1d0a8 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    b406:	89a3      	ldrh	r3, [r4, #12]
    b408:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    b40c:	1a9b      	subs	r3, r3, r2
    b40e:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    b410:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    b412:	f0c0 809d 	bcc.w	b550 <nvs_write+0x184>
    b416:	b11e      	cbz	r6, b420 <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
    b418:	f1b8 0f00 	cmp.w	r8, #0
    b41c:	f000 8098 	beq.w	b550 <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
    b420:	6863      	ldr	r3, [r4, #4]
    b422:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b424:	4620      	mov	r0, r4
    b426:	aa04      	add	r2, sp, #16
    b428:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    b42a:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b42e:	f011 fe45 	bl	1d0bc <nvs_prev_ate>
		if (rc) {
    b432:	4605      	mov	r5, r0
    b434:	2800      	cmp	r0, #0
    b436:	d1d8      	bne.n	b3ea <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    b438:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b43c:	454b      	cmp	r3, r9
    b43e:	d005      	beq.n	b44c <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
    b440:	6862      	ldr	r2, [r4, #4]
    b442:	9b03      	ldr	r3, [sp, #12]
    b444:	429a      	cmp	r2, r3
    b446:	d1ed      	bne.n	b424 <nvs_write+0x58>
		if (len == 0) {
    b448:	b9de      	cbnz	r6, b482 <nvs_write+0xb6>
    b44a:	e7ce      	b.n	b3ea <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    b44c:	a804      	add	r0, sp, #16
    b44e:	f011 fe0b 	bl	1d068 <nvs_ate_crc8_check>
    b452:	2800      	cmp	r0, #0
    b454:	d1f4      	bne.n	b440 <nvs_write+0x74>
			if (wlk_ate.len == 0U) {
    b456:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    b45a:	b186      	cbz	r6, b47e <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    b45c:	42b3      	cmp	r3, r6
    b45e:	d110      	bne.n	b482 <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    b460:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    b464:	ea4f 411b 	mov.w	r1, fp, lsr #16
    b468:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    b46a:	4401      	add	r1, r0
    b46c:	4633      	mov	r3, r6
    b46e:	4642      	mov	r2, r8
    b470:	4620      	mov	r0, r4
    b472:	f011 fd83 	bl	1cf7c <nvs_flash_block_cmp>
			if (rc <= 0) {
    b476:	2800      	cmp	r0, #0
    b478:	dc03      	bgt.n	b482 <nvs_write+0xb6>
    b47a:	4605      	mov	r5, r0
    b47c:	e7b5      	b.n	b3ea <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    b47e:	2b00      	cmp	r3, #0
    b480:	d0b3      	beq.n	b3ea <nvs_write+0x1e>
	if (data_size) {
    b482:	bba7      	cbnz	r7, b4ee <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    b484:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    b488:	f04f 32ff 	mov.w	r2, #4294967295
    b48c:	f04f 33ff 	mov.w	r3, #4294967295
    b490:	4650      	mov	r0, sl
    b492:	f00e fe0d 	bl	1a0b0 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    b496:	f8df b0c4 	ldr.w	fp, [pc, #196]	; b55c <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
    b49a:	89e3      	ldrh	r3, [r4, #14]
    b49c:	429d      	cmp	r5, r3
    b49e:	d054      	beq.n	b54a <nvs_write+0x17e>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    b4a0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    b4a4:	18f9      	adds	r1, r7, r3
    b4a6:	428a      	cmp	r2, r1
    b4a8:	d324      	bcc.n	b4f4 <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b4aa:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    b4ae:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    b4b0:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    b4b2:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    b4b6:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    b4ba:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    b4be:	f011 fddf 	bl	1d080 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    b4c2:	4632      	mov	r2, r6
    b4c4:	4641      	mov	r1, r8
    b4c6:	4620      	mov	r0, r4
    b4c8:	f011 fe93 	bl	1d1f2 <nvs_flash_data_wrt>
	if (rc) {
    b4cc:	4603      	mov	r3, r0
    b4ce:	b938      	cbnz	r0, b4e0 <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
    b4d0:	4620      	mov	r0, r4
    b4d2:	a906      	add	r1, sp, #24
    b4d4:	f011 fea0 	bl	1d218 <nvs_flash_ate_wrt>
	rc = len;
    b4d8:	2800      	cmp	r0, #0
    b4da:	bf14      	ite	ne
    b4dc:	4603      	movne	r3, r0
    b4de:	4633      	moveq	r3, r6
    b4e0:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    b4e2:	4650      	mov	r0, sl
    b4e4:	f00e feb0 	bl	1a248 <z_impl_k_mutex_unlock>
	return rc;
    b4e8:	9b01      	ldr	r3, [sp, #4]
    b4ea:	461d      	mov	r5, r3
    b4ec:	e77d      	b.n	b3ea <nvs_write+0x1e>
		required_space = data_size + ate_size;
    b4ee:	4457      	add	r7, sl
    b4f0:	b2bf      	uxth	r7, r7
    b4f2:	e7c7      	b.n	b484 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b4f4:	2108      	movs	r1, #8
    b4f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b4f8:	f011 fdd6 	bl	1d0a8 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    b4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b500:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    b504:	2300      	movs	r3, #0
    b506:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    b50a:	1813      	adds	r3, r2, r0
    b50c:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    b510:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    b512:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    b516:	441a      	add	r2, r3
    b518:	1a12      	subs	r2, r2, r0
    b51a:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    b51c:	a806      	add	r0, sp, #24
    b51e:	f011 fdaf 	bl	1d080 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    b522:	a906      	add	r1, sp, #24
    b524:	4620      	mov	r0, r4
    b526:	f011 fe77 	bl	1d218 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    b52a:	89e0      	ldrh	r0, [r4, #14]
    b52c:	1d21      	adds	r1, r4, #4
    b52e:	f011 fdb0 	bl	1d092 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b532:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    b534:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b536:	ea03 030b 	and.w	r3, r3, fp
    b53a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    b53c:	f7ff fd62 	bl	b004 <nvs_gc>
		if (rc) {
    b540:	4603      	mov	r3, r0
    b542:	2800      	cmp	r0, #0
    b544:	d1cc      	bne.n	b4e0 <nvs_write+0x114>
		gc_count++;
    b546:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    b548:	e7a7      	b.n	b49a <nvs_write+0xce>
			rc = -ENOSPC;
    b54a:	f06f 031b 	mvn.w	r3, #27
    b54e:	e7c7      	b.n	b4e0 <nvs_write+0x114>
		return -EINVAL;
    b550:	f06f 0515 	mvn.w	r5, #21
    b554:	e749      	b.n	b3ea <nvs_write+0x1e>
    b556:	bf00      	nop
    b558:	00022eac 	.word	0x00022eac
    b55c:	ffff0000 	.word	0xffff0000

0000b560 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    b560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b564:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    b566:	7c03      	ldrb	r3, [r0, #16]
{
    b568:	4604      	mov	r4, r0
    b56a:	460f      	mov	r7, r1
    b56c:	4690      	mov	r8, r2
    b56e:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    b572:	b943      	cbnz	r3, b586 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    b574:	4828      	ldr	r0, [pc, #160]	; (b618 <nvs_read_hist+0xb8>)
    b576:	2145      	movs	r1, #69	; 0x45
    b578:	f011 fa0e 	bl	1c998 <printk>
		return -EACCES;
    b57c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    b580:	b004      	add	sp, #16
    b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b586:	2108      	movs	r1, #8
    b588:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b58a:	f011 fd8d 	bl	1d0a8 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    b58e:	89a3      	ldrh	r3, [r4, #12]
    b590:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    b594:	42b3      	cmp	r3, r6
    b596:	d33b      	bcc.n	b610 <nvs_read_hist+0xb0>
	cnt_his = 0U;
    b598:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    b59c:	6863      	ldr	r3, [r4, #4]
    b59e:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b5a0:	4620      	mov	r0, r4
    b5a2:	aa02      	add	r2, sp, #8
    b5a4:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    b5a6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b5a8:	f011 fd88 	bl	1d0bc <nvs_prev_ate>
		if (rc) {
    b5ac:	2800      	cmp	r0, #0
    b5ae:	d1e7      	bne.n	b580 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    b5b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b5b4:	42bb      	cmp	r3, r7
    b5b6:	d107      	bne.n	b5c8 <nvs_read_hist+0x68>
    b5b8:	a802      	add	r0, sp, #8
    b5ba:	f011 fd55 	bl	1d068 <nvs_ate_crc8_check>
    b5be:	b918      	cbnz	r0, b5c8 <nvs_read_hist+0x68>
			cnt_his++;
    b5c0:	f10a 0a01 	add.w	sl, sl, #1
    b5c4:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    b5c8:	6862      	ldr	r2, [r4, #4]
    b5ca:	9b01      	ldr	r3, [sp, #4]
    b5cc:	429a      	cmp	r2, r3
    b5ce:	d018      	beq.n	b602 <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
    b5d0:	45ca      	cmp	sl, r9
    b5d2:	d9e5      	bls.n	b5a0 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b5d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b5d8:	b1bb      	cbz	r3, b60a <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b5da:	45ca      	cmp	sl, r9
    b5dc:	d315      	bcc.n	b60a <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
    b5de:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    b5e2:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b5e4:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    b5e6:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b5ea:	bf28      	it	cs
    b5ec:	4633      	movcs	r3, r6
    b5ee:	4642      	mov	r2, r8
    b5f0:	4620      	mov	r0, r4
    b5f2:	4429      	add	r1, r5
    b5f4:	f011 fcb4 	bl	1cf60 <nvs_flash_rd>
	if (rc) {
    b5f8:	2800      	cmp	r0, #0
    b5fa:	d1c1      	bne.n	b580 <nvs_read_hist+0x20>
	return wlk_ate.len;
    b5fc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b600:	e7be      	b.n	b580 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b602:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b606:	42bb      	cmp	r3, r7
    b608:	d0e4      	beq.n	b5d4 <nvs_read_hist+0x74>
		return -ENOENT;
    b60a:	f06f 0001 	mvn.w	r0, #1
    b60e:	e7b7      	b.n	b580 <nvs_read_hist+0x20>
		return -EINVAL;
    b610:	f06f 0015 	mvn.w	r0, #21
    b614:	e7b4      	b.n	b580 <nvs_read_hist+0x20>
    b616:	bf00      	nop
    b618:	00022eac 	.word	0x00022eac

0000b61c <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b61c:	4b01      	ldr	r3, [pc, #4]	; (b624 <virtio_set_status+0x8>)
    b61e:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b620:	4770      	bx	lr
    b622:	bf00      	nop
    b624:	20070000 	.word	0x20070000

0000b628 <init_status_flag>:
    b628:	2000      	movs	r0, #0
    b62a:	4b01      	ldr	r3, [pc, #4]	; (b630 <init_status_flag+0x8>)
    b62c:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b62e:	4770      	bx	lr
    b630:	20070000 	.word	0x20070000

0000b634 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b634:	4b01      	ldr	r3, [pc, #4]	; (b63c <ipm_callback_process+0x8>)
    b636:	6818      	ldr	r0, [r3, #0]
    b638:	f015 bcfd 	b.w	21036 <virtqueue_notification>
    b63c:	20009710 	.word	0x20009710

0000b640 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b640:	4b0a      	ldr	r3, [pc, #40]	; (b66c <virtio_notify+0x2c>)
{
    b642:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b644:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b646:	2300      	movs	r3, #0
    b648:	6882      	ldr	r2, [r0, #8]
    b64a:	9300      	str	r3, [sp, #0]
    b64c:	6814      	ldr	r4, [r2, #0]
    b64e:	4619      	mov	r1, r3
    b650:	461a      	mov	r2, r3
    b652:	47a0      	blx	r4
	if (status != 0) {
    b654:	4602      	mov	r2, r0
    b656:	b130      	cbz	r0, b666 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b658:	2145      	movs	r1, #69	; 0x45
    b65a:	4805      	ldr	r0, [pc, #20]	; (b670 <virtio_notify+0x30>)
}
    b65c:	b002      	add	sp, #8
    b65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b662:	f011 b999 	b.w	1c998 <printk>
}
    b666:	b002      	add	sp, #8
    b668:	bd10      	pop	{r4, pc}
    b66a:	bf00      	nop
    b66c:	20009700 	.word	0x20009700
    b670:	00022fdd 	.word	0x00022fdd

0000b674 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b674:	4907      	ldr	r1, [pc, #28]	; (b694 <ipm_callback+0x20>)
    b676:	e8d1 3fef 	ldaex	r3, [r1]
    b67a:	f043 0201 	orr.w	r2, r3, #1
    b67e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b682:	2800      	cmp	r0, #0
    b684:	d1f7      	bne.n	b676 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b686:	07db      	lsls	r3, r3, #31
    b688:	d403      	bmi.n	b692 <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b68a:	4803      	ldr	r0, [pc, #12]	; (b698 <ipm_callback+0x24>)
    b68c:	3908      	subs	r1, #8
    b68e:	f015 be93 	b.w	213b8 <k_queue_append>
}
    b692:	4770      	bx	lr
    b694:	2000970c 	.word	0x2000970c
    b698:	20008700 	.word	0x20008700

0000b69c <rpmsg_backend_init>:
{
    b69c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b69e:	4b47      	ldr	r3, [pc, #284]	; (b7bc <rpmsg_backend_init+0x120>)
{
    b6a0:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6a2:	ac02      	add	r4, sp, #8
{
    b6a4:	4606      	mov	r6, r0
    b6a6:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6a8:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b6ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6b0:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b6b4:	f04f 33ff 	mov.w	r3, #4294967295
    b6b8:	4941      	ldr	r1, [pc, #260]	; (b7c0 <rpmsg_backend_init+0x124>)
    b6ba:	4842      	ldr	r0, [pc, #264]	; (b7c4 <rpmsg_backend_init+0x128>)
    b6bc:	f010 f9e8 	bl	1ba90 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b6c0:	4941      	ldr	r1, [pc, #260]	; (b7c8 <rpmsg_backend_init+0x12c>)
    b6c2:	4842      	ldr	r0, [pc, #264]	; (b7cc <rpmsg_backend_init+0x130>)
    b6c4:	f015 feea 	bl	2149c <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b6c8:	2200      	movs	r2, #0
    b6ca:	4b41      	ldr	r3, [pc, #260]	; (b7d0 <rpmsg_backend_init+0x134>)
    b6cc:	4941      	ldr	r1, [pc, #260]	; (b7d4 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b6ce:	4620      	mov	r0, r4
    b6d0:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b6d4:	601a      	str	r2, [r3, #0]
    b6d6:	f00d feb1 	bl	1943c <metal_init>
	if (err) {
    b6da:	4604      	mov	r4, r0
    b6dc:	b138      	cbz	r0, b6ee <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b6de:	2145      	movs	r1, #69	; 0x45
    b6e0:	4602      	mov	r2, r0
    b6e2:	483d      	ldr	r0, [pc, #244]	; (b7d8 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b6e4:	f011 f958 	bl	1c998 <printk>
}
    b6e8:	4620      	mov	r0, r4
    b6ea:	b005      	add	sp, #20
    b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b6ee:	483b      	ldr	r0, [pc, #236]	; (b7dc <rpmsg_backend_init+0x140>)
    b6f0:	f00d fe84 	bl	193fc <metal_register_generic_device>
	if (err) {
    b6f4:	4604      	mov	r4, r0
    b6f6:	b118      	cbz	r0, b700 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b6f8:	4602      	mov	r2, r0
    b6fa:	2145      	movs	r1, #69	; 0x45
    b6fc:	4838      	ldr	r0, [pc, #224]	; (b7e0 <rpmsg_backend_init+0x144>)
    b6fe:	e7f1      	b.n	b6e4 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b700:	4938      	ldr	r1, [pc, #224]	; (b7e4 <rpmsg_backend_init+0x148>)
    b702:	4839      	ldr	r0, [pc, #228]	; (b7e8 <rpmsg_backend_init+0x14c>)
    b704:	aa01      	add	r2, sp, #4
    b706:	f015 fa16 	bl	20b36 <metal_device_open>
	if (err) {
    b70a:	4604      	mov	r4, r0
    b70c:	b118      	cbz	r0, b716 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b70e:	4602      	mov	r2, r0
    b710:	2145      	movs	r1, #69	; 0x45
    b712:	4836      	ldr	r0, [pc, #216]	; (b7ec <rpmsg_backend_init+0x150>)
    b714:	e7e6      	b.n	b6e4 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b716:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b718:	689a      	ldr	r2, [r3, #8]
    b71a:	b92a      	cbnz	r2, b728 <rpmsg_backend_init+0x8c>
    b71c:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b71e:	2145      	movs	r1, #69	; 0x45
    b720:	4833      	ldr	r0, [pc, #204]	; (b7f0 <rpmsg_backend_init+0x154>)
    b722:	f011 f939 	bl	1c998 <printk>
		return err;
    b726:	e7df      	b.n	b6e8 <rpmsg_backend_init+0x4c>
    b728:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b72a:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b72c:	2b00      	cmp	r3, #0
    b72e:	d0f6      	beq.n	b71e <rpmsg_backend_init+0x82>
    b730:	4830      	ldr	r0, [pc, #192]	; (b7f4 <rpmsg_backend_init+0x158>)
    b732:	f00e f99b 	bl	19a6c <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b736:	4f30      	ldr	r7, [pc, #192]	; (b7f8 <rpmsg_backend_init+0x15c>)
    b738:	6038      	str	r0, [r7, #0]
    b73a:	4830      	ldr	r0, [pc, #192]	; (b7fc <rpmsg_backend_init+0x160>)
    b73c:	f00e f996 	bl	19a6c <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b740:	683a      	ldr	r2, [r7, #0]
    b742:	b932      	cbnz	r2, b752 <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b744:	2145      	movs	r1, #69	; 0x45
    b746:	482e      	ldr	r0, [pc, #184]	; (b800 <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b748:	f011 f926 	bl	1c998 <printk>
		return -ENODEV;
    b74c:	f06f 0412 	mvn.w	r4, #18
    b750:	e7ca      	b.n	b6e8 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b752:	b910      	cbnz	r0, b75a <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b754:	2145      	movs	r1, #69	; 0x45
    b756:	482b      	ldr	r0, [pc, #172]	; (b804 <rpmsg_backend_init+0x168>)
    b758:	e7f6      	b.n	b748 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b75a:	6883      	ldr	r3, [r0, #8]
    b75c:	4622      	mov	r2, r4
    b75e:	685b      	ldr	r3, [r3, #4]
    b760:	4929      	ldr	r1, [pc, #164]	; (b808 <rpmsg_backend_init+0x16c>)
    b762:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b764:	f011 fd79 	bl	1d25a <virtqueue_allocate.constprop.0>
    b768:	4f28      	ldr	r7, [pc, #160]	; (b80c <rpmsg_backend_init+0x170>)
    b76a:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b76c:	b930      	cbnz	r0, b77c <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b76e:	2145      	movs	r1, #69	; 0x45
    b770:	4827      	ldr	r0, [pc, #156]	; (b810 <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b772:	f011 f911 	bl	1c998 <printk>
		return -ENOMEM;
    b776:	f06f 040b 	mvn.w	r4, #11
    b77a:	e7b5      	b.n	b6e8 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b77c:	f011 fd6d 	bl	1d25a <virtqueue_allocate.constprop.0>
    b780:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b782:	b910      	cbnz	r0, b78a <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b784:	2145      	movs	r1, #69	; 0x45
    b786:	4823      	ldr	r0, [pc, #140]	; (b814 <rpmsg_backend_init+0x178>)
    b788:	e7f3      	b.n	b772 <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b78a:	6832      	ldr	r2, [r6, #0]
    b78c:	4b22      	ldr	r3, [pc, #136]	; (b818 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b78e:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b790:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b792:	4a22      	ldr	r2, [pc, #136]	; (b81c <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b794:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b796:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b798:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b79a:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b79c:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b79e:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b7a0:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b7a2:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b7a4:	4e1e      	ldr	r6, [pc, #120]	; (b820 <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b7a6:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b7a8:	4a1e      	ldr	r2, [pc, #120]	; (b824 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b7aa:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b7ac:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b7ae:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b7b0:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b7b2:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b7b4:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b7b6:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b7b8:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b7ba:	e795      	b.n	b6e8 <rpmsg_backend_init+0x4c>
    b7bc:	00021b7c 	.word	0x00021b7c
    b7c0:	2000b770 	.word	0x2000b770
    b7c4:	20008700 	.word	0x20008700
    b7c8:	00023000 	.word	0x00023000
    b7cc:	20008720 	.word	0x20008720
    b7d0:	20009704 	.word	0x20009704
    b7d4:	0000b635 	.word	0x0000b635
    b7d8:	0002300b 	.word	0x0002300b
    b7dc:	20008200 	.word	0x20008200
    b7e0:	00023033 	.word	0x00023033
    b7e4:	00023063 	.word	0x00023063
    b7e8:	0002306d 	.word	0x0002306d
    b7ec:	00023075 	.word	0x00023075
    b7f0:	00023097 	.word	0x00023097
    b7f4:	000230c8 	.word	0x000230c8
    b7f8:	20009700 	.word	0x20009700
    b7fc:	000230ce 	.word	0x000230ce
    b800:	000230d4 	.word	0x000230d4
    b804:	000230fc 	.word	0x000230fc
    b808:	0000b675 	.word	0x0000b675
    b80c:	20009710 	.word	0x20009710
    b810:	00023124 	.word	0x00023124
    b814:	00023152 	.word	0x00023152
    b818:	200081d0 	.word	0x200081d0
    b81c:	2007fc00 	.word	0x2007fc00
    b820:	2007f800 	.word	0x2007f800
    b824:	00021dbc 	.word	0x00021dbc

0000b828 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b828:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b82c:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b82e:	4e1b      	ldr	r6, [pc, #108]	; (b89c <ns_bind_cb+0x74>)
{
    b830:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b832:	6831      	ldr	r1, [r6, #0]
    b834:	4628      	mov	r0, r5
{
    b836:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b838:	f012 fd38 	bl	1e2ac <strcmp>
    b83c:	b168      	cbz	r0, b85a <ns_bind_cb+0x32>
    b83e:	4628      	mov	r0, r5
    b840:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b842:	f012 fd33 	bl	1e2ac <strcmp>
    b846:	b138      	cbz	r0, b858 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b848:	462a      	mov	r2, r5
    b84a:	2145      	movs	r1, #69	; 0x45
    b84c:	4814      	ldr	r0, [pc, #80]	; (b8a0 <ns_bind_cb+0x78>)
}
    b84e:	b004      	add	sp, #16
    b850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b854:	f011 b8a0 	b.w	1c998 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b858:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b85a:	244c      	movs	r4, #76	; 0x4c
    b85c:	4344      	muls	r4, r0
    b85e:	4b11      	ldr	r3, [pc, #68]	; (b8a4 <ns_bind_cb+0x7c>)
    b860:	f104 0008 	add.w	r0, r4, #8
    b864:	9302      	str	r3, [sp, #8]
    b866:	4434      	add	r4, r6
    b868:	6863      	ldr	r3, [r4, #4]
    b86a:	462a      	mov	r2, r5
    b86c:	e9cd 8300 	strd	r8, r3, [sp]
    b870:	4639      	mov	r1, r7
    b872:	f04f 33ff 	mov.w	r3, #4294967295
    b876:	4430      	add	r0, r6
    b878:	f00d feac 	bl	195d4 <rpmsg_create_ept>
			if (err != 0) {
    b87c:	4603      	mov	r3, r0
    b87e:	b138      	cbz	r0, b890 <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b880:	462a      	mov	r2, r5
    b882:	2145      	movs	r1, #69	; 0x45
    b884:	4808      	ldr	r0, [pc, #32]	; (b8a8 <ns_bind_cb+0x80>)
}
    b886:	b004      	add	sp, #16
    b888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b88c:	f011 b884 	b.w	1c998 <printk>
				endpoints[i].bound = true;
    b890:	2301      	movs	r3, #1
    b892:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b896:	b004      	add	sp, #16
    b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b89c:	20009718 	.word	0x20009718
    b8a0:	0002318e 	.word	0x0002318e
    b8a4:	0001d275 	.word	0x0001d275
    b8a8:	000231bd 	.word	0x000231bd

0000b8ac <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b8ae:	4d13      	ldr	r5, [pc, #76]	; (b8fc <rpmsg_service_init+0x50>)
    b8b0:	4913      	ldr	r1, [pc, #76]	; (b900 <rpmsg_service_init+0x54>)
    b8b2:	4628      	mov	r0, r5
    b8b4:	f7ff fef2 	bl	b69c <rpmsg_backend_init>
	if (err) {
    b8b8:	4604      	mov	r4, r0
    b8ba:	b138      	cbz	r0, b8cc <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b8bc:	2145      	movs	r1, #69	; 0x45
    b8be:	4602      	mov	r2, r0
    b8c0:	4810      	ldr	r0, [pc, #64]	; (b904 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b8c2:	f011 f869 	bl	1c998 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b8c6:	4620      	mov	r0, r4
    b8c8:	b003      	add	sp, #12
    b8ca:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b8cc:	4c0e      	ldr	r4, [pc, #56]	; (b908 <rpmsg_service_init+0x5c>)
    b8ce:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b8d2:	4620      	mov	r0, r4
    b8d4:	490d      	ldr	r1, [pc, #52]	; (b90c <rpmsg_service_init+0x60>)
    b8d6:	f015 fd38 	bl	2134a <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b8da:	9400      	str	r4, [sp, #0]
    b8dc:	682b      	ldr	r3, [r5, #0]
    b8de:	4a0c      	ldr	r2, [pc, #48]	; (b910 <rpmsg_service_init+0x64>)
    b8e0:	4907      	ldr	r1, [pc, #28]	; (b900 <rpmsg_service_init+0x54>)
    b8e2:	480c      	ldr	r0, [pc, #48]	; (b914 <rpmsg_service_init+0x68>)
    b8e4:	f00d ffa2 	bl	1982c <rpmsg_init_vdev>
	if (err) {
    b8e8:	4604      	mov	r4, r0
    b8ea:	b118      	cbz	r0, b8f4 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b8ec:	4602      	mov	r2, r0
    b8ee:	2145      	movs	r1, #69	; 0x45
    b8f0:	4809      	ldr	r0, [pc, #36]	; (b918 <rpmsg_service_init+0x6c>)
    b8f2:	e7e6      	b.n	b8c2 <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b8f4:	2201      	movs	r2, #1
    b8f6:	4b09      	ldr	r3, [pc, #36]	; (b91c <rpmsg_service_init+0x70>)
    b8f8:	701a      	strb	r2, [r3, #0]
	return 0;
    b8fa:	e7e4      	b.n	b8c6 <rpmsg_service_init+0x1a>
    b8fc:	200097b0 	.word	0x200097b0
    b900:	200087b0 	.word	0x200087b0
    b904:	000231f3 	.word	0x000231f3
    b908:	20009844 	.word	0x20009844
    b90c:	20070400 	.word	0x20070400
    b910:	0000b829 	.word	0x0000b829
    b914:	200097b4 	.word	0x200097b4
    b918:	00023220 	.word	0x00023220
    b91c:	2000b232 	.word	0x2000b232

0000b920 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b920:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b922:	4b0d      	ldr	r3, [pc, #52]	; (b958 <rpmsg_service_register_endpoint+0x38>)
{
    b924:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b926:	781b      	ldrb	r3, [r3, #0]
    b928:	b993      	cbnz	r3, b950 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b92a:	4c0c      	ldr	r4, [pc, #48]	; (b95c <rpmsg_service_register_endpoint+0x3c>)
    b92c:	6820      	ldr	r0, [r4, #0]
    b92e:	b148      	cbz	r0, b944 <rpmsg_service_register_endpoint+0x24>
    b930:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b932:	b133      	cbz	r3, b942 <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b934:	480a      	ldr	r0, [pc, #40]	; (b960 <rpmsg_service_register_endpoint+0x40>)
    b936:	2145      	movs	r1, #69	; 0x45
    b938:	f011 f82e 	bl	1c998 <printk>

	return -ENOMEM;
    b93c:	f06f 000b 	mvn.w	r0, #11
}
    b940:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b942:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b944:	234c      	movs	r3, #76	; 0x4c
    b946:	4343      	muls	r3, r0
    b948:	18e5      	adds	r5, r4, r3
    b94a:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b94c:	6069      	str	r1, [r5, #4]
			return i;
    b94e:	e7f7      	b.n	b940 <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b950:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b954:	e7f4      	b.n	b940 <rpmsg_service_register_endpoint+0x20>
    b956:	bf00      	nop
    b958:	2000b232 	.word	0x2000b232
    b95c:	20009718 	.word	0x20009718
    b960:	0002323f 	.word	0x0002323f

0000b964 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b964:	224c      	movs	r2, #76	; 0x4c
    b966:	4b03      	ldr	r3, [pc, #12]	; (b974 <rpmsg_service_endpoint_is_bound+0x10>)
    b968:	fb02 3300 	mla	r3, r2, r0, r3
    b96c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b970:	4770      	bx	lr
    b972:	bf00      	nop
    b974:	20009718 	.word	0x20009718

0000b978 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b97a:	244c      	movs	r4, #76	; 0x4c
    b97c:	460b      	mov	r3, r1
    b97e:	2101      	movs	r1, #1
    b980:	4344      	muls	r4, r0
    b982:	e9cd 2100 	strd	r2, r1, [sp]
    b986:	4d05      	ldr	r5, [pc, #20]	; (b99c <rpmsg_service_send+0x24>)
    b988:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b98a:	3408      	adds	r4, #8
    b98c:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b990:	1928      	adds	r0, r5, r4
    b992:	f00d fe0d 	bl	195b0 <rpmsg_send_offchannel_raw>
}
    b996:	b003      	add	sp, #12
    b998:	bd30      	pop	{r4, r5, pc}
    b99a:	bf00      	nop
    b99c:	20009718 	.word	0x20009718

0000b9a0 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    b9a0:	4b08      	ldr	r3, [pc, #32]	; (b9c4 <get_flash_area_from_id+0x24>)
{
    b9a2:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    b9a4:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    b9a6:	4b08      	ldr	r3, [pc, #32]	; (b9c8 <get_flash_area_from_id+0x28>)
{
    b9a8:	4601      	mov	r1, r0
    b9aa:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    b9ac:	2300      	movs	r3, #0
    b9ae:	429c      	cmp	r4, r3
    b9b0:	dc01      	bgt.n	b9b6 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    b9b2:	2000      	movs	r0, #0
}
    b9b4:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    b9b6:	4610      	mov	r0, r2
    b9b8:	7805      	ldrb	r5, [r0, #0]
    b9ba:	3210      	adds	r2, #16
    b9bc:	428d      	cmp	r5, r1
    b9be:	d0f9      	beq.n	b9b4 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    b9c0:	3301      	adds	r3, #1
    b9c2:	e7f4      	b.n	b9ae <get_flash_area_from_id+0xe>
    b9c4:	00021e10 	.word	0x00021e10
    b9c8:	20008258 	.word	0x20008258

0000b9cc <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    b9cc:	4b08      	ldr	r3, [pc, #32]	; (b9f0 <flash_area_open+0x24>)
{
    b9ce:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    b9d0:	681b      	ldr	r3, [r3, #0]
{
    b9d2:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    b9d4:	b12b      	cbz	r3, b9e2 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    b9d6:	f7ff ffe3 	bl	b9a0 <get_flash_area_from_id>
	if (area == NULL) {
    b9da:	b128      	cbz	r0, b9e8 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    b9dc:	6020      	str	r0, [r4, #0]
	return 0;
    b9de:	2000      	movs	r0, #0
}
    b9e0:	bd10      	pop	{r4, pc}
		return -EACCES;
    b9e2:	f06f 000c 	mvn.w	r0, #12
    b9e6:	e7fb      	b.n	b9e0 <flash_area_open+0x14>
		return -ENOENT;
    b9e8:	f06f 0001 	mvn.w	r0, #1
    b9ec:	e7f8      	b.n	b9e0 <flash_area_open+0x14>
    b9ee:	bf00      	nop
    b9f0:	20008258 	.word	0x20008258

0000b9f4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    b9f4:	b530      	push	{r4, r5, lr}
    b9f6:	b089      	sub	sp, #36	; 0x24
    b9f8:	460c      	mov	r4, r1
    b9fa:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    b9fc:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    b9fe:	f7ff ffcf 	bl	b9a0 <get_flash_area_from_id>
	if (fa == NULL) {
    ba02:	b1b8      	cbz	r0, ba34 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    ba04:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    ba06:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    ba08:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    ba0a:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    ba0c:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    ba0e:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    ba12:	2300      	movs	r3, #0
	cb_data->status = 0;
    ba14:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    ba18:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    ba1a:	f011 fc2d 	bl	1d278 <device_get_binding>
	if (flash_dev == NULL) {
    ba1e:	b160      	cbz	r0, ba3a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    ba20:	4907      	ldr	r1, [pc, #28]	; (ba40 <flash_area_get_sectors+0x4c>)
    ba22:	aa01      	add	r2, sp, #4
    ba24:	f014 ff08 	bl	20838 <flash_page_foreach>
	if (cb_data->status == 0) {
    ba28:	9807      	ldr	r0, [sp, #28]
    ba2a:	b908      	cbnz	r0, ba30 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    ba2c:	9b05      	ldr	r3, [sp, #20]
    ba2e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    ba30:	b009      	add	sp, #36	; 0x24
    ba32:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    ba34:	f06f 0015 	mvn.w	r0, #21
    ba38:	e7fa      	b.n	ba30 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    ba3a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    ba3e:	e7f7      	b.n	ba30 <flash_area_get_sectors+0x3c>
    ba40:	0001d27d 	.word	0x0001d27d

0000ba44 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    ba44:	4b10      	ldr	r3, [pc, #64]	; (ba88 <settings_save_one+0x44>)
{
    ba46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    ba4a:	681c      	ldr	r4, [r3, #0]
{
    ba4c:	4605      	mov	r5, r0
    ba4e:	460e      	mov	r6, r1
    ba50:	4617      	mov	r7, r2
	if (!cs) {
    ba52:	b1ac      	cbz	r4, ba80 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    ba54:	f04f 32ff 	mov.w	r2, #4294967295
    ba58:	f04f 33ff 	mov.w	r3, #4294967295
    ba5c:	480b      	ldr	r0, [pc, #44]	; (ba8c <settings_save_one+0x48>)
    ba5e:	f00e fb27 	bl	1a0b0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    ba62:	6863      	ldr	r3, [r4, #4]
    ba64:	4632      	mov	r2, r6
    ba66:	f8d3 8008 	ldr.w	r8, [r3, #8]
    ba6a:	4629      	mov	r1, r5
    ba6c:	463b      	mov	r3, r7
    ba6e:	4620      	mov	r0, r4
    ba70:	47c0      	blx	r8
    ba72:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    ba74:	4805      	ldr	r0, [pc, #20]	; (ba8c <settings_save_one+0x48>)
    ba76:	f00e fbe7 	bl	1a248 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    ba7a:	4620      	mov	r0, r4
    ba7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    ba80:	f06f 0401 	mvn.w	r4, #1
    ba84:	e7f9      	b.n	ba7a <settings_save_one+0x36>
    ba86:	bf00      	nop
    ba88:	20009858 	.word	0x20009858
    ba8c:	2000854c 	.word	0x2000854c

0000ba90 <settings_src_register>:
	parent->next = child;
    ba90:	2300      	movs	r3, #0
    ba92:	6003      	str	r3, [r0, #0]
	return list->tail;
    ba94:	4b04      	ldr	r3, [pc, #16]	; (baa8 <settings_src_register+0x18>)
    ba96:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    ba98:	b912      	cbnz	r2, baa0 <settings_src_register+0x10>
	list->head = node;
    ba9a:	e9c3 0000 	strd	r0, r0, [r3]
}
    ba9e:	4770      	bx	lr
	parent->next = child;
    baa0:	6010      	str	r0, [r2, #0]
	list->tail = node;
    baa2:	6058      	str	r0, [r3, #4]
}
    baa4:	4770      	bx	lr
    baa6:	bf00      	nop
    baa8:	20009850 	.word	0x20009850

0000baac <settings_dst_register>:
	settings_save_dst = cs;
    baac:	4b01      	ldr	r3, [pc, #4]	; (bab4 <settings_dst_register+0x8>)
    baae:	6018      	str	r0, [r3, #0]
}
    bab0:	4770      	bx	lr
    bab2:	bf00      	nop
    bab4:	20009858 	.word	0x20009858

0000bab8 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    bab8:	2300      	movs	r3, #0
{
    baba:	b530      	push	{r4, r5, lr}
    babc:	b085      	sub	sp, #20
    babe:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    bac0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bac4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    bac6:	f04f 33ff 	mov.w	r3, #4294967295
    baca:	f04f 32ff 	mov.w	r2, #4294967295
    bace:	480b      	ldr	r0, [pc, #44]	; (bafc <settings_load_subtree+0x44>)
    bad0:	f00e faee 	bl	1a0b0 <z_impl_k_mutex_lock>
	return list->head;
    bad4:	4b0a      	ldr	r3, [pc, #40]	; (bb00 <settings_load_subtree+0x48>)
    bad6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bad8:	b134      	cbz	r4, bae8 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    bada:	6863      	ldr	r3, [r4, #4]
    badc:	4620      	mov	r0, r4
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	a901      	add	r1, sp, #4
    bae2:	4798      	blx	r3
	return node->next;
    bae4:	6824      	ldr	r4, [r4, #0]
    bae6:	e7f7      	b.n	bad8 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    bae8:	4628      	mov	r0, r5
    baea:	f000 f8d3 	bl	bc94 <settings_commit_subtree>
    baee:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    baf0:	4802      	ldr	r0, [pc, #8]	; (bafc <settings_load_subtree+0x44>)
    baf2:	f00e fba9 	bl	1a248 <z_impl_k_mutex_unlock>
}
    baf6:	4620      	mov	r0, r4
    baf8:	b005      	add	sp, #20
    bafa:	bd30      	pop	{r4, r5, pc}
    bafc:	2000854c 	.word	0x2000854c
    bb00:	20009850 	.word	0x20009850

0000bb04 <settings_load_subtree_direct>:
{
    bb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    bb06:	e9cd 0101 	strd	r0, r1, [sp, #4]
    bb0a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    bb0c:	f04f 33ff 	mov.w	r3, #4294967295
    bb10:	f04f 32ff 	mov.w	r2, #4294967295
    bb14:	4809      	ldr	r0, [pc, #36]	; (bb3c <settings_load_subtree_direct+0x38>)
    bb16:	f00e facb 	bl	1a0b0 <z_impl_k_mutex_lock>
	return list->head;
    bb1a:	4b09      	ldr	r3, [pc, #36]	; (bb40 <settings_load_subtree_direct+0x3c>)
    bb1c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bb1e:	b134      	cbz	r4, bb2e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    bb20:	6863      	ldr	r3, [r4, #4]
    bb22:	4620      	mov	r0, r4
    bb24:	681b      	ldr	r3, [r3, #0]
    bb26:	a901      	add	r1, sp, #4
    bb28:	4798      	blx	r3
	return node->next;
    bb2a:	6824      	ldr	r4, [r4, #0]
    bb2c:	e7f7      	b.n	bb1e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    bb2e:	4803      	ldr	r0, [pc, #12]	; (bb3c <settings_load_subtree_direct+0x38>)
    bb30:	f00e fb8a 	bl	1a248 <z_impl_k_mutex_unlock>
}
    bb34:	2000      	movs	r0, #0
    bb36:	b004      	add	sp, #16
    bb38:	bd10      	pop	{r4, pc}
    bb3a:	bf00      	nop
    bb3c:	2000854c 	.word	0x2000854c
    bb40:	20009850 	.word	0x20009850

0000bb44 <settings_store_init>:
	list->head = NULL;
    bb44:	2200      	movs	r2, #0
    bb46:	4b02      	ldr	r3, [pc, #8]	; (bb50 <settings_store_init+0xc>)
	list->tail = NULL;
    bb48:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    bb4c:	4770      	bx	lr
    bb4e:	bf00      	nop
    bb50:	20009850 	.word	0x20009850

0000bb54 <settings_init>:
	list->head = NULL;
    bb54:	2200      	movs	r2, #0
    bb56:	4b02      	ldr	r3, [pc, #8]	; (bb60 <settings_init+0xc>)
	list->tail = NULL;
    bb58:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    bb5c:	f7ff bff2 	b.w	bb44 <settings_store_init>
    bb60:	2000985c 	.word	0x2000985c

0000bb64 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    bb64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bb68:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    bb6a:	460e      	mov	r6, r1
    bb6c:	b109      	cbz	r1, bb72 <settings_parse_and_lookup+0xe>
		*next = NULL;
    bb6e:	2300      	movs	r3, #0
    bb70:	600b      	str	r3, [r1, #0]
    bb72:	2500      	movs	r5, #0
    bb74:	4c23      	ldr	r4, [pc, #140]	; (bc04 <settings_parse_and_lookup+0xa0>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bb76:	f8df 8090 	ldr.w	r8, [pc, #144]	; bc08 <settings_parse_and_lookup+0xa4>
    bb7a:	f8df 9090 	ldr.w	r9, [pc, #144]	; bc0c <settings_parse_and_lookup+0xa8>
    bb7e:	4544      	cmp	r4, r8
    bb80:	d908      	bls.n	bb94 <settings_parse_and_lookup+0x30>
    bb82:	4649      	mov	r1, r9
    bb84:	4822      	ldr	r0, [pc, #136]	; (bc10 <settings_parse_and_lookup+0xac>)
    bb86:	2294      	movs	r2, #148	; 0x94
    bb88:	f010 ff06 	bl	1c998 <printk>
    bb8c:	2194      	movs	r1, #148	; 0x94
    bb8e:	4648      	mov	r0, r9
    bb90:	f011 f9a8 	bl	1cee4 <assert_post_action>
    bb94:	4544      	cmp	r4, r8
    bb96:	d308      	bcc.n	bbaa <settings_parse_and_lookup+0x46>
	return list->head;
    bb98:	4b1e      	ldr	r3, [pc, #120]	; (bc14 <settings_parse_and_lookup+0xb0>)
    bb9a:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bb9c:	b10c      	cbz	r4, bba2 <settings_parse_and_lookup+0x3e>
    bb9e:	3c14      	subs	r4, #20
    bba0:	b9c4      	cbnz	r4, bbd4 <settings_parse_and_lookup+0x70>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    bba2:	4628      	mov	r0, r5
    bba4:	b003      	add	sp, #12
    bba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    bbaa:	4638      	mov	r0, r7
    bbac:	6821      	ldr	r1, [r4, #0]
    bbae:	aa01      	add	r2, sp, #4
    bbb0:	f011 fb89 	bl	1d2c6 <settings_name_steq>
    bbb4:	b160      	cbz	r0, bbd0 <settings_parse_and_lookup+0x6c>
		if (!bestmatch) {
    bbb6:	b925      	cbnz	r5, bbc2 <settings_parse_and_lookup+0x5e>
			if (next) {
    bbb8:	b10e      	cbz	r6, bbbe <settings_parse_and_lookup+0x5a>
				*next = tmpnext;
    bbba:	9b01      	ldr	r3, [sp, #4]
    bbbc:	6033      	str	r3, [r6, #0]
    bbbe:	4625      	mov	r5, r4
    bbc0:	e006      	b.n	bbd0 <settings_parse_and_lookup+0x6c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    bbc2:	2200      	movs	r2, #0
    bbc4:	6829      	ldr	r1, [r5, #0]
    bbc6:	6820      	ldr	r0, [r4, #0]
    bbc8:	f011 fb7d 	bl	1d2c6 <settings_name_steq>
    bbcc:	2800      	cmp	r0, #0
    bbce:	d1f3      	bne.n	bbb8 <settings_parse_and_lookup+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bbd0:	3414      	adds	r4, #20
    bbd2:	e7d4      	b.n	bb7e <settings_parse_and_lookup+0x1a>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    bbd4:	4638      	mov	r0, r7
    bbd6:	6821      	ldr	r1, [r4, #0]
    bbd8:	aa01      	add	r2, sp, #4
    bbda:	f011 fb74 	bl	1d2c6 <settings_name_steq>
    bbde:	b160      	cbz	r0, bbfa <settings_parse_and_lookup+0x96>
		if (!bestmatch) {
    bbe0:	b925      	cbnz	r5, bbec <settings_parse_and_lookup+0x88>
			if (next) {
    bbe2:	b10e      	cbz	r6, bbe8 <settings_parse_and_lookup+0x84>
				*next = tmpnext;
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	6033      	str	r3, [r6, #0]
    bbe8:	4625      	mov	r5, r4
    bbea:	e006      	b.n	bbfa <settings_parse_and_lookup+0x96>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    bbec:	2200      	movs	r2, #0
    bbee:	6829      	ldr	r1, [r5, #0]
    bbf0:	6820      	ldr	r0, [r4, #0]
    bbf2:	f011 fb68 	bl	1d2c6 <settings_name_steq>
    bbf6:	2800      	cmp	r0, #0
    bbf8:	d1f3      	bne.n	bbe2 <settings_parse_and_lookup+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bbfa:	f114 0f14 	cmn.w	r4, #20
    bbfe:	d0d0      	beq.n	bba2 <settings_parse_and_lookup+0x3e>
	return node->next;
    bc00:	6964      	ldr	r4, [r4, #20]
    bc02:	e7cb      	b.n	bb9c <settings_parse_and_lookup+0x38>
    bc04:	000219d8 	.word	0x000219d8
    bc08:	00021a50 	.word	0x00021a50
    bc0c:	0002328b 	.word	0x0002328b
    bc10:	00022dd6 	.word	0x00022dd6
    bc14:	2000985c 	.word	0x2000985c

0000bc18 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    bc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bc1c:	b085      	sub	sp, #20
    bc1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    bc22:	4604      	mov	r4, r0
    bc24:	460d      	mov	r5, r1
    bc26:	4616      	mov	r6, r2
    bc28:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    bc2a:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    bc2c:	f1b8 0f00 	cmp.w	r8, #0
    bc30:	d018      	beq.n	bc64 <settings_call_set_handler+0x4c>
    bc32:	f8d8 1000 	ldr.w	r1, [r8]
    bc36:	b181      	cbz	r1, bc5a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    bc38:	aa03      	add	r2, sp, #12
    bc3a:	f011 fb44 	bl	1d2c6 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    bc3e:	b960      	cbnz	r0, bc5a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    bc40:	2000      	movs	r0, #0
    bc42:	e007      	b.n	bc54 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    bc44:	f8d8 3008 	ldr.w	r3, [r8, #8]
    bc48:	4632      	mov	r2, r6
    bc4a:	9300      	str	r3, [sp, #0]
    bc4c:	4629      	mov	r1, r5
    bc4e:	463b      	mov	r3, r7
    bc50:	9803      	ldr	r0, [sp, #12]
    bc52:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    bc54:	b005      	add	sp, #20
    bc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    bc5a:	f8d8 9004 	ldr.w	r9, [r8, #4]
    bc5e:	f1b9 0f00 	cmp.w	r9, #0
    bc62:	d1ef      	bne.n	bc44 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    bc64:	4620      	mov	r0, r4
    bc66:	a903      	add	r1, sp, #12
    bc68:	f7ff ff7c 	bl	bb64 <settings_parse_and_lookup>
		if (!ch) {
    bc6c:	2800      	cmp	r0, #0
    bc6e:	d0e7      	beq.n	bc40 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    bc70:	463b      	mov	r3, r7
    bc72:	f8d0 8008 	ldr.w	r8, [r0, #8]
    bc76:	4632      	mov	r2, r6
    bc78:	4629      	mov	r1, r5
    bc7a:	9803      	ldr	r0, [sp, #12]
    bc7c:	47c0      	blx	r8
		if (rc != 0) {
    bc7e:	4603      	mov	r3, r0
    bc80:	2800      	cmp	r0, #0
    bc82:	d0dd      	beq.n	bc40 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
    bc84:	4622      	mov	r2, r4
    bc86:	2145      	movs	r1, #69	; 0x45
    bc88:	4801      	ldr	r0, [pc, #4]	; (bc90 <settings_call_set_handler+0x78>)
    bc8a:	f010 fe85 	bl	1c998 <printk>
    bc8e:	e7d7      	b.n	bc40 <settings_call_set_handler+0x28>
    bc90:	000232bd 	.word	0x000232bd

0000bc94 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc98:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    bc9a:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bc9c:	4c1f      	ldr	r4, [pc, #124]	; (bd1c <settings_commit_subtree+0x88>)
    bc9e:	4f20      	ldr	r7, [pc, #128]	; (bd20 <settings_commit_subtree+0x8c>)
    bca0:	f8df 8080 	ldr.w	r8, [pc, #128]	; bd24 <settings_commit_subtree+0x90>
    bca4:	42bc      	cmp	r4, r7
    bca6:	d908      	bls.n	bcba <settings_commit_subtree+0x26>
    bca8:	4641      	mov	r1, r8
    bcaa:	481f      	ldr	r0, [pc, #124]	; (bd28 <settings_commit_subtree+0x94>)
    bcac:	22f4      	movs	r2, #244	; 0xf4
    bcae:	f010 fe73 	bl	1c998 <printk>
    bcb2:	21f4      	movs	r1, #244	; 0xf4
    bcb4:	4640      	mov	r0, r8
    bcb6:	f011 f915 	bl	1cee4 <assert_post_action>
    bcba:	42bc      	cmp	r4, r7
    bcbc:	d307      	bcc.n	bcce <settings_commit_subtree+0x3a>
	return list->head;
    bcbe:	4b1b      	ldr	r3, [pc, #108]	; (bd2c <settings_commit_subtree+0x98>)
    bcc0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bcc2:	b10c      	cbz	r4, bcc8 <settings_commit_subtree+0x34>
    bcc4:	3c14      	subs	r4, #20
    bcc6:	b9a4      	cbnz	r4, bcf2 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    bcc8:	4628      	mov	r0, r5
    bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bcce:	b91e      	cbnz	r6, bcd8 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    bcd0:	68e3      	ldr	r3, [r4, #12]
    bcd2:	b94b      	cbnz	r3, bce8 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bcd4:	3414      	adds	r4, #20
    bcd6:	e7e5      	b.n	bca4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bcd8:	2200      	movs	r2, #0
    bcda:	4631      	mov	r1, r6
    bcdc:	6820      	ldr	r0, [r4, #0]
    bcde:	f011 faf2 	bl	1d2c6 <settings_name_steq>
    bce2:	2800      	cmp	r0, #0
    bce4:	d1f4      	bne.n	bcd0 <settings_commit_subtree+0x3c>
    bce6:	e7f5      	b.n	bcd4 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    bce8:	4798      	blx	r3
				rc = rc2;
    bcea:	2d00      	cmp	r5, #0
    bcec:	bf08      	it	eq
    bcee:	4605      	moveq	r5, r0
    bcf0:	e7f0      	b.n	bcd4 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bcf2:	b936      	cbnz	r6, bd02 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    bcf4:	68e3      	ldr	r3, [r4, #12]
    bcf6:	b963      	cbnz	r3, bd12 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcf8:	f114 0f14 	cmn.w	r4, #20
    bcfc:	d0e4      	beq.n	bcc8 <settings_commit_subtree+0x34>
	return node->next;
    bcfe:	6964      	ldr	r4, [r4, #20]
    bd00:	e7df      	b.n	bcc2 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bd02:	2200      	movs	r2, #0
    bd04:	4631      	mov	r1, r6
    bd06:	6820      	ldr	r0, [r4, #0]
    bd08:	f011 fadd 	bl	1d2c6 <settings_name_steq>
    bd0c:	2800      	cmp	r0, #0
    bd0e:	d1f1      	bne.n	bcf4 <settings_commit_subtree+0x60>
    bd10:	e7f2      	b.n	bcf8 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    bd12:	4798      	blx	r3
				rc = rc2;
    bd14:	2d00      	cmp	r5, #0
    bd16:	bf08      	it	eq
    bd18:	4605      	moveq	r5, r0
    bd1a:	e7ed      	b.n	bcf8 <settings_commit_subtree+0x64>
    bd1c:	000219d8 	.word	0x000219d8
    bd20:	00021a50 	.word	0x00021a50
    bd24:	0002328b 	.word	0x0002328b
    bd28:	00022dd6 	.word	0x00022dd6
    bd2c:	2000985c 	.word	0x2000985c

0000bd30 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    bd30:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    bd32:	4c06      	ldr	r4, [pc, #24]	; (bd4c <settings_subsys_init+0x1c>)
    bd34:	7823      	ldrb	r3, [r4, #0]
    bd36:	b93b      	cbnz	r3, bd48 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    bd38:	f7ff ff0c 	bl	bb54 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    bd3c:	f000 f864 	bl	be08 <settings_backend_init>

	if (!err) {
    bd40:	b908      	cbnz	r0, bd46 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    bd42:	2301      	movs	r3, #1
    bd44:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    bd46:	bd10      	pop	{r4, pc}
		return 0;
    bd48:	2000      	movs	r0, #0
    bd4a:	e7fc      	b.n	bd46 <settings_subsys_init+0x16>
    bd4c:	2000b233 	.word	0x2000b233

0000bd50 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    bd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd54:	4680      	mov	r8, r0
    bd56:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    bd58:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    bd5a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; be04 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    bd5e:	3401      	adds	r4, #1
{
    bd60:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    bd62:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    bd64:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    bd68:	1e65      	subs	r5, r4, #1
    bd6a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    bd6c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bd70:	d045      	beq.n	bdfe <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    bd72:	234a      	movs	r3, #74	; 0x4a
    bd74:	4629      	mov	r1, r5
    bd76:	aa05      	add	r2, sp, #20
    bd78:	4630      	mov	r0, r6
    bd7a:	f011 fa62 	bl	1d242 <nvs_read>
    bd7e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    bd82:	343f      	adds	r4, #63	; 0x3f
    bd84:	b2a4      	uxth	r4, r4
    bd86:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    bd88:	4621      	mov	r1, r4
    bd8a:	2301      	movs	r3, #1
    bd8c:	4630      	mov	r0, r6
    bd8e:	f10d 020b 	add.w	r2, sp, #11
    bd92:	f011 fa56 	bl	1d242 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    bd96:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    bd98:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    bd9a:	dc03      	bgt.n	bda4 <settings_nvs_load+0x54>
    bd9c:	2800      	cmp	r0, #0
    bd9e:	dc03      	bgt.n	bda8 <settings_nvs_load+0x58>
{
    bda0:	462c      	mov	r4, r5
    bda2:	e7e1      	b.n	bd68 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    bda4:	2800      	cmp	r0, #0
    bda6:	dc16      	bgt.n	bdd6 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    bda8:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    bdac:	42ab      	cmp	r3, r5
    bdae:	d109      	bne.n	bdc4 <settings_nvs_load+0x74>
				cf->last_name_id--;
    bdb0:	4642      	mov	r2, r8
    bdb2:	1e6b      	subs	r3, r5, #1
    bdb4:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    bdb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    bdbc:	2302      	movs	r3, #2
    bdbe:	4630      	mov	r0, r6
    bdc0:	f7ff fb04 	bl	b3cc <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    bdc4:	4629      	mov	r1, r5
    bdc6:	4630      	mov	r0, r6
    bdc8:	f011 fa37 	bl	1d23a <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    bdcc:	4621      	mov	r1, r4
    bdce:	4630      	mov	r0, r6
    bdd0:	f011 fa33 	bl	1d23a <nvs_delete>
			continue;
    bdd4:	e7e4      	b.n	bda0 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    bdd6:	ab18      	add	r3, sp, #96	; 0x60
    bdd8:	441f      	add	r7, r3
    bdda:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    bddc:	4652      	mov	r2, sl
		name[rc1] = '\0';
    bdde:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    bde2:	a805      	add	r0, sp, #20
    bde4:	f8cd 9000 	str.w	r9, [sp]
    bde8:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    bdea:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    bdec:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    bdf0:	f7ff ff12 	bl	bc18 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    bdf4:	2800      	cmp	r0, #0
    bdf6:	d0d3      	beq.n	bda0 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    bdf8:	b018      	add	sp, #96	; 0x60
    bdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdfe:	2000      	movs	r0, #0
	return ret;
    be00:	e7fa      	b.n	bdf8 <settings_nvs_load+0xa8>
    be02:	bf00      	nop
    be04:	0001d339 	.word	0x0001d339

0000be08 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    be08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    be0a:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    be0c:	4669      	mov	r1, sp
    be0e:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
    be10:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    be12:	f7ff fddb 	bl	b9cc <flash_area_open>
	if (rc) {
    be16:	4604      	mov	r4, r0
    be18:	2800      	cmp	r0, #0
    be1a:	d136      	bne.n	be8a <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    be1c:	2002      	movs	r0, #2
    be1e:	aa02      	add	r2, sp, #8
    be20:	a901      	add	r1, sp, #4
    be22:	f7ff fde7 	bl	b9f4 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    be26:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    be2a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    be2c:	d02d      	beq.n	be8a <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    be2e:	b138      	cbz	r0, be40 <settings_backend_init+0x38>
    be30:	340c      	adds	r4, #12
    be32:	d005      	beq.n	be40 <settings_backend_init+0x38>
		k_panic();
    be34:	4040      	eors	r0, r0
    be36:	f380 8811 	msr	BASEPRI, r0
    be3a:	f04f 0004 	mov.w	r0, #4
    be3e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    be40:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    be42:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    be46:	d223      	bcs.n	be90 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    be48:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    be4a:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    be4c:	9a00      	ldr	r2, [sp, #0]
    be4e:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    be50:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    be52:	4285      	cmp	r5, r0
    be54:	b29c      	uxth	r4, r3
    be56:	d303      	bcc.n	be60 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    be58:	3301      	adds	r3, #1
    be5a:	2b08      	cmp	r3, #8
    be5c:	d1f8      	bne.n	be50 <settings_backend_init+0x48>
    be5e:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    be60:	4d0d      	ldr	r5, [pc, #52]	; (be98 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    be62:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    be64:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    be66:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    be68:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    be6a:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    be6c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    be6e:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    be70:	f011 faf9 	bl	1d466 <settings_nvs_backend_init>
	if (rc) {
    be74:	4604      	mov	r4, r0
    be76:	b940      	cbnz	r0, be8a <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    be78:	4e08      	ldr	r6, [pc, #32]	; (be9c <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    be7a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    be7c:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    be7e:	f7ff fe07 	bl	ba90 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    be82:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    be84:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    be86:	f7ff fe11 	bl	baac <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    be8a:	4620      	mov	r0, r4
    be8c:	b004      	add	sp, #16
    be8e:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    be90:	f06f 0424 	mvn.w	r4, #36	; 0x24
    be94:	e7f9      	b.n	be8a <settings_backend_init+0x82>
    be96:	bf00      	nop
    be98:	20009864 	.word	0x20009864
    be9c:	2000825c 	.word	0x2000825c

0000bea0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    bea0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    bea2:	4c04      	ldr	r4, [pc, #16]	; (beb4 <rtt_console_init+0x14>)
    bea4:	4620      	mov	r0, r4
    bea6:	f7fe f8b1 	bl	a00c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    beaa:	4620      	mov	r0, r4
    beac:	f002 fa20 	bl	e2f0 <__stdout_hook_install>

	return 0;
}
    beb0:	2000      	movs	r0, #0
    beb2:	bd10      	pop	{r4, pc}
    beb4:	0000beb9 	.word	0x0000beb9

0000beb8 <rtt_console_out>:
{
    beb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bebc:	4604      	mov	r4, r0
	char c = (char)character;
    bebe:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    bec0:	f8df 8058 	ldr.w	r8, [pc, #88]	; bf1c <rtt_console_out+0x64>
    bec4:	4e16      	ldr	r6, [pc, #88]	; (bf20 <rtt_console_out+0x68>)
    bec6:	f88d 0007 	strb.w	r0, [sp, #7]
    beca:	f04f 33ff 	mov.w	r3, #4294967295
    bece:	f04f 32ff 	mov.w	r2, #4294967295
    bed2:	4640      	mov	r0, r8
    bed4:	f00e f8ec 	bl	1a0b0 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    bed8:	2201      	movs	r2, #1
    beda:	f10d 0107 	add.w	r1, sp, #7
    bede:	2000      	movs	r0, #0
    bee0:	f001 faa4 	bl	d42c <SEGGER_RTT_WriteNoLock>
    bee4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    bee6:	4640      	mov	r0, r8
    bee8:	f00e f9ae 	bl	1a248 <z_impl_k_mutex_unlock>
		if (cnt) {
    beec:	b12f      	cbz	r7, befa <rtt_console_out+0x42>
			host_present = true;
    beee:	2301      	movs	r3, #1
    bef0:	7033      	strb	r3, [r6, #0]
}
    bef2:	4620      	mov	r0, r4
    bef4:	b002      	add	sp, #8
    bef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    befa:	7833      	ldrb	r3, [r6, #0]
    befc:	2b00      	cmp	r3, #0
    befe:	d0f8      	beq.n	bef2 <rtt_console_out+0x3a>
			if (max_cnt) {
    bf00:	3d01      	subs	r5, #1
    bf02:	d008      	beq.n	bf16 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    bf04:	f015 fac0 	bl	21488 <k_is_in_isr>
    bf08:	2800      	cmp	r0, #0
    bf0a:	d1de      	bne.n	beca <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    bf0c:	2100      	movs	r1, #0
    bf0e:	2042      	movs	r0, #66	; 0x42
    bf10:	f00f fb4c 	bl	1b5ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bf14:	e7d9      	b.n	beca <rtt_console_out+0x12>
				host_present = false;
    bf16:	7035      	strb	r5, [r6, #0]
    bf18:	e7eb      	b.n	bef2 <rtt_console_out+0x3a>
    bf1a:	bf00      	nop
    bf1c:	20008524 	.word	0x20008524
    bf20:	2000b234 	.word	0x2000b234

0000bf24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    bf24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf26:	2340      	movs	r3, #64	; 0x40
{
    bf28:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bf2a:	490a      	ldr	r1, [pc, #40]	; (bf54 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf2c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    bf2e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf30:	1149      	asrs	r1, r1, #5
{
    bf32:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf34:	4623      	mov	r3, r4
    bf36:	4a08      	ldr	r2, [pc, #32]	; (bf58 <onoff_start+0x34>)
    bf38:	4808      	ldr	r0, [pc, #32]	; (bf5c <onoff_start+0x38>)
    bf3a:	f011 fac3 	bl	1d4c4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    bf3e:	1e01      	subs	r1, r0, #0
    bf40:	da05      	bge.n	bf4e <onoff_start+0x2a>
		notify(mgr, err);
    bf42:	4628      	mov	r0, r5
    bf44:	4623      	mov	r3, r4
	}
}
    bf46:	b003      	add	sp, #12
    bf48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    bf4c:	4718      	bx	r3
}
    bf4e:	b003      	add	sp, #12
    bf50:	bd30      	pop	{r4, r5, pc}
    bf52:	bf00      	nop
    bf54:	200098b4 	.word	0x200098b4
    bf58:	0001d537 	.word	0x0001d537
    bf5c:	20008434 	.word	0x20008434

0000bf60 <get_status>:
{
    bf60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf62:	b2cc      	uxtb	r4, r1
    bf64:	2c03      	cmp	r4, #3
{
    bf66:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf68:	d908      	bls.n	bf7c <get_status+0x1c>
    bf6a:	4909      	ldr	r1, [pc, #36]	; (bf90 <get_status+0x30>)
    bf6c:	4809      	ldr	r0, [pc, #36]	; (bf94 <get_status+0x34>)
    bf6e:	227e      	movs	r2, #126	; 0x7e
    bf70:	f010 fd12 	bl	1c998 <printk>
    bf74:	217e      	movs	r1, #126	; 0x7e
    bf76:	4806      	ldr	r0, [pc, #24]	; (bf90 <get_status+0x30>)
    bf78:	f010 ffb4 	bl	1cee4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bf7c:	230c      	movs	r3, #12
    bf7e:	68e9      	ldr	r1, [r5, #12]
    bf80:	fb04 1403 	mla	r4, r4, r3, r1
    bf84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    bf88:	f000 0007 	and.w	r0, r0, #7
    bf8c:	bd38      	pop	{r3, r4, r5, pc}
    bf8e:	bf00      	nop
    bf90:	000232ed 	.word	0x000232ed
    bf94:	00022dd6 	.word	0x00022dd6

0000bf98 <stop>:
{
    bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf9a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf9c:	2c03      	cmp	r4, #3
{
    bf9e:	4605      	mov	r5, r0
    bfa0:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    bfa2:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bfa4:	d90a      	bls.n	bfbc <stop+0x24>
    bfa6:	4919      	ldr	r1, [pc, #100]	; (c00c <stop+0x74>)
    bfa8:	4819      	ldr	r0, [pc, #100]	; (c010 <stop+0x78>)
    bfaa:	f240 1253 	movw	r2, #339	; 0x153
    bfae:	f010 fcf3 	bl	1c998 <printk>
    bfb2:	f240 1153 	movw	r1, #339	; 0x153
    bfb6:	4815      	ldr	r0, [pc, #84]	; (c00c <stop+0x74>)
    bfb8:	f010 ff94 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
    bfbc:	f04f 0320 	mov.w	r3, #32
    bfc0:	f3ef 8111 	mrs	r1, BASEPRI
    bfc4:	f383 8811 	msr	BASEPRI, r3
    bfc8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bfcc:	220c      	movs	r2, #12
    bfce:	fb02 6304 	mla	r3, r2, r4, r6
    bfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bfd6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    bfda:	d001      	beq.n	bfe0 <stop+0x48>
    bfdc:	429f      	cmp	r7, r3
    bfde:	d112      	bne.n	c006 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bfe0:	2301      	movs	r3, #1
	int err = 0;
    bfe2:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bfe4:	fb02 6604 	mla	r6, r2, r4, r6
    bfe8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    bfec:	f381 8811 	msr	BASEPRI, r1
    bff0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bff4:	b930      	cbnz	r0, c004 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bff6:	230c      	movs	r3, #12
    bff8:	6869      	ldr	r1, [r5, #4]
    bffa:	fb03 1404 	mla	r4, r3, r4, r1
    bffe:	6863      	ldr	r3, [r4, #4]
    c000:	4798      	blx	r3
	return 0;
    c002:	2000      	movs	r0, #0
}
    c004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    c006:	f04f 30ff 	mov.w	r0, #4294967295
    c00a:	e7ef      	b.n	bfec <stop+0x54>
    c00c:	000232ed 	.word	0x000232ed
    c010:	00022dd6 	.word	0x00022dd6

0000c014 <onoff_stop>:
{
    c014:	b570      	push	{r4, r5, r6, lr}
    c016:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c018:	4906      	ldr	r1, [pc, #24]	; (c034 <onoff_stop+0x20>)
{
    c01a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    c01c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c01e:	1149      	asrs	r1, r1, #5
    c020:	2240      	movs	r2, #64	; 0x40
    c022:	4805      	ldr	r0, [pc, #20]	; (c038 <onoff_stop+0x24>)
    c024:	f7ff ffb8 	bl	bf98 <stop>
	notify(mgr, res);
    c028:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c02a:	4601      	mov	r1, r0
	notify(mgr, res);
    c02c:	4620      	mov	r0, r4
}
    c02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    c032:	4718      	bx	r3
    c034:	200098b4 	.word	0x200098b4
    c038:	20008434 	.word	0x20008434

0000c03c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c040:	2200      	movs	r2, #0
    c042:	2101      	movs	r1, #1
{
    c044:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c046:	2005      	movs	r0, #5
    c048:	f001 fc0c 	bl	d864 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    c04c:	2005      	movs	r0, #5
    c04e:	f001 fbeb 	bl	d828 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    c052:	4811      	ldr	r0, [pc, #68]	; (c098 <clk_init+0x5c>)
    c054:	f00c fe16 	bl	18c84 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    c058:	4b10      	ldr	r3, [pc, #64]	; (c09c <clk_init+0x60>)
    c05a:	4298      	cmp	r0, r3
    c05c:	d119      	bne.n	c092 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c05e:	f00c fe31 	bl	18cc4 <nrfx_clock_enable>
    c062:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c064:	f04f 080c 	mov.w	r8, #12
    c068:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c06a:	f8df 9034 	ldr.w	r9, [pc, #52]	; c0a0 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    c06e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c070:	4649      	mov	r1, r9
    c072:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    c076:	f010 fcea 	bl	1ca4e <onoff_manager_init>
		if (err < 0) {
    c07a:	2800      	cmp	r0, #0
    c07c:	db07      	blt.n	c08e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c07e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    c082:	3401      	adds	r4, #1
    c084:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c086:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    c08a:	d1f0      	bne.n	c06e <clk_init+0x32>
	}

	return 0;
    c08c:	2000      	movs	r0, #0
}
    c08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    c092:	f06f 0004 	mvn.w	r0, #4
    c096:	e7fa      	b.n	c08e <clk_init+0x52>
    c098:	0000c0dd 	.word	0x0000c0dd
    c09c:	0bad0000 	.word	0x0bad0000
    c0a0:	00021e58 	.word	0x00021e58

0000c0a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    c0a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    c0a6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    c0a8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    c0aa:	434b      	muls	r3, r1
    c0ac:	4809      	ldr	r0, [pc, #36]	; (c0d4 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    c0ae:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    c0b0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    c0b2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    c0b4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c0b8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    c0ba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c0be:	f011 f9ee 	bl	1d49e <set_on_state>
	if (callback) {
    c0c2:	b12d      	cbz	r5, c0d0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c0c4:	4632      	mov	r2, r6
    c0c6:	462b      	mov	r3, r5
}
    c0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    c0cc:	4802      	ldr	r0, [pc, #8]	; (c0d8 <clkstarted_handle.constprop.0+0x34>)
    c0ce:	4718      	bx	r3
}
    c0d0:	bd70      	pop	{r4, r5, r6, pc}
    c0d2:	bf00      	nop
    c0d4:	200098b4 	.word	0x200098b4
    c0d8:	20008434 	.word	0x20008434

0000c0dc <clock_event_handler>:
{
    c0dc:	b508      	push	{r3, lr}
    c0de:	2805      	cmp	r0, #5
    c0e0:	d821      	bhi.n	c126 <clock_event_handler+0x4a>
    c0e2:	e8df f000 	tbb	[pc, r0]
    c0e6:	1103      	.short	0x1103
    c0e8:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c0ec:	4b13      	ldr	r3, [pc, #76]	; (c13c <clock_event_handler+0x60>)
    c0ee:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    c0f2:	f010 0007 	ands.w	r0, r0, #7
    c0f6:	d11f      	bne.n	c138 <clock_event_handler+0x5c>
}
    c0f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    c0fc:	f7ff bfd2 	b.w	c0a4 <clkstarted_handle.constprop.0>
    c100:	2002      	movs	r0, #2
    c102:	e7f9      	b.n	c0f8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    c104:	2003      	movs	r0, #3
    c106:	e7f7      	b.n	c0f8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c108:	2001      	movs	r0, #1
    c10a:	e7f5      	b.n	c0f8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    c10c:	490c      	ldr	r1, [pc, #48]	; (c140 <clock_event_handler+0x64>)
    c10e:	f240 2266 	movw	r2, #614	; 0x266
    c112:	480c      	ldr	r0, [pc, #48]	; (c144 <clock_event_handler+0x68>)
    c114:	f010 fc40 	bl	1c998 <printk>
    c118:	f240 2166 	movw	r1, #614	; 0x266
}
    c11c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    c120:	4807      	ldr	r0, [pc, #28]	; (c140 <clock_event_handler+0x64>)
    c122:	f010 bedf 	b.w	1cee4 <assert_post_action>
    c126:	4906      	ldr	r1, [pc, #24]	; (c140 <clock_event_handler+0x64>)
    c128:	f240 226a 	movw	r2, #618	; 0x26a
    c12c:	4805      	ldr	r0, [pc, #20]	; (c144 <clock_event_handler+0x68>)
    c12e:	f010 fc33 	bl	1c998 <printk>
    c132:	f240 216a 	movw	r1, #618	; 0x26a
    c136:	e7f1      	b.n	c11c <clock_event_handler+0x40>
}
    c138:	bd08      	pop	{r3, pc}
    c13a:	bf00      	nop
    c13c:	200098b4 	.word	0x200098b4
    c140:	000232ed 	.word	0x000232ed
    c144:	00022dd6 	.word	0x00022dd6

0000c148 <generic_hfclk_start>:
{
    c148:	b508      	push	{r3, lr}
	__asm__ volatile(
    c14a:	f04f 0320 	mov.w	r3, #32
    c14e:	f3ef 8111 	mrs	r1, BASEPRI
    c152:	f383 8811 	msr	BASEPRI, r3
    c156:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c15a:	4a11      	ldr	r2, [pc, #68]	; (c1a0 <generic_hfclk_start+0x58>)
    c15c:	6813      	ldr	r3, [r2, #0]
    c15e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c162:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c166:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c168:	d00b      	beq.n	c182 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c16a:	4a0e      	ldr	r2, [pc, #56]	; (c1a4 <generic_hfclk_start+0x5c>)
    c16c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c170:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c174:	f013 0301 	ands.w	r3, r3, #1
    c178:	d003      	beq.n	c182 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    c17a:	480b      	ldr	r0, [pc, #44]	; (c1a8 <generic_hfclk_start+0x60>)
    c17c:	f011 f98f 	bl	1d49e <set_on_state>
			already_started = true;
    c180:	2301      	movs	r3, #1
	__asm__ volatile(
    c182:	f381 8811 	msr	BASEPRI, r1
    c186:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c18a:	b123      	cbz	r3, c196 <generic_hfclk_start+0x4e>
}
    c18c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c190:	2000      	movs	r0, #0
    c192:	f7ff bf87 	b.w	c0a4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c196:	2001      	movs	r0, #1
}
    c198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c19c:	f00c bdb6 	b.w	18d0c <nrfx_clock_start>
    c1a0:	20009964 	.word	0x20009964
    c1a4:	40005000 	.word	0x40005000
    c1a8:	2000993c 	.word	0x2000993c

0000c1ac <api_blocking_start>:
{
    c1ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c1ae:	2200      	movs	r2, #0
    c1b0:	2301      	movs	r3, #1
    c1b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c1b6:	ab04      	add	r3, sp, #16
    c1b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c1bc:	4a09      	ldr	r2, [pc, #36]	; (c1e4 <api_blocking_start+0x38>)
    c1be:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c1c0:	f8cd d000 	str.w	sp, [sp]
    c1c4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c1c8:	f011 f9ae 	bl	1d528 <api_start>
	if (err < 0) {
    c1cc:	2800      	cmp	r0, #0
    c1ce:	db05      	blt.n	c1dc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    c1d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c1d4:	2300      	movs	r3, #0
    c1d6:	4668      	mov	r0, sp
    c1d8:	f00f fa5a 	bl	1b690 <z_impl_k_sem_take>
}
    c1dc:	b007      	add	sp, #28
    c1de:	f85d fb04 	ldr.w	pc, [sp], #4
    c1e2:	bf00      	nop
    c1e4:	0001d56d 	.word	0x0001d56d

0000c1e8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c1e8:	4b07      	ldr	r3, [pc, #28]	; (c208 <generic_hfclk_stop+0x20>)
    c1ea:	e8d3 2fef 	ldaex	r2, [r3]
    c1ee:	f022 0102 	bic.w	r1, r2, #2
    c1f2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c1f6:	2800      	cmp	r0, #0
    c1f8:	d1f7      	bne.n	c1ea <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c1fa:	07d3      	lsls	r3, r2, #31
    c1fc:	d402      	bmi.n	c204 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c1fe:	2001      	movs	r0, #1
    c200:	f00c bdee 	b.w	18de0 <nrfx_clock_stop>
}
    c204:	4770      	bx	lr
    c206:	bf00      	nop
    c208:	20009964 	.word	0x20009964

0000c20c <z_nrf_clock_control_lf_on>:
{
    c20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c210:	2201      	movs	r2, #1
    c212:	4606      	mov	r6, r0
    c214:	4942      	ldr	r1, [pc, #264]	; (c320 <z_nrf_clock_control_lf_on+0x114>)
    c216:	e8d1 3fef 	ldaex	r3, [r1]
    c21a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c21e:	2800      	cmp	r0, #0
    c220:	d1f9      	bne.n	c216 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    c222:	b99b      	cbnz	r3, c24c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c224:	493f      	ldr	r1, [pc, #252]	; (c324 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    c226:	4840      	ldr	r0, [pc, #256]	; (c328 <z_nrf_clock_control_lf_on+0x11c>)
    c228:	604b      	str	r3, [r1, #4]
    c22a:	60cb      	str	r3, [r1, #12]
    c22c:	608a      	str	r2, [r1, #8]
    c22e:	f7fe f8f5 	bl	a41c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    c232:	2800      	cmp	r0, #0
    c234:	da0a      	bge.n	c24c <z_nrf_clock_control_lf_on+0x40>
    c236:	493d      	ldr	r1, [pc, #244]	; (c32c <z_nrf_clock_control_lf_on+0x120>)
    c238:	483d      	ldr	r0, [pc, #244]	; (c330 <z_nrf_clock_control_lf_on+0x124>)
    c23a:	f240 2226 	movw	r2, #550	; 0x226
    c23e:	f010 fbab 	bl	1c998 <printk>
    c242:	f240 2126 	movw	r1, #550	; 0x226
    c246:	4839      	ldr	r0, [pc, #228]	; (c32c <z_nrf_clock_control_lf_on+0x120>)
    c248:	f010 fe4c 	bl	1cee4 <assert_post_action>
	switch (start_mode) {
    c24c:	b386      	cbz	r6, c2b0 <z_nrf_clock_control_lf_on+0xa4>
    c24e:	1e73      	subs	r3, r6, #1
    c250:	2b01      	cmp	r3, #1
    c252:	d852      	bhi.n	c2fa <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c254:	2e01      	cmp	r6, #1
    c256:	d106      	bne.n	c266 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c258:	4b36      	ldr	r3, [pc, #216]	; (c334 <z_nrf_clock_control_lf_on+0x128>)
    c25a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c25e:	f003 0303 	and.w	r3, r3, #3
    c262:	2b02      	cmp	r3, #2
    c264:	d024      	beq.n	c2b0 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c266:	f015 f90f 	bl	21488 <k_is_in_isr>
    c26a:	4604      	mov	r4, r0
    c26c:	b918      	cbnz	r0, c276 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    c26e:	4b32      	ldr	r3, [pc, #200]	; (c338 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    c270:	781b      	ldrb	r3, [r3, #0]
    c272:	2b00      	cmp	r3, #0
    c274:	d14e      	bne.n	c314 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    c276:	f04f 0320 	mov.w	r3, #32
    c27a:	f3ef 8711 	mrs	r7, BASEPRI
    c27e:	f383 8811 	msr	BASEPRI, r3
    c282:	f3bf 8f6f 	isb	sy
    c286:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c288:	4d2a      	ldr	r5, [pc, #168]	; (c334 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c28a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c33c <z_nrf_clock_control_lf_on+0x130>
    c28e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c292:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c296:	03d2      	lsls	r2, r2, #15
    c298:	d50c      	bpl.n	c2b4 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c29a:	f003 0303 	and.w	r3, r3, #3
    c29e:	2b02      	cmp	r3, #2
    c2a0:	d001      	beq.n	c2a6 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c2a2:	2e01      	cmp	r6, #1
    c2a4:	d106      	bne.n	c2b4 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    c2a6:	b324      	cbz	r4, c2f2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    c2a8:	f387 8811 	msr	BASEPRI, r7
    c2ac:	f3bf 8f6f 	isb	sy
}
    c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    c2b4:	b1c4      	cbz	r4, c2e8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c2b6:	4638      	mov	r0, r7
    c2b8:	f001 fb44 	bl	d944 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c2bc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c2c0:	b2db      	uxtb	r3, r3
    c2c2:	2b01      	cmp	r3, #1
    c2c4:	d1e3      	bne.n	c28e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c2c6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c2ca:	2a00      	cmp	r2, #0
    c2cc:	d0df      	beq.n	c28e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c2ce:	2200      	movs	r2, #0
    c2d0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c2d4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c2d8:	2202      	movs	r2, #2
    c2da:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    c2de:	2220      	movs	r2, #32
    c2e0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c2e4:	60ab      	str	r3, [r5, #8]
}
    c2e6:	e7d2      	b.n	c28e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    c2e8:	2100      	movs	r1, #0
    c2ea:	2021      	movs	r0, #33	; 0x21
    c2ec:	f00f f95e 	bl	1b5ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c2f0:	e7e4      	b.n	c2bc <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    c2f2:	2302      	movs	r3, #2
    c2f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    c2f8:	e7da      	b.n	c2b0 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    c2fa:	490c      	ldr	r1, [pc, #48]	; (c32c <z_nrf_clock_control_lf_on+0x120>)
    c2fc:	480c      	ldr	r0, [pc, #48]	; (c330 <z_nrf_clock_control_lf_on+0x124>)
    c2fe:	f44f 720e 	mov.w	r2, #568	; 0x238
    c302:	f010 fb49 	bl	1c998 <printk>
}
    c306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    c30a:	f44f 710e 	mov.w	r1, #568	; 0x238
    c30e:	4807      	ldr	r0, [pc, #28]	; (c32c <z_nrf_clock_control_lf_on+0x120>)
    c310:	f010 bde8 	b.w	1cee4 <assert_post_action>
    p_reg->INTENCLR = mask;
    c314:	2202      	movs	r2, #2
    c316:	4b07      	ldr	r3, [pc, #28]	; (c334 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c318:	4607      	mov	r7, r0
    c31a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c31e:	e7b3      	b.n	c288 <z_nrf_clock_control_lf_on+0x7c>
    c320:	20009968 	.word	0x20009968
    c324:	200098a4 	.word	0x200098a4
    c328:	200098d4 	.word	0x200098d4
    c32c:	000232ed 	.word	0x000232ed
    c330:	00022dd6 	.word	0x00022dd6
    c334:	40005000 	.word	0x40005000
    c338:	2000b76c 	.word	0x2000b76c
    c33c:	e000e100 	.word	0xe000e100

0000c340 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c340:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c342:	f000 f905 	bl	c550 <bt_rpmsg_platform_init>
	if (err < 0) {
    c346:	1e04      	subs	r4, r0, #0
    c348:	da06      	bge.n	c358 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c34a:	4622      	mov	r2, r4
    c34c:	2145      	movs	r1, #69	; 0x45
    c34e:	4807      	ldr	r0, [pc, #28]	; (c36c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c350:	f010 fb22 	bl	1c998 <printk>
	}

	return err;
}
    c354:	4620      	mov	r0, r4
    c356:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c358:	4805      	ldr	r0, [pc, #20]	; (c370 <bt_rpmsg_init+0x30>)
    c35a:	f003 fffd 	bl	10358 <bt_hci_driver_register>
	if (err < 0) {
    c35e:	1e04      	subs	r4, r0, #0
    c360:	daf8      	bge.n	c354 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c362:	4622      	mov	r2, r4
    c364:	2145      	movs	r1, #69	; 0x45
    c366:	4803      	ldr	r0, [pc, #12]	; (c374 <bt_rpmsg_init+0x34>)
    c368:	e7f2      	b.n	c350 <bt_rpmsg_init+0x10>
    c36a:	bf00      	nop
    c36c:	0002335f 	.word	0x0002335f
    c370:	00021e64 	.word	0x00021e64
    c374:	0002338b 	.word	0x0002338b

0000c378 <bt_rpmsg_send>:
{
    c378:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c37a:	7d02      	ldrb	r2, [r0, #20]
    c37c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c37e:	2a02      	cmp	r2, #2
    c380:	d00c      	beq.n	c39c <bt_rpmsg_send+0x24>
    c382:	2a04      	cmp	r2, #4
    c384:	d009      	beq.n	c39a <bt_rpmsg_send+0x22>
    c386:	b1b2      	cbz	r2, c3b6 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c388:	2145      	movs	r1, #69	; 0x45
    c38a:	480c      	ldr	r0, [pc, #48]	; (c3bc <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c38c:	f010 fb04 	bl	1c998 <printk>
	net_buf_unref(buf);
    c390:	4620      	mov	r0, r4
    c392:	f00b f96b 	bl	1766c <net_buf_unref>
}
    c396:	2000      	movs	r0, #0
    c398:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c39a:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c39c:	4611      	mov	r1, r2
    c39e:	f104 0008 	add.w	r0, r4, #8
    c3a2:	f014 f91e 	bl	205e2 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c3a6:	4620      	mov	r0, r4
    c3a8:	f000 f8ee 	bl	c588 <bt_rpmsg_platform_send>
	if (err < 0) {
    c3ac:	1e02      	subs	r2, r0, #0
    c3ae:	daef      	bge.n	c390 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c3b0:	2145      	movs	r1, #69	; 0x45
    c3b2:	4803      	ldr	r0, [pc, #12]	; (c3c0 <bt_rpmsg_send+0x48>)
    c3b4:	e7ea      	b.n	c38c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c3b6:	2201      	movs	r2, #1
    c3b8:	e7f0      	b.n	c39c <bt_rpmsg_send+0x24>
    c3ba:	bf00      	nop
    c3bc:	000233ba 	.word	0x000233ba
    c3c0:	000233cf 	.word	0x000233cf

0000c3c4 <bt_rpmsg_rx>:
{
    c3c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c3c8:	4680      	mov	r8, r0
{
    c3ca:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c3cc:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c3d0:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c3d2:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c3d4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c3d8:	d009      	beq.n	c3ee <bt_rpmsg_rx+0x2a>
    c3da:	2805      	cmp	r0, #5
    c3dc:	d074      	beq.n	c4c8 <bt_rpmsg_rx+0x104>
    c3de:	2802      	cmp	r0, #2
    c3e0:	f040 8099 	bne.w	c516 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c3e4:	2b03      	cmp	r3, #3
    c3e6:	d84a      	bhi.n	c47e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c3e8:	2145      	movs	r1, #69	; 0x45
    c3ea:	484f      	ldr	r0, [pc, #316]	; (c528 <bt_rpmsg_rx+0x164>)
    c3ec:	e003      	b.n	c3f6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c3ee:	2b01      	cmp	r3, #1
    c3f0:	d806      	bhi.n	c400 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c3f2:	2145      	movs	r1, #69	; 0x45
    c3f4:	484d      	ldr	r0, [pc, #308]	; (c52c <bt_rpmsg_rx+0x168>)
}
    c3f6:	b002      	add	sp, #8
    c3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c3fc:	f010 bacc 	b.w	1c998 <printk>
	switch (evt_type) {
    c400:	7873      	ldrb	r3, [r6, #1]
    c402:	2b3e      	cmp	r3, #62	; 0x3e
    c404:	d117      	bne.n	c436 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c406:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c408:	2f02      	cmp	r7, #2
    c40a:	d016      	beq.n	c43a <bt_rpmsg_rx+0x76>
    c40c:	f1a7 030d 	sub.w	r3, r7, #13
    c410:	425f      	negs	r7, r3
    c412:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c414:	2202      	movs	r2, #2
    c416:	4641      	mov	r1, r8
    c418:	a801      	add	r0, sp, #4
    c41a:	f011 ff75 	bl	1e308 <memcpy>
	if (remaining != hdr.len) {
    c41e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c422:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c424:	429d      	cmp	r5, r3
    c426:	d00a      	beq.n	c43e <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c428:	2145      	movs	r1, #69	; 0x45
    c42a:	4841      	ldr	r0, [pc, #260]	; (c530 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c42c:	f010 fab4 	bl	1c998 <printk>
}
    c430:	b002      	add	sp, #8
    c432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c436:	2700      	movs	r7, #0
    c438:	e7ec      	b.n	c414 <bt_rpmsg_rx+0x50>
			return true;
    c43a:	2701      	movs	r7, #1
    c43c:	e7ea      	b.n	c414 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c43e:	2200      	movs	r2, #0
    c440:	2300      	movs	r3, #0
    c442:	4639      	mov	r1, r7
    c444:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c448:	f002 f92a 	bl	e6a0 <bt_buf_get_evt>
	if (!buf) {
    c44c:	4604      	mov	r4, r0
    c44e:	b920      	cbnz	r0, c45a <bt_rpmsg_rx+0x96>
		if (discardable) {
    c450:	2f00      	cmp	r7, #0
    c452:	d1ed      	bne.n	c430 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c454:	2145      	movs	r1, #69	; 0x45
    c456:	4837      	ldr	r0, [pc, #220]	; (c534 <bt_rpmsg_rx+0x170>)
    c458:	e7e8      	b.n	c42c <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c45a:	f100 0708 	add.w	r7, r0, #8
    c45e:	2202      	movs	r2, #2
    c460:	a901      	add	r1, sp, #4
    c462:	4638      	mov	r0, r7
    c464:	f014 f8e0 	bl	20628 <net_buf_simple_add_mem>
    c468:	462a      	mov	r2, r5
    c46a:	1cf1      	adds	r1, r6, #3
    c46c:	4638      	mov	r0, r7
    c46e:	f014 f8db 	bl	20628 <net_buf_simple_add_mem>
		bt_recv(buf);
    c472:	4620      	mov	r0, r4
}
    c474:	b002      	add	sp, #8
    c476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c47a:	f003 bf43 	b.w	10304 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c47e:	2200      	movs	r2, #0
    c480:	2300      	movs	r3, #0
    c482:	2003      	movs	r0, #3
    c484:	f002 f8ba 	bl	e5fc <bt_buf_get_rx>
	if (buf) {
    c488:	4604      	mov	r4, r0
    c48a:	b1d0      	cbz	r0, c4c2 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c48c:	2204      	movs	r2, #4
    c48e:	4641      	mov	r1, r8
    c490:	eb0d 0002 	add.w	r0, sp, r2
    c494:	f011 ff38 	bl	1e308 <memcpy>
    c498:	2204      	movs	r2, #4
    c49a:	f104 0708 	add.w	r7, r4, #8
    c49e:	4638      	mov	r0, r7
    c4a0:	eb0d 0102 	add.w	r1, sp, r2
    c4a4:	f014 f8c0 	bl	20628 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c4a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c4ac:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c4ae:	429d      	cmp	r5, r3
    c4b0:	d02e      	beq.n	c510 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c4b2:	2145      	movs	r1, #69	; 0x45
    c4b4:	4820      	ldr	r0, [pc, #128]	; (c538 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c4b6:	f010 fa6f 	bl	1c998 <printk>
		net_buf_unref(buf);
    c4ba:	4620      	mov	r0, r4
    c4bc:	f00b f8d6 	bl	1766c <net_buf_unref>
	if (buf) {
    c4c0:	e7b6      	b.n	c430 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c4c2:	2145      	movs	r1, #69	; 0x45
    c4c4:	481d      	ldr	r0, [pc, #116]	; (c53c <bt_rpmsg_rx+0x178>)
    c4c6:	e796      	b.n	c3f6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c4c8:	2b03      	cmp	r3, #3
    c4ca:	d802      	bhi.n	c4d2 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c4cc:	2145      	movs	r1, #69	; 0x45
    c4ce:	481c      	ldr	r0, [pc, #112]	; (c540 <bt_rpmsg_rx+0x17c>)
    c4d0:	e791      	b.n	c3f6 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c4d2:	2200      	movs	r2, #0
    c4d4:	2300      	movs	r3, #0
    c4d6:	f002 f891 	bl	e5fc <bt_buf_get_rx>
	if (buf) {
    c4da:	4604      	mov	r4, r0
    c4dc:	b1a8      	cbz	r0, c50a <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c4de:	2204      	movs	r2, #4
    c4e0:	4641      	mov	r1, r8
    c4e2:	eb0d 0002 	add.w	r0, sp, r2
    c4e6:	f011 ff0f 	bl	1e308 <memcpy>
    c4ea:	2204      	movs	r2, #4
    c4ec:	f104 0708 	add.w	r7, r4, #8
    c4f0:	4638      	mov	r0, r7
    c4f2:	eb0d 0102 	add.w	r1, sp, r2
    c4f6:	f014 f897 	bl	20628 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c4fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c4fe:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c500:	429d      	cmp	r5, r3
    c502:	d005      	beq.n	c510 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c504:	2145      	movs	r1, #69	; 0x45
    c506:	480f      	ldr	r0, [pc, #60]	; (c544 <bt_rpmsg_rx+0x180>)
    c508:	e7d5      	b.n	c4b6 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c50a:	2145      	movs	r1, #69	; 0x45
    c50c:	480e      	ldr	r0, [pc, #56]	; (c548 <bt_rpmsg_rx+0x184>)
    c50e:	e772      	b.n	c3f6 <bt_rpmsg_rx+0x32>
    c510:	462a      	mov	r2, r5
    c512:	1d71      	adds	r1, r6, #5
    c514:	e7aa      	b.n	c46c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c516:	4602      	mov	r2, r0
    c518:	2145      	movs	r1, #69	; 0x45
    c51a:	480c      	ldr	r0, [pc, #48]	; (c54c <bt_rpmsg_rx+0x188>)
}
    c51c:	b002      	add	sp, #8
    c51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c522:	f010 ba39 	b.w	1c998 <printk>
    c526:	bf00      	nop
    c528:	0002345c 	.word	0x0002345c
    c52c:	000233ec 	.word	0x000233ec
    c530:	00023412 	.word	0x00023412
    c534:	0002343b 	.word	0x0002343b
    c538:	0002349f 	.word	0x0002349f
    c53c:	00023480 	.word	0x00023480
    c540:	000234c6 	.word	0x000234c6
    c544:	00023509 	.word	0x00023509
    c548:	000234ea 	.word	0x000234ea
    c54c:	00023530 	.word	0x00023530

0000c550 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c550:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c552:	4908      	ldr	r1, [pc, #32]	; (c574 <bt_rpmsg_platform_init+0x24>)
    c554:	4808      	ldr	r0, [pc, #32]	; (c578 <bt_rpmsg_platform_init+0x28>)
    c556:	f7ff f9e3 	bl	b920 <rpmsg_service_register_endpoint>

	if (err < 0) {
    c55a:	1e02      	subs	r2, r0, #0
    c55c:	da05      	bge.n	c56a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c55e:	4807      	ldr	r0, [pc, #28]	; (c57c <bt_rpmsg_platform_init+0x2c>)
    c560:	2145      	movs	r1, #69	; 0x45
    c562:	f010 fa19 	bl	1c998 <printk>
		return RPMSG_ERR_INIT;
    c566:	4806      	ldr	r0, [pc, #24]	; (c580 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c568:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c56a:	4b06      	ldr	r3, [pc, #24]	; (c584 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c56c:	2000      	movs	r0, #0
	endpoint_id = err;
    c56e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c570:	e7fa      	b.n	c568 <bt_rpmsg_platform_init+0x18>
    c572:	bf00      	nop
    c574:	0001d589 	.word	0x0001d589
    c578:	0002355d 	.word	0x0002355d
    c57c:	00023568 	.word	0x00023568
    c580:	fffff82a 	.word	0xfffff82a
    c584:	2000996c 	.word	0x2000996c

0000c588 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c588:	4b02      	ldr	r3, [pc, #8]	; (c594 <bt_rpmsg_platform_send+0xc>)
    c58a:	8982      	ldrh	r2, [r0, #12]
    c58c:	6881      	ldr	r1, [r0, #8]
    c58e:	6818      	ldr	r0, [r3, #0]
    c590:	f7ff b9f2 	b.w	b978 <rpmsg_service_send>
    c594:	2000996c 	.word	0x2000996c

0000c598 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c598:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c59a:	4b02      	ldr	r3, [pc, #8]	; (c5a4 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c59c:	6818      	ldr	r0, [r3, #0]
    c59e:	f7ff f9e1 	bl	b964 <rpmsg_service_endpoint_is_bound>
}
    c5a2:	bd08      	pop	{r3, pc}
    c5a4:	2000996c 	.word	0x2000996c

0000c5a8 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c5a8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c5aa:	4c06      	ldr	r4, [pc, #24]	; (c5c4 <z_clock_isr+0x1c>)
    c5ac:	4806      	ldr	r0, [pc, #24]	; (c5c8 <z_clock_isr+0x20>)
    c5ae:	4621      	mov	r1, r4
    c5b0:	2217      	movs	r2, #23
    c5b2:	f010 f9f1 	bl	1c998 <printk>
    c5b6:	4620      	mov	r0, r4
}
    c5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c5bc:	2117      	movs	r1, #23
    c5be:	f010 bc91 	b.w	1cee4 <assert_post_action>
    c5c2:	bf00      	nop
    c5c4:	000235a5 	.word	0x000235a5
    c5c8:	00022dd6 	.word	0x00022dd6

0000c5cc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c5cc:	4a04      	ldr	r2, [pc, #16]	; (c5e0 <sys_clock_timeout_handler+0x14>)
    c5ce:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c5d0:	1ac8      	subs	r0, r1, r3
    c5d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c5d6:	4403      	add	r3, r0
    c5d8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c5da:	f00f bcfd 	b.w	1bfd8 <z_clock_announce>
    c5de:	bf00      	nop
    c5e0:	2000997c 	.word	0x2000997c

0000c5e4 <set_absolute_alarm>:
{
    c5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c5e8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c5ec:	f04f 0900 	mov.w	r9, #0
    c5f0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c5f2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c5f6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c5fa:	00a4      	lsls	r4, r4, #2
    c5fc:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c600:	b2a4      	uxth	r4, r4
    c602:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c606:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c60a:	f8df 806c 	ldr.w	r8, [pc, #108]	; c678 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c60e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c612:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c616:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c618:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c61c:	eba3 030a 	sub.w	r3, r3, sl
    c620:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c624:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c628:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c62a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c62e:	d102      	bne.n	c636 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c630:	2013      	movs	r0, #19
    c632:	f014 ff2f 	bl	21494 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c636:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c63a:	1aab      	subs	r3, r5, r2
    c63c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c644:	bf88      	it	hi
    c646:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c648:	f8c4 9000 	str.w	r9, [r4]
    c64c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c64e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c652:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c656:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c65a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c65e:	459a      	cmp	sl, r3
    c660:	d006      	beq.n	c670 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c662:	1aeb      	subs	r3, r5, r3
    c664:	3b02      	subs	r3, #2
    c666:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c66a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c66e:	d801      	bhi.n	c674 <set_absolute_alarm+0x90>
}
    c670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c674:	462b      	mov	r3, r5
    c676:	e7cf      	b.n	c618 <set_absolute_alarm+0x34>
    c678:	40015000 	.word	0x40015000

0000c67c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c67e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c680:	462f      	mov	r7, r5
    c682:	4c10      	ldr	r4, [pc, #64]	; (c6c4 <rtc_nrf_isr+0x48>)
    c684:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c686:	4b10      	ldr	r3, [pc, #64]	; (c6c8 <rtc_nrf_isr+0x4c>)
    c688:	b105      	cbz	r5, c68c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c68c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c690:	03d2      	lsls	r2, r2, #15
    c692:	d5fa      	bpl.n	c68a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c694:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c698:	2a00      	cmp	r2, #0
    c69a:	d0f6      	beq.n	c68a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c69c:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c6a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c6a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c6a8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c6ac:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c6ae:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c6b2:	b126      	cbz	r6, c6be <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c6b4:	2000      	movs	r0, #0
    c6b6:	6862      	ldr	r2, [r4, #4]
    c6b8:	6027      	str	r7, [r4, #0]
    c6ba:	47b0      	blx	r6
    c6bc:	e7e2      	b.n	c684 <rtc_nrf_isr+0x8>
    c6be:	6026      	str	r6, [r4, #0]
}
    c6c0:	e7e3      	b.n	c68a <rtc_nrf_isr+0xe>
    c6c2:	bf00      	nop
    c6c4:	20009970 	.word	0x20009970
    c6c8:	40015000 	.word	0x40015000

0000c6cc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c6cc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c6ce:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c6d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c6d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c6d8:	4c0c      	ldr	r4, [pc, #48]	; (c70c <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c6da:	2101      	movs	r1, #1
    c6dc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c6e0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c6e4:	4b0a      	ldr	r3, [pc, #40]	; (c710 <z_clock_driver_init+0x44>)
    c6e6:	2015      	movs	r0, #21
    c6e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c6ec:	462a      	mov	r2, r5
    c6ee:	f001 f8b9 	bl	d864 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c6f2:	2015      	movs	r0, #21
    c6f4:	f001 f898 	bl	d828 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c6f8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c6fa:	4a06      	ldr	r2, [pc, #24]	; (c714 <z_clock_driver_init+0x48>)
    c6fc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c6fe:	2002      	movs	r0, #2
    c700:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c702:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c704:	f7ff fd82 	bl	c20c <z_nrf_clock_control_lf_on>

	return 0;
}
    c708:	4628      	mov	r0, r5
    c70a:	bd38      	pop	{r3, r4, r5, pc}
    c70c:	40015000 	.word	0x40015000
    c710:	e000e100 	.word	0xe000e100
    c714:	20009978 	.word	0x20009978

0000c718 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c718:	4a13      	ldr	r2, [pc, #76]	; (c768 <z_clock_set_timeout+0x50>)
    c71a:	f1b0 3fff 	cmp.w	r0, #4294967295
    c71e:	bf14      	ite	ne
    c720:	4603      	movne	r3, r0
    c722:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c724:	3b01      	subs	r3, #1
    c726:	2b00      	cmp	r3, #0
    c728:	dd1c      	ble.n	c764 <z_clock_set_timeout+0x4c>
    c72a:	4293      	cmp	r3, r2
    c72c:	bfa8      	it	ge
    c72e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c730:	4a0e      	ldr	r2, [pc, #56]	; (c76c <z_clock_set_timeout+0x54>)
    c732:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c736:	4a0e      	ldr	r2, [pc, #56]	; (c770 <z_clock_set_timeout+0x58>)
    c738:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c73a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c73c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c740:	bf18      	it	ne
    c742:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c744:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c748:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c74a:	480a      	ldr	r0, [pc, #40]	; (c774 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c74c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c74e:	4a0a      	ldr	r2, [pc, #40]	; (c778 <z_clock_set_timeout+0x60>)
    c750:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c752:	2000      	movs	r0, #0
    c754:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c756:	4a04      	ldr	r2, [pc, #16]	; (c768 <z_clock_set_timeout+0x50>)
    c758:	4293      	cmp	r3, r2
    c75a:	bf94      	ite	ls
    c75c:	18c9      	addls	r1, r1, r3
    c75e:	1889      	addhi	r1, r1, r2
    c760:	f7ff bf40 	b.w	c5e4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c764:	2300      	movs	r3, #0
    c766:	e7e3      	b.n	c730 <z_clock_set_timeout+0x18>
    c768:	007fffff 	.word	0x007fffff
    c76c:	40015000 	.word	0x40015000
    c770:	2000997c 	.word	0x2000997c
    c774:	0000c5cd 	.word	0x0000c5cd
    c778:	20009970 	.word	0x20009970

0000c77c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c77c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c77e:	f04f 0320 	mov.w	r3, #32
    c782:	f3ef 8511 	mrs	r5, BASEPRI
    c786:	f383 8811 	msr	BASEPRI, r3
    c78a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c78e:	4815      	ldr	r0, [pc, #84]	; (c7e4 <z_clock_elapsed+0x68>)
    c790:	f00f f92e 	bl	1b9f0 <z_spin_lock_valid>
    c794:	b940      	cbnz	r0, c7a8 <z_clock_elapsed+0x2c>
    c796:	4914      	ldr	r1, [pc, #80]	; (c7e8 <z_clock_elapsed+0x6c>)
    c798:	4814      	ldr	r0, [pc, #80]	; (c7ec <z_clock_elapsed+0x70>)
    c79a:	227c      	movs	r2, #124	; 0x7c
    c79c:	f010 f8fc 	bl	1c998 <printk>
    c7a0:	217c      	movs	r1, #124	; 0x7c
    c7a2:	4811      	ldr	r0, [pc, #68]	; (c7e8 <z_clock_elapsed+0x6c>)
    c7a4:	f010 fb9e 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
    c7a8:	480e      	ldr	r0, [pc, #56]	; (c7e4 <z_clock_elapsed+0x68>)
    c7aa:	f00f f93d 	bl	1ba28 <z_spin_lock_set_owner>
    c7ae:	4b10      	ldr	r3, [pc, #64]	; (c7f0 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c7b0:	480c      	ldr	r0, [pc, #48]	; (c7e4 <z_clock_elapsed+0x68>)
    c7b2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c7b6:	4b0f      	ldr	r3, [pc, #60]	; (c7f4 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c7b8:	681b      	ldr	r3, [r3, #0]
    c7ba:	1ae4      	subs	r4, r4, r3
    c7bc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c7c0:	f00f f924 	bl	1ba0c <z_spin_unlock_valid>
    c7c4:	b940      	cbnz	r0, c7d8 <z_clock_elapsed+0x5c>
    c7c6:	4908      	ldr	r1, [pc, #32]	; (c7e8 <z_clock_elapsed+0x6c>)
    c7c8:	4808      	ldr	r0, [pc, #32]	; (c7ec <z_clock_elapsed+0x70>)
    c7ca:	22a7      	movs	r2, #167	; 0xa7
    c7cc:	f010 f8e4 	bl	1c998 <printk>
    c7d0:	21a7      	movs	r1, #167	; 0xa7
    c7d2:	4805      	ldr	r0, [pc, #20]	; (c7e8 <z_clock_elapsed+0x6c>)
    c7d4:	f010 fb86 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
    c7d8:	f385 8811 	msr	BASEPRI, r5
    c7dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c7e0:	4620      	mov	r0, r4
    c7e2:	bd38      	pop	{r3, r4, r5, pc}
    c7e4:	20009980 	.word	0x20009980
    c7e8:	00022e10 	.word	0x00022e10
    c7ec:	00022dd6 	.word	0x00022dd6
    c7f0:	40015000 	.word	0x40015000
    c7f4:	2000997c 	.word	0x2000997c

0000c7f8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c7f8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c7fa:	1cc5      	adds	r5, r0, #3
    c7fc:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c800:	2d74      	cmp	r5, #116	; 0x74
    c802:	d908      	bls.n	c816 <user_data_alloc.constprop.0+0x1e>
    c804:	4917      	ldr	r1, [pc, #92]	; (c864 <user_data_alloc.constprop.0+0x6c>)
    c806:	4818      	ldr	r0, [pc, #96]	; (c868 <user_data_alloc.constprop.0+0x70>)
    c808:	2250      	movs	r2, #80	; 0x50
    c80a:	f010 f8c5 	bl	1c998 <printk>
    c80e:	2150      	movs	r1, #80	; 0x50
    c810:	4814      	ldr	r0, [pc, #80]	; (c864 <user_data_alloc.constprop.0+0x6c>)
    c812:	f010 fb67 	bl	1cee4 <assert_post_action>
	return list->head;
    c816:	4c15      	ldr	r4, [pc, #84]	; (c86c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c818:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c81c:	b123      	cbz	r3, c828 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c81e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c822:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c824:	2b74      	cmp	r3, #116	; 0x74
    c826:	d919      	bls.n	c85c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c828:	2178      	movs	r1, #120	; 0x78
    c82a:	2004      	movs	r0, #4
    c82c:	f00f ffd0 	bl	1c7d0 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c830:	b178      	cbz	r0, c852 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c832:	2300      	movs	r3, #0
	return list->tail;
    c834:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c838:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c83a:	b95a      	cbnz	r2, c854 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c83c:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c840:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c844:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c848:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c84a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c84c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c84e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c852:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c854:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c856:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c85a:	e7f1      	b.n	c840 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c85c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c860:	e7f0      	b.n	c844 <user_data_alloc.constprop.0+0x4c>
    c862:	bf00      	nop
    c864:	00023612 	.word	0x00023612
    c868:	00022dd6 	.word	0x00022dd6
    c86c:	20009984 	.word	0x20009984

0000c870 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c870:	4808      	ldr	r0, [pc, #32]	; (c894 <discovery_complete.constprop.0+0x24>)
    c872:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c876:	e8d3 2fef 	ldaex	r2, [r3]
    c87a:	f042 0202 	orr.w	r2, r2, #2
    c87e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c882:	2900      	cmp	r1, #0
    c884:	d1f7      	bne.n	c876 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c886:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c88a:	681b      	ldr	r3, [r3, #0]
    c88c:	b10b      	cbz	r3, c892 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c88e:	6841      	ldr	r1, [r0, #4]
    c890:	4718      	bx	r3
	}
}
    c892:	4770      	bx	lr
    c894:	20009984 	.word	0x20009984

0000c898 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c898:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c89a:	4c0b      	ldr	r4, [pc, #44]	; (c8c8 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c89c:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c89e:	4620      	mov	r0, r4
    c8a0:	f010 fe98 	bl	1d5d4 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c8a4:	f06f 0101 	mvn.w	r1, #1
    c8a8:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c8ac:	f010 fea9 	bl	1d602 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c8b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c8b4:	689b      	ldr	r3, [r3, #8]
    c8b6:	b12b      	cbz	r3, c8c4 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c8b8:	4629      	mov	r1, r5
    c8ba:	6862      	ldr	r2, [r4, #4]
    c8bc:	6820      	ldr	r0, [r4, #0]
	}
}
    c8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c8c2:	4718      	bx	r3
}
    c8c4:	bd70      	pop	{r4, r5, r6, pc}
    c8c6:	bf00      	nop
    c8c8:	20009984 	.word	0x20009984

0000c8cc <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c8d0:	4c1f      	ldr	r4, [pc, #124]	; (c950 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c8d2:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c8d4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c8d8:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c8da:	2b22      	cmp	r3, #34	; 0x22
    c8dc:	d907      	bls.n	c8ee <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c8de:	2145      	movs	r1, #69	; 0x45
    c8e0:	481c      	ldr	r0, [pc, #112]	; (c954 <attr_store.constprop.0+0x88>)
    c8e2:	f010 f859 	bl	1c998 <printk>
		return NULL;
    c8e6:	2500      	movs	r5, #0
}
    c8e8:	4628      	mov	r0, r5
    c8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c8ee:	6803      	ldr	r3, [r0, #0]
    c8f0:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c8f2:	2b02      	cmp	r3, #2
    c8f4:	d80d      	bhi.n	c912 <attr_store.constprop.0+0x46>
    c8f6:	4a18      	ldr	r2, [pc, #96]	; (c958 <attr_store.constprop.0+0x8c>)
    c8f8:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c8fc:	eb06 0009 	add.w	r0, r6, r9
    c900:	f7ff ff7a 	bl	c7f8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c904:	4605      	mov	r5, r0
    c906:	b958      	cbnz	r0, c920 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c908:	2145      	movs	r1, #69	; 0x45
    c90a:	4814      	ldr	r0, [pc, #80]	; (c95c <attr_store.constprop.0+0x90>)
    c90c:	f010 f844 	bl	1c998 <printk>
		return NULL;
    c910:	e7ea      	b.n	c8e8 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c912:	2145      	movs	r1, #69	; 0x45
    c914:	4812      	ldr	r0, [pc, #72]	; (c960 <attr_store.constprop.0+0x94>)
    c916:	f010 f83f 	bl	1c998 <printk>
    c91a:	f04f 0900 	mov.w	r9, #0
    c91e:	e7ed      	b.n	c8fc <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c920:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c924:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c926:	1c5a      	adds	r2, r3, #1
    c928:	3303      	adds	r3, #3
    c92a:	00db      	lsls	r3, r3, #3
    c92c:	f103 0804 	add.w	r8, r3, #4
    c930:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c934:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c936:	441c      	add	r4, r3
    c938:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c93a:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c93c:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c93e:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c940:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c942:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c944:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c946:	f011 fcdf 	bl	1e308 <memcpy>
	return cur_attr;
    c94a:	4645      	mov	r5, r8
    c94c:	e7cc      	b.n	c8e8 <attr_store.constprop.0+0x1c>
    c94e:	bf00      	nop
    c950:	20009984 	.word	0x20009984
    c954:	0002363d 	.word	0x0002363d
    c958:	00023808 	.word	0x00023808
    c95c:	0002367a 	.word	0x0002367a
    c960:	0002365e 	.word	0x0002365e

0000c964 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c964:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c966:	4604      	mov	r4, r0
    c968:	b930      	cbnz	r0, c978 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c96a:	2145      	movs	r1, #69	; 0x45
    c96c:	480c      	ldr	r0, [pc, #48]	; (c9a0 <uuid_store.constprop.0+0x3c>)
    c96e:	f010 f813 	bl	1c998 <printk>
    c972:	4625      	mov	r5, r4
}
    c974:	4628      	mov	r0, r5
    c976:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c978:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c97a:	2b02      	cmp	r3, #2
    c97c:	d80a      	bhi.n	c994 <uuid_store.constprop.0+0x30>
    c97e:	4a09      	ldr	r2, [pc, #36]	; (c9a4 <uuid_store.constprop.0+0x40>)
    c980:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c982:	4630      	mov	r0, r6
    c984:	f7ff ff38 	bl	c7f8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c988:	4632      	mov	r2, r6
    c98a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c98c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c98e:	f011 fcbb 	bl	1e308 <memcpy>
	return (struct bt_uuid *)buffer;
    c992:	e7ef      	b.n	c974 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c994:	2145      	movs	r1, #69	; 0x45
    c996:	4804      	ldr	r0, [pc, #16]	; (c9a8 <uuid_store.constprop.0+0x44>)
    c998:	f00f fffe 	bl	1c998 <printk>
    c99c:	2600      	movs	r6, #0
    c99e:	e7f0      	b.n	c982 <uuid_store.constprop.0+0x1e>
    c9a0:	0002369c 	.word	0x0002369c
    c9a4:	00023808 	.word	0x00023808
    c9a8:	0002365e 	.word	0x0002365e

0000c9ac <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c9ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c9b0:	4e79      	ldr	r6, [pc, #484]	; (cb98 <discovery_callback+0x1ec>)
{
    c9b2:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c9b4:	6833      	ldr	r3, [r6, #0]
    c9b6:	4283      	cmp	r3, r0
    c9b8:	d008      	beq.n	c9cc <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c9ba:	4878      	ldr	r0, [pc, #480]	; (cb9c <discovery_callback+0x1f0>)
    c9bc:	2145      	movs	r1, #69	; 0x45
    c9be:	f00f ffeb 	bl	1c998 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c9c2:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c9c6:	f7ff ff67 	bl	c898 <discovery_complete_error.constprop.0>
    c9ca:	e031      	b.n	ca30 <discovery_callback+0x84>
    c9cc:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c9ce:	2b03      	cmp	r3, #3
    c9d0:	f000 80ae 	beq.w	cb30 <discovery_callback+0x184>
    c9d4:	d80d      	bhi.n	c9f2 <discovery_callback+0x46>
    c9d6:	2b02      	cmp	r3, #2
    c9d8:	d126      	bne.n	ca28 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c9da:	f240 12b3 	movw	r2, #435	; 0x1b3
    c9de:	4970      	ldr	r1, [pc, #448]	; (cba0 <discovery_callback+0x1f4>)
    c9e0:	4870      	ldr	r0, [pc, #448]	; (cba4 <discovery_callback+0x1f8>)
    c9e2:	f00f ffd9 	bl	1c998 <printk>
    c9e6:	f240 11b3 	movw	r1, #435	; 0x1b3
    c9ea:	486d      	ldr	r0, [pc, #436]	; (cba0 <discovery_callback+0x1f4>)
    c9ec:	f010 fa7a 	bl	1cee4 <assert_post_action>
    c9f0:	e01e      	b.n	ca30 <discovery_callback+0x84>
	switch (params->type) {
    c9f2:	2b05      	cmp	r3, #5
    c9f4:	d1f1      	bne.n	c9da <discovery_callback+0x2e>
	if (!attr) {
    c9f6:	2900      	cmp	r1, #0
    c9f8:	f040 8081 	bne.w	cafe <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c9fc:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    ca00:	2b01      	cmp	r3, #1
    ca02:	d979      	bls.n	caf8 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    ca04:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    ca06:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    ca0a:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    ca0c:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    ca0e:	2303      	movs	r3, #3
    ca10:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    ca12:	f007 fe2b 	bl	1466c <bt_gatt_discover>
			if (err) {
    ca16:	4604      	mov	r4, r0
    ca18:	b150      	cbz	r0, ca30 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    ca1a:	4602      	mov	r2, r0
    ca1c:	2145      	movs	r1, #69	; 0x45
    ca1e:	4862      	ldr	r0, [pc, #392]	; (cba8 <discovery_callback+0x1fc>)
    ca20:	f00f ffba 	bl	1c998 <printk>
				discovery_complete_error(dm, err);
    ca24:	4620      	mov	r0, r4
    ca26:	e7ce      	b.n	c9c6 <discovery_callback+0x1a>
	if (!attr) {
    ca28:	b921      	cbnz	r1, ca34 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    ca2a:	4630      	mov	r0, r6
    ca2c:	f010 fdf4 	bl	1d618 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    ca30:	2400      	movs	r4, #0
    ca32:	e04a      	b.n	caca <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    ca34:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    ca38:	4628      	mov	r0, r5
    ca3a:	2108      	movs	r1, #8
    ca3c:	f7ff ff46 	bl	c8cc <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    ca40:	2400      	movs	r4, #0
    ca42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    ca46:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    ca48:	4669      	mov	r1, sp
    ca4a:	6828      	ldr	r0, [r5, #0]
    ca4c:	f88d 4000 	strb.w	r4, [sp]
    ca50:	f8ad 3002 	strh.w	r3, [sp, #2]
    ca54:	f011 fcf3 	bl	1e43e <bt_uuid_cmp>
    ca58:	b1a8      	cbz	r0, ca86 <discovery_callback+0xda>
    ca5a:	f642 0301 	movw	r3, #10241	; 0x2801
    ca5e:	6828      	ldr	r0, [r5, #0]
    ca60:	a901      	add	r1, sp, #4
    ca62:	f88d 4004 	strb.w	r4, [sp, #4]
    ca66:	f8ad 3006 	strh.w	r3, [sp, #6]
    ca6a:	f011 fce8 	bl	1e43e <bt_uuid_cmp>
    ca6e:	b150      	cbz	r0, ca86 <discovery_callback+0xda>
    ca70:	494b      	ldr	r1, [pc, #300]	; (cba0 <discovery_callback+0x1f4>)
    ca72:	484c      	ldr	r0, [pc, #304]	; (cba4 <discovery_callback+0x1f8>)
    ca74:	f240 1217 	movw	r2, #279	; 0x117
    ca78:	f00f ff8e 	bl	1c998 <printk>
    ca7c:	f240 1117 	movw	r1, #279	; 0x117
    ca80:	4847      	ldr	r0, [pc, #284]	; (cba0 <discovery_callback+0x1f4>)
    ca82:	f010 fa2f 	bl	1cee4 <assert_post_action>
	if (!cur_attr) {
    ca86:	b937      	cbnz	r7, ca96 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    ca88:	4848      	ldr	r0, [pc, #288]	; (cbac <discovery_callback+0x200>)
    ca8a:	2145      	movs	r1, #69	; 0x45
    ca8c:	f00f ff84 	bl	1c998 <printk>
		discovery_complete_error(dm, -ENOMEM);
    ca90:	f06f 000b 	mvn.w	r0, #11
    ca94:	e797      	b.n	c9c6 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    ca96:	4638      	mov	r0, r7
    ca98:	f010 fdd2 	bl	1d640 <bt_gatt_dm_attr_service_val>
    ca9c:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    ca9e:	2208      	movs	r2, #8
    caa0:	4641      	mov	r1, r8
    caa2:	f011 fc31 	bl	1e308 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    caa6:	6828      	ldr	r0, [r5, #0]
    caa8:	f7ff ff5c 	bl	c964 <uuid_store.constprop.0>
    caac:	4604      	mov	r4, r0
    caae:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    cab0:	b930      	cbnz	r0, cac0 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    cab2:	2145      	movs	r1, #69	; 0x45
    cab4:	483e      	ldr	r0, [pc, #248]	; (cbb0 <discovery_callback+0x204>)
    cab6:	f00f ff6f 	bl	1c998 <printk>
		discovery_complete_error(dm, -ENOMEM);
    caba:	f06f 000b 	mvn.w	r0, #11
    cabe:	e058      	b.n	cb72 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    cac0:	88bb      	ldrh	r3, [r7, #4]
    cac2:	88aa      	ldrh	r2, [r5, #4]
    cac4:	4293      	cmp	r3, r2
    cac6:	d104      	bne.n	cad2 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    cac8:	2401      	movs	r4, #1
}
    caca:	4620      	mov	r0, r4
    cacc:	b002      	add	sp, #8
    cace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    cad2:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    cad4:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    cad6:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    cad8:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    cada:	4936      	ldr	r1, [pc, #216]	; (cbb4 <discovery_callback+0x208>)
    cadc:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    cade:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    cae0:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    cae2:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    cae4:	f007 fdc2 	bl	1466c <bt_gatt_discover>
	if (err) {
    cae8:	4602      	mov	r2, r0
    caea:	2800      	cmp	r0, #0
    caec:	d0a0      	beq.n	ca30 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    caee:	2145      	movs	r1, #69	; 0x45
    caf0:	4831      	ldr	r0, [pc, #196]	; (cbb8 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    caf2:	f00f ff51 	bl	1c998 <printk>
		discovery_complete_error(dm, -ENOMEM);
    caf6:	e7e0      	b.n	caba <discovery_callback+0x10e>
			discovery_complete(dm);
    caf8:	f7ff feba 	bl	c870 <discovery_complete.constprop.0>
    cafc:	e798      	b.n	ca30 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    cafe:	2400      	movs	r4, #0
    cb00:	f642 0303 	movw	r3, #10243	; 0x2803
    cb04:	6828      	ldr	r0, [r5, #0]
    cb06:	a901      	add	r1, sp, #4
    cb08:	f88d 4004 	strb.w	r4, [sp, #4]
    cb0c:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb10:	f011 fc95 	bl	1e43e <bt_uuid_cmp>
    cb14:	b950      	cbnz	r0, cb2c <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    cb16:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    cb18:	4628      	mov	r0, r5
    cb1a:	f7ff fed7 	bl	c8cc <attr_store.constprop.0>
    cb1e:	4604      	mov	r4, r0
	if (!cur_attr) {
    cb20:	2800      	cmp	r0, #0
    cb22:	d1d1      	bne.n	cac8 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    cb24:	2145      	movs	r1, #69	; 0x45
    cb26:	8a2a      	ldrh	r2, [r5, #16]
    cb28:	4824      	ldr	r0, [pc, #144]	; (cbbc <discovery_callback+0x210>)
    cb2a:	e7e2      	b.n	caf2 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    cb2c:	4621      	mov	r1, r4
    cb2e:	e7f3      	b.n	cb18 <discovery_callback+0x16c>
	if (!attr) {
    cb30:	2900      	cmp	r1, #0
    cb32:	d0e1      	beq.n	caf8 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    cb34:	2300      	movs	r3, #0
    cb36:	f88d 3004 	strb.w	r3, [sp, #4]
    cb3a:	f642 0303 	movw	r3, #10243	; 0x2803
    cb3e:	6828      	ldr	r0, [r5, #0]
    cb40:	a901      	add	r1, sp, #4
    cb42:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb46:	f011 fc7a 	bl	1e43e <bt_uuid_cmp>
    cb4a:	b150      	cbz	r0, cb62 <discovery_callback+0x1b6>
    cb4c:	4914      	ldr	r1, [pc, #80]	; (cba0 <discovery_callback+0x1f4>)
    cb4e:	4815      	ldr	r0, [pc, #84]	; (cba4 <discovery_callback+0x1f8>)
    cb50:	f44f 72c0 	mov.w	r2, #384	; 0x180
    cb54:	f00f ff20 	bl	1c998 <printk>
    cb58:	f44f 71c0 	mov.w	r1, #384	; 0x180
    cb5c:	4810      	ldr	r0, [pc, #64]	; (cba0 <discovery_callback+0x1f4>)
    cb5e:	f010 f9c1 	bl	1cee4 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    cb62:	8a29      	ldrh	r1, [r5, #16]
    cb64:	480c      	ldr	r0, [pc, #48]	; (cb98 <discovery_callback+0x1ec>)
    cb66:	f010 fd17 	bl	1d598 <attr_find_by_handle>
	if (!cur_attr) {
    cb6a:	4604      	mov	r4, r0
    cb6c:	b920      	cbnz	r0, cb78 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    cb6e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    cb72:	f7ff fe91 	bl	c898 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    cb76:	e7a8      	b.n	caca <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    cb78:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    cb7a:	f010 fd81 	bl	1d680 <bt_gatt_dm_attr_chrc_val>
    cb7e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    cb80:	4621      	mov	r1, r4
    cb82:	2208      	movs	r2, #8
    cb84:	f011 fbc0 	bl	1e308 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    cb88:	6828      	ldr	r0, [r5, #0]
    cb8a:	f7ff feeb 	bl	c964 <uuid_store.constprop.0>
    cb8e:	4604      	mov	r4, r0
    cb90:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    cb92:	2800      	cmp	r0, #0
    cb94:	d198      	bne.n	cac8 <discovery_callback+0x11c>
    cb96:	e790      	b.n	caba <discovery_callback+0x10e>
    cb98:	20009984 	.word	0x20009984
    cb9c:	000236b5 	.word	0x000236b5
    cba0:	00023612 	.word	0x00023612
    cba4:	00022dd6 	.word	0x00022dd6
    cba8:	00023769 	.word	0x00023769
    cbac:	000236dc 	.word	0x000236dc
    cbb0:	0002370a 	.word	0x0002370a
    cbb4:	2000998c 	.word	0x2000998c
    cbb8:	0002373d 	.word	0x0002373d
    cbbc:	00023799 	.word	0x00023799

0000cbc0 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cbc4:	4606      	mov	r6, r0
    cbc6:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    cbc8:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    cbca:	f8df 8044 	ldr.w	r8, [pc, #68]	; cc10 <bt_gatt_dm_char_by_uuid+0x50>
    cbce:	f8df 9044 	ldr.w	r9, [pc, #68]	; cc14 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    cbd2:	4621      	mov	r1, r4
    cbd4:	4630      	mov	r0, r6
    cbd6:	f010 fd69 	bl	1d6ac <bt_gatt_dm_char_next>
    cbda:	4604      	mov	r4, r0
    cbdc:	b1a0      	cbz	r0, cc08 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    cbde:	f010 fd4f 	bl	1d680 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    cbe2:	4605      	mov	r5, r0
    cbe4:	b950      	cbnz	r0, cbfc <bt_gatt_dm_char_by_uuid+0x3c>
    cbe6:	4641      	mov	r1, r8
    cbe8:	4648      	mov	r0, r9
    cbea:	f240 12fb 	movw	r2, #507	; 0x1fb
    cbee:	f00f fed3 	bl	1c998 <printk>
    cbf2:	f240 11fb 	movw	r1, #507	; 0x1fb
    cbf6:	4640      	mov	r0, r8
    cbf8:	f010 f974 	bl	1cee4 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    cbfc:	4638      	mov	r0, r7
    cbfe:	6829      	ldr	r1, [r5, #0]
    cc00:	f011 fc1d 	bl	1e43e <bt_uuid_cmp>
    cc04:	2800      	cmp	r0, #0
    cc06:	d1e4      	bne.n	cbd2 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    cc08:	4620      	mov	r0, r4
    cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cc0e:	bf00      	nop
    cc10:	00023612 	.word	0x00023612
    cc14:	00022dd6 	.word	0x00022dd6

0000cc18 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    cc18:	b570      	push	{r4, r5, r6, lr}
    cc1a:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    cc1c:	4608      	mov	r0, r1
    cc1e:	b119      	cbz	r1, cc28 <bt_gatt_dm_start+0x10>
    cc20:	7809      	ldrb	r1, [r1, #0]
    cc22:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    cc26:	d139      	bne.n	cc9c <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    cc28:	2a00      	cmp	r2, #0
    cc2a:	d037      	beq.n	cc9c <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc2c:	4c1e      	ldr	r4, [pc, #120]	; (cca8 <bt_gatt_dm_start+0x90>)
    cc2e:	f504 769c 	add.w	r6, r4, #312	; 0x138
    cc32:	e8d6 1fef 	ldaex	r1, [r6]
    cc36:	f041 0c01 	orr.w	ip, r1, #1
    cc3a:	e8c6 cfee 	stlex	lr, ip, [r6]
    cc3e:	f1be 0f00 	cmp.w	lr, #0
    cc42:	d1f6      	bne.n	cc32 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    cc44:	f011 0101 	ands.w	r1, r1, #1
    cc48:	d12b      	bne.n	cca2 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    cc4a:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    cc4e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    cc52:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    cc56:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    cc5a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cc5e:	b108      	cbz	r0, cc64 <bt_gatt_dm_start+0x4c>
    cc60:	f7ff fe80 	bl	c964 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    cc64:	4b11      	ldr	r3, [pc, #68]	; (ccac <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cc66:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    cc68:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    cc6a:	2301      	movs	r3, #1
    cc6c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    cc6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc72:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cc74:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    cc76:	4628      	mov	r0, r5
    cc78:	490d      	ldr	r1, [pc, #52]	; (ccb0 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cc7a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    cc7c:	f007 fcf6 	bl	1466c <bt_gatt_discover>
	if (err) {
    cc80:	4604      	mov	r4, r0
    cc82:	b148      	cbz	r0, cc98 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    cc84:	4602      	mov	r2, r0
    cc86:	2145      	movs	r1, #69	; 0x45
    cc88:	480a      	ldr	r0, [pc, #40]	; (ccb4 <bt_gatt_dm_start+0x9c>)
    cc8a:	f00f fe85 	bl	1c998 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cc8e:	f06f 0101 	mvn.w	r1, #1
    cc92:	4809      	ldr	r0, [pc, #36]	; (ccb8 <bt_gatt_dm_start+0xa0>)
    cc94:	f010 fcb5 	bl	1d602 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    cc98:	4620      	mov	r0, r4
    cc9a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cc9c:	f06f 0415 	mvn.w	r4, #21
    cca0:	e7fa      	b.n	cc98 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    cca2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    cca6:	e7f7      	b.n	cc98 <bt_gatt_dm_start+0x80>
    cca8:	20009984 	.word	0x20009984
    ccac:	0000c9ad 	.word	0x0000c9ad
    ccb0:	2000998c 	.word	0x2000998c
    ccb4:	000237dc 	.word	0x000237dc
    ccb8:	20009abc 	.word	0x20009abc

0000ccbc <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    ccbc:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    ccbe:	4c06      	ldr	r4, [pc, #24]	; (ccd8 <scan_default_param_set+0x1c>)
{
    ccc0:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    ccc2:	ad01      	add	r5, sp, #4
    ccc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ccc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ccc8:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    ccca:	4c04      	ldr	r4, [pc, #16]	; (ccdc <scan_default_param_set+0x20>)
    cccc:	ad01      	add	r5, sp, #4
    ccce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ccd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ccd2:	6026      	str	r6, [r4, #0]
}
    ccd4:	b006      	add	sp, #24
    ccd6:	bd70      	pop	{r4, r5, r6, pc}
    ccd8:	00021b84 	.word	0x00021b84
    ccdc:	20009b00 	.word	0x20009b00

0000cce0 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    cce0:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    cce4:	4b02      	ldr	r3, [pc, #8]	; (ccf0 <scan_default_conn_param_set+0x10>)
    cce6:	4903      	ldr	r1, [pc, #12]	; (ccf4 <scan_default_conn_param_set+0x14>)
    cce8:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    ccec:	4770      	bx	lr
    ccee:	bf00      	nop
    ccf0:	20009ad0 	.word	0x20009ad0
    ccf4:	00280018 	.word	0x00280018

0000ccf8 <uuid_check>:
{
    ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    ccfc:	4c29      	ldr	r4, [pc, #164]	; (cda4 <uuid_check+0xac>)
{
    ccfe:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    cd00:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    cd04:	4606      	mov	r6, r0
    cd06:	9100      	str	r1, [sp, #0]
    cd08:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    cd0a:	2b00      	cmp	r3, #0
    cd0c:	d03c      	beq.n	cd88 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    cd0e:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    cd10:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    cd12:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    cd14:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cd18:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
    cd1c:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    cd1e:	4557      	cmp	r7, sl
    cd20:	d30e      	bcc.n	cd40 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    cd22:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    cd26:	f1bb 0f00 	cmp.w	fp, #0
    cd2a:	d02b      	beq.n	cd84 <uuid_check+0x8c>
    cd2c:	45aa      	cmp	sl, r5
    cd2e:	d12b      	bne.n	cd88 <uuid_check+0x90>
			control->filter_match_cnt++;
    cd30:	7873      	ldrb	r3, [r6, #1]
    cd32:	3301      	adds	r3, #1
    cd34:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    cd36:	2301      	movs	r3, #1
    cd38:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    cd3c:	70b3      	strb	r3, [r6, #2]
}
    cd3e:	e023      	b.n	cd88 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cd40:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    cd44:	9b00      	ldr	r3, [sp, #0]
    cd46:	9a03      	ldr	r2, [sp, #12]
    cd48:	685b      	ldr	r3, [r3, #4]
    cd4a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    cd4c:	4b16      	ldr	r3, [pc, #88]	; (cda8 <uuid_check+0xb0>)
    cd4e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cd52:	9b01      	ldr	r3, [sp, #4]
    cd54:	4599      	cmp	r9, r3
    cd56:	d305      	bcc.n	cd64 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    cd58:	f1bb 0f00 	cmp.w	fp, #0
    cd5c:	d1e1      	bne.n	cd22 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    cd5e:	3701      	adds	r7, #1
    cd60:	3418      	adds	r4, #24
    cd62:	e7dc      	b.n	cd1e <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    cd64:	9b02      	ldr	r3, [sp, #8]
    cd66:	4642      	mov	r2, r8
    cd68:	eb03 0109 	add.w	r1, r3, r9
    cd6c:	a805      	add	r0, sp, #20
    cd6e:	f011 fb94 	bl	1e49a <bt_uuid_create>
    cd72:	2800      	cmp	r0, #0
    cd74:	d0f0      	beq.n	cd58 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    cd76:	68a1      	ldr	r1, [r4, #8]
    cd78:	a805      	add	r0, sp, #20
    cd7a:	f011 fb60 	bl	1e43e <bt_uuid_cmp>
    cd7e:	b130      	cbz	r0, cd8e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cd80:	44c1      	add	r9, r8
    cd82:	e7e6      	b.n	cd52 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    cd84:	2d00      	cmp	r5, #0
    cd86:	d1d3      	bne.n	cd30 <uuid_check+0x38>
}
    cd88:	b00b      	add	sp, #44	; 0x2c
    cd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    cd8e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cd90:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    cd94:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cd96:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    cd98:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    cd9a:	f1bb 0f00 	cmp.w	fp, #0
    cd9e:	d1de      	bne.n	cd5e <uuid_check+0x66>
    cda0:	e7bf      	b.n	cd22 <uuid_check+0x2a>
    cda2:	bf00      	nop
    cda4:	20009ad0 	.word	0x20009ad0
    cda8:	00023817 	.word	0x00023817

0000cdac <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    cdb0:	7803      	ldrb	r3, [r0, #0]
{
    cdb2:	4605      	mov	r5, r0
	switch (data->type) {
    cdb4:	2b19      	cmp	r3, #25
{
    cdb6:	460c      	mov	r4, r1
	switch (data->type) {
    cdb8:	d812      	bhi.n	cde0 <adv_data_found+0x34>
    cdba:	2b01      	cmp	r3, #1
    cdbc:	d912      	bls.n	cde4 <adv_data_found+0x38>
    cdbe:	3b02      	subs	r3, #2
    cdc0:	2b17      	cmp	r3, #23
    cdc2:	d80f      	bhi.n	cde4 <adv_data_found+0x38>
    cdc4:	e8df f003 	tbb	[pc, r3]
    cdc8:	7f7f7979 	.word	0x7f7f7979
    cdcc:	11318181 	.word	0x11318181
    cdd0:	0e0e0e0e 	.word	0x0e0e0e0e
    cdd4:	0e0e0e0e 	.word	0x0e0e0e0e
    cdd8:	0e0e0e0e 	.word	0x0e0e0e0e
    cddc:	560e0e0e 	.word	0x560e0e0e
    cde0:	2bff      	cmp	r3, #255	; 0xff
    cde2:	d074      	beq.n	cece <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    cde4:	2001      	movs	r0, #1
    cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    cdea:	4f4d      	ldr	r7, [pc, #308]	; (cf20 <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    cdec:	787b      	ldrb	r3, [r7, #1]
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d0f8      	beq.n	cde4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cdf2:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    cdf4:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    cdf8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cdfc:	4556      	cmp	r6, sl
    cdfe:	d2f1      	bcs.n	cde4 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    ce00:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    ce04:	4642      	mov	r2, r8
    ce06:	4648      	mov	r0, r9
    ce08:	6869      	ldr	r1, [r5, #4]
    ce0a:	f011 fa5b 	bl	1e2c4 <strncmp>
		if (adv_name_cmp(data->data,
    ce0e:	b950      	cbnz	r0, ce26 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    ce10:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    ce12:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    ce16:	3301      	adds	r3, #1
    ce18:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    ce1a:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    ce1c:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    ce20:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    ce22:	70a3      	strb	r3, [r4, #2]
    ce24:	e7de      	b.n	cde4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ce26:	3601      	adds	r6, #1
    ce28:	e7e8      	b.n	cdfc <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    ce2a:	4e3d      	ldr	r6, [pc, #244]	; (cf20 <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    ce2c:	78f3      	ldrb	r3, [r6, #3]
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d0d8      	beq.n	cde4 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    ce32:	78b3      	ldrb	r3, [r6, #2]
    ce34:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    ce38:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    ce3c:	18f7      	adds	r7, r6, r3
    ce3e:	42be      	cmp	r6, r7
    ce40:	d0d0      	beq.n	cde4 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    ce42:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    ce46:	4543      	cmp	r3, r8
    ce48:	d812      	bhi.n	ce70 <adv_data_found+0xc4>
    ce4a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    ce4e:	4642      	mov	r2, r8
    ce50:	4648      	mov	r0, r9
    ce52:	6869      	ldr	r1, [r5, #4]
    ce54:	f011 fa36 	bl	1e2c4 <strncmp>
	if ((data_len >= short_name_min_len) &&
    ce58:	b950      	cbnz	r0, ce70 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    ce5a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    ce5c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    ce60:	3301      	adds	r3, #1
    ce62:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    ce64:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    ce66:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    ce6a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    ce6e:	e7d8      	b.n	ce22 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    ce70:	3621      	adds	r6, #33	; 0x21
    ce72:	e7e4      	b.n	ce3e <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    ce74:	482a      	ldr	r0, [pc, #168]	; (cf20 <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    ce76:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d0b2      	beq.n	cde4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ce7e:	2300      	movs	r3, #0
	const uint8_t counter =
    ce80:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
	uint8_t data_len = data->data_len;
    ce84:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    ce86:	42b3      	cmp	r3, r6
    ce88:	d2ac      	bcs.n	cde4 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    ce8a:	2f02      	cmp	r7, #2
    ce8c:	d113      	bne.n	ceb6 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    ce8e:	686a      	ldr	r2, [r5, #4]
    ce90:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    ce94:	8812      	ldrh	r2, [r2, #0]
    ce96:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    ce98:	ba52      	rev16	r2, r2
    ce9a:	b292      	uxth	r2, r2
    ce9c:	4291      	cmp	r1, r2
    ce9e:	d10a      	bne.n	ceb6 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    cea0:	3312      	adds	r3, #18
    cea2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    cea6:	6463      	str	r3, [r4, #68]	; 0x44
			control->filter_match_cnt++;
    cea8:	7863      	ldrb	r3, [r4, #1]
    ceaa:	3301      	adds	r3, #1
    ceac:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    ceae:	2301      	movs	r3, #1
    ceb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			control->filter_match = true;
    ceb4:	e7b5      	b.n	ce22 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    ceb6:	3301      	adds	r3, #1
    ceb8:	e7e5      	b.n	ce86 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    ceba:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cebc:	4629      	mov	r1, r5
    cebe:	4620      	mov	r0, r4
    cec0:	f7ff ff1a 	bl	ccf8 <uuid_check>
		break;
    cec4:	e78e      	b.n	cde4 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    cec6:	2201      	movs	r2, #1
    cec8:	e7f8      	b.n	cebc <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    ceca:	2202      	movs	r2, #2
    cecc:	e7f6      	b.n	cebc <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    cece:	f8df 8050 	ldr.w	r8, [pc, #80]	; cf20 <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    ced2:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
    ced6:	2b00      	cmp	r3, #0
    ced8:	d084      	beq.n	cde4 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    ceda:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    cedc:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cede:	f817 9f26 	ldrb.w	r9, [r7, #38]!
	for (size_t i = 0; i < counter; i++) {
    cee2:	454e      	cmp	r6, r9
    cee4:	f4bf af7e 	bcs.w	cde4 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    cee8:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    ceec:	786b      	ldrb	r3, [r5, #1]
    ceee:	4293      	cmp	r3, r2
    cef0:	d313      	bcc.n	cf1a <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    cef2:	4638      	mov	r0, r7
    cef4:	6869      	ldr	r1, [r5, #4]
    cef6:	f011 f9f6 	bl	1e2e6 <memcmp>
    cefa:	b970      	cbnz	r0, cf1a <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    cefc:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    cf00:	64e7      	str	r7, [r4, #76]	; 0x4c
				md_filter->manufacturer_data[i].data_len;
    cf02:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    cf04:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
    cf08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			control->filter_match_cnt++;
    cf0c:	7863      	ldrb	r3, [r4, #1]
    cf0e:	3301      	adds	r3, #1
    cf10:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    cf12:	2301      	movs	r3, #1
    cf14:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    cf18:	e783      	b.n	ce22 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cf1a:	3601      	adds	r6, #1
    cf1c:	3721      	adds	r7, #33	; 0x21
    cf1e:	e7e0      	b.n	cee2 <adv_data_found+0x136>
    cf20:	20009ad0 	.word	0x20009ad0

0000cf24 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf26:	4605      	mov	r5, r0
    cf28:	460e      	mov	r6, r1
    cf2a:	4617      	mov	r7, r2
	return list->head;
    cf2c:	4b08      	ldr	r3, [pc, #32]	; (cf50 <notify_filter_matched.constprop.0+0x2c>)
    cf2e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cf30:	b10c      	cbz	r4, cf36 <notify_filter_matched.constprop.0+0x12>
    cf32:	3c04      	subs	r4, #4
    cf34:	b904      	cbnz	r4, cf38 <notify_filter_matched.constprop.0+0x14>
}
    cf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    cf38:	6823      	ldr	r3, [r4, #0]
    cf3a:	681b      	ldr	r3, [r3, #0]
    cf3c:	b11b      	cbz	r3, cf46 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    cf3e:	463a      	mov	r2, r7
    cf40:	4631      	mov	r1, r6
    cf42:	4628      	mov	r0, r5
    cf44:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf46:	1d23      	adds	r3, r4, #4
    cf48:	d0f5      	beq.n	cf36 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    cf4a:	6864      	ldr	r4, [r4, #4]
    cf4c:	e7f0      	b.n	cf30 <notify_filter_matched.constprop.0+0xc>
    cf4e:	bf00      	nop
    cf50:	20009b1c 	.word	0x20009b1c

0000cf54 <bt_scan_cb_register>:
	if (!cb) {
    cf54:	b150      	cbz	r0, cf6c <bt_scan_cb_register+0x18>
	parent->next = child;
    cf56:	2300      	movs	r3, #0
    cf58:	6043      	str	r3, [r0, #4]
	return list->tail;
    cf5a:	4b05      	ldr	r3, [pc, #20]	; (cf70 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    cf5c:	1d02      	adds	r2, r0, #4
    cf5e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    cf60:	b911      	cbnz	r1, cf68 <bt_scan_cb_register+0x14>
	list->head = node;
    cf62:	e9c3 2200 	strd	r2, r2, [r3]
}
    cf66:	4770      	bx	lr
	parent->next = child;
    cf68:	600a      	str	r2, [r1, #0]
	list->tail = node;
    cf6a:	605a      	str	r2, [r3, #4]
}
    cf6c:	4770      	bx	lr
    cf6e:	bf00      	nop
    cf70:	20009b1c 	.word	0x20009b1c

0000cf74 <bt_scan_filter_add>:
{
    cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf76:	4605      	mov	r5, r0
	if (!data) {
    cf78:	460c      	mov	r4, r1
    cf7a:	2900      	cmp	r1, #0
    cf7c:	d048      	beq.n	d010 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    cf7e:	f04f 32ff 	mov.w	r2, #4294967295
    cf82:	f04f 33ff 	mov.w	r3, #4294967295
    cf86:	4824      	ldr	r0, [pc, #144]	; (d018 <bt_scan_filter_add+0xa4>)
    cf88:	f00d f892 	bl	1a0b0 <z_impl_k_mutex_lock>
	switch (type) {
    cf8c:	2d03      	cmp	r5, #3
    cf8e:	d00c      	beq.n	cfaa <bt_scan_filter_add+0x36>
    cf90:	d938      	bls.n	d004 <bt_scan_filter_add+0x90>
    cf92:	3d04      	subs	r5, #4
		err = -EINVAL;
    cf94:	2d01      	cmp	r5, #1
    cf96:	bf94      	ite	ls
    cf98:	f06f 040b 	mvnls.w	r4, #11
    cf9c:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    cfa0:	481d      	ldr	r0, [pc, #116]	; (d018 <bt_scan_filter_add+0xa4>)
    cfa2:	f00d f951 	bl	1a248 <z_impl_k_mutex_unlock>
}
    cfa6:	4620      	mov	r0, r4
    cfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cfaa:	4a1c      	ldr	r2, [pc, #112]	; (d01c <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    cfac:	f892 3020 	ldrb.w	r3, [r2, #32]
    cfb0:	bb43      	cbnz	r3, d004 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    cfb2:	7823      	ldrb	r3, [r4, #0]
    cfb4:	2b01      	cmp	r3, #1
    cfb6:	d00c      	beq.n	cfd2 <bt_scan_filter_add+0x5e>
    cfb8:	2b02      	cmp	r3, #2
    cfba:	d011      	beq.n	cfe0 <bt_scan_filter_add+0x6c>
    cfbc:	bb2b      	cbnz	r3, d00a <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    cfbe:	6820      	ldr	r0, [r4, #0]
    cfc0:	f102 030c 	add.w	r3, r2, #12
    cfc4:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    cfc6:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    cfc8:	2301      	movs	r3, #1
	return 0;
    cfca:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    cfcc:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    cfd0:	e7e6      	b.n	cfa0 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    cfd2:	f102 030c 	add.w	r3, r2, #12
    cfd6:	e894 0003 	ldmia.w	r4, {r0, r1}
    cfda:	e883 0003 	stmia.w	r3, {r0, r1}
    cfde:	e7f2      	b.n	cfc6 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    cfe0:	4623      	mov	r3, r4
    cfe2:	f102 040c 	add.w	r4, r2, #12
    cfe6:	4626      	mov	r6, r4
    cfe8:	f103 0710 	add.w	r7, r3, #16
    cfec:	4625      	mov	r5, r4
    cfee:	6818      	ldr	r0, [r3, #0]
    cff0:	6859      	ldr	r1, [r3, #4]
    cff2:	3308      	adds	r3, #8
    cff4:	c503      	stmia	r5!, {r0, r1}
    cff6:	42bb      	cmp	r3, r7
    cff8:	462c      	mov	r4, r5
    cffa:	d1f7      	bne.n	cfec <bt_scan_filter_add+0x78>
    cffc:	781b      	ldrb	r3, [r3, #0]
    cffe:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    d000:	6096      	str	r6, [r2, #8]
		break;
    d002:	e7e1      	b.n	cfc8 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    d004:	f06f 040b 	mvn.w	r4, #11
    d008:	e7ca      	b.n	cfa0 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    d00a:	f06f 0415 	mvn.w	r4, #21
    d00e:	e7c7      	b.n	cfa0 <bt_scan_filter_add+0x2c>
		return -EINVAL;
    d010:	f06f 0415 	mvn.w	r4, #21
    d014:	e7c7      	b.n	cfa6 <bt_scan_filter_add+0x32>
    d016:	bf00      	nop
    d018:	20008538 	.word	0x20008538
    d01c:	20009ad0 	.word	0x20009ad0

0000d020 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    d020:	2200      	movs	r2, #0
    d022:	4b05      	ldr	r3, [pc, #20]	; (d038 <bt_scan_filter_disable+0x18>)
    d024:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    d026:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    d028:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    d02a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    d02e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    d032:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    d036:	4770      	bx	lr
    d038:	20009ad0 	.word	0x20009ad0

0000d03c <bt_scan_filter_enable>:
{
    d03c:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    d03e:	0683      	lsls	r3, r0, #26
    d040:	d025      	beq.n	d08e <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    d042:	f7ff ffed 	bl	d020 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    d046:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    d04a:	bf18      	it	ne
    d04c:	2201      	movne	r2, #1
    d04e:	4b11      	ldr	r3, [pc, #68]	; (d094 <bt_scan_filter_enable+0x58>)
    d050:	bf18      	it	ne
    d052:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    d054:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    d056:	bf44      	itt	mi
    d058:	2201      	movmi	r2, #1
    d05a:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    d05c:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    d05e:	bf44      	itt	mi
    d060:	2201      	movmi	r2, #1
    d062:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    d064:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    d066:	bf44      	itt	mi
    d068:	2201      	movmi	r2, #1
    d06a:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    d06e:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    d070:	bf44      	itt	mi
    d072:	2201      	movmi	r2, #1
    d074:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    d078:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    d07a:	bf48      	it	mi
    d07c:	2201      	movmi	r2, #1
	return 0;
    d07e:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    d082:	bf48      	it	mi
    d084:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    d088:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    d08c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d08e:	f06f 0015 	mvn.w	r0, #21
    d092:	e7fb      	b.n	d08c <bt_scan_filter_enable+0x50>
    d094:	20009ad0 	.word	0x20009ad0

0000d098 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    d098:	b570      	push	{r4, r5, r6, lr}
    d09a:	460e      	mov	r6, r1
    d09c:	b086      	sub	sp, #24
    d09e:	4605      	mov	r5, r0
	bt_scan_stop();
    d0a0:	f010 fb79 	bl	1d796 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    d0a4:	4b18      	ldr	r3, [pc, #96]	; (d108 <scan_connect_with_target.part.0+0x70>)
    d0a6:	ac02      	add	r4, sp, #8
    d0a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d0aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    d0ae:	4621      	mov	r1, r4
    d0b0:	ab01      	add	r3, sp, #4
    d0b2:	4630      	mov	r0, r6
    d0b4:	4a15      	ldr	r2, [pc, #84]	; (d10c <scan_connect_with_target.part.0+0x74>)
    d0b6:	f004 fbf9 	bl	118ac <bt_conn_le_create>
	if (err) {
    d0ba:	4b15      	ldr	r3, [pc, #84]	; (d110 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    d0bc:	3508      	adds	r5, #8
	return list->head;
    d0be:	681c      	ldr	r4, [r3, #0]
	if (err) {
    d0c0:	b168      	cbz	r0, d0de <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0c2:	b10c      	cbz	r4, d0c8 <scan_connect_with_target.part.0+0x30>
    d0c4:	3c04      	subs	r4, #4
    d0c6:	b90c      	cbnz	r4, d0cc <scan_connect_with_target.part.0+0x34>
}
    d0c8:	b006      	add	sp, #24
    d0ca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    d0cc:	6823      	ldr	r3, [r4, #0]
    d0ce:	689b      	ldr	r3, [r3, #8]
    d0d0:	b10b      	cbz	r3, d0d6 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    d0d2:	4628      	mov	r0, r5
    d0d4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d0d6:	1d22      	adds	r2, r4, #4
    d0d8:	d0f6      	beq.n	d0c8 <scan_connect_with_target.part.0+0x30>
	return node->next;
    d0da:	6864      	ldr	r4, [r4, #4]
    d0dc:	e7f1      	b.n	d0c2 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0de:	b91c      	cbnz	r4, d0e8 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    d0e0:	9801      	ldr	r0, [sp, #4]
    d0e2:	f004 fa29 	bl	11538 <bt_conn_unref>
    d0e6:	e7ef      	b.n	d0c8 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    d0e8:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0ea:	3c04      	subs	r4, #4
    d0ec:	2c00      	cmp	r4, #0
    d0ee:	d0f7      	beq.n	d0e0 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    d0f0:	6823      	ldr	r3, [r4, #0]
    d0f2:	68db      	ldr	r3, [r3, #12]
    d0f4:	b113      	cbz	r3, d0fc <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    d0f6:	4631      	mov	r1, r6
    d0f8:	4628      	mov	r0, r5
    d0fa:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d0fc:	1d23      	adds	r3, r4, #4
    d0fe:	d0ef      	beq.n	d0e0 <scan_connect_with_target.part.0+0x48>
	return node->next;
    d100:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d102:	2c00      	cmp	r4, #0
    d104:	d1f1      	bne.n	d0ea <scan_connect_with_target.part.0+0x52>
    d106:	e7eb      	b.n	d0e0 <scan_connect_with_target.part.0+0x48>
    d108:	00021b98 	.word	0x00021b98
    d10c:	20009b14 	.word	0x20009b14
    d110:	20009b1c 	.word	0x20009b1c

0000d114 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d118:	4c54      	ldr	r4, [pc, #336]	; (d26c <scan_recv+0x158>)
{
    d11a:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    d11c:	2254      	movs	r2, #84	; 0x54
{
    d11e:	4606      	mov	r6, r0
    d120:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    d122:	a801      	add	r0, sp, #4
    d124:	2100      	movs	r1, #0
    d126:	f011 f91a 	bl	1e35e <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d12a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    d12e:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d130:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    d134:	2300      	movs	r3, #0
    d136:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    d13a:	b112      	cbz	r2, d142 <scan_recv+0x2e>
		control->filter_cnt++;
    d13c:	2301      	movs	r3, #1
    d13e:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    d142:	7863      	ldrb	r3, [r4, #1]
    d144:	b123      	cbz	r3, d150 <scan_recv+0x3c>
		control->filter_cnt++;
    d146:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d14a:	3301      	adds	r3, #1
    d14c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    d150:	78e3      	ldrb	r3, [r4, #3]
    d152:	b123      	cbz	r3, d15e <scan_recv+0x4a>
		control->filter_cnt++;
    d154:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d158:	3301      	adds	r3, #1
    d15a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    d15e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d162:	b123      	cbz	r3, d16e <scan_recv+0x5a>
		control->filter_cnt++;
    d164:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d168:	3301      	adds	r3, #1
    d16a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    d16e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    d172:	b123      	cbz	r3, d17e <scan_recv+0x6a>
		control->filter_cnt++;
    d174:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d178:	3301      	adds	r3, #1
    d17a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    d17e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d182:	b123      	cbz	r3, d18e <scan_recv+0x7a>
		control->filter_cnt++;
    d184:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d188:	3301      	adds	r3, #1
    d18a:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    d18e:	7a33      	ldrb	r3, [r6, #8]
    d190:	f003 0301 	and.w	r3, r3, #1
    d194:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    d198:	b1ea      	cbz	r2, d1d6 <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    d19a:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    d19e:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    d1a2:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    d1a6:	4f32      	ldr	r7, [pc, #200]	; (d270 <scan_recv+0x15c>)
    d1a8:	45c8      	cmp	r8, r9
    d1aa:	d214      	bcs.n	d1d6 <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    d1ac:	4639      	mov	r1, r7
    d1ae:	2207      	movs	r2, #7
    d1b0:	4650      	mov	r0, sl
    d1b2:	f011 f898 	bl	1e2e6 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    d1b6:	46bb      	mov	fp, r7
    d1b8:	3707      	adds	r7, #7
    d1ba:	2800      	cmp	r0, #0
    d1bc:	d13a      	bne.n	d234 <scan_recv+0x120>
			control->filter_match_cnt++;
    d1be:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    d1c2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    d1c6:	3301      	adds	r3, #1
    d1c8:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    d1cc:	2301      	movs	r3, #1
    d1ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    d1d2:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    d1d6:	4628      	mov	r0, r5
    d1d8:	f013 fa1a 	bl	20610 <net_buf_simple_headroom>
    d1dc:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    d1de:	4925      	ldr	r1, [pc, #148]	; (d274 <scan_recv+0x160>)
    d1e0:	4628      	mov	r0, r5
    d1e2:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    d1e4:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    d1e8:	f002 fd50 	bl	fc8c <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    d1ec:	4b22      	ldr	r3, [pc, #136]	; (d278 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    d1ee:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    d1f0:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    d1f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1f8:	fa10 f787 	uxtah	r7, r0, r7
    d1fc:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    d1fe:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    d202:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    d204:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    d206:	b1c3      	cbz	r3, d23a <scan_recv+0x126>
    d208:	f89d 2005 	ldrb.w	r2, [sp, #5]
    d20c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d210:	429a      	cmp	r2, r3
    d212:	d116      	bne.n	d242 <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    d214:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d218:	a906      	add	r1, sp, #24
    d21a:	a803      	add	r0, sp, #12
    d21c:	f7ff fe82 	bl	cf24 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    d220:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    d224:	b11b      	cbz	r3, d22e <scan_recv+0x11a>
    d226:	4629      	mov	r1, r5
    d228:	a801      	add	r0, sp, #4
    d22a:	f7ff ff35 	bl	d098 <scan_connect_with_target.part.0>
}
    d22e:	b017      	add	sp, #92	; 0x5c
    d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    d234:	f108 0801 	add.w	r8, r8, #1
    d238:	e7b6      	b.n	d1a8 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    d23a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d23e:	2b00      	cmp	r3, #0
    d240:	d1e8      	bne.n	d214 <scan_recv+0x100>
	return list->head;
    d242:	4b0e      	ldr	r3, [pc, #56]	; (d27c <scan_recv+0x168>)
    d244:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d246:	2c00      	cmp	r4, #0
    d248:	d0f1      	beq.n	d22e <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    d24a:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d24e:	3c04      	subs	r4, #4
    d250:	2c00      	cmp	r4, #0
    d252:	d0ec      	beq.n	d22e <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    d254:	6823      	ldr	r3, [r4, #0]
    d256:	685b      	ldr	r3, [r3, #4]
    d258:	b113      	cbz	r3, d260 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    d25a:	4629      	mov	r1, r5
    d25c:	a803      	add	r0, sp, #12
    d25e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d260:	1d23      	adds	r3, r4, #4
    d262:	d0e4      	beq.n	d22e <scan_recv+0x11a>
	return node->next;
    d264:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d266:	2c00      	cmp	r4, #0
    d268:	d1f1      	bne.n	d24e <scan_recv+0x13a>
    d26a:	e7e0      	b.n	d22e <scan_recv+0x11a>
    d26c:	20009ad0 	.word	0x20009ad0
    d270:	20009ad4 	.word	0x20009ad4
    d274:	0000cdad 	.word	0x0000cdad
    d278:	20009b14 	.word	0x20009b14
    d27c:	20009b1c 	.word	0x20009b1c

0000d280 <bt_scan_init>:
{
    d280:	b570      	push	{r4, r5, r6, lr}
    d282:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d284:	4c14      	ldr	r4, [pc, #80]	; (d2d8 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    d286:	4815      	ldr	r0, [pc, #84]	; (d2dc <bt_scan_init+0x5c>)
    d288:	f003 fd5e 	bl	10d48 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d28c:	222c      	movs	r2, #44	; 0x2c
    d28e:	2100      	movs	r1, #0
    d290:	4620      	mov	r0, r4
    d292:	f011 f864 	bl	1e35e <memset>
	if (init) {
    d296:	b1be      	cbz	r6, d2c8 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d298:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d29a:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d29c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    d2a0:	b15d      	cbz	r5, d2ba <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d2a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2a4:	3430      	adds	r4, #48	; 0x30
    d2a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2a8:	682b      	ldr	r3, [r5, #0]
    d2aa:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d2ac:	68b2      	ldr	r2, [r6, #8]
    d2ae:	b13a      	cbz	r2, d2c0 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d2b0:	4b0b      	ldr	r3, [pc, #44]	; (d2e0 <bt_scan_init+0x60>)
    d2b2:	6810      	ldr	r0, [r2, #0]
    d2b4:	6851      	ldr	r1, [r2, #4]
    d2b6:	c303      	stmia	r3!, {r0, r1}
}
    d2b8:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d2ba:	f7ff fcff 	bl	ccbc <scan_default_param_set>
    d2be:	e7f5      	b.n	d2ac <bt_scan_init+0x2c>
}
    d2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d2c4:	f7ff bd0c 	b.w	cce0 <scan_default_conn_param_set>
		scan_default_param_set();
    d2c8:	f7ff fcf8 	bl	ccbc <scan_default_param_set>
		scan_default_conn_param_set();
    d2cc:	f7ff fd08 	bl	cce0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d2d0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    d2d4:	e7f0      	b.n	d2b8 <bt_scan_init+0x38>
    d2d6:	bf00      	nop
    d2d8:	20009ad0 	.word	0x20009ad0
    d2dc:	2000826c 	.word	0x2000826c
    d2e0:	20009b14 	.word	0x20009b14

0000d2e4 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d2e4:	b108      	cbz	r0, d2ea <bt_scan_start+0x6>
    d2e6:	2801      	cmp	r0, #1
    d2e8:	d106      	bne.n	d2f8 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d2ea:	4b05      	ldr	r3, [pc, #20]	; (d300 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d2ec:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d2ee:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d2f2:	4804      	ldr	r0, [pc, #16]	; (d304 <bt_scan_start+0x20>)
    d2f4:	f003 bcae 	b.w	10c54 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d2f8:	f06f 0015 	mvn.w	r0, #21
    d2fc:	4770      	bx	lr
    d2fe:	bf00      	nop
    d300:	20009ad0 	.word	0x20009ad0
    d304:	20009b00 	.word	0x20009b00

0000d308 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d308:	1e4b      	subs	r3, r1, #1
    d30a:	4259      	negs	r1, r3
    d30c:	4159      	adcs	r1, r3
    d30e:	4b01      	ldr	r3, [pc, #4]	; (d314 <lbslc_ccc_cfg_changed+0xc>)
    d310:	7019      	strb	r1, [r3, #0]
}
    d312:	4770      	bx	lr
    d314:	2000b236 	.word	0x2000b236

0000d318 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d318:	b510      	push	{r4, lr}
    d31a:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d31c:	4b03      	ldr	r3, [pc, #12]	; (d32c <write_led+0x14>)
    d31e:	681b      	ldr	r3, [r3, #0]
    d320:	b10b      	cbz	r3, d326 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d322:	7810      	ldrb	r0, [r2, #0]
    d324:	4798      	blx	r3
	}

	return len;
}
    d326:	4620      	mov	r0, r4
    d328:	bd10      	pop	{r4, pc}
    d32a:	bf00      	nop
    d32c:	20009b24 	.word	0x20009b24

0000d330 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d330:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d334:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d336:	4b0d      	ldr	r3, [pc, #52]	; (d36c <read_button+0x3c>)
{
    d338:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d33a:	6858      	ldr	r0, [r3, #4]
{
    d33c:	460c      	mov	r4, r1
    d33e:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d340:	b180      	cbz	r0, d364 <read_button+0x34>
	const char *value = attr->user_data;
    d342:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d346:	4780      	blx	r0
    d348:	4b09      	ldr	r3, [pc, #36]	; (d370 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d34a:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d34c:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d34e:	2301      	movs	r3, #1
    d350:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d354:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d358:	4621      	mov	r1, r4
    d35a:	9300      	str	r3, [sp, #0]
    d35c:	4628      	mov	r0, r5
    d35e:	463b      	mov	r3, r7
    d360:	f012 fadc 	bl	1f91c <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d364:	b004      	add	sp, #16
    d366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d36a:	bf00      	nop
    d36c:	20009b24 	.word	0x20009b24
    d370:	2000b235 	.word	0x2000b235

0000d374 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d374:	b120      	cbz	r0, d380 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d376:	4b03      	ldr	r3, [pc, #12]	; (d384 <bt_lbs_init+0x10>)
    d378:	6802      	ldr	r2, [r0, #0]
    d37a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d37c:	6842      	ldr	r2, [r0, #4]
    d37e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d380:	2000      	movs	r0, #0
    d382:	4770      	bx	lr
    d384:	20009b24 	.word	0x20009b24

0000d388 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d388:	b500      	push	{lr}
	if (!notify_enabled) {
    d38a:	4b0e      	ldr	r3, [pc, #56]	; (d3c4 <bt_lbs_send_button_state+0x3c>)
{
    d38c:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d38e:	781b      	ldrb	r3, [r3, #0]
{
    d390:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d394:	b19b      	cbz	r3, d3be <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d396:	2100      	movs	r1, #0
    d398:	2218      	movs	r2, #24
    d39a:	a802      	add	r0, sp, #8
    d39c:	f010 ffdf 	bl	1e35e <memset>

	params.attr = attr;
    d3a0:	4b09      	ldr	r3, [pc, #36]	; (d3c8 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d3a2:	2000      	movs	r0, #0
	params.attr = attr;
    d3a4:	9303      	str	r3, [sp, #12]
	params.data = data;
    d3a6:	f10d 0307 	add.w	r3, sp, #7
    d3aa:	9304      	str	r3, [sp, #16]
	params.len = len;
    d3ac:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d3ae:	a902      	add	r1, sp, #8
	params.len = len;
    d3b0:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d3b4:	f006 fef8 	bl	141a8 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d3b8:	b009      	add	sp, #36	; 0x24
    d3ba:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d3be:	f06f 000c 	mvn.w	r0, #12
    d3c2:	e7f9      	b.n	d3b8 <bt_lbs_send_button_state+0x30>
    d3c4:	2000b236 	.word	0x2000b236
    d3c8:	00021ea0 	.word	0x00021ea0

0000d3cc <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d3cc:	2303      	movs	r3, #3
static void _DoInit(void) {
    d3ce:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d3d0:	4c10      	ldr	r4, [pc, #64]	; (d414 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d3d2:	4a11      	ldr	r2, [pc, #68]	; (d418 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d3d4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d3d8:	4b10      	ldr	r3, [pc, #64]	; (d41c <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d3da:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d3dc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d3e2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d3e4:	4a0e      	ldr	r2, [pc, #56]	; (d420 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d3e6:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d3e8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d3ea:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d3ec:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d3ee:	490d      	ldr	r1, [pc, #52]	; (d424 <_DoInit+0x58>)
    d3f0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d3f2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d3f4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d3f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d3f8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d3fa:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d3fc:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d3fe:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d400:	f010 ff28 	bl	1e254 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d404:	4620      	mov	r0, r4
    d406:	4908      	ldr	r1, [pc, #32]	; (d428 <_DoInit+0x5c>)
    d408:	f010 ff24 	bl	1e254 <strcpy>
  p->acID[6] = ' ';
    d40c:	2320      	movs	r3, #32
    d40e:	71a3      	strb	r3, [r4, #6]
}
    d410:	bd10      	pop	{r4, pc}
    d412:	bf00      	nop
    d414:	20009b2c 	.word	0x20009b2c
    d418:	00023876 	.word	0x00023876
    d41c:	2000b247 	.word	0x2000b247
    d420:	2000b237 	.word	0x2000b237
    d424:	0002387f 	.word	0x0002387f
    d428:	00023883 	.word	0x00023883

0000d42c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d42c:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d42e:	2418      	movs	r4, #24
    d430:	fb00 4504 	mla	r5, r0, r4, r4
    d434:	4b14      	ldr	r3, [pc, #80]	; (d488 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d436:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d438:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d43a:	fb04 3300 	mla	r3, r4, r0, r3
    d43e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d440:	2c01      	cmp	r4, #1
    d442:	d00e      	beq.n	d462 <SEGGER_RTT_WriteNoLock+0x36>
    d444:	2c02      	cmp	r4, #2
    d446:	d018      	beq.n	d47a <SEGGER_RTT_WriteNoLock+0x4e>
    d448:	b9e4      	cbnz	r4, d484 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d44a:	4628      	mov	r0, r5
    d44c:	f010 f9b1 	bl	1d7b2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d450:	4286      	cmp	r6, r0
    d452:	d804      	bhi.n	d45e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d454:	4632      	mov	r2, r6
    d456:	4628      	mov	r0, r5
    d458:	f010 f9b4 	bl	1d7c4 <_WriteNoCheck>
    d45c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d45e:	4620      	mov	r0, r4
    d460:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d462:	4628      	mov	r0, r5
    d464:	f010 f9a5 	bl	1d7b2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d468:	4286      	cmp	r6, r0
    d46a:	4634      	mov	r4, r6
    d46c:	bf28      	it	cs
    d46e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d470:	4628      	mov	r0, r5
    d472:	4622      	mov	r2, r4
    d474:	f010 f9a6 	bl	1d7c4 <_WriteNoCheck>
    break;
    d478:	e7f1      	b.n	d45e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d47a:	4628      	mov	r0, r5
}
    d47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d480:	f010 b9bc 	b.w	1d7fc <_WriteBlocking>
  switch (pRing->Flags) {
    d484:	2400      	movs	r4, #0
  return Status;
    d486:	e7ea      	b.n	d45e <SEGGER_RTT_WriteNoLock+0x32>
    d488:	20009b2c 	.word	0x20009b2c

0000d48c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d48c:	4904      	ldr	r1, [pc, #16]	; (d4a0 <sub_bytes+0x14>)
    d48e:	1e43      	subs	r3, r0, #1
    d490:	300f      	adds	r0, #15
    d492:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d496:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d498:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d49a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d49c:	d1f9      	bne.n	d492 <sub_bytes+0x6>
	}
}
    d49e:	4770      	bx	lr
    d4a0:	0002388a 	.word	0x0002388a

0000d4a4 <tc_aes128_set_encrypt_key>:
{
    d4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4a6:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d4a8:	4e26      	ldr	r6, [pc, #152]	; (d544 <tc_aes128_set_encrypt_key+0xa0>)
{
    d4aa:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d4ac:	ad01      	add	r5, sp, #4
{
    d4ae:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d4b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d4b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d4b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d4b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d4b8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d4bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d4c0:	4638      	mov	r0, r7
    d4c2:	2f00      	cmp	r7, #0
    d4c4:	d039      	beq.n	d53a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d4c6:	2c00      	cmp	r4, #0
    d4c8:	d039      	beq.n	d53e <tc_aes128_set_encrypt_key+0x9a>
    d4ca:	1f38      	subs	r0, r7, #4
    d4cc:	4602      	mov	r2, r0
    d4ce:	4621      	mov	r1, r4
    d4d0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d4d2:	784b      	ldrb	r3, [r1, #1]
    d4d4:	780d      	ldrb	r5, [r1, #0]
    d4d6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d4d8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d4dc:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d4de:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d4e0:	432b      	orrs	r3, r5
    d4e2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d4e6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d4e8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d4ec:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d4f0:	d1ef      	bne.n	d4d2 <tc_aes128_set_encrypt_key+0x2e>
    d4f2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d4f4:	4c14      	ldr	r4, [pc, #80]	; (d548 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d4f6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d4f8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d4fa:	d116      	bne.n	d52a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d4fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d500:	5ca5      	ldrb	r5, [r4, r2]
    d502:	0e1a      	lsrs	r2, r3, #24
    d504:	5ca2      	ldrb	r2, [r4, r2]
    d506:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d50a:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d50e:	5d65      	ldrb	r5, [r4, r5]
    d510:	b2db      	uxtb	r3, r3
    d512:	5ce3      	ldrb	r3, [r4, r3]
    d514:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d518:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d51c:	ad0c      	add	r5, sp, #48	; 0x30
    d51e:	f021 0303 	bic.w	r3, r1, #3
    d522:	442b      	add	r3, r5
    d524:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d528:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d52a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d52e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d530:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d532:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d534:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d536:	d1de      	bne.n	d4f6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d538:	2001      	movs	r0, #1
}
    d53a:	b00d      	add	sp, #52	; 0x34
    d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d53e:	4620      	mov	r0, r4
    d540:	e7fb      	b.n	d53a <tc_aes128_set_encrypt_key+0x96>
    d542:	bf00      	nop
    d544:	00021ba8 	.word	0x00021ba8
    d548:	0002388a 	.word	0x0002388a

0000d54c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d550:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d552:	6803      	ldr	r3, [r0, #0]
{
    d554:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d556:	9302      	str	r3, [sp, #8]
    d558:	6843      	ldr	r3, [r0, #4]
    d55a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; d714 <compress+0x1c8>
    d55e:	9303      	str	r3, [sp, #12]
    d560:	6883      	ldr	r3, [r0, #8]
    d562:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d566:	9304      	str	r3, [sp, #16]
    d568:	68c3      	ldr	r3, [r0, #12]
    d56a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d56c:	6903      	ldr	r3, [r0, #16]
    d56e:	9306      	str	r3, [sp, #24]
    d570:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d572:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d576:	9307      	str	r3, [sp, #28]
    d578:	6983      	ldr	r3, [r0, #24]
    d57a:	9308      	str	r3, [sp, #32]
    d57c:	69c3      	ldr	r3, [r0, #28]
    d57e:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d582:	4698      	mov	r8, r3
    d584:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d586:	9b04      	ldr	r3, [sp, #16]
    d588:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d58a:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d58c:	ab0c      	add	r3, sp, #48	; 0x30
    d58e:	ba2d      	rev	r5, r5
    d590:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d592:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d596:	3704      	adds	r7, #4
    d598:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d59c:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d5a0:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d5a4:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d5a8:	444d      	add	r5, r9
    d5aa:	ea2b 0302 	bic.w	r3, fp, r2
    d5ae:	ea02 090c 	and.w	r9, r2, ip
    d5b2:	ea83 0309 	eor.w	r3, r3, r9
    d5b6:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d5b8:	9d00      	ldr	r5, [sp, #0]
    d5ba:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d5be:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d5c0:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d5c2:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d5c6:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d5ca:	4025      	ands	r5, r4
    d5cc:	ea06 0909 	and.w	r9, r6, r9
    d5d0:	ea85 0509 	eor.w	r5, r5, r9
    d5d4:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d5d8:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d5da:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d5dc:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d5e0:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d5e2:	f8dd e000 	ldr.w	lr, [sp]
    d5e6:	46d8      	mov	r8, fp
    d5e8:	f040 8085 	bne.w	d6f6 <compress+0x1aa>
    d5ec:	f04f 0a10 	mov.w	sl, #16
    d5f0:	4949      	ldr	r1, [pc, #292]	; (d718 <compress+0x1cc>)
    d5f2:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d5f4:	4651      	mov	r1, sl
    d5f6:	f10a 0a01 	add.w	sl, sl, #1
    d5fa:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d5fe:	f00a 070f 	and.w	r7, sl, #15
    d602:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d606:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d60a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d60e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d612:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d614:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d618:	f101 070e 	add.w	r7, r1, #14
    d61c:	f007 070f 	and.w	r7, r7, #15
    d620:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d624:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d628:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d62a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d62e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d632:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d636:	f001 010f 	and.w	r1, r1, #15
    d63a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d63e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d642:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d646:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d64a:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d64e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d652:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d654:	f8dd e004 	ldr.w	lr, [sp, #4]
    d658:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d65c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d660:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d662:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d666:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d668:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d66a:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d66e:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d672:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d676:	ea05 0802 	and.w	r8, r5, r2
    d67a:	970a      	str	r7, [sp, #40]	; 0x28
    d67c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d680:	ea2c 0705 	bic.w	r7, ip, r5
    d684:	ea87 0708 	eor.w	r7, r7, r8
    d688:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d68c:	444f      	add	r7, r9
    d68e:	4477      	add	r7, lr
    d690:	4439      	add	r1, r7
    d692:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d694:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d698:	ea84 0b06 	eor.w	fp, r4, r6
    d69c:	ea0b 0b03 	and.w	fp, fp, r3
    d6a0:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d6a4:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d6a8:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d6ac:	ea8b 0e0e 	eor.w	lr, fp, lr
    d6b0:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d6b4:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d6b6:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d6b8:	46e3      	mov	fp, ip
    d6ba:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d6bc:	9600      	str	r6, [sp, #0]
    d6be:	d121      	bne.n	d704 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d6c0:	9f02      	ldr	r7, [sp, #8]
    d6c2:	440f      	add	r7, r1
    d6c4:	9903      	ldr	r1, [sp, #12]
    d6c6:	6007      	str	r7, [r0, #0]
    d6c8:	4419      	add	r1, r3
    d6ca:	9b04      	ldr	r3, [sp, #16]
    d6cc:	6041      	str	r1, [r0, #4]
    d6ce:	4423      	add	r3, r4
    d6d0:	6083      	str	r3, [r0, #8]
    d6d2:	9b05      	ldr	r3, [sp, #20]
    d6d4:	4433      	add	r3, r6
    d6d6:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d6d8:	9b06      	ldr	r3, [sp, #24]
    d6da:	4443      	add	r3, r8
    d6dc:	6103      	str	r3, [r0, #16]
    d6de:	9b07      	ldr	r3, [sp, #28]
    d6e0:	442b      	add	r3, r5
    d6e2:	6143      	str	r3, [r0, #20]
    d6e4:	9b08      	ldr	r3, [sp, #32]
    d6e6:	4413      	add	r3, r2
    d6e8:	6183      	str	r3, [r0, #24]
    d6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6ec:	4463      	add	r3, ip
    d6ee:	61c3      	str	r3, [r0, #28]
}
    d6f0:	b01d      	add	sp, #116	; 0x74
    d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6f6:	46e3      	mov	fp, ip
    d6f8:	9600      	str	r6, [sp, #0]
    d6fa:	4694      	mov	ip, r2
    d6fc:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    d6fe:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    d700:	461c      	mov	r4, r3
    d702:	e742      	b.n	d58a <compress+0x3e>
    d704:	4694      	mov	ip, r2
    d706:	4626      	mov	r6, r4
    d708:	462a      	mov	r2, r5
    d70a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d70c:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    d70e:	460b      	mov	r3, r1
    d710:	e770      	b.n	d5f4 <compress+0xa8>
    d712:	bf00      	nop
    d714:	00021ef0 	.word	0x00021ef0
    d718:	00021f30 	.word	0x00021f30

0000d71c <tc_sha256_init>:
{
    d71c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d71e:	4604      	mov	r4, r0
    d720:	b1c8      	cbz	r0, d756 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d722:	2270      	movs	r2, #112	; 0x70
    d724:	2100      	movs	r1, #0
    d726:	f010 f8a6 	bl	1d876 <_set>
	s->iv[1] = 0xbb67ae85;
    d72a:	4b0b      	ldr	r3, [pc, #44]	; (d758 <tc_sha256_init+0x3c>)
    d72c:	4a0b      	ldr	r2, [pc, #44]	; (d75c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d72e:	490c      	ldr	r1, [pc, #48]	; (d760 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d730:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d734:	4b0b      	ldr	r3, [pc, #44]	; (d764 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d736:	480c      	ldr	r0, [pc, #48]	; (d768 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d738:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d73c:	4b0b      	ldr	r3, [pc, #44]	; (d76c <tc_sha256_init+0x50>)
    d73e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d742:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d744:	4b0a      	ldr	r3, [pc, #40]	; (d770 <tc_sha256_init+0x54>)
    d746:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d748:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d74c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d750:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d754:	61e3      	str	r3, [r4, #28]
}
    d756:	bd10      	pop	{r4, pc}
    d758:	bb67ae85 	.word	0xbb67ae85
    d75c:	6a09e667 	.word	0x6a09e667
    d760:	3c6ef372 	.word	0x3c6ef372
    d764:	a54ff53a 	.word	0xa54ff53a
    d768:	510e527f 	.word	0x510e527f
    d76c:	9b05688c 	.word	0x9b05688c
    d770:	1f83d9ab 	.word	0x1f83d9ab

0000d774 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d774:	4a0a      	ldr	r2, [pc, #40]	; (d7a0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d776:	490b      	ldr	r1, [pc, #44]	; (d7a4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    d778:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d77a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d77c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    d780:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d784:	4908      	ldr	r1, [pc, #32]	; (d7a8 <arch_swap+0x34>)
    d786:	684b      	ldr	r3, [r1, #4]
    d788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d78c:	604b      	str	r3, [r1, #4]
    d78e:	2300      	movs	r3, #0
    d790:	f383 8811 	msr	BASEPRI, r3
    d794:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d798:	6893      	ldr	r3, [r2, #8]
}
    d79a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    d79e:	4770      	bx	lr
    d7a0:	20009fbc 	.word	0x20009fbc
    d7a4:	0002261c 	.word	0x0002261c
    d7a8:	e000ed00 	.word	0xe000ed00

0000d7ac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d7ac:	4914      	ldr	r1, [pc, #80]	; (d800 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d7ae:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d7b0:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    d7b4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d7b6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d7ba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d7be:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d7c0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d7c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d7c8:	4f0e      	ldr	r7, [pc, #56]	; (d804 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d7ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d7ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d7d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d7d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d7d4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    d7d8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d7da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d7de:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d7e2:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    d7e6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d7ea:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d7ee:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d7f2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d7f4:	f010 fc82 	bl	1e0fc <configure_builtin_stack_guard>
    pop {r2, lr}
    d7f8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d7fc:	4770      	bx	lr
    d7fe:	0000      	.short	0x0000
    ldr r1, =_kernel
    d800:	20009fbc 	.word	0x20009fbc
    ldr v4, =_SCS_ICSR
    d804:	e000ed04 	.word	0xe000ed04

0000d808 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d808:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d80c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d80e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d812:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d816:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d818:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d81c:	2902      	cmp	r1, #2
    beq _oops
    d81e:	d0ff      	beq.n	d820 <_oops>

0000d820 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d820:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d822:	f010 fc6f 	bl	1e104 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d826:	bd01      	pop	{r0, pc}

0000d828 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d828:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d82a:	2b00      	cmp	r3, #0
    d82c:	db08      	blt.n	d840 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d82e:	2201      	movs	r2, #1
    d830:	f000 001f 	and.w	r0, r0, #31
    d834:	fa02 f000 	lsl.w	r0, r2, r0
    d838:	4a02      	ldr	r2, [pc, #8]	; (d844 <arch_irq_enable+0x1c>)
    d83a:	095b      	lsrs	r3, r3, #5
    d83c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d840:	4770      	bx	lr
    d842:	bf00      	nop
    d844:	e000e100 	.word	0xe000e100

0000d848 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d848:	4b05      	ldr	r3, [pc, #20]	; (d860 <arch_irq_is_enabled+0x18>)
    d84a:	0942      	lsrs	r2, r0, #5
    d84c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d850:	2301      	movs	r3, #1
    d852:	f000 001f 	and.w	r0, r0, #31
    d856:	fa03 f000 	lsl.w	r0, r3, r0
}
    d85a:	4010      	ands	r0, r2
    d85c:	4770      	bx	lr
    d85e:	bf00      	nop
    d860:	e000e100 	.word	0xe000e100

0000d864 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d864:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    d866:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d868:	2c07      	cmp	r4, #7
{
    d86a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d86c:	d908      	bls.n	d880 <z_arm_irq_priority_set+0x1c>
    d86e:	490d      	ldr	r1, [pc, #52]	; (d8a4 <z_arm_irq_priority_set+0x40>)
    d870:	480d      	ldr	r0, [pc, #52]	; (d8a8 <z_arm_irq_priority_set+0x44>)
    d872:	225c      	movs	r2, #92	; 0x5c
    d874:	f00f f890 	bl	1c998 <printk>
    d878:	215c      	movs	r1, #92	; 0x5c
    d87a:	480a      	ldr	r0, [pc, #40]	; (d8a4 <z_arm_irq_priority_set+0x40>)
    d87c:	f00f fb32 	bl	1cee4 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d880:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d882:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d884:	bfac      	ite	ge
    d886:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d88a:	4b08      	ldrlt	r3, [pc, #32]	; (d8ac <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d88c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    d890:	b2e4      	uxtb	r4, r4
    d892:	bfab      	itete	ge
    d894:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d898:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d89c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8a0:	555c      	strblt	r4, [r3, r5]
}
    d8a2:	bd38      	pop	{r3, r4, r5, pc}
    d8a4:	0002398a 	.word	0x0002398a
    d8a8:	00022dd6 	.word	0x00022dd6
    d8ac:	e000ed14 	.word	0xe000ed14

0000d8b0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d8b0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d8b4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    d8b6:	490b      	ldr	r1, [pc, #44]	; (d8e4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    d8b8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    d8bc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    d8be:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    d8c2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d8c6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    d8c8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    d8cc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d8d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d8d4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d8d8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d8da:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d8dc:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    d8de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d8e2:	4770      	bx	lr
    d8e4:	0001ca75 	.word	0x0001ca75

0000d8e8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    d8e8:	4604      	mov	r4, r0
    d8ea:	b508      	push	{r3, lr}
    d8ec:	460e      	mov	r6, r1
    d8ee:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    d8f0:	f000 faf6 	bl	dee0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d8f4:	4b08      	ldr	r3, [pc, #32]	; (d918 <arch_switch_to_main_thread+0x30>)
    d8f6:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d8f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d8fa:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d8fe:	4628      	mov	r0, r5
    d900:	f386 8809 	msr	PSP, r6
    d904:	2100      	movs	r1, #0
    d906:	b663      	cpsie	if
    d908:	f381 8811 	msr	BASEPRI, r1
    d90c:	f3bf 8f6f 	isb	sy
    d910:	2200      	movs	r2, #0
    d912:	2300      	movs	r3, #0
    d914:	f00f f8ae 	bl	1ca74 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d918:	20009fbc 	.word	0x20009fbc

0000d91c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d91c:	4901      	ldr	r1, [pc, #4]	; (d924 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d91e:	2210      	movs	r2, #16
	str	r2, [r1]
    d920:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d922:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d924:	e000ed10 	.word	0xe000ed10

0000d928 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d928:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d92a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d92c:	f380 8811 	msr	BASEPRI, r0
	isb
    d930:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d934:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d938:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d93a:	b662      	cpsie	i
	isb
    d93c:	f3bf 8f6f 	isb	sy

	bx	lr
    d940:	4770      	bx	lr
    d942:	bf00      	nop

0000d944 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d944:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d946:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d948:	f381 8811 	msr	BASEPRI, r1

	wfe
    d94c:	bf20      	wfe

	msr	BASEPRI, r0
    d94e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d952:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d954:	4770      	bx	lr
    d956:	bf00      	nop

0000d958 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d958:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d95a:	4605      	mov	r5, r0

	if (esf != NULL) {
    d95c:	460c      	mov	r4, r1
    d95e:	b1c9      	cbz	r1, d994 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d960:	688b      	ldr	r3, [r1, #8]
    d962:	4810      	ldr	r0, [pc, #64]	; (d9a4 <z_arm_fatal_error+0x4c>)
    d964:	9300      	str	r3, [sp, #0]
    d966:	e9d1 2300 	ldrd	r2, r3, [r1]
    d96a:	2145      	movs	r1, #69	; 0x45
    d96c:	f00f f814 	bl	1c998 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d970:	6963      	ldr	r3, [r4, #20]
    d972:	2145      	movs	r1, #69	; 0x45
    d974:	9300      	str	r3, [sp, #0]
    d976:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d97a:	480b      	ldr	r0, [pc, #44]	; (d9a8 <z_arm_fatal_error+0x50>)
    d97c:	f00f f80c 	bl	1c998 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d980:	2145      	movs	r1, #69	; 0x45
    d982:	69e2      	ldr	r2, [r4, #28]
    d984:	4809      	ldr	r0, [pc, #36]	; (d9ac <z_arm_fatal_error+0x54>)
    d986:	f00f f807 	bl	1c998 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d98a:	2145      	movs	r1, #69	; 0x45
    d98c:	69a2      	ldr	r2, [r4, #24]
    d98e:	4808      	ldr	r0, [pc, #32]	; (d9b0 <z_arm_fatal_error+0x58>)
    d990:	f00f f802 	bl	1c998 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d994:	4621      	mov	r1, r4
    d996:	4628      	mov	r0, r5
}
    d998:	b003      	add	sp, #12
    d99a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d99e:	f00c b891 	b.w	19ac4 <z_fatal_error>
    d9a2:	bf00      	nop
    d9a4:	000239c0 	.word	0x000239c0
    d9a8:	000239f4 	.word	0x000239f4
    d9ac:	00023a28 	.word	0x00023a28
    d9b0:	00023a3c 	.word	0x00023a3c

0000d9b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d9b4:	bf30      	wfi
    b z_SysNmiOnReset
    d9b6:	f7ff bffd 	b.w	d9b4 <z_SysNmiOnReset>
    d9ba:	bf00      	nop

0000d9bc <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d9bc:	4a0e      	ldr	r2, [pc, #56]	; (d9f8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d9be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d9c0:	4b0e      	ldr	r3, [pc, #56]	; (d9fc <z_arm_prep_c+0x40>)
    d9c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d9c6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d9c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d9cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d9d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d9d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d9dc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d9e0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d9e4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d9e8:	f00c f8f8 	bl	19bdc <z_bss_zero>
	z_data_copy();
    d9ec:	f00e f92e 	bl	1bc4c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d9f0:	f000 fa48 	bl	de84 <z_arm_interrupt_init>
	z_cstart();
    d9f4:	f00c f916 	bl	19c24 <z_cstart>
    d9f8:	00008000 	.word	0x00008000
    d9fc:	e000ed00 	.word	0xe000ed00

0000da00 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    da00:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    da02:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    da04:	4a0b      	ldr	r2, [pc, #44]	; (da34 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    da06:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    da08:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    da0a:	bf1e      	ittt	ne
	movne	r1, #0
    da0c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    da0e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    da10:	f013 fca0 	blne	21354 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    da14:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    da16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    da1a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    da1e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    da22:	4905      	ldr	r1, [pc, #20]	; (da38 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    da24:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    da26:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    da28:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    da2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    da2e:	4903      	ldr	r1, [pc, #12]	; (da3c <_isr_wrapper+0x3c>)
	bx r1
    da30:	4708      	bx	r1
    da32:	0000      	.short	0x0000
	ldr r2, =_kernel
    da34:	20009fbc 	.word	0x20009fbc
	ldr r1, =_sw_isr_table
    da38:	0002175c 	.word	0x0002175c
	ldr r1, =z_arm_int_exit
    da3c:	0000de45 	.word	0x0000de45

0000da40 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    da40:	f00f fa6f 	bl	1cf22 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    da44:	2020      	movs	r0, #32
    msr BASEPRI, r0
    da46:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    da4a:	4808      	ldr	r0, [pc, #32]	; (da6c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    da4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    da50:	1840      	adds	r0, r0, r1
    msr PSP, r0
    da52:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    da56:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    da5a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    da5c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    da5e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    da62:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    da66:	f7ff ffa9 	bl	d9bc <z_arm_prep_c>
    da6a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    da6c:	2000d508 	.word	0x2000d508

0000da70 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    da70:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    da74:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    da78:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    da7a:	4672      	mov	r2, lr
	bl z_arm_fault
    da7c:	f000 f91a 	bl	dcb4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    da80:	bd01      	pop	{r0, pc}
    da82:	bf00      	nop

0000da84 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    da84:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    da86:	4c21      	ldr	r4, [pc, #132]	; (db0c <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    da88:	2145      	movs	r1, #69	; 0x45
    da8a:	4821      	ldr	r0, [pc, #132]	; (db10 <usage_fault.constprop.0+0x8c>)
    da8c:	f00e ff84 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    da90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da92:	019d      	lsls	r5, r3, #6
    da94:	d503      	bpl.n	da9e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    da96:	2145      	movs	r1, #69	; 0x45
    da98:	481e      	ldr	r0, [pc, #120]	; (db14 <usage_fault.constprop.0+0x90>)
    da9a:	f00e ff7d 	bl	1c998 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    da9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daa0:	01dc      	lsls	r4, r3, #7
    daa2:	d503      	bpl.n	daac <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    daa4:	2145      	movs	r1, #69	; 0x45
    daa6:	481c      	ldr	r0, [pc, #112]	; (db18 <usage_fault.constprop.0+0x94>)
    daa8:	f00e ff76 	bl	1c998 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    daac:	4d17      	ldr	r5, [pc, #92]	; (db0c <usage_fault.constprop.0+0x88>)
    daae:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dab0:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dab4:	d004      	beq.n	dac0 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dab6:	2145      	movs	r1, #69	; 0x45
    dab8:	4818      	ldr	r0, [pc, #96]	; (db1c <usage_fault.constprop.0+0x98>)
    daba:	f00e ff6d 	bl	1c998 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dabe:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dac0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dac2:	0318      	lsls	r0, r3, #12
    dac4:	d503      	bpl.n	dace <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    dac6:	2145      	movs	r1, #69	; 0x45
    dac8:	4815      	ldr	r0, [pc, #84]	; (db20 <usage_fault.constprop.0+0x9c>)
    daca:	f00e ff65 	bl	1c998 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dace:	4d0f      	ldr	r5, [pc, #60]	; (db0c <usage_fault.constprop.0+0x88>)
    dad0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dad2:	0359      	lsls	r1, r3, #13
    dad4:	d503      	bpl.n	dade <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dad6:	2145      	movs	r1, #69	; 0x45
    dad8:	4812      	ldr	r0, [pc, #72]	; (db24 <usage_fault.constprop.0+0xa0>)
    dada:	f00e ff5d 	bl	1c998 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dade:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dae0:	039a      	lsls	r2, r3, #14
    dae2:	d503      	bpl.n	daec <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dae4:	2145      	movs	r1, #69	; 0x45
    dae6:	4810      	ldr	r0, [pc, #64]	; (db28 <usage_fault.constprop.0+0xa4>)
    dae8:	f00e ff56 	bl	1c998 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    daec:	4d07      	ldr	r5, [pc, #28]	; (db0c <usage_fault.constprop.0+0x88>)
    daee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    daf0:	03db      	lsls	r3, r3, #15
    daf2:	d503      	bpl.n	dafc <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    daf4:	2145      	movs	r1, #69	; 0x45
    daf6:	480d      	ldr	r0, [pc, #52]	; (db2c <usage_fault.constprop.0+0xa8>)
    daf8:	f00e ff4e 	bl	1c998 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dafc:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    dafe:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    db00:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    db04:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    db08:	62ab      	str	r3, [r5, #40]	; 0x28
}
    db0a:	bd38      	pop	{r3, r4, r5, pc}
    db0c:	e000ed00 	.word	0xe000ed00
    db10:	00023a6f 	.word	0x00023a6f
    db14:	00023a8c 	.word	0x00023a8c
    db18:	00023aa4 	.word	0x00023aa4
    db1c:	00023ac3 	.word	0x00023ac3
    db20:	00023af2 	.word	0x00023af2
    db24:	00023b15 	.word	0x00023b15
    db28:	00023b3f 	.word	0x00023b3f
    db2c:	00023b5e 	.word	0x00023b5e

0000db30 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    db30:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    db32:	4c23      	ldr	r4, [pc, #140]	; (dbc0 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    db34:	4606      	mov	r6, r0
    db36:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    db38:	4822      	ldr	r0, [pc, #136]	; (dbc4 <bus_fault.constprop.0+0x94>)
    db3a:	2145      	movs	r1, #69	; 0x45
    db3c:	f00e ff2c 	bl	1c998 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    db40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db42:	04d9      	lsls	r1, r3, #19
    db44:	d503      	bpl.n	db4e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    db46:	2145      	movs	r1, #69	; 0x45
    db48:	481f      	ldr	r0, [pc, #124]	; (dbc8 <bus_fault.constprop.0+0x98>)
    db4a:	f00e ff25 	bl	1c998 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    db4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db50:	051a      	lsls	r2, r3, #20
    db52:	d503      	bpl.n	db5c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    db54:	2145      	movs	r1, #69	; 0x45
    db56:	481d      	ldr	r0, [pc, #116]	; (dbcc <bus_fault.constprop.0+0x9c>)
    db58:	f00e ff1e 	bl	1c998 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    db5c:	4c18      	ldr	r4, [pc, #96]	; (dbc0 <bus_fault.constprop.0+0x90>)
    db5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db60:	059b      	lsls	r3, r3, #22
    db62:	d510      	bpl.n	db86 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    db64:	481a      	ldr	r0, [pc, #104]	; (dbd0 <bus_fault.constprop.0+0xa0>)
    db66:	2145      	movs	r1, #69	; 0x45
    db68:	f00e ff16 	bl	1c998 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    db6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    db6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db70:	0418      	lsls	r0, r3, #16
    db72:	d508      	bpl.n	db86 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    db74:	2145      	movs	r1, #69	; 0x45
    db76:	4817      	ldr	r0, [pc, #92]	; (dbd4 <bus_fault.constprop.0+0xa4>)
    db78:	f00e ff0e 	bl	1c998 <printk>
			if (from_hard_fault) {
    db7c:	b11e      	cbz	r6, db86 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    db7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    db84:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    db86:	4c0e      	ldr	r4, [pc, #56]	; (dbc0 <bus_fault.constprop.0+0x90>)
    db88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db8a:	0559      	lsls	r1, r3, #21
    db8c:	d503      	bpl.n	db96 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    db8e:	2145      	movs	r1, #69	; 0x45
    db90:	4811      	ldr	r0, [pc, #68]	; (dbd8 <bus_fault.constprop.0+0xa8>)
    db92:	f00e ff01 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    db96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db98:	05da      	lsls	r2, r3, #23
    db9a:	d50b      	bpl.n	dbb4 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    db9c:	2145      	movs	r1, #69	; 0x45
    db9e:	480f      	ldr	r0, [pc, #60]	; (dbdc <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dba0:	f00e fefa 	bl	1c998 <printk>
	*recoverable = memory_fault_recoverable(esf);
    dba4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dba6:	4a06      	ldr	r2, [pc, #24]	; (dbc0 <bus_fault.constprop.0+0x90>)
    dba8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dbaa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dbae:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dbb0:	7028      	strb	r0, [r5, #0]
}
    dbb2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dbb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbb6:	049b      	lsls	r3, r3, #18
    dbb8:	d5f4      	bpl.n	dba4 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dbba:	2145      	movs	r1, #69	; 0x45
    dbbc:	4808      	ldr	r0, [pc, #32]	; (dbe0 <bus_fault.constprop.0+0xb0>)
    dbbe:	e7ef      	b.n	dba0 <bus_fault.constprop.0+0x70>
    dbc0:	e000ed00 	.word	0xe000ed00
    dbc4:	00023b8e 	.word	0x00023b8e
    dbc8:	00023ba9 	.word	0x00023ba9
    dbcc:	00023bbf 	.word	0x00023bbf
    dbd0:	00023bd7 	.word	0x00023bd7
    dbd4:	00023bf5 	.word	0x00023bf5
    dbd8:	00023c0f 	.word	0x00023c0f
    dbdc:	00023c2f 	.word	0x00023c2f
    dbe0:	00023c4c 	.word	0x00023c4c

0000dbe4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dbe4:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dbe6:	4c29      	ldr	r4, [pc, #164]	; (dc8c <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dbe8:	4606      	mov	r6, r0
    dbea:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dbec:	4828      	ldr	r0, [pc, #160]	; (dc90 <mem_manage_fault.constprop.0+0xac>)
    dbee:	2145      	movs	r1, #69	; 0x45
    dbf0:	f00e fed2 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dbf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbf6:	06d8      	lsls	r0, r3, #27
    dbf8:	d503      	bpl.n	dc02 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dbfa:	2145      	movs	r1, #69	; 0x45
    dbfc:	4825      	ldr	r0, [pc, #148]	; (dc94 <mem_manage_fault.constprop.0+0xb0>)
    dbfe:	f00e fecb 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dc02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc04:	0719      	lsls	r1, r3, #28
    dc06:	d503      	bpl.n	dc10 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dc08:	2145      	movs	r1, #69	; 0x45
    dc0a:	4823      	ldr	r0, [pc, #140]	; (dc98 <mem_manage_fault.constprop.0+0xb4>)
    dc0c:	f00e fec4 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dc10:	4c1e      	ldr	r4, [pc, #120]	; (dc8c <mem_manage_fault.constprop.0+0xa8>)
    dc12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc14:	079a      	lsls	r2, r3, #30
    dc16:	d510      	bpl.n	dc3a <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dc18:	2145      	movs	r1, #69	; 0x45
    dc1a:	4820      	ldr	r0, [pc, #128]	; (dc9c <mem_manage_fault.constprop.0+0xb8>)
    dc1c:	f00e febc 	bl	1c998 <printk>
		uint32_t temp = SCB->MMFAR;
    dc20:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dc22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc24:	061b      	lsls	r3, r3, #24
    dc26:	d508      	bpl.n	dc3a <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dc28:	2145      	movs	r1, #69	; 0x45
    dc2a:	481d      	ldr	r0, [pc, #116]	; (dca0 <mem_manage_fault.constprop.0+0xbc>)
    dc2c:	f00e feb4 	bl	1c998 <printk>
			if (from_hard_fault) {
    dc30:	b11e      	cbz	r6, dc3a <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dc32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dc38:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dc3a:	4c14      	ldr	r4, [pc, #80]	; (dc8c <mem_manage_fault.constprop.0+0xa8>)
    dc3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc3e:	07d8      	lsls	r0, r3, #31
    dc40:	d503      	bpl.n	dc4a <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    dc42:	2145      	movs	r1, #69	; 0x45
    dc44:	4817      	ldr	r0, [pc, #92]	; (dca4 <mem_manage_fault.constprop.0+0xc0>)
    dc46:	f00e fea7 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dc4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc4c:	0699      	lsls	r1, r3, #26
    dc4e:	d503      	bpl.n	dc58 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    dc50:	2145      	movs	r1, #69	; 0x45
    dc52:	4815      	ldr	r0, [pc, #84]	; (dca8 <mem_manage_fault.constprop.0+0xc4>)
    dc54:	f00e fea0 	bl	1c998 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc58:	4b0c      	ldr	r3, [pc, #48]	; (dc8c <mem_manage_fault.constprop.0+0xa8>)
    dc5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc5c:	06d2      	lsls	r2, r2, #27
    dc5e:	d402      	bmi.n	dc66 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc62:	079b      	lsls	r3, r3, #30
    dc64:	d50a      	bpl.n	dc7c <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    dc66:	4911      	ldr	r1, [pc, #68]	; (dcac <mem_manage_fault.constprop.0+0xc8>)
    dc68:	4811      	ldr	r0, [pc, #68]	; (dcb0 <mem_manage_fault.constprop.0+0xcc>)
    dc6a:	f240 1247 	movw	r2, #327	; 0x147
    dc6e:	f00e fe93 	bl	1c998 <printk>
    dc72:	f240 1147 	movw	r1, #327	; 0x147
    dc76:	480d      	ldr	r0, [pc, #52]	; (dcac <mem_manage_fault.constprop.0+0xc8>)
    dc78:	f00f f934 	bl	1cee4 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    dc7c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dc7e:	4a03      	ldr	r2, [pc, #12]	; (dc8c <mem_manage_fault.constprop.0+0xa8>)
    dc80:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc82:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dc86:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dc88:	7028      	strb	r0, [r5, #0]
}
    dc8a:	bd70      	pop	{r4, r5, r6, pc}
    dc8c:	e000ed00 	.word	0xe000ed00
    dc90:	00023c80 	.word	0x00023c80
    dc94:	00023c9b 	.word	0x00023c9b
    dc98:	00023bbf 	.word	0x00023bbf
    dc9c:	00023cd3 	.word	0x00023cd3
    dca0:	00023cf0 	.word	0x00023cf0
    dca4:	00023d0b 	.word	0x00023d0b
    dca8:	00023c4c 	.word	0x00023c4c
    dcac:	00023d2f 	.word	0x00023d2f
    dcb0:	00022dd6 	.word	0x00022dd6

0000dcb4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    dcb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dcb8:	4b51      	ldr	r3, [pc, #324]	; (de00 <z_arm_fault+0x14c>)
{
    dcba:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dcbc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    dcc0:	4689      	mov	r9, r1
    dcc2:	4614      	mov	r4, r2
    dcc4:	2600      	movs	r6, #0
    dcc6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dcc8:	f3c8 0708 	ubfx	r7, r8, #0, #9
    dccc:	f386 8811 	msr	BASEPRI, r6
    dcd0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dcd4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dcd8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    dcdc:	d111      	bne.n	dd02 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    dcde:	07d0      	lsls	r0, r2, #31
    dce0:	d40f      	bmi.n	dd02 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dce2:	0651      	lsls	r1, r2, #25
    dce4:	d403      	bmi.n	dcee <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    dce6:	0722      	lsls	r2, r4, #28
    dce8:	d408      	bmi.n	dcfc <z_arm_fault+0x48>
			*nested_exc = true;
    dcea:	2601      	movs	r6, #1
    dcec:	e008      	b.n	dd00 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    dcee:	2145      	movs	r1, #69	; 0x45
    dcf0:	4844      	ldr	r0, [pc, #272]	; (de04 <z_arm_fault+0x150>)
    dcf2:	f00e fe51 	bl	1c998 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dcf6:	f014 0404 	ands.w	r4, r4, #4
    dcfa:	d000      	beq.n	dcfe <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    dcfc:	464d      	mov	r5, r9
	*nested_exc = false;
    dcfe:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    dd00:	b95d      	cbnz	r5, dd1a <z_arm_fault+0x66>
    dd02:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    dd06:	4940      	ldr	r1, [pc, #256]	; (de08 <z_arm_fault+0x154>)
    dd08:	4840      	ldr	r0, [pc, #256]	; (de0c <z_arm_fault+0x158>)
    dd0a:	f00e fe45 	bl	1c998 <printk>
    dd0e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    dd12:	483d      	ldr	r0, [pc, #244]	; (de08 <z_arm_fault+0x154>)
    dd14:	f00f f8e6 	bl	1cee4 <assert_post_action>
    dd18:	2500      	movs	r5, #0
	*recoverable = false;
    dd1a:	2400      	movs	r4, #0
    dd1c:	1efb      	subs	r3, r7, #3
    dd1e:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    dd22:	2b09      	cmp	r3, #9
    dd24:	d85a      	bhi.n	dddc <z_arm_fault+0x128>
    dd26:	e8df f003 	tbb	[pc, r3]
    dd2a:	4e05      	.short	0x4e05
    dd2c:	59593252 	.word	0x59593252
    dd30:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dd34:	4f32      	ldr	r7, [pc, #200]	; (de00 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    dd36:	2145      	movs	r1, #69	; 0x45
    dd38:	4835      	ldr	r0, [pc, #212]	; (de10 <z_arm_fault+0x15c>)
    dd3a:	f00e fe2d 	bl	1c998 <printk>
	*recoverable = false;
    dd3e:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dd42:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    dd44:	f014 0402 	ands.w	r4, r4, #2
    dd48:	d005      	beq.n	dd56 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    dd4a:	2145      	movs	r1, #69	; 0x45
    dd4c:	4831      	ldr	r0, [pc, #196]	; (de14 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    dd4e:	f00e fe23 	bl	1c998 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dd52:	2400      	movs	r4, #0
}
    dd54:	e01e      	b.n	dd94 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd58:	005b      	lsls	r3, r3, #1
    dd5a:	d51b      	bpl.n	dd94 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    dd5c:	2145      	movs	r1, #69	; 0x45
    dd5e:	482e      	ldr	r0, [pc, #184]	; (de18 <z_arm_fault+0x164>)
    dd60:	f00e fe1a 	bl	1c998 <printk>
		if (SCB_MMFSR != 0) {
    dd64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dd68:	b12b      	cbz	r3, dd76 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    dd6a:	2001      	movs	r0, #1
    dd6c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dd70:	f7ff ff38 	bl	dbe4 <mem_manage_fault.constprop.0>
    dd74:	e00d      	b.n	dd92 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    dd76:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    dd7a:	b12b      	cbz	r3, dd88 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    dd7c:	2001      	movs	r0, #1
    dd7e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dd82:	f7ff fed5 	bl	db30 <bus_fault.constprop.0>
    dd86:	e004      	b.n	dd92 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    dd88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    dd8a:	b29b      	uxth	r3, r3
    dd8c:	b113      	cbz	r3, dd94 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    dd8e:	f7ff fe79 	bl	da84 <usage_fault.constprop.0>
    dd92:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dd94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd98:	b993      	cbnz	r3, ddc0 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dd9a:	2220      	movs	r2, #32
    dd9c:	4629      	mov	r1, r5
    dd9e:	a802      	add	r0, sp, #8
    dda0:	f010 fab2 	bl	1e308 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    dda4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dda6:	b336      	cbz	r6, ddf6 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dda8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    ddac:	b922      	cbnz	r2, ddb8 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    ddae:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    ddb2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    ddb6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    ddb8:	4620      	mov	r0, r4
    ddba:	a902      	add	r1, sp, #8
    ddbc:	f7ff fdcc 	bl	d958 <z_arm_fatal_error>
}
    ddc0:	b00b      	add	sp, #44	; 0x2c
    ddc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    ddc6:	2000      	movs	r0, #0
    ddc8:	f10d 0107 	add.w	r1, sp, #7
    ddcc:	e7d0      	b.n	dd70 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    ddce:	2000      	movs	r0, #0
    ddd0:	f10d 0107 	add.w	r1, sp, #7
    ddd4:	e7d5      	b.n	dd82 <z_arm_fault+0xce>
	PR_FAULT_INFO(
    ddd6:	2145      	movs	r1, #69	; 0x45
    ddd8:	4810      	ldr	r0, [pc, #64]	; (de1c <z_arm_fault+0x168>)
    ddda:	e7b8      	b.n	dd4e <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    dddc:	4910      	ldr	r1, [pc, #64]	; (de20 <z_arm_fault+0x16c>)
    ddde:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    dde2:	4a10      	ldr	r2, [pc, #64]	; (de24 <z_arm_fault+0x170>)
    dde4:	4810      	ldr	r0, [pc, #64]	; (de28 <z_arm_fault+0x174>)
    dde6:	bf08      	it	eq
    dde8:	460a      	moveq	r2, r1
    ddea:	f1a7 0310 	sub.w	r3, r7, #16
    ddee:	2145      	movs	r1, #69	; 0x45
    ddf0:	f00e fdd2 	bl	1c998 <printk>
    ddf4:	e7ad      	b.n	dd52 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    ddf6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    ddfa:	f023 0301 	bic.w	r3, r3, #1
    ddfe:	e7da      	b.n	ddb6 <z_arm_fault+0x102>
    de00:	e000ed00 	.word	0xe000ed00
    de04:	00023d97 	.word	0x00023d97
    de08:	00023d2f 	.word	0x00023d2f
    de0c:	00022dd6 	.word	0x00022dd6
    de10:	00023dbf 	.word	0x00023dbf
    de14:	00023ddb 	.word	0x00023ddb
    de18:	00023e01 	.word	0x00023e01
    de1c:	00023e25 	.word	0x00023e25
    de20:	00023d69 	.word	0x00023d69
    de24:	00023d7e 	.word	0x00023d7e
    de28:	00023e60 	.word	0x00023e60

0000de2c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    de2c:	4b04      	ldr	r3, [pc, #16]	; (de40 <z_arm_fault_init+0x14>)
    de2e:	695a      	ldr	r2, [r3, #20]
    de30:	f042 0210 	orr.w	r2, r2, #16
    de34:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    de36:	695a      	ldr	r2, [r3, #20]
    de38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    de3c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    de3e:	4770      	bx	lr
    de40:	e000ed00 	.word	0xe000ed00

0000de44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    de44:	4b04      	ldr	r3, [pc, #16]	; (de58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    de46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    de48:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    de4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    de4c:	d003      	beq.n	de56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    de4e:	4903      	ldr	r1, [pc, #12]	; (de5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    de50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    de54:	600a      	str	r2, [r1, #0]

0000de56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    de56:	4770      	bx	lr
	ldr r3, =_kernel
    de58:	20009fbc 	.word	0x20009fbc
	ldr r1, =_SCS_ICSR
    de5c:	e000ed04 	.word	0xe000ed04

0000de60 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    de60:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    de64:	4905      	ldr	r1, [pc, #20]	; (de7c <sys_arch_reboot+0x1c>)
    de66:	4b06      	ldr	r3, [pc, #24]	; (de80 <sys_arch_reboot+0x20>)
    de68:	68ca      	ldr	r2, [r1, #12]
    de6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    de6e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    de70:	60cb      	str	r3, [r1, #12]
    de72:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    de76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    de78:	e7fd      	b.n	de76 <sys_arch_reboot+0x16>
    de7a:	bf00      	nop
    de7c:	e000ed00 	.word	0xe000ed00
    de80:	05fa0004 	.word	0x05fa0004

0000de84 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    de84:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de86:	2120      	movs	r1, #32
    de88:	4803      	ldr	r0, [pc, #12]	; (de98 <z_arm_interrupt_init+0x14>)
    de8a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    de8c:	3301      	adds	r3, #1
    de8e:	2b45      	cmp	r3, #69	; 0x45
    de90:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    de94:	d1f9      	bne.n	de8a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    de96:	4770      	bx	lr
    de98:	e000e100 	.word	0xe000e100

0000de9c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    de9c:	b508      	push	{r3, lr}
	if (_current == thread) {
    de9e:	4b0e      	ldr	r3, [pc, #56]	; (ded8 <z_impl_k_thread_abort+0x3c>)
    dea0:	689b      	ldr	r3, [r3, #8]
    dea2:	4283      	cmp	r3, r0
    dea4:	d107      	bne.n	deb6 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    dea6:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    deaa:	b193      	cbz	r3, ded2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    deac:	4a0b      	ldr	r2, [pc, #44]	; (dedc <z_impl_k_thread_abort+0x40>)
    deae:	6853      	ldr	r3, [r2, #4]
    deb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    deb4:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    deb6:	f00c ffb1 	bl	1ae1c <z_thread_single_abort>
	__asm__ volatile(
    deba:	f04f 0320 	mov.w	r3, #32
    debe:	f3ef 8011 	mrs	r0, BASEPRI
    dec2:	f383 8811 	msr	BASEPRI, r3
    dec6:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    deca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    dece:	f013 ba91 	b.w	213f4 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    ded2:	f00d fdb1 	bl	1ba38 <z_self_abort>
    ded6:	bf00      	nop
    ded8:	20009fbc 	.word	0x20009fbc
    dedc:	e000ed00 	.word	0xe000ed00

0000dee0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    dee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    dee2:	4c09      	ldr	r4, [pc, #36]	; (df08 <z_arm_configure_static_mpu_regions+0x28>)
    dee4:	4a09      	ldr	r2, [pc, #36]	; (df0c <z_arm_configure_static_mpu_regions+0x2c>)
    dee6:	4623      	mov	r3, r4
    dee8:	2101      	movs	r1, #1
    deea:	4809      	ldr	r0, [pc, #36]	; (df10 <z_arm_configure_static_mpu_regions+0x30>)
    deec:	f000 f976 	bl	e1dc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    def0:	2300      	movs	r3, #0
    def2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    def4:	4b07      	ldr	r3, [pc, #28]	; (df14 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    def6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    def8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    defa:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    defc:	9301      	str	r3, [sp, #4]
    defe:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    df00:	f000 f988 	bl	e214 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    df04:	b004      	add	sp, #16
    df06:	bd10      	pop	{r4, pc}
    df08:	20070000 	.word	0x20070000
    df0c:	20008000 	.word	0x20008000
    df10:	00021ff0 	.word	0x00021ff0
    df14:	200086c8 	.word	0x200086c8

0000df18 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    df18:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    df1a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    df1c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    df1e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    df22:	f004 031f 	and.w	r3, r4, #31
    df26:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    df28:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    df2a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    df2c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    df30:	4905      	ldr	r1, [pc, #20]	; (df48 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    df32:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    df36:	f043 0301 	orr.w	r3, r3, #1
    df3a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    df3e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    df42:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    df46:	bd10      	pop	{r4, pc}
    df48:	e000ed00 	.word	0xe000ed00

0000df4c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    df4c:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    df4e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    df50:	680c      	ldr	r4, [r1, #0]
{
    df52:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    df54:	890a      	ldrh	r2, [r1, #8]
    df56:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    df58:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df5a:	3b01      	subs	r3, #1
    df5c:	f024 041f 	bic.w	r4, r4, #31
    df60:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    df62:	f002 021f 	and.w	r2, r2, #31
    df66:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df6a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    df6e:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df70:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    df72:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df76:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    df78:	d909      	bls.n	df8e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df7a:	4602      	mov	r2, r0
    df7c:	2145      	movs	r1, #69	; 0x45
    df7e:	4806      	ldr	r0, [pc, #24]	; (df98 <mpu_configure_region+0x4c>)
    df80:	f00e fd0a 	bl	1c998 <printk>
    df84:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    df88:	4620      	mov	r0, r4
    df8a:	b005      	add	sp, #20
    df8c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    df8e:	4669      	mov	r1, sp
    df90:	f7ff ffc2 	bl	df18 <region_init>
	return region_allocate_and_init(index,
    df94:	e7f8      	b.n	df88 <mpu_configure_region+0x3c>
    df96:	bf00      	nop
    df98:	00023e7c 	.word	0x00023e7c

0000df9c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfa0:	4689      	mov	r9, r1
    dfa2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    dfa4:	4606      	mov	r6, r0
    dfa6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    dfaa:	4d59      	ldr	r5, [pc, #356]	; (e110 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    dfac:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    dfae:	45c8      	cmp	r8, r9
    dfb0:	da27      	bge.n	e002 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    dfb2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    dfb6:	f1ba 0f00 	cmp.w	sl, #0
    dfba:	d045      	beq.n	e048 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    dfbc:	f1ba 0f1f 	cmp.w	sl, #31
    dfc0:	d918      	bls.n	dff4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    dfc2:	f01a 0f1f 	tst.w	sl, #31
    dfc6:	d115      	bne.n	dff4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    dfc8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    dfcc:	f01b 0f1f 	tst.w	fp, #31
    dfd0:	d110      	bne.n	dff4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    dfd2:	4658      	mov	r0, fp
    dfd4:	f010 f8a1 	bl	1e11a <arm_cmse_mpu_region_get>
    dfd8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    dfda:	eb0a 000b 	add.w	r0, sl, fp
    dfde:	3801      	subs	r0, #1
    dfe0:	f010 f89b 	bl	1e11a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    dfe4:	4287      	cmp	r7, r0
    dfe6:	d010      	beq.n	e00a <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    dfe8:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    dfec:	463a      	mov	r2, r7
    dfee:	2145      	movs	r1, #69	; 0x45
    dff0:	4848      	ldr	r0, [pc, #288]	; (e114 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    dff2:	e002      	b.n	dffa <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    dff4:	4642      	mov	r2, r8
    dff6:	2145      	movs	r1, #69	; 0x45
    dff8:	4847      	ldr	r0, [pc, #284]	; (e118 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    dffa:	f00e fccd 	bl	1c998 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    dffe:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e002:	4620      	mov	r0, r4
    e004:	b005      	add	sp, #20
    e006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e00a:	f117 0f16 	cmn.w	r7, #22
    e00e:	d0ed      	beq.n	dfec <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e010:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e012:	42bb      	cmp	r3, r7
    e014:	dbea      	blt.n	dfec <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e016:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e01a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e01e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e022:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e026:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e02a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e02e:	e9d6 3200 	ldrd	r3, r2, [r6]
    e032:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e034:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e036:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e03a:	d11d      	bne.n	e078 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e03c:	45d3      	cmp	fp, sl
    e03e:	d107      	bne.n	e050 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e040:	4631      	mov	r1, r6
    e042:	b2f8      	uxtb	r0, r7
    e044:	f7ff ff82 	bl	df4c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e048:	f108 0801 	add.w	r8, r8, #1
    e04c:	360c      	adds	r6, #12
    e04e:	e7ae      	b.n	dfae <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e050:	4631      	mov	r1, r6
	MPU->RNR = index;
    e052:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e056:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e05a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e05e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e062:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e064:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e068:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e06a:	f7ff ff6f 	bl	df4c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e06e:	f110 0f16 	cmn.w	r0, #22
    e072:	d0c4      	beq.n	dffe <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e074:	1c44      	adds	r4, r0, #1
    e076:	e7e7      	b.n	e048 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e078:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e07a:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e07c:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e07e:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e082:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e086:	d108      	bne.n	e09a <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e088:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e08c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e08e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e092:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e094:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e098:	e7e7      	b.n	e06a <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e09a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e09e:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e0a2:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e0a4:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e0a8:	4631      	mov	r1, r6
    e0aa:	f7ff ff4f 	bl	df4c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e0ae:	f110 0f16 	cmn.w	r0, #22
    e0b2:	d0a4      	beq.n	dffe <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e0b4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e0b8:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e0bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e0c0:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e0c4:	f362 0304 	bfi	r3, r2, #0, #5
    e0c8:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e0cc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e0d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e0d4:	085b      	lsrs	r3, r3, #1
    e0d6:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e0da:	e9d6 3100 	ldrd	r3, r1, [r6]
    e0de:	440b      	add	r3, r1
    e0e0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e0e2:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e0e6:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e0e8:	445b      	add	r3, fp
    e0ea:	eba3 030a 	sub.w	r3, r3, sl
    e0ee:	b2c0      	uxtb	r0, r0
    e0f0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e0f4:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e0f6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e0fa:	9303      	str	r3, [sp, #12]
    e0fc:	d903      	bls.n	e106 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e0fe:	4602      	mov	r2, r0
    e100:	2145      	movs	r1, #69	; 0x45
    e102:	4806      	ldr	r0, [pc, #24]	; (e11c <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e104:	e779      	b.n	dffa <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e106:	4669      	mov	r1, sp
    e108:	f7ff ff06 	bl	df18 <region_init>
    e10c:	e7b2      	b.n	e074 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e10e:	bf00      	nop
    e110:	e000ed00 	.word	0xe000ed00
    e114:	00023ecf 	.word	0x00023ecf
    e118:	00023ea7 	.word	0x00023ea7
    e11c:	00023e7c 	.word	0x00023e7c

0000e120 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e120:	2205      	movs	r2, #5
    e122:	4b04      	ldr	r3, [pc, #16]	; (e134 <arm_core_mpu_enable+0x14>)
    e124:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e12c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e130:	4770      	bx	lr
    e132:	bf00      	nop
    e134:	e000ed00 	.word	0xe000ed00

0000e138 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e138:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e13c:	2200      	movs	r2, #0
    e13e:	4b02      	ldr	r3, [pc, #8]	; (e148 <arm_core_mpu_disable+0x10>)
    e140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e144:	4770      	bx	lr
    e146:	bf00      	nop
    e148:	e000ed00 	.word	0xe000ed00

0000e14c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e14c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e14e:	4d1d      	ldr	r5, [pc, #116]	; (e1c4 <arm_mpu_init+0x78>)
    e150:	682c      	ldr	r4, [r5, #0]
    e152:	2c08      	cmp	r4, #8
    e154:	d90d      	bls.n	e172 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e156:	f240 123b 	movw	r2, #315	; 0x13b
    e15a:	491b      	ldr	r1, [pc, #108]	; (e1c8 <arm_mpu_init+0x7c>)
    e15c:	481b      	ldr	r0, [pc, #108]	; (e1cc <arm_mpu_init+0x80>)
    e15e:	f00e fc1b 	bl	1c998 <printk>
    e162:	4819      	ldr	r0, [pc, #100]	; (e1c8 <arm_mpu_init+0x7c>)
    e164:	f240 113b 	movw	r1, #315	; 0x13b
    e168:	f00e febc 	bl	1cee4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e16c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e170:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e172:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e174:	f7ff ffe0 	bl	e138 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e178:	4b15      	ldr	r3, [pc, #84]	; (e1d0 <arm_mpu_init+0x84>)
    e17a:	4a16      	ldr	r2, [pc, #88]	; (e1d4 <arm_mpu_init+0x88>)
    e17c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e180:	4284      	cmp	r4, r0
    e182:	d117      	bne.n	e1b4 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e184:	4b14      	ldr	r3, [pc, #80]	; (e1d8 <arm_mpu_init+0x8c>)
    e186:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e188:	f7ff ffca 	bl	e120 <arm_core_mpu_enable>
	__ASSERT(
    e18c:	4b10      	ldr	r3, [pc, #64]	; (e1d0 <arm_mpu_init+0x84>)
    e18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e192:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e196:	2b08      	cmp	r3, #8
    e198:	d00a      	beq.n	e1b0 <arm_mpu_init+0x64>
    e19a:	490b      	ldr	r1, [pc, #44]	; (e1c8 <arm_mpu_init+0x7c>)
    e19c:	480b      	ldr	r0, [pc, #44]	; (e1cc <arm_mpu_init+0x80>)
    e19e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e1a2:	f00e fbf9 	bl	1c998 <printk>
    e1a6:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e1aa:	4807      	ldr	r0, [pc, #28]	; (e1c8 <arm_mpu_init+0x7c>)
    e1ac:	f00e fe9a 	bl	1cee4 <assert_post_action>
	return 0;
    e1b0:	2000      	movs	r0, #0
    e1b2:	e7dd      	b.n	e170 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e1b4:	6869      	ldr	r1, [r5, #4]
    e1b6:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e1ba:	f7ff fead 	bl	df18 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e1be:	3001      	adds	r0, #1
    e1c0:	e7de      	b.n	e180 <arm_mpu_init+0x34>
    e1c2:	bf00      	nop
    e1c4:	00021ffc 	.word	0x00021ffc
    e1c8:	00023ef7 	.word	0x00023ef7
    e1cc:	00022dd6 	.word	0x00022dd6
    e1d0:	e000ed00 	.word	0xe000ed00
    e1d4:	0044ffaa 	.word	0x0044ffaa
    e1d8:	2000b647 	.word	0x2000b647

0000e1dc <arm_core_mpu_configure_static_mpu_regions>:
{
    e1dc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e1de:	4c0a      	ldr	r4, [pc, #40]	; (e208 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e1e0:	7822      	ldrb	r2, [r4, #0]
    e1e2:	f7ff fedb 	bl	df9c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e1e6:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e1e8:	3016      	adds	r0, #22
    e1ea:	d10c      	bne.n	e206 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e1ec:	4907      	ldr	r1, [pc, #28]	; (e20c <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e1ee:	4808      	ldr	r0, [pc, #32]	; (e210 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e1f0:	f44f 7282 	mov.w	r2, #260	; 0x104
    e1f4:	f00e fbd0 	bl	1c998 <printk>
}
    e1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e1fc:	f44f 7182 	mov.w	r1, #260	; 0x104
    e200:	4802      	ldr	r0, [pc, #8]	; (e20c <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e202:	f00e be6f 	b.w	1cee4 <assert_post_action>
}
    e206:	bd10      	pop	{r4, pc}
    e208:	2000b647 	.word	0x2000b647
    e20c:	00023ef7 	.word	0x00023ef7
    e210:	00022dd6 	.word	0x00022dd6

0000e214 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e218:	4d30      	ldr	r5, [pc, #192]	; (e2dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e21a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e21c:	4606      	mov	r6, r0
    e21e:	f04f 0800 	mov.w	r8, #0
    e222:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e224:	4f2e      	ldr	r7, [pc, #184]	; (e2e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e226:	45d0      	cmp	r8, sl
    e228:	db02      	blt.n	e230 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e22a:	b003      	add	sp, #12
    e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e230:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e234:	f1b9 0f00 	cmp.w	r9, #0
    e238:	d04a      	beq.n	e2d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e23a:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e23c:	4608      	mov	r0, r1
    e23e:	9101      	str	r1, [sp, #4]
    e240:	f00f ff6b 	bl	1e11a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e244:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e246:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e248:	eb09 0001 	add.w	r0, r9, r1
    e24c:	3801      	subs	r0, #1
    e24e:	f00f ff64 	bl	1e11a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e252:	4284      	cmp	r4, r0
    e254:	f04f 0214 	mov.w	r2, #20
    e258:	4b22      	ldr	r3, [pc, #136]	; (e2e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e25a:	d013      	beq.n	e284 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e25c:	f06f 0315 	mvn.w	r3, #21
    e260:	fb02 f808 	mul.w	r8, r2, r8
    e264:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e268:	f44f 728a 	mov.w	r2, #276	; 0x114
    e26c:	491e      	ldr	r1, [pc, #120]	; (e2e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e26e:	481f      	ldr	r0, [pc, #124]	; (e2ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e270:	f00e fb92 	bl	1c998 <printk>
    e274:	f44f 718a 	mov.w	r1, #276	; 0x114
    e278:	481b      	ldr	r0, [pc, #108]	; (e2e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e27a:	b003      	add	sp, #12
    e27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e280:	f00e be30 	b.w	1cee4 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e284:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e288:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e28a:	d0ed      	beq.n	e268 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e28c:	7819      	ldrb	r1, [r3, #0]
    e28e:	42a1      	cmp	r1, r4
    e290:	ddea      	ble.n	e268 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e292:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e296:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e29a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e29e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e2a2:	f100 0108 	add.w	r1, r0, #8
    e2a6:	7b00      	ldrb	r0, [r0, #12]
    e2a8:	f364 0004 	bfi	r0, r4, #0, #5
    e2ac:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e2ae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e2b2:	790c      	ldrb	r4, [r1, #4]
    e2b4:	0840      	lsrs	r0, r0, #1
    e2b6:	f360 1447 	bfi	r4, r0, #5, #3
    e2ba:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e2bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e2c0:	f021 011f 	bic.w	r1, r1, #31
    e2c4:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e2c6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e2ca:	f021 011f 	bic.w	r1, r1, #31
    e2ce:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e2d0:	f108 0801 	add.w	r8, r8, #1
    e2d4:	3514      	adds	r5, #20
    e2d6:	360c      	adds	r6, #12
    e2d8:	e7a5      	b.n	e226 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e2da:	bf00      	nop
    e2dc:	20009bd4 	.word	0x20009bd4
    e2e0:	e000ed00 	.word	0xe000ed00
    e2e4:	2000b647 	.word	0x2000b647
    e2e8:	00023ef7 	.word	0x00023ef7
    e2ec:	00022dd6 	.word	0x00022dd6

0000e2f0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e2f0:	4b01      	ldr	r3, [pc, #4]	; (e2f8 <__stdout_hook_install+0x8>)
    e2f2:	6018      	str	r0, [r3, #0]
}
    e2f4:	4770      	bx	lr
    e2f6:	bf00      	nop
    e2f8:	200082b4 	.word	0x200082b4

0000e2fc <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e2fc:	2000      	movs	r0, #0
    e2fe:	4b02      	ldr	r3, [pc, #8]	; (e308 <remoteproc_mgr_boot+0xc>)
    e300:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e304:	4770      	bx	lr
    e306:	bf00      	nop
    e308:	40005000 	.word	0x40005000

0000e30c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e30c:	4b0e      	ldr	r3, [pc, #56]	; (e348 <bt_hex_real+0x3c>)
    e30e:	2940      	cmp	r1, #64	; 0x40
    e310:	bf28      	it	cs
    e312:	2140      	movcs	r1, #64	; 0x40
{
    e314:	b570      	push	{r4, r5, r6, lr}
    e316:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e318:	4c0c      	ldr	r4, [pc, #48]	; (e34c <bt_hex_real+0x40>)
    e31a:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e31c:	42b0      	cmp	r0, r6
    e31e:	f103 0302 	add.w	r3, r3, #2
    e322:	d104      	bne.n	e32e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e324:	2300      	movs	r3, #0
    e326:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e32a:	4807      	ldr	r0, [pc, #28]	; (e348 <bt_hex_real+0x3c>)
    e32c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e32e:	7802      	ldrb	r2, [r0, #0]
    e330:	0912      	lsrs	r2, r2, #4
    e332:	5ca2      	ldrb	r2, [r4, r2]
    e334:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e338:	f810 2b01 	ldrb.w	r2, [r0], #1
    e33c:	f002 020f 	and.w	r2, r2, #15
    e340:	5ca2      	ldrb	r2, [r4, r2]
    e342:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e346:	e7e9      	b.n	e31c <bt_hex_real+0x10>
    e348:	2000b666 	.word	0x2000b666
    e34c:	00023f60 	.word	0x00023f60

0000e350 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e350:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e352:	7803      	ldrb	r3, [r0, #0]
    e354:	b08b      	sub	sp, #44	; 0x2c
    e356:	4604      	mov	r4, r0
    e358:	ad07      	add	r5, sp, #28
    e35a:	2b03      	cmp	r3, #3
    e35c:	d821      	bhi.n	e3a2 <bt_addr_le_str_real+0x52>
    e35e:	e8df f003 	tbb	[pc, r3]
    e362:	1a02      	.short	0x1a02
    e364:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e366:	4912      	ldr	r1, [pc, #72]	; (e3b0 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e368:	4628      	mov	r0, r5
    e36a:	f00f ff73 	bl	1e254 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e36e:	7863      	ldrb	r3, [r4, #1]
    e370:	211e      	movs	r1, #30
    e372:	9304      	str	r3, [sp, #16]
    e374:	78a3      	ldrb	r3, [r4, #2]
    e376:	4a0f      	ldr	r2, [pc, #60]	; (e3b4 <bt_addr_le_str_real+0x64>)
    e378:	9303      	str	r3, [sp, #12]
    e37a:	78e3      	ldrb	r3, [r4, #3]
    e37c:	9505      	str	r5, [sp, #20]
    e37e:	9302      	str	r3, [sp, #8]
    e380:	7923      	ldrb	r3, [r4, #4]
    e382:	480d      	ldr	r0, [pc, #52]	; (e3b8 <bt_addr_le_str_real+0x68>)
    e384:	9301      	str	r3, [sp, #4]
    e386:	7963      	ldrb	r3, [r4, #5]
    e388:	9300      	str	r3, [sp, #0]
    e38a:	79a3      	ldrb	r3, [r4, #6]
    e38c:	f00e fb11 	bl	1c9b2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e390:	4809      	ldr	r0, [pc, #36]	; (e3b8 <bt_addr_le_str_real+0x68>)
    e392:	b00b      	add	sp, #44	; 0x2c
    e394:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e396:	4909      	ldr	r1, [pc, #36]	; (e3bc <bt_addr_le_str_real+0x6c>)
    e398:	e7e6      	b.n	e368 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e39a:	4909      	ldr	r1, [pc, #36]	; (e3c0 <bt_addr_le_str_real+0x70>)
    e39c:	e7e4      	b.n	e368 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e39e:	4909      	ldr	r1, [pc, #36]	; (e3c4 <bt_addr_le_str_real+0x74>)
    e3a0:	e7e2      	b.n	e368 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e3a2:	210a      	movs	r1, #10
    e3a4:	4628      	mov	r0, r5
    e3a6:	4a08      	ldr	r2, [pc, #32]	; (e3c8 <bt_addr_le_str_real+0x78>)
    e3a8:	f00e fb03 	bl	1c9b2 <snprintk>
		break;
    e3ac:	e7df      	b.n	e36e <bt_addr_le_str_real+0x1e>
    e3ae:	bf00      	nop
    e3b0:	000227eb 	.word	0x000227eb
    e3b4:	00022814 	.word	0x00022814
    e3b8:	2000b648 	.word	0x2000b648
    e3bc:	000227f2 	.word	0x000227f2
    e3c0:	000227f9 	.word	0x000227f9
    e3c4:	00022803 	.word	0x00022803
    e3c8:	0002280d 	.word	0x0002280d

0000e3cc <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e3cc:	2149      	movs	r1, #73	; 0x49
{
    e3ce:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e3d0:	4809      	ldr	r0, [pc, #36]	; (e3f8 <save_id+0x2c>)
    e3d2:	f00e fae1 	bl	1c998 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e3d6:	4909      	ldr	r1, [pc, #36]	; (e3fc <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e3d8:	4809      	ldr	r0, [pc, #36]	; (e400 <save_id+0x34>)
    e3da:	79ca      	ldrb	r2, [r1, #7]
    e3dc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e3e0:	f7fd fb30 	bl	ba44 <settings_save_one>
	if (err) {
    e3e4:	4602      	mov	r2, r0
    e3e6:	b128      	cbz	r0, e3f4 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e3e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e3ec:	2145      	movs	r1, #69	; 0x45
    e3ee:	4805      	ldr	r0, [pc, #20]	; (e404 <save_id+0x38>)
    e3f0:	f00e bad2 	b.w	1c998 <printk>
}
    e3f4:	bd08      	pop	{r3, pc}
    e3f6:	bf00      	nop
    e3f8:	00023f78 	.word	0x00023f78
    e3fc:	20008000 	.word	0x20008000
    e400:	00023f87 	.word	0x00023f87
    e404:	00023f8d 	.word	0x00023f8d

0000e408 <set>:
{
    e408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e40a:	4616      	mov	r6, r2
    e40c:	461f      	mov	r7, r3
	if (!name) {
    e40e:	4604      	mov	r4, r0
    e410:	b930      	cbnz	r0, e420 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e412:	2145      	movs	r1, #69	; 0x45
    e414:	4819      	ldr	r0, [pc, #100]	; (e47c <set+0x74>)
    e416:	f00e fabf 	bl	1c998 <printk>
	return -ENOENT;
    e41a:	f06f 0401 	mvn.w	r4, #1
    e41e:	e013      	b.n	e448 <set+0x40>
	len = settings_name_next(name, &next);
    e420:	a901      	add	r1, sp, #4
    e422:	f00e ff73 	bl	1d30c <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e426:	4916      	ldr	r1, [pc, #88]	; (e480 <set+0x78>)
	len = settings_name_next(name, &next);
    e428:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e42a:	4620      	mov	r0, r4
    e42c:	f00f ff4a 	bl	1e2c4 <strncmp>
    e430:	4604      	mov	r4, r0
    e432:	2800      	cmp	r0, #0
    e434:	d1f1      	bne.n	e41a <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e436:	4d13      	ldr	r5, [pc, #76]	; (e484 <set+0x7c>)
    e438:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e43c:	075b      	lsls	r3, r3, #29
    e43e:	d506      	bpl.n	e44e <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e440:	2157      	movs	r1, #87	; 0x57
    e442:	4811      	ldr	r0, [pc, #68]	; (e488 <set+0x80>)
    e444:	f00e faa8 	bl	1c998 <printk>
}
    e448:	4620      	mov	r0, r4
    e44a:	b003      	add	sp, #12
    e44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e44e:	3d94      	subs	r5, #148	; 0x94
    e450:	2207      	movs	r2, #7
    e452:	4629      	mov	r1, r5
    e454:	4638      	mov	r0, r7
    e456:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e458:	2806      	cmp	r0, #6
    e45a:	d80a      	bhi.n	e472 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e45c:	2145      	movs	r1, #69	; 0x45
    e45e:	480b      	ldr	r0, [pc, #44]	; (e48c <set+0x84>)
    e460:	f00e fa9a 	bl	1c998 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e464:	2207      	movs	r2, #7
    e466:	4621      	mov	r1, r4
    e468:	4628      	mov	r0, r5
    e46a:	f00f ff78 	bl	1e35e <memset>
			bt_dev.id_count = 0U;
    e46e:	71ec      	strb	r4, [r5, #7]
    e470:	e7ea      	b.n	e448 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e472:	2307      	movs	r3, #7
    e474:	fbb0 f0f3 	udiv	r0, r0, r3
    e478:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e47a:	e7e5      	b.n	e448 <set+0x40>
    e47c:	00023fad 	.word	0x00023fad
    e480:	00022800 	.word	0x00022800
    e484:	20008094 	.word	0x20008094
    e488:	00023fd3 	.word	0x00023fd3
    e48c:	00023ffc 	.word	0x00023ffc

0000e490 <bt_settings_encode_key>:
{
    e490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e494:	b088      	sub	sp, #32
    e496:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e49a:	799c      	ldrb	r4, [r3, #6]
    e49c:	795d      	ldrb	r5, [r3, #5]
    e49e:	791e      	ldrb	r6, [r3, #4]
    e4a0:	78df      	ldrb	r7, [r3, #3]
    e4a2:	f893 c002 	ldrb.w	ip, [r3, #2]
    e4a6:	f893 e001 	ldrb.w	lr, [r3, #1]
    e4aa:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e4ac:	f1b8 0f00 	cmp.w	r8, #0
    e4b0:	d00e      	beq.n	e4d0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e4b2:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e4b6:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e4ba:	4613      	mov	r3, r2
    e4bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e4c0:	e9cd 4500 	strd	r4, r5, [sp]
    e4c4:	4a08      	ldr	r2, [pc, #32]	; (e4e8 <bt_settings_encode_key+0x58>)
    e4c6:	f00e fa74 	bl	1c9b2 <snprintk>
}
    e4ca:	b008      	add	sp, #32
    e4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e4d0:	e9cd e305 	strd	lr, r3, [sp, #20]
    e4d4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e4d8:	4613      	mov	r3, r2
    e4da:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e4de:	4a03      	ldr	r2, [pc, #12]	; (e4ec <bt_settings_encode_key+0x5c>)
    e4e0:	9400      	str	r4, [sp, #0]
    e4e2:	f00e fa66 	bl	1c9b2 <snprintk>
}
    e4e6:	e7f0      	b.n	e4ca <bt_settings_encode_key+0x3a>
    e4e8:	00024026 	.word	0x00024026
    e4ec:	0002404a 	.word	0x0002404a

0000e4f0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e4f0:	4907      	ldr	r1, [pc, #28]	; (e510 <bt_settings_save_id+0x20>)
    e4f2:	e8d1 3fef 	ldaex	r3, [r1]
    e4f6:	f043 0201 	orr.w	r2, r3, #1
    e4fa:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e4fe:	2800      	cmp	r0, #0
    e500:	d1f7      	bne.n	e4f2 <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e502:	07db      	lsls	r3, r3, #31
    e504:	d403      	bmi.n	e50e <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e506:	4803      	ldr	r0, [pc, #12]	; (e514 <bt_settings_save_id+0x24>)
    e508:	3908      	subs	r1, #8
    e50a:	f012 bf55 	b.w	213b8 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e50e:	4770      	bx	lr
    e510:	200082c0 	.word	0x200082c0
    e514:	20009630 	.word	0x20009630

0000e518 <commit>:

static int commit(void)
{
    e518:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e51a:	4c13      	ldr	r4, [pc, #76]	; (e568 <commit+0x50>)
    e51c:	79e3      	ldrb	r3, [r4, #7]
    e51e:	b96b      	cbnz	r3, e53c <commit+0x24>
		bt_setup_public_id_addr();
    e520:	f002 f80c 	bl	1053c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e524:	79e3      	ldrb	r3, [r4, #7]
    e526:	b94b      	cbnz	r3, e53c <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e528:	f002 f896 	bl	10658 <bt_setup_random_id_addr>
		if (err) {
    e52c:	4604      	mov	r4, r0
    e52e:	b128      	cbz	r0, e53c <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e530:	2145      	movs	r1, #69	; 0x45
    e532:	480e      	ldr	r0, [pc, #56]	; (e56c <commit+0x54>)
    e534:	f00e fa30 	bl	1c998 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e538:	4620      	mov	r0, r4
    e53a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e53c:	4d0c      	ldr	r5, [pc, #48]	; (e570 <commit+0x58>)
    e53e:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e542:	079b      	lsls	r3, r3, #30
    e544:	d401      	bmi.n	e54a <commit+0x32>
		bt_finalize_init();
    e546:	f001 ff1b 	bl	10380 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e54a:	e8d5 4fef 	ldaex	r4, [r5]
    e54e:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e552:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e556:	2a00      	cmp	r2, #0
    e558:	d1f7      	bne.n	e54a <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e55a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e55e:	d0eb      	beq.n	e538 <commit+0x20>
		bt_settings_save_id();
    e560:	f7ff ffc6 	bl	e4f0 <bt_settings_save_id>
	return 0;
    e564:	2400      	movs	r4, #0
    e566:	e7e7      	b.n	e538 <commit+0x20>
    e568:	20008000 	.word	0x20008000
    e56c:	0002406b 	.word	0x0002406b
    e570:	20008094 	.word	0x20008094

0000e574 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e574:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e576:	f7fd fbdb 	bl	bd30 <settings_subsys_init>
	if (err) {
    e57a:	4604      	mov	r4, r0
    e57c:	b120      	cbz	r0, e588 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e57e:	4602      	mov	r2, r0
    e580:	2145      	movs	r1, #69	; 0x45
    e582:	4802      	ldr	r0, [pc, #8]	; (e58c <bt_settings_init+0x18>)
    e584:	f00e fa08 	bl	1c998 <printk>
		return err;
	}

	return 0;
}
    e588:	4620      	mov	r0, r4
    e58a:	bd10      	pop	{r4, pc}
    e58c:	00024094 	.word	0x00024094

0000e590 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e590:	4603      	mov	r3, r0
    e592:	b430      	push	{r4, r5}
	switch (src->type) {
    e594:	781a      	ldrb	r2, [r3, #0]
{
    e596:	4608      	mov	r0, r1
	switch (src->type) {
    e598:	2a01      	cmp	r2, #1
    e59a:	d013      	beq.n	e5c4 <uuid_to_uuid128+0x34>
    e59c:	2a02      	cmp	r2, #2
    e59e:	d026      	beq.n	e5ee <uuid_to_uuid128+0x5e>
    e5a0:	b972      	cbnz	r2, e5c0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e5a2:	4a15      	ldr	r2, [pc, #84]	; (e5f8 <uuid_to_uuid128+0x68>)
    e5a4:	f102 0410 	add.w	r4, r2, #16
    e5a8:	f852 5b04 	ldr.w	r5, [r2], #4
    e5ac:	42a2      	cmp	r2, r4
    e5ae:	f841 5b04 	str.w	r5, [r1], #4
    e5b2:	d1f9      	bne.n	e5a8 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e5b4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e5b6:	7812      	ldrb	r2, [r2, #0]
    e5b8:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e5ba:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e5bc:	0a1b      	lsrs	r3, r3, #8
    e5be:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e5c0:	bc30      	pop	{r4, r5}
    e5c2:	4770      	bx	lr
		*dst = uuid128_base;
    e5c4:	4a0c      	ldr	r2, [pc, #48]	; (e5f8 <uuid_to_uuid128+0x68>)
    e5c6:	f102 0410 	add.w	r4, r2, #16
    e5ca:	f852 5b04 	ldr.w	r5, [r2], #4
    e5ce:	42a2      	cmp	r2, r4
    e5d0:	f841 5b04 	str.w	r5, [r1], #4
    e5d4:	d1f9      	bne.n	e5ca <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e5d6:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e5d8:	7812      	ldrb	r2, [r2, #0]
    e5da:	700a      	strb	r2, [r1, #0]
    e5dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e5e0:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e5e2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e5e4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e5e6:	0a1b      	lsrs	r3, r3, #8
    e5e8:	7382      	strb	r2, [r0, #14]
    e5ea:	7403      	strb	r3, [r0, #16]
}
    e5ec:	e7e8      	b.n	e5c0 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e5ee:	2211      	movs	r2, #17
}
    e5f0:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e5f2:	4619      	mov	r1, r3
    e5f4:	f00f be88 	b.w	1e308 <memcpy>
    e5f8:	000240cd 	.word	0x000240cd

0000e5fc <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e5fc:	2801      	cmp	r0, #1
{
    e5fe:	b570      	push	{r4, r5, r6, lr}
    e600:	4605      	mov	r5, r0
    e602:	4616      	mov	r6, r2
    e604:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e606:	d010      	beq.n	e62a <bt_buf_get_rx+0x2e>
    e608:	2803      	cmp	r0, #3
    e60a:	d00a      	beq.n	e622 <bt_buf_get_rx+0x26>
    e60c:	2805      	cmp	r0, #5
    e60e:	d008      	beq.n	e622 <bt_buf_get_rx+0x26>
    e610:	490c      	ldr	r1, [pc, #48]	; (e644 <bt_buf_get_rx+0x48>)
    e612:	480d      	ldr	r0, [pc, #52]	; (e648 <bt_buf_get_rx+0x4c>)
    e614:	2233      	movs	r2, #51	; 0x33
    e616:	f00e f9bf 	bl	1c998 <printk>
    e61a:	2133      	movs	r1, #51	; 0x33
    e61c:	4809      	ldr	r0, [pc, #36]	; (e644 <bt_buf_get_rx+0x48>)
    e61e:	f00e fc61 	bl	1cee4 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e622:	4632      	mov	r2, r6
    e624:	4623      	mov	r3, r4
    e626:	4809      	ldr	r0, [pc, #36]	; (e64c <bt_buf_get_rx+0x50>)
    e628:	e000      	b.n	e62c <bt_buf_get_rx+0x30>
    e62a:	4809      	ldr	r0, [pc, #36]	; (e650 <bt_buf_get_rx+0x54>)
    e62c:	f011 ffce 	bl	205cc <net_buf_alloc_fixed>
    e630:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e632:	b12c      	cbz	r4, e640 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e634:	2101      	movs	r1, #1
    e636:	f104 0008 	add.w	r0, r4, #8
    e63a:	f008 ffc5 	bl	175c8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e63e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e640:	4620      	mov	r0, r4
    e642:	bd70      	pop	{r4, r5, r6, pc}
    e644:	000240de 	.word	0x000240de
    e648:	00022dd6 	.word	0x00022dd6
    e64c:	20008594 	.word	0x20008594
    e650:	20008670 	.word	0x20008670

0000e654 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e654:	4602      	mov	r2, r0
    e656:	460b      	mov	r3, r1
    e658:	b570      	push	{r4, r5, r6, lr}
    e65a:	f04f 0120 	mov.w	r1, #32
    e65e:	f3ef 8511 	mrs	r5, BASEPRI
    e662:	f381 8811 	msr	BASEPRI, r1
    e666:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e66a:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e66c:	490b      	ldr	r1, [pc, #44]	; (e69c <bt_buf_get_cmd_complete+0x48>)
    e66e:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    e672:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
	__asm__ volatile(
    e676:	f385 8811 	msr	BASEPRI, r5
    e67a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e67e:	b924      	cbnz	r4, e68a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e684:	2001      	movs	r0, #1
    e686:	f7ff bfb9 	b.w	e5fc <bt_buf_get_rx>
    e68a:	2101      	movs	r1, #1
		buf->len = 0U;
    e68c:	81a0      	strh	r0, [r4, #12]
    e68e:	7521      	strb	r1, [r4, #20]
    e690:	f104 0008 	add.w	r0, r4, #8
    e694:	f008 ff98 	bl	175c8 <net_buf_simple_reserve>
}
    e698:	4620      	mov	r0, r4
    e69a:	bd70      	pop	{r4, r5, r6, pc}
    e69c:	20008000 	.word	0x20008000

0000e6a0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e6a0:	b570      	push	{r4, r5, r6, lr}
    e6a2:	4604      	mov	r4, r0
	switch (evt) {
    e6a4:	2c0f      	cmp	r4, #15
{
    e6a6:	460d      	mov	r5, r1
    e6a8:	4610      	mov	r0, r2
    e6aa:	4619      	mov	r1, r3
	switch (evt) {
    e6ac:	d805      	bhi.n	e6ba <bt_buf_get_evt+0x1a>
    e6ae:	2c0d      	cmp	r4, #13
    e6b0:	d912      	bls.n	e6d8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e6b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e6b6:	f7ff bfcd 	b.w	e654 <bt_buf_get_cmd_complete>
	switch (evt) {
    e6ba:	2c13      	cmp	r4, #19
    e6bc:	d10c      	bne.n	e6d8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e6be:	480b      	ldr	r0, [pc, #44]	; (e6ec <bt_buf_get_evt+0x4c>)
    e6c0:	f011 ff84 	bl	205cc <net_buf_alloc_fixed>
			if (buf) {
    e6c4:	4604      	mov	r4, r0
    e6c6:	b128      	cbz	r0, e6d4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e6c8:	2101      	movs	r1, #1
    e6ca:	3008      	adds	r0, #8
    e6cc:	f008 ff7c 	bl	175c8 <net_buf_simple_reserve>
    e6d0:	2301      	movs	r3, #1
    e6d2:	7523      	strb	r3, [r4, #20]
}
    e6d4:	4620      	mov	r0, r4
    e6d6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e6d8:	4602      	mov	r2, r0
    e6da:	460b      	mov	r3, r1
		if (discardable) {
    e6dc:	b10d      	cbz	r5, e6e2 <bt_buf_get_evt+0x42>
    e6de:	4804      	ldr	r0, [pc, #16]	; (e6f0 <bt_buf_get_evt+0x50>)
    e6e0:	e7ee      	b.n	e6c0 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e6e2:	2001      	movs	r0, #1
}
    e6e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e6e8:	f7ff bf88 	b.w	e5fc <bt_buf_get_rx>
    e6ec:	2000869c 	.word	0x2000869c
    e6f0:	200085ec 	.word	0x200085ec

0000e6f4 <bt_adv_foreach>:
{
    e6f4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    e6f6:	4801      	ldr	r0, [pc, #4]	; (e6fc <bt_adv_foreach+0x8>)
    e6f8:	4718      	bx	r3
    e6fa:	bf00      	nop
    e6fc:	20008018 	.word	0x20008018

0000e700 <le_dhkey_complete>:
	if (dh_key_cb) {
    e700:	4905      	ldr	r1, [pc, #20]	; (e718 <le_dhkey_complete+0x18>)
    e702:	680b      	ldr	r3, [r1, #0]
    e704:	b133      	cbz	r3, e714 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    e706:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    e708:	2000      	movs	r0, #0
    e70a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    e70c:	7811      	ldrb	r1, [r2, #0]
    e70e:	b901      	cbnz	r1, e712 <le_dhkey_complete+0x12>
    e710:	1c50      	adds	r0, r2, #1
    e712:	4718      	bx	r3
}
    e714:	4770      	bx	lr
    e716:	bf00      	nop
    e718:	20009c00 	.word	0x20009c00

0000e71c <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e71c:	6883      	ldr	r3, [r0, #8]
    e71e:	2157      	movs	r1, #87	; 0x57
    e720:	781a      	ldrb	r2, [r3, #0]
    e722:	4801      	ldr	r0, [pc, #4]	; (e728 <hci_data_buf_overflow+0xc>)
    e724:	f00e b938 	b.w	1c998 <printk>
    e728:	00024114 	.word	0x00024114

0000e72c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    e72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e72e:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e730:	2500      	movs	r5, #0
    e732:	4f09      	ldr	r7, [pc, #36]	; (e758 <id_find+0x2c>)
    e734:	79fb      	ldrb	r3, [r7, #7]
    e736:	b2ec      	uxtb	r4, r5
    e738:	42a3      	cmp	r3, r4
    e73a:	d802      	bhi.n	e742 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e73c:	f06f 0401 	mvn.w	r4, #1
    e740:	e008      	b.n	e754 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e742:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e746:	4630      	mov	r0, r6
    e748:	4439      	add	r1, r7
    e74a:	f00f ff0c 	bl	1e566 <bt_addr_le_cmp>
    e74e:	3501      	adds	r5, #1
    e750:	2800      	cmp	r0, #0
    e752:	d1ef      	bne.n	e734 <id_find+0x8>
}
    e754:	4620      	mov	r0, r4
    e756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e758:	20008000 	.word	0x20008000

0000e75c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e75c:	6843      	ldr	r3, [r0, #4]
{
    e75e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e760:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e762:	0558      	lsls	r0, r3, #21
    e764:	d502      	bpl.n	e76c <valid_adv_param+0x10>
		return false;
    e766:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    e768:	b003      	add	sp, #12
    e76a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e76c:	6922      	ldr	r2, [r4, #16]
    e76e:	b10a      	cbz	r2, e774 <valid_adv_param+0x18>
    e770:	07d9      	lsls	r1, r3, #31
    e772:	d5f8      	bpl.n	e766 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e774:	4d1a      	ldr	r5, [pc, #104]	; (e7e0 <valid_adv_param+0x84>)
    e776:	7820      	ldrb	r0, [r4, #0]
    e778:	79eb      	ldrb	r3, [r5, #7]
    e77a:	4283      	cmp	r3, r0
    e77c:	d9f3      	bls.n	e766 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e77e:	2300      	movs	r3, #0
    e780:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e784:	4669      	mov	r1, sp
    e786:	4428      	add	r0, r5
    e788:	9300      	str	r3, [sp, #0]
    e78a:	f8cd 3003 	str.w	r3, [sp, #3]
    e78e:	f00f feea 	bl	1e566 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    e792:	2800      	cmp	r0, #0
    e794:	d0e7      	beq.n	e766 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e796:	6860      	ldr	r0, [r4, #4]
    e798:	07c2      	lsls	r2, r0, #31
    e79a:	d406      	bmi.n	e7aa <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e79c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    e7a0:	2b08      	cmp	r3, #8
    e7a2:	d802      	bhi.n	e7aa <valid_adv_param+0x4e>
    e7a4:	68a3      	ldr	r3, [r4, #8]
    e7a6:	2b9f      	cmp	r3, #159	; 0x9f
    e7a8:	d9dd      	bls.n	e766 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e7aa:	f010 0f30 	tst.w	r0, #48	; 0x30
    e7ae:	d002      	beq.n	e7b6 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e7b0:	6923      	ldr	r3, [r4, #16]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d0d7      	beq.n	e766 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e7b6:	06c3      	lsls	r3, r0, #27
    e7b8:	d401      	bmi.n	e7be <valid_adv_param+0x62>
    e7ba:	6923      	ldr	r3, [r4, #16]
    e7bc:	b943      	cbnz	r3, e7d0 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    e7be:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e7c2:	429a      	cmp	r2, r3
    e7c4:	d8cf      	bhi.n	e766 <valid_adv_param+0xa>
    e7c6:	2a1f      	cmp	r2, #31
    e7c8:	d9cd      	bls.n	e766 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e7ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e7ce:	d8ca      	bhi.n	e766 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e7d0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e7d4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e7d8:	bf18      	it	ne
    e7da:	2001      	movne	r0, #1
    e7dc:	e7c4      	b.n	e768 <valid_adv_param+0xc>
    e7de:	bf00      	nop
    e7e0:	20008000 	.word	0x20008000

0000e7e4 <le_pkey_complete>:
{
    e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    e7e6:	6885      	ldr	r5, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e7e8:	f06f 0110 	mvn.w	r1, #16
    e7ec:	480e      	ldr	r0, [pc, #56]	; (e828 <le_pkey_complete+0x44>)
    e7ee:	f00f febd 	bl	1e56c <atomic_and>
	if (!evt->status) {
    e7f2:	782b      	ldrb	r3, [r5, #0]
    e7f4:	b943      	cbnz	r3, e808 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    e7f6:	1c69      	adds	r1, r5, #1
    e7f8:	2240      	movs	r2, #64	; 0x40
    e7fa:	480c      	ldr	r0, [pc, #48]	; (e82c <le_pkey_complete+0x48>)
    e7fc:	f00f fd84 	bl	1e308 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e800:	2108      	movs	r1, #8
    e802:	4809      	ldr	r0, [pc, #36]	; (e828 <le_pkey_complete+0x44>)
    e804:	f00f fe99 	bl	1e53a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e808:	4e09      	ldr	r6, [pc, #36]	; (e830 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    e80a:	4f08      	ldr	r7, [pc, #32]	; (e82c <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e80c:	6834      	ldr	r4, [r6, #0]
    e80e:	b90c      	cbnz	r4, e814 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    e810:	6034      	str	r4, [r6, #0]
}
    e812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    e814:	782a      	ldrb	r2, [r5, #0]
    e816:	6823      	ldr	r3, [r4, #0]
    e818:	2a00      	cmp	r2, #0
    e81a:	bf0c      	ite	eq
    e81c:	4638      	moveq	r0, r7
    e81e:	2000      	movne	r0, #0
    e820:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e822:	6864      	ldr	r4, [r4, #4]
    e824:	e7f3      	b.n	e80e <le_pkey_complete+0x2a>
    e826:	bf00      	nop
    e828:	20008094 	.word	0x20008094
    e82c:	2000b6e7 	.word	0x2000b6e7
    e830:	20009c04 	.word	0x20009c04

0000e834 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e834:	6883      	ldr	r3, [r0, #8]
{
    e836:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e838:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e83a:	4620      	mov	r0, r4
    e83c:	f002 fea0 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    e840:	b930      	cbnz	r0, e850 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e842:	4622      	mov	r2, r4
}
    e844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e848:	2145      	movs	r1, #69	; 0x45
    e84a:	4803      	ldr	r0, [pc, #12]	; (e858 <le_data_len_change+0x24>)
    e84c:	f00e b8a4 	b.w	1c998 <printk>
}
    e850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    e854:	f002 be70 	b.w	11538 <bt_conn_unref>
    e858:	00024141 	.word	0x00024141

0000e85c <hci_disconn_complete_prio>:
{
    e85c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e85e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    e860:	781a      	ldrb	r2, [r3, #0]
    e862:	b9aa      	cbnz	r2, e890 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e864:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e868:	4628      	mov	r0, r5
    e86a:	f002 fe89 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    e86e:	4604      	mov	r4, r0
    e870:	b930      	cbnz	r0, e880 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e872:	462a      	mov	r2, r5
}
    e874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e878:	2145      	movs	r1, #69	; 0x45
    e87a:	4806      	ldr	r0, [pc, #24]	; (e894 <hci_disconn_complete_prio+0x38>)
    e87c:	f00e b88c 	b.w	1c998 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e880:	2101      	movs	r1, #1
    e882:	f002 fe85 	bl	11590 <bt_conn_set_state>
	bt_conn_unref(conn);
    e886:	4620      	mov	r0, r4
}
    e888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    e88c:	f002 be54 	b.w	11538 <bt_conn_unref>
}
    e890:	bd38      	pop	{r3, r4, r5, pc}
    e892:	bf00      	nop
    e894:	0002416a 	.word	0x0002416a

0000e898 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e898:	2101      	movs	r1, #1
{
    e89a:	b508      	push	{r3, lr}
    e89c:	3008      	adds	r0, #8
    e89e:	f008 ffdd 	bl	1785c <net_buf_simple_pull_mem>
}
    e8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e8a6:	7802      	ldrb	r2, [r0, #0]
    e8a8:	2145      	movs	r1, #69	; 0x45
    e8aa:	4801      	ldr	r0, [pc, #4]	; (e8b0 <hci_hardware_error+0x18>)
    e8ac:	f00e b874 	b.w	1c998 <printk>
    e8b0:	00024195 	.word	0x00024195

0000e8b4 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    e8b4:	8981      	ldrh	r1, [r0, #12]
{
    e8b6:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e8b8:	6880      	ldr	r0, [r0, #8]
    e8ba:	f7ff fd27 	bl	e30c <bt_hex_real>
}
    e8be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e8c2:	4602      	mov	r2, r0
    e8c4:	2157      	movs	r1, #87	; 0x57
    e8c6:	4801      	ldr	r0, [pc, #4]	; (e8cc <hci_vendor_event+0x18>)
    e8c8:	f00e b866 	b.w	1c998 <printk>
    e8cc:	000241bc 	.word	0x000241bc

0000e8d0 <le_conn_update_complete>:
{
    e8d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    e8d2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    e8d4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e8d8:	4630      	mov	r0, r6
    e8da:	f002 fe51 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    e8de:	4604      	mov	r4, r0
    e8e0:	b938      	cbnz	r0, e8f2 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e8e2:	4632      	mov	r2, r6
    e8e4:	2145      	movs	r1, #69	; 0x45
    e8e6:	4821      	ldr	r0, [pc, #132]	; (e96c <le_conn_update_complete+0x9c>)
}
    e8e8:	b002      	add	sp, #8
    e8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e8ee:	f00e b853 	b.w	1c998 <printk>
	if (!evt->status) {
    e8f2:	782b      	ldrb	r3, [r5, #0]
    e8f4:	b9cb      	cbnz	r3, e92a <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    e8f6:	792a      	ldrb	r2, [r5, #4]
    e8f8:	78eb      	ldrb	r3, [r5, #3]
    e8fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e8fe:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    e902:	79aa      	ldrb	r2, [r5, #6]
    e904:	796b      	ldrb	r3, [r5, #5]
    e906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e90a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e90e:	79eb      	ldrb	r3, [r5, #7]
    e910:	7a2a      	ldrb	r2, [r5, #8]
    e912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e916:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    e91a:	f002 fc23 	bl	11164 <notify_le_param_updated>
	bt_conn_unref(conn);
    e91e:	4620      	mov	r0, r4
}
    e920:	b002      	add	sp, #8
    e922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    e926:	f002 be07 	b.w	11538 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e92a:	2b1a      	cmp	r3, #26
    e92c:	d1f7      	bne.n	e91e <le_conn_update_complete+0x4e>
    e92e:	78c3      	ldrb	r3, [r0, #3]
    e930:	2b01      	cmp	r3, #1
    e932:	d1f4      	bne.n	e91e <le_conn_update_complete+0x4e>
		   !atomic_test_and_set_bit(conn->flags,
    e934:	210a      	movs	r1, #10
    e936:	3004      	adds	r0, #4
    e938:	f00f fe0a 	bl	1e550 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    e93c:	2800      	cmp	r0, #0
    e93e:	d1ee      	bne.n	e91e <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    e940:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    e944:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    e946:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    e94a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    e94e:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    e950:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    e954:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    e958:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    e95c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    e960:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    e964:	f003 fc1c 	bl	121a0 <bt_l2cap_update_conn_param>
    e968:	e7d9      	b.n	e91e <le_conn_update_complete+0x4e>
    e96a:	bf00      	nop
    e96c:	00024141 	.word	0x00024141

0000e970 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e970:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    e972:	7803      	ldrb	r3, [r0, #0]
{
    e974:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    e976:	f88d 3004 	strb.w	r3, [sp, #4]
    e97a:	2300      	movs	r3, #0
{
    e97c:	4605      	mov	r5, r0
    e97e:	460f      	mov	r7, r1
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    e980:	4822      	ldr	r0, [pc, #136]	; (ea0c <le_adv_start_add_conn+0x9c>)
    e982:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    e984:	f88d 3005 	strb.w	r3, [sp, #5]
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    e988:	f7ff feb4 	bl	e6f4 <bt_adv_foreach>
	if (check_data.adv_enabled) {
    e98c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e990:	bb9b      	cbnz	r3, e9fa <le_adv_start_add_conn+0x8a>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    e992:	462e      	mov	r6, r5
    e994:	4a1e      	ldr	r2, [pc, #120]	; (ea10 <le_adv_start_add_conn+0xa0>)
    e996:	f816 1b09 	ldrb.w	r1, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e99a:	9302      	str	r3, [sp, #8]
	bt_dev.adv_conn_id = adv->id;
    e99c:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e9a0:	4630      	mov	r0, r6
    e9a2:	a902      	add	r1, sp, #8
    e9a4:	f8cd 300b 	str.w	r3, [sp, #11]
    e9a8:	f00f fddd 	bl	1e566 <bt_addr_le_cmp>
    e9ac:	782a      	ldrb	r2, [r5, #0]
    e9ae:	4604      	mov	r4, r0
    e9b0:	b9a8      	cbnz	r0, e9de <le_adv_start_add_conn+0x6e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e9b2:	4b18      	ldr	r3, [pc, #96]	; (ea14 <le_adv_start_add_conn+0xa4>)
    e9b4:	6818      	ldr	r0, [r3, #0]
    e9b6:	8899      	ldrh	r1, [r3, #4]
    e9b8:	799b      	ldrb	r3, [r3, #6]
    e9ba:	9004      	str	r0, [sp, #16]
    e9bc:	f8ad 1014 	strh.w	r1, [sp, #20]
    e9c0:	4610      	mov	r0, r2
    e9c2:	a904      	add	r1, sp, #16
    e9c4:	f88d 3016 	strb.w	r3, [sp, #22]
    e9c8:	f002 fd88 	bl	114dc <bt_conn_add_le>
		if (!conn) {
    e9cc:	4605      	mov	r5, r0
    e9ce:	b1d0      	cbz	r0, ea06 <le_adv_start_add_conn+0x96>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    e9d0:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e9d2:	f002 fddd 	bl	11590 <bt_conn_set_state>
	*out_conn = conn;
    e9d6:	603d      	str	r5, [r7, #0]
	return 0;
}
    e9d8:	4620      	mov	r0, r4
    e9da:	b007      	add	sp, #28
    e9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e9de:	4631      	mov	r1, r6
    e9e0:	4610      	mov	r0, r2
    e9e2:	f002 feeb 	bl	117bc <bt_conn_exists_le>
    e9e6:	4604      	mov	r4, r0
    e9e8:	b950      	cbnz	r0, ea00 <le_adv_start_add_conn+0x90>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e9ea:	7828      	ldrb	r0, [r5, #0]
    e9ec:	4631      	mov	r1, r6
    e9ee:	f002 fd75 	bl	114dc <bt_conn_add_le>
	if (!conn) {
    e9f2:	4605      	mov	r5, r0
    e9f4:	b138      	cbz	r0, ea06 <le_adv_start_add_conn+0x96>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e9f6:	2105      	movs	r1, #5
    e9f8:	e7eb      	b.n	e9d2 <le_adv_start_add_conn+0x62>
		return -ENOTSUP;
    e9fa:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e9fe:	e7eb      	b.n	e9d8 <le_adv_start_add_conn+0x68>
		return -EINVAL;
    ea00:	f06f 0415 	mvn.w	r4, #21
    ea04:	e7e8      	b.n	e9d8 <le_adv_start_add_conn+0x68>
		return -ENOMEM;
    ea06:	f06f 040b 	mvn.w	r4, #11
    ea0a:	e7e5      	b.n	e9d8 <le_adv_start_add_conn+0x68>
    ea0c:	0001e5cb 	.word	0x0001e5cb
    ea10:	20008000 	.word	0x20008000
    ea14:	00021bf4 	.word	0x00021bf4

0000ea18 <update_sec_level.part.0>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    ea18:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static void update_sec_level(struct bt_conn *conn)
    ea1c:	b510      	push	{r4, lr}
    ea1e:	4604      	mov	r4, r0
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    ea20:	b1cb      	cbz	r3, ea56 <update_sec_level.part.0+0x3e>
    ea22:	7b5a      	ldrb	r2, [r3, #13]
    ea24:	07d1      	lsls	r1, r2, #31
    ea26:	d516      	bpl.n	ea56 <update_sec_level.part.0+0x3e>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    ea28:	06d2      	lsls	r2, r2, #27
    ea2a:	d512      	bpl.n	ea52 <update_sec_level.part.0+0x3a>
    ea2c:	7b1b      	ldrb	r3, [r3, #12]
    ea2e:	2b10      	cmp	r3, #16
    ea30:	d10f      	bne.n	ea52 <update_sec_level.part.0+0x3a>
			conn->sec_level = BT_SECURITY_L4;
    ea32:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    ea34:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    ea36:	7aa2      	ldrb	r2, [r4, #10]
    ea38:	7a63      	ldrb	r3, [r4, #9]
    ea3a:	429a      	cmp	r2, r3
    ea3c:	d90d      	bls.n	ea5a <update_sec_level.part.0+0x42>
		BT_ERR("Failed to set required security level");
    ea3e:	2145      	movs	r1, #69	; 0x45
    ea40:	4806      	ldr	r0, [pc, #24]	; (ea5c <update_sec_level.part.0+0x44>)
    ea42:	f00d ffa9 	bl	1c998 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    ea46:	4620      	mov	r0, r4
}
    ea48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    ea4c:	2105      	movs	r1, #5
    ea4e:	f003 b839 	b.w	11ac4 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    ea52:	2303      	movs	r3, #3
    ea54:	e7ee      	b.n	ea34 <update_sec_level.part.0+0x1c>
		conn->sec_level = BT_SECURITY_L2;
    ea56:	2302      	movs	r3, #2
    ea58:	e7ec      	b.n	ea34 <update_sec_level.part.0+0x1c>
}
    ea5a:	bd10      	pop	{r4, pc}
    ea5c:	000241e5 	.word	0x000241e5

0000ea60 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ea60:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ea62:	4c0c      	ldr	r4, [pc, #48]	; (ea94 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ea64:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ea66:	2205      	movs	r2, #5
    ea68:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ea6c:	f002 fec2 	bl	117f4 <bt_conn_lookup_state_le>
		if (!conn) {
    ea70:	b970      	cbnz	r0, ea90 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    ea72:	4b09      	ldr	r3, [pc, #36]	; (ea98 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ea74:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    ea76:	6818      	ldr	r0, [r3, #0]
    ea78:	889a      	ldrh	r2, [r3, #4]
    ea7a:	799b      	ldrb	r3, [r3, #6]
    ea7c:	9000      	str	r0, [sp, #0]
    ea7e:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ea82:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ea86:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    ea88:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ea8c:	f002 feb2 	bl	117f4 <bt_conn_lookup_state_le>
}
    ea90:	b002      	add	sp, #8
    ea92:	bd10      	pop	{r4, pc}
    ea94:	20008000 	.word	0x20008000
    ea98:	00021bf4 	.word	0x00021bf4

0000ea9c <handle_event>:
{
    ea9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ea9e:	4605      	mov	r5, r0
    eaa0:	4614      	mov	r4, r2
    eaa2:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    eaa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    eaa8:	7822      	ldrb	r2, [r4, #0]
    eaaa:	42aa      	cmp	r2, r5
    eaac:	d010      	beq.n	ead0 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    eaae:	3408      	adds	r4, #8
    eab0:	429c      	cmp	r4, r3
    eab2:	d1f9      	bne.n	eaa8 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    eab4:	8984      	ldrh	r4, [r0, #12]
    eab6:	6880      	ldr	r0, [r0, #8]
    eab8:	4621      	mov	r1, r4
    eaba:	f7ff fc27 	bl	e30c <bt_hex_real>
    eabe:	4623      	mov	r3, r4
    eac0:	9000      	str	r0, [sp, #0]
    eac2:	462a      	mov	r2, r5
    eac4:	2157      	movs	r1, #87	; 0x57
    eac6:	480b      	ldr	r0, [pc, #44]	; (eaf4 <handle_event+0x58>)
    eac8:	f00d ff66 	bl	1c998 <printk>
}
    eacc:	b003      	add	sp, #12
    eace:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    ead0:	8982      	ldrh	r2, [r0, #12]
    ead2:	7863      	ldrb	r3, [r4, #1]
    ead4:	4293      	cmp	r3, r2
    ead6:	d907      	bls.n	eae8 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ead8:	462b      	mov	r3, r5
    eada:	2145      	movs	r1, #69	; 0x45
    eadc:	4806      	ldr	r0, [pc, #24]	; (eaf8 <handle_event+0x5c>)
}
    eade:	b003      	add	sp, #12
    eae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    eae4:	f00d bf58 	b.w	1c998 <printk>
		handler->handler(buf);
    eae8:	6863      	ldr	r3, [r4, #4]
}
    eaea:	b003      	add	sp, #12
    eaec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    eaf0:	4718      	bx	r3
    eaf2:	bf00      	nop
    eaf4:	00024237 	.word	0x00024237
    eaf8:	00024210 	.word	0x00024210

0000eafc <hci_le_meta_event>:
{
    eafc:	b510      	push	{r4, lr}
    eafe:	2101      	movs	r1, #1
    eb00:	4604      	mov	r4, r0
    eb02:	3008      	adds	r0, #8
    eb04:	f008 feaa 	bl	1785c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    eb08:	4621      	mov	r1, r4
}
    eb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    eb0e:	230b      	movs	r3, #11
    eb10:	4a01      	ldr	r2, [pc, #4]	; (eb18 <hci_le_meta_event+0x1c>)
    eb12:	7800      	ldrb	r0, [r0, #0]
    eb14:	f7ff bfc2 	b.w	ea9c <handle_event>
    eb18:	00022064 	.word	0x00022064

0000eb1c <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    eb1c:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eb1e:	4d18      	ldr	r5, [pc, #96]	; (eb80 <id_create.constprop.0+0x64>)
    eb20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    eb24:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    eb26:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eb28:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    eb2a:	b1b1      	cbz	r1, eb5a <id_create.constprop.0+0x3e>
    eb2c:	2300      	movs	r3, #0
    eb2e:	4620      	mov	r0, r4
    eb30:	a902      	add	r1, sp, #8
    eb32:	9302      	str	r3, [sp, #8]
    eb34:	f8cd 300b 	str.w	r3, [sp, #11]
    eb38:	f00f fd15 	bl	1e566 <bt_addr_le_cmp>
    eb3c:	b168      	cbz	r0, eb5a <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    eb3e:	4621      	mov	r1, r4
    eb40:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    eb42:	f00f fcf7 	bl	1e534 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eb46:	480f      	ldr	r0, [pc, #60]	; (eb84 <id_create.constprop.0+0x68>)
    eb48:	f00f fcf1 	bl	1e52e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    eb4c:	0783      	lsls	r3, r0, #30
    eb4e:	d515      	bpl.n	eb7c <id_create.constprop.0+0x60>
}
    eb50:	b005      	add	sp, #20
    eb52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    eb56:	f7ff bccb 	b.w	e4f0 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    eb5a:	4668      	mov	r0, sp
    eb5c:	f00f fcb8 	bl	1e4d0 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    eb60:	4668      	mov	r0, sp
    eb62:	f7ff fde3 	bl	e72c <id_find>
    eb66:	2800      	cmp	r0, #0
    eb68:	daf7      	bge.n	eb5a <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eb6a:	4669      	mov	r1, sp
    eb6c:	4628      	mov	r0, r5
    eb6e:	f00f fce1 	bl	1e534 <bt_addr_le_copy>
		if (addr) {
    eb72:	2c00      	cmp	r4, #0
    eb74:	d0e7      	beq.n	eb46 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    eb76:	4629      	mov	r1, r5
    eb78:	4620      	mov	r0, r4
    eb7a:	e7e2      	b.n	eb42 <id_create.constprop.0+0x26>
}
    eb7c:	b005      	add	sp, #20
    eb7e:	bd30      	pop	{r4, r5, pc}
    eb80:	20008000 	.word	0x20008000
    eb84:	20008094 	.word	0x20008094

0000eb88 <hci_rx_thread>:
{
    eb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    eb8c:	4f40      	ldr	r7, [pc, #256]	; (ec90 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    eb8e:	f8df 8104 	ldr.w	r8, [pc, #260]	; ec94 <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    eb92:	4e41      	ldr	r6, [pc, #260]	; (ec98 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    eb94:	f04f 32ff 	mov.w	r2, #4294967295
    eb98:	f04f 33ff 	mov.w	r3, #4294967295
    eb9c:	4638      	mov	r0, r7
    eb9e:	f008 fce3 	bl	17568 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    eba2:	7d02      	ldrb	r2, [r0, #20]
    eba4:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    eba6:	2a01      	cmp	r2, #1
    eba8:	d041      	beq.n	ec2e <hci_rx_thread+0xa6>
    ebaa:	2a03      	cmp	r2, #3
    ebac:	d16c      	bne.n	ec88 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ebae:	8983      	ldrh	r3, [r0, #12]
    ebb0:	2b03      	cmp	r3, #3
    ebb2:	d80b      	bhi.n	ebcc <hci_rx_thread+0x44>
    ebb4:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ebb8:	4631      	mov	r1, r6
    ebba:	4838      	ldr	r0, [pc, #224]	; (ec9c <hci_rx_thread+0x114>)
    ebbc:	f00d feec 	bl	1c998 <printk>
    ebc0:	4040      	eors	r0, r0
    ebc2:	f380 8811 	msr	BASEPRI, r0
    ebc6:	f04f 0003 	mov.w	r0, #3
    ebca:	df02      	svc	2
    ebcc:	2104      	movs	r1, #4
    ebce:	f104 0008 	add.w	r0, r4, #8
    ebd2:	f008 fe43 	bl	1785c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ebd6:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ebd8:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ebda:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ebde:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ebe0:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ebe2:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ebe6:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ebe8:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ebea:	d007      	beq.n	ebfc <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ebec:	2145      	movs	r1, #69	; 0x45
    ebee:	482c      	ldr	r0, [pc, #176]	; (eca0 <hci_rx_thread+0x118>)
    ebf0:	f00d fed2 	bl	1c998 <printk>
			net_buf_unref(buf);
    ebf4:	4620      	mov	r0, r4
    ebf6:	f008 fd39 	bl	1766c <net_buf_unref>
			break;
    ebfa:	e015      	b.n	ec28 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ebfc:	f002 fcc0 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    ec00:	4605      	mov	r5, r0
    ec02:	b928      	cbnz	r0, ec10 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ec04:	2145      	movs	r1, #69	; 0x45
    ec06:	8ae2      	ldrh	r2, [r4, #22]
    ec08:	4826      	ldr	r0, [pc, #152]	; (eca4 <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ec0a:	f00d fec5 	bl	1c998 <printk>
    ec0e:	e7f1      	b.n	ebf4 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ec10:	f003 f8ec 	bl	11dec <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ec14:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ec16:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ec18:	ea4f 3219 	mov.w	r2, r9, lsr #12
    ec1c:	4628      	mov	r0, r5
    ec1e:	f002 fb67 	bl	112f0 <bt_conn_recv>
	bt_conn_unref(conn);
    ec22:	4628      	mov	r0, r5
    ec24:	f002 fc88 	bl	11538 <bt_conn_unref>
	z_impl_k_yield();
    ec28:	f00c fbb4 	bl	1b394 <z_impl_k_yield>
	while (1) {
    ec2c:	e7b2      	b.n	eb94 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ec2e:	8983      	ldrh	r3, [r0, #12]
    ec30:	2b01      	cmp	r3, #1
    ec32:	d80b      	bhi.n	ec4c <hci_rx_thread+0xc4>
    ec34:	f241 32fb 	movw	r2, #5115	; 0x13fb
    ec38:	4631      	mov	r1, r6
    ec3a:	4818      	ldr	r0, [pc, #96]	; (ec9c <hci_rx_thread+0x114>)
    ec3c:	f00d feac 	bl	1c998 <printk>
    ec40:	4040      	eors	r0, r0
    ec42:	f380 8811 	msr	BASEPRI, r0
    ec46:	f04f 0003 	mov.w	r0, #3
    ec4a:	df02      	svc	2
    ec4c:	2102      	movs	r1, #2
    ec4e:	f104 0008 	add.w	r0, r4, #8
    ec52:	f008 fe03 	bl	1785c <net_buf_simple_pull_mem>
    ec56:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ec58:	7800      	ldrb	r0, [r0, #0]
    ec5a:	f00f fc47 	bl	1e4ec <bt_hci_evt_get_flags>
    ec5e:	0783      	lsls	r3, r0, #30
    ec60:	d40b      	bmi.n	ec7a <hci_rx_thread+0xf2>
    ec62:	f241 32ff 	movw	r2, #5119	; 0x13ff
    ec66:	4631      	mov	r1, r6
    ec68:	480c      	ldr	r0, [pc, #48]	; (ec9c <hci_rx_thread+0x114>)
    ec6a:	f00d fe95 	bl	1c998 <printk>
    ec6e:	4040      	eors	r0, r0
    ec70:	f380 8811 	msr	BASEPRI, r0
    ec74:	f04f 0003 	mov.w	r0, #3
    ec78:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ec7a:	2306      	movs	r3, #6
    ec7c:	4642      	mov	r2, r8
    ec7e:	4621      	mov	r1, r4
    ec80:	7828      	ldrb	r0, [r5, #0]
    ec82:	f7ff ff0b 	bl	ea9c <handle_event>
	net_buf_unref(buf);
    ec86:	e7b5      	b.n	ebf4 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ec88:	2145      	movs	r1, #69	; 0x45
    ec8a:	4807      	ldr	r0, [pc, #28]	; (eca8 <hci_rx_thread+0x120>)
    ec8c:	e7bd      	b.n	ec0a <hci_rx_thread+0x82>
    ec8e:	bf00      	nop
    ec90:	20008104 	.word	0x20008104
    ec94:	000220cc 	.word	0x000220cc
    ec98:	0002425e 	.word	0x0002425e
    ec9c:	00022dd6 	.word	0x00022dd6
    eca0:	00024292 	.word	0x00024292
    eca4:	000242bb 	.word	0x000242bb
    eca8:	000242e2 	.word	0x000242e2

0000ecac <hci_cmd_done>:
{
    ecac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ecb0:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ecb2:	7990      	ldrb	r0, [r2, #6]
{
    ecb4:	460f      	mov	r7, r1
    ecb6:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ecb8:	f008 fb58 	bl	1736c <net_buf_pool_get>
    ecbc:	4d2a      	ldr	r5, [pc, #168]	; (ed68 <hci_cmd_done+0xbc>)
    ecbe:	4285      	cmp	r5, r0
    ecc0:	d00e      	beq.n	ece0 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ecc2:	79a4      	ldrb	r4, [r4, #6]
    ecc4:	4620      	mov	r0, r4
    ecc6:	f008 fb51 	bl	1736c <net_buf_pool_get>
    ecca:	4623      	mov	r3, r4
    eccc:	e9cd 0500 	strd	r0, r5, [sp]
    ecd0:	4632      	mov	r2, r6
    ecd2:	2157      	movs	r1, #87	; 0x57
    ecd4:	4825      	ldr	r0, [pc, #148]	; (ed6c <hci_cmd_done+0xc0>)
    ecd6:	f00d fe5f 	bl	1c998 <printk>
}
    ecda:	b002      	add	sp, #8
    ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ece0:	4620      	mov	r0, r4
    ece2:	f008 fb4b 	bl	1737c <net_buf_id>
    ece6:	f04f 080c 	mov.w	r8, #12
    ecea:	4d21      	ldr	r5, [pc, #132]	; (ed70 <hci_cmd_done+0xc4>)
    ecec:	fb08 5000 	mla	r0, r8, r0, r5
    ecf0:	8843      	ldrh	r3, [r0, #2]
    ecf2:	42b3      	cmp	r3, r6
    ecf4:	d00a      	beq.n	ed0c <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ecf6:	4620      	mov	r0, r4
    ecf8:	f008 fb40 	bl	1737c <net_buf_id>
    ecfc:	fb08 5000 	mla	r0, r8, r0, r5
    ed00:	4632      	mov	r2, r6
    ed02:	8843      	ldrh	r3, [r0, #2]
    ed04:	2157      	movs	r1, #87	; 0x57
    ed06:	481b      	ldr	r0, [pc, #108]	; (ed74 <hci_cmd_done+0xc8>)
    ed08:	f00d fe46 	bl	1c998 <printk>
	if (cmd(buf)->state && !status) {
    ed0c:	4620      	mov	r0, r4
    ed0e:	f008 fb35 	bl	1737c <net_buf_id>
    ed12:	260c      	movs	r6, #12
    ed14:	fb06 5000 	mla	r0, r6, r0, r5
    ed18:	6843      	ldr	r3, [r0, #4]
    ed1a:	b15b      	cbz	r3, ed34 <hci_cmd_done+0x88>
    ed1c:	b957      	cbnz	r7, ed34 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ed1e:	4620      	mov	r0, r4
    ed20:	f008 fb2c 	bl	1737c <net_buf_id>
    ed24:	fb06 5000 	mla	r0, r6, r0, r5
    ed28:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ed2a:	7a1a      	ldrb	r2, [r3, #8]
    ed2c:	e9d3 0100 	ldrd	r0, r1, [r3]
    ed30:	f00f fc27 	bl	1e582 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    ed34:	4620      	mov	r0, r4
    ed36:	f008 fb21 	bl	1737c <net_buf_id>
    ed3a:	260c      	movs	r6, #12
    ed3c:	fb06 5000 	mla	r0, r6, r0, r5
    ed40:	6883      	ldr	r3, [r0, #8]
    ed42:	2b00      	cmp	r3, #0
    ed44:	d0c9      	beq.n	ecda <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    ed46:	4620      	mov	r0, r4
    ed48:	f008 fb18 	bl	1737c <net_buf_id>
    ed4c:	4370      	muls	r0, r6
    ed4e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ed50:	4620      	mov	r0, r4
    ed52:	f008 fb13 	bl	1737c <net_buf_id>
    ed56:	fb06 5500 	mla	r5, r6, r0, r5
    ed5a:	68a8      	ldr	r0, [r5, #8]
}
    ed5c:	b002      	add	sp, #8
    ed5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    ed62:	f00c bc59 	b.w	1b618 <z_impl_k_sem_give>
    ed66:	bf00      	nop
    ed68:	20008644 	.word	0x20008644
    ed6c:	000242fb 	.word	0x000242fb
    ed70:	20009be8 	.word	0x20009be8
    ed74:	00024335 	.word	0x00024335

0000ed78 <hci_cmd_status>:
{
    ed78:	b538      	push	{r3, r4, r5, lr}
    ed7a:	2104      	movs	r1, #4
    ed7c:	4604      	mov	r4, r0
    ed7e:	3008      	adds	r0, #8
    ed80:	f008 fd6c 	bl	1785c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    ed84:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ed86:	7801      	ldrb	r1, [r0, #0]
    ed88:	4622      	mov	r2, r4
    ed8a:	8840      	ldrh	r0, [r0, #2]
    ed8c:	f7ff ff8e 	bl	ecac <hci_cmd_done>
	if (ncmd) {
    ed90:	b125      	cbz	r5, ed9c <hci_cmd_status+0x24>
}
    ed92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ed96:	4802      	ldr	r0, [pc, #8]	; (eda0 <hci_cmd_status+0x28>)
    ed98:	f00c bc3e 	b.w	1b618 <z_impl_k_sem_give>
    ed9c:	bd38      	pop	{r3, r4, r5, pc}
    ed9e:	bf00      	nop
    eda0:	200080e8 	.word	0x200080e8

0000eda4 <hci_cmd_complete>:
{
    eda4:	b538      	push	{r3, r4, r5, lr}
    eda6:	2103      	movs	r1, #3
    eda8:	4604      	mov	r4, r0
    edaa:	3008      	adds	r0, #8
    edac:	f008 fd56 	bl	1785c <net_buf_simple_pull_mem>
	status = buf->data[0];
    edb0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    edb2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    edb4:	4622      	mov	r2, r4
    edb6:	7819      	ldrb	r1, [r3, #0]
    edb8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    edbc:	f7ff ff76 	bl	ecac <hci_cmd_done>
	if (ncmd) {
    edc0:	b125      	cbz	r5, edcc <hci_cmd_complete+0x28>
}
    edc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    edc6:	4802      	ldr	r0, [pc, #8]	; (edd0 <hci_cmd_complete+0x2c>)
    edc8:	f00c bc26 	b.w	1b618 <z_impl_k_sem_give>
    edcc:	bd38      	pop	{r3, r4, r5, pc}
    edce:	bf00      	nop
    edd0:	200080e8 	.word	0x200080e8

0000edd4 <hci_num_completed_packets>:
{
    edd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    edd8:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    edda:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    eddc:	6887      	ldr	r7, [r0, #8]
    edde:	f8df 90dc 	ldr.w	r9, [pc, #220]	; eebc <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ede2:	783b      	ldrb	r3, [r7, #0]
    ede4:	429d      	cmp	r5, r3
    ede6:	db01      	blt.n	edec <hci_num_completed_packets+0x18>
}
    ede8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    edec:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    edf0:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    edf4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    edf8:	4650      	mov	r0, sl
    edfa:	f002 fbc1 	bl	11580 <bt_conn_lookup_handle>
		if (!conn) {
    edfe:	4604      	mov	r4, r0
    ee00:	b1d0      	cbz	r0, ee38 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ee02:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ee06:	b37e      	cbz	r6, ee68 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    ee08:	f04f 0320 	mov.w	r3, #32
    ee0c:	f3ef 8211 	mrs	r2, BASEPRI
    ee10:	f383 8811 	msr	BASEPRI, r3
    ee14:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ee18:	69e3      	ldr	r3, [r4, #28]
    ee1a:	b1a3      	cbz	r3, ee46 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    ee1c:	3b01      	subs	r3, #1
    ee1e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ee20:	f382 8811 	msr	BASEPRI, r2
    ee24:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ee28:	4620      	mov	r0, r4
    ee2a:	f002 f997 	bl	1115c <bt_conn_get_pkts>
    ee2e:	3e01      	subs	r6, #1
    ee30:	f00c fbf2 	bl	1b618 <z_impl_k_sem_give>
    ee34:	b2b6      	uxth	r6, r6
    ee36:	e7e6      	b.n	ee06 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    ee38:	4652      	mov	r2, sl
    ee3a:	2145      	movs	r1, #69	; 0x45
    ee3c:	4820      	ldr	r0, [pc, #128]	; (eec0 <hci_num_completed_packets+0xec>)
    ee3e:	f00d fdab 	bl	1c998 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    ee42:	3501      	adds	r5, #1
    ee44:	e7cd      	b.n	ede2 <hci_num_completed_packets+0xe>
	return list->head;
    ee46:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ee48:	b12b      	cbz	r3, ee56 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ee4a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ee4c:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ee4e:	428b      	cmp	r3, r1
	list->head = node;
    ee50:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ee52:	bf08      	it	eq
    ee54:	61a0      	streq	r0, [r4, #24]
    ee56:	f382 8811 	msr	BASEPRI, r2
    ee5a:	f3bf 8f6f 	isb	sy
			if (!node) {
    ee5e:	b93b      	cbnz	r3, ee70 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    ee60:	2145      	movs	r1, #69	; 0x45
    ee62:	4818      	ldr	r0, [pc, #96]	; (eec4 <hci_num_completed_packets+0xf0>)
    ee64:	f00d fd98 	bl	1c998 <printk>
		bt_conn_unref(conn);
    ee68:	4620      	mov	r0, r4
    ee6a:	f002 fb65 	bl	11538 <bt_conn_unref>
    ee6e:	e7e8      	b.n	ee42 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    ee70:	f04f 0220 	mov.w	r2, #32
    ee74:	f3ef 8111 	mrs	r1, BASEPRI
    ee78:	f382 8811 	msr	BASEPRI, r2
    ee7c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    ee80:	68da      	ldr	r2, [r3, #12]
    ee82:	61e2      	str	r2, [r4, #28]
	return list->tail;
    ee84:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    ee86:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    ee8a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    ee8e:	b98a      	cbnz	r2, eeb4 <hci_num_completed_packets+0xe0>
	list->head = node;
    ee90:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    ee94:	f381 8811 	msr	BASEPRI, r1
    ee98:	f3bf 8f6f 	isb	sy
    ee9c:	2100      	movs	r1, #0
    ee9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    eea2:	f00f fb55 	bl	1e550 <atomic_test_and_set_bit>
    eea6:	2800      	cmp	r0, #0
    eea8:	d1be      	bne.n	ee28 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    eeaa:	4651      	mov	r1, sl
    eeac:	4648      	mov	r0, r9
    eeae:	f012 fa83 	bl	213b8 <k_queue_append>
    eeb2:	e7b9      	b.n	ee28 <hci_num_completed_packets+0x54>
	parent->next = child;
    eeb4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    eeb6:	6263      	str	r3, [r4, #36]	; 0x24
}
    eeb8:	e7ec      	b.n	ee94 <hci_num_completed_packets+0xc0>
    eeba:	bf00      	nop
    eebc:	20009630 	.word	0x20009630
    eec0:	0002436d 	.word	0x0002436d
    eec4:	0002438e 	.word	0x0002438e

0000eec8 <bt_hci_cmd_create>:
{
    eec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    eecc:	f04f 32ff 	mov.w	r2, #4294967295
    eed0:	4606      	mov	r6, r0
    eed2:	f04f 33ff 	mov.w	r3, #4294967295
    eed6:	481d      	ldr	r0, [pc, #116]	; (ef4c <bt_hci_cmd_create+0x84>)
    eed8:	460f      	mov	r7, r1
    eeda:	f011 fb77 	bl	205cc <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    eede:	4604      	mov	r4, r0
    eee0:	b950      	cbnz	r0, eef8 <bt_hci_cmd_create+0x30>
    eee2:	491b      	ldr	r1, [pc, #108]	; (ef50 <bt_hci_cmd_create+0x88>)
    eee4:	481b      	ldr	r0, [pc, #108]	; (ef54 <bt_hci_cmd_create+0x8c>)
    eee6:	f44f 7281 	mov.w	r2, #258	; 0x102
    eeea:	f00d fd55 	bl	1c998 <printk>
    eeee:	f44f 7181 	mov.w	r1, #258	; 0x102
    eef2:	4817      	ldr	r0, [pc, #92]	; (ef50 <bt_hci_cmd_create+0x88>)
    eef4:	f00d fff6 	bl	1cee4 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    eef8:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    eefc:	f104 0a08 	add.w	sl, r4, #8
    ef00:	2101      	movs	r1, #1
    ef02:	4650      	mov	r0, sl
    ef04:	f008 fb60 	bl	175c8 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    ef08:	4620      	mov	r0, r4
    ef0a:	f884 8014 	strb.w	r8, [r4, #20]
    ef0e:	f008 fa35 	bl	1737c <net_buf_id>
    ef12:	f04f 090c 	mov.w	r9, #12
    ef16:	4d10      	ldr	r5, [pc, #64]	; (ef58 <bt_hci_cmd_create+0x90>)
    ef18:	fb09 5000 	mla	r0, r9, r0, r5
    ef1c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    ef1e:	4620      	mov	r0, r4
    ef20:	f008 fa2c 	bl	1737c <net_buf_id>
    ef24:	fb09 5000 	mla	r0, r9, r0, r5
    ef28:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    ef2c:	4620      	mov	r0, r4
    ef2e:	f008 fa25 	bl	1737c <net_buf_id>
    ef32:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    ef36:	2103      	movs	r1, #3
    ef38:	4650      	mov	r0, sl
    ef3a:	f8c5 8004 	str.w	r8, [r5, #4]
    ef3e:	f008 fcab 	bl	17898 <net_buf_simple_add>
	hdr->param_len = param_len;
    ef42:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    ef44:	8006      	strh	r6, [r0, #0]
}
    ef46:	4620      	mov	r0, r4
    ef48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef4c:	20008644 	.word	0x20008644
    ef50:	0002425e 	.word	0x0002425e
    ef54:	00022dd6 	.word	0x00022dd6
    ef58:	20009be8 	.word	0x20009be8

0000ef5c <bt_hci_cmd_send_sync>:
{
    ef5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef5e:	4607      	mov	r7, r0
    ef60:	4615      	mov	r5, r2
	if (!buf) {
    ef62:	460c      	mov	r4, r1
{
    ef64:	b087      	sub	sp, #28
	if (!buf) {
    ef66:	b921      	cbnz	r1, ef72 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    ef68:	f7ff ffae 	bl	eec8 <bt_hci_cmd_create>
		if (!buf) {
    ef6c:	4604      	mov	r4, r0
    ef6e:	2800      	cmp	r0, #0
    ef70:	d048      	beq.n	f004 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ef72:	2201      	movs	r2, #1
    ef74:	2100      	movs	r1, #0
    ef76:	4668      	mov	r0, sp
    ef78:	f012 fa76 	bl	21468 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    ef7c:	4620      	mov	r0, r4
    ef7e:	f008 f9fd 	bl	1737c <net_buf_id>
    ef82:	230c      	movs	r3, #12
    ef84:	4e21      	ldr	r6, [pc, #132]	; (f00c <bt_hci_cmd_send_sync+0xb0>)
    ef86:	fb03 6000 	mla	r0, r3, r0, r6
    ef8a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    ef8e:	4620      	mov	r0, r4
    ef90:	f008 fbb0 	bl	176f4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ef94:	4621      	mov	r1, r4
    ef96:	481e      	ldr	r0, [pc, #120]	; (f010 <bt_hci_cmd_send_sync+0xb4>)
    ef98:	f008 fb3a 	bl	17610 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    ef9c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    efa0:	2300      	movs	r3, #0
    efa2:	4668      	mov	r0, sp
    efa4:	f00c fb74 	bl	1b690 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    efa8:	b158      	cbz	r0, efc2 <bt_hci_cmd_send_sync+0x66>
    efaa:	f240 124d 	movw	r2, #333	; 0x14d
    efae:	4919      	ldr	r1, [pc, #100]	; (f014 <bt_hci_cmd_send_sync+0xb8>)
    efb0:	4819      	ldr	r0, [pc, #100]	; (f018 <bt_hci_cmd_send_sync+0xbc>)
    efb2:	f00d fcf1 	bl	1c998 <printk>
    efb6:	4040      	eors	r0, r0
    efb8:	f380 8811 	msr	BASEPRI, r0
    efbc:	f04f 0003 	mov.w	r0, #3
    efc0:	df02      	svc	2
	status = cmd(buf)->status;
    efc2:	4620      	mov	r0, r4
    efc4:	f008 f9da 	bl	1737c <net_buf_id>
    efc8:	230c      	movs	r3, #12
    efca:	4358      	muls	r0, r3
    efcc:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    efce:	b186      	cbz	r6, eff2 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    efd0:	4633      	mov	r3, r6
    efd2:	463a      	mov	r2, r7
    efd4:	2157      	movs	r1, #87	; 0x57
    efd6:	4811      	ldr	r0, [pc, #68]	; (f01c <bt_hci_cmd_send_sync+0xc0>)
    efd8:	f00d fcde 	bl	1c998 <printk>
		net_buf_unref(buf);
    efdc:	4620      	mov	r0, r4
    efde:	f008 fb45 	bl	1766c <net_buf_unref>
			return -EIO;
    efe2:	2e09      	cmp	r6, #9
    efe4:	bf0c      	ite	eq
    efe6:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    efea:	f06f 0004 	mvnne.w	r0, #4
}
    efee:	b007      	add	sp, #28
    eff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    eff2:	b115      	cbz	r5, effa <bt_hci_cmd_send_sync+0x9e>
	return 0;
    eff4:	4630      	mov	r0, r6
		*rsp = buf;
    eff6:	602c      	str	r4, [r5, #0]
    eff8:	e7f9      	b.n	efee <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    effa:	4620      	mov	r0, r4
    effc:	f008 fb36 	bl	1766c <net_buf_unref>
	return 0;
    f000:	4628      	mov	r0, r5
    f002:	e7f4      	b.n	efee <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    f004:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f008:	e7f1      	b.n	efee <bt_hci_cmd_send_sync+0x92>
    f00a:	bf00      	nop
    f00c:	20009be8 	.word	0x20009be8
    f010:	20008120 	.word	0x20008120
    f014:	0002425e 	.word	0x0002425e
    f018:	00022dd6 	.word	0x00022dd6
    f01c:	000243aa 	.word	0x000243aa

0000f020 <hci_le_read_max_data_len>:
{
    f020:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f022:	4606      	mov	r6, r0
    f024:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f026:	f242 002f 	movw	r0, #8239	; 0x202f
    f02a:	2100      	movs	r1, #0
    f02c:	aa01      	add	r2, sp, #4
    f02e:	f7ff ff95 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    f032:	4604      	mov	r4, r0
    f034:	b130      	cbz	r0, f044 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    f036:	2145      	movs	r1, #69	; 0x45
    f038:	4808      	ldr	r0, [pc, #32]	; (f05c <hci_le_read_max_data_len+0x3c>)
    f03a:	f00d fcad 	bl	1c998 <printk>
}
    f03e:	4620      	mov	r0, r4
    f040:	b002      	add	sp, #8
    f042:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f044:	9801      	ldr	r0, [sp, #4]
    f046:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f048:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f04c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f04e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f052:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f054:	f008 fb0a 	bl	1766c <net_buf_unref>
	return 0;
    f058:	e7f1      	b.n	f03e <hci_le_read_max_data_len+0x1e>
    f05a:	bf00      	nop
    f05c:	000243cb 	.word	0x000243cb

0000f060 <set_random_address>:
{
    f060:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    f062:	4e15      	ldr	r6, [pc, #84]	; (f0b8 <set_random_address+0x58>)
    f064:	2206      	movs	r2, #6
    f066:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    f06a:	4605      	mov	r5, r0
    f06c:	f00f f93b 	bl	1e2e6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f070:	4604      	mov	r4, r0
    f072:	b1e0      	cbz	r0, f0ae <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f074:	2106      	movs	r1, #6
    f076:	f242 0005 	movw	r0, #8197	; 0x2005
    f07a:	f7ff ff25 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f07e:	4604      	mov	r4, r0
    f080:	b1b8      	cbz	r0, f0b2 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f082:	2206      	movs	r2, #6
    f084:	4629      	mov	r1, r5
    f086:	3008      	adds	r0, #8
    f088:	f011 face 	bl	20628 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f08c:	4621      	mov	r1, r4
    f08e:	2200      	movs	r2, #0
    f090:	f242 0005 	movw	r0, #8197	; 0x2005
    f094:	f7ff ff62 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    f098:	4604      	mov	r4, r0
    f09a:	b940      	cbnz	r0, f0ae <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    f09c:	2206      	movs	r2, #6
    f09e:	4629      	mov	r1, r5
    f0a0:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    f0a4:	f00f f930 	bl	1e308 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f0a8:	2301      	movs	r3, #1
    f0aa:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    f0ae:	4620      	mov	r0, r4
    f0b0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f0b2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f0b6:	e7fa      	b.n	f0ae <set_random_address+0x4e>
    f0b8:	20008000 	.word	0x20008000

0000f0bc <set_le_adv_enable_legacy>:
{
    f0bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f0be:	4606      	mov	r6, r0
    f0c0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f0c2:	f242 000a 	movw	r0, #8202	; 0x200a
    f0c6:	2101      	movs	r1, #1
    f0c8:	f7ff fefe 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f0cc:	4604      	mov	r4, r0
    f0ce:	b1e0      	cbz	r0, f10a <set_le_adv_enable_legacy+0x4e>
	if (enable) {
    f0d0:	b1cd      	cbz	r5, f106 <set_le_adv_enable_legacy+0x4a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    f0d2:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    f0d4:	f00f fa66 	bl	1e5a4 <net_buf_add_u8.isra.0>
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    f0d8:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f0da:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f0dc:	3610      	adds	r6, #16
    f0de:	9302      	str	r3, [sp, #8]
	state->target = target;
    f0e0:	9601      	str	r6, [sp, #4]
	state->val = val;
    f0e2:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f0e6:	f008 f949 	bl	1737c <net_buf_id>
    f0ea:	220c      	movs	r2, #12
    f0ec:	4b08      	ldr	r3, [pc, #32]	; (f110 <set_le_adv_enable_legacy+0x54>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f0ee:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f0f0:	fb02 3300 	mla	r3, r2, r0, r3
    f0f4:	aa01      	add	r2, sp, #4
    f0f6:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f0f8:	f242 000a 	movw	r0, #8202	; 0x200a
    f0fc:	2200      	movs	r2, #0
    f0fe:	f7ff ff2d 	bl	ef5c <bt_hci_cmd_send_sync>
}
    f102:	b004      	add	sp, #16
    f104:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    f106:	4629      	mov	r1, r5
    f108:	e7e4      	b.n	f0d4 <set_le_adv_enable_legacy+0x18>
		return -ENOBUFS;
    f10a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f10e:	e7f8      	b.n	f102 <set_le_adv_enable_legacy+0x46>
    f110:	20009be8 	.word	0x20009be8

0000f114 <set_le_scan_enable_legacy>:
{
    f114:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f116:	2102      	movs	r1, #2
{
    f118:	4604      	mov	r4, r0
    f11a:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f11c:	f242 000c 	movw	r0, #8204	; 0x200c
    f120:	f7ff fed2 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f124:	4605      	mov	r5, r0
    f126:	b348      	cbz	r0, f17c <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    f128:	2102      	movs	r1, #2
    f12a:	3008      	adds	r0, #8
    f12c:	f008 fbb4 	bl	17898 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f130:	2c01      	cmp	r4, #1
    f132:	4603      	mov	r3, r0
    f134:	d11f      	bne.n	f176 <set_le_scan_enable_legacy+0x62>
    f136:	4813      	ldr	r0, [pc, #76]	; (f184 <set_le_scan_enable_legacy+0x70>)
    f138:	f00f f9f9 	bl	1e52e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f13c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f140:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    f142:	701c      	strb	r4, [r3, #0]
	state->target = target;
    f144:	4b0f      	ldr	r3, [pc, #60]	; (f184 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    f146:	4628      	mov	r0, r5
    f148:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f14a:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    f14c:	f004 0401 	and.w	r4, r4, #1
    f150:	9302      	str	r3, [sp, #8]
    f152:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f156:	f008 f911 	bl	1737c <net_buf_id>
    f15a:	220c      	movs	r2, #12
    f15c:	4b0a      	ldr	r3, [pc, #40]	; (f188 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f15e:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f160:	fb02 3300 	mla	r3, r2, r0, r3
    f164:	aa01      	add	r2, sp, #4
    f166:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f168:	f242 000c 	movw	r0, #8204	; 0x200c
    f16c:	2200      	movs	r2, #0
    f16e:	f7ff fef5 	bl	ef5c <bt_hci_cmd_send_sync>
}
    f172:	b005      	add	sp, #20
    f174:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f176:	2200      	movs	r2, #0
    f178:	7042      	strb	r2, [r0, #1]
    f17a:	e7e2      	b.n	f142 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f17c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f180:	e7f7      	b.n	f172 <set_le_scan_enable_legacy+0x5e>
    f182:	bf00      	nop
    f184:	20008094 	.word	0x20008094
    f188:	20009be8 	.word	0x20009be8

0000f18c <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f18c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f190:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f192:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f196:	460e      	mov	r6, r1
    f198:	4691      	mov	r9, r2
    f19a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f19c:	d02c      	beq.n	f1f8 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f19e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f280 <le_adv_set_random_addr.isra.0+0xf4>
    f1a2:	b12a      	cbz	r2, f1b0 <le_adv_set_random_addr.isra.0+0x24>
    f1a4:	068c      	lsls	r4, r1, #26
    f1a6:	d503      	bpl.n	f1b0 <le_adv_set_random_addr.isra.0+0x24>
    f1a8:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f1ac:	0658      	lsls	r0, r3, #25
    f1ae:	d563      	bpl.n	f278 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f1b0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f1b4:	f818 3003 	ldrb.w	r3, [r8, r3]
    f1b8:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f1bc:	2b01      	cmp	r3, #1
    f1be:	d009      	beq.n	f1d4 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f1c0:	ebaa 0505 	sub.w	r5, sl, r5
    f1c4:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f1c8:	f1b9 0f00 	cmp.w	r9, #0
    f1cc:	d10f      	bne.n	f1ee <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f1ce:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f1d0:	703b      	strb	r3, [r7, #0]
    f1d2:	e008      	b.n	f1e6 <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f1d4:	2007      	movs	r0, #7
    f1d6:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f1da:	4440      	add	r0, r8
    f1dc:	f7ff ff40 	bl	f060 <set_random_address>
				if (err) {
    f1e0:	4604      	mov	r4, r0
    f1e2:	2800      	cmp	r0, #0
    f1e4:	d0ec      	beq.n	f1c0 <le_adv_set_random_addr.isra.0+0x34>
}
    f1e6:	4620      	mov	r0, r4
    f1e8:	b002      	add	sp, #8
    f1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f1ee:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f1f0:	bf48      	it	mi
    f1f2:	f043 0302 	orrmi.w	r3, r3, #2
    f1f6:	e7ea      	b.n	f1ce <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f1f8:	f011 0604 	ands.w	r6, r1, #4
    f1fc:	d014      	beq.n	f228 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f1fe:	f8df 8080 	ldr.w	r8, [pc, #128]	; f280 <le_adv_set_random_addr.isra.0+0xf4>
    f202:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f206:	f818 3003 	ldrb.w	r3, [r8, r3]
    f20a:	00ee      	lsls	r6, r5, #3
    f20c:	2b01      	cmp	r3, #1
    f20e:	d105      	bne.n	f21c <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f210:	2007      	movs	r0, #7
    f212:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f216:	4440      	add	r0, r8
    f218:	f7ff ff22 	bl	f060 <set_random_address>
			*own_addr_type = id_addr->type;
    f21c:	1b75      	subs	r5, r6, r5
    f21e:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f222:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f224:	703b      	strb	r3, [r7, #0]
    f226:	e7de      	b.n	f1e6 <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f228:	4816      	ldr	r0, [pc, #88]	; (f284 <le_adv_set_random_addr.isra.0+0xf8>)
    f22a:	f00f f980 	bl	1e52e <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f22e:	0682      	lsls	r2, r0, #26
    f230:	d417      	bmi.n	f262 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f232:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f234:	2106      	movs	r1, #6
    f236:	4668      	mov	r0, sp
    f238:	f001 feb6 	bl	10fa8 <bt_rand>
	if (err) {
    f23c:	4604      	mov	r4, r0
    f23e:	b948      	cbnz	r0, f254 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f240:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f244:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f24a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f24e:	f7ff ff07 	bl	f060 <set_random_address>
    f252:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f254:	2001      	movs	r0, #1
    f256:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f258:	2d00      	cmp	r5, #0
    f25a:	d0c4      	beq.n	f1e6 <le_adv_set_random_addr.isra.0+0x5a>
				set_le_scan_enable(true);
    f25c:	f00f fa18 	bl	1e690 <set_le_scan_enable.isra.0>
		if (err) {
    f260:	e7c1      	b.n	f1e6 <le_adv_set_random_addr.isra.0+0x5a>
    f262:	4808      	ldr	r0, [pc, #32]	; (f284 <le_adv_set_random_addr.isra.0+0xf8>)
    f264:	f00f f963 	bl	1e52e <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f268:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f26a:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f26e:	d5e0      	bpl.n	f232 <le_adv_set_random_addr.isra.0+0xa6>
				set_le_scan_enable(false);
    f270:	4630      	mov	r0, r6
    f272:	f00f fa0d 	bl	1e690 <set_le_scan_enable.isra.0>
    f276:	e7dd      	b.n	f234 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f278:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f27c:	e7b3      	b.n	f1e6 <le_adv_set_random_addr.isra.0+0x5a>
    f27e:	bf00      	nop
    f280:	20008000 	.word	0x20008000
    f284:	20008094 	.word	0x20008094

0000f288 <hci_set_ad>:
{
    f288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f28c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f28e:	2120      	movs	r1, #32
{
    f290:	4682      	mov	sl, r0
    f292:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f294:	f7ff fe18 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f298:	4606      	mov	r6, r0
    f29a:	2800      	cmp	r0, #0
    f29c:	d056      	beq.n	f34c <hci_set_ad+0xc4>
    f29e:	2120      	movs	r1, #32
    f2a0:	3008      	adds	r0, #8
    f2a2:	f008 faf9 	bl	17898 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f2a6:	2220      	movs	r2, #32
    f2a8:	4681      	mov	r9, r0
    f2aa:	2100      	movs	r1, #0
    f2ac:	f00f f857 	bl	1e35e <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f2b0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f2b4:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f2b6:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f2ba:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f2bc:	2300      	movs	r3, #0
    f2be:	f8d4 8000 	ldr.w	r8, [r4]
    f2c2:	6862      	ldr	r2, [r4, #4]
    f2c4:	4293      	cmp	r3, r2
    f2c6:	d30d      	bcc.n	f2e4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f2c8:	9b00      	ldr	r3, [sp, #0]
    f2ca:	3408      	adds	r4, #8
    f2cc:	429c      	cmp	r4, r3
    f2ce:	d1f5      	bne.n	f2bc <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f2d0:	2200      	movs	r2, #0
    f2d2:	4631      	mov	r1, r6
    f2d4:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f2d6:	f889 5000 	strb.w	r5, [r9]
}
    f2da:	b003      	add	sp, #12
    f2dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f2e0:	f7ff be3c 	b.w	ef5c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f2e4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f2e8:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f2ea:	1881      	adds	r1, r0, r2
    f2ec:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f2ee:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f2f2:	d914      	bls.n	f31e <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f2f4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f2f8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f2fc:	d101      	bne.n	f302 <hci_set_ad+0x7a>
    f2fe:	2a00      	cmp	r2, #0
    f300:	dc0b      	bgt.n	f31a <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f302:	2145      	movs	r1, #69	; 0x45
    f304:	4813      	ldr	r0, [pc, #76]	; (f354 <hci_set_ad+0xcc>)
    f306:	f00d fb47 	bl	1c998 <printk>
		net_buf_unref(buf);
    f30a:	4630      	mov	r0, r6
    f30c:	f008 f9ae 	bl	1766c <net_buf_unref>
					return -EINVAL;
    f310:	f06f 0015 	mvn.w	r0, #21
}
    f314:	b003      	add	sp, #12
    f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f31a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f31e:	b2d7      	uxtb	r7, r2
    f320:	1c79      	adds	r1, r7, #1
    f322:	f80b 1005 	strb.w	r1, [fp, r5]
    f326:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f328:	b2c9      	uxtb	r1, r1
    f32a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f32e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f332:	fa5b f080 	uxtab	r0, fp, r0
    f336:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f338:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f33a:	f00e ffe5 	bl	1e308 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f33e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f340:	443d      	add	r5, r7
    f342:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f344:	3301      	adds	r3, #1
    f346:	f108 0808 	add.w	r8, r8, #8
    f34a:	e7ba      	b.n	f2c2 <hci_set_ad+0x3a>
		return -ENOBUFS;
    f34c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f350:	e7e0      	b.n	f314 <hci_set_ad+0x8c>
    f352:	bf00      	nop
    f354:	000243f0 	.word	0x000243f0

0000f358 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f35c:	b087      	sub	sp, #28
    f35e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f362:	4606      	mov	r6, r0
    f364:	460c      	mov	r4, r1
    f366:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f368:	2100      	movs	r1, #0
    f36a:	2210      	movs	r2, #16
    f36c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f36e:	461d      	mov	r5, r3
    f370:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f374:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f378:	f00e fff1 	bl	1e35e <memset>
	if (use_name) {
    f37c:	f1b8 0f00 	cmp.w	r8, #0
    f380:	d00e      	beq.n	f3a0 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f382:	bbb4      	cbnz	r4, f3f2 <le_adv_update.constprop.0+0x9a>
    f384:	2d00      	cmp	r5, #0
    f386:	d13f      	bne.n	f408 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f388:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f43c <le_adv_update.constprop.0+0xe4>
    f38c:	4658      	mov	r0, fp
    f38e:	f00e ff7d 	bl	1e28c <strlen>
    f392:	2309      	movs	r3, #9
    f394:	f88d 0001 	strb.w	r0, [sp, #1]
    f398:	f88d 3000 	strb.w	r3, [sp]
    f39c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f3a0:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f3a4:	f1b8 0f00 	cmp.w	r8, #0
    f3a8:	d030      	beq.n	f40c <le_adv_update.constprop.0+0xb4>
    f3aa:	f1ba 0f00 	cmp.w	sl, #0
    f3ae:	d12d      	bne.n	f40c <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f3b0:	2301      	movs	r3, #1
			d_len = 2;
    f3b2:	2202      	movs	r2, #2
			d[1].data = &data;
    f3b4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f3b8:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f3ba:	f242 0008 	movw	r0, #8200	; 0x2008
    f3be:	a902      	add	r1, sp, #8
    f3c0:	f7ff ff62 	bl	f288 <hci_set_ad>
		if (err) {
    f3c4:	4604      	mov	r4, r0
    f3c6:	b938      	cbnz	r0, f3d8 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f3c8:	f1ba 0f00 	cmp.w	sl, #0
    f3cc:	d120      	bne.n	f410 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f3ce:	2104      	movs	r1, #4
    f3d0:	f106 0010 	add.w	r0, r6, #16
    f3d4:	f00f f8b1 	bl	1e53a <atomic_or>
}
    f3d8:	4620      	mov	r0, r4
    f3da:	b007      	add	sp, #28
    f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f3e0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f3e4:	3a08      	subs	r2, #8
    f3e6:	2a01      	cmp	r2, #1
    f3e8:	d925      	bls.n	f436 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f3ea:	3301      	adds	r3, #1
    f3ec:	429f      	cmp	r7, r3
    f3ee:	d1f7      	bne.n	f3e0 <le_adv_update.constprop.0+0x88>
    f3f0:	e7c8      	b.n	f384 <le_adv_update.constprop.0+0x2c>
    f3f2:	2300      	movs	r3, #0
    f3f4:	e7fa      	b.n	f3ec <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f3f6:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f3fa:	3a08      	subs	r2, #8
    f3fc:	2a01      	cmp	r2, #1
    f3fe:	d91a      	bls.n	f436 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f400:	3301      	adds	r3, #1
    f402:	4599      	cmp	r9, r3
    f404:	d1f7      	bne.n	f3f6 <le_adv_update.constprop.0+0x9e>
    f406:	e7bf      	b.n	f388 <le_adv_update.constprop.0+0x30>
    f408:	2300      	movs	r3, #0
    f40a:	e7fa      	b.n	f402 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f40c:	2201      	movs	r2, #1
    f40e:	e7d4      	b.n	f3ba <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f410:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f412:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f416:	f1b8 0f00 	cmp.w	r8, #0
    f41a:	d003      	beq.n	f424 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f41c:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f41e:	2202      	movs	r2, #2
			d[1].data = &data;
    f420:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f424:	f242 0009 	movw	r0, #8201	; 0x2009
    f428:	a902      	add	r1, sp, #8
    f42a:	f7ff ff2d 	bl	f288 <hci_set_ad>
		if (err) {
    f42e:	2800      	cmp	r0, #0
    f430:	d0cd      	beq.n	f3ce <le_adv_update.constprop.0+0x76>
    f432:	4604      	mov	r4, r0
    f434:	e7d0      	b.n	f3d8 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f436:	f06f 0415 	mvn.w	r4, #21
    f43a:	e7cd      	b.n	f3d8 <le_adv_update.constprop.0+0x80>
    f43c:	00022c07 	.word	0x00022c07

0000f440 <start_le_scan_legacy>:
{
    f440:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f442:	460e      	mov	r6, r1
    f444:	4605      	mov	r5, r0
    f446:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f448:	2100      	movs	r1, #0
    f44a:	2207      	movs	r2, #7
    f44c:	4668      	mov	r0, sp
    f44e:	f00e ff86 	bl	1e35e <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f452:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f456:	4e26      	ldr	r6, [pc, #152]	; (f4f0 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f458:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f45a:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f45c:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f460:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f464:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f468:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f46c:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f470:	f00f f85d 	bl	1e52e <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f474:	0641      	lsls	r1, r0, #25
    f476:	d413      	bmi.n	f4a0 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f478:	f00f f8bc 	bl	1e5f4 <le_set_private_addr.constprop.0>
			if (err) {
    f47c:	4604      	mov	r4, r0
    f47e:	b160      	cbz	r0, f49a <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f480:	2d01      	cmp	r5, #1
    f482:	d02e      	beq.n	f4e2 <start_le_scan_legacy+0xa2>
    f484:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f488:	f00f f851 	bl	1e52e <atomic_get>
    f48c:	0642      	lsls	r2, r0, #25
    f48e:	d528      	bpl.n	f4e2 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f490:	4622      	mov	r2, r4
    f492:	2157      	movs	r1, #87	; 0x57
    f494:	4817      	ldr	r0, [pc, #92]	; (f4f4 <start_le_scan_legacy+0xb4>)
    f496:	f00d fa7f 	bl	1c998 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f49a:	2301      	movs	r3, #1
    f49c:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f4a0:	2107      	movs	r1, #7
    f4a2:	f242 000b 	movw	r0, #8203	; 0x200b
    f4a6:	f7ff fd0f 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f4aa:	4604      	mov	r4, r0
    f4ac:	b1e0      	cbz	r0, f4e8 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f4ae:	2207      	movs	r2, #7
    f4b0:	4669      	mov	r1, sp
    f4b2:	3008      	adds	r0, #8
    f4b4:	f011 f8b8 	bl	20628 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f4b8:	4621      	mov	r1, r4
    f4ba:	2200      	movs	r2, #0
    f4bc:	f242 000b 	movw	r0, #8203	; 0x200b
    f4c0:	f7ff fd4c 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    f4c4:	4604      	mov	r4, r0
    f4c6:	b960      	cbnz	r0, f4e2 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f4c8:	2001      	movs	r0, #1
    f4ca:	f7ff fe23 	bl	f114 <set_le_scan_enable_legacy>
	if (err) {
    f4ce:	4604      	mov	r4, r0
    f4d0:	b938      	cbnz	r0, f4e2 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f4d2:	1e6b      	subs	r3, r5, #1
    f4d4:	425a      	negs	r2, r3
    f4d6:	f04f 0107 	mov.w	r1, #7
    f4da:	4807      	ldr	r0, [pc, #28]	; (f4f8 <start_le_scan_legacy+0xb8>)
    f4dc:	415a      	adcs	r2, r3
    f4de:	f00f f850 	bl	1e582 <atomic_set_bit_to>
}
    f4e2:	4620      	mov	r0, r4
    f4e4:	b002      	add	sp, #8
    f4e6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f4e8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f4ec:	e7f9      	b.n	f4e2 <start_le_scan_legacy+0xa2>
    f4ee:	bf00      	nop
    f4f0:	20008000 	.word	0x20008000
    f4f4:	0002440e 	.word	0x0002440e
    f4f8:	20008094 	.word	0x20008094

0000f4fc <bt_le_scan_random_addr_check>:
{
    f4fc:	b508      	push	{r3, lr}
    f4fe:	4802      	ldr	r0, [pc, #8]	; (f508 <bt_le_scan_random_addr_check+0xc>)
    f500:	f00f f815 	bl	1e52e <atomic_get>
}
    f504:	2001      	movs	r0, #1
    f506:	bd08      	pop	{r3, pc}
    f508:	20008028 	.word	0x20008028

0000f50c <bt_le_create_conn_legacy>:
{
    f50c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f510:	4e30      	ldr	r6, [pc, #192]	; (f5d4 <bt_le_create_conn_legacy+0xc8>)
{
    f512:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f514:	7833      	ldrb	r3, [r6, #0]
    f516:	2b01      	cmp	r3, #1
    f518:	d00b      	beq.n	f532 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f51a:	2119      	movs	r1, #25
    f51c:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f520:	f896 8000 	ldrb.w	r8, [r6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f524:	f7ff fcd0 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f528:	4607      	mov	r7, r0
    f52a:	b950      	cbnz	r0, f542 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f52c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f530:	e004      	b.n	f53c <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f532:	1c70      	adds	r0, r6, #1
    f534:	f7ff fd94 	bl	f060 <set_random_address>
			if (err) {
    f538:	2800      	cmp	r0, #0
    f53a:	d0ee      	beq.n	f51a <bt_le_create_conn_legacy+0xe>
}
    f53c:	b004      	add	sp, #16
    f53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f542:	2119      	movs	r1, #25
    f544:	3008      	adds	r0, #8
    f546:	f008 f9a7 	bl	17898 <net_buf_simple_add>
    f54a:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f54c:	2219      	movs	r2, #25
    f54e:	2100      	movs	r1, #0
    f550:	f00e ff05 	bl	1e35e <memset>
	cp->own_addr_type = own_addr_type;
    f554:	f884 800c 	strb.w	r8, [r4, #12]
		if (!bt_dev.le.rl_size ||
    f558:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    f55c:	b3bb      	cbz	r3, f5ce <bt_le_create_conn_legacy+0xc2>
    f55e:	f896 20e1 	ldrb.w	r2, [r6, #225]	; 0xe1
    f562:	429a      	cmp	r2, r3
    f564:	d833      	bhi.n	f5ce <bt_le_create_conn_legacy+0xc2>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    f566:	f105 0188 	add.w	r1, r5, #136	; 0x88
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f56a:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f56e:	1d60      	adds	r0, r4, #5
    f570:	f00e ffe0 	bl	1e534 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f574:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f578:	89b3      	ldrh	r3, [r6, #12]
	cmd(buf)->state = &state;
    f57a:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f57c:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f57e:	89f3      	ldrh	r3, [r6, #14]
    f580:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f582:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f586:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f58a:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f58e:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f592:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f596:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f59a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f59e:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f5a2:	4b0d      	ldr	r3, [pc, #52]	; (f5d8 <bt_le_create_conn_legacy+0xcc>)
    f5a4:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f5a6:	230b      	movs	r3, #11
    f5a8:	9302      	str	r3, [sp, #8]
	state->val = val;
    f5aa:	2301      	movs	r3, #1
    f5ac:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f5b0:	f007 fee4 	bl	1737c <net_buf_id>
    f5b4:	220c      	movs	r2, #12
    f5b6:	4b09      	ldr	r3, [pc, #36]	; (f5dc <bt_le_create_conn_legacy+0xd0>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f5b8:	4639      	mov	r1, r7
	cmd(buf)->state = &state;
    f5ba:	fb02 3300 	mla	r3, r2, r0, r3
    f5be:	aa01      	add	r2, sp, #4
    f5c0:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f5c2:	f242 000d 	movw	r0, #8205	; 0x200d
    f5c6:	4642      	mov	r2, r8
    f5c8:	f7ff fcc8 	bl	ef5c <bt_hci_cmd_send_sync>
    f5cc:	e7b6      	b.n	f53c <bt_le_create_conn_legacy+0x30>
			peer_addr = &conn->le.resp_addr;
    f5ce:	f105 0196 	add.w	r1, r5, #150	; 0x96
    f5d2:	e7ca      	b.n	f56a <bt_le_create_conn_legacy+0x5e>
    f5d4:	20008000 	.word	0x20008000
    f5d8:	20008094 	.word	0x20008094
    f5dc:	20009be8 	.word	0x20009be8

0000f5e0 <bt_le_create_conn_cancel>:
{
    f5e0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f5e2:	2100      	movs	r1, #0
{
    f5e4:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f5e6:	f242 000e 	movw	r0, #8206	; 0x200e
    f5ea:	f7ff fc6d 	bl	eec8 <bt_hci_cmd_create>
	state->target = target;
    f5ee:	4b0c      	ldr	r3, [pc, #48]	; (f620 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f5f0:	2500      	movs	r5, #0
	state->target = target;
    f5f2:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f5f4:	230b      	movs	r3, #11
    f5f6:	4604      	mov	r4, r0
    f5f8:	9302      	str	r3, [sp, #8]
	state->val = val;
    f5fa:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f5fe:	f007 febd 	bl	1737c <net_buf_id>
    f602:	220c      	movs	r2, #12
    f604:	4b07      	ldr	r3, [pc, #28]	; (f624 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f606:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f608:	fb02 3300 	mla	r3, r2, r0, r3
    f60c:	aa01      	add	r2, sp, #4
    f60e:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f610:	f242 000e 	movw	r0, #8206	; 0x200e
    f614:	462a      	mov	r2, r5
    f616:	f7ff fca1 	bl	ef5c <bt_hci_cmd_send_sync>
}
    f61a:	b005      	add	sp, #20
    f61c:	bd30      	pop	{r4, r5, pc}
    f61e:	bf00      	nop
    f620:	20008094 	.word	0x20008094
    f624:	20009be8 	.word	0x20009be8

0000f628 <bt_security_err_get>:
	switch (hci_err) {
    f628:	2829      	cmp	r0, #41	; 0x29
    f62a:	bf9a      	itte	ls
    f62c:	4b01      	ldrls	r3, [pc, #4]	; (f634 <bt_security_err_get+0xc>)
    f62e:	5c18      	ldrbls	r0, [r3, r0]
{
    f630:	2008      	movhi	r0, #8
}
    f632:	4770      	bx	lr
    f634:	00024a96 	.word	0x00024a96

0000f638 <hci_encrypt_key_refresh_complete>:
{
    f638:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    f63a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    f63c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f640:	4630      	mov	r0, r6
    f642:	f001 ff9d 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    f646:	4604      	mov	r4, r0
    f648:	b930      	cbnz	r0, f658 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f64a:	4632      	mov	r2, r6
}
    f64c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f650:	2145      	movs	r1, #69	; 0x45
    f652:	4810      	ldr	r0, [pc, #64]	; (f694 <hci_encrypt_key_refresh_complete+0x5c>)
    f654:	f00d b9a0 	b.w	1c998 <printk>
	if (evt->status) {
    f658:	7829      	ldrb	r1, [r5, #0]
    f65a:	b159      	cbz	r1, f674 <hci_encrypt_key_refresh_complete+0x3c>
		bt_conn_security_changed(conn, evt->status,
    f65c:	4608      	mov	r0, r1
    f65e:	f7ff ffe3 	bl	f628 <bt_security_err_get>
    f662:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f664:	4620      	mov	r0, r4
    f666:	f001 fde5 	bl	11234 <bt_conn_security_changed>
	bt_conn_unref(conn);
    f66a:	4620      	mov	r0, r4
}
    f66c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f670:	f001 bf62 	b.w	11538 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    f674:	7886      	ldrb	r6, [r0, #2]
    f676:	2e01      	cmp	r6, #1
    f678:	d104      	bne.n	f684 <hci_encrypt_key_refresh_complete+0x4c>
		bt_smp_update_keys(conn);
    f67a:	f007 fc7b 	bl	16f74 <bt_smp_update_keys>
	if (!conn->encrypt) {
    f67e:	7ae3      	ldrb	r3, [r4, #11]
    f680:	b91b      	cbnz	r3, f68a <hci_encrypt_key_refresh_complete+0x52>
		conn->sec_level = BT_SECURITY_L1;
    f682:	7266      	strb	r6, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f684:	2200      	movs	r2, #0
    f686:	7829      	ldrb	r1, [r5, #0]
    f688:	e7ec      	b.n	f664 <hci_encrypt_key_refresh_complete+0x2c>
    f68a:	4620      	mov	r0, r4
    f68c:	f7ff f9c4 	bl	ea18 <update_sec_level.part.0>
    f690:	e7f8      	b.n	f684 <hci_encrypt_key_refresh_complete+0x4c>
    f692:	bf00      	nop
    f694:	0002416a 	.word	0x0002416a

0000f698 <hci_encrypt_change>:
{
    f698:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    f69a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f69c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f6a0:	4630      	mov	r0, r6
    f6a2:	f001 ff6d 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    f6a6:	4604      	mov	r4, r0
    f6a8:	b930      	cbnz	r0, f6b8 <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f6aa:	4632      	mov	r2, r6
}
    f6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f6b0:	2145      	movs	r1, #69	; 0x45
    f6b2:	4812      	ldr	r0, [pc, #72]	; (f6fc <hci_encrypt_change+0x64>)
    f6b4:	f00d b970 	b.w	1c998 <printk>
	if (evt->status) {
    f6b8:	7829      	ldrb	r1, [r5, #0]
    f6ba:	b159      	cbz	r1, f6d4 <hci_encrypt_change+0x3c>
		bt_conn_security_changed(conn, evt->status,
    f6bc:	4608      	mov	r0, r1
    f6be:	f7ff ffb3 	bl	f628 <bt_security_err_get>
    f6c2:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f6c4:	4620      	mov	r0, r4
    f6c6:	f001 fdb5 	bl	11234 <bt_conn_security_changed>
	bt_conn_unref(conn);
    f6ca:	4620      	mov	r0, r4
}
    f6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f6d0:	f001 bf32 	b.w	11538 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    f6d4:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    f6d6:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    f6d8:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    f6da:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    f6dc:	d102      	bne.n	f6e4 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
    f6de:	b923      	cbnz	r3, f6ea <hci_encrypt_change+0x52>
		conn->sec_level = BT_SECURITY_L1;
    f6e0:	2301      	movs	r3, #1
    f6e2:	7263      	strb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f6e4:	2200      	movs	r2, #0
    f6e6:	7829      	ldrb	r1, [r5, #0]
    f6e8:	e7ec      	b.n	f6c4 <hci_encrypt_change+0x2c>
			bt_smp_update_keys(conn);
    f6ea:	f007 fc43 	bl	16f74 <bt_smp_update_keys>
	if (!conn->encrypt) {
    f6ee:	7ae3      	ldrb	r3, [r4, #11]
    f6f0:	2b00      	cmp	r3, #0
    f6f2:	d0f5      	beq.n	f6e0 <hci_encrypt_change+0x48>
    f6f4:	4620      	mov	r0, r4
    f6f6:	f7ff f98f 	bl	ea18 <update_sec_level.part.0>
    f6fa:	e7f3      	b.n	f6e4 <hci_encrypt_change+0x4c>
    f6fc:	0002416a 	.word	0x0002416a

0000f700 <bt_id_add>:
{
    f700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f704:	4c54      	ldr	r4, [pc, #336]	; (f858 <bt_id_add+0x158>)
{
    f706:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f708:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    f70c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f710:	b10a      	cbz	r2, f716 <bt_id_add+0x16>
    f712:	429a      	cmp	r2, r3
    f714:	d209      	bcs.n	f72a <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
    f716:	3301      	adds	r3, #1
    f718:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    f71c:	7a2b      	ldrb	r3, [r5, #8]
    f71e:	f043 0304 	orr.w	r3, r3, #4
    f722:	722b      	strb	r3, [r5, #8]
}
    f724:	b002      	add	sp, #8
    f726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    f72a:	2100      	movs	r1, #0
    f72c:	2206      	movs	r2, #6
    f72e:	4608      	mov	r0, r1
    f730:	f002 f860 	bl	117f4 <bt_conn_lookup_state_le>
	if (conn) {
    f734:	4606      	mov	r6, r0
    f736:	b178      	cbz	r0, f758 <bt_id_add+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f73c:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f740:	f00e fefb 	bl	1e53a <atomic_or>
		bt_conn_unref(conn);
    f744:	4630      	mov	r0, r6
	keys->state |= flag;
    f746:	7a2b      	ldrb	r3, [r5, #8]
    f748:	f043 0301 	orr.w	r3, r3, #1
    f74c:	722b      	strb	r3, [r5, #8]
}
    f74e:	b002      	add	sp, #8
    f750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    f754:	f001 bef0 	b.w	11538 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f758:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f75c:	f00e fee7 	bl	1e52e <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    f760:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f762:	f3c0 1740 	ubfx	r7, r0, #5, #1
    f766:	483d      	ldr	r0, [pc, #244]	; (f85c <bt_id_add+0x15c>)
    f768:	f7fe ffc4 	bl	e6f4 <bt_adv_foreach>
	if (scan_enabled) {
    f76c:	b117      	cbz	r7, f774 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    f76e:	4630      	mov	r0, r6
    f770:	f00e ff8e 	bl	1e690 <set_le_scan_enable.isra.0>
	if (bt_dev.le.rl_entries) {
    f774:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f778:	b143      	cbz	r3, f78c <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f77a:	2000      	movs	r0, #0
    f77c:	f00e ff71 	bl	1e662 <addr_res_enable>
		if (err) {
    f780:	b120      	cbz	r0, f78c <bt_id_add+0x8c>
			BT_WARN("Failed to disable address resolution");
    f782:	2157      	movs	r1, #87	; 0x57
    f784:	4836      	ldr	r0, [pc, #216]	; (f860 <bt_id_add+0x160>)
		BT_WARN("Set privacy mode command is not supported");
    f786:	f00d f907 	bl	1c998 <printk>
	if (err) {
    f78a:	e01c      	b.n	f7c6 <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    f78c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    f790:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f794:	429a      	cmp	r2, r3
    f796:	d124      	bne.n	f7e2 <bt_id_add+0xe2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    f798:	2157      	movs	r1, #87	; 0x57
    f79a:	4832      	ldr	r0, [pc, #200]	; (f864 <bt_id_add+0x164>)
    f79c:	f00d f8fc 	bl	1c998 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    f7a0:	2200      	movs	r2, #0
    f7a2:	f242 0029 	movw	r0, #8233	; 0x2029
    f7a6:	4611      	mov	r1, r2
    f7a8:	f7ff fbd8 	bl	ef5c <bt_hci_cmd_send_sync>
		if (err) {
    f7ac:	b110      	cbz	r0, f7b4 <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
    f7ae:	2145      	movs	r1, #69	; 0x45
    f7b0:	482d      	ldr	r0, [pc, #180]	; (f868 <bt_id_add+0x168>)
    f7b2:	e7e8      	b.n	f786 <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    f7b4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f7b8:	3301      	adds	r3, #1
    f7ba:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    f7be:	7a2b      	ldrb	r3, [r5, #8]
    f7c0:	f043 0304 	orr.w	r3, r3, #4
    f7c4:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f7c6:	2001      	movs	r0, #1
    f7c8:	f00e ff4b 	bl	1e662 <addr_res_enable>
	if (scan_enabled) {
    f7cc:	b117      	cbz	r7, f7d4 <bt_id_add+0xd4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    f7ce:	2001      	movs	r0, #1
    f7d0:	f00e ff5e 	bl	1e690 <set_le_scan_enable.isra.0>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f7d4:	2100      	movs	r1, #0
    f7d6:	4825      	ldr	r0, [pc, #148]	; (f86c <bt_id_add+0x16c>)
}
    f7d8:	b002      	add	sp, #8
    f7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f7de:	f7fe bf89 	b.w	e6f4 <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    f7e2:	f105 0801 	add.w	r8, r5, #1
    f7e6:	4640      	mov	r0, r8
    f7e8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    f7ec:	f00e ff52 	bl	1e694 <hci_id_add.constprop.0>
	if (err) {
    f7f0:	4606      	mov	r6, r0
    f7f2:	b110      	cbz	r0, f7fa <bt_id_add+0xfa>
		BT_ERR("Failed to add IRK to controller");
    f7f4:	2145      	movs	r1, #69	; 0x45
    f7f6:	481e      	ldr	r0, [pc, #120]	; (f870 <bt_id_add+0x170>)
    f7f8:	e7c5      	b.n	f786 <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    f7fa:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f7fe:	3301      	adds	r3, #1
    f800:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    f804:	7a2b      	ldrb	r3, [r5, #8]
    f806:	f043 0304 	orr.w	r3, r3, #4
    f80a:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    f80c:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    f810:	075b      	lsls	r3, r3, #29
    f812:	d402      	bmi.n	f81a <bt_id_add+0x11a>
		BT_WARN("Set privacy mode command is not supported");
    f814:	2157      	movs	r1, #87	; 0x57
    f816:	4817      	ldr	r0, [pc, #92]	; (f874 <bt_id_add+0x174>)
    f818:	e7b5      	b.n	f786 <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    f81a:	4641      	mov	r1, r8
    f81c:	4668      	mov	r0, sp
    f81e:	f00e fe89 	bl	1e534 <bt_addr_le_copy>
	cp.mode = mode;
    f822:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f824:	2108      	movs	r1, #8
    f826:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    f82a:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f82e:	f7ff fb4b 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    f832:	4604      	mov	r4, r0
    f834:	b910      	cbnz	r0, f83c <bt_id_add+0x13c>
		BT_ERR("Failed to set privacy mode");
    f836:	2145      	movs	r1, #69	; 0x45
    f838:	480f      	ldr	r0, [pc, #60]	; (f878 <bt_id_add+0x178>)
    f83a:	e7a4      	b.n	f786 <bt_id_add+0x86>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f83c:	2208      	movs	r2, #8
    f83e:	4669      	mov	r1, sp
    f840:	4410      	add	r0, r2
    f842:	f010 fef1 	bl	20628 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    f846:	4632      	mov	r2, r6
    f848:	4621      	mov	r1, r4
    f84a:	f242 004e 	movw	r0, #8270	; 0x204e
    f84e:	f7ff fb85 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    f852:	2800      	cmp	r0, #0
    f854:	d0b7      	beq.n	f7c6 <bt_id_add+0xc6>
    f856:	e7ee      	b.n	f836 <bt_id_add+0x136>
    f858:	20008000 	.word	0x20008000
    f85c:	0001e619 	.word	0x0001e619
    f860:	00024449 	.word	0x00024449
    f864:	00024473 	.word	0x00024473
    f868:	000244a9 	.word	0x000244a9
    f86c:	0001e643 	.word	0x0001e643
    f870:	000244ce 	.word	0x000244ce
    f874:	000244f3 	.word	0x000244f3
    f878:	00024522 	.word	0x00024522

0000f87c <bt_id_del>:
{
    f87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    f880:	4c47      	ldr	r4, [pc, #284]	; (f9a0 <bt_id_del+0x124>)
{
    f882:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    f884:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    f888:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	if (!bt_dev.le.rl_size ||
    f88c:	b112      	cbz	r2, f894 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    f88e:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    f890:	4293      	cmp	r3, r2
    f892:	dd08      	ble.n	f8a6 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    f894:	3b01      	subs	r3, #1
    f896:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    f89a:	7a2b      	ldrb	r3, [r5, #8]
    f89c:	f023 0304 	bic.w	r3, r3, #4
    f8a0:	722b      	strb	r3, [r5, #8]
}
    f8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    f8a6:	2100      	movs	r1, #0
    f8a8:	2206      	movs	r2, #6
    f8aa:	4608      	mov	r0, r1
    f8ac:	f001 ffa2 	bl	117f4 <bt_conn_lookup_state_le>
	if (conn) {
    f8b0:	4606      	mov	r6, r0
    f8b2:	b170      	cbz	r0, f8d2 <bt_id_del+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f8b4:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f8b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f8bc:	f00e fe3d 	bl	1e53a <atomic_or>
	keys->state |= flag;
    f8c0:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    f8c2:	4630      	mov	r0, r6
	keys->state |= flag;
    f8c4:	f043 0302 	orr.w	r3, r3, #2
    f8c8:	722b      	strb	r3, [r5, #8]
}
    f8ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    f8ce:	f001 be33 	b.w	11538 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f8d2:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f8d6:	f00e fe2a 	bl	1e52e <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    f8da:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f8dc:	f3c0 1840 	ubfx	r8, r0, #5, #1
    f8e0:	4830      	ldr	r0, [pc, #192]	; (f9a4 <bt_id_del+0x128>)
    f8e2:	f7fe ff07 	bl	e6f4 <bt_adv_foreach>
	if (scan_enabled) {
    f8e6:	f1b8 0f00 	cmp.w	r8, #0
    f8ea:	d002      	beq.n	f8f2 <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    f8ec:	4630      	mov	r0, r6
    f8ee:	f00e fecf 	bl	1e690 <set_le_scan_enable.isra.0>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f8f2:	2000      	movs	r0, #0
    f8f4:	f00e feb5 	bl	1e662 <addr_res_enable>
	if (err) {
    f8f8:	4606      	mov	r6, r0
    f8fa:	b1b0      	cbz	r0, f92a <bt_id_del+0xae>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    f8fc:	4602      	mov	r2, r0
    f8fe:	2145      	movs	r1, #69	; 0x45
    f900:	4829      	ldr	r0, [pc, #164]	; (f9a8 <bt_id_del+0x12c>)
    f902:	f00d f849 	bl	1c998 <printk>
	if (bt_dev.le.rl_entries) {
    f906:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f90a:	b113      	cbz	r3, f912 <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f90c:	2001      	movs	r0, #1
    f90e:	f00e fea8 	bl	1e662 <addr_res_enable>
	if (scan_enabled) {
    f912:	f1b8 0f00 	cmp.w	r8, #0
    f916:	d002      	beq.n	f91e <bt_id_del+0xa2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    f918:	2001      	movs	r0, #1
    f91a:	f00e feb9 	bl	1e690 <set_le_scan_enable.isra.0>
}
    f91e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f922:	2100      	movs	r1, #0
    f924:	4821      	ldr	r0, [pc, #132]	; (f9ac <bt_id_del+0x130>)
    f926:	f7fe bee5 	b.w	e6f4 <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f92a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f92e:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    f932:	429a      	cmp	r2, r3
    f934:	d20c      	bcs.n	f950 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
    f936:	3b01      	subs	r3, #1
    f938:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    f93c:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    f93e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    f940:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    f944:	2002      	movs	r0, #2
    f946:	491a      	ldr	r1, [pc, #104]	; (f9b0 <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    f948:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    f94a:	f007 fbd3 	bl	170f4 <bt_keys_foreach>
		goto done;
    f94e:	e7da      	b.n	f906 <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    f950:	2107      	movs	r1, #7
    f952:	f242 0028 	movw	r0, #8232	; 0x2028
    f956:	f7ff fab7 	bl	eec8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    f95a:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    f95e:	4607      	mov	r7, r0
    f960:	b920      	cbnz	r0, f96c <bt_id_del+0xf0>
		BT_ERR("Failed to remove IRK from controller");
    f962:	2145      	movs	r1, #69	; 0x45
    f964:	4813      	ldr	r0, [pc, #76]	; (f9b4 <bt_id_del+0x138>)
    f966:	f00d f817 	bl	1c998 <printk>
		goto done;
    f96a:	e7cc      	b.n	f906 <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
    f96c:	2107      	movs	r1, #7
    f96e:	3008      	adds	r0, #8
    f970:	f007 ff92 	bl	17898 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    f974:	4649      	mov	r1, r9
    f976:	f00e fddd 	bl	1e534 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    f97a:	4632      	mov	r2, r6
    f97c:	4639      	mov	r1, r7
    f97e:	f242 0028 	movw	r0, #8232	; 0x2028
    f982:	f7ff faeb 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
    f986:	2800      	cmp	r0, #0
    f988:	d1eb      	bne.n	f962 <bt_id_del+0xe6>
	bt_dev.le.rl_entries--;
    f98a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f98e:	3b01      	subs	r3, #1
    f990:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    f994:	7a2b      	ldrb	r3, [r5, #8]
    f996:	f023 0304 	bic.w	r3, r3, #4
    f99a:	722b      	strb	r3, [r5, #8]
    f99c:	e7b3      	b.n	f906 <bt_id_del+0x8a>
    f99e:	bf00      	nop
    f9a0:	20008000 	.word	0x20008000
    f9a4:	0001e619 	.word	0x0001e619
    f9a8:	00024542 	.word	0x00024542
    f9ac:	0001e643 	.word	0x0001e643
    f9b0:	0001e6e5 	.word	0x0001e6e5
    f9b4:	00024574 	.word	0x00024574

0000f9b8 <bt_le_scan_update>:
{
    f9b8:	b570      	push	{r4, r5, r6, lr}
    f9ba:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f9bc:	481c      	ldr	r0, [pc, #112]	; (fa30 <bt_le_scan_update+0x78>)
    f9be:	f00e fdb6 	bl	1e52e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f9c2:	0641      	lsls	r1, r0, #25
    f9c4:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f9c8:	d501      	bpl.n	f9ce <bt_le_scan_update+0x16>
			return 0;
    f9ca:	2000      	movs	r0, #0
    f9cc:	e02b      	b.n	fa26 <bt_le_scan_update+0x6e>
    f9ce:	4818      	ldr	r0, [pc, #96]	; (fa30 <bt_le_scan_update+0x78>)
    f9d0:	f00e fdad 	bl	1e52e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f9d4:	0682      	lsls	r2, r0, #26
    f9d6:	d421      	bmi.n	fa1c <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f9d8:	2100      	movs	r1, #0
    f9da:	2206      	movs	r2, #6
    f9dc:	4608      	mov	r0, r1
    f9de:	f001 ff09 	bl	117f4 <bt_conn_lookup_state_le>
		if (conn) {
    f9e2:	4604      	mov	r4, r0
    f9e4:	bb00      	cbnz	r0, fa28 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f9e6:	2202      	movs	r2, #2
    f9e8:	4601      	mov	r1, r0
    f9ea:	f001 ff03 	bl	117f4 <bt_conn_lookup_state_le>
		if (conn) {
    f9ee:	4605      	mov	r5, r0
    f9f0:	2800      	cmp	r0, #0
    f9f2:	d0ea      	beq.n	f9ca <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f9f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    f9f8:	480d      	ldr	r0, [pc, #52]	; (fa30 <bt_le_scan_update+0x78>)
    f9fa:	f00e fd9e 	bl	1e53a <atomic_or>
			bt_conn_unref(conn);
    f9fe:	4628      	mov	r0, r5
    fa00:	f001 fd9a 	bl	11538 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    fa04:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    fa06:	4620      	mov	r0, r4
}
    fa08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    fa0c:	bf15      	itete	ne
    fa0e:	2230      	movne	r2, #48	; 0x30
    fa10:	2212      	moveq	r2, #18
    fa12:	2160      	movne	r1, #96	; 0x60
    fa14:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    fa18:	f7ff bd12 	b.w	f440 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    fa1c:	4618      	mov	r0, r3
    fa1e:	f7ff fb79 	bl	f114 <set_le_scan_enable_legacy>
		if (err) {
    fa22:	2800      	cmp	r0, #0
    fa24:	d0d8      	beq.n	f9d8 <bt_le_scan_update+0x20>
}
    fa26:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    fa28:	f001 fd86 	bl	11538 <bt_conn_unref>
    fa2c:	e7cd      	b.n	f9ca <bt_le_scan_update+0x12>
    fa2e:	bf00      	nop
    fa30:	20008094 	.word	0x20008094

0000fa34 <hci_disconn_complete>:
{
    fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    fa36:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    fa38:	7835      	ldrb	r5, [r6, #0]
    fa3a:	bb45      	cbnz	r5, fa8e <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fa3c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    fa40:	4638      	mov	r0, r7
    fa42:	f001 fd9d 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    fa46:	4604      	mov	r4, r0
    fa48:	b930      	cbnz	r0, fa58 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    fa4a:	463a      	mov	r2, r7
}
    fa4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    fa50:	2145      	movs	r1, #69	; 0x45
    fa52:	480f      	ldr	r0, [pc, #60]	; (fa90 <hci_disconn_complete+0x5c>)
    fa54:	f00c bfa0 	b.w	1c998 <printk>
	conn->err = evt->reason;
    fa58:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fa5a:	4629      	mov	r1, r5
	conn->err = evt->reason;
    fa5c:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fa5e:	f001 fd97 	bl	11590 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    fa62:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    fa64:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    fa66:	2b01      	cmp	r3, #1
    fa68:	d004      	beq.n	fa74 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    fa6a:	4620      	mov	r0, r4
}
    fa6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    fa70:	f001 bd62 	b.w	11538 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fa74:	1d20      	adds	r0, r4, #4
    fa76:	f00e fd5a 	bl	1e52e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    fa7a:	07c3      	lsls	r3, r0, #31
    fa7c:	d5f5      	bpl.n	fa6a <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fa7e:	4620      	mov	r0, r4
    fa80:	2102      	movs	r1, #2
    fa82:	f001 fd85 	bl	11590 <bt_conn_set_state>
		bt_le_scan_update(false);
    fa86:	4628      	mov	r0, r5
    fa88:	f7ff ff96 	bl	f9b8 <bt_le_scan_update>
    fa8c:	e7ed      	b.n	fa6a <hci_disconn_complete+0x36>
}
    fa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa90:	0002416a 	.word	0x0002416a

0000fa94 <le_adv_report>:
{
    fa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    fa98:	f100 0708 	add.w	r7, r0, #8
    fa9c:	b08d      	sub	sp, #52	; 0x34
    fa9e:	4604      	mov	r4, r0
    faa0:	4638      	mov	r0, r7
    faa2:	f010 fda5 	bl	205f0 <net_buf_simple_pull_u8>
    faa6:	f8df 81d0 	ldr.w	r8, [pc, #464]	; fc78 <le_adv_report+0x1e4>
	if (scan_dev_found_cb) {
    faaa:	f8df a1d0 	ldr.w	sl, [pc, #464]	; fc7c <le_adv_report+0x1e8>
    faae:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    fab0:	9b01      	ldr	r3, [sp, #4]
    fab2:	b913      	cbnz	r3, faba <le_adv_report+0x26>
}
    fab4:	b00d      	add	sp, #52	; 0x34
    fab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    faba:	89a3      	ldrh	r3, [r4, #12]
    fabc:	2b08      	cmp	r3, #8
    fabe:	d806      	bhi.n	face <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    fac0:	2145      	movs	r1, #69	; 0x45
    fac2:	486f      	ldr	r0, [pc, #444]	; (fc80 <le_adv_report+0x1ec>)
}
    fac4:	b00d      	add	sp, #52	; 0x34
    fac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    faca:	f00c bf65 	b.w	1c998 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    face:	2109      	movs	r1, #9
    fad0:	4638      	mov	r0, r7
    fad2:	f007 fec3 	bl	1785c <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    fad6:	237f      	movs	r3, #127	; 0x7f
    fad8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    fadc:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fade:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    fae0:	9300      	str	r3, [sp, #0]
    fae2:	18c3      	adds	r3, r0, r3
    fae4:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fae6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    faea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    faee:	23ff      	movs	r3, #255	; 0xff
    faf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    faf4:	2300      	movs	r3, #0
    faf6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    fafa:	7802      	ldrb	r2, [r0, #0]
    fafc:	4606      	mov	r6, r0
    fafe:	2a04      	cmp	r2, #4
    fb00:	bf98      	it	ls
    fb02:	4b60      	ldrls	r3, [pc, #384]	; (fc84 <le_adv_report+0x1f0>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    fb04:	f100 0901 	add.w	r9, r0, #1
    fb08:	bf98      	it	ls
    fb0a:	5c9b      	ldrbls	r3, [r3, r2]
    fb0c:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    fb0e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    fb12:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    fb16:	f00e fd0a 	bl	1e52e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    fb1a:	0645      	lsls	r5, r0, #25
    fb1c:	d50d      	bpl.n	fb3a <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    fb1e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fb22:	0758      	lsls	r0, r3, #29
    fb24:	d509      	bpl.n	fb3a <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    fb26:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    fb28:	4638      	mov	r0, r7
    fb2a:	3101      	adds	r1, #1
    fb2c:	f007 fe7a 	bl	17824 <net_buf_simple_pull>
    fb30:	9b01      	ldr	r3, [sp, #4]
    fb32:	1e58      	subs	r0, r3, #1
    fb34:	b2c3      	uxtb	r3, r0
    fb36:	9301      	str	r3, [sp, #4]
    fb38:	e7ba      	b.n	fab0 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    fb3a:	7873      	ldrb	r3, [r6, #1]
    fb3c:	1e9a      	subs	r2, r3, #2
    fb3e:	2a01      	cmp	r2, #1
    fb40:	d84c      	bhi.n	fbdc <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    fb42:	4649      	mov	r1, r9
    fb44:	a804      	add	r0, sp, #16
    fb46:	f00e fcf5 	bl	1e534 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    fb4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    fb4e:	3b02      	subs	r3, #2
    fb50:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    fb54:	ab04      	add	r3, sp, #16
    fb56:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    fb58:	f8da 3000 	ldr.w	r3, [sl]
    fb5c:	b1a3      	cbz	r3, fb88 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    fb5e:	4638      	mov	r0, r7
    fb60:	f010 fd56 	bl	20610 <net_buf_simple_headroom>
    fb64:	4683      	mov	fp, r0
		buf->len = len;
    fb66:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    fb68:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fb6a:	a804      	add	r0, sp, #16
		buf->len = len;
    fb6c:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fb6e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    fb72:	463b      	mov	r3, r7
    fb74:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    fb78:	f8da c000 	ldr.w	ip, [sl]
    fb7c:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    fb7e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fb80:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fb82:	fa10 f08b 	uxtah	r0, r0, fp
    fb86:	60a0      	str	r0, [r4, #8]
	return list->head;
    fb88:	4b3f      	ldr	r3, [pc, #252]	; (fc88 <le_adv_report+0x1f4>)
    fb8a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d036      	beq.n	fbfe <le_adv_report+0x16a>
    fb90:	f1b3 0208 	subs.w	r2, r3, #8
    fb94:	d033      	beq.n	fbfe <le_adv_report+0x16a>
	return node->next;
    fb96:	681d      	ldr	r5, [r3, #0]
    fb98:	b105      	cbz	r5, fb9c <le_adv_report+0x108>
    fb9a:	3d08      	subs	r5, #8
		if (listener->recv) {
    fb9c:	6813      	ldr	r3, [r2, #0]
    fb9e:	9203      	str	r2, [sp, #12]
    fba0:	b193      	cbz	r3, fbc8 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    fba2:	4638      	mov	r0, r7
    fba4:	f010 fd34 	bl	20610 <net_buf_simple_headroom>
    fba8:	4683      	mov	fp, r0
	state->len = buf->len;
    fbaa:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fbac:	9a03      	ldr	r2, [sp, #12]
    fbae:	9302      	str	r3, [sp, #8]
			buf->len = len;
    fbb0:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    fbb2:	a808      	add	r0, sp, #32
			buf->len = len;
    fbb4:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fbb6:	4639      	mov	r1, r7
    fbb8:	6812      	ldr	r2, [r2, #0]
    fbba:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    fbbc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fbbe:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fbc0:	fa10 f08b 	uxtah	r0, r0, fp
    fbc4:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    fbc6:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fbc8:	b1cd      	cbz	r5, fbfe <le_adv_report+0x16a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fbca:	f115 0308 	adds.w	r3, r5, #8
    fbce:	d002      	beq.n	fbd6 <le_adv_report+0x142>
	return node->next;
    fbd0:	68ab      	ldr	r3, [r5, #8]
    fbd2:	b103      	cbz	r3, fbd6 <le_adv_report+0x142>
    fbd4:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    fbd6:	462a      	mov	r2, r5
    fbd8:	461d      	mov	r5, r3
    fbda:	e7df      	b.n	fb9c <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    fbdc:	2bff      	cmp	r3, #255	; 0xff
    fbde:	d108      	bne.n	fbf2 <le_adv_report+0x15e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fbe0:	2300      	movs	r3, #0
    fbe2:	a906      	add	r1, sp, #24
    fbe4:	9306      	str	r3, [sp, #24]
    fbe6:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    fbea:	a804      	add	r0, sp, #16
    fbec:	f00e fca2 	bl	1e534 <bt_addr_le_copy>
    fbf0:	e7b0      	b.n	fb54 <le_adv_report+0xc0>
    fbf2:	4649      	mov	r1, r9
    fbf4:	2000      	movs	r0, #0
    fbf6:	f00e fd7e 	bl	1e6f6 <bt_lookup_id_addr>
    fbfa:	4601      	mov	r1, r0
    fbfc:	e7f5      	b.n	fbea <le_adv_report+0x156>
    fbfe:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    fc00:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fc04:	f00e fc93 	bl	1e52e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fc08:	0641      	lsls	r1, r0, #25
    fc0a:	f3c0 1580 	ubfx	r5, r0, #6, #1
    fc0e:	d48a      	bmi.n	fb26 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    fc10:	07da      	lsls	r2, r3, #31
    fc12:	d588      	bpl.n	fb26 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    fc14:	2202      	movs	r2, #2
    fc16:	4628      	mov	r0, r5
    fc18:	a904      	add	r1, sp, #16
    fc1a:	f001 fdeb 	bl	117f4 <bt_conn_lookup_state_le>
	if (!conn) {
    fc1e:	4683      	mov	fp, r0
    fc20:	2800      	cmp	r0, #0
    fc22:	d080      	beq.n	fb26 <le_adv_report+0x92>
    fc24:	4640      	mov	r0, r8
    fc26:	f00e fc82 	bl	1e52e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fc2a:	0683      	lsls	r3, r0, #26
    fc2c:	d410      	bmi.n	fc50 <le_adv_report+0x1bc>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    fc2e:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    fc32:	4649      	mov	r1, r9
    fc34:	f00e fc7e 	bl	1e534 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    fc38:	4658      	mov	r0, fp
    fc3a:	f7ff fc67 	bl	f50c <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    fc3e:	b960      	cbnz	r0, fc5a <le_adv_report+0x1c6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    fc40:	4658      	mov	r0, fp
    fc42:	2106      	movs	r1, #6
    fc44:	f001 fca4 	bl	11590 <bt_conn_set_state>
	bt_conn_unref(conn);
    fc48:	4658      	mov	r0, fp
    fc4a:	f001 fc75 	bl	11538 <bt_conn_unref>
	return;
    fc4e:	e76a      	b.n	fb26 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    fc50:	4628      	mov	r0, r5
    fc52:	f7ff fa5f 	bl	f114 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fc56:	2800      	cmp	r0, #0
    fc58:	d0e9      	beq.n	fc2e <le_adv_report+0x19a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fc5a:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fc5c:	2100      	movs	r1, #0
    fc5e:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fc60:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fc64:	f001 fc94 	bl	11590 <bt_conn_set_state>
	bt_conn_unref(conn);
    fc68:	4658      	mov	r0, fp
    fc6a:	f001 fc65 	bl	11538 <bt_conn_unref>
	bt_le_scan_update(false);
    fc6e:	2000      	movs	r0, #0
    fc70:	f7ff fea2 	bl	f9b8 <bt_le_scan_update>
    fc74:	e757      	b.n	fb26 <le_adv_report+0x92>
    fc76:	bf00      	nop
    fc78:	20008094 	.word	0x20008094
    fc7c:	20009c14 	.word	0x20009c14
    fc80:	0002459e 	.word	0x0002459e
    fc84:	00024a91 	.word	0x00024a91
    fc88:	20009c0c 	.word	0x20009c0c

0000fc8c <bt_data_parse>:
{
    fc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fc8e:	4604      	mov	r4, r0
    fc90:	460e      	mov	r6, r1
    fc92:	4617      	mov	r7, r2
	while (ad->len > 1) {
    fc94:	88a3      	ldrh	r3, [r4, #4]
    fc96:	2b01      	cmp	r3, #1
    fc98:	d801      	bhi.n	fc9e <bt_data_parse+0x12>
}
    fc9a:	b003      	add	sp, #12
    fc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    fc9e:	4620      	mov	r0, r4
    fca0:	f010 fca6 	bl	205f0 <net_buf_simple_pull_u8>
		if (len == 0U) {
    fca4:	4605      	mov	r5, r0
    fca6:	2800      	cmp	r0, #0
    fca8:	d0f7      	beq.n	fc9a <bt_data_parse+0xe>
		if (len > ad->len) {
    fcaa:	88a2      	ldrh	r2, [r4, #4]
    fcac:	b283      	uxth	r3, r0
    fcae:	429a      	cmp	r2, r3
    fcb0:	d206      	bcs.n	fcc0 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    fcb2:	2157      	movs	r1, #87	; 0x57
    fcb4:	480c      	ldr	r0, [pc, #48]	; (fce8 <bt_data_parse+0x5c>)
}
    fcb6:	b003      	add	sp, #12
    fcb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fcbc:	f00c be6c 	b.w	1c998 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fcc0:	4620      	mov	r0, r4
    fcc2:	f010 fc95 	bl	205f0 <net_buf_simple_pull_u8>
		data.data = ad->data;
    fcc6:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fcc8:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fccc:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fcce:	4639      	mov	r1, r7
    fcd0:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fcd2:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fcd6:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fcd8:	47b0      	blx	r6
    fcda:	2800      	cmp	r0, #0
    fcdc:	d0dd      	beq.n	fc9a <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fcde:	4629      	mov	r1, r5
    fce0:	4620      	mov	r0, r4
    fce2:	f007 fd9f 	bl	17824 <net_buf_simple_pull>
    fce6:	e7d5      	b.n	fc94 <bt_data_parse+0x8>
    fce8:	000245bc 	.word	0x000245bc

0000fcec <bt_send>:
	return bt_dev.drv->send(buf);
    fcec:	4b02      	ldr	r3, [pc, #8]	; (fcf8 <bt_send+0xc>)
    fcee:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    fcf2:	691b      	ldr	r3, [r3, #16]
    fcf4:	4718      	bx	r3
    fcf6:	bf00      	nop
    fcf8:	20008000 	.word	0x20008000

0000fcfc <bt_hci_cmd_send>:
{
    fcfc:	b538      	push	{r3, r4, r5, lr}
    fcfe:	4605      	mov	r5, r0
	if (!buf) {
    fd00:	460c      	mov	r4, r1
    fd02:	b919      	cbnz	r1, fd0c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fd04:	f7ff f8e0 	bl	eec8 <bt_hci_cmd_create>
		if (!buf) {
    fd08:	4604      	mov	r4, r0
    fd0a:	b1c0      	cbz	r0, fd3e <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fd0c:	f640 4335 	movw	r3, #3125	; 0xc35
    fd10:	429d      	cmp	r5, r3
    fd12:	d10e      	bne.n	fd32 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fd14:	4620      	mov	r0, r4
    fd16:	f7ff ffe9 	bl	fcec <bt_send>
		if (err) {
    fd1a:	4605      	mov	r5, r0
    fd1c:	b138      	cbz	r0, fd2e <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fd1e:	4602      	mov	r2, r0
    fd20:	2145      	movs	r1, #69	; 0x45
    fd22:	4808      	ldr	r0, [pc, #32]	; (fd44 <bt_hci_cmd_send+0x48>)
    fd24:	f00c fe38 	bl	1c998 <printk>
			net_buf_unref(buf);
    fd28:	4620      	mov	r0, r4
    fd2a:	f007 fc9f 	bl	1766c <net_buf_unref>
}
    fd2e:	4628      	mov	r0, r5
    fd30:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    fd32:	4621      	mov	r1, r4
    fd34:	4804      	ldr	r0, [pc, #16]	; (fd48 <bt_hci_cmd_send+0x4c>)
    fd36:	f007 fc6b 	bl	17610 <net_buf_put>
	return 0;
    fd3a:	2500      	movs	r5, #0
    fd3c:	e7f7      	b.n	fd2e <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    fd3e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    fd42:	e7f4      	b.n	fd2e <bt_hci_cmd_send+0x32>
    fd44:	000245d0 	.word	0x000245d0
    fd48:	20008120 	.word	0x20008120

0000fd4c <bt_hci_host_num_completed_packets>:
{
    fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd4e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fd50:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fd52:	7980      	ldrb	r0, [r0, #6]
    fd54:	f007 fb0a 	bl	1736c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fd58:	4621      	mov	r1, r4
    fd5a:	f011 fb38 	bl	213ce <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    fd5e:	4b24      	ldr	r3, [pc, #144]	; (fdf0 <bt_hci_host_num_completed_packets+0xa4>)
    fd60:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    fd64:	069b      	lsls	r3, r3, #26
    fd66:	d541      	bpl.n	fdec <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    fd68:	7d60      	ldrb	r0, [r4, #21]
    fd6a:	f002 f85f 	bl	11e2c <bt_conn_lookup_index>
	if (!conn) {
    fd6e:	4605      	mov	r5, r0
    fd70:	b930      	cbnz	r0, fd80 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    fd72:	7d62      	ldrb	r2, [r4, #21]
    fd74:	2157      	movs	r1, #87	; 0x57
}
    fd76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fd7a:	481e      	ldr	r0, [pc, #120]	; (fdf4 <bt_hci_host_num_completed_packets+0xa8>)
    fd7c:	f00c be0c 	b.w	1c998 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fd80:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fd82:	2b01      	cmp	r3, #1
    fd84:	d002      	beq.n	fd8c <bt_hci_host_num_completed_packets+0x40>
    fd86:	3b07      	subs	r3, #7
    fd88:	2b01      	cmp	r3, #1
    fd8a:	d80f      	bhi.n	fdac <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    fd8c:	4628      	mov	r0, r5
    fd8e:	f001 fbd3 	bl	11538 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    fd92:	2105      	movs	r1, #5
    fd94:	f640 4035 	movw	r0, #3125	; 0xc35
    fd98:	f7ff f896 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    fd9c:	4604      	mov	r4, r0
    fd9e:	b970      	cbnz	r0, fdbe <bt_hci_host_num_completed_packets+0x72>
}
    fda0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    fda4:	2145      	movs	r1, #69	; 0x45
    fda6:	4814      	ldr	r0, [pc, #80]	; (fdf8 <bt_hci_host_num_completed_packets+0xac>)
    fda8:	f00c bdf6 	b.w	1c998 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    fdac:	4813      	ldr	r0, [pc, #76]	; (fdfc <bt_hci_host_num_completed_packets+0xb0>)
    fdae:	2157      	movs	r1, #87	; 0x57
    fdb0:	f00c fdf2 	bl	1c998 <printk>
		bt_conn_unref(conn);
    fdb4:	4628      	mov	r0, r5
}
    fdb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    fdba:	f001 bbbd 	b.w	11538 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    fdbe:	f100 0708 	add.w	r7, r0, #8
    fdc2:	2101      	movs	r1, #1
    fdc4:	4638      	mov	r0, r7
    fdc6:	f007 fd67 	bl	17898 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    fdca:	2501      	movs	r5, #1
    fdcc:	2104      	movs	r1, #4
    fdce:	7005      	strb	r5, [r0, #0]
    fdd0:	4638      	mov	r0, r7
    fdd2:	f007 fd61 	bl	17898 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    fdd6:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    fdd8:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    fdda:	7085      	strb	r5, [r0, #2]
    fddc:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fdde:	4621      	mov	r1, r4
}
    fde0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fde4:	f640 4035 	movw	r0, #3125	; 0xc35
    fde8:	f7ff bf88 	b.w	fcfc <bt_hci_cmd_send>
}
    fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdee:	bf00      	nop
    fdf0:	20008000 	.word	0x20008000
    fdf4:	000245f7 	.word	0x000245f7
    fdf8:	00024656 	.word	0x00024656
    fdfc:	00024625 	.word	0x00024625

0000fe00 <le_ltk_request>:
{
    fe00:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    fe02:	6884      	ldr	r4, [r0, #8]
{
    fe04:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    fe06:	8826      	ldrh	r6, [r4, #0]
    fe08:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    fe0a:	4638      	mov	r0, r7
    fe0c:	f001 fbb8 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    fe10:	4605      	mov	r5, r0
    fe12:	b938      	cbnz	r0, fe24 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe14:	463a      	mov	r2, r7
    fe16:	2145      	movs	r1, #69	; 0x45
    fe18:	4820      	ldr	r0, [pc, #128]	; (fe9c <le_ltk_request+0x9c>)
}
    fe1a:	b007      	add	sp, #28
    fe1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe20:	f00c bdba 	b.w	1c998 <printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    fe24:	af02      	add	r7, sp, #8
    fe26:	f8d4 2002 	ldr.w	r2, [r4, #2]
    fe2a:	f8d4 3006 	ldr.w	r3, [r4, #6]
    fe2e:	9701      	str	r7, [sp, #4]
    fe30:	8961      	ldrh	r1, [r4, #10]
    fe32:	9100      	str	r1, [sp, #0]
    fe34:	f010 fa62 	bl	202fc <bt_smp_request_ltk>
    fe38:	b1f8      	cbz	r0, fe7a <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    fe3a:	2112      	movs	r1, #18
    fe3c:	f242 001a 	movw	r0, #8218	; 0x201a
    fe40:	f7ff f842 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    fe44:	4604      	mov	r4, r0
    fe46:	b940      	cbnz	r0, fe5a <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
    fe48:	2145      	movs	r1, #69	; 0x45
    fe4a:	4815      	ldr	r0, [pc, #84]	; (fea0 <le_ltk_request+0xa0>)
    fe4c:	f00c fda4 	bl	1c998 <printk>
	bt_conn_unref(conn);
    fe50:	4628      	mov	r0, r5
    fe52:	f001 fb71 	bl	11538 <bt_conn_unref>
}
    fe56:	b007      	add	sp, #28
    fe58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe5a:	2112      	movs	r1, #18
    fe5c:	3008      	adds	r0, #8
    fe5e:	f007 fd1b 	bl	17898 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    fe62:	4639      	mov	r1, r7
    fe64:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    fe66:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    fe6a:	f00e fa4d 	bl	1e308 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    fe6e:	4621      	mov	r1, r4
    fe70:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fe74:	f7ff ff42 	bl	fcfc <bt_hci_cmd_send>
    fe78:	e7ea      	b.n	fe50 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    fe7a:	2102      	movs	r1, #2
    fe7c:	f242 001b 	movw	r0, #8219	; 0x201b
    fe80:	f7ff f822 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    fe84:	4604      	mov	r4, r0
    fe86:	2800      	cmp	r0, #0
    fe88:	d0de      	beq.n	fe48 <le_ltk_request+0x48>
    fe8a:	2102      	movs	r1, #2
    fe8c:	3008      	adds	r0, #8
    fe8e:	f007 fd03 	bl	17898 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fe92:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    fe94:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fe96:	f242 001b 	movw	r0, #8219	; 0x201b
    fe9a:	e7eb      	b.n	fe74 <le_ltk_request+0x74>
    fe9c:	00024141 	.word	0x00024141
    fea0:	0002467e 	.word	0x0002467e

0000fea4 <conn_auto_initiate>:
{
    fea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fea6:	7b43      	ldrb	r3, [r0, #13]
{
    fea8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    feaa:	2b07      	cmp	r3, #7
    feac:	d15d      	bne.n	ff6a <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    feae:	1d06      	adds	r6, r0, #4
    feb0:	4630      	mov	r0, r6
    feb2:	f00e fb3c 	bl	1e52e <atomic_get>
    feb6:	0483      	lsls	r3, r0, #18
    feb8:	d41b      	bmi.n	fef2 <conn_auto_initiate+0x4e>
    feba:	78e3      	ldrb	r3, [r4, #3]
    febc:	b123      	cbz	r3, fec8 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    febe:	4b2c      	ldr	r3, [pc, #176]	; (ff70 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    fec0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fec4:	071d      	lsls	r5, r3, #28
    fec6:	d514      	bpl.n	fef2 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    fec8:	2102      	movs	r1, #2
    feca:	f242 0016 	movw	r0, #8214	; 0x2016
    fece:	f7fe fffb 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
    fed2:	4605      	mov	r5, r0
    fed4:	b168      	cbz	r0, fef2 <conn_auto_initiate+0x4e>
    fed6:	2102      	movs	r1, #2
    fed8:	3008      	adds	r0, #8
    feda:	f007 fcdd 	bl	17898 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    fede:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fee0:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    fee2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fee4:	f242 0016 	movw	r0, #8214	; 0x2016
}
    fee8:	b004      	add	sp, #16
    feea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    feee:	f7ff bf05 	b.w	fcfc <bt_hci_cmd_send>
    fef2:	4630      	mov	r0, r6
    fef4:	f00e fb1b 	bl	1e52e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fef8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    fefc:	4d1c      	ldr	r5, [pc, #112]	; (ff70 <conn_auto_initiate+0xcc>)
    fefe:	f3c0 3100 	ubfx	r1, r0, #12, #1
    ff02:	d116      	bne.n	ff32 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    ff04:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    ff08:	07d8      	lsls	r0, r3, #31
    ff0a:	d512      	bpl.n	ff32 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    ff0c:	2302      	movs	r3, #2
    ff0e:	4620      	mov	r0, r4
    ff10:	461a      	mov	r2, r3
    ff12:	9100      	str	r1, [sp, #0]
    ff14:	f00e fc62 	bl	1e7dc <bt_le_set_phy>
		if (!err) {
    ff18:	4602      	mov	r2, r0
    ff1a:	b930      	cbnz	r0, ff2a <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ff1c:	2180      	movs	r1, #128	; 0x80
    ff1e:	4630      	mov	r0, r6
}
    ff20:	b004      	add	sp, #16
    ff22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff26:	f00e bb08 	b.w	1e53a <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    ff2a:	2145      	movs	r1, #69	; 0x45
    ff2c:	4811      	ldr	r0, [pc, #68]	; (ff74 <conn_auto_initiate+0xd0>)
    ff2e:	f00c fd33 	bl	1c998 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    ff32:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    ff36:	069a      	lsls	r2, r3, #26
    ff38:	d517      	bpl.n	ff6a <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    ff3a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    ff3e:	689b      	ldr	r3, [r3, #8]
    ff40:	079b      	lsls	r3, r3, #30
    ff42:	d512      	bpl.n	ff6a <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    ff44:	f10d 010e 	add.w	r1, sp, #14
    ff48:	a803      	add	r0, sp, #12
    ff4a:	f7ff f869 	bl	f020 <hci_le_read_max_data_len>
			if (!err) {
    ff4e:	b960      	cbnz	r0, ff6a <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    ff50:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ff54:	4620      	mov	r0, r4
    ff56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ff5a:	f00e fc22 	bl	1e7a2 <bt_le_set_data_len>
				if (err) {
    ff5e:	4602      	mov	r2, r0
    ff60:	b118      	cbz	r0, ff6a <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    ff62:	2145      	movs	r1, #69	; 0x45
    ff64:	4804      	ldr	r0, [pc, #16]	; (ff78 <conn_auto_initiate+0xd4>)
    ff66:	f00c fd17 	bl	1c998 <printk>
}
    ff6a:	b004      	add	sp, #16
    ff6c:	bd70      	pop	{r4, r5, r6, pc}
    ff6e:	bf00      	nop
    ff70:	20008000 	.word	0x20008000
    ff74:	0002469a 	.word	0x0002469a
    ff78:	000246b9 	.word	0x000246b9

0000ff7c <le_phy_update_complete>:
{
    ff7c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ff7e:	6883      	ldr	r3, [r0, #8]
    ff80:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    ff84:	4628      	mov	r0, r5
    ff86:	f001 fafb 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    ff8a:	4604      	mov	r4, r0
    ff8c:	b930      	cbnz	r0, ff9c <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff8e:	462a      	mov	r2, r5
}
    ff90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff94:	2145      	movs	r1, #69	; 0x45
    ff96:	480c      	ldr	r0, [pc, #48]	; (ffc8 <le_phy_update_complete+0x4c>)
    ff98:	f00c bcfe 	b.w	1c998 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    ff9c:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ff9e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ffa2:	4628      	mov	r0, r5
    ffa4:	f00e fae2 	bl	1e56c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    ffa8:	0603      	lsls	r3, r0, #24
    ffaa:	d507      	bpl.n	ffbc <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ffac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ffb0:	4628      	mov	r0, r5
    ffb2:	f00e fac2 	bl	1e53a <atomic_or>
		conn_auto_initiate(conn);
    ffb6:	4620      	mov	r0, r4
    ffb8:	f7ff ff74 	bl	fea4 <conn_auto_initiate>
	bt_conn_unref(conn);
    ffbc:	4620      	mov	r0, r4
}
    ffbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ffc2:	f001 bab9 	b.w	11538 <bt_conn_unref>
    ffc6:	bf00      	nop
    ffc8:	00024141 	.word	0x00024141

0000ffcc <le_remote_feat_complete>:
{
    ffcc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    ffce:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ffd0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ffd4:	4630      	mov	r0, r6
    ffd6:	f001 fad3 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
    ffda:	4604      	mov	r4, r0
    ffdc:	b930      	cbnz	r0, ffec <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ffde:	4632      	mov	r2, r6
}
    ffe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ffe4:	2145      	movs	r1, #69	; 0x45
    ffe6:	480b      	ldr	r0, [pc, #44]	; (10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>)
    ffe8:	f00c bcd6 	b.w	1c998 <printk>
	if (!evt->status) {
    ffec:	782b      	ldrb	r3, [r5, #0]
    ffee:	b923      	cbnz	r3, fffa <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fff0:	2208      	movs	r2, #8
    fff2:	1ce9      	adds	r1, r5, #3
    fff4:	30ac      	adds	r0, #172	; 0xac
    fff6:	f00e f987 	bl	1e308 <memcpy>
    fffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fffe:	1d20      	adds	r0, r4, #4
   10000:	f00e fa9b 	bl	1e53a <atomic_or>
	conn_auto_initiate(conn);
   10004:	4620      	mov	r0, r4
   10006:	f7ff ff4d 	bl	fea4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1000a:	4620      	mov	r0, r4
}
   1000c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   10010:	f001 ba92 	b.w	11538 <bt_conn_unref>
   10014:	00024141 	.word	0x00024141

00010018 <le_conn_param_neg_reply>:
{
   10018:	b570      	push	{r4, r5, r6, lr}
   1001a:	4606      	mov	r6, r0
   1001c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1001e:	f242 0021 	movw	r0, #8225	; 0x2021
   10022:	2103      	movs	r1, #3
   10024:	f7fe ff50 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   10028:	4604      	mov	r4, r0
   1002a:	b928      	cbnz	r0, 10038 <le_conn_param_neg_reply+0x20>
}
   1002c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   10030:	2145      	movs	r1, #69	; 0x45
   10032:	4808      	ldr	r0, [pc, #32]	; (10054 <le_conn_param_neg_reply+0x3c>)
   10034:	f00c bcb0 	b.w	1c998 <printk>
   10038:	2103      	movs	r1, #3
   1003a:	3008      	adds	r0, #8
   1003c:	f007 fc2c 	bl	17898 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   10040:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   10042:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   10044:	4621      	mov	r1, r4
}
   10046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1004a:	f242 0021 	movw	r0, #8225	; 0x2021
   1004e:	f7ff be55 	b.w	fcfc <bt_hci_cmd_send>
   10052:	bf00      	nop
   10054:	000246da 	.word	0x000246da

00010058 <le_conn_param_req>:
{
   10058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1005a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1005c:	78d9      	ldrb	r1, [r3, #3]
   1005e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   10060:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   10062:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10066:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1006a:	7959      	ldrb	r1, [r3, #5]
   1006c:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1006e:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   10070:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10074:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   10078:	799a      	ldrb	r2, [r3, #6]
   1007a:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1007c:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   1007e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10082:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   10086:	7a1a      	ldrb	r2, [r3, #8]
   10088:	7a5b      	ldrb	r3, [r3, #9]
   1008a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1008e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   10092:	f001 fa75 	bl	11580 <bt_conn_lookup_handle>
	if (!conn) {
   10096:	4606      	mov	r6, r0
   10098:	b950      	cbnz	r0, 100b0 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1009a:	2145      	movs	r1, #69	; 0x45
   1009c:	481c      	ldr	r0, [pc, #112]	; (10110 <le_conn_param_req+0xb8>)
   1009e:	4622      	mov	r2, r4
   100a0:	f00c fc7a 	bl	1c998 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   100a4:	2102      	movs	r1, #2
   100a6:	4620      	mov	r0, r4
   100a8:	f7ff ffb6 	bl	10018 <le_conn_param_neg_reply>
}
   100ac:	b003      	add	sp, #12
   100ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   100b0:	4669      	mov	r1, sp
   100b2:	f001 f885 	bl	111c0 <le_param_req>
   100b6:	b938      	cbnz	r0, 100c8 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   100b8:	211e      	movs	r1, #30
   100ba:	4620      	mov	r0, r4
   100bc:	f7ff ffac 	bl	10018 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   100c0:	4630      	mov	r0, r6
   100c2:	f001 fa39 	bl	11538 <bt_conn_unref>
   100c6:	e7f1      	b.n	100ac <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   100c8:	210e      	movs	r1, #14
   100ca:	f242 0020 	movw	r0, #8224	; 0x2020
   100ce:	f7fe fefb 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   100d2:	4605      	mov	r5, r0
   100d4:	2800      	cmp	r0, #0
   100d6:	d0f3      	beq.n	100c0 <le_conn_param_req+0x68>
   100d8:	210e      	movs	r1, #14
   100da:	3008      	adds	r0, #8
   100dc:	f007 fbdc 	bl	17898 <net_buf_simple_add>
   100e0:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   100e2:	220e      	movs	r2, #14
   100e4:	2100      	movs	r1, #0
   100e6:	f00e f93a 	bl	1e35e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   100ea:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   100ee:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   100f0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   100f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
   100f6:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   100f8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   100fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   100fe:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
   10102:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   10104:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10108:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1010a:	f7ff fdf7 	bl	fcfc <bt_hci_cmd_send>
   1010e:	e7d7      	b.n	100c0 <le_conn_param_req+0x68>
   10110:	00024141 	.word	0x00024141

00010114 <hci_tx_thread>:
{
   10114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   10118:	f8df 8128 	ldr.w	r8, [pc, #296]	; 10244 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
   1011c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 10248 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
   10120:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   10124:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   10128:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   1012a:	f36f 3310 	bfc	r3, #12, #5
   1012e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   10132:	f001 f997 	bl	11464 <bt_conn_prepare_events>
   10136:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   10138:	f04f 32ff 	mov.w	r2, #4294967295
   1013c:	f04f 33ff 	mov.w	r3, #4294967295
   10140:	4631      	mov	r1, r6
   10142:	4840      	ldr	r0, [pc, #256]	; (10244 <hci_tx_thread+0x130>)
   10144:	f00c fa24 	bl	1c590 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   10148:	b158      	cbz	r0, 10162 <hci_tx_thread+0x4e>
   1014a:	f241 4271 	movw	r2, #5233	; 0x1471
   1014e:	4649      	mov	r1, r9
   10150:	483e      	ldr	r0, [pc, #248]	; (1024c <hci_tx_thread+0x138>)
   10152:	f00c fc21 	bl	1c998 <printk>
   10156:	4040      	eors	r0, r0
   10158:	f380 8811 	msr	BASEPRI, r0
   1015c:	f04f 0003 	mov.w	r0, #3
   10160:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10162:	4d3b      	ldr	r5, [pc, #236]	; (10250 <hci_tx_thread+0x13c>)
{
   10164:	4f37      	ldr	r7, [pc, #220]	; (10244 <hci_tx_thread+0x130>)
   10166:	f105 0be8 	add.w	fp, r5, #232	; 0xe8
	for (; count; ev++, count--) {
   1016a:	b916      	cbnz	r6, 10172 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   1016c:	f00b f912 	bl	1b394 <z_impl_k_yield>
	while (1) {
   10170:	e7d8      	b.n	10124 <hci_tx_thread+0x10>
		switch (ev->state) {
   10172:	68fa      	ldr	r2, [r7, #12]
   10174:	f3c2 3204 	ubfx	r2, r2, #12, #5
   10178:	2a01      	cmp	r2, #1
   1017a:	d953      	bls.n	10224 <hci_tx_thread+0x110>
   1017c:	2a04      	cmp	r2, #4
   1017e:	d15b      	bne.n	10238 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
   10180:	7b3b      	ldrb	r3, [r7, #12]
   10182:	2b00      	cmp	r3, #0
   10184:	d151      	bne.n	1022a <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   10186:	2200      	movs	r2, #0
   10188:	2300      	movs	r3, #0
   1018a:	4832      	ldr	r0, [pc, #200]	; (10254 <hci_tx_thread+0x140>)
   1018c:	f007 f9ec 	bl	17568 <net_buf_get>
	BT_ASSERT(buf);
   10190:	4604      	mov	r4, r0
   10192:	b958      	cbnz	r0, 101ac <hci_tx_thread+0x98>
   10194:	f241 420e 	movw	r2, #5134	; 0x140e
   10198:	4649      	mov	r1, r9
   1019a:	482c      	ldr	r0, [pc, #176]	; (1024c <hci_tx_thread+0x138>)
   1019c:	f00c fbfc 	bl	1c998 <printk>
   101a0:	4040      	eors	r0, r0
   101a2:	f380 8811 	msr	BASEPRI, r0
   101a6:	f04f 0003 	mov.w	r0, #3
   101aa:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   101ac:	f04f 33ff 	mov.w	r3, #4294967295
   101b0:	f04f 32ff 	mov.w	r2, #4294967295
   101b4:	4658      	mov	r0, fp
   101b6:	f00b fa6b 	bl	1b690 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   101ba:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   101be:	b153      	cbz	r3, 101d6 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   101c0:	2145      	movs	r1, #69	; 0x45
   101c2:	4825      	ldr	r0, [pc, #148]	; (10258 <hci_tx_thread+0x144>)
   101c4:	f00c fbe8 	bl	1c998 <printk>
		net_buf_unref(bt_dev.sent_cmd);
   101c8:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   101cc:	f007 fa4e 	bl	1766c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   101d0:	2300      	movs	r3, #0
   101d2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   101d6:	4620      	mov	r0, r4
   101d8:	f007 fa8c 	bl	176f4 <net_buf_ref>
   101dc:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
	err = bt_send(buf);
   101e0:	4620      	mov	r0, r4
   101e2:	f7ff fd83 	bl	fcec <bt_send>
	if (err) {
   101e6:	4602      	mov	r2, r0
   101e8:	b1e0      	cbz	r0, 10224 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   101ea:	2145      	movs	r1, #69	; 0x45
   101ec:	481b      	ldr	r0, [pc, #108]	; (1025c <hci_tx_thread+0x148>)
   101ee:	f00c fbd3 	bl	1c998 <printk>
	z_impl_k_sem_give(sem);
   101f2:	481b      	ldr	r0, [pc, #108]	; (10260 <hci_tx_thread+0x14c>)
   101f4:	f00b fa10 	bl	1b618 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   101f8:	4620      	mov	r0, r4
   101fa:	f007 f8bf 	bl	1737c <net_buf_id>
   101fe:	220c      	movs	r2, #12
   10200:	4b18      	ldr	r3, [pc, #96]	; (10264 <hci_tx_thread+0x150>)
   10202:	211f      	movs	r1, #31
   10204:	fb02 3000 	mla	r0, r2, r0, r3
   10208:	4622      	mov	r2, r4
   1020a:	8840      	ldrh	r0, [r0, #2]
   1020c:	f7fe fd4e 	bl	ecac <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   10210:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   10214:	f007 fa2a 	bl	1766c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10218:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1021a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1021c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		net_buf_unref(buf);
   10220:	f007 fa24 	bl	1766c <net_buf_unref>
	for (; count; ev++, count--) {
   10224:	3714      	adds	r7, #20
   10226:	3e01      	subs	r6, #1
   10228:	e79f      	b.n	1016a <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1022a:	2b01      	cmp	r3, #1
   1022c:	d1fa      	bne.n	10224 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
   1022e:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   10230:	3834      	subs	r0, #52	; 0x34
   10232:	f001 fd7f 	bl	11d34 <bt_conn_process_tx>
   10236:	e7f5      	b.n	10224 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   10238:	2157      	movs	r1, #87	; 0x57
   1023a:	480b      	ldr	r0, [pc, #44]	; (10268 <hci_tx_thread+0x154>)
   1023c:	f00c fbac 	bl	1c998 <printk>
   10240:	e7f0      	b.n	10224 <hci_tx_thread+0x110>
   10242:	bf00      	nop
   10244:	200082c4 	.word	0x200082c4
   10248:	0002425e 	.word	0x0002425e
   1024c:	00022dd6 	.word	0x00022dd6
   10250:	20008000 	.word	0x20008000
   10254:	20008120 	.word	0x20008120
   10258:	000246f9 	.word	0x000246f9
   1025c:	000245d0 	.word	0x000245d0
   10260:	200080e8 	.word	0x200080e8
   10264:	20009be8 	.word	0x20009be8
   10268:	00024719 	.word	0x00024719

0001026c <hci_event_prio>:
{
   1026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10270:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   10272:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   10276:	4630      	mov	r0, r6
   10278:	f010 f9ca 	bl	20610 <net_buf_simple_headroom>
	state->len = buf->len;
   1027c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   10280:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   10282:	f1b8 0f01 	cmp.w	r8, #1
   10286:	d80b      	bhi.n	102a0 <hci_event_prio+0x34>
   10288:	f641 02ae 	movw	r2, #6318	; 0x18ae
   1028c:	491a      	ldr	r1, [pc, #104]	; (102f8 <hci_event_prio+0x8c>)
   1028e:	481b      	ldr	r0, [pc, #108]	; (102fc <hci_event_prio+0x90>)
   10290:	f00c fb82 	bl	1c998 <printk>
   10294:	4040      	eors	r0, r0
   10296:	f380 8811 	msr	BASEPRI, r0
   1029a:	f04f 0003 	mov.w	r0, #3
   1029e:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   102a0:	4630      	mov	r0, r6
   102a2:	2102      	movs	r1, #2
   102a4:	f007 fada 	bl	1785c <net_buf_simple_pull_mem>
   102a8:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   102aa:	7800      	ldrb	r0, [r0, #0]
   102ac:	f00e f91e 	bl	1e4ec <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   102b0:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   102b2:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   102b4:	d40b      	bmi.n	102ce <hci_event_prio+0x62>
   102b6:	f641 02b2 	movw	r2, #6322	; 0x18b2
   102ba:	490f      	ldr	r1, [pc, #60]	; (102f8 <hci_event_prio+0x8c>)
   102bc:	480f      	ldr	r0, [pc, #60]	; (102fc <hci_event_prio+0x90>)
   102be:	f00c fb6b 	bl	1c998 <printk>
   102c2:	4040      	eors	r0, r0
   102c4:	f380 8811 	msr	BASEPRI, r0
   102c8:	f04f 0003 	mov.w	r0, #3
   102cc:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   102ce:	2305      	movs	r3, #5
   102d0:	4621      	mov	r1, r4
   102d2:	4a0b      	ldr	r2, [pc, #44]	; (10300 <hci_event_prio+0x94>)
   102d4:	7838      	ldrb	r0, [r7, #0]
   102d6:	f7fe fbe1 	bl	ea9c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   102da:	07b3      	lsls	r3, r6, #30
   102dc:	d507      	bpl.n	102ee <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   102de:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   102e0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   102e4:	fa10 f585 	uxtah	r5, r0, r5
   102e8:	60a5      	str	r5, [r4, #8]
}
   102ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   102ee:	4620      	mov	r0, r4
}
   102f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   102f4:	f007 b9ba 	b.w	1766c <net_buf_unref>
   102f8:	0002425e 	.word	0x0002425e
   102fc:	00022dd6 	.word	0x00022dd6
   10300:	000220fc 	.word	0x000220fc

00010304 <bt_recv>:
{
   10304:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   10306:	7d02      	ldrb	r2, [r0, #20]
   10308:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1030a:	2a01      	cmp	r2, #1
   1030c:	d007      	beq.n	1031e <bt_recv+0x1a>
   1030e:	2a03      	cmp	r2, #3
   10310:	d113      	bne.n	1033a <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   10312:	480f      	ldr	r0, [pc, #60]	; (10350 <bt_recv+0x4c>)
   10314:	4629      	mov	r1, r5
   10316:	f007 f97b 	bl	17610 <net_buf_put>
		return 0;
   1031a:	2000      	movs	r0, #0
   1031c:	e00c      	b.n	10338 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1031e:	6883      	ldr	r3, [r0, #8]
   10320:	7818      	ldrb	r0, [r3, #0]
   10322:	f00e f8e3 	bl	1e4ec <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   10326:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10328:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1032a:	d502      	bpl.n	10332 <bt_recv+0x2e>
			hci_event_prio(buf);
   1032c:	4628      	mov	r0, r5
   1032e:	f7ff ff9d 	bl	1026c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   10332:	f014 0002 	ands.w	r0, r4, #2
   10336:	d1ec      	bne.n	10312 <bt_recv+0xe>
}
   10338:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1033a:	2145      	movs	r1, #69	; 0x45
   1033c:	4805      	ldr	r0, [pc, #20]	; (10354 <bt_recv+0x50>)
   1033e:	f00c fb2b 	bl	1c998 <printk>
		net_buf_unref(buf);
   10342:	4628      	mov	r0, r5
   10344:	f007 f992 	bl	1766c <net_buf_unref>
		return -EINVAL;
   10348:	f06f 0015 	mvn.w	r0, #21
   1034c:	e7f4      	b.n	10338 <bt_recv+0x34>
   1034e:	bf00      	nop
   10350:	20008104 	.word	0x20008104
   10354:	0002473f 	.word	0x0002473f

00010358 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   10358:	4a08      	ldr	r2, [pc, #32]	; (1037c <bt_hci_driver_register+0x24>)
{
   1035a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1035c:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   10360:	b930      	cbnz	r0, 10370 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   10362:	68d9      	ldr	r1, [r3, #12]
   10364:	b139      	cbz	r1, 10376 <bt_hci_driver_register+0x1e>
   10366:	6919      	ldr	r1, [r3, #16]
   10368:	b129      	cbz	r1, 10376 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1036a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   1036e:	4770      	bx	lr
		return -EALREADY;
   10370:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10374:	4770      	bx	lr
		return -EINVAL;
   10376:	f06f 0015 	mvn.w	r0, #21
}
   1037a:	4770      	bx	lr
   1037c:	20008000 	.word	0x20008000

00010380 <bt_finalize_init>:
{
   10380:	b508      	push	{r3, lr}
   10382:	2102      	movs	r1, #2
   10384:	4803      	ldr	r0, [pc, #12]	; (10394 <bt_finalize_init+0x14>)
   10386:	f00e f8d8 	bl	1e53a <atomic_or>
}
   1038a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   1038e:	2000      	movs	r0, #0
   10390:	f7ff bb12 	b.w	f9b8 <bt_le_scan_update>
   10394:	20008094 	.word	0x20008094

00010398 <init_work>:
{
   10398:	b510      	push	{r4, lr}
	err = bt_init();
   1039a:	f7f8 fe05 	bl	8fa8 <bt_init>
	if (ready_cb) {
   1039e:	4b03      	ldr	r3, [pc, #12]	; (103ac <init_work+0x14>)
   103a0:	681b      	ldr	r3, [r3, #0]
   103a2:	b113      	cbz	r3, 103aa <init_work+0x12>
}
   103a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   103a8:	4718      	bx	r3
}
   103aa:	bd10      	pop	{r4, pc}
   103ac:	20009c08 	.word	0x20009c08

000103b0 <bt_enable>:
{
   103b0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   103b4:	4d35      	ldr	r5, [pc, #212]	; (1048c <bt_enable+0xdc>)
{
   103b6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   103b8:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   103bc:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   103be:	b94b      	cbnz	r3, 103d4 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   103c0:	2145      	movs	r1, #69	; 0x45
   103c2:	4833      	ldr	r0, [pc, #204]	; (10490 <bt_enable+0xe0>)
   103c4:	f00c fae8 	bl	1c998 <printk>
		return -ENODEV;
   103c8:	f06f 0412 	mvn.w	r4, #18
}
   103cc:	4620      	mov	r0, r4
   103ce:	b008      	add	sp, #32
   103d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   103d4:	2100      	movs	r1, #0
   103d6:	f105 0094 	add.w	r0, r5, #148	; 0x94
   103da:	f00e f8b9 	bl	1e550 <atomic_test_and_set_bit>
   103de:	2800      	cmp	r0, #0
   103e0:	d151      	bne.n	10486 <bt_enable+0xd6>
		err = bt_settings_init();
   103e2:	f7fe f8c7 	bl	e574 <bt_settings_init>
		if (err) {
   103e6:	4604      	mov	r4, r0
   103e8:	2800      	cmp	r0, #0
   103ea:	d1ef      	bne.n	103cc <bt_enable+0x1c>
	ready_cb = cb;
   103ec:	4b29      	ldr	r3, [pc, #164]	; (10494 <bt_enable+0xe4>)
   103ee:	f04f 0800 	mov.w	r8, #0
   103f2:	f04f 0900 	mov.w	r9, #0
   103f6:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   103f8:	f06f 0308 	mvn.w	r3, #8
   103fc:	e9cd 0000 	strd	r0, r0, [sp]
   10400:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10404:	9004      	str	r0, [sp, #16]
   10406:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1040a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1040e:	4b22      	ldr	r3, [pc, #136]	; (10498 <bt_enable+0xe8>)
   10410:	4922      	ldr	r1, [pc, #136]	; (1049c <bt_enable+0xec>)
   10412:	4823      	ldr	r0, [pc, #140]	; (104a0 <bt_enable+0xf0>)
   10414:	f00b fa28 	bl	1b868 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10418:	4922      	ldr	r1, [pc, #136]	; (104a4 <bt_enable+0xf4>)
   1041a:	4821      	ldr	r0, [pc, #132]	; (104a0 <bt_enable+0xf0>)
   1041c:	f011 f83e 	bl	2149c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10420:	f06f 0307 	mvn.w	r3, #7
   10424:	f640 0298 	movw	r2, #2200	; 0x898
   10428:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1042c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10430:	e9cd 4400 	strd	r4, r4, [sp]
   10434:	4b1c      	ldr	r3, [pc, #112]	; (104a8 <bt_enable+0xf8>)
   10436:	491d      	ldr	r1, [pc, #116]	; (104ac <bt_enable+0xfc>)
   10438:	9404      	str	r4, [sp, #16]
   1043a:	481d      	ldr	r0, [pc, #116]	; (104b0 <bt_enable+0x100>)
   1043c:	f00b fa14 	bl	1b868 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10440:	491c      	ldr	r1, [pc, #112]	; (104b4 <bt_enable+0x104>)
   10442:	481b      	ldr	r0, [pc, #108]	; (104b0 <bt_enable+0x100>)
   10444:	f011 f82a 	bl	2149c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   10448:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1044c:	68db      	ldr	r3, [r3, #12]
   1044e:	4798      	blx	r3
	if (err) {
   10450:	4604      	mov	r4, r0
   10452:	b128      	cbz	r0, 10460 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   10454:	4602      	mov	r2, r0
   10456:	2145      	movs	r1, #69	; 0x45
   10458:	4817      	ldr	r0, [pc, #92]	; (104b8 <bt_enable+0x108>)
   1045a:	f00c fa9d 	bl	1c998 <printk>
		return err;
   1045e:	e7b5      	b.n	103cc <bt_enable+0x1c>
	if (!cb) {
   10460:	b926      	cbnz	r6, 1046c <bt_enable+0xbc>
}
   10462:	b008      	add	sp, #32
   10464:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   10468:	f7f8 bd9e 	b.w	8fa8 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1046c:	4601      	mov	r1, r0
   1046e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   10472:	f00e f86d 	bl	1e550 <atomic_test_and_set_bit>
   10476:	2800      	cmp	r0, #0
   10478:	d1a8      	bne.n	103cc <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   1047a:	4810      	ldr	r0, [pc, #64]	; (104bc <bt_enable+0x10c>)
   1047c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   10480:	f010 ff9a 	bl	213b8 <k_queue_append>
   10484:	e7a2      	b.n	103cc <bt_enable+0x1c>
		return -EALREADY;
   10486:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1048a:	e79f      	b.n	103cc <bt_enable+0x1c>
   1048c:	20008000 	.word	0x20008000
   10490:	0002486b 	.word	0x0002486b
   10494:	20009c08 	.word	0x20009c08
   10498:	00010115 	.word	0x00010115
   1049c:	2000c808 	.word	0x2000c808
   104a0:	20008870 	.word	0x20008870
   104a4:	00024889 	.word	0x00024889
   104a8:	0000eb89 	.word	0x0000eb89
   104ac:	2000bf70 	.word	0x2000bf70
   104b0:	200087e0 	.word	0x200087e0
   104b4:	0002488f 	.word	0x0002488f
   104b8:	00024895 	.word	0x00024895
   104bc:	20009630 	.word	0x20009630

000104c0 <bt_get_name>:
}
   104c0:	4800      	ldr	r0, [pc, #0]	; (104c4 <bt_get_name+0x4>)
   104c2:	4770      	bx	lr
   104c4:	00022c07 	.word	0x00022c07

000104c8 <bt_id_create>:
{
   104c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   104ca:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   104cc:	4605      	mov	r5, r0
   104ce:	b918      	cbnz	r0, 104d8 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   104d0:	b314      	cbz	r4, 10518 <bt_id_create+0x50>
		return -EINVAL;
   104d2:	f06f 0415 	mvn.w	r4, #21
   104d6:	e01c      	b.n	10512 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   104d8:	2300      	movs	r3, #0
   104da:	4669      	mov	r1, sp
   104dc:	9300      	str	r3, [sp, #0]
   104de:	f8cd 3003 	str.w	r3, [sp, #3]
   104e2:	f00e f840 	bl	1e566 <bt_addr_le_cmp>
   104e6:	2800      	cmp	r0, #0
   104e8:	d0f2      	beq.n	104d0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   104ea:	782b      	ldrb	r3, [r5, #0]
   104ec:	2b01      	cmp	r3, #1
   104ee:	d104      	bne.n	104fa <bt_id_create+0x32>
   104f0:	79ab      	ldrb	r3, [r5, #6]
   104f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   104f6:	2bc0      	cmp	r3, #192	; 0xc0
   104f8:	d004      	beq.n	10504 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   104fa:	2145      	movs	r1, #69	; 0x45
   104fc:	480d      	ldr	r0, [pc, #52]	; (10534 <bt_id_create+0x6c>)
   104fe:	f00c fa4b 	bl	1c998 <printk>
			return -EINVAL;
   10502:	e7e6      	b.n	104d2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   10504:	4628      	mov	r0, r5
   10506:	f7fe f911 	bl	e72c <id_find>
   1050a:	2800      	cmp	r0, #0
   1050c:	dbe0      	blt.n	104d0 <bt_id_create+0x8>
			return -EALREADY;
   1050e:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   10512:	4620      	mov	r0, r4
   10514:	b003      	add	sp, #12
   10516:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10518:	4b07      	ldr	r3, [pc, #28]	; (10538 <bt_id_create+0x70>)
   1051a:	79dc      	ldrb	r4, [r3, #7]
   1051c:	2c01      	cmp	r4, #1
   1051e:	d006      	beq.n	1052e <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10520:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   10522:	4629      	mov	r1, r5
   10524:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   10526:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   10528:	f7fe faf8 	bl	eb1c <id_create.constprop.0>
	return new_id;
   1052c:	e7f1      	b.n	10512 <bt_id_create+0x4a>
		return -ENOMEM;
   1052e:	f06f 040b 	mvn.w	r4, #11
   10532:	e7ee      	b.n	10512 <bt_id_create+0x4a>
   10534:	000248b6 	.word	0x000248b6
   10538:	20008000 	.word	0x20008000

0001053c <bt_setup_public_id_addr>:
{
   1053c:	b570      	push	{r4, r5, r6, lr}
   1053e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10540:	2100      	movs	r1, #0
   10542:	f241 0009 	movw	r0, #4105	; 0x1009
   10546:	aa01      	add	r2, sp, #4
   10548:	f7fe fd08 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
   1054c:	4e1d      	ldr	r6, [pc, #116]	; (105c4 <bt_setup_public_id_addr+0x88>)
   1054e:	4604      	mov	r4, r0
   10550:	b138      	cbz	r0, 10562 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   10552:	2157      	movs	r1, #87	; 0x57
   10554:	481c      	ldr	r0, [pc, #112]	; (105c8 <bt_setup_public_id_addr+0x8c>)
   10556:	f00c fa1f 	bl	1c998 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1055a:	2300      	movs	r3, #0
   1055c:	71f3      	strb	r3, [r6, #7]
}
   1055e:	b006      	add	sp, #24
   10560:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   10562:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   10564:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10566:	689d      	ldr	r5, [r3, #8]
   10568:	a904      	add	r1, sp, #16
   1056a:	3501      	adds	r5, #1
   1056c:	9004      	str	r0, [sp, #16]
   1056e:	f8ad 0014 	strh.w	r0, [sp, #20]
   10572:	4628      	mov	r0, r5
   10574:	f00d feb7 	bl	1e2e6 <memcmp>
   10578:	b918      	cbnz	r0, 10582 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   1057a:	9801      	ldr	r0, [sp, #4]
   1057c:	f007 f876 	bl	1766c <net_buf_unref>
   10580:	e7eb      	b.n	1055a <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   10582:	4b12      	ldr	r3, [pc, #72]	; (105cc <bt_setup_public_id_addr+0x90>)
   10584:	2206      	movs	r2, #6
   10586:	f8d3 0007 	ldr.w	r0, [r3, #7]
   1058a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   1058e:	9002      	str	r0, [sp, #8]
   10590:	a902      	add	r1, sp, #8
   10592:	4628      	mov	r0, r5
   10594:	f8ad 300c 	strh.w	r3, [sp, #12]
   10598:	f00d fea5 	bl	1e2e6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1059c:	2800      	cmp	r0, #0
   1059e:	d0ec      	beq.n	1057a <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   105a0:	4629      	mov	r1, r5
   105a2:	2206      	movs	r2, #6
   105a4:	f10d 0011 	add.w	r0, sp, #17
   105a8:	f00d feae 	bl	1e308 <memcpy>
	net_buf_unref(rsp);
   105ac:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   105ae:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   105b2:	f007 f85b 	bl	1766c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   105b6:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   105b8:	4620      	mov	r0, r4
   105ba:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   105bc:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   105be:	f7fe faad 	bl	eb1c <id_create.constprop.0>
   105c2:	e7cc      	b.n	1055e <bt_setup_public_id_addr+0x22>
   105c4:	20008000 	.word	0x20008000
   105c8:	000248e9 	.word	0x000248e9
   105cc:	00021bf4 	.word	0x00021bf4

000105d0 <bt_read_static_addr>:
{
   105d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   105d4:	4b1c      	ldr	r3, [pc, #112]	; (10648 <bt_read_static_addr+0x78>)
{
   105d6:	4607      	mov	r7, r0
   105d8:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   105dc:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   105de:	f014 0401 	ands.w	r4, r4, #1
   105e2:	d104      	bne.n	105ee <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   105e4:	2157      	movs	r1, #87	; 0x57
   105e6:	4819      	ldr	r0, [pc, #100]	; (1064c <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   105e8:	f00c f9d6 	bl	1c998 <printk>
   105ec:	e00c      	b.n	10608 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   105ee:	2100      	movs	r1, #0
   105f0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   105f4:	aa01      	add	r2, sp, #4
   105f6:	f7fe fcb1 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
   105fa:	4605      	mov	r5, r0
   105fc:	b140      	cbz	r0, 10610 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   105fe:	2157      	movs	r1, #87	; 0x57
   10600:	4813      	ldr	r0, [pc, #76]	; (10650 <bt_read_static_addr+0x80>)
   10602:	f00c f9c9 	bl	1c998 <printk>
		return 0;
   10606:	2400      	movs	r4, #0
}
   10608:	4620      	mov	r0, r4
   1060a:	b002      	add	sp, #8
   1060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10610:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   10614:	9b01      	ldr	r3, [sp, #4]
   10616:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   10618:	785c      	ldrb	r4, [r3, #1]
   1061a:	42b4      	cmp	r4, r6
   1061c:	bf28      	it	cs
   1061e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10620:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   10622:	42a5      	cmp	r5, r4
   10624:	db07      	blt.n	10636 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   10626:	9801      	ldr	r0, [sp, #4]
   10628:	f007 f820 	bl	1766c <net_buf_unref>
	if (!cnt) {
   1062c:	2c00      	cmp	r4, #0
   1062e:	d1eb      	bne.n	10608 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10630:	2157      	movs	r1, #87	; 0x57
   10632:	4808      	ldr	r0, [pc, #32]	; (10654 <bt_read_static_addr+0x84>)
   10634:	e7d8      	b.n	105e8 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10636:	fb08 7005 	mla	r0, r8, r5, r7
   1063a:	2216      	movs	r2, #22
   1063c:	4631      	mov	r1, r6
   1063e:	f00d fe63 	bl	1e308 <memcpy>
	for (i = 0; i < cnt; i++) {
   10642:	3501      	adds	r5, #1
   10644:	e7ed      	b.n	10622 <bt_read_static_addr+0x52>
   10646:	bf00      	nop
   10648:	20008000 	.word	0x20008000
   1064c:	0002490c 	.word	0x0002490c
   10650:	0002493d 	.word	0x0002493d
   10654:	00024962 	.word	0x00024962

00010658 <bt_setup_random_id_addr>:
{
   10658:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1065a:	4d15      	ldr	r5, [pc, #84]	; (106b0 <bt_setup_random_id_addr+0x58>)
{
   1065c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   1065e:	79ec      	ldrb	r4, [r5, #7]
   10660:	b9f4      	cbnz	r4, 106a0 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   10662:	2101      	movs	r1, #1
   10664:	a802      	add	r0, sp, #8
   10666:	f7ff ffb3 	bl	105d0 <bt_read_static_addr>
   1066a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   1066c:	b1c0      	cbz	r0, 106a0 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1066e:	2716      	movs	r7, #22
   10670:	b2e6      	uxtb	r6, r4
   10672:	ab02      	add	r3, sp, #8
   10674:	2206      	movs	r2, #6
   10676:	fb07 3106 	mla	r1, r7, r6, r3
   1067a:	f10d 0001 	add.w	r0, sp, #1
   1067e:	f00d fe43 	bl	1e308 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   10682:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   10684:	4669      	mov	r1, sp
   10686:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   10688:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1068c:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   1068e:	f7fe fa45 	bl	eb1c <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10692:	79ea      	ldrb	r2, [r5, #7]
   10694:	b2e3      	uxtb	r3, r4
   10696:	429a      	cmp	r2, r3
   10698:	d8ea      	bhi.n	10670 <bt_setup_random_id_addr+0x18>
}
   1069a:	2000      	movs	r0, #0
   1069c:	b009      	add	sp, #36	; 0x24
   1069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   106a0:	2100      	movs	r1, #0
   106a2:	4608      	mov	r0, r1
}
   106a4:	b009      	add	sp, #36	; 0x24
   106a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   106aa:	f7ff bf0d 	b.w	104c8 <bt_id_create>
   106ae:	bf00      	nop
   106b0:	20008000 	.word	0x20008000

000106b4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   106b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106b8:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   106ba:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   106bc:	690d      	ldr	r5, [r1, #16]
{
   106be:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   106c0:	ebb5 0b03 	subs.w	fp, r5, r3
{
   106c4:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   106c6:	4884      	ldr	r0, [pc, #528]	; (108d8 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   106c8:	bf18      	it	ne
   106ca:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   106ce:	9307      	str	r3, [sp, #28]
   106d0:	f00d ff2d 	bl	1e52e <atomic_get>
{
   106d4:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   106d6:	0782      	lsls	r2, r0, #30
{
   106d8:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   106da:	f140 80ef 	bpl.w	108bc <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   106de:	4608      	mov	r0, r1
   106e0:	f7fe f83c 	bl	e75c <valid_adv_param>
   106e4:	4607      	mov	r7, r0
   106e6:	2800      	cmp	r0, #0
   106e8:	f000 80eb 	beq.w	108c2 <bt_le_adv_start_legacy+0x20e>
   106ec:	487a      	ldr	r0, [pc, #488]	; (108d8 <bt_le_adv_start_legacy+0x224>)
   106ee:	f00d ff1e 	bl	1e52e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   106f2:	0503      	lsls	r3, r0, #20
   106f4:	d402      	bmi.n	106fc <bt_le_adv_start_legacy+0x48>
   106f6:	4878      	ldr	r0, [pc, #480]	; (108d8 <bt_le_adv_start_legacy+0x224>)
   106f8:	f00d ff19 	bl	1e52e <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   106fc:	f106 0810 	add.w	r8, r6, #16
   10700:	4640      	mov	r0, r8
   10702:	f00d ff14 	bl	1e52e <atomic_get>
   10706:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1070a:	0640      	lsls	r0, r0, #25
   1070c:	f100 80dc 	bmi.w	108c8 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10710:	220f      	movs	r2, #15
   10712:	a80a      	add	r0, sp, #40	; 0x28
   10714:	9105      	str	r1, [sp, #20]
   10716:	f00d fe22 	bl	1e35e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1071a:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   1071c:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1071e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10722:	68e3      	ldr	r3, [r4, #12]
   10724:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   10728:	f00d fef2 	bl	1e510 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   1072c:	7832      	ldrb	r2, [r6, #0]
   1072e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   10730:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   10732:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   10734:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   10738:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   1073c:	d004      	beq.n	10748 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1073e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10742:	4865      	ldr	r0, [pc, #404]	; (108d8 <bt_le_adv_start_legacy+0x224>)
   10744:	f00d ff12 	bl	1e56c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   10748:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   1074a:	4b64      	ldr	r3, [pc, #400]	; (108dc <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   1074c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1074e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   10752:	465a      	mov	r2, fp
   10754:	6861      	ldr	r1, [r4, #4]
   10756:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1075a:	f7fe fd17 	bl	f18c <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   1075e:	4683      	mov	fp, r0
   10760:	2800      	cmp	r0, #0
   10762:	d169      	bne.n	10838 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10764:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   10768:	2d00      	cmp	r5, #0
   1076a:	d042      	beq.n	107f2 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1076c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1076e:	f00d fee1 	bl	1e534 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10772:	6860      	ldr	r0, [r4, #4]
   10774:	07c1      	lsls	r1, r0, #31
   10776:	d544      	bpl.n	10802 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   10778:	2d00      	cmp	r5, #0
   1077a:	d03f      	beq.n	107fc <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1077c:	f010 0f10 	tst.w	r0, #16
   10780:	bf14      	ite	ne
   10782:	2304      	movne	r3, #4
   10784:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10786:	6921      	ldr	r1, [r4, #16]
   10788:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1078c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10790:	f00d fed0 	bl	1e534 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10794:	210f      	movs	r1, #15
   10796:	f242 0006 	movw	r0, #8198	; 0x2006
   1079a:	f7fe fb95 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1079e:	4683      	mov	fp, r0
   107a0:	2800      	cmp	r0, #0
   107a2:	f000 8094 	beq.w	108ce <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   107a6:	220f      	movs	r2, #15
   107a8:	a90a      	add	r1, sp, #40	; 0x28
   107aa:	3008      	adds	r0, #8
   107ac:	f00f ff3c 	bl	20628 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   107b0:	2200      	movs	r2, #0
   107b2:	4659      	mov	r1, fp
   107b4:	f242 0006 	movw	r0, #8198	; 0x2006
   107b8:	f7fe fbd0 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
   107bc:	2800      	cmp	r0, #0
   107be:	f040 8089 	bne.w	108d4 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   107c2:	b34d      	cbz	r5, 10818 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   107c4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107c6:	07da      	lsls	r2, r3, #31
   107c8:	d43a      	bmi.n	10840 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   107ca:	2101      	movs	r1, #1
   107cc:	4630      	mov	r0, r6
   107ce:	f7fe fc75 	bl	f0bc <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   107d2:	4683      	mov	fp, r0
   107d4:	2800      	cmp	r0, #0
   107d6:	d06a      	beq.n	108ae <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   107d8:	4841      	ldr	r0, [pc, #260]	; (108e0 <bt_le_adv_start_legacy+0x22c>)
   107da:	2145      	movs	r1, #69	; 0x45
   107dc:	f00c f8dc 	bl	1c998 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   107e0:	9807      	ldr	r0, [sp, #28]
   107e2:	b348      	cbz	r0, 10838 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   107e4:	2100      	movs	r1, #0
   107e6:	f000 fed3 	bl	11590 <bt_conn_set_state>
			bt_conn_unref(conn);
   107ea:	9807      	ldr	r0, [sp, #28]
   107ec:	f000 fea4 	bl	11538 <bt_conn_unref>
   107f0:	e022      	b.n	10838 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   107f2:	9508      	str	r5, [sp, #32]
   107f4:	a908      	add	r1, sp, #32
   107f6:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   107fa:	e7b8      	b.n	1076e <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   107fc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10800:	e7c8      	b.n	10794 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10802:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10804:	b933      	cbnz	r3, 10814 <bt_le_adv_start_legacy+0x160>
   10806:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   1080a:	f1c7 0303 	rsb	r3, r7, #3
   1080e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10812:	e7bf      	b.n	10794 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10814:	2701      	movs	r7, #1
   10816:	e7f8      	b.n	1080a <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10818:	6863      	ldr	r3, [r4, #4]
   1081a:	4652      	mov	r2, sl
   1081c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10820:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10824:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10826:	4649      	mov	r1, r9
   10828:	9300      	str	r3, [sp, #0]
   1082a:	4630      	mov	r0, r6
   1082c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1082e:	f7fe fd93 	bl	f358 <le_adv_update.constprop.0>
		if (err) {
   10832:	4683      	mov	fp, r0
   10834:	2800      	cmp	r0, #0
   10836:	d0c5      	beq.n	107c4 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   10838:	4658      	mov	r0, fp
   1083a:	b00f      	add	sp, #60	; 0x3c
   1083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10840:	4630      	mov	r0, r6
   10842:	a907      	add	r1, sp, #28
   10844:	f7fe f894 	bl	e970 <le_adv_start_add_conn>
		if (err) {
   10848:	4683      	mov	fp, r0
   1084a:	2800      	cmp	r0, #0
   1084c:	d0bd      	beq.n	107ca <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   1084e:	f110 0f0c 	cmn.w	r0, #12
   10852:	d1f1      	bne.n	10838 <bt_le_adv_start_legacy+0x184>
   10854:	2d00      	cmp	r5, #0
   10856:	d1ef      	bne.n	10838 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10858:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1085a:	079b      	lsls	r3, r3, #30
   1085c:	d4ec      	bmi.n	10838 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1085e:	6860      	ldr	r0, [r4, #4]
   10860:	f080 0002 	eor.w	r0, r0, #2
   10864:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   10868:	f00b 0201 	and.w	r2, fp, #1
   1086c:	210c      	movs	r1, #12
   1086e:	4640      	mov	r0, r8
   10870:	f00d fe87 	bl	1e582 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10874:	6862      	ldr	r2, [r4, #4]
   10876:	2107      	movs	r1, #7
   10878:	4640      	mov	r0, r8
   1087a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1087e:	f00d fe80 	bl	1e582 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10882:	6862      	ldr	r2, [r4, #4]
   10884:	2108      	movs	r1, #8
   10886:	4640      	mov	r0, r8
   10888:	f002 0201 	and.w	r2, r2, #1
   1088c:	f00d fe79 	bl	1e582 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10890:	463a      	mov	r2, r7
   10892:	2109      	movs	r1, #9
   10894:	4640      	mov	r0, r8
   10896:	f00d fe74 	bl	1e582 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1089a:	6862      	ldr	r2, [r4, #4]
   1089c:	210b      	movs	r1, #11
   1089e:	4640      	mov	r0, r8
   108a0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   108a4:	f00d fe6d 	bl	1e582 <atomic_set_bit_to>
	return 0;
   108a8:	f04f 0b00 	mov.w	fp, #0
   108ac:	e7c4      	b.n	10838 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   108ae:	9807      	ldr	r0, [sp, #28]
   108b0:	b108      	cbz	r0, 108b6 <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   108b2:	f000 fe41 	bl	11538 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   108b6:	2d00      	cmp	r5, #0
   108b8:	d1d6      	bne.n	10868 <bt_le_adv_start_legacy+0x1b4>
   108ba:	e7d0      	b.n	1085e <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   108bc:	f06f 0b0a 	mvn.w	fp, #10
   108c0:	e7ba      	b.n	10838 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   108c2:	f06f 0b15 	mvn.w	fp, #21
   108c6:	e7b7      	b.n	10838 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   108c8:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   108cc:	e7b4      	b.n	10838 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   108ce:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   108d2:	e7b1      	b.n	10838 <bt_le_adv_start_legacy+0x184>
   108d4:	4683      	mov	fp, r0
   108d6:	e7af      	b.n	10838 <bt_le_adv_start_legacy+0x184>
   108d8:	20008094 	.word	0x20008094
   108dc:	20008000 	.word	0x20008000
   108e0:	00024990 	.word	0x00024990

000108e4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   108e4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   108e6:	9c04      	ldr	r4, [sp, #16]
   108e8:	e9cd 3400 	strd	r3, r4, [sp]
   108ec:	4613      	mov	r3, r2
   108ee:	460a      	mov	r2, r1
   108f0:	4601      	mov	r1, r0
   108f2:	4802      	ldr	r0, [pc, #8]	; (108fc <bt_le_adv_start+0x18>)
   108f4:	f7ff fede 	bl	106b4 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   108f8:	b002      	add	sp, #8
   108fa:	bd10      	pop	{r4, pc}
   108fc:	20008018 	.word	0x20008018

00010900 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10900:	b530      	push	{r4, r5, lr}
   10902:	4c29      	ldr	r4, [pc, #164]	; (109a8 <bt_le_adv_stop+0xa8>)
   10904:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10908:	b085      	sub	sp, #20
   1090a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1090e:	f00d fe2d 	bl	1e56c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10912:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10916:	f00d fe0a 	bl	1e52e <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1091a:	0641      	lsls	r1, r0, #25
   1091c:	d403      	bmi.n	10926 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   1091e:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10920:	4620      	mov	r0, r4
   10922:	b005      	add	sp, #20
   10924:	bd30      	pop	{r4, r5, pc}
   10926:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1092a:	f00d fe00 	bl	1e52e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1092e:	05c2      	lsls	r2, r0, #23
   10930:	d521      	bpl.n	10976 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10932:	2300      	movs	r3, #0
   10934:	4669      	mov	r1, sp
   10936:	f104 0021 	add.w	r0, r4, #33	; 0x21
   1093a:	9300      	str	r3, [sp, #0]
   1093c:	f8cd 3003 	str.w	r3, [sp, #3]
   10940:	f00d fe11 	bl	1e566 <bt_addr_le_cmp>
   10944:	7e25      	ldrb	r5, [r4, #24]
   10946:	bb58      	cbnz	r0, 109a0 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10948:	4b18      	ldr	r3, [pc, #96]	; (109ac <bt_le_adv_stop+0xac>)
   1094a:	a902      	add	r1, sp, #8
   1094c:	889a      	ldrh	r2, [r3, #4]
   1094e:	6818      	ldr	r0, [r3, #0]
   10950:	f8ad 200c 	strh.w	r2, [sp, #12]
   10954:	2204      	movs	r2, #4
   10956:	799b      	ldrb	r3, [r3, #6]
   10958:	9002      	str	r0, [sp, #8]
   1095a:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1095e:	4628      	mov	r0, r5
   10960:	f000 ff48 	bl	117f4 <bt_conn_lookup_state_le>
   10964:	4604      	mov	r4, r0
	if (conn) {
   10966:	b130      	cbz	r0, 10976 <bt_le_adv_stop+0x76>
		conn->err = status;
   10968:	2100      	movs	r1, #0
   1096a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1096c:	f000 fe10 	bl	11590 <bt_conn_set_state>
		bt_conn_unref(conn);
   10970:	4620      	mov	r0, r4
   10972:	f000 fde1 	bl	11538 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10976:	2100      	movs	r1, #0
   10978:	480d      	ldr	r0, [pc, #52]	; (109b0 <bt_le_adv_stop+0xb0>)
   1097a:	f7fe fb9f 	bl	f0bc <set_le_adv_enable_legacy>
		if (err) {
   1097e:	4604      	mov	r4, r0
   10980:	2800      	cmp	r0, #0
   10982:	d1cd      	bne.n	10920 <bt_le_adv_stop+0x20>
   10984:	480b      	ldr	r0, [pc, #44]	; (109b4 <bt_le_adv_stop+0xb4>)
   10986:	f00d fdd2 	bl	1e52e <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1098a:	0683      	lsls	r3, r0, #26
   1098c:	d5c7      	bpl.n	1091e <bt_le_adv_stop+0x1e>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
   1098e:	4620      	mov	r0, r4
   10990:	f00d fe7e 	bl	1e690 <set_le_scan_enable.isra.0>
			le_set_private_addr(BT_ID_DEFAULT);
   10994:	f00d fe2e 	bl	1e5f4 <le_set_private_addr.constprop.0>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
   10998:	2001      	movs	r0, #1
   1099a:	f00d fe79 	bl	1e690 <set_le_scan_enable.isra.0>
   1099e:	e7bf      	b.n	10920 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   109a0:	2205      	movs	r2, #5
   109a2:	f104 0121 	add.w	r1, r4, #33	; 0x21
   109a6:	e7da      	b.n	1095e <bt_le_adv_stop+0x5e>
   109a8:	20008000 	.word	0x20008000
   109ac:	00021bf4 	.word	0x00021bf4
   109b0:	20008018 	.word	0x20008018
   109b4:	20008094 	.word	0x20008094

000109b8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   109b8:	b513      	push	{r0, r1, r4, lr}
   109ba:	4818      	ldr	r0, [pc, #96]	; (10a1c <bt_le_adv_resume+0x64>)
   109bc:	f00d fdb7 	bl	1e52e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   109c0:	04c1      	lsls	r1, r0, #19
   109c2:	d529      	bpl.n	10a18 <bt_le_adv_resume+0x60>
   109c4:	4815      	ldr	r0, [pc, #84]	; (10a1c <bt_le_adv_resume+0x64>)
   109c6:	f00d fdb2 	bl	1e52e <atomic_get>
   109ca:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   109cc:	f3c0 1480 	ubfx	r4, r0, #6, #1
   109d0:	d422      	bmi.n	10a18 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   109d2:	4812      	ldr	r0, [pc, #72]	; (10a1c <bt_le_adv_resume+0x64>)
   109d4:	f00d fdab 	bl	1e52e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   109d8:	05c3      	lsls	r3, r0, #23
   109da:	d51d      	bpl.n	10a18 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   109dc:	4810      	ldr	r0, [pc, #64]	; (10a20 <bt_le_adv_resume+0x68>)
   109de:	a901      	add	r1, sp, #4
   109e0:	f7fd ffc6 	bl	e970 <le_adv_start_add_conn>
	if (err) {
   109e4:	b9c0      	cbnz	r0, 10a18 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   109e6:	2101      	movs	r1, #1
   109e8:	480d      	ldr	r0, [pc, #52]	; (10a20 <bt_le_adv_resume+0x68>)
   109ea:	f7fe fb67 	bl	f0bc <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   109ee:	b150      	cbz	r0, 10a06 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   109f0:	4621      	mov	r1, r4
   109f2:	9801      	ldr	r0, [sp, #4]
   109f4:	f000 fdcc 	bl	11590 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   109f8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   109fc:	4807      	ldr	r0, [pc, #28]	; (10a1c <bt_le_adv_resume+0x64>)
   109fe:	f00d fdb5 	bl	1e56c <atomic_and>
	return (old & mask) != 0;
   10a02:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10a06:	9801      	ldr	r0, [sp, #4]
   10a08:	f000 fd96 	bl	11538 <bt_conn_unref>
	if (persist_paused) {
   10a0c:	b124      	cbz	r4, 10a18 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10a12:	4802      	ldr	r0, [pc, #8]	; (10a1c <bt_le_adv_resume+0x64>)
   10a14:	f00d fd91 	bl	1e53a <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10a18:	b002      	add	sp, #8
   10a1a:	bd10      	pop	{r4, pc}
   10a1c:	20008028 	.word	0x20008028
   10a20:	20008018 	.word	0x20008018

00010a24 <enh_conn_complete>:
{
   10a24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10a28:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a2c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
{
   10a30:	4605      	mov	r5, r0
   10a32:	4880      	ldr	r0, [pc, #512]	; (10c34 <enh_conn_complete+0x210>)
   10a34:	f00d fd9a 	bl	1e56c <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   10a38:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10a3a:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   10a3e:	d504      	bpl.n	10a4a <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   10a40:	2200      	movs	r2, #0
   10a42:	2002      	movs	r0, #2
   10a44:	497c      	ldr	r1, [pc, #496]	; (10c38 <enh_conn_complete+0x214>)
   10a46:	f006 fb55 	bl	170f4 <bt_keys_foreach>
	if (evt->status) {
   10a4a:	782c      	ldrb	r4, [r5, #0]
   10a4c:	2c00      	cmp	r4, #0
   10a4e:	d048      	beq.n	10ae2 <enh_conn_complete+0xbe>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a50:	2c3c      	cmp	r4, #60	; 0x3c
   10a52:	d11a      	bne.n	10a8a <enh_conn_complete+0x66>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a54:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10a58:	4878      	ldr	r0, [pc, #480]	; (10c3c <enh_conn_complete+0x218>)
   10a5a:	f00d fd87 	bl	1e56c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10a5e:	2000      	movs	r0, #0
   10a60:	f7fd fffe 	bl	ea60 <find_pending_connect.part.0>
		if (!conn) {
   10a64:	4605      	mov	r5, r0
   10a66:	b930      	cbnz	r0, 10a76 <enh_conn_complete+0x52>
			BT_ERR("No pending slave connection");
   10a68:	2145      	movs	r1, #69	; 0x45
   10a6a:	4875      	ldr	r0, [pc, #468]	; (10c40 <enh_conn_complete+0x21c>)
}
   10a6c:	b004      	add	sp, #16
   10a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10a72:	f00b bf91 	b.w	1c998 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10a76:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10a78:	2100      	movs	r1, #0
   10a7a:	f000 fd89 	bl	11590 <bt_conn_set_state>
		bt_conn_unref(conn);
   10a7e:	4628      	mov	r0, r5
}
   10a80:	b004      	add	sp, #16
   10a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10a86:	f000 bd57 	b.w	11538 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10a8a:	2c02      	cmp	r4, #2
   10a8c:	d121      	bne.n	10ad2 <enh_conn_complete+0xae>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10a8e:	2100      	movs	r1, #0
   10a90:	2206      	movs	r2, #6
   10a92:	4608      	mov	r0, r1
   10a94:	f000 feae 	bl	117f4 <bt_conn_lookup_state_le>
	if (!conn) {
   10a98:	4605      	mov	r5, r0
   10a9a:	b948      	cbnz	r0, 10ab0 <enh_conn_complete+0x8c>
		BT_ERR("No pending master connection");
   10a9c:	2145      	movs	r1, #69	; 0x45
   10a9e:	4869      	ldr	r0, [pc, #420]	; (10c44 <enh_conn_complete+0x220>)
   10aa0:	f00b ff7a 	bl	1c998 <printk>
			bt_le_scan_update(false);
   10aa4:	2000      	movs	r0, #0
   10aa6:	f7fe ff87 	bl	f9b8 <bt_le_scan_update>
}
   10aaa:	b004      	add	sp, #16
   10aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10ab0:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ab2:	2100      	movs	r1, #0
   10ab4:	f000 fd6c 	bl	11590 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10ab8:	1d28      	adds	r0, r5, #4
   10aba:	f00d fd38 	bl	1e52e <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   10abe:	07c2      	lsls	r2, r0, #31
   10ac0:	d503      	bpl.n	10aca <enh_conn_complete+0xa6>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10ac2:	4621      	mov	r1, r4
   10ac4:	4628      	mov	r0, r5
   10ac6:	f000 fd63 	bl	11590 <bt_conn_set_state>
	bt_conn_unref(conn);
   10aca:	4628      	mov	r0, r5
   10acc:	f000 fd34 	bl	11538 <bt_conn_unref>
   10ad0:	e7e8      	b.n	10aa4 <enh_conn_complete+0x80>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10ad2:	4622      	mov	r2, r4
   10ad4:	2157      	movs	r1, #87	; 0x57
   10ad6:	485c      	ldr	r0, [pc, #368]	; (10c48 <enh_conn_complete+0x224>)
}
   10ad8:	b004      	add	sp, #16
   10ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10ade:	f00b bf5b 	b.w	1c998 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10ae2:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10ae4:	1d2e      	adds	r6, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10ae6:	3b02      	subs	r3, #2
   10ae8:	2b01      	cmp	r3, #1
   10aea:	d836      	bhi.n	10b5a <enh_conn_complete+0x136>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10aec:	4631      	mov	r1, r6
   10aee:	a802      	add	r0, sp, #8
   10af0:	f00d fd20 	bl	1e534 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10af4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10af8:	2206      	movs	r2, #6
   10afa:	3b02      	subs	r3, #2
   10afc:	f105 0111 	add.w	r1, r5, #17
   10b00:	f10d 0001 	add.w	r0, sp, #1
   10b04:	f88d 3008 	strb.w	r3, [sp, #8]
   10b08:	f00d fbfe 	bl	1e308 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10b0c:	2301      	movs	r3, #1
   10b0e:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10b12:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10b14:	bba0      	cbnz	r0, 10b80 <enh_conn_complete+0x15c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10b16:	2206      	movs	r2, #6
   10b18:	a902      	add	r1, sp, #8
   10b1a:	f000 fe6b 	bl	117f4 <bt_conn_lookup_state_le>
   10b1e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b20:	78eb      	ldrb	r3, [r5, #3]
   10b22:	2b01      	cmp	r3, #1
   10b24:	d104      	bne.n	10b30 <enh_conn_complete+0x10c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b26:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10b2a:	4844      	ldr	r0, [pc, #272]	; (10c3c <enh_conn_complete+0x218>)
   10b2c:	f00d fd1e 	bl	1e56c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10b30:	78eb      	ldrb	r3, [r5, #3]
   10b32:	b923      	cbnz	r3, 10b3e <enh_conn_complete+0x11a>
   10b34:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10b38:	483e      	ldr	r0, [pc, #248]	; (10c34 <enh_conn_complete+0x210>)
   10b3a:	f00d fd17 	bl	1e56c <atomic_and>
	if (!conn) {
   10b3e:	bb3c      	cbnz	r4, 10b90 <enh_conn_complete+0x16c>
		BT_ERR("No pending conn for peer %s",
   10b40:	4630      	mov	r0, r6
   10b42:	f7fd fc05 	bl	e350 <bt_addr_le_str_real>
   10b46:	2145      	movs	r1, #69	; 0x45
   10b48:	4602      	mov	r2, r0
   10b4a:	4840      	ldr	r0, [pc, #256]	; (10c4c <enh_conn_complete+0x228>)
   10b4c:	f00b ff24 	bl	1c998 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10b50:	211f      	movs	r1, #31
   10b52:	4640      	mov	r0, r8
   10b54:	f00d fdd9 	bl	1e70a <bt_hci_disconnect>
		return;
   10b58:	e7a7      	b.n	10aaa <enh_conn_complete+0x86>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   10b5a:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   10b5c:	4631      	mov	r1, r6
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   10b5e:	2b01      	cmp	r3, #1
   10b60:	bf04      	itt	eq
   10b62:	4b3b      	ldreq	r3, [pc, #236]	; (10c50 <enh_conn_complete+0x22c>)
   10b64:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   10b68:	4620      	mov	r0, r4
   10b6a:	f00d fdc4 	bl	1e6f6 <bt_lookup_id_addr>
   10b6e:	4601      	mov	r1, r0
   10b70:	a802      	add	r0, sp, #8
   10b72:	f00d fcdf 	bl	1e534 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10b76:	4631      	mov	r1, r6
   10b78:	4668      	mov	r0, sp
   10b7a:	f00d fcdb 	bl	1e534 <bt_addr_le_copy>
   10b7e:	e7c8      	b.n	10b12 <enh_conn_complete+0xee>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10b80:	2801      	cmp	r0, #1
   10b82:	d103      	bne.n	10b8c <enh_conn_complete+0x168>
   10b84:	a802      	add	r0, sp, #8
   10b86:	f7fd ff6b 	bl	ea60 <find_pending_connect.part.0>
   10b8a:	e7c8      	b.n	10b1e <enh_conn_complete+0xfa>
	return NULL;
   10b8c:	2400      	movs	r4, #0
   10b8e:	e7c7      	b.n	10b20 <enh_conn_complete+0xfc>
	conn->handle = handle;
   10b90:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10b92:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10b94:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10b98:	f00d fccc 	bl	1e534 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10b9c:	7e2a      	ldrb	r2, [r5, #24]
   10b9e:	7deb      	ldrb	r3, [r5, #23]
   10ba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10ba4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10ba8:	7eaa      	ldrb	r2, [r5, #26]
   10baa:	7e6b      	ldrb	r3, [r5, #25]
   10bac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10bb0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10bb4:	7f2a      	ldrb	r2, [r5, #28]
   10bb6:	7eeb      	ldrb	r3, [r5, #27]
   10bb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10bbc:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10bbe:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10bc2:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10bc4:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10bc6:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10bc8:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10bca:	d113      	bne.n	10bf4 <enh_conn_complete+0x1d0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10bcc:	4669      	mov	r1, sp
   10bce:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10bd2:	f00d fcaf 	bl	1e534 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10bd6:	7a21      	ldrb	r1, [r4, #8]
   10bd8:	4d1d      	ldr	r5, [pc, #116]	; (10c50 <enh_conn_complete+0x22c>)
   10bda:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10bde:	4429      	add	r1, r5
   10be0:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10be4:	f00d fca6 	bl	1e534 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10be8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10bec:	065b      	lsls	r3, r3, #25
   10bee:	d501      	bpl.n	10bf4 <enh_conn_complete+0x1d0>
			bt_le_adv_resume();
   10bf0:	f7ff fee2 	bl	109b8 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10bf4:	78e3      	ldrb	r3, [r4, #3]
   10bf6:	b96b      	cbnz	r3, 10c14 <enh_conn_complete+0x1f0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10bf8:	4669      	mov	r1, sp
   10bfa:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10bfe:	f00d fc99 	bl	1e534 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10c02:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10c04:	4b12      	ldr	r3, [pc, #72]	; (10c50 <enh_conn_complete+0x22c>)
					&bt_dev.id_addr[conn->id]);
   10c06:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10c0a:	4419      	add	r1, r3
   10c0c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10c10:	f00d fc90 	bl	1e534 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10c14:	2107      	movs	r1, #7
   10c16:	4620      	mov	r0, r4
   10c18:	f000 fcba 	bl	11590 <bt_conn_set_state>
	conn_auto_initiate(conn);
   10c1c:	4620      	mov	r0, r4
   10c1e:	f7ff f941 	bl	fea4 <conn_auto_initiate>
	bt_conn_unref(conn);
   10c22:	4620      	mov	r0, r4
   10c24:	f000 fc88 	bl	11538 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10c28:	78e3      	ldrb	r3, [r4, #3]
   10c2a:	2b00      	cmp	r3, #0
   10c2c:	f47f af3d 	bne.w	10aaa <enh_conn_complete+0x86>
   10c30:	e738      	b.n	10aa4 <enh_conn_complete+0x80>
   10c32:	bf00      	nop
   10c34:	20008094 	.word	0x20008094
   10c38:	0001e783 	.word	0x0001e783
   10c3c:	20008028 	.word	0x20008028
   10c40:	000249b0 	.word	0x000249b0
   10c44:	000249d1 	.word	0x000249d1
   10c48:	000249f3 	.word	0x000249f3
   10c4c:	00024a11 	.word	0x00024a11
   10c50:	20008000 	.word	0x20008000

00010c54 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10c54:	b570      	push	{r4, r5, r6, lr}
   10c56:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c58:	482e      	ldr	r0, [pc, #184]	; (10d14 <bt_le_scan_start+0xc0>)
   10c5a:	f00d fc68 	bl	1e52e <atomic_get>
   10c5e:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c60:	0781      	lsls	r1, r0, #30
   10c62:	d553      	bpl.n	10d0c <bt_le_scan_start+0xb8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10c64:	782a      	ldrb	r2, [r5, #0]
   10c66:	2a01      	cmp	r2, #1
   10c68:	d903      	bls.n	10c72 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10c6a:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10c6e:	4620      	mov	r0, r4
   10c70:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10c72:	686b      	ldr	r3, [r5, #4]
   10c74:	f033 030f 	bics.w	r3, r3, #15
   10c78:	d1f7      	bne.n	10c6a <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10c7a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10c7e:	8928      	ldrh	r0, [r5, #8]
   10c80:	1f03      	subs	r3, r0, #4
   10c82:	b29b      	uxth	r3, r3
   10c84:	42a3      	cmp	r3, r4
   10c86:	d8f0      	bhi.n	10c6a <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10c88:	8969      	ldrh	r1, [r5, #10]
   10c8a:	1f0b      	subs	r3, r1, #4
   10c8c:	b29b      	uxth	r3, r3
   10c8e:	42a3      	cmp	r3, r4
   10c90:	d8eb      	bhi.n	10c6a <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10c92:	4288      	cmp	r0, r1
   10c94:	d3e9      	bcc.n	10c6a <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10c96:	b942      	cbnz	r2, 10caa <bt_le_scan_start+0x56>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10c98:	2106      	movs	r1, #6
   10c9a:	481e      	ldr	r0, [pc, #120]	; (10d14 <bt_le_scan_start+0xc0>)
   10c9c:	f00d fc58 	bl	1e550 <atomic_test_and_set_bit>
   10ca0:	4603      	mov	r3, r0
   10ca2:	b138      	cbz	r0, 10cb4 <bt_le_scan_start+0x60>
		return -EALREADY;
   10ca4:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10ca8:	e7e1      	b.n	10c6e <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10caa:	f7fe fc27 	bl	f4fc <bt_le_scan_random_addr_check>
   10cae:	2800      	cmp	r0, #0
   10cb0:	d1f2      	bne.n	10c98 <bt_le_scan_start+0x44>
   10cb2:	e7da      	b.n	10c6a <bt_le_scan_start+0x16>
   10cb4:	4817      	ldr	r0, [pc, #92]	; (10d14 <bt_le_scan_start+0xc0>)
   10cb6:	f00d fc3a 	bl	1e52e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10cba:	0682      	lsls	r2, r0, #26
   10cbc:	d50a      	bpl.n	10cd4 <bt_le_scan_start+0x80>
	return set_le_scan_enable_legacy(enable);
   10cbe:	4618      	mov	r0, r3
   10cc0:	f7fe fa28 	bl	f114 <set_le_scan_enable_legacy>
		if (err) {
   10cc4:	4604      	mov	r4, r0
   10cc6:	b128      	cbz	r0, 10cd4 <bt_le_scan_start+0x80>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10cc8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10ccc:	4811      	ldr	r0, [pc, #68]	; (10d14 <bt_le_scan_start+0xc0>)
   10cce:	f00d fc4d 	bl	1e56c <atomic_and>
		return err;
   10cd2:	e7cc      	b.n	10c6e <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10cd4:	686a      	ldr	r2, [r5, #4]
   10cd6:	2108      	movs	r1, #8
   10cd8:	480e      	ldr	r0, [pc, #56]	; (10d14 <bt_le_scan_start+0xc0>)
   10cda:	f002 0201 	and.w	r2, r2, #1
   10cde:	f00d fc50 	bl	1e582 <atomic_set_bit_to>
		if (param->timeout) {
   10ce2:	89ab      	ldrh	r3, [r5, #12]
   10ce4:	b13b      	cbz	r3, 10cf6 <bt_le_scan_start+0xa2>
   10ce6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10cea:	480a      	ldr	r0, [pc, #40]	; (10d14 <bt_le_scan_start+0xc0>)
   10cec:	f00d fc3e 	bl	1e56c <atomic_and>
			return -ENOTSUP;
   10cf0:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10cf4:	e7bb      	b.n	10c6e <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10cf6:	896a      	ldrh	r2, [r5, #10]
   10cf8:	8929      	ldrh	r1, [r5, #8]
   10cfa:	7828      	ldrb	r0, [r5, #0]
   10cfc:	f7fe fba0 	bl	f440 <start_le_scan_legacy>
	if (err) {
   10d00:	4604      	mov	r4, r0
   10d02:	2800      	cmp	r0, #0
   10d04:	d1e0      	bne.n	10cc8 <bt_le_scan_start+0x74>
	scan_dev_found_cb = cb;
   10d06:	4b04      	ldr	r3, [pc, #16]	; (10d18 <bt_le_scan_start+0xc4>)
   10d08:	601e      	str	r6, [r3, #0]
	return 0;
   10d0a:	e7b0      	b.n	10c6e <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10d0c:	f06f 040a 	mvn.w	r4, #10
   10d10:	e7ad      	b.n	10c6e <bt_le_scan_start+0x1a>
   10d12:	bf00      	nop
   10d14:	20008094 	.word	0x20008094
   10d18:	20009c14 	.word	0x20009c14

00010d1c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10d1c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d1e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10d22:	4807      	ldr	r0, [pc, #28]	; (10d40 <bt_le_scan_stop+0x24>)
   10d24:	f00d fc22 	bl	1e56c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10d28:	0643      	lsls	r3, r0, #25
   10d2a:	d506      	bpl.n	10d3a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10d2c:	2000      	movs	r0, #0
   10d2e:	4b05      	ldr	r3, [pc, #20]	; (10d44 <bt_le_scan_stop+0x28>)
   10d30:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10d32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10d36:	f7fe be3f 	b.w	f9b8 <bt_le_scan_update>
}
   10d3a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10d3e:	bd08      	pop	{r3, pc}
   10d40:	20008094 	.word	0x20008094
   10d44:	20009c14 	.word	0x20009c14

00010d48 <bt_le_scan_cb_register>:
	parent->next = child;
   10d48:	2300      	movs	r3, #0
   10d4a:	6083      	str	r3, [r0, #8]
	return list->tail;
   10d4c:	4b05      	ldr	r3, [pc, #20]	; (10d64 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10d4e:	f100 0208 	add.w	r2, r0, #8
   10d52:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10d54:	b911      	cbnz	r1, 10d5c <bt_le_scan_cb_register+0x14>
	list->head = node;
   10d56:	e9c3 2200 	strd	r2, r2, [r3]
}
   10d5a:	4770      	bx	lr
	parent->next = child;
   10d5c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10d5e:	605a      	str	r2, [r3, #4]
}
   10d60:	4770      	bx	lr
   10d62:	bf00      	nop
   10d64:	20009c0c 	.word	0x20009c0c

00010d68 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   10d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   10d6a:	4e1b      	ldr	r6, [pc, #108]	; (10dd8 <bt_pub_key_gen+0x70>)
   10d6c:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
   10d70:	f003 0306 	and.w	r3, r3, #6
   10d74:	2b06      	cmp	r3, #6
   10d76:	d007      	beq.n	10d88 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   10d78:	2157      	movs	r1, #87	; 0x57
   10d7a:	4818      	ldr	r0, [pc, #96]	; (10ddc <bt_pub_key_gen+0x74>)
   10d7c:	f00b fe0c 	bl	1c998 <printk>
		return -ENOTSUP;
   10d80:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
   10d84:	4620      	mov	r0, r4
   10d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
   10d88:	4f15      	ldr	r7, [pc, #84]	; (10de0 <bt_pub_key_gen+0x78>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10d8a:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
   10d8c:	683b      	ldr	r3, [r7, #0]
	pub_key_cb = new_cb;
   10d8e:	6038      	str	r0, [r7, #0]
	new_cb->_next = pub_key_cb;
   10d90:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10d92:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10d96:	f00d fbdb 	bl	1e550 <atomic_test_and_set_bit>
   10d9a:	4605      	mov	r5, r0
   10d9c:	b9d0      	cbnz	r0, 10dd4 <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d9e:	f06f 0108 	mvn.w	r1, #8
   10da2:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10da6:	f00d fbe1 	bl	1e56c <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   10daa:	462a      	mov	r2, r5
   10dac:	4629      	mov	r1, r5
   10dae:	f242 0025 	movw	r0, #8229	; 0x2025
   10db2:	f7fe f8d3 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
   10db6:	4604      	mov	r4, r0
   10db8:	2800      	cmp	r0, #0
   10dba:	d0e3      	beq.n	10d84 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
   10dbc:	2145      	movs	r1, #69	; 0x45
   10dbe:	4809      	ldr	r0, [pc, #36]	; (10de4 <bt_pub_key_gen+0x7c>)
   10dc0:	f00b fdea 	bl	1c998 <printk>
   10dc4:	f06f 0110 	mvn.w	r1, #16
   10dc8:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10dcc:	f00d fbce 	bl	1e56c <atomic_and>
		pub_key_cb = NULL;
   10dd0:	603d      	str	r5, [r7, #0]
		return err;
   10dd2:	e7d7      	b.n	10d84 <bt_pub_key_gen+0x1c>
		return 0;
   10dd4:	2400      	movs	r4, #0
   10dd6:	e7d5      	b.n	10d84 <bt_pub_key_gen+0x1c>
   10dd8:	20008000 	.word	0x20008000
   10ddc:	00024a32 	.word	0x00024a32
   10de0:	20009c04 	.word	0x20009c04
   10de4:	00024a56 	.word	0x00024a56

00010de8 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
   10de8:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10dea:	4804      	ldr	r0, [pc, #16]	; (10dfc <bt_pub_key_get+0x14>)
   10dec:	f00d fb9f 	bl	1e52e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
   10df0:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
   10df4:	4802      	ldr	r0, [pc, #8]	; (10e00 <bt_pub_key_get+0x18>)
   10df6:	bf08      	it	eq
   10df8:	2000      	moveq	r0, #0
   10dfa:	bd08      	pop	{r3, pc}
   10dfc:	20008094 	.word	0x20008094
   10e00:	2000b6e7 	.word	0x2000b6e7

00010e04 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   10e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
   10e06:	4d1c      	ldr	r5, [pc, #112]	; (10e78 <bt_dh_key_gen+0x74>)
{
   10e08:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   10e0a:	682b      	ldr	r3, [r5, #0]
   10e0c:	428b      	cmp	r3, r1
   10e0e:	d02d      	beq.n	10e6c <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10e10:	b113      	cbz	r3, 10e18 <bt_dh_key_gen+0x14>
		return -EBUSY;
   10e12:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
   10e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e18:	4818      	ldr	r0, [pc, #96]	; (10e7c <bt_dh_key_gen+0x78>)
   10e1a:	f00d fb88 	bl	1e52e <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10e1e:	06c2      	lsls	r2, r0, #27
   10e20:	f3c0 1700 	ubfx	r7, r0, #4, #1
   10e24:	d4f5      	bmi.n	10e12 <bt_dh_key_gen+0xe>
   10e26:	4815      	ldr	r0, [pc, #84]	; (10e7c <bt_dh_key_gen+0x78>)
   10e28:	f00d fb81 	bl	1e52e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   10e2c:	0703      	lsls	r3, r0, #28
   10e2e:	d520      	bpl.n	10e72 <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
   10e30:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   10e32:	f242 0026 	movw	r0, #8230	; 0x2026
   10e36:	2140      	movs	r1, #64	; 0x40
   10e38:	f7fe f846 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   10e3c:	4604      	mov	r4, r0
   10e3e:	b918      	cbnz	r0, 10e48 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
   10e40:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
   10e42:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10e46:	e7e6      	b.n	10e16 <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
   10e48:	2140      	movs	r1, #64	; 0x40
   10e4a:	3008      	adds	r0, #8
   10e4c:	f006 fd24 	bl	17898 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   10e50:	2240      	movs	r2, #64	; 0x40
   10e52:	4631      	mov	r1, r6
   10e54:	f00d fa58 	bl	1e308 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   10e58:	463a      	mov	r2, r7
   10e5a:	4621      	mov	r1, r4
   10e5c:	f242 0026 	movw	r0, #8230	; 0x2026
   10e60:	f7fe f87c 	bl	ef5c <bt_hci_cmd_send_sync>
	if (err) {
   10e64:	2800      	cmp	r0, #0
   10e66:	d0d6      	beq.n	10e16 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   10e68:	602f      	str	r7, [r5, #0]
		return err;
   10e6a:	e7d4      	b.n	10e16 <bt_dh_key_gen+0x12>
		return -EALREADY;
   10e6c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10e70:	e7d1      	b.n	10e16 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   10e72:	f06f 0030 	mvn.w	r0, #48	; 0x30
   10e76:	e7ce      	b.n	10e16 <bt_dh_key_gen+0x12>
   10e78:	20009c00 	.word	0x20009c00
   10e7c:	20008094 	.word	0x20008094

00010e80 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e82:	b08d      	sub	sp, #52	; 0x34
   10e84:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10e86:	2700      	movs	r7, #0
   10e88:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10e8a:	2100      	movs	r1, #0
   10e8c:	f242 0018 	movw	r0, #8216	; 0x2018
   10e90:	aa02      	add	r2, sp, #8
   10e92:	f7fe f863 	bl	ef5c <bt_hci_cmd_send_sync>
		if (ret) {
   10e96:	4604      	mov	r4, r0
   10e98:	bb58      	cbnz	r0, 10ef2 <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10e9a:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10e9c:	2208      	movs	r2, #8
   10e9e:	6899      	ldr	r1, [r3, #8]
   10ea0:	4630      	mov	r0, r6
   10ea2:	3101      	adds	r1, #1
   10ea4:	f00d fa30 	bl	1e308 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10ea8:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10eaa:	9802      	ldr	r0, [sp, #8]
   10eac:	f006 fbde 	bl	1766c <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10eb0:	2f04      	cmp	r7, #4
   10eb2:	f106 0608 	add.w	r6, r6, #8
   10eb6:	d1e8      	bne.n	10e8a <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10eb8:	f010 fb52 	bl	21560 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   10ebc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10ec0:	fba0 3206 	umull	r3, r2, r0, r6
   10ec4:	fb06 2101 	mla	r1, r6, r1, r2
   10ec8:	0bdb      	lsrs	r3, r3, #15
   10eca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10ece:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10ed0:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10ed4:	2308      	movs	r3, #8
   10ed6:	2220      	movs	r2, #32
   10ed8:	9300      	str	r3, [sp, #0]
   10eda:	4629      	mov	r1, r5
   10edc:	4806      	ldr	r0, [pc, #24]	; (10ef8 <prng_reseed.constprop.0+0x78>)
   10ede:	446b      	add	r3, sp
   10ee0:	f00d f8a8 	bl	1e034 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10ee4:	b928      	cbnz	r0, 10ef2 <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   10ee6:	2145      	movs	r1, #69	; 0x45
   10ee8:	4804      	ldr	r0, [pc, #16]	; (10efc <prng_reseed.constprop.0+0x7c>)
   10eea:	f00b fd55 	bl	1c998 <printk>
		return -EIO;
   10eee:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   10ef2:	4620      	mov	r0, r4
   10ef4:	b00d      	add	sp, #52	; 0x34
   10ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ef8:	20008900 	.word	0x20008900
   10efc:	00024ac0 	.word	0x00024ac0

00010f00 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   10f00:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   10f02:	b570      	push	{r4, r5, r6, lr}
   10f04:	4604      	mov	r4, r0
   10f06:	460d      	mov	r5, r1
   10f08:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   10f0c:	d915      	bls.n	10f3a <sys_memcpy_swap.constprop.0+0x3a>
   10f0e:	42b0      	cmp	r0, r6
   10f10:	d20a      	bcs.n	10f28 <sys_memcpy_swap.constprop.0+0x28>
   10f12:	490c      	ldr	r1, [pc, #48]	; (10f44 <sys_memcpy_swap.constprop.0+0x44>)
   10f14:	480c      	ldr	r0, [pc, #48]	; (10f48 <sys_memcpy_swap.constprop.0+0x48>)
   10f16:	f240 2217 	movw	r2, #535	; 0x217
   10f1a:	f00b fd3d 	bl	1c998 <printk>
   10f1e:	f240 2117 	movw	r1, #535	; 0x217
   10f22:	4808      	ldr	r0, [pc, #32]	; (10f44 <sys_memcpy_swap.constprop.0+0x44>)
   10f24:	f00b ffde 	bl	1cee4 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   10f28:	4633      	mov	r3, r6
   10f2a:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   10f2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   10f30:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   10f32:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   10f36:	d1f9      	bne.n	10f2c <sys_memcpy_swap.constprop.0+0x2c>
	}
}
   10f38:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   10f3a:	d0ea      	beq.n	10f12 <sys_memcpy_swap.constprop.0+0x12>
   10f3c:	f100 0310 	add.w	r3, r0, #16
   10f40:	4299      	cmp	r1, r3
   10f42:	e7e5      	b.n	10f10 <sys_memcpy_swap.constprop.0+0x10>
   10f44:	00024adc 	.word	0x00024adc
   10f48:	00022dd6 	.word	0x00022dd6

00010f4c <prng_init>:

int prng_init(void)
{
   10f4c:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10f4e:	4b13      	ldr	r3, [pc, #76]	; (10f9c <prng_init+0x50>)
   10f50:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   10f54:	2b00      	cmp	r3, #0
   10f56:	da1d      	bge.n	10f94 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10f58:	2100      	movs	r1, #0
   10f5a:	f242 0018 	movw	r0, #8216	; 0x2018
   10f5e:	aa01      	add	r2, sp, #4
   10f60:	f7fd fffc 	bl	ef5c <bt_hci_cmd_send_sync>
	if (ret) {
   10f64:	b988      	cbnz	r0, 10f8a <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   10f66:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10f68:	2208      	movs	r2, #8
   10f6a:	6899      	ldr	r1, [r3, #8]
   10f6c:	480c      	ldr	r0, [pc, #48]	; (10fa0 <prng_init+0x54>)
   10f6e:	3101      	adds	r1, #1
   10f70:	f00d f840 	bl	1dff4 <tc_hmac_prng_init>
   10f74:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   10f76:	9801      	ldr	r0, [sp, #4]
   10f78:	f006 fb78 	bl	1766c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   10f7c:	b93c      	cbnz	r4, 10f8e <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   10f7e:	4809      	ldr	r0, [pc, #36]	; (10fa4 <prng_init+0x58>)
   10f80:	2145      	movs	r1, #69	; 0x45
   10f82:	f00b fd09 	bl	1c998 <printk>
		return -EIO;
   10f86:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10f8a:	b002      	add	sp, #8
   10f8c:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   10f8e:	f7ff ff77 	bl	10e80 <prng_reseed.constprop.0>
   10f92:	e7fa      	b.n	10f8a <prng_init+0x3e>
		return -ENOTSUP;
   10f94:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10f98:	e7f7      	b.n	10f8a <prng_init+0x3e>
   10f9a:	bf00      	nop
   10f9c:	20008000 	.word	0x20008000
   10fa0:	20008900 	.word	0x20008900
   10fa4:	00024b07 	.word	0x00024b07

00010fa8 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10fa8:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10faa:	4a0a      	ldr	r2, [pc, #40]	; (10fd4 <bt_rand+0x2c>)
{
   10fac:	4604      	mov	r4, r0
   10fae:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10fb0:	f00d f859 	bl	1e066 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10fb4:	1c43      	adds	r3, r0, #1
   10fb6:	d107      	bne.n	10fc8 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10fb8:	f7ff ff62 	bl	10e80 <prng_reseed.constprop.0>
		if (ret) {
   10fbc:	b948      	cbnz	r0, 10fd2 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10fbe:	4629      	mov	r1, r5
   10fc0:	4620      	mov	r0, r4
   10fc2:	4a04      	ldr	r2, [pc, #16]	; (10fd4 <bt_rand+0x2c>)
   10fc4:	f00d f84f 	bl	1e066 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10fc8:	2801      	cmp	r0, #1
   10fca:	bf14      	ite	ne
   10fcc:	f06f 0004 	mvnne.w	r0, #4
   10fd0:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   10fd2:	bd38      	pop	{r3, r4, r5, pc}
   10fd4:	20008900 	.word	0x20008900

00010fd8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10fd8:	2300      	movs	r3, #0
{
   10fda:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10fdc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10fe0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   10fe2:	4801      	ldr	r0, [pc, #4]	; (10fe8 <tx_free+0x10>)
   10fe4:	f010 b9e8 	b.w	213b8 <k_queue_append>
   10fe8:	20008578 	.word	0x20008578

00010fec <notify_connected>:
{
   10fec:	b538      	push	{r3, r4, r5, lr}
   10fee:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10ff0:	4b08      	ldr	r3, [pc, #32]	; (11014 <notify_connected+0x28>)
   10ff2:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10ff4:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
   10ff6:	b92d      	cbnz	r5, 11004 <notify_connected+0x18>
	if (!conn->err) {
   10ff8:	b951      	cbnz	r1, 11010 <notify_connected+0x24>
		bt_gatt_connected(conn);
   10ffa:	4620      	mov	r0, r4
}
   10ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   11000:	f004 b85a 	b.w	150b8 <bt_gatt_connected>
		if (cb->connected) {
   11004:	682b      	ldr	r3, [r5, #0]
   11006:	b10b      	cbz	r3, 1100c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   11008:	4620      	mov	r0, r4
   1100a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1100c:	69ad      	ldr	r5, [r5, #24]
   1100e:	e7f1      	b.n	10ff4 <notify_connected+0x8>
}
   11010:	bd38      	pop	{r3, r4, r5, pc}
   11012:	bf00      	nop
   11014:	20009c1c 	.word	0x20009c1c

00011018 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   11018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1101c:	4604      	mov	r4, r0
   1101e:	460e      	mov	r6, r1
   11020:	4691      	mov	r9, r2
   11022:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   11024:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   11026:	f04f 33ff 	mov.w	r3, #4294967295
   1102a:	f04f 32ff 	mov.w	r2, #4294967295
   1102e:	4847      	ldr	r0, [pc, #284]	; (1114c <send_frag+0x134>)
   11030:	f00a fb2e 	bl	1b690 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   11034:	7b63      	ldrb	r3, [r4, #13]
   11036:	2b07      	cmp	r3, #7
   11038:	d14b      	bne.n	110d2 <send_frag+0xba>
	__asm__ volatile(
   1103a:	f04f 0320 	mov.w	r3, #32
   1103e:	f3ef 8211 	mrs	r2, BASEPRI
   11042:	f383 8811 	msr	BASEPRI, r3
   11046:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   1104a:	69a3      	ldr	r3, [r4, #24]
   1104c:	2d00      	cmp	r5, #0
   1104e:	d052      	beq.n	110f6 <send_frag+0xde>
	parent->next = child;
   11050:	2100      	movs	r1, #0
   11052:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   11054:	2b00      	cmp	r3, #0
   11056:	d14b      	bne.n	110f0 <send_frag+0xd8>
	list->head = node;
   11058:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1105c:	f382 8811 	msr	BASEPRI, r2
   11060:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   11064:	2104      	movs	r1, #4
   11066:	f106 0008 	add.w	r0, r6, #8
   1106a:	f006 fbbd 	bl	177e8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1106e:	8823      	ldrh	r3, [r4, #0]
   11070:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   11074:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   11078:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1107a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1107e:	3b04      	subs	r3, #4
   11080:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11082:	2302      	movs	r3, #2
	return bt_send(buf);
   11084:	4630      	mov	r0, r6
   11086:	7533      	strb	r3, [r6, #20]
   11088:	f7fe fe30 	bl	fcec <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   1108c:	4602      	mov	r2, r0
   1108e:	2800      	cmp	r0, #0
   11090:	d059      	beq.n	11146 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   11092:	2145      	movs	r1, #69	; 0x45
   11094:	482e      	ldr	r0, [pc, #184]	; (11150 <send_frag+0x138>)
   11096:	f00b fc7f 	bl	1c998 <printk>
	__asm__ volatile(
   1109a:	f04f 0320 	mov.w	r3, #32
   1109e:	f3ef 8911 	mrs	r9, BASEPRI
   110a2:	f383 8811 	msr	BASEPRI, r3
   110a6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   110aa:	2d00      	cmp	r5, #0
   110ac:	d037      	beq.n	1111e <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110ae:	2200      	movs	r2, #0
	return list->head;
   110b0:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110b2:	b153      	cbz	r3, 110ca <send_frag+0xb2>
   110b4:	429d      	cmp	r5, r3
   110b6:	d12f      	bne.n	11118 <send_frag+0x100>
	return node->next;
   110b8:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   110ba:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   110bc:	bb3a      	cbnz	r2, 1110e <send_frag+0xf6>
   110be:	42a9      	cmp	r1, r5
	list->head = node;
   110c0:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   110c2:	d100      	bne.n	110c6 <send_frag+0xae>
	list->tail = node;
   110c4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   110c6:	2300      	movs	r3, #0
   110c8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   110ca:	f389 8811 	msr	BASEPRI, r9
   110ce:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   110d2:	481e      	ldr	r0, [pc, #120]	; (1114c <send_frag+0x134>)
   110d4:	f00a faa0 	bl	1b618 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   110d8:	b115      	cbz	r5, 110e0 <send_frag+0xc8>
		tx_free(tx);
   110da:	4628      	mov	r0, r5
   110dc:	f7ff ff7c 	bl	10fd8 <tx_free>
	}

	if (always_consume) {
   110e0:	b11f      	cbz	r7, 110ea <send_frag+0xd2>
		net_buf_unref(buf);
   110e2:	4630      	mov	r0, r6
   110e4:	f006 fac2 	bl	1766c <net_buf_unref>
	}
	return false;
   110e8:	2700      	movs	r7, #0
}
   110ea:	4638      	mov	r0, r7
   110ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   110f0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   110f2:	61a5      	str	r5, [r4, #24]
}
   110f4:	e7b2      	b.n	1105c <send_frag+0x44>
		if (tail_tx) {
   110f6:	b133      	cbz	r3, 11106 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   110f8:	f103 080c 	add.w	r8, r3, #12
   110fc:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   110fe:	3301      	adds	r3, #1
   11100:	f8c8 3000 	str.w	r3, [r8]
   11104:	e7aa      	b.n	1105c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   11106:	69e3      	ldr	r3, [r4, #28]
   11108:	f104 081c 	add.w	r8, r4, #28
   1110c:	e7f7      	b.n	110fe <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   1110e:	42a9      	cmp	r1, r5
	parent->next = child;
   11110:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11112:	bf08      	it	eq
   11114:	61a2      	streq	r2, [r4, #24]
}
   11116:	e7d6      	b.n	110c6 <send_frag+0xae>
	return node->next;
   11118:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1111a:	681b      	ldr	r3, [r3, #0]
   1111c:	e7c9      	b.n	110b2 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1111e:	f8d8 3000 	ldr.w	r3, [r8]
   11122:	b953      	cbnz	r3, 1113a <send_frag+0x122>
   11124:	490b      	ldr	r1, [pc, #44]	; (11154 <send_frag+0x13c>)
   11126:	480c      	ldr	r0, [pc, #48]	; (11158 <send_frag+0x140>)
   11128:	f240 4292 	movw	r2, #1170	; 0x492
   1112c:	f00b fc34 	bl	1c998 <printk>
   11130:	f240 4192 	movw	r1, #1170	; 0x492
   11134:	4807      	ldr	r0, [pc, #28]	; (11154 <send_frag+0x13c>)
   11136:	f00b fed5 	bl	1cee4 <assert_post_action>
			(*pending_no_cb)--;
   1113a:	f8d8 3000 	ldr.w	r3, [r8]
   1113e:	3b01      	subs	r3, #1
   11140:	f8c8 3000 	str.w	r3, [r8]
   11144:	e7c1      	b.n	110ca <send_frag+0xb2>
	return true;
   11146:	2701      	movs	r7, #1
   11148:	e7cf      	b.n	110ea <send_frag+0xd2>
   1114a:	bf00      	nop
   1114c:	200080c8 	.word	0x200080c8
   11150:	000245d0 	.word	0x000245d0
   11154:	00024b30 	.word	0x00024b30
   11158:	00022dd6 	.word	0x00022dd6

0001115c <bt_conn_get_pkts>:
}
   1115c:	4800      	ldr	r0, [pc, #0]	; (11160 <bt_conn_get_pkts+0x4>)
   1115e:	4770      	bx	lr
   11160:	200080c8 	.word	0x200080c8

00011164 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11164:	1d03      	adds	r3, r0, #4
{
   11166:	b570      	push	{r4, r5, r6, lr}
   11168:	4604      	mov	r4, r0
   1116a:	4618      	mov	r0, r3
   1116c:	f00d fbca 	bl	1e904 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11170:	0582      	lsls	r2, r0, #22
   11172:	d512      	bpl.n	1119a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   11174:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11178:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   1117c:	4291      	cmp	r1, r2
   1117e:	d80c      	bhi.n	1119a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   11180:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   11184:	4291      	cmp	r1, r2
   11186:	d308      	bcc.n	1119a <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   11188:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   1118c:	4291      	cmp	r1, r2
   1118e:	d104      	bne.n	1119a <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11190:	f46f 7100 	mvn.w	r1, #512	; 0x200
   11194:	4618      	mov	r0, r3
   11196:	f00d fbb8 	bl	1e90a <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
   1119a:	4b08      	ldr	r3, [pc, #32]	; (111bc <notify_le_param_updated+0x58>)
   1119c:	681d      	ldr	r5, [r3, #0]
   1119e:	b905      	cbnz	r5, 111a2 <notify_le_param_updated+0x3e>
}
   111a0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   111a2:	68ee      	ldr	r6, [r5, #12]
   111a4:	b13e      	cbz	r6, 111b6 <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
   111a6:	4620      	mov	r0, r4
   111a8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   111ac:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   111b0:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   111b4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   111b6:	69ad      	ldr	r5, [r5, #24]
   111b8:	e7f1      	b.n	1119e <notify_le_param_updated+0x3a>
   111ba:	bf00      	nop
   111bc:	20009c1c 	.word	0x20009c1c

000111c0 <le_param_req>:
{
   111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111c2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   111c4:	4608      	mov	r0, r1
{
   111c6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   111c8:	f00d faba 	bl	1e740 <bt_le_conn_params_valid>
   111cc:	4604      	mov	r4, r0
   111ce:	b910      	cbnz	r0, 111d6 <le_param_req+0x16>
		return false;
   111d0:	2400      	movs	r4, #0
}
   111d2:	4620      	mov	r0, r4
   111d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   111d6:	4b09      	ldr	r3, [pc, #36]	; (111fc <le_param_req+0x3c>)
   111d8:	681e      	ldr	r6, [r3, #0]
   111da:	2e00      	cmp	r6, #0
   111dc:	d0f9      	beq.n	111d2 <le_param_req+0x12>
		if (!cb->le_param_req) {
   111de:	68b3      	ldr	r3, [r6, #8]
   111e0:	b90b      	cbnz	r3, 111e6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   111e2:	69b6      	ldr	r6, [r6, #24]
   111e4:	e7f9      	b.n	111da <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   111e6:	4629      	mov	r1, r5
   111e8:	4638      	mov	r0, r7
   111ea:	4798      	blx	r3
   111ec:	2800      	cmp	r0, #0
   111ee:	d0ef      	beq.n	111d0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   111f0:	4628      	mov	r0, r5
   111f2:	f00d faa5 	bl	1e740 <bt_le_conn_params_valid>
   111f6:	2800      	cmp	r0, #0
   111f8:	d1f3      	bne.n	111e2 <le_param_req+0x22>
   111fa:	e7e9      	b.n	111d0 <le_param_req+0x10>
   111fc:	20009c1c 	.word	0x20009c1c

00011200 <bt_conn_identity_resolved>:
{
   11200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   11202:	78c3      	ldrb	r3, [r0, #3]
{
   11204:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   11206:	b93b      	cbnz	r3, 11218 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   11208:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   1120c:	4b08      	ldr	r3, [pc, #32]	; (11230 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1120e:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   11212:	681d      	ldr	r5, [r3, #0]
   11214:	b91d      	cbnz	r5, 1121e <bt_conn_identity_resolved+0x1e>
}
   11216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   11218:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1121c:	e7f6      	b.n	1120c <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   1121e:	692b      	ldr	r3, [r5, #16]
   11220:	b11b      	cbz	r3, 1122a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11222:	463a      	mov	r2, r7
   11224:	4631      	mov	r1, r6
   11226:	4620      	mov	r0, r4
   11228:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1122a:	69ad      	ldr	r5, [r5, #24]
   1122c:	e7f2      	b.n	11214 <bt_conn_identity_resolved+0x14>
   1122e:	bf00      	nop
   11230:	20009c1c 	.word	0x20009c1c

00011234 <bt_conn_security_changed>:
{
   11234:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   11236:	7a43      	ldrb	r3, [r0, #9]
{
   11238:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1123a:	7283      	strb	r3, [r0, #10]
{
   1123c:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   1123e:	f00d fd01 	bl	1ec44 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   11242:	4b06      	ldr	r3, [pc, #24]	; (1125c <bt_conn_security_changed+0x28>)
   11244:	681d      	ldr	r5, [r3, #0]
   11246:	b905      	cbnz	r5, 1124a <bt_conn_security_changed+0x16>
}
   11248:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   1124a:	696b      	ldr	r3, [r5, #20]
   1124c:	b11b      	cbz	r3, 11256 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   1124e:	4632      	mov	r2, r6
   11250:	4620      	mov	r0, r4
   11252:	7a61      	ldrb	r1, [r4, #9]
   11254:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11256:	69ad      	ldr	r5, [r5, #24]
   11258:	e7f5      	b.n	11246 <bt_conn_security_changed+0x12>
   1125a:	bf00      	nop
   1125c:	20009c1c 	.word	0x20009c1c

00011260 <bt_conn_cb_register>:
	cb->_next = callback_list;
   11260:	4b02      	ldr	r3, [pc, #8]	; (1126c <bt_conn_cb_register+0xc>)
   11262:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   11264:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   11266:	6182      	str	r2, [r0, #24]
}
   11268:	4770      	bx	lr
   1126a:	bf00      	nop
   1126c:	20009c1c 	.word	0x20009c1c

00011270 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   11270:	b570      	push	{r4, r5, r6, lr}
   11272:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   11274:	f100 0634 	add.w	r6, r0, #52	; 0x34
   11278:	2200      	movs	r2, #0
   1127a:	2300      	movs	r3, #0
   1127c:	4630      	mov	r0, r6
   1127e:	f006 f973 	bl	17568 <net_buf_get>
   11282:	4605      	mov	r5, r0
   11284:	bb28      	cbnz	r0, 112d2 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   11286:	6963      	ldr	r3, [r4, #20]
   11288:	b153      	cbz	r3, 112a0 <conn_cleanup+0x30>
   1128a:	4916      	ldr	r1, [pc, #88]	; (112e4 <conn_cleanup+0x74>)
   1128c:	4816      	ldr	r0, [pc, #88]	; (112e8 <conn_cleanup+0x78>)
   1128e:	f240 520c 	movw	r2, #1292	; 0x50c
   11292:	f00b fb81 	bl	1c998 <printk>
   11296:	f240 510c 	movw	r1, #1292	; 0x50c
   1129a:	4812      	ldr	r0, [pc, #72]	; (112e4 <conn_cleanup+0x74>)
   1129c:	f00b fe22 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   112a0:	69e3      	ldr	r3, [r4, #28]
   112a2:	b153      	cbz	r3, 112ba <conn_cleanup+0x4a>
   112a4:	490f      	ldr	r1, [pc, #60]	; (112e4 <conn_cleanup+0x74>)
   112a6:	4810      	ldr	r0, [pc, #64]	; (112e8 <conn_cleanup+0x78>)
   112a8:	f240 520d 	movw	r2, #1293	; 0x50d
   112ac:	f00b fb74 	bl	1c998 <printk>
   112b0:	f240 510d 	movw	r1, #1293	; 0x50d
   112b4:	480b      	ldr	r0, [pc, #44]	; (112e4 <conn_cleanup+0x74>)
   112b6:	f00b fe15 	bl	1cee4 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   112ba:	4620      	mov	r0, r4
   112bc:	f00d fbe8 	bl	1ea90 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   112c0:	f104 0158 	add.w	r1, r4, #88	; 0x58
   112c4:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   112c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   112ca:	2300      	movs	r3, #0
   112cc:	4807      	ldr	r0, [pc, #28]	; (112ec <conn_cleanup+0x7c>)
   112ce:	f00a bc05 	b.w	1badc <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   112d2:	6968      	ldr	r0, [r5, #20]
   112d4:	b108      	cbz	r0, 112da <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   112d6:	f7ff fe7f 	bl	10fd8 <tx_free>
		net_buf_unref(buf);
   112da:	4628      	mov	r0, r5
   112dc:	f006 f9c6 	bl	1766c <net_buf_unref>
   112e0:	e7ca      	b.n	11278 <conn_cleanup+0x8>
   112e2:	bf00      	nop
   112e4:	00024b30 	.word	0x00024b30
   112e8:	00022dd6 	.word	0x00022dd6
   112ec:	20009630 	.word	0x20009630

000112f0 <bt_conn_recv>:
{
   112f0:	b570      	push	{r4, r5, r6, lr}
   112f2:	4616      	mov	r6, r2
   112f4:	4604      	mov	r4, r0
   112f6:	460d      	mov	r5, r1
	tx_notify(conn);
   112f8:	f00d fb1d 	bl	1e936 <tx_notify>
	switch (flags) {
   112fc:	2e01      	cmp	r6, #1
   112fe:	d01f      	beq.n	11340 <bt_conn_recv+0x50>
   11300:	2e02      	cmp	r6, #2
   11302:	d140      	bne.n	11386 <bt_conn_recv+0x96>
		if (conn->rx) {
   11304:	6923      	ldr	r3, [r4, #16]
   11306:	b133      	cbz	r3, 11316 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   11308:	4826      	ldr	r0, [pc, #152]	; (113a4 <bt_conn_recv+0xb4>)
   1130a:	2145      	movs	r1, #69	; 0x45
   1130c:	f00b fb44 	bl	1c998 <printk>
			bt_conn_reset_rx_state(conn);
   11310:	4620      	mov	r0, r4
   11312:	f00d fbbd 	bl	1ea90 <bt_conn_reset_rx_state>
		conn->rx = buf;
   11316:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   11318:	6921      	ldr	r1, [r4, #16]
   1131a:	898a      	ldrh	r2, [r1, #12]
   1131c:	2a01      	cmp	r2, #1
   1131e:	d93f      	bls.n	113a0 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   11320:	688b      	ldr	r3, [r1, #8]
   11322:	881b      	ldrh	r3, [r3, #0]
   11324:	3304      	adds	r3, #4
   11326:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   11328:	429a      	cmp	r2, r3
   1132a:	d339      	bcc.n	113a0 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   1132c:	d931      	bls.n	11392 <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   1132e:	481e      	ldr	r0, [pc, #120]	; (113a8 <bt_conn_recv+0xb8>)
   11330:	2145      	movs	r1, #69	; 0x45
   11332:	f00b fb31 	bl	1c998 <printk>
		bt_conn_reset_rx_state(conn);
   11336:	4620      	mov	r0, r4
}
   11338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1133c:	f00d bba8 	b.w	1ea90 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   11340:	6920      	ldr	r0, [r4, #16]
   11342:	b938      	cbnz	r0, 11354 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   11344:	2145      	movs	r1, #69	; 0x45
   11346:	4819      	ldr	r0, [pc, #100]	; (113ac <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   11348:	f00b fb26 	bl	1c998 <printk>
			bt_conn_reset_rx_state(conn);
   1134c:	4620      	mov	r0, r4
   1134e:	f00d fb9f 	bl	1ea90 <bt_conn_reset_rx_state>
   11352:	e001      	b.n	11358 <bt_conn_recv+0x68>
		if (!buf->len) {
   11354:	89ae      	ldrh	r6, [r5, #12]
   11356:	b926      	cbnz	r6, 11362 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   11358:	4628      	mov	r0, r5
}
   1135a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1135e:	f006 b985 	b.w	1766c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   11362:	3008      	adds	r0, #8
   11364:	f00f f958 	bl	20618 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   11368:	4286      	cmp	r6, r0
   1136a:	d902      	bls.n	11372 <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   1136c:	2145      	movs	r1, #69	; 0x45
   1136e:	4810      	ldr	r0, [pc, #64]	; (113b0 <bt_conn_recv+0xc0>)
   11370:	e7ea      	b.n	11348 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11372:	6920      	ldr	r0, [r4, #16]
   11374:	89aa      	ldrh	r2, [r5, #12]
   11376:	68a9      	ldr	r1, [r5, #8]
   11378:	3008      	adds	r0, #8
   1137a:	f00f f955 	bl	20628 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1137e:	4628      	mov	r0, r5
   11380:	f006 f974 	bl	1766c <net_buf_unref>
		break;
   11384:	e7c8      	b.n	11318 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   11386:	4632      	mov	r2, r6
   11388:	2145      	movs	r1, #69	; 0x45
   1138a:	480a      	ldr	r0, [pc, #40]	; (113b4 <bt_conn_recv+0xc4>)
   1138c:	f00b fb04 	bl	1c998 <printk>
		bt_conn_reset_rx_state(conn);
   11390:	e7dc      	b.n	1134c <bt_conn_recv+0x5c>
	conn->rx = NULL;
   11392:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   11394:	4620      	mov	r0, r4
	conn->rx = NULL;
   11396:	6123      	str	r3, [r4, #16]
}
   11398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1139c:	f000 bed8 	b.w	12150 <bt_l2cap_recv>
}
   113a0:	bd70      	pop	{r4, r5, r6, pc}
   113a2:	bf00      	nop
   113a4:	00024b60 	.word	0x00024b60
   113a8:	00024bf4 	.word	0x00024bf4
   113ac:	00024b82 	.word	0x00024b82
   113b0:	00024ba5 	.word	0x00024ba5
   113b4:	00024bd1 	.word	0x00024bd1

000113b8 <bt_conn_send_cb>:
{
   113b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113bc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   113be:	7b43      	ldrb	r3, [r0, #13]
{
   113c0:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   113c2:	2b07      	cmp	r3, #7
{
   113c4:	460d      	mov	r5, r1
   113c6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   113c8:	d009      	beq.n	113de <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   113ca:	4821      	ldr	r0, [pc, #132]	; (11450 <bt_conn_send_cb+0x98>)
   113cc:	2145      	movs	r1, #69	; 0x45
   113ce:	f00b fae3 	bl	1c998 <printk>
		net_buf_unref(buf);
   113d2:	4628      	mov	r0, r5
   113d4:	f006 f94a 	bl	1766c <net_buf_unref>
			return -ENOTCONN;
   113d8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   113dc:	e01a      	b.n	11414 <bt_conn_send_cb+0x5c>
	if (cb) {
   113de:	2a00      	cmp	r2, #0
   113e0:	d034      	beq.n	1144c <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   113e2:	f00a f913 	bl	1b60c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   113e6:	4b1b      	ldr	r3, [pc, #108]	; (11454 <bt_conn_send_cb+0x9c>)
   113e8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   113ea:	481b      	ldr	r0, [pc, #108]	; (11458 <bt_conn_send_cb+0xa0>)
   113ec:	bf07      	ittee	eq
   113ee:	2200      	moveq	r2, #0
   113f0:	2300      	moveq	r3, #0
   113f2:	f04f 32ff 	movne.w	r2, #4294967295
   113f6:	f04f 33ff 	movne.w	r3, #4294967295
   113fa:	f009 f8a1 	bl	1a540 <z_impl_k_queue_get>
   113fe:	4604      	mov	r4, r0
		if (!tx) {
   11400:	b950      	cbnz	r0, 11418 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   11402:	2145      	movs	r1, #69	; 0x45
   11404:	4815      	ldr	r0, [pc, #84]	; (1145c <bt_conn_send_cb+0xa4>)
   11406:	f00b fac7 	bl	1c998 <printk>
			net_buf_unref(buf);
   1140a:	4628      	mov	r0, r5
   1140c:	f006 f92e 	bl	1766c <net_buf_unref>
			return -ENOBUFS;
   11410:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   11414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11418:	7b73      	ldrb	r3, [r6, #13]
   1141a:	2b07      	cmp	r3, #7
   1141c:	d00a      	beq.n	11434 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   1141e:	2157      	movs	r1, #87	; 0x57
   11420:	480f      	ldr	r0, [pc, #60]	; (11460 <bt_conn_send_cb+0xa8>)
   11422:	f00b fab9 	bl	1c998 <printk>
			net_buf_unref(buf);
   11426:	4628      	mov	r0, r5
   11428:	f006 f920 	bl	1766c <net_buf_unref>
			tx_free(tx);
   1142c:	4620      	mov	r0, r4
   1142e:	f7ff fdd3 	bl	10fd8 <tx_free>
   11432:	e7d1      	b.n	113d8 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   11434:	2300      	movs	r3, #0
		tx->user_data = user_data;
   11436:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1143a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1143c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1143e:	f106 0034 	add.w	r0, r6, #52	; 0x34
   11442:	4629      	mov	r1, r5
   11444:	f006 f8e4 	bl	17610 <net_buf_put>
	return 0;
   11448:	2000      	movs	r0, #0
   1144a:	e7e3      	b.n	11414 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   1144c:	614a      	str	r2, [r1, #20]
   1144e:	e7f6      	b.n	1143e <bt_conn_send_cb+0x86>
   11450:	00024c14 	.word	0x00024c14
   11454:	20009650 	.word	0x20009650
   11458:	20008578 	.word	0x20008578
   1145c:	00024c28 	.word	0x00024c28
   11460:	00024c4b 	.word	0x00024c4b

00011464 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   11464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   11468:	2500      	movs	r5, #0
   1146a:	4b1a      	ldr	r3, [pc, #104]	; (114d4 <bt_conn_prepare_events+0x70>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1146c:	462a      	mov	r2, r5
   1146e:	2101      	movs	r1, #1
{
   11470:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   11472:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11474:	2601      	movs	r6, #1
   11476:	f00b f855 	bl	1c524 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1147a:	f04f 0914 	mov.w	r9, #20
   1147e:	4c16      	ldr	r4, [pc, #88]	; (114d8 <bt_conn_prepare_events+0x74>)
	if (!atomic_get(&conn->ref)) {
   11480:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   11484:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   11488:	f00d fa3c 	bl	1e904 <atomic_get>
   1148c:	b158      	cbz	r0, 114a6 <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1148e:	7b63      	ldrb	r3, [r4, #13]
   11490:	b98b      	cbnz	r3, 114b6 <bt_conn_prepare_events+0x52>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11492:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11496:	1d20      	adds	r0, r4, #4
   11498:	f00d fa37 	bl	1e90a <atomic_and>
   1149c:	0643      	lsls	r3, r0, #25
   1149e:	d50a      	bpl.n	114b6 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   114a0:	4620      	mov	r0, r4
   114a2:	f7ff fee5 	bl	11270 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   114a6:	3501      	adds	r5, #1
   114a8:	2d03      	cmp	r5, #3
   114aa:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   114ae:	d1e7      	bne.n	11480 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   114b0:	4630      	mov	r0, r6
   114b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   114b6:	7b63      	ldrb	r3, [r4, #13]
   114b8:	2b07      	cmp	r3, #7
   114ba:	d1f4      	bne.n	114a6 <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   114bc:	f104 0334 	add.w	r3, r4, #52	; 0x34
   114c0:	2200      	movs	r2, #0
   114c2:	2104      	movs	r1, #4
   114c4:	4640      	mov	r0, r8
   114c6:	f00b f82d 	bl	1c524 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   114ca:	2301      	movs	r3, #1
   114cc:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   114d0:	441e      	add	r6, r3
   114d2:	e7e8      	b.n	114a6 <bt_conn_prepare_events+0x42>
   114d4:	20008328 	.word	0x20008328
   114d8:	20008a38 	.word	0x20008a38

000114dc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   114dc:	b570      	push	{r4, r5, r6, lr}
   114de:	4606      	mov	r6, r0
   114e0:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   114e2:	4811      	ldr	r0, [pc, #68]	; (11528 <bt_conn_add_le+0x4c>)
   114e4:	2103      	movs	r1, #3
   114e6:	f00d fa4c 	bl	1e982 <bt_conn_new>
	if (!conn) {
   114ea:	4604      	mov	r4, r0
   114ec:	b1c8      	cbz	r0, 11522 <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   114ee:	2230      	movs	r2, #48	; 0x30
   114f0:	2100      	movs	r1, #0
   114f2:	3058      	adds	r0, #88	; 0x58
   114f4:	f00c ff33 	bl	1e35e <memset>
   114f8:	4b0c      	ldr	r3, [pc, #48]	; (1152c <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   114fa:	4a0d      	ldr	r2, [pc, #52]	; (11530 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   114fc:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   114fe:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   11500:	4629      	mov	r1, r5
   11502:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   11506:	62a3      	str	r3, [r4, #40]	; 0x28
   11508:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   1150a:	7226      	strb	r6, [r4, #8]
   1150c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   11510:	f00c fefa 	bl	1e308 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   11514:	2301      	movs	r3, #1
   11516:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   11518:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1151a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1151c:	4b05      	ldr	r3, [pc, #20]	; (11534 <bt_conn_add_le+0x58>)
   1151e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   11522:	4620      	mov	r0, r4
   11524:	bd70      	pop	{r4, r5, r6, pc}
   11526:	bf00      	nop
   11528:	20008a38 	.word	0x20008a38
   1152c:	00011bad 	.word	0x00011bad
   11530:	0001e97d 	.word	0x0001e97d
   11534:	00280018 	.word	0x00280018

00011538 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   11538:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1153a:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1153e:	e8d4 3fef 	ldaex	r3, [r4]
   11542:	1e5a      	subs	r2, r3, #1
   11544:	e8c4 2fe1 	stlex	r1, r2, [r4]
   11548:	2900      	cmp	r1, #0
   1154a:	d1f8      	bne.n	1153e <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   1154c:	2b00      	cmp	r3, #0
   1154e:	dc0a      	bgt.n	11566 <bt_conn_unref+0x2e>
   11550:	4909      	ldr	r1, [pc, #36]	; (11578 <bt_conn_unref+0x40>)
   11552:	480a      	ldr	r0, [pc, #40]	; (1157c <bt_conn_unref+0x44>)
   11554:	f240 7265 	movw	r2, #1893	; 0x765
   11558:	f00b fa1e 	bl	1c998 <printk>
   1155c:	f240 7165 	movw	r1, #1893	; 0x765
   11560:	4805      	ldr	r0, [pc, #20]	; (11578 <bt_conn_unref+0x40>)
   11562:	f00b fcbf 	bl	1cee4 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   11566:	4620      	mov	r0, r4
   11568:	f00d f9cc 	bl	1e904 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1156c:	b918      	cbnz	r0, 11576 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   1156e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   11572:	f7ff ba21 	b.w	109b8 <bt_le_adv_resume>
}
   11576:	bd10      	pop	{r4, pc}
   11578:	00024b30 	.word	0x00024b30
   1157c:	00022dd6 	.word	0x00022dd6

00011580 <bt_conn_lookup_handle>:
{
   11580:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   11582:	2103      	movs	r1, #3
   11584:	4801      	ldr	r0, [pc, #4]	; (1158c <bt_conn_lookup_handle+0xc>)
   11586:	f00d bac3 	b.w	1eb10 <conn_lookup_handle>
   1158a:	bf00      	nop
   1158c:	20008a38 	.word	0x20008a38

00011590 <bt_conn_set_state>:
{
   11590:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   11592:	7b45      	ldrb	r5, [r0, #13]
{
   11594:	4604      	mov	r4, r0
	if (conn->state == state) {
   11596:	428d      	cmp	r5, r1
{
   11598:	460e      	mov	r6, r1
	if (conn->state == state) {
   1159a:	d10b      	bne.n	115b4 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   1159c:	2157      	movs	r1, #87	; 0x57
   1159e:	2d08      	cmp	r5, #8
   115a0:	bf96      	itet	ls
   115a2:	4b6b      	ldrls	r3, [pc, #428]	; (11750 <bt_conn_set_state+0x1c0>)
	if (conn->state == state) {
   115a4:	4a6b      	ldrhi	r2, [pc, #428]	; (11754 <bt_conn_set_state+0x1c4>)
   115a6:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   115aa:	486b      	ldr	r0, [pc, #428]	; (11758 <bt_conn_set_state+0x1c8>)
}
   115ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   115b0:	f00b b9f2 	b.w	1c998 <printk>
	conn->state = state;
   115b4:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   115b6:	b165      	cbz	r5, 115d2 <bt_conn_set_state+0x42>
   115b8:	2d06      	cmp	r5, #6
   115ba:	d00d      	beq.n	115d8 <bt_conn_set_state+0x48>
	switch (conn->state) {
   115bc:	7b63      	ldrb	r3, [r4, #13]
   115be:	2b08      	cmp	r3, #8
   115c0:	f200 80c0 	bhi.w	11744 <bt_conn_set_state+0x1b4>
   115c4:	e8df f003 	tbb	[pc, r3]
   115c8:	c2c20f4a 	.word	0xc2c20f4a
   115cc:	2789c2c2 	.word	0x2789c2c2
   115d0:	c2          	.byte	0xc2
   115d1:	00          	.byte	0x00
		bt_conn_ref(conn);
   115d2:	f00d fa86 	bl	1eae2 <bt_conn_ref>
		break;
   115d6:	e7f1      	b.n	115bc <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   115d8:	7883      	ldrb	r3, [r0, #2]
   115da:	2b01      	cmp	r3, #1
   115dc:	d1ee      	bne.n	115bc <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   115de:	3058      	adds	r0, #88	; 0x58
   115e0:	f00a faec 	bl	1bbbc <k_delayed_work_cancel>
   115e4:	e7ea      	b.n	115bc <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   115e6:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   115e8:	4d5c      	ldr	r5, [pc, #368]	; (1175c <bt_conn_set_state+0x1cc>)
	__asm__ volatile(
   115ea:	f04f 0320 	mov.w	r3, #32
   115ee:	f3ef 8211 	mrs	r2, BASEPRI
   115f2:	f383 8811 	msr	BASEPRI, r3
   115f6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   115fa:	69e3      	ldr	r3, [r4, #28]
   115fc:	2b00      	cmp	r3, #0
   115fe:	f000 8082 	beq.w	11706 <bt_conn_set_state+0x176>
			conn->pending_no_cb--;
   11602:	3b01      	subs	r3, #1
   11604:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11606:	f382 8811 	msr	BASEPRI, r2
   1160a:	f3bf 8f6f 	isb	sy
   1160e:	4628      	mov	r0, r5
   11610:	f00a f802 	bl	1b618 <z_impl_k_sem_give>
}
   11614:	e7e9      	b.n	115ea <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11616:	78a3      	ldrb	r3, [r4, #2]
   11618:	2b04      	cmp	r3, #4
   1161a:	f000 8097 	beq.w	1174c <bt_conn_set_state+0x1bc>
	z_impl_k_queue_init(queue);
   1161e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11622:	f00f febc 	bl	2139e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   11626:	2100      	movs	r1, #0
   11628:	484d      	ldr	r0, [pc, #308]	; (11760 <bt_conn_set_state+0x1d0>)
   1162a:	f00b f887 	bl	1c73c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1162e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   11630:	4620      	mov	r0, r4
	list->tail = NULL;
   11632:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   11636:	f000 fc99 	bl	11f6c <bt_l2cap_connected>
		notify_connected(conn);
   1163a:	4620      	mov	r0, r4
   1163c:	f7ff fcd6 	bl	10fec <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11640:	78e3      	ldrb	r3, [r4, #3]
   11642:	2b01      	cmp	r3, #1
   11644:	f040 8082 	bne.w	1174c <bt_conn_set_state+0x1bc>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11648:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1164c:	2300      	movs	r3, #0
   1164e:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11652:	4844      	ldr	r0, [pc, #272]	; (11764 <bt_conn_set_state+0x1d4>)
}
   11654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11658:	f00a ba40 	b.w	1badc <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1165c:	78a3      	ldrb	r3, [r4, #2]
   1165e:	2b04      	cmp	r3, #4
   11660:	d104      	bne.n	1166c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   11662:	4620      	mov	r0, r4
}
   11664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   11668:	f7ff bf66 	b.w	11538 <bt_conn_unref>
		switch (old_state) {
   1166c:	2d08      	cmp	r5, #8
   1166e:	d86d      	bhi.n	1174c <bt_conn_set_state+0x1bc>
   11670:	a301      	add	r3, pc, #4	; (adr r3, 11678 <bt_conn_set_state+0xe8>)
   11672:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   11676:	bf00      	nop
   11678:	000116d3 	.word	0x000116d3
   1167c:	0001169d 	.word	0x0001169d
   11680:	000116c5 	.word	0x000116c5
   11684:	00011663 	.word	0x00011663
   11688:	00011663 	.word	0x00011663
   1168c:	000116c5 	.word	0x000116c5
   11690:	000116c5 	.word	0x000116c5
   11694:	000116d3 	.word	0x000116d3
   11698:	000116d3 	.word	0x000116d3
			tx_notify(conn);
   1169c:	4620      	mov	r0, r4
   1169e:	f00d f94a 	bl	1e936 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   116a2:	78a3      	ldrb	r3, [r4, #2]
   116a4:	2b01      	cmp	r3, #1
   116a6:	d103      	bne.n	116b0 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   116a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   116ac:	f00a fa86 	bl	1bbbc <k_delayed_work_cancel>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   116b0:	2140      	movs	r1, #64	; 0x40
   116b2:	1d20      	adds	r0, r4, #4
   116b4:	f00d f934 	bl	1e920 <atomic_or>
}
   116b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   116bc:	2100      	movs	r1, #0
   116be:	4828      	ldr	r0, [pc, #160]	; (11760 <bt_conn_set_state+0x1d0>)
   116c0:	f00b b83c 	b.w	1c73c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   116c4:	7b23      	ldrb	r3, [r4, #12]
   116c6:	2b00      	cmp	r3, #0
   116c8:	d0cb      	beq.n	11662 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   116ca:	4620      	mov	r0, r4
   116cc:	f7ff fc8e 	bl	10fec <notify_connected>
   116d0:	e7c7      	b.n	11662 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   116d2:	4632      	mov	r2, r6
   116d4:	2157      	movs	r1, #87	; 0x57
   116d6:	4824      	ldr	r0, [pc, #144]	; (11768 <bt_conn_set_state+0x1d8>)
   116d8:	e768      	b.n	115ac <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   116da:	78a3      	ldrb	r3, [r4, #2]
   116dc:	2b01      	cmp	r3, #1
   116de:	d135      	bne.n	1174c <bt_conn_set_state+0x1bc>
				K_MSEC(10 * bt_dev.create_param.timeout));
   116e0:	4b22      	ldr	r3, [pc, #136]	; (1176c <bt_conn_set_state+0x1dc>)
   116e2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   116e6:	8a9d      	ldrh	r5, [r3, #20]
   116e8:	230a      	movs	r3, #10
   116ea:	f240 30e7 	movw	r0, #999	; 0x3e7
   116ee:	2100      	movs	r1, #0
   116f0:	435d      	muls	r5, r3
   116f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   116f6:	2300      	movs	r3, #0
   116f8:	fbc5 0106 	smlal	r0, r1, r5, r6
   116fc:	f7f7 fa16 	bl	8b2c <__aeabi_uldivmod>
   11700:	4602      	mov	r2, r0
   11702:	460b      	mov	r3, r1
   11704:	e7a3      	b.n	1164e <bt_conn_set_state+0xbe>
	return list->head;
   11706:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   11708:	b128      	cbz	r0, 11716 <bt_conn_set_state+0x186>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1170a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1170c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1170e:	4288      	cmp	r0, r1
	list->head = node;
   11710:	6163      	str	r3, [r4, #20]
	list->tail = node;
   11712:	bf08      	it	eq
   11714:	61a3      	streq	r3, [r4, #24]
   11716:	f382 8811 	msr	BASEPRI, r2
   1171a:	f3bf 8f6f 	isb	sy
		if (!node) {
   1171e:	b1a8      	cbz	r0, 1174c <bt_conn_set_state+0x1bc>
	__asm__ volatile(
   11720:	f04f 0220 	mov.w	r2, #32
   11724:	f3ef 8311 	mrs	r3, BASEPRI
   11728:	f382 8811 	msr	BASEPRI, r2
   1172c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   11730:	68c2      	ldr	r2, [r0, #12]
   11732:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   11734:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   11736:	f383 8811 	msr	BASEPRI, r3
   1173a:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1173e:	f7ff fc4b 	bl	10fd8 <tx_free>
   11742:	e764      	b.n	1160e <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   11744:	4632      	mov	r2, r6
   11746:	2157      	movs	r1, #87	; 0x57
   11748:	4809      	ldr	r0, [pc, #36]	; (11770 <bt_conn_set_state+0x1e0>)
   1174a:	e72f      	b.n	115ac <bt_conn_set_state+0x1c>
}
   1174c:	bd70      	pop	{r4, r5, r6, pc}
   1174e:	bf00      	nop
   11750:	00022124 	.word	0x00022124
   11754:	00024c76 	.word	0x00024c76
   11758:	00024c80 	.word	0x00024c80
   1175c:	200080c8 	.word	0x200080c8
   11760:	20008328 	.word	0x20008328
   11764:	20009630 	.word	0x20009630
   11768:	00024c96 	.word	0x00024c96
   1176c:	20008000 	.word	0x20008000
   11770:	00024cb2 	.word	0x00024cb2

00011774 <bt_conn_lookup_addr_le>:
{
   11774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11778:	4607      	mov	r7, r0
   1177a:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1177c:	2500      	movs	r5, #0
   1177e:	4e0e      	ldr	r6, [pc, #56]	; (117b8 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11780:	4630      	mov	r0, r6
   11782:	f00d f9ae 	bl	1eae2 <bt_conn_ref>
		if (!conn) {
   11786:	4604      	mov	r4, r0
   11788:	b120      	cbz	r0, 11794 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   1178a:	7883      	ldrb	r3, [r0, #2]
   1178c:	2b01      	cmp	r3, #1
   1178e:	d00a      	beq.n	117a6 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   11790:	f7ff fed2 	bl	11538 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11794:	3501      	adds	r5, #1
   11796:	2d03      	cmp	r5, #3
   11798:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   1179c:	d1f0      	bne.n	11780 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   1179e:	2400      	movs	r4, #0
}
   117a0:	4620      	mov	r0, r4
   117a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   117a6:	4642      	mov	r2, r8
   117a8:	4639      	mov	r1, r7
   117aa:	f00d f97a 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   117ae:	2800      	cmp	r0, #0
   117b0:	d1f6      	bne.n	117a0 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   117b2:	4620      	mov	r0, r4
   117b4:	e7ec      	b.n	11790 <bt_conn_lookup_addr_le+0x1c>
   117b6:	bf00      	nop
   117b8:	20008a38 	.word	0x20008a38

000117bc <bt_conn_exists_le>:
{
   117bc:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   117be:	f7ff ffd9 	bl	11774 <bt_conn_lookup_addr_le>
	if (conn) {
   117c2:	4604      	mov	r4, r0
   117c4:	b170      	cbz	r0, 117e4 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   117c6:	7b43      	ldrb	r3, [r0, #13]
   117c8:	2157      	movs	r1, #87	; 0x57
   117ca:	2b08      	cmp	r3, #8
   117cc:	bf96      	itet	ls
   117ce:	4a06      	ldrls	r2, [pc, #24]	; (117e8 <bt_conn_exists_le+0x2c>)
   117d0:	4a06      	ldrhi	r2, [pc, #24]	; (117ec <bt_conn_exists_le+0x30>)
   117d2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   117d6:	4806      	ldr	r0, [pc, #24]	; (117f0 <bt_conn_exists_le+0x34>)
   117d8:	f00b f8de 	bl	1c998 <printk>
		bt_conn_unref(conn);
   117dc:	4620      	mov	r0, r4
   117de:	f7ff feab 	bl	11538 <bt_conn_unref>
		return true;
   117e2:	2001      	movs	r0, #1
}
   117e4:	bd10      	pop	{r4, pc}
   117e6:	bf00      	nop
   117e8:	00022124 	.word	0x00022124
   117ec:	00024c76 	.word	0x00024c76
   117f0:	00024cd3 	.word	0x00024cd3

000117f4 <bt_conn_lookup_state_le>:
{
   117f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117f8:	4606      	mov	r6, r0
   117fa:	460f      	mov	r7, r1
   117fc:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   117fe:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11800:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   11804:	f8df a048 	ldr.w	sl, [pc, #72]	; 11850 <bt_conn_lookup_state_le+0x5c>
   11808:	fb09 a005 	mla	r0, r9, r5, sl
   1180c:	f00d f969 	bl	1eae2 <bt_conn_ref>
		if (!conn) {
   11810:	4604      	mov	r4, r0
   11812:	b120      	cbz	r0, 1181e <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   11814:	7883      	ldrb	r3, [r0, #2]
   11816:	2b01      	cmp	r3, #1
   11818:	d006      	beq.n	11828 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   1181a:	f00d f962 	bl	1eae2 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1181e:	3501      	adds	r5, #1
   11820:	2d03      	cmp	r5, #3
   11822:	d1f1      	bne.n	11808 <bt_conn_lookup_state_le+0x14>
	return NULL;
   11824:	2400      	movs	r4, #0
   11826:	e00f      	b.n	11848 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11828:	b147      	cbz	r7, 1183c <bt_conn_lookup_state_le+0x48>
   1182a:	463a      	mov	r2, r7
   1182c:	4631      	mov	r1, r6
   1182e:	f00d f938 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   11832:	b918      	cbnz	r0, 1183c <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   11834:	4620      	mov	r0, r4
   11836:	f7ff fe7f 	bl	11538 <bt_conn_unref>
			continue;
   1183a:	e7f0      	b.n	1181e <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   1183c:	7b63      	ldrb	r3, [r4, #13]
   1183e:	4543      	cmp	r3, r8
   11840:	d1f8      	bne.n	11834 <bt_conn_lookup_state_le+0x40>
   11842:	7a23      	ldrb	r3, [r4, #8]
   11844:	42b3      	cmp	r3, r6
   11846:	d1f5      	bne.n	11834 <bt_conn_lookup_state_le+0x40>
}
   11848:	4620      	mov	r0, r4
   1184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1184e:	bf00      	nop
   11850:	20008a38 	.word	0x20008a38

00011854 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   11854:	b510      	push	{r4, lr}
	info->type = conn->type;
   11856:	7882      	ldrb	r2, [r0, #2]
   11858:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   1185a:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   1185c:	2a01      	cmp	r2, #1
	info->role = conn->role;
   1185e:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   11860:	7a03      	ldrb	r3, [r0, #8]
   11862:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   11864:	d11c      	bne.n	118a0 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   11866:	f100 0288 	add.w	r2, r0, #136	; 0x88
   1186a:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   1186c:	4a0e      	ldr	r2, [pc, #56]	; (118a8 <bt_conn_get_info+0x54>)
   1186e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   11872:	4413      	add	r3, r2
   11874:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   11876:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   1187a:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1187e:	b964      	cbnz	r4, 1189a <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   11880:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   11884:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   11888:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   1188a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   1188e:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   11890:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   11894:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   11896:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   11898:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   1189a:	e9c1 2303 	strd	r2, r3, [r1, #12]
   1189e:	e7f1      	b.n	11884 <bt_conn_get_info+0x30>
	return -EINVAL;
   118a0:	f06f 0015 	mvn.w	r0, #21
   118a4:	e7f8      	b.n	11898 <bt_conn_get_info+0x44>
   118a6:	bf00      	nop
   118a8:	20008000 	.word	0x20008000

000118ac <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   118ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   118b0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   118b2:	4850      	ldr	r0, [pc, #320]	; (119f4 <bt_conn_le_create+0x148>)
   118b4:	f00d f826 	bl	1e904 <atomic_get>
   118b8:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   118ba:	0781      	lsls	r1, r0, #30
{
   118bc:	4615      	mov	r5, r2
   118be:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   118c0:	f140 808f 	bpl.w	119e2 <bt_conn_le_create+0x136>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   118c4:	4610      	mov	r0, r2
   118c6:	f00c ff3b 	bl	1e740 <bt_le_conn_params_valid>
   118ca:	b928      	cbnz	r0, 118d8 <bt_conn_le_create+0x2c>
		return -EINVAL;
   118cc:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   118d0:	4628      	mov	r0, r5
   118d2:	b002      	add	sp, #8
   118d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118d8:	4846      	ldr	r0, [pc, #280]	; (119f4 <bt_conn_le_create+0x148>)
   118da:	f00d f813 	bl	1e904 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   118de:	0642      	lsls	r2, r0, #25
   118e0:	d4f4      	bmi.n	118cc <bt_conn_le_create+0x20>
   118e2:	4844      	ldr	r0, [pc, #272]	; (119f4 <bt_conn_le_create+0x148>)
   118e4:	f00d f80e 	bl	1e904 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   118e8:	0503      	lsls	r3, r0, #20
   118ea:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   118ee:	d47b      	bmi.n	119e8 <bt_conn_le_create+0x13c>
	if (!bt_le_scan_random_addr_check()) {
   118f0:	f7fd fe04 	bl	f4fc <bt_le_scan_random_addr_check>
   118f4:	2800      	cmp	r0, #0
   118f6:	d0e9      	beq.n	118cc <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   118f8:	4621      	mov	r1, r4
   118fa:	4640      	mov	r0, r8
   118fc:	f7ff ff5e 	bl	117bc <bt_conn_exists_le>
   11900:	2800      	cmp	r0, #0
   11902:	d1e3      	bne.n	118cc <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   11904:	7823      	ldrb	r3, [r4, #0]
   11906:	3b02      	subs	r3, #2
   11908:	2b01      	cmp	r3, #1
   1190a:	d849      	bhi.n	119a0 <bt_conn_le_create+0xf4>
   1190c:	2207      	movs	r2, #7
   1190e:	4621      	mov	r1, r4
   11910:	4668      	mov	r0, sp
   11912:	f00c fcf9 	bl	1e308 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   11916:	f89d 3000 	ldrb.w	r3, [sp]
   1191a:	3b02      	subs	r3, #2
   1191c:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   11920:	4669      	mov	r1, sp
   11922:	2000      	movs	r0, #0
   11924:	f7ff fdda 	bl	114dc <bt_conn_add_le>
	if (!conn) {
   11928:	4604      	mov	r4, r0
   1192a:	2800      	cmp	r0, #0
   1192c:	d05f      	beq.n	119ee <bt_conn_le_create+0x142>
	conn->le.interval_min = param->interval_min;
   1192e:	882b      	ldrh	r3, [r5, #0]
   11930:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11934:	886b      	ldrh	r3, [r5, #2]
   11936:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   1193a:	88ab      	ldrh	r3, [r5, #4]
   1193c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11940:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   11942:	4d2d      	ldr	r5, [pc, #180]	; (119f8 <bt_conn_le_create+0x14c>)
	conn->le.timeout = param->timeout;
   11944:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   11948:	f105 0c08 	add.w	ip, r5, #8
   1194c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11950:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   11954:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   11956:	2b00      	cmp	r3, #0
   11958:	bf08      	it	eq
   1195a:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1195e:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   11960:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   11962:	b903      	cbnz	r3, 11966 <bt_conn_le_create+0xba>
   11964:	89ab      	ldrh	r3, [r5, #12]
   11966:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11968:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   1196a:	b903      	cbnz	r3, 1196e <bt_conn_le_create+0xc2>
   1196c:	89eb      	ldrh	r3, [r5, #14]
   1196e:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   11970:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
   11974:	b11b      	cbz	r3, 1197e <bt_conn_le_create+0xd2>
   11976:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
   1197a:	429a      	cmp	r2, r3
   1197c:	d919      	bls.n	119b2 <bt_conn_le_create+0x106>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1197e:	2102      	movs	r1, #2
   11980:	4620      	mov	r0, r4
   11982:	f7ff fe05 	bl	11590 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   11986:	2001      	movs	r0, #1
   11988:	f7fe f816 	bl	f9b8 <bt_le_scan_update>
		if (err) {
   1198c:	4605      	mov	r5, r0
   1198e:	b330      	cbz	r0, 119de <bt_conn_le_create+0x132>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11990:	4620      	mov	r0, r4
   11992:	2100      	movs	r1, #0
   11994:	f7ff fdfc 	bl	11590 <bt_conn_set_state>
			bt_conn_unref(conn);
   11998:	4620      	mov	r0, r4
   1199a:	f7ff fdcd 	bl	11538 <bt_conn_unref>
			return err;
   1199e:	e797      	b.n	118d0 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   119a0:	4621      	mov	r1, r4
   119a2:	f00c fea8 	bl	1e6f6 <bt_lookup_id_addr>
   119a6:	2207      	movs	r2, #7
   119a8:	4601      	mov	r1, r0
   119aa:	4668      	mov	r0, sp
   119ac:	f00c fcac 	bl	1e308 <memcpy>
}
   119b0:	e7b6      	b.n	11920 <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   119b2:	2106      	movs	r1, #6
   119b4:	4620      	mov	r0, r4
   119b6:	f7ff fdeb 	bl	11590 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   119ba:	4620      	mov	r0, r4
   119bc:	f00c fea3 	bl	1e706 <bt_le_create_conn>
	if (err) {
   119c0:	4605      	mov	r5, r0
   119c2:	b160      	cbz	r0, 119de <bt_conn_le_create+0x132>
		conn->err = 0;
   119c4:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119c6:	4620      	mov	r0, r4
   119c8:	4631      	mov	r1, r6
		conn->err = 0;
   119ca:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119cc:	f7ff fde0 	bl	11590 <bt_conn_set_state>
		bt_conn_unref(conn);
   119d0:	4620      	mov	r0, r4
   119d2:	f7ff fdb1 	bl	11538 <bt_conn_unref>
		bt_le_scan_update(false);
   119d6:	4630      	mov	r0, r6
   119d8:	f7fd ffee 	bl	f9b8 <bt_le_scan_update>
		return err;
   119dc:	e778      	b.n	118d0 <bt_conn_le_create+0x24>
	*ret_conn = conn;
   119de:	603c      	str	r4, [r7, #0]
	return 0;
   119e0:	e776      	b.n	118d0 <bt_conn_le_create+0x24>
		return -EAGAIN;
   119e2:	f06f 050a 	mvn.w	r5, #10
   119e6:	e773      	b.n	118d0 <bt_conn_le_create+0x24>
		return -EALREADY;
   119e8:	f06f 0544 	mvn.w	r5, #68	; 0x44
   119ec:	e770      	b.n	118d0 <bt_conn_le_create+0x24>
		return -ENOMEM;
   119ee:	f06f 050b 	mvn.w	r5, #11
   119f2:	e76d      	b.n	118d0 <bt_conn_le_create+0x24>
   119f4:	20008094 	.word	0x20008094
   119f8:	20008000 	.word	0x20008000

000119fc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   119fc:	b570      	push	{r4, r5, r6, lr}
   119fe:	4606      	mov	r6, r0
   11a00:	482f      	ldr	r0, [pc, #188]	; (11ac0 <bt_le_set_auto_conn+0xc4>)
   11a02:	f00c ff7f 	bl	1e904 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a06:	0780      	lsls	r0, r0, #30
{
   11a08:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a0a:	d553      	bpl.n	11ab4 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11a0c:	b929      	cbnz	r1, 11a1a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   11a0e:	f7fd fd75 	bl	f4fc <bt_le_scan_random_addr_check>
   11a12:	b940      	cbnz	r0, 11a26 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   11a14:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11a18:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11a1a:	4608      	mov	r0, r1
   11a1c:	f00c fe90 	bl	1e740 <bt_le_conn_params_valid>
   11a20:	2800      	cmp	r0, #0
   11a22:	d1f4      	bne.n	11a0e <bt_le_set_auto_conn+0x12>
   11a24:	e7f6      	b.n	11a14 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   11a26:	4631      	mov	r1, r6
   11a28:	2000      	movs	r0, #0
   11a2a:	f7ff fea3 	bl	11774 <bt_conn_lookup_addr_le>
	if (!conn) {
   11a2e:	4604      	mov	r4, r0
   11a30:	b928      	cbnz	r0, 11a3e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   11a32:	4631      	mov	r1, r6
   11a34:	f7ff fd52 	bl	114dc <bt_conn_add_le>
		if (!conn) {
   11a38:	4604      	mov	r4, r0
   11a3a:	2800      	cmp	r0, #0
   11a3c:	d03d      	beq.n	11aba <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   11a3e:	1d20      	adds	r0, r4, #4
	if (param) {
   11a40:	b33d      	cbz	r5, 11a92 <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   11a42:	882b      	ldrh	r3, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11a44:	2101      	movs	r1, #1
   11a46:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11a4a:	886b      	ldrh	r3, [r5, #2]
   11a4c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   11a50:	88ab      	ldrh	r3, [r5, #4]
   11a52:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11a56:	88eb      	ldrh	r3, [r5, #6]
   11a58:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
   11a5c:	f00c ff60 	bl	1e920 <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   11a60:	07c1      	lsls	r1, r0, #31
   11a62:	d402      	bmi.n	11a6a <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   11a64:	4620      	mov	r0, r4
   11a66:	f00d f83c 	bl	1eae2 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11a6a:	7b63      	ldrb	r3, [r4, #13]
   11a6c:	b963      	cbnz	r3, 11a88 <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a6e:	4814      	ldr	r0, [pc, #80]	; (11ac0 <bt_le_set_auto_conn+0xc4>)
   11a70:	f00c ff48 	bl	1e904 <atomic_get>
   11a74:	0783      	lsls	r3, r0, #30
   11a76:	d507      	bpl.n	11a88 <bt_le_set_auto_conn+0x8c>
		if (param) {
   11a78:	b11d      	cbz	r5, 11a82 <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11a7a:	2102      	movs	r1, #2
   11a7c:	4620      	mov	r0, r4
   11a7e:	f7ff fd87 	bl	11590 <bt_conn_set_state>
		bt_le_scan_update(false);
   11a82:	2000      	movs	r0, #0
   11a84:	f7fd ff98 	bl	f9b8 <bt_le_scan_update>
	bt_conn_unref(conn);
   11a88:	4620      	mov	r0, r4
   11a8a:	f7ff fd55 	bl	11538 <bt_conn_unref>
	return 0;
   11a8e:	2000      	movs	r0, #0
   11a90:	e7c2      	b.n	11a18 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11a92:	f06f 0101 	mvn.w	r1, #1
   11a96:	f00c ff38 	bl	1e90a <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   11a9a:	07c2      	lsls	r2, r0, #31
   11a9c:	d5e5      	bpl.n	11a6a <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   11a9e:	4620      	mov	r0, r4
   11aa0:	f7ff fd4a 	bl	11538 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   11aa4:	7b63      	ldrb	r3, [r4, #13]
   11aa6:	2b02      	cmp	r3, #2
   11aa8:	d1df      	bne.n	11a6a <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11aaa:	4629      	mov	r1, r5
   11aac:	4620      	mov	r0, r4
   11aae:	f7ff fd6f 	bl	11590 <bt_conn_set_state>
   11ab2:	e7da      	b.n	11a6a <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   11ab4:	f06f 000a 	mvn.w	r0, #10
   11ab8:	e7ae      	b.n	11a18 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   11aba:	f06f 000b 	mvn.w	r0, #11
   11abe:	e7ab      	b.n	11a18 <bt_le_set_auto_conn+0x1c>
   11ac0:	20008094 	.word	0x20008094

00011ac4 <bt_conn_disconnect>:
{
   11ac4:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11ac6:	7883      	ldrb	r3, [r0, #2]
{
   11ac8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11aca:	2b01      	cmp	r3, #1
{
   11acc:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11ace:	d103      	bne.n	11ad8 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   11ad0:	2100      	movs	r1, #0
   11ad2:	3088      	adds	r0, #136	; 0x88
   11ad4:	f7ff ff92 	bl	119fc <bt_le_set_auto_conn>
	switch (conn->state) {
   11ad8:	7b63      	ldrb	r3, [r4, #13]
   11ada:	3b02      	subs	r3, #2
   11adc:	2b06      	cmp	r3, #6
   11ade:	d805      	bhi.n	11aec <bt_conn_disconnect+0x28>
   11ae0:	e8df f003 	tbb	[pc, r3]
   11ae4:	12040408 	.word	0x12040408
   11ae8:	271f      	.short	0x271f
   11aea:	10          	.byte	0x10
   11aeb:	00          	.byte	0x00
   11aec:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   11af0:	4628      	mov	r0, r5
   11af2:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11af4:	4620      	mov	r0, r4
   11af6:	2100      	movs	r1, #0
		conn->err = reason;
   11af8:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11afa:	f7ff fd49 	bl	11590 <bt_conn_set_state>
			bt_le_scan_update(false);
   11afe:	2000      	movs	r0, #0
   11b00:	f7fd ff5a 	bl	f9b8 <bt_le_scan_update>
		return 0;
   11b04:	2500      	movs	r5, #0
   11b06:	e7f3      	b.n	11af0 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11b08:	2157      	movs	r1, #87	; 0x57
   11b0a:	4810      	ldr	r0, [pc, #64]	; (11b4c <bt_conn_disconnect+0x88>)
   11b0c:	f00a ff44 	bl	1c998 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b10:	4620      	mov	r0, r4
		conn->err = reason;
   11b12:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b14:	2100      	movs	r1, #0
   11b16:	f7ff fd3b 	bl	11590 <bt_conn_set_state>
}
   11b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   11b1e:	f7fe beef 	b.w	10900 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   11b22:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11b26:	f00a f849 	bl	1bbbc <k_delayed_work_cancel>
}
   11b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   11b2e:	f7fd bd57 	b.w	f5e0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   11b32:	4629      	mov	r1, r5
   11b34:	8820      	ldrh	r0, [r4, #0]
   11b36:	f00c fde8 	bl	1e70a <bt_hci_disconnect>
	if (err) {
   11b3a:	4605      	mov	r5, r0
   11b3c:	2800      	cmp	r0, #0
   11b3e:	d1d7      	bne.n	11af0 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   11b40:	2108      	movs	r1, #8
   11b42:	4620      	mov	r0, r4
   11b44:	f7ff fd24 	bl	11590 <bt_conn_set_state>
	return 0;
   11b48:	e7d2      	b.n	11af0 <bt_conn_disconnect+0x2c>
   11b4a:	bf00      	nop
   11b4c:	00024cfb 	.word	0x00024cfb

00011b50 <send_conn_le_param_update>:
{
   11b50:	b538      	push	{r3, r4, r5, lr}
   11b52:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11b54:	4608      	mov	r0, r1
{
   11b56:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11b58:	f00c fdf2 	bl	1e740 <bt_le_conn_params_valid>
   11b5c:	b308      	cbz	r0, 11ba2 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11b5e:	4b12      	ldr	r3, [pc, #72]	; (11ba8 <send_conn_le_param_update+0x58>)
   11b60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11b64:	0799      	lsls	r1, r3, #30
   11b66:	d407      	bmi.n	11b78 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11b68:	78e3      	ldrb	r3, [r4, #3]
   11b6a:	b173      	cbz	r3, 11b8a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11b6c:	4629      	mov	r1, r5
   11b6e:	4620      	mov	r0, r4
}
   11b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11b74:	f000 bb14 	b.w	121a0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11b78:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11b7c:	079a      	lsls	r2, r3, #30
   11b7e:	d5f3      	bpl.n	11b68 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11b80:	1d20      	adds	r0, r4, #4
   11b82:	f00c febf 	bl	1e904 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11b86:	0543      	lsls	r3, r0, #21
   11b88:	d4ee      	bmi.n	11b68 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11b8a:	4629      	mov	r1, r5
   11b8c:	4620      	mov	r0, r4
   11b8e:	f00c ffe3 	bl	1eb58 <bt_conn_le_conn_update>
		if (rc == 0) {
   11b92:	b928      	cbnz	r0, 11ba0 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11b94:	88ab      	ldrh	r3, [r5, #4]
   11b96:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11b9a:	88eb      	ldrh	r3, [r5, #6]
   11b9c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11ba0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11ba2:	f06f 0015 	mvn.w	r0, #21
   11ba6:	e7fb      	b.n	11ba0 <send_conn_le_param_update+0x50>
   11ba8:	20008000 	.word	0x20008000

00011bac <deferred_work>:
{
   11bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11bae:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   11bb2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11bb4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11bb8:	b99b      	cbnz	r3, 11be2 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11bba:	4628      	mov	r0, r5
   11bbc:	f00d f82c 	bl	1ec18 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11bc0:	4b24      	ldr	r3, [pc, #144]	; (11c54 <deferred_work+0xa8>)
   11bc2:	681e      	ldr	r6, [r3, #0]
   11bc4:	b92e      	cbnz	r6, 11bd2 <deferred_work+0x26>
		bt_conn_unref(conn);
   11bc6:	4628      	mov	r0, r5
}
   11bc8:	b002      	add	sp, #8
   11bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11bce:	f7ff bcb3 	b.w	11538 <bt_conn_unref>
		if (cb->disconnected) {
   11bd2:	6873      	ldr	r3, [r6, #4]
   11bd4:	b11b      	cbz	r3, 11bde <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11bd6:	4628      	mov	r0, r5
   11bd8:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11bdc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11bde:	69b6      	ldr	r6, [r6, #24]
   11be0:	e7f0      	b.n	11bc4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11be2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11be6:	2b01      	cmp	r3, #1
   11be8:	d132      	bne.n	11c50 <deferred_work+0xa4>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11bea:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11bee:	b923      	cbnz	r3, 11bfa <deferred_work+0x4e>
}
   11bf0:	b002      	add	sp, #8
   11bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11bf6:	f7fd bcf3 	b.w	f5e0 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11bfa:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11bfe:	f46f 7100 	mvn.w	r1, #512	; 0x200
   11c02:	4630      	mov	r0, r6
   11c04:	f00c fe81 	bl	1e90a <atomic_and>
   11c08:	0583      	lsls	r3, r0, #22
   11c0a:	d51b      	bpl.n	11c44 <deferred_work+0x98>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11c0c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11c10:	f8ad 3000 	strh.w	r3, [sp]
   11c14:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11c18:	f8ad 3002 	strh.w	r3, [sp, #2]
   11c1c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11c20:	f8ad 3004 	strh.w	r3, [sp, #4]
   11c24:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11c28:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11c2c:	4669      	mov	r1, sp
   11c2e:	4628      	mov	r0, r5
   11c30:	f7ff ff8e 	bl	11b50 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11c34:	f44f 7180 	mov.w	r1, #256	; 0x100
   11c38:	4630      	mov	r0, r6
}
   11c3a:	b002      	add	sp, #8
   11c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11c40:	f00c be6e 	b.w	1e920 <atomic_or>
		param = BT_LE_CONN_PARAM(
   11c44:	466b      	mov	r3, sp
   11c46:	4a04      	ldr	r2, [pc, #16]	; (11c58 <deferred_work+0xac>)
   11c48:	6810      	ldr	r0, [r2, #0]
   11c4a:	6851      	ldr	r1, [r2, #4]
   11c4c:	c303      	stmia	r3!, {r0, r1}
   11c4e:	e7ed      	b.n	11c2c <deferred_work+0x80>
}
   11c50:	b002      	add	sp, #8
   11c52:	bd70      	pop	{r4, r5, r6, pc}
   11c54:	20009c1c 	.word	0x20009c1c
   11c58:	00021bec 	.word	0x00021bec

00011c5c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c5e:	4604      	mov	r4, r0
   11c60:	460d      	mov	r5, r1
   11c62:	4617      	mov	r7, r2
   11c64:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11c66:	f00f fc0f 	bl	21488 <k_is_in_isr>
   11c6a:	b150      	cbz	r0, 11c82 <bt_conn_create_pdu_timeout+0x26>
   11c6c:	490f      	ldr	r1, [pc, #60]	; (11cac <bt_conn_create_pdu_timeout+0x50>)
   11c6e:	4810      	ldr	r0, [pc, #64]	; (11cb0 <bt_conn_create_pdu_timeout+0x54>)
   11c70:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11c74:	f00a fe90 	bl	1c998 <printk>
   11c78:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11c7c:	480b      	ldr	r0, [pc, #44]	; (11cac <bt_conn_create_pdu_timeout+0x50>)
   11c7e:	f00b f931 	bl	1cee4 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11c82:	480c      	ldr	r0, [pc, #48]	; (11cb4 <bt_conn_create_pdu_timeout+0x58>)
   11c84:	463a      	mov	r2, r7
   11c86:	2c00      	cmp	r4, #0
   11c88:	bf18      	it	ne
   11c8a:	4620      	movne	r0, r4
   11c8c:	4633      	mov	r3, r6
   11c8e:	f00e fc9d 	bl	205cc <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11c92:	4604      	mov	r4, r0
   11c94:	b928      	cbnz	r0, 11ca2 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11c96:	2157      	movs	r1, #87	; 0x57
   11c98:	4807      	ldr	r0, [pc, #28]	; (11cb8 <bt_conn_create_pdu_timeout+0x5c>)
   11c9a:	f00a fe7d 	bl	1c998 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11c9e:	4620      	mov	r0, r4
   11ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11ca2:	1d69      	adds	r1, r5, #5
   11ca4:	3008      	adds	r0, #8
   11ca6:	f005 fc8f 	bl	175c8 <net_buf_simple_reserve>
	return buf;
   11caa:	e7f8      	b.n	11c9e <bt_conn_create_pdu_timeout+0x42>
   11cac:	00024b30 	.word	0x00024b30
   11cb0:	00022dd6 	.word	0x00022dd6
   11cb4:	200085c0 	.word	0x200085c0
   11cb8:	00024d27 	.word	0x00024d27

00011cbc <bt_conn_create_frag_timeout>:
{
   11cbc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11cbe:	4801      	ldr	r0, [pc, #4]	; (11cc4 <bt_conn_create_frag_timeout+0x8>)
   11cc0:	f7ff bfcc 	b.w	11c5c <bt_conn_create_pdu_timeout>
   11cc4:	20008618 	.word	0x20008618

00011cc8 <create_frag>:
{
   11cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ccc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11cce:	f04f 33ff 	mov.w	r3, #4294967295
   11cd2:	f04f 32ff 	mov.w	r2, #4294967295
   11cd6:	2000      	movs	r0, #0
{
   11cd8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11cda:	f7ff ffef 	bl	11cbc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11cde:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   11ce0:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11ce2:	2b07      	cmp	r3, #7
   11ce4:	f04f 0600 	mov.w	r6, #0
   11ce8:	d005      	beq.n	11cf6 <create_frag+0x2e>
		net_buf_unref(frag);
   11cea:	f005 fcbf 	bl	1766c <net_buf_unref>
		return NULL;
   11cee:	4635      	mov	r5, r6
}
   11cf0:	4628      	mov	r0, r5
   11cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11cf6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11cf8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11cfc:	4e0c      	ldr	r6, [pc, #48]	; (11d30 <create_frag+0x68>)
   11cfe:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11d00:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11d04:	f00e fc88 	bl	20618 <net_buf_simple_tailroom>
   11d08:	4580      	cmp	r8, r0
   11d0a:	d20c      	bcs.n	11d26 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11d0c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11d10:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11d14:	4632      	mov	r2, r6
   11d16:	4638      	mov	r0, r7
   11d18:	f00e fc86 	bl	20628 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11d1c:	4631      	mov	r1, r6
   11d1e:	4620      	mov	r0, r4
   11d20:	f005 fd80 	bl	17824 <net_buf_simple_pull>
   11d24:	e7e4      	b.n	11cf0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11d26:	4638      	mov	r0, r7
   11d28:	f00e fc76 	bl	20618 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11d2c:	b286      	uxth	r6, r0
   11d2e:	e7ef      	b.n	11d10 <create_frag+0x48>
   11d30:	20008000 	.word	0x20008000

00011d34 <bt_conn_process_tx>:
{
   11d34:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11d36:	7b43      	ldrb	r3, [r0, #13]
{
   11d38:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11d3a:	b95b      	cbnz	r3, 11d54 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11d3c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11d40:	3004      	adds	r0, #4
   11d42:	f00c fde2 	bl	1e90a <atomic_and>
   11d46:	0643      	lsls	r3, r0, #25
   11d48:	d504      	bpl.n	11d54 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   11d4a:	4620      	mov	r0, r4
}
   11d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11d50:	f7ff ba8e 	b.w	11270 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11d54:	2200      	movs	r2, #0
   11d56:	2300      	movs	r3, #0
   11d58:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11d5c:	f005 fc04 	bl	17568 <net_buf_get>
	BT_ASSERT(buf);
   11d60:	4605      	mov	r5, r0
   11d62:	b958      	cbnz	r0, 11d7c <bt_conn_process_tx+0x48>
   11d64:	f240 525f 	movw	r2, #1375	; 0x55f
   11d68:	491d      	ldr	r1, [pc, #116]	; (11de0 <bt_conn_process_tx+0xac>)
   11d6a:	481e      	ldr	r0, [pc, #120]	; (11de4 <bt_conn_process_tx+0xb0>)
   11d6c:	f00a fe14 	bl	1c998 <printk>
   11d70:	4040      	eors	r0, r0
   11d72:	f380 8811 	msr	BASEPRI, r0
   11d76:	f04f 0003 	mov.w	r0, #3
   11d7a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11d7c:	4e1a      	ldr	r6, [pc, #104]	; (11de8 <bt_conn_process_tx+0xb4>)
	if (buf->len <= conn_mtu(conn)) {
   11d7e:	89aa      	ldrh	r2, [r5, #12]
   11d80:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11d84:	429a      	cmp	r2, r3
   11d86:	d807      	bhi.n	11d98 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11d88:	2300      	movs	r3, #0
   11d8a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11d8c:	4629      	mov	r1, r5
   11d8e:	4620      	mov	r0, r4
   11d90:	f7ff f942 	bl	11018 <send_frag>
	if (!send_buf(conn, buf)) {
   11d94:	b130      	cbz	r0, 11da4 <bt_conn_process_tx+0x70>
}
   11d96:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11d98:	4629      	mov	r1, r5
   11d9a:	4620      	mov	r0, r4
   11d9c:	f7ff ff94 	bl	11cc8 <create_frag>
	if (!frag) {
   11da0:	4601      	mov	r1, r0
   11da2:	b920      	cbnz	r0, 11dae <bt_conn_process_tx+0x7a>
		net_buf_unref(buf);
   11da4:	4628      	mov	r0, r5
}
   11da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11daa:	f005 bc5f 	b.w	1766c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11dae:	2301      	movs	r3, #1
   11db0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11db2:	4620      	mov	r0, r4
   11db4:	f7ff f930 	bl	11018 <send_frag>
   11db8:	2800      	cmp	r0, #0
   11dba:	d0f3      	beq.n	11da4 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   11dbc:	89aa      	ldrh	r2, [r5, #12]
   11dbe:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11dc2:	429a      	cmp	r2, r3
   11dc4:	d802      	bhi.n	11dcc <bt_conn_process_tx+0x98>
	return send_frag(conn, buf, FRAG_END, false);
   11dc6:	2300      	movs	r3, #0
   11dc8:	2203      	movs	r2, #3
   11dca:	e7df      	b.n	11d8c <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   11dcc:	4629      	mov	r1, r5
   11dce:	4620      	mov	r0, r4
   11dd0:	f7ff ff7a 	bl	11cc8 <create_frag>
		if (!frag) {
   11dd4:	4601      	mov	r1, r0
   11dd6:	2800      	cmp	r0, #0
   11dd8:	d0e4      	beq.n	11da4 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11dda:	2301      	movs	r3, #1
   11ddc:	461a      	mov	r2, r3
   11dde:	e7e8      	b.n	11db2 <bt_conn_process_tx+0x7e>
   11de0:	00024b30 	.word	0x00024b30
   11de4:	00022dd6 	.word	0x00022dd6
   11de8:	20008000 	.word	0x20008000

00011dec <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11dec:	4b0b      	ldr	r3, [pc, #44]	; (11e1c <bt_conn_index+0x30>)
{
   11dee:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11df0:	1ac0      	subs	r0, r0, r3
   11df2:	4b0b      	ldr	r3, [pc, #44]	; (11e20 <bt_conn_index+0x34>)
   11df4:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11df6:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
		index = conn - acl_conns;
   11dfa:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11dfe:	d90a      	bls.n	11e16 <bt_conn_index+0x2a>
   11e00:	4908      	ldr	r1, [pc, #32]	; (11e24 <bt_conn_index+0x38>)
   11e02:	4809      	ldr	r0, [pc, #36]	; (11e28 <bt_conn_index+0x3c>)
   11e04:	f640 2295 	movw	r2, #2709	; 0xa95
   11e08:	f00a fdc6 	bl	1c998 <printk>
   11e0c:	f640 2195 	movw	r1, #2709	; 0xa95
   11e10:	4804      	ldr	r0, [pc, #16]	; (11e24 <bt_conn_index+0x38>)
   11e12:	f00b f867 	bl	1cee4 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11e16:	b2e0      	uxtb	r0, r4
   11e18:	bd10      	pop	{r4, pc}
   11e1a:	bf00      	nop
   11e1c:	20008a38 	.word	0x20008a38
   11e20:	aaaaaaab 	.word	0xaaaaaaab
   11e24:	00024b30 	.word	0x00024b30
   11e28:	00022dd6 	.word	0x00022dd6

00011e2c <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11e2c:	2802      	cmp	r0, #2
   11e2e:	d806      	bhi.n	11e3e <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11e30:	4b04      	ldr	r3, [pc, #16]	; (11e44 <bt_conn_lookup_index+0x18>)
   11e32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11e36:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11e3a:	f00c be52 	b.w	1eae2 <bt_conn_ref>
}
   11e3e:	2000      	movs	r0, #0
   11e40:	4770      	bx	lr
   11e42:	bf00      	nop
   11e44:	20008a38 	.word	0x20008a38

00011e48 <bt_conn_init>:

int bt_conn_init(void)
{
   11e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11e4a:	4917      	ldr	r1, [pc, #92]	; (11ea8 <bt_conn_init+0x60>)
   11e4c:	4817      	ldr	r0, [pc, #92]	; (11eac <bt_conn_init+0x64>)
   11e4e:	f00f fab3 	bl	213b8 <k_queue_append>
   11e52:	4917      	ldr	r1, [pc, #92]	; (11eb0 <bt_conn_init+0x68>)
   11e54:	4815      	ldr	r0, [pc, #84]	; (11eac <bt_conn_init+0x64>)
   11e56:	f00f faaf 	bl	213b8 <k_queue_append>
   11e5a:	4916      	ldr	r1, [pc, #88]	; (11eb4 <bt_conn_init+0x6c>)
   11e5c:	4813      	ldr	r0, [pc, #76]	; (11eac <bt_conn_init+0x64>)
   11e5e:	f00f faab 	bl	213b8 <k_queue_append>
	}

	bt_att_init();
   11e62:	f00d fa73 	bl	1f34c <bt_att_init>

	err = bt_smp_init();
   11e66:	f005 f907 	bl	17078 <bt_smp_init>
	if (err) {
   11e6a:	4605      	mov	r5, r0
   11e6c:	b9d0      	cbnz	r0, 11ea4 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11e6e:	f00c ff56 	bl	1ed1e <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11e72:	462e      	mov	r6, r5
   11e74:	4f10      	ldr	r7, [pc, #64]	; (11eb8 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11e76:	4638      	mov	r0, r7
   11e78:	f00c fe33 	bl	1eae2 <bt_conn_ref>

			if (!conn) {
   11e7c:	4604      	mov	r4, r0
   11e7e:	b160      	cbz	r0, 11e9a <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11e80:	3004      	adds	r0, #4
   11e82:	f00c fd3f 	bl	1e904 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11e86:	07c3      	lsls	r3, r0, #31
   11e88:	d504      	bpl.n	11e94 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11e8a:	2102      	movs	r1, #2
   11e8c:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11e8e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11e90:	f7ff fb7e 	bl	11590 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11e94:	4620      	mov	r0, r4
   11e96:	f7ff fb4f 	bl	11538 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11e9a:	3601      	adds	r6, #1
   11e9c:	2e03      	cmp	r6, #3
   11e9e:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11ea2:	d1e8      	bne.n	11e76 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11ea4:	4628      	mov	r0, r5
   11ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ea8:	20009c20 	.word	0x20009c20
   11eac:	20008578 	.word	0x20008578
   11eb0:	20009c30 	.word	0x20009c30
   11eb4:	20009c40 	.word	0x20009c40
   11eb8:	20008a38 	.word	0x20008a38

00011ebc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11ebc:	4b0f      	ldr	r3, [pc, #60]	; (11efc <l2cap_accept+0x40>)
{
   11ebe:	b510      	push	{r4, lr}
		if (l2cap->chan.chan.conn) {
   11ec0:	681c      	ldr	r4, [r3, #0]
{
   11ec2:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   11ec4:	b164      	cbz	r4, 11ee0 <l2cap_accept+0x24>
   11ec6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   11eca:	b190      	cbz	r0, 11ef2 <l2cap_accept+0x36>
   11ecc:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
   11ed0:	b188      	cbz	r0, 11ef6 <l2cap_accept+0x3a>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   11ed2:	480b      	ldr	r0, [pc, #44]	; (11f00 <l2cap_accept+0x44>)
   11ed4:	2145      	movs	r1, #69	; 0x45
   11ed6:	f00a fd5f 	bl	1c998 <printk>
   11eda:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   11ede:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11ee0:	4622      	mov	r2, r4
		l2cap->chan.chan.ops = &ops;
   11ee2:	20c0      	movs	r0, #192	; 0xc0
   11ee4:	fb00 3302 	mla	r3, r0, r2, r3
   11ee8:	4a06      	ldr	r2, [pc, #24]	; (11f04 <l2cap_accept+0x48>)
		return 0;
   11eea:	2000      	movs	r0, #0
		l2cap->chan.chan.ops = &ops;
   11eec:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   11eee:	600b      	str	r3, [r1, #0]
		return 0;
   11ef0:	e7f5      	b.n	11ede <l2cap_accept+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11ef2:	2201      	movs	r2, #1
   11ef4:	e7f5      	b.n	11ee2 <l2cap_accept+0x26>
   11ef6:	2202      	movs	r2, #2
   11ef8:	e7f3      	b.n	11ee2 <l2cap_accept+0x26>
   11efa:	bf00      	nop
   11efc:	20008c78 	.word	0x20008c78
   11f00:	00024dbf 	.word	0x00024dbf
   11f04:	00022168 	.word	0x00022168

00011f08 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f0a:	4605      	mov	r5, r0
   11f0c:	460f      	mov	r7, r1
   11f0e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   11f10:	2300      	movs	r3, #0
   11f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11f16:	2104      	movs	r1, #4
   11f18:	2000      	movs	r0, #0
   11f1a:	f7ff fe9f 	bl	11c5c <bt_conn_create_pdu_timeout>
	if (!buf) {
   11f1e:	4604      	mov	r4, r0
   11f20:	b930      	cbnz	r0, 11f30 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11f22:	462a      	mov	r2, r5
   11f24:	2145      	movs	r1, #69	; 0x45
   11f26:	4806      	ldr	r0, [pc, #24]	; (11f40 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11f28:	f00a fd36 	bl	1c998 <printk>
}
   11f2c:	4620      	mov	r0, r4
   11f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   11f30:	2104      	movs	r1, #4
   11f32:	3008      	adds	r0, #8
   11f34:	f005 fcb0 	bl	17898 <net_buf_simple_add>
	hdr->code = code;
   11f38:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11f3a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11f3c:	8046      	strh	r6, [r0, #2]
	return buf;
   11f3e:	e7f5      	b.n	11f2c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11f40:	00024deb 	.word	0x00024deb

00011f44 <l2cap_rtx_timeout>:
{
   11f44:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11f46:	4604      	mov	r4, r0
   11f48:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11f4c:	2145      	movs	r1, #69	; 0x45
   11f4e:	4622      	mov	r2, r4
   11f50:	4805      	ldr	r0, [pc, #20]	; (11f68 <l2cap_rtx_timeout+0x24>)
   11f52:	f00a fd21 	bl	1c998 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11f56:	4628      	mov	r0, r5
   11f58:	4621      	mov	r1, r4
   11f5a:	f00c fe27 	bl	1ebac <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   11f5e:	4620      	mov	r0, r4
}
   11f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11f64:	f00c be43 	b.w	1ebee <bt_l2cap_chan_del>
   11f68:	00024e18 	.word	0x00024e18

00011f6c <bt_l2cap_connected>:
{
   11f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11f70:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11f72:	4e2d      	ldr	r6, [pc, #180]	; (12028 <bt_l2cap_connected+0xbc>)
   11f74:	4f2d      	ldr	r7, [pc, #180]	; (1202c <bt_l2cap_connected+0xc0>)
   11f76:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 12030 <bt_l2cap_connected+0xc4>
   11f7a:	42be      	cmp	r6, r7
   11f7c:	d90a      	bls.n	11f94 <bt_l2cap_connected+0x28>
   11f7e:	4641      	mov	r1, r8
   11f80:	482c      	ldr	r0, [pc, #176]	; (12034 <bt_l2cap_connected+0xc8>)
   11f82:	f240 1267 	movw	r2, #359	; 0x167
   11f86:	f00a fd07 	bl	1c998 <printk>
   11f8a:	f240 1167 	movw	r1, #359	; 0x167
   11f8e:	4640      	mov	r0, r8
   11f90:	f00a ffa8 	bl	1cee4 <assert_post_action>
   11f94:	42be      	cmp	r6, r7
   11f96:	d302      	bcc.n	11f9e <bt_l2cap_connected+0x32>
}
   11f98:	b003      	add	sp, #12
   11f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   11f9e:	4628      	mov	r0, r5
   11fa0:	6873      	ldr	r3, [r6, #4]
   11fa2:	a901      	add	r1, sp, #4
   11fa4:	4798      	blx	r3
   11fa6:	2800      	cmp	r0, #0
   11fa8:	db38      	blt.n	1201c <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   11faa:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   11fac:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11fae:	2230      	movs	r2, #48	; 0x30
   11fb0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11fb4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11fb8:	2100      	movs	r1, #0
   11fba:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   11fbe:	f8d6 9008 	ldr.w	r9, [r6, #8]
   11fc2:	f00c f9cc 	bl	1e35e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11fc6:	2200      	movs	r2, #0
   11fc8:	4b1b      	ldr	r3, [pc, #108]	; (12038 <bt_l2cap_connected+0xcc>)
   11fca:	6163      	str	r3, [r4, #20]
   11fcc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11fd0:	e8d3 1fef 	ldaex	r1, [r3]
   11fd4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11fd8:	2800      	cmp	r0, #0
   11fda:	d1f9      	bne.n	11fd0 <bt_l2cap_connected+0x64>
	parent->next = child;
   11fdc:	60a2      	str	r2, [r4, #8]
	return list->tail;
   11fde:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   11fe0:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   11fe4:	b9e2      	cbnz	r2, 12020 <bt_l2cap_connected+0xb4>
	list->head = node;
   11fe6:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   11fea:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11fec:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   11fee:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   11ff0:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11ff4:	681b      	ldr	r3, [r3, #0]
   11ff6:	b103      	cbz	r3, 11ffa <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   11ff8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11ffa:	9b01      	ldr	r3, [sp, #4]
   11ffc:	3340      	adds	r3, #64	; 0x40
   11ffe:	e8d3 2fef 	ldaex	r2, [r3]
   12002:	f042 0201 	orr.w	r2, r2, #1
   12006:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1200a:	2900      	cmp	r1, #0
   1200c:	d1f7      	bne.n	11ffe <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   1200e:	9801      	ldr	r0, [sp, #4]
   12010:	6843      	ldr	r3, [r0, #4]
   12012:	699b      	ldr	r3, [r3, #24]
   12014:	b113      	cbz	r3, 1201c <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   12016:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1201a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1201c:	360c      	adds	r6, #12
   1201e:	e7ac      	b.n	11f7a <bt_l2cap_connected+0xe>
	parent->next = child;
   12020:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12022:	656b      	str	r3, [r5, #84]	; 0x54
}
   12024:	e7e1      	b.n	11fea <bt_l2cap_connected+0x7e>
   12026:	bf00      	nop
   12028:	00021984 	.word	0x00021984
   1202c:	000219a8 	.word	0x000219a8
   12030:	00024e2d 	.word	0x00024e2d
   12034:	00022dd6 	.word	0x00022dd6
   12038:	00011f45 	.word	0x00011f45

0001203c <l2cap_recv>:
{
   1203c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1203e:	898b      	ldrh	r3, [r1, #12]
{
   12040:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   12042:	2b03      	cmp	r3, #3
{
   12044:	460d      	mov	r5, r1
   12046:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   12048:	d804      	bhi.n	12054 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   1204a:	2145      	movs	r1, #69	; 0x45
   1204c:	483a      	ldr	r0, [pc, #232]	; (12138 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1204e:	f00a fca3 	bl	1c998 <printk>
		return 0;
   12052:	e00d      	b.n	12070 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   12054:	2104      	movs	r1, #4
   12056:	f105 0008 	add.w	r0, r5, #8
   1205a:	f005 fbff 	bl	1785c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1205e:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   12060:	8843      	ldrh	r3, [r0, #2]
   12062:	4604      	mov	r4, r0
	if (buf->len != len) {
   12064:	4293      	cmp	r3, r2
   12066:	d006      	beq.n	12076 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   12068:	2145      	movs	r1, #69	; 0x45
   1206a:	4834      	ldr	r0, [pc, #208]	; (1213c <l2cap_recv+0x100>)
   1206c:	f00a fc94 	bl	1c998 <printk>
}
   12070:	2000      	movs	r0, #0
   12072:	b005      	add	sp, #20
   12074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   12076:	7841      	ldrb	r1, [r0, #1]
   12078:	b911      	cbnz	r1, 12080 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1207a:	2145      	movs	r1, #69	; 0x45
   1207c:	4830      	ldr	r0, [pc, #192]	; (12140 <l2cap_recv+0x104>)
   1207e:	e7e6      	b.n	1204e <l2cap_recv+0x12>
	switch (hdr->code) {
   12080:	7802      	ldrb	r2, [r0, #0]
   12082:	2a12      	cmp	r2, #18
   12084:	d00f      	beq.n	120a6 <l2cap_recv+0x6a>
   12086:	2a13      	cmp	r2, #19
   12088:	d008      	beq.n	1209c <l2cap_recv+0x60>
   1208a:	2a01      	cmp	r2, #1
   1208c:	d0f0      	beq.n	12070 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1208e:	2157      	movs	r1, #87	; 0x57
   12090:	482c      	ldr	r0, [pc, #176]	; (12144 <l2cap_recv+0x108>)
   12092:	f00a fc81 	bl	1c998 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   12096:	7861      	ldrb	r1, [r4, #1]
   12098:	6830      	ldr	r0, [r6, #0]
   1209a:	e00d      	b.n	120b8 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   1209c:	2b01      	cmp	r3, #1
   1209e:	d8e7      	bhi.n	12070 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   120a0:	2145      	movs	r1, #69	; 0x45
   120a2:	4829      	ldr	r0, [pc, #164]	; (12148 <l2cap_recv+0x10c>)
   120a4:	e7d3      	b.n	1204e <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   120a6:	2b07      	cmp	r3, #7
   120a8:	d802      	bhi.n	120b0 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   120aa:	2145      	movs	r1, #69	; 0x45
   120ac:	4827      	ldr	r0, [pc, #156]	; (1214c <l2cap_recv+0x110>)
   120ae:	e7ce      	b.n	1204e <l2cap_recv+0x12>
   120b0:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   120b2:	78e7      	ldrb	r7, [r4, #3]
   120b4:	b11f      	cbz	r7, 120be <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   120b6:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   120b8:	f00c fdfa 	bl	1ecb0 <l2cap_send_reject.constprop.0>
		break;
   120bc:	e7d8      	b.n	12070 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   120be:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   120c0:	7850      	ldrb	r0, [r2, #1]
   120c2:	7813      	ldrb	r3, [r2, #0]
   120c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   120c8:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   120cc:	78d0      	ldrb	r0, [r2, #3]
   120ce:	7893      	ldrb	r3, [r2, #2]
   120d0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   120d4:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   120d8:	7950      	ldrb	r0, [r2, #5]
   120da:	7913      	ldrb	r3, [r2, #4]
   120dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   120e0:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   120e4:	7993      	ldrb	r3, [r2, #6]
   120e6:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   120e8:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   120ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   120ee:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   120f0:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   120f4:	f7ff ff08 	bl	11f08 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   120f8:	4605      	mov	r5, r0
   120fa:	2800      	cmp	r0, #0
   120fc:	d0b8      	beq.n	12070 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   120fe:	a902      	add	r1, sp, #8
   12100:	4620      	mov	r0, r4
   12102:	f7ff f85d 	bl	111c0 <le_param_req>
   12106:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   12108:	2102      	movs	r1, #2
   1210a:	f105 0008 	add.w	r0, r5, #8
   1210e:	f005 fbc3 	bl	17898 <net_buf_simple_add>
	if (accepted) {
   12112:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   12116:	b2db      	uxtb	r3, r3
   12118:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1211a:	462a      	mov	r2, r5
   1211c:	463b      	mov	r3, r7
   1211e:	2105      	movs	r1, #5
   12120:	4620      	mov	r0, r4
   12122:	9700      	str	r7, [sp, #0]
   12124:	f00c fdab 	bl	1ec7e <bt_l2cap_send_cb>
	if (accepted) {
   12128:	2e00      	cmp	r6, #0
   1212a:	d0a1      	beq.n	12070 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   1212c:	4620      	mov	r0, r4
   1212e:	a902      	add	r1, sp, #8
   12130:	f00c fd12 	bl	1eb58 <bt_conn_le_conn_update>
   12134:	e79c      	b.n	12070 <l2cap_recv+0x34>
   12136:	bf00      	nop
   12138:	00024e5e 	.word	0x00024e5e
   1213c:	00024e81 	.word	0x00024e81
   12140:	00024ea7 	.word	0x00024ea7
   12144:	00024f16 	.word	0x00024f16
   12148:	00024ecd 	.word	0x00024ecd
   1214c:	00024eee 	.word	0x00024eee

00012150 <bt_l2cap_recv>:
{
   12150:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   12152:	898b      	ldrh	r3, [r1, #12]
{
   12154:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   12156:	2b03      	cmp	r3, #3
{
   12158:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1215a:	d808      	bhi.n	1216e <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   1215c:	2145      	movs	r1, #69	; 0x45
   1215e:	480e      	ldr	r0, [pc, #56]	; (12198 <bt_l2cap_recv+0x48>)
   12160:	f00a fc1a 	bl	1c998 <printk>
	net_buf_unref(buf);
   12164:	4620      	mov	r0, r4
}
   12166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1216a:	f005 ba7f 	b.w	1766c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1216e:	2104      	movs	r1, #4
   12170:	f104 0008 	add.w	r0, r4, #8
   12174:	f005 fb72 	bl	1785c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   12178:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1217a:	4628      	mov	r0, r5
   1217c:	4611      	mov	r1, r2
   1217e:	f00c fdbe 	bl	1ecfe <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   12182:	b920      	cbnz	r0, 1218e <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   12184:	2157      	movs	r1, #87	; 0x57
   12186:	4805      	ldr	r0, [pc, #20]	; (1219c <bt_l2cap_recv+0x4c>)
   12188:	f00a fc06 	bl	1c998 <printk>
		net_buf_unref(buf);
   1218c:	e7ea      	b.n	12164 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1218e:	6843      	ldr	r3, [r0, #4]
   12190:	4621      	mov	r1, r4
   12192:	691b      	ldr	r3, [r3, #16]
   12194:	4798      	blx	r3
   12196:	e7e5      	b.n	12164 <bt_l2cap_recv+0x14>
   12198:	00024f39 	.word	0x00024f39
   1219c:	00024f5b 	.word	0x00024f5b

000121a0 <bt_l2cap_update_conn_param>:
{
   121a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   121a2:	460c      	mov	r4, r1
	ident++;
   121a4:	4914      	ldr	r1, [pc, #80]	; (121f8 <bt_l2cap_update_conn_param+0x58>)
{
   121a6:	4605      	mov	r5, r0
	ident++;
   121a8:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   121aa:	2208      	movs	r2, #8
	ident++;
   121ac:	3301      	adds	r3, #1
	if (!ident) {
   121ae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   121b2:	bf08      	it	eq
   121b4:	2301      	moveq	r3, #1
   121b6:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   121b8:	2012      	movs	r0, #18
   121ba:	7809      	ldrb	r1, [r1, #0]
   121bc:	f7ff fea4 	bl	11f08 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   121c0:	4606      	mov	r6, r0
   121c2:	b1b0      	cbz	r0, 121f2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   121c4:	2108      	movs	r1, #8
   121c6:	4408      	add	r0, r1
   121c8:	f005 fb66 	bl	17898 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   121cc:	8822      	ldrh	r2, [r4, #0]
   121ce:	2105      	movs	r1, #5
   121d0:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   121d2:	8862      	ldrh	r2, [r4, #2]
   121d4:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   121d6:	88a2      	ldrh	r2, [r4, #4]
   121d8:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   121da:	88e2      	ldrh	r2, [r4, #6]
   121dc:	2400      	movs	r4, #0
   121de:	80c2      	strh	r2, [r0, #6]
   121e0:	4623      	mov	r3, r4
   121e2:	4632      	mov	r2, r6
   121e4:	4628      	mov	r0, r5
   121e6:	9400      	str	r4, [sp, #0]
   121e8:	f00c fd49 	bl	1ec7e <bt_l2cap_send_cb>
	return 0;
   121ec:	4620      	mov	r0, r4
}
   121ee:	b002      	add	sp, #8
   121f0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   121f2:	f06f 000b 	mvn.w	r0, #11
   121f6:	e7fa      	b.n	121ee <bt_l2cap_update_conn_param+0x4e>
   121f8:	2000b727 	.word	0x2000b727

000121fc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   121fc:	4b02      	ldr	r3, [pc, #8]	; (12208 <att_cfm_sent+0xc>)
   121fe:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12202:	f00c bd9f 	b.w	1ed44 <att_sent>
   12206:	bf00      	nop
   12208:	0001f153 	.word	0x0001f153

0001220c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1220c:	4b02      	ldr	r3, [pc, #8]	; (12218 <att_rsp_sent+0xc>)
   1220e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12212:	f00c bd97 	b.w	1ed44 <att_sent>
   12216:	bf00      	nop
   12218:	0001f13f 	.word	0x0001f13f

0001221c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1221c:	4b02      	ldr	r3, [pc, #8]	; (12228 <att_req_sent+0xc>)
   1221e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12222:	f00c bd8f 	b.w	1ed44 <att_sent>
   12226:	bf00      	nop
   12228:	000123d9 	.word	0x000123d9

0001222c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1222c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1222e:	7b43      	ldrb	r3, [r0, #13]
   12230:	2b07      	cmp	r3, #7
   12232:	d005      	beq.n	12240 <att_get+0x14>
		BT_WARN("Not connected");
   12234:	2157      	movs	r1, #87	; 0x57
   12236:	480e      	ldr	r0, [pc, #56]	; (12270 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   12238:	f00a fbae 	bl	1c998 <printk>
		return NULL;
   1223c:	2400      	movs	r4, #0
   1223e:	e008      	b.n	12252 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   12240:	2104      	movs	r1, #4
   12242:	f00c fd5c 	bl	1ecfe <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   12246:	4604      	mov	r4, r0
   12248:	b928      	cbnz	r0, 12256 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1224a:	2145      	movs	r1, #69	; 0x45
   1224c:	4809      	ldr	r0, [pc, #36]	; (12274 <att_get+0x48>)
   1224e:	f00a fba3 	bl	1c998 <printk>
	}

	return att_chan->att;
}
   12252:	4620      	mov	r0, r4
   12254:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12256:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   1225a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1225e:	075b      	lsls	r3, r3, #29
   12260:	d502      	bpl.n	12268 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   12262:	2157      	movs	r1, #87	; 0x57
   12264:	4804      	ldr	r0, [pc, #16]	; (12278 <att_get+0x4c>)
   12266:	e7e7      	b.n	12238 <att_get+0xc>
	return att_chan->att;
   12268:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1226c:	e7f1      	b.n	12252 <att_get+0x26>
   1226e:	bf00      	nop
   12270:	00024f95 	.word	0x00024f95
   12274:	00024fa8 	.word	0x00024fa8
   12278:	00024fc8 	.word	0x00024fc8

0001227c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1227c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1227e:	3808      	subs	r0, #8
   12280:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   12282:	a901      	add	r1, sp, #4
   12284:	4802      	ldr	r0, [pc, #8]	; (12290 <bt_att_released+0x14>)
   12286:	f007 fec5 	bl	1a014 <k_mem_slab_free>
}
   1228a:	b003      	add	sp, #12
   1228c:	f85d fb04 	ldr.w	pc, [sp], #4
   12290:	200084d4 	.word	0x200084d4

00012294 <find_type_cb>:
{
   12294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12298:	f642 0301 	movw	r3, #10241	; 0x2801
   1229c:	2500      	movs	r5, #0
{
   1229e:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   122a0:	f8d2 9000 	ldr.w	r9, [r2]
{
   122a4:	4607      	mov	r7, r0
   122a6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   122a8:	6800      	ldr	r0, [r0, #0]
   122aa:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   122ac:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   122b0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   122b2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   122b6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   122ba:	f00c f8c0 	bl	1e43e <bt_uuid_cmp>
   122be:	2800      	cmp	r0, #0
   122c0:	d060      	beq.n	12384 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   122c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   122c6:	6838      	ldr	r0, [r7, #0]
   122c8:	a90b      	add	r1, sp, #44	; 0x2c
   122ca:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   122ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   122d2:	f00c f8b4 	bl	1e43e <bt_uuid_cmp>
   122d6:	b138      	cbz	r0, 122e8 <find_type_cb+0x54>
		if (data->group &&
   122d8:	68a3      	ldr	r3, [r4, #8]
   122da:	b11b      	cbz	r3, 122e4 <find_type_cb+0x50>
   122dc:	885a      	ldrh	r2, [r3, #2]
   122de:	42b2      	cmp	r2, r6
   122e0:	d200      	bcs.n	122e4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   122e2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   122e4:	2001      	movs	r0, #1
   122e6:	e009      	b.n	122fc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   122e8:	6861      	ldr	r1, [r4, #4]
   122ea:	4608      	mov	r0, r1
   122ec:	f00c fd22 	bl	1ed34 <net_buf_frags_len>
   122f0:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   122f4:	1a1b      	subs	r3, r3, r0
   122f6:	2b03      	cmp	r3, #3
   122f8:	d803      	bhi.n	12302 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   122fa:	2000      	movs	r0, #0
}
   122fc:	b011      	add	sp, #68	; 0x44
   122fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   12302:	4608      	mov	r0, r1
   12304:	f005 fa0e 	bl	17724 <net_buf_frag_last>
   12308:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1230a:	6860      	ldr	r0, [r4, #4]
   1230c:	f00c fd12 	bl	1ed34 <net_buf_frags_len>
   12310:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   12314:	f105 0b08 	add.w	fp, r5, #8
   12318:	ebaa 0a00 	sub.w	sl, sl, r0
   1231c:	4658      	mov	r0, fp
   1231e:	f00e f97b 	bl	20618 <net_buf_simple_tailroom>
   12322:	4582      	cmp	sl, r0
   12324:	d231      	bcs.n	1238a <find_type_cb+0xf6>
   12326:	6860      	ldr	r0, [r4, #4]
   12328:	f00c fd04 	bl	1ed34 <net_buf_frags_len>
   1232c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12330:	1a18      	subs	r0, r3, r0
	if (!len) {
   12332:	b970      	cbnz	r0, 12352 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   12334:	6863      	ldr	r3, [r4, #4]
   12336:	7998      	ldrb	r0, [r3, #6]
   12338:	f005 f818 	bl	1736c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1233c:	2200      	movs	r2, #0
   1233e:	2300      	movs	r3, #0
   12340:	f00e f944 	bl	205cc <net_buf_alloc_fixed>
		if (!frag) {
   12344:	4605      	mov	r5, r0
   12346:	2800      	cmp	r0, #0
   12348:	d0d7      	beq.n	122fa <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1234a:	4601      	mov	r1, r0
   1234c:	6860      	ldr	r0, [r4, #4]
   1234e:	f005 fa29 	bl	177a4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   12352:	2300      	movs	r3, #0
   12354:	9300      	str	r3, [sp, #0]
   12356:	4639      	mov	r1, r7
   12358:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1235c:	2310      	movs	r3, #16
   1235e:	4640      	mov	r0, r8
   12360:	aa02      	add	r2, sp, #8
   12362:	47c8      	blx	r9
	if (read < 0) {
   12364:	1e07      	subs	r7, r0, #0
   12366:	db0d      	blt.n	12384 <find_type_cb+0xf0>
	if (read != data->value_len) {
   12368:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1236a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1236c:	42ba      	cmp	r2, r7
   1236e:	d02b      	beq.n	123c8 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   12370:	4601      	mov	r1, r0
   12372:	a80b      	add	r0, sp, #44	; 0x2c
   12374:	f00c f891 	bl	1e49a <bt_uuid_create>
   12378:	b958      	cbnz	r0, 12392 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1237a:	2157      	movs	r1, #87	; 0x57
   1237c:	7c22      	ldrb	r2, [r4, #16]
   1237e:	4814      	ldr	r0, [pc, #80]	; (123d0 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   12380:	f00a fb0a 	bl	1c998 <printk>
	data->group = NULL;
   12384:	2300      	movs	r3, #0
   12386:	60a3      	str	r3, [r4, #8]
   12388:	e7ac      	b.n	122e4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1238a:	4658      	mov	r0, fp
   1238c:	f00e f944 	bl	20618 <net_buf_simple_tailroom>
   12390:	e7cf      	b.n	12332 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   12392:	b2fa      	uxtb	r2, r7
   12394:	a902      	add	r1, sp, #8
   12396:	a806      	add	r0, sp, #24
   12398:	f00c f87f 	bl	1e49a <bt_uuid_create>
   1239c:	b918      	cbnz	r0, 123a6 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1239e:	463a      	mov	r2, r7
   123a0:	2157      	movs	r1, #87	; 0x57
   123a2:	480c      	ldr	r0, [pc, #48]	; (123d4 <find_type_cb+0x140>)
   123a4:	e7ec      	b.n	12380 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   123a6:	a906      	add	r1, sp, #24
   123a8:	a80b      	add	r0, sp, #44	; 0x2c
   123aa:	f00c f848 	bl	1e43e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   123ae:	2800      	cmp	r0, #0
   123b0:	d1e8      	bne.n	12384 <find_type_cb+0xf0>
	data->err = 0x00;
   123b2:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   123b4:	2104      	movs	r1, #4
   123b6:	7463      	strb	r3, [r4, #17]
   123b8:	f105 0008 	add.w	r0, r5, #8
   123bc:	f005 fa6c 	bl	17898 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   123c0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   123c2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   123c4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   123c6:	e78d      	b.n	122e4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   123c8:	a902      	add	r1, sp, #8
   123ca:	f00b ff8c 	bl	1e2e6 <memcmp>
   123ce:	e7ee      	b.n	123ae <find_type_cb+0x11a>
   123d0:	00024ff1 	.word	0x00024ff1
   123d4:	00025015 	.word	0x00025015

000123d8 <chan_req_sent>:
	if (chan->req) {
   123d8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   123dc:	b13b      	cbz	r3, 123ee <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   123de:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   123e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   123e6:	2300      	movs	r3, #0
   123e8:	4801      	ldr	r0, [pc, #4]	; (123f0 <chan_req_sent+0x18>)
   123ea:	f009 bb77 	b.w	1badc <k_delayed_work_submit_to_queue>
}
   123ee:	4770      	bx	lr
   123f0:	20009630 	.word	0x20009630

000123f4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   123f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   123f6:	2300      	movs	r3, #0
{
   123f8:	4606      	mov	r6, r0
   123fa:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   123fc:	2200      	movs	r2, #0
   123fe:	4669      	mov	r1, sp
   12400:	4823      	ldr	r0, [pc, #140]	; (12490 <bt_att_accept+0x9c>)
   12402:	f007 fdad 	bl	19f60 <k_mem_slab_alloc>
   12406:	4604      	mov	r4, r0
   12408:	b148      	cbz	r0, 1241e <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   1240a:	4632      	mov	r2, r6
   1240c:	2145      	movs	r1, #69	; 0x45
   1240e:	4821      	ldr	r0, [pc, #132]	; (12494 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12410:	f00a fac2 	bl	1c998 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   12414:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   12418:	4620      	mov	r0, r4
   1241a:	b003      	add	sp, #12
   1241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   1241e:	4601      	mov	r1, r0
   12420:	2230      	movs	r2, #48	; 0x30
   12422:	9800      	ldr	r0, [sp, #0]
   12424:	f00b ff9b 	bl	1e35e <memset>
	att->conn = conn;
   12428:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1242a:	2200      	movs	r2, #0
	list->head = NULL;
   1242c:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   12430:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   12434:	60ac      	str	r4, [r5, #8]
   12436:	2300      	movs	r3, #0
   12438:	4817      	ldr	r0, [pc, #92]	; (12498 <bt_att_accept+0xa4>)
   1243a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1243c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1243e:	f007 fd8f 	bl	19f60 <k_mem_slab_alloc>
   12442:	4604      	mov	r4, r0
   12444:	b118      	cbz	r0, 1244e <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12446:	2145      	movs	r1, #69	; 0x45
   12448:	682a      	ldr	r2, [r5, #0]
   1244a:	4814      	ldr	r0, [pc, #80]	; (1249c <bt_att_accept+0xa8>)
   1244c:	e7e0      	b.n	12410 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1244e:	4601      	mov	r1, r0
   12450:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12454:	9801      	ldr	r0, [sp, #4]
   12456:	f00b ff82 	bl	1e35e <memset>
	chan->chan.chan.ops = &ops;
   1245a:	9801      	ldr	r0, [sp, #4]
   1245c:	4b10      	ldr	r3, [pc, #64]	; (124a0 <bt_att_accept+0xac>)
   1245e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   12460:	30d0      	adds	r0, #208	; 0xd0
   12462:	f00e ff9c 	bl	2139e <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   12466:	9801      	ldr	r0, [sp, #4]
   12468:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   1246c:	2203      	movs	r2, #3
   1246e:	4611      	mov	r1, r2
   12470:	f00e fffa 	bl	21468 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12474:	9b01      	ldr	r3, [sp, #4]
   12476:	33c8      	adds	r3, #200	; 0xc8
   12478:	e8d3 2fef 	ldaex	r2, [r3]
   1247c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   12480:	2900      	cmp	r1, #0
   12482:	d1f9      	bne.n	12478 <bt_att_accept+0x84>
	chan->att = att;
   12484:	9b01      	ldr	r3, [sp, #4]
   12486:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1248a:	603b      	str	r3, [r7, #0]
	return 0;
   1248c:	e7c4      	b.n	12418 <bt_att_accept+0x24>
   1248e:	bf00      	nop
   12490:	200084b8 	.word	0x200084b8
   12494:	00025039 	.word	0x00025039
   12498:	200084d4 	.word	0x200084d4
   1249c:	00025063 	.word	0x00025063
   124a0:	20008338 	.word	0x20008338

000124a4 <chan_cb.isra.0>:
static bt_att_chan_sent_t chan_cb(struct net_buf *buf)
   124a4:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   124a6:	7800      	ldrb	r0, [r0, #0]
   124a8:	f00c fc64 	bl	1ed74 <att_op_get_type>
   124ac:	3801      	subs	r0, #1
   124ae:	b2c0      	uxtb	r0, r0
   124b0:	2804      	cmp	r0, #4
   124b2:	bf96      	itet	ls
   124b4:	4b02      	ldrls	r3, [pc, #8]	; (124c0 <chan_cb.isra.0+0x1c>)
   124b6:	2000      	movhi	r0, #0
   124b8:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
   124bc:	bd08      	pop	{r3, pc}
   124be:	bf00      	nop
   124c0:	00022188 	.word	0x00022188

000124c4 <read_group_cb>:
{
   124c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   124c8:	f04f 0800 	mov.w	r8, #0
   124cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   124d0:	4605      	mov	r5, r0
   124d2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   124d4:	6800      	ldr	r0, [r0, #0]
   124d6:	a902      	add	r1, sp, #8
{
   124d8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   124da:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   124dc:	f88d 8008 	strb.w	r8, [sp, #8]
   124e0:	f8ad 300a 	strh.w	r3, [sp, #10]
   124e4:	f00b ffab 	bl	1e43e <bt_uuid_cmp>
   124e8:	b1a0      	cbz	r0, 12514 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   124ea:	f642 0301 	movw	r3, #10241	; 0x2801
   124ee:	6828      	ldr	r0, [r5, #0]
   124f0:	a903      	add	r1, sp, #12
   124f2:	f88d 800c 	strb.w	r8, [sp, #12]
   124f6:	f8ad 300e 	strh.w	r3, [sp, #14]
   124fa:	f00b ffa0 	bl	1e43e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   124fe:	b148      	cbz	r0, 12514 <read_group_cb+0x50>
		if (data->group &&
   12500:	6923      	ldr	r3, [r4, #16]
   12502:	b11b      	cbz	r3, 1250c <read_group_cb+0x48>
   12504:	885a      	ldrh	r2, [r3, #2]
   12506:	42b2      	cmp	r2, r6
   12508:	d200      	bcs.n	1250c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1250a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1250c:	2001      	movs	r0, #1
}
   1250e:	b004      	add	sp, #16
   12510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12514:	6861      	ldr	r1, [r4, #4]
   12516:	6828      	ldr	r0, [r5, #0]
   12518:	f00b ff91 	bl	1e43e <bt_uuid_cmp>
   1251c:	b110      	cbz	r0, 12524 <read_group_cb+0x60>
		data->group = NULL;
   1251e:	2300      	movs	r3, #0
   12520:	6123      	str	r3, [r4, #16]
   12522:	e7f3      	b.n	1250c <read_group_cb+0x48>
	if (data->rsp->len &&
   12524:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12526:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   12528:	781a      	ldrb	r2, [r3, #0]
   1252a:	b13a      	cbz	r2, 1253c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1252c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   12530:	8981      	ldrh	r1, [r0, #12]
   12532:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   12534:	4293      	cmp	r3, r2
   12536:	da01      	bge.n	1253c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   12538:	2000      	movs	r0, #0
   1253a:	e7e8      	b.n	1250e <read_group_cb+0x4a>
   1253c:	2104      	movs	r1, #4
   1253e:	3008      	adds	r0, #8
   12540:	f005 f9aa 	bl	17898 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12544:	4b09      	ldr	r3, [pc, #36]	; (1256c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   12546:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12548:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   1254a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1254c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1254e:	68a2      	ldr	r2, [r4, #8]
   12550:	9300      	str	r3, [sp, #0]
   12552:	4638      	mov	r0, r7
   12554:	2300      	movs	r3, #0
   12556:	9401      	str	r4, [sp, #4]
   12558:	f00c fce7 	bl	1ef2a <att_chan_read>
	if (read < 0) {
   1255c:	2800      	cmp	r0, #0
   1255e:	dbeb      	blt.n	12538 <read_group_cb+0x74>
	if (!data->group) {
   12560:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   12562:	3800      	subs	r0, #0
   12564:	bf18      	it	ne
   12566:	2001      	movne	r0, #1
   12568:	e7d1      	b.n	1250e <read_group_cb+0x4a>
   1256a:	bf00      	nop
   1256c:	0001eeaf 	.word	0x0001eeaf

00012570 <chan_send>:
{
   12570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12574:	688b      	ldr	r3, [r1, #8]
{
   12576:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12578:	781b      	ldrb	r3, [r3, #0]
{
   1257a:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1257c:	2bd2      	cmp	r3, #210	; 0xd2
{
   1257e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12580:	d110      	bne.n	125a4 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   12582:	6803      	ldr	r3, [r0, #0]
   12584:	6818      	ldr	r0, [r3, #0]
   12586:	f00d ff64 	bl	20452 <bt_smp_sign>
		if (err) {
   1258a:	4606      	mov	r6, r0
   1258c:	b150      	cbz	r0, 125a4 <chan_send+0x34>
			BT_ERR("Error signing data");
   1258e:	2145      	movs	r1, #69	; 0x45
   12590:	481f      	ldr	r0, [pc, #124]	; (12610 <chan_send+0xa0>)
   12592:	f00a fa01 	bl	1c998 <printk>
		net_buf_unref(buf);
   12596:	4620      	mov	r0, r4
   12598:	f005 f868 	bl	1766c <net_buf_unref>
}
   1259c:	4630      	mov	r0, r6
   1259e:	b003      	add	sp, #12
   125a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   125a4:	f104 0008 	add.w	r0, r4, #8
   125a8:	f00e f832 	bl	20610 <net_buf_simple_headroom>
	state->len = buf->len;
   125ac:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   125b0:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   125b2:	b91f      	cbnz	r7, 125bc <chan_send+0x4c>
   125b4:	68a0      	ldr	r0, [r4, #8]
   125b6:	f7ff ff75 	bl	124a4 <chan_cb.isra.0>
   125ba:	4607      	mov	r7, r0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   125bc:	682b      	ldr	r3, [r5, #0]
   125be:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   125c0:	f8c5 7138 	str.w	r7, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   125c4:	681e      	ldr	r6, [r3, #0]
   125c6:	f005 f895 	bl	176f4 <net_buf_ref>
   125ca:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   125ce:	4b11      	ldr	r3, [pc, #68]	; (12614 <chan_send+0xa4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   125d0:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   125d2:	4299      	cmp	r1, r3
   125d4:	d018      	beq.n	12608 <chan_send+0x98>
	} else if (cb == chan_cfm_sent) {
   125d6:	4b10      	ldr	r3, [pc, #64]	; (12618 <chan_send+0xa8>)
   125d8:	4299      	cmp	r1, r3
   125da:	d017      	beq.n	1260c <chan_send+0x9c>
		return att_sent;
   125dc:	4f0f      	ldr	r7, [pc, #60]	; (1261c <chan_send+0xac>)
   125de:	4b10      	ldr	r3, [pc, #64]	; (12620 <chan_send+0xb0>)
   125e0:	4810      	ldr	r0, [pc, #64]	; (12624 <chan_send+0xb4>)
   125e2:	42b9      	cmp	r1, r7
   125e4:	bf18      	it	ne
   125e6:	4603      	movne	r3, r0
				&chan->chan.chan);
   125e8:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   125ea:	4630      	mov	r0, r6
   125ec:	2104      	movs	r1, #4
   125ee:	9500      	str	r5, [sp, #0]
   125f0:	f00c fb45 	bl	1ec7e <bt_l2cap_send_cb>
	if (!err) {
   125f4:	4606      	mov	r6, r0
   125f6:	2800      	cmp	r0, #0
   125f8:	d0cd      	beq.n	12596 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   125fa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   125fc:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12600:	fa10 f088 	uxtah	r0, r0, r8
   12604:	60a0      	str	r0, [r4, #8]
}
   12606:	e7c9      	b.n	1259c <chan_send+0x2c>
		return att_rsp_sent;
   12608:	4b07      	ldr	r3, [pc, #28]	; (12628 <chan_send+0xb8>)
   1260a:	e7ed      	b.n	125e8 <chan_send+0x78>
		return att_cfm_sent;
   1260c:	4b07      	ldr	r3, [pc, #28]	; (1262c <chan_send+0xbc>)
   1260e:	e7eb      	b.n	125e8 <chan_send+0x78>
   12610:	0002508d 	.word	0x0002508d
   12614:	0001f13f 	.word	0x0001f13f
   12618:	0001f153 	.word	0x0001f153
   1261c:	000123d9 	.word	0x000123d9
   12620:	0001221d 	.word	0x0001221d
   12624:	0001ed45 	.word	0x0001ed45
   12628:	0001220d 	.word	0x0001220d
   1262c:	000121fd 	.word	0x000121fd

00012630 <bt_att_chan_req_send>:
{
   12630:	b570      	push	{r4, r5, r6, lr}
   12632:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   12634:	4604      	mov	r4, r0
   12636:	b950      	cbnz	r0, 1264e <bt_att_chan_req_send+0x1e>
   12638:	4924      	ldr	r1, [pc, #144]	; (126cc <bt_att_chan_req_send+0x9c>)
   1263a:	4825      	ldr	r0, [pc, #148]	; (126d0 <bt_att_chan_req_send+0xa0>)
   1263c:	f240 224f 	movw	r2, #591	; 0x24f
   12640:	f00a f9aa 	bl	1c998 <printk>
   12644:	f240 214f 	movw	r1, #591	; 0x24f
   12648:	4820      	ldr	r0, [pc, #128]	; (126cc <bt_att_chan_req_send+0x9c>)
   1264a:	f00a fc4b 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1264e:	b955      	cbnz	r5, 12666 <bt_att_chan_req_send+0x36>
   12650:	491e      	ldr	r1, [pc, #120]	; (126cc <bt_att_chan_req_send+0x9c>)
   12652:	481f      	ldr	r0, [pc, #124]	; (126d0 <bt_att_chan_req_send+0xa0>)
   12654:	f44f 7214 	mov.w	r2, #592	; 0x250
   12658:	f00a f99e 	bl	1c998 <printk>
   1265c:	f44f 7114 	mov.w	r1, #592	; 0x250
   12660:	481a      	ldr	r0, [pc, #104]	; (126cc <bt_att_chan_req_send+0x9c>)
   12662:	f00a fc3f 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   12666:	686b      	ldr	r3, [r5, #4]
   12668:	b953      	cbnz	r3, 12680 <bt_att_chan_req_send+0x50>
   1266a:	4918      	ldr	r1, [pc, #96]	; (126cc <bt_att_chan_req_send+0x9c>)
   1266c:	4818      	ldr	r0, [pc, #96]	; (126d0 <bt_att_chan_req_send+0xa0>)
   1266e:	f240 2251 	movw	r2, #593	; 0x251
   12672:	f00a f991 	bl	1c998 <printk>
   12676:	f240 2151 	movw	r1, #593	; 0x251
   1267a:	4814      	ldr	r0, [pc, #80]	; (126cc <bt_att_chan_req_send+0x9c>)
   1267c:	f00a fc32 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   12680:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12684:	b153      	cbz	r3, 1269c <bt_att_chan_req_send+0x6c>
   12686:	4911      	ldr	r1, [pc, #68]	; (126cc <bt_att_chan_req_send+0x9c>)
   12688:	4811      	ldr	r0, [pc, #68]	; (126d0 <bt_att_chan_req_send+0xa0>)
   1268a:	f240 2252 	movw	r2, #594	; 0x252
   1268e:	f00a f983 	bl	1c998 <printk>
   12692:	f240 2152 	movw	r1, #594	; 0x252
   12696:	480d      	ldr	r0, [pc, #52]	; (126cc <bt_att_chan_req_send+0x9c>)
   12698:	f00a fc24 	bl	1cee4 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1269c:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   126a0:	2200      	movs	r2, #0
   126a2:	2300      	movs	r3, #0
   126a4:	4630      	mov	r0, r6
   126a6:	f008 fff3 	bl	1b690 <z_impl_k_sem_take>
   126aa:	2800      	cmp	r0, #0
   126ac:	db0a      	blt.n	126c4 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   126ae:	4620      	mov	r0, r4
   126b0:	4629      	mov	r1, r5
   126b2:	f00c fcdf 	bl	1f074 <chan_req_send>
	if (err < 0) {
   126b6:	1e04      	subs	r4, r0, #0
   126b8:	da02      	bge.n	126c0 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   126ba:	4630      	mov	r0, r6
   126bc:	f008 ffac 	bl	1b618 <z_impl_k_sem_give>
}
   126c0:	4620      	mov	r0, r4
   126c2:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   126c4:	f06f 040a 	mvn.w	r4, #10
   126c8:	e7fa      	b.n	126c0 <bt_att_chan_req_send+0x90>
   126ca:	bf00      	nop
   126cc:	000250a5 	.word	0x000250a5
   126d0:	00022dd6 	.word	0x00022dd6

000126d4 <read_type_cb>:
{
   126d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   126d8:	f8d2 8000 	ldr.w	r8, [r2]
{
   126dc:	4606      	mov	r6, r0
   126de:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   126e0:	6800      	ldr	r0, [r0, #0]
   126e2:	6851      	ldr	r1, [r2, #4]
{
   126e4:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   126e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   126ea:	f00b fea8 	bl	1e43e <bt_uuid_cmp>
   126ee:	4607      	mov	r7, r0
   126f0:	2800      	cmp	r0, #0
   126f2:	d13e      	bne.n	12772 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   126f4:	4628      	mov	r0, r5
   126f6:	2215      	movs	r2, #21
   126f8:	4631      	mov	r1, r6
   126fa:	f00d f982 	bl	1fa02 <bt_gatt_check_perm>
   126fe:	4605      	mov	r5, r0
   12700:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   12702:	b148      	cbz	r0, 12718 <read_type_cb+0x44>
		if (data->rsp->len) {
   12704:	68e3      	ldr	r3, [r4, #12]
   12706:	781b      	ldrb	r3, [r3, #0]
   12708:	b923      	cbnz	r3, 12714 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1270a:	2500      	movs	r5, #0
}
   1270c:	4628      	mov	r0, r5
   1270e:	b003      	add	sp, #12
   12710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   12714:	7527      	strb	r7, [r4, #20]
   12716:	e7f8      	b.n	1270a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12718:	68a0      	ldr	r0, [r4, #8]
   1271a:	f005 f803 	bl	17724 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1271e:	2102      	movs	r1, #2
   12720:	3008      	adds	r0, #8
   12722:	f005 f8b9 	bl	17898 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12726:	4b14      	ldr	r3, [pc, #80]	; (12778 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12728:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1272a:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   1272c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12730:	68a2      	ldr	r2, [r4, #8]
   12732:	9300      	str	r3, [sp, #0]
   12734:	4640      	mov	r0, r8
   12736:	462b      	mov	r3, r5
   12738:	9401      	str	r4, [sp, #4]
   1273a:	f00c fbf6 	bl	1ef2a <att_chan_read>
	if (read < 0) {
   1273e:	2800      	cmp	r0, #0
   12740:	da07      	bge.n	12752 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   12742:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   12746:	bf32      	itee	cc
   12748:	200e      	movcc	r0, #14
		return -err;
   1274a:	4240      	negcs	r0, r0
   1274c:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1274e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   12750:	e7dc      	b.n	1270c <read_type_cb+0x38>
	if (!data->item) {
   12752:	6923      	ldr	r3, [r4, #16]
   12754:	2b00      	cmp	r3, #0
   12756:	d0d8      	beq.n	1270a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12758:	68a0      	ldr	r0, [r4, #8]
   1275a:	f00c faeb 	bl	1ed34 <net_buf_frags_len>
   1275e:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12762:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12764:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12766:	7818      	ldrb	r0, [r3, #0]
   12768:	4285      	cmp	r5, r0
   1276a:	bf94      	ite	ls
   1276c:	2500      	movls	r5, #0
   1276e:	2501      	movhi	r5, #1
   12770:	e7cc      	b.n	1270c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   12772:	2501      	movs	r5, #1
   12774:	e7ca      	b.n	1270c <read_type_cb+0x38>
   12776:	bf00      	nop
   12778:	0001ed51 	.word	0x0001ed51

0001277c <bt_att_connected>:
{
   1277c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1277e:	2104      	movs	r1, #4
{
   12780:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   12782:	6800      	ldr	r0, [r0, #0]
   12784:	f00c faab 	bl	1ecde <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   12788:	4605      	mov	r5, r0
   1278a:	b950      	cbnz	r0, 127a2 <bt_att_connected+0x26>
   1278c:	4919      	ldr	r1, [pc, #100]	; (127f4 <bt_att_connected+0x78>)
   1278e:	481a      	ldr	r0, [pc, #104]	; (127f8 <bt_att_connected+0x7c>)
   12790:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   12794:	f00a f900 	bl	1c998 <printk>
   12798:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   1279c:	4815      	ldr	r0, [pc, #84]	; (127f4 <bt_att_connected+0x78>)
   1279e:	f00a fba1 	bl	1cee4 <assert_post_action>
	struct bt_att *att = att_chan->att;
   127a2:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   127a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   127a8:	b91b      	cbnz	r3, 127b2 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   127aa:	f105 000c 	add.w	r0, r5, #12
   127ae:	f00e fdf6 	bl	2139e <z_impl_k_queue_init>
	parent->next = child;
   127b2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   127b4:	f504 739a 	add.w	r3, r4, #308	; 0x134
   127b8:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   127bc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   127be:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   127c0:	b902      	cbnz	r2, 127c4 <bt_att_connected+0x48>
	list->tail = node;
   127c2:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   127c4:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   127c8:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   127cc:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   127ce:	bf58      	it	pl
   127d0:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   127d2:	f04f 0230 	mov.w	r2, #48	; 0x30
   127d6:	bf5c      	itt	pl
   127d8:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   127dc:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   127e0:	2100      	movs	r1, #0
   127e2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   127e6:	f00b fdba 	bl	1e35e <memset>
   127ea:	4b04      	ldr	r3, [pc, #16]	; (127fc <bt_att_connected+0x80>)
   127ec:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   127f0:	bd38      	pop	{r3, r4, r5, pc}
   127f2:	bf00      	nop
   127f4:	000250a5 	.word	0x000250a5
   127f8:	00022dd6 	.word	0x00022dd6
   127fc:	00013155 	.word	0x00013155

00012800 <bt_att_chan_create_pdu>:
{
   12800:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12802:	1c53      	adds	r3, r2, #1
   12804:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   12808:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1280a:	4293      	cmp	r3, r2
   1280c:	d906      	bls.n	1281c <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1280e:	2157      	movs	r1, #87	; 0x57
   12810:	4813      	ldr	r0, [pc, #76]	; (12860 <bt_att_chan_create_pdu+0x60>)
   12812:	f00a f8c1 	bl	1c998 <printk>
		return NULL;
   12816:	2400      	movs	r4, #0
}
   12818:	4620      	mov	r0, r4
   1281a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   1281c:	4608      	mov	r0, r1
   1281e:	f00c faa9 	bl	1ed74 <att_op_get_type>
   12822:	2802      	cmp	r0, #2
   12824:	d001      	beq.n	1282a <bt_att_chan_create_pdu+0x2a>
   12826:	2804      	cmp	r0, #4
   12828:	d10e      	bne.n	12848 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1282a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1282e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   12830:	2100      	movs	r1, #0
   12832:	4608      	mov	r0, r1
   12834:	f00c fa20 	bl	1ec78 <bt_l2cap_create_pdu_timeout>
   12838:	4604      	mov	r4, r0
	if (!buf) {
   1283a:	b950      	cbnz	r0, 12852 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1283c:	462a      	mov	r2, r5
   1283e:	2145      	movs	r1, #69	; 0x45
   12840:	4808      	ldr	r0, [pc, #32]	; (12864 <bt_att_chan_create_pdu+0x64>)
   12842:	f00a f8a9 	bl	1c998 <printk>
		return NULL;
   12846:	e7e7      	b.n	12818 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   12848:	f04f 32ff 	mov.w	r2, #4294967295
   1284c:	f04f 33ff 	mov.w	r3, #4294967295
   12850:	e7ee      	b.n	12830 <bt_att_chan_create_pdu+0x30>
   12852:	2101      	movs	r1, #1
   12854:	3008      	adds	r0, #8
   12856:	f005 f81f 	bl	17898 <net_buf_simple_add>
	hdr->code = op;
   1285a:	7005      	strb	r5, [r0, #0]
	return buf;
   1285c:	e7dc      	b.n	12818 <bt_att_chan_create_pdu+0x18>
   1285e:	bf00      	nop
   12860:	000250d4 	.word	0x000250d4
   12864:	00024deb 	.word	0x00024deb

00012868 <att_indicate>:
{
   12868:	b570      	push	{r4, r5, r6, lr}
   1286a:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   1286c:	f101 0008 	add.w	r0, r1, #8
   12870:	460d      	mov	r5, r1
   12872:	f00d fec5 	bl	20600 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   12876:	6826      	ldr	r6, [r4, #0]
   12878:	4601      	mov	r1, r0
   1287a:	89ab      	ldrh	r3, [r5, #12]
   1287c:	68aa      	ldr	r2, [r5, #8]
   1287e:	6830      	ldr	r0, [r6, #0]
   12880:	f00d f956 	bl	1fb30 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   12884:	211e      	movs	r1, #30
   12886:	2200      	movs	r2, #0
   12888:	4620      	mov	r0, r4
   1288a:	f7ff ffb9 	bl	12800 <bt_att_chan_create_pdu>
	if (!buf) {
   1288e:	4601      	mov	r1, r0
   12890:	b118      	cbz	r0, 1289a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   12892:	4620      	mov	r0, r4
   12894:	4a02      	ldr	r2, [pc, #8]	; (128a0 <att_indicate+0x38>)
   12896:	f00c fc2a 	bl	1f0ee <bt_att_chan_send_rsp>
}
   1289a:	2000      	movs	r0, #0
   1289c:	bd70      	pop	{r4, r5, r6, pc}
   1289e:	bf00      	nop
   128a0:	0001f153 	.word	0x0001f153

000128a4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   128a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128a8:	4688      	mov	r8, r1
   128aa:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   128ac:	2101      	movs	r1, #1
   128ae:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   128b0:	4605      	mov	r5, r0
   128b2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   128b4:	f7ff ffa4 	bl	12800 <bt_att_chan_create_pdu>
	if (!buf) {
   128b8:	4604      	mov	r4, r0
   128ba:	b178      	cbz	r0, 128dc <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   128bc:	2104      	movs	r1, #4
   128be:	3008      	adds	r0, #8
   128c0:	f004 ffea 	bl	17898 <net_buf_simple_add>
	rsp->request = req;
   128c4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   128c8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   128ca:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   128ce:	4621      	mov	r1, r4
   128d0:	4628      	mov	r0, r5
}
   128d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   128d6:	4a02      	ldr	r2, [pc, #8]	; (128e0 <send_err_rsp.part.0+0x3c>)
   128d8:	f00c bc09 	b.w	1f0ee <bt_att_chan_send_rsp>
}
   128dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128e0:	0001f13f 	.word	0x0001f13f

000128e4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   128e4:	898b      	ldrh	r3, [r1, #12]
{
   128e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128ea:	4604      	mov	r4, r0
   128ec:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   128ee:	b933      	cbnz	r3, 128fe <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   128f0:	2145      	movs	r1, #69	; 0x45
   128f2:	4838      	ldr	r0, [pc, #224]	; (129d4 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   128f4:	f00a f850 	bl	1c998 <printk>
}
   128f8:	2000      	movs	r0, #0
   128fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   128fe:	2101      	movs	r1, #1
   12900:	f108 0008 	add.w	r0, r8, #8
   12904:	f004 ffaa 	bl	1785c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12908:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1290c:	4605      	mov	r5, r0
   1290e:	2b00      	cmp	r3, #0
   12910:	d0f2      	beq.n	128f8 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12912:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12914:	7802      	ldrb	r2, [r0, #0]
   12916:	4930      	ldr	r1, [pc, #192]	; (129d8 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12918:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   1291c:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   12920:	4290      	cmp	r0, r2
   12922:	d114      	bne.n	1294e <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   12924:	00d8      	lsls	r0, r3, #3
   12926:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1292a:	789f      	ldrb	r7, [r3, #2]
   1292c:	2f01      	cmp	r7, #1
   1292e:	d123      	bne.n	12978 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12930:	34c0      	adds	r4, #192	; 0xc0
   12932:	e8d4 3fef 	ldaex	r3, [r4]
   12936:	f043 0201 	orr.w	r2, r3, #1
   1293a:	e8c4 2fec 	stlex	ip, r2, [r4]
   1293e:	f1bc 0f00 	cmp.w	ip, #0
   12942:	d1f6      	bne.n	12932 <bt_att_recv+0x4e>
   12944:	07da      	lsls	r2, r3, #31
   12946:	d528      	bpl.n	1299a <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   12948:	2157      	movs	r1, #87	; 0x57
   1294a:	4824      	ldr	r0, [pc, #144]	; (129dc <bt_att_recv+0xf8>)
   1294c:	e7d2      	b.n	128f4 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1294e:	3301      	adds	r3, #1
   12950:	2b1c      	cmp	r3, #28
   12952:	d1e3      	bne.n	1291c <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12954:	2157      	movs	r1, #87	; 0x57
   12956:	4822      	ldr	r0, [pc, #136]	; (129e0 <bt_att_recv+0xfc>)
   12958:	f00a f81e 	bl	1c998 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1295c:	7829      	ldrb	r1, [r5, #0]
   1295e:	4608      	mov	r0, r1
   12960:	f00c fa08 	bl	1ed74 <att_op_get_type>
   12964:	2800      	cmp	r0, #0
   12966:	d0c7      	beq.n	128f8 <bt_att_recv+0x14>
	if (!req) {
   12968:	2900      	cmp	r1, #0
   1296a:	d0c5      	beq.n	128f8 <bt_att_recv+0x14>
   1296c:	2306      	movs	r3, #6
   1296e:	2200      	movs	r2, #0
   12970:	4630      	mov	r0, r6
   12972:	f7ff ff97 	bl	128a4 <send_err_rsp.part.0>
   12976:	e7bf      	b.n	128f8 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12978:	2f05      	cmp	r7, #5
   1297a:	d10e      	bne.n	1299a <bt_att_recv+0xb6>
   1297c:	34c0      	adds	r4, #192	; 0xc0
   1297e:	e8d4 3fef 	ldaex	r3, [r4]
   12982:	f043 0202 	orr.w	r2, r3, #2
   12986:	e8c4 2fec 	stlex	ip, r2, [r4]
   1298a:	f1bc 0f00 	cmp.w	ip, #0
   1298e:	d1f6      	bne.n	1297e <bt_att_recv+0x9a>
   12990:	079b      	lsls	r3, r3, #30
   12992:	d502      	bpl.n	1299a <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12994:	2157      	movs	r1, #87	; 0x57
   12996:	4813      	ldr	r0, [pc, #76]	; (129e4 <bt_att_recv+0x100>)
   12998:	e7ac      	b.n	128f4 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   1299a:	180b      	adds	r3, r1, r0
   1299c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   129a0:	7859      	ldrb	r1, [r3, #1]
   129a2:	4291      	cmp	r1, r2
   129a4:	d908      	bls.n	129b8 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   129a6:	2145      	movs	r1, #69	; 0x45
   129a8:	782b      	ldrb	r3, [r5, #0]
   129aa:	480f      	ldr	r0, [pc, #60]	; (129e8 <bt_att_recv+0x104>)
   129ac:	f009 fff4 	bl	1c998 <printk>
	if (handler->type == ATT_REQUEST && err) {
   129b0:	2f01      	cmp	r7, #1
   129b2:	d1a1      	bne.n	128f8 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   129b4:	2304      	movs	r3, #4
   129b6:	e008      	b.n	129ca <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   129b8:	685b      	ldr	r3, [r3, #4]
   129ba:	4641      	mov	r1, r8
   129bc:	4630      	mov	r0, r6
   129be:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   129c0:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   129c2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   129c4:	d198      	bne.n	128f8 <bt_att_recv+0x14>
   129c6:	2800      	cmp	r0, #0
   129c8:	d096      	beq.n	128f8 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   129ca:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   129cc:	2900      	cmp	r1, #0
   129ce:	d093      	beq.n	128f8 <bt_att_recv+0x14>
   129d0:	e7cd      	b.n	1296e <bt_att_recv+0x8a>
   129d2:	bf00      	nop
   129d4:	000250fe 	.word	0x000250fe
   129d8:	0002219c 	.word	0x0002219c
   129dc:	0002511e 	.word	0x0002511e
   129e0:	00025187 	.word	0x00025187
   129e4:	0002513f 	.word	0x0002513f
   129e8:	00025163 	.word	0x00025163

000129ec <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   129ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   129f0:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   129f2:	6803      	ldr	r3, [r0, #0]
   129f4:	460e      	mov	r6, r1
   129f6:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   129f8:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   129fa:	bf18      	it	ne
   129fc:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   129fe:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12a00:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12a02:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12a04:	f00d f8bf 	bl	1fb86 <bt_gatt_change_aware>
   12a08:	2800      	cmp	r0, #0
   12a0a:	d04b      	beq.n	12aa4 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12a0c:	2f00      	cmp	r7, #0
   12a0e:	d04b      	beq.n	12aa8 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12a10:	2218      	movs	r2, #24
   12a12:	2100      	movs	r1, #0
   12a14:	4668      	mov	r0, sp
   12a16:	f00b fca2 	bl	1e35e <memset>
	if (rsp) {
   12a1a:	f1b8 0f00 	cmp.w	r8, #0
   12a1e:	d122      	bne.n	12a66 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12a20:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   12a22:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   12a26:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12a28:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   12a2a:	9300      	str	r3, [sp, #0]
	data.value = value;
   12a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12a2e:	4638      	mov	r0, r7
	data.value = value;
   12a30:	9303      	str	r3, [sp, #12]
	data.len = len;
   12a32:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12a36:	4a1d      	ldr	r2, [pc, #116]	; (12aac <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12a38:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12a3c:	2301      	movs	r3, #1
   12a3e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12a42:	466b      	mov	r3, sp
	data.req = req;
   12a44:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12a48:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12a4c:	f00c f9d8 	bl	1ee00 <bt_gatt_foreach_attr>
	if (data.err) {
   12a50:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12a54:	b1f4      	cbz	r4, 12a94 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   12a56:	f1b8 0f00 	cmp.w	r8, #0
   12a5a:	d10e      	bne.n	12a7a <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12a5c:	2400      	movs	r4, #0
}
   12a5e:	4620      	mov	r0, r4
   12a60:	b007      	add	sp, #28
   12a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12a66:	2200      	movs	r2, #0
   12a68:	4641      	mov	r1, r8
   12a6a:	4628      	mov	r0, r5
   12a6c:	f7ff fec8 	bl	12800 <bt_att_chan_create_pdu>
   12a70:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12a72:	2800      	cmp	r0, #0
   12a74:	d1d4      	bne.n	12a20 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   12a76:	240e      	movs	r4, #14
   12a78:	e7f1      	b.n	12a5e <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12a7a:	9801      	ldr	r0, [sp, #4]
   12a7c:	f004 fdf6 	bl	1766c <net_buf_unref>
	if (!req) {
   12a80:	2e00      	cmp	r6, #0
   12a82:	d0eb      	beq.n	12a5c <att_write_rsp.constprop.0+0x70>
   12a84:	463a      	mov	r2, r7
   12a86:	4631      	mov	r1, r6
   12a88:	4628      	mov	r0, r5
   12a8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12a8e:	f7ff ff09 	bl	128a4 <send_err_rsp.part.0>
   12a92:	e7e3      	b.n	12a5c <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12a94:	9901      	ldr	r1, [sp, #4]
   12a96:	2900      	cmp	r1, #0
   12a98:	d0e0      	beq.n	12a5c <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12a9a:	4628      	mov	r0, r5
   12a9c:	4a04      	ldr	r2, [pc, #16]	; (12ab0 <att_write_rsp.constprop.0+0xc4>)
   12a9e:	f00c fb26 	bl	1f0ee <bt_att_chan_send_rsp>
   12aa2:	e7dc      	b.n	12a5e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12aa4:	2412      	movs	r4, #18
   12aa6:	e7da      	b.n	12a5e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12aa8:	2401      	movs	r4, #1
   12aaa:	e7d8      	b.n	12a5e <att_write_rsp.constprop.0+0x72>
   12aac:	0001eecf 	.word	0x0001eecf
   12ab0:	0001f13f 	.word	0x0001f13f

00012ab4 <bt_att_create_pdu>:
{
   12ab4:	b570      	push	{r4, r5, r6, lr}
   12ab6:	460e      	mov	r6, r1
   12ab8:	4615      	mov	r5, r2
	att = att_get(conn);
   12aba:	f7ff fbb7 	bl	1222c <att_get>
	if (!att) {
   12abe:	b190      	cbz	r0, 12ae6 <bt_att_create_pdu+0x32>
	return list->head;
   12ac0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12ac2:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12ac4:	b15b      	cbz	r3, 12ade <bt_att_create_pdu+0x2a>
   12ac6:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12aca:	d008      	beq.n	12ade <bt_att_create_pdu+0x2a>
	return node->next;
   12acc:	681b      	ldr	r3, [r3, #0]
   12ace:	b10b      	cbz	r3, 12ad4 <bt_att_create_pdu+0x20>
   12ad0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12ad4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   12ad8:	428a      	cmp	r2, r1
   12ada:	d906      	bls.n	12aea <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12adc:	b95b      	cbnz	r3, 12af6 <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12ade:	2157      	movs	r1, #87	; 0x57
   12ae0:	480a      	ldr	r0, [pc, #40]	; (12b0c <bt_att_create_pdu+0x58>)
   12ae2:	f009 ff59 	bl	1c998 <printk>
}
   12ae6:	2000      	movs	r0, #0
   12ae8:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   12aea:	462a      	mov	r2, r5
   12aec:	4631      	mov	r1, r6
}
   12aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   12af2:	f7ff be85 	b.w	12800 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12af6:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   12afa:	d004      	beq.n	12b06 <bt_att_create_pdu+0x52>
	return node->next;
   12afc:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12b00:	b10c      	cbz	r4, 12b06 <bt_att_create_pdu+0x52>
   12b02:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   12b06:	4618      	mov	r0, r3
   12b08:	4623      	mov	r3, r4
   12b0a:	e7e3      	b.n	12ad4 <bt_att_create_pdu+0x20>
   12b0c:	000251a6 	.word	0x000251a6

00012b10 <att_read_group_req>:
{
   12b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12b14:	898c      	ldrh	r4, [r1, #12]
{
   12b16:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12b18:	3c04      	subs	r4, #4
   12b1a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12b1c:	2c02      	cmp	r4, #2
{
   12b1e:	4608      	mov	r0, r1
   12b20:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12b22:	d001      	beq.n	12b28 <att_read_group_req+0x18>
   12b24:	2c10      	cmp	r4, #16
   12b26:	d16f      	bne.n	12c08 <att_read_group_req+0xf8>
   12b28:	2104      	movs	r1, #4
   12b2a:	3008      	adds	r0, #8
   12b2c:	f004 fe96 	bl	1785c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12b30:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12b34:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12b36:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12b38:	1d01      	adds	r1, r0, #4
   12b3a:	4622      	mov	r2, r4
   12b3c:	4640      	mov	r0, r8
   12b3e:	f00b fcac 	bl	1e49a <bt_uuid_create>
   12b42:	2800      	cmp	r0, #0
   12b44:	d062      	beq.n	12c0c <att_read_group_req+0xfc>
	if (!start || !end) {
   12b46:	2e00      	cmp	r6, #0
   12b48:	d03a      	beq.n	12bc0 <att_read_group_req+0xb0>
   12b4a:	2400      	movs	r4, #0
   12b4c:	2f00      	cmp	r7, #0
   12b4e:	d036      	beq.n	12bbe <att_read_group_req+0xae>
	if (start > end) {
   12b50:	42be      	cmp	r6, r7
   12b52:	d835      	bhi.n	12bc0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12b54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12b58:	4640      	mov	r0, r8
   12b5a:	a901      	add	r1, sp, #4
   12b5c:	f88d 4004 	strb.w	r4, [sp, #4]
   12b60:	f8ad 3006 	strh.w	r3, [sp, #6]
   12b64:	f00b fc6b 	bl	1e43e <bt_uuid_cmp>
   12b68:	2800      	cmp	r0, #0
   12b6a:	d134      	bne.n	12bd6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12b6c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12b6e:	2214      	movs	r2, #20
   12b70:	2100      	movs	r1, #0
   12b72:	a807      	add	r0, sp, #28
   12b74:	f00b fbf3 	bl	1e35e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12b78:	2201      	movs	r2, #1
   12b7a:	2111      	movs	r1, #17
   12b7c:	4620      	mov	r0, r4
   12b7e:	f7ff ff99 	bl	12ab4 <bt_att_create_pdu>
   12b82:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12b84:	2800      	cmp	r0, #0
   12b86:	d041      	beq.n	12c0c <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12b88:	2101      	movs	r1, #1
   12b8a:	3008      	adds	r0, #8
	data.uuid = uuid;
   12b8c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12b90:	f004 fe82 	bl	17898 <net_buf_simple_add>
	data.rsp->len = 0U;
   12b94:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12b98:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12b9a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12b9c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12ba0:	4639      	mov	r1, r7
   12ba2:	4630      	mov	r0, r6
   12ba4:	4a1a      	ldr	r2, [pc, #104]	; (12c10 <att_read_group_req+0x100>)
	data.group = NULL;
   12ba6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12baa:	f00c f929 	bl	1ee00 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12bb0:	781c      	ldrb	r4, [r3, #0]
   12bb2:	bb1c      	cbnz	r4, 12bfc <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
   12bb6:	f004 fd59 	bl	1766c <net_buf_unref>
	if (!req) {
   12bba:	230a      	movs	r3, #10
   12bbc:	e018      	b.n	12bf0 <att_read_group_req+0xe0>
			*err = 0U;
   12bbe:	463e      	mov	r6, r7
	if (!req) {
   12bc0:	2301      	movs	r3, #1
   12bc2:	4632      	mov	r2, r6
   12bc4:	2110      	movs	r1, #16
   12bc6:	4628      	mov	r0, r5
   12bc8:	f7ff fe6c 	bl	128a4 <send_err_rsp.part.0>
		return 0;
   12bcc:	2400      	movs	r4, #0
}
   12bce:	4620      	mov	r0, r4
   12bd0:	b00c      	add	sp, #48	; 0x30
   12bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12bd6:	f642 0301 	movw	r3, #10241	; 0x2801
   12bda:	4640      	mov	r0, r8
   12bdc:	a907      	add	r1, sp, #28
   12bde:	f88d 401c 	strb.w	r4, [sp, #28]
   12be2:	f8ad 301e 	strh.w	r3, [sp, #30]
   12be6:	f00b fc2a 	bl	1e43e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12bea:	2800      	cmp	r0, #0
   12bec:	d0be      	beq.n	12b6c <att_read_group_req+0x5c>
	if (!req) {
   12bee:	2310      	movs	r3, #16
   12bf0:	4632      	mov	r2, r6
   12bf2:	2110      	movs	r1, #16
   12bf4:	4628      	mov	r0, r5
   12bf6:	f7ff fe55 	bl	128a4 <send_err_rsp.part.0>
		return 0;
   12bfa:	e7e8      	b.n	12bce <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12bfc:	4628      	mov	r0, r5
   12bfe:	4a05      	ldr	r2, [pc, #20]	; (12c14 <att_read_group_req+0x104>)
   12c00:	9909      	ldr	r1, [sp, #36]	; 0x24
   12c02:	f00c fa74 	bl	1f0ee <bt_att_chan_send_rsp>
	return 0;
   12c06:	e7e1      	b.n	12bcc <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12c08:	2404      	movs	r4, #4
   12c0a:	e7e0      	b.n	12bce <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12c0c:	240e      	movs	r4, #14
   12c0e:	e7de      	b.n	12bce <att_read_group_req+0xbe>
   12c10:	000124c5 	.word	0x000124c5
   12c14:	0001f13f 	.word	0x0001f13f

00012c18 <att_read_mult_req>:
{
   12c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12c1c:	6886      	ldr	r6, [r0, #8]
{
   12c1e:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12c20:	2210      	movs	r2, #16
{
   12c22:	4604      	mov	r4, r0
   12c24:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12c26:	4668      	mov	r0, sp
   12c28:	2100      	movs	r1, #0
   12c2a:	f00b fb98 	bl	1e35e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12c2e:	2200      	movs	r2, #0
   12c30:	210f      	movs	r1, #15
   12c32:	4630      	mov	r0, r6
   12c34:	f7ff ff3e 	bl	12ab4 <bt_att_create_pdu>
   12c38:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12c3a:	b360      	cbz	r0, 12c96 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12c3c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12c40:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12c9c <att_read_mult_req+0x84>
	data.chan = chan;
   12c44:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12c46:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12c4a:	89ab      	ldrh	r3, [r5, #12]
   12c4c:	2b01      	cmp	r3, #1
   12c4e:	d805      	bhi.n	12c5c <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c50:	4620      	mov	r0, r4
   12c52:	4a13      	ldr	r2, [pc, #76]	; (12ca0 <att_read_mult_req+0x88>)
   12c54:	9902      	ldr	r1, [sp, #8]
   12c56:	f00c fa4a 	bl	1f0ee <bt_att_chan_send_rsp>
   12c5a:	e018      	b.n	12c8e <att_read_mult_req+0x76>
   12c5c:	4638      	mov	r0, r7
   12c5e:	f00d fccf 	bl	20600 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12c62:	466b      	mov	r3, sp
   12c64:	464a      	mov	r2, r9
   12c66:	4601      	mov	r1, r0
   12c68:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12c6a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12c6e:	f00c f8c7 	bl	1ee00 <bt_gatt_foreach_attr>
		if (data.err) {
   12c72:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12c76:	2b00      	cmp	r3, #0
   12c78:	d0e7      	beq.n	12c4a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12c7a:	9802      	ldr	r0, [sp, #8]
   12c7c:	f004 fcf6 	bl	1766c <net_buf_unref>
	if (!req) {
   12c80:	4632      	mov	r2, r6
   12c82:	210e      	movs	r1, #14
   12c84:	4620      	mov	r0, r4
   12c86:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12c8a:	f7ff fe0b 	bl	128a4 <send_err_rsp.part.0>
	return 0;
   12c8e:	2000      	movs	r0, #0
}
   12c90:	b005      	add	sp, #20
   12c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12c96:	200e      	movs	r0, #14
   12c98:	e7fa      	b.n	12c90 <att_read_mult_req+0x78>
   12c9a:	bf00      	nop
   12c9c:	0001f167 	.word	0x0001f167
   12ca0:	0001f13f 	.word	0x0001f13f

00012ca4 <att_read_rsp>:
{
   12ca4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12ca8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12cac:	4605      	mov	r5, r0
   12cae:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12cb0:	4640      	mov	r0, r8
   12cb2:	2101      	movs	r1, #1
{
   12cb4:	4614      	mov	r4, r2
   12cb6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12cb8:	f00c ff65 	bl	1fb86 <bt_gatt_change_aware>
   12cbc:	b390      	cbz	r0, 12d24 <att_read_rsp+0x80>
	if (!handle) {
   12cbe:	b39e      	cbz	r6, 12d28 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12cc0:	2210      	movs	r2, #16
   12cc2:	2100      	movs	r1, #0
   12cc4:	4668      	mov	r0, sp
   12cc6:	f00b fb4a 	bl	1e35e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12cca:	2200      	movs	r2, #0
   12ccc:	4621      	mov	r1, r4
   12cce:	4640      	mov	r0, r8
   12cd0:	f7ff fef0 	bl	12ab4 <bt_att_create_pdu>
   12cd4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12cd6:	b348      	cbz	r0, 12d2c <att_read_rsp+0x88>
	data.offset = offset;
   12cd8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12cdc:	4631      	mov	r1, r6
	data.offset = offset;
   12cde:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12ce2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12ce4:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12ce6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12cea:	4a11      	ldr	r2, [pc, #68]	; (12d30 <att_read_rsp+0x8c>)
   12cec:	466b      	mov	r3, sp
	data.chan = chan;
   12cee:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12cf0:	f00c f886 	bl	1ee00 <bt_gatt_foreach_attr>
	if (data.err) {
   12cf4:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12cf8:	b174      	cbz	r4, 12d18 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12cfa:	9802      	ldr	r0, [sp, #8]
   12cfc:	f004 fcb6 	bl	1766c <net_buf_unref>
	if (!req) {
   12d00:	4632      	mov	r2, r6
   12d02:	4639      	mov	r1, r7
   12d04:	4628      	mov	r0, r5
   12d06:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12d0a:	f7ff fdcb 	bl	128a4 <send_err_rsp.part.0>
		return 0;
   12d0e:	2400      	movs	r4, #0
}
   12d10:	4620      	mov	r0, r4
   12d12:	b004      	add	sp, #16
   12d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d18:	4628      	mov	r0, r5
   12d1a:	4a06      	ldr	r2, [pc, #24]	; (12d34 <att_read_rsp+0x90>)
   12d1c:	9902      	ldr	r1, [sp, #8]
   12d1e:	f00c f9e6 	bl	1f0ee <bt_att_chan_send_rsp>
	return 0;
   12d22:	e7f5      	b.n	12d10 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12d24:	2412      	movs	r4, #18
   12d26:	e7f3      	b.n	12d10 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12d28:	2401      	movs	r4, #1
   12d2a:	e7f1      	b.n	12d10 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12d2c:	240e      	movs	r4, #14
   12d2e:	e7ef      	b.n	12d10 <att_read_rsp+0x6c>
   12d30:	0001f167 	.word	0x0001f167
   12d34:	0001f13f 	.word	0x0001f13f

00012d38 <att_read_type_req>:
{
   12d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12d3c:	898c      	ldrh	r4, [r1, #12]
{
   12d3e:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12d40:	3c04      	subs	r4, #4
   12d42:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12d44:	2c02      	cmp	r4, #2
{
   12d46:	4608      	mov	r0, r1
   12d48:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12d4a:	d001      	beq.n	12d50 <att_read_type_req+0x18>
   12d4c:	2c10      	cmp	r4, #16
   12d4e:	d150      	bne.n	12df2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12d50:	2104      	movs	r1, #4
   12d52:	3008      	adds	r0, #8
   12d54:	f004 fd82 	bl	1785c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12d58:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12d5c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12d5e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12d60:	1d01      	adds	r1, r0, #4
   12d62:	4622      	mov	r2, r4
   12d64:	4640      	mov	r0, r8
   12d66:	f00b fb98 	bl	1e49a <bt_uuid_create>
   12d6a:	b188      	cbz	r0, 12d90 <att_read_type_req+0x58>
	if (!start || !end) {
   12d6c:	b19e      	cbz	r6, 12d96 <att_read_type_req+0x5e>
   12d6e:	b18f      	cbz	r7, 12d94 <att_read_type_req+0x5c>
	if (start > end) {
   12d70:	42b7      	cmp	r7, r6
   12d72:	d310      	bcc.n	12d96 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12d74:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12d76:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12d78:	2100      	movs	r1, #0
   12d7a:	eb0d 0002 	add.w	r0, sp, r2
   12d7e:	f00b faee 	bl	1e35e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12d82:	2201      	movs	r2, #1
   12d84:	2109      	movs	r1, #9
   12d86:	4620      	mov	r0, r4
   12d88:	f7ff fe94 	bl	12ab4 <bt_att_create_pdu>
   12d8c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12d8e:	b968      	cbnz	r0, 12dac <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12d90:	240e      	movs	r4, #14
   12d92:	e007      	b.n	12da4 <att_read_type_req+0x6c>
			*err = 0U;
   12d94:	463e      	mov	r6, r7
	if (!req) {
   12d96:	2301      	movs	r3, #1
   12d98:	4632      	mov	r2, r6
   12d9a:	2108      	movs	r1, #8
   12d9c:	4628      	mov	r0, r5
   12d9e:	f7ff fd81 	bl	128a4 <send_err_rsp.part.0>
		return 0;
   12da2:	2400      	movs	r4, #0
}
   12da4:	4620      	mov	r0, r4
   12da6:	b00c      	add	sp, #48	; 0x30
   12da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12dac:	2101      	movs	r1, #1
   12dae:	3008      	adds	r0, #8
	data.uuid = uuid;
   12db0:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12db4:	f004 fd70 	bl	17898 <net_buf_simple_add>
	data.rsp->len = 0U;
   12db8:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12dbc:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12dbe:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12dc0:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12dc2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12dc6:	4a0c      	ldr	r2, [pc, #48]	; (12df8 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12dc8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12dcc:	4630      	mov	r0, r6
   12dce:	ab06      	add	r3, sp, #24
   12dd0:	f00c f816 	bl	1ee00 <bt_gatt_foreach_attr>
	if (data.err) {
   12dd4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12dd8:	b12c      	cbz	r4, 12de6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12dda:	9808      	ldr	r0, [sp, #32]
   12ddc:	f004 fc46 	bl	1766c <net_buf_unref>
	if (!req) {
   12de0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12de4:	e7d8      	b.n	12d98 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12de6:	4628      	mov	r0, r5
   12de8:	4a04      	ldr	r2, [pc, #16]	; (12dfc <att_read_type_req+0xc4>)
   12dea:	9908      	ldr	r1, [sp, #32]
   12dec:	f00c f97f 	bl	1f0ee <bt_att_chan_send_rsp>
	return 0;
   12df0:	e7d8      	b.n	12da4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12df2:	2404      	movs	r4, #4
   12df4:	e7d6      	b.n	12da4 <att_read_type_req+0x6c>
   12df6:	bf00      	nop
   12df8:	000126d5 	.word	0x000126d5
   12dfc:	0001f13f 	.word	0x0001f13f

00012e00 <att_find_type_req>:
{
   12e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e04:	4688      	mov	r8, r1
   12e06:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12e08:	2106      	movs	r1, #6
   12e0a:	b086      	sub	sp, #24
   12e0c:	f108 0008 	add.w	r0, r8, #8
   12e10:	f004 fd24 	bl	1785c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12e14:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12e16:	b317      	cbz	r7, 12e5e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12e18:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12e1c:	f1b9 0f00 	cmp.w	r9, #0
   12e20:	d01c      	beq.n	12e5c <att_find_type_req+0x5c>
	if (start > end) {
   12e22:	454f      	cmp	r7, r9
   12e24:	d81b      	bhi.n	12e5e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12e26:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12e28:	2400      	movs	r4, #0
   12e2a:	f8ad 3002 	strh.w	r3, [sp, #2]
   12e2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12e32:	4668      	mov	r0, sp
   12e34:	a901      	add	r1, sp, #4
	value = buf->data;
   12e36:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12e3a:	f88d 4000 	strb.w	r4, [sp]
   12e3e:	f88d 4004 	strb.w	r4, [sp, #4]
   12e42:	f8ad 3006 	strh.w	r3, [sp, #6]
   12e46:	f00b fafa 	bl	1e43e <bt_uuid_cmp>
   12e4a:	4606      	mov	r6, r0
   12e4c:	b190      	cbz	r0, 12e74 <att_find_type_req+0x74>
	if (!req) {
   12e4e:	230a      	movs	r3, #10
   12e50:	463a      	mov	r2, r7
   12e52:	2106      	movs	r1, #6
   12e54:	4628      	mov	r0, r5
   12e56:	f7ff fd25 	bl	128a4 <send_err_rsp.part.0>
		return 0;
   12e5a:	e007      	b.n	12e6c <att_find_type_req+0x6c>
			*err = 0U;
   12e5c:	464f      	mov	r7, r9
	if (!req) {
   12e5e:	2301      	movs	r3, #1
   12e60:	463a      	mov	r2, r7
   12e62:	2106      	movs	r1, #6
   12e64:	4628      	mov	r0, r5
   12e66:	f7ff fd1d 	bl	128a4 <send_err_rsp.part.0>
		return 0;
   12e6a:	2400      	movs	r4, #0
}
   12e6c:	4620      	mov	r0, r4
   12e6e:	b006      	add	sp, #24
   12e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12e74:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12e78:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12e7c:	4601      	mov	r1, r0
   12e7e:	2214      	movs	r2, #20
   12e80:	a801      	add	r0, sp, #4
   12e82:	f00b fa6c 	bl	1e35e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12e86:	4632      	mov	r2, r6
   12e88:	2107      	movs	r1, #7
   12e8a:	4640      	mov	r0, r8
   12e8c:	f7ff fe12 	bl	12ab4 <bt_att_create_pdu>
   12e90:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12e92:	b1e0      	cbz	r0, 12ece <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12e94:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12e96:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12e98:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12e9c:	4638      	mov	r0, r7
   12e9e:	4a0d      	ldr	r2, [pc, #52]	; (12ed4 <att_find_type_req+0xd4>)
   12ea0:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12ea2:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12ea6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12eaa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12eac:	f00b ffa8 	bl	1ee00 <bt_gatt_foreach_attr>
	if (data.err) {
   12eb0:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12eb4:	b12c      	cbz	r4, 12ec2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12eb6:	9802      	ldr	r0, [sp, #8]
   12eb8:	f004 fbd8 	bl	1766c <net_buf_unref>
	if (!req) {
   12ebc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12ec0:	e7ce      	b.n	12e60 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12ec2:	4628      	mov	r0, r5
   12ec4:	4a04      	ldr	r2, [pc, #16]	; (12ed8 <att_find_type_req+0xd8>)
   12ec6:	9902      	ldr	r1, [sp, #8]
   12ec8:	f00c f911 	bl	1f0ee <bt_att_chan_send_rsp>
	return 0;
   12ecc:	e7ce      	b.n	12e6c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12ece:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12ed0:	e7cc      	b.n	12e6c <att_find_type_req+0x6c>
   12ed2:	bf00      	nop
   12ed4:	00012295 	.word	0x00012295
   12ed8:	0001f13f 	.word	0x0001f13f

00012edc <att_find_info_req>:
{
   12edc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12ede:	688b      	ldr	r3, [r1, #8]
{
   12ee0:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   12ee2:	881e      	ldrh	r6, [r3, #0]
{
   12ee4:	b085      	sub	sp, #20
	if (!start || !end) {
   12ee6:	b19e      	cbz	r6, 12f10 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12ee8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   12eea:	b184      	cbz	r4, 12f0e <att_find_info_req+0x32>
	if (start > end) {
   12eec:	42b4      	cmp	r4, r6
   12eee:	d30f      	bcc.n	12f10 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12ef0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12ef2:	2210      	movs	r2, #16
   12ef4:	2100      	movs	r1, #0
   12ef6:	4668      	mov	r0, sp
   12ef8:	f00b fa31 	bl	1e35e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12efc:	2200      	movs	r2, #0
   12efe:	2105      	movs	r1, #5
   12f00:	4638      	mov	r0, r7
   12f02:	f7ff fdd7 	bl	12ab4 <bt_att_create_pdu>
   12f06:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12f08:	b958      	cbnz	r0, 12f22 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12f0a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12f0c:	e007      	b.n	12f1e <att_find_info_req+0x42>
			*err = 0U;
   12f0e:	4626      	mov	r6, r4
	if (!req) {
   12f10:	2301      	movs	r3, #1
   12f12:	4632      	mov	r2, r6
   12f14:	2104      	movs	r1, #4
   12f16:	4628      	mov	r0, r5
   12f18:	f7ff fcc4 	bl	128a4 <send_err_rsp.part.0>
	return 0;
   12f1c:	2000      	movs	r0, #0
}
   12f1e:	b005      	add	sp, #20
   12f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12f22:	4621      	mov	r1, r4
   12f24:	466b      	mov	r3, sp
   12f26:	4630      	mov	r0, r6
   12f28:	4a08      	ldr	r2, [pc, #32]	; (12f4c <att_find_info_req+0x70>)
	data.chan = chan;
   12f2a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12f2c:	f00b ff68 	bl	1ee00 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12f30:	9c02      	ldr	r4, [sp, #8]
   12f32:	b924      	cbnz	r4, 12f3e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12f34:	9801      	ldr	r0, [sp, #4]
   12f36:	f004 fb99 	bl	1766c <net_buf_unref>
	if (!req) {
   12f3a:	230a      	movs	r3, #10
   12f3c:	e7e9      	b.n	12f12 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12f3e:	4628      	mov	r0, r5
   12f40:	4a03      	ldr	r2, [pc, #12]	; (12f50 <att_find_info_req+0x74>)
   12f42:	9901      	ldr	r1, [sp, #4]
   12f44:	f00c f8d3 	bl	1f0ee <bt_att_chan_send_rsp>
   12f48:	e7e8      	b.n	12f1c <att_find_info_req+0x40>
   12f4a:	bf00      	nop
   12f4c:	0001ee17 	.word	0x0001ee17
   12f50:	0001f13f 	.word	0x0001f13f

00012f54 <att_mtu_req>:
{
   12f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   12f56:	4603      	mov	r3, r0
   12f58:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12f5c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12f5e:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f60:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12f64:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12f68:	071b      	lsls	r3, r3, #28
   12f6a:	d41e      	bmi.n	12faa <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12f6c:	688b      	ldr	r3, [r1, #8]
   12f6e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12f70:	2e16      	cmp	r6, #22
   12f72:	d91c      	bls.n	12fae <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12f74:	2202      	movs	r2, #2
   12f76:	2103      	movs	r1, #3
   12f78:	f7ff fd9c 	bl	12ab4 <bt_att_create_pdu>
	if (!pdu) {
   12f7c:	4607      	mov	r7, r0
   12f7e:	b1c0      	cbz	r0, 12fb2 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   12f80:	2102      	movs	r1, #2
   12f82:	3008      	adds	r0, #8
   12f84:	f004 fc88 	bl	17898 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   12f88:	2341      	movs	r3, #65	; 0x41
   12f8a:	7044      	strb	r4, [r0, #1]
   12f8c:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12f8e:	4639      	mov	r1, r7
   12f90:	4628      	mov	r0, r5
   12f92:	4a09      	ldr	r2, [pc, #36]	; (12fb8 <att_mtu_req+0x64>)
   12f94:	f00c f8ab 	bl	1f0ee <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12f98:	2e41      	cmp	r6, #65	; 0x41
   12f9a:	bf28      	it	cs
   12f9c:	2641      	movcs	r6, #65	; 0x41
	return 0;
   12f9e:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12fa0:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12fa4:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
}
   12fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   12faa:	2006      	movs	r0, #6
   12fac:	e7fc      	b.n	12fa8 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   12fae:	2004      	movs	r0, #4
   12fb0:	e7fa      	b.n	12fa8 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   12fb2:	200e      	movs	r0, #14
   12fb4:	e7f8      	b.n	12fa8 <att_mtu_req+0x54>
   12fb6:	bf00      	nop
   12fb8:	0001f13f 	.word	0x0001f13f

00012fbc <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12fbc:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   12fbe:	2400      	movs	r4, #0
{
   12fc0:	4602      	mov	r2, r0
   12fc2:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12fc4:	4807      	ldr	r0, [pc, #28]	; (12fe4 <bt_att_req_alloc+0x28>)
   12fc6:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12fc8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12fca:	f006 ffc9 	bl	19f60 <k_mem_slab_alloc>
   12fce:	4601      	mov	r1, r0
   12fd0:	b930      	cbnz	r0, 12fe0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12fd2:	221c      	movs	r2, #28
   12fd4:	9801      	ldr	r0, [sp, #4]
   12fd6:	f00b f9c2 	bl	1e35e <memset>

	return req;
   12fda:	9801      	ldr	r0, [sp, #4]
}
   12fdc:	b002      	add	sp, #8
   12fde:	bd10      	pop	{r4, pc}
		return NULL;
   12fe0:	4620      	mov	r0, r4
   12fe2:	e7fb      	b.n	12fdc <bt_att_req_alloc+0x20>
   12fe4:	200084f0 	.word	0x200084f0

00012fe8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12fe8:	b507      	push	{r0, r1, r2, lr}
   12fea:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   12fec:	a901      	add	r1, sp, #4
   12fee:	4803      	ldr	r0, [pc, #12]	; (12ffc <bt_att_req_free+0x14>)
   12ff0:	f007 f810 	bl	1a014 <k_mem_slab_free>
}
   12ff4:	b003      	add	sp, #12
   12ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   12ffa:	bf00      	nop
   12ffc:	200084f0 	.word	0x200084f0

00013000 <att_handle_rsp>:
{
   13000:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13004:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   13006:	30f0      	adds	r0, #240	; 0xf0
{
   13008:	460f      	mov	r7, r1
   1300a:	4690      	mov	r8, r2
   1300c:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   1300e:	f008 fdd5 	bl	1bbbc <k_delayed_work_cancel>
	if (!chan->req) {
   13012:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   13016:	f04f 0a00 	mov.w	sl, #0
   1301a:	b99d      	cbnz	r5, 13044 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   1301c:	2157      	movs	r1, #87	; 0x57
   1301e:	4818      	ldr	r0, [pc, #96]	; (13080 <att_handle_rsp+0x80>)
   13020:	f009 fcba 	bl	1c998 <printk>
	att_req_send_process(chan->att);
   13024:	6820      	ldr	r0, [r4, #0]
   13026:	f00c f906 	bl	1f236 <att_req_send_process>
	if (func) {
   1302a:	b13d      	cbz	r5, 1303c <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   1302c:	6820      	ldr	r0, [r4, #0]
   1302e:	f8cd 9000 	str.w	r9, [sp]
   13032:	4643      	mov	r3, r8
   13034:	463a      	mov	r2, r7
   13036:	4631      	mov	r1, r6
   13038:	6800      	ldr	r0, [r0, #0]
   1303a:	47a8      	blx	r5
}
   1303c:	2000      	movs	r0, #0
   1303e:	b002      	add	sp, #8
   13040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   13044:	4b0f      	ldr	r3, [pc, #60]	; (13084 <att_handle_rsp+0x84>)
   13046:	429d      	cmp	r5, r3
   13048:	d103      	bne.n	13052 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   1304a:	4655      	mov	r5, sl
		chan->req = NULL;
   1304c:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   13050:	e7e8      	b.n	13024 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   13052:	6928      	ldr	r0, [r5, #16]
   13054:	b128      	cbz	r0, 13062 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   13056:	f004 fb09 	bl	1766c <net_buf_unref>
		chan->req->buf = NULL;
   1305a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1305e:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   13062:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   13066:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1306a:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1306c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   13070:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(chan->req);
   13074:	f00c f96c 	bl	1f350 <att_req_destroy>
	chan->req = NULL;
   13078:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   1307c:	e7d2      	b.n	13024 <att_handle_rsp+0x24>
   1307e:	bf00      	nop
   13080:	000251c6 	.word	0x000251c6
   13084:	20009c50 	.word	0x20009c50

00013088 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   13088:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
{
   1308c:	b570      	push	{r4, r5, r6, lr}
   1308e:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   13090:	b352      	cbz	r2, 130e8 <att_error_rsp+0x60>
   13092:	4b1a      	ldr	r3, [pc, #104]	; (130fc <att_error_rsp+0x74>)
   13094:	429a      	cmp	r2, r3
   13096:	d027      	beq.n	130e8 <att_error_rsp+0x60>
	if (chan->req->buf) {
   13098:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
   1309a:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
   1309c:	b12b      	cbz	r3, 130aa <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
   1309e:	8996      	ldrh	r6, [r2, #12]
   130a0:	6919      	ldr	r1, [r3, #16]
   130a2:	89d5      	ldrh	r5, [r2, #14]
   130a4:	4431      	add	r1, r6
   130a6:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
   130a8:	819d      	strh	r5, [r3, #12]
	if (chan->req->retrying) {
   130aa:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
   130ac:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
   130ae:	b9e3      	cbnz	r3, 130ea <att_error_rsp+0x62>
	switch (err) {
   130b0:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   130b2:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
   130b4:	d006      	beq.n	130c4 <att_error_rsp+0x3c>
   130b6:	2d0f      	cmp	r5, #15
   130b8:	d117      	bne.n	130ea <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
   130ba:	7a43      	ldrb	r3, [r0, #9]
   130bc:	2b01      	cmp	r3, #1
   130be:	d814      	bhi.n	130ea <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
   130c0:	2102      	movs	r1, #2
   130c2:	e007      	b.n	130d4 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
   130c4:	7a43      	ldrb	r3, [r0, #9]
   130c6:	2b01      	cmp	r3, #1
   130c8:	d9fa      	bls.n	130c0 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   130ca:	2b02      	cmp	r3, #2
   130cc:	d00a      	beq.n	130e4 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   130ce:	2b03      	cmp	r3, #3
   130d0:	d10b      	bne.n	130ea <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
   130d2:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   130d4:	f00b fcb2 	bl	1ea3c <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   130d8:	b938      	cbnz	r0, 130ea <att_error_rsp+0x62>
		chan->req->retrying = true;
   130da:	2201      	movs	r2, #1
   130dc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   130e0:	751a      	strb	r2, [r3, #20]
}
   130e2:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   130e4:	2103      	movs	r1, #3
   130e6:	e7f5      	b.n	130d4 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
   130e8:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   130ea:	2200      	movs	r2, #0
   130ec:	462b      	mov	r3, r5
   130ee:	4620      	mov	r0, r4
}
   130f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   130f4:	4611      	mov	r1, r2
   130f6:	f7ff bf83 	b.w	13000 <att_handle_rsp>
   130fa:	bf00      	nop
   130fc:	20009c50 	.word	0x20009c50

00013100 <att_reset>:
{
   13100:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13102:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   13104:	9803      	ldr	r0, [sp, #12]
   13106:	2200      	movs	r2, #0
   13108:	2300      	movs	r3, #0
   1310a:	300c      	adds	r0, #12
   1310c:	f004 fa2c 	bl	17568 <net_buf_get>
   13110:	b948      	cbnz	r0, 13126 <att_reset+0x26>
	att->conn = NULL;
   13112:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   13114:	6854      	ldr	r4, [r2, #4]
   13116:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13118:	b944      	cbnz	r4, 1312c <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   1311a:	480d      	ldr	r0, [pc, #52]	; (13150 <att_reset+0x50>)
   1311c:	a903      	add	r1, sp, #12
   1311e:	f006 ff79 	bl	1a014 <k_mem_slab_free>
}
   13122:	b004      	add	sp, #16
   13124:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   13126:	f004 faa1 	bl	1766c <net_buf_unref>
   1312a:	e7eb      	b.n	13104 <att_reset+0x4>
	return node->next;
   1312c:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   1312e:	6866      	ldr	r6, [r4, #4]
   13130:	b136      	cbz	r6, 13140 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   13132:	69a3      	ldr	r3, [r4, #24]
   13134:	210e      	movs	r1, #14
   13136:	9300      	str	r3, [sp, #0]
   13138:	2300      	movs	r3, #0
   1313a:	461a      	mov	r2, r3
   1313c:	4618      	mov	r0, r3
   1313e:	47b0      	blx	r6
		att_req_destroy(req);
   13140:	4620      	mov	r0, r4
   13142:	f00c f905 	bl	1f350 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13146:	2d00      	cmp	r5, #0
   13148:	d0e7      	beq.n	1311a <att_reset+0x1a>
   1314a:	462c      	mov	r4, r5
   1314c:	682d      	ldr	r5, [r5, #0]
   1314e:	e7ee      	b.n	1312e <att_reset+0x2e>
   13150:	200084b8 	.word	0x200084b8

00013154 <att_timeout>:
{
   13154:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   13156:	4605      	mov	r5, r0
   13158:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   1315c:	2145      	movs	r1, #69	; 0x45
{
   1315e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   13160:	4808      	ldr	r0, [pc, #32]	; (13184 <att_timeout+0x30>)
   13162:	f009 fc19 	bl	1c998 <printk>
	att_chan_detach(chan);
   13166:	4628      	mov	r0, r5
   13168:	f00c f960 	bl	1f42c <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1316c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1316e:	b945      	cbnz	r5, 13182 <att_timeout+0x2e>
	att_reset(att);
   13170:	4630      	mov	r0, r6
   13172:	f7ff ffc5 	bl	13100 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   13176:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   1317a:	f002 f869 	bl	15250 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1317e:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   13182:	bd70      	pop	{r4, r5, r6, pc}
   13184:	000251e2 	.word	0x000251e2

00013188 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1318c:	460c      	mov	r4, r1
   1318e:	4617      	mov	r7, r2
   13190:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   13192:	4605      	mov	r5, r0
   13194:	b950      	cbnz	r0, 131ac <bt_att_send+0x24>
   13196:	492e      	ldr	r1, [pc, #184]	; (13250 <bt_att_send+0xc8>)
   13198:	482e      	ldr	r0, [pc, #184]	; (13254 <bt_att_send+0xcc>)
   1319a:	f640 32ce 	movw	r2, #3022	; 0xbce
   1319e:	f009 fbfb 	bl	1c998 <printk>
   131a2:	f640 31ce 	movw	r1, #3022	; 0xbce
   131a6:	482a      	ldr	r0, [pc, #168]	; (13250 <bt_att_send+0xc8>)
   131a8:	f009 fe9c 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   131ac:	b954      	cbnz	r4, 131c4 <bt_att_send+0x3c>
   131ae:	4928      	ldr	r1, [pc, #160]	; (13250 <bt_att_send+0xc8>)
   131b0:	4828      	ldr	r0, [pc, #160]	; (13254 <bt_att_send+0xcc>)
   131b2:	f640 32cf 	movw	r2, #3023	; 0xbcf
   131b6:	f009 fbef 	bl	1c998 <printk>
   131ba:	f640 31cf 	movw	r1, #3023	; 0xbcf
   131be:	4824      	ldr	r0, [pc, #144]	; (13250 <bt_att_send+0xc8>)
   131c0:	f009 fe90 	bl	1cee4 <assert_post_action>

	att = att_get(conn);
   131c4:	4628      	mov	r0, r5
   131c6:	f7ff f831 	bl	1222c <att_get>
	if (!att) {
   131ca:	4606      	mov	r6, r0
   131cc:	b938      	cbnz	r0, 131de <bt_att_send+0x56>
		net_buf_unref(buf);
   131ce:	4620      	mov	r0, r4
   131d0:	f004 fa4c 	bl	1766c <net_buf_unref>
		return -ENOTCONN;
   131d4:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   131d8:	b002      	add	sp, #8
   131da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   131de:	b147      	cbz	r7, 131f2 <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   131e0:	463b      	mov	r3, r7
   131e2:	4622      	mov	r2, r4
   131e4:	2104      	movs	r1, #4
   131e6:	4628      	mov	r0, r5
   131e8:	f8cd 8000 	str.w	r8, [sp]
   131ec:	f00b fd47 	bl	1ec7e <bt_l2cap_send_cb>
   131f0:	e7f2      	b.n	131d8 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   131f2:	f100 070c 	add.w	r7, r0, #12
   131f6:	4621      	mov	r1, r4
   131f8:	4638      	mov	r0, r7
   131fa:	f004 fa09 	bl	17610 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   131fe:	2200      	movs	r2, #0
   13200:	2300      	movs	r3, #0
   13202:	4638      	mov	r0, r7
   13204:	f004 f9b0 	bl	17568 <net_buf_get>
	if (!buf) {
   13208:	4605      	mov	r5, r0
   1320a:	b908      	cbnz	r0, 13210 <bt_att_send+0x88>
	return 0;
   1320c:	2000      	movs	r0, #0
   1320e:	e7e3      	b.n	131d8 <bt_att_send+0x50>
	return list->head;
   13210:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13212:	b1c3      	cbz	r3, 13246 <bt_att_send+0xbe>
   13214:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   13218:	d015      	beq.n	13246 <bt_att_send+0xbe>
	return node->next;
   1321a:	681c      	ldr	r4, [r3, #0]
   1321c:	b10c      	cbz	r4, 13222 <bt_att_send+0x9a>
   1321e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   13222:	2200      	movs	r2, #0
   13224:	4629      	mov	r1, r5
   13226:	f00b ff4b 	bl	1f0c0 <bt_att_chan_send>
		if (err >= 0) {
   1322a:	2800      	cmp	r0, #0
   1322c:	daee      	bge.n	1320c <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1322e:	b154      	cbz	r4, 13246 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13230:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   13234:	d004      	beq.n	13240 <bt_att_send+0xb8>
	return node->next;
   13236:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1323a:	b10b      	cbz	r3, 13240 <bt_att_send+0xb8>
   1323c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   13240:	4620      	mov	r0, r4
   13242:	461c      	mov	r4, r3
   13244:	e7ed      	b.n	13222 <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   13246:	4629      	mov	r1, r5
   13248:	4638      	mov	r0, r7
   1324a:	f00e f8c0 	bl	213ce <k_queue_prepend>
   1324e:	e7dd      	b.n	1320c <bt_att_send+0x84>
   13250:	000250a5 	.word	0x000250a5
   13254:	00022dd6 	.word	0x00022dd6

00013258 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   13258:	b538      	push	{r3, r4, r5, lr}
   1325a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1325c:	4605      	mov	r5, r0
   1325e:	b950      	cbnz	r0, 13276 <bt_att_req_send+0x1e>
   13260:	4918      	ldr	r1, [pc, #96]	; (132c4 <bt_att_req_send+0x6c>)
   13262:	4819      	ldr	r0, [pc, #100]	; (132c8 <bt_att_req_send+0x70>)
   13264:	f640 32eb 	movw	r2, #3051	; 0xbeb
   13268:	f009 fb96 	bl	1c998 <printk>
   1326c:	f640 31eb 	movw	r1, #3051	; 0xbeb
   13270:	4814      	ldr	r0, [pc, #80]	; (132c4 <bt_att_req_send+0x6c>)
   13272:	f009 fe37 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(req);
   13276:	b954      	cbnz	r4, 1328e <bt_att_req_send+0x36>
   13278:	4912      	ldr	r1, [pc, #72]	; (132c4 <bt_att_req_send+0x6c>)
   1327a:	4813      	ldr	r0, [pc, #76]	; (132c8 <bt_att_req_send+0x70>)
   1327c:	f640 32ec 	movw	r2, #3052	; 0xbec
   13280:	f009 fb8a 	bl	1c998 <printk>
   13284:	f640 31ec 	movw	r1, #3052	; 0xbec
   13288:	480e      	ldr	r0, [pc, #56]	; (132c4 <bt_att_req_send+0x6c>)
   1328a:	f009 fe2b 	bl	1cee4 <assert_post_action>

	att = att_get(conn);
   1328e:	4628      	mov	r0, r5
   13290:	f7fe ffcc 	bl	1222c <att_get>
	if (!att) {
   13294:	4605      	mov	r5, r0
   13296:	b930      	cbnz	r0, 132a6 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   13298:	6920      	ldr	r0, [r4, #16]
   1329a:	f004 f9e7 	bl	1766c <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1329e:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   132a2:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   132a4:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   132a6:	2300      	movs	r3, #0
   132a8:	6023      	str	r3, [r4, #0]
	return list->tail;
   132aa:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   132ac:	b933      	cbnz	r3, 132bc <bt_att_req_send+0x64>
	list->head = node;
   132ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   132b2:	4628      	mov	r0, r5
   132b4:	f00b ffbf 	bl	1f236 <att_req_send_process>
	return 0;
   132b8:	2000      	movs	r0, #0
   132ba:	e7f3      	b.n	132a4 <bt_att_req_send+0x4c>
	parent->next = child;
   132bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   132be:	6084      	str	r4, [r0, #8]
}
   132c0:	e7f7      	b.n	132b2 <bt_att_req_send+0x5a>
   132c2:	bf00      	nop
   132c4:	000250a5 	.word	0x000250a5
   132c8:	00022dd6 	.word	0x00022dd6

000132cc <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   132cc:	b510      	push	{r4, lr}
   132ce:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   132d0:	b350      	cbz	r0, 13328 <bt_att_req_cancel+0x5c>
   132d2:	b349      	cbz	r1, 13328 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   132d4:	f7fe ffaa 	bl	1222c <att_get>
	if (!att) {
   132d8:	b330      	cbz	r0, 13328 <bt_att_req_cancel+0x5c>
	return list->head;
   132da:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   132dc:	b15b      	cbz	r3, 132f6 <bt_att_req_cancel+0x2a>
   132de:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   132e2:	d008      	beq.n	132f6 <bt_att_req_cancel+0x2a>
	return node->next;
   132e4:	681b      	ldr	r3, [r3, #0]
   132e6:	b10b      	cbz	r3, 132ec <bt_att_req_cancel+0x20>
   132e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   132ec:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   132f0:	4294      	cmp	r4, r2
   132f2:	d006      	beq.n	13302 <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   132f4:	b96b      	cbnz	r3, 13312 <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   132f6:	3004      	adds	r0, #4
   132f8:	4621      	mov	r1, r4
   132fa:	f00b fea1 	bl	1f040 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   132fe:	4620      	mov	r0, r4
   13300:	e003      	b.n	1330a <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   13302:	4620      	mov	r0, r4
	chan->req = &cancel;
   13304:	4b09      	ldr	r3, [pc, #36]	; (1332c <bt_att_req_cancel+0x60>)
   13306:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   1330a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   1330e:	f00c b81f 	b.w	1f350 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13312:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   13316:	d004      	beq.n	13322 <bt_att_req_cancel+0x56>
	return node->next;
   13318:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1331c:	b10a      	cbz	r2, 13322 <bt_att_req_cancel+0x56>
   1331e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   13322:	4619      	mov	r1, r3
   13324:	4613      	mov	r3, r2
   13326:	e7e1      	b.n	132ec <bt_att_req_cancel+0x20>
}
   13328:	bd10      	pop	{r4, pc}
   1332a:	bf00      	nop
   1332c:	20009c50 	.word	0x20009c50

00013330 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   13330:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13332:	4618      	mov	r0, r3
{
   13334:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13336:	4907      	ldr	r1, [pc, #28]	; (13354 <db_hash_set+0x24>)
   13338:	2210      	movs	r2, #16
   1333a:	47a0      	blx	r4
	if (len < 0) {
   1333c:	1e04      	subs	r4, r0, #0
   1333e:	da06      	bge.n	1334e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   13340:	4622      	mov	r2, r4
   13342:	2145      	movs	r1, #69	; 0x45
   13344:	4804      	ldr	r0, [pc, #16]	; (13358 <db_hash_set+0x28>)
   13346:	f009 fb27 	bl	1c998 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   1334a:	4620      	mov	r0, r4
   1334c:	bd10      	pop	{r4, pc}
	return 0;
   1334e:	2400      	movs	r4, #0
   13350:	e7fb      	b.n	1334a <db_hash_set+0x1a>
   13352:	bf00      	nop
   13354:	2000b738 	.word	0x2000b738
   13358:	000251fa 	.word	0x000251fa

0001335c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1335c:	2210      	movs	r2, #16
{
   1335e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13360:	4906      	ldr	r1, [pc, #24]	; (1337c <db_hash_store+0x20>)
   13362:	4807      	ldr	r0, [pc, #28]	; (13380 <db_hash_store+0x24>)
   13364:	f7f8 fb6e 	bl	ba44 <settings_save_one>
	if (err) {
   13368:	4602      	mov	r2, r0
   1336a:	b128      	cbz	r0, 13378 <db_hash_store+0x1c>
}
   1336c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   13370:	2145      	movs	r1, #69	; 0x45
   13372:	4804      	ldr	r0, [pc, #16]	; (13384 <db_hash_store+0x28>)
   13374:	f009 bb10 	b.w	1c998 <printk>
}
   13378:	bd08      	pop	{r3, pc}
   1337a:	bf00      	nop
   1337c:	2000b728 	.word	0x2000b728
   13380:	00025220 	.word	0x00025220
   13384:	00025228 	.word	0x00025228

00013388 <find_cf_cfg>:
{
   13388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1338a:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1338c:	2600      	movs	r6, #0
   1338e:	4d0e      	ldr	r5, [pc, #56]	; (133c8 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   13390:	462f      	mov	r7, r5
		if (!conn) {
   13392:	1c6a      	adds	r2, r5, #1
   13394:	b954      	cbnz	r4, 133ac <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13396:	4669      	mov	r1, sp
   13398:	4610      	mov	r0, r2
   1339a:	9400      	str	r4, [sp, #0]
   1339c:	f8cd 4003 	str.w	r4, [sp, #3]
   133a0:	f00c f902 	bl	1f5a8 <bt_addr_le_cmp>
   133a4:	b940      	cbnz	r0, 133b8 <find_cf_cfg+0x30>
}
   133a6:	4638      	mov	r0, r7
   133a8:	b003      	add	sp, #12
   133aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   133ac:	4620      	mov	r0, r4
   133ae:	7829      	ldrb	r1, [r5, #0]
   133b0:	f00b fb77 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   133b4:	2800      	cmp	r0, #0
   133b6:	d1f6      	bne.n	133a6 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   133b8:	3601      	adds	r6, #1
   133ba:	2e04      	cmp	r6, #4
   133bc:	f105 0510 	add.w	r5, r5, #16
   133c0:	d1e6      	bne.n	13390 <find_cf_cfg+0x8>
	return NULL;
   133c2:	2700      	movs	r7, #0
   133c4:	e7ef      	b.n	133a6 <find_cf_cfg+0x1e>
   133c6:	bf00      	nop
   133c8:	20009c6c 	.word	0x20009c6c

000133cc <find_sc_cfg>:
{
   133cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133ce:	4606      	mov	r6, r0
   133d0:	460f      	mov	r7, r1
   133d2:	2400      	movs	r4, #0
   133d4:	4d09      	ldr	r5, [pc, #36]	; (133fc <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   133d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   133da:	42b3      	cmp	r3, r6
   133dc:	d107      	bne.n	133ee <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   133de:	4639      	mov	r1, r7
   133e0:	4628      	mov	r0, r5
   133e2:	f00c f8e1 	bl	1f5a8 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   133e6:	b910      	cbnz	r0, 133ee <find_sc_cfg+0x22>
			return &sc_cfg[i];
   133e8:	4805      	ldr	r0, [pc, #20]	; (13400 <find_sc_cfg+0x34>)
   133ea:	4420      	add	r0, r4
}
   133ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   133ee:	340c      	adds	r4, #12
   133f0:	2c30      	cmp	r4, #48	; 0x30
   133f2:	f105 050c 	add.w	r5, r5, #12
   133f6:	d1ee      	bne.n	133d6 <find_sc_cfg+0xa>
	return NULL;
   133f8:	2000      	movs	r0, #0
   133fa:	e7f7      	b.n	133ec <find_sc_cfg+0x20>
   133fc:	2000b017 	.word	0x2000b017
   13400:	2000b016 	.word	0x2000b016

00013404 <gatt_sub_find>:
{
   13404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13406:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13408:	2600      	movs	r6, #0
   1340a:	4d0e      	ldr	r5, [pc, #56]	; (13444 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   1340c:	462f      	mov	r7, r5
		if (!conn) {
   1340e:	1c6a      	adds	r2, r5, #1
   13410:	b954      	cbnz	r4, 13428 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   13412:	4669      	mov	r1, sp
   13414:	4610      	mov	r0, r2
   13416:	9400      	str	r4, [sp, #0]
   13418:	f8cd 4003 	str.w	r4, [sp, #3]
   1341c:	f00c f8c4 	bl	1f5a8 <bt_addr_le_cmp>
   13420:	b940      	cbnz	r0, 13434 <gatt_sub_find+0x30>
}
   13422:	4638      	mov	r0, r7
   13424:	b003      	add	sp, #12
   13426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   13428:	4620      	mov	r0, r4
   1342a:	7829      	ldrb	r1, [r5, #0]
   1342c:	f00b fb39 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   13430:	2800      	cmp	r0, #0
   13432:	d1f6      	bne.n	13422 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13434:	3601      	adds	r6, #1
   13436:	2e04      	cmp	r6, #4
   13438:	f105 0510 	add.w	r5, r5, #16
   1343c:	d1e6      	bne.n	1340c <gatt_sub_find+0x8>
	return NULL;
   1343e:	2700      	movs	r7, #0
   13440:	e7ef      	b.n	13422 <gatt_sub_find+0x1e>
   13442:	bf00      	nop
   13444:	20009cfc 	.word	0x20009cfc

00013448 <find_cf_cfg_by_addr>:
{
   13448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1344a:	4606      	mov	r6, r0
   1344c:	460f      	mov	r7, r1
   1344e:	2400      	movs	r4, #0
   13450:	4d09      	ldr	r5, [pc, #36]	; (13478 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   13452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13456:	42b3      	cmp	r3, r6
   13458:	d107      	bne.n	1346a <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1345a:	4629      	mov	r1, r5
   1345c:	4638      	mov	r0, r7
   1345e:	f00c f8a3 	bl	1f5a8 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   13462:	b910      	cbnz	r0, 1346a <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   13464:	4805      	ldr	r0, [pc, #20]	; (1347c <find_cf_cfg_by_addr+0x34>)
   13466:	4420      	add	r0, r4
}
   13468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1346a:	3410      	adds	r4, #16
   1346c:	2c40      	cmp	r4, #64	; 0x40
   1346e:	f105 0510 	add.w	r5, r5, #16
   13472:	d1ee      	bne.n	13452 <find_cf_cfg_by_addr+0xa>
	return NULL;
   13474:	2000      	movs	r0, #0
   13476:	e7f7      	b.n	13468 <find_cf_cfg_by_addr+0x20>
   13478:	20009c6d 	.word	0x20009c6d
   1347c:	20009c6c 	.word	0x20009c6c

00013480 <bt_gatt_attr_write_ccc>:
{
   13480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13484:	461f      	mov	r7, r3
   13486:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1348a:	4604      	mov	r4, r0
   1348c:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1348e:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   13492:	2b00      	cmp	r3, #0
   13494:	d141      	bne.n	1351a <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   13496:	1e7b      	subs	r3, r7, #1
   13498:	2b01      	cmp	r3, #1
   1349a:	d841      	bhi.n	13520 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1349c:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1349e:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   134a0:	4649      	mov	r1, r9
   134a2:	bf14      	ite	ne
   134a4:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   134a6:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   134a8:	f00c f881 	bl	1f5ae <find_ccc_cfg>
	if (!cfg) {
   134ac:	4605      	mov	r5, r0
   134ae:	b9b0      	cbnz	r0, 134de <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   134b0:	b916      	cbnz	r6, 134b8 <bt_gatt_attr_write_ccc+0x38>
			return len;
   134b2:	4638      	mov	r0, r7
}
   134b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   134b8:	4649      	mov	r1, r9
   134ba:	f00c f878 	bl	1f5ae <find_ccc_cfg>
		if (!cfg) {
   134be:	4605      	mov	r5, r0
   134c0:	b930      	cbnz	r0, 134d0 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   134c2:	4819      	ldr	r0, [pc, #100]	; (13528 <bt_gatt_attr_write_ccc+0xa8>)
   134c4:	2157      	movs	r1, #87	; 0x57
   134c6:	f009 fa67 	bl	1c998 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   134ca:	f06f 0010 	mvn.w	r0, #16
   134ce:	e7f1      	b.n	134b4 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   134d0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   134d4:	3001      	adds	r0, #1
   134d6:	f00c f8a3 	bl	1f620 <bt_addr_le_copy>
		cfg->id = conn->id;
   134da:	7a23      	ldrb	r3, [r4, #8]
   134dc:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   134de:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   134e2:	b973      	cbnz	r3, 13502 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   134e4:	f8b9 301e 	ldrh.w	r3, [r9, #30]
	cfg->value = value;
   134e8:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   134ea:	42b3      	cmp	r3, r6
   134ec:	d003      	beq.n	134f6 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   134ee:	4649      	mov	r1, r9
   134f0:	4640      	mov	r0, r8
   134f2:	f00b ffd9 	bl	1f4a8 <gatt_ccc_changed>
	if (!value) {
   134f6:	2e00      	cmp	r6, #0
   134f8:	d1db      	bne.n	134b2 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   134fa:	4628      	mov	r0, r5
   134fc:	f00c f893 	bl	1f626 <clear_ccc_cfg>
   13500:	e7d7      	b.n	134b2 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   13502:	4632      	mov	r2, r6
   13504:	4641      	mov	r1, r8
   13506:	4620      	mov	r0, r4
   13508:	4798      	blx	r3
		if (write < 0) {
   1350a:	2800      	cmp	r0, #0
   1350c:	dbd2      	blt.n	134b4 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1350e:	1e44      	subs	r4, r0, #1
   13510:	2c01      	cmp	r4, #1
   13512:	d9e7      	bls.n	134e4 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   13514:	f06f 000d 	mvn.w	r0, #13
   13518:	e7cc      	b.n	134b4 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1351a:	f06f 0006 	mvn.w	r0, #6
   1351e:	e7c9      	b.n	134b4 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13520:	f06f 000c 	mvn.w	r0, #12
   13524:	e7c6      	b.n	134b4 <bt_gatt_attr_write_ccc+0x34>
   13526:	bf00      	nop
   13528:	00025253 	.word	0x00025253

0001352c <cf_write>:
{
   1352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13530:	461f      	mov	r7, r3
   13532:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13536:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   13538:	2b01      	cmp	r3, #1
{
   1353a:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1353c:	d845      	bhi.n	135ca <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   1353e:	443b      	add	r3, r7
   13540:	2b01      	cmp	r3, #1
   13542:	463d      	mov	r5, r7
   13544:	dc44      	bgt.n	135d0 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   13546:	f7ff ff1f 	bl	13388 <find_cf_cfg>
	if (!cfg) {
   1354a:	4604      	mov	r4, r0
   1354c:	b918      	cbnz	r0, 13556 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1354e:	f7ff ff1b 	bl	13388 <find_cf_cfg>
	if (!cfg) {
   13552:	4604      	mov	r4, r0
   13554:	b1d8      	cbz	r0, 1358e <cf_write+0x62>
   13556:	4632      	mov	r2, r6
   13558:	f104 0008 	add.w	r0, r4, #8
   1355c:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   13560:	4596      	cmp	lr, r2
   13562:	d11d      	bne.n	135a0 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13564:	b12f      	cbz	r7, 13572 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   13566:	7833      	ldrb	r3, [r6, #0]
   13568:	7a22      	ldrb	r2, [r4, #8]
   1356a:	f003 0307 	and.w	r3, r3, #7
   1356e:	4313      	orrs	r3, r2
   13570:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13572:	f108 0188 	add.w	r1, r8, #136	; 0x88
   13576:	1c60      	adds	r0, r4, #1
   13578:	f00c f852 	bl	1f620 <bt_addr_le_copy>
	cfg->id = conn->id;
   1357c:	4620      	mov	r0, r4
   1357e:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13582:	2101      	movs	r1, #1
   13584:	f800 3b0c 	strb.w	r3, [r0], #12
   13588:	f00c f85b 	bl	1f642 <atomic_or>
}
   1358c:	e005      	b.n	1359a <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1358e:	2157      	movs	r1, #87	; 0x57
   13590:	4812      	ldr	r0, [pc, #72]	; (135dc <cf_write+0xb0>)
   13592:	f009 fa01 	bl	1c998 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13596:	f06f 0510 	mvn.w	r5, #16
}
   1359a:	4628      	mov	r0, r5
   1359c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   135a0:	2300      	movs	r3, #0
   135a2:	f812 1b01 	ldrb.w	r1, [r2], #1
   135a6:	f810 cb01 	ldrb.w	ip, [r0], #1
   135aa:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   135ae:	fa21 f903 	lsr.w	r9, r1, r3
   135b2:	f019 0f01 	tst.w	r9, #1
   135b6:	d004      	beq.n	135c2 <cf_write+0x96>
   135b8:	fa2c f903 	lsr.w	r9, ip, r3
   135bc:	f019 0f01 	tst.w	r9, #1
   135c0:	d109      	bne.n	135d6 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   135c2:	3301      	adds	r3, #1
   135c4:	2b03      	cmp	r3, #3
   135c6:	d1f2      	bne.n	135ae <cf_write+0x82>
   135c8:	e7ca      	b.n	13560 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   135ca:	f06f 0506 	mvn.w	r5, #6
   135ce:	e7e4      	b.n	1359a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   135d0:	f06f 050c 	mvn.w	r5, #12
   135d4:	e7e1      	b.n	1359a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   135d6:	f06f 0512 	mvn.w	r5, #18
   135da:	e7de      	b.n	1359a <cf_write+0x6e>
   135dc:	00025272 	.word	0x00025272

000135e0 <sc_store>:
{
   135e0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   135e2:	4605      	mov	r5, r0
   135e4:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   135e8:	4604      	mov	r4, r0
   135ea:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   135ec:	b1ca      	cbz	r2, 13622 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   135ee:	ae02      	add	r6, sp, #8
   135f0:	2104      	movs	r1, #4
   135f2:	4630      	mov	r0, r6
   135f4:	f009 f936 	bl	1c864 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   135f8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   135fa:	462b      	mov	r3, r5
   135fc:	2124      	movs	r1, #36	; 0x24
   135fe:	4a0a      	ldr	r2, [pc, #40]	; (13628 <sc_store+0x48>)
   13600:	a803      	add	r0, sp, #12
   13602:	f7fa ff45 	bl	e490 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   13606:	2204      	movs	r2, #4
   13608:	f104 0108 	add.w	r1, r4, #8
   1360c:	a803      	add	r0, sp, #12
   1360e:	f7f8 fa19 	bl	ba44 <settings_save_one>
	if (err) {
   13612:	4602      	mov	r2, r0
   13614:	b118      	cbz	r0, 1361e <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   13616:	2145      	movs	r1, #69	; 0x45
   13618:	4804      	ldr	r0, [pc, #16]	; (1362c <sc_store+0x4c>)
   1361a:	f009 f9bd 	bl	1c998 <printk>
}
   1361e:	b00c      	add	sp, #48	; 0x30
   13620:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   13622:	9200      	str	r2, [sp, #0]
   13624:	e7e9      	b.n	135fa <sc_store+0x1a>
   13626:	bf00      	nop
   13628:	000255ae 	.word	0x000255ae
   1362c:	000252a3 	.word	0x000252a3

00013630 <sc_save>:
{
   13630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13634:	4680      	mov	r8, r0
   13636:	460f      	mov	r7, r1
   13638:	4616      	mov	r6, r2
   1363a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1363c:	f7ff fec6 	bl	133cc <find_sc_cfg>
	if (!cfg) {
   13640:	4604      	mov	r4, r0
   13642:	b998      	cbnz	r0, 1366c <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13644:	4669      	mov	r1, sp
   13646:	9000      	str	r0, [sp, #0]
   13648:	f8cd 0003 	str.w	r0, [sp, #3]
   1364c:	f7ff febe 	bl	133cc <find_sc_cfg>
		if (!cfg) {
   13650:	4604      	mov	r4, r0
   13652:	b930      	cbnz	r0, 13662 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13654:	2145      	movs	r1, #69	; 0x45
   13656:	4813      	ldr	r0, [pc, #76]	; (136a4 <sc_save+0x74>)
   13658:	f009 f99e 	bl	1c998 <printk>
}
   1365c:	b002      	add	sp, #8
   1365e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   13662:	4639      	mov	r1, r7
		cfg->id = id;
   13664:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   13668:	f00b ffda 	bl	1f620 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1366c:	8922      	ldrh	r2, [r4, #8]
   1366e:	8963      	ldrh	r3, [r4, #10]
   13670:	b97a      	cbnz	r2, 13692 <sc_save+0x62>
   13672:	b983      	cbnz	r3, 13696 <sc_save+0x66>
		cfg->data.start = start;
   13674:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   13676:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   13678:	4621      	mov	r1, r4
   1367a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1367e:	f00b f8d3 	bl	1e828 <bt_addr_le_is_bonded>
   13682:	2800      	cmp	r0, #0
   13684:	d0ea      	beq.n	1365c <sc_save+0x2c>
		sc_store(cfg);
   13686:	4620      	mov	r0, r4
}
   13688:	b002      	add	sp, #8
   1368a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1368e:	f7ff bfa7 	b.w	135e0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   13692:	4296      	cmp	r6, r2
   13694:	d302      	bcc.n	1369c <sc_save+0x6c>
   13696:	429d      	cmp	r5, r3
   13698:	d8ed      	bhi.n	13676 <sc_save+0x46>
   1369a:	e7df      	b.n	1365c <sc_save+0x2c>
	if (*end < new_end) {
   1369c:	429d      	cmp	r5, r3
		*start = new_start;
   1369e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   136a0:	d9ea      	bls.n	13678 <sc_save+0x48>
   136a2:	e7e8      	b.n	13676 <sc_save+0x46>
   136a4:	000252c4 	.word	0x000252c4

000136a8 <sc_set>:
{
   136a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   136ac:	460e      	mov	r6, r1
   136ae:	4690      	mov	r8, r2
   136b0:	4699      	mov	r9, r3
	if (!name) {
   136b2:	4604      	mov	r4, r0
{
   136b4:	b087      	sub	sp, #28
	if (!name) {
   136b6:	b948      	cbnz	r0, 136cc <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   136b8:	2145      	movs	r1, #69	; 0x45
   136ba:	4829      	ldr	r0, [pc, #164]	; (13760 <sc_set+0xb8>)
   136bc:	f009 f96c 	bl	1c998 <printk>
		return -EINVAL;
   136c0:	f06f 0515 	mvn.w	r5, #21
}
   136c4:	4628      	mov	r0, r5
   136c6:	b007      	add	sp, #28
   136c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   136cc:	a902      	add	r1, sp, #8
   136ce:	f00a fe92 	bl	1e3f6 <bt_settings_decode_key>
	if (err) {
   136d2:	4605      	mov	r5, r0
   136d4:	b128      	cbz	r0, 136e2 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   136d6:	4622      	mov	r2, r4
   136d8:	2145      	movs	r1, #69	; 0x45
   136da:	4822      	ldr	r0, [pc, #136]	; (13764 <sc_set+0xbc>)
   136dc:	f009 f95c 	bl	1c998 <printk>
   136e0:	e7ee      	b.n	136c0 <sc_set+0x18>
	settings_name_next(name, &next);
   136e2:	4620      	mov	r0, r4
   136e4:	a901      	add	r1, sp, #4
   136e6:	f009 fe11 	bl	1d30c <settings_name_next>
	if (!next) {
   136ea:	9801      	ldr	r0, [sp, #4]
   136ec:	b1d8      	cbz	r0, 13726 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   136ee:	220a      	movs	r2, #10
   136f0:	4629      	mov	r1, r5
   136f2:	f00a fd1b 	bl	1e12c <strtol>
   136f6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   136f8:	4638      	mov	r0, r7
   136fa:	a902      	add	r1, sp, #8
   136fc:	f7ff fe66 	bl	133cc <find_sc_cfg>
	if (!cfg && len_rd) {
   13700:	4604      	mov	r4, r0
   13702:	bb28      	cbnz	r0, 13750 <sc_set+0xa8>
   13704:	2e00      	cmp	r6, #0
   13706:	d0dd      	beq.n	136c4 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13708:	a904      	add	r1, sp, #16
   1370a:	9004      	str	r0, [sp, #16]
   1370c:	f8cd 0013 	str.w	r0, [sp, #19]
   13710:	f7ff fe5c 	bl	133cc <find_sc_cfg>
		if (!cfg) {
   13714:	4604      	mov	r4, r0
   13716:	b940      	cbnz	r0, 1372a <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   13718:	2145      	movs	r1, #69	; 0x45
   1371a:	4813      	ldr	r0, [pc, #76]	; (13768 <sc_set+0xc0>)
   1371c:	f009 f93c 	bl	1c998 <printk>
			return -ENOMEM;
   13720:	f06f 050b 	mvn.w	r5, #11
   13724:	e7ce      	b.n	136c4 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   13726:	462f      	mov	r7, r5
   13728:	e7e6      	b.n	136f8 <sc_set+0x50>
		cfg->id = id;
   1372a:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1372e:	a902      	add	r1, sp, #8
   13730:	f00b ff76 	bl	1f620 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   13734:	f104 0108 	add.w	r1, r4, #8
   13738:	2204      	movs	r2, #4
   1373a:	4648      	mov	r0, r9
   1373c:	47c0      	blx	r8
		if (len < 0) {
   1373e:	1e04      	subs	r4, r0, #0
   13740:	dac0      	bge.n	136c4 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13742:	4622      	mov	r2, r4
   13744:	2145      	movs	r1, #69	; 0x45
   13746:	4809      	ldr	r0, [pc, #36]	; (1376c <sc_set+0xc4>)
   13748:	f009 f926 	bl	1c998 <printk>
			return len;
   1374c:	4625      	mov	r5, r4
   1374e:	e7b9      	b.n	136c4 <sc_set+0x1c>
	if (len_rd) {
   13750:	2e00      	cmp	r6, #0
   13752:	d1ef      	bne.n	13734 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13754:	220c      	movs	r2, #12
   13756:	4631      	mov	r1, r6
   13758:	f00a fe01 	bl	1e35e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1375c:	e7b2      	b.n	136c4 <sc_set+0x1c>
   1375e:	bf00      	nop
   13760:	00023fad 	.word	0x00023fad
   13764:	000252e8 	.word	0x000252e8
   13768:	00025309 	.word	0x00025309
   1376c:	000251fa 	.word	0x000251fa

00013770 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   13770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13774:	4606      	mov	r6, r0
   13776:	4688      	mov	r8, r1
   13778:	4617      	mov	r7, r2
	if (params) {
   1377a:	461c      	mov	r4, r3
   1377c:	b31b      	cbz	r3, 137c6 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1377e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13782:	2100      	movs	r1, #0
   13784:	f7ff fc1a 	bl	12fbc <bt_att_req_alloc>
		if (!req) {
   13788:	4605      	mov	r5, r0
   1378a:	b920      	cbnz	r0, 13796 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   1378c:	f06f 040b 	mvn.w	r4, #11
}
   13790:	4620      	mov	r0, r4
   13792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   13796:	2300      	movs	r3, #0
		req->user_data = params;
   13798:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
   1379a:	4601      	mov	r1, r0
		req->buf = buf;
   1379c:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   137a0:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   137a2:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   137a4:	4630      	mov	r0, r6
   137a6:	f7ff fd57 	bl	13258 <bt_att_req_send>
		if (err) {
   137aa:	4604      	mov	r4, r0
   137ac:	2800      	cmp	r0, #0
   137ae:	d0ef      	beq.n	13790 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   137b0:	4628      	mov	r0, r5
   137b2:	f7ff fc19 	bl	12fe8 <bt_att_req_free>
	if (err) {
   137b6:	2c00      	cmp	r4, #0
   137b8:	d0ea      	beq.n	13790 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   137ba:	4622      	mov	r2, r4
   137bc:	2145      	movs	r1, #69	; 0x45
   137be:	4804      	ldr	r0, [pc, #16]	; (137d0 <gatt_send.constprop.0+0x60>)
   137c0:	f009 f8ea 	bl	1c998 <printk>
   137c4:	e7e4      	b.n	13790 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   137c6:	461a      	mov	r2, r3
   137c8:	f7ff fcde 	bl	13188 <bt_att_send>
   137cc:	4604      	mov	r4, r0
   137ce:	e7f2      	b.n	137b6 <gatt_send.constprop.0+0x46>
   137d0:	00025330 	.word	0x00025330

000137d4 <cf_set>:
{
   137d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   137d8:	4689      	mov	r9, r1
   137da:	4617      	mov	r7, r2
   137dc:	4698      	mov	r8, r3
	if (!name) {
   137de:	4605      	mov	r5, r0
{
   137e0:	b085      	sub	sp, #20
	if (!name) {
   137e2:	b948      	cbnz	r0, 137f8 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   137e4:	2145      	movs	r1, #69	; 0x45
   137e6:	4826      	ldr	r0, [pc, #152]	; (13880 <cf_set+0xac>)
   137e8:	f009 f8d6 	bl	1c998 <printk>
		return -EINVAL;
   137ec:	f06f 0415 	mvn.w	r4, #21
}
   137f0:	4620      	mov	r0, r4
   137f2:	b005      	add	sp, #20
   137f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   137f8:	a902      	add	r1, sp, #8
   137fa:	f00a fdfc 	bl	1e3f6 <bt_settings_decode_key>
	if (err) {
   137fe:	4604      	mov	r4, r0
   13800:	b128      	cbz	r0, 1380e <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13802:	462a      	mov	r2, r5
   13804:	2145      	movs	r1, #69	; 0x45
   13806:	481f      	ldr	r0, [pc, #124]	; (13884 <cf_set+0xb0>)
   13808:	f009 f8c6 	bl	1c998 <printk>
   1380c:	e7ee      	b.n	137ec <cf_set+0x18>
	settings_name_next(name, &next);
   1380e:	4628      	mov	r0, r5
   13810:	a901      	add	r1, sp, #4
   13812:	f009 fd7b 	bl	1d30c <settings_name_next>
	if (!next) {
   13816:	9801      	ldr	r0, [sp, #4]
   13818:	b1a8      	cbz	r0, 13846 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   1381a:	220a      	movs	r2, #10
   1381c:	4621      	mov	r1, r4
   1381e:	f00a fc85 	bl	1e12c <strtol>
   13822:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   13824:	4630      	mov	r0, r6
   13826:	a902      	add	r1, sp, #8
   13828:	f7ff fe0e 	bl	13448 <find_cf_cfg_by_addr>
	if (!cfg) {
   1382c:	4605      	mov	r5, r0
   1382e:	b988      	cbnz	r0, 13854 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   13830:	f7ff fdaa 	bl	13388 <find_cf_cfg>
		if (!cfg) {
   13834:	4605      	mov	r5, r0
   13836:	b940      	cbnz	r0, 1384a <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   13838:	2145      	movs	r1, #69	; 0x45
   1383a:	4813      	ldr	r0, [pc, #76]	; (13888 <cf_set+0xb4>)
   1383c:	f009 f8ac 	bl	1c998 <printk>
			return -ENOMEM;
   13840:	f06f 040b 	mvn.w	r4, #11
   13844:	e7d4      	b.n	137f0 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   13846:	4626      	mov	r6, r4
   13848:	e7ec      	b.n	13824 <cf_set+0x50>
		cfg->id = id;
   1384a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1384e:	a902      	add	r1, sp, #8
   13850:	f00b fee6 	bl	1f620 <bt_addr_le_copy>
	if (len_rd) {
   13854:	f1b9 0f00 	cmp.w	r9, #0
   13858:	d00d      	beq.n	13876 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1385a:	f105 0108 	add.w	r1, r5, #8
   1385e:	2201      	movs	r2, #1
   13860:	4640      	mov	r0, r8
   13862:	47b8      	blx	r7
		if (len < 0) {
   13864:	1e05      	subs	r5, r0, #0
   13866:	dac3      	bge.n	137f0 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13868:	462a      	mov	r2, r5
   1386a:	2145      	movs	r1, #69	; 0x45
   1386c:	4807      	ldr	r0, [pc, #28]	; (1388c <cf_set+0xb8>)
   1386e:	f009 f893 	bl	1c998 <printk>
			return len;
   13872:	462c      	mov	r4, r5
   13874:	e7bc      	b.n	137f0 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   13876:	4628      	mov	r0, r5
   13878:	f00b fefd 	bl	1f676 <clear_cf_cfg>
   1387c:	e7b8      	b.n	137f0 <cf_set+0x1c>
   1387e:	bf00      	nop
   13880:	00023fad 	.word	0x00023fad
   13884:	000252e8 	.word	0x000252e8
   13888:	0002534f 	.word	0x0002534f
   1388c:	000251fa 	.word	0x000251fa

00013890 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   13890:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   13892:	6881      	ldr	r1, [r0, #8]
{
   13894:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13896:	4a07      	ldr	r2, [pc, #28]	; (138b4 <remove_peer_from_attr+0x24>)
   13898:	4291      	cmp	r1, r2
   1389a:	d109      	bne.n	138b0 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1389c:	791a      	ldrb	r2, [r3, #4]
   1389e:	6819      	ldr	r1, [r3, #0]
   138a0:	68c0      	ldr	r0, [r0, #12]
   138a2:	f00b fea3 	bl	1f5ec <ccc_find_cfg>
	if (cfg) {
   138a6:	b118      	cbz	r0, 138b0 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   138a8:	220a      	movs	r2, #10
   138aa:	2100      	movs	r1, #0
   138ac:	f00a fd57 	bl	1e35e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   138b0:	2001      	movs	r0, #1
   138b2:	bd08      	pop	{r3, pc}
   138b4:	00013481 	.word	0x00013481

000138b8 <ccc_load>:
{
   138b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   138ba:	4b21      	ldr	r3, [pc, #132]	; (13940 <ccc_load+0x88>)
{
   138bc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   138be:	6882      	ldr	r2, [r0, #8]
   138c0:	429a      	cmp	r2, r3
   138c2:	d002      	beq.n	138ca <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   138c4:	2001      	movs	r0, #1
}
   138c6:	b002      	add	sp, #8
   138c8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   138ca:	68a3      	ldr	r3, [r4, #8]
   138cc:	68c6      	ldr	r6, [r0, #12]
   138ce:	b94b      	cbnz	r3, 138e4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   138d0:	4630      	mov	r0, r6
   138d2:	7922      	ldrb	r2, [r4, #4]
   138d4:	6821      	ldr	r1, [r4, #0]
   138d6:	f00b fe89 	bl	1f5ec <ccc_find_cfg>
	if (!cfg) {
   138da:	2800      	cmp	r0, #0
   138dc:	d0f2      	beq.n	138c4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   138de:	f00b fea2 	bl	1f626 <clear_ccc_cfg>
   138e2:	e7ef      	b.n	138c4 <ccc_load+0xc>
	} else if (!load->count) {
   138e4:	68e0      	ldr	r0, [r4, #12]
   138e6:	2800      	cmp	r0, #0
   138e8:	d0ed      	beq.n	138c6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   138ea:	881b      	ldrh	r3, [r3, #0]
   138ec:	4299      	cmp	r1, r3
   138ee:	d00a      	beq.n	13906 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   138f0:	d9e8      	bls.n	138c4 <ccc_load+0xc>
	load->count--;
   138f2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   138f4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   138f6:	3801      	subs	r0, #1
	load->entry++;
   138f8:	3304      	adds	r3, #4
	load->count--;
   138fa:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   138fc:	3800      	subs	r0, #0
   138fe:	bf18      	it	ne
   13900:	2001      	movne	r0, #1
	load->entry++;
   13902:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13904:	e7df      	b.n	138c6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   13906:	4630      	mov	r0, r6
   13908:	7922      	ldrb	r2, [r4, #4]
   1390a:	6821      	ldr	r1, [r4, #0]
   1390c:	f00b fe6e 	bl	1f5ec <ccc_find_cfg>
	if (!cfg) {
   13910:	4605      	mov	r5, r0
   13912:	b980      	cbnz	r0, 13936 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   13914:	9000      	str	r0, [sp, #0]
   13916:	4602      	mov	r2, r0
   13918:	f8cd 0003 	str.w	r0, [sp, #3]
   1391c:	4669      	mov	r1, sp
   1391e:	4630      	mov	r0, r6
   13920:	f00b fe64 	bl	1f5ec <ccc_find_cfg>
		if (!cfg) {
   13924:	4605      	mov	r5, r0
   13926:	2800      	cmp	r0, #0
   13928:	d0e3      	beq.n	138f2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1392a:	6821      	ldr	r1, [r4, #0]
   1392c:	3001      	adds	r0, #1
   1392e:	f00b fe77 	bl	1f620 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   13932:	7923      	ldrb	r3, [r4, #4]
   13934:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   13936:	68a3      	ldr	r3, [r4, #8]
   13938:	885b      	ldrh	r3, [r3, #2]
   1393a:	812b      	strh	r3, [r5, #8]
   1393c:	e7d9      	b.n	138f2 <ccc_load+0x3a>
   1393e:	bf00      	nop
   13940:	00013481 	.word	0x00013481

00013944 <ccc_save>:
{
   13944:	b538      	push	{r3, r4, r5, lr}
   13946:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13948:	4b0b      	ldr	r3, [pc, #44]	; (13978 <ccc_save+0x34>)
   1394a:	6882      	ldr	r2, [r0, #8]
{
   1394c:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1394e:	429a      	cmp	r2, r3
   13950:	d10f      	bne.n	13972 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13952:	7922      	ldrb	r2, [r4, #4]
   13954:	6821      	ldr	r1, [r4, #0]
   13956:	68c0      	ldr	r0, [r0, #12]
   13958:	f00b fe48 	bl	1f5ec <ccc_find_cfg>
	if (!cfg) {
   1395c:	b148      	cbz	r0, 13972 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1395e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   13962:	8901      	ldrh	r1, [r0, #8]
   13964:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13968:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1396a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1396c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1396e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   13972:	2001      	movs	r0, #1
   13974:	bd38      	pop	{r3, r4, r5, pc}
   13976:	bf00      	nop
   13978:	00013481 	.word	0x00013481

0001397c <gatt_indicate>:
{
   1397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13980:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   13982:	8a92      	ldrh	r2, [r2, #20]
{
   13984:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13986:	3202      	adds	r2, #2
   13988:	211d      	movs	r1, #29
{
   1398a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   1398c:	f7ff f892 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   13990:	4605      	mov	r5, r0
   13992:	b1e8      	cbz	r0, 139d0 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13994:	f100 0808 	add.w	r8, r0, #8
   13998:	2102      	movs	r1, #2
   1399a:	4640      	mov	r0, r8
   1399c:	f003 ff7c 	bl	17898 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   139a0:	4606      	mov	r6, r0
   139a2:	8aa1      	ldrh	r1, [r4, #20]
   139a4:	f826 9b02 	strh.w	r9, [r6], #2
   139a8:	4640      	mov	r0, r8
   139aa:	f003 ff75 	bl	17898 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   139ae:	4630      	mov	r0, r6
   139b0:	8aa2      	ldrh	r2, [r4, #20]
   139b2:	6921      	ldr	r1, [r4, #16]
   139b4:	f00a fca8 	bl	1e308 <memcpy>
	if (!params->func) {
   139b8:	68a3      	ldr	r3, [r4, #8]
   139ba:	b933      	cbnz	r3, 139ca <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   139bc:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   139be:	4629      	mov	r1, r5
   139c0:	4638      	mov	r0, r7
}
   139c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   139c6:	f7ff bed3 	b.w	13770 <gatt_send.constprop.0>
   139ca:	4623      	mov	r3, r4
   139cc:	4a04      	ldr	r2, [pc, #16]	; (139e0 <gatt_indicate+0x64>)
   139ce:	e7f6      	b.n	139be <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   139d0:	2157      	movs	r1, #87	; 0x57
   139d2:	4804      	ldr	r0, [pc, #16]	; (139e4 <gatt_indicate+0x68>)
   139d4:	f008 ffe0 	bl	1c998 <printk>
}
   139d8:	f06f 000b 	mvn.w	r0, #11
   139dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   139e0:	0001f4cd 	.word	0x0001f4cd
   139e4:	00025376 	.word	0x00025376

000139e8 <gatt_notify>:
{
   139e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139ec:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   139ee:	8992      	ldrh	r2, [r2, #12]
{
   139f0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   139f2:	3202      	adds	r2, #2
   139f4:	211b      	movs	r1, #27
{
   139f6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   139f8:	f7ff f85c 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   139fc:	4605      	mov	r5, r0
   139fe:	b1c8      	cbz	r0, 13a34 <gatt_notify+0x4c>
   13a00:	f100 0908 	add.w	r9, r0, #8
   13a04:	2102      	movs	r1, #2
   13a06:	4648      	mov	r0, r9
   13a08:	f003 ff46 	bl	17898 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   13a0c:	4606      	mov	r6, r0
   13a0e:	89a1      	ldrh	r1, [r4, #12]
   13a10:	f826 8b02 	strh.w	r8, [r6], #2
   13a14:	4648      	mov	r0, r9
   13a16:	f003 ff3f 	bl	17898 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   13a1a:	89a2      	ldrh	r2, [r4, #12]
   13a1c:	68a1      	ldr	r1, [r4, #8]
   13a1e:	4630      	mov	r0, r6
   13a20:	f00a fc72 	bl	1e308 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   13a24:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13a28:	4629      	mov	r1, r5
   13a2a:	4638      	mov	r0, r7
}
   13a2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   13a30:	f7ff bbaa 	b.w	13188 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   13a34:	2157      	movs	r1, #87	; 0x57
   13a36:	4803      	ldr	r0, [pc, #12]	; (13a44 <gatt_notify+0x5c>)
   13a38:	f008 ffae 	bl	1c998 <printk>
}
   13a3c:	f06f 000b 	mvn.w	r0, #11
   13a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a44:	000253a2 	.word	0x000253a2

00013a48 <notify_cb>:
{
   13a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a4c:	4b38      	ldr	r3, [pc, #224]	; (13b30 <notify_cb+0xe8>)
{
   13a4e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a50:	6882      	ldr	r2, [r0, #8]
{
   13a52:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a54:	429a      	cmp	r2, r3
   13a56:	d003      	beq.n	13a60 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13a58:	2001      	movs	r0, #1
}
   13a5a:	b003      	add	sp, #12
   13a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   13a60:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13a64:	4b33      	ldr	r3, [pc, #204]	; (13b34 <notify_cb+0xec>)
   13a66:	4599      	cmp	r9, r3
   13a68:	d01a      	beq.n	13aa0 <notify_cb+0x58>
   13a6a:	f04f 0b00 	mov.w	fp, #0
   13a6e:	f109 0701 	add.w	r7, r9, #1
   13a72:	f109 0a1f 	add.w	sl, r9, #31
		if (cfg->value != data->type) {
   13a76:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13a7a:	89a3      	ldrh	r3, [r4, #12]
   13a7c:	429a      	cmp	r2, r3
   13a7e:	d10b      	bne.n	13a98 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13a80:	4639      	mov	r1, r7
   13a82:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13a86:	f7fd fe75 	bl	11774 <bt_conn_lookup_addr_le>
		if (!conn) {
   13a8a:	4605      	mov	r5, r0
   13a8c:	b120      	cbz	r0, 13a98 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   13a8e:	7b43      	ldrb	r3, [r0, #13]
   13a90:	2b07      	cmp	r3, #7
   13a92:	d029      	beq.n	13ae8 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13a94:	f7fd fd50 	bl	11538 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13a98:	370a      	adds	r7, #10
   13a9a:	4557      	cmp	r7, sl
   13a9c:	d1eb      	bne.n	13a76 <notify_cb+0x2e>
   13a9e:	e7db      	b.n	13a58 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13aa0:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13aa2:	4637      	mov	r7, r6
   13aa4:	4d24      	ldr	r5, [pc, #144]	; (13b38 <notify_cb+0xf0>)
   13aa6:	4669      	mov	r1, sp
   13aa8:	4628      	mov	r0, r5
   13aaa:	9700      	str	r7, [sp, #0]
   13aac:	f8cd 7003 	str.w	r7, [sp, #3]
   13ab0:	f00b fd7a 	bl	1f5a8 <bt_addr_le_cmp>
   13ab4:	b178      	cbz	r0, 13ad6 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13ab6:	2207      	movs	r2, #7
   13ab8:	4629      	mov	r1, r5
   13aba:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13abe:	f7fd fe99 	bl	117f4 <bt_conn_lookup_state_le>
			if (!conn) {
   13ac2:	b970      	cbnz	r0, 13ae2 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13ac4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13ac6:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13ac8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13aca:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13ace:	8853      	ldrh	r3, [r2, #2]
   13ad0:	8812      	ldrh	r2, [r2, #0]
   13ad2:	f7ff fdad 	bl	13630 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13ad6:	3601      	adds	r6, #1
   13ad8:	2e04      	cmp	r6, #4
   13ada:	f105 050c 	add.w	r5, r5, #12
   13ade:	d1e2      	bne.n	13aa6 <notify_cb+0x5e>
   13ae0:	e7c3      	b.n	13a6a <notify_cb+0x22>
			bt_conn_unref(conn);
   13ae2:	f7fd fd29 	bl	11538 <bt_conn_unref>
   13ae6:	e7f6      	b.n	13ad6 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13ae8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   13aec:	b123      	cbz	r3, 13af8 <notify_cb+0xb0>
   13aee:	4641      	mov	r1, r8
   13af0:	4798      	blx	r3
   13af2:	b908      	cbnz	r0, 13af8 <notify_cb+0xb0>
			bt_conn_unref(conn);
   13af4:	4628      	mov	r0, r5
   13af6:	e7cd      	b.n	13a94 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13af8:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13afa:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13afc:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   13afe:	88a1      	ldrh	r1, [r4, #4]
   13b00:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   13b02:	d10f      	bne.n	13b24 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13b04:	f7ff ff3a 	bl	1397c <gatt_indicate>
			if (err == 0) {
   13b08:	4606      	mov	r6, r0
   13b0a:	b918      	cbnz	r0, 13b14 <notify_cb+0xcc>
				data->ind_params->_ref++;
   13b0c:	6922      	ldr	r2, [r4, #16]
   13b0e:	7d93      	ldrb	r3, [r2, #22]
   13b10:	3301      	adds	r3, #1
   13b12:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13b14:	4628      	mov	r0, r5
   13b16:	f7fd fd0f 	bl	11538 <bt_conn_unref>
		if (err < 0) {
   13b1a:	2e00      	cmp	r6, #0
   13b1c:	db06      	blt.n	13b2c <notify_cb+0xe4>
		data->err = 0;
   13b1e:	f8c4 b008 	str.w	fp, [r4, #8]
   13b22:	e7b9      	b.n	13a98 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   13b24:	f7ff ff60 	bl	139e8 <gatt_notify>
   13b28:	4606      	mov	r6, r0
   13b2a:	e7f3      	b.n	13b14 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   13b2c:	2000      	movs	r0, #0
   13b2e:	e794      	b.n	13a5a <notify_cb+0x12>
   13b30:	00013481 	.word	0x00013481
   13b34:	20008388 	.word	0x20008388
   13b38:	2000b017 	.word	0x2000b017

00013b3c <bt_gatt_clear_sc>:
{
   13b3c:	b570      	push	{r4, r5, r6, lr}
   13b3e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13b40:	f7ff fc44 	bl	133cc <find_sc_cfg>
	if (!cfg) {
   13b44:	4604      	mov	r4, r0
   13b46:	b1e8      	cbz	r0, 13b84 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13b48:	4605      	mov	r5, r0
   13b4a:	f815 2b01 	ldrb.w	r2, [r5], #1
   13b4e:	b1e2      	cbz	r2, 13b8a <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13b50:	ae02      	add	r6, sp, #8
   13b52:	2104      	movs	r1, #4
   13b54:	4630      	mov	r0, r6
   13b56:	f008 fe85 	bl	1c864 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13b5a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13b5c:	4a0c      	ldr	r2, [pc, #48]	; (13b90 <bt_gatt_clear_sc+0x54>)
   13b5e:	462b      	mov	r3, r5
   13b60:	2124      	movs	r1, #36	; 0x24
   13b62:	a803      	add	r0, sp, #12
   13b64:	f7fa fc94 	bl	e490 <bt_settings_encode_key>
		err = settings_delete(key);
   13b68:	a803      	add	r0, sp, #12
   13b6a:	f009 fba8 	bl	1d2be <settings_delete>
		if (err) {
   13b6e:	4602      	mov	r2, r0
   13b70:	b118      	cbz	r0, 13b7a <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13b72:	2145      	movs	r1, #69	; 0x45
   13b74:	4807      	ldr	r0, [pc, #28]	; (13b94 <bt_gatt_clear_sc+0x58>)
   13b76:	f008 ff0f 	bl	1c998 <printk>
	memset(cfg, 0, sizeof(*cfg));
   13b7a:	220c      	movs	r2, #12
   13b7c:	2100      	movs	r1, #0
   13b7e:	4620      	mov	r0, r4
   13b80:	f00a fbed 	bl	1e35e <memset>
}
   13b84:	2000      	movs	r0, #0
   13b86:	b00c      	add	sp, #48	; 0x30
   13b88:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13b8a:	9200      	str	r2, [sp, #0]
   13b8c:	e7e6      	b.n	13b5c <bt_gatt_clear_sc+0x20>
   13b8e:	bf00      	nop
   13b90:	000255ae 	.word	0x000255ae
   13b94:	000253d0 	.word	0x000253d0

00013b98 <sc_clear>:
{
   13b98:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13b9a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13b9e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13ba0:	4631      	mov	r1, r6
   13ba2:	7a00      	ldrb	r0, [r0, #8]
   13ba4:	f00a fe40 	bl	1e828 <bt_addr_le_is_bonded>
   13ba8:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13baa:	4631      	mov	r1, r6
   13bac:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13bae:	b14d      	cbz	r5, 13bc4 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13bb0:	f7ff ffc4 	bl	13b3c <bt_gatt_clear_sc>
		if (err) {
   13bb4:	4602      	mov	r2, r0
   13bb6:	b170      	cbz	r0, 13bd6 <sc_clear+0x3e>
}
   13bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13bbc:	2145      	movs	r1, #69	; 0x45
   13bbe:	4806      	ldr	r0, [pc, #24]	; (13bd8 <sc_clear+0x40>)
   13bc0:	f008 beea 	b.w	1c998 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13bc4:	f7ff fc02 	bl	133cc <find_sc_cfg>
		if (cfg) {
   13bc8:	b128      	cbz	r0, 13bd6 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13bca:	4629      	mov	r1, r5
}
   13bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13bd0:	220c      	movs	r2, #12
   13bd2:	f00a bbc4 	b.w	1e35e <memset>
}
   13bd6:	bd70      	pop	{r4, r5, r6, pc}
   13bd8:	000253f2 	.word	0x000253f2

00013bdc <disconnected_cb>:
{
   13bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be0:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13be2:	4b25      	ldr	r3, [pc, #148]	; (13c78 <disconnected_cb+0x9c>)
   13be4:	6882      	ldr	r2, [r0, #8]
{
   13be6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13be8:	429a      	cmp	r2, r3
   13bea:	d12f      	bne.n	13c4c <disconnected_cb+0x70>
	ccc = attr->user_data;
   13bec:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13bee:	8beb      	ldrh	r3, [r5, #30]
   13bf0:	b363      	cbz	r3, 13c4c <disconnected_cb+0x70>
	value_used = false;
   13bf2:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13bf6:	f8df b084 	ldr.w	fp, [pc, #132]	; 13c7c <disconnected_cb+0xa0>
   13bfa:	1c6c      	adds	r4, r5, #1
   13bfc:	f105 0a1f 	add.w	sl, r5, #31
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c00:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13c04:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13c08:	b19b      	cbz	r3, 13c32 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13c0a:	4622      	mov	r2, r4
   13c0c:	4630      	mov	r0, r6
   13c0e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13c12:	f00a ff46 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   13c16:	b9e0      	cbnz	r0, 13c52 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13c18:	4621      	mov	r1, r4
   13c1a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13c1e:	f7fd fda9 	bl	11774 <bt_conn_lookup_addr_le>
			if (tmp) {
   13c22:	b130      	cbz	r0, 13c32 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   13c24:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   13c26:	2b07      	cmp	r3, #7
   13c28:	bf08      	it	eq
   13c2a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13c2e:	f7fd fc83 	bl	11538 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13c32:	340a      	adds	r4, #10
   13c34:	45a2      	cmp	sl, r4
   13c36:	d1e5      	bne.n	13c04 <disconnected_cb+0x28>
	if (!value_used) {
   13c38:	f1b8 0f00 	cmp.w	r8, #0
   13c3c:	d106      	bne.n	13c4c <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   13c3e:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
   13c40:	f8a5 801e 	strh.w	r8, [r5, #30]
		if (ccc->cfg_changed) {
   13c44:	b113      	cbz	r3, 13c4c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   13c46:	4641      	mov	r1, r8
   13c48:	4638      	mov	r0, r7
   13c4a:	4798      	blx	r3
}
   13c4c:	2001      	movs	r0, #1
   13c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c52:	4649      	mov	r1, r9
   13c54:	7a30      	ldrb	r0, [r6, #8]
   13c56:	f00a fde7 	bl	1e828 <bt_addr_le_is_bonded>
   13c5a:	b940      	cbnz	r0, 13c6e <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   13c5c:	455d      	cmp	r5, fp
   13c5e:	d102      	bne.n	13c66 <disconnected_cb+0x8a>
					sc_clear(conn);
   13c60:	4630      	mov	r0, r6
   13c62:	f7ff ff99 	bl	13b98 <sc_clear>
				clear_ccc_cfg(cfg);
   13c66:	1e60      	subs	r0, r4, #1
   13c68:	f00b fcdd 	bl	1f626 <clear_ccc_cfg>
   13c6c:	e7e1      	b.n	13c32 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13c6e:	4649      	mov	r1, r9
   13c70:	4620      	mov	r0, r4
   13c72:	f00b fcd5 	bl	1f620 <bt_addr_le_copy>
   13c76:	e7dc      	b.n	13c32 <disconnected_cb+0x56>
   13c78:	00013481 	.word	0x00013481
   13c7c:	20008388 	.word	0x20008388

00013c80 <sc_commit>:
{
   13c80:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c82:	490b      	ldr	r1, [pc, #44]	; (13cb0 <sc_commit+0x30>)
   13c84:	e8d1 3fef 	ldaex	r3, [r1]
   13c88:	f023 0302 	bic.w	r3, r3, #2
   13c8c:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13c90:	2a00      	cmp	r2, #0
   13c92:	d1f7      	bne.n	13c84 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13c94:	4608      	mov	r0, r1
   13c96:	f00b fcdf 	bl	1f658 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13c9a:	07c3      	lsls	r3, r0, #31
   13c9c:	d506      	bpl.n	13cac <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13c9e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13ca2:	2300      	movs	r3, #0
   13ca4:	4803      	ldr	r0, [pc, #12]	; (13cb4 <sc_commit+0x34>)
   13ca6:	3930      	subs	r1, #48	; 0x30
   13ca8:	f007 ff18 	bl	1badc <k_delayed_work_submit_to_queue>
}
   13cac:	2000      	movs	r0, #0
   13cae:	bd08      	pop	{r3, pc}
   13cb0:	20008f38 	.word	0x20008f38
   13cb4:	20009630 	.word	0x20009630

00013cb8 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13cbc:	4688      	mov	r8, r1
   13cbe:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13cc0:	2112      	movs	r1, #18
   13cc2:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13cc4:	4606      	mov	r6, r0
   13cc6:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13cc8:	f7fe fef4 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   13ccc:	4604      	mov	r4, r0
   13cce:	b1c0      	cbz	r0, 13d02 <gatt_write_ccc.constprop.0+0x4a>
   13cd0:	f100 0908 	add.w	r9, r0, #8
   13cd4:	2102      	movs	r1, #2
   13cd6:	4648      	mov	r0, r9
   13cd8:	f003 fdde 	bl	17898 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13cdc:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13cde:	f8a0 8000 	strh.w	r8, [r0]
   13ce2:	4648      	mov	r0, r9
   13ce4:	f00c fcb3 	bl	2064e <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ce8:	2104      	movs	r1, #4
   13cea:	f105 0010 	add.w	r0, r5, #16
   13cee:	f00b fca8 	bl	1f642 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13cf2:	462b      	mov	r3, r5
   13cf4:	4621      	mov	r1, r4
   13cf6:	4630      	mov	r0, r6
}
   13cf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13cfc:	4a03      	ldr	r2, [pc, #12]	; (13d0c <gatt_write_ccc.constprop.0+0x54>)
   13cfe:	f7ff bd37 	b.w	13770 <gatt_send.constprop.0>
}
   13d02:	f06f 000b 	mvn.w	r0, #11
   13d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d0a:	bf00      	nop
   13d0c:	0001f705 	.word	0x0001f705

00013d10 <sc_indicate_rsp>:
{
   13d10:	b510      	push	{r4, lr}
   13d12:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d14:	4910      	ldr	r1, [pc, #64]	; (13d58 <sc_indicate_rsp+0x48>)
   13d16:	e8d1 3fef 	ldaex	r3, [r1]
   13d1a:	f023 0302 	bic.w	r3, r3, #2
   13d1e:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13d22:	2a00      	cmp	r2, #0
   13d24:	d1f7      	bne.n	13d16 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d26:	4608      	mov	r0, r1
   13d28:	f00b fc96 	bl	1f658 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13d2c:	07c2      	lsls	r2, r0, #31
   13d2e:	d505      	bpl.n	13d3c <sc_indicate_rsp+0x2c>
   13d30:	2200      	movs	r2, #0
   13d32:	2300      	movs	r3, #0
   13d34:	4809      	ldr	r0, [pc, #36]	; (13d5c <sc_indicate_rsp+0x4c>)
   13d36:	3930      	subs	r1, #48	; 0x30
   13d38:	f007 fed0 	bl	1badc <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13d3c:	4620      	mov	r0, r4
   13d3e:	f7ff fb23 	bl	13388 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13d42:	b140      	cbz	r0, 13d56 <sc_indicate_rsp+0x46>
   13d44:	7a03      	ldrb	r3, [r0, #8]
   13d46:	07db      	lsls	r3, r3, #31
   13d48:	d505      	bpl.n	13d56 <sc_indicate_rsp+0x46>
}
   13d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d4e:	2101      	movs	r1, #1
   13d50:	300c      	adds	r0, #12
   13d52:	f00b bc76 	b.w	1f642 <atomic_or>
   13d56:	bd10      	pop	{r4, pc}
   13d58:	20008f38 	.word	0x20008f38
   13d5c:	20009630 	.word	0x20009630

00013d60 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13d60:	2201      	movs	r2, #1
{
   13d62:	b570      	push	{r4, r5, r6, lr}
   13d64:	4b26      	ldr	r3, [pc, #152]	; (13e00 <bt_gatt_init+0xa0>)
   13d66:	e8d3 1fef 	ldaex	r1, [r3]
   13d6a:	2900      	cmp	r1, #0
   13d6c:	d103      	bne.n	13d76 <bt_gatt_init+0x16>
   13d6e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13d72:	2800      	cmp	r0, #0
   13d74:	d1f7      	bne.n	13d66 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13d76:	d142      	bne.n	13dfe <bt_gatt_init+0x9e>
   13d78:	4b22      	ldr	r3, [pc, #136]	; (13e04 <bt_gatt_init+0xa4>)
   13d7a:	e8d3 1fef 	ldaex	r1, [r3]
   13d7e:	2900      	cmp	r1, #0
   13d80:	d103      	bne.n	13d8a <bt_gatt_init+0x2a>
   13d82:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13d86:	2800      	cmp	r0, #0
   13d88:	d1f7      	bne.n	13d7a <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13d8a:	d034      	beq.n	13df6 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13d8c:	4c1e      	ldr	r4, [pc, #120]	; (13e08 <bt_gatt_init+0xa8>)
   13d8e:	2230      	movs	r2, #48	; 0x30
   13d90:	2100      	movs	r1, #0
   13d92:	4620      	mov	r0, r4
   13d94:	f00a fae3 	bl	1e35e <memset>
   13d98:	4b1c      	ldr	r3, [pc, #112]	; (13e0c <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13d9a:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13d9c:	6063      	str	r3, [r4, #4]
   13d9e:	4c1c      	ldr	r4, [pc, #112]	; (13e10 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13da0:	2300      	movs	r3, #0
   13da2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13da6:	481b      	ldr	r0, [pc, #108]	; (13e14 <bt_gatt_init+0xb4>)
   13da8:	f007 fe98 	bl	1badc <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13dac:	2100      	movs	r1, #0
   13dae:	f104 0020 	add.w	r0, r4, #32
   13db2:	2230      	movs	r2, #48	; 0x30
   13db4:	f00a fad3 	bl	1e35e <memset>
   13db8:	4b17      	ldr	r3, [pc, #92]	; (13e18 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13dba:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13dbe:	6263      	str	r3, [r4, #36]	; 0x24
   13dc0:	2102      	movs	r1, #2
}
   13dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13dc6:	f00b bc3c 	b.w	1f642 <atomic_or>
		last_static_handle += svc->attr_count;
   13dca:	4a14      	ldr	r2, [pc, #80]	; (13e1c <bt_gatt_init+0xbc>)
   13dcc:	6863      	ldr	r3, [r4, #4]
   13dce:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13dd0:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13dd2:	440b      	add	r3, r1
   13dd4:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13dd6:	42ac      	cmp	r4, r5
   13dd8:	d90a      	bls.n	13df0 <bt_gatt_init+0x90>
   13dda:	4631      	mov	r1, r6
   13ddc:	4810      	ldr	r0, [pc, #64]	; (13e20 <bt_gatt_init+0xc0>)
   13dde:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13de2:	f008 fdd9 	bl	1c998 <printk>
   13de6:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13dea:	4630      	mov	r0, r6
   13dec:	f009 f87a 	bl	1cee4 <assert_post_action>
   13df0:	42ac      	cmp	r4, r5
   13df2:	d3ea      	bcc.n	13dca <bt_gatt_init+0x6a>
   13df4:	e7ca      	b.n	13d8c <bt_gatt_init+0x2c>
   13df6:	4c0b      	ldr	r4, [pc, #44]	; (13e24 <bt_gatt_init+0xc4>)
   13df8:	4d0b      	ldr	r5, [pc, #44]	; (13e28 <bt_gatt_init+0xc8>)
   13dfa:	4e0c      	ldr	r6, [pc, #48]	; (13e2c <bt_gatt_init+0xcc>)
   13dfc:	e7eb      	b.n	13dd6 <bt_gatt_init+0x76>
}
   13dfe:	bd70      	pop	{r4, r5, r6, pc}
   13e00:	20009cac 	.word	0x20009cac
   13e04:	20009cf8 	.word	0x20009cf8
   13e08:	20008eb8 	.word	0x20008eb8
   13e0c:	0001f9fd 	.word	0x0001f9fd
   13e10:	20008ee8 	.word	0x20008ee8
   13e14:	20009630 	.word	0x20009630
   13e18:	000143f1 	.word	0x000143f1
   13e1c:	2000b014 	.word	0x2000b014
   13e20:	00022dd6 	.word	0x00022dd6
   13e24:	000219a8 	.word	0x000219a8
   13e28:	000219d8 	.word	0x000219d8
   13e2c:	0002540d 	.word	0x0002540d

00013e30 <bt_gatt_attr_get_handle>:
{
   13e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13e34:	4604      	mov	r4, r0
   13e36:	b910      	cbnz	r0, 13e3e <bt_gatt_attr_get_handle+0xe>
		return 0;
   13e38:	2000      	movs	r0, #0
}
   13e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13e3e:	8a00      	ldrh	r0, [r0, #16]
   13e40:	2800      	cmp	r0, #0
   13e42:	d1fa      	bne.n	13e3a <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13e44:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13e48:	4d17      	ldr	r5, [pc, #92]	; (13ea8 <bt_gatt_attr_get_handle+0x78>)
   13e4a:	4e18      	ldr	r6, [pc, #96]	; (13eac <bt_gatt_attr_get_handle+0x7c>)
   13e4c:	4f18      	ldr	r7, [pc, #96]	; (13eb0 <bt_gatt_attr_get_handle+0x80>)
   13e4e:	42b5      	cmp	r5, r6
   13e50:	d90a      	bls.n	13e68 <bt_gatt_attr_get_handle+0x38>
   13e52:	4639      	mov	r1, r7
   13e54:	4817      	ldr	r0, [pc, #92]	; (13eb4 <bt_gatt_attr_get_handle+0x84>)
   13e56:	f240 522d 	movw	r2, #1325	; 0x52d
   13e5a:	f008 fd9d 	bl	1c998 <printk>
   13e5e:	f240 512d 	movw	r1, #1325	; 0x52d
   13e62:	4638      	mov	r0, r7
   13e64:	f009 f83e 	bl	1cee4 <assert_post_action>
   13e68:	42b5      	cmp	r5, r6
   13e6a:	d2e5      	bcs.n	13e38 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13e6c:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13e70:	4564      	cmp	r4, ip
   13e72:	d306      	bcc.n	13e82 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13e74:	f04f 0e14 	mov.w	lr, #20
   13e78:	fb0e c301 	mla	r3, lr, r1, ip
   13e7c:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13e7e:	429c      	cmp	r4, r3
   13e80:	d910      	bls.n	13ea4 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13e82:	eb08 0001 	add.w	r0, r8, r1
   13e86:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13e88:	4680      	mov	r8, r0
   13e8a:	3508      	adds	r5, #8
   13e8c:	e7df      	b.n	13e4e <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13e8e:	fb0e c302 	mla	r3, lr, r2, ip
   13e92:	429c      	cmp	r4, r3
   13e94:	d0d1      	beq.n	13e3a <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13e96:	3201      	adds	r2, #1
   13e98:	eb08 0302 	add.w	r3, r8, r2
   13e9c:	4291      	cmp	r1, r2
   13e9e:	b298      	uxth	r0, r3
   13ea0:	d1f5      	bne.n	13e8e <bt_gatt_attr_get_handle+0x5e>
   13ea2:	e7f1      	b.n	13e88 <bt_gatt_attr_get_handle+0x58>
   13ea4:	2200      	movs	r2, #0
   13ea6:	e7f7      	b.n	13e98 <bt_gatt_attr_get_handle+0x68>
   13ea8:	000219a8 	.word	0x000219a8
   13eac:	000219d8 	.word	0x000219d8
   13eb0:	0002540d 	.word	0x0002540d
   13eb4:	00022dd6 	.word	0x00022dd6

00013eb8 <bt_gatt_foreach_attr_type>:
{
   13eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ebc:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13ec2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13ec6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13ec8:	2d00      	cmp	r5, #0
   13eca:	bf08      	it	eq
   13ecc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13ece:	4b2b      	ldr	r3, [pc, #172]	; (13f7c <bt_gatt_foreach_attr_type+0xc4>)
{
   13ed0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13ed2:	881b      	ldrh	r3, [r3, #0]
{
   13ed4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13ed6:	4283      	cmp	r3, r0
   13ed8:	d24b      	bcs.n	13f72 <bt_gatt_foreach_attr_type+0xba>
}
   13eda:	b003      	add	sp, #12
   13edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13ee0:	6873      	ldr	r3, [r6, #4]
   13ee2:	4423      	add	r3, r4
   13ee4:	42bb      	cmp	r3, r7
   13ee6:	d241      	bcs.n	13f6c <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13ee8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13eea:	3608      	adds	r6, #8
   13eec:	4b24      	ldr	r3, [pc, #144]	; (13f80 <bt_gatt_foreach_attr_type+0xc8>)
   13eee:	429e      	cmp	r6, r3
   13ef0:	d90a      	bls.n	13f08 <bt_gatt_foreach_attr_type+0x50>
   13ef2:	4659      	mov	r1, fp
   13ef4:	4823      	ldr	r0, [pc, #140]	; (13f84 <bt_gatt_foreach_attr_type+0xcc>)
   13ef6:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13efa:	f008 fd4d 	bl	1c998 <printk>
   13efe:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13f02:	4658      	mov	r0, fp
   13f04:	f008 ffee 	bl	1cee4 <assert_post_action>
   13f08:	4b1d      	ldr	r3, [pc, #116]	; (13f80 <bt_gatt_foreach_attr_type+0xc8>)
   13f0a:	429e      	cmp	r6, r3
   13f0c:	d3e8      	bcc.n	13ee0 <bt_gatt_foreach_attr_type+0x28>
   13f0e:	e7e4      	b.n	13eda <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13f10:	4640      	mov	r0, r8
   13f12:	5889      	ldr	r1, [r1, r2]
   13f14:	9301      	str	r3, [sp, #4]
   13f16:	f00a fa92 	bl	1e43e <bt_uuid_cmp>
   13f1a:	9b01      	ldr	r3, [sp, #4]
   13f1c:	b198      	cbz	r0, 13f46 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13f1e:	3401      	adds	r4, #1
   13f20:	f10a 0a01 	add.w	sl, sl, #1
   13f24:	b2a4      	uxth	r4, r4
   13f26:	6873      	ldr	r3, [r6, #4]
   13f28:	4553      	cmp	r3, sl
   13f2a:	d9de      	bls.n	13eea <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13f2c:	9b00      	ldr	r3, [sp, #0]
   13f2e:	429c      	cmp	r4, r3
   13f30:	d8d3      	bhi.n	13eda <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   13f32:	42bc      	cmp	r4, r7
   13f34:	d3f3      	bcc.n	13f1e <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13f36:	2314      	movs	r3, #20
   13f38:	fb03 f20a 	mul.w	r2, r3, sl
   13f3c:	6831      	ldr	r1, [r6, #0]
   13f3e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13f40:	f1b8 0f00 	cmp.w	r8, #0
   13f44:	d1e4      	bne.n	13f10 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   13f46:	f1b9 0f00 	cmp.w	r9, #0
   13f4a:	d10b      	bne.n	13f64 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   13f4c:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   13f4e:	4618      	mov	r0, r3
	*num_matches -= 1;
   13f50:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   13f52:	4621      	mov	r1, r4
   13f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13f58:	4798      	blx	r3
	if (!*num_matches) {
   13f5a:	2d00      	cmp	r5, #0
   13f5c:	d0bd      	beq.n	13eda <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13f5e:	2800      	cmp	r0, #0
   13f60:	d1dd      	bne.n	13f1e <bt_gatt_foreach_attr_type+0x66>
   13f62:	e7ba      	b.n	13eda <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13f64:	68da      	ldr	r2, [r3, #12]
   13f66:	4591      	cmp	r9, r2
   13f68:	d1d9      	bne.n	13f1e <bt_gatt_foreach_attr_type+0x66>
   13f6a:	e7ef      	b.n	13f4c <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13f6c:	f04f 0a00 	mov.w	sl, #0
   13f70:	e7d9      	b.n	13f26 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   13f72:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13f74:	4e04      	ldr	r6, [pc, #16]	; (13f88 <bt_gatt_foreach_attr_type+0xd0>)
   13f76:	f8df b014 	ldr.w	fp, [pc, #20]	; 13f8c <bt_gatt_foreach_attr_type+0xd4>
   13f7a:	e7b7      	b.n	13eec <bt_gatt_foreach_attr_type+0x34>
   13f7c:	2000b014 	.word	0x2000b014
   13f80:	000219d8 	.word	0x000219d8
   13f84:	00022dd6 	.word	0x00022dd6
   13f88:	000219a8 	.word	0x000219a8
   13f8c:	0002540d 	.word	0x0002540d

00013f90 <db_hash_gen>:
	uint8_t key[16] = {};
   13f90:	2300      	movs	r3, #0
{
   13f92:	b530      	push	{r4, r5, lr}
   13f94:	b0c9      	sub	sp, #292	; 0x124
   13f96:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13f98:	4669      	mov	r1, sp
   13f9a:	aa1c      	add	r2, sp, #112	; 0x70
   13f9c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13f9e:	e9cd 3300 	strd	r3, r3, [sp]
   13fa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13fa6:	f009 fdb8 	bl	1db1a <tc_cmac_setup>
   13faa:	b928      	cbnz	r0, 13fb8 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13fac:	2145      	movs	r1, #69	; 0x45
   13fae:	4812      	ldr	r0, [pc, #72]	; (13ff8 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13fb0:	f008 fcf2 	bl	1c998 <printk>
}
   13fb4:	b049      	add	sp, #292	; 0x124
   13fb6:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13fbc:	2001      	movs	r0, #1
   13fbe:	4a0f      	ldr	r2, [pc, #60]	; (13ffc <db_hash_gen+0x6c>)
   13fc0:	ab04      	add	r3, sp, #16
   13fc2:	f00b fd10 	bl	1f9e6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13fc6:	480e      	ldr	r0, [pc, #56]	; (14000 <db_hash_gen+0x70>)
   13fc8:	a904      	add	r1, sp, #16
   13fca:	f009 fe3c 	bl	1dc46 <tc_cmac_final>
   13fce:	b910      	cbnz	r0, 13fd6 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   13fd0:	2145      	movs	r1, #69	; 0x45
   13fd2:	480c      	ldr	r0, [pc, #48]	; (14004 <db_hash_gen+0x74>)
   13fd4:	e7ec      	b.n	13fb0 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13fd6:	2208      	movs	r2, #8
   13fd8:	4b09      	ldr	r3, [pc, #36]	; (14000 <db_hash_gen+0x70>)
   13fda:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13fde:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13fe0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13fe4:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13fe6:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13fea:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13fec:	d1f7      	bne.n	13fde <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13fee:	2c00      	cmp	r4, #0
   13ff0:	d0e0      	beq.n	13fb4 <db_hash_gen+0x24>
		db_hash_store();
   13ff2:	f7ff f9b3 	bl	1335c <db_hash_store>
   13ff6:	e7dd      	b.n	13fb4 <db_hash_gen+0x24>
   13ff8:	0002543d 	.word	0x0002543d
   13ffc:	0001f4fd 	.word	0x0001f4fd
   14000:	2000b728 	.word	0x2000b728
   14004:	0002545b 	.word	0x0002545b

00014008 <db_hash_commit>:
{
   14008:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   1400a:	4821      	ldr	r0, [pc, #132]	; (14090 <db_hash_commit+0x88>)
   1400c:	f007 fdd6 	bl	1bbbc <k_delayed_work_cancel>
	if (!err) {
   14010:	b908      	cbnz	r0, 14016 <db_hash_commit+0xe>
		db_hash_gen(false);
   14012:	f7ff ffbd 	bl	13f90 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   14016:	2210      	movs	r2, #16
   14018:	491e      	ldr	r1, [pc, #120]	; (14094 <db_hash_commit+0x8c>)
   1401a:	481f      	ldr	r0, [pc, #124]	; (14098 <db_hash_commit+0x90>)
   1401c:	f00a f963 	bl	1e2e6 <memcmp>
   14020:	b968      	cbnz	r0, 1403e <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   14022:	481e      	ldr	r0, [pc, #120]	; (1409c <db_hash_commit+0x94>)
   14024:	f007 fdca 	bl	1bbbc <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14028:	4b1d      	ldr	r3, [pc, #116]	; (140a0 <db_hash_commit+0x98>)
   1402a:	e8d3 2fef 	ldaex	r2, [r3]
   1402e:	f022 0201 	bic.w	r2, r2, #1
   14032:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14036:	2900      	cmp	r1, #0
   14038:	d1f7      	bne.n	1402a <db_hash_commit+0x22>
}
   1403a:	2000      	movs	r0, #0
   1403c:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1403e:	4c19      	ldr	r4, [pc, #100]	; (140a4 <db_hash_commit+0x9c>)
   14040:	2101      	movs	r1, #1
   14042:	f104 0050 	add.w	r0, r4, #80	; 0x50
   14046:	f00b fafc 	bl	1f642 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1404a:	07c2      	lsls	r2, r0, #31
   1404c:	d410      	bmi.n	14070 <db_hash_commit+0x68>
		gatt_sc.start = start;
   1404e:	4b16      	ldr	r3, [pc, #88]	; (140a8 <db_hash_commit+0xa0>)
   14050:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14052:	4813      	ldr	r0, [pc, #76]	; (140a0 <db_hash_commit+0x98>)
   14054:	f00b fb00 	bl	1f658 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   14058:	0783      	lsls	r3, r0, #30
   1405a:	d406      	bmi.n	1406a <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1405c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14060:	2300      	movs	r3, #0
   14062:	490e      	ldr	r1, [pc, #56]	; (1409c <db_hash_commit+0x94>)
   14064:	4811      	ldr	r0, [pc, #68]	; (140ac <db_hash_commit+0xa4>)
   14066:	f007 fd39 	bl	1badc <k_delayed_work_submit_to_queue>
	db_hash_store();
   1406a:	f7ff f977 	bl	1335c <db_hash_store>
	return 0;
   1406e:	e7e4      	b.n	1403a <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   14070:	8b23      	ldrh	r3, [r4, #24]
   14072:	8b62      	ldrh	r2, [r4, #26]
   14074:	2b01      	cmp	r3, #1
   14076:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1407a:	d805      	bhi.n	14088 <db_hash_commit+0x80>
   1407c:	429a      	cmp	r2, r3
   1407e:	d0f4      	beq.n	1406a <db_hash_commit+0x62>
		*end = new_end;
   14080:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14084:	8363      	strh	r3, [r4, #26]
   14086:	e7e4      	b.n	14052 <db_hash_commit+0x4a>
	if (*end < new_end) {
   14088:	429a      	cmp	r2, r3
		*start = new_start;
   1408a:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1408c:	d0e1      	beq.n	14052 <db_hash_commit+0x4a>
   1408e:	e7f7      	b.n	14080 <db_hash_commit+0x78>
   14090:	20008eb8 	.word	0x20008eb8
   14094:	2000b728 	.word	0x2000b728
   14098:	2000b738 	.word	0x2000b738
   1409c:	20008f08 	.word	0x20008f08
   140a0:	20008f38 	.word	0x20008f38
   140a4:	20008ee8 	.word	0x20008ee8
   140a8:	ffff0001 	.word	0xffff0001
   140ac:	20009630 	.word	0x20009630

000140b0 <ccc_set_direct>:
{
   140b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   140b4:	b0b9      	sub	sp, #228	; 0xe4
   140b6:	4688      	mov	r8, r1
   140b8:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   140ba:	492c      	ldr	r1, [pc, #176]	; (1416c <ccc_set_direct+0xbc>)
   140bc:	466a      	mov	r2, sp
   140be:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   140c0:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   140c2:	f009 f900 	bl	1d2c6 <settings_name_steq>
   140c6:	b948      	cbnz	r0, 140dc <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   140c8:	2145      	movs	r1, #69	; 0x45
   140ca:	4829      	ldr	r0, [pc, #164]	; (14170 <ccc_set_direct+0xc0>)
   140cc:	f008 fc64 	bl	1c998 <printk>
   140d0:	f06f 0515 	mvn.w	r5, #21
}
   140d4:	4628      	mov	r0, r5
   140d6:	b039      	add	sp, #228	; 0xe4
   140d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   140dc:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   140de:	a901      	add	r1, sp, #4
   140e0:	4620      	mov	r0, r4
   140e2:	f009 f913 	bl	1d30c <settings_name_next>
		if (!name) {
   140e6:	b93c      	cbnz	r4, 140f8 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   140e8:	2145      	movs	r1, #69	; 0x45
   140ea:	4822      	ldr	r0, [pc, #136]	; (14174 <ccc_set_direct+0xc4>)
   140ec:	f008 fc54 	bl	1c998 <printk>
			return -EINVAL;
   140f0:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   140f4:	4625      	mov	r5, r4
   140f6:	e7ed      	b.n	140d4 <ccc_set_direct+0x24>
		} else if (!next) {
   140f8:	9801      	ldr	r0, [sp, #4]
   140fa:	b978      	cbnz	r0, 1411c <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   140fc:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   14100:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   14104:	4649      	mov	r1, r9
   14106:	4620      	mov	r0, r4
   14108:	f00a f975 	bl	1e3f6 <bt_settings_decode_key>
		if (err) {
   1410c:	4605      	mov	r5, r0
   1410e:	b150      	cbz	r0, 14126 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   14110:	4622      	mov	r2, r4
   14112:	2145      	movs	r1, #69	; 0x45
   14114:	4818      	ldr	r0, [pc, #96]	; (14178 <ccc_set_direct+0xc8>)
   14116:	f008 fc3f 	bl	1c998 <printk>
   1411a:	e7e9      	b.n	140f0 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   1411c:	220a      	movs	r2, #10
   1411e:	2100      	movs	r1, #0
   14120:	f00a f804 	bl	1e12c <strtol>
   14124:	e7ea      	b.n	140fc <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   14126:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1412a:	f1b8 0f00 	cmp.w	r8, #0
   1412e:	d019      	beq.n	14164 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   14130:	f10d 0820 	add.w	r8, sp, #32
   14134:	22c0      	movs	r2, #192	; 0xc0
   14136:	4641      	mov	r1, r8
   14138:	4638      	mov	r0, r7
   1413a:	47b0      	blx	r6
			if (len < 0) {
   1413c:	1e04      	subs	r4, r0, #0
   1413e:	da05      	bge.n	1414c <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   14140:	4622      	mov	r2, r4
   14142:	2145      	movs	r1, #69	; 0x45
   14144:	480d      	ldr	r0, [pc, #52]	; (1417c <ccc_set_direct+0xcc>)
   14146:	f008 fc27 	bl	1c998 <printk>
				return len;
   1414a:	e7d3      	b.n	140f4 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   1414c:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1414e:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   14152:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   14154:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14158:	2001      	movs	r0, #1
   1415a:	4a09      	ldr	r2, [pc, #36]	; (14180 <ccc_set_direct+0xd0>)
   1415c:	ab04      	add	r3, sp, #16
   1415e:	f00b fc42 	bl	1f9e6 <bt_gatt_foreach_attr>
	return 0;
   14162:	e7b7      	b.n	140d4 <ccc_set_direct+0x24>
			load.count = 0;
   14164:	e9cd 0006 	strd	r0, r0, [sp, #24]
   14168:	e7f4      	b.n	14154 <ccc_set_direct+0xa4>
   1416a:	bf00      	nop
   1416c:	00025479 	.word	0x00025479
   14170:	00025480 	.word	0x00025480
   14174:	00023fad 	.word	0x00023fad
   14178:	000252e8 	.word	0x000252e8
   1417c:	000251fa 	.word	0x000251fa
   14180:	000138b9 	.word	0x000138b9

00014184 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   14184:	2300      	movs	r3, #0
{
   14186:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   14188:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1418a:	f7ff fe51 	bl	13e30 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1418e:	1c41      	adds	r1, r0, #1
   14190:	b289      	uxth	r1, r1
   14192:	4608      	mov	r0, r1
   14194:	4a03      	ldr	r2, [pc, #12]	; (141a4 <bt_gatt_attr_next+0x20>)
   14196:	ab01      	add	r3, sp, #4
   14198:	f00b fc25 	bl	1f9e6 <bt_gatt_foreach_attr>
}
   1419c:	9801      	ldr	r0, [sp, #4]
   1419e:	b003      	add	sp, #12
   141a0:	f85d fb04 	ldr.w	pc, [sp], #4
   141a4:	0001f4a3 	.word	0x0001f4a3

000141a8 <bt_gatt_notify_cb>:
{
   141a8:	b530      	push	{r4, r5, lr}
   141aa:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   141ac:	460d      	mov	r5, r1
{
   141ae:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   141b0:	b951      	cbnz	r1, 141c8 <bt_gatt_notify_cb+0x20>
   141b2:	4940      	ldr	r1, [pc, #256]	; (142b4 <bt_gatt_notify_cb+0x10c>)
   141b4:	4840      	ldr	r0, [pc, #256]	; (142b8 <bt_gatt_notify_cb+0x110>)
   141b6:	f640 023d 	movw	r2, #2109	; 0x83d
   141ba:	f008 fbed 	bl	1c998 <printk>
   141be:	f640 013d 	movw	r1, #2109	; 0x83d
   141c2:	483c      	ldr	r0, [pc, #240]	; (142b4 <bt_gatt_notify_cb+0x10c>)
   141c4:	f008 fe8e 	bl	1cee4 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   141c8:	686b      	ldr	r3, [r5, #4]
   141ca:	b953      	cbnz	r3, 141e2 <bt_gatt_notify_cb+0x3a>
   141cc:	4939      	ldr	r1, [pc, #228]	; (142b4 <bt_gatt_notify_cb+0x10c>)
   141ce:	483a      	ldr	r0, [pc, #232]	; (142b8 <bt_gatt_notify_cb+0x110>)
   141d0:	f640 023e 	movw	r2, #2110	; 0x83e
   141d4:	f008 fbe0 	bl	1c998 <printk>
   141d8:	f640 013e 	movw	r1, #2110	; 0x83e
   141dc:	4835      	ldr	r0, [pc, #212]	; (142b4 <bt_gatt_notify_cb+0x10c>)
   141de:	f008 fe81 	bl	1cee4 <assert_post_action>
   141e2:	4836      	ldr	r0, [pc, #216]	; (142bc <bt_gatt_notify_cb+0x114>)
   141e4:	f00b fa38 	bl	1f658 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   141e8:	0782      	lsls	r2, r0, #30
   141ea:	d55d      	bpl.n	142a8 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   141ec:	6868      	ldr	r0, [r5, #4]
   141ee:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   141f0:	b114      	cbz	r4, 141f8 <bt_gatt_notify_cb+0x50>
   141f2:	7b63      	ldrb	r3, [r4, #13]
   141f4:	2b07      	cmp	r3, #7
   141f6:	d15a      	bne.n	142ae <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   141f8:	f7ff fe1a 	bl	13e30 <bt_gatt_attr_get_handle>
   141fc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14200:	b918      	cbnz	r0, 1420a <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   14202:	f06f 0001 	mvn.w	r0, #1
}
   14206:	b00b      	add	sp, #44	; 0x2c
   14208:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1420a:	682a      	ldr	r2, [r5, #0]
   1420c:	b9aa      	cbnz	r2, 1423a <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1420e:	9b05      	ldr	r3, [sp, #20]
   14210:	a904      	add	r1, sp, #16
   14212:	6818      	ldr	r0, [r3, #0]
   14214:	2300      	movs	r3, #0
   14216:	f88d 3010 	strb.w	r3, [sp, #16]
   1421a:	f642 0303 	movw	r3, #10243	; 0x2803
   1421e:	f8ad 3012 	strh.w	r3, [sp, #18]
   14222:	f00a f90c 	bl	1e43e <bt_uuid_cmp>
   14226:	b1c0      	cbz	r0, 1425a <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   14228:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1422c:	b314      	cbz	r4, 14274 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   1422e:	4601      	mov	r1, r0
   14230:	462a      	mov	r2, r5
   14232:	4620      	mov	r0, r4
   14234:	f7ff fbd8 	bl	139e8 <gatt_notify>
   14238:	e7e5      	b.n	14206 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1423a:	a905      	add	r1, sp, #20
   1423c:	9102      	str	r1, [sp, #8]
   1423e:	4920      	ldr	r1, [pc, #128]	; (142c0 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   14240:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14242:	9101      	str	r1, [sp, #4]
   14244:	2101      	movs	r1, #1
   14246:	9100      	str	r1, [sp, #0]
   14248:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1424c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1424e:	f7ff fe33 	bl	13eb8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14252:	9b05      	ldr	r3, [sp, #20]
   14254:	2b00      	cmp	r3, #0
   14256:	d1da      	bne.n	1420e <bt_gatt_notify_cb+0x66>
   14258:	e7d3      	b.n	14202 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1425a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1425c:	68c3      	ldr	r3, [r0, #12]
   1425e:	799b      	ldrb	r3, [r3, #6]
   14260:	06db      	lsls	r3, r3, #27
   14262:	d402      	bmi.n	1426a <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   14264:	f06f 0015 	mvn.w	r0, #21
   14268:	e7cd      	b.n	14206 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1426a:	f00b fb6e 	bl	1f94a <bt_gatt_attr_value_handle>
   1426e:	f8ad 0018 	strh.w	r0, [sp, #24]
   14272:	e7d9      	b.n	14228 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   14274:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14278:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1427c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1427e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14280:	f8ad 2012 	strh.w	r2, [sp, #18]
   14284:	aa05      	add	r2, sp, #20
   14286:	9202      	str	r2, [sp, #8]
   14288:	4a0e      	ldr	r2, [pc, #56]	; (142c4 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   1428a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1428e:	e9cd 3200 	strd	r3, r2, [sp]
   14292:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14296:	4623      	mov	r3, r4
   14298:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1429a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1429c:	f88d 4010 	strb.w	r4, [sp, #16]
   142a0:	f7ff fe0a 	bl	13eb8 <bt_gatt_foreach_attr_type>
	return data.err;
   142a4:	9807      	ldr	r0, [sp, #28]
   142a6:	e7ae      	b.n	14206 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   142a8:	f06f 000a 	mvn.w	r0, #10
   142ac:	e7ab      	b.n	14206 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   142ae:	f06f 0038 	mvn.w	r0, #56	; 0x38
   142b2:	e7a8      	b.n	14206 <bt_gatt_notify_cb+0x5e>
   142b4:	0002540d 	.word	0x0002540d
   142b8:	00022dd6 	.word	0x00022dd6
   142bc:	20008094 	.word	0x20008094
   142c0:	0001f4f1 	.word	0x0001f4f1
   142c4:	00013a49 	.word	0x00013a49

000142c8 <bt_gatt_indicate>:
{
   142c8:	b530      	push	{r4, r5, lr}
   142ca:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   142cc:	460c      	mov	r4, r1
{
   142ce:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   142d0:	b951      	cbnz	r1, 142e8 <bt_gatt_indicate+0x20>
   142d2:	4942      	ldr	r1, [pc, #264]	; (143dc <bt_gatt_indicate+0x114>)
   142d4:	4842      	ldr	r0, [pc, #264]	; (143e0 <bt_gatt_indicate+0x118>)
   142d6:	f640 0289 	movw	r2, #2185	; 0x889
   142da:	f008 fb5d 	bl	1c998 <printk>
   142de:	f640 0189 	movw	r1, #2185	; 0x889
   142e2:	483e      	ldr	r0, [pc, #248]	; (143dc <bt_gatt_indicate+0x114>)
   142e4:	f008 fdfe 	bl	1cee4 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   142e8:	6863      	ldr	r3, [r4, #4]
   142ea:	b953      	cbnz	r3, 14302 <bt_gatt_indicate+0x3a>
   142ec:	493b      	ldr	r1, [pc, #236]	; (143dc <bt_gatt_indicate+0x114>)
   142ee:	483c      	ldr	r0, [pc, #240]	; (143e0 <bt_gatt_indicate+0x118>)
   142f0:	f640 028a 	movw	r2, #2186	; 0x88a
   142f4:	f008 fb50 	bl	1c998 <printk>
   142f8:	f640 018a 	movw	r1, #2186	; 0x88a
   142fc:	4837      	ldr	r0, [pc, #220]	; (143dc <bt_gatt_indicate+0x114>)
   142fe:	f008 fdf1 	bl	1cee4 <assert_post_action>
   14302:	4838      	ldr	r0, [pc, #224]	; (143e4 <bt_gatt_indicate+0x11c>)
   14304:	f00b f9a8 	bl	1f658 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14308:	0782      	lsls	r2, r0, #30
   1430a:	d561      	bpl.n	143d0 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   1430c:	6860      	ldr	r0, [r4, #4]
   1430e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14310:	b115      	cbz	r5, 14318 <bt_gatt_indicate+0x50>
   14312:	7b6b      	ldrb	r3, [r5, #13]
   14314:	2b07      	cmp	r3, #7
   14316:	d15e      	bne.n	143d6 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14318:	f7ff fd8a 	bl	13e30 <bt_gatt_attr_get_handle>
   1431c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14320:	b918      	cbnz	r0, 1432a <bt_gatt_indicate+0x62>
		return -ENOENT;
   14322:	f06f 0001 	mvn.w	r0, #1
}
   14326:	b00b      	add	sp, #44	; 0x2c
   14328:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1432a:	6822      	ldr	r2, [r4, #0]
   1432c:	b9ba      	cbnz	r2, 1435e <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1432e:	9b05      	ldr	r3, [sp, #20]
   14330:	a904      	add	r1, sp, #16
   14332:	6818      	ldr	r0, [r3, #0]
   14334:	2300      	movs	r3, #0
   14336:	f88d 3010 	strb.w	r3, [sp, #16]
   1433a:	f642 0303 	movw	r3, #10243	; 0x2803
   1433e:	f8ad 3012 	strh.w	r3, [sp, #18]
   14342:	f00a f87c 	bl	1e43e <bt_uuid_cmp>
   14346:	b1d0      	cbz	r0, 1437e <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   14348:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1434c:	b325      	cbz	r5, 14398 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   1434e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14350:	4601      	mov	r1, r0
   14352:	4622      	mov	r2, r4
   14354:	4628      	mov	r0, r5
		params->_ref = 1;
   14356:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   14358:	f7ff fb10 	bl	1397c <gatt_indicate>
   1435c:	e7e3      	b.n	14326 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1435e:	a905      	add	r1, sp, #20
   14360:	9102      	str	r1, [sp, #8]
   14362:	4921      	ldr	r1, [pc, #132]	; (143e8 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   14364:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14366:	9101      	str	r1, [sp, #4]
   14368:	2101      	movs	r1, #1
   1436a:	9100      	str	r1, [sp, #0]
   1436c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14370:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14372:	f7ff fda1 	bl	13eb8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14376:	9b05      	ldr	r3, [sp, #20]
   14378:	2b00      	cmp	r3, #0
   1437a:	d1d8      	bne.n	1432e <bt_gatt_indicate+0x66>
   1437c:	e7d1      	b.n	14322 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1437e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14380:	68c3      	ldr	r3, [r0, #12]
   14382:	799b      	ldrb	r3, [r3, #6]
   14384:	069b      	lsls	r3, r3, #26
   14386:	d402      	bmi.n	1438e <bt_gatt_indicate+0xc6>
			return -EINVAL;
   14388:	f06f 0015 	mvn.w	r0, #21
   1438c:	e7cb      	b.n	14326 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1438e:	f00b fadc 	bl	1f94a <bt_gatt_attr_value_handle>
   14392:	f8ad 0018 	strh.w	r0, [sp, #24]
   14396:	e7d7      	b.n	14348 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   14398:	f06f 0338 	mvn.w	r3, #56	; 0x38
   1439c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1439e:	2302      	movs	r3, #2
   143a0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143a4:	f642 1302 	movw	r3, #10498	; 0x2902
   143a8:	f8ad 3012 	strh.w	r3, [sp, #18]
   143ac:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   143ae:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143b0:	9302      	str	r3, [sp, #8]
   143b2:	4b0e      	ldr	r3, [pc, #56]	; (143ec <bt_gatt_indicate+0x124>)
   143b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   143b8:	9301      	str	r3, [sp, #4]
   143ba:	2301      	movs	r3, #1
   143bc:	aa04      	add	r2, sp, #16
   143be:	9300      	str	r3, [sp, #0]
   143c0:	462b      	mov	r3, r5
	data.ind_params = params;
   143c2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143c4:	f88d 5010 	strb.w	r5, [sp, #16]
   143c8:	f7ff fd76 	bl	13eb8 <bt_gatt_foreach_attr_type>
	return data.err;
   143cc:	9807      	ldr	r0, [sp, #28]
   143ce:	e7aa      	b.n	14326 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   143d0:	f06f 000a 	mvn.w	r0, #10
   143d4:	e7a7      	b.n	14326 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   143d6:	f06f 0038 	mvn.w	r0, #56	; 0x38
   143da:	e7a4      	b.n	14326 <bt_gatt_indicate+0x5e>
   143dc:	0002540d 	.word	0x0002540d
   143e0:	00022dd6 	.word	0x00022dd6
   143e4:	20008094 	.word	0x20008094
   143e8:	0001f4f1 	.word	0x0001f4f1
   143ec:	00013a49 	.word	0x00013a49

000143f0 <sc_process>:
{
   143f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   143f2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   143f6:	4604      	mov	r4, r0
   143f8:	4628      	mov	r0, r5
   143fa:	f00b f92d 	bl	1f658 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   143fe:	0783      	lsls	r3, r0, #30
   14400:	d50a      	bpl.n	14418 <sc_process+0x28>
   14402:	491b      	ldr	r1, [pc, #108]	; (14470 <sc_process+0x80>)
   14404:	481b      	ldr	r0, [pc, #108]	; (14474 <sc_process+0x84>)
   14406:	f240 32ae 	movw	r2, #942	; 0x3ae
   1440a:	f008 fac5 	bl	1c998 <printk>
   1440e:	f240 31ae 	movw	r1, #942	; 0x3ae
   14412:	4817      	ldr	r0, [pc, #92]	; (14470 <sc_process+0x80>)
   14414:	f008 fd66 	bl	1cee4 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   14418:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1441c:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   14420:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   14424:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14428:	e8d5 3fef 	ldaex	r3, [r5]
   1442c:	f023 0301 	bic.w	r3, r3, #1
   14430:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14434:	2a00      	cmp	r2, #0
   14436:	d1f7      	bne.n	14428 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14438:	4b0f      	ldr	r3, [pc, #60]	; (14478 <sc_process+0x88>)
	sc->start = 0U;
   1443a:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1443c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14440:	4b0e      	ldr	r3, [pc, #56]	; (1447c <sc_process+0x8c>)
	sc->start = 0U;
   14442:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   14446:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1444a:	ab01      	add	r3, sp, #4
   1444c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   14450:	2304      	movs	r3, #4
	sc->end = 0U;
   14452:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   14456:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1445a:	f1a4 0120 	sub.w	r1, r4, #32
   1445e:	f7ff ff33 	bl	142c8 <bt_gatt_indicate>
   14462:	b918      	cbnz	r0, 1446c <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14464:	2102      	movs	r1, #2
   14466:	4628      	mov	r0, r5
   14468:	f00b f8eb 	bl	1f642 <atomic_or>
}
   1446c:	b003      	add	sp, #12
   1446e:	bd30      	pop	{r4, r5, pc}
   14470:	0002540d 	.word	0x0002540d
   14474:	00022dd6 	.word	0x00022dd6
   14478:	000222a4 	.word	0x000222a4
   1447c:	00013d11 	.word	0x00013d11

00014480 <update_ccc>:
{
   14480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14484:	4b3d      	ldr	r3, [pc, #244]	; (1457c <update_ccc+0xfc>)
{
   14486:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14488:	6882      	ldr	r2, [r0, #8]
{
   1448a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1448c:	429a      	cmp	r2, r3
   1448e:	d170      	bne.n	14572 <update_ccc+0xf2>
	ccc = attr->user_data;
   14490:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   14494:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   14496:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 14580 <update_ccc+0x100>
   1449a:	f108 0601 	add.w	r6, r8, #1
   1449e:	f108 091f 	add.w	r9, r8, #31
		if (!cfg->value ||
   144a2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   144a6:	b19b      	cbz	r3, 144d0 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   144a8:	4632      	mov	r2, r6
   144aa:	4620      	mov	r0, r4
   144ac:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   144b0:	f00a faf7 	bl	1eaa2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   144b4:	b160      	cbz	r0, 144d0 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   144b6:	222a      	movs	r2, #42	; 0x2a
   144b8:	4629      	mov	r1, r5
   144ba:	4620      	mov	r0, r4
   144bc:	f00b faa1 	bl	1fa02 <bt_gatt_check_perm>
		if (err) {
   144c0:	b1d8      	cbz	r0, 144fa <update_ccc+0x7a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   144c2:	2803      	cmp	r0, #3
   144c4:	d108      	bne.n	144d8 <update_ccc+0x58>
				BT_WARN("CCC %p not writable", attr);
   144c6:	462a      	mov	r2, r5
   144c8:	2157      	movs	r1, #87	; 0x57
   144ca:	4650      	mov	r0, sl
   144cc:	f008 fa64 	bl	1c998 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   144d0:	360a      	adds	r6, #10
   144d2:	454e      	cmp	r6, r9
   144d4:	d1e5      	bne.n	144a2 <update_ccc+0x22>
   144d6:	e04c      	b.n	14572 <update_ccc+0xf2>
				sec = BT_SECURITY_L3;
   144d8:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   144da:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   144dc:	bf14      	ite	ne
   144de:	f04f 0b02 	movne.w	fp, #2
   144e2:	f04f 0b03 	moveq.w	fp, #3
			    bt_conn_get_security(conn) < sec) {
   144e6:	f00a fad1 	bl	1ea8c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   144ea:	4583      	cmp	fp, r0
   144ec:	d905      	bls.n	144fa <update_ccc+0x7a>
				if (data->sec < sec) {
   144ee:	793b      	ldrb	r3, [r7, #4]
   144f0:	455b      	cmp	r3, fp
   144f2:	d2ed      	bcs.n	144d0 <update_ccc+0x50>
					data->sec = sec;
   144f4:	f887 b004 	strb.w	fp, [r7, #4]
   144f8:	e7ea      	b.n	144d0 <update_ccc+0x50>
		gatt_ccc_changed(attr, ccc);
   144fa:	4641      	mov	r1, r8
   144fc:	4628      	mov	r0, r5
   144fe:	f00a ffd3 	bl	1f4a8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   14502:	4b20      	ldr	r3, [pc, #128]	; (14584 <update_ccc+0x104>)
   14504:	4598      	cmp	r8, r3
   14506:	d134      	bne.n	14572 <update_ccc+0xf2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   14508:	7a20      	ldrb	r0, [r4, #8]
   1450a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1450e:	f7fe ff5d 	bl	133cc <find_sc_cfg>
	if (!cfg) {
   14512:	4605      	mov	r5, r0
   14514:	b368      	cbz	r0, 14572 <update_ccc+0xf2>
	if (!(cfg->data.start || cfg->data.end)) {
   14516:	8902      	ldrh	r2, [r0, #8]
   14518:	8943      	ldrh	r3, [r0, #10]
   1451a:	ea52 0103 	orrs.w	r1, r2, r3
   1451e:	d028      	beq.n	14572 <update_ccc+0xf2>
	index = bt_conn_index(conn);
   14520:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   14522:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   14526:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1452a:	f7fd fc5f 	bl	11dec <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1452e:	2318      	movs	r3, #24
   14530:	4915      	ldr	r1, [pc, #84]	; (14588 <update_ccc+0x108>)
   14532:	4a16      	ldr	r2, [pc, #88]	; (1458c <update_ccc+0x10c>)
   14534:	fb03 1300 	mla	r3, r3, r0, r1
   14538:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1453a:	4a15      	ldr	r2, [pc, #84]	; (14590 <update_ccc+0x110>)
   1453c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1453e:	aa01      	add	r2, sp, #4
   14540:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   14542:	2204      	movs	r2, #4
   14544:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14546:	b203      	sxth	r3, r0
   14548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1454c:	4620      	mov	r0, r4
   1454e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   14552:	f7ff feb9 	bl	142c8 <bt_gatt_indicate>
   14556:	b118      	cbz	r0, 14560 <update_ccc+0xe0>
		BT_ERR("SC restore indication failed");
   14558:	2145      	movs	r1, #69	; 0x45
   1455a:	480e      	ldr	r0, [pc, #56]	; (14594 <update_ccc+0x114>)
   1455c:	f008 fa1c 	bl	1c998 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   14560:	2204      	movs	r2, #4
   14562:	2100      	movs	r1, #0
   14564:	f105 0008 	add.w	r0, r5, #8
   14568:	f009 fef9 	bl	1e35e <memset>
		sc_store(cfg);
   1456c:	4628      	mov	r0, r5
   1456e:	f7ff f837 	bl	135e0 <sc_store>
}
   14572:	2001      	movs	r0, #1
   14574:	b003      	add	sp, #12
   14576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1457a:	bf00      	nop
   1457c:	00013481 	.word	0x00013481
   14580:	00025491 	.word	0x00025491
   14584:	20008388 	.word	0x20008388
   14588:	20009cb0 	.word	0x20009cb0
   1458c:	000222a4 	.word	0x000222a4
   14590:	0001f901 	.word	0x0001f901
   14594:	000254aa 	.word	0x000254aa

00014598 <bt_gatt_is_subscribed>:
{
   14598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1459a:	460c      	mov	r4, r1
   1459c:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1459e:	4606      	mov	r6, r0
   145a0:	b950      	cbnz	r0, 145b8 <bt_gatt_is_subscribed+0x20>
   145a2:	4930      	ldr	r1, [pc, #192]	; (14664 <bt_gatt_is_subscribed+0xcc>)
   145a4:	4830      	ldr	r0, [pc, #192]	; (14668 <bt_gatt_is_subscribed+0xd0>)
   145a6:	f640 12b5 	movw	r2, #2485	; 0x9b5
   145aa:	f008 f9f5 	bl	1c998 <printk>
   145ae:	f640 11b5 	movw	r1, #2485	; 0x9b5
   145b2:	482c      	ldr	r0, [pc, #176]	; (14664 <bt_gatt_is_subscribed+0xcc>)
   145b4:	f008 fc96 	bl	1cee4 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   145b8:	b954      	cbnz	r4, 145d0 <bt_gatt_is_subscribed+0x38>
   145ba:	492a      	ldr	r1, [pc, #168]	; (14664 <bt_gatt_is_subscribed+0xcc>)
   145bc:	482a      	ldr	r0, [pc, #168]	; (14668 <bt_gatt_is_subscribed+0xd0>)
   145be:	f640 12b6 	movw	r2, #2486	; 0x9b6
   145c2:	f008 f9e9 	bl	1c998 <printk>
   145c6:	f640 11b6 	movw	r1, #2486	; 0x9b6
   145ca:	4826      	ldr	r0, [pc, #152]	; (14664 <bt_gatt_is_subscribed+0xcc>)
   145cc:	f008 fc8a 	bl	1cee4 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   145d0:	7b73      	ldrb	r3, [r6, #13]
   145d2:	2b07      	cmp	r3, #7
   145d4:	d130      	bne.n	14638 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   145d6:	2300      	movs	r3, #0
   145d8:	f88d 3004 	strb.w	r3, [sp, #4]
   145dc:	f642 0303 	movw	r3, #10243	; 0x2803
   145e0:	6820      	ldr	r0, [r4, #0]
   145e2:	a901      	add	r1, sp, #4
   145e4:	f8ad 3006 	strh.w	r3, [sp, #6]
   145e8:	f009 ff29 	bl	1e43e <bt_uuid_cmp>
   145ec:	b940      	cbnz	r0, 14600 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   145ee:	68e3      	ldr	r3, [r4, #12]
   145f0:	799b      	ldrb	r3, [r3, #6]
   145f2:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   145f6:	d020      	beq.n	1463a <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   145f8:	4620      	mov	r0, r4
   145fa:	f7ff fdc3 	bl	14184 <bt_gatt_attr_next>
   145fe:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14600:	2300      	movs	r3, #0
   14602:	6820      	ldr	r0, [r4, #0]
   14604:	f88d 3004 	strb.w	r3, [sp, #4]
   14608:	f642 1302 	movw	r3, #10498	; 0x2902
   1460c:	a901      	add	r1, sp, #4
   1460e:	f8ad 3006 	strh.w	r3, [sp, #6]
   14612:	f009 ff14 	bl	1e43e <bt_uuid_cmp>
   14616:	b118      	cbz	r0, 14620 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   14618:	4620      	mov	r0, r4
   1461a:	f7ff fdb3 	bl	14184 <bt_gatt_attr_next>
   1461e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14620:	2500      	movs	r5, #0
   14622:	f642 1302 	movw	r3, #10498	; 0x2902
   14626:	6820      	ldr	r0, [r4, #0]
   14628:	a901      	add	r1, sp, #4
   1462a:	f88d 5004 	strb.w	r5, [sp, #4]
   1462e:	f8ad 3006 	strh.w	r3, [sp, #6]
   14632:	f009 ff04 	bl	1e43e <bt_uuid_cmp>
   14636:	b110      	cbz	r0, 1463e <bt_gatt_is_subscribed+0xa6>
		return false;
   14638:	2000      	movs	r0, #0
}
   1463a:	b003      	add	sp, #12
   1463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1463e:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   14640:	1c6c      	adds	r4, r5, #1
   14642:	351f      	adds	r5, #31
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   14644:	4622      	mov	r2, r4
   14646:	4630      	mov	r0, r6
   14648:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1464c:	f00a fa29 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   14650:	b118      	cbz	r0, 1465a <bt_gatt_is_subscribed+0xc2>
   14652:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   14656:	421f      	tst	r7, r3
   14658:	d1ef      	bne.n	1463a <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1465a:	340a      	adds	r4, #10
   1465c:	42ac      	cmp	r4, r5
   1465e:	d1f1      	bne.n	14644 <bt_gatt_is_subscribed+0xac>
   14660:	e7ea      	b.n	14638 <bt_gatt_is_subscribed+0xa0>
   14662:	bf00      	nop
   14664:	0002540d 	.word	0x0002540d
   14668:	00022dd6 	.word	0x00022dd6

0001466c <bt_gatt_discover>:
{
   1466c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1466e:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14670:	4605      	mov	r5, r0
{
   14672:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   14674:	b950      	cbnz	r0, 1468c <bt_gatt_discover+0x20>
   14676:	4989      	ldr	r1, [pc, #548]	; (1489c <bt_gatt_discover+0x230>)
   14678:	4889      	ldr	r0, [pc, #548]	; (148a0 <bt_gatt_discover+0x234>)
   1467a:	f640 5277 	movw	r2, #3447	; 0xd77
   1467e:	f008 f98b 	bl	1c998 <printk>
   14682:	f640 5177 	movw	r1, #3447	; 0xd77
   14686:	4885      	ldr	r0, [pc, #532]	; (1489c <bt_gatt_discover+0x230>)
   14688:	f008 fc2c 	bl	1cee4 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1468c:	b10c      	cbz	r4, 14692 <bt_gatt_discover+0x26>
   1468e:	6863      	ldr	r3, [r4, #4]
   14690:	b953      	cbnz	r3, 146a8 <bt_gatt_discover+0x3c>
   14692:	4982      	ldr	r1, [pc, #520]	; (1489c <bt_gatt_discover+0x230>)
   14694:	4882      	ldr	r0, [pc, #520]	; (148a0 <bt_gatt_discover+0x234>)
   14696:	f640 5278 	movw	r2, #3448	; 0xd78
   1469a:	f008 f97d 	bl	1c998 <printk>
   1469e:	f640 5178 	movw	r1, #3448	; 0xd78
   146a2:	487e      	ldr	r0, [pc, #504]	; (1489c <bt_gatt_discover+0x230>)
   146a4:	f008 fc1e 	bl	1cee4 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   146a8:	8923      	ldrh	r3, [r4, #8]
   146aa:	b10b      	cbz	r3, 146b0 <bt_gatt_discover+0x44>
   146ac:	89e3      	ldrh	r3, [r4, #14]
   146ae:	b953      	cbnz	r3, 146c6 <bt_gatt_discover+0x5a>
   146b0:	497a      	ldr	r1, [pc, #488]	; (1489c <bt_gatt_discover+0x230>)
   146b2:	487b      	ldr	r0, [pc, #492]	; (148a0 <bt_gatt_discover+0x234>)
   146b4:	f640 5279 	movw	r2, #3449	; 0xd79
   146b8:	f008 f96e 	bl	1c998 <printk>
   146bc:	f640 5179 	movw	r1, #3449	; 0xd79
   146c0:	4876      	ldr	r0, [pc, #472]	; (1489c <bt_gatt_discover+0x230>)
   146c2:	f008 fc0f 	bl	1cee4 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   146c6:	8922      	ldrh	r2, [r4, #8]
   146c8:	89e3      	ldrh	r3, [r4, #14]
   146ca:	429a      	cmp	r2, r3
   146cc:	d90a      	bls.n	146e4 <bt_gatt_discover+0x78>
   146ce:	4973      	ldr	r1, [pc, #460]	; (1489c <bt_gatt_discover+0x230>)
   146d0:	4873      	ldr	r0, [pc, #460]	; (148a0 <bt_gatt_discover+0x234>)
   146d2:	f640 527b 	movw	r2, #3451	; 0xd7b
   146d6:	f008 f95f 	bl	1c998 <printk>
   146da:	f640 517b 	movw	r1, #3451	; 0xd7b
   146de:	486f      	ldr	r0, [pc, #444]	; (1489c <bt_gatt_discover+0x230>)
   146e0:	f008 fc00 	bl	1cee4 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   146e4:	7b6b      	ldrb	r3, [r5, #13]
   146e6:	2b07      	cmp	r3, #7
   146e8:	f040 80d5 	bne.w	14896 <bt_gatt_discover+0x22a>
	switch (params->type) {
   146ec:	7c22      	ldrb	r2, [r4, #16]
   146ee:	2a05      	cmp	r2, #5
   146f0:	f200 80cc 	bhi.w	1488c <bt_gatt_discover+0x220>
   146f4:	e8df f002 	tbb	[pc, r2]
   146f8:	64640303 	.word	0x64640303
   146fc:	b683      	.short	0xb683
		if (params->uuid) {
   146fe:	6823      	ldr	r3, [r4, #0]
   14700:	2b00      	cmp	r3, #0
   14702:	d03e      	beq.n	14782 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   14704:	2206      	movs	r2, #6
   14706:	4628      	mov	r0, r5
   14708:	4611      	mov	r1, r2
   1470a:	f7fe f9d3 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   1470e:	4606      	mov	r6, r0
   14710:	b918      	cbnz	r0, 1471a <bt_gatt_discover+0xae>
		return -ENOMEM;
   14712:	f06f 000b 	mvn.w	r0, #11
}
   14716:	b005      	add	sp, #20
   14718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1471a:	f100 0708 	add.w	r7, r0, #8
   1471e:	2106      	movs	r1, #6
   14720:	4638      	mov	r0, r7
   14722:	f003 f8b9 	bl	17898 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14726:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   14728:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1472a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1472c:	89e3      	ldrh	r3, [r4, #14]
   1472e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14730:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   14732:	2b00      	cmp	r3, #0
   14734:	f642 0301 	movw	r3, #10241	; 0x2801
   14738:	bf08      	it	eq
   1473a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   1473e:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   14740:	780a      	ldrb	r2, [r1, #0]
   14742:	b15a      	cbz	r2, 1475c <bt_gatt_discover+0xf0>
   14744:	2a02      	cmp	r2, #2
   14746:	d016      	beq.n	14776 <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   14748:	4856      	ldr	r0, [pc, #344]	; (148a4 <bt_gatt_discover+0x238>)
   1474a:	2145      	movs	r1, #69	; 0x45
   1474c:	f008 f924 	bl	1c998 <printk>
		net_buf_unref(buf);
   14750:	4630      	mov	r0, r6
   14752:	f002 ff8b 	bl	1766c <net_buf_unref>
	return -EINVAL;
   14756:	f06f 0015 	mvn.w	r0, #21
   1475a:	e7dc      	b.n	14716 <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   1475c:	4638      	mov	r0, r7
   1475e:	8849      	ldrh	r1, [r1, #2]
   14760:	f00b ff75 	bl	2064e <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   14764:	4623      	mov	r3, r4
   14766:	4a50      	ldr	r2, [pc, #320]	; (148a8 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14768:	4631      	mov	r1, r6
   1476a:	4628      	mov	r0, r5
}
   1476c:	b005      	add	sp, #20
   1476e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14772:	f7fe bffd 	b.w	13770 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14776:	2210      	movs	r2, #16
   14778:	4638      	mov	r0, r7
   1477a:	3101      	adds	r1, #1
   1477c:	f00b ff54 	bl	20628 <net_buf_simple_add_mem>
   14780:	e7f0      	b.n	14764 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   14782:	2204      	movs	r2, #4
   14784:	2110      	movs	r1, #16
   14786:	4628      	mov	r0, r5
   14788:	f7fe f994 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   1478c:	4606      	mov	r6, r0
   1478e:	2800      	cmp	r0, #0
   14790:	d0bf      	beq.n	14712 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14792:	f100 0708 	add.w	r7, r0, #8
   14796:	2104      	movs	r1, #4
   14798:	4638      	mov	r0, r7
   1479a:	f003 f87d 	bl	17898 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1479e:	8923      	ldrh	r3, [r4, #8]
   147a0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   147a2:	89e3      	ldrh	r3, [r4, #14]
   147a4:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   147a6:	7c23      	ldrb	r3, [r4, #16]
   147a8:	b93b      	cbnz	r3, 147ba <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   147aa:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   147ae:	4638      	mov	r0, r7
   147b0:	f00b ff4d 	bl	2064e <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   147b4:	4623      	mov	r3, r4
   147b6:	4a3d      	ldr	r2, [pc, #244]	; (148ac <bt_gatt_discover+0x240>)
   147b8:	e7d6      	b.n	14768 <bt_gatt_discover+0xfc>
   147ba:	f642 0101 	movw	r1, #10241	; 0x2801
   147be:	e7f6      	b.n	147ae <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   147c0:	2204      	movs	r2, #4
   147c2:	2108      	movs	r1, #8
   147c4:	4628      	mov	r0, r5
   147c6:	f7fe f975 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   147ca:	4606      	mov	r6, r0
   147cc:	2800      	cmp	r0, #0
   147ce:	d0a0      	beq.n	14712 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   147d0:	f100 0708 	add.w	r7, r0, #8
   147d4:	2104      	movs	r1, #4
   147d6:	4638      	mov	r0, r7
   147d8:	f003 f85e 	bl	17898 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   147dc:	8923      	ldrh	r3, [r4, #8]
   147de:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   147e0:	89e3      	ldrh	r3, [r4, #14]
   147e2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   147e4:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   147e6:	4638      	mov	r0, r7
   147e8:	2b02      	cmp	r3, #2
   147ea:	bf0c      	ite	eq
   147ec:	f642 0102 	movweq	r1, #10242	; 0x2802
   147f0:	f642 0103 	movwne	r1, #10243	; 0x2803
   147f4:	f00b ff2b 	bl	2064e <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   147f8:	4623      	mov	r3, r4
   147fa:	4a2d      	ldr	r2, [pc, #180]	; (148b0 <bt_gatt_discover+0x244>)
   147fc:	e7b4      	b.n	14768 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   147fe:	6820      	ldr	r0, [r4, #0]
   14800:	b380      	cbz	r0, 14864 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   14802:	2600      	movs	r6, #0
   14804:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14808:	4669      	mov	r1, sp
   1480a:	f88d 6000 	strb.w	r6, [sp]
   1480e:	f8ad 3002 	strh.w	r3, [sp, #2]
   14812:	f009 fe14 	bl	1e43e <bt_uuid_cmp>
		if (params->uuid &&
   14816:	2800      	cmp	r0, #0
   14818:	d09d      	beq.n	14756 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1481a:	f642 0301 	movw	r3, #10241	; 0x2801
   1481e:	6820      	ldr	r0, [r4, #0]
   14820:	a901      	add	r1, sp, #4
   14822:	f88d 6004 	strb.w	r6, [sp, #4]
   14826:	f8ad 3006 	strh.w	r3, [sp, #6]
   1482a:	f009 fe08 	bl	1e43e <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1482e:	2800      	cmp	r0, #0
   14830:	d091      	beq.n	14756 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   14832:	f642 0302 	movw	r3, #10242	; 0x2802
   14836:	6820      	ldr	r0, [r4, #0]
   14838:	a902      	add	r1, sp, #8
   1483a:	f88d 6008 	strb.w	r6, [sp, #8]
   1483e:	f8ad 300a 	strh.w	r3, [sp, #10]
   14842:	f009 fdfc 	bl	1e43e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   14846:	2800      	cmp	r0, #0
   14848:	d085      	beq.n	14756 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1484a:	f642 0303 	movw	r3, #10243	; 0x2803
   1484e:	6820      	ldr	r0, [r4, #0]
   14850:	a903      	add	r1, sp, #12
   14852:	f88d 600c 	strb.w	r6, [sp, #12]
   14856:	f8ad 300e 	strh.w	r3, [sp, #14]
   1485a:	f009 fdf0 	bl	1e43e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1485e:	2800      	cmp	r0, #0
   14860:	f43f af79 	beq.w	14756 <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   14864:	2204      	movs	r2, #4
   14866:	4628      	mov	r0, r5
   14868:	4611      	mov	r1, r2
   1486a:	f7fe f923 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   1486e:	4606      	mov	r6, r0
   14870:	2800      	cmp	r0, #0
   14872:	f43f af4e 	beq.w	14712 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14876:	2104      	movs	r1, #4
   14878:	3008      	adds	r0, #8
   1487a:	f003 f80d 	bl	17898 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1487e:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14880:	4a0c      	ldr	r2, [pc, #48]	; (148b4 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14882:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14884:	89e3      	ldrh	r3, [r4, #14]
   14886:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14888:	4623      	mov	r3, r4
   1488a:	e76d      	b.n	14768 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   1488c:	2145      	movs	r1, #69	; 0x45
   1488e:	480a      	ldr	r0, [pc, #40]	; (148b8 <bt_gatt_discover+0x24c>)
   14890:	f008 f882 	bl	1c998 <printk>
   14894:	e75f      	b.n	14756 <bt_gatt_discover+0xea>
		return -ENOTCONN;
   14896:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1489a:	e73c      	b.n	14716 <bt_gatt_discover+0xaa>
   1489c:	0002540d 	.word	0x0002540d
   148a0:	00022dd6 	.word	0x00022dd6
   148a4:	000254cc 	.word	0x000254cc
   148a8:	0001fa93 	.word	0x0001fa93
   148ac:	000148bd 	.word	0x000148bd
   148b0:	000149c5 	.word	0x000149c5
   148b4:	00014c75 	.word	0x00014c75
   148b8:	000254e6 	.word	0x000254e6

000148bc <gatt_read_group_rsp>:
{
   148bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148c0:	b08f      	sub	sp, #60	; 0x3c
   148c2:	4681      	mov	r9, r0
   148c4:	4617      	mov	r7, r2
   148c6:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   148c8:	b131      	cbz	r1, 148d8 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   148ca:	462a      	mov	r2, r5
   148cc:	2100      	movs	r1, #0
   148ce:	686b      	ldr	r3, [r5, #4]
}
   148d0:	b00f      	add	sp, #60	; 0x3c
   148d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   148d6:	4718      	bx	r3
	switch (rsp->len) {
   148d8:	7812      	ldrb	r2, [r2, #0]
   148da:	2a06      	cmp	r2, #6
   148dc:	d00d      	beq.n	148fa <gatt_read_group_rsp+0x3e>
   148de:	2a14      	cmp	r2, #20
   148e0:	d021      	beq.n	14926 <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   148e2:	2145      	movs	r1, #69	; 0x45
   148e4:	4836      	ldr	r0, [pc, #216]	; (149c0 <gatt_read_group_rsp+0x104>)
   148e6:	f008 f857 	bl	1c998 <printk>
	params->func(conn, NULL, params);
   148ea:	462a      	mov	r2, r5
   148ec:	2100      	movs	r1, #0
   148ee:	4648      	mov	r0, r9
   148f0:	686b      	ldr	r3, [r5, #4]
   148f2:	4798      	blx	r3
}
   148f4:	b00f      	add	sp, #60	; 0x3c
   148f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   148fa:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   148fe:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14900:	3b01      	subs	r3, #1
   14902:	b29c      	uxth	r4, r3
   14904:	f107 0801 	add.w	r8, r7, #1
   14908:	783b      	ldrb	r3, [r7, #0]
   1490a:	42a3      	cmp	r3, r4
   1490c:	d90f      	bls.n	1492e <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   1490e:	2c00      	cmp	r4, #0
   14910:	d1eb      	bne.n	148ea <gatt_read_group_rsp+0x2e>
   14912:	2e00      	cmp	r6, #0
   14914:	d0e9      	beq.n	148ea <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   14916:	462a      	mov	r2, r5
   14918:	4631      	mov	r1, r6
   1491a:	4648      	mov	r0, r9
}
   1491c:	b00f      	add	sp, #60	; 0x3c
   1491e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14922:	f00b b899 	b.w	1fa58 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14926:	2202      	movs	r2, #2
   14928:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   1492c:	e7e7      	b.n	148fe <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   1492e:	2214      	movs	r2, #20
   14930:	2100      	movs	r1, #0
   14932:	a809      	add	r0, sp, #36	; 0x24
   14934:	f009 fd13 	bl	1e35e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   14938:	f8b8 a000 	ldrh.w	sl, [r8]
   1493c:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   14940:	2b00      	cmp	r3, #0
   14942:	d0d2      	beq.n	148ea <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   14944:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   14948:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   1494c:	2e00      	cmp	r6, #0
   1494e:	d0cc      	beq.n	148ea <gatt_read_group_rsp+0x2e>
   14950:	42b3      	cmp	r3, r6
   14952:	d8ca      	bhi.n	148ea <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   14954:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14958:	b323      	cbz	r3, 149a4 <gatt_read_group_rsp+0xe8>
   1495a:	2b02      	cmp	r3, #2
   1495c:	d02a      	beq.n	149b4 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1495e:	f04f 0300 	mov.w	r3, #0
   14962:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14966:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14968:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1496a:	2b00      	cmp	r3, #0
   1496c:	f642 0301 	movw	r3, #10241	; 0x2801
   14970:	bf08      	it	eq
   14972:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14976:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1497a:	ab04      	add	r3, sp, #16
   1497c:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1497e:	ab01      	add	r3, sp, #4
   14980:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   14982:	ab02      	add	r3, sp, #8
   14984:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14986:	4648      	mov	r0, r9
   14988:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   1498a:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   1498e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14992:	a909      	add	r1, sp, #36	; 0x24
   14994:	4798      	blx	r3
   14996:	2800      	cmp	r0, #0
   14998:	d0ac      	beq.n	148f4 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1499a:	783a      	ldrb	r2, [r7, #0]
   1499c:	1aa4      	subs	r4, r4, r2
   1499e:	b2a4      	uxth	r4, r4
   149a0:	4490      	add	r8, r2
   149a2:	e7b1      	b.n	14908 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   149a4:	2202      	movs	r2, #2
   149a6:	f108 0104 	add.w	r1, r8, #4
   149aa:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   149ae:	f009 fcab 	bl	1e308 <memcpy>
			break;
   149b2:	e7d4      	b.n	1495e <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   149b4:	2210      	movs	r2, #16
   149b6:	f108 0104 	add.w	r1, r8, #4
   149ba:	f10d 0011 	add.w	r0, sp, #17
   149be:	e7f6      	b.n	149ae <gatt_read_group_rsp+0xf2>
   149c0:	00025506 	.word	0x00025506

000149c4 <gatt_read_type_rsp>:
{
   149c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c8:	b091      	sub	sp, #68	; 0x44
   149ca:	4607      	mov	r7, r0
   149cc:	4690      	mov	r8, r2
   149ce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   149d0:	b131      	cbz	r1, 149e0 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   149d2:	462a      	mov	r2, r5
   149d4:	2100      	movs	r1, #0
   149d6:	686b      	ldr	r3, [r5, #4]
}
   149d8:	b011      	add	sp, #68	; 0x44
   149da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   149de:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   149e0:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   149e2:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   149e4:	2802      	cmp	r0, #2
   149e6:	f040 8089 	bne.w	14afc <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   149ea:	2a06      	cmp	r2, #6
   149ec:	d01c      	beq.n	14a28 <gatt_read_type_rsp+0x64>
   149ee:	2a08      	cmp	r2, #8
   149f0:	f040 8088 	bne.w	14b04 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   149f4:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   149f8:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   149fa:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   149fc:	1e5c      	subs	r4, r3, #1
   149fe:	b2a4      	uxth	r4, r4
   14a00:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14a04:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   14a08:	f898 3000 	ldrb.w	r3, [r8]
   14a0c:	42a3      	cmp	r3, r4
   14a0e:	d90e      	bls.n	14a2e <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   14a10:	2c00      	cmp	r4, #0
   14a12:	d17b      	bne.n	14b0c <gatt_read_type_rsp+0x148>
   14a14:	2e00      	cmp	r6, #0
   14a16:	d079      	beq.n	14b0c <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   14a18:	462a      	mov	r2, r5
   14a1a:	4631      	mov	r1, r6
   14a1c:	4638      	mov	r0, r7
}
   14a1e:	b011      	add	sp, #68	; 0x44
   14a20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14a24:	f00b b818 	b.w	1fa58 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14a28:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   14a2c:	e7e4      	b.n	149f8 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   14a2e:	f8b9 3000 	ldrh.w	r3, [r9]
   14a32:	b29e      	uxth	r6, r3
		if (!handle) {
   14a34:	2e00      	cmp	r6, #0
   14a36:	d069      	beq.n	14b0c <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   14a38:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   14a3c:	f8ad 2014 	strh.w	r2, [sp, #20]
   14a40:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   14a42:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   14a46:	b291      	uxth	r1, r2
   14a48:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   14a4c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14a50:	b182      	cbz	r2, 14a74 <gatt_read_type_rsp+0xb0>
   14a52:	2a02      	cmp	r2, #2
   14a54:	d019      	beq.n	14a8a <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14a56:	6829      	ldr	r1, [r5, #0]
   14a58:	2900      	cmp	r1, #0
   14a5a:	d036      	beq.n	14aca <gatt_read_type_rsp+0x106>
   14a5c:	4650      	mov	r0, sl
   14a5e:	9301      	str	r3, [sp, #4]
   14a60:	f009 fced 	bl	1e43e <bt_uuid_cmp>
   14a64:	9b01      	ldr	r3, [sp, #4]
   14a66:	b380      	cbz	r0, 14aca <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14a68:	f898 2000 	ldrb.w	r2, [r8]
   14a6c:	1aa4      	subs	r4, r4, r2
   14a6e:	b2a4      	uxth	r4, r4
   14a70:	4491      	add	r9, r2
   14a72:	e7c9      	b.n	14a08 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14a74:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14a78:	f899 2006 	ldrb.w	r2, [r9, #6]
   14a7c:	f899 1007 	ldrb.w	r1, [r9, #7]
   14a80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14a84:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14a88:	e7e5      	b.n	14a56 <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14a8a:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14a8c:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14a8e:	4638      	mov	r0, r7
   14a90:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   14a92:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14a94:	9201      	str	r2, [sp, #4]
   14a96:	f7fe f80d 	bl	12ab4 <bt_att_create_pdu>
	if (!buf) {
   14a9a:	4604      	mov	r4, r0
   14a9c:	b190      	cbz	r0, 14ac4 <gatt_read_type_rsp+0x100>
   14a9e:	9a01      	ldr	r2, [sp, #4]
   14aa0:	3008      	adds	r0, #8
   14aa2:	4611      	mov	r1, r2
   14aa4:	f002 fef8 	bl	17898 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14aa8:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14aaa:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14aac:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14aae:	4a49      	ldr	r2, [pc, #292]	; (14bd4 <gatt_read_type_rsp+0x210>)
   14ab0:	462b      	mov	r3, r5
   14ab2:	4638      	mov	r0, r7
   14ab4:	f7fe fe5c 	bl	13770 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14ab8:	b286      	uxth	r6, r0
	if (!handle) {
   14aba:	2e00      	cmp	r6, #0
   14abc:	d1ac      	bne.n	14a18 <gatt_read_type_rsp+0x54>
}
   14abe:	b011      	add	sp, #68	; 0x44
   14ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14ac4:	f06f 000b 	mvn.w	r0, #11
   14ac8:	e7f6      	b.n	14ab8 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14aca:	f642 0202 	movw	r2, #10242	; 0x2802
   14ace:	f8ad 200e 	strh.w	r2, [sp, #14]
   14ad2:	aa03      	add	r2, sp, #12
   14ad4:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14ad8:	aa04      	add	r2, sp, #16
   14ada:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14adc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ae0:	462a      	mov	r2, r5
   14ae2:	4638      	mov	r0, r7
   14ae4:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ae6:	f88d b00c 	strb.w	fp, [sp, #12]
   14aea:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14aee:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14af2:	a90b      	add	r1, sp, #44	; 0x2c
   14af4:	4798      	blx	r3
   14af6:	2800      	cmp	r0, #0
   14af8:	d1b6      	bne.n	14a68 <gatt_read_type_rsp+0xa4>
   14afa:	e7e0      	b.n	14abe <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14afc:	2a07      	cmp	r2, #7
   14afe:	d00b      	beq.n	14b18 <gatt_read_type_rsp+0x154>
   14b00:	2a15      	cmp	r2, #21
   14b02:	d02e      	beq.n	14b62 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14b04:	2145      	movs	r1, #69	; 0x45
   14b06:	4834      	ldr	r0, [pc, #208]	; (14bd8 <gatt_read_type_rsp+0x214>)
   14b08:	f007 ff46 	bl	1c998 <printk>
	params->func(conn, NULL, params);
   14b0c:	462a      	mov	r2, r5
   14b0e:	2100      	movs	r1, #0
   14b10:	4638      	mov	r0, r7
   14b12:	686b      	ldr	r3, [r5, #4]
   14b14:	4798      	blx	r3
	if (!handle) {
   14b16:	e7d2      	b.n	14abe <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   14b18:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14b1c:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14b1e:	1e5c      	subs	r4, r3, #1
   14b20:	b2a4      	uxth	r4, r4
   14b22:	f108 0901 	add.w	r9, r8, #1
   14b26:	f10d 0a18 	add.w	sl, sp, #24
   14b2a:	f898 3000 	ldrb.w	r3, [r8]
   14b2e:	42a3      	cmp	r3, r4
   14b30:	f63f af6e 	bhi.w	14a10 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   14b34:	f8b9 b000 	ldrh.w	fp, [r9]
   14b38:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   14b3c:	2e00      	cmp	r6, #0
   14b3e:	d0e5      	beq.n	14b0c <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   14b40:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14b44:	b18b      	cbz	r3, 14b6a <gatt_read_type_rsp+0x1a6>
   14b46:	2b02      	cmp	r3, #2
   14b48:	d018      	beq.n	14b7c <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14b4a:	6829      	ldr	r1, [r5, #0]
   14b4c:	b1f1      	cbz	r1, 14b8c <gatt_read_type_rsp+0x1c8>
   14b4e:	4650      	mov	r0, sl
   14b50:	f009 fc75 	bl	1e43e <bt_uuid_cmp>
   14b54:	b1d0      	cbz	r0, 14b8c <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14b56:	f898 2000 	ldrb.w	r2, [r8]
   14b5a:	1aa4      	subs	r4, r4, r2
   14b5c:	b2a4      	uxth	r4, r4
   14b5e:	4491      	add	r9, r2
   14b60:	e7e3      	b.n	14b2a <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   14b62:	2202      	movs	r2, #2
   14b64:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14b68:	e7d8      	b.n	14b1c <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14b6a:	f899 3005 	ldrb.w	r3, [r9, #5]
   14b6e:	f899 2006 	ldrb.w	r2, [r9, #6]
   14b72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14b76:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14b7a:	e7e6      	b.n	14b4a <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14b7c:	2210      	movs	r2, #16
   14b7e:	f109 0105 	add.w	r1, r9, #5
   14b82:	f10d 0019 	add.w	r0, sp, #25
   14b86:	f009 fbbf 	bl	1e308 <memcpy>
			break;
   14b8a:	e7de      	b.n	14b4a <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14b8c:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14b90:	f899 3002 	ldrb.w	r3, [r9, #2]
   14b94:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14b98:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14b9c:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ba0:	2300      	movs	r3, #0
   14ba2:	f8ad 200e 	strh.w	r2, [sp, #14]
   14ba6:	aa03      	add	r2, sp, #12
   14ba8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14bac:	aa04      	add	r2, sp, #16
   14bae:	f88d 300c 	strb.w	r3, [sp, #12]
   14bb2:	930d      	str	r3, [sp, #52]	; 0x34
   14bb4:	920e      	str	r2, [sp, #56]	; 0x38
   14bb6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14bba:	462a      	mov	r2, r5
   14bbc:	4638      	mov	r0, r7
   14bbe:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14bc0:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14bc4:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14bc8:	a90b      	add	r1, sp, #44	; 0x2c
   14bca:	4798      	blx	r3
   14bcc:	2800      	cmp	r0, #0
   14bce:	d1c2      	bne.n	14b56 <gatt_read_type_rsp+0x192>
   14bd0:	e775      	b.n	14abe <gatt_read_type_rsp+0xfa>
   14bd2:	bf00      	nop
   14bd4:	00014bdd 	.word	0x00014bdd
   14bd8:	00025506 	.word	0x00025506

00014bdc <read_included_uuid_cb>:
{
   14bdc:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14bde:	2b10      	cmp	r3, #16
{
   14be0:	b08e      	sub	sp, #56	; 0x38
   14be2:	4611      	mov	r1, r2
   14be4:	4605      	mov	r5, r0
   14be6:	461a      	mov	r2, r3
   14be8:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14bea:	d00b      	beq.n	14c04 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14bec:	2145      	movs	r1, #69	; 0x45
   14bee:	4820      	ldr	r0, [pc, #128]	; (14c70 <read_included_uuid_cb+0x94>)
   14bf0:	f007 fed2 	bl	1c998 <printk>
		params->func(conn, NULL, params);
   14bf4:	4622      	mov	r2, r4
   14bf6:	2100      	movs	r1, #0
   14bf8:	4628      	mov	r0, r5
   14bfa:	6863      	ldr	r3, [r4, #4]
}
   14bfc:	b00e      	add	sp, #56	; 0x38
   14bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14c02:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14c04:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14c06:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14c08:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14c0c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14c0e:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14c12:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14c16:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14c18:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14c1a:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14c1e:	f009 fb73 	bl	1e308 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c22:	6821      	ldr	r1, [r4, #0]
   14c24:	b9c9      	cbnz	r1, 14c5a <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c26:	f642 0202 	movw	r2, #10242	; 0x2802
   14c2a:	2300      	movs	r3, #0
   14c2c:	f8ad 2006 	strh.w	r2, [sp, #6]
   14c30:	aa01      	add	r2, sp, #4
   14c32:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14c36:	f88d 3004 	strb.w	r3, [sp, #4]
   14c3a:	930b      	str	r3, [sp, #44]	; 0x2c
   14c3c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14c40:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c42:	aa02      	add	r2, sp, #8
   14c44:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14c46:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c4a:	4622      	mov	r2, r4
   14c4c:	4628      	mov	r0, r5
   14c4e:	6863      	ldr	r3, [r4, #4]
   14c50:	a909      	add	r1, sp, #36	; 0x24
   14c52:	4798      	blx	r3
   14c54:	b930      	cbnz	r0, 14c64 <read_included_uuid_cb+0x88>
}
   14c56:	b00e      	add	sp, #56	; 0x38
   14c58:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c5a:	4630      	mov	r0, r6
   14c5c:	f009 fbef 	bl	1e43e <bt_uuid_cmp>
   14c60:	2800      	cmp	r0, #0
   14c62:	d0e0      	beq.n	14c26 <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14c64:	4622      	mov	r2, r4
   14c66:	4628      	mov	r0, r5
   14c68:	8921      	ldrh	r1, [r4, #8]
   14c6a:	f00a fef5 	bl	1fa58 <gatt_discover_next>
	return;
   14c6e:	e7f2      	b.n	14c56 <read_included_uuid_cb+0x7a>
   14c70:	00025506 	.word	0x00025506

00014c74 <gatt_find_info_rsp>:
{
   14c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c78:	b08f      	sub	sp, #60	; 0x3c
   14c7a:	4680      	mov	r8, r0
   14c7c:	4614      	mov	r4, r2
   14c7e:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14c80:	b941      	cbnz	r1, 14c94 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14c82:	7812      	ldrb	r2, [r2, #0]
   14c84:	2a01      	cmp	r2, #1
   14c86:	d00b      	beq.n	14ca0 <gatt_find_info_rsp+0x2c>
   14c88:	2a02      	cmp	r2, #2
   14c8a:	d022      	beq.n	14cd2 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14c8c:	2145      	movs	r1, #69	; 0x45
   14c8e:	484b      	ldr	r0, [pc, #300]	; (14dbc <gatt_find_info_rsp+0x148>)
   14c90:	f007 fe82 	bl	1c998 <printk>
	params->func(conn, NULL, params);
   14c94:	4632      	mov	r2, r6
   14c96:	2100      	movs	r1, #0
   14c98:	4640      	mov	r0, r8
   14c9a:	6873      	ldr	r3, [r6, #4]
   14c9c:	4798      	blx	r3
   14c9e:	e08a      	b.n	14db6 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14ca0:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14ca4:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14ca8:	3b01      	subs	r3, #1
   14caa:	b29b      	uxth	r3, r3
	if (length < len) {
   14cac:	4553      	cmp	r3, sl
   14cae:	d3f1      	bcc.n	14c94 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14cb0:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14cb4:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14cb8:	46cb      	mov	fp, r9
			skip = false;
   14cba:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14cbc:	9300      	str	r3, [sp, #0]
   14cbe:	3401      	adds	r4, #1
   14cc0:	af04      	add	r7, sp, #16
   14cc2:	9b00      	ldr	r3, [sp, #0]
   14cc4:	b953      	cbnz	r3, 14cdc <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14cc6:	4632      	mov	r2, r6
   14cc8:	4659      	mov	r1, fp
   14cca:	4640      	mov	r0, r8
   14ccc:	f00a fec4 	bl	1fa58 <gatt_discover_next>
	return;
   14cd0:	e071      	b.n	14db6 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14cd2:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14cd6:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14cda:	e7e5      	b.n	14ca8 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14cdc:	8823      	ldrh	r3, [r4, #0]
   14cde:	9301      	str	r3, [sp, #4]
   14ce0:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14ce4:	f1b9 0f00 	cmp.w	r9, #0
   14ce8:	d151      	bne.n	14d8e <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14cea:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d03a      	beq.n	14d68 <gatt_find_info_rsp+0xf4>
   14cf2:	2b02      	cmp	r3, #2
   14cf4:	d03f      	beq.n	14d76 <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14cf6:	6831      	ldr	r1, [r6, #0]
   14cf8:	2900      	cmp	r1, #0
   14cfa:	d143      	bne.n	14d84 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14cfc:	7c33      	ldrb	r3, [r6, #16]
   14cfe:	2b04      	cmp	r3, #4
   14d00:	d148      	bne.n	14d94 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14d02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14d06:	4638      	mov	r0, r7
   14d08:	a902      	add	r1, sp, #8
   14d0a:	f88d 5008 	strb.w	r5, [sp, #8]
   14d0e:	f8ad 300a 	strh.w	r3, [sp, #10]
   14d12:	f009 fb94 	bl	1e43e <bt_uuid_cmp>
   14d16:	b310      	cbz	r0, 14d5e <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14d18:	f642 0301 	movw	r3, #10241	; 0x2801
   14d1c:	4638      	mov	r0, r7
   14d1e:	a903      	add	r1, sp, #12
   14d20:	f88d 500c 	strb.w	r5, [sp, #12]
   14d24:	f8ad 300e 	strh.w	r3, [sp, #14]
   14d28:	f009 fb89 	bl	1e43e <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14d2c:	b1b8      	cbz	r0, 14d5e <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14d2e:	f642 0302 	movw	r3, #10242	; 0x2802
   14d32:	4638      	mov	r0, r7
   14d34:	a909      	add	r1, sp, #36	; 0x24
   14d36:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14d3a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14d3e:	f009 fb7e 	bl	1e43e <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14d42:	b160      	cbz	r0, 14d5e <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14d44:	f642 0303 	movw	r3, #10243	; 0x2803
   14d48:	4638      	mov	r0, r7
   14d4a:	a909      	add	r1, sp, #36	; 0x24
   14d4c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14d50:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14d54:	f009 fb73 	bl	1e43e <bt_uuid_cmp>
   14d58:	b9e0      	cbnz	r0, 14d94 <gatt_find_info_rsp+0x120>
				skip = true;
   14d5a:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14d5e:	9b00      	ldr	r3, [sp, #0]
   14d60:	4454      	add	r4, sl
   14d62:	3b01      	subs	r3, #1
   14d64:	9300      	str	r3, [sp, #0]
   14d66:	e7ac      	b.n	14cc2 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14d68:	78a3      	ldrb	r3, [r4, #2]
   14d6a:	78e2      	ldrb	r2, [r4, #3]
   14d6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14d70:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14d74:	e7bf      	b.n	14cf6 <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14d76:	2210      	movs	r2, #16
   14d78:	1ca1      	adds	r1, r4, #2
   14d7a:	f10d 0011 	add.w	r0, sp, #17
   14d7e:	f009 fac3 	bl	1e308 <memcpy>
			break;
   14d82:	e7b8      	b.n	14cf6 <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14d84:	4638      	mov	r0, r7
   14d86:	f009 fb5a 	bl	1e43e <bt_uuid_cmp>
   14d8a:	2800      	cmp	r0, #0
   14d8c:	d0b6      	beq.n	14cfc <gatt_find_info_rsp+0x88>
			skip = false;
   14d8e:	f04f 0900 	mov.w	r9, #0
   14d92:	e7e4      	b.n	14d5e <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14d94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d98:	4632      	mov	r2, r6
		attr.handle = handle;
   14d9a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d9e:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14da0:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14da4:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14da8:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14daa:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14dae:	a909      	add	r1, sp, #36	; 0x24
   14db0:	4798      	blx	r3
   14db2:	2800      	cmp	r0, #0
   14db4:	d1d3      	bne.n	14d5e <gatt_find_info_rsp+0xea>
}
   14db6:	b00f      	add	sp, #60	; 0x3c
   14db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dbc:	0002551f 	.word	0x0002551f

00014dc0 <bt_gatt_subscribe>:
{
   14dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dc2:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14dc4:	4606      	mov	r6, r0
   14dc6:	b950      	cbnz	r0, 14dde <bt_gatt_subscribe+0x1e>
   14dc8:	4944      	ldr	r1, [pc, #272]	; (14edc <bt_gatt_subscribe+0x11c>)
   14dca:	4845      	ldr	r0, [pc, #276]	; (14ee0 <bt_gatt_subscribe+0x120>)
   14dcc:	f640 72fb 	movw	r2, #4091	; 0xffb
   14dd0:	f007 fde2 	bl	1c998 <printk>
   14dd4:	f640 71fb 	movw	r1, #4091	; 0xffb
   14dd8:	4840      	ldr	r0, [pc, #256]	; (14edc <bt_gatt_subscribe+0x11c>)
   14dda:	f008 f883 	bl	1cee4 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14dde:	b10d      	cbz	r5, 14de4 <bt_gatt_subscribe+0x24>
   14de0:	682b      	ldr	r3, [r5, #0]
   14de2:	b953      	cbnz	r3, 14dfa <bt_gatt_subscribe+0x3a>
   14de4:	493d      	ldr	r1, [pc, #244]	; (14edc <bt_gatt_subscribe+0x11c>)
   14de6:	483e      	ldr	r0, [pc, #248]	; (14ee0 <bt_gatt_subscribe+0x120>)
   14de8:	f640 72fc 	movw	r2, #4092	; 0xffc
   14dec:	f007 fdd4 	bl	1c998 <printk>
   14df0:	f640 71fc 	movw	r1, #4092	; 0xffc
   14df4:	4839      	ldr	r0, [pc, #228]	; (14edc <bt_gatt_subscribe+0x11c>)
   14df6:	f008 f875 	bl	1cee4 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   14dfa:	89ab      	ldrh	r3, [r5, #12]
   14dfc:	b953      	cbnz	r3, 14e14 <bt_gatt_subscribe+0x54>
   14dfe:	4937      	ldr	r1, [pc, #220]	; (14edc <bt_gatt_subscribe+0x11c>)
   14e00:	4837      	ldr	r0, [pc, #220]	; (14ee0 <bt_gatt_subscribe+0x120>)
   14e02:	f640 72fd 	movw	r2, #4093	; 0xffd
   14e06:	f007 fdc7 	bl	1c998 <printk>
   14e0a:	f640 71fd 	movw	r1, #4093	; 0xffd
   14e0e:	4833      	ldr	r0, [pc, #204]	; (14edc <bt_gatt_subscribe+0x11c>)
   14e10:	f008 f868 	bl	1cee4 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14e14:	896b      	ldrh	r3, [r5, #10]
   14e16:	b953      	cbnz	r3, 14e2e <bt_gatt_subscribe+0x6e>
   14e18:	4930      	ldr	r1, [pc, #192]	; (14edc <bt_gatt_subscribe+0x11c>)
   14e1a:	4831      	ldr	r0, [pc, #196]	; (14ee0 <bt_gatt_subscribe+0x120>)
   14e1c:	f241 0203 	movw	r2, #4099	; 0x1003
   14e20:	f007 fdba 	bl	1c998 <printk>
   14e24:	f241 0103 	movw	r1, #4099	; 0x1003
   14e28:	482c      	ldr	r0, [pc, #176]	; (14edc <bt_gatt_subscribe+0x11c>)
   14e2a:	f008 f85b 	bl	1cee4 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14e2e:	7b73      	ldrb	r3, [r6, #13]
   14e30:	2b07      	cmp	r3, #7
   14e32:	d14b      	bne.n	14ecc <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14e34:	4630      	mov	r0, r6
   14e36:	f7fe fae5 	bl	13404 <gatt_sub_find>
	if (!sub) {
   14e3a:	4604      	mov	r4, r0
   14e3c:	b958      	cbnz	r0, 14e56 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14e3e:	f7fe fae1 	bl	13404 <gatt_sub_find>
		if (sub) {
   14e42:	4604      	mov	r4, r0
   14e44:	2800      	cmp	r0, #0
   14e46:	d044      	beq.n	14ed2 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14e48:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14e4c:	3001      	adds	r0, #1
   14e4e:	f00a fbe7 	bl	1f620 <bt_addr_le_copy>
			sub->id = conn->id;
   14e52:	7a33      	ldrb	r3, [r6, #8]
   14e54:	7023      	strb	r3, [r4, #0]
	return list->head;
   14e56:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14e58:	b90a      	cbnz	r2, 14e5e <bt_gatt_subscribe+0x9e>
   14e5a:	4613      	mov	r3, r2
   14e5c:	e001      	b.n	14e62 <bt_gatt_subscribe+0xa2>
   14e5e:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14e62:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14e64:	b97b      	cbnz	r3, 14e86 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14e66:	bb41      	cbnz	r1, 14eba <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14e68:	4630      	mov	r0, r6
   14e6a:	462b      	mov	r3, r5
   14e6c:	89aa      	ldrh	r2, [r5, #12]
   14e6e:	8969      	ldrh	r1, [r5, #10]
   14e70:	f7fe ff22 	bl	13cb8 <gatt_write_ccc.constprop.0>
		if (err) {
   14e74:	4606      	mov	r6, r0
   14e76:	b300      	cbz	r0, 14eba <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14e78:	68a3      	ldr	r3, [r4, #8]
   14e7a:	b913      	cbnz	r3, 14e82 <bt_gatt_subscribe+0xc2>
   14e7c:	4620      	mov	r0, r4
   14e7e:	f00a fbee 	bl	1f65e <gatt_sub_remove.part.0>
}
   14e82:	4630      	mov	r0, r6
   14e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14e86:	42ab      	cmp	r3, r5
   14e88:	d106      	bne.n	14e98 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   14e8a:	b912      	cbnz	r2, 14e92 <bt_gatt_subscribe+0xd2>
   14e8c:	4620      	mov	r0, r4
   14e8e:	f00a fbe6 	bl	1f65e <gatt_sub_remove.part.0>
			return -EALREADY;
   14e92:	f06f 0644 	mvn.w	r6, #68	; 0x44
   14e96:	e7f4      	b.n	14e82 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   14e98:	891f      	ldrh	r7, [r3, #8]
   14e9a:	8928      	ldrh	r0, [r5, #8]
   14e9c:	4287      	cmp	r7, r0
   14e9e:	d104      	bne.n	14eaa <bt_gatt_subscribe+0xea>
   14ea0:	899f      	ldrh	r7, [r3, #12]
   14ea2:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14ea4:	4287      	cmp	r7, r0
   14ea6:	bf28      	it	cs
   14ea8:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14eaa:	f113 0f14 	cmn.w	r3, #20
   14eae:	d0da      	beq.n	14e66 <bt_gatt_subscribe+0xa6>
	return node->next;
   14eb0:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	d0d7      	beq.n	14e66 <bt_gatt_subscribe+0xa6>
   14eb6:	3b14      	subs	r3, #20
   14eb8:	e7d4      	b.n	14e64 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   14eba:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14ebc:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   14ebe:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14ec2:	616a      	str	r2, [r5, #20]
	list->head = node;
   14ec4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14ec6:	b93e      	cbnz	r6, 14ed8 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14ec8:	60e3      	str	r3, [r4, #12]
}
   14eca:	e7da      	b.n	14e82 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   14ecc:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14ed0:	e7d7      	b.n	14e82 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14ed2:	f06f 060b 	mvn.w	r6, #11
   14ed6:	e7d4      	b.n	14e82 <bt_gatt_subscribe+0xc2>
	return 0;
   14ed8:	2600      	movs	r6, #0
   14eda:	e7d2      	b.n	14e82 <bt_gatt_subscribe+0xc2>
   14edc:	0002540d 	.word	0x0002540d
   14ee0:	00022dd6 	.word	0x00022dd6

00014ee4 <bt_gatt_unsubscribe>:
{
   14ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ee8:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   14eea:	4607      	mov	r7, r0
   14eec:	b950      	cbnz	r0, 14f04 <bt_gatt_unsubscribe+0x20>
   14eee:	4947      	ldr	r1, [pc, #284]	; (1500c <bt_gatt_unsubscribe+0x128>)
   14ef0:	4847      	ldr	r0, [pc, #284]	; (15010 <bt_gatt_unsubscribe+0x12c>)
   14ef2:	f241 025c 	movw	r2, #4188	; 0x105c
   14ef6:	f007 fd4f 	bl	1c998 <printk>
   14efa:	f241 015c 	movw	r1, #4188	; 0x105c
   14efe:	4843      	ldr	r0, [pc, #268]	; (1500c <bt_gatt_unsubscribe+0x128>)
   14f00:	f007 fff0 	bl	1cee4 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14f04:	b956      	cbnz	r6, 14f1c <bt_gatt_unsubscribe+0x38>
   14f06:	4941      	ldr	r1, [pc, #260]	; (1500c <bt_gatt_unsubscribe+0x128>)
   14f08:	4841      	ldr	r0, [pc, #260]	; (15010 <bt_gatt_unsubscribe+0x12c>)
   14f0a:	f241 025d 	movw	r2, #4189	; 0x105d
   14f0e:	f007 fd43 	bl	1c998 <printk>
   14f12:	f241 015d 	movw	r1, #4189	; 0x105d
   14f16:	483d      	ldr	r0, [pc, #244]	; (1500c <bt_gatt_unsubscribe+0x128>)
   14f18:	f007 ffe4 	bl	1cee4 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14f1c:	7b7b      	ldrb	r3, [r7, #13]
   14f1e:	2b07      	cmp	r3, #7
   14f20:	d170      	bne.n	15004 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14f22:	4638      	mov	r0, r7
   14f24:	f7fe fa6e 	bl	13404 <gatt_sub_find>
	if (!sub) {
   14f28:	4680      	mov	r8, r0
   14f2a:	b920      	cbnz	r0, 14f36 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   14f2c:	f06f 0015 	mvn.w	r0, #21
}
   14f30:	b003      	add	sp, #12
   14f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14f36:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14f38:	b1cc      	cbz	r4, 14f6e <bt_gatt_unsubscribe+0x8a>
   14f3a:	f1b4 0514 	subs.w	r5, r4, #20
   14f3e:	d018      	beq.n	14f72 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   14f40:	6824      	ldr	r4, [r4, #0]
   14f42:	b104      	cbz	r4, 14f46 <bt_gatt_unsubscribe+0x62>
   14f44:	3c14      	subs	r4, #20
   14f46:	f04f 0900 	mov.w	r9, #0
   14f4a:	464b      	mov	r3, r9
   14f4c:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   14f4e:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14f52:	b985      	cbnz	r5, 14f76 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   14f54:	2b00      	cmp	r3, #0
   14f56:	d0e9      	beq.n	14f2c <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   14f58:	f1ba 0f00 	cmp.w	sl, #0
   14f5c:	d047      	beq.n	14fee <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   14f5e:	462b      	mov	r3, r5
   14f60:	462a      	mov	r2, r5
   14f62:	4631      	mov	r1, r6
   14f64:	4638      	mov	r0, r7
   14f66:	6834      	ldr	r4, [r6, #0]
   14f68:	47a0      	blx	r4
		return 0;
   14f6a:	4628      	mov	r0, r5
   14f6c:	e7e0      	b.n	14f30 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14f6e:	4625      	mov	r5, r4
   14f70:	e7e9      	b.n	14f46 <bt_gatt_unsubscribe+0x62>
   14f72:	462c      	mov	r4, r5
   14f74:	e7e7      	b.n	14f46 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   14f76:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14f78:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   14f7c:	d12b      	bne.n	14fd6 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   14f7e:	696b      	ldr	r3, [r5, #20]
   14f80:	f8d8 000c 	ldr.w	r0, [r8, #12]
   14f84:	f1b9 0f00 	cmp.w	r9, #0
   14f88:	d11e      	bne.n	14fc8 <bt_gatt_unsubscribe+0xe4>
   14f8a:	4281      	cmp	r1, r0
	list->head = node;
   14f8c:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   14f90:	d101      	bne.n	14f96 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   14f92:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   14f96:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14f98:	4658      	mov	r0, fp
   14f9a:	616b      	str	r3, [r5, #20]
   14f9c:	f00a fb5c 	bl	1f658 <atomic_get>
			if (atomic_test_bit(params->flags,
   14fa0:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14fa2:	f3c0 0380 	ubfx	r3, r0, #2, #1
   14fa6:	d51e      	bpl.n	14fe6 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   14fa8:	4631      	mov	r1, r6
   14faa:	4638      	mov	r0, r7
   14fac:	9301      	str	r3, [sp, #4]
   14fae:	f7fe f98d 	bl	132cc <bt_att_req_cancel>
}
   14fb2:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14fb4:	b1cc      	cbz	r4, 14fea <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14fb6:	f114 0114 	adds.w	r1, r4, #20
   14fba:	d002      	beq.n	14fc2 <bt_gatt_unsubscribe+0xde>
	return node->next;
   14fbc:	6961      	ldr	r1, [r4, #20]
   14fbe:	b101      	cbz	r1, 14fc2 <bt_gatt_unsubscribe+0xde>
   14fc0:	3914      	subs	r1, #20
   14fc2:	4625      	mov	r5, r4
   14fc4:	460c      	mov	r4, r1
   14fc6:	e7c4      	b.n	14f52 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   14fc8:	4288      	cmp	r0, r1
	parent->next = child;
   14fca:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   14fce:	bf08      	it	eq
   14fd0:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14fd4:	e7df      	b.n	14f96 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   14fd6:	892d      	ldrh	r5, [r5, #8]
   14fd8:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14fda:	4689      	mov	r9, r1
   14fdc:	4285      	cmp	r5, r0
   14fde:	bf08      	it	eq
   14fe0:	f04f 0a01 	moveq.w	sl, #1
   14fe4:	e7e6      	b.n	14fb4 <bt_gatt_unsubscribe+0xd0>
			found = true;
   14fe6:	2301      	movs	r3, #1
   14fe8:	e7e4      	b.n	14fb4 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14fea:	4621      	mov	r1, r4
   14fec:	e7e9      	b.n	14fc2 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14fee:	4633      	mov	r3, r6
   14ff0:	4652      	mov	r2, sl
   14ff2:	4638      	mov	r0, r7
   14ff4:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   14ff6:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   14ffa:	b003      	add	sp, #12
   14ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   15000:	f7fe be5a 	b.w	13cb8 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   15004:	f06f 0038 	mvn.w	r0, #56	; 0x38
   15008:	e792      	b.n	14f30 <bt_gatt_unsubscribe+0x4c>
   1500a:	bf00      	nop
   1500c:	0002540d 	.word	0x0002540d
   15010:	00022dd6 	.word	0x00022dd6

00015014 <bt_gatt_mult_notification>:
{
   15014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15018:	b085      	sub	sp, #20
   1501a:	4680      	mov	r8, r0
   1501c:	460c      	mov	r4, r1
   1501e:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   15020:	f7fe f9f0 	bl	13404 <gatt_sub_find>
	if (!sub) {
   15024:	4606      	mov	r6, r0
   15026:	b1d0      	cbz	r0, 1505e <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   15028:	464a      	mov	r2, r9
   1502a:	4621      	mov	r1, r4
   1502c:	a801      	add	r0, sp, #4
   1502e:	f00b fad2 	bl	205d6 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   15032:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   15036:	2b04      	cmp	r3, #4
   15038:	d911      	bls.n	1505e <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1503a:	2104      	movs	r1, #4
   1503c:	eb0d 0001 	add.w	r0, sp, r1
   15040:	f002 fc0c 	bl	1785c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   15044:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   15048:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1504c:	4605      	mov	r5, r0
		if (len > buf.len) {
   1504e:	4553      	cmp	r3, sl
   15050:	d208      	bcs.n	15064 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   15052:	464b      	mov	r3, r9
   15054:	4652      	mov	r2, sl
   15056:	2145      	movs	r1, #69	; 0x45
   15058:	4816      	ldr	r0, [pc, #88]	; (150b4 <bt_gatt_mult_notification+0xa0>)
   1505a:	f007 fc9d 	bl	1c998 <printk>
}
   1505e:	b005      	add	sp, #20
   15060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15064:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15066:	b303      	cbz	r3, 150aa <bt_gatt_mult_notification+0x96>
   15068:	f1b3 0714 	subs.w	r7, r3, #20
   1506c:	d01d      	beq.n	150aa <bt_gatt_mult_notification+0x96>
	return node->next;
   1506e:	681c      	ldr	r4, [r3, #0]
   15070:	b104      	cbz	r4, 15074 <bt_gatt_mult_notification+0x60>
   15072:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   15074:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   15078:	893b      	ldrh	r3, [r7, #8]
   1507a:	455b      	cmp	r3, fp
   1507c:	d10b      	bne.n	15096 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   1507e:	4653      	mov	r3, sl
   15080:	462a      	mov	r2, r5
   15082:	4639      	mov	r1, r7
   15084:	4640      	mov	r0, r8
   15086:	f8d7 c000 	ldr.w	ip, [r7]
   1508a:	47e0      	blx	ip
   1508c:	b918      	cbnz	r0, 15096 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   1508e:	4639      	mov	r1, r7
   15090:	4640      	mov	r0, r8
   15092:	f7ff ff27 	bl	14ee4 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15096:	b144      	cbz	r4, 150aa <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15098:	f114 0314 	adds.w	r3, r4, #20
   1509c:	d002      	beq.n	150a4 <bt_gatt_mult_notification+0x90>
	return node->next;
   1509e:	6963      	ldr	r3, [r4, #20]
   150a0:	b103      	cbz	r3, 150a4 <bt_gatt_mult_notification+0x90>
   150a2:	3b14      	subs	r3, #20
{
   150a4:	4627      	mov	r7, r4
   150a6:	461c      	mov	r4, r3
   150a8:	e7e6      	b.n	15078 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   150aa:	4651      	mov	r1, sl
   150ac:	a801      	add	r0, sp, #4
   150ae:	f002 fbd5 	bl	1785c <net_buf_simple_pull_mem>
   150b2:	e7be      	b.n	15032 <bt_gatt_mult_notification+0x1e>
   150b4:	00025536 	.word	0x00025536

000150b8 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   150b8:	2301      	movs	r3, #1
{
   150ba:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   150bc:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   150c0:	b08e      	sub	sp, #56	; 0x38
   150c2:	4605      	mov	r5, r0
	data.conn = conn;
   150c4:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   150c6:	4631      	mov	r1, r6
   150c8:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   150ca:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   150ce:	f009 fbab 	bl	1e828 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   150d2:	b190      	cbz	r0, 150fa <bt_gatt_connected+0x42>
		if (conn->id) {
   150d4:	7a2a      	ldrb	r2, [r5, #8]
   150d6:	b35a      	cbz	r2, 15130 <bt_gatt_connected+0x78>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   150d8:	ac02      	add	r4, sp, #8
   150da:	2104      	movs	r1, #4
   150dc:	4620      	mov	r0, r4
   150de:	f007 fbc1 	bl	1c864 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   150e2:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   150e4:	2124      	movs	r1, #36	; 0x24
   150e6:	4a1e      	ldr	r2, [pc, #120]	; (15160 <bt_gatt_connected+0xa8>)
   150e8:	a805      	add	r0, sp, #20
   150ea:	4633      	mov	r3, r6
   150ec:	f7f9 f9d0 	bl	e490 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   150f0:	aa05      	add	r2, sp, #20
   150f2:	4610      	mov	r0, r2
   150f4:	491b      	ldr	r1, [pc, #108]	; (15164 <bt_gatt_connected+0xac>)
   150f6:	f7f6 fd05 	bl	bb04 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   150fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   150fe:	2001      	movs	r0, #1
   15100:	4a19      	ldr	r2, [pc, #100]	; (15168 <bt_gatt_connected+0xb0>)
   15102:	ab03      	add	r3, sp, #12
   15104:	f00a fc6f 	bl	1f9e6 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   15108:	4628      	mov	r0, r5
   1510a:	f009 fcbf 	bl	1ea8c <bt_conn_get_security>
   1510e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15112:	4288      	cmp	r0, r1
   15114:	d202      	bcs.n	1511c <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   15116:	4628      	mov	r0, r5
   15118:	f009 fc90 	bl	1ea3c <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   1511c:	4628      	mov	r0, r5
   1511e:	f7fe f971 	bl	13404 <gatt_sub_find>
	if (!sub) {
   15122:	b118      	cbz	r0, 1512c <bt_gatt_connected+0x74>
	return list->head;
   15124:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15126:	b10c      	cbz	r4, 1512c <bt_gatt_connected+0x74>
   15128:	3c14      	subs	r4, #20
   1512a:	b91c      	cbnz	r4, 15134 <bt_gatt_connected+0x7c>
}
   1512c:	b00e      	add	sp, #56	; 0x38
   1512e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   15130:	9200      	str	r2, [sp, #0]
   15132:	e7d7      	b.n	150e4 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15134:	4631      	mov	r1, r6
   15136:	7a28      	ldrb	r0, [r5, #8]
   15138:	f009 fb76 	bl	1e828 <bt_addr_le_is_bonded>
   1513c:	b158      	cbz	r0, 15156 <bt_gatt_connected+0x9e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1513e:	f104 0010 	add.w	r0, r4, #16
   15142:	f00a fa89 	bl	1f658 <atomic_get>
   15146:	0783      	lsls	r3, r0, #30
   15148:	d405      	bmi.n	15156 <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   1514a:	4623      	mov	r3, r4
   1514c:	4628      	mov	r0, r5
   1514e:	89a2      	ldrh	r2, [r4, #12]
   15150:	8961      	ldrh	r1, [r4, #10]
   15152:	f7fe fdb1 	bl	13cb8 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15156:	f114 0f14 	cmn.w	r4, #20
   1515a:	d0e7      	beq.n	1512c <bt_gatt_connected+0x74>
	return node->next;
   1515c:	6964      	ldr	r4, [r4, #20]
   1515e:	e7e2      	b.n	15126 <bt_gatt_connected+0x6e>
   15160:	0002547c 	.word	0x0002547c
   15164:	000140b1 	.word	0x000140b1
   15168:	00014481 	.word	0x00014481

0001516c <bt_gatt_encrypt_change>:
{
   1516c:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   1516e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   15170:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15172:	466b      	mov	r3, sp
   15174:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15178:	4a03      	ldr	r2, [pc, #12]	; (15188 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1517a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1517e:	f00a fc32 	bl	1f9e6 <bt_gatt_foreach_attr>
}
   15182:	b003      	add	sp, #12
   15184:	f85d fb04 	ldr.w	pc, [sp], #4
   15188:	00014481 	.word	0x00014481

0001518c <db_hash_read>:
{
   1518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1518e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   15190:	4810      	ldr	r0, [pc, #64]	; (151d4 <db_hash_read+0x48>)
{
   15192:	4615      	mov	r5, r2
   15194:	461f      	mov	r7, r3
   15196:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   1519a:	f006 fd0f 	bl	1bbbc <k_delayed_work_cancel>
	if (!err) {
   1519e:	b910      	cbnz	r0, 151a6 <db_hash_read+0x1a>
		db_hash_gen(true);
   151a0:	2001      	movs	r0, #1
   151a2:	f7fe fef5 	bl	13f90 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   151a6:	2101      	movs	r1, #1
   151a8:	4620      	mov	r0, r4
   151aa:	f00a fcec 	bl	1fb86 <bt_gatt_change_aware>
	if (offset > value_len) {
   151ae:	2e10      	cmp	r6, #16
   151b0:	d80c      	bhi.n	151cc <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   151b2:	f1c6 0410 	rsb	r4, r6, #16
   151b6:	42bc      	cmp	r4, r7
   151b8:	bfa8      	it	ge
   151ba:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   151bc:	4906      	ldr	r1, [pc, #24]	; (151d8 <db_hash_read+0x4c>)
   151be:	4622      	mov	r2, r4
   151c0:	4628      	mov	r0, r5
   151c2:	4431      	add	r1, r6
   151c4:	f009 f8a0 	bl	1e308 <memcpy>
}
   151c8:	4620      	mov	r0, r4
   151ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   151cc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   151d0:	e7fa      	b.n	151c8 <db_hash_read+0x3c>
   151d2:	bf00      	nop
   151d4:	20008eb8 	.word	0x20008eb8
   151d8:	2000b728 	.word	0x2000b728

000151dc <bt_gatt_store_ccc>:
	save.count = 0;
   151dc:	2300      	movs	r3, #0
{
   151de:	b570      	push	{r4, r5, r6, lr}
   151e0:	4604      	mov	r4, r0
   151e2:	b0c0      	sub	sp, #256	; 0x100
   151e4:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   151e6:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   151e8:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   151ec:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   151ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   151f2:	2001      	movs	r0, #1
   151f4:	4a13      	ldr	r2, [pc, #76]	; (15244 <bt_gatt_store_ccc+0x68>)
   151f6:	ab0d      	add	r3, sp, #52	; 0x34
   151f8:	f00a fbf5 	bl	1f9e6 <bt_gatt_foreach_attr>
	if (id) {
   151fc:	b1ec      	cbz	r4, 1523a <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   151fe:	ae03      	add	r6, sp, #12
   15200:	4622      	mov	r2, r4
   15202:	2104      	movs	r1, #4
   15204:	4630      	mov	r0, r6
   15206:	f007 fb2d 	bl	1c864 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1520a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1520c:	4a0e      	ldr	r2, [pc, #56]	; (15248 <bt_gatt_store_ccc+0x6c>)
   1520e:	462b      	mov	r3, r5
   15210:	2124      	movs	r1, #36	; 0x24
   15212:	a804      	add	r0, sp, #16
   15214:	f7f9 f93c 	bl	e490 <bt_settings_encode_key>
	if (save.count) {
   15218:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1521a:	b182      	cbz	r2, 1523e <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1521c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1521e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   15220:	a804      	add	r0, sp, #16
   15222:	f7f6 fc0f 	bl	ba44 <settings_save_one>
	if (err) {
   15226:	4604      	mov	r4, r0
   15228:	b120      	cbz	r0, 15234 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1522a:	4602      	mov	r2, r0
   1522c:	2145      	movs	r1, #69	; 0x45
   1522e:	4807      	ldr	r0, [pc, #28]	; (1524c <bt_gatt_store_ccc+0x70>)
   15230:	f007 fbb2 	bl	1c998 <printk>
}
   15234:	4620      	mov	r0, r4
   15236:	b040      	add	sp, #256	; 0x100
   15238:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1523a:	9400      	str	r4, [sp, #0]
   1523c:	e7e6      	b.n	1520c <bt_gatt_store_ccc+0x30>
		str = NULL;
   1523e:	4611      	mov	r1, r2
   15240:	e7ee      	b.n	15220 <bt_gatt_store_ccc+0x44>
   15242:	bf00      	nop
   15244:	00013945 	.word	0x00013945
   15248:	0002547c 	.word	0x0002547c
   1524c:	00025554 	.word	0x00025554

00015250 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   15250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15254:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15256:	4603      	mov	r3, r0
   15258:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1525c:	2001      	movs	r0, #1
{
   1525e:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15260:	4a52      	ldr	r2, [pc, #328]	; (153ac <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15262:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15266:	f00a fbbe 	bl	1f9e6 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1526a:	4629      	mov	r1, r5
   1526c:	7a20      	ldrb	r0, [r4, #8]
   1526e:	f009 fadb 	bl	1e828 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   15272:	b378      	cbz	r0, 152d4 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   15274:	4629      	mov	r1, r5
   15276:	7a20      	ldrb	r0, [r4, #8]
   15278:	f7ff ffb0 	bl	151dc <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1527c:	4620      	mov	r0, r4
   1527e:	f7fe f883 	bl	13388 <find_cf_cfg>
	if (!cfg) {
   15282:	4606      	mov	r6, r0
   15284:	2800      	cmp	r0, #0
   15286:	d05e      	beq.n	15346 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15288:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1528a:	3608      	adds	r6, #8
		if (conn->id) {
   1528c:	2a00      	cmp	r2, #0
   1528e:	d05c      	beq.n	1534a <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15290:	af02      	add	r7, sp, #8
   15292:	2104      	movs	r1, #4
   15294:	4638      	mov	r0, r7
   15296:	f007 fae5 	bl	1c864 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1529a:	462b      	mov	r3, r5
   1529c:	9700      	str	r7, [sp, #0]
   1529e:	2124      	movs	r1, #36	; 0x24
   152a0:	4a43      	ldr	r2, [pc, #268]	; (153b0 <bt_gatt_disconnected+0x160>)
   152a2:	a803      	add	r0, sp, #12
   152a4:	f7f9 f8f4 	bl	e490 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   152a8:	7a23      	ldrb	r3, [r4, #8]
   152aa:	2701      	movs	r7, #1
   152ac:	b93b      	cbnz	r3, 152be <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   152ae:	2300      	movs	r3, #0
   152b0:	2124      	movs	r1, #36	; 0x24
   152b2:	9300      	str	r3, [sp, #0]
   152b4:	4a3e      	ldr	r2, [pc, #248]	; (153b0 <bt_gatt_disconnected+0x160>)
   152b6:	462b      	mov	r3, r5
   152b8:	a803      	add	r0, sp, #12
   152ba:	f7f9 f8e9 	bl	e490 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   152be:	463a      	mov	r2, r7
   152c0:	4631      	mov	r1, r6
   152c2:	a803      	add	r0, sp, #12
   152c4:	f7f6 fbbe 	bl	ba44 <settings_save_one>
	if (err) {
   152c8:	4602      	mov	r2, r0
   152ca:	b118      	cbz	r0, 152d4 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   152cc:	2145      	movs	r1, #69	; 0x45
   152ce:	4839      	ldr	r0, [pc, #228]	; (153b4 <bt_gatt_disconnected+0x164>)
   152d0:	f007 fb62 	bl	1c998 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   152d4:	4629      	mov	r1, r5
   152d6:	7a20      	ldrb	r0, [r4, #8]
   152d8:	f009 faa6 	bl	1e828 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   152dc:	b150      	cbz	r0, 152f4 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   152de:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   152e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   152e4:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   152e8:	2001      	movs	r0, #1
   152ea:	4a33      	ldr	r2, [pc, #204]	; (153b8 <bt_gatt_disconnected+0x168>)
   152ec:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   152ee:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   152f0:	f00a fb79 	bl	1f9e6 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   152f4:	4620      	mov	r0, r4
   152f6:	f7fe f885 	bl	13404 <gatt_sub_find>
	if (!sub) {
   152fa:	4607      	mov	r7, r0
   152fc:	b3b0      	cbz	r0, 1536c <bt_gatt_disconnected+0x11c>
	return list->head;
   152fe:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15300:	b3a3      	cbz	r3, 1536c <bt_gatt_disconnected+0x11c>
   15302:	f1b3 0b14 	subs.w	fp, r3, #20
   15306:	d031      	beq.n	1536c <bt_gatt_disconnected+0x11c>
	return node->next;
   15308:	681e      	ldr	r6, [r3, #0]
   1530a:	b106      	cbz	r6, 1530e <bt_gatt_disconnected+0xbe>
   1530c:	3e14      	subs	r6, #20
   1530e:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   15312:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15314:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15318:	4629      	mov	r1, r5
   1531a:	7a20      	ldrb	r0, [r4, #8]
   1531c:	f009 fa84 	bl	1e828 <bt_addr_le_is_bonded>
   15320:	b9a8      	cbnz	r0, 1534e <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   15322:	465b      	mov	r3, fp
   15324:	4642      	mov	r2, r8
   15326:	4639      	mov	r1, r7
   15328:	4620      	mov	r0, r4
			params->value = 0U;
   1532a:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1532e:	f00a f9bb 	bl	1f6a8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15332:	b1de      	cbz	r6, 1536c <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15334:	f116 0214 	adds.w	r2, r6, #20
   15338:	d002      	beq.n	15340 <bt_gatt_disconnected+0xf0>
	return node->next;
   1533a:	6972      	ldr	r2, [r6, #20]
   1533c:	b102      	cbz	r2, 15340 <bt_gatt_disconnected+0xf0>
   1533e:	3a14      	subs	r2, #20
   15340:	46b3      	mov	fp, r6
   15342:	4616      	mov	r6, r2
   15344:	e7e8      	b.n	15318 <bt_gatt_disconnected+0xc8>
		len = 0;
   15346:	4607      	mov	r7, r0
   15348:	e7b1      	b.n	152ae <bt_gatt_disconnected+0x5e>
   1534a:	2701      	movs	r7, #1
   1534c:	e7af      	b.n	152ae <bt_gatt_disconnected+0x5e>
   1534e:	f10b 0010 	add.w	r0, fp, #16
   15352:	f00a f981 	bl	1f658 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15356:	07c3      	lsls	r3, r0, #31
   15358:	d4e3      	bmi.n	15322 <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1535a:	787b      	ldrb	r3, [r7, #1]
   1535c:	b11b      	cbz	r3, 15366 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1535e:	4629      	mov	r1, r5
   15360:	4648      	mov	r0, r9
   15362:	f00a f95d 	bl	1f620 <bt_addr_le_copy>
			prev = &params->node;
   15366:	f10b 0814 	add.w	r8, fp, #20
   1536a:	e7e2      	b.n	15332 <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   1536c:	4620      	mov	r0, r4
   1536e:	f7fe f80b 	bl	13388 <find_cf_cfg>
	if (!cfg) {
   15372:	4606      	mov	r6, r0
   15374:	b1b8      	cbz	r0, 153a6 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15376:	4629      	mov	r1, r5
   15378:	7a20      	ldrb	r0, [r4, #8]
   1537a:	f009 fa55 	bl	1e828 <bt_addr_le_is_bonded>
   1537e:	b928      	cbnz	r0, 1538c <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   15380:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   15382:	b00d      	add	sp, #52	; 0x34
   15384:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15388:	f00a b975 	b.w	1f676 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1538c:	1c70      	adds	r0, r6, #1
   1538e:	4629      	mov	r1, r5
   15390:	f00a f946 	bl	1f620 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15394:	360c      	adds	r6, #12
   15396:	e8d6 3fef 	ldaex	r3, [r6]
   1539a:	f023 0302 	bic.w	r3, r3, #2
   1539e:	e8c6 3fe2 	stlex	r2, r3, [r6]
   153a2:	2a00      	cmp	r2, #0
   153a4:	d1f7      	bne.n	15396 <bt_gatt_disconnected+0x146>
}
   153a6:	b00d      	add	sp, #52	; 0x34
   153a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153ac:	00013bdd 	.word	0x00013bdd
   153b0:	000255a8 	.word	0x000255a8
   153b4:	00025577 	.word	0x00025577
   153b8:	00013891 	.word	0x00013891

000153bc <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   153bc:	4b10      	ldr	r3, [pc, #64]	; (15400 <get_io_capa+0x44>)
   153be:	681b      	ldr	r3, [r3, #0]
   153c0:	b1bb      	cbz	r3, 153f2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   153c2:	681a      	ldr	r2, [r3, #0]
   153c4:	b142      	cbz	r2, 153d8 <get_io_capa+0x1c>
   153c6:	6859      	ldr	r1, [r3, #4]
   153c8:	b131      	cbz	r1, 153d8 <get_io_capa+0x1c>
   153ca:	6899      	ldr	r1, [r3, #8]
   153cc:	b911      	cbnz	r1, 153d4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   153ce:	490d      	ldr	r1, [pc, #52]	; (15404 <get_io_capa+0x48>)
   153d0:	7809      	ldrb	r1, [r1, #0]
   153d2:	b939      	cbnz	r1, 153e4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   153d4:	2004      	movs	r0, #4
   153d6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   153d8:	490a      	ldr	r1, [pc, #40]	; (15404 <get_io_capa+0x48>)
   153da:	7809      	ldrb	r1, [r1, #0]
   153dc:	b111      	cbz	r1, 153e4 <get_io_capa+0x28>
   153de:	b10a      	cbz	r2, 153e4 <get_io_capa+0x28>
   153e0:	6899      	ldr	r1, [r3, #8]
   153e2:	b941      	cbnz	r1, 153f6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   153e4:	685b      	ldr	r3, [r3, #4]
   153e6:	b943      	cbnz	r3, 153fa <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   153e8:	2a00      	cmp	r2, #0
   153ea:	bf0c      	ite	eq
   153ec:	2003      	moveq	r0, #3
   153ee:	2000      	movne	r0, #0
   153f0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   153f2:	2003      	movs	r0, #3
   153f4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   153f6:	2001      	movs	r0, #1
   153f8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   153fa:	2002      	movs	r0, #2
	}
}
   153fc:	4770      	bx	lr
   153fe:	bf00      	nop
   15400:	20009c18 	.word	0x20009c18
   15404:	2000b749 	.word	0x2000b749

00015408 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   15408:	4601      	mov	r1, r0
   1540a:	2300      	movs	r3, #0
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1540c:	4a07      	ldr	r2, [pc, #28]	; (1542c <smp_find+0x24>)
{
   1540e:	b510      	push	{r4, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   15410:	f102 04c4 	add.w	r4, r2, #196	; 0xc4
   15414:	18e0      	adds	r0, r4, r3
   15416:	f00a fc01 	bl	1fc1c <atomic_test_bit>
   1541a:	b108      	cbz	r0, 15420 <smp_find+0x18>
			return &bt_smp_pool[i];
   1541c:	18d0      	adds	r0, r2, r3
		}
	}

	return NULL;
}
   1541e:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15420:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   15424:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
   15428:	d1f4      	bne.n	15414 <smp_find+0xc>
   1542a:	e7f8      	b.n	1541e <smp_find+0x16>
   1542c:	20008f40 	.word	0x20008f40

00015430 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   15430:	4288      	cmp	r0, r1
{
   15432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15434:	4604      	mov	r4, r0
   15436:	460d      	mov	r5, r1
   15438:	4616      	mov	r6, r2
   1543a:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1543e:	d916      	bls.n	1546e <sys_memcpy_swap+0x3e>
   15440:	188b      	adds	r3, r1, r2
   15442:	4298      	cmp	r0, r3
   15444:	d20a      	bcs.n	1545c <sys_memcpy_swap+0x2c>
   15446:	490b      	ldr	r1, [pc, #44]	; (15474 <sys_memcpy_swap+0x44>)
   15448:	480b      	ldr	r0, [pc, #44]	; (15478 <sys_memcpy_swap+0x48>)
   1544a:	f240 2217 	movw	r2, #535	; 0x217
   1544e:	f007 faa3 	bl	1c998 <printk>
   15452:	f240 2117 	movw	r1, #535	; 0x217
   15456:	4807      	ldr	r0, [pc, #28]	; (15474 <sys_memcpy_swap+0x44>)
   15458:	f007 fd44 	bl	1cee4 <assert_post_action>
	psrc += length - 1;
   1545c:	3e01      	subs	r6, #1
   1545e:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   15460:	f815 3901 	ldrb.w	r3, [r5], #-1
   15464:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   15468:	42bc      	cmp	r4, r7
   1546a:	d1f9      	bne.n	15460 <sys_memcpy_swap+0x30>
}
   1546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1546e:	d0ea      	beq.n	15446 <sys_memcpy_swap+0x16>
   15470:	42b9      	cmp	r1, r7
   15472:	e7e7      	b.n	15444 <sys_memcpy_swap+0x14>
   15474:	00024adc 	.word	0x00024adc
   15478:	00022dd6 	.word	0x00022dd6

0001547c <smp_g2>:
{
   1547c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1547e:	460f      	mov	r7, r1
   15480:	461e      	mov	r6, r3
   15482:	4614      	mov	r4, r2
   15484:	b099      	sub	sp, #100	; 0x64
	sys_memcpy_swap(m, u, 32);
   15486:	4601      	mov	r1, r0
   15488:	2220      	movs	r2, #32
   1548a:	a804      	add	r0, sp, #16
{
   1548c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1548e:	f7ff ffcf 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   15492:	2220      	movs	r2, #32
   15494:	4639      	mov	r1, r7
   15496:	a80c      	add	r0, sp, #48	; 0x30
   15498:	f7ff ffca 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1549c:	2210      	movs	r2, #16
   1549e:	4631      	mov	r1, r6
   154a0:	a814      	add	r0, sp, #80	; 0x50
   154a2:	f7ff ffc5 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   154a6:	4621      	mov	r1, r4
   154a8:	2210      	movs	r2, #16
   154aa:	4668      	mov	r0, sp
   154ac:	f7ff ffc0 	bl	15430 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   154b0:	466b      	mov	r3, sp
   154b2:	2250      	movs	r2, #80	; 0x50
   154b4:	4618      	mov	r0, r3
   154b6:	a904      	add	r1, sp, #16
   154b8:	f00a fc0e 	bl	1fcd8 <bt_smp_aes_cmac>
	if (err) {
   154bc:	4604      	mov	r4, r0
   154be:	b960      	cbnz	r0, 154da <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   154c0:	2204      	movs	r2, #4
   154c2:	a903      	add	r1, sp, #12
   154c4:	4628      	mov	r0, r5
   154c6:	f008 ff1f 	bl	1e308 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   154ca:	682b      	ldr	r3, [r5, #0]
   154cc:	4a04      	ldr	r2, [pc, #16]	; (154e0 <smp_g2+0x64>)
   154ce:	ba1b      	rev	r3, r3
   154d0:	fbb3 f1f2 	udiv	r1, r3, r2
   154d4:	fb02 3311 	mls	r3, r2, r1, r3
   154d8:	602b      	str	r3, [r5, #0]
}
   154da:	4620      	mov	r0, r4
   154dc:	b019      	add	sp, #100	; 0x64
   154de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   154e0:	000f4240 	.word	0x000f4240

000154e4 <smp_chan_get>:
{
   154e4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   154e6:	2106      	movs	r1, #6
   154e8:	f009 fc09 	bl	1ecfe <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   154ec:	4604      	mov	r4, r0
   154ee:	b918      	cbnz	r0, 154f8 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
   154f0:	2145      	movs	r1, #69	; 0x45
   154f2:	4802      	ldr	r0, [pc, #8]	; (154fc <smp_chan_get+0x18>)
   154f4:	f007 fa50 	bl	1c998 <printk>
}
   154f8:	4620      	mov	r0, r4
   154fa:	bd10      	pop	{r4, pc}
   154fc:	000255b9 	.word	0x000255b9

00015500 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   15500:	4b0f      	ldr	r3, [pc, #60]	; (15540 <bt_smp_accept+0x40>)
{
   15502:	b510      	push	{r4, lr}
		if (smp->chan.chan.conn) {
   15504:	681c      	ldr	r4, [r3, #0]
{
   15506:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   15508:	b164      	cbz	r4, 15524 <bt_smp_accept+0x24>
   1550a:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
   1550e:	b198      	cbz	r0, 15538 <bt_smp_accept+0x38>
   15510:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
   15514:	b190      	cbz	r0, 1553c <bt_smp_accept+0x3c>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   15516:	480b      	ldr	r0, [pc, #44]	; (15544 <bt_smp_accept+0x44>)
   15518:	2145      	movs	r1, #69	; 0x45
   1551a:	f007 fa3d 	bl	1c998 <printk>
   1551e:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   15522:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15524:	4622      	mov	r2, r4
		smp->chan.chan.ops = &ops;
   15526:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   1552a:	fb00 3302 	mla	r3, r0, r2, r3
   1552e:	4a06      	ldr	r2, [pc, #24]	; (15548 <bt_smp_accept+0x48>)
		return 0;
   15530:	2000      	movs	r0, #0
		smp->chan.chan.ops = &ops;
   15532:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   15534:	600b      	str	r3, [r1, #0]
		return 0;
   15536:	e7f4      	b.n	15522 <bt_smp_accept+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15538:	2201      	movs	r2, #1
   1553a:	e7f4      	b.n	15526 <bt_smp_accept+0x26>
   1553c:	2202      	movs	r2, #2
   1553e:	e7f2      	b.n	15526 <bt_smp_accept+0x26>
   15540:	20008f40 	.word	0x20008f40
   15544:	000255d9 	.word	0x000255d9
   15548:	00022420 	.word	0x00022420

0001554c <get_pair_method>:
{
   1554c:	b538      	push	{r3, r4, r5, lr}
   1554e:	4605      	mov	r5, r0
   15550:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15552:	30c4      	adds	r0, #196	; 0xc4
   15554:	2105      	movs	r1, #5
   15556:	f00a fb61 	bl	1fc1c <atomic_test_bit>
   1555a:	bb00      	cbnz	r0, 1559e <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1555c:	2c04      	cmp	r4, #4
   1555e:	d81d      	bhi.n	1559c <get_pair_method+0x50>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   15560:	f895 30cb 	ldrb.w	r3, [r5, #203]	; 0xcb
   15564:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
   15568:	4013      	ands	r3, r2
   1556a:	07d9      	lsls	r1, r3, #31
   1556c:	d434      	bmi.n	155d8 <get_pair_method+0x8c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1556e:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
   15572:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   15576:	4303      	orrs	r3, r0
   15578:	f013 0004 	ands.w	r0, r3, #4
   1557c:	d00e      	beq.n	1559c <get_pair_method+0x50>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1557e:	f7ff ff1d 	bl	153bc <get_io_capa>
   15582:	4b18      	ldr	r3, [pc, #96]	; (155e4 <get_pair_method+0x98>)
   15584:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   15588:	441c      	add	r4, r3
   1558a:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
   1558c:	2804      	cmp	r0, #4
   1558e:	d105      	bne.n	1559c <get_pair_method+0x50>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   15590:	682b      	ldr	r3, [r5, #0]
   15592:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   15594:	2b00      	cmp	r3, #0
   15596:	bf0c      	ite	eq
   15598:	2002      	moveq	r0, #2
   1559a:	2001      	movne	r0, #1
}
   1559c:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1559e:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   155a2:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
   155a6:	ea03 0200 	and.w	r2, r3, r0
   155aa:	0712      	lsls	r2, r2, #28
   155ac:	d506      	bpl.n	155bc <get_pair_method+0x70>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   155ae:	f895 20cb 	ldrb.w	r2, [r5, #203]	; 0xcb
   155b2:	f895 50d2 	ldrb.w	r5, [r5, #210]	; 0xd2
   155b6:	432a      	orrs	r2, r5
   155b8:	07d2      	lsls	r2, r2, #31
   155ba:	d40f      	bmi.n	155dc <get_pair_method+0x90>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   155bc:	2c04      	cmp	r4, #4
   155be:	d80f      	bhi.n	155e0 <get_pair_method+0x94>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   155c0:	4318      	orrs	r0, r3
   155c2:	f010 0004 	ands.w	r0, r0, #4
   155c6:	d0e9      	beq.n	1559c <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
   155c8:	f7ff fef8 	bl	153bc <get_io_capa>
   155cc:	4906      	ldr	r1, [pc, #24]	; (155e8 <get_pair_method+0x9c>)
   155ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   155d2:	440c      	add	r4, r1
   155d4:	5c20      	ldrb	r0, [r4, r0]
   155d6:	e7e1      	b.n	1559c <get_pair_method+0x50>
		return LEGACY_OOB;
   155d8:	2006      	movs	r0, #6
   155da:	e7df      	b.n	1559c <get_pair_method+0x50>
			return LE_SC_OOB;
   155dc:	4608      	mov	r0, r1
   155de:	e7dd      	b.n	1559c <get_pair_method+0x50>
		return JUST_WORKS;
   155e0:	2000      	movs	r0, #0
   155e2:	e7db      	b.n	1559c <get_pair_method+0x50>
   155e4:	000259fe 	.word	0x000259fe
   155e8:	00025a17 	.word	0x00025a17

000155ec <get_auth.constprop.0>:
	if (sc_supported) {
   155ec:	4b0c      	ldr	r3, [pc, #48]	; (15620 <get_auth.constprop.0+0x34>)
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   155ee:	b510      	push	{r4, lr}
	if (sc_supported) {
   155f0:	781b      	ldrb	r3, [r3, #0]
   155f2:	b17b      	cbz	r3, 15614 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   155f4:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   155f8:	f7ff fee0 	bl	153bc <get_io_capa>
	if (bondable) {
   155fc:	4b09      	ldr	r3, [pc, #36]	; (15624 <get_auth.constprop.0+0x38>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   155fe:	2803      	cmp	r0, #3
	if (bondable) {
   15600:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   15602:	bf0c      	ite	eq
   15604:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   15608:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1560c:	b12b      	cbz	r3, 1561a <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1560e:	f044 0001 	orr.w	r0, r4, #1
}
   15612:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   15614:	f000 0407 	and.w	r4, r0, #7
   15618:	e7ee      	b.n	155f8 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1561a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1561e:	e7f8      	b.n	15612 <get_auth.constprop.0+0x26>
   15620:	2000b749 	.word	0x2000b749
   15624:	20008431 	.word	0x20008431

00015628 <smp_f5>:
{
   15628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1562c:	b09a      	sub	sp, #104	; 0x68
   1562e:	4616      	mov	r6, r2
   15630:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   15634:	aa0c      	add	r2, sp, #48	; 0x30
{
   15636:	4684      	mov	ip, r0
   15638:	468a      	mov	sl, r1
   1563a:	4690      	mov	r8, r2
   1563c:	461d      	mov	r5, r3
	uint8_t m[53] = { 0x00, /* counter */
   1563e:	4b2c      	ldr	r3, [pc, #176]	; (156f0 <smp_f5+0xc8>)
   15640:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   15644:	4614      	mov	r4, r2
   15646:	6818      	ldr	r0, [r3, #0]
   15648:	6859      	ldr	r1, [r3, #4]
   1564a:	3308      	adds	r3, #8
   1564c:	c403      	stmia	r4!, {r0, r1}
   1564e:	4573      	cmp	r3, lr
   15650:	4622      	mov	r2, r4
   15652:	d1f7      	bne.n	15644 <smp_f5+0x1c>
   15654:	6818      	ldr	r0, [r3, #0]
   15656:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
   15658:	4661      	mov	r1, ip
	uint8_t m[53] = { 0x00, /* counter */
   1565a:	6020      	str	r0, [r4, #0]
   1565c:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1565e:	2220      	movs	r2, #32
   15660:	a804      	add	r0, sp, #16
   15662:	f7ff fee5 	bl	15430 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   15666:	466b      	mov	r3, sp
   15668:	2220      	movs	r2, #32
   1566a:	4822      	ldr	r0, [pc, #136]	; (156f4 <smp_f5+0xcc>)
   1566c:	a904      	add	r1, sp, #16
   1566e:	f00a fb33 	bl	1fcd8 <bt_smp_aes_cmac>
	if (err) {
   15672:	4604      	mov	r4, r0
   15674:	bbc0      	cbnz	r0, 156e8 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   15676:	2210      	movs	r2, #16
   15678:	4651      	mov	r1, sl
   1567a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1567e:	f7ff fed7 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   15682:	2210      	movs	r2, #16
   15684:	4631      	mov	r1, r6
   15686:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1568a:	f7ff fed1 	bl	15430 <sys_memcpy_swap>
	m[37] = a1->type;
   1568e:	4629      	mov	r1, r5
   15690:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   15694:	2206      	movs	r2, #6
   15696:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1569a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1569e:	f7ff fec7 	bl	15430 <sys_memcpy_swap>
	m[44] = a2->type;
   156a2:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   156a4:	2206      	movs	r2, #6
	m[44] = a2->type;
   156a6:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   156aa:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   156ae:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   156b2:	f7ff febd 	bl	15430 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   156b6:	464b      	mov	r3, r9
   156b8:	2235      	movs	r2, #53	; 0x35
   156ba:	4641      	mov	r1, r8
   156bc:	4668      	mov	r0, sp
   156be:	f00a fb0b 	bl	1fcd8 <bt_smp_aes_cmac>
	if (err) {
   156c2:	4604      	mov	r4, r0
   156c4:	b980      	cbnz	r0, 156e8 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   156c6:	4648      	mov	r0, r9
   156c8:	f00a fb6a 	bl	1fda0 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   156cc:	2301      	movs	r3, #1
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   156ce:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   156d0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   156d4:	4641      	mov	r1, r8
   156d6:	463b      	mov	r3, r7
   156d8:	4668      	mov	r0, sp
   156da:	f00a fafd 	bl	1fcd8 <bt_smp_aes_cmac>
	if (err) {
   156de:	4604      	mov	r4, r0
   156e0:	b910      	cbnz	r0, 156e8 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   156e2:	4638      	mov	r0, r7
   156e4:	f00a fb5c 	bl	1fda0 <sys_mem_swap.constprop.0>
}
   156e8:	4620      	mov	r0, r4
   156ea:	b01a      	add	sp, #104	; 0x68
   156ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   156f0:	00021c01 	.word	0x00021c01
   156f4:	00025a30 	.word	0x00025a30

000156f8 <sc_smp_check_confirm>:
{
   156f8:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   156fa:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
{
   156fe:	4604      	mov	r4, r0
   15700:	b087      	sub	sp, #28
   15702:	2a05      	cmp	r2, #5
   15704:	d81d      	bhi.n	15742 <sc_smp_check_confirm+0x4a>
   15706:	e8df f002 	tbb	[pc, r2]
   1570a:	0323      	.short	0x0323
   1570c:	301c2303 	.word	0x301c2303
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15710:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
   15714:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
   15718:	40d3      	lsrs	r3, r2
   1571a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1571e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   15722:	4913      	ldr	r1, [pc, #76]	; (15770 <sc_smp_check_confirm+0x78>)
   15724:	ad02      	add	r5, sp, #8
   15726:	9500      	str	r5, [sp, #0]
   15728:	6809      	ldr	r1, [r1, #0]
   1572a:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
   1572e:	f204 1017 	addw	r0, r4, #279	; 0x117
   15732:	f00a fb8f 	bl	1fe54 <smp_f4>
   15736:	b168      	cbz	r0, 15754 <sc_smp_check_confirm+0x5c>
		BT_ERR("Calculate confirm failed");
   15738:	2145      	movs	r1, #69	; 0x45
   1573a:	480e      	ldr	r0, [pc, #56]	; (15774 <sc_smp_check_confirm+0x7c>)
   1573c:	f007 f92c 	bl	1c998 <printk>
   15740:	e003      	b.n	1574a <sc_smp_check_confirm+0x52>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15742:	2145      	movs	r1, #69	; 0x45
   15744:	480c      	ldr	r0, [pc, #48]	; (15778 <sc_smp_check_confirm+0x80>)
   15746:	f007 f927 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1574a:	2008      	movs	r0, #8
}
   1574c:	b007      	add	sp, #28
   1574e:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   15750:	2300      	movs	r3, #0
   15752:	e7e6      	b.n	15722 <sc_smp_check_confirm+0x2a>
	if (memcmp(smp->pcnf, cfm, 16)) {
   15754:	2210      	movs	r2, #16
   15756:	4629      	mov	r1, r5
   15758:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   1575c:	f008 fdc3 	bl	1e2e6 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
   15760:	2800      	cmp	r0, #0
   15762:	bf0c      	ite	eq
   15764:	2000      	moveq	r0, #0
   15766:	2004      	movne	r0, #4
   15768:	e7f0      	b.n	1574c <sc_smp_check_confirm+0x54>
	switch (smp->method) {
   1576a:	2000      	movs	r0, #0
   1576c:	e7ee      	b.n	1574c <sc_smp_check_confirm+0x54>
   1576e:	bf00      	nop
   15770:	20009d3c 	.word	0x20009d3c
   15774:	00025624 	.word	0x00025624
   15778:	00025603 	.word	0x00025603

0001577c <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1577c:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1577e:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   15780:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   15782:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   15784:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   15786:	460a      	mov	r2, r1
   15788:	6800      	ldr	r0, [r0, #0]
   1578a:	2106      	movs	r1, #6
   1578c:	f009 fa77 	bl	1ec7e <bt_l2cap_send_cb>
   15790:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15794:	2300      	movs	r3, #0
   15796:	4804      	ldr	r0, [pc, #16]	; (157a8 <smp_send.constprop.0+0x2c>)
   15798:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
   1579c:	b002      	add	sp, #8
   1579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   157a2:	f006 b99b 	b.w	1badc <k_delayed_work_submit_to_queue>
   157a6:	bf00      	nop
   157a8:	20009630 	.word	0x20009630

000157ac <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   157ac:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   157ae:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   157b0:	d00a      	beq.n	157c8 <sec_level_reachable.isra.0+0x1c>
   157b2:	d805      	bhi.n	157c0 <sec_level_reachable.isra.0+0x14>
   157b4:	3801      	subs	r0, #1
   157b6:	2801      	cmp	r0, #1
   157b8:	bf8c      	ite	hi
   157ba:	2000      	movhi	r0, #0
   157bc:	2001      	movls	r0, #1
}
   157be:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   157c0:	2804      	cmp	r0, #4
   157c2:	d010      	beq.n	157e6 <sec_level_reachable.isra.0+0x3a>
   157c4:	2000      	movs	r0, #0
   157c6:	e7fa      	b.n	157be <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   157c8:	f7ff fdf8 	bl	153bc <get_io_capa>
   157cc:	2803      	cmp	r0, #3
   157ce:	d108      	bne.n	157e2 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   157d0:	4b0c      	ldr	r3, [pc, #48]	; (15804 <sec_level_reachable.isra.0+0x58>)
   157d2:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   157d4:	2800      	cmp	r0, #0
   157d6:	d0f2      	beq.n	157be <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   157d8:	68c0      	ldr	r0, [r0, #12]
   157da:	3800      	subs	r0, #0
   157dc:	bf18      	it	ne
   157de:	2001      	movne	r0, #1
   157e0:	e7ed      	b.n	157be <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   157e2:	2001      	movs	r0, #1
   157e4:	e7eb      	b.n	157be <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   157e6:	f7ff fde9 	bl	153bc <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   157ea:	2803      	cmp	r0, #3
   157ec:	d104      	bne.n	157f8 <sec_level_reachable.isra.0+0x4c>
   157ee:	4b05      	ldr	r3, [pc, #20]	; (15804 <sec_level_reachable.isra.0+0x58>)
   157f0:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   157f2:	b118      	cbz	r0, 157fc <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   157f4:	68c0      	ldr	r0, [r0, #12]
   157f6:	b108      	cbz	r0, 157fc <sec_level_reachable.isra.0+0x50>
   157f8:	4b03      	ldr	r3, [pc, #12]	; (15808 <sec_level_reachable.isra.0+0x5c>)
   157fa:	7818      	ldrb	r0, [r3, #0]
   157fc:	f000 0001 	and.w	r0, r0, #1
   15800:	e7dd      	b.n	157be <sec_level_reachable.isra.0+0x12>
   15802:	bf00      	nop
   15804:	20009c18 	.word	0x20009c18
   15808:	2000b749 	.word	0x2000b749

0001580c <display_passkey>:
{
   1580c:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1580e:	2104      	movs	r1, #4
{
   15810:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   15812:	f500 70cc 	add.w	r0, r0, #408	; 0x198
   15816:	f7fb fbc7 	bl	10fa8 <bt_rand>
   1581a:	4605      	mov	r5, r0
   1581c:	b9e0      	cbnz	r0, 15858 <display_passkey+0x4c>
		smp->passkey %= 1000000;
   1581e:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   15822:	4a0e      	ldr	r2, [pc, #56]	; (1585c <display_passkey+0x50>)
	if (bt_auth && bt_auth->passkey_display) {
   15824:	4e0e      	ldr	r6, [pc, #56]	; (15860 <display_passkey+0x54>)
		smp->passkey %= 1000000;
   15826:	fbb3 f1f2 	udiv	r1, r3, r2
   1582a:	fb02 3311 	mls	r3, r2, r1, r3
	smp->passkey_round = 0U;
   1582e:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
   15832:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
   15834:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
   15838:	b168      	cbz	r0, 15856 <display_passkey+0x4a>
   1583a:	6800      	ldr	r0, [r0, #0]
   1583c:	b158      	cbz	r0, 15856 <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1583e:	210b      	movs	r1, #11
   15840:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   15844:	f00a fb2b 	bl	1fe9e <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   15848:	6833      	ldr	r3, [r6, #0]
   1584a:	6820      	ldr	r0, [r4, #0]
   1584c:	681b      	ldr	r3, [r3, #0]
   1584e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   15852:	4798      	blx	r3
	return 0;
   15854:	4628      	mov	r0, r5
}
   15856:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   15858:	2008      	movs	r0, #8
   1585a:	e7fc      	b.n	15856 <display_passkey+0x4a>
   1585c:	000f4240 	.word	0x000f4240
   15860:	20009c18 	.word	0x20009c18

00015864 <smp_init>:
{
   15864:	b538      	push	{r3, r4, r5, lr}
   15866:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   15868:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
   1586c:	22f0      	movs	r2, #240	; 0xf0
   1586e:	2100      	movs	r1, #0
   15870:	4628      	mov	r0, r5
   15872:	f008 fd74 	bl	1e35e <memset>
	if (bt_rand(smp->prnd, 16)) {
   15876:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   1587a:	2110      	movs	r1, #16
   1587c:	f7fb fb94 	bl	10fa8 <bt_rand>
   15880:	4604      	mov	r4, r0
   15882:	b948      	cbnz	r0, 15898 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   15884:	2105      	movs	r1, #5
   15886:	4628      	mov	r0, r5
   15888:	f00a fb09 	bl	1fe9e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1588c:	f7fb faac 	bl	10de8 <bt_pub_key_get>
   15890:	4b02      	ldr	r3, [pc, #8]	; (1589c <smp_init+0x38>)
   15892:	6018      	str	r0, [r3, #0]
}
   15894:	4620      	mov	r0, r4
   15896:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   15898:	2408      	movs	r4, #8
   1589a:	e7fb      	b.n	15894 <smp_init+0x30>
   1589c:	20009d3c 	.word	0x20009d3c

000158a0 <smp_dhkey_generate>:
{
   158a0:	b538      	push	{r3, r4, r5, lr}
   158a2:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   158a4:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   158a8:	2108      	movs	r1, #8
   158aa:	4628      	mov	r0, r5
   158ac:	f00a faf7 	bl	1fe9e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   158b0:	4907      	ldr	r1, [pc, #28]	; (158d0 <smp_dhkey_generate+0x30>)
   158b2:	f204 1017 	addw	r0, r4, #279	; 0x117
   158b6:	f7fb faa5 	bl	10e04 <bt_dh_key_gen>
	if (err) {
   158ba:	b140      	cbz	r0, 158ce <smp_dhkey_generate+0x2e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   158bc:	2108      	movs	r1, #8
   158be:	4628      	mov	r0, r5
   158c0:	f00a f9ff 	bl	1fcc2 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   158c4:	4803      	ldr	r0, [pc, #12]	; (158d4 <smp_dhkey_generate+0x34>)
   158c6:	2145      	movs	r1, #69	; 0x45
   158c8:	f007 f866 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   158cc:	2008      	movs	r0, #8
}
   158ce:	bd38      	pop	{r3, r4, r5, pc}
   158d0:	0002006b 	.word	0x0002006b
   158d4:	00025642 	.word	0x00025642

000158d8 <legacy_request_tk>:
{
   158d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   158da:	6804      	ldr	r4, [r0, #0]
{
   158dc:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   158de:	f104 0188 	add.w	r1, r4, #136	; 0x88
   158e2:	7a20      	ldrb	r0, [r4, #8]
   158e4:	f001 fc6c 	bl	171c0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   158e8:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   158ec:	b148      	cbz	r0, 15902 <legacy_request_tk+0x2a>
   158ee:	7b43      	ldrb	r3, [r0, #13]
   158f0:	07db      	lsls	r3, r3, #31
   158f2:	d506      	bpl.n	15902 <legacy_request_tk+0x2a>
   158f4:	b92a      	cbnz	r2, 15902 <legacy_request_tk+0x2a>
		BT_ERR("JustWorks failed, authenticated keys present");
   158f6:	2145      	movs	r1, #69	; 0x45
   158f8:	4830      	ldr	r0, [pc, #192]	; (159bc <legacy_request_tk+0xe4>)
   158fa:	f007 f84d 	bl	1c998 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   158fe:	2008      	movs	r0, #8
   15900:	e01d      	b.n	1593e <legacy_request_tk+0x66>
	switch (smp->method) {
   15902:	4610      	mov	r0, r2
   15904:	2a06      	cmp	r2, #6
   15906:	d852      	bhi.n	159ae <legacy_request_tk+0xd6>
   15908:	e8df f002 	tbb	[pc, r2]
   1590c:	511b4619 	.word	0x511b4619
   15910:	5151      	.short	0x5151
   15912:	04          	.byte	0x04
   15913:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   15914:	4e2a      	ldr	r6, [pc, #168]	; (159c0 <legacy_request_tk+0xe8>)
   15916:	6833      	ldr	r3, [r6, #0]
   15918:	2b00      	cmp	r3, #0
   1591a:	d04d      	beq.n	159b8 <legacy_request_tk+0xe0>
   1591c:	68db      	ldr	r3, [r3, #12]
   1591e:	2b00      	cmp	r3, #0
   15920:	d04a      	beq.n	159b8 <legacy_request_tk+0xe0>
			struct bt_conn_oob_info info = {
   15922:	2400      	movs	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15924:	210a      	movs	r1, #10
   15926:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
			struct bt_conn_oob_info info = {
   1592a:	f8ad 4004 	strh.w	r4, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1592e:	f00a fab6 	bl	1fe9e <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   15932:	6833      	ldr	r3, [r6, #0]
   15934:	6828      	ldr	r0, [r5, #0]
   15936:	68db      	ldr	r3, [r3, #12]
   15938:	a901      	add	r1, sp, #4
   1593a:	4798      	blx	r3
	return 0;
   1593c:	2000      	movs	r0, #0
}
   1593e:	b002      	add	sp, #8
   15940:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
   15942:	2104      	movs	r1, #4
   15944:	eb0d 0001 	add.w	r0, sp, r1
   15948:	f7fb fb2e 	bl	10fa8 <bt_rand>
   1594c:	2800      	cmp	r0, #0
   1594e:	d1d6      	bne.n	158fe <legacy_request_tk+0x26>
			passkey %= 1000000;
   15950:	9b01      	ldr	r3, [sp, #4]
   15952:	4a1c      	ldr	r2, [pc, #112]	; (159c4 <legacy_request_tk+0xec>)
		if (bt_auth && bt_auth->passkey_display) {
   15954:	4e1a      	ldr	r6, [pc, #104]	; (159c0 <legacy_request_tk+0xe8>)
			passkey %= 1000000;
   15956:	fbb3 f1f2 	udiv	r1, r3, r2
   1595a:	fb02 3311 	mls	r3, r2, r1, r3
   1595e:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   15960:	6833      	ldr	r3, [r6, #0]
   15962:	b15b      	cbz	r3, 1597c <legacy_request_tk+0xa4>
   15964:	681b      	ldr	r3, [r3, #0]
   15966:	b14b      	cbz	r3, 1597c <legacy_request_tk+0xa4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   15968:	210b      	movs	r1, #11
   1596a:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1596e:	f00a fa96 	bl	1fe9e <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   15972:	6833      	ldr	r3, [r6, #0]
   15974:	4620      	mov	r0, r4
   15976:	681b      	ldr	r3, [r3, #0]
   15978:	9901      	ldr	r1, [sp, #4]
   1597a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1597c:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
   1597e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   15982:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	sys_put_le16(val >> 16, &dst[2]);
   15986:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15988:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	dst[1] = val >> 8;
   1598c:	0a1b      	lsrs	r3, r3, #8
   1598e:	f885 2108 	strb.w	r2, [r5, #264]	; 0x108
   15992:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
   15996:	e7d1      	b.n	1593c <legacy_request_tk+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15998:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1599c:	210a      	movs	r1, #10
   1599e:	f00a fa7e 	bl	1fe9e <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   159a2:	4b07      	ldr	r3, [pc, #28]	; (159c0 <legacy_request_tk+0xe8>)
   159a4:	4620      	mov	r0, r4
   159a6:	681b      	ldr	r3, [r3, #0]
   159a8:	685b      	ldr	r3, [r3, #4]
   159aa:	4798      	blx	r3
   159ac:	e7c6      	b.n	1593c <legacy_request_tk+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   159ae:	2145      	movs	r1, #69	; 0x45
   159b0:	4805      	ldr	r0, [pc, #20]	; (159c8 <legacy_request_tk+0xf0>)
   159b2:	f006 fff1 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   159b6:	e7a2      	b.n	158fe <legacy_request_tk+0x26>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   159b8:	2002      	movs	r0, #2
   159ba:	e7c0      	b.n	1593e <legacy_request_tk+0x66>
   159bc:	00025660 	.word	0x00025660
   159c0:	20009c18 	.word	0x20009c18
   159c4:	000f4240 	.word	0x000f4240
   159c8:	00025603 	.word	0x00025603

000159cc <smp_ident_info>:
{
   159cc:	b570      	push	{r4, r5, r6, lr}
   159ce:	460b      	mov	r3, r1
   159d0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   159d2:	210d      	movs	r1, #13
   159d4:	30c4      	adds	r0, #196	; 0xc4
   159d6:	f00a f921 	bl	1fc1c <atomic_test_bit>
   159da:	b1c0      	cbz	r0, 15a0e <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
   159dc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   159de:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   159e0:	2002      	movs	r0, #2
   159e2:	f103 0588 	add.w	r5, r3, #136	; 0x88
   159e6:	462a      	mov	r2, r5
   159e8:	7a19      	ldrb	r1, [r3, #8]
   159ea:	f00a fdda 	bl	205a2 <bt_keys_get_type>
		if (!keys) {
   159ee:	b948      	cbnz	r0, 15a04 <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
   159f0:	4628      	mov	r0, r5
   159f2:	f7f8 fcad 	bl	e350 <bt_addr_le_str_real>
   159f6:	2145      	movs	r1, #69	; 0x45
   159f8:	4602      	mov	r2, r0
   159fa:	4808      	ldr	r0, [pc, #32]	; (15a1c <smp_ident_info+0x50>)
   159fc:	f006 ffcc 	bl	1c998 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   15a00:	2008      	movs	r0, #8
}
   15a02:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   15a04:	2210      	movs	r2, #16
   15a06:	4631      	mov	r1, r6
   15a08:	302a      	adds	r0, #42	; 0x2a
   15a0a:	f008 fc7d 	bl	1e308 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   15a0e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15a12:	2109      	movs	r1, #9
   15a14:	f00a fa43 	bl	1fe9e <atomic_set_bit>
	return 0;
   15a18:	2000      	movs	r0, #0
   15a1a:	e7f2      	b.n	15a02 <smp_ident_info+0x36>
   15a1c:	00025692 	.word	0x00025692

00015a20 <smp_encrypt_info>:
{
   15a20:	b570      	push	{r4, r5, r6, lr}
   15a22:	460b      	mov	r3, r1
   15a24:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15a26:	210d      	movs	r1, #13
   15a28:	30c4      	adds	r0, #196	; 0xc4
   15a2a:	f00a f8f7 	bl	1fc1c <atomic_test_bit>
   15a2e:	b1c0      	cbz	r0, 15a62 <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   15a30:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   15a32:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   15a34:	2004      	movs	r0, #4
   15a36:	f103 0588 	add.w	r5, r3, #136	; 0x88
   15a3a:	462a      	mov	r2, r5
   15a3c:	7a19      	ldrb	r1, [r3, #8]
   15a3e:	f00a fdb0 	bl	205a2 <bt_keys_get_type>
		if (!keys) {
   15a42:	b948      	cbnz	r0, 15a58 <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
   15a44:	4628      	mov	r0, r5
   15a46:	f7f8 fc83 	bl	e350 <bt_addr_le_str_real>
   15a4a:	2145      	movs	r1, #69	; 0x45
   15a4c:	4602      	mov	r2, r0
   15a4e:	4808      	ldr	r0, [pc, #32]	; (15a70 <smp_encrypt_info+0x50>)
   15a50:	f006 ffa2 	bl	1c998 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   15a54:	2008      	movs	r0, #8
}
   15a56:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   15a58:	2210      	movs	r2, #16
   15a5a:	4631      	mov	r1, r6
   15a5c:	301a      	adds	r0, #26
   15a5e:	f008 fc53 	bl	1e308 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   15a62:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15a66:	2107      	movs	r1, #7
   15a68:	f00a fa19 	bl	1fe9e <atomic_set_bit>
	return 0;
   15a6c:	2000      	movs	r0, #0
   15a6e:	e7f2      	b.n	15a56 <smp_encrypt_info+0x36>
   15a70:	00025692 	.word	0x00025692

00015a74 <bt_smp_distribute_keys>:
{
   15a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a78:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   15a7a:	6800      	ldr	r0, [r0, #0]
{
   15a7c:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
   15a7e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   15a82:	b95b      	cbnz	r3, 15a9c <bt_smp_distribute_keys+0x28>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   15a84:	3088      	adds	r0, #136	; 0x88
   15a86:	f7f8 fc63 	bl	e350 <bt_addr_le_str_real>
   15a8a:	2145      	movs	r1, #69	; 0x45
   15a8c:	4602      	mov	r2, r0
   15a8e:	483e      	ldr	r0, [pc, #248]	; (15b88 <bt_smp_distribute_keys+0x114>)
   15a90:	f006 ff82 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15a94:	2008      	movs	r0, #8
}
   15a96:	b009      	add	sp, #36	; 0x24
   15a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15a9c:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
   15aa0:	2105      	movs	r1, #5
   15aa2:	4638      	mov	r0, r7
   15aa4:	f00a f8ba 	bl	1fc1c <atomic_test_bit>
   15aa8:	b988      	cbnz	r0, 15ace <bt_smp_distribute_keys+0x5a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   15aaa:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   15aae:	f010 0001 	ands.w	r0, r0, #1
   15ab2:	d0f0      	beq.n	15a96 <bt_smp_distribute_keys+0x22>
	struct bt_keys *keys = conn->le.keys;
   15ab4:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15ab6:	211a      	movs	r1, #26
   15ab8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   15aba:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15abe:	f7fb fa73 	bl	10fa8 <bt_rand>
   15ac2:	4680      	mov	r8, r0
   15ac4:	b128      	cbz	r0, 15ad2 <bt_smp_distribute_keys+0x5e>
			BT_ERR("Unable to get random bytes");
   15ac6:	2145      	movs	r1, #69	; 0x45
   15ac8:	4830      	ldr	r0, [pc, #192]	; (15b8c <bt_smp_distribute_keys+0x118>)
			BT_ERR("Unable to allocate Master Ident buffer");
   15aca:	f006 ff65 	bl	1c998 <printk>
	return 0;
   15ace:	2000      	movs	r0, #0
   15ad0:	e7e1      	b.n	15a96 <bt_smp_distribute_keys+0x22>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   15ad2:	2106      	movs	r1, #6
   15ad4:	4620      	mov	r0, r4
   15ad6:	f00a fa04 	bl	1fee2 <smp_create_pdu.constprop.0>
		if (!buf) {
   15ada:	4606      	mov	r6, r0
   15adc:	b910      	cbnz	r0, 15ae4 <bt_smp_distribute_keys+0x70>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   15ade:	2145      	movs	r1, #69	; 0x45
   15ae0:	482b      	ldr	r0, [pc, #172]	; (15b90 <bt_smp_distribute_keys+0x11c>)
   15ae2:	e7f2      	b.n	15aca <bt_smp_distribute_keys+0x56>
   15ae4:	2110      	movs	r1, #16
   15ae6:	3008      	adds	r0, #8
   15ae8:	f001 fed6 	bl	17898 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   15aec:	7b2a      	ldrb	r2, [r5, #12]
   15aee:	a901      	add	r1, sp, #4
   15af0:	4681      	mov	r9, r0
   15af2:	f008 fc09 	bl	1e308 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   15af6:	7b28      	ldrb	r0, [r5, #12]
   15af8:	280f      	cmp	r0, #15
   15afa:	d805      	bhi.n	15b08 <bt_smp_distribute_keys+0x94>
			(void)memset(info->ltk + keys->enc_size, 0,
   15afc:	f1c0 0210 	rsb	r2, r0, #16
   15b00:	4641      	mov	r1, r8
   15b02:	4448      	add	r0, r9
   15b04:	f008 fc2b 	bl	1e35e <memset>
		smp_send(smp, buf, NULL, NULL);
   15b08:	4631      	mov	r1, r6
   15b0a:	2200      	movs	r2, #0
   15b0c:	4620      	mov	r0, r4
   15b0e:	f7ff fe35 	bl	1577c <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   15b12:	2107      	movs	r1, #7
   15b14:	4620      	mov	r0, r4
   15b16:	f00a f9e4 	bl	1fee2 <smp_create_pdu.constprop.0>
		if (!buf) {
   15b1a:	4606      	mov	r6, r0
   15b1c:	b910      	cbnz	r0, 15b24 <bt_smp_distribute_keys+0xb0>
			BT_ERR("Unable to allocate Master Ident buffer");
   15b1e:	2145      	movs	r1, #69	; 0x45
   15b20:	481c      	ldr	r0, [pc, #112]	; (15b94 <bt_smp_distribute_keys+0x120>)
   15b22:	e7d2      	b.n	15aca <bt_smp_distribute_keys+0x56>
   15b24:	210a      	movs	r1, #10
   15b26:	3008      	adds	r0, #8
   15b28:	f001 feb6 	bl	17898 <net_buf_simple_add>
   15b2c:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   15b2e:	2208      	movs	r2, #8
   15b30:	a905      	add	r1, sp, #20
   15b32:	3002      	adds	r0, #2
   15b34:	f008 fbe8 	bl	1e308 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   15b38:	2202      	movs	r2, #2
   15b3a:	a907      	add	r1, sp, #28
   15b3c:	4640      	mov	r0, r8
   15b3e:	f008 fbe3 	bl	1e308 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   15b42:	4631      	mov	r1, r6
   15b44:	4620      	mov	r0, r4
   15b46:	4a14      	ldr	r2, [pc, #80]	; (15b98 <bt_smp_distribute_keys+0x124>)
   15b48:	f7ff fe18 	bl	1577c <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15b4c:	210d      	movs	r1, #13
   15b4e:	4638      	mov	r0, r7
   15b50:	f00a f864 	bl	1fc1c <atomic_test_bit>
   15b54:	2800      	cmp	r0, #0
   15b56:	d0ba      	beq.n	15ace <bt_smp_distribute_keys+0x5a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   15b58:	4628      	mov	r0, r5
   15b5a:	2101      	movs	r1, #1
   15b5c:	f00a fd31 	bl	205c2 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   15b60:	a901      	add	r1, sp, #4
   15b62:	2210      	movs	r2, #16
   15b64:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   15b68:	f008 fbce 	bl	1e308 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   15b6c:	a905      	add	r1, sp, #20
   15b6e:	2208      	movs	r2, #8
   15b70:	f105 0040 	add.w	r0, r5, #64	; 0x40
   15b74:	f008 fbc8 	bl	1e308 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   15b78:	2202      	movs	r2, #2
   15b7a:	a907      	add	r1, sp, #28
   15b7c:	f105 0048 	add.w	r0, r5, #72	; 0x48
   15b80:	f008 fbc2 	bl	1e308 <memcpy>
   15b84:	e7a3      	b.n	15ace <bt_smp_distribute_keys+0x5a>
   15b86:	bf00      	nop
   15b88:	000256b1 	.word	0x000256b1
   15b8c:	000256cb 	.word	0x000256cb
   15b90:	000256eb 	.word	0x000256eb
   15b94:	00025717 	.word	0x00025717
   15b98:	000168f1 	.word	0x000168f1

00015b9c <smp_send_pairing_req>:
{
   15b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15ba0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   15ba2:	f7ff fc9f 	bl	154e4 <smp_chan_get>
	if (!smp) {
   15ba6:	4605      	mov	r5, r0
   15ba8:	2800      	cmp	r0, #0
   15baa:	d06f      	beq.n	15c8c <smp_send_pairing_req+0xf0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15bac:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   15bb0:	2104      	movs	r1, #4
   15bb2:	4640      	mov	r0, r8
   15bb4:	f00a f832 	bl	1fc1c <atomic_test_bit>
   15bb8:	2800      	cmp	r0, #0
   15bba:	d16a      	bne.n	15c92 <smp_send_pairing_req+0xf6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15bbc:	2103      	movs	r1, #3
   15bbe:	4640      	mov	r0, r8
   15bc0:	f00a f82c 	bl	1fc1c <atomic_test_bit>
   15bc4:	b120      	cbz	r0, 15bd0 <smp_send_pairing_req+0x34>
		return -EBUSY;
   15bc6:	f06f 040f 	mvn.w	r4, #15
}
   15bca:	4620      	mov	r0, r4
   15bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15bd0:	2101      	movs	r1, #1
   15bd2:	4640      	mov	r0, r8
   15bd4:	f00a f822 	bl	1fc1c <atomic_test_bit>
   15bd8:	2800      	cmp	r0, #0
   15bda:	d1f4      	bne.n	15bc6 <smp_send_pairing_req+0x2a>
	if (!sec_level_reachable(conn)) {
   15bdc:	7aa0      	ldrb	r0, [r4, #10]
   15bde:	f7ff fde5 	bl	157ac <sec_level_reachable.isra.0>
   15be2:	2800      	cmp	r0, #0
   15be4:	d058      	beq.n	15c98 <smp_send_pairing_req+0xfc>
	if (!conn->le.keys) {
   15be6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15bea:	b13b      	cbz	r3, 15bfc <smp_send_pairing_req+0x60>
	if (smp_init(smp)) {
   15bec:	4628      	mov	r0, r5
   15bee:	f7ff fe39 	bl	15864 <smp_init>
   15bf2:	4604      	mov	r4, r0
   15bf4:	b170      	cbz	r0, 15c14 <smp_send_pairing_req+0x78>
		return -ENOBUFS;
   15bf6:	f06f 0436 	mvn.w	r4, #54	; 0x36
   15bfa:	e7e6      	b.n	15bca <smp_send_pairing_req+0x2e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15bfc:	7a20      	ldrb	r0, [r4, #8]
   15bfe:	f104 0188 	add.w	r1, r4, #136	; 0x88
   15c02:	f001 fa4f 	bl	170a4 <bt_keys_get_addr>
   15c06:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15c0a:	2800      	cmp	r0, #0
   15c0c:	d1ee      	bne.n	15bec <smp_send_pairing_req+0x50>
			return -ENOMEM;
   15c0e:	f06f 040b 	mvn.w	r4, #11
   15c12:	e7da      	b.n	15bca <smp_send_pairing_req+0x2e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   15c14:	2101      	movs	r1, #1
   15c16:	4628      	mov	r0, r5
   15c18:	f00a f963 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   15c1c:	4607      	mov	r7, r0
   15c1e:	2800      	cmp	r0, #0
   15c20:	d0e9      	beq.n	15bf6 <smp_send_pairing_req+0x5a>
   15c22:	2106      	movs	r1, #6
   15c24:	3008      	adds	r0, #8
   15c26:	f001 fe37 	bl	17898 <net_buf_simple_add>
   15c2a:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   15c2c:	2009      	movs	r0, #9
   15c2e:	f7ff fcdd 	bl	155ec <get_auth.constprop.0>
   15c32:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
   15c34:	f7ff fbc2 	bl	153bc <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15c38:	4b19      	ldr	r3, [pc, #100]	; (15ca0 <smp_send_pairing_req+0x104>)
	req->resp_key_dist = RECV_KEYS;
   15c3a:	f04f 0903 	mov.w	r9, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15c3e:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
   15c40:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15c44:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   15c46:	2310      	movs	r3, #16
   15c48:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
   15c4a:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
   15c4c:	7030      	strb	r0, [r6, #0]
	req->init_key_dist = SEND_KEYS;
   15c4e:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
   15c50:	f886 9005 	strb.w	r9, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   15c54:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15c56:	f885 30c9 	strb.w	r3, [r5, #201]	; 0xc9
	smp->local_dist = SEND_KEYS;
   15c5a:	f8a5 21a8 	strh.w	r2, [r5, #424]	; 0x1a8
	memcpy(smp->preq + 1, req, sizeof(*req));
   15c5e:	f105 00ca 	add.w	r0, r5, #202	; 0xca
   15c62:	2206      	movs	r2, #6
   15c64:	f008 fb50 	bl	1e308 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   15c68:	4622      	mov	r2, r4
   15c6a:	4639      	mov	r1, r7
   15c6c:	4628      	mov	r0, r5
   15c6e:	f7ff fd85 	bl	1577c <smp_send.constprop.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   15c72:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   15c76:	2102      	movs	r1, #2
   15c78:	f00a f911 	bl	1fe9e <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   15c7c:	210b      	movs	r1, #11
   15c7e:	f00a f90e 	bl	1fe9e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   15c82:	4649      	mov	r1, r9
   15c84:	4640      	mov	r0, r8
   15c86:	f00a f90a 	bl	1fe9e <atomic_set_bit>
	return 0;
   15c8a:	e79e      	b.n	15bca <smp_send_pairing_req+0x2e>
		return -ENOTCONN;
   15c8c:	f06f 0438 	mvn.w	r4, #56	; 0x38
   15c90:	e79b      	b.n	15bca <smp_send_pairing_req+0x2e>
		return -EIO;
   15c92:	f06f 0404 	mvn.w	r4, #4
   15c96:	e798      	b.n	15bca <smp_send_pairing_req+0x2e>
		return -EINVAL;
   15c98:	f06f 0415 	mvn.w	r4, #21
   15c9c:	e795      	b.n	15bca <smp_send_pairing_req+0x2e>
   15c9e:	bf00      	nop
   15ca0:	2000b748 	.word	0x2000b748

00015ca4 <smp_security_request>:
{
   15ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15ca6:	4606      	mov	r6, r0
   15ca8:	f856 4bc4 	ldr.w	r4, [r6], #196
	struct bt_smp_security_request *req = (void *)buf->data;
   15cac:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15cae:	4630      	mov	r0, r6
   15cb0:	2103      	movs	r1, #3
   15cb2:	f009 ffb3 	bl	1fc1c <atomic_test_bit>
   15cb6:	b110      	cbz	r0, 15cbe <smp_security_request+0x1a>
	return 0;
   15cb8:	2000      	movs	r0, #0
}
   15cba:	b003      	add	sp, #12
   15cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15cbe:	2101      	movs	r1, #1
   15cc0:	4630      	mov	r0, r6
   15cc2:	f009 ffab 	bl	1fc1c <atomic_test_bit>
   15cc6:	2800      	cmp	r0, #0
   15cc8:	d1f6      	bne.n	15cb8 <smp_security_request+0x14>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   15cca:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   15ccc:	4b2d      	ldr	r3, [pc, #180]	; (15d84 <smp_security_request+0xe0>)
   15cce:	781b      	ldrb	r3, [r3, #0]
   15cd0:	b17b      	cbz	r3, 15cf2 <smp_security_request+0x4e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   15cd2:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   15cd6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15cda:	b16b      	cbz	r3, 15cf8 <smp_security_request+0x54>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   15cdc:	89db      	ldrh	r3, [r3, #14]
   15cde:	f003 0324 	and.w	r3, r3, #36	; 0x24
   15ce2:	b9d3      	cbnz	r3, 15d1a <smp_security_request+0x76>
	if (smp_send_pairing_req(conn) < 0) {
   15ce4:	4620      	mov	r0, r4
   15ce6:	f7ff ff59 	bl	15b9c <smp_send_pairing_req>
   15cea:	2800      	cmp	r0, #0
   15cec:	db42      	blt.n	15d74 <smp_security_request+0xd0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15cee:	210f      	movs	r1, #15
   15cf0:	e043      	b.n	15d7a <smp_security_request+0xd6>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   15cf2:	f005 0507 	and.w	r5, r5, #7
   15cf6:	e7ee      	b.n	15cd6 <smp_security_request+0x32>
					     &conn->le.dst);
   15cf8:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   15cfc:	463a      	mov	r2, r7
   15cfe:	2020      	movs	r0, #32
   15d00:	7a21      	ldrb	r1, [r4, #8]
   15d02:	f001 fa0f 	bl	17124 <bt_keys_find>
   15d06:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15d0a:	b930      	cbnz	r0, 15d1a <smp_security_request+0x76>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   15d0c:	463a      	mov	r2, r7
   15d0e:	2004      	movs	r0, #4
   15d10:	7a21      	ldrb	r1, [r4, #8]
   15d12:	f001 fa07 	bl	17124 <bt_keys_find>
   15d16:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   15d1a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   15d1e:	2900      	cmp	r1, #0
   15d20:	d0e0      	beq.n	15ce4 <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_MITM) &&
   15d22:	076f      	lsls	r7, r5, #29
   15d24:	d50f      	bpl.n	15d46 <smp_security_request+0xa2>
   15d26:	7b4b      	ldrb	r3, [r1, #13]
   15d28:	07d8      	lsls	r0, r3, #31
   15d2a:	d40c      	bmi.n	15d46 <smp_security_request+0xa2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   15d2c:	f7ff fb46 	bl	153bc <get_io_capa>
   15d30:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   15d32:	462a      	mov	r2, r5
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   15d34:	d002      	beq.n	15d3c <smp_security_request+0x98>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15d36:	2149      	movs	r1, #73	; 0x49
   15d38:	4813      	ldr	r0, [pc, #76]	; (15d88 <smp_security_request+0xe4>)
   15d3a:	e001      	b.n	15d40 <smp_security_request+0x9c>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   15d3c:	2157      	movs	r1, #87	; 0x57
   15d3e:	4813      	ldr	r0, [pc, #76]	; (15d8c <smp_security_request+0xe8>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15d40:	f006 fe2a 	bl	1c998 <printk>
		goto pair;
   15d44:	e7ce      	b.n	15ce4 <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_SC) &&
   15d46:	072a      	lsls	r2, r5, #28
   15d48:	d504      	bpl.n	15d54 <smp_security_request+0xb0>
   15d4a:	89cb      	ldrh	r3, [r1, #14]
   15d4c:	069b      	lsls	r3, r3, #26
   15d4e:	d401      	bmi.n	15d54 <smp_security_request+0xb0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15d50:	462a      	mov	r2, r5
   15d52:	e7f0      	b.n	15d36 <smp_security_request+0x92>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   15d54:	7b0b      	ldrb	r3, [r1, #12]
   15d56:	f101 0218 	add.w	r2, r1, #24
   15d5a:	9300      	str	r3, [sp, #0]
   15d5c:	4620      	mov	r0, r4
   15d5e:	f101 031a 	add.w	r3, r1, #26
   15d62:	3110      	adds	r1, #16
   15d64:	f008 fe2f 	bl	1e9c6 <bt_conn_le_start_encryption>
   15d68:	2800      	cmp	r0, #0
   15d6a:	da05      	bge.n	15d78 <smp_security_request+0xd4>
		BT_ERR("Failed to start encryption");
   15d6c:	2145      	movs	r1, #69	; 0x45
   15d6e:	4808      	ldr	r0, [pc, #32]	; (15d90 <smp_security_request+0xec>)
   15d70:	f006 fe12 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15d74:	2008      	movs	r0, #8
   15d76:	e7a0      	b.n	15cba <smp_security_request+0x16>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   15d78:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15d7a:	4630      	mov	r0, r6
   15d7c:	f00a f88f 	bl	1fe9e <atomic_set_bit>
   15d80:	e79a      	b.n	15cb8 <smp_security_request+0x14>
   15d82:	bf00      	nop
   15d84:	2000b749 	.word	0x2000b749
   15d88:	00025743 	.word	0x00025743
   15d8c:	0002576f 	.word	0x0002576f
   15d90:	000257a3 	.word	0x000257a3

00015d94 <smp_send_pairing_confirm>:
{
   15d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   15d96:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
{
   15d9a:	4605      	mov	r5, r0
	switch (smp->method) {
   15d9c:	2c02      	cmp	r4, #2
   15d9e:	d823      	bhi.n	15de8 <smp_send_pairing_confirm+0x54>
   15da0:	b144      	cbz	r4, 15db4 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15da2:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
   15da6:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
   15daa:	40d4      	lsrs	r4, r2
   15dac:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   15db0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   15db4:	2103      	movs	r1, #3
   15db6:	4628      	mov	r0, r5
   15db8:	f00a f893 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!buf) {
   15dbc:	4606      	mov	r6, r0
   15dbe:	b1d0      	cbz	r0, 15df6 <smp_send_pairing_confirm+0x62>
   15dc0:	2110      	movs	r1, #16
   15dc2:	3008      	adds	r0, #8
   15dc4:	f001 fd68 	bl	17898 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   15dc8:	9000      	str	r0, [sp, #0]
   15dca:	4813      	ldr	r0, [pc, #76]	; (15e18 <smp_send_pairing_confirm+0x84>)
   15dcc:	4623      	mov	r3, r4
   15dce:	6800      	ldr	r0, [r0, #0]
   15dd0:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
   15dd4:	f205 1117 	addw	r1, r5, #279	; 0x117
   15dd8:	f00a f83c 	bl	1fe54 <smp_f4>
   15ddc:	4604      	mov	r4, r0
   15dde:	b170      	cbz	r0, 15dfe <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   15de0:	4630      	mov	r0, r6
   15de2:	f001 fc43 	bl	1766c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   15de6:	e006      	b.n	15df6 <smp_send_pairing_confirm+0x62>
	switch (smp->method) {
   15de8:	2c03      	cmp	r4, #3
   15dea:	d006      	beq.n	15dfa <smp_send_pairing_confirm+0x66>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15dec:	4622      	mov	r2, r4
   15dee:	2145      	movs	r1, #69	; 0x45
   15df0:	480a      	ldr	r0, [pc, #40]	; (15e1c <smp_send_pairing_confirm+0x88>)
   15df2:	f006 fdd1 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15df6:	2008      	movs	r0, #8
   15df8:	e00c      	b.n	15e14 <smp_send_pairing_confirm+0x80>
	switch (smp->method) {
   15dfa:	2400      	movs	r4, #0
   15dfc:	e7da      	b.n	15db4 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   15dfe:	4602      	mov	r2, r0
   15e00:	4631      	mov	r1, r6
   15e02:	4628      	mov	r0, r5
   15e04:	f7ff fcba 	bl	1577c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   15e08:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15e0c:	4621      	mov	r1, r4
   15e0e:	f009 ff58 	bl	1fcc2 <atomic_clear_bit>
	return 0;
   15e12:	4620      	mov	r0, r4
}
   15e14:	b002      	add	sp, #8
   15e16:	bd70      	pop	{r4, r5, r6, pc}
   15e18:	20009d3c 	.word	0x20009d3c
   15e1c:	00025603 	.word	0x00025603

00015e20 <smp_pairing_req>:
{
   15e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   15e24:	688f      	ldr	r7, [r1, #8]
{
   15e26:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   15e28:	78fb      	ldrb	r3, [r7, #3]
   15e2a:	3b07      	subs	r3, #7
   15e2c:	2b09      	cmp	r3, #9
   15e2e:	f200 80d7 	bhi.w	15fe0 <smp_pairing_req+0x1c0>
	struct bt_conn *conn = smp->chan.chan.conn;
   15e32:	f8d0 8000 	ldr.w	r8, [r0]
	if (!conn->le.keys) {
   15e36:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   15e3a:	b173      	cbz	r3, 15e5a <smp_pairing_req+0x3a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   15e3c:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   15e40:	210f      	movs	r1, #15
   15e42:	4630      	mov	r0, r6
   15e44:	f009 feea 	bl	1fc1c <atomic_test_bit>
   15e48:	b998      	cbnz	r0, 15e72 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   15e4a:	4620      	mov	r0, r4
   15e4c:	f7ff fd0a 	bl	15864 <smp_init>
		if (ret) {
   15e50:	b178      	cbz	r0, 15e72 <smp_pairing_req+0x52>
			return ret;
   15e52:	b2c5      	uxtb	r5, r0
}
   15e54:	4628      	mov	r0, r5
   15e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15e5a:	f898 0008 	ldrb.w	r0, [r8, #8]
   15e5e:	f108 0188 	add.w	r1, r8, #136	; 0x88
   15e62:	f001 f91f 	bl	170a4 <bt_keys_get_addr>
   15e66:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   15e6a:	2800      	cmp	r0, #0
   15e6c:	d1e6      	bne.n	15e3c <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   15e6e:	2508      	movs	r5, #8
   15e70:	e7f0      	b.n	15e54 <smp_pairing_req+0x34>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15e72:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   15e74:	2206      	movs	r2, #6
   15e76:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15e78:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
   15e7c:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   15e80:	f008 fa42 	bl	1e308 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   15e84:	2302      	movs	r3, #2
   15e86:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
   15e8a:	78b8      	ldrb	r0, [r7, #2]
   15e8c:	f7ff fbae 	bl	155ec <get_auth.constprop.0>
   15e90:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
   15e94:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   15e96:	f7ff fa91 	bl	153bc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15e9a:	4b53      	ldr	r3, [pc, #332]	; (15fe8 <smp_pairing_req+0x1c8>)
	rsp->io_capability = get_io_capa();
   15e9c:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15ea0:	781b      	ldrb	r3, [r3, #0]
   15ea2:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   15ea6:	2310      	movs	r3, #16
   15ea8:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   15eac:	793b      	ldrb	r3, [r7, #4]
   15eae:	f003 0303 	and.w	r3, r3, #3
   15eb2:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   15eb6:	797b      	ldrb	r3, [r7, #5]
   15eb8:	f003 0301 	and.w	r3, r3, #1
   15ebc:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   15ec0:	072b      	lsls	r3, r5, #28
   15ec2:	d50f      	bpl.n	15ee4 <smp_pairing_req+0xc4>
   15ec4:	78bb      	ldrb	r3, [r7, #2]
   15ec6:	071d      	lsls	r5, r3, #28
   15ec8:	d50c      	bpl.n	15ee4 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   15eca:	2105      	movs	r1, #5
   15ecc:	4630      	mov	r0, r6
   15ece:	f009 ffe6 	bl	1fe9e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   15ed2:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   15ed6:	f003 0302 	and.w	r3, r3, #2
   15eda:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
   15ede:	2300      	movs	r3, #0
   15ee0:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   15ee4:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   15ee8:	0698      	lsls	r0, r3, #26
   15eea:	d506      	bpl.n	15efa <smp_pairing_req+0xda>
   15eec:	78bb      	ldrb	r3, [r7, #2]
   15eee:	0699      	lsls	r1, r3, #26
   15ef0:	d503      	bpl.n	15efa <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   15ef2:	2114      	movs	r1, #20
   15ef4:	4630      	mov	r0, r6
   15ef6:	f009 ffd2 	bl	1fe9e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   15efa:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   15efe:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
   15f02:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   15f06:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   15f0a:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   15f0e:	07da      	lsls	r2, r3, #31
   15f10:	d506      	bpl.n	15f20 <smp_pairing_req+0x100>
   15f12:	78bb      	ldrb	r3, [r7, #2]
   15f14:	07db      	lsls	r3, r3, #31
   15f16:	d503      	bpl.n	15f20 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   15f18:	210d      	movs	r1, #13
   15f1a:	4630      	mov	r0, r6
   15f1c:	f009 ffbf 	bl	1fe9e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   15f20:	2103      	movs	r1, #3
   15f22:	4630      	mov	r0, r6
   15f24:	f009 ffbb 	bl	1fe9e <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   15f28:	7839      	ldrb	r1, [r7, #0]
   15f2a:	4620      	mov	r0, r4
   15f2c:	f7ff fb0e 	bl	1554c <get_pair_method>
   15f30:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
   15f34:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   15f38:	4620      	mov	r0, r4
   15f3a:	f009 fe75 	bl	1fc28 <update_keys_check>
   15f3e:	2800      	cmp	r0, #0
   15f40:	d050      	beq.n	15fe4 <smp_pairing_req+0x1c4>
	err = remote_sec_level_reachable(smp);
   15f42:	4620      	mov	r0, r4
   15f44:	f009 fe95 	bl	1fc72 <remote_sec_level_reachable>
	if (err) {
   15f48:	4605      	mov	r5, r0
   15f4a:	2800      	cmp	r0, #0
   15f4c:	d182      	bne.n	15e54 <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15f4e:	2105      	movs	r1, #5
   15f50:	4630      	mov	r0, r6
   15f52:	f009 fe63 	bl	1fc1c <atomic_test_bit>
   15f56:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   15f5a:	bb20      	cbnz	r0, 15fa6 <smp_pairing_req+0x186>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15f5c:	b995      	cbnz	r5, 15f84 <smp_pairing_req+0x164>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15f5e:	210f      	movs	r1, #15
   15f60:	4630      	mov	r0, r6
   15f62:	f009 fe5b 	bl	1fc1c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15f66:	b968      	cbnz	r0, 15f84 <smp_pairing_req+0x164>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15f68:	4f20      	ldr	r7, [pc, #128]	; (15fec <smp_pairing_req+0x1cc>)
   15f6a:	683b      	ldr	r3, [r7, #0]
   15f6c:	b153      	cbz	r3, 15f84 <smp_pairing_req+0x164>
	    bt_auth && bt_auth->pairing_confirm) {
   15f6e:	695b      	ldr	r3, [r3, #20]
   15f70:	b143      	cbz	r3, 15f84 <smp_pairing_req+0x164>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15f72:	4630      	mov	r0, r6
   15f74:	210a      	movs	r1, #10
   15f76:	f009 ff92 	bl	1fe9e <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   15f7a:	683b      	ldr	r3, [r7, #0]
   15f7c:	6820      	ldr	r0, [r4, #0]
   15f7e:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   15f80:	4798      	blx	r3
		return 0;
   15f82:	e767      	b.n	15e54 <smp_pairing_req+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   15f84:	2103      	movs	r1, #3
   15f86:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15f8a:	f009 ff88 	bl	1fe9e <atomic_set_bit>
	ret = send_pairing_rsp(smp);
   15f8e:	4620      	mov	r0, r4
   15f90:	f009 ffc7 	bl	1ff22 <send_pairing_rsp>
	if (ret) {
   15f94:	4605      	mov	r5, r0
   15f96:	2800      	cmp	r0, #0
   15f98:	f47f af5c 	bne.w	15e54 <smp_pairing_req+0x34>
	return legacy_request_tk(smp);
   15f9c:	4620      	mov	r0, r4
}
   15f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
   15fa2:	f7ff bc99 	b.w	158d8 <legacy_request_tk>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15fa6:	b98d      	cbnz	r5, 15fcc <smp_pairing_req+0x1ac>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15fa8:	210f      	movs	r1, #15
   15faa:	4630      	mov	r0, r6
   15fac:	f009 fe36 	bl	1fc1c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15fb0:	b960      	cbnz	r0, 15fcc <smp_pairing_req+0x1ac>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15fb2:	4f0e      	ldr	r7, [pc, #56]	; (15fec <smp_pairing_req+0x1cc>)
   15fb4:	683b      	ldr	r3, [r7, #0]
   15fb6:	b14b      	cbz	r3, 15fcc <smp_pairing_req+0x1ac>
	    bt_auth && bt_auth->pairing_confirm) {
   15fb8:	695b      	ldr	r3, [r3, #20]
   15fba:	b13b      	cbz	r3, 15fcc <smp_pairing_req+0x1ac>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15fbc:	4630      	mov	r0, r6
   15fbe:	210a      	movs	r1, #10
   15fc0:	f009 ff6d 	bl	1fe9e <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   15fc4:	683b      	ldr	r3, [r7, #0]
   15fc6:	4640      	mov	r0, r8
   15fc8:	695b      	ldr	r3, [r3, #20]
   15fca:	e7d9      	b.n	15f80 <smp_pairing_req+0x160>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   15fcc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15fd0:	210c      	movs	r1, #12
   15fd2:	f009 ff64 	bl	1fe9e <atomic_set_bit>
	return send_pairing_rsp(smp);
   15fd6:	4620      	mov	r0, r4
}
   15fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   15fdc:	f009 bfa1 	b.w	1ff22 <send_pairing_rsp>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   15fe0:	2506      	movs	r5, #6
   15fe2:	e737      	b.n	15e54 <smp_pairing_req+0x34>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   15fe4:	2503      	movs	r5, #3
   15fe6:	e735      	b.n	15e54 <smp_pairing_req+0x34>
   15fe8:	2000b748 	.word	0x2000b748
   15fec:	20009c18 	.word	0x20009c18

00015ff0 <sc_send_public_key>:
{
   15ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   15ff2:	210c      	movs	r1, #12
{
   15ff4:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   15ff6:	f009 ff74 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   15ffa:	4604      	mov	r4, r0
   15ffc:	b1b0      	cbz	r0, 1602c <sc_send_public_key+0x3c>
   15ffe:	2140      	movs	r1, #64	; 0x40
   16000:	3008      	adds	r0, #8
   16002:	f001 fc49 	bl	17898 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   16006:	4f0a      	ldr	r7, [pc, #40]	; (16030 <sc_send_public_key+0x40>)
   16008:	2220      	movs	r2, #32
   1600a:	6839      	ldr	r1, [r7, #0]
   1600c:	4606      	mov	r6, r0
   1600e:	f008 f97b 	bl	1e308 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   16012:	2220      	movs	r2, #32
   16014:	6839      	ldr	r1, [r7, #0]
   16016:	18b0      	adds	r0, r6, r2
   16018:	4411      	add	r1, r2
   1601a:	f008 f975 	bl	1e308 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1601e:	4628      	mov	r0, r5
   16020:	2200      	movs	r2, #0
   16022:	4621      	mov	r1, r4
   16024:	f7ff fbaa 	bl	1577c <smp_send.constprop.0>
	return 0;
   16028:	2000      	movs	r0, #0
}
   1602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1602c:	2008      	movs	r0, #8
   1602e:	e7fc      	b.n	1602a <sc_send_public_key+0x3a>
   16030:	20009d3c 	.word	0x20009d3c

00016034 <smp_public_key_slave>:
{
   16034:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16036:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   1603a:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1603c:	210e      	movs	r1, #14
   1603e:	4628      	mov	r0, r5
   16040:	f009 fdec 	bl	1fc1c <atomic_test_bit>
   16044:	b968      	cbnz	r0, 16062 <smp_public_key_slave+0x2e>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   16046:	4b25      	ldr	r3, [pc, #148]	; (160dc <smp_public_key_slave+0xa8>)
   16048:	2240      	movs	r2, #64	; 0x40
   1604a:	6819      	ldr	r1, [r3, #0]
   1604c:	f204 1017 	addw	r0, r4, #279	; 0x117
   16050:	f008 f949 	bl	1e2e6 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16054:	b928      	cbnz	r0, 16062 <smp_public_key_slave+0x2e>
		BT_WARN("Remote is using identical public key");
   16056:	2157      	movs	r1, #87	; 0x57
   16058:	4821      	ldr	r0, [pc, #132]	; (160e0 <smp_public_key_slave+0xac>)
   1605a:	f006 fc9d 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1605e:	2008      	movs	r0, #8
   16060:	e015      	b.n	1608e <smp_public_key_slave+0x5a>
	err = sc_send_public_key(smp);
   16062:	4620      	mov	r0, r4
   16064:	f7ff ffc4 	bl	15ff0 <sc_send_public_key>
	if (err) {
   16068:	b988      	cbnz	r0, 1608e <smp_public_key_slave+0x5a>
	switch (smp->method) {
   1606a:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1606e:	2a05      	cmp	r2, #5
   16070:	d82e      	bhi.n	160d0 <smp_public_key_slave+0x9c>
   16072:	e8df f002 	tbb	[pc, r2]
   16076:	1803      	.short	0x1803
   16078:	2b2d030d 	.word	0x2b2d030d
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1607c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16080:	2104      	movs	r1, #4
   16082:	f009 ff0c 	bl	1fe9e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   16086:	4620      	mov	r0, r4
   16088:	f7ff fe84 	bl	15d94 <smp_send_pairing_confirm>
		if (err) {
   1608c:	b1c8      	cbz	r0, 160c2 <smp_public_key_slave+0x8e>
}
   1608e:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
   16090:	4620      	mov	r0, r4
   16092:	f7ff fbbb 	bl	1580c <display_passkey>
		if (err) {
   16096:	2800      	cmp	r0, #0
   16098:	d1f9      	bne.n	1608e <smp_public_key_slave+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1609a:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1609c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   160a0:	f009 fefd 	bl	1fe9e <atomic_set_bit>
		break;
   160a4:	e00d      	b.n	160c2 <smp_public_key_slave+0x8e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   160a6:	2103      	movs	r1, #3
   160a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   160ac:	f009 fef7 	bl	1fe9e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   160b0:	4628      	mov	r0, r5
   160b2:	210a      	movs	r1, #10
   160b4:	f009 fef3 	bl	1fe9e <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   160b8:	4b0a      	ldr	r3, [pc, #40]	; (160e4 <smp_public_key_slave+0xb0>)
   160ba:	6820      	ldr	r0, [r4, #0]
   160bc:	681b      	ldr	r3, [r3, #0]
   160be:	685b      	ldr	r3, [r3, #4]
   160c0:	4798      	blx	r3
	return generate_dhkey(smp);
   160c2:	4620      	mov	r0, r4
}
   160c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   160c8:	f009 befa 	b.w	1fec0 <generate_dhkey>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   160cc:	2104      	movs	r1, #4
   160ce:	e7e5      	b.n	1609c <smp_public_key_slave+0x68>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   160d0:	2145      	movs	r1, #69	; 0x45
   160d2:	4805      	ldr	r0, [pc, #20]	; (160e8 <smp_public_key_slave+0xb4>)
   160d4:	f006 fc60 	bl	1c998 <printk>
   160d8:	e7c1      	b.n	1605e <smp_public_key_slave+0x2a>
   160da:	bf00      	nop
   160dc:	20009d3c 	.word	0x20009d3c
   160e0:	000257c3 	.word	0x000257c3
   160e4:	20009c18 	.word	0x20009c18
   160e8:	00025603 	.word	0x00025603

000160ec <smp_public_key>:
{
   160ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   160ee:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   160f0:	f200 1717 	addw	r7, r0, #279	; 0x117
{
   160f4:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   160f6:	2220      	movs	r2, #32
   160f8:	4629      	mov	r1, r5
   160fa:	4638      	mov	r0, r7
   160fc:	f008 f904 	bl	1e308 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   16100:	2220      	movs	r2, #32
   16102:	f204 1037 	addw	r0, r4, #311	; 0x137
   16106:	18a9      	adds	r1, r5, r2
   16108:	f008 f8fe 	bl	1e308 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   1610c:	2240      	movs	r2, #64	; 0x40
   1610e:	4638      	mov	r0, r7
   16110:	4956      	ldr	r1, [pc, #344]	; (1626c <smp_public_key+0x180>)
   16112:	f008 f8e8 	bl	1e2e6 <memcmp>
   16116:	b1c0      	cbz	r0, 1614a <smp_public_key+0x5e>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16118:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1611a:	78db      	ldrb	r3, [r3, #3]
   1611c:	2b00      	cmp	r3, #0
   1611e:	f040 8092 	bne.w	16246 <smp_public_key+0x15a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16122:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   16126:	210e      	movs	r1, #14
   16128:	4630      	mov	r0, r6
   1612a:	f009 fd77 	bl	1fc1c <atomic_test_bit>
   1612e:	bb70      	cbnz	r0, 1618e <smp_public_key+0xa2>
		    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   16130:	4b4f      	ldr	r3, [pc, #316]	; (16270 <smp_public_key+0x184>)
   16132:	2240      	movs	r2, #64	; 0x40
   16134:	4638      	mov	r0, r7
   16136:	6819      	ldr	r1, [r3, #0]
   16138:	f008 f8d5 	bl	1e2e6 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1613c:	bb38      	cbnz	r0, 1618e <smp_public_key+0xa2>
			BT_WARN("Remote is using identical public key");
   1613e:	2157      	movs	r1, #87	; 0x57
   16140:	484c      	ldr	r0, [pc, #304]	; (16274 <smp_public_key+0x188>)
   16142:	f006 fc29 	bl	1c998 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   16146:	2008      	movs	r0, #8
   16148:	e086      	b.n	16258 <smp_public_key+0x16c>
		BT_INFO("Remote is using Debug Public key");
   1614a:	2149      	movs	r1, #73	; 0x49
   1614c:	484a      	ldr	r0, [pc, #296]	; (16278 <smp_public_key+0x18c>)
   1614e:	f006 fc23 	bl	1c998 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   16152:	210e      	movs	r1, #14
   16154:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16158:	f009 fea1 	bl	1fe9e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1615c:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
   1615e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16162:	b933      	cbnz	r3, 16172 <smp_public_key+0x86>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16164:	7a28      	ldrb	r0, [r5, #8]
   16166:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1616a:	f000 ff9b 	bl	170a4 <bt_keys_get_addr>
   1616e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   16172:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16176:	2b00      	cmp	r3, #0
   16178:	d0ce      	beq.n	16118 <smp_public_key+0x2c>
   1617a:	89da      	ldrh	r2, [r3, #14]
   1617c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   16180:	2a00      	cmp	r2, #0
   16182:	d0c9      	beq.n	16118 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   16184:	7b5b      	ldrb	r3, [r3, #13]
   16186:	079b      	lsls	r3, r3, #30
   16188:	d5c6      	bpl.n	16118 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1618a:	2003      	movs	r0, #3
   1618c:	e064      	b.n	16258 <smp_public_key+0x16c>
		switch (smp->method) {
   1618e:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16192:	2a05      	cmp	r2, #5
   16194:	d852      	bhi.n	1623c <smp_public_key+0x150>
   16196:	e8df f002 	tbb	[pc, r2]
   1619a:	2103      	.short	0x2103
   1619c:	2f510309 	.word	0x2f510309
			atomic_set_bit(&smp->allowed_cmds,
   161a0:	2103      	movs	r1, #3
   161a2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
			atomic_set_bit(&smp->allowed_cmds,
   161a6:	f009 fe7a 	bl	1fe9e <atomic_set_bit>
			break;
   161aa:	e011      	b.n	161d0 <smp_public_key+0xe4>
			err = display_passkey(smp);
   161ac:	4620      	mov	r0, r4
   161ae:	f7ff fb2d 	bl	1580c <display_passkey>
			if (err) {
   161b2:	2800      	cmp	r0, #0
   161b4:	d150      	bne.n	16258 <smp_public_key+0x16c>
			atomic_set_bit(&smp->allowed_cmds,
   161b6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   161ba:	2103      	movs	r1, #3
   161bc:	f009 fe6f 	bl	1fe9e <atomic_set_bit>
			atomic_set_bit(&smp->allowed_cmds,
   161c0:	210e      	movs	r1, #14
   161c2:	f009 fe6c 	bl	1fe9e <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   161c6:	4620      	mov	r0, r4
   161c8:	f7ff fde4 	bl	15d94 <smp_send_pairing_confirm>
			if (err) {
   161cc:	2800      	cmp	r0, #0
   161ce:	d143      	bne.n	16258 <smp_public_key+0x16c>
		return generate_dhkey(smp);
   161d0:	4620      	mov	r0, r4
}
   161d2:	b003      	add	sp, #12
   161d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   161d8:	f009 be72 	b.w	1fec0 <generate_dhkey>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   161dc:	4625      	mov	r5, r4
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   161de:	210a      	movs	r1, #10
   161e0:	4630      	mov	r0, r6
   161e2:	f009 fe5c 	bl	1fe9e <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   161e6:	4b25      	ldr	r3, [pc, #148]	; (1627c <smp_public_key+0x190>)
   161e8:	f855 0bc0 	ldr.w	r0, [r5], #192
   161ec:	681b      	ldr	r3, [r3, #0]
   161ee:	685b      	ldr	r3, [r3, #4]
   161f0:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
   161f2:	210e      	movs	r1, #14
   161f4:	4628      	mov	r0, r5
   161f6:	e7d6      	b.n	161a6 <smp_public_key+0xba>
			if (bt_rand(smp->prnd, 16)) {
   161f8:	2110      	movs	r1, #16
   161fa:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   161fe:	f7fa fed3 	bl	10fa8 <bt_rand>
   16202:	4605      	mov	r5, r0
   16204:	2800      	cmp	r0, #0
   16206:	d19e      	bne.n	16146 <smp_public_key+0x5a>
			if (bt_auth && bt_auth->oob_data_request) {
   16208:	4f1c      	ldr	r7, [pc, #112]	; (1627c <smp_public_key+0x190>)
   1620a:	683b      	ldr	r3, [r7, #0]
   1620c:	b363      	cbz	r3, 16268 <smp_public_key+0x17c>
   1620e:	68db      	ldr	r3, [r3, #12]
   16210:	b353      	cbz	r3, 16268 <smp_public_key+0x17c>
				struct bt_conn_oob_info info = {
   16212:	4b1b      	ldr	r3, [pc, #108]	; (16280 <smp_public_key+0x194>)
				le_sc_oob_config_set(smp, &info);
   16214:	4620      	mov	r0, r4
				struct bt_conn_oob_info info = {
   16216:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
				le_sc_oob_config_set(smp, &info);
   1621a:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   1621c:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   16220:	f009 fcdb 	bl	1fbda <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   16224:	4630      	mov	r0, r6
   16226:	210c      	movs	r1, #12
				smp->oobd_remote = NULL;
   16228:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
				atomic_set_bit(smp->flags,
   1622c:	f009 fe37 	bl	1fe9e <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   16230:	683b      	ldr	r3, [r7, #0]
   16232:	6820      	ldr	r0, [r4, #0]
   16234:	68db      	ldr	r3, [r3, #12]
   16236:	a901      	add	r1, sp, #4
   16238:	4798      	blx	r3
			break;
   1623a:	e7c9      	b.n	161d0 <smp_public_key+0xe4>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1623c:	2145      	movs	r1, #69	; 0x45
   1623e:	4811      	ldr	r0, [pc, #68]	; (16284 <smp_public_key+0x198>)
   16240:	f006 fbaa 	bl	1c998 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   16244:	e77f      	b.n	16146 <smp_public_key+0x5a>
	if (!sc_public_key) {
   16246:	4b0a      	ldr	r3, [pc, #40]	; (16270 <smp_public_key+0x184>)
   16248:	681d      	ldr	r5, [r3, #0]
   1624a:	b93d      	cbnz	r5, 1625c <smp_public_key+0x170>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1624c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16250:	2106      	movs	r1, #6
   16252:	f009 fe24 	bl	1fe9e <atomic_set_bit>
		return 0;
   16256:	4628      	mov	r0, r5
}
   16258:	b003      	add	sp, #12
   1625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = smp_public_key_slave(smp);
   1625c:	4620      	mov	r0, r4
}
   1625e:	b003      	add	sp, #12
   16260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_slave(smp);
   16264:	f7ff bee6 	b.w	16034 <smp_public_key_slave>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   16268:	2002      	movs	r0, #2
   1626a:	e7f5      	b.n	16258 <smp_public_key+0x16c>
   1626c:	00025a40 	.word	0x00025a40
   16270:	20009d3c 	.word	0x20009d3c
   16274:	000257c3 	.word	0x000257c3
   16278:	000257ed 	.word	0x000257ed
   1627c:	20009c18 	.word	0x20009c18
   16280:	00021c01 	.word	0x00021c01
   16284:	00025603 	.word	0x00025603

00016288 <compute_and_send_master_dhcheck>:
{
   16288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1628c:	4604      	mov	r4, r0
   1628e:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   16290:	2210      	movs	r2, #16
   16292:	2100      	movs	r1, #0
   16294:	a808      	add	r0, sp, #32
   16296:	f008 f862 	bl	1e35e <memset>
	switch (smp->method) {
   1629a:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1629e:	2a05      	cmp	r2, #5
   162a0:	d82b      	bhi.n	162fa <compute_and_send_master_dhcheck+0x72>
   162a2:	e8df f002 	tbb	[pc, r2]
   162a6:	0309      	.short	0x0309
   162a8:	242a0903 	.word	0x242a0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   162ac:	2204      	movs	r2, #4
   162ae:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   162b2:	a808      	add	r0, sp, #32
   162b4:	f008 f828 	bl	1e308 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   162b8:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
   162ba:	f855 3bf7 	ldr.w	r3, [r5], #247
		   smp->tk)) {
   162be:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   162c2:	f204 1787 	addw	r7, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   162c6:	e9cd 7201 	strd	r7, r2, [sp, #4]
   162ca:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   162ce:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   162d2:	9200      	str	r2, [sp, #0]
   162d4:	4641      	mov	r1, r8
   162d6:	462a      	mov	r2, r5
   162d8:	338f      	adds	r3, #143	; 0x8f
   162da:	f204 1057 	addw	r0, r4, #343	; 0x157
   162de:	f7ff f9a3 	bl	15628 <smp_f5>
   162e2:	b190      	cbz	r0, 1630a <compute_and_send_master_dhcheck+0x82>
		BT_ERR("Calculate LTK failed");
   162e4:	2145      	movs	r1, #69	; 0x45
   162e6:	4818      	ldr	r0, [pc, #96]	; (16348 <compute_and_send_master_dhcheck+0xc0>)
   162e8:	f006 fb56 	bl	1c998 <printk>
   162ec:	e009      	b.n	16302 <compute_and_send_master_dhcheck+0x7a>
		if (smp->oobd_remote) {
   162ee:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   162f2:	2900      	cmp	r1, #0
   162f4:	d0e0      	beq.n	162b8 <compute_and_send_master_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   162f6:	2210      	movs	r2, #16
   162f8:	e7db      	b.n	162b2 <compute_and_send_master_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   162fa:	2145      	movs	r1, #69	; 0x45
   162fc:	4813      	ldr	r0, [pc, #76]	; (1634c <compute_and_send_master_dhcheck+0xc4>)
   162fe:	f006 fb4b 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16302:	2008      	movs	r0, #8
}
   16304:	b00c      	add	sp, #48	; 0x30
   16306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   &smp->chan.chan.conn->le.init_addr,
   1630a:	4622      	mov	r2, r4
   1630c:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   16310:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   16312:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   16316:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   16318:	e9cd 2300 	strd	r2, r3, [sp]
   1631c:	9102      	str	r1, [sp, #8]
   1631e:	462a      	mov	r2, r5
   16320:	4641      	mov	r1, r8
   16322:	4638      	mov	r0, r7
   16324:	9603      	str	r6, [sp, #12]
   16326:	ab08      	add	r3, sp, #32
   16328:	f009 fd48 	bl	1fdbc <smp_f6>
   1632c:	b110      	cbz	r0, 16334 <compute_and_send_master_dhcheck+0xac>
		BT_ERR("Calculate local DHKey check failed");
   1632e:	2145      	movs	r1, #69	; 0x45
   16330:	4807      	ldr	r0, [pc, #28]	; (16350 <compute_and_send_master_dhcheck+0xc8>)
   16332:	e7d9      	b.n	162e8 <compute_and_send_master_dhcheck+0x60>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   16334:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16338:	210d      	movs	r1, #13
   1633a:	f009 fdb0 	bl	1fe9e <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   1633e:	4631      	mov	r1, r6
   16340:	4620      	mov	r0, r4
   16342:	f009 fe20 	bl	1ff86 <sc_smp_send_dhkey_check>
   16346:	e7dd      	b.n	16304 <compute_and_send_master_dhcheck+0x7c>
   16348:	00025813 	.word	0x00025813
   1634c:	00025603 	.word	0x00025603
   16350:	0002582d 	.word	0x0002582d

00016354 <compute_and_check_and_send_slave_dhcheck>:
{
   16354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16358:	4604      	mov	r4, r0
   1635a:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   1635c:	2210      	movs	r2, #16
   1635e:	2100      	movs	r1, #0
   16360:	a80c      	add	r0, sp, #48	; 0x30
   16362:	f007 fffc 	bl	1e35e <memset>
	switch (smp->method) {
   16366:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1636a:	2a05      	cmp	r2, #5
   1636c:	d82b      	bhi.n	163c6 <compute_and_check_and_send_slave_dhcheck+0x72>
   1636e:	e8df f002 	tbb	[pc, r2]
   16372:	0309      	.short	0x0309
   16374:	242a0903 	.word	0x242a0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16378:	2204      	movs	r2, #4
   1637a:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1637e:	a80c      	add	r0, sp, #48	; 0x30
   16380:	f007 ffc2 	bl	1e308 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   16384:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
   16386:	f855 3be7 	ldr.w	r3, [r5], #231
		   smp->tk)) {
   1638a:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1638e:	f204 1687 	addw	r6, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   16392:	e9cd 6201 	strd	r6, r2, [sp, #4]
   16396:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1639a:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1639e:	9200      	str	r2, [sp, #0]
   163a0:	4639      	mov	r1, r7
   163a2:	462a      	mov	r2, r5
   163a4:	338f      	adds	r3, #143	; 0x8f
   163a6:	f204 1057 	addw	r0, r4, #343	; 0x157
   163aa:	f7ff f93d 	bl	15628 <smp_f5>
   163ae:	b198      	cbz	r0, 163d8 <compute_and_check_and_send_slave_dhcheck+0x84>
		BT_ERR("Calculate LTK failed");
   163b0:	2145      	movs	r1, #69	; 0x45
   163b2:	4832      	ldr	r0, [pc, #200]	; (1647c <compute_and_check_and_send_slave_dhcheck+0x128>)
		BT_ERR("Calculate remote DHKey check failed");
   163b4:	f006 faf0 	bl	1c998 <printk>
   163b8:	e009      	b.n	163ce <compute_and_check_and_send_slave_dhcheck+0x7a>
		if (smp->oobd_remote) {
   163ba:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   163be:	2900      	cmp	r1, #0
   163c0:	d0e0      	beq.n	16384 <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   163c2:	2210      	movs	r2, #16
   163c4:	e7db      	b.n	1637e <compute_and_check_and_send_slave_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   163c6:	2145      	movs	r1, #69	; 0x45
   163c8:	482d      	ldr	r0, [pc, #180]	; (16480 <compute_and_check_and_send_slave_dhcheck+0x12c>)
   163ca:	f006 fae5 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   163ce:	2508      	movs	r5, #8
}
   163d0:	4628      	mov	r0, r5
   163d2:	b011      	add	sp, #68	; 0x44
   163d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		   &smp->chan.chan.conn->le.resp_addr,
   163d8:	4622      	mov	r2, r4
   163da:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   163de:	f10d 0820 	add.w	r8, sp, #32
		   &smp->chan.chan.conn->le.init_addr, e)) {
   163e2:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   163e6:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   163e8:	e9cd 2300 	strd	r2, r3, [sp]
   163ec:	9102      	str	r1, [sp, #8]
   163ee:	463a      	mov	r2, r7
   163f0:	4629      	mov	r1, r5
   163f2:	4630      	mov	r0, r6
   163f4:	f8cd 800c 	str.w	r8, [sp, #12]
   163f8:	ab0c      	add	r3, sp, #48	; 0x30
   163fa:	f009 fcdf 	bl	1fdbc <smp_f6>
   163fe:	b110      	cbz	r0, 16406 <compute_and_check_and_send_slave_dhcheck+0xb2>
		BT_ERR("Calculate local DHKey check failed");
   16400:	2145      	movs	r1, #69	; 0x45
   16402:	4820      	ldr	r0, [pc, #128]	; (16484 <compute_and_check_and_send_slave_dhcheck+0x130>)
   16404:	e7d6      	b.n	163b4 <compute_and_check_and_send_slave_dhcheck+0x60>
	if (smp->method == LE_SC_OOB) {
   16406:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1640a:	2b05      	cmp	r3, #5
   1640c:	d106      	bne.n	1641c <compute_and_check_and_send_slave_dhcheck+0xc8>
		if (smp->oobd_local) {
   1640e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   16412:	2210      	movs	r2, #16
   16414:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   16416:	b1c1      	cbz	r1, 1644a <compute_and_check_and_send_slave_dhcheck+0xf6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   16418:	f007 ff76 	bl	1e308 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1641c:	4622      	mov	r2, r4
   1641e:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   16422:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   16426:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1642a:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1642c:	e9cd 2300 	strd	r2, r3, [sp]
   16430:	9102      	str	r1, [sp, #8]
   16432:	462a      	mov	r2, r5
   16434:	4639      	mov	r1, r7
   16436:	4630      	mov	r0, r6
   16438:	f8cd 900c 	str.w	r9, [sp, #12]
   1643c:	ab0c      	add	r3, sp, #48	; 0x30
   1643e:	f009 fcbd 	bl	1fdbc <smp_f6>
   16442:	b128      	cbz	r0, 16450 <compute_and_check_and_send_slave_dhcheck+0xfc>
		BT_ERR("Calculate remote DHKey check failed");
   16444:	2145      	movs	r1, #69	; 0x45
   16446:	4810      	ldr	r0, [pc, #64]	; (16488 <compute_and_check_and_send_slave_dhcheck+0x134>)
   16448:	e7b4      	b.n	163b4 <compute_and_check_and_send_slave_dhcheck+0x60>
			memset(r, 0, sizeof(r));
   1644a:	f007 ff88 	bl	1e35e <memset>
   1644e:	e7e5      	b.n	1641c <compute_and_check_and_send_slave_dhcheck+0xc8>
	if (memcmp(smp->e, re, 16)) {
   16450:	2210      	movs	r2, #16
   16452:	4649      	mov	r1, r9
   16454:	f204 1077 	addw	r0, r4, #375	; 0x177
   16458:	f007 ff45 	bl	1e2e6 <memcmp>
   1645c:	b960      	cbnz	r0, 16478 <compute_and_check_and_send_slave_dhcheck+0x124>
	err = sc_smp_send_dhkey_check(smp, e);
   1645e:	4641      	mov	r1, r8
   16460:	4620      	mov	r0, r4
   16462:	f009 fd90 	bl	1ff86 <sc_smp_send_dhkey_check>
	if (err) {
   16466:	4605      	mov	r5, r0
   16468:	2800      	cmp	r0, #0
   1646a:	d1b1      	bne.n	163d0 <compute_and_check_and_send_slave_dhcheck+0x7c>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1646c:	2101      	movs	r1, #1
   1646e:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16472:	f009 fd14 	bl	1fe9e <atomic_set_bit>
	return 0;
   16476:	e7ab      	b.n	163d0 <compute_and_check_and_send_slave_dhcheck+0x7c>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   16478:	250b      	movs	r5, #11
   1647a:	e7a9      	b.n	163d0 <compute_and_check_and_send_slave_dhcheck+0x7c>
   1647c:	00025813 	.word	0x00025813
   16480:	00025603 	.word	0x00025603
   16484:	0002582d 	.word	0x0002582d
   16488:	00025855 	.word	0x00025855

0001648c <smp_dhkey_check>:
{
   1648c:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1648e:	6803      	ldr	r3, [r0, #0]
{
   16490:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16492:	78dd      	ldrb	r5, [r3, #3]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   16494:	688f      	ldr	r7, [r1, #8]
{
   16496:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16498:	2d00      	cmp	r5, #0
   1649a:	d165      	bne.n	16568 <smp_dhkey_check+0xdc>
		(void)memset(r, 0, sizeof(r));
   1649c:	2210      	movs	r2, #16
   1649e:	4629      	mov	r1, r5
   164a0:	a80c      	add	r0, sp, #48	; 0x30
   164a2:	f007 ff5c 	bl	1e35e <memset>
		switch (smp->method) {
   164a6:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   164aa:	2a05      	cmp	r2, #5
   164ac:	d84c      	bhi.n	16548 <smp_dhkey_check+0xbc>
   164ae:	e8df f002 	tbb	[pc, r2]
   164b2:	0309      	.short	0x0309
   164b4:	454b0903 	.word	0x454b0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   164b8:	2204      	movs	r2, #4
   164ba:	f504 71cc 	add.w	r1, r4, #408	; 0x198
				memcpy(r, smp->oobd_local->r, sizeof(r));
   164be:	a80c      	add	r0, sp, #48	; 0x30
   164c0:	f007 ff22 	bl	1e308 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   164c4:	4622      	mov	r2, r4
   164c6:	f852 3be7 	ldr.w	r3, [r2], #231
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   164ca:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
   164cc:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   164d0:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   164d2:	9301      	str	r3, [sp, #4]
   164d4:	f104 03d1 	add.w	r3, r4, #209	; 0xd1
   164d8:	9102      	str	r1, [sp, #8]
   164da:	9300      	str	r3, [sp, #0]
   164dc:	9603      	str	r6, [sp, #12]
   164de:	ab0c      	add	r3, sp, #48	; 0x30
   164e0:	f104 01f7 	add.w	r1, r4, #247	; 0xf7
   164e4:	f204 1087 	addw	r0, r4, #391	; 0x187
   164e8:	f009 fc68 	bl	1fdbc <smp_f6>
   164ec:	bb80      	cbnz	r0, 16550 <smp_dhkey_check+0xc4>
		if (memcmp(e, req->e, 16)) {
   164ee:	4630      	mov	r0, r6
   164f0:	2210      	movs	r2, #16
   164f2:	4639      	mov	r1, r7
   164f4:	f007 fef7 	bl	1e2e6 <memcmp>
   164f8:	4606      	mov	r6, r0
   164fa:	bb98      	cbnz	r0, 16564 <smp_dhkey_check+0xd8>
	return MIN(req->max_key_size, rsp->max_key_size);
   164fc:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   16500:	f894 70d4 	ldrb.w	r7, [r4, #212]	; 0xd4
		(void)memset(ediv, 0, sizeof(ediv));
   16504:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   16506:	429f      	cmp	r7, r3
   16508:	bf28      	it	cs
   1650a:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1650c:	2202      	movs	r2, #2
   1650e:	a805      	add	r0, sp, #20
   16510:	f007 ff25 	bl	1e35e <memset>
		(void)memset(rand, 0, sizeof(rand));
   16514:	2208      	movs	r2, #8
   16516:	4631      	mov	r1, r6
   16518:	a806      	add	r0, sp, #24
   1651a:	f007 ff20 	bl	1e35e <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1651e:	6820      	ldr	r0, [r4, #0]
   16520:	9700      	str	r7, [sp, #0]
   16522:	f204 1307 	addw	r3, r4, #263	; 0x107
   16526:	aa05      	add	r2, sp, #20
   16528:	a906      	add	r1, sp, #24
   1652a:	f008 fa4c 	bl	1e9c6 <bt_conn_le_start_encryption>
   1652e:	2800      	cmp	r0, #0
   16530:	da12      	bge.n	16558 <smp_dhkey_check+0xcc>
			BT_ERR("Failed to start encryption");
   16532:	2145      	movs	r1, #69	; 0x45
   16534:	4820      	ldr	r0, [pc, #128]	; (165b8 <smp_dhkey_check+0x12c>)
   16536:	f006 fa2f 	bl	1c998 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1653a:	e009      	b.n	16550 <smp_dhkey_check+0xc4>
			if (smp->oobd_local) {
   1653c:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   16540:	2900      	cmp	r1, #0
   16542:	d0bf      	beq.n	164c4 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   16544:	2210      	movs	r2, #16
   16546:	e7ba      	b.n	164be <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   16548:	2145      	movs	r1, #69	; 0x45
   1654a:	481c      	ldr	r0, [pc, #112]	; (165bc <smp_dhkey_check+0x130>)
   1654c:	f006 fa24 	bl	1c998 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   16550:	2508      	movs	r5, #8
}
   16552:	4628      	mov	r0, r5
   16554:	b011      	add	sp, #68	; 0x44
   16556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16558:	2101      	movs	r1, #1
   1655a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1655e:	f009 fc9e 	bl	1fe9e <atomic_set_bit>
			return 0;
   16562:	e7f6      	b.n	16552 <smp_dhkey_check+0xc6>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   16564:	250b      	movs	r5, #11
   16566:	e7f4      	b.n	16552 <smp_dhkey_check+0xc6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   16568:	2d01      	cmp	r5, #1
   1656a:	d115      	bne.n	16598 <smp_dhkey_check+0x10c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1656c:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   16570:	2110      	movs	r1, #16
   16572:	4630      	mov	r0, r6
   16574:	f009 fba5 	bl	1fcc2 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   16578:	4639      	mov	r1, r7
   1657a:	2210      	movs	r2, #16
   1657c:	f204 1077 	addw	r0, r4, #375	; 0x177
   16580:	f007 fec2 	bl	1e308 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   16584:	2107      	movs	r1, #7
   16586:	4630      	mov	r0, r6
   16588:	f009 fb48 	bl	1fc1c <atomic_test_bit>
   1658c:	4605      	mov	r5, r0
   1658e:	b128      	cbz	r0, 1659c <smp_dhkey_check+0x110>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16590:	2109      	movs	r1, #9
   16592:	4630      	mov	r0, r6
   16594:	f009 fc83 	bl	1fe9e <atomic_set_bit>
	return 0;
   16598:	2500      	movs	r5, #0
   1659a:	e7da      	b.n	16552 <smp_dhkey_check+0xc6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1659c:	210a      	movs	r1, #10
   1659e:	4630      	mov	r0, r6
   165a0:	f009 fb3c 	bl	1fc1c <atomic_test_bit>
   165a4:	b110      	cbz	r0, 165ac <smp_dhkey_check+0x120>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   165a6:	2109      	movs	r1, #9
   165a8:	4630      	mov	r0, r6
   165aa:	e7d8      	b.n	1655e <smp_dhkey_check+0xd2>
		return compute_and_check_and_send_slave_dhcheck(smp);
   165ac:	4620      	mov	r0, r4
}
   165ae:	b011      	add	sp, #68	; 0x44
   165b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   165b4:	f7ff bece 	b.w	16354 <compute_and_check_and_send_slave_dhcheck>
   165b8:	000257a3 	.word	0x000257a3
   165bc:	00025603 	.word	0x00025603

000165c0 <bt_smp_connected>:
{
   165c0:	b510      	push	{r4, lr}
   165c2:	4604      	mov	r4, r0
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   165c4:	2230      	movs	r2, #48	; 0x30
   165c6:	2100      	movs	r1, #0
   165c8:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   165cc:	f007 fec7 	bl	1e35e <memset>
   165d0:	4b03      	ldr	r3, [pc, #12]	; (165e0 <bt_smp_connected+0x20>)
	smp_reset(smp);
   165d2:	4620      	mov	r0, r4
   165d4:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
   165d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   165dc:	f009 bd00 	b.w	1ffe0 <smp_reset>
   165e0:	0001681d 	.word	0x0001681d

000165e4 <smp_pairing_complete>:
{
   165e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165e8:	4604      	mov	r4, r0
	if (!status) {
   165ea:	460d      	mov	r5, r1
   165ec:	4f24      	ldr	r7, [pc, #144]	; (16680 <smp_pairing_complete+0x9c>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   165ee:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
	if (!status) {
   165f2:	b9b1      	cbnz	r1, 16622 <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   165f4:	210d      	movs	r1, #13
   165f6:	4640      	mov	r0, r8
   165f8:	f009 fb10 	bl	1fc1c <atomic_test_bit>
		if (bond_flag) {
   165fc:	4605      	mov	r5, r0
   165fe:	b120      	cbz	r0, 1660a <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
   16600:	6823      	ldr	r3, [r4, #0]
   16602:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   16606:	f000 fe87 	bl	17318 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1660a:	683b      	ldr	r3, [r7, #0]
   1660c:	b123      	cbz	r3, 16618 <smp_pairing_complete+0x34>
   1660e:	699b      	ldr	r3, [r3, #24]
   16610:	b113      	cbz	r3, 16618 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
   16612:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   16614:	6820      	ldr	r0, [r4, #0]
   16616:	4798      	blx	r3
	smp_reset(smp);
   16618:	4620      	mov	r0, r4
}
   1661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
   1661e:	f009 bcdf 	b.w	1ffe0 <smp_reset>
	switch (smp_err) {
   16622:	1e4b      	subs	r3, r1, #1
   16624:	b2db      	uxtb	r3, r3
   16626:	2b0d      	cmp	r3, #13
   16628:	bf96      	itet	ls
   1662a:	4a16      	ldrls	r2, [pc, #88]	; (16684 <smp_pairing_complete+0xa0>)
	if (!status) {
   1662c:	2608      	movhi	r6, #8
   1662e:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
   16630:	6803      	ldr	r3, [r0, #0]
   16632:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   16636:	b153      	cbz	r3, 1664e <smp_pairing_complete+0x6a>
   16638:	7b1b      	ldrb	r3, [r3, #12]
   1663a:	b9d3      	cbnz	r3, 16672 <smp_pairing_complete+0x8e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
   1663c:	6823      	ldr	r3, [r4, #0]
   1663e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   16642:	f000 fdcd 	bl	171e0 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
   16646:	2200      	movs	r2, #0
   16648:	6823      	ldr	r3, [r4, #0]
   1664a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1664e:	2102      	movs	r1, #2
   16650:	4640      	mov	r0, r8
   16652:	f009 fae3 	bl	1fc1c <atomic_test_bit>
   16656:	b920      	cbnz	r0, 16662 <smp_pairing_complete+0x7e>
			bt_conn_security_changed(smp->chan.chan.conn, status,
   16658:	4632      	mov	r2, r6
   1665a:	4629      	mov	r1, r5
   1665c:	6820      	ldr	r0, [r4, #0]
   1665e:	f7fa fde9 	bl	11234 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   16662:	683b      	ldr	r3, [r7, #0]
   16664:	2b00      	cmp	r3, #0
   16666:	d0d7      	beq.n	16618 <smp_pairing_complete+0x34>
   16668:	69db      	ldr	r3, [r3, #28]
   1666a:	2b00      	cmp	r3, #0
   1666c:	d0d4      	beq.n	16618 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   1666e:	4631      	mov	r1, r6
   16670:	e7d0      	b.n	16614 <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   16672:	2102      	movs	r1, #2
   16674:	4640      	mov	r0, r8
   16676:	f009 fad1 	bl	1fc1c <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
   1667a:	2800      	cmp	r0, #0
   1667c:	d1de      	bne.n	1663c <smp_pairing_complete+0x58>
   1667e:	e7e6      	b.n	1664e <smp_pairing_complete+0x6a>
   16680:	20009c18 	.word	0x20009c18
   16684:	000259f0 	.word	0x000259f0

00016688 <bt_smp_recv>:
{
   16688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1668a:	898b      	ldrh	r3, [r1, #12]
{
   1668c:	4604      	mov	r4, r0
   1668e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16690:	b92b      	cbnz	r3, 1669e <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   16692:	2145      	movs	r1, #69	; 0x45
   16694:	4827      	ldr	r0, [pc, #156]	; (16734 <bt_smp_recv+0xac>)
   16696:	f006 f97f 	bl	1c998 <printk>
}
   1669a:	2000      	movs	r0, #0
   1669c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1669e:	2101      	movs	r1, #1
   166a0:	f105 0008 	add.w	r0, r5, #8
   166a4:	f001 f8da 	bl	1785c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   166a8:	2104      	movs	r1, #4
   166aa:	4606      	mov	r6, r0
   166ac:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   166b0:	f009 fab4 	bl	1fc1c <atomic_test_bit>
   166b4:	7832      	ldrb	r2, [r6, #0]
   166b6:	b120      	cbz	r0, 166c2 <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   166b8:	2157      	movs	r1, #87	; 0x57
   166ba:	481f      	ldr	r0, [pc, #124]	; (16738 <bt_smp_recv+0xb0>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   166bc:	f006 f96c 	bl	1c998 <printk>
		return 0;
   166c0:	e7eb      	b.n	1669a <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   166c2:	2a0e      	cmp	r2, #14
   166c4:	d902      	bls.n	166cc <bt_smp_recv+0x44>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   166c6:	2157      	movs	r1, #87	; 0x57
   166c8:	481c      	ldr	r0, [pc, #112]	; (1673c <bt_smp_recv+0xb4>)
   166ca:	e7f7      	b.n	166bc <bt_smp_recv+0x34>
	if (!handlers[hdr->code].func) {
   166cc:	4f1c      	ldr	r7, [pc, #112]	; (16740 <bt_smp_recv+0xb8>)
   166ce:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   166d2:	b943      	cbnz	r3, 166e6 <bt_smp_recv+0x5e>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   166d4:	2157      	movs	r1, #87	; 0x57
   166d6:	481b      	ldr	r0, [pc, #108]	; (16744 <bt_smp_recv+0xbc>)
   166d8:	f006 f95e 	bl	1c998 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   166dc:	2107      	movs	r1, #7
		smp_error(smp, err);
   166de:	4620      	mov	r0, r4
   166e0:	f009 fca5 	bl	2002e <smp_error>
   166e4:	e7d9      	b.n	1669a <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
   166e6:	4611      	mov	r1, r2
   166e8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   166ec:	f009 fc64 	bl	1ffb8 <atomic_test_and_clear_bit>
   166f0:	7833      	ldrb	r3, [r6, #0]
   166f2:	b948      	cbnz	r0, 16708 <bt_smp_recv+0x80>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   166f4:	461a      	mov	r2, r3
   166f6:	2157      	movs	r1, #87	; 0x57
   166f8:	4813      	ldr	r0, [pc, #76]	; (16748 <bt_smp_recv+0xc0>)
   166fa:	f006 f94d 	bl	1c998 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   166fe:	7833      	ldrb	r3, [r6, #0]
   16700:	2b05      	cmp	r3, #5
   16702:	d0ca      	beq.n	1669a <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   16704:	2108      	movs	r1, #8
   16706:	e7ea      	b.n	166de <bt_smp_recv+0x56>
	if (buf->len != handlers[hdr->code].expect_len) {
   16708:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1670c:	89aa      	ldrh	r2, [r5, #12]
   1670e:	7909      	ldrb	r1, [r1, #4]
   16710:	4291      	cmp	r1, r2
   16712:	d005      	beq.n	16720 <bt_smp_recv+0x98>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16714:	2145      	movs	r1, #69	; 0x45
   16716:	480d      	ldr	r0, [pc, #52]	; (1674c <bt_smp_recv+0xc4>)
   16718:	f006 f93e 	bl	1c998 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1671c:	210a      	movs	r1, #10
   1671e:	e7de      	b.n	166de <bt_smp_recv+0x56>
	err = handlers[hdr->code].func(smp, buf);
   16720:	4629      	mov	r1, r5
   16722:	4620      	mov	r0, r4
   16724:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   16728:	4798      	blx	r3
	if (err) {
   1672a:	4601      	mov	r1, r0
   1672c:	2800      	cmp	r0, #0
   1672e:	d0b4      	beq.n	1669a <bt_smp_recv+0x12>
   16730:	e7d5      	b.n	166de <bt_smp_recv+0x56>
   16732:	bf00      	nop
   16734:	0002587e 	.word	0x0002587e
   16738:	0002589e 	.word	0x0002589e
   1673c:	000258d4 	.word	0x000258d4
   16740:	000223a8 	.word	0x000223a8
   16744:	000258fb 	.word	0x000258fb
   16748:	0002591a 	.word	0x0002591a
   1674c:	00025163 	.word	0x00025163

00016750 <bt_smp_pkey_ready>:
{
   16750:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   16752:	4b19      	ldr	r3, [pc, #100]	; (167b8 <bt_smp_pkey_ready+0x68>)
   16754:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   16756:	b928      	cbnz	r0, 16764 <bt_smp_pkey_ready+0x14>
}
   16758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Public key not available");
   1675c:	2157      	movs	r1, #87	; 0x57
   1675e:	4817      	ldr	r0, [pc, #92]	; (167bc <bt_smp_pkey_ready+0x6c>)
   16760:	f006 b91a 	b.w	1c998 <printk>
	z_impl_k_sem_give(sem);
   16764:	4816      	ldr	r0, [pc, #88]	; (167c0 <bt_smp_pkey_ready+0x70>)
   16766:	f004 ff57 	bl	1b618 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1676a:	2500      	movs	r5, #0
   1676c:	4c15      	ldr	r4, [pc, #84]	; (167c4 <bt_smp_pkey_ready+0x74>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1676e:	2106      	movs	r1, #6
   16770:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16774:	f009 fa52 	bl	1fc1c <atomic_test_bit>
   16778:	b178      	cbz	r0, 1679a <bt_smp_pkey_ready+0x4a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1677a:	6823      	ldr	r3, [r4, #0]
			err = sc_send_public_key(smp);
   1677c:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1677e:	78db      	ldrb	r3, [r3, #3]
   16780:	b98b      	cbnz	r3, 167a6 <bt_smp_pkey_ready+0x56>
			err = sc_send_public_key(smp);
   16782:	f7ff fc35 	bl	15ff0 <sc_send_public_key>
			if (err) {
   16786:	4601      	mov	r1, r0
   16788:	b110      	cbz	r0, 16790 <bt_smp_pkey_ready+0x40>
				smp_error(smp, err);
   1678a:	4620      	mov	r0, r4
   1678c:	f009 fc4f 	bl	2002e <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
   16790:	210c      	movs	r1, #12
   16792:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16796:	f009 fb82 	bl	1fe9e <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1679a:	3501      	adds	r5, #1
   1679c:	2d03      	cmp	r5, #3
   1679e:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
   167a2:	d1e4      	bne.n	1676e <bt_smp_pkey_ready+0x1e>
}
   167a4:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_slave(smp);
   167a6:	f7ff fc45 	bl	16034 <smp_public_key_slave>
		if (err) {
   167aa:	4601      	mov	r1, r0
   167ac:	2800      	cmp	r0, #0
   167ae:	d0f4      	beq.n	1679a <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   167b0:	4620      	mov	r0, r4
   167b2:	f009 fc3c 	bl	2002e <smp_error>
   167b6:	e7f0      	b.n	1679a <bt_smp_pkey_ready+0x4a>
   167b8:	20009d3c 	.word	0x20009d3c
   167bc:	0002593a 	.word	0x0002593a
   167c0:	20008560 	.word	0x20008560
   167c4:	20008f40 	.word	0x20008f40

000167c8 <smp_pairing_failed>:
{
   167c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   167ca:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   167cc:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   167ce:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
   167d2:	2145      	movs	r1, #69	; 0x45
{
   167d4:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   167d6:	7832      	ldrb	r2, [r6, #0]
   167d8:	480e      	ldr	r0, [pc, #56]	; (16814 <smp_pairing_failed+0x4c>)
   167da:	f006 f8dd 	bl	1c998 <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   167de:	210a      	movs	r1, #10
   167e0:	4628      	mov	r0, r5
   167e2:	f009 fbe9 	bl	1ffb8 <atomic_test_and_clear_bit>
   167e6:	b140      	cbz	r0, 167fa <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   167e8:	4b0b      	ldr	r3, [pc, #44]	; (16818 <smp_pairing_failed+0x50>)
   167ea:	681b      	ldr	r3, [r3, #0]
   167ec:	b963      	cbnz	r3, 16808 <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
   167ee:	4620      	mov	r0, r4
   167f0:	7831      	ldrb	r1, [r6, #0]
   167f2:	f7ff fef7 	bl	165e4 <smp_pairing_complete>
}
   167f6:	2000      	movs	r0, #0
   167f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   167fa:	210b      	movs	r1, #11
   167fc:	4628      	mov	r0, r5
   167fe:	f009 fbdb 	bl	1ffb8 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   16802:	2800      	cmp	r0, #0
   16804:	d1f0      	bne.n	167e8 <smp_pairing_failed+0x20>
   16806:	e7f2      	b.n	167ee <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
   16808:	691b      	ldr	r3, [r3, #16]
   1680a:	2b00      	cmp	r3, #0
   1680c:	d0ef      	beq.n	167ee <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
   1680e:	4638      	mov	r0, r7
   16810:	4798      	blx	r3
   16812:	e7ec      	b.n	167ee <smp_pairing_failed+0x26>
   16814:	00025958 	.word	0x00025958
   16818:	20009c18 	.word	0x20009c18

0001681c <smp_timeout>:
{
   1681c:	b510      	push	{r4, lr}
   1681e:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   16820:	2145      	movs	r1, #69	; 0x45
   16822:	4807      	ldr	r0, [pc, #28]	; (16840 <smp_timeout+0x24>)
   16824:	f006 f8b8 	bl	1c998 <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   16828:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
   1682c:	2108      	movs	r1, #8
   1682e:	f7ff fed9 	bl	165e4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   16832:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   16836:	2104      	movs	r1, #4
}
   16838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1683c:	f009 bb2f 	b.w	1fe9e <atomic_set_bit>
   16840:	00025969 	.word	0x00025969

00016844 <smp_master_ident>:
{
   16844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16848:	460b      	mov	r3, r1
   1684a:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1684c:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
   1684e:	f850 6bc4 	ldr.w	r6, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16852:	f009 f9e3 	bl	1fc1c <atomic_test_bit>
   16856:	b328      	cbz	r0, 168a4 <smp_master_ident+0x60>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   16858:	f106 0888 	add.w	r8, r6, #136	; 0x88
   1685c:	4642      	mov	r2, r8
   1685e:	2004      	movs	r0, #4
   16860:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   16862:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   16864:	f009 fe9d 	bl	205a2 <bt_keys_get_type>
		if (!keys) {
   16868:	4605      	mov	r5, r0
   1686a:	b950      	cbnz	r0, 16882 <smp_master_ident+0x3e>
			BT_ERR("Unable to get keys for %s",
   1686c:	4640      	mov	r0, r8
   1686e:	f7f7 fd6f 	bl	e350 <bt_addr_le_str_real>
   16872:	2145      	movs	r1, #69	; 0x45
   16874:	4602      	mov	r2, r0
   16876:	481d      	ldr	r0, [pc, #116]	; (168ec <smp_master_ident+0xa8>)
   16878:	f006 f88e 	bl	1c998 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1687c:	2008      	movs	r0, #8
}
   1687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   16882:	2202      	movs	r2, #2
   16884:	4639      	mov	r1, r7
   16886:	3018      	adds	r0, #24
   16888:	f007 fd3e 	bl	1e308 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1688c:	2208      	movs	r2, #8
   1688e:	1cb9      	adds	r1, r7, #2
   16890:	f105 0010 	add.w	r0, r5, #16
   16894:	f007 fd38 	bl	1e308 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   16898:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1689c:	f023 0301 	bic.w	r3, r3, #1
   168a0:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   168a4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   168a8:	079a      	lsls	r2, r3, #30
   168aa:	d50b      	bpl.n	168c4 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   168ac:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   168ae:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   168b2:	f009 faf4 	bl	1fe9e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   168b6:	78f3      	ldrb	r3, [r6, #3]
   168b8:	b143      	cbz	r3, 168cc <smp_master_ident+0x88>
	if (!smp->local_dist && !smp->remote_dist) {
   168ba:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
   168be:	b17d      	cbz	r5, 168e0 <smp_master_ident+0x9c>
	return 0;
   168c0:	2000      	movs	r0, #0
   168c2:	e7dc      	b.n	1687e <smp_master_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   168c4:	075b      	lsls	r3, r3, #29
   168c6:	d5f6      	bpl.n	168b6 <smp_master_ident+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   168c8:	210a      	movs	r1, #10
   168ca:	e7f0      	b.n	168ae <smp_master_ident+0x6a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   168cc:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   168d0:	2b00      	cmp	r3, #0
   168d2:	d1f2      	bne.n	168ba <smp_master_ident+0x76>
		err = bt_smp_distribute_keys(smp);
   168d4:	4620      	mov	r0, r4
   168d6:	f7ff f8cd 	bl	15a74 <bt_smp_distribute_keys>
		if (err) {
   168da:	2800      	cmp	r0, #0
   168dc:	d0ed      	beq.n	168ba <smp_master_ident+0x76>
   168de:	e7ce      	b.n	1687e <smp_master_ident+0x3a>
		smp_pairing_complete(smp, 0);
   168e0:	4620      	mov	r0, r4
   168e2:	4629      	mov	r1, r5
   168e4:	f7ff fe7e 	bl	165e4 <smp_pairing_complete>
	return 0;
   168e8:	4628      	mov	r0, r5
   168ea:	e7c8      	b.n	1687e <smp_master_ident+0x3a>
   168ec:	00025692 	.word	0x00025692

000168f0 <smp_ident_sent>:
{
   168f0:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   168f2:	7883      	ldrb	r3, [r0, #2]
   168f4:	2b01      	cmp	r3, #1
   168f6:	d11d      	bne.n	16934 <smp_ident_sent+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   168f8:	2106      	movs	r1, #6
   168fa:	f008 f9f0 	bl	1ecde <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   168fe:	4604      	mov	r4, r0
   16900:	b950      	cbnz	r0, 16918 <smp_ident_sent+0x28>
   16902:	490d      	ldr	r1, [pc, #52]	; (16938 <smp_ident_sent+0x48>)
   16904:	480d      	ldr	r0, [pc, #52]	; (1693c <smp_ident_sent+0x4c>)
   16906:	f240 3232 	movw	r2, #818	; 0x332
   1690a:	f006 f845 	bl	1c998 <printk>
   1690e:	f240 3132 	movw	r1, #818	; 0x332
   16912:	4809      	ldr	r0, [pc, #36]	; (16938 <smp_ident_sent+0x48>)
   16914:	f006 fae6 	bl	1cee4 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   16918:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   1691c:	f023 0301 	bic.w	r3, r3, #1
   16920:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   16924:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   16928:	b921      	cbnz	r1, 16934 <smp_ident_sent+0x44>
			smp_pairing_complete(smp, 0);
   1692a:	4620      	mov	r0, r4
}
   1692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   16930:	f7ff be58 	b.w	165e4 <smp_pairing_complete>
}
   16934:	bd10      	pop	{r4, pc}
   16936:	bf00      	nop
   16938:	0002597a 	.word	0x0002597a
   1693c:	00022dd6 	.word	0x00022dd6

00016940 <smp_ident_addr_info>:
{
   16940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   16944:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   16946:	6804      	ldr	r4, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   16948:	7833      	ldrb	r3, [r6, #0]
{
   1694a:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1694c:	f104 0888 	add.w	r8, r4, #136	; 0x88
   16950:	b1bb      	cbz	r3, 16982 <smp_ident_addr_info+0x42>
	if (!bt_addr_le_is_identity(&req->addr)) {
   16952:	79b3      	ldrb	r3, [r6, #6]
   16954:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16958:	2bc0      	cmp	r3, #192	; 0xc0
   1695a:	d012      	beq.n	16982 <smp_ident_addr_info+0x42>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1695c:	4630      	mov	r0, r6
   1695e:	f7f7 fcf7 	bl	e350 <bt_addr_le_str_real>
   16962:	2145      	movs	r1, #69	; 0x45
   16964:	4602      	mov	r2, r0
   16966:	4846      	ldr	r0, [pc, #280]	; (16a80 <smp_ident_addr_info+0x140>)
   16968:	f006 f816 	bl	1c998 <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1696c:	4640      	mov	r0, r8
   1696e:	f7f7 fcef 	bl	e350 <bt_addr_le_str_real>
   16972:	2145      	movs	r1, #69	; 0x45
   16974:	4602      	mov	r2, r0
   16976:	4843      	ldr	r0, [pc, #268]	; (16a84 <smp_ident_addr_info+0x144>)
   16978:	f006 f80e 	bl	1c998 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1697c:	200a      	movs	r0, #10
}
   1697e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   16982:	2207      	movs	r2, #7
   16984:	4631      	mov	r1, r6
   16986:	4640      	mov	r0, r8
   16988:	f007 fcad 	bl	1e2e6 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1698c:	b168      	cbz	r0, 169aa <smp_ident_addr_info+0x6a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1698e:	4631      	mov	r1, r6
   16990:	7a20      	ldrb	r0, [r4, #8]
   16992:	f000 fc15 	bl	171c0 <bt_keys_find_addr>
		if (keys) {
   16996:	4607      	mov	r7, r0
   16998:	b138      	cbz	r0, 169aa <smp_ident_addr_info+0x6a>
			if (!update_keys_check(smp, keys)) {
   1699a:	4601      	mov	r1, r0
   1699c:	4628      	mov	r0, r5
   1699e:	f009 f943 	bl	1fc28 <update_keys_check>
   169a2:	b1c0      	cbz	r0, 169d6 <smp_ident_addr_info+0x96>
			bt_keys_clear(keys);
   169a4:	4638      	mov	r0, r7
   169a6:	f000 fc1b 	bl	171e0 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   169aa:	210d      	movs	r1, #13
   169ac:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   169b0:	f009 f934 	bl	1fc1c <atomic_test_bit>
   169b4:	2800      	cmp	r0, #0
   169b6:	d03c      	beq.n	16a32 <smp_ident_addr_info+0xf2>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   169b8:	4642      	mov	r2, r8
   169ba:	2002      	movs	r0, #2
   169bc:	7a21      	ldrb	r1, [r4, #8]
   169be:	f009 fdf0 	bl	205a2 <bt_keys_get_type>
		if (!keys) {
   169c2:	4607      	mov	r7, r0
   169c4:	b948      	cbnz	r0, 169da <smp_ident_addr_info+0x9a>
			BT_ERR("Unable to get keys for %s",
   169c6:	4640      	mov	r0, r8
   169c8:	f7f7 fcc2 	bl	e350 <bt_addr_le_str_real>
   169cc:	2145      	movs	r1, #69	; 0x45
   169ce:	4602      	mov	r2, r0
   169d0:	482d      	ldr	r0, [pc, #180]	; (16a88 <smp_ident_addr_info+0x148>)
   169d2:	f005 ffe1 	bl	1c998 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   169d6:	2008      	movs	r0, #8
   169d8:	e7d1      	b.n	1697e <smp_ident_addr_info+0x3e>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   169da:	78e3      	ldrb	r3, [r4, #3]
   169dc:	2b00      	cmp	r3, #0
   169de:	d13c      	bne.n	16a5a <smp_ident_addr_info+0x11a>
			dst = &conn->le.resp_addr;
   169e0:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   169e4:	780b      	ldrb	r3, [r1, #0]
   169e6:	2b01      	cmp	r3, #1
   169e8:	d120      	bne.n	16a2c <smp_ident_addr_info+0xec>
		if (bt_addr_le_is_rpa(dst)) {
   169ea:	798b      	ldrb	r3, [r1, #6]
   169ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   169f0:	2b40      	cmp	r3, #64	; 0x40
   169f2:	d11b      	bne.n	16a2c <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   169f4:	2206      	movs	r2, #6
   169f6:	3101      	adds	r1, #1
   169f8:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   169fc:	f007 fc84 	bl	1e308 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   16a00:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   16a04:	b193      	cbz	r3, 16a2c <smp_ident_addr_info+0xec>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   16a06:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   16a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16a0e:	2bc0      	cmp	r3, #192	; 0xc0
   16a10:	d00c      	beq.n	16a2c <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   16a12:	2207      	movs	r2, #7
   16a14:	4631      	mov	r1, r6
   16a16:	1c78      	adds	r0, r7, #1
   16a18:	f007 fc76 	bl	1e308 <memcpy>
   16a1c:	2207      	movs	r2, #7
   16a1e:	4631      	mov	r1, r6
   16a20:	4640      	mov	r0, r8
   16a22:	f007 fc71 	bl	1e308 <memcpy>
				bt_conn_identity_resolved(conn);
   16a26:	4620      	mov	r0, r4
   16a28:	f7fa fbea 	bl	11200 <bt_conn_identity_resolved>
		bt_id_add(keys);
   16a2c:	4638      	mov	r0, r7
   16a2e:	f7f8 fe67 	bl	f700 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   16a32:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   16a36:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16a3a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   16a3c:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16a40:	d504      	bpl.n	16a4c <smp_ident_addr_info+0x10c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   16a42:	210a      	movs	r1, #10
   16a44:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   16a48:	f009 fa29 	bl	1fe9e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16a4c:	78e3      	ldrb	r3, [r4, #3]
   16a4e:	b13b      	cbz	r3, 16a60 <smp_ident_addr_info+0x120>
	if (!smp->local_dist && !smp->remote_dist) {
   16a50:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   16a54:	b174      	cbz	r4, 16a74 <smp_ident_addr_info+0x134>
	return 0;
   16a56:	2000      	movs	r0, #0
   16a58:	e791      	b.n	1697e <smp_ident_addr_info+0x3e>
			dst = &conn->le.init_addr;
   16a5a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   16a5e:	e7c1      	b.n	169e4 <smp_ident_addr_info+0xa4>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   16a60:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   16a64:	2b00      	cmp	r3, #0
   16a66:	d1f3      	bne.n	16a50 <smp_ident_addr_info+0x110>
		err = bt_smp_distribute_keys(smp);
   16a68:	4628      	mov	r0, r5
   16a6a:	f7ff f803 	bl	15a74 <bt_smp_distribute_keys>
		if (err) {
   16a6e:	2800      	cmp	r0, #0
   16a70:	d0ee      	beq.n	16a50 <smp_ident_addr_info+0x110>
   16a72:	e784      	b.n	1697e <smp_ident_addr_info+0x3e>
		smp_pairing_complete(smp, 0);
   16a74:	4621      	mov	r1, r4
   16a76:	4628      	mov	r0, r5
   16a78:	f7ff fdb4 	bl	165e4 <smp_pairing_complete>
   16a7c:	e7eb      	b.n	16a56 <smp_ident_addr_info+0x116>
   16a7e:	bf00      	nop
   16a80:	000259a9 	.word	0x000259a9
   16a84:	000259c2 	.word	0x000259c2
   16a88:	00025692 	.word	0x00025692

00016a8c <smp_pairing_confirm>:
{
   16a8c:	b570      	push	{r4, r5, r6, lr}
   16a8e:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   16a90:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   16a92:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   16a96:	210b      	movs	r1, #11
   16a98:	4628      	mov	r0, r5
   16a9a:	f009 f912 	bl	1fcc2 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   16a9e:	2210      	movs	r2, #16
   16aa0:	4631      	mov	r1, r6
   16aa2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   16aa6:	f007 fc2f 	bl	1e308 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16aaa:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16aac:	78db      	ldrb	r3, [r3, #3]
   16aae:	b94b      	cbnz	r3, 16ac4 <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16ab0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16ab4:	2104      	movs	r1, #4
   16ab6:	f009 f9f2 	bl	1fe9e <atomic_set_bit>
		return smp_send_pairing_random(smp);
   16aba:	4620      	mov	r0, r4
}
   16abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   16ac0:	f009 ba48 	b.w	1ff54 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16ac4:	2105      	movs	r1, #5
   16ac6:	4628      	mov	r0, r5
   16ac8:	f009 f8a8 	bl	1fc1c <atomic_test_bit>
   16acc:	b920      	cbnz	r0, 16ad8 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
   16ace:	4620      	mov	r0, r4
}
   16ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   16ad4:	f009 bbf4 	b.w	202c0 <legacy_pairing_confirm>
	switch (smp->method) {
   16ad8:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16adc:	2a01      	cmp	r2, #1
   16ade:	d00b      	beq.n	16af8 <smp_pairing_confirm+0x6c>
   16ae0:	2a02      	cmp	r2, #2
   16ae2:	d115      	bne.n	16b10 <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16ae4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16ae8:	2104      	movs	r1, #4
   16aea:	f009 f9d8 	bl	1fe9e <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   16aee:	4620      	mov	r0, r4
}
   16af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   16af4:	f7ff b94e 	b.w	15d94 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16af8:	210a      	movs	r1, #10
   16afa:	4628      	mov	r0, r5
   16afc:	f009 f88e 	bl	1fc1c <atomic_test_bit>
   16b00:	2800      	cmp	r0, #0
   16b02:	d0ef      	beq.n	16ae4 <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16b04:	4628      	mov	r0, r5
   16b06:	2100      	movs	r1, #0
   16b08:	f009 f9c9 	bl	1fe9e <atomic_set_bit>
			return 0;
   16b0c:	2000      	movs	r0, #0
}
   16b0e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16b10:	4802      	ldr	r0, [pc, #8]	; (16b1c <smp_pairing_confirm+0x90>)
   16b12:	2145      	movs	r1, #69	; 0x45
   16b14:	f005 ff40 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16b18:	2008      	movs	r0, #8
   16b1a:	e7f8      	b.n	16b0e <smp_pairing_confirm+0x82>
   16b1c:	00025603 	.word	0x00025603

00016b20 <smp_pairing_rsp>:
{
   16b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   16b22:	688d      	ldr	r5, [r1, #8]
{
   16b24:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   16b26:	78eb      	ldrb	r3, [r5, #3]
   16b28:	3b07      	subs	r3, #7
   16b2a:	2b09      	cmp	r3, #9
   16b2c:	f200 80ad 	bhi.w	16c8a <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
   16b30:	792a      	ldrb	r2, [r5, #4]
   16b32:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	struct bt_conn *conn = smp->chan.chan.conn;
   16b36:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
   16b38:	4013      	ands	r3, r2
   16b3a:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	smp->remote_dist &= rsp->resp_key_dist;
   16b3e:	796a      	ldrb	r2, [r5, #5]
   16b40:	f890 31a9 	ldrb.w	r3, [r0, #425]	; 0x1a9
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16b44:	4629      	mov	r1, r5
	smp->remote_dist &= rsp->resp_key_dist;
   16b46:	4013      	ands	r3, r2
   16b48:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   16b4c:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16b4e:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   16b50:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16b54:	30d1      	adds	r0, #209	; 0xd1
   16b56:	f007 fbd7 	bl	1e308 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   16b5a:	78ab      	ldrb	r3, [r5, #2]
   16b5c:	071b      	lsls	r3, r3, #28
   16b5e:	d508      	bpl.n	16b72 <smp_pairing_rsp+0x52>
   16b60:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16b64:	071f      	lsls	r7, r3, #28
   16b66:	d504      	bpl.n	16b72 <smp_pairing_rsp+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   16b68:	2105      	movs	r1, #5
   16b6a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16b6e:	f009 f996 	bl	1fe9e <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   16b72:	78ab      	ldrb	r3, [r5, #2]
   16b74:	0698      	lsls	r0, r3, #26
   16b76:	d508      	bpl.n	16b8a <smp_pairing_rsp+0x6a>
   16b78:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16b7c:	0699      	lsls	r1, r3, #26
   16b7e:	d504      	bpl.n	16b8a <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   16b80:	2114      	movs	r1, #20
   16b82:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16b86:	f009 f98a 	bl	1fe9e <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   16b8a:	78ab      	ldrb	r3, [r5, #2]
   16b8c:	07da      	lsls	r2, r3, #31
   16b8e:	d508      	bpl.n	16ba2 <smp_pairing_rsp+0x82>
   16b90:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16b94:	07db      	lsls	r3, r3, #31
   16b96:	d504      	bpl.n	16ba2 <smp_pairing_rsp+0x82>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   16b98:	210d      	movs	r1, #13
   16b9a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16b9e:	f009 f97e 	bl	1fe9e <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   16ba2:	7829      	ldrb	r1, [r5, #0]
   16ba4:	4620      	mov	r0, r4
   16ba6:	f7fe fcd1 	bl	1554c <get_pair_method>
   16baa:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
   16bae:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   16bb2:	4620      	mov	r0, r4
   16bb4:	f009 f838 	bl	1fc28 <update_keys_check>
   16bb8:	2800      	cmp	r0, #0
   16bba:	d068      	beq.n	16c8e <smp_pairing_rsp+0x16e>
	err = remote_sec_level_reachable(smp);
   16bbc:	4620      	mov	r0, r4
   16bbe:	f009 f858 	bl	1fc72 <remote_sec_level_reachable>
	if (err) {
   16bc2:	4605      	mov	r5, r0
   16bc4:	b9e0      	cbnz	r0, 16c00 <smp_pairing_rsp+0xe0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16bc6:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   16bca:	2105      	movs	r1, #5
   16bcc:	4630      	mov	r0, r6
   16bce:	f009 f825 	bl	1fc1c <atomic_test_bit>
   16bd2:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16bd6:	bb90      	cbnz	r0, 16c3e <smp_pairing_rsp+0x11e>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16bd8:	4615      	mov	r5, r2
   16bda:	b99a      	cbnz	r2, 16c04 <smp_pairing_rsp+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16bdc:	210f      	movs	r1, #15
   16bde:	4630      	mov	r0, r6
   16be0:	f009 f81c 	bl	1fc1c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16be4:	b170      	cbz	r0, 16c04 <smp_pairing_rsp+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16be6:	4f2b      	ldr	r7, [pc, #172]	; (16c94 <smp_pairing_rsp+0x174>)
   16be8:	683b      	ldr	r3, [r7, #0]
   16bea:	b15b      	cbz	r3, 16c04 <smp_pairing_rsp+0xe4>
	    bt_auth && bt_auth->pairing_confirm) {
   16bec:	695b      	ldr	r3, [r3, #20]
   16bee:	b14b      	cbz	r3, 16c04 <smp_pairing_rsp+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16bf0:	4630      	mov	r0, r6
   16bf2:	210a      	movs	r1, #10
   16bf4:	f009 f953 	bl	1fe9e <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   16bf8:	683b      	ldr	r3, [r7, #0]
   16bfa:	6820      	ldr	r0, [r4, #0]
   16bfc:	695b      	ldr	r3, [r3, #20]
   16bfe:	4798      	blx	r3
}
   16c00:	4628      	mov	r0, r5
   16c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
   16c04:	4620      	mov	r0, r4
   16c06:	f7fe fe67 	bl	158d8 <legacy_request_tk>
	if (ret) {
   16c0a:	4605      	mov	r5, r0
   16c0c:	2800      	cmp	r0, #0
   16c0e:	d1f7      	bne.n	16c00 <smp_pairing_rsp+0xe0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16c10:	210a      	movs	r1, #10
   16c12:	4630      	mov	r0, r6
   16c14:	f009 f802 	bl	1fc1c <atomic_test_bit>
   16c18:	b960      	cbnz	r0, 16c34 <smp_pairing_rsp+0x114>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16c1a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16c1e:	2103      	movs	r1, #3
   16c20:	f009 f93d 	bl	1fe9e <atomic_set_bit>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16c24:	210e      	movs	r1, #14
   16c26:	f009 f93a 	bl	1fe9e <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   16c2a:	4620      	mov	r0, r4
}
   16c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
   16c30:	f009 bb16 	b.w	20260 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16c34:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16c36:	4630      	mov	r0, r6
   16c38:	f009 f931 	bl	1fe9e <atomic_set_bit>
		return 0;
   16c3c:	e7e0      	b.n	16c00 <smp_pairing_rsp+0xe0>
	smp->remote_dist &= RECV_KEYS_SC;
   16c3e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
	smp->local_dist &= SEND_KEYS_SC;
   16c42:	f884 51a8 	strb.w	r5, [r4, #424]	; 0x1a8
	smp->remote_dist &= RECV_KEYS_SC;
   16c46:	f003 0302 	and.w	r3, r3, #2
   16c4a:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16c4e:	b952      	cbnz	r2, 16c66 <smp_pairing_rsp+0x146>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16c50:	210f      	movs	r1, #15
   16c52:	4630      	mov	r0, r6
   16c54:	f008 ffe2 	bl	1fc1c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16c58:	b128      	cbz	r0, 16c66 <smp_pairing_rsp+0x146>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16c5a:	4f0e      	ldr	r7, [pc, #56]	; (16c94 <smp_pairing_rsp+0x174>)
   16c5c:	683b      	ldr	r3, [r7, #0]
   16c5e:	b113      	cbz	r3, 16c66 <smp_pairing_rsp+0x146>
	    bt_auth && bt_auth->pairing_confirm) {
   16c60:	695b      	ldr	r3, [r3, #20]
   16c62:	2b00      	cmp	r3, #0
   16c64:	d1c4      	bne.n	16bf0 <smp_pairing_rsp+0xd0>
	if (!sc_public_key) {
   16c66:	4b0c      	ldr	r3, [pc, #48]	; (16c98 <smp_pairing_rsp+0x178>)
   16c68:	681b      	ldr	r3, [r3, #0]
   16c6a:	b90b      	cbnz	r3, 16c70 <smp_pairing_rsp+0x150>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16c6c:	2106      	movs	r1, #6
   16c6e:	e7e2      	b.n	16c36 <smp_pairing_rsp+0x116>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   16c70:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16c74:	210c      	movs	r1, #12
   16c76:	f009 f912 	bl	1fe9e <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   16c7a:	210b      	movs	r1, #11
   16c7c:	f009 f821 	bl	1fcc2 <atomic_clear_bit>
	return sc_send_public_key(smp);
   16c80:	4620      	mov	r0, r4
}
   16c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
   16c86:	f7ff b9b3 	b.w	15ff0 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   16c8a:	2506      	movs	r5, #6
   16c8c:	e7b8      	b.n	16c00 <smp_pairing_rsp+0xe0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16c8e:	2503      	movs	r5, #3
   16c90:	e7b6      	b.n	16c00 <smp_pairing_rsp+0xe0>
   16c92:	bf00      	nop
   16c94:	20009c18 	.word	0x20009c18
   16c98:	20009d3c 	.word	0x20009d3c

00016c9c <smp_pairing_random>:
{
   16c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ca0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16ca2:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
   16ca6:	6889      	ldr	r1, [r1, #8]
{
   16ca8:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16caa:	2210      	movs	r2, #16
   16cac:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16cae:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16cb2:	f007 fb29 	bl	1e308 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16cb6:	2105      	movs	r1, #5
   16cb8:	4638      	mov	r0, r7
   16cba:	f008 ffaf 	bl	1fc1c <atomic_test_bit>
   16cbe:	f8d4 9000 	ldr.w	r9, [r4]
   16cc2:	2800      	cmp	r0, #0
   16cc4:	d179      	bne.n	16dba <smp_pairing_random+0x11e>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16cc6:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16cca:	f204 1a07 	addw	sl, r4, #263	; 0x107
   16cce:	ae08      	add	r6, sp, #32
   16cd0:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16cd2:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16cd6:	9300      	str	r3, [sp, #0]
   16cd8:	4641      	mov	r1, r8
   16cda:	4650      	mov	r0, sl
   16cdc:	9602      	str	r6, [sp, #8]
   16cde:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   16ce2:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   16ce6:	f009 fa60 	bl	201aa <smp_c1>
	if (err) {
   16cea:	2800      	cmp	r0, #0
   16cec:	d139      	bne.n	16d62 <smp_pairing_random+0xc6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   16cee:	2210      	movs	r2, #16
   16cf0:	4631      	mov	r1, r6
   16cf2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   16cf6:	f007 faf6 	bl	1e2e6 <memcmp>
   16cfa:	2800      	cmp	r0, #0
   16cfc:	d158      	bne.n	16db0 <smp_pairing_random+0x114>
	    conn->role == BT_HCI_ROLE_MASTER) {
   16cfe:	f899 5003 	ldrb.w	r5, [r9, #3]
	memcpy(out, r2, 8);
   16d02:	2208      	movs	r2, #8
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
   16d04:	f104 0be7 	add.w	fp, r4, #231	; 0xe7
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16d08:	bb95      	cbnz	r5, 16d70 <smp_pairing_random+0xd4>
	memcpy(out, r2, 8);
   16d0a:	4659      	mov	r1, fp
   16d0c:	4630      	mov	r0, r6
   16d0e:	f007 fafb 	bl	1e308 <memcpy>
	memcpy(out + 8, r1, 8);
   16d12:	2208      	movs	r2, #8
   16d14:	4641      	mov	r1, r8
   16d16:	a80a      	add	r0, sp, #40	; 0x28
   16d18:	f007 faf6 	bl	1e308 <memcpy>
	return bt_encrypt_le(k, out, out);
   16d1c:	4632      	mov	r2, r6
   16d1e:	4631      	mov	r1, r6
   16d20:	4650      	mov	r0, sl
   16d22:	f007 fdc6 	bl	1e8b2 <bt_encrypt_le>
		if (err) {
   16d26:	b9e0      	cbnz	r0, 16d62 <smp_pairing_random+0xc6>
		(void)memset(ediv, 0, sizeof(ediv));
   16d28:	2202      	movs	r2, #2
   16d2a:	4629      	mov	r1, r5
   16d2c:	a805      	add	r0, sp, #20
   16d2e:	f007 fb16 	bl	1e35e <memset>
		(void)memset(rand, 0, sizeof(rand));
   16d32:	2208      	movs	r2, #8
   16d34:	4629      	mov	r1, r5
   16d36:	a806      	add	r0, sp, #24
   16d38:	f007 fb11 	bl	1e35e <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   16d3c:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
   16d40:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   16d44:	4648      	mov	r0, r9
   16d46:	429a      	cmp	r2, r3
   16d48:	bf94      	ite	ls
   16d4a:	9200      	strls	r2, [sp, #0]
   16d4c:	9300      	strhi	r3, [sp, #0]
   16d4e:	a906      	add	r1, sp, #24
   16d50:	4633      	mov	r3, r6
   16d52:	aa05      	add	r2, sp, #20
   16d54:	f007 fe37 	bl	1e9c6 <bt_conn_le_start_encryption>
   16d58:	b128      	cbz	r0, 16d66 <smp_pairing_random+0xca>
			BT_ERR("Failed to start encryption");
   16d5a:	2145      	movs	r1, #69	; 0x45
   16d5c:	487f      	ldr	r0, [pc, #508]	; (16f5c <smp_pairing_random+0x2c0>)
			BT_ERR("Calculate STK failed");
   16d5e:	f005 fe1b 	bl	1c998 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16d62:	2508      	movs	r5, #8
   16d64:	e025      	b.n	16db2 <smp_pairing_random+0x116>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16d66:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16d68:	4638      	mov	r0, r7
   16d6a:	f009 f898 	bl	1fe9e <atomic_set_bit>
			return 0;
   16d6e:	e020      	b.n	16db2 <smp_pairing_random+0x116>
	memcpy(out, r2, 8);
   16d70:	4641      	mov	r1, r8
   16d72:	4630      	mov	r0, r6
   16d74:	f007 fac8 	bl	1e308 <memcpy>
	memcpy(out + 8, r1, 8);
   16d78:	2208      	movs	r2, #8
   16d7a:	4659      	mov	r1, fp
   16d7c:	a80a      	add	r0, sp, #40	; 0x28
   16d7e:	f007 fac3 	bl	1e308 <memcpy>
	return bt_encrypt_le(k, out, out);
   16d82:	4632      	mov	r2, r6
   16d84:	4631      	mov	r1, r6
   16d86:	4650      	mov	r0, sl
   16d88:	f007 fd93 	bl	1e8b2 <bt_encrypt_le>
		if (err) {
   16d8c:	b110      	cbz	r0, 16d94 <smp_pairing_random+0xf8>
			BT_ERR("Calculate STK failed");
   16d8e:	2145      	movs	r1, #69	; 0x45
   16d90:	4873      	ldr	r0, [pc, #460]	; (16f60 <smp_pairing_random+0x2c4>)
   16d92:	e7e4      	b.n	16d5e <smp_pairing_random+0xc2>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   16d94:	4631      	mov	r1, r6
   16d96:	2210      	movs	r2, #16
   16d98:	4650      	mov	r0, sl
   16d9a:	f007 fab5 	bl	1e308 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16d9e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16da0:	4638      	mov	r0, r7
   16da2:	f009 f87c 	bl	1fe9e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   16da6:	4620      	mov	r0, r4
   16da8:	f009 f8d4 	bl	1ff54 <smp_send_pairing_random>
   16dac:	4605      	mov	r5, r0
   16dae:	e000      	b.n	16db2 <smp_pairing_random+0x116>
		return BT_SMP_ERR_CONFIRM_FAILED;
   16db0:	2504      	movs	r5, #4
}
   16db2:	4628      	mov	r0, r5
   16db4:	b00d      	add	sp, #52	; 0x34
   16db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16dba:	f899 3003 	ldrb.w	r3, [r9, #3]
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d151      	bne.n	16e66 <smp_pairing_random+0x1ca>
		err = sc_smp_check_confirm(smp);
   16dc2:	4620      	mov	r0, r4
   16dc4:	f7fe fc98 	bl	156f8 <sc_smp_check_confirm>
		if (err) {
   16dc8:	4605      	mov	r5, r0
   16dca:	2800      	cmp	r0, #0
   16dcc:	d1f1      	bne.n	16db2 <smp_pairing_random+0x116>
		switch (smp->method) {
   16dce:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16dd2:	2a05      	cmp	r2, #5
   16dd4:	f200 80bb 	bhi.w	16f4e <smp_pairing_random+0x2b2>
   16dd8:	e8df f002 	tbb	[pc, r2]
   16ddc:	031e1e38 	.word	0x031e1e38
   16de0:	38b9      	.short	0x38b9
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   16de2:	ab08      	add	r3, sp, #32
   16de4:	485f      	ldr	r0, [pc, #380]	; (16f64 <smp_pairing_random+0x2c8>)
   16de6:	9300      	str	r3, [sp, #0]
   16de8:	6800      	ldr	r0, [r0, #0]
   16dea:	4643      	mov	r3, r8
   16dec:	f104 02e7 	add.w	r2, r4, #231	; 0xe7
   16df0:	f204 1117 	addw	r1, r4, #279	; 0x117
   16df4:	f7fe fb42 	bl	1547c <smp_g2>
   16df8:	2800      	cmp	r0, #0
   16dfa:	d1b2      	bne.n	16d62 <smp_pairing_random+0xc6>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16dfc:	210a      	movs	r1, #10
   16dfe:	4638      	mov	r0, r7
   16e00:	f009 f84d 	bl	1fe9e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16e04:	2109      	movs	r1, #9
   16e06:	f009 f84a 	bl	1fe9e <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   16e0a:	4b57      	ldr	r3, [pc, #348]	; (16f68 <smp_pairing_random+0x2cc>)
   16e0c:	9908      	ldr	r1, [sp, #32]
   16e0e:	681b      	ldr	r3, [r3, #0]
   16e10:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   16e12:	6820      	ldr	r0, [r4, #0]
   16e14:	4798      	blx	r3
			return 0;
   16e16:	e7cc      	b.n	16db2 <smp_pairing_random+0x116>
			smp->passkey_round++;
   16e18:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   16e1c:	3301      	adds	r3, #1
   16e1e:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   16e20:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   16e22:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
			if (smp->passkey_round == 20U) {
   16e26:	d011      	beq.n	16e4c <smp_pairing_random+0x1b0>
			if (bt_rand(smp->prnd, 16)) {
   16e28:	2110      	movs	r1, #16
   16e2a:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16e2e:	f7fa f8bb 	bl	10fa8 <bt_rand>
   16e32:	2800      	cmp	r0, #0
   16e34:	d195      	bne.n	16d62 <smp_pairing_random+0xc6>
			atomic_set_bit(&smp->allowed_cmds,
   16e36:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16e3a:	2103      	movs	r1, #3
   16e3c:	f009 f82f 	bl	1fe9e <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   16e40:	4620      	mov	r0, r4
}
   16e42:	b00d      	add	sp, #52	; 0x34
   16e44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return smp_send_pairing_confirm(smp);
   16e48:	f7fe bfa4 	b.w	15d94 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   16e4c:	2107      	movs	r1, #7
   16e4e:	4638      	mov	r0, r7
   16e50:	f008 fee4 	bl	1fc1c <atomic_test_bit>
   16e54:	b108      	cbz	r0, 16e5a <smp_pairing_random+0x1be>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16e56:	2109      	movs	r1, #9
   16e58:	e786      	b.n	16d68 <smp_pairing_random+0xcc>
		return compute_and_send_master_dhcheck(smp);
   16e5a:	4620      	mov	r0, r4
}
   16e5c:	b00d      	add	sp, #52	; 0x34
   16e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return compute_and_send_master_dhcheck(smp);
   16e62:	f7ff ba11 	b.w	16288 <compute_and_send_master_dhcheck>
	switch (smp->method) {
   16e66:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16e6a:	2a05      	cmp	r2, #5
   16e6c:	d86f      	bhi.n	16f4e <smp_pairing_random+0x2b2>
   16e6e:	e8df f002 	tbb	[pc, r2]
   16e72:	221b      	.short	0x221b
   16e74:	4d6e0322 	.word	0x4d6e0322
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   16e78:	ab08      	add	r3, sp, #32
   16e7a:	493a      	ldr	r1, [pc, #232]	; (16f64 <smp_pairing_random+0x2c8>)
   16e7c:	9300      	str	r3, [sp, #0]
   16e7e:	4642      	mov	r2, r8
   16e80:	6809      	ldr	r1, [r1, #0]
   16e82:	f104 03e7 	add.w	r3, r4, #231	; 0xe7
   16e86:	f204 1017 	addw	r0, r4, #279	; 0x117
   16e8a:	f7fe faf7 	bl	1547c <smp_g2>
   16e8e:	2800      	cmp	r0, #0
   16e90:	f47f af67 	bne.w	16d62 <smp_pairing_random+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16e94:	210a      	movs	r1, #10
   16e96:	4638      	mov	r0, r7
   16e98:	f009 f801 	bl	1fe9e <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   16e9c:	4b32      	ldr	r3, [pc, #200]	; (16f68 <smp_pairing_random+0x2cc>)
   16e9e:	9908      	ldr	r1, [sp, #32]
   16ea0:	681b      	ldr	r3, [r3, #0]
   16ea2:	6820      	ldr	r0, [r4, #0]
   16ea4:	689b      	ldr	r3, [r3, #8]
   16ea6:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   16ea8:	210d      	movs	r1, #13
   16eaa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16eae:	f008 fff6 	bl	1fe9e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16eb2:	2110      	movs	r1, #16
   16eb4:	e774      	b.n	16da0 <smp_pairing_random+0x104>
		err = sc_smp_check_confirm(smp);
   16eb6:	4620      	mov	r0, r4
   16eb8:	f7fe fc1e 	bl	156f8 <sc_smp_check_confirm>
		if (err) {
   16ebc:	4605      	mov	r5, r0
   16ebe:	2800      	cmp	r0, #0
   16ec0:	f47f af77 	bne.w	16db2 <smp_pairing_random+0x116>
		atomic_set_bit(&smp->allowed_cmds,
   16ec4:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   16ec8:	2103      	movs	r1, #3
   16eca:	4630      	mov	r0, r6
   16ecc:	f008 ffe7 	bl	1fe9e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   16ed0:	4620      	mov	r0, r4
   16ed2:	f009 f83f 	bl	1ff54 <smp_send_pairing_random>
		if (err) {
   16ed6:	4605      	mov	r5, r0
   16ed8:	2800      	cmp	r0, #0
   16eda:	f47f af6a 	bne.w	16db2 <smp_pairing_random+0x116>
		smp->passkey_round++;
   16ede:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   16ee2:	3301      	adds	r3, #1
   16ee4:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   16ee6:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   16ee8:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
   16eec:	d105      	bne.n	16efa <smp_pairing_random+0x25e>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   16eee:	210d      	movs	r1, #13
   16ef0:	4630      	mov	r0, r6
   16ef2:	f008 ffd4 	bl	1fe9e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16ef6:	2110      	movs	r1, #16
   16ef8:	e736      	b.n	16d68 <smp_pairing_random+0xcc>
		if (bt_rand(smp->prnd, 16)) {
   16efa:	2110      	movs	r1, #16
   16efc:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16f00:	f7fa f852 	bl	10fa8 <bt_rand>
   16f04:	2800      	cmp	r0, #0
   16f06:	f43f af54 	beq.w	16db2 <smp_pairing_random+0x116>
   16f0a:	e72a      	b.n	16d62 <smp_pairing_random+0xc6>
		if (bt_rand(smp->prnd, 16)) {
   16f0c:	2110      	movs	r1, #16
   16f0e:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16f12:	f7fa f849 	bl	10fa8 <bt_rand>
   16f16:	4605      	mov	r5, r0
   16f18:	2800      	cmp	r0, #0
   16f1a:	f47f af22 	bne.w	16d62 <smp_pairing_random+0xc6>
		if (bt_auth && bt_auth->oob_data_request) {
   16f1e:	4e12      	ldr	r6, [pc, #72]	; (16f68 <smp_pairing_random+0x2cc>)
   16f20:	6833      	ldr	r3, [r6, #0]
   16f22:	b1cb      	cbz	r3, 16f58 <smp_pairing_random+0x2bc>
   16f24:	68db      	ldr	r3, [r3, #12]
   16f26:	b1bb      	cbz	r3, 16f58 <smp_pairing_random+0x2bc>
			struct bt_conn_oob_info info = {
   16f28:	4b10      	ldr	r3, [pc, #64]	; (16f6c <smp_pairing_random+0x2d0>)
			le_sc_oob_config_set(smp, &info);
   16f2a:	4620      	mov	r0, r4
			struct bt_conn_oob_info info = {
   16f2c:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
			le_sc_oob_config_set(smp, &info);
   16f30:	a908      	add	r1, sp, #32
			struct bt_conn_oob_info info = {
   16f32:	f8ad 3020 	strh.w	r3, [sp, #32]
			le_sc_oob_config_set(smp, &info);
   16f36:	f008 fe50 	bl	1fbda <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   16f3a:	210c      	movs	r1, #12
   16f3c:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   16f3e:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   16f42:	f008 ffac 	bl	1fe9e <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   16f46:	6833      	ldr	r3, [r6, #0]
   16f48:	a908      	add	r1, sp, #32
   16f4a:	68db      	ldr	r3, [r3, #12]
   16f4c:	e761      	b.n	16e12 <smp_pairing_random+0x176>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16f4e:	2145      	movs	r1, #69	; 0x45
   16f50:	4807      	ldr	r0, [pc, #28]	; (16f70 <smp_pairing_random+0x2d4>)
   16f52:	f005 fd21 	bl	1c998 <printk>
   16f56:	e704      	b.n	16d62 <smp_pairing_random+0xc6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   16f58:	2502      	movs	r5, #2
   16f5a:	e72a      	b.n	16db2 <smp_pairing_random+0x116>
   16f5c:	000257a3 	.word	0x000257a3
   16f60:	000259cf 	.word	0x000259cf
   16f64:	20009d3c 	.word	0x20009d3c
   16f68:	20009c18 	.word	0x20009c18
   16f6c:	00021c01 	.word	0x00021c01
   16f70:	00025603 	.word	0x00025603

00016f74 <bt_smp_update_keys>:
{
   16f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f76:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   16f78:	f7fe fab4 	bl	154e4 <smp_chan_get>
	if (!smp) {
   16f7c:	4605      	mov	r5, r0
   16f7e:	2800      	cmp	r0, #0
   16f80:	d077      	beq.n	17072 <bt_smp_update_keys+0xfe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   16f82:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   16f86:	2103      	movs	r1, #3
   16f88:	4630      	mov	r0, r6
   16f8a:	f008 fe47 	bl	1fc1c <atomic_test_bit>
   16f8e:	2800      	cmp	r0, #0
   16f90:	d06f      	beq.n	17072 <bt_smp_update_keys+0xfe>
	if (conn->le.keys) {
   16f92:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16f96:	b108      	cbz	r0, 16f9c <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   16f98:	f000 f922 	bl	171e0 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16f9c:	f104 0788 	add.w	r7, r4, #136	; 0x88
   16fa0:	4639      	mov	r1, r7
   16fa2:	7a20      	ldrb	r0, [r4, #8]
   16fa4:	f000 f87e 	bl	170a4 <bt_keys_get_addr>
   16fa8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   16fac:	b968      	cbnz	r0, 16fca <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
   16fae:	4638      	mov	r0, r7
   16fb0:	f7f7 f9ce 	bl	e350 <bt_addr_le_str_real>
   16fb4:	2145      	movs	r1, #69	; 0x45
   16fb6:	4602      	mov	r2, r0
   16fb8:	482e      	ldr	r0, [pc, #184]	; (17074 <bt_smp_update_keys+0x100>)
   16fba:	f005 fced 	bl	1c998 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   16fbe:	4628      	mov	r0, r5
}
   16fc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   16fc4:	2108      	movs	r1, #8
   16fc6:	f009 b832 	b.w	2002e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   16fca:	210e      	movs	r1, #14
   16fcc:	4630      	mov	r0, r6
   16fce:	f008 fe25 	bl	1fc1c <atomic_test_bit>
   16fd2:	b128      	cbz	r0, 16fe0 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   16fd4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   16fd8:	7b53      	ldrb	r3, [r2, #13]
   16fda:	f043 0302 	orr.w	r3, r3, #2
   16fde:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   16fe0:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   16fe4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   16fe8:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   16fea:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   16fec:	d838      	bhi.n	17060 <bt_smp_update_keys+0xec>
   16fee:	b3d2      	cbz	r2, 17066 <bt_smp_update_keys+0xf2>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   16ff0:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   16ff4:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   16ff6:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
   16ffa:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16ffe:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
   17000:	4293      	cmp	r3, r2
   17002:	bf28      	it	cs
   17004:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   17006:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17008:	2105      	movs	r1, #5
   1700a:	f008 fe07 	bl	1fc1c <atomic_test_bit>
   1700e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   17012:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17014:	b350      	cbz	r0, 1706c <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_SC;
   17016:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1701a:	210d      	movs	r1, #13
   1701c:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1701e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17020:	f008 fdfc 	bl	1fc1c <atomic_test_bit>
   17024:	b328      	cbz	r0, 17072 <bt_smp_update_keys+0xfe>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   17026:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1702a:	2120      	movs	r1, #32
   1702c:	f009 fac9 	bl	205c2 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   17030:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   17034:	f205 1107 	addw	r1, r5, #263	; 0x107
   17038:	2210      	movs	r2, #16
   1703a:	301a      	adds	r0, #26
   1703c:	f007 f964 	bl	1e308 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   17040:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   17044:	2208      	movs	r2, #8
   17046:	2100      	movs	r1, #0
   17048:	3010      	adds	r0, #16
   1704a:	f007 f988 	bl	1e35e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1704e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   17052:	2202      	movs	r2, #2
}
   17054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   17058:	2100      	movs	r1, #0
   1705a:	3018      	adds	r0, #24
   1705c:	f007 b97f 	b.w	1e35e <memset>
	switch (smp->method) {
   17060:	3a05      	subs	r2, #5
   17062:	2a01      	cmp	r2, #1
   17064:	d9c4      	bls.n	16ff0 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   17066:	f023 0301 	bic.w	r3, r3, #1
   1706a:	e7c3      	b.n	16ff4 <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1706c:	f022 0210 	bic.w	r2, r2, #16
   17070:	735a      	strb	r2, [r3, #13]
}
   17072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17074:	00025692 	.word	0x00025692

00017078 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   17078:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1707a:	4b07      	ldr	r3, [pc, #28]	; (17098 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1707c:	4807      	ldr	r0, [pc, #28]	; (1709c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1707e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   17082:	f003 0306 	and.w	r3, r3, #6
   17086:	1f9a      	subs	r2, r3, #6
   17088:	4253      	negs	r3, r2
   1708a:	4153      	adcs	r3, r2
   1708c:	4a04      	ldr	r2, [pc, #16]	; (170a0 <bt_smp_init+0x28>)
   1708e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   17090:	f7f9 fe6a 	bl	10d68 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   17094:	2000      	movs	r0, #0
   17096:	bd08      	pop	{r3, pc}
   17098:	20008000 	.word	0x20008000
   1709c:	200083b4 	.word	0x200083b4
   170a0:	2000b749 	.word	0x2000b749

000170a4 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   170a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   170a6:	4d11      	ldr	r5, [pc, #68]	; (170ec <bt_keys_get_addr+0x48>)
{
   170a8:	4606      	mov	r6, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   170aa:	782b      	ldrb	r3, [r5, #0]
{
   170ac:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   170ae:	4283      	cmp	r3, r0
   170b0:	d00b      	beq.n	170ca <bt_keys_get_addr+0x26>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   170b2:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   170b4:	2207      	movs	r2, #7
   170b6:	4669      	mov	r1, sp
   170b8:	480d      	ldr	r0, [pc, #52]	; (170f0 <bt_keys_get_addr+0x4c>)
   170ba:	9400      	str	r4, [sp, #0]
   170bc:	f8cd 4003 	str.w	r4, [sp, #3]
   170c0:	f007 f911 	bl	1e2e6 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   170c4:	b150      	cbz	r0, 170dc <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   170c6:	4620      	mov	r0, r4
   170c8:	e006      	b.n	170d8 <bt_keys_get_addr+0x34>
   170ca:	2207      	movs	r2, #7
   170cc:	1c68      	adds	r0, r5, #1
   170ce:	f007 f90a 	bl	1e2e6 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   170d2:	2800      	cmp	r0, #0
   170d4:	d1ed      	bne.n	170b2 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   170d6:	4628      	mov	r0, r5
}
   170d8:	b003      	add	sp, #12
   170da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   170dc:	2207      	movs	r2, #7
   170de:	4639      	mov	r1, r7
   170e0:	4803      	ldr	r0, [pc, #12]	; (170f0 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   170e2:	702e      	strb	r6, [r5, #0]
   170e4:	f007 f910 	bl	1e308 <memcpy>
		return keys;
   170e8:	4800      	ldr	r0, [pc, #0]	; (170ec <bt_keys_get_addr+0x48>)
}
   170ea:	e7f5      	b.n	170d8 <bt_keys_get_addr+0x34>
   170ec:	20009d40 	.word	0x20009d40
   170f0:	20009d41 	.word	0x20009d41

000170f4 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   170f4:	460b      	mov	r3, r1
   170f6:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   170f8:	4a04      	ldr	r2, [pc, #16]	; (1710c <bt_keys_foreach+0x18>)
{
   170fa:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   170fc:	89d4      	ldrh	r4, [r2, #14]
   170fe:	4204      	tst	r4, r0
   17100:	d002      	beq.n	17108 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
   17102:	4610      	mov	r0, r2
		}
	}
}
   17104:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   17106:	4718      	bx	r3
}
   17108:	bc10      	pop	{r4}
   1710a:	4770      	bx	lr
   1710c:	20009d40 	.word	0x20009d40

00017110 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   17110:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   17112:	2200      	movs	r2, #0
   17114:	2002      	movs	r0, #2
   17116:	4902      	ldr	r1, [pc, #8]	; (17120 <keys_commit+0x10>)
   17118:	f7ff ffec 	bl	170f4 <bt_keys_foreach>
	}

	return 0;
}
   1711c:	2000      	movs	r0, #0
   1711e:	bd08      	pop	{r3, pc}
   17120:	0002059f 	.word	0x0002059f

00017124 <bt_keys_find>:
{
   17124:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   17126:	4c09      	ldr	r4, [pc, #36]	; (1714c <bt_keys_find+0x28>)
{
   17128:	460b      	mov	r3, r1
   1712a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1712c:	89e2      	ldrh	r2, [r4, #14]
   1712e:	4202      	tst	r2, r0
   17130:	d007      	beq.n	17142 <bt_keys_find+0x1e>
   17132:	7822      	ldrb	r2, [r4, #0]
   17134:	429a      	cmp	r2, r3
   17136:	d104      	bne.n	17142 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   17138:	2207      	movs	r2, #7
   1713a:	1c60      	adds	r0, r4, #1
   1713c:	f007 f8d3 	bl	1e2e6 <memcmp>
   17140:	b108      	cbz	r0, 17146 <bt_keys_find+0x22>
	return NULL;
   17142:	2000      	movs	r0, #0
}
   17144:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   17146:	4620      	mov	r0, r4
   17148:	e7fc      	b.n	17144 <bt_keys_find+0x20>
   1714a:	bf00      	nop
   1714c:	20009d40 	.word	0x20009d40

00017150 <bt_keys_find_irk>:
{
   17150:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   17152:	780b      	ldrb	r3, [r1, #0]
   17154:	4606      	mov	r6, r0
   17156:	2b01      	cmp	r3, #1
   17158:	460d      	mov	r5, r1
   1715a:	d001      	beq.n	17160 <bt_keys_find_irk+0x10>
		return NULL;
   1715c:	2000      	movs	r0, #0
}
   1715e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   17160:	798b      	ldrb	r3, [r1, #6]
   17162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17166:	2b40      	cmp	r3, #64	; 0x40
   17168:	d1f8      	bne.n	1715c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1716a:	4c12      	ldr	r4, [pc, #72]	; (171b4 <bt_keys_find_irk+0x64>)
   1716c:	89e3      	ldrh	r3, [r4, #14]
   1716e:	079b      	lsls	r3, r3, #30
   17170:	d5f4      	bpl.n	1715c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   17172:	7823      	ldrb	r3, [r4, #0]
   17174:	42b3      	cmp	r3, r6
   17176:	d10b      	bne.n	17190 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   17178:	2206      	movs	r2, #6
   1717a:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1717e:	1c68      	adds	r0, r5, #1
   17180:	f007 f8b1 	bl	1e2e6 <memcmp>
   17184:	b908      	cbnz	r0, 1718a <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   17186:	4620      	mov	r0, r4
   17188:	e7e9      	b.n	1715e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1718a:	89e3      	ldrh	r3, [r4, #14]
   1718c:	079a      	lsls	r2, r3, #30
   1718e:	d5e5      	bpl.n	1715c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   17190:	7823      	ldrb	r3, [r4, #0]
   17192:	42b3      	cmp	r3, r6
   17194:	d1e2      	bne.n	1715c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   17196:	3501      	adds	r5, #1
   17198:	4629      	mov	r1, r5
   1719a:	4807      	ldr	r0, [pc, #28]	; (171b8 <bt_keys_find_irk+0x68>)
   1719c:	f007 f905 	bl	1e3aa <bt_rpa_irk_matches>
   171a0:	2800      	cmp	r0, #0
   171a2:	d0db      	beq.n	1715c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   171a4:	2206      	movs	r2, #6
   171a6:	4629      	mov	r1, r5
   171a8:	4804      	ldr	r0, [pc, #16]	; (171bc <bt_keys_find_irk+0x6c>)
   171aa:	f007 f8ad 	bl	1e308 <memcpy>
			return &key_pool[i];
   171ae:	4801      	ldr	r0, [pc, #4]	; (171b4 <bt_keys_find_irk+0x64>)
}
   171b0:	e7d5      	b.n	1715e <bt_keys_find_irk+0xe>
   171b2:	bf00      	nop
   171b4:	20009d40 	.word	0x20009d40
   171b8:	20009d6a 	.word	0x20009d6a
   171bc:	20009d7a 	.word	0x20009d7a

000171c0 <bt_keys_find_addr>:
{
   171c0:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   171c2:	4c06      	ldr	r4, [pc, #24]	; (171dc <bt_keys_find_addr+0x1c>)
   171c4:	7823      	ldrb	r3, [r4, #0]
   171c6:	4283      	cmp	r3, r0
   171c8:	d104      	bne.n	171d4 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   171ca:	2207      	movs	r2, #7
   171cc:	1c60      	adds	r0, r4, #1
   171ce:	f007 f88a 	bl	1e2e6 <memcmp>
   171d2:	b108      	cbz	r0, 171d8 <bt_keys_find_addr+0x18>
	return NULL;
   171d4:	2000      	movs	r0, #0
}
   171d6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   171d8:	4620      	mov	r0, r4
   171da:	e7fc      	b.n	171d6 <bt_keys_find_addr+0x16>
   171dc:	20009d40 	.word	0x20009d40

000171e0 <bt_keys_clear>:
{
   171e0:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   171e2:	7a03      	ldrb	r3, [r0, #8]
{
   171e4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   171e6:	075b      	lsls	r3, r3, #29
{
   171e8:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
   171ea:	d501      	bpl.n	171f0 <bt_keys_clear+0x10>
		bt_id_del(keys);
   171ec:	f7f8 fb46 	bl	f87c <bt_id_del>
		if (keys->id) {
   171f0:	4625      	mov	r5, r4
   171f2:	f815 2b01 	ldrb.w	r2, [r5], #1
   171f6:	b1b2      	cbz	r2, 17226 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   171f8:	ae02      	add	r6, sp, #8
   171fa:	2104      	movs	r1, #4
   171fc:	4630      	mov	r0, r6
   171fe:	f005 fb31 	bl	1c864 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   17202:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   17204:	462b      	mov	r3, r5
   17206:	2124      	movs	r1, #36	; 0x24
   17208:	4a08      	ldr	r2, [pc, #32]	; (1722c <bt_keys_clear+0x4c>)
   1720a:	a803      	add	r0, sp, #12
   1720c:	f7f7 f940 	bl	e490 <bt_settings_encode_key>
		settings_delete(key);
   17210:	a803      	add	r0, sp, #12
   17212:	f006 f854 	bl	1d2be <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   17216:	225c      	movs	r2, #92	; 0x5c
   17218:	2100      	movs	r1, #0
   1721a:	4620      	mov	r0, r4
}
   1721c:	b00c      	add	sp, #48	; 0x30
   1721e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   17222:	f007 b89c 	b.w	1e35e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   17226:	9200      	str	r2, [sp, #0]
   17228:	e7ec      	b.n	17204 <bt_keys_clear+0x24>
   1722a:	bf00      	nop
   1722c:	00025b38 	.word	0x00025b38

00017230 <keys_set>:
{
   17230:	b570      	push	{r4, r5, r6, lr}
   17232:	4605      	mov	r5, r0
   17234:	4614      	mov	r4, r2
   17236:	4618      	mov	r0, r3
   17238:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1723a:	b945      	cbnz	r5, 1724e <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1723c:	2145      	movs	r1, #69	; 0x45
   1723e:	4830      	ldr	r0, [pc, #192]	; (17300 <keys_set+0xd0>)
   17240:	f005 fbaa 	bl	1c998 <printk>
		return -EINVAL;
   17244:	f06f 0415 	mvn.w	r4, #21
}
   17248:	4620      	mov	r0, r4
   1724a:	b018      	add	sp, #96	; 0x60
   1724c:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1724e:	2250      	movs	r2, #80	; 0x50
   17250:	a904      	add	r1, sp, #16
   17252:	47a0      	blx	r4
	if (len < 0) {
   17254:	1e04      	subs	r4, r0, #0
   17256:	da05      	bge.n	17264 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   17258:	4622      	mov	r2, r4
   1725a:	2145      	movs	r1, #69	; 0x45
   1725c:	4829      	ldr	r0, [pc, #164]	; (17304 <keys_set+0xd4>)
   1725e:	f005 fb9b 	bl	1c998 <printk>
   17262:	e7ef      	b.n	17244 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   17264:	4628      	mov	r0, r5
   17266:	a902      	add	r1, sp, #8
   17268:	f007 f8c5 	bl	1e3f6 <bt_settings_decode_key>
	if (err) {
   1726c:	4606      	mov	r6, r0
   1726e:	b118      	cbz	r0, 17278 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   17270:	462a      	mov	r2, r5
   17272:	2145      	movs	r1, #69	; 0x45
   17274:	4824      	ldr	r0, [pc, #144]	; (17308 <keys_set+0xd8>)
   17276:	e7f2      	b.n	1725e <keys_set+0x2e>
	settings_name_next(name, &next);
   17278:	4628      	mov	r0, r5
   1727a:	a901      	add	r1, sp, #4
   1727c:	f006 f846 	bl	1d30c <settings_name_next>
	if (!next) {
   17280:	9801      	ldr	r0, [sp, #4]
   17282:	b120      	cbz	r0, 1728e <keys_set+0x5e>
		id = strtol(next, NULL, 10);
   17284:	220a      	movs	r2, #10
   17286:	4631      	mov	r1, r6
   17288:	f006 ff50 	bl	1e12c <strtol>
   1728c:	b2c0      	uxtb	r0, r0
	if (!len) {
   1728e:	b99c      	cbnz	r4, 172b8 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   17290:	4601      	mov	r1, r0
   17292:	aa02      	add	r2, sp, #8
   17294:	203f      	movs	r0, #63	; 0x3f
   17296:	f7ff ff45 	bl	17124 <bt_keys_find>
		if (keys) {
   1729a:	b120      	cbz	r0, 172a6 <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
   1729c:	225c      	movs	r2, #92	; 0x5c
   1729e:	4621      	mov	r1, r4
   172a0:	f007 f85d 	bl	1e35e <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   172a4:	e7d0      	b.n	17248 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   172a6:	a802      	add	r0, sp, #8
   172a8:	f7f7 f852 	bl	e350 <bt_addr_le_str_real>
   172ac:	2157      	movs	r1, #87	; 0x57
   172ae:	4602      	mov	r2, r0
   172b0:	4816      	ldr	r0, [pc, #88]	; (1730c <keys_set+0xdc>)
   172b2:	f005 fb71 	bl	1c998 <printk>
   172b6:	e7c7      	b.n	17248 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   172b8:	a902      	add	r1, sp, #8
   172ba:	f7ff fef3 	bl	170a4 <bt_keys_get_addr>
	if (!keys) {
   172be:	4605      	mov	r5, r0
   172c0:	b950      	cbnz	r0, 172d8 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   172c2:	a802      	add	r0, sp, #8
   172c4:	f7f7 f844 	bl	e350 <bt_addr_le_str_real>
   172c8:	2145      	movs	r1, #69	; 0x45
   172ca:	4602      	mov	r2, r0
   172cc:	4810      	ldr	r0, [pc, #64]	; (17310 <keys_set+0xe0>)
   172ce:	f005 fb63 	bl	1c998 <printk>
		return -ENOMEM;
   172d2:	f06f 040b 	mvn.w	r4, #11
   172d6:	e7b7      	b.n	17248 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   172d8:	2c50      	cmp	r4, #80	; 0x50
   172da:	d009      	beq.n	172f0 <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
   172dc:	2350      	movs	r3, #80	; 0x50
   172de:	4622      	mov	r2, r4
   172e0:	2145      	movs	r1, #69	; 0x45
   172e2:	480c      	ldr	r0, [pc, #48]	; (17314 <keys_set+0xe4>)
   172e4:	f005 fb58 	bl	1c998 <printk>
			bt_keys_clear(keys);
   172e8:	4628      	mov	r0, r5
   172ea:	f7ff ff79 	bl	171e0 <bt_keys_clear>
			return -EINVAL;
   172ee:	e7a9      	b.n	17244 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   172f0:	4622      	mov	r2, r4
   172f2:	a904      	add	r1, sp, #16
   172f4:	300c      	adds	r0, #12
   172f6:	f007 f807 	bl	1e308 <memcpy>
	return 0;
   172fa:	2400      	movs	r4, #0
   172fc:	e7a4      	b.n	17248 <keys_set+0x18>
   172fe:	bf00      	nop
   17300:	00023fad 	.word	0x00023fad
   17304:	00025a80 	.word	0x00025a80
   17308:	000252e8 	.word	0x000252e8
   1730c:	00025aa4 	.word	0x00025aa4
   17310:	00025acc 	.word	0x00025acc
   17314:	00025af0 	.word	0x00025af0

00017318 <bt_keys_store>:
{
   17318:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1731a:	4605      	mov	r5, r0
   1731c:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17320:	4604      	mov	r4, r0
   17322:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   17324:	b1da      	cbz	r2, 1735e <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   17326:	ae02      	add	r6, sp, #8
   17328:	2104      	movs	r1, #4
   1732a:	4630      	mov	r0, r6
   1732c:	f005 fa9a 	bl	1c864 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   17330:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   17332:	462b      	mov	r3, r5
   17334:	2124      	movs	r1, #36	; 0x24
   17336:	4a0b      	ldr	r2, [pc, #44]	; (17364 <bt_keys_store+0x4c>)
   17338:	a803      	add	r0, sp, #12
   1733a:	f7f7 f8a9 	bl	e490 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1733e:	f104 010c 	add.w	r1, r4, #12
   17342:	2250      	movs	r2, #80	; 0x50
   17344:	a803      	add	r0, sp, #12
   17346:	f7f4 fb7d 	bl	ba44 <settings_save_one>
	if (err) {
   1734a:	4604      	mov	r4, r0
   1734c:	b120      	cbz	r0, 17358 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   1734e:	4602      	mov	r2, r0
   17350:	2145      	movs	r1, #69	; 0x45
   17352:	4805      	ldr	r0, [pc, #20]	; (17368 <bt_keys_store+0x50>)
   17354:	f005 fb20 	bl	1c998 <printk>
}
   17358:	4620      	mov	r0, r4
   1735a:	b00c      	add	sp, #48	; 0x30
   1735c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1735e:	9200      	str	r2, [sp, #0]
   17360:	e7e7      	b.n	17332 <bt_keys_store+0x1a>
   17362:	bf00      	nop
   17364:	00025b38 	.word	0x00025b38
   17368:	00025b13 	.word	0x00025b13

0001736c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1736c:	222c      	movs	r2, #44	; 0x2c
   1736e:	4b02      	ldr	r3, [pc, #8]	; (17378 <net_buf_pool_get+0xc>)
   17370:	fb02 3000 	mla	r0, r2, r0, r3
   17374:	4770      	bx	lr
   17376:	bf00      	nop
   17378:	20008594 	.word	0x20008594

0001737c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1737c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1737e:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   17380:	4b04      	ldr	r3, [pc, #16]	; (17394 <net_buf_id+0x18>)
   17382:	fb01 3302 	mla	r3, r1, r2, r3
   17386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17388:	1ac0      	subs	r0, r0, r3
}
   1738a:	4b03      	ldr	r3, [pc, #12]	; (17398 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1738c:	10c0      	asrs	r0, r0, #3
}
   1738e:	4358      	muls	r0, r3
   17390:	4770      	bx	lr
   17392:	bf00      	nop
   17394:	20008594 	.word	0x20008594
   17398:	aaaaaaab 	.word	0xaaaaaaab

0001739c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1739c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1739e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   173a0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   173a2:	4b09      	ldr	r3, [pc, #36]	; (173c8 <fixed_data_alloc+0x2c>)
   173a4:	fb04 3302 	mla	r3, r4, r2, r3
   173a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   173aa:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   173ac:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   173ae:	6823      	ldr	r3, [r4, #0]
   173b0:	429a      	cmp	r2, r3
   173b2:	bf94      	ite	ls
   173b4:	600a      	strls	r2, [r1, #0]
   173b6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   173b8:	f7ff ffe0 	bl	1737c <net_buf_id>
   173bc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   173c0:	fb02 3000 	mla	r0, r2, r0, r3
   173c4:	bd10      	pop	{r4, pc}
   173c6:	bf00      	nop
   173c8:	20008594 	.word	0x20008594

000173cc <net_buf_reset>:
{
   173cc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   173ce:	7943      	ldrb	r3, [r0, #5]
{
   173d0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   173d2:	b143      	cbz	r3, 173e6 <net_buf_reset+0x1a>
   173d4:	490c      	ldr	r1, [pc, #48]	; (17408 <net_buf_reset+0x3c>)
   173d6:	480d      	ldr	r0, [pc, #52]	; (1740c <net_buf_reset+0x40>)
   173d8:	224f      	movs	r2, #79	; 0x4f
   173da:	f005 fadd 	bl	1c998 <printk>
   173de:	214f      	movs	r1, #79	; 0x4f
   173e0:	4809      	ldr	r0, [pc, #36]	; (17408 <net_buf_reset+0x3c>)
   173e2:	f005 fd7f 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   173e6:	6823      	ldr	r3, [r4, #0]
   173e8:	b143      	cbz	r3, 173fc <net_buf_reset+0x30>
   173ea:	4907      	ldr	r1, [pc, #28]	; (17408 <net_buf_reset+0x3c>)
   173ec:	4807      	ldr	r0, [pc, #28]	; (1740c <net_buf_reset+0x40>)
   173ee:	2250      	movs	r2, #80	; 0x50
   173f0:	f005 fad2 	bl	1c998 <printk>
   173f4:	2150      	movs	r1, #80	; 0x50
   173f6:	4804      	ldr	r0, [pc, #16]	; (17408 <net_buf_reset+0x3c>)
   173f8:	f005 fd74 	bl	1cee4 <assert_post_action>
	buf->len  = 0U;
   173fc:	2300      	movs	r3, #0
   173fe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   17400:	6923      	ldr	r3, [r4, #16]
   17402:	60a3      	str	r3, [r4, #8]
}
   17404:	bd10      	pop	{r4, pc}
   17406:	bf00      	nop
   17408:	00025b45 	.word	0x00025b45
   1740c:	00022dd6 	.word	0x00022dd6

00017410 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   17410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17414:	4605      	mov	r5, r0
   17416:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   17418:	4610      	mov	r0, r2
   1741a:	4619      	mov	r1, r3
{
   1741c:	4691      	mov	r9, r2
   1741e:	4698      	mov	r8, r3
   17420:	4617      	mov	r7, r2
   17422:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   17424:	f00a f89e 	bl	21564 <z_timeout_end_calc>
   17428:	4682      	mov	sl, r0
   1742a:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1742c:	b945      	cbnz	r5, 17440 <net_buf_alloc_len+0x30>
   1742e:	494a      	ldr	r1, [pc, #296]	; (17558 <net_buf_alloc_len+0x148>)
   17430:	484a      	ldr	r0, [pc, #296]	; (1755c <net_buf_alloc_len+0x14c>)
   17432:	22ed      	movs	r2, #237	; 0xed
   17434:	f005 fab0 	bl	1c998 <printk>
   17438:	21ed      	movs	r1, #237	; 0xed
   1743a:	4847      	ldr	r0, [pc, #284]	; (17558 <net_buf_alloc_len+0x148>)
   1743c:	f005 fd52 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   17440:	f04f 0320 	mov.w	r3, #32
   17444:	f3ef 8111 	mrs	r1, BASEPRI
   17448:	f383 8811 	msr	BASEPRI, r3
   1744c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17450:	8beb      	ldrh	r3, [r5, #30]
   17452:	2b00      	cmp	r3, #0
   17454:	d055      	beq.n	17502 <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17456:	8baa      	ldrh	r2, [r5, #28]
   17458:	429a      	cmp	r2, r3
   1745a:	d93e      	bls.n	174da <net_buf_alloc_len+0xca>
   1745c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1745e:	2200      	movs	r2, #0
   17460:	2300      	movs	r3, #0
   17462:	4628      	mov	r0, r5
   17464:	f003 f86c 	bl	1a540 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   17468:	9900      	ldr	r1, [sp, #0]
   1746a:	4604      	mov	r4, r0
   1746c:	2800      	cmp	r0, #0
   1746e:	d034      	beq.n	174da <net_buf_alloc_len+0xca>
	__asm__ volatile(
   17470:	f381 8811 	msr	BASEPRI, r1
   17474:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17478:	9d01      	ldr	r5, [sp, #4]
   1747a:	2d00      	cmp	r5, #0
   1747c:	d069      	beq.n	17552 <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1747e:	ea58 0309 	orrs.w	r3, r8, r9
   17482:	d00f      	beq.n	174a4 <net_buf_alloc_len+0x94>
   17484:	f1b8 3fff 	cmp.w	r8, #4294967295
   17488:	bf08      	it	eq
   1748a:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1748e:	d009      	beq.n	174a4 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   17490:	f004 fe40 	bl	1c114 <z_tick_get>
   17494:	ebba 0700 	subs.w	r7, sl, r0
   17498:	eb6b 0601 	sbc.w	r6, fp, r1
   1749c:	2e00      	cmp	r6, #0
   1749e:	bfbc      	itt	lt
   174a0:	2700      	movlt	r7, #0
   174a2:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   174a4:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   174a8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   174aa:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 17560 <net_buf_alloc_len+0x150>
   174ae:	463a      	mov	r2, r7
   174b0:	fb09 8303 	mla	r3, r9, r3, r8
   174b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   174b6:	4620      	mov	r0, r4
   174b8:	681b      	ldr	r3, [r3, #0]
   174ba:	a901      	add	r1, sp, #4
   174bc:	f8d3 a000 	ldr.w	sl, [r3]
   174c0:	4633      	mov	r3, r6
   174c2:	47d0      	blx	sl
   174c4:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   174c6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   174c8:	bb58      	cbnz	r0, 17522 <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   174ca:	79a0      	ldrb	r0, [r4, #6]
   174cc:	4621      	mov	r1, r4
   174ce:	fb00 8009 	mla	r0, r0, r9, r8
   174d2:	f009 ff7c 	bl	213ce <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   174d6:	4634      	mov	r4, r6
}
   174d8:	e01f      	b.n	1751a <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   174da:	8beb      	ldrh	r3, [r5, #30]
   174dc:	1e5a      	subs	r2, r3, #1
   174de:	83ea      	strh	r2, [r5, #30]
   174e0:	f381 8811 	msr	BASEPRI, r1
   174e4:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   174e8:	2018      	movs	r0, #24
   174ea:	8bac      	ldrh	r4, [r5, #28]
   174ec:	1ae3      	subs	r3, r4, r3
   174ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
   174f0:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   174f4:	481a      	ldr	r0, [pc, #104]	; (17560 <net_buf_alloc_len+0x150>)
   174f6:	4b1b      	ldr	r3, [pc, #108]	; (17564 <net_buf_alloc_len+0x154>)
   174f8:	1a2d      	subs	r5, r5, r0
   174fa:	10ad      	asrs	r5, r5, #2
   174fc:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   174fe:	71a5      	strb	r5, [r4, #6]
		goto success;
   17500:	e7ba      	b.n	17478 <net_buf_alloc_len+0x68>
   17502:	f381 8811 	msr	BASEPRI, r1
   17506:	f3bf 8f6f 	isb	sy
   1750a:	464a      	mov	r2, r9
   1750c:	4643      	mov	r3, r8
   1750e:	4628      	mov	r0, r5
   17510:	f003 f816 	bl	1a540 <z_impl_k_queue_get>
	if (!buf) {
   17514:	4604      	mov	r4, r0
   17516:	2800      	cmp	r0, #0
   17518:	d1ae      	bne.n	17478 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1751a:	4620      	mov	r0, r4
   1751c:	b003      	add	sp, #12
   1751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   17522:	9b01      	ldr	r3, [sp, #4]
   17524:	429d      	cmp	r5, r3
   17526:	d90a      	bls.n	1753e <net_buf_alloc_len+0x12e>
   17528:	490b      	ldr	r1, [pc, #44]	; (17558 <net_buf_alloc_len+0x148>)
   1752a:	480c      	ldr	r0, [pc, #48]	; (1755c <net_buf_alloc_len+0x14c>)
   1752c:	f240 124d 	movw	r2, #333	; 0x14d
   17530:	f005 fa32 	bl	1c998 <printk>
   17534:	f240 114d 	movw	r1, #333	; 0x14d
   17538:	4807      	ldr	r0, [pc, #28]	; (17558 <net_buf_alloc_len+0x148>)
   1753a:	f005 fcd3 	bl	1cee4 <assert_post_action>
	buf->frags = NULL;
   1753e:	2300      	movs	r3, #0
   17540:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   17542:	2301      	movs	r3, #1
   17544:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   17546:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   17548:	4620      	mov	r0, r4
	buf->size  = size;
   1754a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1754c:	f7ff ff3e 	bl	173cc <net_buf_reset>
	return buf;
   17550:	e7e3      	b.n	1751a <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   17552:	6125      	str	r5, [r4, #16]
   17554:	e7f3      	b.n	1753e <net_buf_alloc_len+0x12e>
   17556:	bf00      	nop
   17558:	00025b45 	.word	0x00025b45
   1755c:	00022dd6 	.word	0x00022dd6
   17560:	20008594 	.word	0x20008594
   17564:	ba2e8ba3 	.word	0xba2e8ba3

00017568 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   17568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1756c:	4606      	mov	r6, r0
   1756e:	f002 ffe7 	bl	1a540 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   17572:	4605      	mov	r5, r0
   17574:	b140      	cbz	r0, 17588 <net_buf_get+0x20>
   17576:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   17578:	4f11      	ldr	r7, [pc, #68]	; (175c0 <net_buf_get+0x58>)
   1757a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 175c4 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1757e:	7963      	ldrb	r3, [r4, #5]
   17580:	f013 0301 	ands.w	r3, r3, #1
   17584:	d103      	bne.n	1758e <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17586:	6023      	str	r3, [r4, #0]

	return buf;
}
   17588:	4628      	mov	r0, r5
   1758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1758e:	2200      	movs	r2, #0
   17590:	2300      	movs	r3, #0
   17592:	4630      	mov	r0, r6
   17594:	f002 ffd4 	bl	1a540 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17598:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1759a:	b950      	cbnz	r0, 175b2 <net_buf_get+0x4a>
   1759c:	4639      	mov	r1, r7
   1759e:	4640      	mov	r0, r8
   175a0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   175a4:	f005 f9f8 	bl	1c998 <printk>
   175a8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   175ac:	4638      	mov	r0, r7
   175ae:	f005 fc99 	bl	1cee4 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   175b2:	7963      	ldrb	r3, [r4, #5]
   175b4:	f023 0301 	bic.w	r3, r3, #1
   175b8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   175ba:	6824      	ldr	r4, [r4, #0]
   175bc:	e7df      	b.n	1757e <net_buf_get+0x16>
   175be:	bf00      	nop
   175c0:	00025b45 	.word	0x00025b45
   175c4:	00022dd6 	.word	0x00022dd6

000175c8 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   175c8:	b538      	push	{r3, r4, r5, lr}
   175ca:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   175cc:	4604      	mov	r4, r0
   175ce:	b950      	cbnz	r0, 175e6 <net_buf_simple_reserve+0x1e>
   175d0:	490d      	ldr	r1, [pc, #52]	; (17608 <net_buf_simple_reserve+0x40>)
   175d2:	480e      	ldr	r0, [pc, #56]	; (1760c <net_buf_simple_reserve+0x44>)
   175d4:	f240 12bb 	movw	r2, #443	; 0x1bb
   175d8:	f005 f9de 	bl	1c998 <printk>
   175dc:	f240 11bb 	movw	r1, #443	; 0x1bb
   175e0:	4809      	ldr	r0, [pc, #36]	; (17608 <net_buf_simple_reserve+0x40>)
   175e2:	f005 fc7f 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   175e6:	88a3      	ldrh	r3, [r4, #4]
   175e8:	b153      	cbz	r3, 17600 <net_buf_simple_reserve+0x38>
   175ea:	4907      	ldr	r1, [pc, #28]	; (17608 <net_buf_simple_reserve+0x40>)
   175ec:	4807      	ldr	r0, [pc, #28]	; (1760c <net_buf_simple_reserve+0x44>)
   175ee:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   175f2:	f005 f9d1 	bl	1c998 <printk>
   175f6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   175fa:	4803      	ldr	r0, [pc, #12]	; (17608 <net_buf_simple_reserve+0x40>)
   175fc:	f005 fc72 	bl	1cee4 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17600:	68a3      	ldr	r3, [r4, #8]
   17602:	442b      	add	r3, r5
   17604:	6023      	str	r3, [r4, #0]
}
   17606:	bd38      	pop	{r3, r4, r5, pc}
   17608:	00025b45 	.word	0x00025b45
   1760c:	00022dd6 	.word	0x00022dd6

00017610 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17610:	b538      	push	{r3, r4, r5, lr}
   17612:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   17614:	4605      	mov	r5, r0
   17616:	b950      	cbnz	r0, 1762e <net_buf_put+0x1e>
   17618:	4912      	ldr	r1, [pc, #72]	; (17664 <net_buf_put+0x54>)
   1761a:	4813      	ldr	r0, [pc, #76]	; (17668 <net_buf_put+0x58>)
   1761c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   17620:	f005 f9ba 	bl	1c998 <printk>
   17624:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   17628:	480e      	ldr	r0, [pc, #56]	; (17664 <net_buf_put+0x54>)
   1762a:	f005 fc5b 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1762e:	b954      	cbnz	r4, 17646 <net_buf_put+0x36>
   17630:	490c      	ldr	r1, [pc, #48]	; (17664 <net_buf_put+0x54>)
   17632:	480d      	ldr	r0, [pc, #52]	; (17668 <net_buf_put+0x58>)
   17634:	f240 12f9 	movw	r2, #505	; 0x1f9
   17638:	f005 f9ae 	bl	1c998 <printk>
   1763c:	f240 11f9 	movw	r1, #505	; 0x1f9
   17640:	4808      	ldr	r0, [pc, #32]	; (17664 <net_buf_put+0x54>)
   17642:	f005 fc4f 	bl	1cee4 <assert_post_action>
{
   17646:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   17648:	6811      	ldr	r1, [r2, #0]
   1764a:	b929      	cbnz	r1, 17658 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1764c:	4621      	mov	r1, r4
   1764e:	4628      	mov	r0, r5
}
   17650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   17654:	f002 bf20 	b.w	1a498 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   17658:	7953      	ldrb	r3, [r2, #5]
   1765a:	f043 0301 	orr.w	r3, r3, #1
   1765e:	7153      	strb	r3, [r2, #5]
   17660:	460a      	mov	r2, r1
   17662:	e7f1      	b.n	17648 <net_buf_put+0x38>
   17664:	00025b45 	.word	0x00025b45
   17668:	00022dd6 	.word	0x00022dd6

0001766c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   17670:	4605      	mov	r5, r0
   17672:	b328      	cbz	r0, 176c0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17674:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   17676:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1767a:	4e1b      	ldr	r6, [pc, #108]	; (176e8 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   1767c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1767e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   17680:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   17682:	3b01      	subs	r3, #1
   17684:	b2db      	uxtb	r3, r3
   17686:	7123      	strb	r3, [r4, #4]
   17688:	b9c3      	cbnz	r3, 176bc <net_buf_unref+0x50>
		if (buf->__buf) {
   1768a:	6921      	ldr	r1, [r4, #16]
   1768c:	b159      	cbz	r1, 176a6 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1768e:	7963      	ldrb	r3, [r4, #5]
   17690:	079b      	lsls	r3, r3, #30
   17692:	d407      	bmi.n	176a4 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17694:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   17696:	4620      	mov	r0, r4
   17698:	fb08 6303 	mla	r3, r8, r3, r6
   1769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1769e:	681b      	ldr	r3, [r3, #0]
   176a0:	689b      	ldr	r3, [r3, #8]
   176a2:	4798      	blx	r3
			buf->__buf = NULL;
   176a4:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   176a6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   176a8:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   176aa:	fb08 6300 	mla	r3, r8, r0, r6
   176ae:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   176b0:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   176b2:	b193      	cbz	r3, 176da <net_buf_unref+0x6e>
			pool->destroy(buf);
   176b4:	4620      	mov	r0, r4
   176b6:	4798      	blx	r3
	while (buf) {
   176b8:	2d00      	cmp	r5, #0
   176ba:	d1df      	bne.n	1767c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   176bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   176c0:	490a      	ldr	r1, [pc, #40]	; (176ec <net_buf_unref+0x80>)
   176c2:	480b      	ldr	r0, [pc, #44]	; (176f0 <net_buf_unref+0x84>)
   176c4:	f44f 7202 	mov.w	r2, #520	; 0x208
   176c8:	f005 f966 	bl	1c998 <printk>
}
   176cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   176d0:	f44f 7102 	mov.w	r1, #520	; 0x208
   176d4:	4805      	ldr	r0, [pc, #20]	; (176ec <net_buf_unref+0x80>)
   176d6:	f005 bc05 	b.w	1cee4 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   176da:	4621      	mov	r1, r4
   176dc:	fb00 6008 	mla	r0, r0, r8, r6
   176e0:	f009 fe75 	bl	213ce <k_queue_prepend>
}
   176e4:	e7e8      	b.n	176b8 <net_buf_unref+0x4c>
   176e6:	bf00      	nop
   176e8:	20008594 	.word	0x20008594
   176ec:	00025b45 	.word	0x00025b45
   176f0:	00022dd6 	.word	0x00022dd6

000176f4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   176f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   176f6:	4604      	mov	r4, r0
   176f8:	b950      	cbnz	r0, 17710 <net_buf_ref+0x1c>
   176fa:	4908      	ldr	r1, [pc, #32]	; (1771c <net_buf_ref+0x28>)
   176fc:	4808      	ldr	r0, [pc, #32]	; (17720 <net_buf_ref+0x2c>)
   176fe:	f240 2237 	movw	r2, #567	; 0x237
   17702:	f005 f949 	bl	1c998 <printk>
   17706:	f240 2137 	movw	r1, #567	; 0x237
   1770a:	4804      	ldr	r0, [pc, #16]	; (1771c <net_buf_ref+0x28>)
   1770c:	f005 fbea 	bl	1cee4 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17710:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   17712:	4620      	mov	r0, r4
	buf->ref++;
   17714:	3301      	adds	r3, #1
   17716:	7123      	strb	r3, [r4, #4]
}
   17718:	bd10      	pop	{r4, pc}
   1771a:	bf00      	nop
   1771c:	00025b45 	.word	0x00025b45
   17720:	00022dd6 	.word	0x00022dd6

00017724 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   17724:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   17726:	4604      	mov	r4, r0
   17728:	b950      	cbnz	r0, 17740 <net_buf_frag_last+0x1c>
   1772a:	4908      	ldr	r1, [pc, #32]	; (1774c <net_buf_frag_last+0x28>)
   1772c:	4808      	ldr	r0, [pc, #32]	; (17750 <net_buf_frag_last+0x2c>)
   1772e:	f44f 721d 	mov.w	r2, #628	; 0x274
   17732:	f005 f931 	bl	1c998 <printk>
   17736:	f44f 711d 	mov.w	r1, #628	; 0x274
   1773a:	4804      	ldr	r0, [pc, #16]	; (1774c <net_buf_frag_last+0x28>)
   1773c:	f005 fbd2 	bl	1cee4 <assert_post_action>

	while (buf->frags) {
   17740:	4620      	mov	r0, r4
   17742:	6824      	ldr	r4, [r4, #0]
   17744:	2c00      	cmp	r4, #0
   17746:	d1fb      	bne.n	17740 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   17748:	bd10      	pop	{r4, pc}
   1774a:	bf00      	nop
   1774c:	00025b45 	.word	0x00025b45
   17750:	00022dd6 	.word	0x00022dd6

00017754 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   17754:	b538      	push	{r3, r4, r5, lr}
   17756:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   17758:	4604      	mov	r4, r0
   1775a:	b950      	cbnz	r0, 17772 <net_buf_frag_insert+0x1e>
   1775c:	490f      	ldr	r1, [pc, #60]	; (1779c <net_buf_frag_insert+0x48>)
   1775e:	4810      	ldr	r0, [pc, #64]	; (177a0 <net_buf_frag_insert+0x4c>)
   17760:	f240 227f 	movw	r2, #639	; 0x27f
   17764:	f005 f918 	bl	1c998 <printk>
   17768:	f240 217f 	movw	r1, #639	; 0x27f
   1776c:	480b      	ldr	r0, [pc, #44]	; (1779c <net_buf_frag_insert+0x48>)
   1776e:	f005 fbb9 	bl	1cee4 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   17772:	b955      	cbnz	r5, 1778a <net_buf_frag_insert+0x36>
   17774:	4909      	ldr	r1, [pc, #36]	; (1779c <net_buf_frag_insert+0x48>)
   17776:	480a      	ldr	r0, [pc, #40]	; (177a0 <net_buf_frag_insert+0x4c>)
   17778:	f44f 7220 	mov.w	r2, #640	; 0x280
   1777c:	f005 f90c 	bl	1c998 <printk>
   17780:	f44f 7120 	mov.w	r1, #640	; 0x280
   17784:	4805      	ldr	r0, [pc, #20]	; (1779c <net_buf_frag_insert+0x48>)
   17786:	f005 fbad 	bl	1cee4 <assert_post_action>

	if (parent->frags) {
   1778a:	6823      	ldr	r3, [r4, #0]
   1778c:	b123      	cbz	r3, 17798 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1778e:	4628      	mov	r0, r5
   17790:	f7ff ffc8 	bl	17724 <net_buf_frag_last>
   17794:	6823      	ldr	r3, [r4, #0]
   17796:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   17798:	6025      	str	r5, [r4, #0]
}
   1779a:	bd38      	pop	{r3, r4, r5, pc}
   1779c:	00025b45 	.word	0x00025b45
   177a0:	00022dd6 	.word	0x00022dd6

000177a4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   177a4:	b538      	push	{r3, r4, r5, lr}
   177a6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   177a8:	460d      	mov	r5, r1
   177aa:	b951      	cbnz	r1, 177c2 <net_buf_frag_add+0x1e>
   177ac:	490c      	ldr	r1, [pc, #48]	; (177e0 <net_buf_frag_add+0x3c>)
   177ae:	480d      	ldr	r0, [pc, #52]	; (177e4 <net_buf_frag_add+0x40>)
   177b0:	f240 228b 	movw	r2, #651	; 0x28b
   177b4:	f005 f8f0 	bl	1c998 <printk>
   177b8:	f240 218b 	movw	r1, #651	; 0x28b
   177bc:	4808      	ldr	r0, [pc, #32]	; (177e0 <net_buf_frag_add+0x3c>)
   177be:	f005 fb91 	bl	1cee4 <assert_post_action>

	if (!head) {
   177c2:	b924      	cbnz	r4, 177ce <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   177c4:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   177c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   177ca:	f7ff bf93 	b.w	176f4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   177ce:	4620      	mov	r0, r4
   177d0:	f7ff ffa8 	bl	17724 <net_buf_frag_last>
   177d4:	4629      	mov	r1, r5
   177d6:	f7ff ffbd 	bl	17754 <net_buf_frag_insert>
}
   177da:	4620      	mov	r0, r4
   177dc:	bd38      	pop	{r3, r4, r5, pc}
   177de:	bf00      	nop
   177e0:	00025b45 	.word	0x00025b45
   177e4:	00022dd6 	.word	0x00022dd6

000177e8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   177e8:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   177ea:	6882      	ldr	r2, [r0, #8]
   177ec:	6803      	ldr	r3, [r0, #0]
{
   177ee:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   177f0:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   177f2:	4299      	cmp	r1, r3
{
   177f4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   177f6:	d90a      	bls.n	1780e <net_buf_simple_push+0x26>
   177f8:	4908      	ldr	r1, [pc, #32]	; (1781c <net_buf_simple_push+0x34>)
   177fa:	4809      	ldr	r0, [pc, #36]	; (17820 <net_buf_simple_push+0x38>)
   177fc:	f240 4204 	movw	r2, #1028	; 0x404
   17800:	f005 f8ca 	bl	1c998 <printk>
   17804:	f240 4104 	movw	r1, #1028	; 0x404
   17808:	4804      	ldr	r0, [pc, #16]	; (1781c <net_buf_simple_push+0x34>)
   1780a:	f005 fb6b 	bl	1cee4 <assert_post_action>
	buf->data -= len;
   1780e:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   17810:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   17812:	1b40      	subs	r0, r0, r5
	buf->len += len;
   17814:	440d      	add	r5, r1
	buf->data -= len;
   17816:	6020      	str	r0, [r4, #0]
	buf->len += len;
   17818:	80a5      	strh	r5, [r4, #4]
}
   1781a:	bd38      	pop	{r3, r4, r5, pc}
   1781c:	00025b45 	.word	0x00025b45
   17820:	00022dd6 	.word	0x00022dd6

00017824 <net_buf_simple_pull>:
{
   17824:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   17826:	8883      	ldrh	r3, [r0, #4]
{
   17828:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1782a:	428b      	cmp	r3, r1
{
   1782c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1782e:	d20a      	bcs.n	17846 <net_buf_simple_pull+0x22>
   17830:	4908      	ldr	r1, [pc, #32]	; (17854 <net_buf_simple_pull+0x30>)
   17832:	4809      	ldr	r0, [pc, #36]	; (17858 <net_buf_simple_pull+0x34>)
   17834:	f240 4264 	movw	r2, #1124	; 0x464
   17838:	f005 f8ae 	bl	1c998 <printk>
   1783c:	f240 4164 	movw	r1, #1124	; 0x464
   17840:	4804      	ldr	r0, [pc, #16]	; (17854 <net_buf_simple_pull+0x30>)
   17842:	f005 fb4f 	bl	1cee4 <assert_post_action>
	buf->len -= len;
   17846:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   17848:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1784a:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1784c:	4428      	add	r0, r5
	buf->len -= len;
   1784e:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   17850:	6020      	str	r0, [r4, #0]
}
   17852:	bd38      	pop	{r3, r4, r5, pc}
   17854:	00025b45 	.word	0x00025b45
   17858:	00022dd6 	.word	0x00022dd6

0001785c <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1785c:	8883      	ldrh	r3, [r0, #4]
{
   1785e:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   17860:	428b      	cmp	r3, r1
{
   17862:	4604      	mov	r4, r0
   17864:	460d      	mov	r5, r1
	void *data = buf->data;
   17866:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   17868:	d20a      	bcs.n	17880 <net_buf_simple_pull_mem+0x24>
   1786a:	4909      	ldr	r1, [pc, #36]	; (17890 <net_buf_simple_pull_mem+0x34>)
   1786c:	4809      	ldr	r0, [pc, #36]	; (17894 <net_buf_simple_pull_mem+0x38>)
   1786e:	f44f 628e 	mov.w	r2, #1136	; 0x470
   17872:	f005 f891 	bl	1c998 <printk>
   17876:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1787a:	4805      	ldr	r0, [pc, #20]	; (17890 <net_buf_simple_pull_mem+0x34>)
   1787c:	f005 fb32 	bl	1cee4 <assert_post_action>
	buf->len -= len;
   17880:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   17882:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   17884:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   17886:	4429      	add	r1, r5
}
   17888:	4630      	mov	r0, r6
	buf->len -= len;
   1788a:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1788c:	6021      	str	r1, [r4, #0]
}
   1788e:	bd70      	pop	{r4, r5, r6, pc}
   17890:	00025b45 	.word	0x00025b45
   17894:	00022dd6 	.word	0x00022dd6

00017898 <net_buf_simple_add>:
{
   17898:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1789a:	6803      	ldr	r3, [r0, #0]
   1789c:	8886      	ldrh	r6, [r0, #4]
   1789e:	4604      	mov	r4, r0
   178a0:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   178a2:	f008 feb9 	bl	20618 <net_buf_simple_tailroom>
   178a6:	4288      	cmp	r0, r1
{
   178a8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   178aa:	d20a      	bcs.n	178c2 <net_buf_simple_add+0x2a>
   178ac:	4907      	ldr	r1, [pc, #28]	; (178cc <net_buf_simple_add+0x34>)
   178ae:	4808      	ldr	r0, [pc, #32]	; (178d0 <net_buf_simple_add+0x38>)
   178b0:	f240 3215 	movw	r2, #789	; 0x315
   178b4:	f005 f870 	bl	1c998 <printk>
   178b8:	f240 3115 	movw	r1, #789	; 0x315
   178bc:	4803      	ldr	r0, [pc, #12]	; (178cc <net_buf_simple_add+0x34>)
   178be:	f005 fb11 	bl	1cee4 <assert_post_action>
	buf->len += len;
   178c2:	88a1      	ldrh	r1, [r4, #4]
}
   178c4:	4630      	mov	r0, r6
	buf->len += len;
   178c6:	440d      	add	r5, r1
   178c8:	80a5      	strh	r5, [r4, #4]
}
   178ca:	bd70      	pop	{r4, r5, r6, pc}
   178cc:	00025b45 	.word	0x00025b45
   178d0:	00022dd6 	.word	0x00022dd6

000178d4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   178d4:	b570      	push	{r4, r5, r6, lr}
   178d6:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   178d8:	460c      	mov	r4, r1
	return port->data;
   178da:	68c5      	ldr	r5, [r0, #12]
   178dc:	b941      	cbnz	r1, 178f0 <gpio_nrfx_manage_callback+0x1c>
   178de:	491e      	ldr	r1, [pc, #120]	; (17958 <gpio_nrfx_manage_callback+0x84>)
   178e0:	481e      	ldr	r0, [pc, #120]	; (1795c <gpio_nrfx_manage_callback+0x88>)
   178e2:	2224      	movs	r2, #36	; 0x24
   178e4:	f005 f858 	bl	1c998 <printk>
   178e8:	2124      	movs	r1, #36	; 0x24
   178ea:	481b      	ldr	r0, [pc, #108]	; (17958 <gpio_nrfx_manage_callback+0x84>)
   178ec:	f005 fafa 	bl	1cee4 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   178f0:	6863      	ldr	r3, [r4, #4]
   178f2:	b943      	cbnz	r3, 17906 <gpio_nrfx_manage_callback+0x32>
   178f4:	4918      	ldr	r1, [pc, #96]	; (17958 <gpio_nrfx_manage_callback+0x84>)
   178f6:	4819      	ldr	r0, [pc, #100]	; (1795c <gpio_nrfx_manage_callback+0x88>)
   178f8:	2225      	movs	r2, #37	; 0x25
   178fa:	f005 f84d 	bl	1c998 <printk>
   178fe:	2125      	movs	r1, #37	; 0x25
   17900:	4815      	ldr	r0, [pc, #84]	; (17958 <gpio_nrfx_manage_callback+0x84>)
   17902:	f005 faef 	bl	1cee4 <assert_post_action>
	return list->head;
   17906:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   17908:	b15b      	cbz	r3, 17922 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1790a:	2200      	movs	r2, #0
   1790c:	429c      	cmp	r4, r3
   1790e:	d112      	bne.n	17936 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   17910:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   17912:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   17914:	b952      	cbnz	r2, 1792c <gpio_nrfx_manage_callback+0x58>
   17916:	42a1      	cmp	r1, r4
	list->head = node;
   17918:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1791a:	d100      	bne.n	1791e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1791c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1791e:	2300      	movs	r3, #0
   17920:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   17922:	b96e      	cbnz	r6, 17940 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   17924:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   17926:	bd70      	pop	{r4, r5, r6, pc}
   17928:	460b      	mov	r3, r1
   1792a:	e7ef      	b.n	1790c <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1792c:	42a1      	cmp	r1, r4
	parent->next = child;
   1792e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17930:	bf08      	it	eq
   17932:	60aa      	streq	r2, [r5, #8]
}
   17934:	e7f3      	b.n	1791e <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   17936:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17938:	461a      	mov	r2, r3
   1793a:	2900      	cmp	r1, #0
   1793c:	d1f4      	bne.n	17928 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1793e:	b13e      	cbz	r6, 17950 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   17940:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17942:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   17944:	6023      	str	r3, [r4, #0]
	list->head = node;
   17946:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17948:	2800      	cmp	r0, #0
   1794a:	d1eb      	bne.n	17924 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1794c:	60ac      	str	r4, [r5, #8]
}
   1794e:	e7ea      	b.n	17926 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   17950:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17954:	e7e7      	b.n	17926 <gpio_nrfx_manage_callback+0x52>
   17956:	bf00      	nop
   17958:	00025b71 	.word	0x00025b71
   1795c:	00022dd6 	.word	0x00022dd6

00017960 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17960:	6802      	ldr	r2, [r0, #0]
{
   17962:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   17964:	0953      	lsrs	r3, r2, #5
{
   17966:	4604      	mov	r4, r0
    switch (port)
   17968:	d029      	beq.n	179be <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1796a:	2b01      	cmp	r3, #1
   1796c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17970:	bf18      	it	ne
   17972:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   17974:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   17978:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1797a:	07db      	lsls	r3, r3, #31
   1797c:	d40a      	bmi.n	17994 <nrf_gpio_pin_port_decode+0x34>
   1797e:	4912      	ldr	r1, [pc, #72]	; (179c8 <nrf_gpio_pin_port_decode+0x68>)
   17980:	4812      	ldr	r0, [pc, #72]	; (179cc <nrf_gpio_pin_port_decode+0x6c>)
   17982:	f240 221a 	movw	r2, #538	; 0x21a
   17986:	f005 f807 	bl	1c998 <printk>
   1798a:	f240 211a 	movw	r1, #538	; 0x21a
   1798e:	480e      	ldr	r0, [pc, #56]	; (179c8 <nrf_gpio_pin_port_decode+0x68>)
   17990:	f005 faa8 	bl	1cee4 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   17994:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   17996:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1799a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1799c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1799e:	d00c      	beq.n	179ba <nrf_gpio_pin_port_decode+0x5a>
   179a0:	2b01      	cmp	r3, #1
   179a2:	d00f      	beq.n	179c4 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   179a4:	4908      	ldr	r1, [pc, #32]	; (179c8 <nrf_gpio_pin_port_decode+0x68>)
   179a6:	4809      	ldr	r0, [pc, #36]	; (179cc <nrf_gpio_pin_port_decode+0x6c>)
   179a8:	f240 221f 	movw	r2, #543	; 0x21f
   179ac:	f004 fff4 	bl	1c998 <printk>
   179b0:	f240 211f 	movw	r1, #543	; 0x21f
   179b4:	4804      	ldr	r0, [pc, #16]	; (179c8 <nrf_gpio_pin_port_decode+0x68>)
   179b6:	f005 fa95 	bl	1cee4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   179ba:	4805      	ldr	r0, [pc, #20]	; (179d0 <nrf_gpio_pin_port_decode+0x70>)
}
   179bc:	bd10      	pop	{r4, pc}
    switch (port)
   179be:	f04f 33ff 	mov.w	r3, #4294967295
   179c2:	e7d7      	b.n	17974 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   179c4:	4803      	ldr	r0, [pc, #12]	; (179d4 <nrf_gpio_pin_port_decode+0x74>)
   179c6:	e7f9      	b.n	179bc <nrf_gpio_pin_port_decode+0x5c>
   179c8:	00025b9e 	.word	0x00025b9e
   179cc:	00022dd6 	.word	0x00022dd6
   179d0:	40842500 	.word	0x40842500
   179d4:	40842800 	.word	0x40842800

000179d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   179d8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   179da:	4b09      	ldr	r3, [pc, #36]	; (17a00 <gpio_nrfx_init+0x28>)
   179dc:	781a      	ldrb	r2, [r3, #0]
   179de:	b96a      	cbnz	r2, 179fc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   179e0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   179e2:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   179e4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   179e6:	2105      	movs	r1, #5
   179e8:	f7f5 ff3c 	bl	d864 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   179ec:	202f      	movs	r0, #47	; 0x2f
   179ee:	f7f5 ff1b 	bl	d828 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   179f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   179f6:	4b03      	ldr	r3, [pc, #12]	; (17a04 <gpio_nrfx_init+0x2c>)
   179f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   179fc:	2000      	movs	r0, #0
   179fe:	bd08      	pop	{r3, pc}
   17a00:	2000b74a 	.word	0x2000b74a
   17a04:	4002f000 	.word	0x4002f000

00017a08 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   17a08:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   17a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17a10:	4680      	mov	r8, r0
   17a12:	460e      	mov	r6, r1
   17a14:	4617      	mov	r7, r2
   17a16:	4699      	mov	r9, r3
	return port->data;
   17a18:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   17a1a:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   17a1e:	f040 80ab 	bne.w	17b78 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17a22:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17a24:	a801      	add	r0, sp, #4
   17a26:	7a1b      	ldrb	r3, [r3, #8]
   17a28:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   17a2c:	9301      	str	r3, [sp, #4]
   17a2e:	f7ff ff97 	bl	17960 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17a32:	9b01      	ldr	r3, [sp, #4]
   17a34:	3380      	adds	r3, #128	; 0x80
   17a36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   17a3a:	07d8      	lsls	r0, r3, #31
   17a3c:	f100 80bb 	bmi.w	17bb6 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17a40:	2101      	movs	r1, #1
   17a42:	68e3      	ldr	r3, [r4, #12]
   17a44:	40b1      	lsls	r1, r6
   17a46:	4319      	orrs	r1, r3
   17a48:	60e1      	str	r1, [r4, #12]
   17a4a:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17a4c:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   17a4e:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17a50:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   17a52:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   17a56:	bf0c      	ite	eq
   17a58:	430b      	orreq	r3, r1
   17a5a:	438b      	bicne	r3, r1
   17a5c:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   17a5e:	69a3      	ldr	r3, [r4, #24]
   17a60:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   17a64:	bf0c      	ite	eq
   17a66:	430b      	orreq	r3, r1
   17a68:	438b      	bicne	r3, r1
   17a6a:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17a6c:	6923      	ldr	r3, [r4, #16]
   17a6e:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   17a72:	bf0c      	ite	eq
   17a74:	4319      	orreq	r1, r3
   17a76:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17a7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17a7e:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17a80:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   17a82:	4a4e      	ldr	r2, [pc, #312]	; (17bbc <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   17a84:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   17a88:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   17a8c:	f8d8 700c 	ldr.w	r7, [r8, #12]
   17a90:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17a92:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   17a96:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   17a9a:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   17a9e:	428d      	cmp	r5, r1
   17aa0:	d175      	bne.n	17b8e <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   17aa2:	fa23 f100 	lsr.w	r1, r3, r0
   17aa6:	07c9      	lsls	r1, r1, #31
   17aa8:	d571      	bpl.n	17b8e <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   17aaa:	0083      	lsls	r3, r0, #2
   17aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17ab0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17ab4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   17ab8:	f021 0101 	bic.w	r1, r1, #1
   17abc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   17ac0:	2301      	movs	r3, #1
   17ac2:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   17ac4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   17ac8:	b2c0      	uxtb	r0, r0
   17aca:	f001 fa8b 	bl	18fe4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   17ace:	4628      	mov	r0, r5
   17ad0:	2100      	movs	r1, #0
   17ad2:	f008 fde5 	bl	206a0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   17ad6:	68f8      	ldr	r0, [r7, #12]
   17ad8:	40f0      	lsrs	r0, r6
   17ada:	f010 0001 	ands.w	r0, r0, #1
   17ade:	d048      	beq.n	17b72 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   17ae0:	6978      	ldr	r0, [r7, #20]
   17ae2:	40f0      	lsrs	r0, r6
   17ae4:	f010 0401 	ands.w	r4, r0, #1
   17ae8:	d059      	beq.n	17b9e <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   17aea:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17aec:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   17aee:	40f3      	lsrs	r3, r6
   17af0:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17af2:	bf57      	itett	pl
   17af4:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   17af6:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17af8:	fa21 f606 	lsrpl.w	r6, r1, r6
   17afc:	f006 0601 	andpl.w	r6, r6, #1
   17b00:	bf5c      	itt	pl
   17b02:	f1c6 0602 	rsbpl	r6, r6, #2
   17b06:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17b08:	f001 fa8c 	bl	19024 <nrfx_gpiote_channel_alloc>
   17b0c:	4b2c      	ldr	r3, [pc, #176]	; (17bc0 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   17b0e:	4298      	cmp	r0, r3
   17b10:	d142      	bne.n	17b98 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17b12:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   17b14:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17b18:	022d      	lsls	r5, r5, #8
   17b1a:	008b      	lsls	r3, r1, #2
   17b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17b20:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17b24:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17b28:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17b2c:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   17b30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   17b34:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17b38:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17b3c:	4315      	orrs	r5, r2
   17b3e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   17b42:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   17b46:	4b1f      	ldr	r3, [pc, #124]	; (17bc4 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   17b48:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17b4a:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   17b4c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   17b50:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17b52:	008b      	lsls	r3, r1, #2
   17b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17b58:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17b5c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17b60:	f042 0201 	orr.w	r2, r2, #1
   17b64:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   17b68:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   17b6a:	4a14      	ldr	r2, [pc, #80]	; (17bbc <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   17b6c:	408b      	lsls	r3, r1
   17b6e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17b72:	b003      	add	sp, #12
   17b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17b78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   17b7c:	f47f af60 	bne.w	17a40 <gpio_nrfx_pin_interrupt_configure+0x38>
   17b80:	2101      	movs	r1, #1
   17b82:	fa01 f306 	lsl.w	r3, r1, r6
   17b86:	68e1      	ldr	r1, [r4, #12]
   17b88:	ea21 0103 	bic.w	r1, r1, r3
   17b8c:	e75c      	b.n	17a48 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17b8e:	3001      	adds	r0, #1
   17b90:	2808      	cmp	r0, #8
   17b92:	f47f af7e 	bne.w	17a92 <gpio_nrfx_pin_interrupt_configure+0x8a>
   17b96:	e79a      	b.n	17ace <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   17b98:	f06f 0012 	mvn.w	r0, #18
   17b9c:	e7e9      	b.n	17b72 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17b9e:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17ba0:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17ba2:	40f1      	lsrs	r1, r6
   17ba4:	f001 0101 	and.w	r1, r1, #1
   17ba8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17bac:	b2c9      	uxtb	r1, r1
   17bae:	f008 fd77 	bl	206a0 <nrf_gpio_cfg_sense_set>
	int res = 0;
   17bb2:	4620      	mov	r0, r4
   17bb4:	e7dd      	b.n	17b72 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   17bb6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17bba:	e7da      	b.n	17b72 <gpio_nrfx_pin_interrupt_configure+0x16a>
   17bbc:	4002f000 	.word	0x4002f000
   17bc0:	0bad0000 	.word	0x0bad0000
   17bc4:	4002f100 	.word	0x4002f100

00017bc8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17bc8:	4b2e      	ldr	r3, [pc, #184]	; (17c84 <gpio_nrfx_config+0xbc>)
{
   17bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17bcc:	4c2e      	ldr	r4, [pc, #184]	; (17c88 <gpio_nrfx_config+0xc0>)
   17bce:	4013      	ands	r3, r2
   17bd0:	42a3      	cmp	r3, r4
	return port->config;
   17bd2:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17bd4:	d044      	beq.n	17c60 <gpio_nrfx_config+0x98>
   17bd6:	d80e      	bhi.n	17bf6 <gpio_nrfx_config+0x2e>
   17bd8:	2b06      	cmp	r3, #6
   17bda:	d043      	beq.n	17c64 <gpio_nrfx_config+0x9c>
   17bdc:	d806      	bhi.n	17bec <gpio_nrfx_config+0x24>
   17bde:	2b00      	cmp	r3, #0
   17be0:	d040      	beq.n	17c64 <gpio_nrfx_config+0x9c>
   17be2:	2b02      	cmp	r3, #2
   17be4:	d040      	beq.n	17c68 <gpio_nrfx_config+0xa0>
   17be6:	f06f 0015 	mvn.w	r0, #21
   17bea:	e037      	b.n	17c5c <gpio_nrfx_config+0x94>
   17bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17bf0:	d1f9      	bne.n	17be6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   17bf2:	2401      	movs	r4, #1
   17bf4:	e009      	b.n	17c0a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17bf6:	4c25      	ldr	r4, [pc, #148]	; (17c8c <gpio_nrfx_config+0xc4>)
   17bf8:	42a3      	cmp	r3, r4
   17bfa:	d037      	beq.n	17c6c <gpio_nrfx_config+0xa4>
   17bfc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   17c00:	d036      	beq.n	17c70 <gpio_nrfx_config+0xa8>
   17c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17c06:	d1ee      	bne.n	17be6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   17c08:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   17c0a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17c0c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   17c10:	bf4c      	ite	mi
   17c12:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   17c14:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17c18:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17c1c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   17c1e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17c22:	d507      	bpl.n	17c34 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17c24:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17c26:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17c2a:	d523      	bpl.n	17c74 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   17c2c:	2301      	movs	r3, #1
   17c2e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   17c30:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   17c34:	7a03      	ldrb	r3, [r0, #8]
   17c36:	f001 011f 	and.w	r1, r1, #31
   17c3a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17c3e:	a801      	add	r0, sp, #4
   17c40:	9101      	str	r1, [sp, #4]
   17c42:	f7ff fe8d 	bl	17960 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17c46:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   17c48:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   17c4c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   17c50:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17c54:	3280      	adds	r2, #128	; 0x80
   17c56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   17c5a:	2000      	movs	r0, #0
}
   17c5c:	b003      	add	sp, #12
   17c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   17c60:	2407      	movs	r4, #7
   17c62:	e7d2      	b.n	17c0a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17c64:	461c      	mov	r4, r3
   17c66:	e7d0      	b.n	17c0a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   17c68:	2404      	movs	r4, #4
   17c6a:	e7ce      	b.n	17c0a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   17c6c:	2405      	movs	r4, #5
   17c6e:	e7cc      	b.n	17c0a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   17c70:	2403      	movs	r4, #3
   17c72:	e7ca      	b.n	17c0a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   17c74:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   17c76:	bf42      	ittt	mi
   17c78:	2301      	movmi	r3, #1
   17c7a:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   17c7c:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   17c80:	e7d8      	b.n	17c34 <gpio_nrfx_config+0x6c>
   17c82:	bf00      	nop
   17c84:	00f00006 	.word	0x00f00006
   17c88:	00100006 	.word	0x00100006
   17c8c:	00400002 	.word	0x00400002

00017c90 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   17c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17c94:	460f      	mov	r7, r1
   17c96:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17c98:	4604      	mov	r4, r0
   17c9a:	b1e0      	cbz	r0, 17cd6 <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   17c9c:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   17c9e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 17cdc <gpio_fire_callbacks.isra.0+0x4c>
   17ca2:	f8df 903c 	ldr.w	r9, [pc, #60]	; 17ce0 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   17ca6:	68a3      	ldr	r3, [r4, #8]
   17ca8:	421e      	tst	r6, r3
   17caa:	d010      	beq.n	17cce <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   17cac:	6863      	ldr	r3, [r4, #4]
   17cae:	b943      	cbnz	r3, 17cc2 <gpio_fire_callbacks.isra.0+0x32>
   17cb0:	4641      	mov	r1, r8
   17cb2:	4648      	mov	r0, r9
   17cb4:	2245      	movs	r2, #69	; 0x45
   17cb6:	f004 fe6f 	bl	1c998 <printk>
   17cba:	2145      	movs	r1, #69	; 0x45
   17cbc:	4640      	mov	r0, r8
   17cbe:	f005 f911 	bl	1cee4 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   17cc2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   17cc6:	4621      	mov	r1, r4
   17cc8:	4638      	mov	r0, r7
   17cca:	4032      	ands	r2, r6
   17ccc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17cce:	b115      	cbz	r5, 17cd6 <gpio_fire_callbacks.isra.0+0x46>
   17cd0:	462c      	mov	r4, r5
   17cd2:	682d      	ldr	r5, [r5, #0]
   17cd4:	e7e7      	b.n	17ca6 <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   17cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17cda:	bf00      	nop
   17cdc:	00025b71 	.word	0x00025b71
   17ce0:	00022dd6 	.word	0x00022dd6

00017ce4 <gpiote_event_handler>:
{
   17ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17ce6:	2600      	movs	r6, #0
   17ce8:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17cec:	4d28      	ldr	r5, [pc, #160]	; (17d90 <gpiote_event_handler+0xac>)
   17cee:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   17cf2:	b15c      	cbz	r4, 17d0c <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   17cf4:	4827      	ldr	r0, [pc, #156]	; (17d94 <gpiote_event_handler+0xb0>)
   17cf6:	f008 fd0c 	bl	20712 <check_level_trigger_pins>
		fired_triggers[0] =
   17cfa:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   17cfc:	4826      	ldr	r0, [pc, #152]	; (17d98 <gpiote_event_handler+0xb4>)
   17cfe:	f008 fd08 	bl	20712 <check_level_trigger_pins>
		fired_triggers[1] =
   17d02:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17d04:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   17d08:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   17d0c:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17d0e:	2601      	movs	r6, #1
   17d10:	4694      	mov	ip, r2
{
   17d12:	4922      	ldr	r1, [pc, #136]	; (17d9c <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   17d14:	4d1e      	ldr	r5, [pc, #120]	; (17d90 <gpiote_event_handler+0xac>)
   17d16:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17d1a:	fa06 f002 	lsl.w	r0, r6, r2
   17d1e:	4218      	tst	r0, r3
   17d20:	d016      	beq.n	17d50 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17d22:	680b      	ldr	r3, [r1, #0]
   17d24:	b1a3      	cbz	r3, 17d50 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17d26:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   17d2a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   17d2e:	af02      	add	r7, sp, #8
   17d30:	f3c3 3040 	ubfx	r0, r3, #13, #1
   17d34:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   17d38:	f850 7c08 	ldr.w	r7, [r0, #-8]
   17d3c:	f3c3 2304 	ubfx	r3, r3, #8, #5
   17d40:	fa06 f303 	lsl.w	r3, r6, r3
   17d44:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17d46:	f8c1 c000 	str.w	ip, [r1]
   17d4a:	f840 3c08 	str.w	r3, [r0, #-8]
   17d4e:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17d50:	3201      	adds	r2, #1
   17d52:	2a08      	cmp	r2, #8
   17d54:	f101 0104 	add.w	r1, r1, #4
   17d58:	d1dd      	bne.n	17d16 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   17d5a:	9a00      	ldr	r2, [sp, #0]
   17d5c:	b122      	cbz	r2, 17d68 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   17d5e:	4b10      	ldr	r3, [pc, #64]	; (17da0 <gpiote_event_handler+0xbc>)
   17d60:	490c      	ldr	r1, [pc, #48]	; (17d94 <gpiote_event_handler+0xb0>)
   17d62:	6858      	ldr	r0, [r3, #4]
   17d64:	f7ff ff94 	bl	17c90 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   17d68:	9a01      	ldr	r2, [sp, #4]
   17d6a:	b122      	cbz	r2, 17d76 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   17d6c:	4b0d      	ldr	r3, [pc, #52]	; (17da4 <gpiote_event_handler+0xc0>)
   17d6e:	490a      	ldr	r1, [pc, #40]	; (17d98 <gpiote_event_handler+0xb4>)
   17d70:	6858      	ldr	r0, [r3, #4]
   17d72:	f7ff ff8d 	bl	17c90 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   17d76:	b144      	cbz	r4, 17d8a <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   17d78:	4806      	ldr	r0, [pc, #24]	; (17d94 <gpiote_event_handler+0xb0>)
   17d7a:	f008 fca4 	bl	206c6 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   17d7e:	4806      	ldr	r0, [pc, #24]	; (17d98 <gpiote_event_handler+0xb4>)
}
   17d80:	b003      	add	sp, #12
   17d82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   17d86:	f008 bc9e 	b.w	206c6 <cfg_level_pins>
}
   17d8a:	b003      	add	sp, #12
   17d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d8e:	bf00      	nop
   17d90:	4002f000 	.word	0x4002f000
   17d94:	20008484 	.word	0x20008484
   17d98:	20008494 	.word	0x20008494
   17d9c:	4002f100 	.word	0x4002f100
   17da0:	20009d9c 	.word	0x20009d9c
   17da4:	20009db8 	.word	0x20009db8

00017da8 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   17da8:	4b02      	ldr	r3, [pc, #8]	; (17db4 <vipm_nrf_1_register_callback+0xc>)
   17daa:	6059      	str	r1, [r3, #4]
   17dac:	645a      	str	r2, [r3, #68]	; 0x44
   17dae:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   17db2:	4770      	bx	lr
   17db4:	20009ddc 	.word	0x20009ddc

00017db8 <vipm_nrf_0_set_enabled>:
   17db8:	b508      	push	{r3, lr}
   17dba:	2145      	movs	r1, #69	; 0x45
   17dbc:	4802      	ldr	r0, [pc, #8]	; (17dc8 <vipm_nrf_0_set_enabled+0x10>)
   17dbe:	f004 fdeb 	bl	1c998 <printk>
   17dc2:	f06f 0015 	mvn.w	r0, #21
   17dc6:	bd08      	pop	{r3, pc}
   17dc8:	00025bdf 	.word	0x00025bdf

00017dcc <vipm_nrf_0_register_callback>:
   17dcc:	2157      	movs	r1, #87	; 0x57
   17dce:	4801      	ldr	r0, [pc, #4]	; (17dd4 <vipm_nrf_0_register_callback+0x8>)
   17dd0:	f004 bde2 	b.w	1c998 <printk>
   17dd4:	00025c00 	.word	0x00025c00

00017dd8 <vipm_nrf_1_send>:
   17dd8:	b508      	push	{r3, lr}
   17dda:	2145      	movs	r1, #69	; 0x45
   17ddc:	4802      	ldr	r0, [pc, #8]	; (17de8 <vipm_nrf_1_send+0x10>)
   17dde:	f004 fddb 	bl	1c998 <printk>
   17de2:	f06f 0015 	mvn.w	r0, #21
   17de6:	bd08      	pop	{r3, pc}
   17de8:	00025c37 	.word	0x00025c37

00017dec <vipm_nrf_init>:
{
   17dec:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   17dee:	4d0b      	ldr	r5, [pc, #44]	; (17e1c <vipm_nrf_init+0x30>)
   17df0:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   17df4:	b97c      	cbnz	r4, 17e16 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   17df6:	4a0a      	ldr	r2, [pc, #40]	; (17e20 <vipm_nrf_init+0x34>)
   17df8:	490a      	ldr	r1, [pc, #40]	; (17e24 <vipm_nrf_init+0x38>)
   17dfa:	4620      	mov	r0, r4
   17dfc:	f001 f94a 	bl	19094 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   17e00:	4622      	mov	r2, r4
   17e02:	2101      	movs	r1, #1
   17e04:	202a      	movs	r0, #42	; 0x2a
   17e06:	f7f5 fd2d 	bl	d864 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   17e0a:	4807      	ldr	r0, [pc, #28]	; (17e28 <vipm_nrf_init+0x3c>)
   17e0c:	f001 f968 	bl	190e0 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   17e10:	2301      	movs	r3, #1
   17e12:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   17e16:	2000      	movs	r0, #0
   17e18:	bd38      	pop	{r3, r4, r5, pc}
   17e1a:	bf00      	nop
   17e1c:	20009ddc 	.word	0x20009ddc
   17e20:	20009dd4 	.word	0x20009dd4
   17e24:	00017e2d 	.word	0x00017e2d
   17e28:	00022488 	.word	0x00022488

00017e2c <vipm_dispatcher>:
{
   17e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17e30:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   17e32:	4f17      	ldr	r7, [pc, #92]	; (17e90 <vipm_dispatcher+0x64>)
   17e34:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17e94 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17e38:	4e17      	ldr	r6, [pc, #92]	; (17e98 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   17e3a:	b90d      	cbnz	r5, 17e40 <vipm_dispatcher+0x14>
}
   17e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   17e40:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   17e44:	b30c      	cbz	r4, 17e8a <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   17e46:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   17e4a:	2b0f      	cmp	r3, #15
   17e4c:	461c      	mov	r4, r3
   17e4e:	dd08      	ble.n	17e62 <vipm_dispatcher+0x36>
   17e50:	4639      	mov	r1, r7
   17e52:	4640      	mov	r0, r8
   17e54:	2283      	movs	r2, #131	; 0x83
   17e56:	f004 fd9f 	bl	1c998 <printk>
   17e5a:	2183      	movs	r1, #131	; 0x83
   17e5c:	4638      	mov	r0, r7
   17e5e:	f005 f841 	bl	1cee4 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   17e62:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17e64:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   17e68:	40a3      	lsls	r3, r4
   17e6a:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17e6e:	f1b9 0f00 	cmp.w	r9, #0
   17e72:	d0e2      	beq.n	17e3a <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   17e74:	2300      	movs	r3, #0
   17e76:	f104 0110 	add.w	r1, r4, #16
   17e7a:	3420      	adds	r4, #32
   17e7c:	461a      	mov	r2, r3
   17e7e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   17e82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   17e86:	47c8      	blx	r9
   17e88:	e7d7      	b.n	17e3a <vipm_dispatcher+0xe>
    return 32U;
   17e8a:	2420      	movs	r4, #32
   17e8c:	e7e0      	b.n	17e50 <vipm_dispatcher+0x24>
   17e8e:	bf00      	nop
   17e90:	00025c58 	.word	0x00025c58
   17e94:	00022dd6 	.word	0x00022dd6
   17e98:	20009ddc 	.word	0x20009ddc

00017e9c <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   17e9c:	2a10      	cmp	r2, #16
   17e9e:	b508      	push	{r3, lr}
   17ea0:	d810      	bhi.n	17ec4 <vipm_nrf_0_send+0x28>
   17ea2:	b11a      	cbz	r2, 17eac <vipm_nrf_0_send+0x10>
   17ea4:	2157      	movs	r1, #87	; 0x57
   17ea6:	4809      	ldr	r0, [pc, #36]	; (17ecc <vipm_nrf_0_send+0x30>)
   17ea8:	f004 fd76 	bl	1c998 <printk>
   17eac:	9b02      	ldr	r3, [sp, #8]
   17eae:	2b00      	cmp	r3, #0
   17eb0:	dd03      	ble.n	17eba <vipm_nrf_0_send+0x1e>
   17eb2:	2157      	movs	r1, #87	; 0x57
   17eb4:	4806      	ldr	r0, [pc, #24]	; (17ed0 <vipm_nrf_0_send+0x34>)
   17eb6:	f004 fd6f 	bl	1c998 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17eba:	2201      	movs	r2, #1
   17ebc:	2000      	movs	r0, #0
   17ebe:	4b05      	ldr	r3, [pc, #20]	; (17ed4 <vipm_nrf_0_send+0x38>)
   17ec0:	601a      	str	r2, [r3, #0]
   17ec2:	bd08      	pop	{r3, pc}
   17ec4:	f06f 0015 	mvn.w	r0, #21
   17ec8:	e7fb      	b.n	17ec2 <vipm_nrf_0_send+0x26>
   17eca:	bf00      	nop
   17ecc:	00025c86 	.word	0x00025c86
   17ed0:	00025cbf 	.word	0x00025cbf
   17ed4:	4002a000 	.word	0x4002a000

00017ed8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   17ed8:	4b02      	ldr	r3, [pc, #8]	; (17ee4 <flash_nrf_pages_layout+0xc>)
   17eda:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   17edc:	2301      	movs	r3, #1
   17ede:	6013      	str	r3, [r2, #0]
}
   17ee0:	4770      	bx	lr
   17ee2:	bf00      	nop
   17ee4:	20009ea0 	.word	0x20009ea0

00017ee8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   17ee8:	4800      	ldr	r0, [pc, #0]	; (17eec <flash_nrf_get_parameters+0x4>)
   17eea:	4770      	bx	lr
   17eec:	0002254c 	.word	0x0002254c

00017ef0 <flash_nrf_read>:
{
   17ef0:	b570      	push	{r4, r5, r6, lr}
   17ef2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   17ef4:	4619      	mov	r1, r3
   17ef6:	4628      	mov	r0, r5
{
   17ef8:	4616      	mov	r6, r2
   17efa:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   17efc:	f008 fc46 	bl	2078c <is_regular_addr_valid>
   17f00:	b940      	cbnz	r0, 17f14 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17f02:	480d      	ldr	r0, [pc, #52]	; (17f38 <flash_nrf_read+0x48>)
   17f04:	4623      	mov	r3, r4
   17f06:	462a      	mov	r2, r5
   17f08:	2145      	movs	r1, #69	; 0x45
   17f0a:	f004 fd45 	bl	1c998 <printk>
   17f0e:	f06f 0015 	mvn.w	r0, #21
}
   17f12:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   17f14:	b16c      	cbz	r4, 17f32 <flash_nrf_read+0x42>
	if (addr < PM_APP_ADDRESS) {
   17f16:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return spm_request_read(data, addr, len);
   17f1a:	4622      	mov	r2, r4
   17f1c:	4629      	mov	r1, r5
   17f1e:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   17f20:	da03      	bge.n	17f2a <flash_nrf_read+0x3a>
}
   17f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   17f26:	f005 bc38 	b.w	1d79a <spm_request_read>
	memcpy(data, (void *)addr, len);
   17f2a:	f006 f9ed 	bl	1e308 <memcpy>
	return 0;
   17f2e:	2000      	movs	r0, #0
   17f30:	e7ef      	b.n	17f12 <flash_nrf_read+0x22>
		return 0;
   17f32:	4620      	mov	r0, r4
   17f34:	e7ed      	b.n	17f12 <flash_nrf_read+0x22>
   17f36:	bf00      	nop
   17f38:	00025d02 	.word	0x00025d02

00017f3c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   17f3c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17f3e:	2201      	movs	r2, #1
   17f40:	4806      	ldr	r0, [pc, #24]	; (17f5c <nrf_flash_init+0x20>)
   17f42:	4611      	mov	r1, r2
   17f44:	f009 fa90 	bl	21468 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   17f48:	f008 fdf2 	bl	20b30 <nrfx_nvmc_flash_page_count_get>
   17f4c:	4c04      	ldr	r4, [pc, #16]	; (17f60 <nrf_flash_init+0x24>)
   17f4e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   17f50:	f008 fdeb 	bl	20b2a <nrfx_nvmc_flash_page_size_get>
   17f54:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   17f56:	2000      	movs	r0, #0
   17f58:	bd10      	pop	{r4, pc}
   17f5a:	bf00      	nop
   17f5c:	20009ea8 	.word	0x20009ea8
   17f60:	20009ea0 	.word	0x20009ea0

00017f64 <flash_nrf_erase>:
{
   17f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f66:	460e      	mov	r6, r1
   17f68:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17f6a:	f008 fdde 	bl	20b2a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   17f6e:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17f70:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   17f72:	4630      	mov	r0, r6
   17f74:	f008 fc0a 	bl	2078c <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   17f78:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   17f7a:	b348      	cbz	r0, 17fd0 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   17f7c:	fbb6 f3f5 	udiv	r3, r6, r5
   17f80:	fb05 6313 	mls	r3, r5, r3, r6
   17f84:	b923      	cbnz	r3, 17f90 <flash_nrf_erase+0x2c>
   17f86:	fbb4 f0f5 	udiv	r0, r4, r5
   17f8a:	fb05 4010 	mls	r0, r5, r0, r4
   17f8e:	b140      	cbz	r0, 17fa2 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   17f90:	4623      	mov	r3, r4
   17f92:	4632      	mov	r2, r6
   17f94:	2145      	movs	r1, #69	; 0x45
   17f96:	4811      	ldr	r0, [pc, #68]	; (17fdc <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17f98:	f004 fcfe 	bl	1c998 <printk>
		return -EINVAL;
   17f9c:	f06f 0015 	mvn.w	r0, #21
   17fa0:	e015      	b.n	17fce <flash_nrf_erase+0x6a>
		if (!n_pages) {
   17fa2:	42a5      	cmp	r5, r4
   17fa4:	d813      	bhi.n	17fce <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   17fa6:	f04f 32ff 	mov.w	r2, #4294967295
   17faa:	f04f 33ff 	mov.w	r3, #4294967295
   17fae:	480c      	ldr	r0, [pc, #48]	; (17fe0 <flash_nrf_erase+0x7c>)
   17fb0:	f003 fb6e 	bl	1b690 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17fb4:	f008 fdb9 	bl	20b2a <nrfx_nvmc_flash_page_size_get>
   17fb8:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   17fba:	4638      	mov	r0, r7
   17fbc:	f001 f94c 	bl	19258 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   17fc0:	1b64      	subs	r4, r4, r5
   17fc2:	442f      	add	r7, r5
   17fc4:	d1f9      	bne.n	17fba <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   17fc6:	4806      	ldr	r0, [pc, #24]	; (17fe0 <flash_nrf_erase+0x7c>)
   17fc8:	f003 fb26 	bl	1b618 <z_impl_k_sem_give>
	return ret;
   17fcc:	4620      	mov	r0, r4
}
   17fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17fd0:	4623      	mov	r3, r4
   17fd2:	4632      	mov	r2, r6
   17fd4:	2145      	movs	r1, #69	; 0x45
   17fd6:	4803      	ldr	r0, [pc, #12]	; (17fe4 <flash_nrf_erase+0x80>)
   17fd8:	e7de      	b.n	17f98 <flash_nrf_erase+0x34>
   17fda:	bf00      	nop
   17fdc:	00025d24 	.word	0x00025d24
   17fe0:	20009ea8 	.word	0x20009ea8
   17fe4:	00025d02 	.word	0x00025d02

00017fe8 <flash_nrf_write>:
{
   17fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fea:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   17fec:	4619      	mov	r1, r3
   17fee:	4630      	mov	r0, r6
{
   17ff0:	4617      	mov	r7, r2
   17ff2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   17ff4:	f008 fbca 	bl	2078c <is_regular_addr_valid>
   17ff8:	b940      	cbnz	r0, 1800c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17ffa:	4623      	mov	r3, r4
   17ffc:	4632      	mov	r2, r6
   17ffe:	2145      	movs	r1, #69	; 0x45
   18000:	4817      	ldr	r0, [pc, #92]	; (18060 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   18002:	f004 fcc9 	bl	1c998 <printk>
		return -EINVAL;
   18006:	f06f 0015 	mvn.w	r0, #21
}
   1800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   1800c:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   18010:	f015 0503 	ands.w	r5, r5, #3
   18014:	d004      	beq.n	18020 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   18016:	4623      	mov	r3, r4
   18018:	4632      	mov	r2, r6
   1801a:	2145      	movs	r1, #69	; 0x45
   1801c:	4811      	ldr	r0, [pc, #68]	; (18064 <flash_nrf_write+0x7c>)
   1801e:	e7f0      	b.n	18002 <flash_nrf_write+0x1a>
	if (!len) {
   18020:	b1dc      	cbz	r4, 1805a <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   18022:	f04f 32ff 	mov.w	r2, #4294967295
   18026:	f04f 33ff 	mov.w	r3, #4294967295
   1802a:	480f      	ldr	r0, [pc, #60]	; (18068 <flash_nrf_write+0x80>)
   1802c:	f003 fb30 	bl	1b690 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   18030:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   18034:	42ac      	cmp	r4, r5
   18036:	eb05 0006 	add.w	r0, r5, r6
   1803a:	d109      	bne.n	18050 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1803c:	4a0b      	ldr	r2, [pc, #44]	; (1806c <flash_nrf_write+0x84>)
   1803e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   18042:	07db      	lsls	r3, r3, #31
   18044:	d5fb      	bpl.n	1803e <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   18046:	4808      	ldr	r0, [pc, #32]	; (18068 <flash_nrf_write+0x80>)
   18048:	f003 fae6 	bl	1b618 <z_impl_k_sem_give>
	return ret;
   1804c:	2000      	movs	r0, #0
}
   1804e:	e7dc      	b.n	1800a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   18050:	5979      	ldr	r1, [r7, r5]
   18052:	f001 f931 	bl	192b8 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   18056:	3504      	adds	r5, #4
}
   18058:	e7ec      	b.n	18034 <flash_nrf_write+0x4c>
		return 0;
   1805a:	4620      	mov	r0, r4
   1805c:	e7d5      	b.n	1800a <flash_nrf_write+0x22>
   1805e:	bf00      	nop
   18060:	00025d02 	.word	0x00025d02
   18064:	00025d48 	.word	0x00025d48
   18068:	20009ea8 	.word	0x20009ea8
   1806c:	40039000 	.word	0x40039000

00018070 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   18070:	6802      	ldr	r2, [r0, #0]
{
   18072:	b510      	push	{r4, lr}
    switch (port)
   18074:	0953      	lsrs	r3, r2, #5
{
   18076:	4604      	mov	r4, r0
    switch (port)
   18078:	d029      	beq.n	180ce <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1807a:	2b01      	cmp	r3, #1
   1807c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18080:	bf18      	it	ne
   18082:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   18084:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   18088:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1808a:	07db      	lsls	r3, r3, #31
   1808c:	d40a      	bmi.n	180a4 <nrf_gpio_pin_port_decode+0x34>
   1808e:	4912      	ldr	r1, [pc, #72]	; (180d8 <nrf_gpio_pin_port_decode+0x68>)
   18090:	4812      	ldr	r0, [pc, #72]	; (180dc <nrf_gpio_pin_port_decode+0x6c>)
   18092:	f240 221a 	movw	r2, #538	; 0x21a
   18096:	f004 fc7f 	bl	1c998 <printk>
   1809a:	f240 211a 	movw	r1, #538	; 0x21a
   1809e:	480e      	ldr	r0, [pc, #56]	; (180d8 <nrf_gpio_pin_port_decode+0x68>)
   180a0:	f004 ff20 	bl	1cee4 <assert_post_action>
    uint32_t pin_number = *p_pin;
   180a4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   180a6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   180aa:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   180ac:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   180ae:	d00c      	beq.n	180ca <nrf_gpio_pin_port_decode+0x5a>
   180b0:	2b01      	cmp	r3, #1
   180b2:	d00f      	beq.n	180d4 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   180b4:	4908      	ldr	r1, [pc, #32]	; (180d8 <nrf_gpio_pin_port_decode+0x68>)
   180b6:	4809      	ldr	r0, [pc, #36]	; (180dc <nrf_gpio_pin_port_decode+0x6c>)
   180b8:	f240 221f 	movw	r2, #543	; 0x21f
   180bc:	f004 fc6c 	bl	1c998 <printk>
   180c0:	f240 211f 	movw	r1, #543	; 0x21f
   180c4:	4804      	ldr	r0, [pc, #16]	; (180d8 <nrf_gpio_pin_port_decode+0x68>)
   180c6:	f004 ff0d 	bl	1cee4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   180ca:	4805      	ldr	r0, [pc, #20]	; (180e0 <nrf_gpio_pin_port_decode+0x70>)
}
   180cc:	bd10      	pop	{r4, pc}
    switch (port)
   180ce:	f04f 33ff 	mov.w	r3, #4294967295
   180d2:	e7d7      	b.n	18084 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   180d4:	4803      	ldr	r0, [pc, #12]	; (180e4 <nrf_gpio_pin_port_decode+0x74>)
   180d6:	e7f9      	b.n	180cc <nrf_gpio_pin_port_decode+0x5c>
   180d8:	00025b9e 	.word	0x00025b9e
   180dc:	00022dd6 	.word	0x00022dd6
   180e0:	40842500 	.word	0x40842500
   180e4:	40842800 	.word	0x40842800

000180e8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   180e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   180ea:	794b      	ldrb	r3, [r1, #5]
   180ec:	2b01      	cmp	r3, #1
   180ee:	d02b      	beq.n	18148 <uarte_nrfx_configure+0x60>
   180f0:	2b03      	cmp	r3, #3
   180f2:	d126      	bne.n	18142 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   180f4:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   180f6:	798b      	ldrb	r3, [r1, #6]
   180f8:	2b03      	cmp	r3, #3
   180fa:	d122      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   180fc:	79cd      	ldrb	r5, [r1, #7]
   180fe:	b125      	cbz	r5, 1810a <uarte_nrfx_configure+0x22>
   18100:	2d01      	cmp	r5, #1
   18102:	d11e      	bne.n	18142 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   18104:	6843      	ldr	r3, [r0, #4]
   18106:	791b      	ldrb	r3, [r3, #4]
   18108:	b1db      	cbz	r3, 18142 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1810a:	790a      	ldrb	r2, [r1, #4]
   1810c:	2a01      	cmp	r2, #1
   1810e:	d01d      	beq.n	1814c <uarte_nrfx_configure+0x64>
   18110:	2a02      	cmp	r2, #2
   18112:	d01f      	beq.n	18154 <uarte_nrfx_configure+0x6c>
   18114:	b9aa      	cbnz	r2, 18142 <uarte_nrfx_configure+0x5a>
   18116:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   18118:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1811a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1811c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   18120:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   18122:	d06e      	beq.n	18202 <uarte_nrfx_configure+0x11a>
   18124:	d833      	bhi.n	1818e <uarte_nrfx_configure+0xa6>
   18126:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1812a:	d06d      	beq.n	18208 <uarte_nrfx_configure+0x120>
   1812c:	d81c      	bhi.n	18168 <uarte_nrfx_configure+0x80>
   1812e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   18132:	d06b      	beq.n	1820c <uarte_nrfx_configure+0x124>
   18134:	d810      	bhi.n	18158 <uarte_nrfx_configure+0x70>
   18136:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1813a:	d06a      	beq.n	18212 <uarte_nrfx_configure+0x12a>
   1813c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   18140:	d06a      	beq.n	18218 <uarte_nrfx_configure+0x130>
   18142:	f06f 0022 	mvn.w	r0, #34	; 0x22
   18146:	e05b      	b.n	18200 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   18148:	2700      	movs	r7, #0
   1814a:	e7d4      	b.n	180f6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1814c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   18150:	220e      	movs	r2, #14
   18152:	e7e1      	b.n	18118 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   18154:	2400      	movs	r4, #0
   18156:	e7fb      	b.n	18150 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   18158:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1815c:	d05f      	beq.n	1821e <uarte_nrfx_configure+0x136>
   1815e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   18162:	d1ee      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   18164:	4b38      	ldr	r3, [pc, #224]	; (18248 <uarte_nrfx_configure+0x160>)
   18166:	e03e      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18168:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1816c:	d05a      	beq.n	18224 <uarte_nrfx_configure+0x13c>
   1816e:	d807      	bhi.n	18180 <uarte_nrfx_configure+0x98>
   18170:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18174:	d058      	beq.n	18228 <uarte_nrfx_configure+0x140>
   18176:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1817a:	d1e2      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1817c:	4b33      	ldr	r3, [pc, #204]	; (1824c <uarte_nrfx_configure+0x164>)
   1817e:	e032      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18180:	f647 2c12 	movw	ip, #31250	; 0x7a12
   18184:	4563      	cmp	r3, ip
   18186:	d1dc      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18188:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1818c:	e02b      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1818e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   18192:	d04b      	beq.n	1822c <uarte_nrfx_configure+0x144>
   18194:	d813      	bhi.n	181be <uarte_nrfx_configure+0xd6>
   18196:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1819a:	d04a      	beq.n	18232 <uarte_nrfx_configure+0x14a>
   1819c:	d809      	bhi.n	181b2 <uarte_nrfx_configure+0xca>
   1819e:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   181a2:	4563      	cmp	r3, ip
   181a4:	d047      	beq.n	18236 <uarte_nrfx_configure+0x14e>
   181a6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   181aa:	d1ca      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   181ac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   181b0:	e019      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   181b2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   181b6:	d1c4      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   181b8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   181bc:	e013      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   181be:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   181c2:	d03b      	beq.n	1823c <uarte_nrfx_configure+0x154>
   181c4:	d809      	bhi.n	181da <uarte_nrfx_configure+0xf2>
   181c6:	f8df c088 	ldr.w	ip, [pc, #136]	; 18250 <uarte_nrfx_configure+0x168>
   181ca:	4563      	cmp	r3, ip
   181cc:	d039      	beq.n	18242 <uarte_nrfx_configure+0x15a>
   181ce:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   181d2:	d1b6      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   181d4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   181d8:	e005      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   181da:	f8df c078 	ldr.w	ip, [pc, #120]	; 18254 <uarte_nrfx_configure+0x16c>
   181de:	4563      	cmp	r3, ip
   181e0:	d1af      	bne.n	18142 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   181e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   181e6:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   181ea:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   181ec:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   181ee:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   181f0:	4322      	orrs	r2, r4
   181f2:	3304      	adds	r3, #4
   181f4:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   181f6:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   181fa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   181fe:	2000      	movs	r0, #0
}
   18200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   18202:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   18206:	e7ee      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18208:	4b13      	ldr	r3, [pc, #76]	; (18258 <uarte_nrfx_configure+0x170>)
   1820a:	e7ec      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1820c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18210:	e7e9      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   18212:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   18216:	e7e6      	b.n	181e6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18218:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1821c:	e7e3      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1821e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   18222:	e7e0      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   18224:	4b0d      	ldr	r3, [pc, #52]	; (1825c <uarte_nrfx_configure+0x174>)
   18226:	e7de      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   18228:	4b0d      	ldr	r3, [pc, #52]	; (18260 <uarte_nrfx_configure+0x178>)
   1822a:	e7dc      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1822c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   18230:	e7d9      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   18232:	4b0c      	ldr	r3, [pc, #48]	; (18264 <uarte_nrfx_configure+0x17c>)
   18234:	e7d7      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   18236:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1823a:	e7d4      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1823c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18240:	e7d1      	b.n	181e6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   18242:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18246:	e7ce      	b.n	181e6 <uarte_nrfx_configure+0xfe>
   18248:	0013b000 	.word	0x0013b000
   1824c:	004ea000 	.word	0x004ea000
   18250:	0003d090 	.word	0x0003d090
   18254:	000f4240 	.word	0x000f4240
   18258:	00275000 	.word	0x00275000
   1825c:	0075c000 	.word	0x0075c000
   18260:	003af000 	.word	0x003af000
   18264:	013a9000 	.word	0x013a9000

00018268 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   18268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1826c:	4606      	mov	r6, r0
   1826e:	4688      	mov	r8, r1
	return dev->data;
   18270:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18272:	f009 f909 	bl	21488 <k_is_in_isr>
   18276:	b9b8      	cbnz	r0, 182a8 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   18278:	4b28      	ldr	r3, [pc, #160]	; (1831c <uarte_nrfx_poll_out+0xb4>)
   1827a:	781b      	ldrb	r3, [r3, #0]
   1827c:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   18280:	6872      	ldr	r2, [r6, #4]
   18282:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   18284:	b193      	cbz	r3, 182ac <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   18286:	f04f 0320 	mov.w	r3, #32
   1828a:	f3ef 8411 	mrs	r4, BASEPRI
   1828e:	f383 8811 	msr	BASEPRI, r3
   18292:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   18296:	6870      	ldr	r0, [r6, #4]
   18298:	f008 fba2 	bl	209e0 <is_tx_ready.isra.0>
   1829c:	bb38      	cbnz	r0, 182ee <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1829e:	f384 8811 	msr	BASEPRI, r4
   182a2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   182a6:	e7ee      	b.n	18286 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   182a8:	2301      	movs	r3, #1
   182aa:	e7e9      	b.n	18280 <uarte_nrfx_poll_out+0x18>
   182ac:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   182ae:	6870      	ldr	r0, [r6, #4]
   182b0:	f008 fb96 	bl	209e0 <is_tx_ready.isra.0>
   182b4:	b970      	cbnz	r0, 182d4 <uarte_nrfx_poll_out+0x6c>
   182b6:	2001      	movs	r0, #1
   182b8:	f008 fc32 	bl	20b20 <nrfx_busy_wait>
   182bc:	3c01      	subs	r4, #1
   182be:	d1f6      	bne.n	182ae <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   182c0:	2100      	movs	r1, #0
   182c2:	2021      	movs	r0, #33	; 0x21
   182c4:	f003 f972 	bl	1b5ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   182c8:	e7f0      	b.n	182ac <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   182ca:	f384 8811 	msr	BASEPRI, r4
   182ce:	f3bf 8f6f 	isb	sy
}
   182d2:	e7f5      	b.n	182c0 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   182d4:	f04f 0320 	mov.w	r3, #32
   182d8:	f3ef 8411 	mrs	r4, BASEPRI
   182dc:	f383 8811 	msr	BASEPRI, r3
   182e0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   182e4:	6870      	ldr	r0, [r6, #4]
   182e6:	f008 fb7b 	bl	209e0 <is_tx_ready.isra.0>
   182ea:	2800      	cmp	r0, #0
   182ec:	d0ed      	beq.n	182ca <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   182ee:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182f0:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   182f2:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   182f6:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   182fa:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182fe:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   18302:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   18306:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1830a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1830e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   18310:	f384 8811 	msr	BASEPRI, r4
   18314:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   18318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1831c:	2000b76c 	.word	0x2000b76c

00018320 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18324:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18326:	f04f 0800 	mov.w	r8, #0
   1832a:	f04f 0914 	mov.w	r9, #20
   1832e:	2200      	movs	r2, #0
   18330:	2101      	movs	r1, #1
   18332:	2008      	movs	r0, #8
   18334:	f7f5 fa96 	bl	d864 <z_arm_irq_priority_set>
   18338:	2008      	movs	r0, #8
   1833a:	f7f5 fa75 	bl	d828 <arch_irq_enable>
	return config->uarte_regs;
   1833e:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   18340:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   18342:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18344:	2701      	movs	r7, #1
   18346:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1834a:	a801      	add	r0, sp, #4
	data->dev = dev;
   1834c:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   1834e:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18352:	f7ff fe8d 	bl	18070 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18356:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18358:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1835c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   18360:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18362:	a801      	add	r0, sp, #4
   18364:	f8cd 9004 	str.w	r9, [sp, #4]
   18368:	f7ff fe82 	bl	18070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1836c:	f04f 0b16 	mov.w	fp, #22
   18370:	9b01      	ldr	r3, [sp, #4]
   18372:	3380      	adds	r3, #128	; 0x80
   18374:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18378:	a801      	add	r0, sp, #4
   1837a:	f8cd b004 	str.w	fp, [sp, #4]
   1837e:	f7ff fe77 	bl	18070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18382:	9b01      	ldr	r3, [sp, #4]
   18384:	3380      	adds	r3, #128	; 0x80
   18386:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1838a:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1838e:	f04f 0915 	mov.w	r9, #21
   18392:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18396:	a801      	add	r0, sp, #4
   18398:	f8cd 9004 	str.w	r9, [sp, #4]
   1839c:	f7ff fe68 	bl	18070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   183a0:	9b01      	ldr	r3, [sp, #4]
   183a2:	3380      	adds	r3, #128	; 0x80
   183a4:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   183a8:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   183ac:	a801      	add	r0, sp, #4
   183ae:	f8cd 8004 	str.w	r8, [sp, #4]
   183b2:	f7ff fe5d 	bl	18070 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   183b6:	9b01      	ldr	r3, [sp, #4]
   183b8:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   183ba:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   183bc:	a801      	add	r0, sp, #4
   183be:	f8cd 8004 	str.w	r8, [sp, #4]
   183c2:	f7ff fe55 	bl	18070 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   183c6:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   183c8:	68e9      	ldr	r1, [r5, #12]
   183ca:	3380      	adds	r3, #128	; 0x80
   183cc:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   183d0:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   183d2:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   183d6:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   183d8:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   183dc:	f7ff fe84 	bl	180e8 <uarte_nrfx_configure>
	if (err) {
   183e0:	4607      	mov	r7, r0
   183e2:	b980      	cbnz	r0, 18406 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   183e4:	686b      	ldr	r3, [r5, #4]
   183e6:	799b      	ldrb	r3, [r3, #6]
   183e8:	2b00      	cmp	r3, #0
   183ea:	d03a      	beq.n	18462 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   183ec:	eb06 000b 	add.w	r0, r6, fp
   183f0:	f000 fddc 	bl	18fac <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   183f4:	4b2b      	ldr	r3, [pc, #172]	; (184a4 <uarte_0_init+0x184>)
   183f6:	4298      	cmp	r0, r3
   183f8:	d009      	beq.n	1840e <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   183fa:	2145      	movs	r1, #69	; 0x45
   183fc:	482a      	ldr	r0, [pc, #168]	; (184a8 <uarte_0_init+0x188>)
   183fe:	f004 facb 	bl	1c998 <printk>
		return -EIO;
   18402:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   18406:	4638      	mov	r0, r7
   18408:	b003      	add	sp, #12
   1840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1840e:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18412:	f896 8016 	ldrb.w	r8, [r6, #22]
   18416:	d10a      	bne.n	1842e <uarte_0_init+0x10e>
   18418:	4924      	ldr	r1, [pc, #144]	; (184ac <uarte_0_init+0x18c>)
   1841a:	4825      	ldr	r0, [pc, #148]	; (184b0 <uarte_0_init+0x190>)
   1841c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   18420:	f004 faba 	bl	1c998 <printk>
   18424:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   18428:	4820      	ldr	r0, [pc, #128]	; (184ac <uarte_0_init+0x18c>)
   1842a:	f004 fd5b 	bl	1cee4 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1842e:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   18432:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   18436:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   1843a:	d10a      	bne.n	18452 <uarte_0_init+0x132>
   1843c:	491b      	ldr	r1, [pc, #108]	; (184ac <uarte_0_init+0x18c>)
   1843e:	481c      	ldr	r0, [pc, #112]	; (184b0 <uarte_0_init+0x190>)
   18440:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   18444:	f004 faa8 	bl	1c998 <printk>
   18448:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   1844c:	4817      	ldr	r0, [pc, #92]	; (184ac <uarte_0_init+0x18c>)
   1844e:	f004 fd49 	bl	1cee4 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   18452:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   18454:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   18458:	7db2      	ldrb	r2, [r6, #22]
   1845a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1845c:	4a15      	ldr	r2, [pc, #84]	; (184b4 <uarte_0_init+0x194>)
   1845e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18462:	2308      	movs	r3, #8
   18464:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18468:	2300      	movs	r3, #0
   1846a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1846e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   18472:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   18476:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1847a:	2301      	movs	r3, #1
   1847c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18480:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   18482:	686b      	ldr	r3, [r5, #4]
   18484:	799b      	ldrb	r3, [r3, #6]
   18486:	b91b      	cbnz	r3, 18490 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   18488:	f44f 7380 	mov.w	r3, #256	; 0x100
   1848c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   18490:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   18492:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18494:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18498:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1849c:	2301      	movs	r3, #1
   1849e:	60a3      	str	r3, [r4, #8]
   184a0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   184a2:	e7b0      	b.n	18406 <uarte_0_init+0xe6>
   184a4:	0bad0000 	.word	0x0bad0000
   184a8:	00025d75 	.word	0x00025d75
   184ac:	00025d99 	.word	0x00025d99
   184b0:	00022dd6 	.word	0x00022dd6
   184b4:	40017000 	.word	0x40017000

000184b8 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   184b8:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   184bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   184c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   184c4:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   184c8:	4605      	mov	r5, r0
   184ca:	460e      	mov	r6, r1
   184cc:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   184ce:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   184d2:	d14f      	bne.n	18574 <z_impl_gpio_pin_interrupt_configure+0xbc>
   184d4:	492d      	ldr	r1, [pc, #180]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   184d6:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   184da:	482d      	ldr	r0, [pc, #180]	; (18590 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   184dc:	f004 fa5c 	bl	1c998 <printk>
   184e0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   184e4:	4829      	ldr	r0, [pc, #164]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   184e6:	f004 fcfd 	bl	1cee4 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   184ea:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   184ee:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   184f2:	d10a      	bne.n	1850a <z_impl_gpio_pin_interrupt_configure+0x52>
   184f4:	4925      	ldr	r1, [pc, #148]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   184f6:	4826      	ldr	r0, [pc, #152]	; (18590 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   184f8:	f240 12f1 	movw	r2, #497	; 0x1f1
   184fc:	f004 fa4c 	bl	1c998 <printk>
   18500:	f240 11f1 	movw	r1, #497	; 0x1f1
   18504:	4821      	ldr	r0, [pc, #132]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18506:	f004 fced 	bl	1cee4 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1850a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1850e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   18512:	d10a      	bne.n	1852a <z_impl_gpio_pin_interrupt_configure+0x72>
   18514:	491d      	ldr	r1, [pc, #116]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18516:	481e      	ldr	r0, [pc, #120]	; (18590 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   18518:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1851c:	f004 fa3c 	bl	1c998 <printk>
   18520:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   18524:	4819      	ldr	r0, [pc, #100]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18526:	f004 fcdd 	bl	1cee4 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1852a:	2701      	movs	r7, #1
   1852c:	f8da 3000 	ldr.w	r3, [sl]
   18530:	40b7      	lsls	r7, r6
   18532:	421f      	tst	r7, r3
   18534:	d10a      	bne.n	1854c <z_impl_gpio_pin_interrupt_configure+0x94>
   18536:	4915      	ldr	r1, [pc, #84]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18538:	4815      	ldr	r0, [pc, #84]	; (18590 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1853a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1853e:	f004 fa2b 	bl	1c998 <printk>
   18542:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   18546:	4811      	ldr	r0, [pc, #68]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18548:	f004 fccc 	bl	1cee4 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1854c:	0423      	lsls	r3, r4, #16
   1854e:	d505      	bpl.n	1855c <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   18550:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   18554:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   18556:	bf18      	it	ne
   18558:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   1855c:	f8d8 7018 	ldr.w	r7, [r8, #24]
   18560:	4631      	mov	r1, r6
   18562:	4628      	mov	r0, r5
   18564:	46bc      	mov	ip, r7
   18566:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1856a:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   1856e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   18572:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   18574:	2b00      	cmp	r3, #0
   18576:	d1b8      	bne.n	184ea <z_impl_gpio_pin_interrupt_configure+0x32>
   18578:	4904      	ldr	r1, [pc, #16]	; (1858c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1857a:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   1857e:	4804      	ldr	r0, [pc, #16]	; (18590 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   18580:	f004 fa0a 	bl	1c998 <printk>
   18584:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   18588:	e7ac      	b.n	184e4 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1858a:	bf00      	nop
   1858c:	00025de8 	.word	0x00025de8
   18590:	00022dd6 	.word	0x00022dd6

00018594 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   18594:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18596:	2501      	movs	r5, #1
   18598:	6843      	ldr	r3, [r0, #4]
   1859a:	408d      	lsls	r5, r1
   1859c:	681b      	ldr	r3, [r3, #0]
{
   1859e:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   185a0:	421d      	tst	r5, r3
{
   185a2:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   185a4:	d10a      	bne.n	185bc <gpio_pin_set_raw+0x28>
   185a6:	490b      	ldr	r1, [pc, #44]	; (185d4 <gpio_pin_set_raw+0x40>)
   185a8:	480b      	ldr	r0, [pc, #44]	; (185d8 <gpio_pin_set_raw+0x44>)
   185aa:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   185ae:	f004 f9f3 	bl	1c998 <printk>
   185b2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   185b6:	4807      	ldr	r0, [pc, #28]	; (185d4 <gpio_pin_set_raw+0x40>)
   185b8:	f004 fc94 	bl	1cee4 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   185bc:	b136      	cbz	r6, 185cc <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   185be:	68a3      	ldr	r3, [r4, #8]
   185c0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   185c2:	4629      	mov	r1, r5
   185c4:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   185c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   185ca:	4718      	bx	r3
   185cc:	68a3      	ldr	r3, [r4, #8]
   185ce:	691b      	ldr	r3, [r3, #16]
   185d0:	e7f7      	b.n	185c2 <gpio_pin_set_raw+0x2e>
   185d2:	bf00      	nop
   185d4:	00025de8 	.word	0x00025de8
   185d8:	00022dd6 	.word	0x00022dd6

000185dc <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   185dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   185e0:	4606      	mov	r6, r0
   185e2:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   185e4:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   185e6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1862c <dk_set_leds_state.part.0+0x50>
   185ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 18630 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   185ee:	fa26 f204 	lsr.w	r2, r6, r4
   185f2:	fa27 f304 	lsr.w	r3, r7, r4
   185f6:	4313      	orrs	r3, r2
   185f8:	07db      	lsls	r3, r3, #31
   185fa:	d512      	bpl.n	18622 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   185fc:	43d2      	mvns	r2, r2
   185fe:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   18602:	7919      	ldrb	r1, [r3, #4]
   18604:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   18608:	f002 0201 	and.w	r2, r2, #1
   1860c:	f7ff ffc2 	bl	18594 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   18610:	4605      	mov	r5, r0
   18612:	b130      	cbz	r0, 18622 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   18614:	2145      	movs	r1, #69	; 0x45
   18616:	4807      	ldr	r0, [pc, #28]	; (18634 <dk_set_leds_state.part.0+0x58>)
   18618:	f004 f9be 	bl	1c998 <printk>
			}
		}
	}

	return 0;
}
   1861c:	4628      	mov	r0, r5
   1861e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18622:	3401      	adds	r4, #1
   18624:	2c04      	cmp	r4, #4
   18626:	d1e2      	bne.n	185ee <dk_set_leds_state.part.0+0x12>
	return 0;
   18628:	2500      	movs	r5, #0
   1862a:	e7f7      	b.n	1861c <dk_set_leds_state.part.0+0x40>
   1862c:	000225c8 	.word	0x000225c8
   18630:	20009f04 	.word	0x20009f04
   18634:	00025e12 	.word	0x00025e12

00018638 <buttons_scan_fn>:
{
   18638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   1863c:	2400      	movs	r4, #0
   1863e:	4e6c      	ldr	r6, [pc, #432]	; (187f0 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18640:	4625      	mov	r5, r4
{
   18642:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   18644:	4f6b      	ldr	r7, [pc, #428]	; (187f4 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18646:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 187f8 <buttons_scan_fn+0x1c0>
   1864a:	f04f 0801 	mov.w	r8, #1
   1864e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   18652:	791b      	ldrb	r3, [r3, #4]
   18654:	f859 bb04 	ldr.w	fp, [r9], #4
   18658:	fa08 f803 	lsl.w	r8, r8, r3
   1865c:	f8db 3004 	ldr.w	r3, [fp, #4]
   18660:	681b      	ldr	r3, [r3, #0]
   18662:	ea18 0f03 	tst.w	r8, r3
   18666:	d10a      	bne.n	1867e <buttons_scan_fn+0x46>
   18668:	4651      	mov	r1, sl
   1866a:	4864      	ldr	r0, [pc, #400]	; (187fc <buttons_scan_fn+0x1c4>)
   1866c:	f44f 725e 	mov.w	r2, #888	; 0x378
   18670:	f004 f992 	bl	1c998 <printk>
   18674:	f44f 715e 	mov.w	r1, #888	; 0x378
   18678:	4650      	mov	r0, sl
   1867a:	f004 fc33 	bl	1cee4 <assert_post_action>
	return api->port_get_raw(port, value);
   1867e:	f8db 3008 	ldr.w	r3, [fp, #8]
   18682:	4658      	mov	r0, fp
   18684:	685b      	ldr	r3, [r3, #4]
   18686:	a901      	add	r1, sp, #4
   18688:	4798      	blx	r3
	if (ret == 0) {
   1868a:	2800      	cmp	r0, #0
   1868c:	d16b      	bne.n	18766 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1868e:	9b01      	ldr	r3, [sp, #4]
   18690:	ea18 0f03 	tst.w	r8, r3
   18694:	d003      	beq.n	1869e <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18696:	3501      	adds	r5, #1
   18698:	2d04      	cmp	r5, #4
   1869a:	d1d6      	bne.n	1864a <buttons_scan_fn+0x12>
   1869c:	e069      	b.n	18772 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1869e:	2301      	movs	r3, #1
   186a0:	40ab      	lsls	r3, r5
   186a2:	431c      	orrs	r4, r3
   186a4:	e7f7      	b.n	18696 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   186a6:	3d04      	subs	r5, #4
   186a8:	2d00      	cmp	r5, #0
   186aa:	f000 8087 	beq.w	187bc <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   186ae:	46aa      	mov	sl, r5
   186b0:	f85a 3b04 	ldr.w	r3, [sl], #4
   186b4:	4641      	mov	r1, r8
   186b6:	4620      	mov	r0, r4
   186b8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   186ba:	f1ba 0f00 	cmp.w	sl, #0
   186be:	d07d      	beq.n	187bc <buttons_scan_fn+0x184>
	return node->next;
   186c0:	686d      	ldr	r5, [r5, #4]
   186c2:	e078      	b.n	187b6 <buttons_scan_fn+0x17e>
		initial_run = false;
   186c4:	2200      	movs	r2, #0
   186c6:	701a      	strb	r2, [r3, #0]
   186c8:	e07b      	b.n	187c2 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   186ca:	f04f 0320 	mov.w	r3, #32
   186ce:	f3ef 8811 	mrs	r8, BASEPRI
   186d2:	f383 8811 	msr	BASEPRI, r3
   186d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   186da:	4849      	ldr	r0, [pc, #292]	; (18800 <buttons_scan_fn+0x1c8>)
   186dc:	f003 f988 	bl	1b9f0 <z_spin_lock_valid>
   186e0:	b940      	cbnz	r0, 186f4 <buttons_scan_fn+0xbc>
   186e2:	4948      	ldr	r1, [pc, #288]	; (18804 <buttons_scan_fn+0x1cc>)
   186e4:	4845      	ldr	r0, [pc, #276]	; (187fc <buttons_scan_fn+0x1c4>)
   186e6:	227c      	movs	r2, #124	; 0x7c
   186e8:	f004 f956 	bl	1c998 <printk>
   186ec:	217c      	movs	r1, #124	; 0x7c
   186ee:	4845      	ldr	r0, [pc, #276]	; (18804 <buttons_scan_fn+0x1cc>)
   186f0:	f004 fbf8 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   186f4:	4842      	ldr	r0, [pc, #264]	; (18800 <buttons_scan_fn+0x1c8>)
   186f6:	f003 f997 	bl	1ba28 <z_spin_lock_set_owner>
		switch (state) {
   186fa:	4b43      	ldr	r3, [pc, #268]	; (18808 <buttons_scan_fn+0x1d0>)
   186fc:	781a      	ldrb	r2, [r3, #0]
   186fe:	2a01      	cmp	r2, #1
   18700:	d126      	bne.n	18750 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   18702:	2200      	movs	r2, #0
   18704:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   18706:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1870a:	f856 0b04 	ldr.w	r0, [r6], #4
   1870e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   18710:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   18714:	f7ff fed0 	bl	184b8 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   18718:	3401      	adds	r4, #1
   1871a:	2c04      	cmp	r4, #4
   1871c:	4605      	mov	r5, r0
   1871e:	d001      	beq.n	18724 <buttons_scan_fn+0xec>
   18720:	2800      	cmp	r0, #0
   18722:	d0f0      	beq.n	18706 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18724:	4836      	ldr	r0, [pc, #216]	; (18800 <buttons_scan_fn+0x1c8>)
   18726:	f003 f971 	bl	1ba0c <z_spin_unlock_valid>
   1872a:	b940      	cbnz	r0, 1873e <buttons_scan_fn+0x106>
   1872c:	4935      	ldr	r1, [pc, #212]	; (18804 <buttons_scan_fn+0x1cc>)
   1872e:	4833      	ldr	r0, [pc, #204]	; (187fc <buttons_scan_fn+0x1c4>)
   18730:	22a7      	movs	r2, #167	; 0xa7
   18732:	f004 f931 	bl	1c998 <printk>
   18736:	21a7      	movs	r1, #167	; 0xa7
   18738:	4832      	ldr	r0, [pc, #200]	; (18804 <buttons_scan_fn+0x1cc>)
   1873a:	f004 fbd3 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1873e:	f388 8811 	msr	BASEPRI, r8
   18742:	f3bf 8f6f 	isb	sy
		if (err) {
   18746:	2d00      	cmp	r5, #0
   18748:	d04f      	beq.n	187ea <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   1874a:	2145      	movs	r1, #69	; 0x45
   1874c:	482f      	ldr	r0, [pc, #188]	; (1880c <buttons_scan_fn+0x1d4>)
   1874e:	e047      	b.n	187e0 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   18750:	22b4      	movs	r2, #180	; 0xb4
   18752:	492f      	ldr	r1, [pc, #188]	; (18810 <buttons_scan_fn+0x1d8>)
   18754:	4829      	ldr	r0, [pc, #164]	; (187fc <buttons_scan_fn+0x1c4>)
   18756:	f004 f91f 	bl	1c998 <printk>
   1875a:	21b4      	movs	r1, #180	; 0xb4
   1875c:	482c      	ldr	r0, [pc, #176]	; (18810 <buttons_scan_fn+0x1d8>)
   1875e:	f004 fbc1 	bl	1cee4 <assert_post_action>
		int err = 0;
   18762:	2500      	movs	r5, #0
			break;
   18764:	e7de      	b.n	18724 <buttons_scan_fn+0xec>
		if (val < 0) {
   18766:	da96      	bge.n	18696 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   18768:	2145      	movs	r1, #69	; 0x45
   1876a:	482a      	ldr	r0, [pc, #168]	; (18814 <buttons_scan_fn+0x1dc>)
   1876c:	f004 f914 	bl	1c998 <printk>
			return 0;
   18770:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18772:	4b29      	ldr	r3, [pc, #164]	; (18818 <buttons_scan_fn+0x1e0>)
   18774:	e8d3 2fef 	ldaex	r2, [r3]
   18778:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1877c:	2900      	cmp	r1, #0
   1877e:	d1f9      	bne.n	18774 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   18780:	4b26      	ldr	r3, [pc, #152]	; (1881c <buttons_scan_fn+0x1e4>)
   18782:	f8df 909c 	ldr.w	r9, [pc, #156]	; 18820 <buttons_scan_fn+0x1e8>
   18786:	781a      	ldrb	r2, [r3, #0]
   18788:	2a00      	cmp	r2, #0
   1878a:	d19b      	bne.n	186c4 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   1878c:	f8d9 3000 	ldr.w	r3, [r9]
   18790:	42a3      	cmp	r3, r4
   18792:	d016      	beq.n	187c2 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   18794:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   18798:	4b22      	ldr	r3, [pc, #136]	; (18824 <buttons_scan_fn+0x1ec>)
   1879a:	681b      	ldr	r3, [r3, #0]
   1879c:	b113      	cbz	r3, 187a4 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1879e:	4641      	mov	r1, r8
   187a0:	4620      	mov	r0, r4
   187a2:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   187a4:	f04f 33ff 	mov.w	r3, #4294967295
   187a8:	f04f 32ff 	mov.w	r2, #4294967295
   187ac:	481e      	ldr	r0, [pc, #120]	; (18828 <buttons_scan_fn+0x1f0>)
   187ae:	f001 fc7f 	bl	1a0b0 <z_impl_k_mutex_lock>
	return list->head;
   187b2:	4b1e      	ldr	r3, [pc, #120]	; (1882c <buttons_scan_fn+0x1f4>)
   187b4:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   187b6:	2d00      	cmp	r5, #0
   187b8:	f47f af75 	bne.w	186a6 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   187bc:	481a      	ldr	r0, [pc, #104]	; (18828 <buttons_scan_fn+0x1f0>)
   187be:	f001 fd43 	bl	1a248 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   187c2:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   187c6:	2c00      	cmp	r4, #0
   187c8:	f43f af7f 	beq.w	186ca <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   187cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   187d0:	2300      	movs	r3, #0
   187d2:	4917      	ldr	r1, [pc, #92]	; (18830 <buttons_scan_fn+0x1f8>)
   187d4:	4817      	ldr	r0, [pc, #92]	; (18834 <buttons_scan_fn+0x1fc>)
   187d6:	f003 f981 	bl	1badc <k_delayed_work_submit_to_queue>
		if (err) {
   187da:	b130      	cbz	r0, 187ea <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   187dc:	2145      	movs	r1, #69	; 0x45
   187de:	4816      	ldr	r0, [pc, #88]	; (18838 <buttons_scan_fn+0x200>)
}
   187e0:	b003      	add	sp, #12
   187e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   187e6:	f004 b8d7 	b.w	1c998 <printk>
}
   187ea:	b003      	add	sp, #12
   187ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187f0:	20009ec0 	.word	0x20009ec0
   187f4:	000225a8 	.word	0x000225a8
   187f8:	00025de8 	.word	0x00025de8
   187fc:	00022dd6 	.word	0x00022dd6
   18800:	20009f14 	.word	0x20009f14
   18804:	00022e10 	.word	0x00022e10
   18808:	2000b76b 	.word	0x2000b76b
   1880c:	00025ea7 	.word	0x00025ea7
   18810:	00025e69 	.word	0x00025e69
   18814:	00025e2d 	.word	0x00025e2d
   18818:	20009f18 	.word	0x20009f18
   1881c:	20008432 	.word	0x20008432
   18820:	20009efc 	.word	0x20009efc
   18824:	20009ed0 	.word	0x20009ed0
   18828:	20009ed4 	.word	0x20009ed4
   1882c:	20009ee8 	.word	0x20009ee8
   18830:	200094e0 	.word	0x200094e0
   18834:	20009630 	.word	0x20009630
   18838:	00025e47 	.word	0x00025e47

0001883c <button_pressed>:
{
   1883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1883e:	f04f 0320 	mov.w	r3, #32
   18842:	f3ef 8611 	mrs	r6, BASEPRI
   18846:	f383 8811 	msr	BASEPRI, r3
   1884a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1884e:	4827      	ldr	r0, [pc, #156]	; (188ec <button_pressed+0xb0>)
   18850:	f003 f8ce 	bl	1b9f0 <z_spin_lock_valid>
   18854:	b940      	cbnz	r0, 18868 <button_pressed+0x2c>
   18856:	4926      	ldr	r1, [pc, #152]	; (188f0 <button_pressed+0xb4>)
   18858:	4826      	ldr	r0, [pc, #152]	; (188f4 <button_pressed+0xb8>)
   1885a:	227c      	movs	r2, #124	; 0x7c
   1885c:	f004 f89c 	bl	1c998 <printk>
   18860:	217c      	movs	r1, #124	; 0x7c
   18862:	4823      	ldr	r0, [pc, #140]	; (188f0 <button_pressed+0xb4>)
   18864:	f004 fb3e 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   18868:	4820      	ldr	r0, [pc, #128]	; (188ec <button_pressed+0xb0>)
   1886a:	f003 f8dd 	bl	1ba28 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1886e:	2400      	movs	r4, #0
   18870:	4d21      	ldr	r5, [pc, #132]	; (188f8 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   18872:	4f22      	ldr	r7, [pc, #136]	; (188fc <button_pressed+0xc0>)
   18874:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   18878:	f855 0b04 	ldr.w	r0, [r5], #4
   1887c:	7919      	ldrb	r1, [r3, #4]
   1887e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   18882:	3401      	adds	r4, #1
   18884:	f7ff fe18 	bl	184b8 <z_impl_gpio_pin_interrupt_configure>
   18888:	2c04      	cmp	r4, #4
   1888a:	d006      	beq.n	1889a <button_pressed+0x5e>
   1888c:	2800      	cmp	r0, #0
   1888e:	d0f1      	beq.n	18874 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   18890:	2145      	movs	r1, #69	; 0x45
   18892:	481b      	ldr	r0, [pc, #108]	; (18900 <button_pressed+0xc4>)
   18894:	f004 f880 	bl	1c998 <printk>
   18898:	e001      	b.n	1889e <button_pressed+0x62>
	if (err) {
   1889a:	2800      	cmp	r0, #0
   1889c:	d1f8      	bne.n	18890 <button_pressed+0x54>
	switch (state) {
   1889e:	4b19      	ldr	r3, [pc, #100]	; (18904 <button_pressed+0xc8>)
   188a0:	781a      	ldrb	r2, [r3, #0]
   188a2:	b9ca      	cbnz	r2, 188d8 <button_pressed+0x9c>
		state = STATE_SCANNING;
   188a4:	2201      	movs	r2, #1
   188a6:	4918      	ldr	r1, [pc, #96]	; (18908 <button_pressed+0xcc>)
   188a8:	701a      	strb	r2, [r3, #0]
   188aa:	4818      	ldr	r0, [pc, #96]	; (1890c <button_pressed+0xd0>)
   188ac:	2221      	movs	r2, #33	; 0x21
   188ae:	2300      	movs	r3, #0
   188b0:	f003 f914 	bl	1badc <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188b4:	480d      	ldr	r0, [pc, #52]	; (188ec <button_pressed+0xb0>)
   188b6:	f003 f8a9 	bl	1ba0c <z_spin_unlock_valid>
   188ba:	b940      	cbnz	r0, 188ce <button_pressed+0x92>
   188bc:	490c      	ldr	r1, [pc, #48]	; (188f0 <button_pressed+0xb4>)
   188be:	480d      	ldr	r0, [pc, #52]	; (188f4 <button_pressed+0xb8>)
   188c0:	22a7      	movs	r2, #167	; 0xa7
   188c2:	f004 f869 	bl	1c998 <printk>
   188c6:	21a7      	movs	r1, #167	; 0xa7
   188c8:	4809      	ldr	r0, [pc, #36]	; (188f0 <button_pressed+0xb4>)
   188ca:	f004 fb0b 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   188ce:	f386 8811 	msr	BASEPRI, r6
   188d2:	f3bf 8f6f 	isb	sy
}
   188d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   188d8:	22eb      	movs	r2, #235	; 0xeb
   188da:	490d      	ldr	r1, [pc, #52]	; (18910 <button_pressed+0xd4>)
   188dc:	4805      	ldr	r0, [pc, #20]	; (188f4 <button_pressed+0xb8>)
   188de:	f004 f85b 	bl	1c998 <printk>
   188e2:	21eb      	movs	r1, #235	; 0xeb
   188e4:	480a      	ldr	r0, [pc, #40]	; (18910 <button_pressed+0xd4>)
   188e6:	f004 fafd 	bl	1cee4 <assert_post_action>
		break;
   188ea:	e7e3      	b.n	188b4 <button_pressed+0x78>
   188ec:	20009f14 	.word	0x20009f14
   188f0:	00022e10 	.word	0x00022e10
   188f4:	00022dd6 	.word	0x00022dd6
   188f8:	20009ec0 	.word	0x20009ec0
   188fc:	000225a8 	.word	0x000225a8
   18900:	00025ec4 	.word	0x00025ec4
   18904:	2000b76b 	.word	0x2000b76b
   18908:	200094e0 	.word	0x200094e0
   1890c:	20009630 	.word	0x20009630
   18910:	00025e69 	.word	0x00025e69

00018914 <dk_leds_init>:
{
   18914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18918:	2600      	movs	r6, #0
   1891a:	4d23      	ldr	r5, [pc, #140]	; (189a8 <dk_leds_init+0x94>)
   1891c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 189ac <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18920:	f8df a08c 	ldr.w	sl, [pc, #140]	; 189b0 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   18924:	6828      	ldr	r0, [r5, #0]
   18926:	f001 f8a1 	bl	19a6c <z_impl_device_get_binding>
   1892a:	4604      	mov	r4, r0
   1892c:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   18930:	b940      	cbnz	r0, 18944 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   18932:	2145      	movs	r1, #69	; 0x45
   18934:	481f      	ldr	r0, [pc, #124]	; (189b4 <dk_leds_init+0xa0>)
   18936:	f004 f82f 	bl	1c998 <printk>
			return -ENODEV;
   1893a:	f06f 0412 	mvn.w	r4, #18
}
   1893e:	4620      	mov	r0, r4
   18940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18944:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   18946:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   1894a:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1894c:	fa03 f80b 	lsl.w	r8, r3, fp
   18950:	6843      	ldr	r3, [r0, #4]
   18952:	681b      	ldr	r3, [r3, #0]
   18954:	ea18 0f03 	tst.w	r8, r3
   18958:	d10a      	bne.n	18970 <dk_leds_init+0x5c>
   1895a:	4651      	mov	r1, sl
   1895c:	4816      	ldr	r0, [pc, #88]	; (189b8 <dk_leds_init+0xa4>)
   1895e:	f44f 7211 	mov.w	r2, #580	; 0x244
   18962:	f004 f819 	bl	1c998 <printk>
   18966:	f44f 7111 	mov.w	r1, #580	; 0x244
   1896a:	4650      	mov	r0, sl
   1896c:	f004 faba 	bl	1cee4 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   18970:	68a3      	ldr	r3, [r4, #8]
   18972:	4620      	mov	r0, r4
   18974:	f44f 7200 	mov.w	r2, #512	; 0x200
   18978:	4659      	mov	r1, fp
   1897a:	681b      	ldr	r3, [r3, #0]
   1897c:	4798      	blx	r3
	if (ret != 0) {
   1897e:	4604      	mov	r4, r0
   18980:	b968      	cbnz	r0, 1899e <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18982:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18984:	3601      	adds	r6, #1
   18986:	ea23 0308 	bic.w	r3, r3, r8
   1898a:	2e04      	cmp	r6, #4
   1898c:	603b      	str	r3, [r7, #0]
   1898e:	f105 0508 	add.w	r5, r5, #8
   18992:	d1c7      	bne.n	18924 <dk_leds_init+0x10>
}
   18994:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18998:	210f      	movs	r1, #15
   1899a:	f7ff be1f 	b.w	185dc <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1899e:	2145      	movs	r1, #69	; 0x45
   189a0:	4806      	ldr	r0, [pc, #24]	; (189bc <dk_leds_init+0xa8>)
   189a2:	f003 fff9 	bl	1c998 <printk>
			return err;
   189a6:	e7ca      	b.n	1893e <dk_leds_init+0x2a>
   189a8:	000225c8 	.word	0x000225c8
   189ac:	20009f04 	.word	0x20009f04
   189b0:	00025de8 	.word	0x00025de8
   189b4:	00025ee2 	.word	0x00025ee2
   189b8:	00022dd6 	.word	0x00022dd6
   189bc:	00025eff 	.word	0x00025eff

000189c0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189c0:	4b05      	ldr	r3, [pc, #20]	; (189d8 <dk_read_buttons+0x18>)
   189c2:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   189c6:	b100      	cbz	r0, 189ca <dk_read_buttons+0xa>
		*button_state = current_state;
   189c8:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   189ca:	4804      	ldr	r0, [pc, #16]	; (189dc <dk_read_buttons+0x1c>)
   189cc:	b111      	cbz	r1, 189d4 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   189ce:	6802      	ldr	r2, [r0, #0]
   189d0:	405a      	eors	r2, r3
   189d2:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   189d4:	6003      	str	r3, [r0, #0]
}
   189d6:	4770      	bx	lr
   189d8:	20009f18 	.word	0x20009f18
   189dc:	20009f00 	.word	0x20009f00

000189e0 <dk_buttons_init>:
	button_handler_cb = button_handler;
   189e0:	4b4f      	ldr	r3, [pc, #316]	; (18b20 <dk_buttons_init+0x140>)
{
   189e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   189e6:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   189e8:	4e4e      	ldr	r6, [pc, #312]	; (18b24 <dk_buttons_init+0x144>)
   189ea:	484f      	ldr	r0, [pc, #316]	; (18b28 <dk_buttons_init+0x148>)
   189ec:	f008 fcc4 	bl	21378 <z_impl_k_mutex_init>
   189f0:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   189f2:	2700      	movs	r7, #0
   189f4:	4d4d      	ldr	r5, [pc, #308]	; (18b2c <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   189f6:	f8df a138 	ldr.w	sl, [pc, #312]	; 18b30 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   189fa:	6828      	ldr	r0, [r5, #0]
   189fc:	f001 f836 	bl	19a6c <z_impl_device_get_binding>
   18a00:	4604      	mov	r4, r0
   18a02:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   18a06:	b948      	cbnz	r0, 18a1c <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   18a08:	2145      	movs	r1, #69	; 0x45
   18a0a:	484a      	ldr	r0, [pc, #296]	; (18b34 <dk_buttons_init+0x154>)
   18a0c:	f003 ffc4 	bl	1c998 <printk>
			return -ENODEV;
   18a10:	f06f 0412 	mvn.w	r4, #18
}
   18a14:	4620      	mov	r0, r4
   18a16:	b003      	add	sp, #12
   18a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a1c:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   18a1e:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   18a22:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18a26:	fa03 f30b 	lsl.w	r3, r3, fp
   18a2a:	9301      	str	r3, [sp, #4]
   18a2c:	6843      	ldr	r3, [r0, #4]
   18a2e:	9a01      	ldr	r2, [sp, #4]
   18a30:	681b      	ldr	r3, [r3, #0]
   18a32:	421a      	tst	r2, r3
   18a34:	d10a      	bne.n	18a4c <dk_buttons_init+0x6c>
   18a36:	4651      	mov	r1, sl
   18a38:	483f      	ldr	r0, [pc, #252]	; (18b38 <dk_buttons_init+0x158>)
   18a3a:	f44f 7211 	mov.w	r2, #580	; 0x244
   18a3e:	f003 ffab 	bl	1c998 <printk>
   18a42:	f44f 7111 	mov.w	r1, #580	; 0x244
   18a46:	4650      	mov	r0, sl
   18a48:	f004 fa4c 	bl	1cee4 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   18a4c:	68a3      	ldr	r3, [r4, #8]
   18a4e:	4620      	mov	r0, r4
   18a50:	f44f 7288 	mov.w	r2, #272	; 0x110
   18a54:	4659      	mov	r1, fp
   18a56:	681b      	ldr	r3, [r3, #0]
   18a58:	4798      	blx	r3
	if (ret != 0) {
   18a5a:	4604      	mov	r4, r0
   18a5c:	bb08      	cbnz	r0, 18aa2 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18a5e:	f8d8 3000 	ldr.w	r3, [r8]
   18a62:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18a64:	3701      	adds	r7, #1
   18a66:	ea23 0302 	bic.w	r3, r3, r2
   18a6a:	2f04      	cmp	r7, #4
   18a6c:	f8c8 3000 	str.w	r3, [r8]
   18a70:	f105 0508 	add.w	r5, r5, #8
   18a74:	d1c1      	bne.n	189fa <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18a76:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   18a78:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   18a7a:	f04f 0a01 	mov.w	sl, #1
   18a7e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 18b24 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   18a82:	4b2a      	ldr	r3, [pc, #168]	; (18b2c <dk_buttons_init+0x14c>)
   18a84:	f859 0b04 	ldr.w	r0, [r9], #4
   18a88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18a8c:	791f      	ldrb	r7, [r3, #4]
   18a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18a92:	4639      	mov	r1, r7
   18a94:	f7ff fd10 	bl	184b8 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   18a98:	4604      	mov	r4, r0
   18a9a:	b138      	cbz	r0, 18aac <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   18a9c:	2145      	movs	r1, #69	; 0x45
   18a9e:	4827      	ldr	r0, [pc, #156]	; (18b3c <dk_buttons_init+0x15c>)
   18aa0:	e001      	b.n	18aa6 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   18aa2:	2145      	movs	r1, #69	; 0x45
   18aa4:	4826      	ldr	r0, [pc, #152]	; (18b40 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   18aa6:	f003 ff77 	bl	1c998 <printk>
		return err;
   18aaa:	e7b3      	b.n	18a14 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18aac:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   18aae:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18ab2:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   18ab4:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18ab8:	d1e3      	bne.n	18a82 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18aba:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   18abc:	4f21      	ldr	r7, [pc, #132]	; (18b44 <dk_buttons_init+0x164>)
   18abe:	4b22      	ldr	r3, [pc, #136]	; (18b48 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   18ac0:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   18ac4:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   18ac8:	6883      	ldr	r3, [r0, #8]
   18aca:	69db      	ldr	r3, [r3, #28]
   18acc:	b13b      	cbz	r3, 18ade <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   18ace:	2201      	movs	r2, #1
   18ad0:	4639      	mov	r1, r7
   18ad2:	4798      	blx	r3
		if (err) {
   18ad4:	4604      	mov	r4, r0
   18ad6:	b128      	cbz	r0, 18ae4 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   18ad8:	2145      	movs	r1, #69	; 0x45
   18ada:	481c      	ldr	r0, [pc, #112]	; (18b4c <dk_buttons_init+0x16c>)
   18adc:	e7e3      	b.n	18aa6 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   18ade:	f06f 0422 	mvn.w	r4, #34	; 0x22
   18ae2:	e7f9      	b.n	18ad8 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18ae4:	3501      	adds	r5, #1
   18ae6:	2d04      	cmp	r5, #4
   18ae8:	d1ec      	bne.n	18ac4 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18aea:	4d19      	ldr	r5, [pc, #100]	; (18b50 <dk_buttons_init+0x170>)
   18aec:	4601      	mov	r1, r0
   18aee:	2230      	movs	r2, #48	; 0x30
   18af0:	4628      	mov	r0, r5
   18af2:	f005 fc34 	bl	1e35e <memset>
	state = STATE_SCANNING;
   18af6:	2201      	movs	r2, #1
   18af8:	4b16      	ldr	r3, [pc, #88]	; (18b54 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18afa:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18afc:	606b      	str	r3, [r5, #4]
   18afe:	4b16      	ldr	r3, [pc, #88]	; (18b58 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18b00:	4816      	ldr	r0, [pc, #88]	; (18b5c <dk_buttons_init+0x17c>)
   18b02:	701a      	strb	r2, [r3, #0]
   18b04:	2200      	movs	r2, #0
   18b06:	2300      	movs	r3, #0
   18b08:	f002 ffe8 	bl	1badc <k_delayed_work_submit_to_queue>
	if (err) {
   18b0c:	4604      	mov	r4, r0
   18b0e:	b110      	cbz	r0, 18b16 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   18b10:	2145      	movs	r1, #69	; 0x45
   18b12:	4813      	ldr	r0, [pc, #76]	; (18b60 <dk_buttons_init+0x180>)
   18b14:	e7c7      	b.n	18aa6 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   18b16:	4601      	mov	r1, r0
   18b18:	f7ff ff52 	bl	189c0 <dk_read_buttons>
	return 0;
   18b1c:	e77a      	b.n	18a14 <dk_buttons_init+0x34>
   18b1e:	bf00      	nop
   18b20:	20009ed0 	.word	0x20009ed0
   18b24:	20009ec0 	.word	0x20009ec0
   18b28:	20009ed4 	.word	0x20009ed4
   18b2c:	000225a8 	.word	0x000225a8
   18b30:	00025de8 	.word	0x00025de8
   18b34:	00025ee2 	.word	0x00025ee2
   18b38:	00022dd6 	.word	0x00022dd6
   18b3c:	00025f40 	.word	0x00025f40
   18b40:	00025f1e 	.word	0x00025f1e
   18b44:	20009ef0 	.word	0x20009ef0
   18b48:	0001883d 	.word	0x0001883d
   18b4c:	00025f60 	.word	0x00025f60
   18b50:	200094e0 	.word	0x200094e0
   18b54:	00018639 	.word	0x00018639
   18b58:	2000b76b 	.word	0x2000b76b
   18b5c:	20009630 	.word	0x20009630
   18b60:	00025e47 	.word	0x00025e47

00018b64 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   18b64:	2804      	cmp	r0, #4
{
   18b66:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   18b68:	d907      	bls.n	18b7a <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   18b6a:	2145      	movs	r1, #69	; 0x45
   18b6c:	480d      	ldr	r0, [pc, #52]	; (18ba4 <dk_set_led+0x40>)
   18b6e:	f003 ff13 	bl	1c998 <printk>
   18b72:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   18b76:	4620      	mov	r0, r4
   18b78:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   18b7a:	fab1 f281 	clz	r2, r1
   18b7e:	4b0a      	ldr	r3, [pc, #40]	; (18ba8 <dk_set_led+0x44>)
   18b80:	0952      	lsrs	r2, r2, #5
   18b82:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18b86:	7919      	ldrb	r1, [r3, #4]
   18b88:	4b08      	ldr	r3, [pc, #32]	; (18bac <dk_set_led+0x48>)
   18b8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18b8e:	f7ff fd01 	bl	18594 <gpio_pin_set_raw>
	if (err) {
   18b92:	4604      	mov	r4, r0
   18b94:	2800      	cmp	r0, #0
   18b96:	d0ee      	beq.n	18b76 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   18b98:	2145      	movs	r1, #69	; 0x45
   18b9a:	4805      	ldr	r0, [pc, #20]	; (18bb0 <dk_set_led+0x4c>)
   18b9c:	f003 fefc 	bl	1c998 <printk>
   18ba0:	e7e9      	b.n	18b76 <dk_set_led+0x12>
   18ba2:	bf00      	nop
   18ba4:	00025f79 	.word	0x00025f79
   18ba8:	000225c8 	.word	0x000225c8
   18bac:	20009f04 	.word	0x20009f04
   18bb0:	00025e12 	.word	0x00025e12

00018bb4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   18bb4:	4803      	ldr	r0, [pc, #12]	; (18bc4 <k_sys_fatal_error_handler+0x10>)
   18bb6:	2145      	movs	r1, #69	; 0x45
{
   18bb8:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   18bba:	f003 feed 	bl	1c998 <printk>
	sys_arch_reboot(0);
   18bbe:	2000      	movs	r0, #0
   18bc0:	f7f5 f94e 	bl	de60 <sys_arch_reboot>

	CODE_UNREACHABLE;
   18bc4:	00025fad 	.word	0x00025fad

00018bc8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   18bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18bcc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   18bce:	4c21      	ldr	r4, [pc, #132]	; (18c54 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   18bd0:	4e21      	ldr	r6, [pc, #132]	; (18c58 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18bd2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   18bd6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18c5c <check_ext_api_requests+0x94>
{
   18bda:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18bdc:	45a8      	cmp	r8, r5
   18bde:	d803      	bhi.n	18be8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   18be0:	2000      	movs	r0, #0
   18be2:	b005      	add	sp, #20
   18be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   18be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18bea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18bee:	681f      	ldr	r7, [r3, #0]
   18bf0:	ab01      	add	r3, sp, #4
   18bf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   18bf6:	220c      	movs	r2, #12
   18bf8:	4619      	mov	r1, r3
   18bfa:	4638      	mov	r0, r7
   18bfc:	f005 fb73 	bl	1e2e6 <memcmp>
   18c00:	b990      	cbnz	r0, 18c28 <check_ext_api_requests+0x60>
   18c02:	b18f      	cbz	r7, 18c28 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   18c06:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18c08:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   18c0a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18c0c:	4291      	cmp	r1, r2
   18c0e:	d10b      	bne.n	18c28 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   18c10:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   18c12:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   18c14:	4291      	cmp	r1, r2
   18c16:	d807      	bhi.n	18c28 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   18c18:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   18c1a:	4291      	cmp	r1, r2
   18c1c:	d904      	bls.n	18c28 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   18c1e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18c20:	695b      	ldr	r3, [r3, #20]
   18c22:	ea32 0303 	bics.w	r3, r2, r3
   18c26:	d00a      	beq.n	18c3e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   18c28:	6a27      	ldr	r7, [r4, #32]
   18c2a:	b167      	cbz	r7, 18c46 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   18c2c:	480c      	ldr	r0, [pc, #48]	; (18c60 <check_ext_api_requests+0x98>)
   18c2e:	f003 feb3 	bl	1c998 <printk>
			k_panic();
   18c32:	4040      	eors	r0, r0
   18c34:	f380 8811 	msr	BASEPRI, r0
   18c38:	f04f 0004 	mov.w	r0, #4
   18c3c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   18c3e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18c40:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   18c42:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18c44:	e7ca      	b.n	18bdc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   18c46:	4648      	mov	r0, r9
   18c48:	f003 fea6 	bl	1c998 <printk>
			*ext_api_req->ext_api = NULL;
   18c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18c4e:	601f      	str	r7, [r3, #0]
   18c50:	e7f5      	b.n	18c3e <check_ext_api_requests+0x76>
   18c52:	bf00      	nop
   18c54:	0000823c 	.word	0x0000823c
   18c58:	00021bd4 	.word	0x00021bd4
   18c5c:	00025ff8 	.word	0x00025ff8
   18c60:	00025fcf 	.word	0x00025fcf

00018c64 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   18c64:	4b04      	ldr	r3, [pc, #16]	; (18c78 <SystemCoreClockUpdate+0x14>)
   18c66:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   18c6a:	4b04      	ldr	r3, [pc, #16]	; (18c7c <SystemCoreClockUpdate+0x18>)
   18c6c:	f002 0203 	and.w	r2, r2, #3
   18c70:	40d3      	lsrs	r3, r2
   18c72:	4a03      	ldr	r2, [pc, #12]	; (18c80 <SystemCoreClockUpdate+0x1c>)
   18c74:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   18c76:	4770      	bx	lr
   18c78:	40005000 	.word	0x40005000
   18c7c:	07a12000 	.word	0x07a12000
   18c80:	200083e8 	.word	0x200083e8

00018c84 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   18c84:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   18c86:	4604      	mov	r4, r0
   18c88:	b940      	cbnz	r0, 18c9c <nrfx_clock_init+0x18>
   18c8a:	4909      	ldr	r1, [pc, #36]	; (18cb0 <nrfx_clock_init+0x2c>)
   18c8c:	4809      	ldr	r0, [pc, #36]	; (18cb4 <nrfx_clock_init+0x30>)
   18c8e:	22b3      	movs	r2, #179	; 0xb3
   18c90:	f003 fe82 	bl	1c998 <printk>
   18c94:	21b3      	movs	r1, #179	; 0xb3
   18c96:	4806      	ldr	r0, [pc, #24]	; (18cb0 <nrfx_clock_init+0x2c>)
   18c98:	f004 f924 	bl	1cee4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   18c9c:	4b06      	ldr	r3, [pc, #24]	; (18cb8 <nrfx_clock_init+0x34>)
   18c9e:	791a      	ldrb	r2, [r3, #4]
   18ca0:	b922      	cbnz	r2, 18cac <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   18ca2:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   18ca4:	4805      	ldr	r0, [pc, #20]	; (18cbc <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   18ca6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   18ca8:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18caa:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   18cac:	4804      	ldr	r0, [pc, #16]	; (18cc0 <nrfx_clock_init+0x3c>)
    return err_code;
   18cae:	e7fc      	b.n	18caa <nrfx_clock_init+0x26>
   18cb0:	0002602b 	.word	0x0002602b
   18cb4:	00022dd6 	.word	0x00022dd6
   18cb8:	20009f1c 	.word	0x20009f1c
   18cbc:	0bad0000 	.word	0x0bad0000
   18cc0:	0bad000c 	.word	0x0bad000c

00018cc4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   18cc4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18cc6:	4b0d      	ldr	r3, [pc, #52]	; (18cfc <nrfx_clock_enable+0x38>)
   18cc8:	791b      	ldrb	r3, [r3, #4]
   18cca:	b943      	cbnz	r3, 18cde <nrfx_clock_enable+0x1a>
   18ccc:	490c      	ldr	r1, [pc, #48]	; (18d00 <nrfx_clock_enable+0x3c>)
   18cce:	480d      	ldr	r0, [pc, #52]	; (18d04 <nrfx_clock_enable+0x40>)
   18cd0:	22cc      	movs	r2, #204	; 0xcc
   18cd2:	f003 fe61 	bl	1c998 <printk>
   18cd6:	21cc      	movs	r1, #204	; 0xcc
   18cd8:	4809      	ldr	r0, [pc, #36]	; (18d00 <nrfx_clock_enable+0x3c>)
   18cda:	f004 f903 	bl	1cee4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   18cde:	2005      	movs	r0, #5
   18ce0:	f7f4 fdb2 	bl	d848 <arch_irq_is_enabled>
   18ce4:	b910      	cbnz	r0, 18cec <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   18ce6:	2005      	movs	r0, #5
   18ce8:	f7f4 fd9e 	bl	d828 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   18cec:	2201      	movs	r2, #1
   18cee:	4b06      	ldr	r3, [pc, #24]	; (18d08 <nrfx_clock_enable+0x44>)
   18cf0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   18cf4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   18cf8:	bd08      	pop	{r3, pc}
   18cfa:	bf00      	nop
   18cfc:	20009f1c 	.word	0x20009f1c
   18d00:	0002602b 	.word	0x0002602b
   18d04:	00022dd6 	.word	0x00022dd6
   18d08:	40005000 	.word	0x40005000

00018d0c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18d0c:	4b30      	ldr	r3, [pc, #192]	; (18dd0 <nrfx_clock_start+0xc4>)
{
   18d0e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18d10:	791b      	ldrb	r3, [r3, #4]
{
   18d12:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18d14:	b953      	cbnz	r3, 18d2c <nrfx_clock_start+0x20>
   18d16:	492f      	ldr	r1, [pc, #188]	; (18dd4 <nrfx_clock_start+0xc8>)
   18d18:	482f      	ldr	r0, [pc, #188]	; (18dd8 <nrfx_clock_start+0xcc>)
   18d1a:	f44f 7284 	mov.w	r2, #264	; 0x108
   18d1e:	f003 fe3b 	bl	1c998 <printk>
   18d22:	f44f 7184 	mov.w	r1, #264	; 0x108
   18d26:	482b      	ldr	r0, [pc, #172]	; (18dd4 <nrfx_clock_start+0xc8>)
   18d28:	f004 f8dc 	bl	1cee4 <assert_post_action>
    switch (domain)
   18d2c:	2c03      	cmp	r4, #3
   18d2e:	d842      	bhi.n	18db6 <nrfx_clock_start+0xaa>
   18d30:	e8df f004 	tbb	[pc, r4]
   18d34:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18d38:	4b28      	ldr	r3, [pc, #160]	; (18ddc <nrfx_clock_start+0xd0>)
   18d3a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18d3e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   18d42:	03c9      	lsls	r1, r1, #15
   18d44:	d510      	bpl.n	18d68 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   18d46:	f002 0203 	and.w	r2, r2, #3
   18d4a:	2a02      	cmp	r2, #2
   18d4c:	d10c      	bne.n	18d68 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18d4e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d52:	2200      	movs	r2, #0
   18d54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18d58:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   18d5c:	2202      	movs	r2, #2
   18d5e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d62:	2201      	movs	r2, #1
   18d64:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   18d66:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   18d68:	2201      	movs	r2, #1
   18d6a:	e7f0      	b.n	18d4e <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d6c:	2200      	movs	r2, #0
   18d6e:	4b1b      	ldr	r3, [pc, #108]	; (18ddc <nrfx_clock_start+0xd0>)
   18d70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18d74:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18d78:	2201      	movs	r2, #1
   18d7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d7e:	601a      	str	r2, [r3, #0]
}
   18d80:	e7f1      	b.n	18d66 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d82:	2200      	movs	r2, #0
   18d84:	4b15      	ldr	r3, [pc, #84]	; (18ddc <nrfx_clock_start+0xd0>)
   18d86:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18d8a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   18d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
   18d92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d96:	2201      	movs	r2, #1
   18d98:	621a      	str	r2, [r3, #32]
}
   18d9a:	e7e4      	b.n	18d66 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d9c:	2200      	movs	r2, #0
   18d9e:	4b0f      	ldr	r3, [pc, #60]	; (18ddc <nrfx_clock_start+0xd0>)
   18da0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18da4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   18da8:	f44f 7280 	mov.w	r2, #256	; 0x100
   18dac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18db0:	2201      	movs	r2, #1
   18db2:	619a      	str	r2, [r3, #24]
}
   18db4:	e7d7      	b.n	18d66 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   18db6:	4907      	ldr	r1, [pc, #28]	; (18dd4 <nrfx_clock_start+0xc8>)
   18db8:	4807      	ldr	r0, [pc, #28]	; (18dd8 <nrfx_clock_start+0xcc>)
   18dba:	f44f 729d 	mov.w	r2, #314	; 0x13a
   18dbe:	f003 fdeb 	bl	1c998 <printk>
}
   18dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   18dc6:	f44f 719d 	mov.w	r1, #314	; 0x13a
   18dca:	4802      	ldr	r0, [pc, #8]	; (18dd4 <nrfx_clock_start+0xc8>)
   18dcc:	f004 b88a 	b.w	1cee4 <assert_post_action>
   18dd0:	20009f1c 	.word	0x20009f1c
   18dd4:	0002602b 	.word	0x0002602b
   18dd8:	00022dd6 	.word	0x00022dd6
   18ddc:	40005000 	.word	0x40005000

00018de0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18de0:	4b42      	ldr	r3, [pc, #264]	; (18eec <nrfx_clock_stop+0x10c>)
{
   18de2:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18de4:	791b      	ldrb	r3, [r3, #4]
{
   18de6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18de8:	b953      	cbnz	r3, 18e00 <nrfx_clock_stop+0x20>
   18dea:	4941      	ldr	r1, [pc, #260]	; (18ef0 <nrfx_clock_stop+0x110>)
   18dec:	4841      	ldr	r0, [pc, #260]	; (18ef4 <nrfx_clock_stop+0x114>)
   18dee:	f240 1241 	movw	r2, #321	; 0x141
   18df2:	f003 fdd1 	bl	1c998 <printk>
   18df6:	f240 1141 	movw	r1, #321	; 0x141
   18dfa:	483d      	ldr	r0, [pc, #244]	; (18ef0 <nrfx_clock_stop+0x110>)
   18dfc:	f004 f872 	bl	1cee4 <assert_post_action>
    switch (domain)
   18e00:	2c03      	cmp	r4, #3
   18e02:	d856      	bhi.n	18eb2 <nrfx_clock_stop+0xd2>
   18e04:	e8df f004 	tbb	[pc, r4]
   18e08:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   18e0c:	2202      	movs	r2, #2
   18e0e:	4b3a      	ldr	r3, [pc, #232]	; (18ef8 <nrfx_clock_stop+0x118>)
   18e10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18e14:	2200      	movs	r2, #0
   18e16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18e1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18e1e:	2201      	movs	r2, #1
   18e20:	60da      	str	r2, [r3, #12]
   18e22:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   18e26:	4e34      	ldr	r6, [pc, #208]	; (18ef8 <nrfx_clock_stop+0x118>)
    switch (domain)
   18e28:	2c02      	cmp	r4, #2
   18e2a:	d04f      	beq.n	18ecc <nrfx_clock_stop+0xec>
   18e2c:	2c03      	cmp	r4, #3
   18e2e:	d050      	beq.n	18ed2 <nrfx_clock_stop+0xf2>
   18e30:	2c00      	cmp	r4, #0
   18e32:	d151      	bne.n	18ed8 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18e34:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   18e38:	03db      	lsls	r3, r3, #15
   18e3a:	d51f      	bpl.n	18e7c <nrfx_clock_stop+0x9c>
   18e3c:	2001      	movs	r0, #1
   18e3e:	f007 fe6f 	bl	20b20 <nrfx_busy_wait>
   18e42:	3d01      	subs	r5, #1
   18e44:	d1f0      	bne.n	18e28 <nrfx_clock_stop+0x48>
   18e46:	e019      	b.n	18e7c <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   18e48:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18e4a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18e4c:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   18e50:	4c29      	ldr	r4, [pc, #164]	; (18ef8 <nrfx_clock_stop+0x118>)
   18e52:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18e56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e5a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18e5e:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18e60:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18e64:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18e68:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18e6c:	03d2      	lsls	r2, r2, #15
   18e6e:	d505      	bpl.n	18e7c <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   18e70:	b123      	cbz	r3, 18e7c <nrfx_clock_stop+0x9c>
   18e72:	2001      	movs	r0, #1
   18e74:	f007 fe54 	bl	20b20 <nrfx_busy_wait>
   18e78:	3d01      	subs	r5, #1
   18e7a:	d1f1      	bne.n	18e60 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   18e7c:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   18e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
   18e82:	4b1d      	ldr	r3, [pc, #116]	; (18ef8 <nrfx_clock_stop+0x118>)
   18e84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18e88:	2200      	movs	r2, #0
   18e8a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18e8e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18e92:	2201      	movs	r2, #1
   18e94:	625a      	str	r2, [r3, #36]	; 0x24
}
   18e96:	e7c4      	b.n	18e22 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   18e98:	f44f 7280 	mov.w	r2, #256	; 0x100
   18e9c:	4b16      	ldr	r3, [pc, #88]	; (18ef8 <nrfx_clock_stop+0x118>)
   18e9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18ea2:	2200      	movs	r2, #0
   18ea4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18ea8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18eac:	2201      	movs	r2, #1
   18eae:	61da      	str	r2, [r3, #28]
}
   18eb0:	e7b7      	b.n	18e22 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   18eb2:	490f      	ldr	r1, [pc, #60]	; (18ef0 <nrfx_clock_stop+0x110>)
   18eb4:	480f      	ldr	r0, [pc, #60]	; (18ef4 <nrfx_clock_stop+0x114>)
   18eb6:	f240 125d 	movw	r2, #349	; 0x15d
   18eba:	f003 fd6d 	bl	1c998 <printk>
   18ebe:	f240 115d 	movw	r1, #349	; 0x15d
   18ec2:	480b      	ldr	r0, [pc, #44]	; (18ef0 <nrfx_clock_stop+0x110>)
}
   18ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   18ec8:	f004 b80c 	b.w	1cee4 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   18ecc:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   18ed0:	e7b2      	b.n	18e38 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   18ed2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   18ed6:	e7af      	b.n	18e38 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   18ed8:	4908      	ldr	r1, [pc, #32]	; (18efc <nrfx_clock_stop+0x11c>)
   18eda:	4806      	ldr	r0, [pc, #24]	; (18ef4 <nrfx_clock_stop+0x114>)
   18edc:	f240 3242 	movw	r2, #834	; 0x342
   18ee0:	f003 fd5a 	bl	1c998 <printk>
   18ee4:	f240 3142 	movw	r1, #834	; 0x342
   18ee8:	4804      	ldr	r0, [pc, #16]	; (18efc <nrfx_clock_stop+0x11c>)
   18eea:	e7eb      	b.n	18ec4 <nrfx_clock_stop+0xe4>
   18eec:	20009f1c 	.word	0x20009f1c
   18ef0:	0002602b 	.word	0x0002602b
   18ef4:	00022dd6 	.word	0x00022dd6
   18ef8:	40005000 	.word	0x40005000
   18efc:	00026068 	.word	0x00026068

00018f00 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18f00:	4b28      	ldr	r3, [pc, #160]	; (18fa4 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   18f02:	b510      	push	{r4, lr}
   18f04:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   18f08:	b152      	cbz	r2, 18f20 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f0a:	2000      	movs	r0, #0
   18f0c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   18f10:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   18f14:	2201      	movs	r2, #1
   18f16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18f1a:	4b23      	ldr	r3, [pc, #140]	; (18fa8 <nrfx_power_clock_irq_handler+0xa8>)
   18f1c:	681b      	ldr	r3, [r3, #0]
   18f1e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18f20:	4b20      	ldr	r3, [pc, #128]	; (18fa4 <nrfx_power_clock_irq_handler+0xa4>)
   18f22:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   18f26:	b18a      	cbz	r2, 18f4c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f28:	2200      	movs	r2, #0
   18f2a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18f2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18f32:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18f36:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   18f3a:	f002 0203 	and.w	r2, r2, #3
   18f3e:	2a01      	cmp	r2, #1
   18f40:	f04f 0102 	mov.w	r1, #2
   18f44:	d126      	bne.n	18f94 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18f46:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18f4a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18f4c:	4b15      	ldr	r3, [pc, #84]	; (18fa4 <nrfx_power_clock_irq_handler+0xa4>)
   18f4e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   18f52:	b162      	cbz	r2, 18f6e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f54:	2200      	movs	r2, #0
   18f56:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18f5a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   18f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
   18f62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   18f66:	4b10      	ldr	r3, [pc, #64]	; (18fa8 <nrfx_power_clock_irq_handler+0xa8>)
   18f68:	2004      	movs	r0, #4
   18f6a:	681b      	ldr	r3, [r3, #0]
   18f6c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18f6e:	4b0d      	ldr	r3, [pc, #52]	; (18fa4 <nrfx_power_clock_irq_handler+0xa4>)
   18f70:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   18f74:	b1aa      	cbz	r2, 18fa2 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   18f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f7a:	2200      	movs	r2, #0
   18f7c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18f80:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   18f84:	f44f 7200 	mov.w	r2, #512	; 0x200
   18f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   18f8c:	4b06      	ldr	r3, [pc, #24]	; (18fa8 <nrfx_power_clock_irq_handler+0xa8>)
   18f8e:	2005      	movs	r0, #5
   18f90:	681b      	ldr	r3, [r3, #0]
   18f92:	4718      	bx	r3
   18f94:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18f98:	4b03      	ldr	r3, [pc, #12]	; (18fa8 <nrfx_power_clock_irq_handler+0xa8>)
   18f9a:	2001      	movs	r0, #1
   18f9c:	681b      	ldr	r3, [r3, #0]
   18f9e:	4798      	blx	r3
   18fa0:	e7d4      	b.n	18f4c <nrfx_power_clock_irq_handler+0x4c>
}
   18fa2:	bd10      	pop	{r4, pc}
   18fa4:	40005000 	.word	0x40005000
   18fa8:	20009f1c 	.word	0x20009f1c

00018fac <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   18fac:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   18fae:	4c0a      	ldr	r4, [pc, #40]	; (18fd8 <nrfx_dppi_channel_alloc+0x2c>)
   18fb0:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   18fb2:	43ce      	mvns	r6, r1
   18fb4:	d00e      	beq.n	18fd4 <nrfx_dppi_channel_alloc+0x28>
   18fb6:	2300      	movs	r3, #0
   18fb8:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   18fba:	fa26 f502 	lsr.w	r5, r6, r2
   18fbe:	07ed      	lsls	r5, r5, #31
   18fc0:	f103 0301 	add.w	r3, r3, #1
   18fc4:	d5f8      	bpl.n	18fb8 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   18fc6:	2301      	movs	r3, #1
   18fc8:	4093      	lsls	r3, r2
   18fca:	430b      	orrs	r3, r1
    *p_channel = channel;
   18fcc:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   18fce:	4803      	ldr	r0, [pc, #12]	; (18fdc <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   18fd0:	6023      	str	r3, [r4, #0]
}
   18fd2:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   18fd4:	4802      	ldr	r0, [pc, #8]	; (18fe0 <nrfx_dppi_channel_alloc+0x34>)
   18fd6:	e7fc      	b.n	18fd2 <nrfx_dppi_channel_alloc+0x26>
   18fd8:	20009f24 	.word	0x20009f24
   18fdc:	0bad0000 	.word	0x0bad0000
   18fe0:	0bad0002 	.word	0x0bad0002

00018fe4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18fe4:	2301      	movs	r3, #1
   18fe6:	fa03 f000 	lsl.w	r0, r3, r0
   18fea:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   18fec:	b193      	cbz	r3, 19014 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   18fee:	f04f 0320 	mov.w	r3, #32
   18ff2:	f3ef 8111 	mrs	r1, BASEPRI
   18ff6:	f383 8811 	msr	BASEPRI, r3
   18ffa:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   18ffe:	4a06      	ldr	r2, [pc, #24]	; (19018 <nrfx_gpiote_channel_free+0x34>)
   19000:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   19002:	ea23 0000 	bic.w	r0, r3, r0
   19006:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   19008:	f381 8811 	msr	BASEPRI, r1
   1900c:	f3bf 8f6f 	isb	sy
   19010:	4802      	ldr	r0, [pc, #8]	; (1901c <nrfx_gpiote_channel_free+0x38>)
   19012:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   19014:	4802      	ldr	r0, [pc, #8]	; (19020 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19016:	4770      	bx	lr
   19018:	20009f28 	.word	0x20009f28
   1901c:	0bad0000 	.word	0x0bad0000
   19020:	0bad0004 	.word	0x0bad0004

00019024 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   19024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   19028:	22ff      	movs	r2, #255	; 0xff
{
   1902a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   1902c:	2601      	movs	r6, #1
{
   1902e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   19030:	f8df e054 	ldr.w	lr, [pc, #84]	; 19088 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   19034:	4815      	ldr	r0, [pc, #84]	; (1908c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   19036:	f8df 8058 	ldr.w	r8, [pc, #88]	; 19090 <nrfx_gpiote_channel_alloc+0x6c>
   1903a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1903c:	f04f 0120 	mov.w	r1, #32
   19040:	f3ef 8c11 	mrs	ip, BASEPRI
   19044:	f381 8811 	msr	BASEPRI, r1
   19048:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1904c:	fa22 f103 	lsr.w	r1, r2, r3
   19050:	07c9      	lsls	r1, r1, #31
   19052:	d50a      	bpl.n	1906a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   19054:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   19058:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1905c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   1905e:	bf01      	itttt	eq
   19060:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   19062:	4339      	orreq	r1, r7
   19064:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   19068:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1906a:	f38c 8811 	msr	BASEPRI, ip
   1906e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   19072:	4540      	cmp	r0, r8
   19074:	d005      	beq.n	19082 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   19076:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1907a:	439a      	bics	r2, r3
   1907c:	f104 0401 	add.w	r4, r4, #1
   19080:	d1db      	bne.n	1903a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19086:	bf00      	nop
   19088:	20009f28 	.word	0x20009f28
   1908c:	0bad0002 	.word	0x0bad0002
   19090:	0bad0000 	.word	0x0bad0000

00019094 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   19094:	b570      	push	{r4, r5, r6, lr}
   19096:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   19098:	460d      	mov	r5, r1
   1909a:	b941      	cbnz	r1, 190ae <nrfx_ipc_init+0x1a>
   1909c:	490b      	ldr	r1, [pc, #44]	; (190cc <nrfx_ipc_init+0x38>)
   1909e:	480c      	ldr	r0, [pc, #48]	; (190d0 <nrfx_ipc_init+0x3c>)
   190a0:	2232      	movs	r2, #50	; 0x32
   190a2:	f003 fc79 	bl	1c998 <printk>
   190a6:	2132      	movs	r1, #50	; 0x32
   190a8:	4808      	ldr	r0, [pc, #32]	; (190cc <nrfx_ipc_init+0x38>)
   190aa:	f003 ff1b 	bl	1cee4 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   190ae:	4c09      	ldr	r4, [pc, #36]	; (190d4 <nrfx_ipc_init+0x40>)
   190b0:	7923      	ldrb	r3, [r4, #4]
   190b2:	b943      	cbnz	r3, 190c6 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   190b4:	202a      	movs	r0, #42	; 0x2a
   190b6:	f7f4 fbb7 	bl	d828 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   190ba:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   190bc:	4806      	ldr	r0, [pc, #24]	; (190d8 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   190be:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   190c0:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   190c2:	60a6      	str	r6, [r4, #8]
}
   190c4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   190c6:	4805      	ldr	r0, [pc, #20]	; (190dc <nrfx_ipc_init+0x48>)
   190c8:	e7fc      	b.n	190c4 <nrfx_ipc_init+0x30>
   190ca:	bf00      	nop
   190cc:	0002609c 	.word	0x0002609c
   190d0:	00022dd6 	.word	0x00022dd6
   190d4:	20009f88 	.word	0x20009f88
   190d8:	0bad0000 	.word	0x0bad0000
   190dc:	0bad000c 	.word	0x0bad000c

000190e0 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   190e0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   190e2:	4604      	mov	r4, r0
   190e4:	b940      	cbnz	r0, 190f8 <nrfx_ipc_config_load+0x18>
   190e6:	4919      	ldr	r1, [pc, #100]	; (1914c <nrfx_ipc_config_load+0x6c>)
   190e8:	4819      	ldr	r0, [pc, #100]	; (19150 <nrfx_ipc_config_load+0x70>)
   190ea:	2244      	movs	r2, #68	; 0x44
   190ec:	f003 fc54 	bl	1c998 <printk>
   190f0:	2144      	movs	r1, #68	; 0x44
   190f2:	4816      	ldr	r0, [pc, #88]	; (1914c <nrfx_ipc_config_load+0x6c>)
   190f4:	f003 fef6 	bl	1cee4 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   190f8:	4b16      	ldr	r3, [pc, #88]	; (19154 <nrfx_ipc_config_load+0x74>)
   190fa:	791b      	ldrb	r3, [r3, #4]
   190fc:	2b01      	cmp	r3, #1
   190fe:	d008      	beq.n	19112 <nrfx_ipc_config_load+0x32>
   19100:	4912      	ldr	r1, [pc, #72]	; (1914c <nrfx_ipc_config_load+0x6c>)
   19102:	4813      	ldr	r0, [pc, #76]	; (19150 <nrfx_ipc_config_load+0x70>)
   19104:	2245      	movs	r2, #69	; 0x45
   19106:	f003 fc47 	bl	1c998 <printk>
   1910a:	2145      	movs	r1, #69	; 0x45
   1910c:	480f      	ldr	r0, [pc, #60]	; (1914c <nrfx_ipc_config_load+0x6c>)
   1910e:	f003 fee9 	bl	1cee4 <assert_post_action>
{
   19112:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   19114:	4a10      	ldr	r2, [pc, #64]	; (19158 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   19116:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1911a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1911e:	3301      	adds	r3, #1
   19120:	2b10      	cmp	r3, #16
   19122:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   19126:	d1f6      	bne.n	19116 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   19128:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1912a:	4a0b      	ldr	r2, [pc, #44]	; (19158 <nrfx_ipc_config_load+0x78>)
   1912c:	f104 0140 	add.w	r1, r4, #64	; 0x40
   19130:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   19134:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19138:	3301      	adds	r3, #1
   1913a:	2b10      	cmp	r3, #16
   1913c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   19140:	d1f6      	bne.n	19130 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   19142:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   19146:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1914a:	bd38      	pop	{r3, r4, r5, pc}
   1914c:	0002609c 	.word	0x0002609c
   19150:	00022dd6 	.word	0x00022dd6
   19154:	20009f88 	.word	0x20009f88
   19158:	4002a000 	.word	0x4002a000

0001915c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1915c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1915e:	4b0a      	ldr	r3, [pc, #40]	; (19188 <nrfx_ipc_receive_event_enable+0x2c>)
{
   19160:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   19162:	791b      	ldrb	r3, [r3, #4]
   19164:	2b01      	cmp	r3, #1
   19166:	d008      	beq.n	1917a <nrfx_ipc_receive_event_enable+0x1e>
   19168:	4908      	ldr	r1, [pc, #32]	; (1918c <nrfx_ipc_receive_event_enable+0x30>)
   1916a:	4809      	ldr	r0, [pc, #36]	; (19190 <nrfx_ipc_receive_event_enable+0x34>)
   1916c:	226a      	movs	r2, #106	; 0x6a
   1916e:	f003 fc13 	bl	1c998 <printk>
   19172:	216a      	movs	r1, #106	; 0x6a
   19174:	4805      	ldr	r0, [pc, #20]	; (1918c <nrfx_ipc_receive_event_enable+0x30>)
   19176:	f003 feb5 	bl	1cee4 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1917a:	2301      	movs	r3, #1
   1917c:	fa03 f404 	lsl.w	r4, r3, r4
   19180:	4b04      	ldr	r3, [pc, #16]	; (19194 <nrfx_ipc_receive_event_enable+0x38>)
   19182:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   19186:	bd10      	pop	{r4, pc}
   19188:	20009f88 	.word	0x20009f88
   1918c:	0002609c 	.word	0x0002609c
   19190:	00022dd6 	.word	0x00022dd6
   19194:	4002a000 	.word	0x4002a000

00019198 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   19198:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1919a:	4b0a      	ldr	r3, [pc, #40]	; (191c4 <nrfx_ipc_receive_event_disable+0x2c>)
{
   1919c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1919e:	791b      	ldrb	r3, [r3, #4]
   191a0:	2b01      	cmp	r3, #1
   191a2:	d008      	beq.n	191b6 <nrfx_ipc_receive_event_disable+0x1e>
   191a4:	4908      	ldr	r1, [pc, #32]	; (191c8 <nrfx_ipc_receive_event_disable+0x30>)
   191a6:	4809      	ldr	r0, [pc, #36]	; (191cc <nrfx_ipc_receive_event_disable+0x34>)
   191a8:	2270      	movs	r2, #112	; 0x70
   191aa:	f003 fbf5 	bl	1c998 <printk>
   191ae:	2170      	movs	r1, #112	; 0x70
   191b0:	4805      	ldr	r0, [pc, #20]	; (191c8 <nrfx_ipc_receive_event_disable+0x30>)
   191b2:	f003 fe97 	bl	1cee4 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   191b6:	2301      	movs	r3, #1
   191b8:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   191bc:	4b04      	ldr	r3, [pc, #16]	; (191d0 <nrfx_ipc_receive_event_disable+0x38>)
   191be:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   191c2:	bd10      	pop	{r4, pc}
   191c4:	20009f88 	.word	0x20009f88
   191c8:	0002609c 	.word	0x0002609c
   191cc:	00022dd6 	.word	0x00022dd6
   191d0:	4002a000 	.word	0x4002a000

000191d4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   191d4:	4b15      	ldr	r3, [pc, #84]	; (1922c <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   191d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191da:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   191de:	4f14      	ldr	r7, [pc, #80]	; (19230 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   191e0:	4635      	mov	r5, r6
   191e2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 19234 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   191e6:	b935      	cbnz	r5, 191f6 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   191e8:	4b13      	ldr	r3, [pc, #76]	; (19238 <nrfx_ipc_irq_handler+0x64>)
   191ea:	4630      	mov	r0, r6
}
   191ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   191f0:	681a      	ldr	r2, [r3, #0]
   191f2:	6899      	ldr	r1, [r3, #8]
   191f4:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   191f6:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   191fa:	2301      	movs	r3, #1
  return __builtin_clz(value);
   191fc:	fab4 f484 	clz	r4, r4
   19200:	40a3      	lsls	r3, r4
   19202:	2c0f      	cmp	r4, #15
   19204:	ea25 0503 	bic.w	r5, r5, r3
   19208:	d90a      	bls.n	19220 <nrfx_ipc_irq_handler+0x4c>
   1920a:	4639      	mov	r1, r7
   1920c:	4640      	mov	r0, r8
   1920e:	f240 12e5 	movw	r2, #485	; 0x1e5
   19212:	f003 fbc1 	bl	1c998 <printk>
   19216:	f240 11e5 	movw	r1, #485	; 0x1e5
   1921a:	4638      	mov	r0, r7
   1921c:	f003 fe62 	bl	1cee4 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19220:	2200      	movs	r2, #0
   19222:	4b06      	ldr	r3, [pc, #24]	; (1923c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   19224:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19226:	511a      	str	r2, [r3, r4]
}
   19228:	e7dd      	b.n	191e6 <nrfx_ipc_irq_handler+0x12>
   1922a:	bf00      	nop
   1922c:	4002a000 	.word	0x4002a000
   19230:	000260d7 	.word	0x000260d7
   19234:	00022dd6 	.word	0x00022dd6
   19238:	20009f88 	.word	0x20009f88
   1923c:	4002a100 	.word	0x4002a100

00019240 <nvmc_word_write>:
   19240:	4a04      	ldr	r2, [pc, #16]	; (19254 <nvmc_word_write+0x14>)
   19242:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   19246:	07db      	lsls	r3, r3, #31
   19248:	d5fb      	bpl.n	19242 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1924a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1924c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   19250:	4770      	bx	lr
   19252:	bf00      	nop
   19254:	40039000 	.word	0x40039000

00019258 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   19258:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1925c:	b510      	push	{r4, lr}
   1925e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   19260:	d30a      	bcc.n	19278 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   19262:	4910      	ldr	r1, [pc, #64]	; (192a4 <nrfx_nvmc_page_erase+0x4c>)
   19264:	4810      	ldr	r0, [pc, #64]	; (192a8 <nrfx_nvmc_page_erase+0x50>)
   19266:	f44f 7282 	mov.w	r2, #260	; 0x104
   1926a:	f003 fb95 	bl	1c998 <printk>
   1926e:	f44f 7182 	mov.w	r1, #260	; 0x104
   19272:	480c      	ldr	r0, [pc, #48]	; (192a4 <nrfx_nvmc_page_erase+0x4c>)
   19274:	f003 fe36 	bl	1cee4 <assert_post_action>
    return !(addr % flash_page_size_get());
   19278:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   1927c:	b97b      	cbnz	r3, 1929e <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1927e:	2202      	movs	r2, #2
   19280:	4b0a      	ldr	r3, [pc, #40]	; (192ac <nrfx_nvmc_page_erase+0x54>)
   19282:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   19286:	f04f 32ff 	mov.w	r2, #4294967295
   1928a:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1928c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   19290:	07d2      	lsls	r2, r2, #31
   19292:	d5fb      	bpl.n	1928c <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   19294:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   19296:	4806      	ldr	r0, [pc, #24]	; (192b0 <nrfx_nvmc_page_erase+0x58>)
   19298:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1929c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1929e:	4805      	ldr	r0, [pc, #20]	; (192b4 <nrfx_nvmc_page_erase+0x5c>)
   192a0:	e7fc      	b.n	1929c <nrfx_nvmc_page_erase+0x44>
   192a2:	bf00      	nop
   192a4:	00026109 	.word	0x00026109
   192a8:	00022dd6 	.word	0x00022dd6
   192ac:	40039000 	.word	0x40039000
   192b0:	0bad0000 	.word	0x0bad0000
   192b4:	0bad000a 	.word	0x0bad000a

000192b8 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   192b8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   192bc:	b570      	push	{r4, r5, r6, lr}
   192be:	4604      	mov	r4, r0
   192c0:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   192c2:	d30a      	bcc.n	192da <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   192c4:	4911      	ldr	r1, [pc, #68]	; (1930c <nrfx_nvmc_word_write+0x54>)
   192c6:	4812      	ldr	r0, [pc, #72]	; (19310 <nrfx_nvmc_word_write+0x58>)
   192c8:	f44f 72c9 	mov.w	r2, #402	; 0x192
   192cc:	f003 fb64 	bl	1c998 <printk>
   192d0:	f44f 71c9 	mov.w	r1, #402	; 0x192
   192d4:	480d      	ldr	r0, [pc, #52]	; (1930c <nrfx_nvmc_word_write+0x54>)
   192d6:	f003 fe05 	bl	1cee4 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   192da:	07a3      	lsls	r3, r4, #30
   192dc:	d00a      	beq.n	192f4 <nrfx_nvmc_word_write+0x3c>
   192de:	490b      	ldr	r1, [pc, #44]	; (1930c <nrfx_nvmc_word_write+0x54>)
   192e0:	480b      	ldr	r0, [pc, #44]	; (19310 <nrfx_nvmc_word_write+0x58>)
   192e2:	f240 1293 	movw	r2, #403	; 0x193
   192e6:	f003 fb57 	bl	1c998 <printk>
   192ea:	f240 1193 	movw	r1, #403	; 0x193
   192ee:	4807      	ldr	r0, [pc, #28]	; (1930c <nrfx_nvmc_word_write+0x54>)
   192f0:	f003 fdf8 	bl	1cee4 <assert_post_action>
   192f4:	2301      	movs	r3, #1
   192f6:	4e07      	ldr	r6, [pc, #28]	; (19314 <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   192f8:	4629      	mov	r1, r5
   192fa:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   192fe:	4620      	mov	r0, r4
   19300:	f7ff ff9e 	bl	19240 <nvmc_word_write>
   19304:	2300      	movs	r3, #0
   19306:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1930a:	bd70      	pop	{r4, r5, r6, pc}
   1930c:	00026109 	.word	0x00026109
   19310:	00022dd6 	.word	0x00022dd6
   19314:	40039000 	.word	0x40039000

00019318 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   19318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1931c:	460e      	mov	r6, r1
   1931e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   19320:	4d0c      	ldr	r5, [pc, #48]	; (19354 <metal_generic_dev_open+0x3c>)
   19322:	f855 4f18 	ldr.w	r4, [r5, #24]!
   19326:	42ac      	cmp	r4, r5
   19328:	d103      	bne.n	19332 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1932a:	f06f 0012 	mvn.w	r0, #18
   1932e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   19332:	4631      	mov	r1, r6
   19334:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   19338:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1933c:	f004 ffb6 	bl	1e2ac <strcmp>
   19340:	b930      	cbnz	r0, 19350 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   19342:	4640      	mov	r0, r8
			*device = dev;
   19344:	f8c7 8000 	str.w	r8, [r7]
}
   19348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1934c:	f007 bcca 	b.w	20ce4 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   19350:	6824      	ldr	r4, [r4, #0]
   19352:	e7e8      	b.n	19326 <metal_generic_dev_open+0xe>
   19354:	20009f94 	.word	0x20009f94

00019358 <metal_bus_find>:
{
   19358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1935c:	4607      	mov	r7, r0
   1935e:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   19360:	4e0b      	ldr	r6, [pc, #44]	; (19390 <metal_bus_find+0x38>)
   19362:	f856 4f08 	ldr.w	r4, [r6, #8]!
   19366:	42b4      	cmp	r4, r6
   19368:	d102      	bne.n	19370 <metal_bus_find+0x18>
	return -ENOENT;
   1936a:	f06f 0001 	mvn.w	r0, #1
   1936e:	e00a      	b.n	19386 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   19370:	4639      	mov	r1, r7
   19372:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   19376:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1937a:	f004 ff97 	bl	1e2ac <strcmp>
   1937e:	b920      	cbnz	r0, 1938a <metal_bus_find+0x32>
   19380:	b11d      	cbz	r5, 1938a <metal_bus_find+0x32>
			*result = bus;
   19382:	f8c5 8000 	str.w	r8, [r5]
}
   19386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1938a:	6824      	ldr	r4, [r4, #0]
   1938c:	e7eb      	b.n	19366 <metal_bus_find+0xe>
   1938e:	bf00      	nop
   19390:	20009f94 	.word	0x20009f94

00019394 <metal_bus_register>:
{
   19394:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   19396:	4604      	mov	r4, r0
   19398:	b910      	cbnz	r0, 193a0 <metal_bus_register+0xc>
		return -EINVAL;
   1939a:	f06f 0015 	mvn.w	r0, #21
}
   1939e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   193a0:	6800      	ldr	r0, [r0, #0]
   193a2:	2800      	cmp	r0, #0
   193a4:	d0f9      	beq.n	1939a <metal_bus_register+0x6>
   193a6:	f004 ff71 	bl	1e28c <strlen>
   193aa:	2800      	cmp	r0, #0
   193ac:	d0f5      	beq.n	1939a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   193ae:	2100      	movs	r1, #0
   193b0:	6820      	ldr	r0, [r4, #0]
   193b2:	f7ff ffd1 	bl	19358 <metal_bus_find>
   193b6:	b1c0      	cbz	r0, 193ea <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   193b8:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   193bc:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   193c0:	4b0c      	ldr	r3, [pc, #48]	; (193f4 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   193c2:	f104 0224 	add.w	r2, r4, #36	; 0x24
   193c6:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   193c8:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   193cc:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   193ce:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   193d0:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   193d2:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   193d4:	781a      	ldrb	r2, [r3, #0]
   193d6:	2a06      	cmp	r2, #6
   193d8:	d905      	bls.n	193e6 <metal_bus_register+0x52>
   193da:	685b      	ldr	r3, [r3, #4]
   193dc:	b143      	cbz	r3, 193f0 <metal_bus_register+0x5c>
   193de:	2007      	movs	r0, #7
   193e0:	6822      	ldr	r2, [r4, #0]
   193e2:	4905      	ldr	r1, [pc, #20]	; (193f8 <metal_bus_register+0x64>)
   193e4:	4798      	blx	r3
	return 0;
   193e6:	2000      	movs	r0, #0
   193e8:	e7d9      	b.n	1939e <metal_bus_register+0xa>
		return -EEXIST;
   193ea:	f06f 0010 	mvn.w	r0, #16
   193ee:	e7d6      	b.n	1939e <metal_bus_register+0xa>
	return 0;
   193f0:	4618      	mov	r0, r3
   193f2:	e7d4      	b.n	1939e <metal_bus_register+0xa>
   193f4:	20009f94 	.word	0x20009f94
   193f8:	00026145 	.word	0x00026145

000193fc <metal_register_generic_device>:
{
   193fc:	b510      	push	{r4, lr}
   193fe:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   19400:	6800      	ldr	r0, [r0, #0]
   19402:	b910      	cbnz	r0, 1940a <metal_register_generic_device+0xe>
		return -EINVAL;
   19404:	f06f 0015 	mvn.w	r0, #21
}
   19408:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1940a:	f004 ff3f 	bl	1e28c <strlen>
   1940e:	2800      	cmp	r0, #0
   19410:	d0f8      	beq.n	19404 <metal_register_generic_device+0x8>
   19412:	68a3      	ldr	r3, [r4, #8]
   19414:	2b01      	cmp	r3, #1
   19416:	d8f5      	bhi.n	19404 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   19418:	4b06      	ldr	r3, [pc, #24]	; (19434 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1941a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1941e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   19420:	4b05      	ldr	r3, [pc, #20]	; (19438 <metal_register_generic_device+0x3c>)
   19422:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   19424:	f103 0018 	add.w	r0, r3, #24
   19428:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1942a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1942c:	61d9      	str	r1, [r3, #28]
	return 0;
   1942e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   19430:	6011      	str	r1, [r2, #0]
}
   19432:	e7e9      	b.n	19408 <metal_register_generic_device+0xc>
   19434:	200083ec 	.word	0x200083ec
   19438:	20009f94 	.word	0x20009f94

0001943c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   1943c:	b538      	push	{r3, r4, r5, lr}
   1943e:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   19440:	4c0d      	ldr	r4, [pc, #52]	; (19478 <metal_init+0x3c>)
   19442:	2220      	movs	r2, #32
   19444:	4620      	mov	r0, r4
   19446:	2100      	movs	r1, #0
   19448:	f004 ff89 	bl	1e35e <memset>

	_metal.common.log_handler   = params->log_handler;
   1944c:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1944e:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   19450:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   19452:	4623      	mov	r3, r4
   19454:	792a      	ldrb	r2, [r5, #4]
   19456:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   1945a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1945e:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   19462:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   19466:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   1946a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1946e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   19472:	f000 b803 	b.w	1947c <metal_sys_init>
   19476:	bf00      	nop
   19478:	20009f94 	.word	0x20009f94

0001947c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1947c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1947e:	4802      	ldr	r0, [pc, #8]	; (19488 <metal_sys_init+0xc>)
   19480:	f7ff ff88 	bl	19394 <metal_bus_register>
	return 0;
}
   19484:	2000      	movs	r0, #0
   19486:	bd08      	pop	{r3, pc}
   19488:	200083ec 	.word	0x200083ec

0001948c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1948c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1948e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   19490:	2b06      	cmp	r3, #6
{
   19492:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   19494:	bf88      	it	hi
   19496:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   19498:	4b09      	ldr	r3, [pc, #36]	; (194c0 <metal_zephyr_log_handler+0x34>)
{
   1949a:	ac05      	add	r4, sp, #20
   1949c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   194a0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   194a4:	4807      	ldr	r0, [pc, #28]	; (194c4 <metal_zephyr_log_handler+0x38>)
   194a6:	f003 fa77 	bl	1c998 <printk>

	va_start(args, format);
	vprintk(format, args);
   194aa:	4621      	mov	r1, r4
   194ac:	4628      	mov	r0, r5
	va_start(args, format);
   194ae:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   194b0:	f7f0 fdb2 	bl	a018 <vprintk>
	va_end(args);
}
   194b4:	b002      	add	sp, #8
   194b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   194ba:	b003      	add	sp, #12
   194bc:	4770      	bx	lr
   194be:	bf00      	nop
   194c0:	000225e8 	.word	0x000225e8
   194c4:	00024047 	.word	0x00024047

000194c8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   194c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194cc:	b087      	sub	sp, #28
   194ce:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   194d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   194d2:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   194d4:	4293      	cmp	r3, r2
{
   194d6:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   194d8:	d349      	bcc.n	1956e <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   194da:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   194dc:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   194e0:	42b4      	cmp	r4, r6
   194e2:	d103      	bne.n	194ec <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   194e4:	2000      	movs	r0, #0
}
   194e6:	b007      	add	sp, #28
   194e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   194ec:	fb0b f704 	mul.w	r7, fp, r4
   194f0:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   194f4:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   194f6:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   194fa:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   194fe:	bb02      	cbnz	r2, 19542 <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   19500:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   19504:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   19508:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1950c:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   1950e:	f8dc c008 	ldr.w	ip, [ip, #8]
   19512:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   19514:	f10c 33ff 	add.w	r3, ip, #4294967295
   19518:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1951c:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   19520:	f1cc 0c00 	rsb	ip, ip, #0
   19524:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   19528:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   1952c:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   19530:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   19534:	4561      	cmp	r1, ip
   19536:	bf28      	it	cs
   19538:	f04f 31ff 	movcs.w	r1, #4294967295
   1953c:	3306      	adds	r3, #6
   1953e:	f007 fb98 	bl	20c72 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   19542:	f858 3007 	ldr.w	r3, [r8, r7]
   19546:	9a05      	ldr	r2, [sp, #20]
   19548:	9302      	str	r3, [sp, #8]
   1954a:	6a2b      	ldr	r3, [r5, #32]
   1954c:	4628      	mov	r0, r5
   1954e:	6a1b      	ldr	r3, [r3, #32]
   19550:	b2a1      	uxth	r1, r4
   19552:	9301      	str	r3, [sp, #4]
   19554:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19556:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1955a:	9300      	str	r3, [sp, #0]
   1955c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   19560:	464b      	mov	r3, r9
   19562:	f007 fbdc 	bl	20d1e <virtqueue_create>
		if (ret)
   19566:	2800      	cmp	r0, #0
   19568:	d1bd      	bne.n	194e6 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1956a:	3401      	adds	r4, #1
   1956c:	e7b8      	b.n	194e0 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1956e:	4801      	ldr	r0, [pc, #4]	; (19574 <virtio_create_virtqueues+0xac>)
   19570:	e7b9      	b.n	194e6 <virtio_create_virtqueues+0x1e>
   19572:	bf00      	nop
   19574:	fffff440 	.word	0xfffff440

00019578 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   19578:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   1957a:	8944      	ldrh	r4, [r0, #10]
   1957c:	428c      	cmp	r4, r1
   1957e:	d312      	bcc.n	195a6 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   19580:	6a03      	ldr	r3, [r0, #32]
   19582:	3c01      	subs	r4, #1
   19584:	885d      	ldrh	r5, [r3, #2]
   19586:	402c      	ands	r4, r5
   19588:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   1958c:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   1958e:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   19590:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   19594:	6a02      	ldr	r2, [r0, #32]
   19596:	8853      	ldrh	r3, [r2, #2]
   19598:	3301      	adds	r3, #1
   1959a:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1959c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1959e:	3301      	adds	r3, #1
   195a0:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   195a2:	2000      	movs	r0, #0
}
   195a4:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   195a6:	4801      	ldr	r0, [pc, #4]	; (195ac <virtqueue_add_consumed_buffer+0x34>)
   195a8:	e7fc      	b.n	195a4 <virtqueue_add_consumed_buffer+0x2c>
   195aa:	bf00      	nop
   195ac:	fffff441 	.word	0xfffff441

000195b0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   195b0:	b4f0      	push	{r4, r5, r6, r7}
   195b2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   195b4:	b148      	cbz	r0, 195ca <rpmsg_send_offchannel_raw+0x1a>
   195b6:	6a00      	ldr	r0, [r0, #32]
   195b8:	b138      	cbz	r0, 195ca <rpmsg_send_offchannel_raw+0x1a>
   195ba:	b133      	cbz	r3, 195ca <rpmsg_send_offchannel_raw+0x1a>
   195bc:	3401      	adds	r4, #1
   195be:	d004      	beq.n	195ca <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   195c0:	6f44      	ldr	r4, [r0, #116]	; 0x74
   195c2:	b114      	cbz	r4, 195ca <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   195c4:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   195c6:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   195c8:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   195ca:	4801      	ldr	r0, [pc, #4]	; (195d0 <rpmsg_send_offchannel_raw+0x20>)
}
   195cc:	bcf0      	pop	{r4, r5, r6, r7}
   195ce:	4770      	bx	lr
   195d0:	fffff82d 	.word	0xfffff82d

000195d4 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   195d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195d8:	460e      	mov	r6, r1
   195da:	4690      	mov	r8, r2
   195dc:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   195de:	4605      	mov	r5, r0
   195e0:	2800      	cmp	r0, #0
   195e2:	d06a      	beq.n	196ba <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   195e4:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   195e8:	4638      	mov	r0, r7
   195ea:	f007 fd2a 	bl	21042 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   195ee:	1c63      	adds	r3, r4, #1
   195f0:	d11a      	bne.n	19628 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   195f2:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   195f4:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   195f8:	095a      	lsrs	r2, r3, #5
   195fa:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   195fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   19602:	f003 011f 	and.w	r1, r3, #31
   19606:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1960a:	07e4      	lsls	r4, r4, #31
   1960c:	d407      	bmi.n	1961e <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1960e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   19612:	2301      	movs	r3, #1
   19614:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   19616:	4313      	orrs	r3, r2
   19618:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   1961c:	e01d      	b.n	1965a <rpmsg_create_ept+0x86>
	     bit++)
   1961e:	3301      	adds	r3, #1
	for (bit = start;
   19620:	2b80      	cmp	r3, #128	; 0x80
   19622:	d1e9      	bne.n	195f8 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   19624:	4c27      	ldr	r4, [pc, #156]	; (196c4 <rpmsg_create_ept+0xf0>)
   19626:	e044      	b.n	196b2 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   19628:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   1962c:	d315      	bcc.n	1965a <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1962e:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   19632:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   19634:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   19638:	d83a      	bhi.n	196b0 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1963a:	0958      	lsrs	r0, r3, #5
   1963c:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   19640:	f003 031f 	and.w	r3, r3, #31
   19644:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   19648:	07d2      	lsls	r2, r2, #31
   1964a:	d4eb      	bmi.n	19624 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1964c:	2201      	movs	r2, #1
   1964e:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   19652:	ea43 030c 	orr.w	r3, r3, ip
   19656:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1965a:	491b      	ldr	r1, [pc, #108]	; (196c8 <rpmsg_create_ept+0xf4>)
   1965c:	2220      	movs	r2, #32
   1965e:	f1b8 0f00 	cmp.w	r8, #0
   19662:	bf18      	it	ne
   19664:	4641      	movne	r1, r8
   19666:	4628      	mov	r0, r5
   19668:	f004 fdfe 	bl	1e268 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   1966c:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   1966e:	4629      	mov	r1, r5
   19670:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   19672:	9b07      	ldr	r3, [sp, #28]
   19674:	4630      	mov	r0, r6
   19676:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   19678:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   1967a:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   1967c:	632b      	str	r3, [r5, #48]	; 0x30
   1967e:	f007 fd5a 	bl	21136 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   19682:	4638      	mov	r0, r7
   19684:	f001 ffc8 	bl	1b618 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   19688:	782c      	ldrb	r4, [r5, #0]
   1968a:	b174      	cbz	r4, 196aa <rpmsg_create_ept+0xd6>
   1968c:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   19690:	b15c      	cbz	r4, 196aa <rpmsg_create_ept+0xd6>
   19692:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19694:	3301      	adds	r3, #1
   19696:	d112      	bne.n	196be <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   19698:	2100      	movs	r1, #0
   1969a:	4628      	mov	r0, r5
   1969c:	f007 fd02 	bl	210a4 <rpmsg_send_ns_message>

	if (status)
   196a0:	4604      	mov	r4, r0
   196a2:	b110      	cbz	r0, 196aa <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   196a4:	4628      	mov	r0, r5
   196a6:	f007 fcd2 	bl	2104e <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   196aa:	4620      	mov	r0, r4
   196ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196b0:	4c06      	ldr	r4, [pc, #24]	; (196cc <rpmsg_create_ept+0xf8>)
   196b2:	4638      	mov	r0, r7
   196b4:	f001 ffb0 	bl	1b618 <z_impl_k_sem_give>
}
   196b8:	e7f7      	b.n	196aa <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   196ba:	4c04      	ldr	r4, [pc, #16]	; (196cc <rpmsg_create_ept+0xf8>)
   196bc:	e7f5      	b.n	196aa <rpmsg_create_ept+0xd6>
   196be:	2400      	movs	r4, #0
   196c0:	e7f3      	b.n	196aa <rpmsg_create_ept+0xd6>
   196c2:	bf00      	nop
   196c4:	fffff829 	.word	0xfffff829
   196c8:	00026267 	.word	0x00026267
   196cc:	fffff82d 	.word	0xfffff82d

000196d0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   196d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196d4:	4605      	mov	r5, r0
   196d6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   196d8:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   196da:	6a03      	ldr	r3, [r0, #32]
   196dc:	b08d      	sub	sp, #52	; 0x34
   196de:	681b      	ldr	r3, [r3, #0]
   196e0:	4692      	mov	sl, r2
   196e2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   196e6:	9103      	str	r1, [sp, #12]
   196e8:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   196ea:	0743      	lsls	r3, r0, #29
   196ec:	d57b      	bpl.n	197e6 <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   196ee:	f643 2398 	movw	r3, #15000	; 0x3a98
   196f2:	2f00      	cmp	r7, #0
   196f4:	bf18      	it	ne
   196f6:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   196f8:	f105 0858 	add.w	r8, r5, #88	; 0x58
   196fc:	4640      	mov	r0, r8
   196fe:	f007 fd3e 	bl	2117e <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   19702:	4628      	mov	r0, r5
   19704:	f007 fe00 	bl	21308 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   19708:	4681      	mov	r9, r0
   1970a:	b130      	cbz	r0, 1971a <rpmsg_virtio_send_offchannel_raw+0x4a>
   1970c:	42b0      	cmp	r0, r6
   1970e:	da04      	bge.n	1971a <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   19710:	4640      	mov	r0, r8
   19712:	f007 fd32 	bl	2117a <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   19716:	4e42      	ldr	r6, [pc, #264]	; (19820 <rpmsg_virtio_send_offchannel_raw+0x150>)
   19718:	e061      	b.n	197de <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   1971a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   1971c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1971e:	b9f3      	cbnz	r3, 1975e <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   19720:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19724:	f10d 0212 	add.w	r2, sp, #18
   19728:	a905      	add	r1, sp, #20
   1972a:	f007 fb88 	bl	20e3e <virtqueue_get_buffer>
		if (!data) {
   1972e:	4604      	mov	r4, r0
   19730:	b948      	cbnz	r0, 19746 <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   19732:	f44f 7100 	mov.w	r1, #512	; 0x200
   19736:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   1973a:	f007 fdf8 	bl	2132e <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   1973e:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   19742:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   19744:	9305      	str	r3, [sp, #20]
   19746:	4640      	mov	r0, r8
   19748:	f007 fd17 	bl	2117a <k_sem_give>
		if (buffer || !tick_count)
   1974c:	2c00      	cmp	r4, #0
   1974e:	d14e      	bne.n	197ee <rpmsg_virtio_send_offchannel_raw+0x11e>
   19750:	2f00      	cmp	r7, #0
   19752:	d04a      	beq.n	197ea <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   19754:	f1b9 0f00 	cmp.w	r9, #0
   19758:	d1dd      	bne.n	19716 <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   1975a:	3f01      	subs	r7, #1
	while (1) {
   1975c:	e7ce      	b.n	196fc <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   1975e:	2b01      	cmp	r3, #1
   19760:	d108      	bne.n	19774 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   19762:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19766:	aa05      	add	r2, sp, #20
   19768:	f10d 0112 	add.w	r1, sp, #18
   1976c:	f007 fba1 	bl	20eb2 <virtqueue_get_available_buffer>
   19770:	4604      	mov	r4, r0
   19772:	e7e8      	b.n	19746 <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   19774:	2400      	movs	r4, #0
   19776:	e7e6      	b.n	19746 <rpmsg_virtio_send_offchannel_raw+0x76>
   19778:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1977a:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   1977c:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   19780:	1ac9      	subs	r1, r1, r3
   19782:	4281      	cmp	r1, r0
   19784:	bf28      	it	cs
   19786:	f04f 31ff 	movcs.w	r1, #4294967295
   1978a:	4633      	mov	r3, r6
   1978c:	465a      	mov	r2, fp
   1978e:	4638      	mov	r0, r7
   19790:	f007 fa34 	bl	20bfc <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   19794:	4286      	cmp	r6, r0
   19796:	d000      	beq.n	1979a <rpmsg_virtio_send_offchannel_raw+0xca>
   19798:	e7fe      	b.n	19798 <rpmsg_virtio_send_offchannel_raw+0xc8>
   1979a:	4640      	mov	r0, r8
   1979c:	f007 fcef 	bl	2117e <__metal_mutex_acquire>
   197a0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   197a2:	9a05      	ldr	r2, [sp, #20]
   197a4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   197a6:	b953      	cbnz	r3, 197be <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   197a8:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   197ac:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   197b0:	2201      	movs	r2, #1
   197b2:	9400      	str	r4, [sp, #0]
   197b4:	a906      	add	r1, sp, #24
   197b6:	f007 fae2 	bl	20d7e <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   197ba:	b148      	cbz	r0, 197d0 <rpmsg_virtio_send_offchannel_raw+0x100>
   197bc:	e7fe      	b.n	197bc <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   197be:	2b01      	cmp	r3, #1
   197c0:	d106      	bne.n	197d0 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   197c2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   197c6:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   197ca:	f7ff fed5 	bl	19578 <virtqueue_add_consumed_buffer>
   197ce:	e7f4      	b.n	197ba <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   197d0:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   197d4:	f007 fbe7 	bl	20fa6 <virtqueue_kick>
   197d8:	4640      	mov	r0, r8
   197da:	f007 fcce 	bl	2117a <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   197de:	4630      	mov	r0, r6
   197e0:	b00d      	add	sp, #52	; 0x34
   197e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   197e6:	4e0f      	ldr	r6, [pc, #60]	; (19824 <rpmsg_virtio_send_offchannel_raw+0x154>)
   197e8:	e7f9      	b.n	197de <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   197ea:	4e0f      	ldr	r6, [pc, #60]	; (19828 <rpmsg_virtio_send_offchannel_raw+0x158>)
   197ec:	e7f7      	b.n	197de <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   197ee:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   197f0:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   197f4:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   197f6:	2300      	movs	r3, #0
   197f8:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   197fa:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   197fc:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   197fe:	4281      	cmp	r1, r0
   19800:	bf28      	it	cs
   19802:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   19806:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   19808:	4638      	mov	r0, r7
   1980a:	2310      	movs	r3, #16
   1980c:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   1980e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   19812:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   19816:	f007 f9f1 	bl	20bfc <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1981a:	2810      	cmp	r0, #16
   1981c:	d0ac      	beq.n	19778 <rpmsg_virtio_send_offchannel_raw+0xa8>
   1981e:	e7fe      	b.n	1981e <rpmsg_virtio_send_offchannel_raw+0x14e>
   19820:	fffff82b 	.word	0xfffff82b
   19824:	fffff82c 	.word	0xfffff82c
   19828:	fffff82e 	.word	0xfffff82e

0001982c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   1982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19830:	460d      	mov	r5, r1
   19832:	b088      	sub	sp, #32
   19834:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   19836:	2100      	movs	r1, #0
   19838:	227c      	movs	r2, #124	; 0x7c
{
   1983a:	4604      	mov	r4, r0
   1983c:	461e      	mov	r6, r3
   1983e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   19842:	f004 fd8c 	bl	1e35e <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19846:	2201      	movs	r2, #1
   19848:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1984c:	4611      	mov	r1, r2
   1984e:	f007 fe0b 	bl	21468 <z_impl_k_sem_init>
   19852:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   19856:	4b5d      	ldr	r3, [pc, #372]	; (199cc <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   19858:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   1985c:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   1985e:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   19860:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   19862:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   19864:	d020      	beq.n	198a8 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   19866:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   19868:	6a03      	ldr	r3, [r0, #32]
   1986a:	689b      	ldr	r3, [r3, #8]
   1986c:	4798      	blx	r3
   1986e:	2300      	movs	r3, #0
   19870:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   19872:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   19876:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   19878:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   1987c:	f1b8 0f00 	cmp.w	r8, #0
   19880:	d01e      	beq.n	198c0 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   19882:	f1b8 0f01 	cmp.w	r8, #1
   19886:	d133      	bne.n	198f0 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   19888:	4b51      	ldr	r3, [pc, #324]	; (199d0 <rpmsg_init_vdev+0x1a4>)
   1988a:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   1988c:	4b51      	ldr	r3, [pc, #324]	; (199d4 <rpmsg_init_vdev+0x1a8>)
   1988e:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   19890:	4b51      	ldr	r3, [pc, #324]	; (199d8 <rpmsg_init_vdev+0x1ac>)
   19892:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   19894:	4b51      	ldr	r3, [pc, #324]	; (199dc <rpmsg_init_vdev+0x1b0>)
   19896:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   19898:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1989a:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1989c:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1989e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   198a2:	e023      	b.n	198ec <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   198a4:	0743      	lsls	r3, r0, #29
   198a6:	d4de      	bmi.n	19866 <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   198a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   198aa:	6a03      	ldr	r3, [r0, #32]
   198ac:	681b      	ldr	r3, [r3, #0]
   198ae:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   198b0:	0642      	lsls	r2, r0, #25
   198b2:	d5f7      	bpl.n	198a4 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   198b4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   198b6:	2100      	movs	r1, #0
   198b8:	6a03      	ldr	r3, [r0, #32]
   198ba:	685b      	ldr	r3, [r3, #4]
   198bc:	4798      	blx	r3
}
   198be:	e7f3      	b.n	198a8 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   198c0:	f1b9 0f00 	cmp.w	r9, #0
   198c4:	d07d      	beq.n	199c2 <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   198c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   198ca:	2b00      	cmp	r3, #0
   198cc:	d07b      	beq.n	199c6 <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   198ce:	4b41      	ldr	r3, [pc, #260]	; (199d4 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   198d0:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   198d4:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   198d6:	4b3e      	ldr	r3, [pc, #248]	; (199d0 <rpmsg_init_vdev+0x1a4>)
   198d8:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   198da:	4b40      	ldr	r3, [pc, #256]	; (199dc <rpmsg_init_vdev+0x1b0>)
   198dc:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   198de:	4b3e      	ldr	r3, [pc, #248]	; (199d8 <rpmsg_init_vdev+0x1ac>)
   198e0:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   198e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   198e4:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   198e6:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   198e8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   198ec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   198f0:	ab04      	add	r3, sp, #16
   198f2:	9300      	str	r3, [sp, #0]
   198f4:	2202      	movs	r2, #2
   198f6:	2100      	movs	r1, #0
   198f8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   198fa:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   198fe:	ab02      	add	r3, sp, #8
   19900:	f7ff fde2 	bl	194c8 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   19904:	4607      	mov	r7, r0
   19906:	2800      	cmp	r0, #0
   19908:	d157      	bne.n	199ba <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   1990a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1990e:	f007 fb24 	bl	20f5a <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   19912:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   19914:	681a      	ldr	r2, [r3, #0]
   19916:	699b      	ldr	r3, [r3, #24]
   19918:	6296      	str	r6, [r2, #40]	; 0x28
   1991a:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   1991c:	f1b8 0f00 	cmp.w	r8, #0
   19920:	d108      	bne.n	19934 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   19922:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   19926:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   19928:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1992a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   1992e:	895b      	ldrh	r3, [r3, #10]
   19930:	4553      	cmp	r3, sl
   19932:	d81f      	bhi.n	19974 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   19934:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19938:	e9c4 4400 	strd	r4, r4, [r4]
   1993c:	b18b      	cbz	r3, 19962 <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   1993e:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   19942:	4927      	ldr	r1, [pc, #156]	; (199e0 <rpmsg_init_vdev+0x1b4>)
   19944:	2220      	movs	r2, #32
   19946:	4628      	mov	r0, r5
   19948:	f004 fc8e 	bl	1e268 <strncpy>
	ept->addr = src;
   1994c:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   1994e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   19952:	4b24      	ldr	r3, [pc, #144]	; (199e4 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   19954:	4629      	mov	r1, r5
   19956:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   19958:	2300      	movs	r3, #0
   1995a:	4620      	mov	r0, r4
   1995c:	63a3      	str	r3, [r4, #56]	; 0x38
   1995e:	f007 fbea 	bl	21136 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   19962:	f1b8 0f00 	cmp.w	r8, #0
   19966:	d128      	bne.n	199ba <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   19968:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1996a:	2104      	movs	r1, #4
   1996c:	6a03      	ldr	r3, [r0, #32]
   1996e:	685b      	ldr	r3, [r3, #4]
   19970:	4798      	blx	r3
}
   19972:	e022      	b.n	199ba <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   19974:	f44f 7100 	mov.w	r1, #512	; 0x200
   19978:	4648      	mov	r0, r9
   1997a:	f007 fcd8 	bl	2132e <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1997e:	4605      	mov	r5, r0
   19980:	b1c8      	cbz	r0, 199b6 <rpmsg_init_vdev+0x18a>
   19982:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   19984:	9006      	str	r0, [sp, #24]
   19986:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   19988:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1998a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1998e:	4281      	cmp	r1, r0
   19990:	bf28      	it	cs
   19992:	f04f 31ff 	movcs.w	r1, #4294967295
   19996:	2200      	movs	r2, #0
   19998:	4630      	mov	r0, r6
   1999a:	f007 f96a 	bl	20c72 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1999e:	2301      	movs	r3, #1
   199a0:	2200      	movs	r2, #0
   199a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   199a6:	9500      	str	r5, [sp, #0]
   199a8:	a906      	add	r1, sp, #24
   199aa:	f007 f9e8 	bl	20d7e <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   199ae:	b918      	cbnz	r0, 199b8 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   199b0:	f10a 0a01 	add.w	sl, sl, #1
   199b4:	e7b9      	b.n	1992a <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   199b6:	480c      	ldr	r0, [pc, #48]	; (199e8 <rpmsg_init_vdev+0x1bc>)
   199b8:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   199ba:	4638      	mov	r0, r7
   199bc:	b008      	add	sp, #32
   199be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   199c2:	4f0a      	ldr	r7, [pc, #40]	; (199ec <rpmsg_init_vdev+0x1c0>)
   199c4:	e7f9      	b.n	199ba <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   199c6:	4f08      	ldr	r7, [pc, #32]	; (199e8 <rpmsg_init_vdev+0x1bc>)
   199c8:	e7f7      	b.n	199ba <rpmsg_init_vdev+0x18e>
   199ca:	bf00      	nop
   199cc:	000196d1 	.word	0x000196d1
   199d0:	000261f6 	.word	0x000261f6
   199d4:	000261f0 	.word	0x000261f0
   199d8:	00021179 	.word	0x00021179
   199dc:	00021249 	.word	0x00021249
   199e0:	000261fc 	.word	0x000261fc
   199e4:	0002118b 	.word	0x0002118b
   199e8:	fffff82e 	.word	0xfffff82e
   199ec:	fffff82d 	.word	0xfffff82d

000199f0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   199f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   199f2:	4b10      	ldr	r3, [pc, #64]	; (19a34 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   199f4:	4f10      	ldr	r7, [pc, #64]	; (19a38 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   199f6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   199fa:	3001      	adds	r0, #1
   199fc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19a00:	42ae      	cmp	r6, r5
   19a02:	d800      	bhi.n	19a06 <z_sys_init_run_level+0x16>
		}
	}
}
   19a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   19a06:	e9d5 3400 	ldrd	r3, r4, [r5]
   19a0a:	4620      	mov	r0, r4
   19a0c:	4798      	blx	r3
   19a0e:	b170      	cbz	r0, 19a2e <z_sys_init_run_level+0x3e>
   19a10:	b16c      	cbz	r4, 19a2e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   19a12:	2301      	movs	r3, #1
				(dev - __device_start));
   19a14:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19a16:	4a09      	ldr	r2, [pc, #36]	; (19a3c <z_sys_init_run_level+0x4c>)
   19a18:	1124      	asrs	r4, r4, #4
   19a1a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   19a1c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19a20:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   19a24:	fa03 f404 	lsl.w	r4, r3, r4
   19a28:	4304      	orrs	r4, r0
   19a2a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19a2e:	3508      	adds	r5, #8
   19a30:	e7e6      	b.n	19a00 <z_sys_init_run_level+0x10>
   19a32:	bf00      	nop
   19a34:	00022608 	.word	0x00022608
   19a38:	20008434 	.word	0x20008434
   19a3c:	200084b4 	.word	0x200084b4

00019a40 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   19a40:	4b08      	ldr	r3, [pc, #32]	; (19a64 <z_device_ready+0x24>)
   19a42:	1ac0      	subs	r0, r0, r3
   19a44:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19a46:	4b08      	ldr	r3, [pc, #32]	; (19a68 <z_device_ready+0x28>)
   19a48:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   19a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   19a4e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19a50:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   19a54:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   19a58:	4210      	tst	r0, r2
}
   19a5a:	bf0c      	ite	eq
   19a5c:	4618      	moveq	r0, r3
   19a5e:	2000      	movne	r0, #0
   19a60:	4770      	bx	lr
   19a62:	bf00      	nop
   19a64:	20008434 	.word	0x20008434
   19a68:	200084b4 	.word	0x200084b4

00019a6c <z_impl_device_get_binding>:
{
   19a6c:	b570      	push	{r4, r5, r6, lr}
   19a6e:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   19a70:	4c0f      	ldr	r4, [pc, #60]	; (19ab0 <z_impl_device_get_binding+0x44>)
   19a72:	4e10      	ldr	r6, [pc, #64]	; (19ab4 <z_impl_device_get_binding+0x48>)
   19a74:	42b4      	cmp	r4, r6
   19a76:	d104      	bne.n	19a82 <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   19a78:	4c0d      	ldr	r4, [pc, #52]	; (19ab0 <z_impl_device_get_binding+0x44>)
   19a7a:	42b4      	cmp	r4, r6
   19a7c:	d10a      	bne.n	19a94 <z_impl_device_get_binding+0x28>
	return NULL;
   19a7e:	2400      	movs	r4, #0
   19a80:	e014      	b.n	19aac <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   19a82:	4620      	mov	r0, r4
   19a84:	f7ff ffdc 	bl	19a40 <z_device_ready>
   19a88:	b110      	cbz	r0, 19a90 <z_impl_device_get_binding+0x24>
   19a8a:	6823      	ldr	r3, [r4, #0]
   19a8c:	42ab      	cmp	r3, r5
   19a8e:	d00d      	beq.n	19aac <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   19a90:	3410      	adds	r4, #16
   19a92:	e7ef      	b.n	19a74 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19a94:	4620      	mov	r0, r4
   19a96:	f7ff ffd3 	bl	19a40 <z_device_ready>
   19a9a:	b908      	cbnz	r0, 19aa0 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   19a9c:	3410      	adds	r4, #16
   19a9e:	e7ec      	b.n	19a7a <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19aa0:	4628      	mov	r0, r5
   19aa2:	6821      	ldr	r1, [r4, #0]
   19aa4:	f004 fc02 	bl	1e2ac <strcmp>
   19aa8:	2800      	cmp	r0, #0
   19aaa:	d1f7      	bne.n	19a9c <z_impl_device_get_binding+0x30>
}
   19aac:	4620      	mov	r0, r4
   19aae:	bd70      	pop	{r4, r5, r6, pc}
   19ab0:	20008434 	.word	0x20008434
   19ab4:	200084b4 	.word	0x200084b4

00019ab8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   19ab8:	4b01      	ldr	r3, [pc, #4]	; (19ac0 <z_impl_z_errno+0x8>)
   19aba:	6898      	ldr	r0, [r3, #8]
}
   19abc:	3070      	adds	r0, #112	; 0x70
   19abe:	4770      	bx	lr
   19ac0:	20009fbc 	.word	0x20009fbc

00019ac4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19ac6:	4604      	mov	r4, r0
   19ac8:	460e      	mov	r6, r1
	__asm__ volatile(
   19aca:	f04f 0320 	mov.w	r3, #32
   19ace:	f3ef 8711 	mrs	r7, BASEPRI
   19ad2:	f383 8811 	msr	BASEPRI, r3
   19ad6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   19ada:	f001 fd97 	bl	1b60c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19ade:	2200      	movs	r2, #0
   19ae0:	2c04      	cmp	r4, #4
   19ae2:	bf98      	it	ls
   19ae4:	4b1d      	ldrls	r3, [pc, #116]	; (19b5c <z_fatal_error+0x98>)
   19ae6:	4605      	mov	r5, r0
	switch (reason) {
   19ae8:	bf94      	ite	ls
   19aea:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   19aee:	4b1c      	ldrhi	r3, [pc, #112]	; (19b60 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19af0:	9200      	str	r2, [sp, #0]
   19af2:	2145      	movs	r1, #69	; 0x45
   19af4:	4622      	mov	r2, r4
   19af6:	481b      	ldr	r0, [pc, #108]	; (19b64 <z_fatal_error+0xa0>)
   19af8:	f002 ff4e 	bl	1c998 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   19afc:	b13e      	cbz	r6, 19b0e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   19afe:	69f3      	ldr	r3, [r6, #28]
   19b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
   19b04:	b11b      	cbz	r3, 19b0e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   19b06:	2145      	movs	r1, #69	; 0x45
   19b08:	4817      	ldr	r0, [pc, #92]	; (19b68 <z_fatal_error+0xa4>)
   19b0a:	f002 ff45 	bl	1c998 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   19b0e:	b135      	cbz	r5, 19b1e <z_fatal_error+0x5a>
   19b10:	4628      	mov	r0, r5
   19b12:	f007 fcc6 	bl	214a2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   19b16:	4603      	mov	r3, r0
   19b18:	b108      	cbz	r0, 19b1e <z_fatal_error+0x5a>
   19b1a:	7802      	ldrb	r2, [r0, #0]
   19b1c:	b902      	cbnz	r2, 19b20 <z_fatal_error+0x5c>
		thread_name = "unknown";
   19b1e:	4b13      	ldr	r3, [pc, #76]	; (19b6c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   19b20:	462a      	mov	r2, r5
   19b22:	2145      	movs	r1, #69	; 0x45
   19b24:	4812      	ldr	r0, [pc, #72]	; (19b70 <z_fatal_error+0xac>)
   19b26:	f002 ff37 	bl	1c998 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   19b2a:	4631      	mov	r1, r6
   19b2c:	4620      	mov	r0, r4
   19b2e:	f7ff f841 	bl	18bb4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   19b32:	2c04      	cmp	r4, #4
   19b34:	d108      	bne.n	19b48 <z_fatal_error+0x84>
   19b36:	490f      	ldr	r1, [pc, #60]	; (19b74 <z_fatal_error+0xb0>)
   19b38:	480f      	ldr	r0, [pc, #60]	; (19b78 <z_fatal_error+0xb4>)
   19b3a:	228e      	movs	r2, #142	; 0x8e
   19b3c:	f002 ff2c 	bl	1c998 <printk>
   19b40:	218e      	movs	r1, #142	; 0x8e
   19b42:	480c      	ldr	r0, [pc, #48]	; (19b74 <z_fatal_error+0xb0>)
   19b44:	f003 f9ce 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   19b48:	f387 8811 	msr	BASEPRI, r7
   19b4c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   19b50:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   19b52:	b003      	add	sp, #12
   19b54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19b58:	f7f4 b9a0 	b.w	de9c <z_impl_k_thread_abort>
   19b5c:	00022620 	.word	0x00022620
   19b60:	000261ff 	.word	0x000261ff
   19b64:	00026215 	.word	0x00026215
   19b68:	00026242 	.word	0x00026242
   19b6c:	0002620d 	.word	0x0002620d
   19b70:	00026268 	.word	0x00026268
   19b74:	00026285 	.word	0x00026285
   19b78:	00022dd6 	.word	0x00022dd6

00019b7c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   19b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b7e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   19b80:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   19b82:	4e15      	ldr	r6, [pc, #84]	; (19bd8 <idle+0x5c>)
	__asm__ volatile(
   19b84:	f04f 0220 	mov.w	r2, #32
   19b88:	f3ef 8311 	mrs	r3, BASEPRI
   19b8c:	f382 8811 	msr	BASEPRI, r2
   19b90:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   19b94:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   19b96:	b188      	cbz	r0, 19bbc <idle+0x40>
			cpu->pending_abort = NULL;
   19b98:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   19b9a:	f383 8811 	msr	BASEPRI, r3
   19b9e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   19ba2:	f001 f93b 	bl	1ae1c <z_thread_single_abort>
	__asm__ volatile(
   19ba6:	f04f 0320 	mov.w	r3, #32
   19baa:	f3ef 8011 	mrs	r0, BASEPRI
   19bae:	f383 8811 	msr	BASEPRI, r3
   19bb2:	f3bf 8f6f 	isb	sy
   19bb6:	f007 fc1d 	bl	213f4 <z_reschedule_irqlock>
			continue;
   19bba:	e7e3      	b.n	19b84 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   19bbc:	f002 f998 	bl	1bef0 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19bc0:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   19bc2:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19bc4:	2802      	cmp	r0, #2
   19bc6:	bfd8      	it	le
   19bc8:	4608      	movle	r0, r1
   19bca:	f002 f9c7 	bl	1bf5c <z_set_timeout_expiry>
		_kernel.idle = ticks;
   19bce:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   19bd0:	f7f3 feaa 	bl	d928 <arch_cpu_idle>
}
   19bd4:	e7d6      	b.n	19b84 <idle+0x8>
   19bd6:	bf00      	nop
   19bd8:	20009fbc 	.word	0x20009fbc

00019bdc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19bdc:	4802      	ldr	r0, [pc, #8]	; (19be8 <z_bss_zero+0xc>)
   19bde:	4a03      	ldr	r2, [pc, #12]	; (19bec <z_bss_zero+0x10>)
   19be0:	2100      	movs	r1, #0
   19be2:	1a12      	subs	r2, r2, r0
   19be4:	f004 bbbb 	b.w	1e35e <memset>
   19be8:	200086c8 	.word	0x200086c8
   19bec:	2000b770 	.word	0x2000b770

00019bf0 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   19bf0:	2201      	movs	r2, #1
{
   19bf2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19bf4:	4b09      	ldr	r3, [pc, #36]	; (19c1c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19bf6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19bf8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19bfa:	f7ff fef9 	bl	199f0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   19bfe:	f002 f819 	bl	1bc34 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   19c02:	2003      	movs	r0, #3
   19c04:	f7ff fef4 	bl	199f0 <z_sys_init_run_level>

	z_init_static_threads();
   19c08:	f001 fe76 	bl	1b8f8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   19c0c:	f7ef fc2c 	bl	9468 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19c10:	4a03      	ldr	r2, [pc, #12]	; (19c20 <bg_thread_main+0x30>)
   19c12:	7b13      	ldrb	r3, [r2, #12]
   19c14:	f023 0301 	bic.w	r3, r3, #1
   19c18:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19c1a:	bd08      	pop	{r3, pc}
   19c1c:	2000b76c 	.word	0x2000b76c
   19c20:	200095a0 	.word	0x200095a0

00019c24 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   19c24:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   19c28:	4b34      	ldr	r3, [pc, #208]	; (19cfc <z_cstart+0xd8>)
   19c2a:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   19c2c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19c30:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   19c34:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19c38:	2400      	movs	r4, #0
   19c3a:	23e0      	movs	r3, #224	; 0xe0
   19c3c:	4d30      	ldr	r5, [pc, #192]	; (19d00 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19c3e:	f04f 0b01 	mov.w	fp, #1
   19c42:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19c46:	77ec      	strb	r4, [r5, #31]
   19c48:	762c      	strb	r4, [r5, #24]
   19c4a:	766c      	strb	r4, [r5, #25]
   19c4c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   19c50:	4e2c      	ldr	r6, [pc, #176]	; (19d04 <z_cstart+0xe0>)
   19c52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19c56:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19c58:	f7f4 f8e8 	bl	de2c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19c5c:	f7f3 fe5e 	bl	d91c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19c60:	f04f 33ff 	mov.w	r3, #4294967295
   19c64:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19c66:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   19c68:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   19c6c:	4d26      	ldr	r5, [pc, #152]	; (19d08 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   19c6e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   19c72:	ab06      	add	r3, sp, #24
   19c74:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19c76:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   19c78:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   19c7c:	f7ff feb8 	bl	199f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19c80:	2001      	movs	r0, #1
   19c82:	f7ff feb5 	bl	199f0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19c86:	f8df a084 	ldr.w	sl, [pc, #132]	; 19d0c <z_cstart+0xe8>
	z_sched_init();
   19c8a:	f001 fb77 	bl	1b37c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19c8e:	4b20      	ldr	r3, [pc, #128]	; (19d10 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   19c90:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19c96:	491f      	ldr	r1, [pc, #124]	; (19d14 <z_cstart+0xf0>)
   19c98:	9305      	str	r3, [sp, #20]
   19c9a:	4630      	mov	r0, r6
   19c9c:	4653      	mov	r3, sl
   19c9e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   19ca2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19ca6:	9400      	str	r4, [sp, #0]
   19ca8:	f001 fd74 	bl	1b794 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19cac:	7b73      	ldrb	r3, [r6, #13]
   19cae:	4680      	mov	r8, r0
   19cb0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   19cb4:	4630      	mov	r0, r6
   19cb6:	7373      	strb	r3, [r6, #13]
   19cb8:	f000 feec 	bl	1aa94 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   19cbc:	230f      	movs	r3, #15
   19cbe:	4f16      	ldr	r7, [pc, #88]	; (19d18 <z_cstart+0xf4>)
   19cc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19cc4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19cc8:	4914      	ldr	r1, [pc, #80]	; (19d1c <z_cstart+0xf8>)
   19cca:	4b15      	ldr	r3, [pc, #84]	; (19d20 <z_cstart+0xfc>)
   19ccc:	4638      	mov	r0, r7
   19cce:	e9cd b404 	strd	fp, r4, [sp, #16]
   19cd2:	e9cd 5400 	strd	r5, r4, [sp]
   19cd6:	f001 fd5d 	bl	1b794 <z_setup_new_thread>
   19cda:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19cdc:	4652      	mov	r2, sl
   19cde:	f023 0304 	bic.w	r3, r3, #4
   19ce2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19ce4:	f105 031c 	add.w	r3, r5, #28
   19ce8:	4641      	mov	r1, r8
   19cea:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   19cec:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19cf0:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   19cf2:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   19cf4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19cf8:	f7f3 fdf6 	bl	d8e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19cfc:	2000d508 	.word	0x2000d508
   19d00:	e000ed00 	.word	0xe000ed00
   19d04:	200095a0 	.word	0x200095a0
   19d08:	20009fbc 	.word	0x20009fbc
   19d0c:	00019bf1 	.word	0x00019bf1
   19d10:	000262f1 	.word	0x000262f1
   19d14:	2000cfc8 	.word	0x2000cfc8
   19d18:	20009510 	.word	0x20009510
   19d1c:	2000d3c8 	.word	0x2000d3c8
   19d20:	00019b7d 	.word	0x00019b7d

00019d24 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   19d24:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19d26:	4c0c      	ldr	r4, [pc, #48]	; (19d58 <statics_init+0x34>)
   19d28:	4d0c      	ldr	r5, [pc, #48]	; (19d5c <statics_init+0x38>)
   19d2a:	4e0d      	ldr	r6, [pc, #52]	; (19d60 <statics_init+0x3c>)
   19d2c:	42ac      	cmp	r4, r5
   19d2e:	d908      	bls.n	19d42 <statics_init+0x1e>
   19d30:	4631      	mov	r1, r6
   19d32:	480c      	ldr	r0, [pc, #48]	; (19d64 <statics_init+0x40>)
   19d34:	2215      	movs	r2, #21
   19d36:	f002 fe2f 	bl	1c998 <printk>
   19d3a:	2115      	movs	r1, #21
   19d3c:	4630      	mov	r0, r6
   19d3e:	f003 f8d1 	bl	1cee4 <assert_post_action>
   19d42:	42ac      	cmp	r4, r5
   19d44:	d301      	bcc.n	19d4a <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   19d46:	2000      	movs	r0, #0
   19d48:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19d4a:	4620      	mov	r0, r4
   19d4c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19d50:	f007 fb02 	bl	21358 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19d54:	3418      	adds	r4, #24
   19d56:	e7e9      	b.n	19d2c <statics_init+0x8>
   19d58:	2000850c 	.word	0x2000850c
   19d5c:	20008524 	.word	0x20008524
   19d60:	000262f9 	.word	0x000262f9
   19d64:	00022dd6 	.word	0x00022dd6

00019d68 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d6c:	b085      	sub	sp, #20
   19d6e:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   19d72:	4606      	mov	r6, r0
   19d74:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   19d76:	4648      	mov	r0, r9
   19d78:	4639      	mov	r1, r7
{
   19d7a:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   19d7c:	f007 fbf2 	bl	21564 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19d80:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   19d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19d88:	f04f 0320 	mov.w	r3, #32
   19d8c:	f3ef 8411 	mrs	r4, BASEPRI
   19d90:	f383 8811 	msr	BASEPRI, r3
   19d94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d98:	4628      	mov	r0, r5
   19d9a:	f001 fe29 	bl	1b9f0 <z_spin_lock_valid>
   19d9e:	b940      	cbnz	r0, 19db2 <k_heap_aligned_alloc+0x4a>
   19da0:	4932      	ldr	r1, [pc, #200]	; (19e6c <k_heap_aligned_alloc+0x104>)
   19da2:	4833      	ldr	r0, [pc, #204]	; (19e70 <k_heap_aligned_alloc+0x108>)
   19da4:	227c      	movs	r2, #124	; 0x7c
   19da6:	f002 fdf7 	bl	1c998 <printk>
   19daa:	217c      	movs	r1, #124	; 0x7c
   19dac:	482f      	ldr	r0, [pc, #188]	; (19e6c <k_heap_aligned_alloc+0x104>)
   19dae:	f003 f899 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   19db2:	4628      	mov	r0, r5
   19db4:	f001 fe38 	bl	1ba28 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19db8:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   19dbc:	b15b      	cbz	r3, 19dd6 <k_heap_aligned_alloc+0x6e>
   19dbe:	ea59 0307 	orrs.w	r3, r9, r7
   19dc2:	d008      	beq.n	19dd6 <k_heap_aligned_alloc+0x6e>
   19dc4:	492b      	ldr	r1, [pc, #172]	; (19e74 <k_heap_aligned_alloc+0x10c>)
   19dc6:	482a      	ldr	r0, [pc, #168]	; (19e70 <k_heap_aligned_alloc+0x108>)
   19dc8:	2224      	movs	r2, #36	; 0x24
   19dca:	f002 fde5 	bl	1c998 <printk>
   19dce:	2124      	movs	r1, #36	; 0x24
   19dd0:	4828      	ldr	r0, [pc, #160]	; (19e74 <k_heap_aligned_alloc+0x10c>)
   19dd2:	f003 f887 	bl	1cee4 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19dd6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 19e6c <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19dda:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19dde:	4642      	mov	r2, r8
   19de0:	4659      	mov	r1, fp
   19de2:	4630      	mov	r0, r6
   19de4:	f7f0 fc10 	bl	a608 <sys_heap_aligned_alloc>
   19de8:	4607      	mov	r7, r0
		now = z_tick_get();
   19dea:	f002 f993 	bl	1c114 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   19dee:	b1a7      	cbz	r7, 19e1a <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19df0:	4628      	mov	r0, r5
   19df2:	f001 fe0b 	bl	1ba0c <z_spin_unlock_valid>
   19df6:	b940      	cbnz	r0, 19e0a <k_heap_aligned_alloc+0xa2>
   19df8:	491c      	ldr	r1, [pc, #112]	; (19e6c <k_heap_aligned_alloc+0x104>)
   19dfa:	481d      	ldr	r0, [pc, #116]	; (19e70 <k_heap_aligned_alloc+0x108>)
   19dfc:	22a7      	movs	r2, #167	; 0xa7
   19dfe:	f002 fdcb 	bl	1c998 <printk>
   19e02:	21a7      	movs	r1, #167	; 0xa7
   19e04:	4819      	ldr	r0, [pc, #100]	; (19e6c <k_heap_aligned_alloc+0x104>)
   19e06:	f003 f86d 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   19e0a:	f384 8811 	msr	BASEPRI, r4
   19e0e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19e12:	4638      	mov	r0, r7
   19e14:	b005      	add	sp, #20
   19e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   19e1a:	9b02      	ldr	r3, [sp, #8]
   19e1c:	1a18      	subs	r0, r3, r0
   19e1e:	9b03      	ldr	r3, [sp, #12]
   19e20:	eb63 0101 	sbc.w	r1, r3, r1
   19e24:	2801      	cmp	r0, #1
   19e26:	f171 0300 	sbcs.w	r3, r1, #0
   19e2a:	dbe1      	blt.n	19df0 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19e2c:	e9cd 0100 	strd	r0, r1, [sp]
   19e30:	4652      	mov	r2, sl
   19e32:	4621      	mov	r1, r4
   19e34:	4628      	mov	r0, r5
   19e36:	f001 f997 	bl	1b168 <z_pend_curr>
	__asm__ volatile(
   19e3a:	f04f 0320 	mov.w	r3, #32
   19e3e:	f3ef 8411 	mrs	r4, BASEPRI
   19e42:	f383 8811 	msr	BASEPRI, r3
   19e46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e4a:	4628      	mov	r0, r5
   19e4c:	f001 fdd0 	bl	1b9f0 <z_spin_lock_valid>
   19e50:	b940      	cbnz	r0, 19e64 <k_heap_aligned_alloc+0xfc>
   19e52:	4649      	mov	r1, r9
   19e54:	4806      	ldr	r0, [pc, #24]	; (19e70 <k_heap_aligned_alloc+0x108>)
   19e56:	227c      	movs	r2, #124	; 0x7c
   19e58:	f002 fd9e 	bl	1c998 <printk>
   19e5c:	217c      	movs	r1, #124	; 0x7c
   19e5e:	4648      	mov	r0, r9
   19e60:	f003 f840 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e64:	4628      	mov	r0, r5
   19e66:	f001 fddf 	bl	1ba28 <z_spin_lock_set_owner>
	return k;
   19e6a:	e7b8      	b.n	19dde <k_heap_aligned_alloc+0x76>
   19e6c:	00022e10 	.word	0x00022e10
   19e70:	00022dd6 	.word	0x00022dd6
   19e74:	000262f9 	.word	0x000262f9

00019e78 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   19e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e7a:	4604      	mov	r4, r0
   19e7c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19e7e:	f100 0514 	add.w	r5, r0, #20
   19e82:	f04f 0320 	mov.w	r3, #32
   19e86:	f3ef 8711 	mrs	r7, BASEPRI
   19e8a:	f383 8811 	msr	BASEPRI, r3
   19e8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e92:	4628      	mov	r0, r5
   19e94:	f001 fdac 	bl	1b9f0 <z_spin_lock_valid>
   19e98:	b940      	cbnz	r0, 19eac <k_heap_free+0x34>
   19e9a:	4916      	ldr	r1, [pc, #88]	; (19ef4 <k_heap_free+0x7c>)
   19e9c:	4816      	ldr	r0, [pc, #88]	; (19ef8 <k_heap_free+0x80>)
   19e9e:	227c      	movs	r2, #124	; 0x7c
   19ea0:	f002 fd7a 	bl	1c998 <printk>
   19ea4:	217c      	movs	r1, #124	; 0x7c
   19ea6:	4813      	ldr	r0, [pc, #76]	; (19ef4 <k_heap_free+0x7c>)
   19ea8:	f003 f81c 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   19eac:	4628      	mov	r0, r5
   19eae:	f001 fdbb 	bl	1ba28 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   19eb2:	4620      	mov	r0, r4
   19eb4:	4631      	mov	r1, r6
   19eb6:	f7f0 fb65 	bl	a584 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   19eba:	f104 000c 	add.w	r0, r4, #12
   19ebe:	f007 fac3 	bl	21448 <z_unpend_all>
   19ec2:	b128      	cbz	r0, 19ed0 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   19ec4:	4639      	mov	r1, r7
   19ec6:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   19ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   19ecc:	f000 bc0e 	b.w	1a6ec <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ed0:	4628      	mov	r0, r5
   19ed2:	f001 fd9b 	bl	1ba0c <z_spin_unlock_valid>
   19ed6:	b940      	cbnz	r0, 19eea <k_heap_free+0x72>
   19ed8:	4906      	ldr	r1, [pc, #24]	; (19ef4 <k_heap_free+0x7c>)
   19eda:	4807      	ldr	r0, [pc, #28]	; (19ef8 <k_heap_free+0x80>)
   19edc:	22a7      	movs	r2, #167	; 0xa7
   19ede:	f002 fd5b 	bl	1c998 <printk>
   19ee2:	21a7      	movs	r1, #167	; 0xa7
   19ee4:	4803      	ldr	r0, [pc, #12]	; (19ef4 <k_heap_free+0x7c>)
   19ee6:	f002 fffd 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   19eea:	f387 8811 	msr	BASEPRI, r7
   19eee:	f3bf 8f6f 	isb	sy
}
   19ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ef4:	00022e10 	.word	0x00022e10
   19ef8:	00022dd6 	.word	0x00022dd6

00019efc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   19efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19efe:	4c14      	ldr	r4, [pc, #80]	; (19f50 <init_mem_slab_module+0x54>)
   19f00:	4d14      	ldr	r5, [pc, #80]	; (19f54 <init_mem_slab_module+0x58>)
   19f02:	4e15      	ldr	r6, [pc, #84]	; (19f58 <init_mem_slab_module+0x5c>)
   19f04:	42ac      	cmp	r4, r5
   19f06:	d908      	bls.n	19f1a <init_mem_slab_module+0x1e>
   19f08:	4631      	mov	r1, r6
   19f0a:	4814      	ldr	r0, [pc, #80]	; (19f5c <init_mem_slab_module+0x60>)
   19f0c:	2242      	movs	r2, #66	; 0x42
   19f0e:	f002 fd43 	bl	1c998 <printk>
   19f12:	2142      	movs	r1, #66	; 0x42
   19f14:	4630      	mov	r0, r6
   19f16:	f002 ffe5 	bl	1cee4 <assert_post_action>
   19f1a:	42ac      	cmp	r4, r5
   19f1c:	d301      	bcc.n	19f22 <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   19f1e:	2000      	movs	r0, #0
	return rc;
}
   19f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19f22:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   19f26:	ea42 0301 	orr.w	r3, r2, r1
   19f2a:	f013 0303 	ands.w	r3, r3, #3
   19f2e:	d10b      	bne.n	19f48 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   19f30:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   19f32:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19f34:	4283      	cmp	r3, r0
   19f36:	d101      	bne.n	19f3c <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19f38:	341c      	adds	r4, #28
   19f3a:	e7e3      	b.n	19f04 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   19f3c:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19f3e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   19f40:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   19f42:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   19f44:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   19f46:	e7f5      	b.n	19f34 <init_mem_slab_module+0x38>
	return rc;
   19f48:	f06f 0015 	mvn.w	r0, #21
   19f4c:	e7e8      	b.n	19f20 <init_mem_slab_module+0x24>
   19f4e:	bf00      	nop
   19f50:	200084b8 	.word	0x200084b8
   19f54:	2000850c 	.word	0x2000850c
   19f58:	0002631b 	.word	0x0002631b
   19f5c:	00022dd6 	.word	0x00022dd6

00019f60 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   19f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19f64:	4604      	mov	r4, r0
   19f66:	460d      	mov	r5, r1
   19f68:	4617      	mov	r7, r2
   19f6a:	461e      	mov	r6, r3
	__asm__ volatile(
   19f6c:	f04f 0320 	mov.w	r3, #32
   19f70:	f3ef 8811 	mrs	r8, BASEPRI
   19f74:	f383 8811 	msr	BASEPRI, r3
   19f78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f7c:	4821      	ldr	r0, [pc, #132]	; (1a004 <k_mem_slab_alloc+0xa4>)
   19f7e:	f001 fd37 	bl	1b9f0 <z_spin_lock_valid>
   19f82:	b940      	cbnz	r0, 19f96 <k_mem_slab_alloc+0x36>
   19f84:	4920      	ldr	r1, [pc, #128]	; (1a008 <k_mem_slab_alloc+0xa8>)
   19f86:	4821      	ldr	r0, [pc, #132]	; (1a00c <k_mem_slab_alloc+0xac>)
   19f88:	227c      	movs	r2, #124	; 0x7c
   19f8a:	f002 fd05 	bl	1c998 <printk>
   19f8e:	217c      	movs	r1, #124	; 0x7c
   19f90:	481d      	ldr	r0, [pc, #116]	; (1a008 <k_mem_slab_alloc+0xa8>)
   19f92:	f002 ffa7 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f96:	481b      	ldr	r0, [pc, #108]	; (1a004 <k_mem_slab_alloc+0xa4>)
   19f98:	f001 fd46 	bl	1ba28 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   19f9c:	6963      	ldr	r3, [r4, #20]
   19f9e:	b1c3      	cbz	r3, 19fd2 <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   19fa0:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   19fa2:	681b      	ldr	r3, [r3, #0]
   19fa4:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   19fa6:	69a3      	ldr	r3, [r4, #24]
   19fa8:	3301      	adds	r3, #1
   19faa:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19fac:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19fae:	4815      	ldr	r0, [pc, #84]	; (1a004 <k_mem_slab_alloc+0xa4>)
   19fb0:	f001 fd2c 	bl	1ba0c <z_spin_unlock_valid>
   19fb4:	b940      	cbnz	r0, 19fc8 <k_mem_slab_alloc+0x68>
   19fb6:	4914      	ldr	r1, [pc, #80]	; (1a008 <k_mem_slab_alloc+0xa8>)
   19fb8:	4814      	ldr	r0, [pc, #80]	; (1a00c <k_mem_slab_alloc+0xac>)
   19fba:	22a7      	movs	r2, #167	; 0xa7
   19fbc:	f002 fcec 	bl	1c998 <printk>
   19fc0:	21a7      	movs	r1, #167	; 0xa7
   19fc2:	4811      	ldr	r0, [pc, #68]	; (1a008 <k_mem_slab_alloc+0xa8>)
   19fc4:	f002 ff8e 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   19fc8:	f388 8811 	msr	BASEPRI, r8
   19fcc:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   19fd0:	e013      	b.n	19ffa <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19fd2:	ea57 0206 	orrs.w	r2, r7, r6
   19fd6:	d103      	bne.n	19fe0 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   19fd8:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   19fdc:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   19fde:	e7e6      	b.n	19fae <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   19fe0:	4622      	mov	r2, r4
   19fe2:	4641      	mov	r1, r8
   19fe4:	e9cd 7600 	strd	r7, r6, [sp]
   19fe8:	4806      	ldr	r0, [pc, #24]	; (1a004 <k_mem_slab_alloc+0xa4>)
   19fea:	f001 f8bd 	bl	1b168 <z_pend_curr>
		if (result == 0) {
   19fee:	4604      	mov	r4, r0
   19ff0:	b918      	cbnz	r0, 19ffa <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   19ff2:	4b07      	ldr	r3, [pc, #28]	; (1a010 <k_mem_slab_alloc+0xb0>)
   19ff4:	689b      	ldr	r3, [r3, #8]
   19ff6:	695b      	ldr	r3, [r3, #20]
   19ff8:	602b      	str	r3, [r5, #0]
}
   19ffa:	4620      	mov	r0, r4
   19ffc:	b002      	add	sp, #8
   19ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a002:	bf00      	nop
   1a004:	20009fb4 	.word	0x20009fb4
   1a008:	00022e10 	.word	0x00022e10
   1a00c:	00022dd6 	.word	0x00022dd6
   1a010:	20009fbc 	.word	0x20009fbc

0001a014 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a016:	4604      	mov	r4, r0
   1a018:	460d      	mov	r5, r1
	__asm__ volatile(
   1a01a:	f04f 0320 	mov.w	r3, #32
   1a01e:	f3ef 8611 	mrs	r6, BASEPRI
   1a022:	f383 8811 	msr	BASEPRI, r3
   1a026:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a02a:	481e      	ldr	r0, [pc, #120]	; (1a0a4 <k_mem_slab_free+0x90>)
   1a02c:	f001 fce0 	bl	1b9f0 <z_spin_lock_valid>
   1a030:	b940      	cbnz	r0, 1a044 <k_mem_slab_free+0x30>
   1a032:	491d      	ldr	r1, [pc, #116]	; (1a0a8 <k_mem_slab_free+0x94>)
   1a034:	481d      	ldr	r0, [pc, #116]	; (1a0ac <k_mem_slab_free+0x98>)
   1a036:	227c      	movs	r2, #124	; 0x7c
   1a038:	f002 fcae 	bl	1c998 <printk>
   1a03c:	217c      	movs	r1, #124	; 0x7c
   1a03e:	481a      	ldr	r0, [pc, #104]	; (1a0a8 <k_mem_slab_free+0x94>)
   1a040:	f002 ff50 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a044:	4817      	ldr	r0, [pc, #92]	; (1a0a4 <k_mem_slab_free+0x90>)
   1a046:	f001 fcef 	bl	1ba28 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1a04a:	6967      	ldr	r7, [r4, #20]
   1a04c:	b97f      	cbnz	r7, 1a06e <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a04e:	4620      	mov	r0, r4
   1a050:	f001 f92c 	bl	1b2ac <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1a054:	b158      	cbz	r0, 1a06e <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a056:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a058:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a05c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1a05e:	f000 fd19 	bl	1aa94 <z_ready_thread>
			z_reschedule(&lock, key);
   1a062:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1a064:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1a068:	480e      	ldr	r0, [pc, #56]	; (1a0a4 <k_mem_slab_free+0x90>)
   1a06a:	f000 bb3f 	b.w	1a6ec <z_reschedule>
	**(char ***) mem = slab->free_list;
   1a06e:	682b      	ldr	r3, [r5, #0]
   1a070:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a072:	480c      	ldr	r0, [pc, #48]	; (1a0a4 <k_mem_slab_free+0x90>)
   1a074:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1a076:	682b      	ldr	r3, [r5, #0]
   1a078:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1a07a:	69a3      	ldr	r3, [r4, #24]
   1a07c:	3b01      	subs	r3, #1
   1a07e:	61a3      	str	r3, [r4, #24]
   1a080:	f001 fcc4 	bl	1ba0c <z_spin_unlock_valid>
   1a084:	b940      	cbnz	r0, 1a098 <k_mem_slab_free+0x84>
   1a086:	4908      	ldr	r1, [pc, #32]	; (1a0a8 <k_mem_slab_free+0x94>)
   1a088:	4808      	ldr	r0, [pc, #32]	; (1a0ac <k_mem_slab_free+0x98>)
   1a08a:	22a7      	movs	r2, #167	; 0xa7
   1a08c:	f002 fc84 	bl	1c998 <printk>
   1a090:	21a7      	movs	r1, #167	; 0xa7
   1a092:	4805      	ldr	r0, [pc, #20]	; (1a0a8 <k_mem_slab_free+0x94>)
   1a094:	f002 ff26 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a098:	f386 8811 	msr	BASEPRI, r6
   1a09c:	f3bf 8f6f 	isb	sy
}
   1a0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0a2:	bf00      	nop
   1a0a4:	20009fb4 	.word	0x20009fb4
   1a0a8:	00022e10 	.word	0x00022e10
   1a0ac:	00022dd6 	.word	0x00022dd6

0001a0b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a0b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a0b4:	4604      	mov	r4, r0
   1a0b6:	4617      	mov	r7, r2
   1a0b8:	461e      	mov	r6, r3
   1a0ba:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a0be:	b143      	cbz	r3, 1a0d2 <z_impl_k_mutex_lock+0x22>
   1a0c0:	495c      	ldr	r1, [pc, #368]	; (1a234 <z_impl_k_mutex_lock+0x184>)
   1a0c2:	485d      	ldr	r0, [pc, #372]	; (1a238 <z_impl_k_mutex_lock+0x188>)
   1a0c4:	227d      	movs	r2, #125	; 0x7d
   1a0c6:	f002 fc67 	bl	1c998 <printk>
   1a0ca:	217d      	movs	r1, #125	; 0x7d
   1a0cc:	4859      	ldr	r0, [pc, #356]	; (1a234 <z_impl_k_mutex_lock+0x184>)
   1a0ce:	f002 ff09 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a0d2:	f04f 0320 	mov.w	r3, #32
   1a0d6:	f3ef 8811 	mrs	r8, BASEPRI
   1a0da:	f383 8811 	msr	BASEPRI, r3
   1a0de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0e2:	4856      	ldr	r0, [pc, #344]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a0e4:	f001 fc84 	bl	1b9f0 <z_spin_lock_valid>
   1a0e8:	b940      	cbnz	r0, 1a0fc <z_impl_k_mutex_lock+0x4c>
   1a0ea:	4955      	ldr	r1, [pc, #340]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a0ec:	4852      	ldr	r0, [pc, #328]	; (1a238 <z_impl_k_mutex_lock+0x188>)
   1a0ee:	227c      	movs	r2, #124	; 0x7c
   1a0f0:	f002 fc52 	bl	1c998 <printk>
   1a0f4:	217c      	movs	r1, #124	; 0x7c
   1a0f6:	4852      	ldr	r0, [pc, #328]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a0f8:	f002 fef4 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a0fc:	484f      	ldr	r0, [pc, #316]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a0fe:	f001 fc93 	bl	1ba28 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a102:	68e3      	ldr	r3, [r4, #12]
   1a104:	4a4f      	ldr	r2, [pc, #316]	; (1a244 <z_impl_k_mutex_lock+0x194>)
   1a106:	b1d3      	cbz	r3, 1a13e <z_impl_k_mutex_lock+0x8e>
   1a108:	68a0      	ldr	r0, [r4, #8]
   1a10a:	6891      	ldr	r1, [r2, #8]
   1a10c:	4288      	cmp	r0, r1
   1a10e:	d033      	beq.n	1a178 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a110:	ea57 0306 	orrs.w	r3, r7, r6
   1a114:	d132      	bne.n	1a17c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a116:	4849      	ldr	r0, [pc, #292]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a118:	f001 fc78 	bl	1ba0c <z_spin_unlock_valid>
   1a11c:	b940      	cbnz	r0, 1a130 <z_impl_k_mutex_lock+0x80>
   1a11e:	4948      	ldr	r1, [pc, #288]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a120:	4845      	ldr	r0, [pc, #276]	; (1a238 <z_impl_k_mutex_lock+0x188>)
   1a122:	22a7      	movs	r2, #167	; 0xa7
   1a124:	f002 fc38 	bl	1c998 <printk>
   1a128:	21a7      	movs	r1, #167	; 0xa7
   1a12a:	4845      	ldr	r0, [pc, #276]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a12c:	f002 feda 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a130:	f388 8811 	msr	BASEPRI, r8
   1a134:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1a138:	f06f 000f 	mvn.w	r0, #15
   1a13c:	e019      	b.n	1a172 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1a13e:	6891      	ldr	r1, [r2, #8]
   1a140:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1a144:	3301      	adds	r3, #1
   1a146:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a148:	6893      	ldr	r3, [r2, #8]
   1a14a:	483c      	ldr	r0, [pc, #240]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a14c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1a14e:	60a3      	str	r3, [r4, #8]
   1a150:	f001 fc5c 	bl	1ba0c <z_spin_unlock_valid>
   1a154:	b940      	cbnz	r0, 1a168 <z_impl_k_mutex_lock+0xb8>
   1a156:	493a      	ldr	r1, [pc, #232]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a158:	4837      	ldr	r0, [pc, #220]	; (1a238 <z_impl_k_mutex_lock+0x188>)
   1a15a:	22a7      	movs	r2, #167	; 0xa7
   1a15c:	f002 fc1c 	bl	1c998 <printk>
   1a160:	21a7      	movs	r1, #167	; 0xa7
   1a162:	4837      	ldr	r0, [pc, #220]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a164:	f002 febe 	bl	1cee4 <assert_post_action>
   1a168:	f388 8811 	msr	BASEPRI, r8
   1a16c:	f3bf 8f6f 	isb	sy
		return 0;
   1a170:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1a172:	b002      	add	sp, #8
   1a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a178:	6921      	ldr	r1, [r4, #16]
   1a17a:	e7e3      	b.n	1a144 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a17c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a180:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a184:	4299      	cmp	r1, r3
   1a186:	bfa8      	it	ge
   1a188:	4619      	movge	r1, r3
   1a18a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a18e:	4299      	cmp	r1, r3
   1a190:	da3b      	bge.n	1a20a <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   1a192:	f007 f8e9 	bl	21368 <adjust_owner_prio.isra.0>
   1a196:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a198:	4622      	mov	r2, r4
   1a19a:	4641      	mov	r1, r8
   1a19c:	e9cd 7600 	strd	r7, r6, [sp]
   1a1a0:	4826      	ldr	r0, [pc, #152]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a1a2:	f000 ffe1 	bl	1b168 <z_pend_curr>
	if (got_mutex == 0) {
   1a1a6:	2800      	cmp	r0, #0
   1a1a8:	d0e3      	beq.n	1a172 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1a1aa:	f04f 0320 	mov.w	r3, #32
   1a1ae:	f3ef 8611 	mrs	r6, BASEPRI
   1a1b2:	f383 8811 	msr	BASEPRI, r3
   1a1b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1ba:	4820      	ldr	r0, [pc, #128]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a1bc:	f001 fc18 	bl	1b9f0 <z_spin_lock_valid>
   1a1c0:	b940      	cbnz	r0, 1a1d4 <z_impl_k_mutex_lock+0x124>
   1a1c2:	491f      	ldr	r1, [pc, #124]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a1c4:	481c      	ldr	r0, [pc, #112]	; (1a238 <z_impl_k_mutex_lock+0x188>)
   1a1c6:	227c      	movs	r2, #124	; 0x7c
   1a1c8:	f002 fbe6 	bl	1c998 <printk>
   1a1cc:	217c      	movs	r1, #124	; 0x7c
   1a1ce:	481c      	ldr	r0, [pc, #112]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a1d0:	f002 fe88 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1d4:	4819      	ldr	r0, [pc, #100]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a1d6:	f001 fc27 	bl	1ba28 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a1da:	6823      	ldr	r3, [r4, #0]
   1a1dc:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a1de:	42a3      	cmp	r3, r4
   1a1e0:	d007      	beq.n	1a1f2 <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a1e2:	b133      	cbz	r3, 1a1f2 <z_impl_k_mutex_lock+0x142>
   1a1e4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a1e8:	4299      	cmp	r1, r3
   1a1ea:	bfa8      	it	ge
   1a1ec:	4619      	movge	r1, r3
   1a1ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a1f2:	68a0      	ldr	r0, [r4, #8]
   1a1f4:	f007 f8b8 	bl	21368 <adjust_owner_prio.isra.0>
   1a1f8:	b900      	cbnz	r0, 1a1fc <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   1a1fa:	b145      	cbz	r5, 1a20e <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   1a1fc:	4631      	mov	r1, r6
   1a1fe:	480f      	ldr	r0, [pc, #60]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a200:	f000 fa74 	bl	1a6ec <z_reschedule>
	return -EAGAIN;
   1a204:	f06f 000a 	mvn.w	r0, #10
   1a208:	e7b3      	b.n	1a172 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   1a20a:	2500      	movs	r5, #0
   1a20c:	e7c4      	b.n	1a198 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a20e:	480b      	ldr	r0, [pc, #44]	; (1a23c <z_impl_k_mutex_lock+0x18c>)
   1a210:	f001 fbfc 	bl	1ba0c <z_spin_unlock_valid>
   1a214:	b940      	cbnz	r0, 1a228 <z_impl_k_mutex_lock+0x178>
   1a216:	490a      	ldr	r1, [pc, #40]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a218:	4807      	ldr	r0, [pc, #28]	; (1a238 <z_impl_k_mutex_lock+0x188>)
   1a21a:	22a7      	movs	r2, #167	; 0xa7
   1a21c:	f002 fbbc 	bl	1c998 <printk>
   1a220:	21a7      	movs	r1, #167	; 0xa7
   1a222:	4807      	ldr	r0, [pc, #28]	; (1a240 <z_impl_k_mutex_lock+0x190>)
   1a224:	f002 fe5e 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a228:	f386 8811 	msr	BASEPRI, r6
   1a22c:	f3bf 8f6f 	isb	sy
   1a230:	e7e8      	b.n	1a204 <z_impl_k_mutex_lock+0x154>
   1a232:	bf00      	nop
   1a234:	00026340 	.word	0x00026340
   1a238:	00022dd6 	.word	0x00022dd6
   1a23c:	20009fb8 	.word	0x20009fb8
   1a240:	00022e10 	.word	0x00022e10
   1a244:	20009fbc 	.word	0x20009fbc

0001a248 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a248:	b538      	push	{r3, r4, r5, lr}
   1a24a:	4604      	mov	r4, r0
   1a24c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a250:	b143      	cbz	r3, 1a264 <z_impl_k_mutex_unlock+0x1c>
   1a252:	4946      	ldr	r1, [pc, #280]	; (1a36c <z_impl_k_mutex_unlock+0x124>)
   1a254:	4846      	ldr	r0, [pc, #280]	; (1a370 <z_impl_k_mutex_unlock+0x128>)
   1a256:	22d8      	movs	r2, #216	; 0xd8
   1a258:	f002 fb9e 	bl	1c998 <printk>
   1a25c:	21d8      	movs	r1, #216	; 0xd8
   1a25e:	4843      	ldr	r0, [pc, #268]	; (1a36c <z_impl_k_mutex_unlock+0x124>)
   1a260:	f002 fe40 	bl	1cee4 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1a264:	68a3      	ldr	r3, [r4, #8]
   1a266:	2b00      	cmp	r3, #0
   1a268:	d079      	beq.n	1a35e <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a26a:	4d42      	ldr	r5, [pc, #264]	; (1a374 <z_impl_k_mutex_unlock+0x12c>)
   1a26c:	68aa      	ldr	r2, [r5, #8]
   1a26e:	4293      	cmp	r3, r2
   1a270:	d178      	bne.n	1a364 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1a272:	68e3      	ldr	r3, [r4, #12]
   1a274:	b943      	cbnz	r3, 1a288 <z_impl_k_mutex_unlock+0x40>
   1a276:	493d      	ldr	r1, [pc, #244]	; (1a36c <z_impl_k_mutex_unlock+0x124>)
   1a278:	483d      	ldr	r0, [pc, #244]	; (1a370 <z_impl_k_mutex_unlock+0x128>)
   1a27a:	22ea      	movs	r2, #234	; 0xea
   1a27c:	f002 fb8c 	bl	1c998 <printk>
   1a280:	21ea      	movs	r1, #234	; 0xea
   1a282:	483a      	ldr	r0, [pc, #232]	; (1a36c <z_impl_k_mutex_unlock+0x124>)
   1a284:	f002 fe2e 	bl	1cee4 <assert_post_action>
   1a288:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   1a28c:	b153      	cbz	r3, 1a2a4 <z_impl_k_mutex_unlock+0x5c>
   1a28e:	493a      	ldr	r1, [pc, #232]	; (1a378 <z_impl_k_mutex_unlock+0x130>)
   1a290:	4837      	ldr	r0, [pc, #220]	; (1a370 <z_impl_k_mutex_unlock+0x128>)
   1a292:	f44f 7289 	mov.w	r2, #274	; 0x112
   1a296:	f002 fb7f 	bl	1c998 <printk>
   1a29a:	f44f 7189 	mov.w	r1, #274	; 0x112
   1a29e:	4836      	ldr	r0, [pc, #216]	; (1a378 <z_impl_k_mutex_unlock+0x130>)
   1a2a0:	f002 fe20 	bl	1cee4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a2a4:	68ab      	ldr	r3, [r5, #8]
   1a2a6:	7bdb      	ldrb	r3, [r3, #15]
   1a2a8:	2b01      	cmp	r3, #1
   1a2aa:	d10a      	bne.n	1a2c2 <z_impl_k_mutex_unlock+0x7a>
   1a2ac:	4932      	ldr	r1, [pc, #200]	; (1a378 <z_impl_k_mutex_unlock+0x130>)
   1a2ae:	4830      	ldr	r0, [pc, #192]	; (1a370 <z_impl_k_mutex_unlock+0x128>)
   1a2b0:	f240 1213 	movw	r2, #275	; 0x113
   1a2b4:	f002 fb70 	bl	1c998 <printk>
   1a2b8:	f240 1113 	movw	r1, #275	; 0x113
   1a2bc:	482e      	ldr	r0, [pc, #184]	; (1a378 <z_impl_k_mutex_unlock+0x130>)
   1a2be:	f002 fe11 	bl	1cee4 <assert_post_action>

	--_current->base.sched_locked;
   1a2c2:	68aa      	ldr	r2, [r5, #8]
   1a2c4:	7bd3      	ldrb	r3, [r2, #15]
   1a2c6:	3b01      	subs	r3, #1
   1a2c8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1a2ca:	68e3      	ldr	r3, [r4, #12]
   1a2cc:	2b01      	cmp	r3, #1
   1a2ce:	d005      	beq.n	1a2dc <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   1a2d0:	3b01      	subs	r3, #1
   1a2d2:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1a2d4:	f000 fb38 	bl	1a948 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1a2d8:	2000      	movs	r0, #0
}
   1a2da:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a2dc:	f04f 0320 	mov.w	r3, #32
   1a2e0:	f3ef 8511 	mrs	r5, BASEPRI
   1a2e4:	f383 8811 	msr	BASEPRI, r3
   1a2e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a2ec:	4823      	ldr	r0, [pc, #140]	; (1a37c <z_impl_k_mutex_unlock+0x134>)
   1a2ee:	f001 fb7f 	bl	1b9f0 <z_spin_lock_valid>
   1a2f2:	b940      	cbnz	r0, 1a306 <z_impl_k_mutex_unlock+0xbe>
   1a2f4:	4922      	ldr	r1, [pc, #136]	; (1a380 <z_impl_k_mutex_unlock+0x138>)
   1a2f6:	481e      	ldr	r0, [pc, #120]	; (1a370 <z_impl_k_mutex_unlock+0x128>)
   1a2f8:	227c      	movs	r2, #124	; 0x7c
   1a2fa:	f002 fb4d 	bl	1c998 <printk>
   1a2fe:	217c      	movs	r1, #124	; 0x7c
   1a300:	481f      	ldr	r0, [pc, #124]	; (1a380 <z_impl_k_mutex_unlock+0x138>)
   1a302:	f002 fdef 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a306:	481d      	ldr	r0, [pc, #116]	; (1a37c <z_impl_k_mutex_unlock+0x134>)
   1a308:	f001 fb8e 	bl	1ba28 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a30c:	6921      	ldr	r1, [r4, #16]
   1a30e:	68a0      	ldr	r0, [r4, #8]
   1a310:	f007 f82a 	bl	21368 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a314:	4620      	mov	r0, r4
   1a316:	f000 ffc9 	bl	1b2ac <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a31a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a31c:	b160      	cbz	r0, 1a338 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a31e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a322:	6122      	str	r2, [r4, #16]
   1a324:	2200      	movs	r2, #0
   1a326:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   1a32a:	f000 fbb3 	bl	1aa94 <z_ready_thread>
		z_reschedule(&lock, key);
   1a32e:	4629      	mov	r1, r5
   1a330:	4812      	ldr	r0, [pc, #72]	; (1a37c <z_impl_k_mutex_unlock+0x134>)
   1a332:	f000 f9db 	bl	1a6ec <z_reschedule>
   1a336:	e7cd      	b.n	1a2d4 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   1a338:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a33a:	4810      	ldr	r0, [pc, #64]	; (1a37c <z_impl_k_mutex_unlock+0x134>)
   1a33c:	f001 fb66 	bl	1ba0c <z_spin_unlock_valid>
   1a340:	b940      	cbnz	r0, 1a354 <z_impl_k_mutex_unlock+0x10c>
   1a342:	490f      	ldr	r1, [pc, #60]	; (1a380 <z_impl_k_mutex_unlock+0x138>)
   1a344:	480a      	ldr	r0, [pc, #40]	; (1a370 <z_impl_k_mutex_unlock+0x128>)
   1a346:	22a7      	movs	r2, #167	; 0xa7
   1a348:	f002 fb26 	bl	1c998 <printk>
   1a34c:	21a7      	movs	r1, #167	; 0xa7
   1a34e:	480c      	ldr	r0, [pc, #48]	; (1a380 <z_impl_k_mutex_unlock+0x138>)
   1a350:	f002 fdc8 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a354:	f385 8811 	msr	BASEPRI, r5
   1a358:	f3bf 8f6f 	isb	sy
   1a35c:	e7ba      	b.n	1a2d4 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   1a35e:	f06f 0015 	mvn.w	r0, #21
   1a362:	e7ba      	b.n	1a2da <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1a364:	f04f 30ff 	mov.w	r0, #4294967295
   1a368:	e7b7      	b.n	1a2da <z_impl_k_mutex_unlock+0x92>
   1a36a:	bf00      	nop
   1a36c:	00026340 	.word	0x00026340
   1a370:	00022dd6 	.word	0x00022dd6
   1a374:	20009fbc 	.word	0x20009fbc
   1a378:	00026362 	.word	0x00026362
   1a37c:	20009fb8 	.word	0x20009fb8
   1a380:	00022e10 	.word	0x00022e10

0001a384 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1a384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a388:	4604      	mov	r4, r0
   1a38a:	460d      	mov	r5, r1
   1a38c:	4690      	mov	r8, r2
   1a38e:	4699      	mov	r9, r3
   1a390:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a394:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a398:	f04f 0320 	mov.w	r3, #32
   1a39c:	f3ef 8711 	mrs	r7, BASEPRI
   1a3a0:	f383 8811 	msr	BASEPRI, r3
   1a3a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a3a8:	4630      	mov	r0, r6
   1a3aa:	f001 fb21 	bl	1b9f0 <z_spin_lock_valid>
   1a3ae:	b940      	cbnz	r0, 1a3c2 <queue_insert+0x3e>
   1a3b0:	4937      	ldr	r1, [pc, #220]	; (1a490 <queue_insert+0x10c>)
   1a3b2:	4838      	ldr	r0, [pc, #224]	; (1a494 <queue_insert+0x110>)
   1a3b4:	227c      	movs	r2, #124	; 0x7c
   1a3b6:	f002 faef 	bl	1c998 <printk>
   1a3ba:	217c      	movs	r1, #124	; 0x7c
   1a3bc:	4834      	ldr	r0, [pc, #208]	; (1a490 <queue_insert+0x10c>)
   1a3be:	f002 fd91 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a3c2:	4630      	mov	r0, r6
   1a3c4:	f001 fb30 	bl	1ba28 <z_spin_lock_set_owner>

	if (is_append) {
   1a3c8:	f1ba 0f00 	cmp.w	sl, #0
   1a3cc:	d000      	beq.n	1a3d0 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1a3ce:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a3d0:	f104 000c 	add.w	r0, r4, #12
   1a3d4:	f000 ff6a 	bl	1b2ac <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1a3d8:	b160      	cbz	r0, 1a3f4 <queue_insert+0x70>
   1a3da:	2400      	movs	r4, #0
   1a3dc:	f8c0 8014 	str.w	r8, [r0, #20]
   1a3e0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1a3e4:	f000 fb56 	bl	1aa94 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a3e8:	4630      	mov	r0, r6
   1a3ea:	4639      	mov	r1, r7
   1a3ec:	f000 f97e 	bl	1a6ec <z_reschedule>
	return 0;
   1a3f0:	2000      	movs	r0, #0
   1a3f2:	e019      	b.n	1a428 <queue_insert+0xa4>
	if (alloc) {
   1a3f4:	f1b9 0f00 	cmp.w	r9, #0
   1a3f8:	d028      	beq.n	1a44c <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1a3fa:	2108      	movs	r1, #8
   1a3fc:	f002 fa12 	bl	1c824 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a400:	b9a0      	cbnz	r0, 1a42c <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a402:	4630      	mov	r0, r6
   1a404:	f001 fb02 	bl	1ba0c <z_spin_unlock_valid>
   1a408:	b940      	cbnz	r0, 1a41c <queue_insert+0x98>
   1a40a:	4921      	ldr	r1, [pc, #132]	; (1a490 <queue_insert+0x10c>)
   1a40c:	4821      	ldr	r0, [pc, #132]	; (1a494 <queue_insert+0x110>)
   1a40e:	22a7      	movs	r2, #167	; 0xa7
   1a410:	f002 fac2 	bl	1c998 <printk>
   1a414:	21a7      	movs	r1, #167	; 0xa7
   1a416:	481e      	ldr	r0, [pc, #120]	; (1a490 <queue_insert+0x10c>)
   1a418:	f002 fd64 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a41c:	f387 8811 	msr	BASEPRI, r7
   1a420:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a424:	f06f 000b 	mvn.w	r0, #11
}
   1a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1a42c:	2301      	movs	r3, #1
		anode->data = data;
   1a42e:	f8c0 8004 	str.w	r8, [r0, #4]
   1a432:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a434:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a436:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1a43a:	b95d      	cbnz	r5, 1a454 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a43c:	6823      	ldr	r3, [r4, #0]
   1a43e:	4313      	orrs	r3, r2
   1a440:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a442:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1a444:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a446:	b973      	cbnz	r3, 1a466 <queue_insert+0xe2>
	list->tail = node;
   1a448:	6060      	str	r0, [r4, #4]
}
   1a44a:	e00c      	b.n	1a466 <queue_insert+0xe2>
}
   1a44c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1a44e:	f8c8 9000 	str.w	r9, [r8]
}
   1a452:	e7ef      	b.n	1a434 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a454:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a456:	f033 0303 	bics.w	r3, r3, #3
   1a45a:	d110      	bne.n	1a47e <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a45c:	6002      	str	r2, [r0, #0]
	return list->tail;
   1a45e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a460:	b93a      	cbnz	r2, 1a472 <queue_insert+0xee>
	list->head = node;
   1a462:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a466:	2104      	movs	r1, #4
   1a468:	f104 0014 	add.w	r0, r4, #20
   1a46c:	f007 f8eb 	bl	21646 <z_handle_obj_poll_events>
   1a470:	e7ba      	b.n	1a3e8 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a472:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a474:	f003 0303 	and.w	r3, r3, #3
   1a478:	4303      	orrs	r3, r0
   1a47a:	6013      	str	r3, [r2, #0]
   1a47c:	e7e4      	b.n	1a448 <queue_insert+0xc4>
   1a47e:	4313      	orrs	r3, r2
   1a480:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a482:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a484:	f003 0303 	and.w	r3, r3, #3
   1a488:	4303      	orrs	r3, r0
   1a48a:	602b      	str	r3, [r5, #0]
}
   1a48c:	e7eb      	b.n	1a466 <queue_insert+0xe2>
   1a48e:	bf00      	nop
   1a490:	00022e10 	.word	0x00022e10
   1a494:	00022dd6 	.word	0x00022dd6

0001a498 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a49c:	4605      	mov	r5, r0
   1a49e:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1a4a0:	460c      	mov	r4, r1
   1a4a2:	2900      	cmp	r1, #0
   1a4a4:	d045      	beq.n	1a532 <k_queue_append_list+0x9a>
   1a4a6:	2a00      	cmp	r2, #0
   1a4a8:	d043      	beq.n	1a532 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a4aa:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1a4ae:	f04f 0320 	mov.w	r3, #32
   1a4b2:	f3ef 8911 	mrs	r9, BASEPRI
   1a4b6:	f383 8811 	msr	BASEPRI, r3
   1a4ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4be:	4638      	mov	r0, r7
   1a4c0:	f001 fa96 	bl	1b9f0 <z_spin_lock_valid>
   1a4c4:	b940      	cbnz	r0, 1a4d8 <k_queue_append_list+0x40>
   1a4c6:	491c      	ldr	r1, [pc, #112]	; (1a538 <k_queue_append_list+0xa0>)
   1a4c8:	481c      	ldr	r0, [pc, #112]	; (1a53c <k_queue_append_list+0xa4>)
   1a4ca:	227c      	movs	r2, #124	; 0x7c
   1a4cc:	f002 fa64 	bl	1c998 <printk>
   1a4d0:	217c      	movs	r1, #124	; 0x7c
   1a4d2:	4819      	ldr	r0, [pc, #100]	; (1a538 <k_queue_append_list+0xa0>)
   1a4d4:	f002 fd06 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a4d8:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1a4da:	f105 080c 	add.w	r8, r5, #12
   1a4de:	f001 faa3 	bl	1ba28 <z_spin_lock_set_owner>
   1a4e2:	4640      	mov	r0, r8
   1a4e4:	f000 fee2 	bl	1b2ac <z_unpend_first_thread>
   1a4e8:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   1a4ec:	b920      	cbnz	r0, 1a4f8 <k_queue_append_list+0x60>
	return list->tail;
   1a4ee:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a4f0:	b9ca      	cbnz	r2, 1a526 <k_queue_append_list+0x8e>
	list->head = node;
   1a4f2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a4f4:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a4f6:	e00a      	b.n	1a50e <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   1a4f8:	6144      	str	r4, [r0, #20]
   1a4fa:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1a4fe:	f000 fac9 	bl	1aa94 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1a502:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1a504:	4640      	mov	r0, r8
   1a506:	f000 fed1 	bl	1b2ac <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1a50a:	2c00      	cmp	r4, #0
   1a50c:	d1ee      	bne.n	1a4ec <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a50e:	2104      	movs	r1, #4
   1a510:	f105 0014 	add.w	r0, r5, #20
   1a514:	f007 f897 	bl	21646 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a518:	4638      	mov	r0, r7
   1a51a:	4649      	mov	r1, r9
   1a51c:	f000 f8e6 	bl	1a6ec <z_reschedule>
	return 0;
   1a520:	2000      	movs	r0, #0
}
   1a522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a526:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a528:	f003 0303 	and.w	r3, r3, #3
   1a52c:	431c      	orrs	r4, r3
   1a52e:	6014      	str	r4, [r2, #0]
}
   1a530:	e7e0      	b.n	1a4f4 <k_queue_append_list+0x5c>
		return -EINVAL;
   1a532:	f06f 0015 	mvn.w	r0, #21
   1a536:	e7f4      	b.n	1a522 <k_queue_append_list+0x8a>
   1a538:	00022e10 	.word	0x00022e10
   1a53c:	00022dd6 	.word	0x00022dd6

0001a540 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a544:	4605      	mov	r5, r0
   1a546:	4690      	mov	r8, r2
   1a548:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a54a:	f100 0608 	add.w	r6, r0, #8
   1a54e:	f04f 0320 	mov.w	r3, #32
   1a552:	f3ef 8911 	mrs	r9, BASEPRI
   1a556:	f383 8811 	msr	BASEPRI, r3
   1a55a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a55e:	4630      	mov	r0, r6
   1a560:	f001 fa46 	bl	1b9f0 <z_spin_lock_valid>
   1a564:	b940      	cbnz	r0, 1a578 <z_impl_k_queue_get+0x38>
   1a566:	4921      	ldr	r1, [pc, #132]	; (1a5ec <z_impl_k_queue_get+0xac>)
   1a568:	4821      	ldr	r0, [pc, #132]	; (1a5f0 <z_impl_k_queue_get+0xb0>)
   1a56a:	227c      	movs	r2, #124	; 0x7c
   1a56c:	f002 fa14 	bl	1c998 <printk>
   1a570:	217c      	movs	r1, #124	; 0x7c
   1a572:	481e      	ldr	r0, [pc, #120]	; (1a5ec <z_impl_k_queue_get+0xac>)
   1a574:	f002 fcb6 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a578:	4630      	mov	r0, r6
   1a57a:	f001 fa55 	bl	1ba28 <z_spin_lock_set_owner>
	return list->head;
   1a57e:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a580:	b314      	cbz	r4, 1a5c8 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a582:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a584:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a586:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a58a:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a58c:	4620      	mov	r0, r4
   1a58e:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1a592:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1a594:	bf08      	it	eq
   1a596:	606b      	streq	r3, [r5, #4]
   1a598:	f006 fef5 	bl	21386 <z_queue_node_peek>
   1a59c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a59e:	4630      	mov	r0, r6
   1a5a0:	f001 fa34 	bl	1ba0c <z_spin_unlock_valid>
   1a5a4:	b940      	cbnz	r0, 1a5b8 <z_impl_k_queue_get+0x78>
   1a5a6:	4911      	ldr	r1, [pc, #68]	; (1a5ec <z_impl_k_queue_get+0xac>)
   1a5a8:	4811      	ldr	r0, [pc, #68]	; (1a5f0 <z_impl_k_queue_get+0xb0>)
   1a5aa:	22a7      	movs	r2, #167	; 0xa7
   1a5ac:	f002 f9f4 	bl	1c998 <printk>
   1a5b0:	21a7      	movs	r1, #167	; 0xa7
   1a5b2:	480e      	ldr	r0, [pc, #56]	; (1a5ec <z_impl_k_queue_get+0xac>)
   1a5b4:	f002 fc96 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a5b8:	f389 8811 	msr	BASEPRI, r9
   1a5bc:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a5c0:	4620      	mov	r0, r4
   1a5c2:	b003      	add	sp, #12
   1a5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a5c8:	ea58 0307 	orrs.w	r3, r8, r7
   1a5cc:	d0e7      	beq.n	1a59e <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a5ce:	4649      	mov	r1, r9
   1a5d0:	4630      	mov	r0, r6
   1a5d2:	e9cd 8700 	strd	r8, r7, [sp]
   1a5d6:	f105 020c 	add.w	r2, r5, #12
   1a5da:	f000 fdc5 	bl	1b168 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a5de:	2800      	cmp	r0, #0
   1a5e0:	d1ee      	bne.n	1a5c0 <z_impl_k_queue_get+0x80>
   1a5e2:	4b04      	ldr	r3, [pc, #16]	; (1a5f4 <z_impl_k_queue_get+0xb4>)
   1a5e4:	689b      	ldr	r3, [r3, #8]
   1a5e6:	695c      	ldr	r4, [r3, #20]
   1a5e8:	e7ea      	b.n	1a5c0 <z_impl_k_queue_get+0x80>
   1a5ea:	bf00      	nop
   1a5ec:	00022e10 	.word	0x00022e10
   1a5f0:	00022dd6 	.word	0x00022dd6
   1a5f4:	20009fbc 	.word	0x20009fbc

0001a5f8 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a5f8:	6883      	ldr	r3, [r0, #8]
{
   1a5fa:	b510      	push	{r4, lr}
   1a5fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a5fe:	b953      	cbnz	r3, 1a616 <pended_on+0x1e>
   1a600:	4906      	ldr	r1, [pc, #24]	; (1a61c <pended_on+0x24>)
   1a602:	4807      	ldr	r0, [pc, #28]	; (1a620 <pended_on+0x28>)
   1a604:	f44f 7201 	mov.w	r2, #516	; 0x204
   1a608:	f002 f9c6 	bl	1c998 <printk>
   1a60c:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a610:	4802      	ldr	r0, [pc, #8]	; (1a61c <pended_on+0x24>)
   1a612:	f002 fc67 	bl	1cee4 <assert_post_action>

	return thread->base.pended_on;
}
   1a616:	68a0      	ldr	r0, [r4, #8]
   1a618:	bd10      	pop	{r4, pc}
   1a61a:	bf00      	nop
   1a61c:	0002638d 	.word	0x0002638d
   1a620:	00022dd6 	.word	0x00022dd6

0001a624 <z_reset_time_slice>:
{
   1a624:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1a626:	4c08      	ldr	r4, [pc, #32]	; (1a648 <z_reset_time_slice+0x24>)
   1a628:	6823      	ldr	r3, [r4, #0]
   1a62a:	b15b      	cbz	r3, 1a644 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a62c:	f7f2 f8a6 	bl	c77c <z_clock_elapsed>
   1a630:	4603      	mov	r3, r0
   1a632:	6820      	ldr	r0, [r4, #0]
   1a634:	4a05      	ldr	r2, [pc, #20]	; (1a64c <z_reset_time_slice+0x28>)
   1a636:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1a638:	2100      	movs	r1, #0
}
   1a63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a63e:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1a640:	f001 bc8c 	b.w	1bf5c <z_set_timeout_expiry>
}
   1a644:	bd10      	pop	{r4, pc}
   1a646:	bf00      	nop
   1a648:	20009ffc 	.word	0x20009ffc
   1a64c:	20009fbc 	.word	0x20009fbc

0001a650 <k_sched_time_slice_set>:
{
   1a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a652:	4604      	mov	r4, r0
   1a654:	460d      	mov	r5, r1
	__asm__ volatile(
   1a656:	f04f 0320 	mov.w	r3, #32
   1a65a:	f3ef 8711 	mrs	r7, BASEPRI
   1a65e:	f383 8811 	msr	BASEPRI, r3
   1a662:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a666:	481b      	ldr	r0, [pc, #108]	; (1a6d4 <k_sched_time_slice_set+0x84>)
   1a668:	f001 f9c2 	bl	1b9f0 <z_spin_lock_valid>
   1a66c:	b940      	cbnz	r0, 1a680 <k_sched_time_slice_set+0x30>
   1a66e:	491a      	ldr	r1, [pc, #104]	; (1a6d8 <k_sched_time_slice_set+0x88>)
   1a670:	481a      	ldr	r0, [pc, #104]	; (1a6dc <k_sched_time_slice_set+0x8c>)
   1a672:	227c      	movs	r2, #124	; 0x7c
   1a674:	f002 f990 	bl	1c998 <printk>
   1a678:	217c      	movs	r1, #124	; 0x7c
   1a67a:	4817      	ldr	r0, [pc, #92]	; (1a6d8 <k_sched_time_slice_set+0x88>)
   1a67c:	f002 fc32 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a680:	4814      	ldr	r0, [pc, #80]	; (1a6d4 <k_sched_time_slice_set+0x84>)
   1a682:	f001 f9d1 	bl	1ba28 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a686:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1a68a:	2100      	movs	r1, #0
   1a68c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a690:	4b13      	ldr	r3, [pc, #76]	; (1a6e0 <k_sched_time_slice_set+0x90>)
   1a692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a696:	6159      	str	r1, [r3, #20]
   1a698:	2300      	movs	r3, #0
   1a69a:	fbe4 0106 	umlal	r0, r1, r4, r6
   1a69e:	f7ee fa45 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a6a2:	4b10      	ldr	r3, [pc, #64]	; (1a6e4 <k_sched_time_slice_set+0x94>)
   1a6a4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a6a6:	4b10      	ldr	r3, [pc, #64]	; (1a6e8 <k_sched_time_slice_set+0x98>)
   1a6a8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a6aa:	f7ff ffbb 	bl	1a624 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a6ae:	4809      	ldr	r0, [pc, #36]	; (1a6d4 <k_sched_time_slice_set+0x84>)
   1a6b0:	f001 f9ac 	bl	1ba0c <z_spin_unlock_valid>
   1a6b4:	b940      	cbnz	r0, 1a6c8 <k_sched_time_slice_set+0x78>
   1a6b6:	4908      	ldr	r1, [pc, #32]	; (1a6d8 <k_sched_time_slice_set+0x88>)
   1a6b8:	4808      	ldr	r0, [pc, #32]	; (1a6dc <k_sched_time_slice_set+0x8c>)
   1a6ba:	22a7      	movs	r2, #167	; 0xa7
   1a6bc:	f002 f96c 	bl	1c998 <printk>
   1a6c0:	21a7      	movs	r1, #167	; 0xa7
   1a6c2:	4805      	ldr	r0, [pc, #20]	; (1a6d8 <k_sched_time_slice_set+0x88>)
   1a6c4:	f002 fc0e 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a6c8:	f387 8811 	msr	BASEPRI, r7
   1a6cc:	f3bf 8f6f 	isb	sy
}
   1a6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6d2:	bf00      	nop
   1a6d4:	20009ff4 	.word	0x20009ff4
   1a6d8:	00022e10 	.word	0x00022e10
   1a6dc:	00022dd6 	.word	0x00022dd6
   1a6e0:	20009fbc 	.word	0x20009fbc
   1a6e4:	20009ffc 	.word	0x20009ffc
   1a6e8:	20009ff8 	.word	0x20009ff8

0001a6ec <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a6ec:	b510      	push	{r4, lr}
   1a6ee:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a6f0:	460c      	mov	r4, r1
   1a6f2:	b9c1      	cbnz	r1, 1a726 <z_reschedule+0x3a>
   1a6f4:	f3ef 8205 	mrs	r2, IPSR
   1a6f8:	b9aa      	cbnz	r2, 1a726 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1a6fa:	4a14      	ldr	r2, [pc, #80]	; (1a74c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   1a6fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a6fe:	6892      	ldr	r2, [r2, #8]
   1a700:	4291      	cmp	r1, r2
   1a702:	d010      	beq.n	1a726 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a704:	f001 f982 	bl	1ba0c <z_spin_unlock_valid>
   1a708:	b940      	cbnz	r0, 1a71c <z_reschedule+0x30>
   1a70a:	4911      	ldr	r1, [pc, #68]	; (1a750 <z_reschedule+0x64>)
   1a70c:	4811      	ldr	r0, [pc, #68]	; (1a754 <z_reschedule+0x68>)
   1a70e:	22be      	movs	r2, #190	; 0xbe
   1a710:	f002 f942 	bl	1c998 <printk>
   1a714:	21be      	movs	r1, #190	; 0xbe
   1a716:	480e      	ldr	r0, [pc, #56]	; (1a750 <z_reschedule+0x64>)
   1a718:	f002 fbe4 	bl	1cee4 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1a720:	2000      	movs	r0, #0
   1a722:	f7f3 b827 	b.w	d774 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a726:	4618      	mov	r0, r3
   1a728:	f001 f970 	bl	1ba0c <z_spin_unlock_valid>
   1a72c:	b940      	cbnz	r0, 1a740 <z_reschedule+0x54>
   1a72e:	4908      	ldr	r1, [pc, #32]	; (1a750 <z_reschedule+0x64>)
   1a730:	4808      	ldr	r0, [pc, #32]	; (1a754 <z_reschedule+0x68>)
   1a732:	22a7      	movs	r2, #167	; 0xa7
   1a734:	f002 f930 	bl	1c998 <printk>
   1a738:	21a7      	movs	r1, #167	; 0xa7
   1a73a:	4805      	ldr	r0, [pc, #20]	; (1a750 <z_reschedule+0x64>)
   1a73c:	f002 fbd2 	bl	1cee4 <assert_post_action>
   1a740:	f384 8811 	msr	BASEPRI, r4
   1a744:	f3bf 8f6f 	isb	sy
   1a748:	bd10      	pop	{r4, pc}
   1a74a:	bf00      	nop
   1a74c:	20009fbc 	.word	0x20009fbc
   1a750:	00022e10 	.word	0x00022e10
   1a754:	00022dd6 	.word	0x00022dd6

0001a758 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1a758:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a75a:	f04f 0320 	mov.w	r3, #32
   1a75e:	f3ef 8511 	mrs	r5, BASEPRI
   1a762:	f383 8811 	msr	BASEPRI, r3
   1a766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a76a:	4822      	ldr	r0, [pc, #136]	; (1a7f4 <k_sched_lock+0x9c>)
   1a76c:	f001 f940 	bl	1b9f0 <z_spin_lock_valid>
   1a770:	b940      	cbnz	r0, 1a784 <k_sched_lock+0x2c>
   1a772:	4921      	ldr	r1, [pc, #132]	; (1a7f8 <k_sched_lock+0xa0>)
   1a774:	4821      	ldr	r0, [pc, #132]	; (1a7fc <k_sched_lock+0xa4>)
   1a776:	227c      	movs	r2, #124	; 0x7c
   1a778:	f002 f90e 	bl	1c998 <printk>
   1a77c:	217c      	movs	r1, #124	; 0x7c
   1a77e:	481e      	ldr	r0, [pc, #120]	; (1a7f8 <k_sched_lock+0xa0>)
   1a780:	f002 fbb0 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a784:	481b      	ldr	r0, [pc, #108]	; (1a7f4 <k_sched_lock+0x9c>)
   1a786:	f001 f94f 	bl	1ba28 <z_spin_lock_set_owner>
   1a78a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a78e:	b153      	cbz	r3, 1a7a6 <k_sched_lock+0x4e>
   1a790:	491b      	ldr	r1, [pc, #108]	; (1a800 <k_sched_lock+0xa8>)
   1a792:	481a      	ldr	r0, [pc, #104]	; (1a7fc <k_sched_lock+0xa4>)
   1a794:	f44f 7289 	mov.w	r2, #274	; 0x112
   1a798:	f002 f8fe 	bl	1c998 <printk>
   1a79c:	f44f 7189 	mov.w	r1, #274	; 0x112
   1a7a0:	4817      	ldr	r0, [pc, #92]	; (1a800 <k_sched_lock+0xa8>)
   1a7a2:	f002 fb9f 	bl	1cee4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a7a6:	4c17      	ldr	r4, [pc, #92]	; (1a804 <k_sched_lock+0xac>)
   1a7a8:	68a3      	ldr	r3, [r4, #8]
   1a7aa:	7bdb      	ldrb	r3, [r3, #15]
   1a7ac:	2b01      	cmp	r3, #1
   1a7ae:	d10a      	bne.n	1a7c6 <k_sched_lock+0x6e>
   1a7b0:	4913      	ldr	r1, [pc, #76]	; (1a800 <k_sched_lock+0xa8>)
   1a7b2:	4812      	ldr	r0, [pc, #72]	; (1a7fc <k_sched_lock+0xa4>)
   1a7b4:	f240 1213 	movw	r2, #275	; 0x113
   1a7b8:	f002 f8ee 	bl	1c998 <printk>
   1a7bc:	f240 1113 	movw	r1, #275	; 0x113
   1a7c0:	480f      	ldr	r0, [pc, #60]	; (1a800 <k_sched_lock+0xa8>)
   1a7c2:	f002 fb8f 	bl	1cee4 <assert_post_action>
	--_current->base.sched_locked;
   1a7c6:	68a2      	ldr	r2, [r4, #8]
   1a7c8:	7bd3      	ldrb	r3, [r2, #15]
   1a7ca:	3b01      	subs	r3, #1
   1a7cc:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7ce:	4809      	ldr	r0, [pc, #36]	; (1a7f4 <k_sched_lock+0x9c>)
   1a7d0:	f001 f91c 	bl	1ba0c <z_spin_unlock_valid>
   1a7d4:	b940      	cbnz	r0, 1a7e8 <k_sched_lock+0x90>
   1a7d6:	4908      	ldr	r1, [pc, #32]	; (1a7f8 <k_sched_lock+0xa0>)
   1a7d8:	4808      	ldr	r0, [pc, #32]	; (1a7fc <k_sched_lock+0xa4>)
   1a7da:	22a7      	movs	r2, #167	; 0xa7
   1a7dc:	f002 f8dc 	bl	1c998 <printk>
   1a7e0:	21a7      	movs	r1, #167	; 0xa7
   1a7e2:	4805      	ldr	r0, [pc, #20]	; (1a7f8 <k_sched_lock+0xa0>)
   1a7e4:	f002 fb7e 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a7e8:	f385 8811 	msr	BASEPRI, r5
   1a7ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a7f0:	bd38      	pop	{r3, r4, r5, pc}
   1a7f2:	bf00      	nop
   1a7f4:	20009ff4 	.word	0x20009ff4
   1a7f8:	00022e10 	.word	0x00022e10
   1a7fc:	00022dd6 	.word	0x00022dd6
   1a800:	00026362 	.word	0x00026362
   1a804:	20009fbc 	.word	0x20009fbc

0001a808 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a808:	4b11      	ldr	r3, [pc, #68]	; (1a850 <z_priq_dumb_remove+0x48>)
{
   1a80a:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a80c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1a810:	4282      	cmp	r2, r0
{
   1a812:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a814:	d105      	bne.n	1a822 <z_priq_dumb_remove+0x1a>
   1a816:	689b      	ldr	r3, [r3, #8]
   1a818:	428b      	cmp	r3, r1
   1a81a:	d102      	bne.n	1a822 <z_priq_dumb_remove+0x1a>
   1a81c:	7b4b      	ldrb	r3, [r1, #13]
   1a81e:	06db      	lsls	r3, r3, #27
   1a820:	d114      	bne.n	1a84c <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a822:	4b0c      	ldr	r3, [pc, #48]	; (1a854 <z_priq_dumb_remove+0x4c>)
   1a824:	429c      	cmp	r4, r3
   1a826:	d10a      	bne.n	1a83e <z_priq_dumb_remove+0x36>
   1a828:	490b      	ldr	r1, [pc, #44]	; (1a858 <z_priq_dumb_remove+0x50>)
   1a82a:	480c      	ldr	r0, [pc, #48]	; (1a85c <z_priq_dumb_remove+0x54>)
   1a82c:	f240 32da 	movw	r2, #986	; 0x3da
   1a830:	f002 f8b2 	bl	1c998 <printk>
   1a834:	f240 31da 	movw	r1, #986	; 0x3da
   1a838:	4807      	ldr	r0, [pc, #28]	; (1a858 <z_priq_dumb_remove+0x50>)
   1a83a:	f002 fb53 	bl	1cee4 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1a83e:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a842:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a844:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a846:	2300      	movs	r3, #0
	node->prev = NULL;
   1a848:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a84c:	bd10      	pop	{r4, pc}
   1a84e:	bf00      	nop
   1a850:	20009fbc 	.word	0x20009fbc
   1a854:	20009510 	.word	0x20009510
   1a858:	0002638d 	.word	0x0002638d
   1a85c:	00022dd6 	.word	0x00022dd6

0001a860 <z_unpend_thread>:
{
   1a860:	b538      	push	{r3, r4, r5, lr}
   1a862:	4604      	mov	r4, r0
	__asm__ volatile(
   1a864:	f04f 0320 	mov.w	r3, #32
   1a868:	f3ef 8511 	mrs	r5, BASEPRI
   1a86c:	f383 8811 	msr	BASEPRI, r3
   1a870:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a874:	4814      	ldr	r0, [pc, #80]	; (1a8c8 <z_unpend_thread+0x68>)
   1a876:	f001 f8bb 	bl	1b9f0 <z_spin_lock_valid>
   1a87a:	b940      	cbnz	r0, 1a88e <z_unpend_thread+0x2e>
   1a87c:	4913      	ldr	r1, [pc, #76]	; (1a8cc <z_unpend_thread+0x6c>)
   1a87e:	4814      	ldr	r0, [pc, #80]	; (1a8d0 <z_unpend_thread+0x70>)
   1a880:	227c      	movs	r2, #124	; 0x7c
   1a882:	f002 f889 	bl	1c998 <printk>
   1a886:	217c      	movs	r1, #124	; 0x7c
   1a888:	4810      	ldr	r0, [pc, #64]	; (1a8cc <z_unpend_thread+0x6c>)
   1a88a:	f002 fb2b 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a88e:	480e      	ldr	r0, [pc, #56]	; (1a8c8 <z_unpend_thread+0x68>)
   1a890:	f001 f8ca 	bl	1ba28 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1a894:	4620      	mov	r0, r4
   1a896:	f006 fdc3 	bl	21420 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a89a:	480b      	ldr	r0, [pc, #44]	; (1a8c8 <z_unpend_thread+0x68>)
   1a89c:	f001 f8b6 	bl	1ba0c <z_spin_unlock_valid>
   1a8a0:	b940      	cbnz	r0, 1a8b4 <z_unpend_thread+0x54>
   1a8a2:	490a      	ldr	r1, [pc, #40]	; (1a8cc <z_unpend_thread+0x6c>)
   1a8a4:	480a      	ldr	r0, [pc, #40]	; (1a8d0 <z_unpend_thread+0x70>)
   1a8a6:	22a7      	movs	r2, #167	; 0xa7
   1a8a8:	f002 f876 	bl	1c998 <printk>
   1a8ac:	21a7      	movs	r1, #167	; 0xa7
   1a8ae:	4807      	ldr	r0, [pc, #28]	; (1a8cc <z_unpend_thread+0x6c>)
   1a8b0:	f002 fb18 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a8b4:	f385 8811 	msr	BASEPRI, r5
   1a8b8:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a8bc:	f104 0018 	add.w	r0, r4, #24
}
   1a8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a8c4:	f001 bad8 	b.w	1be78 <z_abort_timeout>
   1a8c8:	20009ff4 	.word	0x20009ff4
   1a8cc:	00022e10 	.word	0x00022e10
   1a8d0:	00022dd6 	.word	0x00022dd6

0001a8d4 <update_cache>:
{
   1a8d4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1a8d6:	4c19      	ldr	r4, [pc, #100]	; (1a93c <update_cache+0x68>)
{
   1a8d8:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1a8da:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   1a8dc:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   1a8de:	b143      	cbz	r3, 1a8f2 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   1a8e0:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1a8e2:	b1a8      	cbz	r0, 1a910 <update_cache+0x3c>
		if (thread != _current) {
   1a8e4:	68a3      	ldr	r3, [r4, #8]
   1a8e6:	42ab      	cmp	r3, r5
   1a8e8:	d001      	beq.n	1a8ee <update_cache+0x1a>
			z_reset_time_slice();
   1a8ea:	f7ff fe9b 	bl	1a624 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a8ee:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1a8f0:	e023      	b.n	1a93a <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1a8f2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a8f6:	f006 fda1 	bl	2143c <z_priq_dumb_best>
   1a8fa:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1a8fc:	7b4b      	ldrb	r3, [r1, #13]
   1a8fe:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1a900:	bf44      	itt	mi
   1a902:	f043 0308 	orrmi.w	r3, r3, #8
   1a906:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1a908:	b905      	cbnz	r5, 1a90c <update_cache+0x38>
   1a90a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1a90c:	b152      	cbz	r2, 1a924 <update_cache+0x50>
   1a90e:	e7e9      	b.n	1a8e4 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   1a910:	b941      	cbnz	r1, 1a924 <update_cache+0x50>
   1a912:	490b      	ldr	r1, [pc, #44]	; (1a940 <update_cache+0x6c>)
   1a914:	480b      	ldr	r0, [pc, #44]	; (1a944 <update_cache+0x70>)
   1a916:	2283      	movs	r2, #131	; 0x83
   1a918:	f002 f83e 	bl	1c998 <printk>
   1a91c:	2183      	movs	r1, #131	; 0x83
   1a91e:	4808      	ldr	r0, [pc, #32]	; (1a940 <update_cache+0x6c>)
   1a920:	f002 fae0 	bl	1cee4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1a924:	68a3      	ldr	r3, [r4, #8]
   1a926:	7b5a      	ldrb	r2, [r3, #13]
   1a928:	06d2      	lsls	r2, r2, #27
   1a92a:	d1db      	bne.n	1a8e4 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a92c:	69aa      	ldr	r2, [r5, #24]
   1a92e:	2a00      	cmp	r2, #0
   1a930:	d1d8      	bne.n	1a8e4 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a932:	89da      	ldrh	r2, [r3, #14]
   1a934:	2a7f      	cmp	r2, #127	; 0x7f
   1a936:	d9d5      	bls.n	1a8e4 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   1a938:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1a93a:	bd38      	pop	{r3, r4, r5, pc}
   1a93c:	20009fbc 	.word	0x20009fbc
   1a940:	0002638d 	.word	0x0002638d
   1a944:	00022dd6 	.word	0x00022dd6

0001a948 <k_sched_unlock>:
{
   1a948:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a94a:	f04f 0320 	mov.w	r3, #32
   1a94e:	f3ef 8511 	mrs	r5, BASEPRI
   1a952:	f383 8811 	msr	BASEPRI, r3
   1a956:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a95a:	4824      	ldr	r0, [pc, #144]	; (1a9ec <k_sched_unlock+0xa4>)
   1a95c:	f001 f848 	bl	1b9f0 <z_spin_lock_valid>
   1a960:	b940      	cbnz	r0, 1a974 <k_sched_unlock+0x2c>
   1a962:	4923      	ldr	r1, [pc, #140]	; (1a9f0 <k_sched_unlock+0xa8>)
   1a964:	4823      	ldr	r0, [pc, #140]	; (1a9f4 <k_sched_unlock+0xac>)
   1a966:	227c      	movs	r2, #124	; 0x7c
   1a968:	f002 f816 	bl	1c998 <printk>
   1a96c:	217c      	movs	r1, #124	; 0x7c
   1a96e:	4820      	ldr	r0, [pc, #128]	; (1a9f0 <k_sched_unlock+0xa8>)
   1a970:	f002 fab8 	bl	1cee4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1a974:	4c20      	ldr	r4, [pc, #128]	; (1a9f8 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1a976:	481d      	ldr	r0, [pc, #116]	; (1a9ec <k_sched_unlock+0xa4>)
   1a978:	f001 f856 	bl	1ba28 <z_spin_lock_set_owner>
   1a97c:	68a3      	ldr	r3, [r4, #8]
   1a97e:	7bdb      	ldrb	r3, [r3, #15]
   1a980:	b953      	cbnz	r3, 1a998 <k_sched_unlock+0x50>
   1a982:	491e      	ldr	r1, [pc, #120]	; (1a9fc <k_sched_unlock+0xb4>)
   1a984:	481b      	ldr	r0, [pc, #108]	; (1a9f4 <k_sched_unlock+0xac>)
   1a986:	f44f 725d 	mov.w	r2, #884	; 0x374
   1a98a:	f002 f805 	bl	1c998 <printk>
   1a98e:	f44f 715d 	mov.w	r1, #884	; 0x374
   1a992:	481a      	ldr	r0, [pc, #104]	; (1a9fc <k_sched_unlock+0xb4>)
   1a994:	f002 faa6 	bl	1cee4 <assert_post_action>
   1a998:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1a99c:	b153      	cbz	r3, 1a9b4 <k_sched_unlock+0x6c>
   1a99e:	4917      	ldr	r1, [pc, #92]	; (1a9fc <k_sched_unlock+0xb4>)
   1a9a0:	4814      	ldr	r0, [pc, #80]	; (1a9f4 <k_sched_unlock+0xac>)
   1a9a2:	f240 3275 	movw	r2, #885	; 0x375
   1a9a6:	f001 fff7 	bl	1c998 <printk>
   1a9aa:	f240 3175 	movw	r1, #885	; 0x375
   1a9ae:	4813      	ldr	r0, [pc, #76]	; (1a9fc <k_sched_unlock+0xb4>)
   1a9b0:	f002 fa98 	bl	1cee4 <assert_post_action>
		++_current->base.sched_locked;
   1a9b4:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1a9b6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1a9b8:	7bd3      	ldrb	r3, [r2, #15]
   1a9ba:	3301      	adds	r3, #1
   1a9bc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a9be:	f7ff ff89 	bl	1a8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a9c2:	480a      	ldr	r0, [pc, #40]	; (1a9ec <k_sched_unlock+0xa4>)
   1a9c4:	f001 f822 	bl	1ba0c <z_spin_unlock_valid>
   1a9c8:	b940      	cbnz	r0, 1a9dc <k_sched_unlock+0x94>
   1a9ca:	4909      	ldr	r1, [pc, #36]	; (1a9f0 <k_sched_unlock+0xa8>)
   1a9cc:	4809      	ldr	r0, [pc, #36]	; (1a9f4 <k_sched_unlock+0xac>)
   1a9ce:	22a7      	movs	r2, #167	; 0xa7
   1a9d0:	f001 ffe2 	bl	1c998 <printk>
   1a9d4:	21a7      	movs	r1, #167	; 0xa7
   1a9d6:	4806      	ldr	r0, [pc, #24]	; (1a9f0 <k_sched_unlock+0xa8>)
   1a9d8:	f002 fa84 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1a9dc:	f385 8811 	msr	BASEPRI, r5
   1a9e0:	f3bf 8f6f 	isb	sy
}
   1a9e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1a9e8:	f006 bd10 	b.w	2140c <z_reschedule_unlocked>
   1a9ec:	20009ff4 	.word	0x20009ff4
   1a9f0:	00022e10 	.word	0x00022e10
   1a9f4:	00022dd6 	.word	0x00022dd6
   1a9f8:	20009fbc 	.word	0x20009fbc
   1a9fc:	0002638d 	.word	0x0002638d

0001aa00 <ready_thread>:
{
   1aa00:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1aa02:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1aa06:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1aa08:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1aa0a:	7b43      	ldrb	r3, [r0, #13]
   1aa0c:	db39      	blt.n	1aa82 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1aa0e:	06db      	lsls	r3, r3, #27
   1aa10:	d137      	bne.n	1aa82 <ready_thread+0x82>
   1aa12:	6983      	ldr	r3, [r0, #24]
   1aa14:	2b00      	cmp	r3, #0
   1aa16:	d134      	bne.n	1aa82 <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aa18:	4b1a      	ldr	r3, [pc, #104]	; (1aa84 <ready_thread+0x84>)
   1aa1a:	4298      	cmp	r0, r3
   1aa1c:	d10a      	bne.n	1aa34 <ready_thread+0x34>
   1aa1e:	491a      	ldr	r1, [pc, #104]	; (1aa88 <ready_thread+0x88>)
   1aa20:	481a      	ldr	r0, [pc, #104]	; (1aa8c <ready_thread+0x8c>)
   1aa22:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1aa26:	f001 ffb7 	bl	1c998 <printk>
   1aa2a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1aa2e:	4816      	ldr	r0, [pc, #88]	; (1aa88 <ready_thread+0x88>)
   1aa30:	f002 fa58 	bl	1cee4 <assert_post_action>
	return list->head == list;
   1aa34:	4a16      	ldr	r2, [pc, #88]	; (1aa90 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa36:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1aa3a:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa3e:	4283      	cmp	r3, r0
   1aa40:	d019      	beq.n	1aa76 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aa42:	b1c3      	cbz	r3, 1aa76 <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1aa44:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1aa48:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1aa4c:	42ae      	cmp	r6, r5
   1aa4e:	dd0d      	ble.n	1aa6c <ready_thread+0x6c>
	node->prev = successor->prev;
   1aa50:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1aa52:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1aa56:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1aa58:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1aa5a:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   1aa5c:	2000      	movs	r0, #0
   1aa5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1aa62:	7363      	strb	r3, [r4, #13]
}
   1aa64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1aa68:	f7ff bf34 	b.w	1a8d4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1aa6c:	428b      	cmp	r3, r1
   1aa6e:	d002      	beq.n	1aa76 <ready_thread+0x76>
   1aa70:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aa72:	2b00      	cmp	r3, #0
   1aa74:	d1e8      	bne.n	1aa48 <ready_thread+0x48>
	node->prev = list->tail;
   1aa76:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1aa7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1aa7c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1aa7e:	6314      	str	r4, [r2, #48]	; 0x30
}
   1aa80:	e7eb      	b.n	1aa5a <ready_thread+0x5a>
}
   1aa82:	bd70      	pop	{r4, r5, r6, pc}
   1aa84:	20009510 	.word	0x20009510
   1aa88:	0002638d 	.word	0x0002638d
   1aa8c:	00022dd6 	.word	0x00022dd6
   1aa90:	20009fbc 	.word	0x20009fbc

0001aa94 <z_ready_thread>:
{
   1aa94:	b538      	push	{r3, r4, r5, lr}
   1aa96:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa98:	f04f 0320 	mov.w	r3, #32
   1aa9c:	f3ef 8511 	mrs	r5, BASEPRI
   1aaa0:	f383 8811 	msr	BASEPRI, r3
   1aaa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aaa8:	4812      	ldr	r0, [pc, #72]	; (1aaf4 <z_ready_thread+0x60>)
   1aaaa:	f000 ffa1 	bl	1b9f0 <z_spin_lock_valid>
   1aaae:	b940      	cbnz	r0, 1aac2 <z_ready_thread+0x2e>
   1aab0:	4911      	ldr	r1, [pc, #68]	; (1aaf8 <z_ready_thread+0x64>)
   1aab2:	4812      	ldr	r0, [pc, #72]	; (1aafc <z_ready_thread+0x68>)
   1aab4:	227c      	movs	r2, #124	; 0x7c
   1aab6:	f001 ff6f 	bl	1c998 <printk>
   1aaba:	217c      	movs	r1, #124	; 0x7c
   1aabc:	480e      	ldr	r0, [pc, #56]	; (1aaf8 <z_ready_thread+0x64>)
   1aabe:	f002 fa11 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aac2:	480c      	ldr	r0, [pc, #48]	; (1aaf4 <z_ready_thread+0x60>)
   1aac4:	f000 ffb0 	bl	1ba28 <z_spin_lock_set_owner>
		ready_thread(thread);
   1aac8:	4620      	mov	r0, r4
   1aaca:	f7ff ff99 	bl	1aa00 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aace:	4809      	ldr	r0, [pc, #36]	; (1aaf4 <z_ready_thread+0x60>)
   1aad0:	f000 ff9c 	bl	1ba0c <z_spin_unlock_valid>
   1aad4:	b940      	cbnz	r0, 1aae8 <z_ready_thread+0x54>
   1aad6:	4908      	ldr	r1, [pc, #32]	; (1aaf8 <z_ready_thread+0x64>)
   1aad8:	4808      	ldr	r0, [pc, #32]	; (1aafc <z_ready_thread+0x68>)
   1aada:	22a7      	movs	r2, #167	; 0xa7
   1aadc:	f001 ff5c 	bl	1c998 <printk>
   1aae0:	21a7      	movs	r1, #167	; 0xa7
   1aae2:	4805      	ldr	r0, [pc, #20]	; (1aaf8 <z_ready_thread+0x64>)
   1aae4:	f002 f9fe 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1aae8:	f385 8811 	msr	BASEPRI, r5
   1aaec:	f3bf 8f6f 	isb	sy
}
   1aaf0:	bd38      	pop	{r3, r4, r5, pc}
   1aaf2:	bf00      	nop
   1aaf4:	20009ff4 	.word	0x20009ff4
   1aaf8:	00022e10 	.word	0x00022e10
   1aafc:	00022dd6 	.word	0x00022dd6

0001ab00 <z_sched_start>:
{
   1ab00:	b538      	push	{r3, r4, r5, lr}
   1ab02:	4604      	mov	r4, r0
	__asm__ volatile(
   1ab04:	f04f 0320 	mov.w	r3, #32
   1ab08:	f3ef 8511 	mrs	r5, BASEPRI
   1ab0c:	f383 8811 	msr	BASEPRI, r3
   1ab10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab14:	4818      	ldr	r0, [pc, #96]	; (1ab78 <z_sched_start+0x78>)
   1ab16:	f000 ff6b 	bl	1b9f0 <z_spin_lock_valid>
   1ab1a:	b940      	cbnz	r0, 1ab2e <z_sched_start+0x2e>
   1ab1c:	4917      	ldr	r1, [pc, #92]	; (1ab7c <z_sched_start+0x7c>)
   1ab1e:	4818      	ldr	r0, [pc, #96]	; (1ab80 <z_sched_start+0x80>)
   1ab20:	227c      	movs	r2, #124	; 0x7c
   1ab22:	f001 ff39 	bl	1c998 <printk>
   1ab26:	217c      	movs	r1, #124	; 0x7c
   1ab28:	4814      	ldr	r0, [pc, #80]	; (1ab7c <z_sched_start+0x7c>)
   1ab2a:	f002 f9db 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ab2e:	4812      	ldr	r0, [pc, #72]	; (1ab78 <z_sched_start+0x78>)
   1ab30:	f000 ff7a 	bl	1ba28 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1ab34:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1ab36:	075a      	lsls	r2, r3, #29
   1ab38:	d411      	bmi.n	1ab5e <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab3a:	480f      	ldr	r0, [pc, #60]	; (1ab78 <z_sched_start+0x78>)
   1ab3c:	f000 ff66 	bl	1ba0c <z_spin_unlock_valid>
   1ab40:	b940      	cbnz	r0, 1ab54 <z_sched_start+0x54>
   1ab42:	490e      	ldr	r1, [pc, #56]	; (1ab7c <z_sched_start+0x7c>)
   1ab44:	480e      	ldr	r0, [pc, #56]	; (1ab80 <z_sched_start+0x80>)
   1ab46:	22a7      	movs	r2, #167	; 0xa7
   1ab48:	f001 ff26 	bl	1c998 <printk>
   1ab4c:	21a7      	movs	r1, #167	; 0xa7
   1ab4e:	480b      	ldr	r0, [pc, #44]	; (1ab7c <z_sched_start+0x7c>)
   1ab50:	f002 f9c8 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1ab54:	f385 8811 	msr	BASEPRI, r5
   1ab58:	f3bf 8f6f 	isb	sy
}
   1ab5c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ab5e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1ab62:	4620      	mov	r0, r4
   1ab64:	7363      	strb	r3, [r4, #13]
   1ab66:	f7ff ff4b 	bl	1aa00 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ab6a:	4629      	mov	r1, r5
}
   1ab6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1ab70:	4801      	ldr	r0, [pc, #4]	; (1ab78 <z_sched_start+0x78>)
   1ab72:	f7ff bdbb 	b.w	1a6ec <z_reschedule>
   1ab76:	bf00      	nop
   1ab78:	20009ff4 	.word	0x20009ff4
   1ab7c:	00022e10 	.word	0x00022e10
   1ab80:	00022dd6 	.word	0x00022dd6

0001ab84 <z_thread_timeout>:
{
   1ab84:	b570      	push	{r4, r5, r6, lr}
   1ab86:	4604      	mov	r4, r0
	__asm__ volatile(
   1ab88:	f04f 0320 	mov.w	r3, #32
   1ab8c:	f3ef 8611 	mrs	r6, BASEPRI
   1ab90:	f383 8811 	msr	BASEPRI, r3
   1ab94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab98:	4819      	ldr	r0, [pc, #100]	; (1ac00 <z_thread_timeout+0x7c>)
   1ab9a:	f000 ff29 	bl	1b9f0 <z_spin_lock_valid>
   1ab9e:	b940      	cbnz	r0, 1abb2 <z_thread_timeout+0x2e>
   1aba0:	4918      	ldr	r1, [pc, #96]	; (1ac04 <z_thread_timeout+0x80>)
   1aba2:	4819      	ldr	r0, [pc, #100]	; (1ac08 <z_thread_timeout+0x84>)
   1aba4:	227c      	movs	r2, #124	; 0x7c
   1aba6:	f001 fef7 	bl	1c998 <printk>
   1abaa:	217c      	movs	r1, #124	; 0x7c
   1abac:	4815      	ldr	r0, [pc, #84]	; (1ac04 <z_thread_timeout+0x80>)
   1abae:	f002 f999 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1abb2:	4813      	ldr	r0, [pc, #76]	; (1ac00 <z_thread_timeout+0x7c>)
   1abb4:	f000 ff38 	bl	1ba28 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   1abb8:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1abbc:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   1abc0:	b113      	cbz	r3, 1abc8 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   1abc2:	4628      	mov	r0, r5
   1abc4:	f006 fc2c 	bl	21420 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1abc8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   1abcc:	4628      	mov	r0, r5
   1abce:	f023 0314 	bic.w	r3, r3, #20
   1abd2:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1abd6:	f7ff ff13 	bl	1aa00 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1abda:	4809      	ldr	r0, [pc, #36]	; (1ac00 <z_thread_timeout+0x7c>)
   1abdc:	f000 ff16 	bl	1ba0c <z_spin_unlock_valid>
   1abe0:	b940      	cbnz	r0, 1abf4 <z_thread_timeout+0x70>
   1abe2:	4908      	ldr	r1, [pc, #32]	; (1ac04 <z_thread_timeout+0x80>)
   1abe4:	4808      	ldr	r0, [pc, #32]	; (1ac08 <z_thread_timeout+0x84>)
   1abe6:	22a7      	movs	r2, #167	; 0xa7
   1abe8:	f001 fed6 	bl	1c998 <printk>
   1abec:	21a7      	movs	r1, #167	; 0xa7
   1abee:	4805      	ldr	r0, [pc, #20]	; (1ac04 <z_thread_timeout+0x80>)
   1abf0:	f002 f978 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1abf4:	f386 8811 	msr	BASEPRI, r6
   1abf8:	f3bf 8f6f 	isb	sy
}
   1abfc:	bd70      	pop	{r4, r5, r6, pc}
   1abfe:	bf00      	nop
   1ac00:	20009ff4 	.word	0x20009ff4
   1ac04:	00022e10 	.word	0x00022e10
   1ac08:	00022dd6 	.word	0x00022dd6

0001ac0c <move_thread_to_end_of_prio_q>:
{
   1ac0c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ac0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1ac12:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1ac14:	2b00      	cmp	r3, #0
   1ac16:	da03      	bge.n	1ac20 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ac18:	4601      	mov	r1, r0
   1ac1a:	481d      	ldr	r0, [pc, #116]	; (1ac90 <move_thread_to_end_of_prio_q+0x84>)
   1ac1c:	f7ff fdf4 	bl	1a808 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ac20:	4b1c      	ldr	r3, [pc, #112]	; (1ac94 <move_thread_to_end_of_prio_q+0x88>)
   1ac22:	429c      	cmp	r4, r3
   1ac24:	d10a      	bne.n	1ac3c <move_thread_to_end_of_prio_q+0x30>
   1ac26:	491c      	ldr	r1, [pc, #112]	; (1ac98 <move_thread_to_end_of_prio_q+0x8c>)
   1ac28:	481c      	ldr	r0, [pc, #112]	; (1ac9c <move_thread_to_end_of_prio_q+0x90>)
   1ac2a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1ac2e:	f001 feb3 	bl	1c998 <printk>
   1ac32:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1ac36:	4818      	ldr	r0, [pc, #96]	; (1ac98 <move_thread_to_end_of_prio_q+0x8c>)
   1ac38:	f002 f954 	bl	1cee4 <assert_post_action>
	return list->head == list;
   1ac3c:	4a18      	ldr	r2, [pc, #96]	; (1aca0 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac3e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1ac42:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac46:	4283      	cmp	r3, r0
   1ac48:	d01c      	beq.n	1ac84 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ac4a:	b1db      	cbz	r3, 1ac84 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ac4c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1ac50:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1ac54:	42ae      	cmp	r6, r5
   1ac56:	dd10      	ble.n	1ac7a <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   1ac58:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ac5a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1ac5e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1ac60:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1ac62:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   1ac64:	6890      	ldr	r0, [r2, #8]
   1ac66:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ac6a:	7363      	strb	r3, [r4, #13]
   1ac6c:	1b03      	subs	r3, r0, r4
   1ac6e:	4258      	negs	r0, r3
   1ac70:	4158      	adcs	r0, r3
}
   1ac72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ac76:	f7ff be2d 	b.w	1a8d4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ac7a:	428b      	cmp	r3, r1
   1ac7c:	d002      	beq.n	1ac84 <move_thread_to_end_of_prio_q+0x78>
   1ac7e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ac80:	2b00      	cmp	r3, #0
   1ac82:	d1e5      	bne.n	1ac50 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   1ac84:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1ac88:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ac8a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ac8c:	6314      	str	r4, [r2, #48]	; 0x30
}
   1ac8e:	e7e8      	b.n	1ac62 <move_thread_to_end_of_prio_q+0x56>
   1ac90:	20009fe8 	.word	0x20009fe8
   1ac94:	20009510 	.word	0x20009510
   1ac98:	0002638d 	.word	0x0002638d
   1ac9c:	00022dd6 	.word	0x00022dd6
   1aca0:	20009fbc 	.word	0x20009fbc

0001aca4 <z_time_slice>:
{
   1aca4:	b538      	push	{r3, r4, r5, lr}
   1aca6:	4604      	mov	r4, r0
	__asm__ volatile(
   1aca8:	f04f 0320 	mov.w	r3, #32
   1acac:	f3ef 8511 	mrs	r5, BASEPRI
   1acb0:	f383 8811 	msr	BASEPRI, r3
   1acb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1acb8:	4824      	ldr	r0, [pc, #144]	; (1ad4c <z_time_slice+0xa8>)
   1acba:	f000 fe99 	bl	1b9f0 <z_spin_lock_valid>
   1acbe:	b940      	cbnz	r0, 1acd2 <z_time_slice+0x2e>
   1acc0:	4923      	ldr	r1, [pc, #140]	; (1ad50 <z_time_slice+0xac>)
   1acc2:	4824      	ldr	r0, [pc, #144]	; (1ad54 <z_time_slice+0xb0>)
   1acc4:	227c      	movs	r2, #124	; 0x7c
   1acc6:	f001 fe67 	bl	1c998 <printk>
   1acca:	217c      	movs	r1, #124	; 0x7c
   1accc:	4820      	ldr	r0, [pc, #128]	; (1ad50 <z_time_slice+0xac>)
   1acce:	f002 f909 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1acd2:	481e      	ldr	r0, [pc, #120]	; (1ad4c <z_time_slice+0xa8>)
   1acd4:	f000 fea8 	bl	1ba28 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1acd8:	4b1f      	ldr	r3, [pc, #124]	; (1ad58 <z_time_slice+0xb4>)
   1acda:	4a20      	ldr	r2, [pc, #128]	; (1ad5c <z_time_slice+0xb8>)
   1acdc:	6898      	ldr	r0, [r3, #8]
   1acde:	6811      	ldr	r1, [r2, #0]
   1ace0:	4288      	cmp	r0, r1
   1ace2:	d113      	bne.n	1ad0c <z_time_slice+0x68>
			z_reset_time_slice();
   1ace4:	f7ff fc9e 	bl	1a624 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ace8:	4818      	ldr	r0, [pc, #96]	; (1ad4c <z_time_slice+0xa8>)
   1acea:	f000 fe8f 	bl	1ba0c <z_spin_unlock_valid>
   1acee:	b940      	cbnz	r0, 1ad02 <z_time_slice+0x5e>
   1acf0:	4917      	ldr	r1, [pc, #92]	; (1ad50 <z_time_slice+0xac>)
   1acf2:	4818      	ldr	r0, [pc, #96]	; (1ad54 <z_time_slice+0xb0>)
   1acf4:	22a7      	movs	r2, #167	; 0xa7
   1acf6:	f001 fe4f 	bl	1c998 <printk>
   1acfa:	21a7      	movs	r1, #167	; 0xa7
   1acfc:	4814      	ldr	r0, [pc, #80]	; (1ad50 <z_time_slice+0xac>)
   1acfe:	f002 f8f1 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1ad02:	f385 8811 	msr	BASEPRI, r5
   1ad06:	f3bf 8f6f 	isb	sy
}
   1ad0a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1ad0c:	2100      	movs	r1, #0
   1ad0e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1ad10:	4a13      	ldr	r2, [pc, #76]	; (1ad60 <z_time_slice+0xbc>)
   1ad12:	6812      	ldr	r2, [r2, #0]
   1ad14:	b1ba      	cbz	r2, 1ad46 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1ad16:	89c2      	ldrh	r2, [r0, #14]
   1ad18:	2a7f      	cmp	r2, #127	; 0x7f
   1ad1a:	d814      	bhi.n	1ad46 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   1ad1c:	7b42      	ldrb	r2, [r0, #13]
   1ad1e:	06d2      	lsls	r2, r2, #27
   1ad20:	d111      	bne.n	1ad46 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ad22:	4a10      	ldr	r2, [pc, #64]	; (1ad64 <z_time_slice+0xc0>)
   1ad24:	f990 100e 	ldrsb.w	r1, [r0, #14]
   1ad28:	6812      	ldr	r2, [r2, #0]
   1ad2a:	4291      	cmp	r1, r2
   1ad2c:	db0b      	blt.n	1ad46 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1ad2e:	4a0e      	ldr	r2, [pc, #56]	; (1ad68 <z_time_slice+0xc4>)
   1ad30:	4290      	cmp	r0, r2
   1ad32:	d008      	beq.n	1ad46 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   1ad34:	695a      	ldr	r2, [r3, #20]
   1ad36:	42a2      	cmp	r2, r4
   1ad38:	dc02      	bgt.n	1ad40 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   1ad3a:	f7ff ff67 	bl	1ac0c <move_thread_to_end_of_prio_q>
   1ad3e:	e7d1      	b.n	1ace4 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   1ad40:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   1ad42:	615a      	str	r2, [r3, #20]
   1ad44:	e7d0      	b.n	1ace8 <z_time_slice+0x44>
   1ad46:	2200      	movs	r2, #0
   1ad48:	e7fb      	b.n	1ad42 <z_time_slice+0x9e>
   1ad4a:	bf00      	nop
   1ad4c:	20009ff4 	.word	0x20009ff4
   1ad50:	00022e10 	.word	0x00022e10
   1ad54:	00022dd6 	.word	0x00022dd6
   1ad58:	20009fbc 	.word	0x20009fbc
   1ad5c:	20009ff0 	.word	0x20009ff0
   1ad60:	20009ffc 	.word	0x20009ffc
   1ad64:	20009ff8 	.word	0x20009ff8
   1ad68:	20009510 	.word	0x20009510

0001ad6c <z_impl_k_thread_suspend>:
{
   1ad6c:	b570      	push	{r4, r5, r6, lr}
   1ad6e:	4604      	mov	r4, r0
   1ad70:	3018      	adds	r0, #24
   1ad72:	f001 f881 	bl	1be78 <z_abort_timeout>
	__asm__ volatile(
   1ad76:	f04f 0320 	mov.w	r3, #32
   1ad7a:	f3ef 8611 	mrs	r6, BASEPRI
   1ad7e:	f383 8811 	msr	BASEPRI, r3
   1ad82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad86:	4820      	ldr	r0, [pc, #128]	; (1ae08 <z_impl_k_thread_suspend+0x9c>)
   1ad88:	f000 fe32 	bl	1b9f0 <z_spin_lock_valid>
   1ad8c:	b940      	cbnz	r0, 1ada0 <z_impl_k_thread_suspend+0x34>
   1ad8e:	491f      	ldr	r1, [pc, #124]	; (1ae0c <z_impl_k_thread_suspend+0xa0>)
   1ad90:	481f      	ldr	r0, [pc, #124]	; (1ae10 <z_impl_k_thread_suspend+0xa4>)
   1ad92:	227c      	movs	r2, #124	; 0x7c
   1ad94:	f001 fe00 	bl	1c998 <printk>
   1ad98:	217c      	movs	r1, #124	; 0x7c
   1ad9a:	481c      	ldr	r0, [pc, #112]	; (1ae0c <z_impl_k_thread_suspend+0xa0>)
   1ad9c:	f002 f8a2 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ada0:	4819      	ldr	r0, [pc, #100]	; (1ae08 <z_impl_k_thread_suspend+0x9c>)
   1ada2:	f000 fe41 	bl	1ba28 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1ada6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1adaa:	2b00      	cmp	r3, #0
   1adac:	da07      	bge.n	1adbe <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1adae:	4621      	mov	r1, r4
   1adb0:	4818      	ldr	r0, [pc, #96]	; (1ae14 <z_impl_k_thread_suspend+0xa8>)
   1adb2:	f7ff fd29 	bl	1a808 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1adb6:	7b63      	ldrb	r3, [r4, #13]
   1adb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1adbc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1adbe:	4d16      	ldr	r5, [pc, #88]	; (1ae18 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1adc0:	7b63      	ldrb	r3, [r4, #13]
   1adc2:	68a8      	ldr	r0, [r5, #8]
   1adc4:	f043 0310 	orr.w	r3, r3, #16
   1adc8:	7363      	strb	r3, [r4, #13]
   1adca:	1b03      	subs	r3, r0, r4
   1adcc:	4258      	negs	r0, r3
   1adce:	4158      	adcs	r0, r3
   1add0:	f7ff fd80 	bl	1a8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1add4:	480c      	ldr	r0, [pc, #48]	; (1ae08 <z_impl_k_thread_suspend+0x9c>)
   1add6:	f000 fe19 	bl	1ba0c <z_spin_unlock_valid>
   1adda:	b940      	cbnz	r0, 1adee <z_impl_k_thread_suspend+0x82>
   1addc:	490b      	ldr	r1, [pc, #44]	; (1ae0c <z_impl_k_thread_suspend+0xa0>)
   1adde:	480c      	ldr	r0, [pc, #48]	; (1ae10 <z_impl_k_thread_suspend+0xa4>)
   1ade0:	22a7      	movs	r2, #167	; 0xa7
   1ade2:	f001 fdd9 	bl	1c998 <printk>
   1ade6:	21a7      	movs	r1, #167	; 0xa7
   1ade8:	4808      	ldr	r0, [pc, #32]	; (1ae0c <z_impl_k_thread_suspend+0xa0>)
   1adea:	f002 f87b 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1adee:	f386 8811 	msr	BASEPRI, r6
   1adf2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1adf6:	68ab      	ldr	r3, [r5, #8]
   1adf8:	42a3      	cmp	r3, r4
   1adfa:	d103      	bne.n	1ae04 <z_impl_k_thread_suspend+0x98>
}
   1adfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ae00:	f006 bb04 	b.w	2140c <z_reschedule_unlocked>
}
   1ae04:	bd70      	pop	{r4, r5, r6, pc}
   1ae06:	bf00      	nop
   1ae08:	20009ff4 	.word	0x20009ff4
   1ae0c:	00022e10 	.word	0x00022e10
   1ae10:	00022dd6 	.word	0x00022dd6
   1ae14:	20009fe8 	.word	0x20009fe8
   1ae18:	20009fbc 	.word	0x20009fbc

0001ae1c <z_thread_single_abort>:
{
   1ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1ae20:	7b03      	ldrb	r3, [r0, #12]
{
   1ae22:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1ae24:	07dd      	lsls	r5, r3, #31
   1ae26:	d50a      	bpl.n	1ae3e <z_thread_single_abort+0x22>
   1ae28:	4976      	ldr	r1, [pc, #472]	; (1b004 <z_thread_single_abort+0x1e8>)
   1ae2a:	4877      	ldr	r0, [pc, #476]	; (1b008 <z_thread_single_abort+0x1ec>)
   1ae2c:	f240 220d 	movw	r2, #525	; 0x20d
   1ae30:	f001 fdb2 	bl	1c998 <printk>
   1ae34:	f240 210d 	movw	r1, #525	; 0x20d
   1ae38:	4872      	ldr	r0, [pc, #456]	; (1b004 <z_thread_single_abort+0x1e8>)
   1ae3a:	f002 f853 	bl	1cee4 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   1ae3e:	4e73      	ldr	r6, [pc, #460]	; (1b00c <z_thread_single_abort+0x1f0>)
   1ae40:	68b3      	ldr	r3, [r6, #8]
   1ae42:	42a3      	cmp	r3, r4
   1ae44:	d10d      	bne.n	1ae62 <z_thread_single_abort+0x46>
   1ae46:	f3ef 8305 	mrs	r3, IPSR
   1ae4a:	b953      	cbnz	r3, 1ae62 <z_thread_single_abort+0x46>
   1ae4c:	496d      	ldr	r1, [pc, #436]	; (1b004 <z_thread_single_abort+0x1e8>)
   1ae4e:	486e      	ldr	r0, [pc, #440]	; (1b008 <z_thread_single_abort+0x1ec>)
   1ae50:	f240 220f 	movw	r2, #527	; 0x20f
   1ae54:	f001 fda0 	bl	1c998 <printk>
   1ae58:	f240 210f 	movw	r1, #527	; 0x20f
   1ae5c:	4869      	ldr	r0, [pc, #420]	; (1b004 <z_thread_single_abort+0x1e8>)
   1ae5e:	f002 f841 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1ae62:	f04f 0320 	mov.w	r3, #32
   1ae66:	f3ef 8511 	mrs	r5, BASEPRI
   1ae6a:	f383 8811 	msr	BASEPRI, r3
   1ae6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae72:	4867      	ldr	r0, [pc, #412]	; (1b010 <z_thread_single_abort+0x1f4>)
   1ae74:	f000 fdbc 	bl	1b9f0 <z_spin_lock_valid>
   1ae78:	b940      	cbnz	r0, 1ae8c <z_thread_single_abort+0x70>
   1ae7a:	4966      	ldr	r1, [pc, #408]	; (1b014 <z_thread_single_abort+0x1f8>)
   1ae7c:	4862      	ldr	r0, [pc, #392]	; (1b008 <z_thread_single_abort+0x1ec>)
   1ae7e:	227c      	movs	r2, #124	; 0x7c
   1ae80:	f001 fd8a 	bl	1c998 <printk>
   1ae84:	217c      	movs	r1, #124	; 0x7c
   1ae86:	4863      	ldr	r0, [pc, #396]	; (1b014 <z_thread_single_abort+0x1f8>)
   1ae88:	f002 f82c 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ae8c:	4860      	ldr	r0, [pc, #384]	; (1b010 <z_thread_single_abort+0x1f4>)
   1ae8e:	f000 fdcb 	bl	1ba28 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   1ae92:	7b63      	ldrb	r3, [r4, #13]
   1ae94:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ae98:	d012      	beq.n	1aec0 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae9a:	485d      	ldr	r0, [pc, #372]	; (1b010 <z_thread_single_abort+0x1f4>)
   1ae9c:	f000 fdb6 	bl	1ba0c <z_spin_unlock_valid>
   1aea0:	b940      	cbnz	r0, 1aeb4 <z_thread_single_abort+0x98>
   1aea2:	495c      	ldr	r1, [pc, #368]	; (1b014 <z_thread_single_abort+0x1f8>)
   1aea4:	4858      	ldr	r0, [pc, #352]	; (1b008 <z_thread_single_abort+0x1ec>)
   1aea6:	22a7      	movs	r2, #167	; 0xa7
   1aea8:	f001 fd76 	bl	1c998 <printk>
   1aeac:	21a7      	movs	r1, #167	; 0xa7
   1aeae:	4859      	ldr	r0, [pc, #356]	; (1b014 <z_thread_single_abort+0x1f8>)
   1aeb0:	f002 f818 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1aeb4:	f385 8811 	msr	BASEPRI, r5
   1aeb8:	f3bf 8f6f 	isb	sy
}
   1aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1aec0:	f043 0320 	orr.w	r3, r3, #32
   1aec4:	4852      	ldr	r0, [pc, #328]	; (1b010 <z_thread_single_abort+0x1f4>)
   1aec6:	7363      	strb	r3, [r4, #13]
   1aec8:	f000 fda0 	bl	1ba0c <z_spin_unlock_valid>
   1aecc:	b940      	cbnz	r0, 1aee0 <z_thread_single_abort+0xc4>
   1aece:	4951      	ldr	r1, [pc, #324]	; (1b014 <z_thread_single_abort+0x1f8>)
   1aed0:	484d      	ldr	r0, [pc, #308]	; (1b008 <z_thread_single_abort+0x1ec>)
   1aed2:	22a7      	movs	r2, #167	; 0xa7
   1aed4:	f001 fd60 	bl	1c998 <printk>
   1aed8:	21a7      	movs	r1, #167	; 0xa7
   1aeda:	484e      	ldr	r0, [pc, #312]	; (1b014 <z_thread_single_abort+0x1f8>)
   1aedc:	f002 f802 	bl	1cee4 <assert_post_action>
   1aee0:	f385 8811 	msr	BASEPRI, r5
   1aee4:	f3bf 8f6f 	isb	sy
   1aee8:	f104 0018 	add.w	r0, r4, #24
   1aeec:	f000 ffc4 	bl	1be78 <z_abort_timeout>
	__asm__ volatile(
   1aef0:	f04f 0320 	mov.w	r3, #32
   1aef4:	f3ef 8711 	mrs	r7, BASEPRI
   1aef8:	f383 8811 	msr	BASEPRI, r3
   1aefc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1af00:	4843      	ldr	r0, [pc, #268]	; (1b010 <z_thread_single_abort+0x1f4>)
   1af02:	f000 fd75 	bl	1b9f0 <z_spin_lock_valid>
   1af06:	b940      	cbnz	r0, 1af1a <z_thread_single_abort+0xfe>
   1af08:	4942      	ldr	r1, [pc, #264]	; (1b014 <z_thread_single_abort+0x1f8>)
   1af0a:	483f      	ldr	r0, [pc, #252]	; (1b008 <z_thread_single_abort+0x1ec>)
   1af0c:	227c      	movs	r2, #124	; 0x7c
   1af0e:	f001 fd43 	bl	1c998 <printk>
   1af12:	217c      	movs	r1, #124	; 0x7c
   1af14:	483f      	ldr	r0, [pc, #252]	; (1b014 <z_thread_single_abort+0x1f8>)
   1af16:	f001 ffe5 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1af1a:	483d      	ldr	r0, [pc, #244]	; (1b010 <z_thread_single_abort+0x1f4>)
   1af1c:	f000 fd84 	bl	1ba28 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1af20:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1af22:	06d8      	lsls	r0, r3, #27
   1af24:	d116      	bne.n	1af54 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   1af26:	69a2      	ldr	r2, [r4, #24]
   1af28:	b9a2      	cbnz	r2, 1af54 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   1af2a:	0619      	lsls	r1, r3, #24
   1af2c:	d507      	bpl.n	1af3e <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   1af2e:	4621      	mov	r1, r4
   1af30:	4839      	ldr	r0, [pc, #228]	; (1b018 <z_thread_single_abort+0x1fc>)
   1af32:	f7ff fc69 	bl	1a808 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1af36:	7b63      	ldrb	r3, [r4, #13]
   1af38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1af3c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1af3e:	68b0      	ldr	r0, [r6, #8]
   1af40:	1b02      	subs	r2, r0, r4
   1af42:	4250      	negs	r0, r2
   1af44:	4150      	adcs	r0, r2
   1af46:	f7ff fcc5 	bl	1a8d4 <update_cache>
			waiter->base.pended_on = NULL;
   1af4a:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1af4e:	f104 0930 	add.w	r9, r4, #48	; 0x30
   1af52:	e023      	b.n	1af9c <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   1af54:	079b      	lsls	r3, r3, #30
   1af56:	d5f8      	bpl.n	1af4a <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1af58:	4620      	mov	r0, r4
   1af5a:	f7ff fb4d 	bl	1a5f8 <pended_on>
   1af5e:	4621      	mov	r1, r4
   1af60:	f7ff fc52 	bl	1a808 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1af64:	7b63      	ldrb	r3, [r4, #13]
   1af66:	f023 0302 	bic.w	r3, r3, #2
   1af6a:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1af6c:	2300      	movs	r3, #0
   1af6e:	60a3      	str	r3, [r4, #8]
   1af70:	e7eb      	b.n	1af4a <z_thread_single_abort+0x12e>
   1af72:	f105 0018 	add.w	r0, r5, #24
   1af76:	f000 ff7f 	bl	1be78 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1af7a:	4628      	mov	r0, r5
   1af7c:	f7ff fb3c 	bl	1a5f8 <pended_on>
   1af80:	4629      	mov	r1, r5
   1af82:	f7ff fc41 	bl	1a808 <z_priq_dumb_remove>
   1af86:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1af88:	4628      	mov	r0, r5
   1af8a:	f023 0302 	bic.w	r3, r3, #2
   1af8e:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1af90:	f8c5 8008 	str.w	r8, [r5, #8]
   1af94:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   1af98:	f7ff fd32 	bl	1aa00 <ready_thread>
	return list->head == list;
   1af9c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af9e:	454d      	cmp	r5, r9
   1afa0:	d001      	beq.n	1afa6 <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1afa2:	2d00      	cmp	r5, #0
   1afa4:	d1e5      	bne.n	1af72 <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   1afa6:	68b2      	ldr	r2, [r6, #8]
   1afa8:	4b1c      	ldr	r3, [pc, #112]	; (1b01c <z_thread_single_abort+0x200>)
   1afaa:	429a      	cmp	r2, r3
   1afac:	d102      	bne.n	1afb4 <z_thread_single_abort+0x198>
			update_cache(1);
   1afae:	2001      	movs	r0, #1
   1afb0:	f7ff fc90 	bl	1a8d4 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1afb4:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   1afb6:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1afb8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   1afba:	f043 0308 	orr.w	r3, r3, #8
   1afbe:	7363      	strb	r3, [r4, #13]
   1afc0:	f104 0338 	add.w	r3, r4, #56	; 0x38
   1afc4:	e8d3 1fef 	ldaex	r1, [r3]
   1afc8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1afcc:	2800      	cmp	r0, #0
   1afce:	d1f9      	bne.n	1afc4 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1afd0:	480f      	ldr	r0, [pc, #60]	; (1b010 <z_thread_single_abort+0x1f4>)
   1afd2:	f000 fd1b 	bl	1ba0c <z_spin_unlock_valid>
   1afd6:	b940      	cbnz	r0, 1afea <z_thread_single_abort+0x1ce>
   1afd8:	490e      	ldr	r1, [pc, #56]	; (1b014 <z_thread_single_abort+0x1f8>)
   1afda:	480b      	ldr	r0, [pc, #44]	; (1b008 <z_thread_single_abort+0x1ec>)
   1afdc:	22a7      	movs	r2, #167	; 0xa7
   1afde:	f001 fcdb 	bl	1c998 <printk>
   1afe2:	21a7      	movs	r1, #167	; 0xa7
   1afe4:	480b      	ldr	r0, [pc, #44]	; (1b014 <z_thread_single_abort+0x1f8>)
   1afe6:	f001 ff7d 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1afea:	f387 8811 	msr	BASEPRI, r7
   1afee:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1aff2:	2d00      	cmp	r5, #0
   1aff4:	f43f af62 	beq.w	1aebc <z_thread_single_abort+0xa0>
		fn_abort(thread);
   1aff8:	4620      	mov	r0, r4
   1affa:	462b      	mov	r3, r5
}
   1affc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   1b000:	4718      	bx	r3
   1b002:	bf00      	nop
   1b004:	0002638d 	.word	0x0002638d
   1b008:	00022dd6 	.word	0x00022dd6
   1b00c:	20009fbc 	.word	0x20009fbc
   1b010:	20009ff4 	.word	0x20009ff4
   1b014:	00022e10 	.word	0x00022e10
   1b018:	20009fe8 	.word	0x20009fe8
   1b01c:	20009510 	.word	0x20009510

0001b020 <unready_thread>:
{
   1b020:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1b022:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1b026:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1b028:	2b00      	cmp	r3, #0
   1b02a:	da07      	bge.n	1b03c <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b02c:	4601      	mov	r1, r0
   1b02e:	4808      	ldr	r0, [pc, #32]	; (1b050 <unready_thread+0x30>)
   1b030:	f7ff fbea 	bl	1a808 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b034:	7b63      	ldrb	r3, [r4, #13]
   1b036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b03a:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   1b03c:	4b05      	ldr	r3, [pc, #20]	; (1b054 <unready_thread+0x34>)
   1b03e:	6898      	ldr	r0, [r3, #8]
   1b040:	1b03      	subs	r3, r0, r4
   1b042:	4258      	negs	r0, r3
   1b044:	4158      	adcs	r0, r3
}
   1b046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1b04a:	f7ff bc43 	b.w	1a8d4 <update_cache>
   1b04e:	bf00      	nop
   1b050:	20009fe8 	.word	0x20009fe8
   1b054:	20009fbc 	.word	0x20009fbc

0001b058 <add_to_waitq_locked>:
{
   1b058:	b538      	push	{r3, r4, r5, lr}
   1b05a:	4604      	mov	r4, r0
   1b05c:	460d      	mov	r5, r1
	unready_thread(thread);
   1b05e:	f7ff ffdf 	bl	1b020 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b062:	7b63      	ldrb	r3, [r4, #13]
   1b064:	f043 0302 	orr.w	r3, r3, #2
   1b068:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b06a:	b1ed      	cbz	r5, 1b0a8 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b06c:	4b15      	ldr	r3, [pc, #84]	; (1b0c4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1b06e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b070:	429c      	cmp	r4, r3
   1b072:	d10a      	bne.n	1b08a <add_to_waitq_locked+0x32>
   1b074:	4914      	ldr	r1, [pc, #80]	; (1b0c8 <add_to_waitq_locked+0x70>)
   1b076:	4815      	ldr	r0, [pc, #84]	; (1b0cc <add_to_waitq_locked+0x74>)
   1b078:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b07c:	f001 fc8c 	bl	1c998 <printk>
   1b080:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b084:	4810      	ldr	r0, [pc, #64]	; (1b0c8 <add_to_waitq_locked+0x70>)
   1b086:	f001 ff2d 	bl	1cee4 <assert_post_action>
	return list->head == list;
   1b08a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b08c:	429d      	cmp	r5, r3
   1b08e:	d012      	beq.n	1b0b6 <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b090:	b18b      	cbz	r3, 1b0b6 <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b092:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1b096:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b09a:	4291      	cmp	r1, r2
   1b09c:	dd05      	ble.n	1b0aa <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   1b09e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b0a0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b0a4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b0a6:	605c      	str	r4, [r3, #4]
}
   1b0a8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1b0aa:	6869      	ldr	r1, [r5, #4]
   1b0ac:	428b      	cmp	r3, r1
   1b0ae:	d002      	beq.n	1b0b6 <add_to_waitq_locked+0x5e>
   1b0b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b0b2:	2b00      	cmp	r3, #0
   1b0b4:	d1ef      	bne.n	1b096 <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   1b0b6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b0b8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b0ba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b0bc:	686b      	ldr	r3, [r5, #4]
   1b0be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b0c0:	606c      	str	r4, [r5, #4]
}
   1b0c2:	e7f1      	b.n	1b0a8 <add_to_waitq_locked+0x50>
   1b0c4:	20009510 	.word	0x20009510
   1b0c8:	0002638d 	.word	0x0002638d
   1b0cc:	00022dd6 	.word	0x00022dd6

0001b0d0 <pend>:
{
   1b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0d4:	4604      	mov	r4, r0
   1b0d6:	4688      	mov	r8, r1
   1b0d8:	4616      	mov	r6, r2
   1b0da:	461d      	mov	r5, r3
	__asm__ volatile(
   1b0dc:	f04f 0320 	mov.w	r3, #32
   1b0e0:	f3ef 8711 	mrs	r7, BASEPRI
   1b0e4:	f383 8811 	msr	BASEPRI, r3
   1b0e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b0ec:	481a      	ldr	r0, [pc, #104]	; (1b158 <pend+0x88>)
   1b0ee:	f000 fc7f 	bl	1b9f0 <z_spin_lock_valid>
   1b0f2:	b940      	cbnz	r0, 1b106 <pend+0x36>
   1b0f4:	4919      	ldr	r1, [pc, #100]	; (1b15c <pend+0x8c>)
   1b0f6:	481a      	ldr	r0, [pc, #104]	; (1b160 <pend+0x90>)
   1b0f8:	227c      	movs	r2, #124	; 0x7c
   1b0fa:	f001 fc4d 	bl	1c998 <printk>
   1b0fe:	217c      	movs	r1, #124	; 0x7c
   1b100:	4816      	ldr	r0, [pc, #88]	; (1b15c <pend+0x8c>)
   1b102:	f001 feef 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b106:	4814      	ldr	r0, [pc, #80]	; (1b158 <pend+0x88>)
   1b108:	f000 fc8e 	bl	1ba28 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1b10c:	4620      	mov	r0, r4
   1b10e:	4641      	mov	r1, r8
   1b110:	f7ff ffa2 	bl	1b058 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b114:	4810      	ldr	r0, [pc, #64]	; (1b158 <pend+0x88>)
   1b116:	f000 fc79 	bl	1ba0c <z_spin_unlock_valid>
   1b11a:	b940      	cbnz	r0, 1b12e <pend+0x5e>
   1b11c:	490f      	ldr	r1, [pc, #60]	; (1b15c <pend+0x8c>)
   1b11e:	4810      	ldr	r0, [pc, #64]	; (1b160 <pend+0x90>)
   1b120:	22a7      	movs	r2, #167	; 0xa7
   1b122:	f001 fc39 	bl	1c998 <printk>
   1b126:	21a7      	movs	r1, #167	; 0xa7
   1b128:	480c      	ldr	r0, [pc, #48]	; (1b15c <pend+0x8c>)
   1b12a:	f001 fedb 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1b12e:	f387 8811 	msr	BASEPRI, r7
   1b132:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b136:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b13a:	bf08      	it	eq
   1b13c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b140:	d008      	beq.n	1b154 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b142:	4632      	mov	r2, r6
   1b144:	462b      	mov	r3, r5
   1b146:	f104 0018 	add.w	r0, r4, #24
   1b14a:	4906      	ldr	r1, [pc, #24]	; (1b164 <pend+0x94>)
}
   1b14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b150:	f000 bde2 	b.w	1bd18 <z_add_timeout>
   1b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b158:	20009ff4 	.word	0x20009ff4
   1b15c:	00022e10 	.word	0x00022e10
   1b160:	00022dd6 	.word	0x00022dd6
   1b164:	0001ab85 	.word	0x0001ab85

0001b168 <z_pend_curr>:
{
   1b168:	b538      	push	{r3, r4, r5, lr}
   1b16a:	4605      	mov	r5, r0
	pending_current = _current;
   1b16c:	4b0d      	ldr	r3, [pc, #52]	; (1b1a4 <z_pend_curr+0x3c>)
{
   1b16e:	460c      	mov	r4, r1
	pending_current = _current;
   1b170:	6898      	ldr	r0, [r3, #8]
   1b172:	4b0d      	ldr	r3, [pc, #52]	; (1b1a8 <z_pend_curr+0x40>)
{
   1b174:	4611      	mov	r1, r2
	pending_current = _current;
   1b176:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b17c:	f7ff ffa8 	bl	1b0d0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b180:	4628      	mov	r0, r5
   1b182:	f000 fc43 	bl	1ba0c <z_spin_unlock_valid>
   1b186:	b940      	cbnz	r0, 1b19a <z_pend_curr+0x32>
   1b188:	4908      	ldr	r1, [pc, #32]	; (1b1ac <z_pend_curr+0x44>)
   1b18a:	4809      	ldr	r0, [pc, #36]	; (1b1b0 <z_pend_curr+0x48>)
   1b18c:	22be      	movs	r2, #190	; 0xbe
   1b18e:	f001 fc03 	bl	1c998 <printk>
   1b192:	21be      	movs	r1, #190	; 0xbe
   1b194:	4805      	ldr	r0, [pc, #20]	; (1b1ac <z_pend_curr+0x44>)
   1b196:	f001 fea5 	bl	1cee4 <assert_post_action>
   1b19a:	4620      	mov	r0, r4
}
   1b19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b1a0:	f7f2 bae8 	b.w	d774 <arch_swap>
   1b1a4:	20009fbc 	.word	0x20009fbc
   1b1a8:	20009ff0 	.word	0x20009ff0
   1b1ac:	00022e10 	.word	0x00022e10
   1b1b0:	00022dd6 	.word	0x00022dd6

0001b1b4 <z_set_prio>:
{
   1b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1b6:	4604      	mov	r4, r0
   1b1b8:	460d      	mov	r5, r1
	__asm__ volatile(
   1b1ba:	f04f 0320 	mov.w	r3, #32
   1b1be:	f3ef 8611 	mrs	r6, BASEPRI
   1b1c2:	f383 8811 	msr	BASEPRI, r3
   1b1c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b1ca:	4831      	ldr	r0, [pc, #196]	; (1b290 <z_set_prio+0xdc>)
   1b1cc:	f000 fc10 	bl	1b9f0 <z_spin_lock_valid>
   1b1d0:	b940      	cbnz	r0, 1b1e4 <z_set_prio+0x30>
   1b1d2:	4930      	ldr	r1, [pc, #192]	; (1b294 <z_set_prio+0xe0>)
   1b1d4:	4830      	ldr	r0, [pc, #192]	; (1b298 <z_set_prio+0xe4>)
   1b1d6:	227c      	movs	r2, #124	; 0x7c
   1b1d8:	f001 fbde 	bl	1c998 <printk>
   1b1dc:	217c      	movs	r1, #124	; 0x7c
   1b1de:	482d      	ldr	r0, [pc, #180]	; (1b294 <z_set_prio+0xe0>)
   1b1e0:	f001 fe80 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b1e4:	482a      	ldr	r0, [pc, #168]	; (1b290 <z_set_prio+0xdc>)
   1b1e6:	f000 fc1f 	bl	1ba28 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b1ea:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1b1ec:	b26d      	sxtb	r5, r5
   1b1ee:	06db      	lsls	r3, r3, #27
   1b1f0:	d14a      	bne.n	1b288 <z_set_prio+0xd4>
		if (need_sched) {
   1b1f2:	69a3      	ldr	r3, [r4, #24]
   1b1f4:	2b00      	cmp	r3, #0
   1b1f6:	d147      	bne.n	1b288 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b1f8:	4621      	mov	r1, r4
   1b1fa:	4828      	ldr	r0, [pc, #160]	; (1b29c <z_set_prio+0xe8>)
   1b1fc:	f7ff fb04 	bl	1a808 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b200:	4b27      	ldr	r3, [pc, #156]	; (1b2a0 <z_set_prio+0xec>)
				thread->base.prio = prio;
   1b202:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b204:	429c      	cmp	r4, r3
   1b206:	d10a      	bne.n	1b21e <z_set_prio+0x6a>
   1b208:	4926      	ldr	r1, [pc, #152]	; (1b2a4 <z_set_prio+0xf0>)
   1b20a:	4823      	ldr	r0, [pc, #140]	; (1b298 <z_set_prio+0xe4>)
   1b20c:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b210:	f001 fbc2 	bl	1c998 <printk>
   1b214:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b218:	4822      	ldr	r0, [pc, #136]	; (1b2a4 <z_set_prio+0xf0>)
   1b21a:	f001 fe63 	bl	1cee4 <assert_post_action>
	return list->head == list;
   1b21e:	4a22      	ldr	r2, [pc, #136]	; (1b2a8 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b220:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1b224:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b228:	4283      	cmp	r3, r0
   1b22a:	d027      	beq.n	1b27c <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b22c:	b333      	cbz	r3, 1b27c <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b22e:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1b232:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b236:	42af      	cmp	r7, r5
   1b238:	dd1b      	ble.n	1b272 <z_set_prio+0xbe>
	node->prev = successor->prev;
   1b23a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b23c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b240:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b242:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b244:	2001      	movs	r0, #1
   1b246:	f7ff fb45 	bl	1a8d4 <update_cache>
   1b24a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b24c:	4810      	ldr	r0, [pc, #64]	; (1b290 <z_set_prio+0xdc>)
   1b24e:	f000 fbdd 	bl	1ba0c <z_spin_unlock_valid>
   1b252:	b940      	cbnz	r0, 1b266 <z_set_prio+0xb2>
   1b254:	490f      	ldr	r1, [pc, #60]	; (1b294 <z_set_prio+0xe0>)
   1b256:	4810      	ldr	r0, [pc, #64]	; (1b298 <z_set_prio+0xe4>)
   1b258:	22a7      	movs	r2, #167	; 0xa7
   1b25a:	f001 fb9d 	bl	1c998 <printk>
   1b25e:	21a7      	movs	r1, #167	; 0xa7
   1b260:	480c      	ldr	r0, [pc, #48]	; (1b294 <z_set_prio+0xe0>)
   1b262:	f001 fe3f 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1b266:	f386 8811 	msr	BASEPRI, r6
   1b26a:	f3bf 8f6f 	isb	sy
}
   1b26e:	4620      	mov	r0, r4
   1b270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b272:	4299      	cmp	r1, r3
   1b274:	d002      	beq.n	1b27c <z_set_prio+0xc8>
   1b276:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b278:	2b00      	cmp	r3, #0
   1b27a:	d1da      	bne.n	1b232 <z_set_prio+0x7e>
	node->prev = list->tail;
   1b27c:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1b280:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1b282:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b284:	6314      	str	r4, [r2, #48]	; 0x30
}
   1b286:	e7dd      	b.n	1b244 <z_set_prio+0x90>
			thread->base.prio = prio;
   1b288:	73a5      	strb	r5, [r4, #14]
   1b28a:	2400      	movs	r4, #0
   1b28c:	e7de      	b.n	1b24c <z_set_prio+0x98>
   1b28e:	bf00      	nop
   1b290:	20009ff4 	.word	0x20009ff4
   1b294:	00022e10 	.word	0x00022e10
   1b298:	00022dd6 	.word	0x00022dd6
   1b29c:	20009fe8 	.word	0x20009fe8
   1b2a0:	20009510 	.word	0x20009510
   1b2a4:	0002638d 	.word	0x0002638d
   1b2a8:	20009fbc 	.word	0x20009fbc

0001b2ac <z_unpend_first_thread>:
{
   1b2ac:	b538      	push	{r3, r4, r5, lr}
   1b2ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1b2b0:	f04f 0320 	mov.w	r3, #32
   1b2b4:	f3ef 8511 	mrs	r5, BASEPRI
   1b2b8:	f383 8811 	msr	BASEPRI, r3
   1b2bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b2c0:	482b      	ldr	r0, [pc, #172]	; (1b370 <z_unpend_first_thread+0xc4>)
   1b2c2:	f000 fb95 	bl	1b9f0 <z_spin_lock_valid>
   1b2c6:	b940      	cbnz	r0, 1b2da <z_unpend_first_thread+0x2e>
   1b2c8:	492a      	ldr	r1, [pc, #168]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b2ca:	482b      	ldr	r0, [pc, #172]	; (1b378 <z_unpend_first_thread+0xcc>)
   1b2cc:	227c      	movs	r2, #124	; 0x7c
   1b2ce:	f001 fb63 	bl	1c998 <printk>
   1b2d2:	217c      	movs	r1, #124	; 0x7c
   1b2d4:	4827      	ldr	r0, [pc, #156]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b2d6:	f001 fe05 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b2da:	4825      	ldr	r0, [pc, #148]	; (1b370 <z_unpend_first_thread+0xc4>)
   1b2dc:	f000 fba4 	bl	1ba28 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1b2e0:	4620      	mov	r0, r4
   1b2e2:	f006 f8ab 	bl	2143c <z_priq_dumb_best>
   1b2e6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b2e8:	4821      	ldr	r0, [pc, #132]	; (1b370 <z_unpend_first_thread+0xc4>)
   1b2ea:	f000 fb8f 	bl	1ba0c <z_spin_unlock_valid>
   1b2ee:	b940      	cbnz	r0, 1b302 <z_unpend_first_thread+0x56>
   1b2f0:	4920      	ldr	r1, [pc, #128]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b2f2:	4821      	ldr	r0, [pc, #132]	; (1b378 <z_unpend_first_thread+0xcc>)
   1b2f4:	22a7      	movs	r2, #167	; 0xa7
   1b2f6:	f001 fb4f 	bl	1c998 <printk>
   1b2fa:	21a7      	movs	r1, #167	; 0xa7
   1b2fc:	481d      	ldr	r0, [pc, #116]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b2fe:	f001 fdf1 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1b302:	f385 8811 	msr	BASEPRI, r5
   1b306:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1b30a:	b37c      	cbz	r4, 1b36c <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   1b30c:	f04f 0320 	mov.w	r3, #32
   1b310:	f3ef 8511 	mrs	r5, BASEPRI
   1b314:	f383 8811 	msr	BASEPRI, r3
   1b318:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b31c:	4814      	ldr	r0, [pc, #80]	; (1b370 <z_unpend_first_thread+0xc4>)
   1b31e:	f000 fb67 	bl	1b9f0 <z_spin_lock_valid>
   1b322:	b940      	cbnz	r0, 1b336 <z_unpend_first_thread+0x8a>
   1b324:	4913      	ldr	r1, [pc, #76]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b326:	4814      	ldr	r0, [pc, #80]	; (1b378 <z_unpend_first_thread+0xcc>)
   1b328:	227c      	movs	r2, #124	; 0x7c
   1b32a:	f001 fb35 	bl	1c998 <printk>
   1b32e:	217c      	movs	r1, #124	; 0x7c
   1b330:	4810      	ldr	r0, [pc, #64]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b332:	f001 fdd7 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b336:	480e      	ldr	r0, [pc, #56]	; (1b370 <z_unpend_first_thread+0xc4>)
   1b338:	f000 fb76 	bl	1ba28 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1b33c:	4620      	mov	r0, r4
   1b33e:	f006 f86f 	bl	21420 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b342:	480b      	ldr	r0, [pc, #44]	; (1b370 <z_unpend_first_thread+0xc4>)
   1b344:	f000 fb62 	bl	1ba0c <z_spin_unlock_valid>
   1b348:	b940      	cbnz	r0, 1b35c <z_unpend_first_thread+0xb0>
   1b34a:	490a      	ldr	r1, [pc, #40]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b34c:	480a      	ldr	r0, [pc, #40]	; (1b378 <z_unpend_first_thread+0xcc>)
   1b34e:	22a7      	movs	r2, #167	; 0xa7
   1b350:	f001 fb22 	bl	1c998 <printk>
   1b354:	21a7      	movs	r1, #167	; 0xa7
   1b356:	4807      	ldr	r0, [pc, #28]	; (1b374 <z_unpend_first_thread+0xc8>)
   1b358:	f001 fdc4 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1b35c:	f385 8811 	msr	BASEPRI, r5
   1b360:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1b364:	f104 0018 	add.w	r0, r4, #24
   1b368:	f000 fd86 	bl	1be78 <z_abort_timeout>
}
   1b36c:	4620      	mov	r0, r4
   1b36e:	bd38      	pop	{r3, r4, r5, pc}
   1b370:	20009ff4 	.word	0x20009ff4
   1b374:	00022e10 	.word	0x00022e10
   1b378:	00022dd6 	.word	0x00022dd6

0001b37c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b37c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b37e:	4b04      	ldr	r3, [pc, #16]	; (1b390 <z_sched_init+0x14>)
   1b380:	4608      	mov	r0, r1
   1b382:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1b386:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1b38a:	f7ff b961 	b.w	1a650 <k_sched_time_slice_set>
   1b38e:	bf00      	nop
   1b390:	20009fbc 	.word	0x20009fbc

0001b394 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b396:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b39a:	b153      	cbz	r3, 1b3b2 <z_impl_k_yield+0x1e>
   1b39c:	493d      	ldr	r1, [pc, #244]	; (1b494 <z_impl_k_yield+0x100>)
   1b39e:	483e      	ldr	r0, [pc, #248]	; (1b498 <z_impl_k_yield+0x104>)
   1b3a0:	f240 42cf 	movw	r2, #1231	; 0x4cf
   1b3a4:	f001 faf8 	bl	1c998 <printk>
   1b3a8:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1b3ac:	4839      	ldr	r0, [pc, #228]	; (1b494 <z_impl_k_yield+0x100>)
   1b3ae:	f001 fd99 	bl	1cee4 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1b3b2:	4d3a      	ldr	r5, [pc, #232]	; (1b49c <z_impl_k_yield+0x108>)
   1b3b4:	4f3a      	ldr	r7, [pc, #232]	; (1b4a0 <z_impl_k_yield+0x10c>)
   1b3b6:	68ab      	ldr	r3, [r5, #8]
   1b3b8:	42bb      	cmp	r3, r7
   1b3ba:	d054      	beq.n	1b466 <z_impl_k_yield+0xd2>
	__asm__ volatile(
   1b3bc:	f04f 0320 	mov.w	r3, #32
   1b3c0:	f3ef 8611 	mrs	r6, BASEPRI
   1b3c4:	f383 8811 	msr	BASEPRI, r3
   1b3c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3cc:	4835      	ldr	r0, [pc, #212]	; (1b4a4 <z_impl_k_yield+0x110>)
   1b3ce:	f000 fb0f 	bl	1b9f0 <z_spin_lock_valid>
   1b3d2:	b940      	cbnz	r0, 1b3e6 <z_impl_k_yield+0x52>
   1b3d4:	4934      	ldr	r1, [pc, #208]	; (1b4a8 <z_impl_k_yield+0x114>)
   1b3d6:	4830      	ldr	r0, [pc, #192]	; (1b498 <z_impl_k_yield+0x104>)
   1b3d8:	227c      	movs	r2, #124	; 0x7c
   1b3da:	f001 fadd 	bl	1c998 <printk>
   1b3de:	217c      	movs	r1, #124	; 0x7c
   1b3e0:	4831      	ldr	r0, [pc, #196]	; (1b4a8 <z_impl_k_yield+0x114>)
   1b3e2:	f001 fd7f 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b3e6:	482f      	ldr	r0, [pc, #188]	; (1b4a4 <z_impl_k_yield+0x110>)
   1b3e8:	f000 fb1e 	bl	1ba28 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1b3ec:	68a9      	ldr	r1, [r5, #8]
   1b3ee:	482f      	ldr	r0, [pc, #188]	; (1b4ac <z_impl_k_yield+0x118>)
   1b3f0:	f7ff fa0a 	bl	1a808 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b3f4:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b3f6:	42bc      	cmp	r4, r7
   1b3f8:	d10a      	bne.n	1b410 <z_impl_k_yield+0x7c>
   1b3fa:	4926      	ldr	r1, [pc, #152]	; (1b494 <z_impl_k_yield+0x100>)
   1b3fc:	4826      	ldr	r0, [pc, #152]	; (1b498 <z_impl_k_yield+0x104>)
   1b3fe:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b402:	f001 fac9 	bl	1c998 <printk>
   1b406:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b40a:	4822      	ldr	r0, [pc, #136]	; (1b494 <z_impl_k_yield+0x100>)
   1b40c:	f001 fd6a 	bl	1cee4 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   1b410:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b414:	4925      	ldr	r1, [pc, #148]	; (1b4ac <z_impl_k_yield+0x118>)
   1b416:	428b      	cmp	r3, r1
   1b418:	d036      	beq.n	1b488 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b41a:	2b00      	cmp	r3, #0
   1b41c:	d034      	beq.n	1b488 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b41e:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1b422:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b426:	4287      	cmp	r7, r0
   1b428:	dd29      	ble.n	1b47e <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   1b42a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b42c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b430:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b432:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   1b434:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   1b436:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   1b438:	7b53      	ldrb	r3, [r2, #13]
   1b43a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b43e:	7353      	strb	r3, [r2, #13]
   1b440:	f7ff fa48 	bl	1a8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b444:	4817      	ldr	r0, [pc, #92]	; (1b4a4 <z_impl_k_yield+0x110>)
   1b446:	f000 fae1 	bl	1ba0c <z_spin_unlock_valid>
   1b44a:	b940      	cbnz	r0, 1b45e <z_impl_k_yield+0xca>
   1b44c:	4916      	ldr	r1, [pc, #88]	; (1b4a8 <z_impl_k_yield+0x114>)
   1b44e:	4812      	ldr	r0, [pc, #72]	; (1b498 <z_impl_k_yield+0x104>)
   1b450:	22a7      	movs	r2, #167	; 0xa7
   1b452:	f001 faa1 	bl	1c998 <printk>
   1b456:	21a7      	movs	r1, #167	; 0xa7
   1b458:	4813      	ldr	r0, [pc, #76]	; (1b4a8 <z_impl_k_yield+0x114>)
   1b45a:	f001 fd43 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1b45e:	f386 8811 	msr	BASEPRI, r6
   1b462:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b466:	f04f 0320 	mov.w	r3, #32
   1b46a:	f3ef 8011 	mrs	r0, BASEPRI
   1b46e:	f383 8811 	msr	BASEPRI, r3
   1b472:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1b476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b47a:	f7f2 b97b 	b.w	d774 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b47e:	4293      	cmp	r3, r2
   1b480:	d002      	beq.n	1b488 <z_impl_k_yield+0xf4>
   1b482:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b484:	2b00      	cmp	r3, #0
   1b486:	d1cc      	bne.n	1b422 <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   1b488:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   1b48c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1b48e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b490:	632c      	str	r4, [r5, #48]	; 0x30
}
   1b492:	e7cf      	b.n	1b434 <z_impl_k_yield+0xa0>
   1b494:	0002638d 	.word	0x0002638d
   1b498:	00022dd6 	.word	0x00022dd6
   1b49c:	20009fbc 	.word	0x20009fbc
   1b4a0:	20009510 	.word	0x20009510
   1b4a4:	20009ff4 	.word	0x20009ff4
   1b4a8:	00022e10 	.word	0x00022e10
   1b4ac:	20009fe8 	.word	0x20009fe8

0001b4b0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b4:	4605      	mov	r5, r0
   1b4b6:	460f      	mov	r7, r1
   1b4b8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b4bc:	b153      	cbz	r3, 1b4d4 <z_tick_sleep+0x24>
   1b4be:	4934      	ldr	r1, [pc, #208]	; (1b590 <z_tick_sleep+0xe0>)
   1b4c0:	4834      	ldr	r0, [pc, #208]	; (1b594 <z_tick_sleep+0xe4>)
   1b4c2:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1b4c6:	f001 fa67 	bl	1c998 <printk>
   1b4ca:	f240 41ed 	movw	r1, #1261	; 0x4ed
   1b4ce:	4830      	ldr	r0, [pc, #192]	; (1b590 <z_tick_sleep+0xe0>)
   1b4d0:	f001 fd08 	bl	1cee4 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b4d4:	ea55 0307 	orrs.w	r3, r5, r7
   1b4d8:	d104      	bne.n	1b4e4 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1b4da:	f7ff ff5b 	bl	1b394 <z_impl_k_yield>
		k_yield();
		return 0;
   1b4de:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1b4e4:	f006 f838 	bl	21558 <z_tick_get_32>
   1b4e8:	1944      	adds	r4, r0, r5
   1b4ea:	f04f 0320 	mov.w	r3, #32
   1b4ee:	f3ef 8811 	mrs	r8, BASEPRI
   1b4f2:	f383 8811 	msr	BASEPRI, r3
   1b4f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4fa:	4827      	ldr	r0, [pc, #156]	; (1b598 <z_tick_sleep+0xe8>)
   1b4fc:	f000 fa78 	bl	1b9f0 <z_spin_lock_valid>
   1b500:	b940      	cbnz	r0, 1b514 <z_tick_sleep+0x64>
   1b502:	4926      	ldr	r1, [pc, #152]	; (1b59c <z_tick_sleep+0xec>)
   1b504:	4823      	ldr	r0, [pc, #140]	; (1b594 <z_tick_sleep+0xe4>)
   1b506:	227c      	movs	r2, #124	; 0x7c
   1b508:	f001 fa46 	bl	1c998 <printk>
   1b50c:	217c      	movs	r1, #124	; 0x7c
   1b50e:	4823      	ldr	r0, [pc, #140]	; (1b59c <z_tick_sleep+0xec>)
   1b510:	f001 fce8 	bl	1cee4 <assert_post_action>
	pending_current = _current;
   1b514:	4e22      	ldr	r6, [pc, #136]	; (1b5a0 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   1b516:	4820      	ldr	r0, [pc, #128]	; (1b598 <z_tick_sleep+0xe8>)
   1b518:	f000 fa86 	bl	1ba28 <z_spin_lock_set_owner>
   1b51c:	68b0      	ldr	r0, [r6, #8]
   1b51e:	4b21      	ldr	r3, [pc, #132]	; (1b5a4 <z_tick_sleep+0xf4>)
   1b520:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b522:	f7ff fd7d 	bl	1b020 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b526:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b528:	462a      	mov	r2, r5
   1b52a:	463b      	mov	r3, r7
   1b52c:	3018      	adds	r0, #24
   1b52e:	491e      	ldr	r1, [pc, #120]	; (1b5a8 <z_tick_sleep+0xf8>)
   1b530:	f000 fbf2 	bl	1bd18 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b534:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b536:	4818      	ldr	r0, [pc, #96]	; (1b598 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b538:	7b53      	ldrb	r3, [r2, #13]
   1b53a:	f043 0310 	orr.w	r3, r3, #16
   1b53e:	7353      	strb	r3, [r2, #13]
   1b540:	f000 fa64 	bl	1ba0c <z_spin_unlock_valid>
   1b544:	b940      	cbnz	r0, 1b558 <z_tick_sleep+0xa8>
   1b546:	4915      	ldr	r1, [pc, #84]	; (1b59c <z_tick_sleep+0xec>)
   1b548:	4812      	ldr	r0, [pc, #72]	; (1b594 <z_tick_sleep+0xe4>)
   1b54a:	22be      	movs	r2, #190	; 0xbe
   1b54c:	f001 fa24 	bl	1c998 <printk>
   1b550:	21be      	movs	r1, #190	; 0xbe
   1b552:	4812      	ldr	r0, [pc, #72]	; (1b59c <z_tick_sleep+0xec>)
   1b554:	f001 fcc6 	bl	1cee4 <assert_post_action>
   1b558:	4640      	mov	r0, r8
   1b55a:	f7f2 f90b 	bl	d774 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1b55e:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b560:	7b5b      	ldrb	r3, [r3, #13]
   1b562:	06db      	lsls	r3, r3, #27
   1b564:	d50a      	bpl.n	1b57c <z_tick_sleep+0xcc>
   1b566:	490a      	ldr	r1, [pc, #40]	; (1b590 <z_tick_sleep+0xe0>)
   1b568:	480a      	ldr	r0, [pc, #40]	; (1b594 <z_tick_sleep+0xe4>)
   1b56a:	f240 520b 	movw	r2, #1291	; 0x50b
   1b56e:	f001 fa13 	bl	1c998 <printk>
   1b572:	f240 510b 	movw	r1, #1291	; 0x50b
   1b576:	4806      	ldr	r0, [pc, #24]	; (1b590 <z_tick_sleep+0xe0>)
   1b578:	f001 fcb4 	bl	1cee4 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1b57c:	f005 ffec 	bl	21558 <z_tick_get_32>
   1b580:	1a20      	subs	r0, r4, r0
   1b582:	eb63 0303 	sbc.w	r3, r3, r3
   1b586:	2b00      	cmp	r3, #0
   1b588:	bfb8      	it	lt
   1b58a:	2000      	movlt	r0, #0
   1b58c:	e7a8      	b.n	1b4e0 <z_tick_sleep+0x30>
   1b58e:	bf00      	nop
   1b590:	0002638d 	.word	0x0002638d
   1b594:	00022dd6 	.word	0x00022dd6
   1b598:	20009ff4 	.word	0x20009ff4
   1b59c:	00022e10 	.word	0x00022e10
   1b5a0:	20009fbc 	.word	0x20009fbc
   1b5a4:	20009ff0 	.word	0x20009ff0
   1b5a8:	0001ab85 	.word	0x0001ab85

0001b5ac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b5ac:	b538      	push	{r3, r4, r5, lr}
   1b5ae:	4605      	mov	r5, r0
   1b5b0:	460c      	mov	r4, r1
   1b5b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b5b6:	b153      	cbz	r3, 1b5ce <z_impl_k_sleep+0x22>
   1b5b8:	4911      	ldr	r1, [pc, #68]	; (1b600 <z_impl_k_sleep+0x54>)
   1b5ba:	4812      	ldr	r0, [pc, #72]	; (1b604 <z_impl_k_sleep+0x58>)
   1b5bc:	f240 521a 	movw	r2, #1306	; 0x51a
   1b5c0:	f001 f9ea 	bl	1c998 <printk>
   1b5c4:	f240 511a 	movw	r1, #1306	; 0x51a
   1b5c8:	480d      	ldr	r0, [pc, #52]	; (1b600 <z_impl_k_sleep+0x54>)
   1b5ca:	f001 fc8b 	bl	1cee4 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b5ce:	f1b4 3fff 	cmp.w	r4, #4294967295
   1b5d2:	bf08      	it	eq
   1b5d4:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b5d8:	d106      	bne.n	1b5e8 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1b5da:	4b0b      	ldr	r3, [pc, #44]	; (1b608 <z_impl_k_sleep+0x5c>)
   1b5dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b5de:	f7ff fbc5 	bl	1ad6c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1b5e2:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1b5e6:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1b5e8:	4628      	mov	r0, r5
   1b5ea:	4621      	mov	r1, r4
   1b5ec:	f7ff ff60 	bl	1b4b0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b5f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b5f4:	fb80 0303 	smull	r0, r3, r0, r3
   1b5f8:	0bc0      	lsrs	r0, r0, #15
   1b5fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b5fe:	e7f2      	b.n	1b5e6 <z_impl_k_sleep+0x3a>
   1b600:	0002638d 	.word	0x0002638d
   1b604:	00022dd6 	.word	0x00022dd6
   1b608:	20009fbc 	.word	0x20009fbc

0001b60c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b60c:	4b01      	ldr	r3, [pc, #4]	; (1b614 <z_impl_k_current_get+0x8>)
   1b60e:	6898      	ldr	r0, [r3, #8]
   1b610:	4770      	bx	lr
   1b612:	bf00      	nop
   1b614:	20009fbc 	.word	0x20009fbc

0001b618 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b618:	b538      	push	{r3, r4, r5, lr}
   1b61a:	4604      	mov	r4, r0
   1b61c:	f04f 0320 	mov.w	r3, #32
   1b620:	f3ef 8511 	mrs	r5, BASEPRI
   1b624:	f383 8811 	msr	BASEPRI, r3
   1b628:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b62c:	4815      	ldr	r0, [pc, #84]	; (1b684 <z_impl_k_sem_give+0x6c>)
   1b62e:	f000 f9df 	bl	1b9f0 <z_spin_lock_valid>
   1b632:	b940      	cbnz	r0, 1b646 <z_impl_k_sem_give+0x2e>
   1b634:	4914      	ldr	r1, [pc, #80]	; (1b688 <z_impl_k_sem_give+0x70>)
   1b636:	4815      	ldr	r0, [pc, #84]	; (1b68c <z_impl_k_sem_give+0x74>)
   1b638:	227c      	movs	r2, #124	; 0x7c
   1b63a:	f001 f9ad 	bl	1c998 <printk>
   1b63e:	217c      	movs	r1, #124	; 0x7c
   1b640:	4811      	ldr	r0, [pc, #68]	; (1b688 <z_impl_k_sem_give+0x70>)
   1b642:	f001 fc4f 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b646:	480f      	ldr	r0, [pc, #60]	; (1b684 <z_impl_k_sem_give+0x6c>)
   1b648:	f000 f9ee 	bl	1ba28 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1b64c:	4620      	mov	r0, r4
   1b64e:	f7ff fe2d 	bl	1b2ac <z_unpend_first_thread>

	if (thread != NULL) {
   1b652:	b150      	cbz	r0, 1b66a <z_impl_k_sem_give+0x52>
   1b654:	2200      	movs	r2, #0
   1b656:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b65a:	f7ff fa1b 	bl	1aa94 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b65e:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1b660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b664:	4807      	ldr	r0, [pc, #28]	; (1b684 <z_impl_k_sem_give+0x6c>)
   1b666:	f7ff b841 	b.w	1a6ec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b66a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b66e:	429a      	cmp	r2, r3
   1b670:	bf18      	it	ne
   1b672:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b674:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b676:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b678:	f104 0010 	add.w	r0, r4, #16
   1b67c:	f005 ffe3 	bl	21646 <z_handle_obj_poll_events>
}
   1b680:	e7ed      	b.n	1b65e <z_impl_k_sem_give+0x46>
   1b682:	bf00      	nop
   1b684:	2000a000 	.word	0x2000a000
   1b688:	00022e10 	.word	0x00022e10
   1b68c:	00022dd6 	.word	0x00022dd6

0001b690 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b692:	4604      	mov	r4, r0
   1b694:	4616      	mov	r6, r2
   1b696:	461d      	mov	r5, r3
   1b698:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1b69c:	b15b      	cbz	r3, 1b6b6 <z_impl_k_sem_take+0x26>
   1b69e:	ea52 0305 	orrs.w	r3, r2, r5
   1b6a2:	d008      	beq.n	1b6b6 <z_impl_k_sem_take+0x26>
   1b6a4:	492b      	ldr	r1, [pc, #172]	; (1b754 <z_impl_k_sem_take+0xc4>)
   1b6a6:	482c      	ldr	r0, [pc, #176]	; (1b758 <z_impl_k_sem_take+0xc8>)
   1b6a8:	228c      	movs	r2, #140	; 0x8c
   1b6aa:	f001 f975 	bl	1c998 <printk>
   1b6ae:	218c      	movs	r1, #140	; 0x8c
   1b6b0:	4828      	ldr	r0, [pc, #160]	; (1b754 <z_impl_k_sem_take+0xc4>)
   1b6b2:	f001 fc17 	bl	1cee4 <assert_post_action>
   1b6b6:	f04f 0320 	mov.w	r3, #32
   1b6ba:	f3ef 8711 	mrs	r7, BASEPRI
   1b6be:	f383 8811 	msr	BASEPRI, r3
   1b6c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b6c6:	4825      	ldr	r0, [pc, #148]	; (1b75c <z_impl_k_sem_take+0xcc>)
   1b6c8:	f000 f992 	bl	1b9f0 <z_spin_lock_valid>
   1b6cc:	b940      	cbnz	r0, 1b6e0 <z_impl_k_sem_take+0x50>
   1b6ce:	4924      	ldr	r1, [pc, #144]	; (1b760 <z_impl_k_sem_take+0xd0>)
   1b6d0:	4821      	ldr	r0, [pc, #132]	; (1b758 <z_impl_k_sem_take+0xc8>)
   1b6d2:	227c      	movs	r2, #124	; 0x7c
   1b6d4:	f001 f960 	bl	1c998 <printk>
   1b6d8:	217c      	movs	r1, #124	; 0x7c
   1b6da:	4821      	ldr	r0, [pc, #132]	; (1b760 <z_impl_k_sem_take+0xd0>)
   1b6dc:	f001 fc02 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b6e0:	481e      	ldr	r0, [pc, #120]	; (1b75c <z_impl_k_sem_take+0xcc>)
   1b6e2:	f000 f9a1 	bl	1ba28 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1b6e6:	68a3      	ldr	r3, [r4, #8]
   1b6e8:	b1ab      	cbz	r3, 1b716 <z_impl_k_sem_take+0x86>
		sem->count--;
   1b6ea:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b6ec:	481b      	ldr	r0, [pc, #108]	; (1b75c <z_impl_k_sem_take+0xcc>)
   1b6ee:	60a3      	str	r3, [r4, #8]
   1b6f0:	f000 f98c 	bl	1ba0c <z_spin_unlock_valid>
   1b6f4:	b940      	cbnz	r0, 1b708 <z_impl_k_sem_take+0x78>
   1b6f6:	491a      	ldr	r1, [pc, #104]	; (1b760 <z_impl_k_sem_take+0xd0>)
   1b6f8:	4817      	ldr	r0, [pc, #92]	; (1b758 <z_impl_k_sem_take+0xc8>)
   1b6fa:	22a7      	movs	r2, #167	; 0xa7
   1b6fc:	f001 f94c 	bl	1c998 <printk>
   1b700:	21a7      	movs	r1, #167	; 0xa7
   1b702:	4817      	ldr	r0, [pc, #92]	; (1b760 <z_impl_k_sem_take+0xd0>)
   1b704:	f001 fbee 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1b708:	f387 8811 	msr	BASEPRI, r7
   1b70c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b710:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b712:	b003      	add	sp, #12
   1b714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b716:	ea56 0305 	orrs.w	r3, r6, r5
   1b71a:	d113      	bne.n	1b744 <z_impl_k_sem_take+0xb4>
   1b71c:	480f      	ldr	r0, [pc, #60]	; (1b75c <z_impl_k_sem_take+0xcc>)
   1b71e:	f000 f975 	bl	1ba0c <z_spin_unlock_valid>
   1b722:	b940      	cbnz	r0, 1b736 <z_impl_k_sem_take+0xa6>
   1b724:	490e      	ldr	r1, [pc, #56]	; (1b760 <z_impl_k_sem_take+0xd0>)
   1b726:	480c      	ldr	r0, [pc, #48]	; (1b758 <z_impl_k_sem_take+0xc8>)
   1b728:	22a7      	movs	r2, #167	; 0xa7
   1b72a:	f001 f935 	bl	1c998 <printk>
   1b72e:	21a7      	movs	r1, #167	; 0xa7
   1b730:	480b      	ldr	r0, [pc, #44]	; (1b760 <z_impl_k_sem_take+0xd0>)
   1b732:	f001 fbd7 	bl	1cee4 <assert_post_action>
   1b736:	f387 8811 	msr	BASEPRI, r7
   1b73a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b73e:	f06f 000f 	mvn.w	r0, #15
   1b742:	e7e6      	b.n	1b712 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b744:	4622      	mov	r2, r4
   1b746:	4639      	mov	r1, r7
   1b748:	e9cd 6500 	strd	r6, r5, [sp]
   1b74c:	4803      	ldr	r0, [pc, #12]	; (1b75c <z_impl_k_sem_take+0xcc>)
   1b74e:	f7ff fd0b 	bl	1b168 <z_pend_curr>
	return ret;
   1b752:	e7de      	b.n	1b712 <z_impl_k_sem_take+0x82>
   1b754:	000263af 	.word	0x000263af
   1b758:	00022dd6 	.word	0x00022dd6
   1b75c:	2000a000 	.word	0x2000a000
   1b760:	00022e10 	.word	0x00022e10

0001b764 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b764:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b766:	4c08      	ldr	r4, [pc, #32]	; (1b788 <k_sys_work_q_init+0x24>)
   1b768:	f04f 33ff 	mov.w	r3, #4294967295
   1b76c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b770:	4620      	mov	r0, r4
   1b772:	4906      	ldr	r1, [pc, #24]	; (1b78c <k_sys_work_q_init+0x28>)
   1b774:	f000 f98c 	bl	1ba90 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b778:	4905      	ldr	r1, [pc, #20]	; (1b790 <k_sys_work_q_init+0x2c>)
   1b77a:	f104 0020 	add.w	r0, r4, #32
   1b77e:	f005 fe8d 	bl	2149c <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b782:	2000      	movs	r0, #0
   1b784:	bd10      	pop	{r4, pc}
   1b786:	bf00      	nop
   1b788:	20009630 	.word	0x20009630
   1b78c:	2000dd08 	.word	0x2000dd08
   1b790:	000263cf 	.word	0x000263cf

0001b794 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b798:	4604      	mov	r4, r0
   1b79a:	460f      	mov	r7, r1
   1b79c:	4698      	mov	r8, r3
   1b79e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b7a0:	4b2c      	ldr	r3, [pc, #176]	; (1b854 <z_setup_new_thread+0xc0>)
   1b7a2:	4616      	mov	r6, r2
   1b7a4:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1b7a8:	e8d2 1fef 	ldaex	r1, [r2]
   1b7ac:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1b7b0:	2800      	cmp	r0, #0
   1b7b2:	d1f9      	bne.n	1b7a8 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   1b7b4:	4299      	cmp	r1, r3
   1b7b6:	d10a      	bne.n	1b7ce <z_setup_new_thread+0x3a>
   1b7b8:	4927      	ldr	r1, [pc, #156]	; (1b858 <z_setup_new_thread+0xc4>)
   1b7ba:	4828      	ldr	r0, [pc, #160]	; (1b85c <z_setup_new_thread+0xc8>)
   1b7bc:	f240 2223 	movw	r2, #547	; 0x223
   1b7c0:	f001 f8ea 	bl	1c998 <printk>
   1b7c4:	f240 2123 	movw	r1, #547	; 0x223
   1b7c8:	4823      	ldr	r0, [pc, #140]	; (1b858 <z_setup_new_thread+0xc4>)
   1b7ca:	f001 fb8b 	bl	1cee4 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   1b7ce:	2d0f      	cmp	r5, #15
   1b7d0:	d12f      	bne.n	1b832 <z_setup_new_thread+0x9e>
   1b7d2:	4b23      	ldr	r3, [pc, #140]	; (1b860 <z_setup_new_thread+0xcc>)
   1b7d4:	4598      	cmp	r8, r3
   1b7d6:	d130      	bne.n	1b83a <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   1b7d8:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1b7dc:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1b7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1b7e2:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1b7e4:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b7e6:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   1b7e8:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1b7ea:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b7ee:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7f0:	9302      	str	r3, [sp, #8]
   1b7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b7f4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7f8:	9301      	str	r3, [sp, #4]
   1b7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   1b7fc:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   1b7fe:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b802:	9300      	str	r3, [sp, #0]
   1b804:	4632      	mov	r2, r6
   1b806:	4643      	mov	r3, r8
   1b808:	4639      	mov	r1, r7
   1b80a:	4620      	mov	r0, r4
	node->prev = NULL;
   1b80c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   1b810:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1b812:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b814:	f7f2 f84c 	bl	d8b0 <arch_new_thread>
	if (!_current) {
   1b818:	4b12      	ldr	r3, [pc, #72]	; (1b864 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   1b81a:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1b81e:	689b      	ldr	r3, [r3, #8]
   1b820:	b10b      	cbz	r3, 1b826 <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1b822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1b826:	4630      	mov	r0, r6
   1b828:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   1b82c:	b004      	add	sp, #16
   1b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1b832:	f105 0310 	add.w	r3, r5, #16
   1b836:	2b1e      	cmp	r3, #30
   1b838:	d9ce      	bls.n	1b7d8 <z_setup_new_thread+0x44>
   1b83a:	f240 2226 	movw	r2, #550	; 0x226
   1b83e:	4906      	ldr	r1, [pc, #24]	; (1b858 <z_setup_new_thread+0xc4>)
   1b840:	4806      	ldr	r0, [pc, #24]	; (1b85c <z_setup_new_thread+0xc8>)
   1b842:	f001 f8a9 	bl	1c998 <printk>
   1b846:	f240 2126 	movw	r1, #550	; 0x226
   1b84a:	4803      	ldr	r0, [pc, #12]	; (1b858 <z_setup_new_thread+0xc4>)
   1b84c:	f001 fb4a 	bl	1cee4 <assert_post_action>
   1b850:	e7c2      	b.n	1b7d8 <z_setup_new_thread+0x44>
   1b852:	bf00      	nop
   1b854:	1337c0d3 	.word	0x1337c0d3
   1b858:	000263d8 	.word	0x000263d8
   1b85c:	00022dd6 	.word	0x00022dd6
   1b860:	00019b7d 	.word	0x00019b7d
   1b864:	20009fbc 	.word	0x20009fbc

0001b868 <z_impl_k_thread_create>:
{
   1b868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b86c:	b087      	sub	sp, #28
   1b86e:	4604      	mov	r4, r0
   1b870:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   1b874:	460f      	mov	r7, r1
   1b876:	4690      	mov	r8, r2
   1b878:	4699      	mov	r9, r3
   1b87a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1b87e:	b153      	cbz	r3, 1b896 <z_impl_k_thread_create+0x2e>
   1b880:	491a      	ldr	r1, [pc, #104]	; (1b8ec <z_impl_k_thread_create+0x84>)
   1b882:	481b      	ldr	r0, [pc, #108]	; (1b8f0 <z_impl_k_thread_create+0x88>)
   1b884:	f240 228f 	movw	r2, #655	; 0x28f
   1b888:	f001 f886 	bl	1c998 <printk>
   1b88c:	f240 218f 	movw	r1, #655	; 0x28f
   1b890:	4816      	ldr	r0, [pc, #88]	; (1b8ec <z_impl_k_thread_create+0x84>)
   1b892:	f001 fb27 	bl	1cee4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b896:	2300      	movs	r3, #0
   1b898:	9305      	str	r3, [sp, #20]
   1b89a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b89c:	4642      	mov	r2, r8
   1b89e:	9304      	str	r3, [sp, #16]
   1b8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b8a2:	4639      	mov	r1, r7
   1b8a4:	9303      	str	r3, [sp, #12]
   1b8a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b8a8:	4620      	mov	r0, r4
   1b8aa:	9302      	str	r3, [sp, #8]
   1b8ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b8ae:	9301      	str	r3, [sp, #4]
   1b8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b8b2:	9300      	str	r3, [sp, #0]
   1b8b4:	464b      	mov	r3, r9
   1b8b6:	f7ff ff6d 	bl	1b794 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b8ba:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b8be:	bf08      	it	eq
   1b8c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b8c4:	d005      	beq.n	1b8d2 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b8c6:	ea55 0306 	orrs.w	r3, r5, r6
   1b8ca:	d106      	bne.n	1b8da <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   1b8cc:	4620      	mov	r0, r4
   1b8ce:	f7ff f917 	bl	1ab00 <z_sched_start>
}
   1b8d2:	4620      	mov	r0, r4
   1b8d4:	b007      	add	sp, #28
   1b8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b8da:	4632      	mov	r2, r6
   1b8dc:	462b      	mov	r3, r5
   1b8de:	4905      	ldr	r1, [pc, #20]	; (1b8f4 <z_impl_k_thread_create+0x8c>)
   1b8e0:	f104 0018 	add.w	r0, r4, #24
   1b8e4:	f000 fa18 	bl	1bd18 <z_add_timeout>
   1b8e8:	e7f3      	b.n	1b8d2 <z_impl_k_thread_create+0x6a>
   1b8ea:	bf00      	nop
   1b8ec:	000263d8 	.word	0x000263d8
   1b8f0:	00022dd6 	.word	0x00022dd6
   1b8f4:	0001ab85 	.word	0x0001ab85

0001b8f8 <z_init_static_threads>:
{
   1b8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b8fc:	4c37      	ldr	r4, [pc, #220]	; (1b9dc <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1b8fe:	4d38      	ldr	r5, [pc, #224]	; (1b9e0 <z_init_static_threads+0xe8>)
   1b900:	4f38      	ldr	r7, [pc, #224]	; (1b9e4 <z_init_static_threads+0xec>)
{
   1b902:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1b904:	42ac      	cmp	r4, r5
   1b906:	4626      	mov	r6, r4
   1b908:	d90a      	bls.n	1b920 <z_init_static_threads+0x28>
   1b90a:	4639      	mov	r1, r7
   1b90c:	4836      	ldr	r0, [pc, #216]	; (1b9e8 <z_init_static_threads+0xf0>)
   1b90e:	f240 22fd 	movw	r2, #765	; 0x2fd
   1b912:	f001 f841 	bl	1c998 <printk>
   1b916:	f240 21fd 	movw	r1, #765	; 0x2fd
   1b91a:	4638      	mov	r0, r7
   1b91c:	f001 fae2 	bl	1cee4 <assert_post_action>
   1b920:	42ae      	cmp	r6, r5
   1b922:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1b926:	d31b      	bcc.n	1b960 <z_init_static_threads+0x68>
	k_sched_lock();
   1b928:	f7fe ff16 	bl	1a758 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b92c:	4c2b      	ldr	r4, [pc, #172]	; (1b9dc <z_init_static_threads+0xe4>)
   1b92e:	4e2d      	ldr	r6, [pc, #180]	; (1b9e4 <z_init_static_threads+0xec>)
   1b930:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1b9e8 <z_init_static_threads+0xf0>
   1b934:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1b9ec <z_init_static_threads+0xf4>
   1b938:	42ac      	cmp	r4, r5
   1b93a:	d90a      	bls.n	1b952 <z_init_static_threads+0x5a>
   1b93c:	4631      	mov	r1, r6
   1b93e:	4640      	mov	r0, r8
   1b940:	f44f 7247 	mov.w	r2, #796	; 0x31c
   1b944:	f001 f828 	bl	1c998 <printk>
   1b948:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1b94c:	4630      	mov	r0, r6
   1b94e:	f001 fac9 	bl	1cee4 <assert_post_action>
   1b952:	42ac      	cmp	r4, r5
   1b954:	d320      	bcc.n	1b998 <z_init_static_threads+0xa0>
}
   1b956:	b007      	add	sp, #28
   1b958:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1b95c:	f7fe bff4 	b.w	1a948 <k_sched_unlock>
		z_setup_new_thread(
   1b960:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b964:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b968:	9305      	str	r3, [sp, #20]
   1b96a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b96e:	9304      	str	r3, [sp, #16]
   1b970:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b974:	9303      	str	r3, [sp, #12]
   1b976:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b97a:	9302      	str	r3, [sp, #8]
   1b97c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b980:	9301      	str	r3, [sp, #4]
   1b982:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b986:	9300      	str	r3, [sp, #0]
   1b988:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b98c:	f7ff ff02 	bl	1b794 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b990:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b994:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   1b996:	e7b5      	b.n	1b904 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b998:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b99a:	1c5a      	adds	r2, r3, #1
   1b99c:	d00f      	beq.n	1b9be <z_init_static_threads+0xc6>
   1b99e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1b9a2:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b9a6:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   1b9a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b9ac:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b9b0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1b9b4:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b9b6:	d104      	bne.n	1b9c2 <z_init_static_threads+0xca>
	z_sched_start(thread);
   1b9b8:	4638      	mov	r0, r7
   1b9ba:	f7ff f8a1 	bl	1ab00 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b9be:	3430      	adds	r4, #48	; 0x30
   1b9c0:	e7ba      	b.n	1b938 <z_init_static_threads+0x40>
   1b9c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b9c6:	2300      	movs	r3, #0
   1b9c8:	f7ed f8b0 	bl	8b2c <__aeabi_uldivmod>
   1b9cc:	4602      	mov	r2, r0
   1b9ce:	460b      	mov	r3, r1
   1b9d0:	f107 0018 	add.w	r0, r7, #24
   1b9d4:	4649      	mov	r1, r9
   1b9d6:	f000 f99f 	bl	1bd18 <z_add_timeout>
   1b9da:	e7f0      	b.n	1b9be <z_init_static_threads+0xc6>
   1b9dc:	200084b8 	.word	0x200084b8
   1b9e0:	200084b8 	.word	0x200084b8
   1b9e4:	000263d8 	.word	0x000263d8
   1b9e8:	00022dd6 	.word	0x00022dd6
   1b9ec:	0001ab85 	.word	0x0001ab85

0001b9f0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1b9f0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1b9f2:	b138      	cbz	r0, 1ba04 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1b9f4:	4b04      	ldr	r3, [pc, #16]	; (1ba08 <z_spin_lock_valid+0x18>)
   1b9f6:	f000 0003 	and.w	r0, r0, #3
   1b9fa:	7e1b      	ldrb	r3, [r3, #24]
   1b9fc:	1ac0      	subs	r0, r0, r3
   1b9fe:	bf18      	it	ne
   1ba00:	2001      	movne	r0, #1
   1ba02:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1ba04:	2001      	movs	r0, #1
}
   1ba06:	4770      	bx	lr
   1ba08:	20009fbc 	.word	0x20009fbc

0001ba0c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ba0c:	4905      	ldr	r1, [pc, #20]	; (1ba24 <z_spin_unlock_valid+0x18>)
{
   1ba0e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ba10:	688a      	ldr	r2, [r1, #8]
   1ba12:	7e08      	ldrb	r0, [r1, #24]
   1ba14:	6819      	ldr	r1, [r3, #0]
   1ba16:	4302      	orrs	r2, r0
   1ba18:	2000      	movs	r0, #0
   1ba1a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1ba1c:	bf04      	itt	eq
   1ba1e:	6018      	streq	r0, [r3, #0]
	return true;
   1ba20:	2001      	moveq	r0, #1
}
   1ba22:	4770      	bx	lr
   1ba24:	20009fbc 	.word	0x20009fbc

0001ba28 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1ba28:	4a02      	ldr	r2, [pc, #8]	; (1ba34 <z_spin_lock_set_owner+0xc>)
   1ba2a:	7e11      	ldrb	r1, [r2, #24]
   1ba2c:	6893      	ldr	r3, [r2, #8]
   1ba2e:	430b      	orrs	r3, r1
   1ba30:	6003      	str	r3, [r0, #0]
}
   1ba32:	4770      	bx	lr
   1ba34:	20009fbc 	.word	0x20009fbc

0001ba38 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1ba38:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ba3a:	f04f 0320 	mov.w	r3, #32
   1ba3e:	f3ef 8511 	mrs	r5, BASEPRI
   1ba42:	f383 8811 	msr	BASEPRI, r3
   1ba46:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   1ba4a:	4c0e      	ldr	r4, [pc, #56]	; (1ba84 <z_self_abort+0x4c>)
   1ba4c:	6923      	ldr	r3, [r4, #16]
   1ba4e:	b143      	cbz	r3, 1ba62 <z_self_abort+0x2a>
   1ba50:	490d      	ldr	r1, [pc, #52]	; (1ba88 <z_self_abort+0x50>)
   1ba52:	480e      	ldr	r0, [pc, #56]	; (1ba8c <z_self_abort+0x54>)
   1ba54:	2228      	movs	r2, #40	; 0x28
   1ba56:	f000 ff9f 	bl	1c998 <printk>
   1ba5a:	2128      	movs	r1, #40	; 0x28
   1ba5c:	480a      	ldr	r0, [pc, #40]	; (1ba88 <z_self_abort+0x50>)
   1ba5e:	f001 fa41 	bl	1cee4 <assert_post_action>
	cpu->pending_abort = _current;
   1ba62:	68a0      	ldr	r0, [r4, #8]
   1ba64:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   1ba66:	f7ff f981 	bl	1ad6c <z_impl_k_thread_suspend>
   1ba6a:	4628      	mov	r0, r5
   1ba6c:	f7f1 fe82 	bl	d774 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   1ba70:	4905      	ldr	r1, [pc, #20]	; (1ba88 <z_self_abort+0x50>)
   1ba72:	4806      	ldr	r0, [pc, #24]	; (1ba8c <z_self_abort+0x54>)
   1ba74:	2230      	movs	r2, #48	; 0x30
   1ba76:	f000 ff8f 	bl	1c998 <printk>
   1ba7a:	2130      	movs	r1, #48	; 0x30
   1ba7c:	4802      	ldr	r0, [pc, #8]	; (1ba88 <z_self_abort+0x50>)
   1ba7e:	f001 fa31 	bl	1cee4 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ba82:	bf00      	nop
   1ba84:	20009fbc 	.word	0x20009fbc
   1ba88:	000263fb 	.word	0x000263fb
   1ba8c:	00022dd6 	.word	0x00022dd6

0001ba90 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba94:	4604      	mov	r4, r0
   1ba96:	b088      	sub	sp, #32
   1ba98:	460d      	mov	r5, r1
   1ba9a:	4616      	mov	r6, r2
   1ba9c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1ba9e:	f005 fc7e 	bl	2139e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1baa2:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1baa6:	2200      	movs	r2, #0
   1baa8:	2300      	movs	r3, #0
   1baaa:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1baae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bab2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1bab6:	4629      	mov	r1, r5
   1bab8:	4632      	mov	r2, r6
   1baba:	4640      	mov	r0, r8
   1babc:	4b05      	ldr	r3, [pc, #20]	; (1bad4 <k_work_q_start+0x44>)
   1babe:	9400      	str	r4, [sp, #0]
   1bac0:	f7ff fed2 	bl	1b868 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1bac4:	4640      	mov	r0, r8
   1bac6:	4904      	ldr	r1, [pc, #16]	; (1bad8 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1bac8:	b008      	add	sp, #32
   1baca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bace:	f005 bce5 	b.w	2149c <z_impl_k_thread_name_set>
   1bad2:	bf00      	nop
   1bad4:	0000a525 	.word	0x0000a525
   1bad8:	00026424 	.word	0x00026424

0001badc <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bae0:	4606      	mov	r6, r0
   1bae2:	460d      	mov	r5, r1
   1bae4:	4690      	mov	r8, r2
   1bae6:	461f      	mov	r7, r3
   1bae8:	f04f 0320 	mov.w	r3, #32
   1baec:	f3ef 8911 	mrs	r9, BASEPRI
   1baf0:	f383 8811 	msr	BASEPRI, r3
   1baf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1baf8:	482c      	ldr	r0, [pc, #176]	; (1bbac <k_delayed_work_submit_to_queue+0xd0>)
   1bafa:	f7ff ff79 	bl	1b9f0 <z_spin_lock_valid>
   1bafe:	b940      	cbnz	r0, 1bb12 <k_delayed_work_submit_to_queue+0x36>
   1bb00:	492b      	ldr	r1, [pc, #172]	; (1bbb0 <k_delayed_work_submit_to_queue+0xd4>)
   1bb02:	482c      	ldr	r0, [pc, #176]	; (1bbb4 <k_delayed_work_submit_to_queue+0xd8>)
   1bb04:	227c      	movs	r2, #124	; 0x7c
   1bb06:	f000 ff47 	bl	1c998 <printk>
   1bb0a:	217c      	movs	r1, #124	; 0x7c
   1bb0c:	4828      	ldr	r0, [pc, #160]	; (1bbb0 <k_delayed_work_submit_to_queue+0xd4>)
   1bb0e:	f001 f9e9 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bb12:	4826      	ldr	r0, [pc, #152]	; (1bbac <k_delayed_work_submit_to_queue+0xd0>)
   1bb14:	f7ff ff88 	bl	1ba28 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1bb18:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bb1a:	b1e3      	cbz	r3, 1bb56 <k_delayed_work_submit_to_queue+0x7a>
   1bb1c:	42b3      	cmp	r3, r6
   1bb1e:	d142      	bne.n	1bba6 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1bb20:	4628      	mov	r0, r5
   1bb22:	f005 fcd9 	bl	214d8 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1bb26:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1bb2a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1bb2c:	d015      	beq.n	1bb5a <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   1bb2e:	2800      	cmp	r0, #0
   1bb30:	da14      	bge.n	1bb5c <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bb32:	481e      	ldr	r0, [pc, #120]	; (1bbac <k_delayed_work_submit_to_queue+0xd0>)
   1bb34:	f7ff ff6a 	bl	1ba0c <z_spin_unlock_valid>
   1bb38:	b940      	cbnz	r0, 1bb4c <k_delayed_work_submit_to_queue+0x70>
   1bb3a:	491d      	ldr	r1, [pc, #116]	; (1bbb0 <k_delayed_work_submit_to_queue+0xd4>)
   1bb3c:	481d      	ldr	r0, [pc, #116]	; (1bbb4 <k_delayed_work_submit_to_queue+0xd8>)
   1bb3e:	22a7      	movs	r2, #167	; 0xa7
   1bb40:	f000 ff2a 	bl	1c998 <printk>
   1bb44:	21a7      	movs	r1, #167	; 0xa7
   1bb46:	481a      	ldr	r0, [pc, #104]	; (1bbb0 <k_delayed_work_submit_to_queue+0xd4>)
   1bb48:	f001 f9cc 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1bb4c:	f389 8811 	msr	BASEPRI, r9
   1bb50:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1bb54:	e01c      	b.n	1bb90 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   1bb56:	2e00      	cmp	r6, #0
   1bb58:	d0e2      	beq.n	1bb20 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   1bb5a:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bb5c:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   1bb60:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bb62:	d118      	bne.n	1bb96 <k_delayed_work_submit_to_queue+0xba>
   1bb64:	4811      	ldr	r0, [pc, #68]	; (1bbac <k_delayed_work_submit_to_queue+0xd0>)
   1bb66:	f7ff ff51 	bl	1ba0c <z_spin_unlock_valid>
   1bb6a:	b940      	cbnz	r0, 1bb7e <k_delayed_work_submit_to_queue+0xa2>
   1bb6c:	4910      	ldr	r1, [pc, #64]	; (1bbb0 <k_delayed_work_submit_to_queue+0xd4>)
   1bb6e:	4811      	ldr	r0, [pc, #68]	; (1bbb4 <k_delayed_work_submit_to_queue+0xd8>)
   1bb70:	22a7      	movs	r2, #167	; 0xa7
   1bb72:	f000 ff11 	bl	1c998 <printk>
   1bb76:	21a7      	movs	r1, #167	; 0xa7
   1bb78:	480d      	ldr	r0, [pc, #52]	; (1bbb0 <k_delayed_work_submit_to_queue+0xd4>)
   1bb7a:	f001 f9b3 	bl	1cee4 <assert_post_action>
   1bb7e:	f389 8811 	msr	BASEPRI, r9
   1bb82:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1bb86:	4629      	mov	r1, r5
   1bb88:	4630      	mov	r0, r6
   1bb8a:	f005 fc8c 	bl	214a6 <k_work_submit_to_queue>
		return 0;
   1bb8e:	2400      	movs	r4, #0
}
   1bb90:	4620      	mov	r0, r4
   1bb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1bb96:	4642      	mov	r2, r8
   1bb98:	463b      	mov	r3, r7
   1bb9a:	4907      	ldr	r1, [pc, #28]	; (1bbb8 <k_delayed_work_submit_to_queue+0xdc>)
   1bb9c:	f105 0010 	add.w	r0, r5, #16
   1bba0:	f000 f8ba 	bl	1bd18 <z_add_timeout>
   1bba4:	e7c5      	b.n	1bb32 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   1bba6:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1bbaa:	e7c2      	b.n	1bb32 <k_delayed_work_submit_to_queue+0x56>
   1bbac:	2000a004 	.word	0x2000a004
   1bbb0:	00022e10 	.word	0x00022e10
   1bbb4:	00022dd6 	.word	0x00022dd6
   1bbb8:	000214cf 	.word	0x000214cf

0001bbbc <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1bbbc:	b538      	push	{r3, r4, r5, lr}
   1bbbe:	4604      	mov	r4, r0
	__asm__ volatile(
   1bbc0:	f04f 0320 	mov.w	r3, #32
   1bbc4:	f3ef 8511 	mrs	r5, BASEPRI
   1bbc8:	f383 8811 	msr	BASEPRI, r3
   1bbcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bbd0:	4815      	ldr	r0, [pc, #84]	; (1bc28 <k_delayed_work_cancel+0x6c>)
   1bbd2:	f7ff ff0d 	bl	1b9f0 <z_spin_lock_valid>
   1bbd6:	b940      	cbnz	r0, 1bbea <k_delayed_work_cancel+0x2e>
   1bbd8:	4914      	ldr	r1, [pc, #80]	; (1bc2c <k_delayed_work_cancel+0x70>)
   1bbda:	4815      	ldr	r0, [pc, #84]	; (1bc30 <k_delayed_work_cancel+0x74>)
   1bbdc:	227c      	movs	r2, #124	; 0x7c
   1bbde:	f000 fedb 	bl	1c998 <printk>
   1bbe2:	217c      	movs	r1, #124	; 0x7c
   1bbe4:	4811      	ldr	r0, [pc, #68]	; (1bc2c <k_delayed_work_cancel+0x70>)
   1bbe6:	f001 f97d 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bbea:	480f      	ldr	r0, [pc, #60]	; (1bc28 <k_delayed_work_cancel+0x6c>)
   1bbec:	f7ff ff1c 	bl	1ba28 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1bbf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bbf2:	b1b3      	cbz	r3, 1bc22 <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   1bbf4:	4620      	mov	r0, r4
   1bbf6:	f005 fc6f 	bl	214d8 <work_cancel>
   1bbfa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bbfc:	480a      	ldr	r0, [pc, #40]	; (1bc28 <k_delayed_work_cancel+0x6c>)
   1bbfe:	f7ff ff05 	bl	1ba0c <z_spin_unlock_valid>
   1bc02:	b940      	cbnz	r0, 1bc16 <k_delayed_work_cancel+0x5a>
   1bc04:	4909      	ldr	r1, [pc, #36]	; (1bc2c <k_delayed_work_cancel+0x70>)
   1bc06:	480a      	ldr	r0, [pc, #40]	; (1bc30 <k_delayed_work_cancel+0x74>)
   1bc08:	22a7      	movs	r2, #167	; 0xa7
   1bc0a:	f000 fec5 	bl	1c998 <printk>
   1bc0e:	21a7      	movs	r1, #167	; 0xa7
   1bc10:	4806      	ldr	r0, [pc, #24]	; (1bc2c <k_delayed_work_cancel+0x70>)
   1bc12:	f001 f967 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1bc16:	f385 8811 	msr	BASEPRI, r5
   1bc1a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1bc1e:	4620      	mov	r0, r4
   1bc20:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bc22:	f06f 0415 	mvn.w	r4, #21
   1bc26:	e7e9      	b.n	1bbfc <k_delayed_work_cancel+0x40>
   1bc28:	2000a004 	.word	0x2000a004
   1bc2c:	00022e10 	.word	0x00022e10
   1bc30:	00022dd6 	.word	0x00022dd6

0001bc34 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1bc34:	4a02      	ldr	r2, [pc, #8]	; (1bc40 <boot_banner+0xc>)
   1bc36:	4903      	ldr	r1, [pc, #12]	; (1bc44 <boot_banner+0x10>)
   1bc38:	4803      	ldr	r0, [pc, #12]	; (1bc48 <boot_banner+0x14>)
   1bc3a:	f000 bead 	b.w	1c998 <printk>
   1bc3e:	bf00      	nop
   1bc40:	00026267 	.word	0x00026267
   1bc44:	0002642e 	.word	0x0002642e
   1bc48:	0002643b 	.word	0x0002643b

0001bc4c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bc4c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bc4e:	4806      	ldr	r0, [pc, #24]	; (1bc68 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bc50:	4a06      	ldr	r2, [pc, #24]	; (1bc6c <z_data_copy+0x20>)
   1bc52:	4907      	ldr	r1, [pc, #28]	; (1bc70 <z_data_copy+0x24>)
   1bc54:	1a12      	subs	r2, r2, r0
   1bc56:	f002 fb57 	bl	1e308 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bc5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bc5e:	4a05      	ldr	r2, [pc, #20]	; (1bc74 <z_data_copy+0x28>)
   1bc60:	4905      	ldr	r1, [pc, #20]	; (1bc78 <z_data_copy+0x2c>)
   1bc62:	4806      	ldr	r0, [pc, #24]	; (1bc7c <z_data_copy+0x30>)
   1bc64:	f002 bb50 	b.w	1e308 <memcpy>
   1bc68:	20008000 	.word	0x20008000
   1bc6c:	200086c8 	.word	0x200086c8
   1bc70:	000264d0 	.word	0x000264d0
   1bc74:	00000000 	.word	0x00000000
   1bc78:	000264d0 	.word	0x000264d0
   1bc7c:	20008000 	.word	0x20008000

0001bc80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1bc80:	4b03      	ldr	r3, [pc, #12]	; (1bc90 <elapsed+0x10>)
   1bc82:	681b      	ldr	r3, [r3, #0]
   1bc84:	b90b      	cbnz	r3, 1bc8a <elapsed+0xa>
   1bc86:	f7f0 bd79 	b.w	c77c <z_clock_elapsed>
}
   1bc8a:	2000      	movs	r0, #0
   1bc8c:	4770      	bx	lr
   1bc8e:	bf00      	nop
   1bc90:	2000a008 	.word	0x2000a008

0001bc94 <next_timeout>:
	return list->head == list;
   1bc94:	4b11      	ldr	r3, [pc, #68]	; (1bcdc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1bc96:	b510      	push	{r4, lr}
   1bc98:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc9a:	429c      	cmp	r4, r3
   1bc9c:	bf08      	it	eq
   1bc9e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1bca0:	f7ff ffee 	bl	1bc80 <elapsed>
   1bca4:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1bca6:	b16c      	cbz	r4, 1bcc4 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bca8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1bcac:	1ac0      	subs	r0, r0, r3
   1bcae:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bcb2:	2801      	cmp	r0, #1
   1bcb4:	f173 0200 	sbcs.w	r2, r3, #0
   1bcb8:	db0d      	blt.n	1bcd6 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bcba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1bcbe:	f173 0300 	sbcs.w	r3, r3, #0
   1bcc2:	db01      	blt.n	1bcc8 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1bcc4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bcc8:	4b05      	ldr	r3, [pc, #20]	; (1bce0 <next_timeout+0x4c>)
   1bcca:	695b      	ldr	r3, [r3, #20]
   1bccc:	b113      	cbz	r3, 1bcd4 <next_timeout+0x40>
   1bcce:	4298      	cmp	r0, r3
   1bcd0:	bfa8      	it	ge
   1bcd2:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bcd4:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bcd6:	2000      	movs	r0, #0
   1bcd8:	e7f6      	b.n	1bcc8 <next_timeout+0x34>
   1bcda:	bf00      	nop
   1bcdc:	20008418 	.word	0x20008418
   1bce0:	20009fbc 	.word	0x20009fbc

0001bce4 <remove_timeout>:
{
   1bce4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1bce6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bce8:	b168      	cbz	r0, 1bd06 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1bcea:	4a0a      	ldr	r2, [pc, #40]	; (1bd14 <remove_timeout+0x30>)
   1bcec:	6852      	ldr	r2, [r2, #4]
   1bcee:	4290      	cmp	r0, r2
   1bcf0:	d009      	beq.n	1bd06 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bcf2:	b143      	cbz	r3, 1bd06 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bcf4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bcf8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bcfc:	1912      	adds	r2, r2, r4
   1bcfe:	eb41 0105 	adc.w	r1, r1, r5
   1bd02:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1bd06:	6842      	ldr	r2, [r0, #4]
   1bd08:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bd0a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bd0c:	2300      	movs	r3, #0
	node->prev = NULL;
   1bd0e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bd12:	bd30      	pop	{r4, r5, pc}
   1bd14:	20008418 	.word	0x20008418

0001bd18 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd18:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bd1c:	bf08      	it	eq
   1bd1e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bd22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bd26:	4604      	mov	r4, r0
   1bd28:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd2a:	f000 808c 	beq.w	1be46 <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bd2e:	f06f 0601 	mvn.w	r6, #1
   1bd32:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1bd36:	1c55      	adds	r5, r2, #1
   1bd38:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bd3c:	1b73      	subs	r3, r6, r5
   1bd3e:	eb69 0307 	sbc.w	r3, r9, r7
   1bd42:	2b00      	cmp	r3, #0
   1bd44:	db0d      	blt.n	1bd62 <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1bd46:	f7ff ff9b 	bl	1bc80 <elapsed>
   1bd4a:	4b44      	ldr	r3, [pc, #272]	; (1be5c <z_add_timeout+0x144>)
   1bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bd50:	1ab6      	subs	r6, r6, r2
   1bd52:	eb69 0303 	sbc.w	r3, r9, r3
   1bd56:	1b75      	subs	r5, r6, r5
   1bd58:	eb63 0707 	sbc.w	r7, r3, r7
   1bd5c:	1a2d      	subs	r5, r5, r0
   1bd5e:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1bd62:	6823      	ldr	r3, [r4, #0]
   1bd64:	b143      	cbz	r3, 1bd78 <z_add_timeout+0x60>
   1bd66:	493e      	ldr	r1, [pc, #248]	; (1be60 <z_add_timeout+0x148>)
   1bd68:	483e      	ldr	r0, [pc, #248]	; (1be64 <z_add_timeout+0x14c>)
   1bd6a:	2268      	movs	r2, #104	; 0x68
   1bd6c:	f000 fe14 	bl	1c998 <printk>
   1bd70:	2168      	movs	r1, #104	; 0x68
   1bd72:	483b      	ldr	r0, [pc, #236]	; (1be60 <z_add_timeout+0x148>)
   1bd74:	f001 f8b6 	bl	1cee4 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   1bd78:	2d01      	cmp	r5, #1
   1bd7a:	f177 0300 	sbcs.w	r3, r7, #0
   1bd7e:	bfbc      	itt	lt
   1bd80:	2501      	movlt	r5, #1
   1bd82:	2700      	movlt	r7, #0
	to->fn = fn;
   1bd84:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   1bd88:	f04f 0320 	mov.w	r3, #32
   1bd8c:	f3ef 8611 	mrs	r6, BASEPRI
   1bd90:	f383 8811 	msr	BASEPRI, r3
   1bd94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd98:	4833      	ldr	r0, [pc, #204]	; (1be68 <z_add_timeout+0x150>)
   1bd9a:	f7ff fe29 	bl	1b9f0 <z_spin_lock_valid>
   1bd9e:	b940      	cbnz	r0, 1bdb2 <z_add_timeout+0x9a>
   1bda0:	4932      	ldr	r1, [pc, #200]	; (1be6c <z_add_timeout+0x154>)
   1bda2:	4830      	ldr	r0, [pc, #192]	; (1be64 <z_add_timeout+0x14c>)
   1bda4:	227c      	movs	r2, #124	; 0x7c
   1bda6:	f000 fdf7 	bl	1c998 <printk>
   1bdaa:	217c      	movs	r1, #124	; 0x7c
   1bdac:	482f      	ldr	r0, [pc, #188]	; (1be6c <z_add_timeout+0x154>)
   1bdae:	f001 f899 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bdb2:	482d      	ldr	r0, [pc, #180]	; (1be68 <z_add_timeout+0x150>)
   1bdb4:	f7ff fe38 	bl	1ba28 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bdb8:	f7ff ff62 	bl	1bc80 <elapsed>
	return list->head == list;
   1bdbc:	4a2c      	ldr	r2, [pc, #176]	; (1be70 <z_add_timeout+0x158>)
   1bdbe:	1945      	adds	r5, r0, r5
   1bdc0:	6813      	ldr	r3, [r2, #0]
   1bdc2:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bdc6:	4293      	cmp	r3, r2
   1bdc8:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1bdcc:	d002      	beq.n	1bdd4 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   1bdce:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bdd2:	b933      	cbnz	r3, 1bde2 <z_add_timeout+0xca>
	node->prev = list->tail;
   1bdd4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1bdd6:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   1bdd8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bdda:	6853      	ldr	r3, [r2, #4]
   1bddc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bdde:	6054      	str	r4, [r2, #4]
}
   1bde0:	e011      	b.n	1be06 <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   1bde2:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   1bde6:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1bdea:	4281      	cmp	r1, r0
   1bdec:	eb75 0e07 	sbcs.w	lr, r5, r7
   1bdf0:	da2b      	bge.n	1be4a <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   1bdf2:	1a41      	subs	r1, r0, r1
   1bdf4:	eb67 0505 	sbc.w	r5, r7, r5
   1bdf8:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   1bdfc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1bdfe:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1be02:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1be04:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1be06:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be08:	4293      	cmp	r3, r2
   1be0a:	d00b      	beq.n	1be24 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1be0c:	429c      	cmp	r4, r3
   1be0e:	d109      	bne.n	1be24 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1be10:	f7ff ff40 	bl	1bc94 <next_timeout>

			if (next_time == 0 ||
   1be14:	b118      	cbz	r0, 1be1e <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   1be16:	4b17      	ldr	r3, [pc, #92]	; (1be74 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   1be18:	695b      	ldr	r3, [r3, #20]
   1be1a:	4283      	cmp	r3, r0
   1be1c:	d002      	beq.n	1be24 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   1be1e:	2100      	movs	r1, #0
   1be20:	f7f0 fc7a 	bl	c718 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be24:	4810      	ldr	r0, [pc, #64]	; (1be68 <z_add_timeout+0x150>)
   1be26:	f7ff fdf1 	bl	1ba0c <z_spin_unlock_valid>
   1be2a:	b940      	cbnz	r0, 1be3e <z_add_timeout+0x126>
   1be2c:	490f      	ldr	r1, [pc, #60]	; (1be6c <z_add_timeout+0x154>)
   1be2e:	480d      	ldr	r0, [pc, #52]	; (1be64 <z_add_timeout+0x14c>)
   1be30:	22a7      	movs	r2, #167	; 0xa7
   1be32:	f000 fdb1 	bl	1c998 <printk>
   1be36:	21a7      	movs	r1, #167	; 0xa7
   1be38:	480c      	ldr	r0, [pc, #48]	; (1be6c <z_add_timeout+0x154>)
   1be3a:	f001 f853 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1be3e:	f386 8811 	msr	BASEPRI, r6
   1be42:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   1be4a:	1a09      	subs	r1, r1, r0
   1be4c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1be50:	4563      	cmp	r3, ip
   1be52:	e9c4 1504 	strd	r1, r5, [r4, #16]
   1be56:	d0bd      	beq.n	1bdd4 <z_add_timeout+0xbc>
   1be58:	681b      	ldr	r3, [r3, #0]
   1be5a:	e7ba      	b.n	1bdd2 <z_add_timeout+0xba>
   1be5c:	200096e0 	.word	0x200096e0
   1be60:	00026462 	.word	0x00026462
   1be64:	00022dd6 	.word	0x00022dd6
   1be68:	2000a00c 	.word	0x2000a00c
   1be6c:	00022e10 	.word	0x00022e10
   1be70:	20008418 	.word	0x20008418
   1be74:	20009fbc 	.word	0x20009fbc

0001be78 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1be78:	b538      	push	{r3, r4, r5, lr}
   1be7a:	4604      	mov	r4, r0
	__asm__ volatile(
   1be7c:	f04f 0320 	mov.w	r3, #32
   1be80:	f3ef 8511 	mrs	r5, BASEPRI
   1be84:	f383 8811 	msr	BASEPRI, r3
   1be88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be8c:	4815      	ldr	r0, [pc, #84]	; (1bee4 <z_abort_timeout+0x6c>)
   1be8e:	f7ff fdaf 	bl	1b9f0 <z_spin_lock_valid>
   1be92:	b940      	cbnz	r0, 1bea6 <z_abort_timeout+0x2e>
   1be94:	4914      	ldr	r1, [pc, #80]	; (1bee8 <z_abort_timeout+0x70>)
   1be96:	4815      	ldr	r0, [pc, #84]	; (1beec <z_abort_timeout+0x74>)
   1be98:	227c      	movs	r2, #124	; 0x7c
   1be9a:	f000 fd7d 	bl	1c998 <printk>
   1be9e:	217c      	movs	r1, #124	; 0x7c
   1bea0:	4811      	ldr	r0, [pc, #68]	; (1bee8 <z_abort_timeout+0x70>)
   1bea2:	f001 f81f 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bea6:	480f      	ldr	r0, [pc, #60]	; (1bee4 <z_abort_timeout+0x6c>)
   1bea8:	f7ff fdbe 	bl	1ba28 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1beac:	6823      	ldr	r3, [r4, #0]
   1beae:	b1b3      	cbz	r3, 1bede <z_abort_timeout+0x66>
			remove_timeout(to);
   1beb0:	4620      	mov	r0, r4
   1beb2:	f7ff ff17 	bl	1bce4 <remove_timeout>
			ret = 0;
   1beb6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1beb8:	480a      	ldr	r0, [pc, #40]	; (1bee4 <z_abort_timeout+0x6c>)
   1beba:	f7ff fda7 	bl	1ba0c <z_spin_unlock_valid>
   1bebe:	b940      	cbnz	r0, 1bed2 <z_abort_timeout+0x5a>
   1bec0:	4909      	ldr	r1, [pc, #36]	; (1bee8 <z_abort_timeout+0x70>)
   1bec2:	480a      	ldr	r0, [pc, #40]	; (1beec <z_abort_timeout+0x74>)
   1bec4:	22a7      	movs	r2, #167	; 0xa7
   1bec6:	f000 fd67 	bl	1c998 <printk>
   1beca:	21a7      	movs	r1, #167	; 0xa7
   1becc:	4806      	ldr	r0, [pc, #24]	; (1bee8 <z_abort_timeout+0x70>)
   1bece:	f001 f809 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1bed2:	f385 8811 	msr	BASEPRI, r5
   1bed6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1beda:	4620      	mov	r0, r4
   1bedc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bede:	f06f 0415 	mvn.w	r4, #21
   1bee2:	e7e9      	b.n	1beb8 <z_abort_timeout+0x40>
   1bee4:	2000a00c 	.word	0x2000a00c
   1bee8:	00022e10 	.word	0x00022e10
   1beec:	00022dd6 	.word	0x00022dd6

0001bef0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1bef0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bef2:	f04f 0320 	mov.w	r3, #32
   1bef6:	f3ef 8511 	mrs	r5, BASEPRI
   1befa:	f383 8811 	msr	BASEPRI, r3
   1befe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf02:	4813      	ldr	r0, [pc, #76]	; (1bf50 <z_get_next_timeout_expiry+0x60>)
   1bf04:	f7ff fd74 	bl	1b9f0 <z_spin_lock_valid>
   1bf08:	b940      	cbnz	r0, 1bf1c <z_get_next_timeout_expiry+0x2c>
   1bf0a:	4912      	ldr	r1, [pc, #72]	; (1bf54 <z_get_next_timeout_expiry+0x64>)
   1bf0c:	4812      	ldr	r0, [pc, #72]	; (1bf58 <z_get_next_timeout_expiry+0x68>)
   1bf0e:	227c      	movs	r2, #124	; 0x7c
   1bf10:	f000 fd42 	bl	1c998 <printk>
   1bf14:	217c      	movs	r1, #124	; 0x7c
   1bf16:	480f      	ldr	r0, [pc, #60]	; (1bf54 <z_get_next_timeout_expiry+0x64>)
   1bf18:	f000 ffe4 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bf1c:	480c      	ldr	r0, [pc, #48]	; (1bf50 <z_get_next_timeout_expiry+0x60>)
   1bf1e:	f7ff fd83 	bl	1ba28 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1bf22:	f7ff feb7 	bl	1bc94 <next_timeout>
   1bf26:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf28:	4809      	ldr	r0, [pc, #36]	; (1bf50 <z_get_next_timeout_expiry+0x60>)
   1bf2a:	f7ff fd6f 	bl	1ba0c <z_spin_unlock_valid>
   1bf2e:	b940      	cbnz	r0, 1bf42 <z_get_next_timeout_expiry+0x52>
   1bf30:	4908      	ldr	r1, [pc, #32]	; (1bf54 <z_get_next_timeout_expiry+0x64>)
   1bf32:	4809      	ldr	r0, [pc, #36]	; (1bf58 <z_get_next_timeout_expiry+0x68>)
   1bf34:	22a7      	movs	r2, #167	; 0xa7
   1bf36:	f000 fd2f 	bl	1c998 <printk>
   1bf3a:	21a7      	movs	r1, #167	; 0xa7
   1bf3c:	4805      	ldr	r0, [pc, #20]	; (1bf54 <z_get_next_timeout_expiry+0x64>)
   1bf3e:	f000 ffd1 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1bf42:	f385 8811 	msr	BASEPRI, r5
   1bf46:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1bf4a:	4620      	mov	r0, r4
   1bf4c:	bd38      	pop	{r3, r4, r5, pc}
   1bf4e:	bf00      	nop
   1bf50:	2000a00c 	.word	0x2000a00c
   1bf54:	00022e10 	.word	0x00022e10
   1bf58:	00022dd6 	.word	0x00022dd6

0001bf5c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1bf5c:	b570      	push	{r4, r5, r6, lr}
   1bf5e:	4604      	mov	r4, r0
   1bf60:	460d      	mov	r5, r1
	__asm__ volatile(
   1bf62:	f04f 0320 	mov.w	r3, #32
   1bf66:	f3ef 8611 	mrs	r6, BASEPRI
   1bf6a:	f383 8811 	msr	BASEPRI, r3
   1bf6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf72:	4816      	ldr	r0, [pc, #88]	; (1bfcc <z_set_timeout_expiry+0x70>)
   1bf74:	f7ff fd3c 	bl	1b9f0 <z_spin_lock_valid>
   1bf78:	b940      	cbnz	r0, 1bf8c <z_set_timeout_expiry+0x30>
   1bf7a:	4915      	ldr	r1, [pc, #84]	; (1bfd0 <z_set_timeout_expiry+0x74>)
   1bf7c:	4815      	ldr	r0, [pc, #84]	; (1bfd4 <z_set_timeout_expiry+0x78>)
   1bf7e:	227c      	movs	r2, #124	; 0x7c
   1bf80:	f000 fd0a 	bl	1c998 <printk>
   1bf84:	217c      	movs	r1, #124	; 0x7c
   1bf86:	4812      	ldr	r0, [pc, #72]	; (1bfd0 <z_set_timeout_expiry+0x74>)
   1bf88:	f000 ffac 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bf8c:	480f      	ldr	r0, [pc, #60]	; (1bfcc <z_set_timeout_expiry+0x70>)
   1bf8e:	f7ff fd4b 	bl	1ba28 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1bf92:	f7ff fe7f 	bl	1bc94 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1bf96:	2801      	cmp	r0, #1
   1bf98:	dd05      	ble.n	1bfa6 <z_set_timeout_expiry+0x4a>
   1bf9a:	42a0      	cmp	r0, r4
   1bf9c:	dd03      	ble.n	1bfa6 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   1bf9e:	4629      	mov	r1, r5
   1bfa0:	4620      	mov	r0, r4
   1bfa2:	f7f0 fbb9 	bl	c718 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bfa6:	4809      	ldr	r0, [pc, #36]	; (1bfcc <z_set_timeout_expiry+0x70>)
   1bfa8:	f7ff fd30 	bl	1ba0c <z_spin_unlock_valid>
   1bfac:	b940      	cbnz	r0, 1bfc0 <z_set_timeout_expiry+0x64>
   1bfae:	4908      	ldr	r1, [pc, #32]	; (1bfd0 <z_set_timeout_expiry+0x74>)
   1bfb0:	4808      	ldr	r0, [pc, #32]	; (1bfd4 <z_set_timeout_expiry+0x78>)
   1bfb2:	22a7      	movs	r2, #167	; 0xa7
   1bfb4:	f000 fcf0 	bl	1c998 <printk>
   1bfb8:	21a7      	movs	r1, #167	; 0xa7
   1bfba:	4805      	ldr	r0, [pc, #20]	; (1bfd0 <z_set_timeout_expiry+0x74>)
   1bfbc:	f000 ff92 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1bfc0:	f386 8811 	msr	BASEPRI, r6
   1bfc4:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bfc8:	bd70      	pop	{r4, r5, r6, pc}
   1bfca:	bf00      	nop
   1bfcc:	2000a00c 	.word	0x2000a00c
   1bfd0:	00022e10 	.word	0x00022e10
   1bfd4:	00022dd6 	.word	0x00022dd6

0001bfd8 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   1bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bfdc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bfde:	f7fe fe61 	bl	1aca4 <z_time_slice>
	__asm__ volatile(
   1bfe2:	f04f 0320 	mov.w	r3, #32
   1bfe6:	f3ef 8511 	mrs	r5, BASEPRI
   1bfea:	f383 8811 	msr	BASEPRI, r3
   1bfee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bff2:	4842      	ldr	r0, [pc, #264]	; (1c0fc <z_clock_announce+0x124>)
   1bff4:	f7ff fcfc 	bl	1b9f0 <z_spin_lock_valid>
   1bff8:	b940      	cbnz	r0, 1c00c <z_clock_announce+0x34>
   1bffa:	4941      	ldr	r1, [pc, #260]	; (1c100 <z_clock_announce+0x128>)
   1bffc:	4841      	ldr	r0, [pc, #260]	; (1c104 <z_clock_announce+0x12c>)
   1bffe:	227c      	movs	r2, #124	; 0x7c
   1c000:	f000 fcca 	bl	1c998 <printk>
   1c004:	217c      	movs	r1, #124	; 0x7c
   1c006:	483e      	ldr	r0, [pc, #248]	; (1c100 <z_clock_announce+0x128>)
   1c008:	f000 ff6c 	bl	1cee4 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c00c:	4f3e      	ldr	r7, [pc, #248]	; (1c108 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1c00e:	483b      	ldr	r0, [pc, #236]	; (1c0fc <z_clock_announce+0x124>)
	return list->head == list;
   1c010:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1c10c <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1c014:	4e3e      	ldr	r6, [pc, #248]	; (1c110 <z_clock_announce+0x138>)
   1c016:	f7ff fd07 	bl	1ba28 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1c01a:	603c      	str	r4, [r7, #0]
   1c01c:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c020:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c022:	4544      	cmp	r4, r8
   1c024:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   1c028:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1c02c:	d00b      	beq.n	1c046 <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c02e:	b154      	cbz	r4, 1c046 <z_clock_announce+0x6e>
   1c030:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1c034:	429a      	cmp	r2, r3
   1c036:	eb70 090c 	sbcs.w	r9, r0, ip
   1c03a:	da23      	bge.n	1c084 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c03c:	1a9b      	subs	r3, r3, r2
   1c03e:	eb6c 0c00 	sbc.w	ip, ip, r0
   1c042:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1c046:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c048:	1852      	adds	r2, r2, r1
   1c04a:	eb4e 0000 	adc.w	r0, lr, r0
   1c04e:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1c052:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c054:	f7ff fe1e 	bl	1bc94 <next_timeout>
   1c058:	4621      	mov	r1, r4
   1c05a:	f7f0 fb5d 	bl	c718 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c05e:	4827      	ldr	r0, [pc, #156]	; (1c0fc <z_clock_announce+0x124>)
   1c060:	f7ff fcd4 	bl	1ba0c <z_spin_unlock_valid>
   1c064:	b940      	cbnz	r0, 1c078 <z_clock_announce+0xa0>
   1c066:	4926      	ldr	r1, [pc, #152]	; (1c100 <z_clock_announce+0x128>)
   1c068:	4826      	ldr	r0, [pc, #152]	; (1c104 <z_clock_announce+0x12c>)
   1c06a:	22a7      	movs	r2, #167	; 0xa7
   1c06c:	f000 fc94 	bl	1c998 <printk>
   1c070:	21a7      	movs	r1, #167	; 0xa7
   1c072:	4823      	ldr	r0, [pc, #140]	; (1c100 <z_clock_announce+0x128>)
   1c074:	f000 ff36 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1c078:	f385 8811 	msr	BASEPRI, r5
   1c07c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1c084:	1859      	adds	r1, r3, r1
   1c086:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   1c08a:	1ad3      	subs	r3, r2, r3
   1c08c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   1c08e:	2200      	movs	r2, #0
   1c090:	2300      	movs	r3, #0
		curr_tick += dt;
   1c092:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1c096:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1c09a:	4620      	mov	r0, r4
   1c09c:	f7ff fe22 	bl	1bce4 <remove_timeout>
   1c0a0:	4816      	ldr	r0, [pc, #88]	; (1c0fc <z_clock_announce+0x124>)
   1c0a2:	f7ff fcb3 	bl	1ba0c <z_spin_unlock_valid>
   1c0a6:	b940      	cbnz	r0, 1c0ba <z_clock_announce+0xe2>
   1c0a8:	4915      	ldr	r1, [pc, #84]	; (1c100 <z_clock_announce+0x128>)
   1c0aa:	4816      	ldr	r0, [pc, #88]	; (1c104 <z_clock_announce+0x12c>)
   1c0ac:	22a7      	movs	r2, #167	; 0xa7
   1c0ae:	f000 fc73 	bl	1c998 <printk>
   1c0b2:	21a7      	movs	r1, #167	; 0xa7
   1c0b4:	4812      	ldr	r0, [pc, #72]	; (1c100 <z_clock_announce+0x128>)
   1c0b6:	f000 ff15 	bl	1cee4 <assert_post_action>
   1c0ba:	f385 8811 	msr	BASEPRI, r5
   1c0be:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c0c2:	4620      	mov	r0, r4
   1c0c4:	68a3      	ldr	r3, [r4, #8]
   1c0c6:	4798      	blx	r3
	__asm__ volatile(
   1c0c8:	f04f 0320 	mov.w	r3, #32
   1c0cc:	f3ef 8511 	mrs	r5, BASEPRI
   1c0d0:	f383 8811 	msr	BASEPRI, r3
   1c0d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c0d8:	4808      	ldr	r0, [pc, #32]	; (1c0fc <z_clock_announce+0x124>)
   1c0da:	f7ff fc89 	bl	1b9f0 <z_spin_lock_valid>
   1c0de:	b940      	cbnz	r0, 1c0f2 <z_clock_announce+0x11a>
   1c0e0:	4907      	ldr	r1, [pc, #28]	; (1c100 <z_clock_announce+0x128>)
   1c0e2:	4808      	ldr	r0, [pc, #32]	; (1c104 <z_clock_announce+0x12c>)
   1c0e4:	227c      	movs	r2, #124	; 0x7c
   1c0e6:	f000 fc57 	bl	1c998 <printk>
   1c0ea:	217c      	movs	r1, #124	; 0x7c
   1c0ec:	4804      	ldr	r0, [pc, #16]	; (1c100 <z_clock_announce+0x128>)
   1c0ee:	f000 fef9 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c0f2:	4802      	ldr	r0, [pc, #8]	; (1c0fc <z_clock_announce+0x124>)
   1c0f4:	f7ff fc98 	bl	1ba28 <z_spin_lock_set_owner>
	return k;
   1c0f8:	e790      	b.n	1c01c <z_clock_announce+0x44>
   1c0fa:	bf00      	nop
   1c0fc:	2000a00c 	.word	0x2000a00c
   1c100:	00022e10 	.word	0x00022e10
   1c104:	00022dd6 	.word	0x00022dd6
   1c108:	2000a008 	.word	0x2000a008
   1c10c:	20008418 	.word	0x20008418
   1c110:	200096e0 	.word	0x200096e0

0001c114 <z_tick_get>:

int64_t z_tick_get(void)
{
   1c114:	b570      	push	{r4, r5, r6, lr}
   1c116:	f04f 0320 	mov.w	r3, #32
   1c11a:	f3ef 8611 	mrs	r6, BASEPRI
   1c11e:	f383 8811 	msr	BASEPRI, r3
   1c122:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c126:	4816      	ldr	r0, [pc, #88]	; (1c180 <z_tick_get+0x6c>)
   1c128:	f7ff fc62 	bl	1b9f0 <z_spin_lock_valid>
   1c12c:	b940      	cbnz	r0, 1c140 <z_tick_get+0x2c>
   1c12e:	4915      	ldr	r1, [pc, #84]	; (1c184 <z_tick_get+0x70>)
   1c130:	4815      	ldr	r0, [pc, #84]	; (1c188 <z_tick_get+0x74>)
   1c132:	227c      	movs	r2, #124	; 0x7c
   1c134:	f000 fc30 	bl	1c998 <printk>
   1c138:	217c      	movs	r1, #124	; 0x7c
   1c13a:	4812      	ldr	r0, [pc, #72]	; (1c184 <z_tick_get+0x70>)
   1c13c:	f000 fed2 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c140:	480f      	ldr	r0, [pc, #60]	; (1c180 <z_tick_get+0x6c>)
   1c142:	f7ff fc71 	bl	1ba28 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c146:	f7f0 fb19 	bl	c77c <z_clock_elapsed>
   1c14a:	4b10      	ldr	r3, [pc, #64]	; (1c18c <z_tick_get+0x78>)
   1c14c:	e9d3 4500 	ldrd	r4, r5, [r3]
   1c150:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c152:	480b      	ldr	r0, [pc, #44]	; (1c180 <z_tick_get+0x6c>)
   1c154:	f145 0500 	adc.w	r5, r5, #0
   1c158:	f7ff fc58 	bl	1ba0c <z_spin_unlock_valid>
   1c15c:	b940      	cbnz	r0, 1c170 <z_tick_get+0x5c>
   1c15e:	4909      	ldr	r1, [pc, #36]	; (1c184 <z_tick_get+0x70>)
   1c160:	4809      	ldr	r0, [pc, #36]	; (1c188 <z_tick_get+0x74>)
   1c162:	22a7      	movs	r2, #167	; 0xa7
   1c164:	f000 fc18 	bl	1c998 <printk>
   1c168:	21a7      	movs	r1, #167	; 0xa7
   1c16a:	4806      	ldr	r0, [pc, #24]	; (1c184 <z_tick_get+0x70>)
   1c16c:	f000 feba 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1c170:	f386 8811 	msr	BASEPRI, r6
   1c174:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c178:	4620      	mov	r0, r4
   1c17a:	4629      	mov	r1, r5
   1c17c:	bd70      	pop	{r4, r5, r6, pc}
   1c17e:	bf00      	nop
   1c180:	2000a00c 	.word	0x2000a00c
   1c184:	00022e10 	.word	0x00022e10
   1c188:	00022dd6 	.word	0x00022dd6
   1c18c:	200096e0 	.word	0x200096e0

0001c190 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1c190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1c194:	6884      	ldr	r4, [r0, #8]
{
   1c196:	4605      	mov	r5, r0
   1c198:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1c19a:	b1b4      	cbz	r4, 1c1ca <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1c19c:	7863      	ldrb	r3, [r4, #1]
   1c19e:	2b01      	cmp	r3, #1
   1c1a0:	d145      	bne.n	1c22e <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1c1a2:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1c1a6:	d10a      	bne.n	1c1be <signal_poll_event+0x2e>
   1c1a8:	22e3      	movs	r2, #227	; 0xe3
   1c1aa:	492d      	ldr	r1, [pc, #180]	; (1c260 <signal_poll_event+0xd0>)
   1c1ac:	482d      	ldr	r0, [pc, #180]	; (1c264 <signal_poll_event+0xd4>)
   1c1ae:	f000 fbf3 	bl	1c998 <printk>
   1c1b2:	21e3      	movs	r1, #227	; 0xe3
   1c1b4:	482a      	ldr	r0, [pc, #168]	; (1c260 <signal_poll_event+0xd0>)
   1c1b6:	f000 fe95 	bl	1cee4 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1c1ba:	7b7b      	ldrb	r3, [r7, #13]
   1c1bc:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1c1be:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1c1c2:	f013 0302 	ands.w	r3, r3, #2
   1c1c6:	d10a      	bne.n	1c1de <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1c1c8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1c1ca:	2000      	movs	r0, #0
	event->state |= state;
   1c1cc:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1c1ce:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1c1d0:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1c1d4:	430e      	orrs	r6, r1
   1c1d6:	f366 3310 	bfi	r3, r6, #12, #5
   1c1da:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1c1dc:	e00b      	b.n	1c1f6 <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1c1de:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c1e6:	bf08      	it	eq
   1c1e8:	f112 0f02 	cmneq.w	r2, #2
   1c1ec:	d105      	bne.n	1c1fa <signal_poll_event+0x6a>
		poller->is_polling = false;
   1c1ee:	2300      	movs	r3, #0
		return -EAGAIN;
   1c1f0:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1c1f4:	7023      	strb	r3, [r4, #0]
}
   1c1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1c1fa:	4638      	mov	r0, r7
   1c1fc:	f7fe fb30 	bl	1a860 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c200:	2e08      	cmp	r6, #8
   1c202:	bf0c      	ite	eq
   1c204:	f06f 0303 	mvneq.w	r3, #3
   1c208:	2300      	movne	r3, #0
   1c20a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c20c:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1c210:	06db      	lsls	r3, r3, #27
   1c212:	d104      	bne.n	1c21e <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1c214:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1c218:	f1b8 0f00 	cmp.w	r8, #0
   1c21c:	d001      	beq.n	1c222 <signal_poll_event+0x92>
		poller->is_polling = false;
   1c21e:	2300      	movs	r3, #0
   1c220:	e7d2      	b.n	1c1c8 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1c222:	4638      	mov	r0, r7
   1c224:	f7fe fc36 	bl	1aa94 <z_ready_thread>
		poller->is_polling = false;
   1c228:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1c22c:	e7cd      	b.n	1c1ca <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c22e:	2b02      	cmp	r3, #2
   1c230:	d1f5      	bne.n	1c21e <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c232:	7823      	ldrb	r3, [r4, #0]
   1c234:	2b00      	cmp	r3, #0
   1c236:	d0c8      	beq.n	1c1ca <signal_poll_event+0x3a>
   1c238:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1c23c:	b177      	cbz	r7, 1c25c <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1c23e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1c242:	f1a4 0910 	sub.w	r9, r4, #16
   1c246:	f104 0010 	add.w	r0, r4, #16
   1c24a:	f7ff fe15 	bl	1be78 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1c24e:	4649      	mov	r1, r9
   1c250:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1c252:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1c256:	f005 f9b0 	bl	215ba <k_work_submit_to_queue>
   1c25a:	e7e5      	b.n	1c228 <signal_poll_event+0x98>
		poller->is_polling = false;
   1c25c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1c25e:	e7b4      	b.n	1c1ca <signal_poll_event+0x3a>
   1c260:	00026486 	.word	0x00026486
   1c264:	00022dd6 	.word	0x00022dd6

0001c268 <register_events>:
{
   1c268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1c26c:	2600      	movs	r6, #0
{
   1c26e:	4614      	mov	r4, r2
   1c270:	4681      	mov	r9, r0
	int events_registered = 0;
   1c272:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c274:	f8df a188 	ldr.w	sl, [pc, #392]	; 1c400 <register_events+0x198>
   1c278:	4f62      	ldr	r7, [pc, #392]	; (1c404 <register_events+0x19c>)
   1c27a:	4d63      	ldr	r5, [pc, #396]	; (1c408 <register_events+0x1a0>)
{
   1c27c:	9100      	str	r1, [sp, #0]
   1c27e:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1c280:	9b00      	ldr	r3, [sp, #0]
   1c282:	429e      	cmp	r6, r3
   1c284:	db03      	blt.n	1c28e <register_events+0x26>
}
   1c286:	4640      	mov	r0, r8
   1c288:	b003      	add	sp, #12
   1c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1c28e:	f04f 0220 	mov.w	r2, #32
   1c292:	f3ef 8b11 	mrs	fp, BASEPRI
   1c296:	f382 8811 	msr	BASEPRI, r2
   1c29a:	f3bf 8f6f 	isb	sy
   1c29e:	4650      	mov	r0, sl
   1c2a0:	f7ff fba6 	bl	1b9f0 <z_spin_lock_valid>
   1c2a4:	b940      	cbnz	r0, 1c2b8 <register_events+0x50>
   1c2a6:	4639      	mov	r1, r7
   1c2a8:	4628      	mov	r0, r5
   1c2aa:	227c      	movs	r2, #124	; 0x7c
   1c2ac:	f000 fb74 	bl	1c998 <printk>
   1c2b0:	217c      	movs	r1, #124	; 0x7c
   1c2b2:	4638      	mov	r0, r7
   1c2b4:	f000 fe16 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c2b8:	4650      	mov	r0, sl
   1c2ba:	f7ff fbb5 	bl	1ba28 <z_spin_lock_set_owner>
	switch (event->type) {
   1c2be:	f899 200d 	ldrb.w	r2, [r9, #13]
   1c2c2:	f002 020f 	and.w	r2, r2, #15
   1c2c6:	2a04      	cmp	r2, #4
   1c2c8:	d848      	bhi.n	1c35c <register_events+0xf4>
   1c2ca:	e8df f002 	tbb	[pc, r2]
   1c2ce:	402f      	.short	0x402f
   1c2d0:	4703      	.short	0x4703
   1c2d2:	2b          	.byte	0x2b
   1c2d3:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1c2d4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c2d8:	6892      	ldr	r2, [r2, #8]
   1c2da:	b33a      	cbz	r2, 1c32c <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c2dc:	2102      	movs	r1, #2
	event->poller = NULL;
   1c2de:	2000      	movs	r0, #0
	event->state |= state;
   1c2e0:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1c2e4:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1c2e8:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1c2ec:	ea41 010c 	orr.w	r1, r1, ip
   1c2f0:	f361 3210 	bfi	r2, r1, #12, #5
   1c2f4:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1c2f8:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2fa:	4650      	mov	r0, sl
   1c2fc:	f7ff fb86 	bl	1ba0c <z_spin_unlock_valid>
   1c300:	b940      	cbnz	r0, 1c314 <register_events+0xac>
   1c302:	4639      	mov	r1, r7
   1c304:	4628      	mov	r0, r5
   1c306:	22a7      	movs	r2, #167	; 0xa7
   1c308:	f000 fb46 	bl	1c998 <printk>
   1c30c:	21a7      	movs	r1, #167	; 0xa7
   1c30e:	4638      	mov	r0, r7
   1c310:	f000 fde8 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1c314:	f38b 8811 	msr	BASEPRI, fp
   1c318:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c31c:	3601      	adds	r6, #1
   1c31e:	f109 0914 	add.w	r9, r9, #20
   1c322:	e7ad      	b.n	1c280 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1c324:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c328:	6812      	ldr	r2, [r2, #0]
   1c32a:	bb0a      	cbnz	r2, 1c370 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1c32c:	9b01      	ldr	r3, [sp, #4]
   1c32e:	2b00      	cmp	r3, #0
   1c330:	d1e3      	bne.n	1c2fa <register_events+0x92>
   1c332:	7822      	ldrb	r2, [r4, #0]
   1c334:	2a00      	cmp	r2, #0
   1c336:	d0e0      	beq.n	1c2fa <register_events+0x92>
	switch (event->type) {
   1c338:	f899 200d 	ldrb.w	r2, [r9, #13]
   1c33c:	f002 020f 	and.w	r2, r2, #15
   1c340:	2a04      	cmp	r2, #4
   1c342:	d852      	bhi.n	1c3ea <register_events+0x182>
   1c344:	e8df f002 	tbb	[pc, r2]
   1c348:	51164029 	.word	0x51164029
   1c34c:	2e          	.byte	0x2e
   1c34d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1c34e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c352:	6892      	ldr	r2, [r2, #8]
   1c354:	2a00      	cmp	r2, #0
   1c356:	d0e9      	beq.n	1c32c <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1c358:	2101      	movs	r1, #1
   1c35a:	e7c0      	b.n	1c2de <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1c35c:	4628      	mov	r0, r5
   1c35e:	2254      	movs	r2, #84	; 0x54
   1c360:	492a      	ldr	r1, [pc, #168]	; (1c40c <register_events+0x1a4>)
   1c362:	f000 fb19 	bl	1c998 <printk>
   1c366:	2154      	movs	r1, #84	; 0x54
   1c368:	4828      	ldr	r0, [pc, #160]	; (1c40c <register_events+0x1a4>)
   1c36a:	f000 fdbb 	bl	1cee4 <assert_post_action>
		break;
   1c36e:	e7dd      	b.n	1c32c <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c370:	2104      	movs	r1, #4
   1c372:	e7b4      	b.n	1c2de <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c374:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c378:	b942      	cbnz	r2, 1c38c <register_events+0x124>
   1c37a:	4628      	mov	r0, r5
   1c37c:	4923      	ldr	r1, [pc, #140]	; (1c40c <register_events+0x1a4>)
   1c37e:	227e      	movs	r2, #126	; 0x7e
   1c380:	f000 fb0a 	bl	1c998 <printk>
   1c384:	217e      	movs	r1, #126	; 0x7e
   1c386:	4821      	ldr	r0, [pc, #132]	; (1c40c <register_events+0x1a4>)
   1c388:	f000 fdac 	bl	1cee4 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1c38c:	4622      	mov	r2, r4
   1c38e:	4649      	mov	r1, r9
   1c390:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c394:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1c396:	f005 f924 	bl	215e2 <add_event>
	event->poller = poller;
   1c39a:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1c39e:	f108 0801 	add.w	r8, r8, #1
   1c3a2:	e7aa      	b.n	1c2fa <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c3a4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c3a8:	b942      	cbnz	r2, 1c3bc <register_events+0x154>
   1c3aa:	4628      	mov	r0, r5
   1c3ac:	4917      	ldr	r1, [pc, #92]	; (1c40c <register_events+0x1a4>)
   1c3ae:	2282      	movs	r2, #130	; 0x82
   1c3b0:	f000 faf2 	bl	1c998 <printk>
   1c3b4:	2182      	movs	r1, #130	; 0x82
   1c3b6:	4815      	ldr	r0, [pc, #84]	; (1c40c <register_events+0x1a4>)
   1c3b8:	f000 fd94 	bl	1cee4 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1c3bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c3c0:	4622      	mov	r2, r4
   1c3c2:	4649      	mov	r1, r9
   1c3c4:	3014      	adds	r0, #20
   1c3c6:	e7e6      	b.n	1c396 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c3c8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c3cc:	b942      	cbnz	r2, 1c3e0 <register_events+0x178>
   1c3ce:	4628      	mov	r0, r5
   1c3d0:	490e      	ldr	r1, [pc, #56]	; (1c40c <register_events+0x1a4>)
   1c3d2:	2286      	movs	r2, #134	; 0x86
   1c3d4:	f000 fae0 	bl	1c998 <printk>
   1c3d8:	2186      	movs	r1, #134	; 0x86
   1c3da:	480c      	ldr	r0, [pc, #48]	; (1c40c <register_events+0x1a4>)
   1c3dc:	f000 fd82 	bl	1cee4 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1c3e0:	4622      	mov	r2, r4
   1c3e2:	4649      	mov	r1, r9
   1c3e4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c3e8:	e7d5      	b.n	1c396 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1c3ea:	4628      	mov	r0, r5
   1c3ec:	228d      	movs	r2, #141	; 0x8d
   1c3ee:	4907      	ldr	r1, [pc, #28]	; (1c40c <register_events+0x1a4>)
   1c3f0:	f000 fad2 	bl	1c998 <printk>
   1c3f4:	218d      	movs	r1, #141	; 0x8d
   1c3f6:	4805      	ldr	r0, [pc, #20]	; (1c40c <register_events+0x1a4>)
   1c3f8:	f000 fd74 	bl	1cee4 <assert_post_action>
		break;
   1c3fc:	e7cd      	b.n	1c39a <register_events+0x132>
   1c3fe:	bf00      	nop
   1c400:	2000a010 	.word	0x2000a010
   1c404:	00022e10 	.word	0x00022e10
   1c408:	00022dd6 	.word	0x00022dd6
   1c40c:	00026486 	.word	0x00026486

0001c410 <clear_event_registrations>:
{
   1c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c414:	2414      	movs	r4, #20
   1c416:	4617      	mov	r7, r2
	while (num_events--) {
   1c418:	460e      	mov	r6, r1
   1c41a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1c41e:	4d3d      	ldr	r5, [pc, #244]	; (1c514 <clear_event_registrations+0x104>)
   1c420:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c518 <clear_event_registrations+0x108>
   1c424:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1c51c <clear_event_registrations+0x10c>
	while (num_events--) {
   1c428:	b90e      	cbnz	r6, 1c42e <clear_event_registrations+0x1e>
}
   1c42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1c42e:	2300      	movs	r3, #0
   1c430:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c434:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c438:	f1a4 0a14 	sub.w	sl, r4, #20
   1c43c:	f003 030f 	and.w	r3, r3, #15
   1c440:	2b04      	cmp	r3, #4
   1c442:	d831      	bhi.n	1c4a8 <clear_event_registrations+0x98>
   1c444:	e8df f003 	tbb	[pc, r3]
   1c448:	30032539 	.word	0x30032539
   1c44c:	1a          	.byte	0x1a
   1c44d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c44e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c452:	b943      	cbnz	r3, 1c466 <clear_event_registrations+0x56>
   1c454:	4629      	mov	r1, r5
   1c456:	229d      	movs	r2, #157	; 0x9d
   1c458:	4640      	mov	r0, r8
   1c45a:	f000 fa9d 	bl	1c998 <printk>
   1c45e:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c460:	4628      	mov	r0, r5
   1c462:	f000 fd3f 	bl	1cee4 <assert_post_action>
	return node->next != NULL;
   1c466:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1c46a:	b333      	cbz	r3, 1c4ba <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1c46c:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1c470:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c472:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c474:	2300      	movs	r3, #0
	node->prev = NULL;
   1c476:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1c47a:	e01e      	b.n	1c4ba <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c47c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c480:	2b00      	cmp	r3, #0
   1c482:	d1f0      	bne.n	1c466 <clear_event_registrations+0x56>
   1c484:	4629      	mov	r1, r5
   1c486:	22a1      	movs	r2, #161	; 0xa1
   1c488:	4640      	mov	r0, r8
   1c48a:	f000 fa85 	bl	1c998 <printk>
   1c48e:	21a1      	movs	r1, #161	; 0xa1
   1c490:	e7e6      	b.n	1c460 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c492:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c496:	2b00      	cmp	r3, #0
   1c498:	d1e5      	bne.n	1c466 <clear_event_registrations+0x56>
   1c49a:	4629      	mov	r1, r5
   1c49c:	22a5      	movs	r2, #165	; 0xa5
   1c49e:	4640      	mov	r0, r8
   1c4a0:	f000 fa7a 	bl	1c998 <printk>
   1c4a4:	21a5      	movs	r1, #165	; 0xa5
   1c4a6:	e7db      	b.n	1c460 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1c4a8:	4629      	mov	r1, r5
   1c4aa:	4640      	mov	r0, r8
   1c4ac:	22ac      	movs	r2, #172	; 0xac
   1c4ae:	f000 fa73 	bl	1c998 <printk>
   1c4b2:	21ac      	movs	r1, #172	; 0xac
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	f000 fd15 	bl	1cee4 <assert_post_action>
   1c4ba:	4648      	mov	r0, r9
   1c4bc:	f7ff faa6 	bl	1ba0c <z_spin_unlock_valid>
   1c4c0:	b940      	cbnz	r0, 1c4d4 <clear_event_registrations+0xc4>
   1c4c2:	4640      	mov	r0, r8
   1c4c4:	4916      	ldr	r1, [pc, #88]	; (1c520 <clear_event_registrations+0x110>)
   1c4c6:	22a7      	movs	r2, #167	; 0xa7
   1c4c8:	f000 fa66 	bl	1c998 <printk>
   1c4cc:	21a7      	movs	r1, #167	; 0xa7
   1c4ce:	4814      	ldr	r0, [pc, #80]	; (1c520 <clear_event_registrations+0x110>)
   1c4d0:	f000 fd08 	bl	1cee4 <assert_post_action>
   1c4d4:	f387 8811 	msr	BASEPRI, r7
   1c4d8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c4dc:	f04f 0320 	mov.w	r3, #32
   1c4e0:	f3ef 8711 	mrs	r7, BASEPRI
   1c4e4:	f383 8811 	msr	BASEPRI, r3
   1c4e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c4ec:	4648      	mov	r0, r9
   1c4ee:	f7ff fa7f 	bl	1b9f0 <z_spin_lock_valid>
   1c4f2:	b940      	cbnz	r0, 1c506 <clear_event_registrations+0xf6>
   1c4f4:	4640      	mov	r0, r8
   1c4f6:	490a      	ldr	r1, [pc, #40]	; (1c520 <clear_event_registrations+0x110>)
   1c4f8:	227c      	movs	r2, #124	; 0x7c
   1c4fa:	f000 fa4d 	bl	1c998 <printk>
   1c4fe:	217c      	movs	r1, #124	; 0x7c
   1c500:	4807      	ldr	r0, [pc, #28]	; (1c520 <clear_event_registrations+0x110>)
   1c502:	f000 fcef 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c506:	4648      	mov	r0, r9
   1c508:	f7ff fa8e 	bl	1ba28 <z_spin_lock_set_owner>
	return k;
   1c50c:	4654      	mov	r4, sl
   1c50e:	3e01      	subs	r6, #1
   1c510:	e78a      	b.n	1c428 <clear_event_registrations+0x18>
   1c512:	bf00      	nop
   1c514:	00026486 	.word	0x00026486
   1c518:	00022dd6 	.word	0x00022dd6
   1c51c:	2000a010 	.word	0x2000a010
   1c520:	00022e10 	.word	0x00022e10

0001c524 <k_poll_event_init>:
{
   1c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c526:	4605      	mov	r5, r0
   1c528:	460f      	mov	r7, r1
   1c52a:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c52c:	4614      	mov	r4, r2
   1c52e:	b142      	cbz	r2, 1c542 <k_poll_event_init+0x1e>
   1c530:	4915      	ldr	r1, [pc, #84]	; (1c588 <k_poll_event_init+0x64>)
   1c532:	4816      	ldr	r0, [pc, #88]	; (1c58c <k_poll_event_init+0x68>)
   1c534:	222d      	movs	r2, #45	; 0x2d
   1c536:	f000 fa2f 	bl	1c998 <printk>
   1c53a:	212d      	movs	r1, #45	; 0x2d
   1c53c:	4812      	ldr	r0, [pc, #72]	; (1c588 <k_poll_event_init+0x64>)
   1c53e:	f000 fcd1 	bl	1cee4 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c542:	2f0f      	cmp	r7, #15
   1c544:	d908      	bls.n	1c558 <k_poll_event_init+0x34>
   1c546:	4910      	ldr	r1, [pc, #64]	; (1c588 <k_poll_event_init+0x64>)
   1c548:	4810      	ldr	r0, [pc, #64]	; (1c58c <k_poll_event_init+0x68>)
   1c54a:	222f      	movs	r2, #47	; 0x2f
   1c54c:	f000 fa24 	bl	1c998 <printk>
   1c550:	212f      	movs	r1, #47	; 0x2f
   1c552:	480d      	ldr	r0, [pc, #52]	; (1c588 <k_poll_event_init+0x64>)
   1c554:	f000 fcc6 	bl	1cee4 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c558:	b946      	cbnz	r6, 1c56c <k_poll_event_init+0x48>
   1c55a:	490b      	ldr	r1, [pc, #44]	; (1c588 <k_poll_event_init+0x64>)
   1c55c:	480b      	ldr	r0, [pc, #44]	; (1c58c <k_poll_event_init+0x68>)
   1c55e:	2230      	movs	r2, #48	; 0x30
   1c560:	f000 fa1a 	bl	1c998 <printk>
   1c564:	2130      	movs	r1, #48	; 0x30
   1c566:	4808      	ldr	r0, [pc, #32]	; (1c588 <k_poll_event_init+0x64>)
   1c568:	f000 fcbc 	bl	1cee4 <assert_post_action>
	event->poller = NULL;
   1c56c:	2300      	movs	r3, #0
	event->type = type;
   1c56e:	0464      	lsls	r4, r4, #17
   1c570:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1c572:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1c574:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1c578:	7b2b      	ldrb	r3, [r5, #12]
   1c57a:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1c57e:	433c      	orrs	r4, r7
   1c580:	431c      	orrs	r4, r3
	event->obj = obj;
   1c582:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1c586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c588:	00026486 	.word	0x00026486
   1c58c:	00022dd6 	.word	0x00022dd6

0001c590 <z_impl_k_poll>:
{
   1c590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c594:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1c596:	4b64      	ldr	r3, [pc, #400]	; (1c728 <z_impl_k_poll+0x198>)
{
   1c598:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1c59a:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1c59c:	2301      	movs	r3, #1
{
   1c59e:	4688      	mov	r8, r1
   1c5a0:	4616      	mov	r6, r2
   1c5a2:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1c5a4:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1c5a8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1c5ac:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1c5b0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c5b4:	b153      	cbz	r3, 1c5cc <z_impl_k_poll+0x3c>
   1c5b6:	495d      	ldr	r1, [pc, #372]	; (1c72c <z_impl_k_poll+0x19c>)
   1c5b8:	485d      	ldr	r0, [pc, #372]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c5ba:	f44f 7282 	mov.w	r2, #260	; 0x104
   1c5be:	f000 f9eb 	bl	1c998 <printk>
   1c5c2:	f44f 7182 	mov.w	r1, #260	; 0x104
   1c5c6:	4859      	ldr	r0, [pc, #356]	; (1c72c <z_impl_k_poll+0x19c>)
   1c5c8:	f000 fc8c 	bl	1cee4 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1c5cc:	b954      	cbnz	r4, 1c5e4 <z_impl_k_poll+0x54>
   1c5ce:	4957      	ldr	r1, [pc, #348]	; (1c72c <z_impl_k_poll+0x19c>)
   1c5d0:	4857      	ldr	r0, [pc, #348]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c5d2:	f240 1205 	movw	r2, #261	; 0x105
   1c5d6:	f000 f9df 	bl	1c998 <printk>
   1c5da:	f240 1105 	movw	r1, #261	; 0x105
   1c5de:	4853      	ldr	r0, [pc, #332]	; (1c72c <z_impl_k_poll+0x19c>)
   1c5e0:	f000 fc80 	bl	1cee4 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1c5e4:	f1b8 0f00 	cmp.w	r8, #0
   1c5e8:	da0a      	bge.n	1c600 <z_impl_k_poll+0x70>
   1c5ea:	4950      	ldr	r1, [pc, #320]	; (1c72c <z_impl_k_poll+0x19c>)
   1c5ec:	4850      	ldr	r0, [pc, #320]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c5ee:	f44f 7283 	mov.w	r2, #262	; 0x106
   1c5f2:	f000 f9d1 	bl	1c998 <printk>
   1c5f6:	f44f 7183 	mov.w	r1, #262	; 0x106
   1c5fa:	484c      	ldr	r0, [pc, #304]	; (1c72c <z_impl_k_poll+0x19c>)
   1c5fc:	f000 fc72 	bl	1cee4 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1c600:	ea56 0305 	orrs.w	r3, r6, r5
   1c604:	bf0c      	ite	eq
   1c606:	2301      	moveq	r3, #1
   1c608:	2300      	movne	r3, #0
   1c60a:	4641      	mov	r1, r8
   1c60c:	464a      	mov	r2, r9
   1c60e:	4620      	mov	r0, r4
   1c610:	f7ff fe2a 	bl	1c268 <register_events>
   1c614:	4680      	mov	r8, r0
   1c616:	f04f 0320 	mov.w	r3, #32
   1c61a:	f3ef 8911 	mrs	r9, BASEPRI
   1c61e:	f383 8811 	msr	BASEPRI, r3
   1c622:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c626:	4843      	ldr	r0, [pc, #268]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c628:	f7ff f9e2 	bl	1b9f0 <z_spin_lock_valid>
   1c62c:	b940      	cbnz	r0, 1c640 <z_impl_k_poll+0xb0>
   1c62e:	4942      	ldr	r1, [pc, #264]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c630:	483f      	ldr	r0, [pc, #252]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c632:	227c      	movs	r2, #124	; 0x7c
   1c634:	f000 f9b0 	bl	1c998 <printk>
   1c638:	217c      	movs	r1, #124	; 0x7c
   1c63a:	483f      	ldr	r0, [pc, #252]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c63c:	f000 fc52 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c640:	483c      	ldr	r0, [pc, #240]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c642:	f7ff f9f1 	bl	1ba28 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1c646:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1c64a:	b9d3      	cbnz	r3, 1c682 <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1c64c:	4620      	mov	r0, r4
   1c64e:	464a      	mov	r2, r9
   1c650:	4641      	mov	r1, r8
   1c652:	f7ff fedd 	bl	1c410 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c656:	4837      	ldr	r0, [pc, #220]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c658:	f7ff f9d8 	bl	1ba0c <z_spin_unlock_valid>
   1c65c:	b940      	cbnz	r0, 1c670 <z_impl_k_poll+0xe0>
   1c65e:	4936      	ldr	r1, [pc, #216]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c660:	4833      	ldr	r0, [pc, #204]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c662:	22a7      	movs	r2, #167	; 0xa7
   1c664:	f000 f998 	bl	1c998 <printk>
   1c668:	21a7      	movs	r1, #167	; 0xa7
   1c66a:	4833      	ldr	r0, [pc, #204]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c66c:	f000 fc3a 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1c670:	f389 8811 	msr	BASEPRI, r9
   1c674:	f3bf 8f6f 	isb	sy
		return 0;
   1c678:	2500      	movs	r5, #0
}
   1c67a:	4628      	mov	r0, r5
   1c67c:	b005      	add	sp, #20
   1c67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1c682:	2300      	movs	r3, #0
   1c684:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c688:	ea56 0305 	orrs.w	r3, r6, r5
   1c68c:	d113      	bne.n	1c6b6 <z_impl_k_poll+0x126>
   1c68e:	4829      	ldr	r0, [pc, #164]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c690:	f7ff f9bc 	bl	1ba0c <z_spin_unlock_valid>
   1c694:	b940      	cbnz	r0, 1c6a8 <z_impl_k_poll+0x118>
   1c696:	4928      	ldr	r1, [pc, #160]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c698:	4825      	ldr	r0, [pc, #148]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c69a:	22a7      	movs	r2, #167	; 0xa7
   1c69c:	f000 f97c 	bl	1c998 <printk>
   1c6a0:	21a7      	movs	r1, #167	; 0xa7
   1c6a2:	4825      	ldr	r0, [pc, #148]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c6a4:	f000 fc1e 	bl	1cee4 <assert_post_action>
   1c6a8:	f389 8811 	msr	BASEPRI, r9
   1c6ac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c6b0:	f06f 050a 	mvn.w	r5, #10
   1c6b4:	e7e1      	b.n	1c67a <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c6b6:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c6ba:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c6bc:	4649      	mov	r1, r9
   1c6be:	481d      	ldr	r0, [pc, #116]	; (1c734 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c6c0:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c6c4:	f7fe fd50 	bl	1b168 <z_pend_curr>
   1c6c8:	4605      	mov	r5, r0
	__asm__ volatile(
   1c6ca:	f04f 0320 	mov.w	r3, #32
   1c6ce:	f3ef 8611 	mrs	r6, BASEPRI
   1c6d2:	f383 8811 	msr	BASEPRI, r3
   1c6d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c6da:	4816      	ldr	r0, [pc, #88]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c6dc:	f7ff f988 	bl	1b9f0 <z_spin_lock_valid>
   1c6e0:	b940      	cbnz	r0, 1c6f4 <z_impl_k_poll+0x164>
   1c6e2:	4915      	ldr	r1, [pc, #84]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c6e4:	4812      	ldr	r0, [pc, #72]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c6e6:	227c      	movs	r2, #124	; 0x7c
   1c6e8:	f000 f956 	bl	1c998 <printk>
   1c6ec:	217c      	movs	r1, #124	; 0x7c
   1c6ee:	4812      	ldr	r0, [pc, #72]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c6f0:	f000 fbf8 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c6f4:	480f      	ldr	r0, [pc, #60]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c6f6:	f7ff f997 	bl	1ba28 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1c6fa:	4620      	mov	r0, r4
   1c6fc:	4632      	mov	r2, r6
   1c6fe:	4641      	mov	r1, r8
   1c700:	f7ff fe86 	bl	1c410 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c704:	480b      	ldr	r0, [pc, #44]	; (1c734 <z_impl_k_poll+0x1a4>)
   1c706:	f7ff f981 	bl	1ba0c <z_spin_unlock_valid>
   1c70a:	b940      	cbnz	r0, 1c71e <z_impl_k_poll+0x18e>
   1c70c:	490a      	ldr	r1, [pc, #40]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c70e:	4808      	ldr	r0, [pc, #32]	; (1c730 <z_impl_k_poll+0x1a0>)
   1c710:	22a7      	movs	r2, #167	; 0xa7
   1c712:	f000 f941 	bl	1c998 <printk>
   1c716:	21a7      	movs	r1, #167	; 0xa7
   1c718:	4807      	ldr	r0, [pc, #28]	; (1c738 <z_impl_k_poll+0x1a8>)
   1c71a:	f000 fbe3 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1c71e:	f386 8811 	msr	BASEPRI, r6
   1c722:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c726:	e7a8      	b.n	1c67a <z_impl_k_poll+0xea>
   1c728:	20009fbc 	.word	0x20009fbc
   1c72c:	00026486 	.word	0x00026486
   1c730:	00022dd6 	.word	0x00022dd6
   1c734:	2000a010 	.word	0x2000a010
   1c738:	00022e10 	.word	0x00022e10

0001c73c <z_impl_k_poll_signal_raise>:
{
   1c73c:	b570      	push	{r4, r5, r6, lr}
   1c73e:	4604      	mov	r4, r0
   1c740:	460d      	mov	r5, r1
	__asm__ volatile(
   1c742:	f04f 0320 	mov.w	r3, #32
   1c746:	f3ef 8611 	mrs	r6, BASEPRI
   1c74a:	f383 8811 	msr	BASEPRI, r3
   1c74e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c752:	481c      	ldr	r0, [pc, #112]	; (1c7c4 <z_impl_k_poll_signal_raise+0x88>)
   1c754:	f7ff f94c 	bl	1b9f0 <z_spin_lock_valid>
   1c758:	b940      	cbnz	r0, 1c76c <z_impl_k_poll_signal_raise+0x30>
   1c75a:	491b      	ldr	r1, [pc, #108]	; (1c7c8 <z_impl_k_poll_signal_raise+0x8c>)
   1c75c:	481b      	ldr	r0, [pc, #108]	; (1c7cc <z_impl_k_poll_signal_raise+0x90>)
   1c75e:	227c      	movs	r2, #124	; 0x7c
   1c760:	f000 f91a 	bl	1c998 <printk>
   1c764:	217c      	movs	r1, #124	; 0x7c
   1c766:	4818      	ldr	r0, [pc, #96]	; (1c7c8 <z_impl_k_poll_signal_raise+0x8c>)
   1c768:	f000 fbbc 	bl	1cee4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c76c:	4815      	ldr	r0, [pc, #84]	; (1c7c4 <z_impl_k_poll_signal_raise+0x88>)
   1c76e:	f7ff f95b 	bl	1ba28 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1c772:	2101      	movs	r1, #1
	return list->head == list;
   1c774:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1c776:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c778:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1c77a:	60a1      	str	r1, [r4, #8]
   1c77c:	d112      	bne.n	1c7a4 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c77e:	4811      	ldr	r0, [pc, #68]	; (1c7c4 <z_impl_k_poll_signal_raise+0x88>)
   1c780:	f7ff f944 	bl	1ba0c <z_spin_unlock_valid>
   1c784:	b940      	cbnz	r0, 1c798 <z_impl_k_poll_signal_raise+0x5c>
   1c786:	4910      	ldr	r1, [pc, #64]	; (1c7c8 <z_impl_k_poll_signal_raise+0x8c>)
   1c788:	4810      	ldr	r0, [pc, #64]	; (1c7cc <z_impl_k_poll_signal_raise+0x90>)
   1c78a:	22a7      	movs	r2, #167	; 0xa7
   1c78c:	f000 f904 	bl	1c998 <printk>
   1c790:	21a7      	movs	r1, #167	; 0xa7
   1c792:	480d      	ldr	r0, [pc, #52]	; (1c7c8 <z_impl_k_poll_signal_raise+0x8c>)
   1c794:	f000 fba6 	bl	1cee4 <assert_post_action>
	__asm__ volatile(
   1c798:	f386 8811 	msr	BASEPRI, r6
   1c79c:	f3bf 8f6f 	isb	sy
		return 0;
   1c7a0:	2400      	movs	r4, #0
   1c7a2:	e00d      	b.n	1c7c0 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1c7a4:	e9d0 3200 	ldrd	r3, r2, [r0]
   1c7a8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c7aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c7ac:	2300      	movs	r3, #0
	node->prev = NULL;
   1c7ae:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c7b2:	f7ff fced 	bl	1c190 <signal_poll_event>
	z_reschedule(&lock, key);
   1c7b6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c7b8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c7ba:	4802      	ldr	r0, [pc, #8]	; (1c7c4 <z_impl_k_poll_signal_raise+0x88>)
   1c7bc:	f7fd ff96 	bl	1a6ec <z_reschedule>
}
   1c7c0:	4620      	mov	r0, r4
   1c7c2:	bd70      	pop	{r4, r5, r6, pc}
   1c7c4:	2000a010 	.word	0x2000a010
   1c7c8:	00022e10 	.word	0x00022e10
   1c7cc:	00022dd6 	.word	0x00022dd6

0001c7d0 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1c7d0:	2803      	cmp	r0, #3
{
   1c7d2:	b538      	push	{r3, r4, r5, lr}
   1c7d4:	4604      	mov	r4, r0
   1c7d6:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1c7d8:	d901      	bls.n	1c7de <k_aligned_alloc+0xe>
   1c7da:	0783      	lsls	r3, r0, #30
   1c7dc:	d008      	beq.n	1c7f0 <k_aligned_alloc+0x20>
   1c7de:	490e      	ldr	r1, [pc, #56]	; (1c818 <k_aligned_alloc+0x48>)
   1c7e0:	480e      	ldr	r0, [pc, #56]	; (1c81c <k_aligned_alloc+0x4c>)
   1c7e2:	223e      	movs	r2, #62	; 0x3e
   1c7e4:	f000 f8d8 	bl	1c998 <printk>
   1c7e8:	213e      	movs	r1, #62	; 0x3e
   1c7ea:	480b      	ldr	r0, [pc, #44]	; (1c818 <k_aligned_alloc+0x48>)
   1c7ec:	f000 fb7a 	bl	1cee4 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1c7f0:	1e63      	subs	r3, r4, #1
   1c7f2:	4223      	tst	r3, r4
   1c7f4:	d008      	beq.n	1c808 <k_aligned_alloc+0x38>
   1c7f6:	4908      	ldr	r1, [pc, #32]	; (1c818 <k_aligned_alloc+0x48>)
   1c7f8:	4808      	ldr	r0, [pc, #32]	; (1c81c <k_aligned_alloc+0x4c>)
   1c7fa:	2242      	movs	r2, #66	; 0x42
   1c7fc:	f000 f8cc 	bl	1c998 <printk>
   1c800:	2142      	movs	r1, #66	; 0x42
   1c802:	4805      	ldr	r0, [pc, #20]	; (1c818 <k_aligned_alloc+0x48>)
   1c804:	f000 fb6e 	bl	1cee4 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c808:	462a      	mov	r2, r5
   1c80a:	4621      	mov	r1, r4
}
   1c80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c810:	4803      	ldr	r0, [pc, #12]	; (1c820 <k_aligned_alloc+0x50>)
   1c812:	f004 bf26 	b.w	21662 <z_heap_aligned_alloc>
   1c816:	bf00      	nop
   1c818:	000264a7 	.word	0x000264a7
   1c81c:	00022dd6 	.word	0x00022dd6
   1c820:	2000850c 	.word	0x2000850c

0001c824 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c824:	b538      	push	{r3, r4, r5, lr}
   1c826:	4604      	mov	r4, r0
   1c828:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c82a:	f004 fe2d 	bl	21488 <k_is_in_isr>
   1c82e:	b958      	cbnz	r0, 1c848 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c830:	4b07      	ldr	r3, [pc, #28]	; (1c850 <z_thread_aligned_alloc+0x2c>)
   1c832:	689b      	ldr	r3, [r3, #8]
   1c834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1c838:	b143      	cbz	r3, 1c84c <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1c83a:	462a      	mov	r2, r5
   1c83c:	4621      	mov	r1, r4
   1c83e:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1c840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1c844:	f004 bf0d 	b.w	21662 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1c848:	4b02      	ldr	r3, [pc, #8]	; (1c854 <z_thread_aligned_alloc+0x30>)
   1c84a:	e7f6      	b.n	1c83a <z_thread_aligned_alloc+0x16>
}
   1c84c:	bd38      	pop	{r3, r4, r5, pc}
   1c84e:	bf00      	nop
   1c850:	20009fbc 	.word	0x20009fbc
   1c854:	2000850c 	.word	0x2000850c

0001c858 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   1c858:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1c85a:	2003      	movs	r0, #3
   1c85c:	f7fc b982 	b.w	18b64 <dk_set_led>

0001c860 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1c860:	f002 b978 	b.w	1eb54 <bt_conn_get_dst>

0001c864 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1c864:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1c866:	2364      	movs	r3, #100	; 0x64
{
   1c868:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1c86a:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1c86c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1c86e:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1c872:	b111      	cbz	r1, 1c87a <u8_to_dec+0x16>
   1c874:	3d01      	subs	r5, #1
   1c876:	d101      	bne.n	1c87c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1c878:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1c87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1c87c:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c880:	429a      	cmp	r2, r3
		digit = value / divisor;
   1c882:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c884:	d202      	bcs.n	1c88c <u8_to_dec+0x28>
   1c886:	2b01      	cmp	r3, #1
   1c888:	d000      	beq.n	1c88c <u8_to_dec+0x28>
   1c88a:	b130      	cbz	r0, 1c89a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1c88c:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1c88e:	3901      	subs	r1, #1
			num_digits++;
   1c890:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1c892:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1c896:	b2c9      	uxtb	r1, r1
			num_digits++;
   1c898:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1c89a:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1c89e:	fbb3 f3fc 	udiv	r3, r3, ip
   1c8a2:	b2d2      	uxtb	r2, r2
   1c8a4:	e7e5      	b.n	1c872 <u8_to_dec+0xe>

0001c8a6 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1c8a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c8aa:	b2db      	uxtb	r3, r3
   1c8ac:	2b09      	cmp	r3, #9
   1c8ae:	d802      	bhi.n	1c8b6 <char2hex+0x10>
		*x = c - '0';
   1c8b0:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1c8b2:	2000      	movs	r0, #0
   1c8b4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1c8b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c8ba:	2b05      	cmp	r3, #5
   1c8bc:	d802      	bhi.n	1c8c4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1c8be:	3857      	subs	r0, #87	; 0x57
   1c8c0:	7008      	strb	r0, [r1, #0]
   1c8c2:	e7f6      	b.n	1c8b2 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1c8c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c8c8:	2b05      	cmp	r3, #5
   1c8ca:	d801      	bhi.n	1c8d0 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1c8cc:	3837      	subs	r0, #55	; 0x37
   1c8ce:	e7f7      	b.n	1c8c0 <char2hex+0x1a>
		return -EINVAL;
   1c8d0:	f06f 0015 	mvn.w	r0, #21
}
   1c8d4:	4770      	bx	lr

0001c8d6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1c8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c8d8:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1c8da:	f001 0001 	and.w	r0, r1, #1
   1c8de:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1c8e2:	429d      	cmp	r5, r3
   1c8e4:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1c8e8:	d903      	bls.n	1c8f2 <hex2bin+0x1c>
		return 0;
   1c8ea:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1c8ec:	4628      	mov	r0, r5
   1c8ee:	b003      	add	sp, #12
   1c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1c8f2:	b158      	cbz	r0, 1c90c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1c8f4:	7820      	ldrb	r0, [r4, #0]
   1c8f6:	f10d 0107 	add.w	r1, sp, #7
   1c8fa:	f7ff ffd4 	bl	1c8a6 <char2hex>
   1c8fe:	2800      	cmp	r0, #0
   1c900:	dbf3      	blt.n	1c8ea <hex2bin+0x14>
		buf[0] = dec;
   1c902:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1c906:	3401      	adds	r4, #1
		buf[0] = dec;
   1c908:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c90c:	3401      	adds	r4, #1
   1c90e:	4416      	add	r6, r2
   1c910:	42b2      	cmp	r2, r6
   1c912:	d0eb      	beq.n	1c8ec <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1c914:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c918:	f10d 0107 	add.w	r1, sp, #7
   1c91c:	f7ff ffc3 	bl	1c8a6 <char2hex>
   1c920:	2800      	cmp	r0, #0
   1c922:	dbe2      	blt.n	1c8ea <hex2bin+0x14>
		buf[i] = dec << 4;
   1c924:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c928:	011b      	lsls	r3, r3, #4
   1c92a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1c92c:	f814 0b02 	ldrb.w	r0, [r4], #2
   1c930:	f7ff ffb9 	bl	1c8a6 <char2hex>
   1c934:	2800      	cmp	r0, #0
   1c936:	dbd8      	blt.n	1c8ea <hex2bin+0x14>
		buf[i] += dec;
   1c938:	7813      	ldrb	r3, [r2, #0]
   1c93a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1c93e:	440b      	add	r3, r1
   1c940:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c944:	e7e4      	b.n	1c910 <hex2bin+0x3a>

0001c946 <sys_notify_validate>:
	if (notify == NULL) {
   1c946:	4603      	mov	r3, r0
   1c948:	b140      	cbz	r0, 1c95c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c94a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c94c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1c950:	2a02      	cmp	r2, #2
   1c952:	d006      	beq.n	1c962 <sys_notify_validate+0x1c>
   1c954:	2a03      	cmp	r2, #3
   1c956:	d004      	beq.n	1c962 <sys_notify_validate+0x1c>
   1c958:	2a01      	cmp	r2, #1
   1c95a:	d005      	beq.n	1c968 <sys_notify_validate+0x22>
		return -EINVAL;
   1c95c:	f06f 0015 	mvn.w	r0, #21
}
   1c960:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c962:	681a      	ldr	r2, [r3, #0]
   1c964:	2a00      	cmp	r2, #0
   1c966:	d0f9      	beq.n	1c95c <sys_notify_validate+0x16>
		notify->result = 0;
   1c968:	2000      	movs	r0, #0
   1c96a:	6098      	str	r0, [r3, #8]
   1c96c:	4770      	bx	lr

0001c96e <arch_printk_char_out>:
}
   1c96e:	2000      	movs	r0, #0
   1c970:	4770      	bx	lr

0001c972 <str_out>:
{
   1c972:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c974:	688a      	ldr	r2, [r1, #8]
   1c976:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1c978:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c97a:	b114      	cbz	r4, 1c982 <str_out+0x10>
   1c97c:	684b      	ldr	r3, [r1, #4]
   1c97e:	4293      	cmp	r3, r2
   1c980:	dc01      	bgt.n	1c986 <str_out+0x14>
		ctx->count++;
   1c982:	608d      	str	r5, [r1, #8]
}
   1c984:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c986:	3b01      	subs	r3, #1
   1c988:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c98a:	bf08      	it	eq
   1c98c:	2200      	moveq	r2, #0
   1c98e:	608d      	str	r5, [r1, #8]
   1c990:	bf0c      	ite	eq
   1c992:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c994:	54a0      	strbne	r0, [r4, r2]
   1c996:	e7f5      	b.n	1c984 <str_out+0x12>

0001c998 <printk>:
{
   1c998:	b40f      	push	{r0, r1, r2, r3}
   1c99a:	b507      	push	{r0, r1, r2, lr}
   1c99c:	a904      	add	r1, sp, #16
   1c99e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c9a2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c9a4:	f7ed fb38 	bl	a018 <vprintk>
}
   1c9a8:	b003      	add	sp, #12
   1c9aa:	f85d eb04 	ldr.w	lr, [sp], #4
   1c9ae:	b004      	add	sp, #16
   1c9b0:	4770      	bx	lr

0001c9b2 <snprintk>:
{
   1c9b2:	b40c      	push	{r2, r3}
   1c9b4:	b507      	push	{r0, r1, r2, lr}
   1c9b6:	ab04      	add	r3, sp, #16
   1c9b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c9bc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c9be:	f7ed fb39 	bl	a034 <vsnprintk>
}
   1c9c2:	b003      	add	sp, #12
   1c9c4:	f85d eb04 	ldr.w	lr, [sp], #4
   1c9c8:	b002      	add	sp, #8
   1c9ca:	4770      	bx	lr

0001c9cc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c9cc:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1c9ce:	f013 0307 	ands.w	r3, r3, #7
   1c9d2:	d105      	bne.n	1c9e0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c9d4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c9d6:	2b00      	cmp	r3, #0
   1c9d8:	bf0c      	ite	eq
   1c9da:	2000      	moveq	r0, #0
   1c9dc:	2003      	movne	r0, #3
   1c9de:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c9e0:	2b02      	cmp	r3, #2
   1c9e2:	d105      	bne.n	1c9f0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c9e4:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1c9e6:	2b00      	cmp	r3, #0
   1c9e8:	bf14      	ite	ne
   1c9ea:	2000      	movne	r0, #0
   1c9ec:	2004      	moveq	r0, #4
   1c9ee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c9f0:	2b01      	cmp	r3, #1
   1c9f2:	d105      	bne.n	1ca00 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c9f4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	bf0c      	ite	eq
   1c9fa:	2000      	moveq	r0, #0
   1c9fc:	2005      	movne	r0, #5
   1c9fe:	4770      	bx	lr
	int evt = EVT_NOP;
   1ca00:	2000      	movs	r0, #0
}
   1ca02:	4770      	bx	lr

0001ca04 <notify_one>:
{
   1ca04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca08:	460d      	mov	r5, r1
   1ca0a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ca0c:	4619      	mov	r1, r3
   1ca0e:	1d28      	adds	r0, r5, #4
{
   1ca10:	4690      	mov	r8, r2
   1ca12:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ca14:	f7ed fac6 	bl	9fa4 <sys_notify_finalize>
	if (cb) {
   1ca18:	4604      	mov	r4, r0
   1ca1a:	b138      	cbz	r0, 1ca2c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ca1c:	4633      	mov	r3, r6
   1ca1e:	4642      	mov	r2, r8
   1ca20:	4629      	mov	r1, r5
   1ca22:	4638      	mov	r0, r7
   1ca24:	46a4      	mov	ip, r4
}
   1ca26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ca2a:	4760      	bx	ip
}
   1ca2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca30 <validate_args>:
{
   1ca30:	b510      	push	{r4, lr}
   1ca32:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ca34:	b140      	cbz	r0, 1ca48 <validate_args+0x18>
   1ca36:	b139      	cbz	r1, 1ca48 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ca38:	1d08      	adds	r0, r1, #4
   1ca3a:	f7ff ff84 	bl	1c946 <sys_notify_validate>
	if ((rv == 0)
   1ca3e:	b928      	cbnz	r0, 1ca4c <validate_args+0x1c>
	    && ((cli->notify.flags
   1ca40:	68a3      	ldr	r3, [r4, #8]
   1ca42:	f033 0303 	bics.w	r3, r3, #3
   1ca46:	d001      	beq.n	1ca4c <validate_args+0x1c>
		rv = -EINVAL;
   1ca48:	f06f 0015 	mvn.w	r0, #21
}
   1ca4c:	bd10      	pop	{r4, pc}

0001ca4e <onoff_manager_init>:
{
   1ca4e:	b538      	push	{r3, r4, r5, lr}
   1ca50:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ca52:	4605      	mov	r5, r0
   1ca54:	b158      	cbz	r0, 1ca6e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ca56:	b151      	cbz	r1, 1ca6e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ca58:	680b      	ldr	r3, [r1, #0]
   1ca5a:	b143      	cbz	r3, 1ca6e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ca5c:	684b      	ldr	r3, [r1, #4]
   1ca5e:	b133      	cbz	r3, 1ca6e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ca60:	2220      	movs	r2, #32
   1ca62:	2100      	movs	r1, #0
   1ca64:	f001 fc7b 	bl	1e35e <memset>
	return 0;
   1ca68:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ca6a:	612c      	str	r4, [r5, #16]
}
   1ca6c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ca6e:	f06f 0015 	mvn.w	r0, #21
   1ca72:	e7fb      	b.n	1ca6c <onoff_manager_init+0x1e>

0001ca74 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ca74:	4604      	mov	r4, r0
   1ca76:	b508      	push	{r3, lr}
   1ca78:	4608      	mov	r0, r1
   1ca7a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1ca7c:	461a      	mov	r2, r3
   1ca7e:	47a0      	blx	r4
	return z_impl_k_current_get();
   1ca80:	f7fe fdc4 	bl	1b60c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1ca84:	f7f1 fa0a 	bl	de9c <z_impl_k_thread_abort>

0001ca88 <chunk_field>:
	if (big_heap(h)) {
   1ca88:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ca8a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ca8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1ca92:	bf2c      	ite	cs
   1ca94:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1ca98:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1ca9c:	4770      	bx	lr

0001ca9e <chunk_set>:
	void *cmem = &buf[c];
   1ca9e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1caa2:	6880      	ldr	r0, [r0, #8]
   1caa4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1caa8:	bf2c      	ite	cs
   1caaa:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1caae:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1cab2:	4770      	bx	lr

0001cab4 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cab4:	2201      	movs	r2, #1
{
   1cab6:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cab8:	f7ff ffe6 	bl	1ca88 <chunk_field>
}
   1cabc:	40d0      	lsrs	r0, r2
   1cabe:	bd08      	pop	{r3, pc}

0001cac0 <set_chunk_used>:
	if (big_heap(h)) {
   1cac0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1cac2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1caca:	d308      	bcc.n	1cade <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cacc:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1cace:	b11a      	cbz	r2, 1cad8 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cad0:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cad4:	604b      	str	r3, [r1, #4]
   1cad6:	4770      	bx	lr
   1cad8:	f023 0301 	bic.w	r3, r3, #1
   1cadc:	e7fa      	b.n	1cad4 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cade:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1cae0:	b11a      	cbz	r2, 1caea <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cae2:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cae6:	804b      	strh	r3, [r1, #2]
}
   1cae8:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1caea:	f023 0301 	bic.w	r3, r3, #1
   1caee:	e7fa      	b.n	1cae6 <set_chunk_used+0x26>

0001caf0 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1caf0:	0053      	lsls	r3, r2, #1
   1caf2:	2201      	movs	r2, #1
   1caf4:	f7ff bfd3 	b.w	1ca9e <chunk_set>

0001caf8 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1caf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1cafc:	bf2c      	ite	cs
   1cafe:	2008      	movcs	r0, #8
   1cb00:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cb02:	3107      	adds	r1, #7
   1cb04:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1cb06:	08c0      	lsrs	r0, r0, #3
   1cb08:	4770      	bx	lr

0001cb0a <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1cb0a:	b508      	push	{r3, lr}
   1cb0c:	460b      	mov	r3, r1
   1cb0e:	2101      	movs	r1, #1
   1cb10:	f7ff fff2 	bl	1caf8 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1cb14:	3301      	adds	r3, #1
   1cb16:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1cb18:	fab3 f083 	clz	r0, r3
}
   1cb1c:	f1c0 001f 	rsb	r0, r0, #31
   1cb20:	bd08      	pop	{r3, pc}

0001cb22 <free_list_remove_bidx>:
{
   1cb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb26:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1cb28:	2203      	movs	r2, #3
   1cb2a:	460e      	mov	r6, r1
   1cb2c:	4604      	mov	r4, r0
   1cb2e:	f7ff ffab 	bl	1ca88 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1cb32:	4286      	cmp	r6, r0
   1cb34:	4605      	mov	r5, r0
   1cb36:	f107 0804 	add.w	r8, r7, #4
   1cb3a:	d10b      	bne.n	1cb54 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1cb3c:	2301      	movs	r3, #1
   1cb3e:	fa03 f707 	lsl.w	r7, r3, r7
   1cb42:	68e3      	ldr	r3, [r4, #12]
   1cb44:	ea23 0307 	bic.w	r3, r3, r7
   1cb48:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1cb4a:	2300      	movs	r3, #0
   1cb4c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1cb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1cb54:	4631      	mov	r1, r6
   1cb56:	2202      	movs	r2, #2
   1cb58:	4620      	mov	r0, r4
   1cb5a:	f7ff ff95 	bl	1ca88 <chunk_field>
   1cb5e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1cb60:	462b      	mov	r3, r5
   1cb62:	4601      	mov	r1, r0
   1cb64:	2203      	movs	r2, #3
   1cb66:	4620      	mov	r0, r4
		b->next = second;
   1cb68:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1cb6c:	f7ff ff97 	bl	1ca9e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cb70:	4633      	mov	r3, r6
   1cb72:	4629      	mov	r1, r5
   1cb74:	4620      	mov	r0, r4
}
   1cb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb7a:	2202      	movs	r2, #2
   1cb7c:	f7ff bf8f 	b.w	1ca9e <chunk_set>

0001cb80 <free_list_remove>:
{
   1cb80:	b570      	push	{r4, r5, r6, lr}
   1cb82:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1cb84:	6886      	ldr	r6, [r0, #8]
   1cb86:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cb88:	f7ff ff94 	bl	1cab4 <chunk_size>
   1cb8c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cb90:	4601      	mov	r1, r0
   1cb92:	d301      	bcc.n	1cb98 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1cb94:	2801      	cmp	r0, #1
   1cb96:	d009      	beq.n	1cbac <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cb98:	4630      	mov	r0, r6
   1cb9a:	f7ff ffb6 	bl	1cb0a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1cb9e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cba0:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1cba2:	4620      	mov	r0, r4
}
   1cba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1cba8:	f7ff bfbb 	b.w	1cb22 <free_list_remove_bidx>
}
   1cbac:	bd70      	pop	{r4, r5, r6, pc}

0001cbae <alloc_chunk>:
{
   1cbae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbb2:	6886      	ldr	r6, [r0, #8]
   1cbb4:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1cbb6:	4630      	mov	r0, r6
{
   1cbb8:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1cbba:	f7ff ffa6 	bl	1cb0a <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1cbbe:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1cbc0:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1cbc2:	4630      	mov	r0, r6
   1cbc4:	f7ff ffa1 	bl	1cb0a <bucket_idx.isra.0>
   1cbc8:	42a8      	cmp	r0, r5
   1cbca:	da03      	bge.n	1cbd4 <alloc_chunk+0x26>
		return 0;
   1cbcc:	2600      	movs	r6, #0
}
   1cbce:	4630      	mov	r0, r6
   1cbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1cbd4:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1cbd8:	f8da 9010 	ldr.w	r9, [sl, #16]
   1cbdc:	f1b9 0f00 	cmp.w	r9, #0
   1cbe0:	d019      	beq.n	1cc16 <alloc_chunk+0x68>
   1cbe2:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1cbe4:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1cbe8:	4620      	mov	r0, r4
   1cbea:	4631      	mov	r1, r6
   1cbec:	f7ff ff62 	bl	1cab4 <chunk_size>
   1cbf0:	4540      	cmp	r0, r8
   1cbf2:	d305      	bcc.n	1cc00 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1cbf4:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1cbf6:	4631      	mov	r1, r6
   1cbf8:	4620      	mov	r0, r4
   1cbfa:	f7ff ff92 	bl	1cb22 <free_list_remove_bidx>
		return c;
   1cbfe:	e7e6      	b.n	1cbce <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1cc00:	2203      	movs	r2, #3
   1cc02:	4631      	mov	r1, r6
   1cc04:	4620      	mov	r0, r4
   1cc06:	f7ff ff3f 	bl	1ca88 <chunk_field>
		} while (--i && b->next != first);
   1cc0a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1cc0c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1cc10:	d001      	beq.n	1cc16 <alloc_chunk+0x68>
   1cc12:	4581      	cmp	r9, r0
   1cc14:	d1e6      	bne.n	1cbe4 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1cc16:	f04f 32ff 	mov.w	r2, #4294967295
   1cc1a:	68e3      	ldr	r3, [r4, #12]
   1cc1c:	3501      	adds	r5, #1
   1cc1e:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1cc20:	401a      	ands	r2, r3
   1cc22:	d0d3      	beq.n	1cbcc <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1cc24:	fa92 f2a2 	rbit	r2, r2
   1cc28:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1cc2c:	1d13      	adds	r3, r2, #4
   1cc2e:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1cc32:	e7e0      	b.n	1cbf6 <alloc_chunk+0x48>

0001cc34 <split_chunks>:
{
   1cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc38:	4614      	mov	r4, r2
   1cc3a:	460e      	mov	r6, r1
   1cc3c:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1cc3e:	f7ff ff39 	bl	1cab4 <chunk_size>
	size_t lsz = rc - lc;
   1cc42:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1cc46:	1b37      	subs	r7, r6, r4
   1cc48:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1cc4a:	4642      	mov	r2, r8
   1cc4c:	4631      	mov	r1, r6
   1cc4e:	4628      	mov	r0, r5
   1cc50:	f7ff ff4e 	bl	1caf0 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1cc54:	463a      	mov	r2, r7
   1cc56:	4621      	mov	r1, r4
   1cc58:	4628      	mov	r0, r5
   1cc5a:	f7ff ff49 	bl	1caf0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cc5e:	4643      	mov	r3, r8
   1cc60:	2200      	movs	r2, #0
   1cc62:	4621      	mov	r1, r4
   1cc64:	4628      	mov	r0, r5
   1cc66:	f7ff ff1a 	bl	1ca9e <chunk_set>
	return c + chunk_size(h, c);
   1cc6a:	4621      	mov	r1, r4
   1cc6c:	4628      	mov	r0, r5
   1cc6e:	f7ff ff21 	bl	1cab4 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cc72:	463b      	mov	r3, r7
   1cc74:	1821      	adds	r1, r4, r0
   1cc76:	2200      	movs	r2, #0
   1cc78:	4628      	mov	r0, r5
}
   1cc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cc7e:	f7ff bf0e 	b.w	1ca9e <chunk_set>

0001cc82 <merge_chunks>:
{
   1cc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc86:	4616      	mov	r6, r2
   1cc88:	4604      	mov	r4, r0
   1cc8a:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1cc8c:	f7ff ff12 	bl	1cab4 <chunk_size>
   1cc90:	4631      	mov	r1, r6
   1cc92:	4605      	mov	r5, r0
   1cc94:	4620      	mov	r0, r4
   1cc96:	f7ff ff0d 	bl	1cab4 <chunk_size>
   1cc9a:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1cc9c:	462a      	mov	r2, r5
   1cc9e:	4639      	mov	r1, r7
   1cca0:	4620      	mov	r0, r4
   1cca2:	f7ff ff25 	bl	1caf0 <set_chunk_size>
	return c + chunk_size(h, c);
   1cca6:	4631      	mov	r1, r6
   1cca8:	4620      	mov	r0, r4
   1ccaa:	f7ff ff03 	bl	1cab4 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ccae:	462b      	mov	r3, r5
   1ccb0:	1831      	adds	r1, r6, r0
   1ccb2:	2200      	movs	r2, #0
   1ccb4:	4620      	mov	r0, r4
}
   1ccb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ccba:	f7ff bef0 	b.w	1ca9e <chunk_set>

0001ccbe <free_list_add>:
{
   1ccbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccc2:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ccc4:	6886      	ldr	r6, [r0, #8]
   1ccc6:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ccc8:	f7ff fef4 	bl	1cab4 <chunk_size>
   1cccc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ccd0:	4601      	mov	r1, r0
   1ccd2:	d301      	bcc.n	1ccd8 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1ccd4:	2801      	cmp	r0, #1
   1ccd6:	d033      	beq.n	1cd40 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ccd8:	4630      	mov	r0, r6
   1ccda:	f7ff ff16 	bl	1cb0a <bucket_idx.isra.0>
	if (b->next == 0U) {
   1ccde:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1cce2:	6916      	ldr	r6, [r2, #16]
   1cce4:	b99e      	cbnz	r6, 1cd0e <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1cce6:	2301      	movs	r3, #1
   1cce8:	fa03 f000 	lsl.w	r0, r3, r0
   1ccec:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ccee:	4629      	mov	r1, r5
   1ccf0:	4303      	orrs	r3, r0
   1ccf2:	60e3      	str	r3, [r4, #12]
   1ccf4:	4620      	mov	r0, r4
		b->next = c;
   1ccf6:	6115      	str	r5, [r2, #16]
   1ccf8:	462b      	mov	r3, r5
   1ccfa:	2202      	movs	r2, #2
   1ccfc:	f7ff fecf 	bl	1ca9e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cd00:	2203      	movs	r2, #3
   1cd02:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1cd04:	4620      	mov	r0, r4
}
   1cd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cd0a:	f7ff bec8 	b.w	1ca9e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1cd0e:	2202      	movs	r2, #2
   1cd10:	4631      	mov	r1, r6
   1cd12:	4620      	mov	r0, r4
   1cd14:	f7ff feb8 	bl	1ca88 <chunk_field>
   1cd18:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1cd1a:	4603      	mov	r3, r0
   1cd1c:	4629      	mov	r1, r5
   1cd1e:	4620      	mov	r0, r4
   1cd20:	f7ff febd 	bl	1ca9e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cd24:	2203      	movs	r2, #3
   1cd26:	4633      	mov	r3, r6
   1cd28:	4629      	mov	r1, r5
   1cd2a:	4620      	mov	r0, r4
   1cd2c:	f7ff feb7 	bl	1ca9e <chunk_set>
   1cd30:	4639      	mov	r1, r7
   1cd32:	462b      	mov	r3, r5
   1cd34:	4620      	mov	r0, r4
   1cd36:	f7ff feb2 	bl	1ca9e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cd3a:	2202      	movs	r2, #2
   1cd3c:	4631      	mov	r1, r6
   1cd3e:	e7e1      	b.n	1cd04 <free_list_add+0x46>
   1cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cd44 <free_chunk>:
{
   1cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd46:	460c      	mov	r4, r1
   1cd48:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1cd4a:	f7ff feb3 	bl	1cab4 <chunk_size>
   1cd4e:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cd50:	2201      	movs	r2, #1
   1cd52:	4631      	mov	r1, r6
   1cd54:	4628      	mov	r0, r5
   1cd56:	f7ff fe97 	bl	1ca88 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1cd5a:	07c3      	lsls	r3, r0, #31
   1cd5c:	d40c      	bmi.n	1cd78 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1cd5e:	4631      	mov	r1, r6
   1cd60:	4628      	mov	r0, r5
   1cd62:	f7ff ff0d 	bl	1cb80 <free_list_remove>
	return c + chunk_size(h, c);
   1cd66:	4621      	mov	r1, r4
   1cd68:	4628      	mov	r0, r5
   1cd6a:	f7ff fea3 	bl	1cab4 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1cd6e:	4621      	mov	r1, r4
   1cd70:	1822      	adds	r2, r4, r0
   1cd72:	4628      	mov	r0, r5
   1cd74:	f7ff ff85 	bl	1cc82 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cd78:	2200      	movs	r2, #0
   1cd7a:	4621      	mov	r1, r4
   1cd7c:	4628      	mov	r0, r5
   1cd7e:	f7ff fe83 	bl	1ca88 <chunk_field>
   1cd82:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cd84:	2201      	movs	r2, #1
   1cd86:	4639      	mov	r1, r7
   1cd88:	4628      	mov	r0, r5
   1cd8a:	f7ff fe7d 	bl	1ca88 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1cd8e:	ea10 0602 	ands.w	r6, r0, r2
   1cd92:	d113      	bne.n	1cdbc <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1cd94:	4639      	mov	r1, r7
   1cd96:	4628      	mov	r0, r5
   1cd98:	f7ff fef2 	bl	1cb80 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cd9c:	4621      	mov	r1, r4
   1cd9e:	4632      	mov	r2, r6
   1cda0:	4628      	mov	r0, r5
   1cda2:	f7ff fe71 	bl	1ca88 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1cda6:	4622      	mov	r2, r4
   1cda8:	1a21      	subs	r1, r4, r0
   1cdaa:	4628      	mov	r0, r5
   1cdac:	f7ff ff69 	bl	1cc82 <merge_chunks>
   1cdb0:	4621      	mov	r1, r4
   1cdb2:	4632      	mov	r2, r6
   1cdb4:	4628      	mov	r0, r5
   1cdb6:	f7ff fe67 	bl	1ca88 <chunk_field>
   1cdba:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1cdbc:	4621      	mov	r1, r4
   1cdbe:	4628      	mov	r0, r5
}
   1cdc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1cdc4:	f7ff bf7b 	b.w	1ccbe <free_list_add>

0001cdc8 <sys_heap_alloc>:
{
   1cdc8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1cdca:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cdcc:	b909      	cbnz	r1, 1cdd2 <sys_heap_alloc+0xa>
		return NULL;
   1cdce:	2000      	movs	r0, #0
}
   1cdd0:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1cdd2:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cdd4:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1cdd8:	d9f9      	bls.n	1cdce <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cdda:	f7ff fe8d 	bl	1caf8 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cdde:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cde0:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cde2:	4630      	mov	r0, r6
   1cde4:	f7ff fee3 	bl	1cbae <alloc_chunk>
	if (c == 0U) {
   1cde8:	4604      	mov	r4, r0
   1cdea:	2800      	cmp	r0, #0
   1cdec:	d0ef      	beq.n	1cdce <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1cdee:	4601      	mov	r1, r0
   1cdf0:	4630      	mov	r0, r6
   1cdf2:	f7ff fe5f 	bl	1cab4 <chunk_size>
   1cdf6:	42a8      	cmp	r0, r5
   1cdf8:	d909      	bls.n	1ce0e <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1cdfa:	4425      	add	r5, r4
   1cdfc:	4621      	mov	r1, r4
   1cdfe:	4630      	mov	r0, r6
   1ce00:	462a      	mov	r2, r5
   1ce02:	f7ff ff17 	bl	1cc34 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ce06:	4629      	mov	r1, r5
   1ce08:	4630      	mov	r0, r6
   1ce0a:	f7ff ff58 	bl	1ccbe <free_list_add>
	set_chunk_used(h, c, true);
   1ce0e:	4621      	mov	r1, r4
   1ce10:	4630      	mov	r0, r6
   1ce12:	2201      	movs	r2, #1
   1ce14:	f7ff fe54 	bl	1cac0 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1ce18:	68b3      	ldr	r3, [r6, #8]
   1ce1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ce1e:	bf2c      	ite	cs
   1ce20:	2308      	movcs	r3, #8
   1ce22:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ce24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ce28:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1ce2a:	e7d1      	b.n	1cdd0 <sys_heap_alloc+0x8>

0001ce2c <encode_uint>:
{
   1ce2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce30:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ce32:	78d3      	ldrb	r3, [r2, #3]
{
   1ce34:	4680      	mov	r8, r0
	switch (specifier) {
   1ce36:	2b6f      	cmp	r3, #111	; 0x6f
{
   1ce38:	460f      	mov	r7, r1
   1ce3a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ce3c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ce40:	d029      	beq.n	1ce96 <encode_uint+0x6a>
   1ce42:	d824      	bhi.n	1ce8e <encode_uint+0x62>
		return 16;
   1ce44:	2b58      	cmp	r3, #88	; 0x58
   1ce46:	bf14      	ite	ne
   1ce48:	260a      	movne	r6, #10
   1ce4a:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1ce4c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ce50:	4632      	mov	r2, r6
   1ce52:	2300      	movs	r3, #0
   1ce54:	4640      	mov	r0, r8
   1ce56:	4639      	mov	r1, r7
   1ce58:	f7eb fe68 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ce5c:	2a09      	cmp	r2, #9
   1ce5e:	b2d4      	uxtb	r4, r2
   1ce60:	d81e      	bhi.n	1cea0 <encode_uint+0x74>
   1ce62:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ce64:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ce66:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1ce68:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ce6c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1ce70:	d301      	bcc.n	1ce76 <encode_uint+0x4a>
   1ce72:	45d1      	cmp	r9, sl
   1ce74:	d811      	bhi.n	1ce9a <encode_uint+0x6e>
	if (conv->flag_hash) {
   1ce76:	782b      	ldrb	r3, [r5, #0]
   1ce78:	069b      	lsls	r3, r3, #26
   1ce7a:	d505      	bpl.n	1ce88 <encode_uint+0x5c>
		if (radix == 8) {
   1ce7c:	2e08      	cmp	r6, #8
   1ce7e:	d115      	bne.n	1ceac <encode_uint+0x80>
			conv->altform_0 = true;
   1ce80:	78ab      	ldrb	r3, [r5, #2]
   1ce82:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ce86:	70ab      	strb	r3, [r5, #2]
}
   1ce88:	4648      	mov	r0, r9
   1ce8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ce8e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1ce92:	2b70      	cmp	r3, #112	; 0x70
   1ce94:	e7d7      	b.n	1ce46 <encode_uint+0x1a>
	switch (specifier) {
   1ce96:	2608      	movs	r6, #8
   1ce98:	e7d8      	b.n	1ce4c <encode_uint+0x20>
		value /= radix;
   1ce9a:	4680      	mov	r8, r0
   1ce9c:	460f      	mov	r7, r1
   1ce9e:	e7d7      	b.n	1ce50 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cea0:	f1bb 0f19 	cmp.w	fp, #25
   1cea4:	bf94      	ite	ls
   1cea6:	3437      	addls	r4, #55	; 0x37
   1cea8:	3457      	addhi	r4, #87	; 0x57
   1ceaa:	e7db      	b.n	1ce64 <encode_uint+0x38>
		} else if (radix == 16) {
   1ceac:	2e10      	cmp	r6, #16
   1ceae:	d1eb      	bne.n	1ce88 <encode_uint+0x5c>
			conv->altform_0c = true;
   1ceb0:	78ab      	ldrb	r3, [r5, #2]
   1ceb2:	f043 0310 	orr.w	r3, r3, #16
   1ceb6:	e7e6      	b.n	1ce86 <encode_uint+0x5a>

0001ceb8 <outs>:
{
   1ceb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cebc:	4607      	mov	r7, r0
   1cebe:	4688      	mov	r8, r1
   1cec0:	4615      	mov	r5, r2
   1cec2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1cec4:	4614      	mov	r4, r2
   1cec6:	42b4      	cmp	r4, r6
   1cec8:	eba4 0005 	sub.w	r0, r4, r5
   1cecc:	d302      	bcc.n	1ced4 <outs+0x1c>
   1cece:	b93e      	cbnz	r6, 1cee0 <outs+0x28>
   1ced0:	7823      	ldrb	r3, [r4, #0]
   1ced2:	b12b      	cbz	r3, 1cee0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1ced4:	4641      	mov	r1, r8
   1ced6:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ceda:	47b8      	blx	r7
		if (rc < 0) {
   1cedc:	2800      	cmp	r0, #0
   1cede:	daf2      	bge.n	1cec6 <outs+0xe>
}
   1cee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cee4 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1cee4:	4040      	eors	r0, r0
   1cee6:	f380 8811 	msr	BASEPRI, r0
   1ceea:	f04f 0004 	mov.w	r0, #4
   1ceee:	df02      	svc	2
}
   1cef0:	4770      	bx	lr

0001cef2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   1cef2:	4770      	bx	lr

0001cef4 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1cef4:	f04f 0320 	mov.w	r3, #32
   1cef8:	f3ef 8111 	mrs	r1, BASEPRI
   1cefc:	f383 8811 	msr	BASEPRI, r3
   1cf00:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1cf04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1cf08:	2201      	movs	r2, #1
   1cf0a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1cf0e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1cf12:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1cf16:	f381 8811 	msr	BASEPRI, r1
   1cf1a:	f3bf 8f6f 	isb	sy
}
   1cf1e:	2000      	movs	r0, #0
   1cf20:	4770      	bx	lr

0001cf22 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1cf22:	f003 bdfa 	b.w	20b1a <SystemInit>

0001cf26 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1cf26:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1cf2a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1cf2e:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1cf30:	4640      	mov	r0, r8
{
   1cf32:	461f      	mov	r7, r3
   1cf34:	460c      	mov	r4, r1
   1cf36:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1cf38:	f001 f9a8 	bl	1e28c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1cf3c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cf40:	b280      	uxth	r0, r0
   1cf42:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1cf46:	9300      	str	r3, [sp, #0]
   1cf48:	4632      	mov	r2, r6
   1cf4a:	463b      	mov	r3, r7
   1cf4c:	4621      	mov	r1, r4
   1cf4e:	4628      	mov	r0, r5
   1cf50:	f002 fce4 	bl	1f91c <bt_gatt_attr_read>
}
   1cf54:	b004      	add	sp, #16
   1cf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf5a <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1cf5a:	6883      	ldr	r3, [r0, #8]
   1cf5c:	68db      	ldr	r3, [r3, #12]
   1cf5e:	4718      	bx	r3

0001cf60 <nvs_flash_rd>:
{
   1cf60:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1cf62:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1cf64:	8984      	ldrh	r4, [r0, #12]
   1cf66:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1cf68:	fa16 f181 	uxtah	r1, r6, r1
   1cf6c:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   1cf70:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   1cf72:	6884      	ldr	r4, [r0, #8]
   1cf74:	6824      	ldr	r4, [r4, #0]
   1cf76:	46a4      	mov	ip, r4
}
   1cf78:	bc70      	pop	{r4, r5, r6}
   1cf7a:	4760      	bx	ip

0001cf7c <nvs_flash_block_cmp>:
{
   1cf7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf80:	4681      	mov	r9, r0
   1cf82:	460e      	mov	r6, r1
   1cf84:	4617      	mov	r7, r2
   1cf86:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1cf88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1cf8a:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1cf8c:	681d      	ldr	r5, [r3, #0]
   1cf8e:	426d      	negs	r5, r5
	block_size =
   1cf90:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1cf94:	b91c      	cbnz	r4, 1cf9e <nvs_flash_block_cmp+0x22>
	return 0;
   1cf96:	4620      	mov	r0, r4
}
   1cf98:	b009      	add	sp, #36	; 0x24
   1cf9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1cf9e:	42ac      	cmp	r4, r5
   1cfa0:	46a0      	mov	r8, r4
   1cfa2:	bf28      	it	cs
   1cfa4:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1cfa6:	466a      	mov	r2, sp
   1cfa8:	4643      	mov	r3, r8
   1cfaa:	4631      	mov	r1, r6
   1cfac:	4648      	mov	r0, r9
   1cfae:	f7ff ffd7 	bl	1cf60 <nvs_flash_rd>
		if (rc) {
   1cfb2:	2800      	cmp	r0, #0
   1cfb4:	d1f0      	bne.n	1cf98 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1cfb6:	4642      	mov	r2, r8
   1cfb8:	4669      	mov	r1, sp
   1cfba:	4638      	mov	r0, r7
   1cfbc:	f001 f993 	bl	1e2e6 <memcmp>
		if (rc) {
   1cfc0:	b920      	cbnz	r0, 1cfcc <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1cfc2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1cfc6:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1cfc8:	4447      	add	r7, r8
   1cfca:	e7e3      	b.n	1cf94 <nvs_flash_block_cmp+0x18>
			return 1;
   1cfcc:	2001      	movs	r0, #1
   1cfce:	e7e3      	b.n	1cf98 <nvs_flash_block_cmp+0x1c>

0001cfd0 <nvs_flash_cmp_const>:
{
   1cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfd4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1cfd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1cfd8:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1cfda:	681d      	ldr	r5, [r3, #0]
{
   1cfdc:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1cfde:	426d      	negs	r5, r5
	block_size =
   1cfe0:	f005 0520 	and.w	r5, r5, #32
{
   1cfe4:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1cfe6:	4668      	mov	r0, sp
{
   1cfe8:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1cfea:	462a      	mov	r2, r5
   1cfec:	f001 f9b7 	bl	1e35e <memset>
	while (len) {
   1cff0:	b91c      	cbnz	r4, 1cffa <nvs_flash_cmp_const+0x2a>
	return 0;
   1cff2:	4620      	mov	r0, r4
}
   1cff4:	b008      	add	sp, #32
   1cff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1cffa:	42ac      	cmp	r4, r5
   1cffc:	46a0      	mov	r8, r4
   1cffe:	bf28      	it	cs
   1d000:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1d002:	466a      	mov	r2, sp
   1d004:	4643      	mov	r3, r8
   1d006:	4631      	mov	r1, r6
   1d008:	4638      	mov	r0, r7
   1d00a:	f7ff ffb7 	bl	1cf7c <nvs_flash_block_cmp>
		if (rc) {
   1d00e:	2800      	cmp	r0, #0
   1d010:	d1f0      	bne.n	1cff4 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1d012:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1d016:	4446      	add	r6, r8
   1d018:	e7ea      	b.n	1cff0 <nvs_flash_cmp_const+0x20>

0001d01a <nvs_flash_erase_sector>:
{
   1d01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d01e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	addr &= ADDR_SECT_MASK;
   1d020:	0c0e      	lsrs	r6, r1, #16
   1d022:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d024:	4631      	mov	r1, r6
   1d026:	8983      	ldrh	r3, [r0, #12]
   1d028:	7912      	ldrb	r2, [r2, #4]
{
   1d02a:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d02c:	f7ff ffd0 	bl	1cfd0 <nvs_flash_cmp_const>
	if (rc <= 0) {
   1d030:	1e04      	subs	r4, r0, #0
   1d032:	dd16      	ble.n	1d062 <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   1d034:	2100      	movs	r1, #0
   1d036:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   1d038:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d03a:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   1d03e:	f7ff ff8c 	bl	1cf5a <flash_write_protection_set>
	if (rc) {
   1d042:	4604      	mov	r4, r0
   1d044:	b968      	cbnz	r0, 1d062 <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1d046:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d048:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   1d04a:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d04c:	0c31      	lsrs	r1, r6, #16
   1d04e:	fb08 7101 	mla	r1, r8, r1, r7
   1d052:	689b      	ldr	r3, [r3, #8]
   1d054:	4798      	blx	r3
	if (rc) {
   1d056:	4604      	mov	r4, r0
   1d058:	b918      	cbnz	r0, 1d062 <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   1d05a:	2101      	movs	r1, #1
   1d05c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d05e:	f7ff ff7c 	bl	1cf5a <flash_write_protection_set>
}
   1d062:	4620      	mov	r0, r4
   1d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d068 <nvs_ate_crc8_check>:
{
   1d068:	b510      	push	{r4, lr}
   1d06a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d06c:	4601      	mov	r1, r0
   1d06e:	2207      	movs	r2, #7
   1d070:	20ff      	movs	r0, #255	; 0xff
   1d072:	f7ec ff7f 	bl	9f74 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1d076:	79e3      	ldrb	r3, [r4, #7]
}
   1d078:	1a18      	subs	r0, r3, r0
   1d07a:	bf18      	it	ne
   1d07c:	2001      	movne	r0, #1
   1d07e:	bd10      	pop	{r4, pc}

0001d080 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d080:	4601      	mov	r1, r0
{
   1d082:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d084:	2207      	movs	r2, #7
{
   1d086:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d088:	20ff      	movs	r0, #255	; 0xff
   1d08a:	f7ec ff73 	bl	9f74 <crc8_ccitt>
	entry->crc8 = crc8;
   1d08e:	71e0      	strb	r0, [r4, #7]
}
   1d090:	bd10      	pop	{r4, pc}

0001d092 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1d092:	680b      	ldr	r3, [r1, #0]
   1d094:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1d098:	0c1a      	lsrs	r2, r3, #16
   1d09a:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1d09e:	bf08      	it	eq
   1d0a0:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1d0a4:	600b      	str	r3, [r1, #0]
}
   1d0a6:	4770      	bx	lr

0001d0a8 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1d0a8:	7803      	ldrb	r3, [r0, #0]
   1d0aa:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1d0ac:	bf81      	itttt	hi
   1d0ae:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1d0b2:	18c9      	addhi	r1, r1, r3
   1d0b4:	425b      	neghi	r3, r3
   1d0b6:	4019      	andhi	r1, r3
}
   1d0b8:	4608      	mov	r0, r1
   1d0ba:	4770      	bx	lr

0001d0bc <nvs_prev_ate>:
{
   1d0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d0be:	4604      	mov	r4, r0
   1d0c0:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d0c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1d0c4:	2108      	movs	r1, #8
   1d0c6:	f7ff ffef 	bl	1d0a8 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d0ca:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d0cc:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d0ce:	6829      	ldr	r1, [r5, #0]
   1d0d0:	4620      	mov	r0, r4
   1d0d2:	f7ff ff45 	bl	1cf60 <nvs_flash_rd>
	if (rc) {
   1d0d6:	2800      	cmp	r0, #0
   1d0d8:	d13e      	bne.n	1d158 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   1d0da:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d0dc:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   1d0de:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d0e0:	b299      	uxth	r1, r3
   1d0e2:	1b92      	subs	r2, r2, r6
   1d0e4:	4291      	cmp	r1, r2
	*addr += ate_size;
   1d0e6:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d0e8:	d136      	bne.n	1d158 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1d0ea:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1d0ec:	bf09      	itett	eq
   1d0ee:	89e1      	ldrheq	r1, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   1d0f0:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1d0f4:	f101 31ff 	addeq.w	r1, r1, #4294967295
   1d0f8:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d0fc:	466a      	mov	r2, sp
   1d0fe:	2308      	movs	r3, #8
   1d100:	4620      	mov	r0, r4
   1d102:	6029      	str	r1, [r5, #0]
   1d104:	f7ff ff2c 	bl	1cf60 <nvs_flash_rd>
	if (rc) {
   1d108:	bb30      	cbnz	r0, 1d158 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1d10a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d10c:	466a      	mov	r2, sp
   1d10e:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1d110:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1d112:	f812 7b01 	ldrb.w	r7, [r2], #1
   1d116:	42b9      	cmp	r1, r7
   1d118:	d115      	bne.n	1d146 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1d11a:	3301      	adds	r3, #1
   1d11c:	2b08      	cmp	r3, #8
   1d11e:	d1f8      	bne.n	1d112 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   1d120:	6863      	ldr	r3, [r4, #4]
   1d122:	e00e      	b.n	1d142 <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1d124:	89a3      	ldrh	r3, [r4, #12]
   1d126:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1d12a:	1b9b      	subs	r3, r3, r6
   1d12c:	429a      	cmp	r2, r3
   1d12e:	d20f      	bcs.n	1d150 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   1d130:	fbb2 f3f6 	udiv	r3, r2, r6
   1d134:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1d138:	b956      	cbnz	r6, 1d150 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   1d13a:	682b      	ldr	r3, [r5, #0]
   1d13c:	0c1b      	lsrs	r3, r3, #16
   1d13e:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   1d140:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1d142:	602b      	str	r3, [r5, #0]
		return 0;
   1d144:	e008      	b.n	1d158 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   1d146:	4668      	mov	r0, sp
   1d148:	f7ff ff8e 	bl	1d068 <nvs_ate_crc8_check>
   1d14c:	2800      	cmp	r0, #0
   1d14e:	d0e9      	beq.n	1d124 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   1d150:	4629      	mov	r1, r5
   1d152:	4620      	mov	r0, r4
   1d154:	f7ed ff26 	bl	afa4 <nvs_recover_last_ate>
}
   1d158:	b003      	add	sp, #12
   1d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d15c <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d160:	4605      	mov	r5, r0
   1d162:	460c      	mov	r4, r1
	offset = fs->offset;
   1d164:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d168:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d16c:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, false);
   1d16e:	2100      	movs	r1, #0
   1d170:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d172:	4690      	mov	r8, r2
   1d174:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   1d176:	f7ff fef0 	bl	1cf5a <flash_write_protection_set>
	if (rc) {
   1d17a:	2800      	cmp	r0, #0
   1d17c:	d134      	bne.n	1d1e8 <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d17e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d180:	0c27      	lsrs	r7, r4, #16
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d182:	681b      	ldr	r3, [r3, #0]
	offset += addr & ADDR_OFFS_MASK;
   1d184:	fa1a f484 	uxtah	r4, sl, r4
   1d188:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d18c:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   1d190:	ea19 0906 	ands.w	r9, r9, r6
   1d194:	d00c      	beq.n	1d1b0 <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1d196:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   1d198:	6883      	ldr	r3, [r0, #8]
   1d19a:	4642      	mov	r2, r8
   1d19c:	685c      	ldr	r4, [r3, #4]
   1d19e:	4639      	mov	r1, r7
   1d1a0:	464b      	mov	r3, r9
   1d1a2:	47a0      	blx	r4
		if (rc) {
   1d1a4:	4604      	mov	r4, r0
   1d1a6:	b9d0      	cbnz	r0, 1d1de <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   1d1a8:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   1d1ac:	444f      	add	r7, r9
		data8 += blen;
   1d1ae:	44c8      	add	r8, r9
	if (len) {
   1d1b0:	b1ee      	cbz	r6, 1d1ee <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   1d1b2:	4632      	mov	r2, r6
   1d1b4:	4641      	mov	r1, r8
   1d1b6:	4668      	mov	r0, sp
   1d1b8:	f001 f8a6 	bl	1e308 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1d1bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1d1be:	eb0d 0006 	add.w	r0, sp, r6
   1d1c2:	681a      	ldr	r2, [r3, #0]
   1d1c4:	7919      	ldrb	r1, [r3, #4]
   1d1c6:	1b92      	subs	r2, r2, r6
   1d1c8:	f001 f8c9 	bl	1e35e <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1d1cc:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   1d1d0:	681b      	ldr	r3, [r3, #0]
   1d1d2:	6882      	ldr	r2, [r0, #8]
   1d1d4:	4639      	mov	r1, r7
   1d1d6:	6854      	ldr	r4, [r2, #4]
   1d1d8:	466a      	mov	r2, sp
   1d1da:	47a0      	blx	r4
   1d1dc:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   1d1de:	2101      	movs	r1, #1
   1d1e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d1e2:	f7ff feba 	bl	1cf5a <flash_write_protection_set>
	return rc;
   1d1e6:	4620      	mov	r0, r4
}
   1d1e8:	b008      	add	sp, #32
   1d1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   1d1ee:	4634      	mov	r4, r6
   1d1f0:	e7f5      	b.n	1d1de <nvs_flash_al_wrt.part.0+0x82>

0001d1f2 <nvs_flash_data_wrt>:
{
   1d1f2:	b538      	push	{r3, r4, r5, lr}
   1d1f4:	4604      	mov	r4, r0
	if (!len) {
   1d1f6:	4615      	mov	r5, r2
   1d1f8:	b12a      	cbz	r2, 1d206 <nvs_flash_data_wrt+0x14>
   1d1fa:	4613      	mov	r3, r2
   1d1fc:	460a      	mov	r2, r1
   1d1fe:	6881      	ldr	r1, [r0, #8]
   1d200:	f7ff ffac 	bl	1d15c <nvs_flash_al_wrt.part.0>
   1d204:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   1d206:	4629      	mov	r1, r5
   1d208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d20a:	f7ff ff4d 	bl	1d0a8 <nvs_al_size.isra.0>
   1d20e:	68a3      	ldr	r3, [r4, #8]
   1d210:	4403      	add	r3, r0
   1d212:	60a3      	str	r3, [r4, #8]
}
   1d214:	4610      	mov	r0, r2
   1d216:	bd38      	pop	{r3, r4, r5, pc}

0001d218 <nvs_flash_ate_wrt>:
{
   1d218:	b510      	push	{r4, lr}
   1d21a:	460a      	mov	r2, r1
	if (!len) {
   1d21c:	2308      	movs	r3, #8
   1d21e:	6841      	ldr	r1, [r0, #4]
{
   1d220:	4604      	mov	r4, r0
   1d222:	f7ff ff9b 	bl	1d15c <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1d226:	2108      	movs	r1, #8
   1d228:	4602      	mov	r2, r0
   1d22a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d22c:	f7ff ff3c 	bl	1d0a8 <nvs_al_size.isra.0>
   1d230:	6863      	ldr	r3, [r4, #4]
   1d232:	1a1b      	subs	r3, r3, r0
   1d234:	6063      	str	r3, [r4, #4]
}
   1d236:	4610      	mov	r0, r2
   1d238:	bd10      	pop	{r4, pc}

0001d23a <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1d23a:	2300      	movs	r3, #0
   1d23c:	461a      	mov	r2, r3
   1d23e:	f7ee b8c5 	b.w	b3cc <nvs_write>

0001d242 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1d242:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1d244:	2400      	movs	r4, #0
   1d246:	9400      	str	r4, [sp, #0]
   1d248:	f7ee f98a 	bl	b560 <nvs_read_hist>
	return rc;
}
   1d24c:	b002      	add	sp, #8
   1d24e:	bd10      	pop	{r4, pc}

0001d250 <virtio_get_status>:
}
   1d250:	2004      	movs	r0, #4
   1d252:	4770      	bx	lr

0001d254 <virtio_get_features>:
}
   1d254:	2001      	movs	r0, #1
   1d256:	4770      	bx	lr

0001d258 <virtio_set_features>:
}
   1d258:	4770      	bx	lr

0001d25a <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1d25a:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1d25c:	21b4      	movs	r1, #180	; 0xb4
   1d25e:	2004      	movs	r0, #4
   1d260:	f7ff fab6 	bl	1c7d0 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1d264:	4604      	mov	r4, r0
   1d266:	b118      	cbz	r0, 1d270 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1d268:	22b4      	movs	r2, #180	; 0xb4
   1d26a:	2100      	movs	r1, #0
   1d26c:	f001 f877 	bl	1e35e <memset>
	}

	return vqs;
}
   1d270:	4620      	mov	r0, r4
   1d272:	bd10      	pop	{r4, pc}

0001d274 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1d274:	f003 bf69 	b.w	2114a <rpmsg_destroy_ept>

0001d278 <device_get_binding>:
   1d278:	f7fc bbf8 	b.w	19a6c <z_impl_device_get_binding>

0001d27c <get_sectors_cb>:
{
   1d27c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1d27e:	6802      	ldr	r2, [r0, #0]
   1d280:	684c      	ldr	r4, [r1, #4]
   1d282:	42a2      	cmp	r2, r4
   1d284:	d316      	bcc.n	1d2b4 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1d286:	688b      	ldr	r3, [r1, #8]
   1d288:	4423      	add	r3, r4
   1d28a:	429a      	cmp	r2, r3
   1d28c:	d206      	bcs.n	1d29c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1d28e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1d292:	42ab      	cmp	r3, r5
   1d294:	d304      	bcc.n	1d2a0 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1d296:	f06f 030b 	mvn.w	r3, #11
   1d29a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1d29c:	2000      	movs	r0, #0
   1d29e:	e00a      	b.n	1d2b6 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d2a0:	68cd      	ldr	r5, [r1, #12]
   1d2a2:	1b12      	subs	r2, r2, r4
   1d2a4:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1d2a8:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d2aa:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   1d2ae:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   1d2b0:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1d2b2:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1d2b4:	2001      	movs	r0, #1
}
   1d2b6:	bd70      	pop	{r4, r5, r6, pc}

0001d2b8 <settings_load>:
	return settings_load_subtree(NULL);
   1d2b8:	2000      	movs	r0, #0
   1d2ba:	f7ee bbfd 	b.w	bab8 <settings_load_subtree>

0001d2be <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1d2be:	2200      	movs	r2, #0
   1d2c0:	4611      	mov	r1, r2
   1d2c2:	f7ee bbbf 	b.w	ba44 <settings_save_one>

0001d2c6 <settings_name_steq>:
{
   1d2c6:	4603      	mov	r3, r0
   1d2c8:	b530      	push	{r4, r5, lr}
   1d2ca:	4608      	mov	r0, r1
	if (next) {
   1d2cc:	b10a      	cbz	r2, 1d2d2 <settings_name_steq+0xc>
		*next = NULL;
   1d2ce:	2100      	movs	r1, #0
   1d2d0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1d2d2:	b163      	cbz	r3, 1d2ee <settings_name_steq+0x28>
   1d2d4:	b190      	cbz	r0, 1d2fc <settings_name_steq+0x36>
   1d2d6:	1e41      	subs	r1, r0, #1
   1d2d8:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1d2da:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1d2de:	4604      	mov	r4, r0
   1d2e0:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d2e4:	b15d      	cbz	r5, 1d2fe <settings_name_steq+0x38>
   1d2e6:	429d      	cmp	r5, r3
   1d2e8:	d101      	bne.n	1d2ee <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1d2ea:	2d3d      	cmp	r5, #61	; 0x3d
   1d2ec:	d1f5      	bne.n	1d2da <settings_name_steq+0x14>
	return 0;
   1d2ee:	2000      	movs	r0, #0
   1d2f0:	e004      	b.n	1d2fc <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1d2f2:	2b3d      	cmp	r3, #61	; 0x3d
   1d2f4:	d008      	beq.n	1d308 <settings_name_steq+0x42>
   1d2f6:	fab3 f083 	clz	r0, r3
   1d2fa:	0940      	lsrs	r0, r0, #5
}
   1d2fc:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1d2fe:	2b2f      	cmp	r3, #47	; 0x2f
   1d300:	d1f7      	bne.n	1d2f2 <settings_name_steq+0x2c>
		if (next) {
   1d302:	b10a      	cbz	r2, 1d308 <settings_name_steq+0x42>
			*next = name + 1;
   1d304:	3401      	adds	r4, #1
   1d306:	6014      	str	r4, [r2, #0]
		return 1;
   1d308:	2001      	movs	r0, #1
   1d30a:	e7f7      	b.n	1d2fc <settings_name_steq+0x36>

0001d30c <settings_name_next>:
{
   1d30c:	4603      	mov	r3, r0
   1d30e:	b530      	push	{r4, r5, lr}
	if (next) {
   1d310:	b109      	cbz	r1, 1d316 <settings_name_next+0xa>
		*next = NULL;
   1d312:	2200      	movs	r2, #0
   1d314:	600a      	str	r2, [r1, #0]
	if (!name) {
   1d316:	b16b      	cbz	r3, 1d334 <settings_name_next+0x28>
   1d318:	461a      	mov	r2, r3
   1d31a:	4614      	mov	r4, r2
   1d31c:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1d31e:	f812 5b01 	ldrb.w	r5, [r2], #1
   1d322:	b135      	cbz	r5, 1d332 <settings_name_next+0x26>
   1d324:	2d3d      	cmp	r5, #61	; 0x3d
   1d326:	d004      	beq.n	1d332 <settings_name_next+0x26>
   1d328:	2d2f      	cmp	r5, #47	; 0x2f
   1d32a:	d1f6      	bne.n	1d31a <settings_name_next+0xe>
		if (next) {
   1d32c:	b109      	cbz	r1, 1d332 <settings_name_next+0x26>
			*next = name + 1;
   1d32e:	3401      	adds	r4, #1
   1d330:	600c      	str	r4, [r1, #0]
}
   1d332:	bd30      	pop	{r4, r5, pc}
		return 0;
   1d334:	4618      	mov	r0, r3
   1d336:	e7fc      	b.n	1d332 <settings_name_next+0x26>

0001d338 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d338:	4613      	mov	r3, r2
{
   1d33a:	b510      	push	{r4, lr}
   1d33c:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d33e:	460a      	mov	r2, r1
   1d340:	8881      	ldrh	r1, [r0, #4]
   1d342:	6800      	ldr	r0, [r0, #0]
   1d344:	f7ff ff7d 	bl	1d242 <nvs_read>
}
   1d348:	42a0      	cmp	r0, r4
   1d34a:	bfa8      	it	ge
   1d34c:	4620      	movge	r0, r4
   1d34e:	bd10      	pop	{r4, pc}

0001d350 <settings_nvs_save>:
{
   1d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d354:	b097      	sub	sp, #92	; 0x5c
   1d356:	4604      	mov	r4, r0
   1d358:	469b      	mov	fp, r3
	if (!name) {
   1d35a:	4689      	mov	r9, r1
{
   1d35c:	9201      	str	r2, [sp, #4]
	if (!name) {
   1d35e:	2900      	cmp	r1, #0
   1d360:	d069      	beq.n	1d436 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   1d362:	b1da      	cbz	r2, 1d39c <settings_nvs_save+0x4c>
   1d364:	fabb f78b 	clz	r7, fp
   1d368:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1d36a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d36c:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   1d370:	3501      	adds	r5, #1
   1d372:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1d374:	46a8      	mov	r8, r5
		name_id--;
   1d376:	1e6e      	subs	r6, r5, #1
   1d378:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1d37a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1d37e:	d02e      	beq.n	1d3de <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d380:	234a      	movs	r3, #74	; 0x4a
   1d382:	4631      	mov	r1, r6
   1d384:	4650      	mov	r0, sl
   1d386:	aa03      	add	r2, sp, #12
   1d388:	f7ff ff5b 	bl	1d242 <nvs_read>
		if (rc < 0) {
   1d38c:	2800      	cmp	r0, #0
   1d38e:	da07      	bge.n	1d3a0 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1d390:	f110 0f02 	cmn.w	r0, #2
   1d394:	bf08      	it	eq
   1d396:	46b0      	moveq	r8, r6
   1d398:	4635      	mov	r5, r6
   1d39a:	e7ec      	b.n	1d376 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1d39c:	2701      	movs	r7, #1
   1d39e:	e7e4      	b.n	1d36a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1d3a0:	ab16      	add	r3, sp, #88	; 0x58
   1d3a2:	4418      	add	r0, r3
   1d3a4:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   1d3a6:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   1d3a8:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1d3ac:	4648      	mov	r0, r9
   1d3ae:	f000 ff7d 	bl	1e2ac <strcmp>
   1d3b2:	2800      	cmp	r0, #0
   1d3b4:	d1f0      	bne.n	1d398 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1d3b6:	2f00      	cmp	r7, #0
   1d3b8:	d03b      	beq.n	1d432 <settings_nvs_save+0xe2>
   1d3ba:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d3bc:	42b3      	cmp	r3, r6
   1d3be:	d142      	bne.n	1d446 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   1d3c0:	4622      	mov	r2, r4
   1d3c2:	1e73      	subs	r3, r6, #1
   1d3c4:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1d3c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d3cc:	2302      	movs	r3, #2
   1d3ce:	4650      	mov	r0, sl
   1d3d0:	f7ed fffc 	bl	b3cc <nvs_write>
			if (rc < 0) {
   1d3d4:	2800      	cmp	r0, #0
   1d3d6:	da36      	bge.n	1d446 <settings_nvs_save+0xf6>
}
   1d3d8:	b017      	add	sp, #92	; 0x5c
   1d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1d3de:	bb6f      	cbnz	r7, 1d43c <settings_nvs_save+0xec>
	write_name = true;
   1d3e0:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1d3e2:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1d3e6:	d02b      	beq.n	1d440 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1d3e8:	f104 0508 	add.w	r5, r4, #8
   1d3ec:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1d3f0:	465b      	mov	r3, fp
   1d3f2:	4628      	mov	r0, r5
   1d3f4:	9a01      	ldr	r2, [sp, #4]
   1d3f6:	b289      	uxth	r1, r1
   1d3f8:	f7ed ffe8 	bl	b3cc <nvs_write>
	if (rc < 0) {
   1d3fc:	2800      	cmp	r0, #0
   1d3fe:	dbeb      	blt.n	1d3d8 <settings_nvs_save+0x88>
	if (write_name) {
   1d400:	b157      	cbz	r7, 1d418 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1d402:	4648      	mov	r0, r9
   1d404:	f000 ff42 	bl	1e28c <strlen>
   1d408:	464a      	mov	r2, r9
   1d40a:	4603      	mov	r3, r0
   1d40c:	4641      	mov	r1, r8
   1d40e:	4628      	mov	r0, r5
   1d410:	f7ed ffdc 	bl	b3cc <nvs_write>
		if (rc < 0) {
   1d414:	2800      	cmp	r0, #0
   1d416:	dbdf      	blt.n	1d3d8 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1d418:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d41a:	4543      	cmp	r3, r8
   1d41c:	d220      	bcs.n	1d460 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   1d41e:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d420:	2302      	movs	r3, #2
   1d422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d426:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   1d428:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d42c:	f7ed ffce 	bl	b3cc <nvs_write>
   1d430:	e016      	b.n	1d460 <settings_nvs_save+0x110>
   1d432:	46b0      	mov	r8, r6
   1d434:	e7d5      	b.n	1d3e2 <settings_nvs_save+0x92>
		return -EINVAL;
   1d436:	f06f 0015 	mvn.w	r0, #21
   1d43a:	e7cd      	b.n	1d3d8 <settings_nvs_save+0x88>
		return 0;
   1d43c:	2000      	movs	r0, #0
   1d43e:	e7cb      	b.n	1d3d8 <settings_nvs_save+0x88>
		return -ENOMEM;
   1d440:	f06f 000b 	mvn.w	r0, #11
   1d444:	e7c8      	b.n	1d3d8 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1d446:	4631      	mov	r1, r6
   1d448:	4650      	mov	r0, sl
   1d44a:	f7ff fef6 	bl	1d23a <nvs_delete>
			if (rc >= 0) {
   1d44e:	2800      	cmp	r0, #0
   1d450:	dbc2      	blt.n	1d3d8 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1d452:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1d456:	313f      	adds	r1, #63	; 0x3f
   1d458:	4650      	mov	r0, sl
   1d45a:	b289      	uxth	r1, r1
   1d45c:	f7ff feed 	bl	1d23a <nvs_delete>
	if (rc < 0) {
   1d460:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1d464:	e7b8      	b.n	1d3d8 <settings_nvs_save+0x88>

0001d466 <settings_nvs_backend_init>:
{
   1d466:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d468:	f100 0608 	add.w	r6, r0, #8
   1d46c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1d46e:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d470:	4630      	mov	r0, r6
   1d472:	f7ed fe6f 	bl	b154 <nvs_init>
	if (rc) {
   1d476:	4605      	mov	r5, r0
   1d478:	b970      	cbnz	r0, 1d498 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1d47a:	2302      	movs	r3, #2
   1d47c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d480:	4630      	mov	r0, r6
   1d482:	f10d 0206 	add.w	r2, sp, #6
   1d486:	f7ff fedc 	bl	1d242 <nvs_read>
	if (rc < 0) {
   1d48a:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   1d48c:	bfb4      	ite	lt
   1d48e:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1d492:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   1d496:	8723      	strh	r3, [r4, #56]	; 0x38
}
   1d498:	4628      	mov	r0, r5
   1d49a:	b002      	add	sp, #8
   1d49c:	bd70      	pop	{r4, r5, r6, pc}

0001d49e <set_on_state>:
	__asm__ volatile(
   1d49e:	f04f 0320 	mov.w	r3, #32
   1d4a2:	f3ef 8211 	mrs	r2, BASEPRI
   1d4a6:	f383 8811 	msr	BASEPRI, r3
   1d4aa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d4ae:	6803      	ldr	r3, [r0, #0]
   1d4b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d4b4:	f043 0302 	orr.w	r3, r3, #2
   1d4b8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d4ba:	f382 8811 	msr	BASEPRI, r2
   1d4be:	f3bf 8f6f 	isb	sy
}
   1d4c2:	4770      	bx	lr

0001d4c4 <async_start>:
{
   1d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4c6:	9f06      	ldr	r7, [sp, #24]
   1d4c8:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1d4ca:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1d4cc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d4ce:	f04f 0020 	mov.w	r0, #32
   1d4d2:	f3ef 8c11 	mrs	ip, BASEPRI
   1d4d6:	f380 8811 	msr	BASEPRI, r0
   1d4da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d4de:	260c      	movs	r6, #12
   1d4e0:	fb06 4601 	mla	r6, r6, r1, r4
   1d4e4:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d4e8:	f000 0e07 	and.w	lr, r0, #7
   1d4ec:	f1be 0f01 	cmp.w	lr, #1
   1d4f0:	d111      	bne.n	1d516 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d4f2:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1d4f6:	2600      	movs	r6, #0
	__asm__ volatile(
   1d4f8:	f38c 8811 	msr	BASEPRI, ip
   1d4fc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d500:	b93e      	cbnz	r6, 1d512 <async_start+0x4e>
	subdata->cb = cb;
   1d502:	200c      	movs	r0, #12
   1d504:	4341      	muls	r1, r0
   1d506:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1d508:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1d50c:	686b      	ldr	r3, [r5, #4]
   1d50e:	585b      	ldr	r3, [r3, r1]
   1d510:	4798      	blx	r3
}
   1d512:	4630      	mov	r0, r6
   1d514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d516:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1d51a:	4287      	cmp	r7, r0
   1d51c:	bf14      	ite	ne
   1d51e:	f04f 36ff 	movne.w	r6, #4294967295
   1d522:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1d526:	e7e7      	b.n	1d4f8 <async_start+0x34>

0001d528 <api_start>:
{
   1d528:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d52a:	2480      	movs	r4, #128	; 0x80
   1d52c:	9400      	str	r4, [sp, #0]
   1d52e:	f7ff ffc9 	bl	1d4c4 <async_start>
}
   1d532:	b002      	add	sp, #8
   1d534:	bd10      	pop	{r4, pc}

0001d536 <onoff_started_callback>:
	return &data->mgr[type];
   1d536:	68c0      	ldr	r0, [r0, #12]
   1d538:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d53a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1d53e:	2100      	movs	r1, #0
   1d540:	4710      	bx	r2

0001d542 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d542:	2003      	movs	r0, #3
   1d544:	f7fb bbe2 	b.w	18d0c <nrfx_clock_start>

0001d548 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d548:	2002      	movs	r0, #2
   1d54a:	f7fb bbdf 	b.w	18d0c <nrfx_clock_start>

0001d54e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d54e:	2000      	movs	r0, #0
   1d550:	f7fb bbdc 	b.w	18d0c <nrfx_clock_start>

0001d554 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d554:	2003      	movs	r0, #3
   1d556:	f7fb bc43 	b.w	18de0 <nrfx_clock_stop>

0001d55a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d55a:	2002      	movs	r0, #2
   1d55c:	f7fb bc40 	b.w	18de0 <nrfx_clock_stop>

0001d560 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d560:	2000      	movs	r0, #0
   1d562:	f7fb bc3d 	b.w	18de0 <nrfx_clock_stop>

0001d566 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d566:	2280      	movs	r2, #128	; 0x80
   1d568:	f7ee bd16 	b.w	bf98 <stop>

0001d56c <blocking_start_callback>:
{
   1d56c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d56e:	f7fe b853 	b.w	1b618 <z_impl_k_sem_give>

0001d572 <bt_rpmsg_open>:
{
   1d572:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1d574:	f7ef f810 	bl	c598 <bt_rpmsg_platform_endpoint_is_bound>
   1d578:	b108      	cbz	r0, 1d57e <bt_rpmsg_open+0xc>
}
   1d57a:	2000      	movs	r0, #0
   1d57c:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1d57e:	2100      	movs	r1, #0
   1d580:	2021      	movs	r0, #33	; 0x21
   1d582:	f7fe f813 	bl	1b5ac <z_impl_k_sleep>
   1d586:	e7f5      	b.n	1d574 <bt_rpmsg_open+0x2>

0001d588 <endpoint_cb>:
{
   1d588:	b508      	push	{r3, lr}
   1d58a:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1d58c:	4611      	mov	r1, r2
   1d58e:	f7ee ff19 	bl	c3c4 <bt_rpmsg_rx>
}
   1d592:	2000      	movs	r0, #0
   1d594:	bd08      	pop	{r3, pc}

0001d596 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d596:	4770      	bx	lr

0001d598 <attr_find_by_handle>:
{
   1d598:	b570      	push	{r4, r5, r6, lr}
   1d59a:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1d59c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1d5a0:	b1a8      	cbz	r0, 1d5ce <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1d5a2:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1d5a4:	3801      	subs	r0, #1
	while (upper >= lower) {
   1d5a6:	4286      	cmp	r6, r0
   1d5a8:	dd01      	ble.n	1d5ae <attr_find_by_handle+0x16>
		return NULL;
   1d5aa:	2000      	movs	r0, #0
   1d5ac:	e00f      	b.n	1d5ce <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1d5ae:	1832      	adds	r2, r6, r0
   1d5b0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1d5b4:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1d5b6:	1cd5      	adds	r5, r2, #3
   1d5b8:	00eb      	lsls	r3, r5, #3
   1d5ba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1d5be:	892d      	ldrh	r5, [r5, #8]
   1d5c0:	428d      	cmp	r5, r1
   1d5c2:	d201      	bcs.n	1d5c8 <attr_find_by_handle+0x30>
			lower = m + 1;
   1d5c4:	1c56      	adds	r6, r2, #1
   1d5c6:	e7ee      	b.n	1d5a6 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1d5c8:	d802      	bhi.n	1d5d0 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1d5ca:	3304      	adds	r3, #4
   1d5cc:	18e0      	adds	r0, r4, r3
}
   1d5ce:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1d5d0:	1e50      	subs	r0, r2, #1
   1d5d2:	e7e8      	b.n	1d5a6 <attr_find_by_handle+0xe>

0001d5d4 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1d5d4:	2300      	movs	r3, #0
{
   1d5d6:	b510      	push	{r4, lr}
   1d5d8:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1d5da:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1d5de:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1d5e2:	b910      	cbnz	r0, 1d5ea <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1d5e4:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1d5e8:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d5ea:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1d5ee:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d5f0:	4290      	cmp	r0, r2
	list->head = node;
   1d5f2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1d5f6:	bf08      	it	eq
   1d5f8:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1d5fc:	f004 f84f 	bl	2169e <k_free>
   1d600:	e7ed      	b.n	1d5de <svc_attr_memory_release+0xa>

0001d602 <atomic_and>:
{
   1d602:	4603      	mov	r3, r0
}
   1d604:	e8d3 0fef 	ldaex	r0, [r3]
   1d608:	ea00 0201 	and.w	r2, r0, r1
   1d60c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d610:	f1bc 0f00 	cmp.w	ip, #0
   1d614:	d1f6      	bne.n	1d604 <atomic_and+0x2>
   1d616:	4770      	bx	lr

0001d618 <discovery_complete_not_found>:
{
   1d618:	b510      	push	{r4, lr}
   1d61a:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1d61c:	f7ff ffda 	bl	1d5d4 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d620:	f06f 0101 	mvn.w	r1, #1
   1d624:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1d628:	f7ff ffeb 	bl	1d602 <atomic_and>
	if (dm->callback->service_not_found) {
   1d62c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1d630:	685b      	ldr	r3, [r3, #4]
   1d632:	b123      	cbz	r3, 1d63e <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1d634:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1d638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1d63c:	4718      	bx	r3
}
   1d63e:	bd10      	pop	{r4, pc}

0001d640 <bt_gatt_dm_attr_service_val>:
{
   1d640:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d642:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d646:	2400      	movs	r4, #0
{
   1d648:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d64a:	6801      	ldr	r1, [r0, #0]
   1d64c:	4668      	mov	r0, sp
   1d64e:	f88d 4000 	strb.w	r4, [sp]
   1d652:	f8ad 3002 	strh.w	r3, [sp, #2]
   1d656:	f000 fef2 	bl	1e43e <bt_uuid_cmp>
   1d65a:	b918      	cbnz	r0, 1d664 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1d65c:	6828      	ldr	r0, [r5, #0]
   1d65e:	3808      	subs	r0, #8
}
   1d660:	b003      	add	sp, #12
   1d662:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1d664:	f642 0301 	movw	r3, #10241	; 0x2801
   1d668:	6829      	ldr	r1, [r5, #0]
   1d66a:	a801      	add	r0, sp, #4
   1d66c:	f88d 4004 	strb.w	r4, [sp, #4]
   1d670:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d674:	f000 fee3 	bl	1e43e <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d678:	2800      	cmp	r0, #0
   1d67a:	d0ef      	beq.n	1d65c <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1d67c:	4620      	mov	r0, r4
   1d67e:	e7ef      	b.n	1d660 <bt_gatt_dm_attr_service_val+0x20>

0001d680 <bt_gatt_dm_attr_chrc_val>:
{
   1d680:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1d682:	f642 0303 	movw	r3, #10243	; 0x2803
   1d686:	2400      	movs	r4, #0
{
   1d688:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1d68a:	6801      	ldr	r1, [r0, #0]
   1d68c:	a801      	add	r0, sp, #4
   1d68e:	f88d 4004 	strb.w	r4, [sp, #4]
   1d692:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d696:	f000 fed2 	bl	1e43e <bt_uuid_cmp>
   1d69a:	b918      	cbnz	r0, 1d6a4 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1d69c:	6828      	ldr	r0, [r5, #0]
   1d69e:	3808      	subs	r0, #8
}
   1d6a0:	b003      	add	sp, #12
   1d6a2:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1d6a4:	4620      	mov	r0, r4
   1d6a6:	e7fb      	b.n	1d6a0 <bt_gatt_dm_attr_chrc_val+0x20>

0001d6a8 <bt_gatt_dm_conn_get>:
}
   1d6a8:	6800      	ldr	r0, [r0, #0]
   1d6aa:	4770      	bx	lr

0001d6ac <bt_gatt_dm_char_next>:
{
   1d6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1d6ae:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1d6b2:	b131      	cbz	r1, 1d6c2 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1d6b4:	42a9      	cmp	r1, r5
   1d6b6:	d203      	bcs.n	1d6c0 <bt_gatt_dm_char_next+0x14>
	return NULL;
   1d6b8:	2500      	movs	r5, #0
}
   1d6ba:	4628      	mov	r0, r5
   1d6bc:	b003      	add	sp, #12
   1d6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d6c0:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1d6c2:	2600      	movs	r6, #0
   1d6c4:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1d6c8:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1d6cc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1d6d0:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1d6d4:	3508      	adds	r5, #8
   1d6d6:	42ac      	cmp	r4, r5
   1d6d8:	d9ee      	bls.n	1d6b8 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1d6da:	6829      	ldr	r1, [r5, #0]
   1d6dc:	a801      	add	r0, sp, #4
   1d6de:	f88d 6004 	strb.w	r6, [sp, #4]
   1d6e2:	f8ad 7006 	strh.w	r7, [sp, #6]
   1d6e6:	f000 feaa 	bl	1e43e <bt_uuid_cmp>
   1d6ea:	2800      	cmp	r0, #0
   1d6ec:	d1f2      	bne.n	1d6d4 <bt_gatt_dm_char_next+0x28>
   1d6ee:	e7e4      	b.n	1d6ba <bt_gatt_dm_char_next+0xe>

0001d6f0 <bt_gatt_dm_attr_next>:
{
   1d6f0:	4602      	mov	r2, r0
		prev = dm->attrs;
   1d6f2:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1d6f6:	b111      	cbz	r1, 1d6fe <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1d6f8:	4299      	cmp	r1, r3
   1d6fa:	d30b      	bcc.n	1d714 <bt_gatt_dm_attr_next+0x24>
   1d6fc:	460b      	mov	r3, r1
		if (++prev < end) {
   1d6fe:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1d702:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1d706:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d70a:	321c      	adds	r2, #28
	return NULL;
   1d70c:	4290      	cmp	r0, r2
   1d70e:	bf28      	it	cs
   1d710:	2000      	movcs	r0, #0
   1d712:	4770      	bx	lr
   1d714:	2000      	movs	r0, #0
}
   1d716:	4770      	bx	lr

0001d718 <bt_gatt_dm_desc_next>:
{
   1d718:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1d71a:	f7ff ffe9 	bl	1d6f0 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1d71e:	4604      	mov	r4, r0
   1d720:	b158      	cbz	r0, 1d73a <bt_gatt_dm_desc_next+0x22>
   1d722:	2300      	movs	r3, #0
   1d724:	f88d 3004 	strb.w	r3, [sp, #4]
   1d728:	f642 0303 	movw	r3, #10243	; 0x2803
   1d72c:	6801      	ldr	r1, [r0, #0]
   1d72e:	a801      	add	r0, sp, #4
   1d730:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d734:	f000 fe83 	bl	1e43e <bt_uuid_cmp>
   1d738:	b900      	cbnz	r0, 1d73c <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1d73a:	2400      	movs	r4, #0
}
   1d73c:	4620      	mov	r0, r4
   1d73e:	b002      	add	sp, #8
   1d740:	bd10      	pop	{r4, pc}

0001d742 <bt_gatt_dm_desc_by_uuid>:
{
   1d742:	b570      	push	{r4, r5, r6, lr}
   1d744:	4605      	mov	r5, r0
   1d746:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1d748:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1d74a:	4621      	mov	r1, r4
   1d74c:	4628      	mov	r0, r5
   1d74e:	f7ff ffe3 	bl	1d718 <bt_gatt_dm_desc_next>
   1d752:	4604      	mov	r4, r0
   1d754:	b128      	cbz	r0, 1d762 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1d756:	4630      	mov	r0, r6
   1d758:	6821      	ldr	r1, [r4, #0]
   1d75a:	f000 fe70 	bl	1e43e <bt_uuid_cmp>
   1d75e:	2800      	cmp	r0, #0
   1d760:	d1f3      	bne.n	1d74a <bt_gatt_dm_desc_by_uuid+0x8>
}
   1d762:	4620      	mov	r0, r4
   1d764:	bd70      	pop	{r4, r5, r6, pc}

0001d766 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1d766:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1d768:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1d76c:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d76e:	f06f 0102 	mvn.w	r1, #2
   1d772:	4628      	mov	r0, r5
   1d774:	f7ff ff45 	bl	1d602 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1d778:	0783      	lsls	r3, r0, #30
   1d77a:	d509      	bpl.n	1d790 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1d77c:	4620      	mov	r0, r4
   1d77e:	f7ff ff29 	bl	1d5d4 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d782:	f06f 0101 	mvn.w	r1, #1
   1d786:	4628      	mov	r0, r5
   1d788:	f7ff ff3b 	bl	1d602 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1d78c:	2000      	movs	r0, #0
}
   1d78e:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1d790:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d794:	e7fb      	b.n	1d78e <bt_gatt_dm_data_release+0x28>

0001d796 <bt_scan_stop>:
	return bt_le_scan_stop();
   1d796:	f7f3 bac1 	b.w	10d1c <bt_le_scan_stop>

0001d79a <spm_request_read>:
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   1d79a:	b510      	push	{r4, lr}
   1d79c:	b40f      	push	{r0, r1, r2, r3}
   1d79e:	f7fc ffdb 	bl	1a758 <k_sched_lock>
   1d7a2:	bc0f      	pop	{r0, r1, r2, r3}
   1d7a4:	f7ea fc20 	bl	7fe8 <spm_request_read_nse>
   1d7a8:	b40f      	push	{r0, r1, r2, r3}
   1d7aa:	f7fd f8cd 	bl	1a948 <k_sched_unlock>
   1d7ae:	bc0f      	pop	{r0, r1, r2, r3}
   1d7b0:	bd10      	pop	{r4, pc}

0001d7b2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1d7b2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1d7b4:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1d7b6:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1d7b8:	bf9c      	itt	ls
   1d7ba:	6880      	ldrls	r0, [r0, #8]
   1d7bc:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1d7be:	3b01      	subs	r3, #1
   1d7c0:	1a98      	subs	r0, r3, r2
}
   1d7c2:	4770      	bx	lr

0001d7c4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1d7c8:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d7cc:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1d7ce:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1d7d2:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1d7d4:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1d7d6:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d7d8:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1d7da:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1d7dc:	d904      	bls.n	1d7e8 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1d7de:	f000 fd93 	bl	1e308 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1d7e2:	60ec      	str	r4, [r5, #12]
}
   1d7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1d7e8:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1d7ea:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1d7ee:	f000 fd8b 	bl	1e308 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1d7f2:	4622      	mov	r2, r4
   1d7f4:	6868      	ldr	r0, [r5, #4]
   1d7f6:	eb07 0108 	add.w	r1, r7, r8
   1d7fa:	e7f0      	b.n	1d7de <_WriteNoCheck+0x1a>

0001d7fc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1d7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d800:	4606      	mov	r6, r0
   1d802:	4689      	mov	r9, r1
   1d804:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1d806:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1d80a:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1d80c:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d80e:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1d810:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d812:	bf28      	it	cs
   1d814:	18e4      	addcs	r4, r4, r3
   1d816:	3c01      	subs	r4, #1
   1d818:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1d81a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1d81c:	42bc      	cmp	r4, r7
   1d81e:	bf28      	it	cs
   1d820:	463c      	movcs	r4, r7
   1d822:	4294      	cmp	r4, r2
   1d824:	bf28      	it	cs
   1d826:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1d828:	6870      	ldr	r0, [r6, #4]
   1d82a:	4649      	mov	r1, r9
   1d82c:	4428      	add	r0, r5
   1d82e:	4622      	mov	r2, r4
   1d830:	f000 fd6a 	bl	1e308 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1d834:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1d836:	4425      	add	r5, r4
      WrOff = 0u;
   1d838:	42ab      	cmp	r3, r5
   1d83a:	bf08      	it	eq
   1d83c:	2500      	moveq	r5, #0
  } while (NumBytes);
   1d83e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1d840:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1d842:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1d844:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1d846:	d1e1      	bne.n	1d80c <_WriteBlocking+0x10>
}
   1d848:	4640      	mov	r0, r8
   1d84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d84e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1d84e:	f7ef bdbd 	b.w	d3cc <_DoInit>

0001d852 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1d852:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1d854:	f7ff fffb 	bl	1d84e <SEGGER_RTT_Init>

	return 0;
}
   1d858:	2000      	movs	r0, #0
   1d85a:	bd08      	pop	{r3, pc}

0001d85c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d85c:	b538      	push	{r3, r4, r5, lr}
   1d85e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d860:	42ab      	cmp	r3, r5
{
   1d862:	4611      	mov	r1, r2
   1d864:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d866:	d804      	bhi.n	1d872 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d868:	461a      	mov	r2, r3
   1d86a:	f000 fd4d 	bl	1e308 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d86e:	4620      	mov	r0, r4
   1d870:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d872:	2400      	movs	r4, #0
   1d874:	e7fb      	b.n	1d86e <_copy+0x12>

0001d876 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d876:	f000 bd72 	b.w	1e35e <memset>

0001d87a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d87a:	09c3      	lsrs	r3, r0, #7
   1d87c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d880:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d884:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d888:	b2c0      	uxtb	r0, r0
   1d88a:	4770      	bx	lr

0001d88c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d88c:	78cb      	ldrb	r3, [r1, #3]
   1d88e:	7802      	ldrb	r2, [r0, #0]
   1d890:	4053      	eors	r3, r2
   1d892:	7003      	strb	r3, [r0, #0]
   1d894:	884b      	ldrh	r3, [r1, #2]
   1d896:	7842      	ldrb	r2, [r0, #1]
   1d898:	4053      	eors	r3, r2
   1d89a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d89c:	680a      	ldr	r2, [r1, #0]
   1d89e:	7883      	ldrb	r3, [r0, #2]
   1d8a0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d8a4:	7083      	strb	r3, [r0, #2]
   1d8a6:	680a      	ldr	r2, [r1, #0]
   1d8a8:	78c3      	ldrb	r3, [r0, #3]
   1d8aa:	4053      	eors	r3, r2
   1d8ac:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d8ae:	79cb      	ldrb	r3, [r1, #7]
   1d8b0:	7902      	ldrb	r2, [r0, #4]
   1d8b2:	4053      	eors	r3, r2
   1d8b4:	7103      	strb	r3, [r0, #4]
   1d8b6:	88cb      	ldrh	r3, [r1, #6]
   1d8b8:	7942      	ldrb	r2, [r0, #5]
   1d8ba:	4053      	eors	r3, r2
   1d8bc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d8be:	684a      	ldr	r2, [r1, #4]
   1d8c0:	7983      	ldrb	r3, [r0, #6]
   1d8c2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d8c6:	7183      	strb	r3, [r0, #6]
   1d8c8:	684a      	ldr	r2, [r1, #4]
   1d8ca:	79c3      	ldrb	r3, [r0, #7]
   1d8cc:	4053      	eors	r3, r2
   1d8ce:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d8d0:	7acb      	ldrb	r3, [r1, #11]
   1d8d2:	7a02      	ldrb	r2, [r0, #8]
   1d8d4:	4053      	eors	r3, r2
   1d8d6:	7203      	strb	r3, [r0, #8]
   1d8d8:	7a42      	ldrb	r2, [r0, #9]
   1d8da:	894b      	ldrh	r3, [r1, #10]
   1d8dc:	4053      	eors	r3, r2
   1d8de:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d8e0:	688a      	ldr	r2, [r1, #8]
   1d8e2:	7a83      	ldrb	r3, [r0, #10]
   1d8e4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d8e8:	7283      	strb	r3, [r0, #10]
   1d8ea:	688a      	ldr	r2, [r1, #8]
   1d8ec:	7ac3      	ldrb	r3, [r0, #11]
   1d8ee:	4053      	eors	r3, r2
   1d8f0:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d8f2:	7bcb      	ldrb	r3, [r1, #15]
   1d8f4:	7b02      	ldrb	r2, [r0, #12]
   1d8f6:	4053      	eors	r3, r2
   1d8f8:	7303      	strb	r3, [r0, #12]
   1d8fa:	89cb      	ldrh	r3, [r1, #14]
   1d8fc:	7b42      	ldrb	r2, [r0, #13]
   1d8fe:	4053      	eors	r3, r2
   1d900:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d902:	68ca      	ldr	r2, [r1, #12]
   1d904:	7b83      	ldrb	r3, [r0, #14]
   1d906:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d90a:	7383      	strb	r3, [r0, #14]
   1d90c:	68ca      	ldr	r2, [r1, #12]
   1d90e:	7bc3      	ldrb	r3, [r0, #15]
   1d910:	4053      	eors	r3, r2
   1d912:	73c3      	strb	r3, [r0, #15]
}
   1d914:	4770      	bx	lr

0001d916 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1d916:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d918:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d91a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d91c:	f88d 2000 	strb.w	r2, [sp]
   1d920:	7942      	ldrb	r2, [r0, #5]
   1d922:	f88d 2001 	strb.w	r2, [sp, #1]
   1d926:	7a82      	ldrb	r2, [r0, #10]
   1d928:	f88d 2002 	strb.w	r2, [sp, #2]
   1d92c:	7bc2      	ldrb	r2, [r0, #15]
   1d92e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d932:	7902      	ldrb	r2, [r0, #4]
   1d934:	f88d 2004 	strb.w	r2, [sp, #4]
   1d938:	7a42      	ldrb	r2, [r0, #9]
   1d93a:	f88d 2005 	strb.w	r2, [sp, #5]
   1d93e:	7b82      	ldrb	r2, [r0, #14]
   1d940:	f88d 2006 	strb.w	r2, [sp, #6]
   1d944:	78c2      	ldrb	r2, [r0, #3]
   1d946:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d94a:	7a02      	ldrb	r2, [r0, #8]
   1d94c:	f88d 2008 	strb.w	r2, [sp, #8]
   1d950:	7b42      	ldrb	r2, [r0, #13]
   1d952:	f88d 2009 	strb.w	r2, [sp, #9]
   1d956:	7882      	ldrb	r2, [r0, #2]
   1d958:	f88d 200a 	strb.w	r2, [sp, #10]
   1d95c:	79c2      	ldrb	r2, [r0, #7]
   1d95e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d962:	7b02      	ldrb	r2, [r0, #12]
   1d964:	f88d 200c 	strb.w	r2, [sp, #12]
   1d968:	7842      	ldrb	r2, [r0, #1]
   1d96a:	f88d 200d 	strb.w	r2, [sp, #13]
   1d96e:	7982      	ldrb	r2, [r0, #6]
   1d970:	f88d 200e 	strb.w	r2, [sp, #14]
   1d974:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d978:	2310      	movs	r3, #16
   1d97a:	466a      	mov	r2, sp
   1d97c:	4619      	mov	r1, r3
   1d97e:	f7ff ff6d 	bl	1d85c <_copy>
}
   1d982:	b005      	add	sp, #20
   1d984:	f85d fb04 	ldr.w	pc, [sp], #4

0001d988 <mult_row_column>:
{
   1d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d98a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d98c:	7808      	ldrb	r0, [r1, #0]
{
   1d98e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d990:	f7ff ff73 	bl	1d87a <_double_byte>
   1d994:	4605      	mov	r5, r0
   1d996:	7860      	ldrb	r0, [r4, #1]
   1d998:	f7ff ff6f 	bl	1d87a <_double_byte>
   1d99c:	78a2      	ldrb	r2, [r4, #2]
   1d99e:	7863      	ldrb	r3, [r4, #1]
   1d9a0:	4053      	eors	r3, r2
   1d9a2:	78e2      	ldrb	r2, [r4, #3]
   1d9a4:	4053      	eors	r3, r2
   1d9a6:	405d      	eors	r5, r3
   1d9a8:	4045      	eors	r5, r0
   1d9aa:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d9ac:	7860      	ldrb	r0, [r4, #1]
   1d9ae:	7827      	ldrb	r7, [r4, #0]
   1d9b0:	f7ff ff63 	bl	1d87a <_double_byte>
   1d9b4:	4605      	mov	r5, r0
   1d9b6:	78a0      	ldrb	r0, [r4, #2]
   1d9b8:	f7ff ff5f 	bl	1d87a <_double_byte>
   1d9bc:	78a3      	ldrb	r3, [r4, #2]
   1d9be:	405f      	eors	r7, r3
   1d9c0:	78e3      	ldrb	r3, [r4, #3]
   1d9c2:	405f      	eors	r7, r3
   1d9c4:	407d      	eors	r5, r7
   1d9c6:	4045      	eors	r5, r0
   1d9c8:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d9ca:	78a0      	ldrb	r0, [r4, #2]
   1d9cc:	7865      	ldrb	r5, [r4, #1]
   1d9ce:	7827      	ldrb	r7, [r4, #0]
   1d9d0:	f7ff ff53 	bl	1d87a <_double_byte>
   1d9d4:	406f      	eors	r7, r5
   1d9d6:	4605      	mov	r5, r0
   1d9d8:	78e0      	ldrb	r0, [r4, #3]
   1d9da:	f7ff ff4e 	bl	1d87a <_double_byte>
   1d9de:	78e3      	ldrb	r3, [r4, #3]
   1d9e0:	405f      	eors	r7, r3
   1d9e2:	407d      	eors	r5, r7
   1d9e4:	4045      	eors	r5, r0
   1d9e6:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d9e8:	7820      	ldrb	r0, [r4, #0]
   1d9ea:	f7ff ff46 	bl	1d87a <_double_byte>
   1d9ee:	7863      	ldrb	r3, [r4, #1]
   1d9f0:	7825      	ldrb	r5, [r4, #0]
   1d9f2:	405d      	eors	r5, r3
   1d9f4:	78a3      	ldrb	r3, [r4, #2]
   1d9f6:	405d      	eors	r5, r3
   1d9f8:	4045      	eors	r5, r0
   1d9fa:	78e0      	ldrb	r0, [r4, #3]
   1d9fc:	f7ff ff3d 	bl	1d87a <_double_byte>
   1da00:	b2ed      	uxtb	r5, r5
   1da02:	4045      	eors	r5, r0
   1da04:	70f5      	strb	r5, [r6, #3]
}
   1da06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001da08 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1da08:	b570      	push	{r4, r5, r6, lr}
   1da0a:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1da0c:	4605      	mov	r5, r0
{
   1da0e:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1da10:	2800      	cmp	r0, #0
   1da12:	d049      	beq.n	1daa8 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1da14:	2900      	cmp	r1, #0
   1da16:	d049      	beq.n	1daac <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1da18:	2a00      	cmp	r2, #0
   1da1a:	d049      	beq.n	1dab0 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1da1c:	2310      	movs	r3, #16
   1da1e:	460a      	mov	r2, r1
   1da20:	4668      	mov	r0, sp
   1da22:	4619      	mov	r1, r3
   1da24:	f7ff ff1a 	bl	1d85c <_copy>
	add_round_key(state, s->words);
   1da28:	4621      	mov	r1, r4
   1da2a:	4668      	mov	r0, sp
   1da2c:	f7ff ff2e 	bl	1d88c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1da30:	3410      	adds	r4, #16
   1da32:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1da36:	4668      	mov	r0, sp
   1da38:	f7ef fd28 	bl	d48c <sub_bytes>
		shift_rows(state);
   1da3c:	4668      	mov	r0, sp
   1da3e:	f7ff ff6a 	bl	1d916 <shift_rows>
	mult_row_column(t, s);
   1da42:	4669      	mov	r1, sp
   1da44:	a804      	add	r0, sp, #16
   1da46:	f7ff ff9f 	bl	1d988 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1da4a:	a901      	add	r1, sp, #4
   1da4c:	a805      	add	r0, sp, #20
   1da4e:	f7ff ff9b 	bl	1d988 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1da52:	a902      	add	r1, sp, #8
   1da54:	a806      	add	r0, sp, #24
   1da56:	f7ff ff97 	bl	1d988 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1da5a:	a903      	add	r1, sp, #12
   1da5c:	a807      	add	r0, sp, #28
   1da5e:	f7ff ff93 	bl	1d988 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1da62:	2310      	movs	r3, #16
   1da64:	4668      	mov	r0, sp
   1da66:	4619      	mov	r1, r3
   1da68:	eb0d 0203 	add.w	r2, sp, r3
   1da6c:	f7ff fef6 	bl	1d85c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1da70:	4621      	mov	r1, r4
   1da72:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1da74:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1da76:	f7ff ff09 	bl	1d88c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1da7a:	42a6      	cmp	r6, r4
   1da7c:	d1db      	bne.n	1da36 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1da7e:	f7ef fd05 	bl	d48c <sub_bytes>
	shift_rows(state);
   1da82:	4668      	mov	r0, sp
   1da84:	f7ff ff47 	bl	1d916 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1da88:	4631      	mov	r1, r6
   1da8a:	4668      	mov	r0, sp
   1da8c:	f7ff fefe 	bl	1d88c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1da90:	2310      	movs	r3, #16
   1da92:	466a      	mov	r2, sp
   1da94:	4619      	mov	r1, r3
   1da96:	4628      	mov	r0, r5
   1da98:	f7ff fee0 	bl	1d85c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1da9c:	4668      	mov	r0, sp
   1da9e:	2210      	movs	r2, #16
   1daa0:	2100      	movs	r1, #0
   1daa2:	f7ff fee8 	bl	1d876 <_set>

	return TC_CRYPTO_SUCCESS;
   1daa6:	2001      	movs	r0, #1
}
   1daa8:	b008      	add	sp, #32
   1daaa:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1daac:	4608      	mov	r0, r1
   1daae:	e7fb      	b.n	1daa8 <tc_aes_encrypt+0xa0>
   1dab0:	4610      	mov	r0, r2
   1dab2:	e7f9      	b.n	1daa8 <tc_aes_encrypt+0xa0>

0001dab4 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dab4:	460a      	mov	r2, r1
{
   1dab6:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dab8:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1dabc:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dabe:	2b00      	cmp	r3, #0
   1dac0:	bfb4      	ite	lt
   1dac2:	2387      	movlt	r3, #135	; 0x87
   1dac4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1dac6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1daca:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1dace:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1dad0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1dad4:	d002      	beq.n	1dadc <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1dad6:	7813      	ldrb	r3, [r2, #0]
   1dad8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1dada:	e7f4      	b.n	1dac6 <gf_double+0x12>
	}
}
   1dadc:	bd10      	pop	{r4, pc}

0001dade <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1dade:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1dae0:	b120      	cbz	r0, 1daec <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1dae2:	2258      	movs	r2, #88	; 0x58
   1dae4:	2100      	movs	r1, #0
   1dae6:	f7ff fec6 	bl	1d876 <_set>
   1daea:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1daec:	bd08      	pop	{r3, pc}

0001daee <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1daee:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1daf0:	4604      	mov	r4, r0
   1daf2:	b188      	cbz	r0, 1db18 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1daf4:	2210      	movs	r2, #16
   1daf6:	2100      	movs	r1, #0
   1daf8:	f7ff febd 	bl	1d876 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1dafc:	2210      	movs	r2, #16
   1dafe:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1db02:	2100      	movs	r1, #0
   1db04:	f7ff feb7 	bl	1d876 <_set>
	s->leftover_offset = 0;
   1db08:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1db0a:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1db0c:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1db0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1db12:	2001      	movs	r0, #1
   1db14:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1db18:	bd10      	pop	{r4, pc}

0001db1a <tc_cmac_setup>:
{
   1db1a:	b570      	push	{r4, r5, r6, lr}
   1db1c:	460d      	mov	r5, r1
   1db1e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1db20:	4604      	mov	r4, r0
   1db22:	b310      	cbz	r0, 1db6a <tc_cmac_setup+0x50>
   1db24:	b311      	cbz	r1, 1db6c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1db26:	2258      	movs	r2, #88	; 0x58
   1db28:	2100      	movs	r1, #0
   1db2a:	f7ff fea4 	bl	1d876 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1db2e:	4629      	mov	r1, r5
   1db30:	4630      	mov	r0, r6
	s->sched = sched;
   1db32:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1db34:	f7ef fcb6 	bl	d4a4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1db38:	2210      	movs	r2, #16
   1db3a:	2100      	movs	r1, #0
   1db3c:	4620      	mov	r0, r4
   1db3e:	f7ff fe9a 	bl	1d876 <_set>
	gf_double (s->K1, s->iv);
   1db42:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1db46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1db48:	4621      	mov	r1, r4
   1db4a:	4620      	mov	r0, r4
   1db4c:	f7ff ff5c 	bl	1da08 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1db50:	4621      	mov	r1, r4
   1db52:	4628      	mov	r0, r5
   1db54:	f7ff ffae 	bl	1dab4 <gf_double>
	gf_double (s->K2, s->K1);
   1db58:	4629      	mov	r1, r5
   1db5a:	f104 0020 	add.w	r0, r4, #32
   1db5e:	f7ff ffa9 	bl	1dab4 <gf_double>
	tc_cmac_init(s);
   1db62:	4620      	mov	r0, r4
   1db64:	f7ff ffc3 	bl	1daee <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1db68:	2001      	movs	r0, #1
}
   1db6a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1db6c:	4608      	mov	r0, r1
   1db6e:	e7fc      	b.n	1db6a <tc_cmac_setup+0x50>

0001db70 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1db70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db74:	460d      	mov	r5, r1
   1db76:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1db78:	4604      	mov	r4, r0
   1db7a:	2800      	cmp	r0, #0
   1db7c:	d061      	beq.n	1dc42 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1db7e:	b912      	cbnz	r2, 1db86 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1db80:	2001      	movs	r0, #1
}
   1db82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1db86:	2900      	cmp	r1, #0
   1db88:	d05b      	beq.n	1dc42 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1db8a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1db8e:	ea53 0102 	orrs.w	r1, r3, r2
   1db92:	d056      	beq.n	1dc42 <tc_cmac_update+0xd2>
	s->countdown--;
   1db94:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1db96:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1db9a:	f142 32ff 	adc.w	r2, r2, #4294967295
   1db9e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1dba2:	f1b8 0f00 	cmp.w	r8, #0
   1dba6:	d02a      	beq.n	1dbfe <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1dba8:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dbac:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1dbb0:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dbb2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1dbb4:	d208      	bcs.n	1dbc8 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dbb6:	462a      	mov	r2, r5
   1dbb8:	4633      	mov	r3, r6
   1dbba:	4631      	mov	r1, r6
   1dbbc:	f7ff fe4e 	bl	1d85c <_copy>
			s->leftover_offset += data_length;
   1dbc0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1dbc2:	4432      	add	r2, r6
   1dbc4:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1dbc6:	e7db      	b.n	1db80 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1dbc8:	463b      	mov	r3, r7
   1dbca:	462a      	mov	r2, r5
   1dbcc:	4639      	mov	r1, r7
   1dbce:	f7ff fe45 	bl	1d85c <_copy>
		s->leftover_offset = 0;
   1dbd2:	2300      	movs	r3, #0
   1dbd4:	3e10      	subs	r6, #16
   1dbd6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1dbd8:	4446      	add	r6, r8
		data += remaining_space;
   1dbda:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbdc:	1e63      	subs	r3, r4, #1
   1dbde:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1dbe2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dbe6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbea:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1dbec:	ea82 0200 	eor.w	r2, r2, r0
   1dbf0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbf2:	d1f6      	bne.n	1dbe2 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dbf4:	4621      	mov	r1, r4
   1dbf6:	4620      	mov	r0, r4
   1dbf8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dbfa:	f7ff ff05 	bl	1da08 <tc_aes_encrypt>
   1dbfe:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1dc02:	2e10      	cmp	r6, #16
   1dc04:	d80a      	bhi.n	1dc1c <tc_cmac_update+0xac>
	if (data_length > 0) {
   1dc06:	2e00      	cmp	r6, #0
   1dc08:	d0ba      	beq.n	1db80 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1dc0a:	4633      	mov	r3, r6
   1dc0c:	462a      	mov	r2, r5
   1dc0e:	4631      	mov	r1, r6
   1dc10:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dc14:	f7ff fe22 	bl	1d85c <_copy>
		s->leftover_offset = data_length;
   1dc18:	6466      	str	r6, [r4, #68]	; 0x44
   1dc1a:	e7b1      	b.n	1db80 <tc_cmac_update+0x10>
   1dc1c:	1e63      	subs	r3, r4, #1
   1dc1e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1dc20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dc24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc28:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dc2a:	ea82 0200 	eor.w	r2, r2, r0
   1dc2e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc30:	d1f6      	bne.n	1dc20 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dc32:	4621      	mov	r1, r4
   1dc34:	4620      	mov	r0, r4
   1dc36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc38:	f7ff fee6 	bl	1da08 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1dc3c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1dc3e:	3e10      	subs	r6, #16
   1dc40:	e7df      	b.n	1dc02 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1dc42:	2000      	movs	r0, #0
   1dc44:	e79d      	b.n	1db82 <tc_cmac_update+0x12>

0001dc46 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1dc46:	b570      	push	{r4, r5, r6, lr}
   1dc48:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1dc4a:	4605      	mov	r5, r0
   1dc4c:	b1f0      	cbz	r0, 1dc8c <tc_cmac_final+0x46>
   1dc4e:	b371      	cbz	r1, 1dcae <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1dc50:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1dc52:	2a10      	cmp	r2, #16
   1dc54:	d11b      	bne.n	1dc8e <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1dc56:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc58:	1e63      	subs	r3, r4, #1
   1dc5a:	3901      	subs	r1, #1
   1dc5c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dc60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dc64:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc68:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dc6a:	ea82 0206 	eor.w	r2, r2, r6
   1dc6e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1dc72:	ea82 0206 	eor.w	r2, r2, r6
   1dc76:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc78:	d1f2      	bne.n	1dc60 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1dc7a:	4621      	mov	r1, r4
   1dc7c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc7e:	4628      	mov	r0, r5
   1dc80:	f7ff fec2 	bl	1da08 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1dc84:	4620      	mov	r0, r4
   1dc86:	f7ff ff2a 	bl	1dade <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1dc8a:	2001      	movs	r0, #1
}
   1dc8c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1dc8e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1dc92:	2100      	movs	r1, #0
   1dc94:	f1c2 0210 	rsb	r2, r2, #16
   1dc98:	4420      	add	r0, r4
   1dc9a:	f7ff fdec 	bl	1d876 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1dc9e:	2280      	movs	r2, #128	; 0x80
   1dca0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1dca2:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1dca6:	4423      	add	r3, r4
   1dca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1dcac:	e7d4      	b.n	1dc58 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1dcae:	4608      	mov	r0, r1
   1dcb0:	e7ec      	b.n	1dc8c <tc_cmac_final+0x46>

0001dcb2 <tc_sha256_update>:
{
   1dcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcb4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1dcb6:	b110      	cbz	r0, 1dcbe <tc_sha256_update+0xc>
   1dcb8:	b1f9      	cbz	r1, 1dcfa <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1dcba:	b90a      	cbnz	r2, 1dcc0 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1dcbc:	2001      	movs	r0, #1
}
   1dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1dcc0:	2600      	movs	r6, #0
   1dcc2:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1dcc4:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1dcc8:	42a5      	cmp	r5, r4
   1dcca:	d0f7      	beq.n	1dcbc <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1dccc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1dcce:	1c5a      	adds	r2, r3, #1
   1dcd0:	6682      	str	r2, [r0, #104]	; 0x68
   1dcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   1dcd6:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1dcd8:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1dcda:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1dcde:	d9f3      	bls.n	1dcc8 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1dce0:	4639      	mov	r1, r7
   1dce2:	f7ef fc33 	bl	d54c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1dce6:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1dcea:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1dcee:	f142 0200 	adc.w	r2, r2, #0
   1dcf2:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1dcf6:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1dcf8:	e7e6      	b.n	1dcc8 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1dcfa:	4608      	mov	r0, r1
   1dcfc:	e7df      	b.n	1dcbe <tc_sha256_update+0xc>

0001dcfe <tc_sha256_final>:
{
   1dcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd00:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1dd02:	4605      	mov	r5, r0
   1dd04:	2800      	cmp	r0, #0
   1dd06:	d055      	beq.n	1ddb4 <tc_sha256_final+0xb6>
   1dd08:	2900      	cmp	r1, #0
   1dd0a:	d054      	beq.n	1ddb6 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1dd0c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1dd0e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1dd12:	00d8      	lsls	r0, r3, #3
   1dd14:	1812      	adds	r2, r2, r0
   1dd16:	f141 0100 	adc.w	r1, r1, #0
   1dd1a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dd1e:	2280      	movs	r2, #128	; 0x80
   1dd20:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1dd22:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dd24:	4423      	add	r3, r4
   1dd26:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1dd28:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dd2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1dd30:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1dd34:	d90a      	bls.n	1dd4c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1dd36:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1dd3a:	4639      	mov	r1, r7
   1dd3c:	4430      	add	r0, r6
   1dd3e:	f7ff fd9a 	bl	1d876 <_set>
		compress(s->iv, s->leftover);
   1dd42:	4631      	mov	r1, r6
   1dd44:	4620      	mov	r0, r4
   1dd46:	f7ef fc01 	bl	d54c <compress>
		s->leftover_offset = 0;
   1dd4a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1dd4c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1dd4e:	2100      	movs	r1, #0
   1dd50:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1dd54:	4430      	add	r0, r6
   1dd56:	f7ff fd8e 	bl	1d876 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1dd5a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1dd5c:	4631      	mov	r1, r6
   1dd5e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1dd60:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1dd62:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1dd64:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1dd66:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1dd6a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1dd6e:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1dd70:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1dd72:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1dd74:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1dd78:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1dd7c:	f7ef fbe6 	bl	d54c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1dd80:	1f26      	subs	r6, r4, #4
   1dd82:	1d2b      	adds	r3, r5, #4
   1dd84:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1dd88:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1dd8c:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1dd8e:	0e11      	lsrs	r1, r2, #24
   1dd90:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1dd94:	0c11      	lsrs	r1, r2, #16
   1dd96:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1dd9a:	0a11      	lsrs	r1, r2, #8
   1dd9c:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1dda0:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1dda4:	4283      	cmp	r3, r0
   1dda6:	d1ef      	bne.n	1dd88 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1dda8:	4620      	mov	r0, r4
   1ddaa:	2270      	movs	r2, #112	; 0x70
   1ddac:	2100      	movs	r1, #0
   1ddae:	f7ff fd62 	bl	1d876 <_set>
	return TC_CRYPTO_SUCCESS;
   1ddb2:	2001      	movs	r0, #1
}
   1ddb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1ddb6:	4608      	mov	r0, r1
   1ddb8:	e7fc      	b.n	1ddb4 <tc_sha256_final+0xb6>

0001ddba <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1ddba:	b530      	push	{r4, r5, lr}
   1ddbc:	1e43      	subs	r3, r0, #1
   1ddbe:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1ddc0:	42a9      	cmp	r1, r5
   1ddc2:	d106      	bne.n	1ddd2 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1ddc4:	2136      	movs	r1, #54	; 0x36
   1ddc6:	245c      	movs	r4, #92	; 0x5c
   1ddc8:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1ddca:	1a13      	subs	r3, r2, r0
   1ddcc:	2b3f      	cmp	r3, #63	; 0x3f
   1ddce:	d90c      	bls.n	1ddea <rekey+0x30>
	}
}
   1ddd0:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1ddd2:	780c      	ldrb	r4, [r1, #0]
   1ddd4:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1ddd8:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1dddc:	f811 4b01 	ldrb.w	r4, [r1], #1
   1dde0:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1dde4:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1dde8:	e7ea      	b.n	1ddc0 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1ddea:	f802 1b01 	strb.w	r1, [r2], #1
   1ddee:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1ddf2:	e7ea      	b.n	1ddca <rekey+0x10>

0001ddf4 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1ddf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ddf6:	460e      	mov	r6, r1
   1ddf8:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1ddfa:	4605      	mov	r5, r0
{
   1ddfc:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1ddfe:	b1b8      	cbz	r0, 1de30 <tc_hmac_set_key+0x3c>
   1de00:	b341      	cbz	r1, 1de54 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1de02:	b34a      	cbz	r2, 1de58 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1de04:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1de06:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1de0a:	d813      	bhi.n	1de34 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1de0c:	a810      	add	r0, sp, #64	; 0x40
   1de0e:	f7ef fc85 	bl	d71c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1de12:	4622      	mov	r2, r4
   1de14:	4669      	mov	r1, sp
   1de16:	a810      	add	r0, sp, #64	; 0x40
   1de18:	f7ff ff4b 	bl	1dcb2 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1de1c:	a910      	add	r1, sp, #64	; 0x40
   1de1e:	a834      	add	r0, sp, #208	; 0xd0
   1de20:	f7ff ff6d 	bl	1dcfe <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1de24:	4622      	mov	r2, r4
   1de26:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1de28:	4638      	mov	r0, r7
   1de2a:	f7ff ffc6 	bl	1ddba <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1de2e:	2001      	movs	r0, #1
}
   1de30:	b04d      	add	sp, #308	; 0x134
   1de32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1de34:	f7ef fc72 	bl	d71c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1de38:	4622      	mov	r2, r4
   1de3a:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1de3c:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1de40:	4628      	mov	r0, r5
   1de42:	f7ff ff36 	bl	1dcb2 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1de46:	4629      	mov	r1, r5
   1de48:	4620      	mov	r0, r4
   1de4a:	f7ff ff58 	bl	1dcfe <tc_sha256_final>
		rekey(ctx->key,
   1de4e:	2220      	movs	r2, #32
   1de50:	4621      	mov	r1, r4
   1de52:	e7e9      	b.n	1de28 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1de54:	4608      	mov	r0, r1
   1de56:	e7eb      	b.n	1de30 <tc_hmac_set_key+0x3c>
   1de58:	4610      	mov	r0, r2
   1de5a:	e7e9      	b.n	1de30 <tc_hmac_set_key+0x3c>

0001de5c <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1de5c:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1de5e:	4604      	mov	r4, r0
   1de60:	b140      	cbz	r0, 1de74 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1de62:	f7ef fc5b 	bl	d71c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1de66:	2240      	movs	r2, #64	; 0x40
   1de68:	4620      	mov	r0, r4
   1de6a:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1de6e:	f7ff ff20 	bl	1dcb2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1de72:	2001      	movs	r0, #1
}
   1de74:	bd10      	pop	{r4, pc}

0001de76 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1de76:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1de78:	b110      	cbz	r0, 1de80 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1de7a:	f7ff ff1a 	bl	1dcb2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1de7e:	2001      	movs	r0, #1
}
   1de80:	bd08      	pop	{r3, pc}

0001de82 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1de82:	b570      	push	{r4, r5, r6, lr}
   1de84:	460e      	mov	r6, r1
   1de86:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1de88:	4605      	mov	r5, r0
   1de8a:	b1f0      	cbz	r0, 1deca <tc_hmac_final+0x48>
   1de8c:	2920      	cmp	r1, #32
   1de8e:	d11c      	bne.n	1deca <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1de90:	b1ea      	cbz	r2, 1dece <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1de92:	4611      	mov	r1, r2
   1de94:	f7ff ff33 	bl	1dcfe <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1de98:	4620      	mov	r0, r4
   1de9a:	f7ef fc3f 	bl	d71c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1de9e:	2240      	movs	r2, #64	; 0x40
   1dea0:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1dea4:	4620      	mov	r0, r4
   1dea6:	f7ff ff04 	bl	1dcb2 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1deaa:	4632      	mov	r2, r6
   1deac:	4629      	mov	r1, r5
   1deae:	4620      	mov	r0, r4
   1deb0:	f7ff feff 	bl	1dcb2 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1deb4:	4621      	mov	r1, r4
   1deb6:	4628      	mov	r0, r5
   1deb8:	f7ff ff21 	bl	1dcfe <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1debc:	4620      	mov	r0, r4
   1debe:	22f0      	movs	r2, #240	; 0xf0
   1dec0:	2100      	movs	r1, #0
   1dec2:	f7ff fcd8 	bl	1d876 <_set>

	return TC_CRYPTO_SUCCESS;
   1dec6:	2001      	movs	r0, #1
}
   1dec8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1deca:	2000      	movs	r0, #0
   1decc:	e7fc      	b.n	1dec8 <tc_hmac_final+0x46>
   1dece:	4610      	mov	r0, r2
   1ded0:	e7fa      	b.n	1dec8 <tc_hmac_final+0x46>

0001ded2 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1ded2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ded6:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1ded8:	f04f 0b01 	mov.w	fp, #1
{
   1dedc:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1dede:	2300      	movs	r3, #0
{
   1dee0:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dee2:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1dee6:	4631      	mov	r1, r6
{
   1dee8:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1deea:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1deec:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1def0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1def4:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1def8:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1defc:	f7ff ff7a 	bl	1ddf4 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1df00:	4620      	mov	r0, r4
   1df02:	f7ff ffab 	bl	1de5c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1df06:	2220      	movs	r2, #32
   1df08:	4629      	mov	r1, r5
   1df0a:	4620      	mov	r0, r4
   1df0c:	f7ff ffb3 	bl	1de76 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1df10:	465a      	mov	r2, fp
   1df12:	4620      	mov	r0, r4
   1df14:	f10d 0106 	add.w	r1, sp, #6
   1df18:	f7ff ffad 	bl	1de76 <tc_hmac_update>

	if (data && datalen)
   1df1c:	f1b8 0f00 	cmp.w	r8, #0
   1df20:	d007      	beq.n	1df32 <update+0x60>
   1df22:	f1b9 0f00 	cmp.w	r9, #0
   1df26:	d004      	beq.n	1df32 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1df28:	464a      	mov	r2, r9
   1df2a:	4641      	mov	r1, r8
   1df2c:	4620      	mov	r0, r4
   1df2e:	f7ff ffa2 	bl	1de76 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1df32:	b13f      	cbz	r7, 1df44 <update+0x72>
   1df34:	f1ba 0f00 	cmp.w	sl, #0
   1df38:	d004      	beq.n	1df44 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1df3a:	4652      	mov	r2, sl
   1df3c:	4639      	mov	r1, r7
   1df3e:	4620      	mov	r0, r4
   1df40:	f7ff ff99 	bl	1de76 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1df44:	4622      	mov	r2, r4
   1df46:	2120      	movs	r1, #32
   1df48:	4630      	mov	r0, r6
   1df4a:	f7ff ff9a 	bl	1de82 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1df4e:	2220      	movs	r2, #32
   1df50:	4631      	mov	r1, r6
   1df52:	4620      	mov	r0, r4
   1df54:	f7ff ff4e 	bl	1ddf4 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1df58:	4620      	mov	r0, r4
   1df5a:	f7ff ff7f 	bl	1de5c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1df5e:	2220      	movs	r2, #32
   1df60:	4629      	mov	r1, r5
   1df62:	4620      	mov	r0, r4
   1df64:	f7ff ff87 	bl	1de76 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1df68:	4622      	mov	r2, r4
   1df6a:	2120      	movs	r1, #32
   1df6c:	4628      	mov	r0, r5
   1df6e:	f7ff ff88 	bl	1de82 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1df72:	f1b8 0f00 	cmp.w	r8, #0
   1df76:	d03a      	beq.n	1dfee <update+0x11c>
   1df78:	f1b9 0f00 	cmp.w	r9, #0
   1df7c:	d037      	beq.n	1dfee <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1df7e:	2220      	movs	r2, #32
   1df80:	4631      	mov	r1, r6
   1df82:	4620      	mov	r0, r4
   1df84:	f7ff ff36 	bl	1ddf4 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1df88:	4620      	mov	r0, r4
   1df8a:	f7ff ff67 	bl	1de5c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1df8e:	2220      	movs	r2, #32
   1df90:	4629      	mov	r1, r5
   1df92:	4620      	mov	r0, r4
   1df94:	f7ff ff6f 	bl	1de76 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1df98:	2201      	movs	r2, #1
   1df9a:	f10d 0107 	add.w	r1, sp, #7
   1df9e:	4620      	mov	r0, r4
   1dfa0:	f7ff ff69 	bl	1de76 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1dfa4:	464a      	mov	r2, r9
   1dfa6:	4641      	mov	r1, r8
   1dfa8:	4620      	mov	r0, r4
   1dfaa:	f7ff ff64 	bl	1de76 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1dfae:	b13f      	cbz	r7, 1dfc0 <update+0xee>
   1dfb0:	f1ba 0f00 	cmp.w	sl, #0
   1dfb4:	d004      	beq.n	1dfc0 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1dfb6:	4652      	mov	r2, sl
   1dfb8:	4639      	mov	r1, r7
   1dfba:	4620      	mov	r0, r4
   1dfbc:	f7ff ff5b 	bl	1de76 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1dfc0:	4622      	mov	r2, r4
   1dfc2:	2120      	movs	r1, #32
   1dfc4:	4630      	mov	r0, r6
   1dfc6:	f7ff ff5c 	bl	1de82 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dfca:	2220      	movs	r2, #32
   1dfcc:	4631      	mov	r1, r6
   1dfce:	4620      	mov	r0, r4
   1dfd0:	f7ff ff10 	bl	1ddf4 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1dfd4:	4620      	mov	r0, r4
   1dfd6:	f7ff ff41 	bl	1de5c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1dfda:	2220      	movs	r2, #32
   1dfdc:	4629      	mov	r1, r5
   1dfde:	4620      	mov	r0, r4
   1dfe0:	f7ff ff49 	bl	1de76 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1dfe4:	4622      	mov	r2, r4
   1dfe6:	2120      	movs	r1, #32
   1dfe8:	4628      	mov	r0, r5
   1dfea:	f7ff ff4a 	bl	1de82 <tc_hmac_final>
}
   1dfee:	b003      	add	sp, #12
   1dff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dff4 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1dff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dff6:	460c      	mov	r4, r1
   1dff8:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1dffa:	4605      	mov	r5, r0
   1dffc:	b1b0      	cbz	r0, 1e02c <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1dffe:	b1b9      	cbz	r1, 1e030 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1e000:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1e002:	2220      	movs	r2, #32
   1e004:	2100      	movs	r1, #0
   1e006:	30f0      	adds	r0, #240	; 0xf0
   1e008:	f7ff fc35 	bl	1d876 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1e00c:	2220      	movs	r2, #32
   1e00e:	2101      	movs	r1, #1
   1e010:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1e014:	f7ff fc2f 	bl	1d876 <_set>
	update(prng, personalization, plen, 0, 0);
   1e018:	4628      	mov	r0, r5
   1e01a:	4633      	mov	r3, r6
   1e01c:	463a      	mov	r2, r7
   1e01e:	4621      	mov	r1, r4
   1e020:	9600      	str	r6, [sp, #0]
   1e022:	f7ff ff56 	bl	1ded2 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1e026:	2001      	movs	r0, #1
	prng->countdown = 0;
   1e028:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1e02c:	b003      	add	sp, #12
   1e02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1e030:	4608      	mov	r0, r1
   1e032:	e7fb      	b.n	1e02c <tc_hmac_prng_init+0x38>

0001e034 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1e034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e036:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1e038:	4605      	mov	r5, r0
   1e03a:	b180      	cbz	r0, 1e05e <tc_hmac_prng_reseed+0x2a>
   1e03c:	b179      	cbz	r1, 1e05e <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1e03e:	2a1f      	cmp	r2, #31
   1e040:	d90d      	bls.n	1e05e <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1e042:	b153      	cbz	r3, 1e05a <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1e044:	b16c      	cbz	r4, 1e062 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1e046:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1e048:	f7ff ff43 	bl	1ded2 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1e04c:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1e050:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1e052:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1e056:	b003      	add	sp, #12
   1e058:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1e05a:	9300      	str	r3, [sp, #0]
   1e05c:	e7f4      	b.n	1e048 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1e05e:	2000      	movs	r0, #0
   1e060:	e7f9      	b.n	1e056 <tc_hmac_prng_reseed+0x22>
   1e062:	4620      	mov	r0, r4
   1e064:	e7f7      	b.n	1e056 <tc_hmac_prng_reseed+0x22>

0001e066 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1e066:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e06a:	460d      	mov	r5, r1
   1e06c:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1e06e:	4680      	mov	r8, r0
   1e070:	b3d8      	cbz	r0, 1e0ea <tc_hmac_prng_generate+0x84>
   1e072:	b3d2      	cbz	r2, 1e0ea <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1e074:	1e4b      	subs	r3, r1, #1
   1e076:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1e07a:	d236      	bcs.n	1e0ea <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1e07c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1e080:	b3ab      	cbz	r3, 1e0ee <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1e082:	3b01      	subs	r3, #1
   1e084:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e088:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e08c:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e090:	2220      	movs	r2, #32
   1e092:	4649      	mov	r1, r9
   1e094:	4620      	mov	r0, r4
   1e096:	f7ff fead 	bl	1ddf4 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1e09a:	4620      	mov	r0, r4
   1e09c:	f7ff fede 	bl	1de5c <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e0a0:	2220      	movs	r2, #32
   1e0a2:	4639      	mov	r1, r7
   1e0a4:	4620      	mov	r0, r4
   1e0a6:	f7ff fee6 	bl	1de76 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1e0aa:	4622      	mov	r2, r4
   1e0ac:	2120      	movs	r1, #32
   1e0ae:	4638      	mov	r0, r7
   1e0b0:	f7ff fee7 	bl	1de82 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1e0b4:	2d20      	cmp	r5, #32
   1e0b6:	462e      	mov	r6, r5
   1e0b8:	bf28      	it	cs
   1e0ba:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1e0bc:	4640      	mov	r0, r8
   1e0be:	4633      	mov	r3, r6
   1e0c0:	463a      	mov	r2, r7
   1e0c2:	4631      	mov	r1, r6
   1e0c4:	f7ff fbca 	bl	1d85c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1e0c8:	2d20      	cmp	r5, #32
   1e0ca:	bf38      	it	cc
   1e0cc:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1e0ce:	3d20      	subs	r5, #32
		out += bufferlen;
   1e0d0:	44b0      	add	r8, r6
	while (outlen != 0) {
   1e0d2:	d1dd      	bne.n	1e090 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1e0d4:	4620      	mov	r0, r4
   1e0d6:	462b      	mov	r3, r5
   1e0d8:	462a      	mov	r2, r5
   1e0da:	4629      	mov	r1, r5
   1e0dc:	9500      	str	r5, [sp, #0]
   1e0de:	f7ff fef8 	bl	1ded2 <update>

	return TC_CRYPTO_SUCCESS;
   1e0e2:	2001      	movs	r0, #1
}
   1e0e4:	b003      	add	sp, #12
   1e0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1e0ea:	2000      	movs	r0, #0
   1e0ec:	e7fa      	b.n	1e0e4 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1e0ee:	f04f 30ff 	mov.w	r0, #4294967295
   1e0f2:	e7f7      	b.n	1e0e4 <tc_hmac_prng_generate+0x7e>

0001e0f4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e0f4:	2100      	movs	r1, #0
   1e0f6:	2001      	movs	r0, #1
   1e0f8:	f7ef bc2e 	b.w	d958 <z_arm_fatal_error>

0001e0fc <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1e0fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1e0fe:	f383 880b 	msr	PSPLIM, r3
}
   1e102:	4770      	bx	lr

0001e104 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e104:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1e106:	6800      	ldr	r0, [r0, #0]
   1e108:	f7ef bc26 	b.w	d958 <z_arm_fatal_error>

0001e10c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e10c:	b508      	push	{r3, lr}
	handler();
   1e10e:	f7ef fc51 	bl	d9b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e116:	f7ef be95 	b.w	de44 <z_arm_exc_exit>

0001e11a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1e11a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1e11e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1e122:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1e124:	bf08      	it	eq
   1e126:	f06f 0015 	mvneq.w	r0, #21
   1e12a:	4770      	bx	lr

0001e12c <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1e12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e130:	4684      	mov	ip, r0
   1e132:	4688      	mov	r8, r1
	register const char *s = nptr;
   1e134:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1e136:	4621      	mov	r1, r4
   1e138:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e13c:	2b20      	cmp	r3, #32
   1e13e:	d0fa      	beq.n	1e136 <strtol+0xa>
   1e140:	f1a3 0009 	sub.w	r0, r3, #9
   1e144:	2804      	cmp	r0, #4
   1e146:	d9f6      	bls.n	1e136 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1e148:	2b2d      	cmp	r3, #45	; 0x2d
   1e14a:	d12d      	bne.n	1e1a8 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1e14c:	784b      	ldrb	r3, [r1, #1]
   1e14e:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1e150:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e152:	2a00      	cmp	r2, #0
   1e154:	d05a      	beq.n	1e20c <strtol+0xe0>
   1e156:	2a10      	cmp	r2, #16
   1e158:	d109      	bne.n	1e16e <strtol+0x42>
   1e15a:	2b30      	cmp	r3, #48	; 0x30
   1e15c:	d107      	bne.n	1e16e <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e15e:	7823      	ldrb	r3, [r4, #0]
   1e160:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e164:	2b58      	cmp	r3, #88	; 0x58
   1e166:	d14c      	bne.n	1e202 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1e168:	2210      	movs	r2, #16
		c = s[1];
   1e16a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e16c:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e16e:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1e170:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1e174:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1e176:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1e17a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1e17c:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e180:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e184:	2d09      	cmp	r5, #9
   1e186:	d815      	bhi.n	1e1b4 <strtol+0x88>
			c -= '0';
   1e188:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e18a:	429a      	cmp	r2, r3
   1e18c:	dd22      	ble.n	1e1d4 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e18e:	1c75      	adds	r5, r6, #1
   1e190:	d007      	beq.n	1e1a2 <strtol+0x76>
   1e192:	4570      	cmp	r0, lr
   1e194:	d81b      	bhi.n	1e1ce <strtol+0xa2>
   1e196:	d101      	bne.n	1e19c <strtol+0x70>
   1e198:	454b      	cmp	r3, r9
   1e19a:	dc18      	bgt.n	1e1ce <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1e19c:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e19e:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e1a2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e1a6:	e7eb      	b.n	1e180 <strtol+0x54>
	} else if (c == '+') {
   1e1a8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1e1aa:	bf04      	itt	eq
   1e1ac:	784b      	ldrbeq	r3, [r1, #1]
   1e1ae:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1e1b0:	2100      	movs	r1, #0
   1e1b2:	e7ce      	b.n	1e152 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e1b4:	f043 0520 	orr.w	r5, r3, #32
   1e1b8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e1ba:	2d19      	cmp	r5, #25
   1e1bc:	d80a      	bhi.n	1e1d4 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e1be:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e1c2:	2d1a      	cmp	r5, #26
   1e1c4:	bf34      	ite	cc
   1e1c6:	2537      	movcc	r5, #55	; 0x37
   1e1c8:	2557      	movcs	r5, #87	; 0x57
   1e1ca:	1b5b      	subs	r3, r3, r5
   1e1cc:	e7dd      	b.n	1e18a <strtol+0x5e>
			any = -1;
   1e1ce:	f04f 36ff 	mov.w	r6, #4294967295
   1e1d2:	e7e6      	b.n	1e1a2 <strtol+0x76>
		}
	}

	if (any < 0) {
   1e1d4:	1c73      	adds	r3, r6, #1
   1e1d6:	d109      	bne.n	1e1ec <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1e1d8:	f7fb fc6e 	bl	19ab8 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1e1dc:	2326      	movs	r3, #38	; 0x26
   1e1de:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1e1e0:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1e1e2:	f1b8 0f00 	cmp.w	r8, #0
   1e1e6:	d107      	bne.n	1e1f8 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1e1ec:	b101      	cbz	r1, 1e1f0 <strtol+0xc4>
		acc = -acc;
   1e1ee:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e1f0:	f1b8 0f00 	cmp.w	r8, #0
   1e1f4:	d0f8      	beq.n	1e1e8 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e1f6:	b10e      	cbz	r6, 1e1fc <strtol+0xd0>
   1e1f8:	f104 3cff 	add.w	ip, r4, #4294967295
   1e1fc:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1e200:	e7f2      	b.n	1e1e8 <strtol+0xbc>
	if (base == 0) {
   1e202:	2330      	movs	r3, #48	; 0x30
   1e204:	2a00      	cmp	r2, #0
   1e206:	d1b2      	bne.n	1e16e <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1e208:	2208      	movs	r2, #8
   1e20a:	e7b0      	b.n	1e16e <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1e20c:	2b30      	cmp	r3, #48	; 0x30
   1e20e:	d0a6      	beq.n	1e15e <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1e210:	220a      	movs	r2, #10
   1e212:	e7ac      	b.n	1e16e <strtol+0x42>

0001e214 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1e214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1e218:	f891 8000 	ldrb.w	r8, [r1]
{
   1e21c:	4605      	mov	r5, r0
	if (c != 0) {
   1e21e:	f1b8 0f00 	cmp.w	r8, #0
   1e222:	d010      	beq.n	1e246 <strstr+0x32>
	c = *find++;
   1e224:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1e226:	4620      	mov	r0, r4
   1e228:	f000 f830 	bl	1e28c <strlen>
   1e22c:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1e22e:	462e      	mov	r6, r5
   1e230:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1e234:	b163      	cbz	r3, 1e250 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1e236:	4598      	cmp	r8, r3
   1e238:	d108      	bne.n	1e24c <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1e23a:	463a      	mov	r2, r7
   1e23c:	4621      	mov	r1, r4
   1e23e:	4630      	mov	r0, r6
   1e240:	f000 f840 	bl	1e2c4 <strncmp>
   1e244:	b910      	cbnz	r0, 1e24c <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1e246:	4628      	mov	r0, r5
   1e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1e24c:	4635      	mov	r5, r6
   1e24e:	e7ee      	b.n	1e22e <strstr+0x1a>
					return NULL;
   1e250:	461d      	mov	r5, r3
   1e252:	e7f8      	b.n	1e246 <strstr+0x32>

0001e254 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1e254:	4603      	mov	r3, r0
   1e256:	3901      	subs	r1, #1
   1e258:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e25c:	b90a      	cbnz	r2, 1e262 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1e25e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1e260:	4770      	bx	lr
		*d = *s;
   1e262:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1e266:	e7f7      	b.n	1e258 <strcpy+0x4>

0001e268 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1e268:	b570      	push	{r4, r5, r6, lr}
   1e26a:	4605      	mov	r5, r0
   1e26c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1e26e:	b142      	cbz	r2, 1e282 <strncpy+0x1a>
   1e270:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1e274:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1e276:	b92c      	cbnz	r4, 1e284 <strncpy+0x1c>
   1e278:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1e27a:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1e27e:	429a      	cmp	r2, r3
   1e280:	d1fb      	bne.n	1e27a <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1e282:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1e284:	4632      	mov	r2, r6
		*d = *s;
   1e286:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1e28a:	e7ef      	b.n	1e26c <strncpy+0x4>

0001e28c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e28c:	4603      	mov	r3, r0
	size_t n = 0;
   1e28e:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e290:	5c1a      	ldrb	r2, [r3, r0]
   1e292:	b902      	cbnz	r2, 1e296 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e294:	4770      	bx	lr
		n++;
   1e296:	3001      	adds	r0, #1
   1e298:	e7fa      	b.n	1e290 <strlen+0x4>

0001e29a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1e29a:	4603      	mov	r3, r0
	size_t n = 0;
   1e29c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1e29e:	5c1a      	ldrb	r2, [r3, r0]
   1e2a0:	b10a      	cbz	r2, 1e2a6 <strnlen+0xc>
   1e2a2:	4288      	cmp	r0, r1
   1e2a4:	d100      	bne.n	1e2a8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1e2a6:	4770      	bx	lr
		n++;
   1e2a8:	3001      	adds	r0, #1
   1e2aa:	e7f8      	b.n	1e29e <strnlen+0x4>

0001e2ac <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e2ac:	1e43      	subs	r3, r0, #1
   1e2ae:	3901      	subs	r1, #1
   1e2b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e2b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1e2b8:	4282      	cmp	r2, r0
   1e2ba:	d101      	bne.n	1e2c0 <strcmp+0x14>
   1e2bc:	2a00      	cmp	r2, #0
   1e2be:	d1f7      	bne.n	1e2b0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e2c0:	1a10      	subs	r0, r2, r0
   1e2c2:	4770      	bx	lr

0001e2c4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e2c4:	b510      	push	{r4, lr}
   1e2c6:	3901      	subs	r1, #1
   1e2c8:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1e2ca:	4282      	cmp	r2, r0
   1e2cc:	d009      	beq.n	1e2e2 <strncmp+0x1e>
   1e2ce:	7803      	ldrb	r3, [r0, #0]
   1e2d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1e2d4:	42a3      	cmp	r3, r4
   1e2d6:	d100      	bne.n	1e2da <strncmp+0x16>
   1e2d8:	b90b      	cbnz	r3, 1e2de <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1e2da:	1b18      	subs	r0, r3, r4
   1e2dc:	e002      	b.n	1e2e4 <strncmp+0x20>
		s1++;
   1e2de:	3001      	adds	r0, #1
		n--;
   1e2e0:	e7f3      	b.n	1e2ca <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1e2e2:	2000      	movs	r0, #0
}
   1e2e4:	bd10      	pop	{r4, pc}

0001e2e6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e2e6:	4603      	mov	r3, r0
   1e2e8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e2ea:	b15a      	cbz	r2, 1e304 <memcmp+0x1e>
   1e2ec:	3901      	subs	r1, #1
   1e2ee:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e2f0:	f813 0b01 	ldrb.w	r0, [r3], #1
   1e2f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e2f8:	42a3      	cmp	r3, r4
   1e2fa:	d001      	beq.n	1e300 <memcmp+0x1a>
   1e2fc:	4290      	cmp	r0, r2
   1e2fe:	d0f7      	beq.n	1e2f0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e300:	1a80      	subs	r0, r0, r2
}
   1e302:	bd10      	pop	{r4, pc}
		return 0;
   1e304:	4610      	mov	r0, r2
   1e306:	e7fc      	b.n	1e302 <memcmp+0x1c>

0001e308 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e308:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e30a:	ea81 0400 	eor.w	r4, r1, r0
   1e30e:	07a5      	lsls	r5, r4, #30
   1e310:	4603      	mov	r3, r0
   1e312:	d00b      	beq.n	1e32c <memcpy+0x24>
   1e314:	3b01      	subs	r3, #1
   1e316:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e318:	4291      	cmp	r1, r2
   1e31a:	d11b      	bne.n	1e354 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e31e:	2a00      	cmp	r2, #0
   1e320:	d0fc      	beq.n	1e31c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e322:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1e326:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1e328:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1e32c:	079c      	lsls	r4, r3, #30
   1e32e:	d1f6      	bne.n	1e31e <memcpy+0x16>
   1e330:	f022 0403 	bic.w	r4, r2, #3
   1e334:	1f1d      	subs	r5, r3, #4
   1e336:	0896      	lsrs	r6, r2, #2
   1e338:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e33a:	42b9      	cmp	r1, r7
   1e33c:	d105      	bne.n	1e34a <memcpy+0x42>
   1e33e:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1e342:	4423      	add	r3, r4
   1e344:	fb05 2206 	mla	r2, r5, r6, r2
   1e348:	e7e4      	b.n	1e314 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e34a:	f851 cb04 	ldr.w	ip, [r1], #4
   1e34e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e352:	e7f2      	b.n	1e33a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e354:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e358:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e35c:	e7dc      	b.n	1e318 <memcpy+0x10>

0001e35e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1e35e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1e360:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1e362:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e364:	07a3      	lsls	r3, r4, #30
   1e366:	d111      	bne.n	1e38c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e368:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e36c:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e370:	f022 0303 	bic.w	r3, r2, #3
   1e374:	0896      	lsrs	r6, r2, #2
   1e376:	4423      	add	r3, r4
   1e378:	429c      	cmp	r4, r3
   1e37a:	d10d      	bne.n	1e398 <memset+0x3a>
   1e37c:	f06f 0403 	mvn.w	r4, #3
   1e380:	fb04 2206 	mla	r2, r4, r6, r2
   1e384:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e386:	4293      	cmp	r3, r2
   1e388:	d109      	bne.n	1e39e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e38a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e38c:	2a00      	cmp	r2, #0
   1e38e:	d0fc      	beq.n	1e38a <memset+0x2c>
		*(d_byte++) = c_byte;
   1e390:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1e394:	3a01      	subs	r2, #1
   1e396:	e7e5      	b.n	1e364 <memset+0x6>
		*(d_word++) = c_word;
   1e398:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1e39c:	e7ec      	b.n	1e378 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e39e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e3a2:	e7f0      	b.n	1e386 <memset+0x28>

0001e3a4 <_stdout_hook_default>:
}
   1e3a4:	f04f 30ff 	mov.w	r0, #4294967295
   1e3a8:	4770      	bx	lr

0001e3aa <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1e3aa:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1e3ac:	b530      	push	{r4, r5, lr}
   1e3ae:	4605      	mov	r5, r0
   1e3b0:	b087      	sub	sp, #28
   1e3b2:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1e3b4:	a802      	add	r0, sp, #8
   1e3b6:	4411      	add	r1, r2
   1e3b8:	f7ff ffa6 	bl	1e308 <memcpy>
	(void)memset(res + 3, 0, 13);
   1e3bc:	220d      	movs	r2, #13
   1e3be:	2100      	movs	r1, #0
   1e3c0:	f10d 000b 	add.w	r0, sp, #11
   1e3c4:	f7ff ffcb 	bl	1e35e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1e3c8:	aa02      	add	r2, sp, #8
   1e3ca:	4611      	mov	r1, r2
   1e3cc:	4628      	mov	r0, r5
   1e3ce:	f000 fa70 	bl	1e8b2 <bt_encrypt_le>
	if (err) {
   1e3d2:	b970      	cbnz	r0, 1e3f2 <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   1e3d4:	2203      	movs	r2, #3
   1e3d6:	a902      	add	r1, sp, #8
   1e3d8:	a801      	add	r0, sp, #4
   1e3da:	f7ff ff95 	bl	1e308 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1e3de:	2203      	movs	r2, #3
   1e3e0:	4620      	mov	r0, r4
   1e3e2:	a901      	add	r1, sp, #4
   1e3e4:	f7ff ff7f 	bl	1e2e6 <memcmp>
   1e3e8:	fab0 f080 	clz	r0, r0
   1e3ec:	0940      	lsrs	r0, r0, #5
}
   1e3ee:	b007      	add	sp, #28
   1e3f0:	bd30      	pop	{r4, r5, pc}
		return false;
   1e3f2:	2000      	movs	r0, #0
   1e3f4:	e7fb      	b.n	1e3ee <bt_rpa_irk_matches+0x44>

0001e3f6 <bt_settings_decode_key>:
{
   1e3f6:	b570      	push	{r4, r5, r6, lr}
   1e3f8:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1e3fa:	2100      	movs	r1, #0
{
   1e3fc:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1e3fe:	f7fe ff85 	bl	1d30c <settings_name_next>
   1e402:	280d      	cmp	r0, #13
   1e404:	d118      	bne.n	1e438 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1e406:	7b23      	ldrb	r3, [r4, #12]
   1e408:	2b30      	cmp	r3, #48	; 0x30
   1e40a:	d111      	bne.n	1e430 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1e40c:	2300      	movs	r3, #0
   1e40e:	702b      	strb	r3, [r5, #0]
   1e410:	f104 060c 	add.w	r6, r4, #12
   1e414:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e416:	462a      	mov	r2, r5
   1e418:	4620      	mov	r0, r4
   1e41a:	2301      	movs	r3, #1
   1e41c:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1e41e:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e420:	f7fe fa59 	bl	1c8d6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1e424:	42b4      	cmp	r4, r6
   1e426:	f105 35ff 	add.w	r5, r5, #4294967295
   1e42a:	d1f4      	bne.n	1e416 <bt_settings_decode_key+0x20>
	return 0;
   1e42c:	2000      	movs	r0, #0
}
   1e42e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1e430:	2b31      	cmp	r3, #49	; 0x31
   1e432:	d101      	bne.n	1e438 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1e434:	2301      	movs	r3, #1
   1e436:	e7ea      	b.n	1e40e <bt_settings_decode_key+0x18>
		return -EINVAL;
   1e438:	f06f 0015 	mvn.w	r0, #21
   1e43c:	e7f7      	b.n	1e42e <bt_settings_decode_key+0x38>

0001e43e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e43e:	b510      	push	{r4, lr}
   1e440:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e442:	7801      	ldrb	r1, [r0, #0]
   1e444:	7822      	ldrb	r2, [r4, #0]
{
   1e446:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e448:	428a      	cmp	r2, r1
   1e44a:	d00f      	beq.n	1e46c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1e44c:	4669      	mov	r1, sp
   1e44e:	f7f0 f89f 	bl	e590 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e452:	4620      	mov	r0, r4
   1e454:	a905      	add	r1, sp, #20
   1e456:	f7f0 f89b 	bl	e590 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e45a:	2210      	movs	r2, #16
   1e45c:	f10d 0115 	add.w	r1, sp, #21
   1e460:	f10d 0001 	add.w	r0, sp, #1
   1e464:	f7ff ff3f 	bl	1e2e6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1e468:	b00a      	add	sp, #40	; 0x28
   1e46a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1e46c:	2a01      	cmp	r2, #1
   1e46e:	d006      	beq.n	1e47e <bt_uuid_cmp+0x40>
   1e470:	2a02      	cmp	r2, #2
   1e472:	d007      	beq.n	1e484 <bt_uuid_cmp+0x46>
   1e474:	b972      	cbnz	r2, 1e494 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e476:	8840      	ldrh	r0, [r0, #2]
   1e478:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e47a:	1ac0      	subs	r0, r0, r3
   1e47c:	e7f4      	b.n	1e468 <bt_uuid_cmp+0x2a>
   1e47e:	6840      	ldr	r0, [r0, #4]
   1e480:	6863      	ldr	r3, [r4, #4]
   1e482:	e7fa      	b.n	1e47a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e484:	2210      	movs	r2, #16
   1e486:	1c61      	adds	r1, r4, #1
   1e488:	3001      	adds	r0, #1
}
   1e48a:	b00a      	add	sp, #40	; 0x28
   1e48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e490:	f7ff bf29 	b.w	1e2e6 <memcmp>
	switch (u1->type) {
   1e494:	f06f 0015 	mvn.w	r0, #21
   1e498:	e7e6      	b.n	1e468 <bt_uuid_cmp+0x2a>

0001e49a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e49a:	2a04      	cmp	r2, #4
{
   1e49c:	b510      	push	{r4, lr}
	switch (data_len) {
   1e49e:	d00a      	beq.n	1e4b6 <bt_uuid_create+0x1c>
   1e4a0:	2a10      	cmp	r2, #16
   1e4a2:	d00d      	beq.n	1e4c0 <bt_uuid_create+0x26>
   1e4a4:	2a02      	cmp	r2, #2
   1e4a6:	f04f 0300 	mov.w	r3, #0
   1e4aa:	d10f      	bne.n	1e4cc <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1e4ac:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1e4ae:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e4b0:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e4b2:	2001      	movs	r0, #1
}
   1e4b4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e4b6:	2301      	movs	r3, #1
   1e4b8:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e4ba:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e4bc:	6042      	str	r2, [r0, #4]
		break;
   1e4be:	e7f8      	b.n	1e4b2 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1e4c0:	2302      	movs	r3, #2
   1e4c2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e4c6:	f7ff ff1f 	bl	1e308 <memcpy>
		break;
   1e4ca:	e7f2      	b.n	1e4b2 <bt_uuid_create+0x18>
	switch (data_len) {
   1e4cc:	4618      	mov	r0, r3
   1e4ce:	e7f1      	b.n	1e4b4 <bt_uuid_create+0x1a>

0001e4d0 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1e4d0:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1e4d2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e4d4:	2106      	movs	r1, #6
{
   1e4d6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e4d8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e4dc:	f7f2 fd64 	bl	10fa8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1e4e0:	b918      	cbnz	r0, 1e4ea <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1e4e2:	79a3      	ldrb	r3, [r4, #6]
   1e4e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e4e8:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1e4ea:	bd10      	pop	{r4, pc}

0001e4ec <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e4ec:	280f      	cmp	r0, #15
   1e4ee:	d806      	bhi.n	1e4fe <bt_hci_evt_get_flags+0x12>
   1e4f0:	280d      	cmp	r0, #13
   1e4f2:	d80b      	bhi.n	1e50c <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1e4f4:	2805      	cmp	r0, #5
   1e4f6:	bf14      	ite	ne
   1e4f8:	2002      	movne	r0, #2
   1e4fa:	2003      	moveq	r0, #3
   1e4fc:	4770      	bx	lr
	switch (evt) {
   1e4fe:	2813      	cmp	r0, #19
   1e500:	d004      	beq.n	1e50c <bt_hci_evt_get_flags+0x20>
   1e502:	281a      	cmp	r0, #26
   1e504:	bf14      	ite	ne
   1e506:	2002      	movne	r0, #2
   1e508:	2001      	moveq	r0, #1
   1e50a:	4770      	bx	lr
   1e50c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1e50e:	4770      	bx	lr

0001e510 <get_adv_channel_map>:
{
   1e510:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e512:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e516:	bf0c      	ite	eq
   1e518:	2007      	moveq	r0, #7
   1e51a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e51c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e51e:	bf48      	it	mi
   1e520:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e524:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e526:	bf48      	it	mi
   1e528:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e52c:	4770      	bx	lr

0001e52e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e52e:	e8d0 0faf 	lda	r0, [r0]
}
   1e532:	4770      	bx	lr

0001e534 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1e534:	2207      	movs	r2, #7
   1e536:	f7ff bee7 	b.w	1e308 <memcpy>

0001e53a <atomic_or>:
{
   1e53a:	4603      	mov	r3, r0
}
   1e53c:	e8d3 0fef 	ldaex	r0, [r3]
   1e540:	ea40 0201 	orr.w	r2, r0, r1
   1e544:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e548:	f1bc 0f00 	cmp.w	ip, #0
   1e54c:	d1f6      	bne.n	1e53c <atomic_or+0x2>
   1e54e:	4770      	bx	lr

0001e550 <atomic_test_and_set_bit>:
{
   1e550:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e552:	2301      	movs	r3, #1
   1e554:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e558:	f7ff ffef 	bl	1e53a <atomic_or>
	return (old & mask) != 0;
   1e55c:	4201      	tst	r1, r0
}
   1e55e:	bf14      	ite	ne
   1e560:	2001      	movne	r0, #1
   1e562:	2000      	moveq	r0, #0
   1e564:	bd08      	pop	{r3, pc}

0001e566 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1e566:	2207      	movs	r2, #7
   1e568:	f7ff bebd 	b.w	1e2e6 <memcmp>

0001e56c <atomic_and>:
{
   1e56c:	4603      	mov	r3, r0
}
   1e56e:	e8d3 0fef 	ldaex	r0, [r3]
   1e572:	ea00 0201 	and.w	r2, r0, r1
   1e576:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e57a:	f1bc 0f00 	cmp.w	ip, #0
   1e57e:	d1f6      	bne.n	1e56e <atomic_and+0x2>
   1e580:	4770      	bx	lr

0001e582 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1e582:	460b      	mov	r3, r1
   1e584:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e586:	f001 041f 	and.w	r4, r1, #31
   1e58a:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e58c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e58e:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e590:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1e594:	b112      	cbz	r2, 1e59c <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1e596:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e598:	f7ff bfcf 	b.w	1e53a <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e59c:	43c9      	mvns	r1, r1
}
   1e59e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e5a0:	f7ff bfe4 	b.w	1e56c <atomic_and>

0001e5a4 <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   1e5a4:	3008      	adds	r0, #8
   1e5a6:	f002 b84b 	b.w	20640 <net_buf_simple_add_u8>

0001e5aa <sys_put_le64>:
	dst[1] = val >> 8;
   1e5aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1e5ae:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   1e5b0:	2300      	movs	r3, #0
   1e5b2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1e5b4:	0e00      	lsrs	r0, r0, #24
   1e5b6:	70d0      	strb	r0, [r2, #3]
   1e5b8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1e5bc:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1e5be:	7093      	strb	r3, [r2, #2]
   1e5c0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1e5c2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1e5c4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1e5c6:	71d1      	strb	r1, [r2, #7]
}
   1e5c8:	4770      	bx	lr

0001e5ca <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1e5ca:	f100 0210 	add.w	r2, r0, #16
{
   1e5ce:	b508      	push	{r3, lr}
   1e5d0:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e5d2:	4610      	mov	r0, r2
   1e5d4:	f7ff ffab 	bl	1e52e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1e5d8:	0640      	lsls	r0, r0, #25
   1e5da:	d50a      	bpl.n	1e5f2 <adv_id_check_connectable_func+0x28>
   1e5dc:	4610      	mov	r0, r2
   1e5de:	f7ff ffa6 	bl	1e52e <atomic_get>
   1e5e2:	05c2      	lsls	r2, r0, #23
   1e5e4:	d505      	bpl.n	1e5f2 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1e5e6:	781a      	ldrb	r2, [r3, #0]
   1e5e8:	780b      	ldrb	r3, [r1, #0]
   1e5ea:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1e5ec:	bf1c      	itt	ne
   1e5ee:	2301      	movne	r3, #1
   1e5f0:	704b      	strbne	r3, [r1, #1]
}
   1e5f2:	bd08      	pop	{r3, pc}

0001e5f4 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1e5f4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e5f6:	2106      	movs	r1, #6
   1e5f8:	4668      	mov	r0, sp
   1e5fa:	f7f2 fcd5 	bl	10fa8 <bt_rand>
	if (err) {
   1e5fe:	b940      	cbnz	r0, 1e612 <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e600:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1e604:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e60a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1e60e:	f7f0 fd27 	bl	f060 <set_random_address>
}
   1e612:	b003      	add	sp, #12
   1e614:	f85d fb04 	ldr.w	pc, [sp], #4

0001e618 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e618:	f100 0310 	add.w	r3, r0, #16
{
   1e61c:	b510      	push	{r4, lr}
   1e61e:	4604      	mov	r4, r0
   1e620:	4618      	mov	r0, r3
   1e622:	f7ff ff84 	bl	1e52e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e626:	0642      	lsls	r2, r0, #25
   1e628:	d50a      	bpl.n	1e640 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e62a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1e62e:	4618      	mov	r0, r3
   1e630:	f7ff ff83 	bl	1e53a <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1e634:	4620      	mov	r0, r4
}
   1e636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e63a:	2100      	movs	r1, #0
   1e63c:	f7f0 bd3e 	b.w	f0bc <set_le_adv_enable_legacy>
}
   1e640:	bd10      	pop	{r4, pc}

0001e642 <adv_unpause_enabled>:
{
   1e642:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e644:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1e648:	4604      	mov	r4, r0
   1e64a:	3010      	adds	r0, #16
   1e64c:	f7ff ff8e 	bl	1e56c <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1e650:	0483      	lsls	r3, r0, #18
   1e652:	d505      	bpl.n	1e660 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1e654:	4620      	mov	r0, r4
}
   1e656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e65a:	2101      	movs	r1, #1
   1e65c:	f7f0 bd2e 	b.w	f0bc <set_le_adv_enable_legacy>
}
   1e660:	bd10      	pop	{r4, pc}

0001e662 <addr_res_enable>:
{
   1e662:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e664:	2101      	movs	r1, #1
{
   1e666:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e668:	f242 002d 	movw	r0, #8237	; 0x202d
   1e66c:	f7f0 fc2c 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1e670:	4604      	mov	r4, r0
   1e672:	b150      	cbz	r0, 1e68a <addr_res_enable+0x28>
	net_buf_add_u8(buf, enable);
   1e674:	4629      	mov	r1, r5
   1e676:	f7ff ff95 	bl	1e5a4 <net_buf_add_u8.isra.0>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e67a:	4621      	mov	r1, r4
}
   1e67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e680:	2200      	movs	r2, #0
   1e682:	f242 002d 	movw	r0, #8237	; 0x202d
   1e686:	f7f0 bc69 	b.w	ef5c <bt_hci_cmd_send_sync>
}
   1e68a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e68e:	bd38      	pop	{r3, r4, r5, pc}

0001e690 <set_le_scan_enable.isra.0>:
	return set_le_scan_enable_legacy(enable);
   1e690:	f7f0 bd40 	b.w	f114 <set_le_scan_enable_legacy>

0001e694 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e696:	4607      	mov	r7, r0
   1e698:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1e69a:	f242 0027 	movw	r0, #8231	; 0x2027
   1e69e:	2127      	movs	r1, #39	; 0x27
   1e6a0:	f7f0 fc12 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1e6a4:	4604      	mov	r4, r0
   1e6a6:	b1d0      	cbz	r0, 1e6de <hci_id_add.constprop.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e6a8:	2127      	movs	r1, #39	; 0x27
   1e6aa:	3008      	adds	r0, #8
   1e6ac:	f7f9 f8f4 	bl	17898 <net_buf_simple_add>
   1e6b0:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1e6b2:	4639      	mov	r1, r7
   1e6b4:	f7ff ff3e 	bl	1e534 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1e6b8:	4631      	mov	r1, r6
   1e6ba:	2210      	movs	r2, #16
   1e6bc:	1de8      	adds	r0, r5, #7
   1e6be:	f7ff fe23 	bl	1e308 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1e6c2:	2210      	movs	r2, #16
   1e6c4:	2100      	movs	r1, #0
   1e6c6:	f105 0017 	add.w	r0, r5, #23
   1e6ca:	f7ff fe48 	bl	1e35e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e6ce:	4621      	mov	r1, r4
}
   1e6d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e6d4:	2200      	movs	r2, #0
   1e6d6:	f242 0027 	movw	r0, #8231	; 0x2027
   1e6da:	f7f0 bc3f 	b.w	ef5c <bt_hci_cmd_send_sync>
}
   1e6de:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e6e4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e6e4:	7a03      	ldrb	r3, [r0, #8]
   1e6e6:	075b      	lsls	r3, r3, #29
   1e6e8:	d504      	bpl.n	1e6f4 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1e6ea:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1e6ee:	3001      	adds	r0, #1
   1e6f0:	f7ff bfd0 	b.w	1e694 <hci_id_add.constprop.0>
}
   1e6f4:	4770      	bx	lr

0001e6f6 <bt_lookup_id_addr>:
{
   1e6f6:	b510      	push	{r4, lr}
   1e6f8:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1e6fa:	f7f8 fd29 	bl	17150 <bt_keys_find_irk>
		if (keys) {
   1e6fe:	b100      	cbz	r0, 1e702 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1e700:	1c44      	adds	r4, r0, #1
}
   1e702:	4620      	mov	r0, r4
   1e704:	bd10      	pop	{r4, pc}

0001e706 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1e706:	f7f0 bf01 	b.w	f50c <bt_le_create_conn_legacy>

0001e70a <bt_hci_disconnect>:
{
   1e70a:	b570      	push	{r4, r5, r6, lr}
   1e70c:	4606      	mov	r6, r0
   1e70e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e710:	f240 4006 	movw	r0, #1030	; 0x406
   1e714:	2103      	movs	r1, #3
   1e716:	f7f0 fbd7 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1e71a:	4604      	mov	r4, r0
   1e71c:	b168      	cbz	r0, 1e73a <bt_hci_disconnect+0x30>
   1e71e:	2103      	movs	r1, #3
   1e720:	3008      	adds	r0, #8
   1e722:	f7f9 f8b9 	bl	17898 <net_buf_simple_add>
	disconn->reason = reason;
   1e726:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e728:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e72a:	4621      	mov	r1, r4
}
   1e72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e730:	2200      	movs	r2, #0
   1e732:	f240 4006 	movw	r0, #1030	; 0x406
   1e736:	f7f0 bc11 	b.w	ef5c <bt_hci_cmd_send_sync>
}
   1e73a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e73e:	bd70      	pop	{r4, r5, r6, pc}

0001e740 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e740:	8803      	ldrh	r3, [r0, #0]
   1e742:	8842      	ldrh	r2, [r0, #2]
{
   1e744:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e746:	4293      	cmp	r3, r2
   1e748:	d819      	bhi.n	1e77e <bt_le_conn_params_valid+0x3e>
   1e74a:	2b05      	cmp	r3, #5
   1e74c:	d917      	bls.n	1e77e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e74e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1e752:	d814      	bhi.n	1e77e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1e754:	8883      	ldrh	r3, [r0, #4]
   1e756:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e75a:	d210      	bcs.n	1e77e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e75c:	f640 4476 	movw	r4, #3190	; 0xc76
   1e760:	88c0      	ldrh	r0, [r0, #6]
   1e762:	f1a0 010a 	sub.w	r1, r0, #10
   1e766:	b289      	uxth	r1, r1
   1e768:	42a1      	cmp	r1, r4
   1e76a:	d808      	bhi.n	1e77e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1e76c:	3301      	adds	r3, #1
   1e76e:	b29b      	uxth	r3, r3
   1e770:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e772:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1e776:	bf34      	ite	cc
   1e778:	2001      	movcc	r0, #1
   1e77a:	2000      	movcs	r0, #0
}
   1e77c:	bd10      	pop	{r4, pc}
		return false;
   1e77e:	2000      	movs	r0, #0
   1e780:	e7fc      	b.n	1e77c <bt_le_conn_params_valid+0x3c>

0001e782 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1e782:	7a03      	ldrb	r3, [r0, #8]
   1e784:	07d9      	lsls	r1, r3, #31
   1e786:	d504      	bpl.n	1e792 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1e788:	f023 0301 	bic.w	r3, r3, #1
   1e78c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1e78e:	f7f0 bfb7 	b.w	f700 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1e792:	0799      	lsls	r1, r3, #30
   1e794:	d504      	bpl.n	1e7a0 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1e796:	f023 0302 	bic.w	r3, r3, #2
   1e79a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1e79c:	f7f1 b86e 	b.w	f87c <bt_id_del>
}
   1e7a0:	4770      	bx	lr

0001e7a2 <bt_le_set_data_len>:
{
   1e7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7a4:	4607      	mov	r7, r0
   1e7a6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e7a8:	f242 0022 	movw	r0, #8226	; 0x2022
   1e7ac:	2106      	movs	r1, #6
{
   1e7ae:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e7b0:	f7f0 fb8a 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1e7b4:	4604      	mov	r4, r0
   1e7b6:	b170      	cbz	r0, 1e7d6 <bt_le_set_data_len+0x34>
   1e7b8:	2106      	movs	r1, #6
   1e7ba:	3008      	adds	r0, #8
   1e7bc:	f7f9 f86c 	bl	17898 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e7c0:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e7c2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e7c4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e7c6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e7c8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e7ca:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e7ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e7d2:	f7f1 ba93 	b.w	fcfc <bt_hci_cmd_send>
}
   1e7d6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e7dc <bt_le_set_phy>:
{
   1e7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e7e0:	4680      	mov	r8, r0
   1e7e2:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e7e4:	f242 0032 	movw	r0, #8242	; 0x2032
   1e7e8:	2107      	movs	r1, #7
{
   1e7ea:	4616      	mov	r6, r2
   1e7ec:	461d      	mov	r5, r3
   1e7ee:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e7f2:	f7f0 fb69 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1e7f6:	4604      	mov	r4, r0
   1e7f8:	b190      	cbz	r0, 1e820 <bt_le_set_phy+0x44>
   1e7fa:	2107      	movs	r1, #7
   1e7fc:	3008      	adds	r0, #8
   1e7fe:	f7f9 f84b 	bl	17898 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e802:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e806:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e808:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e80a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e80c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e80e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e812:	4621      	mov	r1, r4
}
   1e814:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e818:	f242 0032 	movw	r0, #8242	; 0x2032
   1e81c:	f7f1 ba6e 	b.w	fcfc <bt_hci_cmd_send>
}
   1e820:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e828 <bt_addr_le_is_bonded>:
{
   1e828:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1e82a:	f7f8 fcc9 	bl	171c0 <bt_keys_find_addr>
		return keys && keys->keys;
   1e82e:	b118      	cbz	r0, 1e838 <bt_addr_le_is_bonded+0x10>
   1e830:	89c0      	ldrh	r0, [r0, #14]
   1e832:	3800      	subs	r0, #0
   1e834:	bf18      	it	ne
   1e836:	2001      	movne	r0, #1
}
   1e838:	bd08      	pop	{r3, pc}

0001e83a <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1e83a:	6880      	ldr	r0, [r0, #8]
   1e83c:	f7f2 b8f2 	b.w	10a24 <enh_conn_complete>

0001e840 <le_legacy_conn_complete>:
{
   1e840:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e842:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e844:	6881      	ldr	r1, [r0, #8]
{
   1e846:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1e848:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e84a:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1e84c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e850:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e854:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1e856:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e85a:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1e85e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e862:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1e866:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e86a:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1e86e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e872:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e876:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e87a:	7b4b      	ldrb	r3, [r1, #13]
   1e87c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e880:	f7ff fe58 	bl	1e534 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1e884:	4669      	mov	r1, sp
   1e886:	2206      	movs	r2, #6
   1e888:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e88c:	9400      	str	r4, [sp, #0]
   1e88e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e892:	f7ff fd39 	bl	1e308 <memcpy>
   1e896:	2206      	movs	r2, #6
   1e898:	4669      	mov	r1, sp
   1e89a:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e89e:	9400      	str	r4, [sp, #0]
   1e8a0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e8a4:	f7ff fd30 	bl	1e308 <memcpy>
	enh_conn_complete(&enh);
   1e8a8:	a802      	add	r0, sp, #8
   1e8aa:	f7f2 f8bb 	bl	10a24 <enh_conn_complete>
}
   1e8ae:	b00a      	add	sp, #40	; 0x28
   1e8b0:	bd10      	pop	{r4, pc}

0001e8b2 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1e8b2:	b530      	push	{r4, r5, lr}
   1e8b4:	b0b1      	sub	sp, #196	; 0xc4
   1e8b6:	460d      	mov	r5, r1
	uint8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   1e8b8:	4601      	mov	r1, r0
   1e8ba:	4668      	mov	r0, sp
{
   1e8bc:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   1e8be:	f7f2 fb1f 	bl	10f00 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1e8c2:	4669      	mov	r1, sp
   1e8c4:	a804      	add	r0, sp, #16
   1e8c6:	f7ee fded 	bl	d4a4 <tc_aes128_set_encrypt_key>
   1e8ca:	b1c0      	cbz	r0, 1e8fe <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   1e8cc:	4629      	mov	r1, r5
   1e8ce:	4668      	mov	r0, sp
   1e8d0:	f7f2 fb16 	bl	10f00 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1e8d4:	4669      	mov	r1, sp
   1e8d6:	4620      	mov	r0, r4
   1e8d8:	aa04      	add	r2, sp, #16
   1e8da:	f7ff f895 	bl	1da08 <tc_aes_encrypt>
   1e8de:	b170      	cbz	r0, 1e8fe <bt_encrypt_le+0x4c>
   1e8e0:	1e63      	subs	r3, r4, #1
   1e8e2:	f104 0210 	add.w	r2, r4, #16
   1e8e6:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1e8e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e8ec:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1e8f0:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e8f2:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1e8f4:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1e8f6:	d1f7      	bne.n	1e8e8 <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1e8f8:	2000      	movs	r0, #0
}
   1e8fa:	b031      	add	sp, #196	; 0xc4
   1e8fc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e8fe:	f06f 0015 	mvn.w	r0, #21
   1e902:	e7fa      	b.n	1e8fa <bt_encrypt_le+0x48>

0001e904 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e904:	e8d0 0faf 	lda	r0, [r0]
}
   1e908:	4770      	bx	lr

0001e90a <atomic_and>:
{
   1e90a:	4603      	mov	r3, r0
}
   1e90c:	e8d3 0fef 	ldaex	r0, [r3]
   1e910:	ea00 0201 	and.w	r2, r0, r1
   1e914:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e918:	f1bc 0f00 	cmp.w	ip, #0
   1e91c:	d1f6      	bne.n	1e90c <atomic_and+0x2>
   1e91e:	4770      	bx	lr

0001e920 <atomic_or>:
{
   1e920:	4603      	mov	r3, r0
}
   1e922:	e8d3 0fef 	ldaex	r0, [r3]
   1e926:	ea40 0201 	orr.w	r2, r0, r1
   1e92a:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e92e:	f1bc 0f00 	cmp.w	ip, #0
   1e932:	d1f6      	bne.n	1e922 <atomic_or+0x2>
   1e934:	4770      	bx	lr

0001e936 <tx_notify>:
{
   1e936:	b570      	push	{r4, r5, r6, lr}
   1e938:	4604      	mov	r4, r0
	__asm__ volatile(
   1e93a:	f04f 0220 	mov.w	r2, #32
   1e93e:	f3ef 8311 	mrs	r3, BASEPRI
   1e942:	f382 8811 	msr	BASEPRI, r2
   1e946:	f3bf 8f6f 	isb	sy
	return list->head;
   1e94a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e94c:	b920      	cbnz	r0, 1e958 <tx_notify+0x22>
	__asm__ volatile(
   1e94e:	f383 8811 	msr	BASEPRI, r3
   1e952:	f3bf 8f6f 	isb	sy
}
   1e956:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e958:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1e95a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e95c:	4288      	cmp	r0, r1
	list->tail = node;
   1e95e:	bf08      	it	eq
   1e960:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1e962:	6222      	str	r2, [r4, #32]
   1e964:	f383 8811 	msr	BASEPRI, r3
   1e968:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e96c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e970:	f7f2 fb32 	bl	10fd8 <tx_free>
		cb(conn, user_data);
   1e974:	4631      	mov	r1, r6
   1e976:	4620      	mov	r0, r4
   1e978:	47a8      	blx	r5
	while (1) {
   1e97a:	e7de      	b.n	1e93a <tx_notify+0x4>

0001e97c <tx_complete_work>:
	tx_notify(conn);
   1e97c:	3828      	subs	r0, #40	; 0x28
   1e97e:	f7ff bfda 	b.w	1e936 <tx_notify>

0001e982 <bt_conn_new>:
{
   1e982:	b538      	push	{r3, r4, r5, lr}
   1e984:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1e986:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e988:	2501      	movs	r5, #1
   1e98a:	428b      	cmp	r3, r1
   1e98c:	d102      	bne.n	1e994 <bt_conn_new+0x12>
		return NULL;
   1e98e:	2400      	movs	r4, #0
}
   1e990:	4620      	mov	r0, r4
   1e992:	bd38      	pop	{r3, r4, r5, pc}
   1e994:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1e998:	e8d2 0fef 	ldaex	r0, [r2]
   1e99c:	2800      	cmp	r0, #0
   1e99e:	d104      	bne.n	1e9aa <bt_conn_new+0x28>
   1e9a0:	e8c2 5fec 	stlex	ip, r5, [r2]
   1e9a4:	f1bc 0f00 	cmp.w	ip, #0
   1e9a8:	d1f6      	bne.n	1e998 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1e9aa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1e9ae:	d002      	beq.n	1e9b6 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1e9b0:	4604      	mov	r4, r0
   1e9b2:	3301      	adds	r3, #1
   1e9b4:	e7e9      	b.n	1e98a <bt_conn_new+0x8>
	if (!conn) {
   1e9b6:	2c00      	cmp	r4, #0
   1e9b8:	d0ea      	beq.n	1e990 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1e9ba:	22b8      	movs	r2, #184	; 0xb8
   1e9bc:	2100      	movs	r1, #0
   1e9be:	4620      	mov	r0, r4
   1e9c0:	f7ff fccd 	bl	1e35e <memset>
	return conn;
   1e9c4:	e7e4      	b.n	1e990 <bt_conn_new+0xe>

0001e9c6 <bt_conn_le_start_encryption>:
{
   1e9c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e9ca:	4682      	mov	sl, r0
   1e9cc:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   1e9ce:	f242 0019 	movw	r0, #8217	; 0x2019
   1e9d2:	211c      	movs	r1, #28
{
   1e9d4:	4690      	mov	r8, r2
   1e9d6:	461f      	mov	r7, r3
   1e9d8:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   1e9da:	f7f0 fa75 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1e9de:	4605      	mov	r5, r0
   1e9e0:	b340      	cbz	r0, 1ea34 <bt_conn_le_start_encryption+0x6e>
   1e9e2:	211c      	movs	r1, #28
   1e9e4:	3008      	adds	r0, #8
   1e9e6:	f7f8 ff57 	bl	17898 <net_buf_simple_add>
   1e9ea:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e9ec:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   1e9f0:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e9f2:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   1e9f6:	4649      	mov	r1, r9
   1e9f8:	f7ff fc86 	bl	1e308 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   1e9fc:	2202      	movs	r2, #2
   1e9fe:	4641      	mov	r1, r8
   1ea00:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   1ea04:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   1ea06:	f7ff fc7f 	bl	1e308 <memcpy>
	memcpy(cp->ltk, ltk, len);
   1ea0a:	4632      	mov	r2, r6
   1ea0c:	4639      	mov	r1, r7
   1ea0e:	4620      	mov	r0, r4
   1ea10:	f7ff fc7a 	bl	1e308 <memcpy>
	if (len < sizeof(cp->ltk)) {
   1ea14:	2e0f      	cmp	r6, #15
   1ea16:	d805      	bhi.n	1ea24 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   1ea18:	2100      	movs	r1, #0
   1ea1a:	f1c6 0210 	rsb	r2, r6, #16
   1ea1e:	19a0      	adds	r0, r4, r6
   1ea20:	f7ff fc9d 	bl	1e35e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   1ea24:	4629      	mov	r1, r5
}
   1ea26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   1ea2a:	2200      	movs	r2, #0
   1ea2c:	f242 0019 	movw	r0, #8217	; 0x2019
   1ea30:	f7f0 ba94 	b.w	ef5c <bt_hci_cmd_send_sync>
}
   1ea34:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ea38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ea3c <bt_conn_set_security>:
{
   1ea3c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ea3e:	7b43      	ldrb	r3, [r0, #13]
{
   1ea40:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ea42:	2b07      	cmp	r3, #7
{
   1ea44:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1ea46:	d11c      	bne.n	1ea82 <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1ea48:	7a43      	ldrb	r3, [r0, #9]
   1ea4a:	428b      	cmp	r3, r1
   1ea4c:	d21c      	bcs.n	1ea88 <bt_conn_set_security+0x4c>
   1ea4e:	7a83      	ldrb	r3, [r0, #10]
   1ea50:	428b      	cmp	r3, r1
   1ea52:	d219      	bcs.n	1ea88 <bt_conn_set_security+0x4c>
	if (val) {
   1ea54:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1ea56:	f100 0004 	add.w	r0, r0, #4
   1ea5a:	d50d      	bpl.n	1ea78 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ea5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1ea60:	f7ff ff5e 	bl	1e920 <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1ea64:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   1ea68:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1ea6a:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1ea6c:	f001 fcf4 	bl	20458 <bt_smp_start_security>
	if (err) {
   1ea70:	b108      	cbz	r0, 1ea76 <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   1ea72:	7a63      	ldrb	r3, [r4, #9]
   1ea74:	72a3      	strb	r3, [r4, #10]
}
   1ea76:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ea78:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1ea7c:	f7ff ff45 	bl	1e90a <atomic_and>
   1ea80:	e7f0      	b.n	1ea64 <bt_conn_set_security+0x28>
		return -ENOTCONN;
   1ea82:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1ea86:	e7f6      	b.n	1ea76 <bt_conn_set_security+0x3a>
		return 0;
   1ea88:	2000      	movs	r0, #0
   1ea8a:	e7f4      	b.n	1ea76 <bt_conn_set_security+0x3a>

0001ea8c <bt_conn_get_security>:
}
   1ea8c:	7a40      	ldrb	r0, [r0, #9]
   1ea8e:	4770      	bx	lr

0001ea90 <bt_conn_reset_rx_state>:
{
   1ea90:	b510      	push	{r4, lr}
   1ea92:	4604      	mov	r4, r0
	if (!conn->rx) {
   1ea94:	6900      	ldr	r0, [r0, #16]
   1ea96:	b118      	cbz	r0, 1eaa0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1ea98:	f7f8 fde8 	bl	1766c <net_buf_unref>
	conn->rx = NULL;
   1ea9c:	2300      	movs	r3, #0
   1ea9e:	6123      	str	r3, [r4, #16]
}
   1eaa0:	bd10      	pop	{r4, pc}

0001eaa2 <bt_conn_is_peer_addr_le>:
{
   1eaa2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1eaa4:	7a03      	ldrb	r3, [r0, #8]
{
   1eaa6:	4604      	mov	r4, r0
	if (id != conn->id) {
   1eaa8:	428b      	cmp	r3, r1
{
   1eaaa:	4615      	mov	r5, r2
	if (id != conn->id) {
   1eaac:	d115      	bne.n	1eada <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1eaae:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1eab2:	2207      	movs	r2, #7
   1eab4:	4628      	mov	r0, r5
   1eab6:	f7ff fc16 	bl	1e2e6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1eaba:	b180      	cbz	r0, 1eade <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1eabc:	78e3      	ldrb	r3, [r4, #3]
   1eabe:	2207      	movs	r2, #7
   1eac0:	b943      	cbnz	r3, 1ead4 <bt_conn_is_peer_addr_le+0x32>
   1eac2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1eac6:	4628      	mov	r0, r5
   1eac8:	f7ff fc0d 	bl	1e2e6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1eacc:	fab0 f080 	clz	r0, r0
   1ead0:	0940      	lsrs	r0, r0, #5
}
   1ead2:	bd38      	pop	{r3, r4, r5, pc}
   1ead4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ead8:	e7f5      	b.n	1eac6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1eada:	2000      	movs	r0, #0
   1eadc:	e7f9      	b.n	1ead2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1eade:	2001      	movs	r0, #1
   1eae0:	e7f7      	b.n	1ead2 <bt_conn_is_peer_addr_le+0x30>

0001eae2 <bt_conn_ref>:
{
   1eae2:	4603      	mov	r3, r0
   1eae4:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1eae6:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1eaea:	4610      	mov	r0, r2
   1eaec:	f7ff ff0a 	bl	1e904 <atomic_get>
		if (!old) {
   1eaf0:	b160      	cbz	r0, 1eb0c <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1eaf2:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1eaf4:	e8d2 4fef 	ldaex	r4, [r2]
   1eaf8:	4284      	cmp	r4, r0
   1eafa:	d104      	bne.n	1eb06 <bt_conn_ref+0x24>
   1eafc:	e8c2 1fec 	stlex	ip, r1, [r2]
   1eb00:	f1bc 0f00 	cmp.w	ip, #0
   1eb04:	d1f6      	bne.n	1eaf4 <bt_conn_ref+0x12>
   1eb06:	d1f0      	bne.n	1eaea <bt_conn_ref+0x8>
}
   1eb08:	4618      	mov	r0, r3
   1eb0a:	bd10      	pop	{r4, pc}
			return NULL;
   1eb0c:	4603      	mov	r3, r0
   1eb0e:	e7fb      	b.n	1eb08 <bt_conn_ref+0x26>

0001eb10 <conn_lookup_handle>:
{
   1eb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eb14:	4607      	mov	r7, r0
   1eb16:	460e      	mov	r6, r1
   1eb18:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1eb1a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1eb1c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1eb20:	42b4      	cmp	r4, r6
   1eb22:	d103      	bne.n	1eb2c <conn_lookup_handle+0x1c>
	return NULL;
   1eb24:	2300      	movs	r3, #0
}
   1eb26:	4618      	mov	r0, r3
   1eb28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1eb2c:	fb09 7004 	mla	r0, r9, r4, r7
   1eb30:	f7ff ffd7 	bl	1eae2 <bt_conn_ref>
   1eb34:	4603      	mov	r3, r0
		if (!conn) {
   1eb36:	b158      	cbz	r0, 1eb50 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1eb38:	7b45      	ldrb	r5, [r0, #13]
   1eb3a:	2d01      	cmp	r5, #1
   1eb3c:	d002      	beq.n	1eb44 <conn_lookup_handle+0x34>
   1eb3e:	3d07      	subs	r5, #7
   1eb40:	2d01      	cmp	r5, #1
   1eb42:	d803      	bhi.n	1eb4c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1eb44:	881a      	ldrh	r2, [r3, #0]
   1eb46:	4542      	cmp	r2, r8
   1eb48:	d0ed      	beq.n	1eb26 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1eb4a:	4618      	mov	r0, r3
   1eb4c:	f7f2 fcf4 	bl	11538 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1eb50:	3401      	adds	r4, #1
   1eb52:	e7e5      	b.n	1eb20 <conn_lookup_handle+0x10>

0001eb54 <bt_conn_get_dst>:
}
   1eb54:	3088      	adds	r0, #136	; 0x88
   1eb56:	4770      	bx	lr

0001eb58 <bt_conn_le_conn_update>:
{
   1eb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb5a:	4607      	mov	r7, r0
   1eb5c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1eb5e:	f242 0013 	movw	r0, #8211	; 0x2013
   1eb62:	210e      	movs	r1, #14
   1eb64:	f7f0 f9b0 	bl	eec8 <bt_hci_cmd_create>
	if (!buf) {
   1eb68:	4606      	mov	r6, r0
   1eb6a:	b1d0      	cbz	r0, 1eba2 <_flash_used+0xa>
   1eb6c:	210e      	movs	r1, #14
   1eb6e:	3008      	adds	r0, #8
   1eb70:	f7f8 fe92 	bl	17898 <net_buf_simple_add>
   1eb74:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1eb76:	220e      	movs	r2, #14
   1eb78:	2100      	movs	r1, #0
   1eb7a:	f7ff fbf0 	bl	1e35e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1eb7e:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1eb80:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1eb82:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1eb84:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1eb86:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1eb88:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1eb8a:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1eb8c:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1eb90:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1eb92:	88ab      	ldrh	r3, [r5, #4]
   1eb94:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1eb96:	88eb      	ldrh	r3, [r5, #6]
   1eb98:	8123      	strh	r3, [r4, #8]
}
   1eb9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1eb9e:	f7f0 b9dd 	b.w	ef5c <bt_hci_cmd_send_sync>
}
   1eba2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1eba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eba8 <l2cap_connected>:
}
   1eba8:	4770      	bx	lr

0001ebaa <l2cap_disconnected>:
   1ebaa:	4770      	bx	lr

0001ebac <bt_l2cap_chan_remove>:
	return list->head;
   1ebac:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ebae:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ebb0:	b17b      	cbz	r3, 1ebd2 <bt_l2cap_chan_remove+0x26>
   1ebb2:	2200      	movs	r2, #0
   1ebb4:	3b08      	subs	r3, #8
   1ebb6:	b163      	cbz	r3, 1ebd2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1ebb8:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1ebba:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1ebbe:	d10e      	bne.n	1ebde <bt_l2cap_chan_remove+0x32>
	return node->next;
   1ebc0:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1ebc2:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1ebc4:	b932      	cbnz	r2, 1ebd4 <bt_l2cap_chan_remove+0x28>
   1ebc6:	42ac      	cmp	r4, r5
	list->head = node;
   1ebc8:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1ebca:	d100      	bne.n	1ebce <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1ebcc:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1ebce:	2200      	movs	r2, #0
   1ebd0:	609a      	str	r2, [r3, #8]
}
   1ebd2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1ebd4:	42ac      	cmp	r4, r5
	parent->next = child;
   1ebd6:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1ebd8:	bf08      	it	eq
   1ebda:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1ebdc:	e7f7      	b.n	1ebce <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ebde:	2c00      	cmp	r4, #0
   1ebe0:	d0f7      	beq.n	1ebd2 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1ebe2:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ebe4:	2b00      	cmp	r3, #0
   1ebe6:	d0f4      	beq.n	1ebd2 <bt_l2cap_chan_remove+0x26>
   1ebe8:	4622      	mov	r2, r4
   1ebea:	3b08      	subs	r3, #8
   1ebec:	e7e3      	b.n	1ebb6 <bt_l2cap_chan_remove+0xa>

0001ebee <bt_l2cap_chan_del>:
{
   1ebee:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1ebf0:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1ebf4:	4604      	mov	r4, r0
	if (!chan->conn) {
   1ebf6:	b123      	cbz	r3, 1ec02 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1ebf8:	686b      	ldr	r3, [r5, #4]
   1ebfa:	b103      	cbz	r3, 1ebfe <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1ebfc:	4798      	blx	r3
	chan->conn = NULL;
   1ebfe:	2300      	movs	r3, #0
   1ec00:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1ec02:	68e3      	ldr	r3, [r4, #12]
   1ec04:	b10b      	cbz	r3, 1ec0a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1ec06:	4620      	mov	r0, r4
   1ec08:	4798      	blx	r3
	if (ops->released) {
   1ec0a:	69eb      	ldr	r3, [r5, #28]
   1ec0c:	b11b      	cbz	r3, 1ec16 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1ec0e:	4620      	mov	r0, r4
}
   1ec10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1ec14:	4718      	bx	r3
}
   1ec16:	bd70      	pop	{r4, r5, r6, pc}

0001ec18 <bt_l2cap_disconnected>:
	return list->head;
   1ec18:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ec1a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ec1c:	b18b      	cbz	r3, 1ec42 <bt_l2cap_disconnected+0x2a>
   1ec1e:	f1b3 0008 	subs.w	r0, r3, #8
   1ec22:	d00e      	beq.n	1ec42 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1ec24:	681c      	ldr	r4, [r3, #0]
   1ec26:	b104      	cbz	r4, 1ec2a <bt_l2cap_disconnected+0x12>
   1ec28:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ec2a:	f7ff ffe0 	bl	1ebee <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ec2e:	b144      	cbz	r4, 1ec42 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ec30:	f114 0308 	adds.w	r3, r4, #8
   1ec34:	d002      	beq.n	1ec3c <bt_l2cap_disconnected+0x24>
	return node->next;
   1ec36:	68a3      	ldr	r3, [r4, #8]
   1ec38:	b103      	cbz	r3, 1ec3c <bt_l2cap_disconnected+0x24>
   1ec3a:	3b08      	subs	r3, #8
{
   1ec3c:	4620      	mov	r0, r4
   1ec3e:	461c      	mov	r4, r3
   1ec40:	e7f3      	b.n	1ec2a <bt_l2cap_disconnected+0x12>
}
   1ec42:	bd10      	pop	{r4, pc}

0001ec44 <bt_l2cap_security_changed>:
{
   1ec44:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1ec46:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1ec48:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ec4a:	b1a3      	cbz	r3, 1ec76 <bt_l2cap_security_changed+0x32>
   1ec4c:	f1b3 0008 	subs.w	r0, r3, #8
   1ec50:	d011      	beq.n	1ec76 <bt_l2cap_security_changed+0x32>
	return node->next;
   1ec52:	681c      	ldr	r4, [r3, #0]
   1ec54:	b104      	cbz	r4, 1ec58 <bt_l2cap_security_changed+0x14>
   1ec56:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1ec58:	6843      	ldr	r3, [r0, #4]
   1ec5a:	689b      	ldr	r3, [r3, #8]
   1ec5c:	b10b      	cbz	r3, 1ec62 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1ec5e:	4629      	mov	r1, r5
   1ec60:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ec62:	b144      	cbz	r4, 1ec76 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ec64:	f114 0308 	adds.w	r3, r4, #8
   1ec68:	d002      	beq.n	1ec70 <bt_l2cap_security_changed+0x2c>
	return node->next;
   1ec6a:	68a3      	ldr	r3, [r4, #8]
   1ec6c:	b103      	cbz	r3, 1ec70 <bt_l2cap_security_changed+0x2c>
   1ec6e:	3b08      	subs	r3, #8
{
   1ec70:	4620      	mov	r0, r4
   1ec72:	461c      	mov	r4, r3
   1ec74:	e7f0      	b.n	1ec58 <bt_l2cap_security_changed+0x14>
}
   1ec76:	bd38      	pop	{r3, r4, r5, pc}

0001ec78 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ec78:	3104      	adds	r1, #4
   1ec7a:	f7f2 bfef 	b.w	11c5c <bt_conn_create_pdu_timeout>

0001ec7e <bt_l2cap_send_cb>:
{
   1ec7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec82:	4614      	mov	r4, r2
   1ec84:	4605      	mov	r5, r0
   1ec86:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ec88:	f102 0008 	add.w	r0, r2, #8
   1ec8c:	2104      	movs	r1, #4
   1ec8e:	461e      	mov	r6, r3
   1ec90:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ec94:	f7f8 fda8 	bl	177e8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ec98:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ec9a:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ec9c:	3a04      	subs	r2, #4
   1ec9e:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1eca0:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1eca2:	4632      	mov	r2, r6
   1eca4:	4621      	mov	r1, r4
   1eca6:	4628      	mov	r0, r5
}
   1eca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ecac:	f7f2 bb84 	b.w	113b8 <bt_conn_send_cb>

0001ecb0 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1ecb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ecb2:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ecb4:	2202      	movs	r2, #2
   1ecb6:	2001      	movs	r0, #1
   1ecb8:	f7f3 f926 	bl	11f08 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1ecbc:	4604      	mov	r4, r0
   1ecbe:	b160      	cbz	r0, 1ecda <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1ecc0:	2102      	movs	r1, #2
   1ecc2:	3008      	adds	r0, #8
   1ecc4:	f7f8 fde8 	bl	17898 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ecc8:	2300      	movs	r3, #0
   1ecca:	4622      	mov	r2, r4
   1eccc:	7003      	strb	r3, [r0, #0]
   1ecce:	7043      	strb	r3, [r0, #1]
   1ecd0:	2105      	movs	r1, #5
   1ecd2:	4628      	mov	r0, r5
   1ecd4:	9300      	str	r3, [sp, #0]
   1ecd6:	f7ff ffd2 	bl	1ec7e <bt_l2cap_send_cb>
}
   1ecda:	b003      	add	sp, #12
   1ecdc:	bd30      	pop	{r4, r5, pc}

0001ecde <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1ecde:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ece0:	b160      	cbz	r0, 1ecfc <bt_l2cap_le_lookup_tx_cid+0x1e>
   1ece2:	3808      	subs	r0, #8
   1ece4:	b900      	cbnz	r0, 1ece8 <bt_l2cap_le_lookup_tx_cid+0xa>
   1ece6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ece8:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1ecec:	428b      	cmp	r3, r1
   1ecee:	d005      	beq.n	1ecfc <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ecf0:	f110 0308 	adds.w	r3, r0, #8
   1ecf4:	d001      	beq.n	1ecfa <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1ecf6:	6880      	ldr	r0, [r0, #8]
   1ecf8:	e7f2      	b.n	1ece0 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ecfa:	4618      	mov	r0, r3
}
   1ecfc:	4770      	bx	lr

0001ecfe <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ecfe:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed00:	b160      	cbz	r0, 1ed1c <bt_l2cap_le_lookup_rx_cid+0x1e>
   1ed02:	3808      	subs	r0, #8
   1ed04:	b900      	cbnz	r0, 1ed08 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ed06:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ed08:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1ed0c:	428b      	cmp	r3, r1
   1ed0e:	d005      	beq.n	1ed1c <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed10:	f110 0308 	adds.w	r3, r0, #8
   1ed14:	d001      	beq.n	1ed1a <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1ed16:	6880      	ldr	r0, [r0, #8]
   1ed18:	e7f2      	b.n	1ed00 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ed1a:	4618      	mov	r0, r3
}
   1ed1c:	4770      	bx	lr

0001ed1e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ed1e:	4770      	bx	lr

0001ed20 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ed20:	4603      	mov	r3, r0
	return list->head;
   1ed22:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ed24:	b128      	cbz	r0, 1ed32 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ed26:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1ed28:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ed2a:	4288      	cmp	r0, r1
	list->head = node;
   1ed2c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1ed2e:	bf08      	it	eq
   1ed30:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ed32:	4770      	bx	lr

0001ed34 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ed34:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ed36:	2000      	movs	r0, #0

	while (buf) {
   1ed38:	b903      	cbnz	r3, 1ed3c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ed3a:	4770      	bx	lr
		bytes += buf->len;
   1ed3c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ed3e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ed40:	4410      	add	r0, r2
		buf = buf->frags;
   1ed42:	e7f9      	b.n	1ed38 <net_buf_frags_len+0x4>

0001ed44 <att_sent>:
	if (chan->ops->sent) {
   1ed44:	684b      	ldr	r3, [r1, #4]
{
   1ed46:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1ed48:	695b      	ldr	r3, [r3, #20]
   1ed4a:	b103      	cbz	r3, 1ed4e <att_sent+0xa>
		chan->ops->sent(chan);
   1ed4c:	4718      	bx	r3
}
   1ed4e:	4770      	bx	lr

0001ed50 <attr_read_type_cb>:
{
   1ed50:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ed52:	68d4      	ldr	r4, [r2, #12]
   1ed54:	3102      	adds	r1, #2
   1ed56:	7823      	ldrb	r3, [r4, #0]
   1ed58:	b913      	cbnz	r3, 1ed60 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ed5a:	7021      	strb	r1, [r4, #0]
	return true;
   1ed5c:	2001      	movs	r0, #1
   1ed5e:	e006      	b.n	1ed6e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ed60:	428b      	cmp	r3, r1
   1ed62:	d0fb      	beq.n	1ed5c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ed64:	8983      	ldrh	r3, [r0, #12]
   1ed66:	3b02      	subs	r3, #2
   1ed68:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ed6a:	2000      	movs	r0, #0
   1ed6c:	6110      	str	r0, [r2, #16]
}
   1ed6e:	bd10      	pop	{r4, pc}

0001ed70 <att_prepare_write_req>:
}
   1ed70:	2006      	movs	r0, #6
   1ed72:	4770      	bx	lr

0001ed74 <att_op_get_type>:
	switch (op) {
   1ed74:	281e      	cmp	r0, #30
   1ed76:	d816      	bhi.n	1eda6 <att_op_get_type+0x32>
   1ed78:	b308      	cbz	r0, 1edbe <att_op_get_type+0x4a>
   1ed7a:	1e43      	subs	r3, r0, #1
   1ed7c:	2b1d      	cmp	r3, #29
   1ed7e:	d81e      	bhi.n	1edbe <att_op_get_type+0x4a>
   1ed80:	e8df f003 	tbb	[pc, r3]
   1ed84:	23172317 	.word	0x23172317
   1ed88:	23172317 	.word	0x23172317
   1ed8c:	23172317 	.word	0x23172317
   1ed90:	23172317 	.word	0x23172317
   1ed94:	1d172317 	.word	0x1d172317
   1ed98:	2317231d 	.word	0x2317231d
   1ed9c:	1d191d17 	.word	0x1d191d17
   1eda0:	0f1b      	.short	0x0f1b
   1eda2:	2004      	movs	r0, #4
   1eda4:	4770      	bx	lr
   1eda6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1edaa:	2b52      	cmp	r3, #82	; 0x52
   1edac:	d107      	bne.n	1edbe <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1edae:	2000      	movs	r0, #0
}
   1edb0:	4770      	bx	lr
		return ATT_RESPONSE;
   1edb2:	2002      	movs	r0, #2
   1edb4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1edb6:	2003      	movs	r0, #3
   1edb8:	4770      	bx	lr
		return ATT_INDICATION;
   1edba:	2005      	movs	r0, #5
   1edbc:	4770      	bx	lr
		return ATT_COMMAND;
   1edbe:	f010 0f40 	tst.w	r0, #64	; 0x40
   1edc2:	bf0c      	ite	eq
   1edc4:	2006      	moveq	r0, #6
   1edc6:	2000      	movne	r0, #0
   1edc8:	4770      	bx	lr
		return ATT_REQUEST;
   1edca:	2001      	movs	r0, #1
   1edcc:	4770      	bx	lr

0001edce <att_notify_mult>:
{
   1edce:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1edd0:	6803      	ldr	r3, [r0, #0]
   1edd2:	898a      	ldrh	r2, [r1, #12]
   1edd4:	6818      	ldr	r0, [r3, #0]
   1edd6:	6889      	ldr	r1, [r1, #8]
   1edd8:	f7f6 f91c 	bl	15014 <bt_gatt_mult_notification>
}
   1eddc:	2000      	movs	r0, #0
   1edde:	bd08      	pop	{r3, pc}

0001ede0 <att_notify>:
{
   1ede0:	b538      	push	{r3, r4, r5, lr}
   1ede2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1ede4:	f101 0008 	add.w	r0, r1, #8
   1ede8:	460c      	mov	r4, r1
   1edea:	f001 fc09 	bl	20600 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1edee:	682d      	ldr	r5, [r5, #0]
   1edf0:	4601      	mov	r1, r0
   1edf2:	89a3      	ldrh	r3, [r4, #12]
   1edf4:	6828      	ldr	r0, [r5, #0]
   1edf6:	68a2      	ldr	r2, [r4, #8]
   1edf8:	f000 fe9a 	bl	1fb30 <bt_gatt_notification>
}
   1edfc:	2000      	movs	r0, #0
   1edfe:	bd38      	pop	{r3, r4, r5, pc}

0001ee00 <bt_gatt_foreach_attr>:
{
   1ee00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ee02:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ee06:	2300      	movs	r3, #0
   1ee08:	461a      	mov	r2, r3
   1ee0a:	9300      	str	r3, [sp, #0]
   1ee0c:	f7f5 f854 	bl	13eb8 <bt_gatt_foreach_attr_type>
}
   1ee10:	b005      	add	sp, #20
   1ee12:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee16 <find_info_cb>:
{
   1ee16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ee18:	6893      	ldr	r3, [r2, #8]
{
   1ee1a:	4605      	mov	r5, r0
   1ee1c:	460e      	mov	r6, r1
   1ee1e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1ee20:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1ee22:	b963      	cbnz	r3, 1ee3e <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ee24:	6850      	ldr	r0, [r2, #4]
   1ee26:	2101      	movs	r1, #1
   1ee28:	3008      	adds	r0, #8
   1ee2a:	f7f8 fd35 	bl	17898 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ee2e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ee30:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ee32:	781b      	ldrb	r3, [r3, #0]
   1ee34:	2b00      	cmp	r3, #0
   1ee36:	bf0c      	ite	eq
   1ee38:	2301      	moveq	r3, #1
   1ee3a:	2302      	movne	r3, #2
   1ee3c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ee3e:	68a3      	ldr	r3, [r4, #8]
   1ee40:	781b      	ldrb	r3, [r3, #0]
   1ee42:	2b01      	cmp	r3, #1
   1ee44:	d003      	beq.n	1ee4e <find_info_cb+0x38>
   1ee46:	2b02      	cmp	r3, #2
   1ee48:	d019      	beq.n	1ee7e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ee4a:	2000      	movs	r0, #0
   1ee4c:	e016      	b.n	1ee7c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ee4e:	682b      	ldr	r3, [r5, #0]
   1ee50:	781b      	ldrb	r3, [r3, #0]
   1ee52:	2b00      	cmp	r3, #0
   1ee54:	d1f9      	bne.n	1ee4a <find_info_cb+0x34>
   1ee56:	6860      	ldr	r0, [r4, #4]
   1ee58:	2104      	movs	r1, #4
   1ee5a:	3008      	adds	r0, #8
   1ee5c:	f7f8 fd1c 	bl	17898 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ee60:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ee62:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ee64:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1ee66:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ee68:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1ee6a:	6863      	ldr	r3, [r4, #4]
   1ee6c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1ee70:	899b      	ldrh	r3, [r3, #12]
   1ee72:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ee74:	2804      	cmp	r0, #4
   1ee76:	bf94      	ite	ls
   1ee78:	2000      	movls	r0, #0
   1ee7a:	2001      	movhi	r0, #1
}
   1ee7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ee7e:	682b      	ldr	r3, [r5, #0]
   1ee80:	781b      	ldrb	r3, [r3, #0]
   1ee82:	2b02      	cmp	r3, #2
   1ee84:	d1e1      	bne.n	1ee4a <find_info_cb+0x34>
   1ee86:	6860      	ldr	r0, [r4, #4]
   1ee88:	2112      	movs	r1, #18
   1ee8a:	3008      	adds	r0, #8
   1ee8c:	f7f8 fd04 	bl	17898 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ee90:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ee92:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ee94:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1ee96:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ee9a:	3101      	adds	r1, #1
   1ee9c:	f7ff fa34 	bl	1e308 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1eea0:	6863      	ldr	r3, [r4, #4]
   1eea2:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1eea6:	899b      	ldrh	r3, [r3, #12]
   1eea8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1eeaa:	2812      	cmp	r0, #18
   1eeac:	e7e3      	b.n	1ee76 <find_info_cb+0x60>

0001eeae <attr_read_group_cb>:
	if (!data->rsp->len) {
   1eeae:	68d0      	ldr	r0, [r2, #12]
   1eeb0:	3104      	adds	r1, #4
   1eeb2:	7803      	ldrb	r3, [r0, #0]
   1eeb4:	b913      	cbnz	r3, 1eebc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1eeb6:	7001      	strb	r1, [r0, #0]
	return true;
   1eeb8:	2001      	movs	r0, #1
}
   1eeba:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1eebc:	428b      	cmp	r3, r1
   1eebe:	d0fb      	beq.n	1eeb8 <attr_read_group_cb+0xa>
		data->group = NULL;
   1eec0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1eec2:	6891      	ldr	r1, [r2, #8]
   1eec4:	898b      	ldrh	r3, [r1, #12]
   1eec6:	3b04      	subs	r3, #4
   1eec8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1eeca:	6110      	str	r0, [r2, #16]
		return false;
   1eecc:	4770      	bx	lr

0001eece <write_cb>:
{
   1eece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eed0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1eed2:	4601      	mov	r1, r0
{
   1eed4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1eed6:	222a      	movs	r2, #42	; 0x2a
   1eed8:	6820      	ldr	r0, [r4, #0]
   1eeda:	f000 fd92 	bl	1fa02 <bt_gatt_check_perm>
   1eede:	4605      	mov	r5, r0
   1eee0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1eee2:	bb00      	cbnz	r0, 1ef26 <write_cb+0x58>
	if (!data->req) {
   1eee4:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1eee6:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1eee8:	2b00      	cmp	r3, #0
   1eeea:	bf14      	ite	ne
   1eeec:	2300      	movne	r3, #0
   1eeee:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1eef0:	9301      	str	r3, [sp, #4]
   1eef2:	8a63      	ldrh	r3, [r4, #18]
   1eef4:	68b7      	ldr	r7, [r6, #8]
   1eef6:	9300      	str	r3, [sp, #0]
   1eef8:	68e2      	ldr	r2, [r4, #12]
   1eefa:	8a23      	ldrh	r3, [r4, #16]
   1eefc:	6820      	ldr	r0, [r4, #0]
   1eefe:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1ef00:	1e03      	subs	r3, r0, #0
   1ef02:	db05      	blt.n	1ef10 <write_cb+0x42>
   1ef04:	8a22      	ldrh	r2, [r4, #16]
   1ef06:	4293      	cmp	r3, r2
   1ef08:	d10b      	bne.n	1ef22 <write_cb+0x54>
	data->err = 0U;
   1ef0a:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1ef0c:	2501      	movs	r5, #1
   1ef0e:	e005      	b.n	1ef1c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1ef10:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1ef14:	d305      	bcc.n	1ef22 <write_cb+0x54>
		return -err;
   1ef16:	425b      	negs	r3, r3
   1ef18:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1ef1a:	7523      	strb	r3, [r4, #20]
}
   1ef1c:	4628      	mov	r0, r5
   1ef1e:	b003      	add	sp, #12
   1ef20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1ef22:	230e      	movs	r3, #14
   1ef24:	e7f9      	b.n	1ef1a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1ef26:	2500      	movs	r5, #0
   1ef28:	e7f8      	b.n	1ef1c <write_cb+0x4e>

0001ef2a <att_chan_read>:
{
   1ef2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef2e:	4680      	mov	r8, r0
   1ef30:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1ef32:	4610      	mov	r0, r2
{
   1ef34:	4699      	mov	r9, r3
   1ef36:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1ef38:	f7ff fefc 	bl	1ed34 <net_buf_frags_len>
   1ef3c:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1ef40:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1ef42:	4283      	cmp	r3, r0
   1ef44:	d97a      	bls.n	1f03c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ef46:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1ef4a:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1ef4c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1ef4e:	f7f8 fbe9 	bl	17724 <net_buf_frag_last>
	size_t len, total = 0;
   1ef52:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1ef56:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ef58:	4630      	mov	r0, r6
   1ef5a:	f7ff feeb 	bl	1ed34 <net_buf_frags_len>
   1ef5e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1ef62:	f105 0708 	add.w	r7, r5, #8
   1ef66:	1a24      	subs	r4, r4, r0
   1ef68:	4638      	mov	r0, r7
   1ef6a:	f001 fb55 	bl	20618 <net_buf_simple_tailroom>
   1ef6e:	4284      	cmp	r4, r0
   1ef70:	d211      	bcs.n	1ef96 <att_chan_read+0x6c>
   1ef72:	4630      	mov	r0, r6
   1ef74:	f7ff fede 	bl	1ed34 <net_buf_frags_len>
   1ef78:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ef7c:	1a24      	subs	r4, r4, r0
		if (!len) {
   1ef7e:	bb34      	cbnz	r4, 1efce <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1ef80:	79b0      	ldrb	r0, [r6, #6]
   1ef82:	f7f8 f9f3 	bl	1736c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ef86:	2200      	movs	r2, #0
   1ef88:	2300      	movs	r3, #0
   1ef8a:	f001 fb1f 	bl	205cc <net_buf_alloc_fixed>
			if (!frag) {
   1ef8e:	4605      	mov	r5, r0
   1ef90:	b930      	cbnz	r0, 1efa0 <att_chan_read+0x76>
	return total;
   1ef92:	4657      	mov	r7, sl
   1ef94:	e02c      	b.n	1eff0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1ef96:	4638      	mov	r0, r7
   1ef98:	f001 fb3e 	bl	20618 <net_buf_simple_tailroom>
   1ef9c:	4604      	mov	r4, r0
   1ef9e:	e7ee      	b.n	1ef7e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1efa0:	4601      	mov	r1, r0
   1efa2:	4630      	mov	r0, r6
   1efa4:	f7f8 fbfe 	bl	177a4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1efa8:	4630      	mov	r0, r6
   1efaa:	f7ff fec3 	bl	1ed34 <net_buf_frags_len>
   1efae:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1efb2:	f105 0708 	add.w	r7, r5, #8
   1efb6:	1a24      	subs	r4, r4, r0
   1efb8:	4638      	mov	r0, r7
   1efba:	f001 fb2d 	bl	20618 <net_buf_simple_tailroom>
   1efbe:	4284      	cmp	r4, r0
   1efc0:	d21a      	bcs.n	1eff8 <att_chan_read+0xce>
   1efc2:	4630      	mov	r0, r6
   1efc4:	f7ff feb6 	bl	1ed34 <net_buf_frags_len>
   1efc8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1efcc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1efce:	68a9      	ldr	r1, [r5, #8]
   1efd0:	89aa      	ldrh	r2, [r5, #12]
   1efd2:	f8db 7004 	ldr.w	r7, [fp, #4]
   1efd6:	440a      	add	r2, r1
   1efd8:	9803      	ldr	r0, [sp, #12]
   1efda:	4659      	mov	r1, fp
   1efdc:	f8cd 9000 	str.w	r9, [sp]
   1efe0:	b2a3      	uxth	r3, r4
   1efe2:	47b8      	blx	r7
		if (read < 0) {
   1efe4:	1e07      	subs	r7, r0, #0
   1efe6:	da0c      	bge.n	1f002 <att_chan_read+0xd8>
				return total;
   1efe8:	f1ba 0f00 	cmp.w	sl, #0
   1efec:	bf18      	it	ne
   1efee:	4657      	movne	r7, sl
}
   1eff0:	4638      	mov	r0, r7
   1eff2:	b005      	add	sp, #20
   1eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eff8:	4638      	mov	r0, r7
   1effa:	f001 fb0d 	bl	20618 <net_buf_simple_tailroom>
   1effe:	4604      	mov	r4, r0
   1f000:	e7e5      	b.n	1efce <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1f002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f004:	b993      	cbnz	r3, 1f02c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1f006:	4639      	mov	r1, r7
   1f008:	f105 0008 	add.w	r0, r5, #8
   1f00c:	f7f8 fc44 	bl	17898 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f010:	4630      	mov	r0, r6
   1f012:	f7ff fe8f 	bl	1ed34 <net_buf_frags_len>
   1f016:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1f01a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f01c:	4283      	cmp	r3, r0
		total += read;
   1f01e:	44ba      	add	sl, r7
		offset += read;
   1f020:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f024:	d9b5      	bls.n	1ef92 <att_chan_read+0x68>
   1f026:	42a7      	cmp	r7, r4
   1f028:	d096      	beq.n	1ef58 <att_chan_read+0x2e>
   1f02a:	e7b2      	b.n	1ef92 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1f02c:	4639      	mov	r1, r7
   1f02e:	4628      	mov	r0, r5
   1f030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f034:	4798      	blx	r3
   1f036:	2800      	cmp	r0, #0
   1f038:	d1e5      	bne.n	1f006 <att_chan_read+0xdc>
   1f03a:	e7aa      	b.n	1ef92 <att_chan_read+0x68>
		return 0;
   1f03c:	2700      	movs	r7, #0
   1f03e:	e7d7      	b.n	1eff0 <att_chan_read+0xc6>

0001f040 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f040:	2200      	movs	r2, #0
   1f042:	b510      	push	{r4, lr}
	return list->head;
   1f044:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f046:	b153      	cbz	r3, 1f05e <sys_slist_find_and_remove.isra.0+0x1e>
   1f048:	428b      	cmp	r3, r1
   1f04a:	d10e      	bne.n	1f06a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1f04c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1f04e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f050:	b932      	cbnz	r2, 1f060 <sys_slist_find_and_remove.isra.0+0x20>
   1f052:	42a1      	cmp	r1, r4
	list->head = node;
   1f054:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f056:	d100      	bne.n	1f05a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1f058:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1f05a:	2300      	movs	r3, #0
   1f05c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f05e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f060:	42a1      	cmp	r1, r4
	parent->next = child;
   1f062:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f064:	bf08      	it	eq
   1f066:	6042      	streq	r2, [r0, #4]
}
   1f068:	e7f7      	b.n	1f05a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1f06a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f06c:	681b      	ldr	r3, [r3, #0]
   1f06e:	e7ea      	b.n	1f046 <sys_slist_find_and_remove.isra.0+0x6>

0001f070 <att_exec_write_req>:
   1f070:	2006      	movs	r0, #6
   1f072:	4770      	bx	lr

0001f074 <chan_req_send>:
{
   1f074:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f076:	690e      	ldr	r6, [r1, #16]
{
   1f078:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f07a:	4630      	mov	r0, r6
   1f07c:	f7ff fe5a 	bl	1ed34 <net_buf_frags_len>
   1f080:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1f084:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f086:	4283      	cmp	r3, r0
   1f088:	d317      	bcc.n	1f0ba <chan_req_send+0x46>
	chan->req = req;
   1f08a:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1f08e:	f106 0008 	add.w	r0, r6, #8
   1f092:	f001 fabd 	bl	20610 <net_buf_simple_headroom>
	state->len = buf->len;
   1f096:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1f098:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1f09a:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1f09c:	6920      	ldr	r0, [r4, #16]
   1f09e:	f7f8 fb29 	bl	176f4 <net_buf_ref>
   1f0a2:	2200      	movs	r2, #0
   1f0a4:	4601      	mov	r1, r0
   1f0a6:	4628      	mov	r0, r5
   1f0a8:	f7f3 fa62 	bl	12570 <chan_send>
	if (err) {
   1f0ac:	4605      	mov	r5, r0
   1f0ae:	b110      	cbz	r0, 1f0b6 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1f0b0:	6920      	ldr	r0, [r4, #16]
   1f0b2:	f7f8 fadb 	bl	1766c <net_buf_unref>
}
   1f0b6:	4628      	mov	r0, r5
   1f0b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1f0ba:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1f0be:	e7fa      	b.n	1f0b6 <chan_req_send+0x42>

0001f0c0 <bt_att_chan_send>:
{
   1f0c0:	b570      	push	{r4, r5, r6, lr}
   1f0c2:	4604      	mov	r4, r0
   1f0c4:	460e      	mov	r6, r1
	if (!cb) {
   1f0c6:	4615      	mov	r5, r2
   1f0c8:	b132      	cbz	r2, 1f0d8 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1f0ca:	462a      	mov	r2, r5
   1f0cc:	4631      	mov	r1, r6
   1f0ce:	4620      	mov	r0, r4
}
   1f0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1f0d4:	f7f3 ba4c 	b.w	12570 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1f0d8:	2200      	movs	r2, #0
   1f0da:	2300      	movs	r3, #0
   1f0dc:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1f0e0:	f7fc fad6 	bl	1b690 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1f0e4:	2800      	cmp	r0, #0
   1f0e6:	daf0      	bge.n	1f0ca <bt_att_chan_send+0xa>
}
   1f0e8:	f06f 000a 	mvn.w	r0, #10
   1f0ec:	bd70      	pop	{r4, r5, r6, pc}

0001f0ee <bt_att_chan_send_rsp>:
{
   1f0ee:	b538      	push	{r3, r4, r5, lr}
   1f0f0:	4604      	mov	r4, r0
   1f0f2:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1f0f4:	f7ff ffe4 	bl	1f0c0 <bt_att_chan_send>
	if (err) {
   1f0f8:	b130      	cbz	r0, 1f108 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1f0fa:	4629      	mov	r1, r5
   1f0fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1f100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1f104:	f7f8 ba84 	b.w	17610 <net_buf_put>
}
   1f108:	bd38      	pop	{r3, r4, r5, pc}

0001f10a <process_queue>:
{
   1f10a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1f10c:	2200      	movs	r2, #0
{
   1f10e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1f110:	2300      	movs	r3, #0
   1f112:	4608      	mov	r0, r1
{
   1f114:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1f116:	f7f8 fa27 	bl	17568 <net_buf_get>
	if (buf) {
   1f11a:	4605      	mov	r5, r0
   1f11c:	b160      	cbz	r0, 1f138 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1f11e:	4601      	mov	r1, r0
   1f120:	2200      	movs	r2, #0
   1f122:	4620      	mov	r0, r4
   1f124:	f7f3 fa24 	bl	12570 <chan_send>
		if (err) {
   1f128:	4604      	mov	r4, r0
   1f12a:	b118      	cbz	r0, 1f134 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1f12c:	4629      	mov	r1, r5
   1f12e:	4630      	mov	r0, r6
   1f130:	f002 f94d 	bl	213ce <k_queue_prepend>
}
   1f134:	4620      	mov	r0, r4
   1f136:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1f138:	f06f 0401 	mvn.w	r4, #1
   1f13c:	e7fa      	b.n	1f134 <process_queue+0x2a>

0001f13e <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f13e:	30c8      	adds	r0, #200	; 0xc8
   1f140:	e8d0 3fef 	ldaex	r3, [r0]
   1f144:	f023 0301 	bic.w	r3, r3, #1
   1f148:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1f14c:	2a00      	cmp	r2, #0
   1f14e:	d1f7      	bne.n	1f140 <chan_rsp_sent+0x2>
}
   1f150:	4770      	bx	lr

0001f152 <chan_cfm_sent>:
   1f152:	30c8      	adds	r0, #200	; 0xc8
   1f154:	e8d0 3fef 	ldaex	r3, [r0]
   1f158:	f023 0302 	bic.w	r3, r3, #2
   1f15c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1f160:	2a00      	cmp	r2, #0
   1f162:	d1f7      	bne.n	1f154 <chan_cfm_sent+0x2>
}
   1f164:	4770      	bx	lr

0001f166 <read_cb>:
{
   1f166:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f16a:	4606      	mov	r6, r0
	data->err = 0x00;
   1f16c:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1f16e:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f172:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1f174:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f178:	4631      	mov	r1, r6
	data->err = 0x00;
   1f17a:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f17c:	2215      	movs	r2, #21
   1f17e:	f000 fc40 	bl	1fa02 <bt_gatt_check_perm>
   1f182:	4604      	mov	r4, r0
   1f184:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f186:	b9a0      	cbnz	r0, 1f1b2 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f188:	e9cd 0000 	strd	r0, r0, [sp]
   1f18c:	88ab      	ldrh	r3, [r5, #4]
   1f18e:	4631      	mov	r1, r6
   1f190:	4640      	mov	r0, r8
   1f192:	68aa      	ldr	r2, [r5, #8]
   1f194:	f7ff fec9 	bl	1ef2a <att_chan_read>
	if (ret < 0) {
   1f198:	1e03      	subs	r3, r0, #0
   1f19a:	da0c      	bge.n	1f1b6 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f19c:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1f1a0:	bf32      	itee	cc
   1f1a2:	230e      	movcc	r3, #14
		return -err;
   1f1a4:	425b      	negcs	r3, r3
   1f1a6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1f1a8:	732b      	strb	r3, [r5, #12]
}
   1f1aa:	4620      	mov	r0, r4
   1f1ac:	b002      	add	sp, #8
   1f1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f1b2:	463c      	mov	r4, r7
   1f1b4:	e7f9      	b.n	1f1aa <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f1b6:	2401      	movs	r4, #1
   1f1b8:	e7f7      	b.n	1f1aa <read_cb+0x44>

0001f1ba <bt_att_sent>:
{
   1f1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f1bc:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1f1c0:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1f1c2:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f1c6:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f1ca:	b10b      	cbz	r3, 1f1d0 <bt_att_sent+0x16>
		chan->sent(chan);
   1f1cc:	4638      	mov	r0, r7
   1f1ce:	4798      	blx	r3
   1f1d0:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1f1d4:	e8d3 2fef 	ldaex	r2, [r3]
   1f1d8:	f022 0210 	bic.w	r2, r2, #16
   1f1dc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f1e0:	2900      	cmp	r1, #0
   1f1e2:	d1f7      	bne.n	1f1d4 <bt_att_sent+0x1a>
	if (!att) {
   1f1e4:	b335      	cbz	r5, 1f234 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f1e6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f1ea:	b98b      	cbnz	r3, 1f210 <bt_att_sent+0x56>
   1f1ec:	686b      	ldr	r3, [r5, #4]
   1f1ee:	b17b      	cbz	r3, 1f210 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f1f0:	1d28      	adds	r0, r5, #4
   1f1f2:	f7ff fd95 	bl	1ed20 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f1f6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f1f8:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f1fa:	4638      	mov	r0, r7
   1f1fc:	f7ff ff3a 	bl	1f074 <chan_req_send>
   1f200:	2800      	cmp	r0, #0
   1f202:	da17      	bge.n	1f234 <bt_att_sent+0x7a>
	parent->next = child;
   1f204:	686b      	ldr	r3, [r5, #4]
   1f206:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f208:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f20a:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f20c:	b903      	cbnz	r3, 1f210 <bt_att_sent+0x56>
	list->tail = node;
   1f20e:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f210:	4638      	mov	r0, r7
   1f212:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1f216:	f7ff ff78 	bl	1f10a <process_queue>
	if (!err) {
   1f21a:	b158      	cbz	r0, 1f234 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1f21c:	4638      	mov	r0, r7
   1f21e:	f105 010c 	add.w	r1, r5, #12
   1f222:	f7ff ff72 	bl	1f10a <process_queue>
	if (!err) {
   1f226:	b128      	cbz	r0, 1f234 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1f228:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1f22c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f230:	f7fc b9f2 	b.w	1b618 <z_impl_k_sem_give>
   1f234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f236 <att_req_send_process>:
{
   1f236:	b570      	push	{r4, r5, r6, lr}
   1f238:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1f23a:	3004      	adds	r0, #4
   1f23c:	f7ff fd70 	bl	1ed20 <sys_slist_get>
	if (!node) {
   1f240:	4606      	mov	r6, r0
   1f242:	b1c0      	cbz	r0, 1f276 <att_req_send_process+0x40>
	return list->head;
   1f244:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f246:	b153      	cbz	r3, 1f25e <att_req_send_process+0x28>
   1f248:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1f24c:	d007      	beq.n	1f25e <att_req_send_process+0x28>
	return node->next;
   1f24e:	681c      	ldr	r4, [r3, #0]
   1f250:	b10c      	cbz	r4, 1f256 <att_req_send_process+0x20>
   1f252:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1f256:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1f25a:	b13b      	cbz	r3, 1f26c <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f25c:	b964      	cbnz	r4, 1f278 <att_req_send_process+0x42>
	parent->next = child;
   1f25e:	686b      	ldr	r3, [r5, #4]
   1f260:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f262:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f264:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f266:	b933      	cbnz	r3, 1f276 <att_req_send_process+0x40>
	list->tail = node;
   1f268:	60ae      	str	r6, [r5, #8]
}
   1f26a:	e004      	b.n	1f276 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f26c:	4631      	mov	r1, r6
   1f26e:	f7f3 f9df 	bl	12630 <bt_att_chan_req_send>
   1f272:	2800      	cmp	r0, #0
   1f274:	dbf2      	blt.n	1f25c <att_req_send_process+0x26>
}
   1f276:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f278:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1f27c:	d004      	beq.n	1f288 <att_req_send_process+0x52>
	return node->next;
   1f27e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f282:	b10b      	cbz	r3, 1f288 <att_req_send_process+0x52>
   1f284:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1f288:	4620      	mov	r0, r4
   1f28a:	461c      	mov	r4, r3
   1f28c:	e7e3      	b.n	1f256 <att_req_send_process+0x20>

0001f28e <bt_att_status>:
{
   1f28e:	b538      	push	{r3, r4, r5, lr}
   1f290:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f292:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f296:	07db      	lsls	r3, r3, #31
   1f298:	d519      	bpl.n	1f2ce <bt_att_status+0x40>
	if (!chan->att) {
   1f29a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f29e:	b1b0      	cbz	r0, 1f2ce <bt_att_status+0x40>
	if (chan->req) {
   1f2a0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1f2a4:	b99b      	cbnz	r3, 1f2ce <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1f2a6:	3004      	adds	r0, #4
   1f2a8:	f7ff fd3a 	bl	1ed20 <sys_slist_get>
	if (!node) {
   1f2ac:	4604      	mov	r4, r0
   1f2ae:	b170      	cbz	r0, 1f2ce <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f2b0:	4601      	mov	r1, r0
   1f2b2:	f1a5 0008 	sub.w	r0, r5, #8
   1f2b6:	f7f3 f9bb 	bl	12630 <bt_att_chan_req_send>
   1f2ba:	2800      	cmp	r0, #0
   1f2bc:	da07      	bge.n	1f2ce <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1f2be:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1f2c2:	685a      	ldr	r2, [r3, #4]
   1f2c4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f2c6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f2c8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f2ca:	b902      	cbnz	r2, 1f2ce <bt_att_status+0x40>
	list->tail = node;
   1f2cc:	609c      	str	r4, [r3, #8]
}
   1f2ce:	bd38      	pop	{r3, r4, r5, pc}

0001f2d0 <att_write_req>:
{
   1f2d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f2d2:	460c      	mov	r4, r1
   1f2d4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1f2d6:	f101 0008 	add.w	r0, r1, #8
   1f2da:	f001 f991 	bl	20600 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f2de:	89a2      	ldrh	r2, [r4, #12]
   1f2e0:	4603      	mov	r3, r0
   1f2e2:	9201      	str	r2, [sp, #4]
   1f2e4:	68a2      	ldr	r2, [r4, #8]
   1f2e6:	2112      	movs	r1, #18
   1f2e8:	9200      	str	r2, [sp, #0]
   1f2ea:	4628      	mov	r0, r5
   1f2ec:	2213      	movs	r2, #19
   1f2ee:	f7f3 fb7d 	bl	129ec <att_write_rsp.constprop.0>
}
   1f2f2:	b003      	add	sp, #12
   1f2f4:	bd30      	pop	{r4, r5, pc}

0001f2f6 <att_write_cmd>:
{
   1f2f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f2f8:	460c      	mov	r4, r1
   1f2fa:	4605      	mov	r5, r0
   1f2fc:	f101 0008 	add.w	r0, r1, #8
   1f300:	f001 f97e 	bl	20600 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1f304:	89a2      	ldrh	r2, [r4, #12]
   1f306:	4603      	mov	r3, r0
   1f308:	9201      	str	r2, [sp, #4]
   1f30a:	68a2      	ldr	r2, [r4, #8]
   1f30c:	4628      	mov	r0, r5
   1f30e:	9200      	str	r2, [sp, #0]
   1f310:	2200      	movs	r2, #0
   1f312:	4611      	mov	r1, r2
   1f314:	f7f3 fb6a 	bl	129ec <att_write_rsp.constprop.0>
}
   1f318:	b003      	add	sp, #12
   1f31a:	bd30      	pop	{r4, r5, pc}

0001f31c <att_read_blob_req>:
{
   1f31c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f31e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f320:	210c      	movs	r1, #12
   1f322:	8813      	ldrh	r3, [r2, #0]
   1f324:	8852      	ldrh	r2, [r2, #2]
   1f326:	9200      	str	r2, [sp, #0]
   1f328:	220d      	movs	r2, #13
   1f32a:	f7f3 fcbb 	bl	12ca4 <att_read_rsp>
}
   1f32e:	b003      	add	sp, #12
   1f330:	f85d fb04 	ldr.w	pc, [sp], #4

0001f334 <att_read_req>:
{
   1f334:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f336:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1f338:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f33a:	210a      	movs	r1, #10
   1f33c:	881b      	ldrh	r3, [r3, #0]
   1f33e:	9200      	str	r2, [sp, #0]
   1f340:	220b      	movs	r2, #11
   1f342:	f7f3 fcaf 	bl	12ca4 <att_read_rsp>
}
   1f346:	b003      	add	sp, #12
   1f348:	f85d fb04 	ldr.w	pc, [sp], #4

0001f34c <bt_att_init>:
	bt_gatt_init();
   1f34c:	f7f4 bd08 	b.w	13d60 <bt_gatt_init>

0001f350 <att_req_destroy>:
{
   1f350:	b510      	push	{r4, lr}
   1f352:	4604      	mov	r4, r0
	if (req->buf) {
   1f354:	6900      	ldr	r0, [r0, #16]
   1f356:	b108      	cbz	r0, 1f35c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1f358:	f7f8 f988 	bl	1766c <net_buf_unref>
	if (req->destroy) {
   1f35c:	68a3      	ldr	r3, [r4, #8]
   1f35e:	b10b      	cbz	r3, 1f364 <att_req_destroy+0x14>
		req->destroy(req);
   1f360:	4620      	mov	r0, r4
   1f362:	4798      	blx	r3
	bt_att_req_free(req);
   1f364:	4620      	mov	r0, r4
}
   1f366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1f36a:	f7f3 be3d 	b.w	12fe8 <bt_att_req_free>

0001f36e <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f36e:	898a      	ldrh	r2, [r1, #12]
   1f370:	2300      	movs	r3, #0
   1f372:	6889      	ldr	r1, [r1, #8]
   1f374:	f7f3 be44 	b.w	13000 <att_handle_rsp>

0001f378 <att_handle_find_type_rsp>:
   1f378:	f7ff bff9 	b.w	1f36e <att_handle_find_info_rsp>

0001f37c <att_handle_read_type_rsp>:
   1f37c:	f7ff bff7 	b.w	1f36e <att_handle_find_info_rsp>

0001f380 <att_handle_read_rsp>:
   1f380:	f7ff bff5 	b.w	1f36e <att_handle_find_info_rsp>

0001f384 <att_handle_read_blob_rsp>:
   1f384:	f7ff bff3 	b.w	1f36e <att_handle_find_info_rsp>

0001f388 <att_handle_read_mult_rsp>:
   1f388:	f7ff bff1 	b.w	1f36e <att_handle_find_info_rsp>

0001f38c <att_handle_read_group_rsp>:
   1f38c:	f7ff bfef 	b.w	1f36e <att_handle_find_info_rsp>

0001f390 <att_handle_write_rsp>:
   1f390:	f7ff bfed 	b.w	1f36e <att_handle_find_info_rsp>

0001f394 <att_handle_prepare_write_rsp>:
   1f394:	f7ff bfeb 	b.w	1f36e <att_handle_find_info_rsp>

0001f398 <att_handle_exec_write_rsp>:
   1f398:	f7ff bfe9 	b.w	1f36e <att_handle_find_info_rsp>

0001f39c <att_confirm>:
   1f39c:	f7ff bfe7 	b.w	1f36e <att_handle_find_info_rsp>

0001f3a0 <att_mtu_rsp>:
{
   1f3a0:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1f3a2:	6889      	ldr	r1, [r1, #8]
{
   1f3a4:	b410      	push	{r4}
	mtu = sys_le16_to_cpu(rsp->mtu);
   1f3a6:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1f3a8:	2b16      	cmp	r3, #22
   1f3aa:	d805      	bhi.n	1f3b8 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1f3ac:	2200      	movs	r2, #0
   1f3ae:	2304      	movs	r3, #4
   1f3b0:	4611      	mov	r1, r2
}
   1f3b2:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f3b4:	f7f3 be24 	b.w	13000 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f3b8:	2b41      	cmp	r3, #65	; 0x41
   1f3ba:	bf28      	it	cs
   1f3bc:	2341      	movcs	r3, #65	; 0x41
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f3be:	8992      	ldrh	r2, [r2, #12]
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f3c0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f3c4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f3c8:	2300      	movs	r3, #0
   1f3ca:	e7f2      	b.n	1f3b2 <att_mtu_rsp+0x12>

0001f3cc <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1f3cc:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3d4:	4604      	mov	r4, r0
   1f3d6:	460d      	mov	r5, r1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1f3d8:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1f3dc:	b323      	cbz	r3, 1f428 <bt_att_encrypt_change+0x5c>
	if (hci_status) {
   1f3de:	b161      	cbz	r1, 1f3fa <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   1f3e0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1f3e4:	b303      	cbz	r3, 1f428 <bt_att_encrypt_change+0x5c>
   1f3e6:	7d1b      	ldrb	r3, [r3, #20]
   1f3e8:	b1f3      	cbz	r3, 1f428 <bt_att_encrypt_change+0x5c>
			att_handle_rsp(att_chan, NULL, 0,
   1f3ea:	2200      	movs	r2, #0
   1f3ec:	4630      	mov	r0, r6
}
   1f3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   1f3f2:	2305      	movs	r3, #5
   1f3f4:	4611      	mov	r1, r2
   1f3f6:	f7f3 be03 	b.w	13000 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1f3fa:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1f3fc:	4638      	mov	r0, r7
   1f3fe:	f7f5 feb5 	bl	1516c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1f402:	7a7b      	ldrb	r3, [r7, #9]
   1f404:	2b01      	cmp	r3, #1
   1f406:	d00f      	beq.n	1f428 <bt_att_encrypt_change+0x5c>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1f408:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f40c:	b163      	cbz	r3, 1f428 <bt_att_encrypt_change+0x5c>
   1f40e:	7d1a      	ldrb	r2, [r3, #20]
   1f410:	b152      	cbz	r2, 1f428 <bt_att_encrypt_change+0x5c>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   1f412:	6919      	ldr	r1, [r3, #16]
   1f414:	6888      	ldr	r0, [r1, #8]
   1f416:	f7f3 f845 	bl	124a4 <chan_cb.isra.0>
   1f41a:	4602      	mov	r2, r0
   1f41c:	4630      	mov	r0, r6
   1f41e:	f7ff fe66 	bl	1f0ee <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   1f422:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f426:	611d      	str	r5, [r3, #16]
}
   1f428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f42c <att_chan_detach>:
{
   1f42c:	b538      	push	{r3, r4, r5, lr}
   1f42e:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1f430:	6800      	ldr	r0, [r0, #0]
   1f432:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1f436:	3028      	adds	r0, #40	; 0x28
   1f438:	f7ff fe02 	bl	1f040 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1f43c:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1f440:	4628      	mov	r0, r5
   1f442:	f7fc f8e9 	bl	1b618 <z_impl_k_sem_give>
   1f446:	4628      	mov	r0, r5
   1f448:	f7fc f8e6 	bl	1b618 <z_impl_k_sem_give>
   1f44c:	4628      	mov	r0, r5
   1f44e:	f7fc f8e3 	bl	1b618 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1f452:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1f456:	2200      	movs	r2, #0
   1f458:	2300      	movs	r3, #0
   1f45a:	4628      	mov	r0, r5
   1f45c:	f7f8 f884 	bl	17568 <net_buf_get>
   1f460:	4602      	mov	r2, r0
   1f462:	b950      	cbnz	r0, 1f47a <att_chan_detach+0x4e>
	if (chan->req) {
   1f464:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1f468:	b123      	cbz	r3, 1f474 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f46a:	4601      	mov	r1, r0
   1f46c:	230e      	movs	r3, #14
   1f46e:	4620      	mov	r0, r4
   1f470:	f7f3 fdc6 	bl	13000 <att_handle_rsp>
	chan->att = NULL;
   1f474:	2300      	movs	r3, #0
   1f476:	6023      	str	r3, [r4, #0]
}
   1f478:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1f47a:	f7f8 f8f7 	bl	1766c <net_buf_unref>
   1f47e:	e7ea      	b.n	1f456 <att_chan_detach+0x2a>

0001f480 <bt_att_disconnected>:
{
   1f480:	b538      	push	{r3, r4, r5, lr}
   1f482:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1f484:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1f488:	f7ff ffd0 	bl	1f42c <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1f48c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f48e:	b93b      	cbnz	r3, 1f4a0 <bt_att_disconnected+0x20>
	att_reset(att);
   1f490:	4628      	mov	r0, r5
   1f492:	f7f3 fe35 	bl	13100 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f496:	6820      	ldr	r0, [r4, #0]
}
   1f498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1f49c:	f7f5 bed8 	b.w	15250 <bt_gatt_disconnected>
}
   1f4a0:	bd38      	pop	{r3, r4, r5, pc}

0001f4a2 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1f4a2:	6010      	str	r0, [r2, #0]
}
   1f4a4:	2000      	movs	r0, #0
   1f4a6:	4770      	bx	lr

0001f4a8 <gatt_ccc_changed>:
{
   1f4a8:	460b      	mov	r3, r1
   1f4aa:	8909      	ldrh	r1, [r1, #8]
   1f4ac:	8a5a      	ldrh	r2, [r3, #18]
   1f4ae:	428a      	cmp	r2, r1
   1f4b0:	bf38      	it	cc
   1f4b2:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   1f4b4:	8b99      	ldrh	r1, [r3, #28]
   1f4b6:	4291      	cmp	r1, r2
   1f4b8:	bf38      	it	cc
   1f4ba:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1f4bc:	8bda      	ldrh	r2, [r3, #30]
   1f4be:	428a      	cmp	r2, r1
   1f4c0:	d003      	beq.n	1f4ca <gatt_ccc_changed+0x22>
		ccc->value = value;
   1f4c2:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   1f4c4:	6a1b      	ldr	r3, [r3, #32]
   1f4c6:	b103      	cbz	r3, 1f4ca <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   1f4c8:	4718      	bx	r3
}
   1f4ca:	4770      	bx	lr

0001f4cc <gatt_indicate_rsp>:
{
   1f4cc:	b510      	push	{r4, lr}
   1f4ce:	9c02      	ldr	r4, [sp, #8]
   1f4d0:	460a      	mov	r2, r1
	params->_ref--;
   1f4d2:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1f4d4:	4621      	mov	r1, r4
	params->_ref--;
   1f4d6:	3b01      	subs	r3, #1
   1f4d8:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1f4da:	68a3      	ldr	r3, [r4, #8]
   1f4dc:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1f4de:	68e3      	ldr	r3, [r4, #12]
   1f4e0:	b12b      	cbz	r3, 1f4ee <gatt_indicate_rsp+0x22>
   1f4e2:	7da2      	ldrb	r2, [r4, #22]
   1f4e4:	b91a      	cbnz	r2, 1f4ee <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1f4e6:	4620      	mov	r0, r4
}
   1f4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f4ec:	4718      	bx	r3
}
   1f4ee:	bd10      	pop	{r4, pc}

0001f4f0 <match_uuid>:
	data->attr = attr;
   1f4f0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f4f2:	8091      	strh	r1, [r2, #4]
}
   1f4f4:	2000      	movs	r0, #0
   1f4f6:	4770      	bx	lr

0001f4f8 <ccc_set_cb>:
}
   1f4f8:	2000      	movs	r0, #0
   1f4fa:	4770      	bx	lr

0001f4fc <gen_hash_m>:
{
   1f4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f4fe:	6807      	ldr	r7, [r0, #0]
{
   1f500:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f502:	783d      	ldrb	r5, [r7, #0]
{
   1f504:	4614      	mov	r4, r2
   1f506:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f508:	b10d      	cbz	r5, 1f50e <gen_hash_m+0x12>
	switch (u16->val) {
   1f50a:	2501      	movs	r5, #1
   1f50c:	e014      	b.n	1f538 <gen_hash_m+0x3c>
   1f50e:	887b      	ldrh	r3, [r7, #2]
   1f510:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f514:	d004      	beq.n	1f520 <gen_hash_m+0x24>
   1f516:	d812      	bhi.n	1f53e <gen_hash_m+0x42>
   1f518:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f51c:	2b03      	cmp	r3, #3
   1f51e:	d8f4      	bhi.n	1f50a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f520:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f524:	2202      	movs	r2, #2
   1f526:	4620      	mov	r0, r4
   1f528:	f10d 010e 	add.w	r1, sp, #14
   1f52c:	f7fe fb20 	bl	1db70 <tc_cmac_update>
   1f530:	b9e0      	cbnz	r0, 1f56c <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f532:	f06f 0315 	mvn.w	r3, #21
   1f536:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f538:	4628      	mov	r0, r5
   1f53a:	b009      	add	sp, #36	; 0x24
   1f53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f53e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f542:	33ff      	adds	r3, #255	; 0xff
   1f544:	b29b      	uxth	r3, r3
   1f546:	2b04      	cmp	r3, #4
   1f548:	d8df      	bhi.n	1f50a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f54a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f54e:	2202      	movs	r2, #2
   1f550:	4620      	mov	r0, r4
   1f552:	f10d 010e 	add.w	r1, sp, #14
   1f556:	f7fe fb0b 	bl	1db70 <tc_cmac_update>
   1f55a:	2800      	cmp	r0, #0
   1f55c:	d0e9      	beq.n	1f532 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f55e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f560:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1f562:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f566:	f10d 010e 	add.w	r1, sp, #14
   1f56a:	e017      	b.n	1f59c <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f56c:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f56e:	2202      	movs	r2, #2
   1f570:	4620      	mov	r0, r4
   1f572:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1f576:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f57a:	f7fe faf9 	bl	1db70 <tc_cmac_update>
   1f57e:	2800      	cmp	r0, #0
   1f580:	d0d7      	beq.n	1f532 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f582:	2000      	movs	r0, #0
   1f584:	2310      	movs	r3, #16
   1f586:	4631      	mov	r1, r6
   1f588:	eb0d 0203 	add.w	r2, sp, r3
   1f58c:	6877      	ldr	r7, [r6, #4]
   1f58e:	9000      	str	r0, [sp, #0]
   1f590:	47b8      	blx	r7
		if (len < 0) {
   1f592:	1e02      	subs	r2, r0, #0
   1f594:	da01      	bge.n	1f59a <gen_hash_m+0x9e>
			state->err = len;
   1f596:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f598:	e7ce      	b.n	1f538 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f59a:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f59c:	4620      	mov	r0, r4
   1f59e:	f7fe fae7 	bl	1db70 <tc_cmac_update>
   1f5a2:	2800      	cmp	r0, #0
   1f5a4:	d1b1      	bne.n	1f50a <gen_hash_m+0xe>
   1f5a6:	e7c4      	b.n	1f532 <gen_hash_m+0x36>

0001f5a8 <bt_addr_le_cmp>:
   1f5a8:	2207      	movs	r2, #7
   1f5aa:	f7fe be9c 	b.w	1e2e6 <memcmp>

0001f5ae <find_ccc_cfg>:
{
   1f5ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f5b0:	4606      	mov	r6, r0
   1f5b2:	1c4c      	adds	r4, r1, #1
   1f5b4:	f101 051f 	add.w	r5, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f5b8:	1e67      	subs	r7, r4, #1
		if (conn) {
   1f5ba:	b14e      	cbz	r6, 1f5d0 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f5bc:	4622      	mov	r2, r4
   1f5be:	4630      	mov	r0, r6
   1f5c0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1f5c4:	f7ff fa6d 	bl	1eaa2 <bt_conn_is_peer_addr_le>
   1f5c8:	b158      	cbz	r0, 1f5e2 <find_ccc_cfg+0x34>
}
   1f5ca:	4638      	mov	r0, r7
   1f5cc:	b003      	add	sp, #12
   1f5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f5d0:	4669      	mov	r1, sp
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	9600      	str	r6, [sp, #0]
   1f5d6:	f8cd 6003 	str.w	r6, [sp, #3]
   1f5da:	f7ff ffe5 	bl	1f5a8 <bt_addr_le_cmp>
   1f5de:	2800      	cmp	r0, #0
   1f5e0:	d0f3      	beq.n	1f5ca <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f5e2:	340a      	adds	r4, #10
   1f5e4:	42ac      	cmp	r4, r5
   1f5e6:	d1e7      	bne.n	1f5b8 <find_ccc_cfg+0xa>
	return NULL;
   1f5e8:	2700      	movs	r7, #0
   1f5ea:	e7ee      	b.n	1f5ca <find_ccc_cfg+0x1c>

0001f5ec <ccc_find_cfg>:
{
   1f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5f0:	4604      	mov	r4, r0
   1f5f2:	460f      	mov	r7, r1
   1f5f4:	4690      	mov	r8, r2
   1f5f6:	2500      	movs	r5, #0
   1f5f8:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1f5fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1f5fe:	4543      	cmp	r3, r8
   1f600:	d107      	bne.n	1f612 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1f602:	4639      	mov	r1, r7
   1f604:	4630      	mov	r0, r6
   1f606:	f7ff ffcf 	bl	1f5a8 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1f60a:	b910      	cbnz	r0, 1f612 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1f60c:	1960      	adds	r0, r4, r5
}
   1f60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f612:	350a      	adds	r5, #10
   1f614:	2d1e      	cmp	r5, #30
   1f616:	f106 060a 	add.w	r6, r6, #10
   1f61a:	d1ee      	bne.n	1f5fa <ccc_find_cfg+0xe>
	return NULL;
   1f61c:	2000      	movs	r0, #0
   1f61e:	e7f6      	b.n	1f60e <ccc_find_cfg+0x22>

0001f620 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f620:	2207      	movs	r2, #7
   1f622:	f7fe be71 	b.w	1e308 <memcpy>

0001f626 <clear_ccc_cfg>:
{
   1f626:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f628:	2500      	movs	r5, #0
{
   1f62a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f62c:	4669      	mov	r1, sp
   1f62e:	3001      	adds	r0, #1
   1f630:	9500      	str	r5, [sp, #0]
   1f632:	f8cd 5003 	str.w	r5, [sp, #3]
   1f636:	f7ff fff3 	bl	1f620 <bt_addr_le_copy>
	cfg->id = 0U;
   1f63a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f63c:	8125      	strh	r5, [r4, #8]
}
   1f63e:	b003      	add	sp, #12
   1f640:	bd30      	pop	{r4, r5, pc}

0001f642 <atomic_or>:
{
   1f642:	4603      	mov	r3, r0
}
   1f644:	e8d3 0fef 	ldaex	r0, [r3]
   1f648:	ea40 0201 	orr.w	r2, r0, r1
   1f64c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1f650:	f1bc 0f00 	cmp.w	ip, #0
   1f654:	d1f6      	bne.n	1f644 <atomic_or+0x2>
   1f656:	4770      	bx	lr

0001f658 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f658:	e8d0 0faf 	lda	r0, [r0]
}
   1f65c:	4770      	bx	lr

0001f65e <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1f65e:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1f660:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1f662:	3001      	adds	r0, #1
   1f664:	4669      	mov	r1, sp
   1f666:	9300      	str	r3, [sp, #0]
   1f668:	f8cd 3003 	str.w	r3, [sp, #3]
   1f66c:	f7ff ffd8 	bl	1f620 <bt_addr_le_copy>
}
   1f670:	b003      	add	sp, #12
   1f672:	f85d fb04 	ldr.w	pc, [sp], #4

0001f676 <clear_cf_cfg>:
{
   1f676:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f678:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f67a:	2500      	movs	r5, #0
   1f67c:	4669      	mov	r1, sp
   1f67e:	3001      	adds	r0, #1
   1f680:	9500      	str	r5, [sp, #0]
   1f682:	f8cd 5003 	str.w	r5, [sp, #3]
   1f686:	f7ff ffcb 	bl	1f620 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f68a:	f104 0008 	add.w	r0, r4, #8
   1f68e:	2201      	movs	r2, #1
   1f690:	4629      	mov	r1, r5
   1f692:	f7fe fe64 	bl	1e35e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f696:	340c      	adds	r4, #12
   1f698:	e8d4 3fef 	ldaex	r3, [r4]
   1f69c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1f6a0:	2a00      	cmp	r2, #0
   1f6a2:	d1f9      	bne.n	1f698 <clear_cf_cfg+0x22>
}
   1f6a4:	b003      	add	sp, #12
   1f6a6:	bd30      	pop	{r4, r5, pc}

0001f6a8 <gatt_sub_remove>:
{
   1f6a8:	b570      	push	{r4, r5, r6, lr}
   1f6aa:	460c      	mov	r4, r1
	if (params) {
   1f6ac:	4619      	mov	r1, r3
   1f6ae:	b16b      	cbz	r3, 1f6cc <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1f6b0:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1f6b4:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1f6b6:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1f6b8:	b97a      	cbnz	r2, 1f6da <gatt_sub_remove+0x32>
   1f6ba:	42ae      	cmp	r6, r5
	list->head = node;
   1f6bc:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1f6be:	d100      	bne.n	1f6c2 <gatt_sub_remove+0x1a>
	list->tail = node;
   1f6c0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1f6c2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1f6c4:	680d      	ldr	r5, [r1, #0]
   1f6c6:	461a      	mov	r2, r3
   1f6c8:	614b      	str	r3, [r1, #20]
   1f6ca:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1f6cc:	68a3      	ldr	r3, [r4, #8]
   1f6ce:	b94b      	cbnz	r3, 1f6e4 <gatt_sub_remove+0x3c>
   1f6d0:	4620      	mov	r0, r4
}
   1f6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f6d6:	f7ff bfc2 	b.w	1f65e <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1f6da:	42ae      	cmp	r6, r5
	parent->next = child;
   1f6dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f6de:	bf08      	it	eq
   1f6e0:	60e2      	streq	r2, [r4, #12]
}
   1f6e2:	e7ee      	b.n	1f6c2 <gatt_sub_remove+0x1a>
   1f6e4:	bd70      	pop	{r4, r5, r6, pc}

0001f6e6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f6e6:	2a02      	cmp	r2, #2
{
   1f6e8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f6ea:	d108      	bne.n	1f6fe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f6ec:	2300      	movs	r3, #0
   1f6ee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f6f2:	461a      	mov	r2, r3
   1f6f4:	7a00      	ldrb	r0, [r0, #8]
   1f6f6:	f7f3 ff9b 	bl	13630 <sc_save>
}
   1f6fa:	2002      	movs	r0, #2
   1f6fc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f6fe:	f7f4 fa4b 	bl	13b98 <sc_clear>
   1f702:	e7fa      	b.n	1f6fa <sc_ccc_cfg_write+0x14>

0001f704 <gatt_write_ccc_rsp>:
{
   1f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f708:	4606      	mov	r6, r0
   1f70a:	460d      	mov	r5, r1
   1f70c:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f70e:	f104 0310 	add.w	r3, r4, #16
   1f712:	e8d3 2fef 	ldaex	r2, [r3]
   1f716:	f022 0204 	bic.w	r2, r2, #4
   1f71a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f71e:	2900      	cmp	r1, #0
   1f720:	d1f7      	bne.n	1f712 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1f722:	b1dd      	cbz	r5, 1f75c <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1f724:	f7f3 fe6e 	bl	13404 <gatt_sub_find>
		if (!sub) {
   1f728:	4601      	mov	r1, r0
   1f72a:	b300      	cbz	r0, 1f76e <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1f72c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f72e:	b143      	cbz	r3, 1f742 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1f730:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1f732:	f104 0014 	add.w	r0, r4, #20
   1f736:	4283      	cmp	r3, r0
   1f738:	d10b      	bne.n	1f752 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1f73a:	4623      	mov	r3, r4
   1f73c:	4630      	mov	r0, r6
   1f73e:	f7ff ffb3 	bl	1f6a8 <gatt_sub_remove>
	if (params->write) {
   1f742:	6863      	ldr	r3, [r4, #4]
   1f744:	b19b      	cbz	r3, 1f76e <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1f746:	4629      	mov	r1, r5
   1f748:	4630      	mov	r0, r6
}
   1f74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1f74e:	2200      	movs	r2, #0
   1f750:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f752:	2a00      	cmp	r2, #0
   1f754:	d0f5      	beq.n	1f742 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1f756:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f758:	6812      	ldr	r2, [r2, #0]
   1f75a:	e7ec      	b.n	1f736 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1f75c:	89a3      	ldrh	r3, [r4, #12]
   1f75e:	2b00      	cmp	r3, #0
   1f760:	d1ef      	bne.n	1f742 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1f762:	462b      	mov	r3, r5
   1f764:	462a      	mov	r2, r5
   1f766:	4621      	mov	r1, r4
   1f768:	6827      	ldr	r7, [r4, #0]
   1f76a:	47b8      	blx	r7
   1f76c:	e7e9      	b.n	1f742 <gatt_write_ccc_rsp+0x3e>
}
   1f76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f772 <read_ppcp>:
{
   1f772:	b513      	push	{r0, r1, r4, lr}
   1f774:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1f776:	2218      	movs	r2, #24
   1f778:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1f77c:	2228      	movs	r2, #40	; 0x28
   1f77e:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1f782:	2200      	movs	r2, #0
   1f784:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f788:	222a      	movs	r2, #42	; 0x2a
{
   1f78a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f78e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f792:	2908      	cmp	r1, #8
   1f794:	d80b      	bhi.n	1f7ae <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1f796:	f1c1 0408 	rsb	r4, r1, #8
   1f79a:	429c      	cmp	r4, r3
   1f79c:	bfa8      	it	ge
   1f79e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f7a0:	4469      	add	r1, sp
   1f7a2:	4622      	mov	r2, r4
   1f7a4:	f7fe fdb0 	bl	1e308 <memcpy>
}
   1f7a8:	4620      	mov	r0, r4
   1f7aa:	b002      	add	sp, #8
   1f7ac:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7ae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1f7b2:	e7f9      	b.n	1f7a8 <read_ppcp+0x36>

0001f7b4 <read_appearance>:
{
   1f7b4:	b513      	push	{r0, r1, r4, lr}
   1f7b6:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f7b8:	2200      	movs	r2, #0
{
   1f7ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f7be:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f7c2:	2902      	cmp	r1, #2
   1f7c4:	d80d      	bhi.n	1f7e2 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1f7c6:	f1c1 0402 	rsb	r4, r1, #2
   1f7ca:	429c      	cmp	r4, r3
   1f7cc:	bfa8      	it	ge
   1f7ce:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f7d0:	f10d 0306 	add.w	r3, sp, #6
   1f7d4:	4622      	mov	r2, r4
   1f7d6:	4419      	add	r1, r3
   1f7d8:	f7fe fd96 	bl	1e308 <memcpy>
}
   1f7dc:	4620      	mov	r0, r4
   1f7de:	b002      	add	sp, #8
   1f7e0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7e2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f7e6:	e7f9      	b.n	1f7dc <read_appearance+0x28>

0001f7e8 <read_name>:
{
   1f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7ec:	4698      	mov	r8, r3
   1f7ee:	4615      	mov	r5, r2
   1f7f0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1f7f4:	f7f0 fe64 	bl	104c0 <bt_get_name>
   1f7f8:	4607      	mov	r7, r0
				 strlen(name));
   1f7fa:	f7fe fd47 	bl	1e28c <strlen>
	if (offset > value_len) {
   1f7fe:	b283      	uxth	r3, r0
   1f800:	42b3      	cmp	r3, r6
   1f802:	d30c      	bcc.n	1f81e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f804:	1b9c      	subs	r4, r3, r6
   1f806:	4544      	cmp	r4, r8
   1f808:	bfa8      	it	ge
   1f80a:	4644      	movge	r4, r8
   1f80c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f80e:	4622      	mov	r2, r4
   1f810:	4628      	mov	r0, r5
   1f812:	19b9      	adds	r1, r7, r6
   1f814:	f7fe fd78 	bl	1e308 <memcpy>
}
   1f818:	4620      	mov	r0, r4
   1f81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f81e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f822:	e7f9      	b.n	1f818 <read_name+0x30>

0001f824 <cf_read>:
{
   1f824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f826:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f828:	2300      	movs	r3, #0
{
   1f82a:	4615      	mov	r5, r2
   1f82c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f830:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1f834:	f7f3 fda8 	bl	13388 <find_cf_cfg>
	if (cfg) {
   1f838:	b128      	cbz	r0, 1f846 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f83a:	f100 0108 	add.w	r1, r0, #8
   1f83e:	2201      	movs	r2, #1
   1f840:	a801      	add	r0, sp, #4
   1f842:	f7fe fd61 	bl	1e308 <memcpy>
	if (offset > value_len) {
   1f846:	2e01      	cmp	r6, #1
   1f848:	d80d      	bhi.n	1f866 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f84a:	f1c6 0401 	rsb	r4, r6, #1
   1f84e:	42bc      	cmp	r4, r7
   1f850:	bfa8      	it	ge
   1f852:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f854:	ab01      	add	r3, sp, #4
   1f856:	4622      	mov	r2, r4
   1f858:	4628      	mov	r0, r5
   1f85a:	1999      	adds	r1, r3, r6
   1f85c:	f7fe fd54 	bl	1e308 <memcpy>
}
   1f860:	4620      	mov	r0, r4
   1f862:	b003      	add	sp, #12
   1f864:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f866:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f86a:	e7f9      	b.n	1f860 <cf_read+0x3c>

0001f86c <bt_gatt_attr_read_service>:
{
   1f86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f86e:	68c9      	ldr	r1, [r1, #12]
{
   1f870:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f872:	780b      	ldrb	r3, [r1, #0]
{
   1f874:	4610      	mov	r0, r2
   1f876:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f87a:	b993      	cbnz	r3, 1f8a2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f87c:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1f87e:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f880:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f884:	d819      	bhi.n	1f8ba <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f886:	f1c5 0202 	rsb	r2, r5, #2
   1f88a:	4294      	cmp	r4, r2
   1f88c:	bfa8      	it	ge
   1f88e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f890:	4622      	mov	r2, r4
   1f892:	f10d 0306 	add.w	r3, sp, #6
   1f896:	1959      	adds	r1, r3, r5
   1f898:	f7fe fd36 	bl	1e308 <memcpy>
}
   1f89c:	4620      	mov	r0, r4
   1f89e:	b003      	add	sp, #12
   1f8a0:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f8a2:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f8a4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f8a8:	d807      	bhi.n	1f8ba <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f8aa:	f1c5 0210 	rsb	r2, r5, #16
   1f8ae:	4294      	cmp	r4, r2
   1f8b0:	bfa8      	it	ge
   1f8b2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f8b4:	4429      	add	r1, r5
   1f8b6:	4622      	mov	r2, r4
   1f8b8:	e7ee      	b.n	1f898 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8ba:	f06f 0406 	mvn.w	r4, #6
   1f8be:	e7ed      	b.n	1f89c <bt_gatt_attr_read_service+0x30>

0001f8c0 <bt_gatt_attr_read_ccc>:
{
   1f8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f8c2:	68c9      	ldr	r1, [r1, #12]
{
   1f8c4:	4615      	mov	r5, r2
   1f8c6:	461f      	mov	r7, r3
   1f8c8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1f8cc:	f7ff fe6f 	bl	1f5ae <find_ccc_cfg>
	if (cfg) {
   1f8d0:	b100      	cbz	r0, 1f8d4 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f8d2:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1f8d4:	2e02      	cmp	r6, #2
   1f8d6:	f8ad 0006 	strh.w	r0, [sp, #6]
   1f8da:	d80e      	bhi.n	1f8fa <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f8dc:	f1c6 0402 	rsb	r4, r6, #2
   1f8e0:	42bc      	cmp	r4, r7
   1f8e2:	bfa8      	it	ge
   1f8e4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f8e6:	f10d 0306 	add.w	r3, sp, #6
   1f8ea:	4622      	mov	r2, r4
   1f8ec:	4628      	mov	r0, r5
   1f8ee:	1999      	adds	r1, r3, r6
   1f8f0:	f7fe fd0a 	bl	1e308 <memcpy>
}
   1f8f4:	4620      	mov	r0, r4
   1f8f6:	b003      	add	sp, #12
   1f8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8fa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f8fe:	e7f9      	b.n	1f8f4 <bt_gatt_attr_read_ccc+0x34>

0001f900 <sc_restore_rsp>:
{
   1f900:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f902:	f7f3 fd41 	bl	13388 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f906:	b140      	cbz	r0, 1f91a <sc_restore_rsp+0x1a>
   1f908:	7a03      	ldrb	r3, [r0, #8]
   1f90a:	07db      	lsls	r3, r3, #31
   1f90c:	d505      	bpl.n	1f91a <sc_restore_rsp+0x1a>
}
   1f90e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f912:	2101      	movs	r1, #1
   1f914:	300c      	adds	r0, #12
   1f916:	f7ff be94 	b.w	1f642 <atomic_or>
   1f91a:	bd08      	pop	{r3, pc}

0001f91c <bt_gatt_attr_read>:
{
   1f91c:	b538      	push	{r3, r4, r5, lr}
   1f91e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f922:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f926:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f928:	42a9      	cmp	r1, r5
   1f92a:	d80b      	bhi.n	1f944 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f92c:	1a6d      	subs	r5, r5, r1
   1f92e:	429d      	cmp	r5, r3
   1f930:	bfa8      	it	ge
   1f932:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f934:	9b05      	ldr	r3, [sp, #20]
   1f936:	b2ad      	uxth	r5, r5
   1f938:	462a      	mov	r2, r5
   1f93a:	4419      	add	r1, r3
   1f93c:	f7fe fce4 	bl	1e308 <memcpy>
}
   1f940:	4628      	mov	r0, r5
   1f942:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f944:	f06f 0506 	mvn.w	r5, #6
   1f948:	e7fa      	b.n	1f940 <bt_gatt_attr_read+0x24>

0001f94a <bt_gatt_attr_value_handle>:
{
   1f94a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f94c:	4604      	mov	r4, r0
   1f94e:	b910      	cbnz	r0, 1f956 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f950:	2000      	movs	r0, #0
}
   1f952:	b002      	add	sp, #8
   1f954:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f956:	2300      	movs	r3, #0
   1f958:	f88d 3004 	strb.w	r3, [sp, #4]
   1f95c:	f642 0303 	movw	r3, #10243	; 0x2803
   1f960:	6800      	ldr	r0, [r0, #0]
   1f962:	a901      	add	r1, sp, #4
   1f964:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f968:	f7fe fd69 	bl	1e43e <bt_uuid_cmp>
   1f96c:	2800      	cmp	r0, #0
   1f96e:	d1ef      	bne.n	1f950 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f970:	68e3      	ldr	r3, [r4, #12]
   1f972:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f974:	2800      	cmp	r0, #0
   1f976:	d1ec      	bne.n	1f952 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f978:	4620      	mov	r0, r4
   1f97a:	f7f4 fa59 	bl	13e30 <bt_gatt_attr_get_handle>
   1f97e:	3001      	adds	r0, #1
   1f980:	b280      	uxth	r0, r0
	return handle;
   1f982:	e7e6      	b.n	1f952 <bt_gatt_attr_value_handle+0x8>

0001f984 <bt_gatt_attr_read_chrc>:
{
   1f984:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f986:	68cf      	ldr	r7, [r1, #12]
{
   1f988:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f98a:	79bb      	ldrb	r3, [r7, #6]
{
   1f98c:	b087      	sub	sp, #28
   1f98e:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1f990:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f994:	4615      	mov	r5, r2
   1f996:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f99a:	f7ff ffd6 	bl	1f94a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f99e:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f9a0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f9a4:	780b      	ldrb	r3, [r1, #0]
   1f9a6:	b99b      	cbnz	r3, 1f9d0 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f9a8:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1f9aa:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f9ac:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1f9b0:	42b1      	cmp	r1, r6
   1f9b2:	d315      	bcc.n	1f9e0 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f9b4:	1b89      	subs	r1, r1, r6
   1f9b6:	42a1      	cmp	r1, r4
   1f9b8:	bfa8      	it	ge
   1f9ba:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f9bc:	ab01      	add	r3, sp, #4
   1f9be:	b28c      	uxth	r4, r1
   1f9c0:	4622      	mov	r2, r4
   1f9c2:	4628      	mov	r0, r5
   1f9c4:	1999      	adds	r1, r3, r6
   1f9c6:	f7fe fc9f 	bl	1e308 <memcpy>
}
   1f9ca:	4620      	mov	r0, r4
   1f9cc:	b007      	add	sp, #28
   1f9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f9d0:	3101      	adds	r1, #1
   1f9d2:	2210      	movs	r2, #16
   1f9d4:	f10d 0007 	add.w	r0, sp, #7
   1f9d8:	f7fe fc96 	bl	1e308 <memcpy>
		value_len += 16U;
   1f9dc:	2113      	movs	r1, #19
   1f9de:	e7e7      	b.n	1f9b0 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f9e0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f9e4:	e7f1      	b.n	1f9ca <bt_gatt_attr_read_chrc+0x46>

0001f9e6 <bt_gatt_foreach_attr>:
{
   1f9e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f9e8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f9ec:	2300      	movs	r3, #0
   1f9ee:	461a      	mov	r2, r3
   1f9f0:	9300      	str	r3, [sp, #0]
   1f9f2:	f7f4 fa61 	bl	13eb8 <bt_gatt_foreach_attr_type>
}
   1f9f6:	b005      	add	sp, #20
   1f9f8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9fc <db_hash_process>:
	db_hash_gen(true);
   1f9fc:	2001      	movs	r0, #1
   1f9fe:	f7f4 bac7 	b.w	13f90 <db_hash_gen>

0001fa02 <bt_gatt_check_perm>:
{
   1fa02:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1fa04:	07d4      	lsls	r4, r2, #31
{
   1fa06:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fa08:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fa0a:	d504      	bpl.n	1fa16 <bt_gatt_check_perm+0x14>
   1fa0c:	f010 0f15 	tst.w	r0, #21
   1fa10:	d01e      	beq.n	1fa50 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fa12:	684b      	ldr	r3, [r1, #4]
   1fa14:	b1e3      	cbz	r3, 1fa50 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fa16:	0793      	lsls	r3, r2, #30
   1fa18:	d504      	bpl.n	1fa24 <bt_gatt_check_perm+0x22>
   1fa1a:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1fa1e:	d019      	beq.n	1fa54 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fa20:	688b      	ldr	r3, [r1, #8]
   1fa22:	b1bb      	cbz	r3, 1fa54 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1fa24:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fa28:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fa2c:	d103      	bne.n	1fa36 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1fa2e:	f014 000c 	ands.w	r0, r4, #12
   1fa32:	d107      	bne.n	1fa44 <bt_gatt_check_perm+0x42>
}
   1fa34:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fa36:	4628      	mov	r0, r5
   1fa38:	f7ff f828 	bl	1ea8c <bt_conn_get_security>
   1fa3c:	2802      	cmp	r0, #2
   1fa3e:	d8f6      	bhi.n	1fa2e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1fa40:	2005      	movs	r0, #5
   1fa42:	e7f7      	b.n	1fa34 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1fa44:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1fa46:	2b00      	cmp	r3, #0
   1fa48:	bf14      	ite	ne
   1fa4a:	2000      	movne	r0, #0
   1fa4c:	200f      	moveq	r0, #15
   1fa4e:	e7f1      	b.n	1fa34 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fa50:	2002      	movs	r0, #2
   1fa52:	e7ef      	b.n	1fa34 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fa54:	2003      	movs	r0, #3
   1fa56:	e7ed      	b.n	1fa34 <bt_gatt_check_perm+0x32>

0001fa58 <gatt_discover_next>:
{
   1fa58:	b570      	push	{r4, r5, r6, lr}
   1fa5a:	4605      	mov	r5, r0
   1fa5c:	4614      	mov	r4, r2
	if (!last_handle)
   1fa5e:	b929      	cbnz	r1, 1fa6c <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1fa60:	4621      	mov	r1, r4
   1fa62:	4628      	mov	r0, r5
   1fa64:	f7f4 fe02 	bl	1466c <bt_gatt_discover>
   1fa68:	b928      	cbnz	r0, 1fa76 <gatt_discover_next+0x1e>
}
   1fa6a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1fa6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1fa70:	4291      	cmp	r1, r2
   1fa72:	d107      	bne.n	1fa84 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1fa74:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1fa76:	4622      	mov	r2, r4
   1fa78:	4628      	mov	r0, r5
   1fa7a:	6863      	ldr	r3, [r4, #4]
   1fa7c:	2100      	movs	r1, #0
}
   1fa7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1fa82:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1fa84:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1fa86:	1c4b      	adds	r3, r1, #1
   1fa88:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1fa8a:	429a      	cmp	r2, r3
		params->start_handle++;
   1fa8c:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1fa8e:	d2e7      	bcs.n	1fa60 <gatt_discover_next+0x8>
   1fa90:	e7f1      	b.n	1fa76 <gatt_discover_next+0x1e>

0001fa92 <gatt_find_type_rsp>:
{
   1fa92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa96:	b088      	sub	sp, #32
   1fa98:	4607      	mov	r7, r0
   1fa9a:	4614      	mov	r4, r2
   1fa9c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1faa0:	b911      	cbnz	r1, 1faa8 <gatt_find_type_rsp+0x16>
   1faa2:	f013 0803 	ands.w	r8, r3, #3
   1faa6:	d008      	beq.n	1faba <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1faa8:	464a      	mov	r2, r9
   1faaa:	2100      	movs	r1, #0
   1faac:	4638      	mov	r0, r7
   1faae:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1fab2:	b008      	add	sp, #32
   1fab4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1fab8:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1faba:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1fabc:	f642 0a01 	movw	sl, #10241	; 0x2801
   1fac0:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1fac4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1fac8:	42ac      	cmp	r4, r5
   1faca:	d107      	bne.n	1fadc <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1facc:	464a      	mov	r2, r9
   1face:	4641      	mov	r1, r8
   1fad0:	4638      	mov	r0, r7
}
   1fad2:	b008      	add	sp, #32
   1fad4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1fad8:	f7ff bfbe 	b.w	1fa58 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1fadc:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1fae0:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1fae2:	2900      	cmp	r1, #0
   1fae4:	bf0c      	ite	eq
   1fae6:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1faea:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1faec:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1faf0:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1faf4:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1faf8:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1fafa:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1fafc:	ab01      	add	r3, sp, #4
   1fafe:	f8ad 1002 	strh.w	r1, [sp, #2]
   1fb02:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1fb04:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1fb08:	4638      	mov	r0, r7
   1fb0a:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1fb0c:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1fb10:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1fb14:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1fb18:	f8cd d00c 	str.w	sp, [sp, #12]
   1fb1c:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1fb20:	a903      	add	r1, sp, #12
   1fb22:	4798      	blx	r3
   1fb24:	3404      	adds	r4, #4
   1fb26:	2800      	cmp	r0, #0
   1fb28:	d1ce      	bne.n	1fac8 <gatt_find_type_rsp+0x36>
}
   1fb2a:	b008      	add	sp, #32
   1fb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fb30 <bt_gatt_notification>:
{
   1fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fb34:	4607      	mov	r7, r0
   1fb36:	4688      	mov	r8, r1
   1fb38:	4691      	mov	r9, r2
   1fb3a:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1fb3c:	f7f3 fc62 	bl	13404 <gatt_sub_find>
	if (!sub) {
   1fb40:	b1f8      	cbz	r0, 1fb82 <bt_gatt_notification+0x52>
	return list->head;
   1fb42:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fb44:	b1eb      	cbz	r3, 1fb82 <bt_gatt_notification+0x52>
   1fb46:	f1b3 0614 	subs.w	r6, r3, #20
   1fb4a:	d01a      	beq.n	1fb82 <bt_gatt_notification+0x52>
	return node->next;
   1fb4c:	681c      	ldr	r4, [r3, #0]
   1fb4e:	b104      	cbz	r4, 1fb52 <bt_gatt_notification+0x22>
   1fb50:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1fb52:	8933      	ldrh	r3, [r6, #8]
   1fb54:	4543      	cmp	r3, r8
   1fb56:	d10a      	bne.n	1fb6e <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1fb58:	4653      	mov	r3, sl
   1fb5a:	464a      	mov	r2, r9
   1fb5c:	4631      	mov	r1, r6
   1fb5e:	4638      	mov	r0, r7
   1fb60:	6835      	ldr	r5, [r6, #0]
   1fb62:	47a8      	blx	r5
   1fb64:	b918      	cbnz	r0, 1fb6e <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1fb66:	4631      	mov	r1, r6
   1fb68:	4638      	mov	r0, r7
   1fb6a:	f7f5 f9bb 	bl	14ee4 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fb6e:	b144      	cbz	r4, 1fb82 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fb70:	f114 0514 	adds.w	r5, r4, #20
   1fb74:	d002      	beq.n	1fb7c <bt_gatt_notification+0x4c>
	return node->next;
   1fb76:	6965      	ldr	r5, [r4, #20]
   1fb78:	b105      	cbz	r5, 1fb7c <bt_gatt_notification+0x4c>
   1fb7a:	3d14      	subs	r5, #20
{
   1fb7c:	4626      	mov	r6, r4
   1fb7e:	462c      	mov	r4, r5
   1fb80:	e7e7      	b.n	1fb52 <bt_gatt_notification+0x22>
}
   1fb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fb86 <bt_gatt_change_aware>:
{
   1fb86:	b510      	push	{r4, lr}
   1fb88:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fb8a:	f7f3 fbfd 	bl	13388 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fb8e:	b910      	cbnz	r0, 1fb96 <bt_gatt_change_aware+0x10>
		return true;
   1fb90:	2401      	movs	r4, #1
}
   1fb92:	4620      	mov	r0, r4
   1fb94:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fb96:	7a03      	ldrb	r3, [r0, #8]
   1fb98:	07db      	lsls	r3, r3, #31
   1fb9a:	d5f9      	bpl.n	1fb90 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fb9c:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1fba0:	4618      	mov	r0, r3
   1fba2:	f7ff fd59 	bl	1f658 <atomic_get>
   1fba6:	07c1      	lsls	r1, r0, #31
   1fba8:	d4f2      	bmi.n	1fb90 <bt_gatt_change_aware+0xa>
	if (!req) {
   1fbaa:	2c00      	cmp	r4, #0
   1fbac:	d0f1      	beq.n	1fb92 <bt_gatt_change_aware+0xc>
   1fbae:	4618      	mov	r0, r3
   1fbb0:	f7ff fd52 	bl	1f658 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fbb4:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fbb6:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1fbba:	d50c      	bpl.n	1fbd6 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fbbc:	e8d3 2fef 	ldaex	r2, [r3]
   1fbc0:	f022 0202 	bic.w	r2, r2, #2
   1fbc4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1fbc8:	2900      	cmp	r1, #0
   1fbca:	d1f7      	bne.n	1fbbc <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fbcc:	2101      	movs	r1, #1
   1fbce:	4618      	mov	r0, r3
   1fbd0:	f7ff fd37 	bl	1f642 <atomic_or>
}
   1fbd4:	e7dd      	b.n	1fb92 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fbd6:	2102      	movs	r1, #2
   1fbd8:	e7f9      	b.n	1fbce <bt_gatt_change_aware+0x48>

0001fbda <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fbda:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fbde:	f890 30d2 	ldrb.w	r3, [r0, #210]	; 0xd2
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1fbe2:	6800      	ldr	r0, [r0, #0]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fbe4:	f002 0201 	and.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fbe8:	78c0      	ldrb	r0, [r0, #3]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fbea:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fbee:	b928      	cbnz	r0, 1fbfc <le_sc_oob_config_set+0x22>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1fbf0:	b952      	cbnz	r2, 1fc08 <le_sc_oob_config_set+0x2e>
				     BT_CONN_OOB_BOTH_PEERS :
   1fbf2:	2b00      	cmp	r3, #0
   1fbf4:	bf0c      	ite	eq
   1fbf6:	2303      	moveq	r3, #3
   1fbf8:	2300      	movne	r3, #0
   1fbfa:	e009      	b.n	1fc10 <le_sc_oob_config_set+0x36>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1fbfc:	b952      	cbnz	r2, 1fc14 <le_sc_oob_config_set+0x3a>
				     BT_CONN_OOB_BOTH_PEERS :
   1fbfe:	2b00      	cmp	r3, #0
   1fc00:	bf0c      	ite	eq
   1fc02:	2303      	moveq	r3, #3
   1fc04:	2301      	movne	r3, #1
   1fc06:	e003      	b.n	1fc10 <le_sc_oob_config_set+0x36>
				     BT_CONN_OOB_BOTH_PEERS :
   1fc08:	2b00      	cmp	r3, #0
   1fc0a:	bf0c      	ite	eq
   1fc0c:	2301      	moveq	r3, #1
   1fc0e:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   1fc10:	704b      	strb	r3, [r1, #1]
}
   1fc12:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   1fc14:	005b      	lsls	r3, r3, #1
   1fc16:	e7fb      	b.n	1fc10 <le_sc_oob_config_set+0x36>

0001fc18 <smp_signing_info>:
}
   1fc18:	2007      	movs	r0, #7
   1fc1a:	4770      	bx	lr

0001fc1c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fc1c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fc20:	4108      	asrs	r0, r1
}
   1fc22:	f000 0001 	and.w	r0, r0, #1
   1fc26:	4770      	bx	lr

0001fc28 <update_keys_check>:
{
   1fc28:	4603      	mov	r3, r0
   1fc2a:	b510      	push	{r4, lr}
	if (!keys ||
   1fc2c:	b1f9      	cbz	r1, 1fc6e <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1fc2e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1fc30:	f010 0f24 	tst.w	r0, #36	; 0x24
   1fc34:	d01b      	beq.n	1fc6e <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fc36:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   1fc3a:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1fc3e:	7b09      	ldrb	r1, [r1, #12]
   1fc40:	42a2      	cmp	r2, r4
   1fc42:	bf28      	it	cs
   1fc44:	4622      	movcs	r2, r4
   1fc46:	4291      	cmp	r1, r2
   1fc48:	d901      	bls.n	1fc4e <update_keys_check+0x26>
		return false;
   1fc4a:	2000      	movs	r0, #0
}
   1fc4c:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1fc4e:	0682      	lsls	r2, r0, #26
   1fc50:	d405      	bmi.n	1fc5e <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1fc52:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   1fc56:	3800      	subs	r0, #0
   1fc58:	bf18      	it	ne
   1fc5a:	2001      	movne	r0, #1
   1fc5c:	e7f6      	b.n	1fc4c <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fc5e:	2105      	movs	r1, #5
   1fc60:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   1fc64:	f7ff ffda 	bl	1fc1c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1fc68:	2800      	cmp	r0, #0
   1fc6a:	d1f2      	bne.n	1fc52 <update_keys_check+0x2a>
   1fc6c:	e7ed      	b.n	1fc4a <update_keys_check+0x22>
		return true;
   1fc6e:	2001      	movs	r0, #1
   1fc70:	e7ec      	b.n	1fc4c <update_keys_check+0x24>

0001fc72 <remote_sec_level_reachable>:
{
   1fc72:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1fc74:	6802      	ldr	r2, [r0, #0]
{
   1fc76:	4603      	mov	r3, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1fc78:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   1fc7a:	2a03      	cmp	r2, #3
   1fc7c:	d016      	beq.n	1fcac <remote_sec_level_reachable+0x3a>
   1fc7e:	d805      	bhi.n	1fc8c <remote_sec_level_reachable+0x1a>
   1fc80:	3a01      	subs	r2, #1
   1fc82:	2a01      	cmp	r2, #1
   1fc84:	bf94      	ite	ls
   1fc86:	2000      	movls	r0, #0
   1fc88:	2008      	movhi	r0, #8
}
   1fc8a:	bd08      	pop	{r3, pc}
	switch (sec) {
   1fc8c:	2a04      	cmp	r2, #4
   1fc8e:	d112      	bne.n	1fcb6 <remote_sec_level_reachable+0x44>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fc90:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
   1fc94:	f890 10cd 	ldrb.w	r1, [r0, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1fc98:	428a      	cmp	r2, r1
   1fc9a:	bf28      	it	cs
   1fc9c:	460a      	movcs	r2, r1
   1fc9e:	2a10      	cmp	r2, #16
   1fca0:	d10b      	bne.n	1fcba <remote_sec_level_reachable+0x48>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fca2:	2105      	movs	r1, #5
   1fca4:	30c4      	adds	r0, #196	; 0xc4
   1fca6:	f7ff ffb9 	bl	1fc1c <atomic_test_bit>
   1fcaa:	b110      	cbz	r0, 1fcb2 <remote_sec_level_reachable+0x40>
		if (smp->method == JUST_WORKS) {
   1fcac:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1fcb0:	b92b      	cbnz	r3, 1fcbe <remote_sec_level_reachable+0x4c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fcb2:	2003      	movs	r0, #3
   1fcb4:	e7e9      	b.n	1fc8a <remote_sec_level_reachable+0x18>
	switch (sec) {
   1fcb6:	2008      	movs	r0, #8
   1fcb8:	e7e7      	b.n	1fc8a <remote_sec_level_reachable+0x18>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   1fcba:	2006      	movs	r0, #6
   1fcbc:	e7e5      	b.n	1fc8a <remote_sec_level_reachable+0x18>
		return 0;
   1fcbe:	2000      	movs	r0, #0
   1fcc0:	e7e3      	b.n	1fc8a <remote_sec_level_reachable+0x18>

0001fcc2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fcc2:	2301      	movs	r3, #1
   1fcc4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fcc6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fcc8:	e8d0 2fef 	ldaex	r2, [r0]
   1fccc:	401a      	ands	r2, r3
   1fcce:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1fcd2:	2900      	cmp	r1, #0
   1fcd4:	d1f8      	bne.n	1fcc8 <atomic_clear_bit+0x6>
}
   1fcd6:	4770      	bx	lr

0001fcd8 <bt_smp_aes_cmac>:
{
   1fcd8:	b570      	push	{r4, r5, r6, lr}
   1fcda:	b0c2      	sub	sp, #264	; 0x108
   1fcdc:	460d      	mov	r5, r1
   1fcde:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fce0:	4601      	mov	r1, r0
   1fce2:	aa16      	add	r2, sp, #88	; 0x58
   1fce4:	4668      	mov	r0, sp
{
   1fce6:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fce8:	f7fd ff17 	bl	1db1a <tc_cmac_setup>
   1fcec:	b150      	cbz	r0, 1fd04 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1fcee:	4632      	mov	r2, r6
   1fcf0:	4629      	mov	r1, r5
   1fcf2:	4668      	mov	r0, sp
   1fcf4:	f7fd ff3c 	bl	1db70 <tc_cmac_update>
   1fcf8:	b120      	cbz	r0, 1fd04 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1fcfa:	4669      	mov	r1, sp
   1fcfc:	4620      	mov	r0, r4
   1fcfe:	f7fd ffa2 	bl	1dc46 <tc_cmac_final>
   1fd02:	b918      	cbnz	r0, 1fd0c <bt_smp_aes_cmac+0x34>
		return -EIO;
   1fd04:	f06f 0004 	mvn.w	r0, #4
}
   1fd08:	b042      	add	sp, #264	; 0x108
   1fd0a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1fd0c:	2000      	movs	r0, #0
   1fd0e:	e7fb      	b.n	1fd08 <bt_smp_aes_cmac+0x30>

0001fd10 <bt_smp_disconnected>:
{
   1fd10:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1fd12:	6803      	ldr	r3, [r0, #0]
{
   1fd14:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   1fd16:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   1fd1a:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1fd1e:	f7fb ff4d 	bl	1bbbc <k_delayed_work_cancel>
	if (keys) {
   1fd22:	b13d      	cbz	r5, 1fd34 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fd24:	89eb      	ldrh	r3, [r5, #14]
   1fd26:	b113      	cbz	r3, 1fd2e <bt_smp_disconnected+0x1e>
   1fd28:	7b6b      	ldrb	r3, [r5, #13]
   1fd2a:	079b      	lsls	r3, r3, #30
   1fd2c:	d502      	bpl.n	1fd34 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1fd2e:	4628      	mov	r0, r5
   1fd30:	f7f7 fa56 	bl	171e0 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1fd34:	4620      	mov	r0, r4
}
   1fd36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1fd3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1fd3e:	2100      	movs	r1, #0
   1fd40:	f7fe bb0d 	b.w	1e35e <memset>

0001fd44 <smp_keys_check>:
{
   1fd44:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1fd46:	210b      	movs	r1, #11
{
   1fd48:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1fd4a:	3004      	adds	r0, #4
   1fd4c:	f7ff ff66 	bl	1fc1c <atomic_test_bit>
   1fd50:	b108      	cbz	r0, 1fd56 <smp_keys_check+0x12>
		return false;
   1fd52:	2000      	movs	r0, #0
}
   1fd54:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   1fd56:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fd5a:	b983      	cbnz	r3, 1fd7e <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   1fd5c:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1fd60:	462a      	mov	r2, r5
   1fd62:	2020      	movs	r0, #32
   1fd64:	7a21      	ldrb	r1, [r4, #8]
   1fd66:	f7f7 f9dd 	bl	17124 <bt_keys_find>
   1fd6a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1fd6e:	b930      	cbnz	r0, 1fd7e <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1fd70:	462a      	mov	r2, r5
   1fd72:	2004      	movs	r0, #4
   1fd74:	7a21      	ldrb	r1, [r4, #8]
   1fd76:	f7f7 f9d5 	bl	17124 <bt_keys_find>
   1fd7a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   1fd7e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fd82:	2b00      	cmp	r3, #0
   1fd84:	d0e5      	beq.n	1fd52 <smp_keys_check+0xe>
   1fd86:	89da      	ldrh	r2, [r3, #14]
   1fd88:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1fd8c:	2a00      	cmp	r2, #0
   1fd8e:	d0e0      	beq.n	1fd52 <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1fd90:	7aa2      	ldrb	r2, [r4, #10]
   1fd92:	2a02      	cmp	r2, #2
   1fd94:	d902      	bls.n	1fd9c <smp_keys_check+0x58>
   1fd96:	7b5b      	ldrb	r3, [r3, #13]
   1fd98:	07db      	lsls	r3, r3, #31
   1fd9a:	d5da      	bpl.n	1fd52 <smp_keys_check+0xe>
	return true;
   1fd9c:	2001      	movs	r0, #1
   1fd9e:	e7d9      	b.n	1fd54 <smp_keys_check+0x10>

0001fda0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1fda0:	b510      	push	{r4, lr}
   1fda2:	1e43      	subs	r3, r0, #1
   1fda4:	f100 0210 	add.w	r2, r0, #16
   1fda8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1fdaa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fdae:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1fdb2:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fdb4:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1fdb6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1fdb8:	d1f7      	bne.n	1fdaa <sys_mem_swap.constprop.0+0xa>
	}
}
   1fdba:	bd10      	pop	{r4, pc}

0001fdbc <smp_f6>:
{
   1fdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdbe:	4616      	mov	r6, r2
   1fdc0:	461c      	mov	r4, r3
   1fdc2:	4605      	mov	r5, r0
   1fdc4:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   1fdc6:	2210      	movs	r2, #16
   1fdc8:	a805      	add	r0, sp, #20
{
   1fdca:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1fdcc:	f7f5 fb30 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1fdd0:	2210      	movs	r2, #16
   1fdd2:	4631      	mov	r1, r6
   1fdd4:	a809      	add	r0, sp, #36	; 0x24
   1fdd6:	f7f5 fb2b 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1fdda:	4621      	mov	r1, r4
   1fddc:	2210      	movs	r2, #16
   1fdde:	a80d      	add	r0, sp, #52	; 0x34
   1fde0:	f7f5 fb26 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1fde4:	2203      	movs	r2, #3
   1fde6:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fde8:	a811      	add	r0, sp, #68	; 0x44
   1fdea:	f7f5 fb21 	bl	15430 <sys_memcpy_swap>
	m[51] = a1->type;
   1fdee:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1fdf0:	2206      	movs	r2, #6
	m[51] = a1->type;
   1fdf2:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   1fdf6:	a812      	add	r0, sp, #72	; 0x48
   1fdf8:	4621      	mov	r1, r4
	m[51] = a1->type;
   1fdfa:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1fdfe:	f7fe fa83 	bl	1e308 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1fe02:	4621      	mov	r1, r4
   1fe04:	2206      	movs	r2, #6
   1fe06:	a812      	add	r0, sp, #72	; 0x48
   1fe08:	f7f5 fb12 	bl	15430 <sys_memcpy_swap>
	m[58] = a2->type;
   1fe0c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1fe0e:	2206      	movs	r2, #6
	m[58] = a2->type;
   1fe10:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1fe14:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fe18:	4621      	mov	r1, r4
	m[58] = a2->type;
   1fe1a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1fe1e:	f7fe fa73 	bl	1e308 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1fe22:	4621      	mov	r1, r4
   1fe24:	2206      	movs	r2, #6
   1fe26:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fe2a:	f7f5 fb01 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1fe2e:	2210      	movs	r2, #16
   1fe30:	4629      	mov	r1, r5
   1fe32:	a801      	add	r0, sp, #4
   1fe34:	f7f5 fafc 	bl	15430 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1fe38:	463b      	mov	r3, r7
   1fe3a:	2241      	movs	r2, #65	; 0x41
   1fe3c:	a905      	add	r1, sp, #20
   1fe3e:	a801      	add	r0, sp, #4
   1fe40:	f7ff ff4a 	bl	1fcd8 <bt_smp_aes_cmac>
	if (err) {
   1fe44:	4604      	mov	r4, r0
   1fe46:	b910      	cbnz	r0, 1fe4e <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1fe48:	4638      	mov	r0, r7
   1fe4a:	f7ff ffa9 	bl	1fda0 <sys_mem_swap.constprop.0>
}
   1fe4e:	4620      	mov	r0, r4
   1fe50:	b017      	add	sp, #92	; 0x5c
   1fe52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe54 <smp_f4>:
{
   1fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe56:	460e      	mov	r6, r1
   1fe58:	4614      	mov	r4, r2
   1fe5a:	461d      	mov	r5, r3
   1fe5c:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1fe5e:	4601      	mov	r1, r0
   1fe60:	2220      	movs	r2, #32
   1fe62:	a805      	add	r0, sp, #20
{
   1fe64:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1fe66:	f7f5 fae3 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1fe6a:	2220      	movs	r2, #32
   1fe6c:	4631      	mov	r1, r6
   1fe6e:	a80d      	add	r0, sp, #52	; 0x34
   1fe70:	f7f5 fade 	bl	15430 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1fe74:	4621      	mov	r1, r4
   1fe76:	2210      	movs	r2, #16
   1fe78:	a801      	add	r0, sp, #4
	m[64] = z;
   1fe7a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1fe7e:	f7f5 fad7 	bl	15430 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1fe82:	463b      	mov	r3, r7
   1fe84:	2241      	movs	r2, #65	; 0x41
   1fe86:	a905      	add	r1, sp, #20
   1fe88:	a801      	add	r0, sp, #4
   1fe8a:	f7ff ff25 	bl	1fcd8 <bt_smp_aes_cmac>
	if (err) {
   1fe8e:	4604      	mov	r4, r0
   1fe90:	b910      	cbnz	r0, 1fe98 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1fe92:	4638      	mov	r0, r7
   1fe94:	f7ff ff84 	bl	1fda0 <sys_mem_swap.constprop.0>
}
   1fe98:	4620      	mov	r0, r4
   1fe9a:	b017      	add	sp, #92	; 0x5c
   1fe9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe9e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fe9e:	2301      	movs	r3, #1
   1fea0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fea2:	e8d0 2fef 	ldaex	r2, [r0]
   1fea6:	431a      	orrs	r2, r3
   1fea8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1feac:	2900      	cmp	r1, #0
   1feae:	d1f8      	bne.n	1fea2 <atomic_set_bit+0x4>
}
   1feb0:	4770      	bx	lr

0001feb2 <smp_keypress_notif>:
{
   1feb2:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1feb4:	210e      	movs	r1, #14
   1feb6:	30c0      	adds	r0, #192	; 0xc0
   1feb8:	f7ff fff1 	bl	1fe9e <atomic_set_bit>
}
   1febc:	2000      	movs	r0, #0
   1febe:	bd08      	pop	{r3, pc}

0001fec0 <generate_dhkey>:
{
   1fec0:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1fec2:	2107      	movs	r1, #7
{
   1fec4:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1fec6:	30c4      	adds	r0, #196	; 0xc4
   1fec8:	f7ff ffe9 	bl	1fe9e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1fecc:	2008      	movs	r0, #8
   1fece:	f7f5 fa9b 	bl	15408 <smp_find>
   1fed2:	b920      	cbnz	r0, 1fede <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   1fed4:	4620      	mov	r0, r4
}
   1fed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   1feda:	f7f5 bce1 	b.w	158a0 <smp_dhkey_generate>
}
   1fede:	2000      	movs	r0, #0
   1fee0:	bd10      	pop	{r4, pc}

0001fee2 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1fee2:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fee4:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1fee8:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1feea:	4628      	mov	r0, r5
   1feec:	2104      	movs	r1, #4
   1feee:	f7ff fe95 	bl	1fc1c <atomic_test_bit>
   1fef2:	b168      	cbz	r0, 1ff10 <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   1fef4:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fef6:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1fef8:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fefa:	4608      	mov	r0, r1
   1fefc:	f7fe febc 	bl	1ec78 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1ff00:	4604      	mov	r4, r0
   1ff02:	b940      	cbnz	r0, 1ff16 <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ff04:	2104      	movs	r1, #4
   1ff06:	4628      	mov	r0, r5
   1ff08:	f7ff ffc9 	bl	1fe9e <atomic_set_bit>
}
   1ff0c:	4620      	mov	r0, r4
   1ff0e:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1ff10:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ff14:	e7ef      	b.n	1fef6 <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   1ff16:	2101      	movs	r1, #1
   1ff18:	3008      	adds	r0, #8
   1ff1a:	f7f7 fcbd 	bl	17898 <net_buf_simple_add>
	hdr->code = op;
   1ff1e:	7006      	strb	r6, [r0, #0]
	return buf;
   1ff20:	e7f4      	b.n	1ff0c <smp_create_pdu.constprop.0+0x2a>

0001ff22 <send_pairing_rsp>:
{
   1ff22:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1ff24:	2102      	movs	r1, #2
{
   1ff26:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1ff28:	f7ff ffdb 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1ff2c:	4604      	mov	r4, r0
   1ff2e:	b178      	cbz	r0, 1ff50 <send_pairing_rsp+0x2e>
   1ff30:	2106      	movs	r1, #6
   1ff32:	3008      	adds	r0, #8
   1ff34:	f7f7 fcb0 	bl	17898 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1ff38:	2206      	movs	r2, #6
   1ff3a:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   1ff3e:	f7fe f9e3 	bl	1e308 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1ff42:	4628      	mov	r0, r5
   1ff44:	2200      	movs	r2, #0
   1ff46:	4621      	mov	r1, r4
   1ff48:	f7f5 fc18 	bl	1577c <smp_send.constprop.0>
	return 0;
   1ff4c:	2000      	movs	r0, #0
}
   1ff4e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ff50:	2008      	movs	r0, #8
   1ff52:	e7fc      	b.n	1ff4e <send_pairing_rsp+0x2c>

0001ff54 <smp_send_pairing_random>:
{
   1ff54:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1ff56:	2104      	movs	r1, #4
{
   1ff58:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1ff5a:	f7ff ffc2 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1ff5e:	4604      	mov	r4, r0
   1ff60:	b178      	cbz	r0, 1ff82 <smp_send_pairing_random+0x2e>
   1ff62:	2110      	movs	r1, #16
   1ff64:	3008      	adds	r0, #8
   1ff66:	f7f7 fc97 	bl	17898 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1ff6a:	2210      	movs	r2, #16
   1ff6c:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   1ff70:	f7fe f9ca 	bl	1e308 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1ff74:	4628      	mov	r0, r5
   1ff76:	2200      	movs	r2, #0
   1ff78:	4621      	mov	r1, r4
   1ff7a:	f7f5 fbff 	bl	1577c <smp_send.constprop.0>
	return 0;
   1ff7e:	2000      	movs	r0, #0
}
   1ff80:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ff82:	2008      	movs	r0, #8
   1ff84:	e7fc      	b.n	1ff80 <smp_send_pairing_random+0x2c>

0001ff86 <sc_smp_send_dhkey_check>:
{
   1ff86:	b570      	push	{r4, r5, r6, lr}
   1ff88:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1ff8a:	210d      	movs	r1, #13
{
   1ff8c:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1ff8e:	f7ff ffa8 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!buf) {
   1ff92:	4604      	mov	r4, r0
   1ff94:	b170      	cbz	r0, 1ffb4 <sc_smp_send_dhkey_check+0x2e>
   1ff96:	2110      	movs	r1, #16
   1ff98:	3008      	adds	r0, #8
   1ff9a:	f7f7 fc7d 	bl	17898 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1ff9e:	2210      	movs	r2, #16
   1ffa0:	4631      	mov	r1, r6
   1ffa2:	f7fe f9b1 	bl	1e308 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1ffa6:	4628      	mov	r0, r5
   1ffa8:	2200      	movs	r2, #0
   1ffaa:	4621      	mov	r1, r4
   1ffac:	f7f5 fbe6 	bl	1577c <smp_send.constprop.0>
	return 0;
   1ffb0:	2000      	movs	r0, #0
}
   1ffb2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ffb4:	2008      	movs	r0, #8
   1ffb6:	e7fc      	b.n	1ffb2 <sc_smp_send_dhkey_check+0x2c>

0001ffb8 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ffb8:	2301      	movs	r3, #1
   1ffba:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ffbe:	43ca      	mvns	r2, r1
{
   1ffc0:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ffc2:	e8d0 3fef 	ldaex	r3, [r0]
   1ffc6:	ea03 0c02 	and.w	ip, r3, r2
   1ffca:	e8c0 cfee 	stlex	lr, ip, [r0]
   1ffce:	f1be 0f00 	cmp.w	lr, #0
   1ffd2:	d1f6      	bne.n	1ffc2 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   1ffd4:	420b      	tst	r3, r1
}
   1ffd6:	bf14      	ite	ne
   1ffd8:	2001      	movne	r0, #1
   1ffda:	2000      	moveq	r0, #0
   1ffdc:	f85d fb04 	ldr.w	pc, [sp], #4

0001ffe0 <smp_reset>:
{
   1ffe0:	b538      	push	{r3, r4, r5, lr}
   1ffe2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ffe4:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1ffe6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1ffea:	f7fb fde7 	bl	1bbbc <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1ffee:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   1fff0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	smp->method = JUST_WORKS;
   1fff4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fff8:	e8d0 2fef 	ldaex	r2, [r0]
   1fffc:	e8c0 3fe1 	stlex	r1, r3, [r0]
   20000:	2900      	cmp	r1, #0
   20002:	d1f9      	bne.n	1fff8 <smp_reset+0x18>
   20004:	34c4      	adds	r4, #196	; 0xc4
   20006:	e8d4 2fef 	ldaex	r2, [r4]
   2000a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2000e:	2900      	cmp	r1, #0
   20010:	d1f9      	bne.n	20006 <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   20012:	7a6b      	ldrb	r3, [r5, #9]
   20014:	7aaa      	ldrb	r2, [r5, #10]
   20016:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   20018:	bf18      	it	ne
   2001a:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2001c:	78eb      	ldrb	r3, [r5, #3]
   2001e:	b923      	cbnz	r3, 2002a <smp_reset+0x4a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   20020:	210b      	movs	r1, #11
}
   20022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   20026:	f7ff bf3a 	b.w	1fe9e <atomic_set_bit>
   2002a:	2101      	movs	r1, #1
   2002c:	e7f9      	b.n	20022 <smp_reset+0x42>

0002002e <smp_error>:
{
   2002e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20030:	4606      	mov	r6, r0
   20032:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   20034:	f7f6 fad6 	bl	165e4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   20038:	2105      	movs	r1, #5
   2003a:	4630      	mov	r0, r6
   2003c:	f7ff ff51 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!buf) {
   20040:	4605      	mov	r5, r0
   20042:	b178      	cbz	r0, 20064 <smp_error+0x36>
   20044:	2101      	movs	r1, #1
   20046:	3008      	adds	r0, #8
   20048:	f7f7 fc26 	bl	17898 <net_buf_simple_add>
	rsp->reason = reason;
   2004c:	7004      	strb	r4, [r0, #0]
   2004e:	2400      	movs	r4, #0
   20050:	462a      	mov	r2, r5
   20052:	4623      	mov	r3, r4
   20054:	2106      	movs	r1, #6
   20056:	6830      	ldr	r0, [r6, #0]
   20058:	9400      	str	r4, [sp, #0]
   2005a:	f7fe fe10 	bl	1ec7e <bt_l2cap_send_cb>
	return 0;
   2005e:	4620      	mov	r0, r4
}
   20060:	b002      	add	sp, #8
   20062:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   20064:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20068:	e7fa      	b.n	20060 <smp_error+0x32>

0002006a <bt_smp_dhkey_ready>:
{
   2006a:	b570      	push	{r4, r5, r6, lr}
   2006c:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2006e:	2008      	movs	r0, #8
   20070:	f7f5 f9ca 	bl	15408 <smp_find>
	if (smp) {
   20074:	4604      	mov	r4, r0
   20076:	b1c0      	cbz	r0, 200aa <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   20078:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   2007c:	2108      	movs	r1, #8
   2007e:	4628      	mov	r0, r5
   20080:	f7ff fe1f 	bl	1fcc2 <atomic_clear_bit>
	if (!dhkey) {
   20084:	b3be      	cbz	r6, 200f6 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   20086:	2107      	movs	r1, #7
   20088:	f7ff fe1b 	bl	1fcc2 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   2008c:	4631      	mov	r1, r6
   2008e:	2220      	movs	r2, #32
   20090:	f204 1057 	addw	r0, r4, #343	; 0x157
   20094:	f7fe f938 	bl	1e308 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20098:	210a      	movs	r1, #10
   2009a:	4628      	mov	r0, r5
   2009c:	f7ff fdbe 	bl	1fc1c <atomic_test_bit>
   200a0:	b168      	cbz	r0, 200be <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   200a2:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   200a4:	4628      	mov	r0, r5
   200a6:	f7ff fefa 	bl	1fe9e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   200aa:	2007      	movs	r0, #7
   200ac:	f7f5 f9ac 	bl	15408 <smp_find>
		if (smp) {
   200b0:	4604      	mov	r4, r0
   200b2:	b118      	cbz	r0, 200bc <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   200b4:	f7f5 fbf4 	bl	158a0 <smp_dhkey_generate>
			if (err) {
   200b8:	4601      	mov	r1, r0
   200ba:	b9a8      	cbnz	r0, 200e8 <bt_smp_dhkey_ready+0x7e>
}
   200bc:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   200be:	2110      	movs	r1, #16
   200c0:	4628      	mov	r0, r5
   200c2:	f7ff fdab 	bl	1fc1c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   200c6:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   200c8:	2800      	cmp	r0, #0
   200ca:	d1eb      	bne.n	200a4 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   200cc:	4628      	mov	r0, r5
   200ce:	f7ff fda5 	bl	1fc1c <atomic_test_bit>
   200d2:	2800      	cmp	r0, #0
   200d4:	d0e9      	beq.n	200aa <bt_smp_dhkey_ready+0x40>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   200d6:	6823      	ldr	r3, [r4, #0]
			return compute_and_send_master_dhcheck(smp);
   200d8:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   200da:	78db      	ldrb	r3, [r3, #3]
   200dc:	b943      	cbnz	r3, 200f0 <bt_smp_dhkey_ready+0x86>
			return compute_and_send_master_dhcheck(smp);
   200de:	f7f6 f8d3 	bl	16288 <compute_and_send_master_dhcheck>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   200e2:	4601      	mov	r1, r0
		if (err) {
   200e4:	2800      	cmp	r0, #0
   200e6:	d0e0      	beq.n	200aa <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   200e8:	4620      	mov	r0, r4
   200ea:	f7ff ffa0 	bl	2002e <smp_error>
   200ee:	e7dc      	b.n	200aa <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   200f0:	f7f6 f930 	bl	16354 <compute_and_check_and_send_slave_dhcheck>
   200f4:	e7f5      	b.n	200e2 <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   200f6:	210b      	movs	r1, #11
   200f8:	e7f6      	b.n	200e8 <bt_smp_dhkey_ready+0x7e>

000200fa <bt_smp_encrypt_change>:
{
   200fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   200fc:	4605      	mov	r5, r0
{
   200fe:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   20100:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   20104:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20106:	2101      	movs	r1, #1
   20108:	4628      	mov	r0, r5
   2010a:	f7ff fdda 	bl	1fcc2 <atomic_clear_bit>
	if (hci_status) {
   2010e:	2e00      	cmp	r6, #0
   20110:	d14a      	bne.n	201a8 <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   20112:	7afb      	ldrb	r3, [r7, #11]
   20114:	2b00      	cmp	r3, #0
   20116:	d047      	beq.n	201a8 <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20118:	2103      	movs	r1, #3
   2011a:	f7ff fd7f 	bl	1fc1c <atomic_test_bit>
   2011e:	b920      	cbnz	r0, 2012a <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   20120:	4620      	mov	r0, r4
}
   20122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   20126:	f7ff bf5b 	b.w	1ffe0 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2012a:	2105      	movs	r1, #5
   2012c:	4628      	mov	r0, r5
   2012e:	f7ff fd75 	bl	1fc1c <atomic_test_bit>
   20132:	b198      	cbz	r0, 2015c <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   20134:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   20138:	071e      	lsls	r6, r3, #28
   2013a:	d507      	bpl.n	2014c <bt_smp_encrypt_change+0x52>
   2013c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   20140:	0718      	lsls	r0, r3, #28
   20142:	d503      	bpl.n	2014c <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   20144:	2111      	movs	r1, #17
   20146:	4628      	mov	r0, r5
   20148:	f7ff fea9 	bl	1fe9e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2014c:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   20150:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20154:	f023 0308 	bic.w	r3, r3, #8
   20158:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2015c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   20160:	07d9      	lsls	r1, r3, #31
   20162:	d519      	bpl.n	20198 <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   20164:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20166:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2016a:	f7ff fe98 	bl	1fe9e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2016e:	2102      	movs	r1, #2
   20170:	4628      	mov	r0, r5
   20172:	f7ff fe94 	bl	1fe9e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20176:	78fb      	ldrb	r3, [r7, #3]
   20178:	b913      	cbnz	r3, 20180 <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   2017a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   2017e:	b99b      	cbnz	r3, 201a8 <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   20180:	4620      	mov	r0, r4
   20182:	f7f5 fc77 	bl	15a74 <bt_smp_distribute_keys>
   20186:	b978      	cbnz	r0, 201a8 <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   20188:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   2018c:	b961      	cbnz	r1, 201a8 <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   2018e:	4620      	mov	r0, r4
}
   20190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   20194:	f7f6 ba26 	b.w	165e4 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   20198:	079a      	lsls	r2, r3, #30
   2019a:	d501      	bpl.n	201a0 <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2019c:	2108      	movs	r1, #8
   2019e:	e7e2      	b.n	20166 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   201a0:	075b      	lsls	r3, r3, #29
   201a2:	d5e4      	bpl.n	2016e <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   201a4:	210a      	movs	r1, #10
   201a6:	e7de      	b.n	20166 <bt_smp_encrypt_change+0x6c>
}
   201a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000201aa <smp_c1>:
{
   201aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   201ae:	4699      	mov	r9, r3
   201b0:	b089      	sub	sp, #36	; 0x24
   201b2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   201b6:	783b      	ldrb	r3, [r7, #0]
{
   201b8:	460c      	mov	r4, r1
	p1[0] = ia->type;
   201ba:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   201be:	f898 3000 	ldrb.w	r3, [r8]
{
   201c2:	4611      	mov	r1, r2
   201c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   201c6:	2207      	movs	r2, #7
{
   201c8:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   201ca:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   201ce:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   201d2:	f7fe f899 	bl	1e308 <memcpy>
	memcpy(p1 + 9, pres, 7);
   201d6:	2207      	movs	r2, #7
   201d8:	4649      	mov	r1, r9
   201da:	f10d 0009 	add.w	r0, sp, #9
   201de:	f7fe f893 	bl	1e308 <memcpy>
	while (len--) {
   201e2:	4629      	mov	r1, r5
   201e4:	466a      	mov	r2, sp
   201e6:	f104 0010 	add.w	r0, r4, #16
   201ea:	42a0      	cmp	r0, r4
   201ec:	d127      	bne.n	2023e <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   201ee:	462a      	mov	r2, r5
   201f0:	4629      	mov	r1, r5
   201f2:	4630      	mov	r0, r6
   201f4:	f7fe fb5d 	bl	1e8b2 <bt_encrypt_le>
	if (err) {
   201f8:	4604      	mov	r4, r0
   201fa:	b9e0      	cbnz	r0, 20236 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   201fc:	2206      	movs	r2, #6
   201fe:	f108 0101 	add.w	r1, r8, #1
   20202:	a804      	add	r0, sp, #16
   20204:	f7fe f880 	bl	1e308 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   20208:	2206      	movs	r2, #6
   2020a:	1c79      	adds	r1, r7, #1
   2020c:	f10d 0016 	add.w	r0, sp, #22
   20210:	f7fe f87a 	bl	1e308 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   20214:	2204      	movs	r2, #4
   20216:	4621      	mov	r1, r4
   20218:	a807      	add	r0, sp, #28
   2021a:	f7fe f8a0 	bl	1e35e <memset>
	while (len--) {
   2021e:	462a      	mov	r2, r5
   20220:	f105 0010 	add.w	r0, r5, #16
   20224:	ab04      	add	r3, sp, #16
   20226:	4282      	cmp	r2, r0
   20228:	d112      	bne.n	20250 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2022a:	462a      	mov	r2, r5
   2022c:	4629      	mov	r1, r5
   2022e:	4630      	mov	r0, r6
   20230:	f7fe fb3f 	bl	1e8b2 <bt_encrypt_le>
   20234:	4604      	mov	r4, r0
}
   20236:	4620      	mov	r0, r4
   20238:	b009      	add	sp, #36	; 0x24
   2023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2023e:	f814 3b01 	ldrb.w	r3, [r4], #1
   20242:	f812 cb01 	ldrb.w	ip, [r2], #1
   20246:	ea83 030c 	eor.w	r3, r3, ip
   2024a:	f801 3b01 	strb.w	r3, [r1], #1
   2024e:	e7cc      	b.n	201ea <smp_c1+0x40>
   20250:	f812 1b01 	ldrb.w	r1, [r2], #1
   20254:	f813 4b01 	ldrb.w	r4, [r3], #1
   20258:	4061      	eors	r1, r4
   2025a:	f802 1c01 	strb.w	r1, [r2, #-1]
   2025e:	e7e2      	b.n	20226 <smp_c1+0x7c>

00020260 <legacy_send_pairing_confirm>:
{
   20260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   20262:	2103      	movs	r1, #3
{
   20264:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   20266:	6804      	ldr	r4, [r0, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   20268:	f7ff fe3b 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!buf) {
   2026c:	4606      	mov	r6, r0
   2026e:	b1c0      	cbz	r0, 202a2 <legacy_send_pairing_confirm+0x42>
   20270:	2110      	movs	r1, #16
   20272:	3008      	adds	r0, #8
   20274:	f7f7 fb10 	bl	17898 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   20278:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2027c:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2027e:	9002      	str	r0, [sp, #8]
   20280:	9301      	str	r3, [sp, #4]
   20282:	9400      	str	r4, [sp, #0]
   20284:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   20288:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   2028c:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   20290:	f205 1007 	addw	r0, r5, #263	; 0x107
   20294:	f7ff ff89 	bl	201aa <smp_c1>
   20298:	4604      	mov	r4, r0
   2029a:	b120      	cbz	r0, 202a6 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   2029c:	4630      	mov	r0, r6
   2029e:	f7f7 f9e5 	bl	1766c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   202a2:	2008      	movs	r0, #8
   202a4:	e00a      	b.n	202bc <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   202a6:	4602      	mov	r2, r0
   202a8:	4631      	mov	r1, r6
   202aa:	4628      	mov	r0, r5
   202ac:	f7f5 fa66 	bl	1577c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   202b0:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   202b4:	4621      	mov	r1, r4
   202b6:	f7ff fd04 	bl	1fcc2 <atomic_clear_bit>
	return 0;
   202ba:	4620      	mov	r0, r4
}
   202bc:	b004      	add	sp, #16
   202be:	bd70      	pop	{r4, r5, r6, pc}

000202c0 <legacy_pairing_confirm>:
{
   202c0:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   202c2:	6803      	ldr	r3, [r0, #0]
{
   202c4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   202c6:	78db      	ldrb	r3, [r3, #3]
   202c8:	b94b      	cbnz	r3, 202de <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   202ca:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   202cc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   202d0:	f7ff fde5 	bl	1fe9e <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   202d4:	4620      	mov	r0, r4
}
   202d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   202da:	f7ff bfc1 	b.w	20260 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   202de:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   202e2:	210a      	movs	r1, #10
   202e4:	4618      	mov	r0, r3
   202e6:	f7ff fc99 	bl	1fc1c <atomic_test_bit>
   202ea:	b908      	cbnz	r0, 202f0 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   202ec:	2104      	movs	r1, #4
   202ee:	e7ed      	b.n	202cc <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   202f0:	4618      	mov	r0, r3
   202f2:	2100      	movs	r1, #0
   202f4:	f7ff fdd3 	bl	1fe9e <atomic_set_bit>
}
   202f8:	2000      	movs	r0, #0
   202fa:	bd10      	pop	{r4, pc}

000202fc <bt_smp_request_ltk>:
{
   202fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20300:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   20302:	4604      	mov	r4, r0
   20304:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   20308:	f7f5 f8ec 	bl	154e4 <smp_chan_get>
	if (!smp) {
   2030c:	4605      	mov	r5, r0
   2030e:	2800      	cmp	r0, #0
   20310:	f000 809d 	beq.w	2044e <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   20314:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   20318:	f1b9 0f00 	cmp.w	r9, #0
   2031c:	d12d      	bne.n	2037a <bt_smp_request_ltk+0x7e>
   2031e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20322:	4313      	orrs	r3, r2
   20324:	d129      	bne.n	2037a <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   20326:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   2032a:	2103      	movs	r1, #3
   2032c:	4640      	mov	r0, r8
   2032e:	f7ff fc75 	bl	1fc1c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   20332:	b310      	cbz	r0, 2037a <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   20334:	2101      	movs	r1, #1
   20336:	4640      	mov	r0, r8
   20338:	f7ff fc70 	bl	1fc1c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2033c:	4606      	mov	r6, r0
   2033e:	b1e0      	cbz	r0, 2037a <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   20340:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   20344:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
		memcpy(ltk, smp->tk, enc_size);
   20348:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   2034a:	429c      	cmp	r4, r3
   2034c:	bf28      	it	cs
   2034e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   20350:	f205 1107 	addw	r1, r5, #263	; 0x107
   20354:	4622      	mov	r2, r4
   20356:	f7fd ffd7 	bl	1e308 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2035a:	2c0f      	cmp	r4, #15
   2035c:	d805      	bhi.n	2036a <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   2035e:	4649      	mov	r1, r9
   20360:	f1c4 0210 	rsb	r2, r4, #16
   20364:	1938      	adds	r0, r7, r4
   20366:	f7fd fffa 	bl	1e35e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2036a:	2101      	movs	r1, #1
   2036c:	4640      	mov	r0, r8
   2036e:	f7ff fd96 	bl	1fe9e <atomic_set_bit>
}
   20372:	4630      	mov	r0, r6
   20374:	b003      	add	sp, #12
   20376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2037a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2037e:	b983      	cbnz	r3, 203a2 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   20380:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   20384:	4632      	mov	r2, r6
   20386:	2020      	movs	r0, #32
   20388:	7a21      	ldrb	r1, [r4, #8]
   2038a:	f7f6 fecb 	bl	17124 <bt_keys_find>
   2038e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   20392:	b930      	cbnz	r0, 203a2 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   20394:	4632      	mov	r2, r6
   20396:	2001      	movs	r0, #1
   20398:	7a21      	ldrb	r1, [r4, #8]
   2039a:	f7f6 fec3 	bl	17124 <bt_keys_find>
   2039e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   203a2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   203a6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   203aa:	b9ce      	cbnz	r6, 203e0 <bt_smp_request_ltk+0xe4>
   203ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   203b0:	4313      	orrs	r3, r2
   203b2:	d115      	bne.n	203e0 <bt_smp_request_ltk+0xe4>
   203b4:	2800      	cmp	r0, #0
   203b6:	d03c      	beq.n	20432 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   203b8:	89c3      	ldrh	r3, [r0, #14]
   203ba:	069a      	lsls	r2, r3, #26
   203bc:	d511      	bpl.n	203e2 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   203be:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   203c0:	f100 011a 	add.w	r1, r0, #26
   203c4:	4622      	mov	r2, r4
   203c6:	4638      	mov	r0, r7
   203c8:	f7fd ff9e 	bl	1e308 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   203cc:	2c0f      	cmp	r4, #15
   203ce:	d805      	bhi.n	203dc <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   203d0:	4631      	mov	r1, r6
   203d2:	f1c4 0210 	rsb	r2, r4, #16
   203d6:	1938      	adds	r0, r7, r4
   203d8:	f7fd ffc1 	bl	1e35e <memset>
		return true;
   203dc:	2601      	movs	r6, #1
   203de:	e7c8      	b.n	20372 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   203e0:	b338      	cbz	r0, 20432 <bt_smp_request_ltk+0x136>
   203e2:	89c3      	ldrh	r3, [r0, #14]
   203e4:	07db      	lsls	r3, r3, #31
   203e6:	d524      	bpl.n	20432 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   203e8:	2208      	movs	r2, #8
   203ea:	4669      	mov	r1, sp
   203ec:	3040      	adds	r0, #64	; 0x40
   203ee:	f7fd ff7a 	bl	1e2e6 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   203f2:	b9f0      	cbnz	r0, 20432 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   203f4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   203f8:	2202      	movs	r2, #2
   203fa:	a90a      	add	r1, sp, #40	; 0x28
   203fc:	3048      	adds	r0, #72	; 0x48
   203fe:	f7fd ff72 	bl	1e2e6 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   20402:	4606      	mov	r6, r0
   20404:	b9a8      	cbnz	r0, 20432 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   20406:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2040a:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   2040c:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2040e:	314a      	adds	r1, #74	; 0x4a
   20410:	4622      	mov	r2, r4
   20412:	f7fd ff79 	bl	1e308 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20416:	2c0f      	cmp	r4, #15
   20418:	d805      	bhi.n	20426 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   2041a:	4631      	mov	r1, r6
   2041c:	f1c4 0210 	rsb	r2, r4, #16
   20420:	1938      	adds	r0, r7, r4
   20422:	f7fd ff9c 	bl	1e35e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20426:	2101      	movs	r1, #1
   20428:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   2042c:	f7ff fd37 	bl	1fe9e <atomic_set_bit>
		return true;
   20430:	e7d4      	b.n	203dc <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   20432:	210f      	movs	r1, #15
   20434:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   20438:	f7ff fbf0 	bl	1fc1c <atomic_test_bit>
   2043c:	b120      	cbz	r0, 20448 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2043e:	2202      	movs	r2, #2
   20440:	2106      	movs	r1, #6
   20442:	4620      	mov	r0, r4
   20444:	f7f0 fef6 	bl	11234 <bt_conn_security_changed>
	smp_reset(smp);
   20448:	4628      	mov	r0, r5
   2044a:	f7ff fdc9 	bl	1ffe0 <smp_reset>
	return false;
   2044e:	2600      	movs	r6, #0
   20450:	e78f      	b.n	20372 <bt_smp_request_ltk+0x76>

00020452 <bt_smp_sign>:
   20452:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20456:	4770      	bx	lr

00020458 <bt_smp_start_security>:
{
   20458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2045c:	78c4      	ldrb	r4, [r0, #3]
{
   2045e:	4605      	mov	r5, r0
	switch (conn->role) {
   20460:	b124      	cbz	r4, 2046c <bt_smp_start_security+0x14>
   20462:	2c01      	cmp	r4, #1
   20464:	d03f      	beq.n	204e6 <bt_smp_start_security+0x8e>
		return -EINVAL;
   20466:	f06f 0415 	mvn.w	r4, #21
   2046a:	e005      	b.n	20478 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   2046c:	f7f5 f83a 	bl	154e4 <smp_chan_get>
		if (!smp) {
   20470:	4606      	mov	r6, r0
   20472:	b928      	cbnz	r0, 20480 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   20474:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   20478:	4620      	mov	r0, r4
   2047a:	b003      	add	sp, #12
   2047c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!smp_keys_check(conn)) {
   20480:	4628      	mov	r0, r5
   20482:	f7ff fc5f 	bl	1fd44 <smp_keys_check>
   20486:	b928      	cbnz	r0, 20494 <bt_smp_start_security+0x3c>
			return smp_send_pairing_req(conn);
   20488:	4628      	mov	r0, r5
}
   2048a:	b003      	add	sp, #12
   2048c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   20490:	f7f5 bb84 	b.w	15b9c <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20494:	f106 07c4 	add.w	r7, r6, #196	; 0xc4
   20498:	2103      	movs	r1, #3
   2049a:	4638      	mov	r0, r7
   2049c:	f7ff fbbe 	bl	1fc1c <atomic_test_bit>
   204a0:	b110      	cbz	r0, 204a8 <bt_smp_start_security+0x50>
			return -EBUSY;
   204a2:	f06f 040f 	mvn.w	r4, #15
   204a6:	e7e7      	b.n	20478 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   204a8:	2101      	movs	r1, #1
   204aa:	4638      	mov	r0, r7
   204ac:	f7ff fbb6 	bl	1fc1c <atomic_test_bit>
   204b0:	2800      	cmp	r0, #0
   204b2:	d1f6      	bne.n	204a2 <bt_smp_start_security+0x4a>
						  conn->le.keys->ltk.rand,
   204b4:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   204b8:	4628      	mov	r0, r5
   204ba:	7b0b      	ldrb	r3, [r1, #12]
   204bc:	f101 0218 	add.w	r2, r1, #24
   204c0:	9300      	str	r3, [sp, #0]
   204c2:	f101 031a 	add.w	r3, r1, #26
   204c6:	3110      	adds	r1, #16
   204c8:	f7fe fa7d 	bl	1e9c6 <bt_conn_le_start_encryption>
		if (err) {
   204cc:	4604      	mov	r4, r0
   204ce:	2800      	cmp	r0, #0
   204d0:	d1d2      	bne.n	20478 <bt_smp_start_security+0x20>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   204d2:	210b      	movs	r1, #11
   204d4:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   204d8:	f7ff fce1 	bl	1fe9e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   204dc:	2101      	movs	r1, #1
   204de:	4638      	mov	r0, r7
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   204e0:	f7ff fcdd 	bl	1fe9e <atomic_set_bit>
	return 0;
   204e4:	e7c8      	b.n	20478 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   204e6:	f7f4 fffd 	bl	154e4 <smp_chan_get>
	if (!smp) {
   204ea:	4606      	mov	r6, r0
   204ec:	2800      	cmp	r0, #0
   204ee:	d0c1      	beq.n	20474 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   204f0:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   204f4:	2104      	movs	r1, #4
   204f6:	4640      	mov	r0, r8
   204f8:	f7ff fb90 	bl	1fc1c <atomic_test_bit>
   204fc:	2800      	cmp	r0, #0
   204fe:	d14b      	bne.n	20598 <bt_smp_start_security+0x140>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20500:	2103      	movs	r1, #3
   20502:	4640      	mov	r0, r8
   20504:	f7ff fb8a 	bl	1fc1c <atomic_test_bit>
   20508:	2800      	cmp	r0, #0
   2050a:	d1ca      	bne.n	204a2 <bt_smp_start_security+0x4a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2050c:	4621      	mov	r1, r4
   2050e:	4640      	mov	r0, r8
   20510:	f7ff fb84 	bl	1fc1c <atomic_test_bit>
   20514:	2800      	cmp	r0, #0
   20516:	d1c4      	bne.n	204a2 <bt_smp_start_security+0x4a>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   20518:	7aa8      	ldrb	r0, [r5, #10]
   2051a:	f7f5 f947 	bl	157ac <sec_level_reachable.isra.0>
   2051e:	b168      	cbz	r0, 2053c <bt_smp_start_security+0xe4>
	if (!conn->le.keys) {
   20520:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   20524:	b983      	cbnz	r3, 20548 <bt_smp_start_security+0xf0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   20526:	7a28      	ldrb	r0, [r5, #8]
   20528:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2052c:	f7f6 fdba 	bl	170a4 <bt_keys_get_addr>
   20530:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   20534:	b940      	cbnz	r0, 20548 <bt_smp_start_security+0xf0>
			return -ENOMEM;
   20536:	f06f 040b 	mvn.w	r4, #11
   2053a:	e79d      	b.n	20478 <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2053c:	4628      	mov	r0, r5
   2053e:	f7ff fc01 	bl	1fd44 <smp_keys_check>
   20542:	2800      	cmp	r0, #0
   20544:	d1ec      	bne.n	20520 <bt_smp_start_security+0xc8>
   20546:	e78e      	b.n	20466 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   20548:	4630      	mov	r0, r6
   2054a:	f7f5 f98b 	bl	15864 <smp_init>
   2054e:	4604      	mov	r4, r0
   20550:	b110      	cbz	r0, 20558 <bt_smp_start_security+0x100>
		return -ENOBUFS;
   20552:	f06f 0436 	mvn.w	r4, #54	; 0x36
   20556:	e78f      	b.n	20478 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   20558:	210b      	movs	r1, #11
   2055a:	4630      	mov	r0, r6
   2055c:	f7ff fcc1 	bl	1fee2 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   20560:	4607      	mov	r7, r0
   20562:	2800      	cmp	r0, #0
   20564:	d0f5      	beq.n	20552 <bt_smp_start_security+0xfa>
   20566:	2101      	movs	r1, #1
   20568:	3008      	adds	r0, #8
   2056a:	f7f7 f995 	bl	17898 <net_buf_simple_add>
   2056e:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   20570:	2009      	movs	r0, #9
   20572:	f7f5 f83b 	bl	155ec <get_auth.constprop.0>
   20576:	4623      	mov	r3, r4
   20578:	f889 0000 	strb.w	r0, [r9]
   2057c:	463a      	mov	r2, r7
   2057e:	2106      	movs	r1, #6
   20580:	4628      	mov	r0, r5
   20582:	9400      	str	r4, [sp, #0]
   20584:	f7fe fb7b 	bl	1ec7e <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   20588:	210f      	movs	r1, #15
   2058a:	4640      	mov	r0, r8
   2058c:	f7ff fc87 	bl	1fe9e <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   20590:	2101      	movs	r1, #1
   20592:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   20596:	e7a3      	b.n	204e0 <bt_smp_start_security+0x88>
		return -EIO;
   20598:	f06f 0404 	mvn.w	r4, #4
   2059c:	e76c      	b.n	20478 <bt_smp_start_security+0x20>

0002059e <id_add>:
	bt_id_add(keys);
   2059e:	f7ef b8af 	b.w	f700 <bt_id_add>

000205a2 <bt_keys_get_type>:
{
   205a2:	b570      	push	{r4, r5, r6, lr}
   205a4:	4604      	mov	r4, r0
   205a6:	460d      	mov	r5, r1
   205a8:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   205aa:	f7f6 fdbb 	bl	17124 <bt_keys_find>
	if (keys) {
   205ae:	b938      	cbnz	r0, 205c0 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   205b0:	4631      	mov	r1, r6
   205b2:	4628      	mov	r0, r5
   205b4:	f7f6 fd76 	bl	170a4 <bt_keys_get_addr>
	if (!keys) {
   205b8:	b110      	cbz	r0, 205c0 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   205ba:	89c3      	ldrh	r3, [r0, #14]
   205bc:	431c      	orrs	r4, r3
   205be:	81c4      	strh	r4, [r0, #14]
}
   205c0:	bd70      	pop	{r4, r5, r6, pc}

000205c2 <bt_keys_add_type>:
	keys->keys |= type;
   205c2:	89c3      	ldrh	r3, [r0, #14]
   205c4:	4319      	orrs	r1, r3
   205c6:	81c1      	strh	r1, [r0, #14]
}
   205c8:	4770      	bx	lr

000205ca <fixed_data_unref>:
}
   205ca:	4770      	bx	lr

000205cc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   205cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   205ce:	6849      	ldr	r1, [r1, #4]
   205d0:	6809      	ldr	r1, [r1, #0]
   205d2:	f7f6 bf1d 	b.w	17410 <net_buf_alloc_len>

000205d6 <net_buf_simple_init_with_data>:
	buf->size  = size;
   205d6:	b292      	uxth	r2, r2
	buf->__buf = data;
   205d8:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   205da:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   205dc:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   205de:	8082      	strh	r2, [r0, #4]
}
   205e0:	4770      	bx	lr

000205e2 <net_buf_simple_push_u8>:
{
   205e2:	b510      	push	{r4, lr}
   205e4:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   205e6:	2101      	movs	r1, #1
   205e8:	f7f7 f8fe 	bl	177e8 <net_buf_simple_push>
	*data = val;
   205ec:	7004      	strb	r4, [r0, #0]
}
   205ee:	bd10      	pop	{r4, pc}

000205f0 <net_buf_simple_pull_u8>:
{
   205f0:	b510      	push	{r4, lr}
	val = buf->data[0];
   205f2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   205f4:	2101      	movs	r1, #1
	val = buf->data[0];
   205f6:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   205f8:	f7f7 f914 	bl	17824 <net_buf_simple_pull>
}
   205fc:	4620      	mov	r0, r4
   205fe:	bd10      	pop	{r4, pc}

00020600 <net_buf_simple_pull_le16>:
{
   20600:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   20602:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20604:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   20606:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20608:	f7f7 f90c 	bl	17824 <net_buf_simple_pull>
}
   2060c:	4620      	mov	r0, r4
   2060e:	bd10      	pop	{r4, pc}

00020610 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   20610:	6802      	ldr	r2, [r0, #0]
   20612:	6880      	ldr	r0, [r0, #8]
}
   20614:	1a10      	subs	r0, r2, r0
   20616:	4770      	bx	lr

00020618 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   20618:	8883      	ldrh	r3, [r0, #4]
   2061a:	88c2      	ldrh	r2, [r0, #6]
   2061c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2061e:	6803      	ldr	r3, [r0, #0]
   20620:	6880      	ldr	r0, [r0, #8]
   20622:	1a18      	subs	r0, r3, r0
}
   20624:	1a10      	subs	r0, r2, r0
   20626:	4770      	bx	lr

00020628 <net_buf_simple_add_mem>:
{
   20628:	b538      	push	{r3, r4, r5, lr}
   2062a:	460d      	mov	r5, r1
   2062c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2062e:	4611      	mov	r1, r2
   20630:	f7f7 f932 	bl	17898 <net_buf_simple_add>
   20634:	4622      	mov	r2, r4
   20636:	4629      	mov	r1, r5
}
   20638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2063c:	f7fd be64 	b.w	1e308 <memcpy>

00020640 <net_buf_simple_add_u8>:
{
   20640:	b510      	push	{r4, lr}
   20642:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   20644:	2101      	movs	r1, #1
   20646:	f7f7 f927 	bl	17898 <net_buf_simple_add>
	*u8 = val;
   2064a:	7004      	strb	r4, [r0, #0]
}
   2064c:	bd10      	pop	{r4, pc}

0002064e <net_buf_simple_add_le16>:
{
   2064e:	b510      	push	{r4, lr}
   20650:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   20652:	2102      	movs	r1, #2
   20654:	f7f7 f920 	bl	17898 <net_buf_simple_add>
	dst[0] = val;
   20658:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2065a:	0a24      	lsrs	r4, r4, #8
   2065c:	7044      	strb	r4, [r0, #1]
}
   2065e:	bd10      	pop	{r4, pc}

00020660 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20660:	6843      	ldr	r3, [r0, #4]
}
   20662:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20664:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20666:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   20668:	600b      	str	r3, [r1, #0]
}
   2066a:	4770      	bx	lr

0002066c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2066c:	6843      	ldr	r3, [r0, #4]
   2066e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   20670:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   20672:	4042      	eors	r2, r0
   20674:	400a      	ands	r2, r1
   20676:	4042      	eors	r2, r0
    p_reg->OUT = value;
   20678:	605a      	str	r2, [r3, #4]
}
   2067a:	2000      	movs	r0, #0
   2067c:	4770      	bx	lr

0002067e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2067e:	6843      	ldr	r3, [r0, #4]
}
   20680:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20682:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   20684:	6099      	str	r1, [r3, #8]
}
   20686:	4770      	bx	lr

00020688 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20688:	6843      	ldr	r3, [r0, #4]
}
   2068a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2068c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2068e:	60d9      	str	r1, [r3, #12]
}
   20690:	4770      	bx	lr

00020692 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20692:	6843      	ldr	r3, [r0, #4]
}
   20694:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20696:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20698:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2069a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2069c:	6053      	str	r3, [r2, #4]
}
   2069e:	4770      	bx	lr

000206a0 <nrf_gpio_cfg_sense_set>:
{
   206a0:	b513      	push	{r0, r1, r4, lr}
   206a2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   206a4:	a801      	add	r0, sp, #4
{
   206a6:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   206a8:	f7f7 f95a 	bl	17960 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   206ac:	9b01      	ldr	r3, [sp, #4]
   206ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   206b2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   206b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   206ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   206be:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   206c2:	b002      	add	sp, #8
   206c4:	bd10      	pop	{r4, pc}

000206c6 <cfg_level_pins>:
{
   206c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   206ca:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   206cc:	2500      	movs	r5, #0
	return port->data;
   206ce:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   206d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   206d4:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   206d6:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   206da:	4313      	orrs	r3, r2
   206dc:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   206e0:	b90c      	cbnz	r4, 206e6 <cfg_level_pins+0x20>
}
   206e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   206e6:	4226      	tst	r6, r4
   206e8:	d010      	beq.n	2070c <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   206ea:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   206ec:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   206f0:	40e9      	lsrs	r1, r5
   206f2:	f001 0101 	and.w	r1, r1, #1
   206f6:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   206fa:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   206fe:	b2c9      	uxtb	r1, r1
   20700:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   20704:	f7ff ffcc 	bl	206a0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   20708:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2070c:	3501      	adds	r5, #1
		bit <<= 1;
   2070e:	0076      	lsls	r6, r6, #1
   20710:	e7e6      	b.n	206e0 <cfg_level_pins+0x1a>

00020712 <check_level_trigger_pins>:
{
   20712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   20716:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   20718:	2700      	movs	r7, #0
	return port->data;
   2071a:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   2071c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   20720:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   20722:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   20726:	430a      	orrs	r2, r1
   20728:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2072c:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   20730:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   20732:	6915      	ldr	r5, [r2, #16]
   20734:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   20736:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   2073a:	b914      	cbnz	r4, 20742 <check_level_trigger_pins+0x30>
}
   2073c:	4628      	mov	r0, r5
   2073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   20742:	4234      	tst	r4, r6
   20744:	d00a      	beq.n	2075c <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20746:	f898 0008 	ldrb.w	r0, [r8, #8]
   2074a:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2074e:	2100      	movs	r1, #0
   20750:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   20754:	f7ff ffa4 	bl	206a0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   20758:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2075c:	3701      	adds	r7, #1
		bit <<= 1;
   2075e:	0076      	lsls	r6, r6, #1
   20760:	e7eb      	b.n	2073a <check_level_trigger_pins+0x28>

00020762 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   20762:	6883      	ldr	r3, [r0, #8]
   20764:	689b      	ldr	r3, [r3, #8]
   20766:	4718      	bx	r3

00020768 <vipm_nrf_max_id_val_get>:
}
   20768:	2000      	movs	r0, #0
   2076a:	4770      	bx	lr

0002076c <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   2076c:	b508      	push	{r3, lr}
   2076e:	b139      	cbz	r1, 20780 <vipm_nrf_1_set_enabled+0x14>
   20770:	202a      	movs	r0, #42	; 0x2a
   20772:	f7ed f859 	bl	d828 <arch_irq_enable>
   20776:	2001      	movs	r0, #1
   20778:	f7f8 fcf0 	bl	1915c <nrfx_ipc_receive_event_enable>
   2077c:	2000      	movs	r0, #0
   2077e:	bd08      	pop	{r3, pc}
   20780:	2001      	movs	r0, #1
   20782:	f7f8 fd09 	bl	19198 <nrfx_ipc_receive_event_disable>
   20786:	e7f9      	b.n	2077c <vipm_nrf_1_set_enabled+0x10>

00020788 <flash_nrf_write_protection>:
}
   20788:	2000      	movs	r0, #0
   2078a:	4770      	bx	lr

0002078c <is_regular_addr_valid>:
{
   2078c:	b538      	push	{r3, r4, r5, lr}
   2078e:	4604      	mov	r4, r0
   20790:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   20792:	f000 f9c7 	bl	20b24 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   20796:	4284      	cmp	r4, r0
   20798:	d209      	bcs.n	207ae <is_regular_addr_valid+0x22>
   2079a:	2c00      	cmp	r4, #0
   2079c:	db07      	blt.n	207ae <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2079e:	42a8      	cmp	r0, r5
   207a0:	d305      	bcc.n	207ae <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   207a2:	442c      	add	r4, r5
	    len > flash_size ||
   207a4:	4284      	cmp	r4, r0
   207a6:	bf8c      	ite	hi
   207a8:	2000      	movhi	r0, #0
   207aa:	2001      	movls	r0, #1
}
   207ac:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   207ae:	2000      	movs	r0, #0
   207b0:	e7fc      	b.n	207ac <is_regular_addr_valid+0x20>

000207b2 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   207b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   207b6:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   207b8:	6883      	ldr	r3, [r0, #8]
{
   207ba:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   207bc:	695b      	ldr	r3, [r3, #20]
   207be:	4669      	mov	r1, sp
{
   207c0:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   207c2:	aa01      	add	r2, sp, #4
   207c4:	4798      	blx	r3

	while (layout_size--) {
   207c6:	e9dd 1000 	ldrd	r1, r0, [sp]
   207ca:	2300      	movs	r3, #0
	off_t end = 0;
   207cc:	461d      	mov	r5, r3
	off_t group_offs = 0;
   207ce:	469e      	mov	lr, r3
	size_t page_count = 0;
   207d0:	469c      	mov	ip, r3
   207d2:	3801      	subs	r0, #1
	while (layout_size--) {
   207d4:	1c42      	adds	r2, r0, #1
   207d6:	d102      	bne.n	207de <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   207d8:	f06f 0015 	mvn.w	r0, #21
   207dc:	e019      	b.n	20812 <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   207de:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   207e0:	b1d7      	cbz	r7, 20818 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   207e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   207e6:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   207ea:	42a5      	cmp	r5, r4
   207ec:	f100 30ff 	add.w	r0, r0, #4294967295
   207f0:	dd17      	ble.n	20822 <flash_get_page_info+0x70>
   207f2:	b103      	cbz	r3, 207f6 <flash_get_page_info+0x44>
   207f4:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   207f6:	9b00      	ldr	r3, [sp, #0]
   207f8:	685b      	ldr	r3, [r3, #4]
   207fa:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   207fc:	b177      	cbz	r7, 2081c <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   207fe:	eba4 040e 	sub.w	r4, r4, lr
   20802:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   20806:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   20808:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   2080c:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2080e:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   20810:	60b4      	str	r4, [r6, #8]
}
   20812:	b002      	add	sp, #8
   20814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   20818:	4415      	add	r5, r2
   2081a:	e7e6      	b.n	207ea <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   2081c:	eba4 040c 	sub.w	r4, r4, ip
   20820:	e7f1      	b.n	20806 <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   20822:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   20824:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   20826:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   2082a:	3108      	adds	r1, #8
   2082c:	2301      	movs	r3, #1
   2082e:	e7d1      	b.n	207d4 <flash_get_page_info+0x22>

00020830 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   20830:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   20832:	2201      	movs	r2, #1
   20834:	f7ff bfbd 	b.w	207b2 <flash_get_page_info>

00020838 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   20838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2083c:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2083e:	6883      	ldr	r3, [r0, #8]
{
   20840:	b086      	sub	sp, #24
   20842:	4688      	mov	r8, r1
   20844:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   20846:	695b      	ldr	r3, [r3, #20]
   20848:	aa02      	add	r2, sp, #8
   2084a:	a901      	add	r1, sp, #4
   2084c:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2084e:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   20850:	4625      	mov	r5, r4
   20852:	9b02      	ldr	r3, [sp, #8]
   20854:	42ab      	cmp	r3, r5
   20856:	d802      	bhi.n	2085e <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   20858:	b006      	add	sp, #24
   2085a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2085e:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   20860:	9f01      	ldr	r7, [sp, #4]
   20862:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   20866:	687b      	ldr	r3, [r7, #4]
   20868:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2086a:	683a      	ldr	r2, [r7, #0]
   2086c:	eb0a 0306 	add.w	r3, sl, r6
   20870:	42b2      	cmp	r2, r6
   20872:	d802      	bhi.n	2087a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   20874:	469a      	mov	sl, r3
   20876:	3501      	adds	r5, #1
   20878:	e7eb      	b.n	20852 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2087a:	4649      	mov	r1, r9
   2087c:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2087e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   20880:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   20882:	47c0      	blx	r8
   20884:	2800      	cmp	r0, #0
   20886:	d0e7      	beq.n	20858 <flash_page_foreach+0x20>
			off += page_info.size;
   20888:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2088a:	3601      	adds	r6, #1
			off += page_info.size;
   2088c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2088e:	e7ec      	b.n	2086a <flash_page_foreach+0x32>

00020890 <uarte_nrfx_config_get>:
{
   20890:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   20892:	68c2      	ldr	r2, [r0, #12]
   20894:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   20898:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2089c:	2000      	movs	r0, #0
   2089e:	4770      	bx	lr

000208a0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   208a0:	6843      	ldr	r3, [r0, #4]
   208a2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   208a4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   208a8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   208ac:	4770      	bx	lr

000208ae <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   208ae:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   208b0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   208b2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   208b4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   208b8:	b148      	cbz	r0, 208ce <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   208ba:	2000      	movs	r0, #0
	*c = data->rx_data;
   208bc:	7d52      	ldrb	r2, [r2, #21]
   208be:	700a      	strb	r2, [r1, #0]
   208c0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   208c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   208c8:	2201      	movs	r2, #1
   208ca:	601a      	str	r2, [r3, #0]
	return 0;
   208cc:	4770      	bx	lr
		return -1;
   208ce:	f04f 30ff 	mov.w	r0, #4294967295
}
   208d2:	4770      	bx	lr

000208d4 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   208d4:	6843      	ldr	r3, [r0, #4]
{
   208d6:	4602      	mov	r2, r0
	return config->uarte_regs;
   208d8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   208da:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   208de:	b148      	cbz	r0, 208f4 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   208e0:	2000      	movs	r0, #0
	return dev->data;
   208e2:	68d2      	ldr	r2, [r2, #12]
   208e4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   208e8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   208ec:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   208ee:	7d52      	ldrb	r2, [r2, #21]
   208f0:	700a      	strb	r2, [r1, #0]
   208f2:	6018      	str	r0, [r3, #0]
}
   208f4:	4770      	bx	lr

000208f6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   208f6:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   208f8:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   208fa:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   208fc:	f04f 0020 	mov.w	r0, #32
   20900:	f3ef 8311 	mrs	r3, BASEPRI
   20904:	f380 8811 	msr	BASEPRI, r0
   20908:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2090c:	2000      	movs	r0, #0
   2090e:	68c9      	ldr	r1, [r1, #12]
   20910:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   20912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   20916:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2091a:	f383 8811 	msr	BASEPRI, r3
   2091e:	f3bf 8f6f 	isb	sy
}
   20922:	4770      	bx	lr

00020924 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   20924:	2201      	movs	r2, #1
   20926:	68c3      	ldr	r3, [r0, #12]
   20928:	68db      	ldr	r3, [r3, #12]
   2092a:	739a      	strb	r2, [r3, #14]
}
   2092c:	4770      	bx	lr

0002092e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2092e:	68c3      	ldr	r3, [r0, #12]
   20930:	68db      	ldr	r3, [r3, #12]
   20932:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   20934:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   20938:	b962      	cbnz	r2, 20954 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2093a:	6842      	ldr	r2, [r0, #4]
   2093c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2093e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   20942:	b140      	cbz	r0, 20956 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   20944:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   20948:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2094c:	d003      	beq.n	20956 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2094e:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   20950:	6119      	str	r1, [r3, #16]
   20952:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   20954:	2000      	movs	r0, #0
}
   20956:	4770      	bx	lr

00020958 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   20958:	6843      	ldr	r3, [r0, #4]
   2095a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2095c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   20960:	3800      	subs	r0, #0
   20962:	bf18      	it	ne
   20964:	2001      	movne	r0, #1
   20966:	4770      	bx	lr

00020968 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   20968:	2210      	movs	r2, #16
	return config->uarte_regs;
   2096a:	6843      	ldr	r3, [r0, #4]
   2096c:	681b      	ldr	r3, [r3, #0]
   2096e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20972:	4770      	bx	lr

00020974 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   20974:	2210      	movs	r2, #16
	return config->uarte_regs;
   20976:	6843      	ldr	r3, [r0, #4]
   20978:	681b      	ldr	r3, [r3, #0]
   2097a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2097e:	4770      	bx	lr

00020980 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   20980:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   20984:	6843      	ldr	r3, [r0, #4]
   20986:	681b      	ldr	r3, [r3, #0]
   20988:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2098c:	4770      	bx	lr

0002098e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2098e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   20992:	6843      	ldr	r3, [r0, #4]
   20994:	681b      	ldr	r3, [r3, #0]
   20996:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2099a:	4770      	bx	lr

0002099c <uarte_nrfx_irq_update>:
}
   2099c:	2001      	movs	r0, #1
   2099e:	4770      	bx	lr

000209a0 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   209a0:	68c3      	ldr	r3, [r0, #12]
   209a2:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   209a4:	e9c3 1200 	strd	r1, r2, [r3]
}
   209a8:	4770      	bx	lr

000209aa <uarte_nrfx_irq_is_pending>:
{
   209aa:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   209ac:	6843      	ldr	r3, [r0, #4]
{
   209ae:	4604      	mov	r4, r0
	return config->uarte_regs;
   209b0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   209b2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   209b6:	025b      	lsls	r3, r3, #9
   209b8:	d405      	bmi.n	209c6 <uarte_nrfx_irq_is_pending+0x1c>
   209ba:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   209be:	f010 0010 	ands.w	r0, r0, #16
   209c2:	d106      	bne.n	209d2 <uarte_nrfx_irq_is_pending+0x28>
}
   209c4:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   209c6:	f7ff ffb2 	bl	2092e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   209ca:	2800      	cmp	r0, #0
   209cc:	d0f5      	beq.n	209ba <uarte_nrfx_irq_is_pending+0x10>
		||
   209ce:	2001      	movs	r0, #1
   209d0:	e7f8      	b.n	209c4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   209d2:	4620      	mov	r0, r4
   209d4:	f7ff ffc0 	bl	20958 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   209d8:	3800      	subs	r0, #0
   209da:	bf18      	it	ne
   209dc:	2001      	movne	r0, #1
   209de:	e7f1      	b.n	209c4 <uarte_nrfx_irq_is_pending+0x1a>

000209e0 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   209e0:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   209e2:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   209e4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   209e8:	b938      	cbnz	r0, 209fa <is_tx_ready.isra.0+0x1a>
   209ea:	799b      	ldrb	r3, [r3, #6]
   209ec:	b933      	cbnz	r3, 209fc <is_tx_ready.isra.0+0x1c>
   209ee:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   209f2:	3800      	subs	r0, #0
   209f4:	bf18      	it	ne
   209f6:	2001      	movne	r0, #1
   209f8:	4770      	bx	lr
   209fa:	2001      	movs	r0, #1
}
   209fc:	4770      	bx	lr

000209fe <uarte_nrfx_fifo_fill>:
{
   209fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   20a00:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   20a02:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   20a04:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   20a06:	68f3      	ldr	r3, [r6, #12]
   20a08:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20a0a:	3310      	adds	r3, #16
   20a0c:	4294      	cmp	r4, r2
   20a0e:	bfa8      	it	ge
   20a10:	4614      	movge	r4, r2
   20a12:	2201      	movs	r2, #1
   20a14:	e8d3 7fef 	ldaex	r7, [r3]
   20a18:	2f00      	cmp	r7, #0
   20a1a:	d104      	bne.n	20a26 <uarte_nrfx_fifo_fill+0x28>
   20a1c:	e8c3 2fec 	stlex	ip, r2, [r3]
   20a20:	f1bc 0f00 	cmp.w	ip, #0
   20a24:	d1f6      	bne.n	20a14 <uarte_nrfx_fifo_fill+0x16>
   20a26:	bf0c      	ite	eq
   20a28:	4613      	moveq	r3, r2
   20a2a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   20a2c:	d01d      	beq.n	20a6a <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   20a2e:	461c      	mov	r4, r3
}
   20a30:	4620      	mov	r0, r4
   20a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   20a34:	68f2      	ldr	r2, [r6, #12]
   20a36:	5ccf      	ldrb	r7, [r1, r3]
   20a38:	6892      	ldr	r2, [r2, #8]
   20a3a:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   20a3c:	3301      	adds	r3, #1
   20a3e:	42a3      	cmp	r3, r4
   20a40:	dbf8      	blt.n	20a34 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   20a42:	f04f 0320 	mov.w	r3, #32
   20a46:	f3ef 8111 	mrs	r1, BASEPRI
   20a4a:	f383 8811 	msr	BASEPRI, r3
   20a4e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   20a52:	6840      	ldr	r0, [r0, #4]
   20a54:	f7ff ffc4 	bl	209e0 <is_tx_ready.isra.0>
   20a58:	68f3      	ldr	r3, [r6, #12]
   20a5a:	b940      	cbnz	r0, 20a6e <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   20a5c:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   20a5e:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   20a60:	f381 8811 	msr	BASEPRI, r1
   20a64:	f3bf 8f6f 	isb	sy
	return len;
   20a68:	e7e2      	b.n	20a30 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   20a6a:	2300      	movs	r3, #0
   20a6c:	e7e7      	b.n	20a3e <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20a6e:	689b      	ldr	r3, [r3, #8]
   20a70:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a74:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   20a76:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a7a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   20a7e:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   20a82:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   20a86:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20a8a:	2301      	movs	r3, #1
   20a8c:	60ab      	str	r3, [r5, #8]
}
   20a8e:	e7e7      	b.n	20a60 <uarte_nrfx_fifo_fill+0x62>

00020a90 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   20a90:	6843      	ldr	r3, [r0, #4]
{
   20a92:	b410      	push	{r4}
	return config->uarte_regs;
   20a94:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   20a96:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   20a9a:	05d2      	lsls	r2, r2, #23
   20a9c:	d518      	bpl.n	20ad0 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a9e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   20aa2:	b1aa      	cbz	r2, 20ad0 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   20aa4:	f04f 0120 	mov.w	r1, #32
   20aa8:	f3ef 8211 	mrs	r2, BASEPRI
   20aac:	f381 8811 	msr	BASEPRI, r1
   20ab0:	f3bf 8f6f 	isb	sy
   20ab4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   20ab8:	b131      	cbz	r1, 20ac8 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20aba:	2100      	movs	r1, #0
   20abc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   20ac0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ac4:	2101      	movs	r1, #1
   20ac6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   20ac8:	f382 8811 	msr	BASEPRI, r2
   20acc:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   20ad0:	68c2      	ldr	r2, [r0, #12]
   20ad2:	68d2      	ldr	r2, [r2, #12]
   20ad4:	b15a      	cbz	r2, 20aee <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ad6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   20ada:	b151      	cbz	r1, 20af2 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   20adc:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   20ade:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   20ae0:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   20ae2:	b134      	cbz	r4, 20af2 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   20ae4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   20ae8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   20aec:	7391      	strb	r1, [r2, #14]
}
   20aee:	bc10      	pop	{r4}
   20af0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20af2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   20af6:	b121      	cbz	r1, 20b02 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20af8:	2100      	movs	r1, #0
   20afa:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   20afe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   20b02:	6813      	ldr	r3, [r2, #0]
   20b04:	2b00      	cmp	r3, #0
   20b06:	d0f2      	beq.n	20aee <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   20b08:	6851      	ldr	r1, [r2, #4]
}
   20b0a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   20b0c:	4718      	bx	r3

00020b0e <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   20b0e:	2101      	movs	r1, #1
   20b10:	f7f8 b828 	b.w	18b64 <dk_set_led>

00020b14 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   20b14:	2100      	movs	r1, #0
   20b16:	f7f8 b825 	b.w	18b64 <dk_set_led>

00020b1a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   20b1a:	f7f8 b8a3 	b.w	18c64 <SystemCoreClockUpdate>

00020b1e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   20b1e:	4700      	bx	r0

00020b20 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20b20:	f000 bcb8 	b.w	21494 <z_impl_k_busy_wait>

00020b24 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   20b24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   20b28:	4770      	bx	lr

00020b2a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   20b2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   20b2e:	4770      	bx	lr

00020b30 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   20b30:	f44f 7080 	mov.w	r0, #256	; 0x100
   20b34:	4770      	bx	lr

00020b36 <metal_device_open>:
{
   20b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20b38:	460c      	mov	r4, r1
   20b3a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   20b3c:	4606      	mov	r6, r0
   20b3e:	b918      	cbnz	r0, 20b48 <metal_device_open+0x12>
		return -EINVAL;
   20b40:	f06f 0015 	mvn.w	r0, #21
}
   20b44:	b002      	add	sp, #8
   20b46:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   20b48:	f7fd fba0 	bl	1e28c <strlen>
   20b4c:	2800      	cmp	r0, #0
   20b4e:	d0f7      	beq.n	20b40 <metal_device_open+0xa>
   20b50:	2c00      	cmp	r4, #0
   20b52:	d0f5      	beq.n	20b40 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   20b54:	4620      	mov	r0, r4
   20b56:	f7fd fb99 	bl	1e28c <strlen>
   20b5a:	2800      	cmp	r0, #0
   20b5c:	d0f0      	beq.n	20b40 <metal_device_open+0xa>
   20b5e:	2d00      	cmp	r5, #0
   20b60:	d0ee      	beq.n	20b40 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   20b62:	4630      	mov	r0, r6
   20b64:	a901      	add	r1, sp, #4
   20b66:	f7f8 fbf7 	bl	19358 <metal_bus_find>
	if (error)
   20b6a:	2800      	cmp	r0, #0
   20b6c:	d1ea      	bne.n	20b44 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   20b6e:	9801      	ldr	r0, [sp, #4]
   20b70:	6883      	ldr	r3, [r0, #8]
   20b72:	b11b      	cbz	r3, 20b7c <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   20b74:	462a      	mov	r2, r5
   20b76:	4621      	mov	r1, r4
   20b78:	4798      	blx	r3
	if (error)
   20b7a:	e7e3      	b.n	20b44 <metal_device_open+0xe>
		return -ENODEV;
   20b7c:	f06f 0012 	mvn.w	r0, #18
   20b80:	e7e0      	b.n	20b44 <metal_device_open+0xe>

00020b82 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   20b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20b84:	6804      	ldr	r4, [r0, #0]
   20b86:	6885      	ldr	r5, [r0, #8]
		: NULL);
   20b88:	1c66      	adds	r6, r4, #1
   20b8a:	d00f      	beq.n	20bac <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20b8c:	42a9      	cmp	r1, r5
   20b8e:	d232      	bcs.n	20bf6 <metal_io_block_read+0x74>
		: NULL);
   20b90:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20b92:	185e      	adds	r6, r3, r1
   20b94:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20b96:	bf88      	it	hi
   20b98:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   20b9a:	6a05      	ldr	r5, [r0, #32]
   20b9c:	b155      	cbz	r5, 20bb4 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   20b9e:	9300      	str	r3, [sp, #0]
   20ba0:	2305      	movs	r3, #5
   20ba2:	47a8      	blx	r5
   20ba4:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   20ba6:	4618      	mov	r0, r3
   20ba8:	b002      	add	sp, #8
   20baa:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   20bac:	42a9      	cmp	r1, r5
   20bae:	d222      	bcs.n	20bf6 <metal_io_block_read+0x74>
   20bb0:	2400      	movs	r4, #0
   20bb2:	e7ee      	b.n	20b92 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   20bb4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   20bb8:	4621      	mov	r1, r4
   20bba:	4618      	mov	r0, r3
   20bbc:	2800      	cmp	r0, #0
   20bbe:	d0f2      	beq.n	20ba6 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   20bc0:	ea42 0401 	orr.w	r4, r2, r1
   20bc4:	07a4      	lsls	r4, r4, #30
   20bc6:	d10a      	bne.n	20bde <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20bc8:	2803      	cmp	r0, #3
   20bca:	dc0e      	bgt.n	20bea <metal_io_block_read+0x68>
   20bcc:	3901      	subs	r1, #1
   20bce:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   20bd0:	4282      	cmp	r2, r0
   20bd2:	d0e8      	beq.n	20ba6 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   20bd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   20bd8:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   20bdc:	e7f8      	b.n	20bd0 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   20bde:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   20be2:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   20be4:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   20be8:	e7e8      	b.n	20bbc <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   20bea:	f851 4b04 	ldr.w	r4, [r1], #4
   20bee:	3804      	subs	r0, #4
   20bf0:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20bf4:	e7e8      	b.n	20bc8 <metal_io_block_read+0x46>
		return -ERANGE;
   20bf6:	f06f 0325 	mvn.w	r3, #37	; 0x25
   20bfa:	e7d4      	b.n	20ba6 <metal_io_block_read+0x24>

00020bfc <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   20bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20bfe:	6804      	ldr	r4, [r0, #0]
   20c00:	6885      	ldr	r5, [r0, #8]
		: NULL);
   20c02:	1c66      	adds	r6, r4, #1
   20c04:	d00e      	beq.n	20c24 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20c06:	42a9      	cmp	r1, r5
   20c08:	d230      	bcs.n	20c6c <metal_io_block_write+0x70>
		: NULL);
   20c0a:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20c0c:	185e      	adds	r6, r3, r1
   20c0e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20c10:	bf88      	it	hi
   20c12:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   20c14:	6a45      	ldr	r5, [r0, #36]	; 0x24
   20c16:	b94d      	cbnz	r5, 20c2c <metal_io_block_write+0x30>
   20c18:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   20c1a:	b991      	cbnz	r1, 20c42 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   20c1c:	f3bf 8f5b 	dmb	ish
	retlen = len;
   20c20:	4618      	mov	r0, r3
   20c22:	e006      	b.n	20c32 <metal_io_block_write+0x36>
	if (offset >= io->size)
   20c24:	42a9      	cmp	r1, r5
   20c26:	d221      	bcs.n	20c6c <metal_io_block_write+0x70>
   20c28:	2400      	movs	r4, #0
   20c2a:	e7ef      	b.n	20c0c <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   20c2c:	9300      	str	r3, [sp, #0]
   20c2e:	2305      	movs	r3, #5
   20c30:	47a8      	blx	r5
	}
	return retlen;
}
   20c32:	b002      	add	sp, #8
   20c34:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   20c36:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   20c3a:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   20c3c:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   20c40:	e7eb      	b.n	20c1a <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   20c42:	ea44 0002 	orr.w	r0, r4, r2
   20c46:	0780      	lsls	r0, r0, #30
   20c48:	d1f5      	bne.n	20c36 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20c4a:	2903      	cmp	r1, #3
   20c4c:	dc08      	bgt.n	20c60 <metal_io_block_write+0x64>
   20c4e:	3a01      	subs	r2, #1
   20c50:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   20c52:	428c      	cmp	r4, r1
   20c54:	d0e2      	beq.n	20c1c <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   20c56:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   20c5a:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   20c5e:	e7f8      	b.n	20c52 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   20c60:	f852 0b04 	ldr.w	r0, [r2], #4
   20c64:	3904      	subs	r1, #4
   20c66:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20c6a:	e7ee      	b.n	20c4a <metal_io_block_write+0x4e>
		return -ERANGE;
   20c6c:	f06f 0025 	mvn.w	r0, #37	; 0x25
   20c70:	e7df      	b.n	20c32 <metal_io_block_write+0x36>

00020c72 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   20c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20c74:	6804      	ldr	r4, [r0, #0]
   20c76:	461d      	mov	r5, r3
		: NULL);
   20c78:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   20c7a:	6883      	ldr	r3, [r0, #8]
		: NULL);
   20c7c:	d00e      	beq.n	20c9c <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20c7e:	4299      	cmp	r1, r3
   20c80:	d22d      	bcs.n	20cde <metal_io_block_set+0x6c>
		: NULL);
   20c82:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20c84:	186e      	adds	r6, r5, r1
   20c86:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   20c88:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   20c8a:	bf88      	it	hi
   20c8c:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   20c8e:	b186      	cbz	r6, 20cb2 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   20c90:	2305      	movs	r3, #5
   20c92:	9500      	str	r5, [sp, #0]
   20c94:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   20c96:	4628      	mov	r0, r5
   20c98:	b002      	add	sp, #8
   20c9a:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   20c9c:	4299      	cmp	r1, r3
   20c9e:	d21e      	bcs.n	20cde <metal_io_block_set+0x6c>
   20ca0:	2400      	movs	r4, #0
   20ca2:	e7ef      	b.n	20c84 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   20ca4:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   20ca8:	3b01      	subs	r3, #1
   20caa:	b923      	cbnz	r3, 20cb6 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   20cac:	f3bf 8f5b 	dmb	ish
   20cb0:	e7f1      	b.n	20c96 <metal_io_block_set+0x24>
   20cb2:	462b      	mov	r3, r5
   20cb4:	e7f9      	b.n	20caa <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   20cb6:	07a1      	lsls	r1, r4, #30
   20cb8:	d1f4      	bne.n	20ca4 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   20cba:	0611      	lsls	r1, r2, #24
   20cbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   20cc0:	4311      	orrs	r1, r2
   20cc2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20cc6:	2b03      	cmp	r3, #3
   20cc8:	dc05      	bgt.n	20cd6 <metal_io_block_set+0x64>
   20cca:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   20ccc:	429c      	cmp	r4, r3
   20cce:	d0ed      	beq.n	20cac <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   20cd0:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   20cd4:	e7fa      	b.n	20ccc <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   20cd6:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20cda:	3b04      	subs	r3, #4
   20cdc:	e7f3      	b.n	20cc6 <metal_io_block_set+0x54>
		return -ERANGE;
   20cde:	f06f 0525 	mvn.w	r5, #37	; 0x25
   20ce2:	e7d8      	b.n	20c96 <metal_io_block_set+0x24>

00020ce4 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   20ce4:	2000      	movs	r0, #0
   20ce6:	4770      	bx	lr

00020ce8 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   20ce8:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   20cea:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   20cec:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   20cee:	b984      	cbnz	r4, 20d12 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   20cf0:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   20cf2:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   20cf4:	291f      	cmp	r1, #31
   20cf6:	bf98      	it	ls
   20cf8:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   20cfc:	b165      	cbz	r5, 20d18 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   20cfe:	6881      	ldr	r1, [r0, #8]
   20d00:	428b      	cmp	r3, r1
   20d02:	d209      	bcs.n	20d18 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   20d04:	6900      	ldr	r0, [r0, #16]
   20d06:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   20d08:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   20d0c:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   20d0e:	bc30      	pop	{r4, r5}
   20d10:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   20d12:	4623      	mov	r3, r4
}
   20d14:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   20d16:	4718      	bx	r3
			: METAL_BAD_PHYS);
   20d18:	f04f 30ff 	mov.w	r0, #4294967295
   20d1c:	e7f7      	b.n	20d0e <metal_io_phys+0x26>

00020d1e <virtqueue_create>:
{
   20d1e:	b570      	push	{r4, r5, r6, lr}
   20d20:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   20d22:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   20d24:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   20d26:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   20d2a:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   20d2c:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   20d2e:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20d30:	1c96      	adds	r6, r2, #2
   20d32:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   20d34:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   20d38:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   20d3c:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20d3e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   20d42:	1c6e      	adds	r6, r5, #1
   20d44:	4433      	add	r3, r6
   20d46:	426d      	negs	r5, r5
   20d48:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   20d4a:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20d4c:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   20d4e:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   20d52:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   20d54:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20d56:	b96b      	cbnz	r3, 20d74 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   20d58:	3a01      	subs	r2, #1
   20d5a:	4293      	cmp	r3, r2
   20d5c:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   20d60:	db0a      	blt.n	20d78 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20d62:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   20d64:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20d68:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   20d6c:	7393      	strb	r3, [r2, #14]
   20d6e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   20d72:	73d3      	strb	r3, [r2, #15]
}
   20d74:	2000      	movs	r0, #0
   20d76:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   20d78:	3301      	adds	r3, #1
   20d7a:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   20d7c:	e7ed      	b.n	20d5a <virtqueue_create+0x3c>

00020d7e <virtqueue_add_buffer>:
{
   20d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20d82:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   20d84:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   20d88:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20d8a:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20d8c:	46ba      	mov	sl, r7
{
   20d8e:	b085      	sub	sp, #20
	needed = readable + writable;
   20d90:	18d6      	adds	r6, r2, r3
{
   20d92:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   20d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20d96:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   20d9a:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   20d9c:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   20d9e:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   20da0:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20da2:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   20da6:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20da8:	42be      	cmp	r6, r7
   20daa:	dc19      	bgt.n	20de0 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   20dac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20dae:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   20db0:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20db2:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   20db4:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   20db6:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20db8:	1e51      	subs	r1, r2, #1
   20dba:	885a      	ldrh	r2, [r3, #2]
}
   20dbc:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   20dbe:	400a      	ands	r2, r1
   20dc0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   20dc4:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   20dc8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   20dcc:	69e2      	ldr	r2, [r4, #28]
   20dce:	8853      	ldrh	r3, [r2, #2]
   20dd0:	3301      	adds	r3, #1
   20dd2:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   20dd4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   20dd6:	3301      	adds	r3, #1
   20dd8:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   20dda:	b005      	add	sp, #20
   20ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   20de0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   20de2:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   20de4:	f858 1c04 	ldr.w	r1, [r8, #-4]
   20de8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   20dec:	9302      	str	r3, [sp, #8]
   20dee:	6803      	ldr	r3, [r0, #0]
   20df0:	9203      	str	r2, [sp, #12]
   20df2:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   20df4:	6883      	ldr	r3, [r0, #8]
   20df6:	f108 0808 	add.w	r8, r8, #8
   20dfa:	4299      	cmp	r1, r3
   20dfc:	bf28      	it	cs
   20dfe:	f04f 31ff 	movcs.w	r1, #4294967295
   20e02:	f7ff ff71 	bl	20ce8 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20e06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   20e0a:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   20e0c:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   20e10:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   20e14:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   20e16:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20e18:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   20e1c:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   20e1e:	bfb6      	itet	lt
   20e20:	2201      	movlt	r2, #1
		dp->flags = 0;
   20e22:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   20e26:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   20e28:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   20e2a:	bfd8      	it	le
   20e2c:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20e2e:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   20e32:	bfdc      	itt	le
   20e34:	f042 0202 	orrle.w	r2, r2, #2
   20e38:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20e3a:	89ed      	ldrh	r5, [r5, #14]
   20e3c:	e7b4      	b.n	20da8 <virtqueue_add_buffer+0x2a>

00020e3e <virtqueue_get_buffer>:
{
   20e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   20e40:	b350      	cbz	r0, 20e98 <virtqueue_get_buffer+0x5a>
   20e42:	6a05      	ldr	r5, [r0, #32]
   20e44:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   20e46:	886c      	ldrh	r4, [r5, #2]
   20e48:	429c      	cmp	r4, r3
   20e4a:	d030      	beq.n	20eae <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20e4c:	1c5c      	adds	r4, r3, #1
   20e4e:	85c4      	strh	r4, [r0, #46]	; 0x2e
   20e50:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   20e52:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20e56:	3c01      	subs	r4, #1
   20e58:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   20e5a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   20e5e:	686b      	ldr	r3, [r5, #4]
   20e60:	b29e      	uxth	r6, r3
	if (len)
   20e62:	b109      	cbz	r1, 20e68 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   20e64:	68ad      	ldr	r5, [r5, #8]
   20e66:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   20e68:	f8d0 c018 	ldr.w	ip, [r0, #24]
   20e6c:	b29b      	uxth	r3, r3
   20e6e:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   20e72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   20e76:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   20e78:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   20e7a:	442f      	add	r7, r5
	dxp->ndescs--;
   20e7c:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   20e7e:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   20e80:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   20e82:	898d      	ldrh	r5, [r1, #12]
   20e84:	076f      	lsls	r7, r5, #29
   20e86:	d50e      	bpl.n	20ea6 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   20e88:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   20e8a:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   20e8c:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   20e8e:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   20e90:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   20e92:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   20e94:	b102      	cbz	r2, 20e98 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   20e96:	8014      	strh	r4, [r2, #0]
}
   20e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   20e9a:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   20e9c:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   20e9e:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   20ea0:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   20ea4:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   20ea6:	898d      	ldrh	r5, [r1, #12]
   20ea8:	07ed      	lsls	r5, r5, #31
   20eaa:	d4f6      	bmi.n	20e9a <virtqueue_get_buffer+0x5c>
   20eac:	e7ec      	b.n	20e88 <virtqueue_get_buffer+0x4a>
		return NULL;
   20eae:	2000      	movs	r0, #0
   20eb0:	e7f2      	b.n	20e98 <virtqueue_get_buffer+0x5a>

00020eb2 <virtqueue_get_available_buffer>:
{
   20eb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   20eb6:	f3bf 8f5b 	dmb	ish
{
   20eba:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20ebc:	69c2      	ldr	r2, [r0, #28]
{
   20ebe:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20ec0:	8853      	ldrh	r3, [r2, #2]
   20ec2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   20ec4:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20ec6:	428b      	cmp	r3, r1
   20ec8:	d045      	beq.n	20f56 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   20eca:	1c4b      	adds	r3, r1, #1
   20ecc:	8603      	strh	r3, [r0, #48]	; 0x30
   20ece:	8943      	ldrh	r3, [r0, #10]
   20ed0:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   20ed4:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   20ed6:	400b      	ands	r3, r1
   20ed8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   20edc:	889a      	ldrh	r2, [r3, #4]
   20ede:	b293      	uxth	r3, r2
   20ee0:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   20ee2:	6982      	ldr	r2, [r0, #24]
   20ee4:	011b      	lsls	r3, r3, #4
   20ee6:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   20eea:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   20eee:	bb5b      	cbnz	r3, 20f48 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   20ef0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   20ef4:	1c62      	adds	r2, r4, #1
   20ef6:	bf09      	itett	eq
   20ef8:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   20efc:	ea09 0404 	andne.w	r4, r9, r4
   20f00:	681c      	ldreq	r4, [r3, #0]
   20f02:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   20f06:	4621      	mov	r1, r4
   20f08:	4640      	mov	r0, r8
   20f0a:	f7ff feed 	bl	20ce8 <metal_io_phys>
   20f0e:	4581      	cmp	r9, r0
   20f10:	d009      	beq.n	20f26 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   20f12:	f8d8 3010 	ldr.w	r3, [r8, #16]
   20f16:	3301      	adds	r3, #1
   20f18:	441c      	add	r4, r3
		} while (offset < io->size);
   20f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20f1e:	429c      	cmp	r4, r3
   20f20:	d3f1      	bcc.n	20f06 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   20f22:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   20f26:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   20f2a:	1c43      	adds	r3, r0, #1
   20f2c:	d011      	beq.n	20f52 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20f32:	42a3      	cmp	r3, r4
   20f34:	d90d      	bls.n	20f52 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   20f36:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   20f38:	8832      	ldrh	r2, [r6, #0]
   20f3a:	69ab      	ldr	r3, [r5, #24]
   20f3c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   20f40:	689b      	ldr	r3, [r3, #8]
   20f42:	603b      	str	r3, [r7, #0]
}
   20f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   20f48:	4649      	mov	r1, r9
   20f4a:	4640      	mov	r0, r8
   20f4c:	4798      	blx	r3
   20f4e:	4604      	mov	r4, r0
   20f50:	e7e9      	b.n	20f26 <virtqueue_get_available_buffer+0x74>
		: NULL);
   20f52:	2000      	movs	r0, #0
   20f54:	e7f0      	b.n	20f38 <virtqueue_get_available_buffer+0x86>
		return NULL;
   20f56:	2000      	movs	r0, #0
   20f58:	e7f4      	b.n	20f44 <virtqueue_get_available_buffer+0x92>

00020f5a <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20f5a:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20f5c:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20f5e:	6912      	ldr	r2, [r2, #16]
   20f60:	0092      	lsls	r2, r2, #2
   20f62:	d515      	bpl.n	20f90 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20f64:	b94b      	cbnz	r3, 20f7a <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   20f66:	69c2      	ldr	r2, [r0, #28]
   20f68:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   20f6a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   20f6c:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   20f6e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   20f72:	1a1b      	subs	r3, r3, r0
   20f74:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   20f76:	8093      	strh	r3, [r2, #4]
   20f78:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   20f7a:	2b01      	cmp	r3, #1
   20f7c:	d10e      	bne.n	20f9c <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   20f7e:	6a02      	ldr	r2, [r0, #32]
   20f80:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   20f82:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   20f84:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   20f86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   20f8a:	1a1b      	subs	r3, r3, r0
   20f8c:	3b01      	subs	r3, #1
   20f8e:	e7f2      	b.n	20f76 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   20f90:	b92b      	cbnz	r3, 20f9e <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   20f92:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   20f94:	8813      	ldrh	r3, [r2, #0]
   20f96:	f043 0301 	orr.w	r3, r3, #1
   20f9a:	8013      	strh	r3, [r2, #0]
}
   20f9c:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   20f9e:	2b01      	cmp	r3, #1
   20fa0:	d1fc      	bne.n	20f9c <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   20fa2:	6a02      	ldr	r2, [r0, #32]
   20fa4:	e7f6      	b.n	20f94 <virtqueue_disable_cb+0x3a>

00020fa6 <virtqueue_kick>:
{
   20fa6:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   20fa8:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20fac:	6803      	ldr	r3, [r0, #0]
{
   20fae:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20fb0:	691a      	ldr	r2, [r3, #16]
   20fb2:	699b      	ldr	r3, [r3, #24]
   20fb4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   20fb8:	d019      	beq.n	20fee <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20fba:	b97b      	cbnz	r3, 20fdc <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   20fbc:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   20fbe:	6a02      	ldr	r2, [r0, #32]
   20fc0:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   20fc2:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   20fc4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   20fc8:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   20fca:	1a9b      	subs	r3, r3, r2
   20fcc:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   20fce:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   20fd0:	b29b      	uxth	r3, r3
   20fd2:	429a      	cmp	r2, r3
   20fd4:	d813      	bhi.n	20ffe <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   20fd6:	2300      	movs	r3, #0
   20fd8:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   20fda:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   20fdc:	2b01      	cmp	r3, #1
   20fde:	d1fa      	bne.n	20fd6 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   20fe0:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   20fe2:	69c2      	ldr	r2, [r0, #28]
   20fe4:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   20fe6:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   20fe8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   20fec:	e7ec      	b.n	20fc8 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   20fee:	b963      	cbnz	r3, 2100a <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   20ff0:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   20ff2:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   20ff4:	43db      	mvns	r3, r3
   20ff6:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   20ffa:	2b00      	cmp	r3, #0
   20ffc:	d0eb      	beq.n	20fd6 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   20ffe:	6923      	ldr	r3, [r4, #16]
   21000:	2b00      	cmp	r3, #0
   21002:	d0e8      	beq.n	20fd6 <virtqueue_kick+0x30>
		vq->notify(vq);
   21004:	4620      	mov	r0, r4
   21006:	4798      	blx	r3
   21008:	e7e5      	b.n	20fd6 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   2100a:	2b01      	cmp	r3, #1
   2100c:	d1e3      	bne.n	20fd6 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2100e:	69c3      	ldr	r3, [r0, #28]
   21010:	e7ef      	b.n	20ff2 <virtqueue_kick+0x4c>

00021012 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   21012:	69c2      	ldr	r2, [r0, #28]
   21014:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   21016:	8853      	ldrh	r3, [r2, #2]
   21018:	428b      	cmp	r3, r1
   2101a:	d00a      	beq.n	21032 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2101c:	8943      	ldrh	r3, [r0, #10]
   2101e:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   21020:	400b      	ands	r3, r1
   21022:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   21026:	889a      	ldrh	r2, [r3, #4]
   21028:	6983      	ldr	r3, [r0, #24]
   2102a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2102e:	6898      	ldr	r0, [r3, #8]
	return len;
   21030:	4770      	bx	lr
		return 0;
   21032:	2000      	movs	r0, #0
}
   21034:	4770      	bx	lr

00021036 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   21036:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2103a:	68c3      	ldr	r3, [r0, #12]
   2103c:	b103      	cbz	r3, 21040 <virtqueue_notification+0xa>
		vq->callback(vq);
   2103e:	4718      	bx	r3
}
   21040:	4770      	bx	lr

00021042 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   21042:	f04f 32ff 	mov.w	r2, #4294967295
   21046:	f04f 33ff 	mov.w	r3, #4294967295
   2104a:	f7fa bb21 	b.w	1b690 <z_impl_k_sem_take>

0002104e <rpmsg_unregister_endpoint>:
{
   2104e:	b570      	push	{r4, r5, r6, lr}
   21050:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   21052:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   21054:	f105 0658 	add.w	r6, r5, #88	; 0x58
   21058:	4630      	mov	r0, r6
   2105a:	f7ff fff2 	bl	21042 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2105e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21060:	1c5a      	adds	r2, r3, #1
   21062:	d010      	beq.n	21086 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   21064:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   21068:	2b7f      	cmp	r3, #127	; 0x7f
   2106a:	d80c      	bhi.n	21086 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2106c:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2106e:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   21070:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   21072:	f003 031f 	and.w	r3, r3, #31
   21076:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2107a:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   2107e:	ea22 0203 	bic.w	r2, r2, r3
   21082:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   21086:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   2108a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2108e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   21090:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   21092:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   21096:	2300      	movs	r3, #0
   21098:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2109a:	4630      	mov	r0, r6
}
   2109c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   210a0:	f7fa baba 	b.w	1b618 <z_impl_k_sem_give>

000210a4 <rpmsg_send_ns_message>:
{
   210a4:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   210a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   210a8:	b08c      	sub	sp, #48	; 0x30
   210aa:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   210ac:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   210ae:	2220      	movs	r2, #32
   210b0:	4601      	mov	r1, r0
   210b2:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   210b4:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   210b6:	f7fd f8d7 	bl	1e268 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   210ba:	2328      	movs	r3, #40	; 0x28
   210bc:	2201      	movs	r2, #1
   210be:	4620      	mov	r0, r4
   210c0:	e9cd 3200 	strd	r3, r2, [sp]
   210c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   210c6:	2235      	movs	r2, #53	; 0x35
   210c8:	ab02      	add	r3, sp, #8
   210ca:	f7f8 fa71 	bl	195b0 <rpmsg_send_offchannel_raw>
}
   210ce:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   210d2:	b00c      	add	sp, #48	; 0x30
   210d4:	bd10      	pop	{r4, pc}

000210d6 <rpmsg_get_endpoint>:
{
   210d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   210da:	4680      	mov	r8, r0
   210dc:	4689      	mov	r9, r1
   210de:	4615      	mov	r5, r2
   210e0:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   210e2:	6807      	ldr	r7, [r0, #0]
   210e4:	45b8      	cmp	r8, r7
   210e6:	d101      	bne.n	210ec <rpmsg_get_endpoint+0x16>
	return NULL;
   210e8:	2400      	movs	r4, #0
   210ea:	e021      	b.n	21130 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   210ec:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   210ee:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   210f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   210f4:	d006      	beq.n	21104 <rpmsg_get_endpoint+0x2e>
   210f6:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   210f8:	d01a      	beq.n	21130 <rpmsg_get_endpoint+0x5a>
		if (name)
   210fa:	f1b9 0f00 	cmp.w	r9, #0
   210fe:	d106      	bne.n	2110e <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   21100:	683f      	ldr	r7, [r7, #0]
   21102:	e7ef      	b.n	210e4 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   21104:	3301      	adds	r3, #1
   21106:	d1f8      	bne.n	210fa <rpmsg_get_endpoint+0x24>
   21108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2110a:	42b3      	cmp	r3, r6
   2110c:	e7f4      	b.n	210f8 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   2110e:	2220      	movs	r2, #32
   21110:	4649      	mov	r1, r9
   21112:	4620      	mov	r0, r4
   21114:	f7fd f8d6 	bl	1e2c4 <strncmp>
		if (!name || !name_match)
   21118:	2800      	cmp	r0, #0
   2111a:	d1f1      	bne.n	21100 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2111c:	1c72      	adds	r2, r6, #1
   2111e:	d002      	beq.n	21126 <rpmsg_get_endpoint+0x50>
   21120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21122:	42b3      	cmp	r3, r6
   21124:	d004      	beq.n	21130 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   21126:	1c6b      	adds	r3, r5, #1
   21128:	d1ea      	bne.n	21100 <rpmsg_get_endpoint+0x2a>
   2112a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2112c:	3301      	adds	r3, #1
   2112e:	d1e7      	bne.n	21100 <rpmsg_get_endpoint+0x2a>
}
   21130:	4620      	mov	r0, r4
   21132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021136 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   21136:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   21138:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   2113c:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   21140:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   21142:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   21144:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   21146:	6013      	str	r3, [r2, #0]
}
   21148:	4770      	bx	lr

0002114a <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2114a:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   2114c:	4604      	mov	r4, r0
   2114e:	b190      	cbz	r0, 21176 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   21150:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   21152:	b183      	cbz	r3, 21176 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   21154:	7802      	ldrb	r2, [r0, #0]
   21156:	b14a      	cbz	r2, 2116c <rpmsg_destroy_ept+0x22>
   21158:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   2115c:	b133      	cbz	r3, 2116c <rpmsg_destroy_ept+0x22>
   2115e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21164:	d302      	bcc.n	2116c <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   21166:	2101      	movs	r1, #1
   21168:	f7ff ff9c 	bl	210a4 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2116c:	4620      	mov	r0, r4
}
   2116e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   21172:	f7ff bf6c 	b.w	2104e <rpmsg_unregister_endpoint>
}
   21176:	bd10      	pop	{r4, pc}

00021178 <rpmsg_virtio_tx_callback>:
}
   21178:	4770      	bx	lr

0002117a <k_sem_give>:
   2117a:	f7fa ba4d 	b.w	1b618 <z_impl_k_sem_give>

0002117e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2117e:	f04f 32ff 	mov.w	r2, #4294967295
   21182:	f04f 33ff 	mov.w	r3, #4294967295
   21186:	f7fa ba83 	b.w	1b690 <z_impl_k_sem_take>

0002118a <rpmsg_virtio_ns_callback>:
{
   2118a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   2118e:	2a28      	cmp	r2, #40	; 0x28
{
   21190:	4680      	mov	r8, r0
   21192:	460e      	mov	r6, r1
   21194:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   21196:	d12b      	bne.n	211f0 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   21198:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   2119a:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   2119c:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   211a0:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   211a2:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   211a4:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   211a6:	1a71      	subs	r1, r6, r1
   211a8:	42a1      	cmp	r1, r4
   211aa:	bf28      	it	cs
   211ac:	f04f 31ff 	movcs.w	r1, #4294967295
   211b0:	f7ff fce7 	bl	20b82 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   211b4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   211b8:	f8d6 9020 	ldr.w	r9, [r6, #32]
   211bc:	4638      	mov	r0, r7
   211be:	f7ff ffde 	bl	2117e <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   211c2:	464b      	mov	r3, r9
   211c4:	f04f 32ff 	mov.w	r2, #4294967295
   211c8:	4669      	mov	r1, sp
   211ca:	4628      	mov	r0, r5
   211cc:	f7ff ff83 	bl	210d6 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   211d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   211d2:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   211d4:	07db      	lsls	r3, r3, #31
   211d6:	d50f      	bpl.n	211f8 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   211d8:	b110      	cbz	r0, 211e0 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   211da:	f04f 33ff 	mov.w	r3, #4294967295
   211de:	6283      	str	r3, [r0, #40]	; 0x28
   211e0:	4638      	mov	r0, r7
   211e2:	f7ff ffca 	bl	2117a <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   211e6:	b11c      	cbz	r4, 211f0 <rpmsg_virtio_ns_callback+0x66>
   211e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   211ea:	b10b      	cbz	r3, 211f0 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   211ec:	4640      	mov	r0, r8
   211ee:	4798      	blx	r3
}
   211f0:	2000      	movs	r0, #0
   211f2:	b009      	add	sp, #36	; 0x24
   211f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   211f8:	b950      	cbnz	r0, 21210 <rpmsg_virtio_ns_callback+0x86>
   211fa:	4638      	mov	r0, r7
   211fc:	f7ff ffbd 	bl	2117a <k_sem_give>
			if (rdev->ns_bind_cb)
   21200:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   21202:	2b00      	cmp	r3, #0
   21204:	d0f4      	beq.n	211f0 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   21206:	464a      	mov	r2, r9
   21208:	4669      	mov	r1, sp
   2120a:	4628      	mov	r0, r5
   2120c:	4798      	blx	r3
   2120e:	e7ef      	b.n	211f0 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   21210:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   21214:	4638      	mov	r0, r7
   21216:	f7ff ffb0 	bl	2117a <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2121a:	e7e9      	b.n	211f0 <rpmsg_virtio_ns_callback+0x66>

0002121c <rpmsg_virtio_get_rx_buffer>:
{
   2121c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2121e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   21220:	4613      	mov	r3, r2
   21222:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   21224:	b925      	cbnz	r5, 21230 <rpmsg_virtio_get_rx_buffer+0x14>
}
   21226:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   21228:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   2122c:	f7ff be07 	b.w	20e3e <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   21230:	2d01      	cmp	r5, #1
   21232:	d106      	bne.n	21242 <rpmsg_virtio_get_rx_buffer+0x26>
}
   21234:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   21236:	460a      	mov	r2, r1
   21238:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   2123c:	4619      	mov	r1, r3
   2123e:	f7ff be38 	b.w	20eb2 <virtqueue_get_available_buffer>
}
   21242:	2000      	movs	r0, #0
   21244:	bc30      	pop	{r4, r5}
   21246:	4770      	bx	lr

00021248 <rpmsg_virtio_rx_callback>:
{
   21248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   2124c:	6803      	ldr	r3, [r0, #0]
{
   2124e:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   21250:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   21252:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   21256:	4638      	mov	r0, r7
   21258:	f7ff ff91 	bl	2117e <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   2125c:	4630      	mov	r0, r6
   2125e:	f10d 020a 	add.w	r2, sp, #10
   21262:	a903      	add	r1, sp, #12
   21264:	f7ff ffda 	bl	2121c <rpmsg_virtio_get_rx_buffer>
   21268:	4604      	mov	r4, r0
   2126a:	4638      	mov	r0, r7
   2126c:	f7ff ff85 	bl	2117a <k_sem_give>
	while (rp_hdr) {
   21270:	b914      	cbnz	r4, 21278 <rpmsg_virtio_rx_callback+0x30>
}
   21272:	b006      	add	sp, #24
   21274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21278:	4638      	mov	r0, r7
   2127a:	f7ff ff80 	bl	2117e <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   2127e:	f04f 33ff 	mov.w	r3, #4294967295
   21282:	2100      	movs	r1, #0
   21284:	4630      	mov	r0, r6
   21286:	6862      	ldr	r2, [r4, #4]
   21288:	f7ff ff25 	bl	210d6 <rpmsg_get_endpoint>
   2128c:	4605      	mov	r5, r0
   2128e:	4638      	mov	r0, r7
   21290:	f7ff ff73 	bl	2117a <k_sem_give>
		if (ept) {
   21294:	b185      	cbz	r5, 212b8 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   21296:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   21298:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   2129a:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2129c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   2129e:	bf08      	it	eq
   212a0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   212a2:	89a2      	ldrh	r2, [r4, #12]
   212a4:	9100      	str	r1, [sp, #0]
   212a6:	4628      	mov	r0, r5
   212a8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   212ac:	f104 0110 	add.w	r1, r4, #16
   212b0:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   212b2:	2800      	cmp	r0, #0
   212b4:	da00      	bge.n	212b8 <rpmsg_virtio_rx_callback+0x70>
   212b6:	e7fe      	b.n	212b6 <rpmsg_virtio_rx_callback+0x6e>
   212b8:	4638      	mov	r0, r7
   212ba:	f7ff ff60 	bl	2117e <__metal_mutex_acquire>
   212be:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   212c0:	9b03      	ldr	r3, [sp, #12]
   212c2:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   212c4:	b9b2      	cbnz	r2, 212f4 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   212c6:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   212c8:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   212cc:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   212d0:	2301      	movs	r3, #1
   212d2:	a904      	add	r1, sp, #16
   212d4:	f7ff fd53 	bl	20d7e <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   212d8:	4630      	mov	r0, r6
   212da:	f10d 020a 	add.w	r2, sp, #10
   212de:	a903      	add	r1, sp, #12
   212e0:	f7ff ff9c 	bl	2121c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   212e4:	4604      	mov	r4, r0
   212e6:	2800      	cmp	r0, #0
   212e8:	d1bf      	bne.n	2126a <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   212ea:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   212ee:	f7ff fe5a 	bl	20fa6 <virtqueue_kick>
   212f2:	e7ba      	b.n	2126a <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   212f4:	2a01      	cmp	r2, #1
   212f6:	d1ef      	bne.n	212d8 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   212f8:	461a      	mov	r2, r3
   212fa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   212fe:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   21302:	f7f8 f939 	bl	19578 <virtqueue_add_consumed_buffer>
   21306:	e7e7      	b.n	212d8 <rpmsg_virtio_rx_callback+0x90>

00021308 <_rpmsg_virtio_get_buffer_size>:
{
   21308:	b508      	push	{r3, lr}
   2130a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2130c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   2130e:	b14b      	cbz	r3, 21324 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   21310:	2b01      	cmp	r3, #1
   21312:	d10a      	bne.n	2132a <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   21314:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   21318:	f7ff fe7b 	bl	21012 <virtqueue_get_desc_size>
   2131c:	3810      	subs	r0, #16
   2131e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   21322:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   21324:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   21328:	e7fb      	b.n	21322 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   2132a:	2000      	movs	r0, #0
	return length;
   2132c:	e7f9      	b.n	21322 <_rpmsg_virtio_get_buffer_size+0x1a>

0002132e <rpmsg_virtio_shm_pool_get_buffer>:
{
   2132e:	4603      	mov	r3, r0
	if (shpool->avail < size)
   21330:	6842      	ldr	r2, [r0, #4]
{
   21332:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   21334:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   21336:	bf29      	itett	cs
   21338:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   2133a:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2133c:	1a84      	subcs	r4, r0, r2
   2133e:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   21340:	bf22      	ittt	cs
   21342:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   21344:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   21346:	605a      	strcs	r2, [r3, #4]
}
   21348:	bd10      	pop	{r4, pc}

0002134a <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   2134a:	b110      	cbz	r0, 21352 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   2134c:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   21350:	6001      	str	r1, [r0, #0]
}
   21352:	4770      	bx	lr

00021354 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   21354:	f7fc b91f 	b.w	1d596 <z_clock_idle_exit>

00021358 <k_heap_init>:
{
   21358:	b410      	push	{r4}
   2135a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2135e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   21362:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   21364:	f7e9 b9c2 	b.w	a6ec <sys_heap_init>

00021368 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   21368:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2136c:	428b      	cmp	r3, r1
   2136e:	d001      	beq.n	21374 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   21370:	f7f9 bf20 	b.w	1b1b4 <z_set_prio>
}
   21374:	2000      	movs	r0, #0
   21376:	4770      	bx	lr

00021378 <z_impl_k_mutex_init>:
{
   21378:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2137a:	2000      	movs	r0, #0
   2137c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   21380:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   21384:	4770      	bx	lr

00021386 <z_queue_node_peek>:
{
   21386:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   21388:	4604      	mov	r4, r0
   2138a:	b130      	cbz	r0, 2139a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2138c:	6802      	ldr	r2, [r0, #0]
   2138e:	0793      	lsls	r3, r2, #30
   21390:	d003      	beq.n	2139a <z_queue_node_peek+0x14>
		ret = anode->data;
   21392:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21394:	b109      	cbz	r1, 2139a <z_queue_node_peek+0x14>
			k_free(anode);
   21396:	f000 f982 	bl	2169e <k_free>
}
   2139a:	4620      	mov	r0, r4
   2139c:	bd10      	pop	{r4, pc}

0002139e <z_impl_k_queue_init>:
	list->head = NULL;
   2139e:	2300      	movs	r3, #0
	list->tail = NULL;
   213a0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   213a4:	6083      	str	r3, [r0, #8]
   213a6:	f100 030c 	add.w	r3, r0, #12
   213aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   213ae:	f100 0314 	add.w	r3, r0, #20
   213b2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   213b6:	4770      	bx	lr

000213b8 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   213b8:	2301      	movs	r3, #1
{
   213ba:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   213bc:	9300      	str	r3, [sp, #0]
   213be:	2300      	movs	r3, #0
{
   213c0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   213c2:	4619      	mov	r1, r3
   213c4:	f7f8 ffde 	bl	1a384 <queue_insert>
}
   213c8:	b003      	add	sp, #12
   213ca:	f85d fb04 	ldr.w	pc, [sp], #4

000213ce <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   213ce:	2300      	movs	r3, #0
{
   213d0:	b507      	push	{r0, r1, r2, lr}
   213d2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   213d4:	9300      	str	r3, [sp, #0]
   213d6:	4619      	mov	r1, r3
   213d8:	f7f8 ffd4 	bl	1a384 <queue_insert>
}
   213dc:	b003      	add	sp, #12
   213de:	f85d fb04 	ldr.w	pc, [sp], #4

000213e2 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   213e2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   213e6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   213ea:	4298      	cmp	r0, r3
   213ec:	bfac      	ite	ge
   213ee:	2000      	movge	r0, #0
   213f0:	2001      	movlt	r0, #1
   213f2:	4770      	bx	lr

000213f4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   213f4:	4603      	mov	r3, r0
   213f6:	b920      	cbnz	r0, 21402 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   213f8:	f3ef 8205 	mrs	r2, IPSR
   213fc:	b90a      	cbnz	r2, 21402 <z_reschedule_irqlock+0xe>
   213fe:	f7ec b9b9 	b.w	d774 <arch_swap>
   21402:	f383 8811 	msr	BASEPRI, r3
   21406:	f3bf 8f6f 	isb	sy
}
   2140a:	4770      	bx	lr

0002140c <z_reschedule_unlocked>:
	__asm__ volatile(
   2140c:	f04f 0320 	mov.w	r3, #32
   21410:	f3ef 8011 	mrs	r0, BASEPRI
   21414:	f383 8811 	msr	BASEPRI, r3
   21418:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2141c:	f7ff bfea 	b.w	213f4 <z_reschedule_irqlock>

00021420 <unpend_thread_no_timeout>:
{
   21420:	b510      	push	{r4, lr}
   21422:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   21424:	f7f9 f8e8 	bl	1a5f8 <pended_on>
   21428:	4621      	mov	r1, r4
   2142a:	f7f9 f9ed 	bl	1a808 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2142e:	7b63      	ldrb	r3, [r4, #13]
   21430:	f023 0302 	bic.w	r3, r3, #2
   21434:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21436:	2300      	movs	r3, #0
   21438:	60a3      	str	r3, [r4, #8]
}
   2143a:	bd10      	pop	{r4, pc}

0002143c <z_priq_dumb_best>:
{
   2143c:	4603      	mov	r3, r0
	return list->head == list;
   2143e:	6800      	ldr	r0, [r0, #0]
}
   21440:	4283      	cmp	r3, r0
   21442:	bf08      	it	eq
   21444:	2000      	moveq	r0, #0
   21446:	4770      	bx	lr

00021448 <z_unpend_all>:
{
   21448:	b538      	push	{r3, r4, r5, lr}
   2144a:	4605      	mov	r5, r0
	int need_sched = 0;
   2144c:	2000      	movs	r0, #0
   2144e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21450:	42a5      	cmp	r5, r4
   21452:	d000      	beq.n	21456 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21454:	b904      	cbnz	r4, 21458 <z_unpend_all+0x10>
}
   21456:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   21458:	4620      	mov	r0, r4
   2145a:	f7f9 fa01 	bl	1a860 <z_unpend_thread>
		z_ready_thread(thread);
   2145e:	4620      	mov	r0, r4
   21460:	f7f9 fb18 	bl	1aa94 <z_ready_thread>
		need_sched = 1;
   21464:	2001      	movs	r0, #1
   21466:	e7f2      	b.n	2144e <z_unpend_all+0x6>

00021468 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   21468:	b15a      	cbz	r2, 21482 <z_impl_k_sem_init+0x1a>
   2146a:	428a      	cmp	r2, r1
   2146c:	d309      	bcc.n	21482 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2146e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   21472:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   21476:	e9c0 0000 	strd	r0, r0, [r0]
   2147a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2147e:	2000      	movs	r0, #0
   21480:	4770      	bx	lr
		return -EINVAL;
   21482:	f06f 0015 	mvn.w	r0, #21
}
   21486:	4770      	bx	lr

00021488 <k_is_in_isr>:
   21488:	f3ef 8005 	mrs	r0, IPSR
}
   2148c:	3800      	subs	r0, #0
   2148e:	bf18      	it	ne
   21490:	2001      	movne	r0, #1
   21492:	4770      	bx	lr

00021494 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   21494:	b108      	cbz	r0, 2149a <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   21496:	f7e9 bd73 	b.w	af80 <arch_busy_wait>
}
   2149a:	4770      	bx	lr

0002149c <z_impl_k_thread_name_set>:
}
   2149c:	f06f 0046 	mvn.w	r0, #70	; 0x46
   214a0:	4770      	bx	lr

000214a2 <k_thread_name_get>:
}
   214a2:	2000      	movs	r0, #0
   214a4:	4770      	bx	lr

000214a6 <k_work_submit_to_queue>:
{
   214a6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   214a8:	f101 0308 	add.w	r3, r1, #8
   214ac:	e8d3 2fef 	ldaex	r2, [r3]
   214b0:	f042 0c01 	orr.w	ip, r2, #1
   214b4:	e8c3 cfee 	stlex	lr, ip, [r3]
   214b8:	f1be 0f00 	cmp.w	lr, #0
   214bc:	d1f6      	bne.n	214ac <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   214be:	07d3      	lsls	r3, r2, #31
   214c0:	d403      	bmi.n	214ca <k_work_submit_to_queue+0x24>
}
   214c2:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   214c6:	f7ff bf77 	b.w	213b8 <k_queue_append>
}
   214ca:	f85d fb04 	ldr.w	pc, [sp], #4

000214ce <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   214ce:	f1a0 0110 	sub.w	r1, r0, #16
   214d2:	6980      	ldr	r0, [r0, #24]
   214d4:	f7ff bfe7 	b.w	214a6 <k_work_submit_to_queue>

000214d8 <work_cancel>:
{
   214d8:	b570      	push	{r4, r5, r6, lr}
   214da:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   214dc:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   214e0:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   214e4:	07db      	lsls	r3, r3, #31
   214e6:	d52f      	bpl.n	21548 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   214e8:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   214ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   214ec:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   214ee:	b913      	cbnz	r3, 214f6 <work_cancel+0x1e>
			return -EINVAL;
   214f0:	f06f 0015 	mvn.w	r0, #21
}
   214f4:	bd70      	pop	{r4, r5, r6, pc}
   214f6:	429c      	cmp	r4, r3
   214f8:	d121      	bne.n	2153e <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   214fa:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   214fc:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   214fe:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   21502:	b991      	cbnz	r1, 2152a <work_cancel+0x52>
   21504:	42b4      	cmp	r4, r6
	list->head = node;
   21506:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   21508:	d100      	bne.n	2150c <work_cancel+0x34>
	list->tail = node;
   2150a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2150c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2150e:	f003 0303 	and.w	r3, r3, #3
   21512:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   21514:	2000      	movs	r0, #0
   21516:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21518:	e8d5 3fef 	ldaex	r3, [r5]
   2151c:	f023 0301 	bic.w	r3, r3, #1
   21520:	e8c5 3fe2 	stlex	r2, r3, [r5]
   21524:	2a00      	cmp	r2, #0
   21526:	d0e5      	beq.n	214f4 <work_cancel+0x1c>
   21528:	e7f6      	b.n	21518 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2152a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2152c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2152e:	f003 0303 	and.w	r3, r3, #3
   21532:	ea43 0300 	orr.w	r3, r3, r0
   21536:	600b      	str	r3, [r1, #0]
	list->tail = node;
   21538:	bf08      	it	eq
   2153a:	6051      	streq	r1, [r2, #4]
}
   2153c:	e7e6      	b.n	2150c <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2153e:	6818      	ldr	r0, [r3, #0]
   21540:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   21542:	f020 0303 	bic.w	r3, r0, #3
   21546:	e7d2      	b.n	214ee <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   21548:	3010      	adds	r0, #16
   2154a:	f7fa fc95 	bl	1be78 <z_abort_timeout>
		if (err) {
   2154e:	2800      	cmp	r0, #0
   21550:	d0e0      	beq.n	21514 <work_cancel+0x3c>
			return -EALREADY;
   21552:	f06f 0044 	mvn.w	r0, #68	; 0x44
   21556:	e7cd      	b.n	214f4 <work_cancel+0x1c>

00021558 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   21558:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2155a:	f7fa fddb 	bl	1c114 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2155e:	bd08      	pop	{r3, pc}

00021560 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   21560:	f7fa bdd8 	b.w	1c114 <z_tick_get>

00021564 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21564:	f1b1 3fff 	cmp.w	r1, #4294967295
   21568:	bf08      	it	eq
   2156a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2156e:	b538      	push	{r3, r4, r5, lr}
   21570:	4605      	mov	r5, r0
   21572:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21574:	d01d      	beq.n	215b2 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21576:	ea51 0300 	orrs.w	r3, r1, r0
   2157a:	d103      	bne.n	21584 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2157c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   21580:	f7fa bdc8 	b.w	1c114 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   21584:	f06f 0301 	mvn.w	r3, #1
   21588:	1a18      	subs	r0, r3, r0
   2158a:	f04f 33ff 	mov.w	r3, #4294967295
   2158e:	eb63 0101 	sbc.w	r1, r3, r1
   21592:	2900      	cmp	r1, #0
   21594:	da0c      	bge.n	215b0 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   21596:	f7fa fdbd 	bl	1c114 <z_tick_get>
   2159a:	2d01      	cmp	r5, #1
   2159c:	4622      	mov	r2, r4
   2159e:	f174 0400 	sbcs.w	r4, r4, #0
   215a2:	462b      	mov	r3, r5
   215a4:	bfbc      	itt	lt
   215a6:	2301      	movlt	r3, #1
   215a8:	2200      	movlt	r2, #0
   215aa:	1818      	adds	r0, r3, r0
   215ac:	eb41 0102 	adc.w	r1, r1, r2
}
   215b0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   215b2:	f04f 30ff 	mov.w	r0, #4294967295
   215b6:	4601      	mov	r1, r0
   215b8:	e7fa      	b.n	215b0 <z_timeout_end_calc+0x4c>

000215ba <k_work_submit_to_queue>:
{
   215ba:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   215bc:	f101 0308 	add.w	r3, r1, #8
   215c0:	e8d3 2fef 	ldaex	r2, [r3]
   215c4:	f042 0c01 	orr.w	ip, r2, #1
   215c8:	e8c3 cfee 	stlex	lr, ip, [r3]
   215cc:	f1be 0f00 	cmp.w	lr, #0
   215d0:	d1f6      	bne.n	215c0 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   215d2:	07d3      	lsls	r3, r2, #31
   215d4:	d403      	bmi.n	215de <k_work_submit_to_queue+0x24>
}
   215d6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   215da:	f7ff beed 	b.w	213b8 <k_queue_append>
}
   215de:	f85d fb04 	ldr.w	pc, [sp], #4

000215e2 <add_event>:
{
   215e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215e4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   215e6:	e9d0 2300 	ldrd	r2, r3, [r0]
   215ea:	4290      	cmp	r0, r2
   215ec:	4604      	mov	r4, r0
   215ee:	460d      	mov	r5, r1
   215f0:	d106      	bne.n	21600 <add_event+0x1e>
	node->prev = list->tail;
   215f2:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   215f4:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   215f6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   215f8:	6863      	ldr	r3, [r4, #4]
   215fa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   215fc:	6065      	str	r5, [r4, #4]
}
   215fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   21600:	2b00      	cmp	r3, #0
   21602:	d0f6      	beq.n	215f2 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   21604:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21606:	b100      	cbz	r0, 2160a <add_event+0x28>
   21608:	386c      	subs	r0, #108	; 0x6c
   2160a:	b107      	cbz	r7, 2160e <add_event+0x2c>
   2160c:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2160e:	4639      	mov	r1, r7
   21610:	f7ff fee7 	bl	213e2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   21614:	2800      	cmp	r0, #0
   21616:	d1ec      	bne.n	215f2 <add_event+0x10>
	return list->head == list;
   21618:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2161a:	42b4      	cmp	r4, r6
   2161c:	d0e9      	beq.n	215f2 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2161e:	2e00      	cmp	r6, #0
   21620:	d0e7      	beq.n	215f2 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   21622:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21624:	b101      	cbz	r1, 21628 <add_event+0x46>
   21626:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   21628:	4638      	mov	r0, r7
   2162a:	f7ff feda 	bl	213e2 <z_is_t1_higher_prio_than_t2>
   2162e:	b128      	cbz	r0, 2163c <add_event+0x5a>
	node->prev = successor->prev;
   21630:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   21632:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   21636:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   21638:	6075      	str	r5, [r6, #4]
			return;
   2163a:	e7e0      	b.n	215fe <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2163c:	6863      	ldr	r3, [r4, #4]
   2163e:	429e      	cmp	r6, r3
   21640:	d0d7      	beq.n	215f2 <add_event+0x10>
   21642:	6836      	ldr	r6, [r6, #0]
   21644:	e7eb      	b.n	2161e <add_event+0x3c>

00021646 <z_handle_obj_poll_events>:
{
   21646:	4603      	mov	r3, r0
	return list->head == list;
   21648:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2164a:	4283      	cmp	r3, r0
   2164c:	d008      	beq.n	21660 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2164e:	e9d0 3200 	ldrd	r3, r2, [r0]
   21652:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21654:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21656:	2300      	movs	r3, #0
	node->prev = NULL;
   21658:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2165c:	f7fa bd98 	b.w	1c190 <signal_poll_event>
}
   21660:	4770      	bx	lr

00021662 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   21662:	2904      	cmp	r1, #4
{
   21664:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   21668:	460d      	mov	r5, r1
   2166a:	bf38      	it	cc
   2166c:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2166e:	1952      	adds	r2, r2, r5
{
   21670:	4606      	mov	r6, r0
   21672:	d209      	bcs.n	21688 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   21674:	f04f 0800 	mov.w	r8, #0
   21678:	f04f 0900 	mov.w	r9, #0
   2167c:	e9cd 8900 	strd	r8, r9, [sp]
   21680:	f7f8 fb72 	bl	19d68 <k_heap_aligned_alloc>
	if (mem == NULL) {
   21684:	4604      	mov	r4, r0
   21686:	b918      	cbnz	r0, 21690 <z_heap_aligned_alloc+0x2e>
		return NULL;
   21688:	2000      	movs	r0, #0
}
   2168a:	b002      	add	sp, #8
   2168c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   21690:	462a      	mov	r2, r5
   21692:	21ff      	movs	r1, #255	; 0xff
   21694:	f7fc fe63 	bl	1e35e <memset>
	*heap_ref = heap;
   21698:	6026      	str	r6, [r4, #0]
	return mem + excess;
   2169a:	1960      	adds	r0, r4, r5
   2169c:	e7f5      	b.n	2168a <z_heap_aligned_alloc+0x28>

0002169e <k_free>:
	if (ptr != NULL) {
   2169e:	b138      	cbz	r0, 216b0 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   216a0:	1f03      	subs	r3, r0, #4
   216a2:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   216a4:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   216a8:	1c42      	adds	r2, r0, #1
   216aa:	d0fa      	beq.n	216a2 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   216ac:	f7f8 bbe4 	b.w	19e78 <k_heap_free>
}
   216b0:	4770      	bx	lr

000216b2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   216b2:	4770      	bx	lr
