
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	38 d4 00 20 b9 db 00 00 85 e2 01 00 e9 db 00 00     8.. ............
    8010:	e9 db 00 00 e9 db 00 00 e9 db 00 00 e9 db 00 00     ................
	...
    802c:	81 d9 00 00 e9 db 00 00 00 00 00 00 25 d9 00 00     ............%...
    803c:	21 c7 00 00                                         !...

00008040 <_irq_vector_table>:
    8040:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8050:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8060:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8070:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8080:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8090:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    80a0:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    80b0:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    80c0:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    80d0:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    80e0:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    80f0:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8100:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8110:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8120:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8130:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8140:	79 db 00 00 79 db 00 00 79 db 00 00 79 db 00 00     y...y...y...y...
    8150:	79 db 00 00                                         y...

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	dc ec 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
}

/*
 * calculate speed
 */
uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	460e      	mov	r6, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461d      	mov	r5, r3
    if (len == 1)
    8f0e:	d128      	bne.n	8f62 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x62>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	f892 8000 	ldrb.w	r8, [r2]
    8f14:	4b66      	ldr	r3, [pc, #408]	; (90b0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1b0>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f16:	4640      	mov	r0, r8
        diameter = (uint8_t ) *buffer;
    8f18:	f883 8000 	strb.w	r8, [r3]
            dia = (diameter + 0.5) * 2.54;
    8f1c:	f7ff fae2 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f20:	f018 0f80 	tst.w	r8, #128	; 0x80
    8f24:	d003      	beq.n	8f2e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x2e>
            dia = (diameter + 0.5) * 2.54;
    8f26:	2200      	movs	r2, #0
    8f28:	4b62      	ldr	r3, [pc, #392]	; (90b4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1b4>)
    8f2a:	f7ff f98f 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f2e:	a35e      	add	r3, pc, #376	; (adr r3, 90a8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1a8>)
    8f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f34:	f7ff fb40 	bl	85b8 <__aeabi_dmul>
    8f38:	4b5f      	ldr	r3, [pc, #380]	; (90b8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1b8>)
    8f3a:	e9c3 0100 	strd	r0, r1, [r3]
                 address3[i-34] = charToSave;
            }       
        }        
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f3e:	8a31      	ldrh	r1, [r6, #16]
    8f40:	463a      	mov	r2, r7
    8f42:	485e      	ldr	r0, [pc, #376]	; (90bc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1bc>)
    8f44:	f013 fde4 	bl	1cb10 <printk>
    8f48:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f4a:	4e5d      	ldr	r6, [pc, #372]	; (90c0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c0>)
    for(uint8_t i = 0; i < len; i++){
    8f4c:	1c5f      	adds	r7, r3, #1
    8f4e:	b2db      	uxtb	r3, r3
    8f50:	42ab      	cmp	r3, r5
    8f52:	f280 80a2 	bge.w	909a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x19a>
        printk("%02X", buffer[i]);
    8f56:	5ce1      	ldrb	r1, [r4, r3]
    8f58:	4630      	mov	r0, r6
    8f5a:	f013 fdd9 	bl	1cb10 <printk>
    for(uint8_t i = 0; i < len; i++){
    8f5e:	463b      	mov	r3, r7
    8f60:	e7f4      	b.n	8f4c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x4c>
    if (len == 18)
    8f62:	2b12      	cmp	r3, #18
    8f64:	d161      	bne.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7c53      	ldrb	r3, [r2, #17]
    8f68:	4a56      	ldr	r2, [pc, #344]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c4>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        nbrAddresses = (uint8_t) buffer[17];
    8f6c:	7013      	strb	r3, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1e2      	bne.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
    8f78:	4a53      	ldr	r2, [pc, #332]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c8>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	428b      	cmp	r3, r1
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d7      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
            cntAddresses++;
    8f8e:	4a4f      	ldr	r2, [pc, #316]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1cc>)
    8f90:	7813      	ldrb	r3, [r2, #0]
    8f92:	3301      	adds	r3, #1
    8f94:	b2db      	uxtb	r3, r3
            if (cntAddresses == 1)
    8f96:	2b01      	cmp	r3, #1
            cntAddresses++;
    8f98:	7013      	strb	r3, [r2, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a4a      	ldr	r2, [pc, #296]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c8>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	4299      	cmp	r1, r3
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c5      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
            else if (cntAddresses == 2)
    8fb2:	2b02      	cmp	r3, #2
    8fb4:	d1c3      	bne.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
    8fb6:	4a46      	ldr	r2, [pc, #280]	; (90d0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d0>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b3f      	ldr	r3, [pc, #252]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1cc>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b5      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
            cntAddresses++;
    8fd2:	4a3e      	ldr	r2, [pc, #248]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1cc>)
    8fd4:	7813      	ldrb	r3, [r2, #0]
    8fd6:	3301      	adds	r3, #1
    8fd8:	b2db      	uxtb	r3, r3
            if (cntAddresses == 1)
    8fda:	2b01      	cmp	r3, #1
            cntAddresses++;
    8fdc:	7013      	strb	r3, [r2, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a39      	ldr	r2, [pc, #228]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c8>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a3      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
            else if (cntAddresses == 2)
    8ff6:	2b02      	cmp	r3, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a35      	ldr	r2, [pc, #212]	; (90d0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d0>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e796      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
            } else if (cntAddresses == 3)
    9010:	2b03      	cmp	r3, #3
    9012:	d194      	bne.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
    9014:	4a2f      	ldr	r2, [pc, #188]	; (90d4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d4>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    if (len == 34)
    902a:	2b22      	cmp	r3, #34	; 0x22
    902c:	d113      	bne.n	9056 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x156>
        nbrAddresses = 2;
    902e:	2202      	movs	r2, #2
    9030:	4b24      	ldr	r3, [pc, #144]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c4>)
                address1[i] = charToSave;
    9032:	4825      	ldr	r0, [pc, #148]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c8>)
        nbrAddresses = 2;
    9034:	701a      	strb	r2, [r3, #0]
    9036:	2300      	movs	r3, #0
    9038:	4a25      	ldr	r2, [pc, #148]	; (90d0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d0>)
            uint8_t val = (uint8_t) buffer[i];
    903a:	5ce1      	ldrb	r1, [r4, r3]
            if (i < 17)
    903c:	2b10      	cmp	r3, #16
                address1[i] = charToSave;
    903e:	bf98      	it	ls
    9040:	5419      	strbls	r1, [r3, r0]
        for (uint8_t i=0; i<34; i++)
    9042:	f103 0301 	add.w	r3, r3, #1
                address2[i-17] = charToSave;
    9046:	bf88      	it	hi
    9048:	f802 1c11 	strbhi.w	r1, [r2, #-17]
        for (uint8_t i=0; i<34; i++)
    904c:	2b22      	cmp	r3, #34	; 0x22
    904e:	f102 0201 	add.w	r2, r2, #1
    9052:	d1f2      	bne.n	903a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x13a>
    9054:	e773      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
    if (len == 51)
    9056:	2b33      	cmp	r3, #51	; 0x33
    9058:	f47f af71 	bne.w	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
        nbrAddresses = 1;
    905c:	2201      	movs	r2, #1
    905e:	4b19      	ldr	r3, [pc, #100]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c4>)
                 address3[i-34] = charToSave;
    9060:	481c      	ldr	r0, [pc, #112]	; (90d4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d4>)
        nbrAddresses = 1;
    9062:	701a      	strb	r2, [r3, #0]
    9064:	2300      	movs	r3, #0
    9066:	4a1a      	ldr	r2, [pc, #104]	; (90d0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d0>)
                address1[i] = charToSave;
    9068:	f8df c05c 	ldr.w	ip, [pc, #92]	; 90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1c8>
            if (i < 17)
    906c:	2b10      	cmp	r3, #16
            uint8_t val = (uint8_t) buffer[i];
    906e:	5ce1      	ldrb	r1, [r4, r3]
            if (i < 17)
    9070:	fa5f fe83 	uxtb.w	lr, r3
    9074:	d807      	bhi.n	9086 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x186>
                address1[i] = charToSave;
    9076:	f803 100c 	strb.w	r1, [r3, ip]
        for (uint8_t i=0; i<51; i++)
    907a:	3301      	adds	r3, #1
    907c:	2b33      	cmp	r3, #51	; 0x33
    907e:	f102 0201 	add.w	r2, r2, #1
    9082:	d1f3      	bne.n	906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>
    9084:	e75b      	b.n	8f3e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x3e>
            else if (i < 34)
    9086:	f1be 0f21 	cmp.w	lr, #33	; 0x21
                 address3[i-34] = charToSave;
    908a:	bf8a      	itet	hi
    908c:	eb00 0e03 	addhi.w	lr, r0, r3
                 address2[i-17] = charToSave;
    9090:	f802 1c11 	strbls.w	r1, [r2, #-17]
                 address3[i-34] = charToSave;
    9094:	f80e 1c22 	strbhi.w	r1, [lr, #-34]
    9098:	e7ef      	b.n	907a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x17a>
    }
    printk("\n");
    909a:	480f      	ldr	r0, [pc, #60]	; (90d8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x1d8>)
    909c:	f013 fd38 	bl	1cb10 <printk>
 	return len;
}
    90a0:	4628      	mov	r0, r5
    90a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90a6:	bf00      	nop
    90a8:	851eb852 	.word	0x851eb852
    90ac:	400451eb 	.word	0x400451eb
    90b0:	2000b2a0 	.word	0x2000b2a0
    90b4:	3fe00000 	.word	0x3fe00000
    90b8:	20008700 	.word	0x20008700
    90bc:	00022df1 	.word	0x00022df1
    90c0:	00022dec 	.word	0x00022dec
    90c4:	2000b2a1 	.word	0x2000b2a1
    90c8:	2000b08c 	.word	0x2000b08c
    90cc:	2000b0bf 	.word	0x2000b0bf
    90d0:	2000b09d 	.word	0x2000b09d
    90d4:	2000b0ae 	.word	0x2000b0ae
    90d8:	000263a7 	.word	0x000263a7
    90dc:	00000000 	.word	0x00000000

000090e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    90e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    90e2:	4d5f      	ldr	r5, [pc, #380]	; (9260 <bt_init+0x180>)
    90e4:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    90e8:	6899      	ldr	r1, [r3, #8]
    90ea:	f011 0101 	ands.w	r1, r1, #1
    90ee:	d11e      	bne.n	912e <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    90f0:	f640 4003 	movw	r0, #3075	; 0xc03
    90f4:	aa01      	add	r2, sp, #4
    90f6:	f005 ffed 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    90fa:	4604      	mov	r4, r0
    90fc:	2800      	cmp	r0, #0
    90fe:	f040 80ac 	bne.w	925a <bt_init+0x17a>
	uint8_t status = buf->data[0];
    9102:	9b01      	ldr	r3, [sp, #4]
    9104:	689b      	ldr	r3, [r3, #8]
	if (status) {
    9106:	781b      	ldrb	r3, [r3, #0]
    9108:	b973      	cbnz	r3, 9128 <bt_init+0x48>
	scan_dev_found_cb = NULL;
    910a:	4a56      	ldr	r2, [pc, #344]	; (9264 <bt_init+0x184>)
    910c:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    910e:	f105 0394 	add.w	r3, r5, #148	; 0x94
    9112:	4618      	mov	r0, r3
    9114:	f015 fac7 	bl	1e6a6 <atomic_get>
    9118:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    911c:	e8d3 2fef 	ldaex	r2, [r3]
    9120:	e8c3 0fe1 	stlex	r1, r0, [r3]
    9124:	2900      	cmp	r1, #0
    9126:	d1f9      	bne.n	911c <bt_init+0x3c>
		net_buf_unref(rsp);
    9128:	9801      	ldr	r0, [sp, #4]
    912a:	f00e fb5b 	bl	177e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    912e:	2100      	movs	r1, #0
    9130:	f241 0003 	movw	r0, #4099	; 0x1003
    9134:	aa01      	add	r2, sp, #4
    9136:	f005 ffcd 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    913a:	4604      	mov	r4, r0
    913c:	2800      	cmp	r0, #0
    913e:	f040 808c 	bne.w	925a <bt_init+0x17a>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9142:	9b01      	ldr	r3, [sp, #4]
    9144:	2208      	movs	r2, #8
    9146:	6899      	ldr	r1, [r3, #8]
    9148:	4847      	ldr	r0, [pc, #284]	; (9268 <bt_init+0x188>)
    914a:	3101      	adds	r1, #1
    914c:	f015 f998 	bl	1e480 <memcpy>
	net_buf_unref(rsp);
    9150:	9801      	ldr	r0, [sp, #4]
    9152:	f00e fb47 	bl	177e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9156:	4621      	mov	r1, r4
    9158:	f241 0001 	movw	r0, #4097	; 0x1001
    915c:	aa01      	add	r2, sp, #4
    915e:	f005 ffb9 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    9162:	4604      	mov	r4, r0
    9164:	2800      	cmp	r0, #0
    9166:	d178      	bne.n	925a <bt_init+0x17a>
	read_local_ver_complete(rsp);
    9168:	9801      	ldr	r0, [sp, #4]
    916a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    916c:	785a      	ldrb	r2, [r3, #1]
    916e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9172:	78d9      	ldrb	r1, [r3, #3]
    9174:	789a      	ldrb	r2, [r3, #2]
    9176:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    917a:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    917c:	791a      	ldrb	r2, [r3, #4]
    917e:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9182:	7a19      	ldrb	r1, [r3, #8]
    9184:	79da      	ldrb	r2, [r3, #7]
    9186:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    918a:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    918c:	795a      	ldrb	r2, [r3, #5]
    918e:	799b      	ldrb	r3, [r3, #6]
    9190:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    9194:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    9196:	f00e fb25 	bl	177e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    919a:	4621      	mov	r1, r4
    919c:	f241 0002 	movw	r0, #4098	; 0x1002
    91a0:	aa01      	add	r2, sp, #4
    91a2:	f005 ff97 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    91a6:	4604      	mov	r4, r0
    91a8:	2800      	cmp	r0, #0
    91aa:	d156      	bne.n	925a <bt_init+0x17a>
	memcpy(bt_dev.supported_commands, rp->commands,
    91ac:	9b01      	ldr	r3, [sp, #4]
    91ae:	2240      	movs	r2, #64	; 0x40
    91b0:	6899      	ldr	r1, [r3, #8]
    91b2:	482e      	ldr	r0, [pc, #184]	; (926c <bt_init+0x18c>)
    91b4:	3101      	adds	r1, #1
    91b6:	f015 f963 	bl	1e480 <memcpy>
	net_buf_unref(rsp);
    91ba:	9801      	ldr	r0, [sp, #4]
    91bc:	f00e fb12 	bl	177e4 <net_buf_unref>
		err = prng_init();
    91c0:	f007 ff80 	bl	110c4 <prng_init>
		if (err) {
    91c4:	4604      	mov	r4, r0
    91c6:	2800      	cmp	r0, #0
    91c8:	d147      	bne.n	925a <bt_init+0x17a>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    91ca:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    91ce:	069a      	lsls	r2, r3, #26
    91d0:	d40e      	bmi.n	91f0 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    91d2:	2157      	movs	r1, #87	; 0x57
    91d4:	4826      	ldr	r0, [pc, #152]	; (9270 <bt_init+0x190>)
    91d6:	f013 fc9b 	bl	1cb10 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    91da:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    91de:	065b      	lsls	r3, r3, #25
    91e0:	d44a      	bmi.n	9278 <bt_init+0x198>
		BT_ERR("Non-LE capable controller detected!");
    91e2:	2145      	movs	r1, #69	; 0x45
    91e4:	4823      	ldr	r0, [pc, #140]	; (9274 <bt_init+0x194>)
    91e6:	f013 fc93 	bl	1cb10 <printk>
		return -ENODEV;
    91ea:	f06f 0412 	mvn.w	r4, #18
    91ee:	e034      	b.n	925a <bt_init+0x17a>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    91f0:	2107      	movs	r1, #7
    91f2:	f640 4033 	movw	r0, #3123	; 0xc33
    91f6:	f005 ff23 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    91fa:	4607      	mov	r7, r0
    91fc:	b910      	cbnz	r0, 9204 <bt_init+0x124>
		return -ENOBUFS;
    91fe:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9202:	e02a      	b.n	925a <bt_init+0x17a>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9204:	2107      	movs	r1, #7
    9206:	3008      	adds	r0, #8
    9208:	f00e fc02 	bl	17a10 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    920c:	4621      	mov	r1, r4
    920e:	2207      	movs	r2, #7
    9210:	4606      	mov	r6, r0
    9212:	f015 f960 	bl	1e4d6 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    9216:	2345      	movs	r3, #69	; 0x45
    9218:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    921a:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    921c:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    921e:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    9220:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9222:	4639      	mov	r1, r7
    9224:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    9228:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    922a:	f005 ff53 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    922e:	4604      	mov	r4, r0
    9230:	b998      	cbnz	r0, 925a <bt_init+0x17a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    9232:	2101      	movs	r1, #1
    9234:	f640 4031 	movw	r0, #3121	; 0xc31
    9238:	f005 ff02 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    923c:	4606      	mov	r6, r0
    923e:	2800      	cmp	r0, #0
    9240:	d0dd      	beq.n	91fe <bt_init+0x11e>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
    9242:	2101      	movs	r1, #1
    9244:	f015 fa6a 	bl	1e71c <net_buf_add_u8.isra.0>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    9248:	4622      	mov	r2, r4
    924a:	4631      	mov	r1, r6
    924c:	f640 4031 	movw	r0, #3121	; 0xc31
    9250:	f005 ff40 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    9254:	4604      	mov	r4, r0
    9256:	2800      	cmp	r0, #0
    9258:	d0bf      	beq.n	91da <bt_init+0xfa>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    925a:	4620      	mov	r0, r4
    925c:	b003      	add	sp, #12
    925e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9260:	20008000 	.word	0x20008000
    9264:	20009c1c 	.word	0x20009c1c
    9268:	2000803c 	.word	0x2000803c
    926c:	20008044 	.word	0x20008044
    9270:	00024899 	.word	0x00024899
    9274:	000248cc 	.word	0x000248cc
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9278:	2100      	movs	r1, #0
    927a:	f242 0003 	movw	r0, #8195	; 0x2003
    927e:	aa01      	add	r2, sp, #4
    9280:	f005 ff28 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    9284:	4604      	mov	r4, r0
    9286:	2800      	cmp	r0, #0
    9288:	d1e7      	bne.n	925a <bt_init+0x17a>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    928a:	9b01      	ldr	r3, [sp, #4]
    928c:	2208      	movs	r2, #8
    928e:	6899      	ldr	r1, [r3, #8]
    9290:	48b9      	ldr	r0, [pc, #740]	; (9578 <bt_init+0x498>)
    9292:	3101      	adds	r1, #1
    9294:	f015 f8f4 	bl	1e480 <memcpy>
	net_buf_unref(rsp);
    9298:	9801      	ldr	r0, [sp, #4]
    929a:	f00e faa3 	bl	177e4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    929e:	4621      	mov	r1, r4
    92a0:	f242 0002 	movw	r0, #8194	; 0x2002
    92a4:	aa01      	add	r2, sp, #4
    92a6:	f005 ff15 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    92aa:	4604      	mov	r4, r0
    92ac:	2800      	cmp	r0, #0
    92ae:	d1d4      	bne.n	925a <bt_init+0x17a>
		le_read_buffer_size_complete(rsp);
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    92b4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    92b8:	b291      	uxth	r1, r2
    92ba:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    92be:	b121      	cbz	r1, 92ca <bt_init+0x1ea>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    92c0:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    92c2:	48ae      	ldr	r0, [pc, #696]	; (957c <bt_init+0x49c>)
    92c4:	4611      	mov	r1, r2
    92c6:	f018 f98b 	bl	215e0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    92ca:	9801      	ldr	r0, [sp, #4]
    92cc:	f00e fa8a 	bl	177e4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    92d0:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    92d4:	f016 0620 	ands.w	r6, r6, #32
    92d8:	f000 80f3 	beq.w	94c2 <bt_init+0x3e2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    92dc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    92e0:	071f      	lsls	r7, r3, #28
    92e2:	d512      	bpl.n	930a <bt_init+0x22a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    92e4:	2100      	movs	r1, #0
    92e6:	f242 001c 	movw	r0, #8220	; 0x201c
    92ea:	aa01      	add	r2, sp, #4
    92ec:	f005 fef2 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    92f0:	4604      	mov	r4, r0
    92f2:	2800      	cmp	r0, #0
    92f4:	d1b1      	bne.n	925a <bt_init+0x17a>
		le_read_supp_states_complete(rsp);
    92f6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    92f8:	6883      	ldr	r3, [r0, #8]
    92fa:	f8d3 2001 	ldr.w	r2, [r3, #1]
    92fe:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9302:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    9306:	f00e fa6d 	bl	177e4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    930a:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    930e:	069e      	lsls	r6, r3, #26
    9310:	d524      	bpl.n	935c <bt_init+0x27c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9312:	4668      	mov	r0, sp
    9314:	f10d 0102 	add.w	r1, sp, #2
    9318:	f005 ff3e 	bl	f198 <hci_le_read_max_data_len>
		if (err) {
    931c:	4604      	mov	r4, r0
    931e:	2800      	cmp	r0, #0
    9320:	d19b      	bne.n	925a <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9322:	2104      	movs	r1, #4
    9324:	f242 0024 	movw	r0, #8228	; 0x2024
    9328:	f005 fe8a 	bl	f040 <bt_hci_cmd_create>
		if (!buf) {
    932c:	4606      	mov	r6, r0
    932e:	2800      	cmp	r0, #0
    9330:	f43f af65 	beq.w	91fe <bt_init+0x11e>
    9334:	2104      	movs	r1, #4
    9336:	3008      	adds	r0, #8
    9338:	f00e fb6a 	bl	17a10 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    933c:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9340:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9342:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9344:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9348:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    934a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    934c:	f242 0024 	movw	r0, #8228	; 0x2024
    9350:	f005 fec0 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    9354:	4604      	mov	r4, r0
    9356:	2800      	cmp	r0, #0
    9358:	f47f af7f 	bne.w	925a <bt_init+0x17a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    935c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9360:	065c      	lsls	r4, r3, #25
    9362:	d510      	bpl.n	9386 <bt_init+0x2a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9364:	2100      	movs	r1, #0
    9366:	f242 002a 	movw	r0, #8234	; 0x202a
    936a:	aa01      	add	r2, sp, #4
    936c:	f005 feb2 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    9370:	4604      	mov	r4, r0
    9372:	2800      	cmp	r0, #0
    9374:	f47f af71 	bne.w	925a <bt_init+0x17a>
		le_read_resolving_list_size_complete(rsp);
    9378:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
    937a:	6883      	ldr	r3, [r0, #8]
    937c:	785b      	ldrb	r3, [r3, #1]
    937e:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    9382:	f00e fa2f 	bl	177e4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9386:	2108      	movs	r1, #8
    9388:	f242 0001 	movw	r0, #8193	; 0x2001
    938c:	f005 fe58 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    9390:	4604      	mov	r4, r0
    9392:	2800      	cmp	r0, #0
    9394:	f43f af33 	beq.w	91fe <bt_init+0x11e>
    9398:	2108      	movs	r1, #8
    939a:	4408      	add	r0, r1
    939c:	f00e fb38 	bl	17a10 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    93a0:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    93a4:	f240 2302 	movw	r3, #514	; 0x202
    93a8:	f011 0f40 	tst.w	r1, #64	; 0x40
    93ac:	bf08      	it	eq
    93ae:	2303      	moveq	r3, #3
    93b0:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    93b2:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    93b4:	bf4c      	ite	mi
    93b6:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    93ba:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    93be:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    93c2:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    93c4:	bf48      	it	mi
    93c6:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    93ca:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    93ce:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    93d2:	bf18      	it	ne
    93d4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    93d8:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    93dc:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    93de:	bf48      	it	mi
    93e0:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    93e4:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    93e6:	bf08      	it	eq
    93e8:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    93ec:	2100      	movs	r1, #0
    93ee:	f015 f998 	bl	1e722 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    93f2:	4621      	mov	r1, r4
    93f4:	2200      	movs	r2, #0
    93f6:	f242 0001 	movw	r0, #8193	; 0x2001
    93fa:	f005 fe6b 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    93fe:	4604      	mov	r4, r0
    9400:	2800      	cmp	r0, #0
    9402:	f47f af2a 	bne.w	925a <bt_init+0x17a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9406:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    940a:	0698      	lsls	r0, r3, #26
    940c:	d41e      	bmi.n	944c <bt_init+0x36c>
	if (bt_dev.le.acl_mtu) {
    940e:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    9412:	b9d9      	cbnz	r1, 944c <bt_init+0x36c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9414:	f241 0005 	movw	r0, #4101	; 0x1005
    9418:	aa01      	add	r2, sp, #4
    941a:	f005 fe5b 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    941e:	4604      	mov	r4, r0
    9420:	2800      	cmp	r0, #0
    9422:	f47f af1a 	bne.w	925a <bt_init+0x17a>
	if (bt_dev.le.acl_mtu) {
    9426:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    942a:	b963      	cbnz	r3, 9446 <bt_init+0x366>
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9430:	785a      	ldrb	r2, [r3, #1]
    9432:	7899      	ldrb	r1, [r3, #2]
    9434:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9438:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    943c:	889a      	ldrh	r2, [r3, #4]
    943e:	484f      	ldr	r0, [pc, #316]	; (957c <bt_init+0x49c>)
    9440:	4611      	mov	r1, r2
    9442:	f018 f8cd 	bl	215e0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9446:	9801      	ldr	r0, [sp, #4]
    9448:	f00e f9cc 	bl	177e4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    944c:	2108      	movs	r1, #8
    944e:	f640 4001 	movw	r0, #3073	; 0xc01
    9452:	f005 fdf5 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    9456:	4604      	mov	r4, r0
    9458:	2800      	cmp	r0, #0
    945a:	f43f aed0 	beq.w	91fe <bt_init+0x11e>
    945e:	2108      	movs	r1, #8
    9460:	4408      	add	r0, r1
    9462:	f00e fad5 	bl	17a10 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9466:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    946a:	4602      	mov	r2, r0
    946c:	07d9      	lsls	r1, r3, #31
    946e:	d543      	bpl.n	94f8 <bt_init+0x418>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9470:	a13f      	add	r1, pc, #252	; (adr r1, 9570 <bt_init+0x490>)
    9472:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    9476:	f015 f954 	bl	1e722 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    947a:	4621      	mov	r1, r4
    947c:	2200      	movs	r2, #0
    947e:	f640 4001 	movw	r0, #3073	; 0xc01
    9482:	f005 fe27 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    9486:	4604      	mov	r4, r0
    9488:	2800      	cmp	r0, #0
    948a:	f47f aee6 	bne.w	925a <bt_init+0x17a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    948e:	4601      	mov	r1, r0
    9490:	aa01      	add	r2, sp, #4
    9492:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9496:	f005 fe1d 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    949a:	4604      	mov	r4, r0
    949c:	b380      	cbz	r0, 9500 <bt_init+0x420>
		BT_WARN("Vendor HCI extensions not available");
    949e:	2157      	movs	r1, #87	; 0x57
    94a0:	4837      	ldr	r0, [pc, #220]	; (9580 <bt_init+0x4a0>)
			BT_WARN("Failed to read supported vendor features");
    94a2:	f013 fb35 	bl	1cb10 <printk>
		err = bt_conn_init();
    94a6:	f008 fd8b 	bl	11fc0 <bt_conn_init>
		if (err) {
    94aa:	4604      	mov	r4, r0
    94ac:	2800      	cmp	r0, #0
    94ae:	f47f aed4 	bne.w	925a <bt_init+0x17a>
		if (!bt_dev.id_count) {
    94b2:	79eb      	ldrb	r3, [r5, #7]
    94b4:	2b00      	cmp	r3, #0
    94b6:	d154      	bne.n	9562 <bt_init+0x482>
			BT_INFO("No ID address. App must call settings_load()");
    94b8:	2149      	movs	r1, #73	; 0x49
    94ba:	4832      	ldr	r0, [pc, #200]	; (9584 <bt_init+0x4a4>)
    94bc:	f013 fb28 	bl	1cb10 <printk>
			return 0;
    94c0:	e6cb      	b.n	925a <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    94c2:	2102      	movs	r1, #2
    94c4:	f640 406d 	movw	r0, #3181	; 0xc6d
    94c8:	f005 fdba 	bl	f040 <bt_hci_cmd_create>
		if (!buf) {
    94cc:	4604      	mov	r4, r0
    94ce:	2800      	cmp	r0, #0
    94d0:	f43f ae95 	beq.w	91fe <bt_init+0x11e>
    94d4:	2102      	movs	r1, #2
    94d6:	3008      	adds	r0, #8
    94d8:	f00e fa9a 	bl	17a10 <net_buf_simple_add>
		cp_le->le = 0x01;
    94dc:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    94de:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    94e0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    94e2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    94e4:	4632      	mov	r2, r6
    94e6:	f640 406d 	movw	r0, #3181	; 0xc6d
    94ea:	f005 fdf3 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    94ee:	4604      	mov	r4, r0
    94f0:	2800      	cmp	r0, #0
    94f2:	f43f aef3 	beq.w	92dc <bt_init+0x1fc>
    94f6:	e6b0      	b.n	925a <bt_init+0x17a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    94f8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    94fc:	4822      	ldr	r0, [pc, #136]	; (9588 <bt_init+0x4a8>)
    94fe:	e7ba      	b.n	9476 <bt_init+0x396>
	net_buf_unref(rsp);
    9500:	9801      	ldr	r0, [sp, #4]
    9502:	f00e f96f 	bl	177e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9506:	4621      	mov	r1, r4
    9508:	f64f 4002 	movw	r0, #64514	; 0xfc02
    950c:	aa01      	add	r2, sp, #4
    950e:	f005 fde1 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    9512:	4604      	mov	r4, r0
    9514:	b110      	cbz	r0, 951c <bt_init+0x43c>
		BT_WARN("Failed to read supported vendor commands");
    9516:	2157      	movs	r1, #87	; 0x57
    9518:	481c      	ldr	r0, [pc, #112]	; (958c <bt_init+0x4ac>)
    951a:	e7c2      	b.n	94a2 <bt_init+0x3c2>
	rp.cmds = (void *)rsp->data;
    951c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    951e:	2202      	movs	r2, #2
    9520:	6899      	ldr	r1, [r3, #8]
    9522:	481b      	ldr	r0, [pc, #108]	; (9590 <bt_init+0x4b0>)
    9524:	3101      	adds	r1, #1
    9526:	f014 ffab 	bl	1e480 <memcpy>
	net_buf_unref(rsp);
    952a:	9801      	ldr	r0, [sp, #4]
    952c:	f00e f95a 	bl	177e4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9530:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    9534:	075b      	lsls	r3, r3, #29
    9536:	d5b6      	bpl.n	94a6 <bt_init+0x3c6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9538:	4621      	mov	r1, r4
    953a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    953e:	aa01      	add	r2, sp, #4
    9540:	f005 fdc8 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    9544:	b110      	cbz	r0, 954c <bt_init+0x46c>
			BT_WARN("Failed to read supported vendor features");
    9546:	2157      	movs	r1, #87	; 0x57
    9548:	4812      	ldr	r0, [pc, #72]	; (9594 <bt_init+0x4b4>)
    954a:	e7aa      	b.n	94a2 <bt_init+0x3c2>
		memcpy(bt_dev.vs_features, rp.feat->features,
    954c:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    954e:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9550:	4811      	ldr	r0, [pc, #68]	; (9598 <bt_init+0x4b8>)
    9552:	6899      	ldr	r1, [r3, #8]
    9554:	4411      	add	r1, r2
    9556:	f014 ff93 	bl	1e480 <memcpy>
		net_buf_unref(rsp);
    955a:	9801      	ldr	r0, [sp, #4]
    955c:	f00e f942 	bl	177e4 <net_buf_unref>
    9560:	e7a1      	b.n	94a6 <bt_init+0x3c6>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9562:	2104      	movs	r1, #4
    9564:	480d      	ldr	r0, [pc, #52]	; (959c <bt_init+0x4bc>)
    9566:	f015 f8a4 	bl	1e6b2 <atomic_or>
	bt_finalize_init();
    956a:	f006 ffc5 	bl	104f8 <bt_finalize_init>
	return 0;
    956e:	e674      	b.n	925a <bt_init+0x17a>
    9570:	02008890 	.word	0x02008890
    9574:	20008000 	.word	0x20008000
    9578:	20008098 	.word	0x20008098
    957c:	200080c8 	.word	0x200080c8
    9580:	000248f5 	.word	0x000248f5
    9584:	0002497a 	.word	0x0002497a
    9588:	02008810 	.word	0x02008810
    958c:	0002491e 	.word	0x0002491e
    9590:	20008085 	.word	0x20008085
    9594:	0002494c 	.word	0x0002494c
    9598:	20008084 	.word	0x20008084
    959c:	20008094 	.word	0x20008094

000095a0 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    95a0:	b500      	push	{lr}
	printk("Application start\n");
    95a2:	4807      	ldr	r0, [pc, #28]	; (95c0 <main+0x20>)
{
    95a4:	b093      	sub	sp, #76	; 0x4c
	printk("Application start\n");
    95a6:	f013 fab3 	bl	1cb10 <printk>
	// create a new device manager
	deviceManager dManager;
    95aa:	4668      	mov	r0, sp
    95ac:	f000 f9b4 	bl	9918 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    95b0:	2201      	movs	r2, #1
    95b2:	4668      	mov	r0, sp
    95b4:	4611      	mov	r1, r2
    95b6:	f000 fafd 	bl	9bb4 <_ZN13deviceManager9setDeviceEbb>
    95ba:	b013      	add	sp, #76	; 0x4c
    95bc:	f85d fb04 	ldr.w	pc, [sp], #4
    95c0:	00022874 	.word	0x00022874

000095c4 <_ZN13deviceManager13app_button_cbEv>:
/*
 * button callback method
 */
bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    95c4:	4b01      	ldr	r3, [pc, #4]	; (95cc <_ZN13deviceManager13app_button_cbEv+0x8>)
    95c6:	7818      	ldrb	r0, [r3, #0]
    95c8:	4770      	bx	lr
    95ca:	bf00      	nop
    95cc:	2000b086 	.word	0x2000b086

000095d0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
 * callback method
 * called when while discovering an error appears
 */
void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    95d0:	4801      	ldr	r0, [pc, #4]	; (95d8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    95d2:	f013 ba9d 	b.w	1cb10 <printk>
    95d6:	bf00      	nop
    95d8:	00022887 	.word	0x00022887

000095dc <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    95dc:	b513      	push	{r0, r1, r4, lr}
    95de:	4604      	mov	r4, r0
	printk("Service not found!\n");
    95e0:	4815      	ldr	r0, [pc, #84]	; (9638 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x5c>)
    95e2:	f013 fa95 	bl	1cb10 <printk>
	error[0] = 10;
    95e6:	230a      	movs	r3, #10
    95e8:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    95ec:	4b13      	ldr	r3, [pc, #76]	; (963c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x60>)
    95ee:	2201      	movs	r2, #1
    95f0:	6818      	ldr	r0, [r3, #0]
    95f2:	a901      	add	r1, sp, #4
    95f4:	f000 fd1a 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
	if (cnt < 2)
    95f8:	4a11      	ldr	r2, [pc, #68]	; (9640 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x64>)
    95fa:	7813      	ldrb	r3, [r2, #0]
    95fc:	2b01      	cmp	r3, #1
    95fe:	d814      	bhi.n	962a <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x4e>
		cnt++;
    9600:	3301      	adds	r3, #1
    9602:	7013      	strb	r3, [r2, #0]
		printk("nbr central connections: %d\n", nbrConnectionsCentral);
    9604:	4b0f      	ldr	r3, [pc, #60]	; (9644 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x68>)
    9606:	4810      	ldr	r0, [pc, #64]	; (9648 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x6c>)
    9608:	7819      	ldrb	r1, [r3, #0]
    960a:	f013 fa81 	bl	1cb10 <printk>
		err = bt_gatt_dm_start(conn, BT_UUID_CSC, &discovery_cb, NULL);
    960e:	490f      	ldr	r1, [pc, #60]	; (964c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x70>)
    9610:	2300      	movs	r3, #0
    9612:	4620      	mov	r0, r4
    9614:	4a0e      	ldr	r2, [pc, #56]	; (9650 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x74>)
    9616:	f003 fbbb 	bl	cd90 <bt_gatt_dm_start>
		if (err) 
    961a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    961e:	d002      	beq.n	9626 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x4a>
			printk("Could not start service discovery, err %d\n", err);
    9620:	480c      	ldr	r0, [pc, #48]	; (9654 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x78>)
    9622:	f013 fa75 	bl	1cb10 <printk>
}
    9626:	b002      	add	sp, #8
    9628:	bd10      	pop	{r4, pc}
		cnt = 0;
    962a:	2300      	movs	r3, #0
		printk("Service definitly not found -> Restart application\n");
    962c:	480a      	ldr	r0, [pc, #40]	; (9658 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x7c>)
		cnt = 0;
    962e:	7013      	strb	r3, [r2, #0]
		printk("Service definitly not found -> Restart application\n");
    9630:	f013 fa6e 	bl	1cb10 <printk>
}
    9634:	e7f7      	b.n	9626 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x4a>
    9636:	bf00      	nop
    9638:	000228af 	.word	0x000228af
    963c:	200096f0 	.word	0x200096f0
    9640:	2000b08b 	.word	0x2000b08b
    9644:	2000b088 	.word	0x2000b088
    9648:	000228c3 	.word	0x000228c3
    964c:	000227d4 	.word	0x000227d4
    9650:	20008160 	.word	0x20008160
    9654:	000228e0 	.word	0x000228e0
    9658:	0002290b 	.word	0x0002290b

0000965c <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    965c:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    965e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9660:	d507      	bpl.n	9672 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9662:	1e04      	subs	r4, r0, #0
    9664:	bf18      	it	ne
    9666:	2401      	movne	r4, #1
    9668:	4620      	mov	r0, r4
    966a:	f003 ff49 	bl	d500 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    966e:	4b01      	ldr	r3, [pc, #4]	; (9674 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9670:	701c      	strb	r4, [r3, #0]
}
    9672:	bd10      	pop	{r4, pc}
    9674:	2000b086 	.word	0x2000b086

00009678 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
 * callback method
 * called every second with data
 */
uint8_t deviceManager::onReceived(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params,
			const void *data, uint16_t length) {
    9678:	b513      	push	{r0, r1, r4, lr}
    967a:	4611      	mov	r1, r2

	// start calculating and showing data only when all characteristics are subscribed
	if (subscriptionDone)
    967c:	4a31      	ldr	r2, [pc, #196]	; (9744 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    967e:	7812      	ldrb	r2, [r2, #0]
    9680:	2a00      	cmp	r2, #0
    9682:	d034      	beq.n	96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
	{
		if (length > 0)
    9684:	2b00      	cmp	r3, #0
    9686:	d032      	beq.n	96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
		{
			// save the new received data
			deviceManager::data.saveData(data);
    9688:	4c2f      	ldr	r4, [pc, #188]	; (9748 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    968a:	4620      	mov	r0, r4
    968c:	f000 fc48 	bl	9f20 <_ZN7dataCSC8saveDataEPKv>

			uint8_t val_after_comma;
			uint8_t dataToSend[3];

			if (getDiameter() != 0 && diameterSet == false)
    9690:	f000 fcf6 	bl	a080 <_Z11getDiameterv>
    9694:	2200      	movs	r2, #0
    9696:	2300      	movs	r3, #0
    9698:	f7ff f9f6 	bl	8a88 <__aeabi_dcmpeq>
    969c:	bb50      	cbnz	r0, 96f4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    969e:	4b2b      	ldr	r3, [pc, #172]	; (974c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    96a0:	781a      	ldrb	r2, [r3, #0]
    96a2:	bb3a      	cbnz	r2, 96f4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
			{
				diameterSet = true;
    96a4:	2201      	movs	r2, #1
    96a6:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    96a8:	f000 fcea 	bl	a080 <_Z11getDiameterv>
    96ac:	e9c4 0106 	strd	r0, r1, [r4, #24]
			{
				// reset button was pressed
				diameterSet = false;
			}
			
			if (deviceManager::data.type == CSC_SPEED)
    96b0:	7c24      	ldrb	r4, [r4, #16]
    96b2:	2c01      	cmp	r4, #1
    96b4:	d12d      	bne.n	9712 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
			{
				// calculate speed
				if (diameterSet)
    96b6:	4b25      	ldr	r3, [pc, #148]	; (974c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	b1c3      	cbz	r3, 96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				{
					uint16_t speed = deviceManager::data.calcSpeed();
    96bc:	4822      	ldr	r0, [pc, #136]	; (9748 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    96be:	f7ff fbc3 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>

					if (speed > 0)
    96c2:	b1a0      	cbz	r0, 96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					{
						// 1. value: type -> speed
						// 2. value: 8 bit on the left side of comma
						// 3. value: 8 bit on the right side of comma
						dataToSend[0] = CSC_SPEED;
						dataToSend[1] = (uint8_t) (speed/100);	
    96c4:	2164      	movs	r1, #100	; 0x64
    96c6:	fbb0 f1f1 	udiv	r1, r0, r1
						dataToSend[0] = CSC_SPEED;
    96ca:	f88d 4004 	strb.w	r4, [sp, #4]
						val_after_comma = (uint8_t) (speed);
						dataToSend[2] = val_after_comma;

						if (peripheralConn != nullptr)
    96ce:	4c20      	ldr	r4, [pc, #128]	; (9750 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[1] = (uint8_t) (speed/100);	
    96d0:	b289      	uxth	r1, r1
						if (peripheralConn != nullptr)
    96d2:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) (speed/100);	
    96d4:	f88d 1005 	strb.w	r1, [sp, #5]
						val_after_comma = (uint8_t) (speed);
    96d8:	f88d 0006 	strb.w	r0, [sp, #6]
						if (peripheralConn != nullptr)
    96dc:	b13b      	cbz	r3, 96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						{	
							printk("Speed: %d\n",speed/100);
    96de:	481d      	ldr	r0, [pc, #116]	; (9754 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
						dataToSend[0] = CSC_CADENCE;	
						dataToSend[1] = (uint8_t) rpm;
						dataToSend[2] = (uint8_t) (rpm >> 8);	
						if (peripheralConn != nullptr)
						{
							printk("Cadence rpm: %d\n",rpm);
    96e0:	f013 fa16 	bl	1cb10 <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    96e4:	2203      	movs	r2, #3
    96e6:	6820      	ldr	r0, [r4, #0]
    96e8:	a901      	add	r1, sp, #4
    96ea:	f000 fc9f 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
				}
			}
		}
	}
	return BT_GATT_ITER_CONTINUE;
}
    96ee:	2001      	movs	r0, #1
    96f0:	b002      	add	sp, #8
    96f2:	bd10      	pop	{r4, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    96f4:	f000 fcc4 	bl	a080 <_Z11getDiameterv>
    96f8:	2200      	movs	r2, #0
    96fa:	2300      	movs	r3, #0
    96fc:	f7ff f9c4 	bl	8a88 <__aeabi_dcmpeq>
    9700:	2800      	cmp	r0, #0
    9702:	d0d5      	beq.n	96b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    9704:	4b11      	ldr	r3, [pc, #68]	; (974c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9706:	781a      	ldrb	r2, [r3, #0]
    9708:	2a00      	cmp	r2, #0
    970a:	d0d1      	beq.n	96b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
				diameterSet = false;
    970c:	2200      	movs	r2, #0
    970e:	701a      	strb	r2, [r3, #0]
    9710:	e7ce      	b.n	96b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
			else if (deviceManager::data.type == CSC_CADENCE)
    9712:	2c02      	cmp	r4, #2
    9714:	d1eb      	bne.n	96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				if (diameterSet)
    9716:	4b0d      	ldr	r3, [pc, #52]	; (974c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9718:	781b      	ldrb	r3, [r3, #0]
    971a:	2b00      	cmp	r3, #0
    971c:	d0e7      	beq.n	96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t rpm = deviceManager::data.calcRPM();
    971e:	480a      	ldr	r0, [pc, #40]	; (9748 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9720:	f000 fc20 	bl	9f64 <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0)
    9724:	4601      	mov	r1, r0
    9726:	2800      	cmp	r0, #0
    9728:	d0e1      	beq.n	96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[0] = CSC_CADENCE;	
    972a:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    972e:	4c08      	ldr	r4, [pc, #32]	; (9750 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    9730:	0a03      	lsrs	r3, r0, #8
    9732:	f88d 3006 	strb.w	r3, [sp, #6]
						if (peripheralConn != nullptr)
    9736:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    9738:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    973c:	2b00      	cmp	r3, #0
    973e:	d0d6      	beq.n	96ee <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Cadence rpm: %d\n",rpm);
    9740:	4805      	ldr	r0, [pc, #20]	; (9758 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    9742:	e7cd      	b.n	96e0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
    9744:	2000b087 	.word	0x2000b087
    9748:	200086d0 	.word	0x200086d0
    974c:	2000b083 	.word	0x2000b083
    9750:	200096f0 	.word	0x200096f0
    9754:	0002293f 	.word	0x0002293f
    9758:	0002294a 	.word	0x0002294a

0000975c <bt_addr_le_to_str.constprop.0.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    975c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    975e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9760:	b08a      	sub	sp, #40	; 0x28
    9762:	4604      	mov	r4, r0
    9764:	460e      	mov	r6, r1
    9766:	ad07      	add	r5, sp, #28
    9768:	2b03      	cmp	r3, #3
    976a:	d820      	bhi.n	97ae <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    976c:	e8df f003 	tbb	[pc, r3]
    9770:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9774:	4911      	ldr	r1, [pc, #68]	; (97bc <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9776:	4628      	mov	r0, r5
    9778:	f014 fe28 	bl	1e3cc <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    977c:	7863      	ldrb	r3, [r4, #1]
    977e:	211e      	movs	r1, #30
    9780:	9304      	str	r3, [sp, #16]
    9782:	78a3      	ldrb	r3, [r4, #2]
    9784:	4630      	mov	r0, r6
    9786:	9303      	str	r3, [sp, #12]
    9788:	78e3      	ldrb	r3, [r4, #3]
    978a:	4a0d      	ldr	r2, [pc, #52]	; (97c0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    978c:	9302      	str	r3, [sp, #8]
    978e:	7923      	ldrb	r3, [r4, #4]
    9790:	9505      	str	r5, [sp, #20]
    9792:	9301      	str	r3, [sp, #4]
    9794:	7963      	ldrb	r3, [r4, #5]
    9796:	9300      	str	r3, [sp, #0]
    9798:	79a3      	ldrb	r3, [r4, #6]
    979a:	f013 f9c6 	bl	1cb2a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    979e:	b00a      	add	sp, #40	; 0x28
    97a0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    97a2:	4908      	ldr	r1, [pc, #32]	; (97c4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    97a4:	e7e7      	b.n	9776 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    97a6:	4908      	ldr	r1, [pc, #32]	; (97c8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    97a8:	e7e5      	b.n	9776 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    97aa:	4908      	ldr	r1, [pc, #32]	; (97cc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    97ac:	e7e3      	b.n	9776 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    97ae:	210a      	movs	r1, #10
    97b0:	4628      	mov	r0, r5
    97b2:	4a07      	ldr	r2, [pc, #28]	; (97d0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    97b4:	f013 f9b9 	bl	1cb2a <snprintk>
		break;
    97b8:	e7e0      	b.n	977c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    97ba:	bf00      	nop
    97bc:	0002295b 	.word	0x0002295b
    97c0:	00022984 	.word	0x00022984
    97c4:	00022962 	.word	0x00022962
    97c8:	00022969 	.word	0x00022969
    97cc:	00022973 	.word	0x00022973
    97d0:	0002297d 	.word	0x0002297d

000097d4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    97d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    97d6:	b089      	sub	sp, #36	; 0x24
    97d8:	4605      	mov	r5, r0
    97da:	4617      	mov	r7, r2
	nbrAddresses = getNbrOfAddresses();
    97dc:	f000 fc56 	bl	a08c <_Z17getNbrOfAddressesv>
    97e0:	4b3d      	ldr	r3, [pc, #244]	; (98d8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x104>)
    97e2:	4604      	mov	r4, r0
    97e4:	4e3d      	ldr	r6, [pc, #244]	; (98dc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x108>)
    97e6:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    97e8:	2800      	cmp	r0, #0
    97ea:	d073      	beq.n	98d4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x100>
		ready = true;
    97ec:	2101      	movs	r1, #1
		switch (nbrAddresses)
    97ee:	2802      	cmp	r0, #2
		ready = true;
    97f0:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    97f2:	d05f      	beq.n	98b4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe0>
    97f4:	2803      	cmp	r0, #3
    97f6:	d063      	beq.n	98c0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xec>
    97f8:	4288      	cmp	r0, r1
    97fa:	d103      	bne.n	9804 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x30>
			getAddress(sensor1,1);
    97fc:	4601      	mov	r1, r0
    97fe:	4838      	ldr	r0, [pc, #224]	; (98e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10c>)
			getAddress(sensor2,2);
    9800:	f000 fc4a 	bl	a098 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9804:	682b      	ldr	r3, [r5, #0]
    9806:	4669      	mov	r1, sp
    9808:	6818      	ldr	r0, [r3, #0]
    980a:	f7ff ffa7 	bl	975c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
    980e:	4b35      	ldr	r3, [pc, #212]	; (98e4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    9810:	4a35      	ldr	r2, [pc, #212]	; (98e8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    9812:	4669      	mov	r1, sp
    9814:	2f00      	cmp	r7, #0
    9816:	bf08      	it	eq
    9818:	461a      	moveq	r2, r3
    981a:	4834      	ldr	r0, [pc, #208]	; (98ec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    981c:	f013 f978 	bl	1cb10 <printk>
	if (ready)
    9820:	7833      	ldrb	r3, [r6, #0]
    9822:	2b00      	cmp	r3, #0
    9824:	d044      	beq.n	98b0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xdc>
		if ((strstr(addr,sensor1)) && once_sensor1)
    9826:	4668      	mov	r0, sp
    9828:	492d      	ldr	r1, [pc, #180]	; (98e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10c>)
    982a:	f014 fdaf 	bl	1e38c <strstr>
    982e:	b188      	cbz	r0, 9854 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x80>
    9830:	4b2f      	ldr	r3, [pc, #188]	; (98f0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9832:	781a      	ldrb	r2, [r3, #0]
    9834:	b172      	cbz	r2, 9854 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x80>
			once_sensor1 = false;
    9836:	2200      	movs	r2, #0
    9838:	701a      	strb	r2, [r3, #0]
			bt_scan_stop();
    983a:	f014 f868 	bl	1d90e <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    983e:	4b2d      	ldr	r3, [pc, #180]	; (98f4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9840:	6828      	ldr	r0, [r5, #0]
    9842:	781a      	ldrb	r2, [r3, #0]
    9844:	4b2c      	ldr	r3, [pc, #176]	; (98f8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9846:	492d      	ldr	r1, [pc, #180]	; (98fc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9848:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    984c:	6800      	ldr	r0, [r0, #0]
    984e:	686a      	ldr	r2, [r5, #4]
    9850:	f008 f8e8 	bl	11a24 <bt_conn_le_create>
		if ((strstr(addr,sensor2)) && once_sensor2)
    9854:	4668      	mov	r0, sp
    9856:	492a      	ldr	r1, [pc, #168]	; (9900 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9858:	f014 fd98 	bl	1e38c <strstr>
    985c:	b188      	cbz	r0, 9882 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xae>
    985e:	4b29      	ldr	r3, [pc, #164]	; (9904 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9860:	781a      	ldrb	r2, [r3, #0]
    9862:	b172      	cbz	r2, 9882 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xae>
			once_sensor2 = false;
    9864:	2200      	movs	r2, #0
    9866:	701a      	strb	r2, [r3, #0]
			bt_scan_stop();
    9868:	f014 f851 	bl	1d90e <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    986c:	4b21      	ldr	r3, [pc, #132]	; (98f4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    986e:	6828      	ldr	r0, [r5, #0]
    9870:	781a      	ldrb	r2, [r3, #0]
    9872:	4b21      	ldr	r3, [pc, #132]	; (98f8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9874:	4924      	ldr	r1, [pc, #144]	; (9908 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9876:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    987a:	6800      	ldr	r0, [r0, #0]
    987c:	686a      	ldr	r2, [r5, #4]
    987e:	f008 f8d1 	bl	11a24 <bt_conn_le_create>
		if ((strstr(addr,sensor3) && once_sensor3))
    9882:	4668      	mov	r0, sp
    9884:	4921      	ldr	r1, [pc, #132]	; (990c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9886:	f014 fd81 	bl	1e38c <strstr>
    988a:	b188      	cbz	r0, 98b0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xdc>
    988c:	4b20      	ldr	r3, [pc, #128]	; (9910 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    988e:	781a      	ldrb	r2, [r3, #0]
    9890:	b172      	cbz	r2, 98b0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xdc>
			once_sensor3 = false;
    9892:	2200      	movs	r2, #0
    9894:	701a      	strb	r2, [r3, #0]
			bt_scan_stop();
    9896:	f014 f83a 	bl	1d90e <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    989a:	4b16      	ldr	r3, [pc, #88]	; (98f4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    989c:	6828      	ldr	r0, [r5, #0]
    989e:	781a      	ldrb	r2, [r3, #0]
    98a0:	4b15      	ldr	r3, [pc, #84]	; (98f8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    98a2:	491c      	ldr	r1, [pc, #112]	; (9914 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    98a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    98a8:	6800      	ldr	r0, [r0, #0]
    98aa:	686a      	ldr	r2, [r5, #4]
    98ac:	f008 f8ba 	bl	11a24 <bt_conn_le_create>
}
    98b0:	b009      	add	sp, #36	; 0x24
    98b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			getAddress(sensor1,1);
    98b4:	480a      	ldr	r0, [pc, #40]	; (98e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10c>)
    98b6:	f000 fbef 	bl	a098 <_Z10getAddressPch>
			getAddress(sensor2,2);
    98ba:	4621      	mov	r1, r4
    98bc:	4810      	ldr	r0, [pc, #64]	; (9900 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    98be:	e79f      	b.n	9800 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2c>
			getAddress(sensor1,1);
    98c0:	4807      	ldr	r0, [pc, #28]	; (98e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10c>)
    98c2:	f000 fbe9 	bl	a098 <_Z10getAddressPch>
			getAddress(sensor2,2);
    98c6:	2102      	movs	r1, #2
    98c8:	480d      	ldr	r0, [pc, #52]	; (9900 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    98ca:	f000 fbe5 	bl	a098 <_Z10getAddressPch>
			getAddress(sensor3,3);
    98ce:	4621      	mov	r1, r4
    98d0:	480e      	ldr	r0, [pc, #56]	; (990c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    98d2:	e795      	b.n	9800 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2c>
		ready = false;
    98d4:	7030      	strb	r0, [r6, #0]
    98d6:	e795      	b.n	9804 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x30>
    98d8:	2000b085 	.word	0x2000b085
    98dc:	2000b08a 	.word	0x2000b08a
    98e0:	2000b04e 	.word	0x2000b04e
    98e4:	000229ab 	.word	0x000229ab
    98e8:	000229a7 	.word	0x000229a7
    98ec:	000229ae 	.word	0x000229ae
    98f0:	20008431 	.word	0x20008431
    98f4:	2000b088 	.word	0x2000b088
    98f8:	200096f4 	.word	0x200096f4
    98fc:	00021dbc 	.word	0x00021dbc
    9900:	2000b05f 	.word	0x2000b05f
    9904:	20008432 	.word	0x20008432
    9908:	00021dcc 	.word	0x00021dcc
    990c:	2000b070 	.word	0x2000b070
    9910:	20008433 	.word	0x20008433
    9914:	00021ddc 	.word	0x00021ddc

00009918 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9918:	b510      	push	{r4, lr}
    991a:	221c      	movs	r2, #28
    991c:	4604      	mov	r4, r0
    991e:	2100      	movs	r1, #0
    9920:	f014 fdd9 	bl	1e4d6 <memset>
    9924:	4a0d      	ldr	r2, [pc, #52]	; (995c <_ZN13deviceManagerC1Ev+0x44>)
    9926:	4b0e      	ldr	r3, [pc, #56]	; (9960 <_ZN13deviceManagerC1Ev+0x48>)
    9928:	e892 0003 	ldmia.w	r2, {r0, r1}
    992c:	2224      	movs	r2, #36	; 0x24
    992e:	6023      	str	r3, [r4, #0]
    9930:	4b0c      	ldr	r3, [pc, #48]	; (9964 <_ZN13deviceManagerC1Ev+0x4c>)
    9932:	6063      	str	r3, [r4, #4]
    9934:	f104 031c 	add.w	r3, r4, #28
    9938:	e883 0003 	stmia.w	r3, {r0, r1}
    993c:	18a0      	adds	r0, r4, r2
    993e:	2100      	movs	r1, #0
    9940:	f014 fdc9 	bl	1e4d6 <memset>
		centralConnections[i] = nullptr;
    9944:	2300      	movs	r3, #0
    9946:	4a08      	ldr	r2, [pc, #32]	; (9968 <_ZN13deviceManagerC1Ev+0x50>)
}
    9948:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    994a:	e9c2 3300 	strd	r3, r3, [r2]
    994e:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    9952:	4a06      	ldr	r2, [pc, #24]	; (996c <_ZN13deviceManagerC1Ev+0x54>)
    9954:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9956:	4a06      	ldr	r2, [pc, #24]	; (9970 <_ZN13deviceManagerC1Ev+0x58>)
    9958:	7013      	strb	r3, [r2, #0]
}
    995a:	bd10      	pop	{r4, pc}
    995c:	00021cd0 	.word	0x00021cd0
    9960:	00009bf9 	.word	0x00009bf9
    9964:	00009cd5 	.word	0x00009cd5
    9968:	200096f4 	.word	0x200096f4
    996c:	2000b082 	.word	0x2000b082
    9970:	2000b081 	.word	0x2000b081

00009974 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    9974:	4a07      	ldr	r2, [pc, #28]	; (9994 <_ZN13deviceManager9getDeviceEv+0x20>)
    9976:	4b08      	ldr	r3, [pc, #32]	; (9998 <_ZN13deviceManager9getDeviceEv+0x24>)
    9978:	7812      	ldrb	r2, [r2, #0]
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	b122      	cbz	r2, 9988 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    997e:	2b00      	cmp	r3, #0
    9980:	bf14      	ite	ne
    9982:	2003      	movne	r0, #3
    9984:	2001      	moveq	r0, #1
    9986:	4770      	bx	lr
        return 0;
    9988:	2b00      	cmp	r3, #0
    998a:	bf14      	ite	ne
    998c:	2002      	movne	r0, #2
    998e:	2000      	moveq	r0, #0
}
    9990:	4770      	bx	lr
    9992:	bf00      	nop
    9994:	2000b089 	.word	0x2000b089
    9998:	2000b084 	.word	0x2000b084

0000999c <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    999c:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    999e:	4805      	ldr	r0, [pc, #20]	; (99b4 <_ZN13deviceManager10initButtonEv+0x18>)
    99a0:	f00f f8da 	bl	18b58 <dk_buttons_init>
	if (err) {
    99a4:	4604      	mov	r4, r0
    99a6:	b118      	cbz	r0, 99b0 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    99a8:	4601      	mov	r1, r0
    99aa:	4803      	ldr	r0, [pc, #12]	; (99b8 <_ZN13deviceManager10initButtonEv+0x1c>)
    99ac:	f013 f8b0 	bl	1cb10 <printk>
}
    99b0:	4620      	mov	r0, r4
    99b2:	bd10      	pop	{r4, pc}
    99b4:	0000965d 	.word	0x0000965d
    99b8:	000229dc 	.word	0x000229dc

000099bc <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    99bc:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    99be:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    99c0:	490b      	ldr	r1, [pc, #44]	; (99f0 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    99c2:	9300      	str	r3, [sp, #0]
    99c4:	2202      	movs	r2, #2
    99c6:	4b0b      	ldr	r3, [pc, #44]	; (99f4 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    99c8:	480b      	ldr	r0, [pc, #44]	; (99f8 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    99ca:	f007 f847 	bl	10a5c <bt_le_adv_start>
	if (err) {
    99ce:	4601      	mov	r1, r0
    99d0:	b128      	cbz	r0, 99de <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    99d2:	480a      	ldr	r0, [pc, #40]	; (99fc <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    99d4:	b003      	add	sp, #12
    99d6:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    99da:	f013 b899 	b.w	1cb10 <printk>
	printk("Advertising successfully started\n");
    99de:	4808      	ldr	r0, [pc, #32]	; (9a00 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    99e0:	f013 f896 	bl	1cb10 <printk>
	printk("Waiting for connection...\n");
    99e4:	4807      	ldr	r0, [pc, #28]	; (9a04 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    99e6:	b003      	add	sp, #12
    99e8:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    99ec:	f013 b890 	b.w	1cb10 <printk>
    99f0:	00021e28 	.word	0x00021e28
    99f4:	00021e38 	.word	0x00021e38
    99f8:	00021da8 	.word	0x00021da8
    99fc:	000229fb 	.word	0x000229fb
    9a00:	00022a21 	.word	0x00022a21
    9a04:	00022a43 	.word	0x00022a43

00009a08 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    9a08:	b510      	push	{r4, lr}
    9a0a:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9a0c:	f7ff ffb2 	bl	9974 <_ZN13deviceManager9getDeviceEv>
    9a10:	1e83      	subs	r3, r0, #2
    9a12:	b2db      	uxtb	r3, r3
    9a14:	2b01      	cmp	r3, #1
    9a16:	d82d      	bhi.n	9a74 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    9a18:	f00f f838 	bl	18a8c <dk_leds_init>
        if (err) {
    9a1c:	4601      	mov	r1, r0
    9a1e:	b120      	cbz	r0, 9a2a <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    9a20:	4815      	ldr	r0, [pc, #84]	; (9a78 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    9a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    9a26:	f013 b873 	b.w	1cb10 <printk>
        err = initButton();
    9a2a:	f7ff ffb7 	bl	999c <_ZN13deviceManager10initButtonEv>
    9a2e:	4601      	mov	r1, r0
        if (err) {
    9a30:	b108      	cbz	r0, 9a36 <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    9a32:	4812      	ldr	r0, [pc, #72]	; (9a7c <_ZN13deviceManager14initPeripheralEv+0x74>)
    9a34:	e7f5      	b.n	9a22 <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    9a36:	f006 fd77 	bl	10528 <bt_enable>
        if (err) {
    9a3a:	4601      	mov	r1, r0
    9a3c:	b108      	cbz	r0, 9a42 <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    9a3e:	4810      	ldr	r0, [pc, #64]	; (9a80 <_ZN13deviceManager14initPeripheralEv+0x78>)
    9a40:	e7ef      	b.n	9a22 <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    9a42:	4810      	ldr	r0, [pc, #64]	; (9a84 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9a44:	f013 f864 	bl	1cb10 <printk>
		bt_conn_cb_register(&conn_callbacks);
    9a48:	4620      	mov	r0, r4
    9a4a:	f007 fcc5 	bl	113d8 <bt_conn_cb_register>
            settings_load();
    9a4e:	f013 fcef 	bl	1d430 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    9a52:	f104 001c 	add.w	r0, r4, #28
    9a56:	f003 fd49 	bl	d4ec <bt_lbs_init>
        if (err) {
    9a5a:	4601      	mov	r1, r0
    9a5c:	b108      	cbz	r0, 9a62 <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    9a5e:	480a      	ldr	r0, [pc, #40]	; (9a88 <_ZN13deviceManager14initPeripheralEv+0x80>)
    9a60:	e7df      	b.n	9a22 <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    9a62:	f000 fad1 	bl	a008 <_Z17data_service_initv>
		if (err) 
    9a66:	4601      	mov	r1, r0
    9a68:	2800      	cmp	r0, #0
    9a6a:	d1f8      	bne.n	9a5e <_ZN13deviceManager14initPeripheralEv+0x56>
}
    9a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    9a70:	f7ff bfa4 	b.w	99bc <_ZN13deviceManager16startAdvertisingEv>
}
    9a74:	bd10      	pop	{r4, pc}
    9a76:	bf00      	nop
    9a78:	00022a5e 	.word	0x00022a5e
    9a7c:	00022a79 	.word	0x00022a79
    9a80:	00022a96 	.word	0x00022a96
    9a84:	00022ab6 	.word	0x00022ab6
    9a88:	00022acd 	.word	0x00022acd

00009a8c <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    9a8c:	b500      	push	{lr}
    9a8e:	b089      	sub	sp, #36	; 0x24
	struct bt_le_scan_param scanParam = {
    9a90:	ab03      	add	r3, sp, #12
    9a92:	2100      	movs	r1, #0
    9a94:	4618      	mov	r0, r3
    9a96:	2214      	movs	r2, #20
    9a98:	f014 fd1d 	bl	1e4d6 <memset>
    9a9c:	2201      	movs	r2, #1
    9a9e:	f88d 200c 	strb.w	r2, [sp, #12]
    9aa2:	9204      	str	r2, [sp, #16]
    9aa4:	4a0f      	ldr	r2, [pc, #60]	; (9ae4 <_ZN13deviceManager8initScanEv+0x58>)
	};
    9aa6:	9000      	str	r0, [sp, #0]
	struct bt_le_scan_param scanParam = {
    9aa8:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9aaa:	2200      	movs	r2, #0
    9aac:	9201      	str	r2, [sp, #4]
    9aae:	4a0e      	ldr	r2, [pc, #56]	; (9ae8 <_ZN13deviceManager8initScanEv+0x5c>)
	bt_scan_init(&scanInit);
    9ab0:	4668      	mov	r0, sp
	struct bt_scan_init_param scanInit = {
    9ab2:	9202      	str	r2, [sp, #8]
	bt_scan_init(&scanInit);
    9ab4:	f003 fca0 	bl	d3f8 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    9ab8:	480c      	ldr	r0, [pc, #48]	; (9aec <_ZN13deviceManager8initScanEv+0x60>)
    9aba:	f003 fb07 	bl	d0cc <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9abe:	490c      	ldr	r1, [pc, #48]	; (9af0 <_ZN13deviceManager8initScanEv+0x64>)
    9ac0:	2003      	movs	r0, #3
    9ac2:	f003 fb13 	bl	d0ec <bt_scan_filter_add>
	if (err) {
    9ac6:	4601      	mov	r1, r0
    9ac8:	b128      	cbz	r0, 9ad6 <_ZN13deviceManager8initScanEv+0x4a>
		printk("Scanning filters cannot be set\n");
    9aca:	480a      	ldr	r0, [pc, #40]	; (9af4 <_ZN13deviceManager8initScanEv+0x68>)
		printk("Filters cannot be turned on\n");
    9acc:	f013 f820 	bl	1cb10 <printk>
}
    9ad0:	b009      	add	sp, #36	; 0x24
    9ad2:	f85d fb04 	ldr.w	pc, [sp], #4
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9ad6:	2004      	movs	r0, #4
    9ad8:	f003 fb6c 	bl	d1b4 <bt_scan_filter_enable>
	if (err) {
    9adc:	2800      	cmp	r0, #0
    9ade:	d0f7      	beq.n	9ad0 <_ZN13deviceManager8initScanEv+0x44>
		printk("Filters cannot be turned on\n");
    9ae0:	4805      	ldr	r0, [pc, #20]	; (9af8 <_ZN13deviceManager8initScanEv+0x6c>)
    9ae2:	e7f3      	b.n	9acc <_ZN13deviceManager8initScanEv+0x40>
    9ae4:	00300060 	.word	0x00300060
    9ae8:	000227b8 	.word	0x000227b8
    9aec:	2000816c 	.word	0x2000816c
    9af0:	000227c0 	.word	0x000227c0
    9af4:	00022aea 	.word	0x00022aea
    9af8:	00022b0a 	.word	0x00022b0a

00009afc <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9afc:	2001      	movs	r0, #1
void deviceManager::startScan(){
    9afe:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9b00:	f003 fcac 	bl	d45c <bt_scan_start>
	if (err) {
    9b04:	4601      	mov	r1, r0
    9b06:	b110      	cbz	r0, 9b0e <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    9b08:	4803      	ldr	r0, [pc, #12]	; (9b18 <_ZN13deviceManager9startScanEv+0x1c>)
    9b0a:	f013 f801 	bl	1cb10 <printk>
}
    9b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    9b12:	4802      	ldr	r0, [pc, #8]	; (9b1c <_ZN13deviceManager9startScanEv+0x20>)
    9b14:	f012 bffc 	b.w	1cb10 <printk>
    9b18:	00022b27 	.word	0x00022b27
    9b1c:	00022b49 	.word	0x00022b49

00009b20 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9b20:	b510      	push	{r4, lr}
    9b22:	4604      	mov	r4, r0
	printk("Init Central\n");
    9b24:	481c      	ldr	r0, [pc, #112]	; (9b98 <_ZN13deviceManager11initCentralEv+0x78>)
    9b26:	f012 fff3 	bl	1cb10 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9b2a:	f7ff ff23 	bl	9974 <_ZN13deviceManager9getDeviceEv>
    9b2e:	2801      	cmp	r0, #1
    9b30:	d00a      	beq.n	9b48 <_ZN13deviceManager11initCentralEv+0x28>
    9b32:	2803      	cmp	r0, #3
    9b34:	d12f      	bne.n	9b96 <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    9b36:	4620      	mov	r0, r4
    9b38:	f007 fc4e 	bl	113d8 <bt_conn_cb_register>
		initScan();
    9b3c:	f7ff ffa6 	bl	9a8c <_ZN13deviceManager8initScanEv>
}
    9b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9b44:	f7ff bfda 	b.w	9afc <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9b48:	2000      	movs	r0, #0
    9b4a:	f006 fced 	bl	10528 <bt_enable>
			if (err) {
    9b4e:	4601      	mov	r1, r0
    9b50:	b120      	cbz	r0, 9b5c <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    9b52:	4812      	ldr	r0, [pc, #72]	; (9b9c <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9b58:	f012 bfda 	b.w	1cb10 <printk>
			printk("Bluetooth ready\n");
    9b5c:	4810      	ldr	r0, [pc, #64]	; (9ba0 <_ZN13deviceManager11initCentralEv+0x80>)
    9b5e:	f012 ffd7 	bl	1cb10 <printk>
			err = dk_leds_init();
    9b62:	f00e ff93 	bl	18a8c <dk_leds_init>
			if (err) {
    9b66:	4601      	mov	r1, r0
    9b68:	b108      	cbz	r0, 9b6e <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    9b6a:	480e      	ldr	r0, [pc, #56]	; (9ba4 <_ZN13deviceManager11initCentralEv+0x84>)
    9b6c:	e7f2      	b.n	9b54 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    9b6e:	f7ff ff15 	bl	999c <_ZN13deviceManager10initButtonEv>
			if (err) {
    9b72:	4601      	mov	r1, r0
    9b74:	b108      	cbz	r0, 9b7a <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    9b76:	480c      	ldr	r0, [pc, #48]	; (9ba8 <_ZN13deviceManager11initCentralEv+0x88>)
    9b78:	e7ec      	b.n	9b54 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    9b7a:	f104 001c 	add.w	r0, r4, #28
    9b7e:	f003 fcb5 	bl	d4ec <bt_lbs_init>
			if (err) {
    9b82:	4601      	mov	r1, r0
    9b84:	b108      	cbz	r0, 9b8a <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9b86:	4809      	ldr	r0, [pc, #36]	; (9bac <_ZN13deviceManager11initCentralEv+0x8c>)
    9b88:	e7e4      	b.n	9b54 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    9b8a:	f013 fc51 	bl	1d430 <settings_load>
				printk("Settings loaded\n");
    9b8e:	4808      	ldr	r0, [pc, #32]	; (9bb0 <_ZN13deviceManager11initCentralEv+0x90>)
    9b90:	f012 ffbe 	bl	1cb10 <printk>
    9b94:	e7cf      	b.n	9b36 <_ZN13deviceManager11initCentralEv+0x16>
}
    9b96:	bd10      	pop	{r4, pc}
    9b98:	00022b56 	.word	0x00022b56
    9b9c:	00022a96 	.word	0x00022a96
    9ba0:	00022b64 	.word	0x00022b64
    9ba4:	00022a5e 	.word	0x00022a5e
    9ba8:	00022a79 	.word	0x00022a79
    9bac:	00022acd 	.word	0x00022acd
    9bb0:	00022b75 	.word	0x00022b75

00009bb4 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    9bb4:	b410      	push	{r4}
    isPeripheral = p;
    9bb6:	4c09      	ldr	r4, [pc, #36]	; (9bdc <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    9bb8:	4603      	mov	r3, r0
    isPeripheral = p;
    9bba:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9bbc:	4c08      	ldr	r4, [pc, #32]	; (9be0 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    9bbe:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9bc0:	b139      	cbz	r1, 9bd2 <_ZN13deviceManager9setDeviceEbb+0x1e>
    9bc2:	b11a      	cbz	r2, 9bcc <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9bc4:	4618      	mov	r0, r3
}
    9bc6:	bc10      	pop	{r4}
		initPeripheral();
    9bc8:	f7ff bf1e 	b.w	9a08 <_ZN13deviceManager14initPeripheralEv>
}
    9bcc:	bc10      	pop	{r4}
		initCentral();
    9bce:	f7ff bfa7 	b.w	9b20 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9bd2:	2a00      	cmp	r2, #0
    9bd4:	d1f6      	bne.n	9bc4 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    9bd6:	bc10      	pop	{r4}
    9bd8:	4770      	bx	lr
    9bda:	bf00      	nop
    9bdc:	2000b084 	.word	0x2000b084
    9be0:	2000b089 	.word	0x2000b089

00009be4 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9be4:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9be6:	4803      	ldr	r0, [pc, #12]	; (9bf4 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9be8:	f012 ff92 	bl	1cb10 <printk>
}
    9bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9bf0:	f7ff bf84 	b.w	9afc <_ZN13deviceManager9startScanEv>
    9bf4:	00022b86 	.word	0x00022b86

00009bf8 <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9bf8:	b570      	push	{r4, r5, r6, lr}
    9bfa:	b090      	sub	sp, #64	; 0x40
    9bfc:	460d      	mov	r5, r1
	int error = bt_conn_get_info(conn,&info);
    9bfe:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9c00:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9c02:	f007 fee3 	bl	119cc <bt_conn_get_info>
	if (error)
    9c06:	b120      	cbz	r0, 9c12 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    9c08:	4826      	ldr	r0, [pc, #152]	; (9ca4 <_ZN13deviceManager9connectedEP7bt_connh+0xac>)
    9c0a:	f012 ff81 	bl	1cb10 <printk>
}
    9c0e:	b010      	add	sp, #64	; 0x40
    9c10:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9c12:	f89d 4005 	ldrb.w	r4, [sp, #5]
    9c16:	bb4c      	cbnz	r4, 9c6c <_ZN13deviceManager9connectedEP7bt_connh+0x74>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9c18:	4630      	mov	r0, r6
    9c1a:	f015 f857 	bl	1eccc <bt_conn_get_dst>
    9c1e:	a908      	add	r1, sp, #32
    9c20:	f7ff fd9c 	bl	975c <bt_addr_le_to_str.constprop.0.isra.0>
		if (err) {
    9c24:	b13d      	cbz	r5, 9c36 <_ZN13deviceManager9connectedEP7bt_connh+0x3e>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9c26:	462a      	mov	r2, r5
    9c28:	481f      	ldr	r0, [pc, #124]	; (9ca8 <_ZN13deviceManager9connectedEP7bt_connh+0xb0>)
    9c2a:	a908      	add	r1, sp, #32
    9c2c:	f012 ff70 	bl	1cb10 <printk>
			startScan();
    9c30:	f7ff ff64 	bl	9afc <_ZN13deviceManager9startScanEv>
    9c34:	e7eb      	b.n	9c0e <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected: %s\n", addr);
    9c36:	481d      	ldr	r0, [pc, #116]	; (9cac <_ZN13deviceManager9connectedEP7bt_connh+0xb4>)
    9c38:	a908      	add	r1, sp, #32
    9c3a:	f012 ff69 	bl	1cb10 <printk>
		centralConnections[nbrConnectionsCentral] = conn;
    9c3e:	4b1c      	ldr	r3, [pc, #112]	; (9cb0 <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9c40:	481c      	ldr	r0, [pc, #112]	; (9cb4 <_ZN13deviceManager9connectedEP7bt_connh+0xbc>)
    9c42:	781c      	ldrb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9c44:	491c      	ldr	r1, [pc, #112]	; (9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0xc0>)
		centralConnections[nbrConnectionsCentral] = conn;
    9c46:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
		nbrConnectionsCentral++;
    9c4a:	3401      	adds	r4, #1
    9c4c:	b2e4      	uxtb	r4, r4
    9c4e:	701c      	strb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9c50:	3c01      	subs	r4, #1
    9c52:	462b      	mov	r3, r5
    9c54:	4a19      	ldr	r2, [pc, #100]	; (9cbc <_ZN13deviceManager9connectedEP7bt_connh+0xc4>)
    9c56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    9c5a:	f003 f899 	bl	cd90 <bt_gatt_dm_start>
		if (err) 
    9c5e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9c62:	d0d4      	beq.n	9c0e <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			printk("Could not start service discovery, err %d\n", err);
    9c64:	4816      	ldr	r0, [pc, #88]	; (9cc0 <_ZN13deviceManager9connectedEP7bt_connh+0xc8>)
			printk("Connection failed (err %u)\n", err);
    9c66:	f012 ff53 	bl	1cb10 <printk>
			return;
    9c6a:	e7d0      	b.n	9c0e <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9c6c:	2c01      	cmp	r4, #1
    9c6e:	d1ce      	bne.n	9c0e <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9c70:	b115      	cbz	r5, 9c78 <_ZN13deviceManager9connectedEP7bt_connh+0x80>
			printk("Connection failed (err %u)\n", err);
    9c72:	4629      	mov	r1, r5
    9c74:	4813      	ldr	r0, [pc, #76]	; (9cc4 <_ZN13deviceManager9connectedEP7bt_connh+0xcc>)
    9c76:	e7f6      	b.n	9c66 <_ZN13deviceManager9connectedEP7bt_connh+0x6e>
		printk("Connected\n");
    9c78:	4813      	ldr	r0, [pc, #76]	; (9cc8 <_ZN13deviceManager9connectedEP7bt_connh+0xd0>)
    9c7a:	f012 ff49 	bl	1cb10 <printk>
		connectedP = true;
    9c7e:	4b13      	ldr	r3, [pc, #76]	; (9ccc <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9c80:	4628      	mov	r0, r5
		connectedP = true;
    9c82:	701c      	strb	r4, [r3, #0]
		peripheralConn = conn;
    9c84:	4b12      	ldr	r3, [pc, #72]	; (9cd0 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    9c86:	601e      	str	r6, [r3, #0]
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9c88:	f016 fffd 	bl	20c86 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9c8c:	f7ff fe72 	bl	9974 <_ZN13deviceManager9getDeviceEv>
    9c90:	2803      	cmp	r0, #3
    9c92:	d1bc      	bne.n	9c0e <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9c94:	4b06      	ldr	r3, [pc, #24]	; (9cb0 <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9c96:	781b      	ldrb	r3, [r3, #0]
    9c98:	2b00      	cmp	r3, #0
    9c9a:	d1b8      	bne.n	9c0e <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9c9c:	f7ff fef6 	bl	9a8c <_ZN13deviceManager8initScanEv>
    9ca0:	e7c6      	b.n	9c30 <_ZN13deviceManager9connectedEP7bt_connh+0x38>
    9ca2:	bf00      	nop
    9ca4:	00022b99 	.word	0x00022b99
    9ca8:	00022bbf 	.word	0x00022bbf
    9cac:	00022bdd 	.word	0x00022bdd
    9cb0:	2000b088 	.word	0x2000b088
    9cb4:	200096f4 	.word	0x200096f4
    9cb8:	000227c4 	.word	0x000227c4
    9cbc:	20008174 	.word	0x20008174
    9cc0:	000228e0 	.word	0x000228e0
    9cc4:	00022bec 	.word	0x00022bec
    9cc8:	00022c08 	.word	0x00022c08
    9ccc:	2000b082 	.word	0x2000b082
    9cd0:	200096f0 	.word	0x200096f0

00009cd4 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cd6:	b091      	sub	sp, #68	; 0x44
    9cd8:	460f      	mov	r7, r1
	int error = bt_conn_get_info(conn,&info);
    9cda:	a901      	add	r1, sp, #4
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9cdc:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9cde:	f007 fe75 	bl	119cc <bt_conn_get_info>
	if (error)
    9ce2:	4605      	mov	r5, r0
    9ce4:	b120      	cbz	r0, 9cf0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9ce6:	4834      	ldr	r0, [pc, #208]	; (9db8 <_ZN13deviceManager12disconnectedEP7bt_connh+0xe4>)
    9ce8:	f012 ff12 	bl	1cb10 <printk>
}
    9cec:	b011      	add	sp, #68	; 0x44
    9cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9cf0:	f89d 4005 	ldrb.w	r4, [sp, #5]
    9cf4:	2c01      	cmp	r4, #1
    9cf6:	d10d      	bne.n	9d14 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9cf8:	4639      	mov	r1, r7
    9cfa:	4830      	ldr	r0, [pc, #192]	; (9dbc <_ZN13deviceManager12disconnectedEP7bt_connh+0xe8>)
    9cfc:	f012 ff08 	bl	1cb10 <printk>
		connectedP = false;
    9d00:	4b2f      	ldr	r3, [pc, #188]	; (9dc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0xec>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9d02:	4628      	mov	r0, r5
		connectedP = false;
    9d04:	701d      	strb	r5, [r3, #0]
		peripheralConn = nullptr;
    9d06:	4b2f      	ldr	r3, [pc, #188]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>)
    9d08:	601d      	str	r5, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9d0a:	f016 ffbf 	bl	20c8c <dk_set_led_off>
		startAdvertising();
    9d0e:	f7ff fe55 	bl	99bc <_ZN13deviceManager16startAdvertisingEv>
    9d12:	e7eb      	b.n	9cec <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9d14:	2c00      	cmp	r4, #0
    9d16:	d1e9      	bne.n	9cec <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9d18:	4630      	mov	r0, r6
    9d1a:	f014 ffd7 	bl	1eccc <bt_conn_get_dst>
    9d1e:	a908      	add	r1, sp, #32
    9d20:	f7ff fd1c 	bl	975c <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9d24:	4828      	ldr	r0, [pc, #160]	; (9dc8 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf4>)
    9d26:	a908      	add	r1, sp, #32
    9d28:	463a      	mov	r2, r7
    9d2a:	f012 fef1 	bl	1cb10 <printk>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9d2e:	4927      	ldr	r1, [pc, #156]	; (9dcc <_ZN13deviceManager12disconnectedEP7bt_connh+0xf8>)
			if (centralConnections[i] == conn)
    9d30:	4d27      	ldr	r5, [pc, #156]	; (9dd0 <_ZN13deviceManager12disconnectedEP7bt_connh+0xfc>)
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9d32:	780b      	ldrb	r3, [r1, #0]
    9d34:	1e58      	subs	r0, r3, #1
    9d36:	b2e2      	uxtb	r2, r4
    9d38:	4282      	cmp	r2, r0
    9d3a:	da12      	bge.n	9d62 <_ZN13deviceManager12disconnectedEP7bt_connh+0x8e>
			if (centralConnections[i] == conn)
    9d3c:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
    9d40:	3401      	adds	r4, #1
    9d42:	42b7      	cmp	r7, r6
    9d44:	d1f7      	bne.n	9d36 <_ZN13deviceManager12disconnectedEP7bt_connh+0x62>
				centralConnections[i] = nullptr;
    9d46:	2300      	movs	r3, #0
    9d48:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
				disconnectedCode[0] = 11;
    9d4c:	230b      	movs	r3, #11
    9d4e:	f88d 3000 	strb.w	r3, [sp]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d52:	4b1c      	ldr	r3, [pc, #112]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>)
				nbrConnectionsCentral--;
    9d54:	7008      	strb	r0, [r1, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d56:	2201      	movs	r2, #1
    9d58:	4669      	mov	r1, sp
    9d5a:	6818      	ldr	r0, [r3, #0]
    9d5c:	f000 f966 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
				return;
    9d60:	e7c4      	b.n	9cec <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
		if (nbrConnectionsCentral == 0)
    9d62:	b96b      	cbnz	r3, 9d80 <_ZN13deviceManager12disconnectedEP7bt_connh+0xac>
			connectedC = false;
    9d64:	4a1b      	ldr	r2, [pc, #108]	; (9dd4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x100>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d66:	4669      	mov	r1, sp
			connectedC = false;
    9d68:	7013      	strb	r3, [r2, #0]
			disconnectedCode[0] = 12;
    9d6a:	230c      	movs	r3, #12
    9d6c:	f88d 3000 	strb.w	r3, [sp]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d70:	4b14      	ldr	r3, [pc, #80]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>)
    9d72:	2201      	movs	r2, #1
    9d74:	6818      	ldr	r0, [r3, #0]
    9d76:	f000 f959 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d7a:	2001      	movs	r0, #1
    9d7c:	f016 ff86 	bl	20c8c <dk_set_led_off>
		if (strstr(addr,sensor1))
    9d80:	4915      	ldr	r1, [pc, #84]	; (9dd8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x104>)
    9d82:	a808      	add	r0, sp, #32
    9d84:	f014 fb02 	bl	1e38c <strstr>
    9d88:	b110      	cbz	r0, 9d90 <_ZN13deviceManager12disconnectedEP7bt_connh+0xbc>
			once_sensor1 = true;
    9d8a:	2201      	movs	r2, #1
    9d8c:	4b13      	ldr	r3, [pc, #76]	; (9ddc <_ZN13deviceManager12disconnectedEP7bt_connh+0x108>)
    9d8e:	701a      	strb	r2, [r3, #0]
		if (strstr(addr,sensor2))
    9d90:	4913      	ldr	r1, [pc, #76]	; (9de0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x10c>)
    9d92:	a808      	add	r0, sp, #32
    9d94:	f014 fafa 	bl	1e38c <strstr>
    9d98:	b110      	cbz	r0, 9da0 <_ZN13deviceManager12disconnectedEP7bt_connh+0xcc>
			once_sensor2 = true;
    9d9a:	2201      	movs	r2, #1
    9d9c:	4b11      	ldr	r3, [pc, #68]	; (9de4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x110>)
    9d9e:	701a      	strb	r2, [r3, #0]
		if (strstr(addr,sensor3))
    9da0:	4911      	ldr	r1, [pc, #68]	; (9de8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x114>)
    9da2:	a808      	add	r0, sp, #32
    9da4:	f014 faf2 	bl	1e38c <strstr>
    9da8:	b110      	cbz	r0, 9db0 <_ZN13deviceManager12disconnectedEP7bt_connh+0xdc>
			once_sensor3 = true;
    9daa:	2201      	movs	r2, #1
    9dac:	4b0f      	ldr	r3, [pc, #60]	; (9dec <_ZN13deviceManager12disconnectedEP7bt_connh+0x118>)
    9dae:	701a      	strb	r2, [r3, #0]
		startScan();	
    9db0:	f7ff fea4 	bl	9afc <_ZN13deviceManager9startScanEv>
    9db4:	e79a      	b.n	9cec <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
    9db6:	bf00      	nop
    9db8:	00022b99 	.word	0x00022b99
    9dbc:	00022c13 	.word	0x00022c13
    9dc0:	2000b082 	.word	0x2000b082
    9dc4:	200096f0 	.word	0x200096f0
    9dc8:	00022c3e 	.word	0x00022c3e
    9dcc:	2000b088 	.word	0x2000b088
    9dd0:	200096f4 	.word	0x200096f4
    9dd4:	2000b081 	.word	0x2000b081
    9dd8:	2000b04e 	.word	0x2000b04e
    9ddc:	20008431 	.word	0x20008431
    9de0:	2000b05f 	.word	0x2000b05f
    9de4:	20008432 	.word	0x20008432
    9de8:	2000b070 	.word	0x2000b070
    9dec:	20008433 	.word	0x20008433

00009df0 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    9df2:	493b      	ldr	r1, [pc, #236]	; (9ee0 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xf0>)
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9df4:	4604      	mov	r4, r0
	chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    9df6:	f002 ff9f 	bl	cd38 <bt_gatt_dm_char_by_uuid>
	if (!chrc) {
    9dfa:	4605      	mov	r5, r0
    9dfc:	b968      	cbnz	r0, 9e1a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x2a>
		printk("Missing CSC measurement characteristic\n");
    9dfe:	4839      	ldr	r0, [pc, #228]	; (9ee4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xf4>)
		printk("Missing CSC measurement char CCC descriptor\n");
    9e00:	f012 fe86 	bl	1cb10 <printk>
		err = bt_gatt_dm_data_release(disc);
    9e04:	4620      	mov	r0, r4
    9e06:	f013 fd6a 	bl	1d8de <bt_gatt_dm_data_release>
		if (err) {
    9e0a:	4601      	mov	r1, r0
    9e0c:	b368      	cbz	r0, 9e6a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
			printk("Could not release discovery data, err: %d\n", err);
    9e0e:	4836      	ldr	r0, [pc, #216]	; (9ee8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xf8>)
}
    9e10:	b002      	add	sp, #8
    9e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Could not release discovery data, err: %d\n", err);
    9e16:	f012 be7b 	b.w	1cb10 <printk>
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_CSC_MEASUREMENT);
    9e1a:	4601      	mov	r1, r0
    9e1c:	4a33      	ldr	r2, [pc, #204]	; (9eec <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xfc>)
    9e1e:	4620      	mov	r0, r4
    9e20:	f013 fd4b 	bl	1d8ba <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    9e24:	b908      	cbnz	r0, 9e2a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x3a>
		printk("Missing CSC measurement char CCC descriptor\n");
    9e26:	4832      	ldr	r0, [pc, #200]	; (9ef0 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x100>)
    9e28:	e7ea      	b.n	9e00 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x10>
	param.value_handle = desc->handle;
    9e2a:	8883      	ldrh	r3, [r0, #4]
    9e2c:	4e31      	ldr	r6, [pc, #196]	; (9ef4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x104>)
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9e2e:	4629      	mov	r1, r5
    9e30:	4620      	mov	r0, r4
    9e32:	4a31      	ldr	r2, [pc, #196]	; (9ef8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x108>)
	param.value_handle = desc->handle;
    9e34:	8133      	strh	r3, [r6, #8]
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9e36:	f013 fd40 	bl	1d8ba <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    9e3a:	2800      	cmp	r0, #0
    9e3c:	d0f3      	beq.n	9e26 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x36>
	param.ccc_handle = desc->handle;
    9e3e:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9e40:	4620      	mov	r0, r4
	param.ccc_handle = desc->handle;
    9e42:	8173      	strh	r3, [r6, #10]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9e44:	f013 fcec 	bl	1d820 <bt_gatt_dm_conn_get>
    9e48:	4631      	mov	r1, r6
    9e4a:	f00b f875 	bl	14f38 <bt_gatt_subscribe>
	if (err) {
    9e4e:	4601      	mov	r1, r0
    9e50:	b110      	cbz	r0, 9e58 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x68>
		printk("Subscribtion failed (err %d)\n", err);
    9e52:	482a      	ldr	r0, [pc, #168]	; (9efc <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x10c>)
    9e54:	f012 fe5c 	bl	1cb10 <printk>
	bt_gatt_dm_data_release(disc);
    9e58:	4620      	mov	r0, r4
    9e5a:	f013 fd40 	bl	1d8de <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9e5e:	4b28      	ldr	r3, [pc, #160]	; (9f00 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x110>)
    9e60:	781a      	ldrb	r2, [r3, #0]
    9e62:	2a01      	cmp	r2, #1
    9e64:	d003      	beq.n	9e6e <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7e>
    9e66:	2a02      	cmp	r2, #2
    9e68:	d024      	beq.n	9eb4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc4>
}
    9e6a:	b002      	add	sp, #8
    9e6c:	bd70      	pop	{r4, r5, r6, pc}
		if (nbrAddresses == 1)
    9e6e:	4b25      	ldr	r3, [pc, #148]	; (9f04 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x114>)
    9e70:	781c      	ldrb	r4, [r3, #0]
    9e72:	2c01      	cmp	r4, #1
    9e74:	d10e      	bne.n	9e94 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa4>
			connectedCode[0] = 13;
    9e76:	230d      	movs	r3, #13
    9e78:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9e7c:	4b22      	ldr	r3, [pc, #136]	; (9f08 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x118>)
    9e7e:	4622      	mov	r2, r4
    9e80:	6818      	ldr	r0, [r3, #0]
    9e82:	a901      	add	r1, sp, #4
    9e84:	f000 f8d2 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    9e88:	4820      	ldr	r0, [pc, #128]	; (9f0c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x11c>)
    9e8a:	f012 fe41 	bl	1cb10 <printk>
			subscriptionDone = true;
    9e8e:	4b20      	ldr	r3, [pc, #128]	; (9f10 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x120>)
    9e90:	701c      	strb	r4, [r3, #0]
    9e92:	e7ea      	b.n	9e6a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
		else if (nbrAddresses == 2)	
    9e94:	2c02      	cmp	r4, #2
    9e96:	d1e8      	bne.n	9e6a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
			connectedCode[0] = 14;
    9e98:	230e      	movs	r3, #14
    9e9a:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9e9e:	4b1a      	ldr	r3, [pc, #104]	; (9f08 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x118>)
    9ea0:	a901      	add	r1, sp, #4
    9ea2:	6818      	ldr	r0, [r3, #0]
    9ea4:	f000 f8c2 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
			startScan();
    9ea8:	f7ff fe28 	bl	9afc <_ZN13deviceManager9startScanEv>
			printk("First discovery completed\n");
    9eac:	4819      	ldr	r0, [pc, #100]	; (9f14 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x124>)
    9eae:	f012 fe2f 	bl	1cb10 <printk>
    9eb2:	e7da      	b.n	9e6a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
		connectedCode[0] = 15;
    9eb4:	230f      	movs	r3, #15
    9eb6:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9eba:	4b13      	ldr	r3, [pc, #76]	; (9f08 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x118>)
    9ebc:	2201      	movs	r2, #1
    9ebe:	6818      	ldr	r0, [r3, #0]
    9ec0:	a901      	add	r1, sp, #4
    9ec2:	f000 f8b3 	bl	a02c <_Z17data_service_sendP7bt_connPKht>
		printk("Second discovery completed\n");
    9ec6:	4814      	ldr	r0, [pc, #80]	; (9f18 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x128>)
    9ec8:	f012 fe22 	bl	1cb10 <printk>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9ecc:	2001      	movs	r0, #1
    9ece:	f016 feda 	bl	20c86 <dk_set_led_on>
		connectedC = true;	
    9ed2:	2301      	movs	r3, #1
    9ed4:	4a11      	ldr	r2, [pc, #68]	; (9f1c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x12c>)
    9ed6:	7013      	strb	r3, [r2, #0]
		subscriptionDone = true;
    9ed8:	4a0d      	ldr	r2, [pc, #52]	; (9f10 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x120>)
    9eda:	7013      	strb	r3, [r2, #0]
		break;
    9edc:	e7c5      	b.n	9e6a <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
    9ede:	bf00      	nop
    9ee0:	000227c8 	.word	0x000227c8
    9ee4:	00022c6c 	.word	0x00022c6c
    9ee8:	00022c94 	.word	0x00022c94
    9eec:	000227cc 	.word	0x000227cc
    9ef0:	00022cbf 	.word	0x00022cbf
    9ef4:	20008148 	.word	0x20008148
    9ef8:	000227d0 	.word	0x000227d0
    9efc:	00022cec 	.word	0x00022cec
    9f00:	2000b088 	.word	0x2000b088
    9f04:	2000b085 	.word	0x2000b085
    9f08:	200096f0 	.word	0x200096f0
    9f0c:	00022d0a 	.word	0x00022d0a
    9f10:	2000b087 	.word	0x2000b087
    9f14:	00022d1f 	.word	0x00022d1f
    9f18:	00022d3a 	.word	0x00022d3a
    9f1c:	2000b081 	.word	0x2000b081

00009f20 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9f20:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9f22:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9f24:	7403      	strb	r3, [r0, #16]
    switch (type)
    9f26:	d004      	beq.n	9f32 <_ZN7dataCSC8saveDataEPKv+0x12>
    9f28:	2b02      	cmp	r3, #2
    9f2a:	d00d      	beq.n	9f48 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9f2c:	480c      	ldr	r0, [pc, #48]	; (9f60 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9f2e:	f012 bdef 	b.w	1cb10 <printk>
        oldSumRevSpeed = sumRevSpeed;
    9f32:	8803      	ldrh	r3, [r0, #0]
    9f34:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9f36:	8903      	ldrh	r3, [r0, #8]
    9f38:	8143      	strh	r3, [r0, #10]
	return ((uint16_t)src[1] << 8) | src[0];
    9f3a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9f3e:	8003      	strh	r3, [r0, #0]
    9f40:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9f44:	8103      	strh	r3, [r0, #8]
        break;
    9f46:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9f48:	8883      	ldrh	r3, [r0, #4]
    9f4a:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9f4c:	8983      	ldrh	r3, [r0, #12]
    9f4e:	81c3      	strh	r3, [r0, #14]
    9f50:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9f54:	8083      	strh	r3, [r0, #4]
    9f56:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9f5a:	8183      	strh	r3, [r0, #12]
}
    9f5c:	4770      	bx	lr
    9f5e:	bf00      	nop
    9f60:	00022d68 	.word	0x00022d68

00009f64 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9f68:	8985      	ldrh	r5, [r0, #12]
    9f6a:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9f6c:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9f6e:	429d      	cmp	r5, r3
    9f70:	d02f      	beq.n	9fd2 <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9f72:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9f76:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9f7a:	45c8      	cmp	r8, r9
    9f7c:	d029      	beq.n	9fd2 <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9f7e:	1aed      	subs	r5, r5, r3
    9f80:	4628      	mov	r0, r5
    9f82:	f7fe faaf 	bl	84e4 <__aeabi_i2d>
    9f86:	2200      	movs	r2, #0
    9f88:	4b13      	ldr	r3, [pc, #76]	; (9fd8 <_ZN7dataCSC7calcRPMEv+0x74>)
    9f8a:	f7fe fb15 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9f8e:	2200      	movs	r2, #0
    9f90:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9f92:	4606      	mov	r6, r0
    9f94:	460f      	mov	r7, r1
        if (time < 0)
    9f96:	f7fe fd81 	bl	8a9c <__aeabi_dcmplt>
    9f9a:	b130      	cbz	r0, 9faa <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9f9c:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9fa0:	30ff      	adds	r0, #255	; 0xff
    9fa2:	f7fe fa9f 	bl	84e4 <__aeabi_i2d>
    9fa6:	4606      	mov	r6, r0
    9fa8:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9faa:	203c      	movs	r0, #60	; 0x3c
    9fac:	eba8 0809 	sub.w	r8, r8, r9
    9fb0:	fb00 f008 	mul.w	r0, r0, r8
    9fb4:	f7fe fa96 	bl	84e4 <__aeabi_i2d>
    9fb8:	4632      	mov	r2, r6
    9fba:	463b      	mov	r3, r7
    9fbc:	f7fe fc26 	bl	880c <__aeabi_ddiv>
    9fc0:	4602      	mov	r2, r0
    9fc2:	460b      	mov	r3, r1
    9fc4:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9fc8:	f7fe fd90 	bl	8aec <__aeabi_d2uiz>
    9fcc:	b280      	uxth	r0, r0
}
    9fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9fd2:	2000      	movs	r0, #0
    9fd4:	e7fb      	b.n	9fce <_ZN7dataCSC7calcRPMEv+0x6a>
    9fd6:	bf00      	nop
    9fd8:	3f500000 	.word	0x3f500000

00009fdc <_Z15on_cccd_changedPK12bt_gatt_attrt>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    9fdc:	2901      	cmp	r1, #1
    9fde:	d004      	beq.n	9fea <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9fe0:	2902      	cmp	r1, #2
    9fe2:	d005      	beq.n	9ff0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9fe4:	b931      	cbnz	r1, 9ff4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9fe6:	4804      	ldr	r0, [pc, #16]	; (9ff8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9fe8:	e000      	b.n	9fec <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9fea:	4804      	ldr	r0, [pc, #16]	; (9ffc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9fec:	f012 bd90 	b.w	1cb10 <printk>
            printk("Notifications ON with Indications\n");
    9ff0:	4803      	ldr	r0, [pc, #12]	; (a000 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9ff2:	e7fb      	b.n	9fec <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9ff4:	4803      	ldr	r0, [pc, #12]	; (a004 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9ff6:	e7f9      	b.n	9fec <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9ff8:	00022dab 	.word	0x00022dab
    9ffc:	00022d76 	.word	0x00022d76
    a000:	00022d88 	.word	0x00022d88
    a004:	00022dbe 	.word	0x00022dbe

0000a008 <_Z17data_service_initv>:
{
    a008:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    a00a:	22f0      	movs	r2, #240	; 0xf0
    a00c:	2100      	movs	r1, #0
    a00e:	4805      	ldr	r0, [pc, #20]	; (a024 <_Z17data_service_initv+0x1c>)
    a010:	f014 fa61 	bl	1e4d6 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    a014:	22f0      	movs	r2, #240	; 0xf0
    a016:	2100      	movs	r1, #0
    a018:	4803      	ldr	r0, [pc, #12]	; (a028 <_Z17data_service_initv+0x20>)
    a01a:	f014 fa5c 	bl	1e4d6 <memset>
}
    a01e:	2000      	movs	r0, #0
    a020:	bd08      	pop	{r3, pc}
    a022:	bf00      	nop
    a024:	2000b0c0 	.word	0x2000b0c0
    a028:	2000b1b0 	.word	0x2000b1b0

0000a02c <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    a02c:	2300      	movs	r3, #0
{
    a02e:	b510      	push	{r4, lr}
    a030:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    a032:	9303      	str	r3, [sp, #12]
    a034:	9305      	str	r3, [sp, #20]
    a036:	4b0d      	ldr	r3, [pc, #52]	; (a06c <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    a038:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    a03c:	9300      	str	r3, [sp, #0]
    a03e:	4b0c      	ldr	r3, [pc, #48]	; (a070 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a040:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    a042:	9304      	str	r3, [sp, #16]
    };
    a044:	4b0b      	ldr	r3, [pc, #44]	; (a074 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    a046:	4604      	mov	r4, r0
    };
    a048:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a04c:	4619      	mov	r1, r3
    a04e:	f00a fb5f 	bl	14710 <bt_gatt_is_subscribed>
    a052:	b148      	cbz	r0, a068 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    a054:	4669      	mov	r1, sp
    a056:	4620      	mov	r0, r4
    a058:	f00a f962 	bl	14320 <bt_gatt_notify_cb>
    a05c:	b110      	cbz	r0, a064 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    a05e:	4806      	ldr	r0, [pc, #24]	; (a078 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    a060:	f012 fd56 	bl	1cb10 <printk>
    }
}
    a064:	b006      	add	sp, #24
    a066:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    a068:	4804      	ldr	r0, [pc, #16]	; (a07c <_Z17data_service_sendP7bt_connPKht+0x50>)
    a06a:	e7f9      	b.n	a060 <_Z17data_service_sendP7bt_connPKht+0x34>
    a06c:	00022ed3 	.word	0x00022ed3
    a070:	0001c9d9 	.word	0x0001c9d9
    a074:	00021e8c 	.word	0x00021e8c
    a078:	00022e1d 	.word	0x00022e1d
    a07c:	00022e41 	.word	0x00022e41

0000a080 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    a080:	4b01      	ldr	r3, [pc, #4]	; (a088 <_Z11getDiameterv+0x8>)
    a082:	e9d3 0100 	ldrd	r0, r1, [r3]
    a086:	4770      	bx	lr
    a088:	20008700 	.word	0x20008700

0000a08c <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    a08c:	4b01      	ldr	r3, [pc, #4]	; (a094 <_Z17getNbrOfAddressesv+0x8>)
    a08e:	7818      	ldrb	r0, [r3, #0]
    a090:	4770      	bx	lr
    a092:	bf00      	nop
    a094:	2000b2a1 	.word	0x2000b2a1

0000a098 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    a098:	2902      	cmp	r1, #2
    a09a:	d00d      	beq.n	a0b8 <_Z10getAddressPch+0x20>
    a09c:	2903      	cmp	r1, #3
    a09e:	d015      	beq.n	a0cc <_Z10getAddressPch+0x34>
    a0a0:	2901      	cmp	r1, #1
    a0a2:	d11c      	bne.n	a0de <_Z10getAddressPch+0x46>
    a0a4:	4a0e      	ldr	r2, [pc, #56]	; (a0e0 <_Z10getAddressPch+0x48>)
    a0a6:	1e43      	subs	r3, r0, #1
    a0a8:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    a0aa:	f812 1b01 	ldrb.w	r1, [r2], #1
    a0ae:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a0b2:	4283      	cmp	r3, r0
    a0b4:	d1f9      	bne.n	a0aa <_Z10getAddressPch+0x12>
    a0b6:	4770      	bx	lr
    a0b8:	4a0a      	ldr	r2, [pc, #40]	; (a0e4 <_Z10getAddressPch+0x4c>)
    a0ba:	1e43      	subs	r3, r0, #1
    a0bc:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    a0be:	f812 1b01 	ldrb.w	r1, [r2], #1
    a0c2:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a0c6:	4283      	cmp	r3, r0
    a0c8:	d1f9      	bne.n	a0be <_Z10getAddressPch+0x26>
    a0ca:	4770      	bx	lr
    a0cc:	4a06      	ldr	r2, [pc, #24]	; (a0e8 <_Z10getAddressPch+0x50>)
    a0ce:	1e43      	subs	r3, r0, #1
    a0d0:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    a0d2:	f812 1b01 	ldrb.w	r1, [r2], #1
    a0d6:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a0da:	4283      	cmp	r3, r0
    a0dc:	d1f9      	bne.n	a0d2 <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    a0de:	4770      	bx	lr
    a0e0:	2000b08c 	.word	0x2000b08c
    a0e4:	2000b09d 	.word	0x2000b09d
    a0e8:	2000b0ae 	.word	0x2000b0ae

0000a0ec <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    a0ec:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    a0ee:	4c0a      	ldr	r4, [pc, #40]	; (a118 <crc8_ccitt+0x2c>)
    a0f0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    a0f2:	4291      	cmp	r1, r2
    a0f4:	d100      	bne.n	a0f8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    a0f6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    a0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
    a0fc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    a0fe:	0903      	lsrs	r3, r0, #4
    a100:	5ce3      	ldrb	r3, [r4, r3]
    a102:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    a106:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    a108:	f3c3 1303 	ubfx	r3, r3, #4, #4
    a10c:	5ce0      	ldrb	r0, [r4, r3]
    a10e:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    a112:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    a114:	e7ed      	b.n	a0f2 <crc8_ccitt+0x6>
    a116:	bf00      	nop
    a118:	00022ee4 	.word	0x00022ee4

0000a11c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a11c:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a11e:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a120:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a124:	2b02      	cmp	r3, #2
{
    a126:	4604      	mov	r4, r0
    a128:	460e      	mov	r6, r1
	notify->result = res;
    a12a:	6081      	str	r1, [r0, #8]
	switch (method) {
    a12c:	d010      	beq.n	a150 <sys_notify_finalize+0x34>
    a12e:	2b03      	cmp	r3, #3
    a130:	d004      	beq.n	a13c <sys_notify_finalize+0x20>
    a132:	2b01      	cmp	r3, #1
    a134:	d10f      	bne.n	a156 <sys_notify_finalize+0x3a>
    a136:	2500      	movs	r5, #0
    a138:	4628      	mov	r0, r5
    a13a:	e001      	b.n	a140 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a13c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a13e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a140:	2300      	movs	r3, #0
    a142:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a144:	b110      	cbz	r0, a14c <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a146:	4631      	mov	r1, r6
    a148:	f012 fbb4 	bl	1c8b4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a14c:	4628      	mov	r0, r5
    a14e:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    a150:	2500      	movs	r5, #0
		sig = notify->method.signal;
    a152:	6800      	ldr	r0, [r0, #0]
		break;
    a154:	e7f4      	b.n	a140 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a156:	2245      	movs	r2, #69	; 0x45
    a158:	4904      	ldr	r1, [pc, #16]	; (a16c <sys_notify_finalize+0x50>)
    a15a:	4805      	ldr	r0, [pc, #20]	; (a170 <sys_notify_finalize+0x54>)
    a15c:	f012 fcd8 	bl	1cb10 <printk>
    a160:	2145      	movs	r1, #69	; 0x45
    a162:	4802      	ldr	r0, [pc, #8]	; (a16c <sys_notify_finalize+0x50>)
    a164:	f012 ff7a 	bl	1d05c <assert_post_action>
	sys_notify_generic_callback rv = 0;
    a168:	2500      	movs	r5, #0
    a16a:	e7e8      	b.n	a13e <sys_notify_finalize+0x22>
    a16c:	00022ef4 	.word	0x00022ef4
    a170:	00022f17 	.word	0x00022f17

0000a174 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    a174:	680b      	ldr	r3, [r1, #0]
    a176:	3301      	adds	r3, #1
    a178:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a17a:	4b01      	ldr	r3, [pc, #4]	; (a180 <char_out+0xc>)
    a17c:	681b      	ldr	r3, [r3, #0]
    a17e:	4718      	bx	r3
    a180:	200081bc 	.word	0x200081bc

0000a184 <__printk_hook_install>:
	_char_out = fn;
    a184:	4b01      	ldr	r3, [pc, #4]	; (a18c <__printk_hook_install+0x8>)
    a186:	6018      	str	r0, [r3, #0]
}
    a188:	4770      	bx	lr
    a18a:	bf00      	nop
    a18c:	200081bc 	.word	0x200081bc

0000a190 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a190:	b507      	push	{r0, r1, r2, lr}
    a192:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a194:	2100      	movs	r1, #0
{
    a196:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a198:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a19a:	4803      	ldr	r0, [pc, #12]	; (a1a8 <vprintk+0x18>)
    a19c:	a901      	add	r1, sp, #4
    a19e:	f000 fbe9 	bl	a974 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a1a2:	b003      	add	sp, #12
    a1a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a1a8:	0000a175 	.word	0x0000a175

0000a1ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a1ac:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a1ae:	2500      	movs	r5, #0
{
    a1b0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a1b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a1b6:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a1b8:	a901      	add	r1, sp, #4
    a1ba:	4805      	ldr	r0, [pc, #20]	; (a1d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a1bc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a1be:	f000 fbd9 	bl	a974 <cbvprintf>

	if (ctx.count < ctx.max) {
    a1c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a1c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a1c8:	bfb8      	it	lt
    a1ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a1cc:	b005      	add	sp, #20
    a1ce:	bd30      	pop	{r4, r5, pc}
    a1d0:	0001caeb 	.word	0x0001caeb

0000a1d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a1d8:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a1dc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a1de:	f01a 0f08 	tst.w	sl, #8
{
    a1e2:	4693      	mov	fp, r2
	if (processing) {
    a1e4:	d01c      	beq.n	a220 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a1e6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a1e8:	bf0c      	ite	eq
    a1ea:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a1ee:	f04a 0a20 	orrne.w	sl, sl, #32
    a1f2:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1f6:	f104 0014 	add.w	r0, r4, #20
    a1fa:	f011 fcc3 	bl	1bb84 <z_spin_unlock_valid>
    a1fe:	b940      	cbnz	r0, a212 <process_event+0x3e>
    a200:	4992      	ldr	r1, [pc, #584]	; (a44c <process_event+0x278>)
    a202:	4893      	ldr	r0, [pc, #588]	; (a450 <process_event+0x27c>)
    a204:	22a7      	movs	r2, #167	; 0xa7
    a206:	f012 fc83 	bl	1cb10 <printk>
    a20a:	21a7      	movs	r1, #167	; 0xa7
    a20c:	488f      	ldr	r0, [pc, #572]	; (a44c <process_event+0x278>)
    a20e:	f012 ff25 	bl	1d05c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a212:	f38b 8811 	msr	BASEPRI, fp
    a216:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a21a:	b003      	add	sp, #12
    a21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a220:	4f8c      	ldr	r7, [pc, #560]	; (a454 <process_event+0x280>)
    a222:	f8df 822c 	ldr.w	r8, [pc, #556]	; a450 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a226:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a22a:	2902      	cmp	r1, #2
    a22c:	d106      	bne.n	a23c <process_event+0x68>
			evt = process_recheck(mgr);
    a22e:	4620      	mov	r0, r4
    a230:	f012 fc88 	bl	1cb44 <process_recheck>
		if (evt == EVT_NOP) {
    a234:	2800      	cmp	r0, #0
    a236:	d0de      	beq.n	a1f6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a238:	2801      	cmp	r0, #1
    a23a:	d163      	bne.n	a304 <process_event+0x130>
			res = mgr->last_res;
    a23c:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a240:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a242:	f1b9 0f00 	cmp.w	r9, #0
    a246:	da19      	bge.n	a27c <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a248:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a24a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a24c:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a250:	e9c4 6600 	strd	r6, r6, [r4]
    a254:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a258:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a25a:	8ba3      	ldrh	r3, [r4, #28]
    a25c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a260:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a262:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a264:	d003      	beq.n	a26e <process_event+0x9a>
		if (do_monitors
    a266:	68a2      	ldr	r2, [r4, #8]
    a268:	2a00      	cmp	r2, #0
    a26a:	f040 80f5 	bne.w	a458 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a26e:	b915      	cbnz	r5, a276 <process_event+0xa2>
		    || (transit != NULL)) {
    a270:	2e00      	cmp	r6, #0
    a272:	f000 812f 	beq.w	a4d4 <process_event+0x300>
    a276:	f04f 0a00 	mov.w	sl, #0
    a27a:	e0ef      	b.n	a45c <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a27c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a280:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a282:	2901      	cmp	r1, #1
    a284:	d820      	bhi.n	a2c8 <process_event+0xf4>
	list->head = NULL;
    a286:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a288:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    a28c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    a28e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a290:	b29b      	uxth	r3, r3
	list->tail = NULL;
    a292:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a296:	d10a      	bne.n	a2ae <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a298:	b13d      	cbz	r5, a2aa <process_event+0xd6>
    a29a:	4629      	mov	r1, r5
    a29c:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a29e:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a2a0:	3201      	adds	r2, #1
    a2a2:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a2a4:	2900      	cmp	r1, #0
    a2a6:	d1fa      	bne.n	a29e <process_event+0xca>
    a2a8:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a2aa:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a2ae:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a2b0:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a2b2:	f012 fc47 	bl	1cb44 <process_recheck>
    a2b6:	4606      	mov	r6, r0
    a2b8:	2800      	cmp	r0, #0
    a2ba:	d0ce      	beq.n	a25a <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a2bc:	8ba3      	ldrh	r3, [r4, #28]
    a2be:	f043 0320 	orr.w	r3, r3, #32
    a2c2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a2c4:	2600      	movs	r6, #0
    a2c6:	e7c8      	b.n	a25a <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a2c8:	2a04      	cmp	r2, #4
    a2ca:	d10d      	bne.n	a2e8 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a2cc:	f023 0307 	bic.w	r3, r3, #7
    a2d0:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a2d2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a2d4:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a2d6:	f012 fc35 	bl	1cb44 <process_recheck>
    a2da:	4605      	mov	r5, r0
    a2dc:	b180      	cbz	r0, a300 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a2de:	f042 0220 	orr.w	r2, r2, #32
    a2e2:	2500      	movs	r5, #0
    a2e4:	83a2      	strh	r2, [r4, #28]
    a2e6:	e7ed      	b.n	a2c4 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a2e8:	f240 1219 	movw	r2, #281	; 0x119
    a2ec:	4639      	mov	r1, r7
    a2ee:	4640      	mov	r0, r8
    a2f0:	f012 fc0e 	bl	1cb10 <printk>
    a2f4:	f240 1119 	movw	r1, #281	; 0x119
    a2f8:	4638      	mov	r0, r7
    a2fa:	f012 feaf 	bl	1d05c <assert_post_action>
    a2fe:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a300:	462e      	mov	r6, r5
    a302:	e7aa      	b.n	a25a <process_event+0x86>
		} else if (evt == EVT_START) {
    a304:	2803      	cmp	r0, #3
    a306:	d131      	bne.n	a36c <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a308:	f1ba 0f00 	cmp.w	sl, #0
    a30c:	d00a      	beq.n	a324 <process_event+0x150>
    a30e:	4639      	mov	r1, r7
    a310:	4640      	mov	r0, r8
    a312:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a316:	f012 fbfb 	bl	1cb10 <printk>
    a31a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a31e:	4638      	mov	r0, r7
    a320:	f012 fe9c 	bl	1d05c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a324:	6823      	ldr	r3, [r4, #0]
    a326:	b953      	cbnz	r3, a33e <process_event+0x16a>
    a328:	4639      	mov	r1, r7
    a32a:	4640      	mov	r0, r8
    a32c:	f240 1255 	movw	r2, #341	; 0x155
    a330:	f012 fbee 	bl	1cb10 <printk>
    a334:	f240 1155 	movw	r1, #341	; 0x155
    a338:	4638      	mov	r0, r7
    a33a:	f012 fe8f 	bl	1d05c <assert_post_action>
			transit = mgr->transitions->start;
    a33e:	6923      	ldr	r3, [r4, #16]
    a340:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a342:	b956      	cbnz	r6, a35a <process_event+0x186>
    a344:	4639      	mov	r1, r7
    a346:	4640      	mov	r0, r8
    a348:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a34c:	f012 fbe0 	bl	1cb10 <printk>
    a350:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a354:	4638      	mov	r0, r7
    a356:	f012 fe81 	bl	1d05c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a35a:	8ba3      	ldrh	r3, [r4, #28]
    a35c:	f023 0307 	bic.w	r3, r3, #7
    a360:	f043 0306 	orr.w	r3, r3, #6
}
    a364:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a366:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a368:	46a9      	mov	r9, r5
}
    a36a:	e776      	b.n	a25a <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a36c:	2804      	cmp	r0, #4
    a36e:	d12e      	bne.n	a3ce <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a370:	f1ba 0f02 	cmp.w	sl, #2
    a374:	d00a      	beq.n	a38c <process_event+0x1b8>
    a376:	4639      	mov	r1, r7
    a378:	4640      	mov	r0, r8
    a37a:	f240 125b 	movw	r2, #347	; 0x15b
    a37e:	f012 fbc7 	bl	1cb10 <printk>
    a382:	f240 115b 	movw	r1, #347	; 0x15b
    a386:	4638      	mov	r0, r7
    a388:	f012 fe68 	bl	1d05c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a38c:	8be3      	ldrh	r3, [r4, #30]
    a38e:	b153      	cbz	r3, a3a6 <process_event+0x1d2>
    a390:	4639      	mov	r1, r7
    a392:	4640      	mov	r0, r8
    a394:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a398:	f012 fbba 	bl	1cb10 <printk>
    a39c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a3a0:	4638      	mov	r0, r7
    a3a2:	f012 fe5b 	bl	1d05c <assert_post_action>
			transit = mgr->transitions->stop;
    a3a6:	6923      	ldr	r3, [r4, #16]
    a3a8:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a3aa:	b956      	cbnz	r6, a3c2 <process_event+0x1ee>
    a3ac:	4639      	mov	r1, r7
    a3ae:	4640      	mov	r0, r8
    a3b0:	f240 125f 	movw	r2, #351	; 0x15f
    a3b4:	f012 fbac 	bl	1cb10 <printk>
    a3b8:	f240 115f 	movw	r1, #351	; 0x15f
    a3bc:	4638      	mov	r0, r7
    a3be:	f012 fe4d 	bl	1d05c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a3c2:	8ba3      	ldrh	r3, [r4, #28]
    a3c4:	f023 0307 	bic.w	r3, r3, #7
    a3c8:	f043 0304 	orr.w	r3, r3, #4
    a3cc:	e7ca      	b.n	a364 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a3ce:	2805      	cmp	r0, #5
    a3d0:	d12e      	bne.n	a430 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a3d2:	f1ba 0f01 	cmp.w	sl, #1
    a3d6:	d00a      	beq.n	a3ee <process_event+0x21a>
    a3d8:	4639      	mov	r1, r7
    a3da:	4640      	mov	r0, r8
    a3dc:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a3e0:	f012 fb96 	bl	1cb10 <printk>
    a3e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a3e8:	4638      	mov	r0, r7
    a3ea:	f012 fe37 	bl	1d05c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a3ee:	6823      	ldr	r3, [r4, #0]
    a3f0:	b953      	cbnz	r3, a408 <process_event+0x234>
    a3f2:	4639      	mov	r1, r7
    a3f4:	4640      	mov	r0, r8
    a3f6:	f240 1263 	movw	r2, #355	; 0x163
    a3fa:	f012 fb89 	bl	1cb10 <printk>
    a3fe:	f240 1163 	movw	r1, #355	; 0x163
    a402:	4638      	mov	r0, r7
    a404:	f012 fe2a 	bl	1d05c <assert_post_action>
			transit = mgr->transitions->reset;
    a408:	6923      	ldr	r3, [r4, #16]
    a40a:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a40c:	b956      	cbnz	r6, a424 <process_event+0x250>
    a40e:	4639      	mov	r1, r7
    a410:	4640      	mov	r0, r8
    a412:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a416:	f012 fb7b 	bl	1cb10 <printk>
    a41a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a41e:	4638      	mov	r0, r7
    a420:	f012 fe1c 	bl	1d05c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a424:	8ba3      	ldrh	r3, [r4, #28]
    a426:	f023 0307 	bic.w	r3, r3, #7
    a42a:	f043 0305 	orr.w	r3, r3, #5
    a42e:	e799      	b.n	a364 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a430:	2500      	movs	r5, #0
    a432:	f240 1269 	movw	r2, #361	; 0x169
    a436:	4639      	mov	r1, r7
    a438:	4640      	mov	r0, r8
    a43a:	f012 fb69 	bl	1cb10 <printk>
    a43e:	f240 1169 	movw	r1, #361	; 0x169
    a442:	4638      	mov	r0, r7
    a444:	f012 fe0a 	bl	1d05c <assert_post_action>
		onoff_transition_fn transit = NULL;
    a448:	462e      	mov	r6, r5
    a44a:	e78d      	b.n	a368 <process_event+0x194>
    a44c:	00022f51 	.word	0x00022f51
    a450:	00022f17 	.word	0x00022f17
    a454:	00022f2f 	.word	0x00022f2f
				   && !sys_slist_is_empty(&mgr->monitors);
    a458:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a45c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a460:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a462:	f104 0314 	add.w	r3, r4, #20
    a466:	4618      	mov	r0, r3
    a468:	9301      	str	r3, [sp, #4]
    a46a:	f011 fb8b 	bl	1bb84 <z_spin_unlock_valid>
    a46e:	b940      	cbnz	r0, a482 <process_event+0x2ae>
    a470:	4640      	mov	r0, r8
    a472:	4931      	ldr	r1, [pc, #196]	; (a538 <process_event+0x364>)
    a474:	22a7      	movs	r2, #167	; 0xa7
    a476:	f012 fb4b 	bl	1cb10 <printk>
    a47a:	21a7      	movs	r1, #167	; 0xa7
    a47c:	482e      	ldr	r0, [pc, #184]	; (a538 <process_event+0x364>)
    a47e:	f012 fded 	bl	1d05c <assert_post_action>
    a482:	f38b 8811 	msr	BASEPRI, fp
    a486:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a48a:	f1ba 0f00 	cmp.w	sl, #0
    a48e:	d130      	bne.n	a4f2 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a490:	2d00      	cmp	r5, #0
    a492:	d140      	bne.n	a516 <process_event+0x342>
			if (transit != NULL) {
    a494:	b116      	cbz	r6, a49c <process_event+0x2c8>
				transit(mgr, transition_complete);
    a496:	4620      	mov	r0, r4
    a498:	4928      	ldr	r1, [pc, #160]	; (a53c <process_event+0x368>)
    a49a:	47b0      	blx	r6
	__asm__ volatile(
    a49c:	f04f 0320 	mov.w	r3, #32
    a4a0:	f3ef 8b11 	mrs	fp, BASEPRI
    a4a4:	f383 8811 	msr	BASEPRI, r3
    a4a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a4ac:	9801      	ldr	r0, [sp, #4]
    a4ae:	f011 fb5b 	bl	1bb68 <z_spin_lock_valid>
    a4b2:	b940      	cbnz	r0, a4c6 <process_event+0x2f2>
    a4b4:	4640      	mov	r0, r8
    a4b6:	4920      	ldr	r1, [pc, #128]	; (a538 <process_event+0x364>)
    a4b8:	227c      	movs	r2, #124	; 0x7c
    a4ba:	f012 fb29 	bl	1cb10 <printk>
    a4be:	217c      	movs	r1, #124	; 0x7c
    a4c0:	481d      	ldr	r0, [pc, #116]	; (a538 <process_event+0x364>)
    a4c2:	f012 fdcb 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
    a4c6:	9801      	ldr	r0, [sp, #4]
    a4c8:	f011 fb6a 	bl	1bba0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a4cc:	8ba3      	ldrh	r3, [r4, #28]
    a4ce:	f023 0308 	bic.w	r3, r3, #8
    a4d2:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a4d4:	8ba3      	ldrh	r3, [r4, #28]
    a4d6:	06da      	lsls	r2, r3, #27
    a4d8:	d525      	bpl.n	a526 <process_event+0x352>
			evt = EVT_COMPLETE;
    a4da:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a4dc:	f023 0310 	bic.w	r3, r3, #16
    a4e0:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a4e2:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a4e6:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a4ea:	2900      	cmp	r1, #0
    a4ec:	f47f ae9d 	bne.w	a22a <process_event+0x56>
out:
    a4f0:	e681      	b.n	a1f6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a4f2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a4f4:	2900      	cmp	r1, #0
    a4f6:	d0cb      	beq.n	a490 <process_event+0x2bc>
	return node->next;
    a4f8:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a4fc:	464b      	mov	r3, r9
    a4fe:	4620      	mov	r0, r4
    a500:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a504:	9a00      	ldr	r2, [sp, #0]
    a506:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a508:	f1ba 0f00 	cmp.w	sl, #0
    a50c:	d0c0      	beq.n	a490 <process_event+0x2bc>
    a50e:	4651      	mov	r1, sl
    a510:	f8da a000 	ldr.w	sl, [sl]
    a514:	e7f2      	b.n	a4fc <process_event+0x328>
    a516:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a518:	464b      	mov	r3, r9
    a51a:	4620      	mov	r0, r4
    a51c:	9a00      	ldr	r2, [sp, #0]
    a51e:	682d      	ldr	r5, [r5, #0]
    a520:	f012 fb2c 	bl	1cb7c <notify_one>
    a524:	e7b4      	b.n	a490 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a526:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a52a:	bf1e      	ittt	ne
    a52c:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a530:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a532:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a534:	e7d5      	b.n	a4e2 <process_event+0x30e>
    a536:	bf00      	nop
    a538:	00022f51 	.word	0x00022f51
    a53c:	0000a541 	.word	0x0000a541

0000a540 <transition_complete>:
{
    a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a542:	4604      	mov	r4, r0
    a544:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a546:	f100 0614 	add.w	r6, r0, #20
    a54a:	f04f 0320 	mov.w	r3, #32
    a54e:	f3ef 8711 	mrs	r7, BASEPRI
    a552:	f383 8811 	msr	BASEPRI, r3
    a556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a55a:	4630      	mov	r0, r6
    a55c:	f011 fb04 	bl	1bb68 <z_spin_lock_valid>
    a560:	b940      	cbnz	r0, a574 <transition_complete+0x34>
    a562:	490a      	ldr	r1, [pc, #40]	; (a58c <transition_complete+0x4c>)
    a564:	480a      	ldr	r0, [pc, #40]	; (a590 <transition_complete+0x50>)
    a566:	227c      	movs	r2, #124	; 0x7c
    a568:	f012 fad2 	bl	1cb10 <printk>
    a56c:	217c      	movs	r1, #124	; 0x7c
    a56e:	4807      	ldr	r0, [pc, #28]	; (a58c <transition_complete+0x4c>)
    a570:	f012 fd74 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
    a574:	4630      	mov	r0, r6
    a576:	f011 fb13 	bl	1bba0 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a57a:	463a      	mov	r2, r7
    a57c:	4620      	mov	r0, r4
	mgr->last_res = res;
    a57e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a580:	2101      	movs	r1, #1
}
    a582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a586:	f7ff be25 	b.w	a1d4 <process_event>
    a58a:	bf00      	nop
    a58c:	00022f51 	.word	0x00022f51
    a590:	00022f17 	.word	0x00022f17

0000a594 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a598:	4604      	mov	r4, r0
    a59a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a59c:	f012 fb04 	bl	1cba8 <validate_args>

	if (rv < 0) {
    a5a0:	1e05      	subs	r5, r0, #0
    a5a2:	db54      	blt.n	a64e <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a5a4:	f104 0914 	add.w	r9, r4, #20
    a5a8:	f04f 0320 	mov.w	r3, #32
    a5ac:	f3ef 8a11 	mrs	sl, BASEPRI
    a5b0:	f383 8811 	msr	BASEPRI, r3
    a5b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5b8:	4648      	mov	r0, r9
    a5ba:	f011 fad5 	bl	1bb68 <z_spin_lock_valid>
    a5be:	b940      	cbnz	r0, a5d2 <onoff_request+0x3e>
    a5c0:	4933      	ldr	r1, [pc, #204]	; (a690 <onoff_request+0xfc>)
    a5c2:	4834      	ldr	r0, [pc, #208]	; (a694 <onoff_request+0x100>)
    a5c4:	227c      	movs	r2, #124	; 0x7c
    a5c6:	f012 faa3 	bl	1cb10 <printk>
    a5ca:	217c      	movs	r1, #124	; 0x7c
    a5cc:	4830      	ldr	r0, [pc, #192]	; (a690 <onoff_request+0xfc>)
    a5ce:	f012 fd45 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
    a5d2:	4648      	mov	r0, r9
    a5d4:	f011 fae4 	bl	1bba0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a5d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a5dc:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a5de:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a5e0:	428b      	cmp	r3, r1
    a5e2:	f002 0607 	and.w	r6, r2, #7
    a5e6:	d04a      	beq.n	a67e <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a5e8:	2e02      	cmp	r6, #2
    a5ea:	d11f      	bne.n	a62c <onoff_request+0x98>
	rv = state;
    a5ec:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a5ee:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a5f2:	3301      	adds	r3, #1
    a5f4:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5f6:	4648      	mov	r0, r9
    a5f8:	f011 fac4 	bl	1bb84 <z_spin_unlock_valid>
    a5fc:	b940      	cbnz	r0, a610 <onoff_request+0x7c>
    a5fe:	4924      	ldr	r1, [pc, #144]	; (a690 <onoff_request+0xfc>)
    a600:	4824      	ldr	r0, [pc, #144]	; (a694 <onoff_request+0x100>)
    a602:	22a7      	movs	r2, #167	; 0xa7
    a604:	f012 fa84 	bl	1cb10 <printk>
    a608:	21a7      	movs	r1, #167	; 0xa7
    a60a:	4821      	ldr	r0, [pc, #132]	; (a690 <onoff_request+0xfc>)
    a60c:	f012 fd26 	bl	1d05c <assert_post_action>
	__asm__ volatile(
    a610:	f38a 8811 	msr	BASEPRI, sl
    a614:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a618:	f1b8 0f00 	cmp.w	r8, #0
    a61c:	d017      	beq.n	a64e <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a61e:	2300      	movs	r3, #0
    a620:	4632      	mov	r2, r6
    a622:	4639      	mov	r1, r7
    a624:	4620      	mov	r0, r4
    a626:	f012 faa9 	bl	1cb7c <notify_one>
    a62a:	e010      	b.n	a64e <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a62c:	0793      	lsls	r3, r2, #30
    a62e:	d001      	beq.n	a634 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a630:	2e06      	cmp	r6, #6
    a632:	d10f      	bne.n	a654 <onoff_request+0xc0>
	parent->next = child;
    a634:	2300      	movs	r3, #0
    a636:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a638:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a63a:	b9eb      	cbnz	r3, a678 <onoff_request+0xe4>
	list->head = node;
    a63c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a640:	4635      	mov	r5, r6
    a642:	b9f6      	cbnz	r6, a682 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a644:	4652      	mov	r2, sl
    a646:	2102      	movs	r1, #2
    a648:	4620      	mov	r0, r4
    a64a:	f7ff fdc3 	bl	a1d4 <process_event>
		}
	}

	return rv;
}
    a64e:	4628      	mov	r0, r5
    a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a654:	2e05      	cmp	r6, #5
    a656:	d017      	beq.n	a688 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a658:	2e01      	cmp	r6, #1
    a65a:	d00a      	beq.n	a672 <onoff_request+0xde>
    a65c:	490e      	ldr	r1, [pc, #56]	; (a698 <onoff_request+0x104>)
    a65e:	480d      	ldr	r0, [pc, #52]	; (a694 <onoff_request+0x100>)
    a660:	f240 12c5 	movw	r2, #453	; 0x1c5
    a664:	f012 fa54 	bl	1cb10 <printk>
    a668:	f240 11c5 	movw	r1, #453	; 0x1c5
    a66c:	480a      	ldr	r0, [pc, #40]	; (a698 <onoff_request+0x104>)
    a66e:	f012 fcf5 	bl	1d05c <assert_post_action>
		rv = -EIO;
    a672:	f06f 0504 	mvn.w	r5, #4
    a676:	e004      	b.n	a682 <onoff_request+0xee>
	parent->next = child;
    a678:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a67a:	6067      	str	r7, [r4, #4]
}
    a67c:	e7e0      	b.n	a640 <onoff_request+0xac>
		rv = -EAGAIN;
    a67e:	f06f 050a 	mvn.w	r5, #10
    a682:	f04f 0800 	mov.w	r8, #0
    a686:	e7b6      	b.n	a5f6 <onoff_request+0x62>
		rv = -ENOTSUP;
    a688:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a68c:	e7f9      	b.n	a682 <onoff_request+0xee>
    a68e:	bf00      	nop
    a690:	00022f51 	.word	0x00022f51
    a694:	00022f17 	.word	0x00022f17
    a698:	00022f2f 	.word	0x00022f2f

0000a69c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6a0:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a6a2:	4e14      	ldr	r6, [pc, #80]	; (a6f4 <z_work_q_main+0x58>)
    a6a4:	f8df 8050 	ldr.w	r8, [pc, #80]	; a6f8 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a6a8:	f04f 32ff 	mov.w	r2, #4294967295
    a6ac:	f04f 33ff 	mov.w	r3, #4294967295
    a6b0:	4628      	mov	r0, r5
    a6b2:	f010 f801 	bl	1a6b8 <z_impl_k_queue_get>
		if (work == NULL) {
    a6b6:	4604      	mov	r4, r0
    a6b8:	2800      	cmp	r0, #0
    a6ba:	d0f5      	beq.n	a6a8 <z_work_q_main+0xc>
		handler = work->handler;
    a6bc:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a6be:	b947      	cbnz	r7, a6d2 <z_work_q_main+0x36>
    a6c0:	4631      	mov	r1, r6
    a6c2:	4640      	mov	r0, r8
    a6c4:	221c      	movs	r2, #28
    a6c6:	f012 fa23 	bl	1cb10 <printk>
    a6ca:	211c      	movs	r1, #28
    a6cc:	4630      	mov	r0, r6
    a6ce:	f012 fcc5 	bl	1d05c <assert_post_action>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6d2:	f104 0308 	add.w	r3, r4, #8
    a6d6:	e8d3 2fef 	ldaex	r2, [r3]
    a6da:	f022 0101 	bic.w	r1, r2, #1
    a6de:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a6e2:	2800      	cmp	r0, #0
    a6e4:	d1f7      	bne.n	a6d6 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a6e6:	07d3      	lsls	r3, r2, #31
    a6e8:	d501      	bpl.n	a6ee <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a6ea:	4620      	mov	r0, r4
    a6ec:	47b8      	blx	r7
	z_impl_k_yield();
    a6ee:	f010 ff0d 	bl	1b50c <z_impl_k_yield>
    a6f2:	e7d9      	b.n	a6a8 <z_work_q_main+0xc>
    a6f4:	00022f77 	.word	0x00022f77
    a6f8:	00022f17 	.word	0x00022f17

0000a6fc <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a6fc:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a6fe:	2900      	cmp	r1, #0
    a700:	d039      	beq.n	a776 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a702:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a704:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a706:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a708:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a70a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a70e:	bf2c      	ite	cs
    a710:	2408      	movcs	r4, #8
    a712:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a714:	1b0c      	subs	r4, r1, r4
    a716:	1b64      	subs	r4, r4, r5
    a718:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a71a:	4621      	mov	r1, r4
    a71c:	f012 fa70 	bl	1cc00 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a720:	07c3      	lsls	r3, r0, #31
    a722:	d408      	bmi.n	a736 <sys_heap_free+0x3a>
    a724:	4914      	ldr	r1, [pc, #80]	; (a778 <sys_heap_free+0x7c>)
    a726:	4815      	ldr	r0, [pc, #84]	; (a77c <sys_heap_free+0x80>)
    a728:	229a      	movs	r2, #154	; 0x9a
    a72a:	f012 f9f1 	bl	1cb10 <printk>
    a72e:	219a      	movs	r1, #154	; 0x9a
    a730:	4811      	ldr	r0, [pc, #68]	; (a778 <sys_heap_free+0x7c>)
    a732:	f012 fc93 	bl	1d05c <assert_post_action>
	return c + chunk_size(h, c);
    a736:	4621      	mov	r1, r4
    a738:	4628      	mov	r0, r5
    a73a:	f012 fa77 	bl	1cc2c <chunk_size>
    a73e:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a740:	4631      	mov	r1, r6
    a742:	2200      	movs	r2, #0
    a744:	4628      	mov	r0, r5
    a746:	f012 fa5b 	bl	1cc00 <chunk_field>
    a74a:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a74c:	42b4      	cmp	r4, r6
    a74e:	d008      	beq.n	a762 <sys_heap_free+0x66>
    a750:	4909      	ldr	r1, [pc, #36]	; (a778 <sys_heap_free+0x7c>)
    a752:	480a      	ldr	r0, [pc, #40]	; (a77c <sys_heap_free+0x80>)
    a754:	22a2      	movs	r2, #162	; 0xa2
    a756:	f012 f9db 	bl	1cb10 <printk>
    a75a:	21a2      	movs	r1, #162	; 0xa2
    a75c:	4806      	ldr	r0, [pc, #24]	; (a778 <sys_heap_free+0x7c>)
    a75e:	f012 fc7d 	bl	1d05c <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a762:	4621      	mov	r1, r4
    a764:	4628      	mov	r0, r5
    a766:	2200      	movs	r2, #0
    a768:	f012 fa66 	bl	1cc38 <set_chunk_used>
	free_chunk(h, c);
    a76c:	4621      	mov	r1, r4
}
    a76e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a772:	f012 bba3 	b.w	1cebc <free_chunk>
}
    a776:	bd70      	pop	{r4, r5, r6, pc}
    a778:	00022f9a 	.word	0x00022f9a
    a77c:	00022f17 	.word	0x00022f17

0000a780 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a784:	f101 39ff 	add.w	r9, r1, #4294967295
    a788:	ea19 0f01 	tst.w	r9, r1
{
    a78c:	4680      	mov	r8, r0
    a78e:	460f      	mov	r7, r1
    a790:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a792:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a794:	d008      	beq.n	a7a8 <sys_heap_aligned_alloc+0x28>
    a796:	4931      	ldr	r1, [pc, #196]	; (a85c <sys_heap_aligned_alloc+0xdc>)
    a798:	4831      	ldr	r0, [pc, #196]	; (a860 <sys_heap_aligned_alloc+0xe0>)
    a79a:	22fc      	movs	r2, #252	; 0xfc
    a79c:	f012 f9b8 	bl	1cb10 <printk>
    a7a0:	21fc      	movs	r1, #252	; 0xfc
    a7a2:	482e      	ldr	r0, [pc, #184]	; (a85c <sys_heap_aligned_alloc+0xdc>)
    a7a4:	f012 fc5a 	bl	1d05c <assert_post_action>
	return big_heap_chunks(h->len);
    a7a8:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a7aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a7ae:	bf2c      	ite	cs
    a7b0:	2308      	movcs	r3, #8
    a7b2:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a7b4:	429f      	cmp	r7, r3
    a7b6:	d805      	bhi.n	a7c4 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a7b8:	4621      	mov	r1, r4
    a7ba:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a7bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a7c0:	f012 bbbe 	b.w	1cf40 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a7c4:	b91c      	cbnz	r4, a7ce <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a7c6:	2600      	movs	r6, #0
}
    a7c8:	4630      	mov	r0, r6
    a7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a7ce:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a7d2:	d9f8      	bls.n	a7c6 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a7d4:	1939      	adds	r1, r7, r4
    a7d6:	1ac9      	subs	r1, r1, r3
    a7d8:	f012 fa4a 	bl	1cc70 <bytes_to_chunksz.isra.0>
    a7dc:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a7de:	4628      	mov	r0, r5
    a7e0:	f012 faa1 	bl	1cd26 <alloc_chunk>
	if (c0 == 0) {
    a7e4:	4680      	mov	r8, r0
    a7e6:	2800      	cmp	r0, #0
    a7e8:	d0ed      	beq.n	a7c6 <sys_heap_aligned_alloc+0x46>
    a7ea:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a7ec:	427f      	negs	r7, r7
    a7ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a7f2:	bf2c      	ite	cs
    a7f4:	2308      	movcs	r3, #8
    a7f6:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a7f8:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a7fc:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a7fe:	444e      	add	r6, r9
    a800:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a802:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a804:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a806:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a808:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a80a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a80e:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a810:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a814:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a818:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a81c:	d208      	bcs.n	a830 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a81e:	4601      	mov	r1, r0
    a820:	463a      	mov	r2, r7
    a822:	4628      	mov	r0, r5
    a824:	f012 fac2 	bl	1cdac <split_chunks>
		free_list_add(h, c0);
    a828:	4641      	mov	r1, r8
    a82a:	4628      	mov	r0, r5
    a82c:	f012 fb03 	bl	1ce36 <free_list_add>
	return c + chunk_size(h, c);
    a830:	4639      	mov	r1, r7
    a832:	4628      	mov	r0, r5
    a834:	f012 f9fa 	bl	1cc2c <chunk_size>
    a838:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a83a:	4284      	cmp	r4, r0
    a83c:	d208      	bcs.n	a850 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a83e:	4639      	mov	r1, r7
    a840:	4628      	mov	r0, r5
    a842:	4622      	mov	r2, r4
    a844:	f012 fab2 	bl	1cdac <split_chunks>
		free_list_add(h, c_end);
    a848:	4621      	mov	r1, r4
    a84a:	4628      	mov	r0, r5
    a84c:	f012 faf3 	bl	1ce36 <free_list_add>
	set_chunk_used(h, c, true);
    a850:	2201      	movs	r2, #1
    a852:	4639      	mov	r1, r7
    a854:	4628      	mov	r0, r5
    a856:	f012 f9ef 	bl	1cc38 <set_chunk_used>
	return mem;
    a85a:	e7b5      	b.n	a7c8 <sys_heap_aligned_alloc+0x48>
    a85c:	00022f9a 	.word	0x00022f9a
    a860:	00022f17 	.word	0x00022f17

0000a864 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a864:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a86a:	4607      	mov	r7, r0
    a86c:	460c      	mov	r4, r1
    a86e:	4616      	mov	r6, r2
    a870:	d20e      	bcs.n	a890 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a872:	2a04      	cmp	r2, #4
    a874:	d80a      	bhi.n	a88c <sys_heap_init+0x28>
    a876:	493d      	ldr	r1, [pc, #244]	; (a96c <sys_heap_init+0x108>)
    a878:	483d      	ldr	r0, [pc, #244]	; (a970 <sys_heap_init+0x10c>)
    a87a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a87e:	f012 f947 	bl	1cb10 <printk>
    a882:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a886:	4839      	ldr	r0, [pc, #228]	; (a96c <sys_heap_init+0x108>)
    a888:	f012 fbe8 	bl	1d05c <assert_post_action>
    a88c:	2204      	movs	r2, #4
    a88e:	e000      	b.n	a892 <sys_heap_init+0x2e>
    a890:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a892:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a894:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a896:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a898:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a89c:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a8a0:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a8a2:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a8a4:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a8a8:	d80a      	bhi.n	a8c0 <sys_heap_init+0x5c>
    a8aa:	4930      	ldr	r1, [pc, #192]	; (a96c <sys_heap_init+0x108>)
    a8ac:	4830      	ldr	r0, [pc, #192]	; (a970 <sys_heap_init+0x10c>)
    a8ae:	f240 1275 	movw	r2, #373	; 0x175
    a8b2:	f012 f92d 	bl	1cb10 <printk>
    a8b6:	f240 1175 	movw	r1, #373	; 0x175
    a8ba:	482c      	ldr	r0, [pc, #176]	; (a96c <sys_heap_init+0x108>)
    a8bc:	f012 fbce 	bl	1d05c <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a8c0:	2300      	movs	r3, #0
    a8c2:	2200      	movs	r2, #0
	heap->heap = h;
    a8c4:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a8c6:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a8ca:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a8cc:	4631      	mov	r1, r6
    a8ce:	4630      	mov	r0, r6
	h->len = buf_sz;
    a8d0:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a8d2:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a8d4:	f012 f9d5 	bl	1cc82 <bucket_idx.isra.0>
    a8d8:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a8da:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a8dc:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a8de:	4630      	mov	r0, r6
    a8e0:	f012 f9c6 	bl	1cc70 <bytes_to_chunksz.isra.0>
    a8e4:	341b      	adds	r4, #27
    a8e6:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a8e8:	4420      	add	r0, r4
    a8ea:	42b0      	cmp	r0, r6
    a8ec:	d30a      	bcc.n	a904 <sys_heap_init+0xa0>
    a8ee:	491f      	ldr	r1, [pc, #124]	; (a96c <sys_heap_init+0x108>)
    a8f0:	481f      	ldr	r0, [pc, #124]	; (a970 <sys_heap_init+0x10c>)
    a8f2:	f240 1281 	movw	r2, #385	; 0x181
    a8f6:	f012 f90b 	bl	1cb10 <printk>
    a8fa:	f240 1181 	movw	r1, #385	; 0x181
    a8fe:	481b      	ldr	r0, [pc, #108]	; (a96c <sys_heap_init+0x108>)
    a900:	f012 fbac 	bl	1d05c <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a904:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a906:	4619      	mov	r1, r3
    a908:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a90c:	42bb      	cmp	r3, r7
    a90e:	db28      	blt.n	a962 <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a910:	4622      	mov	r2, r4
    a912:	4628      	mov	r0, r5
    a914:	2100      	movs	r1, #0
    a916:	f012 f9a7 	bl	1cc68 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a91a:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a91c:	4628      	mov	r0, r5
    a91e:	2201      	movs	r2, #1
    a920:	2100      	movs	r1, #0
    a922:	f012 f989 	bl	1cc38 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a926:	463a      	mov	r2, r7
    a928:	4621      	mov	r1, r4
    a92a:	f012 f99d 	bl	1cc68 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a92e:	4623      	mov	r3, r4
    a930:	2200      	movs	r2, #0
    a932:	4621      	mov	r1, r4
    a934:	4628      	mov	r0, r5
    a936:	f012 f96e 	bl	1cc16 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a93a:	4631      	mov	r1, r6
    a93c:	4628      	mov	r0, r5
    a93e:	f012 f993 	bl	1cc68 <set_chunk_size>
    a942:	463b      	mov	r3, r7
    a944:	4631      	mov	r1, r6
    a946:	4628      	mov	r0, r5
    a948:	2200      	movs	r2, #0
    a94a:	f012 f964 	bl	1cc16 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a94e:	4631      	mov	r1, r6
    a950:	4628      	mov	r0, r5
    a952:	2201      	movs	r2, #1
    a954:	f012 f970 	bl	1cc38 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a958:	4621      	mov	r1, r4
}
    a95a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a95e:	f012 ba6a 	b.w	1ce36 <free_list_add>
		h->buckets[i].next = 0;
    a962:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a966:	3301      	adds	r3, #1
    a968:	e7d0      	b.n	a90c <sys_heap_init+0xa8>
    a96a:	bf00      	nop
    a96c:	00022f9a 	.word	0x00022f9a
    a970:	00022f17 	.word	0x00022f17

0000a974 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a978:	468b      	mov	fp, r1
    a97a:	4692      	mov	sl, r2
    a97c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a97e:	2500      	movs	r5, #0
{
    a980:	b091      	sub	sp, #68	; 0x44
    a982:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a984:	f89a 0000 	ldrb.w	r0, [sl]
    a988:	b908      	cbnz	r0, a98e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a98a:	4628      	mov	r0, r5
    a98c:	e35f      	b.n	b04e <cbvprintf+0x6da>
		if (*fp != '%') {
    a98e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a990:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a994:	d007      	beq.n	a9a6 <cbvprintf+0x32>
			OUTC('%');
    a996:	4659      	mov	r1, fp
    a998:	9b02      	ldr	r3, [sp, #8]
    a99a:	4798      	blx	r3
    a99c:	2800      	cmp	r0, #0
    a99e:	f2c0 8356 	blt.w	b04e <cbvprintf+0x6da>
    a9a2:	3501      	adds	r5, #1
			break;
    a9a4:	e212      	b.n	adcc <cbvprintf+0x458>
		} state = {
    a9a6:	2218      	movs	r2, #24
    a9a8:	2100      	movs	r1, #0
    a9aa:	a80a      	add	r0, sp, #40	; 0x28
    a9ac:	f013 fd93 	bl	1e4d6 <memset>
	if (*sp == '%') {
    a9b0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a9b4:	2b25      	cmp	r3, #37	; 0x25
    a9b6:	d078      	beq.n	aaaa <cbvprintf+0x136>
    a9b8:	2200      	movs	r2, #0
    a9ba:	4694      	mov	ip, r2
    a9bc:	4696      	mov	lr, r2
    a9be:	4616      	mov	r6, r2
    a9c0:	4610      	mov	r0, r2
    a9c2:	4639      	mov	r1, r7
		switch (*sp) {
    a9c4:	f817 3b01 	ldrb.w	r3, [r7], #1
    a9c8:	2b2b      	cmp	r3, #43	; 0x2b
    a9ca:	f000 809d 	beq.w	ab08 <cbvprintf+0x194>
    a9ce:	f200 8094 	bhi.w	aafa <cbvprintf+0x186>
    a9d2:	2b20      	cmp	r3, #32
    a9d4:	f000 809a 	beq.w	ab0c <cbvprintf+0x198>
    a9d8:	2b23      	cmp	r3, #35	; 0x23
    a9da:	f000 809a 	beq.w	ab12 <cbvprintf+0x19e>
    a9de:	b128      	cbz	r0, a9ec <cbvprintf+0x78>
    a9e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a9e4:	f040 0004 	orr.w	r0, r0, #4
    a9e8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a9ec:	b12e      	cbz	r6, a9fa <cbvprintf+0x86>
    a9ee:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a9f2:	f040 0008 	orr.w	r0, r0, #8
    a9f6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a9fa:	f1be 0f00 	cmp.w	lr, #0
    a9fe:	d005      	beq.n	aa0c <cbvprintf+0x98>
    aa00:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    aa04:	f040 0010 	orr.w	r0, r0, #16
    aa08:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    aa0c:	f1bc 0f00 	cmp.w	ip, #0
    aa10:	d005      	beq.n	aa1e <cbvprintf+0xaa>
    aa12:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    aa16:	f040 0020 	orr.w	r0, r0, #32
    aa1a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    aa1e:	b12a      	cbz	r2, aa2c <cbvprintf+0xb8>
    aa20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    aa24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    aa28:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    aa2c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    aa30:	f002 0044 	and.w	r0, r2, #68	; 0x44
    aa34:	2844      	cmp	r0, #68	; 0x44
    aa36:	d103      	bne.n	aa40 <cbvprintf+0xcc>
		conv->flag_zero = false;
    aa38:	f36f 1286 	bfc	r2, #6, #1
    aa3c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    aa40:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    aa44:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    aa46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    aa4a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    aa4e:	d17b      	bne.n	ab48 <cbvprintf+0x1d4>
		conv->width_star = true;
    aa50:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    aa54:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    aa56:	f042 0201 	orr.w	r2, r2, #1
    aa5a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    aa5e:	781a      	ldrb	r2, [r3, #0]
    aa60:	2a2e      	cmp	r2, #46	; 0x2e
    aa62:	bf0c      	ite	eq
    aa64:	2101      	moveq	r1, #1
    aa66:	2100      	movne	r1, #0
    aa68:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aa6c:	f361 0241 	bfi	r2, r1, #1, #1
    aa70:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    aa74:	d174      	bne.n	ab60 <cbvprintf+0x1ec>
	if (*sp == '*') {
    aa76:	785a      	ldrb	r2, [r3, #1]
    aa78:	2a2a      	cmp	r2, #42	; 0x2a
    aa7a:	d06a      	beq.n	ab52 <cbvprintf+0x1de>
	size_t val = 0;
    aa7c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    aa7e:	260a      	movs	r6, #10
	++sp;
    aa80:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    aa82:	4618      	mov	r0, r3
    aa84:	f810 2b01 	ldrb.w	r2, [r0], #1
    aa88:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    aa8c:	2f09      	cmp	r7, #9
    aa8e:	f240 808e 	bls.w	abae <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    aa92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    aa96:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    aa98:	f3c2 0040 	ubfx	r0, r2, #1, #1
    aa9c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    aaa0:	f361 0241 	bfi	r2, r1, #1, #1
    aaa4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    aaa8:	e05a      	b.n	ab60 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    aaaa:	f10a 0702 	add.w	r7, sl, #2
    aaae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    aab2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aab6:	07d9      	lsls	r1, r3, #31
    aab8:	f140 8149 	bpl.w	ad4e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    aabc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    aac0:	f1b9 0f00 	cmp.w	r9, #0
    aac4:	da07      	bge.n	aad6 <cbvprintf+0x162>
				conv->flag_dash = true;
    aac6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    aaca:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    aace:	f042 0204 	orr.w	r2, r2, #4
    aad2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    aad6:	075a      	lsls	r2, r3, #29
    aad8:	f140 8142 	bpl.w	ad60 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    aadc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    aae0:	f1b8 0f00 	cmp.w	r8, #0
    aae4:	f280 8141 	bge.w	ad6a <cbvprintf+0x3f6>
				conv->prec_present = false;
    aae8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aaec:	f36f 0341 	bfc	r3, #1, #1
    aaf0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    aaf4:	f04f 38ff 	mov.w	r8, #4294967295
    aaf8:	e137      	b.n	ad6a <cbvprintf+0x3f6>
		switch (*sp) {
    aafa:	2b2d      	cmp	r3, #45	; 0x2d
    aafc:	d00c      	beq.n	ab18 <cbvprintf+0x1a4>
    aafe:	2b30      	cmp	r3, #48	; 0x30
    ab00:	f47f af6d 	bne.w	a9de <cbvprintf+0x6a>
			conv->flag_zero = true;
    ab04:	2201      	movs	r2, #1
	} while (loop);
    ab06:	e75c      	b.n	a9c2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    ab08:	2601      	movs	r6, #1
    ab0a:	e75a      	b.n	a9c2 <cbvprintf+0x4e>
			conv->flag_space = true;
    ab0c:	f04f 0e01 	mov.w	lr, #1
    ab10:	e757      	b.n	a9c2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    ab12:	f04f 0c01 	mov.w	ip, #1
    ab16:	e754      	b.n	a9c2 <cbvprintf+0x4e>
		switch (*sp) {
    ab18:	2001      	movs	r0, #1
    ab1a:	e752      	b.n	a9c2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    ab1c:	4633      	mov	r3, r6
    ab1e:	fb0c 0202 	mla	r2, ip, r2, r0
    ab22:	3a30      	subs	r2, #48	; 0x30
    ab24:	461e      	mov	r6, r3
    ab26:	f816 0b01 	ldrb.w	r0, [r6], #1
    ab2a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    ab2e:	2f09      	cmp	r7, #9
    ab30:	d9f4      	bls.n	ab1c <cbvprintf+0x1a8>
	if (sp != wp) {
    ab32:	4299      	cmp	r1, r3
    ab34:	d093      	beq.n	aa5e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    ab36:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    ab3a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    ab3c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    ab3e:	f362 0141 	bfi	r1, r2, #1, #1
    ab42:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    ab46:	e78a      	b.n	aa5e <cbvprintf+0xea>
    ab48:	460b      	mov	r3, r1
	size_t val = 0;
    ab4a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    ab4c:	f04f 0c0a 	mov.w	ip, #10
    ab50:	e7e8      	b.n	ab24 <cbvprintf+0x1b0>
		conv->prec_star = true;
    ab52:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    ab56:	3302      	adds	r3, #2
		conv->prec_star = true;
    ab58:	f042 0204 	orr.w	r2, r2, #4
    ab5c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    ab60:	461f      	mov	r7, r3
    ab62:	f817 2b01 	ldrb.w	r2, [r7], #1
    ab66:	2a6c      	cmp	r2, #108	; 0x6c
    ab68:	d041      	beq.n	abee <cbvprintf+0x27a>
    ab6a:	d825      	bhi.n	abb8 <cbvprintf+0x244>
    ab6c:	2a68      	cmp	r2, #104	; 0x68
    ab6e:	d02b      	beq.n	abc8 <cbvprintf+0x254>
    ab70:	2a6a      	cmp	r2, #106	; 0x6a
    ab72:	d046      	beq.n	ac02 <cbvprintf+0x28e>
    ab74:	2a4c      	cmp	r2, #76	; 0x4c
    ab76:	d04c      	beq.n	ac12 <cbvprintf+0x29e>
    ab78:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    ab7a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab7e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    ab82:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    ab84:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    ab88:	f200 80d9 	bhi.w	ad3e <cbvprintf+0x3ca>
    ab8c:	2a57      	cmp	r2, #87	; 0x57
    ab8e:	d84d      	bhi.n	ac2c <cbvprintf+0x2b8>
    ab90:	2a41      	cmp	r2, #65	; 0x41
    ab92:	d003      	beq.n	ab9c <cbvprintf+0x228>
    ab94:	3a45      	subs	r2, #69	; 0x45
    ab96:	2a02      	cmp	r2, #2
    ab98:	f200 80d1 	bhi.w	ad3e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    ab9c:	2204      	movs	r2, #4
    ab9e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    aba2:	f362 0302 	bfi	r3, r2, #0, #3
    aba6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    abaa:	2301      	movs	r3, #1
			break;
    abac:	e09e      	b.n	acec <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    abae:	fb06 2101 	mla	r1, r6, r1, r2
    abb2:	4603      	mov	r3, r0
    abb4:	3930      	subs	r1, #48	; 0x30
    abb6:	e764      	b.n	aa82 <cbvprintf+0x10e>
	switch (*sp) {
    abb8:	2a74      	cmp	r2, #116	; 0x74
    abba:	d026      	beq.n	ac0a <cbvprintf+0x296>
    abbc:	2a7a      	cmp	r2, #122	; 0x7a
    abbe:	d1db      	bne.n	ab78 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    abc0:	2206      	movs	r2, #6
    abc2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    abc6:	e00d      	b.n	abe4 <cbvprintf+0x270>
		if (*++sp == 'h') {
    abc8:	785a      	ldrb	r2, [r3, #1]
    abca:	2a68      	cmp	r2, #104	; 0x68
    abcc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    abd0:	d106      	bne.n	abe0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    abd2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    abd4:	f361 02c6 	bfi	r2, r1, #3, #4
    abd8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    abdc:	1c9f      	adds	r7, r3, #2
    abde:	e7cc      	b.n	ab7a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    abe0:	4613      	mov	r3, r2
    abe2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    abe4:	f362 03c6 	bfi	r3, r2, #3, #4
    abe8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    abec:	e7c5      	b.n	ab7a <cbvprintf+0x206>
		if (*++sp == 'l') {
    abee:	785a      	ldrb	r2, [r3, #1]
    abf0:	2a6c      	cmp	r2, #108	; 0x6c
    abf2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    abf6:	d101      	bne.n	abfc <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    abf8:	2104      	movs	r1, #4
    abfa:	e7eb      	b.n	abd4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    abfc:	4613      	mov	r3, r2
    abfe:	2203      	movs	r2, #3
    ac00:	e7f0      	b.n	abe4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    ac02:	2205      	movs	r2, #5
    ac04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ac08:	e7ec      	b.n	abe4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ac0a:	2207      	movs	r2, #7
    ac0c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ac10:	e7e8      	b.n	abe4 <cbvprintf+0x270>
		conv->unsupported = true;
    ac12:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ac16:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    ac1a:	f023 0302 	bic.w	r3, r3, #2
    ac1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ac22:	f043 0302 	orr.w	r3, r3, #2
    ac26:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    ac2a:	e7a6      	b.n	ab7a <cbvprintf+0x206>
    ac2c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    ac30:	2920      	cmp	r1, #32
    ac32:	f200 8084 	bhi.w	ad3e <cbvprintf+0x3ca>
    ac36:	a001      	add	r0, pc, #4	; (adr r0, ac3c <cbvprintf+0x2c8>)
    ac38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    ac3c:	0000ad01 	.word	0x0000ad01
    ac40:	0000ad3f 	.word	0x0000ad3f
    ac44:	0000ad3f 	.word	0x0000ad3f
    ac48:	0000ad3f 	.word	0x0000ad3f
    ac4c:	0000ad3f 	.word	0x0000ad3f
    ac50:	0000ad3f 	.word	0x0000ad3f
    ac54:	0000ad3f 	.word	0x0000ad3f
    ac58:	0000ad3f 	.word	0x0000ad3f
    ac5c:	0000ad3f 	.word	0x0000ad3f
    ac60:	0000ab9d 	.word	0x0000ab9d
    ac64:	0000ad3f 	.word	0x0000ad3f
    ac68:	0000ad01 	.word	0x0000ad01
    ac6c:	0000acc1 	.word	0x0000acc1
    ac70:	0000ab9d 	.word	0x0000ab9d
    ac74:	0000ab9d 	.word	0x0000ab9d
    ac78:	0000ab9d 	.word	0x0000ab9d
    ac7c:	0000ad3f 	.word	0x0000ad3f
    ac80:	0000acc1 	.word	0x0000acc1
    ac84:	0000ad3f 	.word	0x0000ad3f
    ac88:	0000ad3f 	.word	0x0000ad3f
    ac8c:	0000ad3f 	.word	0x0000ad3f
    ac90:	0000ad3f 	.word	0x0000ad3f
    ac94:	0000ad09 	.word	0x0000ad09
    ac98:	0000ad01 	.word	0x0000ad01
    ac9c:	0000ad25 	.word	0x0000ad25
    aca0:	0000ad3f 	.word	0x0000ad3f
    aca4:	0000ad3f 	.word	0x0000ad3f
    aca8:	0000ad25 	.word	0x0000ad25
    acac:	0000ad3f 	.word	0x0000ad3f
    acb0:	0000ad01 	.word	0x0000ad01
    acb4:	0000ad3f 	.word	0x0000ad3f
    acb8:	0000ad3f 	.word	0x0000ad3f
    acbc:	0000ad01 	.word	0x0000ad01
		conv->specifier_cat = SPECIFIER_SINT;
    acc0:	2001      	movs	r0, #1
    acc2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    acc6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    acca:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    acce:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    acd0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    acd4:	bf02      	ittt	eq
    acd6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    acda:	f041 0101 	orreq.w	r1, r1, #1
    acde:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    ace2:	2a63      	cmp	r2, #99	; 0x63
    ace4:	d131      	bne.n	ad4a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ace6:	3b00      	subs	r3, #0
    ace8:	bf18      	it	ne
    acea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    acec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    acf0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    acf4:	430b      	orrs	r3, r1
    acf6:	f363 0241 	bfi	r2, r3, #1, #1
    acfa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    acfe:	e6d8      	b.n	aab2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    ad00:	2002      	movs	r0, #2
    ad02:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    ad06:	e7de      	b.n	acc6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    ad08:	2103      	movs	r1, #3
    ad0a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ad0e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    ad12:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    ad16:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ad1a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    ad1c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ad20:	4143      	adcs	r3, r0
    ad22:	e7e3      	b.n	acec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    ad24:	2103      	movs	r1, #3
    ad26:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    ad2a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ad2e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    ad32:	bf14      	ite	ne
    ad34:	2301      	movne	r3, #1
    ad36:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    ad38:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    ad3c:	e7d6      	b.n	acec <cbvprintf+0x378>
		conv->invalid = true;
    ad3e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ad42:	f043 0301 	orr.w	r3, r3, #1
    ad46:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    ad4a:	2300      	movs	r3, #0
    ad4c:	e7ce      	b.n	acec <cbvprintf+0x378>
		} else if (conv->width_present) {
    ad4e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    ad52:	2a00      	cmp	r2, #0
		int width = -1;
    ad54:	bfac      	ite	ge
    ad56:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    ad5a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    ad5e:	e6ba      	b.n	aad6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    ad60:	079b      	lsls	r3, r3, #30
    ad62:	f57f aec7 	bpl.w	aaf4 <cbvprintf+0x180>
			precision = conv->prec_value;
    ad66:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    ad6a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    ad6c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    ad70:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    ad74:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    ad78:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    ad7c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ad7e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ad82:	d138      	bne.n	adf6 <cbvprintf+0x482>
			switch (length_mod) {
    ad84:	1ecb      	subs	r3, r1, #3
    ad86:	2b04      	cmp	r3, #4
    ad88:	d822      	bhi.n	add0 <cbvprintf+0x45c>
    ad8a:	e8df f003 	tbb	[pc, r3]
    ad8e:	0903      	.short	0x0903
    ad90:	2109      	.short	0x2109
    ad92:	21          	.byte	0x21
    ad93:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    ad94:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    ad98:	17da      	asrs	r2, r3, #31
    ad9a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    ad9e:	e006      	b.n	adae <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    ada0:	3407      	adds	r4, #7
    ada2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    ada6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    adaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    adae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    adb2:	f013 0603 	ands.w	r6, r3, #3
    adb6:	d056      	beq.n	ae66 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    adb8:	463b      	mov	r3, r7
    adba:	4652      	mov	r2, sl
    adbc:	4659      	mov	r1, fp
    adbe:	9802      	ldr	r0, [sp, #8]
    adc0:	f012 f936 	bl	1d030 <outs>
    adc4:	2800      	cmp	r0, #0
    adc6:	f2c0 8142 	blt.w	b04e <cbvprintf+0x6da>
    adca:	4405      	add	r5, r0
			continue;
    adcc:	46ba      	mov	sl, r7
    adce:	e5d9      	b.n	a984 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    add0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    add4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    add6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    adda:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    adde:	d105      	bne.n	adec <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    ade0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    ade4:	930a      	str	r3, [sp, #40]	; 0x28
    ade6:	2300      	movs	r3, #0
    ade8:	930b      	str	r3, [sp, #44]	; 0x2c
    adea:	e7e0      	b.n	adae <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    adec:	2902      	cmp	r1, #2
    adee:	d1de      	bne.n	adae <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    adf0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    adf4:	e7d0      	b.n	ad98 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    adf6:	2b02      	cmp	r3, #2
    adf8:	d123      	bne.n	ae42 <cbvprintf+0x4ce>
			switch (length_mod) {
    adfa:	1ecb      	subs	r3, r1, #3
    adfc:	2b04      	cmp	r3, #4
    adfe:	d813      	bhi.n	ae28 <cbvprintf+0x4b4>
    ae00:	e8df f003 	tbb	[pc, r3]
    ae04:	120a0a03 	.word	0x120a0a03
    ae08:	12          	.byte	0x12
    ae09:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    ae0a:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    ae0c:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    ae0e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    ae10:	920a      	str	r2, [sp, #40]	; 0x28
    ae12:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    ae14:	4604      	mov	r4, r0
    ae16:	e7ca      	b.n	adae <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    ae18:	1de0      	adds	r0, r4, #7
    ae1a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    ae1e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ae22:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    ae26:	e7f5      	b.n	ae14 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    ae28:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ae2c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    ae2e:	930a      	str	r3, [sp, #40]	; 0x28
    ae30:	f04f 0300 	mov.w	r3, #0
    ae34:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    ae36:	d0d3      	beq.n	ade0 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    ae38:	2902      	cmp	r1, #2
    ae3a:	d1b8      	bne.n	adae <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    ae3c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ae40:	e7d0      	b.n	ade4 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    ae42:	2b04      	cmp	r3, #4
    ae44:	d109      	bne.n	ae5a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    ae46:	1de3      	adds	r3, r4, #7
    ae48:	f023 0307 	bic.w	r3, r3, #7
    ae4c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ae58:	e7a9      	b.n	adae <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ae5a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ae5c:	bf04      	itt	eq
    ae5e:	f854 3b04 	ldreq.w	r3, [r4], #4
    ae62:	930a      	streq	r3, [sp, #40]	; 0x28
    ae64:	e7a3      	b.n	adae <cbvprintf+0x43a>
		switch (conv->specifier) {
    ae66:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ae6a:	2878      	cmp	r0, #120	; 0x78
    ae6c:	d8ae      	bhi.n	adcc <cbvprintf+0x458>
    ae6e:	2862      	cmp	r0, #98	; 0x62
    ae70:	d822      	bhi.n	aeb8 <cbvprintf+0x544>
    ae72:	2825      	cmp	r0, #37	; 0x25
    ae74:	f43f ad8f 	beq.w	a996 <cbvprintf+0x22>
    ae78:	2858      	cmp	r0, #88	; 0x58
    ae7a:	d1a7      	bne.n	adcc <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    ae7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ae80:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ae84:	9300      	str	r3, [sp, #0]
    ae86:	aa0c      	add	r2, sp, #48	; 0x30
    ae88:	ab04      	add	r3, sp, #16
    ae8a:	f012 f88b 	bl	1cfa4 <encode_uint>
    ae8e:	4682      	mov	sl, r0
			if (precision >= 0) {
    ae90:	f1b8 0f00 	cmp.w	r8, #0
    ae94:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ae98:	db0c      	blt.n	aeb4 <cbvprintf+0x540>
				conv->flag_zero = false;
    ae9a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ae9e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    aea2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    aea6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    aea8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    aeac:	d902      	bls.n	aeb4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    aeae:	eba8 0303 	sub.w	r3, r8, r3
    aeb2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    aeb4:	4680      	mov	r8, r0
    aeb6:	e03d      	b.n	af34 <cbvprintf+0x5c0>
    aeb8:	3863      	subs	r0, #99	; 0x63
    aeba:	2815      	cmp	r0, #21
    aebc:	d886      	bhi.n	adcc <cbvprintf+0x458>
    aebe:	a201      	add	r2, pc, #4	; (adr r2, aec4 <cbvprintf+0x550>)
    aec0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    aec4:	0000af45 	.word	0x0000af45
    aec8:	0000afa9 	.word	0x0000afa9
    aecc:	0000adcd 	.word	0x0000adcd
    aed0:	0000adcd 	.word	0x0000adcd
    aed4:	0000adcd 	.word	0x0000adcd
    aed8:	0000adcd 	.word	0x0000adcd
    aedc:	0000afa9 	.word	0x0000afa9
    aee0:	0000adcd 	.word	0x0000adcd
    aee4:	0000adcd 	.word	0x0000adcd
    aee8:	0000adcd 	.word	0x0000adcd
    aeec:	0000adcd 	.word	0x0000adcd
    aef0:	0000b003 	.word	0x0000b003
    aef4:	0000afd1 	.word	0x0000afd1
    aef8:	0000afd5 	.word	0x0000afd5
    aefc:	0000adcd 	.word	0x0000adcd
    af00:	0000adcd 	.word	0x0000adcd
    af04:	0000af1d 	.word	0x0000af1d
    af08:	0000adcd 	.word	0x0000adcd
    af0c:	0000afd1 	.word	0x0000afd1
    af10:	0000adcd 	.word	0x0000adcd
    af14:	0000adcd 	.word	0x0000adcd
    af18:	0000afd1 	.word	0x0000afd1
			if (precision >= 0) {
    af1c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    af20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    af24:	db0a      	blt.n	af3c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    af26:	4641      	mov	r1, r8
    af28:	4650      	mov	r0, sl
    af2a:	f013 fa72 	bl	1e412 <strnlen>
		char sign = 0;
    af2e:	2600      	movs	r6, #0
			bpe = bps + len;
    af30:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    af34:	f1ba 0f00 	cmp.w	sl, #0
    af38:	d10c      	bne.n	af54 <cbvprintf+0x5e0>
    af3a:	e747      	b.n	adcc <cbvprintf+0x458>
				len = strlen(bps);
    af3c:	4650      	mov	r0, sl
    af3e:	f013 fa61 	bl	1e404 <strlen>
    af42:	e7f4      	b.n	af2e <cbvprintf+0x5ba>
			break;
    af44:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    af46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    af48:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    af4c:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    af50:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    af54:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    af58:	b106      	cbz	r6, af5c <cbvprintf+0x5e8>
			nj_len += 1U;
    af5a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    af5c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    af60:	06d0      	lsls	r0, r2, #27
    af62:	d568      	bpl.n	b036 <cbvprintf+0x6c2>
			nj_len += 2U;
    af64:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    af66:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    af68:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    af6a:	bf48      	it	mi
    af6c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    af6e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    af70:	bf48      	it	mi
    af72:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    af74:	f1b9 0f00 	cmp.w	r9, #0
    af78:	dd76      	ble.n	b068 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    af7a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    af7e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    af82:	f3c2 0380 	ubfx	r3, r2, #2, #1
    af86:	9303      	str	r3, [sp, #12]
    af88:	0753      	lsls	r3, r2, #29
    af8a:	d46d      	bmi.n	b068 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    af8c:	0650      	lsls	r0, r2, #25
    af8e:	d561      	bpl.n	b054 <cbvprintf+0x6e0>
					if (sign != 0) {
    af90:	b146      	cbz	r6, afa4 <cbvprintf+0x630>
						OUTC(sign);
    af92:	4659      	mov	r1, fp
    af94:	4630      	mov	r0, r6
    af96:	9b02      	ldr	r3, [sp, #8]
    af98:	4798      	blx	r3
    af9a:	2800      	cmp	r0, #0
    af9c:	db57      	blt.n	b04e <cbvprintf+0x6da>
						sign = 0;
    af9e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    afa0:	3501      	adds	r5, #1
						sign = 0;
    afa2:	461e      	mov	r6, r3
					pad = '0';
    afa4:	2330      	movs	r3, #48	; 0x30
    afa6:	e056      	b.n	b056 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    afa8:	071e      	lsls	r6, r3, #28
    afaa:	d40f      	bmi.n	afcc <cbvprintf+0x658>
				sign = ' ';
    afac:	f013 0610 	ands.w	r6, r3, #16
    afb0:	bf18      	it	ne
    afb2:	2620      	movne	r6, #32
			if (value->sint < 0) {
    afb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    afb8:	2b00      	cmp	r3, #0
    afba:	f6bf af5f 	bge.w	ae7c <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    afbe:	4252      	negs	r2, r2
    afc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    afc4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    afc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    afca:	e757      	b.n	ae7c <cbvprintf+0x508>
				sign = '+';
    afcc:	262b      	movs	r6, #43	; 0x2b
    afce:	e7f1      	b.n	afb4 <cbvprintf+0x640>
		switch (conv->specifier) {
    afd0:	2600      	movs	r6, #0
    afd2:	e753      	b.n	ae7c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    afd4:	980a      	ldr	r0, [sp, #40]	; 0x28
    afd6:	b340      	cbz	r0, b02a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    afd8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    afdc:	9300      	str	r3, [sp, #0]
    afde:	2100      	movs	r1, #0
    afe0:	ab04      	add	r3, sp, #16
    afe2:	aa0c      	add	r2, sp, #48	; 0x30
    afe4:	f011 ffde 	bl	1cfa4 <encode_uint>
				conv->altform_0c = true;
    afe8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    afec:	4682      	mov	sl, r0
				conv->altform_0c = true;
    afee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    aff2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    aff6:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    affa:	2600      	movs	r6, #0
				conv->altform_0c = true;
    affc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b000:	e746      	b.n	ae90 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b004:	2907      	cmp	r1, #7
    b006:	f63f aee1 	bhi.w	adcc <cbvprintf+0x458>
    b00a:	e8df f001 	tbb	[pc, r1]
    b00e:	040c      	.short	0x040c
    b010:	08080c06 	.word	0x08080c06
    b014:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b016:	701d      	strb	r5, [r3, #0]
		break;
    b018:	e6d8      	b.n	adcc <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b01a:	801d      	strh	r5, [r3, #0]
		break;
    b01c:	e6d6      	b.n	adcc <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b01e:	17ea      	asrs	r2, r5, #31
    b020:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b024:	e6d2      	b.n	adcc <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b026:	601d      	str	r5, [r3, #0]
		break;
    b028:	e6d0      	b.n	adcc <cbvprintf+0x458>
			bps = "(nil)";
    b02a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b0f4 <cbvprintf+0x780>
    b02e:	4606      	mov	r6, r0
			bpe = bps + 5;
    b030:	f10a 0805 	add.w	r8, sl, #5
    b034:	e78e      	b.n	af54 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b036:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b038:	bf48      	it	mi
    b03a:	3301      	addmi	r3, #1
    b03c:	e793      	b.n	af66 <cbvprintf+0x5f2>
					OUTC(pad);
    b03e:	4618      	mov	r0, r3
    b040:	9303      	str	r3, [sp, #12]
    b042:	4659      	mov	r1, fp
    b044:	9b02      	ldr	r3, [sp, #8]
    b046:	4798      	blx	r3
    b048:	2800      	cmp	r0, #0
    b04a:	9b03      	ldr	r3, [sp, #12]
    b04c:	da04      	bge.n	b058 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b04e:	b011      	add	sp, #68	; 0x44
    b050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b054:	2320      	movs	r3, #32
    b056:	444d      	add	r5, r9
    b058:	464a      	mov	r2, r9
				while (width-- > 0) {
    b05a:	2a00      	cmp	r2, #0
    b05c:	eba5 0109 	sub.w	r1, r5, r9
    b060:	f109 39ff 	add.w	r9, r9, #4294967295
    b064:	dceb      	bgt.n	b03e <cbvprintf+0x6ca>
    b066:	460d      	mov	r5, r1
		if (sign != 0) {
    b068:	b136      	cbz	r6, b078 <cbvprintf+0x704>
			OUTC(sign);
    b06a:	4659      	mov	r1, fp
    b06c:	4630      	mov	r0, r6
    b06e:	9b02      	ldr	r3, [sp, #8]
    b070:	4798      	blx	r3
    b072:	2800      	cmp	r0, #0
    b074:	dbeb      	blt.n	b04e <cbvprintf+0x6da>
    b076:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b078:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b07c:	06d9      	lsls	r1, r3, #27
    b07e:	d401      	bmi.n	b084 <cbvprintf+0x710>
    b080:	071a      	lsls	r2, r3, #28
    b082:	d506      	bpl.n	b092 <cbvprintf+0x71e>
				OUTC('0');
    b084:	4659      	mov	r1, fp
    b086:	2030      	movs	r0, #48	; 0x30
    b088:	9b02      	ldr	r3, [sp, #8]
    b08a:	4798      	blx	r3
    b08c:	2800      	cmp	r0, #0
    b08e:	dbde      	blt.n	b04e <cbvprintf+0x6da>
    b090:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b092:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b096:	06db      	lsls	r3, r3, #27
    b098:	d507      	bpl.n	b0aa <cbvprintf+0x736>
				OUTC(conv->specifier);
    b09a:	4659      	mov	r1, fp
    b09c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b0a0:	9b02      	ldr	r3, [sp, #8]
    b0a2:	4798      	blx	r3
    b0a4:	2800      	cmp	r0, #0
    b0a6:	dbd2      	blt.n	b04e <cbvprintf+0x6da>
    b0a8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b0aa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b0ac:	442e      	add	r6, r5
    b0ae:	1b73      	subs	r3, r6, r5
    b0b0:	2b00      	cmp	r3, #0
    b0b2:	dc16      	bgt.n	b0e2 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b0b4:	4643      	mov	r3, r8
    b0b6:	4652      	mov	r2, sl
    b0b8:	4659      	mov	r1, fp
    b0ba:	9802      	ldr	r0, [sp, #8]
    b0bc:	f011 ffb8 	bl	1d030 <outs>
    b0c0:	2800      	cmp	r0, #0
    b0c2:	dbc4      	blt.n	b04e <cbvprintf+0x6da>
    b0c4:	4405      	add	r5, r0
		while (width > 0) {
    b0c6:	44a9      	add	r9, r5
    b0c8:	eba9 0305 	sub.w	r3, r9, r5
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	f77f ae7d 	ble.w	adcc <cbvprintf+0x458>
			OUTC(' ');
    b0d2:	4659      	mov	r1, fp
    b0d4:	2020      	movs	r0, #32
    b0d6:	9b02      	ldr	r3, [sp, #8]
    b0d8:	4798      	blx	r3
    b0da:	2800      	cmp	r0, #0
    b0dc:	dbb7      	blt.n	b04e <cbvprintf+0x6da>
    b0de:	3501      	adds	r5, #1
			--width;
    b0e0:	e7f2      	b.n	b0c8 <cbvprintf+0x754>
				OUTC('0');
    b0e2:	4659      	mov	r1, fp
    b0e4:	2030      	movs	r0, #48	; 0x30
    b0e6:	9b02      	ldr	r3, [sp, #8]
    b0e8:	4798      	blx	r3
    b0ea:	2800      	cmp	r0, #0
    b0ec:	dbaf      	blt.n	b04e <cbvprintf+0x6da>
    b0ee:	3501      	adds	r5, #1
    b0f0:	e7dd      	b.n	b0ae <cbvprintf+0x73a>
    b0f2:	bf00      	nop
    b0f4:	00022fbb 	.word	0x00022fbb

0000b0f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b0f8:	b148      	cbz	r0, b10e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b0fa:	4b05      	ldr	r3, [pc, #20]	; (b110 <arch_busy_wait+0x18>)
    b0fc:	681a      	ldr	r2, [r3, #0]
    b0fe:	4b05      	ldr	r3, [pc, #20]	; (b114 <arch_busy_wait+0x1c>)
    b100:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b104:	4b04      	ldr	r3, [pc, #16]	; (b118 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b106:	4350      	muls	r0, r2
    b108:	f043 0301 	orr.w	r3, r3, #1
    b10c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b10e:	4770      	bx	lr
    b110:	200083e8 	.word	0x200083e8
    b114:	000f4240 	.word	0x000f4240
    b118:	00021da0 	.word	0x00021da0

0000b11c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    b11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b120:	460e      	mov	r6, r1
    b122:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b124:	2108      	movs	r1, #8
    b126:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b128:	f012 f87a 	bl	1d220 <nvs_al_size.isra.0>
    b12c:	4607      	mov	r7, r0

	*addr -= ate_size;
    b12e:	6834      	ldr	r4, [r6, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    b130:	f8df 9044 	ldr.w	r9, [pc, #68]	; b178 <nvs_recover_last_ate+0x5c>
	*addr -= ate_size;
    b134:	1a24      	subs	r4, r4, r0
    b136:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    b138:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    b13c:	42ac      	cmp	r4, r5
    b13e:	d803      	bhi.n	b148 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    b140:	2000      	movs	r0, #0
}
    b142:	b003      	add	sp, #12
    b144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b148:	2308      	movs	r3, #8
    b14a:	466a      	mov	r2, sp
    b14c:	4621      	mov	r1, r4
    b14e:	4640      	mov	r0, r8
    b150:	f011 ffc2 	bl	1d0d8 <nvs_flash_rd>
		if (rc) {
    b154:	2800      	cmp	r0, #0
    b156:	d1f4      	bne.n	b142 <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    b158:	4668      	mov	r0, sp
    b15a:	f012 f841 	bl	1d1e0 <nvs_ate_crc8_check>
    b15e:	b940      	cbnz	r0, b172 <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    b160:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b164:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    b168:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    b16c:	4413      	add	r3, r2
    b16e:	441d      	add	r5, r3
			*addr = ate_end_addr;
    b170:	6034      	str	r4, [r6, #0]
		ate_end_addr -= ate_size;
    b172:	1be4      	subs	r4, r4, r7
    b174:	e7e2      	b.n	b13c <nvs_recover_last_ate+0x20>
    b176:	bf00      	nop
    b178:	ffff0000 	.word	0xffff0000

0000b17c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b180:	2108      	movs	r1, #8
{
    b182:	b093      	sub	sp, #76	; 0x4c
    b184:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b186:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b188:	f012 f84a 	bl	1d220 <nvs_al_size.isra.0>
    b18c:	4680      	mov	r8, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    b18e:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    b190:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    b192:	0c1b      	lsrs	r3, r3, #16
    b194:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    b196:	a901      	add	r1, sp, #4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    b198:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    b19a:	f012 f836 	bl	1d20a <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    b19e:	9b01      	ldr	r3, [sp, #4]
    b1a0:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b1a2:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    b1a4:	4419      	add	r1, r3
    b1a6:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b1aa:	2308      	movs	r3, #8
    b1ac:	aa04      	add	r2, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    b1ae:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b1b0:	f011 ff92 	bl	1d0d8 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    b1b4:	2800      	cmp	r0, #0
    b1b6:	f2c0 8083 	blt.w	b2c0 <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    b1ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b1bc:	aa04      	add	r2, sp, #16
    b1be:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b1c0:	2300      	movs	r3, #0
		if (data8[i] != value) {
    b1c2:	f812 0b01 	ldrb.w	r0, [r2], #1
    b1c6:	4281      	cmp	r1, r0
    b1c8:	d16c      	bne.n	b2a4 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b1ca:	3301      	adds	r3, #1
    b1cc:	2b08      	cmp	r3, #8
    b1ce:	d1f8      	bne.n	b1c2 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    b1d0:	4620      	mov	r0, r4
    b1d2:	9901      	ldr	r1, [sp, #4]
    b1d4:	f011 ffdd 	bl	1d192 <nvs_flash_erase_sector>
		if (rc) {
    b1d8:	e072      	b.n	b2c0 <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    b1da:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    b1dc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    b1e0:	0c1b      	lsrs	r3, r3, #16
    b1e2:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    b1e4:	4413      	add	r3, r2
    b1e6:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    b1e8:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b2c8 <nvs_gc+0x14c>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    b1ec:	4620      	mov	r0, r4
    b1ee:	aa06      	add	r2, sp, #24
    b1f0:	a902      	add	r1, sp, #8
		gc_prev_addr = gc_addr;
    b1f2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    b1f6:	f012 f81d 	bl	1d234 <nvs_prev_ate>
		if (rc) {
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d160      	bne.n	b2c0 <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    b1fe:	a806      	add	r0, sp, #24
    b200:	f011 ffee 	bl	1d1e0 <nvs_ate_crc8_check>
    b204:	bb80      	cbnz	r0, b268 <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    b206:	6863      	ldr	r3, [r4, #4]
    b208:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b20a:	4620      	mov	r0, r4
    b20c:	aa08      	add	r2, sp, #32
    b20e:	a903      	add	r1, sp, #12
			wlk_prev_addr = wlk_addr;
    b210:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b212:	f012 f80f 	bl	1d234 <nvs_prev_ate>
			if (rc) {
    b216:	2800      	cmp	r0, #0
    b218:	d152      	bne.n	b2c0 <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    b21a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    b21e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b222:	429a      	cmp	r2, r3
    b224:	d023      	beq.n	b26e <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    b226:	6862      	ldr	r2, [r4, #4]
    b228:	9b03      	ldr	r3, [sp, #12]
    b22a:	429a      	cmp	r2, r3
    b22c:	d1ed      	bne.n	b20a <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    b22e:	454d      	cmp	r5, r9
    b230:	d11a      	bne.n	b268 <nvs_gc+0xec>
    b232:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b236:	b1bb      	cbz	r3, b268 <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    b238:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    b23c:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    b240:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b242:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    b244:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b246:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    b24a:	f011 ffd5 	bl	1d1f8 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    b24e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    b250:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    b254:	681d      	ldr	r5, [r3, #0]
    b256:	426d      	negs	r5, r5
	block_size =
    b258:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    b25c:	b96f      	cbnz	r7, b27a <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    b25e:	4620      	mov	r0, r4
    b260:	a906      	add	r1, sp, #24
    b262:	f012 f895 	bl	1d390 <nvs_flash_ate_wrt>
			if (rc) {
    b266:	bb58      	cbnz	r0, b2c0 <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    b268:	45c1      	cmp	r9, r8
    b26a:	d1bf      	bne.n	b1ec <nvs_gc+0x70>
    b26c:	e7b0      	b.n	b1d0 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    b26e:	a808      	add	r0, sp, #32
    b270:	f011 ffb6 	bl	1d1e0 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    b274:	2800      	cmp	r0, #0
    b276:	d1d6      	bne.n	b226 <nvs_gc+0xaa>
    b278:	e7d9      	b.n	b22e <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    b27a:	42bd      	cmp	r5, r7
    b27c:	46ab      	mov	fp, r5
    b27e:	bf28      	it	cs
    b280:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    b282:	4631      	mov	r1, r6
    b284:	465b      	mov	r3, fp
    b286:	4620      	mov	r0, r4
    b288:	aa0a      	add	r2, sp, #40	; 0x28
    b28a:	f011 ff25 	bl	1d0d8 <nvs_flash_rd>
		if (rc) {
    b28e:	b9b8      	cbnz	r0, b2c0 <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    b290:	465a      	mov	r2, fp
    b292:	4620      	mov	r0, r4
    b294:	a90a      	add	r1, sp, #40	; 0x28
    b296:	f012 f868 	bl	1d36a <nvs_flash_data_wrt>
		if (rc) {
    b29a:	b988      	cbnz	r0, b2c0 <nvs_gc+0x144>
		len -= bytes_to_copy;
    b29c:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    b2a0:	445e      	add	r6, fp
    b2a2:	e7db      	b.n	b25c <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    b2a4:	9802      	ldr	r0, [sp, #8]
    b2a6:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    b2aa:	a804      	add	r0, sp, #16
    b2ac:	f011 ff98 	bl	1d1e0 <nvs_ate_crc8_check>
    b2b0:	2800      	cmp	r0, #0
    b2b2:	d092      	beq.n	b1da <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    b2b4:	4620      	mov	r0, r4
    b2b6:	a902      	add	r1, sp, #8
    b2b8:	f7ff ff30 	bl	b11c <nvs_recover_last_ate>
		if (rc) {
    b2bc:	2800      	cmp	r0, #0
    b2be:	d093      	beq.n	b1e8 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    b2c0:	b013      	add	sp, #76	; 0x4c
    b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2c6:	bf00      	nop
    b2c8:	ffff0000 	.word	0xffff0000

0000b2cc <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    b2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2d0:	4604      	mov	r4, r0
    b2d2:	460d      	mov	r5, r1
    b2d4:	b086      	sub	sp, #24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    b2d6:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    b2da:	4630      	mov	r0, r6
    b2dc:	f016 f908 	bl	214f0 <z_impl_k_mutex_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b2e0:	4628      	mov	r0, r5
    b2e2:	f00e fc7f 	bl	19be4 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    b2e6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    b2e8:	b948      	cbnz	r0, b2fe <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    b2ea:	2145      	movs	r1, #69	; 0x45
    b2ec:	488b      	ldr	r0, [pc, #556]	; (b51c <nvs_init+0x250>)
    b2ee:	f011 fc0f 	bl	1cb10 <printk>
		return -ENXIO;
    b2f2:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    b2f6:	4628      	mov	r0, r5
    b2f8:	b006      	add	sp, #24
    b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b2fe:	6883      	ldr	r3, [r0, #8]
    b300:	691b      	ldr	r3, [r3, #16]
    b302:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    b304:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    b306:	b930      	cbnz	r0, b316 <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
    b308:	2145      	movs	r1, #69	; 0x45
    b30a:	4885      	ldr	r0, [pc, #532]	; (b520 <nvs_init+0x254>)
		LOG_ERR("Configuration error - sector count");
    b30c:	f011 fc00 	bl	1cb10 <printk>
		return -EINVAL;
    b310:	f06f 0515 	mvn.w	r5, #21
    b314:	e7ef      	b.n	b2f6 <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    b316:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    b318:	6883      	ldr	r3, [r0, #8]
    b31a:	691b      	ldr	r3, [r3, #16]
    b31c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    b31e:	6803      	ldr	r3, [r0, #0]
    b320:	3b01      	subs	r3, #1
    b322:	2b1f      	cmp	r3, #31
    b324:	d902      	bls.n	b32c <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
    b326:	2145      	movs	r1, #69	; 0x45
    b328:	487e      	ldr	r0, [pc, #504]	; (b524 <nvs_init+0x258>)
    b32a:	e7ef      	b.n	b30c <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    b32c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b32e:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b330:	aa03      	add	r2, sp, #12
    b332:	f015 fb39 	bl	209a8 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    b336:	b110      	cbz	r0, b33e <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
    b338:	2145      	movs	r1, #69	; 0x45
    b33a:	487b      	ldr	r0, [pc, #492]	; (b528 <nvs_init+0x25c>)
    b33c:	e7e6      	b.n	b30c <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    b33e:	89a5      	ldrh	r5, [r4, #12]
    b340:	b12d      	cbz	r5, b34e <nvs_init+0x82>
    b342:	9b04      	ldr	r3, [sp, #16]
    b344:	fbb5 f2f3 	udiv	r2, r5, r3
    b348:	fb03 5512 	mls	r5, r3, r2, r5
    b34c:	b115      	cbz	r5, b354 <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
    b34e:	2145      	movs	r1, #69	; 0x45
    b350:	4876      	ldr	r0, [pc, #472]	; (b52c <nvs_init+0x260>)
    b352:	e7db      	b.n	b30c <nvs_init+0x40>
	if (fs->sector_count < 2) {
    b354:	89e3      	ldrh	r3, [r4, #14]
    b356:	2b01      	cmp	r3, #1
    b358:	d802      	bhi.n	b360 <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
    b35a:	2145      	movs	r1, #69	; 0x45
    b35c:	4874      	ldr	r0, [pc, #464]	; (b530 <nvs_init+0x264>)
    b35e:	e7d5      	b.n	b30c <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    b362:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b364:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b368:	f04f 33ff 	mov.w	r3, #4294967295
    b36c:	f04f 32ff 	mov.w	r2, #4294967295
    b370:	4630      	mov	r0, r6
    b372:	f00e ff59 	bl	1a228 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b376:	2108      	movs	r1, #8
    b378:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b37a:	f011 ff51 	bl	1d220 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    b37e:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b380:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    b382:	89e3      	ldrh	r3, [r4, #14]
    b384:	fa1f fa85 	uxth.w	sl, r5
    b388:	4553      	cmp	r3, sl
    b38a:	d868      	bhi.n	b45e <nvs_init+0x192>
	if (closed_sectors == fs->sector_count) {
    b38c:	89e3      	ldrh	r3, [r4, #14]
    b38e:	4543      	cmp	r3, r8
    b390:	f000 80a8 	beq.w	b4e4 <nvs_init+0x218>
	if (i == fs->sector_count) {
    b394:	459a      	cmp	sl, r3
    b396:	d10b      	bne.n	b3b0 <nvs_init+0xe4>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    b398:	9900      	ldr	r1, [sp, #0]
    b39a:	2308      	movs	r3, #8
    b39c:	464a      	mov	r2, r9
    b39e:	4620      	mov	r0, r4
    b3a0:	1bc9      	subs	r1, r1, r7
    b3a2:	f011 fed1 	bl	1d148 <nvs_flash_cmp_const>
		if (!rc) {
    b3a6:	b918      	cbnz	r0, b3b0 <nvs_init+0xe4>
			nvs_sector_advance(fs, &addr);
    b3a8:	4669      	mov	r1, sp
    b3aa:	89e0      	ldrh	r0, [r4, #14]
    b3ac:	f011 ff2d 	bl	1d20a <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    b3b0:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b3b2:	f8df 8180 	ldr.w	r8, [pc, #384]	; b534 <nvs_init+0x268>
	fs->ate_wra = addr - ate_size;
    b3b6:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    b3b8:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    b3bc:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b3be:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    b3c0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    b3c4:	4299      	cmp	r1, r3
    b3c6:	d30f      	bcc.n	b3e8 <nvs_init+0x11c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b3c8:	2308      	movs	r3, #8
    b3ca:	4620      	mov	r0, r4
    b3cc:	aa01      	add	r2, sp, #4
    b3ce:	f011 fe83 	bl	1d0d8 <nvs_flash_rd>
		if (rc) {
    b3d2:	4605      	mov	r5, r0
    b3d4:	bb30      	cbnz	r0, b424 <nvs_init+0x158>
    b3d6:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    b3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
    b3dc:	4591      	cmp	r9, r2
    b3de:	f040 8084 	bne.w	b4ea <nvs_init+0x21e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b3e2:	3501      	adds	r5, #1
    b3e4:	2d08      	cmp	r5, #8
    b3e6:	d1f7      	bne.n	b3d8 <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
    b3e8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    b3ec:	428b      	cmp	r3, r1
    b3ee:	d907      	bls.n	b400 <nvs_init+0x134>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    b3f0:	464a      	mov	r2, r9
    b3f2:	4620      	mov	r0, r4
    b3f4:	1a5b      	subs	r3, r3, r1
    b3f6:	f011 fea7 	bl	1d148 <nvs_flash_cmp_const>
		if (rc < 0) {
    b3fa:	1e05      	subs	r5, r0, #0
    b3fc:	db12      	blt.n	b424 <nvs_init+0x158>
		if (!rc) {
    b3fe:	d153      	bne.n	b4a8 <nvs_init+0x1dc>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b400:	6863      	ldr	r3, [r4, #4]
    b402:	f8df 8130 	ldr.w	r8, [pc, #304]	; b534 <nvs_init+0x268>
	nvs_sector_advance(fs, &addr);
    b406:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b408:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    b40c:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b40e:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    b410:	f011 fefb 	bl	1d20a <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    b414:	464a      	mov	r2, r9
    b416:	4620      	mov	r0, r4
    b418:	89a3      	ldrh	r3, [r4, #12]
    b41a:	9900      	ldr	r1, [sp, #0]
    b41c:	f011 fe94 	bl	1d148 <nvs_flash_cmp_const>
	if (rc < 0) {
    b420:	1e05      	subs	r5, r0, #0
    b422:	da47      	bge.n	b4b4 <nvs_init+0x1e8>
	return z_impl_k_mutex_unlock(mutex);
    b424:	4630      	mov	r0, r6
    b426:	f00e ffcb 	bl	1a3c0 <z_impl_k_mutex_unlock>
	if (rc) {
    b42a:	2d00      	cmp	r5, #0
    b42c:	f47f af63 	bne.w	b2f6 <nvs_init+0x2a>
	fs->ready = true;
    b430:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b432:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
    b434:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b436:	2149      	movs	r1, #73	; 0x49
    b438:	89a3      	ldrh	r3, [r4, #12]
    b43a:	483f      	ldr	r0, [pc, #252]	; (b538 <nvs_init+0x26c>)
    b43c:	f011 fb68 	bl	1cb10 <printk>
	LOG_INF("alloc wra: %d, %x",
    b440:	6862      	ldr	r2, [r4, #4]
    b442:	2149      	movs	r1, #73	; 0x49
    b444:	b293      	uxth	r3, r2
    b446:	483d      	ldr	r0, [pc, #244]	; (b53c <nvs_init+0x270>)
    b448:	0c12      	lsrs	r2, r2, #16
    b44a:	f011 fb61 	bl	1cb10 <printk>
	LOG_INF("data wra: %d, %x",
    b44e:	68a2      	ldr	r2, [r4, #8]
    b450:	2149      	movs	r1, #73	; 0x49
    b452:	b293      	uxth	r3, r2
    b454:	483a      	ldr	r0, [pc, #232]	; (b540 <nvs_init+0x274>)
    b456:	0c12      	lsrs	r2, r2, #16
    b458:	f011 fb5a 	bl	1cb10 <printk>
	return 0;
    b45c:	e74b      	b.n	b2f6 <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
    b45e:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    b460:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    b462:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    b464:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b468:	464a      	mov	r2, r9
    b46a:	2308      	movs	r3, #8
    b46c:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    b46e:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b470:	f011 fe6a 	bl	1d148 <nvs_flash_cmp_const>
		if (rc) {
    b474:	b180      	cbz	r0, b498 <nvs_init+0x1cc>
			nvs_sector_advance(fs, &addr);
    b476:	4669      	mov	r1, sp
    b478:	89e0      	ldrh	r0, [r4, #14]
    b47a:	f011 fec6 	bl	1d20a <nvs_sector_advance.isra.0>
			closed_sectors++;
    b47e:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b482:	2308      	movs	r3, #8
    b484:	464a      	mov	r2, r9
    b486:	4620      	mov	r0, r4
    b488:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    b48a:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b48e:	f011 fe5b 	bl	1d148 <nvs_flash_cmp_const>
			if (!rc) {
    b492:	2800      	cmp	r0, #0
    b494:	f43f af7a 	beq.w	b38c <nvs_init+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    b498:	3501      	adds	r5, #1
    b49a:	e772      	b.n	b382 <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b49c:	f1ba 0f00 	cmp.w	sl, #0
    b4a0:	d039      	beq.n	b516 <nvs_init+0x24a>
				rc = -ESPIPE;
    b4a2:	f06f 051c 	mvn.w	r5, #28
    b4a6:	e7bd      	b.n	b424 <nvs_init+0x158>
		fs->data_wra += fs->flash_parameters->write_block_size;
    b4a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b4aa:	68a3      	ldr	r3, [r4, #8]
    b4ac:	6812      	ldr	r2, [r2, #0]
    b4ae:	4413      	add	r3, r2
    b4b0:	60a3      	str	r3, [r4, #8]
    b4b2:	e799      	b.n	b3e8 <nvs_init+0x11c>
	if (rc) {
    b4b4:	d0b6      	beq.n	b424 <nvs_init+0x158>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    b4b6:	4620      	mov	r0, r4
    b4b8:	6861      	ldr	r1, [r4, #4]
    b4ba:	f011 fe6a 	bl	1d192 <nvs_flash_erase_sector>
		if (rc) {
    b4be:	4605      	mov	r5, r0
    b4c0:	2800      	cmp	r0, #0
    b4c2:	d1af      	bne.n	b424 <nvs_init+0x158>
		fs->ate_wra &= ADDR_SECT_MASK;
    b4c4:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b4c6:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    b4c8:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b4cc:	4403      	add	r3, r0
    b4ce:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    b4d2:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    b4d4:	ea00 0008 	and.w	r0, r0, r8
    b4d8:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    b4da:	4620      	mov	r0, r4
    b4dc:	f7ff fe4e 	bl	b17c <nvs_gc>
    b4e0:	4605      	mov	r5, r0
end:
    b4e2:	e79f      	b.n	b424 <nvs_init+0x158>
		rc = -EDEADLK;
    b4e4:	f06f 0520 	mvn.w	r5, #32
    b4e8:	e79c      	b.n	b424 <nvs_init+0x158>
		if (!nvs_ate_crc8_check(&last_ate)) {
    b4ea:	a801      	add	r0, sp, #4
    b4ec:	f011 fe78 	bl	1d1e0 <nvs_ate_crc8_check>
    b4f0:	6865      	ldr	r5, [r4, #4]
    b4f2:	b980      	cbnz	r0, b516 <nvs_init+0x24a>
			fs->data_wra = addr & ADDR_SECT_MASK;
    b4f4:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    b4f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b4fa:	f8bd a008 	ldrh.w	sl, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    b4fe:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    b502:	441a      	add	r2, r3
    b504:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b506:	4651      	mov	r1, sl
    b508:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b50a:	f011 fe89 	bl	1d220 <nvs_al_size.isra.0>
    b50e:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b510:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b512:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b514:	d0c2      	beq.n	b49c <nvs_init+0x1d0>
		fs->ate_wra -= ate_size;
    b516:	1bed      	subs	r5, r5, r7
    b518:	6065      	str	r5, [r4, #4]
    b51a:	e751      	b.n	b3c0 <nvs_init+0xf4>
    b51c:	00023006 	.word	0x00023006
    b520:	00023027 	.word	0x00023027
    b524:	0002304e 	.word	0x0002304e
    b528:	00023070 	.word	0x00023070
    b52c:	0002308d 	.word	0x0002308d
    b530:	000230a6 	.word	0x000230a6
    b534:	ffff0000 	.word	0xffff0000
    b538:	000230ce 	.word	0x000230ce
    b53c:	000230ea 	.word	0x000230ea
    b540:	00023101 	.word	0x00023101

0000b544 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b548:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    b54a:	7c03      	ldrb	r3, [r0, #16]
{
    b54c:	4604      	mov	r4, r0
    b54e:	4689      	mov	r9, r1
    b550:	4690      	mov	r8, r2
    b552:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    b554:	b94b      	cbnz	r3, b56a <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    b556:	2145      	movs	r1, #69	; 0x45
    b558:	485d      	ldr	r0, [pc, #372]	; (b6d0 <nvs_write+0x18c>)
    b55a:	f011 fad9 	bl	1cb10 <printk>
		return -EACCES;
    b55e:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    b562:	4628      	mov	r0, r5
    b564:	b009      	add	sp, #36	; 0x24
    b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b56a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b56c:	2108      	movs	r1, #8
    b56e:	4610      	mov	r0, r2
    b570:	f011 fe56 	bl	1d220 <nvs_al_size.isra.0>
    b574:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    b576:	4631      	mov	r1, r6
    b578:	4610      	mov	r0, r2
    b57a:	f011 fe51 	bl	1d220 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    b57e:	89a3      	ldrh	r3, [r4, #12]
    b580:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    b584:	1a9b      	subs	r3, r3, r2
    b586:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    b588:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    b58a:	f0c0 809d 	bcc.w	b6c8 <nvs_write+0x184>
    b58e:	b11e      	cbz	r6, b598 <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
    b590:	f1b8 0f00 	cmp.w	r8, #0
    b594:	f000 8098 	beq.w	b6c8 <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
    b598:	6863      	ldr	r3, [r4, #4]
    b59a:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b59c:	4620      	mov	r0, r4
    b59e:	aa04      	add	r2, sp, #16
    b5a0:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    b5a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b5a6:	f011 fe45 	bl	1d234 <nvs_prev_ate>
		if (rc) {
    b5aa:	4605      	mov	r5, r0
    b5ac:	2800      	cmp	r0, #0
    b5ae:	d1d8      	bne.n	b562 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    b5b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b5b4:	454b      	cmp	r3, r9
    b5b6:	d005      	beq.n	b5c4 <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
    b5b8:	6862      	ldr	r2, [r4, #4]
    b5ba:	9b03      	ldr	r3, [sp, #12]
    b5bc:	429a      	cmp	r2, r3
    b5be:	d1ed      	bne.n	b59c <nvs_write+0x58>
		if (len == 0) {
    b5c0:	b9de      	cbnz	r6, b5fa <nvs_write+0xb6>
    b5c2:	e7ce      	b.n	b562 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    b5c4:	a804      	add	r0, sp, #16
    b5c6:	f011 fe0b 	bl	1d1e0 <nvs_ate_crc8_check>
    b5ca:	2800      	cmp	r0, #0
    b5cc:	d1f4      	bne.n	b5b8 <nvs_write+0x74>
			if (wlk_ate.len == 0U) {
    b5ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    b5d2:	b186      	cbz	r6, b5f6 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    b5d4:	42b3      	cmp	r3, r6
    b5d6:	d110      	bne.n	b5fa <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    b5d8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    b5dc:	ea4f 411b 	mov.w	r1, fp, lsr #16
    b5e0:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    b5e2:	4401      	add	r1, r0
    b5e4:	4633      	mov	r3, r6
    b5e6:	4642      	mov	r2, r8
    b5e8:	4620      	mov	r0, r4
    b5ea:	f011 fd83 	bl	1d0f4 <nvs_flash_block_cmp>
			if (rc <= 0) {
    b5ee:	2800      	cmp	r0, #0
    b5f0:	dc03      	bgt.n	b5fa <nvs_write+0xb6>
    b5f2:	4605      	mov	r5, r0
    b5f4:	e7b5      	b.n	b562 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    b5f6:	2b00      	cmp	r3, #0
    b5f8:	d0b3      	beq.n	b562 <nvs_write+0x1e>
	if (data_size) {
    b5fa:	bba7      	cbnz	r7, b666 <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    b5fc:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    b600:	f04f 32ff 	mov.w	r2, #4294967295
    b604:	f04f 33ff 	mov.w	r3, #4294967295
    b608:	4650      	mov	r0, sl
    b60a:	f00e fe0d 	bl	1a228 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    b60e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; b6d4 <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
    b612:	89e3      	ldrh	r3, [r4, #14]
    b614:	429d      	cmp	r5, r3
    b616:	d054      	beq.n	b6c2 <nvs_write+0x17e>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    b618:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    b61c:	18f9      	adds	r1, r7, r3
    b61e:	428a      	cmp	r2, r1
    b620:	d324      	bcc.n	b66c <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b622:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    b626:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    b628:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    b62a:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    b62e:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    b632:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    b636:	f011 fddf 	bl	1d1f8 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    b63a:	4632      	mov	r2, r6
    b63c:	4641      	mov	r1, r8
    b63e:	4620      	mov	r0, r4
    b640:	f011 fe93 	bl	1d36a <nvs_flash_data_wrt>
	if (rc) {
    b644:	4603      	mov	r3, r0
    b646:	b938      	cbnz	r0, b658 <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
    b648:	4620      	mov	r0, r4
    b64a:	a906      	add	r1, sp, #24
    b64c:	f011 fea0 	bl	1d390 <nvs_flash_ate_wrt>
	rc = len;
    b650:	2800      	cmp	r0, #0
    b652:	bf14      	ite	ne
    b654:	4603      	movne	r3, r0
    b656:	4633      	moveq	r3, r6
    b658:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    b65a:	4650      	mov	r0, sl
    b65c:	f00e feb0 	bl	1a3c0 <z_impl_k_mutex_unlock>
	return rc;
    b660:	9b01      	ldr	r3, [sp, #4]
    b662:	461d      	mov	r5, r3
    b664:	e77d      	b.n	b562 <nvs_write+0x1e>
		required_space = data_size + ate_size;
    b666:	4457      	add	r7, sl
    b668:	b2bf      	uxth	r7, r7
    b66a:	e7c7      	b.n	b5fc <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b66c:	2108      	movs	r1, #8
    b66e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b670:	f011 fdd6 	bl	1d220 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    b674:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b678:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    b67c:	2300      	movs	r3, #0
    b67e:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    b682:	1813      	adds	r3, r2, r0
    b684:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    b688:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    b68a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    b68e:	441a      	add	r2, r3
    b690:	1a12      	subs	r2, r2, r0
    b692:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    b694:	a806      	add	r0, sp, #24
    b696:	f011 fdaf 	bl	1d1f8 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    b69a:	a906      	add	r1, sp, #24
    b69c:	4620      	mov	r0, r4
    b69e:	f011 fe77 	bl	1d390 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    b6a2:	89e0      	ldrh	r0, [r4, #14]
    b6a4:	1d21      	adds	r1, r4, #4
    b6a6:	f011 fdb0 	bl	1d20a <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b6aa:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    b6ac:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b6ae:	ea03 030b 	and.w	r3, r3, fp
    b6b2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    b6b4:	f7ff fd62 	bl	b17c <nvs_gc>
		if (rc) {
    b6b8:	4603      	mov	r3, r0
    b6ba:	2800      	cmp	r0, #0
    b6bc:	d1cc      	bne.n	b658 <nvs_write+0x114>
		gc_count++;
    b6be:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    b6c0:	e7a7      	b.n	b612 <nvs_write+0xce>
			rc = -ENOSPC;
    b6c2:	f06f 031b 	mvn.w	r3, #27
    b6c6:	e7c7      	b.n	b658 <nvs_write+0x114>
		return -EINVAL;
    b6c8:	f06f 0515 	mvn.w	r5, #21
    b6cc:	e749      	b.n	b562 <nvs_write+0x1e>
    b6ce:	bf00      	nop
    b6d0:	00022fed 	.word	0x00022fed
    b6d4:	ffff0000 	.word	0xffff0000

0000b6d8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    b6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b6dc:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    b6de:	7c03      	ldrb	r3, [r0, #16]
{
    b6e0:	4604      	mov	r4, r0
    b6e2:	460f      	mov	r7, r1
    b6e4:	4690      	mov	r8, r2
    b6e6:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    b6ea:	b943      	cbnz	r3, b6fe <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    b6ec:	4828      	ldr	r0, [pc, #160]	; (b790 <nvs_read_hist+0xb8>)
    b6ee:	2145      	movs	r1, #69	; 0x45
    b6f0:	f011 fa0e 	bl	1cb10 <printk>
		return -EACCES;
    b6f4:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    b6f8:	b004      	add	sp, #16
    b6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b6fe:	2108      	movs	r1, #8
    b700:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b702:	f011 fd8d 	bl	1d220 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    b706:	89a3      	ldrh	r3, [r4, #12]
    b708:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    b70c:	42b3      	cmp	r3, r6
    b70e:	d33b      	bcc.n	b788 <nvs_read_hist+0xb0>
	cnt_his = 0U;
    b710:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    b714:	6863      	ldr	r3, [r4, #4]
    b716:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b718:	4620      	mov	r0, r4
    b71a:	aa02      	add	r2, sp, #8
    b71c:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    b71e:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b720:	f011 fd88 	bl	1d234 <nvs_prev_ate>
		if (rc) {
    b724:	2800      	cmp	r0, #0
    b726:	d1e7      	bne.n	b6f8 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    b728:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b72c:	42bb      	cmp	r3, r7
    b72e:	d107      	bne.n	b740 <nvs_read_hist+0x68>
    b730:	a802      	add	r0, sp, #8
    b732:	f011 fd55 	bl	1d1e0 <nvs_ate_crc8_check>
    b736:	b918      	cbnz	r0, b740 <nvs_read_hist+0x68>
			cnt_his++;
    b738:	f10a 0a01 	add.w	sl, sl, #1
    b73c:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    b740:	6862      	ldr	r2, [r4, #4]
    b742:	9b01      	ldr	r3, [sp, #4]
    b744:	429a      	cmp	r2, r3
    b746:	d018      	beq.n	b77a <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
    b748:	45ca      	cmp	sl, r9
    b74a:	d9e5      	bls.n	b718 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b74c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b750:	b1bb      	cbz	r3, b782 <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b752:	45ca      	cmp	sl, r9
    b754:	d315      	bcc.n	b782 <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
    b756:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    b75a:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b75c:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    b75e:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b762:	bf28      	it	cs
    b764:	4633      	movcs	r3, r6
    b766:	4642      	mov	r2, r8
    b768:	4620      	mov	r0, r4
    b76a:	4429      	add	r1, r5
    b76c:	f011 fcb4 	bl	1d0d8 <nvs_flash_rd>
	if (rc) {
    b770:	2800      	cmp	r0, #0
    b772:	d1c1      	bne.n	b6f8 <nvs_read_hist+0x20>
	return wlk_ate.len;
    b774:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b778:	e7be      	b.n	b6f8 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b77a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b77e:	42bb      	cmp	r3, r7
    b780:	d0e4      	beq.n	b74c <nvs_read_hist+0x74>
		return -ENOENT;
    b782:	f06f 0001 	mvn.w	r0, #1
    b786:	e7b7      	b.n	b6f8 <nvs_read_hist+0x20>
		return -EINVAL;
    b788:	f06f 0015 	mvn.w	r0, #21
    b78c:	e7b4      	b.n	b6f8 <nvs_read_hist+0x20>
    b78e:	bf00      	nop
    b790:	00022fed 	.word	0x00022fed

0000b794 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b794:	4b01      	ldr	r3, [pc, #4]	; (b79c <virtio_set_status+0x8>)
    b796:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b798:	4770      	bx	lr
    b79a:	bf00      	nop
    b79c:	20070000 	.word	0x20070000

0000b7a0 <init_status_flag>:
    b7a0:	2000      	movs	r0, #0
    b7a2:	4b01      	ldr	r3, [pc, #4]	; (b7a8 <init_status_flag+0x8>)
    b7a4:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b7a6:	4770      	bx	lr
    b7a8:	20070000 	.word	0x20070000

0000b7ac <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b7ac:	4b01      	ldr	r3, [pc, #4]	; (b7b4 <ipm_callback_process+0x8>)
    b7ae:	6818      	ldr	r0, [r3, #0]
    b7b0:	f015 bcfd 	b.w	211ae <virtqueue_notification>
    b7b4:	20009718 	.word	0x20009718

0000b7b8 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b7b8:	4b0a      	ldr	r3, [pc, #40]	; (b7e4 <virtio_notify+0x2c>)
{
    b7ba:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b7bc:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b7be:	2300      	movs	r3, #0
    b7c0:	6882      	ldr	r2, [r0, #8]
    b7c2:	9300      	str	r3, [sp, #0]
    b7c4:	6814      	ldr	r4, [r2, #0]
    b7c6:	4619      	mov	r1, r3
    b7c8:	461a      	mov	r2, r3
    b7ca:	47a0      	blx	r4
	if (status != 0) {
    b7cc:	4602      	mov	r2, r0
    b7ce:	b130      	cbz	r0, b7de <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b7d0:	2145      	movs	r1, #69	; 0x45
    b7d2:	4805      	ldr	r0, [pc, #20]	; (b7e8 <virtio_notify+0x30>)
}
    b7d4:	b002      	add	sp, #8
    b7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b7da:	f011 b999 	b.w	1cb10 <printk>
}
    b7de:	b002      	add	sp, #8
    b7e0:	bd10      	pop	{r4, pc}
    b7e2:	bf00      	nop
    b7e4:	20009708 	.word	0x20009708
    b7e8:	0002311e 	.word	0x0002311e

0000b7ec <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7ec:	4907      	ldr	r1, [pc, #28]	; (b80c <ipm_callback+0x20>)
    b7ee:	e8d1 3fef 	ldaex	r3, [r1]
    b7f2:	f043 0201 	orr.w	r2, r3, #1
    b7f6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b7fa:	2800      	cmp	r0, #0
    b7fc:	d1f7      	bne.n	b7ee <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b7fe:	07db      	lsls	r3, r3, #31
    b800:	d403      	bmi.n	b80a <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b802:	4803      	ldr	r0, [pc, #12]	; (b810 <ipm_callback+0x24>)
    b804:	3908      	subs	r1, #8
    b806:	f015 be93 	b.w	21530 <k_queue_append>
}
    b80a:	4770      	bx	lr
    b80c:	20009714 	.word	0x20009714
    b810:	20008708 	.word	0x20008708

0000b814 <rpmsg_backend_init>:
{
    b814:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b816:	4b47      	ldr	r3, [pc, #284]	; (b934 <rpmsg_backend_init+0x120>)
{
    b818:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b81a:	ac02      	add	r4, sp, #8
{
    b81c:	4606      	mov	r6, r0
    b81e:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b820:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b824:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b828:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b82c:	f04f 33ff 	mov.w	r3, #4294967295
    b830:	4941      	ldr	r1, [pc, #260]	; (b938 <rpmsg_backend_init+0x124>)
    b832:	4842      	ldr	r0, [pc, #264]	; (b93c <rpmsg_backend_init+0x128>)
    b834:	f010 f9e8 	bl	1bc08 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b838:	4941      	ldr	r1, [pc, #260]	; (b940 <rpmsg_backend_init+0x12c>)
    b83a:	4842      	ldr	r0, [pc, #264]	; (b944 <rpmsg_backend_init+0x130>)
    b83c:	f015 feea 	bl	21614 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b840:	2200      	movs	r2, #0
    b842:	4b41      	ldr	r3, [pc, #260]	; (b948 <rpmsg_backend_init+0x134>)
    b844:	4941      	ldr	r1, [pc, #260]	; (b94c <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b846:	4620      	mov	r0, r4
    b848:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b84c:	601a      	str	r2, [r3, #0]
    b84e:	f00d feb1 	bl	195b4 <metal_init>
	if (err) {
    b852:	4604      	mov	r4, r0
    b854:	b138      	cbz	r0, b866 <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b856:	2145      	movs	r1, #69	; 0x45
    b858:	4602      	mov	r2, r0
    b85a:	483d      	ldr	r0, [pc, #244]	; (b950 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b85c:	f011 f958 	bl	1cb10 <printk>
}
    b860:	4620      	mov	r0, r4
    b862:	b005      	add	sp, #20
    b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b866:	483b      	ldr	r0, [pc, #236]	; (b954 <rpmsg_backend_init+0x140>)
    b868:	f00d fe84 	bl	19574 <metal_register_generic_device>
	if (err) {
    b86c:	4604      	mov	r4, r0
    b86e:	b118      	cbz	r0, b878 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b870:	4602      	mov	r2, r0
    b872:	2145      	movs	r1, #69	; 0x45
    b874:	4838      	ldr	r0, [pc, #224]	; (b958 <rpmsg_backend_init+0x144>)
    b876:	e7f1      	b.n	b85c <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b878:	4938      	ldr	r1, [pc, #224]	; (b95c <rpmsg_backend_init+0x148>)
    b87a:	4839      	ldr	r0, [pc, #228]	; (b960 <rpmsg_backend_init+0x14c>)
    b87c:	aa01      	add	r2, sp, #4
    b87e:	f015 fa16 	bl	20cae <metal_device_open>
	if (err) {
    b882:	4604      	mov	r4, r0
    b884:	b118      	cbz	r0, b88e <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b886:	4602      	mov	r2, r0
    b888:	2145      	movs	r1, #69	; 0x45
    b88a:	4836      	ldr	r0, [pc, #216]	; (b964 <rpmsg_backend_init+0x150>)
    b88c:	e7e6      	b.n	b85c <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b88e:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b890:	689a      	ldr	r2, [r3, #8]
    b892:	b92a      	cbnz	r2, b8a0 <rpmsg_backend_init+0x8c>
    b894:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b896:	2145      	movs	r1, #69	; 0x45
    b898:	4833      	ldr	r0, [pc, #204]	; (b968 <rpmsg_backend_init+0x154>)
    b89a:	f011 f939 	bl	1cb10 <printk>
		return err;
    b89e:	e7df      	b.n	b860 <rpmsg_backend_init+0x4c>
    b8a0:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b8a2:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d0f6      	beq.n	b896 <rpmsg_backend_init+0x82>
    b8a8:	4830      	ldr	r0, [pc, #192]	; (b96c <rpmsg_backend_init+0x158>)
    b8aa:	f00e f99b 	bl	19be4 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b8ae:	4f30      	ldr	r7, [pc, #192]	; (b970 <rpmsg_backend_init+0x15c>)
    b8b0:	6038      	str	r0, [r7, #0]
    b8b2:	4830      	ldr	r0, [pc, #192]	; (b974 <rpmsg_backend_init+0x160>)
    b8b4:	f00e f996 	bl	19be4 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b8b8:	683a      	ldr	r2, [r7, #0]
    b8ba:	b932      	cbnz	r2, b8ca <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b8bc:	2145      	movs	r1, #69	; 0x45
    b8be:	482e      	ldr	r0, [pc, #184]	; (b978 <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b8c0:	f011 f926 	bl	1cb10 <printk>
		return -ENODEV;
    b8c4:	f06f 0412 	mvn.w	r4, #18
    b8c8:	e7ca      	b.n	b860 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b8ca:	b910      	cbnz	r0, b8d2 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b8cc:	2145      	movs	r1, #69	; 0x45
    b8ce:	482b      	ldr	r0, [pc, #172]	; (b97c <rpmsg_backend_init+0x168>)
    b8d0:	e7f6      	b.n	b8c0 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b8d2:	6883      	ldr	r3, [r0, #8]
    b8d4:	4622      	mov	r2, r4
    b8d6:	685b      	ldr	r3, [r3, #4]
    b8d8:	4929      	ldr	r1, [pc, #164]	; (b980 <rpmsg_backend_init+0x16c>)
    b8da:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b8dc:	f011 fd79 	bl	1d3d2 <virtqueue_allocate.constprop.0>
    b8e0:	4f28      	ldr	r7, [pc, #160]	; (b984 <rpmsg_backend_init+0x170>)
    b8e2:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b8e4:	b930      	cbnz	r0, b8f4 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b8e6:	2145      	movs	r1, #69	; 0x45
    b8e8:	4827      	ldr	r0, [pc, #156]	; (b988 <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b8ea:	f011 f911 	bl	1cb10 <printk>
		return -ENOMEM;
    b8ee:	f06f 040b 	mvn.w	r4, #11
    b8f2:	e7b5      	b.n	b860 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b8f4:	f011 fd6d 	bl	1d3d2 <virtqueue_allocate.constprop.0>
    b8f8:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b8fa:	b910      	cbnz	r0, b902 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b8fc:	2145      	movs	r1, #69	; 0x45
    b8fe:	4823      	ldr	r0, [pc, #140]	; (b98c <rpmsg_backend_init+0x178>)
    b900:	e7f3      	b.n	b8ea <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b902:	6832      	ldr	r2, [r6, #0]
    b904:	4b22      	ldr	r3, [pc, #136]	; (b990 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b906:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b908:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b90a:	4a22      	ldr	r2, [pc, #136]	; (b994 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b90c:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b90e:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b910:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b912:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b914:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b916:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b918:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b91a:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b91c:	4e1e      	ldr	r6, [pc, #120]	; (b998 <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b91e:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b920:	4a1e      	ldr	r2, [pc, #120]	; (b99c <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b922:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b924:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b926:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b928:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b92a:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b92c:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b92e:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b930:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b932:	e795      	b.n	b860 <rpmsg_backend_init+0x4c>
    b934:	00021cd8 	.word	0x00021cd8
    b938:	2000b7e0 	.word	0x2000b7e0
    b93c:	20008708 	.word	0x20008708
    b940:	00023141 	.word	0x00023141
    b944:	20008728 	.word	0x20008728
    b948:	2000970c 	.word	0x2000970c
    b94c:	0000b7ad 	.word	0x0000b7ad
    b950:	0002314c 	.word	0x0002314c
    b954:	20008200 	.word	0x20008200
    b958:	00023174 	.word	0x00023174
    b95c:	000231a4 	.word	0x000231a4
    b960:	000231ae 	.word	0x000231ae
    b964:	000231b6 	.word	0x000231b6
    b968:	000231d8 	.word	0x000231d8
    b96c:	00023209 	.word	0x00023209
    b970:	20009708 	.word	0x20009708
    b974:	0002320f 	.word	0x0002320f
    b978:	00023215 	.word	0x00023215
    b97c:	0002323d 	.word	0x0002323d
    b980:	0000b7ed 	.word	0x0000b7ed
    b984:	20009718 	.word	0x20009718
    b988:	00023265 	.word	0x00023265
    b98c:	00023293 	.word	0x00023293
    b990:	200081d0 	.word	0x200081d0
    b994:	2007fc00 	.word	0x2007fc00
    b998:	2007f800 	.word	0x2007f800
    b99c:	00021f2c 	.word	0x00021f2c

0000b9a0 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b9a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b9a4:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b9a6:	4e1b      	ldr	r6, [pc, #108]	; (ba14 <ns_bind_cb+0x74>)
{
    b9a8:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b9aa:	6831      	ldr	r1, [r6, #0]
    b9ac:	4628      	mov	r0, r5
{
    b9ae:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b9b0:	f012 fd38 	bl	1e424 <strcmp>
    b9b4:	b168      	cbz	r0, b9d2 <ns_bind_cb+0x32>
    b9b6:	4628      	mov	r0, r5
    b9b8:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b9ba:	f012 fd33 	bl	1e424 <strcmp>
    b9be:	b138      	cbz	r0, b9d0 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b9c0:	462a      	mov	r2, r5
    b9c2:	2145      	movs	r1, #69	; 0x45
    b9c4:	4814      	ldr	r0, [pc, #80]	; (ba18 <ns_bind_cb+0x78>)
}
    b9c6:	b004      	add	sp, #16
    b9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b9cc:	f011 b8a0 	b.w	1cb10 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b9d0:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b9d2:	244c      	movs	r4, #76	; 0x4c
    b9d4:	4344      	muls	r4, r0
    b9d6:	4b11      	ldr	r3, [pc, #68]	; (ba1c <ns_bind_cb+0x7c>)
    b9d8:	f104 0008 	add.w	r0, r4, #8
    b9dc:	9302      	str	r3, [sp, #8]
    b9de:	4434      	add	r4, r6
    b9e0:	6863      	ldr	r3, [r4, #4]
    b9e2:	462a      	mov	r2, r5
    b9e4:	e9cd 8300 	strd	r8, r3, [sp]
    b9e8:	4639      	mov	r1, r7
    b9ea:	f04f 33ff 	mov.w	r3, #4294967295
    b9ee:	4430      	add	r0, r6
    b9f0:	f00d feac 	bl	1974c <rpmsg_create_ept>
			if (err != 0) {
    b9f4:	4603      	mov	r3, r0
    b9f6:	b138      	cbz	r0, ba08 <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b9f8:	462a      	mov	r2, r5
    b9fa:	2145      	movs	r1, #69	; 0x45
    b9fc:	4808      	ldr	r0, [pc, #32]	; (ba20 <ns_bind_cb+0x80>)
}
    b9fe:	b004      	add	sp, #16
    ba00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    ba04:	f011 b884 	b.w	1cb10 <printk>
				endpoints[i].bound = true;
    ba08:	2301      	movs	r3, #1
    ba0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    ba0e:	b004      	add	sp, #16
    ba10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba14:	20009720 	.word	0x20009720
    ba18:	000232cf 	.word	0x000232cf
    ba1c:	0001d3ed 	.word	0x0001d3ed
    ba20:	000232fe 	.word	0x000232fe

0000ba24 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    ba24:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    ba26:	4d13      	ldr	r5, [pc, #76]	; (ba74 <rpmsg_service_init+0x50>)
    ba28:	4913      	ldr	r1, [pc, #76]	; (ba78 <rpmsg_service_init+0x54>)
    ba2a:	4628      	mov	r0, r5
    ba2c:	f7ff fef2 	bl	b814 <rpmsg_backend_init>
	if (err) {
    ba30:	4604      	mov	r4, r0
    ba32:	b138      	cbz	r0, ba44 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    ba34:	2145      	movs	r1, #69	; 0x45
    ba36:	4602      	mov	r2, r0
    ba38:	4810      	ldr	r0, [pc, #64]	; (ba7c <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    ba3a:	f011 f869 	bl	1cb10 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    ba3e:	4620      	mov	r0, r4
    ba40:	b003      	add	sp, #12
    ba42:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    ba44:	4c0e      	ldr	r4, [pc, #56]	; (ba80 <rpmsg_service_init+0x5c>)
    ba46:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    ba4a:	4620      	mov	r0, r4
    ba4c:	490d      	ldr	r1, [pc, #52]	; (ba84 <rpmsg_service_init+0x60>)
    ba4e:	f015 fd38 	bl	214c2 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    ba52:	9400      	str	r4, [sp, #0]
    ba54:	682b      	ldr	r3, [r5, #0]
    ba56:	4a0c      	ldr	r2, [pc, #48]	; (ba88 <rpmsg_service_init+0x64>)
    ba58:	4907      	ldr	r1, [pc, #28]	; (ba78 <rpmsg_service_init+0x54>)
    ba5a:	480c      	ldr	r0, [pc, #48]	; (ba8c <rpmsg_service_init+0x68>)
    ba5c:	f00d ffa2 	bl	199a4 <rpmsg_init_vdev>
	if (err) {
    ba60:	4604      	mov	r4, r0
    ba62:	b118      	cbz	r0, ba6c <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    ba64:	4602      	mov	r2, r0
    ba66:	2145      	movs	r1, #69	; 0x45
    ba68:	4809      	ldr	r0, [pc, #36]	; (ba90 <rpmsg_service_init+0x6c>)
    ba6a:	e7e6      	b.n	ba3a <rpmsg_service_init+0x16>
	ep_crt_started = true;
    ba6c:	2201      	movs	r2, #1
    ba6e:	4b09      	ldr	r3, [pc, #36]	; (ba94 <rpmsg_service_init+0x70>)
    ba70:	701a      	strb	r2, [r3, #0]
	return 0;
    ba72:	e7e4      	b.n	ba3e <rpmsg_service_init+0x1a>
    ba74:	200097b8 	.word	0x200097b8
    ba78:	200087b8 	.word	0x200087b8
    ba7c:	00023334 	.word	0x00023334
    ba80:	2000984c 	.word	0x2000984c
    ba84:	20070400 	.word	0x20070400
    ba88:	0000b9a1 	.word	0x0000b9a1
    ba8c:	200097bc 	.word	0x200097bc
    ba90:	00023361 	.word	0x00023361
    ba94:	2000b2a2 	.word	0x2000b2a2

0000ba98 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    ba98:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    ba9a:	4b0d      	ldr	r3, [pc, #52]	; (bad0 <rpmsg_service_register_endpoint+0x38>)
{
    ba9c:	4602      	mov	r2, r0
	if (ep_crt_started) {
    ba9e:	781b      	ldrb	r3, [r3, #0]
    baa0:	b993      	cbnz	r3, bac8 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    baa2:	4c0c      	ldr	r4, [pc, #48]	; (bad4 <rpmsg_service_register_endpoint+0x3c>)
    baa4:	6820      	ldr	r0, [r4, #0]
    baa6:	b148      	cbz	r0, babc <rpmsg_service_register_endpoint+0x24>
    baa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    baaa:	b133      	cbz	r3, baba <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    baac:	480a      	ldr	r0, [pc, #40]	; (bad8 <rpmsg_service_register_endpoint+0x40>)
    baae:	2145      	movs	r1, #69	; 0x45
    bab0:	f011 f82e 	bl	1cb10 <printk>

	return -ENOMEM;
    bab4:	f06f 000b 	mvn.w	r0, #11
}
    bab8:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    baba:	2001      	movs	r0, #1
			endpoints[i].name = name;
    babc:	234c      	movs	r3, #76	; 0x4c
    babe:	4343      	muls	r3, r0
    bac0:	18e5      	adds	r5, r4, r3
    bac2:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    bac4:	6069      	str	r1, [r5, #4]
			return i;
    bac6:	e7f7      	b.n	bab8 <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    bac8:	f06f 0043 	mvn.w	r0, #67	; 0x43
    bacc:	e7f4      	b.n	bab8 <rpmsg_service_register_endpoint+0x20>
    bace:	bf00      	nop
    bad0:	2000b2a2 	.word	0x2000b2a2
    bad4:	20009720 	.word	0x20009720
    bad8:	00023380 	.word	0x00023380

0000badc <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    badc:	224c      	movs	r2, #76	; 0x4c
    bade:	4b03      	ldr	r3, [pc, #12]	; (baec <rpmsg_service_endpoint_is_bound+0x10>)
    bae0:	fb02 3300 	mla	r3, r2, r0, r3
    bae4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    bae8:	4770      	bx	lr
    baea:	bf00      	nop
    baec:	20009720 	.word	0x20009720

0000baf0 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    baf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    baf2:	244c      	movs	r4, #76	; 0x4c
    baf4:	460b      	mov	r3, r1
    baf6:	2101      	movs	r1, #1
    baf8:	4344      	muls	r4, r0
    bafa:	e9cd 2100 	strd	r2, r1, [sp]
    bafe:	4d05      	ldr	r5, [pc, #20]	; (bb14 <rpmsg_service_send+0x24>)
    bb00:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    bb02:	3408      	adds	r4, #8
    bb04:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    bb08:	1928      	adds	r0, r5, r4
    bb0a:	f00d fe0d 	bl	19728 <rpmsg_send_offchannel_raw>
}
    bb0e:	b003      	add	sp, #12
    bb10:	bd30      	pop	{r4, r5, pc}
    bb12:	bf00      	nop
    bb14:	20009720 	.word	0x20009720

0000bb18 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    bb18:	4b08      	ldr	r3, [pc, #32]	; (bb3c <get_flash_area_from_id+0x24>)
{
    bb1a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    bb1c:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    bb1e:	4b08      	ldr	r3, [pc, #32]	; (bb40 <get_flash_area_from_id+0x28>)
{
    bb20:	4601      	mov	r1, r0
    bb22:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    bb24:	2300      	movs	r3, #0
    bb26:	429c      	cmp	r4, r3
    bb28:	dc01      	bgt.n	bb2e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    bb2a:	2000      	movs	r0, #0
}
    bb2c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    bb2e:	4610      	mov	r0, r2
    bb30:	7805      	ldrb	r5, [r0, #0]
    bb32:	3210      	adds	r2, #16
    bb34:	428d      	cmp	r5, r1
    bb36:	d0f9      	beq.n	bb2c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    bb38:	3301      	adds	r3, #1
    bb3a:	e7f4      	b.n	bb26 <get_flash_area_from_id+0xe>
    bb3c:	00021f80 	.word	0x00021f80
    bb40:	20008258 	.word	0x20008258

0000bb44 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    bb44:	4b08      	ldr	r3, [pc, #32]	; (bb68 <flash_area_open+0x24>)
{
    bb46:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    bb48:	681b      	ldr	r3, [r3, #0]
{
    bb4a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    bb4c:	b12b      	cbz	r3, bb5a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    bb4e:	f7ff ffe3 	bl	bb18 <get_flash_area_from_id>
	if (area == NULL) {
    bb52:	b128      	cbz	r0, bb60 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    bb54:	6020      	str	r0, [r4, #0]
	return 0;
    bb56:	2000      	movs	r0, #0
}
    bb58:	bd10      	pop	{r4, pc}
		return -EACCES;
    bb5a:	f06f 000c 	mvn.w	r0, #12
    bb5e:	e7fb      	b.n	bb58 <flash_area_open+0x14>
		return -ENOENT;
    bb60:	f06f 0001 	mvn.w	r0, #1
    bb64:	e7f8      	b.n	bb58 <flash_area_open+0x14>
    bb66:	bf00      	nop
    bb68:	20008258 	.word	0x20008258

0000bb6c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    bb6c:	b530      	push	{r4, r5, lr}
    bb6e:	b089      	sub	sp, #36	; 0x24
    bb70:	460c      	mov	r4, r1
    bb72:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    bb74:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    bb76:	f7ff ffcf 	bl	bb18 <get_flash_area_from_id>
	if (fa == NULL) {
    bb7a:	b1b8      	cbz	r0, bbac <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    bb7c:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    bb7e:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    bb80:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    bb82:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    bb84:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    bb86:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    bb8a:	2300      	movs	r3, #0
	cb_data->status = 0;
    bb8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    bb90:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    bb92:	f011 fc2d 	bl	1d3f0 <device_get_binding>
	if (flash_dev == NULL) {
    bb96:	b160      	cbz	r0, bbb2 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    bb98:	4907      	ldr	r1, [pc, #28]	; (bbb8 <flash_area_get_sectors+0x4c>)
    bb9a:	aa01      	add	r2, sp, #4
    bb9c:	f014 ff08 	bl	209b0 <flash_page_foreach>
	if (cb_data->status == 0) {
    bba0:	9807      	ldr	r0, [sp, #28]
    bba2:	b908      	cbnz	r0, bba8 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    bba4:	9b05      	ldr	r3, [sp, #20]
    bba6:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    bba8:	b009      	add	sp, #36	; 0x24
    bbaa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    bbac:	f06f 0015 	mvn.w	r0, #21
    bbb0:	e7fa      	b.n	bba8 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    bbb2:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    bbb6:	e7f7      	b.n	bba8 <flash_area_get_sectors+0x3c>
    bbb8:	0001d3f5 	.word	0x0001d3f5

0000bbbc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    bbbc:	4b10      	ldr	r3, [pc, #64]	; (bc00 <settings_save_one+0x44>)
{
    bbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    bbc2:	681c      	ldr	r4, [r3, #0]
{
    bbc4:	4605      	mov	r5, r0
    bbc6:	460e      	mov	r6, r1
    bbc8:	4617      	mov	r7, r2
	if (!cs) {
    bbca:	b1ac      	cbz	r4, bbf8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    bbcc:	f04f 32ff 	mov.w	r2, #4294967295
    bbd0:	f04f 33ff 	mov.w	r3, #4294967295
    bbd4:	480b      	ldr	r0, [pc, #44]	; (bc04 <settings_save_one+0x48>)
    bbd6:	f00e fb27 	bl	1a228 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    bbda:	6863      	ldr	r3, [r4, #4]
    bbdc:	4632      	mov	r2, r6
    bbde:	f8d3 8008 	ldr.w	r8, [r3, #8]
    bbe2:	4629      	mov	r1, r5
    bbe4:	463b      	mov	r3, r7
    bbe6:	4620      	mov	r0, r4
    bbe8:	47c0      	blx	r8
    bbea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bbec:	4805      	ldr	r0, [pc, #20]	; (bc04 <settings_save_one+0x48>)
    bbee:	f00e fbe7 	bl	1a3c0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    bbf2:	4620      	mov	r0, r4
    bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    bbf8:	f06f 0401 	mvn.w	r4, #1
    bbfc:	e7f9      	b.n	bbf2 <settings_save_one+0x36>
    bbfe:	bf00      	nop
    bc00:	20009860 	.word	0x20009860
    bc04:	20008550 	.word	0x20008550

0000bc08 <settings_src_register>:
	parent->next = child;
    bc08:	2300      	movs	r3, #0
    bc0a:	6003      	str	r3, [r0, #0]
	return list->tail;
    bc0c:	4b04      	ldr	r3, [pc, #16]	; (bc20 <settings_src_register+0x18>)
    bc0e:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    bc10:	b912      	cbnz	r2, bc18 <settings_src_register+0x10>
	list->head = node;
    bc12:	e9c3 0000 	strd	r0, r0, [r3]
}
    bc16:	4770      	bx	lr
	parent->next = child;
    bc18:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bc1a:	6058      	str	r0, [r3, #4]
}
    bc1c:	4770      	bx	lr
    bc1e:	bf00      	nop
    bc20:	20009858 	.word	0x20009858

0000bc24 <settings_dst_register>:
	settings_save_dst = cs;
    bc24:	4b01      	ldr	r3, [pc, #4]	; (bc2c <settings_dst_register+0x8>)
    bc26:	6018      	str	r0, [r3, #0]
}
    bc28:	4770      	bx	lr
    bc2a:	bf00      	nop
    bc2c:	20009860 	.word	0x20009860

0000bc30 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    bc30:	2300      	movs	r3, #0
{
    bc32:	b530      	push	{r4, r5, lr}
    bc34:	b085      	sub	sp, #20
    bc36:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    bc38:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bc3c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    bc3e:	f04f 33ff 	mov.w	r3, #4294967295
    bc42:	f04f 32ff 	mov.w	r2, #4294967295
    bc46:	480b      	ldr	r0, [pc, #44]	; (bc74 <settings_load_subtree+0x44>)
    bc48:	f00e faee 	bl	1a228 <z_impl_k_mutex_lock>
	return list->head;
    bc4c:	4b0a      	ldr	r3, [pc, #40]	; (bc78 <settings_load_subtree+0x48>)
    bc4e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bc50:	b134      	cbz	r4, bc60 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    bc52:	6863      	ldr	r3, [r4, #4]
    bc54:	4620      	mov	r0, r4
    bc56:	681b      	ldr	r3, [r3, #0]
    bc58:	a901      	add	r1, sp, #4
    bc5a:	4798      	blx	r3
	return node->next;
    bc5c:	6824      	ldr	r4, [r4, #0]
    bc5e:	e7f7      	b.n	bc50 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    bc60:	4628      	mov	r0, r5
    bc62:	f000 f8d3 	bl	be0c <settings_commit_subtree>
    bc66:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bc68:	4802      	ldr	r0, [pc, #8]	; (bc74 <settings_load_subtree+0x44>)
    bc6a:	f00e fba9 	bl	1a3c0 <z_impl_k_mutex_unlock>
}
    bc6e:	4620      	mov	r0, r4
    bc70:	b005      	add	sp, #20
    bc72:	bd30      	pop	{r4, r5, pc}
    bc74:	20008550 	.word	0x20008550
    bc78:	20009858 	.word	0x20009858

0000bc7c <settings_load_subtree_direct>:
{
    bc7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    bc7e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    bc82:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    bc84:	f04f 33ff 	mov.w	r3, #4294967295
    bc88:	f04f 32ff 	mov.w	r2, #4294967295
    bc8c:	4809      	ldr	r0, [pc, #36]	; (bcb4 <settings_load_subtree_direct+0x38>)
    bc8e:	f00e facb 	bl	1a228 <z_impl_k_mutex_lock>
	return list->head;
    bc92:	4b09      	ldr	r3, [pc, #36]	; (bcb8 <settings_load_subtree_direct+0x3c>)
    bc94:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bc96:	b134      	cbz	r4, bca6 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    bc98:	6863      	ldr	r3, [r4, #4]
    bc9a:	4620      	mov	r0, r4
    bc9c:	681b      	ldr	r3, [r3, #0]
    bc9e:	a901      	add	r1, sp, #4
    bca0:	4798      	blx	r3
	return node->next;
    bca2:	6824      	ldr	r4, [r4, #0]
    bca4:	e7f7      	b.n	bc96 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    bca6:	4803      	ldr	r0, [pc, #12]	; (bcb4 <settings_load_subtree_direct+0x38>)
    bca8:	f00e fb8a 	bl	1a3c0 <z_impl_k_mutex_unlock>
}
    bcac:	2000      	movs	r0, #0
    bcae:	b004      	add	sp, #16
    bcb0:	bd10      	pop	{r4, pc}
    bcb2:	bf00      	nop
    bcb4:	20008550 	.word	0x20008550
    bcb8:	20009858 	.word	0x20009858

0000bcbc <settings_store_init>:
	list->head = NULL;
    bcbc:	2200      	movs	r2, #0
    bcbe:	4b02      	ldr	r3, [pc, #8]	; (bcc8 <settings_store_init+0xc>)
	list->tail = NULL;
    bcc0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    bcc4:	4770      	bx	lr
    bcc6:	bf00      	nop
    bcc8:	20009858 	.word	0x20009858

0000bccc <settings_init>:
	list->head = NULL;
    bccc:	2200      	movs	r2, #0
    bcce:	4b02      	ldr	r3, [pc, #8]	; (bcd8 <settings_init+0xc>)
	list->tail = NULL;
    bcd0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    bcd4:	f7ff bff2 	b.w	bcbc <settings_store_init>
    bcd8:	20009864 	.word	0x20009864

0000bcdc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    bcdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bce0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    bce2:	460e      	mov	r6, r1
    bce4:	b109      	cbz	r1, bcea <settings_parse_and_lookup+0xe>
		*next = NULL;
    bce6:	2300      	movs	r3, #0
    bce8:	600b      	str	r3, [r1, #0]
    bcea:	2500      	movs	r5, #0
    bcec:	4c23      	ldr	r4, [pc, #140]	; (bd7c <settings_parse_and_lookup+0xa0>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bcee:	f8df 8090 	ldr.w	r8, [pc, #144]	; bd80 <settings_parse_and_lookup+0xa4>
    bcf2:	f8df 9090 	ldr.w	r9, [pc, #144]	; bd84 <settings_parse_and_lookup+0xa8>
    bcf6:	4544      	cmp	r4, r8
    bcf8:	d908      	bls.n	bd0c <settings_parse_and_lookup+0x30>
    bcfa:	4649      	mov	r1, r9
    bcfc:	4822      	ldr	r0, [pc, #136]	; (bd88 <settings_parse_and_lookup+0xac>)
    bcfe:	2294      	movs	r2, #148	; 0x94
    bd00:	f010 ff06 	bl	1cb10 <printk>
    bd04:	2194      	movs	r1, #148	; 0x94
    bd06:	4648      	mov	r0, r9
    bd08:	f011 f9a8 	bl	1d05c <assert_post_action>
    bd0c:	4544      	cmp	r4, r8
    bd0e:	d308      	bcc.n	bd22 <settings_parse_and_lookup+0x46>
	return list->head;
    bd10:	4b1e      	ldr	r3, [pc, #120]	; (bd8c <settings_parse_and_lookup+0xb0>)
    bd12:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bd14:	b10c      	cbz	r4, bd1a <settings_parse_and_lookup+0x3e>
    bd16:	3c14      	subs	r4, #20
    bd18:	b9c4      	cbnz	r4, bd4c <settings_parse_and_lookup+0x70>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    bd1a:	4628      	mov	r0, r5
    bd1c:	b003      	add	sp, #12
    bd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    bd22:	4638      	mov	r0, r7
    bd24:	6821      	ldr	r1, [r4, #0]
    bd26:	aa01      	add	r2, sp, #4
    bd28:	f011 fb89 	bl	1d43e <settings_name_steq>
    bd2c:	b160      	cbz	r0, bd48 <settings_parse_and_lookup+0x6c>
		if (!bestmatch) {
    bd2e:	b925      	cbnz	r5, bd3a <settings_parse_and_lookup+0x5e>
			if (next) {
    bd30:	b10e      	cbz	r6, bd36 <settings_parse_and_lookup+0x5a>
				*next = tmpnext;
    bd32:	9b01      	ldr	r3, [sp, #4]
    bd34:	6033      	str	r3, [r6, #0]
    bd36:	4625      	mov	r5, r4
    bd38:	e006      	b.n	bd48 <settings_parse_and_lookup+0x6c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    bd3a:	2200      	movs	r2, #0
    bd3c:	6829      	ldr	r1, [r5, #0]
    bd3e:	6820      	ldr	r0, [r4, #0]
    bd40:	f011 fb7d 	bl	1d43e <settings_name_steq>
    bd44:	2800      	cmp	r0, #0
    bd46:	d1f3      	bne.n	bd30 <settings_parse_and_lookup+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bd48:	3414      	adds	r4, #20
    bd4a:	e7d4      	b.n	bcf6 <settings_parse_and_lookup+0x1a>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    bd4c:	4638      	mov	r0, r7
    bd4e:	6821      	ldr	r1, [r4, #0]
    bd50:	aa01      	add	r2, sp, #4
    bd52:	f011 fb74 	bl	1d43e <settings_name_steq>
    bd56:	b160      	cbz	r0, bd72 <settings_parse_and_lookup+0x96>
		if (!bestmatch) {
    bd58:	b925      	cbnz	r5, bd64 <settings_parse_and_lookup+0x88>
			if (next) {
    bd5a:	b10e      	cbz	r6, bd60 <settings_parse_and_lookup+0x84>
				*next = tmpnext;
    bd5c:	9b01      	ldr	r3, [sp, #4]
    bd5e:	6033      	str	r3, [r6, #0]
    bd60:	4625      	mov	r5, r4
    bd62:	e006      	b.n	bd72 <settings_parse_and_lookup+0x96>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    bd64:	2200      	movs	r2, #0
    bd66:	6829      	ldr	r1, [r5, #0]
    bd68:	6820      	ldr	r0, [r4, #0]
    bd6a:	f011 fb68 	bl	1d43e <settings_name_steq>
    bd6e:	2800      	cmp	r0, #0
    bd70:	d1f3      	bne.n	bd5a <settings_parse_and_lookup+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bd72:	f114 0f14 	cmn.w	r4, #20
    bd76:	d0d0      	beq.n	bd1a <settings_parse_and_lookup+0x3e>
	return node->next;
    bd78:	6964      	ldr	r4, [r4, #20]
    bd7a:	e7cb      	b.n	bd14 <settings_parse_and_lookup+0x38>
    bd7c:	00021b50 	.word	0x00021b50
    bd80:	00021bc8 	.word	0x00021bc8
    bd84:	000233cc 	.word	0x000233cc
    bd88:	00022f17 	.word	0x00022f17
    bd8c:	20009864 	.word	0x20009864

0000bd90 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    bd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd94:	b085      	sub	sp, #20
    bd96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    bd9a:	4604      	mov	r4, r0
    bd9c:	460d      	mov	r5, r1
    bd9e:	4616      	mov	r6, r2
    bda0:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    bda2:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    bda4:	f1b8 0f00 	cmp.w	r8, #0
    bda8:	d018      	beq.n	bddc <settings_call_set_handler+0x4c>
    bdaa:	f8d8 1000 	ldr.w	r1, [r8]
    bdae:	b181      	cbz	r1, bdd2 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    bdb0:	aa03      	add	r2, sp, #12
    bdb2:	f011 fb44 	bl	1d43e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    bdb6:	b960      	cbnz	r0, bdd2 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    bdb8:	2000      	movs	r0, #0
    bdba:	e007      	b.n	bdcc <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    bdbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    bdc0:	4632      	mov	r2, r6
    bdc2:	9300      	str	r3, [sp, #0]
    bdc4:	4629      	mov	r1, r5
    bdc6:	463b      	mov	r3, r7
    bdc8:	9803      	ldr	r0, [sp, #12]
    bdca:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    bdcc:	b005      	add	sp, #20
    bdce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    bdd2:	f8d8 9004 	ldr.w	r9, [r8, #4]
    bdd6:	f1b9 0f00 	cmp.w	r9, #0
    bdda:	d1ef      	bne.n	bdbc <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    bddc:	4620      	mov	r0, r4
    bdde:	a903      	add	r1, sp, #12
    bde0:	f7ff ff7c 	bl	bcdc <settings_parse_and_lookup>
		if (!ch) {
    bde4:	2800      	cmp	r0, #0
    bde6:	d0e7      	beq.n	bdb8 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    bde8:	463b      	mov	r3, r7
    bdea:	f8d0 8008 	ldr.w	r8, [r0, #8]
    bdee:	4632      	mov	r2, r6
    bdf0:	4629      	mov	r1, r5
    bdf2:	9803      	ldr	r0, [sp, #12]
    bdf4:	47c0      	blx	r8
		if (rc != 0) {
    bdf6:	4603      	mov	r3, r0
    bdf8:	2800      	cmp	r0, #0
    bdfa:	d0dd      	beq.n	bdb8 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
    bdfc:	4622      	mov	r2, r4
    bdfe:	2145      	movs	r1, #69	; 0x45
    be00:	4801      	ldr	r0, [pc, #4]	; (be08 <settings_call_set_handler+0x78>)
    be02:	f010 fe85 	bl	1cb10 <printk>
    be06:	e7d7      	b.n	bdb8 <settings_call_set_handler+0x28>
    be08:	000233fe 	.word	0x000233fe

0000be0c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be10:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    be12:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    be14:	4c1f      	ldr	r4, [pc, #124]	; (be94 <settings_commit_subtree+0x88>)
    be16:	4f20      	ldr	r7, [pc, #128]	; (be98 <settings_commit_subtree+0x8c>)
    be18:	f8df 8080 	ldr.w	r8, [pc, #128]	; be9c <settings_commit_subtree+0x90>
    be1c:	42bc      	cmp	r4, r7
    be1e:	d908      	bls.n	be32 <settings_commit_subtree+0x26>
    be20:	4641      	mov	r1, r8
    be22:	481f      	ldr	r0, [pc, #124]	; (bea0 <settings_commit_subtree+0x94>)
    be24:	22f4      	movs	r2, #244	; 0xf4
    be26:	f010 fe73 	bl	1cb10 <printk>
    be2a:	21f4      	movs	r1, #244	; 0xf4
    be2c:	4640      	mov	r0, r8
    be2e:	f011 f915 	bl	1d05c <assert_post_action>
    be32:	42bc      	cmp	r4, r7
    be34:	d307      	bcc.n	be46 <settings_commit_subtree+0x3a>
	return list->head;
    be36:	4b1b      	ldr	r3, [pc, #108]	; (bea4 <settings_commit_subtree+0x98>)
    be38:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    be3a:	b10c      	cbz	r4, be40 <settings_commit_subtree+0x34>
    be3c:	3c14      	subs	r4, #20
    be3e:	b9a4      	cbnz	r4, be6a <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    be40:	4628      	mov	r0, r5
    be42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be46:	b91e      	cbnz	r6, be50 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    be48:	68e3      	ldr	r3, [r4, #12]
    be4a:	b94b      	cbnz	r3, be60 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    be4c:	3414      	adds	r4, #20
    be4e:	e7e5      	b.n	be1c <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be50:	2200      	movs	r2, #0
    be52:	4631      	mov	r1, r6
    be54:	6820      	ldr	r0, [r4, #0]
    be56:	f011 faf2 	bl	1d43e <settings_name_steq>
    be5a:	2800      	cmp	r0, #0
    be5c:	d1f4      	bne.n	be48 <settings_commit_subtree+0x3c>
    be5e:	e7f5      	b.n	be4c <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    be60:	4798      	blx	r3
				rc = rc2;
    be62:	2d00      	cmp	r5, #0
    be64:	bf08      	it	eq
    be66:	4605      	moveq	r5, r0
    be68:	e7f0      	b.n	be4c <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be6a:	b936      	cbnz	r6, be7a <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    be6c:	68e3      	ldr	r3, [r4, #12]
    be6e:	b963      	cbnz	r3, be8a <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    be70:	f114 0f14 	cmn.w	r4, #20
    be74:	d0e4      	beq.n	be40 <settings_commit_subtree+0x34>
	return node->next;
    be76:	6964      	ldr	r4, [r4, #20]
    be78:	e7df      	b.n	be3a <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be7a:	2200      	movs	r2, #0
    be7c:	4631      	mov	r1, r6
    be7e:	6820      	ldr	r0, [r4, #0]
    be80:	f011 fadd 	bl	1d43e <settings_name_steq>
    be84:	2800      	cmp	r0, #0
    be86:	d1f1      	bne.n	be6c <settings_commit_subtree+0x60>
    be88:	e7f2      	b.n	be70 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    be8a:	4798      	blx	r3
				rc = rc2;
    be8c:	2d00      	cmp	r5, #0
    be8e:	bf08      	it	eq
    be90:	4605      	moveq	r5, r0
    be92:	e7ed      	b.n	be70 <settings_commit_subtree+0x64>
    be94:	00021b50 	.word	0x00021b50
    be98:	00021bc8 	.word	0x00021bc8
    be9c:	000233cc 	.word	0x000233cc
    bea0:	00022f17 	.word	0x00022f17
    bea4:	20009864 	.word	0x20009864

0000bea8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    bea8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    beaa:	4c06      	ldr	r4, [pc, #24]	; (bec4 <settings_subsys_init+0x1c>)
    beac:	7823      	ldrb	r3, [r4, #0]
    beae:	b93b      	cbnz	r3, bec0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    beb0:	f7ff ff0c 	bl	bccc <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    beb4:	f000 f864 	bl	bf80 <settings_backend_init>

	if (!err) {
    beb8:	b908      	cbnz	r0, bebe <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    beba:	2301      	movs	r3, #1
    bebc:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    bebe:	bd10      	pop	{r4, pc}
		return 0;
    bec0:	2000      	movs	r0, #0
    bec2:	e7fc      	b.n	bebe <settings_subsys_init+0x16>
    bec4:	2000b2a3 	.word	0x2000b2a3

0000bec8 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    bec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    becc:	4680      	mov	r8, r0
    bece:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    bed0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    bed2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; bf7c <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    bed6:	3401      	adds	r4, #1
{
    bed8:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    beda:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    bedc:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    bee0:	1e65      	subs	r5, r4, #1
    bee2:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    bee4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bee8:	d045      	beq.n	bf76 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    beea:	234a      	movs	r3, #74	; 0x4a
    beec:	4629      	mov	r1, r5
    beee:	aa05      	add	r2, sp, #20
    bef0:	4630      	mov	r0, r6
    bef2:	f011 fa62 	bl	1d3ba <nvs_read>
    bef6:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    befa:	343f      	adds	r4, #63	; 0x3f
    befc:	b2a4      	uxth	r4, r4
    befe:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    bf00:	4621      	mov	r1, r4
    bf02:	2301      	movs	r3, #1
    bf04:	4630      	mov	r0, r6
    bf06:	f10d 020b 	add.w	r2, sp, #11
    bf0a:	f011 fa56 	bl	1d3ba <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    bf0e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    bf10:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    bf12:	dc03      	bgt.n	bf1c <settings_nvs_load+0x54>
    bf14:	2800      	cmp	r0, #0
    bf16:	dc03      	bgt.n	bf20 <settings_nvs_load+0x58>
{
    bf18:	462c      	mov	r4, r5
    bf1a:	e7e1      	b.n	bee0 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    bf1c:	2800      	cmp	r0, #0
    bf1e:	dc16      	bgt.n	bf4e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    bf20:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    bf24:	42ab      	cmp	r3, r5
    bf26:	d109      	bne.n	bf3c <settings_nvs_load+0x74>
				cf->last_name_id--;
    bf28:	4642      	mov	r2, r8
    bf2a:	1e6b      	subs	r3, r5, #1
    bf2c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    bf30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    bf34:	2302      	movs	r3, #2
    bf36:	4630      	mov	r0, r6
    bf38:	f7ff fb04 	bl	b544 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    bf3c:	4629      	mov	r1, r5
    bf3e:	4630      	mov	r0, r6
    bf40:	f011 fa37 	bl	1d3b2 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    bf44:	4621      	mov	r1, r4
    bf46:	4630      	mov	r0, r6
    bf48:	f011 fa33 	bl	1d3b2 <nvs_delete>
			continue;
    bf4c:	e7e4      	b.n	bf18 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    bf4e:	ab18      	add	r3, sp, #96	; 0x60
    bf50:	441f      	add	r7, r3
    bf52:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    bf54:	4652      	mov	r2, sl
		name[rc1] = '\0';
    bf56:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    bf5a:	a805      	add	r0, sp, #20
    bf5c:	f8cd 9000 	str.w	r9, [sp]
    bf60:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    bf62:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    bf64:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    bf68:	f7ff ff12 	bl	bd90 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    bf6c:	2800      	cmp	r0, #0
    bf6e:	d0d3      	beq.n	bf18 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    bf70:	b018      	add	sp, #96	; 0x60
    bf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf76:	2000      	movs	r0, #0
	return ret;
    bf78:	e7fa      	b.n	bf70 <settings_nvs_load+0xa8>
    bf7a:	bf00      	nop
    bf7c:	0001d4b1 	.word	0x0001d4b1

0000bf80 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    bf80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    bf82:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    bf84:	4669      	mov	r1, sp
    bf86:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
    bf88:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    bf8a:	f7ff fddb 	bl	bb44 <flash_area_open>
	if (rc) {
    bf8e:	4604      	mov	r4, r0
    bf90:	2800      	cmp	r0, #0
    bf92:	d136      	bne.n	c002 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    bf94:	2002      	movs	r0, #2
    bf96:	aa02      	add	r2, sp, #8
    bf98:	a901      	add	r1, sp, #4
    bf9a:	f7ff fde7 	bl	bb6c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    bf9e:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    bfa2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    bfa4:	d02d      	beq.n	c002 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    bfa6:	b138      	cbz	r0, bfb8 <settings_backend_init+0x38>
    bfa8:	340c      	adds	r4, #12
    bfaa:	d005      	beq.n	bfb8 <settings_backend_init+0x38>
		k_panic();
    bfac:	4040      	eors	r0, r0
    bfae:	f380 8811 	msr	BASEPRI, r0
    bfb2:	f04f 0004 	mov.w	r0, #4
    bfb6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    bfb8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    bfba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    bfbe:	d223      	bcs.n	c008 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    bfc0:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    bfc2:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    bfc4:	9a00      	ldr	r2, [sp, #0]
    bfc6:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    bfc8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    bfca:	4285      	cmp	r5, r0
    bfcc:	b29c      	uxth	r4, r3
    bfce:	d303      	bcc.n	bfd8 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    bfd0:	3301      	adds	r3, #1
    bfd2:	2b08      	cmp	r3, #8
    bfd4:	d1f8      	bne.n	bfc8 <settings_backend_init+0x48>
    bfd6:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    bfd8:	4d0d      	ldr	r5, [pc, #52]	; (c010 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    bfda:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    bfdc:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    bfde:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    bfe0:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    bfe2:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    bfe4:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    bfe6:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    bfe8:	f011 faf9 	bl	1d5de <settings_nvs_backend_init>
	if (rc) {
    bfec:	4604      	mov	r4, r0
    bfee:	b940      	cbnz	r0, c002 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    bff0:	4e08      	ldr	r6, [pc, #32]	; (c014 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    bff2:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    bff4:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    bff6:	f7ff fe07 	bl	bc08 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    bffa:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    bffc:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    bffe:	f7ff fe11 	bl	bc24 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    c002:	4620      	mov	r0, r4
    c004:	b004      	add	sp, #16
    c006:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    c008:	f06f 0424 	mvn.w	r4, #36	; 0x24
    c00c:	e7f9      	b.n	c002 <settings_backend_init+0x82>
    c00e:	bf00      	nop
    c010:	2000986c 	.word	0x2000986c
    c014:	2000825c 	.word	0x2000825c

0000c018 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    c018:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    c01a:	4c04      	ldr	r4, [pc, #16]	; (c02c <rtt_console_init+0x14>)
    c01c:	4620      	mov	r0, r4
    c01e:	f7fe f8b1 	bl	a184 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    c022:	4620      	mov	r0, r4
    c024:	f002 fa20 	bl	e468 <__stdout_hook_install>

	return 0;
}
    c028:	2000      	movs	r0, #0
    c02a:	bd10      	pop	{r4, pc}
    c02c:	0000c031 	.word	0x0000c031

0000c030 <rtt_console_out>:
{
    c030:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c034:	4604      	mov	r4, r0
	char c = (char)character;
    c036:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    c038:	f8df 8058 	ldr.w	r8, [pc, #88]	; c094 <rtt_console_out+0x64>
    c03c:	4e16      	ldr	r6, [pc, #88]	; (c098 <rtt_console_out+0x68>)
    c03e:	f88d 0007 	strb.w	r0, [sp, #7]
    c042:	f04f 33ff 	mov.w	r3, #4294967295
    c046:	f04f 32ff 	mov.w	r2, #4294967295
    c04a:	4640      	mov	r0, r8
    c04c:	f00e f8ec 	bl	1a228 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    c050:	2201      	movs	r2, #1
    c052:	f10d 0107 	add.w	r1, sp, #7
    c056:	2000      	movs	r0, #0
    c058:	f001 faa4 	bl	d5a4 <SEGGER_RTT_WriteNoLock>
    c05c:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    c05e:	4640      	mov	r0, r8
    c060:	f00e f9ae 	bl	1a3c0 <z_impl_k_mutex_unlock>
		if (cnt) {
    c064:	b12f      	cbz	r7, c072 <rtt_console_out+0x42>
			host_present = true;
    c066:	2301      	movs	r3, #1
    c068:	7033      	strb	r3, [r6, #0]
}
    c06a:	4620      	mov	r0, r4
    c06c:	b002      	add	sp, #8
    c06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    c072:	7833      	ldrb	r3, [r6, #0]
    c074:	2b00      	cmp	r3, #0
    c076:	d0f8      	beq.n	c06a <rtt_console_out+0x3a>
			if (max_cnt) {
    c078:	3d01      	subs	r5, #1
    c07a:	d008      	beq.n	c08e <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    c07c:	f015 fac0 	bl	21600 <k_is_in_isr>
    c080:	2800      	cmp	r0, #0
    c082:	d1de      	bne.n	c042 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    c084:	2100      	movs	r1, #0
    c086:	2042      	movs	r0, #66	; 0x42
    c088:	f00f fb4c 	bl	1b724 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c08c:	e7d9      	b.n	c042 <rtt_console_out+0x12>
				host_present = false;
    c08e:	7035      	strb	r5, [r6, #0]
    c090:	e7eb      	b.n	c06a <rtt_console_out+0x3a>
    c092:	bf00      	nop
    c094:	20008528 	.word	0x20008528
    c098:	2000b2a4 	.word	0x2000b2a4

0000c09c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c09e:	2340      	movs	r3, #64	; 0x40
{
    c0a0:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c0a2:	490a      	ldr	r1, [pc, #40]	; (c0cc <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c0a4:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    c0a6:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c0a8:	1149      	asrs	r1, r1, #5
{
    c0aa:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c0ac:	4623      	mov	r3, r4
    c0ae:	4a08      	ldr	r2, [pc, #32]	; (c0d0 <onoff_start+0x34>)
    c0b0:	4808      	ldr	r0, [pc, #32]	; (c0d4 <onoff_start+0x38>)
    c0b2:	f011 fac3 	bl	1d63c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    c0b6:	1e01      	subs	r1, r0, #0
    c0b8:	da05      	bge.n	c0c6 <onoff_start+0x2a>
		notify(mgr, err);
    c0ba:	4628      	mov	r0, r5
    c0bc:	4623      	mov	r3, r4
	}
}
    c0be:	b003      	add	sp, #12
    c0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    c0c4:	4718      	bx	r3
}
    c0c6:	b003      	add	sp, #12
    c0c8:	bd30      	pop	{r4, r5, pc}
    c0ca:	bf00      	nop
    c0cc:	200098bc 	.word	0x200098bc
    c0d0:	0001d6af 	.word	0x0001d6af
    c0d4:	20008438 	.word	0x20008438

0000c0d8 <get_status>:
{
    c0d8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c0da:	b2cc      	uxtb	r4, r1
    c0dc:	2c03      	cmp	r4, #3
{
    c0de:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c0e0:	d908      	bls.n	c0f4 <get_status+0x1c>
    c0e2:	4909      	ldr	r1, [pc, #36]	; (c108 <get_status+0x30>)
    c0e4:	4809      	ldr	r0, [pc, #36]	; (c10c <get_status+0x34>)
    c0e6:	227e      	movs	r2, #126	; 0x7e
    c0e8:	f010 fd12 	bl	1cb10 <printk>
    c0ec:	217e      	movs	r1, #126	; 0x7e
    c0ee:	4806      	ldr	r0, [pc, #24]	; (c108 <get_status+0x30>)
    c0f0:	f010 ffb4 	bl	1d05c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    c0f4:	230c      	movs	r3, #12
    c0f6:	68e9      	ldr	r1, [r5, #12]
    c0f8:	fb04 1403 	mla	r4, r4, r3, r1
    c0fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    c100:	f000 0007 	and.w	r0, r0, #7
    c104:	bd38      	pop	{r3, r4, r5, pc}
    c106:	bf00      	nop
    c108:	0002342e 	.word	0x0002342e
    c10c:	00022f17 	.word	0x00022f17

0000c110 <stop>:
{
    c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c112:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c114:	2c03      	cmp	r4, #3
{
    c116:	4605      	mov	r5, r0
    c118:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    c11a:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c11c:	d90a      	bls.n	c134 <stop+0x24>
    c11e:	4919      	ldr	r1, [pc, #100]	; (c184 <stop+0x74>)
    c120:	4819      	ldr	r0, [pc, #100]	; (c188 <stop+0x78>)
    c122:	f240 1253 	movw	r2, #339	; 0x153
    c126:	f010 fcf3 	bl	1cb10 <printk>
    c12a:	f240 1153 	movw	r1, #339	; 0x153
    c12e:	4815      	ldr	r0, [pc, #84]	; (c184 <stop+0x74>)
    c130:	f010 ff94 	bl	1d05c <assert_post_action>
	__asm__ volatile(
    c134:	f04f 0320 	mov.w	r3, #32
    c138:	f3ef 8111 	mrs	r1, BASEPRI
    c13c:	f383 8811 	msr	BASEPRI, r3
    c140:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c144:	220c      	movs	r2, #12
    c146:	fb02 6304 	mla	r3, r2, r4, r6
    c14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c14e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c152:	d001      	beq.n	c158 <stop+0x48>
    c154:	429f      	cmp	r7, r3
    c156:	d112      	bne.n	c17e <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c158:	2301      	movs	r3, #1
	int err = 0;
    c15a:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c15c:	fb02 6604 	mla	r6, r2, r4, r6
    c160:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    c164:	f381 8811 	msr	BASEPRI, r1
    c168:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    c16c:	b930      	cbnz	r0, c17c <stop+0x6c>
	get_sub_config(dev, type)->stop();
    c16e:	230c      	movs	r3, #12
    c170:	6869      	ldr	r1, [r5, #4]
    c172:	fb03 1404 	mla	r4, r3, r4, r1
    c176:	6863      	ldr	r3, [r4, #4]
    c178:	4798      	blx	r3
	return 0;
    c17a:	2000      	movs	r0, #0
}
    c17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    c17e:	f04f 30ff 	mov.w	r0, #4294967295
    c182:	e7ef      	b.n	c164 <stop+0x54>
    c184:	0002342e 	.word	0x0002342e
    c188:	00022f17 	.word	0x00022f17

0000c18c <onoff_stop>:
{
    c18c:	b570      	push	{r4, r5, r6, lr}
    c18e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c190:	4906      	ldr	r1, [pc, #24]	; (c1ac <onoff_stop+0x20>)
{
    c192:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    c194:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c196:	1149      	asrs	r1, r1, #5
    c198:	2240      	movs	r2, #64	; 0x40
    c19a:	4805      	ldr	r0, [pc, #20]	; (c1b0 <onoff_stop+0x24>)
    c19c:	f7ff ffb8 	bl	c110 <stop>
	notify(mgr, res);
    c1a0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c1a2:	4601      	mov	r1, r0
	notify(mgr, res);
    c1a4:	4620      	mov	r0, r4
}
    c1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    c1aa:	4718      	bx	r3
    c1ac:	200098bc 	.word	0x200098bc
    c1b0:	20008438 	.word	0x20008438

0000c1b4 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    c1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c1b8:	2200      	movs	r2, #0
    c1ba:	2101      	movs	r1, #1
{
    c1bc:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c1be:	2005      	movs	r0, #5
    c1c0:	f001 fc0c 	bl	d9dc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    c1c4:	2005      	movs	r0, #5
    c1c6:	f001 fbeb 	bl	d9a0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    c1ca:	4811      	ldr	r0, [pc, #68]	; (c210 <clk_init+0x5c>)
    c1cc:	f00c fe16 	bl	18dfc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    c1d0:	4b10      	ldr	r3, [pc, #64]	; (c214 <clk_init+0x60>)
    c1d2:	4298      	cmp	r0, r3
    c1d4:	d119      	bne.n	c20a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c1d6:	f00c fe31 	bl	18e3c <nrfx_clock_enable>
    c1da:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c1dc:	f04f 080c 	mov.w	r8, #12
    c1e0:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c1e2:	f8df 9034 	ldr.w	r9, [pc, #52]	; c218 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    c1e6:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c1e8:	4649      	mov	r1, r9
    c1ea:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    c1ee:	f010 fcea 	bl	1cbc6 <onoff_manager_init>
		if (err < 0) {
    c1f2:	2800      	cmp	r0, #0
    c1f4:	db07      	blt.n	c206 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c1f6:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    c1fa:	3401      	adds	r4, #1
    c1fc:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c1fe:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    c202:	d1f0      	bne.n	c1e6 <clk_init+0x32>
	}

	return 0;
    c204:	2000      	movs	r0, #0
}
    c206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    c20a:	f06f 0004 	mvn.w	r0, #4
    c20e:	e7fa      	b.n	c206 <clk_init+0x52>
    c210:	0000c255 	.word	0x0000c255
    c214:	0bad0000 	.word	0x0bad0000
    c218:	00021fc8 	.word	0x00021fc8

0000c21c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    c21c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    c21e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    c220:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    c222:	434b      	muls	r3, r1
    c224:	4809      	ldr	r0, [pc, #36]	; (c24c <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    c226:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    c228:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    c22a:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    c22c:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c230:	4418      	add	r0, r3
	sub_data->cb = NULL;
    c232:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c236:	f011 f9ee 	bl	1d616 <set_on_state>
	if (callback) {
    c23a:	b12d      	cbz	r5, c248 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c23c:	4632      	mov	r2, r6
    c23e:	462b      	mov	r3, r5
}
    c240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    c244:	4802      	ldr	r0, [pc, #8]	; (c250 <clkstarted_handle.constprop.0+0x34>)
    c246:	4718      	bx	r3
}
    c248:	bd70      	pop	{r4, r5, r6, pc}
    c24a:	bf00      	nop
    c24c:	200098bc 	.word	0x200098bc
    c250:	20008438 	.word	0x20008438

0000c254 <clock_event_handler>:
{
    c254:	b508      	push	{r3, lr}
    c256:	2805      	cmp	r0, #5
    c258:	d821      	bhi.n	c29e <clock_event_handler+0x4a>
    c25a:	e8df f000 	tbb	[pc, r0]
    c25e:	1103      	.short	0x1103
    c260:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c264:	4b13      	ldr	r3, [pc, #76]	; (c2b4 <clock_event_handler+0x60>)
    c266:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    c26a:	f010 0007 	ands.w	r0, r0, #7
    c26e:	d11f      	bne.n	c2b0 <clock_event_handler+0x5c>
}
    c270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    c274:	f7ff bfd2 	b.w	c21c <clkstarted_handle.constprop.0>
    c278:	2002      	movs	r0, #2
    c27a:	e7f9      	b.n	c270 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    c27c:	2003      	movs	r0, #3
    c27e:	e7f7      	b.n	c270 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c280:	2001      	movs	r0, #1
    c282:	e7f5      	b.n	c270 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    c284:	490c      	ldr	r1, [pc, #48]	; (c2b8 <clock_event_handler+0x64>)
    c286:	f240 2266 	movw	r2, #614	; 0x266
    c28a:	480c      	ldr	r0, [pc, #48]	; (c2bc <clock_event_handler+0x68>)
    c28c:	f010 fc40 	bl	1cb10 <printk>
    c290:	f240 2166 	movw	r1, #614	; 0x266
}
    c294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    c298:	4807      	ldr	r0, [pc, #28]	; (c2b8 <clock_event_handler+0x64>)
    c29a:	f010 bedf 	b.w	1d05c <assert_post_action>
    c29e:	4906      	ldr	r1, [pc, #24]	; (c2b8 <clock_event_handler+0x64>)
    c2a0:	f240 226a 	movw	r2, #618	; 0x26a
    c2a4:	4805      	ldr	r0, [pc, #20]	; (c2bc <clock_event_handler+0x68>)
    c2a6:	f010 fc33 	bl	1cb10 <printk>
    c2aa:	f240 216a 	movw	r1, #618	; 0x26a
    c2ae:	e7f1      	b.n	c294 <clock_event_handler+0x40>
}
    c2b0:	bd08      	pop	{r3, pc}
    c2b2:	bf00      	nop
    c2b4:	200098bc 	.word	0x200098bc
    c2b8:	0002342e 	.word	0x0002342e
    c2bc:	00022f17 	.word	0x00022f17

0000c2c0 <generic_hfclk_start>:
{
    c2c0:	b508      	push	{r3, lr}
	__asm__ volatile(
    c2c2:	f04f 0320 	mov.w	r3, #32
    c2c6:	f3ef 8111 	mrs	r1, BASEPRI
    c2ca:	f383 8811 	msr	BASEPRI, r3
    c2ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c2d2:	4a11      	ldr	r2, [pc, #68]	; (c318 <generic_hfclk_start+0x58>)
    c2d4:	6813      	ldr	r3, [r2, #0]
    c2d6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c2da:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c2de:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c2e0:	d00b      	beq.n	c2fa <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c2e2:	4a0e      	ldr	r2, [pc, #56]	; (c31c <generic_hfclk_start+0x5c>)
    c2e4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c2e8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c2ec:	f013 0301 	ands.w	r3, r3, #1
    c2f0:	d003      	beq.n	c2fa <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    c2f2:	480b      	ldr	r0, [pc, #44]	; (c320 <generic_hfclk_start+0x60>)
    c2f4:	f011 f98f 	bl	1d616 <set_on_state>
			already_started = true;
    c2f8:	2301      	movs	r3, #1
	__asm__ volatile(
    c2fa:	f381 8811 	msr	BASEPRI, r1
    c2fe:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c302:	b123      	cbz	r3, c30e <generic_hfclk_start+0x4e>
}
    c304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c308:	2000      	movs	r0, #0
    c30a:	f7ff bf87 	b.w	c21c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c30e:	2001      	movs	r0, #1
}
    c310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c314:	f00c bdb6 	b.w	18e84 <nrfx_clock_start>
    c318:	2000996c 	.word	0x2000996c
    c31c:	40005000 	.word	0x40005000
    c320:	20009944 	.word	0x20009944

0000c324 <api_blocking_start>:
{
    c324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c326:	2200      	movs	r2, #0
    c328:	2301      	movs	r3, #1
    c32a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c32e:	ab04      	add	r3, sp, #16
    c330:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c334:	4a09      	ldr	r2, [pc, #36]	; (c35c <api_blocking_start+0x38>)
    c336:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c338:	f8cd d000 	str.w	sp, [sp]
    c33c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c340:	f011 f9ae 	bl	1d6a0 <api_start>
	if (err < 0) {
    c344:	2800      	cmp	r0, #0
    c346:	db05      	blt.n	c354 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    c348:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c34c:	2300      	movs	r3, #0
    c34e:	4668      	mov	r0, sp
    c350:	f00f fa5a 	bl	1b808 <z_impl_k_sem_take>
}
    c354:	b007      	add	sp, #28
    c356:	f85d fb04 	ldr.w	pc, [sp], #4
    c35a:	bf00      	nop
    c35c:	0001d6e5 	.word	0x0001d6e5

0000c360 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c360:	4b07      	ldr	r3, [pc, #28]	; (c380 <generic_hfclk_stop+0x20>)
    c362:	e8d3 2fef 	ldaex	r2, [r3]
    c366:	f022 0102 	bic.w	r1, r2, #2
    c36a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c36e:	2800      	cmp	r0, #0
    c370:	d1f7      	bne.n	c362 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c372:	07d3      	lsls	r3, r2, #31
    c374:	d402      	bmi.n	c37c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c376:	2001      	movs	r0, #1
    c378:	f00c bdee 	b.w	18f58 <nrfx_clock_stop>
}
    c37c:	4770      	bx	lr
    c37e:	bf00      	nop
    c380:	2000996c 	.word	0x2000996c

0000c384 <z_nrf_clock_control_lf_on>:
{
    c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c388:	2201      	movs	r2, #1
    c38a:	4606      	mov	r6, r0
    c38c:	4942      	ldr	r1, [pc, #264]	; (c498 <z_nrf_clock_control_lf_on+0x114>)
    c38e:	e8d1 3fef 	ldaex	r3, [r1]
    c392:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c396:	2800      	cmp	r0, #0
    c398:	d1f9      	bne.n	c38e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    c39a:	b99b      	cbnz	r3, c3c4 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c39c:	493f      	ldr	r1, [pc, #252]	; (c49c <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    c39e:	4840      	ldr	r0, [pc, #256]	; (c4a0 <z_nrf_clock_control_lf_on+0x11c>)
    c3a0:	604b      	str	r3, [r1, #4]
    c3a2:	60cb      	str	r3, [r1, #12]
    c3a4:	608a      	str	r2, [r1, #8]
    c3a6:	f7fe f8f5 	bl	a594 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    c3aa:	2800      	cmp	r0, #0
    c3ac:	da0a      	bge.n	c3c4 <z_nrf_clock_control_lf_on+0x40>
    c3ae:	493d      	ldr	r1, [pc, #244]	; (c4a4 <z_nrf_clock_control_lf_on+0x120>)
    c3b0:	483d      	ldr	r0, [pc, #244]	; (c4a8 <z_nrf_clock_control_lf_on+0x124>)
    c3b2:	f240 2226 	movw	r2, #550	; 0x226
    c3b6:	f010 fbab 	bl	1cb10 <printk>
    c3ba:	f240 2126 	movw	r1, #550	; 0x226
    c3be:	4839      	ldr	r0, [pc, #228]	; (c4a4 <z_nrf_clock_control_lf_on+0x120>)
    c3c0:	f010 fe4c 	bl	1d05c <assert_post_action>
	switch (start_mode) {
    c3c4:	b386      	cbz	r6, c428 <z_nrf_clock_control_lf_on+0xa4>
    c3c6:	1e73      	subs	r3, r6, #1
    c3c8:	2b01      	cmp	r3, #1
    c3ca:	d852      	bhi.n	c472 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c3cc:	2e01      	cmp	r6, #1
    c3ce:	d106      	bne.n	c3de <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c3d0:	4b36      	ldr	r3, [pc, #216]	; (c4ac <z_nrf_clock_control_lf_on+0x128>)
    c3d2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c3d6:	f003 0303 	and.w	r3, r3, #3
    c3da:	2b02      	cmp	r3, #2
    c3dc:	d024      	beq.n	c428 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c3de:	f015 f90f 	bl	21600 <k_is_in_isr>
    c3e2:	4604      	mov	r4, r0
    c3e4:	b918      	cbnz	r0, c3ee <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    c3e6:	4b32      	ldr	r3, [pc, #200]	; (c4b0 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    c3e8:	781b      	ldrb	r3, [r3, #0]
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d14e      	bne.n	c48c <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    c3ee:	f04f 0320 	mov.w	r3, #32
    c3f2:	f3ef 8711 	mrs	r7, BASEPRI
    c3f6:	f383 8811 	msr	BASEPRI, r3
    c3fa:	f3bf 8f6f 	isb	sy
    c3fe:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c400:	4d2a      	ldr	r5, [pc, #168]	; (c4ac <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c402:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c4b4 <z_nrf_clock_control_lf_on+0x130>
    c406:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c40a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c40e:	03d2      	lsls	r2, r2, #15
    c410:	d50c      	bpl.n	c42c <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c412:	f003 0303 	and.w	r3, r3, #3
    c416:	2b02      	cmp	r3, #2
    c418:	d001      	beq.n	c41e <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c41a:	2e01      	cmp	r6, #1
    c41c:	d106      	bne.n	c42c <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    c41e:	b324      	cbz	r4, c46a <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    c420:	f387 8811 	msr	BASEPRI, r7
    c424:	f3bf 8f6f 	isb	sy
}
    c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    c42c:	b1c4      	cbz	r4, c460 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c42e:	4638      	mov	r0, r7
    c430:	f001 fb44 	bl	dabc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c434:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c438:	b2db      	uxtb	r3, r3
    c43a:	2b01      	cmp	r3, #1
    c43c:	d1e3      	bne.n	c406 <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c43e:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c442:	2a00      	cmp	r2, #0
    c444:	d0df      	beq.n	c406 <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c446:	2200      	movs	r2, #0
    c448:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c44c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c450:	2202      	movs	r2, #2
    c452:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    c456:	2220      	movs	r2, #32
    c458:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c45c:	60ab      	str	r3, [r5, #8]
}
    c45e:	e7d2      	b.n	c406 <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    c460:	2100      	movs	r1, #0
    c462:	2021      	movs	r0, #33	; 0x21
    c464:	f00f f95e 	bl	1b724 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c468:	e7e4      	b.n	c434 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    c46a:	2302      	movs	r3, #2
    c46c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    c470:	e7da      	b.n	c428 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    c472:	490c      	ldr	r1, [pc, #48]	; (c4a4 <z_nrf_clock_control_lf_on+0x120>)
    c474:	480c      	ldr	r0, [pc, #48]	; (c4a8 <z_nrf_clock_control_lf_on+0x124>)
    c476:	f44f 720e 	mov.w	r2, #568	; 0x238
    c47a:	f010 fb49 	bl	1cb10 <printk>
}
    c47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    c482:	f44f 710e 	mov.w	r1, #568	; 0x238
    c486:	4807      	ldr	r0, [pc, #28]	; (c4a4 <z_nrf_clock_control_lf_on+0x120>)
    c488:	f010 bde8 	b.w	1d05c <assert_post_action>
    p_reg->INTENCLR = mask;
    c48c:	2202      	movs	r2, #2
    c48e:	4b07      	ldr	r3, [pc, #28]	; (c4ac <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c490:	4607      	mov	r7, r0
    c492:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c496:	e7b3      	b.n	c400 <z_nrf_clock_control_lf_on+0x7c>
    c498:	20009970 	.word	0x20009970
    c49c:	200098ac 	.word	0x200098ac
    c4a0:	200098dc 	.word	0x200098dc
    c4a4:	0002342e 	.word	0x0002342e
    c4a8:	00022f17 	.word	0x00022f17
    c4ac:	40005000 	.word	0x40005000
    c4b0:	2000b7dc 	.word	0x2000b7dc
    c4b4:	e000e100 	.word	0xe000e100

0000c4b8 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c4b8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c4ba:	f000 f905 	bl	c6c8 <bt_rpmsg_platform_init>
	if (err < 0) {
    c4be:	1e04      	subs	r4, r0, #0
    c4c0:	da06      	bge.n	c4d0 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c4c2:	4622      	mov	r2, r4
    c4c4:	2145      	movs	r1, #69	; 0x45
    c4c6:	4807      	ldr	r0, [pc, #28]	; (c4e4 <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c4c8:	f010 fb22 	bl	1cb10 <printk>
	}

	return err;
}
    c4cc:	4620      	mov	r0, r4
    c4ce:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c4d0:	4805      	ldr	r0, [pc, #20]	; (c4e8 <bt_rpmsg_init+0x30>)
    c4d2:	f003 fffd 	bl	104d0 <bt_hci_driver_register>
	if (err < 0) {
    c4d6:	1e04      	subs	r4, r0, #0
    c4d8:	daf8      	bge.n	c4cc <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c4da:	4622      	mov	r2, r4
    c4dc:	2145      	movs	r1, #69	; 0x45
    c4de:	4803      	ldr	r0, [pc, #12]	; (c4ec <bt_rpmsg_init+0x34>)
    c4e0:	e7f2      	b.n	c4c8 <bt_rpmsg_init+0x10>
    c4e2:	bf00      	nop
    c4e4:	000234a0 	.word	0x000234a0
    c4e8:	00021fd4 	.word	0x00021fd4
    c4ec:	000234cc 	.word	0x000234cc

0000c4f0 <bt_rpmsg_send>:
{
    c4f0:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c4f2:	7d02      	ldrb	r2, [r0, #20]
    c4f4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c4f6:	2a02      	cmp	r2, #2
    c4f8:	d00c      	beq.n	c514 <bt_rpmsg_send+0x24>
    c4fa:	2a04      	cmp	r2, #4
    c4fc:	d009      	beq.n	c512 <bt_rpmsg_send+0x22>
    c4fe:	b1b2      	cbz	r2, c52e <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c500:	2145      	movs	r1, #69	; 0x45
    c502:	480c      	ldr	r0, [pc, #48]	; (c534 <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c504:	f010 fb04 	bl	1cb10 <printk>
	net_buf_unref(buf);
    c508:	4620      	mov	r0, r4
    c50a:	f00b f96b 	bl	177e4 <net_buf_unref>
}
    c50e:	2000      	movs	r0, #0
    c510:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c512:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c514:	4611      	mov	r1, r2
    c516:	f104 0008 	add.w	r0, r4, #8
    c51a:	f014 f91e 	bl	2075a <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c51e:	4620      	mov	r0, r4
    c520:	f000 f8ee 	bl	c700 <bt_rpmsg_platform_send>
	if (err < 0) {
    c524:	1e02      	subs	r2, r0, #0
    c526:	daef      	bge.n	c508 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c528:	2145      	movs	r1, #69	; 0x45
    c52a:	4803      	ldr	r0, [pc, #12]	; (c538 <bt_rpmsg_send+0x48>)
    c52c:	e7ea      	b.n	c504 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c52e:	2201      	movs	r2, #1
    c530:	e7f0      	b.n	c514 <bt_rpmsg_send+0x24>
    c532:	bf00      	nop
    c534:	000234fb 	.word	0x000234fb
    c538:	00023510 	.word	0x00023510

0000c53c <bt_rpmsg_rx>:
{
    c53c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c540:	4680      	mov	r8, r0
{
    c542:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c544:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c548:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c54a:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c54c:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c550:	d009      	beq.n	c566 <bt_rpmsg_rx+0x2a>
    c552:	2805      	cmp	r0, #5
    c554:	d074      	beq.n	c640 <bt_rpmsg_rx+0x104>
    c556:	2802      	cmp	r0, #2
    c558:	f040 8099 	bne.w	c68e <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c55c:	2b03      	cmp	r3, #3
    c55e:	d84a      	bhi.n	c5f6 <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c560:	2145      	movs	r1, #69	; 0x45
    c562:	484f      	ldr	r0, [pc, #316]	; (c6a0 <bt_rpmsg_rx+0x164>)
    c564:	e003      	b.n	c56e <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c566:	2b01      	cmp	r3, #1
    c568:	d806      	bhi.n	c578 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c56a:	2145      	movs	r1, #69	; 0x45
    c56c:	484d      	ldr	r0, [pc, #308]	; (c6a4 <bt_rpmsg_rx+0x168>)
}
    c56e:	b002      	add	sp, #8
    c570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c574:	f010 bacc 	b.w	1cb10 <printk>
	switch (evt_type) {
    c578:	7873      	ldrb	r3, [r6, #1]
    c57a:	2b3e      	cmp	r3, #62	; 0x3e
    c57c:	d117      	bne.n	c5ae <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c57e:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c580:	2f02      	cmp	r7, #2
    c582:	d016      	beq.n	c5b2 <bt_rpmsg_rx+0x76>
    c584:	f1a7 030d 	sub.w	r3, r7, #13
    c588:	425f      	negs	r7, r3
    c58a:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c58c:	2202      	movs	r2, #2
    c58e:	4641      	mov	r1, r8
    c590:	a801      	add	r0, sp, #4
    c592:	f011 ff75 	bl	1e480 <memcpy>
	if (remaining != hdr.len) {
    c596:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c59a:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c59c:	429d      	cmp	r5, r3
    c59e:	d00a      	beq.n	c5b6 <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c5a0:	2145      	movs	r1, #69	; 0x45
    c5a2:	4841      	ldr	r0, [pc, #260]	; (c6a8 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c5a4:	f010 fab4 	bl	1cb10 <printk>
}
    c5a8:	b002      	add	sp, #8
    c5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c5ae:	2700      	movs	r7, #0
    c5b0:	e7ec      	b.n	c58c <bt_rpmsg_rx+0x50>
			return true;
    c5b2:	2701      	movs	r7, #1
    c5b4:	e7ea      	b.n	c58c <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c5b6:	2200      	movs	r2, #0
    c5b8:	2300      	movs	r3, #0
    c5ba:	4639      	mov	r1, r7
    c5bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c5c0:	f002 f92a 	bl	e818 <bt_buf_get_evt>
	if (!buf) {
    c5c4:	4604      	mov	r4, r0
    c5c6:	b920      	cbnz	r0, c5d2 <bt_rpmsg_rx+0x96>
		if (discardable) {
    c5c8:	2f00      	cmp	r7, #0
    c5ca:	d1ed      	bne.n	c5a8 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c5cc:	2145      	movs	r1, #69	; 0x45
    c5ce:	4837      	ldr	r0, [pc, #220]	; (c6ac <bt_rpmsg_rx+0x170>)
    c5d0:	e7e8      	b.n	c5a4 <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c5d2:	f100 0708 	add.w	r7, r0, #8
    c5d6:	2202      	movs	r2, #2
    c5d8:	a901      	add	r1, sp, #4
    c5da:	4638      	mov	r0, r7
    c5dc:	f014 f8e0 	bl	207a0 <net_buf_simple_add_mem>
    c5e0:	462a      	mov	r2, r5
    c5e2:	1cf1      	adds	r1, r6, #3
    c5e4:	4638      	mov	r0, r7
    c5e6:	f014 f8db 	bl	207a0 <net_buf_simple_add_mem>
		bt_recv(buf);
    c5ea:	4620      	mov	r0, r4
}
    c5ec:	b002      	add	sp, #8
    c5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c5f2:	f003 bf43 	b.w	1047c <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c5f6:	2200      	movs	r2, #0
    c5f8:	2300      	movs	r3, #0
    c5fa:	2003      	movs	r0, #3
    c5fc:	f002 f8ba 	bl	e774 <bt_buf_get_rx>
	if (buf) {
    c600:	4604      	mov	r4, r0
    c602:	b1d0      	cbz	r0, c63a <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c604:	2204      	movs	r2, #4
    c606:	4641      	mov	r1, r8
    c608:	eb0d 0002 	add.w	r0, sp, r2
    c60c:	f011 ff38 	bl	1e480 <memcpy>
    c610:	2204      	movs	r2, #4
    c612:	f104 0708 	add.w	r7, r4, #8
    c616:	4638      	mov	r0, r7
    c618:	eb0d 0102 	add.w	r1, sp, r2
    c61c:	f014 f8c0 	bl	207a0 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c620:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c624:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c626:	429d      	cmp	r5, r3
    c628:	d02e      	beq.n	c688 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c62a:	2145      	movs	r1, #69	; 0x45
    c62c:	4820      	ldr	r0, [pc, #128]	; (c6b0 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c62e:	f010 fa6f 	bl	1cb10 <printk>
		net_buf_unref(buf);
    c632:	4620      	mov	r0, r4
    c634:	f00b f8d6 	bl	177e4 <net_buf_unref>
	if (buf) {
    c638:	e7b6      	b.n	c5a8 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c63a:	2145      	movs	r1, #69	; 0x45
    c63c:	481d      	ldr	r0, [pc, #116]	; (c6b4 <bt_rpmsg_rx+0x178>)
    c63e:	e796      	b.n	c56e <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c640:	2b03      	cmp	r3, #3
    c642:	d802      	bhi.n	c64a <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c644:	2145      	movs	r1, #69	; 0x45
    c646:	481c      	ldr	r0, [pc, #112]	; (c6b8 <bt_rpmsg_rx+0x17c>)
    c648:	e791      	b.n	c56e <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c64a:	2200      	movs	r2, #0
    c64c:	2300      	movs	r3, #0
    c64e:	f002 f891 	bl	e774 <bt_buf_get_rx>
	if (buf) {
    c652:	4604      	mov	r4, r0
    c654:	b1a8      	cbz	r0, c682 <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c656:	2204      	movs	r2, #4
    c658:	4641      	mov	r1, r8
    c65a:	eb0d 0002 	add.w	r0, sp, r2
    c65e:	f011 ff0f 	bl	1e480 <memcpy>
    c662:	2204      	movs	r2, #4
    c664:	f104 0708 	add.w	r7, r4, #8
    c668:	4638      	mov	r0, r7
    c66a:	eb0d 0102 	add.w	r1, sp, r2
    c66e:	f014 f897 	bl	207a0 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c672:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c676:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c678:	429d      	cmp	r5, r3
    c67a:	d005      	beq.n	c688 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c67c:	2145      	movs	r1, #69	; 0x45
    c67e:	480f      	ldr	r0, [pc, #60]	; (c6bc <bt_rpmsg_rx+0x180>)
    c680:	e7d5      	b.n	c62e <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c682:	2145      	movs	r1, #69	; 0x45
    c684:	480e      	ldr	r0, [pc, #56]	; (c6c0 <bt_rpmsg_rx+0x184>)
    c686:	e772      	b.n	c56e <bt_rpmsg_rx+0x32>
    c688:	462a      	mov	r2, r5
    c68a:	1d71      	adds	r1, r6, #5
    c68c:	e7aa      	b.n	c5e4 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c68e:	4602      	mov	r2, r0
    c690:	2145      	movs	r1, #69	; 0x45
    c692:	480c      	ldr	r0, [pc, #48]	; (c6c4 <bt_rpmsg_rx+0x188>)
}
    c694:	b002      	add	sp, #8
    c696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c69a:	f010 ba39 	b.w	1cb10 <printk>
    c69e:	bf00      	nop
    c6a0:	0002359d 	.word	0x0002359d
    c6a4:	0002352d 	.word	0x0002352d
    c6a8:	00023553 	.word	0x00023553
    c6ac:	0002357c 	.word	0x0002357c
    c6b0:	000235e0 	.word	0x000235e0
    c6b4:	000235c1 	.word	0x000235c1
    c6b8:	00023607 	.word	0x00023607
    c6bc:	0002364a 	.word	0x0002364a
    c6c0:	0002362b 	.word	0x0002362b
    c6c4:	00023671 	.word	0x00023671

0000c6c8 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c6c8:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c6ca:	4908      	ldr	r1, [pc, #32]	; (c6ec <bt_rpmsg_platform_init+0x24>)
    c6cc:	4808      	ldr	r0, [pc, #32]	; (c6f0 <bt_rpmsg_platform_init+0x28>)
    c6ce:	f7ff f9e3 	bl	ba98 <rpmsg_service_register_endpoint>

	if (err < 0) {
    c6d2:	1e02      	subs	r2, r0, #0
    c6d4:	da05      	bge.n	c6e2 <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c6d6:	4807      	ldr	r0, [pc, #28]	; (c6f4 <bt_rpmsg_platform_init+0x2c>)
    c6d8:	2145      	movs	r1, #69	; 0x45
    c6da:	f010 fa19 	bl	1cb10 <printk>
		return RPMSG_ERR_INIT;
    c6de:	4806      	ldr	r0, [pc, #24]	; (c6f8 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c6e0:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c6e2:	4b06      	ldr	r3, [pc, #24]	; (c6fc <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c6e4:	2000      	movs	r0, #0
	endpoint_id = err;
    c6e6:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c6e8:	e7fa      	b.n	c6e0 <bt_rpmsg_platform_init+0x18>
    c6ea:	bf00      	nop
    c6ec:	0001d701 	.word	0x0001d701
    c6f0:	0002369e 	.word	0x0002369e
    c6f4:	000236a9 	.word	0x000236a9
    c6f8:	fffff82a 	.word	0xfffff82a
    c6fc:	20009974 	.word	0x20009974

0000c700 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c700:	4b02      	ldr	r3, [pc, #8]	; (c70c <bt_rpmsg_platform_send+0xc>)
    c702:	8982      	ldrh	r2, [r0, #12]
    c704:	6881      	ldr	r1, [r0, #8]
    c706:	6818      	ldr	r0, [r3, #0]
    c708:	f7ff b9f2 	b.w	baf0 <rpmsg_service_send>
    c70c:	20009974 	.word	0x20009974

0000c710 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c710:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c712:	4b02      	ldr	r3, [pc, #8]	; (c71c <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c714:	6818      	ldr	r0, [r3, #0]
    c716:	f7ff f9e1 	bl	badc <rpmsg_service_endpoint_is_bound>
}
    c71a:	bd08      	pop	{r3, pc}
    c71c:	20009974 	.word	0x20009974

0000c720 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c720:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c722:	4c06      	ldr	r4, [pc, #24]	; (c73c <z_clock_isr+0x1c>)
    c724:	4806      	ldr	r0, [pc, #24]	; (c740 <z_clock_isr+0x20>)
    c726:	4621      	mov	r1, r4
    c728:	2217      	movs	r2, #23
    c72a:	f010 f9f1 	bl	1cb10 <printk>
    c72e:	4620      	mov	r0, r4
}
    c730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c734:	2117      	movs	r1, #23
    c736:	f010 bc91 	b.w	1d05c <assert_post_action>
    c73a:	bf00      	nop
    c73c:	000236e6 	.word	0x000236e6
    c740:	00022f17 	.word	0x00022f17

0000c744 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c744:	4a04      	ldr	r2, [pc, #16]	; (c758 <sys_clock_timeout_handler+0x14>)
    c746:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c748:	1ac8      	subs	r0, r1, r3
    c74a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c74e:	4403      	add	r3, r0
    c750:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c752:	f00f bcfd 	b.w	1c150 <z_clock_announce>
    c756:	bf00      	nop
    c758:	20009984 	.word	0x20009984

0000c75c <set_absolute_alarm>:
{
    c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c760:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c764:	f04f 0900 	mov.w	r9, #0
    c768:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c76a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c76e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c772:	00a4      	lsls	r4, r4, #2
    c774:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c778:	b2a4      	uxth	r4, r4
    c77a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c77e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c782:	f8df 806c 	ldr.w	r8, [pc, #108]	; c7f0 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c786:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c78a:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c78e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c790:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c794:	eba3 030a 	sub.w	r3, r3, sl
    c798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c79c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c7a0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c7a2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c7a6:	d102      	bne.n	c7ae <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c7a8:	2013      	movs	r0, #19
    c7aa:	f014 ff2f 	bl	2160c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c7ae:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c7b2:	1aab      	subs	r3, r5, r2
    c7b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c7b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c7bc:	bf88      	it	hi
    c7be:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c7c0:	f8c4 9000 	str.w	r9, [r4]
    c7c4:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c7c6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c7ca:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c7ce:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c7d2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c7d6:	459a      	cmp	sl, r3
    c7d8:	d006      	beq.n	c7e8 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c7da:	1aeb      	subs	r3, r5, r3
    c7dc:	3b02      	subs	r3, #2
    c7de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c7e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c7e6:	d801      	bhi.n	c7ec <set_absolute_alarm+0x90>
}
    c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c7ec:	462b      	mov	r3, r5
    c7ee:	e7cf      	b.n	c790 <set_absolute_alarm+0x34>
    c7f0:	40015000 	.word	0x40015000

0000c7f4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c7f6:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c7f8:	462f      	mov	r7, r5
    c7fa:	4c10      	ldr	r4, [pc, #64]	; (c83c <rtc_nrf_isr+0x48>)
    c7fc:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c7fe:	4b10      	ldr	r3, [pc, #64]	; (c840 <rtc_nrf_isr+0x4c>)
    c800:	b105      	cbz	r5, c804 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c804:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c808:	03d2      	lsls	r2, r2, #15
    c80a:	d5fa      	bpl.n	c802 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c80c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c810:	2a00      	cmp	r2, #0
    c812:	d0f6      	beq.n	c802 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c814:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c818:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c81c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c820:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c824:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c826:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c82a:	b126      	cbz	r6, c836 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c82c:	2000      	movs	r0, #0
    c82e:	6862      	ldr	r2, [r4, #4]
    c830:	6027      	str	r7, [r4, #0]
    c832:	47b0      	blx	r6
    c834:	e7e2      	b.n	c7fc <rtc_nrf_isr+0x8>
    c836:	6026      	str	r6, [r4, #0]
}
    c838:	e7e3      	b.n	c802 <rtc_nrf_isr+0xe>
    c83a:	bf00      	nop
    c83c:	20009978 	.word	0x20009978
    c840:	40015000 	.word	0x40015000

0000c844 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c844:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c846:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c84c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c850:	4c0c      	ldr	r4, [pc, #48]	; (c884 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c852:	2101      	movs	r1, #1
    c854:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c858:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c85c:	4b0a      	ldr	r3, [pc, #40]	; (c888 <z_clock_driver_init+0x44>)
    c85e:	2015      	movs	r0, #21
    c860:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c864:	462a      	mov	r2, r5
    c866:	f001 f8b9 	bl	d9dc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c86a:	2015      	movs	r0, #21
    c86c:	f001 f898 	bl	d9a0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c870:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c872:	4a06      	ldr	r2, [pc, #24]	; (c88c <z_clock_driver_init+0x48>)
    c874:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c876:	2002      	movs	r0, #2
    c878:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c87a:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c87c:	f7ff fd82 	bl	c384 <z_nrf_clock_control_lf_on>

	return 0;
}
    c880:	4628      	mov	r0, r5
    c882:	bd38      	pop	{r3, r4, r5, pc}
    c884:	40015000 	.word	0x40015000
    c888:	e000e100 	.word	0xe000e100
    c88c:	20009980 	.word	0x20009980

0000c890 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c890:	4a13      	ldr	r2, [pc, #76]	; (c8e0 <z_clock_set_timeout+0x50>)
    c892:	f1b0 3fff 	cmp.w	r0, #4294967295
    c896:	bf14      	ite	ne
    c898:	4603      	movne	r3, r0
    c89a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c89c:	3b01      	subs	r3, #1
    c89e:	2b00      	cmp	r3, #0
    c8a0:	dd1c      	ble.n	c8dc <z_clock_set_timeout+0x4c>
    c8a2:	4293      	cmp	r3, r2
    c8a4:	bfa8      	it	ge
    c8a6:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c8a8:	4a0e      	ldr	r2, [pc, #56]	; (c8e4 <z_clock_set_timeout+0x54>)
    c8aa:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c8ae:	4a0e      	ldr	r2, [pc, #56]	; (c8e8 <z_clock_set_timeout+0x58>)
    c8b0:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c8b2:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c8b4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c8b8:	bf18      	it	ne
    c8ba:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c8bc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c8c0:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c8c2:	480a      	ldr	r0, [pc, #40]	; (c8ec <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c8c4:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c8c6:	4a0a      	ldr	r2, [pc, #40]	; (c8f0 <z_clock_set_timeout+0x60>)
    c8c8:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c8ca:	2000      	movs	r0, #0
    c8cc:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c8ce:	4a04      	ldr	r2, [pc, #16]	; (c8e0 <z_clock_set_timeout+0x50>)
    c8d0:	4293      	cmp	r3, r2
    c8d2:	bf94      	ite	ls
    c8d4:	18c9      	addls	r1, r1, r3
    c8d6:	1889      	addhi	r1, r1, r2
    c8d8:	f7ff bf40 	b.w	c75c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c8dc:	2300      	movs	r3, #0
    c8de:	e7e3      	b.n	c8a8 <z_clock_set_timeout+0x18>
    c8e0:	007fffff 	.word	0x007fffff
    c8e4:	40015000 	.word	0x40015000
    c8e8:	20009984 	.word	0x20009984
    c8ec:	0000c745 	.word	0x0000c745
    c8f0:	20009978 	.word	0x20009978

0000c8f4 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c8f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c8f6:	f04f 0320 	mov.w	r3, #32
    c8fa:	f3ef 8511 	mrs	r5, BASEPRI
    c8fe:	f383 8811 	msr	BASEPRI, r3
    c902:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c906:	4815      	ldr	r0, [pc, #84]	; (c95c <z_clock_elapsed+0x68>)
    c908:	f00f f92e 	bl	1bb68 <z_spin_lock_valid>
    c90c:	b940      	cbnz	r0, c920 <z_clock_elapsed+0x2c>
    c90e:	4914      	ldr	r1, [pc, #80]	; (c960 <z_clock_elapsed+0x6c>)
    c910:	4814      	ldr	r0, [pc, #80]	; (c964 <z_clock_elapsed+0x70>)
    c912:	227c      	movs	r2, #124	; 0x7c
    c914:	f010 f8fc 	bl	1cb10 <printk>
    c918:	217c      	movs	r1, #124	; 0x7c
    c91a:	4811      	ldr	r0, [pc, #68]	; (c960 <z_clock_elapsed+0x6c>)
    c91c:	f010 fb9e 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
    c920:	480e      	ldr	r0, [pc, #56]	; (c95c <z_clock_elapsed+0x68>)
    c922:	f00f f93d 	bl	1bba0 <z_spin_lock_set_owner>
    c926:	4b10      	ldr	r3, [pc, #64]	; (c968 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c928:	480c      	ldr	r0, [pc, #48]	; (c95c <z_clock_elapsed+0x68>)
    c92a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c92e:	4b0f      	ldr	r3, [pc, #60]	; (c96c <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	1ae4      	subs	r4, r4, r3
    c934:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c938:	f00f f924 	bl	1bb84 <z_spin_unlock_valid>
    c93c:	b940      	cbnz	r0, c950 <z_clock_elapsed+0x5c>
    c93e:	4908      	ldr	r1, [pc, #32]	; (c960 <z_clock_elapsed+0x6c>)
    c940:	4808      	ldr	r0, [pc, #32]	; (c964 <z_clock_elapsed+0x70>)
    c942:	22a7      	movs	r2, #167	; 0xa7
    c944:	f010 f8e4 	bl	1cb10 <printk>
    c948:	21a7      	movs	r1, #167	; 0xa7
    c94a:	4805      	ldr	r0, [pc, #20]	; (c960 <z_clock_elapsed+0x6c>)
    c94c:	f010 fb86 	bl	1d05c <assert_post_action>
	__asm__ volatile(
    c950:	f385 8811 	msr	BASEPRI, r5
    c954:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c958:	4620      	mov	r0, r4
    c95a:	bd38      	pop	{r3, r4, r5, pc}
    c95c:	20009988 	.word	0x20009988
    c960:	00022f51 	.word	0x00022f51
    c964:	00022f17 	.word	0x00022f17
    c968:	40015000 	.word	0x40015000
    c96c:	20009984 	.word	0x20009984

0000c970 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c970:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c972:	1cc5      	adds	r5, r0, #3
    c974:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c978:	2d74      	cmp	r5, #116	; 0x74
    c97a:	d908      	bls.n	c98e <user_data_alloc.constprop.0+0x1e>
    c97c:	4917      	ldr	r1, [pc, #92]	; (c9dc <user_data_alloc.constprop.0+0x6c>)
    c97e:	4818      	ldr	r0, [pc, #96]	; (c9e0 <user_data_alloc.constprop.0+0x70>)
    c980:	2250      	movs	r2, #80	; 0x50
    c982:	f010 f8c5 	bl	1cb10 <printk>
    c986:	2150      	movs	r1, #80	; 0x50
    c988:	4814      	ldr	r0, [pc, #80]	; (c9dc <user_data_alloc.constprop.0+0x6c>)
    c98a:	f010 fb67 	bl	1d05c <assert_post_action>
	return list->head;
    c98e:	4c15      	ldr	r4, [pc, #84]	; (c9e4 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c990:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c994:	b123      	cbz	r3, c9a0 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c996:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c99a:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c99c:	2b74      	cmp	r3, #116	; 0x74
    c99e:	d919      	bls.n	c9d4 <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c9a0:	2178      	movs	r1, #120	; 0x78
    c9a2:	2004      	movs	r0, #4
    c9a4:	f00f ffd0 	bl	1c948 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c9a8:	b178      	cbz	r0, c9ca <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c9aa:	2300      	movs	r3, #0
	return list->tail;
    c9ac:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c9b0:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c9b2:	b95a      	cbnz	r2, c9cc <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c9b4:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c9b8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c9bc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c9c0:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c9c2:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c9c4:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c9c6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c9ca:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c9cc:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c9ce:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c9d2:	e7f1      	b.n	c9b8 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c9d4:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c9d8:	e7f0      	b.n	c9bc <user_data_alloc.constprop.0+0x4c>
    c9da:	bf00      	nop
    c9dc:	00023753 	.word	0x00023753
    c9e0:	00022f17 	.word	0x00022f17
    c9e4:	2000998c 	.word	0x2000998c

0000c9e8 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c9e8:	4808      	ldr	r0, [pc, #32]	; (ca0c <discovery_complete.constprop.0+0x24>)
    c9ea:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c9ee:	e8d3 2fef 	ldaex	r2, [r3]
    c9f2:	f042 0202 	orr.w	r2, r2, #2
    c9f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c9fa:	2900      	cmp	r1, #0
    c9fc:	d1f7      	bne.n	c9ee <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c9fe:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    ca02:	681b      	ldr	r3, [r3, #0]
    ca04:	b10b      	cbz	r3, ca0a <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    ca06:	6841      	ldr	r1, [r0, #4]
    ca08:	4718      	bx	r3
	}
}
    ca0a:	4770      	bx	lr
    ca0c:	2000998c 	.word	0x2000998c

0000ca10 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    ca10:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    ca12:	4c0b      	ldr	r4, [pc, #44]	; (ca40 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    ca14:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    ca16:	4620      	mov	r0, r4
    ca18:	f010 fe98 	bl	1d74c <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ca1c:	f06f 0101 	mvn.w	r1, #1
    ca20:	f504 709c 	add.w	r0, r4, #312	; 0x138
    ca24:	f010 fea9 	bl	1d77a <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    ca28:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ca2c:	689b      	ldr	r3, [r3, #8]
    ca2e:	b12b      	cbz	r3, ca3c <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    ca30:	4629      	mov	r1, r5
    ca32:	6862      	ldr	r2, [r4, #4]
    ca34:	6820      	ldr	r0, [r4, #0]
	}
}
    ca36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    ca3a:	4718      	bx	r3
}
    ca3c:	bd70      	pop	{r4, r5, r6, pc}
    ca3e:	bf00      	nop
    ca40:	2000998c 	.word	0x2000998c

0000ca44 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    ca44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    ca48:	4c1f      	ldr	r4, [pc, #124]	; (cac8 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    ca4a:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    ca4c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    ca50:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    ca52:	2b22      	cmp	r3, #34	; 0x22
    ca54:	d907      	bls.n	ca66 <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    ca56:	2145      	movs	r1, #69	; 0x45
    ca58:	481c      	ldr	r0, [pc, #112]	; (cacc <attr_store.constprop.0+0x88>)
    ca5a:	f010 f859 	bl	1cb10 <printk>
		return NULL;
    ca5e:	2500      	movs	r5, #0
}
    ca60:	4628      	mov	r0, r5
    ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    ca66:	6803      	ldr	r3, [r0, #0]
    ca68:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    ca6a:	2b02      	cmp	r3, #2
    ca6c:	d80d      	bhi.n	ca8a <attr_store.constprop.0+0x46>
    ca6e:	4a18      	ldr	r2, [pc, #96]	; (cad0 <attr_store.constprop.0+0x8c>)
    ca70:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    ca74:	eb06 0009 	add.w	r0, r6, r9
    ca78:	f7ff ff7a 	bl	c970 <user_data_alloc.constprop.0>
	if (!attr_data) {
    ca7c:	4605      	mov	r5, r0
    ca7e:	b958      	cbnz	r0, ca98 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    ca80:	2145      	movs	r1, #69	; 0x45
    ca82:	4814      	ldr	r0, [pc, #80]	; (cad4 <attr_store.constprop.0+0x90>)
    ca84:	f010 f844 	bl	1cb10 <printk>
		return NULL;
    ca88:	e7ea      	b.n	ca60 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    ca8a:	2145      	movs	r1, #69	; 0x45
    ca8c:	4812      	ldr	r0, [pc, #72]	; (cad8 <attr_store.constprop.0+0x94>)
    ca8e:	f010 f83f 	bl	1cb10 <printk>
    ca92:	f04f 0900 	mov.w	r9, #0
    ca96:	e7ed      	b.n	ca74 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    ca98:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    ca9c:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    ca9e:	1c5a      	adds	r2, r3, #1
    caa0:	3303      	adds	r3, #3
    caa2:	00db      	lsls	r3, r3, #3
    caa4:	f103 0804 	add.w	r8, r3, #4
    caa8:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    caac:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    caae:	441c      	add	r4, r3
    cab0:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    cab2:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    cab4:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    cab6:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    cab8:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    caba:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    cabc:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    cabe:	f011 fcdf 	bl	1e480 <memcpy>
	return cur_attr;
    cac2:	4645      	mov	r5, r8
    cac4:	e7cc      	b.n	ca60 <attr_store.constprop.0+0x1c>
    cac6:	bf00      	nop
    cac8:	2000998c 	.word	0x2000998c
    cacc:	0002377e 	.word	0x0002377e
    cad0:	00023949 	.word	0x00023949
    cad4:	000237bb 	.word	0x000237bb
    cad8:	0002379f 	.word	0x0002379f

0000cadc <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    cadc:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    cade:	4604      	mov	r4, r0
    cae0:	b930      	cbnz	r0, caf0 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    cae2:	2145      	movs	r1, #69	; 0x45
    cae4:	480c      	ldr	r0, [pc, #48]	; (cb18 <uuid_store.constprop.0+0x3c>)
    cae6:	f010 f813 	bl	1cb10 <printk>
    caea:	4625      	mov	r5, r4
}
    caec:	4628      	mov	r0, r5
    caee:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    caf0:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    caf2:	2b02      	cmp	r3, #2
    caf4:	d80a      	bhi.n	cb0c <uuid_store.constprop.0+0x30>
    caf6:	4a09      	ldr	r2, [pc, #36]	; (cb1c <uuid_store.constprop.0+0x40>)
    caf8:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    cafa:	4630      	mov	r0, r6
    cafc:	f7ff ff38 	bl	c970 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    cb00:	4632      	mov	r2, r6
    cb02:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    cb04:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    cb06:	f011 fcbb 	bl	1e480 <memcpy>
	return (struct bt_uuid *)buffer;
    cb0a:	e7ef      	b.n	caec <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    cb0c:	2145      	movs	r1, #69	; 0x45
    cb0e:	4804      	ldr	r0, [pc, #16]	; (cb20 <uuid_store.constprop.0+0x44>)
    cb10:	f00f fffe 	bl	1cb10 <printk>
    cb14:	2600      	movs	r6, #0
    cb16:	e7f0      	b.n	cafa <uuid_store.constprop.0+0x1e>
    cb18:	000237dd 	.word	0x000237dd
    cb1c:	00023949 	.word	0x00023949
    cb20:	0002379f 	.word	0x0002379f

0000cb24 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    cb24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    cb28:	4e79      	ldr	r6, [pc, #484]	; (cd10 <discovery_callback+0x1ec>)
{
    cb2a:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    cb2c:	6833      	ldr	r3, [r6, #0]
    cb2e:	4283      	cmp	r3, r0
    cb30:	d008      	beq.n	cb44 <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    cb32:	4878      	ldr	r0, [pc, #480]	; (cd14 <discovery_callback+0x1f0>)
    cb34:	2145      	movs	r1, #69	; 0x45
    cb36:	f00f ffeb 	bl	1cb10 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    cb3a:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    cb3e:	f7ff ff67 	bl	ca10 <discovery_complete_error.constprop.0>
    cb42:	e031      	b.n	cba8 <discovery_callback+0x84>
    cb44:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    cb46:	2b03      	cmp	r3, #3
    cb48:	f000 80ae 	beq.w	cca8 <discovery_callback+0x184>
    cb4c:	d80d      	bhi.n	cb6a <discovery_callback+0x46>
    cb4e:	2b02      	cmp	r3, #2
    cb50:	d126      	bne.n	cba0 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    cb52:	f240 12b3 	movw	r2, #435	; 0x1b3
    cb56:	4970      	ldr	r1, [pc, #448]	; (cd18 <discovery_callback+0x1f4>)
    cb58:	4870      	ldr	r0, [pc, #448]	; (cd1c <discovery_callback+0x1f8>)
    cb5a:	f00f ffd9 	bl	1cb10 <printk>
    cb5e:	f240 11b3 	movw	r1, #435	; 0x1b3
    cb62:	486d      	ldr	r0, [pc, #436]	; (cd18 <discovery_callback+0x1f4>)
    cb64:	f010 fa7a 	bl	1d05c <assert_post_action>
    cb68:	e01e      	b.n	cba8 <discovery_callback+0x84>
	switch (params->type) {
    cb6a:	2b05      	cmp	r3, #5
    cb6c:	d1f1      	bne.n	cb52 <discovery_callback+0x2e>
	if (!attr) {
    cb6e:	2900      	cmp	r1, #0
    cb70:	f040 8081 	bne.w	cc76 <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    cb74:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    cb78:	2b01      	cmp	r3, #1
    cb7a:	d979      	bls.n	cc70 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    cb7c:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    cb7e:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    cb82:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    cb84:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    cb86:	2303      	movs	r3, #3
    cb88:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    cb8a:	f007 fe2b 	bl	147e4 <bt_gatt_discover>
			if (err) {
    cb8e:	4604      	mov	r4, r0
    cb90:	b150      	cbz	r0, cba8 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    cb92:	4602      	mov	r2, r0
    cb94:	2145      	movs	r1, #69	; 0x45
    cb96:	4862      	ldr	r0, [pc, #392]	; (cd20 <discovery_callback+0x1fc>)
    cb98:	f00f ffba 	bl	1cb10 <printk>
				discovery_complete_error(dm, err);
    cb9c:	4620      	mov	r0, r4
    cb9e:	e7ce      	b.n	cb3e <discovery_callback+0x1a>
	if (!attr) {
    cba0:	b921      	cbnz	r1, cbac <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    cba2:	4630      	mov	r0, r6
    cba4:	f010 fdf4 	bl	1d790 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    cba8:	2400      	movs	r4, #0
    cbaa:	e04a      	b.n	cc42 <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    cbac:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    cbb0:	4628      	mov	r0, r5
    cbb2:	2108      	movs	r1, #8
    cbb4:	f7ff ff46 	bl	ca44 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    cbb8:	2400      	movs	r4, #0
    cbba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    cbbe:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    cbc0:	4669      	mov	r1, sp
    cbc2:	6828      	ldr	r0, [r5, #0]
    cbc4:	f88d 4000 	strb.w	r4, [sp]
    cbc8:	f8ad 3002 	strh.w	r3, [sp, #2]
    cbcc:	f011 fcf3 	bl	1e5b6 <bt_uuid_cmp>
    cbd0:	b1a8      	cbz	r0, cbfe <discovery_callback+0xda>
    cbd2:	f642 0301 	movw	r3, #10241	; 0x2801
    cbd6:	6828      	ldr	r0, [r5, #0]
    cbd8:	a901      	add	r1, sp, #4
    cbda:	f88d 4004 	strb.w	r4, [sp, #4]
    cbde:	f8ad 3006 	strh.w	r3, [sp, #6]
    cbe2:	f011 fce8 	bl	1e5b6 <bt_uuid_cmp>
    cbe6:	b150      	cbz	r0, cbfe <discovery_callback+0xda>
    cbe8:	494b      	ldr	r1, [pc, #300]	; (cd18 <discovery_callback+0x1f4>)
    cbea:	484c      	ldr	r0, [pc, #304]	; (cd1c <discovery_callback+0x1f8>)
    cbec:	f240 1217 	movw	r2, #279	; 0x117
    cbf0:	f00f ff8e 	bl	1cb10 <printk>
    cbf4:	f240 1117 	movw	r1, #279	; 0x117
    cbf8:	4847      	ldr	r0, [pc, #284]	; (cd18 <discovery_callback+0x1f4>)
    cbfa:	f010 fa2f 	bl	1d05c <assert_post_action>
	if (!cur_attr) {
    cbfe:	b937      	cbnz	r7, cc0e <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    cc00:	4848      	ldr	r0, [pc, #288]	; (cd24 <discovery_callback+0x200>)
    cc02:	2145      	movs	r1, #69	; 0x45
    cc04:	f00f ff84 	bl	1cb10 <printk>
		discovery_complete_error(dm, -ENOMEM);
    cc08:	f06f 000b 	mvn.w	r0, #11
    cc0c:	e797      	b.n	cb3e <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    cc0e:	4638      	mov	r0, r7
    cc10:	f010 fdd2 	bl	1d7b8 <bt_gatt_dm_attr_service_val>
    cc14:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    cc16:	2208      	movs	r2, #8
    cc18:	4641      	mov	r1, r8
    cc1a:	f011 fc31 	bl	1e480 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    cc1e:	6828      	ldr	r0, [r5, #0]
    cc20:	f7ff ff5c 	bl	cadc <uuid_store.constprop.0>
    cc24:	4604      	mov	r4, r0
    cc26:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    cc28:	b930      	cbnz	r0, cc38 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    cc2a:	2145      	movs	r1, #69	; 0x45
    cc2c:	483e      	ldr	r0, [pc, #248]	; (cd28 <discovery_callback+0x204>)
    cc2e:	f00f ff6f 	bl	1cb10 <printk>
		discovery_complete_error(dm, -ENOMEM);
    cc32:	f06f 000b 	mvn.w	r0, #11
    cc36:	e058      	b.n	ccea <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    cc38:	88bb      	ldrh	r3, [r7, #4]
    cc3a:	88aa      	ldrh	r2, [r5, #4]
    cc3c:	4293      	cmp	r3, r2
    cc3e:	d104      	bne.n	cc4a <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    cc40:	2401      	movs	r4, #1
}
    cc42:	4620      	mov	r0, r4
    cc44:	b002      	add	sp, #8
    cc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    cc4a:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    cc4c:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    cc4e:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    cc50:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    cc52:	4936      	ldr	r1, [pc, #216]	; (cd2c <discovery_callback+0x208>)
    cc54:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    cc56:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    cc58:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    cc5a:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    cc5c:	f007 fdc2 	bl	147e4 <bt_gatt_discover>
	if (err) {
    cc60:	4602      	mov	r2, r0
    cc62:	2800      	cmp	r0, #0
    cc64:	d0a0      	beq.n	cba8 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    cc66:	2145      	movs	r1, #69	; 0x45
    cc68:	4831      	ldr	r0, [pc, #196]	; (cd30 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    cc6a:	f00f ff51 	bl	1cb10 <printk>
		discovery_complete_error(dm, -ENOMEM);
    cc6e:	e7e0      	b.n	cc32 <discovery_callback+0x10e>
			discovery_complete(dm);
    cc70:	f7ff feba 	bl	c9e8 <discovery_complete.constprop.0>
    cc74:	e798      	b.n	cba8 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    cc76:	2400      	movs	r4, #0
    cc78:	f642 0303 	movw	r3, #10243	; 0x2803
    cc7c:	6828      	ldr	r0, [r5, #0]
    cc7e:	a901      	add	r1, sp, #4
    cc80:	f88d 4004 	strb.w	r4, [sp, #4]
    cc84:	f8ad 3006 	strh.w	r3, [sp, #6]
    cc88:	f011 fc95 	bl	1e5b6 <bt_uuid_cmp>
    cc8c:	b950      	cbnz	r0, cca4 <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    cc8e:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    cc90:	4628      	mov	r0, r5
    cc92:	f7ff fed7 	bl	ca44 <attr_store.constprop.0>
    cc96:	4604      	mov	r4, r0
	if (!cur_attr) {
    cc98:	2800      	cmp	r0, #0
    cc9a:	d1d1      	bne.n	cc40 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    cc9c:	2145      	movs	r1, #69	; 0x45
    cc9e:	8a2a      	ldrh	r2, [r5, #16]
    cca0:	4824      	ldr	r0, [pc, #144]	; (cd34 <discovery_callback+0x210>)
    cca2:	e7e2      	b.n	cc6a <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    cca4:	4621      	mov	r1, r4
    cca6:	e7f3      	b.n	cc90 <discovery_callback+0x16c>
	if (!attr) {
    cca8:	2900      	cmp	r1, #0
    ccaa:	d0e1      	beq.n	cc70 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    ccac:	2300      	movs	r3, #0
    ccae:	f88d 3004 	strb.w	r3, [sp, #4]
    ccb2:	f642 0303 	movw	r3, #10243	; 0x2803
    ccb6:	6828      	ldr	r0, [r5, #0]
    ccb8:	a901      	add	r1, sp, #4
    ccba:	f8ad 3006 	strh.w	r3, [sp, #6]
    ccbe:	f011 fc7a 	bl	1e5b6 <bt_uuid_cmp>
    ccc2:	b150      	cbz	r0, ccda <discovery_callback+0x1b6>
    ccc4:	4914      	ldr	r1, [pc, #80]	; (cd18 <discovery_callback+0x1f4>)
    ccc6:	4815      	ldr	r0, [pc, #84]	; (cd1c <discovery_callback+0x1f8>)
    ccc8:	f44f 72c0 	mov.w	r2, #384	; 0x180
    cccc:	f00f ff20 	bl	1cb10 <printk>
    ccd0:	f44f 71c0 	mov.w	r1, #384	; 0x180
    ccd4:	4810      	ldr	r0, [pc, #64]	; (cd18 <discovery_callback+0x1f4>)
    ccd6:	f010 f9c1 	bl	1d05c <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    ccda:	8a29      	ldrh	r1, [r5, #16]
    ccdc:	480c      	ldr	r0, [pc, #48]	; (cd10 <discovery_callback+0x1ec>)
    ccde:	f010 fd17 	bl	1d710 <attr_find_by_handle>
	if (!cur_attr) {
    cce2:	4604      	mov	r4, r0
    cce4:	b920      	cbnz	r0, ccf0 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    cce6:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    ccea:	f7ff fe91 	bl	ca10 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    ccee:	e7a8      	b.n	cc42 <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    ccf0:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    ccf2:	f010 fd81 	bl	1d7f8 <bt_gatt_dm_attr_chrc_val>
    ccf6:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    ccf8:	4621      	mov	r1, r4
    ccfa:	2208      	movs	r2, #8
    ccfc:	f011 fbc0 	bl	1e480 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    cd00:	6828      	ldr	r0, [r5, #0]
    cd02:	f7ff feeb 	bl	cadc <uuid_store.constprop.0>
    cd06:	4604      	mov	r4, r0
    cd08:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    cd0a:	2800      	cmp	r0, #0
    cd0c:	d198      	bne.n	cc40 <discovery_callback+0x11c>
    cd0e:	e790      	b.n	cc32 <discovery_callback+0x10e>
    cd10:	2000998c 	.word	0x2000998c
    cd14:	000237f6 	.word	0x000237f6
    cd18:	00023753 	.word	0x00023753
    cd1c:	00022f17 	.word	0x00022f17
    cd20:	000238aa 	.word	0x000238aa
    cd24:	0002381d 	.word	0x0002381d
    cd28:	0002384b 	.word	0x0002384b
    cd2c:	20009994 	.word	0x20009994
    cd30:	0002387e 	.word	0x0002387e
    cd34:	000238da 	.word	0x000238da

0000cd38 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    cd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd3c:	4606      	mov	r6, r0
    cd3e:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    cd40:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    cd42:	f8df 8044 	ldr.w	r8, [pc, #68]	; cd88 <bt_gatt_dm_char_by_uuid+0x50>
    cd46:	f8df 9044 	ldr.w	r9, [pc, #68]	; cd8c <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    cd4a:	4621      	mov	r1, r4
    cd4c:	4630      	mov	r0, r6
    cd4e:	f010 fd69 	bl	1d824 <bt_gatt_dm_char_next>
    cd52:	4604      	mov	r4, r0
    cd54:	b1a0      	cbz	r0, cd80 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    cd56:	f010 fd4f 	bl	1d7f8 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    cd5a:	4605      	mov	r5, r0
    cd5c:	b950      	cbnz	r0, cd74 <bt_gatt_dm_char_by_uuid+0x3c>
    cd5e:	4641      	mov	r1, r8
    cd60:	4648      	mov	r0, r9
    cd62:	f240 12fb 	movw	r2, #507	; 0x1fb
    cd66:	f00f fed3 	bl	1cb10 <printk>
    cd6a:	f240 11fb 	movw	r1, #507	; 0x1fb
    cd6e:	4640      	mov	r0, r8
    cd70:	f010 f974 	bl	1d05c <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    cd74:	4638      	mov	r0, r7
    cd76:	6829      	ldr	r1, [r5, #0]
    cd78:	f011 fc1d 	bl	1e5b6 <bt_uuid_cmp>
    cd7c:	2800      	cmp	r0, #0
    cd7e:	d1e4      	bne.n	cd4a <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    cd80:	4620      	mov	r0, r4
    cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd86:	bf00      	nop
    cd88:	00023753 	.word	0x00023753
    cd8c:	00022f17 	.word	0x00022f17

0000cd90 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    cd90:	b570      	push	{r4, r5, r6, lr}
    cd92:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    cd94:	4608      	mov	r0, r1
    cd96:	b119      	cbz	r1, cda0 <bt_gatt_dm_start+0x10>
    cd98:	7809      	ldrb	r1, [r1, #0]
    cd9a:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    cd9e:	d139      	bne.n	ce14 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    cda0:	2a00      	cmp	r2, #0
    cda2:	d037      	beq.n	ce14 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cda4:	4c1e      	ldr	r4, [pc, #120]	; (ce20 <bt_gatt_dm_start+0x90>)
    cda6:	f504 769c 	add.w	r6, r4, #312	; 0x138
    cdaa:	e8d6 1fef 	ldaex	r1, [r6]
    cdae:	f041 0c01 	orr.w	ip, r1, #1
    cdb2:	e8c6 cfee 	stlex	lr, ip, [r6]
    cdb6:	f1be 0f00 	cmp.w	lr, #0
    cdba:	d1f6      	bne.n	cdaa <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    cdbc:	f011 0101 	ands.w	r1, r1, #1
    cdc0:	d12b      	bne.n	ce1a <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    cdc2:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    cdc6:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    cdca:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    cdce:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    cdd2:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cdd6:	b108      	cbz	r0, cddc <bt_gatt_dm_start+0x4c>
    cdd8:	f7ff fe80 	bl	cadc <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    cddc:	4b11      	ldr	r3, [pc, #68]	; (ce24 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cdde:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    cde0:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    cde2:	2301      	movs	r3, #1
    cde4:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    cde6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cdea:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cdec:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    cdee:	4628      	mov	r0, r5
    cdf0:	490d      	ldr	r1, [pc, #52]	; (ce28 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cdf2:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    cdf4:	f007 fcf6 	bl	147e4 <bt_gatt_discover>
	if (err) {
    cdf8:	4604      	mov	r4, r0
    cdfa:	b148      	cbz	r0, ce10 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    cdfc:	4602      	mov	r2, r0
    cdfe:	2145      	movs	r1, #69	; 0x45
    ce00:	480a      	ldr	r0, [pc, #40]	; (ce2c <bt_gatt_dm_start+0x9c>)
    ce02:	f00f fe85 	bl	1cb10 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ce06:	f06f 0101 	mvn.w	r1, #1
    ce0a:	4809      	ldr	r0, [pc, #36]	; (ce30 <bt_gatt_dm_start+0xa0>)
    ce0c:	f010 fcb5 	bl	1d77a <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    ce10:	4620      	mov	r0, r4
    ce12:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ce14:	f06f 0415 	mvn.w	r4, #21
    ce18:	e7fa      	b.n	ce10 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    ce1a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    ce1e:	e7f7      	b.n	ce10 <bt_gatt_dm_start+0x80>
    ce20:	2000998c 	.word	0x2000998c
    ce24:	0000cb25 	.word	0x0000cb25
    ce28:	20009994 	.word	0x20009994
    ce2c:	0002391d 	.word	0x0002391d
    ce30:	20009ac4 	.word	0x20009ac4

0000ce34 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    ce34:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    ce36:	4c06      	ldr	r4, [pc, #24]	; (ce50 <scan_default_param_set+0x1c>)
{
    ce38:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    ce3a:	ad01      	add	r5, sp, #4
    ce3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ce3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ce40:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    ce42:	4c04      	ldr	r4, [pc, #16]	; (ce54 <scan_default_param_set+0x20>)
    ce44:	ad01      	add	r5, sp, #4
    ce46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ce48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ce4a:	6026      	str	r6, [r4, #0]
}
    ce4c:	b006      	add	sp, #24
    ce4e:	bd70      	pop	{r4, r5, r6, pc}
    ce50:	00021ce0 	.word	0x00021ce0
    ce54:	20009b08 	.word	0x20009b08

0000ce58 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    ce58:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    ce5c:	4b02      	ldr	r3, [pc, #8]	; (ce68 <scan_default_conn_param_set+0x10>)
    ce5e:	4903      	ldr	r1, [pc, #12]	; (ce6c <scan_default_conn_param_set+0x14>)
    ce60:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    ce64:	4770      	bx	lr
    ce66:	bf00      	nop
    ce68:	20009ad8 	.word	0x20009ad8
    ce6c:	00280018 	.word	0x00280018

0000ce70 <uuid_check>:
{
    ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    ce74:	4c29      	ldr	r4, [pc, #164]	; (cf1c <uuid_check+0xac>)
{
    ce76:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    ce78:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    ce7c:	4606      	mov	r6, r0
    ce7e:	9100      	str	r1, [sp, #0]
    ce80:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    ce82:	2b00      	cmp	r3, #0
    ce84:	d03c      	beq.n	cf00 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    ce86:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    ce88:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    ce8a:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    ce8c:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ce90:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
    ce94:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    ce96:	4557      	cmp	r7, sl
    ce98:	d30e      	bcc.n	ceb8 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    ce9a:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    ce9e:	f1bb 0f00 	cmp.w	fp, #0
    cea2:	d02b      	beq.n	cefc <uuid_check+0x8c>
    cea4:	45aa      	cmp	sl, r5
    cea6:	d12b      	bne.n	cf00 <uuid_check+0x90>
			control->filter_match_cnt++;
    cea8:	7873      	ldrb	r3, [r6, #1]
    ceaa:	3301      	adds	r3, #1
    ceac:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    ceae:	2301      	movs	r3, #1
    ceb0:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    ceb4:	70b3      	strb	r3, [r6, #2]
}
    ceb6:	e023      	b.n	cf00 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    ceb8:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    cebc:	9b00      	ldr	r3, [sp, #0]
    cebe:	9a03      	ldr	r2, [sp, #12]
    cec0:	685b      	ldr	r3, [r3, #4]
    cec2:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    cec4:	4b16      	ldr	r3, [pc, #88]	; (cf20 <uuid_check+0xb0>)
    cec6:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    ceca:	9b01      	ldr	r3, [sp, #4]
    cecc:	4599      	cmp	r9, r3
    cece:	d305      	bcc.n	cedc <uuid_check+0x6c>
		} else if (all_filters_mode) {
    ced0:	f1bb 0f00 	cmp.w	fp, #0
    ced4:	d1e1      	bne.n	ce9a <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    ced6:	3701      	adds	r7, #1
    ced8:	3418      	adds	r4, #24
    ceda:	e7dc      	b.n	ce96 <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    cedc:	9b02      	ldr	r3, [sp, #8]
    cede:	4642      	mov	r2, r8
    cee0:	eb03 0109 	add.w	r1, r3, r9
    cee4:	a805      	add	r0, sp, #20
    cee6:	f011 fb94 	bl	1e612 <bt_uuid_create>
    ceea:	2800      	cmp	r0, #0
    ceec:	d0f0      	beq.n	ced0 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    ceee:	68a1      	ldr	r1, [r4, #8]
    cef0:	a805      	add	r0, sp, #20
    cef2:	f011 fb60 	bl	1e5b6 <bt_uuid_cmp>
    cef6:	b130      	cbz	r0, cf06 <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cef8:	44c1      	add	r9, r8
    cefa:	e7e6      	b.n	ceca <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    cefc:	2d00      	cmp	r5, #0
    cefe:	d1d3      	bne.n	cea8 <uuid_check+0x38>
}
    cf00:	b00b      	add	sp, #44	; 0x2c
    cf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    cf06:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cf08:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    cf0c:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cf0e:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    cf10:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    cf12:	f1bb 0f00 	cmp.w	fp, #0
    cf16:	d1de      	bne.n	ced6 <uuid_check+0x66>
    cf18:	e7bf      	b.n	ce9a <uuid_check+0x2a>
    cf1a:	bf00      	nop
    cf1c:	20009ad8 	.word	0x20009ad8
    cf20:	00023958 	.word	0x00023958

0000cf24 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    cf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    cf28:	7803      	ldrb	r3, [r0, #0]
{
    cf2a:	4605      	mov	r5, r0
	switch (data->type) {
    cf2c:	2b19      	cmp	r3, #25
{
    cf2e:	460c      	mov	r4, r1
	switch (data->type) {
    cf30:	d812      	bhi.n	cf58 <adv_data_found+0x34>
    cf32:	2b01      	cmp	r3, #1
    cf34:	d912      	bls.n	cf5c <adv_data_found+0x38>
    cf36:	3b02      	subs	r3, #2
    cf38:	2b17      	cmp	r3, #23
    cf3a:	d80f      	bhi.n	cf5c <adv_data_found+0x38>
    cf3c:	e8df f003 	tbb	[pc, r3]
    cf40:	7f7f7979 	.word	0x7f7f7979
    cf44:	11318181 	.word	0x11318181
    cf48:	0e0e0e0e 	.word	0x0e0e0e0e
    cf4c:	0e0e0e0e 	.word	0x0e0e0e0e
    cf50:	0e0e0e0e 	.word	0x0e0e0e0e
    cf54:	560e0e0e 	.word	0x560e0e0e
    cf58:	2bff      	cmp	r3, #255	; 0xff
    cf5a:	d074      	beq.n	d046 <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    cf5c:	2001      	movs	r0, #1
    cf5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    cf62:	4f4d      	ldr	r7, [pc, #308]	; (d098 <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    cf64:	787b      	ldrb	r3, [r7, #1]
    cf66:	2b00      	cmp	r3, #0
    cf68:	d0f8      	beq.n	cf5c <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cf6a:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    cf6c:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    cf70:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cf74:	4556      	cmp	r6, sl
    cf76:	d2f1      	bcs.n	cf5c <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    cf78:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    cf7c:	4642      	mov	r2, r8
    cf7e:	4648      	mov	r0, r9
    cf80:	6869      	ldr	r1, [r5, #4]
    cf82:	f011 fa5b 	bl	1e43c <strncmp>
		if (adv_name_cmp(data->data,
    cf86:	b950      	cbnz	r0, cf9e <adv_data_found+0x7a>
			control->filter_match_cnt++;
    cf88:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    cf8a:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    cf8e:	3301      	adds	r3, #1
    cf90:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    cf92:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    cf94:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    cf98:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    cf9a:	70a3      	strb	r3, [r4, #2]
    cf9c:	e7de      	b.n	cf5c <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cf9e:	3601      	adds	r6, #1
    cfa0:	e7e8      	b.n	cf74 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    cfa2:	4e3d      	ldr	r6, [pc, #244]	; (d098 <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    cfa4:	78f3      	ldrb	r3, [r6, #3]
    cfa6:	2b00      	cmp	r3, #0
    cfa8:	d0d8      	beq.n	cf5c <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    cfaa:	78b3      	ldrb	r3, [r6, #2]
    cfac:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cfb0:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cfb4:	18f7      	adds	r7, r6, r3
    cfb6:	42be      	cmp	r6, r7
    cfb8:	d0d0      	beq.n	cf5c <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    cfba:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    cfbe:	4543      	cmp	r3, r8
    cfc0:	d812      	bhi.n	cfe8 <adv_data_found+0xc4>
    cfc2:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    cfc6:	4642      	mov	r2, r8
    cfc8:	4648      	mov	r0, r9
    cfca:	6869      	ldr	r1, [r5, #4]
    cfcc:	f011 fa36 	bl	1e43c <strncmp>
	if ((data_len >= short_name_min_len) &&
    cfd0:	b950      	cbnz	r0, cfe8 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    cfd2:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    cfd4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    cfd8:	3301      	adds	r3, #1
    cfda:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    cfdc:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    cfde:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    cfe2:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    cfe6:	e7d8      	b.n	cf9a <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cfe8:	3621      	adds	r6, #33	; 0x21
    cfea:	e7e4      	b.n	cfb6 <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    cfec:	482a      	ldr	r0, [pc, #168]	; (d098 <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    cfee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    cff2:	2b00      	cmp	r3, #0
    cff4:	d0b2      	beq.n	cf5c <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cff6:	2300      	movs	r3, #0
	const uint8_t counter =
    cff8:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
	uint8_t data_len = data->data_len;
    cffc:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    cffe:	42b3      	cmp	r3, r6
    d000:	d2ac      	bcs.n	cf5c <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    d002:	2f02      	cmp	r7, #2
    d004:	d113      	bne.n	d02e <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    d006:	686a      	ldr	r2, [r5, #4]
    d008:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    d00c:	8812      	ldrh	r2, [r2, #0]
    d00e:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    d010:	ba52      	rev16	r2, r2
    d012:	b292      	uxth	r2, r2
    d014:	4291      	cmp	r1, r2
    d016:	d10a      	bne.n	d02e <adv_data_found+0x10a>
		if (find_appearance(data->data,
    d018:	3312      	adds	r3, #18
    d01a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    d01e:	6463      	str	r3, [r4, #68]	; 0x44
			control->filter_match_cnt++;
    d020:	7863      	ldrb	r3, [r4, #1]
    d022:	3301      	adds	r3, #1
    d024:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    d026:	2301      	movs	r3, #1
    d028:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			control->filter_match = true;
    d02c:	e7b5      	b.n	cf9a <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    d02e:	3301      	adds	r3, #1
    d030:	e7e5      	b.n	cffe <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    d032:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    d034:	4629      	mov	r1, r5
    d036:	4620      	mov	r0, r4
    d038:	f7ff ff1a 	bl	ce70 <uuid_check>
		break;
    d03c:	e78e      	b.n	cf5c <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    d03e:	2201      	movs	r2, #1
    d040:	e7f8      	b.n	d034 <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    d042:	2202      	movs	r2, #2
    d044:	e7f6      	b.n	d034 <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    d046:	f8df 8050 	ldr.w	r8, [pc, #80]	; d098 <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    d04a:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
    d04e:	2b00      	cmp	r3, #0
    d050:	d084      	beq.n	cf5c <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    d052:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    d054:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    d056:	f817 9f26 	ldrb.w	r9, [r7, #38]!
	for (size_t i = 0; i < counter; i++) {
    d05a:	454e      	cmp	r6, r9
    d05c:	f4bf af7e 	bcs.w	cf5c <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    d060:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    d064:	786b      	ldrb	r3, [r5, #1]
    d066:	4293      	cmp	r3, r2
    d068:	d313      	bcc.n	d092 <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    d06a:	4638      	mov	r0, r7
    d06c:	6869      	ldr	r1, [r5, #4]
    d06e:	f011 f9f6 	bl	1e45e <memcmp>
    d072:	b970      	cbnz	r0, d092 <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    d074:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    d078:	64e7      	str	r7, [r4, #76]	; 0x4c
				md_filter->manufacturer_data[i].data_len;
    d07a:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    d07c:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
    d080:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			control->filter_match_cnt++;
    d084:	7863      	ldrb	r3, [r4, #1]
    d086:	3301      	adds	r3, #1
    d088:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    d08a:	2301      	movs	r3, #1
    d08c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    d090:	e783      	b.n	cf9a <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    d092:	3601      	adds	r6, #1
    d094:	3721      	adds	r7, #33	; 0x21
    d096:	e7e0      	b.n	d05a <adv_data_found+0x136>
    d098:	20009ad8 	.word	0x20009ad8

0000d09c <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d09e:	4605      	mov	r5, r0
    d0a0:	460e      	mov	r6, r1
    d0a2:	4617      	mov	r7, r2
	return list->head;
    d0a4:	4b08      	ldr	r3, [pc, #32]	; (d0c8 <notify_filter_matched.constprop.0+0x2c>)
    d0a6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0a8:	b10c      	cbz	r4, d0ae <notify_filter_matched.constprop.0+0x12>
    d0aa:	3c04      	subs	r4, #4
    d0ac:	b904      	cbnz	r4, d0b0 <notify_filter_matched.constprop.0+0x14>
}
    d0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    d0b0:	6823      	ldr	r3, [r4, #0]
    d0b2:	681b      	ldr	r3, [r3, #0]
    d0b4:	b11b      	cbz	r3, d0be <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    d0b6:	463a      	mov	r2, r7
    d0b8:	4631      	mov	r1, r6
    d0ba:	4628      	mov	r0, r5
    d0bc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d0be:	1d23      	adds	r3, r4, #4
    d0c0:	d0f5      	beq.n	d0ae <notify_filter_matched.constprop.0+0x12>
	return node->next;
    d0c2:	6864      	ldr	r4, [r4, #4]
    d0c4:	e7f0      	b.n	d0a8 <notify_filter_matched.constprop.0+0xc>
    d0c6:	bf00      	nop
    d0c8:	20009b24 	.word	0x20009b24

0000d0cc <bt_scan_cb_register>:
	if (!cb) {
    d0cc:	b150      	cbz	r0, d0e4 <bt_scan_cb_register+0x18>
	parent->next = child;
    d0ce:	2300      	movs	r3, #0
    d0d0:	6043      	str	r3, [r0, #4]
	return list->tail;
    d0d2:	4b05      	ldr	r3, [pc, #20]	; (d0e8 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    d0d4:	1d02      	adds	r2, r0, #4
    d0d6:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    d0d8:	b911      	cbnz	r1, d0e0 <bt_scan_cb_register+0x14>
	list->head = node;
    d0da:	e9c3 2200 	strd	r2, r2, [r3]
}
    d0de:	4770      	bx	lr
	parent->next = child;
    d0e0:	600a      	str	r2, [r1, #0]
	list->tail = node;
    d0e2:	605a      	str	r2, [r3, #4]
}
    d0e4:	4770      	bx	lr
    d0e6:	bf00      	nop
    d0e8:	20009b24 	.word	0x20009b24

0000d0ec <bt_scan_filter_add>:
{
    d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0ee:	4605      	mov	r5, r0
	if (!data) {
    d0f0:	460c      	mov	r4, r1
    d0f2:	2900      	cmp	r1, #0
    d0f4:	d048      	beq.n	d188 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    d0f6:	f04f 32ff 	mov.w	r2, #4294967295
    d0fa:	f04f 33ff 	mov.w	r3, #4294967295
    d0fe:	4824      	ldr	r0, [pc, #144]	; (d190 <bt_scan_filter_add+0xa4>)
    d100:	f00d f892 	bl	1a228 <z_impl_k_mutex_lock>
	switch (type) {
    d104:	2d03      	cmp	r5, #3
    d106:	d00c      	beq.n	d122 <bt_scan_filter_add+0x36>
    d108:	d938      	bls.n	d17c <bt_scan_filter_add+0x90>
    d10a:	3d04      	subs	r5, #4
		err = -EINVAL;
    d10c:	2d01      	cmp	r5, #1
    d10e:	bf94      	ite	ls
    d110:	f06f 040b 	mvnls.w	r4, #11
    d114:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    d118:	481d      	ldr	r0, [pc, #116]	; (d190 <bt_scan_filter_add+0xa4>)
    d11a:	f00d f951 	bl	1a3c0 <z_impl_k_mutex_unlock>
}
    d11e:	4620      	mov	r0, r4
    d120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    d122:	4a1c      	ldr	r2, [pc, #112]	; (d194 <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    d124:	f892 3020 	ldrb.w	r3, [r2, #32]
    d128:	bb43      	cbnz	r3, d17c <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    d12a:	7823      	ldrb	r3, [r4, #0]
    d12c:	2b01      	cmp	r3, #1
    d12e:	d00c      	beq.n	d14a <bt_scan_filter_add+0x5e>
    d130:	2b02      	cmp	r3, #2
    d132:	d011      	beq.n	d158 <bt_scan_filter_add+0x6c>
    d134:	bb2b      	cbnz	r3, d182 <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    d136:	6820      	ldr	r0, [r4, #0]
    d138:	f102 030c 	add.w	r3, r2, #12
    d13c:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    d13e:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    d140:	2301      	movs	r3, #1
	return 0;
    d142:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    d144:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    d148:	e7e6      	b.n	d118 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    d14a:	f102 030c 	add.w	r3, r2, #12
    d14e:	e894 0003 	ldmia.w	r4, {r0, r1}
    d152:	e883 0003 	stmia.w	r3, {r0, r1}
    d156:	e7f2      	b.n	d13e <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    d158:	4623      	mov	r3, r4
    d15a:	f102 040c 	add.w	r4, r2, #12
    d15e:	4626      	mov	r6, r4
    d160:	f103 0710 	add.w	r7, r3, #16
    d164:	4625      	mov	r5, r4
    d166:	6818      	ldr	r0, [r3, #0]
    d168:	6859      	ldr	r1, [r3, #4]
    d16a:	3308      	adds	r3, #8
    d16c:	c503      	stmia	r5!, {r0, r1}
    d16e:	42bb      	cmp	r3, r7
    d170:	462c      	mov	r4, r5
    d172:	d1f7      	bne.n	d164 <bt_scan_filter_add+0x78>
    d174:	781b      	ldrb	r3, [r3, #0]
    d176:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    d178:	6096      	str	r6, [r2, #8]
		break;
    d17a:	e7e1      	b.n	d140 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    d17c:	f06f 040b 	mvn.w	r4, #11
    d180:	e7ca      	b.n	d118 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    d182:	f06f 0415 	mvn.w	r4, #21
    d186:	e7c7      	b.n	d118 <bt_scan_filter_add+0x2c>
		return -EINVAL;
    d188:	f06f 0415 	mvn.w	r4, #21
    d18c:	e7c7      	b.n	d11e <bt_scan_filter_add+0x32>
    d18e:	bf00      	nop
    d190:	2000853c 	.word	0x2000853c
    d194:	20009ad8 	.word	0x20009ad8

0000d198 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    d198:	2200      	movs	r2, #0
    d19a:	4b05      	ldr	r3, [pc, #20]	; (d1b0 <bt_scan_filter_disable+0x18>)
    d19c:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    d19e:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    d1a0:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    d1a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    d1a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    d1aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    d1ae:	4770      	bx	lr
    d1b0:	20009ad8 	.word	0x20009ad8

0000d1b4 <bt_scan_filter_enable>:
{
    d1b4:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    d1b6:	0683      	lsls	r3, r0, #26
    d1b8:	d025      	beq.n	d206 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    d1ba:	f7ff ffed 	bl	d198 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    d1be:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    d1c2:	bf18      	it	ne
    d1c4:	2201      	movne	r2, #1
    d1c6:	4b11      	ldr	r3, [pc, #68]	; (d20c <bt_scan_filter_enable+0x58>)
    d1c8:	bf18      	it	ne
    d1ca:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    d1cc:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    d1ce:	bf44      	itt	mi
    d1d0:	2201      	movmi	r2, #1
    d1d2:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    d1d4:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    d1d6:	bf44      	itt	mi
    d1d8:	2201      	movmi	r2, #1
    d1da:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    d1dc:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    d1de:	bf44      	itt	mi
    d1e0:	2201      	movmi	r2, #1
    d1e2:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    d1e6:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    d1e8:	bf44      	itt	mi
    d1ea:	2201      	movmi	r2, #1
    d1ec:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    d1f0:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    d1f2:	bf48      	it	mi
    d1f4:	2201      	movmi	r2, #1
	return 0;
    d1f6:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    d1fa:	bf48      	it	mi
    d1fc:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    d200:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    d204:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d206:	f06f 0015 	mvn.w	r0, #21
    d20a:	e7fb      	b.n	d204 <bt_scan_filter_enable+0x50>
    d20c:	20009ad8 	.word	0x20009ad8

0000d210 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    d210:	b570      	push	{r4, r5, r6, lr}
    d212:	460e      	mov	r6, r1
    d214:	b086      	sub	sp, #24
    d216:	4605      	mov	r5, r0
	bt_scan_stop();
    d218:	f010 fb79 	bl	1d90e <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    d21c:	4b18      	ldr	r3, [pc, #96]	; (d280 <scan_connect_with_target.part.0+0x70>)
    d21e:	ac02      	add	r4, sp, #8
    d220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    d226:	4621      	mov	r1, r4
    d228:	ab01      	add	r3, sp, #4
    d22a:	4630      	mov	r0, r6
    d22c:	4a15      	ldr	r2, [pc, #84]	; (d284 <scan_connect_with_target.part.0+0x74>)
    d22e:	f004 fbf9 	bl	11a24 <bt_conn_le_create>
	if (err) {
    d232:	4b15      	ldr	r3, [pc, #84]	; (d288 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    d234:	3508      	adds	r5, #8
	return list->head;
    d236:	681c      	ldr	r4, [r3, #0]
	if (err) {
    d238:	b168      	cbz	r0, d256 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d23a:	b10c      	cbz	r4, d240 <scan_connect_with_target.part.0+0x30>
    d23c:	3c04      	subs	r4, #4
    d23e:	b90c      	cbnz	r4, d244 <scan_connect_with_target.part.0+0x34>
}
    d240:	b006      	add	sp, #24
    d242:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    d244:	6823      	ldr	r3, [r4, #0]
    d246:	689b      	ldr	r3, [r3, #8]
    d248:	b10b      	cbz	r3, d24e <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    d24a:	4628      	mov	r0, r5
    d24c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d24e:	1d22      	adds	r2, r4, #4
    d250:	d0f6      	beq.n	d240 <scan_connect_with_target.part.0+0x30>
	return node->next;
    d252:	6864      	ldr	r4, [r4, #4]
    d254:	e7f1      	b.n	d23a <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d256:	b91c      	cbnz	r4, d260 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    d258:	9801      	ldr	r0, [sp, #4]
    d25a:	f004 fa29 	bl	116b0 <bt_conn_unref>
    d25e:	e7ef      	b.n	d240 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    d260:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d262:	3c04      	subs	r4, #4
    d264:	2c00      	cmp	r4, #0
    d266:	d0f7      	beq.n	d258 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    d268:	6823      	ldr	r3, [r4, #0]
    d26a:	68db      	ldr	r3, [r3, #12]
    d26c:	b113      	cbz	r3, d274 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    d26e:	4631      	mov	r1, r6
    d270:	4628      	mov	r0, r5
    d272:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d274:	1d23      	adds	r3, r4, #4
    d276:	d0ef      	beq.n	d258 <scan_connect_with_target.part.0+0x48>
	return node->next;
    d278:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d27a:	2c00      	cmp	r4, #0
    d27c:	d1f1      	bne.n	d262 <scan_connect_with_target.part.0+0x52>
    d27e:	e7eb      	b.n	d258 <scan_connect_with_target.part.0+0x48>
    d280:	00021cf4 	.word	0x00021cf4
    d284:	20009b1c 	.word	0x20009b1c
    d288:	20009b24 	.word	0x20009b24

0000d28c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d290:	4c54      	ldr	r4, [pc, #336]	; (d3e4 <scan_recv+0x158>)
{
    d292:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    d294:	2254      	movs	r2, #84	; 0x54
{
    d296:	4606      	mov	r6, r0
    d298:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    d29a:	a801      	add	r0, sp, #4
    d29c:	2100      	movs	r1, #0
    d29e:	f011 f91a 	bl	1e4d6 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d2a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    d2a6:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d2a8:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    d2ac:	2300      	movs	r3, #0
    d2ae:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    d2b2:	b112      	cbz	r2, d2ba <scan_recv+0x2e>
		control->filter_cnt++;
    d2b4:	2301      	movs	r3, #1
    d2b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    d2ba:	7863      	ldrb	r3, [r4, #1]
    d2bc:	b123      	cbz	r3, d2c8 <scan_recv+0x3c>
		control->filter_cnt++;
    d2be:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d2c2:	3301      	adds	r3, #1
    d2c4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    d2c8:	78e3      	ldrb	r3, [r4, #3]
    d2ca:	b123      	cbz	r3, d2d6 <scan_recv+0x4a>
		control->filter_cnt++;
    d2cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d2d0:	3301      	adds	r3, #1
    d2d2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    d2d6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d2da:	b123      	cbz	r3, d2e6 <scan_recv+0x5a>
		control->filter_cnt++;
    d2dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d2e0:	3301      	adds	r3, #1
    d2e2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    d2e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    d2ea:	b123      	cbz	r3, d2f6 <scan_recv+0x6a>
		control->filter_cnt++;
    d2ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d2f0:	3301      	adds	r3, #1
    d2f2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    d2f6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d2fa:	b123      	cbz	r3, d306 <scan_recv+0x7a>
		control->filter_cnt++;
    d2fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d300:	3301      	adds	r3, #1
    d302:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    d306:	7a33      	ldrb	r3, [r6, #8]
    d308:	f003 0301 	and.w	r3, r3, #1
    d30c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    d310:	b1ea      	cbz	r2, d34e <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    d312:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    d316:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    d31a:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    d31e:	4f32      	ldr	r7, [pc, #200]	; (d3e8 <scan_recv+0x15c>)
    d320:	45c8      	cmp	r8, r9
    d322:	d214      	bcs.n	d34e <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    d324:	4639      	mov	r1, r7
    d326:	2207      	movs	r2, #7
    d328:	4650      	mov	r0, sl
    d32a:	f011 f898 	bl	1e45e <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    d32e:	46bb      	mov	fp, r7
    d330:	3707      	adds	r7, #7
    d332:	2800      	cmp	r0, #0
    d334:	d13a      	bne.n	d3ac <scan_recv+0x120>
			control->filter_match_cnt++;
    d336:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    d33a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    d33e:	3301      	adds	r3, #1
    d340:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    d344:	2301      	movs	r3, #1
    d346:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    d34a:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    d34e:	4628      	mov	r0, r5
    d350:	f013 fa1a 	bl	20788 <net_buf_simple_headroom>
    d354:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    d356:	4925      	ldr	r1, [pc, #148]	; (d3ec <scan_recv+0x160>)
    d358:	4628      	mov	r0, r5
    d35a:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    d35c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    d360:	f002 fd50 	bl	fe04 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    d364:	4b22      	ldr	r3, [pc, #136]	; (d3f0 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    d366:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    d368:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    d36c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d370:	fa10 f787 	uxtah	r7, r0, r7
    d374:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    d376:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    d37a:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    d37c:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    d37e:	b1c3      	cbz	r3, d3b2 <scan_recv+0x126>
    d380:	f89d 2005 	ldrb.w	r2, [sp, #5]
    d384:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d388:	429a      	cmp	r2, r3
    d38a:	d116      	bne.n	d3ba <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    d38c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d390:	a906      	add	r1, sp, #24
    d392:	a803      	add	r0, sp, #12
    d394:	f7ff fe82 	bl	d09c <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    d398:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    d39c:	b11b      	cbz	r3, d3a6 <scan_recv+0x11a>
    d39e:	4629      	mov	r1, r5
    d3a0:	a801      	add	r0, sp, #4
    d3a2:	f7ff ff35 	bl	d210 <scan_connect_with_target.part.0>
}
    d3a6:	b017      	add	sp, #92	; 0x5c
    d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    d3ac:	f108 0801 	add.w	r8, r8, #1
    d3b0:	e7b6      	b.n	d320 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    d3b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d3b6:	2b00      	cmp	r3, #0
    d3b8:	d1e8      	bne.n	d38c <scan_recv+0x100>
	return list->head;
    d3ba:	4b0e      	ldr	r3, [pc, #56]	; (d3f4 <scan_recv+0x168>)
    d3bc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d3be:	2c00      	cmp	r4, #0
    d3c0:	d0f1      	beq.n	d3a6 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    d3c2:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d3c6:	3c04      	subs	r4, #4
    d3c8:	2c00      	cmp	r4, #0
    d3ca:	d0ec      	beq.n	d3a6 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    d3cc:	6823      	ldr	r3, [r4, #0]
    d3ce:	685b      	ldr	r3, [r3, #4]
    d3d0:	b113      	cbz	r3, d3d8 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    d3d2:	4629      	mov	r1, r5
    d3d4:	a803      	add	r0, sp, #12
    d3d6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d3d8:	1d23      	adds	r3, r4, #4
    d3da:	d0e4      	beq.n	d3a6 <scan_recv+0x11a>
	return node->next;
    d3dc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d3de:	2c00      	cmp	r4, #0
    d3e0:	d1f1      	bne.n	d3c6 <scan_recv+0x13a>
    d3e2:	e7e0      	b.n	d3a6 <scan_recv+0x11a>
    d3e4:	20009ad8 	.word	0x20009ad8
    d3e8:	20009adc 	.word	0x20009adc
    d3ec:	0000cf25 	.word	0x0000cf25
    d3f0:	20009b1c 	.word	0x20009b1c
    d3f4:	20009b24 	.word	0x20009b24

0000d3f8 <bt_scan_init>:
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
    d3fa:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d3fc:	4c14      	ldr	r4, [pc, #80]	; (d450 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    d3fe:	4815      	ldr	r0, [pc, #84]	; (d454 <bt_scan_init+0x5c>)
    d400:	f003 fd5e 	bl	10ec0 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d404:	222c      	movs	r2, #44	; 0x2c
    d406:	2100      	movs	r1, #0
    d408:	4620      	mov	r0, r4
    d40a:	f011 f864 	bl	1e4d6 <memset>
	if (init) {
    d40e:	b1be      	cbz	r6, d440 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d410:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d412:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d414:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    d418:	b15d      	cbz	r5, d432 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d41a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d41c:	3430      	adds	r4, #48	; 0x30
    d41e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d420:	682b      	ldr	r3, [r5, #0]
    d422:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d424:	68b2      	ldr	r2, [r6, #8]
    d426:	b13a      	cbz	r2, d438 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d428:	4b0b      	ldr	r3, [pc, #44]	; (d458 <bt_scan_init+0x60>)
    d42a:	6810      	ldr	r0, [r2, #0]
    d42c:	6851      	ldr	r1, [r2, #4]
    d42e:	c303      	stmia	r3!, {r0, r1}
}
    d430:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d432:	f7ff fcff 	bl	ce34 <scan_default_param_set>
    d436:	e7f5      	b.n	d424 <bt_scan_init+0x2c>
}
    d438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d43c:	f7ff bd0c 	b.w	ce58 <scan_default_conn_param_set>
		scan_default_param_set();
    d440:	f7ff fcf8 	bl	ce34 <scan_default_param_set>
		scan_default_conn_param_set();
    d444:	f7ff fd08 	bl	ce58 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d448:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    d44c:	e7f0      	b.n	d430 <bt_scan_init+0x38>
    d44e:	bf00      	nop
    d450:	20009ad8 	.word	0x20009ad8
    d454:	2000826c 	.word	0x2000826c
    d458:	20009b1c 	.word	0x20009b1c

0000d45c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d45c:	b108      	cbz	r0, d462 <bt_scan_start+0x6>
    d45e:	2801      	cmp	r0, #1
    d460:	d106      	bne.n	d470 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d462:	4b05      	ldr	r3, [pc, #20]	; (d478 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d464:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d466:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d46a:	4804      	ldr	r0, [pc, #16]	; (d47c <bt_scan_start+0x20>)
    d46c:	f003 bcae 	b.w	10dcc <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d470:	f06f 0015 	mvn.w	r0, #21
    d474:	4770      	bx	lr
    d476:	bf00      	nop
    d478:	20009ad8 	.word	0x20009ad8
    d47c:	20009b08 	.word	0x20009b08

0000d480 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d480:	1e4b      	subs	r3, r1, #1
    d482:	4259      	negs	r1, r3
    d484:	4159      	adcs	r1, r3
    d486:	4b01      	ldr	r3, [pc, #4]	; (d48c <lbslc_ccc_cfg_changed+0xc>)
    d488:	7019      	strb	r1, [r3, #0]
}
    d48a:	4770      	bx	lr
    d48c:	2000b2a6 	.word	0x2000b2a6

0000d490 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d490:	b510      	push	{r4, lr}
    d492:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d494:	4b03      	ldr	r3, [pc, #12]	; (d4a4 <write_led+0x14>)
    d496:	681b      	ldr	r3, [r3, #0]
    d498:	b10b      	cbz	r3, d49e <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d49a:	7810      	ldrb	r0, [r2, #0]
    d49c:	4798      	blx	r3
	}

	return len;
}
    d49e:	4620      	mov	r0, r4
    d4a0:	bd10      	pop	{r4, pc}
    d4a2:	bf00      	nop
    d4a4:	20009b2c 	.word	0x20009b2c

0000d4a8 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d4a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d4ac:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d4ae:	4b0d      	ldr	r3, [pc, #52]	; (d4e4 <read_button+0x3c>)
{
    d4b0:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d4b2:	6858      	ldr	r0, [r3, #4]
{
    d4b4:	460c      	mov	r4, r1
    d4b6:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d4b8:	b180      	cbz	r0, d4dc <read_button+0x34>
	const char *value = attr->user_data;
    d4ba:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d4be:	4780      	blx	r0
    d4c0:	4b09      	ldr	r3, [pc, #36]	; (d4e8 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d4c2:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d4c4:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d4c6:	2301      	movs	r3, #1
    d4c8:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d4cc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d4d0:	4621      	mov	r1, r4
    d4d2:	9300      	str	r3, [sp, #0]
    d4d4:	4628      	mov	r0, r5
    d4d6:	463b      	mov	r3, r7
    d4d8:	f012 fadc 	bl	1fa94 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d4dc:	b004      	add	sp, #16
    d4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4e2:	bf00      	nop
    d4e4:	20009b2c 	.word	0x20009b2c
    d4e8:	2000b2a5 	.word	0x2000b2a5

0000d4ec <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d4ec:	b120      	cbz	r0, d4f8 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d4ee:	4b03      	ldr	r3, [pc, #12]	; (d4fc <bt_lbs_init+0x10>)
    d4f0:	6802      	ldr	r2, [r0, #0]
    d4f2:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d4f4:	6842      	ldr	r2, [r0, #4]
    d4f6:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d4f8:	2000      	movs	r0, #0
    d4fa:	4770      	bx	lr
    d4fc:	20009b2c 	.word	0x20009b2c

0000d500 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d500:	b500      	push	{lr}
	if (!notify_enabled) {
    d502:	4b0e      	ldr	r3, [pc, #56]	; (d53c <bt_lbs_send_button_state+0x3c>)
{
    d504:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d506:	781b      	ldrb	r3, [r3, #0]
{
    d508:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d50c:	b19b      	cbz	r3, d536 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d50e:	2100      	movs	r1, #0
    d510:	2218      	movs	r2, #24
    d512:	a802      	add	r0, sp, #8
    d514:	f010 ffdf 	bl	1e4d6 <memset>

	params.attr = attr;
    d518:	4b09      	ldr	r3, [pc, #36]	; (d540 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d51a:	2000      	movs	r0, #0
	params.attr = attr;
    d51c:	9303      	str	r3, [sp, #12]
	params.data = data;
    d51e:	f10d 0307 	add.w	r3, sp, #7
    d522:	9304      	str	r3, [sp, #16]
	params.len = len;
    d524:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d526:	a902      	add	r1, sp, #8
	params.len = len;
    d528:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d52c:	f006 fef8 	bl	14320 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d530:	b009      	add	sp, #36	; 0x24
    d532:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d536:	f06f 000c 	mvn.w	r0, #12
    d53a:	e7f9      	b.n	d530 <bt_lbs_send_button_state+0x30>
    d53c:	2000b2a6 	.word	0x2000b2a6
    d540:	00022010 	.word	0x00022010

0000d544 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d544:	2303      	movs	r3, #3
static void _DoInit(void) {
    d546:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d548:	4c10      	ldr	r4, [pc, #64]	; (d58c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d54a:	4a11      	ldr	r2, [pc, #68]	; (d590 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d54c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d550:	4b10      	ldr	r3, [pc, #64]	; (d594 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d552:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d554:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d556:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d55a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d55c:	4a0e      	ldr	r2, [pc, #56]	; (d598 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d55e:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d560:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d562:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d564:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d566:	490d      	ldr	r1, [pc, #52]	; (d59c <_DoInit+0x58>)
    d568:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d56a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d56c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d56e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d570:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d572:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d574:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d576:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d578:	f010 ff28 	bl	1e3cc <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d57c:	4620      	mov	r0, r4
    d57e:	4908      	ldr	r1, [pc, #32]	; (d5a0 <_DoInit+0x5c>)
    d580:	f010 ff24 	bl	1e3cc <strcpy>
  p->acID[6] = ' ';
    d584:	2320      	movs	r3, #32
    d586:	71a3      	strb	r3, [r4, #6]
}
    d588:	bd10      	pop	{r4, pc}
    d58a:	bf00      	nop
    d58c:	20009b34 	.word	0x20009b34
    d590:	000239b7 	.word	0x000239b7
    d594:	2000b2b7 	.word	0x2000b2b7
    d598:	2000b2a7 	.word	0x2000b2a7
    d59c:	000239c0 	.word	0x000239c0
    d5a0:	000239c4 	.word	0x000239c4

0000d5a4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5a4:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d5a6:	2418      	movs	r4, #24
    d5a8:	fb00 4504 	mla	r5, r0, r4, r4
    d5ac:	4b14      	ldr	r3, [pc, #80]	; (d600 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5ae:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d5b0:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d5b2:	fb04 3300 	mla	r3, r4, r0, r3
    d5b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d5b8:	2c01      	cmp	r4, #1
    d5ba:	d00e      	beq.n	d5da <SEGGER_RTT_WriteNoLock+0x36>
    d5bc:	2c02      	cmp	r4, #2
    d5be:	d018      	beq.n	d5f2 <SEGGER_RTT_WriteNoLock+0x4e>
    d5c0:	b9e4      	cbnz	r4, d5fc <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d5c2:	4628      	mov	r0, r5
    d5c4:	f010 f9b1 	bl	1d92a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d5c8:	4286      	cmp	r6, r0
    d5ca:	d804      	bhi.n	d5d6 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d5cc:	4632      	mov	r2, r6
    d5ce:	4628      	mov	r0, r5
    d5d0:	f010 f9b4 	bl	1d93c <_WriteNoCheck>
    d5d4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d5d6:	4620      	mov	r0, r4
    d5d8:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d5da:	4628      	mov	r0, r5
    d5dc:	f010 f9a5 	bl	1d92a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d5e0:	4286      	cmp	r6, r0
    d5e2:	4634      	mov	r4, r6
    d5e4:	bf28      	it	cs
    d5e6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d5e8:	4628      	mov	r0, r5
    d5ea:	4622      	mov	r2, r4
    d5ec:	f010 f9a6 	bl	1d93c <_WriteNoCheck>
    break;
    d5f0:	e7f1      	b.n	d5d6 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d5f2:	4628      	mov	r0, r5
}
    d5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d5f8:	f010 b9bc 	b.w	1d974 <_WriteBlocking>
  switch (pRing->Flags) {
    d5fc:	2400      	movs	r4, #0
  return Status;
    d5fe:	e7ea      	b.n	d5d6 <SEGGER_RTT_WriteNoLock+0x32>
    d600:	20009b34 	.word	0x20009b34

0000d604 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d604:	4904      	ldr	r1, [pc, #16]	; (d618 <sub_bytes+0x14>)
    d606:	1e43      	subs	r3, r0, #1
    d608:	300f      	adds	r0, #15
    d60a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d60e:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d610:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d612:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d614:	d1f9      	bne.n	d60a <sub_bytes+0x6>
	}
}
    d616:	4770      	bx	lr
    d618:	000239cb 	.word	0x000239cb

0000d61c <tc_aes128_set_encrypt_key>:
{
    d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d61e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d620:	4e26      	ldr	r6, [pc, #152]	; (d6bc <tc_aes128_set_encrypt_key+0xa0>)
{
    d622:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d624:	ad01      	add	r5, sp, #4
{
    d626:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d628:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d62a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d62c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d62e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d630:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d634:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d638:	4638      	mov	r0, r7
    d63a:	2f00      	cmp	r7, #0
    d63c:	d039      	beq.n	d6b2 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d63e:	2c00      	cmp	r4, #0
    d640:	d039      	beq.n	d6b6 <tc_aes128_set_encrypt_key+0x9a>
    d642:	1f38      	subs	r0, r7, #4
    d644:	4602      	mov	r2, r0
    d646:	4621      	mov	r1, r4
    d648:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d64a:	784b      	ldrb	r3, [r1, #1]
    d64c:	780d      	ldrb	r5, [r1, #0]
    d64e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d650:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d654:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d656:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d658:	432b      	orrs	r3, r5
    d65a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d65e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d660:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d664:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d668:	d1ef      	bne.n	d64a <tc_aes128_set_encrypt_key+0x2e>
    d66a:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d66c:	4c14      	ldr	r4, [pc, #80]	; (d6c0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d66e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d670:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d672:	d116      	bne.n	d6a2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d674:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d678:	5ca5      	ldrb	r5, [r4, r2]
    d67a:	0e1a      	lsrs	r2, r3, #24
    d67c:	5ca2      	ldrb	r2, [r4, r2]
    d67e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d682:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d686:	5d65      	ldrb	r5, [r4, r5]
    d688:	b2db      	uxtb	r3, r3
    d68a:	5ce3      	ldrb	r3, [r4, r3]
    d68c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d690:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d694:	ad0c      	add	r5, sp, #48	; 0x30
    d696:	f021 0303 	bic.w	r3, r1, #3
    d69a:	442b      	add	r3, r5
    d69c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d6a0:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d6a2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d6a6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d6a8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d6aa:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d6ac:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d6ae:	d1de      	bne.n	d66e <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d6b0:	2001      	movs	r0, #1
}
    d6b2:	b00d      	add	sp, #52	; 0x34
    d6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d6b6:	4620      	mov	r0, r4
    d6b8:	e7fb      	b.n	d6b2 <tc_aes128_set_encrypt_key+0x96>
    d6ba:	bf00      	nop
    d6bc:	00021d04 	.word	0x00021d04
    d6c0:	000239cb 	.word	0x000239cb

0000d6c4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d6c8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d6ca:	6803      	ldr	r3, [r0, #0]
{
    d6cc:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d6ce:	9302      	str	r3, [sp, #8]
    d6d0:	6843      	ldr	r3, [r0, #4]
    d6d2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; d88c <compress+0x1c8>
    d6d6:	9303      	str	r3, [sp, #12]
    d6d8:	6883      	ldr	r3, [r0, #8]
    d6da:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d6de:	9304      	str	r3, [sp, #16]
    d6e0:	68c3      	ldr	r3, [r0, #12]
    d6e2:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d6e4:	6903      	ldr	r3, [r0, #16]
    d6e6:	9306      	str	r3, [sp, #24]
    d6e8:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d6ea:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d6ee:	9307      	str	r3, [sp, #28]
    d6f0:	6983      	ldr	r3, [r0, #24]
    d6f2:	9308      	str	r3, [sp, #32]
    d6f4:	69c3      	ldr	r3, [r0, #28]
    d6f6:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d6fa:	4698      	mov	r8, r3
    d6fc:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d6fe:	9b04      	ldr	r3, [sp, #16]
    d700:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d702:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d704:	ab0c      	add	r3, sp, #48	; 0x30
    d706:	ba2d      	rev	r5, r5
    d708:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d70a:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d70e:	3704      	adds	r7, #4
    d710:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d714:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d718:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d71c:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d720:	444d      	add	r5, r9
    d722:	ea2b 0302 	bic.w	r3, fp, r2
    d726:	ea02 090c 	and.w	r9, r2, ip
    d72a:	ea83 0309 	eor.w	r3, r3, r9
    d72e:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d730:	9d00      	ldr	r5, [sp, #0]
    d732:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d736:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d738:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d73a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d73e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d742:	4025      	ands	r5, r4
    d744:	ea06 0909 	and.w	r9, r6, r9
    d748:	ea85 0509 	eor.w	r5, r5, r9
    d74c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d750:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d752:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d754:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d758:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d75a:	f8dd e000 	ldr.w	lr, [sp]
    d75e:	46d8      	mov	r8, fp
    d760:	f040 8085 	bne.w	d86e <compress+0x1aa>
    d764:	f04f 0a10 	mov.w	sl, #16
    d768:	4949      	ldr	r1, [pc, #292]	; (d890 <compress+0x1cc>)
    d76a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d76c:	4651      	mov	r1, sl
    d76e:	f10a 0a01 	add.w	sl, sl, #1
    d772:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d776:	f00a 070f 	and.w	r7, sl, #15
    d77a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d77e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d782:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d786:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d78a:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d78c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d790:	f101 070e 	add.w	r7, r1, #14
    d794:	f007 070f 	and.w	r7, r7, #15
    d798:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d79c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7a0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d7a2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d7a6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d7aa:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7ae:	f001 010f 	and.w	r1, r1, #15
    d7b2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d7b6:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d7ba:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d7be:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d7c2:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d7c6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7ca:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d7cc:	f8dd e004 	ldr.w	lr, [sp, #4]
    d7d0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d7d4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7d8:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d7da:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d7de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7e0:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d7e2:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7e6:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d7ea:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d7ee:	ea05 0802 	and.w	r8, r5, r2
    d7f2:	970a      	str	r7, [sp, #40]	; 0x28
    d7f4:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d7f8:	ea2c 0705 	bic.w	r7, ip, r5
    d7fc:	ea87 0708 	eor.w	r7, r7, r8
    d800:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d804:	444f      	add	r7, r9
    d806:	4477      	add	r7, lr
    d808:	4439      	add	r1, r7
    d80a:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d80c:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d810:	ea84 0b06 	eor.w	fp, r4, r6
    d814:	ea0b 0b03 	and.w	fp, fp, r3
    d818:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d81c:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d820:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d824:	ea8b 0e0e 	eor.w	lr, fp, lr
    d828:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d82c:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d82e:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d830:	46e3      	mov	fp, ip
    d832:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d834:	9600      	str	r6, [sp, #0]
    d836:	d121      	bne.n	d87c <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d838:	9f02      	ldr	r7, [sp, #8]
    d83a:	440f      	add	r7, r1
    d83c:	9903      	ldr	r1, [sp, #12]
    d83e:	6007      	str	r7, [r0, #0]
    d840:	4419      	add	r1, r3
    d842:	9b04      	ldr	r3, [sp, #16]
    d844:	6041      	str	r1, [r0, #4]
    d846:	4423      	add	r3, r4
    d848:	6083      	str	r3, [r0, #8]
    d84a:	9b05      	ldr	r3, [sp, #20]
    d84c:	4433      	add	r3, r6
    d84e:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d850:	9b06      	ldr	r3, [sp, #24]
    d852:	4443      	add	r3, r8
    d854:	6103      	str	r3, [r0, #16]
    d856:	9b07      	ldr	r3, [sp, #28]
    d858:	442b      	add	r3, r5
    d85a:	6143      	str	r3, [r0, #20]
    d85c:	9b08      	ldr	r3, [sp, #32]
    d85e:	4413      	add	r3, r2
    d860:	6183      	str	r3, [r0, #24]
    d862:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d864:	4463      	add	r3, ip
    d866:	61c3      	str	r3, [r0, #28]
}
    d868:	b01d      	add	sp, #116	; 0x74
    d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d86e:	46e3      	mov	fp, ip
    d870:	9600      	str	r6, [sp, #0]
    d872:	4694      	mov	ip, r2
    d874:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    d876:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    d878:	461c      	mov	r4, r3
    d87a:	e742      	b.n	d702 <compress+0x3e>
    d87c:	4694      	mov	ip, r2
    d87e:	4626      	mov	r6, r4
    d880:	462a      	mov	r2, r5
    d882:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d884:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    d886:	460b      	mov	r3, r1
    d888:	e770      	b.n	d76c <compress+0xa8>
    d88a:	bf00      	nop
    d88c:	00022060 	.word	0x00022060
    d890:	000220a0 	.word	0x000220a0

0000d894 <tc_sha256_init>:
{
    d894:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d896:	4604      	mov	r4, r0
    d898:	b1c8      	cbz	r0, d8ce <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d89a:	2270      	movs	r2, #112	; 0x70
    d89c:	2100      	movs	r1, #0
    d89e:	f010 f8a6 	bl	1d9ee <_set>
	s->iv[1] = 0xbb67ae85;
    d8a2:	4b0b      	ldr	r3, [pc, #44]	; (d8d0 <tc_sha256_init+0x3c>)
    d8a4:	4a0b      	ldr	r2, [pc, #44]	; (d8d4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d8a6:	490c      	ldr	r1, [pc, #48]	; (d8d8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d8a8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d8ac:	4b0b      	ldr	r3, [pc, #44]	; (d8dc <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d8ae:	480c      	ldr	r0, [pc, #48]	; (d8e0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d8b0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d8b4:	4b0b      	ldr	r3, [pc, #44]	; (d8e4 <tc_sha256_init+0x50>)
    d8b6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d8ba:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d8bc:	4b0a      	ldr	r3, [pc, #40]	; (d8e8 <tc_sha256_init+0x54>)
    d8be:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d8c0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d8c4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d8c8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d8cc:	61e3      	str	r3, [r4, #28]
}
    d8ce:	bd10      	pop	{r4, pc}
    d8d0:	bb67ae85 	.word	0xbb67ae85
    d8d4:	6a09e667 	.word	0x6a09e667
    d8d8:	3c6ef372 	.word	0x3c6ef372
    d8dc:	a54ff53a 	.word	0xa54ff53a
    d8e0:	510e527f 	.word	0x510e527f
    d8e4:	9b05688c 	.word	0x9b05688c
    d8e8:	1f83d9ab 	.word	0x1f83d9ab

0000d8ec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d8ec:	4a0a      	ldr	r2, [pc, #40]	; (d918 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d8ee:	490b      	ldr	r1, [pc, #44]	; (d91c <arch_swap+0x30>)
	_current->arch.basepri = key;
    d8f0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d8f2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d8f4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    d8f8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d8fc:	4908      	ldr	r1, [pc, #32]	; (d920 <arch_swap+0x34>)
    d8fe:	684b      	ldr	r3, [r1, #4]
    d900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d904:	604b      	str	r3, [r1, #4]
    d906:	2300      	movs	r3, #0
    d908:	f383 8811 	msr	BASEPRI, r3
    d90c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d910:	6893      	ldr	r3, [r2, #8]
}
    d912:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    d916:	4770      	bx	lr
    d918:	20009fc4 	.word	0x20009fc4
    d91c:	0002278c 	.word	0x0002278c
    d920:	e000ed00 	.word	0xe000ed00

0000d924 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d924:	4914      	ldr	r1, [pc, #80]	; (d978 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d926:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d928:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    d92c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d92e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d932:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d936:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d938:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d93c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d940:	4f0e      	ldr	r7, [pc, #56]	; (d97c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d942:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d946:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d948:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d94a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d94c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    d950:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d952:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d956:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d95a:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    d95e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d962:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d966:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d96a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d96c:	f010 fc82 	bl	1e274 <configure_builtin_stack_guard>
    pop {r2, lr}
    d970:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d974:	4770      	bx	lr
    d976:	0000      	.short	0x0000
    ldr r1, =_kernel
    d978:	20009fc4 	.word	0x20009fc4
    ldr v4, =_SCS_ICSR
    d97c:	e000ed04 	.word	0xe000ed04

0000d980 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d980:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d984:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d986:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d98a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d98e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d990:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d994:	2902      	cmp	r1, #2
    beq _oops
    d996:	d0ff      	beq.n	d998 <_oops>

0000d998 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d998:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d99a:	f010 fc6f 	bl	1e27c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d99e:	bd01      	pop	{r0, pc}

0000d9a0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d9a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d9a2:	2b00      	cmp	r3, #0
    d9a4:	db08      	blt.n	d9b8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d9a6:	2201      	movs	r2, #1
    d9a8:	f000 001f 	and.w	r0, r0, #31
    d9ac:	fa02 f000 	lsl.w	r0, r2, r0
    d9b0:	4a02      	ldr	r2, [pc, #8]	; (d9bc <arch_irq_enable+0x1c>)
    d9b2:	095b      	lsrs	r3, r3, #5
    d9b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d9b8:	4770      	bx	lr
    d9ba:	bf00      	nop
    d9bc:	e000e100 	.word	0xe000e100

0000d9c0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d9c0:	4b05      	ldr	r3, [pc, #20]	; (d9d8 <arch_irq_is_enabled+0x18>)
    d9c2:	0942      	lsrs	r2, r0, #5
    d9c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d9c8:	2301      	movs	r3, #1
    d9ca:	f000 001f 	and.w	r0, r0, #31
    d9ce:	fa03 f000 	lsl.w	r0, r3, r0
}
    d9d2:	4010      	ands	r0, r2
    d9d4:	4770      	bx	lr
    d9d6:	bf00      	nop
    d9d8:	e000e100 	.word	0xe000e100

0000d9dc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d9dc:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    d9de:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d9e0:	2c07      	cmp	r4, #7
{
    d9e2:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d9e4:	d908      	bls.n	d9f8 <z_arm_irq_priority_set+0x1c>
    d9e6:	490d      	ldr	r1, [pc, #52]	; (da1c <z_arm_irq_priority_set+0x40>)
    d9e8:	480d      	ldr	r0, [pc, #52]	; (da20 <z_arm_irq_priority_set+0x44>)
    d9ea:	225c      	movs	r2, #92	; 0x5c
    d9ec:	f00f f890 	bl	1cb10 <printk>
    d9f0:	215c      	movs	r1, #92	; 0x5c
    d9f2:	480a      	ldr	r0, [pc, #40]	; (da1c <z_arm_irq_priority_set+0x40>)
    d9f4:	f00f fb32 	bl	1d05c <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d9f8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d9fa:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9fc:	bfac      	ite	ge
    d9fe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da02:	4b08      	ldrlt	r3, [pc, #32]	; (da24 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da04:	ea4f 1444 	mov.w	r4, r4, lsl #5
    da08:	b2e4      	uxtb	r4, r4
    da0a:	bfab      	itete	ge
    da0c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da10:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da14:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da18:	555c      	strblt	r4, [r3, r5]
}
    da1a:	bd38      	pop	{r3, r4, r5, pc}
    da1c:	00023acb 	.word	0x00023acb
    da20:	00022f17 	.word	0x00022f17
    da24:	e000ed14 	.word	0xe000ed14

0000da28 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    da28:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    da2c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    da2e:	490b      	ldr	r1, [pc, #44]	; (da5c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    da30:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    da34:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    da36:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    da3a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    da3e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    da40:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    da44:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    da48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    da4c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    da50:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    da52:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    da54:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    da56:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    da5a:	4770      	bx	lr
    da5c:	0001cbed 	.word	0x0001cbed

0000da60 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    da60:	4604      	mov	r4, r0
    da62:	b508      	push	{r3, lr}
    da64:	460e      	mov	r6, r1
    da66:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    da68:	f000 faf6 	bl	e058 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    da6c:	4b08      	ldr	r3, [pc, #32]	; (da90 <arch_switch_to_main_thread+0x30>)
    da6e:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    da70:	6f63      	ldr	r3, [r4, #116]	; 0x74
    da72:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    da76:	4628      	mov	r0, r5
    da78:	f386 8809 	msr	PSP, r6
    da7c:	2100      	movs	r1, #0
    da7e:	b663      	cpsie	if
    da80:	f381 8811 	msr	BASEPRI, r1
    da84:	f3bf 8f6f 	isb	sy
    da88:	2200      	movs	r2, #0
    da8a:	2300      	movs	r3, #0
    da8c:	f00f f8ae 	bl	1cbec <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    da90:	20009fc4 	.word	0x20009fc4

0000da94 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    da94:	4901      	ldr	r1, [pc, #4]	; (da9c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    da96:	2210      	movs	r2, #16
	str	r2, [r1]
    da98:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    da9a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    da9c:	e000ed10 	.word	0xe000ed10

0000daa0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    daa0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    daa2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    daa4:	f380 8811 	msr	BASEPRI, r0
	isb
    daa8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    daac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dab0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dab2:	b662      	cpsie	i
	isb
    dab4:	f3bf 8f6f 	isb	sy

	bx	lr
    dab8:	4770      	bx	lr
    daba:	bf00      	nop

0000dabc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    dabc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    dabe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    dac0:	f381 8811 	msr	BASEPRI, r1

	wfe
    dac4:	bf20      	wfe

	msr	BASEPRI, r0
    dac6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    daca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    dacc:	4770      	bx	lr
    dace:	bf00      	nop

0000dad0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dad2:	4605      	mov	r5, r0

	if (esf != NULL) {
    dad4:	460c      	mov	r4, r1
    dad6:	b1c9      	cbz	r1, db0c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dad8:	688b      	ldr	r3, [r1, #8]
    dada:	4810      	ldr	r0, [pc, #64]	; (db1c <z_arm_fatal_error+0x4c>)
    dadc:	9300      	str	r3, [sp, #0]
    dade:	e9d1 2300 	ldrd	r2, r3, [r1]
    dae2:	2145      	movs	r1, #69	; 0x45
    dae4:	f00f f814 	bl	1cb10 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dae8:	6963      	ldr	r3, [r4, #20]
    daea:	2145      	movs	r1, #69	; 0x45
    daec:	9300      	str	r3, [sp, #0]
    daee:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    daf2:	480b      	ldr	r0, [pc, #44]	; (db20 <z_arm_fatal_error+0x50>)
    daf4:	f00f f80c 	bl	1cb10 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    daf8:	2145      	movs	r1, #69	; 0x45
    dafa:	69e2      	ldr	r2, [r4, #28]
    dafc:	4809      	ldr	r0, [pc, #36]	; (db24 <z_arm_fatal_error+0x54>)
    dafe:	f00f f807 	bl	1cb10 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    db02:	2145      	movs	r1, #69	; 0x45
    db04:	69a2      	ldr	r2, [r4, #24]
    db06:	4808      	ldr	r0, [pc, #32]	; (db28 <z_arm_fatal_error+0x58>)
    db08:	f00f f802 	bl	1cb10 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    db0c:	4621      	mov	r1, r4
    db0e:	4628      	mov	r0, r5
}
    db10:	b003      	add	sp, #12
    db12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    db16:	f00c b891 	b.w	19c3c <z_fatal_error>
    db1a:	bf00      	nop
    db1c:	00023b01 	.word	0x00023b01
    db20:	00023b35 	.word	0x00023b35
    db24:	00023b69 	.word	0x00023b69
    db28:	00023b7d 	.word	0x00023b7d

0000db2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    db2c:	bf30      	wfi
    b z_SysNmiOnReset
    db2e:	f7ff bffd 	b.w	db2c <z_SysNmiOnReset>
    db32:	bf00      	nop

0000db34 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db34:	4a0e      	ldr	r2, [pc, #56]	; (db70 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    db36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db38:	4b0e      	ldr	r3, [pc, #56]	; (db74 <z_arm_prep_c+0x40>)
    db3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    db3e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    db40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    db48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    db4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    db50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    db54:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    db58:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    db5c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    db60:	f00c f8f8 	bl	19d54 <z_bss_zero>
	z_data_copy();
    db64:	f00e f92e 	bl	1bdc4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    db68:	f000 fa48 	bl	dffc <z_arm_interrupt_init>
	z_cstart();
    db6c:	f00c f916 	bl	19d9c <z_cstart>
    db70:	00008000 	.word	0x00008000
    db74:	e000ed00 	.word	0xe000ed00

0000db78 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    db78:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    db7a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    db7c:	4a0b      	ldr	r2, [pc, #44]	; (dbac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    db7e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    db80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    db82:	bf1e      	ittt	ne
	movne	r1, #0
    db84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    db86:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    db88:	f013 fca0 	blne	214cc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    db8c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    db8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    db92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    db96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    db9a:	4905      	ldr	r1, [pc, #20]	; (dbb0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    db9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    db9e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    dba0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dba2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dba6:	4903      	ldr	r1, [pc, #12]	; (dbb4 <_isr_wrapper+0x3c>)
	bx r1
    dba8:	4708      	bx	r1
    dbaa:	0000      	.short	0x0000
	ldr r2, =_kernel
    dbac:	20009fc4 	.word	0x20009fc4
	ldr r1, =_sw_isr_table
    dbb0:	000218d4 	.word	0x000218d4
	ldr r1, =z_arm_int_exit
    dbb4:	0000dfbd 	.word	0x0000dfbd

0000dbb8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dbb8:	f00f fa6f 	bl	1d09a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dbbc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dbbe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    dbc2:	4808      	ldr	r0, [pc, #32]	; (dbe4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    dbc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dbc8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dbca:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dbce:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dbd2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dbd4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dbd6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dbda:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dbde:	f7ff ffa9 	bl	db34 <z_arm_prep_c>
    dbe2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    dbe4:	2000d578 	.word	0x2000d578

0000dbe8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    dbe8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    dbec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    dbf0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    dbf2:	4672      	mov	r2, lr
	bl z_arm_fault
    dbf4:	f000 f91a 	bl	de2c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    dbf8:	bd01      	pop	{r0, pc}
    dbfa:	bf00      	nop

0000dbfc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dbfc:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dbfe:	4c21      	ldr	r4, [pc, #132]	; (dc84 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc00:	2145      	movs	r1, #69	; 0x45
    dc02:	4821      	ldr	r0, [pc, #132]	; (dc88 <usage_fault.constprop.0+0x8c>)
    dc04:	f00e ff84 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc0a:	019d      	lsls	r5, r3, #6
    dc0c:	d503      	bpl.n	dc16 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    dc0e:	2145      	movs	r1, #69	; 0x45
    dc10:	481e      	ldr	r0, [pc, #120]	; (dc8c <usage_fault.constprop.0+0x90>)
    dc12:	f00e ff7d 	bl	1cb10 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dc16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc18:	01dc      	lsls	r4, r3, #7
    dc1a:	d503      	bpl.n	dc24 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    dc1c:	2145      	movs	r1, #69	; 0x45
    dc1e:	481c      	ldr	r0, [pc, #112]	; (dc90 <usage_fault.constprop.0+0x94>)
    dc20:	f00e ff76 	bl	1cb10 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dc24:	4d17      	ldr	r5, [pc, #92]	; (dc84 <usage_fault.constprop.0+0x88>)
    dc26:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dc28:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dc2c:	d004      	beq.n	dc38 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dc2e:	2145      	movs	r1, #69	; 0x45
    dc30:	4818      	ldr	r0, [pc, #96]	; (dc94 <usage_fault.constprop.0+0x98>)
    dc32:	f00e ff6d 	bl	1cb10 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dc36:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dc38:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc3a:	0318      	lsls	r0, r3, #12
    dc3c:	d503      	bpl.n	dc46 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    dc3e:	2145      	movs	r1, #69	; 0x45
    dc40:	4815      	ldr	r0, [pc, #84]	; (dc98 <usage_fault.constprop.0+0x9c>)
    dc42:	f00e ff65 	bl	1cb10 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dc46:	4d0f      	ldr	r5, [pc, #60]	; (dc84 <usage_fault.constprop.0+0x88>)
    dc48:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc4a:	0359      	lsls	r1, r3, #13
    dc4c:	d503      	bpl.n	dc56 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dc4e:	2145      	movs	r1, #69	; 0x45
    dc50:	4812      	ldr	r0, [pc, #72]	; (dc9c <usage_fault.constprop.0+0xa0>)
    dc52:	f00e ff5d 	bl	1cb10 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dc56:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc58:	039a      	lsls	r2, r3, #14
    dc5a:	d503      	bpl.n	dc64 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dc5c:	2145      	movs	r1, #69	; 0x45
    dc5e:	4810      	ldr	r0, [pc, #64]	; (dca0 <usage_fault.constprop.0+0xa4>)
    dc60:	f00e ff56 	bl	1cb10 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dc64:	4d07      	ldr	r5, [pc, #28]	; (dc84 <usage_fault.constprop.0+0x88>)
    dc66:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc68:	03db      	lsls	r3, r3, #15
    dc6a:	d503      	bpl.n	dc74 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dc6c:	2145      	movs	r1, #69	; 0x45
    dc6e:	480d      	ldr	r0, [pc, #52]	; (dca4 <usage_fault.constprop.0+0xa8>)
    dc70:	f00e ff4e 	bl	1cb10 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc74:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    dc76:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc78:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dc7c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dc80:	62ab      	str	r3, [r5, #40]	; 0x28
}
    dc82:	bd38      	pop	{r3, r4, r5, pc}
    dc84:	e000ed00 	.word	0xe000ed00
    dc88:	00023bb0 	.word	0x00023bb0
    dc8c:	00023bcd 	.word	0x00023bcd
    dc90:	00023be5 	.word	0x00023be5
    dc94:	00023c04 	.word	0x00023c04
    dc98:	00023c33 	.word	0x00023c33
    dc9c:	00023c56 	.word	0x00023c56
    dca0:	00023c80 	.word	0x00023c80
    dca4:	00023c9f 	.word	0x00023c9f

0000dca8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dca8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dcaa:	4c23      	ldr	r4, [pc, #140]	; (dd38 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dcac:	4606      	mov	r6, r0
    dcae:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dcb0:	4822      	ldr	r0, [pc, #136]	; (dd3c <bus_fault.constprop.0+0x94>)
    dcb2:	2145      	movs	r1, #69	; 0x45
    dcb4:	f00e ff2c 	bl	1cb10 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dcb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcba:	04d9      	lsls	r1, r3, #19
    dcbc:	d503      	bpl.n	dcc6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    dcbe:	2145      	movs	r1, #69	; 0x45
    dcc0:	481f      	ldr	r0, [pc, #124]	; (dd40 <bus_fault.constprop.0+0x98>)
    dcc2:	f00e ff25 	bl	1cb10 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dcc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcc8:	051a      	lsls	r2, r3, #20
    dcca:	d503      	bpl.n	dcd4 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dccc:	2145      	movs	r1, #69	; 0x45
    dcce:	481d      	ldr	r0, [pc, #116]	; (dd44 <bus_fault.constprop.0+0x9c>)
    dcd0:	f00e ff1e 	bl	1cb10 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dcd4:	4c18      	ldr	r4, [pc, #96]	; (dd38 <bus_fault.constprop.0+0x90>)
    dcd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcd8:	059b      	lsls	r3, r3, #22
    dcda:	d510      	bpl.n	dcfe <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    dcdc:	481a      	ldr	r0, [pc, #104]	; (dd48 <bus_fault.constprop.0+0xa0>)
    dcde:	2145      	movs	r1, #69	; 0x45
    dce0:	f00e ff16 	bl	1cb10 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    dce4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dce8:	0418      	lsls	r0, r3, #16
    dcea:	d508      	bpl.n	dcfe <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dcec:	2145      	movs	r1, #69	; 0x45
    dcee:	4817      	ldr	r0, [pc, #92]	; (dd4c <bus_fault.constprop.0+0xa4>)
    dcf0:	f00e ff0e 	bl	1cb10 <printk>
			if (from_hard_fault) {
    dcf4:	b11e      	cbz	r6, dcfe <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dcf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dcfc:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dcfe:	4c0e      	ldr	r4, [pc, #56]	; (dd38 <bus_fault.constprop.0+0x90>)
    dd00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd02:	0559      	lsls	r1, r3, #21
    dd04:	d503      	bpl.n	dd0e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    dd06:	2145      	movs	r1, #69	; 0x45
    dd08:	4811      	ldr	r0, [pc, #68]	; (dd50 <bus_fault.constprop.0+0xa8>)
    dd0a:	f00e ff01 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    dd0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd10:	05da      	lsls	r2, r3, #23
    dd12:	d50b      	bpl.n	dd2c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    dd14:	2145      	movs	r1, #69	; 0x45
    dd16:	480f      	ldr	r0, [pc, #60]	; (dd54 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd18:	f00e fefa 	bl	1cb10 <printk>
	*recoverable = memory_fault_recoverable(esf);
    dd1c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dd1e:	4a06      	ldr	r2, [pc, #24]	; (dd38 <bus_fault.constprop.0+0x90>)
    dd20:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dd22:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dd26:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dd28:	7028      	strb	r0, [r5, #0]
}
    dd2a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dd2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd2e:	049b      	lsls	r3, r3, #18
    dd30:	d5f4      	bpl.n	dd1c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd32:	2145      	movs	r1, #69	; 0x45
    dd34:	4808      	ldr	r0, [pc, #32]	; (dd58 <bus_fault.constprop.0+0xb0>)
    dd36:	e7ef      	b.n	dd18 <bus_fault.constprop.0+0x70>
    dd38:	e000ed00 	.word	0xe000ed00
    dd3c:	00023ccf 	.word	0x00023ccf
    dd40:	00023cea 	.word	0x00023cea
    dd44:	00023d00 	.word	0x00023d00
    dd48:	00023d18 	.word	0x00023d18
    dd4c:	00023d36 	.word	0x00023d36
    dd50:	00023d50 	.word	0x00023d50
    dd54:	00023d70 	.word	0x00023d70
    dd58:	00023d8d 	.word	0x00023d8d

0000dd5c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd5c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd5e:	4c29      	ldr	r4, [pc, #164]	; (de04 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd60:	4606      	mov	r6, r0
    dd62:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd64:	4828      	ldr	r0, [pc, #160]	; (de08 <mem_manage_fault.constprop.0+0xac>)
    dd66:	2145      	movs	r1, #69	; 0x45
    dd68:	f00e fed2 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd6e:	06d8      	lsls	r0, r3, #27
    dd70:	d503      	bpl.n	dd7a <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dd72:	2145      	movs	r1, #69	; 0x45
    dd74:	4825      	ldr	r0, [pc, #148]	; (de0c <mem_manage_fault.constprop.0+0xb0>)
    dd76:	f00e fecb 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dd7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd7c:	0719      	lsls	r1, r3, #28
    dd7e:	d503      	bpl.n	dd88 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dd80:	2145      	movs	r1, #69	; 0x45
    dd82:	4823      	ldr	r0, [pc, #140]	; (de10 <mem_manage_fault.constprop.0+0xb4>)
    dd84:	f00e fec4 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dd88:	4c1e      	ldr	r4, [pc, #120]	; (de04 <mem_manage_fault.constprop.0+0xa8>)
    dd8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd8c:	079a      	lsls	r2, r3, #30
    dd8e:	d510      	bpl.n	ddb2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dd90:	2145      	movs	r1, #69	; 0x45
    dd92:	4820      	ldr	r0, [pc, #128]	; (de14 <mem_manage_fault.constprop.0+0xb8>)
    dd94:	f00e febc 	bl	1cb10 <printk>
		uint32_t temp = SCB->MMFAR;
    dd98:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dd9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd9c:	061b      	lsls	r3, r3, #24
    dd9e:	d508      	bpl.n	ddb2 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dda0:	2145      	movs	r1, #69	; 0x45
    dda2:	481d      	ldr	r0, [pc, #116]	; (de18 <mem_manage_fault.constprop.0+0xbc>)
    dda4:	f00e feb4 	bl	1cb10 <printk>
			if (from_hard_fault) {
    dda8:	b11e      	cbz	r6, ddb2 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ddaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ddb0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ddb2:	4c14      	ldr	r4, [pc, #80]	; (de04 <mem_manage_fault.constprop.0+0xa8>)
    ddb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddb6:	07d8      	lsls	r0, r3, #31
    ddb8:	d503      	bpl.n	ddc2 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    ddba:	2145      	movs	r1, #69	; 0x45
    ddbc:	4817      	ldr	r0, [pc, #92]	; (de1c <mem_manage_fault.constprop.0+0xc0>)
    ddbe:	f00e fea7 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ddc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddc4:	0699      	lsls	r1, r3, #26
    ddc6:	d503      	bpl.n	ddd0 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    ddc8:	2145      	movs	r1, #69	; 0x45
    ddca:	4815      	ldr	r0, [pc, #84]	; (de20 <mem_manage_fault.constprop.0+0xc4>)
    ddcc:	f00e fea0 	bl	1cb10 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ddd0:	4b0c      	ldr	r3, [pc, #48]	; (de04 <mem_manage_fault.constprop.0+0xa8>)
    ddd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ddd4:	06d2      	lsls	r2, r2, #27
    ddd6:	d402      	bmi.n	ddde <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    ddd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ddda:	079b      	lsls	r3, r3, #30
    dddc:	d50a      	bpl.n	ddf4 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    ddde:	4911      	ldr	r1, [pc, #68]	; (de24 <mem_manage_fault.constprop.0+0xc8>)
    dde0:	4811      	ldr	r0, [pc, #68]	; (de28 <mem_manage_fault.constprop.0+0xcc>)
    dde2:	f240 1247 	movw	r2, #327	; 0x147
    dde6:	f00e fe93 	bl	1cb10 <printk>
    ddea:	f240 1147 	movw	r1, #327	; 0x147
    ddee:	480d      	ldr	r0, [pc, #52]	; (de24 <mem_manage_fault.constprop.0+0xc8>)
    ddf0:	f00f f934 	bl	1d05c <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    ddf4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ddf6:	4a03      	ldr	r2, [pc, #12]	; (de04 <mem_manage_fault.constprop.0+0xa8>)
    ddf8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ddfa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    ddfe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    de00:	7028      	strb	r0, [r5, #0]
}
    de02:	bd70      	pop	{r4, r5, r6, pc}
    de04:	e000ed00 	.word	0xe000ed00
    de08:	00023dc1 	.word	0x00023dc1
    de0c:	00023ddc 	.word	0x00023ddc
    de10:	00023d00 	.word	0x00023d00
    de14:	00023e14 	.word	0x00023e14
    de18:	00023e31 	.word	0x00023e31
    de1c:	00023e4c 	.word	0x00023e4c
    de20:	00023d8d 	.word	0x00023d8d
    de24:	00023e70 	.word	0x00023e70
    de28:	00022f17 	.word	0x00022f17

0000de2c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    de2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de30:	4b51      	ldr	r3, [pc, #324]	; (df78 <z_arm_fault+0x14c>)
{
    de32:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de34:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    de38:	4689      	mov	r9, r1
    de3a:	4614      	mov	r4, r2
    de3c:	2600      	movs	r6, #0
    de3e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de40:	f3c8 0708 	ubfx	r7, r8, #0, #9
    de44:	f386 8811 	msr	BASEPRI, r6
    de48:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    de4c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    de50:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    de54:	d111      	bne.n	de7a <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    de56:	07d0      	lsls	r0, r2, #31
    de58:	d40f      	bmi.n	de7a <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    de5a:	0651      	lsls	r1, r2, #25
    de5c:	d403      	bmi.n	de66 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    de5e:	0722      	lsls	r2, r4, #28
    de60:	d408      	bmi.n	de74 <z_arm_fault+0x48>
			*nested_exc = true;
    de62:	2601      	movs	r6, #1
    de64:	e008      	b.n	de78 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    de66:	2145      	movs	r1, #69	; 0x45
    de68:	4844      	ldr	r0, [pc, #272]	; (df7c <z_arm_fault+0x150>)
    de6a:	f00e fe51 	bl	1cb10 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    de6e:	f014 0404 	ands.w	r4, r4, #4
    de72:	d000      	beq.n	de76 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    de74:	464d      	mov	r5, r9
	*nested_exc = false;
    de76:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    de78:	b95d      	cbnz	r5, de92 <z_arm_fault+0x66>
    de7a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    de7e:	4940      	ldr	r1, [pc, #256]	; (df80 <z_arm_fault+0x154>)
    de80:	4840      	ldr	r0, [pc, #256]	; (df84 <z_arm_fault+0x158>)
    de82:	f00e fe45 	bl	1cb10 <printk>
    de86:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    de8a:	483d      	ldr	r0, [pc, #244]	; (df80 <z_arm_fault+0x154>)
    de8c:	f00f f8e6 	bl	1d05c <assert_post_action>
    de90:	2500      	movs	r5, #0
	*recoverable = false;
    de92:	2400      	movs	r4, #0
    de94:	1efb      	subs	r3, r7, #3
    de96:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    de9a:	2b09      	cmp	r3, #9
    de9c:	d85a      	bhi.n	df54 <z_arm_fault+0x128>
    de9e:	e8df f003 	tbb	[pc, r3]
    dea2:	4e05      	.short	0x4e05
    dea4:	59593252 	.word	0x59593252
    dea8:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    deac:	4f32      	ldr	r7, [pc, #200]	; (df78 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    deae:	2145      	movs	r1, #69	; 0x45
    deb0:	4835      	ldr	r0, [pc, #212]	; (df88 <z_arm_fault+0x15c>)
    deb2:	f00e fe2d 	bl	1cb10 <printk>
	*recoverable = false;
    deb6:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    deba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    debc:	f014 0402 	ands.w	r4, r4, #2
    dec0:	d005      	beq.n	dece <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    dec2:	2145      	movs	r1, #69	; 0x45
    dec4:	4831      	ldr	r0, [pc, #196]	; (df8c <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    dec6:	f00e fe23 	bl	1cb10 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    deca:	2400      	movs	r4, #0
}
    decc:	e01e      	b.n	df0c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ded0:	005b      	lsls	r3, r3, #1
    ded2:	d51b      	bpl.n	df0c <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    ded4:	2145      	movs	r1, #69	; 0x45
    ded6:	482e      	ldr	r0, [pc, #184]	; (df90 <z_arm_fault+0x164>)
    ded8:	f00e fe1a 	bl	1cb10 <printk>
		if (SCB_MMFSR != 0) {
    dedc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dee0:	b12b      	cbz	r3, deee <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    dee2:	2001      	movs	r0, #1
    dee4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dee8:	f7ff ff38 	bl	dd5c <mem_manage_fault.constprop.0>
    deec:	e00d      	b.n	df0a <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    deee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    def2:	b12b      	cbz	r3, df00 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    def4:	2001      	movs	r0, #1
    def6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    defa:	f7ff fed5 	bl	dca8 <bus_fault.constprop.0>
    defe:	e004      	b.n	df0a <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    df00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    df02:	b29b      	uxth	r3, r3
    df04:	b113      	cbz	r3, df0c <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    df06:	f7ff fe79 	bl	dbfc <usage_fault.constprop.0>
    df0a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    df0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df10:	b993      	cbnz	r3, df38 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    df12:	2220      	movs	r2, #32
    df14:	4629      	mov	r1, r5
    df16:	a802      	add	r0, sp, #8
    df18:	f010 fab2 	bl	1e480 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    df1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df1e:	b336      	cbz	r6, df6e <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    df20:	f3c3 0208 	ubfx	r2, r3, #0, #9
    df24:	b922      	cbnz	r2, df30 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    df26:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    df2a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    df2e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    df30:	4620      	mov	r0, r4
    df32:	a902      	add	r1, sp, #8
    df34:	f7ff fdcc 	bl	dad0 <z_arm_fatal_error>
}
    df38:	b00b      	add	sp, #44	; 0x2c
    df3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    df3e:	2000      	movs	r0, #0
    df40:	f10d 0107 	add.w	r1, sp, #7
    df44:	e7d0      	b.n	dee8 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    df46:	2000      	movs	r0, #0
    df48:	f10d 0107 	add.w	r1, sp, #7
    df4c:	e7d5      	b.n	defa <z_arm_fault+0xce>
	PR_FAULT_INFO(
    df4e:	2145      	movs	r1, #69	; 0x45
    df50:	4810      	ldr	r0, [pc, #64]	; (df94 <z_arm_fault+0x168>)
    df52:	e7b8      	b.n	dec6 <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    df54:	4910      	ldr	r1, [pc, #64]	; (df98 <z_arm_fault+0x16c>)
    df56:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    df5a:	4a10      	ldr	r2, [pc, #64]	; (df9c <z_arm_fault+0x170>)
    df5c:	4810      	ldr	r0, [pc, #64]	; (dfa0 <z_arm_fault+0x174>)
    df5e:	bf08      	it	eq
    df60:	460a      	moveq	r2, r1
    df62:	f1a7 0310 	sub.w	r3, r7, #16
    df66:	2145      	movs	r1, #69	; 0x45
    df68:	f00e fdd2 	bl	1cb10 <printk>
    df6c:	e7ad      	b.n	deca <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    df6e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    df72:	f023 0301 	bic.w	r3, r3, #1
    df76:	e7da      	b.n	df2e <z_arm_fault+0x102>
    df78:	e000ed00 	.word	0xe000ed00
    df7c:	00023ed8 	.word	0x00023ed8
    df80:	00023e70 	.word	0x00023e70
    df84:	00022f17 	.word	0x00022f17
    df88:	00023f00 	.word	0x00023f00
    df8c:	00023f1c 	.word	0x00023f1c
    df90:	00023f42 	.word	0x00023f42
    df94:	00023f66 	.word	0x00023f66
    df98:	00023eaa 	.word	0x00023eaa
    df9c:	00023ebf 	.word	0x00023ebf
    dfa0:	00023fa1 	.word	0x00023fa1

0000dfa4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    dfa4:	4b04      	ldr	r3, [pc, #16]	; (dfb8 <z_arm_fault_init+0x14>)
    dfa6:	695a      	ldr	r2, [r3, #20]
    dfa8:	f042 0210 	orr.w	r2, r2, #16
    dfac:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    dfae:	695a      	ldr	r2, [r3, #20]
    dfb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    dfb4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    dfb6:	4770      	bx	lr
    dfb8:	e000ed00 	.word	0xe000ed00

0000dfbc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    dfbc:	4b04      	ldr	r3, [pc, #16]	; (dfd0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    dfbe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    dfc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    dfc2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    dfc4:	d003      	beq.n	dfce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    dfc6:	4903      	ldr	r1, [pc, #12]	; (dfd4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dfc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    dfcc:	600a      	str	r2, [r1, #0]

0000dfce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    dfce:	4770      	bx	lr
	ldr r3, =_kernel
    dfd0:	20009fc4 	.word	0x20009fc4
	ldr r1, =_SCS_ICSR
    dfd4:	e000ed04 	.word	0xe000ed04

0000dfd8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    dfd8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    dfdc:	4905      	ldr	r1, [pc, #20]	; (dff4 <sys_arch_reboot+0x1c>)
    dfde:	4b06      	ldr	r3, [pc, #24]	; (dff8 <sys_arch_reboot+0x20>)
    dfe0:	68ca      	ldr	r2, [r1, #12]
    dfe2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    dfe6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    dfe8:	60cb      	str	r3, [r1, #12]
    dfea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    dfee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    dff0:	e7fd      	b.n	dfee <sys_arch_reboot+0x16>
    dff2:	bf00      	nop
    dff4:	e000ed00 	.word	0xe000ed00
    dff8:	05fa0004 	.word	0x05fa0004

0000dffc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    dffc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dffe:	2120      	movs	r1, #32
    e000:	4803      	ldr	r0, [pc, #12]	; (e010 <z_arm_interrupt_init+0x14>)
    e002:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e004:	3301      	adds	r3, #1
    e006:	2b45      	cmp	r3, #69	; 0x45
    e008:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e00c:	d1f9      	bne.n	e002 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e00e:	4770      	bx	lr
    e010:	e000e100 	.word	0xe000e100

0000e014 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e014:	b508      	push	{r3, lr}
	if (_current == thread) {
    e016:	4b0e      	ldr	r3, [pc, #56]	; (e050 <z_impl_k_thread_abort+0x3c>)
    e018:	689b      	ldr	r3, [r3, #8]
    e01a:	4283      	cmp	r3, r0
    e01c:	d107      	bne.n	e02e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e01e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e022:	b193      	cbz	r3, e04a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e024:	4a0b      	ldr	r2, [pc, #44]	; (e054 <z_impl_k_thread_abort+0x40>)
    e026:	6853      	ldr	r3, [r2, #4]
    e028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e02c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    e02e:	f00c ffb1 	bl	1af94 <z_thread_single_abort>
	__asm__ volatile(
    e032:	f04f 0320 	mov.w	r3, #32
    e036:	f3ef 8011 	mrs	r0, BASEPRI
    e03a:	f383 8811 	msr	BASEPRI, r3
    e03e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e046:	f013 ba91 	b.w	2156c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    e04a:	f00d fdb1 	bl	1bbb0 <z_self_abort>
    e04e:	bf00      	nop
    e050:	20009fc4 	.word	0x20009fc4
    e054:	e000ed00 	.word	0xe000ed00

0000e058 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e05a:	4c09      	ldr	r4, [pc, #36]	; (e080 <z_arm_configure_static_mpu_regions+0x28>)
    e05c:	4a09      	ldr	r2, [pc, #36]	; (e084 <z_arm_configure_static_mpu_regions+0x2c>)
    e05e:	4623      	mov	r3, r4
    e060:	2101      	movs	r1, #1
    e062:	4809      	ldr	r0, [pc, #36]	; (e088 <z_arm_configure_static_mpu_regions+0x30>)
    e064:	f000 f976 	bl	e354 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e068:	2300      	movs	r3, #0
    e06a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e06c:	4b07      	ldr	r3, [pc, #28]	; (e08c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e06e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e070:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e072:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e074:	9301      	str	r3, [sp, #4]
    e076:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e078:	f000 f988 	bl	e38c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e07c:	b004      	add	sp, #16
    e07e:	bd10      	pop	{r4, pc}
    e080:	20070000 	.word	0x20070000
    e084:	20008000 	.word	0x20008000
    e088:	00022160 	.word	0x00022160
    e08c:	200086d0 	.word	0x200086d0

0000e090 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e090:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e092:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e094:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e096:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e09a:	f004 031f 	and.w	r3, r4, #31
    e09e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e0a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e0a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e0a4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e0a8:	4905      	ldr	r1, [pc, #20]	; (e0c0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e0aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e0ae:	f043 0301 	orr.w	r3, r3, #1
    e0b2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e0b6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e0ba:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e0be:	bd10      	pop	{r4, pc}
    e0c0:	e000ed00 	.word	0xe000ed00

0000e0c4 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e0c4:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e0c6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e0c8:	680c      	ldr	r4, [r1, #0]
{
    e0ca:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e0cc:	890a      	ldrh	r2, [r1, #8]
    e0ce:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e0d0:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e0d2:	3b01      	subs	r3, #1
    e0d4:	f024 041f 	bic.w	r4, r4, #31
    e0d8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e0da:	f002 021f 	and.w	r2, r2, #31
    e0de:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e0e2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e0e6:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e0e8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e0ea:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e0ee:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e0f0:	d909      	bls.n	e106 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e0f2:	4602      	mov	r2, r0
    e0f4:	2145      	movs	r1, #69	; 0x45
    e0f6:	4806      	ldr	r0, [pc, #24]	; (e110 <mpu_configure_region+0x4c>)
    e0f8:	f00e fd0a 	bl	1cb10 <printk>
    e0fc:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e100:	4620      	mov	r0, r4
    e102:	b005      	add	sp, #20
    e104:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e106:	4669      	mov	r1, sp
    e108:	f7ff ffc2 	bl	e090 <region_init>
	return region_allocate_and_init(index,
    e10c:	e7f8      	b.n	e100 <mpu_configure_region+0x3c>
    e10e:	bf00      	nop
    e110:	00023fbd 	.word	0x00023fbd

0000e114 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e118:	4689      	mov	r9, r1
    e11a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e11c:	4606      	mov	r6, r0
    e11e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e122:	4d59      	ldr	r5, [pc, #356]	; (e288 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e124:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e126:	45c8      	cmp	r8, r9
    e128:	da27      	bge.n	e17a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e12a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e12e:	f1ba 0f00 	cmp.w	sl, #0
    e132:	d045      	beq.n	e1c0 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    e134:	f1ba 0f1f 	cmp.w	sl, #31
    e138:	d918      	bls.n	e16c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e13a:	f01a 0f1f 	tst.w	sl, #31
    e13e:	d115      	bne.n	e16c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e140:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e144:	f01b 0f1f 	tst.w	fp, #31
    e148:	d110      	bne.n	e16c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e14a:	4658      	mov	r0, fp
    e14c:	f010 f8a1 	bl	1e292 <arm_cmse_mpu_region_get>
    e150:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e152:	eb0a 000b 	add.w	r0, sl, fp
    e156:	3801      	subs	r0, #1
    e158:	f010 f89b 	bl	1e292 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e15c:	4287      	cmp	r7, r0
    e15e:	d010      	beq.n	e182 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    e160:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e164:	463a      	mov	r2, r7
    e166:	2145      	movs	r1, #69	; 0x45
    e168:	4848      	ldr	r0, [pc, #288]	; (e28c <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e16a:	e002      	b.n	e172 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e16c:	4642      	mov	r2, r8
    e16e:	2145      	movs	r1, #69	; 0x45
    e170:	4847      	ldr	r0, [pc, #284]	; (e290 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e172:	f00e fccd 	bl	1cb10 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e176:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e17a:	4620      	mov	r0, r4
    e17c:	b005      	add	sp, #20
    e17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e182:	f117 0f16 	cmn.w	r7, #22
    e186:	d0ed      	beq.n	e164 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e188:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e18a:	42bb      	cmp	r3, r7
    e18c:	dbea      	blt.n	e164 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e18e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e192:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e196:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e19a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e19e:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1a2:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e1a6:	e9d6 3200 	ldrd	r3, r2, [r6]
    e1aa:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e1ac:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e1ae:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e1b2:	d11d      	bne.n	e1f0 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e1b4:	45d3      	cmp	fp, sl
    e1b6:	d107      	bne.n	e1c8 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e1b8:	4631      	mov	r1, r6
    e1ba:	b2f8      	uxtb	r0, r7
    e1bc:	f7ff ff82 	bl	e0c4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e1c0:	f108 0801 	add.w	r8, r8, #1
    e1c4:	360c      	adds	r6, #12
    e1c6:	e7ae      	b.n	e126 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e1c8:	4631      	mov	r1, r6
	MPU->RNR = index;
    e1ca:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e1ce:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e1d2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e1d6:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e1da:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e1dc:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e1e0:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e1e2:	f7ff ff6f 	bl	e0c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e1e6:	f110 0f16 	cmn.w	r0, #22
    e1ea:	d0c4      	beq.n	e176 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e1ec:	1c44      	adds	r4, r0, #1
    e1ee:	e7e7      	b.n	e1c0 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e1f0:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e1f2:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e1f4:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e1f6:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e1fa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e1fe:	d108      	bne.n	e212 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e200:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e204:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e206:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e20a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e20c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e210:	e7e7      	b.n	e1e2 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e212:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e216:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e21a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e21c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e220:	4631      	mov	r1, r6
    e222:	f7ff ff4f 	bl	e0c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e226:	f110 0f16 	cmn.w	r0, #22
    e22a:	d0a4      	beq.n	e176 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e22c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e230:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e234:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e238:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e23c:	f362 0304 	bfi	r3, r2, #0, #5
    e240:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e244:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e248:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e24c:	085b      	lsrs	r3, r3, #1
    e24e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e252:	e9d6 3100 	ldrd	r3, r1, [r6]
    e256:	440b      	add	r3, r1
    e258:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e25a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e25e:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e260:	445b      	add	r3, fp
    e262:	eba3 030a 	sub.w	r3, r3, sl
    e266:	b2c0      	uxtb	r0, r0
    e268:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e26c:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e26e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e272:	9303      	str	r3, [sp, #12]
    e274:	d903      	bls.n	e27e <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e276:	4602      	mov	r2, r0
    e278:	2145      	movs	r1, #69	; 0x45
    e27a:	4806      	ldr	r0, [pc, #24]	; (e294 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e27c:	e779      	b.n	e172 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e27e:	4669      	mov	r1, sp
    e280:	f7ff ff06 	bl	e090 <region_init>
    e284:	e7b2      	b.n	e1ec <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e286:	bf00      	nop
    e288:	e000ed00 	.word	0xe000ed00
    e28c:	00024010 	.word	0x00024010
    e290:	00023fe8 	.word	0x00023fe8
    e294:	00023fbd 	.word	0x00023fbd

0000e298 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e298:	2205      	movs	r2, #5
    e29a:	4b04      	ldr	r3, [pc, #16]	; (e2ac <arm_core_mpu_enable+0x14>)
    e29c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e2a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e2a4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e2a8:	4770      	bx	lr
    e2aa:	bf00      	nop
    e2ac:	e000ed00 	.word	0xe000ed00

0000e2b0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e2b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e2b4:	2200      	movs	r2, #0
    e2b6:	4b02      	ldr	r3, [pc, #8]	; (e2c0 <arm_core_mpu_disable+0x10>)
    e2b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e2bc:	4770      	bx	lr
    e2be:	bf00      	nop
    e2c0:	e000ed00 	.word	0xe000ed00

0000e2c4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e2c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e2c6:	4d1d      	ldr	r5, [pc, #116]	; (e33c <arm_mpu_init+0x78>)
    e2c8:	682c      	ldr	r4, [r5, #0]
    e2ca:	2c08      	cmp	r4, #8
    e2cc:	d90d      	bls.n	e2ea <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e2ce:	f240 123b 	movw	r2, #315	; 0x13b
    e2d2:	491b      	ldr	r1, [pc, #108]	; (e340 <arm_mpu_init+0x7c>)
    e2d4:	481b      	ldr	r0, [pc, #108]	; (e344 <arm_mpu_init+0x80>)
    e2d6:	f00e fc1b 	bl	1cb10 <printk>
    e2da:	4819      	ldr	r0, [pc, #100]	; (e340 <arm_mpu_init+0x7c>)
    e2dc:	f240 113b 	movw	r1, #315	; 0x13b
    e2e0:	f00e febc 	bl	1d05c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e2e4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e2e8:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e2ea:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e2ec:	f7ff ffe0 	bl	e2b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e2f0:	4b15      	ldr	r3, [pc, #84]	; (e348 <arm_mpu_init+0x84>)
    e2f2:	4a16      	ldr	r2, [pc, #88]	; (e34c <arm_mpu_init+0x88>)
    e2f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e2f8:	4284      	cmp	r4, r0
    e2fa:	d117      	bne.n	e32c <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e2fc:	4b14      	ldr	r3, [pc, #80]	; (e350 <arm_mpu_init+0x8c>)
    e2fe:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e300:	f7ff ffca 	bl	e298 <arm_core_mpu_enable>
	__ASSERT(
    e304:	4b10      	ldr	r3, [pc, #64]	; (e348 <arm_mpu_init+0x84>)
    e306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e30a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e30e:	2b08      	cmp	r3, #8
    e310:	d00a      	beq.n	e328 <arm_mpu_init+0x64>
    e312:	490b      	ldr	r1, [pc, #44]	; (e340 <arm_mpu_init+0x7c>)
    e314:	480b      	ldr	r0, [pc, #44]	; (e344 <arm_mpu_init+0x80>)
    e316:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e31a:	f00e fbf9 	bl	1cb10 <printk>
    e31e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e322:	4807      	ldr	r0, [pc, #28]	; (e340 <arm_mpu_init+0x7c>)
    e324:	f00e fe9a 	bl	1d05c <assert_post_action>
	return 0;
    e328:	2000      	movs	r0, #0
    e32a:	e7dd      	b.n	e2e8 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e32c:	6869      	ldr	r1, [r5, #4]
    e32e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e332:	f7ff fead 	bl	e090 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e336:	3001      	adds	r0, #1
    e338:	e7de      	b.n	e2f8 <arm_mpu_init+0x34>
    e33a:	bf00      	nop
    e33c:	0002216c 	.word	0x0002216c
    e340:	00024038 	.word	0x00024038
    e344:	00022f17 	.word	0x00022f17
    e348:	e000ed00 	.word	0xe000ed00
    e34c:	0044ffaa 	.word	0x0044ffaa
    e350:	2000b6b7 	.word	0x2000b6b7

0000e354 <arm_core_mpu_configure_static_mpu_regions>:
{
    e354:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e356:	4c0a      	ldr	r4, [pc, #40]	; (e380 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e358:	7822      	ldrb	r2, [r4, #0]
    e35a:	f7ff fedb 	bl	e114 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e35e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e360:	3016      	adds	r0, #22
    e362:	d10c      	bne.n	e37e <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e364:	4907      	ldr	r1, [pc, #28]	; (e384 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e366:	4808      	ldr	r0, [pc, #32]	; (e388 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e368:	f44f 7282 	mov.w	r2, #260	; 0x104
    e36c:	f00e fbd0 	bl	1cb10 <printk>
}
    e370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e374:	f44f 7182 	mov.w	r1, #260	; 0x104
    e378:	4802      	ldr	r0, [pc, #8]	; (e384 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e37a:	f00e be6f 	b.w	1d05c <assert_post_action>
}
    e37e:	bd10      	pop	{r4, pc}
    e380:	2000b6b7 	.word	0x2000b6b7
    e384:	00024038 	.word	0x00024038
    e388:	00022f17 	.word	0x00022f17

0000e38c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e390:	4d30      	ldr	r5, [pc, #192]	; (e454 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e392:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e394:	4606      	mov	r6, r0
    e396:	f04f 0800 	mov.w	r8, #0
    e39a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e39c:	4f2e      	ldr	r7, [pc, #184]	; (e458 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e39e:	45d0      	cmp	r8, sl
    e3a0:	db02      	blt.n	e3a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e3a2:	b003      	add	sp, #12
    e3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e3a8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e3ac:	f1b9 0f00 	cmp.w	r9, #0
    e3b0:	d04a      	beq.n	e448 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e3b2:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3b4:	4608      	mov	r0, r1
    e3b6:	9101      	str	r1, [sp, #4]
    e3b8:	f00f ff6b 	bl	1e292 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3bc:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3be:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3c0:	eb09 0001 	add.w	r0, r9, r1
    e3c4:	3801      	subs	r0, #1
    e3c6:	f00f ff64 	bl	1e292 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e3ca:	4284      	cmp	r4, r0
    e3cc:	f04f 0214 	mov.w	r2, #20
    e3d0:	4b22      	ldr	r3, [pc, #136]	; (e45c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e3d2:	d013      	beq.n	e3fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e3d4:	f06f 0315 	mvn.w	r3, #21
    e3d8:	fb02 f808 	mul.w	r8, r2, r8
    e3dc:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e3e0:	f44f 728a 	mov.w	r2, #276	; 0x114
    e3e4:	491e      	ldr	r1, [pc, #120]	; (e460 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e3e6:	481f      	ldr	r0, [pc, #124]	; (e464 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e3e8:	f00e fb92 	bl	1cb10 <printk>
    e3ec:	f44f 718a 	mov.w	r1, #276	; 0x114
    e3f0:	481b      	ldr	r0, [pc, #108]	; (e460 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e3f2:	b003      	add	sp, #12
    e3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e3f8:	f00e be30 	b.w	1d05c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e3fc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e400:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e402:	d0ed      	beq.n	e3e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e404:	7819      	ldrb	r1, [r3, #0]
    e406:	42a1      	cmp	r1, r4
    e408:	ddea      	ble.n	e3e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e40a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e40e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e412:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e416:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e41a:	f100 0108 	add.w	r1, r0, #8
    e41e:	7b00      	ldrb	r0, [r0, #12]
    e420:	f364 0004 	bfi	r0, r4, #0, #5
    e424:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e426:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e42a:	790c      	ldrb	r4, [r1, #4]
    e42c:	0840      	lsrs	r0, r0, #1
    e42e:	f360 1447 	bfi	r4, r0, #5, #3
    e432:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e434:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e438:	f021 011f 	bic.w	r1, r1, #31
    e43c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e43e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e442:	f021 011f 	bic.w	r1, r1, #31
    e446:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e448:	f108 0801 	add.w	r8, r8, #1
    e44c:	3514      	adds	r5, #20
    e44e:	360c      	adds	r6, #12
    e450:	e7a5      	b.n	e39e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e452:	bf00      	nop
    e454:	20009bdc 	.word	0x20009bdc
    e458:	e000ed00 	.word	0xe000ed00
    e45c:	2000b6b7 	.word	0x2000b6b7
    e460:	00024038 	.word	0x00024038
    e464:	00022f17 	.word	0x00022f17

0000e468 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e468:	4b01      	ldr	r3, [pc, #4]	; (e470 <__stdout_hook_install+0x8>)
    e46a:	6018      	str	r0, [r3, #0]
}
    e46c:	4770      	bx	lr
    e46e:	bf00      	nop
    e470:	200082b4 	.word	0x200082b4

0000e474 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e474:	2000      	movs	r0, #0
    e476:	4b02      	ldr	r3, [pc, #8]	; (e480 <remoteproc_mgr_boot+0xc>)
    e478:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e47c:	4770      	bx	lr
    e47e:	bf00      	nop
    e480:	40005000 	.word	0x40005000

0000e484 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e484:	4b0e      	ldr	r3, [pc, #56]	; (e4c0 <bt_hex_real+0x3c>)
    e486:	2940      	cmp	r1, #64	; 0x40
    e488:	bf28      	it	cs
    e48a:	2140      	movcs	r1, #64	; 0x40
{
    e48c:	b570      	push	{r4, r5, r6, lr}
    e48e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e490:	4c0c      	ldr	r4, [pc, #48]	; (e4c4 <bt_hex_real+0x40>)
    e492:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e494:	42b0      	cmp	r0, r6
    e496:	f103 0302 	add.w	r3, r3, #2
    e49a:	d104      	bne.n	e4a6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e49c:	2300      	movs	r3, #0
    e49e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e4a2:	4807      	ldr	r0, [pc, #28]	; (e4c0 <bt_hex_real+0x3c>)
    e4a4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e4a6:	7802      	ldrb	r2, [r0, #0]
    e4a8:	0912      	lsrs	r2, r2, #4
    e4aa:	5ca2      	ldrb	r2, [r4, r2]
    e4ac:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e4b0:	f810 2b01 	ldrb.w	r2, [r0], #1
    e4b4:	f002 020f 	and.w	r2, r2, #15
    e4b8:	5ca2      	ldrb	r2, [r4, r2]
    e4ba:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e4be:	e7e9      	b.n	e494 <bt_hex_real+0x10>
    e4c0:	2000b6d6 	.word	0x2000b6d6
    e4c4:	000240a1 	.word	0x000240a1

0000e4c8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e4c8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e4ca:	7803      	ldrb	r3, [r0, #0]
    e4cc:	b08b      	sub	sp, #44	; 0x2c
    e4ce:	4604      	mov	r4, r0
    e4d0:	ad07      	add	r5, sp, #28
    e4d2:	2b03      	cmp	r3, #3
    e4d4:	d821      	bhi.n	e51a <bt_addr_le_str_real+0x52>
    e4d6:	e8df f003 	tbb	[pc, r3]
    e4da:	1a02      	.short	0x1a02
    e4dc:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e4de:	4912      	ldr	r1, [pc, #72]	; (e528 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e4e0:	4628      	mov	r0, r5
    e4e2:	f00f ff73 	bl	1e3cc <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e4e6:	7863      	ldrb	r3, [r4, #1]
    e4e8:	211e      	movs	r1, #30
    e4ea:	9304      	str	r3, [sp, #16]
    e4ec:	78a3      	ldrb	r3, [r4, #2]
    e4ee:	4a0f      	ldr	r2, [pc, #60]	; (e52c <bt_addr_le_str_real+0x64>)
    e4f0:	9303      	str	r3, [sp, #12]
    e4f2:	78e3      	ldrb	r3, [r4, #3]
    e4f4:	9505      	str	r5, [sp, #20]
    e4f6:	9302      	str	r3, [sp, #8]
    e4f8:	7923      	ldrb	r3, [r4, #4]
    e4fa:	480d      	ldr	r0, [pc, #52]	; (e530 <bt_addr_le_str_real+0x68>)
    e4fc:	9301      	str	r3, [sp, #4]
    e4fe:	7963      	ldrb	r3, [r4, #5]
    e500:	9300      	str	r3, [sp, #0]
    e502:	79a3      	ldrb	r3, [r4, #6]
    e504:	f00e fb11 	bl	1cb2a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e508:	4809      	ldr	r0, [pc, #36]	; (e530 <bt_addr_le_str_real+0x68>)
    e50a:	b00b      	add	sp, #44	; 0x2c
    e50c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e50e:	4909      	ldr	r1, [pc, #36]	; (e534 <bt_addr_le_str_real+0x6c>)
    e510:	e7e6      	b.n	e4e0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e512:	4909      	ldr	r1, [pc, #36]	; (e538 <bt_addr_le_str_real+0x70>)
    e514:	e7e4      	b.n	e4e0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e516:	4909      	ldr	r1, [pc, #36]	; (e53c <bt_addr_le_str_real+0x74>)
    e518:	e7e2      	b.n	e4e0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e51a:	210a      	movs	r1, #10
    e51c:	4628      	mov	r0, r5
    e51e:	4a08      	ldr	r2, [pc, #32]	; (e540 <bt_addr_le_str_real+0x78>)
    e520:	f00e fb03 	bl	1cb2a <snprintk>
		break;
    e524:	e7df      	b.n	e4e6 <bt_addr_le_str_real+0x1e>
    e526:	bf00      	nop
    e528:	0002295b 	.word	0x0002295b
    e52c:	00022984 	.word	0x00022984
    e530:	2000b6b8 	.word	0x2000b6b8
    e534:	00022962 	.word	0x00022962
    e538:	00022969 	.word	0x00022969
    e53c:	00022973 	.word	0x00022973
    e540:	0002297d 	.word	0x0002297d

0000e544 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e544:	2149      	movs	r1, #73	; 0x49
{
    e546:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e548:	4809      	ldr	r0, [pc, #36]	; (e570 <save_id+0x2c>)
    e54a:	f00e fae1 	bl	1cb10 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e54e:	4909      	ldr	r1, [pc, #36]	; (e574 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e550:	4809      	ldr	r0, [pc, #36]	; (e578 <save_id+0x34>)
    e552:	79ca      	ldrb	r2, [r1, #7]
    e554:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e558:	f7fd fb30 	bl	bbbc <settings_save_one>
	if (err) {
    e55c:	4602      	mov	r2, r0
    e55e:	b128      	cbz	r0, e56c <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e564:	2145      	movs	r1, #69	; 0x45
    e566:	4805      	ldr	r0, [pc, #20]	; (e57c <save_id+0x38>)
    e568:	f00e bad2 	b.w	1cb10 <printk>
}
    e56c:	bd08      	pop	{r3, pc}
    e56e:	bf00      	nop
    e570:	000240b9 	.word	0x000240b9
    e574:	20008000 	.word	0x20008000
    e578:	000240c8 	.word	0x000240c8
    e57c:	000240ce 	.word	0x000240ce

0000e580 <set>:
{
    e580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e582:	4616      	mov	r6, r2
    e584:	461f      	mov	r7, r3
	if (!name) {
    e586:	4604      	mov	r4, r0
    e588:	b930      	cbnz	r0, e598 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e58a:	2145      	movs	r1, #69	; 0x45
    e58c:	4819      	ldr	r0, [pc, #100]	; (e5f4 <set+0x74>)
    e58e:	f00e fabf 	bl	1cb10 <printk>
	return -ENOENT;
    e592:	f06f 0401 	mvn.w	r4, #1
    e596:	e013      	b.n	e5c0 <set+0x40>
	len = settings_name_next(name, &next);
    e598:	a901      	add	r1, sp, #4
    e59a:	f00e ff73 	bl	1d484 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e59e:	4916      	ldr	r1, [pc, #88]	; (e5f8 <set+0x78>)
	len = settings_name_next(name, &next);
    e5a0:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e5a2:	4620      	mov	r0, r4
    e5a4:	f00f ff4a 	bl	1e43c <strncmp>
    e5a8:	4604      	mov	r4, r0
    e5aa:	2800      	cmp	r0, #0
    e5ac:	d1f1      	bne.n	e592 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e5ae:	4d13      	ldr	r5, [pc, #76]	; (e5fc <set+0x7c>)
    e5b0:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e5b4:	075b      	lsls	r3, r3, #29
    e5b6:	d506      	bpl.n	e5c6 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e5b8:	2157      	movs	r1, #87	; 0x57
    e5ba:	4811      	ldr	r0, [pc, #68]	; (e600 <set+0x80>)
    e5bc:	f00e faa8 	bl	1cb10 <printk>
}
    e5c0:	4620      	mov	r0, r4
    e5c2:	b003      	add	sp, #12
    e5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e5c6:	3d94      	subs	r5, #148	; 0x94
    e5c8:	2207      	movs	r2, #7
    e5ca:	4629      	mov	r1, r5
    e5cc:	4638      	mov	r0, r7
    e5ce:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e5d0:	2806      	cmp	r0, #6
    e5d2:	d80a      	bhi.n	e5ea <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e5d4:	2145      	movs	r1, #69	; 0x45
    e5d6:	480b      	ldr	r0, [pc, #44]	; (e604 <set+0x84>)
    e5d8:	f00e fa9a 	bl	1cb10 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e5dc:	2207      	movs	r2, #7
    e5de:	4621      	mov	r1, r4
    e5e0:	4628      	mov	r0, r5
    e5e2:	f00f ff78 	bl	1e4d6 <memset>
			bt_dev.id_count = 0U;
    e5e6:	71ec      	strb	r4, [r5, #7]
    e5e8:	e7ea      	b.n	e5c0 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e5ea:	2307      	movs	r3, #7
    e5ec:	fbb0 f0f3 	udiv	r0, r0, r3
    e5f0:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e5f2:	e7e5      	b.n	e5c0 <set+0x40>
    e5f4:	000240ee 	.word	0x000240ee
    e5f8:	00022970 	.word	0x00022970
    e5fc:	20008094 	.word	0x20008094
    e600:	00024114 	.word	0x00024114
    e604:	0002413d 	.word	0x0002413d

0000e608 <bt_settings_encode_key>:
{
    e608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e60c:	b088      	sub	sp, #32
    e60e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e612:	799c      	ldrb	r4, [r3, #6]
    e614:	795d      	ldrb	r5, [r3, #5]
    e616:	791e      	ldrb	r6, [r3, #4]
    e618:	78df      	ldrb	r7, [r3, #3]
    e61a:	f893 c002 	ldrb.w	ip, [r3, #2]
    e61e:	f893 e001 	ldrb.w	lr, [r3, #1]
    e622:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e624:	f1b8 0f00 	cmp.w	r8, #0
    e628:	d00e      	beq.n	e648 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e62a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e62e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e632:	4613      	mov	r3, r2
    e634:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e638:	e9cd 4500 	strd	r4, r5, [sp]
    e63c:	4a08      	ldr	r2, [pc, #32]	; (e660 <bt_settings_encode_key+0x58>)
    e63e:	f00e fa74 	bl	1cb2a <snprintk>
}
    e642:	b008      	add	sp, #32
    e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e648:	e9cd e305 	strd	lr, r3, [sp, #20]
    e64c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e650:	4613      	mov	r3, r2
    e652:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e656:	4a03      	ldr	r2, [pc, #12]	; (e664 <bt_settings_encode_key+0x5c>)
    e658:	9400      	str	r4, [sp, #0]
    e65a:	f00e fa66 	bl	1cb2a <snprintk>
}
    e65e:	e7f0      	b.n	e642 <bt_settings_encode_key+0x3a>
    e660:	00024167 	.word	0x00024167
    e664:	0002418b 	.word	0x0002418b

0000e668 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e668:	4907      	ldr	r1, [pc, #28]	; (e688 <bt_settings_save_id+0x20>)
    e66a:	e8d1 3fef 	ldaex	r3, [r1]
    e66e:	f043 0201 	orr.w	r2, r3, #1
    e672:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e676:	2800      	cmp	r0, #0
    e678:	d1f7      	bne.n	e66a <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e67a:	07db      	lsls	r3, r3, #31
    e67c:	d403      	bmi.n	e686 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e67e:	4803      	ldr	r0, [pc, #12]	; (e68c <bt_settings_save_id+0x24>)
    e680:	3908      	subs	r1, #8
    e682:	f012 bf55 	b.w	21530 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e686:	4770      	bx	lr
    e688:	200082c0 	.word	0x200082c0
    e68c:	20009638 	.word	0x20009638

0000e690 <commit>:

static int commit(void)
{
    e690:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e692:	4c13      	ldr	r4, [pc, #76]	; (e6e0 <commit+0x50>)
    e694:	79e3      	ldrb	r3, [r4, #7]
    e696:	b96b      	cbnz	r3, e6b4 <commit+0x24>
		bt_setup_public_id_addr();
    e698:	f002 f80c 	bl	106b4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e69c:	79e3      	ldrb	r3, [r4, #7]
    e69e:	b94b      	cbnz	r3, e6b4 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e6a0:	f002 f896 	bl	107d0 <bt_setup_random_id_addr>
		if (err) {
    e6a4:	4604      	mov	r4, r0
    e6a6:	b128      	cbz	r0, e6b4 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e6a8:	2145      	movs	r1, #69	; 0x45
    e6aa:	480e      	ldr	r0, [pc, #56]	; (e6e4 <commit+0x54>)
    e6ac:	f00e fa30 	bl	1cb10 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e6b0:	4620      	mov	r0, r4
    e6b2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e6b4:	4d0c      	ldr	r5, [pc, #48]	; (e6e8 <commit+0x58>)
    e6b6:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e6ba:	079b      	lsls	r3, r3, #30
    e6bc:	d401      	bmi.n	e6c2 <commit+0x32>
		bt_finalize_init();
    e6be:	f001 ff1b 	bl	104f8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e6c2:	e8d5 4fef 	ldaex	r4, [r5]
    e6c6:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e6ca:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e6ce:	2a00      	cmp	r2, #0
    e6d0:	d1f7      	bne.n	e6c2 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e6d2:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e6d6:	d0eb      	beq.n	e6b0 <commit+0x20>
		bt_settings_save_id();
    e6d8:	f7ff ffc6 	bl	e668 <bt_settings_save_id>
	return 0;
    e6dc:	2400      	movs	r4, #0
    e6de:	e7e7      	b.n	e6b0 <commit+0x20>
    e6e0:	20008000 	.word	0x20008000
    e6e4:	000241ac 	.word	0x000241ac
    e6e8:	20008094 	.word	0x20008094

0000e6ec <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e6ec:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e6ee:	f7fd fbdb 	bl	bea8 <settings_subsys_init>
	if (err) {
    e6f2:	4604      	mov	r4, r0
    e6f4:	b120      	cbz	r0, e700 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e6f6:	4602      	mov	r2, r0
    e6f8:	2145      	movs	r1, #69	; 0x45
    e6fa:	4802      	ldr	r0, [pc, #8]	; (e704 <bt_settings_init+0x18>)
    e6fc:	f00e fa08 	bl	1cb10 <printk>
		return err;
	}

	return 0;
}
    e700:	4620      	mov	r0, r4
    e702:	bd10      	pop	{r4, pc}
    e704:	000241d5 	.word	0x000241d5

0000e708 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e708:	4603      	mov	r3, r0
    e70a:	b430      	push	{r4, r5}
	switch (src->type) {
    e70c:	781a      	ldrb	r2, [r3, #0]
{
    e70e:	4608      	mov	r0, r1
	switch (src->type) {
    e710:	2a01      	cmp	r2, #1
    e712:	d013      	beq.n	e73c <uuid_to_uuid128+0x34>
    e714:	2a02      	cmp	r2, #2
    e716:	d026      	beq.n	e766 <uuid_to_uuid128+0x5e>
    e718:	b972      	cbnz	r2, e738 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e71a:	4a15      	ldr	r2, [pc, #84]	; (e770 <uuid_to_uuid128+0x68>)
    e71c:	f102 0410 	add.w	r4, r2, #16
    e720:	f852 5b04 	ldr.w	r5, [r2], #4
    e724:	42a2      	cmp	r2, r4
    e726:	f841 5b04 	str.w	r5, [r1], #4
    e72a:	d1f9      	bne.n	e720 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e72c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e72e:	7812      	ldrb	r2, [r2, #0]
    e730:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e732:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e734:	0a1b      	lsrs	r3, r3, #8
    e736:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e738:	bc30      	pop	{r4, r5}
    e73a:	4770      	bx	lr
		*dst = uuid128_base;
    e73c:	4a0c      	ldr	r2, [pc, #48]	; (e770 <uuid_to_uuid128+0x68>)
    e73e:	f102 0410 	add.w	r4, r2, #16
    e742:	f852 5b04 	ldr.w	r5, [r2], #4
    e746:	42a2      	cmp	r2, r4
    e748:	f841 5b04 	str.w	r5, [r1], #4
    e74c:	d1f9      	bne.n	e742 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e74e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e750:	7812      	ldrb	r2, [r2, #0]
    e752:	700a      	strb	r2, [r1, #0]
    e754:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e758:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e75a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e75c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e75e:	0a1b      	lsrs	r3, r3, #8
    e760:	7382      	strb	r2, [r0, #14]
    e762:	7403      	strb	r3, [r0, #16]
}
    e764:	e7e8      	b.n	e738 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e766:	2211      	movs	r2, #17
}
    e768:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e76a:	4619      	mov	r1, r3
    e76c:	f00f be88 	b.w	1e480 <memcpy>
    e770:	0002420e 	.word	0x0002420e

0000e774 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e774:	2801      	cmp	r0, #1
{
    e776:	b570      	push	{r4, r5, r6, lr}
    e778:	4605      	mov	r5, r0
    e77a:	4616      	mov	r6, r2
    e77c:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e77e:	d010      	beq.n	e7a2 <bt_buf_get_rx+0x2e>
    e780:	2803      	cmp	r0, #3
    e782:	d00a      	beq.n	e79a <bt_buf_get_rx+0x26>
    e784:	2805      	cmp	r0, #5
    e786:	d008      	beq.n	e79a <bt_buf_get_rx+0x26>
    e788:	490c      	ldr	r1, [pc, #48]	; (e7bc <bt_buf_get_rx+0x48>)
    e78a:	480d      	ldr	r0, [pc, #52]	; (e7c0 <bt_buf_get_rx+0x4c>)
    e78c:	2233      	movs	r2, #51	; 0x33
    e78e:	f00e f9bf 	bl	1cb10 <printk>
    e792:	2133      	movs	r1, #51	; 0x33
    e794:	4809      	ldr	r0, [pc, #36]	; (e7bc <bt_buf_get_rx+0x48>)
    e796:	f00e fc61 	bl	1d05c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e79a:	4632      	mov	r2, r6
    e79c:	4623      	mov	r3, r4
    e79e:	4809      	ldr	r0, [pc, #36]	; (e7c4 <bt_buf_get_rx+0x50>)
    e7a0:	e000      	b.n	e7a4 <bt_buf_get_rx+0x30>
    e7a2:	4809      	ldr	r0, [pc, #36]	; (e7c8 <bt_buf_get_rx+0x54>)
    e7a4:	f011 ffce 	bl	20744 <net_buf_alloc_fixed>
    e7a8:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e7aa:	b12c      	cbz	r4, e7b8 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e7ac:	2101      	movs	r1, #1
    e7ae:	f104 0008 	add.w	r0, r4, #8
    e7b2:	f008 ffc5 	bl	17740 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e7b6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e7b8:	4620      	mov	r0, r4
    e7ba:	bd70      	pop	{r4, r5, r6, pc}
    e7bc:	0002421f 	.word	0x0002421f
    e7c0:	00022f17 	.word	0x00022f17
    e7c4:	20008598 	.word	0x20008598
    e7c8:	20008674 	.word	0x20008674

0000e7cc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e7cc:	4602      	mov	r2, r0
    e7ce:	460b      	mov	r3, r1
    e7d0:	b570      	push	{r4, r5, r6, lr}
    e7d2:	f04f 0120 	mov.w	r1, #32
    e7d6:	f3ef 8511 	mrs	r5, BASEPRI
    e7da:	f381 8811 	msr	BASEPRI, r1
    e7de:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e7e2:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e7e4:	490b      	ldr	r1, [pc, #44]	; (e814 <bt_buf_get_cmd_complete+0x48>)
    e7e6:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    e7ea:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
	__asm__ volatile(
    e7ee:	f385 8811 	msr	BASEPRI, r5
    e7f2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e7f6:	b924      	cbnz	r4, e802 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e7fc:	2001      	movs	r0, #1
    e7fe:	f7ff bfb9 	b.w	e774 <bt_buf_get_rx>
    e802:	2101      	movs	r1, #1
		buf->len = 0U;
    e804:	81a0      	strh	r0, [r4, #12]
    e806:	7521      	strb	r1, [r4, #20]
    e808:	f104 0008 	add.w	r0, r4, #8
    e80c:	f008 ff98 	bl	17740 <net_buf_simple_reserve>
}
    e810:	4620      	mov	r0, r4
    e812:	bd70      	pop	{r4, r5, r6, pc}
    e814:	20008000 	.word	0x20008000

0000e818 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e818:	b570      	push	{r4, r5, r6, lr}
    e81a:	4604      	mov	r4, r0
	switch (evt) {
    e81c:	2c0f      	cmp	r4, #15
{
    e81e:	460d      	mov	r5, r1
    e820:	4610      	mov	r0, r2
    e822:	4619      	mov	r1, r3
	switch (evt) {
    e824:	d805      	bhi.n	e832 <bt_buf_get_evt+0x1a>
    e826:	2c0d      	cmp	r4, #13
    e828:	d912      	bls.n	e850 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e82e:	f7ff bfcd 	b.w	e7cc <bt_buf_get_cmd_complete>
	switch (evt) {
    e832:	2c13      	cmp	r4, #19
    e834:	d10c      	bne.n	e850 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e836:	480b      	ldr	r0, [pc, #44]	; (e864 <bt_buf_get_evt+0x4c>)
    e838:	f011 ff84 	bl	20744 <net_buf_alloc_fixed>
			if (buf) {
    e83c:	4604      	mov	r4, r0
    e83e:	b128      	cbz	r0, e84c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e840:	2101      	movs	r1, #1
    e842:	3008      	adds	r0, #8
    e844:	f008 ff7c 	bl	17740 <net_buf_simple_reserve>
    e848:	2301      	movs	r3, #1
    e84a:	7523      	strb	r3, [r4, #20]
}
    e84c:	4620      	mov	r0, r4
    e84e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e850:	4602      	mov	r2, r0
    e852:	460b      	mov	r3, r1
		if (discardable) {
    e854:	b10d      	cbz	r5, e85a <bt_buf_get_evt+0x42>
    e856:	4804      	ldr	r0, [pc, #16]	; (e868 <bt_buf_get_evt+0x50>)
    e858:	e7ee      	b.n	e838 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e85a:	2001      	movs	r0, #1
}
    e85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e860:	f7ff bf88 	b.w	e774 <bt_buf_get_rx>
    e864:	200086a0 	.word	0x200086a0
    e868:	200085f0 	.word	0x200085f0

0000e86c <bt_adv_foreach>:
{
    e86c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    e86e:	4801      	ldr	r0, [pc, #4]	; (e874 <bt_adv_foreach+0x8>)
    e870:	4718      	bx	r3
    e872:	bf00      	nop
    e874:	20008018 	.word	0x20008018

0000e878 <le_dhkey_complete>:
	if (dh_key_cb) {
    e878:	4905      	ldr	r1, [pc, #20]	; (e890 <le_dhkey_complete+0x18>)
    e87a:	680b      	ldr	r3, [r1, #0]
    e87c:	b133      	cbz	r3, e88c <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    e87e:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    e880:	2000      	movs	r0, #0
    e882:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    e884:	7811      	ldrb	r1, [r2, #0]
    e886:	b901      	cbnz	r1, e88a <le_dhkey_complete+0x12>
    e888:	1c50      	adds	r0, r2, #1
    e88a:	4718      	bx	r3
}
    e88c:	4770      	bx	lr
    e88e:	bf00      	nop
    e890:	20009c08 	.word	0x20009c08

0000e894 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e894:	6883      	ldr	r3, [r0, #8]
    e896:	2157      	movs	r1, #87	; 0x57
    e898:	781a      	ldrb	r2, [r3, #0]
    e89a:	4801      	ldr	r0, [pc, #4]	; (e8a0 <hci_data_buf_overflow+0xc>)
    e89c:	f00e b938 	b.w	1cb10 <printk>
    e8a0:	00024255 	.word	0x00024255

0000e8a4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    e8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8a6:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e8a8:	2500      	movs	r5, #0
    e8aa:	4f09      	ldr	r7, [pc, #36]	; (e8d0 <id_find+0x2c>)
    e8ac:	79fb      	ldrb	r3, [r7, #7]
    e8ae:	b2ec      	uxtb	r4, r5
    e8b0:	42a3      	cmp	r3, r4
    e8b2:	d802      	bhi.n	e8ba <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e8b4:	f06f 0401 	mvn.w	r4, #1
    e8b8:	e008      	b.n	e8cc <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e8ba:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e8be:	4630      	mov	r0, r6
    e8c0:	4439      	add	r1, r7
    e8c2:	f00f ff0c 	bl	1e6de <bt_addr_le_cmp>
    e8c6:	3501      	adds	r5, #1
    e8c8:	2800      	cmp	r0, #0
    e8ca:	d1ef      	bne.n	e8ac <id_find+0x8>
}
    e8cc:	4620      	mov	r0, r4
    e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8d0:	20008000 	.word	0x20008000

0000e8d4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e8d4:	6843      	ldr	r3, [r0, #4]
{
    e8d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e8d8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e8da:	0558      	lsls	r0, r3, #21
    e8dc:	d502      	bpl.n	e8e4 <valid_adv_param+0x10>
		return false;
    e8de:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    e8e0:	b003      	add	sp, #12
    e8e2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e8e4:	6922      	ldr	r2, [r4, #16]
    e8e6:	b10a      	cbz	r2, e8ec <valid_adv_param+0x18>
    e8e8:	07d9      	lsls	r1, r3, #31
    e8ea:	d5f8      	bpl.n	e8de <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e8ec:	4d1a      	ldr	r5, [pc, #104]	; (e958 <valid_adv_param+0x84>)
    e8ee:	7820      	ldrb	r0, [r4, #0]
    e8f0:	79eb      	ldrb	r3, [r5, #7]
    e8f2:	4283      	cmp	r3, r0
    e8f4:	d9f3      	bls.n	e8de <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e8f6:	2300      	movs	r3, #0
    e8f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e8fc:	4669      	mov	r1, sp
    e8fe:	4428      	add	r0, r5
    e900:	9300      	str	r3, [sp, #0]
    e902:	f8cd 3003 	str.w	r3, [sp, #3]
    e906:	f00f feea 	bl	1e6de <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    e90a:	2800      	cmp	r0, #0
    e90c:	d0e7      	beq.n	e8de <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e90e:	6860      	ldr	r0, [r4, #4]
    e910:	07c2      	lsls	r2, r0, #31
    e912:	d406      	bmi.n	e922 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e914:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    e918:	2b08      	cmp	r3, #8
    e91a:	d802      	bhi.n	e922 <valid_adv_param+0x4e>
    e91c:	68a3      	ldr	r3, [r4, #8]
    e91e:	2b9f      	cmp	r3, #159	; 0x9f
    e920:	d9dd      	bls.n	e8de <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e922:	f010 0f30 	tst.w	r0, #48	; 0x30
    e926:	d002      	beq.n	e92e <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e928:	6923      	ldr	r3, [r4, #16]
    e92a:	2b00      	cmp	r3, #0
    e92c:	d0d7      	beq.n	e8de <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e92e:	06c3      	lsls	r3, r0, #27
    e930:	d401      	bmi.n	e936 <valid_adv_param+0x62>
    e932:	6923      	ldr	r3, [r4, #16]
    e934:	b943      	cbnz	r3, e948 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    e936:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e93a:	429a      	cmp	r2, r3
    e93c:	d8cf      	bhi.n	e8de <valid_adv_param+0xa>
    e93e:	2a1f      	cmp	r2, #31
    e940:	d9cd      	bls.n	e8de <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e946:	d8ca      	bhi.n	e8de <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e948:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e94c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e950:	bf18      	it	ne
    e952:	2001      	movne	r0, #1
    e954:	e7c4      	b.n	e8e0 <valid_adv_param+0xc>
    e956:	bf00      	nop
    e958:	20008000 	.word	0x20008000

0000e95c <le_pkey_complete>:
{
    e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    e95e:	6885      	ldr	r5, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e960:	f06f 0110 	mvn.w	r1, #16
    e964:	480e      	ldr	r0, [pc, #56]	; (e9a0 <le_pkey_complete+0x44>)
    e966:	f00f febd 	bl	1e6e4 <atomic_and>
	if (!evt->status) {
    e96a:	782b      	ldrb	r3, [r5, #0]
    e96c:	b943      	cbnz	r3, e980 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    e96e:	1c69      	adds	r1, r5, #1
    e970:	2240      	movs	r2, #64	; 0x40
    e972:	480c      	ldr	r0, [pc, #48]	; (e9a4 <le_pkey_complete+0x48>)
    e974:	f00f fd84 	bl	1e480 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e978:	2108      	movs	r1, #8
    e97a:	4809      	ldr	r0, [pc, #36]	; (e9a0 <le_pkey_complete+0x44>)
    e97c:	f00f fe99 	bl	1e6b2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e980:	4e09      	ldr	r6, [pc, #36]	; (e9a8 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    e982:	4f08      	ldr	r7, [pc, #32]	; (e9a4 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e984:	6834      	ldr	r4, [r6, #0]
    e986:	b90c      	cbnz	r4, e98c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    e988:	6034      	str	r4, [r6, #0]
}
    e98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    e98c:	782a      	ldrb	r2, [r5, #0]
    e98e:	6823      	ldr	r3, [r4, #0]
    e990:	2a00      	cmp	r2, #0
    e992:	bf0c      	ite	eq
    e994:	4638      	moveq	r0, r7
    e996:	2000      	movne	r0, #0
    e998:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e99a:	6864      	ldr	r4, [r4, #4]
    e99c:	e7f3      	b.n	e986 <le_pkey_complete+0x2a>
    e99e:	bf00      	nop
    e9a0:	20008094 	.word	0x20008094
    e9a4:	2000b757 	.word	0x2000b757
    e9a8:	20009c0c 	.word	0x20009c0c

0000e9ac <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e9ac:	6883      	ldr	r3, [r0, #8]
{
    e9ae:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e9b0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e9b2:	4620      	mov	r0, r4
    e9b4:	f002 fea0 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    e9b8:	b930      	cbnz	r0, e9c8 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e9ba:	4622      	mov	r2, r4
}
    e9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e9c0:	2145      	movs	r1, #69	; 0x45
    e9c2:	4803      	ldr	r0, [pc, #12]	; (e9d0 <le_data_len_change+0x24>)
    e9c4:	f00e b8a4 	b.w	1cb10 <printk>
}
    e9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    e9cc:	f002 be70 	b.w	116b0 <bt_conn_unref>
    e9d0:	00024282 	.word	0x00024282

0000e9d4 <hci_disconn_complete_prio>:
{
    e9d4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e9d6:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    e9d8:	781a      	ldrb	r2, [r3, #0]
    e9da:	b9aa      	cbnz	r2, ea08 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e9dc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e9e0:	4628      	mov	r0, r5
    e9e2:	f002 fe89 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    e9e6:	4604      	mov	r4, r0
    e9e8:	b930      	cbnz	r0, e9f8 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e9ea:	462a      	mov	r2, r5
}
    e9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e9f0:	2145      	movs	r1, #69	; 0x45
    e9f2:	4806      	ldr	r0, [pc, #24]	; (ea0c <hci_disconn_complete_prio+0x38>)
    e9f4:	f00e b88c 	b.w	1cb10 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e9f8:	2101      	movs	r1, #1
    e9fa:	f002 fe85 	bl	11708 <bt_conn_set_state>
	bt_conn_unref(conn);
    e9fe:	4620      	mov	r0, r4
}
    ea00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ea04:	f002 be54 	b.w	116b0 <bt_conn_unref>
}
    ea08:	bd38      	pop	{r3, r4, r5, pc}
    ea0a:	bf00      	nop
    ea0c:	000242ab 	.word	0x000242ab

0000ea10 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    ea10:	2101      	movs	r1, #1
{
    ea12:	b508      	push	{r3, lr}
    ea14:	3008      	adds	r0, #8
    ea16:	f008 ffdd 	bl	179d4 <net_buf_simple_pull_mem>
}
    ea1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    ea1e:	7802      	ldrb	r2, [r0, #0]
    ea20:	2145      	movs	r1, #69	; 0x45
    ea22:	4801      	ldr	r0, [pc, #4]	; (ea28 <hci_hardware_error+0x18>)
    ea24:	f00e b874 	b.w	1cb10 <printk>
    ea28:	000242d6 	.word	0x000242d6

0000ea2c <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    ea2c:	8981      	ldrh	r1, [r0, #12]
{
    ea2e:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    ea30:	6880      	ldr	r0, [r0, #8]
    ea32:	f7ff fd27 	bl	e484 <bt_hex_real>
}
    ea36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    ea3a:	4602      	mov	r2, r0
    ea3c:	2157      	movs	r1, #87	; 0x57
    ea3e:	4801      	ldr	r0, [pc, #4]	; (ea44 <hci_vendor_event+0x18>)
    ea40:	f00e b866 	b.w	1cb10 <printk>
    ea44:	000242fd 	.word	0x000242fd

0000ea48 <le_conn_update_complete>:
{
    ea48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    ea4a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    ea4c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ea50:	4630      	mov	r0, r6
    ea52:	f002 fe51 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    ea56:	4604      	mov	r4, r0
    ea58:	b938      	cbnz	r0, ea6a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ea5a:	4632      	mov	r2, r6
    ea5c:	2145      	movs	r1, #69	; 0x45
    ea5e:	4821      	ldr	r0, [pc, #132]	; (eae4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
}
    ea60:	b002      	add	sp, #8
    ea62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ea66:	f00e b853 	b.w	1cb10 <printk>
	if (!evt->status) {
    ea6a:	782b      	ldrb	r3, [r5, #0]
    ea6c:	b9cb      	cbnz	r3, eaa2 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    ea6e:	792a      	ldrb	r2, [r5, #4]
    ea70:	78eb      	ldrb	r3, [r5, #3]
    ea72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea76:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    ea7a:	79aa      	ldrb	r2, [r5, #6]
    ea7c:	796b      	ldrb	r3, [r5, #5]
    ea7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea82:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ea86:	79eb      	ldrb	r3, [r5, #7]
    ea88:	7a2a      	ldrb	r2, [r5, #8]
    ea8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea8e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    ea92:	f002 fc23 	bl	112dc <notify_le_param_updated>
	bt_conn_unref(conn);
    ea96:	4620      	mov	r0, r4
}
    ea98:	b002      	add	sp, #8
    ea9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    ea9e:	f002 be07 	b.w	116b0 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    eaa2:	2b1a      	cmp	r3, #26
    eaa4:	d1f7      	bne.n	ea96 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
    eaa6:	78c3      	ldrb	r3, [r0, #3]
    eaa8:	2b01      	cmp	r3, #1
    eaaa:	d1f4      	bne.n	ea96 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
		   !atomic_test_and_set_bit(conn->flags,
    eaac:	210a      	movs	r1, #10
    eaae:	3004      	adds	r0, #4
    eab0:	f00f fe0a 	bl	1e6c8 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    eab4:	2800      	cmp	r0, #0
    eab6:	d1ee      	bne.n	ea96 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
		param.interval_min = conn->le.interval_min;
    eab8:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    eabc:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    eabe:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    eac2:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    eac6:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    eac8:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    eacc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    ead0:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    ead4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ead8:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    eadc:	f003 fc1c 	bl	12318 <bt_l2cap_update_conn_param>
    eae0:	e7d9      	b.n	ea96 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
    eae2:	bf00      	nop
    eae4:	00024282 	.word	0x00024282

0000eae8 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    eae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    eaea:	7803      	ldrb	r3, [r0, #0]
{
    eaec:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    eaee:	f88d 3004 	strb.w	r3, [sp, #4]
    eaf2:	2300      	movs	r3, #0
{
    eaf4:	4605      	mov	r5, r0
    eaf6:	460f      	mov	r7, r1
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    eaf8:	4822      	ldr	r0, [pc, #136]	; (eb84 <le_adv_start_add_conn+0x9c>)
    eafa:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    eafc:	f88d 3005 	strb.w	r3, [sp, #5]
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    eb00:	f7ff feb4 	bl	e86c <bt_adv_foreach>
	if (check_data.adv_enabled) {
    eb04:	f89d 3005 	ldrb.w	r3, [sp, #5]
    eb08:	bb9b      	cbnz	r3, eb72 <le_adv_start_add_conn+0x8a>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    eb0a:	462e      	mov	r6, r5
    eb0c:	4a1e      	ldr	r2, [pc, #120]	; (eb88 <le_adv_start_add_conn+0xa0>)
    eb0e:	f816 1b09 	ldrb.w	r1, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    eb12:	9302      	str	r3, [sp, #8]
	bt_dev.adv_conn_id = adv->id;
    eb14:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    eb18:	4630      	mov	r0, r6
    eb1a:	a902      	add	r1, sp, #8
    eb1c:	f8cd 300b 	str.w	r3, [sp, #11]
    eb20:	f00f fddd 	bl	1e6de <bt_addr_le_cmp>
    eb24:	782a      	ldrb	r2, [r5, #0]
    eb26:	4604      	mov	r4, r0
    eb28:	b9a8      	cbnz	r0, eb56 <le_adv_start_add_conn+0x6e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    eb2a:	4b18      	ldr	r3, [pc, #96]	; (eb8c <le_adv_start_add_conn+0xa4>)
    eb2c:	6818      	ldr	r0, [r3, #0]
    eb2e:	8899      	ldrh	r1, [r3, #4]
    eb30:	799b      	ldrb	r3, [r3, #6]
    eb32:	9004      	str	r0, [sp, #16]
    eb34:	f8ad 1014 	strh.w	r1, [sp, #20]
    eb38:	4610      	mov	r0, r2
    eb3a:	a904      	add	r1, sp, #16
    eb3c:	f88d 3016 	strb.w	r3, [sp, #22]
    eb40:	f002 fd88 	bl	11654 <bt_conn_add_le>
		if (!conn) {
    eb44:	4605      	mov	r5, r0
    eb46:	b1d0      	cbz	r0, eb7e <le_adv_start_add_conn+0x96>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    eb48:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    eb4a:	f002 fddd 	bl	11708 <bt_conn_set_state>
	*out_conn = conn;
    eb4e:	603d      	str	r5, [r7, #0]
	return 0;
}
    eb50:	4620      	mov	r0, r4
    eb52:	b007      	add	sp, #28
    eb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    eb56:	4631      	mov	r1, r6
    eb58:	4610      	mov	r0, r2
    eb5a:	f002 feeb 	bl	11934 <bt_conn_exists_le>
    eb5e:	4604      	mov	r4, r0
    eb60:	b950      	cbnz	r0, eb78 <le_adv_start_add_conn+0x90>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    eb62:	7828      	ldrb	r0, [r5, #0]
    eb64:	4631      	mov	r1, r6
    eb66:	f002 fd75 	bl	11654 <bt_conn_add_le>
	if (!conn) {
    eb6a:	4605      	mov	r5, r0
    eb6c:	b138      	cbz	r0, eb7e <le_adv_start_add_conn+0x96>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    eb6e:	2105      	movs	r1, #5
    eb70:	e7eb      	b.n	eb4a <le_adv_start_add_conn+0x62>
		return -ENOTSUP;
    eb72:	f06f 0422 	mvn.w	r4, #34	; 0x22
    eb76:	e7eb      	b.n	eb50 <le_adv_start_add_conn+0x68>
		return -EINVAL;
    eb78:	f06f 0415 	mvn.w	r4, #21
    eb7c:	e7e8      	b.n	eb50 <le_adv_start_add_conn+0x68>
		return -ENOMEM;
    eb7e:	f06f 040b 	mvn.w	r4, #11
    eb82:	e7e5      	b.n	eb50 <le_adv_start_add_conn+0x68>
    eb84:	0001e743 	.word	0x0001e743
    eb88:	20008000 	.word	0x20008000
    eb8c:	00021d50 	.word	0x00021d50

0000eb90 <update_sec_level.part.0>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    eb90:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static void update_sec_level(struct bt_conn *conn)
    eb94:	b510      	push	{r4, lr}
    eb96:	4604      	mov	r4, r0
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    eb98:	b1cb      	cbz	r3, ebce <update_sec_level.part.0+0x3e>
    eb9a:	7b5a      	ldrb	r2, [r3, #13]
    eb9c:	07d1      	lsls	r1, r2, #31
    eb9e:	d516      	bpl.n	ebce <update_sec_level.part.0+0x3e>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    eba0:	06d2      	lsls	r2, r2, #27
    eba2:	d512      	bpl.n	ebca <update_sec_level.part.0+0x3a>
    eba4:	7b1b      	ldrb	r3, [r3, #12]
    eba6:	2b10      	cmp	r3, #16
    eba8:	d10f      	bne.n	ebca <update_sec_level.part.0+0x3a>
			conn->sec_level = BT_SECURITY_L4;
    ebaa:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    ebac:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    ebae:	7aa2      	ldrb	r2, [r4, #10]
    ebb0:	7a63      	ldrb	r3, [r4, #9]
    ebb2:	429a      	cmp	r2, r3
    ebb4:	d90d      	bls.n	ebd2 <update_sec_level.part.0+0x42>
		BT_ERR("Failed to set required security level");
    ebb6:	2145      	movs	r1, #69	; 0x45
    ebb8:	4806      	ldr	r0, [pc, #24]	; (ebd4 <update_sec_level.part.0+0x44>)
    ebba:	f00d ffa9 	bl	1cb10 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    ebbe:	4620      	mov	r0, r4
}
    ebc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    ebc4:	2105      	movs	r1, #5
    ebc6:	f003 b839 	b.w	11c3c <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    ebca:	2303      	movs	r3, #3
    ebcc:	e7ee      	b.n	ebac <update_sec_level.part.0+0x1c>
		conn->sec_level = BT_SECURITY_L2;
    ebce:	2302      	movs	r3, #2
    ebd0:	e7ec      	b.n	ebac <update_sec_level.part.0+0x1c>
}
    ebd2:	bd10      	pop	{r4, pc}
    ebd4:	00024326 	.word	0x00024326

0000ebd8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ebd8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ebda:	4c0c      	ldr	r4, [pc, #48]	; (ec0c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ebdc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ebde:	2205      	movs	r2, #5
    ebe0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ebe4:	f002 fec2 	bl	1196c <bt_conn_lookup_state_le>
		if (!conn) {
    ebe8:	b970      	cbnz	r0, ec08 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    ebea:	4b09      	ldr	r3, [pc, #36]	; (ec10 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ebec:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    ebee:	6818      	ldr	r0, [r3, #0]
    ebf0:	889a      	ldrh	r2, [r3, #4]
    ebf2:	799b      	ldrb	r3, [r3, #6]
    ebf4:	9000      	str	r0, [sp, #0]
    ebf6:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ebfa:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ebfe:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    ec00:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ec04:	f002 feb2 	bl	1196c <bt_conn_lookup_state_le>
}
    ec08:	b002      	add	sp, #8
    ec0a:	bd10      	pop	{r4, pc}
    ec0c:	20008000 	.word	0x20008000
    ec10:	00021d50 	.word	0x00021d50

0000ec14 <handle_event>:
{
    ec14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ec16:	4605      	mov	r5, r0
    ec18:	4614      	mov	r4, r2
    ec1a:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    ec1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    ec20:	7822      	ldrb	r2, [r4, #0]
    ec22:	42aa      	cmp	r2, r5
    ec24:	d010      	beq.n	ec48 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    ec26:	3408      	adds	r4, #8
    ec28:	429c      	cmp	r4, r3
    ec2a:	d1f9      	bne.n	ec20 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    ec2c:	8984      	ldrh	r4, [r0, #12]
    ec2e:	6880      	ldr	r0, [r0, #8]
    ec30:	4621      	mov	r1, r4
    ec32:	f7ff fc27 	bl	e484 <bt_hex_real>
    ec36:	4623      	mov	r3, r4
    ec38:	9000      	str	r0, [sp, #0]
    ec3a:	462a      	mov	r2, r5
    ec3c:	2157      	movs	r1, #87	; 0x57
    ec3e:	480b      	ldr	r0, [pc, #44]	; (ec6c <handle_event+0x58>)
    ec40:	f00d ff66 	bl	1cb10 <printk>
}
    ec44:	b003      	add	sp, #12
    ec46:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    ec48:	8982      	ldrh	r2, [r0, #12]
    ec4a:	7863      	ldrb	r3, [r4, #1]
    ec4c:	4293      	cmp	r3, r2
    ec4e:	d907      	bls.n	ec60 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ec50:	462b      	mov	r3, r5
    ec52:	2145      	movs	r1, #69	; 0x45
    ec54:	4806      	ldr	r0, [pc, #24]	; (ec70 <handle_event+0x5c>)
}
    ec56:	b003      	add	sp, #12
    ec58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ec5c:	f00d bf58 	b.w	1cb10 <printk>
		handler->handler(buf);
    ec60:	6863      	ldr	r3, [r4, #4]
}
    ec62:	b003      	add	sp, #12
    ec64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    ec68:	4718      	bx	r3
    ec6a:	bf00      	nop
    ec6c:	00024378 	.word	0x00024378
    ec70:	00024351 	.word	0x00024351

0000ec74 <hci_le_meta_event>:
{
    ec74:	b510      	push	{r4, lr}
    ec76:	2101      	movs	r1, #1
    ec78:	4604      	mov	r4, r0
    ec7a:	3008      	adds	r0, #8
    ec7c:	f008 feaa 	bl	179d4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ec80:	4621      	mov	r1, r4
}
    ec82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ec86:	230b      	movs	r3, #11
    ec88:	4a01      	ldr	r2, [pc, #4]	; (ec90 <hci_le_meta_event+0x1c>)
    ec8a:	7800      	ldrb	r0, [r0, #0]
    ec8c:	f7ff bfc2 	b.w	ec14 <handle_event>
    ec90:	000221d4 	.word	0x000221d4

0000ec94 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ec94:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ec96:	4d18      	ldr	r5, [pc, #96]	; (ecf8 <id_create.constprop.0+0x64>)
    ec98:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ec9c:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ec9e:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eca0:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    eca2:	b1b1      	cbz	r1, ecd2 <id_create.constprop.0+0x3e>
    eca4:	2300      	movs	r3, #0
    eca6:	4620      	mov	r0, r4
    eca8:	a902      	add	r1, sp, #8
    ecaa:	9302      	str	r3, [sp, #8]
    ecac:	f8cd 300b 	str.w	r3, [sp, #11]
    ecb0:	f00f fd15 	bl	1e6de <bt_addr_le_cmp>
    ecb4:	b168      	cbz	r0, ecd2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    ecb6:	4621      	mov	r1, r4
    ecb8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ecba:	f00f fcf7 	bl	1e6ac <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ecbe:	480f      	ldr	r0, [pc, #60]	; (ecfc <id_create.constprop.0+0x68>)
    ecc0:	f00f fcf1 	bl	1e6a6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    ecc4:	0783      	lsls	r3, r0, #30
    ecc6:	d515      	bpl.n	ecf4 <id_create.constprop.0+0x60>
}
    ecc8:	b005      	add	sp, #20
    ecca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    ecce:	f7ff bccb 	b.w	e668 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    ecd2:	4668      	mov	r0, sp
    ecd4:	f00f fcb8 	bl	1e648 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    ecd8:	4668      	mov	r0, sp
    ecda:	f7ff fde3 	bl	e8a4 <id_find>
    ecde:	2800      	cmp	r0, #0
    ece0:	daf7      	bge.n	ecd2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ece2:	4669      	mov	r1, sp
    ece4:	4628      	mov	r0, r5
    ece6:	f00f fce1 	bl	1e6ac <bt_addr_le_copy>
		if (addr) {
    ecea:	2c00      	cmp	r4, #0
    ecec:	d0e7      	beq.n	ecbe <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ecee:	4629      	mov	r1, r5
    ecf0:	4620      	mov	r0, r4
    ecf2:	e7e2      	b.n	ecba <id_create.constprop.0+0x26>
}
    ecf4:	b005      	add	sp, #20
    ecf6:	bd30      	pop	{r4, r5, pc}
    ecf8:	20008000 	.word	0x20008000
    ecfc:	20008094 	.word	0x20008094

0000ed00 <hci_rx_thread>:
{
    ed00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ed04:	4f40      	ldr	r7, [pc, #256]	; (ee08 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ed06:	f8df 8104 	ldr.w	r8, [pc, #260]	; ee0c <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ed0a:	4e41      	ldr	r6, [pc, #260]	; (ee10 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ed0c:	f04f 32ff 	mov.w	r2, #4294967295
    ed10:	f04f 33ff 	mov.w	r3, #4294967295
    ed14:	4638      	mov	r0, r7
    ed16:	f008 fce3 	bl	176e0 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ed1a:	7d02      	ldrb	r2, [r0, #20]
    ed1c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    ed1e:	2a01      	cmp	r2, #1
    ed20:	d041      	beq.n	eda6 <hci_rx_thread+0xa6>
    ed22:	2a03      	cmp	r2, #3
    ed24:	d16c      	bne.n	ee00 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ed26:	8983      	ldrh	r3, [r0, #12]
    ed28:	2b03      	cmp	r3, #3
    ed2a:	d80b      	bhi.n	ed44 <hci_rx_thread+0x44>
    ed2c:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ed30:	4631      	mov	r1, r6
    ed32:	4838      	ldr	r0, [pc, #224]	; (ee14 <hci_rx_thread+0x114>)
    ed34:	f00d feec 	bl	1cb10 <printk>
    ed38:	4040      	eors	r0, r0
    ed3a:	f380 8811 	msr	BASEPRI, r0
    ed3e:	f04f 0003 	mov.w	r0, #3
    ed42:	df02      	svc	2
    ed44:	2104      	movs	r1, #4
    ed46:	f104 0008 	add.w	r0, r4, #8
    ed4a:	f008 fe43 	bl	179d4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ed4e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ed50:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ed52:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ed56:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ed58:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ed5a:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ed5e:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ed60:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ed62:	d007      	beq.n	ed74 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ed64:	2145      	movs	r1, #69	; 0x45
    ed66:	482c      	ldr	r0, [pc, #176]	; (ee18 <hci_rx_thread+0x118>)
    ed68:	f00d fed2 	bl	1cb10 <printk>
			net_buf_unref(buf);
    ed6c:	4620      	mov	r0, r4
    ed6e:	f008 fd39 	bl	177e4 <net_buf_unref>
			break;
    ed72:	e015      	b.n	eda0 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ed74:	f002 fcc0 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    ed78:	4605      	mov	r5, r0
    ed7a:	b928      	cbnz	r0, ed88 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ed7c:	2145      	movs	r1, #69	; 0x45
    ed7e:	8ae2      	ldrh	r2, [r4, #22]
    ed80:	4826      	ldr	r0, [pc, #152]	; (ee1c <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ed82:	f00d fec5 	bl	1cb10 <printk>
    ed86:	e7f1      	b.n	ed6c <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ed88:	f003 f8ec 	bl	11f64 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ed8c:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ed8e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ed90:	ea4f 3219 	mov.w	r2, r9, lsr #12
    ed94:	4628      	mov	r0, r5
    ed96:	f002 fb67 	bl	11468 <bt_conn_recv>
	bt_conn_unref(conn);
    ed9a:	4628      	mov	r0, r5
    ed9c:	f002 fc88 	bl	116b0 <bt_conn_unref>
	z_impl_k_yield();
    eda0:	f00c fbb4 	bl	1b50c <z_impl_k_yield>
	while (1) {
    eda4:	e7b2      	b.n	ed0c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    eda6:	8983      	ldrh	r3, [r0, #12]
    eda8:	2b01      	cmp	r3, #1
    edaa:	d80b      	bhi.n	edc4 <hci_rx_thread+0xc4>
    edac:	f241 32fb 	movw	r2, #5115	; 0x13fb
    edb0:	4631      	mov	r1, r6
    edb2:	4818      	ldr	r0, [pc, #96]	; (ee14 <hci_rx_thread+0x114>)
    edb4:	f00d feac 	bl	1cb10 <printk>
    edb8:	4040      	eors	r0, r0
    edba:	f380 8811 	msr	BASEPRI, r0
    edbe:	f04f 0003 	mov.w	r0, #3
    edc2:	df02      	svc	2
    edc4:	2102      	movs	r1, #2
    edc6:	f104 0008 	add.w	r0, r4, #8
    edca:	f008 fe03 	bl	179d4 <net_buf_simple_pull_mem>
    edce:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    edd0:	7800      	ldrb	r0, [r0, #0]
    edd2:	f00f fc47 	bl	1e664 <bt_hci_evt_get_flags>
    edd6:	0783      	lsls	r3, r0, #30
    edd8:	d40b      	bmi.n	edf2 <hci_rx_thread+0xf2>
    edda:	f241 32ff 	movw	r2, #5119	; 0x13ff
    edde:	4631      	mov	r1, r6
    ede0:	480c      	ldr	r0, [pc, #48]	; (ee14 <hci_rx_thread+0x114>)
    ede2:	f00d fe95 	bl	1cb10 <printk>
    ede6:	4040      	eors	r0, r0
    ede8:	f380 8811 	msr	BASEPRI, r0
    edec:	f04f 0003 	mov.w	r0, #3
    edf0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    edf2:	2306      	movs	r3, #6
    edf4:	4642      	mov	r2, r8
    edf6:	4621      	mov	r1, r4
    edf8:	7828      	ldrb	r0, [r5, #0]
    edfa:	f7ff ff0b 	bl	ec14 <handle_event>
	net_buf_unref(buf);
    edfe:	e7b5      	b.n	ed6c <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ee00:	2145      	movs	r1, #69	; 0x45
    ee02:	4807      	ldr	r0, [pc, #28]	; (ee20 <hci_rx_thread+0x120>)
    ee04:	e7bd      	b.n	ed82 <hci_rx_thread+0x82>
    ee06:	bf00      	nop
    ee08:	20008104 	.word	0x20008104
    ee0c:	0002223c 	.word	0x0002223c
    ee10:	0002439f 	.word	0x0002439f
    ee14:	00022f17 	.word	0x00022f17
    ee18:	000243d3 	.word	0x000243d3
    ee1c:	000243fc 	.word	0x000243fc
    ee20:	00024423 	.word	0x00024423

0000ee24 <hci_cmd_done>:
{
    ee24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ee28:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ee2a:	7990      	ldrb	r0, [r2, #6]
{
    ee2c:	460f      	mov	r7, r1
    ee2e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ee30:	f008 fb58 	bl	174e4 <net_buf_pool_get>
    ee34:	4d2a      	ldr	r5, [pc, #168]	; (eee0 <hci_cmd_done+0xbc>)
    ee36:	4285      	cmp	r5, r0
    ee38:	d00e      	beq.n	ee58 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ee3a:	79a4      	ldrb	r4, [r4, #6]
    ee3c:	4620      	mov	r0, r4
    ee3e:	f008 fb51 	bl	174e4 <net_buf_pool_get>
    ee42:	4623      	mov	r3, r4
    ee44:	e9cd 0500 	strd	r0, r5, [sp]
    ee48:	4632      	mov	r2, r6
    ee4a:	2157      	movs	r1, #87	; 0x57
    ee4c:	4825      	ldr	r0, [pc, #148]	; (eee4 <hci_cmd_done+0xc0>)
    ee4e:	f00d fe5f 	bl	1cb10 <printk>
}
    ee52:	b002      	add	sp, #8
    ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ee58:	4620      	mov	r0, r4
    ee5a:	f008 fb4b 	bl	174f4 <net_buf_id>
    ee5e:	f04f 080c 	mov.w	r8, #12
    ee62:	4d21      	ldr	r5, [pc, #132]	; (eee8 <hci_cmd_done+0xc4>)
    ee64:	fb08 5000 	mla	r0, r8, r0, r5
    ee68:	8843      	ldrh	r3, [r0, #2]
    ee6a:	42b3      	cmp	r3, r6
    ee6c:	d00a      	beq.n	ee84 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ee6e:	4620      	mov	r0, r4
    ee70:	f008 fb40 	bl	174f4 <net_buf_id>
    ee74:	fb08 5000 	mla	r0, r8, r0, r5
    ee78:	4632      	mov	r2, r6
    ee7a:	8843      	ldrh	r3, [r0, #2]
    ee7c:	2157      	movs	r1, #87	; 0x57
    ee7e:	481b      	ldr	r0, [pc, #108]	; (eeec <hci_cmd_done+0xc8>)
    ee80:	f00d fe46 	bl	1cb10 <printk>
	if (cmd(buf)->state && !status) {
    ee84:	4620      	mov	r0, r4
    ee86:	f008 fb35 	bl	174f4 <net_buf_id>
    ee8a:	260c      	movs	r6, #12
    ee8c:	fb06 5000 	mla	r0, r6, r0, r5
    ee90:	6843      	ldr	r3, [r0, #4]
    ee92:	b15b      	cbz	r3, eeac <hci_cmd_done+0x88>
    ee94:	b957      	cbnz	r7, eeac <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ee96:	4620      	mov	r0, r4
    ee98:	f008 fb2c 	bl	174f4 <net_buf_id>
    ee9c:	fb06 5000 	mla	r0, r6, r0, r5
    eea0:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    eea2:	7a1a      	ldrb	r2, [r3, #8]
    eea4:	e9d3 0100 	ldrd	r0, r1, [r3]
    eea8:	f00f fc27 	bl	1e6fa <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    eeac:	4620      	mov	r0, r4
    eeae:	f008 fb21 	bl	174f4 <net_buf_id>
    eeb2:	260c      	movs	r6, #12
    eeb4:	fb06 5000 	mla	r0, r6, r0, r5
    eeb8:	6883      	ldr	r3, [r0, #8]
    eeba:	2b00      	cmp	r3, #0
    eebc:	d0c9      	beq.n	ee52 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    eebe:	4620      	mov	r0, r4
    eec0:	f008 fb18 	bl	174f4 <net_buf_id>
    eec4:	4370      	muls	r0, r6
    eec6:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    eec8:	4620      	mov	r0, r4
    eeca:	f008 fb13 	bl	174f4 <net_buf_id>
    eece:	fb06 5500 	mla	r5, r6, r0, r5
    eed2:	68a8      	ldr	r0, [r5, #8]
}
    eed4:	b002      	add	sp, #8
    eed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    eeda:	f00c bc59 	b.w	1b790 <z_impl_k_sem_give>
    eede:	bf00      	nop
    eee0:	20008648 	.word	0x20008648
    eee4:	0002443c 	.word	0x0002443c
    eee8:	20009bf0 	.word	0x20009bf0
    eeec:	00024476 	.word	0x00024476

0000eef0 <hci_cmd_status>:
{
    eef0:	b538      	push	{r3, r4, r5, lr}
    eef2:	2104      	movs	r1, #4
    eef4:	4604      	mov	r4, r0
    eef6:	3008      	adds	r0, #8
    eef8:	f008 fd6c 	bl	179d4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    eefc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    eefe:	7801      	ldrb	r1, [r0, #0]
    ef00:	4622      	mov	r2, r4
    ef02:	8840      	ldrh	r0, [r0, #2]
    ef04:	f7ff ff8e 	bl	ee24 <hci_cmd_done>
	if (ncmd) {
    ef08:	b125      	cbz	r5, ef14 <hci_cmd_status+0x24>
}
    ef0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ef0e:	4802      	ldr	r0, [pc, #8]	; (ef18 <hci_cmd_status+0x28>)
    ef10:	f00c bc3e 	b.w	1b790 <z_impl_k_sem_give>
    ef14:	bd38      	pop	{r3, r4, r5, pc}
    ef16:	bf00      	nop
    ef18:	200080e8 	.word	0x200080e8

0000ef1c <hci_cmd_complete>:
{
    ef1c:	b538      	push	{r3, r4, r5, lr}
    ef1e:	2103      	movs	r1, #3
    ef20:	4604      	mov	r4, r0
    ef22:	3008      	adds	r0, #8
    ef24:	f008 fd56 	bl	179d4 <net_buf_simple_pull_mem>
	status = buf->data[0];
    ef28:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    ef2a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ef2c:	4622      	mov	r2, r4
    ef2e:	7819      	ldrb	r1, [r3, #0]
    ef30:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ef34:	f7ff ff76 	bl	ee24 <hci_cmd_done>
	if (ncmd) {
    ef38:	b125      	cbz	r5, ef44 <hci_cmd_complete+0x28>
}
    ef3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ef3e:	4802      	ldr	r0, [pc, #8]	; (ef48 <hci_cmd_complete+0x2c>)
    ef40:	f00c bc26 	b.w	1b790 <z_impl_k_sem_give>
    ef44:	bd38      	pop	{r3, r4, r5, pc}
    ef46:	bf00      	nop
    ef48:	200080e8 	.word	0x200080e8

0000ef4c <hci_num_completed_packets>:
{
    ef4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ef50:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    ef52:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    ef54:	6887      	ldr	r7, [r0, #8]
    ef56:	f8df 90dc 	ldr.w	r9, [pc, #220]	; f034 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ef5a:	783b      	ldrb	r3, [r7, #0]
    ef5c:	429d      	cmp	r5, r3
    ef5e:	db01      	blt.n	ef64 <hci_num_completed_packets+0x18>
}
    ef60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    ef64:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    ef68:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    ef6c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    ef70:	4650      	mov	r0, sl
    ef72:	f002 fbc1 	bl	116f8 <bt_conn_lookup_handle>
		if (!conn) {
    ef76:	4604      	mov	r4, r0
    ef78:	b1d0      	cbz	r0, efb0 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ef7a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ef7e:	b37e      	cbz	r6, efe0 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    ef80:	f04f 0320 	mov.w	r3, #32
    ef84:	f3ef 8211 	mrs	r2, BASEPRI
    ef88:	f383 8811 	msr	BASEPRI, r3
    ef8c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ef90:	69e3      	ldr	r3, [r4, #28]
    ef92:	b1a3      	cbz	r3, efbe <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    ef94:	3b01      	subs	r3, #1
    ef96:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ef98:	f382 8811 	msr	BASEPRI, r2
    ef9c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    efa0:	4620      	mov	r0, r4
    efa2:	f002 f997 	bl	112d4 <bt_conn_get_pkts>
    efa6:	3e01      	subs	r6, #1
    efa8:	f00c fbf2 	bl	1b790 <z_impl_k_sem_give>
    efac:	b2b6      	uxth	r6, r6
    efae:	e7e6      	b.n	ef7e <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    efb0:	4652      	mov	r2, sl
    efb2:	2145      	movs	r1, #69	; 0x45
    efb4:	4820      	ldr	r0, [pc, #128]	; (f038 <hci_num_completed_packets+0xec>)
    efb6:	f00d fdab 	bl	1cb10 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    efba:	3501      	adds	r5, #1
    efbc:	e7cd      	b.n	ef5a <hci_num_completed_packets+0xe>
	return list->head;
    efbe:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    efc0:	b12b      	cbz	r3, efce <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    efc2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    efc4:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    efc6:	428b      	cmp	r3, r1
	list->head = node;
    efc8:	6160      	str	r0, [r4, #20]
	list->tail = node;
    efca:	bf08      	it	eq
    efcc:	61a0      	streq	r0, [r4, #24]
    efce:	f382 8811 	msr	BASEPRI, r2
    efd2:	f3bf 8f6f 	isb	sy
			if (!node) {
    efd6:	b93b      	cbnz	r3, efe8 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    efd8:	2145      	movs	r1, #69	; 0x45
    efda:	4818      	ldr	r0, [pc, #96]	; (f03c <hci_num_completed_packets+0xf0>)
    efdc:	f00d fd98 	bl	1cb10 <printk>
		bt_conn_unref(conn);
    efe0:	4620      	mov	r0, r4
    efe2:	f002 fb65 	bl	116b0 <bt_conn_unref>
    efe6:	e7e8      	b.n	efba <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    efe8:	f04f 0220 	mov.w	r2, #32
    efec:	f3ef 8111 	mrs	r1, BASEPRI
    eff0:	f382 8811 	msr	BASEPRI, r2
    eff4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    eff8:	68da      	ldr	r2, [r3, #12]
    effa:	61e2      	str	r2, [r4, #28]
	return list->tail;
    effc:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    effe:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    f002:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    f006:	b98a      	cbnz	r2, f02c <hci_num_completed_packets+0xe0>
	list->head = node;
    f008:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    f00c:	f381 8811 	msr	BASEPRI, r1
    f010:	f3bf 8f6f 	isb	sy
    f014:	2100      	movs	r1, #0
    f016:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f01a:	f00f fb55 	bl	1e6c8 <atomic_test_and_set_bit>
    f01e:	2800      	cmp	r0, #0
    f020:	d1be      	bne.n	efa0 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    f022:	4651      	mov	r1, sl
    f024:	4648      	mov	r0, r9
    f026:	f012 fa83 	bl	21530 <k_queue_append>
    f02a:	e7b9      	b.n	efa0 <hci_num_completed_packets+0x54>
	parent->next = child;
    f02c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f02e:	6263      	str	r3, [r4, #36]	; 0x24
}
    f030:	e7ec      	b.n	f00c <hci_num_completed_packets+0xc0>
    f032:	bf00      	nop
    f034:	20009638 	.word	0x20009638
    f038:	000244ae 	.word	0x000244ae
    f03c:	000244cf 	.word	0x000244cf

0000f040 <bt_hci_cmd_create>:
{
    f040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    f044:	f04f 32ff 	mov.w	r2, #4294967295
    f048:	4606      	mov	r6, r0
    f04a:	f04f 33ff 	mov.w	r3, #4294967295
    f04e:	481d      	ldr	r0, [pc, #116]	; (f0c4 <bt_hci_cmd_create+0x84>)
    f050:	460f      	mov	r7, r1
    f052:	f011 fb77 	bl	20744 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    f056:	4604      	mov	r4, r0
    f058:	b950      	cbnz	r0, f070 <bt_hci_cmd_create+0x30>
    f05a:	491b      	ldr	r1, [pc, #108]	; (f0c8 <bt_hci_cmd_create+0x88>)
    f05c:	481b      	ldr	r0, [pc, #108]	; (f0cc <bt_hci_cmd_create+0x8c>)
    f05e:	f44f 7281 	mov.w	r2, #258	; 0x102
    f062:	f00d fd55 	bl	1cb10 <printk>
    f066:	f44f 7181 	mov.w	r1, #258	; 0x102
    f06a:	4817      	ldr	r0, [pc, #92]	; (f0c8 <bt_hci_cmd_create+0x88>)
    f06c:	f00d fff6 	bl	1d05c <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f070:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    f074:	f104 0a08 	add.w	sl, r4, #8
    f078:	2101      	movs	r1, #1
    f07a:	4650      	mov	r0, sl
    f07c:	f008 fb60 	bl	17740 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    f080:	4620      	mov	r0, r4
    f082:	f884 8014 	strb.w	r8, [r4, #20]
    f086:	f008 fa35 	bl	174f4 <net_buf_id>
    f08a:	f04f 090c 	mov.w	r9, #12
    f08e:	4d10      	ldr	r5, [pc, #64]	; (f0d0 <bt_hci_cmd_create+0x90>)
    f090:	fb09 5000 	mla	r0, r9, r0, r5
    f094:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f096:	4620      	mov	r0, r4
    f098:	f008 fa2c 	bl	174f4 <net_buf_id>
    f09c:	fb09 5000 	mla	r0, r9, r0, r5
    f0a0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    f0a4:	4620      	mov	r0, r4
    f0a6:	f008 fa25 	bl	174f4 <net_buf_id>
    f0aa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    f0ae:	2103      	movs	r1, #3
    f0b0:	4650      	mov	r0, sl
    f0b2:	f8c5 8004 	str.w	r8, [r5, #4]
    f0b6:	f008 fcab 	bl	17a10 <net_buf_simple_add>
	hdr->param_len = param_len;
    f0ba:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    f0bc:	8006      	strh	r6, [r0, #0]
}
    f0be:	4620      	mov	r0, r4
    f0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0c4:	20008648 	.word	0x20008648
    f0c8:	0002439f 	.word	0x0002439f
    f0cc:	00022f17 	.word	0x00022f17
    f0d0:	20009bf0 	.word	0x20009bf0

0000f0d4 <bt_hci_cmd_send_sync>:
{
    f0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0d6:	4607      	mov	r7, r0
    f0d8:	4615      	mov	r5, r2
	if (!buf) {
    f0da:	460c      	mov	r4, r1
{
    f0dc:	b087      	sub	sp, #28
	if (!buf) {
    f0de:	b921      	cbnz	r1, f0ea <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    f0e0:	f7ff ffae 	bl	f040 <bt_hci_cmd_create>
		if (!buf) {
    f0e4:	4604      	mov	r4, r0
    f0e6:	2800      	cmp	r0, #0
    f0e8:	d048      	beq.n	f17c <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f0ea:	2201      	movs	r2, #1
    f0ec:	2100      	movs	r1, #0
    f0ee:	4668      	mov	r0, sp
    f0f0:	f012 fa76 	bl	215e0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f0f4:	4620      	mov	r0, r4
    f0f6:	f008 f9fd 	bl	174f4 <net_buf_id>
    f0fa:	230c      	movs	r3, #12
    f0fc:	4e21      	ldr	r6, [pc, #132]	; (f184 <bt_hci_cmd_send_sync+0xb0>)
    f0fe:	fb03 6000 	mla	r0, r3, r0, r6
    f102:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    f106:	4620      	mov	r0, r4
    f108:	f008 fbb0 	bl	1786c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f10c:	4621      	mov	r1, r4
    f10e:	481e      	ldr	r0, [pc, #120]	; (f188 <bt_hci_cmd_send_sync+0xb4>)
    f110:	f008 fb3a 	bl	17788 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f114:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f118:	2300      	movs	r3, #0
    f11a:	4668      	mov	r0, sp
    f11c:	f00c fb74 	bl	1b808 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f120:	b158      	cbz	r0, f13a <bt_hci_cmd_send_sync+0x66>
    f122:	f240 124d 	movw	r2, #333	; 0x14d
    f126:	4919      	ldr	r1, [pc, #100]	; (f18c <bt_hci_cmd_send_sync+0xb8>)
    f128:	4819      	ldr	r0, [pc, #100]	; (f190 <bt_hci_cmd_send_sync+0xbc>)
    f12a:	f00d fcf1 	bl	1cb10 <printk>
    f12e:	4040      	eors	r0, r0
    f130:	f380 8811 	msr	BASEPRI, r0
    f134:	f04f 0003 	mov.w	r0, #3
    f138:	df02      	svc	2
	status = cmd(buf)->status;
    f13a:	4620      	mov	r0, r4
    f13c:	f008 f9da 	bl	174f4 <net_buf_id>
    f140:	230c      	movs	r3, #12
    f142:	4358      	muls	r0, r3
    f144:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    f146:	b186      	cbz	r6, f16a <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    f148:	4633      	mov	r3, r6
    f14a:	463a      	mov	r2, r7
    f14c:	2157      	movs	r1, #87	; 0x57
    f14e:	4811      	ldr	r0, [pc, #68]	; (f194 <bt_hci_cmd_send_sync+0xc0>)
    f150:	f00d fcde 	bl	1cb10 <printk>
		net_buf_unref(buf);
    f154:	4620      	mov	r0, r4
    f156:	f008 fb45 	bl	177e4 <net_buf_unref>
			return -EIO;
    f15a:	2e09      	cmp	r6, #9
    f15c:	bf0c      	ite	eq
    f15e:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    f162:	f06f 0004 	mvnne.w	r0, #4
}
    f166:	b007      	add	sp, #28
    f168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    f16a:	b115      	cbz	r5, f172 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    f16c:	4630      	mov	r0, r6
		*rsp = buf;
    f16e:	602c      	str	r4, [r5, #0]
    f170:	e7f9      	b.n	f166 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    f172:	4620      	mov	r0, r4
    f174:	f008 fb36 	bl	177e4 <net_buf_unref>
	return 0;
    f178:	4628      	mov	r0, r5
    f17a:	e7f4      	b.n	f166 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    f17c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f180:	e7f1      	b.n	f166 <bt_hci_cmd_send_sync+0x92>
    f182:	bf00      	nop
    f184:	20009bf0 	.word	0x20009bf0
    f188:	20008120 	.word	0x20008120
    f18c:	0002439f 	.word	0x0002439f
    f190:	00022f17 	.word	0x00022f17
    f194:	000244eb 	.word	0x000244eb

0000f198 <hci_le_read_max_data_len>:
{
    f198:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f19a:	4606      	mov	r6, r0
    f19c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f19e:	f242 002f 	movw	r0, #8239	; 0x202f
    f1a2:	2100      	movs	r1, #0
    f1a4:	aa01      	add	r2, sp, #4
    f1a6:	f7ff ff95 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    f1aa:	4604      	mov	r4, r0
    f1ac:	b130      	cbz	r0, f1bc <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    f1ae:	2145      	movs	r1, #69	; 0x45
    f1b0:	4808      	ldr	r0, [pc, #32]	; (f1d4 <hci_le_read_max_data_len+0x3c>)
    f1b2:	f00d fcad 	bl	1cb10 <printk>
}
    f1b6:	4620      	mov	r0, r4
    f1b8:	b002      	add	sp, #8
    f1ba:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f1bc:	9801      	ldr	r0, [sp, #4]
    f1be:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f1c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f1c4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f1c6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f1ca:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f1cc:	f008 fb0a 	bl	177e4 <net_buf_unref>
	return 0;
    f1d0:	e7f1      	b.n	f1b6 <hci_le_read_max_data_len+0x1e>
    f1d2:	bf00      	nop
    f1d4:	0002450c 	.word	0x0002450c

0000f1d8 <set_random_address>:
{
    f1d8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    f1da:	4e15      	ldr	r6, [pc, #84]	; (f230 <set_random_address+0x58>)
    f1dc:	2206      	movs	r2, #6
    f1de:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    f1e2:	4605      	mov	r5, r0
    f1e4:	f00f f93b 	bl	1e45e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f1e8:	4604      	mov	r4, r0
    f1ea:	b1e0      	cbz	r0, f226 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f1ec:	2106      	movs	r1, #6
    f1ee:	f242 0005 	movw	r0, #8197	; 0x2005
    f1f2:	f7ff ff25 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f1f6:	4604      	mov	r4, r0
    f1f8:	b1b8      	cbz	r0, f22a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f1fa:	2206      	movs	r2, #6
    f1fc:	4629      	mov	r1, r5
    f1fe:	3008      	adds	r0, #8
    f200:	f011 face 	bl	207a0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f204:	4621      	mov	r1, r4
    f206:	2200      	movs	r2, #0
    f208:	f242 0005 	movw	r0, #8197	; 0x2005
    f20c:	f7ff ff62 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    f210:	4604      	mov	r4, r0
    f212:	b940      	cbnz	r0, f226 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    f214:	2206      	movs	r2, #6
    f216:	4629      	mov	r1, r5
    f218:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    f21c:	f00f f930 	bl	1e480 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f220:	2301      	movs	r3, #1
    f222:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    f226:	4620      	mov	r0, r4
    f228:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f22a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f22e:	e7fa      	b.n	f226 <set_random_address+0x4e>
    f230:	20008000 	.word	0x20008000

0000f234 <set_le_adv_enable_legacy>:
{
    f234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f236:	4606      	mov	r6, r0
    f238:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f23a:	f242 000a 	movw	r0, #8202	; 0x200a
    f23e:	2101      	movs	r1, #1
    f240:	f7ff fefe 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f244:	4604      	mov	r4, r0
    f246:	b1e0      	cbz	r0, f282 <set_le_adv_enable_legacy+0x4e>
	if (enable) {
    f248:	b1cd      	cbz	r5, f27e <set_le_adv_enable_legacy+0x4a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    f24a:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    f24c:	f00f fa66 	bl	1e71c <net_buf_add_u8.isra.0>
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    f250:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f252:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f254:	3610      	adds	r6, #16
    f256:	9302      	str	r3, [sp, #8]
	state->target = target;
    f258:	9601      	str	r6, [sp, #4]
	state->val = val;
    f25a:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f25e:	f008 f949 	bl	174f4 <net_buf_id>
    f262:	220c      	movs	r2, #12
    f264:	4b08      	ldr	r3, [pc, #32]	; (f288 <set_le_adv_enable_legacy+0x54>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f266:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f268:	fb02 3300 	mla	r3, r2, r0, r3
    f26c:	aa01      	add	r2, sp, #4
    f26e:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f270:	f242 000a 	movw	r0, #8202	; 0x200a
    f274:	2200      	movs	r2, #0
    f276:	f7ff ff2d 	bl	f0d4 <bt_hci_cmd_send_sync>
}
    f27a:	b004      	add	sp, #16
    f27c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    f27e:	4629      	mov	r1, r5
    f280:	e7e4      	b.n	f24c <set_le_adv_enable_legacy+0x18>
		return -ENOBUFS;
    f282:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f286:	e7f8      	b.n	f27a <set_le_adv_enable_legacy+0x46>
    f288:	20009bf0 	.word	0x20009bf0

0000f28c <set_le_scan_enable_legacy>:
{
    f28c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f28e:	2102      	movs	r1, #2
{
    f290:	4604      	mov	r4, r0
    f292:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f294:	f242 000c 	movw	r0, #8204	; 0x200c
    f298:	f7ff fed2 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f29c:	4605      	mov	r5, r0
    f29e:	b348      	cbz	r0, f2f4 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    f2a0:	2102      	movs	r1, #2
    f2a2:	3008      	adds	r0, #8
    f2a4:	f008 fbb4 	bl	17a10 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f2a8:	2c01      	cmp	r4, #1
    f2aa:	4603      	mov	r3, r0
    f2ac:	d11f      	bne.n	f2ee <set_le_scan_enable_legacy+0x62>
    f2ae:	4813      	ldr	r0, [pc, #76]	; (f2fc <set_le_scan_enable_legacy+0x70>)
    f2b0:	f00f f9f9 	bl	1e6a6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f2b4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f2b8:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    f2ba:	701c      	strb	r4, [r3, #0]
	state->target = target;
    f2bc:	4b0f      	ldr	r3, [pc, #60]	; (f2fc <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    f2be:	4628      	mov	r0, r5
    f2c0:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f2c2:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    f2c4:	f004 0401 	and.w	r4, r4, #1
    f2c8:	9302      	str	r3, [sp, #8]
    f2ca:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f2ce:	f008 f911 	bl	174f4 <net_buf_id>
    f2d2:	220c      	movs	r2, #12
    f2d4:	4b0a      	ldr	r3, [pc, #40]	; (f300 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f2d6:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f2d8:	fb02 3300 	mla	r3, r2, r0, r3
    f2dc:	aa01      	add	r2, sp, #4
    f2de:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f2e0:	f242 000c 	movw	r0, #8204	; 0x200c
    f2e4:	2200      	movs	r2, #0
    f2e6:	f7ff fef5 	bl	f0d4 <bt_hci_cmd_send_sync>
}
    f2ea:	b005      	add	sp, #20
    f2ec:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f2ee:	2200      	movs	r2, #0
    f2f0:	7042      	strb	r2, [r0, #1]
    f2f2:	e7e2      	b.n	f2ba <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f2f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f2f8:	e7f7      	b.n	f2ea <set_le_scan_enable_legacy+0x5e>
    f2fa:	bf00      	nop
    f2fc:	20008094 	.word	0x20008094
    f300:	20009bf0 	.word	0x20009bf0

0000f304 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f304:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f308:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f30a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f30e:	460e      	mov	r6, r1
    f310:	4691      	mov	r9, r2
    f312:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f314:	d02c      	beq.n	f370 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f316:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f3f8 <le_adv_set_random_addr.isra.0+0xf4>
    f31a:	b12a      	cbz	r2, f328 <le_adv_set_random_addr.isra.0+0x24>
    f31c:	068c      	lsls	r4, r1, #26
    f31e:	d503      	bpl.n	f328 <le_adv_set_random_addr.isra.0+0x24>
    f320:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f324:	0658      	lsls	r0, r3, #25
    f326:	d563      	bpl.n	f3f0 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f328:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f32c:	f818 3003 	ldrb.w	r3, [r8, r3]
    f330:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f334:	2b01      	cmp	r3, #1
    f336:	d009      	beq.n	f34c <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f338:	ebaa 0505 	sub.w	r5, sl, r5
    f33c:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f340:	f1b9 0f00 	cmp.w	r9, #0
    f344:	d10f      	bne.n	f366 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f346:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f348:	703b      	strb	r3, [r7, #0]
    f34a:	e008      	b.n	f35e <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f34c:	2007      	movs	r0, #7
    f34e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f352:	4440      	add	r0, r8
    f354:	f7ff ff40 	bl	f1d8 <set_random_address>
				if (err) {
    f358:	4604      	mov	r4, r0
    f35a:	2800      	cmp	r0, #0
    f35c:	d0ec      	beq.n	f338 <le_adv_set_random_addr.isra.0+0x34>
}
    f35e:	4620      	mov	r0, r4
    f360:	b002      	add	sp, #8
    f362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f366:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f368:	bf48      	it	mi
    f36a:	f043 0302 	orrmi.w	r3, r3, #2
    f36e:	e7ea      	b.n	f346 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f370:	f011 0604 	ands.w	r6, r1, #4
    f374:	d014      	beq.n	f3a0 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f376:	f8df 8080 	ldr.w	r8, [pc, #128]	; f3f8 <le_adv_set_random_addr.isra.0+0xf4>
    f37a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f37e:	f818 3003 	ldrb.w	r3, [r8, r3]
    f382:	00ee      	lsls	r6, r5, #3
    f384:	2b01      	cmp	r3, #1
    f386:	d105      	bne.n	f394 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f388:	2007      	movs	r0, #7
    f38a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f38e:	4440      	add	r0, r8
    f390:	f7ff ff22 	bl	f1d8 <set_random_address>
			*own_addr_type = id_addr->type;
    f394:	1b75      	subs	r5, r6, r5
    f396:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f39a:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f39c:	703b      	strb	r3, [r7, #0]
    f39e:	e7de      	b.n	f35e <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f3a0:	4816      	ldr	r0, [pc, #88]	; (f3fc <le_adv_set_random_addr.isra.0+0xf8>)
    f3a2:	f00f f980 	bl	1e6a6 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f3a6:	0682      	lsls	r2, r0, #26
    f3a8:	d417      	bmi.n	f3da <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f3aa:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f3ac:	2106      	movs	r1, #6
    f3ae:	4668      	mov	r0, sp
    f3b0:	f001 feb6 	bl	11120 <bt_rand>
	if (err) {
    f3b4:	4604      	mov	r4, r0
    f3b6:	b948      	cbnz	r0, f3cc <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f3b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f3bc:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f3be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f3c2:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f3c6:	f7ff ff07 	bl	f1d8 <set_random_address>
    f3ca:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f3cc:	2001      	movs	r0, #1
    f3ce:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f3d0:	2d00      	cmp	r5, #0
    f3d2:	d0c4      	beq.n	f35e <le_adv_set_random_addr.isra.0+0x5a>
				set_le_scan_enable(true);
    f3d4:	f00f fa18 	bl	1e808 <set_le_scan_enable.isra.0>
		if (err) {
    f3d8:	e7c1      	b.n	f35e <le_adv_set_random_addr.isra.0+0x5a>
    f3da:	4808      	ldr	r0, [pc, #32]	; (f3fc <le_adv_set_random_addr.isra.0+0xf8>)
    f3dc:	f00f f963 	bl	1e6a6 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f3e0:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f3e2:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f3e6:	d5e0      	bpl.n	f3aa <le_adv_set_random_addr.isra.0+0xa6>
				set_le_scan_enable(false);
    f3e8:	4630      	mov	r0, r6
    f3ea:	f00f fa0d 	bl	1e808 <set_le_scan_enable.isra.0>
    f3ee:	e7dd      	b.n	f3ac <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f3f0:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f3f4:	e7b3      	b.n	f35e <le_adv_set_random_addr.isra.0+0x5a>
    f3f6:	bf00      	nop
    f3f8:	20008000 	.word	0x20008000
    f3fc:	20008094 	.word	0x20008094

0000f400 <hci_set_ad>:
{
    f400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f404:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f406:	2120      	movs	r1, #32
{
    f408:	4682      	mov	sl, r0
    f40a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f40c:	f7ff fe18 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f410:	4606      	mov	r6, r0
    f412:	2800      	cmp	r0, #0
    f414:	d056      	beq.n	f4c4 <hci_set_ad+0xc4>
    f416:	2120      	movs	r1, #32
    f418:	3008      	adds	r0, #8
    f41a:	f008 faf9 	bl	17a10 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f41e:	2220      	movs	r2, #32
    f420:	4681      	mov	r9, r0
    f422:	2100      	movs	r1, #0
    f424:	f00f f857 	bl	1e4d6 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f428:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f42c:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f42e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f432:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f434:	2300      	movs	r3, #0
    f436:	f8d4 8000 	ldr.w	r8, [r4]
    f43a:	6862      	ldr	r2, [r4, #4]
    f43c:	4293      	cmp	r3, r2
    f43e:	d30d      	bcc.n	f45c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f440:	9b00      	ldr	r3, [sp, #0]
    f442:	3408      	adds	r4, #8
    f444:	429c      	cmp	r4, r3
    f446:	d1f5      	bne.n	f434 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f448:	2200      	movs	r2, #0
    f44a:	4631      	mov	r1, r6
    f44c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f44e:	f889 5000 	strb.w	r5, [r9]
}
    f452:	b003      	add	sp, #12
    f454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f458:	f7ff be3c 	b.w	f0d4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f45c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f460:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f462:	1881      	adds	r1, r0, r2
    f464:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f466:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f46a:	d914      	bls.n	f496 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f46c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f470:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f474:	d101      	bne.n	f47a <hci_set_ad+0x7a>
    f476:	2a00      	cmp	r2, #0
    f478:	dc0b      	bgt.n	f492 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f47a:	2145      	movs	r1, #69	; 0x45
    f47c:	4813      	ldr	r0, [pc, #76]	; (f4cc <hci_set_ad+0xcc>)
    f47e:	f00d fb47 	bl	1cb10 <printk>
		net_buf_unref(buf);
    f482:	4630      	mov	r0, r6
    f484:	f008 f9ae 	bl	177e4 <net_buf_unref>
					return -EINVAL;
    f488:	f06f 0015 	mvn.w	r0, #21
}
    f48c:	b003      	add	sp, #12
    f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f492:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f496:	b2d7      	uxtb	r7, r2
    f498:	1c79      	adds	r1, r7, #1
    f49a:	f80b 1005 	strb.w	r1, [fp, r5]
    f49e:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f4a0:	b2c9      	uxtb	r1, r1
    f4a2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f4a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f4aa:	fa5b f080 	uxtab	r0, fp, r0
    f4ae:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f4b0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f4b2:	f00e ffe5 	bl	1e480 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f4b6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f4b8:	443d      	add	r5, r7
    f4ba:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f4bc:	3301      	adds	r3, #1
    f4be:	f108 0808 	add.w	r8, r8, #8
    f4c2:	e7ba      	b.n	f43a <hci_set_ad+0x3a>
		return -ENOBUFS;
    f4c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f4c8:	e7e0      	b.n	f48c <hci_set_ad+0x8c>
    f4ca:	bf00      	nop
    f4cc:	00024531 	.word	0x00024531

0000f4d0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4d4:	b087      	sub	sp, #28
    f4d6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f4da:	4606      	mov	r6, r0
    f4dc:	460c      	mov	r4, r1
    f4de:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f4e0:	2100      	movs	r1, #0
    f4e2:	2210      	movs	r2, #16
    f4e4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f4e6:	461d      	mov	r5, r3
    f4e8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f4ec:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f4f0:	f00e fff1 	bl	1e4d6 <memset>
	if (use_name) {
    f4f4:	f1b8 0f00 	cmp.w	r8, #0
    f4f8:	d00e      	beq.n	f518 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f4fa:	bbb4      	cbnz	r4, f56a <le_adv_update.constprop.0+0x9a>
    f4fc:	2d00      	cmp	r5, #0
    f4fe:	d13f      	bne.n	f580 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f500:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f5b4 <le_adv_update.constprop.0+0xe4>
    f504:	4658      	mov	r0, fp
    f506:	f00e ff7d 	bl	1e404 <strlen>
    f50a:	2309      	movs	r3, #9
    f50c:	f88d 0001 	strb.w	r0, [sp, #1]
    f510:	f88d 3000 	strb.w	r3, [sp]
    f514:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f518:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f51c:	f1b8 0f00 	cmp.w	r8, #0
    f520:	d030      	beq.n	f584 <le_adv_update.constprop.0+0xb4>
    f522:	f1ba 0f00 	cmp.w	sl, #0
    f526:	d12d      	bne.n	f584 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f528:	2301      	movs	r3, #1
			d_len = 2;
    f52a:	2202      	movs	r2, #2
			d[1].data = &data;
    f52c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f530:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f532:	f242 0008 	movw	r0, #8200	; 0x2008
    f536:	a902      	add	r1, sp, #8
    f538:	f7ff ff62 	bl	f400 <hci_set_ad>
		if (err) {
    f53c:	4604      	mov	r4, r0
    f53e:	b938      	cbnz	r0, f550 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f540:	f1ba 0f00 	cmp.w	sl, #0
    f544:	d120      	bne.n	f588 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f546:	2104      	movs	r1, #4
    f548:	f106 0010 	add.w	r0, r6, #16
    f54c:	f00f f8b1 	bl	1e6b2 <atomic_or>
}
    f550:	4620      	mov	r0, r4
    f552:	b007      	add	sp, #28
    f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f558:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f55c:	3a08      	subs	r2, #8
    f55e:	2a01      	cmp	r2, #1
    f560:	d925      	bls.n	f5ae <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f562:	3301      	adds	r3, #1
    f564:	429f      	cmp	r7, r3
    f566:	d1f7      	bne.n	f558 <le_adv_update.constprop.0+0x88>
    f568:	e7c8      	b.n	f4fc <le_adv_update.constprop.0+0x2c>
    f56a:	2300      	movs	r3, #0
    f56c:	e7fa      	b.n	f564 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f56e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f572:	3a08      	subs	r2, #8
    f574:	2a01      	cmp	r2, #1
    f576:	d91a      	bls.n	f5ae <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f578:	3301      	adds	r3, #1
    f57a:	4599      	cmp	r9, r3
    f57c:	d1f7      	bne.n	f56e <le_adv_update.constprop.0+0x9e>
    f57e:	e7bf      	b.n	f500 <le_adv_update.constprop.0+0x30>
    f580:	2300      	movs	r3, #0
    f582:	e7fa      	b.n	f57a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f584:	2201      	movs	r2, #1
    f586:	e7d4      	b.n	f532 <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f588:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f58a:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f58e:	f1b8 0f00 	cmp.w	r8, #0
    f592:	d003      	beq.n	f59c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f594:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f596:	2202      	movs	r2, #2
			d[1].data = &data;
    f598:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f59c:	f242 0009 	movw	r0, #8201	; 0x2009
    f5a0:	a902      	add	r1, sp, #8
    f5a2:	f7ff ff2d 	bl	f400 <hci_set_ad>
		if (err) {
    f5a6:	2800      	cmp	r0, #0
    f5a8:	d0cd      	beq.n	f546 <le_adv_update.constprop.0+0x76>
    f5aa:	4604      	mov	r4, r0
    f5ac:	e7d0      	b.n	f550 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f5ae:	f06f 0415 	mvn.w	r4, #21
    f5b2:	e7cd      	b.n	f550 <le_adv_update.constprop.0+0x80>
    f5b4:	00022d56 	.word	0x00022d56

0000f5b8 <start_le_scan_legacy>:
{
    f5b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f5ba:	460e      	mov	r6, r1
    f5bc:	4605      	mov	r5, r0
    f5be:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f5c0:	2100      	movs	r1, #0
    f5c2:	2207      	movs	r2, #7
    f5c4:	4668      	mov	r0, sp
    f5c6:	f00e ff86 	bl	1e4d6 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f5ca:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f5ce:	4e26      	ldr	r6, [pc, #152]	; (f668 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f5d0:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f5d2:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f5d4:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f5d8:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f5dc:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f5e0:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f5e4:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f5e8:	f00f f85d 	bl	1e6a6 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f5ec:	0641      	lsls	r1, r0, #25
    f5ee:	d413      	bmi.n	f618 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f5f0:	f00f f8bc 	bl	1e76c <le_set_private_addr.constprop.0>
			if (err) {
    f5f4:	4604      	mov	r4, r0
    f5f6:	b160      	cbz	r0, f612 <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f5f8:	2d01      	cmp	r5, #1
    f5fa:	d02e      	beq.n	f65a <start_le_scan_legacy+0xa2>
    f5fc:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f600:	f00f f851 	bl	1e6a6 <atomic_get>
    f604:	0642      	lsls	r2, r0, #25
    f606:	d528      	bpl.n	f65a <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f608:	4622      	mov	r2, r4
    f60a:	2157      	movs	r1, #87	; 0x57
    f60c:	4817      	ldr	r0, [pc, #92]	; (f66c <start_le_scan_legacy+0xb4>)
    f60e:	f00d fa7f 	bl	1cb10 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f612:	2301      	movs	r3, #1
    f614:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f618:	2107      	movs	r1, #7
    f61a:	f242 000b 	movw	r0, #8203	; 0x200b
    f61e:	f7ff fd0f 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f622:	4604      	mov	r4, r0
    f624:	b1e0      	cbz	r0, f660 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f626:	2207      	movs	r2, #7
    f628:	4669      	mov	r1, sp
    f62a:	3008      	adds	r0, #8
    f62c:	f011 f8b8 	bl	207a0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f630:	4621      	mov	r1, r4
    f632:	2200      	movs	r2, #0
    f634:	f242 000b 	movw	r0, #8203	; 0x200b
    f638:	f7ff fd4c 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    f63c:	4604      	mov	r4, r0
    f63e:	b960      	cbnz	r0, f65a <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f640:	2001      	movs	r0, #1
    f642:	f7ff fe23 	bl	f28c <set_le_scan_enable_legacy>
	if (err) {
    f646:	4604      	mov	r4, r0
    f648:	b938      	cbnz	r0, f65a <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f64a:	1e6b      	subs	r3, r5, #1
    f64c:	425a      	negs	r2, r3
    f64e:	f04f 0107 	mov.w	r1, #7
    f652:	4807      	ldr	r0, [pc, #28]	; (f670 <start_le_scan_legacy+0xb8>)
    f654:	415a      	adcs	r2, r3
    f656:	f00f f850 	bl	1e6fa <atomic_set_bit_to>
}
    f65a:	4620      	mov	r0, r4
    f65c:	b002      	add	sp, #8
    f65e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f660:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f664:	e7f9      	b.n	f65a <start_le_scan_legacy+0xa2>
    f666:	bf00      	nop
    f668:	20008000 	.word	0x20008000
    f66c:	0002454f 	.word	0x0002454f
    f670:	20008094 	.word	0x20008094

0000f674 <bt_le_scan_random_addr_check>:
{
    f674:	b508      	push	{r3, lr}
    f676:	4802      	ldr	r0, [pc, #8]	; (f680 <bt_le_scan_random_addr_check+0xc>)
    f678:	f00f f815 	bl	1e6a6 <atomic_get>
}
    f67c:	2001      	movs	r0, #1
    f67e:	bd08      	pop	{r3, pc}
    f680:	20008028 	.word	0x20008028

0000f684 <bt_le_create_conn_legacy>:
{
    f684:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f688:	4e30      	ldr	r6, [pc, #192]	; (f74c <bt_le_create_conn_legacy+0xc8>)
{
    f68a:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f68c:	7833      	ldrb	r3, [r6, #0]
    f68e:	2b01      	cmp	r3, #1
    f690:	d00b      	beq.n	f6aa <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f692:	2119      	movs	r1, #25
    f694:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f698:	f896 8000 	ldrb.w	r8, [r6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f69c:	f7ff fcd0 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f6a0:	4607      	mov	r7, r0
    f6a2:	b950      	cbnz	r0, f6ba <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f6a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f6a8:	e004      	b.n	f6b4 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f6aa:	1c70      	adds	r0, r6, #1
    f6ac:	f7ff fd94 	bl	f1d8 <set_random_address>
			if (err) {
    f6b0:	2800      	cmp	r0, #0
    f6b2:	d0ee      	beq.n	f692 <bt_le_create_conn_legacy+0xe>
}
    f6b4:	b004      	add	sp, #16
    f6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f6ba:	2119      	movs	r1, #25
    f6bc:	3008      	adds	r0, #8
    f6be:	f008 f9a7 	bl	17a10 <net_buf_simple_add>
    f6c2:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f6c4:	2219      	movs	r2, #25
    f6c6:	2100      	movs	r1, #0
    f6c8:	f00e ff05 	bl	1e4d6 <memset>
	cp->own_addr_type = own_addr_type;
    f6cc:	f884 800c 	strb.w	r8, [r4, #12]
		if (!bt_dev.le.rl_size ||
    f6d0:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    f6d4:	b3bb      	cbz	r3, f746 <bt_le_create_conn_legacy+0xc2>
    f6d6:	f896 20e1 	ldrb.w	r2, [r6, #225]	; 0xe1
    f6da:	429a      	cmp	r2, r3
    f6dc:	d833      	bhi.n	f746 <bt_le_create_conn_legacy+0xc2>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    f6de:	f105 0188 	add.w	r1, r5, #136	; 0x88
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f6e2:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f6e6:	1d60      	adds	r0, r4, #5
    f6e8:	f00e ffe0 	bl	1e6ac <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f6ec:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f6f0:	89b3      	ldrh	r3, [r6, #12]
	cmd(buf)->state = &state;
    f6f2:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f6f4:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f6f6:	89f3      	ldrh	r3, [r6, #14]
    f6f8:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f6fa:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f6fe:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f702:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f706:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f70a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f70e:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f712:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f716:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f71a:	4b0d      	ldr	r3, [pc, #52]	; (f750 <bt_le_create_conn_legacy+0xcc>)
    f71c:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f71e:	230b      	movs	r3, #11
    f720:	9302      	str	r3, [sp, #8]
	state->val = val;
    f722:	2301      	movs	r3, #1
    f724:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f728:	f007 fee4 	bl	174f4 <net_buf_id>
    f72c:	220c      	movs	r2, #12
    f72e:	4b09      	ldr	r3, [pc, #36]	; (f754 <bt_le_create_conn_legacy+0xd0>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f730:	4639      	mov	r1, r7
	cmd(buf)->state = &state;
    f732:	fb02 3300 	mla	r3, r2, r0, r3
    f736:	aa01      	add	r2, sp, #4
    f738:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f73a:	f242 000d 	movw	r0, #8205	; 0x200d
    f73e:	4642      	mov	r2, r8
    f740:	f7ff fcc8 	bl	f0d4 <bt_hci_cmd_send_sync>
    f744:	e7b6      	b.n	f6b4 <bt_le_create_conn_legacy+0x30>
			peer_addr = &conn->le.resp_addr;
    f746:	f105 0196 	add.w	r1, r5, #150	; 0x96
    f74a:	e7ca      	b.n	f6e2 <bt_le_create_conn_legacy+0x5e>
    f74c:	20008000 	.word	0x20008000
    f750:	20008094 	.word	0x20008094
    f754:	20009bf0 	.word	0x20009bf0

0000f758 <bt_le_create_conn_cancel>:
{
    f758:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f75a:	2100      	movs	r1, #0
{
    f75c:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f75e:	f242 000e 	movw	r0, #8206	; 0x200e
    f762:	f7ff fc6d 	bl	f040 <bt_hci_cmd_create>
	state->target = target;
    f766:	4b0c      	ldr	r3, [pc, #48]	; (f798 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f768:	2500      	movs	r5, #0
	state->target = target;
    f76a:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f76c:	230b      	movs	r3, #11
    f76e:	4604      	mov	r4, r0
    f770:	9302      	str	r3, [sp, #8]
	state->val = val;
    f772:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f776:	f007 febd 	bl	174f4 <net_buf_id>
    f77a:	220c      	movs	r2, #12
    f77c:	4b07      	ldr	r3, [pc, #28]	; (f79c <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f77e:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f780:	fb02 3300 	mla	r3, r2, r0, r3
    f784:	aa01      	add	r2, sp, #4
    f786:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f788:	f242 000e 	movw	r0, #8206	; 0x200e
    f78c:	462a      	mov	r2, r5
    f78e:	f7ff fca1 	bl	f0d4 <bt_hci_cmd_send_sync>
}
    f792:	b005      	add	sp, #20
    f794:	bd30      	pop	{r4, r5, pc}
    f796:	bf00      	nop
    f798:	20008094 	.word	0x20008094
    f79c:	20009bf0 	.word	0x20009bf0

0000f7a0 <bt_security_err_get>:
	switch (hci_err) {
    f7a0:	2829      	cmp	r0, #41	; 0x29
    f7a2:	bf9a      	itte	ls
    f7a4:	4b01      	ldrls	r3, [pc, #4]	; (f7ac <bt_security_err_get+0xc>)
    f7a6:	5c18      	ldrbls	r0, [r3, r0]
{
    f7a8:	2008      	movhi	r0, #8
}
    f7aa:	4770      	bx	lr
    f7ac:	00024bd7 	.word	0x00024bd7

0000f7b0 <hci_encrypt_key_refresh_complete>:
{
    f7b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    f7b2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    f7b4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f7b8:	4630      	mov	r0, r6
    f7ba:	f001 ff9d 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    f7be:	4604      	mov	r4, r0
    f7c0:	b930      	cbnz	r0, f7d0 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f7c2:	4632      	mov	r2, r6
}
    f7c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f7c8:	2145      	movs	r1, #69	; 0x45
    f7ca:	4810      	ldr	r0, [pc, #64]	; (f80c <hci_encrypt_key_refresh_complete+0x5c>)
    f7cc:	f00d b9a0 	b.w	1cb10 <printk>
	if (evt->status) {
    f7d0:	7829      	ldrb	r1, [r5, #0]
    f7d2:	b159      	cbz	r1, f7ec <hci_encrypt_key_refresh_complete+0x3c>
		bt_conn_security_changed(conn, evt->status,
    f7d4:	4608      	mov	r0, r1
    f7d6:	f7ff ffe3 	bl	f7a0 <bt_security_err_get>
    f7da:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f7dc:	4620      	mov	r0, r4
    f7de:	f001 fde5 	bl	113ac <bt_conn_security_changed>
	bt_conn_unref(conn);
    f7e2:	4620      	mov	r0, r4
}
    f7e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f7e8:	f001 bf62 	b.w	116b0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    f7ec:	7886      	ldrb	r6, [r0, #2]
    f7ee:	2e01      	cmp	r6, #1
    f7f0:	d104      	bne.n	f7fc <hci_encrypt_key_refresh_complete+0x4c>
		bt_smp_update_keys(conn);
    f7f2:	f007 fc7b 	bl	170ec <bt_smp_update_keys>
	if (!conn->encrypt) {
    f7f6:	7ae3      	ldrb	r3, [r4, #11]
    f7f8:	b91b      	cbnz	r3, f802 <hci_encrypt_key_refresh_complete+0x52>
		conn->sec_level = BT_SECURITY_L1;
    f7fa:	7266      	strb	r6, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f7fc:	2200      	movs	r2, #0
    f7fe:	7829      	ldrb	r1, [r5, #0]
    f800:	e7ec      	b.n	f7dc <hci_encrypt_key_refresh_complete+0x2c>
    f802:	4620      	mov	r0, r4
    f804:	f7ff f9c4 	bl	eb90 <update_sec_level.part.0>
    f808:	e7f8      	b.n	f7fc <hci_encrypt_key_refresh_complete+0x4c>
    f80a:	bf00      	nop
    f80c:	000242ab 	.word	0x000242ab

0000f810 <hci_encrypt_change>:
{
    f810:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    f812:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f814:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f818:	4630      	mov	r0, r6
    f81a:	f001 ff6d 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    f81e:	4604      	mov	r4, r0
    f820:	b930      	cbnz	r0, f830 <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f822:	4632      	mov	r2, r6
}
    f824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f828:	2145      	movs	r1, #69	; 0x45
    f82a:	4812      	ldr	r0, [pc, #72]	; (f874 <hci_encrypt_change+0x64>)
    f82c:	f00d b970 	b.w	1cb10 <printk>
	if (evt->status) {
    f830:	7829      	ldrb	r1, [r5, #0]
    f832:	b159      	cbz	r1, f84c <hci_encrypt_change+0x3c>
		bt_conn_security_changed(conn, evt->status,
    f834:	4608      	mov	r0, r1
    f836:	f7ff ffb3 	bl	f7a0 <bt_security_err_get>
    f83a:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f83c:	4620      	mov	r0, r4
    f83e:	f001 fdb5 	bl	113ac <bt_conn_security_changed>
	bt_conn_unref(conn);
    f842:	4620      	mov	r0, r4
}
    f844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f848:	f001 bf32 	b.w	116b0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    f84c:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    f84e:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    f850:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    f852:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    f854:	d102      	bne.n	f85c <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
    f856:	b923      	cbnz	r3, f862 <hci_encrypt_change+0x52>
		conn->sec_level = BT_SECURITY_L1;
    f858:	2301      	movs	r3, #1
    f85a:	7263      	strb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f85c:	2200      	movs	r2, #0
    f85e:	7829      	ldrb	r1, [r5, #0]
    f860:	e7ec      	b.n	f83c <hci_encrypt_change+0x2c>
			bt_smp_update_keys(conn);
    f862:	f007 fc43 	bl	170ec <bt_smp_update_keys>
	if (!conn->encrypt) {
    f866:	7ae3      	ldrb	r3, [r4, #11]
    f868:	2b00      	cmp	r3, #0
    f86a:	d0f5      	beq.n	f858 <hci_encrypt_change+0x48>
    f86c:	4620      	mov	r0, r4
    f86e:	f7ff f98f 	bl	eb90 <update_sec_level.part.0>
    f872:	e7f3      	b.n	f85c <hci_encrypt_change+0x4c>
    f874:	000242ab 	.word	0x000242ab

0000f878 <bt_id_add>:
{
    f878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f87c:	4c54      	ldr	r4, [pc, #336]	; (f9d0 <bt_id_add+0x158>)
{
    f87e:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f880:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    f884:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f888:	b10a      	cbz	r2, f88e <bt_id_add+0x16>
    f88a:	429a      	cmp	r2, r3
    f88c:	d209      	bcs.n	f8a2 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
    f88e:	3301      	adds	r3, #1
    f890:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    f894:	7a2b      	ldrb	r3, [r5, #8]
    f896:	f043 0304 	orr.w	r3, r3, #4
    f89a:	722b      	strb	r3, [r5, #8]
}
    f89c:	b002      	add	sp, #8
    f89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    f8a2:	2100      	movs	r1, #0
    f8a4:	2206      	movs	r2, #6
    f8a6:	4608      	mov	r0, r1
    f8a8:	f002 f860 	bl	1196c <bt_conn_lookup_state_le>
	if (conn) {
    f8ac:	4606      	mov	r6, r0
    f8ae:	b178      	cbz	r0, f8d0 <bt_id_add+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f8b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f8b4:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f8b8:	f00e fefb 	bl	1e6b2 <atomic_or>
		bt_conn_unref(conn);
    f8bc:	4630      	mov	r0, r6
	keys->state |= flag;
    f8be:	7a2b      	ldrb	r3, [r5, #8]
    f8c0:	f043 0301 	orr.w	r3, r3, #1
    f8c4:	722b      	strb	r3, [r5, #8]
}
    f8c6:	b002      	add	sp, #8
    f8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    f8cc:	f001 bef0 	b.w	116b0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f8d0:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f8d4:	f00e fee7 	bl	1e6a6 <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    f8d8:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f8da:	f3c0 1740 	ubfx	r7, r0, #5, #1
    f8de:	483d      	ldr	r0, [pc, #244]	; (f9d4 <bt_id_add+0x15c>)
    f8e0:	f7fe ffc4 	bl	e86c <bt_adv_foreach>
	if (scan_enabled) {
    f8e4:	b117      	cbz	r7, f8ec <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    f8e6:	4630      	mov	r0, r6
    f8e8:	f00e ff8e 	bl	1e808 <set_le_scan_enable.isra.0>
	if (bt_dev.le.rl_entries) {
    f8ec:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f8f0:	b143      	cbz	r3, f904 <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f8f2:	2000      	movs	r0, #0
    f8f4:	f00e ff71 	bl	1e7da <addr_res_enable>
		if (err) {
    f8f8:	b120      	cbz	r0, f904 <bt_id_add+0x8c>
			BT_WARN("Failed to disable address resolution");
    f8fa:	2157      	movs	r1, #87	; 0x57
    f8fc:	4836      	ldr	r0, [pc, #216]	; (f9d8 <bt_id_add+0x160>)
		BT_WARN("Set privacy mode command is not supported");
    f8fe:	f00d f907 	bl	1cb10 <printk>
	if (err) {
    f902:	e01c      	b.n	f93e <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    f904:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    f908:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f90c:	429a      	cmp	r2, r3
    f90e:	d124      	bne.n	f95a <bt_id_add+0xe2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    f910:	2157      	movs	r1, #87	; 0x57
    f912:	4832      	ldr	r0, [pc, #200]	; (f9dc <bt_id_add+0x164>)
    f914:	f00d f8fc 	bl	1cb10 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    f918:	2200      	movs	r2, #0
    f91a:	f242 0029 	movw	r0, #8233	; 0x2029
    f91e:	4611      	mov	r1, r2
    f920:	f7ff fbd8 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (err) {
    f924:	b110      	cbz	r0, f92c <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
    f926:	2145      	movs	r1, #69	; 0x45
    f928:	482d      	ldr	r0, [pc, #180]	; (f9e0 <bt_id_add+0x168>)
    f92a:	e7e8      	b.n	f8fe <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    f92c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f930:	3301      	adds	r3, #1
    f932:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    f936:	7a2b      	ldrb	r3, [r5, #8]
    f938:	f043 0304 	orr.w	r3, r3, #4
    f93c:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f93e:	2001      	movs	r0, #1
    f940:	f00e ff4b 	bl	1e7da <addr_res_enable>
	if (scan_enabled) {
    f944:	b117      	cbz	r7, f94c <bt_id_add+0xd4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    f946:	2001      	movs	r0, #1
    f948:	f00e ff5e 	bl	1e808 <set_le_scan_enable.isra.0>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f94c:	2100      	movs	r1, #0
    f94e:	4825      	ldr	r0, [pc, #148]	; (f9e4 <bt_id_add+0x16c>)
}
    f950:	b002      	add	sp, #8
    f952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f956:	f7fe bf89 	b.w	e86c <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    f95a:	f105 0801 	add.w	r8, r5, #1
    f95e:	4640      	mov	r0, r8
    f960:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    f964:	f00e ff52 	bl	1e80c <hci_id_add.constprop.0>
	if (err) {
    f968:	4606      	mov	r6, r0
    f96a:	b110      	cbz	r0, f972 <bt_id_add+0xfa>
		BT_ERR("Failed to add IRK to controller");
    f96c:	2145      	movs	r1, #69	; 0x45
    f96e:	481e      	ldr	r0, [pc, #120]	; (f9e8 <bt_id_add+0x170>)
    f970:	e7c5      	b.n	f8fe <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    f972:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f976:	3301      	adds	r3, #1
    f978:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    f97c:	7a2b      	ldrb	r3, [r5, #8]
    f97e:	f043 0304 	orr.w	r3, r3, #4
    f982:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    f984:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    f988:	075b      	lsls	r3, r3, #29
    f98a:	d402      	bmi.n	f992 <bt_id_add+0x11a>
		BT_WARN("Set privacy mode command is not supported");
    f98c:	2157      	movs	r1, #87	; 0x57
    f98e:	4817      	ldr	r0, [pc, #92]	; (f9ec <bt_id_add+0x174>)
    f990:	e7b5      	b.n	f8fe <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    f992:	4641      	mov	r1, r8
    f994:	4668      	mov	r0, sp
    f996:	f00e fe89 	bl	1e6ac <bt_addr_le_copy>
	cp.mode = mode;
    f99a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f99c:	2108      	movs	r1, #8
    f99e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    f9a2:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f9a6:	f7ff fb4b 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    f9aa:	4604      	mov	r4, r0
    f9ac:	b910      	cbnz	r0, f9b4 <bt_id_add+0x13c>
		BT_ERR("Failed to set privacy mode");
    f9ae:	2145      	movs	r1, #69	; 0x45
    f9b0:	480f      	ldr	r0, [pc, #60]	; (f9f0 <bt_id_add+0x178>)
    f9b2:	e7a4      	b.n	f8fe <bt_id_add+0x86>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f9b4:	2208      	movs	r2, #8
    f9b6:	4669      	mov	r1, sp
    f9b8:	4410      	add	r0, r2
    f9ba:	f010 fef1 	bl	207a0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    f9be:	4632      	mov	r2, r6
    f9c0:	4621      	mov	r1, r4
    f9c2:	f242 004e 	movw	r0, #8270	; 0x204e
    f9c6:	f7ff fb85 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d0b7      	beq.n	f93e <bt_id_add+0xc6>
    f9ce:	e7ee      	b.n	f9ae <bt_id_add+0x136>
    f9d0:	20008000 	.word	0x20008000
    f9d4:	0001e791 	.word	0x0001e791
    f9d8:	0002458a 	.word	0x0002458a
    f9dc:	000245b4 	.word	0x000245b4
    f9e0:	000245ea 	.word	0x000245ea
    f9e4:	0001e7bb 	.word	0x0001e7bb
    f9e8:	0002460f 	.word	0x0002460f
    f9ec:	00024634 	.word	0x00024634
    f9f0:	00024663 	.word	0x00024663

0000f9f4 <bt_id_del>:
{
    f9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    f9f8:	4c47      	ldr	r4, [pc, #284]	; (fb18 <bt_id_del+0x124>)
{
    f9fa:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    f9fc:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    fa00:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	if (!bt_dev.le.rl_size ||
    fa04:	b112      	cbz	r2, fa0c <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    fa06:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    fa08:	4293      	cmp	r3, r2
    fa0a:	dd08      	ble.n	fa1e <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    fa0c:	3b01      	subs	r3, #1
    fa0e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    fa12:	7a2b      	ldrb	r3, [r5, #8]
    fa14:	f023 0304 	bic.w	r3, r3, #4
    fa18:	722b      	strb	r3, [r5, #8]
}
    fa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    fa1e:	2100      	movs	r1, #0
    fa20:	2206      	movs	r2, #6
    fa22:	4608      	mov	r0, r1
    fa24:	f001 ffa2 	bl	1196c <bt_conn_lookup_state_le>
	if (conn) {
    fa28:	4606      	mov	r6, r0
    fa2a:	b170      	cbz	r0, fa4a <bt_id_del+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fa2c:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fa30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fa34:	f00e fe3d 	bl	1e6b2 <atomic_or>
	keys->state |= flag;
    fa38:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    fa3a:	4630      	mov	r0, r6
	keys->state |= flag;
    fa3c:	f043 0302 	orr.w	r3, r3, #2
    fa40:	722b      	strb	r3, [r5, #8]
}
    fa42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    fa46:	f001 be33 	b.w	116b0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fa4a:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fa4e:	f00e fe2a 	bl	1e6a6 <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    fa52:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fa54:	f3c0 1840 	ubfx	r8, r0, #5, #1
    fa58:	4830      	ldr	r0, [pc, #192]	; (fb1c <bt_id_del+0x128>)
    fa5a:	f7fe ff07 	bl	e86c <bt_adv_foreach>
	if (scan_enabled) {
    fa5e:	f1b8 0f00 	cmp.w	r8, #0
    fa62:	d002      	beq.n	fa6a <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    fa64:	4630      	mov	r0, r6
    fa66:	f00e fecf 	bl	1e808 <set_le_scan_enable.isra.0>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    fa6a:	2000      	movs	r0, #0
    fa6c:	f00e feb5 	bl	1e7da <addr_res_enable>
	if (err) {
    fa70:	4606      	mov	r6, r0
    fa72:	b1b0      	cbz	r0, faa2 <bt_id_del+0xae>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    fa74:	4602      	mov	r2, r0
    fa76:	2145      	movs	r1, #69	; 0x45
    fa78:	4829      	ldr	r0, [pc, #164]	; (fb20 <bt_id_del+0x12c>)
    fa7a:	f00d f849 	bl	1cb10 <printk>
	if (bt_dev.le.rl_entries) {
    fa7e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    fa82:	b113      	cbz	r3, fa8a <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    fa84:	2001      	movs	r0, #1
    fa86:	f00e fea8 	bl	1e7da <addr_res_enable>
	if (scan_enabled) {
    fa8a:	f1b8 0f00 	cmp.w	r8, #0
    fa8e:	d002      	beq.n	fa96 <bt_id_del+0xa2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    fa90:	2001      	movs	r0, #1
    fa92:	f00e feb9 	bl	1e808 <set_le_scan_enable.isra.0>
}
    fa96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    fa9a:	2100      	movs	r1, #0
    fa9c:	4821      	ldr	r0, [pc, #132]	; (fb24 <bt_id_del+0x130>)
    fa9e:	f7fe bee5 	b.w	e86c <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    faa2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    faa6:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    faaa:	429a      	cmp	r2, r3
    faac:	d20c      	bcs.n	fac8 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
    faae:	3b01      	subs	r3, #1
    fab0:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    fab4:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    fab6:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    fab8:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    fabc:	2002      	movs	r0, #2
    fabe:	491a      	ldr	r1, [pc, #104]	; (fb28 <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    fac0:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    fac2:	f007 fbd3 	bl	1726c <bt_keys_foreach>
		goto done;
    fac6:	e7da      	b.n	fa7e <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    fac8:	2107      	movs	r1, #7
    faca:	f242 0028 	movw	r0, #8232	; 0x2028
    face:	f7ff fab7 	bl	f040 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    fad2:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    fad6:	4607      	mov	r7, r0
    fad8:	b920      	cbnz	r0, fae4 <bt_id_del+0xf0>
		BT_ERR("Failed to remove IRK from controller");
    fada:	2145      	movs	r1, #69	; 0x45
    fadc:	4813      	ldr	r0, [pc, #76]	; (fb2c <bt_id_del+0x138>)
    fade:	f00d f817 	bl	1cb10 <printk>
		goto done;
    fae2:	e7cc      	b.n	fa7e <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
    fae4:	2107      	movs	r1, #7
    fae6:	3008      	adds	r0, #8
    fae8:	f007 ff92 	bl	17a10 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    faec:	4649      	mov	r1, r9
    faee:	f00e fddd 	bl	1e6ac <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    faf2:	4632      	mov	r2, r6
    faf4:	4639      	mov	r1, r7
    faf6:	f242 0028 	movw	r0, #8232	; 0x2028
    fafa:	f7ff faeb 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
    fafe:	2800      	cmp	r0, #0
    fb00:	d1eb      	bne.n	fada <bt_id_del+0xe6>
	bt_dev.le.rl_entries--;
    fb02:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    fb06:	3b01      	subs	r3, #1
    fb08:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    fb0c:	7a2b      	ldrb	r3, [r5, #8]
    fb0e:	f023 0304 	bic.w	r3, r3, #4
    fb12:	722b      	strb	r3, [r5, #8]
    fb14:	e7b3      	b.n	fa7e <bt_id_del+0x8a>
    fb16:	bf00      	nop
    fb18:	20008000 	.word	0x20008000
    fb1c:	0001e791 	.word	0x0001e791
    fb20:	00024683 	.word	0x00024683
    fb24:	0001e7bb 	.word	0x0001e7bb
    fb28:	0001e85d 	.word	0x0001e85d
    fb2c:	000246b5 	.word	0x000246b5

0000fb30 <bt_le_scan_update>:
{
    fb30:	b570      	push	{r4, r5, r6, lr}
    fb32:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fb34:	481c      	ldr	r0, [pc, #112]	; (fba8 <bt_le_scan_update+0x78>)
    fb36:	f00e fdb6 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fb3a:	0641      	lsls	r1, r0, #25
    fb3c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    fb40:	d501      	bpl.n	fb46 <bt_le_scan_update+0x16>
			return 0;
    fb42:	2000      	movs	r0, #0
    fb44:	e02b      	b.n	fb9e <bt_le_scan_update+0x6e>
    fb46:	4818      	ldr	r0, [pc, #96]	; (fba8 <bt_le_scan_update+0x78>)
    fb48:	f00e fdad 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    fb4c:	0682      	lsls	r2, r0, #26
    fb4e:	d421      	bmi.n	fb94 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    fb50:	2100      	movs	r1, #0
    fb52:	2206      	movs	r2, #6
    fb54:	4608      	mov	r0, r1
    fb56:	f001 ff09 	bl	1196c <bt_conn_lookup_state_le>
		if (conn) {
    fb5a:	4604      	mov	r4, r0
    fb5c:	bb00      	cbnz	r0, fba0 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    fb5e:	2202      	movs	r2, #2
    fb60:	4601      	mov	r1, r0
    fb62:	f001 ff03 	bl	1196c <bt_conn_lookup_state_le>
		if (conn) {
    fb66:	4605      	mov	r5, r0
    fb68:	2800      	cmp	r0, #0
    fb6a:	d0ea      	beq.n	fb42 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fb6c:	f44f 7180 	mov.w	r1, #256	; 0x100
    fb70:	480d      	ldr	r0, [pc, #52]	; (fba8 <bt_le_scan_update+0x78>)
    fb72:	f00e fd9e 	bl	1e6b2 <atomic_or>
			bt_conn_unref(conn);
    fb76:	4628      	mov	r0, r5
    fb78:	f001 fd9a 	bl	116b0 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    fb7c:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    fb7e:	4620      	mov	r0, r4
}
    fb80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    fb84:	bf15      	itete	ne
    fb86:	2230      	movne	r2, #48	; 0x30
    fb88:	2212      	moveq	r2, #18
    fb8a:	2160      	movne	r1, #96	; 0x60
    fb8c:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    fb90:	f7ff bd12 	b.w	f5b8 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    fb94:	4618      	mov	r0, r3
    fb96:	f7ff fb79 	bl	f28c <set_le_scan_enable_legacy>
		if (err) {
    fb9a:	2800      	cmp	r0, #0
    fb9c:	d0d8      	beq.n	fb50 <bt_le_scan_update+0x20>
}
    fb9e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    fba0:	f001 fd86 	bl	116b0 <bt_conn_unref>
    fba4:	e7cd      	b.n	fb42 <bt_le_scan_update+0x12>
    fba6:	bf00      	nop
    fba8:	20008094 	.word	0x20008094

0000fbac <hci_disconn_complete>:
{
    fbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    fbae:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    fbb0:	7835      	ldrb	r5, [r6, #0]
    fbb2:	bb45      	cbnz	r5, fc06 <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fbb4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    fbb8:	4638      	mov	r0, r7
    fbba:	f001 fd9d 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    fbbe:	4604      	mov	r4, r0
    fbc0:	b930      	cbnz	r0, fbd0 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    fbc2:	463a      	mov	r2, r7
}
    fbc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    fbc8:	2145      	movs	r1, #69	; 0x45
    fbca:	480f      	ldr	r0, [pc, #60]	; (fc08 <hci_disconn_complete+0x5c>)
    fbcc:	f00c bfa0 	b.w	1cb10 <printk>
	conn->err = evt->reason;
    fbd0:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbd2:	4629      	mov	r1, r5
	conn->err = evt->reason;
    fbd4:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbd6:	f001 fd97 	bl	11708 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    fbda:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    fbdc:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    fbde:	2b01      	cmp	r3, #1
    fbe0:	d004      	beq.n	fbec <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    fbe2:	4620      	mov	r0, r4
}
    fbe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    fbe8:	f001 bd62 	b.w	116b0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fbec:	1d20      	adds	r0, r4, #4
    fbee:	f00e fd5a 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    fbf2:	07c3      	lsls	r3, r0, #31
    fbf4:	d5f5      	bpl.n	fbe2 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fbf6:	4620      	mov	r0, r4
    fbf8:	2102      	movs	r1, #2
    fbfa:	f001 fd85 	bl	11708 <bt_conn_set_state>
		bt_le_scan_update(false);
    fbfe:	4628      	mov	r0, r5
    fc00:	f7ff ff96 	bl	fb30 <bt_le_scan_update>
    fc04:	e7ed      	b.n	fbe2 <hci_disconn_complete+0x36>
}
    fc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc08:	000242ab 	.word	0x000242ab

0000fc0c <le_adv_report>:
{
    fc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    fc10:	f100 0708 	add.w	r7, r0, #8
    fc14:	b08d      	sub	sp, #52	; 0x34
    fc16:	4604      	mov	r4, r0
    fc18:	4638      	mov	r0, r7
    fc1a:	f010 fda5 	bl	20768 <net_buf_simple_pull_u8>
    fc1e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; fdf0 <le_adv_report+0x1e4>
	if (scan_dev_found_cb) {
    fc22:	f8df a1d0 	ldr.w	sl, [pc, #464]	; fdf4 <le_adv_report+0x1e8>
    fc26:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    fc28:	9b01      	ldr	r3, [sp, #4]
    fc2a:	b913      	cbnz	r3, fc32 <le_adv_report+0x26>
}
    fc2c:	b00d      	add	sp, #52	; 0x34
    fc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    fc32:	89a3      	ldrh	r3, [r4, #12]
    fc34:	2b08      	cmp	r3, #8
    fc36:	d806      	bhi.n	fc46 <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    fc38:	2145      	movs	r1, #69	; 0x45
    fc3a:	486f      	ldr	r0, [pc, #444]	; (fdf8 <le_adv_report+0x1ec>)
}
    fc3c:	b00d      	add	sp, #52	; 0x34
    fc3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    fc42:	f00c bf65 	b.w	1cb10 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    fc46:	2109      	movs	r1, #9
    fc48:	4638      	mov	r0, r7
    fc4a:	f007 fec3 	bl	179d4 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    fc4e:	237f      	movs	r3, #127	; 0x7f
    fc50:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    fc54:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fc56:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    fc58:	9300      	str	r3, [sp, #0]
    fc5a:	18c3      	adds	r3, r0, r3
    fc5c:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fc5e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    fc62:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    fc66:	23ff      	movs	r3, #255	; 0xff
    fc68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    fc6c:	2300      	movs	r3, #0
    fc6e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    fc72:	7802      	ldrb	r2, [r0, #0]
    fc74:	4606      	mov	r6, r0
    fc76:	2a04      	cmp	r2, #4
    fc78:	bf98      	it	ls
    fc7a:	4b60      	ldrls	r3, [pc, #384]	; (fdfc <le_adv_report+0x1f0>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    fc7c:	f100 0901 	add.w	r9, r0, #1
    fc80:	bf98      	it	ls
    fc82:	5c9b      	ldrbls	r3, [r3, r2]
    fc84:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    fc86:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    fc8a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    fc8e:	f00e fd0a 	bl	1e6a6 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    fc92:	0645      	lsls	r5, r0, #25
    fc94:	d50d      	bpl.n	fcb2 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    fc96:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fc9a:	0758      	lsls	r0, r3, #29
    fc9c:	d509      	bpl.n	fcb2 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    fc9e:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    fca0:	4638      	mov	r0, r7
    fca2:	3101      	adds	r1, #1
    fca4:	f007 fe7a 	bl	1799c <net_buf_simple_pull>
    fca8:	9b01      	ldr	r3, [sp, #4]
    fcaa:	1e58      	subs	r0, r3, #1
    fcac:	b2c3      	uxtb	r3, r0
    fcae:	9301      	str	r3, [sp, #4]
    fcb0:	e7ba      	b.n	fc28 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    fcb2:	7873      	ldrb	r3, [r6, #1]
    fcb4:	1e9a      	subs	r2, r3, #2
    fcb6:	2a01      	cmp	r2, #1
    fcb8:	d84c      	bhi.n	fd54 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    fcba:	4649      	mov	r1, r9
    fcbc:	a804      	add	r0, sp, #16
    fcbe:	f00e fcf5 	bl	1e6ac <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    fcc2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    fcc6:	3b02      	subs	r3, #2
    fcc8:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    fccc:	ab04      	add	r3, sp, #16
    fcce:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    fcd0:	f8da 3000 	ldr.w	r3, [sl]
    fcd4:	b1a3      	cbz	r3, fd00 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    fcd6:	4638      	mov	r0, r7
    fcd8:	f010 fd56 	bl	20788 <net_buf_simple_headroom>
    fcdc:	4683      	mov	fp, r0
		buf->len = len;
    fcde:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    fce0:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fce2:	a804      	add	r0, sp, #16
		buf->len = len;
    fce4:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fce6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    fcea:	463b      	mov	r3, r7
    fcec:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    fcf0:	f8da c000 	ldr.w	ip, [sl]
    fcf4:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    fcf6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fcf8:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fcfa:	fa10 f08b 	uxtah	r0, r0, fp
    fcfe:	60a0      	str	r0, [r4, #8]
	return list->head;
    fd00:	4b3f      	ldr	r3, [pc, #252]	; (fe00 <le_adv_report+0x1f4>)
    fd02:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fd04:	2b00      	cmp	r3, #0
    fd06:	d036      	beq.n	fd76 <le_adv_report+0x16a>
    fd08:	f1b3 0208 	subs.w	r2, r3, #8
    fd0c:	d033      	beq.n	fd76 <le_adv_report+0x16a>
	return node->next;
    fd0e:	681d      	ldr	r5, [r3, #0]
    fd10:	b105      	cbz	r5, fd14 <le_adv_report+0x108>
    fd12:	3d08      	subs	r5, #8
		if (listener->recv) {
    fd14:	6813      	ldr	r3, [r2, #0]
    fd16:	9203      	str	r2, [sp, #12]
    fd18:	b193      	cbz	r3, fd40 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    fd1a:	4638      	mov	r0, r7
    fd1c:	f010 fd34 	bl	20788 <net_buf_simple_headroom>
    fd20:	4683      	mov	fp, r0
	state->len = buf->len;
    fd22:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fd24:	9a03      	ldr	r2, [sp, #12]
    fd26:	9302      	str	r3, [sp, #8]
			buf->len = len;
    fd28:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    fd2a:	a808      	add	r0, sp, #32
			buf->len = len;
    fd2c:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fd2e:	4639      	mov	r1, r7
    fd30:	6812      	ldr	r2, [r2, #0]
    fd32:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    fd34:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fd36:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fd38:	fa10 f08b 	uxtah	r0, r0, fp
    fd3c:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    fd3e:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fd40:	b1cd      	cbz	r5, fd76 <le_adv_report+0x16a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fd42:	f115 0308 	adds.w	r3, r5, #8
    fd46:	d002      	beq.n	fd4e <le_adv_report+0x142>
	return node->next;
    fd48:	68ab      	ldr	r3, [r5, #8]
    fd4a:	b103      	cbz	r3, fd4e <le_adv_report+0x142>
    fd4c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    fd4e:	462a      	mov	r2, r5
    fd50:	461d      	mov	r5, r3
    fd52:	e7df      	b.n	fd14 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    fd54:	2bff      	cmp	r3, #255	; 0xff
    fd56:	d108      	bne.n	fd6a <le_adv_report+0x15e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fd58:	2300      	movs	r3, #0
    fd5a:	a906      	add	r1, sp, #24
    fd5c:	9306      	str	r3, [sp, #24]
    fd5e:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    fd62:	a804      	add	r0, sp, #16
    fd64:	f00e fca2 	bl	1e6ac <bt_addr_le_copy>
    fd68:	e7b0      	b.n	fccc <le_adv_report+0xc0>
    fd6a:	4649      	mov	r1, r9
    fd6c:	2000      	movs	r0, #0
    fd6e:	f00e fd7e 	bl	1e86e <bt_lookup_id_addr>
    fd72:	4601      	mov	r1, r0
    fd74:	e7f5      	b.n	fd62 <le_adv_report+0x156>
    fd76:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    fd78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fd7c:	f00e fc93 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fd80:	0641      	lsls	r1, r0, #25
    fd82:	f3c0 1580 	ubfx	r5, r0, #6, #1
    fd86:	d48a      	bmi.n	fc9e <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    fd88:	07da      	lsls	r2, r3, #31
    fd8a:	d588      	bpl.n	fc9e <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    fd8c:	2202      	movs	r2, #2
    fd8e:	4628      	mov	r0, r5
    fd90:	a904      	add	r1, sp, #16
    fd92:	f001 fdeb 	bl	1196c <bt_conn_lookup_state_le>
	if (!conn) {
    fd96:	4683      	mov	fp, r0
    fd98:	2800      	cmp	r0, #0
    fd9a:	d080      	beq.n	fc9e <le_adv_report+0x92>
    fd9c:	4640      	mov	r0, r8
    fd9e:	f00e fc82 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fda2:	0683      	lsls	r3, r0, #26
    fda4:	d410      	bmi.n	fdc8 <le_adv_report+0x1bc>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    fda6:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    fdaa:	4649      	mov	r1, r9
    fdac:	f00e fc7e 	bl	1e6ac <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    fdb0:	4658      	mov	r0, fp
    fdb2:	f7ff fc67 	bl	f684 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    fdb6:	b960      	cbnz	r0, fdd2 <le_adv_report+0x1c6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    fdb8:	4658      	mov	r0, fp
    fdba:	2106      	movs	r1, #6
    fdbc:	f001 fca4 	bl	11708 <bt_conn_set_state>
	bt_conn_unref(conn);
    fdc0:	4658      	mov	r0, fp
    fdc2:	f001 fc75 	bl	116b0 <bt_conn_unref>
	return;
    fdc6:	e76a      	b.n	fc9e <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    fdc8:	4628      	mov	r0, r5
    fdca:	f7ff fa5f 	bl	f28c <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fdce:	2800      	cmp	r0, #0
    fdd0:	d0e9      	beq.n	fda6 <le_adv_report+0x19a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fdd2:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fdd4:	2100      	movs	r1, #0
    fdd6:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fdd8:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fddc:	f001 fc94 	bl	11708 <bt_conn_set_state>
	bt_conn_unref(conn);
    fde0:	4658      	mov	r0, fp
    fde2:	f001 fc65 	bl	116b0 <bt_conn_unref>
	bt_le_scan_update(false);
    fde6:	2000      	movs	r0, #0
    fde8:	f7ff fea2 	bl	fb30 <bt_le_scan_update>
    fdec:	e757      	b.n	fc9e <le_adv_report+0x92>
    fdee:	bf00      	nop
    fdf0:	20008094 	.word	0x20008094
    fdf4:	20009c1c 	.word	0x20009c1c
    fdf8:	000246df 	.word	0x000246df
    fdfc:	00024bd2 	.word	0x00024bd2
    fe00:	20009c14 	.word	0x20009c14

0000fe04 <bt_data_parse>:
{
    fe04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe06:	4604      	mov	r4, r0
    fe08:	460e      	mov	r6, r1
    fe0a:	4617      	mov	r7, r2
	while (ad->len > 1) {
    fe0c:	88a3      	ldrh	r3, [r4, #4]
    fe0e:	2b01      	cmp	r3, #1
    fe10:	d801      	bhi.n	fe16 <bt_data_parse+0x12>
}
    fe12:	b003      	add	sp, #12
    fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    fe16:	4620      	mov	r0, r4
    fe18:	f010 fca6 	bl	20768 <net_buf_simple_pull_u8>
		if (len == 0U) {
    fe1c:	4605      	mov	r5, r0
    fe1e:	2800      	cmp	r0, #0
    fe20:	d0f7      	beq.n	fe12 <bt_data_parse+0xe>
		if (len > ad->len) {
    fe22:	88a2      	ldrh	r2, [r4, #4]
    fe24:	b283      	uxth	r3, r0
    fe26:	429a      	cmp	r2, r3
    fe28:	d206      	bcs.n	fe38 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    fe2a:	2157      	movs	r1, #87	; 0x57
    fe2c:	480c      	ldr	r0, [pc, #48]	; (fe60 <bt_data_parse+0x5c>)
}
    fe2e:	b003      	add	sp, #12
    fe30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fe34:	f00c be6c 	b.w	1cb10 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fe38:	4620      	mov	r0, r4
    fe3a:	f010 fc95 	bl	20768 <net_buf_simple_pull_u8>
		data.data = ad->data;
    fe3e:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fe40:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fe44:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fe46:	4639      	mov	r1, r7
    fe48:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fe4a:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fe4e:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fe50:	47b0      	blx	r6
    fe52:	2800      	cmp	r0, #0
    fe54:	d0dd      	beq.n	fe12 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fe56:	4629      	mov	r1, r5
    fe58:	4620      	mov	r0, r4
    fe5a:	f007 fd9f 	bl	1799c <net_buf_simple_pull>
    fe5e:	e7d5      	b.n	fe0c <bt_data_parse+0x8>
    fe60:	000246fd 	.word	0x000246fd

0000fe64 <bt_send>:
	return bt_dev.drv->send(buf);
    fe64:	4b02      	ldr	r3, [pc, #8]	; (fe70 <bt_send+0xc>)
    fe66:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    fe6a:	691b      	ldr	r3, [r3, #16]
    fe6c:	4718      	bx	r3
    fe6e:	bf00      	nop
    fe70:	20008000 	.word	0x20008000

0000fe74 <bt_hci_cmd_send>:
{
    fe74:	b538      	push	{r3, r4, r5, lr}
    fe76:	4605      	mov	r5, r0
	if (!buf) {
    fe78:	460c      	mov	r4, r1
    fe7a:	b919      	cbnz	r1, fe84 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fe7c:	f7ff f8e0 	bl	f040 <bt_hci_cmd_create>
		if (!buf) {
    fe80:	4604      	mov	r4, r0
    fe82:	b1c0      	cbz	r0, feb6 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fe84:	f640 4335 	movw	r3, #3125	; 0xc35
    fe88:	429d      	cmp	r5, r3
    fe8a:	d10e      	bne.n	feaa <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fe8c:	4620      	mov	r0, r4
    fe8e:	f7ff ffe9 	bl	fe64 <bt_send>
		if (err) {
    fe92:	4605      	mov	r5, r0
    fe94:	b138      	cbz	r0, fea6 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fe96:	4602      	mov	r2, r0
    fe98:	2145      	movs	r1, #69	; 0x45
    fe9a:	4808      	ldr	r0, [pc, #32]	; (febc <bt_hci_cmd_send+0x48>)
    fe9c:	f00c fe38 	bl	1cb10 <printk>
			net_buf_unref(buf);
    fea0:	4620      	mov	r0, r4
    fea2:	f007 fc9f 	bl	177e4 <net_buf_unref>
}
    fea6:	4628      	mov	r0, r5
    fea8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    feaa:	4621      	mov	r1, r4
    feac:	4804      	ldr	r0, [pc, #16]	; (fec0 <bt_hci_cmd_send+0x4c>)
    feae:	f007 fc6b 	bl	17788 <net_buf_put>
	return 0;
    feb2:	2500      	movs	r5, #0
    feb4:	e7f7      	b.n	fea6 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    feb6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    feba:	e7f4      	b.n	fea6 <bt_hci_cmd_send+0x32>
    febc:	00024711 	.word	0x00024711
    fec0:	20008120 	.word	0x20008120

0000fec4 <bt_hci_host_num_completed_packets>:
{
    fec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fec6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fec8:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    feca:	7980      	ldrb	r0, [r0, #6]
    fecc:	f007 fb0a 	bl	174e4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fed0:	4621      	mov	r1, r4
    fed2:	f011 fb38 	bl	21546 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    fed6:	4b24      	ldr	r3, [pc, #144]	; (ff68 <bt_hci_host_num_completed_packets+0xa4>)
    fed8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    fedc:	069b      	lsls	r3, r3, #26
    fede:	d541      	bpl.n	ff64 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    fee0:	7d60      	ldrb	r0, [r4, #21]
    fee2:	f002 f85f 	bl	11fa4 <bt_conn_lookup_index>
	if (!conn) {
    fee6:	4605      	mov	r5, r0
    fee8:	b930      	cbnz	r0, fef8 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    feea:	7d62      	ldrb	r2, [r4, #21]
    feec:	2157      	movs	r1, #87	; 0x57
}
    feee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fef2:	481e      	ldr	r0, [pc, #120]	; (ff6c <bt_hci_host_num_completed_packets+0xa8>)
    fef4:	f00c be0c 	b.w	1cb10 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fef8:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fefa:	2b01      	cmp	r3, #1
    fefc:	d002      	beq.n	ff04 <bt_hci_host_num_completed_packets+0x40>
    fefe:	3b07      	subs	r3, #7
    ff00:	2b01      	cmp	r3, #1
    ff02:	d80f      	bhi.n	ff24 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    ff04:	4628      	mov	r0, r5
    ff06:	f001 fbd3 	bl	116b0 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ff0a:	2105      	movs	r1, #5
    ff0c:	f640 4035 	movw	r0, #3125	; 0xc35
    ff10:	f7ff f896 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    ff14:	4604      	mov	r4, r0
    ff16:	b970      	cbnz	r0, ff36 <bt_hci_host_num_completed_packets+0x72>
}
    ff18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    ff1c:	2145      	movs	r1, #69	; 0x45
    ff1e:	4814      	ldr	r0, [pc, #80]	; (ff70 <bt_hci_host_num_completed_packets+0xac>)
    ff20:	f00c bdf6 	b.w	1cb10 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    ff24:	4813      	ldr	r0, [pc, #76]	; (ff74 <bt_hci_host_num_completed_packets+0xb0>)
    ff26:	2157      	movs	r1, #87	; 0x57
    ff28:	f00c fdf2 	bl	1cb10 <printk>
		bt_conn_unref(conn);
    ff2c:	4628      	mov	r0, r5
}
    ff2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    ff32:	f001 bbbd 	b.w	116b0 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    ff36:	f100 0708 	add.w	r7, r0, #8
    ff3a:	2101      	movs	r1, #1
    ff3c:	4638      	mov	r0, r7
    ff3e:	f007 fd67 	bl	17a10 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ff42:	2501      	movs	r5, #1
    ff44:	2104      	movs	r1, #4
    ff46:	7005      	strb	r5, [r0, #0]
    ff48:	4638      	mov	r0, r7
    ff4a:	f007 fd61 	bl	17a10 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ff4e:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ff50:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ff52:	7085      	strb	r5, [r0, #2]
    ff54:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ff56:	4621      	mov	r1, r4
}
    ff58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ff5c:	f640 4035 	movw	r0, #3125	; 0xc35
    ff60:	f7ff bf88 	b.w	fe74 <bt_hci_cmd_send>
}
    ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff66:	bf00      	nop
    ff68:	20008000 	.word	0x20008000
    ff6c:	00024738 	.word	0x00024738
    ff70:	00024797 	.word	0x00024797
    ff74:	00024766 	.word	0x00024766

0000ff78 <le_ltk_request>:
{
    ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    ff7a:	6884      	ldr	r4, [r0, #8]
{
    ff7c:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    ff7e:	8826      	ldrh	r6, [r4, #0]
    ff80:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    ff82:	4638      	mov	r0, r7
    ff84:	f001 fbb8 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
    ff88:	4605      	mov	r5, r0
    ff8a:	b938      	cbnz	r0, ff9c <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff8c:	463a      	mov	r2, r7
    ff8e:	2145      	movs	r1, #69	; 0x45
    ff90:	4820      	ldr	r0, [pc, #128]	; (10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>)
}
    ff92:	b007      	add	sp, #28
    ff94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff98:	f00c bdba 	b.w	1cb10 <printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    ff9c:	af02      	add	r7, sp, #8
    ff9e:	f8d4 2002 	ldr.w	r2, [r4, #2]
    ffa2:	f8d4 3006 	ldr.w	r3, [r4, #6]
    ffa6:	9701      	str	r7, [sp, #4]
    ffa8:	8961      	ldrh	r1, [r4, #10]
    ffaa:	9100      	str	r1, [sp, #0]
    ffac:	f010 fa62 	bl	20474 <bt_smp_request_ltk>
    ffb0:	b1f8      	cbz	r0, fff2 <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    ffb2:	2112      	movs	r1, #18
    ffb4:	f242 001a 	movw	r0, #8218	; 0x201a
    ffb8:	f7ff f842 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    ffbc:	4604      	mov	r4, r0
    ffbe:	b940      	cbnz	r0, ffd2 <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
    ffc0:	2145      	movs	r1, #69	; 0x45
    ffc2:	4815      	ldr	r0, [pc, #84]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
    ffc4:	f00c fda4 	bl	1cb10 <printk>
	bt_conn_unref(conn);
    ffc8:	4628      	mov	r0, r5
    ffca:	f001 fb71 	bl	116b0 <bt_conn_unref>
}
    ffce:	b007      	add	sp, #28
    ffd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffd2:	2112      	movs	r1, #18
    ffd4:	3008      	adds	r0, #8
    ffd6:	f007 fd1b 	bl	17a10 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    ffda:	4639      	mov	r1, r7
    ffdc:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    ffde:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    ffe2:	f00e fa4d 	bl	1e480 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    ffe6:	4621      	mov	r1, r4
    ffe8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    ffec:	f7ff ff42 	bl	fe74 <bt_hci_cmd_send>
    fff0:	e7ea      	b.n	ffc8 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    fff2:	2102      	movs	r1, #2
    fff4:	f242 001b 	movw	r0, #8219	; 0x201b
    fff8:	f7ff f822 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
    fffc:	4604      	mov	r4, r0
    fffe:	2800      	cmp	r0, #0
   10000:	d0de      	beq.n	ffc0 <le_ltk_request+0x48>
   10002:	2102      	movs	r1, #2
   10004:	3008      	adds	r0, #8
   10006:	f007 fd03 	bl	17a10 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1000a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1000c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1000e:	f242 001b 	movw	r0, #8219	; 0x201b
   10012:	e7eb      	b.n	ffec <le_ltk_request+0x74>
   10014:	00024282 	.word	0x00024282
   10018:	000247bf 	.word	0x000247bf

0001001c <conn_auto_initiate>:
{
   1001c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1001e:	7b43      	ldrb	r3, [r0, #13]
{
   10020:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10022:	2b07      	cmp	r3, #7
   10024:	d15d      	bne.n	100e2 <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   10026:	1d06      	adds	r6, r0, #4
   10028:	4630      	mov	r0, r6
   1002a:	f00e fb3c 	bl	1e6a6 <atomic_get>
   1002e:	0483      	lsls	r3, r0, #18
   10030:	d41b      	bmi.n	1006a <conn_auto_initiate+0x4e>
   10032:	78e3      	ldrb	r3, [r4, #3]
   10034:	b123      	cbz	r3, 10040 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   10036:	4b2c      	ldr	r3, [pc, #176]	; (100e8 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   10038:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   1003c:	071d      	lsls	r5, r3, #28
   1003e:	d514      	bpl.n	1006a <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   10040:	2102      	movs	r1, #2
   10042:	f242 0016 	movw	r0, #8214	; 0x2016
   10046:	f7fe fffb 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1004a:	4605      	mov	r5, r0
   1004c:	b168      	cbz	r0, 1006a <conn_auto_initiate+0x4e>
   1004e:	2102      	movs	r1, #2
   10050:	3008      	adds	r0, #8
   10052:	f007 fcdd 	bl	17a10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   10056:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   10058:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
   1005a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1005c:	f242 0016 	movw	r0, #8214	; 0x2016
}
   10060:	b004      	add	sp, #16
   10062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   10066:	f7ff bf05 	b.w	fe74 <bt_hci_cmd_send>
   1006a:	4630      	mov	r0, r6
   1006c:	f00e fb1b 	bl	1e6a6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   10070:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   10074:	4d1c      	ldr	r5, [pc, #112]	; (100e8 <conn_auto_initiate+0xcc>)
   10076:	f3c0 3100 	ubfx	r1, r0, #12, #1
   1007a:	d116      	bne.n	100aa <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1007c:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
   10080:	07d8      	lsls	r0, r3, #31
   10082:	d512      	bpl.n	100aa <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   10084:	2302      	movs	r3, #2
   10086:	4620      	mov	r0, r4
   10088:	461a      	mov	r2, r3
   1008a:	9100      	str	r1, [sp, #0]
   1008c:	f00e fc62 	bl	1e954 <bt_le_set_phy>
		if (!err) {
   10090:	4602      	mov	r2, r0
   10092:	b930      	cbnz	r0, 100a2 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10094:	2180      	movs	r1, #128	; 0x80
   10096:	4630      	mov	r0, r6
}
   10098:	b004      	add	sp, #16
   1009a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1009e:	f00e bb08 	b.w	1e6b2 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
   100a2:	2145      	movs	r1, #69	; 0x45
   100a4:	4811      	ldr	r0, [pc, #68]	; (100ec <conn_auto_initiate+0xd0>)
   100a6:	f00c fd33 	bl	1cb10 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   100aa:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   100ae:	069a      	lsls	r2, r3, #26
   100b0:	d517      	bpl.n	100e2 <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   100b2:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   100b6:	689b      	ldr	r3, [r3, #8]
   100b8:	079b      	lsls	r3, r3, #30
   100ba:	d512      	bpl.n	100e2 <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   100bc:	f10d 010e 	add.w	r1, sp, #14
   100c0:	a803      	add	r0, sp, #12
   100c2:	f7ff f869 	bl	f198 <hci_le_read_max_data_len>
			if (!err) {
   100c6:	b960      	cbnz	r0, 100e2 <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
   100c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   100cc:	4620      	mov	r0, r4
   100ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   100d2:	f00e fc22 	bl	1e91a <bt_le_set_data_len>
				if (err) {
   100d6:	4602      	mov	r2, r0
   100d8:	b118      	cbz	r0, 100e2 <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
   100da:	2145      	movs	r1, #69	; 0x45
   100dc:	4804      	ldr	r0, [pc, #16]	; (100f0 <conn_auto_initiate+0xd4>)
   100de:	f00c fd17 	bl	1cb10 <printk>
}
   100e2:	b004      	add	sp, #16
   100e4:	bd70      	pop	{r4, r5, r6, pc}
   100e6:	bf00      	nop
   100e8:	20008000 	.word	0x20008000
   100ec:	000247db 	.word	0x000247db
   100f0:	000247fa 	.word	0x000247fa

000100f4 <le_phy_update_complete>:
{
   100f4:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   100f6:	6883      	ldr	r3, [r0, #8]
   100f8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   100fc:	4628      	mov	r0, r5
   100fe:	f001 fafb 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
   10102:	4604      	mov	r4, r0
   10104:	b930      	cbnz	r0, 10114 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   10106:	462a      	mov	r2, r5
}
   10108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1010c:	2145      	movs	r1, #69	; 0x45
   1010e:	480c      	ldr	r0, [pc, #48]	; (10140 <le_phy_update_complete+0x4c>)
   10110:	f00c bcfe 	b.w	1cb10 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   10114:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10116:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1011a:	4628      	mov	r0, r5
   1011c:	f00e fae2 	bl	1e6e4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   10120:	0603      	lsls	r3, r0, #24
   10122:	d507      	bpl.n	10134 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10128:	4628      	mov	r0, r5
   1012a:	f00e fac2 	bl	1e6b2 <atomic_or>
		conn_auto_initiate(conn);
   1012e:	4620      	mov	r0, r4
   10130:	f7ff ff74 	bl	1001c <conn_auto_initiate>
	bt_conn_unref(conn);
   10134:	4620      	mov	r0, r4
}
   10136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1013a:	f001 bab9 	b.w	116b0 <bt_conn_unref>
   1013e:	bf00      	nop
   10140:	00024282 	.word	0x00024282

00010144 <le_remote_feat_complete>:
{
   10144:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   10146:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10148:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1014c:	4630      	mov	r0, r6
   1014e:	f001 fad3 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
   10152:	4604      	mov	r4, r0
   10154:	b930      	cbnz	r0, 10164 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   10156:	4632      	mov	r2, r6
}
   10158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1015c:	2145      	movs	r1, #69	; 0x45
   1015e:	480b      	ldr	r0, [pc, #44]	; (1018c <le_remote_feat_complete+0x48>)
   10160:	f00c bcd6 	b.w	1cb10 <printk>
	if (!evt->status) {
   10164:	782b      	ldrb	r3, [r5, #0]
   10166:	b923      	cbnz	r3, 10172 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   10168:	2208      	movs	r2, #8
   1016a:	1ce9      	adds	r1, r5, #3
   1016c:	30ac      	adds	r0, #172	; 0xac
   1016e:	f00e f987 	bl	1e480 <memcpy>
   10172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   10176:	1d20      	adds	r0, r4, #4
   10178:	f00e fa9b 	bl	1e6b2 <atomic_or>
	conn_auto_initiate(conn);
   1017c:	4620      	mov	r0, r4
   1017e:	f7ff ff4d 	bl	1001c <conn_auto_initiate>
	bt_conn_unref(conn);
   10182:	4620      	mov	r0, r4
}
   10184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   10188:	f001 ba92 	b.w	116b0 <bt_conn_unref>
   1018c:	00024282 	.word	0x00024282

00010190 <le_conn_param_neg_reply>:
{
   10190:	b570      	push	{r4, r5, r6, lr}
   10192:	4606      	mov	r6, r0
   10194:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   10196:	f242 0021 	movw	r0, #8225	; 0x2021
   1019a:	2103      	movs	r1, #3
   1019c:	f7fe ff50 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   101a0:	4604      	mov	r4, r0
   101a2:	b928      	cbnz	r0, 101b0 <le_conn_param_neg_reply+0x20>
}
   101a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   101a8:	2145      	movs	r1, #69	; 0x45
   101aa:	4808      	ldr	r0, [pc, #32]	; (101cc <le_conn_param_neg_reply+0x3c>)
   101ac:	f00c bcb0 	b.w	1cb10 <printk>
   101b0:	2103      	movs	r1, #3
   101b2:	3008      	adds	r0, #8
   101b4:	f007 fc2c 	bl	17a10 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   101b8:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   101ba:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   101bc:	4621      	mov	r1, r4
}
   101be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   101c2:	f242 0021 	movw	r0, #8225	; 0x2021
   101c6:	f7ff be55 	b.w	fe74 <bt_hci_cmd_send>
   101ca:	bf00      	nop
   101cc:	0002481b 	.word	0x0002481b

000101d0 <le_conn_param_req>:
{
   101d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   101d2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   101d4:	78d9      	ldrb	r1, [r3, #3]
   101d6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   101d8:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   101da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   101de:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   101e2:	7959      	ldrb	r1, [r3, #5]
   101e4:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   101e6:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   101e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   101ec:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   101f0:	799a      	ldrb	r2, [r3, #6]
   101f2:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   101f4:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   101f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   101fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   101fe:	7a1a      	ldrb	r2, [r3, #8]
   10200:	7a5b      	ldrb	r3, [r3, #9]
   10202:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   10206:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1020a:	f001 fa75 	bl	116f8 <bt_conn_lookup_handle>
	if (!conn) {
   1020e:	4606      	mov	r6, r0
   10210:	b950      	cbnz	r0, 10228 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   10212:	2145      	movs	r1, #69	; 0x45
   10214:	481c      	ldr	r0, [pc, #112]	; (10288 <le_conn_param_req+0xb8>)
   10216:	4622      	mov	r2, r4
   10218:	f00c fc7a 	bl	1cb10 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1021c:	2102      	movs	r1, #2
   1021e:	4620      	mov	r0, r4
   10220:	f7ff ffb6 	bl	10190 <le_conn_param_neg_reply>
}
   10224:	b003      	add	sp, #12
   10226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   10228:	4669      	mov	r1, sp
   1022a:	f001 f885 	bl	11338 <le_param_req>
   1022e:	b938      	cbnz	r0, 10240 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   10230:	211e      	movs	r1, #30
   10232:	4620      	mov	r0, r4
   10234:	f7ff ffac 	bl	10190 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   10238:	4630      	mov	r0, r6
   1023a:	f001 fa39 	bl	116b0 <bt_conn_unref>
   1023e:	e7f1      	b.n	10224 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   10240:	210e      	movs	r1, #14
   10242:	f242 0020 	movw	r0, #8224	; 0x2020
   10246:	f7fe fefb 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1024a:	4605      	mov	r5, r0
   1024c:	2800      	cmp	r0, #0
   1024e:	d0f3      	beq.n	10238 <le_conn_param_req+0x68>
   10250:	210e      	movs	r1, #14
   10252:	3008      	adds	r0, #8
   10254:	f007 fbdc 	bl	17a10 <net_buf_simple_add>
   10258:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1025a:	220e      	movs	r2, #14
   1025c:	2100      	movs	r1, #0
   1025e:	f00e f93a 	bl	1e4d6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   10262:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   10266:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   10268:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1026a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1026e:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   10270:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   10272:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   10276:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
   1027a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1027c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10280:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   10282:	f7ff fdf7 	bl	fe74 <bt_hci_cmd_send>
   10286:	e7d7      	b.n	10238 <le_conn_param_req+0x68>
   10288:	00024282 	.word	0x00024282

0001028c <hci_tx_thread>:
{
   1028c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   10290:	f8df 8128 	ldr.w	r8, [pc, #296]	; 103bc <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
   10294:	f8df 9128 	ldr.w	r9, [pc, #296]	; 103c0 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
   10298:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1029c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   102a0:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   102a2:	f36f 3310 	bfc	r3, #12, #5
   102a6:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   102aa:	f001 f997 	bl	115dc <bt_conn_prepare_events>
   102ae:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   102b0:	f04f 32ff 	mov.w	r2, #4294967295
   102b4:	f04f 33ff 	mov.w	r3, #4294967295
   102b8:	4631      	mov	r1, r6
   102ba:	4840      	ldr	r0, [pc, #256]	; (103bc <hci_tx_thread+0x130>)
   102bc:	f00c fa24 	bl	1c708 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   102c0:	b158      	cbz	r0, 102da <hci_tx_thread+0x4e>
   102c2:	f241 4271 	movw	r2, #5233	; 0x1471
   102c6:	4649      	mov	r1, r9
   102c8:	483e      	ldr	r0, [pc, #248]	; (103c4 <hci_tx_thread+0x138>)
   102ca:	f00c fc21 	bl	1cb10 <printk>
   102ce:	4040      	eors	r0, r0
   102d0:	f380 8811 	msr	BASEPRI, r0
   102d4:	f04f 0003 	mov.w	r0, #3
   102d8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   102da:	4d3b      	ldr	r5, [pc, #236]	; (103c8 <hci_tx_thread+0x13c>)
{
   102dc:	4f37      	ldr	r7, [pc, #220]	; (103bc <hci_tx_thread+0x130>)
   102de:	f105 0be8 	add.w	fp, r5, #232	; 0xe8
	for (; count; ev++, count--) {
   102e2:	b916      	cbnz	r6, 102ea <hci_tx_thread+0x5e>
	z_impl_k_yield();
   102e4:	f00b f912 	bl	1b50c <z_impl_k_yield>
	while (1) {
   102e8:	e7d8      	b.n	1029c <hci_tx_thread+0x10>
		switch (ev->state) {
   102ea:	68fa      	ldr	r2, [r7, #12]
   102ec:	f3c2 3204 	ubfx	r2, r2, #12, #5
   102f0:	2a01      	cmp	r2, #1
   102f2:	d953      	bls.n	1039c <hci_tx_thread+0x110>
   102f4:	2a04      	cmp	r2, #4
   102f6:	d15b      	bne.n	103b0 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
   102f8:	7b3b      	ldrb	r3, [r7, #12]
   102fa:	2b00      	cmp	r3, #0
   102fc:	d151      	bne.n	103a2 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   102fe:	2200      	movs	r2, #0
   10300:	2300      	movs	r3, #0
   10302:	4832      	ldr	r0, [pc, #200]	; (103cc <hci_tx_thread+0x140>)
   10304:	f007 f9ec 	bl	176e0 <net_buf_get>
	BT_ASSERT(buf);
   10308:	4604      	mov	r4, r0
   1030a:	b958      	cbnz	r0, 10324 <hci_tx_thread+0x98>
   1030c:	f241 420e 	movw	r2, #5134	; 0x140e
   10310:	4649      	mov	r1, r9
   10312:	482c      	ldr	r0, [pc, #176]	; (103c4 <hci_tx_thread+0x138>)
   10314:	f00c fbfc 	bl	1cb10 <printk>
   10318:	4040      	eors	r0, r0
   1031a:	f380 8811 	msr	BASEPRI, r0
   1031e:	f04f 0003 	mov.w	r0, #3
   10322:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10324:	f04f 33ff 	mov.w	r3, #4294967295
   10328:	f04f 32ff 	mov.w	r2, #4294967295
   1032c:	4658      	mov	r0, fp
   1032e:	f00b fa6b 	bl	1b808 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   10332:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   10336:	b153      	cbz	r3, 1034e <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   10338:	2145      	movs	r1, #69	; 0x45
   1033a:	4825      	ldr	r0, [pc, #148]	; (103d0 <hci_tx_thread+0x144>)
   1033c:	f00c fbe8 	bl	1cb10 <printk>
		net_buf_unref(bt_dev.sent_cmd);
   10340:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   10344:	f007 fa4e 	bl	177e4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10348:	2300      	movs	r3, #0
   1034a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   1034e:	4620      	mov	r0, r4
   10350:	f007 fa8c 	bl	1786c <net_buf_ref>
   10354:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
	err = bt_send(buf);
   10358:	4620      	mov	r0, r4
   1035a:	f7ff fd83 	bl	fe64 <bt_send>
	if (err) {
   1035e:	4602      	mov	r2, r0
   10360:	b1e0      	cbz	r0, 1039c <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   10362:	2145      	movs	r1, #69	; 0x45
   10364:	481b      	ldr	r0, [pc, #108]	; (103d4 <hci_tx_thread+0x148>)
   10366:	f00c fbd3 	bl	1cb10 <printk>
	z_impl_k_sem_give(sem);
   1036a:	481b      	ldr	r0, [pc, #108]	; (103d8 <hci_tx_thread+0x14c>)
   1036c:	f00b fa10 	bl	1b790 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   10370:	4620      	mov	r0, r4
   10372:	f007 f8bf 	bl	174f4 <net_buf_id>
   10376:	220c      	movs	r2, #12
   10378:	4b18      	ldr	r3, [pc, #96]	; (103dc <hci_tx_thread+0x150>)
   1037a:	211f      	movs	r1, #31
   1037c:	fb02 3000 	mla	r0, r2, r0, r3
   10380:	4622      	mov	r2, r4
   10382:	8840      	ldrh	r0, [r0, #2]
   10384:	f7fe fd4e 	bl	ee24 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   10388:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   1038c:	f007 fa2a 	bl	177e4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10390:	2300      	movs	r3, #0
		net_buf_unref(buf);
   10392:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   10394:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		net_buf_unref(buf);
   10398:	f007 fa24 	bl	177e4 <net_buf_unref>
	for (; count; ev++, count--) {
   1039c:	3714      	adds	r7, #20
   1039e:	3e01      	subs	r6, #1
   103a0:	e79f      	b.n	102e2 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   103a2:	2b01      	cmp	r3, #1
   103a4:	d1fa      	bne.n	1039c <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
   103a6:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   103a8:	3834      	subs	r0, #52	; 0x34
   103aa:	f001 fd7f 	bl	11eac <bt_conn_process_tx>
   103ae:	e7f5      	b.n	1039c <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   103b0:	2157      	movs	r1, #87	; 0x57
   103b2:	480b      	ldr	r0, [pc, #44]	; (103e0 <hci_tx_thread+0x154>)
   103b4:	f00c fbac 	bl	1cb10 <printk>
   103b8:	e7f0      	b.n	1039c <hci_tx_thread+0x110>
   103ba:	bf00      	nop
   103bc:	200082c4 	.word	0x200082c4
   103c0:	0002439f 	.word	0x0002439f
   103c4:	00022f17 	.word	0x00022f17
   103c8:	20008000 	.word	0x20008000
   103cc:	20008120 	.word	0x20008120
   103d0:	0002483a 	.word	0x0002483a
   103d4:	00024711 	.word	0x00024711
   103d8:	200080e8 	.word	0x200080e8
   103dc:	20009bf0 	.word	0x20009bf0
   103e0:	0002485a 	.word	0x0002485a

000103e4 <hci_event_prio>:
{
   103e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103e8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   103ea:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   103ee:	4630      	mov	r0, r6
   103f0:	f010 f9ca 	bl	20788 <net_buf_simple_headroom>
	state->len = buf->len;
   103f4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   103f8:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   103fa:	f1b8 0f01 	cmp.w	r8, #1
   103fe:	d80b      	bhi.n	10418 <hci_event_prio+0x34>
   10400:	f641 02ae 	movw	r2, #6318	; 0x18ae
   10404:	491a      	ldr	r1, [pc, #104]	; (10470 <hci_event_prio+0x8c>)
   10406:	481b      	ldr	r0, [pc, #108]	; (10474 <hci_event_prio+0x90>)
   10408:	f00c fb82 	bl	1cb10 <printk>
   1040c:	4040      	eors	r0, r0
   1040e:	f380 8811 	msr	BASEPRI, r0
   10412:	f04f 0003 	mov.w	r0, #3
   10416:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   10418:	4630      	mov	r0, r6
   1041a:	2102      	movs	r1, #2
   1041c:	f007 fada 	bl	179d4 <net_buf_simple_pull_mem>
   10420:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10422:	7800      	ldrb	r0, [r0, #0]
   10424:	f00e f91e 	bl	1e664 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10428:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1042a:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1042c:	d40b      	bmi.n	10446 <hci_event_prio+0x62>
   1042e:	f641 02b2 	movw	r2, #6322	; 0x18b2
   10432:	490f      	ldr	r1, [pc, #60]	; (10470 <hci_event_prio+0x8c>)
   10434:	480f      	ldr	r0, [pc, #60]	; (10474 <hci_event_prio+0x90>)
   10436:	f00c fb6b 	bl	1cb10 <printk>
   1043a:	4040      	eors	r0, r0
   1043c:	f380 8811 	msr	BASEPRI, r0
   10440:	f04f 0003 	mov.w	r0, #3
   10444:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   10446:	2305      	movs	r3, #5
   10448:	4621      	mov	r1, r4
   1044a:	4a0b      	ldr	r2, [pc, #44]	; (10478 <hci_event_prio+0x94>)
   1044c:	7838      	ldrb	r0, [r7, #0]
   1044e:	f7fe fbe1 	bl	ec14 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   10452:	07b3      	lsls	r3, r6, #30
   10454:	d507      	bpl.n	10466 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   10456:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   10458:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1045c:	fa10 f585 	uxtah	r5, r0, r5
   10460:	60a5      	str	r5, [r4, #8]
}
   10462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   10466:	4620      	mov	r0, r4
}
   10468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1046c:	f007 b9ba 	b.w	177e4 <net_buf_unref>
   10470:	0002439f 	.word	0x0002439f
   10474:	00022f17 	.word	0x00022f17
   10478:	0002226c 	.word	0x0002226c

0001047c <bt_recv>:
{
   1047c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1047e:	7d02      	ldrb	r2, [r0, #20]
   10480:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   10482:	2a01      	cmp	r2, #1
   10484:	d007      	beq.n	10496 <bt_recv+0x1a>
   10486:	2a03      	cmp	r2, #3
   10488:	d113      	bne.n	104b2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1048a:	480f      	ldr	r0, [pc, #60]	; (104c8 <bt_recv+0x4c>)
   1048c:	4629      	mov	r1, r5
   1048e:	f007 f97b 	bl	17788 <net_buf_put>
		return 0;
   10492:	2000      	movs	r0, #0
   10494:	e00c      	b.n	104b0 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10496:	6883      	ldr	r3, [r0, #8]
   10498:	7818      	ldrb	r0, [r3, #0]
   1049a:	f00e f8e3 	bl	1e664 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1049e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   104a0:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   104a2:	d502      	bpl.n	104aa <bt_recv+0x2e>
			hci_event_prio(buf);
   104a4:	4628      	mov	r0, r5
   104a6:	f7ff ff9d 	bl	103e4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   104aa:	f014 0002 	ands.w	r0, r4, #2
   104ae:	d1ec      	bne.n	1048a <bt_recv+0xe>
}
   104b0:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   104b2:	2145      	movs	r1, #69	; 0x45
   104b4:	4805      	ldr	r0, [pc, #20]	; (104cc <bt_recv+0x50>)
   104b6:	f00c fb2b 	bl	1cb10 <printk>
		net_buf_unref(buf);
   104ba:	4628      	mov	r0, r5
   104bc:	f007 f992 	bl	177e4 <net_buf_unref>
		return -EINVAL;
   104c0:	f06f 0015 	mvn.w	r0, #21
   104c4:	e7f4      	b.n	104b0 <bt_recv+0x34>
   104c6:	bf00      	nop
   104c8:	20008104 	.word	0x20008104
   104cc:	00024880 	.word	0x00024880

000104d0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   104d0:	4a08      	ldr	r2, [pc, #32]	; (104f4 <bt_hci_driver_register+0x24>)
{
   104d2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   104d4:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   104d8:	b930      	cbnz	r0, 104e8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   104da:	68d9      	ldr	r1, [r3, #12]
   104dc:	b139      	cbz	r1, 104ee <bt_hci_driver_register+0x1e>
   104de:	6919      	ldr	r1, [r3, #16]
   104e0:	b129      	cbz	r1, 104ee <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   104e2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   104e6:	4770      	bx	lr
		return -EALREADY;
   104e8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   104ec:	4770      	bx	lr
		return -EINVAL;
   104ee:	f06f 0015 	mvn.w	r0, #21
}
   104f2:	4770      	bx	lr
   104f4:	20008000 	.word	0x20008000

000104f8 <bt_finalize_init>:
{
   104f8:	b508      	push	{r3, lr}
   104fa:	2102      	movs	r1, #2
   104fc:	4803      	ldr	r0, [pc, #12]	; (1050c <bt_finalize_init+0x14>)
   104fe:	f00e f8d8 	bl	1e6b2 <atomic_or>
}
   10502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   10506:	2000      	movs	r0, #0
   10508:	f7ff bb12 	b.w	fb30 <bt_le_scan_update>
   1050c:	20008094 	.word	0x20008094

00010510 <init_work>:
{
   10510:	b510      	push	{r4, lr}
	err = bt_init();
   10512:	f7f8 fde5 	bl	90e0 <bt_init>
	if (ready_cb) {
   10516:	4b03      	ldr	r3, [pc, #12]	; (10524 <init_work+0x14>)
   10518:	681b      	ldr	r3, [r3, #0]
   1051a:	b113      	cbz	r3, 10522 <init_work+0x12>
}
   1051c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   10520:	4718      	bx	r3
}
   10522:	bd10      	pop	{r4, pc}
   10524:	20009c10 	.word	0x20009c10

00010528 <bt_enable>:
{
   10528:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   1052c:	4d35      	ldr	r5, [pc, #212]	; (10604 <bt_enable+0xdc>)
{
   1052e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   10530:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   10534:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   10536:	b94b      	cbnz	r3, 1054c <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   10538:	2145      	movs	r1, #69	; 0x45
   1053a:	4833      	ldr	r0, [pc, #204]	; (10608 <bt_enable+0xe0>)
   1053c:	f00c fae8 	bl	1cb10 <printk>
		return -ENODEV;
   10540:	f06f 0412 	mvn.w	r4, #18
}
   10544:	4620      	mov	r0, r4
   10546:	b008      	add	sp, #32
   10548:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1054c:	2100      	movs	r1, #0
   1054e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10552:	f00e f8b9 	bl	1e6c8 <atomic_test_and_set_bit>
   10556:	2800      	cmp	r0, #0
   10558:	d151      	bne.n	105fe <bt_enable+0xd6>
		err = bt_settings_init();
   1055a:	f7fe f8c7 	bl	e6ec <bt_settings_init>
		if (err) {
   1055e:	4604      	mov	r4, r0
   10560:	2800      	cmp	r0, #0
   10562:	d1ef      	bne.n	10544 <bt_enable+0x1c>
	ready_cb = cb;
   10564:	4b29      	ldr	r3, [pc, #164]	; (1060c <bt_enable+0xe4>)
   10566:	f04f 0800 	mov.w	r8, #0
   1056a:	f04f 0900 	mov.w	r9, #0
   1056e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10570:	f06f 0308 	mvn.w	r3, #8
   10574:	e9cd 0000 	strd	r0, r0, [sp]
   10578:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1057c:	9004      	str	r0, [sp, #16]
   1057e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10582:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10586:	4b22      	ldr	r3, [pc, #136]	; (10610 <bt_enable+0xe8>)
   10588:	4922      	ldr	r1, [pc, #136]	; (10614 <bt_enable+0xec>)
   1058a:	4823      	ldr	r0, [pc, #140]	; (10618 <bt_enable+0xf0>)
   1058c:	f00b fa28 	bl	1b9e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10590:	4922      	ldr	r1, [pc, #136]	; (1061c <bt_enable+0xf4>)
   10592:	4821      	ldr	r0, [pc, #132]	; (10618 <bt_enable+0xf0>)
   10594:	f011 f83e 	bl	21614 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10598:	f06f 0307 	mvn.w	r3, #7
   1059c:	f640 0298 	movw	r2, #2200	; 0x898
   105a0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   105a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   105a8:	e9cd 4400 	strd	r4, r4, [sp]
   105ac:	4b1c      	ldr	r3, [pc, #112]	; (10620 <bt_enable+0xf8>)
   105ae:	491d      	ldr	r1, [pc, #116]	; (10624 <bt_enable+0xfc>)
   105b0:	9404      	str	r4, [sp, #16]
   105b2:	481d      	ldr	r0, [pc, #116]	; (10628 <bt_enable+0x100>)
   105b4:	f00b fa14 	bl	1b9e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   105b8:	491c      	ldr	r1, [pc, #112]	; (1062c <bt_enable+0x104>)
   105ba:	481b      	ldr	r0, [pc, #108]	; (10628 <bt_enable+0x100>)
   105bc:	f011 f82a 	bl	21614 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   105c0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   105c4:	68db      	ldr	r3, [r3, #12]
   105c6:	4798      	blx	r3
	if (err) {
   105c8:	4604      	mov	r4, r0
   105ca:	b128      	cbz	r0, 105d8 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   105cc:	4602      	mov	r2, r0
   105ce:	2145      	movs	r1, #69	; 0x45
   105d0:	4817      	ldr	r0, [pc, #92]	; (10630 <bt_enable+0x108>)
   105d2:	f00c fa9d 	bl	1cb10 <printk>
		return err;
   105d6:	e7b5      	b.n	10544 <bt_enable+0x1c>
	if (!cb) {
   105d8:	b926      	cbnz	r6, 105e4 <bt_enable+0xbc>
}
   105da:	b008      	add	sp, #32
   105dc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   105e0:	f7f8 bd7e 	b.w	90e0 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   105e4:	4601      	mov	r1, r0
   105e6:	f105 0090 	add.w	r0, r5, #144	; 0x90
   105ea:	f00e f86d 	bl	1e6c8 <atomic_test_and_set_bit>
   105ee:	2800      	cmp	r0, #0
   105f0:	d1a8      	bne.n	10544 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   105f2:	4810      	ldr	r0, [pc, #64]	; (10634 <bt_enable+0x10c>)
   105f4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   105f8:	f010 ff9a 	bl	21530 <k_queue_append>
   105fc:	e7a2      	b.n	10544 <bt_enable+0x1c>
		return -EALREADY;
   105fe:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10602:	e79f      	b.n	10544 <bt_enable+0x1c>
   10604:	20008000 	.word	0x20008000
   10608:	000249ac 	.word	0x000249ac
   1060c:	20009c10 	.word	0x20009c10
   10610:	0001028d 	.word	0x0001028d
   10614:	2000c878 	.word	0x2000c878
   10618:	20008878 	.word	0x20008878
   1061c:	000249ca 	.word	0x000249ca
   10620:	0000ed01 	.word	0x0000ed01
   10624:	2000bfe0 	.word	0x2000bfe0
   10628:	200087e8 	.word	0x200087e8
   1062c:	000249d0 	.word	0x000249d0
   10630:	000249d6 	.word	0x000249d6
   10634:	20009638 	.word	0x20009638

00010638 <bt_get_name>:
}
   10638:	4800      	ldr	r0, [pc, #0]	; (1063c <bt_get_name+0x4>)
   1063a:	4770      	bx	lr
   1063c:	00022d56 	.word	0x00022d56

00010640 <bt_id_create>:
{
   10640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10642:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10644:	4605      	mov	r5, r0
   10646:	b918      	cbnz	r0, 10650 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10648:	b314      	cbz	r4, 10690 <bt_id_create+0x50>
		return -EINVAL;
   1064a:	f06f 0415 	mvn.w	r4, #21
   1064e:	e01c      	b.n	1068a <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10650:	2300      	movs	r3, #0
   10652:	4669      	mov	r1, sp
   10654:	9300      	str	r3, [sp, #0]
   10656:	f8cd 3003 	str.w	r3, [sp, #3]
   1065a:	f00e f840 	bl	1e6de <bt_addr_le_cmp>
   1065e:	2800      	cmp	r0, #0
   10660:	d0f2      	beq.n	10648 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10662:	782b      	ldrb	r3, [r5, #0]
   10664:	2b01      	cmp	r3, #1
   10666:	d104      	bne.n	10672 <bt_id_create+0x32>
   10668:	79ab      	ldrb	r3, [r5, #6]
   1066a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1066e:	2bc0      	cmp	r3, #192	; 0xc0
   10670:	d004      	beq.n	1067c <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   10672:	2145      	movs	r1, #69	; 0x45
   10674:	480d      	ldr	r0, [pc, #52]	; (106ac <bt_id_create+0x6c>)
   10676:	f00c fa4b 	bl	1cb10 <printk>
			return -EINVAL;
   1067a:	e7e6      	b.n	1064a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1067c:	4628      	mov	r0, r5
   1067e:	f7fe f911 	bl	e8a4 <id_find>
   10682:	2800      	cmp	r0, #0
   10684:	dbe0      	blt.n	10648 <bt_id_create+0x8>
			return -EALREADY;
   10686:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   1068a:	4620      	mov	r0, r4
   1068c:	b003      	add	sp, #12
   1068e:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10690:	4b07      	ldr	r3, [pc, #28]	; (106b0 <bt_id_create+0x70>)
   10692:	79dc      	ldrb	r4, [r3, #7]
   10694:	2c01      	cmp	r4, #1
   10696:	d006      	beq.n	106a6 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10698:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   1069a:	4629      	mov	r1, r5
   1069c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1069e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   106a0:	f7fe faf8 	bl	ec94 <id_create.constprop.0>
	return new_id;
   106a4:	e7f1      	b.n	1068a <bt_id_create+0x4a>
		return -ENOMEM;
   106a6:	f06f 040b 	mvn.w	r4, #11
   106aa:	e7ee      	b.n	1068a <bt_id_create+0x4a>
   106ac:	000249f7 	.word	0x000249f7
   106b0:	20008000 	.word	0x20008000

000106b4 <bt_setup_public_id_addr>:
{
   106b4:	b570      	push	{r4, r5, r6, lr}
   106b6:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   106b8:	2100      	movs	r1, #0
   106ba:	f241 0009 	movw	r0, #4105	; 0x1009
   106be:	aa01      	add	r2, sp, #4
   106c0:	f7fe fd08 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
   106c4:	4e1d      	ldr	r6, [pc, #116]	; (1073c <bt_setup_public_id_addr+0x88>)
   106c6:	4604      	mov	r4, r0
   106c8:	b138      	cbz	r0, 106da <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   106ca:	2157      	movs	r1, #87	; 0x57
   106cc:	481c      	ldr	r0, [pc, #112]	; (10740 <bt_setup_public_id_addr+0x8c>)
   106ce:	f00c fa1f 	bl	1cb10 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   106d2:	2300      	movs	r3, #0
   106d4:	71f3      	strb	r3, [r6, #7]
}
   106d6:	b006      	add	sp, #24
   106d8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   106da:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   106dc:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   106de:	689d      	ldr	r5, [r3, #8]
   106e0:	a904      	add	r1, sp, #16
   106e2:	3501      	adds	r5, #1
   106e4:	9004      	str	r0, [sp, #16]
   106e6:	f8ad 0014 	strh.w	r0, [sp, #20]
   106ea:	4628      	mov	r0, r5
   106ec:	f00d feb7 	bl	1e45e <memcmp>
   106f0:	b918      	cbnz	r0, 106fa <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   106f2:	9801      	ldr	r0, [sp, #4]
   106f4:	f007 f876 	bl	177e4 <net_buf_unref>
   106f8:	e7eb      	b.n	106d2 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   106fa:	4b12      	ldr	r3, [pc, #72]	; (10744 <bt_setup_public_id_addr+0x90>)
   106fc:	2206      	movs	r2, #6
   106fe:	f8d3 0007 	ldr.w	r0, [r3, #7]
   10702:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   10706:	9002      	str	r0, [sp, #8]
   10708:	a902      	add	r1, sp, #8
   1070a:	4628      	mov	r0, r5
   1070c:	f8ad 300c 	strh.w	r3, [sp, #12]
   10710:	f00d fea5 	bl	1e45e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10714:	2800      	cmp	r0, #0
   10716:	d0ec      	beq.n	106f2 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   10718:	4629      	mov	r1, r5
   1071a:	2206      	movs	r2, #6
   1071c:	f10d 0011 	add.w	r0, sp, #17
   10720:	f00d feae 	bl	1e480 <memcpy>
	net_buf_unref(rsp);
   10724:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   10726:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   1072a:	f007 f85b 	bl	177e4 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1072e:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   10730:	4620      	mov	r0, r4
   10732:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   10734:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   10736:	f7fe faad 	bl	ec94 <id_create.constprop.0>
   1073a:	e7cc      	b.n	106d6 <bt_setup_public_id_addr+0x22>
   1073c:	20008000 	.word	0x20008000
   10740:	00024a2a 	.word	0x00024a2a
   10744:	00021d50 	.word	0x00021d50

00010748 <bt_read_static_addr>:
{
   10748:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1074c:	4b1c      	ldr	r3, [pc, #112]	; (107c0 <bt_read_static_addr+0x78>)
{
   1074e:	4607      	mov	r7, r0
   10750:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   10754:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   10756:	f014 0401 	ands.w	r4, r4, #1
   1075a:	d104      	bne.n	10766 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   1075c:	2157      	movs	r1, #87	; 0x57
   1075e:	4819      	ldr	r0, [pc, #100]	; (107c4 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   10760:	f00c f9d6 	bl	1cb10 <printk>
   10764:	e00c      	b.n	10780 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   10766:	2100      	movs	r1, #0
   10768:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1076c:	aa01      	add	r2, sp, #4
   1076e:	f7fe fcb1 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
   10772:	4605      	mov	r5, r0
   10774:	b140      	cbz	r0, 10788 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   10776:	2157      	movs	r1, #87	; 0x57
   10778:	4813      	ldr	r0, [pc, #76]	; (107c8 <bt_read_static_addr+0x80>)
   1077a:	f00c f9c9 	bl	1cb10 <printk>
		return 0;
   1077e:	2400      	movs	r4, #0
}
   10780:	4620      	mov	r0, r4
   10782:	b002      	add	sp, #8
   10784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10788:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   1078c:	9b01      	ldr	r3, [sp, #4]
   1078e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   10790:	785c      	ldrb	r4, [r3, #1]
   10792:	42b4      	cmp	r4, r6
   10794:	bf28      	it	cs
   10796:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10798:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1079a:	42a5      	cmp	r5, r4
   1079c:	db07      	blt.n	107ae <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   1079e:	9801      	ldr	r0, [sp, #4]
   107a0:	f007 f820 	bl	177e4 <net_buf_unref>
	if (!cnt) {
   107a4:	2c00      	cmp	r4, #0
   107a6:	d1eb      	bne.n	10780 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   107a8:	2157      	movs	r1, #87	; 0x57
   107aa:	4808      	ldr	r0, [pc, #32]	; (107cc <bt_read_static_addr+0x84>)
   107ac:	e7d8      	b.n	10760 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   107ae:	fb08 7005 	mla	r0, r8, r5, r7
   107b2:	2216      	movs	r2, #22
   107b4:	4631      	mov	r1, r6
   107b6:	f00d fe63 	bl	1e480 <memcpy>
	for (i = 0; i < cnt; i++) {
   107ba:	3501      	adds	r5, #1
   107bc:	e7ed      	b.n	1079a <bt_read_static_addr+0x52>
   107be:	bf00      	nop
   107c0:	20008000 	.word	0x20008000
   107c4:	00024a4d 	.word	0x00024a4d
   107c8:	00024a7e 	.word	0x00024a7e
   107cc:	00024aa3 	.word	0x00024aa3

000107d0 <bt_setup_random_id_addr>:
{
   107d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   107d2:	4d15      	ldr	r5, [pc, #84]	; (10828 <bt_setup_random_id_addr+0x58>)
{
   107d4:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   107d6:	79ec      	ldrb	r4, [r5, #7]
   107d8:	b9f4      	cbnz	r4, 10818 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   107da:	2101      	movs	r1, #1
   107dc:	a802      	add	r0, sp, #8
   107de:	f7ff ffb3 	bl	10748 <bt_read_static_addr>
   107e2:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   107e4:	b1c0      	cbz	r0, 10818 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   107e6:	2716      	movs	r7, #22
   107e8:	b2e6      	uxtb	r6, r4
   107ea:	ab02      	add	r3, sp, #8
   107ec:	2206      	movs	r2, #6
   107ee:	fb07 3106 	mla	r1, r7, r6, r3
   107f2:	f10d 0001 	add.w	r0, sp, #1
   107f6:	f00d fe43 	bl	1e480 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   107fa:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   107fc:	4669      	mov	r1, sp
   107fe:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   10800:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10804:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   10806:	f7fe fa45 	bl	ec94 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1080a:	79ea      	ldrb	r2, [r5, #7]
   1080c:	b2e3      	uxtb	r3, r4
   1080e:	429a      	cmp	r2, r3
   10810:	d8ea      	bhi.n	107e8 <bt_setup_random_id_addr+0x18>
}
   10812:	2000      	movs	r0, #0
   10814:	b009      	add	sp, #36	; 0x24
   10816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   10818:	2100      	movs	r1, #0
   1081a:	4608      	mov	r0, r1
}
   1081c:	b009      	add	sp, #36	; 0x24
   1081e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   10822:	f7ff bf0d 	b.w	10640 <bt_id_create>
   10826:	bf00      	nop
   10828:	20008000 	.word	0x20008000

0001082c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10830:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   10832:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   10834:	690d      	ldr	r5, [r1, #16]
{
   10836:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   10838:	ebb5 0b03 	subs.w	fp, r5, r3
{
   1083c:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1083e:	4884      	ldr	r0, [pc, #528]	; (10a50 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   10840:	bf18      	it	ne
   10842:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   10846:	9307      	str	r3, [sp, #28]
   10848:	f00d ff2d 	bl	1e6a6 <atomic_get>
{
   1084c:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1084e:	0782      	lsls	r2, r0, #30
{
   10850:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10852:	f140 80ef 	bpl.w	10a34 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   10856:	4608      	mov	r0, r1
   10858:	f7fe f83c 	bl	e8d4 <valid_adv_param>
   1085c:	4607      	mov	r7, r0
   1085e:	2800      	cmp	r0, #0
   10860:	f000 80eb 	beq.w	10a3a <bt_le_adv_start_legacy+0x20e>
   10864:	487a      	ldr	r0, [pc, #488]	; (10a50 <bt_le_adv_start_legacy+0x224>)
   10866:	f00d ff1e 	bl	1e6a6 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   1086a:	0503      	lsls	r3, r0, #20
   1086c:	d402      	bmi.n	10874 <bt_le_adv_start_legacy+0x48>
   1086e:	4878      	ldr	r0, [pc, #480]	; (10a50 <bt_le_adv_start_legacy+0x224>)
   10870:	f00d ff19 	bl	1e6a6 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10874:	f106 0810 	add.w	r8, r6, #16
   10878:	4640      	mov	r0, r8
   1087a:	f00d ff14 	bl	1e6a6 <atomic_get>
   1087e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   10882:	0640      	lsls	r0, r0, #25
   10884:	f100 80dc 	bmi.w	10a40 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10888:	220f      	movs	r2, #15
   1088a:	a80a      	add	r0, sp, #40	; 0x28
   1088c:	9105      	str	r1, [sp, #20]
   1088e:	f00d fe22 	bl	1e4d6 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10892:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   10894:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10896:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1089a:	68e3      	ldr	r3, [r4, #12]
   1089c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   108a0:	f00d fef2 	bl	1e688 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   108a4:	7832      	ldrb	r2, [r6, #0]
   108a6:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   108a8:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   108aa:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   108ac:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   108b0:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   108b4:	d004      	beq.n	108c0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   108b6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   108ba:	4865      	ldr	r0, [pc, #404]	; (10a50 <bt_le_adv_start_legacy+0x224>)
   108bc:	f00d ff12 	bl	1e6e4 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   108c0:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   108c2:	4b64      	ldr	r3, [pc, #400]	; (10a54 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   108c4:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   108c6:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   108ca:	465a      	mov	r2, fp
   108cc:	6861      	ldr	r1, [r4, #4]
   108ce:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   108d2:	f7fe fd17 	bl	f304 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   108d6:	4683      	mov	fp, r0
   108d8:	2800      	cmp	r0, #0
   108da:	d169      	bne.n	109b0 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   108dc:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   108e0:	2d00      	cmp	r5, #0
   108e2:	d042      	beq.n	1096a <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   108e4:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   108e6:	f00d fee1 	bl	1e6ac <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   108ea:	6860      	ldr	r0, [r4, #4]
   108ec:	07c1      	lsls	r1, r0, #31
   108ee:	d544      	bpl.n	1097a <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   108f0:	2d00      	cmp	r5, #0
   108f2:	d03f      	beq.n	10974 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   108f4:	f010 0f10 	tst.w	r0, #16
   108f8:	bf14      	ite	ne
   108fa:	2304      	movne	r3, #4
   108fc:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   108fe:	6921      	ldr	r1, [r4, #16]
   10900:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10904:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10908:	f00d fed0 	bl	1e6ac <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1090c:	210f      	movs	r1, #15
   1090e:	f242 0006 	movw	r0, #8198	; 0x2006
   10912:	f7fe fb95 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   10916:	4683      	mov	fp, r0
   10918:	2800      	cmp	r0, #0
   1091a:	f000 8094 	beq.w	10a46 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1091e:	220f      	movs	r2, #15
   10920:	a90a      	add	r1, sp, #40	; 0x28
   10922:	3008      	adds	r0, #8
   10924:	f00f ff3c 	bl	207a0 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   10928:	2200      	movs	r2, #0
   1092a:	4659      	mov	r1, fp
   1092c:	f242 0006 	movw	r0, #8198	; 0x2006
   10930:	f7fe fbd0 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
   10934:	2800      	cmp	r0, #0
   10936:	f040 8089 	bne.w	10a4c <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   1093a:	b34d      	cbz	r5, 10990 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1093c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1093e:	07da      	lsls	r2, r3, #31
   10940:	d43a      	bmi.n	109b8 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   10942:	2101      	movs	r1, #1
   10944:	4630      	mov	r0, r6
   10946:	f7fe fc75 	bl	f234 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   1094a:	4683      	mov	fp, r0
   1094c:	2800      	cmp	r0, #0
   1094e:	d06a      	beq.n	10a26 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   10950:	4841      	ldr	r0, [pc, #260]	; (10a58 <bt_le_adv_start_legacy+0x22c>)
   10952:	2145      	movs	r1, #69	; 0x45
   10954:	f00c f8dc 	bl	1cb10 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10958:	9807      	ldr	r0, [sp, #28]
   1095a:	b348      	cbz	r0, 109b0 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1095c:	2100      	movs	r1, #0
   1095e:	f000 fed3 	bl	11708 <bt_conn_set_state>
			bt_conn_unref(conn);
   10962:	9807      	ldr	r0, [sp, #28]
   10964:	f000 fea4 	bl	116b0 <bt_conn_unref>
   10968:	e022      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1096a:	9508      	str	r5, [sp, #32]
   1096c:	a908      	add	r1, sp, #32
   1096e:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   10972:	e7b8      	b.n	108e6 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   10974:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10978:	e7c8      	b.n	1090c <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   1097a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1097c:	b933      	cbnz	r3, 1098c <bt_le_adv_start_legacy+0x160>
   1097e:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   10982:	f1c7 0303 	rsb	r3, r7, #3
   10986:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1098a:	e7bf      	b.n	1090c <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   1098c:	2701      	movs	r7, #1
   1098e:	e7f8      	b.n	10982 <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10990:	6863      	ldr	r3, [r4, #4]
   10992:	4652      	mov	r2, sl
   10994:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10998:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1099c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1099e:	4649      	mov	r1, r9
   109a0:	9300      	str	r3, [sp, #0]
   109a2:	4630      	mov	r0, r6
   109a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   109a6:	f7fe fd93 	bl	f4d0 <le_adv_update.constprop.0>
		if (err) {
   109aa:	4683      	mov	fp, r0
   109ac:	2800      	cmp	r0, #0
   109ae:	d0c5      	beq.n	1093c <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   109b0:	4658      	mov	r0, fp
   109b2:	b00f      	add	sp, #60	; 0x3c
   109b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   109b8:	4630      	mov	r0, r6
   109ba:	a907      	add	r1, sp, #28
   109bc:	f7fe f894 	bl	eae8 <le_adv_start_add_conn>
		if (err) {
   109c0:	4683      	mov	fp, r0
   109c2:	2800      	cmp	r0, #0
   109c4:	d0bd      	beq.n	10942 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   109c6:	f110 0f0c 	cmn.w	r0, #12
   109ca:	d1f1      	bne.n	109b0 <bt_le_adv_start_legacy+0x184>
   109cc:	2d00      	cmp	r5, #0
   109ce:	d1ef      	bne.n	109b0 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   109d0:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   109d2:	079b      	lsls	r3, r3, #30
   109d4:	d4ec      	bmi.n	109b0 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   109d6:	6860      	ldr	r0, [r4, #4]
   109d8:	f080 0002 	eor.w	r0, r0, #2
   109dc:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   109e0:	f00b 0201 	and.w	r2, fp, #1
   109e4:	210c      	movs	r1, #12
   109e6:	4640      	mov	r0, r8
   109e8:	f00d fe87 	bl	1e6fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   109ec:	6862      	ldr	r2, [r4, #4]
   109ee:	2107      	movs	r1, #7
   109f0:	4640      	mov	r0, r8
   109f2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   109f6:	f00d fe80 	bl	1e6fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   109fa:	6862      	ldr	r2, [r4, #4]
   109fc:	2108      	movs	r1, #8
   109fe:	4640      	mov	r0, r8
   10a00:	f002 0201 	and.w	r2, r2, #1
   10a04:	f00d fe79 	bl	1e6fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10a08:	463a      	mov	r2, r7
   10a0a:	2109      	movs	r1, #9
   10a0c:	4640      	mov	r0, r8
   10a0e:	f00d fe74 	bl	1e6fa <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10a12:	6862      	ldr	r2, [r4, #4]
   10a14:	210b      	movs	r1, #11
   10a16:	4640      	mov	r0, r8
   10a18:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10a1c:	f00d fe6d 	bl	1e6fa <atomic_set_bit_to>
	return 0;
   10a20:	f04f 0b00 	mov.w	fp, #0
   10a24:	e7c4      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10a26:	9807      	ldr	r0, [sp, #28]
   10a28:	b108      	cbz	r0, 10a2e <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   10a2a:	f000 fe41 	bl	116b0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10a2e:	2d00      	cmp	r5, #0
   10a30:	d1d6      	bne.n	109e0 <bt_le_adv_start_legacy+0x1b4>
   10a32:	e7d0      	b.n	109d6 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   10a34:	f06f 0b0a 	mvn.w	fp, #10
   10a38:	e7ba      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   10a3a:	f06f 0b15 	mvn.w	fp, #21
   10a3e:	e7b7      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   10a40:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   10a44:	e7b4      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   10a46:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   10a4a:	e7b1      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
   10a4c:	4683      	mov	fp, r0
   10a4e:	e7af      	b.n	109b0 <bt_le_adv_start_legacy+0x184>
   10a50:	20008094 	.word	0x20008094
   10a54:	20008000 	.word	0x20008000
   10a58:	00024ad1 	.word	0x00024ad1

00010a5c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10a5c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10a5e:	9c04      	ldr	r4, [sp, #16]
   10a60:	e9cd 3400 	strd	r3, r4, [sp]
   10a64:	4613      	mov	r3, r2
   10a66:	460a      	mov	r2, r1
   10a68:	4601      	mov	r1, r0
   10a6a:	4802      	ldr	r0, [pc, #8]	; (10a74 <bt_le_adv_start+0x18>)
   10a6c:	f7ff fede 	bl	1082c <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   10a70:	b002      	add	sp, #8
   10a72:	bd10      	pop	{r4, pc}
   10a74:	20008018 	.word	0x20008018

00010a78 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10a78:	b530      	push	{r4, r5, lr}
   10a7a:	4c29      	ldr	r4, [pc, #164]	; (10b20 <bt_le_adv_stop+0xa8>)
   10a7c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10a80:	b085      	sub	sp, #20
   10a82:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10a86:	f00d fe2d 	bl	1e6e4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10a8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10a8e:	f00d fe0a 	bl	1e6a6 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10a92:	0641      	lsls	r1, r0, #25
   10a94:	d403      	bmi.n	10a9e <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   10a96:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10a98:	4620      	mov	r0, r4
   10a9a:	b005      	add	sp, #20
   10a9c:	bd30      	pop	{r4, r5, pc}
   10a9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10aa2:	f00d fe00 	bl	1e6a6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10aa6:	05c2      	lsls	r2, r0, #23
   10aa8:	d521      	bpl.n	10aee <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10aaa:	2300      	movs	r3, #0
   10aac:	4669      	mov	r1, sp
   10aae:	f104 0021 	add.w	r0, r4, #33	; 0x21
   10ab2:	9300      	str	r3, [sp, #0]
   10ab4:	f8cd 3003 	str.w	r3, [sp, #3]
   10ab8:	f00d fe11 	bl	1e6de <bt_addr_le_cmp>
   10abc:	7e25      	ldrb	r5, [r4, #24]
   10abe:	bb58      	cbnz	r0, 10b18 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10ac0:	4b18      	ldr	r3, [pc, #96]	; (10b24 <bt_le_adv_stop+0xac>)
   10ac2:	a902      	add	r1, sp, #8
   10ac4:	889a      	ldrh	r2, [r3, #4]
   10ac6:	6818      	ldr	r0, [r3, #0]
   10ac8:	f8ad 200c 	strh.w	r2, [sp, #12]
   10acc:	2204      	movs	r2, #4
   10ace:	799b      	ldrb	r3, [r3, #6]
   10ad0:	9002      	str	r0, [sp, #8]
   10ad2:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10ad6:	4628      	mov	r0, r5
   10ad8:	f000 ff48 	bl	1196c <bt_conn_lookup_state_le>
   10adc:	4604      	mov	r4, r0
	if (conn) {
   10ade:	b130      	cbz	r0, 10aee <bt_le_adv_stop+0x76>
		conn->err = status;
   10ae0:	2100      	movs	r1, #0
   10ae2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ae4:	f000 fe10 	bl	11708 <bt_conn_set_state>
		bt_conn_unref(conn);
   10ae8:	4620      	mov	r0, r4
   10aea:	f000 fde1 	bl	116b0 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10aee:	2100      	movs	r1, #0
   10af0:	480d      	ldr	r0, [pc, #52]	; (10b28 <bt_le_adv_stop+0xb0>)
   10af2:	f7fe fb9f 	bl	f234 <set_le_adv_enable_legacy>
		if (err) {
   10af6:	4604      	mov	r4, r0
   10af8:	2800      	cmp	r0, #0
   10afa:	d1cd      	bne.n	10a98 <bt_le_adv_stop+0x20>
   10afc:	480b      	ldr	r0, [pc, #44]	; (10b2c <bt_le_adv_stop+0xb4>)
   10afe:	f00d fdd2 	bl	1e6a6 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10b02:	0683      	lsls	r3, r0, #26
   10b04:	d5c7      	bpl.n	10a96 <bt_le_adv_stop+0x1e>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
   10b06:	4620      	mov	r0, r4
   10b08:	f00d fe7e 	bl	1e808 <set_le_scan_enable.isra.0>
			le_set_private_addr(BT_ID_DEFAULT);
   10b0c:	f00d fe2e 	bl	1e76c <le_set_private_addr.constprop.0>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
   10b10:	2001      	movs	r0, #1
   10b12:	f00d fe79 	bl	1e808 <set_le_scan_enable.isra.0>
   10b16:	e7bf      	b.n	10a98 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10b18:	2205      	movs	r2, #5
   10b1a:	f104 0121 	add.w	r1, r4, #33	; 0x21
   10b1e:	e7da      	b.n	10ad6 <bt_le_adv_stop+0x5e>
   10b20:	20008000 	.word	0x20008000
   10b24:	00021d50 	.word	0x00021d50
   10b28:	20008018 	.word	0x20008018
   10b2c:	20008094 	.word	0x20008094

00010b30 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   10b30:	b513      	push	{r0, r1, r4, lr}
   10b32:	4818      	ldr	r0, [pc, #96]	; (10b94 <bt_le_adv_resume+0x64>)
   10b34:	f00d fdb7 	bl	1e6a6 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   10b38:	04c1      	lsls	r1, r0, #19
   10b3a:	d529      	bpl.n	10b90 <bt_le_adv_resume+0x60>
   10b3c:	4815      	ldr	r0, [pc, #84]	; (10b94 <bt_le_adv_resume+0x64>)
   10b3e:	f00d fdb2 	bl	1e6a6 <atomic_get>
   10b42:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10b44:	f3c0 1480 	ubfx	r4, r0, #6, #1
   10b48:	d422      	bmi.n	10b90 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b4a:	4812      	ldr	r0, [pc, #72]	; (10b94 <bt_le_adv_resume+0x64>)
   10b4c:	f00d fdab 	bl	1e6a6 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10b50:	05c3      	lsls	r3, r0, #23
   10b52:	d51d      	bpl.n	10b90 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10b54:	4810      	ldr	r0, [pc, #64]	; (10b98 <bt_le_adv_resume+0x68>)
   10b56:	a901      	add	r1, sp, #4
   10b58:	f7fd ffc6 	bl	eae8 <le_adv_start_add_conn>
	if (err) {
   10b5c:	b9c0      	cbnz	r0, 10b90 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10b5e:	2101      	movs	r1, #1
   10b60:	480d      	ldr	r0, [pc, #52]	; (10b98 <bt_le_adv_resume+0x68>)
   10b62:	f7fe fb67 	bl	f234 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10b66:	b150      	cbz	r0, 10b7e <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b68:	4621      	mov	r1, r4
   10b6a:	9801      	ldr	r0, [sp, #4]
   10b6c:	f000 fdcc 	bl	11708 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b70:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10b74:	4807      	ldr	r0, [pc, #28]	; (10b94 <bt_le_adv_resume+0x64>)
   10b76:	f00d fdb5 	bl	1e6e4 <atomic_and>
	return (old & mask) != 0;
   10b7a:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10b7e:	9801      	ldr	r0, [sp, #4]
   10b80:	f000 fd96 	bl	116b0 <bt_conn_unref>
	if (persist_paused) {
   10b84:	b124      	cbz	r4, 10b90 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10b8a:	4802      	ldr	r0, [pc, #8]	; (10b94 <bt_le_adv_resume+0x64>)
   10b8c:	f00d fd91 	bl	1e6b2 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10b90:	b002      	add	sp, #8
   10b92:	bd10      	pop	{r4, pc}
   10b94:	20008028 	.word	0x20008028
   10b98:	20008018 	.word	0x20008018

00010b9c <enh_conn_complete>:
{
   10b9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10ba0:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10ba4:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
{
   10ba8:	4605      	mov	r5, r0
   10baa:	4880      	ldr	r0, [pc, #512]	; (10dac <enh_conn_complete+0x210>)
   10bac:	f00d fd9a 	bl	1e6e4 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   10bb0:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10bb2:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   10bb6:	d504      	bpl.n	10bc2 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   10bb8:	2200      	movs	r2, #0
   10bba:	2002      	movs	r0, #2
   10bbc:	497c      	ldr	r1, [pc, #496]	; (10db0 <enh_conn_complete+0x214>)
   10bbe:	f006 fb55 	bl	1726c <bt_keys_foreach>
	if (evt->status) {
   10bc2:	782c      	ldrb	r4, [r5, #0]
   10bc4:	2c00      	cmp	r4, #0
   10bc6:	d048      	beq.n	10c5a <enh_conn_complete+0xbe>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10bc8:	2c3c      	cmp	r4, #60	; 0x3c
   10bca:	d11a      	bne.n	10c02 <enh_conn_complete+0x66>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10bcc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10bd0:	4878      	ldr	r0, [pc, #480]	; (10db4 <enh_conn_complete+0x218>)
   10bd2:	f00d fd87 	bl	1e6e4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10bd6:	2000      	movs	r0, #0
   10bd8:	f7fd fffe 	bl	ebd8 <find_pending_connect.part.0>
		if (!conn) {
   10bdc:	4605      	mov	r5, r0
   10bde:	b930      	cbnz	r0, 10bee <enh_conn_complete+0x52>
			BT_ERR("No pending slave connection");
   10be0:	2145      	movs	r1, #69	; 0x45
   10be2:	4875      	ldr	r0, [pc, #468]	; (10db8 <enh_conn_complete+0x21c>)
}
   10be4:	b004      	add	sp, #16
   10be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10bea:	f00b bf91 	b.w	1cb10 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10bee:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10bf0:	2100      	movs	r1, #0
   10bf2:	f000 fd89 	bl	11708 <bt_conn_set_state>
		bt_conn_unref(conn);
   10bf6:	4628      	mov	r0, r5
}
   10bf8:	b004      	add	sp, #16
   10bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10bfe:	f000 bd57 	b.w	116b0 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10c02:	2c02      	cmp	r4, #2
   10c04:	d121      	bne.n	10c4a <enh_conn_complete+0xae>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10c06:	2100      	movs	r1, #0
   10c08:	2206      	movs	r2, #6
   10c0a:	4608      	mov	r0, r1
   10c0c:	f000 feae 	bl	1196c <bt_conn_lookup_state_le>
	if (!conn) {
   10c10:	4605      	mov	r5, r0
   10c12:	b948      	cbnz	r0, 10c28 <enh_conn_complete+0x8c>
		BT_ERR("No pending master connection");
   10c14:	2145      	movs	r1, #69	; 0x45
   10c16:	4869      	ldr	r0, [pc, #420]	; (10dbc <enh_conn_complete+0x220>)
   10c18:	f00b ff7a 	bl	1cb10 <printk>
			bt_le_scan_update(false);
   10c1c:	2000      	movs	r0, #0
   10c1e:	f7fe ff87 	bl	fb30 <bt_le_scan_update>
}
   10c22:	b004      	add	sp, #16
   10c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c28:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10c2a:	2100      	movs	r1, #0
   10c2c:	f000 fd6c 	bl	11708 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c30:	1d28      	adds	r0, r5, #4
   10c32:	f00d fd38 	bl	1e6a6 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   10c36:	07c2      	lsls	r2, r0, #31
   10c38:	d503      	bpl.n	10c42 <enh_conn_complete+0xa6>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10c3a:	4621      	mov	r1, r4
   10c3c:	4628      	mov	r0, r5
   10c3e:	f000 fd63 	bl	11708 <bt_conn_set_state>
	bt_conn_unref(conn);
   10c42:	4628      	mov	r0, r5
   10c44:	f000 fd34 	bl	116b0 <bt_conn_unref>
   10c48:	e7e8      	b.n	10c1c <enh_conn_complete+0x80>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10c4a:	4622      	mov	r2, r4
   10c4c:	2157      	movs	r1, #87	; 0x57
   10c4e:	485c      	ldr	r0, [pc, #368]	; (10dc0 <enh_conn_complete+0x224>)
}
   10c50:	b004      	add	sp, #16
   10c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10c56:	f00b bf5b 	b.w	1cb10 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10c5a:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10c5c:	1d2e      	adds	r6, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10c5e:	3b02      	subs	r3, #2
   10c60:	2b01      	cmp	r3, #1
   10c62:	d836      	bhi.n	10cd2 <enh_conn_complete+0x136>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10c64:	4631      	mov	r1, r6
   10c66:	a802      	add	r0, sp, #8
   10c68:	f00d fd20 	bl	1e6ac <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10c6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10c70:	2206      	movs	r2, #6
   10c72:	3b02      	subs	r3, #2
   10c74:	f105 0111 	add.w	r1, r5, #17
   10c78:	f10d 0001 	add.w	r0, sp, #1
   10c7c:	f88d 3008 	strb.w	r3, [sp, #8]
   10c80:	f00d fbfe 	bl	1e480 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10c84:	2301      	movs	r3, #1
   10c86:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10c8a:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10c8c:	bba0      	cbnz	r0, 10cf8 <enh_conn_complete+0x15c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10c8e:	2206      	movs	r2, #6
   10c90:	a902      	add	r1, sp, #8
   10c92:	f000 fe6b 	bl	1196c <bt_conn_lookup_state_le>
   10c96:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c98:	78eb      	ldrb	r3, [r5, #3]
   10c9a:	2b01      	cmp	r3, #1
   10c9c:	d104      	bne.n	10ca8 <enh_conn_complete+0x10c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10c9e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10ca2:	4844      	ldr	r0, [pc, #272]	; (10db4 <enh_conn_complete+0x218>)
   10ca4:	f00d fd1e 	bl	1e6e4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ca8:	78eb      	ldrb	r3, [r5, #3]
   10caa:	b923      	cbnz	r3, 10cb6 <enh_conn_complete+0x11a>
   10cac:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10cb0:	483e      	ldr	r0, [pc, #248]	; (10dac <enh_conn_complete+0x210>)
   10cb2:	f00d fd17 	bl	1e6e4 <atomic_and>
	if (!conn) {
   10cb6:	bb3c      	cbnz	r4, 10d08 <enh_conn_complete+0x16c>
		BT_ERR("No pending conn for peer %s",
   10cb8:	4630      	mov	r0, r6
   10cba:	f7fd fc05 	bl	e4c8 <bt_addr_le_str_real>
   10cbe:	2145      	movs	r1, #69	; 0x45
   10cc0:	4602      	mov	r2, r0
   10cc2:	4840      	ldr	r0, [pc, #256]	; (10dc4 <enh_conn_complete+0x228>)
   10cc4:	f00b ff24 	bl	1cb10 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10cc8:	211f      	movs	r1, #31
   10cca:	4640      	mov	r0, r8
   10ccc:	f00d fdd9 	bl	1e882 <bt_hci_disconnect>
		return;
   10cd0:	e7a7      	b.n	10c22 <enh_conn_complete+0x86>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   10cd2:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   10cd4:	4631      	mov	r1, r6
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   10cd6:	2b01      	cmp	r3, #1
   10cd8:	bf04      	itt	eq
   10cda:	4b3b      	ldreq	r3, [pc, #236]	; (10dc8 <enh_conn_complete+0x22c>)
   10cdc:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   10ce0:	4620      	mov	r0, r4
   10ce2:	f00d fdc4 	bl	1e86e <bt_lookup_id_addr>
   10ce6:	4601      	mov	r1, r0
   10ce8:	a802      	add	r0, sp, #8
   10cea:	f00d fcdf 	bl	1e6ac <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10cee:	4631      	mov	r1, r6
   10cf0:	4668      	mov	r0, sp
   10cf2:	f00d fcdb 	bl	1e6ac <bt_addr_le_copy>
   10cf6:	e7c8      	b.n	10c8a <enh_conn_complete+0xee>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10cf8:	2801      	cmp	r0, #1
   10cfa:	d103      	bne.n	10d04 <enh_conn_complete+0x168>
   10cfc:	a802      	add	r0, sp, #8
   10cfe:	f7fd ff6b 	bl	ebd8 <find_pending_connect.part.0>
   10d02:	e7c8      	b.n	10c96 <enh_conn_complete+0xfa>
	return NULL;
   10d04:	2400      	movs	r4, #0
   10d06:	e7c7      	b.n	10c98 <enh_conn_complete+0xfc>
	conn->handle = handle;
   10d08:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10d0a:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10d0c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10d10:	f00d fccc 	bl	1e6ac <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10d14:	7e2a      	ldrb	r2, [r5, #24]
   10d16:	7deb      	ldrb	r3, [r5, #23]
   10d18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10d1c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10d20:	7eaa      	ldrb	r2, [r5, #26]
   10d22:	7e6b      	ldrb	r3, [r5, #25]
   10d24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10d28:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10d2c:	7f2a      	ldrb	r2, [r5, #28]
   10d2e:	7eeb      	ldrb	r3, [r5, #27]
   10d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10d34:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10d36:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10d3a:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10d3c:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10d3e:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10d40:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10d42:	d113      	bne.n	10d6c <enh_conn_complete+0x1d0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10d44:	4669      	mov	r1, sp
   10d46:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10d4a:	f00d fcaf 	bl	1e6ac <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10d4e:	7a21      	ldrb	r1, [r4, #8]
   10d50:	4d1d      	ldr	r5, [pc, #116]	; (10dc8 <enh_conn_complete+0x22c>)
   10d52:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10d56:	4429      	add	r1, r5
   10d58:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10d5c:	f00d fca6 	bl	1e6ac <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10d60:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10d64:	065b      	lsls	r3, r3, #25
   10d66:	d501      	bpl.n	10d6c <enh_conn_complete+0x1d0>
			bt_le_adv_resume();
   10d68:	f7ff fee2 	bl	10b30 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d6c:	78e3      	ldrb	r3, [r4, #3]
   10d6e:	b96b      	cbnz	r3, 10d8c <enh_conn_complete+0x1f0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10d70:	4669      	mov	r1, sp
   10d72:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10d76:	f00d fc99 	bl	1e6ac <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10d7a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10d7c:	4b12      	ldr	r3, [pc, #72]	; (10dc8 <enh_conn_complete+0x22c>)
					&bt_dev.id_addr[conn->id]);
   10d7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10d82:	4419      	add	r1, r3
   10d84:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10d88:	f00d fc90 	bl	1e6ac <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10d8c:	2107      	movs	r1, #7
   10d8e:	4620      	mov	r0, r4
   10d90:	f000 fcba 	bl	11708 <bt_conn_set_state>
	conn_auto_initiate(conn);
   10d94:	4620      	mov	r0, r4
   10d96:	f7ff f941 	bl	1001c <conn_auto_initiate>
	bt_conn_unref(conn);
   10d9a:	4620      	mov	r0, r4
   10d9c:	f000 fc88 	bl	116b0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10da0:	78e3      	ldrb	r3, [r4, #3]
   10da2:	2b00      	cmp	r3, #0
   10da4:	f47f af3d 	bne.w	10c22 <enh_conn_complete+0x86>
   10da8:	e738      	b.n	10c1c <enh_conn_complete+0x80>
   10daa:	bf00      	nop
   10dac:	20008094 	.word	0x20008094
   10db0:	0001e8fb 	.word	0x0001e8fb
   10db4:	20008028 	.word	0x20008028
   10db8:	00024af1 	.word	0x00024af1
   10dbc:	00024b12 	.word	0x00024b12
   10dc0:	00024b34 	.word	0x00024b34
   10dc4:	00024b52 	.word	0x00024b52
   10dc8:	20008000 	.word	0x20008000

00010dcc <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10dcc:	b570      	push	{r4, r5, r6, lr}
   10dce:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10dd0:	482e      	ldr	r0, [pc, #184]	; (10e8c <bt_le_scan_start+0xc0>)
   10dd2:	f00d fc68 	bl	1e6a6 <atomic_get>
   10dd6:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10dd8:	0781      	lsls	r1, r0, #30
   10dda:	d553      	bpl.n	10e84 <bt_le_scan_start+0xb8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10ddc:	782a      	ldrb	r2, [r5, #0]
   10dde:	2a01      	cmp	r2, #1
   10de0:	d903      	bls.n	10dea <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10de2:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10de6:	4620      	mov	r0, r4
   10de8:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10dea:	686b      	ldr	r3, [r5, #4]
   10dec:	f033 030f 	bics.w	r3, r3, #15
   10df0:	d1f7      	bne.n	10de2 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10df2:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10df6:	8928      	ldrh	r0, [r5, #8]
   10df8:	1f03      	subs	r3, r0, #4
   10dfa:	b29b      	uxth	r3, r3
   10dfc:	42a3      	cmp	r3, r4
   10dfe:	d8f0      	bhi.n	10de2 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10e00:	8969      	ldrh	r1, [r5, #10]
   10e02:	1f0b      	subs	r3, r1, #4
   10e04:	b29b      	uxth	r3, r3
   10e06:	42a3      	cmp	r3, r4
   10e08:	d8eb      	bhi.n	10de2 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10e0a:	4288      	cmp	r0, r1
   10e0c:	d3e9      	bcc.n	10de2 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10e0e:	b942      	cbnz	r2, 10e22 <bt_le_scan_start+0x56>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10e10:	2106      	movs	r1, #6
   10e12:	481e      	ldr	r0, [pc, #120]	; (10e8c <bt_le_scan_start+0xc0>)
   10e14:	f00d fc58 	bl	1e6c8 <atomic_test_and_set_bit>
   10e18:	4603      	mov	r3, r0
   10e1a:	b138      	cbz	r0, 10e2c <bt_le_scan_start+0x60>
		return -EALREADY;
   10e1c:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10e20:	e7e1      	b.n	10de6 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10e22:	f7fe fc27 	bl	f674 <bt_le_scan_random_addr_check>
   10e26:	2800      	cmp	r0, #0
   10e28:	d1f2      	bne.n	10e10 <bt_le_scan_start+0x44>
   10e2a:	e7da      	b.n	10de2 <bt_le_scan_start+0x16>
   10e2c:	4817      	ldr	r0, [pc, #92]	; (10e8c <bt_le_scan_start+0xc0>)
   10e2e:	f00d fc3a 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10e32:	0682      	lsls	r2, r0, #26
   10e34:	d50a      	bpl.n	10e4c <bt_le_scan_start+0x80>
	return set_le_scan_enable_legacy(enable);
   10e36:	4618      	mov	r0, r3
   10e38:	f7fe fa28 	bl	f28c <set_le_scan_enable_legacy>
		if (err) {
   10e3c:	4604      	mov	r4, r0
   10e3e:	b128      	cbz	r0, 10e4c <bt_le_scan_start+0x80>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e40:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10e44:	4811      	ldr	r0, [pc, #68]	; (10e8c <bt_le_scan_start+0xc0>)
   10e46:	f00d fc4d 	bl	1e6e4 <atomic_and>
		return err;
   10e4a:	e7cc      	b.n	10de6 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10e4c:	686a      	ldr	r2, [r5, #4]
   10e4e:	2108      	movs	r1, #8
   10e50:	480e      	ldr	r0, [pc, #56]	; (10e8c <bt_le_scan_start+0xc0>)
   10e52:	f002 0201 	and.w	r2, r2, #1
   10e56:	f00d fc50 	bl	1e6fa <atomic_set_bit_to>
		if (param->timeout) {
   10e5a:	89ab      	ldrh	r3, [r5, #12]
   10e5c:	b13b      	cbz	r3, 10e6e <bt_le_scan_start+0xa2>
   10e5e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10e62:	480a      	ldr	r0, [pc, #40]	; (10e8c <bt_le_scan_start+0xc0>)
   10e64:	f00d fc3e 	bl	1e6e4 <atomic_and>
			return -ENOTSUP;
   10e68:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10e6c:	e7bb      	b.n	10de6 <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10e6e:	896a      	ldrh	r2, [r5, #10]
   10e70:	8929      	ldrh	r1, [r5, #8]
   10e72:	7828      	ldrb	r0, [r5, #0]
   10e74:	f7fe fba0 	bl	f5b8 <start_le_scan_legacy>
	if (err) {
   10e78:	4604      	mov	r4, r0
   10e7a:	2800      	cmp	r0, #0
   10e7c:	d1e0      	bne.n	10e40 <bt_le_scan_start+0x74>
	scan_dev_found_cb = cb;
   10e7e:	4b04      	ldr	r3, [pc, #16]	; (10e90 <bt_le_scan_start+0xc4>)
   10e80:	601e      	str	r6, [r3, #0]
	return 0;
   10e82:	e7b0      	b.n	10de6 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10e84:	f06f 040a 	mvn.w	r4, #10
   10e88:	e7ad      	b.n	10de6 <bt_le_scan_start+0x1a>
   10e8a:	bf00      	nop
   10e8c:	20008094 	.word	0x20008094
   10e90:	20009c1c 	.word	0x20009c1c

00010e94 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10e94:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e96:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10e9a:	4807      	ldr	r0, [pc, #28]	; (10eb8 <bt_le_scan_stop+0x24>)
   10e9c:	f00d fc22 	bl	1e6e4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10ea0:	0643      	lsls	r3, r0, #25
   10ea2:	d506      	bpl.n	10eb2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10ea4:	2000      	movs	r0, #0
   10ea6:	4b05      	ldr	r3, [pc, #20]	; (10ebc <bt_le_scan_stop+0x28>)
   10ea8:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10eae:	f7fe be3f 	b.w	fb30 <bt_le_scan_update>
}
   10eb2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10eb6:	bd08      	pop	{r3, pc}
   10eb8:	20008094 	.word	0x20008094
   10ebc:	20009c1c 	.word	0x20009c1c

00010ec0 <bt_le_scan_cb_register>:
	parent->next = child;
   10ec0:	2300      	movs	r3, #0
   10ec2:	6083      	str	r3, [r0, #8]
	return list->tail;
   10ec4:	4b05      	ldr	r3, [pc, #20]	; (10edc <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10ec6:	f100 0208 	add.w	r2, r0, #8
   10eca:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10ecc:	b911      	cbnz	r1, 10ed4 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10ece:	e9c3 2200 	strd	r2, r2, [r3]
}
   10ed2:	4770      	bx	lr
	parent->next = child;
   10ed4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10ed6:	605a      	str	r2, [r3, #4]
}
   10ed8:	4770      	bx	lr
   10eda:	bf00      	nop
   10edc:	20009c14 	.word	0x20009c14

00010ee0 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   10ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   10ee2:	4e1b      	ldr	r6, [pc, #108]	; (10f50 <bt_pub_key_gen+0x70>)
   10ee4:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
   10ee8:	f003 0306 	and.w	r3, r3, #6
   10eec:	2b06      	cmp	r3, #6
   10eee:	d007      	beq.n	10f00 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   10ef0:	2157      	movs	r1, #87	; 0x57
   10ef2:	4818      	ldr	r0, [pc, #96]	; (10f54 <bt_pub_key_gen+0x74>)
   10ef4:	f00b fe0c 	bl	1cb10 <printk>
		return -ENOTSUP;
   10ef8:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
   10efc:	4620      	mov	r0, r4
   10efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
   10f00:	4f15      	ldr	r7, [pc, #84]	; (10f58 <bt_pub_key_gen+0x78>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10f02:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
   10f04:	683b      	ldr	r3, [r7, #0]
	pub_key_cb = new_cb;
   10f06:	6038      	str	r0, [r7, #0]
	new_cb->_next = pub_key_cb;
   10f08:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10f0a:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10f0e:	f00d fbdb 	bl	1e6c8 <atomic_test_and_set_bit>
   10f12:	4605      	mov	r5, r0
   10f14:	b9d0      	cbnz	r0, 10f4c <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10f16:	f06f 0108 	mvn.w	r1, #8
   10f1a:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10f1e:	f00d fbe1 	bl	1e6e4 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   10f22:	462a      	mov	r2, r5
   10f24:	4629      	mov	r1, r5
   10f26:	f242 0025 	movw	r0, #8229	; 0x2025
   10f2a:	f7fe f8d3 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
   10f2e:	4604      	mov	r4, r0
   10f30:	2800      	cmp	r0, #0
   10f32:	d0e3      	beq.n	10efc <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
   10f34:	2145      	movs	r1, #69	; 0x45
   10f36:	4809      	ldr	r0, [pc, #36]	; (10f5c <bt_pub_key_gen+0x7c>)
   10f38:	f00b fdea 	bl	1cb10 <printk>
   10f3c:	f06f 0110 	mvn.w	r1, #16
   10f40:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10f44:	f00d fbce 	bl	1e6e4 <atomic_and>
		pub_key_cb = NULL;
   10f48:	603d      	str	r5, [r7, #0]
		return err;
   10f4a:	e7d7      	b.n	10efc <bt_pub_key_gen+0x1c>
		return 0;
   10f4c:	2400      	movs	r4, #0
   10f4e:	e7d5      	b.n	10efc <bt_pub_key_gen+0x1c>
   10f50:	20008000 	.word	0x20008000
   10f54:	00024b73 	.word	0x00024b73
   10f58:	20009c0c 	.word	0x20009c0c
   10f5c:	00024b97 	.word	0x00024b97

00010f60 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
   10f60:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10f62:	4804      	ldr	r0, [pc, #16]	; (10f74 <bt_pub_key_get+0x14>)
   10f64:	f00d fb9f 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
   10f68:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
   10f6c:	4802      	ldr	r0, [pc, #8]	; (10f78 <bt_pub_key_get+0x18>)
   10f6e:	bf08      	it	eq
   10f70:	2000      	moveq	r0, #0
   10f72:	bd08      	pop	{r3, pc}
   10f74:	20008094 	.word	0x20008094
   10f78:	2000b757 	.word	0x2000b757

00010f7c <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   10f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
   10f7e:	4d1c      	ldr	r5, [pc, #112]	; (10ff0 <bt_dh_key_gen+0x74>)
{
   10f80:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   10f82:	682b      	ldr	r3, [r5, #0]
   10f84:	428b      	cmp	r3, r1
   10f86:	d02d      	beq.n	10fe4 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10f88:	b113      	cbz	r3, 10f90 <bt_dh_key_gen+0x14>
		return -EBUSY;
   10f8a:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
   10f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f90:	4818      	ldr	r0, [pc, #96]	; (10ff4 <bt_dh_key_gen+0x78>)
   10f92:	f00d fb88 	bl	1e6a6 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10f96:	06c2      	lsls	r2, r0, #27
   10f98:	f3c0 1700 	ubfx	r7, r0, #4, #1
   10f9c:	d4f5      	bmi.n	10f8a <bt_dh_key_gen+0xe>
   10f9e:	4815      	ldr	r0, [pc, #84]	; (10ff4 <bt_dh_key_gen+0x78>)
   10fa0:	f00d fb81 	bl	1e6a6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   10fa4:	0703      	lsls	r3, r0, #28
   10fa6:	d520      	bpl.n	10fea <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
   10fa8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   10faa:	f242 0026 	movw	r0, #8230	; 0x2026
   10fae:	2140      	movs	r1, #64	; 0x40
   10fb0:	f7fe f846 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   10fb4:	4604      	mov	r4, r0
   10fb6:	b918      	cbnz	r0, 10fc0 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
   10fb8:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
   10fba:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10fbe:	e7e6      	b.n	10f8e <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
   10fc0:	2140      	movs	r1, #64	; 0x40
   10fc2:	3008      	adds	r0, #8
   10fc4:	f006 fd24 	bl	17a10 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   10fc8:	2240      	movs	r2, #64	; 0x40
   10fca:	4631      	mov	r1, r6
   10fcc:	f00d fa58 	bl	1e480 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   10fd0:	463a      	mov	r2, r7
   10fd2:	4621      	mov	r1, r4
   10fd4:	f242 0026 	movw	r0, #8230	; 0x2026
   10fd8:	f7fe f87c 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (err) {
   10fdc:	2800      	cmp	r0, #0
   10fde:	d0d6      	beq.n	10f8e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   10fe0:	602f      	str	r7, [r5, #0]
		return err;
   10fe2:	e7d4      	b.n	10f8e <bt_dh_key_gen+0x12>
		return -EALREADY;
   10fe4:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10fe8:	e7d1      	b.n	10f8e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   10fea:	f06f 0030 	mvn.w	r0, #48	; 0x30
   10fee:	e7ce      	b.n	10f8e <bt_dh_key_gen+0x12>
   10ff0:	20009c08 	.word	0x20009c08
   10ff4:	20008094 	.word	0x20008094

00010ff8 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ffa:	b08d      	sub	sp, #52	; 0x34
   10ffc:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10ffe:	2700      	movs	r7, #0
   11000:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11002:	2100      	movs	r1, #0
   11004:	f242 0018 	movw	r0, #8216	; 0x2018
   11008:	aa02      	add	r2, sp, #8
   1100a:	f7fe f863 	bl	f0d4 <bt_hci_cmd_send_sync>
		if (ret) {
   1100e:	4604      	mov	r4, r0
   11010:	bb58      	cbnz	r0, 1106a <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   11012:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   11014:	2208      	movs	r2, #8
   11016:	6899      	ldr	r1, [r3, #8]
   11018:	4630      	mov	r0, r6
   1101a:	3101      	adds	r1, #1
   1101c:	f00d fa30 	bl	1e480 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   11020:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   11022:	9802      	ldr	r0, [sp, #8]
   11024:	f006 fbde 	bl	177e4 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   11028:	2f04      	cmp	r7, #4
   1102a:	f106 0608 	add.w	r6, r6, #8
   1102e:	d1e8      	bne.n	11002 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   11030:	f010 fb52 	bl	216d8 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   11034:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   11038:	fba0 3206 	umull	r3, r2, r0, r6
   1103c:	fb06 2101 	mla	r1, r6, r1, r2
   11040:	0bdb      	lsrs	r3, r3, #15
   11042:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11046:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   11048:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1104c:	2308      	movs	r3, #8
   1104e:	2220      	movs	r2, #32
   11050:	9300      	str	r3, [sp, #0]
   11052:	4629      	mov	r1, r5
   11054:	4806      	ldr	r0, [pc, #24]	; (11070 <prng_reseed.constprop.0+0x78>)
   11056:	446b      	add	r3, sp
   11058:	f00d f8a8 	bl	1e1ac <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1105c:	b928      	cbnz	r0, 1106a <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   1105e:	2145      	movs	r1, #69	; 0x45
   11060:	4804      	ldr	r0, [pc, #16]	; (11074 <prng_reseed.constprop.0+0x7c>)
   11062:	f00b fd55 	bl	1cb10 <printk>
		return -EIO;
   11066:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   1106a:	4620      	mov	r0, r4
   1106c:	b00d      	add	sp, #52	; 0x34
   1106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11070:	20008908 	.word	0x20008908
   11074:	00024c01 	.word	0x00024c01

00011078 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   11078:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1107a:	b570      	push	{r4, r5, r6, lr}
   1107c:	4604      	mov	r4, r0
   1107e:	460d      	mov	r5, r1
   11080:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   11084:	d915      	bls.n	110b2 <sys_memcpy_swap.constprop.0+0x3a>
   11086:	42b0      	cmp	r0, r6
   11088:	d20a      	bcs.n	110a0 <sys_memcpy_swap.constprop.0+0x28>
   1108a:	490c      	ldr	r1, [pc, #48]	; (110bc <sys_memcpy_swap.constprop.0+0x44>)
   1108c:	480c      	ldr	r0, [pc, #48]	; (110c0 <sys_memcpy_swap.constprop.0+0x48>)
   1108e:	f240 2217 	movw	r2, #535	; 0x217
   11092:	f00b fd3d 	bl	1cb10 <printk>
   11096:	f240 2117 	movw	r1, #535	; 0x217
   1109a:	4808      	ldr	r0, [pc, #32]	; (110bc <sys_memcpy_swap.constprop.0+0x44>)
   1109c:	f00b ffde 	bl	1d05c <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   110a0:	4633      	mov	r3, r6
   110a2:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   110a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   110a8:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   110aa:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   110ae:	d1f9      	bne.n	110a4 <sys_memcpy_swap.constprop.0+0x2c>
	}
}
   110b0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   110b2:	d0ea      	beq.n	1108a <sys_memcpy_swap.constprop.0+0x12>
   110b4:	f100 0310 	add.w	r3, r0, #16
   110b8:	4299      	cmp	r1, r3
   110ba:	e7e5      	b.n	11088 <sys_memcpy_swap.constprop.0+0x10>
   110bc:	00024c1d 	.word	0x00024c1d
   110c0:	00022f17 	.word	0x00022f17

000110c4 <prng_init>:

int prng_init(void)
{
   110c4:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   110c6:	4b13      	ldr	r3, [pc, #76]	; (11114 <prng_init+0x50>)
   110c8:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   110cc:	2b00      	cmp	r3, #0
   110ce:	da1d      	bge.n	1110c <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   110d0:	2100      	movs	r1, #0
   110d2:	f242 0018 	movw	r0, #8216	; 0x2018
   110d6:	aa01      	add	r2, sp, #4
   110d8:	f7fd fffc 	bl	f0d4 <bt_hci_cmd_send_sync>
	if (ret) {
   110dc:	b988      	cbnz	r0, 11102 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   110de:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   110e0:	2208      	movs	r2, #8
   110e2:	6899      	ldr	r1, [r3, #8]
   110e4:	480c      	ldr	r0, [pc, #48]	; (11118 <prng_init+0x54>)
   110e6:	3101      	adds	r1, #1
   110e8:	f00d f840 	bl	1e16c <tc_hmac_prng_init>
   110ec:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   110ee:	9801      	ldr	r0, [sp, #4]
   110f0:	f006 fb78 	bl	177e4 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   110f4:	b93c      	cbnz	r4, 11106 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   110f6:	4809      	ldr	r0, [pc, #36]	; (1111c <prng_init+0x58>)
   110f8:	2145      	movs	r1, #69	; 0x45
   110fa:	f00b fd09 	bl	1cb10 <printk>
		return -EIO;
   110fe:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   11102:	b002      	add	sp, #8
   11104:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   11106:	f7ff ff77 	bl	10ff8 <prng_reseed.constprop.0>
   1110a:	e7fa      	b.n	11102 <prng_init+0x3e>
		return -ENOTSUP;
   1110c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11110:	e7f7      	b.n	11102 <prng_init+0x3e>
   11112:	bf00      	nop
   11114:	20008000 	.word	0x20008000
   11118:	20008908 	.word	0x20008908
   1111c:	00024c48 	.word	0x00024c48

00011120 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   11120:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   11122:	4a0a      	ldr	r2, [pc, #40]	; (1114c <bt_rand+0x2c>)
{
   11124:	4604      	mov	r4, r0
   11126:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   11128:	f00d f859 	bl	1e1de <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1112c:	1c43      	adds	r3, r0, #1
   1112e:	d107      	bne.n	11140 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   11130:	f7ff ff62 	bl	10ff8 <prng_reseed.constprop.0>
		if (ret) {
   11134:	b948      	cbnz	r0, 1114a <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   11136:	4629      	mov	r1, r5
   11138:	4620      	mov	r0, r4
   1113a:	4a04      	ldr	r2, [pc, #16]	; (1114c <bt_rand+0x2c>)
   1113c:	f00d f84f 	bl	1e1de <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   11140:	2801      	cmp	r0, #1
   11142:	bf14      	ite	ne
   11144:	f06f 0004 	mvnne.w	r0, #4
   11148:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   1114a:	bd38      	pop	{r3, r4, r5, pc}
   1114c:	20008908 	.word	0x20008908

00011150 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   11150:	2300      	movs	r3, #0
{
   11152:	4601      	mov	r1, r0
	tx->user_data = NULL;
   11154:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   11158:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1115a:	4801      	ldr	r0, [pc, #4]	; (11160 <tx_free+0x10>)
   1115c:	f010 b9e8 	b.w	21530 <k_queue_append>
   11160:	2000857c 	.word	0x2000857c

00011164 <notify_connected>:
{
   11164:	b538      	push	{r3, r4, r5, lr}
   11166:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   11168:	4b08      	ldr	r3, [pc, #32]	; (1118c <notify_connected+0x28>)
   1116a:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   1116c:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
   1116e:	b92d      	cbnz	r5, 1117c <notify_connected+0x18>
	if (!conn->err) {
   11170:	b951      	cbnz	r1, 11188 <notify_connected+0x24>
		bt_gatt_connected(conn);
   11172:	4620      	mov	r0, r4
}
   11174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   11178:	f004 b85a 	b.w	15230 <bt_gatt_connected>
		if (cb->connected) {
   1117c:	682b      	ldr	r3, [r5, #0]
   1117e:	b10b      	cbz	r3, 11184 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   11180:	4620      	mov	r0, r4
   11182:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11184:	69ad      	ldr	r5, [r5, #24]
   11186:	e7f1      	b.n	1116c <notify_connected+0x8>
}
   11188:	bd38      	pop	{r3, r4, r5, pc}
   1118a:	bf00      	nop
   1118c:	20009c24 	.word	0x20009c24

00011190 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   11190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11194:	4604      	mov	r4, r0
   11196:	460e      	mov	r6, r1
   11198:	4691      	mov	r9, r2
   1119a:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1119c:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   1119e:	f04f 33ff 	mov.w	r3, #4294967295
   111a2:	f04f 32ff 	mov.w	r2, #4294967295
   111a6:	4847      	ldr	r0, [pc, #284]	; (112c4 <send_frag+0x134>)
   111a8:	f00a fb2e 	bl	1b808 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   111ac:	7b63      	ldrb	r3, [r4, #13]
   111ae:	2b07      	cmp	r3, #7
   111b0:	d14b      	bne.n	1124a <send_frag+0xba>
	__asm__ volatile(
   111b2:	f04f 0320 	mov.w	r3, #32
   111b6:	f3ef 8211 	mrs	r2, BASEPRI
   111ba:	f383 8811 	msr	BASEPRI, r3
   111be:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   111c2:	69a3      	ldr	r3, [r4, #24]
   111c4:	2d00      	cmp	r5, #0
   111c6:	d052      	beq.n	1126e <send_frag+0xde>
	parent->next = child;
   111c8:	2100      	movs	r1, #0
   111ca:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   111cc:	2b00      	cmp	r3, #0
   111ce:	d14b      	bne.n	11268 <send_frag+0xd8>
	list->head = node;
   111d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   111d4:	f382 8811 	msr	BASEPRI, r2
   111d8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   111dc:	2104      	movs	r1, #4
   111de:	f106 0008 	add.w	r0, r6, #8
   111e2:	f006 fbbd 	bl	17960 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   111e6:	8823      	ldrh	r3, [r4, #0]
   111e8:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   111ec:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   111f0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   111f2:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   111f6:	3b04      	subs	r3, #4
   111f8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   111fa:	2302      	movs	r3, #2
	return bt_send(buf);
   111fc:	4630      	mov	r0, r6
   111fe:	7533      	strb	r3, [r6, #20]
   11200:	f7fe fe30 	bl	fe64 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   11204:	4602      	mov	r2, r0
   11206:	2800      	cmp	r0, #0
   11208:	d059      	beq.n	112be <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   1120a:	2145      	movs	r1, #69	; 0x45
   1120c:	482e      	ldr	r0, [pc, #184]	; (112c8 <send_frag+0x138>)
   1120e:	f00b fc7f 	bl	1cb10 <printk>
	__asm__ volatile(
   11212:	f04f 0320 	mov.w	r3, #32
   11216:	f3ef 8911 	mrs	r9, BASEPRI
   1121a:	f383 8811 	msr	BASEPRI, r3
   1121e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   11222:	2d00      	cmp	r5, #0
   11224:	d037      	beq.n	11296 <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11226:	2200      	movs	r2, #0
	return list->head;
   11228:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1122a:	b153      	cbz	r3, 11242 <send_frag+0xb2>
   1122c:	429d      	cmp	r5, r3
   1122e:	d12f      	bne.n	11290 <send_frag+0x100>
	return node->next;
   11230:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   11232:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   11234:	bb3a      	cbnz	r2, 11286 <send_frag+0xf6>
   11236:	42a9      	cmp	r1, r5
	list->head = node;
   11238:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1123a:	d100      	bne.n	1123e <send_frag+0xae>
	list->tail = node;
   1123c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1123e:	2300      	movs	r3, #0
   11240:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   11242:	f389 8811 	msr	BASEPRI, r9
   11246:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1124a:	481e      	ldr	r0, [pc, #120]	; (112c4 <send_frag+0x134>)
   1124c:	f00a faa0 	bl	1b790 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   11250:	b115      	cbz	r5, 11258 <send_frag+0xc8>
		tx_free(tx);
   11252:	4628      	mov	r0, r5
   11254:	f7ff ff7c 	bl	11150 <tx_free>
	}

	if (always_consume) {
   11258:	b11f      	cbz	r7, 11262 <send_frag+0xd2>
		net_buf_unref(buf);
   1125a:	4630      	mov	r0, r6
   1125c:	f006 fac2 	bl	177e4 <net_buf_unref>
	}
	return false;
   11260:	2700      	movs	r7, #0
}
   11262:	4638      	mov	r0, r7
   11264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11268:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1126a:	61a5      	str	r5, [r4, #24]
}
   1126c:	e7b2      	b.n	111d4 <send_frag+0x44>
		if (tail_tx) {
   1126e:	b133      	cbz	r3, 1127e <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   11270:	f103 080c 	add.w	r8, r3, #12
   11274:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   11276:	3301      	adds	r3, #1
   11278:	f8c8 3000 	str.w	r3, [r8]
   1127c:	e7aa      	b.n	111d4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1127e:	69e3      	ldr	r3, [r4, #28]
   11280:	f104 081c 	add.w	r8, r4, #28
   11284:	e7f7      	b.n	11276 <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   11286:	42a9      	cmp	r1, r5
	parent->next = child;
   11288:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1128a:	bf08      	it	eq
   1128c:	61a2      	streq	r2, [r4, #24]
}
   1128e:	e7d6      	b.n	1123e <send_frag+0xae>
	return node->next;
   11290:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11292:	681b      	ldr	r3, [r3, #0]
   11294:	e7c9      	b.n	1122a <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   11296:	f8d8 3000 	ldr.w	r3, [r8]
   1129a:	b953      	cbnz	r3, 112b2 <send_frag+0x122>
   1129c:	490b      	ldr	r1, [pc, #44]	; (112cc <send_frag+0x13c>)
   1129e:	480c      	ldr	r0, [pc, #48]	; (112d0 <send_frag+0x140>)
   112a0:	f240 4292 	movw	r2, #1170	; 0x492
   112a4:	f00b fc34 	bl	1cb10 <printk>
   112a8:	f240 4192 	movw	r1, #1170	; 0x492
   112ac:	4807      	ldr	r0, [pc, #28]	; (112cc <send_frag+0x13c>)
   112ae:	f00b fed5 	bl	1d05c <assert_post_action>
			(*pending_no_cb)--;
   112b2:	f8d8 3000 	ldr.w	r3, [r8]
   112b6:	3b01      	subs	r3, #1
   112b8:	f8c8 3000 	str.w	r3, [r8]
   112bc:	e7c1      	b.n	11242 <send_frag+0xb2>
	return true;
   112be:	2701      	movs	r7, #1
   112c0:	e7cf      	b.n	11262 <send_frag+0xd2>
   112c2:	bf00      	nop
   112c4:	200080c8 	.word	0x200080c8
   112c8:	00024711 	.word	0x00024711
   112cc:	00024c71 	.word	0x00024c71
   112d0:	00022f17 	.word	0x00022f17

000112d4 <bt_conn_get_pkts>:
}
   112d4:	4800      	ldr	r0, [pc, #0]	; (112d8 <bt_conn_get_pkts+0x4>)
   112d6:	4770      	bx	lr
   112d8:	200080c8 	.word	0x200080c8

000112dc <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   112dc:	1d03      	adds	r3, r0, #4
{
   112de:	b570      	push	{r4, r5, r6, lr}
   112e0:	4604      	mov	r4, r0
   112e2:	4618      	mov	r0, r3
   112e4:	f00d fbca 	bl	1ea7c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   112e8:	0582      	lsls	r2, r0, #22
   112ea:	d512      	bpl.n	11312 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   112ec:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   112f0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   112f4:	4291      	cmp	r1, r2
   112f6:	d80c      	bhi.n	11312 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   112f8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   112fc:	4291      	cmp	r1, r2
   112fe:	d308      	bcc.n	11312 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   11300:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   11304:	4291      	cmp	r1, r2
   11306:	d104      	bne.n	11312 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11308:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1130c:	4618      	mov	r0, r3
   1130e:	f00d fbb8 	bl	1ea82 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
   11312:	4b08      	ldr	r3, [pc, #32]	; (11334 <notify_le_param_updated+0x58>)
   11314:	681d      	ldr	r5, [r3, #0]
   11316:	b905      	cbnz	r5, 1131a <notify_le_param_updated+0x3e>
}
   11318:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1131a:	68ee      	ldr	r6, [r5, #12]
   1131c:	b13e      	cbz	r6, 1132e <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
   1131e:	4620      	mov	r0, r4
   11320:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11324:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11328:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1132c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1132e:	69ad      	ldr	r5, [r5, #24]
   11330:	e7f1      	b.n	11316 <notify_le_param_updated+0x3a>
   11332:	bf00      	nop
   11334:	20009c24 	.word	0x20009c24

00011338 <le_param_req>:
{
   11338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1133a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   1133c:	4608      	mov	r0, r1
{
   1133e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11340:	f00d faba 	bl	1e8b8 <bt_le_conn_params_valid>
   11344:	4604      	mov	r4, r0
   11346:	b910      	cbnz	r0, 1134e <le_param_req+0x16>
		return false;
   11348:	2400      	movs	r4, #0
}
   1134a:	4620      	mov	r0, r4
   1134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1134e:	4b09      	ldr	r3, [pc, #36]	; (11374 <le_param_req+0x3c>)
   11350:	681e      	ldr	r6, [r3, #0]
   11352:	2e00      	cmp	r6, #0
   11354:	d0f9      	beq.n	1134a <le_param_req+0x12>
		if (!cb->le_param_req) {
   11356:	68b3      	ldr	r3, [r6, #8]
   11358:	b90b      	cbnz	r3, 1135e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1135a:	69b6      	ldr	r6, [r6, #24]
   1135c:	e7f9      	b.n	11352 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1135e:	4629      	mov	r1, r5
   11360:	4638      	mov	r0, r7
   11362:	4798      	blx	r3
   11364:	2800      	cmp	r0, #0
   11366:	d0ef      	beq.n	11348 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   11368:	4628      	mov	r0, r5
   1136a:	f00d faa5 	bl	1e8b8 <bt_le_conn_params_valid>
   1136e:	2800      	cmp	r0, #0
   11370:	d1f3      	bne.n	1135a <le_param_req+0x22>
   11372:	e7e9      	b.n	11348 <le_param_req+0x10>
   11374:	20009c24 	.word	0x20009c24

00011378 <bt_conn_identity_resolved>:
{
   11378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1137a:	78c3      	ldrb	r3, [r0, #3]
{
   1137c:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1137e:	b93b      	cbnz	r3, 11390 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   11380:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   11384:	4b08      	ldr	r3, [pc, #32]	; (113a8 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   11386:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1138a:	681d      	ldr	r5, [r3, #0]
   1138c:	b91d      	cbnz	r5, 11396 <bt_conn_identity_resolved+0x1e>
}
   1138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   11390:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   11394:	e7f6      	b.n	11384 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   11396:	692b      	ldr	r3, [r5, #16]
   11398:	b11b      	cbz	r3, 113a2 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1139a:	463a      	mov	r2, r7
   1139c:	4631      	mov	r1, r6
   1139e:	4620      	mov	r0, r4
   113a0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   113a2:	69ad      	ldr	r5, [r5, #24]
   113a4:	e7f2      	b.n	1138c <bt_conn_identity_resolved+0x14>
   113a6:	bf00      	nop
   113a8:	20009c24 	.word	0x20009c24

000113ac <bt_conn_security_changed>:
{
   113ac:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   113ae:	7a43      	ldrb	r3, [r0, #9]
{
   113b0:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   113b2:	7283      	strb	r3, [r0, #10]
{
   113b4:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   113b6:	f00d fd01 	bl	1edbc <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   113ba:	4b06      	ldr	r3, [pc, #24]	; (113d4 <bt_conn_security_changed+0x28>)
   113bc:	681d      	ldr	r5, [r3, #0]
   113be:	b905      	cbnz	r5, 113c2 <bt_conn_security_changed+0x16>
}
   113c0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   113c2:	696b      	ldr	r3, [r5, #20]
   113c4:	b11b      	cbz	r3, 113ce <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   113c6:	4632      	mov	r2, r6
   113c8:	4620      	mov	r0, r4
   113ca:	7a61      	ldrb	r1, [r4, #9]
   113cc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   113ce:	69ad      	ldr	r5, [r5, #24]
   113d0:	e7f5      	b.n	113be <bt_conn_security_changed+0x12>
   113d2:	bf00      	nop
   113d4:	20009c24 	.word	0x20009c24

000113d8 <bt_conn_cb_register>:
	cb->_next = callback_list;
   113d8:	4b02      	ldr	r3, [pc, #8]	; (113e4 <bt_conn_cb_register+0xc>)
   113da:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   113dc:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   113de:	6182      	str	r2, [r0, #24]
}
   113e0:	4770      	bx	lr
   113e2:	bf00      	nop
   113e4:	20009c24 	.word	0x20009c24

000113e8 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   113e8:	b570      	push	{r4, r5, r6, lr}
   113ea:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   113ec:	f100 0634 	add.w	r6, r0, #52	; 0x34
   113f0:	2200      	movs	r2, #0
   113f2:	2300      	movs	r3, #0
   113f4:	4630      	mov	r0, r6
   113f6:	f006 f973 	bl	176e0 <net_buf_get>
   113fa:	4605      	mov	r5, r0
   113fc:	bb28      	cbnz	r0, 1144a <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   113fe:	6963      	ldr	r3, [r4, #20]
   11400:	b153      	cbz	r3, 11418 <conn_cleanup+0x30>
   11402:	4916      	ldr	r1, [pc, #88]	; (1145c <conn_cleanup+0x74>)
   11404:	4816      	ldr	r0, [pc, #88]	; (11460 <conn_cleanup+0x78>)
   11406:	f240 520c 	movw	r2, #1292	; 0x50c
   1140a:	f00b fb81 	bl	1cb10 <printk>
   1140e:	f240 510c 	movw	r1, #1292	; 0x50c
   11412:	4812      	ldr	r0, [pc, #72]	; (1145c <conn_cleanup+0x74>)
   11414:	f00b fe22 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   11418:	69e3      	ldr	r3, [r4, #28]
   1141a:	b153      	cbz	r3, 11432 <conn_cleanup+0x4a>
   1141c:	490f      	ldr	r1, [pc, #60]	; (1145c <conn_cleanup+0x74>)
   1141e:	4810      	ldr	r0, [pc, #64]	; (11460 <conn_cleanup+0x78>)
   11420:	f240 520d 	movw	r2, #1293	; 0x50d
   11424:	f00b fb74 	bl	1cb10 <printk>
   11428:	f240 510d 	movw	r1, #1293	; 0x50d
   1142c:	480b      	ldr	r0, [pc, #44]	; (1145c <conn_cleanup+0x74>)
   1142e:	f00b fe15 	bl	1d05c <assert_post_action>

	bt_conn_reset_rx_state(conn);
   11432:	4620      	mov	r0, r4
   11434:	f00d fbe8 	bl	1ec08 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11438:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1143c:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   1143e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11442:	2300      	movs	r3, #0
   11444:	4807      	ldr	r0, [pc, #28]	; (11464 <conn_cleanup+0x7c>)
   11446:	f00a bc05 	b.w	1bc54 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1144a:	6968      	ldr	r0, [r5, #20]
   1144c:	b108      	cbz	r0, 11452 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   1144e:	f7ff fe7f 	bl	11150 <tx_free>
		net_buf_unref(buf);
   11452:	4628      	mov	r0, r5
   11454:	f006 f9c6 	bl	177e4 <net_buf_unref>
   11458:	e7ca      	b.n	113f0 <conn_cleanup+0x8>
   1145a:	bf00      	nop
   1145c:	00024c71 	.word	0x00024c71
   11460:	00022f17 	.word	0x00022f17
   11464:	20009638 	.word	0x20009638

00011468 <bt_conn_recv>:
{
   11468:	b570      	push	{r4, r5, r6, lr}
   1146a:	4616      	mov	r6, r2
   1146c:	4604      	mov	r4, r0
   1146e:	460d      	mov	r5, r1
	tx_notify(conn);
   11470:	f00d fb1d 	bl	1eaae <tx_notify>
	switch (flags) {
   11474:	2e01      	cmp	r6, #1
   11476:	d01f      	beq.n	114b8 <bt_conn_recv+0x50>
   11478:	2e02      	cmp	r6, #2
   1147a:	d140      	bne.n	114fe <bt_conn_recv+0x96>
		if (conn->rx) {
   1147c:	6923      	ldr	r3, [r4, #16]
   1147e:	b133      	cbz	r3, 1148e <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   11480:	4826      	ldr	r0, [pc, #152]	; (1151c <bt_conn_recv+0xb4>)
   11482:	2145      	movs	r1, #69	; 0x45
   11484:	f00b fb44 	bl	1cb10 <printk>
			bt_conn_reset_rx_state(conn);
   11488:	4620      	mov	r0, r4
   1148a:	f00d fbbd 	bl	1ec08 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1148e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   11490:	6921      	ldr	r1, [r4, #16]
   11492:	898a      	ldrh	r2, [r1, #12]
   11494:	2a01      	cmp	r2, #1
   11496:	d93f      	bls.n	11518 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   11498:	688b      	ldr	r3, [r1, #8]
   1149a:	881b      	ldrh	r3, [r3, #0]
   1149c:	3304      	adds	r3, #4
   1149e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   114a0:	429a      	cmp	r2, r3
   114a2:	d339      	bcc.n	11518 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   114a4:	d931      	bls.n	1150a <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   114a6:	481e      	ldr	r0, [pc, #120]	; (11520 <bt_conn_recv+0xb8>)
   114a8:	2145      	movs	r1, #69	; 0x45
   114aa:	f00b fb31 	bl	1cb10 <printk>
		bt_conn_reset_rx_state(conn);
   114ae:	4620      	mov	r0, r4
}
   114b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   114b4:	f00d bba8 	b.w	1ec08 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   114b8:	6920      	ldr	r0, [r4, #16]
   114ba:	b938      	cbnz	r0, 114cc <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   114bc:	2145      	movs	r1, #69	; 0x45
   114be:	4819      	ldr	r0, [pc, #100]	; (11524 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   114c0:	f00b fb26 	bl	1cb10 <printk>
			bt_conn_reset_rx_state(conn);
   114c4:	4620      	mov	r0, r4
   114c6:	f00d fb9f 	bl	1ec08 <bt_conn_reset_rx_state>
   114ca:	e001      	b.n	114d0 <bt_conn_recv+0x68>
		if (!buf->len) {
   114cc:	89ae      	ldrh	r6, [r5, #12]
   114ce:	b926      	cbnz	r6, 114da <bt_conn_recv+0x72>
			net_buf_unref(buf);
   114d0:	4628      	mov	r0, r5
}
   114d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   114d6:	f006 b985 	b.w	177e4 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   114da:	3008      	adds	r0, #8
   114dc:	f00f f958 	bl	20790 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   114e0:	4286      	cmp	r6, r0
   114e2:	d902      	bls.n	114ea <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   114e4:	2145      	movs	r1, #69	; 0x45
   114e6:	4810      	ldr	r0, [pc, #64]	; (11528 <bt_conn_recv+0xc0>)
   114e8:	e7ea      	b.n	114c0 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   114ea:	6920      	ldr	r0, [r4, #16]
   114ec:	89aa      	ldrh	r2, [r5, #12]
   114ee:	68a9      	ldr	r1, [r5, #8]
   114f0:	3008      	adds	r0, #8
   114f2:	f00f f955 	bl	207a0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   114f6:	4628      	mov	r0, r5
   114f8:	f006 f974 	bl	177e4 <net_buf_unref>
		break;
   114fc:	e7c8      	b.n	11490 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   114fe:	4632      	mov	r2, r6
   11500:	2145      	movs	r1, #69	; 0x45
   11502:	480a      	ldr	r0, [pc, #40]	; (1152c <bt_conn_recv+0xc4>)
   11504:	f00b fb04 	bl	1cb10 <printk>
		bt_conn_reset_rx_state(conn);
   11508:	e7dc      	b.n	114c4 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1150a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   1150c:	4620      	mov	r0, r4
	conn->rx = NULL;
   1150e:	6123      	str	r3, [r4, #16]
}
   11510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   11514:	f000 bed8 	b.w	122c8 <bt_l2cap_recv>
}
   11518:	bd70      	pop	{r4, r5, r6, pc}
   1151a:	bf00      	nop
   1151c:	00024ca1 	.word	0x00024ca1
   11520:	00024d35 	.word	0x00024d35
   11524:	00024cc3 	.word	0x00024cc3
   11528:	00024ce6 	.word	0x00024ce6
   1152c:	00024d12 	.word	0x00024d12

00011530 <bt_conn_send_cb>:
{
   11530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11534:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   11536:	7b43      	ldrb	r3, [r0, #13]
{
   11538:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1153a:	2b07      	cmp	r3, #7
{
   1153c:	460d      	mov	r5, r1
   1153e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   11540:	d009      	beq.n	11556 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   11542:	4821      	ldr	r0, [pc, #132]	; (115c8 <bt_conn_send_cb+0x98>)
   11544:	2145      	movs	r1, #69	; 0x45
   11546:	f00b fae3 	bl	1cb10 <printk>
		net_buf_unref(buf);
   1154a:	4628      	mov	r0, r5
   1154c:	f006 f94a 	bl	177e4 <net_buf_unref>
			return -ENOTCONN;
   11550:	f06f 0038 	mvn.w	r0, #56	; 0x38
   11554:	e01a      	b.n	1158c <bt_conn_send_cb+0x5c>
	if (cb) {
   11556:	2a00      	cmp	r2, #0
   11558:	d034      	beq.n	115c4 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   1155a:	f00a f913 	bl	1b784 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1155e:	4b1b      	ldr	r3, [pc, #108]	; (115cc <bt_conn_send_cb+0x9c>)
   11560:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11562:	481b      	ldr	r0, [pc, #108]	; (115d0 <bt_conn_send_cb+0xa0>)
   11564:	bf07      	ittee	eq
   11566:	2200      	moveq	r2, #0
   11568:	2300      	moveq	r3, #0
   1156a:	f04f 32ff 	movne.w	r2, #4294967295
   1156e:	f04f 33ff 	movne.w	r3, #4294967295
   11572:	f009 f8a1 	bl	1a6b8 <z_impl_k_queue_get>
   11576:	4604      	mov	r4, r0
		if (!tx) {
   11578:	b950      	cbnz	r0, 11590 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   1157a:	2145      	movs	r1, #69	; 0x45
   1157c:	4815      	ldr	r0, [pc, #84]	; (115d4 <bt_conn_send_cb+0xa4>)
   1157e:	f00b fac7 	bl	1cb10 <printk>
			net_buf_unref(buf);
   11582:	4628      	mov	r0, r5
   11584:	f006 f92e 	bl	177e4 <net_buf_unref>
			return -ENOBUFS;
   11588:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11590:	7b73      	ldrb	r3, [r6, #13]
   11592:	2b07      	cmp	r3, #7
   11594:	d00a      	beq.n	115ac <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   11596:	2157      	movs	r1, #87	; 0x57
   11598:	480f      	ldr	r0, [pc, #60]	; (115d8 <bt_conn_send_cb+0xa8>)
   1159a:	f00b fab9 	bl	1cb10 <printk>
			net_buf_unref(buf);
   1159e:	4628      	mov	r0, r5
   115a0:	f006 f920 	bl	177e4 <net_buf_unref>
			tx_free(tx);
   115a4:	4620      	mov	r0, r4
   115a6:	f7ff fdd3 	bl	11150 <tx_free>
   115aa:	e7d1      	b.n	11550 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   115ac:	2300      	movs	r3, #0
		tx->user_data = user_data;
   115ae:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   115b2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   115b4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   115b6:	f106 0034 	add.w	r0, r6, #52	; 0x34
   115ba:	4629      	mov	r1, r5
   115bc:	f006 f8e4 	bl	17788 <net_buf_put>
	return 0;
   115c0:	2000      	movs	r0, #0
   115c2:	e7e3      	b.n	1158c <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   115c4:	614a      	str	r2, [r1, #20]
   115c6:	e7f6      	b.n	115b6 <bt_conn_send_cb+0x86>
   115c8:	00024d55 	.word	0x00024d55
   115cc:	20009658 	.word	0x20009658
   115d0:	2000857c 	.word	0x2000857c
   115d4:	00024d69 	.word	0x00024d69
   115d8:	00024d8c 	.word	0x00024d8c

000115dc <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   115dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   115e0:	2500      	movs	r5, #0
   115e2:	4b1a      	ldr	r3, [pc, #104]	; (1164c <bt_conn_prepare_events+0x70>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   115e4:	462a      	mov	r2, r5
   115e6:	2101      	movs	r1, #1
{
   115e8:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   115ea:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   115ec:	2601      	movs	r6, #1
   115ee:	f00b f855 	bl	1c69c <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   115f2:	f04f 0914 	mov.w	r9, #20
   115f6:	4c16      	ldr	r4, [pc, #88]	; (11650 <bt_conn_prepare_events+0x74>)
	if (!atomic_get(&conn->ref)) {
   115f8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   115fc:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   11600:	f00d fa3c 	bl	1ea7c <atomic_get>
   11604:	b158      	cbz	r0, 1161e <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11606:	7b63      	ldrb	r3, [r4, #13]
   11608:	b98b      	cbnz	r3, 1162e <bt_conn_prepare_events+0x52>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1160a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1160e:	1d20      	adds	r0, r4, #4
   11610:	f00d fa37 	bl	1ea82 <atomic_and>
   11614:	0643      	lsls	r3, r0, #25
   11616:	d50a      	bpl.n	1162e <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   11618:	4620      	mov	r0, r4
   1161a:	f7ff fee5 	bl	113e8 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1161e:	3501      	adds	r5, #1
   11620:	2d03      	cmp	r5, #3
   11622:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   11626:	d1e7      	bne.n	115f8 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   11628:	4630      	mov	r0, r6
   1162a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   1162e:	7b63      	ldrb	r3, [r4, #13]
   11630:	2b07      	cmp	r3, #7
   11632:	d1f4      	bne.n	1161e <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   11634:	f104 0334 	add.w	r3, r4, #52	; 0x34
   11638:	2200      	movs	r2, #0
   1163a:	2104      	movs	r1, #4
   1163c:	4640      	mov	r0, r8
   1163e:	f00b f82d 	bl	1c69c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   11642:	2301      	movs	r3, #1
   11644:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   11648:	441e      	add	r6, r3
   1164a:	e7e8      	b.n	1161e <bt_conn_prepare_events+0x42>
   1164c:	20008328 	.word	0x20008328
   11650:	20008a40 	.word	0x20008a40

00011654 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11654:	b570      	push	{r4, r5, r6, lr}
   11656:	4606      	mov	r6, r0
   11658:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1165a:	4811      	ldr	r0, [pc, #68]	; (116a0 <bt_conn_add_le+0x4c>)
   1165c:	2103      	movs	r1, #3
   1165e:	f00d fa4c 	bl	1eafa <bt_conn_new>
	if (!conn) {
   11662:	4604      	mov	r4, r0
   11664:	b1c8      	cbz	r0, 1169a <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11666:	2230      	movs	r2, #48	; 0x30
   11668:	2100      	movs	r1, #0
   1166a:	3058      	adds	r0, #88	; 0x58
   1166c:	f00c ff33 	bl	1e4d6 <memset>
   11670:	4b0c      	ldr	r3, [pc, #48]	; (116a4 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11672:	4a0d      	ldr	r2, [pc, #52]	; (116a8 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11674:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11676:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   11678:	4629      	mov	r1, r5
   1167a:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   1167e:	62a3      	str	r3, [r4, #40]	; 0x28
   11680:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   11682:	7226      	strb	r6, [r4, #8]
   11684:	f104 0088 	add.w	r0, r4, #136	; 0x88
   11688:	f00c fefa 	bl	1e480 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1168c:	2301      	movs	r3, #1
   1168e:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   11690:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11692:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11694:	4b05      	ldr	r3, [pc, #20]	; (116ac <bt_conn_add_le+0x58>)
   11696:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1169a:	4620      	mov	r0, r4
   1169c:	bd70      	pop	{r4, r5, r6, pc}
   1169e:	bf00      	nop
   116a0:	20008a40 	.word	0x20008a40
   116a4:	00011d25 	.word	0x00011d25
   116a8:	0001eaf5 	.word	0x0001eaf5
   116ac:	00280018 	.word	0x00280018

000116b0 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   116b0:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   116b2:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   116b6:	e8d4 3fef 	ldaex	r3, [r4]
   116ba:	1e5a      	subs	r2, r3, #1
   116bc:	e8c4 2fe1 	stlex	r1, r2, [r4]
   116c0:	2900      	cmp	r1, #0
   116c2:	d1f8      	bne.n	116b6 <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   116c4:	2b00      	cmp	r3, #0
   116c6:	dc0a      	bgt.n	116de <bt_conn_unref+0x2e>
   116c8:	4909      	ldr	r1, [pc, #36]	; (116f0 <bt_conn_unref+0x40>)
   116ca:	480a      	ldr	r0, [pc, #40]	; (116f4 <bt_conn_unref+0x44>)
   116cc:	f240 7265 	movw	r2, #1893	; 0x765
   116d0:	f00b fa1e 	bl	1cb10 <printk>
   116d4:	f240 7165 	movw	r1, #1893	; 0x765
   116d8:	4805      	ldr	r0, [pc, #20]	; (116f0 <bt_conn_unref+0x40>)
   116da:	f00b fcbf 	bl	1d05c <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   116de:	4620      	mov	r0, r4
   116e0:	f00d f9cc 	bl	1ea7c <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   116e4:	b918      	cbnz	r0, 116ee <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   116e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   116ea:	f7ff ba21 	b.w	10b30 <bt_le_adv_resume>
}
   116ee:	bd10      	pop	{r4, pc}
   116f0:	00024c71 	.word	0x00024c71
   116f4:	00022f17 	.word	0x00022f17

000116f8 <bt_conn_lookup_handle>:
{
   116f8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   116fa:	2103      	movs	r1, #3
   116fc:	4801      	ldr	r0, [pc, #4]	; (11704 <bt_conn_lookup_handle+0xc>)
   116fe:	f00d bac3 	b.w	1ec88 <conn_lookup_handle>
   11702:	bf00      	nop
   11704:	20008a40 	.word	0x20008a40

00011708 <bt_conn_set_state>:
{
   11708:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1170a:	7b45      	ldrb	r5, [r0, #13]
{
   1170c:	4604      	mov	r4, r0
	if (conn->state == state) {
   1170e:	428d      	cmp	r5, r1
{
   11710:	460e      	mov	r6, r1
	if (conn->state == state) {
   11712:	d10b      	bne.n	1172c <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   11714:	2157      	movs	r1, #87	; 0x57
   11716:	2d08      	cmp	r5, #8
   11718:	bf96      	itet	ls
   1171a:	4b6b      	ldrls	r3, [pc, #428]	; (118c8 <bt_conn_set_state+0x1c0>)
	if (conn->state == state) {
   1171c:	4a6b      	ldrhi	r2, [pc, #428]	; (118cc <bt_conn_set_state+0x1c4>)
   1171e:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   11722:	486b      	ldr	r0, [pc, #428]	; (118d0 <bt_conn_set_state+0x1c8>)
}
   11724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   11728:	f00b b9f2 	b.w	1cb10 <printk>
	conn->state = state;
   1172c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1172e:	b165      	cbz	r5, 1174a <bt_conn_set_state+0x42>
   11730:	2d06      	cmp	r5, #6
   11732:	d00d      	beq.n	11750 <bt_conn_set_state+0x48>
	switch (conn->state) {
   11734:	7b63      	ldrb	r3, [r4, #13]
   11736:	2b08      	cmp	r3, #8
   11738:	f200 80c0 	bhi.w	118bc <bt_conn_set_state+0x1b4>
   1173c:	e8df f003 	tbb	[pc, r3]
   11740:	c2c20f4a 	.word	0xc2c20f4a
   11744:	2789c2c2 	.word	0x2789c2c2
   11748:	c2          	.byte	0xc2
   11749:	00          	.byte	0x00
		bt_conn_ref(conn);
   1174a:	f00d fa86 	bl	1ec5a <bt_conn_ref>
		break;
   1174e:	e7f1      	b.n	11734 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11750:	7883      	ldrb	r3, [r0, #2]
   11752:	2b01      	cmp	r3, #1
   11754:	d1ee      	bne.n	11734 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   11756:	3058      	adds	r0, #88	; 0x58
   11758:	f00a faec 	bl	1bd34 <k_delayed_work_cancel>
   1175c:	e7ea      	b.n	11734 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   1175e:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11760:	4d5c      	ldr	r5, [pc, #368]	; (118d4 <bt_conn_set_state+0x1cc>)
	__asm__ volatile(
   11762:	f04f 0320 	mov.w	r3, #32
   11766:	f3ef 8211 	mrs	r2, BASEPRI
   1176a:	f383 8811 	msr	BASEPRI, r3
   1176e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11772:	69e3      	ldr	r3, [r4, #28]
   11774:	2b00      	cmp	r3, #0
   11776:	f000 8082 	beq.w	1187e <bt_conn_set_state+0x176>
			conn->pending_no_cb--;
   1177a:	3b01      	subs	r3, #1
   1177c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1177e:	f382 8811 	msr	BASEPRI, r2
   11782:	f3bf 8f6f 	isb	sy
   11786:	4628      	mov	r0, r5
   11788:	f00a f802 	bl	1b790 <z_impl_k_sem_give>
}
   1178c:	e7e9      	b.n	11762 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1178e:	78a3      	ldrb	r3, [r4, #2]
   11790:	2b04      	cmp	r3, #4
   11792:	f000 8097 	beq.w	118c4 <bt_conn_set_state+0x1bc>
	z_impl_k_queue_init(queue);
   11796:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1179a:	f00f febc 	bl	21516 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   1179e:	2100      	movs	r1, #0
   117a0:	484d      	ldr	r0, [pc, #308]	; (118d8 <bt_conn_set_state+0x1d0>)
   117a2:	f00b f887 	bl	1c8b4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   117a6:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   117a8:	4620      	mov	r0, r4
	list->tail = NULL;
   117aa:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   117ae:	f000 fc99 	bl	120e4 <bt_l2cap_connected>
		notify_connected(conn);
   117b2:	4620      	mov	r0, r4
   117b4:	f7ff fcd6 	bl	11164 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   117b8:	78e3      	ldrb	r3, [r4, #3]
   117ba:	2b01      	cmp	r3, #1
   117bc:	f040 8082 	bne.w	118c4 <bt_conn_set_state+0x1bc>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   117c0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   117c4:	2300      	movs	r3, #0
   117c6:	f104 0158 	add.w	r1, r4, #88	; 0x58
   117ca:	4844      	ldr	r0, [pc, #272]	; (118dc <bt_conn_set_state+0x1d4>)
}
   117cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117d0:	f00a ba40 	b.w	1bc54 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   117d4:	78a3      	ldrb	r3, [r4, #2]
   117d6:	2b04      	cmp	r3, #4
   117d8:	d104      	bne.n	117e4 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   117da:	4620      	mov	r0, r4
}
   117dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   117e0:	f7ff bf66 	b.w	116b0 <bt_conn_unref>
		switch (old_state) {
   117e4:	2d08      	cmp	r5, #8
   117e6:	d86d      	bhi.n	118c4 <bt_conn_set_state+0x1bc>
   117e8:	a301      	add	r3, pc, #4	; (adr r3, 117f0 <bt_conn_set_state+0xe8>)
   117ea:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   117ee:	bf00      	nop
   117f0:	0001184b 	.word	0x0001184b
   117f4:	00011815 	.word	0x00011815
   117f8:	0001183d 	.word	0x0001183d
   117fc:	000117db 	.word	0x000117db
   11800:	000117db 	.word	0x000117db
   11804:	0001183d 	.word	0x0001183d
   11808:	0001183d 	.word	0x0001183d
   1180c:	0001184b 	.word	0x0001184b
   11810:	0001184b 	.word	0x0001184b
			tx_notify(conn);
   11814:	4620      	mov	r0, r4
   11816:	f00d f94a 	bl	1eaae <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1181a:	78a3      	ldrb	r3, [r4, #2]
   1181c:	2b01      	cmp	r3, #1
   1181e:	d103      	bne.n	11828 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   11820:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11824:	f00a fa86 	bl	1bd34 <k_delayed_work_cancel>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11828:	2140      	movs	r1, #64	; 0x40
   1182a:	1d20      	adds	r0, r4, #4
   1182c:	f00d f934 	bl	1ea98 <atomic_or>
}
   11830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11834:	2100      	movs	r1, #0
   11836:	4828      	ldr	r0, [pc, #160]	; (118d8 <bt_conn_set_state+0x1d0>)
   11838:	f00b b83c 	b.w	1c8b4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1183c:	7b23      	ldrb	r3, [r4, #12]
   1183e:	2b00      	cmp	r3, #0
   11840:	d0cb      	beq.n	117da <bt_conn_set_state+0xd2>
				notify_connected(conn);
   11842:	4620      	mov	r0, r4
   11844:	f7ff fc8e 	bl	11164 <notify_connected>
   11848:	e7c7      	b.n	117da <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   1184a:	4632      	mov	r2, r6
   1184c:	2157      	movs	r1, #87	; 0x57
   1184e:	4824      	ldr	r0, [pc, #144]	; (118e0 <bt_conn_set_state+0x1d8>)
   11850:	e768      	b.n	11724 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11852:	78a3      	ldrb	r3, [r4, #2]
   11854:	2b01      	cmp	r3, #1
   11856:	d135      	bne.n	118c4 <bt_conn_set_state+0x1bc>
				K_MSEC(10 * bt_dev.create_param.timeout));
   11858:	4b22      	ldr	r3, [pc, #136]	; (118e4 <bt_conn_set_state+0x1dc>)
   1185a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1185e:	8a9d      	ldrh	r5, [r3, #20]
   11860:	230a      	movs	r3, #10
   11862:	f240 30e7 	movw	r0, #999	; 0x3e7
   11866:	2100      	movs	r1, #0
   11868:	435d      	muls	r5, r3
   1186a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1186e:	2300      	movs	r3, #0
   11870:	fbc5 0106 	smlal	r0, r1, r5, r6
   11874:	f7f7 f95a 	bl	8b2c <__aeabi_uldivmod>
   11878:	4602      	mov	r2, r0
   1187a:	460b      	mov	r3, r1
   1187c:	e7a3      	b.n	117c6 <bt_conn_set_state+0xbe>
	return list->head;
   1187e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   11880:	b128      	cbz	r0, 1188e <bt_conn_set_state+0x186>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11882:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   11884:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11886:	4288      	cmp	r0, r1
	list->head = node;
   11888:	6163      	str	r3, [r4, #20]
	list->tail = node;
   1188a:	bf08      	it	eq
   1188c:	61a3      	streq	r3, [r4, #24]
   1188e:	f382 8811 	msr	BASEPRI, r2
   11892:	f3bf 8f6f 	isb	sy
		if (!node) {
   11896:	b1a8      	cbz	r0, 118c4 <bt_conn_set_state+0x1bc>
	__asm__ volatile(
   11898:	f04f 0220 	mov.w	r2, #32
   1189c:	f3ef 8311 	mrs	r3, BASEPRI
   118a0:	f382 8811 	msr	BASEPRI, r2
   118a4:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   118a8:	68c2      	ldr	r2, [r0, #12]
   118aa:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   118ac:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   118ae:	f383 8811 	msr	BASEPRI, r3
   118b2:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   118b6:	f7ff fc4b 	bl	11150 <tx_free>
   118ba:	e764      	b.n	11786 <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   118bc:	4632      	mov	r2, r6
   118be:	2157      	movs	r1, #87	; 0x57
   118c0:	4809      	ldr	r0, [pc, #36]	; (118e8 <bt_conn_set_state+0x1e0>)
   118c2:	e72f      	b.n	11724 <bt_conn_set_state+0x1c>
}
   118c4:	bd70      	pop	{r4, r5, r6, pc}
   118c6:	bf00      	nop
   118c8:	00022294 	.word	0x00022294
   118cc:	00024db7 	.word	0x00024db7
   118d0:	00024dc1 	.word	0x00024dc1
   118d4:	200080c8 	.word	0x200080c8
   118d8:	20008328 	.word	0x20008328
   118dc:	20009638 	.word	0x20009638
   118e0:	00024dd7 	.word	0x00024dd7
   118e4:	20008000 	.word	0x20008000
   118e8:	00024df3 	.word	0x00024df3

000118ec <bt_conn_lookup_addr_le>:
{
   118ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118f0:	4607      	mov	r7, r0
   118f2:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   118f4:	2500      	movs	r5, #0
   118f6:	4e0e      	ldr	r6, [pc, #56]	; (11930 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   118f8:	4630      	mov	r0, r6
   118fa:	f00d f9ae 	bl	1ec5a <bt_conn_ref>
		if (!conn) {
   118fe:	4604      	mov	r4, r0
   11900:	b120      	cbz	r0, 1190c <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   11902:	7883      	ldrb	r3, [r0, #2]
   11904:	2b01      	cmp	r3, #1
   11906:	d00a      	beq.n	1191e <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   11908:	f7ff fed2 	bl	116b0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1190c:	3501      	adds	r5, #1
   1190e:	2d03      	cmp	r5, #3
   11910:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   11914:	d1f0      	bne.n	118f8 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   11916:	2400      	movs	r4, #0
}
   11918:	4620      	mov	r0, r4
   1191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1191e:	4642      	mov	r2, r8
   11920:	4639      	mov	r1, r7
   11922:	f00d f97a 	bl	1ec1a <bt_conn_is_peer_addr_le>
   11926:	2800      	cmp	r0, #0
   11928:	d1f6      	bne.n	11918 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   1192a:	4620      	mov	r0, r4
   1192c:	e7ec      	b.n	11908 <bt_conn_lookup_addr_le+0x1c>
   1192e:	bf00      	nop
   11930:	20008a40 	.word	0x20008a40

00011934 <bt_conn_exists_le>:
{
   11934:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   11936:	f7ff ffd9 	bl	118ec <bt_conn_lookup_addr_le>
	if (conn) {
   1193a:	4604      	mov	r4, r0
   1193c:	b170      	cbz	r0, 1195c <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   1193e:	7b43      	ldrb	r3, [r0, #13]
   11940:	2157      	movs	r1, #87	; 0x57
   11942:	2b08      	cmp	r3, #8
   11944:	bf96      	itet	ls
   11946:	4a06      	ldrls	r2, [pc, #24]	; (11960 <bt_conn_exists_le+0x2c>)
   11948:	4a06      	ldrhi	r2, [pc, #24]	; (11964 <bt_conn_exists_le+0x30>)
   1194a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1194e:	4806      	ldr	r0, [pc, #24]	; (11968 <bt_conn_exists_le+0x34>)
   11950:	f00b f8de 	bl	1cb10 <printk>
		bt_conn_unref(conn);
   11954:	4620      	mov	r0, r4
   11956:	f7ff feab 	bl	116b0 <bt_conn_unref>
		return true;
   1195a:	2001      	movs	r0, #1
}
   1195c:	bd10      	pop	{r4, pc}
   1195e:	bf00      	nop
   11960:	00022294 	.word	0x00022294
   11964:	00024db7 	.word	0x00024db7
   11968:	00024e14 	.word	0x00024e14

0001196c <bt_conn_lookup_state_le>:
{
   1196c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11970:	4606      	mov	r6, r0
   11972:	460f      	mov	r7, r1
   11974:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11976:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11978:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   1197c:	f8df a048 	ldr.w	sl, [pc, #72]	; 119c8 <bt_conn_lookup_state_le+0x5c>
   11980:	fb09 a005 	mla	r0, r9, r5, sl
   11984:	f00d f969 	bl	1ec5a <bt_conn_ref>
		if (!conn) {
   11988:	4604      	mov	r4, r0
   1198a:	b120      	cbz	r0, 11996 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   1198c:	7883      	ldrb	r3, [r0, #2]
   1198e:	2b01      	cmp	r3, #1
   11990:	d006      	beq.n	119a0 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   11992:	f00d f962 	bl	1ec5a <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11996:	3501      	adds	r5, #1
   11998:	2d03      	cmp	r5, #3
   1199a:	d1f1      	bne.n	11980 <bt_conn_lookup_state_le+0x14>
	return NULL;
   1199c:	2400      	movs	r4, #0
   1199e:	e00f      	b.n	119c0 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   119a0:	b147      	cbz	r7, 119b4 <bt_conn_lookup_state_le+0x48>
   119a2:	463a      	mov	r2, r7
   119a4:	4631      	mov	r1, r6
   119a6:	f00d f938 	bl	1ec1a <bt_conn_is_peer_addr_le>
   119aa:	b918      	cbnz	r0, 119b4 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   119ac:	4620      	mov	r0, r4
   119ae:	f7ff fe7f 	bl	116b0 <bt_conn_unref>
			continue;
   119b2:	e7f0      	b.n	11996 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   119b4:	7b63      	ldrb	r3, [r4, #13]
   119b6:	4543      	cmp	r3, r8
   119b8:	d1f8      	bne.n	119ac <bt_conn_lookup_state_le+0x40>
   119ba:	7a23      	ldrb	r3, [r4, #8]
   119bc:	42b3      	cmp	r3, r6
   119be:	d1f5      	bne.n	119ac <bt_conn_lookup_state_le+0x40>
}
   119c0:	4620      	mov	r0, r4
   119c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119c6:	bf00      	nop
   119c8:	20008a40 	.word	0x20008a40

000119cc <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   119cc:	b510      	push	{r4, lr}
	info->type = conn->type;
   119ce:	7882      	ldrb	r2, [r0, #2]
   119d0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   119d2:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   119d4:	2a01      	cmp	r2, #1
	info->role = conn->role;
   119d6:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   119d8:	7a03      	ldrb	r3, [r0, #8]
   119da:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   119dc:	d11c      	bne.n	11a18 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   119de:	f100 0288 	add.w	r2, r0, #136	; 0x88
   119e2:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   119e4:	4a0e      	ldr	r2, [pc, #56]	; (11a20 <bt_conn_get_info+0x54>)
   119e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   119ea:	4413      	add	r3, r2
   119ec:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   119ee:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   119f2:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   119f6:	b964      	cbnz	r4, 11a12 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   119f8:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   119fc:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   11a00:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   11a02:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   11a06:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   11a08:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   11a0c:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   11a0e:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   11a10:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   11a12:	e9c1 2303 	strd	r2, r3, [r1, #12]
   11a16:	e7f1      	b.n	119fc <bt_conn_get_info+0x30>
	return -EINVAL;
   11a18:	f06f 0015 	mvn.w	r0, #21
   11a1c:	e7f8      	b.n	11a10 <bt_conn_get_info+0x44>
   11a1e:	bf00      	nop
   11a20:	20008000 	.word	0x20008000

00011a24 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   11a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11a28:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a2a:	4850      	ldr	r0, [pc, #320]	; (11b6c <bt_conn_le_create+0x148>)
   11a2c:	f00d f826 	bl	1ea7c <atomic_get>
   11a30:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a32:	0781      	lsls	r1, r0, #30
{
   11a34:	4615      	mov	r5, r2
   11a36:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a38:	f140 808f 	bpl.w	11b5a <bt_conn_le_create+0x136>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   11a3c:	4610      	mov	r0, r2
   11a3e:	f00c ff3b 	bl	1e8b8 <bt_le_conn_params_valid>
   11a42:	b928      	cbnz	r0, 11a50 <bt_conn_le_create+0x2c>
		return -EINVAL;
   11a44:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   11a48:	4628      	mov	r0, r5
   11a4a:	b002      	add	sp, #8
   11a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a50:	4846      	ldr	r0, [pc, #280]	; (11b6c <bt_conn_le_create+0x148>)
   11a52:	f00d f813 	bl	1ea7c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11a56:	0642      	lsls	r2, r0, #25
   11a58:	d4f4      	bmi.n	11a44 <bt_conn_le_create+0x20>
   11a5a:	4844      	ldr	r0, [pc, #272]	; (11b6c <bt_conn_le_create+0x148>)
   11a5c:	f00d f80e 	bl	1ea7c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   11a60:	0503      	lsls	r3, r0, #20
   11a62:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11a66:	d47b      	bmi.n	11b60 <bt_conn_le_create+0x13c>
	if (!bt_le_scan_random_addr_check()) {
   11a68:	f7fd fe04 	bl	f674 <bt_le_scan_random_addr_check>
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d0e9      	beq.n	11a44 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   11a70:	4621      	mov	r1, r4
   11a72:	4640      	mov	r0, r8
   11a74:	f7ff ff5e 	bl	11934 <bt_conn_exists_le>
   11a78:	2800      	cmp	r0, #0
   11a7a:	d1e3      	bne.n	11a44 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   11a7c:	7823      	ldrb	r3, [r4, #0]
   11a7e:	3b02      	subs	r3, #2
   11a80:	2b01      	cmp	r3, #1
   11a82:	d849      	bhi.n	11b18 <bt_conn_le_create+0xf4>
   11a84:	2207      	movs	r2, #7
   11a86:	4621      	mov	r1, r4
   11a88:	4668      	mov	r0, sp
   11a8a:	f00c fcf9 	bl	1e480 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   11a8e:	f89d 3000 	ldrb.w	r3, [sp]
   11a92:	3b02      	subs	r3, #2
   11a94:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   11a98:	4669      	mov	r1, sp
   11a9a:	2000      	movs	r0, #0
   11a9c:	f7ff fdda 	bl	11654 <bt_conn_add_le>
	if (!conn) {
   11aa0:	4604      	mov	r4, r0
   11aa2:	2800      	cmp	r0, #0
   11aa4:	d05f      	beq.n	11b66 <bt_conn_le_create+0x142>
	conn->le.interval_min = param->interval_min;
   11aa6:	882b      	ldrh	r3, [r5, #0]
   11aa8:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11aac:	886b      	ldrh	r3, [r5, #2]
   11aae:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   11ab2:	88ab      	ldrh	r3, [r5, #4]
   11ab4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11ab8:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   11aba:	4d2d      	ldr	r5, [pc, #180]	; (11b70 <bt_conn_le_create+0x14c>)
	conn->le.timeout = param->timeout;
   11abc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   11ac0:	f105 0c08 	add.w	ip, r5, #8
   11ac4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11ac8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   11acc:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   11ace:	2b00      	cmp	r3, #0
   11ad0:	bf08      	it	eq
   11ad2:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   11ad6:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   11ad8:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   11ada:	b903      	cbnz	r3, 11ade <bt_conn_le_create+0xba>
   11adc:	89ab      	ldrh	r3, [r5, #12]
   11ade:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11ae0:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11ae2:	b903      	cbnz	r3, 11ae6 <bt_conn_le_create+0xc2>
   11ae4:	89eb      	ldrh	r3, [r5, #14]
   11ae6:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   11ae8:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
   11aec:	b11b      	cbz	r3, 11af6 <bt_conn_le_create+0xd2>
   11aee:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
   11af2:	429a      	cmp	r2, r3
   11af4:	d919      	bls.n	11b2a <bt_conn_le_create+0x106>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11af6:	2102      	movs	r1, #2
   11af8:	4620      	mov	r0, r4
   11afa:	f7ff fe05 	bl	11708 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   11afe:	2001      	movs	r0, #1
   11b00:	f7fe f816 	bl	fb30 <bt_le_scan_update>
		if (err) {
   11b04:	4605      	mov	r5, r0
   11b06:	b330      	cbz	r0, 11b56 <bt_conn_le_create+0x132>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b08:	4620      	mov	r0, r4
   11b0a:	2100      	movs	r1, #0
   11b0c:	f7ff fdfc 	bl	11708 <bt_conn_set_state>
			bt_conn_unref(conn);
   11b10:	4620      	mov	r0, r4
   11b12:	f7ff fdcd 	bl	116b0 <bt_conn_unref>
			return err;
   11b16:	e797      	b.n	11a48 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   11b18:	4621      	mov	r1, r4
   11b1a:	f00c fea8 	bl	1e86e <bt_lookup_id_addr>
   11b1e:	2207      	movs	r2, #7
   11b20:	4601      	mov	r1, r0
   11b22:	4668      	mov	r0, sp
   11b24:	f00c fcac 	bl	1e480 <memcpy>
}
   11b28:	e7b6      	b.n	11a98 <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11b2a:	2106      	movs	r1, #6
   11b2c:	4620      	mov	r0, r4
   11b2e:	f7ff fdeb 	bl	11708 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   11b32:	4620      	mov	r0, r4
   11b34:	f00c fea3 	bl	1e87e <bt_le_create_conn>
	if (err) {
   11b38:	4605      	mov	r5, r0
   11b3a:	b160      	cbz	r0, 11b56 <bt_conn_le_create+0x132>
		conn->err = 0;
   11b3c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b3e:	4620      	mov	r0, r4
   11b40:	4631      	mov	r1, r6
		conn->err = 0;
   11b42:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b44:	f7ff fde0 	bl	11708 <bt_conn_set_state>
		bt_conn_unref(conn);
   11b48:	4620      	mov	r0, r4
   11b4a:	f7ff fdb1 	bl	116b0 <bt_conn_unref>
		bt_le_scan_update(false);
   11b4e:	4630      	mov	r0, r6
   11b50:	f7fd ffee 	bl	fb30 <bt_le_scan_update>
		return err;
   11b54:	e778      	b.n	11a48 <bt_conn_le_create+0x24>
	*ret_conn = conn;
   11b56:	603c      	str	r4, [r7, #0]
	return 0;
   11b58:	e776      	b.n	11a48 <bt_conn_le_create+0x24>
		return -EAGAIN;
   11b5a:	f06f 050a 	mvn.w	r5, #10
   11b5e:	e773      	b.n	11a48 <bt_conn_le_create+0x24>
		return -EALREADY;
   11b60:	f06f 0544 	mvn.w	r5, #68	; 0x44
   11b64:	e770      	b.n	11a48 <bt_conn_le_create+0x24>
		return -ENOMEM;
   11b66:	f06f 050b 	mvn.w	r5, #11
   11b6a:	e76d      	b.n	11a48 <bt_conn_le_create+0x24>
   11b6c:	20008094 	.word	0x20008094
   11b70:	20008000 	.word	0x20008000

00011b74 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   11b74:	b570      	push	{r4, r5, r6, lr}
   11b76:	4606      	mov	r6, r0
   11b78:	482f      	ldr	r0, [pc, #188]	; (11c38 <bt_le_set_auto_conn+0xc4>)
   11b7a:	f00c ff7f 	bl	1ea7c <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11b7e:	0780      	lsls	r0, r0, #30
{
   11b80:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11b82:	d553      	bpl.n	11c2c <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11b84:	b929      	cbnz	r1, 11b92 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   11b86:	f7fd fd75 	bl	f674 <bt_le_scan_random_addr_check>
   11b8a:	b940      	cbnz	r0, 11b9e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   11b8c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11b90:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11b92:	4608      	mov	r0, r1
   11b94:	f00c fe90 	bl	1e8b8 <bt_le_conn_params_valid>
   11b98:	2800      	cmp	r0, #0
   11b9a:	d1f4      	bne.n	11b86 <bt_le_set_auto_conn+0x12>
   11b9c:	e7f6      	b.n	11b8c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   11b9e:	4631      	mov	r1, r6
   11ba0:	2000      	movs	r0, #0
   11ba2:	f7ff fea3 	bl	118ec <bt_conn_lookup_addr_le>
	if (!conn) {
   11ba6:	4604      	mov	r4, r0
   11ba8:	b928      	cbnz	r0, 11bb6 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   11baa:	4631      	mov	r1, r6
   11bac:	f7ff fd52 	bl	11654 <bt_conn_add_le>
		if (!conn) {
   11bb0:	4604      	mov	r4, r0
   11bb2:	2800      	cmp	r0, #0
   11bb4:	d03d      	beq.n	11c32 <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   11bb6:	1d20      	adds	r0, r4, #4
	if (param) {
   11bb8:	b33d      	cbz	r5, 11c0a <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   11bba:	882b      	ldrh	r3, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11bbc:	2101      	movs	r1, #1
   11bbe:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11bc2:	886b      	ldrh	r3, [r5, #2]
   11bc4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   11bc8:	88ab      	ldrh	r3, [r5, #4]
   11bca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11bce:	88eb      	ldrh	r3, [r5, #6]
   11bd0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
   11bd4:	f00c ff60 	bl	1ea98 <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   11bd8:	07c1      	lsls	r1, r0, #31
   11bda:	d402      	bmi.n	11be2 <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   11bdc:	4620      	mov	r0, r4
   11bde:	f00d f83c 	bl	1ec5a <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11be2:	7b63      	ldrb	r3, [r4, #13]
   11be4:	b963      	cbnz	r3, 11c00 <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11be6:	4814      	ldr	r0, [pc, #80]	; (11c38 <bt_le_set_auto_conn+0xc4>)
   11be8:	f00c ff48 	bl	1ea7c <atomic_get>
   11bec:	0783      	lsls	r3, r0, #30
   11bee:	d507      	bpl.n	11c00 <bt_le_set_auto_conn+0x8c>
		if (param) {
   11bf0:	b11d      	cbz	r5, 11bfa <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11bf2:	2102      	movs	r1, #2
   11bf4:	4620      	mov	r0, r4
   11bf6:	f7ff fd87 	bl	11708 <bt_conn_set_state>
		bt_le_scan_update(false);
   11bfa:	2000      	movs	r0, #0
   11bfc:	f7fd ff98 	bl	fb30 <bt_le_scan_update>
	bt_conn_unref(conn);
   11c00:	4620      	mov	r0, r4
   11c02:	f7ff fd55 	bl	116b0 <bt_conn_unref>
	return 0;
   11c06:	2000      	movs	r0, #0
   11c08:	e7c2      	b.n	11b90 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11c0a:	f06f 0101 	mvn.w	r1, #1
   11c0e:	f00c ff38 	bl	1ea82 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   11c12:	07c2      	lsls	r2, r0, #31
   11c14:	d5e5      	bpl.n	11be2 <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   11c16:	4620      	mov	r0, r4
   11c18:	f7ff fd4a 	bl	116b0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   11c1c:	7b63      	ldrb	r3, [r4, #13]
   11c1e:	2b02      	cmp	r3, #2
   11c20:	d1df      	bne.n	11be2 <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c22:	4629      	mov	r1, r5
   11c24:	4620      	mov	r0, r4
   11c26:	f7ff fd6f 	bl	11708 <bt_conn_set_state>
   11c2a:	e7da      	b.n	11be2 <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   11c2c:	f06f 000a 	mvn.w	r0, #10
   11c30:	e7ae      	b.n	11b90 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   11c32:	f06f 000b 	mvn.w	r0, #11
   11c36:	e7ab      	b.n	11b90 <bt_le_set_auto_conn+0x1c>
   11c38:	20008094 	.word	0x20008094

00011c3c <bt_conn_disconnect>:
{
   11c3c:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c3e:	7883      	ldrb	r3, [r0, #2]
{
   11c40:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c42:	2b01      	cmp	r3, #1
{
   11c44:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c46:	d103      	bne.n	11c50 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   11c48:	2100      	movs	r1, #0
   11c4a:	3088      	adds	r0, #136	; 0x88
   11c4c:	f7ff ff92 	bl	11b74 <bt_le_set_auto_conn>
	switch (conn->state) {
   11c50:	7b63      	ldrb	r3, [r4, #13]
   11c52:	3b02      	subs	r3, #2
   11c54:	2b06      	cmp	r3, #6
   11c56:	d805      	bhi.n	11c64 <bt_conn_disconnect+0x28>
   11c58:	e8df f003 	tbb	[pc, r3]
   11c5c:	12040408 	.word	0x12040408
   11c60:	271f      	.short	0x271f
   11c62:	10          	.byte	0x10
   11c63:	00          	.byte	0x00
   11c64:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   11c68:	4628      	mov	r0, r5
   11c6a:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c6c:	4620      	mov	r0, r4
   11c6e:	2100      	movs	r1, #0
		conn->err = reason;
   11c70:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c72:	f7ff fd49 	bl	11708 <bt_conn_set_state>
			bt_le_scan_update(false);
   11c76:	2000      	movs	r0, #0
   11c78:	f7fd ff5a 	bl	fb30 <bt_le_scan_update>
		return 0;
   11c7c:	2500      	movs	r5, #0
   11c7e:	e7f3      	b.n	11c68 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11c80:	2157      	movs	r1, #87	; 0x57
   11c82:	4810      	ldr	r0, [pc, #64]	; (11cc4 <bt_conn_disconnect+0x88>)
   11c84:	f00a ff44 	bl	1cb10 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c88:	4620      	mov	r0, r4
		conn->err = reason;
   11c8a:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c8c:	2100      	movs	r1, #0
   11c8e:	f7ff fd3b 	bl	11708 <bt_conn_set_state>
}
   11c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   11c96:	f7fe beef 	b.w	10a78 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   11c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11c9e:	f00a f849 	bl	1bd34 <k_delayed_work_cancel>
}
   11ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   11ca6:	f7fd bd57 	b.w	f758 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   11caa:	4629      	mov	r1, r5
   11cac:	8820      	ldrh	r0, [r4, #0]
   11cae:	f00c fde8 	bl	1e882 <bt_hci_disconnect>
	if (err) {
   11cb2:	4605      	mov	r5, r0
   11cb4:	2800      	cmp	r0, #0
   11cb6:	d1d7      	bne.n	11c68 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   11cb8:	2108      	movs	r1, #8
   11cba:	4620      	mov	r0, r4
   11cbc:	f7ff fd24 	bl	11708 <bt_conn_set_state>
	return 0;
   11cc0:	e7d2      	b.n	11c68 <bt_conn_disconnect+0x2c>
   11cc2:	bf00      	nop
   11cc4:	00024e3c 	.word	0x00024e3c

00011cc8 <send_conn_le_param_update>:
{
   11cc8:	b538      	push	{r3, r4, r5, lr}
   11cca:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11ccc:	4608      	mov	r0, r1
{
   11cce:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11cd0:	f00c fdf2 	bl	1e8b8 <bt_le_conn_params_valid>
   11cd4:	b308      	cbz	r0, 11d1a <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11cd6:	4b12      	ldr	r3, [pc, #72]	; (11d20 <send_conn_le_param_update+0x58>)
   11cd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11cdc:	0799      	lsls	r1, r3, #30
   11cde:	d407      	bmi.n	11cf0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11ce0:	78e3      	ldrb	r3, [r4, #3]
   11ce2:	b173      	cbz	r3, 11d02 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11ce4:	4629      	mov	r1, r5
   11ce6:	4620      	mov	r0, r4
}
   11ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11cec:	f000 bb14 	b.w	12318 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11cf0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11cf4:	079a      	lsls	r2, r3, #30
   11cf6:	d5f3      	bpl.n	11ce0 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11cf8:	1d20      	adds	r0, r4, #4
   11cfa:	f00c febf 	bl	1ea7c <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11cfe:	0543      	lsls	r3, r0, #21
   11d00:	d4ee      	bmi.n	11ce0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11d02:	4629      	mov	r1, r5
   11d04:	4620      	mov	r0, r4
   11d06:	f00c ffe3 	bl	1ecd0 <bt_conn_le_conn_update>
		if (rc == 0) {
   11d0a:	b928      	cbnz	r0, 11d18 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11d0c:	88ab      	ldrh	r3, [r5, #4]
   11d0e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11d12:	88eb      	ldrh	r3, [r5, #6]
   11d14:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11d18:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11d1a:	f06f 0015 	mvn.w	r0, #21
   11d1e:	e7fb      	b.n	11d18 <send_conn_le_param_update+0x50>
   11d20:	20008000 	.word	0x20008000

00011d24 <deferred_work>:
{
   11d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11d26:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   11d2a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11d2c:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11d30:	b99b      	cbnz	r3, 11d5a <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11d32:	4628      	mov	r0, r5
   11d34:	f00d f82c 	bl	1ed90 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11d38:	4b24      	ldr	r3, [pc, #144]	; (11dcc <deferred_work+0xa8>)
   11d3a:	681e      	ldr	r6, [r3, #0]
   11d3c:	b92e      	cbnz	r6, 11d4a <deferred_work+0x26>
		bt_conn_unref(conn);
   11d3e:	4628      	mov	r0, r5
}
   11d40:	b002      	add	sp, #8
   11d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11d46:	f7ff bcb3 	b.w	116b0 <bt_conn_unref>
		if (cb->disconnected) {
   11d4a:	6873      	ldr	r3, [r6, #4]
   11d4c:	b11b      	cbz	r3, 11d56 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11d4e:	4628      	mov	r0, r5
   11d50:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11d54:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11d56:	69b6      	ldr	r6, [r6, #24]
   11d58:	e7f0      	b.n	11d3c <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11d5a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11d5e:	2b01      	cmp	r3, #1
   11d60:	d132      	bne.n	11dc8 <deferred_work+0xa4>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11d62:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11d66:	b923      	cbnz	r3, 11d72 <deferred_work+0x4e>
}
   11d68:	b002      	add	sp, #8
   11d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11d6e:	f7fd bcf3 	b.w	f758 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11d72:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11d76:	f46f 7100 	mvn.w	r1, #512	; 0x200
   11d7a:	4630      	mov	r0, r6
   11d7c:	f00c fe81 	bl	1ea82 <atomic_and>
   11d80:	0583      	lsls	r3, r0, #22
   11d82:	d51b      	bpl.n	11dbc <deferred_work+0x98>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11d84:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11d88:	f8ad 3000 	strh.w	r3, [sp]
   11d8c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11d90:	f8ad 3002 	strh.w	r3, [sp, #2]
   11d94:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11d98:	f8ad 3004 	strh.w	r3, [sp, #4]
   11d9c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11da0:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11da4:	4669      	mov	r1, sp
   11da6:	4628      	mov	r0, r5
   11da8:	f7ff ff8e 	bl	11cc8 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11dac:	f44f 7180 	mov.w	r1, #256	; 0x100
   11db0:	4630      	mov	r0, r6
}
   11db2:	b002      	add	sp, #8
   11db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11db8:	f00c be6e 	b.w	1ea98 <atomic_or>
		param = BT_LE_CONN_PARAM(
   11dbc:	466b      	mov	r3, sp
   11dbe:	4a04      	ldr	r2, [pc, #16]	; (11dd0 <deferred_work+0xac>)
   11dc0:	6810      	ldr	r0, [r2, #0]
   11dc2:	6851      	ldr	r1, [r2, #4]
   11dc4:	c303      	stmia	r3!, {r0, r1}
   11dc6:	e7ed      	b.n	11da4 <deferred_work+0x80>
}
   11dc8:	b002      	add	sp, #8
   11dca:	bd70      	pop	{r4, r5, r6, pc}
   11dcc:	20009c24 	.word	0x20009c24
   11dd0:	00021d48 	.word	0x00021d48

00011dd4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dd6:	4604      	mov	r4, r0
   11dd8:	460d      	mov	r5, r1
   11dda:	4617      	mov	r7, r2
   11ddc:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11dde:	f00f fc0f 	bl	21600 <k_is_in_isr>
   11de2:	b150      	cbz	r0, 11dfa <bt_conn_create_pdu_timeout+0x26>
   11de4:	490f      	ldr	r1, [pc, #60]	; (11e24 <bt_conn_create_pdu_timeout+0x50>)
   11de6:	4810      	ldr	r0, [pc, #64]	; (11e28 <bt_conn_create_pdu_timeout+0x54>)
   11de8:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11dec:	f00a fe90 	bl	1cb10 <printk>
   11df0:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11df4:	480b      	ldr	r0, [pc, #44]	; (11e24 <bt_conn_create_pdu_timeout+0x50>)
   11df6:	f00b f931 	bl	1d05c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11dfa:	480c      	ldr	r0, [pc, #48]	; (11e2c <bt_conn_create_pdu_timeout+0x58>)
   11dfc:	463a      	mov	r2, r7
   11dfe:	2c00      	cmp	r4, #0
   11e00:	bf18      	it	ne
   11e02:	4620      	movne	r0, r4
   11e04:	4633      	mov	r3, r6
   11e06:	f00e fc9d 	bl	20744 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11e0a:	4604      	mov	r4, r0
   11e0c:	b928      	cbnz	r0, 11e1a <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11e0e:	2157      	movs	r1, #87	; 0x57
   11e10:	4807      	ldr	r0, [pc, #28]	; (11e30 <bt_conn_create_pdu_timeout+0x5c>)
   11e12:	f00a fe7d 	bl	1cb10 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11e16:	4620      	mov	r0, r4
   11e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11e1a:	1d69      	adds	r1, r5, #5
   11e1c:	3008      	adds	r0, #8
   11e1e:	f005 fc8f 	bl	17740 <net_buf_simple_reserve>
	return buf;
   11e22:	e7f8      	b.n	11e16 <bt_conn_create_pdu_timeout+0x42>
   11e24:	00024c71 	.word	0x00024c71
   11e28:	00022f17 	.word	0x00022f17
   11e2c:	200085c4 	.word	0x200085c4
   11e30:	00024e68 	.word	0x00024e68

00011e34 <bt_conn_create_frag_timeout>:
{
   11e34:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11e36:	4801      	ldr	r0, [pc, #4]	; (11e3c <bt_conn_create_frag_timeout+0x8>)
   11e38:	f7ff bfcc 	b.w	11dd4 <bt_conn_create_pdu_timeout>
   11e3c:	2000861c 	.word	0x2000861c

00011e40 <create_frag>:
{
   11e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e44:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11e46:	f04f 33ff 	mov.w	r3, #4294967295
   11e4a:	f04f 32ff 	mov.w	r2, #4294967295
   11e4e:	2000      	movs	r0, #0
{
   11e50:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11e52:	f7ff ffef 	bl	11e34 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11e56:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   11e58:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11e5a:	2b07      	cmp	r3, #7
   11e5c:	f04f 0600 	mov.w	r6, #0
   11e60:	d005      	beq.n	11e6e <create_frag+0x2e>
		net_buf_unref(frag);
   11e62:	f005 fcbf 	bl	177e4 <net_buf_unref>
		return NULL;
   11e66:	4635      	mov	r5, r6
}
   11e68:	4628      	mov	r0, r5
   11e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11e6e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11e70:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11e74:	4e0c      	ldr	r6, [pc, #48]	; (11ea8 <create_frag+0x68>)
   11e76:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11e78:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11e7c:	f00e fc88 	bl	20790 <net_buf_simple_tailroom>
   11e80:	4580      	cmp	r8, r0
   11e82:	d20c      	bcs.n	11e9e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11e84:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11e88:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11e8c:	4632      	mov	r2, r6
   11e8e:	4638      	mov	r0, r7
   11e90:	f00e fc86 	bl	207a0 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11e94:	4631      	mov	r1, r6
   11e96:	4620      	mov	r0, r4
   11e98:	f005 fd80 	bl	1799c <net_buf_simple_pull>
   11e9c:	e7e4      	b.n	11e68 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11e9e:	4638      	mov	r0, r7
   11ea0:	f00e fc76 	bl	20790 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11ea4:	b286      	uxth	r6, r0
   11ea6:	e7ef      	b.n	11e88 <create_frag+0x48>
   11ea8:	20008000 	.word	0x20008000

00011eac <bt_conn_process_tx>:
{
   11eac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11eae:	7b43      	ldrb	r3, [r0, #13]
{
   11eb0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11eb2:	b95b      	cbnz	r3, 11ecc <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11eb4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11eb8:	3004      	adds	r0, #4
   11eba:	f00c fde2 	bl	1ea82 <atomic_and>
   11ebe:	0643      	lsls	r3, r0, #25
   11ec0:	d504      	bpl.n	11ecc <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   11ec2:	4620      	mov	r0, r4
}
   11ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11ec8:	f7ff ba8e 	b.w	113e8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11ecc:	2200      	movs	r2, #0
   11ece:	2300      	movs	r3, #0
   11ed0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11ed4:	f005 fc04 	bl	176e0 <net_buf_get>
	BT_ASSERT(buf);
   11ed8:	4605      	mov	r5, r0
   11eda:	b958      	cbnz	r0, 11ef4 <bt_conn_process_tx+0x48>
   11edc:	f240 525f 	movw	r2, #1375	; 0x55f
   11ee0:	491d      	ldr	r1, [pc, #116]	; (11f58 <bt_conn_process_tx+0xac>)
   11ee2:	481e      	ldr	r0, [pc, #120]	; (11f5c <bt_conn_process_tx+0xb0>)
   11ee4:	f00a fe14 	bl	1cb10 <printk>
   11ee8:	4040      	eors	r0, r0
   11eea:	f380 8811 	msr	BASEPRI, r0
   11eee:	f04f 0003 	mov.w	r0, #3
   11ef2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11ef4:	4e1a      	ldr	r6, [pc, #104]	; (11f60 <bt_conn_process_tx+0xb4>)
	if (buf->len <= conn_mtu(conn)) {
   11ef6:	89aa      	ldrh	r2, [r5, #12]
   11ef8:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11efc:	429a      	cmp	r2, r3
   11efe:	d807      	bhi.n	11f10 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11f00:	2300      	movs	r3, #0
   11f02:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11f04:	4629      	mov	r1, r5
   11f06:	4620      	mov	r0, r4
   11f08:	f7ff f942 	bl	11190 <send_frag>
	if (!send_buf(conn, buf)) {
   11f0c:	b130      	cbz	r0, 11f1c <bt_conn_process_tx+0x70>
}
   11f0e:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11f10:	4629      	mov	r1, r5
   11f12:	4620      	mov	r0, r4
   11f14:	f7ff ff94 	bl	11e40 <create_frag>
	if (!frag) {
   11f18:	4601      	mov	r1, r0
   11f1a:	b920      	cbnz	r0, 11f26 <bt_conn_process_tx+0x7a>
		net_buf_unref(buf);
   11f1c:	4628      	mov	r0, r5
}
   11f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11f22:	f005 bc5f 	b.w	177e4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11f26:	2301      	movs	r3, #1
   11f28:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11f2a:	4620      	mov	r0, r4
   11f2c:	f7ff f930 	bl	11190 <send_frag>
   11f30:	2800      	cmp	r0, #0
   11f32:	d0f3      	beq.n	11f1c <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   11f34:	89aa      	ldrh	r2, [r5, #12]
   11f36:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11f3a:	429a      	cmp	r2, r3
   11f3c:	d802      	bhi.n	11f44 <bt_conn_process_tx+0x98>
	return send_frag(conn, buf, FRAG_END, false);
   11f3e:	2300      	movs	r3, #0
   11f40:	2203      	movs	r2, #3
   11f42:	e7df      	b.n	11f04 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   11f44:	4629      	mov	r1, r5
   11f46:	4620      	mov	r0, r4
   11f48:	f7ff ff7a 	bl	11e40 <create_frag>
		if (!frag) {
   11f4c:	4601      	mov	r1, r0
   11f4e:	2800      	cmp	r0, #0
   11f50:	d0e4      	beq.n	11f1c <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11f52:	2301      	movs	r3, #1
   11f54:	461a      	mov	r2, r3
   11f56:	e7e8      	b.n	11f2a <bt_conn_process_tx+0x7e>
   11f58:	00024c71 	.word	0x00024c71
   11f5c:	00022f17 	.word	0x00022f17
   11f60:	20008000 	.word	0x20008000

00011f64 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11f64:	4b0b      	ldr	r3, [pc, #44]	; (11f94 <bt_conn_index+0x30>)
{
   11f66:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11f68:	1ac0      	subs	r0, r0, r3
   11f6a:	4b0b      	ldr	r3, [pc, #44]	; (11f98 <bt_conn_index+0x34>)
   11f6c:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11f6e:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
		index = conn - acl_conns;
   11f72:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11f76:	d90a      	bls.n	11f8e <bt_conn_index+0x2a>
   11f78:	4908      	ldr	r1, [pc, #32]	; (11f9c <bt_conn_index+0x38>)
   11f7a:	4809      	ldr	r0, [pc, #36]	; (11fa0 <bt_conn_index+0x3c>)
   11f7c:	f640 2295 	movw	r2, #2709	; 0xa95
   11f80:	f00a fdc6 	bl	1cb10 <printk>
   11f84:	f640 2195 	movw	r1, #2709	; 0xa95
   11f88:	4804      	ldr	r0, [pc, #16]	; (11f9c <bt_conn_index+0x38>)
   11f8a:	f00b f867 	bl	1d05c <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11f8e:	b2e0      	uxtb	r0, r4
   11f90:	bd10      	pop	{r4, pc}
   11f92:	bf00      	nop
   11f94:	20008a40 	.word	0x20008a40
   11f98:	aaaaaaab 	.word	0xaaaaaaab
   11f9c:	00024c71 	.word	0x00024c71
   11fa0:	00022f17 	.word	0x00022f17

00011fa4 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11fa4:	2802      	cmp	r0, #2
   11fa6:	d806      	bhi.n	11fb6 <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11fa8:	4b04      	ldr	r3, [pc, #16]	; (11fbc <bt_conn_lookup_index+0x18>)
   11faa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11fae:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11fb2:	f00c be52 	b.w	1ec5a <bt_conn_ref>
}
   11fb6:	2000      	movs	r0, #0
   11fb8:	4770      	bx	lr
   11fba:	bf00      	nop
   11fbc:	20008a40 	.word	0x20008a40

00011fc0 <bt_conn_init>:

int bt_conn_init(void)
{
   11fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11fc2:	4917      	ldr	r1, [pc, #92]	; (12020 <bt_conn_init+0x60>)
   11fc4:	4817      	ldr	r0, [pc, #92]	; (12024 <bt_conn_init+0x64>)
   11fc6:	f00f fab3 	bl	21530 <k_queue_append>
   11fca:	4917      	ldr	r1, [pc, #92]	; (12028 <bt_conn_init+0x68>)
   11fcc:	4815      	ldr	r0, [pc, #84]	; (12024 <bt_conn_init+0x64>)
   11fce:	f00f faaf 	bl	21530 <k_queue_append>
   11fd2:	4916      	ldr	r1, [pc, #88]	; (1202c <bt_conn_init+0x6c>)
   11fd4:	4813      	ldr	r0, [pc, #76]	; (12024 <bt_conn_init+0x64>)
   11fd6:	f00f faab 	bl	21530 <k_queue_append>
	}

	bt_att_init();
   11fda:	f00d fa73 	bl	1f4c4 <bt_att_init>

	err = bt_smp_init();
   11fde:	f005 f907 	bl	171f0 <bt_smp_init>
	if (err) {
   11fe2:	4605      	mov	r5, r0
   11fe4:	b9d0      	cbnz	r0, 1201c <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11fe6:	f00c ff56 	bl	1ee96 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11fea:	462e      	mov	r6, r5
   11fec:	4f10      	ldr	r7, [pc, #64]	; (12030 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11fee:	4638      	mov	r0, r7
   11ff0:	f00c fe33 	bl	1ec5a <bt_conn_ref>

			if (!conn) {
   11ff4:	4604      	mov	r4, r0
   11ff6:	b160      	cbz	r0, 12012 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11ff8:	3004      	adds	r0, #4
   11ffa:	f00c fd3f 	bl	1ea7c <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11ffe:	07c3      	lsls	r3, r0, #31
   12000:	d504      	bpl.n	1200c <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   12002:	2102      	movs	r1, #2
   12004:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   12006:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   12008:	f7ff fb7e 	bl	11708 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   1200c:	4620      	mov	r0, r4
   1200e:	f7ff fb4f 	bl	116b0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   12012:	3601      	adds	r6, #1
   12014:	2e03      	cmp	r6, #3
   12016:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   1201a:	d1e8      	bne.n	11fee <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   1201c:	4628      	mov	r0, r5
   1201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12020:	20009c28 	.word	0x20009c28
   12024:	2000857c 	.word	0x2000857c
   12028:	20009c38 	.word	0x20009c38
   1202c:	20009c48 	.word	0x20009c48
   12030:	20008a40 	.word	0x20008a40

00012034 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   12034:	4b0f      	ldr	r3, [pc, #60]	; (12074 <l2cap_accept+0x40>)
{
   12036:	b510      	push	{r4, lr}
		if (l2cap->chan.chan.conn) {
   12038:	681c      	ldr	r4, [r3, #0]
{
   1203a:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   1203c:	b164      	cbz	r4, 12058 <l2cap_accept+0x24>
   1203e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   12042:	b190      	cbz	r0, 1206a <l2cap_accept+0x36>
   12044:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
   12048:	b188      	cbz	r0, 1206e <l2cap_accept+0x3a>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1204a:	480b      	ldr	r0, [pc, #44]	; (12078 <l2cap_accept+0x44>)
   1204c:	2145      	movs	r1, #69	; 0x45
   1204e:	f00a fd5f 	bl	1cb10 <printk>
   12052:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   12056:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   12058:	4622      	mov	r2, r4
		l2cap->chan.chan.ops = &ops;
   1205a:	20c0      	movs	r0, #192	; 0xc0
   1205c:	fb00 3302 	mla	r3, r0, r2, r3
   12060:	4a06      	ldr	r2, [pc, #24]	; (1207c <l2cap_accept+0x48>)
		return 0;
   12062:	2000      	movs	r0, #0
		l2cap->chan.chan.ops = &ops;
   12064:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   12066:	600b      	str	r3, [r1, #0]
		return 0;
   12068:	e7f5      	b.n	12056 <l2cap_accept+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1206a:	2201      	movs	r2, #1
   1206c:	e7f5      	b.n	1205a <l2cap_accept+0x26>
   1206e:	2202      	movs	r2, #2
   12070:	e7f3      	b.n	1205a <l2cap_accept+0x26>
   12072:	bf00      	nop
   12074:	20008c80 	.word	0x20008c80
   12078:	00024f00 	.word	0x00024f00
   1207c:	000222d8 	.word	0x000222d8

00012080 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   12080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12082:	4605      	mov	r5, r0
   12084:	460f      	mov	r7, r1
   12086:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   12088:	2300      	movs	r3, #0
   1208a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1208e:	2104      	movs	r1, #4
   12090:	2000      	movs	r0, #0
   12092:	f7ff fe9f 	bl	11dd4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   12096:	4604      	mov	r4, r0
   12098:	b930      	cbnz	r0, 120a8 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1209a:	462a      	mov	r2, r5
   1209c:	2145      	movs	r1, #69	; 0x45
   1209e:	4806      	ldr	r0, [pc, #24]	; (120b8 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   120a0:	f00a fd36 	bl	1cb10 <printk>
}
   120a4:	4620      	mov	r0, r4
   120a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   120a8:	2104      	movs	r1, #4
   120aa:	3008      	adds	r0, #8
   120ac:	f005 fcb0 	bl	17a10 <net_buf_simple_add>
	hdr->code = code;
   120b0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   120b2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   120b4:	8046      	strh	r6, [r0, #2]
	return buf;
   120b6:	e7f5      	b.n	120a4 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   120b8:	00024f2c 	.word	0x00024f2c

000120bc <l2cap_rtx_timeout>:
{
   120bc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   120be:	4604      	mov	r4, r0
   120c0:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   120c4:	2145      	movs	r1, #69	; 0x45
   120c6:	4622      	mov	r2, r4
   120c8:	4805      	ldr	r0, [pc, #20]	; (120e0 <l2cap_rtx_timeout+0x24>)
   120ca:	f00a fd21 	bl	1cb10 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   120ce:	4628      	mov	r0, r5
   120d0:	4621      	mov	r1, r4
   120d2:	f00c fe27 	bl	1ed24 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   120d6:	4620      	mov	r0, r4
}
   120d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   120dc:	f00c be43 	b.w	1ed66 <bt_l2cap_chan_del>
   120e0:	00024f59 	.word	0x00024f59

000120e4 <bt_l2cap_connected>:
{
   120e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   120e8:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   120ea:	4e2d      	ldr	r6, [pc, #180]	; (121a0 <bt_l2cap_connected+0xbc>)
   120ec:	4f2d      	ldr	r7, [pc, #180]	; (121a4 <bt_l2cap_connected+0xc0>)
   120ee:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 121a8 <bt_l2cap_connected+0xc4>
   120f2:	42be      	cmp	r6, r7
   120f4:	d90a      	bls.n	1210c <bt_l2cap_connected+0x28>
   120f6:	4641      	mov	r1, r8
   120f8:	482c      	ldr	r0, [pc, #176]	; (121ac <bt_l2cap_connected+0xc8>)
   120fa:	f240 1267 	movw	r2, #359	; 0x167
   120fe:	f00a fd07 	bl	1cb10 <printk>
   12102:	f240 1167 	movw	r1, #359	; 0x167
   12106:	4640      	mov	r0, r8
   12108:	f00a ffa8 	bl	1d05c <assert_post_action>
   1210c:	42be      	cmp	r6, r7
   1210e:	d302      	bcc.n	12116 <bt_l2cap_connected+0x32>
}
   12110:	b003      	add	sp, #12
   12112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   12116:	4628      	mov	r0, r5
   12118:	6873      	ldr	r3, [r6, #4]
   1211a:	a901      	add	r1, sp, #4
   1211c:	4798      	blx	r3
   1211e:	2800      	cmp	r0, #0
   12120:	db38      	blt.n	12194 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   12122:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   12124:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12126:	2230      	movs	r2, #48	; 0x30
   12128:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   1212c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   12130:	2100      	movs	r1, #0
   12132:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   12136:	f8d6 9008 	ldr.w	r9, [r6, #8]
   1213a:	f00c f9cc 	bl	1e4d6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1213e:	2200      	movs	r2, #0
   12140:	4b1b      	ldr	r3, [pc, #108]	; (121b0 <bt_l2cap_connected+0xcc>)
   12142:	6163      	str	r3, [r4, #20]
   12144:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12148:	e8d3 1fef 	ldaex	r1, [r3]
   1214c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12150:	2800      	cmp	r0, #0
   12152:	d1f9      	bne.n	12148 <bt_l2cap_connected+0x64>
	parent->next = child;
   12154:	60a2      	str	r2, [r4, #8]
	return list->tail;
   12156:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   12158:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   1215c:	b9e2      	cbnz	r2, 12198 <bt_l2cap_connected+0xb4>
	list->head = node;
   1215e:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   12162:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   12164:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   12166:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   12168:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   1216c:	681b      	ldr	r3, [r3, #0]
   1216e:	b103      	cbz	r3, 12172 <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   12170:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12172:	9b01      	ldr	r3, [sp, #4]
   12174:	3340      	adds	r3, #64	; 0x40
   12176:	e8d3 2fef 	ldaex	r2, [r3]
   1217a:	f042 0201 	orr.w	r2, r2, #1
   1217e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12182:	2900      	cmp	r1, #0
   12184:	d1f7      	bne.n	12176 <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   12186:	9801      	ldr	r0, [sp, #4]
   12188:	6843      	ldr	r3, [r0, #4]
   1218a:	699b      	ldr	r3, [r3, #24]
   1218c:	b113      	cbz	r3, 12194 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   1218e:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12192:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   12194:	360c      	adds	r6, #12
   12196:	e7ac      	b.n	120f2 <bt_l2cap_connected+0xe>
	parent->next = child;
   12198:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1219a:	656b      	str	r3, [r5, #84]	; 0x54
}
   1219c:	e7e1      	b.n	12162 <bt_l2cap_connected+0x7e>
   1219e:	bf00      	nop
   121a0:	00021afc 	.word	0x00021afc
   121a4:	00021b20 	.word	0x00021b20
   121a8:	00024f6e 	.word	0x00024f6e
   121ac:	00022f17 	.word	0x00022f17
   121b0:	000120bd 	.word	0x000120bd

000121b4 <l2cap_recv>:
{
   121b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   121b6:	898b      	ldrh	r3, [r1, #12]
{
   121b8:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   121ba:	2b03      	cmp	r3, #3
{
   121bc:	460d      	mov	r5, r1
   121be:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   121c0:	d804      	bhi.n	121cc <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   121c2:	2145      	movs	r1, #69	; 0x45
   121c4:	483a      	ldr	r0, [pc, #232]	; (122b0 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   121c6:	f00a fca3 	bl	1cb10 <printk>
		return 0;
   121ca:	e00d      	b.n	121e8 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   121cc:	2104      	movs	r1, #4
   121ce:	f105 0008 	add.w	r0, r5, #8
   121d2:	f005 fbff 	bl	179d4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   121d6:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   121d8:	8843      	ldrh	r3, [r0, #2]
   121da:	4604      	mov	r4, r0
	if (buf->len != len) {
   121dc:	4293      	cmp	r3, r2
   121de:	d006      	beq.n	121ee <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   121e0:	2145      	movs	r1, #69	; 0x45
   121e2:	4834      	ldr	r0, [pc, #208]	; (122b4 <l2cap_recv+0x100>)
   121e4:	f00a fc94 	bl	1cb10 <printk>
}
   121e8:	2000      	movs	r0, #0
   121ea:	b005      	add	sp, #20
   121ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   121ee:	7841      	ldrb	r1, [r0, #1]
   121f0:	b911      	cbnz	r1, 121f8 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   121f2:	2145      	movs	r1, #69	; 0x45
   121f4:	4830      	ldr	r0, [pc, #192]	; (122b8 <l2cap_recv+0x104>)
   121f6:	e7e6      	b.n	121c6 <l2cap_recv+0x12>
	switch (hdr->code) {
   121f8:	7802      	ldrb	r2, [r0, #0]
   121fa:	2a12      	cmp	r2, #18
   121fc:	d00f      	beq.n	1221e <l2cap_recv+0x6a>
   121fe:	2a13      	cmp	r2, #19
   12200:	d008      	beq.n	12214 <l2cap_recv+0x60>
   12202:	2a01      	cmp	r2, #1
   12204:	d0f0      	beq.n	121e8 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   12206:	2157      	movs	r1, #87	; 0x57
   12208:	482c      	ldr	r0, [pc, #176]	; (122bc <l2cap_recv+0x108>)
   1220a:	f00a fc81 	bl	1cb10 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   1220e:	7861      	ldrb	r1, [r4, #1]
   12210:	6830      	ldr	r0, [r6, #0]
   12212:	e00d      	b.n	12230 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   12214:	2b01      	cmp	r3, #1
   12216:	d8e7      	bhi.n	121e8 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   12218:	2145      	movs	r1, #69	; 0x45
   1221a:	4829      	ldr	r0, [pc, #164]	; (122c0 <l2cap_recv+0x10c>)
   1221c:	e7d3      	b.n	121c6 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   1221e:	2b07      	cmp	r3, #7
   12220:	d802      	bhi.n	12228 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   12222:	2145      	movs	r1, #69	; 0x45
   12224:	4827      	ldr	r0, [pc, #156]	; (122c4 <l2cap_recv+0x110>)
   12226:	e7ce      	b.n	121c6 <l2cap_recv+0x12>
   12228:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   1222a:	78e7      	ldrb	r7, [r4, #3]
   1222c:	b11f      	cbz	r7, 12236 <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1222e:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   12230:	f00c fdfa 	bl	1ee28 <l2cap_send_reject.constprop.0>
		break;
   12234:	e7d8      	b.n	121e8 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   12236:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   12238:	7850      	ldrb	r0, [r2, #1]
   1223a:	7813      	ldrb	r3, [r2, #0]
   1223c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12240:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   12244:	78d0      	ldrb	r0, [r2, #3]
   12246:	7893      	ldrb	r3, [r2, #2]
   12248:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1224c:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   12250:	7950      	ldrb	r0, [r2, #5]
   12252:	7913      	ldrb	r3, [r2, #4]
   12254:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12258:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1225c:	7993      	ldrb	r3, [r2, #6]
   1225e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12260:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   12262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12266:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   12268:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1226c:	f7ff ff08 	bl	12080 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12270:	4605      	mov	r5, r0
   12272:	2800      	cmp	r0, #0
   12274:	d0b8      	beq.n	121e8 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   12276:	a902      	add	r1, sp, #8
   12278:	4620      	mov	r0, r4
   1227a:	f7ff f85d 	bl	11338 <le_param_req>
   1227e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   12280:	2102      	movs	r1, #2
   12282:	f105 0008 	add.w	r0, r5, #8
   12286:	f005 fbc3 	bl	17a10 <net_buf_simple_add>
	if (accepted) {
   1228a:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1228e:	b2db      	uxtb	r3, r3
   12290:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   12292:	462a      	mov	r2, r5
   12294:	463b      	mov	r3, r7
   12296:	2105      	movs	r1, #5
   12298:	4620      	mov	r0, r4
   1229a:	9700      	str	r7, [sp, #0]
   1229c:	f00c fdab 	bl	1edf6 <bt_l2cap_send_cb>
	if (accepted) {
   122a0:	2e00      	cmp	r6, #0
   122a2:	d0a1      	beq.n	121e8 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   122a4:	4620      	mov	r0, r4
   122a6:	a902      	add	r1, sp, #8
   122a8:	f00c fd12 	bl	1ecd0 <bt_conn_le_conn_update>
   122ac:	e79c      	b.n	121e8 <l2cap_recv+0x34>
   122ae:	bf00      	nop
   122b0:	00024f9f 	.word	0x00024f9f
   122b4:	00024fc2 	.word	0x00024fc2
   122b8:	00024fe8 	.word	0x00024fe8
   122bc:	00025057 	.word	0x00025057
   122c0:	0002500e 	.word	0x0002500e
   122c4:	0002502f 	.word	0x0002502f

000122c8 <bt_l2cap_recv>:
{
   122c8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   122ca:	898b      	ldrh	r3, [r1, #12]
{
   122cc:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   122ce:	2b03      	cmp	r3, #3
{
   122d0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   122d2:	d808      	bhi.n	122e6 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   122d4:	2145      	movs	r1, #69	; 0x45
   122d6:	480e      	ldr	r0, [pc, #56]	; (12310 <bt_l2cap_recv+0x48>)
   122d8:	f00a fc1a 	bl	1cb10 <printk>
	net_buf_unref(buf);
   122dc:	4620      	mov	r0, r4
}
   122de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   122e2:	f005 ba7f 	b.w	177e4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   122e6:	2104      	movs	r1, #4
   122e8:	f104 0008 	add.w	r0, r4, #8
   122ec:	f005 fb72 	bl	179d4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   122f0:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   122f2:	4628      	mov	r0, r5
   122f4:	4611      	mov	r1, r2
   122f6:	f00c fdbe 	bl	1ee76 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   122fa:	b920      	cbnz	r0, 12306 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   122fc:	2157      	movs	r1, #87	; 0x57
   122fe:	4805      	ldr	r0, [pc, #20]	; (12314 <bt_l2cap_recv+0x4c>)
   12300:	f00a fc06 	bl	1cb10 <printk>
		net_buf_unref(buf);
   12304:	e7ea      	b.n	122dc <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   12306:	6843      	ldr	r3, [r0, #4]
   12308:	4621      	mov	r1, r4
   1230a:	691b      	ldr	r3, [r3, #16]
   1230c:	4798      	blx	r3
   1230e:	e7e5      	b.n	122dc <bt_l2cap_recv+0x14>
   12310:	0002507a 	.word	0x0002507a
   12314:	0002509c 	.word	0x0002509c

00012318 <bt_l2cap_update_conn_param>:
{
   12318:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1231a:	460c      	mov	r4, r1
	ident++;
   1231c:	4914      	ldr	r1, [pc, #80]	; (12370 <bt_l2cap_update_conn_param+0x58>)
{
   1231e:	4605      	mov	r5, r0
	ident++;
   12320:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12322:	2208      	movs	r2, #8
	ident++;
   12324:	3301      	adds	r3, #1
	if (!ident) {
   12326:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1232a:	bf08      	it	eq
   1232c:	2301      	moveq	r3, #1
   1232e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12330:	2012      	movs	r0, #18
   12332:	7809      	ldrb	r1, [r1, #0]
   12334:	f7ff fea4 	bl	12080 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12338:	4606      	mov	r6, r0
   1233a:	b1b0      	cbz	r0, 1236a <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   1233c:	2108      	movs	r1, #8
   1233e:	4408      	add	r0, r1
   12340:	f005 fb66 	bl	17a10 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12344:	8822      	ldrh	r2, [r4, #0]
   12346:	2105      	movs	r1, #5
   12348:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1234a:	8862      	ldrh	r2, [r4, #2]
   1234c:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1234e:	88a2      	ldrh	r2, [r4, #4]
   12350:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   12352:	88e2      	ldrh	r2, [r4, #6]
   12354:	2400      	movs	r4, #0
   12356:	80c2      	strh	r2, [r0, #6]
   12358:	4623      	mov	r3, r4
   1235a:	4632      	mov	r2, r6
   1235c:	4628      	mov	r0, r5
   1235e:	9400      	str	r4, [sp, #0]
   12360:	f00c fd49 	bl	1edf6 <bt_l2cap_send_cb>
	return 0;
   12364:	4620      	mov	r0, r4
}
   12366:	b002      	add	sp, #8
   12368:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1236a:	f06f 000b 	mvn.w	r0, #11
   1236e:	e7fa      	b.n	12366 <bt_l2cap_update_conn_param+0x4e>
   12370:	2000b797 	.word	0x2000b797

00012374 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   12374:	4b02      	ldr	r3, [pc, #8]	; (12380 <att_cfm_sent+0xc>)
   12376:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1237a:	f00c bd9f 	b.w	1eebc <att_sent>
   1237e:	bf00      	nop
   12380:	0001f2cb 	.word	0x0001f2cb

00012384 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   12384:	4b02      	ldr	r3, [pc, #8]	; (12390 <att_rsp_sent+0xc>)
   12386:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1238a:	f00c bd97 	b.w	1eebc <att_sent>
   1238e:	bf00      	nop
   12390:	0001f2b7 	.word	0x0001f2b7

00012394 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   12394:	4b02      	ldr	r3, [pc, #8]	; (123a0 <att_req_sent+0xc>)
   12396:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1239a:	f00c bd8f 	b.w	1eebc <att_sent>
   1239e:	bf00      	nop
   123a0:	00012551 	.word	0x00012551

000123a4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   123a4:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   123a6:	7b43      	ldrb	r3, [r0, #13]
   123a8:	2b07      	cmp	r3, #7
   123aa:	d005      	beq.n	123b8 <att_get+0x14>
		BT_WARN("Not connected");
   123ac:	2157      	movs	r1, #87	; 0x57
   123ae:	480e      	ldr	r0, [pc, #56]	; (123e8 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   123b0:	f00a fbae 	bl	1cb10 <printk>
		return NULL;
   123b4:	2400      	movs	r4, #0
   123b6:	e008      	b.n	123ca <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   123b8:	2104      	movs	r1, #4
   123ba:	f00c fd5c 	bl	1ee76 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   123be:	4604      	mov	r4, r0
   123c0:	b928      	cbnz	r0, 123ce <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   123c2:	2145      	movs	r1, #69	; 0x45
   123c4:	4809      	ldr	r0, [pc, #36]	; (123ec <att_get+0x48>)
   123c6:	f00a fba3 	bl	1cb10 <printk>
	}

	return att_chan->att;
}
   123ca:	4620      	mov	r0, r4
   123cc:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   123ce:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   123d2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   123d6:	075b      	lsls	r3, r3, #29
   123d8:	d502      	bpl.n	123e0 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   123da:	2157      	movs	r1, #87	; 0x57
   123dc:	4804      	ldr	r0, [pc, #16]	; (123f0 <att_get+0x4c>)
   123de:	e7e7      	b.n	123b0 <att_get+0xc>
	return att_chan->att;
   123e0:	f850 4c08 	ldr.w	r4, [r0, #-8]
   123e4:	e7f1      	b.n	123ca <att_get+0x26>
   123e6:	bf00      	nop
   123e8:	000250d6 	.word	0x000250d6
   123ec:	000250e9 	.word	0x000250e9
   123f0:	00025109 	.word	0x00025109

000123f4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   123f4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   123f6:	3808      	subs	r0, #8
   123f8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   123fa:	a901      	add	r1, sp, #4
   123fc:	4802      	ldr	r0, [pc, #8]	; (12408 <bt_att_released+0x14>)
   123fe:	f007 fec5 	bl	1a18c <k_mem_slab_free>
}
   12402:	b003      	add	sp, #12
   12404:	f85d fb04 	ldr.w	pc, [sp], #4
   12408:	200084d8 	.word	0x200084d8

0001240c <find_type_cb>:
{
   1240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12410:	f642 0301 	movw	r3, #10241	; 0x2801
   12414:	2500      	movs	r5, #0
{
   12416:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   12418:	f8d2 9000 	ldr.w	r9, [r2]
{
   1241c:	4607      	mov	r7, r0
   1241e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12420:	6800      	ldr	r0, [r0, #0]
   12422:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   12424:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   12428:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1242a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1242e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   12432:	f00c f8c0 	bl	1e5b6 <bt_uuid_cmp>
   12436:	2800      	cmp	r0, #0
   12438:	d060      	beq.n	124fc <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1243a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1243e:	6838      	ldr	r0, [r7, #0]
   12440:	a90b      	add	r1, sp, #44	; 0x2c
   12442:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   12446:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1244a:	f00c f8b4 	bl	1e5b6 <bt_uuid_cmp>
   1244e:	b138      	cbz	r0, 12460 <find_type_cb+0x54>
		if (data->group &&
   12450:	68a3      	ldr	r3, [r4, #8]
   12452:	b11b      	cbz	r3, 1245c <find_type_cb+0x50>
   12454:	885a      	ldrh	r2, [r3, #2]
   12456:	42b2      	cmp	r2, r6
   12458:	d200      	bcs.n	1245c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1245a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1245c:	2001      	movs	r0, #1
   1245e:	e009      	b.n	12474 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   12460:	6861      	ldr	r1, [r4, #4]
   12462:	4608      	mov	r0, r1
   12464:	f00c fd22 	bl	1eeac <net_buf_frags_len>
   12468:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1246c:	1a1b      	subs	r3, r3, r0
   1246e:	2b03      	cmp	r3, #3
   12470:	d803      	bhi.n	1247a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   12472:	2000      	movs	r0, #0
}
   12474:	b011      	add	sp, #68	; 0x44
   12476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1247a:	4608      	mov	r0, r1
   1247c:	f005 fa0e 	bl	1789c <net_buf_frag_last>
   12480:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   12482:	6860      	ldr	r0, [r4, #4]
   12484:	f00c fd12 	bl	1eeac <net_buf_frags_len>
   12488:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1248c:	f105 0b08 	add.w	fp, r5, #8
   12490:	ebaa 0a00 	sub.w	sl, sl, r0
   12494:	4658      	mov	r0, fp
   12496:	f00e f97b 	bl	20790 <net_buf_simple_tailroom>
   1249a:	4582      	cmp	sl, r0
   1249c:	d231      	bcs.n	12502 <find_type_cb+0xf6>
   1249e:	6860      	ldr	r0, [r4, #4]
   124a0:	f00c fd04 	bl	1eeac <net_buf_frags_len>
   124a4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   124a8:	1a18      	subs	r0, r3, r0
	if (!len) {
   124aa:	b970      	cbnz	r0, 124ca <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   124ac:	6863      	ldr	r3, [r4, #4]
   124ae:	7998      	ldrb	r0, [r3, #6]
   124b0:	f005 f818 	bl	174e4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   124b4:	2200      	movs	r2, #0
   124b6:	2300      	movs	r3, #0
   124b8:	f00e f944 	bl	20744 <net_buf_alloc_fixed>
		if (!frag) {
   124bc:	4605      	mov	r5, r0
   124be:	2800      	cmp	r0, #0
   124c0:	d0d7      	beq.n	12472 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   124c2:	4601      	mov	r1, r0
   124c4:	6860      	ldr	r0, [r4, #4]
   124c6:	f005 fa29 	bl	1791c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   124ca:	2300      	movs	r3, #0
   124cc:	9300      	str	r3, [sp, #0]
   124ce:	4639      	mov	r1, r7
   124d0:	f8d7 9004 	ldr.w	r9, [r7, #4]
   124d4:	2310      	movs	r3, #16
   124d6:	4640      	mov	r0, r8
   124d8:	aa02      	add	r2, sp, #8
   124da:	47c8      	blx	r9
	if (read < 0) {
   124dc:	1e07      	subs	r7, r0, #0
   124de:	db0d      	blt.n	124fc <find_type_cb+0xf0>
	if (read != data->value_len) {
   124e0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   124e2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   124e4:	42ba      	cmp	r2, r7
   124e6:	d02b      	beq.n	12540 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   124e8:	4601      	mov	r1, r0
   124ea:	a80b      	add	r0, sp, #44	; 0x2c
   124ec:	f00c f891 	bl	1e612 <bt_uuid_create>
   124f0:	b958      	cbnz	r0, 1250a <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   124f2:	2157      	movs	r1, #87	; 0x57
   124f4:	7c22      	ldrb	r2, [r4, #16]
   124f6:	4814      	ldr	r0, [pc, #80]	; (12548 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   124f8:	f00a fb0a 	bl	1cb10 <printk>
	data->group = NULL;
   124fc:	2300      	movs	r3, #0
   124fe:	60a3      	str	r3, [r4, #8]
   12500:	e7ac      	b.n	1245c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   12502:	4658      	mov	r0, fp
   12504:	f00e f944 	bl	20790 <net_buf_simple_tailroom>
   12508:	e7cf      	b.n	124aa <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1250a:	b2fa      	uxtb	r2, r7
   1250c:	a902      	add	r1, sp, #8
   1250e:	a806      	add	r0, sp, #24
   12510:	f00c f87f 	bl	1e612 <bt_uuid_create>
   12514:	b918      	cbnz	r0, 1251e <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   12516:	463a      	mov	r2, r7
   12518:	2157      	movs	r1, #87	; 0x57
   1251a:	480c      	ldr	r0, [pc, #48]	; (1254c <find_type_cb+0x140>)
   1251c:	e7ec      	b.n	124f8 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1251e:	a906      	add	r1, sp, #24
   12520:	a80b      	add	r0, sp, #44	; 0x2c
   12522:	f00c f848 	bl	1e5b6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   12526:	2800      	cmp	r0, #0
   12528:	d1e8      	bne.n	124fc <find_type_cb+0xf0>
	data->err = 0x00;
   1252a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1252c:	2104      	movs	r1, #4
   1252e:	7463      	strb	r3, [r4, #17]
   12530:	f105 0008 	add.w	r0, r5, #8
   12534:	f005 fa6c 	bl	17a10 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   12538:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1253a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1253c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1253e:	e78d      	b.n	1245c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   12540:	a902      	add	r1, sp, #8
   12542:	f00b ff8c 	bl	1e45e <memcmp>
   12546:	e7ee      	b.n	12526 <find_type_cb+0x11a>
   12548:	00025132 	.word	0x00025132
   1254c:	00025156 	.word	0x00025156

00012550 <chan_req_sent>:
	if (chan->req) {
   12550:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   12554:	b13b      	cbz	r3, 12566 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12556:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   1255a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1255e:	2300      	movs	r3, #0
   12560:	4801      	ldr	r0, [pc, #4]	; (12568 <chan_req_sent+0x18>)
   12562:	f009 bb77 	b.w	1bc54 <k_delayed_work_submit_to_queue>
}
   12566:	4770      	bx	lr
   12568:	20009638 	.word	0x20009638

0001256c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1256c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1256e:	2300      	movs	r3, #0
{
   12570:	4606      	mov	r6, r0
   12572:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12574:	2200      	movs	r2, #0
   12576:	4669      	mov	r1, sp
   12578:	4823      	ldr	r0, [pc, #140]	; (12608 <bt_att_accept+0x9c>)
   1257a:	f007 fdad 	bl	1a0d8 <k_mem_slab_alloc>
   1257e:	4604      	mov	r4, r0
   12580:	b148      	cbz	r0, 12596 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   12582:	4632      	mov	r2, r6
   12584:	2145      	movs	r1, #69	; 0x45
   12586:	4821      	ldr	r0, [pc, #132]	; (1260c <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12588:	f00a fac2 	bl	1cb10 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1258c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   12590:	4620      	mov	r0, r4
   12592:	b003      	add	sp, #12
   12594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   12596:	4601      	mov	r1, r0
   12598:	2230      	movs	r2, #48	; 0x30
   1259a:	9800      	ldr	r0, [sp, #0]
   1259c:	f00b ff9b 	bl	1e4d6 <memset>
	att->conn = conn;
   125a0:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   125a2:	2200      	movs	r2, #0
	list->head = NULL;
   125a4:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   125a8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   125ac:	60ac      	str	r4, [r5, #8]
   125ae:	2300      	movs	r3, #0
   125b0:	4817      	ldr	r0, [pc, #92]	; (12610 <bt_att_accept+0xa4>)
   125b2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   125b4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   125b6:	f007 fd8f 	bl	1a0d8 <k_mem_slab_alloc>
   125ba:	4604      	mov	r4, r0
   125bc:	b118      	cbz	r0, 125c6 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   125be:	2145      	movs	r1, #69	; 0x45
   125c0:	682a      	ldr	r2, [r5, #0]
   125c2:	4814      	ldr	r0, [pc, #80]	; (12614 <bt_att_accept+0xa8>)
   125c4:	e7e0      	b.n	12588 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   125c6:	4601      	mov	r1, r0
   125c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   125cc:	9801      	ldr	r0, [sp, #4]
   125ce:	f00b ff82 	bl	1e4d6 <memset>
	chan->chan.chan.ops = &ops;
   125d2:	9801      	ldr	r0, [sp, #4]
   125d4:	4b10      	ldr	r3, [pc, #64]	; (12618 <bt_att_accept+0xac>)
   125d6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   125d8:	30d0      	adds	r0, #208	; 0xd0
   125da:	f00e ff9c 	bl	21516 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   125de:	9801      	ldr	r0, [sp, #4]
   125e0:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   125e4:	2203      	movs	r2, #3
   125e6:	4611      	mov	r1, r2
   125e8:	f00e fffa 	bl	215e0 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   125ec:	9b01      	ldr	r3, [sp, #4]
   125ee:	33c8      	adds	r3, #200	; 0xc8
   125f0:	e8d3 2fef 	ldaex	r2, [r3]
   125f4:	e8c3 4fe1 	stlex	r1, r4, [r3]
   125f8:	2900      	cmp	r1, #0
   125fa:	d1f9      	bne.n	125f0 <bt_att_accept+0x84>
	chan->att = att;
   125fc:	9b01      	ldr	r3, [sp, #4]
   125fe:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   12602:	603b      	str	r3, [r7, #0]
	return 0;
   12604:	e7c4      	b.n	12590 <bt_att_accept+0x24>
   12606:	bf00      	nop
   12608:	200084bc 	.word	0x200084bc
   1260c:	0002517a 	.word	0x0002517a
   12610:	200084d8 	.word	0x200084d8
   12614:	000251a4 	.word	0x000251a4
   12618:	20008338 	.word	0x20008338

0001261c <chan_cb.isra.0>:
static bt_att_chan_sent_t chan_cb(struct net_buf *buf)
   1261c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   1261e:	7800      	ldrb	r0, [r0, #0]
   12620:	f00c fc64 	bl	1eeec <att_op_get_type>
   12624:	3801      	subs	r0, #1
   12626:	b2c0      	uxtb	r0, r0
   12628:	2804      	cmp	r0, #4
   1262a:	bf96      	itet	ls
   1262c:	4b02      	ldrls	r3, [pc, #8]	; (12638 <chan_cb.isra.0+0x1c>)
   1262e:	2000      	movhi	r0, #0
   12630:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
   12634:	bd08      	pop	{r3, pc}
   12636:	bf00      	nop
   12638:	000222f8 	.word	0x000222f8

0001263c <read_group_cb>:
{
   1263c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12640:	f04f 0800 	mov.w	r8, #0
   12644:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   12648:	4605      	mov	r5, r0
   1264a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1264c:	6800      	ldr	r0, [r0, #0]
   1264e:	a902      	add	r1, sp, #8
{
   12650:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   12652:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12654:	f88d 8008 	strb.w	r8, [sp, #8]
   12658:	f8ad 300a 	strh.w	r3, [sp, #10]
   1265c:	f00b ffab 	bl	1e5b6 <bt_uuid_cmp>
   12660:	b1a0      	cbz	r0, 1268c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12662:	f642 0301 	movw	r3, #10241	; 0x2801
   12666:	6828      	ldr	r0, [r5, #0]
   12668:	a903      	add	r1, sp, #12
   1266a:	f88d 800c 	strb.w	r8, [sp, #12]
   1266e:	f8ad 300e 	strh.w	r3, [sp, #14]
   12672:	f00b ffa0 	bl	1e5b6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12676:	b148      	cbz	r0, 1268c <read_group_cb+0x50>
		if (data->group &&
   12678:	6923      	ldr	r3, [r4, #16]
   1267a:	b11b      	cbz	r3, 12684 <read_group_cb+0x48>
   1267c:	885a      	ldrh	r2, [r3, #2]
   1267e:	42b2      	cmp	r2, r6
   12680:	d200      	bcs.n	12684 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   12682:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   12684:	2001      	movs	r0, #1
}
   12686:	b004      	add	sp, #16
   12688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1268c:	6861      	ldr	r1, [r4, #4]
   1268e:	6828      	ldr	r0, [r5, #0]
   12690:	f00b ff91 	bl	1e5b6 <bt_uuid_cmp>
   12694:	b110      	cbz	r0, 1269c <read_group_cb+0x60>
		data->group = NULL;
   12696:	2300      	movs	r3, #0
   12698:	6123      	str	r3, [r4, #16]
   1269a:	e7f3      	b.n	12684 <read_group_cb+0x48>
	if (data->rsp->len &&
   1269c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1269e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   126a0:	781a      	ldrb	r2, [r3, #0]
   126a2:	b13a      	cbz	r2, 126b4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   126a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   126a8:	8981      	ldrh	r1, [r0, #12]
   126aa:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   126ac:	4293      	cmp	r3, r2
   126ae:	da01      	bge.n	126b4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   126b0:	2000      	movs	r0, #0
   126b2:	e7e8      	b.n	12686 <read_group_cb+0x4a>
   126b4:	2104      	movs	r1, #4
   126b6:	3008      	adds	r0, #8
   126b8:	f005 f9aa 	bl	17a10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   126bc:	4b09      	ldr	r3, [pc, #36]	; (126e4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   126be:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   126c0:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   126c2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   126c4:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   126c6:	68a2      	ldr	r2, [r4, #8]
   126c8:	9300      	str	r3, [sp, #0]
   126ca:	4638      	mov	r0, r7
   126cc:	2300      	movs	r3, #0
   126ce:	9401      	str	r4, [sp, #4]
   126d0:	f00c fce7 	bl	1f0a2 <att_chan_read>
	if (read < 0) {
   126d4:	2800      	cmp	r0, #0
   126d6:	dbeb      	blt.n	126b0 <read_group_cb+0x74>
	if (!data->group) {
   126d8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   126da:	3800      	subs	r0, #0
   126dc:	bf18      	it	ne
   126de:	2001      	movne	r0, #1
   126e0:	e7d1      	b.n	12686 <read_group_cb+0x4a>
   126e2:	bf00      	nop
   126e4:	0001f027 	.word	0x0001f027

000126e8 <chan_send>:
{
   126e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126ec:	688b      	ldr	r3, [r1, #8]
{
   126ee:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126f0:	781b      	ldrb	r3, [r3, #0]
{
   126f2:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126f4:	2bd2      	cmp	r3, #210	; 0xd2
{
   126f6:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126f8:	d110      	bne.n	1271c <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   126fa:	6803      	ldr	r3, [r0, #0]
   126fc:	6818      	ldr	r0, [r3, #0]
   126fe:	f00d ff64 	bl	205ca <bt_smp_sign>
		if (err) {
   12702:	4606      	mov	r6, r0
   12704:	b150      	cbz	r0, 1271c <chan_send+0x34>
			BT_ERR("Error signing data");
   12706:	2145      	movs	r1, #69	; 0x45
   12708:	481f      	ldr	r0, [pc, #124]	; (12788 <chan_send+0xa0>)
   1270a:	f00a fa01 	bl	1cb10 <printk>
		net_buf_unref(buf);
   1270e:	4620      	mov	r0, r4
   12710:	f005 f868 	bl	177e4 <net_buf_unref>
}
   12714:	4630      	mov	r0, r6
   12716:	b003      	add	sp, #12
   12718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1271c:	f104 0008 	add.w	r0, r4, #8
   12720:	f00e f832 	bl	20788 <net_buf_simple_headroom>
	state->len = buf->len;
   12724:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   12728:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1272a:	b91f      	cbnz	r7, 12734 <chan_send+0x4c>
   1272c:	68a0      	ldr	r0, [r4, #8]
   1272e:	f7ff ff75 	bl	1261c <chan_cb.isra.0>
   12732:	4607      	mov	r7, r0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12734:	682b      	ldr	r3, [r5, #0]
   12736:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   12738:	f8c5 7138 	str.w	r7, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1273c:	681e      	ldr	r6, [r3, #0]
   1273e:	f005 f895 	bl	1786c <net_buf_ref>
   12742:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   12746:	4b11      	ldr	r3, [pc, #68]	; (1278c <chan_send+0xa4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12748:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   1274a:	4299      	cmp	r1, r3
   1274c:	d018      	beq.n	12780 <chan_send+0x98>
	} else if (cb == chan_cfm_sent) {
   1274e:	4b10      	ldr	r3, [pc, #64]	; (12790 <chan_send+0xa8>)
   12750:	4299      	cmp	r1, r3
   12752:	d017      	beq.n	12784 <chan_send+0x9c>
		return att_sent;
   12754:	4f0f      	ldr	r7, [pc, #60]	; (12794 <chan_send+0xac>)
   12756:	4b10      	ldr	r3, [pc, #64]	; (12798 <chan_send+0xb0>)
   12758:	4810      	ldr	r0, [pc, #64]	; (1279c <chan_send+0xb4>)
   1275a:	42b9      	cmp	r1, r7
   1275c:	bf18      	it	ne
   1275e:	4603      	movne	r3, r0
				&chan->chan.chan);
   12760:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12762:	4630      	mov	r0, r6
   12764:	2104      	movs	r1, #4
   12766:	9500      	str	r5, [sp, #0]
   12768:	f00c fb45 	bl	1edf6 <bt_l2cap_send_cb>
	if (!err) {
   1276c:	4606      	mov	r6, r0
   1276e:	2800      	cmp	r0, #0
   12770:	d0cd      	beq.n	1270e <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   12772:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12774:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12778:	fa10 f088 	uxtah	r0, r0, r8
   1277c:	60a0      	str	r0, [r4, #8]
}
   1277e:	e7c9      	b.n	12714 <chan_send+0x2c>
		return att_rsp_sent;
   12780:	4b07      	ldr	r3, [pc, #28]	; (127a0 <chan_send+0xb8>)
   12782:	e7ed      	b.n	12760 <chan_send+0x78>
		return att_cfm_sent;
   12784:	4b07      	ldr	r3, [pc, #28]	; (127a4 <chan_send+0xbc>)
   12786:	e7eb      	b.n	12760 <chan_send+0x78>
   12788:	000251ce 	.word	0x000251ce
   1278c:	0001f2b7 	.word	0x0001f2b7
   12790:	0001f2cb 	.word	0x0001f2cb
   12794:	00012551 	.word	0x00012551
   12798:	00012395 	.word	0x00012395
   1279c:	0001eebd 	.word	0x0001eebd
   127a0:	00012385 	.word	0x00012385
   127a4:	00012375 	.word	0x00012375

000127a8 <bt_att_chan_req_send>:
{
   127a8:	b570      	push	{r4, r5, r6, lr}
   127aa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   127ac:	4604      	mov	r4, r0
   127ae:	b950      	cbnz	r0, 127c6 <bt_att_chan_req_send+0x1e>
   127b0:	4924      	ldr	r1, [pc, #144]	; (12844 <bt_att_chan_req_send+0x9c>)
   127b2:	4825      	ldr	r0, [pc, #148]	; (12848 <bt_att_chan_req_send+0xa0>)
   127b4:	f240 224f 	movw	r2, #591	; 0x24f
   127b8:	f00a f9aa 	bl	1cb10 <printk>
   127bc:	f240 214f 	movw	r1, #591	; 0x24f
   127c0:	4820      	ldr	r0, [pc, #128]	; (12844 <bt_att_chan_req_send+0x9c>)
   127c2:	f00a fc4b 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(req);
   127c6:	b955      	cbnz	r5, 127de <bt_att_chan_req_send+0x36>
   127c8:	491e      	ldr	r1, [pc, #120]	; (12844 <bt_att_chan_req_send+0x9c>)
   127ca:	481f      	ldr	r0, [pc, #124]	; (12848 <bt_att_chan_req_send+0xa0>)
   127cc:	f44f 7214 	mov.w	r2, #592	; 0x250
   127d0:	f00a f99e 	bl	1cb10 <printk>
   127d4:	f44f 7114 	mov.w	r1, #592	; 0x250
   127d8:	481a      	ldr	r0, [pc, #104]	; (12844 <bt_att_chan_req_send+0x9c>)
   127da:	f00a fc3f 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   127de:	686b      	ldr	r3, [r5, #4]
   127e0:	b953      	cbnz	r3, 127f8 <bt_att_chan_req_send+0x50>
   127e2:	4918      	ldr	r1, [pc, #96]	; (12844 <bt_att_chan_req_send+0x9c>)
   127e4:	4818      	ldr	r0, [pc, #96]	; (12848 <bt_att_chan_req_send+0xa0>)
   127e6:	f240 2251 	movw	r2, #593	; 0x251
   127ea:	f00a f991 	bl	1cb10 <printk>
   127ee:	f240 2151 	movw	r1, #593	; 0x251
   127f2:	4814      	ldr	r0, [pc, #80]	; (12844 <bt_att_chan_req_send+0x9c>)
   127f4:	f00a fc32 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   127f8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   127fc:	b153      	cbz	r3, 12814 <bt_att_chan_req_send+0x6c>
   127fe:	4911      	ldr	r1, [pc, #68]	; (12844 <bt_att_chan_req_send+0x9c>)
   12800:	4811      	ldr	r0, [pc, #68]	; (12848 <bt_att_chan_req_send+0xa0>)
   12802:	f240 2252 	movw	r2, #594	; 0x252
   12806:	f00a f983 	bl	1cb10 <printk>
   1280a:	f240 2152 	movw	r1, #594	; 0x252
   1280e:	480d      	ldr	r0, [pc, #52]	; (12844 <bt_att_chan_req_send+0x9c>)
   12810:	f00a fc24 	bl	1d05c <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   12814:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   12818:	2200      	movs	r2, #0
   1281a:	2300      	movs	r3, #0
   1281c:	4630      	mov	r0, r6
   1281e:	f008 fff3 	bl	1b808 <z_impl_k_sem_take>
   12822:	2800      	cmp	r0, #0
   12824:	db0a      	blt.n	1283c <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   12826:	4620      	mov	r0, r4
   12828:	4629      	mov	r1, r5
   1282a:	f00c fcdf 	bl	1f1ec <chan_req_send>
	if (err < 0) {
   1282e:	1e04      	subs	r4, r0, #0
   12830:	da02      	bge.n	12838 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   12832:	4630      	mov	r0, r6
   12834:	f008 ffac 	bl	1b790 <z_impl_k_sem_give>
}
   12838:	4620      	mov	r0, r4
   1283a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1283c:	f06f 040a 	mvn.w	r4, #10
   12840:	e7fa      	b.n	12838 <bt_att_chan_req_send+0x90>
   12842:	bf00      	nop
   12844:	000251e6 	.word	0x000251e6
   12848:	00022f17 	.word	0x00022f17

0001284c <read_type_cb>:
{
   1284c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   12850:	f8d2 8000 	ldr.w	r8, [r2]
{
   12854:	4606      	mov	r6, r0
   12856:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12858:	6800      	ldr	r0, [r0, #0]
   1285a:	6851      	ldr	r1, [r2, #4]
{
   1285c:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1285e:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12862:	f00b fea8 	bl	1e5b6 <bt_uuid_cmp>
   12866:	4607      	mov	r7, r0
   12868:	2800      	cmp	r0, #0
   1286a:	d13e      	bne.n	128ea <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1286c:	4628      	mov	r0, r5
   1286e:	2215      	movs	r2, #21
   12870:	4631      	mov	r1, r6
   12872:	f00d f982 	bl	1fb7a <bt_gatt_check_perm>
   12876:	4605      	mov	r5, r0
   12878:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1287a:	b148      	cbz	r0, 12890 <read_type_cb+0x44>
		if (data->rsp->len) {
   1287c:	68e3      	ldr	r3, [r4, #12]
   1287e:	781b      	ldrb	r3, [r3, #0]
   12880:	b923      	cbnz	r3, 1288c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   12882:	2500      	movs	r5, #0
}
   12884:	4628      	mov	r0, r5
   12886:	b003      	add	sp, #12
   12888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1288c:	7527      	strb	r7, [r4, #20]
   1288e:	e7f8      	b.n	12882 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12890:	68a0      	ldr	r0, [r4, #8]
   12892:	f005 f803 	bl	1789c <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   12896:	2102      	movs	r1, #2
   12898:	3008      	adds	r0, #8
   1289a:	f005 f8b9 	bl	17a10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1289e:	4b14      	ldr	r3, [pc, #80]	; (128f0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   128a0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   128a2:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   128a4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   128a8:	68a2      	ldr	r2, [r4, #8]
   128aa:	9300      	str	r3, [sp, #0]
   128ac:	4640      	mov	r0, r8
   128ae:	462b      	mov	r3, r5
   128b0:	9401      	str	r4, [sp, #4]
   128b2:	f00c fbf6 	bl	1f0a2 <att_chan_read>
	if (read < 0) {
   128b6:	2800      	cmp	r0, #0
   128b8:	da07      	bge.n	128ca <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   128ba:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   128be:	bf32      	itee	cc
   128c0:	200e      	movcc	r0, #14
		return -err;
   128c2:	4240      	negcs	r0, r0
   128c4:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   128c6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   128c8:	e7dc      	b.n	12884 <read_type_cb+0x38>
	if (!data->item) {
   128ca:	6923      	ldr	r3, [r4, #16]
   128cc:	2b00      	cmp	r3, #0
   128ce:	d0d8      	beq.n	12882 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   128d0:	68a0      	ldr	r0, [r4, #8]
   128d2:	f00c faeb 	bl	1eeac <net_buf_frags_len>
   128d6:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   128da:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   128dc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   128de:	7818      	ldrb	r0, [r3, #0]
   128e0:	4285      	cmp	r5, r0
   128e2:	bf94      	ite	ls
   128e4:	2500      	movls	r5, #0
   128e6:	2501      	movhi	r5, #1
   128e8:	e7cc      	b.n	12884 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   128ea:	2501      	movs	r5, #1
   128ec:	e7ca      	b.n	12884 <read_type_cb+0x38>
   128ee:	bf00      	nop
   128f0:	0001eec9 	.word	0x0001eec9

000128f4 <bt_att_connected>:
{
   128f4:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   128f6:	2104      	movs	r1, #4
{
   128f8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   128fa:	6800      	ldr	r0, [r0, #0]
   128fc:	f00c faab 	bl	1ee56 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   12900:	4605      	mov	r5, r0
   12902:	b950      	cbnz	r0, 1291a <bt_att_connected+0x26>
   12904:	4919      	ldr	r1, [pc, #100]	; (1296c <bt_att_connected+0x78>)
   12906:	481a      	ldr	r0, [pc, #104]	; (12970 <bt_att_connected+0x7c>)
   12908:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   1290c:	f00a f900 	bl	1cb10 <printk>
   12910:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   12914:	4815      	ldr	r0, [pc, #84]	; (1296c <bt_att_connected+0x78>)
   12916:	f00a fba1 	bl	1d05c <assert_post_action>
	struct bt_att *att = att_chan->att;
   1291a:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1291e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12920:	b91b      	cbnz	r3, 1292a <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   12922:	f105 000c 	add.w	r0, r5, #12
   12926:	f00e fdf6 	bl	21516 <z_impl_k_queue_init>
	parent->next = child;
   1292a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1292c:	f504 739a 	add.w	r3, r4, #308	; 0x134
   12930:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   12934:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   12936:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   12938:	b902      	cbnz	r2, 1293c <bt_att_connected+0x48>
	list->tail = node;
   1293a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1293c:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   12940:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   12944:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   12946:	bf58      	it	pl
   12948:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1294a:	f04f 0230 	mov.w	r2, #48	; 0x30
   1294e:	bf5c      	itt	pl
   12950:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   12954:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   12958:	2100      	movs	r1, #0
   1295a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   1295e:	f00b fdba 	bl	1e4d6 <memset>
   12962:	4b04      	ldr	r3, [pc, #16]	; (12974 <bt_att_connected+0x80>)
   12964:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   12968:	bd38      	pop	{r3, r4, r5, pc}
   1296a:	bf00      	nop
   1296c:	000251e6 	.word	0x000251e6
   12970:	00022f17 	.word	0x00022f17
   12974:	000132cd 	.word	0x000132cd

00012978 <bt_att_chan_create_pdu>:
{
   12978:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1297a:	1c53      	adds	r3, r2, #1
   1297c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   12980:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12982:	4293      	cmp	r3, r2
   12984:	d906      	bls.n	12994 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   12986:	2157      	movs	r1, #87	; 0x57
   12988:	4813      	ldr	r0, [pc, #76]	; (129d8 <bt_att_chan_create_pdu+0x60>)
   1298a:	f00a f8c1 	bl	1cb10 <printk>
		return NULL;
   1298e:	2400      	movs	r4, #0
}
   12990:	4620      	mov	r0, r4
   12992:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   12994:	4608      	mov	r0, r1
   12996:	f00c faa9 	bl	1eeec <att_op_get_type>
   1299a:	2802      	cmp	r0, #2
   1299c:	d001      	beq.n	129a2 <bt_att_chan_create_pdu+0x2a>
   1299e:	2804      	cmp	r0, #4
   129a0:	d10e      	bne.n	129c0 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   129a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   129a6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   129a8:	2100      	movs	r1, #0
   129aa:	4608      	mov	r0, r1
   129ac:	f00c fa20 	bl	1edf0 <bt_l2cap_create_pdu_timeout>
   129b0:	4604      	mov	r4, r0
	if (!buf) {
   129b2:	b950      	cbnz	r0, 129ca <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   129b4:	462a      	mov	r2, r5
   129b6:	2145      	movs	r1, #69	; 0x45
   129b8:	4808      	ldr	r0, [pc, #32]	; (129dc <bt_att_chan_create_pdu+0x64>)
   129ba:	f00a f8a9 	bl	1cb10 <printk>
		return NULL;
   129be:	e7e7      	b.n	12990 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   129c0:	f04f 32ff 	mov.w	r2, #4294967295
   129c4:	f04f 33ff 	mov.w	r3, #4294967295
   129c8:	e7ee      	b.n	129a8 <bt_att_chan_create_pdu+0x30>
   129ca:	2101      	movs	r1, #1
   129cc:	3008      	adds	r0, #8
   129ce:	f005 f81f 	bl	17a10 <net_buf_simple_add>
	hdr->code = op;
   129d2:	7005      	strb	r5, [r0, #0]
	return buf;
   129d4:	e7dc      	b.n	12990 <bt_att_chan_create_pdu+0x18>
   129d6:	bf00      	nop
   129d8:	00025215 	.word	0x00025215
   129dc:	00024f2c 	.word	0x00024f2c

000129e0 <att_indicate>:
{
   129e0:	b570      	push	{r4, r5, r6, lr}
   129e2:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   129e4:	f101 0008 	add.w	r0, r1, #8
   129e8:	460d      	mov	r5, r1
   129ea:	f00d fec5 	bl	20778 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   129ee:	6826      	ldr	r6, [r4, #0]
   129f0:	4601      	mov	r1, r0
   129f2:	89ab      	ldrh	r3, [r5, #12]
   129f4:	68aa      	ldr	r2, [r5, #8]
   129f6:	6830      	ldr	r0, [r6, #0]
   129f8:	f00d f956 	bl	1fca8 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   129fc:	211e      	movs	r1, #30
   129fe:	2200      	movs	r2, #0
   12a00:	4620      	mov	r0, r4
   12a02:	f7ff ffb9 	bl	12978 <bt_att_chan_create_pdu>
	if (!buf) {
   12a06:	4601      	mov	r1, r0
   12a08:	b118      	cbz	r0, 12a12 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   12a0a:	4620      	mov	r0, r4
   12a0c:	4a02      	ldr	r2, [pc, #8]	; (12a18 <att_indicate+0x38>)
   12a0e:	f00c fc2a 	bl	1f266 <bt_att_chan_send_rsp>
}
   12a12:	2000      	movs	r0, #0
   12a14:	bd70      	pop	{r4, r5, r6, pc}
   12a16:	bf00      	nop
   12a18:	0001f2cb 	.word	0x0001f2cb

00012a1c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   12a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a20:	4688      	mov	r8, r1
   12a22:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12a24:	2101      	movs	r1, #1
   12a26:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   12a28:	4605      	mov	r5, r0
   12a2a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12a2c:	f7ff ffa4 	bl	12978 <bt_att_chan_create_pdu>
	if (!buf) {
   12a30:	4604      	mov	r4, r0
   12a32:	b178      	cbz	r0, 12a54 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   12a34:	2104      	movs	r1, #4
   12a36:	3008      	adds	r0, #8
   12a38:	f004 ffea 	bl	17a10 <net_buf_simple_add>
	rsp->request = req;
   12a3c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   12a40:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   12a42:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12a46:	4621      	mov	r1, r4
   12a48:	4628      	mov	r0, r5
}
   12a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12a4e:	4a02      	ldr	r2, [pc, #8]	; (12a58 <send_err_rsp.part.0+0x3c>)
   12a50:	f00c bc09 	b.w	1f266 <bt_att_chan_send_rsp>
}
   12a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a58:	0001f2b7 	.word	0x0001f2b7

00012a5c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   12a5c:	898b      	ldrh	r3, [r1, #12]
{
   12a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a62:	4604      	mov	r4, r0
   12a64:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   12a66:	b933      	cbnz	r3, 12a76 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   12a68:	2145      	movs	r1, #69	; 0x45
   12a6a:	4838      	ldr	r0, [pc, #224]	; (12b4c <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   12a6c:	f00a f850 	bl	1cb10 <printk>
}
   12a70:	2000      	movs	r0, #0
   12a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12a76:	2101      	movs	r1, #1
   12a78:	f108 0008 	add.w	r0, r8, #8
   12a7c:	f004 ffaa 	bl	179d4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12a80:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12a84:	4605      	mov	r5, r0
   12a86:	2b00      	cmp	r3, #0
   12a88:	d0f2      	beq.n	12a70 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12a8a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12a8c:	7802      	ldrb	r2, [r0, #0]
   12a8e:	4930      	ldr	r1, [pc, #192]	; (12b50 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12a90:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   12a94:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   12a98:	4290      	cmp	r0, r2
   12a9a:	d114      	bne.n	12ac6 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   12a9c:	00d8      	lsls	r0, r3, #3
   12a9e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12aa2:	789f      	ldrb	r7, [r3, #2]
   12aa4:	2f01      	cmp	r7, #1
   12aa6:	d123      	bne.n	12af0 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12aa8:	34c0      	adds	r4, #192	; 0xc0
   12aaa:	e8d4 3fef 	ldaex	r3, [r4]
   12aae:	f043 0201 	orr.w	r2, r3, #1
   12ab2:	e8c4 2fec 	stlex	ip, r2, [r4]
   12ab6:	f1bc 0f00 	cmp.w	ip, #0
   12aba:	d1f6      	bne.n	12aaa <bt_att_recv+0x4e>
   12abc:	07da      	lsls	r2, r3, #31
   12abe:	d528      	bpl.n	12b12 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   12ac0:	2157      	movs	r1, #87	; 0x57
   12ac2:	4824      	ldr	r0, [pc, #144]	; (12b54 <bt_att_recv+0xf8>)
   12ac4:	e7d2      	b.n	12a6c <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12ac6:	3301      	adds	r3, #1
   12ac8:	2b1c      	cmp	r3, #28
   12aca:	d1e3      	bne.n	12a94 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12acc:	2157      	movs	r1, #87	; 0x57
   12ace:	4822      	ldr	r0, [pc, #136]	; (12b58 <bt_att_recv+0xfc>)
   12ad0:	f00a f81e 	bl	1cb10 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12ad4:	7829      	ldrb	r1, [r5, #0]
   12ad6:	4608      	mov	r0, r1
   12ad8:	f00c fa08 	bl	1eeec <att_op_get_type>
   12adc:	2800      	cmp	r0, #0
   12ade:	d0c7      	beq.n	12a70 <bt_att_recv+0x14>
	if (!req) {
   12ae0:	2900      	cmp	r1, #0
   12ae2:	d0c5      	beq.n	12a70 <bt_att_recv+0x14>
   12ae4:	2306      	movs	r3, #6
   12ae6:	2200      	movs	r2, #0
   12ae8:	4630      	mov	r0, r6
   12aea:	f7ff ff97 	bl	12a1c <send_err_rsp.part.0>
   12aee:	e7bf      	b.n	12a70 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12af0:	2f05      	cmp	r7, #5
   12af2:	d10e      	bne.n	12b12 <bt_att_recv+0xb6>
   12af4:	34c0      	adds	r4, #192	; 0xc0
   12af6:	e8d4 3fef 	ldaex	r3, [r4]
   12afa:	f043 0202 	orr.w	r2, r3, #2
   12afe:	e8c4 2fec 	stlex	ip, r2, [r4]
   12b02:	f1bc 0f00 	cmp.w	ip, #0
   12b06:	d1f6      	bne.n	12af6 <bt_att_recv+0x9a>
   12b08:	079b      	lsls	r3, r3, #30
   12b0a:	d502      	bpl.n	12b12 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12b0c:	2157      	movs	r1, #87	; 0x57
   12b0e:	4813      	ldr	r0, [pc, #76]	; (12b5c <bt_att_recv+0x100>)
   12b10:	e7ac      	b.n	12a6c <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   12b12:	180b      	adds	r3, r1, r0
   12b14:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   12b18:	7859      	ldrb	r1, [r3, #1]
   12b1a:	4291      	cmp	r1, r2
   12b1c:	d908      	bls.n	12b30 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12b1e:	2145      	movs	r1, #69	; 0x45
   12b20:	782b      	ldrb	r3, [r5, #0]
   12b22:	480f      	ldr	r0, [pc, #60]	; (12b60 <bt_att_recv+0x104>)
   12b24:	f009 fff4 	bl	1cb10 <printk>
	if (handler->type == ATT_REQUEST && err) {
   12b28:	2f01      	cmp	r7, #1
   12b2a:	d1a1      	bne.n	12a70 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   12b2c:	2304      	movs	r3, #4
   12b2e:	e008      	b.n	12b42 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   12b30:	685b      	ldr	r3, [r3, #4]
   12b32:	4641      	mov	r1, r8
   12b34:	4630      	mov	r0, r6
   12b36:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12b38:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   12b3a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12b3c:	d198      	bne.n	12a70 <bt_att_recv+0x14>
   12b3e:	2800      	cmp	r0, #0
   12b40:	d096      	beq.n	12a70 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12b42:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   12b44:	2900      	cmp	r1, #0
   12b46:	d093      	beq.n	12a70 <bt_att_recv+0x14>
   12b48:	e7cd      	b.n	12ae6 <bt_att_recv+0x8a>
   12b4a:	bf00      	nop
   12b4c:	0002523f 	.word	0x0002523f
   12b50:	0002230c 	.word	0x0002230c
   12b54:	0002525f 	.word	0x0002525f
   12b58:	000252c8 	.word	0x000252c8
   12b5c:	00025280 	.word	0x00025280
   12b60:	000252a4 	.word	0x000252a4

00012b64 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b68:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b6a:	6803      	ldr	r3, [r0, #0]
   12b6c:	460e      	mov	r6, r1
   12b6e:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b70:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b72:	bf18      	it	ne
   12b74:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b76:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b78:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b7a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b7c:	f00d f8bf 	bl	1fcfe <bt_gatt_change_aware>
   12b80:	2800      	cmp	r0, #0
   12b82:	d04b      	beq.n	12c1c <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12b84:	2f00      	cmp	r7, #0
   12b86:	d04b      	beq.n	12c20 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12b88:	2218      	movs	r2, #24
   12b8a:	2100      	movs	r1, #0
   12b8c:	4668      	mov	r0, sp
   12b8e:	f00b fca2 	bl	1e4d6 <memset>
	if (rsp) {
   12b92:	f1b8 0f00 	cmp.w	r8, #0
   12b96:	d122      	bne.n	12bde <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12b98:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   12b9a:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   12b9e:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12ba0:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   12ba2:	9300      	str	r3, [sp, #0]
	data.value = value;
   12ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12ba6:	4638      	mov	r0, r7
	data.value = value;
   12ba8:	9303      	str	r3, [sp, #12]
	data.len = len;
   12baa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12bae:	4a1d      	ldr	r2, [pc, #116]	; (12c24 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12bb0:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12bb4:	2301      	movs	r3, #1
   12bb6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12bba:	466b      	mov	r3, sp
	data.req = req;
   12bbc:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12bc0:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12bc4:	f00c f9d8 	bl	1ef78 <bt_gatt_foreach_attr>
	if (data.err) {
   12bc8:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12bcc:	b1f4      	cbz	r4, 12c0c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   12bce:	f1b8 0f00 	cmp.w	r8, #0
   12bd2:	d10e      	bne.n	12bf2 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12bd4:	2400      	movs	r4, #0
}
   12bd6:	4620      	mov	r0, r4
   12bd8:	b007      	add	sp, #28
   12bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12bde:	2200      	movs	r2, #0
   12be0:	4641      	mov	r1, r8
   12be2:	4628      	mov	r0, r5
   12be4:	f7ff fec8 	bl	12978 <bt_att_chan_create_pdu>
   12be8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12bea:	2800      	cmp	r0, #0
   12bec:	d1d4      	bne.n	12b98 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   12bee:	240e      	movs	r4, #14
   12bf0:	e7f1      	b.n	12bd6 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12bf2:	9801      	ldr	r0, [sp, #4]
   12bf4:	f004 fdf6 	bl	177e4 <net_buf_unref>
	if (!req) {
   12bf8:	2e00      	cmp	r6, #0
   12bfa:	d0eb      	beq.n	12bd4 <att_write_rsp.constprop.0+0x70>
   12bfc:	463a      	mov	r2, r7
   12bfe:	4631      	mov	r1, r6
   12c00:	4628      	mov	r0, r5
   12c02:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12c06:	f7ff ff09 	bl	12a1c <send_err_rsp.part.0>
   12c0a:	e7e3      	b.n	12bd4 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12c0c:	9901      	ldr	r1, [sp, #4]
   12c0e:	2900      	cmp	r1, #0
   12c10:	d0e0      	beq.n	12bd4 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c12:	4628      	mov	r0, r5
   12c14:	4a04      	ldr	r2, [pc, #16]	; (12c28 <att_write_rsp.constprop.0+0xc4>)
   12c16:	f00c fb26 	bl	1f266 <bt_att_chan_send_rsp>
   12c1a:	e7dc      	b.n	12bd6 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12c1c:	2412      	movs	r4, #18
   12c1e:	e7da      	b.n	12bd6 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12c20:	2401      	movs	r4, #1
   12c22:	e7d8      	b.n	12bd6 <att_write_rsp.constprop.0+0x72>
   12c24:	0001f047 	.word	0x0001f047
   12c28:	0001f2b7 	.word	0x0001f2b7

00012c2c <bt_att_create_pdu>:
{
   12c2c:	b570      	push	{r4, r5, r6, lr}
   12c2e:	460e      	mov	r6, r1
   12c30:	4615      	mov	r5, r2
	att = att_get(conn);
   12c32:	f7ff fbb7 	bl	123a4 <att_get>
	if (!att) {
   12c36:	b190      	cbz	r0, 12c5e <bt_att_create_pdu+0x32>
	return list->head;
   12c38:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12c3a:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c3c:	b15b      	cbz	r3, 12c56 <bt_att_create_pdu+0x2a>
   12c3e:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12c42:	d008      	beq.n	12c56 <bt_att_create_pdu+0x2a>
	return node->next;
   12c44:	681b      	ldr	r3, [r3, #0]
   12c46:	b10b      	cbz	r3, 12c4c <bt_att_create_pdu+0x20>
   12c48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12c4c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   12c50:	428a      	cmp	r2, r1
   12c52:	d906      	bls.n	12c62 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c54:	b95b      	cbnz	r3, 12c6e <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12c56:	2157      	movs	r1, #87	; 0x57
   12c58:	480a      	ldr	r0, [pc, #40]	; (12c84 <bt_att_create_pdu+0x58>)
   12c5a:	f009 ff59 	bl	1cb10 <printk>
}
   12c5e:	2000      	movs	r0, #0
   12c60:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   12c62:	462a      	mov	r2, r5
   12c64:	4631      	mov	r1, r6
}
   12c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   12c6a:	f7ff be85 	b.w	12978 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c6e:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   12c72:	d004      	beq.n	12c7e <bt_att_create_pdu+0x52>
	return node->next;
   12c74:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c78:	b10c      	cbz	r4, 12c7e <bt_att_create_pdu+0x52>
   12c7a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   12c7e:	4618      	mov	r0, r3
   12c80:	4623      	mov	r3, r4
   12c82:	e7e3      	b.n	12c4c <bt_att_create_pdu+0x20>
   12c84:	000252e7 	.word	0x000252e7

00012c88 <att_read_group_req>:
{
   12c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c8c:	898c      	ldrh	r4, [r1, #12]
{
   12c8e:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c90:	3c04      	subs	r4, #4
   12c92:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12c94:	2c02      	cmp	r4, #2
{
   12c96:	4608      	mov	r0, r1
   12c98:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12c9a:	d001      	beq.n	12ca0 <att_read_group_req+0x18>
   12c9c:	2c10      	cmp	r4, #16
   12c9e:	d16f      	bne.n	12d80 <att_read_group_req+0xf8>
   12ca0:	2104      	movs	r1, #4
   12ca2:	3008      	adds	r0, #8
   12ca4:	f004 fe96 	bl	179d4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12ca8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12cac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12cae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12cb0:	1d01      	adds	r1, r0, #4
   12cb2:	4622      	mov	r2, r4
   12cb4:	4640      	mov	r0, r8
   12cb6:	f00b fcac 	bl	1e612 <bt_uuid_create>
   12cba:	2800      	cmp	r0, #0
   12cbc:	d062      	beq.n	12d84 <att_read_group_req+0xfc>
	if (!start || !end) {
   12cbe:	2e00      	cmp	r6, #0
   12cc0:	d03a      	beq.n	12d38 <att_read_group_req+0xb0>
   12cc2:	2400      	movs	r4, #0
   12cc4:	2f00      	cmp	r7, #0
   12cc6:	d036      	beq.n	12d36 <att_read_group_req+0xae>
	if (start > end) {
   12cc8:	42be      	cmp	r6, r7
   12cca:	d835      	bhi.n	12d38 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12ccc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12cd0:	4640      	mov	r0, r8
   12cd2:	a901      	add	r1, sp, #4
   12cd4:	f88d 4004 	strb.w	r4, [sp, #4]
   12cd8:	f8ad 3006 	strh.w	r3, [sp, #6]
   12cdc:	f00b fc6b 	bl	1e5b6 <bt_uuid_cmp>
   12ce0:	2800      	cmp	r0, #0
   12ce2:	d134      	bne.n	12d4e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12ce4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12ce6:	2214      	movs	r2, #20
   12ce8:	2100      	movs	r1, #0
   12cea:	a807      	add	r0, sp, #28
   12cec:	f00b fbf3 	bl	1e4d6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12cf0:	2201      	movs	r2, #1
   12cf2:	2111      	movs	r1, #17
   12cf4:	4620      	mov	r0, r4
   12cf6:	f7ff ff99 	bl	12c2c <bt_att_create_pdu>
   12cfa:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12cfc:	2800      	cmp	r0, #0
   12cfe:	d041      	beq.n	12d84 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12d00:	2101      	movs	r1, #1
   12d02:	3008      	adds	r0, #8
	data.uuid = uuid;
   12d04:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12d08:	f004 fe82 	bl	17a10 <net_buf_simple_add>
	data.rsp->len = 0U;
   12d0c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12d10:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12d12:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12d14:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12d18:	4639      	mov	r1, r7
   12d1a:	4630      	mov	r0, r6
   12d1c:	4a1a      	ldr	r2, [pc, #104]	; (12d88 <att_read_group_req+0x100>)
	data.group = NULL;
   12d1e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12d22:	f00c f929 	bl	1ef78 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12d28:	781c      	ldrb	r4, [r3, #0]
   12d2a:	bb1c      	cbnz	r4, 12d74 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d2e:	f004 fd59 	bl	177e4 <net_buf_unref>
	if (!req) {
   12d32:	230a      	movs	r3, #10
   12d34:	e018      	b.n	12d68 <att_read_group_req+0xe0>
			*err = 0U;
   12d36:	463e      	mov	r6, r7
	if (!req) {
   12d38:	2301      	movs	r3, #1
   12d3a:	4632      	mov	r2, r6
   12d3c:	2110      	movs	r1, #16
   12d3e:	4628      	mov	r0, r5
   12d40:	f7ff fe6c 	bl	12a1c <send_err_rsp.part.0>
		return 0;
   12d44:	2400      	movs	r4, #0
}
   12d46:	4620      	mov	r0, r4
   12d48:	b00c      	add	sp, #48	; 0x30
   12d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12d4e:	f642 0301 	movw	r3, #10241	; 0x2801
   12d52:	4640      	mov	r0, r8
   12d54:	a907      	add	r1, sp, #28
   12d56:	f88d 401c 	strb.w	r4, [sp, #28]
   12d5a:	f8ad 301e 	strh.w	r3, [sp, #30]
   12d5e:	f00b fc2a 	bl	1e5b6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12d62:	2800      	cmp	r0, #0
   12d64:	d0be      	beq.n	12ce4 <att_read_group_req+0x5c>
	if (!req) {
   12d66:	2310      	movs	r3, #16
   12d68:	4632      	mov	r2, r6
   12d6a:	2110      	movs	r1, #16
   12d6c:	4628      	mov	r0, r5
   12d6e:	f7ff fe55 	bl	12a1c <send_err_rsp.part.0>
		return 0;
   12d72:	e7e8      	b.n	12d46 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d74:	4628      	mov	r0, r5
   12d76:	4a05      	ldr	r2, [pc, #20]	; (12d8c <att_read_group_req+0x104>)
   12d78:	9909      	ldr	r1, [sp, #36]	; 0x24
   12d7a:	f00c fa74 	bl	1f266 <bt_att_chan_send_rsp>
	return 0;
   12d7e:	e7e1      	b.n	12d44 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12d80:	2404      	movs	r4, #4
   12d82:	e7e0      	b.n	12d46 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12d84:	240e      	movs	r4, #14
   12d86:	e7de      	b.n	12d46 <att_read_group_req+0xbe>
   12d88:	0001263d 	.word	0x0001263d
   12d8c:	0001f2b7 	.word	0x0001f2b7

00012d90 <att_read_mult_req>:
{
   12d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12d94:	6886      	ldr	r6, [r0, #8]
{
   12d96:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12d98:	2210      	movs	r2, #16
{
   12d9a:	4604      	mov	r4, r0
   12d9c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12d9e:	4668      	mov	r0, sp
   12da0:	2100      	movs	r1, #0
   12da2:	f00b fb98 	bl	1e4d6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12da6:	2200      	movs	r2, #0
   12da8:	210f      	movs	r1, #15
   12daa:	4630      	mov	r0, r6
   12dac:	f7ff ff3e 	bl	12c2c <bt_att_create_pdu>
   12db0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12db2:	b360      	cbz	r0, 12e0e <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12db4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12db8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12e14 <att_read_mult_req+0x84>
	data.chan = chan;
   12dbc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12dbe:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12dc2:	89ab      	ldrh	r3, [r5, #12]
   12dc4:	2b01      	cmp	r3, #1
   12dc6:	d805      	bhi.n	12dd4 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12dc8:	4620      	mov	r0, r4
   12dca:	4a13      	ldr	r2, [pc, #76]	; (12e18 <att_read_mult_req+0x88>)
   12dcc:	9902      	ldr	r1, [sp, #8]
   12dce:	f00c fa4a 	bl	1f266 <bt_att_chan_send_rsp>
   12dd2:	e018      	b.n	12e06 <att_read_mult_req+0x76>
   12dd4:	4638      	mov	r0, r7
   12dd6:	f00d fccf 	bl	20778 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12dda:	466b      	mov	r3, sp
   12ddc:	464a      	mov	r2, r9
   12dde:	4601      	mov	r1, r0
   12de0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12de2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12de6:	f00c f8c7 	bl	1ef78 <bt_gatt_foreach_attr>
		if (data.err) {
   12dea:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12dee:	2b00      	cmp	r3, #0
   12df0:	d0e7      	beq.n	12dc2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12df2:	9802      	ldr	r0, [sp, #8]
   12df4:	f004 fcf6 	bl	177e4 <net_buf_unref>
	if (!req) {
   12df8:	4632      	mov	r2, r6
   12dfa:	210e      	movs	r1, #14
   12dfc:	4620      	mov	r0, r4
   12dfe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12e02:	f7ff fe0b 	bl	12a1c <send_err_rsp.part.0>
	return 0;
   12e06:	2000      	movs	r0, #0
}
   12e08:	b005      	add	sp, #20
   12e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12e0e:	200e      	movs	r0, #14
   12e10:	e7fa      	b.n	12e08 <att_read_mult_req+0x78>
   12e12:	bf00      	nop
   12e14:	0001f2df 	.word	0x0001f2df
   12e18:	0001f2b7 	.word	0x0001f2b7

00012e1c <att_read_rsp>:
{
   12e1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12e20:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12e24:	4605      	mov	r5, r0
   12e26:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12e28:	4640      	mov	r0, r8
   12e2a:	2101      	movs	r1, #1
{
   12e2c:	4614      	mov	r4, r2
   12e2e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12e30:	f00c ff65 	bl	1fcfe <bt_gatt_change_aware>
   12e34:	b390      	cbz	r0, 12e9c <att_read_rsp+0x80>
	if (!handle) {
   12e36:	b39e      	cbz	r6, 12ea0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12e38:	2210      	movs	r2, #16
   12e3a:	2100      	movs	r1, #0
   12e3c:	4668      	mov	r0, sp
   12e3e:	f00b fb4a 	bl	1e4d6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12e42:	2200      	movs	r2, #0
   12e44:	4621      	mov	r1, r4
   12e46:	4640      	mov	r0, r8
   12e48:	f7ff fef0 	bl	12c2c <bt_att_create_pdu>
   12e4c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12e4e:	b348      	cbz	r0, 12ea4 <att_read_rsp+0x88>
	data.offset = offset;
   12e50:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e54:	4631      	mov	r1, r6
	data.offset = offset;
   12e56:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12e5a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e5c:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12e5e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e62:	4a11      	ldr	r2, [pc, #68]	; (12ea8 <att_read_rsp+0x8c>)
   12e64:	466b      	mov	r3, sp
	data.chan = chan;
   12e66:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e68:	f00c f886 	bl	1ef78 <bt_gatt_foreach_attr>
	if (data.err) {
   12e6c:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12e70:	b174      	cbz	r4, 12e90 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12e72:	9802      	ldr	r0, [sp, #8]
   12e74:	f004 fcb6 	bl	177e4 <net_buf_unref>
	if (!req) {
   12e78:	4632      	mov	r2, r6
   12e7a:	4639      	mov	r1, r7
   12e7c:	4628      	mov	r0, r5
   12e7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12e82:	f7ff fdcb 	bl	12a1c <send_err_rsp.part.0>
		return 0;
   12e86:	2400      	movs	r4, #0
}
   12e88:	4620      	mov	r0, r4
   12e8a:	b004      	add	sp, #16
   12e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12e90:	4628      	mov	r0, r5
   12e92:	4a06      	ldr	r2, [pc, #24]	; (12eac <att_read_rsp+0x90>)
   12e94:	9902      	ldr	r1, [sp, #8]
   12e96:	f00c f9e6 	bl	1f266 <bt_att_chan_send_rsp>
	return 0;
   12e9a:	e7f5      	b.n	12e88 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12e9c:	2412      	movs	r4, #18
   12e9e:	e7f3      	b.n	12e88 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12ea0:	2401      	movs	r4, #1
   12ea2:	e7f1      	b.n	12e88 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12ea4:	240e      	movs	r4, #14
   12ea6:	e7ef      	b.n	12e88 <att_read_rsp+0x6c>
   12ea8:	0001f2df 	.word	0x0001f2df
   12eac:	0001f2b7 	.word	0x0001f2b7

00012eb0 <att_read_type_req>:
{
   12eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12eb4:	898c      	ldrh	r4, [r1, #12]
{
   12eb6:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12eb8:	3c04      	subs	r4, #4
   12eba:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12ebc:	2c02      	cmp	r4, #2
{
   12ebe:	4608      	mov	r0, r1
   12ec0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12ec2:	d001      	beq.n	12ec8 <att_read_type_req+0x18>
   12ec4:	2c10      	cmp	r4, #16
   12ec6:	d150      	bne.n	12f6a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12ec8:	2104      	movs	r1, #4
   12eca:	3008      	adds	r0, #8
   12ecc:	f004 fd82 	bl	179d4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12ed0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12ed4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12ed6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12ed8:	1d01      	adds	r1, r0, #4
   12eda:	4622      	mov	r2, r4
   12edc:	4640      	mov	r0, r8
   12ede:	f00b fb98 	bl	1e612 <bt_uuid_create>
   12ee2:	b188      	cbz	r0, 12f08 <att_read_type_req+0x58>
	if (!start || !end) {
   12ee4:	b19e      	cbz	r6, 12f0e <att_read_type_req+0x5e>
   12ee6:	b18f      	cbz	r7, 12f0c <att_read_type_req+0x5c>
	if (start > end) {
   12ee8:	42b7      	cmp	r7, r6
   12eea:	d310      	bcc.n	12f0e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12eec:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12eee:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12ef0:	2100      	movs	r1, #0
   12ef2:	eb0d 0002 	add.w	r0, sp, r2
   12ef6:	f00b faee 	bl	1e4d6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12efa:	2201      	movs	r2, #1
   12efc:	2109      	movs	r1, #9
   12efe:	4620      	mov	r0, r4
   12f00:	f7ff fe94 	bl	12c2c <bt_att_create_pdu>
   12f04:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12f06:	b968      	cbnz	r0, 12f24 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12f08:	240e      	movs	r4, #14
   12f0a:	e007      	b.n	12f1c <att_read_type_req+0x6c>
			*err = 0U;
   12f0c:	463e      	mov	r6, r7
	if (!req) {
   12f0e:	2301      	movs	r3, #1
   12f10:	4632      	mov	r2, r6
   12f12:	2108      	movs	r1, #8
   12f14:	4628      	mov	r0, r5
   12f16:	f7ff fd81 	bl	12a1c <send_err_rsp.part.0>
		return 0;
   12f1a:	2400      	movs	r4, #0
}
   12f1c:	4620      	mov	r0, r4
   12f1e:	b00c      	add	sp, #48	; 0x30
   12f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12f24:	2101      	movs	r1, #1
   12f26:	3008      	adds	r0, #8
	data.uuid = uuid;
   12f28:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12f2c:	f004 fd70 	bl	17a10 <net_buf_simple_add>
	data.rsp->len = 0U;
   12f30:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12f34:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12f36:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12f38:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12f3a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12f3e:	4a0c      	ldr	r2, [pc, #48]	; (12f70 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12f40:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12f44:	4630      	mov	r0, r6
   12f46:	ab06      	add	r3, sp, #24
   12f48:	f00c f816 	bl	1ef78 <bt_gatt_foreach_attr>
	if (data.err) {
   12f4c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12f50:	b12c      	cbz	r4, 12f5e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12f52:	9808      	ldr	r0, [sp, #32]
   12f54:	f004 fc46 	bl	177e4 <net_buf_unref>
	if (!req) {
   12f58:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12f5c:	e7d8      	b.n	12f10 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12f5e:	4628      	mov	r0, r5
   12f60:	4a04      	ldr	r2, [pc, #16]	; (12f74 <att_read_type_req+0xc4>)
   12f62:	9908      	ldr	r1, [sp, #32]
   12f64:	f00c f97f 	bl	1f266 <bt_att_chan_send_rsp>
	return 0;
   12f68:	e7d8      	b.n	12f1c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12f6a:	2404      	movs	r4, #4
   12f6c:	e7d6      	b.n	12f1c <att_read_type_req+0x6c>
   12f6e:	bf00      	nop
   12f70:	0001284d 	.word	0x0001284d
   12f74:	0001f2b7 	.word	0x0001f2b7

00012f78 <att_find_type_req>:
{
   12f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f7c:	4688      	mov	r8, r1
   12f7e:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12f80:	2106      	movs	r1, #6
   12f82:	b086      	sub	sp, #24
   12f84:	f108 0008 	add.w	r0, r8, #8
   12f88:	f004 fd24 	bl	179d4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12f8c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12f8e:	b317      	cbz	r7, 12fd6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12f90:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12f94:	f1b9 0f00 	cmp.w	r9, #0
   12f98:	d01c      	beq.n	12fd4 <att_find_type_req+0x5c>
	if (start > end) {
   12f9a:	454f      	cmp	r7, r9
   12f9c:	d81b      	bhi.n	12fd6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12f9e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12fa0:	2400      	movs	r4, #0
   12fa2:	f8ad 3002 	strh.w	r3, [sp, #2]
   12fa6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12faa:	4668      	mov	r0, sp
   12fac:	a901      	add	r1, sp, #4
	value = buf->data;
   12fae:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12fb2:	f88d 4000 	strb.w	r4, [sp]
   12fb6:	f88d 4004 	strb.w	r4, [sp, #4]
   12fba:	f8ad 3006 	strh.w	r3, [sp, #6]
   12fbe:	f00b fafa 	bl	1e5b6 <bt_uuid_cmp>
   12fc2:	4606      	mov	r6, r0
   12fc4:	b190      	cbz	r0, 12fec <att_find_type_req+0x74>
	if (!req) {
   12fc6:	230a      	movs	r3, #10
   12fc8:	463a      	mov	r2, r7
   12fca:	2106      	movs	r1, #6
   12fcc:	4628      	mov	r0, r5
   12fce:	f7ff fd25 	bl	12a1c <send_err_rsp.part.0>
		return 0;
   12fd2:	e007      	b.n	12fe4 <att_find_type_req+0x6c>
			*err = 0U;
   12fd4:	464f      	mov	r7, r9
	if (!req) {
   12fd6:	2301      	movs	r3, #1
   12fd8:	463a      	mov	r2, r7
   12fda:	2106      	movs	r1, #6
   12fdc:	4628      	mov	r0, r5
   12fde:	f7ff fd1d 	bl	12a1c <send_err_rsp.part.0>
		return 0;
   12fe2:	2400      	movs	r4, #0
}
   12fe4:	4620      	mov	r0, r4
   12fe6:	b006      	add	sp, #24
   12fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12fec:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12ff0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12ff4:	4601      	mov	r1, r0
   12ff6:	2214      	movs	r2, #20
   12ff8:	a801      	add	r0, sp, #4
   12ffa:	f00b fa6c 	bl	1e4d6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12ffe:	4632      	mov	r2, r6
   13000:	2107      	movs	r1, #7
   13002:	4640      	mov	r0, r8
   13004:	f7ff fe12 	bl	12c2c <bt_att_create_pdu>
   13008:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1300a:	b1e0      	cbz	r0, 13046 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1300c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1300e:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   13010:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   13014:	4638      	mov	r0, r7
   13016:	4a0d      	ldr	r2, [pc, #52]	; (1304c <att_find_type_req+0xd4>)
   13018:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   1301a:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1301e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   13022:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   13024:	f00b ffa8 	bl	1ef78 <bt_gatt_foreach_attr>
	if (data.err) {
   13028:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1302c:	b12c      	cbz	r4, 1303a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1302e:	9802      	ldr	r0, [sp, #8]
   13030:	f004 fbd8 	bl	177e4 <net_buf_unref>
	if (!req) {
   13034:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13038:	e7ce      	b.n	12fd8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1303a:	4628      	mov	r0, r5
   1303c:	4a04      	ldr	r2, [pc, #16]	; (13050 <att_find_type_req+0xd8>)
   1303e:	9902      	ldr	r1, [sp, #8]
   13040:	f00c f911 	bl	1f266 <bt_att_chan_send_rsp>
	return 0;
   13044:	e7ce      	b.n	12fe4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   13046:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   13048:	e7cc      	b.n	12fe4 <att_find_type_req+0x6c>
   1304a:	bf00      	nop
   1304c:	0001240d 	.word	0x0001240d
   13050:	0001f2b7 	.word	0x0001f2b7

00013054 <att_find_info_req>:
{
   13054:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   13056:	688b      	ldr	r3, [r1, #8]
{
   13058:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1305a:	881e      	ldrh	r6, [r3, #0]
{
   1305c:	b085      	sub	sp, #20
	if (!start || !end) {
   1305e:	b19e      	cbz	r6, 13088 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   13060:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   13062:	b184      	cbz	r4, 13086 <att_find_info_req+0x32>
	if (start > end) {
   13064:	42b4      	cmp	r4, r6
   13066:	d30f      	bcc.n	13088 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   13068:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1306a:	2210      	movs	r2, #16
   1306c:	2100      	movs	r1, #0
   1306e:	4668      	mov	r0, sp
   13070:	f00b fa31 	bl	1e4d6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   13074:	2200      	movs	r2, #0
   13076:	2105      	movs	r1, #5
   13078:	4638      	mov	r0, r7
   1307a:	f7ff fdd7 	bl	12c2c <bt_att_create_pdu>
   1307e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   13080:	b958      	cbnz	r0, 1309a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   13082:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   13084:	e007      	b.n	13096 <att_find_info_req+0x42>
			*err = 0U;
   13086:	4626      	mov	r6, r4
	if (!req) {
   13088:	2301      	movs	r3, #1
   1308a:	4632      	mov	r2, r6
   1308c:	2104      	movs	r1, #4
   1308e:	4628      	mov	r0, r5
   13090:	f7ff fcc4 	bl	12a1c <send_err_rsp.part.0>
	return 0;
   13094:	2000      	movs	r0, #0
}
   13096:	b005      	add	sp, #20
   13098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1309a:	4621      	mov	r1, r4
   1309c:	466b      	mov	r3, sp
   1309e:	4630      	mov	r0, r6
   130a0:	4a08      	ldr	r2, [pc, #32]	; (130c4 <att_find_info_req+0x70>)
	data.chan = chan;
   130a2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   130a4:	f00b ff68 	bl	1ef78 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   130a8:	9c02      	ldr	r4, [sp, #8]
   130aa:	b924      	cbnz	r4, 130b6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   130ac:	9801      	ldr	r0, [sp, #4]
   130ae:	f004 fb99 	bl	177e4 <net_buf_unref>
	if (!req) {
   130b2:	230a      	movs	r3, #10
   130b4:	e7e9      	b.n	1308a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   130b6:	4628      	mov	r0, r5
   130b8:	4a03      	ldr	r2, [pc, #12]	; (130c8 <att_find_info_req+0x74>)
   130ba:	9901      	ldr	r1, [sp, #4]
   130bc:	f00c f8d3 	bl	1f266 <bt_att_chan_send_rsp>
   130c0:	e7e8      	b.n	13094 <att_find_info_req+0x40>
   130c2:	bf00      	nop
   130c4:	0001ef8f 	.word	0x0001ef8f
   130c8:	0001f2b7 	.word	0x0001f2b7

000130cc <att_mtu_req>:
{
   130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   130ce:	4603      	mov	r3, r0
   130d0:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   130d4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   130d6:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   130d8:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   130dc:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   130e0:	071b      	lsls	r3, r3, #28
   130e2:	d41e      	bmi.n	13122 <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
   130e4:	688b      	ldr	r3, [r1, #8]
   130e6:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   130e8:	2e16      	cmp	r6, #22
   130ea:	d91c      	bls.n	13126 <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   130ec:	2202      	movs	r2, #2
   130ee:	2103      	movs	r1, #3
   130f0:	f7ff fd9c 	bl	12c2c <bt_att_create_pdu>
	if (!pdu) {
   130f4:	4607      	mov	r7, r0
   130f6:	b1c0      	cbz	r0, 1312a <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   130f8:	2102      	movs	r1, #2
   130fa:	3008      	adds	r0, #8
   130fc:	f004 fc88 	bl	17a10 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   13100:	2341      	movs	r3, #65	; 0x41
   13102:	7044      	strb	r4, [r0, #1]
   13104:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   13106:	4639      	mov	r1, r7
   13108:	4628      	mov	r0, r5
   1310a:	4a09      	ldr	r2, [pc, #36]	; (13130 <att_mtu_req+0x64>)
   1310c:	f00c f8ab 	bl	1f266 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   13110:	2e41      	cmp	r6, #65	; 0x41
   13112:	bf28      	it	cs
   13114:	2641      	movcs	r6, #65	; 0x41
	return 0;
   13116:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   13118:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1311c:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
}
   13120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   13122:	2006      	movs	r0, #6
   13124:	e7fc      	b.n	13120 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   13126:	2004      	movs	r0, #4
   13128:	e7fa      	b.n	13120 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   1312a:	200e      	movs	r0, #14
   1312c:	e7f8      	b.n	13120 <att_mtu_req+0x54>
   1312e:	bf00      	nop
   13130:	0001f2b7 	.word	0x0001f2b7

00013134 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   13134:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   13136:	2400      	movs	r4, #0
{
   13138:	4602      	mov	r2, r0
   1313a:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1313c:	4807      	ldr	r0, [pc, #28]	; (1315c <bt_att_req_alloc+0x28>)
   1313e:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   13140:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   13142:	f006 ffc9 	bl	1a0d8 <k_mem_slab_alloc>
   13146:	4601      	mov	r1, r0
   13148:	b930      	cbnz	r0, 13158 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1314a:	221c      	movs	r2, #28
   1314c:	9801      	ldr	r0, [sp, #4]
   1314e:	f00b f9c2 	bl	1e4d6 <memset>

	return req;
   13152:	9801      	ldr	r0, [sp, #4]
}
   13154:	b002      	add	sp, #8
   13156:	bd10      	pop	{r4, pc}
		return NULL;
   13158:	4620      	mov	r0, r4
   1315a:	e7fb      	b.n	13154 <bt_att_req_alloc+0x20>
   1315c:	200084f4 	.word	0x200084f4

00013160 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   13160:	b507      	push	{r0, r1, r2, lr}
   13162:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   13164:	a901      	add	r1, sp, #4
   13166:	4803      	ldr	r0, [pc, #12]	; (13174 <bt_att_req_free+0x14>)
   13168:	f007 f810 	bl	1a18c <k_mem_slab_free>
}
   1316c:	b003      	add	sp, #12
   1316e:	f85d fb04 	ldr.w	pc, [sp], #4
   13172:	bf00      	nop
   13174:	200084f4 	.word	0x200084f4

00013178 <att_handle_rsp>:
{
   13178:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1317c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   1317e:	30f0      	adds	r0, #240	; 0xf0
{
   13180:	460f      	mov	r7, r1
   13182:	4690      	mov	r8, r2
   13184:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   13186:	f008 fdd5 	bl	1bd34 <k_delayed_work_cancel>
	if (!chan->req) {
   1318a:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   1318e:	f04f 0a00 	mov.w	sl, #0
   13192:	b99d      	cbnz	r5, 131bc <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   13194:	2157      	movs	r1, #87	; 0x57
   13196:	4818      	ldr	r0, [pc, #96]	; (131f8 <att_handle_rsp+0x80>)
   13198:	f009 fcba 	bl	1cb10 <printk>
	att_req_send_process(chan->att);
   1319c:	6820      	ldr	r0, [r4, #0]
   1319e:	f00c f906 	bl	1f3ae <att_req_send_process>
	if (func) {
   131a2:	b13d      	cbz	r5, 131b4 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   131a4:	6820      	ldr	r0, [r4, #0]
   131a6:	f8cd 9000 	str.w	r9, [sp]
   131aa:	4643      	mov	r3, r8
   131ac:	463a      	mov	r2, r7
   131ae:	4631      	mov	r1, r6
   131b0:	6800      	ldr	r0, [r0, #0]
   131b2:	47a8      	blx	r5
}
   131b4:	2000      	movs	r0, #0
   131b6:	b002      	add	sp, #8
   131b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   131bc:	4b0f      	ldr	r3, [pc, #60]	; (131fc <att_handle_rsp+0x84>)
   131be:	429d      	cmp	r5, r3
   131c0:	d103      	bne.n	131ca <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   131c2:	4655      	mov	r5, sl
		chan->req = NULL;
   131c4:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   131c8:	e7e8      	b.n	1319c <att_handle_rsp+0x24>
	if (chan->req->buf) {
   131ca:	6928      	ldr	r0, [r5, #16]
   131cc:	b128      	cbz	r0, 131da <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   131ce:	f004 fb09 	bl	177e4 <net_buf_unref>
		chan->req->buf = NULL;
   131d2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   131d6:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   131da:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   131de:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   131e2:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   131e4:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   131e8:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(chan->req);
   131ec:	f00c f96c 	bl	1f4c8 <att_req_destroy>
	chan->req = NULL;
   131f0:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   131f4:	e7d2      	b.n	1319c <att_handle_rsp+0x24>
   131f6:	bf00      	nop
   131f8:	00025307 	.word	0x00025307
   131fc:	20009c58 	.word	0x20009c58

00013200 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   13200:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
{
   13204:	b570      	push	{r4, r5, r6, lr}
   13206:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   13208:	b352      	cbz	r2, 13260 <att_error_rsp+0x60>
   1320a:	4b1a      	ldr	r3, [pc, #104]	; (13274 <att_error_rsp+0x74>)
   1320c:	429a      	cmp	r2, r3
   1320e:	d027      	beq.n	13260 <att_error_rsp+0x60>
	if (chan->req->buf) {
   13210:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
   13212:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
   13214:	b12b      	cbz	r3, 13222 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
   13216:	8996      	ldrh	r6, [r2, #12]
   13218:	6919      	ldr	r1, [r3, #16]
   1321a:	89d5      	ldrh	r5, [r2, #14]
   1321c:	4431      	add	r1, r6
   1321e:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
   13220:	819d      	strh	r5, [r3, #12]
	if (chan->req->retrying) {
   13222:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
   13224:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
   13226:	b9e3      	cbnz	r3, 13262 <att_error_rsp+0x62>
	switch (err) {
   13228:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1322a:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
   1322c:	d006      	beq.n	1323c <att_error_rsp+0x3c>
   1322e:	2d0f      	cmp	r5, #15
   13230:	d117      	bne.n	13262 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
   13232:	7a43      	ldrb	r3, [r0, #9]
   13234:	2b01      	cmp	r3, #1
   13236:	d814      	bhi.n	13262 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
   13238:	2102      	movs	r1, #2
   1323a:	e007      	b.n	1324c <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
   1323c:	7a43      	ldrb	r3, [r0, #9]
   1323e:	2b01      	cmp	r3, #1
   13240:	d9fa      	bls.n	13238 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   13242:	2b02      	cmp	r3, #2
   13244:	d00a      	beq.n	1325c <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   13246:	2b03      	cmp	r3, #3
   13248:	d10b      	bne.n	13262 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
   1324a:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   1324c:	f00b fcb2 	bl	1ebb4 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   13250:	b938      	cbnz	r0, 13262 <att_error_rsp+0x62>
		chan->req->retrying = true;
   13252:	2201      	movs	r2, #1
   13254:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   13258:	751a      	strb	r2, [r3, #20]
}
   1325a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   1325c:	2103      	movs	r1, #3
   1325e:	e7f5      	b.n	1324c <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
   13260:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   13262:	2200      	movs	r2, #0
   13264:	462b      	mov	r3, r5
   13266:	4620      	mov	r0, r4
}
   13268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   1326c:	4611      	mov	r1, r2
   1326e:	f7ff bf83 	b.w	13178 <att_handle_rsp>
   13272:	bf00      	nop
   13274:	20009c58 	.word	0x20009c58

00013278 <att_reset>:
{
   13278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1327a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1327c:	9803      	ldr	r0, [sp, #12]
   1327e:	2200      	movs	r2, #0
   13280:	2300      	movs	r3, #0
   13282:	300c      	adds	r0, #12
   13284:	f004 fa2c 	bl	176e0 <net_buf_get>
   13288:	b948      	cbnz	r0, 1329e <att_reset+0x26>
	att->conn = NULL;
   1328a:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   1328c:	6854      	ldr	r4, [r2, #4]
   1328e:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13290:	b944      	cbnz	r4, 132a4 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   13292:	480d      	ldr	r0, [pc, #52]	; (132c8 <att_reset+0x50>)
   13294:	a903      	add	r1, sp, #12
   13296:	f006 ff79 	bl	1a18c <k_mem_slab_free>
}
   1329a:	b004      	add	sp, #16
   1329c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1329e:	f004 faa1 	bl	177e4 <net_buf_unref>
   132a2:	e7eb      	b.n	1327c <att_reset+0x4>
	return node->next;
   132a4:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   132a6:	6866      	ldr	r6, [r4, #4]
   132a8:	b136      	cbz	r6, 132b8 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   132aa:	69a3      	ldr	r3, [r4, #24]
   132ac:	210e      	movs	r1, #14
   132ae:	9300      	str	r3, [sp, #0]
   132b0:	2300      	movs	r3, #0
   132b2:	461a      	mov	r2, r3
   132b4:	4618      	mov	r0, r3
   132b6:	47b0      	blx	r6
		att_req_destroy(req);
   132b8:	4620      	mov	r0, r4
   132ba:	f00c f905 	bl	1f4c8 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   132be:	2d00      	cmp	r5, #0
   132c0:	d0e7      	beq.n	13292 <att_reset+0x1a>
   132c2:	462c      	mov	r4, r5
   132c4:	682d      	ldr	r5, [r5, #0]
   132c6:	e7ee      	b.n	132a6 <att_reset+0x2e>
   132c8:	200084bc 	.word	0x200084bc

000132cc <att_timeout>:
{
   132cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   132ce:	4605      	mov	r5, r0
   132d0:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   132d4:	2145      	movs	r1, #69	; 0x45
{
   132d6:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   132d8:	4808      	ldr	r0, [pc, #32]	; (132fc <att_timeout+0x30>)
   132da:	f009 fc19 	bl	1cb10 <printk>
	att_chan_detach(chan);
   132de:	4628      	mov	r0, r5
   132e0:	f00c f960 	bl	1f5a4 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   132e4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   132e6:	b945      	cbnz	r5, 132fa <att_timeout+0x2e>
	att_reset(att);
   132e8:	4630      	mov	r0, r6
   132ea:	f7ff ffc5 	bl	13278 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   132ee:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   132f2:	f002 f869 	bl	153c8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   132f6:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   132fa:	bd70      	pop	{r4, r5, r6, pc}
   132fc:	00025323 	.word	0x00025323

00013300 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13304:	460c      	mov	r4, r1
   13306:	4617      	mov	r7, r2
   13308:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1330a:	4605      	mov	r5, r0
   1330c:	b950      	cbnz	r0, 13324 <bt_att_send+0x24>
   1330e:	492e      	ldr	r1, [pc, #184]	; (133c8 <bt_att_send+0xc8>)
   13310:	482e      	ldr	r0, [pc, #184]	; (133cc <bt_att_send+0xcc>)
   13312:	f640 32ce 	movw	r2, #3022	; 0xbce
   13316:	f009 fbfb 	bl	1cb10 <printk>
   1331a:	f640 31ce 	movw	r1, #3022	; 0xbce
   1331e:	482a      	ldr	r0, [pc, #168]	; (133c8 <bt_att_send+0xc8>)
   13320:	f009 fe9c 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   13324:	b954      	cbnz	r4, 1333c <bt_att_send+0x3c>
   13326:	4928      	ldr	r1, [pc, #160]	; (133c8 <bt_att_send+0xc8>)
   13328:	4828      	ldr	r0, [pc, #160]	; (133cc <bt_att_send+0xcc>)
   1332a:	f640 32cf 	movw	r2, #3023	; 0xbcf
   1332e:	f009 fbef 	bl	1cb10 <printk>
   13332:	f640 31cf 	movw	r1, #3023	; 0xbcf
   13336:	4824      	ldr	r0, [pc, #144]	; (133c8 <bt_att_send+0xc8>)
   13338:	f009 fe90 	bl	1d05c <assert_post_action>

	att = att_get(conn);
   1333c:	4628      	mov	r0, r5
   1333e:	f7ff f831 	bl	123a4 <att_get>
	if (!att) {
   13342:	4606      	mov	r6, r0
   13344:	b938      	cbnz	r0, 13356 <bt_att_send+0x56>
		net_buf_unref(buf);
   13346:	4620      	mov	r0, r4
   13348:	f004 fa4c 	bl	177e4 <net_buf_unref>
		return -ENOTCONN;
   1334c:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   13350:	b002      	add	sp, #8
   13352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   13356:	b147      	cbz	r7, 1336a <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   13358:	463b      	mov	r3, r7
   1335a:	4622      	mov	r2, r4
   1335c:	2104      	movs	r1, #4
   1335e:	4628      	mov	r0, r5
   13360:	f8cd 8000 	str.w	r8, [sp]
   13364:	f00b fd47 	bl	1edf6 <bt_l2cap_send_cb>
   13368:	e7f2      	b.n	13350 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   1336a:	f100 070c 	add.w	r7, r0, #12
   1336e:	4621      	mov	r1, r4
   13370:	4638      	mov	r0, r7
   13372:	f004 fa09 	bl	17788 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   13376:	2200      	movs	r2, #0
   13378:	2300      	movs	r3, #0
   1337a:	4638      	mov	r0, r7
   1337c:	f004 f9b0 	bl	176e0 <net_buf_get>
	if (!buf) {
   13380:	4605      	mov	r5, r0
   13382:	b908      	cbnz	r0, 13388 <bt_att_send+0x88>
	return 0;
   13384:	2000      	movs	r0, #0
   13386:	e7e3      	b.n	13350 <bt_att_send+0x50>
	return list->head;
   13388:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1338a:	b1c3      	cbz	r3, 133be <bt_att_send+0xbe>
   1338c:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   13390:	d015      	beq.n	133be <bt_att_send+0xbe>
	return node->next;
   13392:	681c      	ldr	r4, [r3, #0]
   13394:	b10c      	cbz	r4, 1339a <bt_att_send+0x9a>
   13396:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   1339a:	2200      	movs	r2, #0
   1339c:	4629      	mov	r1, r5
   1339e:	f00b ff4b 	bl	1f238 <bt_att_chan_send>
		if (err >= 0) {
   133a2:	2800      	cmp	r0, #0
   133a4:	daee      	bge.n	13384 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   133a6:	b154      	cbz	r4, 133be <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   133a8:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   133ac:	d004      	beq.n	133b8 <bt_att_send+0xb8>
	return node->next;
   133ae:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   133b2:	b10b      	cbz	r3, 133b8 <bt_att_send+0xb8>
   133b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   133b8:	4620      	mov	r0, r4
   133ba:	461c      	mov	r4, r3
   133bc:	e7ed      	b.n	1339a <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   133be:	4629      	mov	r1, r5
   133c0:	4638      	mov	r0, r7
   133c2:	f00e f8c0 	bl	21546 <k_queue_prepend>
   133c6:	e7dd      	b.n	13384 <bt_att_send+0x84>
   133c8:	000251e6 	.word	0x000251e6
   133cc:	00022f17 	.word	0x00022f17

000133d0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   133d0:	b538      	push	{r3, r4, r5, lr}
   133d2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   133d4:	4605      	mov	r5, r0
   133d6:	b950      	cbnz	r0, 133ee <bt_att_req_send+0x1e>
   133d8:	4918      	ldr	r1, [pc, #96]	; (1343c <bt_att_req_send+0x6c>)
   133da:	4819      	ldr	r0, [pc, #100]	; (13440 <bt_att_req_send+0x70>)
   133dc:	f640 32eb 	movw	r2, #3051	; 0xbeb
   133e0:	f009 fb96 	bl	1cb10 <printk>
   133e4:	f640 31eb 	movw	r1, #3051	; 0xbeb
   133e8:	4814      	ldr	r0, [pc, #80]	; (1343c <bt_att_req_send+0x6c>)
   133ea:	f009 fe37 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(req);
   133ee:	b954      	cbnz	r4, 13406 <bt_att_req_send+0x36>
   133f0:	4912      	ldr	r1, [pc, #72]	; (1343c <bt_att_req_send+0x6c>)
   133f2:	4813      	ldr	r0, [pc, #76]	; (13440 <bt_att_req_send+0x70>)
   133f4:	f640 32ec 	movw	r2, #3052	; 0xbec
   133f8:	f009 fb8a 	bl	1cb10 <printk>
   133fc:	f640 31ec 	movw	r1, #3052	; 0xbec
   13400:	480e      	ldr	r0, [pc, #56]	; (1343c <bt_att_req_send+0x6c>)
   13402:	f009 fe2b 	bl	1d05c <assert_post_action>

	att = att_get(conn);
   13406:	4628      	mov	r0, r5
   13408:	f7fe ffcc 	bl	123a4 <att_get>
	if (!att) {
   1340c:	4605      	mov	r5, r0
   1340e:	b930      	cbnz	r0, 1341e <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   13410:	6920      	ldr	r0, [r4, #16]
   13412:	f004 f9e7 	bl	177e4 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   13416:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1341a:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   1341c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1341e:	2300      	movs	r3, #0
   13420:	6023      	str	r3, [r4, #0]
	return list->tail;
   13422:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   13424:	b933      	cbnz	r3, 13434 <bt_att_req_send+0x64>
	list->head = node;
   13426:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   1342a:	4628      	mov	r0, r5
   1342c:	f00b ffbf 	bl	1f3ae <att_req_send_process>
	return 0;
   13430:	2000      	movs	r0, #0
   13432:	e7f3      	b.n	1341c <bt_att_req_send+0x4c>
	parent->next = child;
   13434:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13436:	6084      	str	r4, [r0, #8]
}
   13438:	e7f7      	b.n	1342a <bt_att_req_send+0x5a>
   1343a:	bf00      	nop
   1343c:	000251e6 	.word	0x000251e6
   13440:	00022f17 	.word	0x00022f17

00013444 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   13444:	b510      	push	{r4, lr}
   13446:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   13448:	b350      	cbz	r0, 134a0 <bt_att_req_cancel+0x5c>
   1344a:	b349      	cbz	r1, 134a0 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   1344c:	f7fe ffaa 	bl	123a4 <att_get>
	if (!att) {
   13450:	b330      	cbz	r0, 134a0 <bt_att_req_cancel+0x5c>
	return list->head;
   13452:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13454:	b15b      	cbz	r3, 1346e <bt_att_req_cancel+0x2a>
   13456:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   1345a:	d008      	beq.n	1346e <bt_att_req_cancel+0x2a>
	return node->next;
   1345c:	681b      	ldr	r3, [r3, #0]
   1345e:	b10b      	cbz	r3, 13464 <bt_att_req_cancel+0x20>
   13460:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   13464:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   13468:	4294      	cmp	r4, r2
   1346a:	d006      	beq.n	1347a <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1346c:	b96b      	cbnz	r3, 1348a <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1346e:	3004      	adds	r0, #4
   13470:	4621      	mov	r1, r4
   13472:	f00b fea1 	bl	1f1b8 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   13476:	4620      	mov	r0, r4
   13478:	e003      	b.n	13482 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   1347a:	4620      	mov	r0, r4
	chan->req = &cancel;
   1347c:	4b09      	ldr	r3, [pc, #36]	; (134a4 <bt_att_req_cancel+0x60>)
   1347e:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   13482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   13486:	f00c b81f 	b.w	1f4c8 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1348a:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1348e:	d004      	beq.n	1349a <bt_att_req_cancel+0x56>
	return node->next;
   13490:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13494:	b10a      	cbz	r2, 1349a <bt_att_req_cancel+0x56>
   13496:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1349a:	4619      	mov	r1, r3
   1349c:	4613      	mov	r3, r2
   1349e:	e7e1      	b.n	13464 <bt_att_req_cancel+0x20>
}
   134a0:	bd10      	pop	{r4, pc}
   134a2:	bf00      	nop
   134a4:	20009c58 	.word	0x20009c58

000134a8 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   134a8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   134aa:	4618      	mov	r0, r3
{
   134ac:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   134ae:	4907      	ldr	r1, [pc, #28]	; (134cc <db_hash_set+0x24>)
   134b0:	2210      	movs	r2, #16
   134b2:	47a0      	blx	r4
	if (len < 0) {
   134b4:	1e04      	subs	r4, r0, #0
   134b6:	da06      	bge.n	134c6 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   134b8:	4622      	mov	r2, r4
   134ba:	2145      	movs	r1, #69	; 0x45
   134bc:	4804      	ldr	r0, [pc, #16]	; (134d0 <db_hash_set+0x28>)
   134be:	f009 fb27 	bl	1cb10 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   134c2:	4620      	mov	r0, r4
   134c4:	bd10      	pop	{r4, pc}
	return 0;
   134c6:	2400      	movs	r4, #0
   134c8:	e7fb      	b.n	134c2 <db_hash_set+0x1a>
   134ca:	bf00      	nop
   134cc:	2000b7a8 	.word	0x2000b7a8
   134d0:	0002533b 	.word	0x0002533b

000134d4 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   134d4:	2210      	movs	r2, #16
{
   134d6:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   134d8:	4906      	ldr	r1, [pc, #24]	; (134f4 <db_hash_store+0x20>)
   134da:	4807      	ldr	r0, [pc, #28]	; (134f8 <db_hash_store+0x24>)
   134dc:	f7f8 fb6e 	bl	bbbc <settings_save_one>
	if (err) {
   134e0:	4602      	mov	r2, r0
   134e2:	b128      	cbz	r0, 134f0 <db_hash_store+0x1c>
}
   134e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   134e8:	2145      	movs	r1, #69	; 0x45
   134ea:	4804      	ldr	r0, [pc, #16]	; (134fc <db_hash_store+0x28>)
   134ec:	f009 bb10 	b.w	1cb10 <printk>
}
   134f0:	bd08      	pop	{r3, pc}
   134f2:	bf00      	nop
   134f4:	2000b798 	.word	0x2000b798
   134f8:	00025361 	.word	0x00025361
   134fc:	00025369 	.word	0x00025369

00013500 <find_cf_cfg>:
{
   13500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13502:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13504:	2600      	movs	r6, #0
   13506:	4d0e      	ldr	r5, [pc, #56]	; (13540 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   13508:	462f      	mov	r7, r5
		if (!conn) {
   1350a:	1c6a      	adds	r2, r5, #1
   1350c:	b954      	cbnz	r4, 13524 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1350e:	4669      	mov	r1, sp
   13510:	4610      	mov	r0, r2
   13512:	9400      	str	r4, [sp, #0]
   13514:	f8cd 4003 	str.w	r4, [sp, #3]
   13518:	f00c f902 	bl	1f720 <bt_addr_le_cmp>
   1351c:	b940      	cbnz	r0, 13530 <find_cf_cfg+0x30>
}
   1351e:	4638      	mov	r0, r7
   13520:	b003      	add	sp, #12
   13522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13524:	4620      	mov	r0, r4
   13526:	7829      	ldrb	r1, [r5, #0]
   13528:	f00b fb77 	bl	1ec1a <bt_conn_is_peer_addr_le>
   1352c:	2800      	cmp	r0, #0
   1352e:	d1f6      	bne.n	1351e <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13530:	3601      	adds	r6, #1
   13532:	2e04      	cmp	r6, #4
   13534:	f105 0510 	add.w	r5, r5, #16
   13538:	d1e6      	bne.n	13508 <find_cf_cfg+0x8>
	return NULL;
   1353a:	2700      	movs	r7, #0
   1353c:	e7ef      	b.n	1351e <find_cf_cfg+0x1e>
   1353e:	bf00      	nop
   13540:	20009c74 	.word	0x20009c74

00013544 <find_sc_cfg>:
{
   13544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13546:	4606      	mov	r6, r0
   13548:	460f      	mov	r7, r1
   1354a:	2400      	movs	r4, #0
   1354c:	4d09      	ldr	r5, [pc, #36]	; (13574 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   1354e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13552:	42b3      	cmp	r3, r6
   13554:	d107      	bne.n	13566 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   13556:	4639      	mov	r1, r7
   13558:	4628      	mov	r0, r5
   1355a:	f00c f8e1 	bl	1f720 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1355e:	b910      	cbnz	r0, 13566 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   13560:	4805      	ldr	r0, [pc, #20]	; (13578 <find_sc_cfg+0x34>)
   13562:	4420      	add	r0, r4
}
   13564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13566:	340c      	adds	r4, #12
   13568:	2c30      	cmp	r4, #48	; 0x30
   1356a:	f105 050c 	add.w	r5, r5, #12
   1356e:	d1ee      	bne.n	1354e <find_sc_cfg+0xa>
	return NULL;
   13570:	2000      	movs	r0, #0
   13572:	e7f7      	b.n	13564 <find_sc_cfg+0x20>
   13574:	2000b01f 	.word	0x2000b01f
   13578:	2000b01e 	.word	0x2000b01e

0001357c <gatt_sub_find>:
{
   1357c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1357e:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13580:	2600      	movs	r6, #0
   13582:	4d0e      	ldr	r5, [pc, #56]	; (135bc <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   13584:	462f      	mov	r7, r5
		if (!conn) {
   13586:	1c6a      	adds	r2, r5, #1
   13588:	b954      	cbnz	r4, 135a0 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1358a:	4669      	mov	r1, sp
   1358c:	4610      	mov	r0, r2
   1358e:	9400      	str	r4, [sp, #0]
   13590:	f8cd 4003 	str.w	r4, [sp, #3]
   13594:	f00c f8c4 	bl	1f720 <bt_addr_le_cmp>
   13598:	b940      	cbnz	r0, 135ac <gatt_sub_find+0x30>
}
   1359a:	4638      	mov	r0, r7
   1359c:	b003      	add	sp, #12
   1359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   135a0:	4620      	mov	r0, r4
   135a2:	7829      	ldrb	r1, [r5, #0]
   135a4:	f00b fb39 	bl	1ec1a <bt_conn_is_peer_addr_le>
   135a8:	2800      	cmp	r0, #0
   135aa:	d1f6      	bne.n	1359a <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   135ac:	3601      	adds	r6, #1
   135ae:	2e04      	cmp	r6, #4
   135b0:	f105 0510 	add.w	r5, r5, #16
   135b4:	d1e6      	bne.n	13584 <gatt_sub_find+0x8>
	return NULL;
   135b6:	2700      	movs	r7, #0
   135b8:	e7ef      	b.n	1359a <gatt_sub_find+0x1e>
   135ba:	bf00      	nop
   135bc:	20009d04 	.word	0x20009d04

000135c0 <find_cf_cfg_by_addr>:
{
   135c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135c2:	4606      	mov	r6, r0
   135c4:	460f      	mov	r7, r1
   135c6:	2400      	movs	r4, #0
   135c8:	4d09      	ldr	r5, [pc, #36]	; (135f0 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   135ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   135ce:	42b3      	cmp	r3, r6
   135d0:	d107      	bne.n	135e2 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   135d2:	4629      	mov	r1, r5
   135d4:	4638      	mov	r0, r7
   135d6:	f00c f8a3 	bl	1f720 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   135da:	b910      	cbnz	r0, 135e2 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   135dc:	4805      	ldr	r0, [pc, #20]	; (135f4 <find_cf_cfg_by_addr+0x34>)
   135de:	4420      	add	r0, r4
}
   135e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   135e2:	3410      	adds	r4, #16
   135e4:	2c40      	cmp	r4, #64	; 0x40
   135e6:	f105 0510 	add.w	r5, r5, #16
   135ea:	d1ee      	bne.n	135ca <find_cf_cfg_by_addr+0xa>
	return NULL;
   135ec:	2000      	movs	r0, #0
   135ee:	e7f7      	b.n	135e0 <find_cf_cfg_by_addr+0x20>
   135f0:	20009c75 	.word	0x20009c75
   135f4:	20009c74 	.word	0x20009c74

000135f8 <bt_gatt_attr_write_ccc>:
{
   135f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   135fc:	461f      	mov	r7, r3
   135fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13602:	4604      	mov	r4, r0
   13604:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   13606:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1360a:	2b00      	cmp	r3, #0
   1360c:	d141      	bne.n	13692 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1360e:	1e7b      	subs	r3, r7, #1
   13610:	2b01      	cmp	r3, #1
   13612:	d841      	bhi.n	13698 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   13614:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   13616:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   13618:	4649      	mov	r1, r9
   1361a:	bf14      	ite	ne
   1361c:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   1361e:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   13620:	f00c f881 	bl	1f726 <find_ccc_cfg>
	if (!cfg) {
   13624:	4605      	mov	r5, r0
   13626:	b9b0      	cbnz	r0, 13656 <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   13628:	b916      	cbnz	r6, 13630 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1362a:	4638      	mov	r0, r7
}
   1362c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   13630:	4649      	mov	r1, r9
   13632:	f00c f878 	bl	1f726 <find_ccc_cfg>
		if (!cfg) {
   13636:	4605      	mov	r5, r0
   13638:	b930      	cbnz	r0, 13648 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   1363a:	4819      	ldr	r0, [pc, #100]	; (136a0 <bt_gatt_attr_write_ccc+0xa8>)
   1363c:	2157      	movs	r1, #87	; 0x57
   1363e:	f009 fa67 	bl	1cb10 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13642:	f06f 0010 	mvn.w	r0, #16
   13646:	e7f1      	b.n	1362c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13648:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1364c:	3001      	adds	r0, #1
   1364e:	f00c f8a3 	bl	1f798 <bt_addr_le_copy>
		cfg->id = conn->id;
   13652:	7a23      	ldrb	r3, [r4, #8]
   13654:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   13656:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   1365a:	b973      	cbnz	r3, 1367a <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   1365c:	f8b9 301e 	ldrh.w	r3, [r9, #30]
	cfg->value = value;
   13660:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   13662:	42b3      	cmp	r3, r6
   13664:	d003      	beq.n	1366e <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   13666:	4649      	mov	r1, r9
   13668:	4640      	mov	r0, r8
   1366a:	f00b ffd9 	bl	1f620 <gatt_ccc_changed>
	if (!value) {
   1366e:	2e00      	cmp	r6, #0
   13670:	d1db      	bne.n	1362a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   13672:	4628      	mov	r0, r5
   13674:	f00c f893 	bl	1f79e <clear_ccc_cfg>
   13678:	e7d7      	b.n	1362a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1367a:	4632      	mov	r2, r6
   1367c:	4641      	mov	r1, r8
   1367e:	4620      	mov	r0, r4
   13680:	4798      	blx	r3
		if (write < 0) {
   13682:	2800      	cmp	r0, #0
   13684:	dbd2      	blt.n	1362c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   13686:	1e44      	subs	r4, r0, #1
   13688:	2c01      	cmp	r4, #1
   1368a:	d9e7      	bls.n	1365c <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1368c:	f06f 000d 	mvn.w	r0, #13
   13690:	e7cc      	b.n	1362c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13692:	f06f 0006 	mvn.w	r0, #6
   13696:	e7c9      	b.n	1362c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13698:	f06f 000c 	mvn.w	r0, #12
   1369c:	e7c6      	b.n	1362c <bt_gatt_attr_write_ccc+0x34>
   1369e:	bf00      	nop
   136a0:	00025394 	.word	0x00025394

000136a4 <cf_write>:
{
   136a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   136a8:	461f      	mov	r7, r3
   136aa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   136ae:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   136b0:	2b01      	cmp	r3, #1
{
   136b2:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   136b4:	d845      	bhi.n	13742 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   136b6:	443b      	add	r3, r7
   136b8:	2b01      	cmp	r3, #1
   136ba:	463d      	mov	r5, r7
   136bc:	dc44      	bgt.n	13748 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   136be:	f7ff ff1f 	bl	13500 <find_cf_cfg>
	if (!cfg) {
   136c2:	4604      	mov	r4, r0
   136c4:	b918      	cbnz	r0, 136ce <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   136c6:	f7ff ff1b 	bl	13500 <find_cf_cfg>
	if (!cfg) {
   136ca:	4604      	mov	r4, r0
   136cc:	b1d8      	cbz	r0, 13706 <cf_write+0x62>
   136ce:	4632      	mov	r2, r6
   136d0:	f104 0008 	add.w	r0, r4, #8
   136d4:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   136d8:	4596      	cmp	lr, r2
   136da:	d11d      	bne.n	13718 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   136dc:	b12f      	cbz	r7, 136ea <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   136de:	7833      	ldrb	r3, [r6, #0]
   136e0:	7a22      	ldrb	r2, [r4, #8]
   136e2:	f003 0307 	and.w	r3, r3, #7
   136e6:	4313      	orrs	r3, r2
   136e8:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   136ea:	f108 0188 	add.w	r1, r8, #136	; 0x88
   136ee:	1c60      	adds	r0, r4, #1
   136f0:	f00c f852 	bl	1f798 <bt_addr_le_copy>
	cfg->id = conn->id;
   136f4:	4620      	mov	r0, r4
   136f6:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   136fa:	2101      	movs	r1, #1
   136fc:	f800 3b0c 	strb.w	r3, [r0], #12
   13700:	f00c f85b 	bl	1f7ba <atomic_or>
}
   13704:	e005      	b.n	13712 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   13706:	2157      	movs	r1, #87	; 0x57
   13708:	4812      	ldr	r0, [pc, #72]	; (13754 <cf_write+0xb0>)
   1370a:	f009 fa01 	bl	1cb10 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1370e:	f06f 0510 	mvn.w	r5, #16
}
   13712:	4628      	mov	r0, r5
   13714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   13718:	2300      	movs	r3, #0
   1371a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1371e:	f810 cb01 	ldrb.w	ip, [r0], #1
   13722:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   13726:	fa21 f903 	lsr.w	r9, r1, r3
   1372a:	f019 0f01 	tst.w	r9, #1
   1372e:	d004      	beq.n	1373a <cf_write+0x96>
   13730:	fa2c f903 	lsr.w	r9, ip, r3
   13734:	f019 0f01 	tst.w	r9, #1
   13738:	d109      	bne.n	1374e <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   1373a:	3301      	adds	r3, #1
   1373c:	2b03      	cmp	r3, #3
   1373e:	d1f2      	bne.n	13726 <cf_write+0x82>
   13740:	e7ca      	b.n	136d8 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13742:	f06f 0506 	mvn.w	r5, #6
   13746:	e7e4      	b.n	13712 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13748:	f06f 050c 	mvn.w	r5, #12
   1374c:	e7e1      	b.n	13712 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1374e:	f06f 0512 	mvn.w	r5, #18
   13752:	e7de      	b.n	13712 <cf_write+0x6e>
   13754:	000253b3 	.word	0x000253b3

00013758 <sc_store>:
{
   13758:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1375a:	4605      	mov	r5, r0
   1375c:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   13760:	4604      	mov	r4, r0
   13762:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   13764:	b1ca      	cbz	r2, 1379a <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13766:	ae02      	add	r6, sp, #8
   13768:	2104      	movs	r1, #4
   1376a:	4630      	mov	r0, r6
   1376c:	f009 f936 	bl	1c9dc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   13770:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   13772:	462b      	mov	r3, r5
   13774:	2124      	movs	r1, #36	; 0x24
   13776:	4a0a      	ldr	r2, [pc, #40]	; (137a0 <sc_store+0x48>)
   13778:	a803      	add	r0, sp, #12
   1377a:	f7fa ff45 	bl	e608 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1377e:	2204      	movs	r2, #4
   13780:	f104 0108 	add.w	r1, r4, #8
   13784:	a803      	add	r0, sp, #12
   13786:	f7f8 fa19 	bl	bbbc <settings_save_one>
	if (err) {
   1378a:	4602      	mov	r2, r0
   1378c:	b118      	cbz	r0, 13796 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1378e:	2145      	movs	r1, #69	; 0x45
   13790:	4804      	ldr	r0, [pc, #16]	; (137a4 <sc_store+0x4c>)
   13792:	f009 f9bd 	bl	1cb10 <printk>
}
   13796:	b00c      	add	sp, #48	; 0x30
   13798:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1379a:	9200      	str	r2, [sp, #0]
   1379c:	e7e9      	b.n	13772 <sc_store+0x1a>
   1379e:	bf00      	nop
   137a0:	000256ef 	.word	0x000256ef
   137a4:	000253e4 	.word	0x000253e4

000137a8 <sc_save>:
{
   137a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   137ac:	4680      	mov	r8, r0
   137ae:	460f      	mov	r7, r1
   137b0:	4616      	mov	r6, r2
   137b2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   137b4:	f7ff fec6 	bl	13544 <find_sc_cfg>
	if (!cfg) {
   137b8:	4604      	mov	r4, r0
   137ba:	b998      	cbnz	r0, 137e4 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   137bc:	4669      	mov	r1, sp
   137be:	9000      	str	r0, [sp, #0]
   137c0:	f8cd 0003 	str.w	r0, [sp, #3]
   137c4:	f7ff febe 	bl	13544 <find_sc_cfg>
		if (!cfg) {
   137c8:	4604      	mov	r4, r0
   137ca:	b930      	cbnz	r0, 137da <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   137cc:	2145      	movs	r1, #69	; 0x45
   137ce:	4813      	ldr	r0, [pc, #76]	; (1381c <sc_save+0x74>)
   137d0:	f009 f99e 	bl	1cb10 <printk>
}
   137d4:	b002      	add	sp, #8
   137d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   137da:	4639      	mov	r1, r7
		cfg->id = id;
   137dc:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   137e0:	f00b ffda 	bl	1f798 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   137e4:	8922      	ldrh	r2, [r4, #8]
   137e6:	8963      	ldrh	r3, [r4, #10]
   137e8:	b97a      	cbnz	r2, 1380a <sc_save+0x62>
   137ea:	b983      	cbnz	r3, 1380e <sc_save+0x66>
		cfg->data.start = start;
   137ec:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   137ee:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   137f0:	4621      	mov	r1, r4
   137f2:	f811 0b01 	ldrb.w	r0, [r1], #1
   137f6:	f00b f8d3 	bl	1e9a0 <bt_addr_le_is_bonded>
   137fa:	2800      	cmp	r0, #0
   137fc:	d0ea      	beq.n	137d4 <sc_save+0x2c>
		sc_store(cfg);
   137fe:	4620      	mov	r0, r4
}
   13800:	b002      	add	sp, #8
   13802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   13806:	f7ff bfa7 	b.w	13758 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1380a:	4296      	cmp	r6, r2
   1380c:	d302      	bcc.n	13814 <sc_save+0x6c>
   1380e:	429d      	cmp	r5, r3
   13810:	d8ed      	bhi.n	137ee <sc_save+0x46>
   13812:	e7df      	b.n	137d4 <sc_save+0x2c>
	if (*end < new_end) {
   13814:	429d      	cmp	r5, r3
		*start = new_start;
   13816:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   13818:	d9ea      	bls.n	137f0 <sc_save+0x48>
   1381a:	e7e8      	b.n	137ee <sc_save+0x46>
   1381c:	00025405 	.word	0x00025405

00013820 <sc_set>:
{
   13820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13824:	460e      	mov	r6, r1
   13826:	4690      	mov	r8, r2
   13828:	4699      	mov	r9, r3
	if (!name) {
   1382a:	4604      	mov	r4, r0
{
   1382c:	b087      	sub	sp, #28
	if (!name) {
   1382e:	b948      	cbnz	r0, 13844 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13830:	2145      	movs	r1, #69	; 0x45
   13832:	4829      	ldr	r0, [pc, #164]	; (138d8 <sc_set+0xb8>)
   13834:	f009 f96c 	bl	1cb10 <printk>
		return -EINVAL;
   13838:	f06f 0515 	mvn.w	r5, #21
}
   1383c:	4628      	mov	r0, r5
   1383e:	b007      	add	sp, #28
   13840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13844:	a902      	add	r1, sp, #8
   13846:	f00a fe92 	bl	1e56e <bt_settings_decode_key>
	if (err) {
   1384a:	4605      	mov	r5, r0
   1384c:	b128      	cbz	r0, 1385a <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1384e:	4622      	mov	r2, r4
   13850:	2145      	movs	r1, #69	; 0x45
   13852:	4822      	ldr	r0, [pc, #136]	; (138dc <sc_set+0xbc>)
   13854:	f009 f95c 	bl	1cb10 <printk>
   13858:	e7ee      	b.n	13838 <sc_set+0x18>
	settings_name_next(name, &next);
   1385a:	4620      	mov	r0, r4
   1385c:	a901      	add	r1, sp, #4
   1385e:	f009 fe11 	bl	1d484 <settings_name_next>
	if (!next) {
   13862:	9801      	ldr	r0, [sp, #4]
   13864:	b1d8      	cbz	r0, 1389e <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   13866:	220a      	movs	r2, #10
   13868:	4629      	mov	r1, r5
   1386a:	f00a fd1b 	bl	1e2a4 <strtol>
   1386e:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   13870:	4638      	mov	r0, r7
   13872:	a902      	add	r1, sp, #8
   13874:	f7ff fe66 	bl	13544 <find_sc_cfg>
	if (!cfg && len_rd) {
   13878:	4604      	mov	r4, r0
   1387a:	bb28      	cbnz	r0, 138c8 <sc_set+0xa8>
   1387c:	2e00      	cmp	r6, #0
   1387e:	d0dd      	beq.n	1383c <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13880:	a904      	add	r1, sp, #16
   13882:	9004      	str	r0, [sp, #16]
   13884:	f8cd 0013 	str.w	r0, [sp, #19]
   13888:	f7ff fe5c 	bl	13544 <find_sc_cfg>
		if (!cfg) {
   1388c:	4604      	mov	r4, r0
   1388e:	b940      	cbnz	r0, 138a2 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   13890:	2145      	movs	r1, #69	; 0x45
   13892:	4813      	ldr	r0, [pc, #76]	; (138e0 <sc_set+0xc0>)
   13894:	f009 f93c 	bl	1cb10 <printk>
			return -ENOMEM;
   13898:	f06f 050b 	mvn.w	r5, #11
   1389c:	e7ce      	b.n	1383c <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   1389e:	462f      	mov	r7, r5
   138a0:	e7e6      	b.n	13870 <sc_set+0x50>
		cfg->id = id;
   138a2:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   138a6:	a902      	add	r1, sp, #8
   138a8:	f00b ff76 	bl	1f798 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   138ac:	f104 0108 	add.w	r1, r4, #8
   138b0:	2204      	movs	r2, #4
   138b2:	4648      	mov	r0, r9
   138b4:	47c0      	blx	r8
		if (len < 0) {
   138b6:	1e04      	subs	r4, r0, #0
   138b8:	dac0      	bge.n	1383c <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   138ba:	4622      	mov	r2, r4
   138bc:	2145      	movs	r1, #69	; 0x45
   138be:	4809      	ldr	r0, [pc, #36]	; (138e4 <sc_set+0xc4>)
   138c0:	f009 f926 	bl	1cb10 <printk>
			return len;
   138c4:	4625      	mov	r5, r4
   138c6:	e7b9      	b.n	1383c <sc_set+0x1c>
	if (len_rd) {
   138c8:	2e00      	cmp	r6, #0
   138ca:	d1ef      	bne.n	138ac <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   138cc:	220c      	movs	r2, #12
   138ce:	4631      	mov	r1, r6
   138d0:	f00a fe01 	bl	1e4d6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   138d4:	e7b2      	b.n	1383c <sc_set+0x1c>
   138d6:	bf00      	nop
   138d8:	000240ee 	.word	0x000240ee
   138dc:	00025429 	.word	0x00025429
   138e0:	0002544a 	.word	0x0002544a
   138e4:	0002533b 	.word	0x0002533b

000138e8 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   138e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138ec:	4606      	mov	r6, r0
   138ee:	4688      	mov	r8, r1
   138f0:	4617      	mov	r7, r2
	if (params) {
   138f2:	461c      	mov	r4, r3
   138f4:	b31b      	cbz	r3, 1393e <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   138f6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   138fa:	2100      	movs	r1, #0
   138fc:	f7ff fc1a 	bl	13134 <bt_att_req_alloc>
		if (!req) {
   13900:	4605      	mov	r5, r0
   13902:	b920      	cbnz	r0, 1390e <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   13904:	f06f 040b 	mvn.w	r4, #11
}
   13908:	4620      	mov	r0, r4
   1390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   1390e:	2300      	movs	r3, #0
		req->user_data = params;
   13910:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
   13912:	4601      	mov	r1, r0
		req->buf = buf;
   13914:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   13918:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   1391a:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   1391c:	4630      	mov	r0, r6
   1391e:	f7ff fd57 	bl	133d0 <bt_att_req_send>
		if (err) {
   13922:	4604      	mov	r4, r0
   13924:	2800      	cmp	r0, #0
   13926:	d0ef      	beq.n	13908 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   13928:	4628      	mov	r0, r5
   1392a:	f7ff fc19 	bl	13160 <bt_att_req_free>
	if (err) {
   1392e:	2c00      	cmp	r4, #0
   13930:	d0ea      	beq.n	13908 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   13932:	4622      	mov	r2, r4
   13934:	2145      	movs	r1, #69	; 0x45
   13936:	4804      	ldr	r0, [pc, #16]	; (13948 <gatt_send.constprop.0+0x60>)
   13938:	f009 f8ea 	bl	1cb10 <printk>
   1393c:	e7e4      	b.n	13908 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   1393e:	461a      	mov	r2, r3
   13940:	f7ff fcde 	bl	13300 <bt_att_send>
   13944:	4604      	mov	r4, r0
   13946:	e7f2      	b.n	1392e <gatt_send.constprop.0+0x46>
   13948:	00025471 	.word	0x00025471

0001394c <cf_set>:
{
   1394c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13950:	4689      	mov	r9, r1
   13952:	4617      	mov	r7, r2
   13954:	4698      	mov	r8, r3
	if (!name) {
   13956:	4605      	mov	r5, r0
{
   13958:	b085      	sub	sp, #20
	if (!name) {
   1395a:	b948      	cbnz	r0, 13970 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   1395c:	2145      	movs	r1, #69	; 0x45
   1395e:	4826      	ldr	r0, [pc, #152]	; (139f8 <cf_set+0xac>)
   13960:	f009 f8d6 	bl	1cb10 <printk>
		return -EINVAL;
   13964:	f06f 0415 	mvn.w	r4, #21
}
   13968:	4620      	mov	r0, r4
   1396a:	b005      	add	sp, #20
   1396c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13970:	a902      	add	r1, sp, #8
   13972:	f00a fdfc 	bl	1e56e <bt_settings_decode_key>
	if (err) {
   13976:	4604      	mov	r4, r0
   13978:	b128      	cbz	r0, 13986 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1397a:	462a      	mov	r2, r5
   1397c:	2145      	movs	r1, #69	; 0x45
   1397e:	481f      	ldr	r0, [pc, #124]	; (139fc <cf_set+0xb0>)
   13980:	f009 f8c6 	bl	1cb10 <printk>
   13984:	e7ee      	b.n	13964 <cf_set+0x18>
	settings_name_next(name, &next);
   13986:	4628      	mov	r0, r5
   13988:	a901      	add	r1, sp, #4
   1398a:	f009 fd7b 	bl	1d484 <settings_name_next>
	if (!next) {
   1398e:	9801      	ldr	r0, [sp, #4]
   13990:	b1a8      	cbz	r0, 139be <cf_set+0x72>
		id = strtol(next, NULL, 10);
   13992:	220a      	movs	r2, #10
   13994:	4621      	mov	r1, r4
   13996:	f00a fc85 	bl	1e2a4 <strtol>
   1399a:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1399c:	4630      	mov	r0, r6
   1399e:	a902      	add	r1, sp, #8
   139a0:	f7ff fe0e 	bl	135c0 <find_cf_cfg_by_addr>
	if (!cfg) {
   139a4:	4605      	mov	r5, r0
   139a6:	b988      	cbnz	r0, 139cc <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   139a8:	f7ff fdaa 	bl	13500 <find_cf_cfg>
		if (!cfg) {
   139ac:	4605      	mov	r5, r0
   139ae:	b940      	cbnz	r0, 139c2 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   139b0:	2145      	movs	r1, #69	; 0x45
   139b2:	4813      	ldr	r0, [pc, #76]	; (13a00 <cf_set+0xb4>)
   139b4:	f009 f8ac 	bl	1cb10 <printk>
			return -ENOMEM;
   139b8:	f06f 040b 	mvn.w	r4, #11
   139bc:	e7d4      	b.n	13968 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   139be:	4626      	mov	r6, r4
   139c0:	e7ec      	b.n	1399c <cf_set+0x50>
		cfg->id = id;
   139c2:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   139c6:	a902      	add	r1, sp, #8
   139c8:	f00b fee6 	bl	1f798 <bt_addr_le_copy>
	if (len_rd) {
   139cc:	f1b9 0f00 	cmp.w	r9, #0
   139d0:	d00d      	beq.n	139ee <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   139d2:	f105 0108 	add.w	r1, r5, #8
   139d6:	2201      	movs	r2, #1
   139d8:	4640      	mov	r0, r8
   139da:	47b8      	blx	r7
		if (len < 0) {
   139dc:	1e05      	subs	r5, r0, #0
   139de:	dac3      	bge.n	13968 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   139e0:	462a      	mov	r2, r5
   139e2:	2145      	movs	r1, #69	; 0x45
   139e4:	4807      	ldr	r0, [pc, #28]	; (13a04 <cf_set+0xb8>)
   139e6:	f009 f893 	bl	1cb10 <printk>
			return len;
   139ea:	462c      	mov	r4, r5
   139ec:	e7bc      	b.n	13968 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   139ee:	4628      	mov	r0, r5
   139f0:	f00b fefd 	bl	1f7ee <clear_cf_cfg>
   139f4:	e7b8      	b.n	13968 <cf_set+0x1c>
   139f6:	bf00      	nop
   139f8:	000240ee 	.word	0x000240ee
   139fc:	00025429 	.word	0x00025429
   13a00:	00025490 	.word	0x00025490
   13a04:	0002533b 	.word	0x0002533b

00013a08 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   13a08:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a0a:	6881      	ldr	r1, [r0, #8]
{
   13a0c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a0e:	4a07      	ldr	r2, [pc, #28]	; (13a2c <remove_peer_from_attr+0x24>)
   13a10:	4291      	cmp	r1, r2
   13a12:	d109      	bne.n	13a28 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   13a14:	791a      	ldrb	r2, [r3, #4]
   13a16:	6819      	ldr	r1, [r3, #0]
   13a18:	68c0      	ldr	r0, [r0, #12]
   13a1a:	f00b fea3 	bl	1f764 <ccc_find_cfg>
	if (cfg) {
   13a1e:	b118      	cbz	r0, 13a28 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13a20:	220a      	movs	r2, #10
   13a22:	2100      	movs	r1, #0
   13a24:	f00a fd57 	bl	1e4d6 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   13a28:	2001      	movs	r0, #1
   13a2a:	bd08      	pop	{r3, pc}
   13a2c:	000135f9 	.word	0x000135f9

00013a30 <ccc_load>:
{
   13a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a32:	4b21      	ldr	r3, [pc, #132]	; (13ab8 <ccc_load+0x88>)
{
   13a34:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a36:	6882      	ldr	r2, [r0, #8]
   13a38:	429a      	cmp	r2, r3
   13a3a:	d002      	beq.n	13a42 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   13a3c:	2001      	movs	r0, #1
}
   13a3e:	b002      	add	sp, #8
   13a40:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   13a42:	68a3      	ldr	r3, [r4, #8]
   13a44:	68c6      	ldr	r6, [r0, #12]
   13a46:	b94b      	cbnz	r3, 13a5c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   13a48:	4630      	mov	r0, r6
   13a4a:	7922      	ldrb	r2, [r4, #4]
   13a4c:	6821      	ldr	r1, [r4, #0]
   13a4e:	f00b fe89 	bl	1f764 <ccc_find_cfg>
	if (!cfg) {
   13a52:	2800      	cmp	r0, #0
   13a54:	d0f2      	beq.n	13a3c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   13a56:	f00b fea2 	bl	1f79e <clear_ccc_cfg>
   13a5a:	e7ef      	b.n	13a3c <ccc_load+0xc>
	} else if (!load->count) {
   13a5c:	68e0      	ldr	r0, [r4, #12]
   13a5e:	2800      	cmp	r0, #0
   13a60:	d0ed      	beq.n	13a3e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   13a62:	881b      	ldrh	r3, [r3, #0]
   13a64:	4299      	cmp	r1, r3
   13a66:	d00a      	beq.n	13a7e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   13a68:	d9e8      	bls.n	13a3c <ccc_load+0xc>
	load->count--;
   13a6a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   13a6c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   13a6e:	3801      	subs	r0, #1
	load->entry++;
   13a70:	3304      	adds	r3, #4
	load->count--;
   13a72:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13a74:	3800      	subs	r0, #0
   13a76:	bf18      	it	ne
   13a78:	2001      	movne	r0, #1
	load->entry++;
   13a7a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13a7c:	e7df      	b.n	13a3e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   13a7e:	4630      	mov	r0, r6
   13a80:	7922      	ldrb	r2, [r4, #4]
   13a82:	6821      	ldr	r1, [r4, #0]
   13a84:	f00b fe6e 	bl	1f764 <ccc_find_cfg>
	if (!cfg) {
   13a88:	4605      	mov	r5, r0
   13a8a:	b980      	cbnz	r0, 13aae <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   13a8c:	9000      	str	r0, [sp, #0]
   13a8e:	4602      	mov	r2, r0
   13a90:	f8cd 0003 	str.w	r0, [sp, #3]
   13a94:	4669      	mov	r1, sp
   13a96:	4630      	mov	r0, r6
   13a98:	f00b fe64 	bl	1f764 <ccc_find_cfg>
		if (!cfg) {
   13a9c:	4605      	mov	r5, r0
   13a9e:	2800      	cmp	r0, #0
   13aa0:	d0e3      	beq.n	13a6a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   13aa2:	6821      	ldr	r1, [r4, #0]
   13aa4:	3001      	adds	r0, #1
   13aa6:	f00b fe77 	bl	1f798 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   13aaa:	7923      	ldrb	r3, [r4, #4]
   13aac:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   13aae:	68a3      	ldr	r3, [r4, #8]
   13ab0:	885b      	ldrh	r3, [r3, #2]
   13ab2:	812b      	strh	r3, [r5, #8]
   13ab4:	e7d9      	b.n	13a6a <ccc_load+0x3a>
   13ab6:	bf00      	nop
   13ab8:	000135f9 	.word	0x000135f9

00013abc <ccc_save>:
{
   13abc:	b538      	push	{r3, r4, r5, lr}
   13abe:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13ac0:	4b0b      	ldr	r3, [pc, #44]	; (13af0 <ccc_save+0x34>)
   13ac2:	6882      	ldr	r2, [r0, #8]
{
   13ac4:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   13ac6:	429a      	cmp	r2, r3
   13ac8:	d10f      	bne.n	13aea <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13aca:	7922      	ldrb	r2, [r4, #4]
   13acc:	6821      	ldr	r1, [r4, #0]
   13ace:	68c0      	ldr	r0, [r0, #12]
   13ad0:	f00b fe48 	bl	1f764 <ccc_find_cfg>
	if (!cfg) {
   13ad4:	b148      	cbz	r0, 13aea <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   13ad6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   13ada:	8901      	ldrh	r1, [r0, #8]
   13adc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13ae0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   13ae2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   13ae4:	8151      	strh	r1, [r2, #10]
	save->count++;
   13ae6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   13aea:	2001      	movs	r0, #1
   13aec:	bd38      	pop	{r3, r4, r5, pc}
   13aee:	bf00      	nop
   13af0:	000135f9 	.word	0x000135f9

00013af4 <gatt_indicate>:
{
   13af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13af8:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   13afa:	8a92      	ldrh	r2, [r2, #20]
{
   13afc:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13afe:	3202      	adds	r2, #2
   13b00:	211d      	movs	r1, #29
{
   13b02:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13b04:	f7ff f892 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   13b08:	4605      	mov	r5, r0
   13b0a:	b1e8      	cbz	r0, 13b48 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13b0c:	f100 0808 	add.w	r8, r0, #8
   13b10:	2102      	movs	r1, #2
   13b12:	4640      	mov	r0, r8
   13b14:	f003 ff7c 	bl	17a10 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   13b18:	4606      	mov	r6, r0
   13b1a:	8aa1      	ldrh	r1, [r4, #20]
   13b1c:	f826 9b02 	strh.w	r9, [r6], #2
   13b20:	4640      	mov	r0, r8
   13b22:	f003 ff75 	bl	17a10 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   13b26:	4630      	mov	r0, r6
   13b28:	8aa2      	ldrh	r2, [r4, #20]
   13b2a:	6921      	ldr	r1, [r4, #16]
   13b2c:	f00a fca8 	bl	1e480 <memcpy>
	if (!params->func) {
   13b30:	68a3      	ldr	r3, [r4, #8]
   13b32:	b933      	cbnz	r3, 13b42 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   13b34:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13b36:	4629      	mov	r1, r5
   13b38:	4638      	mov	r0, r7
}
   13b3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13b3e:	f7ff bed3 	b.w	138e8 <gatt_send.constprop.0>
   13b42:	4623      	mov	r3, r4
   13b44:	4a04      	ldr	r2, [pc, #16]	; (13b58 <gatt_indicate+0x64>)
   13b46:	e7f6      	b.n	13b36 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   13b48:	2157      	movs	r1, #87	; 0x57
   13b4a:	4804      	ldr	r0, [pc, #16]	; (13b5c <gatt_indicate+0x68>)
   13b4c:	f008 ffe0 	bl	1cb10 <printk>
}
   13b50:	f06f 000b 	mvn.w	r0, #11
   13b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b58:	0001f645 	.word	0x0001f645
   13b5c:	000254b7 	.word	0x000254b7

00013b60 <gatt_notify>:
{
   13b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b64:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   13b66:	8992      	ldrh	r2, [r2, #12]
{
   13b68:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13b6a:	3202      	adds	r2, #2
   13b6c:	211b      	movs	r1, #27
{
   13b6e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13b70:	f7ff f85c 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   13b74:	4605      	mov	r5, r0
   13b76:	b1c8      	cbz	r0, 13bac <gatt_notify+0x4c>
   13b78:	f100 0908 	add.w	r9, r0, #8
   13b7c:	2102      	movs	r1, #2
   13b7e:	4648      	mov	r0, r9
   13b80:	f003 ff46 	bl	17a10 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   13b84:	4606      	mov	r6, r0
   13b86:	89a1      	ldrh	r1, [r4, #12]
   13b88:	f826 8b02 	strh.w	r8, [r6], #2
   13b8c:	4648      	mov	r0, r9
   13b8e:	f003 ff3f 	bl	17a10 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   13b92:	89a2      	ldrh	r2, [r4, #12]
   13b94:	68a1      	ldr	r1, [r4, #8]
   13b96:	4630      	mov	r0, r6
   13b98:	f00a fc72 	bl	1e480 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   13b9c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13ba0:	4629      	mov	r1, r5
   13ba2:	4638      	mov	r0, r7
}
   13ba4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   13ba8:	f7ff bbaa 	b.w	13300 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   13bac:	2157      	movs	r1, #87	; 0x57
   13bae:	4803      	ldr	r0, [pc, #12]	; (13bbc <gatt_notify+0x5c>)
   13bb0:	f008 ffae 	bl	1cb10 <printk>
}
   13bb4:	f06f 000b 	mvn.w	r0, #11
   13bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bbc:	000254e3 	.word	0x000254e3

00013bc0 <notify_cb>:
{
   13bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13bc4:	4b38      	ldr	r3, [pc, #224]	; (13ca8 <notify_cb+0xe8>)
{
   13bc6:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13bc8:	6882      	ldr	r2, [r0, #8]
{
   13bca:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13bcc:	429a      	cmp	r2, r3
   13bce:	d003      	beq.n	13bd8 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13bd0:	2001      	movs	r0, #1
}
   13bd2:	b003      	add	sp, #12
   13bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   13bd8:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13bdc:	4b33      	ldr	r3, [pc, #204]	; (13cac <notify_cb+0xec>)
   13bde:	4599      	cmp	r9, r3
   13be0:	d01a      	beq.n	13c18 <notify_cb+0x58>
   13be2:	f04f 0b00 	mov.w	fp, #0
   13be6:	f109 0701 	add.w	r7, r9, #1
   13bea:	f109 0a1f 	add.w	sl, r9, #31
		if (cfg->value != data->type) {
   13bee:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13bf2:	89a3      	ldrh	r3, [r4, #12]
   13bf4:	429a      	cmp	r2, r3
   13bf6:	d10b      	bne.n	13c10 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13bf8:	4639      	mov	r1, r7
   13bfa:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13bfe:	f7fd fe75 	bl	118ec <bt_conn_lookup_addr_le>
		if (!conn) {
   13c02:	4605      	mov	r5, r0
   13c04:	b120      	cbz	r0, 13c10 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   13c06:	7b43      	ldrb	r3, [r0, #13]
   13c08:	2b07      	cmp	r3, #7
   13c0a:	d029      	beq.n	13c60 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13c0c:	f7fd fd50 	bl	116b0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13c10:	370a      	adds	r7, #10
   13c12:	4557      	cmp	r7, sl
   13c14:	d1eb      	bne.n	13bee <notify_cb+0x2e>
   13c16:	e7db      	b.n	13bd0 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13c18:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13c1a:	4637      	mov	r7, r6
   13c1c:	4d24      	ldr	r5, [pc, #144]	; (13cb0 <notify_cb+0xf0>)
   13c1e:	4669      	mov	r1, sp
   13c20:	4628      	mov	r0, r5
   13c22:	9700      	str	r7, [sp, #0]
   13c24:	f8cd 7003 	str.w	r7, [sp, #3]
   13c28:	f00b fd7a 	bl	1f720 <bt_addr_le_cmp>
   13c2c:	b178      	cbz	r0, 13c4e <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13c2e:	2207      	movs	r2, #7
   13c30:	4629      	mov	r1, r5
   13c32:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13c36:	f7fd fe99 	bl	1196c <bt_conn_lookup_state_le>
			if (!conn) {
   13c3a:	b970      	cbnz	r0, 13c5a <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13c3c:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13c3e:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13c40:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13c42:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13c46:	8853      	ldrh	r3, [r2, #2]
   13c48:	8812      	ldrh	r2, [r2, #0]
   13c4a:	f7ff fdad 	bl	137a8 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13c4e:	3601      	adds	r6, #1
   13c50:	2e04      	cmp	r6, #4
   13c52:	f105 050c 	add.w	r5, r5, #12
   13c56:	d1e2      	bne.n	13c1e <notify_cb+0x5e>
   13c58:	e7c3      	b.n	13be2 <notify_cb+0x22>
			bt_conn_unref(conn);
   13c5a:	f7fd fd29 	bl	116b0 <bt_conn_unref>
   13c5e:	e7f6      	b.n	13c4e <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13c60:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   13c64:	b123      	cbz	r3, 13c70 <notify_cb+0xb0>
   13c66:	4641      	mov	r1, r8
   13c68:	4798      	blx	r3
   13c6a:	b908      	cbnz	r0, 13c70 <notify_cb+0xb0>
			bt_conn_unref(conn);
   13c6c:	4628      	mov	r0, r5
   13c6e:	e7cd      	b.n	13c0c <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13c70:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13c72:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13c74:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   13c76:	88a1      	ldrh	r1, [r4, #4]
   13c78:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   13c7a:	d10f      	bne.n	13c9c <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13c7c:	f7ff ff3a 	bl	13af4 <gatt_indicate>
			if (err == 0) {
   13c80:	4606      	mov	r6, r0
   13c82:	b918      	cbnz	r0, 13c8c <notify_cb+0xcc>
				data->ind_params->_ref++;
   13c84:	6922      	ldr	r2, [r4, #16]
   13c86:	7d93      	ldrb	r3, [r2, #22]
   13c88:	3301      	adds	r3, #1
   13c8a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13c8c:	4628      	mov	r0, r5
   13c8e:	f7fd fd0f 	bl	116b0 <bt_conn_unref>
		if (err < 0) {
   13c92:	2e00      	cmp	r6, #0
   13c94:	db06      	blt.n	13ca4 <notify_cb+0xe4>
		data->err = 0;
   13c96:	f8c4 b008 	str.w	fp, [r4, #8]
   13c9a:	e7b9      	b.n	13c10 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   13c9c:	f7ff ff60 	bl	13b60 <gatt_notify>
   13ca0:	4606      	mov	r6, r0
   13ca2:	e7f3      	b.n	13c8c <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   13ca4:	2000      	movs	r0, #0
   13ca6:	e794      	b.n	13bd2 <notify_cb+0x12>
   13ca8:	000135f9 	.word	0x000135f9
   13cac:	20008388 	.word	0x20008388
   13cb0:	2000b01f 	.word	0x2000b01f

00013cb4 <bt_gatt_clear_sc>:
{
   13cb4:	b570      	push	{r4, r5, r6, lr}
   13cb6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13cb8:	f7ff fc44 	bl	13544 <find_sc_cfg>
	if (!cfg) {
   13cbc:	4604      	mov	r4, r0
   13cbe:	b1e8      	cbz	r0, 13cfc <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13cc0:	4605      	mov	r5, r0
   13cc2:	f815 2b01 	ldrb.w	r2, [r5], #1
   13cc6:	b1e2      	cbz	r2, 13d02 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13cc8:	ae02      	add	r6, sp, #8
   13cca:	2104      	movs	r1, #4
   13ccc:	4630      	mov	r0, r6
   13cce:	f008 fe85 	bl	1c9dc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13cd2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13cd4:	4a0c      	ldr	r2, [pc, #48]	; (13d08 <bt_gatt_clear_sc+0x54>)
   13cd6:	462b      	mov	r3, r5
   13cd8:	2124      	movs	r1, #36	; 0x24
   13cda:	a803      	add	r0, sp, #12
   13cdc:	f7fa fc94 	bl	e608 <bt_settings_encode_key>
		err = settings_delete(key);
   13ce0:	a803      	add	r0, sp, #12
   13ce2:	f009 fba8 	bl	1d436 <settings_delete>
		if (err) {
   13ce6:	4602      	mov	r2, r0
   13ce8:	b118      	cbz	r0, 13cf2 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13cea:	2145      	movs	r1, #69	; 0x45
   13cec:	4807      	ldr	r0, [pc, #28]	; (13d0c <bt_gatt_clear_sc+0x58>)
   13cee:	f008 ff0f 	bl	1cb10 <printk>
	memset(cfg, 0, sizeof(*cfg));
   13cf2:	220c      	movs	r2, #12
   13cf4:	2100      	movs	r1, #0
   13cf6:	4620      	mov	r0, r4
   13cf8:	f00a fbed 	bl	1e4d6 <memset>
}
   13cfc:	2000      	movs	r0, #0
   13cfe:	b00c      	add	sp, #48	; 0x30
   13d00:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13d02:	9200      	str	r2, [sp, #0]
   13d04:	e7e6      	b.n	13cd4 <bt_gatt_clear_sc+0x20>
   13d06:	bf00      	nop
   13d08:	000256ef 	.word	0x000256ef
   13d0c:	00025511 	.word	0x00025511

00013d10 <sc_clear>:
{
   13d10:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d12:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13d16:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d18:	4631      	mov	r1, r6
   13d1a:	7a00      	ldrb	r0, [r0, #8]
   13d1c:	f00a fe40 	bl	1e9a0 <bt_addr_le_is_bonded>
   13d20:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13d22:	4631      	mov	r1, r6
   13d24:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d26:	b14d      	cbz	r5, 13d3c <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13d28:	f7ff ffc4 	bl	13cb4 <bt_gatt_clear_sc>
		if (err) {
   13d2c:	4602      	mov	r2, r0
   13d2e:	b170      	cbz	r0, 13d4e <sc_clear+0x3e>
}
   13d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13d34:	2145      	movs	r1, #69	; 0x45
   13d36:	4806      	ldr	r0, [pc, #24]	; (13d50 <sc_clear+0x40>)
   13d38:	f008 beea 	b.w	1cb10 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13d3c:	f7ff fc02 	bl	13544 <find_sc_cfg>
		if (cfg) {
   13d40:	b128      	cbz	r0, 13d4e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13d42:	4629      	mov	r1, r5
}
   13d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13d48:	220c      	movs	r2, #12
   13d4a:	f00a bbc4 	b.w	1e4d6 <memset>
}
   13d4e:	bd70      	pop	{r4, r5, r6, pc}
   13d50:	00025533 	.word	0x00025533

00013d54 <disconnected_cb>:
{
   13d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d58:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13d5a:	4b25      	ldr	r3, [pc, #148]	; (13df0 <disconnected_cb+0x9c>)
   13d5c:	6882      	ldr	r2, [r0, #8]
{
   13d5e:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13d60:	429a      	cmp	r2, r3
   13d62:	d12f      	bne.n	13dc4 <disconnected_cb+0x70>
	ccc = attr->user_data;
   13d64:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13d66:	8beb      	ldrh	r3, [r5, #30]
   13d68:	b363      	cbz	r3, 13dc4 <disconnected_cb+0x70>
	value_used = false;
   13d6a:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13d6e:	f8df b084 	ldr.w	fp, [pc, #132]	; 13df4 <disconnected_cb+0xa0>
   13d72:	1c6c      	adds	r4, r5, #1
   13d74:	f105 0a1f 	add.w	sl, r5, #31
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d78:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13d7c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13d80:	b19b      	cbz	r3, 13daa <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13d82:	4622      	mov	r2, r4
   13d84:	4630      	mov	r0, r6
   13d86:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13d8a:	f00a ff46 	bl	1ec1a <bt_conn_is_peer_addr_le>
   13d8e:	b9e0      	cbnz	r0, 13dca <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13d90:	4621      	mov	r1, r4
   13d92:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13d96:	f7fd fda9 	bl	118ec <bt_conn_lookup_addr_le>
			if (tmp) {
   13d9a:	b130      	cbz	r0, 13daa <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   13d9c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   13d9e:	2b07      	cmp	r3, #7
   13da0:	bf08      	it	eq
   13da2:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13da6:	f7fd fc83 	bl	116b0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13daa:	340a      	adds	r4, #10
   13dac:	45a2      	cmp	sl, r4
   13dae:	d1e5      	bne.n	13d7c <disconnected_cb+0x28>
	if (!value_used) {
   13db0:	f1b8 0f00 	cmp.w	r8, #0
   13db4:	d106      	bne.n	13dc4 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   13db6:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
   13db8:	f8a5 801e 	strh.w	r8, [r5, #30]
		if (ccc->cfg_changed) {
   13dbc:	b113      	cbz	r3, 13dc4 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   13dbe:	4641      	mov	r1, r8
   13dc0:	4638      	mov	r0, r7
   13dc2:	4798      	blx	r3
}
   13dc4:	2001      	movs	r0, #1
   13dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13dca:	4649      	mov	r1, r9
   13dcc:	7a30      	ldrb	r0, [r6, #8]
   13dce:	f00a fde7 	bl	1e9a0 <bt_addr_le_is_bonded>
   13dd2:	b940      	cbnz	r0, 13de6 <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   13dd4:	455d      	cmp	r5, fp
   13dd6:	d102      	bne.n	13dde <disconnected_cb+0x8a>
					sc_clear(conn);
   13dd8:	4630      	mov	r0, r6
   13dda:	f7ff ff99 	bl	13d10 <sc_clear>
				clear_ccc_cfg(cfg);
   13dde:	1e60      	subs	r0, r4, #1
   13de0:	f00b fcdd 	bl	1f79e <clear_ccc_cfg>
   13de4:	e7e1      	b.n	13daa <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13de6:	4649      	mov	r1, r9
   13de8:	4620      	mov	r0, r4
   13dea:	f00b fcd5 	bl	1f798 <bt_addr_le_copy>
   13dee:	e7dc      	b.n	13daa <disconnected_cb+0x56>
   13df0:	000135f9 	.word	0x000135f9
   13df4:	20008388 	.word	0x20008388

00013df8 <sc_commit>:
{
   13df8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13dfa:	490b      	ldr	r1, [pc, #44]	; (13e28 <sc_commit+0x30>)
   13dfc:	e8d1 3fef 	ldaex	r3, [r1]
   13e00:	f023 0302 	bic.w	r3, r3, #2
   13e04:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13e08:	2a00      	cmp	r2, #0
   13e0a:	d1f7      	bne.n	13dfc <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13e0c:	4608      	mov	r0, r1
   13e0e:	f00b fcdf 	bl	1f7d0 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13e12:	07c3      	lsls	r3, r0, #31
   13e14:	d506      	bpl.n	13e24 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13e16:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13e1a:	2300      	movs	r3, #0
   13e1c:	4803      	ldr	r0, [pc, #12]	; (13e2c <sc_commit+0x34>)
   13e1e:	3930      	subs	r1, #48	; 0x30
   13e20:	f007 ff18 	bl	1bc54 <k_delayed_work_submit_to_queue>
}
   13e24:	2000      	movs	r0, #0
   13e26:	bd08      	pop	{r3, pc}
   13e28:	20008f40 	.word	0x20008f40
   13e2c:	20009638 	.word	0x20009638

00013e30 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e34:	4688      	mov	r8, r1
   13e36:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13e38:	2112      	movs	r1, #18
   13e3a:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13e3c:	4606      	mov	r6, r0
   13e3e:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13e40:	f7fe fef4 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   13e44:	4604      	mov	r4, r0
   13e46:	b1c0      	cbz	r0, 13e7a <gatt_write_ccc.constprop.0+0x4a>
   13e48:	f100 0908 	add.w	r9, r0, #8
   13e4c:	2102      	movs	r1, #2
   13e4e:	4648      	mov	r0, r9
   13e50:	f003 fdde 	bl	17a10 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13e54:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13e56:	f8a0 8000 	strh.w	r8, [r0]
   13e5a:	4648      	mov	r0, r9
   13e5c:	f00c fcb3 	bl	207c6 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13e60:	2104      	movs	r1, #4
   13e62:	f105 0010 	add.w	r0, r5, #16
   13e66:	f00b fca8 	bl	1f7ba <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13e6a:	462b      	mov	r3, r5
   13e6c:	4621      	mov	r1, r4
   13e6e:	4630      	mov	r0, r6
}
   13e70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13e74:	4a03      	ldr	r2, [pc, #12]	; (13e84 <gatt_write_ccc.constprop.0+0x54>)
   13e76:	f7ff bd37 	b.w	138e8 <gatt_send.constprop.0>
}
   13e7a:	f06f 000b 	mvn.w	r0, #11
   13e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e82:	bf00      	nop
   13e84:	0001f87d 	.word	0x0001f87d

00013e88 <sc_indicate_rsp>:
{
   13e88:	b510      	push	{r4, lr}
   13e8a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e8c:	4910      	ldr	r1, [pc, #64]	; (13ed0 <sc_indicate_rsp+0x48>)
   13e8e:	e8d1 3fef 	ldaex	r3, [r1]
   13e92:	f023 0302 	bic.w	r3, r3, #2
   13e96:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13e9a:	2a00      	cmp	r2, #0
   13e9c:	d1f7      	bne.n	13e8e <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13e9e:	4608      	mov	r0, r1
   13ea0:	f00b fc96 	bl	1f7d0 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13ea4:	07c2      	lsls	r2, r0, #31
   13ea6:	d505      	bpl.n	13eb4 <sc_indicate_rsp+0x2c>
   13ea8:	2200      	movs	r2, #0
   13eaa:	2300      	movs	r3, #0
   13eac:	4809      	ldr	r0, [pc, #36]	; (13ed4 <sc_indicate_rsp+0x4c>)
   13eae:	3930      	subs	r1, #48	; 0x30
   13eb0:	f007 fed0 	bl	1bc54 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13eb4:	4620      	mov	r0, r4
   13eb6:	f7ff fb23 	bl	13500 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13eba:	b140      	cbz	r0, 13ece <sc_indicate_rsp+0x46>
   13ebc:	7a03      	ldrb	r3, [r0, #8]
   13ebe:	07db      	lsls	r3, r3, #31
   13ec0:	d505      	bpl.n	13ece <sc_indicate_rsp+0x46>
}
   13ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ec6:	2101      	movs	r1, #1
   13ec8:	300c      	adds	r0, #12
   13eca:	f00b bc76 	b.w	1f7ba <atomic_or>
   13ece:	bd10      	pop	{r4, pc}
   13ed0:	20008f40 	.word	0x20008f40
   13ed4:	20009638 	.word	0x20009638

00013ed8 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13ed8:	2201      	movs	r2, #1
{
   13eda:	b570      	push	{r4, r5, r6, lr}
   13edc:	4b26      	ldr	r3, [pc, #152]	; (13f78 <bt_gatt_init+0xa0>)
   13ede:	e8d3 1fef 	ldaex	r1, [r3]
   13ee2:	2900      	cmp	r1, #0
   13ee4:	d103      	bne.n	13eee <bt_gatt_init+0x16>
   13ee6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13eea:	2800      	cmp	r0, #0
   13eec:	d1f7      	bne.n	13ede <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13eee:	d142      	bne.n	13f76 <bt_gatt_init+0x9e>
   13ef0:	4b22      	ldr	r3, [pc, #136]	; (13f7c <bt_gatt_init+0xa4>)
   13ef2:	e8d3 1fef 	ldaex	r1, [r3]
   13ef6:	2900      	cmp	r1, #0
   13ef8:	d103      	bne.n	13f02 <bt_gatt_init+0x2a>
   13efa:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13efe:	2800      	cmp	r0, #0
   13f00:	d1f7      	bne.n	13ef2 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13f02:	d034      	beq.n	13f6e <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13f04:	4c1e      	ldr	r4, [pc, #120]	; (13f80 <bt_gatt_init+0xa8>)
   13f06:	2230      	movs	r2, #48	; 0x30
   13f08:	2100      	movs	r1, #0
   13f0a:	4620      	mov	r0, r4
   13f0c:	f00a fae3 	bl	1e4d6 <memset>
   13f10:	4b1c      	ldr	r3, [pc, #112]	; (13f84 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13f12:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13f14:	6063      	str	r3, [r4, #4]
   13f16:	4c1c      	ldr	r4, [pc, #112]	; (13f88 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13f18:	2300      	movs	r3, #0
   13f1a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13f1e:	481b      	ldr	r0, [pc, #108]	; (13f8c <bt_gatt_init+0xb4>)
   13f20:	f007 fe98 	bl	1bc54 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13f24:	2100      	movs	r1, #0
   13f26:	f104 0020 	add.w	r0, r4, #32
   13f2a:	2230      	movs	r2, #48	; 0x30
   13f2c:	f00a fad3 	bl	1e4d6 <memset>
   13f30:	4b17      	ldr	r3, [pc, #92]	; (13f90 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13f32:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13f36:	6263      	str	r3, [r4, #36]	; 0x24
   13f38:	2102      	movs	r1, #2
}
   13f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13f3e:	f00b bc3c 	b.w	1f7ba <atomic_or>
		last_static_handle += svc->attr_count;
   13f42:	4a14      	ldr	r2, [pc, #80]	; (13f94 <bt_gatt_init+0xbc>)
   13f44:	6863      	ldr	r3, [r4, #4]
   13f46:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13f48:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13f4a:	440b      	add	r3, r1
   13f4c:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13f4e:	42ac      	cmp	r4, r5
   13f50:	d90a      	bls.n	13f68 <bt_gatt_init+0x90>
   13f52:	4631      	mov	r1, r6
   13f54:	4810      	ldr	r0, [pc, #64]	; (13f98 <bt_gatt_init+0xc0>)
   13f56:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13f5a:	f008 fdd9 	bl	1cb10 <printk>
   13f5e:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13f62:	4630      	mov	r0, r6
   13f64:	f009 f87a 	bl	1d05c <assert_post_action>
   13f68:	42ac      	cmp	r4, r5
   13f6a:	d3ea      	bcc.n	13f42 <bt_gatt_init+0x6a>
   13f6c:	e7ca      	b.n	13f04 <bt_gatt_init+0x2c>
   13f6e:	4c0b      	ldr	r4, [pc, #44]	; (13f9c <bt_gatt_init+0xc4>)
   13f70:	4d0b      	ldr	r5, [pc, #44]	; (13fa0 <bt_gatt_init+0xc8>)
   13f72:	4e0c      	ldr	r6, [pc, #48]	; (13fa4 <bt_gatt_init+0xcc>)
   13f74:	e7eb      	b.n	13f4e <bt_gatt_init+0x76>
}
   13f76:	bd70      	pop	{r4, r5, r6, pc}
   13f78:	20009cb4 	.word	0x20009cb4
   13f7c:	20009d00 	.word	0x20009d00
   13f80:	20008ec0 	.word	0x20008ec0
   13f84:	0001fb75 	.word	0x0001fb75
   13f88:	20008ef0 	.word	0x20008ef0
   13f8c:	20009638 	.word	0x20009638
   13f90:	00014569 	.word	0x00014569
   13f94:	2000b01c 	.word	0x2000b01c
   13f98:	00022f17 	.word	0x00022f17
   13f9c:	00021b20 	.word	0x00021b20
   13fa0:	00021b50 	.word	0x00021b50
   13fa4:	0002554e 	.word	0x0002554e

00013fa8 <bt_gatt_attr_get_handle>:
{
   13fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13fac:	4604      	mov	r4, r0
   13fae:	b910      	cbnz	r0, 13fb6 <bt_gatt_attr_get_handle+0xe>
		return 0;
   13fb0:	2000      	movs	r0, #0
}
   13fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13fb6:	8a00      	ldrh	r0, [r0, #16]
   13fb8:	2800      	cmp	r0, #0
   13fba:	d1fa      	bne.n	13fb2 <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13fbc:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13fc0:	4d17      	ldr	r5, [pc, #92]	; (14020 <bt_gatt_attr_get_handle+0x78>)
   13fc2:	4e18      	ldr	r6, [pc, #96]	; (14024 <bt_gatt_attr_get_handle+0x7c>)
   13fc4:	4f18      	ldr	r7, [pc, #96]	; (14028 <bt_gatt_attr_get_handle+0x80>)
   13fc6:	42b5      	cmp	r5, r6
   13fc8:	d90a      	bls.n	13fe0 <bt_gatt_attr_get_handle+0x38>
   13fca:	4639      	mov	r1, r7
   13fcc:	4817      	ldr	r0, [pc, #92]	; (1402c <bt_gatt_attr_get_handle+0x84>)
   13fce:	f240 522d 	movw	r2, #1325	; 0x52d
   13fd2:	f008 fd9d 	bl	1cb10 <printk>
   13fd6:	f240 512d 	movw	r1, #1325	; 0x52d
   13fda:	4638      	mov	r0, r7
   13fdc:	f009 f83e 	bl	1d05c <assert_post_action>
   13fe0:	42b5      	cmp	r5, r6
   13fe2:	d2e5      	bcs.n	13fb0 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13fe4:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13fe8:	4564      	cmp	r4, ip
   13fea:	d306      	bcc.n	13ffa <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13fec:	f04f 0e14 	mov.w	lr, #20
   13ff0:	fb0e c301 	mla	r3, lr, r1, ip
   13ff4:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13ff6:	429c      	cmp	r4, r3
   13ff8:	d910      	bls.n	1401c <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13ffa:	eb08 0001 	add.w	r0, r8, r1
   13ffe:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14000:	4680      	mov	r8, r0
   14002:	3508      	adds	r5, #8
   14004:	e7df      	b.n	13fc6 <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   14006:	fb0e c302 	mla	r3, lr, r2, ip
   1400a:	429c      	cmp	r4, r3
   1400c:	d0d1      	beq.n	13fb2 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1400e:	3201      	adds	r2, #1
   14010:	eb08 0302 	add.w	r3, r8, r2
   14014:	4291      	cmp	r1, r2
   14016:	b298      	uxth	r0, r3
   14018:	d1f5      	bne.n	14006 <bt_gatt_attr_get_handle+0x5e>
   1401a:	e7f1      	b.n	14000 <bt_gatt_attr_get_handle+0x58>
   1401c:	2200      	movs	r2, #0
   1401e:	e7f7      	b.n	14010 <bt_gatt_attr_get_handle+0x68>
   14020:	00021b20 	.word	0x00021b20
   14024:	00021b50 	.word	0x00021b50
   14028:	0002554e 	.word	0x0002554e
   1402c:	00022f17 	.word	0x00022f17

00014030 <bt_gatt_foreach_attr_type>:
{
   14030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14034:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   14036:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1403a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1403e:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   14040:	2d00      	cmp	r5, #0
   14042:	bf08      	it	eq
   14044:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   14046:	4b2b      	ldr	r3, [pc, #172]	; (140f4 <bt_gatt_foreach_attr_type+0xc4>)
{
   14048:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1404a:	881b      	ldrh	r3, [r3, #0]
{
   1404c:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1404e:	4283      	cmp	r3, r0
   14050:	d24b      	bcs.n	140ea <bt_gatt_foreach_attr_type+0xba>
}
   14052:	b003      	add	sp, #12
   14054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   14058:	6873      	ldr	r3, [r6, #4]
   1405a:	4423      	add	r3, r4
   1405c:	42bb      	cmp	r3, r7
   1405e:	d241      	bcs.n	140e4 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   14060:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14062:	3608      	adds	r6, #8
   14064:	4b24      	ldr	r3, [pc, #144]	; (140f8 <bt_gatt_foreach_attr_type+0xc8>)
   14066:	429e      	cmp	r6, r3
   14068:	d90a      	bls.n	14080 <bt_gatt_foreach_attr_type+0x50>
   1406a:	4659      	mov	r1, fp
   1406c:	4823      	ldr	r0, [pc, #140]	; (140fc <bt_gatt_foreach_attr_type+0xcc>)
   1406e:	f240 52f1 	movw	r2, #1521	; 0x5f1
   14072:	f008 fd4d 	bl	1cb10 <printk>
   14076:	f240 51f1 	movw	r1, #1521	; 0x5f1
   1407a:	4658      	mov	r0, fp
   1407c:	f008 ffee 	bl	1d05c <assert_post_action>
   14080:	4b1d      	ldr	r3, [pc, #116]	; (140f8 <bt_gatt_foreach_attr_type+0xc8>)
   14082:	429e      	cmp	r6, r3
   14084:	d3e8      	bcc.n	14058 <bt_gatt_foreach_attr_type+0x28>
   14086:	e7e4      	b.n	14052 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   14088:	4640      	mov	r0, r8
   1408a:	5889      	ldr	r1, [r1, r2]
   1408c:	9301      	str	r3, [sp, #4]
   1408e:	f00a fa92 	bl	1e5b6 <bt_uuid_cmp>
   14092:	9b01      	ldr	r3, [sp, #4]
   14094:	b198      	cbz	r0, 140be <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   14096:	3401      	adds	r4, #1
   14098:	f10a 0a01 	add.w	sl, sl, #1
   1409c:	b2a4      	uxth	r4, r4
   1409e:	6873      	ldr	r3, [r6, #4]
   140a0:	4553      	cmp	r3, sl
   140a2:	d9de      	bls.n	14062 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   140a4:	9b00      	ldr	r3, [sp, #0]
   140a6:	429c      	cmp	r4, r3
   140a8:	d8d3      	bhi.n	14052 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   140aa:	42bc      	cmp	r4, r7
   140ac:	d3f3      	bcc.n	14096 <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   140ae:	2314      	movs	r3, #20
   140b0:	fb03 f20a 	mul.w	r2, r3, sl
   140b4:	6831      	ldr	r1, [r6, #0]
   140b6:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   140b8:	f1b8 0f00 	cmp.w	r8, #0
   140bc:	d1e4      	bne.n	14088 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   140be:	f1b9 0f00 	cmp.w	r9, #0
   140c2:	d10b      	bne.n	140dc <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   140c4:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   140c6:	4618      	mov	r0, r3
	*num_matches -= 1;
   140c8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   140ca:	4621      	mov	r1, r4
   140cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   140ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   140d0:	4798      	blx	r3
	if (!*num_matches) {
   140d2:	2d00      	cmp	r5, #0
   140d4:	d0bd      	beq.n	14052 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   140d6:	2800      	cmp	r0, #0
   140d8:	d1dd      	bne.n	14096 <bt_gatt_foreach_attr_type+0x66>
   140da:	e7ba      	b.n	14052 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   140dc:	68da      	ldr	r2, [r3, #12]
   140de:	4591      	cmp	r9, r2
   140e0:	d1d9      	bne.n	14096 <bt_gatt_foreach_attr_type+0x66>
   140e2:	e7ef      	b.n	140c4 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   140e4:	f04f 0a00 	mov.w	sl, #0
   140e8:	e7d9      	b.n	1409e <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   140ea:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   140ec:	4e04      	ldr	r6, [pc, #16]	; (14100 <bt_gatt_foreach_attr_type+0xd0>)
   140ee:	f8df b014 	ldr.w	fp, [pc, #20]	; 14104 <bt_gatt_foreach_attr_type+0xd4>
   140f2:	e7b7      	b.n	14064 <bt_gatt_foreach_attr_type+0x34>
   140f4:	2000b01c 	.word	0x2000b01c
   140f8:	00021b50 	.word	0x00021b50
   140fc:	00022f17 	.word	0x00022f17
   14100:	00021b20 	.word	0x00021b20
   14104:	0002554e 	.word	0x0002554e

00014108 <db_hash_gen>:
	uint8_t key[16] = {};
   14108:	2300      	movs	r3, #0
{
   1410a:	b530      	push	{r4, r5, lr}
   1410c:	b0c9      	sub	sp, #292	; 0x124
   1410e:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   14110:	4669      	mov	r1, sp
   14112:	aa1c      	add	r2, sp, #112	; 0x70
   14114:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   14116:	e9cd 3300 	strd	r3, r3, [sp]
   1411a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1411e:	f009 fdb8 	bl	1dc92 <tc_cmac_setup>
   14122:	b928      	cbnz	r0, 14130 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   14124:	2145      	movs	r1, #69	; 0x45
   14126:	4812      	ldr	r0, [pc, #72]	; (14170 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   14128:	f008 fcf2 	bl	1cb10 <printk>
}
   1412c:	b049      	add	sp, #292	; 0x124
   1412e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   14130:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14134:	2001      	movs	r0, #1
   14136:	4a0f      	ldr	r2, [pc, #60]	; (14174 <db_hash_gen+0x6c>)
   14138:	ab04      	add	r3, sp, #16
   1413a:	f00b fd10 	bl	1fb5e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   1413e:	480e      	ldr	r0, [pc, #56]	; (14178 <db_hash_gen+0x70>)
   14140:	a904      	add	r1, sp, #16
   14142:	f009 fe3c 	bl	1ddbe <tc_cmac_final>
   14146:	b910      	cbnz	r0, 1414e <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   14148:	2145      	movs	r1, #69	; 0x45
   1414a:	480c      	ldr	r0, [pc, #48]	; (1417c <db_hash_gen+0x74>)
   1414c:	e7ec      	b.n	14128 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   1414e:	2208      	movs	r2, #8
   14150:	4b09      	ldr	r3, [pc, #36]	; (14178 <db_hash_gen+0x70>)
   14152:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   14156:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   14158:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   1415c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1415e:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   14162:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   14164:	d1f7      	bne.n	14156 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   14166:	2c00      	cmp	r4, #0
   14168:	d0e0      	beq.n	1412c <db_hash_gen+0x24>
		db_hash_store();
   1416a:	f7ff f9b3 	bl	134d4 <db_hash_store>
   1416e:	e7dd      	b.n	1412c <db_hash_gen+0x24>
   14170:	0002557e 	.word	0x0002557e
   14174:	0001f675 	.word	0x0001f675
   14178:	2000b798 	.word	0x2000b798
   1417c:	0002559c 	.word	0x0002559c

00014180 <db_hash_commit>:
{
   14180:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   14182:	4821      	ldr	r0, [pc, #132]	; (14208 <db_hash_commit+0x88>)
   14184:	f007 fdd6 	bl	1bd34 <k_delayed_work_cancel>
	if (!err) {
   14188:	b908      	cbnz	r0, 1418e <db_hash_commit+0xe>
		db_hash_gen(false);
   1418a:	f7ff ffbd 	bl	14108 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   1418e:	2210      	movs	r2, #16
   14190:	491e      	ldr	r1, [pc, #120]	; (1420c <db_hash_commit+0x8c>)
   14192:	481f      	ldr	r0, [pc, #124]	; (14210 <db_hash_commit+0x90>)
   14194:	f00a f963 	bl	1e45e <memcmp>
   14198:	b968      	cbnz	r0, 141b6 <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   1419a:	481e      	ldr	r0, [pc, #120]	; (14214 <db_hash_commit+0x94>)
   1419c:	f007 fdca 	bl	1bd34 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   141a0:	4b1d      	ldr	r3, [pc, #116]	; (14218 <db_hash_commit+0x98>)
   141a2:	e8d3 2fef 	ldaex	r2, [r3]
   141a6:	f022 0201 	bic.w	r2, r2, #1
   141aa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   141ae:	2900      	cmp	r1, #0
   141b0:	d1f7      	bne.n	141a2 <db_hash_commit+0x22>
}
   141b2:	2000      	movs	r0, #0
   141b4:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   141b6:	4c19      	ldr	r4, [pc, #100]	; (1421c <db_hash_commit+0x9c>)
   141b8:	2101      	movs	r1, #1
   141ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
   141be:	f00b fafc 	bl	1f7ba <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   141c2:	07c2      	lsls	r2, r0, #31
   141c4:	d410      	bmi.n	141e8 <db_hash_commit+0x68>
		gatt_sc.start = start;
   141c6:	4b16      	ldr	r3, [pc, #88]	; (14220 <db_hash_commit+0xa0>)
   141c8:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   141ca:	4813      	ldr	r0, [pc, #76]	; (14218 <db_hash_commit+0x98>)
   141cc:	f00b fb00 	bl	1f7d0 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   141d0:	0783      	lsls	r3, r0, #30
   141d2:	d406      	bmi.n	141e2 <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   141d4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   141d8:	2300      	movs	r3, #0
   141da:	490e      	ldr	r1, [pc, #56]	; (14214 <db_hash_commit+0x94>)
   141dc:	4811      	ldr	r0, [pc, #68]	; (14224 <db_hash_commit+0xa4>)
   141de:	f007 fd39 	bl	1bc54 <k_delayed_work_submit_to_queue>
	db_hash_store();
   141e2:	f7ff f977 	bl	134d4 <db_hash_store>
	return 0;
   141e6:	e7e4      	b.n	141b2 <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   141e8:	8b23      	ldrh	r3, [r4, #24]
   141ea:	8b62      	ldrh	r2, [r4, #26]
   141ec:	2b01      	cmp	r3, #1
   141ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   141f2:	d805      	bhi.n	14200 <db_hash_commit+0x80>
   141f4:	429a      	cmp	r2, r3
   141f6:	d0f4      	beq.n	141e2 <db_hash_commit+0x62>
		*end = new_end;
   141f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   141fc:	8363      	strh	r3, [r4, #26]
   141fe:	e7e4      	b.n	141ca <db_hash_commit+0x4a>
	if (*end < new_end) {
   14200:	429a      	cmp	r2, r3
		*start = new_start;
   14202:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   14204:	d0e1      	beq.n	141ca <db_hash_commit+0x4a>
   14206:	e7f7      	b.n	141f8 <db_hash_commit+0x78>
   14208:	20008ec0 	.word	0x20008ec0
   1420c:	2000b798 	.word	0x2000b798
   14210:	2000b7a8 	.word	0x2000b7a8
   14214:	20008f10 	.word	0x20008f10
   14218:	20008f40 	.word	0x20008f40
   1421c:	20008ef0 	.word	0x20008ef0
   14220:	ffff0001 	.word	0xffff0001
   14224:	20009638 	.word	0x20009638

00014228 <ccc_set_direct>:
{
   14228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1422c:	b0b9      	sub	sp, #228	; 0xe4
   1422e:	4688      	mov	r8, r1
   14230:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   14232:	492c      	ldr	r1, [pc, #176]	; (142e4 <ccc_set_direct+0xbc>)
   14234:	466a      	mov	r2, sp
   14236:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   14238:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1423a:	f009 f900 	bl	1d43e <settings_name_steq>
   1423e:	b948      	cbnz	r0, 14254 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   14240:	2145      	movs	r1, #69	; 0x45
   14242:	4829      	ldr	r0, [pc, #164]	; (142e8 <ccc_set_direct+0xc0>)
   14244:	f008 fc64 	bl	1cb10 <printk>
   14248:	f06f 0515 	mvn.w	r5, #21
}
   1424c:	4628      	mov	r0, r5
   1424e:	b039      	add	sp, #228	; 0xe4
   14250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   14254:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   14256:	a901      	add	r1, sp, #4
   14258:	4620      	mov	r0, r4
   1425a:	f009 f913 	bl	1d484 <settings_name_next>
		if (!name) {
   1425e:	b93c      	cbnz	r4, 14270 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   14260:	2145      	movs	r1, #69	; 0x45
   14262:	4822      	ldr	r0, [pc, #136]	; (142ec <ccc_set_direct+0xc4>)
   14264:	f008 fc54 	bl	1cb10 <printk>
			return -EINVAL;
   14268:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1426c:	4625      	mov	r5, r4
   1426e:	e7ed      	b.n	1424c <ccc_set_direct+0x24>
		} else if (!next) {
   14270:	9801      	ldr	r0, [sp, #4]
   14272:	b978      	cbnz	r0, 14294 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   14274:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   14278:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1427c:	4649      	mov	r1, r9
   1427e:	4620      	mov	r0, r4
   14280:	f00a f975 	bl	1e56e <bt_settings_decode_key>
		if (err) {
   14284:	4605      	mov	r5, r0
   14286:	b150      	cbz	r0, 1429e <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   14288:	4622      	mov	r2, r4
   1428a:	2145      	movs	r1, #69	; 0x45
   1428c:	4818      	ldr	r0, [pc, #96]	; (142f0 <ccc_set_direct+0xc8>)
   1428e:	f008 fc3f 	bl	1cb10 <printk>
   14292:	e7e9      	b.n	14268 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   14294:	220a      	movs	r2, #10
   14296:	2100      	movs	r1, #0
   14298:	f00a f804 	bl	1e2a4 <strtol>
   1429c:	e7ea      	b.n	14274 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   1429e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   142a2:	f1b8 0f00 	cmp.w	r8, #0
   142a6:	d019      	beq.n	142dc <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   142a8:	f10d 0820 	add.w	r8, sp, #32
   142ac:	22c0      	movs	r2, #192	; 0xc0
   142ae:	4641      	mov	r1, r8
   142b0:	4638      	mov	r0, r7
   142b2:	47b0      	blx	r6
			if (len < 0) {
   142b4:	1e04      	subs	r4, r0, #0
   142b6:	da05      	bge.n	142c4 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   142b8:	4622      	mov	r2, r4
   142ba:	2145      	movs	r1, #69	; 0x45
   142bc:	480d      	ldr	r0, [pc, #52]	; (142f4 <ccc_set_direct+0xcc>)
   142be:	f008 fc27 	bl	1cb10 <printk>
				return len;
   142c2:	e7d3      	b.n	1426c <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   142c4:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   142c6:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   142ca:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   142cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   142d0:	2001      	movs	r0, #1
   142d2:	4a09      	ldr	r2, [pc, #36]	; (142f8 <ccc_set_direct+0xd0>)
   142d4:	ab04      	add	r3, sp, #16
   142d6:	f00b fc42 	bl	1fb5e <bt_gatt_foreach_attr>
	return 0;
   142da:	e7b7      	b.n	1424c <ccc_set_direct+0x24>
			load.count = 0;
   142dc:	e9cd 0006 	strd	r0, r0, [sp, #24]
   142e0:	e7f4      	b.n	142cc <ccc_set_direct+0xa4>
   142e2:	bf00      	nop
   142e4:	000255ba 	.word	0x000255ba
   142e8:	000255c1 	.word	0x000255c1
   142ec:	000240ee 	.word	0x000240ee
   142f0:	00025429 	.word	0x00025429
   142f4:	0002533b 	.word	0x0002533b
   142f8:	00013a31 	.word	0x00013a31

000142fc <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   142fc:	2300      	movs	r3, #0
{
   142fe:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   14300:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   14302:	f7ff fe51 	bl	13fa8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   14306:	1c41      	adds	r1, r0, #1
   14308:	b289      	uxth	r1, r1
   1430a:	4608      	mov	r0, r1
   1430c:	4a03      	ldr	r2, [pc, #12]	; (1431c <bt_gatt_attr_next+0x20>)
   1430e:	ab01      	add	r3, sp, #4
   14310:	f00b fc25 	bl	1fb5e <bt_gatt_foreach_attr>
}
   14314:	9801      	ldr	r0, [sp, #4]
   14316:	b003      	add	sp, #12
   14318:	f85d fb04 	ldr.w	pc, [sp], #4
   1431c:	0001f61b 	.word	0x0001f61b

00014320 <bt_gatt_notify_cb>:
{
   14320:	b530      	push	{r4, r5, lr}
   14322:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   14324:	460d      	mov	r5, r1
{
   14326:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14328:	b951      	cbnz	r1, 14340 <bt_gatt_notify_cb+0x20>
   1432a:	4940      	ldr	r1, [pc, #256]	; (1442c <bt_gatt_notify_cb+0x10c>)
   1432c:	4840      	ldr	r0, [pc, #256]	; (14430 <bt_gatt_notify_cb+0x110>)
   1432e:	f640 023d 	movw	r2, #2109	; 0x83d
   14332:	f008 fbed 	bl	1cb10 <printk>
   14336:	f640 013d 	movw	r1, #2109	; 0x83d
   1433a:	483c      	ldr	r0, [pc, #240]	; (1442c <bt_gatt_notify_cb+0x10c>)
   1433c:	f008 fe8e 	bl	1d05c <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   14340:	686b      	ldr	r3, [r5, #4]
   14342:	b953      	cbnz	r3, 1435a <bt_gatt_notify_cb+0x3a>
   14344:	4939      	ldr	r1, [pc, #228]	; (1442c <bt_gatt_notify_cb+0x10c>)
   14346:	483a      	ldr	r0, [pc, #232]	; (14430 <bt_gatt_notify_cb+0x110>)
   14348:	f640 023e 	movw	r2, #2110	; 0x83e
   1434c:	f008 fbe0 	bl	1cb10 <printk>
   14350:	f640 013e 	movw	r1, #2110	; 0x83e
   14354:	4835      	ldr	r0, [pc, #212]	; (1442c <bt_gatt_notify_cb+0x10c>)
   14356:	f008 fe81 	bl	1d05c <assert_post_action>
   1435a:	4836      	ldr	r0, [pc, #216]	; (14434 <bt_gatt_notify_cb+0x114>)
   1435c:	f00b fa38 	bl	1f7d0 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14360:	0782      	lsls	r2, r0, #30
   14362:	d55d      	bpl.n	14420 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   14364:	6868      	ldr	r0, [r5, #4]
   14366:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14368:	b114      	cbz	r4, 14370 <bt_gatt_notify_cb+0x50>
   1436a:	7b63      	ldrb	r3, [r4, #13]
   1436c:	2b07      	cmp	r3, #7
   1436e:	d15a      	bne.n	14426 <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14370:	f7ff fe1a 	bl	13fa8 <bt_gatt_attr_get_handle>
   14374:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14378:	b918      	cbnz	r0, 14382 <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   1437a:	f06f 0001 	mvn.w	r0, #1
}
   1437e:	b00b      	add	sp, #44	; 0x2c
   14380:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   14382:	682a      	ldr	r2, [r5, #0]
   14384:	b9aa      	cbnz	r2, 143b2 <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14386:	9b05      	ldr	r3, [sp, #20]
   14388:	a904      	add	r1, sp, #16
   1438a:	6818      	ldr	r0, [r3, #0]
   1438c:	2300      	movs	r3, #0
   1438e:	f88d 3010 	strb.w	r3, [sp, #16]
   14392:	f642 0303 	movw	r3, #10243	; 0x2803
   14396:	f8ad 3012 	strh.w	r3, [sp, #18]
   1439a:	f00a f90c 	bl	1e5b6 <bt_uuid_cmp>
   1439e:	b1c0      	cbz	r0, 143d2 <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   143a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   143a4:	b314      	cbz	r4, 143ec <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   143a6:	4601      	mov	r1, r0
   143a8:	462a      	mov	r2, r5
   143aa:	4620      	mov	r0, r4
   143ac:	f7ff fbd8 	bl	13b60 <gatt_notify>
   143b0:	e7e5      	b.n	1437e <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   143b2:	a905      	add	r1, sp, #20
   143b4:	9102      	str	r1, [sp, #8]
   143b6:	4920      	ldr	r1, [pc, #128]	; (14438 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   143b8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   143ba:	9101      	str	r1, [sp, #4]
   143bc:	2101      	movs	r1, #1
   143be:	9100      	str	r1, [sp, #0]
   143c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   143c4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   143c6:	f7ff fe33 	bl	14030 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   143ca:	9b05      	ldr	r3, [sp, #20]
   143cc:	2b00      	cmp	r3, #0
   143ce:	d1da      	bne.n	14386 <bt_gatt_notify_cb+0x66>
   143d0:	e7d3      	b.n	1437a <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   143d2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   143d4:	68c3      	ldr	r3, [r0, #12]
   143d6:	799b      	ldrb	r3, [r3, #6]
   143d8:	06db      	lsls	r3, r3, #27
   143da:	d402      	bmi.n	143e2 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   143dc:	f06f 0015 	mvn.w	r0, #21
   143e0:	e7cd      	b.n	1437e <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   143e2:	f00b fb6e 	bl	1fac2 <bt_gatt_attr_value_handle>
   143e6:	f8ad 0018 	strh.w	r0, [sp, #24]
   143ea:	e7d9      	b.n	143a0 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   143ec:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143f0:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   143f4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   143f6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143f8:	f8ad 2012 	strh.w	r2, [sp, #18]
   143fc:	aa05      	add	r2, sp, #20
   143fe:	9202      	str	r2, [sp, #8]
   14400:	4a0e      	ldr	r2, [pc, #56]	; (1443c <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   14402:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14406:	e9cd 3200 	strd	r3, r2, [sp]
   1440a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1440e:	4623      	mov	r3, r4
   14410:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   14412:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14414:	f88d 4010 	strb.w	r4, [sp, #16]
   14418:	f7ff fe0a 	bl	14030 <bt_gatt_foreach_attr_type>
	return data.err;
   1441c:	9807      	ldr	r0, [sp, #28]
   1441e:	e7ae      	b.n	1437e <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   14420:	f06f 000a 	mvn.w	r0, #10
   14424:	e7ab      	b.n	1437e <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   14426:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1442a:	e7a8      	b.n	1437e <bt_gatt_notify_cb+0x5e>
   1442c:	0002554e 	.word	0x0002554e
   14430:	00022f17 	.word	0x00022f17
   14434:	20008094 	.word	0x20008094
   14438:	0001f669 	.word	0x0001f669
   1443c:	00013bc1 	.word	0x00013bc1

00014440 <bt_gatt_indicate>:
{
   14440:	b530      	push	{r4, r5, lr}
   14442:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   14444:	460c      	mov	r4, r1
{
   14446:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14448:	b951      	cbnz	r1, 14460 <bt_gatt_indicate+0x20>
   1444a:	4942      	ldr	r1, [pc, #264]	; (14554 <bt_gatt_indicate+0x114>)
   1444c:	4842      	ldr	r0, [pc, #264]	; (14558 <bt_gatt_indicate+0x118>)
   1444e:	f640 0289 	movw	r2, #2185	; 0x889
   14452:	f008 fb5d 	bl	1cb10 <printk>
   14456:	f640 0189 	movw	r1, #2185	; 0x889
   1445a:	483e      	ldr	r0, [pc, #248]	; (14554 <bt_gatt_indicate+0x114>)
   1445c:	f008 fdfe 	bl	1d05c <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   14460:	6863      	ldr	r3, [r4, #4]
   14462:	b953      	cbnz	r3, 1447a <bt_gatt_indicate+0x3a>
   14464:	493b      	ldr	r1, [pc, #236]	; (14554 <bt_gatt_indicate+0x114>)
   14466:	483c      	ldr	r0, [pc, #240]	; (14558 <bt_gatt_indicate+0x118>)
   14468:	f640 028a 	movw	r2, #2186	; 0x88a
   1446c:	f008 fb50 	bl	1cb10 <printk>
   14470:	f640 018a 	movw	r1, #2186	; 0x88a
   14474:	4837      	ldr	r0, [pc, #220]	; (14554 <bt_gatt_indicate+0x114>)
   14476:	f008 fdf1 	bl	1d05c <assert_post_action>
   1447a:	4838      	ldr	r0, [pc, #224]	; (1455c <bt_gatt_indicate+0x11c>)
   1447c:	f00b f9a8 	bl	1f7d0 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14480:	0782      	lsls	r2, r0, #30
   14482:	d561      	bpl.n	14548 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   14484:	6860      	ldr	r0, [r4, #4]
   14486:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14488:	b115      	cbz	r5, 14490 <bt_gatt_indicate+0x50>
   1448a:	7b6b      	ldrb	r3, [r5, #13]
   1448c:	2b07      	cmp	r3, #7
   1448e:	d15e      	bne.n	1454e <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14490:	f7ff fd8a 	bl	13fa8 <bt_gatt_attr_get_handle>
   14494:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14498:	b918      	cbnz	r0, 144a2 <bt_gatt_indicate+0x62>
		return -ENOENT;
   1449a:	f06f 0001 	mvn.w	r0, #1
}
   1449e:	b00b      	add	sp, #44	; 0x2c
   144a0:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   144a2:	6822      	ldr	r2, [r4, #0]
   144a4:	b9ba      	cbnz	r2, 144d6 <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   144a6:	9b05      	ldr	r3, [sp, #20]
   144a8:	a904      	add	r1, sp, #16
   144aa:	6818      	ldr	r0, [r3, #0]
   144ac:	2300      	movs	r3, #0
   144ae:	f88d 3010 	strb.w	r3, [sp, #16]
   144b2:	f642 0303 	movw	r3, #10243	; 0x2803
   144b6:	f8ad 3012 	strh.w	r3, [sp, #18]
   144ba:	f00a f87c 	bl	1e5b6 <bt_uuid_cmp>
   144be:	b1d0      	cbz	r0, 144f6 <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   144c0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   144c4:	b325      	cbz	r5, 14510 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   144c6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   144c8:	4601      	mov	r1, r0
   144ca:	4622      	mov	r2, r4
   144cc:	4628      	mov	r0, r5
		params->_ref = 1;
   144ce:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   144d0:	f7ff fb10 	bl	13af4 <gatt_indicate>
   144d4:	e7e3      	b.n	1449e <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   144d6:	a905      	add	r1, sp, #20
   144d8:	9102      	str	r1, [sp, #8]
   144da:	4921      	ldr	r1, [pc, #132]	; (14560 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   144dc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   144de:	9101      	str	r1, [sp, #4]
   144e0:	2101      	movs	r1, #1
   144e2:	9100      	str	r1, [sp, #0]
   144e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   144e8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   144ea:	f7ff fda1 	bl	14030 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   144ee:	9b05      	ldr	r3, [sp, #20]
   144f0:	2b00      	cmp	r3, #0
   144f2:	d1d8      	bne.n	144a6 <bt_gatt_indicate+0x66>
   144f4:	e7d1      	b.n	1449a <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   144f6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   144f8:	68c3      	ldr	r3, [r0, #12]
   144fa:	799b      	ldrb	r3, [r3, #6]
   144fc:	069b      	lsls	r3, r3, #26
   144fe:	d402      	bmi.n	14506 <bt_gatt_indicate+0xc6>
			return -EINVAL;
   14500:	f06f 0015 	mvn.w	r0, #21
   14504:	e7cb      	b.n	1449e <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14506:	f00b fadc 	bl	1fac2 <bt_gatt_attr_value_handle>
   1450a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1450e:	e7d7      	b.n	144c0 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   14510:	f06f 0338 	mvn.w	r3, #56	; 0x38
   14514:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   14516:	2302      	movs	r3, #2
   14518:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1451c:	f642 1302 	movw	r3, #10498	; 0x2902
   14520:	f8ad 3012 	strh.w	r3, [sp, #18]
   14524:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   14526:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14528:	9302      	str	r3, [sp, #8]
   1452a:	4b0e      	ldr	r3, [pc, #56]	; (14564 <bt_gatt_indicate+0x124>)
   1452c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14530:	9301      	str	r3, [sp, #4]
   14532:	2301      	movs	r3, #1
   14534:	aa04      	add	r2, sp, #16
   14536:	9300      	str	r3, [sp, #0]
   14538:	462b      	mov	r3, r5
	data.ind_params = params;
   1453a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1453c:	f88d 5010 	strb.w	r5, [sp, #16]
   14540:	f7ff fd76 	bl	14030 <bt_gatt_foreach_attr_type>
	return data.err;
   14544:	9807      	ldr	r0, [sp, #28]
   14546:	e7aa      	b.n	1449e <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   14548:	f06f 000a 	mvn.w	r0, #10
   1454c:	e7a7      	b.n	1449e <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   1454e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14552:	e7a4      	b.n	1449e <bt_gatt_indicate+0x5e>
   14554:	0002554e 	.word	0x0002554e
   14558:	00022f17 	.word	0x00022f17
   1455c:	20008094 	.word	0x20008094
   14560:	0001f669 	.word	0x0001f669
   14564:	00013bc1 	.word	0x00013bc1

00014568 <sc_process>:
{
   14568:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1456a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1456e:	4604      	mov	r4, r0
   14570:	4628      	mov	r0, r5
   14572:	f00b f92d 	bl	1f7d0 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   14576:	0783      	lsls	r3, r0, #30
   14578:	d50a      	bpl.n	14590 <sc_process+0x28>
   1457a:	491b      	ldr	r1, [pc, #108]	; (145e8 <sc_process+0x80>)
   1457c:	481b      	ldr	r0, [pc, #108]	; (145ec <sc_process+0x84>)
   1457e:	f240 32ae 	movw	r2, #942	; 0x3ae
   14582:	f008 fac5 	bl	1cb10 <printk>
   14586:	f240 31ae 	movw	r1, #942	; 0x3ae
   1458a:	4817      	ldr	r0, [pc, #92]	; (145e8 <sc_process+0x80>)
   1458c:	f008 fd66 	bl	1d05c <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   14590:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   14594:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   14598:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1459c:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145a0:	e8d5 3fef 	ldaex	r3, [r5]
   145a4:	f023 0301 	bic.w	r3, r3, #1
   145a8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   145ac:	2a00      	cmp	r2, #0
   145ae:	d1f7      	bne.n	145a0 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   145b0:	4b0f      	ldr	r3, [pc, #60]	; (145f0 <sc_process+0x88>)
	sc->start = 0U;
   145b2:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   145b4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   145b8:	4b0e      	ldr	r3, [pc, #56]	; (145f4 <sc_process+0x8c>)
	sc->start = 0U;
   145ba:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   145be:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   145c2:	ab01      	add	r3, sp, #4
   145c4:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   145c8:	2304      	movs	r3, #4
	sc->end = 0U;
   145ca:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   145ce:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   145d2:	f1a4 0120 	sub.w	r1, r4, #32
   145d6:	f7ff ff33 	bl	14440 <bt_gatt_indicate>
   145da:	b918      	cbnz	r0, 145e4 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   145dc:	2102      	movs	r1, #2
   145de:	4628      	mov	r0, r5
   145e0:	f00b f8eb 	bl	1f7ba <atomic_or>
}
   145e4:	b003      	add	sp, #12
   145e6:	bd30      	pop	{r4, r5, pc}
   145e8:	0002554e 	.word	0x0002554e
   145ec:	00022f17 	.word	0x00022f17
   145f0:	00022414 	.word	0x00022414
   145f4:	00013e89 	.word	0x00013e89

000145f8 <update_ccc>:
{
   145f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   145fc:	4b3d      	ldr	r3, [pc, #244]	; (146f4 <update_ccc+0xfc>)
{
   145fe:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14600:	6882      	ldr	r2, [r0, #8]
{
   14602:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14604:	429a      	cmp	r2, r3
   14606:	d170      	bne.n	146ea <update_ccc+0xf2>
	ccc = attr->user_data;
   14608:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   1460c:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   1460e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 146f8 <update_ccc+0x100>
   14612:	f108 0601 	add.w	r6, r8, #1
   14616:	f108 091f 	add.w	r9, r8, #31
		if (!cfg->value ||
   1461a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1461e:	b19b      	cbz	r3, 14648 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14620:	4632      	mov	r2, r6
   14622:	4620      	mov	r0, r4
   14624:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   14628:	f00a faf7 	bl	1ec1a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1462c:	b160      	cbz	r0, 14648 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1462e:	222a      	movs	r2, #42	; 0x2a
   14630:	4629      	mov	r1, r5
   14632:	4620      	mov	r0, r4
   14634:	f00b faa1 	bl	1fb7a <bt_gatt_check_perm>
		if (err) {
   14638:	b1d8      	cbz	r0, 14672 <update_ccc+0x7a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1463a:	2803      	cmp	r0, #3
   1463c:	d108      	bne.n	14650 <update_ccc+0x58>
				BT_WARN("CCC %p not writable", attr);
   1463e:	462a      	mov	r2, r5
   14640:	2157      	movs	r1, #87	; 0x57
   14642:	4650      	mov	r0, sl
   14644:	f008 fa64 	bl	1cb10 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   14648:	360a      	adds	r6, #10
   1464a:	454e      	cmp	r6, r9
   1464c:	d1e5      	bne.n	1461a <update_ccc+0x22>
   1464e:	e04c      	b.n	146ea <update_ccc+0xf2>
				sec = BT_SECURITY_L3;
   14650:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   14652:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   14654:	bf14      	ite	ne
   14656:	f04f 0b02 	movne.w	fp, #2
   1465a:	f04f 0b03 	moveq.w	fp, #3
			    bt_conn_get_security(conn) < sec) {
   1465e:	f00a fad1 	bl	1ec04 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   14662:	4583      	cmp	fp, r0
   14664:	d905      	bls.n	14672 <update_ccc+0x7a>
				if (data->sec < sec) {
   14666:	793b      	ldrb	r3, [r7, #4]
   14668:	455b      	cmp	r3, fp
   1466a:	d2ed      	bcs.n	14648 <update_ccc+0x50>
					data->sec = sec;
   1466c:	f887 b004 	strb.w	fp, [r7, #4]
   14670:	e7ea      	b.n	14648 <update_ccc+0x50>
		gatt_ccc_changed(attr, ccc);
   14672:	4641      	mov	r1, r8
   14674:	4628      	mov	r0, r5
   14676:	f00a ffd3 	bl	1f620 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1467a:	4b20      	ldr	r3, [pc, #128]	; (146fc <update_ccc+0x104>)
   1467c:	4598      	cmp	r8, r3
   1467e:	d134      	bne.n	146ea <update_ccc+0xf2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   14680:	7a20      	ldrb	r0, [r4, #8]
   14682:	f104 0188 	add.w	r1, r4, #136	; 0x88
   14686:	f7fe ff5d 	bl	13544 <find_sc_cfg>
	if (!cfg) {
   1468a:	4605      	mov	r5, r0
   1468c:	b368      	cbz	r0, 146ea <update_ccc+0xf2>
	if (!(cfg->data.start || cfg->data.end)) {
   1468e:	8902      	ldrh	r2, [r0, #8]
   14690:	8943      	ldrh	r3, [r0, #10]
   14692:	ea52 0103 	orrs.w	r1, r2, r3
   14696:	d028      	beq.n	146ea <update_ccc+0xf2>
	index = bt_conn_index(conn);
   14698:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1469a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1469e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   146a2:	f7fd fc5f 	bl	11f64 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   146a6:	2318      	movs	r3, #24
   146a8:	4915      	ldr	r1, [pc, #84]	; (14700 <update_ccc+0x108>)
   146aa:	4a16      	ldr	r2, [pc, #88]	; (14704 <update_ccc+0x10c>)
   146ac:	fb03 1300 	mla	r3, r3, r0, r1
   146b0:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   146b2:	4a15      	ldr	r2, [pc, #84]	; (14708 <update_ccc+0x110>)
   146b4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   146b6:	aa01      	add	r2, sp, #4
   146b8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   146ba:	2204      	movs	r2, #4
   146bc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   146be:	b203      	sxth	r3, r0
   146c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   146c4:	4620      	mov	r0, r4
   146c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   146ca:	f7ff feb9 	bl	14440 <bt_gatt_indicate>
   146ce:	b118      	cbz	r0, 146d8 <update_ccc+0xe0>
		BT_ERR("SC restore indication failed");
   146d0:	2145      	movs	r1, #69	; 0x45
   146d2:	480e      	ldr	r0, [pc, #56]	; (1470c <update_ccc+0x114>)
   146d4:	f008 fa1c 	bl	1cb10 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   146d8:	2204      	movs	r2, #4
   146da:	2100      	movs	r1, #0
   146dc:	f105 0008 	add.w	r0, r5, #8
   146e0:	f009 fef9 	bl	1e4d6 <memset>
		sc_store(cfg);
   146e4:	4628      	mov	r0, r5
   146e6:	f7ff f837 	bl	13758 <sc_store>
}
   146ea:	2001      	movs	r0, #1
   146ec:	b003      	add	sp, #12
   146ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146f2:	bf00      	nop
   146f4:	000135f9 	.word	0x000135f9
   146f8:	000255d2 	.word	0x000255d2
   146fc:	20008388 	.word	0x20008388
   14700:	20009cb8 	.word	0x20009cb8
   14704:	00022414 	.word	0x00022414
   14708:	0001fa79 	.word	0x0001fa79
   1470c:	000255eb 	.word	0x000255eb

00014710 <bt_gatt_is_subscribed>:
{
   14710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14712:	460c      	mov	r4, r1
   14714:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   14716:	4606      	mov	r6, r0
   14718:	b950      	cbnz	r0, 14730 <bt_gatt_is_subscribed+0x20>
   1471a:	4930      	ldr	r1, [pc, #192]	; (147dc <bt_gatt_is_subscribed+0xcc>)
   1471c:	4830      	ldr	r0, [pc, #192]	; (147e0 <bt_gatt_is_subscribed+0xd0>)
   1471e:	f640 12b5 	movw	r2, #2485	; 0x9b5
   14722:	f008 f9f5 	bl	1cb10 <printk>
   14726:	f640 11b5 	movw	r1, #2485	; 0x9b5
   1472a:	482c      	ldr	r0, [pc, #176]	; (147dc <bt_gatt_is_subscribed+0xcc>)
   1472c:	f008 fc96 	bl	1d05c <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   14730:	b954      	cbnz	r4, 14748 <bt_gatt_is_subscribed+0x38>
   14732:	492a      	ldr	r1, [pc, #168]	; (147dc <bt_gatt_is_subscribed+0xcc>)
   14734:	482a      	ldr	r0, [pc, #168]	; (147e0 <bt_gatt_is_subscribed+0xd0>)
   14736:	f640 12b6 	movw	r2, #2486	; 0x9b6
   1473a:	f008 f9e9 	bl	1cb10 <printk>
   1473e:	f640 11b6 	movw	r1, #2486	; 0x9b6
   14742:	4826      	ldr	r0, [pc, #152]	; (147dc <bt_gatt_is_subscribed+0xcc>)
   14744:	f008 fc8a 	bl	1d05c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14748:	7b73      	ldrb	r3, [r6, #13]
   1474a:	2b07      	cmp	r3, #7
   1474c:	d130      	bne.n	147b0 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1474e:	2300      	movs	r3, #0
   14750:	f88d 3004 	strb.w	r3, [sp, #4]
   14754:	f642 0303 	movw	r3, #10243	; 0x2803
   14758:	6820      	ldr	r0, [r4, #0]
   1475a:	a901      	add	r1, sp, #4
   1475c:	f8ad 3006 	strh.w	r3, [sp, #6]
   14760:	f009 ff29 	bl	1e5b6 <bt_uuid_cmp>
   14764:	b940      	cbnz	r0, 14778 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   14766:	68e3      	ldr	r3, [r4, #12]
   14768:	799b      	ldrb	r3, [r3, #6]
   1476a:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1476e:	d020      	beq.n	147b2 <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   14770:	4620      	mov	r0, r4
   14772:	f7ff fdc3 	bl	142fc <bt_gatt_attr_next>
   14776:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14778:	2300      	movs	r3, #0
   1477a:	6820      	ldr	r0, [r4, #0]
   1477c:	f88d 3004 	strb.w	r3, [sp, #4]
   14780:	f642 1302 	movw	r3, #10498	; 0x2902
   14784:	a901      	add	r1, sp, #4
   14786:	f8ad 3006 	strh.w	r3, [sp, #6]
   1478a:	f009 ff14 	bl	1e5b6 <bt_uuid_cmp>
   1478e:	b118      	cbz	r0, 14798 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   14790:	4620      	mov	r0, r4
   14792:	f7ff fdb3 	bl	142fc <bt_gatt_attr_next>
   14796:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14798:	2500      	movs	r5, #0
   1479a:	f642 1302 	movw	r3, #10498	; 0x2902
   1479e:	6820      	ldr	r0, [r4, #0]
   147a0:	a901      	add	r1, sp, #4
   147a2:	f88d 5004 	strb.w	r5, [sp, #4]
   147a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   147aa:	f009 ff04 	bl	1e5b6 <bt_uuid_cmp>
   147ae:	b110      	cbz	r0, 147b6 <bt_gatt_is_subscribed+0xa6>
		return false;
   147b0:	2000      	movs	r0, #0
}
   147b2:	b003      	add	sp, #12
   147b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   147b6:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   147b8:	1c6c      	adds	r4, r5, #1
   147ba:	351f      	adds	r5, #31
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   147bc:	4622      	mov	r2, r4
   147be:	4630      	mov	r0, r6
   147c0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   147c4:	f00a fa29 	bl	1ec1a <bt_conn_is_peer_addr_le>
   147c8:	b118      	cbz	r0, 147d2 <bt_gatt_is_subscribed+0xc2>
   147ca:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   147ce:	421f      	tst	r7, r3
   147d0:	d1ef      	bne.n	147b2 <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   147d2:	340a      	adds	r4, #10
   147d4:	42ac      	cmp	r4, r5
   147d6:	d1f1      	bne.n	147bc <bt_gatt_is_subscribed+0xac>
   147d8:	e7ea      	b.n	147b0 <bt_gatt_is_subscribed+0xa0>
   147da:	bf00      	nop
   147dc:	0002554e 	.word	0x0002554e
   147e0:	00022f17 	.word	0x00022f17

000147e4 <bt_gatt_discover>:
{
   147e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   147e6:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   147e8:	4605      	mov	r5, r0
{
   147ea:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   147ec:	b950      	cbnz	r0, 14804 <bt_gatt_discover+0x20>
   147ee:	4989      	ldr	r1, [pc, #548]	; (14a14 <bt_gatt_discover+0x230>)
   147f0:	4889      	ldr	r0, [pc, #548]	; (14a18 <bt_gatt_discover+0x234>)
   147f2:	f640 5277 	movw	r2, #3447	; 0xd77
   147f6:	f008 f98b 	bl	1cb10 <printk>
   147fa:	f640 5177 	movw	r1, #3447	; 0xd77
   147fe:	4885      	ldr	r0, [pc, #532]	; (14a14 <bt_gatt_discover+0x230>)
   14800:	f008 fc2c 	bl	1d05c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14804:	b10c      	cbz	r4, 1480a <bt_gatt_discover+0x26>
   14806:	6863      	ldr	r3, [r4, #4]
   14808:	b953      	cbnz	r3, 14820 <bt_gatt_discover+0x3c>
   1480a:	4982      	ldr	r1, [pc, #520]	; (14a14 <bt_gatt_discover+0x230>)
   1480c:	4882      	ldr	r0, [pc, #520]	; (14a18 <bt_gatt_discover+0x234>)
   1480e:	f640 5278 	movw	r2, #3448	; 0xd78
   14812:	f008 f97d 	bl	1cb10 <printk>
   14816:	f640 5178 	movw	r1, #3448	; 0xd78
   1481a:	487e      	ldr	r0, [pc, #504]	; (14a14 <bt_gatt_discover+0x230>)
   1481c:	f008 fc1e 	bl	1d05c <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   14820:	8923      	ldrh	r3, [r4, #8]
   14822:	b10b      	cbz	r3, 14828 <bt_gatt_discover+0x44>
   14824:	89e3      	ldrh	r3, [r4, #14]
   14826:	b953      	cbnz	r3, 1483e <bt_gatt_discover+0x5a>
   14828:	497a      	ldr	r1, [pc, #488]	; (14a14 <bt_gatt_discover+0x230>)
   1482a:	487b      	ldr	r0, [pc, #492]	; (14a18 <bt_gatt_discover+0x234>)
   1482c:	f640 5279 	movw	r2, #3449	; 0xd79
   14830:	f008 f96e 	bl	1cb10 <printk>
   14834:	f640 5179 	movw	r1, #3449	; 0xd79
   14838:	4876      	ldr	r0, [pc, #472]	; (14a14 <bt_gatt_discover+0x230>)
   1483a:	f008 fc0f 	bl	1d05c <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1483e:	8922      	ldrh	r2, [r4, #8]
   14840:	89e3      	ldrh	r3, [r4, #14]
   14842:	429a      	cmp	r2, r3
   14844:	d90a      	bls.n	1485c <bt_gatt_discover+0x78>
   14846:	4973      	ldr	r1, [pc, #460]	; (14a14 <bt_gatt_discover+0x230>)
   14848:	4873      	ldr	r0, [pc, #460]	; (14a18 <bt_gatt_discover+0x234>)
   1484a:	f640 527b 	movw	r2, #3451	; 0xd7b
   1484e:	f008 f95f 	bl	1cb10 <printk>
   14852:	f640 517b 	movw	r1, #3451	; 0xd7b
   14856:	486f      	ldr	r0, [pc, #444]	; (14a14 <bt_gatt_discover+0x230>)
   14858:	f008 fc00 	bl	1d05c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1485c:	7b6b      	ldrb	r3, [r5, #13]
   1485e:	2b07      	cmp	r3, #7
   14860:	f040 80d5 	bne.w	14a0e <bt_gatt_discover+0x22a>
	switch (params->type) {
   14864:	7c22      	ldrb	r2, [r4, #16]
   14866:	2a05      	cmp	r2, #5
   14868:	f200 80cc 	bhi.w	14a04 <bt_gatt_discover+0x220>
   1486c:	e8df f002 	tbb	[pc, r2]
   14870:	64640303 	.word	0x64640303
   14874:	b683      	.short	0xb683
		if (params->uuid) {
   14876:	6823      	ldr	r3, [r4, #0]
   14878:	2b00      	cmp	r3, #0
   1487a:	d03e      	beq.n	148fa <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   1487c:	2206      	movs	r2, #6
   1487e:	4628      	mov	r0, r5
   14880:	4611      	mov	r1, r2
   14882:	f7fe f9d3 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   14886:	4606      	mov	r6, r0
   14888:	b918      	cbnz	r0, 14892 <bt_gatt_discover+0xae>
		return -ENOMEM;
   1488a:	f06f 000b 	mvn.w	r0, #11
}
   1488e:	b005      	add	sp, #20
   14890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   14892:	f100 0708 	add.w	r7, r0, #8
   14896:	2106      	movs	r1, #6
   14898:	4638      	mov	r0, r7
   1489a:	f003 f8b9 	bl	17a10 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1489e:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   148a0:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   148a2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   148a4:	89e3      	ldrh	r3, [r4, #14]
   148a6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   148a8:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   148aa:	2b00      	cmp	r3, #0
   148ac:	f642 0301 	movw	r3, #10241	; 0x2801
   148b0:	bf08      	it	eq
   148b2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   148b6:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   148b8:	780a      	ldrb	r2, [r1, #0]
   148ba:	b15a      	cbz	r2, 148d4 <bt_gatt_discover+0xf0>
   148bc:	2a02      	cmp	r2, #2
   148be:	d016      	beq.n	148ee <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   148c0:	4856      	ldr	r0, [pc, #344]	; (14a1c <bt_gatt_discover+0x238>)
   148c2:	2145      	movs	r1, #69	; 0x45
   148c4:	f008 f924 	bl	1cb10 <printk>
		net_buf_unref(buf);
   148c8:	4630      	mov	r0, r6
   148ca:	f002 ff8b 	bl	177e4 <net_buf_unref>
	return -EINVAL;
   148ce:	f06f 0015 	mvn.w	r0, #21
   148d2:	e7dc      	b.n	1488e <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   148d4:	4638      	mov	r0, r7
   148d6:	8849      	ldrh	r1, [r1, #2]
   148d8:	f00b ff75 	bl	207c6 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   148dc:	4623      	mov	r3, r4
   148de:	4a50      	ldr	r2, [pc, #320]	; (14a20 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   148e0:	4631      	mov	r1, r6
   148e2:	4628      	mov	r0, r5
}
   148e4:	b005      	add	sp, #20
   148e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   148ea:	f7fe bffd 	b.w	138e8 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   148ee:	2210      	movs	r2, #16
   148f0:	4638      	mov	r0, r7
   148f2:	3101      	adds	r1, #1
   148f4:	f00b ff54 	bl	207a0 <net_buf_simple_add_mem>
   148f8:	e7f0      	b.n	148dc <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   148fa:	2204      	movs	r2, #4
   148fc:	2110      	movs	r1, #16
   148fe:	4628      	mov	r0, r5
   14900:	f7fe f994 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   14904:	4606      	mov	r6, r0
   14906:	2800      	cmp	r0, #0
   14908:	d0bf      	beq.n	1488a <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1490a:	f100 0708 	add.w	r7, r0, #8
   1490e:	2104      	movs	r1, #4
   14910:	4638      	mov	r0, r7
   14912:	f003 f87d 	bl	17a10 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14916:	8923      	ldrh	r3, [r4, #8]
   14918:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1491a:	89e3      	ldrh	r3, [r4, #14]
   1491c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1491e:	7c23      	ldrb	r3, [r4, #16]
   14920:	b93b      	cbnz	r3, 14932 <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   14922:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   14926:	4638      	mov	r0, r7
   14928:	f00b ff4d 	bl	207c6 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   1492c:	4623      	mov	r3, r4
   1492e:	4a3d      	ldr	r2, [pc, #244]	; (14a24 <bt_gatt_discover+0x240>)
   14930:	e7d6      	b.n	148e0 <bt_gatt_discover+0xfc>
   14932:	f642 0101 	movw	r1, #10241	; 0x2801
   14936:	e7f6      	b.n	14926 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14938:	2204      	movs	r2, #4
   1493a:	2108      	movs	r1, #8
   1493c:	4628      	mov	r0, r5
   1493e:	f7fe f975 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   14942:	4606      	mov	r6, r0
   14944:	2800      	cmp	r0, #0
   14946:	d0a0      	beq.n	1488a <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14948:	f100 0708 	add.w	r7, r0, #8
   1494c:	2104      	movs	r1, #4
   1494e:	4638      	mov	r0, r7
   14950:	f003 f85e 	bl	17a10 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14954:	8923      	ldrh	r3, [r4, #8]
   14956:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14958:	89e3      	ldrh	r3, [r4, #14]
   1495a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1495c:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   1495e:	4638      	mov	r0, r7
   14960:	2b02      	cmp	r3, #2
   14962:	bf0c      	ite	eq
   14964:	f642 0102 	movweq	r1, #10242	; 0x2802
   14968:	f642 0103 	movwne	r1, #10243	; 0x2803
   1496c:	f00b ff2b 	bl	207c6 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   14970:	4623      	mov	r3, r4
   14972:	4a2d      	ldr	r2, [pc, #180]	; (14a28 <bt_gatt_discover+0x244>)
   14974:	e7b4      	b.n	148e0 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   14976:	6820      	ldr	r0, [r4, #0]
   14978:	b380      	cbz	r0, 149dc <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1497a:	2600      	movs	r6, #0
   1497c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14980:	4669      	mov	r1, sp
   14982:	f88d 6000 	strb.w	r6, [sp]
   14986:	f8ad 3002 	strh.w	r3, [sp, #2]
   1498a:	f009 fe14 	bl	1e5b6 <bt_uuid_cmp>
		if (params->uuid &&
   1498e:	2800      	cmp	r0, #0
   14990:	d09d      	beq.n	148ce <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   14992:	f642 0301 	movw	r3, #10241	; 0x2801
   14996:	6820      	ldr	r0, [r4, #0]
   14998:	a901      	add	r1, sp, #4
   1499a:	f88d 6004 	strb.w	r6, [sp, #4]
   1499e:	f8ad 3006 	strh.w	r3, [sp, #6]
   149a2:	f009 fe08 	bl	1e5b6 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   149a6:	2800      	cmp	r0, #0
   149a8:	d091      	beq.n	148ce <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   149aa:	f642 0302 	movw	r3, #10242	; 0x2802
   149ae:	6820      	ldr	r0, [r4, #0]
   149b0:	a902      	add	r1, sp, #8
   149b2:	f88d 6008 	strb.w	r6, [sp, #8]
   149b6:	f8ad 300a 	strh.w	r3, [sp, #10]
   149ba:	f009 fdfc 	bl	1e5b6 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   149be:	2800      	cmp	r0, #0
   149c0:	d085      	beq.n	148ce <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   149c2:	f642 0303 	movw	r3, #10243	; 0x2803
   149c6:	6820      	ldr	r0, [r4, #0]
   149c8:	a903      	add	r1, sp, #12
   149ca:	f88d 600c 	strb.w	r6, [sp, #12]
   149ce:	f8ad 300e 	strh.w	r3, [sp, #14]
   149d2:	f009 fdf0 	bl	1e5b6 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   149d6:	2800      	cmp	r0, #0
   149d8:	f43f af79 	beq.w	148ce <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   149dc:	2204      	movs	r2, #4
   149de:	4628      	mov	r0, r5
   149e0:	4611      	mov	r1, r2
   149e2:	f7fe f923 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   149e6:	4606      	mov	r6, r0
   149e8:	2800      	cmp	r0, #0
   149ea:	f43f af4e 	beq.w	1488a <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   149ee:	2104      	movs	r1, #4
   149f0:	3008      	adds	r0, #8
   149f2:	f003 f80d 	bl	17a10 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   149f6:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   149f8:	4a0c      	ldr	r2, [pc, #48]	; (14a2c <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   149fa:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   149fc:	89e3      	ldrh	r3, [r4, #14]
   149fe:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14a00:	4623      	mov	r3, r4
   14a02:	e76d      	b.n	148e0 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14a04:	2145      	movs	r1, #69	; 0x45
   14a06:	480a      	ldr	r0, [pc, #40]	; (14a30 <bt_gatt_discover+0x24c>)
   14a08:	f008 f882 	bl	1cb10 <printk>
   14a0c:	e75f      	b.n	148ce <bt_gatt_discover+0xea>
		return -ENOTCONN;
   14a0e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14a12:	e73c      	b.n	1488e <bt_gatt_discover+0xaa>
   14a14:	0002554e 	.word	0x0002554e
   14a18:	00022f17 	.word	0x00022f17
   14a1c:	0002560d 	.word	0x0002560d
   14a20:	0001fc0b 	.word	0x0001fc0b
   14a24:	00014a35 	.word	0x00014a35
   14a28:	00014b3d 	.word	0x00014b3d
   14a2c:	00014ded 	.word	0x00014ded
   14a30:	00025627 	.word	0x00025627

00014a34 <gatt_read_group_rsp>:
{
   14a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a38:	b08f      	sub	sp, #60	; 0x3c
   14a3a:	4681      	mov	r9, r0
   14a3c:	4617      	mov	r7, r2
   14a3e:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   14a40:	b131      	cbz	r1, 14a50 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   14a42:	462a      	mov	r2, r5
   14a44:	2100      	movs	r1, #0
   14a46:	686b      	ldr	r3, [r5, #4]
}
   14a48:	b00f      	add	sp, #60	; 0x3c
   14a4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14a4e:	4718      	bx	r3
	switch (rsp->len) {
   14a50:	7812      	ldrb	r2, [r2, #0]
   14a52:	2a06      	cmp	r2, #6
   14a54:	d00d      	beq.n	14a72 <gatt_read_group_rsp+0x3e>
   14a56:	2a14      	cmp	r2, #20
   14a58:	d021      	beq.n	14a9e <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   14a5a:	2145      	movs	r1, #69	; 0x45
   14a5c:	4836      	ldr	r0, [pc, #216]	; (14b38 <gatt_read_group_rsp+0x104>)
   14a5e:	f008 f857 	bl	1cb10 <printk>
	params->func(conn, NULL, params);
   14a62:	462a      	mov	r2, r5
   14a64:	2100      	movs	r1, #0
   14a66:	4648      	mov	r0, r9
   14a68:	686b      	ldr	r3, [r5, #4]
   14a6a:	4798      	blx	r3
}
   14a6c:	b00f      	add	sp, #60	; 0x3c
   14a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   14a72:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   14a76:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14a78:	3b01      	subs	r3, #1
   14a7a:	b29c      	uxth	r4, r3
   14a7c:	f107 0801 	add.w	r8, r7, #1
   14a80:	783b      	ldrb	r3, [r7, #0]
   14a82:	42a3      	cmp	r3, r4
   14a84:	d90f      	bls.n	14aa6 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   14a86:	2c00      	cmp	r4, #0
   14a88:	d1eb      	bne.n	14a62 <gatt_read_group_rsp+0x2e>
   14a8a:	2e00      	cmp	r6, #0
   14a8c:	d0e9      	beq.n	14a62 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   14a8e:	462a      	mov	r2, r5
   14a90:	4631      	mov	r1, r6
   14a92:	4648      	mov	r0, r9
}
   14a94:	b00f      	add	sp, #60	; 0x3c
   14a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14a9a:	f00b b899 	b.w	1fbd0 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14a9e:	2202      	movs	r2, #2
   14aa0:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14aa4:	e7e7      	b.n	14a76 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   14aa6:	2214      	movs	r2, #20
   14aa8:	2100      	movs	r1, #0
   14aaa:	a809      	add	r0, sp, #36	; 0x24
   14aac:	f009 fd13 	bl	1e4d6 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   14ab0:	f8b8 a000 	ldrh.w	sl, [r8]
   14ab4:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d0d2      	beq.n	14a62 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   14abc:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   14ac0:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   14ac4:	2e00      	cmp	r6, #0
   14ac6:	d0cc      	beq.n	14a62 <gatt_read_group_rsp+0x2e>
   14ac8:	42b3      	cmp	r3, r6
   14aca:	d8ca      	bhi.n	14a62 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   14acc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14ad0:	b323      	cbz	r3, 14b1c <gatt_read_group_rsp+0xe8>
   14ad2:	2b02      	cmp	r3, #2
   14ad4:	d02a      	beq.n	14b2c <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   14ad6:	f04f 0300 	mov.w	r3, #0
   14ada:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14ade:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ae0:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	f642 0301 	movw	r3, #10241	; 0x2801
   14ae8:	bf08      	it	eq
   14aea:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14aee:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   14af2:	ab04      	add	r3, sp, #16
   14af4:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14af6:	ab01      	add	r3, sp, #4
   14af8:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   14afa:	ab02      	add	r3, sp, #8
   14afc:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14afe:	4648      	mov	r0, r9
   14b00:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   14b02:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   14b06:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14b0a:	a909      	add	r1, sp, #36	; 0x24
   14b0c:	4798      	blx	r3
   14b0e:	2800      	cmp	r0, #0
   14b10:	d0ac      	beq.n	14a6c <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14b12:	783a      	ldrb	r2, [r7, #0]
   14b14:	1aa4      	subs	r4, r4, r2
   14b16:	b2a4      	uxth	r4, r4
   14b18:	4490      	add	r8, r2
   14b1a:	e7b1      	b.n	14a80 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   14b1c:	2202      	movs	r2, #2
   14b1e:	f108 0104 	add.w	r1, r8, #4
   14b22:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14b26:	f009 fcab 	bl	1e480 <memcpy>
			break;
   14b2a:	e7d4      	b.n	14ad6 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14b2c:	2210      	movs	r2, #16
   14b2e:	f108 0104 	add.w	r1, r8, #4
   14b32:	f10d 0011 	add.w	r0, sp, #17
   14b36:	e7f6      	b.n	14b26 <gatt_read_group_rsp+0xf2>
   14b38:	00025647 	.word	0x00025647

00014b3c <gatt_read_type_rsp>:
{
   14b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b40:	b091      	sub	sp, #68	; 0x44
   14b42:	4607      	mov	r7, r0
   14b44:	4690      	mov	r8, r2
   14b46:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   14b48:	b131      	cbz	r1, 14b58 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   14b4a:	462a      	mov	r2, r5
   14b4c:	2100      	movs	r1, #0
   14b4e:	686b      	ldr	r3, [r5, #4]
}
   14b50:	b011      	add	sp, #68	; 0x44
   14b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14b56:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14b58:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   14b5a:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14b5c:	2802      	cmp	r0, #2
   14b5e:	f040 8089 	bne.w	14c74 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   14b62:	2a06      	cmp	r2, #6
   14b64:	d01c      	beq.n	14ba0 <gatt_read_type_rsp+0x64>
   14b66:	2a08      	cmp	r2, #8
   14b68:	f040 8088 	bne.w	14c7c <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   14b6c:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14b70:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14b72:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14b74:	1e5c      	subs	r4, r3, #1
   14b76:	b2a4      	uxth	r4, r4
   14b78:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14b7c:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   14b80:	f898 3000 	ldrb.w	r3, [r8]
   14b84:	42a3      	cmp	r3, r4
   14b86:	d90e      	bls.n	14ba6 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   14b88:	2c00      	cmp	r4, #0
   14b8a:	d17b      	bne.n	14c84 <gatt_read_type_rsp+0x148>
   14b8c:	2e00      	cmp	r6, #0
   14b8e:	d079      	beq.n	14c84 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   14b90:	462a      	mov	r2, r5
   14b92:	4631      	mov	r1, r6
   14b94:	4638      	mov	r0, r7
}
   14b96:	b011      	add	sp, #68	; 0x44
   14b98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14b9c:	f00b b818 	b.w	1fbd0 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14ba0:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   14ba4:	e7e4      	b.n	14b70 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   14ba6:	f8b9 3000 	ldrh.w	r3, [r9]
   14baa:	b29e      	uxth	r6, r3
		if (!handle) {
   14bac:	2e00      	cmp	r6, #0
   14bae:	d069      	beq.n	14c84 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   14bb0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   14bb4:	f8ad 2014 	strh.w	r2, [sp, #20]
   14bb8:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   14bba:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   14bbe:	b291      	uxth	r1, r2
   14bc0:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   14bc4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14bc8:	b182      	cbz	r2, 14bec <gatt_read_type_rsp+0xb0>
   14bca:	2a02      	cmp	r2, #2
   14bcc:	d019      	beq.n	14c02 <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14bce:	6829      	ldr	r1, [r5, #0]
   14bd0:	2900      	cmp	r1, #0
   14bd2:	d036      	beq.n	14c42 <gatt_read_type_rsp+0x106>
   14bd4:	4650      	mov	r0, sl
   14bd6:	9301      	str	r3, [sp, #4]
   14bd8:	f009 fced 	bl	1e5b6 <bt_uuid_cmp>
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	b380      	cbz	r0, 14c42 <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14be0:	f898 2000 	ldrb.w	r2, [r8]
   14be4:	1aa4      	subs	r4, r4, r2
   14be6:	b2a4      	uxth	r4, r4
   14be8:	4491      	add	r9, r2
   14bea:	e7c9      	b.n	14b80 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14bec:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14bf0:	f899 2006 	ldrb.w	r2, [r9, #6]
   14bf4:	f899 1007 	ldrb.w	r1, [r9, #7]
   14bf8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14bfc:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14c00:	e7e5      	b.n	14bce <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14c02:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14c04:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14c06:	4638      	mov	r0, r7
   14c08:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   14c0a:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14c0c:	9201      	str	r2, [sp, #4]
   14c0e:	f7fe f80d 	bl	12c2c <bt_att_create_pdu>
	if (!buf) {
   14c12:	4604      	mov	r4, r0
   14c14:	b190      	cbz	r0, 14c3c <gatt_read_type_rsp+0x100>
   14c16:	9a01      	ldr	r2, [sp, #4]
   14c18:	3008      	adds	r0, #8
   14c1a:	4611      	mov	r1, r2
   14c1c:	f002 fef8 	bl	17a10 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14c20:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14c22:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14c24:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14c26:	4a49      	ldr	r2, [pc, #292]	; (14d4c <gatt_read_type_rsp+0x210>)
   14c28:	462b      	mov	r3, r5
   14c2a:	4638      	mov	r0, r7
   14c2c:	f7fe fe5c 	bl	138e8 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14c30:	b286      	uxth	r6, r0
	if (!handle) {
   14c32:	2e00      	cmp	r6, #0
   14c34:	d1ac      	bne.n	14b90 <gatt_read_type_rsp+0x54>
}
   14c36:	b011      	add	sp, #68	; 0x44
   14c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14c3c:	f06f 000b 	mvn.w	r0, #11
   14c40:	e7f6      	b.n	14c30 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c42:	f642 0202 	movw	r2, #10242	; 0x2802
   14c46:	f8ad 200e 	strh.w	r2, [sp, #14]
   14c4a:	aa03      	add	r2, sp, #12
   14c4c:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14c50:	aa04      	add	r2, sp, #16
   14c52:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14c54:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c58:	462a      	mov	r2, r5
   14c5a:	4638      	mov	r0, r7
   14c5c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c5e:	f88d b00c 	strb.w	fp, [sp, #12]
   14c62:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14c66:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c6a:	a90b      	add	r1, sp, #44	; 0x2c
   14c6c:	4798      	blx	r3
   14c6e:	2800      	cmp	r0, #0
   14c70:	d1b6      	bne.n	14be0 <gatt_read_type_rsp+0xa4>
   14c72:	e7e0      	b.n	14c36 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14c74:	2a07      	cmp	r2, #7
   14c76:	d00b      	beq.n	14c90 <gatt_read_type_rsp+0x154>
   14c78:	2a15      	cmp	r2, #21
   14c7a:	d02e      	beq.n	14cda <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14c7c:	2145      	movs	r1, #69	; 0x45
   14c7e:	4834      	ldr	r0, [pc, #208]	; (14d50 <gatt_read_type_rsp+0x214>)
   14c80:	f007 ff46 	bl	1cb10 <printk>
	params->func(conn, NULL, params);
   14c84:	462a      	mov	r2, r5
   14c86:	2100      	movs	r1, #0
   14c88:	4638      	mov	r0, r7
   14c8a:	686b      	ldr	r3, [r5, #4]
   14c8c:	4798      	blx	r3
	if (!handle) {
   14c8e:	e7d2      	b.n	14c36 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   14c90:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14c94:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14c96:	1e5c      	subs	r4, r3, #1
   14c98:	b2a4      	uxth	r4, r4
   14c9a:	f108 0901 	add.w	r9, r8, #1
   14c9e:	f10d 0a18 	add.w	sl, sp, #24
   14ca2:	f898 3000 	ldrb.w	r3, [r8]
   14ca6:	42a3      	cmp	r3, r4
   14ca8:	f63f af6e 	bhi.w	14b88 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   14cac:	f8b9 b000 	ldrh.w	fp, [r9]
   14cb0:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   14cb4:	2e00      	cmp	r6, #0
   14cb6:	d0e5      	beq.n	14c84 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   14cb8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14cbc:	b18b      	cbz	r3, 14ce2 <gatt_read_type_rsp+0x1a6>
   14cbe:	2b02      	cmp	r3, #2
   14cc0:	d018      	beq.n	14cf4 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14cc2:	6829      	ldr	r1, [r5, #0]
   14cc4:	b1f1      	cbz	r1, 14d04 <gatt_read_type_rsp+0x1c8>
   14cc6:	4650      	mov	r0, sl
   14cc8:	f009 fc75 	bl	1e5b6 <bt_uuid_cmp>
   14ccc:	b1d0      	cbz	r0, 14d04 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14cce:	f898 2000 	ldrb.w	r2, [r8]
   14cd2:	1aa4      	subs	r4, r4, r2
   14cd4:	b2a4      	uxth	r4, r4
   14cd6:	4491      	add	r9, r2
   14cd8:	e7e3      	b.n	14ca2 <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   14cda:	2202      	movs	r2, #2
   14cdc:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14ce0:	e7d8      	b.n	14c94 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14ce2:	f899 3005 	ldrb.w	r3, [r9, #5]
   14ce6:	f899 2006 	ldrb.w	r2, [r9, #6]
   14cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14cee:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14cf2:	e7e6      	b.n	14cc2 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14cf4:	2210      	movs	r2, #16
   14cf6:	f109 0105 	add.w	r1, r9, #5
   14cfa:	f10d 0019 	add.w	r0, sp, #25
   14cfe:	f009 fbbf 	bl	1e480 <memcpy>
			break;
   14d02:	e7de      	b.n	14cc2 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14d04:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14d08:	f899 3002 	ldrb.w	r3, [r9, #2]
   14d0c:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14d10:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14d14:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14d18:	2300      	movs	r3, #0
   14d1a:	f8ad 200e 	strh.w	r2, [sp, #14]
   14d1e:	aa03      	add	r2, sp, #12
   14d20:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14d24:	aa04      	add	r2, sp, #16
   14d26:	f88d 300c 	strb.w	r3, [sp, #12]
   14d2a:	930d      	str	r3, [sp, #52]	; 0x34
   14d2c:	920e      	str	r2, [sp, #56]	; 0x38
   14d2e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d32:	462a      	mov	r2, r5
   14d34:	4638      	mov	r0, r7
   14d36:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14d38:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14d3c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d40:	a90b      	add	r1, sp, #44	; 0x2c
   14d42:	4798      	blx	r3
   14d44:	2800      	cmp	r0, #0
   14d46:	d1c2      	bne.n	14cce <gatt_read_type_rsp+0x192>
   14d48:	e775      	b.n	14c36 <gatt_read_type_rsp+0xfa>
   14d4a:	bf00      	nop
   14d4c:	00014d55 	.word	0x00014d55
   14d50:	00025647 	.word	0x00025647

00014d54 <read_included_uuid_cb>:
{
   14d54:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14d56:	2b10      	cmp	r3, #16
{
   14d58:	b08e      	sub	sp, #56	; 0x38
   14d5a:	4611      	mov	r1, r2
   14d5c:	4605      	mov	r5, r0
   14d5e:	461a      	mov	r2, r3
   14d60:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14d62:	d00b      	beq.n	14d7c <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14d64:	2145      	movs	r1, #69	; 0x45
   14d66:	4820      	ldr	r0, [pc, #128]	; (14de8 <read_included_uuid_cb+0x94>)
   14d68:	f007 fed2 	bl	1cb10 <printk>
		params->func(conn, NULL, params);
   14d6c:	4622      	mov	r2, r4
   14d6e:	2100      	movs	r1, #0
   14d70:	4628      	mov	r0, r5
   14d72:	6863      	ldr	r3, [r4, #4]
}
   14d74:	b00e      	add	sp, #56	; 0x38
   14d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14d7a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14d7c:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14d7e:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14d80:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14d84:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14d86:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14d8a:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14d8e:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14d90:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14d92:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14d96:	f009 fb73 	bl	1e480 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14d9a:	6821      	ldr	r1, [r4, #0]
   14d9c:	b9c9      	cbnz	r1, 14dd2 <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14d9e:	f642 0202 	movw	r2, #10242	; 0x2802
   14da2:	2300      	movs	r3, #0
   14da4:	f8ad 2006 	strh.w	r2, [sp, #6]
   14da8:	aa01      	add	r2, sp, #4
   14daa:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14dae:	f88d 3004 	strb.w	r3, [sp, #4]
   14db2:	930b      	str	r3, [sp, #44]	; 0x2c
   14db4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14db8:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14dba:	aa02      	add	r2, sp, #8
   14dbc:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14dbe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14dc2:	4622      	mov	r2, r4
   14dc4:	4628      	mov	r0, r5
   14dc6:	6863      	ldr	r3, [r4, #4]
   14dc8:	a909      	add	r1, sp, #36	; 0x24
   14dca:	4798      	blx	r3
   14dcc:	b930      	cbnz	r0, 14ddc <read_included_uuid_cb+0x88>
}
   14dce:	b00e      	add	sp, #56	; 0x38
   14dd0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14dd2:	4630      	mov	r0, r6
   14dd4:	f009 fbef 	bl	1e5b6 <bt_uuid_cmp>
   14dd8:	2800      	cmp	r0, #0
   14dda:	d0e0      	beq.n	14d9e <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14ddc:	4622      	mov	r2, r4
   14dde:	4628      	mov	r0, r5
   14de0:	8921      	ldrh	r1, [r4, #8]
   14de2:	f00a fef5 	bl	1fbd0 <gatt_discover_next>
	return;
   14de6:	e7f2      	b.n	14dce <read_included_uuid_cb+0x7a>
   14de8:	00025647 	.word	0x00025647

00014dec <gatt_find_info_rsp>:
{
   14dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df0:	b08f      	sub	sp, #60	; 0x3c
   14df2:	4680      	mov	r8, r0
   14df4:	4614      	mov	r4, r2
   14df6:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14df8:	b941      	cbnz	r1, 14e0c <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14dfa:	7812      	ldrb	r2, [r2, #0]
   14dfc:	2a01      	cmp	r2, #1
   14dfe:	d00b      	beq.n	14e18 <gatt_find_info_rsp+0x2c>
   14e00:	2a02      	cmp	r2, #2
   14e02:	d022      	beq.n	14e4a <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14e04:	2145      	movs	r1, #69	; 0x45
   14e06:	484b      	ldr	r0, [pc, #300]	; (14f34 <gatt_find_info_rsp+0x148>)
   14e08:	f007 fe82 	bl	1cb10 <printk>
	params->func(conn, NULL, params);
   14e0c:	4632      	mov	r2, r6
   14e0e:	2100      	movs	r1, #0
   14e10:	4640      	mov	r0, r8
   14e12:	6873      	ldr	r3, [r6, #4]
   14e14:	4798      	blx	r3
   14e16:	e08a      	b.n	14f2e <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14e18:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14e1c:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14e20:	3b01      	subs	r3, #1
   14e22:	b29b      	uxth	r3, r3
	if (length < len) {
   14e24:	4553      	cmp	r3, sl
   14e26:	d3f1      	bcc.n	14e0c <gatt_find_info_rsp+0x20>
	bool skip = false;
   14e28:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14e2c:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14e30:	46cb      	mov	fp, r9
			skip = false;
   14e32:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14e34:	9300      	str	r3, [sp, #0]
   14e36:	3401      	adds	r4, #1
   14e38:	af04      	add	r7, sp, #16
   14e3a:	9b00      	ldr	r3, [sp, #0]
   14e3c:	b953      	cbnz	r3, 14e54 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14e3e:	4632      	mov	r2, r6
   14e40:	4659      	mov	r1, fp
   14e42:	4640      	mov	r0, r8
   14e44:	f00a fec4 	bl	1fbd0 <gatt_discover_next>
	return;
   14e48:	e071      	b.n	14f2e <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14e4a:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14e4e:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14e52:	e7e5      	b.n	14e20 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14e54:	8823      	ldrh	r3, [r4, #0]
   14e56:	9301      	str	r3, [sp, #4]
   14e58:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14e5c:	f1b9 0f00 	cmp.w	r9, #0
   14e60:	d151      	bne.n	14f06 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14e62:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14e66:	2b00      	cmp	r3, #0
   14e68:	d03a      	beq.n	14ee0 <gatt_find_info_rsp+0xf4>
   14e6a:	2b02      	cmp	r3, #2
   14e6c:	d03f      	beq.n	14eee <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14e6e:	6831      	ldr	r1, [r6, #0]
   14e70:	2900      	cmp	r1, #0
   14e72:	d143      	bne.n	14efc <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14e74:	7c33      	ldrb	r3, [r6, #16]
   14e76:	2b04      	cmp	r3, #4
   14e78:	d148      	bne.n	14f0c <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14e7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14e7e:	4638      	mov	r0, r7
   14e80:	a902      	add	r1, sp, #8
   14e82:	f88d 5008 	strb.w	r5, [sp, #8]
   14e86:	f8ad 300a 	strh.w	r3, [sp, #10]
   14e8a:	f009 fb94 	bl	1e5b6 <bt_uuid_cmp>
   14e8e:	b310      	cbz	r0, 14ed6 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14e90:	f642 0301 	movw	r3, #10241	; 0x2801
   14e94:	4638      	mov	r0, r7
   14e96:	a903      	add	r1, sp, #12
   14e98:	f88d 500c 	strb.w	r5, [sp, #12]
   14e9c:	f8ad 300e 	strh.w	r3, [sp, #14]
   14ea0:	f009 fb89 	bl	1e5b6 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14ea4:	b1b8      	cbz	r0, 14ed6 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14ea6:	f642 0302 	movw	r3, #10242	; 0x2802
   14eaa:	4638      	mov	r0, r7
   14eac:	a909      	add	r1, sp, #36	; 0x24
   14eae:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14eb2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14eb6:	f009 fb7e 	bl	1e5b6 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14eba:	b160      	cbz	r0, 14ed6 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14ebc:	f642 0303 	movw	r3, #10243	; 0x2803
   14ec0:	4638      	mov	r0, r7
   14ec2:	a909      	add	r1, sp, #36	; 0x24
   14ec4:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14ec8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14ecc:	f009 fb73 	bl	1e5b6 <bt_uuid_cmp>
   14ed0:	b9e0      	cbnz	r0, 14f0c <gatt_find_info_rsp+0x120>
				skip = true;
   14ed2:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14ed6:	9b00      	ldr	r3, [sp, #0]
   14ed8:	4454      	add	r4, sl
   14eda:	3b01      	subs	r3, #1
   14edc:	9300      	str	r3, [sp, #0]
   14ede:	e7ac      	b.n	14e3a <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14ee0:	78a3      	ldrb	r3, [r4, #2]
   14ee2:	78e2      	ldrb	r2, [r4, #3]
   14ee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14ee8:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14eec:	e7bf      	b.n	14e6e <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14eee:	2210      	movs	r2, #16
   14ef0:	1ca1      	adds	r1, r4, #2
   14ef2:	f10d 0011 	add.w	r0, sp, #17
   14ef6:	f009 fac3 	bl	1e480 <memcpy>
			break;
   14efa:	e7b8      	b.n	14e6e <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14efc:	4638      	mov	r0, r7
   14efe:	f009 fb5a 	bl	1e5b6 <bt_uuid_cmp>
   14f02:	2800      	cmp	r0, #0
   14f04:	d0b6      	beq.n	14e74 <gatt_find_info_rsp+0x88>
			skip = false;
   14f06:	f04f 0900 	mov.w	r9, #0
   14f0a:	e7e4      	b.n	14ed6 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14f0c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14f10:	4632      	mov	r2, r6
		attr.handle = handle;
   14f12:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14f16:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14f18:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14f1c:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14f20:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14f22:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14f26:	a909      	add	r1, sp, #36	; 0x24
   14f28:	4798      	blx	r3
   14f2a:	2800      	cmp	r0, #0
   14f2c:	d1d3      	bne.n	14ed6 <gatt_find_info_rsp+0xea>
}
   14f2e:	b00f      	add	sp, #60	; 0x3c
   14f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f34:	00025660 	.word	0x00025660

00014f38 <bt_gatt_subscribe>:
{
   14f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f3a:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14f3c:	4606      	mov	r6, r0
   14f3e:	b950      	cbnz	r0, 14f56 <bt_gatt_subscribe+0x1e>
   14f40:	4944      	ldr	r1, [pc, #272]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f42:	4845      	ldr	r0, [pc, #276]	; (15058 <bt_gatt_subscribe+0x120>)
   14f44:	f640 72fb 	movw	r2, #4091	; 0xffb
   14f48:	f007 fde2 	bl	1cb10 <printk>
   14f4c:	f640 71fb 	movw	r1, #4091	; 0xffb
   14f50:	4840      	ldr	r0, [pc, #256]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f52:	f008 f883 	bl	1d05c <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14f56:	b10d      	cbz	r5, 14f5c <bt_gatt_subscribe+0x24>
   14f58:	682b      	ldr	r3, [r5, #0]
   14f5a:	b953      	cbnz	r3, 14f72 <bt_gatt_subscribe+0x3a>
   14f5c:	493d      	ldr	r1, [pc, #244]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f5e:	483e      	ldr	r0, [pc, #248]	; (15058 <bt_gatt_subscribe+0x120>)
   14f60:	f640 72fc 	movw	r2, #4092	; 0xffc
   14f64:	f007 fdd4 	bl	1cb10 <printk>
   14f68:	f640 71fc 	movw	r1, #4092	; 0xffc
   14f6c:	4839      	ldr	r0, [pc, #228]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f6e:	f008 f875 	bl	1d05c <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   14f72:	89ab      	ldrh	r3, [r5, #12]
   14f74:	b953      	cbnz	r3, 14f8c <bt_gatt_subscribe+0x54>
   14f76:	4937      	ldr	r1, [pc, #220]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f78:	4837      	ldr	r0, [pc, #220]	; (15058 <bt_gatt_subscribe+0x120>)
   14f7a:	f640 72fd 	movw	r2, #4093	; 0xffd
   14f7e:	f007 fdc7 	bl	1cb10 <printk>
   14f82:	f640 71fd 	movw	r1, #4093	; 0xffd
   14f86:	4833      	ldr	r0, [pc, #204]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f88:	f008 f868 	bl	1d05c <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14f8c:	896b      	ldrh	r3, [r5, #10]
   14f8e:	b953      	cbnz	r3, 14fa6 <bt_gatt_subscribe+0x6e>
   14f90:	4930      	ldr	r1, [pc, #192]	; (15054 <bt_gatt_subscribe+0x11c>)
   14f92:	4831      	ldr	r0, [pc, #196]	; (15058 <bt_gatt_subscribe+0x120>)
   14f94:	f241 0203 	movw	r2, #4099	; 0x1003
   14f98:	f007 fdba 	bl	1cb10 <printk>
   14f9c:	f241 0103 	movw	r1, #4099	; 0x1003
   14fa0:	482c      	ldr	r0, [pc, #176]	; (15054 <bt_gatt_subscribe+0x11c>)
   14fa2:	f008 f85b 	bl	1d05c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14fa6:	7b73      	ldrb	r3, [r6, #13]
   14fa8:	2b07      	cmp	r3, #7
   14faa:	d14b      	bne.n	15044 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14fac:	4630      	mov	r0, r6
   14fae:	f7fe fae5 	bl	1357c <gatt_sub_find>
	if (!sub) {
   14fb2:	4604      	mov	r4, r0
   14fb4:	b958      	cbnz	r0, 14fce <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14fb6:	f7fe fae1 	bl	1357c <gatt_sub_find>
		if (sub) {
   14fba:	4604      	mov	r4, r0
   14fbc:	2800      	cmp	r0, #0
   14fbe:	d044      	beq.n	1504a <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14fc0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14fc4:	3001      	adds	r0, #1
   14fc6:	f00a fbe7 	bl	1f798 <bt_addr_le_copy>
			sub->id = conn->id;
   14fca:	7a33      	ldrb	r3, [r6, #8]
   14fcc:	7023      	strb	r3, [r4, #0]
	return list->head;
   14fce:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14fd0:	b90a      	cbnz	r2, 14fd6 <bt_gatt_subscribe+0x9e>
   14fd2:	4613      	mov	r3, r2
   14fd4:	e001      	b.n	14fda <bt_gatt_subscribe+0xa2>
   14fd6:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14fda:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14fdc:	b97b      	cbnz	r3, 14ffe <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14fde:	bb41      	cbnz	r1, 15032 <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14fe0:	4630      	mov	r0, r6
   14fe2:	462b      	mov	r3, r5
   14fe4:	89aa      	ldrh	r2, [r5, #12]
   14fe6:	8969      	ldrh	r1, [r5, #10]
   14fe8:	f7fe ff22 	bl	13e30 <gatt_write_ccc.constprop.0>
		if (err) {
   14fec:	4606      	mov	r6, r0
   14fee:	b300      	cbz	r0, 15032 <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14ff0:	68a3      	ldr	r3, [r4, #8]
   14ff2:	b913      	cbnz	r3, 14ffa <bt_gatt_subscribe+0xc2>
   14ff4:	4620      	mov	r0, r4
   14ff6:	f00a fbee 	bl	1f7d6 <gatt_sub_remove.part.0>
}
   14ffa:	4630      	mov	r0, r6
   14ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14ffe:	42ab      	cmp	r3, r5
   15000:	d106      	bne.n	15010 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   15002:	b912      	cbnz	r2, 1500a <bt_gatt_subscribe+0xd2>
   15004:	4620      	mov	r0, r4
   15006:	f00a fbe6 	bl	1f7d6 <gatt_sub_remove.part.0>
			return -EALREADY;
   1500a:	f06f 0644 	mvn.w	r6, #68	; 0x44
   1500e:	e7f4      	b.n	14ffa <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   15010:	891f      	ldrh	r7, [r3, #8]
   15012:	8928      	ldrh	r0, [r5, #8]
   15014:	4287      	cmp	r7, r0
   15016:	d104      	bne.n	15022 <bt_gatt_subscribe+0xea>
   15018:	899f      	ldrh	r7, [r3, #12]
   1501a:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   1501c:	4287      	cmp	r7, r0
   1501e:	bf28      	it	cs
   15020:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   15022:	f113 0f14 	cmn.w	r3, #20
   15026:	d0da      	beq.n	14fde <bt_gatt_subscribe+0xa6>
	return node->next;
   15028:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1502a:	2b00      	cmp	r3, #0
   1502c:	d0d7      	beq.n	14fde <bt_gatt_subscribe+0xa6>
   1502e:	3b14      	subs	r3, #20
   15030:	e7d4      	b.n	14fdc <bt_gatt_subscribe+0xa4>
	parent->next = child;
   15032:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   15034:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   15036:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   1503a:	616a      	str	r2, [r5, #20]
	list->head = node;
   1503c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1503e:	b93e      	cbnz	r6, 15050 <bt_gatt_subscribe+0x118>
	list->tail = node;
   15040:	60e3      	str	r3, [r4, #12]
}
   15042:	e7da      	b.n	14ffa <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   15044:	f06f 0638 	mvn.w	r6, #56	; 0x38
   15048:	e7d7      	b.n	14ffa <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   1504a:	f06f 060b 	mvn.w	r6, #11
   1504e:	e7d4      	b.n	14ffa <bt_gatt_subscribe+0xc2>
	return 0;
   15050:	2600      	movs	r6, #0
   15052:	e7d2      	b.n	14ffa <bt_gatt_subscribe+0xc2>
   15054:	0002554e 	.word	0x0002554e
   15058:	00022f17 	.word	0x00022f17

0001505c <bt_gatt_unsubscribe>:
{
   1505c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15060:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   15062:	4607      	mov	r7, r0
   15064:	b950      	cbnz	r0, 1507c <bt_gatt_unsubscribe+0x20>
   15066:	4947      	ldr	r1, [pc, #284]	; (15184 <bt_gatt_unsubscribe+0x128>)
   15068:	4847      	ldr	r0, [pc, #284]	; (15188 <bt_gatt_unsubscribe+0x12c>)
   1506a:	f241 025c 	movw	r2, #4188	; 0x105c
   1506e:	f007 fd4f 	bl	1cb10 <printk>
   15072:	f241 015c 	movw	r1, #4188	; 0x105c
   15076:	4843      	ldr	r0, [pc, #268]	; (15184 <bt_gatt_unsubscribe+0x128>)
   15078:	f007 fff0 	bl	1d05c <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1507c:	b956      	cbnz	r6, 15094 <bt_gatt_unsubscribe+0x38>
   1507e:	4941      	ldr	r1, [pc, #260]	; (15184 <bt_gatt_unsubscribe+0x128>)
   15080:	4841      	ldr	r0, [pc, #260]	; (15188 <bt_gatt_unsubscribe+0x12c>)
   15082:	f241 025d 	movw	r2, #4189	; 0x105d
   15086:	f007 fd43 	bl	1cb10 <printk>
   1508a:	f241 015d 	movw	r1, #4189	; 0x105d
   1508e:	483d      	ldr	r0, [pc, #244]	; (15184 <bt_gatt_unsubscribe+0x128>)
   15090:	f007 ffe4 	bl	1d05c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   15094:	7b7b      	ldrb	r3, [r7, #13]
   15096:	2b07      	cmp	r3, #7
   15098:	d170      	bne.n	1517c <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   1509a:	4638      	mov	r0, r7
   1509c:	f7fe fa6e 	bl	1357c <gatt_sub_find>
	if (!sub) {
   150a0:	4680      	mov	r8, r0
   150a2:	b920      	cbnz	r0, 150ae <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   150a4:	f06f 0015 	mvn.w	r0, #21
}
   150a8:	b003      	add	sp, #12
   150aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   150ae:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   150b0:	b1cc      	cbz	r4, 150e6 <bt_gatt_unsubscribe+0x8a>
   150b2:	f1b4 0514 	subs.w	r5, r4, #20
   150b6:	d018      	beq.n	150ea <bt_gatt_unsubscribe+0x8e>
	return node->next;
   150b8:	6824      	ldr	r4, [r4, #0]
   150ba:	b104      	cbz	r4, 150be <bt_gatt_unsubscribe+0x62>
   150bc:	3c14      	subs	r4, #20
   150be:	f04f 0900 	mov.w	r9, #0
   150c2:	464b      	mov	r3, r9
   150c4:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   150c6:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   150ca:	b985      	cbnz	r5, 150ee <bt_gatt_unsubscribe+0x92>
	if (!found) {
   150cc:	2b00      	cmp	r3, #0
   150ce:	d0e9      	beq.n	150a4 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   150d0:	f1ba 0f00 	cmp.w	sl, #0
   150d4:	d047      	beq.n	15166 <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   150d6:	462b      	mov	r3, r5
   150d8:	462a      	mov	r2, r5
   150da:	4631      	mov	r1, r6
   150dc:	4638      	mov	r0, r7
   150de:	6834      	ldr	r4, [r6, #0]
   150e0:	47a0      	blx	r4
		return 0;
   150e2:	4628      	mov	r0, r5
   150e4:	e7e0      	b.n	150a8 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   150e6:	4625      	mov	r5, r4
   150e8:	e7e9      	b.n	150be <bt_gatt_unsubscribe+0x62>
   150ea:	462c      	mov	r4, r5
   150ec:	e7e7      	b.n	150be <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   150ee:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   150f0:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   150f4:	d12b      	bne.n	1514e <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   150f6:	696b      	ldr	r3, [r5, #20]
   150f8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   150fc:	f1b9 0f00 	cmp.w	r9, #0
   15100:	d11e      	bne.n	15140 <bt_gatt_unsubscribe+0xe4>
   15102:	4281      	cmp	r1, r0
	list->head = node;
   15104:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   15108:	d101      	bne.n	1510e <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   1510a:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   1510e:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15110:	4658      	mov	r0, fp
   15112:	616b      	str	r3, [r5, #20]
   15114:	f00a fb5c 	bl	1f7d0 <atomic_get>
			if (atomic_test_bit(params->flags,
   15118:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1511a:	f3c0 0380 	ubfx	r3, r0, #2, #1
   1511e:	d51e      	bpl.n	1515e <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   15120:	4631      	mov	r1, r6
   15122:	4638      	mov	r0, r7
   15124:	9301      	str	r3, [sp, #4]
   15126:	f7fe f98d 	bl	13444 <bt_att_req_cancel>
}
   1512a:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1512c:	b1cc      	cbz	r4, 15162 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1512e:	f114 0114 	adds.w	r1, r4, #20
   15132:	d002      	beq.n	1513a <bt_gatt_unsubscribe+0xde>
	return node->next;
   15134:	6961      	ldr	r1, [r4, #20]
   15136:	b101      	cbz	r1, 1513a <bt_gatt_unsubscribe+0xde>
   15138:	3914      	subs	r1, #20
   1513a:	4625      	mov	r5, r4
   1513c:	460c      	mov	r4, r1
   1513e:	e7c4      	b.n	150ca <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   15140:	4288      	cmp	r0, r1
	parent->next = child;
   15142:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   15146:	bf08      	it	eq
   15148:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   1514c:	e7df      	b.n	1510e <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   1514e:	892d      	ldrh	r5, [r5, #8]
   15150:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   15152:	4689      	mov	r9, r1
   15154:	4285      	cmp	r5, r0
   15156:	bf08      	it	eq
   15158:	f04f 0a01 	moveq.w	sl, #1
   1515c:	e7e6      	b.n	1512c <bt_gatt_unsubscribe+0xd0>
			found = true;
   1515e:	2301      	movs	r3, #1
   15160:	e7e4      	b.n	1512c <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15162:	4621      	mov	r1, r4
   15164:	e7e9      	b.n	1513a <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   15166:	4633      	mov	r3, r6
   15168:	4652      	mov	r2, sl
   1516a:	4638      	mov	r0, r7
   1516c:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   1516e:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   15172:	b003      	add	sp, #12
   15174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   15178:	f7fe be5a 	b.w	13e30 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   1517c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   15180:	e792      	b.n	150a8 <bt_gatt_unsubscribe+0x4c>
   15182:	bf00      	nop
   15184:	0002554e 	.word	0x0002554e
   15188:	00022f17 	.word	0x00022f17

0001518c <bt_gatt_mult_notification>:
{
   1518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15190:	b085      	sub	sp, #20
   15192:	4680      	mov	r8, r0
   15194:	460c      	mov	r4, r1
   15196:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   15198:	f7fe f9f0 	bl	1357c <gatt_sub_find>
	if (!sub) {
   1519c:	4606      	mov	r6, r0
   1519e:	b1d0      	cbz	r0, 151d6 <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   151a0:	464a      	mov	r2, r9
   151a2:	4621      	mov	r1, r4
   151a4:	a801      	add	r0, sp, #4
   151a6:	f00b fad2 	bl	2074e <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   151aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   151ae:	2b04      	cmp	r3, #4
   151b0:	d911      	bls.n	151d6 <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   151b2:	2104      	movs	r1, #4
   151b4:	eb0d 0001 	add.w	r0, sp, r1
   151b8:	f002 fc0c 	bl	179d4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   151bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   151c0:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   151c4:	4605      	mov	r5, r0
		if (len > buf.len) {
   151c6:	4553      	cmp	r3, sl
   151c8:	d208      	bcs.n	151dc <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   151ca:	464b      	mov	r3, r9
   151cc:	4652      	mov	r2, sl
   151ce:	2145      	movs	r1, #69	; 0x45
   151d0:	4816      	ldr	r0, [pc, #88]	; (1522c <bt_gatt_mult_notification+0xa0>)
   151d2:	f007 fc9d 	bl	1cb10 <printk>
}
   151d6:	b005      	add	sp, #20
   151d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   151dc:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   151de:	b303      	cbz	r3, 15222 <bt_gatt_mult_notification+0x96>
   151e0:	f1b3 0714 	subs.w	r7, r3, #20
   151e4:	d01d      	beq.n	15222 <bt_gatt_mult_notification+0x96>
	return node->next;
   151e6:	681c      	ldr	r4, [r3, #0]
   151e8:	b104      	cbz	r4, 151ec <bt_gatt_mult_notification+0x60>
   151ea:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   151ec:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   151f0:	893b      	ldrh	r3, [r7, #8]
   151f2:	455b      	cmp	r3, fp
   151f4:	d10b      	bne.n	1520e <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   151f6:	4653      	mov	r3, sl
   151f8:	462a      	mov	r2, r5
   151fa:	4639      	mov	r1, r7
   151fc:	4640      	mov	r0, r8
   151fe:	f8d7 c000 	ldr.w	ip, [r7]
   15202:	47e0      	blx	ip
   15204:	b918      	cbnz	r0, 1520e <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   15206:	4639      	mov	r1, r7
   15208:	4640      	mov	r0, r8
   1520a:	f7ff ff27 	bl	1505c <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1520e:	b144      	cbz	r4, 15222 <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15210:	f114 0314 	adds.w	r3, r4, #20
   15214:	d002      	beq.n	1521c <bt_gatt_mult_notification+0x90>
	return node->next;
   15216:	6963      	ldr	r3, [r4, #20]
   15218:	b103      	cbz	r3, 1521c <bt_gatt_mult_notification+0x90>
   1521a:	3b14      	subs	r3, #20
{
   1521c:	4627      	mov	r7, r4
   1521e:	461c      	mov	r4, r3
   15220:	e7e6      	b.n	151f0 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   15222:	4651      	mov	r1, sl
   15224:	a801      	add	r0, sp, #4
   15226:	f002 fbd5 	bl	179d4 <net_buf_simple_pull_mem>
   1522a:	e7be      	b.n	151aa <bt_gatt_mult_notification+0x1e>
   1522c:	00025677 	.word	0x00025677

00015230 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   15230:	2301      	movs	r3, #1
{
   15232:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15234:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   15238:	b08e      	sub	sp, #56	; 0x38
   1523a:	4605      	mov	r5, r0
	data.conn = conn;
   1523c:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1523e:	4631      	mov	r1, r6
   15240:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   15242:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15246:	f009 fbab 	bl	1e9a0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1524a:	b190      	cbz	r0, 15272 <bt_gatt_connected+0x42>
		if (conn->id) {
   1524c:	7a2a      	ldrb	r2, [r5, #8]
   1524e:	b35a      	cbz	r2, 152a8 <bt_gatt_connected+0x78>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15250:	ac02      	add	r4, sp, #8
   15252:	2104      	movs	r1, #4
   15254:	4620      	mov	r0, r4
   15256:	f007 fbc1 	bl	1c9dc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1525a:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1525c:	2124      	movs	r1, #36	; 0x24
   1525e:	4a1e      	ldr	r2, [pc, #120]	; (152d8 <bt_gatt_connected+0xa8>)
   15260:	a805      	add	r0, sp, #20
   15262:	4633      	mov	r3, r6
   15264:	f7f9 f9d0 	bl	e608 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   15268:	aa05      	add	r2, sp, #20
   1526a:	4610      	mov	r0, r2
   1526c:	491b      	ldr	r1, [pc, #108]	; (152dc <bt_gatt_connected+0xac>)
   1526e:	f7f6 fd05 	bl	bc7c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15272:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15276:	2001      	movs	r0, #1
   15278:	4a19      	ldr	r2, [pc, #100]	; (152e0 <bt_gatt_connected+0xb0>)
   1527a:	ab03      	add	r3, sp, #12
   1527c:	f00a fc6f 	bl	1fb5e <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   15280:	4628      	mov	r0, r5
   15282:	f009 fcbf 	bl	1ec04 <bt_conn_get_security>
   15286:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1528a:	4288      	cmp	r0, r1
   1528c:	d202      	bcs.n	15294 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   1528e:	4628      	mov	r0, r5
   15290:	f009 fc90 	bl	1ebb4 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   15294:	4628      	mov	r0, r5
   15296:	f7fe f971 	bl	1357c <gatt_sub_find>
	if (!sub) {
   1529a:	b118      	cbz	r0, 152a4 <bt_gatt_connected+0x74>
	return list->head;
   1529c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1529e:	b10c      	cbz	r4, 152a4 <bt_gatt_connected+0x74>
   152a0:	3c14      	subs	r4, #20
   152a2:	b91c      	cbnz	r4, 152ac <bt_gatt_connected+0x7c>
}
   152a4:	b00e      	add	sp, #56	; 0x38
   152a6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   152a8:	9200      	str	r2, [sp, #0]
   152aa:	e7d7      	b.n	1525c <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   152ac:	4631      	mov	r1, r6
   152ae:	7a28      	ldrb	r0, [r5, #8]
   152b0:	f009 fb76 	bl	1e9a0 <bt_addr_le_is_bonded>
   152b4:	b158      	cbz	r0, 152ce <bt_gatt_connected+0x9e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   152b6:	f104 0010 	add.w	r0, r4, #16
   152ba:	f00a fa89 	bl	1f7d0 <atomic_get>
   152be:	0783      	lsls	r3, r0, #30
   152c0:	d405      	bmi.n	152ce <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   152c2:	4623      	mov	r3, r4
   152c4:	4628      	mov	r0, r5
   152c6:	89a2      	ldrh	r2, [r4, #12]
   152c8:	8961      	ldrh	r1, [r4, #10]
   152ca:	f7fe fdb1 	bl	13e30 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   152ce:	f114 0f14 	cmn.w	r4, #20
   152d2:	d0e7      	beq.n	152a4 <bt_gatt_connected+0x74>
	return node->next;
   152d4:	6964      	ldr	r4, [r4, #20]
   152d6:	e7e2      	b.n	1529e <bt_gatt_connected+0x6e>
   152d8:	000255bd 	.word	0x000255bd
   152dc:	00014229 	.word	0x00014229
   152e0:	000145f9 	.word	0x000145f9

000152e4 <bt_gatt_encrypt_change>:
{
   152e4:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   152e6:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   152e8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   152ea:	466b      	mov	r3, sp
   152ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   152f0:	4a03      	ldr	r2, [pc, #12]	; (15300 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   152f2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   152f6:	f00a fc32 	bl	1fb5e <bt_gatt_foreach_attr>
}
   152fa:	b003      	add	sp, #12
   152fc:	f85d fb04 	ldr.w	pc, [sp], #4
   15300:	000145f9 	.word	0x000145f9

00015304 <db_hash_read>:
{
   15304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15306:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   15308:	4810      	ldr	r0, [pc, #64]	; (1534c <db_hash_read+0x48>)
{
   1530a:	4615      	mov	r5, r2
   1530c:	461f      	mov	r7, r3
   1530e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   15312:	f006 fd0f 	bl	1bd34 <k_delayed_work_cancel>
	if (!err) {
   15316:	b910      	cbnz	r0, 1531e <db_hash_read+0x1a>
		db_hash_gen(true);
   15318:	2001      	movs	r0, #1
   1531a:	f7fe fef5 	bl	14108 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1531e:	2101      	movs	r1, #1
   15320:	4620      	mov	r0, r4
   15322:	f00a fcec 	bl	1fcfe <bt_gatt_change_aware>
	if (offset > value_len) {
   15326:	2e10      	cmp	r6, #16
   15328:	d80c      	bhi.n	15344 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1532a:	f1c6 0410 	rsb	r4, r6, #16
   1532e:	42bc      	cmp	r4, r7
   15330:	bfa8      	it	ge
   15332:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   15334:	4906      	ldr	r1, [pc, #24]	; (15350 <db_hash_read+0x4c>)
   15336:	4622      	mov	r2, r4
   15338:	4628      	mov	r0, r5
   1533a:	4431      	add	r1, r6
   1533c:	f009 f8a0 	bl	1e480 <memcpy>
}
   15340:	4620      	mov	r0, r4
   15342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15344:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   15348:	e7fa      	b.n	15340 <db_hash_read+0x3c>
   1534a:	bf00      	nop
   1534c:	20008ec0 	.word	0x20008ec0
   15350:	2000b798 	.word	0x2000b798

00015354 <bt_gatt_store_ccc>:
	save.count = 0;
   15354:	2300      	movs	r3, #0
{
   15356:	b570      	push	{r4, r5, r6, lr}
   15358:	4604      	mov	r4, r0
   1535a:	b0c0      	sub	sp, #256	; 0x100
   1535c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1535e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   15360:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   15364:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   15366:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1536a:	2001      	movs	r0, #1
   1536c:	4a13      	ldr	r2, [pc, #76]	; (153bc <bt_gatt_store_ccc+0x68>)
   1536e:	ab0d      	add	r3, sp, #52	; 0x34
   15370:	f00a fbf5 	bl	1fb5e <bt_gatt_foreach_attr>
	if (id) {
   15374:	b1ec      	cbz	r4, 153b2 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   15376:	ae03      	add	r6, sp, #12
   15378:	4622      	mov	r2, r4
   1537a:	2104      	movs	r1, #4
   1537c:	4630      	mov	r0, r6
   1537e:	f007 fb2d 	bl	1c9dc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   15382:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   15384:	4a0e      	ldr	r2, [pc, #56]	; (153c0 <bt_gatt_store_ccc+0x6c>)
   15386:	462b      	mov	r3, r5
   15388:	2124      	movs	r1, #36	; 0x24
   1538a:	a804      	add	r0, sp, #16
   1538c:	f7f9 f93c 	bl	e608 <bt_settings_encode_key>
	if (save.count) {
   15390:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   15392:	b182      	cbz	r2, 153b6 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   15394:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   15396:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   15398:	a804      	add	r0, sp, #16
   1539a:	f7f6 fc0f 	bl	bbbc <settings_save_one>
	if (err) {
   1539e:	4604      	mov	r4, r0
   153a0:	b120      	cbz	r0, 153ac <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   153a2:	4602      	mov	r2, r0
   153a4:	2145      	movs	r1, #69	; 0x45
   153a6:	4807      	ldr	r0, [pc, #28]	; (153c4 <bt_gatt_store_ccc+0x70>)
   153a8:	f007 fbb2 	bl	1cb10 <printk>
}
   153ac:	4620      	mov	r0, r4
   153ae:	b040      	add	sp, #256	; 0x100
   153b0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   153b2:	9400      	str	r4, [sp, #0]
   153b4:	e7e6      	b.n	15384 <bt_gatt_store_ccc+0x30>
		str = NULL;
   153b6:	4611      	mov	r1, r2
   153b8:	e7ee      	b.n	15398 <bt_gatt_store_ccc+0x44>
   153ba:	bf00      	nop
   153bc:	00013abd 	.word	0x00013abd
   153c0:	000255bd 	.word	0x000255bd
   153c4:	00025695 	.word	0x00025695

000153c8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   153c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153cc:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   153ce:	4603      	mov	r3, r0
   153d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   153d4:	2001      	movs	r0, #1
{
   153d6:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   153d8:	4a52      	ldr	r2, [pc, #328]	; (15524 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153da:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   153de:	f00a fbbe 	bl	1fb5e <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153e2:	4629      	mov	r1, r5
   153e4:	7a20      	ldrb	r0, [r4, #8]
   153e6:	f009 fadb 	bl	1e9a0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   153ea:	b378      	cbz	r0, 1544c <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   153ec:	4629      	mov	r1, r5
   153ee:	7a20      	ldrb	r0, [r4, #8]
   153f0:	f7ff ffb0 	bl	15354 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   153f4:	4620      	mov	r0, r4
   153f6:	f7fe f883 	bl	13500 <find_cf_cfg>
	if (!cfg) {
   153fa:	4606      	mov	r6, r0
   153fc:	2800      	cmp	r0, #0
   153fe:	d05e      	beq.n	154be <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15400:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   15402:	3608      	adds	r6, #8
		if (conn->id) {
   15404:	2a00      	cmp	r2, #0
   15406:	d05c      	beq.n	154c2 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15408:	af02      	add	r7, sp, #8
   1540a:	2104      	movs	r1, #4
   1540c:	4638      	mov	r0, r7
   1540e:	f007 fae5 	bl	1c9dc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   15412:	462b      	mov	r3, r5
   15414:	9700      	str	r7, [sp, #0]
   15416:	2124      	movs	r1, #36	; 0x24
   15418:	4a43      	ldr	r2, [pc, #268]	; (15528 <bt_gatt_disconnected+0x160>)
   1541a:	a803      	add	r0, sp, #12
   1541c:	f7f9 f8f4 	bl	e608 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   15420:	7a23      	ldrb	r3, [r4, #8]
   15422:	2701      	movs	r7, #1
   15424:	b93b      	cbnz	r3, 15436 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   15426:	2300      	movs	r3, #0
   15428:	2124      	movs	r1, #36	; 0x24
   1542a:	9300      	str	r3, [sp, #0]
   1542c:	4a3e      	ldr	r2, [pc, #248]	; (15528 <bt_gatt_disconnected+0x160>)
   1542e:	462b      	mov	r3, r5
   15430:	a803      	add	r0, sp, #12
   15432:	f7f9 f8e9 	bl	e608 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   15436:	463a      	mov	r2, r7
   15438:	4631      	mov	r1, r6
   1543a:	a803      	add	r0, sp, #12
   1543c:	f7f6 fbbe 	bl	bbbc <settings_save_one>
	if (err) {
   15440:	4602      	mov	r2, r0
   15442:	b118      	cbz	r0, 1544c <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   15444:	2145      	movs	r1, #69	; 0x45
   15446:	4839      	ldr	r0, [pc, #228]	; (1552c <bt_gatt_disconnected+0x164>)
   15448:	f007 fb62 	bl	1cb10 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1544c:	4629      	mov	r1, r5
   1544e:	7a20      	ldrb	r0, [r4, #8]
   15450:	f009 faa6 	bl	1e9a0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15454:	b150      	cbz	r0, 1546c <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   15456:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15458:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   1545c:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15460:	2001      	movs	r0, #1
   15462:	4a33      	ldr	r2, [pc, #204]	; (15530 <bt_gatt_disconnected+0x168>)
   15464:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   15466:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15468:	f00a fb79 	bl	1fb5e <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1546c:	4620      	mov	r0, r4
   1546e:	f7fe f885 	bl	1357c <gatt_sub_find>
	if (!sub) {
   15472:	4607      	mov	r7, r0
   15474:	b3b0      	cbz	r0, 154e4 <bt_gatt_disconnected+0x11c>
	return list->head;
   15476:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15478:	b3a3      	cbz	r3, 154e4 <bt_gatt_disconnected+0x11c>
   1547a:	f1b3 0b14 	subs.w	fp, r3, #20
   1547e:	d031      	beq.n	154e4 <bt_gatt_disconnected+0x11c>
	return node->next;
   15480:	681e      	ldr	r6, [r3, #0]
   15482:	b106      	cbz	r6, 15486 <bt_gatt_disconnected+0xbe>
   15484:	3e14      	subs	r6, #20
   15486:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1548a:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1548c:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15490:	4629      	mov	r1, r5
   15492:	7a20      	ldrb	r0, [r4, #8]
   15494:	f009 fa84 	bl	1e9a0 <bt_addr_le_is_bonded>
   15498:	b9a8      	cbnz	r0, 154c6 <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   1549a:	465b      	mov	r3, fp
   1549c:	4642      	mov	r2, r8
   1549e:	4639      	mov	r1, r7
   154a0:	4620      	mov	r0, r4
			params->value = 0U;
   154a2:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   154a6:	f00a f9bb 	bl	1f820 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   154aa:	b1de      	cbz	r6, 154e4 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   154ac:	f116 0214 	adds.w	r2, r6, #20
   154b0:	d002      	beq.n	154b8 <bt_gatt_disconnected+0xf0>
	return node->next;
   154b2:	6972      	ldr	r2, [r6, #20]
   154b4:	b102      	cbz	r2, 154b8 <bt_gatt_disconnected+0xf0>
   154b6:	3a14      	subs	r2, #20
   154b8:	46b3      	mov	fp, r6
   154ba:	4616      	mov	r6, r2
   154bc:	e7e8      	b.n	15490 <bt_gatt_disconnected+0xc8>
		len = 0;
   154be:	4607      	mov	r7, r0
   154c0:	e7b1      	b.n	15426 <bt_gatt_disconnected+0x5e>
   154c2:	2701      	movs	r7, #1
   154c4:	e7af      	b.n	15426 <bt_gatt_disconnected+0x5e>
   154c6:	f10b 0010 	add.w	r0, fp, #16
   154ca:	f00a f981 	bl	1f7d0 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   154ce:	07c3      	lsls	r3, r0, #31
   154d0:	d4e3      	bmi.n	1549a <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   154d2:	787b      	ldrb	r3, [r7, #1]
   154d4:	b11b      	cbz	r3, 154de <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   154d6:	4629      	mov	r1, r5
   154d8:	4648      	mov	r0, r9
   154da:	f00a f95d 	bl	1f798 <bt_addr_le_copy>
			prev = &params->node;
   154de:	f10b 0814 	add.w	r8, fp, #20
   154e2:	e7e2      	b.n	154aa <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   154e4:	4620      	mov	r0, r4
   154e6:	f7fe f80b 	bl	13500 <find_cf_cfg>
	if (!cfg) {
   154ea:	4606      	mov	r6, r0
   154ec:	b1b8      	cbz	r0, 1551e <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   154ee:	4629      	mov	r1, r5
   154f0:	7a20      	ldrb	r0, [r4, #8]
   154f2:	f009 fa55 	bl	1e9a0 <bt_addr_le_is_bonded>
   154f6:	b928      	cbnz	r0, 15504 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   154f8:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   154fa:	b00d      	add	sp, #52	; 0x34
   154fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15500:	f00a b975 	b.w	1f7ee <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15504:	1c70      	adds	r0, r6, #1
   15506:	4629      	mov	r1, r5
   15508:	f00a f946 	bl	1f798 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1550c:	360c      	adds	r6, #12
   1550e:	e8d6 3fef 	ldaex	r3, [r6]
   15512:	f023 0302 	bic.w	r3, r3, #2
   15516:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1551a:	2a00      	cmp	r2, #0
   1551c:	d1f7      	bne.n	1550e <bt_gatt_disconnected+0x146>
}
   1551e:	b00d      	add	sp, #52	; 0x34
   15520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15524:	00013d55 	.word	0x00013d55
   15528:	000256e9 	.word	0x000256e9
   1552c:	000256b8 	.word	0x000256b8
   15530:	00013a09 	.word	0x00013a09

00015534 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   15534:	4b10      	ldr	r3, [pc, #64]	; (15578 <get_io_capa+0x44>)
   15536:	681b      	ldr	r3, [r3, #0]
   15538:	b1bb      	cbz	r3, 1556a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1553a:	681a      	ldr	r2, [r3, #0]
   1553c:	b142      	cbz	r2, 15550 <get_io_capa+0x1c>
   1553e:	6859      	ldr	r1, [r3, #4]
   15540:	b131      	cbz	r1, 15550 <get_io_capa+0x1c>
   15542:	6899      	ldr	r1, [r3, #8]
   15544:	b911      	cbnz	r1, 1554c <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   15546:	490d      	ldr	r1, [pc, #52]	; (1557c <get_io_capa+0x48>)
   15548:	7809      	ldrb	r1, [r1, #0]
   1554a:	b939      	cbnz	r1, 1555c <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1554c:	2004      	movs	r0, #4
   1554e:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   15550:	490a      	ldr	r1, [pc, #40]	; (1557c <get_io_capa+0x48>)
   15552:	7809      	ldrb	r1, [r1, #0]
   15554:	b111      	cbz	r1, 1555c <get_io_capa+0x28>
   15556:	b10a      	cbz	r2, 1555c <get_io_capa+0x28>
   15558:	6899      	ldr	r1, [r3, #8]
   1555a:	b941      	cbnz	r1, 1556e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1555c:	685b      	ldr	r3, [r3, #4]
   1555e:	b943      	cbnz	r3, 15572 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   15560:	2a00      	cmp	r2, #0
   15562:	bf0c      	ite	eq
   15564:	2003      	moveq	r0, #3
   15566:	2000      	movne	r0, #0
   15568:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1556a:	2003      	movs	r0, #3
   1556c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1556e:	2001      	movs	r0, #1
   15570:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   15572:	2002      	movs	r0, #2
	}
}
   15574:	4770      	bx	lr
   15576:	bf00      	nop
   15578:	20009c20 	.word	0x20009c20
   1557c:	2000b7b9 	.word	0x2000b7b9

00015580 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   15580:	4601      	mov	r1, r0
   15582:	2300      	movs	r3, #0
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   15584:	4a07      	ldr	r2, [pc, #28]	; (155a4 <smp_find+0x24>)
{
   15586:	b510      	push	{r4, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   15588:	f102 04c4 	add.w	r4, r2, #196	; 0xc4
   1558c:	18e0      	adds	r0, r4, r3
   1558e:	f00a fc01 	bl	1fd94 <atomic_test_bit>
   15592:	b108      	cbz	r0, 15598 <smp_find+0x18>
			return &bt_smp_pool[i];
   15594:	18d0      	adds	r0, r2, r3
		}
	}

	return NULL;
}
   15596:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15598:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   1559c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
   155a0:	d1f4      	bne.n	1558c <smp_find+0xc>
   155a2:	e7f8      	b.n	15596 <smp_find+0x16>
   155a4:	20008f48 	.word	0x20008f48

000155a8 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   155a8:	4288      	cmp	r0, r1
{
   155aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155ac:	4604      	mov	r4, r0
   155ae:	460d      	mov	r5, r1
   155b0:	4616      	mov	r6, r2
   155b2:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   155b6:	d916      	bls.n	155e6 <sys_memcpy_swap+0x3e>
   155b8:	188b      	adds	r3, r1, r2
   155ba:	4298      	cmp	r0, r3
   155bc:	d20a      	bcs.n	155d4 <sys_memcpy_swap+0x2c>
   155be:	490b      	ldr	r1, [pc, #44]	; (155ec <sys_memcpy_swap+0x44>)
   155c0:	480b      	ldr	r0, [pc, #44]	; (155f0 <sys_memcpy_swap+0x48>)
   155c2:	f240 2217 	movw	r2, #535	; 0x217
   155c6:	f007 faa3 	bl	1cb10 <printk>
   155ca:	f240 2117 	movw	r1, #535	; 0x217
   155ce:	4807      	ldr	r0, [pc, #28]	; (155ec <sys_memcpy_swap+0x44>)
   155d0:	f007 fd44 	bl	1d05c <assert_post_action>
	psrc += length - 1;
   155d4:	3e01      	subs	r6, #1
   155d6:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   155d8:	f815 3901 	ldrb.w	r3, [r5], #-1
   155dc:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   155e0:	42bc      	cmp	r4, r7
   155e2:	d1f9      	bne.n	155d8 <sys_memcpy_swap+0x30>
}
   155e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   155e6:	d0ea      	beq.n	155be <sys_memcpy_swap+0x16>
   155e8:	42b9      	cmp	r1, r7
   155ea:	e7e7      	b.n	155bc <sys_memcpy_swap+0x14>
   155ec:	00024c1d 	.word	0x00024c1d
   155f0:	00022f17 	.word	0x00022f17

000155f4 <smp_g2>:
{
   155f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   155f6:	460f      	mov	r7, r1
   155f8:	461e      	mov	r6, r3
   155fa:	4614      	mov	r4, r2
   155fc:	b099      	sub	sp, #100	; 0x64
	sys_memcpy_swap(m, u, 32);
   155fe:	4601      	mov	r1, r0
   15600:	2220      	movs	r2, #32
   15602:	a804      	add	r0, sp, #16
{
   15604:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   15606:	f7ff ffcf 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1560a:	2220      	movs	r2, #32
   1560c:	4639      	mov	r1, r7
   1560e:	a80c      	add	r0, sp, #48	; 0x30
   15610:	f7ff ffca 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   15614:	2210      	movs	r2, #16
   15616:	4631      	mov	r1, r6
   15618:	a814      	add	r0, sp, #80	; 0x50
   1561a:	f7ff ffc5 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1561e:	4621      	mov	r1, r4
   15620:	2210      	movs	r2, #16
   15622:	4668      	mov	r0, sp
   15624:	f7ff ffc0 	bl	155a8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   15628:	466b      	mov	r3, sp
   1562a:	2250      	movs	r2, #80	; 0x50
   1562c:	4618      	mov	r0, r3
   1562e:	a904      	add	r1, sp, #16
   15630:	f00a fc0e 	bl	1fe50 <bt_smp_aes_cmac>
	if (err) {
   15634:	4604      	mov	r4, r0
   15636:	b960      	cbnz	r0, 15652 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   15638:	2204      	movs	r2, #4
   1563a:	a903      	add	r1, sp, #12
   1563c:	4628      	mov	r0, r5
   1563e:	f008 ff1f 	bl	1e480 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   15642:	682b      	ldr	r3, [r5, #0]
   15644:	4a04      	ldr	r2, [pc, #16]	; (15658 <smp_g2+0x64>)
   15646:	ba1b      	rev	r3, r3
   15648:	fbb3 f1f2 	udiv	r1, r3, r2
   1564c:	fb02 3311 	mls	r3, r2, r1, r3
   15650:	602b      	str	r3, [r5, #0]
}
   15652:	4620      	mov	r0, r4
   15654:	b019      	add	sp, #100	; 0x64
   15656:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15658:	000f4240 	.word	0x000f4240

0001565c <smp_chan_get>:
{
   1565c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1565e:	2106      	movs	r1, #6
   15660:	f009 fc09 	bl	1ee76 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15664:	4604      	mov	r4, r0
   15666:	b918      	cbnz	r0, 15670 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
   15668:	2145      	movs	r1, #69	; 0x45
   1566a:	4802      	ldr	r0, [pc, #8]	; (15674 <smp_chan_get+0x18>)
   1566c:	f007 fa50 	bl	1cb10 <printk>
}
   15670:	4620      	mov	r0, r4
   15672:	bd10      	pop	{r4, pc}
   15674:	000256fa 	.word	0x000256fa

00015678 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   15678:	4b0f      	ldr	r3, [pc, #60]	; (156b8 <bt_smp_accept+0x40>)
{
   1567a:	b510      	push	{r4, lr}
		if (smp->chan.chan.conn) {
   1567c:	681c      	ldr	r4, [r3, #0]
{
   1567e:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   15680:	b164      	cbz	r4, 1569c <bt_smp_accept+0x24>
   15682:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
   15686:	b198      	cbz	r0, 156b0 <bt_smp_accept+0x38>
   15688:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
   1568c:	b190      	cbz	r0, 156b4 <bt_smp_accept+0x3c>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1568e:	480b      	ldr	r0, [pc, #44]	; (156bc <bt_smp_accept+0x44>)
   15690:	2145      	movs	r1, #69	; 0x45
   15692:	f007 fa3d 	bl	1cb10 <printk>
   15696:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   1569a:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1569c:	4622      	mov	r2, r4
		smp->chan.chan.ops = &ops;
   1569e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   156a2:	fb00 3302 	mla	r3, r0, r2, r3
   156a6:	4a06      	ldr	r2, [pc, #24]	; (156c0 <bt_smp_accept+0x48>)
		return 0;
   156a8:	2000      	movs	r0, #0
		smp->chan.chan.ops = &ops;
   156aa:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   156ac:	600b      	str	r3, [r1, #0]
		return 0;
   156ae:	e7f4      	b.n	1569a <bt_smp_accept+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   156b0:	2201      	movs	r2, #1
   156b2:	e7f4      	b.n	1569e <bt_smp_accept+0x26>
   156b4:	2202      	movs	r2, #2
   156b6:	e7f2      	b.n	1569e <bt_smp_accept+0x26>
   156b8:	20008f48 	.word	0x20008f48
   156bc:	0002571a 	.word	0x0002571a
   156c0:	00022590 	.word	0x00022590

000156c4 <get_pair_method>:
{
   156c4:	b538      	push	{r3, r4, r5, lr}
   156c6:	4605      	mov	r5, r0
   156c8:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   156ca:	30c4      	adds	r0, #196	; 0xc4
   156cc:	2105      	movs	r1, #5
   156ce:	f00a fb61 	bl	1fd94 <atomic_test_bit>
   156d2:	bb00      	cbnz	r0, 15716 <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   156d4:	2c04      	cmp	r4, #4
   156d6:	d81d      	bhi.n	15714 <get_pair_method+0x50>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   156d8:	f895 30cb 	ldrb.w	r3, [r5, #203]	; 0xcb
   156dc:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
   156e0:	4013      	ands	r3, r2
   156e2:	07d9      	lsls	r1, r3, #31
   156e4:	d434      	bmi.n	15750 <get_pair_method+0x8c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   156e6:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
   156ea:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   156ee:	4303      	orrs	r3, r0
   156f0:	f013 0004 	ands.w	r0, r3, #4
   156f4:	d00e      	beq.n	15714 <get_pair_method+0x50>
	method = gen_method_legacy[remote_io][get_io_capa()];
   156f6:	f7ff ff1d 	bl	15534 <get_io_capa>
   156fa:	4b18      	ldr	r3, [pc, #96]	; (1575c <get_pair_method+0x98>)
   156fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   15700:	441c      	add	r4, r3
   15702:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
   15704:	2804      	cmp	r0, #4
   15706:	d105      	bne.n	15714 <get_pair_method+0x50>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   15708:	682b      	ldr	r3, [r5, #0]
   1570a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1570c:	2b00      	cmp	r3, #0
   1570e:	bf0c      	ite	eq
   15710:	2002      	moveq	r0, #2
   15712:	2001      	movne	r0, #1
}
   15714:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   15716:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   1571a:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
   1571e:	ea03 0200 	and.w	r2, r3, r0
   15722:	0712      	lsls	r2, r2, #28
   15724:	d506      	bpl.n	15734 <get_pair_method+0x70>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   15726:	f895 20cb 	ldrb.w	r2, [r5, #203]	; 0xcb
   1572a:	f895 50d2 	ldrb.w	r5, [r5, #210]	; 0xd2
   1572e:	432a      	orrs	r2, r5
   15730:	07d2      	lsls	r2, r2, #31
   15732:	d40f      	bmi.n	15754 <get_pair_method+0x90>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   15734:	2c04      	cmp	r4, #4
   15736:	d80f      	bhi.n	15758 <get_pair_method+0x94>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   15738:	4318      	orrs	r0, r3
   1573a:	f010 0004 	ands.w	r0, r0, #4
   1573e:	d0e9      	beq.n	15714 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
   15740:	f7ff fef8 	bl	15534 <get_io_capa>
   15744:	4906      	ldr	r1, [pc, #24]	; (15760 <get_pair_method+0x9c>)
   15746:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1574a:	440c      	add	r4, r1
   1574c:	5c20      	ldrb	r0, [r4, r0]
   1574e:	e7e1      	b.n	15714 <get_pair_method+0x50>
		return LEGACY_OOB;
   15750:	2006      	movs	r0, #6
   15752:	e7df      	b.n	15714 <get_pair_method+0x50>
			return LE_SC_OOB;
   15754:	4608      	mov	r0, r1
   15756:	e7dd      	b.n	15714 <get_pair_method+0x50>
		return JUST_WORKS;
   15758:	2000      	movs	r0, #0
   1575a:	e7db      	b.n	15714 <get_pair_method+0x50>
   1575c:	00025b3f 	.word	0x00025b3f
   15760:	00025b58 	.word	0x00025b58

00015764 <get_auth.constprop.0>:
	if (sc_supported) {
   15764:	4b0c      	ldr	r3, [pc, #48]	; (15798 <get_auth.constprop.0+0x34>)
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   15766:	b510      	push	{r4, lr}
	if (sc_supported) {
   15768:	781b      	ldrb	r3, [r3, #0]
   1576a:	b17b      	cbz	r3, 1578c <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1576c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   15770:	f7ff fee0 	bl	15534 <get_io_capa>
	if (bondable) {
   15774:	4b09      	ldr	r3, [pc, #36]	; (1579c <get_auth.constprop.0+0x38>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   15776:	2803      	cmp	r0, #3
	if (bondable) {
   15778:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   1577a:	bf0c      	ite	eq
   1577c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   15780:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   15784:	b12b      	cbz	r3, 15792 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   15786:	f044 0001 	orr.w	r0, r4, #1
}
   1578a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1578c:	f000 0407 	and.w	r4, r0, #7
   15790:	e7ee      	b.n	15770 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   15792:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   15796:	e7f8      	b.n	1578a <get_auth.constprop.0+0x26>
   15798:	2000b7b9 	.word	0x2000b7b9
   1579c:	20008434 	.word	0x20008434

000157a0 <smp_f5>:
{
   157a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   157a4:	b09a      	sub	sp, #104	; 0x68
   157a6:	4616      	mov	r6, r2
   157a8:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   157ac:	aa0c      	add	r2, sp, #48	; 0x30
{
   157ae:	4684      	mov	ip, r0
   157b0:	468a      	mov	sl, r1
   157b2:	4690      	mov	r8, r2
   157b4:	461d      	mov	r5, r3
	uint8_t m[53] = { 0x00, /* counter */
   157b6:	4b2c      	ldr	r3, [pc, #176]	; (15868 <smp_f5+0xc8>)
   157b8:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   157bc:	4614      	mov	r4, r2
   157be:	6818      	ldr	r0, [r3, #0]
   157c0:	6859      	ldr	r1, [r3, #4]
   157c2:	3308      	adds	r3, #8
   157c4:	c403      	stmia	r4!, {r0, r1}
   157c6:	4573      	cmp	r3, lr
   157c8:	4622      	mov	r2, r4
   157ca:	d1f7      	bne.n	157bc <smp_f5+0x1c>
   157cc:	6818      	ldr	r0, [r3, #0]
   157ce:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
   157d0:	4661      	mov	r1, ip
	uint8_t m[53] = { 0x00, /* counter */
   157d2:	6020      	str	r0, [r4, #0]
   157d4:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   157d6:	2220      	movs	r2, #32
   157d8:	a804      	add	r0, sp, #16
   157da:	f7ff fee5 	bl	155a8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   157de:	466b      	mov	r3, sp
   157e0:	2220      	movs	r2, #32
   157e2:	4822      	ldr	r0, [pc, #136]	; (1586c <smp_f5+0xcc>)
   157e4:	a904      	add	r1, sp, #16
   157e6:	f00a fb33 	bl	1fe50 <bt_smp_aes_cmac>
	if (err) {
   157ea:	4604      	mov	r4, r0
   157ec:	bbc0      	cbnz	r0, 15860 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   157ee:	2210      	movs	r2, #16
   157f0:	4651      	mov	r1, sl
   157f2:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   157f6:	f7ff fed7 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   157fa:	2210      	movs	r2, #16
   157fc:	4631      	mov	r1, r6
   157fe:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   15802:	f7ff fed1 	bl	155a8 <sys_memcpy_swap>
	m[37] = a1->type;
   15806:	4629      	mov	r1, r5
   15808:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1580c:	2206      	movs	r2, #6
   1580e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   15812:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   15816:	f7ff fec7 	bl	155a8 <sys_memcpy_swap>
	m[44] = a2->type;
   1581a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1581c:	2206      	movs	r2, #6
	m[44] = a2->type;
   1581e:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   15822:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   15826:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1582a:	f7ff febd 	bl	155a8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1582e:	464b      	mov	r3, r9
   15830:	2235      	movs	r2, #53	; 0x35
   15832:	4641      	mov	r1, r8
   15834:	4668      	mov	r0, sp
   15836:	f00a fb0b 	bl	1fe50 <bt_smp_aes_cmac>
	if (err) {
   1583a:	4604      	mov	r4, r0
   1583c:	b980      	cbnz	r0, 15860 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   1583e:	4648      	mov	r0, r9
   15840:	f00a fb6a 	bl	1ff18 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   15844:	2301      	movs	r3, #1
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   15846:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   15848:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1584c:	4641      	mov	r1, r8
   1584e:	463b      	mov	r3, r7
   15850:	4668      	mov	r0, sp
   15852:	f00a fafd 	bl	1fe50 <bt_smp_aes_cmac>
	if (err) {
   15856:	4604      	mov	r4, r0
   15858:	b910      	cbnz	r0, 15860 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   1585a:	4638      	mov	r0, r7
   1585c:	f00a fb5c 	bl	1ff18 <sys_mem_swap.constprop.0>
}
   15860:	4620      	mov	r0, r4
   15862:	b01a      	add	sp, #104	; 0x68
   15864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15868:	00021d5d 	.word	0x00021d5d
   1586c:	00025b71 	.word	0x00025b71

00015870 <sc_smp_check_confirm>:
{
   15870:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   15872:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
{
   15876:	4604      	mov	r4, r0
   15878:	b087      	sub	sp, #28
   1587a:	2a05      	cmp	r2, #5
   1587c:	d81d      	bhi.n	158ba <sc_smp_check_confirm+0x4a>
   1587e:	e8df f002 	tbb	[pc, r2]
   15882:	0323      	.short	0x0323
   15884:	301c2303 	.word	0x301c2303
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15888:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
   1588c:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
   15890:	40d3      	lsrs	r3, r2
   15892:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   15896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1589a:	4913      	ldr	r1, [pc, #76]	; (158e8 <sc_smp_check_confirm+0x78>)
   1589c:	ad02      	add	r5, sp, #8
   1589e:	9500      	str	r5, [sp, #0]
   158a0:	6809      	ldr	r1, [r1, #0]
   158a2:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
   158a6:	f204 1017 	addw	r0, r4, #279	; 0x117
   158aa:	f00a fb8f 	bl	1ffcc <smp_f4>
   158ae:	b168      	cbz	r0, 158cc <sc_smp_check_confirm+0x5c>
		BT_ERR("Calculate confirm failed");
   158b0:	2145      	movs	r1, #69	; 0x45
   158b2:	480e      	ldr	r0, [pc, #56]	; (158ec <sc_smp_check_confirm+0x7c>)
   158b4:	f007 f92c 	bl	1cb10 <printk>
   158b8:	e003      	b.n	158c2 <sc_smp_check_confirm+0x52>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   158ba:	2145      	movs	r1, #69	; 0x45
   158bc:	480c      	ldr	r0, [pc, #48]	; (158f0 <sc_smp_check_confirm+0x80>)
   158be:	f007 f927 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   158c2:	2008      	movs	r0, #8
}
   158c4:	b007      	add	sp, #28
   158c6:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   158c8:	2300      	movs	r3, #0
   158ca:	e7e6      	b.n	1589a <sc_smp_check_confirm+0x2a>
	if (memcmp(smp->pcnf, cfm, 16)) {
   158cc:	2210      	movs	r2, #16
   158ce:	4629      	mov	r1, r5
   158d0:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   158d4:	f008 fdc3 	bl	1e45e <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
   158d8:	2800      	cmp	r0, #0
   158da:	bf0c      	ite	eq
   158dc:	2000      	moveq	r0, #0
   158de:	2004      	movne	r0, #4
   158e0:	e7f0      	b.n	158c4 <sc_smp_check_confirm+0x54>
	switch (smp->method) {
   158e2:	2000      	movs	r0, #0
   158e4:	e7ee      	b.n	158c4 <sc_smp_check_confirm+0x54>
   158e6:	bf00      	nop
   158e8:	20009d44 	.word	0x20009d44
   158ec:	00025765 	.word	0x00025765
   158f0:	00025744 	.word	0x00025744

000158f4 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   158f4:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   158f6:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   158f8:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   158fa:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   158fc:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   158fe:	460a      	mov	r2, r1
   15900:	6800      	ldr	r0, [r0, #0]
   15902:	2106      	movs	r1, #6
   15904:	f009 fa77 	bl	1edf6 <bt_l2cap_send_cb>
   15908:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1590c:	2300      	movs	r3, #0
   1590e:	4804      	ldr	r0, [pc, #16]	; (15920 <smp_send.constprop.0+0x2c>)
   15910:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
   15914:	b002      	add	sp, #8
   15916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1591a:	f006 b99b 	b.w	1bc54 <k_delayed_work_submit_to_queue>
   1591e:	bf00      	nop
   15920:	20009638 	.word	0x20009638

00015924 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   15924:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   15926:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   15928:	d00a      	beq.n	15940 <sec_level_reachable.isra.0+0x1c>
   1592a:	d805      	bhi.n	15938 <sec_level_reachable.isra.0+0x14>
   1592c:	3801      	subs	r0, #1
   1592e:	2801      	cmp	r0, #1
   15930:	bf8c      	ite	hi
   15932:	2000      	movhi	r0, #0
   15934:	2001      	movls	r0, #1
}
   15936:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   15938:	2804      	cmp	r0, #4
   1593a:	d010      	beq.n	1595e <sec_level_reachable.isra.0+0x3a>
   1593c:	2000      	movs	r0, #0
   1593e:	e7fa      	b.n	15936 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15940:	f7ff fdf8 	bl	15534 <get_io_capa>
   15944:	2803      	cmp	r0, #3
   15946:	d108      	bne.n	1595a <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   15948:	4b0c      	ldr	r3, [pc, #48]	; (1597c <sec_level_reachable.isra.0+0x58>)
   1594a:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1594c:	2800      	cmp	r0, #0
   1594e:	d0f2      	beq.n	15936 <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   15950:	68c0      	ldr	r0, [r0, #12]
   15952:	3800      	subs	r0, #0
   15954:	bf18      	it	ne
   15956:	2001      	movne	r0, #1
   15958:	e7ed      	b.n	15936 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1595a:	2001      	movs	r0, #1
   1595c:	e7eb      	b.n	15936 <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1595e:	f7ff fde9 	bl	15534 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   15962:	2803      	cmp	r0, #3
   15964:	d104      	bne.n	15970 <sec_level_reachable.isra.0+0x4c>
   15966:	4b05      	ldr	r3, [pc, #20]	; (1597c <sec_level_reachable.isra.0+0x58>)
   15968:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1596a:	b118      	cbz	r0, 15974 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1596c:	68c0      	ldr	r0, [r0, #12]
   1596e:	b108      	cbz	r0, 15974 <sec_level_reachable.isra.0+0x50>
   15970:	4b03      	ldr	r3, [pc, #12]	; (15980 <sec_level_reachable.isra.0+0x5c>)
   15972:	7818      	ldrb	r0, [r3, #0]
   15974:	f000 0001 	and.w	r0, r0, #1
   15978:	e7dd      	b.n	15936 <sec_level_reachable.isra.0+0x12>
   1597a:	bf00      	nop
   1597c:	20009c20 	.word	0x20009c20
   15980:	2000b7b9 	.word	0x2000b7b9

00015984 <display_passkey>:
{
   15984:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   15986:	2104      	movs	r1, #4
{
   15988:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1598a:	f500 70cc 	add.w	r0, r0, #408	; 0x198
   1598e:	f7fb fbc7 	bl	11120 <bt_rand>
   15992:	4605      	mov	r5, r0
   15994:	b9e0      	cbnz	r0, 159d0 <display_passkey+0x4c>
		smp->passkey %= 1000000;
   15996:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   1599a:	4a0e      	ldr	r2, [pc, #56]	; (159d4 <display_passkey+0x50>)
	if (bt_auth && bt_auth->passkey_display) {
   1599c:	4e0e      	ldr	r6, [pc, #56]	; (159d8 <display_passkey+0x54>)
		smp->passkey %= 1000000;
   1599e:	fbb3 f1f2 	udiv	r1, r3, r2
   159a2:	fb02 3311 	mls	r3, r2, r1, r3
	smp->passkey_round = 0U;
   159a6:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
   159aa:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
   159ac:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
   159b0:	b168      	cbz	r0, 159ce <display_passkey+0x4a>
   159b2:	6800      	ldr	r0, [r0, #0]
   159b4:	b158      	cbz	r0, 159ce <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   159b6:	210b      	movs	r1, #11
   159b8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   159bc:	f00a fb2b 	bl	20016 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   159c0:	6833      	ldr	r3, [r6, #0]
   159c2:	6820      	ldr	r0, [r4, #0]
   159c4:	681b      	ldr	r3, [r3, #0]
   159c6:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   159ca:	4798      	blx	r3
	return 0;
   159cc:	4628      	mov	r0, r5
}
   159ce:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   159d0:	2008      	movs	r0, #8
   159d2:	e7fc      	b.n	159ce <display_passkey+0x4a>
   159d4:	000f4240 	.word	0x000f4240
   159d8:	20009c20 	.word	0x20009c20

000159dc <smp_init>:
{
   159dc:	b538      	push	{r3, r4, r5, lr}
   159de:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   159e0:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
   159e4:	22f0      	movs	r2, #240	; 0xf0
   159e6:	2100      	movs	r1, #0
   159e8:	4628      	mov	r0, r5
   159ea:	f008 fd74 	bl	1e4d6 <memset>
	if (bt_rand(smp->prnd, 16)) {
   159ee:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   159f2:	2110      	movs	r1, #16
   159f4:	f7fb fb94 	bl	11120 <bt_rand>
   159f8:	4604      	mov	r4, r0
   159fa:	b948      	cbnz	r0, 15a10 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   159fc:	2105      	movs	r1, #5
   159fe:	4628      	mov	r0, r5
   15a00:	f00a fb09 	bl	20016 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   15a04:	f7fb faac 	bl	10f60 <bt_pub_key_get>
   15a08:	4b02      	ldr	r3, [pc, #8]	; (15a14 <smp_init+0x38>)
   15a0a:	6018      	str	r0, [r3, #0]
}
   15a0c:	4620      	mov	r0, r4
   15a0e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   15a10:	2408      	movs	r4, #8
   15a12:	e7fb      	b.n	15a0c <smp_init+0x30>
   15a14:	20009d44 	.word	0x20009d44

00015a18 <smp_dhkey_generate>:
{
   15a18:	b538      	push	{r3, r4, r5, lr}
   15a1a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   15a1c:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   15a20:	2108      	movs	r1, #8
   15a22:	4628      	mov	r0, r5
   15a24:	f00a faf7 	bl	20016 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   15a28:	4907      	ldr	r1, [pc, #28]	; (15a48 <smp_dhkey_generate+0x30>)
   15a2a:	f204 1017 	addw	r0, r4, #279	; 0x117
   15a2e:	f7fb faa5 	bl	10f7c <bt_dh_key_gen>
	if (err) {
   15a32:	b140      	cbz	r0, 15a46 <smp_dhkey_generate+0x2e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   15a34:	2108      	movs	r1, #8
   15a36:	4628      	mov	r0, r5
   15a38:	f00a f9ff 	bl	1fe3a <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   15a3c:	4803      	ldr	r0, [pc, #12]	; (15a4c <smp_dhkey_generate+0x34>)
   15a3e:	2145      	movs	r1, #69	; 0x45
   15a40:	f007 f866 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15a44:	2008      	movs	r0, #8
}
   15a46:	bd38      	pop	{r3, r4, r5, pc}
   15a48:	000201e3 	.word	0x000201e3
   15a4c:	00025783 	.word	0x00025783

00015a50 <legacy_request_tk>:
{
   15a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15a52:	6804      	ldr	r4, [r0, #0]
{
   15a54:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   15a56:	f104 0188 	add.w	r1, r4, #136	; 0x88
   15a5a:	7a20      	ldrb	r0, [r4, #8]
   15a5c:	f001 fc6c 	bl	17338 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   15a60:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   15a64:	b148      	cbz	r0, 15a7a <legacy_request_tk+0x2a>
   15a66:	7b43      	ldrb	r3, [r0, #13]
   15a68:	07db      	lsls	r3, r3, #31
   15a6a:	d506      	bpl.n	15a7a <legacy_request_tk+0x2a>
   15a6c:	b92a      	cbnz	r2, 15a7a <legacy_request_tk+0x2a>
		BT_ERR("JustWorks failed, authenticated keys present");
   15a6e:	2145      	movs	r1, #69	; 0x45
   15a70:	4830      	ldr	r0, [pc, #192]	; (15b34 <legacy_request_tk+0xe4>)
   15a72:	f007 f84d 	bl	1cb10 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   15a76:	2008      	movs	r0, #8
   15a78:	e01d      	b.n	15ab6 <legacy_request_tk+0x66>
	switch (smp->method) {
   15a7a:	4610      	mov	r0, r2
   15a7c:	2a06      	cmp	r2, #6
   15a7e:	d852      	bhi.n	15b26 <legacy_request_tk+0xd6>
   15a80:	e8df f002 	tbb	[pc, r2]
   15a84:	511b4619 	.word	0x511b4619
   15a88:	5151      	.short	0x5151
   15a8a:	04          	.byte	0x04
   15a8b:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   15a8c:	4e2a      	ldr	r6, [pc, #168]	; (15b38 <legacy_request_tk+0xe8>)
   15a8e:	6833      	ldr	r3, [r6, #0]
   15a90:	2b00      	cmp	r3, #0
   15a92:	d04d      	beq.n	15b30 <legacy_request_tk+0xe0>
   15a94:	68db      	ldr	r3, [r3, #12]
   15a96:	2b00      	cmp	r3, #0
   15a98:	d04a      	beq.n	15b30 <legacy_request_tk+0xe0>
			struct bt_conn_oob_info info = {
   15a9a:	2400      	movs	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15a9c:	210a      	movs	r1, #10
   15a9e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
			struct bt_conn_oob_info info = {
   15aa2:	f8ad 4004 	strh.w	r4, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15aa6:	f00a fab6 	bl	20016 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   15aaa:	6833      	ldr	r3, [r6, #0]
   15aac:	6828      	ldr	r0, [r5, #0]
   15aae:	68db      	ldr	r3, [r3, #12]
   15ab0:	a901      	add	r1, sp, #4
   15ab2:	4798      	blx	r3
	return 0;
   15ab4:	2000      	movs	r0, #0
}
   15ab6:	b002      	add	sp, #8
   15ab8:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
   15aba:	2104      	movs	r1, #4
   15abc:	eb0d 0001 	add.w	r0, sp, r1
   15ac0:	f7fb fb2e 	bl	11120 <bt_rand>
   15ac4:	2800      	cmp	r0, #0
   15ac6:	d1d6      	bne.n	15a76 <legacy_request_tk+0x26>
			passkey %= 1000000;
   15ac8:	9b01      	ldr	r3, [sp, #4]
   15aca:	4a1c      	ldr	r2, [pc, #112]	; (15b3c <legacy_request_tk+0xec>)
		if (bt_auth && bt_auth->passkey_display) {
   15acc:	4e1a      	ldr	r6, [pc, #104]	; (15b38 <legacy_request_tk+0xe8>)
			passkey %= 1000000;
   15ace:	fbb3 f1f2 	udiv	r1, r3, r2
   15ad2:	fb02 3311 	mls	r3, r2, r1, r3
   15ad6:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   15ad8:	6833      	ldr	r3, [r6, #0]
   15ada:	b15b      	cbz	r3, 15af4 <legacy_request_tk+0xa4>
   15adc:	681b      	ldr	r3, [r3, #0]
   15ade:	b14b      	cbz	r3, 15af4 <legacy_request_tk+0xa4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   15ae0:	210b      	movs	r1, #11
   15ae2:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15ae6:	f00a fa96 	bl	20016 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   15aea:	6833      	ldr	r3, [r6, #0]
   15aec:	4620      	mov	r0, r4
   15aee:	681b      	ldr	r3, [r3, #0]
   15af0:	9901      	ldr	r1, [sp, #4]
   15af2:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   15af4:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
   15af6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   15afa:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	sys_put_le16(val >> 16, &dst[2]);
   15afe:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15b00:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	dst[1] = val >> 8;
   15b04:	0a1b      	lsrs	r3, r3, #8
   15b06:	f885 2108 	strb.w	r2, [r5, #264]	; 0x108
   15b0a:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
   15b0e:	e7d1      	b.n	15ab4 <legacy_request_tk+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15b10:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15b14:	210a      	movs	r1, #10
   15b16:	f00a fa7e 	bl	20016 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   15b1a:	4b07      	ldr	r3, [pc, #28]	; (15b38 <legacy_request_tk+0xe8>)
   15b1c:	4620      	mov	r0, r4
   15b1e:	681b      	ldr	r3, [r3, #0]
   15b20:	685b      	ldr	r3, [r3, #4]
   15b22:	4798      	blx	r3
   15b24:	e7c6      	b.n	15ab4 <legacy_request_tk+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15b26:	2145      	movs	r1, #69	; 0x45
   15b28:	4805      	ldr	r0, [pc, #20]	; (15b40 <legacy_request_tk+0xf0>)
   15b2a:	f006 fff1 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15b2e:	e7a2      	b.n	15a76 <legacy_request_tk+0x26>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   15b30:	2002      	movs	r0, #2
   15b32:	e7c0      	b.n	15ab6 <legacy_request_tk+0x66>
   15b34:	000257a1 	.word	0x000257a1
   15b38:	20009c20 	.word	0x20009c20
   15b3c:	000f4240 	.word	0x000f4240
   15b40:	00025744 	.word	0x00025744

00015b44 <smp_ident_info>:
{
   15b44:	b570      	push	{r4, r5, r6, lr}
   15b46:	460b      	mov	r3, r1
   15b48:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15b4a:	210d      	movs	r1, #13
   15b4c:	30c4      	adds	r0, #196	; 0xc4
   15b4e:	f00a f921 	bl	1fd94 <atomic_test_bit>
   15b52:	b1c0      	cbz	r0, 15b86 <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
   15b54:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   15b56:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   15b58:	2002      	movs	r0, #2
   15b5a:	f103 0588 	add.w	r5, r3, #136	; 0x88
   15b5e:	462a      	mov	r2, r5
   15b60:	7a19      	ldrb	r1, [r3, #8]
   15b62:	f00a fdda 	bl	2071a <bt_keys_get_type>
		if (!keys) {
   15b66:	b948      	cbnz	r0, 15b7c <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
   15b68:	4628      	mov	r0, r5
   15b6a:	f7f8 fcad 	bl	e4c8 <bt_addr_le_str_real>
   15b6e:	2145      	movs	r1, #69	; 0x45
   15b70:	4602      	mov	r2, r0
   15b72:	4808      	ldr	r0, [pc, #32]	; (15b94 <smp_ident_info+0x50>)
   15b74:	f006 ffcc 	bl	1cb10 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   15b78:	2008      	movs	r0, #8
}
   15b7a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   15b7c:	2210      	movs	r2, #16
   15b7e:	4631      	mov	r1, r6
   15b80:	302a      	adds	r0, #42	; 0x2a
   15b82:	f008 fc7d 	bl	1e480 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   15b86:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15b8a:	2109      	movs	r1, #9
   15b8c:	f00a fa43 	bl	20016 <atomic_set_bit>
	return 0;
   15b90:	2000      	movs	r0, #0
   15b92:	e7f2      	b.n	15b7a <smp_ident_info+0x36>
   15b94:	000257d3 	.word	0x000257d3

00015b98 <smp_encrypt_info>:
{
   15b98:	b570      	push	{r4, r5, r6, lr}
   15b9a:	460b      	mov	r3, r1
   15b9c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15b9e:	210d      	movs	r1, #13
   15ba0:	30c4      	adds	r0, #196	; 0xc4
   15ba2:	f00a f8f7 	bl	1fd94 <atomic_test_bit>
   15ba6:	b1c0      	cbz	r0, 15bda <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   15ba8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   15baa:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   15bac:	2004      	movs	r0, #4
   15bae:	f103 0588 	add.w	r5, r3, #136	; 0x88
   15bb2:	462a      	mov	r2, r5
   15bb4:	7a19      	ldrb	r1, [r3, #8]
   15bb6:	f00a fdb0 	bl	2071a <bt_keys_get_type>
		if (!keys) {
   15bba:	b948      	cbnz	r0, 15bd0 <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
   15bbc:	4628      	mov	r0, r5
   15bbe:	f7f8 fc83 	bl	e4c8 <bt_addr_le_str_real>
   15bc2:	2145      	movs	r1, #69	; 0x45
   15bc4:	4602      	mov	r2, r0
   15bc6:	4808      	ldr	r0, [pc, #32]	; (15be8 <smp_encrypt_info+0x50>)
   15bc8:	f006 ffa2 	bl	1cb10 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   15bcc:	2008      	movs	r0, #8
}
   15bce:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   15bd0:	2210      	movs	r2, #16
   15bd2:	4631      	mov	r1, r6
   15bd4:	301a      	adds	r0, #26
   15bd6:	f008 fc53 	bl	1e480 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   15bda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15bde:	2107      	movs	r1, #7
   15be0:	f00a fa19 	bl	20016 <atomic_set_bit>
	return 0;
   15be4:	2000      	movs	r0, #0
   15be6:	e7f2      	b.n	15bce <smp_encrypt_info+0x36>
   15be8:	000257d3 	.word	0x000257d3

00015bec <bt_smp_distribute_keys>:
{
   15bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15bf0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   15bf2:	6800      	ldr	r0, [r0, #0]
{
   15bf4:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
   15bf6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   15bfa:	b95b      	cbnz	r3, 15c14 <bt_smp_distribute_keys+0x28>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   15bfc:	3088      	adds	r0, #136	; 0x88
   15bfe:	f7f8 fc63 	bl	e4c8 <bt_addr_le_str_real>
   15c02:	2145      	movs	r1, #69	; 0x45
   15c04:	4602      	mov	r2, r0
   15c06:	483e      	ldr	r0, [pc, #248]	; (15d00 <bt_smp_distribute_keys+0x114>)
   15c08:	f006 ff82 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15c0c:	2008      	movs	r0, #8
}
   15c0e:	b009      	add	sp, #36	; 0x24
   15c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15c14:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
   15c18:	2105      	movs	r1, #5
   15c1a:	4638      	mov	r0, r7
   15c1c:	f00a f8ba 	bl	1fd94 <atomic_test_bit>
   15c20:	b988      	cbnz	r0, 15c46 <bt_smp_distribute_keys+0x5a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   15c22:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   15c26:	f010 0001 	ands.w	r0, r0, #1
   15c2a:	d0f0      	beq.n	15c0e <bt_smp_distribute_keys+0x22>
	struct bt_keys *keys = conn->le.keys;
   15c2c:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15c2e:	211a      	movs	r1, #26
   15c30:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   15c32:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15c36:	f7fb fa73 	bl	11120 <bt_rand>
   15c3a:	4680      	mov	r8, r0
   15c3c:	b128      	cbz	r0, 15c4a <bt_smp_distribute_keys+0x5e>
			BT_ERR("Unable to get random bytes");
   15c3e:	2145      	movs	r1, #69	; 0x45
   15c40:	4830      	ldr	r0, [pc, #192]	; (15d04 <bt_smp_distribute_keys+0x118>)
			BT_ERR("Unable to allocate Master Ident buffer");
   15c42:	f006 ff65 	bl	1cb10 <printk>
	return 0;
   15c46:	2000      	movs	r0, #0
   15c48:	e7e1      	b.n	15c0e <bt_smp_distribute_keys+0x22>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   15c4a:	2106      	movs	r1, #6
   15c4c:	4620      	mov	r0, r4
   15c4e:	f00a fa04 	bl	2005a <smp_create_pdu.constprop.0>
		if (!buf) {
   15c52:	4606      	mov	r6, r0
   15c54:	b910      	cbnz	r0, 15c5c <bt_smp_distribute_keys+0x70>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   15c56:	2145      	movs	r1, #69	; 0x45
   15c58:	482b      	ldr	r0, [pc, #172]	; (15d08 <bt_smp_distribute_keys+0x11c>)
   15c5a:	e7f2      	b.n	15c42 <bt_smp_distribute_keys+0x56>
   15c5c:	2110      	movs	r1, #16
   15c5e:	3008      	adds	r0, #8
   15c60:	f001 fed6 	bl	17a10 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   15c64:	7b2a      	ldrb	r2, [r5, #12]
   15c66:	a901      	add	r1, sp, #4
   15c68:	4681      	mov	r9, r0
   15c6a:	f008 fc09 	bl	1e480 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   15c6e:	7b28      	ldrb	r0, [r5, #12]
   15c70:	280f      	cmp	r0, #15
   15c72:	d805      	bhi.n	15c80 <bt_smp_distribute_keys+0x94>
			(void)memset(info->ltk + keys->enc_size, 0,
   15c74:	f1c0 0210 	rsb	r2, r0, #16
   15c78:	4641      	mov	r1, r8
   15c7a:	4448      	add	r0, r9
   15c7c:	f008 fc2b 	bl	1e4d6 <memset>
		smp_send(smp, buf, NULL, NULL);
   15c80:	4631      	mov	r1, r6
   15c82:	2200      	movs	r2, #0
   15c84:	4620      	mov	r0, r4
   15c86:	f7ff fe35 	bl	158f4 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   15c8a:	2107      	movs	r1, #7
   15c8c:	4620      	mov	r0, r4
   15c8e:	f00a f9e4 	bl	2005a <smp_create_pdu.constprop.0>
		if (!buf) {
   15c92:	4606      	mov	r6, r0
   15c94:	b910      	cbnz	r0, 15c9c <bt_smp_distribute_keys+0xb0>
			BT_ERR("Unable to allocate Master Ident buffer");
   15c96:	2145      	movs	r1, #69	; 0x45
   15c98:	481c      	ldr	r0, [pc, #112]	; (15d0c <bt_smp_distribute_keys+0x120>)
   15c9a:	e7d2      	b.n	15c42 <bt_smp_distribute_keys+0x56>
   15c9c:	210a      	movs	r1, #10
   15c9e:	3008      	adds	r0, #8
   15ca0:	f001 feb6 	bl	17a10 <net_buf_simple_add>
   15ca4:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   15ca6:	2208      	movs	r2, #8
   15ca8:	a905      	add	r1, sp, #20
   15caa:	3002      	adds	r0, #2
   15cac:	f008 fbe8 	bl	1e480 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   15cb0:	2202      	movs	r2, #2
   15cb2:	a907      	add	r1, sp, #28
   15cb4:	4640      	mov	r0, r8
   15cb6:	f008 fbe3 	bl	1e480 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   15cba:	4631      	mov	r1, r6
   15cbc:	4620      	mov	r0, r4
   15cbe:	4a14      	ldr	r2, [pc, #80]	; (15d10 <bt_smp_distribute_keys+0x124>)
   15cc0:	f7ff fe18 	bl	158f4 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   15cc4:	210d      	movs	r1, #13
   15cc6:	4638      	mov	r0, r7
   15cc8:	f00a f864 	bl	1fd94 <atomic_test_bit>
   15ccc:	2800      	cmp	r0, #0
   15cce:	d0ba      	beq.n	15c46 <bt_smp_distribute_keys+0x5a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   15cd0:	4628      	mov	r0, r5
   15cd2:	2101      	movs	r1, #1
   15cd4:	f00a fd31 	bl	2073a <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   15cd8:	a901      	add	r1, sp, #4
   15cda:	2210      	movs	r2, #16
   15cdc:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   15ce0:	f008 fbce 	bl	1e480 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   15ce4:	a905      	add	r1, sp, #20
   15ce6:	2208      	movs	r2, #8
   15ce8:	f105 0040 	add.w	r0, r5, #64	; 0x40
   15cec:	f008 fbc8 	bl	1e480 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   15cf0:	2202      	movs	r2, #2
   15cf2:	a907      	add	r1, sp, #28
   15cf4:	f105 0048 	add.w	r0, r5, #72	; 0x48
   15cf8:	f008 fbc2 	bl	1e480 <memcpy>
   15cfc:	e7a3      	b.n	15c46 <bt_smp_distribute_keys+0x5a>
   15cfe:	bf00      	nop
   15d00:	000257f2 	.word	0x000257f2
   15d04:	0002580c 	.word	0x0002580c
   15d08:	0002582c 	.word	0x0002582c
   15d0c:	00025858 	.word	0x00025858
   15d10:	00016a69 	.word	0x00016a69

00015d14 <smp_send_pairing_req>:
{
   15d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15d18:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   15d1a:	f7ff fc9f 	bl	1565c <smp_chan_get>
	if (!smp) {
   15d1e:	4605      	mov	r5, r0
   15d20:	2800      	cmp	r0, #0
   15d22:	d06f      	beq.n	15e04 <smp_send_pairing_req+0xf0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15d24:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   15d28:	2104      	movs	r1, #4
   15d2a:	4640      	mov	r0, r8
   15d2c:	f00a f832 	bl	1fd94 <atomic_test_bit>
   15d30:	2800      	cmp	r0, #0
   15d32:	d16a      	bne.n	15e0a <smp_send_pairing_req+0xf6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15d34:	2103      	movs	r1, #3
   15d36:	4640      	mov	r0, r8
   15d38:	f00a f82c 	bl	1fd94 <atomic_test_bit>
   15d3c:	b120      	cbz	r0, 15d48 <smp_send_pairing_req+0x34>
		return -EBUSY;
   15d3e:	f06f 040f 	mvn.w	r4, #15
}
   15d42:	4620      	mov	r0, r4
   15d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15d48:	2101      	movs	r1, #1
   15d4a:	4640      	mov	r0, r8
   15d4c:	f00a f822 	bl	1fd94 <atomic_test_bit>
   15d50:	2800      	cmp	r0, #0
   15d52:	d1f4      	bne.n	15d3e <smp_send_pairing_req+0x2a>
	if (!sec_level_reachable(conn)) {
   15d54:	7aa0      	ldrb	r0, [r4, #10]
   15d56:	f7ff fde5 	bl	15924 <sec_level_reachable.isra.0>
   15d5a:	2800      	cmp	r0, #0
   15d5c:	d058      	beq.n	15e10 <smp_send_pairing_req+0xfc>
	if (!conn->le.keys) {
   15d5e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15d62:	b13b      	cbz	r3, 15d74 <smp_send_pairing_req+0x60>
	if (smp_init(smp)) {
   15d64:	4628      	mov	r0, r5
   15d66:	f7ff fe39 	bl	159dc <smp_init>
   15d6a:	4604      	mov	r4, r0
   15d6c:	b170      	cbz	r0, 15d8c <smp_send_pairing_req+0x78>
		return -ENOBUFS;
   15d6e:	f06f 0436 	mvn.w	r4, #54	; 0x36
   15d72:	e7e6      	b.n	15d42 <smp_send_pairing_req+0x2e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15d74:	7a20      	ldrb	r0, [r4, #8]
   15d76:	f104 0188 	add.w	r1, r4, #136	; 0x88
   15d7a:	f001 fa4f 	bl	1721c <bt_keys_get_addr>
   15d7e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15d82:	2800      	cmp	r0, #0
   15d84:	d1ee      	bne.n	15d64 <smp_send_pairing_req+0x50>
			return -ENOMEM;
   15d86:	f06f 040b 	mvn.w	r4, #11
   15d8a:	e7da      	b.n	15d42 <smp_send_pairing_req+0x2e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   15d8c:	2101      	movs	r1, #1
   15d8e:	4628      	mov	r0, r5
   15d90:	f00a f963 	bl	2005a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   15d94:	4607      	mov	r7, r0
   15d96:	2800      	cmp	r0, #0
   15d98:	d0e9      	beq.n	15d6e <smp_send_pairing_req+0x5a>
   15d9a:	2106      	movs	r1, #6
   15d9c:	3008      	adds	r0, #8
   15d9e:	f001 fe37 	bl	17a10 <net_buf_simple_add>
   15da2:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   15da4:	2009      	movs	r0, #9
   15da6:	f7ff fcdd 	bl	15764 <get_auth.constprop.0>
   15daa:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
   15dac:	f7ff fbc2 	bl	15534 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15db0:	4b19      	ldr	r3, [pc, #100]	; (15e18 <smp_send_pairing_req+0x104>)
	req->resp_key_dist = RECV_KEYS;
   15db2:	f04f 0903 	mov.w	r9, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15db6:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
   15db8:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15dbc:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   15dbe:	2310      	movs	r3, #16
   15dc0:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
   15dc2:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
   15dc4:	7030      	strb	r0, [r6, #0]
	req->init_key_dist = SEND_KEYS;
   15dc6:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
   15dc8:	f886 9005 	strb.w	r9, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   15dcc:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15dce:	f885 30c9 	strb.w	r3, [r5, #201]	; 0xc9
	smp->local_dist = SEND_KEYS;
   15dd2:	f8a5 21a8 	strh.w	r2, [r5, #424]	; 0x1a8
	memcpy(smp->preq + 1, req, sizeof(*req));
   15dd6:	f105 00ca 	add.w	r0, r5, #202	; 0xca
   15dda:	2206      	movs	r2, #6
   15ddc:	f008 fb50 	bl	1e480 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   15de0:	4622      	mov	r2, r4
   15de2:	4639      	mov	r1, r7
   15de4:	4628      	mov	r0, r5
   15de6:	f7ff fd85 	bl	158f4 <smp_send.constprop.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   15dea:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   15dee:	2102      	movs	r1, #2
   15df0:	f00a f911 	bl	20016 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   15df4:	210b      	movs	r1, #11
   15df6:	f00a f90e 	bl	20016 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   15dfa:	4649      	mov	r1, r9
   15dfc:	4640      	mov	r0, r8
   15dfe:	f00a f90a 	bl	20016 <atomic_set_bit>
	return 0;
   15e02:	e79e      	b.n	15d42 <smp_send_pairing_req+0x2e>
		return -ENOTCONN;
   15e04:	f06f 0438 	mvn.w	r4, #56	; 0x38
   15e08:	e79b      	b.n	15d42 <smp_send_pairing_req+0x2e>
		return -EIO;
   15e0a:	f06f 0404 	mvn.w	r4, #4
   15e0e:	e798      	b.n	15d42 <smp_send_pairing_req+0x2e>
		return -EINVAL;
   15e10:	f06f 0415 	mvn.w	r4, #21
   15e14:	e795      	b.n	15d42 <smp_send_pairing_req+0x2e>
   15e16:	bf00      	nop
   15e18:	2000b7b8 	.word	0x2000b7b8

00015e1c <smp_security_request>:
{
   15e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15e1e:	4606      	mov	r6, r0
   15e20:	f856 4bc4 	ldr.w	r4, [r6], #196
	struct bt_smp_security_request *req = (void *)buf->data;
   15e24:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15e26:	4630      	mov	r0, r6
   15e28:	2103      	movs	r1, #3
   15e2a:	f009 ffb3 	bl	1fd94 <atomic_test_bit>
   15e2e:	b110      	cbz	r0, 15e36 <smp_security_request+0x1a>
	return 0;
   15e30:	2000      	movs	r0, #0
}
   15e32:	b003      	add	sp, #12
   15e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15e36:	2101      	movs	r1, #1
   15e38:	4630      	mov	r0, r6
   15e3a:	f009 ffab 	bl	1fd94 <atomic_test_bit>
   15e3e:	2800      	cmp	r0, #0
   15e40:	d1f6      	bne.n	15e30 <smp_security_request+0x14>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   15e42:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   15e44:	4b2d      	ldr	r3, [pc, #180]	; (15efc <smp_security_request+0xe0>)
   15e46:	781b      	ldrb	r3, [r3, #0]
   15e48:	b17b      	cbz	r3, 15e6a <smp_security_request+0x4e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   15e4a:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   15e4e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15e52:	b16b      	cbz	r3, 15e70 <smp_security_request+0x54>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   15e54:	89db      	ldrh	r3, [r3, #14]
   15e56:	f003 0324 	and.w	r3, r3, #36	; 0x24
   15e5a:	b9d3      	cbnz	r3, 15e92 <smp_security_request+0x76>
	if (smp_send_pairing_req(conn) < 0) {
   15e5c:	4620      	mov	r0, r4
   15e5e:	f7ff ff59 	bl	15d14 <smp_send_pairing_req>
   15e62:	2800      	cmp	r0, #0
   15e64:	db42      	blt.n	15eec <smp_security_request+0xd0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15e66:	210f      	movs	r1, #15
   15e68:	e043      	b.n	15ef2 <smp_security_request+0xd6>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   15e6a:	f005 0507 	and.w	r5, r5, #7
   15e6e:	e7ee      	b.n	15e4e <smp_security_request+0x32>
					     &conn->le.dst);
   15e70:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   15e74:	463a      	mov	r2, r7
   15e76:	2020      	movs	r0, #32
   15e78:	7a21      	ldrb	r1, [r4, #8]
   15e7a:	f001 fa0f 	bl	1729c <bt_keys_find>
   15e7e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15e82:	b930      	cbnz	r0, 15e92 <smp_security_request+0x76>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   15e84:	463a      	mov	r2, r7
   15e86:	2004      	movs	r0, #4
   15e88:	7a21      	ldrb	r1, [r4, #8]
   15e8a:	f001 fa07 	bl	1729c <bt_keys_find>
   15e8e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   15e92:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   15e96:	2900      	cmp	r1, #0
   15e98:	d0e0      	beq.n	15e5c <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_MITM) &&
   15e9a:	076f      	lsls	r7, r5, #29
   15e9c:	d50f      	bpl.n	15ebe <smp_security_request+0xa2>
   15e9e:	7b4b      	ldrb	r3, [r1, #13]
   15ea0:	07d8      	lsls	r0, r3, #31
   15ea2:	d40c      	bmi.n	15ebe <smp_security_request+0xa2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   15ea4:	f7ff fb46 	bl	15534 <get_io_capa>
   15ea8:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   15eaa:	462a      	mov	r2, r5
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   15eac:	d002      	beq.n	15eb4 <smp_security_request+0x98>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15eae:	2149      	movs	r1, #73	; 0x49
   15eb0:	4813      	ldr	r0, [pc, #76]	; (15f00 <smp_security_request+0xe4>)
   15eb2:	e001      	b.n	15eb8 <smp_security_request+0x9c>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   15eb4:	2157      	movs	r1, #87	; 0x57
   15eb6:	4813      	ldr	r0, [pc, #76]	; (15f04 <smp_security_request+0xe8>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15eb8:	f006 fe2a 	bl	1cb10 <printk>
		goto pair;
   15ebc:	e7ce      	b.n	15e5c <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_SC) &&
   15ebe:	072a      	lsls	r2, r5, #28
   15ec0:	d504      	bpl.n	15ecc <smp_security_request+0xb0>
   15ec2:	89cb      	ldrh	r3, [r1, #14]
   15ec4:	069b      	lsls	r3, r3, #26
   15ec6:	d401      	bmi.n	15ecc <smp_security_request+0xb0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15ec8:	462a      	mov	r2, r5
   15eca:	e7f0      	b.n	15eae <smp_security_request+0x92>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   15ecc:	7b0b      	ldrb	r3, [r1, #12]
   15ece:	f101 0218 	add.w	r2, r1, #24
   15ed2:	9300      	str	r3, [sp, #0]
   15ed4:	4620      	mov	r0, r4
   15ed6:	f101 031a 	add.w	r3, r1, #26
   15eda:	3110      	adds	r1, #16
   15edc:	f008 fe2f 	bl	1eb3e <bt_conn_le_start_encryption>
   15ee0:	2800      	cmp	r0, #0
   15ee2:	da05      	bge.n	15ef0 <smp_security_request+0xd4>
		BT_ERR("Failed to start encryption");
   15ee4:	2145      	movs	r1, #69	; 0x45
   15ee6:	4808      	ldr	r0, [pc, #32]	; (15f08 <smp_security_request+0xec>)
   15ee8:	f006 fe12 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15eec:	2008      	movs	r0, #8
   15eee:	e7a0      	b.n	15e32 <smp_security_request+0x16>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   15ef0:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15ef2:	4630      	mov	r0, r6
   15ef4:	f00a f88f 	bl	20016 <atomic_set_bit>
   15ef8:	e79a      	b.n	15e30 <smp_security_request+0x14>
   15efa:	bf00      	nop
   15efc:	2000b7b9 	.word	0x2000b7b9
   15f00:	00025884 	.word	0x00025884
   15f04:	000258b0 	.word	0x000258b0
   15f08:	000258e4 	.word	0x000258e4

00015f0c <smp_send_pairing_confirm>:
{
   15f0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   15f0e:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
{
   15f12:	4605      	mov	r5, r0
	switch (smp->method) {
   15f14:	2c02      	cmp	r4, #2
   15f16:	d823      	bhi.n	15f60 <smp_send_pairing_confirm+0x54>
   15f18:	b144      	cbz	r4, 15f2c <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15f1a:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
   15f1e:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
   15f22:	40d4      	lsrs	r4, r2
   15f24:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   15f28:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   15f2c:	2103      	movs	r1, #3
   15f2e:	4628      	mov	r0, r5
   15f30:	f00a f893 	bl	2005a <smp_create_pdu.constprop.0>
	if (!buf) {
   15f34:	4606      	mov	r6, r0
   15f36:	b1d0      	cbz	r0, 15f6e <smp_send_pairing_confirm+0x62>
   15f38:	2110      	movs	r1, #16
   15f3a:	3008      	adds	r0, #8
   15f3c:	f001 fd68 	bl	17a10 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   15f40:	9000      	str	r0, [sp, #0]
   15f42:	4813      	ldr	r0, [pc, #76]	; (15f90 <smp_send_pairing_confirm+0x84>)
   15f44:	4623      	mov	r3, r4
   15f46:	6800      	ldr	r0, [r0, #0]
   15f48:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
   15f4c:	f205 1117 	addw	r1, r5, #279	; 0x117
   15f50:	f00a f83c 	bl	1ffcc <smp_f4>
   15f54:	4604      	mov	r4, r0
   15f56:	b170      	cbz	r0, 15f76 <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   15f58:	4630      	mov	r0, r6
   15f5a:	f001 fc43 	bl	177e4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   15f5e:	e006      	b.n	15f6e <smp_send_pairing_confirm+0x62>
	switch (smp->method) {
   15f60:	2c03      	cmp	r4, #3
   15f62:	d006      	beq.n	15f72 <smp_send_pairing_confirm+0x66>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15f64:	4622      	mov	r2, r4
   15f66:	2145      	movs	r1, #69	; 0x45
   15f68:	480a      	ldr	r0, [pc, #40]	; (15f94 <smp_send_pairing_confirm+0x88>)
   15f6a:	f006 fdd1 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15f6e:	2008      	movs	r0, #8
   15f70:	e00c      	b.n	15f8c <smp_send_pairing_confirm+0x80>
	switch (smp->method) {
   15f72:	2400      	movs	r4, #0
   15f74:	e7da      	b.n	15f2c <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   15f76:	4602      	mov	r2, r0
   15f78:	4631      	mov	r1, r6
   15f7a:	4628      	mov	r0, r5
   15f7c:	f7ff fcba 	bl	158f4 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   15f80:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15f84:	4621      	mov	r1, r4
   15f86:	f009 ff58 	bl	1fe3a <atomic_clear_bit>
	return 0;
   15f8a:	4620      	mov	r0, r4
}
   15f8c:	b002      	add	sp, #8
   15f8e:	bd70      	pop	{r4, r5, r6, pc}
   15f90:	20009d44 	.word	0x20009d44
   15f94:	00025744 	.word	0x00025744

00015f98 <smp_pairing_req>:
{
   15f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   15f9c:	688f      	ldr	r7, [r1, #8]
{
   15f9e:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   15fa0:	78fb      	ldrb	r3, [r7, #3]
   15fa2:	3b07      	subs	r3, #7
   15fa4:	2b09      	cmp	r3, #9
   15fa6:	f200 80d7 	bhi.w	16158 <smp_pairing_req+0x1c0>
	struct bt_conn *conn = smp->chan.chan.conn;
   15faa:	f8d0 8000 	ldr.w	r8, [r0]
	if (!conn->le.keys) {
   15fae:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   15fb2:	b173      	cbz	r3, 15fd2 <smp_pairing_req+0x3a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   15fb4:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   15fb8:	210f      	movs	r1, #15
   15fba:	4630      	mov	r0, r6
   15fbc:	f009 feea 	bl	1fd94 <atomic_test_bit>
   15fc0:	b998      	cbnz	r0, 15fea <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   15fc2:	4620      	mov	r0, r4
   15fc4:	f7ff fd0a 	bl	159dc <smp_init>
		if (ret) {
   15fc8:	b178      	cbz	r0, 15fea <smp_pairing_req+0x52>
			return ret;
   15fca:	b2c5      	uxtb	r5, r0
}
   15fcc:	4628      	mov	r0, r5
   15fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15fd2:	f898 0008 	ldrb.w	r0, [r8, #8]
   15fd6:	f108 0188 	add.w	r1, r8, #136	; 0x88
   15fda:	f001 f91f 	bl	1721c <bt_keys_get_addr>
   15fde:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   15fe2:	2800      	cmp	r0, #0
   15fe4:	d1e6      	bne.n	15fb4 <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   15fe6:	2508      	movs	r5, #8
   15fe8:	e7f0      	b.n	15fcc <smp_pairing_req+0x34>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15fea:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   15fec:	2206      	movs	r2, #6
   15fee:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15ff0:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
   15ff4:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   15ff8:	f008 fa42 	bl	1e480 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   15ffc:	2302      	movs	r3, #2
   15ffe:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
   16002:	78b8      	ldrb	r0, [r7, #2]
   16004:	f7ff fbae 	bl	15764 <get_auth.constprop.0>
   16008:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
   1600c:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   1600e:	f7ff fa91 	bl	15534 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   16012:	4b53      	ldr	r3, [pc, #332]	; (16160 <smp_pairing_req+0x1c8>)
	rsp->io_capability = get_io_capa();
   16014:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   16018:	781b      	ldrb	r3, [r3, #0]
   1601a:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1601e:	2310      	movs	r3, #16
   16020:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   16024:	793b      	ldrb	r3, [r7, #4]
   16026:	f003 0303 	and.w	r3, r3, #3
   1602a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1602e:	797b      	ldrb	r3, [r7, #5]
   16030:	f003 0301 	and.w	r3, r3, #1
   16034:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   16038:	072b      	lsls	r3, r5, #28
   1603a:	d50f      	bpl.n	1605c <smp_pairing_req+0xc4>
   1603c:	78bb      	ldrb	r3, [r7, #2]
   1603e:	071d      	lsls	r5, r3, #28
   16040:	d50c      	bpl.n	1605c <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   16042:	2105      	movs	r1, #5
   16044:	4630      	mov	r0, r6
   16046:	f009 ffe6 	bl	20016 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1604a:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   1604e:	f003 0302 	and.w	r3, r3, #2
   16052:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
   16056:	2300      	movs	r3, #0
   16058:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1605c:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   16060:	0698      	lsls	r0, r3, #26
   16062:	d506      	bpl.n	16072 <smp_pairing_req+0xda>
   16064:	78bb      	ldrb	r3, [r7, #2]
   16066:	0699      	lsls	r1, r3, #26
   16068:	d503      	bpl.n	16072 <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1606a:	2114      	movs	r1, #20
   1606c:	4630      	mov	r0, r6
   1606e:	f009 ffd2 	bl	20016 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   16072:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   16076:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
   1607a:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   1607e:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   16082:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   16086:	07da      	lsls	r2, r3, #31
   16088:	d506      	bpl.n	16098 <smp_pairing_req+0x100>
   1608a:	78bb      	ldrb	r3, [r7, #2]
   1608c:	07db      	lsls	r3, r3, #31
   1608e:	d503      	bpl.n	16098 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   16090:	210d      	movs	r1, #13
   16092:	4630      	mov	r0, r6
   16094:	f009 ffbf 	bl	20016 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   16098:	2103      	movs	r1, #3
   1609a:	4630      	mov	r0, r6
   1609c:	f009 ffbb 	bl	20016 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   160a0:	7839      	ldrb	r1, [r7, #0]
   160a2:	4620      	mov	r0, r4
   160a4:	f7ff fb0e 	bl	156c4 <get_pair_method>
   160a8:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
   160ac:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   160b0:	4620      	mov	r0, r4
   160b2:	f009 fe75 	bl	1fda0 <update_keys_check>
   160b6:	2800      	cmp	r0, #0
   160b8:	d050      	beq.n	1615c <smp_pairing_req+0x1c4>
	err = remote_sec_level_reachable(smp);
   160ba:	4620      	mov	r0, r4
   160bc:	f009 fe95 	bl	1fdea <remote_sec_level_reachable>
	if (err) {
   160c0:	4605      	mov	r5, r0
   160c2:	2800      	cmp	r0, #0
   160c4:	d182      	bne.n	15fcc <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   160c6:	2105      	movs	r1, #5
   160c8:	4630      	mov	r0, r6
   160ca:	f009 fe63 	bl	1fd94 <atomic_test_bit>
   160ce:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   160d2:	bb20      	cbnz	r0, 1611e <smp_pairing_req+0x186>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   160d4:	b995      	cbnz	r5, 160fc <smp_pairing_req+0x164>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   160d6:	210f      	movs	r1, #15
   160d8:	4630      	mov	r0, r6
   160da:	f009 fe5b 	bl	1fd94 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   160de:	b968      	cbnz	r0, 160fc <smp_pairing_req+0x164>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   160e0:	4f20      	ldr	r7, [pc, #128]	; (16164 <smp_pairing_req+0x1cc>)
   160e2:	683b      	ldr	r3, [r7, #0]
   160e4:	b153      	cbz	r3, 160fc <smp_pairing_req+0x164>
	    bt_auth && bt_auth->pairing_confirm) {
   160e6:	695b      	ldr	r3, [r3, #20]
   160e8:	b143      	cbz	r3, 160fc <smp_pairing_req+0x164>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   160ea:	4630      	mov	r0, r6
   160ec:	210a      	movs	r1, #10
   160ee:	f009 ff92 	bl	20016 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   160f2:	683b      	ldr	r3, [r7, #0]
   160f4:	6820      	ldr	r0, [r4, #0]
   160f6:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   160f8:	4798      	blx	r3
		return 0;
   160fa:	e767      	b.n	15fcc <smp_pairing_req+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   160fc:	2103      	movs	r1, #3
   160fe:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16102:	f009 ff88 	bl	20016 <atomic_set_bit>
	ret = send_pairing_rsp(smp);
   16106:	4620      	mov	r0, r4
   16108:	f009 ffc7 	bl	2009a <send_pairing_rsp>
	if (ret) {
   1610c:	4605      	mov	r5, r0
   1610e:	2800      	cmp	r0, #0
   16110:	f47f af5c 	bne.w	15fcc <smp_pairing_req+0x34>
	return legacy_request_tk(smp);
   16114:	4620      	mov	r0, r4
}
   16116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
   1611a:	f7ff bc99 	b.w	15a50 <legacy_request_tk>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1611e:	b98d      	cbnz	r5, 16144 <smp_pairing_req+0x1ac>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16120:	210f      	movs	r1, #15
   16122:	4630      	mov	r0, r6
   16124:	f009 fe36 	bl	1fd94 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16128:	b960      	cbnz	r0, 16144 <smp_pairing_req+0x1ac>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1612a:	4f0e      	ldr	r7, [pc, #56]	; (16164 <smp_pairing_req+0x1cc>)
   1612c:	683b      	ldr	r3, [r7, #0]
   1612e:	b14b      	cbz	r3, 16144 <smp_pairing_req+0x1ac>
	    bt_auth && bt_auth->pairing_confirm) {
   16130:	695b      	ldr	r3, [r3, #20]
   16132:	b13b      	cbz	r3, 16144 <smp_pairing_req+0x1ac>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16134:	4630      	mov	r0, r6
   16136:	210a      	movs	r1, #10
   16138:	f009 ff6d 	bl	20016 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1613c:	683b      	ldr	r3, [r7, #0]
   1613e:	4640      	mov	r0, r8
   16140:	695b      	ldr	r3, [r3, #20]
   16142:	e7d9      	b.n	160f8 <smp_pairing_req+0x160>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   16144:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16148:	210c      	movs	r1, #12
   1614a:	f009 ff64 	bl	20016 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1614e:	4620      	mov	r0, r4
}
   16150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   16154:	f009 bfa1 	b.w	2009a <send_pairing_rsp>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   16158:	2506      	movs	r5, #6
   1615a:	e737      	b.n	15fcc <smp_pairing_req+0x34>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1615c:	2503      	movs	r5, #3
   1615e:	e735      	b.n	15fcc <smp_pairing_req+0x34>
   16160:	2000b7b8 	.word	0x2000b7b8
   16164:	20009c20 	.word	0x20009c20

00016168 <sc_send_public_key>:
{
   16168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1616a:	210c      	movs	r1, #12
{
   1616c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1616e:	f009 ff74 	bl	2005a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   16172:	4604      	mov	r4, r0
   16174:	b1b0      	cbz	r0, 161a4 <sc_send_public_key+0x3c>
   16176:	2140      	movs	r1, #64	; 0x40
   16178:	3008      	adds	r0, #8
   1617a:	f001 fc49 	bl	17a10 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1617e:	4f0a      	ldr	r7, [pc, #40]	; (161a8 <sc_send_public_key+0x40>)
   16180:	2220      	movs	r2, #32
   16182:	6839      	ldr	r1, [r7, #0]
   16184:	4606      	mov	r6, r0
   16186:	f008 f97b 	bl	1e480 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1618a:	2220      	movs	r2, #32
   1618c:	6839      	ldr	r1, [r7, #0]
   1618e:	18b0      	adds	r0, r6, r2
   16190:	4411      	add	r1, r2
   16192:	f008 f975 	bl	1e480 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   16196:	4628      	mov	r0, r5
   16198:	2200      	movs	r2, #0
   1619a:	4621      	mov	r1, r4
   1619c:	f7ff fbaa 	bl	158f4 <smp_send.constprop.0>
	return 0;
   161a0:	2000      	movs	r0, #0
}
   161a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   161a4:	2008      	movs	r0, #8
   161a6:	e7fc      	b.n	161a2 <sc_send_public_key+0x3a>
   161a8:	20009d44 	.word	0x20009d44

000161ac <smp_public_key_slave>:
{
   161ac:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   161ae:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   161b2:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   161b4:	210e      	movs	r1, #14
   161b6:	4628      	mov	r0, r5
   161b8:	f009 fdec 	bl	1fd94 <atomic_test_bit>
   161bc:	b968      	cbnz	r0, 161da <smp_public_key_slave+0x2e>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   161be:	4b25      	ldr	r3, [pc, #148]	; (16254 <smp_public_key_slave+0xa8>)
   161c0:	2240      	movs	r2, #64	; 0x40
   161c2:	6819      	ldr	r1, [r3, #0]
   161c4:	f204 1017 	addw	r0, r4, #279	; 0x117
   161c8:	f008 f949 	bl	1e45e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   161cc:	b928      	cbnz	r0, 161da <smp_public_key_slave+0x2e>
		BT_WARN("Remote is using identical public key");
   161ce:	2157      	movs	r1, #87	; 0x57
   161d0:	4821      	ldr	r0, [pc, #132]	; (16258 <smp_public_key_slave+0xac>)
   161d2:	f006 fc9d 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   161d6:	2008      	movs	r0, #8
   161d8:	e015      	b.n	16206 <smp_public_key_slave+0x5a>
	err = sc_send_public_key(smp);
   161da:	4620      	mov	r0, r4
   161dc:	f7ff ffc4 	bl	16168 <sc_send_public_key>
	if (err) {
   161e0:	b988      	cbnz	r0, 16206 <smp_public_key_slave+0x5a>
	switch (smp->method) {
   161e2:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   161e6:	2a05      	cmp	r2, #5
   161e8:	d82e      	bhi.n	16248 <smp_public_key_slave+0x9c>
   161ea:	e8df f002 	tbb	[pc, r2]
   161ee:	1803      	.short	0x1803
   161f0:	2b2d030d 	.word	0x2b2d030d
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   161f4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   161f8:	2104      	movs	r1, #4
   161fa:	f009 ff0c 	bl	20016 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   161fe:	4620      	mov	r0, r4
   16200:	f7ff fe84 	bl	15f0c <smp_send_pairing_confirm>
		if (err) {
   16204:	b1c8      	cbz	r0, 1623a <smp_public_key_slave+0x8e>
}
   16206:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
   16208:	4620      	mov	r0, r4
   1620a:	f7ff fbbb 	bl	15984 <display_passkey>
		if (err) {
   1620e:	2800      	cmp	r0, #0
   16210:	d1f9      	bne.n	16206 <smp_public_key_slave+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16212:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16214:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16218:	f009 fefd 	bl	20016 <atomic_set_bit>
		break;
   1621c:	e00d      	b.n	1623a <smp_public_key_slave+0x8e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1621e:	2103      	movs	r1, #3
   16220:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16224:	f009 fef7 	bl	20016 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16228:	4628      	mov	r0, r5
   1622a:	210a      	movs	r1, #10
   1622c:	f009 fef3 	bl	20016 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   16230:	4b0a      	ldr	r3, [pc, #40]	; (1625c <smp_public_key_slave+0xb0>)
   16232:	6820      	ldr	r0, [r4, #0]
   16234:	681b      	ldr	r3, [r3, #0]
   16236:	685b      	ldr	r3, [r3, #4]
   16238:	4798      	blx	r3
	return generate_dhkey(smp);
   1623a:	4620      	mov	r0, r4
}
   1623c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   16240:	f009 befa 	b.w	20038 <generate_dhkey>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16244:	2104      	movs	r1, #4
   16246:	e7e5      	b.n	16214 <smp_public_key_slave+0x68>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16248:	2145      	movs	r1, #69	; 0x45
   1624a:	4805      	ldr	r0, [pc, #20]	; (16260 <smp_public_key_slave+0xb4>)
   1624c:	f006 fc60 	bl	1cb10 <printk>
   16250:	e7c1      	b.n	161d6 <smp_public_key_slave+0x2a>
   16252:	bf00      	nop
   16254:	20009d44 	.word	0x20009d44
   16258:	00025904 	.word	0x00025904
   1625c:	20009c20 	.word	0x20009c20
   16260:	00025744 	.word	0x00025744

00016264 <smp_public_key>:
{
   16264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   16266:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   16268:	f200 1717 	addw	r7, r0, #279	; 0x117
{
   1626c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   1626e:	2220      	movs	r2, #32
   16270:	4629      	mov	r1, r5
   16272:	4638      	mov	r0, r7
   16274:	f008 f904 	bl	1e480 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   16278:	2220      	movs	r2, #32
   1627a:	f204 1037 	addw	r0, r4, #311	; 0x137
   1627e:	18a9      	adds	r1, r5, r2
   16280:	f008 f8fe 	bl	1e480 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   16284:	2240      	movs	r2, #64	; 0x40
   16286:	4638      	mov	r0, r7
   16288:	4956      	ldr	r1, [pc, #344]	; (163e4 <smp_public_key+0x180>)
   1628a:	f008 f8e8 	bl	1e45e <memcmp>
   1628e:	b1c0      	cbz	r0, 162c2 <smp_public_key+0x5e>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16290:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16292:	78db      	ldrb	r3, [r3, #3]
   16294:	2b00      	cmp	r3, #0
   16296:	f040 8092 	bne.w	163be <smp_public_key+0x15a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1629a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   1629e:	210e      	movs	r1, #14
   162a0:	4630      	mov	r0, r6
   162a2:	f009 fd77 	bl	1fd94 <atomic_test_bit>
   162a6:	bb70      	cbnz	r0, 16306 <smp_public_key+0xa2>
		    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   162a8:	4b4f      	ldr	r3, [pc, #316]	; (163e8 <smp_public_key+0x184>)
   162aa:	2240      	movs	r2, #64	; 0x40
   162ac:	4638      	mov	r0, r7
   162ae:	6819      	ldr	r1, [r3, #0]
   162b0:	f008 f8d5 	bl	1e45e <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   162b4:	bb38      	cbnz	r0, 16306 <smp_public_key+0xa2>
			BT_WARN("Remote is using identical public key");
   162b6:	2157      	movs	r1, #87	; 0x57
   162b8:	484c      	ldr	r0, [pc, #304]	; (163ec <smp_public_key+0x188>)
   162ba:	f006 fc29 	bl	1cb10 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   162be:	2008      	movs	r0, #8
   162c0:	e086      	b.n	163d0 <smp_public_key+0x16c>
		BT_INFO("Remote is using Debug Public key");
   162c2:	2149      	movs	r1, #73	; 0x49
   162c4:	484a      	ldr	r0, [pc, #296]	; (163f0 <smp_public_key+0x18c>)
   162c6:	f006 fc23 	bl	1cb10 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   162ca:	210e      	movs	r1, #14
   162cc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   162d0:	f009 fea1 	bl	20016 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   162d4:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
   162d6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   162da:	b933      	cbnz	r3, 162ea <smp_public_key+0x86>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   162dc:	7a28      	ldrb	r0, [r5, #8]
   162de:	f105 0188 	add.w	r1, r5, #136	; 0x88
   162e2:	f000 ff9b 	bl	1721c <bt_keys_get_addr>
   162e6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   162ea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   162ee:	2b00      	cmp	r3, #0
   162f0:	d0ce      	beq.n	16290 <smp_public_key+0x2c>
   162f2:	89da      	ldrh	r2, [r3, #14]
   162f4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   162f8:	2a00      	cmp	r2, #0
   162fa:	d0c9      	beq.n	16290 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   162fc:	7b5b      	ldrb	r3, [r3, #13]
   162fe:	079b      	lsls	r3, r3, #30
   16300:	d5c6      	bpl.n	16290 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16302:	2003      	movs	r0, #3
   16304:	e064      	b.n	163d0 <smp_public_key+0x16c>
		switch (smp->method) {
   16306:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1630a:	2a05      	cmp	r2, #5
   1630c:	d852      	bhi.n	163b4 <smp_public_key+0x150>
   1630e:	e8df f002 	tbb	[pc, r2]
   16312:	2103      	.short	0x2103
   16314:	2f510309 	.word	0x2f510309
			atomic_set_bit(&smp->allowed_cmds,
   16318:	2103      	movs	r1, #3
   1631a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
			atomic_set_bit(&smp->allowed_cmds,
   1631e:	f009 fe7a 	bl	20016 <atomic_set_bit>
			break;
   16322:	e011      	b.n	16348 <smp_public_key+0xe4>
			err = display_passkey(smp);
   16324:	4620      	mov	r0, r4
   16326:	f7ff fb2d 	bl	15984 <display_passkey>
			if (err) {
   1632a:	2800      	cmp	r0, #0
   1632c:	d150      	bne.n	163d0 <smp_public_key+0x16c>
			atomic_set_bit(&smp->allowed_cmds,
   1632e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16332:	2103      	movs	r1, #3
   16334:	f009 fe6f 	bl	20016 <atomic_set_bit>
			atomic_set_bit(&smp->allowed_cmds,
   16338:	210e      	movs	r1, #14
   1633a:	f009 fe6c 	bl	20016 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1633e:	4620      	mov	r0, r4
   16340:	f7ff fde4 	bl	15f0c <smp_send_pairing_confirm>
			if (err) {
   16344:	2800      	cmp	r0, #0
   16346:	d143      	bne.n	163d0 <smp_public_key+0x16c>
		return generate_dhkey(smp);
   16348:	4620      	mov	r0, r4
}
   1634a:	b003      	add	sp, #12
   1634c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   16350:	f009 be72 	b.w	20038 <generate_dhkey>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   16354:	4625      	mov	r5, r4
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16356:	210a      	movs	r1, #10
   16358:	4630      	mov	r0, r6
   1635a:	f009 fe5c 	bl	20016 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   1635e:	4b25      	ldr	r3, [pc, #148]	; (163f4 <smp_public_key+0x190>)
   16360:	f855 0bc0 	ldr.w	r0, [r5], #192
   16364:	681b      	ldr	r3, [r3, #0]
   16366:	685b      	ldr	r3, [r3, #4]
   16368:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
   1636a:	210e      	movs	r1, #14
   1636c:	4628      	mov	r0, r5
   1636e:	e7d6      	b.n	1631e <smp_public_key+0xba>
			if (bt_rand(smp->prnd, 16)) {
   16370:	2110      	movs	r1, #16
   16372:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16376:	f7fa fed3 	bl	11120 <bt_rand>
   1637a:	4605      	mov	r5, r0
   1637c:	2800      	cmp	r0, #0
   1637e:	d19e      	bne.n	162be <smp_public_key+0x5a>
			if (bt_auth && bt_auth->oob_data_request) {
   16380:	4f1c      	ldr	r7, [pc, #112]	; (163f4 <smp_public_key+0x190>)
   16382:	683b      	ldr	r3, [r7, #0]
   16384:	b363      	cbz	r3, 163e0 <smp_public_key+0x17c>
   16386:	68db      	ldr	r3, [r3, #12]
   16388:	b353      	cbz	r3, 163e0 <smp_public_key+0x17c>
				struct bt_conn_oob_info info = {
   1638a:	4b1b      	ldr	r3, [pc, #108]	; (163f8 <smp_public_key+0x194>)
				le_sc_oob_config_set(smp, &info);
   1638c:	4620      	mov	r0, r4
				struct bt_conn_oob_info info = {
   1638e:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
				le_sc_oob_config_set(smp, &info);
   16392:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   16394:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   16398:	f009 fcdb 	bl	1fd52 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   1639c:	4630      	mov	r0, r6
   1639e:	210c      	movs	r1, #12
				smp->oobd_remote = NULL;
   163a0:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
				atomic_set_bit(smp->flags,
   163a4:	f009 fe37 	bl	20016 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   163a8:	683b      	ldr	r3, [r7, #0]
   163aa:	6820      	ldr	r0, [r4, #0]
   163ac:	68db      	ldr	r3, [r3, #12]
   163ae:	a901      	add	r1, sp, #4
   163b0:	4798      	blx	r3
			break;
   163b2:	e7c9      	b.n	16348 <smp_public_key+0xe4>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   163b4:	2145      	movs	r1, #69	; 0x45
   163b6:	4811      	ldr	r0, [pc, #68]	; (163fc <smp_public_key+0x198>)
   163b8:	f006 fbaa 	bl	1cb10 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   163bc:	e77f      	b.n	162be <smp_public_key+0x5a>
	if (!sc_public_key) {
   163be:	4b0a      	ldr	r3, [pc, #40]	; (163e8 <smp_public_key+0x184>)
   163c0:	681d      	ldr	r5, [r3, #0]
   163c2:	b93d      	cbnz	r5, 163d4 <smp_public_key+0x170>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   163c4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   163c8:	2106      	movs	r1, #6
   163ca:	f009 fe24 	bl	20016 <atomic_set_bit>
		return 0;
   163ce:	4628      	mov	r0, r5
}
   163d0:	b003      	add	sp, #12
   163d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = smp_public_key_slave(smp);
   163d4:	4620      	mov	r0, r4
}
   163d6:	b003      	add	sp, #12
   163d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_slave(smp);
   163dc:	f7ff bee6 	b.w	161ac <smp_public_key_slave>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   163e0:	2002      	movs	r0, #2
   163e2:	e7f5      	b.n	163d0 <smp_public_key+0x16c>
   163e4:	00025b81 	.word	0x00025b81
   163e8:	20009d44 	.word	0x20009d44
   163ec:	00025904 	.word	0x00025904
   163f0:	0002592e 	.word	0x0002592e
   163f4:	20009c20 	.word	0x20009c20
   163f8:	00021d5d 	.word	0x00021d5d
   163fc:	00025744 	.word	0x00025744

00016400 <compute_and_send_master_dhcheck>:
{
   16400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16404:	4604      	mov	r4, r0
   16406:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   16408:	2210      	movs	r2, #16
   1640a:	2100      	movs	r1, #0
   1640c:	a808      	add	r0, sp, #32
   1640e:	f008 f862 	bl	1e4d6 <memset>
	switch (smp->method) {
   16412:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16416:	2a05      	cmp	r2, #5
   16418:	d82b      	bhi.n	16472 <compute_and_send_master_dhcheck+0x72>
   1641a:	e8df f002 	tbb	[pc, r2]
   1641e:	0309      	.short	0x0309
   16420:	242a0903 	.word	0x242a0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16424:	2204      	movs	r2, #4
   16426:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1642a:	a808      	add	r0, sp, #32
   1642c:	f008 f828 	bl	1e480 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   16430:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
   16432:	f855 3bf7 	ldr.w	r3, [r5], #247
		   smp->tk)) {
   16436:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1643a:	f204 1787 	addw	r7, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1643e:	e9cd 7201 	strd	r7, r2, [sp, #4]
   16442:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   16446:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1644a:	9200      	str	r2, [sp, #0]
   1644c:	4641      	mov	r1, r8
   1644e:	462a      	mov	r2, r5
   16450:	338f      	adds	r3, #143	; 0x8f
   16452:	f204 1057 	addw	r0, r4, #343	; 0x157
   16456:	f7ff f9a3 	bl	157a0 <smp_f5>
   1645a:	b190      	cbz	r0, 16482 <compute_and_send_master_dhcheck+0x82>
		BT_ERR("Calculate LTK failed");
   1645c:	2145      	movs	r1, #69	; 0x45
   1645e:	4818      	ldr	r0, [pc, #96]	; (164c0 <compute_and_send_master_dhcheck+0xc0>)
   16460:	f006 fb56 	bl	1cb10 <printk>
   16464:	e009      	b.n	1647a <compute_and_send_master_dhcheck+0x7a>
		if (smp->oobd_remote) {
   16466:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   1646a:	2900      	cmp	r1, #0
   1646c:	d0e0      	beq.n	16430 <compute_and_send_master_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1646e:	2210      	movs	r2, #16
   16470:	e7db      	b.n	1642a <compute_and_send_master_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16472:	2145      	movs	r1, #69	; 0x45
   16474:	4813      	ldr	r0, [pc, #76]	; (164c4 <compute_and_send_master_dhcheck+0xc4>)
   16476:	f006 fb4b 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1647a:	2008      	movs	r0, #8
}
   1647c:	b00c      	add	sp, #48	; 0x30
   1647e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   &smp->chan.chan.conn->le.init_addr,
   16482:	4622      	mov	r2, r4
   16484:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   16488:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   1648a:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1648e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   16490:	e9cd 2300 	strd	r2, r3, [sp]
   16494:	9102      	str	r1, [sp, #8]
   16496:	462a      	mov	r2, r5
   16498:	4641      	mov	r1, r8
   1649a:	4638      	mov	r0, r7
   1649c:	9603      	str	r6, [sp, #12]
   1649e:	ab08      	add	r3, sp, #32
   164a0:	f009 fd48 	bl	1ff34 <smp_f6>
   164a4:	b110      	cbz	r0, 164ac <compute_and_send_master_dhcheck+0xac>
		BT_ERR("Calculate local DHKey check failed");
   164a6:	2145      	movs	r1, #69	; 0x45
   164a8:	4807      	ldr	r0, [pc, #28]	; (164c8 <compute_and_send_master_dhcheck+0xc8>)
   164aa:	e7d9      	b.n	16460 <compute_and_send_master_dhcheck+0x60>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   164ac:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   164b0:	210d      	movs	r1, #13
   164b2:	f009 fdb0 	bl	20016 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   164b6:	4631      	mov	r1, r6
   164b8:	4620      	mov	r0, r4
   164ba:	f009 fe20 	bl	200fe <sc_smp_send_dhkey_check>
   164be:	e7dd      	b.n	1647c <compute_and_send_master_dhcheck+0x7c>
   164c0:	00025954 	.word	0x00025954
   164c4:	00025744 	.word	0x00025744
   164c8:	0002596e 	.word	0x0002596e

000164cc <compute_and_check_and_send_slave_dhcheck>:
{
   164cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   164d0:	4604      	mov	r4, r0
   164d2:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   164d4:	2210      	movs	r2, #16
   164d6:	2100      	movs	r1, #0
   164d8:	a80c      	add	r0, sp, #48	; 0x30
   164da:	f007 fffc 	bl	1e4d6 <memset>
	switch (smp->method) {
   164de:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   164e2:	2a05      	cmp	r2, #5
   164e4:	d82b      	bhi.n	1653e <compute_and_check_and_send_slave_dhcheck+0x72>
   164e6:	e8df f002 	tbb	[pc, r2]
   164ea:	0309      	.short	0x0309
   164ec:	242a0903 	.word	0x242a0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   164f0:	2204      	movs	r2, #4
   164f2:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   164f6:	a80c      	add	r0, sp, #48	; 0x30
   164f8:	f007 ffc2 	bl	1e480 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   164fc:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
   164fe:	f855 3be7 	ldr.w	r3, [r5], #231
		   smp->tk)) {
   16502:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   16506:	f204 1687 	addw	r6, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1650a:	e9cd 6201 	strd	r6, r2, [sp, #4]
   1650e:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   16512:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   16516:	9200      	str	r2, [sp, #0]
   16518:	4639      	mov	r1, r7
   1651a:	462a      	mov	r2, r5
   1651c:	338f      	adds	r3, #143	; 0x8f
   1651e:	f204 1057 	addw	r0, r4, #343	; 0x157
   16522:	f7ff f93d 	bl	157a0 <smp_f5>
   16526:	b198      	cbz	r0, 16550 <compute_and_check_and_send_slave_dhcheck+0x84>
		BT_ERR("Calculate LTK failed");
   16528:	2145      	movs	r1, #69	; 0x45
   1652a:	4832      	ldr	r0, [pc, #200]	; (165f4 <compute_and_check_and_send_slave_dhcheck+0x128>)
		BT_ERR("Calculate remote DHKey check failed");
   1652c:	f006 faf0 	bl	1cb10 <printk>
   16530:	e009      	b.n	16546 <compute_and_check_and_send_slave_dhcheck+0x7a>
		if (smp->oobd_remote) {
   16532:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   16536:	2900      	cmp	r1, #0
   16538:	d0e0      	beq.n	164fc <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1653a:	2210      	movs	r2, #16
   1653c:	e7db      	b.n	164f6 <compute_and_check_and_send_slave_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1653e:	2145      	movs	r1, #69	; 0x45
   16540:	482d      	ldr	r0, [pc, #180]	; (165f8 <compute_and_check_and_send_slave_dhcheck+0x12c>)
   16542:	f006 fae5 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16546:	2508      	movs	r5, #8
}
   16548:	4628      	mov	r0, r5
   1654a:	b011      	add	sp, #68	; 0x44
   1654c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		   &smp->chan.chan.conn->le.resp_addr,
   16550:	4622      	mov	r2, r4
   16552:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   16556:	f10d 0820 	add.w	r8, sp, #32
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1655a:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1655e:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   16560:	e9cd 2300 	strd	r2, r3, [sp]
   16564:	9102      	str	r1, [sp, #8]
   16566:	463a      	mov	r2, r7
   16568:	4629      	mov	r1, r5
   1656a:	4630      	mov	r0, r6
   1656c:	f8cd 800c 	str.w	r8, [sp, #12]
   16570:	ab0c      	add	r3, sp, #48	; 0x30
   16572:	f009 fcdf 	bl	1ff34 <smp_f6>
   16576:	b110      	cbz	r0, 1657e <compute_and_check_and_send_slave_dhcheck+0xb2>
		BT_ERR("Calculate local DHKey check failed");
   16578:	2145      	movs	r1, #69	; 0x45
   1657a:	4820      	ldr	r0, [pc, #128]	; (165fc <compute_and_check_and_send_slave_dhcheck+0x130>)
   1657c:	e7d6      	b.n	1652c <compute_and_check_and_send_slave_dhcheck+0x60>
	if (smp->method == LE_SC_OOB) {
   1657e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   16582:	2b05      	cmp	r3, #5
   16584:	d106      	bne.n	16594 <compute_and_check_and_send_slave_dhcheck+0xc8>
		if (smp->oobd_local) {
   16586:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1658a:	2210      	movs	r2, #16
   1658c:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   1658e:	b1c1      	cbz	r1, 165c2 <compute_and_check_and_send_slave_dhcheck+0xf6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   16590:	f007 ff76 	bl	1e480 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   16594:	4622      	mov	r2, r4
   16596:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1659a:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1659e:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   165a2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   165a4:	e9cd 2300 	strd	r2, r3, [sp]
   165a8:	9102      	str	r1, [sp, #8]
   165aa:	462a      	mov	r2, r5
   165ac:	4639      	mov	r1, r7
   165ae:	4630      	mov	r0, r6
   165b0:	f8cd 900c 	str.w	r9, [sp, #12]
   165b4:	ab0c      	add	r3, sp, #48	; 0x30
   165b6:	f009 fcbd 	bl	1ff34 <smp_f6>
   165ba:	b128      	cbz	r0, 165c8 <compute_and_check_and_send_slave_dhcheck+0xfc>
		BT_ERR("Calculate remote DHKey check failed");
   165bc:	2145      	movs	r1, #69	; 0x45
   165be:	4810      	ldr	r0, [pc, #64]	; (16600 <compute_and_check_and_send_slave_dhcheck+0x134>)
   165c0:	e7b4      	b.n	1652c <compute_and_check_and_send_slave_dhcheck+0x60>
			memset(r, 0, sizeof(r));
   165c2:	f007 ff88 	bl	1e4d6 <memset>
   165c6:	e7e5      	b.n	16594 <compute_and_check_and_send_slave_dhcheck+0xc8>
	if (memcmp(smp->e, re, 16)) {
   165c8:	2210      	movs	r2, #16
   165ca:	4649      	mov	r1, r9
   165cc:	f204 1077 	addw	r0, r4, #375	; 0x177
   165d0:	f007 ff45 	bl	1e45e <memcmp>
   165d4:	b960      	cbnz	r0, 165f0 <compute_and_check_and_send_slave_dhcheck+0x124>
	err = sc_smp_send_dhkey_check(smp, e);
   165d6:	4641      	mov	r1, r8
   165d8:	4620      	mov	r0, r4
   165da:	f009 fd90 	bl	200fe <sc_smp_send_dhkey_check>
	if (err) {
   165de:	4605      	mov	r5, r0
   165e0:	2800      	cmp	r0, #0
   165e2:	d1b1      	bne.n	16548 <compute_and_check_and_send_slave_dhcheck+0x7c>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   165e4:	2101      	movs	r1, #1
   165e6:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   165ea:	f009 fd14 	bl	20016 <atomic_set_bit>
	return 0;
   165ee:	e7ab      	b.n	16548 <compute_and_check_and_send_slave_dhcheck+0x7c>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   165f0:	250b      	movs	r5, #11
   165f2:	e7a9      	b.n	16548 <compute_and_check_and_send_slave_dhcheck+0x7c>
   165f4:	00025954 	.word	0x00025954
   165f8:	00025744 	.word	0x00025744
   165fc:	0002596e 	.word	0x0002596e
   16600:	00025996 	.word	0x00025996

00016604 <smp_dhkey_check>:
{
   16604:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16606:	6803      	ldr	r3, [r0, #0]
{
   16608:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1660a:	78dd      	ldrb	r5, [r3, #3]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1660c:	688f      	ldr	r7, [r1, #8]
{
   1660e:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16610:	2d00      	cmp	r5, #0
   16612:	d165      	bne.n	166e0 <smp_dhkey_check+0xdc>
		(void)memset(r, 0, sizeof(r));
   16614:	2210      	movs	r2, #16
   16616:	4629      	mov	r1, r5
   16618:	a80c      	add	r0, sp, #48	; 0x30
   1661a:	f007 ff5c 	bl	1e4d6 <memset>
		switch (smp->method) {
   1661e:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16622:	2a05      	cmp	r2, #5
   16624:	d84c      	bhi.n	166c0 <smp_dhkey_check+0xbc>
   16626:	e8df f002 	tbb	[pc, r2]
   1662a:	0309      	.short	0x0309
   1662c:	454b0903 	.word	0x454b0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16630:	2204      	movs	r2, #4
   16632:	f504 71cc 	add.w	r1, r4, #408	; 0x198
				memcpy(r, smp->oobd_local->r, sizeof(r));
   16636:	a80c      	add	r0, sp, #48	; 0x30
   16638:	f007 ff22 	bl	1e480 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   1663c:	4622      	mov	r2, r4
   1663e:	f852 3be7 	ldr.w	r3, [r2], #231
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   16642:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
   16644:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   16648:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1664a:	9301      	str	r3, [sp, #4]
   1664c:	f104 03d1 	add.w	r3, r4, #209	; 0xd1
   16650:	9102      	str	r1, [sp, #8]
   16652:	9300      	str	r3, [sp, #0]
   16654:	9603      	str	r6, [sp, #12]
   16656:	ab0c      	add	r3, sp, #48	; 0x30
   16658:	f104 01f7 	add.w	r1, r4, #247	; 0xf7
   1665c:	f204 1087 	addw	r0, r4, #391	; 0x187
   16660:	f009 fc68 	bl	1ff34 <smp_f6>
   16664:	bb80      	cbnz	r0, 166c8 <smp_dhkey_check+0xc4>
		if (memcmp(e, req->e, 16)) {
   16666:	4630      	mov	r0, r6
   16668:	2210      	movs	r2, #16
   1666a:	4639      	mov	r1, r7
   1666c:	f007 fef7 	bl	1e45e <memcmp>
   16670:	4606      	mov	r6, r0
   16672:	bb98      	cbnz	r0, 166dc <smp_dhkey_check+0xd8>
	return MIN(req->max_key_size, rsp->max_key_size);
   16674:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   16678:	f894 70d4 	ldrb.w	r7, [r4, #212]	; 0xd4
		(void)memset(ediv, 0, sizeof(ediv));
   1667c:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1667e:	429f      	cmp	r7, r3
   16680:	bf28      	it	cs
   16682:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   16684:	2202      	movs	r2, #2
   16686:	a805      	add	r0, sp, #20
   16688:	f007 ff25 	bl	1e4d6 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1668c:	2208      	movs	r2, #8
   1668e:	4631      	mov	r1, r6
   16690:	a806      	add	r0, sp, #24
   16692:	f007 ff20 	bl	1e4d6 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   16696:	6820      	ldr	r0, [r4, #0]
   16698:	9700      	str	r7, [sp, #0]
   1669a:	f204 1307 	addw	r3, r4, #263	; 0x107
   1669e:	aa05      	add	r2, sp, #20
   166a0:	a906      	add	r1, sp, #24
   166a2:	f008 fa4c 	bl	1eb3e <bt_conn_le_start_encryption>
   166a6:	2800      	cmp	r0, #0
   166a8:	da12      	bge.n	166d0 <smp_dhkey_check+0xcc>
			BT_ERR("Failed to start encryption");
   166aa:	2145      	movs	r1, #69	; 0x45
   166ac:	4820      	ldr	r0, [pc, #128]	; (16730 <smp_dhkey_check+0x12c>)
   166ae:	f006 fa2f 	bl	1cb10 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   166b2:	e009      	b.n	166c8 <smp_dhkey_check+0xc4>
			if (smp->oobd_local) {
   166b4:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   166b8:	2900      	cmp	r1, #0
   166ba:	d0bf      	beq.n	1663c <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   166bc:	2210      	movs	r2, #16
   166be:	e7ba      	b.n	16636 <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   166c0:	2145      	movs	r1, #69	; 0x45
   166c2:	481c      	ldr	r0, [pc, #112]	; (16734 <smp_dhkey_check+0x130>)
   166c4:	f006 fa24 	bl	1cb10 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   166c8:	2508      	movs	r5, #8
}
   166ca:	4628      	mov	r0, r5
   166cc:	b011      	add	sp, #68	; 0x44
   166ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   166d0:	2101      	movs	r1, #1
   166d2:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   166d6:	f009 fc9e 	bl	20016 <atomic_set_bit>
			return 0;
   166da:	e7f6      	b.n	166ca <smp_dhkey_check+0xc6>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   166dc:	250b      	movs	r5, #11
   166de:	e7f4      	b.n	166ca <smp_dhkey_check+0xc6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   166e0:	2d01      	cmp	r5, #1
   166e2:	d115      	bne.n	16710 <smp_dhkey_check+0x10c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   166e4:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   166e8:	2110      	movs	r1, #16
   166ea:	4630      	mov	r0, r6
   166ec:	f009 fba5 	bl	1fe3a <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   166f0:	4639      	mov	r1, r7
   166f2:	2210      	movs	r2, #16
   166f4:	f204 1077 	addw	r0, r4, #375	; 0x177
   166f8:	f007 fec2 	bl	1e480 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   166fc:	2107      	movs	r1, #7
   166fe:	4630      	mov	r0, r6
   16700:	f009 fb48 	bl	1fd94 <atomic_test_bit>
   16704:	4605      	mov	r5, r0
   16706:	b128      	cbz	r0, 16714 <smp_dhkey_check+0x110>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16708:	2109      	movs	r1, #9
   1670a:	4630      	mov	r0, r6
   1670c:	f009 fc83 	bl	20016 <atomic_set_bit>
	return 0;
   16710:	2500      	movs	r5, #0
   16712:	e7da      	b.n	166ca <smp_dhkey_check+0xc6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16714:	210a      	movs	r1, #10
   16716:	4630      	mov	r0, r6
   16718:	f009 fb3c 	bl	1fd94 <atomic_test_bit>
   1671c:	b110      	cbz	r0, 16724 <smp_dhkey_check+0x120>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1671e:	2109      	movs	r1, #9
   16720:	4630      	mov	r0, r6
   16722:	e7d8      	b.n	166d6 <smp_dhkey_check+0xd2>
		return compute_and_check_and_send_slave_dhcheck(smp);
   16724:	4620      	mov	r0, r4
}
   16726:	b011      	add	sp, #68	; 0x44
   16728:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1672c:	f7ff bece 	b.w	164cc <compute_and_check_and_send_slave_dhcheck>
   16730:	000258e4 	.word	0x000258e4
   16734:	00025744 	.word	0x00025744

00016738 <bt_smp_connected>:
{
   16738:	b510      	push	{r4, lr}
   1673a:	4604      	mov	r4, r0
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1673c:	2230      	movs	r2, #48	; 0x30
   1673e:	2100      	movs	r1, #0
   16740:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   16744:	f007 fec7 	bl	1e4d6 <memset>
   16748:	4b03      	ldr	r3, [pc, #12]	; (16758 <bt_smp_connected+0x20>)
	smp_reset(smp);
   1674a:	4620      	mov	r0, r4
   1674c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
   16750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   16754:	f009 bd00 	b.w	20158 <smp_reset>
   16758:	00016995 	.word	0x00016995

0001675c <smp_pairing_complete>:
{
   1675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16760:	4604      	mov	r4, r0
	if (!status) {
   16762:	460d      	mov	r5, r1
   16764:	4f24      	ldr	r7, [pc, #144]	; (167f8 <smp_pairing_complete+0x9c>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   16766:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
	if (!status) {
   1676a:	b9b1      	cbnz	r1, 1679a <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1676c:	210d      	movs	r1, #13
   1676e:	4640      	mov	r0, r8
   16770:	f009 fb10 	bl	1fd94 <atomic_test_bit>
		if (bond_flag) {
   16774:	4605      	mov	r5, r0
   16776:	b120      	cbz	r0, 16782 <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
   16778:	6823      	ldr	r3, [r4, #0]
   1677a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   1677e:	f000 fe87 	bl	17490 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   16782:	683b      	ldr	r3, [r7, #0]
   16784:	b123      	cbz	r3, 16790 <smp_pairing_complete+0x34>
   16786:	699b      	ldr	r3, [r3, #24]
   16788:	b113      	cbz	r3, 16790 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
   1678a:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   1678c:	6820      	ldr	r0, [r4, #0]
   1678e:	4798      	blx	r3
	smp_reset(smp);
   16790:	4620      	mov	r0, r4
}
   16792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
   16796:	f009 bcdf 	b.w	20158 <smp_reset>
	switch (smp_err) {
   1679a:	1e4b      	subs	r3, r1, #1
   1679c:	b2db      	uxtb	r3, r3
   1679e:	2b0d      	cmp	r3, #13
   167a0:	bf96      	itet	ls
   167a2:	4a16      	ldrls	r2, [pc, #88]	; (167fc <smp_pairing_complete+0xa0>)
	if (!status) {
   167a4:	2608      	movhi	r6, #8
   167a6:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
   167a8:	6803      	ldr	r3, [r0, #0]
   167aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   167ae:	b153      	cbz	r3, 167c6 <smp_pairing_complete+0x6a>
   167b0:	7b1b      	ldrb	r3, [r3, #12]
   167b2:	b9d3      	cbnz	r3, 167ea <smp_pairing_complete+0x8e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
   167b4:	6823      	ldr	r3, [r4, #0]
   167b6:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   167ba:	f000 fdcd 	bl	17358 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
   167be:	2200      	movs	r2, #0
   167c0:	6823      	ldr	r3, [r4, #0]
   167c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   167c6:	2102      	movs	r1, #2
   167c8:	4640      	mov	r0, r8
   167ca:	f009 fae3 	bl	1fd94 <atomic_test_bit>
   167ce:	b920      	cbnz	r0, 167da <smp_pairing_complete+0x7e>
			bt_conn_security_changed(smp->chan.chan.conn, status,
   167d0:	4632      	mov	r2, r6
   167d2:	4629      	mov	r1, r5
   167d4:	6820      	ldr	r0, [r4, #0]
   167d6:	f7fa fde9 	bl	113ac <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   167da:	683b      	ldr	r3, [r7, #0]
   167dc:	2b00      	cmp	r3, #0
   167de:	d0d7      	beq.n	16790 <smp_pairing_complete+0x34>
   167e0:	69db      	ldr	r3, [r3, #28]
   167e2:	2b00      	cmp	r3, #0
   167e4:	d0d4      	beq.n	16790 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   167e6:	4631      	mov	r1, r6
   167e8:	e7d0      	b.n	1678c <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   167ea:	2102      	movs	r1, #2
   167ec:	4640      	mov	r0, r8
   167ee:	f009 fad1 	bl	1fd94 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
   167f2:	2800      	cmp	r0, #0
   167f4:	d1de      	bne.n	167b4 <smp_pairing_complete+0x58>
   167f6:	e7e6      	b.n	167c6 <smp_pairing_complete+0x6a>
   167f8:	20009c20 	.word	0x20009c20
   167fc:	00025b31 	.word	0x00025b31

00016800 <bt_smp_recv>:
{
   16800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   16802:	898b      	ldrh	r3, [r1, #12]
{
   16804:	4604      	mov	r4, r0
   16806:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16808:	b92b      	cbnz	r3, 16816 <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1680a:	2145      	movs	r1, #69	; 0x45
   1680c:	4827      	ldr	r0, [pc, #156]	; (168ac <bt_smp_recv+0xac>)
   1680e:	f006 f97f 	bl	1cb10 <printk>
}
   16812:	2000      	movs	r0, #0
   16814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16816:	2101      	movs	r1, #1
   16818:	f105 0008 	add.w	r0, r5, #8
   1681c:	f001 f8da 	bl	179d4 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   16820:	2104      	movs	r1, #4
   16822:	4606      	mov	r6, r0
   16824:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16828:	f009 fab4 	bl	1fd94 <atomic_test_bit>
   1682c:	7832      	ldrb	r2, [r6, #0]
   1682e:	b120      	cbz	r0, 1683a <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   16830:	2157      	movs	r1, #87	; 0x57
   16832:	481f      	ldr	r0, [pc, #124]	; (168b0 <bt_smp_recv+0xb0>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   16834:	f006 f96c 	bl	1cb10 <printk>
		return 0;
   16838:	e7eb      	b.n	16812 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1683a:	2a0e      	cmp	r2, #14
   1683c:	d902      	bls.n	16844 <bt_smp_recv+0x44>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1683e:	2157      	movs	r1, #87	; 0x57
   16840:	481c      	ldr	r0, [pc, #112]	; (168b4 <bt_smp_recv+0xb4>)
   16842:	e7f7      	b.n	16834 <bt_smp_recv+0x34>
	if (!handlers[hdr->code].func) {
   16844:	4f1c      	ldr	r7, [pc, #112]	; (168b8 <bt_smp_recv+0xb8>)
   16846:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1684a:	b943      	cbnz	r3, 1685e <bt_smp_recv+0x5e>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1684c:	2157      	movs	r1, #87	; 0x57
   1684e:	481b      	ldr	r0, [pc, #108]	; (168bc <bt_smp_recv+0xbc>)
   16850:	f006 f95e 	bl	1cb10 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   16854:	2107      	movs	r1, #7
		smp_error(smp, err);
   16856:	4620      	mov	r0, r4
   16858:	f009 fca5 	bl	201a6 <smp_error>
   1685c:	e7d9      	b.n	16812 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
   1685e:	4611      	mov	r1, r2
   16860:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16864:	f009 fc64 	bl	20130 <atomic_test_and_clear_bit>
   16868:	7833      	ldrb	r3, [r6, #0]
   1686a:	b948      	cbnz	r0, 16880 <bt_smp_recv+0x80>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1686c:	461a      	mov	r2, r3
   1686e:	2157      	movs	r1, #87	; 0x57
   16870:	4813      	ldr	r0, [pc, #76]	; (168c0 <bt_smp_recv+0xc0>)
   16872:	f006 f94d 	bl	1cb10 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   16876:	7833      	ldrb	r3, [r6, #0]
   16878:	2b05      	cmp	r3, #5
   1687a:	d0ca      	beq.n	16812 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1687c:	2108      	movs	r1, #8
   1687e:	e7ea      	b.n	16856 <bt_smp_recv+0x56>
	if (buf->len != handlers[hdr->code].expect_len) {
   16880:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   16884:	89aa      	ldrh	r2, [r5, #12]
   16886:	7909      	ldrb	r1, [r1, #4]
   16888:	4291      	cmp	r1, r2
   1688a:	d005      	beq.n	16898 <bt_smp_recv+0x98>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1688c:	2145      	movs	r1, #69	; 0x45
   1688e:	480d      	ldr	r0, [pc, #52]	; (168c4 <bt_smp_recv+0xc4>)
   16890:	f006 f93e 	bl	1cb10 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   16894:	210a      	movs	r1, #10
   16896:	e7de      	b.n	16856 <bt_smp_recv+0x56>
	err = handlers[hdr->code].func(smp, buf);
   16898:	4629      	mov	r1, r5
   1689a:	4620      	mov	r0, r4
   1689c:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   168a0:	4798      	blx	r3
	if (err) {
   168a2:	4601      	mov	r1, r0
   168a4:	2800      	cmp	r0, #0
   168a6:	d0b4      	beq.n	16812 <bt_smp_recv+0x12>
   168a8:	e7d5      	b.n	16856 <bt_smp_recv+0x56>
   168aa:	bf00      	nop
   168ac:	000259bf 	.word	0x000259bf
   168b0:	000259df 	.word	0x000259df
   168b4:	00025a15 	.word	0x00025a15
   168b8:	00022518 	.word	0x00022518
   168bc:	00025a3c 	.word	0x00025a3c
   168c0:	00025a5b 	.word	0x00025a5b
   168c4:	000252a4 	.word	0x000252a4

000168c8 <bt_smp_pkey_ready>:
{
   168c8:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   168ca:	4b19      	ldr	r3, [pc, #100]	; (16930 <bt_smp_pkey_ready+0x68>)
   168cc:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   168ce:	b928      	cbnz	r0, 168dc <bt_smp_pkey_ready+0x14>
}
   168d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Public key not available");
   168d4:	2157      	movs	r1, #87	; 0x57
   168d6:	4817      	ldr	r0, [pc, #92]	; (16934 <bt_smp_pkey_ready+0x6c>)
   168d8:	f006 b91a 	b.w	1cb10 <printk>
	z_impl_k_sem_give(sem);
   168dc:	4816      	ldr	r0, [pc, #88]	; (16938 <bt_smp_pkey_ready+0x70>)
   168de:	f004 ff57 	bl	1b790 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   168e2:	2500      	movs	r5, #0
   168e4:	4c15      	ldr	r4, [pc, #84]	; (1693c <bt_smp_pkey_ready+0x74>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   168e6:	2106      	movs	r1, #6
   168e8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   168ec:	f009 fa52 	bl	1fd94 <atomic_test_bit>
   168f0:	b178      	cbz	r0, 16912 <bt_smp_pkey_ready+0x4a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   168f2:	6823      	ldr	r3, [r4, #0]
			err = sc_send_public_key(smp);
   168f4:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   168f6:	78db      	ldrb	r3, [r3, #3]
   168f8:	b98b      	cbnz	r3, 1691e <bt_smp_pkey_ready+0x56>
			err = sc_send_public_key(smp);
   168fa:	f7ff fc35 	bl	16168 <sc_send_public_key>
			if (err) {
   168fe:	4601      	mov	r1, r0
   16900:	b110      	cbz	r0, 16908 <bt_smp_pkey_ready+0x40>
				smp_error(smp, err);
   16902:	4620      	mov	r0, r4
   16904:	f009 fc4f 	bl	201a6 <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
   16908:	210c      	movs	r1, #12
   1690a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1690e:	f009 fb82 	bl	20016 <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   16912:	3501      	adds	r5, #1
   16914:	2d03      	cmp	r5, #3
   16916:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
   1691a:	d1e4      	bne.n	168e6 <bt_smp_pkey_ready+0x1e>
}
   1691c:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_slave(smp);
   1691e:	f7ff fc45 	bl	161ac <smp_public_key_slave>
		if (err) {
   16922:	4601      	mov	r1, r0
   16924:	2800      	cmp	r0, #0
   16926:	d0f4      	beq.n	16912 <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   16928:	4620      	mov	r0, r4
   1692a:	f009 fc3c 	bl	201a6 <smp_error>
   1692e:	e7f0      	b.n	16912 <bt_smp_pkey_ready+0x4a>
   16930:	20009d44 	.word	0x20009d44
   16934:	00025a7b 	.word	0x00025a7b
   16938:	20008564 	.word	0x20008564
   1693c:	20008f48 	.word	0x20008f48

00016940 <smp_pairing_failed>:
{
   16940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   16942:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   16944:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   16946:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
   1694a:	2145      	movs	r1, #69	; 0x45
{
   1694c:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1694e:	7832      	ldrb	r2, [r6, #0]
   16950:	480e      	ldr	r0, [pc, #56]	; (1698c <smp_pairing_failed+0x4c>)
   16952:	f006 f8dd 	bl	1cb10 <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   16956:	210a      	movs	r1, #10
   16958:	4628      	mov	r0, r5
   1695a:	f009 fbe9 	bl	20130 <atomic_test_and_clear_bit>
   1695e:	b140      	cbz	r0, 16972 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   16960:	4b0b      	ldr	r3, [pc, #44]	; (16990 <smp_pairing_failed+0x50>)
   16962:	681b      	ldr	r3, [r3, #0]
   16964:	b963      	cbnz	r3, 16980 <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
   16966:	4620      	mov	r0, r4
   16968:	7831      	ldrb	r1, [r6, #0]
   1696a:	f7ff fef7 	bl	1675c <smp_pairing_complete>
}
   1696e:	2000      	movs	r0, #0
   16970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   16972:	210b      	movs	r1, #11
   16974:	4628      	mov	r0, r5
   16976:	f009 fbdb 	bl	20130 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1697a:	2800      	cmp	r0, #0
   1697c:	d1f0      	bne.n	16960 <smp_pairing_failed+0x20>
   1697e:	e7f2      	b.n	16966 <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
   16980:	691b      	ldr	r3, [r3, #16]
   16982:	2b00      	cmp	r3, #0
   16984:	d0ef      	beq.n	16966 <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
   16986:	4638      	mov	r0, r7
   16988:	4798      	blx	r3
   1698a:	e7ec      	b.n	16966 <smp_pairing_failed+0x26>
   1698c:	00025a99 	.word	0x00025a99
   16990:	20009c20 	.word	0x20009c20

00016994 <smp_timeout>:
{
   16994:	b510      	push	{r4, lr}
   16996:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   16998:	2145      	movs	r1, #69	; 0x45
   1699a:	4807      	ldr	r0, [pc, #28]	; (169b8 <smp_timeout+0x24>)
   1699c:	f006 f8b8 	bl	1cb10 <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   169a0:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
   169a4:	2108      	movs	r1, #8
   169a6:	f7ff fed9 	bl	1675c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   169aa:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   169ae:	2104      	movs	r1, #4
}
   169b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   169b4:	f009 bb2f 	b.w	20016 <atomic_set_bit>
   169b8:	00025aaa 	.word	0x00025aaa

000169bc <smp_master_ident>:
{
   169bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169c0:	460b      	mov	r3, r1
   169c2:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   169c4:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
   169c6:	f850 6bc4 	ldr.w	r6, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   169ca:	f009 f9e3 	bl	1fd94 <atomic_test_bit>
   169ce:	b328      	cbz	r0, 16a1c <smp_master_ident+0x60>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   169d0:	f106 0888 	add.w	r8, r6, #136	; 0x88
   169d4:	4642      	mov	r2, r8
   169d6:	2004      	movs	r0, #4
   169d8:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   169da:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   169dc:	f009 fe9d 	bl	2071a <bt_keys_get_type>
		if (!keys) {
   169e0:	4605      	mov	r5, r0
   169e2:	b950      	cbnz	r0, 169fa <smp_master_ident+0x3e>
			BT_ERR("Unable to get keys for %s",
   169e4:	4640      	mov	r0, r8
   169e6:	f7f7 fd6f 	bl	e4c8 <bt_addr_le_str_real>
   169ea:	2145      	movs	r1, #69	; 0x45
   169ec:	4602      	mov	r2, r0
   169ee:	481d      	ldr	r0, [pc, #116]	; (16a64 <smp_master_ident+0xa8>)
   169f0:	f006 f88e 	bl	1cb10 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   169f4:	2008      	movs	r0, #8
}
   169f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   169fa:	2202      	movs	r2, #2
   169fc:	4639      	mov	r1, r7
   169fe:	3018      	adds	r0, #24
   16a00:	f007 fd3e 	bl	1e480 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   16a04:	2208      	movs	r2, #8
   16a06:	1cb9      	adds	r1, r7, #2
   16a08:	f105 0010 	add.w	r0, r5, #16
   16a0c:	f007 fd38 	bl	1e480 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   16a10:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   16a14:	f023 0301 	bic.w	r3, r3, #1
   16a18:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   16a1c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   16a20:	079a      	lsls	r2, r3, #30
   16a22:	d50b      	bpl.n	16a3c <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   16a24:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   16a26:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16a2a:	f009 faf4 	bl	20016 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16a2e:	78f3      	ldrb	r3, [r6, #3]
   16a30:	b143      	cbz	r3, 16a44 <smp_master_ident+0x88>
	if (!smp->local_dist && !smp->remote_dist) {
   16a32:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
   16a36:	b17d      	cbz	r5, 16a58 <smp_master_ident+0x9c>
	return 0;
   16a38:	2000      	movs	r0, #0
   16a3a:	e7dc      	b.n	169f6 <smp_master_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16a3c:	075b      	lsls	r3, r3, #29
   16a3e:	d5f6      	bpl.n	16a2e <smp_master_ident+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   16a40:	210a      	movs	r1, #10
   16a42:	e7f0      	b.n	16a26 <smp_master_ident+0x6a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   16a44:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   16a48:	2b00      	cmp	r3, #0
   16a4a:	d1f2      	bne.n	16a32 <smp_master_ident+0x76>
		err = bt_smp_distribute_keys(smp);
   16a4c:	4620      	mov	r0, r4
   16a4e:	f7ff f8cd 	bl	15bec <bt_smp_distribute_keys>
		if (err) {
   16a52:	2800      	cmp	r0, #0
   16a54:	d0ed      	beq.n	16a32 <smp_master_ident+0x76>
   16a56:	e7ce      	b.n	169f6 <smp_master_ident+0x3a>
		smp_pairing_complete(smp, 0);
   16a58:	4620      	mov	r0, r4
   16a5a:	4629      	mov	r1, r5
   16a5c:	f7ff fe7e 	bl	1675c <smp_pairing_complete>
	return 0;
   16a60:	4628      	mov	r0, r5
   16a62:	e7c8      	b.n	169f6 <smp_master_ident+0x3a>
   16a64:	000257d3 	.word	0x000257d3

00016a68 <smp_ident_sent>:
{
   16a68:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   16a6a:	7883      	ldrb	r3, [r0, #2]
   16a6c:	2b01      	cmp	r3, #1
   16a6e:	d11d      	bne.n	16aac <smp_ident_sent+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   16a70:	2106      	movs	r1, #6
   16a72:	f008 f9f0 	bl	1ee56 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   16a76:	4604      	mov	r4, r0
   16a78:	b950      	cbnz	r0, 16a90 <smp_ident_sent+0x28>
   16a7a:	490d      	ldr	r1, [pc, #52]	; (16ab0 <smp_ident_sent+0x48>)
   16a7c:	480d      	ldr	r0, [pc, #52]	; (16ab4 <smp_ident_sent+0x4c>)
   16a7e:	f240 3232 	movw	r2, #818	; 0x332
   16a82:	f006 f845 	bl	1cb10 <printk>
   16a86:	f240 3132 	movw	r1, #818	; 0x332
   16a8a:	4809      	ldr	r0, [pc, #36]	; (16ab0 <smp_ident_sent+0x48>)
   16a8c:	f006 fae6 	bl	1d05c <assert_post_action>
		smp->local_dist &= ~dist_complete;
   16a90:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   16a94:	f023 0301 	bic.w	r3, r3, #1
   16a98:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   16a9c:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   16aa0:	b921      	cbnz	r1, 16aac <smp_ident_sent+0x44>
			smp_pairing_complete(smp, 0);
   16aa2:	4620      	mov	r0, r4
}
   16aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   16aa8:	f7ff be58 	b.w	1675c <smp_pairing_complete>
}
   16aac:	bd10      	pop	{r4, pc}
   16aae:	bf00      	nop
   16ab0:	00025abb 	.word	0x00025abb
   16ab4:	00022f17 	.word	0x00022f17

00016ab8 <smp_ident_addr_info>:
{
   16ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   16abc:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   16abe:	6804      	ldr	r4, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   16ac0:	7833      	ldrb	r3, [r6, #0]
{
   16ac2:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   16ac4:	f104 0888 	add.w	r8, r4, #136	; 0x88
   16ac8:	b1bb      	cbz	r3, 16afa <smp_ident_addr_info+0x42>
	if (!bt_addr_le_is_identity(&req->addr)) {
   16aca:	79b3      	ldrb	r3, [r6, #6]
   16acc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16ad0:	2bc0      	cmp	r3, #192	; 0xc0
   16ad2:	d012      	beq.n	16afa <smp_ident_addr_info+0x42>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   16ad4:	4630      	mov	r0, r6
   16ad6:	f7f7 fcf7 	bl	e4c8 <bt_addr_le_str_real>
   16ada:	2145      	movs	r1, #69	; 0x45
   16adc:	4602      	mov	r2, r0
   16ade:	4846      	ldr	r0, [pc, #280]	; (16bf8 <smp_ident_addr_info+0x140>)
   16ae0:	f006 f816 	bl	1cb10 <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   16ae4:	4640      	mov	r0, r8
   16ae6:	f7f7 fcef 	bl	e4c8 <bt_addr_le_str_real>
   16aea:	2145      	movs	r1, #69	; 0x45
   16aec:	4602      	mov	r2, r0
   16aee:	4843      	ldr	r0, [pc, #268]	; (16bfc <smp_ident_addr_info+0x144>)
   16af0:	f006 f80e 	bl	1cb10 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   16af4:	200a      	movs	r0, #10
}
   16af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   16afa:	2207      	movs	r2, #7
   16afc:	4631      	mov	r1, r6
   16afe:	4640      	mov	r0, r8
   16b00:	f007 fcad 	bl	1e45e <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   16b04:	b168      	cbz	r0, 16b22 <smp_ident_addr_info+0x6a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   16b06:	4631      	mov	r1, r6
   16b08:	7a20      	ldrb	r0, [r4, #8]
   16b0a:	f000 fc15 	bl	17338 <bt_keys_find_addr>
		if (keys) {
   16b0e:	4607      	mov	r7, r0
   16b10:	b138      	cbz	r0, 16b22 <smp_ident_addr_info+0x6a>
			if (!update_keys_check(smp, keys)) {
   16b12:	4601      	mov	r1, r0
   16b14:	4628      	mov	r0, r5
   16b16:	f009 f943 	bl	1fda0 <update_keys_check>
   16b1a:	b1c0      	cbz	r0, 16b4e <smp_ident_addr_info+0x96>
			bt_keys_clear(keys);
   16b1c:	4638      	mov	r0, r7
   16b1e:	f000 fc1b 	bl	17358 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16b22:	210d      	movs	r1, #13
   16b24:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   16b28:	f009 f934 	bl	1fd94 <atomic_test_bit>
   16b2c:	2800      	cmp	r0, #0
   16b2e:	d03c      	beq.n	16baa <smp_ident_addr_info+0xf2>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   16b30:	4642      	mov	r2, r8
   16b32:	2002      	movs	r0, #2
   16b34:	7a21      	ldrb	r1, [r4, #8]
   16b36:	f009 fdf0 	bl	2071a <bt_keys_get_type>
		if (!keys) {
   16b3a:	4607      	mov	r7, r0
   16b3c:	b948      	cbnz	r0, 16b52 <smp_ident_addr_info+0x9a>
			BT_ERR("Unable to get keys for %s",
   16b3e:	4640      	mov	r0, r8
   16b40:	f7f7 fcc2 	bl	e4c8 <bt_addr_le_str_real>
   16b44:	2145      	movs	r1, #69	; 0x45
   16b46:	4602      	mov	r2, r0
   16b48:	482d      	ldr	r0, [pc, #180]	; (16c00 <smp_ident_addr_info+0x148>)
   16b4a:	f005 ffe1 	bl	1cb10 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   16b4e:	2008      	movs	r0, #8
   16b50:	e7d1      	b.n	16af6 <smp_ident_addr_info+0x3e>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   16b52:	78e3      	ldrb	r3, [r4, #3]
   16b54:	2b00      	cmp	r3, #0
   16b56:	d13c      	bne.n	16bd2 <smp_ident_addr_info+0x11a>
			dst = &conn->le.resp_addr;
   16b58:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   16b5c:	780b      	ldrb	r3, [r1, #0]
   16b5e:	2b01      	cmp	r3, #1
   16b60:	d120      	bne.n	16ba4 <smp_ident_addr_info+0xec>
		if (bt_addr_le_is_rpa(dst)) {
   16b62:	798b      	ldrb	r3, [r1, #6]
   16b64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16b68:	2b40      	cmp	r3, #64	; 0x40
   16b6a:	d11b      	bne.n	16ba4 <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   16b6c:	2206      	movs	r2, #6
   16b6e:	3101      	adds	r1, #1
   16b70:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   16b74:	f007 fc84 	bl	1e480 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   16b78:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   16b7c:	b193      	cbz	r3, 16ba4 <smp_ident_addr_info+0xec>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   16b7e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   16b82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16b86:	2bc0      	cmp	r3, #192	; 0xc0
   16b88:	d00c      	beq.n	16ba4 <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   16b8a:	2207      	movs	r2, #7
   16b8c:	4631      	mov	r1, r6
   16b8e:	1c78      	adds	r0, r7, #1
   16b90:	f007 fc76 	bl	1e480 <memcpy>
   16b94:	2207      	movs	r2, #7
   16b96:	4631      	mov	r1, r6
   16b98:	4640      	mov	r0, r8
   16b9a:	f007 fc71 	bl	1e480 <memcpy>
				bt_conn_identity_resolved(conn);
   16b9e:	4620      	mov	r0, r4
   16ba0:	f7fa fbea 	bl	11378 <bt_conn_identity_resolved>
		bt_id_add(keys);
   16ba4:	4638      	mov	r0, r7
   16ba6:	f7f8 fe67 	bl	f878 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   16baa:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   16bae:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16bb2:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   16bb4:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16bb8:	d504      	bpl.n	16bc4 <smp_ident_addr_info+0x10c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   16bba:	210a      	movs	r1, #10
   16bbc:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   16bc0:	f009 fa29 	bl	20016 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16bc4:	78e3      	ldrb	r3, [r4, #3]
   16bc6:	b13b      	cbz	r3, 16bd8 <smp_ident_addr_info+0x120>
	if (!smp->local_dist && !smp->remote_dist) {
   16bc8:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   16bcc:	b174      	cbz	r4, 16bec <smp_ident_addr_info+0x134>
	return 0;
   16bce:	2000      	movs	r0, #0
   16bd0:	e791      	b.n	16af6 <smp_ident_addr_info+0x3e>
			dst = &conn->le.init_addr;
   16bd2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   16bd6:	e7c1      	b.n	16b5c <smp_ident_addr_info+0xa4>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   16bd8:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   16bdc:	2b00      	cmp	r3, #0
   16bde:	d1f3      	bne.n	16bc8 <smp_ident_addr_info+0x110>
		err = bt_smp_distribute_keys(smp);
   16be0:	4628      	mov	r0, r5
   16be2:	f7ff f803 	bl	15bec <bt_smp_distribute_keys>
		if (err) {
   16be6:	2800      	cmp	r0, #0
   16be8:	d0ee      	beq.n	16bc8 <smp_ident_addr_info+0x110>
   16bea:	e784      	b.n	16af6 <smp_ident_addr_info+0x3e>
		smp_pairing_complete(smp, 0);
   16bec:	4621      	mov	r1, r4
   16bee:	4628      	mov	r0, r5
   16bf0:	f7ff fdb4 	bl	1675c <smp_pairing_complete>
   16bf4:	e7eb      	b.n	16bce <smp_ident_addr_info+0x116>
   16bf6:	bf00      	nop
   16bf8:	00025aea 	.word	0x00025aea
   16bfc:	00025b03 	.word	0x00025b03
   16c00:	000257d3 	.word	0x000257d3

00016c04 <smp_pairing_confirm>:
{
   16c04:	b570      	push	{r4, r5, r6, lr}
   16c06:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   16c08:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   16c0a:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   16c0e:	210b      	movs	r1, #11
   16c10:	4628      	mov	r0, r5
   16c12:	f009 f912 	bl	1fe3a <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   16c16:	2210      	movs	r2, #16
   16c18:	4631      	mov	r1, r6
   16c1a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   16c1e:	f007 fc2f 	bl	1e480 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16c22:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16c24:	78db      	ldrb	r3, [r3, #3]
   16c26:	b94b      	cbnz	r3, 16c3c <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16c28:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16c2c:	2104      	movs	r1, #4
   16c2e:	f009 f9f2 	bl	20016 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   16c32:	4620      	mov	r0, r4
}
   16c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   16c38:	f009 ba48 	b.w	200cc <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16c3c:	2105      	movs	r1, #5
   16c3e:	4628      	mov	r0, r5
   16c40:	f009 f8a8 	bl	1fd94 <atomic_test_bit>
   16c44:	b920      	cbnz	r0, 16c50 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
   16c46:	4620      	mov	r0, r4
}
   16c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   16c4c:	f009 bbf4 	b.w	20438 <legacy_pairing_confirm>
	switch (smp->method) {
   16c50:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16c54:	2a01      	cmp	r2, #1
   16c56:	d00b      	beq.n	16c70 <smp_pairing_confirm+0x6c>
   16c58:	2a02      	cmp	r2, #2
   16c5a:	d115      	bne.n	16c88 <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16c5c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16c60:	2104      	movs	r1, #4
   16c62:	f009 f9d8 	bl	20016 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   16c66:	4620      	mov	r0, r4
}
   16c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   16c6c:	f7ff b94e 	b.w	15f0c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16c70:	210a      	movs	r1, #10
   16c72:	4628      	mov	r0, r5
   16c74:	f009 f88e 	bl	1fd94 <atomic_test_bit>
   16c78:	2800      	cmp	r0, #0
   16c7a:	d0ef      	beq.n	16c5c <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16c7c:	4628      	mov	r0, r5
   16c7e:	2100      	movs	r1, #0
   16c80:	f009 f9c9 	bl	20016 <atomic_set_bit>
			return 0;
   16c84:	2000      	movs	r0, #0
}
   16c86:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16c88:	4802      	ldr	r0, [pc, #8]	; (16c94 <smp_pairing_confirm+0x90>)
   16c8a:	2145      	movs	r1, #69	; 0x45
   16c8c:	f005 ff40 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16c90:	2008      	movs	r0, #8
   16c92:	e7f8      	b.n	16c86 <smp_pairing_confirm+0x82>
   16c94:	00025744 	.word	0x00025744

00016c98 <smp_pairing_rsp>:
{
   16c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   16c9a:	688d      	ldr	r5, [r1, #8]
{
   16c9c:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   16c9e:	78eb      	ldrb	r3, [r5, #3]
   16ca0:	3b07      	subs	r3, #7
   16ca2:	2b09      	cmp	r3, #9
   16ca4:	f200 80ad 	bhi.w	16e02 <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
   16ca8:	792a      	ldrb	r2, [r5, #4]
   16caa:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	struct bt_conn *conn = smp->chan.chan.conn;
   16cae:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
   16cb0:	4013      	ands	r3, r2
   16cb2:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	smp->remote_dist &= rsp->resp_key_dist;
   16cb6:	796a      	ldrb	r2, [r5, #5]
   16cb8:	f890 31a9 	ldrb.w	r3, [r0, #425]	; 0x1a9
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16cbc:	4629      	mov	r1, r5
	smp->remote_dist &= rsp->resp_key_dist;
   16cbe:	4013      	ands	r3, r2
   16cc0:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   16cc4:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16cc6:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   16cc8:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16ccc:	30d1      	adds	r0, #209	; 0xd1
   16cce:	f007 fbd7 	bl	1e480 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   16cd2:	78ab      	ldrb	r3, [r5, #2]
   16cd4:	071b      	lsls	r3, r3, #28
   16cd6:	d508      	bpl.n	16cea <smp_pairing_rsp+0x52>
   16cd8:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16cdc:	071f      	lsls	r7, r3, #28
   16cde:	d504      	bpl.n	16cea <smp_pairing_rsp+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   16ce0:	2105      	movs	r1, #5
   16ce2:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16ce6:	f009 f996 	bl	20016 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   16cea:	78ab      	ldrb	r3, [r5, #2]
   16cec:	0698      	lsls	r0, r3, #26
   16cee:	d508      	bpl.n	16d02 <smp_pairing_rsp+0x6a>
   16cf0:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16cf4:	0699      	lsls	r1, r3, #26
   16cf6:	d504      	bpl.n	16d02 <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   16cf8:	2114      	movs	r1, #20
   16cfa:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16cfe:	f009 f98a 	bl	20016 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   16d02:	78ab      	ldrb	r3, [r5, #2]
   16d04:	07da      	lsls	r2, r3, #31
   16d06:	d508      	bpl.n	16d1a <smp_pairing_rsp+0x82>
   16d08:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16d0c:	07db      	lsls	r3, r3, #31
   16d0e:	d504      	bpl.n	16d1a <smp_pairing_rsp+0x82>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   16d10:	210d      	movs	r1, #13
   16d12:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16d16:	f009 f97e 	bl	20016 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   16d1a:	7829      	ldrb	r1, [r5, #0]
   16d1c:	4620      	mov	r0, r4
   16d1e:	f7fe fcd1 	bl	156c4 <get_pair_method>
   16d22:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
   16d26:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   16d2a:	4620      	mov	r0, r4
   16d2c:	f009 f838 	bl	1fda0 <update_keys_check>
   16d30:	2800      	cmp	r0, #0
   16d32:	d068      	beq.n	16e06 <smp_pairing_rsp+0x16e>
	err = remote_sec_level_reachable(smp);
   16d34:	4620      	mov	r0, r4
   16d36:	f009 f858 	bl	1fdea <remote_sec_level_reachable>
	if (err) {
   16d3a:	4605      	mov	r5, r0
   16d3c:	b9e0      	cbnz	r0, 16d78 <smp_pairing_rsp+0xe0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16d3e:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   16d42:	2105      	movs	r1, #5
   16d44:	4630      	mov	r0, r6
   16d46:	f009 f825 	bl	1fd94 <atomic_test_bit>
   16d4a:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16d4e:	bb90      	cbnz	r0, 16db6 <smp_pairing_rsp+0x11e>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16d50:	4615      	mov	r5, r2
   16d52:	b99a      	cbnz	r2, 16d7c <smp_pairing_rsp+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16d54:	210f      	movs	r1, #15
   16d56:	4630      	mov	r0, r6
   16d58:	f009 f81c 	bl	1fd94 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16d5c:	b170      	cbz	r0, 16d7c <smp_pairing_rsp+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16d5e:	4f2b      	ldr	r7, [pc, #172]	; (16e0c <smp_pairing_rsp+0x174>)
   16d60:	683b      	ldr	r3, [r7, #0]
   16d62:	b15b      	cbz	r3, 16d7c <smp_pairing_rsp+0xe4>
	    bt_auth && bt_auth->pairing_confirm) {
   16d64:	695b      	ldr	r3, [r3, #20]
   16d66:	b14b      	cbz	r3, 16d7c <smp_pairing_rsp+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16d68:	4630      	mov	r0, r6
   16d6a:	210a      	movs	r1, #10
   16d6c:	f009 f953 	bl	20016 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   16d70:	683b      	ldr	r3, [r7, #0]
   16d72:	6820      	ldr	r0, [r4, #0]
   16d74:	695b      	ldr	r3, [r3, #20]
   16d76:	4798      	blx	r3
}
   16d78:	4628      	mov	r0, r5
   16d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
   16d7c:	4620      	mov	r0, r4
   16d7e:	f7fe fe67 	bl	15a50 <legacy_request_tk>
	if (ret) {
   16d82:	4605      	mov	r5, r0
   16d84:	2800      	cmp	r0, #0
   16d86:	d1f7      	bne.n	16d78 <smp_pairing_rsp+0xe0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16d88:	210a      	movs	r1, #10
   16d8a:	4630      	mov	r0, r6
   16d8c:	f009 f802 	bl	1fd94 <atomic_test_bit>
   16d90:	b960      	cbnz	r0, 16dac <smp_pairing_rsp+0x114>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16d92:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16d96:	2103      	movs	r1, #3
   16d98:	f009 f93d 	bl	20016 <atomic_set_bit>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16d9c:	210e      	movs	r1, #14
   16d9e:	f009 f93a 	bl	20016 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   16da2:	4620      	mov	r0, r4
}
   16da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
   16da8:	f009 bb16 	b.w	203d8 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16dac:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16dae:	4630      	mov	r0, r6
   16db0:	f009 f931 	bl	20016 <atomic_set_bit>
		return 0;
   16db4:	e7e0      	b.n	16d78 <smp_pairing_rsp+0xe0>
	smp->remote_dist &= RECV_KEYS_SC;
   16db6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
	smp->local_dist &= SEND_KEYS_SC;
   16dba:	f884 51a8 	strb.w	r5, [r4, #424]	; 0x1a8
	smp->remote_dist &= RECV_KEYS_SC;
   16dbe:	f003 0302 	and.w	r3, r3, #2
   16dc2:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16dc6:	b952      	cbnz	r2, 16dde <smp_pairing_rsp+0x146>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16dc8:	210f      	movs	r1, #15
   16dca:	4630      	mov	r0, r6
   16dcc:	f008 ffe2 	bl	1fd94 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16dd0:	b128      	cbz	r0, 16dde <smp_pairing_rsp+0x146>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16dd2:	4f0e      	ldr	r7, [pc, #56]	; (16e0c <smp_pairing_rsp+0x174>)
   16dd4:	683b      	ldr	r3, [r7, #0]
   16dd6:	b113      	cbz	r3, 16dde <smp_pairing_rsp+0x146>
	    bt_auth && bt_auth->pairing_confirm) {
   16dd8:	695b      	ldr	r3, [r3, #20]
   16dda:	2b00      	cmp	r3, #0
   16ddc:	d1c4      	bne.n	16d68 <smp_pairing_rsp+0xd0>
	if (!sc_public_key) {
   16dde:	4b0c      	ldr	r3, [pc, #48]	; (16e10 <smp_pairing_rsp+0x178>)
   16de0:	681b      	ldr	r3, [r3, #0]
   16de2:	b90b      	cbnz	r3, 16de8 <smp_pairing_rsp+0x150>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16de4:	2106      	movs	r1, #6
   16de6:	e7e2      	b.n	16dae <smp_pairing_rsp+0x116>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   16de8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16dec:	210c      	movs	r1, #12
   16dee:	f009 f912 	bl	20016 <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   16df2:	210b      	movs	r1, #11
   16df4:	f009 f821 	bl	1fe3a <atomic_clear_bit>
	return sc_send_public_key(smp);
   16df8:	4620      	mov	r0, r4
}
   16dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
   16dfe:	f7ff b9b3 	b.w	16168 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   16e02:	2506      	movs	r5, #6
   16e04:	e7b8      	b.n	16d78 <smp_pairing_rsp+0xe0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16e06:	2503      	movs	r5, #3
   16e08:	e7b6      	b.n	16d78 <smp_pairing_rsp+0xe0>
   16e0a:	bf00      	nop
   16e0c:	20009c20 	.word	0x20009c20
   16e10:	20009d44 	.word	0x20009d44

00016e14 <smp_pairing_random>:
{
   16e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e18:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16e1a:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
   16e1e:	6889      	ldr	r1, [r1, #8]
{
   16e20:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16e22:	2210      	movs	r2, #16
   16e24:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16e26:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16e2a:	f007 fb29 	bl	1e480 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16e2e:	2105      	movs	r1, #5
   16e30:	4638      	mov	r0, r7
   16e32:	f008 ffaf 	bl	1fd94 <atomic_test_bit>
   16e36:	f8d4 9000 	ldr.w	r9, [r4]
   16e3a:	2800      	cmp	r0, #0
   16e3c:	d179      	bne.n	16f32 <smp_pairing_random+0x11e>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16e3e:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16e42:	f204 1a07 	addw	sl, r4, #263	; 0x107
   16e46:	ae08      	add	r6, sp, #32
   16e48:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16e4a:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16e4e:	9300      	str	r3, [sp, #0]
   16e50:	4641      	mov	r1, r8
   16e52:	4650      	mov	r0, sl
   16e54:	9602      	str	r6, [sp, #8]
   16e56:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   16e5a:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   16e5e:	f009 fa60 	bl	20322 <smp_c1>
	if (err) {
   16e62:	2800      	cmp	r0, #0
   16e64:	d139      	bne.n	16eda <smp_pairing_random+0xc6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   16e66:	2210      	movs	r2, #16
   16e68:	4631      	mov	r1, r6
   16e6a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   16e6e:	f007 faf6 	bl	1e45e <memcmp>
   16e72:	2800      	cmp	r0, #0
   16e74:	d158      	bne.n	16f28 <smp_pairing_random+0x114>
	    conn->role == BT_HCI_ROLE_MASTER) {
   16e76:	f899 5003 	ldrb.w	r5, [r9, #3]
	memcpy(out, r2, 8);
   16e7a:	2208      	movs	r2, #8
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
   16e7c:	f104 0be7 	add.w	fp, r4, #231	; 0xe7
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16e80:	bb95      	cbnz	r5, 16ee8 <smp_pairing_random+0xd4>
	memcpy(out, r2, 8);
   16e82:	4659      	mov	r1, fp
   16e84:	4630      	mov	r0, r6
   16e86:	f007 fafb 	bl	1e480 <memcpy>
	memcpy(out + 8, r1, 8);
   16e8a:	2208      	movs	r2, #8
   16e8c:	4641      	mov	r1, r8
   16e8e:	a80a      	add	r0, sp, #40	; 0x28
   16e90:	f007 faf6 	bl	1e480 <memcpy>
	return bt_encrypt_le(k, out, out);
   16e94:	4632      	mov	r2, r6
   16e96:	4631      	mov	r1, r6
   16e98:	4650      	mov	r0, sl
   16e9a:	f007 fdc6 	bl	1ea2a <bt_encrypt_le>
		if (err) {
   16e9e:	b9e0      	cbnz	r0, 16eda <smp_pairing_random+0xc6>
		(void)memset(ediv, 0, sizeof(ediv));
   16ea0:	2202      	movs	r2, #2
   16ea2:	4629      	mov	r1, r5
   16ea4:	a805      	add	r0, sp, #20
   16ea6:	f007 fb16 	bl	1e4d6 <memset>
		(void)memset(rand, 0, sizeof(rand));
   16eaa:	2208      	movs	r2, #8
   16eac:	4629      	mov	r1, r5
   16eae:	a806      	add	r0, sp, #24
   16eb0:	f007 fb11 	bl	1e4d6 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   16eb4:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
   16eb8:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   16ebc:	4648      	mov	r0, r9
   16ebe:	429a      	cmp	r2, r3
   16ec0:	bf94      	ite	ls
   16ec2:	9200      	strls	r2, [sp, #0]
   16ec4:	9300      	strhi	r3, [sp, #0]
   16ec6:	a906      	add	r1, sp, #24
   16ec8:	4633      	mov	r3, r6
   16eca:	aa05      	add	r2, sp, #20
   16ecc:	f007 fe37 	bl	1eb3e <bt_conn_le_start_encryption>
   16ed0:	b128      	cbz	r0, 16ede <smp_pairing_random+0xca>
			BT_ERR("Failed to start encryption");
   16ed2:	2145      	movs	r1, #69	; 0x45
   16ed4:	487f      	ldr	r0, [pc, #508]	; (170d4 <smp_pairing_random+0x2c0>)
			BT_ERR("Calculate STK failed");
   16ed6:	f005 fe1b 	bl	1cb10 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16eda:	2508      	movs	r5, #8
   16edc:	e025      	b.n	16f2a <smp_pairing_random+0x116>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16ede:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16ee0:	4638      	mov	r0, r7
   16ee2:	f009 f898 	bl	20016 <atomic_set_bit>
			return 0;
   16ee6:	e020      	b.n	16f2a <smp_pairing_random+0x116>
	memcpy(out, r2, 8);
   16ee8:	4641      	mov	r1, r8
   16eea:	4630      	mov	r0, r6
   16eec:	f007 fac8 	bl	1e480 <memcpy>
	memcpy(out + 8, r1, 8);
   16ef0:	2208      	movs	r2, #8
   16ef2:	4659      	mov	r1, fp
   16ef4:	a80a      	add	r0, sp, #40	; 0x28
   16ef6:	f007 fac3 	bl	1e480 <memcpy>
	return bt_encrypt_le(k, out, out);
   16efa:	4632      	mov	r2, r6
   16efc:	4631      	mov	r1, r6
   16efe:	4650      	mov	r0, sl
   16f00:	f007 fd93 	bl	1ea2a <bt_encrypt_le>
		if (err) {
   16f04:	b110      	cbz	r0, 16f0c <smp_pairing_random+0xf8>
			BT_ERR("Calculate STK failed");
   16f06:	2145      	movs	r1, #69	; 0x45
   16f08:	4873      	ldr	r0, [pc, #460]	; (170d8 <smp_pairing_random+0x2c4>)
   16f0a:	e7e4      	b.n	16ed6 <smp_pairing_random+0xc2>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   16f0c:	4631      	mov	r1, r6
   16f0e:	2210      	movs	r2, #16
   16f10:	4650      	mov	r0, sl
   16f12:	f007 fab5 	bl	1e480 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16f16:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16f18:	4638      	mov	r0, r7
   16f1a:	f009 f87c 	bl	20016 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   16f1e:	4620      	mov	r0, r4
   16f20:	f009 f8d4 	bl	200cc <smp_send_pairing_random>
   16f24:	4605      	mov	r5, r0
   16f26:	e000      	b.n	16f2a <smp_pairing_random+0x116>
		return BT_SMP_ERR_CONFIRM_FAILED;
   16f28:	2504      	movs	r5, #4
}
   16f2a:	4628      	mov	r0, r5
   16f2c:	b00d      	add	sp, #52	; 0x34
   16f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16f32:	f899 3003 	ldrb.w	r3, [r9, #3]
   16f36:	2b00      	cmp	r3, #0
   16f38:	d151      	bne.n	16fde <smp_pairing_random+0x1ca>
		err = sc_smp_check_confirm(smp);
   16f3a:	4620      	mov	r0, r4
   16f3c:	f7fe fc98 	bl	15870 <sc_smp_check_confirm>
		if (err) {
   16f40:	4605      	mov	r5, r0
   16f42:	2800      	cmp	r0, #0
   16f44:	d1f1      	bne.n	16f2a <smp_pairing_random+0x116>
		switch (smp->method) {
   16f46:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16f4a:	2a05      	cmp	r2, #5
   16f4c:	f200 80bb 	bhi.w	170c6 <smp_pairing_random+0x2b2>
   16f50:	e8df f002 	tbb	[pc, r2]
   16f54:	031e1e38 	.word	0x031e1e38
   16f58:	38b9      	.short	0x38b9
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   16f5a:	ab08      	add	r3, sp, #32
   16f5c:	485f      	ldr	r0, [pc, #380]	; (170dc <smp_pairing_random+0x2c8>)
   16f5e:	9300      	str	r3, [sp, #0]
   16f60:	6800      	ldr	r0, [r0, #0]
   16f62:	4643      	mov	r3, r8
   16f64:	f104 02e7 	add.w	r2, r4, #231	; 0xe7
   16f68:	f204 1117 	addw	r1, r4, #279	; 0x117
   16f6c:	f7fe fb42 	bl	155f4 <smp_g2>
   16f70:	2800      	cmp	r0, #0
   16f72:	d1b2      	bne.n	16eda <smp_pairing_random+0xc6>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16f74:	210a      	movs	r1, #10
   16f76:	4638      	mov	r0, r7
   16f78:	f009 f84d 	bl	20016 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16f7c:	2109      	movs	r1, #9
   16f7e:	f009 f84a 	bl	20016 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   16f82:	4b57      	ldr	r3, [pc, #348]	; (170e0 <smp_pairing_random+0x2cc>)
   16f84:	9908      	ldr	r1, [sp, #32]
   16f86:	681b      	ldr	r3, [r3, #0]
   16f88:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   16f8a:	6820      	ldr	r0, [r4, #0]
   16f8c:	4798      	blx	r3
			return 0;
   16f8e:	e7cc      	b.n	16f2a <smp_pairing_random+0x116>
			smp->passkey_round++;
   16f90:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   16f94:	3301      	adds	r3, #1
   16f96:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   16f98:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   16f9a:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
			if (smp->passkey_round == 20U) {
   16f9e:	d011      	beq.n	16fc4 <smp_pairing_random+0x1b0>
			if (bt_rand(smp->prnd, 16)) {
   16fa0:	2110      	movs	r1, #16
   16fa2:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16fa6:	f7fa f8bb 	bl	11120 <bt_rand>
   16faa:	2800      	cmp	r0, #0
   16fac:	d195      	bne.n	16eda <smp_pairing_random+0xc6>
			atomic_set_bit(&smp->allowed_cmds,
   16fae:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16fb2:	2103      	movs	r1, #3
   16fb4:	f009 f82f 	bl	20016 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   16fb8:	4620      	mov	r0, r4
}
   16fba:	b00d      	add	sp, #52	; 0x34
   16fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return smp_send_pairing_confirm(smp);
   16fc0:	f7fe bfa4 	b.w	15f0c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   16fc4:	2107      	movs	r1, #7
   16fc6:	4638      	mov	r0, r7
   16fc8:	f008 fee4 	bl	1fd94 <atomic_test_bit>
   16fcc:	b108      	cbz	r0, 16fd2 <smp_pairing_random+0x1be>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16fce:	2109      	movs	r1, #9
   16fd0:	e786      	b.n	16ee0 <smp_pairing_random+0xcc>
		return compute_and_send_master_dhcheck(smp);
   16fd2:	4620      	mov	r0, r4
}
   16fd4:	b00d      	add	sp, #52	; 0x34
   16fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return compute_and_send_master_dhcheck(smp);
   16fda:	f7ff ba11 	b.w	16400 <compute_and_send_master_dhcheck>
	switch (smp->method) {
   16fde:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16fe2:	2a05      	cmp	r2, #5
   16fe4:	d86f      	bhi.n	170c6 <smp_pairing_random+0x2b2>
   16fe6:	e8df f002 	tbb	[pc, r2]
   16fea:	221b      	.short	0x221b
   16fec:	4d6e0322 	.word	0x4d6e0322
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   16ff0:	ab08      	add	r3, sp, #32
   16ff2:	493a      	ldr	r1, [pc, #232]	; (170dc <smp_pairing_random+0x2c8>)
   16ff4:	9300      	str	r3, [sp, #0]
   16ff6:	4642      	mov	r2, r8
   16ff8:	6809      	ldr	r1, [r1, #0]
   16ffa:	f104 03e7 	add.w	r3, r4, #231	; 0xe7
   16ffe:	f204 1017 	addw	r0, r4, #279	; 0x117
   17002:	f7fe faf7 	bl	155f4 <smp_g2>
   17006:	2800      	cmp	r0, #0
   17008:	f47f af67 	bne.w	16eda <smp_pairing_random+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1700c:	210a      	movs	r1, #10
   1700e:	4638      	mov	r0, r7
   17010:	f009 f801 	bl	20016 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   17014:	4b32      	ldr	r3, [pc, #200]	; (170e0 <smp_pairing_random+0x2cc>)
   17016:	9908      	ldr	r1, [sp, #32]
   17018:	681b      	ldr	r3, [r3, #0]
   1701a:	6820      	ldr	r0, [r4, #0]
   1701c:	689b      	ldr	r3, [r3, #8]
   1701e:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17020:	210d      	movs	r1, #13
   17022:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   17026:	f008 fff6 	bl	20016 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1702a:	2110      	movs	r1, #16
   1702c:	e774      	b.n	16f18 <smp_pairing_random+0x104>
		err = sc_smp_check_confirm(smp);
   1702e:	4620      	mov	r0, r4
   17030:	f7fe fc1e 	bl	15870 <sc_smp_check_confirm>
		if (err) {
   17034:	4605      	mov	r5, r0
   17036:	2800      	cmp	r0, #0
   17038:	f47f af77 	bne.w	16f2a <smp_pairing_random+0x116>
		atomic_set_bit(&smp->allowed_cmds,
   1703c:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   17040:	2103      	movs	r1, #3
   17042:	4630      	mov	r0, r6
   17044:	f008 ffe7 	bl	20016 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   17048:	4620      	mov	r0, r4
   1704a:	f009 f83f 	bl	200cc <smp_send_pairing_random>
		if (err) {
   1704e:	4605      	mov	r5, r0
   17050:	2800      	cmp	r0, #0
   17052:	f47f af6a 	bne.w	16f2a <smp_pairing_random+0x116>
		smp->passkey_round++;
   17056:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   1705a:	3301      	adds	r3, #1
   1705c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1705e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   17060:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
   17064:	d105      	bne.n	17072 <smp_pairing_random+0x25e>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17066:	210d      	movs	r1, #13
   17068:	4630      	mov	r0, r6
   1706a:	f008 ffd4 	bl	20016 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1706e:	2110      	movs	r1, #16
   17070:	e736      	b.n	16ee0 <smp_pairing_random+0xcc>
		if (bt_rand(smp->prnd, 16)) {
   17072:	2110      	movs	r1, #16
   17074:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   17078:	f7fa f852 	bl	11120 <bt_rand>
   1707c:	2800      	cmp	r0, #0
   1707e:	f43f af54 	beq.w	16f2a <smp_pairing_random+0x116>
   17082:	e72a      	b.n	16eda <smp_pairing_random+0xc6>
		if (bt_rand(smp->prnd, 16)) {
   17084:	2110      	movs	r1, #16
   17086:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   1708a:	f7fa f849 	bl	11120 <bt_rand>
   1708e:	4605      	mov	r5, r0
   17090:	2800      	cmp	r0, #0
   17092:	f47f af22 	bne.w	16eda <smp_pairing_random+0xc6>
		if (bt_auth && bt_auth->oob_data_request) {
   17096:	4e12      	ldr	r6, [pc, #72]	; (170e0 <smp_pairing_random+0x2cc>)
   17098:	6833      	ldr	r3, [r6, #0]
   1709a:	b1cb      	cbz	r3, 170d0 <smp_pairing_random+0x2bc>
   1709c:	68db      	ldr	r3, [r3, #12]
   1709e:	b1bb      	cbz	r3, 170d0 <smp_pairing_random+0x2bc>
			struct bt_conn_oob_info info = {
   170a0:	4b10      	ldr	r3, [pc, #64]	; (170e4 <smp_pairing_random+0x2d0>)
			le_sc_oob_config_set(smp, &info);
   170a2:	4620      	mov	r0, r4
			struct bt_conn_oob_info info = {
   170a4:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
			le_sc_oob_config_set(smp, &info);
   170a8:	a908      	add	r1, sp, #32
			struct bt_conn_oob_info info = {
   170aa:	f8ad 3020 	strh.w	r3, [sp, #32]
			le_sc_oob_config_set(smp, &info);
   170ae:	f008 fe50 	bl	1fd52 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   170b2:	210c      	movs	r1, #12
   170b4:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   170b6:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   170ba:	f008 ffac 	bl	20016 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   170be:	6833      	ldr	r3, [r6, #0]
   170c0:	a908      	add	r1, sp, #32
   170c2:	68db      	ldr	r3, [r3, #12]
   170c4:	e761      	b.n	16f8a <smp_pairing_random+0x176>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   170c6:	2145      	movs	r1, #69	; 0x45
   170c8:	4807      	ldr	r0, [pc, #28]	; (170e8 <smp_pairing_random+0x2d4>)
   170ca:	f005 fd21 	bl	1cb10 <printk>
   170ce:	e704      	b.n	16eda <smp_pairing_random+0xc6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   170d0:	2502      	movs	r5, #2
   170d2:	e72a      	b.n	16f2a <smp_pairing_random+0x116>
   170d4:	000258e4 	.word	0x000258e4
   170d8:	00025b10 	.word	0x00025b10
   170dc:	20009d44 	.word	0x20009d44
   170e0:	20009c20 	.word	0x20009c20
   170e4:	00021d5d 	.word	0x00021d5d
   170e8:	00025744 	.word	0x00025744

000170ec <bt_smp_update_keys>:
{
   170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170ee:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   170f0:	f7fe fab4 	bl	1565c <smp_chan_get>
	if (!smp) {
   170f4:	4605      	mov	r5, r0
   170f6:	2800      	cmp	r0, #0
   170f8:	d077      	beq.n	171ea <bt_smp_update_keys+0xfe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   170fa:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   170fe:	2103      	movs	r1, #3
   17100:	4630      	mov	r0, r6
   17102:	f008 fe47 	bl	1fd94 <atomic_test_bit>
   17106:	2800      	cmp	r0, #0
   17108:	d06f      	beq.n	171ea <bt_smp_update_keys+0xfe>
	if (conn->le.keys) {
   1710a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1710e:	b108      	cbz	r0, 17114 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   17110:	f000 f922 	bl	17358 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17114:	f104 0788 	add.w	r7, r4, #136	; 0x88
   17118:	4639      	mov	r1, r7
   1711a:	7a20      	ldrb	r0, [r4, #8]
   1711c:	f000 f87e 	bl	1721c <bt_keys_get_addr>
   17120:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   17124:	b968      	cbnz	r0, 17142 <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
   17126:	4638      	mov	r0, r7
   17128:	f7f7 f9ce 	bl	e4c8 <bt_addr_le_str_real>
   1712c:	2145      	movs	r1, #69	; 0x45
   1712e:	4602      	mov	r2, r0
   17130:	482e      	ldr	r0, [pc, #184]	; (171ec <bt_smp_update_keys+0x100>)
   17132:	f005 fced 	bl	1cb10 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   17136:	4628      	mov	r0, r5
}
   17138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1713c:	2108      	movs	r1, #8
   1713e:	f009 b832 	b.w	201a6 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   17142:	210e      	movs	r1, #14
   17144:	4630      	mov	r0, r6
   17146:	f008 fe25 	bl	1fd94 <atomic_test_bit>
   1714a:	b128      	cbz	r0, 17158 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1714c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   17150:	7b53      	ldrb	r3, [r2, #13]
   17152:	f043 0302 	orr.w	r3, r3, #2
   17156:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   17158:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1715c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   17160:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   17162:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   17164:	d838      	bhi.n	171d8 <bt_smp_update_keys+0xec>
   17166:	b3d2      	cbz	r2, 171de <bt_smp_update_keys+0xf2>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   17168:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1716c:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1716e:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
   17172:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17176:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
   17178:	4293      	cmp	r3, r2
   1717a:	bf28      	it	cs
   1717c:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1717e:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17180:	2105      	movs	r1, #5
   17182:	f008 fe07 	bl	1fd94 <atomic_test_bit>
   17186:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1718a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1718c:	b350      	cbz	r0, 171e4 <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_SC;
   1718e:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17192:	210d      	movs	r1, #13
   17194:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   17196:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17198:	f008 fdfc 	bl	1fd94 <atomic_test_bit>
   1719c:	b328      	cbz	r0, 171ea <bt_smp_update_keys+0xfe>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1719e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   171a2:	2120      	movs	r1, #32
   171a4:	f009 fac9 	bl	2073a <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   171a8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   171ac:	f205 1107 	addw	r1, r5, #263	; 0x107
   171b0:	2210      	movs	r2, #16
   171b2:	301a      	adds	r0, #26
   171b4:	f007 f964 	bl	1e480 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   171b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   171bc:	2208      	movs	r2, #8
   171be:	2100      	movs	r1, #0
   171c0:	3010      	adds	r0, #16
   171c2:	f007 f988 	bl	1e4d6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   171c6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   171ca:	2202      	movs	r2, #2
}
   171cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   171d0:	2100      	movs	r1, #0
   171d2:	3018      	adds	r0, #24
   171d4:	f007 b97f 	b.w	1e4d6 <memset>
	switch (smp->method) {
   171d8:	3a05      	subs	r2, #5
   171da:	2a01      	cmp	r2, #1
   171dc:	d9c4      	bls.n	17168 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   171de:	f023 0301 	bic.w	r3, r3, #1
   171e2:	e7c3      	b.n	1716c <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   171e4:	f022 0210 	bic.w	r2, r2, #16
   171e8:	735a      	strb	r2, [r3, #13]
}
   171ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171ec:	000257d3 	.word	0x000257d3

000171f0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   171f0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   171f2:	4b07      	ldr	r3, [pc, #28]	; (17210 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   171f4:	4807      	ldr	r0, [pc, #28]	; (17214 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   171f6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   171fa:	f003 0306 	and.w	r3, r3, #6
   171fe:	1f9a      	subs	r2, r3, #6
   17200:	4253      	negs	r3, r2
   17202:	4153      	adcs	r3, r2
   17204:	4a04      	ldr	r2, [pc, #16]	; (17218 <bt_smp_init+0x28>)
   17206:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   17208:	f7f9 fe6a 	bl	10ee0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1720c:	2000      	movs	r0, #0
   1720e:	bd08      	pop	{r3, pc}
   17210:	20008000 	.word	0x20008000
   17214:	200083b4 	.word	0x200083b4
   17218:	2000b7b9 	.word	0x2000b7b9

0001721c <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1721c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1721e:	4d11      	ldr	r5, [pc, #68]	; (17264 <bt_keys_get_addr+0x48>)
{
   17220:	4606      	mov	r6, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   17222:	782b      	ldrb	r3, [r5, #0]
{
   17224:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   17226:	4283      	cmp	r3, r0
   17228:	d00b      	beq.n	17242 <bt_keys_get_addr+0x26>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1722a:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1722c:	2207      	movs	r2, #7
   1722e:	4669      	mov	r1, sp
   17230:	480d      	ldr	r0, [pc, #52]	; (17268 <bt_keys_get_addr+0x4c>)
   17232:	9400      	str	r4, [sp, #0]
   17234:	f8cd 4003 	str.w	r4, [sp, #3]
   17238:	f007 f911 	bl	1e45e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1723c:	b150      	cbz	r0, 17254 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1723e:	4620      	mov	r0, r4
   17240:	e006      	b.n	17250 <bt_keys_get_addr+0x34>
   17242:	2207      	movs	r2, #7
   17244:	1c68      	adds	r0, r5, #1
   17246:	f007 f90a 	bl	1e45e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1724a:	2800      	cmp	r0, #0
   1724c:	d1ed      	bne.n	1722a <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   1724e:	4628      	mov	r0, r5
}
   17250:	b003      	add	sp, #12
   17252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   17254:	2207      	movs	r2, #7
   17256:	4639      	mov	r1, r7
   17258:	4803      	ldr	r0, [pc, #12]	; (17268 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1725a:	702e      	strb	r6, [r5, #0]
   1725c:	f007 f910 	bl	1e480 <memcpy>
		return keys;
   17260:	4800      	ldr	r0, [pc, #0]	; (17264 <bt_keys_get_addr+0x48>)
}
   17262:	e7f5      	b.n	17250 <bt_keys_get_addr+0x34>
   17264:	20009d48 	.word	0x20009d48
   17268:	20009d49 	.word	0x20009d49

0001726c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1726c:	460b      	mov	r3, r1
   1726e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   17270:	4a04      	ldr	r2, [pc, #16]	; (17284 <bt_keys_foreach+0x18>)
{
   17272:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   17274:	89d4      	ldrh	r4, [r2, #14]
   17276:	4204      	tst	r4, r0
   17278:	d002      	beq.n	17280 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
   1727a:	4610      	mov	r0, r2
		}
	}
}
   1727c:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1727e:	4718      	bx	r3
}
   17280:	bc10      	pop	{r4}
   17282:	4770      	bx	lr
   17284:	20009d48 	.word	0x20009d48

00017288 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   17288:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1728a:	2200      	movs	r2, #0
   1728c:	2002      	movs	r0, #2
   1728e:	4902      	ldr	r1, [pc, #8]	; (17298 <keys_commit+0x10>)
   17290:	f7ff ffec 	bl	1726c <bt_keys_foreach>
	}

	return 0;
}
   17294:	2000      	movs	r0, #0
   17296:	bd08      	pop	{r3, pc}
   17298:	00020717 	.word	0x00020717

0001729c <bt_keys_find>:
{
   1729c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1729e:	4c09      	ldr	r4, [pc, #36]	; (172c4 <bt_keys_find+0x28>)
{
   172a0:	460b      	mov	r3, r1
   172a2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   172a4:	89e2      	ldrh	r2, [r4, #14]
   172a6:	4202      	tst	r2, r0
   172a8:	d007      	beq.n	172ba <bt_keys_find+0x1e>
   172aa:	7822      	ldrb	r2, [r4, #0]
   172ac:	429a      	cmp	r2, r3
   172ae:	d104      	bne.n	172ba <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   172b0:	2207      	movs	r2, #7
   172b2:	1c60      	adds	r0, r4, #1
   172b4:	f007 f8d3 	bl	1e45e <memcmp>
   172b8:	b108      	cbz	r0, 172be <bt_keys_find+0x22>
	return NULL;
   172ba:	2000      	movs	r0, #0
}
   172bc:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   172be:	4620      	mov	r0, r4
   172c0:	e7fc      	b.n	172bc <bt_keys_find+0x20>
   172c2:	bf00      	nop
   172c4:	20009d48 	.word	0x20009d48

000172c8 <bt_keys_find_irk>:
{
   172c8:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   172ca:	780b      	ldrb	r3, [r1, #0]
   172cc:	4606      	mov	r6, r0
   172ce:	2b01      	cmp	r3, #1
   172d0:	460d      	mov	r5, r1
   172d2:	d001      	beq.n	172d8 <bt_keys_find_irk+0x10>
		return NULL;
   172d4:	2000      	movs	r0, #0
}
   172d6:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   172d8:	798b      	ldrb	r3, [r1, #6]
   172da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   172de:	2b40      	cmp	r3, #64	; 0x40
   172e0:	d1f8      	bne.n	172d4 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   172e2:	4c12      	ldr	r4, [pc, #72]	; (1732c <bt_keys_find_irk+0x64>)
   172e4:	89e3      	ldrh	r3, [r4, #14]
   172e6:	079b      	lsls	r3, r3, #30
   172e8:	d5f4      	bpl.n	172d4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   172ea:	7823      	ldrb	r3, [r4, #0]
   172ec:	42b3      	cmp	r3, r6
   172ee:	d10b      	bne.n	17308 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   172f0:	2206      	movs	r2, #6
   172f2:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   172f6:	1c68      	adds	r0, r5, #1
   172f8:	f007 f8b1 	bl	1e45e <memcmp>
   172fc:	b908      	cbnz	r0, 17302 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   172fe:	4620      	mov	r0, r4
   17300:	e7e9      	b.n	172d6 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17302:	89e3      	ldrh	r3, [r4, #14]
   17304:	079a      	lsls	r2, r3, #30
   17306:	d5e5      	bpl.n	172d4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   17308:	7823      	ldrb	r3, [r4, #0]
   1730a:	42b3      	cmp	r3, r6
   1730c:	d1e2      	bne.n	172d4 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1730e:	3501      	adds	r5, #1
   17310:	4629      	mov	r1, r5
   17312:	4807      	ldr	r0, [pc, #28]	; (17330 <bt_keys_find_irk+0x68>)
   17314:	f007 f905 	bl	1e522 <bt_rpa_irk_matches>
   17318:	2800      	cmp	r0, #0
   1731a:	d0db      	beq.n	172d4 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1731c:	2206      	movs	r2, #6
   1731e:	4629      	mov	r1, r5
   17320:	4804      	ldr	r0, [pc, #16]	; (17334 <bt_keys_find_irk+0x6c>)
   17322:	f007 f8ad 	bl	1e480 <memcpy>
			return &key_pool[i];
   17326:	4801      	ldr	r0, [pc, #4]	; (1732c <bt_keys_find_irk+0x64>)
}
   17328:	e7d5      	b.n	172d6 <bt_keys_find_irk+0xe>
   1732a:	bf00      	nop
   1732c:	20009d48 	.word	0x20009d48
   17330:	20009d72 	.word	0x20009d72
   17334:	20009d82 	.word	0x20009d82

00017338 <bt_keys_find_addr>:
{
   17338:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1733a:	4c06      	ldr	r4, [pc, #24]	; (17354 <bt_keys_find_addr+0x1c>)
   1733c:	7823      	ldrb	r3, [r4, #0]
   1733e:	4283      	cmp	r3, r0
   17340:	d104      	bne.n	1734c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   17342:	2207      	movs	r2, #7
   17344:	1c60      	adds	r0, r4, #1
   17346:	f007 f88a 	bl	1e45e <memcmp>
   1734a:	b108      	cbz	r0, 17350 <bt_keys_find_addr+0x18>
	return NULL;
   1734c:	2000      	movs	r0, #0
}
   1734e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   17350:	4620      	mov	r0, r4
   17352:	e7fc      	b.n	1734e <bt_keys_find_addr+0x16>
   17354:	20009d48 	.word	0x20009d48

00017358 <bt_keys_clear>:
{
   17358:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1735a:	7a03      	ldrb	r3, [r0, #8]
{
   1735c:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1735e:	075b      	lsls	r3, r3, #29
{
   17360:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
   17362:	d501      	bpl.n	17368 <bt_keys_clear+0x10>
		bt_id_del(keys);
   17364:	f7f8 fb46 	bl	f9f4 <bt_id_del>
		if (keys->id) {
   17368:	4625      	mov	r5, r4
   1736a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1736e:	b1b2      	cbz	r2, 1739e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   17370:	ae02      	add	r6, sp, #8
   17372:	2104      	movs	r1, #4
   17374:	4630      	mov	r0, r6
   17376:	f005 fb31 	bl	1c9dc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1737a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1737c:	462b      	mov	r3, r5
   1737e:	2124      	movs	r1, #36	; 0x24
   17380:	4a08      	ldr	r2, [pc, #32]	; (173a4 <bt_keys_clear+0x4c>)
   17382:	a803      	add	r0, sp, #12
   17384:	f7f7 f940 	bl	e608 <bt_settings_encode_key>
		settings_delete(key);
   17388:	a803      	add	r0, sp, #12
   1738a:	f006 f854 	bl	1d436 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1738e:	225c      	movs	r2, #92	; 0x5c
   17390:	2100      	movs	r1, #0
   17392:	4620      	mov	r0, r4
}
   17394:	b00c      	add	sp, #48	; 0x30
   17396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1739a:	f007 b89c 	b.w	1e4d6 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1739e:	9200      	str	r2, [sp, #0]
   173a0:	e7ec      	b.n	1737c <bt_keys_clear+0x24>
   173a2:	bf00      	nop
   173a4:	00025c79 	.word	0x00025c79

000173a8 <keys_set>:
{
   173a8:	b570      	push	{r4, r5, r6, lr}
   173aa:	4605      	mov	r5, r0
   173ac:	4614      	mov	r4, r2
   173ae:	4618      	mov	r0, r3
   173b0:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   173b2:	b945      	cbnz	r5, 173c6 <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   173b4:	2145      	movs	r1, #69	; 0x45
   173b6:	4830      	ldr	r0, [pc, #192]	; (17478 <keys_set+0xd0>)
   173b8:	f005 fbaa 	bl	1cb10 <printk>
		return -EINVAL;
   173bc:	f06f 0415 	mvn.w	r4, #21
}
   173c0:	4620      	mov	r0, r4
   173c2:	b018      	add	sp, #96	; 0x60
   173c4:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   173c6:	2250      	movs	r2, #80	; 0x50
   173c8:	a904      	add	r1, sp, #16
   173ca:	47a0      	blx	r4
	if (len < 0) {
   173cc:	1e04      	subs	r4, r0, #0
   173ce:	da05      	bge.n	173dc <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   173d0:	4622      	mov	r2, r4
   173d2:	2145      	movs	r1, #69	; 0x45
   173d4:	4829      	ldr	r0, [pc, #164]	; (1747c <keys_set+0xd4>)
   173d6:	f005 fb9b 	bl	1cb10 <printk>
   173da:	e7ef      	b.n	173bc <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   173dc:	4628      	mov	r0, r5
   173de:	a902      	add	r1, sp, #8
   173e0:	f007 f8c5 	bl	1e56e <bt_settings_decode_key>
	if (err) {
   173e4:	4606      	mov	r6, r0
   173e6:	b118      	cbz	r0, 173f0 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   173e8:	462a      	mov	r2, r5
   173ea:	2145      	movs	r1, #69	; 0x45
   173ec:	4824      	ldr	r0, [pc, #144]	; (17480 <keys_set+0xd8>)
   173ee:	e7f2      	b.n	173d6 <keys_set+0x2e>
	settings_name_next(name, &next);
   173f0:	4628      	mov	r0, r5
   173f2:	a901      	add	r1, sp, #4
   173f4:	f006 f846 	bl	1d484 <settings_name_next>
	if (!next) {
   173f8:	9801      	ldr	r0, [sp, #4]
   173fa:	b120      	cbz	r0, 17406 <keys_set+0x5e>
		id = strtol(next, NULL, 10);
   173fc:	220a      	movs	r2, #10
   173fe:	4631      	mov	r1, r6
   17400:	f006 ff50 	bl	1e2a4 <strtol>
   17404:	b2c0      	uxtb	r0, r0
	if (!len) {
   17406:	b99c      	cbnz	r4, 17430 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   17408:	4601      	mov	r1, r0
   1740a:	aa02      	add	r2, sp, #8
   1740c:	203f      	movs	r0, #63	; 0x3f
   1740e:	f7ff ff45 	bl	1729c <bt_keys_find>
		if (keys) {
   17412:	b120      	cbz	r0, 1741e <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
   17414:	225c      	movs	r2, #92	; 0x5c
   17416:	4621      	mov	r1, r4
   17418:	f007 f85d 	bl	1e4d6 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1741c:	e7d0      	b.n	173c0 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1741e:	a802      	add	r0, sp, #8
   17420:	f7f7 f852 	bl	e4c8 <bt_addr_le_str_real>
   17424:	2157      	movs	r1, #87	; 0x57
   17426:	4602      	mov	r2, r0
   17428:	4816      	ldr	r0, [pc, #88]	; (17484 <keys_set+0xdc>)
   1742a:	f005 fb71 	bl	1cb10 <printk>
   1742e:	e7c7      	b.n	173c0 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   17430:	a902      	add	r1, sp, #8
   17432:	f7ff fef3 	bl	1721c <bt_keys_get_addr>
	if (!keys) {
   17436:	4605      	mov	r5, r0
   17438:	b950      	cbnz	r0, 17450 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1743a:	a802      	add	r0, sp, #8
   1743c:	f7f7 f844 	bl	e4c8 <bt_addr_le_str_real>
   17440:	2145      	movs	r1, #69	; 0x45
   17442:	4602      	mov	r2, r0
   17444:	4810      	ldr	r0, [pc, #64]	; (17488 <keys_set+0xe0>)
   17446:	f005 fb63 	bl	1cb10 <printk>
		return -ENOMEM;
   1744a:	f06f 040b 	mvn.w	r4, #11
   1744e:	e7b7      	b.n	173c0 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   17450:	2c50      	cmp	r4, #80	; 0x50
   17452:	d009      	beq.n	17468 <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
   17454:	2350      	movs	r3, #80	; 0x50
   17456:	4622      	mov	r2, r4
   17458:	2145      	movs	r1, #69	; 0x45
   1745a:	480c      	ldr	r0, [pc, #48]	; (1748c <keys_set+0xe4>)
   1745c:	f005 fb58 	bl	1cb10 <printk>
			bt_keys_clear(keys);
   17460:	4628      	mov	r0, r5
   17462:	f7ff ff79 	bl	17358 <bt_keys_clear>
			return -EINVAL;
   17466:	e7a9      	b.n	173bc <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   17468:	4622      	mov	r2, r4
   1746a:	a904      	add	r1, sp, #16
   1746c:	300c      	adds	r0, #12
   1746e:	f007 f807 	bl	1e480 <memcpy>
	return 0;
   17472:	2400      	movs	r4, #0
   17474:	e7a4      	b.n	173c0 <keys_set+0x18>
   17476:	bf00      	nop
   17478:	000240ee 	.word	0x000240ee
   1747c:	00025bc1 	.word	0x00025bc1
   17480:	00025429 	.word	0x00025429
   17484:	00025be5 	.word	0x00025be5
   17488:	00025c0d 	.word	0x00025c0d
   1748c:	00025c31 	.word	0x00025c31

00017490 <bt_keys_store>:
{
   17490:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   17492:	4605      	mov	r5, r0
   17494:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17498:	4604      	mov	r4, r0
   1749a:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1749c:	b1da      	cbz	r2, 174d6 <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   1749e:	ae02      	add	r6, sp, #8
   174a0:	2104      	movs	r1, #4
   174a2:	4630      	mov	r0, r6
   174a4:	f005 fa9a 	bl	1c9dc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   174a8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   174aa:	462b      	mov	r3, r5
   174ac:	2124      	movs	r1, #36	; 0x24
   174ae:	4a0b      	ldr	r2, [pc, #44]	; (174dc <bt_keys_store+0x4c>)
   174b0:	a803      	add	r0, sp, #12
   174b2:	f7f7 f8a9 	bl	e608 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   174b6:	f104 010c 	add.w	r1, r4, #12
   174ba:	2250      	movs	r2, #80	; 0x50
   174bc:	a803      	add	r0, sp, #12
   174be:	f7f4 fb7d 	bl	bbbc <settings_save_one>
	if (err) {
   174c2:	4604      	mov	r4, r0
   174c4:	b120      	cbz	r0, 174d0 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   174c6:	4602      	mov	r2, r0
   174c8:	2145      	movs	r1, #69	; 0x45
   174ca:	4805      	ldr	r0, [pc, #20]	; (174e0 <bt_keys_store+0x50>)
   174cc:	f005 fb20 	bl	1cb10 <printk>
}
   174d0:	4620      	mov	r0, r4
   174d2:	b00c      	add	sp, #48	; 0x30
   174d4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   174d6:	9200      	str	r2, [sp, #0]
   174d8:	e7e7      	b.n	174aa <bt_keys_store+0x1a>
   174da:	bf00      	nop
   174dc:	00025c79 	.word	0x00025c79
   174e0:	00025c54 	.word	0x00025c54

000174e4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   174e4:	222c      	movs	r2, #44	; 0x2c
   174e6:	4b02      	ldr	r3, [pc, #8]	; (174f0 <net_buf_pool_get+0xc>)
   174e8:	fb02 3000 	mla	r0, r2, r0, r3
   174ec:	4770      	bx	lr
   174ee:	bf00      	nop
   174f0:	20008598 	.word	0x20008598

000174f4 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   174f4:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   174f6:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   174f8:	4b04      	ldr	r3, [pc, #16]	; (1750c <net_buf_id+0x18>)
   174fa:	fb01 3302 	mla	r3, r1, r2, r3
   174fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17500:	1ac0      	subs	r0, r0, r3
}
   17502:	4b03      	ldr	r3, [pc, #12]	; (17510 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   17504:	10c0      	asrs	r0, r0, #3
}
   17506:	4358      	muls	r0, r3
   17508:	4770      	bx	lr
   1750a:	bf00      	nop
   1750c:	20008598 	.word	0x20008598
   17510:	aaaaaaab 	.word	0xaaaaaaab

00017514 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   17514:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17516:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17518:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1751a:	4b09      	ldr	r3, [pc, #36]	; (17540 <fixed_data_alloc+0x2c>)
   1751c:	fb04 3302 	mla	r3, r4, r2, r3
   17520:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   17522:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17524:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   17526:	6823      	ldr	r3, [r4, #0]
   17528:	429a      	cmp	r2, r3
   1752a:	bf94      	ite	ls
   1752c:	600a      	strls	r2, [r1, #0]
   1752e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17530:	f7ff ffe0 	bl	174f4 <net_buf_id>
   17534:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   17538:	fb02 3000 	mla	r0, r2, r0, r3
   1753c:	bd10      	pop	{r4, pc}
   1753e:	bf00      	nop
   17540:	20008598 	.word	0x20008598

00017544 <net_buf_reset>:
{
   17544:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   17546:	7943      	ldrb	r3, [r0, #5]
{
   17548:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1754a:	b143      	cbz	r3, 1755e <net_buf_reset+0x1a>
   1754c:	490c      	ldr	r1, [pc, #48]	; (17580 <net_buf_reset+0x3c>)
   1754e:	480d      	ldr	r0, [pc, #52]	; (17584 <net_buf_reset+0x40>)
   17550:	224f      	movs	r2, #79	; 0x4f
   17552:	f005 fadd 	bl	1cb10 <printk>
   17556:	214f      	movs	r1, #79	; 0x4f
   17558:	4809      	ldr	r0, [pc, #36]	; (17580 <net_buf_reset+0x3c>)
   1755a:	f005 fd7f 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1755e:	6823      	ldr	r3, [r4, #0]
   17560:	b143      	cbz	r3, 17574 <net_buf_reset+0x30>
   17562:	4907      	ldr	r1, [pc, #28]	; (17580 <net_buf_reset+0x3c>)
   17564:	4807      	ldr	r0, [pc, #28]	; (17584 <net_buf_reset+0x40>)
   17566:	2250      	movs	r2, #80	; 0x50
   17568:	f005 fad2 	bl	1cb10 <printk>
   1756c:	2150      	movs	r1, #80	; 0x50
   1756e:	4804      	ldr	r0, [pc, #16]	; (17580 <net_buf_reset+0x3c>)
   17570:	f005 fd74 	bl	1d05c <assert_post_action>
	buf->len  = 0U;
   17574:	2300      	movs	r3, #0
   17576:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   17578:	6923      	ldr	r3, [r4, #16]
   1757a:	60a3      	str	r3, [r4, #8]
}
   1757c:	bd10      	pop	{r4, pc}
   1757e:	bf00      	nop
   17580:	00025c86 	.word	0x00025c86
   17584:	00022f17 	.word	0x00022f17

00017588 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   17588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1758c:	4605      	mov	r5, r0
   1758e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   17590:	4610      	mov	r0, r2
   17592:	4619      	mov	r1, r3
{
   17594:	4691      	mov	r9, r2
   17596:	4698      	mov	r8, r3
   17598:	4617      	mov	r7, r2
   1759a:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1759c:	f00a f89e 	bl	216dc <z_timeout_end_calc>
   175a0:	4682      	mov	sl, r0
   175a2:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   175a4:	b945      	cbnz	r5, 175b8 <net_buf_alloc_len+0x30>
   175a6:	494a      	ldr	r1, [pc, #296]	; (176d0 <net_buf_alloc_len+0x148>)
   175a8:	484a      	ldr	r0, [pc, #296]	; (176d4 <net_buf_alloc_len+0x14c>)
   175aa:	22ed      	movs	r2, #237	; 0xed
   175ac:	f005 fab0 	bl	1cb10 <printk>
   175b0:	21ed      	movs	r1, #237	; 0xed
   175b2:	4847      	ldr	r0, [pc, #284]	; (176d0 <net_buf_alloc_len+0x148>)
   175b4:	f005 fd52 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   175b8:	f04f 0320 	mov.w	r3, #32
   175bc:	f3ef 8111 	mrs	r1, BASEPRI
   175c0:	f383 8811 	msr	BASEPRI, r3
   175c4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   175c8:	8beb      	ldrh	r3, [r5, #30]
   175ca:	2b00      	cmp	r3, #0
   175cc:	d055      	beq.n	1767a <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   175ce:	8baa      	ldrh	r2, [r5, #28]
   175d0:	429a      	cmp	r2, r3
   175d2:	d93e      	bls.n	17652 <net_buf_alloc_len+0xca>
   175d4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   175d6:	2200      	movs	r2, #0
   175d8:	2300      	movs	r3, #0
   175da:	4628      	mov	r0, r5
   175dc:	f003 f86c 	bl	1a6b8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   175e0:	9900      	ldr	r1, [sp, #0]
   175e2:	4604      	mov	r4, r0
   175e4:	2800      	cmp	r0, #0
   175e6:	d034      	beq.n	17652 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   175e8:	f381 8811 	msr	BASEPRI, r1
   175ec:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   175f0:	9d01      	ldr	r5, [sp, #4]
   175f2:	2d00      	cmp	r5, #0
   175f4:	d069      	beq.n	176ca <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   175f6:	ea58 0309 	orrs.w	r3, r8, r9
   175fa:	d00f      	beq.n	1761c <net_buf_alloc_len+0x94>
   175fc:	f1b8 3fff 	cmp.w	r8, #4294967295
   17600:	bf08      	it	eq
   17602:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   17606:	d009      	beq.n	1761c <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   17608:	f004 fe40 	bl	1c28c <z_tick_get>
   1760c:	ebba 0700 	subs.w	r7, sl, r0
   17610:	eb6b 0601 	sbc.w	r6, fp, r1
   17614:	2e00      	cmp	r6, #0
   17616:	bfbc      	itt	lt
   17618:	2700      	movlt	r7, #0
   1761a:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   1761c:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17620:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   17622:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 176d8 <net_buf_alloc_len+0x150>
   17626:	463a      	mov	r2, r7
   17628:	fb09 8303 	mla	r3, r9, r3, r8
   1762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1762e:	4620      	mov	r0, r4
   17630:	681b      	ldr	r3, [r3, #0]
   17632:	a901      	add	r1, sp, #4
   17634:	f8d3 a000 	ldr.w	sl, [r3]
   17638:	4633      	mov	r3, r6
   1763a:	47d0      	blx	sl
   1763c:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1763e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   17640:	bb58      	cbnz	r0, 1769a <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   17642:	79a0      	ldrb	r0, [r4, #6]
   17644:	4621      	mov	r1, r4
   17646:	fb00 8009 	mla	r0, r0, r9, r8
   1764a:	f009 ff7c 	bl	21546 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1764e:	4634      	mov	r4, r6
}
   17650:	e01f      	b.n	17692 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   17652:	8beb      	ldrh	r3, [r5, #30]
   17654:	1e5a      	subs	r2, r3, #1
   17656:	83ea      	strh	r2, [r5, #30]
   17658:	f381 8811 	msr	BASEPRI, r1
   1765c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   17660:	2018      	movs	r0, #24
   17662:	8bac      	ldrh	r4, [r5, #28]
   17664:	1ae3      	subs	r3, r4, r3
   17666:	6aac      	ldr	r4, [r5, #40]	; 0x28
   17668:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1766c:	481a      	ldr	r0, [pc, #104]	; (176d8 <net_buf_alloc_len+0x150>)
   1766e:	4b1b      	ldr	r3, [pc, #108]	; (176dc <net_buf_alloc_len+0x154>)
   17670:	1a2d      	subs	r5, r5, r0
   17672:	10ad      	asrs	r5, r5, #2
   17674:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   17676:	71a5      	strb	r5, [r4, #6]
		goto success;
   17678:	e7ba      	b.n	175f0 <net_buf_alloc_len+0x68>
   1767a:	f381 8811 	msr	BASEPRI, r1
   1767e:	f3bf 8f6f 	isb	sy
   17682:	464a      	mov	r2, r9
   17684:	4643      	mov	r3, r8
   17686:	4628      	mov	r0, r5
   17688:	f003 f816 	bl	1a6b8 <z_impl_k_queue_get>
	if (!buf) {
   1768c:	4604      	mov	r4, r0
   1768e:	2800      	cmp	r0, #0
   17690:	d1ae      	bne.n	175f0 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17692:	4620      	mov	r0, r4
   17694:	b003      	add	sp, #12
   17696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1769a:	9b01      	ldr	r3, [sp, #4]
   1769c:	429d      	cmp	r5, r3
   1769e:	d90a      	bls.n	176b6 <net_buf_alloc_len+0x12e>
   176a0:	490b      	ldr	r1, [pc, #44]	; (176d0 <net_buf_alloc_len+0x148>)
   176a2:	480c      	ldr	r0, [pc, #48]	; (176d4 <net_buf_alloc_len+0x14c>)
   176a4:	f240 124d 	movw	r2, #333	; 0x14d
   176a8:	f005 fa32 	bl	1cb10 <printk>
   176ac:	f240 114d 	movw	r1, #333	; 0x14d
   176b0:	4807      	ldr	r0, [pc, #28]	; (176d0 <net_buf_alloc_len+0x148>)
   176b2:	f005 fcd3 	bl	1d05c <assert_post_action>
	buf->frags = NULL;
   176b6:	2300      	movs	r3, #0
   176b8:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   176ba:	2301      	movs	r3, #1
   176bc:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   176be:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   176c0:	4620      	mov	r0, r4
	buf->size  = size;
   176c2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   176c4:	f7ff ff3e 	bl	17544 <net_buf_reset>
	return buf;
   176c8:	e7e3      	b.n	17692 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   176ca:	6125      	str	r5, [r4, #16]
   176cc:	e7f3      	b.n	176b6 <net_buf_alloc_len+0x12e>
   176ce:	bf00      	nop
   176d0:	00025c86 	.word	0x00025c86
   176d4:	00022f17 	.word	0x00022f17
   176d8:	20008598 	.word	0x20008598
   176dc:	ba2e8ba3 	.word	0xba2e8ba3

000176e0 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   176e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176e4:	4606      	mov	r6, r0
   176e6:	f002 ffe7 	bl	1a6b8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   176ea:	4605      	mov	r5, r0
   176ec:	b140      	cbz	r0, 17700 <net_buf_get+0x20>
   176ee:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   176f0:	4f11      	ldr	r7, [pc, #68]	; (17738 <net_buf_get+0x58>)
   176f2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1773c <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   176f6:	7963      	ldrb	r3, [r4, #5]
   176f8:	f013 0301 	ands.w	r3, r3, #1
   176fc:	d103      	bne.n	17706 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   176fe:	6023      	str	r3, [r4, #0]

	return buf;
}
   17700:	4628      	mov	r0, r5
   17702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17706:	2200      	movs	r2, #0
   17708:	2300      	movs	r3, #0
   1770a:	4630      	mov	r0, r6
   1770c:	f002 ffd4 	bl	1a6b8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17710:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   17712:	b950      	cbnz	r0, 1772a <net_buf_get+0x4a>
   17714:	4639      	mov	r1, r7
   17716:	4640      	mov	r0, r8
   17718:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1771c:	f005 f9f8 	bl	1cb10 <printk>
   17720:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   17724:	4638      	mov	r0, r7
   17726:	f005 fc99 	bl	1d05c <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1772a:	7963      	ldrb	r3, [r4, #5]
   1772c:	f023 0301 	bic.w	r3, r3, #1
   17730:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17732:	6824      	ldr	r4, [r4, #0]
   17734:	e7df      	b.n	176f6 <net_buf_get+0x16>
   17736:	bf00      	nop
   17738:	00025c86 	.word	0x00025c86
   1773c:	00022f17 	.word	0x00022f17

00017740 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   17740:	b538      	push	{r3, r4, r5, lr}
   17742:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   17744:	4604      	mov	r4, r0
   17746:	b950      	cbnz	r0, 1775e <net_buf_simple_reserve+0x1e>
   17748:	490d      	ldr	r1, [pc, #52]	; (17780 <net_buf_simple_reserve+0x40>)
   1774a:	480e      	ldr	r0, [pc, #56]	; (17784 <net_buf_simple_reserve+0x44>)
   1774c:	f240 12bb 	movw	r2, #443	; 0x1bb
   17750:	f005 f9de 	bl	1cb10 <printk>
   17754:	f240 11bb 	movw	r1, #443	; 0x1bb
   17758:	4809      	ldr	r0, [pc, #36]	; (17780 <net_buf_simple_reserve+0x40>)
   1775a:	f005 fc7f 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1775e:	88a3      	ldrh	r3, [r4, #4]
   17760:	b153      	cbz	r3, 17778 <net_buf_simple_reserve+0x38>
   17762:	4907      	ldr	r1, [pc, #28]	; (17780 <net_buf_simple_reserve+0x40>)
   17764:	4807      	ldr	r0, [pc, #28]	; (17784 <net_buf_simple_reserve+0x44>)
   17766:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1776a:	f005 f9d1 	bl	1cb10 <printk>
   1776e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   17772:	4803      	ldr	r0, [pc, #12]	; (17780 <net_buf_simple_reserve+0x40>)
   17774:	f005 fc72 	bl	1d05c <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17778:	68a3      	ldr	r3, [r4, #8]
   1777a:	442b      	add	r3, r5
   1777c:	6023      	str	r3, [r4, #0]
}
   1777e:	bd38      	pop	{r3, r4, r5, pc}
   17780:	00025c86 	.word	0x00025c86
   17784:	00022f17 	.word	0x00022f17

00017788 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17788:	b538      	push	{r3, r4, r5, lr}
   1778a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1778c:	4605      	mov	r5, r0
   1778e:	b950      	cbnz	r0, 177a6 <net_buf_put+0x1e>
   17790:	4912      	ldr	r1, [pc, #72]	; (177dc <net_buf_put+0x54>)
   17792:	4813      	ldr	r0, [pc, #76]	; (177e0 <net_buf_put+0x58>)
   17794:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   17798:	f005 f9ba 	bl	1cb10 <printk>
   1779c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   177a0:	480e      	ldr	r0, [pc, #56]	; (177dc <net_buf_put+0x54>)
   177a2:	f005 fc5b 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   177a6:	b954      	cbnz	r4, 177be <net_buf_put+0x36>
   177a8:	490c      	ldr	r1, [pc, #48]	; (177dc <net_buf_put+0x54>)
   177aa:	480d      	ldr	r0, [pc, #52]	; (177e0 <net_buf_put+0x58>)
   177ac:	f240 12f9 	movw	r2, #505	; 0x1f9
   177b0:	f005 f9ae 	bl	1cb10 <printk>
   177b4:	f240 11f9 	movw	r1, #505	; 0x1f9
   177b8:	4808      	ldr	r0, [pc, #32]	; (177dc <net_buf_put+0x54>)
   177ba:	f005 fc4f 	bl	1d05c <assert_post_action>
{
   177be:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   177c0:	6811      	ldr	r1, [r2, #0]
   177c2:	b929      	cbnz	r1, 177d0 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   177c4:	4621      	mov	r1, r4
   177c6:	4628      	mov	r0, r5
}
   177c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   177cc:	f002 bf20 	b.w	1a610 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   177d0:	7953      	ldrb	r3, [r2, #5]
   177d2:	f043 0301 	orr.w	r3, r3, #1
   177d6:	7153      	strb	r3, [r2, #5]
   177d8:	460a      	mov	r2, r1
   177da:	e7f1      	b.n	177c0 <net_buf_put+0x38>
   177dc:	00025c86 	.word	0x00025c86
   177e0:	00022f17 	.word	0x00022f17

000177e4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   177e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   177e8:	4605      	mov	r5, r0
   177ea:	b328      	cbz	r0, 17838 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   177ec:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   177ee:	f04f 082c 	mov.w	r8, #44	; 0x2c
   177f2:	4e1b      	ldr	r6, [pc, #108]	; (17860 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   177f4:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   177f6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   177f8:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   177fa:	3b01      	subs	r3, #1
   177fc:	b2db      	uxtb	r3, r3
   177fe:	7123      	strb	r3, [r4, #4]
   17800:	b9c3      	cbnz	r3, 17834 <net_buf_unref+0x50>
		if (buf->__buf) {
   17802:	6921      	ldr	r1, [r4, #16]
   17804:	b159      	cbz	r1, 1781e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   17806:	7963      	ldrb	r3, [r4, #5]
   17808:	079b      	lsls	r3, r3, #30
   1780a:	d407      	bmi.n	1781c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1780c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1780e:	4620      	mov	r0, r4
   17810:	fb08 6303 	mla	r3, r8, r3, r6
   17814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17816:	681b      	ldr	r3, [r3, #0]
   17818:	689b      	ldr	r3, [r3, #8]
   1781a:	4798      	blx	r3
			buf->__buf = NULL;
   1781c:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1781e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   17820:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   17822:	fb08 6300 	mla	r3, r8, r0, r6
   17826:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   17828:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1782a:	b193      	cbz	r3, 17852 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1782c:	4620      	mov	r0, r4
   1782e:	4798      	blx	r3
	while (buf) {
   17830:	2d00      	cmp	r5, #0
   17832:	d1df      	bne.n	177f4 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   17834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   17838:	490a      	ldr	r1, [pc, #40]	; (17864 <net_buf_unref+0x80>)
   1783a:	480b      	ldr	r0, [pc, #44]	; (17868 <net_buf_unref+0x84>)
   1783c:	f44f 7202 	mov.w	r2, #520	; 0x208
   17840:	f005 f966 	bl	1cb10 <printk>
}
   17844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   17848:	f44f 7102 	mov.w	r1, #520	; 0x208
   1784c:	4805      	ldr	r0, [pc, #20]	; (17864 <net_buf_unref+0x80>)
   1784e:	f005 bc05 	b.w	1d05c <assert_post_action>
	k_lifo_put(&pool->free, buf);
   17852:	4621      	mov	r1, r4
   17854:	fb00 6008 	mla	r0, r0, r8, r6
   17858:	f009 fe75 	bl	21546 <k_queue_prepend>
}
   1785c:	e7e8      	b.n	17830 <net_buf_unref+0x4c>
   1785e:	bf00      	nop
   17860:	20008598 	.word	0x20008598
   17864:	00025c86 	.word	0x00025c86
   17868:	00022f17 	.word	0x00022f17

0001786c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1786c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1786e:	4604      	mov	r4, r0
   17870:	b950      	cbnz	r0, 17888 <net_buf_ref+0x1c>
   17872:	4908      	ldr	r1, [pc, #32]	; (17894 <net_buf_ref+0x28>)
   17874:	4808      	ldr	r0, [pc, #32]	; (17898 <net_buf_ref+0x2c>)
   17876:	f240 2237 	movw	r2, #567	; 0x237
   1787a:	f005 f949 	bl	1cb10 <printk>
   1787e:	f240 2137 	movw	r1, #567	; 0x237
   17882:	4804      	ldr	r0, [pc, #16]	; (17894 <net_buf_ref+0x28>)
   17884:	f005 fbea 	bl	1d05c <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17888:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   1788a:	4620      	mov	r0, r4
	buf->ref++;
   1788c:	3301      	adds	r3, #1
   1788e:	7123      	strb	r3, [r4, #4]
}
   17890:	bd10      	pop	{r4, pc}
   17892:	bf00      	nop
   17894:	00025c86 	.word	0x00025c86
   17898:	00022f17 	.word	0x00022f17

0001789c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1789c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1789e:	4604      	mov	r4, r0
   178a0:	b950      	cbnz	r0, 178b8 <net_buf_frag_last+0x1c>
   178a2:	4908      	ldr	r1, [pc, #32]	; (178c4 <net_buf_frag_last+0x28>)
   178a4:	4808      	ldr	r0, [pc, #32]	; (178c8 <net_buf_frag_last+0x2c>)
   178a6:	f44f 721d 	mov.w	r2, #628	; 0x274
   178aa:	f005 f931 	bl	1cb10 <printk>
   178ae:	f44f 711d 	mov.w	r1, #628	; 0x274
   178b2:	4804      	ldr	r0, [pc, #16]	; (178c4 <net_buf_frag_last+0x28>)
   178b4:	f005 fbd2 	bl	1d05c <assert_post_action>

	while (buf->frags) {
   178b8:	4620      	mov	r0, r4
   178ba:	6824      	ldr	r4, [r4, #0]
   178bc:	2c00      	cmp	r4, #0
   178be:	d1fb      	bne.n	178b8 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   178c0:	bd10      	pop	{r4, pc}
   178c2:	bf00      	nop
   178c4:	00025c86 	.word	0x00025c86
   178c8:	00022f17 	.word	0x00022f17

000178cc <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   178cc:	b538      	push	{r3, r4, r5, lr}
   178ce:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   178d0:	4604      	mov	r4, r0
   178d2:	b950      	cbnz	r0, 178ea <net_buf_frag_insert+0x1e>
   178d4:	490f      	ldr	r1, [pc, #60]	; (17914 <net_buf_frag_insert+0x48>)
   178d6:	4810      	ldr	r0, [pc, #64]	; (17918 <net_buf_frag_insert+0x4c>)
   178d8:	f240 227f 	movw	r2, #639	; 0x27f
   178dc:	f005 f918 	bl	1cb10 <printk>
   178e0:	f240 217f 	movw	r1, #639	; 0x27f
   178e4:	480b      	ldr	r0, [pc, #44]	; (17914 <net_buf_frag_insert+0x48>)
   178e6:	f005 fbb9 	bl	1d05c <assert_post_action>
	__ASSERT_NO_MSG(frag);
   178ea:	b955      	cbnz	r5, 17902 <net_buf_frag_insert+0x36>
   178ec:	4909      	ldr	r1, [pc, #36]	; (17914 <net_buf_frag_insert+0x48>)
   178ee:	480a      	ldr	r0, [pc, #40]	; (17918 <net_buf_frag_insert+0x4c>)
   178f0:	f44f 7220 	mov.w	r2, #640	; 0x280
   178f4:	f005 f90c 	bl	1cb10 <printk>
   178f8:	f44f 7120 	mov.w	r1, #640	; 0x280
   178fc:	4805      	ldr	r0, [pc, #20]	; (17914 <net_buf_frag_insert+0x48>)
   178fe:	f005 fbad 	bl	1d05c <assert_post_action>

	if (parent->frags) {
   17902:	6823      	ldr	r3, [r4, #0]
   17904:	b123      	cbz	r3, 17910 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   17906:	4628      	mov	r0, r5
   17908:	f7ff ffc8 	bl	1789c <net_buf_frag_last>
   1790c:	6823      	ldr	r3, [r4, #0]
   1790e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   17910:	6025      	str	r5, [r4, #0]
}
   17912:	bd38      	pop	{r3, r4, r5, pc}
   17914:	00025c86 	.word	0x00025c86
   17918:	00022f17 	.word	0x00022f17

0001791c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1791c:	b538      	push	{r3, r4, r5, lr}
   1791e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   17920:	460d      	mov	r5, r1
   17922:	b951      	cbnz	r1, 1793a <net_buf_frag_add+0x1e>
   17924:	490c      	ldr	r1, [pc, #48]	; (17958 <net_buf_frag_add+0x3c>)
   17926:	480d      	ldr	r0, [pc, #52]	; (1795c <net_buf_frag_add+0x40>)
   17928:	f240 228b 	movw	r2, #651	; 0x28b
   1792c:	f005 f8f0 	bl	1cb10 <printk>
   17930:	f240 218b 	movw	r1, #651	; 0x28b
   17934:	4808      	ldr	r0, [pc, #32]	; (17958 <net_buf_frag_add+0x3c>)
   17936:	f005 fb91 	bl	1d05c <assert_post_action>

	if (!head) {
   1793a:	b924      	cbnz	r4, 17946 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1793c:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1793e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   17942:	f7ff bf93 	b.w	1786c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   17946:	4620      	mov	r0, r4
   17948:	f7ff ffa8 	bl	1789c <net_buf_frag_last>
   1794c:	4629      	mov	r1, r5
   1794e:	f7ff ffbd 	bl	178cc <net_buf_frag_insert>
}
   17952:	4620      	mov	r0, r4
   17954:	bd38      	pop	{r3, r4, r5, pc}
   17956:	bf00      	nop
   17958:	00025c86 	.word	0x00025c86
   1795c:	00022f17 	.word	0x00022f17

00017960 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   17960:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17962:	6882      	ldr	r2, [r0, #8]
   17964:	6803      	ldr	r3, [r0, #0]
{
   17966:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   17968:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1796a:	4299      	cmp	r1, r3
{
   1796c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1796e:	d90a      	bls.n	17986 <net_buf_simple_push+0x26>
   17970:	4908      	ldr	r1, [pc, #32]	; (17994 <net_buf_simple_push+0x34>)
   17972:	4809      	ldr	r0, [pc, #36]	; (17998 <net_buf_simple_push+0x38>)
   17974:	f240 4204 	movw	r2, #1028	; 0x404
   17978:	f005 f8ca 	bl	1cb10 <printk>
   1797c:	f240 4104 	movw	r1, #1028	; 0x404
   17980:	4804      	ldr	r0, [pc, #16]	; (17994 <net_buf_simple_push+0x34>)
   17982:	f005 fb6b 	bl	1d05c <assert_post_action>
	buf->data -= len;
   17986:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   17988:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1798a:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1798c:	440d      	add	r5, r1
	buf->data -= len;
   1798e:	6020      	str	r0, [r4, #0]
	buf->len += len;
   17990:	80a5      	strh	r5, [r4, #4]
}
   17992:	bd38      	pop	{r3, r4, r5, pc}
   17994:	00025c86 	.word	0x00025c86
   17998:	00022f17 	.word	0x00022f17

0001799c <net_buf_simple_pull>:
{
   1799c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1799e:	8883      	ldrh	r3, [r0, #4]
{
   179a0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   179a2:	428b      	cmp	r3, r1
{
   179a4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   179a6:	d20a      	bcs.n	179be <net_buf_simple_pull+0x22>
   179a8:	4908      	ldr	r1, [pc, #32]	; (179cc <net_buf_simple_pull+0x30>)
   179aa:	4809      	ldr	r0, [pc, #36]	; (179d0 <net_buf_simple_pull+0x34>)
   179ac:	f240 4264 	movw	r2, #1124	; 0x464
   179b0:	f005 f8ae 	bl	1cb10 <printk>
   179b4:	f240 4164 	movw	r1, #1124	; 0x464
   179b8:	4804      	ldr	r0, [pc, #16]	; (179cc <net_buf_simple_pull+0x30>)
   179ba:	f005 fb4f 	bl	1d05c <assert_post_action>
	buf->len -= len;
   179be:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   179c0:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   179c2:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   179c4:	4428      	add	r0, r5
	buf->len -= len;
   179c6:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   179c8:	6020      	str	r0, [r4, #0]
}
   179ca:	bd38      	pop	{r3, r4, r5, pc}
   179cc:	00025c86 	.word	0x00025c86
   179d0:	00022f17 	.word	0x00022f17

000179d4 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   179d4:	8883      	ldrh	r3, [r0, #4]
{
   179d6:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   179d8:	428b      	cmp	r3, r1
{
   179da:	4604      	mov	r4, r0
   179dc:	460d      	mov	r5, r1
	void *data = buf->data;
   179de:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   179e0:	d20a      	bcs.n	179f8 <net_buf_simple_pull_mem+0x24>
   179e2:	4909      	ldr	r1, [pc, #36]	; (17a08 <net_buf_simple_pull_mem+0x34>)
   179e4:	4809      	ldr	r0, [pc, #36]	; (17a0c <net_buf_simple_pull_mem+0x38>)
   179e6:	f44f 628e 	mov.w	r2, #1136	; 0x470
   179ea:	f005 f891 	bl	1cb10 <printk>
   179ee:	f44f 618e 	mov.w	r1, #1136	; 0x470
   179f2:	4805      	ldr	r0, [pc, #20]	; (17a08 <net_buf_simple_pull_mem+0x34>)
   179f4:	f005 fb32 	bl	1d05c <assert_post_action>
	buf->len -= len;
   179f8:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   179fa:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   179fc:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   179fe:	4429      	add	r1, r5
}
   17a00:	4630      	mov	r0, r6
	buf->len -= len;
   17a02:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   17a04:	6021      	str	r1, [r4, #0]
}
   17a06:	bd70      	pop	{r4, r5, r6, pc}
   17a08:	00025c86 	.word	0x00025c86
   17a0c:	00022f17 	.word	0x00022f17

00017a10 <net_buf_simple_add>:
{
   17a10:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   17a12:	6803      	ldr	r3, [r0, #0]
   17a14:	8886      	ldrh	r6, [r0, #4]
   17a16:	4604      	mov	r4, r0
   17a18:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   17a1a:	f008 feb9 	bl	20790 <net_buf_simple_tailroom>
   17a1e:	4288      	cmp	r0, r1
{
   17a20:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   17a22:	d20a      	bcs.n	17a3a <net_buf_simple_add+0x2a>
   17a24:	4907      	ldr	r1, [pc, #28]	; (17a44 <net_buf_simple_add+0x34>)
   17a26:	4808      	ldr	r0, [pc, #32]	; (17a48 <net_buf_simple_add+0x38>)
   17a28:	f240 3215 	movw	r2, #789	; 0x315
   17a2c:	f005 f870 	bl	1cb10 <printk>
   17a30:	f240 3115 	movw	r1, #789	; 0x315
   17a34:	4803      	ldr	r0, [pc, #12]	; (17a44 <net_buf_simple_add+0x34>)
   17a36:	f005 fb11 	bl	1d05c <assert_post_action>
	buf->len += len;
   17a3a:	88a1      	ldrh	r1, [r4, #4]
}
   17a3c:	4630      	mov	r0, r6
	buf->len += len;
   17a3e:	440d      	add	r5, r1
   17a40:	80a5      	strh	r5, [r4, #4]
}
   17a42:	bd70      	pop	{r4, r5, r6, pc}
   17a44:	00025c86 	.word	0x00025c86
   17a48:	00022f17 	.word	0x00022f17

00017a4c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   17a4c:	b570      	push	{r4, r5, r6, lr}
   17a4e:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   17a50:	460c      	mov	r4, r1
	return port->data;
   17a52:	68c5      	ldr	r5, [r0, #12]
   17a54:	b941      	cbnz	r1, 17a68 <gpio_nrfx_manage_callback+0x1c>
   17a56:	491e      	ldr	r1, [pc, #120]	; (17ad0 <gpio_nrfx_manage_callback+0x84>)
   17a58:	481e      	ldr	r0, [pc, #120]	; (17ad4 <gpio_nrfx_manage_callback+0x88>)
   17a5a:	2224      	movs	r2, #36	; 0x24
   17a5c:	f005 f858 	bl	1cb10 <printk>
   17a60:	2124      	movs	r1, #36	; 0x24
   17a62:	481b      	ldr	r0, [pc, #108]	; (17ad0 <gpio_nrfx_manage_callback+0x84>)
   17a64:	f005 fafa 	bl	1d05c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   17a68:	6863      	ldr	r3, [r4, #4]
   17a6a:	b943      	cbnz	r3, 17a7e <gpio_nrfx_manage_callback+0x32>
   17a6c:	4918      	ldr	r1, [pc, #96]	; (17ad0 <gpio_nrfx_manage_callback+0x84>)
   17a6e:	4819      	ldr	r0, [pc, #100]	; (17ad4 <gpio_nrfx_manage_callback+0x88>)
   17a70:	2225      	movs	r2, #37	; 0x25
   17a72:	f005 f84d 	bl	1cb10 <printk>
   17a76:	2125      	movs	r1, #37	; 0x25
   17a78:	4815      	ldr	r0, [pc, #84]	; (17ad0 <gpio_nrfx_manage_callback+0x84>)
   17a7a:	f005 faef 	bl	1d05c <assert_post_action>
	return list->head;
   17a7e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   17a80:	b15b      	cbz	r3, 17a9a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17a82:	2200      	movs	r2, #0
   17a84:	429c      	cmp	r4, r3
   17a86:	d112      	bne.n	17aae <gpio_nrfx_manage_callback+0x62>
	return node->next;
   17a88:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   17a8a:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   17a8c:	b952      	cbnz	r2, 17aa4 <gpio_nrfx_manage_callback+0x58>
   17a8e:	42a1      	cmp	r1, r4
	list->head = node;
   17a90:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   17a92:	d100      	bne.n	17a96 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   17a94:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   17a96:	2300      	movs	r3, #0
   17a98:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   17a9a:	b96e      	cbnz	r6, 17ab8 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   17a9c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   17a9e:	bd70      	pop	{r4, r5, r6, pc}
   17aa0:	460b      	mov	r3, r1
   17aa2:	e7ef      	b.n	17a84 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   17aa4:	42a1      	cmp	r1, r4
	parent->next = child;
   17aa6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17aa8:	bf08      	it	eq
   17aaa:	60aa      	streq	r2, [r5, #8]
}
   17aac:	e7f3      	b.n	17a96 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   17aae:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17ab0:	461a      	mov	r2, r3
   17ab2:	2900      	cmp	r1, #0
   17ab4:	d1f4      	bne.n	17aa0 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   17ab6:	b13e      	cbz	r6, 17ac8 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   17ab8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17aba:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   17abc:	6023      	str	r3, [r4, #0]
	list->head = node;
   17abe:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17ac0:	2800      	cmp	r0, #0
   17ac2:	d1eb      	bne.n	17a9c <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   17ac4:	60ac      	str	r4, [r5, #8]
}
   17ac6:	e7ea      	b.n	17a9e <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   17ac8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17acc:	e7e7      	b.n	17a9e <gpio_nrfx_manage_callback+0x52>
   17ace:	bf00      	nop
   17ad0:	00025cb2 	.word	0x00025cb2
   17ad4:	00022f17 	.word	0x00022f17

00017ad8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17ad8:	6802      	ldr	r2, [r0, #0]
{
   17ada:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   17adc:	0953      	lsrs	r3, r2, #5
{
   17ade:	4604      	mov	r4, r0
    switch (port)
   17ae0:	d029      	beq.n	17b36 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   17ae2:	2b01      	cmp	r3, #1
   17ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17ae8:	bf18      	it	ne
   17aea:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   17aec:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   17af0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17af2:	07db      	lsls	r3, r3, #31
   17af4:	d40a      	bmi.n	17b0c <nrf_gpio_pin_port_decode+0x34>
   17af6:	4912      	ldr	r1, [pc, #72]	; (17b40 <nrf_gpio_pin_port_decode+0x68>)
   17af8:	4812      	ldr	r0, [pc, #72]	; (17b44 <nrf_gpio_pin_port_decode+0x6c>)
   17afa:	f240 221a 	movw	r2, #538	; 0x21a
   17afe:	f005 f807 	bl	1cb10 <printk>
   17b02:	f240 211a 	movw	r1, #538	; 0x21a
   17b06:	480e      	ldr	r0, [pc, #56]	; (17b40 <nrf_gpio_pin_port_decode+0x68>)
   17b08:	f005 faa8 	bl	1d05c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   17b0c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   17b0e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17b12:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   17b14:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17b16:	d00c      	beq.n	17b32 <nrf_gpio_pin_port_decode+0x5a>
   17b18:	2b01      	cmp	r3, #1
   17b1a:	d00f      	beq.n	17b3c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   17b1c:	4908      	ldr	r1, [pc, #32]	; (17b40 <nrf_gpio_pin_port_decode+0x68>)
   17b1e:	4809      	ldr	r0, [pc, #36]	; (17b44 <nrf_gpio_pin_port_decode+0x6c>)
   17b20:	f240 221f 	movw	r2, #543	; 0x21f
   17b24:	f004 fff4 	bl	1cb10 <printk>
   17b28:	f240 211f 	movw	r1, #543	; 0x21f
   17b2c:	4804      	ldr	r0, [pc, #16]	; (17b40 <nrf_gpio_pin_port_decode+0x68>)
   17b2e:	f005 fa95 	bl	1d05c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17b32:	4805      	ldr	r0, [pc, #20]	; (17b48 <nrf_gpio_pin_port_decode+0x70>)
}
   17b34:	bd10      	pop	{r4, pc}
    switch (port)
   17b36:	f04f 33ff 	mov.w	r3, #4294967295
   17b3a:	e7d7      	b.n	17aec <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   17b3c:	4803      	ldr	r0, [pc, #12]	; (17b4c <nrf_gpio_pin_port_decode+0x74>)
   17b3e:	e7f9      	b.n	17b34 <nrf_gpio_pin_port_decode+0x5c>
   17b40:	00025cdf 	.word	0x00025cdf
   17b44:	00022f17 	.word	0x00022f17
   17b48:	40842500 	.word	0x40842500
   17b4c:	40842800 	.word	0x40842800

00017b50 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17b50:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   17b52:	4b09      	ldr	r3, [pc, #36]	; (17b78 <gpio_nrfx_init+0x28>)
   17b54:	781a      	ldrb	r2, [r3, #0]
   17b56:	b96a      	cbnz	r2, 17b74 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   17b58:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17b5a:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   17b5c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17b5e:	2105      	movs	r1, #5
   17b60:	f7f5 ff3c 	bl	d9dc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   17b64:	202f      	movs	r0, #47	; 0x2f
   17b66:	f7f5 ff1b 	bl	d9a0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   17b6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17b6e:	4b03      	ldr	r3, [pc, #12]	; (17b7c <gpio_nrfx_init+0x2c>)
   17b70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   17b74:	2000      	movs	r0, #0
   17b76:	bd08      	pop	{r3, pc}
   17b78:	2000b7ba 	.word	0x2000b7ba
   17b7c:	4002f000 	.word	0x4002f000

00017b80 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   17b80:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   17b84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17b88:	4680      	mov	r8, r0
   17b8a:	460e      	mov	r6, r1
   17b8c:	4617      	mov	r7, r2
   17b8e:	4699      	mov	r9, r3
	return port->data;
   17b90:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   17b92:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   17b96:	f040 80ab 	bne.w	17cf0 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17b9a:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17b9c:	a801      	add	r0, sp, #4
   17b9e:	7a1b      	ldrb	r3, [r3, #8]
   17ba0:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   17ba4:	9301      	str	r3, [sp, #4]
   17ba6:	f7ff ff97 	bl	17ad8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17baa:	9b01      	ldr	r3, [sp, #4]
   17bac:	3380      	adds	r3, #128	; 0x80
   17bae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   17bb2:	07d8      	lsls	r0, r3, #31
   17bb4:	f100 80bb 	bmi.w	17d2e <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17bb8:	2101      	movs	r1, #1
   17bba:	68e3      	ldr	r3, [r4, #12]
   17bbc:	40b1      	lsls	r1, r6
   17bbe:	4319      	orrs	r1, r3
   17bc0:	60e1      	str	r1, [r4, #12]
   17bc2:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17bc4:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   17bc6:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17bc8:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   17bca:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   17bce:	bf0c      	ite	eq
   17bd0:	430b      	orreq	r3, r1
   17bd2:	438b      	bicne	r3, r1
   17bd4:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   17bd6:	69a3      	ldr	r3, [r4, #24]
   17bd8:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   17bdc:	bf0c      	ite	eq
   17bde:	430b      	orreq	r3, r1
   17be0:	438b      	bicne	r3, r1
   17be2:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17be4:	6923      	ldr	r3, [r4, #16]
   17be6:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   17bea:	bf0c      	ite	eq
   17bec:	4319      	orreq	r1, r3
   17bee:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17bf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17bf6:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17bf8:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   17bfa:	4a4e      	ldr	r2, [pc, #312]	; (17d34 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   17bfc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   17c00:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   17c04:	f8d8 700c 	ldr.w	r7, [r8, #12]
   17c08:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17c0a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   17c0e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   17c12:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   17c16:	428d      	cmp	r5, r1
   17c18:	d175      	bne.n	17d06 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   17c1a:	fa23 f100 	lsr.w	r1, r3, r0
   17c1e:	07c9      	lsls	r1, r1, #31
   17c20:	d571      	bpl.n	17d06 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   17c22:	0083      	lsls	r3, r0, #2
   17c24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17c28:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17c2c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   17c30:	f021 0101 	bic.w	r1, r1, #1
   17c34:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   17c38:	2301      	movs	r3, #1
   17c3a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   17c3c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   17c40:	b2c0      	uxtb	r0, r0
   17c42:	f001 fa8b 	bl	1915c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   17c46:	4628      	mov	r0, r5
   17c48:	2100      	movs	r1, #0
   17c4a:	f008 fde5 	bl	20818 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   17c4e:	68f8      	ldr	r0, [r7, #12]
   17c50:	40f0      	lsrs	r0, r6
   17c52:	f010 0001 	ands.w	r0, r0, #1
   17c56:	d048      	beq.n	17cea <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   17c58:	6978      	ldr	r0, [r7, #20]
   17c5a:	40f0      	lsrs	r0, r6
   17c5c:	f010 0401 	ands.w	r4, r0, #1
   17c60:	d059      	beq.n	17d16 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   17c62:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17c64:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   17c66:	40f3      	lsrs	r3, r6
   17c68:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17c6a:	bf57      	itett	pl
   17c6c:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   17c6e:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17c70:	fa21 f606 	lsrpl.w	r6, r1, r6
   17c74:	f006 0601 	andpl.w	r6, r6, #1
   17c78:	bf5c      	itt	pl
   17c7a:	f1c6 0602 	rsbpl	r6, r6, #2
   17c7e:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17c80:	f001 fa8c 	bl	1919c <nrfx_gpiote_channel_alloc>
   17c84:	4b2c      	ldr	r3, [pc, #176]	; (17d38 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   17c86:	4298      	cmp	r0, r3
   17c88:	d142      	bne.n	17d10 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17c8a:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   17c8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17c90:	022d      	lsls	r5, r5, #8
   17c92:	008b      	lsls	r3, r1, #2
   17c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17c98:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17c9c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17ca0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17ca4:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   17ca8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   17cac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17cb0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17cb4:	4315      	orrs	r5, r2
   17cb6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   17cba:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   17cbe:	4b1f      	ldr	r3, [pc, #124]	; (17d3c <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   17cc0:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17cc2:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   17cc4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   17cc8:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17cca:	008b      	lsls	r3, r1, #2
   17ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17cd0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17cd4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17cd8:	f042 0201 	orr.w	r2, r2, #1
   17cdc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   17ce0:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   17ce2:	4a14      	ldr	r2, [pc, #80]	; (17d34 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   17ce4:	408b      	lsls	r3, r1
   17ce6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17cea:	b003      	add	sp, #12
   17cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17cf0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   17cf4:	f47f af60 	bne.w	17bb8 <gpio_nrfx_pin_interrupt_configure+0x38>
   17cf8:	2101      	movs	r1, #1
   17cfa:	fa01 f306 	lsl.w	r3, r1, r6
   17cfe:	68e1      	ldr	r1, [r4, #12]
   17d00:	ea21 0103 	bic.w	r1, r1, r3
   17d04:	e75c      	b.n	17bc0 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17d06:	3001      	adds	r0, #1
   17d08:	2808      	cmp	r0, #8
   17d0a:	f47f af7e 	bne.w	17c0a <gpio_nrfx_pin_interrupt_configure+0x8a>
   17d0e:	e79a      	b.n	17c46 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   17d10:	f06f 0012 	mvn.w	r0, #18
   17d14:	e7e9      	b.n	17cea <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17d16:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17d18:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17d1a:	40f1      	lsrs	r1, r6
   17d1c:	f001 0101 	and.w	r1, r1, #1
   17d20:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17d24:	b2c9      	uxtb	r1, r1
   17d26:	f008 fd77 	bl	20818 <nrf_gpio_cfg_sense_set>
	int res = 0;
   17d2a:	4620      	mov	r0, r4
   17d2c:	e7dd      	b.n	17cea <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   17d2e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17d32:	e7da      	b.n	17cea <gpio_nrfx_pin_interrupt_configure+0x16a>
   17d34:	4002f000 	.word	0x4002f000
   17d38:	0bad0000 	.word	0x0bad0000
   17d3c:	4002f100 	.word	0x4002f100

00017d40 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17d40:	4b2e      	ldr	r3, [pc, #184]	; (17dfc <gpio_nrfx_config+0xbc>)
{
   17d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17d44:	4c2e      	ldr	r4, [pc, #184]	; (17e00 <gpio_nrfx_config+0xc0>)
   17d46:	4013      	ands	r3, r2
   17d48:	42a3      	cmp	r3, r4
	return port->config;
   17d4a:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17d4c:	d044      	beq.n	17dd8 <gpio_nrfx_config+0x98>
   17d4e:	d80e      	bhi.n	17d6e <gpio_nrfx_config+0x2e>
   17d50:	2b06      	cmp	r3, #6
   17d52:	d043      	beq.n	17ddc <gpio_nrfx_config+0x9c>
   17d54:	d806      	bhi.n	17d64 <gpio_nrfx_config+0x24>
   17d56:	2b00      	cmp	r3, #0
   17d58:	d040      	beq.n	17ddc <gpio_nrfx_config+0x9c>
   17d5a:	2b02      	cmp	r3, #2
   17d5c:	d040      	beq.n	17de0 <gpio_nrfx_config+0xa0>
   17d5e:	f06f 0015 	mvn.w	r0, #21
   17d62:	e037      	b.n	17dd4 <gpio_nrfx_config+0x94>
   17d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17d68:	d1f9      	bne.n	17d5e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   17d6a:	2401      	movs	r4, #1
   17d6c:	e009      	b.n	17d82 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17d6e:	4c25      	ldr	r4, [pc, #148]	; (17e04 <gpio_nrfx_config+0xc4>)
   17d70:	42a3      	cmp	r3, r4
   17d72:	d037      	beq.n	17de4 <gpio_nrfx_config+0xa4>
   17d74:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   17d78:	d036      	beq.n	17de8 <gpio_nrfx_config+0xa8>
   17d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17d7e:	d1ee      	bne.n	17d5e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   17d80:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   17d82:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17d84:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   17d88:	bf4c      	ite	mi
   17d8a:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   17d8c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17d90:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17d94:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   17d96:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17d9a:	d507      	bpl.n	17dac <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17d9c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17d9e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17da2:	d523      	bpl.n	17dec <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   17da4:	2301      	movs	r3, #1
   17da6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   17da8:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   17dac:	7a03      	ldrb	r3, [r0, #8]
   17dae:	f001 011f 	and.w	r1, r1, #31
   17db2:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17db6:	a801      	add	r0, sp, #4
   17db8:	9101      	str	r1, [sp, #4]
   17dba:	f7ff fe8d 	bl	17ad8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17dbe:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   17dc0:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   17dc4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   17dc8:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17dcc:	3280      	adds	r2, #128	; 0x80
   17dce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   17dd2:	2000      	movs	r0, #0
}
   17dd4:	b003      	add	sp, #12
   17dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   17dd8:	2407      	movs	r4, #7
   17dda:	e7d2      	b.n	17d82 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17ddc:	461c      	mov	r4, r3
   17dde:	e7d0      	b.n	17d82 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   17de0:	2404      	movs	r4, #4
   17de2:	e7ce      	b.n	17d82 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   17de4:	2405      	movs	r4, #5
   17de6:	e7cc      	b.n	17d82 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   17de8:	2403      	movs	r4, #3
   17dea:	e7ca      	b.n	17d82 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   17dec:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   17dee:	bf42      	ittt	mi
   17df0:	2301      	movmi	r3, #1
   17df2:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   17df4:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   17df8:	e7d8      	b.n	17dac <gpio_nrfx_config+0x6c>
   17dfa:	bf00      	nop
   17dfc:	00f00006 	.word	0x00f00006
   17e00:	00100006 	.word	0x00100006
   17e04:	00400002 	.word	0x00400002

00017e08 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   17e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17e0c:	460f      	mov	r7, r1
   17e0e:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17e10:	4604      	mov	r4, r0
   17e12:	b1e0      	cbz	r0, 17e4e <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   17e14:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   17e16:	f8df 803c 	ldr.w	r8, [pc, #60]	; 17e54 <gpio_fire_callbacks.isra.0+0x4c>
   17e1a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 17e58 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   17e1e:	68a3      	ldr	r3, [r4, #8]
   17e20:	421e      	tst	r6, r3
   17e22:	d010      	beq.n	17e46 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   17e24:	6863      	ldr	r3, [r4, #4]
   17e26:	b943      	cbnz	r3, 17e3a <gpio_fire_callbacks.isra.0+0x32>
   17e28:	4641      	mov	r1, r8
   17e2a:	4648      	mov	r0, r9
   17e2c:	2245      	movs	r2, #69	; 0x45
   17e2e:	f004 fe6f 	bl	1cb10 <printk>
   17e32:	2145      	movs	r1, #69	; 0x45
   17e34:	4640      	mov	r0, r8
   17e36:	f005 f911 	bl	1d05c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   17e3a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   17e3e:	4621      	mov	r1, r4
   17e40:	4638      	mov	r0, r7
   17e42:	4032      	ands	r2, r6
   17e44:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17e46:	b115      	cbz	r5, 17e4e <gpio_fire_callbacks.isra.0+0x46>
   17e48:	462c      	mov	r4, r5
   17e4a:	682d      	ldr	r5, [r5, #0]
   17e4c:	e7e7      	b.n	17e1e <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   17e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17e52:	bf00      	nop
   17e54:	00025cb2 	.word	0x00025cb2
   17e58:	00022f17 	.word	0x00022f17

00017e5c <gpiote_event_handler>:
{
   17e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17e5e:	2600      	movs	r6, #0
   17e60:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17e64:	4d28      	ldr	r5, [pc, #160]	; (17f08 <gpiote_event_handler+0xac>)
   17e66:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   17e6a:	b15c      	cbz	r4, 17e84 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   17e6c:	4827      	ldr	r0, [pc, #156]	; (17f0c <gpiote_event_handler+0xb0>)
   17e6e:	f008 fd0c 	bl	2088a <check_level_trigger_pins>
		fired_triggers[0] =
   17e72:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   17e74:	4826      	ldr	r0, [pc, #152]	; (17f10 <gpiote_event_handler+0xb4>)
   17e76:	f008 fd08 	bl	2088a <check_level_trigger_pins>
		fired_triggers[1] =
   17e7a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17e7c:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   17e80:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   17e84:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17e86:	2601      	movs	r6, #1
   17e88:	4694      	mov	ip, r2
{
   17e8a:	4922      	ldr	r1, [pc, #136]	; (17f14 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   17e8c:	4d1e      	ldr	r5, [pc, #120]	; (17f08 <gpiote_event_handler+0xac>)
   17e8e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17e92:	fa06 f002 	lsl.w	r0, r6, r2
   17e96:	4218      	tst	r0, r3
   17e98:	d016      	beq.n	17ec8 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17e9a:	680b      	ldr	r3, [r1, #0]
   17e9c:	b1a3      	cbz	r3, 17ec8 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17e9e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   17ea2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   17ea6:	af02      	add	r7, sp, #8
   17ea8:	f3c3 3040 	ubfx	r0, r3, #13, #1
   17eac:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   17eb0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   17eb4:	f3c3 2304 	ubfx	r3, r3, #8, #5
   17eb8:	fa06 f303 	lsl.w	r3, r6, r3
   17ebc:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17ebe:	f8c1 c000 	str.w	ip, [r1]
   17ec2:	f840 3c08 	str.w	r3, [r0, #-8]
   17ec6:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17ec8:	3201      	adds	r2, #1
   17eca:	2a08      	cmp	r2, #8
   17ecc:	f101 0104 	add.w	r1, r1, #4
   17ed0:	d1dd      	bne.n	17e8e <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   17ed2:	9a00      	ldr	r2, [sp, #0]
   17ed4:	b122      	cbz	r2, 17ee0 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   17ed6:	4b10      	ldr	r3, [pc, #64]	; (17f18 <gpiote_event_handler+0xbc>)
   17ed8:	490c      	ldr	r1, [pc, #48]	; (17f0c <gpiote_event_handler+0xb0>)
   17eda:	6858      	ldr	r0, [r3, #4]
   17edc:	f7ff ff94 	bl	17e08 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   17ee0:	9a01      	ldr	r2, [sp, #4]
   17ee2:	b122      	cbz	r2, 17eee <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   17ee4:	4b0d      	ldr	r3, [pc, #52]	; (17f1c <gpiote_event_handler+0xc0>)
   17ee6:	490a      	ldr	r1, [pc, #40]	; (17f10 <gpiote_event_handler+0xb4>)
   17ee8:	6858      	ldr	r0, [r3, #4]
   17eea:	f7ff ff8d 	bl	17e08 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   17eee:	b144      	cbz	r4, 17f02 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   17ef0:	4806      	ldr	r0, [pc, #24]	; (17f0c <gpiote_event_handler+0xb0>)
   17ef2:	f008 fca4 	bl	2083e <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   17ef6:	4806      	ldr	r0, [pc, #24]	; (17f10 <gpiote_event_handler+0xb4>)
}
   17ef8:	b003      	add	sp, #12
   17efa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   17efe:	f008 bc9e 	b.w	2083e <cfg_level_pins>
}
   17f02:	b003      	add	sp, #12
   17f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f06:	bf00      	nop
   17f08:	4002f000 	.word	0x4002f000
   17f0c:	20008488 	.word	0x20008488
   17f10:	20008498 	.word	0x20008498
   17f14:	4002f100 	.word	0x4002f100
   17f18:	20009da4 	.word	0x20009da4
   17f1c:	20009dc0 	.word	0x20009dc0

00017f20 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   17f20:	4b02      	ldr	r3, [pc, #8]	; (17f2c <vipm_nrf_1_register_callback+0xc>)
   17f22:	6059      	str	r1, [r3, #4]
   17f24:	645a      	str	r2, [r3, #68]	; 0x44
   17f26:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   17f2a:	4770      	bx	lr
   17f2c:	20009de4 	.word	0x20009de4

00017f30 <vipm_nrf_0_set_enabled>:
   17f30:	b508      	push	{r3, lr}
   17f32:	2145      	movs	r1, #69	; 0x45
   17f34:	4802      	ldr	r0, [pc, #8]	; (17f40 <vipm_nrf_0_set_enabled+0x10>)
   17f36:	f004 fdeb 	bl	1cb10 <printk>
   17f3a:	f06f 0015 	mvn.w	r0, #21
   17f3e:	bd08      	pop	{r3, pc}
   17f40:	00025d20 	.word	0x00025d20

00017f44 <vipm_nrf_0_register_callback>:
   17f44:	2157      	movs	r1, #87	; 0x57
   17f46:	4801      	ldr	r0, [pc, #4]	; (17f4c <vipm_nrf_0_register_callback+0x8>)
   17f48:	f004 bde2 	b.w	1cb10 <printk>
   17f4c:	00025d41 	.word	0x00025d41

00017f50 <vipm_nrf_1_send>:
   17f50:	b508      	push	{r3, lr}
   17f52:	2145      	movs	r1, #69	; 0x45
   17f54:	4802      	ldr	r0, [pc, #8]	; (17f60 <vipm_nrf_1_send+0x10>)
   17f56:	f004 fddb 	bl	1cb10 <printk>
   17f5a:	f06f 0015 	mvn.w	r0, #21
   17f5e:	bd08      	pop	{r3, pc}
   17f60:	00025d78 	.word	0x00025d78

00017f64 <vipm_nrf_init>:
{
   17f64:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   17f66:	4d0b      	ldr	r5, [pc, #44]	; (17f94 <vipm_nrf_init+0x30>)
   17f68:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   17f6c:	b97c      	cbnz	r4, 17f8e <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   17f6e:	4a0a      	ldr	r2, [pc, #40]	; (17f98 <vipm_nrf_init+0x34>)
   17f70:	490a      	ldr	r1, [pc, #40]	; (17f9c <vipm_nrf_init+0x38>)
   17f72:	4620      	mov	r0, r4
   17f74:	f001 f94a 	bl	1920c <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   17f78:	4622      	mov	r2, r4
   17f7a:	2101      	movs	r1, #1
   17f7c:	202a      	movs	r0, #42	; 0x2a
   17f7e:	f7f5 fd2d 	bl	d9dc <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   17f82:	4807      	ldr	r0, [pc, #28]	; (17fa0 <vipm_nrf_init+0x3c>)
   17f84:	f001 f968 	bl	19258 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   17f88:	2301      	movs	r3, #1
   17f8a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   17f8e:	2000      	movs	r0, #0
   17f90:	bd38      	pop	{r3, r4, r5, pc}
   17f92:	bf00      	nop
   17f94:	20009de4 	.word	0x20009de4
   17f98:	20009ddc 	.word	0x20009ddc
   17f9c:	00017fa5 	.word	0x00017fa5
   17fa0:	000225f8 	.word	0x000225f8

00017fa4 <vipm_dispatcher>:
{
   17fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17fa8:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   17faa:	4f17      	ldr	r7, [pc, #92]	; (18008 <vipm_dispatcher+0x64>)
   17fac:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1800c <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17fb0:	4e17      	ldr	r6, [pc, #92]	; (18010 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   17fb2:	b90d      	cbnz	r5, 17fb8 <vipm_dispatcher+0x14>
}
   17fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   17fb8:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   17fbc:	b30c      	cbz	r4, 18002 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   17fbe:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   17fc2:	2b0f      	cmp	r3, #15
   17fc4:	461c      	mov	r4, r3
   17fc6:	dd08      	ble.n	17fda <vipm_dispatcher+0x36>
   17fc8:	4639      	mov	r1, r7
   17fca:	4640      	mov	r0, r8
   17fcc:	2283      	movs	r2, #131	; 0x83
   17fce:	f004 fd9f 	bl	1cb10 <printk>
   17fd2:	2183      	movs	r1, #131	; 0x83
   17fd4:	4638      	mov	r0, r7
   17fd6:	f005 f841 	bl	1d05c <assert_post_action>
		event_mask &= ~BIT(event_idx);
   17fda:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17fdc:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   17fe0:	40a3      	lsls	r3, r4
   17fe2:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17fe6:	f1b9 0f00 	cmp.w	r9, #0
   17fea:	d0e2      	beq.n	17fb2 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   17fec:	2300      	movs	r3, #0
   17fee:	f104 0110 	add.w	r1, r4, #16
   17ff2:	3420      	adds	r4, #32
   17ff4:	461a      	mov	r2, r3
   17ff6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   17ffa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   17ffe:	47c8      	blx	r9
   18000:	e7d7      	b.n	17fb2 <vipm_dispatcher+0xe>
    return 32U;
   18002:	2420      	movs	r4, #32
   18004:	e7e0      	b.n	17fc8 <vipm_dispatcher+0x24>
   18006:	bf00      	nop
   18008:	00025d99 	.word	0x00025d99
   1800c:	00022f17 	.word	0x00022f17
   18010:	20009de4 	.word	0x20009de4

00018014 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   18014:	2a10      	cmp	r2, #16
   18016:	b508      	push	{r3, lr}
   18018:	d810      	bhi.n	1803c <vipm_nrf_0_send+0x28>
   1801a:	b11a      	cbz	r2, 18024 <vipm_nrf_0_send+0x10>
   1801c:	2157      	movs	r1, #87	; 0x57
   1801e:	4809      	ldr	r0, [pc, #36]	; (18044 <vipm_nrf_0_send+0x30>)
   18020:	f004 fd76 	bl	1cb10 <printk>
   18024:	9b02      	ldr	r3, [sp, #8]
   18026:	2b00      	cmp	r3, #0
   18028:	dd03      	ble.n	18032 <vipm_nrf_0_send+0x1e>
   1802a:	2157      	movs	r1, #87	; 0x57
   1802c:	4806      	ldr	r0, [pc, #24]	; (18048 <vipm_nrf_0_send+0x34>)
   1802e:	f004 fd6f 	bl	1cb10 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18032:	2201      	movs	r2, #1
   18034:	2000      	movs	r0, #0
   18036:	4b05      	ldr	r3, [pc, #20]	; (1804c <vipm_nrf_0_send+0x38>)
   18038:	601a      	str	r2, [r3, #0]
   1803a:	bd08      	pop	{r3, pc}
   1803c:	f06f 0015 	mvn.w	r0, #21
   18040:	e7fb      	b.n	1803a <vipm_nrf_0_send+0x26>
   18042:	bf00      	nop
   18044:	00025dc7 	.word	0x00025dc7
   18048:	00025e00 	.word	0x00025e00
   1804c:	4002a000 	.word	0x4002a000

00018050 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   18050:	4b02      	ldr	r3, [pc, #8]	; (1805c <flash_nrf_pages_layout+0xc>)
   18052:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   18054:	2301      	movs	r3, #1
   18056:	6013      	str	r3, [r2, #0]
}
   18058:	4770      	bx	lr
   1805a:	bf00      	nop
   1805c:	20009ea8 	.word	0x20009ea8

00018060 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   18060:	4800      	ldr	r0, [pc, #0]	; (18064 <flash_nrf_get_parameters+0x4>)
   18062:	4770      	bx	lr
   18064:	000226bc 	.word	0x000226bc

00018068 <flash_nrf_read>:
{
   18068:	b570      	push	{r4, r5, r6, lr}
   1806a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1806c:	4619      	mov	r1, r3
   1806e:	4628      	mov	r0, r5
{
   18070:	4616      	mov	r6, r2
   18072:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   18074:	f008 fc46 	bl	20904 <is_regular_addr_valid>
   18078:	b940      	cbnz	r0, 1808c <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1807a:	480d      	ldr	r0, [pc, #52]	; (180b0 <flash_nrf_read+0x48>)
   1807c:	4623      	mov	r3, r4
   1807e:	462a      	mov	r2, r5
   18080:	2145      	movs	r1, #69	; 0x45
   18082:	f004 fd45 	bl	1cb10 <printk>
   18086:	f06f 0015 	mvn.w	r0, #21
}
   1808a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1808c:	b16c      	cbz	r4, 180aa <flash_nrf_read+0x42>
	if (addr < PM_APP_ADDRESS) {
   1808e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return spm_request_read(data, addr, len);
   18092:	4622      	mov	r2, r4
   18094:	4629      	mov	r1, r5
   18096:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   18098:	da03      	bge.n	180a2 <flash_nrf_read+0x3a>
}
   1809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   1809e:	f005 bc38 	b.w	1d912 <spm_request_read>
	memcpy(data, (void *)addr, len);
   180a2:	f006 f9ed 	bl	1e480 <memcpy>
	return 0;
   180a6:	2000      	movs	r0, #0
   180a8:	e7ef      	b.n	1808a <flash_nrf_read+0x22>
		return 0;
   180aa:	4620      	mov	r0, r4
   180ac:	e7ed      	b.n	1808a <flash_nrf_read+0x22>
   180ae:	bf00      	nop
   180b0:	00025e43 	.word	0x00025e43

000180b4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   180b4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   180b6:	2201      	movs	r2, #1
   180b8:	4806      	ldr	r0, [pc, #24]	; (180d4 <nrf_flash_init+0x20>)
   180ba:	4611      	mov	r1, r2
   180bc:	f009 fa90 	bl	215e0 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   180c0:	f008 fdf2 	bl	20ca8 <nrfx_nvmc_flash_page_count_get>
   180c4:	4c04      	ldr	r4, [pc, #16]	; (180d8 <nrf_flash_init+0x24>)
   180c6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   180c8:	f008 fdeb 	bl	20ca2 <nrfx_nvmc_flash_page_size_get>
   180cc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   180ce:	2000      	movs	r0, #0
   180d0:	bd10      	pop	{r4, pc}
   180d2:	bf00      	nop
   180d4:	20009eb0 	.word	0x20009eb0
   180d8:	20009ea8 	.word	0x20009ea8

000180dc <flash_nrf_erase>:
{
   180dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180de:	460e      	mov	r6, r1
   180e0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   180e2:	f008 fdde 	bl	20ca2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   180e6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   180e8:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   180ea:	4630      	mov	r0, r6
   180ec:	f008 fc0a 	bl	20904 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   180f0:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   180f2:	b348      	cbz	r0, 18148 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   180f4:	fbb6 f3f5 	udiv	r3, r6, r5
   180f8:	fb05 6313 	mls	r3, r5, r3, r6
   180fc:	b923      	cbnz	r3, 18108 <flash_nrf_erase+0x2c>
   180fe:	fbb4 f0f5 	udiv	r0, r4, r5
   18102:	fb05 4010 	mls	r0, r5, r0, r4
   18106:	b140      	cbz	r0, 1811a <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   18108:	4623      	mov	r3, r4
   1810a:	4632      	mov	r2, r6
   1810c:	2145      	movs	r1, #69	; 0x45
   1810e:	4811      	ldr	r0, [pc, #68]	; (18154 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   18110:	f004 fcfe 	bl	1cb10 <printk>
		return -EINVAL;
   18114:	f06f 0015 	mvn.w	r0, #21
   18118:	e015      	b.n	18146 <flash_nrf_erase+0x6a>
		if (!n_pages) {
   1811a:	42a5      	cmp	r5, r4
   1811c:	d813      	bhi.n	18146 <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   1811e:	f04f 32ff 	mov.w	r2, #4294967295
   18122:	f04f 33ff 	mov.w	r3, #4294967295
   18126:	480c      	ldr	r0, [pc, #48]	; (18158 <flash_nrf_erase+0x7c>)
   18128:	f003 fb6e 	bl	1b808 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1812c:	f008 fdb9 	bl	20ca2 <nrfx_nvmc_flash_page_size_get>
   18130:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   18132:	4638      	mov	r0, r7
   18134:	f001 f94c 	bl	193d0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   18138:	1b64      	subs	r4, r4, r5
   1813a:	442f      	add	r7, r5
   1813c:	d1f9      	bne.n	18132 <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   1813e:	4806      	ldr	r0, [pc, #24]	; (18158 <flash_nrf_erase+0x7c>)
   18140:	f003 fb26 	bl	1b790 <z_impl_k_sem_give>
	return ret;
   18144:	4620      	mov	r0, r4
}
   18146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   18148:	4623      	mov	r3, r4
   1814a:	4632      	mov	r2, r6
   1814c:	2145      	movs	r1, #69	; 0x45
   1814e:	4803      	ldr	r0, [pc, #12]	; (1815c <flash_nrf_erase+0x80>)
   18150:	e7de      	b.n	18110 <flash_nrf_erase+0x34>
   18152:	bf00      	nop
   18154:	00025e65 	.word	0x00025e65
   18158:	20009eb0 	.word	0x20009eb0
   1815c:	00025e43 	.word	0x00025e43

00018160 <flash_nrf_write>:
{
   18160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18162:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   18164:	4619      	mov	r1, r3
   18166:	4630      	mov	r0, r6
{
   18168:	4617      	mov	r7, r2
   1816a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1816c:	f008 fbca 	bl	20904 <is_regular_addr_valid>
   18170:	b940      	cbnz	r0, 18184 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   18172:	4623      	mov	r3, r4
   18174:	4632      	mov	r2, r6
   18176:	2145      	movs	r1, #69	; 0x45
   18178:	4817      	ldr	r0, [pc, #92]	; (181d8 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1817a:	f004 fcc9 	bl	1cb10 <printk>
		return -EINVAL;
   1817e:	f06f 0015 	mvn.w	r0, #21
}
   18182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   18184:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   18188:	f015 0503 	ands.w	r5, r5, #3
   1818c:	d004      	beq.n	18198 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1818e:	4623      	mov	r3, r4
   18190:	4632      	mov	r2, r6
   18192:	2145      	movs	r1, #69	; 0x45
   18194:	4811      	ldr	r0, [pc, #68]	; (181dc <flash_nrf_write+0x7c>)
   18196:	e7f0      	b.n	1817a <flash_nrf_write+0x1a>
	if (!len) {
   18198:	b1dc      	cbz	r4, 181d2 <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   1819a:	f04f 32ff 	mov.w	r2, #4294967295
   1819e:	f04f 33ff 	mov.w	r3, #4294967295
   181a2:	480f      	ldr	r0, [pc, #60]	; (181e0 <flash_nrf_write+0x80>)
   181a4:	f003 fb30 	bl	1b808 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   181a8:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   181ac:	42ac      	cmp	r4, r5
   181ae:	eb05 0006 	add.w	r0, r5, r6
   181b2:	d109      	bne.n	181c8 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   181b4:	4a0b      	ldr	r2, [pc, #44]	; (181e4 <flash_nrf_write+0x84>)
   181b6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   181ba:	07db      	lsls	r3, r3, #31
   181bc:	d5fb      	bpl.n	181b6 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   181be:	4808      	ldr	r0, [pc, #32]	; (181e0 <flash_nrf_write+0x80>)
   181c0:	f003 fae6 	bl	1b790 <z_impl_k_sem_give>
	return ret;
   181c4:	2000      	movs	r0, #0
}
   181c6:	e7dc      	b.n	18182 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   181c8:	5979      	ldr	r1, [r7, r5]
   181ca:	f001 f931 	bl	19430 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   181ce:	3504      	adds	r5, #4
}
   181d0:	e7ec      	b.n	181ac <flash_nrf_write+0x4c>
		return 0;
   181d2:	4620      	mov	r0, r4
   181d4:	e7d5      	b.n	18182 <flash_nrf_write+0x22>
   181d6:	bf00      	nop
   181d8:	00025e43 	.word	0x00025e43
   181dc:	00025e89 	.word	0x00025e89
   181e0:	20009eb0 	.word	0x20009eb0
   181e4:	40039000 	.word	0x40039000

000181e8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   181e8:	6802      	ldr	r2, [r0, #0]
{
   181ea:	b510      	push	{r4, lr}
    switch (port)
   181ec:	0953      	lsrs	r3, r2, #5
{
   181ee:	4604      	mov	r4, r0
    switch (port)
   181f0:	d029      	beq.n	18246 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   181f2:	2b01      	cmp	r3, #1
   181f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   181f8:	bf18      	it	ne
   181fa:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   181fc:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   18200:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   18202:	07db      	lsls	r3, r3, #31
   18204:	d40a      	bmi.n	1821c <nrf_gpio_pin_port_decode+0x34>
   18206:	4912      	ldr	r1, [pc, #72]	; (18250 <nrf_gpio_pin_port_decode+0x68>)
   18208:	4812      	ldr	r0, [pc, #72]	; (18254 <nrf_gpio_pin_port_decode+0x6c>)
   1820a:	f240 221a 	movw	r2, #538	; 0x21a
   1820e:	f004 fc7f 	bl	1cb10 <printk>
   18212:	f240 211a 	movw	r1, #538	; 0x21a
   18216:	480e      	ldr	r0, [pc, #56]	; (18250 <nrf_gpio_pin_port_decode+0x68>)
   18218:	f004 ff20 	bl	1d05c <assert_post_action>
    uint32_t pin_number = *p_pin;
   1821c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1821e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18222:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   18224:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18226:	d00c      	beq.n	18242 <nrf_gpio_pin_port_decode+0x5a>
   18228:	2b01      	cmp	r3, #1
   1822a:	d00f      	beq.n	1824c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   1822c:	4908      	ldr	r1, [pc, #32]	; (18250 <nrf_gpio_pin_port_decode+0x68>)
   1822e:	4809      	ldr	r0, [pc, #36]	; (18254 <nrf_gpio_pin_port_decode+0x6c>)
   18230:	f240 221f 	movw	r2, #543	; 0x21f
   18234:	f004 fc6c 	bl	1cb10 <printk>
   18238:	f240 211f 	movw	r1, #543	; 0x21f
   1823c:	4804      	ldr	r0, [pc, #16]	; (18250 <nrf_gpio_pin_port_decode+0x68>)
   1823e:	f004 ff0d 	bl	1d05c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18242:	4805      	ldr	r0, [pc, #20]	; (18258 <nrf_gpio_pin_port_decode+0x70>)
}
   18244:	bd10      	pop	{r4, pc}
    switch (port)
   18246:	f04f 33ff 	mov.w	r3, #4294967295
   1824a:	e7d7      	b.n	181fc <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1824c:	4803      	ldr	r0, [pc, #12]	; (1825c <nrf_gpio_pin_port_decode+0x74>)
   1824e:	e7f9      	b.n	18244 <nrf_gpio_pin_port_decode+0x5c>
   18250:	00025cdf 	.word	0x00025cdf
   18254:	00022f17 	.word	0x00022f17
   18258:	40842500 	.word	0x40842500
   1825c:	40842800 	.word	0x40842800

00018260 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   18260:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   18262:	794b      	ldrb	r3, [r1, #5]
   18264:	2b01      	cmp	r3, #1
   18266:	d02b      	beq.n	182c0 <uarte_nrfx_configure+0x60>
   18268:	2b03      	cmp	r3, #3
   1826a:	d126      	bne.n	182ba <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1826c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1826e:	798b      	ldrb	r3, [r1, #6]
   18270:	2b03      	cmp	r3, #3
   18272:	d122      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   18274:	79cd      	ldrb	r5, [r1, #7]
   18276:	b125      	cbz	r5, 18282 <uarte_nrfx_configure+0x22>
   18278:	2d01      	cmp	r5, #1
   1827a:	d11e      	bne.n	182ba <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1827c:	6843      	ldr	r3, [r0, #4]
   1827e:	791b      	ldrb	r3, [r3, #4]
   18280:	b1db      	cbz	r3, 182ba <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   18282:	790a      	ldrb	r2, [r1, #4]
   18284:	2a01      	cmp	r2, #1
   18286:	d01d      	beq.n	182c4 <uarte_nrfx_configure+0x64>
   18288:	2a02      	cmp	r2, #2
   1828a:	d01f      	beq.n	182cc <uarte_nrfx_configure+0x6c>
   1828c:	b9aa      	cbnz	r2, 182ba <uarte_nrfx_configure+0x5a>
   1828e:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   18290:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   18292:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   18294:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   18298:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   1829a:	d06e      	beq.n	1837a <uarte_nrfx_configure+0x11a>
   1829c:	d833      	bhi.n	18306 <uarte_nrfx_configure+0xa6>
   1829e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   182a2:	d06d      	beq.n	18380 <uarte_nrfx_configure+0x120>
   182a4:	d81c      	bhi.n	182e0 <uarte_nrfx_configure+0x80>
   182a6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   182aa:	d06b      	beq.n	18384 <uarte_nrfx_configure+0x124>
   182ac:	d810      	bhi.n	182d0 <uarte_nrfx_configure+0x70>
   182ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   182b2:	d06a      	beq.n	1838a <uarte_nrfx_configure+0x12a>
   182b4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   182b8:	d06a      	beq.n	18390 <uarte_nrfx_configure+0x130>
   182ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
   182be:	e05b      	b.n	18378 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   182c0:	2700      	movs	r7, #0
   182c2:	e7d4      	b.n	1826e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   182c4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   182c8:	220e      	movs	r2, #14
   182ca:	e7e1      	b.n	18290 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   182cc:	2400      	movs	r4, #0
   182ce:	e7fb      	b.n	182c8 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   182d0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   182d4:	d05f      	beq.n	18396 <uarte_nrfx_configure+0x136>
   182d6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   182da:	d1ee      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   182dc:	4b38      	ldr	r3, [pc, #224]	; (183c0 <uarte_nrfx_configure+0x160>)
   182de:	e03e      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   182e0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   182e4:	d05a      	beq.n	1839c <uarte_nrfx_configure+0x13c>
   182e6:	d807      	bhi.n	182f8 <uarte_nrfx_configure+0x98>
   182e8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   182ec:	d058      	beq.n	183a0 <uarte_nrfx_configure+0x140>
   182ee:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   182f2:	d1e2      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   182f4:	4b33      	ldr	r3, [pc, #204]	; (183c4 <uarte_nrfx_configure+0x164>)
   182f6:	e032      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   182f8:	f647 2c12 	movw	ip, #31250	; 0x7a12
   182fc:	4563      	cmp	r3, ip
   182fe:	d1dc      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18300:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   18304:	e02b      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18306:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1830a:	d04b      	beq.n	183a4 <uarte_nrfx_configure+0x144>
   1830c:	d813      	bhi.n	18336 <uarte_nrfx_configure+0xd6>
   1830e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   18312:	d04a      	beq.n	183aa <uarte_nrfx_configure+0x14a>
   18314:	d809      	bhi.n	1832a <uarte_nrfx_configure+0xca>
   18316:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   1831a:	4563      	cmp	r3, ip
   1831c:	d047      	beq.n	183ae <uarte_nrfx_configure+0x14e>
   1831e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   18322:	d1ca      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   18324:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   18328:	e019      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1832a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1832e:	d1c4      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   18330:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   18334:	e013      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18336:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1833a:	d03b      	beq.n	183b4 <uarte_nrfx_configure+0x154>
   1833c:	d809      	bhi.n	18352 <uarte_nrfx_configure+0xf2>
   1833e:	f8df c088 	ldr.w	ip, [pc, #136]	; 183c8 <uarte_nrfx_configure+0x168>
   18342:	4563      	cmp	r3, ip
   18344:	d039      	beq.n	183ba <uarte_nrfx_configure+0x15a>
   18346:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1834a:	d1b6      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1834c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   18350:	e005      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18352:	f8df c078 	ldr.w	ip, [pc, #120]	; 183cc <uarte_nrfx_configure+0x16c>
   18356:	4563      	cmp	r3, ip
   18358:	d1af      	bne.n	182ba <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1835a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1835e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   18362:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   18364:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   18366:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   18368:	4322      	orrs	r2, r4
   1836a:	3304      	adds	r3, #4
   1836c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1836e:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   18372:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   18376:	2000      	movs	r0, #0
}
   18378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1837a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1837e:	e7ee      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18380:	4b13      	ldr	r3, [pc, #76]	; (183d0 <uarte_nrfx_configure+0x170>)
   18382:	e7ec      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18384:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18388:	e7e9      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   1838a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1838e:	e7e6      	b.n	1835e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18390:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   18394:	e7e3      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   18396:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1839a:	e7e0      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1839c:	4b0d      	ldr	r3, [pc, #52]	; (183d4 <uarte_nrfx_configure+0x174>)
   1839e:	e7de      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   183a0:	4b0d      	ldr	r3, [pc, #52]	; (183d8 <uarte_nrfx_configure+0x178>)
   183a2:	e7dc      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   183a4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   183a8:	e7d9      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   183aa:	4b0c      	ldr	r3, [pc, #48]	; (183dc <uarte_nrfx_configure+0x17c>)
   183ac:	e7d7      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   183ae:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   183b2:	e7d4      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   183b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   183b8:	e7d1      	b.n	1835e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   183ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   183be:	e7ce      	b.n	1835e <uarte_nrfx_configure+0xfe>
   183c0:	0013b000 	.word	0x0013b000
   183c4:	004ea000 	.word	0x004ea000
   183c8:	0003d090 	.word	0x0003d090
   183cc:	000f4240 	.word	0x000f4240
   183d0:	00275000 	.word	0x00275000
   183d4:	0075c000 	.word	0x0075c000
   183d8:	003af000 	.word	0x003af000
   183dc:	013a9000 	.word	0x013a9000

000183e0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   183e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183e4:	4606      	mov	r6, r0
   183e6:	4688      	mov	r8, r1
	return dev->data;
   183e8:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   183ea:	f009 f909 	bl	21600 <k_is_in_isr>
   183ee:	b9b8      	cbnz	r0, 18420 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   183f0:	4b28      	ldr	r3, [pc, #160]	; (18494 <uarte_nrfx_poll_out+0xb4>)
   183f2:	781b      	ldrb	r3, [r3, #0]
   183f4:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   183f8:	6872      	ldr	r2, [r6, #4]
   183fa:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   183fc:	b193      	cbz	r3, 18424 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   183fe:	f04f 0320 	mov.w	r3, #32
   18402:	f3ef 8411 	mrs	r4, BASEPRI
   18406:	f383 8811 	msr	BASEPRI, r3
   1840a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1840e:	6870      	ldr	r0, [r6, #4]
   18410:	f008 fba2 	bl	20b58 <is_tx_ready.isra.0>
   18414:	bb38      	cbnz	r0, 18466 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   18416:	f384 8811 	msr	BASEPRI, r4
   1841a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1841e:	e7ee      	b.n	183fe <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18420:	2301      	movs	r3, #1
   18422:	e7e9      	b.n	183f8 <uarte_nrfx_poll_out+0x18>
   18424:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   18426:	6870      	ldr	r0, [r6, #4]
   18428:	f008 fb96 	bl	20b58 <is_tx_ready.isra.0>
   1842c:	b970      	cbnz	r0, 1844c <uarte_nrfx_poll_out+0x6c>
   1842e:	2001      	movs	r0, #1
   18430:	f008 fc32 	bl	20c98 <nrfx_busy_wait>
   18434:	3c01      	subs	r4, #1
   18436:	d1f6      	bne.n	18426 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   18438:	2100      	movs	r1, #0
   1843a:	2021      	movs	r0, #33	; 0x21
   1843c:	f003 f972 	bl	1b724 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18440:	e7f0      	b.n	18424 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   18442:	f384 8811 	msr	BASEPRI, r4
   18446:	f3bf 8f6f 	isb	sy
}
   1844a:	e7f5      	b.n	18438 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1844c:	f04f 0320 	mov.w	r3, #32
   18450:	f3ef 8411 	mrs	r4, BASEPRI
   18454:	f383 8811 	msr	BASEPRI, r3
   18458:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1845c:	6870      	ldr	r0, [r6, #4]
   1845e:	f008 fb7b 	bl	20b58 <is_tx_ready.isra.0>
   18462:	2800      	cmp	r0, #0
   18464:	d0ed      	beq.n	18442 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   18466:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18468:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1846a:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1846e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18472:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18476:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1847a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1847e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   18482:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18486:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   18488:	f384 8811 	msr	BASEPRI, r4
   1848c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   18490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18494:	2000b7dc 	.word	0x2000b7dc

00018498 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1849c:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1849e:	f04f 0800 	mov.w	r8, #0
   184a2:	f04f 0914 	mov.w	r9, #20
   184a6:	2200      	movs	r2, #0
   184a8:	2101      	movs	r1, #1
   184aa:	2008      	movs	r0, #8
   184ac:	f7f5 fa96 	bl	d9dc <z_arm_irq_priority_set>
   184b0:	2008      	movs	r0, #8
   184b2:	f7f5 fa75 	bl	d9a0 <arch_irq_enable>
	return config->uarte_regs;
   184b6:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   184b8:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   184ba:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   184bc:	2701      	movs	r7, #1
   184be:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184c2:	a801      	add	r0, sp, #4
	data->dev = dev;
   184c4:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   184c6:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184ca:	f7ff fe8d 	bl	181e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   184ce:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   184d0:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   184d4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   184d8:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184da:	a801      	add	r0, sp, #4
   184dc:	f8cd 9004 	str.w	r9, [sp, #4]
   184e0:	f7ff fe82 	bl	181e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   184e4:	f04f 0b16 	mov.w	fp, #22
   184e8:	9b01      	ldr	r3, [sp, #4]
   184ea:	3380      	adds	r3, #128	; 0x80
   184ec:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   184f0:	a801      	add	r0, sp, #4
   184f2:	f8cd b004 	str.w	fp, [sp, #4]
   184f6:	f7ff fe77 	bl	181e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   184fa:	9b01      	ldr	r3, [sp, #4]
   184fc:	3380      	adds	r3, #128	; 0x80
   184fe:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   18502:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   18506:	f04f 0915 	mov.w	r9, #21
   1850a:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1850e:	a801      	add	r0, sp, #4
   18510:	f8cd 9004 	str.w	r9, [sp, #4]
   18514:	f7ff fe68 	bl	181e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18518:	9b01      	ldr	r3, [sp, #4]
   1851a:	3380      	adds	r3, #128	; 0x80
   1851c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   18520:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18524:	a801      	add	r0, sp, #4
   18526:	f8cd 8004 	str.w	r8, [sp, #4]
   1852a:	f7ff fe5d 	bl	181e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1852e:	9b01      	ldr	r3, [sp, #4]
   18530:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   18532:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18534:	a801      	add	r0, sp, #4
   18536:	f8cd 8004 	str.w	r8, [sp, #4]
   1853a:	f7ff fe55 	bl	181e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1853e:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   18540:	68e9      	ldr	r1, [r5, #12]
   18542:	3380      	adds	r3, #128	; 0x80
   18544:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   18548:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   1854a:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   1854e:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   18550:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   18554:	f7ff fe84 	bl	18260 <uarte_nrfx_configure>
	if (err) {
   18558:	4607      	mov	r7, r0
   1855a:	b980      	cbnz	r0, 1857e <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   1855c:	686b      	ldr	r3, [r5, #4]
   1855e:	799b      	ldrb	r3, [r3, #6]
   18560:	2b00      	cmp	r3, #0
   18562:	d03a      	beq.n	185da <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18564:	eb06 000b 	add.w	r0, r6, fp
   18568:	f000 fddc 	bl	19124 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1856c:	4b2b      	ldr	r3, [pc, #172]	; (1861c <uarte_0_init+0x184>)
   1856e:	4298      	cmp	r0, r3
   18570:	d009      	beq.n	18586 <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   18572:	2145      	movs	r1, #69	; 0x45
   18574:	482a      	ldr	r0, [pc, #168]	; (18620 <uarte_0_init+0x188>)
   18576:	f004 facb 	bl	1cb10 <printk>
		return -EIO;
   1857a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1857e:	4638      	mov	r0, r7
   18580:	b003      	add	sp, #12
   18582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   18586:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1858a:	f896 8016 	ldrb.w	r8, [r6, #22]
   1858e:	d10a      	bne.n	185a6 <uarte_0_init+0x10e>
   18590:	4924      	ldr	r1, [pc, #144]	; (18624 <uarte_0_init+0x18c>)
   18592:	4825      	ldr	r0, [pc, #148]	; (18628 <uarte_0_init+0x190>)
   18594:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   18598:	f004 faba 	bl	1cb10 <printk>
   1859c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   185a0:	4820      	ldr	r0, [pc, #128]	; (18624 <uarte_0_init+0x18c>)
   185a2:	f004 fd5b 	bl	1d05c <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   185a6:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   185aa:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   185ae:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   185b2:	d10a      	bne.n	185ca <uarte_0_init+0x132>
   185b4:	491b      	ldr	r1, [pc, #108]	; (18624 <uarte_0_init+0x18c>)
   185b6:	481c      	ldr	r0, [pc, #112]	; (18628 <uarte_0_init+0x190>)
   185b8:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   185bc:	f004 faa8 	bl	1cb10 <printk>
   185c0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   185c4:	4817      	ldr	r0, [pc, #92]	; (18624 <uarte_0_init+0x18c>)
   185c6:	f004 fd49 	bl	1d05c <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   185ca:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   185cc:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   185d0:	7db2      	ldrb	r2, [r6, #22]
   185d2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   185d4:	4a15      	ldr	r2, [pc, #84]	; (1862c <uarte_0_init+0x194>)
   185d6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   185da:	2308      	movs	r3, #8
   185dc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   185e0:	2300      	movs	r3, #0
   185e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   185e6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   185ea:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   185ee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   185f2:	2301      	movs	r3, #1
   185f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   185f8:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   185fa:	686b      	ldr	r3, [r5, #4]
   185fc:	799b      	ldrb	r3, [r3, #6]
   185fe:	b91b      	cbnz	r3, 18608 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   18600:	f44f 7380 	mov.w	r3, #256	; 0x100
   18604:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   18608:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1860a:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1860c:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18610:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18614:	2301      	movs	r3, #1
   18616:	60a3      	str	r3, [r4, #8]
   18618:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1861a:	e7b0      	b.n	1857e <uarte_0_init+0xe6>
   1861c:	0bad0000 	.word	0x0bad0000
   18620:	00025eb6 	.word	0x00025eb6
   18624:	00025eda 	.word	0x00025eda
   18628:	00022f17 	.word	0x00022f17
   1862c:	40017000 	.word	0x40017000

00018630 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   18630:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   18634:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   18638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   1863c:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   18640:	4605      	mov	r5, r0
   18642:	460e      	mov	r6, r1
   18644:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   18646:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1864a:	d14f      	bne.n	186ec <z_impl_gpio_pin_interrupt_configure+0xbc>
   1864c:	492d      	ldr	r1, [pc, #180]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1864e:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   18652:	482d      	ldr	r0, [pc, #180]	; (18708 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   18654:	f004 fa5c 	bl	1cb10 <printk>
   18658:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1865c:	4829      	ldr	r0, [pc, #164]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1865e:	f004 fcfd 	bl	1d05c <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   18662:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   18666:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1866a:	d10a      	bne.n	18682 <z_impl_gpio_pin_interrupt_configure+0x52>
   1866c:	4925      	ldr	r1, [pc, #148]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1866e:	4826      	ldr	r0, [pc, #152]	; (18708 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   18670:	f240 12f1 	movw	r2, #497	; 0x1f1
   18674:	f004 fa4c 	bl	1cb10 <printk>
   18678:	f240 11f1 	movw	r1, #497	; 0x1f1
   1867c:	4821      	ldr	r0, [pc, #132]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1867e:	f004 fced 	bl	1d05c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   18682:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   18686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1868a:	d10a      	bne.n	186a2 <z_impl_gpio_pin_interrupt_configure+0x72>
   1868c:	491d      	ldr	r1, [pc, #116]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1868e:	481e      	ldr	r0, [pc, #120]	; (18708 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   18690:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   18694:	f004 fa3c 	bl	1cb10 <printk>
   18698:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1869c:	4819      	ldr	r0, [pc, #100]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1869e:	f004 fcdd 	bl	1d05c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   186a2:	2701      	movs	r7, #1
   186a4:	f8da 3000 	ldr.w	r3, [sl]
   186a8:	40b7      	lsls	r7, r6
   186aa:	421f      	tst	r7, r3
   186ac:	d10a      	bne.n	186c4 <z_impl_gpio_pin_interrupt_configure+0x94>
   186ae:	4915      	ldr	r1, [pc, #84]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   186b0:	4815      	ldr	r0, [pc, #84]	; (18708 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   186b2:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   186b6:	f004 fa2b 	bl	1cb10 <printk>
   186ba:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   186be:	4811      	ldr	r0, [pc, #68]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   186c0:	f004 fccc 	bl	1d05c <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   186c4:	0423      	lsls	r3, r4, #16
   186c6:	d505      	bpl.n	186d4 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   186c8:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   186cc:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   186ce:	bf18      	it	ne
   186d0:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   186d4:	f8d8 7018 	ldr.w	r7, [r8, #24]
   186d8:	4631      	mov	r1, r6
   186da:	4628      	mov	r0, r5
   186dc:	46bc      	mov	ip, r7
   186de:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   186e2:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   186e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   186ea:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   186ec:	2b00      	cmp	r3, #0
   186ee:	d1b8      	bne.n	18662 <z_impl_gpio_pin_interrupt_configure+0x32>
   186f0:	4904      	ldr	r1, [pc, #16]	; (18704 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   186f2:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   186f6:	4804      	ldr	r0, [pc, #16]	; (18708 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   186f8:	f004 fa0a 	bl	1cb10 <printk>
   186fc:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   18700:	e7ac      	b.n	1865c <z_impl_gpio_pin_interrupt_configure+0x2c>
   18702:	bf00      	nop
   18704:	00025f29 	.word	0x00025f29
   18708:	00022f17 	.word	0x00022f17

0001870c <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   1870c:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1870e:	2501      	movs	r5, #1
   18710:	6843      	ldr	r3, [r0, #4]
   18712:	408d      	lsls	r5, r1
   18714:	681b      	ldr	r3, [r3, #0]
{
   18716:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18718:	421d      	tst	r5, r3
{
   1871a:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1871c:	d10a      	bne.n	18734 <gpio_pin_set_raw+0x28>
   1871e:	490b      	ldr	r1, [pc, #44]	; (1874c <gpio_pin_set_raw+0x40>)
   18720:	480b      	ldr	r0, [pc, #44]	; (18750 <gpio_pin_set_raw+0x44>)
   18722:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   18726:	f004 f9f3 	bl	1cb10 <printk>
   1872a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   1872e:	4807      	ldr	r0, [pc, #28]	; (1874c <gpio_pin_set_raw+0x40>)
   18730:	f004 fc94 	bl	1d05c <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   18734:	b136      	cbz	r6, 18744 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   18736:	68a3      	ldr	r3, [r4, #8]
   18738:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1873a:	4629      	mov	r1, r5
   1873c:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1873e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   18742:	4718      	bx	r3
   18744:	68a3      	ldr	r3, [r4, #8]
   18746:	691b      	ldr	r3, [r3, #16]
   18748:	e7f7      	b.n	1873a <gpio_pin_set_raw+0x2e>
   1874a:	bf00      	nop
   1874c:	00025f29 	.word	0x00025f29
   18750:	00022f17 	.word	0x00022f17

00018754 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   18754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18758:	4606      	mov	r6, r0
   1875a:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1875c:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   1875e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 187a4 <dk_set_leds_state.part.0+0x50>
   18762:	f8df 9044 	ldr.w	r9, [pc, #68]	; 187a8 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   18766:	fa26 f204 	lsr.w	r2, r6, r4
   1876a:	fa27 f304 	lsr.w	r3, r7, r4
   1876e:	4313      	orrs	r3, r2
   18770:	07db      	lsls	r3, r3, #31
   18772:	d512      	bpl.n	1879a <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   18774:	43d2      	mvns	r2, r2
   18776:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1877a:	7919      	ldrb	r1, [r3, #4]
   1877c:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   18780:	f002 0201 	and.w	r2, r2, #1
   18784:	f7ff ffc2 	bl	1870c <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   18788:	4605      	mov	r5, r0
   1878a:	b130      	cbz	r0, 1879a <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   1878c:	2145      	movs	r1, #69	; 0x45
   1878e:	4807      	ldr	r0, [pc, #28]	; (187ac <dk_set_leds_state.part.0+0x58>)
   18790:	f004 f9be 	bl	1cb10 <printk>
			}
		}
	}

	return 0;
}
   18794:	4628      	mov	r0, r5
   18796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1879a:	3401      	adds	r4, #1
   1879c:	2c04      	cmp	r4, #4
   1879e:	d1e2      	bne.n	18766 <dk_set_leds_state.part.0+0x12>
	return 0;
   187a0:	2500      	movs	r5, #0
   187a2:	e7f7      	b.n	18794 <dk_set_leds_state.part.0+0x40>
   187a4:	00022738 	.word	0x00022738
   187a8:	20009f0c 	.word	0x20009f0c
   187ac:	00025f53 	.word	0x00025f53

000187b0 <buttons_scan_fn>:
{
   187b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   187b4:	2400      	movs	r4, #0
   187b6:	4e6c      	ldr	r6, [pc, #432]	; (18968 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   187b8:	4625      	mov	r5, r4
{
   187ba:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   187bc:	4f6b      	ldr	r7, [pc, #428]	; (1896c <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   187be:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 18970 <buttons_scan_fn+0x1c0>
   187c2:	f04f 0801 	mov.w	r8, #1
   187c6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   187ca:	791b      	ldrb	r3, [r3, #4]
   187cc:	f859 bb04 	ldr.w	fp, [r9], #4
   187d0:	fa08 f803 	lsl.w	r8, r8, r3
   187d4:	f8db 3004 	ldr.w	r3, [fp, #4]
   187d8:	681b      	ldr	r3, [r3, #0]
   187da:	ea18 0f03 	tst.w	r8, r3
   187de:	d10a      	bne.n	187f6 <buttons_scan_fn+0x46>
   187e0:	4651      	mov	r1, sl
   187e2:	4864      	ldr	r0, [pc, #400]	; (18974 <buttons_scan_fn+0x1c4>)
   187e4:	f44f 725e 	mov.w	r2, #888	; 0x378
   187e8:	f004 f992 	bl	1cb10 <printk>
   187ec:	f44f 715e 	mov.w	r1, #888	; 0x378
   187f0:	4650      	mov	r0, sl
   187f2:	f004 fc33 	bl	1d05c <assert_post_action>
	return api->port_get_raw(port, value);
   187f6:	f8db 3008 	ldr.w	r3, [fp, #8]
   187fa:	4658      	mov	r0, fp
   187fc:	685b      	ldr	r3, [r3, #4]
   187fe:	a901      	add	r1, sp, #4
   18800:	4798      	blx	r3
	if (ret == 0) {
   18802:	2800      	cmp	r0, #0
   18804:	d16b      	bne.n	188de <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   18806:	9b01      	ldr	r3, [sp, #4]
   18808:	ea18 0f03 	tst.w	r8, r3
   1880c:	d003      	beq.n	18816 <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1880e:	3501      	adds	r5, #1
   18810:	2d04      	cmp	r5, #4
   18812:	d1d6      	bne.n	187c2 <buttons_scan_fn+0x12>
   18814:	e069      	b.n	188ea <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   18816:	2301      	movs	r3, #1
   18818:	40ab      	lsls	r3, r5
   1881a:	431c      	orrs	r4, r3
   1881c:	e7f7      	b.n	1880e <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1881e:	3d04      	subs	r5, #4
   18820:	2d00      	cmp	r5, #0
   18822:	f000 8087 	beq.w	18934 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   18826:	46aa      	mov	sl, r5
   18828:	f85a 3b04 	ldr.w	r3, [sl], #4
   1882c:	4641      	mov	r1, r8
   1882e:	4620      	mov	r0, r4
   18830:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   18832:	f1ba 0f00 	cmp.w	sl, #0
   18836:	d07d      	beq.n	18934 <buttons_scan_fn+0x184>
	return node->next;
   18838:	686d      	ldr	r5, [r5, #4]
   1883a:	e078      	b.n	1892e <buttons_scan_fn+0x17e>
		initial_run = false;
   1883c:	2200      	movs	r2, #0
   1883e:	701a      	strb	r2, [r3, #0]
   18840:	e07b      	b.n	1893a <buttons_scan_fn+0x18a>
	__asm__ volatile(
   18842:	f04f 0320 	mov.w	r3, #32
   18846:	f3ef 8811 	mrs	r8, BASEPRI
   1884a:	f383 8811 	msr	BASEPRI, r3
   1884e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18852:	4849      	ldr	r0, [pc, #292]	; (18978 <buttons_scan_fn+0x1c8>)
   18854:	f003 f988 	bl	1bb68 <z_spin_lock_valid>
   18858:	b940      	cbnz	r0, 1886c <buttons_scan_fn+0xbc>
   1885a:	4948      	ldr	r1, [pc, #288]	; (1897c <buttons_scan_fn+0x1cc>)
   1885c:	4845      	ldr	r0, [pc, #276]	; (18974 <buttons_scan_fn+0x1c4>)
   1885e:	227c      	movs	r2, #124	; 0x7c
   18860:	f004 f956 	bl	1cb10 <printk>
   18864:	217c      	movs	r1, #124	; 0x7c
   18866:	4845      	ldr	r0, [pc, #276]	; (1897c <buttons_scan_fn+0x1cc>)
   18868:	f004 fbf8 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1886c:	4842      	ldr	r0, [pc, #264]	; (18978 <buttons_scan_fn+0x1c8>)
   1886e:	f003 f997 	bl	1bba0 <z_spin_lock_set_owner>
		switch (state) {
   18872:	4b43      	ldr	r3, [pc, #268]	; (18980 <buttons_scan_fn+0x1d0>)
   18874:	781a      	ldrb	r2, [r3, #0]
   18876:	2a01      	cmp	r2, #1
   18878:	d126      	bne.n	188c8 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   1887a:	2200      	movs	r2, #0
   1887c:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1887e:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   18882:	f856 0b04 	ldr.w	r0, [r6], #4
   18886:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   18888:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1888c:	f7ff fed0 	bl	18630 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   18890:	3401      	adds	r4, #1
   18892:	2c04      	cmp	r4, #4
   18894:	4605      	mov	r5, r0
   18896:	d001      	beq.n	1889c <buttons_scan_fn+0xec>
   18898:	2800      	cmp	r0, #0
   1889a:	d0f0      	beq.n	1887e <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1889c:	4836      	ldr	r0, [pc, #216]	; (18978 <buttons_scan_fn+0x1c8>)
   1889e:	f003 f971 	bl	1bb84 <z_spin_unlock_valid>
   188a2:	b940      	cbnz	r0, 188b6 <buttons_scan_fn+0x106>
   188a4:	4935      	ldr	r1, [pc, #212]	; (1897c <buttons_scan_fn+0x1cc>)
   188a6:	4833      	ldr	r0, [pc, #204]	; (18974 <buttons_scan_fn+0x1c4>)
   188a8:	22a7      	movs	r2, #167	; 0xa7
   188aa:	f004 f931 	bl	1cb10 <printk>
   188ae:	21a7      	movs	r1, #167	; 0xa7
   188b0:	4832      	ldr	r0, [pc, #200]	; (1897c <buttons_scan_fn+0x1cc>)
   188b2:	f004 fbd3 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   188b6:	f388 8811 	msr	BASEPRI, r8
   188ba:	f3bf 8f6f 	isb	sy
		if (err) {
   188be:	2d00      	cmp	r5, #0
   188c0:	d04f      	beq.n	18962 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   188c2:	2145      	movs	r1, #69	; 0x45
   188c4:	482f      	ldr	r0, [pc, #188]	; (18984 <buttons_scan_fn+0x1d4>)
   188c6:	e047      	b.n	18958 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   188c8:	22b4      	movs	r2, #180	; 0xb4
   188ca:	492f      	ldr	r1, [pc, #188]	; (18988 <buttons_scan_fn+0x1d8>)
   188cc:	4829      	ldr	r0, [pc, #164]	; (18974 <buttons_scan_fn+0x1c4>)
   188ce:	f004 f91f 	bl	1cb10 <printk>
   188d2:	21b4      	movs	r1, #180	; 0xb4
   188d4:	482c      	ldr	r0, [pc, #176]	; (18988 <buttons_scan_fn+0x1d8>)
   188d6:	f004 fbc1 	bl	1d05c <assert_post_action>
		int err = 0;
   188da:	2500      	movs	r5, #0
			break;
   188dc:	e7de      	b.n	1889c <buttons_scan_fn+0xec>
		if (val < 0) {
   188de:	da96      	bge.n	1880e <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   188e0:	2145      	movs	r1, #69	; 0x45
   188e2:	482a      	ldr	r0, [pc, #168]	; (1898c <buttons_scan_fn+0x1dc>)
   188e4:	f004 f914 	bl	1cb10 <printk>
			return 0;
   188e8:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   188ea:	4b29      	ldr	r3, [pc, #164]	; (18990 <buttons_scan_fn+0x1e0>)
   188ec:	e8d3 2fef 	ldaex	r2, [r3]
   188f0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   188f4:	2900      	cmp	r1, #0
   188f6:	d1f9      	bne.n	188ec <buttons_scan_fn+0x13c>
	if (!initial_run) {
   188f8:	4b26      	ldr	r3, [pc, #152]	; (18994 <buttons_scan_fn+0x1e4>)
   188fa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 18998 <buttons_scan_fn+0x1e8>
   188fe:	781a      	ldrb	r2, [r3, #0]
   18900:	2a00      	cmp	r2, #0
   18902:	d19b      	bne.n	1883c <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   18904:	f8d9 3000 	ldr.w	r3, [r9]
   18908:	42a3      	cmp	r3, r4
   1890a:	d016      	beq.n	1893a <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1890c:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   18910:	4b22      	ldr	r3, [pc, #136]	; (1899c <buttons_scan_fn+0x1ec>)
   18912:	681b      	ldr	r3, [r3, #0]
   18914:	b113      	cbz	r3, 1891c <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   18916:	4641      	mov	r1, r8
   18918:	4620      	mov	r0, r4
   1891a:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1891c:	f04f 33ff 	mov.w	r3, #4294967295
   18920:	f04f 32ff 	mov.w	r2, #4294967295
   18924:	481e      	ldr	r0, [pc, #120]	; (189a0 <buttons_scan_fn+0x1f0>)
   18926:	f001 fc7f 	bl	1a228 <z_impl_k_mutex_lock>
	return list->head;
   1892a:	4b1e      	ldr	r3, [pc, #120]	; (189a4 <buttons_scan_fn+0x1f4>)
   1892c:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1892e:	2d00      	cmp	r5, #0
   18930:	f47f af75 	bne.w	1881e <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   18934:	481a      	ldr	r0, [pc, #104]	; (189a0 <buttons_scan_fn+0x1f0>)
   18936:	f001 fd43 	bl	1a3c0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1893a:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   1893e:	2c00      	cmp	r4, #0
   18940:	f43f af7f 	beq.w	18842 <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18944:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18948:	2300      	movs	r3, #0
   1894a:	4917      	ldr	r1, [pc, #92]	; (189a8 <buttons_scan_fn+0x1f8>)
   1894c:	4817      	ldr	r0, [pc, #92]	; (189ac <buttons_scan_fn+0x1fc>)
   1894e:	f003 f981 	bl	1bc54 <k_delayed_work_submit_to_queue>
		if (err) {
   18952:	b130      	cbz	r0, 18962 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   18954:	2145      	movs	r1, #69	; 0x45
   18956:	4816      	ldr	r0, [pc, #88]	; (189b0 <buttons_scan_fn+0x200>)
}
   18958:	b003      	add	sp, #12
   1895a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   1895e:	f004 b8d7 	b.w	1cb10 <printk>
}
   18962:	b003      	add	sp, #12
   18964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18968:	20009ec8 	.word	0x20009ec8
   1896c:	00022718 	.word	0x00022718
   18970:	00025f29 	.word	0x00025f29
   18974:	00022f17 	.word	0x00022f17
   18978:	20009f1c 	.word	0x20009f1c
   1897c:	00022f51 	.word	0x00022f51
   18980:	2000b7db 	.word	0x2000b7db
   18984:	00025fe8 	.word	0x00025fe8
   18988:	00025faa 	.word	0x00025faa
   1898c:	00025f6e 	.word	0x00025f6e
   18990:	20009f20 	.word	0x20009f20
   18994:	20008435 	.word	0x20008435
   18998:	20009f04 	.word	0x20009f04
   1899c:	20009ed8 	.word	0x20009ed8
   189a0:	20009edc 	.word	0x20009edc
   189a4:	20009ef0 	.word	0x20009ef0
   189a8:	200094e8 	.word	0x200094e8
   189ac:	20009638 	.word	0x20009638
   189b0:	00025f88 	.word	0x00025f88

000189b4 <button_pressed>:
{
   189b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   189b6:	f04f 0320 	mov.w	r3, #32
   189ba:	f3ef 8611 	mrs	r6, BASEPRI
   189be:	f383 8811 	msr	BASEPRI, r3
   189c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   189c6:	4827      	ldr	r0, [pc, #156]	; (18a64 <button_pressed+0xb0>)
   189c8:	f003 f8ce 	bl	1bb68 <z_spin_lock_valid>
   189cc:	b940      	cbnz	r0, 189e0 <button_pressed+0x2c>
   189ce:	4926      	ldr	r1, [pc, #152]	; (18a68 <button_pressed+0xb4>)
   189d0:	4826      	ldr	r0, [pc, #152]	; (18a6c <button_pressed+0xb8>)
   189d2:	227c      	movs	r2, #124	; 0x7c
   189d4:	f004 f89c 	bl	1cb10 <printk>
   189d8:	217c      	movs	r1, #124	; 0x7c
   189da:	4823      	ldr	r0, [pc, #140]	; (18a68 <button_pressed+0xb4>)
   189dc:	f004 fb3e 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   189e0:	4820      	ldr	r0, [pc, #128]	; (18a64 <button_pressed+0xb0>)
   189e2:	f003 f8dd 	bl	1bba0 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   189e6:	2400      	movs	r4, #0
   189e8:	4d21      	ldr	r5, [pc, #132]	; (18a70 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   189ea:	4f22      	ldr	r7, [pc, #136]	; (18a74 <button_pressed+0xc0>)
   189ec:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   189f0:	f855 0b04 	ldr.w	r0, [r5], #4
   189f4:	7919      	ldrb	r1, [r3, #4]
   189f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   189fa:	3401      	adds	r4, #1
   189fc:	f7ff fe18 	bl	18630 <z_impl_gpio_pin_interrupt_configure>
   18a00:	2c04      	cmp	r4, #4
   18a02:	d006      	beq.n	18a12 <button_pressed+0x5e>
   18a04:	2800      	cmp	r0, #0
   18a06:	d0f1      	beq.n	189ec <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   18a08:	2145      	movs	r1, #69	; 0x45
   18a0a:	481b      	ldr	r0, [pc, #108]	; (18a78 <button_pressed+0xc4>)
   18a0c:	f004 f880 	bl	1cb10 <printk>
   18a10:	e001      	b.n	18a16 <button_pressed+0x62>
	if (err) {
   18a12:	2800      	cmp	r0, #0
   18a14:	d1f8      	bne.n	18a08 <button_pressed+0x54>
	switch (state) {
   18a16:	4b19      	ldr	r3, [pc, #100]	; (18a7c <button_pressed+0xc8>)
   18a18:	781a      	ldrb	r2, [r3, #0]
   18a1a:	b9ca      	cbnz	r2, 18a50 <button_pressed+0x9c>
		state = STATE_SCANNING;
   18a1c:	2201      	movs	r2, #1
   18a1e:	4918      	ldr	r1, [pc, #96]	; (18a80 <button_pressed+0xcc>)
   18a20:	701a      	strb	r2, [r3, #0]
   18a22:	4818      	ldr	r0, [pc, #96]	; (18a84 <button_pressed+0xd0>)
   18a24:	2221      	movs	r2, #33	; 0x21
   18a26:	2300      	movs	r3, #0
   18a28:	f003 f914 	bl	1bc54 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a2c:	480d      	ldr	r0, [pc, #52]	; (18a64 <button_pressed+0xb0>)
   18a2e:	f003 f8a9 	bl	1bb84 <z_spin_unlock_valid>
   18a32:	b940      	cbnz	r0, 18a46 <button_pressed+0x92>
   18a34:	490c      	ldr	r1, [pc, #48]	; (18a68 <button_pressed+0xb4>)
   18a36:	480d      	ldr	r0, [pc, #52]	; (18a6c <button_pressed+0xb8>)
   18a38:	22a7      	movs	r2, #167	; 0xa7
   18a3a:	f004 f869 	bl	1cb10 <printk>
   18a3e:	21a7      	movs	r1, #167	; 0xa7
   18a40:	4809      	ldr	r0, [pc, #36]	; (18a68 <button_pressed+0xb4>)
   18a42:	f004 fb0b 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   18a46:	f386 8811 	msr	BASEPRI, r6
   18a4a:	f3bf 8f6f 	isb	sy
}
   18a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   18a50:	22eb      	movs	r2, #235	; 0xeb
   18a52:	490d      	ldr	r1, [pc, #52]	; (18a88 <button_pressed+0xd4>)
   18a54:	4805      	ldr	r0, [pc, #20]	; (18a6c <button_pressed+0xb8>)
   18a56:	f004 f85b 	bl	1cb10 <printk>
   18a5a:	21eb      	movs	r1, #235	; 0xeb
   18a5c:	480a      	ldr	r0, [pc, #40]	; (18a88 <button_pressed+0xd4>)
   18a5e:	f004 fafd 	bl	1d05c <assert_post_action>
		break;
   18a62:	e7e3      	b.n	18a2c <button_pressed+0x78>
   18a64:	20009f1c 	.word	0x20009f1c
   18a68:	00022f51 	.word	0x00022f51
   18a6c:	00022f17 	.word	0x00022f17
   18a70:	20009ec8 	.word	0x20009ec8
   18a74:	00022718 	.word	0x00022718
   18a78:	00026005 	.word	0x00026005
   18a7c:	2000b7db 	.word	0x2000b7db
   18a80:	200094e8 	.word	0x200094e8
   18a84:	20009638 	.word	0x20009638
   18a88:	00025faa 	.word	0x00025faa

00018a8c <dk_leds_init>:
{
   18a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18a90:	2600      	movs	r6, #0
   18a92:	4d23      	ldr	r5, [pc, #140]	; (18b20 <dk_leds_init+0x94>)
   18a94:	f8df 908c 	ldr.w	r9, [pc, #140]	; 18b24 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18a98:	f8df a08c 	ldr.w	sl, [pc, #140]	; 18b28 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   18a9c:	6828      	ldr	r0, [r5, #0]
   18a9e:	f001 f8a1 	bl	19be4 <z_impl_device_get_binding>
   18aa2:	4604      	mov	r4, r0
   18aa4:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   18aa8:	b940      	cbnz	r0, 18abc <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   18aaa:	2145      	movs	r1, #69	; 0x45
   18aac:	481f      	ldr	r0, [pc, #124]	; (18b2c <dk_leds_init+0xa0>)
   18aae:	f004 f82f 	bl	1cb10 <printk>
			return -ENODEV;
   18ab2:	f06f 0412 	mvn.w	r4, #18
}
   18ab6:	4620      	mov	r0, r4
   18ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18abc:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   18abe:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   18ac2:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18ac4:	fa03 f80b 	lsl.w	r8, r3, fp
   18ac8:	6843      	ldr	r3, [r0, #4]
   18aca:	681b      	ldr	r3, [r3, #0]
   18acc:	ea18 0f03 	tst.w	r8, r3
   18ad0:	d10a      	bne.n	18ae8 <dk_leds_init+0x5c>
   18ad2:	4651      	mov	r1, sl
   18ad4:	4816      	ldr	r0, [pc, #88]	; (18b30 <dk_leds_init+0xa4>)
   18ad6:	f44f 7211 	mov.w	r2, #580	; 0x244
   18ada:	f004 f819 	bl	1cb10 <printk>
   18ade:	f44f 7111 	mov.w	r1, #580	; 0x244
   18ae2:	4650      	mov	r0, sl
   18ae4:	f004 faba 	bl	1d05c <assert_post_action>
	return api->pin_configure(port, pin, flags);
   18ae8:	68a3      	ldr	r3, [r4, #8]
   18aea:	4620      	mov	r0, r4
   18aec:	f44f 7200 	mov.w	r2, #512	; 0x200
   18af0:	4659      	mov	r1, fp
   18af2:	681b      	ldr	r3, [r3, #0]
   18af4:	4798      	blx	r3
	if (ret != 0) {
   18af6:	4604      	mov	r4, r0
   18af8:	b968      	cbnz	r0, 18b16 <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18afa:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18afc:	3601      	adds	r6, #1
   18afe:	ea23 0308 	bic.w	r3, r3, r8
   18b02:	2e04      	cmp	r6, #4
   18b04:	603b      	str	r3, [r7, #0]
   18b06:	f105 0508 	add.w	r5, r5, #8
   18b0a:	d1c7      	bne.n	18a9c <dk_leds_init+0x10>
}
   18b0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b10:	210f      	movs	r1, #15
   18b12:	f7ff be1f 	b.w	18754 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   18b16:	2145      	movs	r1, #69	; 0x45
   18b18:	4806      	ldr	r0, [pc, #24]	; (18b34 <dk_leds_init+0xa8>)
   18b1a:	f003 fff9 	bl	1cb10 <printk>
			return err;
   18b1e:	e7ca      	b.n	18ab6 <dk_leds_init+0x2a>
   18b20:	00022738 	.word	0x00022738
   18b24:	20009f0c 	.word	0x20009f0c
   18b28:	00025f29 	.word	0x00025f29
   18b2c:	00026023 	.word	0x00026023
   18b30:	00022f17 	.word	0x00022f17
   18b34:	00026040 	.word	0x00026040

00018b38 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18b38:	4b05      	ldr	r3, [pc, #20]	; (18b50 <dk_read_buttons+0x18>)
   18b3a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   18b3e:	b100      	cbz	r0, 18b42 <dk_read_buttons+0xa>
		*button_state = current_state;
   18b40:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   18b42:	4804      	ldr	r0, [pc, #16]	; (18b54 <dk_read_buttons+0x1c>)
   18b44:	b111      	cbz	r1, 18b4c <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   18b46:	6802      	ldr	r2, [r0, #0]
   18b48:	405a      	eors	r2, r3
   18b4a:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   18b4c:	6003      	str	r3, [r0, #0]
}
   18b4e:	4770      	bx	lr
   18b50:	20009f20 	.word	0x20009f20
   18b54:	20009f08 	.word	0x20009f08

00018b58 <dk_buttons_init>:
	button_handler_cb = button_handler;
   18b58:	4b4f      	ldr	r3, [pc, #316]	; (18c98 <dk_buttons_init+0x140>)
{
   18b5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   18b5e:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   18b60:	4e4e      	ldr	r6, [pc, #312]	; (18c9c <dk_buttons_init+0x144>)
   18b62:	484f      	ldr	r0, [pc, #316]	; (18ca0 <dk_buttons_init+0x148>)
   18b64:	f008 fcc4 	bl	214f0 <z_impl_k_mutex_init>
   18b68:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18b6a:	2700      	movs	r7, #0
   18b6c:	4d4d      	ldr	r5, [pc, #308]	; (18ca4 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18b6e:	f8df a138 	ldr.w	sl, [pc, #312]	; 18ca8 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   18b72:	6828      	ldr	r0, [r5, #0]
   18b74:	f001 f836 	bl	19be4 <z_impl_device_get_binding>
   18b78:	4604      	mov	r4, r0
   18b7a:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   18b7e:	b948      	cbnz	r0, 18b94 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   18b80:	2145      	movs	r1, #69	; 0x45
   18b82:	484a      	ldr	r0, [pc, #296]	; (18cac <dk_buttons_init+0x154>)
   18b84:	f003 ffc4 	bl	1cb10 <printk>
			return -ENODEV;
   18b88:	f06f 0412 	mvn.w	r4, #18
}
   18b8c:	4620      	mov	r0, r4
   18b8e:	b003      	add	sp, #12
   18b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b94:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   18b96:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   18b9a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18b9e:	fa03 f30b 	lsl.w	r3, r3, fp
   18ba2:	9301      	str	r3, [sp, #4]
   18ba4:	6843      	ldr	r3, [r0, #4]
   18ba6:	9a01      	ldr	r2, [sp, #4]
   18ba8:	681b      	ldr	r3, [r3, #0]
   18baa:	421a      	tst	r2, r3
   18bac:	d10a      	bne.n	18bc4 <dk_buttons_init+0x6c>
   18bae:	4651      	mov	r1, sl
   18bb0:	483f      	ldr	r0, [pc, #252]	; (18cb0 <dk_buttons_init+0x158>)
   18bb2:	f44f 7211 	mov.w	r2, #580	; 0x244
   18bb6:	f003 ffab 	bl	1cb10 <printk>
   18bba:	f44f 7111 	mov.w	r1, #580	; 0x244
   18bbe:	4650      	mov	r0, sl
   18bc0:	f004 fa4c 	bl	1d05c <assert_post_action>
	return api->pin_configure(port, pin, flags);
   18bc4:	68a3      	ldr	r3, [r4, #8]
   18bc6:	4620      	mov	r0, r4
   18bc8:	f44f 7288 	mov.w	r2, #272	; 0x110
   18bcc:	4659      	mov	r1, fp
   18bce:	681b      	ldr	r3, [r3, #0]
   18bd0:	4798      	blx	r3
	if (ret != 0) {
   18bd2:	4604      	mov	r4, r0
   18bd4:	bb08      	cbnz	r0, 18c1a <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18bd6:	f8d8 3000 	ldr.w	r3, [r8]
   18bda:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18bdc:	3701      	adds	r7, #1
   18bde:	ea23 0302 	bic.w	r3, r3, r2
   18be2:	2f04      	cmp	r7, #4
   18be4:	f8c8 3000 	str.w	r3, [r8]
   18be8:	f105 0508 	add.w	r5, r5, #8
   18bec:	d1c1      	bne.n	18b72 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18bee:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   18bf0:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   18bf2:	f04f 0a01 	mov.w	sl, #1
   18bf6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 18c9c <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   18bfa:	4b2a      	ldr	r3, [pc, #168]	; (18ca4 <dk_buttons_init+0x14c>)
   18bfc:	f859 0b04 	ldr.w	r0, [r9], #4
   18c00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18c04:	791f      	ldrb	r7, [r3, #4]
   18c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18c0a:	4639      	mov	r1, r7
   18c0c:	f7ff fd10 	bl	18630 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   18c10:	4604      	mov	r4, r0
   18c12:	b138      	cbz	r0, 18c24 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   18c14:	2145      	movs	r1, #69	; 0x45
   18c16:	4827      	ldr	r0, [pc, #156]	; (18cb4 <dk_buttons_init+0x15c>)
   18c18:	e001      	b.n	18c1e <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   18c1a:	2145      	movs	r1, #69	; 0x45
   18c1c:	4826      	ldr	r0, [pc, #152]	; (18cb8 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   18c1e:	f003 ff77 	bl	1cb10 <printk>
		return err;
   18c22:	e7b3      	b.n	18b8c <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18c24:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   18c26:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18c2a:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   18c2c:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18c30:	d1e3      	bne.n	18bfa <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18c32:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   18c34:	4f21      	ldr	r7, [pc, #132]	; (18cbc <dk_buttons_init+0x164>)
   18c36:	4b22      	ldr	r3, [pc, #136]	; (18cc0 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   18c38:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   18c3c:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   18c40:	6883      	ldr	r3, [r0, #8]
   18c42:	69db      	ldr	r3, [r3, #28]
   18c44:	b13b      	cbz	r3, 18c56 <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   18c46:	2201      	movs	r2, #1
   18c48:	4639      	mov	r1, r7
   18c4a:	4798      	blx	r3
		if (err) {
   18c4c:	4604      	mov	r4, r0
   18c4e:	b128      	cbz	r0, 18c5c <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   18c50:	2145      	movs	r1, #69	; 0x45
   18c52:	481c      	ldr	r0, [pc, #112]	; (18cc4 <dk_buttons_init+0x16c>)
   18c54:	e7e3      	b.n	18c1e <dk_buttons_init+0xc6>
		return -ENOTSUP;
   18c56:	f06f 0422 	mvn.w	r4, #34	; 0x22
   18c5a:	e7f9      	b.n	18c50 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18c5c:	3501      	adds	r5, #1
   18c5e:	2d04      	cmp	r5, #4
   18c60:	d1ec      	bne.n	18c3c <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18c62:	4d19      	ldr	r5, [pc, #100]	; (18cc8 <dk_buttons_init+0x170>)
   18c64:	4601      	mov	r1, r0
   18c66:	2230      	movs	r2, #48	; 0x30
   18c68:	4628      	mov	r0, r5
   18c6a:	f005 fc34 	bl	1e4d6 <memset>
	state = STATE_SCANNING;
   18c6e:	2201      	movs	r2, #1
   18c70:	4b16      	ldr	r3, [pc, #88]	; (18ccc <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18c72:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18c74:	606b      	str	r3, [r5, #4]
   18c76:	4b16      	ldr	r3, [pc, #88]	; (18cd0 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18c78:	4816      	ldr	r0, [pc, #88]	; (18cd4 <dk_buttons_init+0x17c>)
   18c7a:	701a      	strb	r2, [r3, #0]
   18c7c:	2200      	movs	r2, #0
   18c7e:	2300      	movs	r3, #0
   18c80:	f002 ffe8 	bl	1bc54 <k_delayed_work_submit_to_queue>
	if (err) {
   18c84:	4604      	mov	r4, r0
   18c86:	b110      	cbz	r0, 18c8e <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   18c88:	2145      	movs	r1, #69	; 0x45
   18c8a:	4813      	ldr	r0, [pc, #76]	; (18cd8 <dk_buttons_init+0x180>)
   18c8c:	e7c7      	b.n	18c1e <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   18c8e:	4601      	mov	r1, r0
   18c90:	f7ff ff52 	bl	18b38 <dk_read_buttons>
	return 0;
   18c94:	e77a      	b.n	18b8c <dk_buttons_init+0x34>
   18c96:	bf00      	nop
   18c98:	20009ed8 	.word	0x20009ed8
   18c9c:	20009ec8 	.word	0x20009ec8
   18ca0:	20009edc 	.word	0x20009edc
   18ca4:	00022718 	.word	0x00022718
   18ca8:	00025f29 	.word	0x00025f29
   18cac:	00026023 	.word	0x00026023
   18cb0:	00022f17 	.word	0x00022f17
   18cb4:	00026081 	.word	0x00026081
   18cb8:	0002605f 	.word	0x0002605f
   18cbc:	20009ef8 	.word	0x20009ef8
   18cc0:	000189b5 	.word	0x000189b5
   18cc4:	000260a1 	.word	0x000260a1
   18cc8:	200094e8 	.word	0x200094e8
   18ccc:	000187b1 	.word	0x000187b1
   18cd0:	2000b7db 	.word	0x2000b7db
   18cd4:	20009638 	.word	0x20009638
   18cd8:	00025f88 	.word	0x00025f88

00018cdc <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   18cdc:	2804      	cmp	r0, #4
{
   18cde:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   18ce0:	d907      	bls.n	18cf2 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   18ce2:	2145      	movs	r1, #69	; 0x45
   18ce4:	480d      	ldr	r0, [pc, #52]	; (18d1c <dk_set_led+0x40>)
   18ce6:	f003 ff13 	bl	1cb10 <printk>
   18cea:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   18cee:	4620      	mov	r0, r4
   18cf0:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   18cf2:	fab1 f281 	clz	r2, r1
   18cf6:	4b0a      	ldr	r3, [pc, #40]	; (18d20 <dk_set_led+0x44>)
   18cf8:	0952      	lsrs	r2, r2, #5
   18cfa:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18cfe:	7919      	ldrb	r1, [r3, #4]
   18d00:	4b08      	ldr	r3, [pc, #32]	; (18d24 <dk_set_led+0x48>)
   18d02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18d06:	f7ff fd01 	bl	1870c <gpio_pin_set_raw>
	if (err) {
   18d0a:	4604      	mov	r4, r0
   18d0c:	2800      	cmp	r0, #0
   18d0e:	d0ee      	beq.n	18cee <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   18d10:	2145      	movs	r1, #69	; 0x45
   18d12:	4805      	ldr	r0, [pc, #20]	; (18d28 <dk_set_led+0x4c>)
   18d14:	f003 fefc 	bl	1cb10 <printk>
   18d18:	e7e9      	b.n	18cee <dk_set_led+0x12>
   18d1a:	bf00      	nop
   18d1c:	000260ba 	.word	0x000260ba
   18d20:	00022738 	.word	0x00022738
   18d24:	20009f0c 	.word	0x20009f0c
   18d28:	00025f53 	.word	0x00025f53

00018d2c <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   18d2c:	4803      	ldr	r0, [pc, #12]	; (18d3c <k_sys_fatal_error_handler+0x10>)
   18d2e:	2145      	movs	r1, #69	; 0x45
{
   18d30:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   18d32:	f003 feed 	bl	1cb10 <printk>
	sys_arch_reboot(0);
   18d36:	2000      	movs	r0, #0
   18d38:	f7f5 f94e 	bl	dfd8 <sys_arch_reboot>

	CODE_UNREACHABLE;
   18d3c:	000260ee 	.word	0x000260ee

00018d40 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   18d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18d44:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   18d46:	4c21      	ldr	r4, [pc, #132]	; (18dcc <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   18d48:	4e21      	ldr	r6, [pc, #132]	; (18dd0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18d4a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   18d4e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18dd4 <check_ext_api_requests+0x94>
{
   18d52:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18d54:	45a8      	cmp	r8, r5
   18d56:	d803      	bhi.n	18d60 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   18d58:	2000      	movs	r0, #0
   18d5a:	b005      	add	sp, #20
   18d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   18d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18d62:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18d66:	681f      	ldr	r7, [r3, #0]
   18d68:	ab01      	add	r3, sp, #4
   18d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   18d6e:	220c      	movs	r2, #12
   18d70:	4619      	mov	r1, r3
   18d72:	4638      	mov	r0, r7
   18d74:	f005 fb73 	bl	1e45e <memcmp>
   18d78:	b990      	cbnz	r0, 18da0 <check_ext_api_requests+0x60>
   18d7a:	b18f      	cbz	r7, 18da0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   18d7e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18d80:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   18d82:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18d84:	4291      	cmp	r1, r2
   18d86:	d10b      	bne.n	18da0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   18d88:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   18d8a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   18d8c:	4291      	cmp	r1, r2
   18d8e:	d807      	bhi.n	18da0 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   18d90:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   18d92:	4291      	cmp	r1, r2
   18d94:	d904      	bls.n	18da0 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   18d96:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18d98:	695b      	ldr	r3, [r3, #20]
   18d9a:	ea32 0303 	bics.w	r3, r2, r3
   18d9e:	d00a      	beq.n	18db6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   18da0:	6a27      	ldr	r7, [r4, #32]
   18da2:	b167      	cbz	r7, 18dbe <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   18da4:	480c      	ldr	r0, [pc, #48]	; (18dd8 <check_ext_api_requests+0x98>)
   18da6:	f003 feb3 	bl	1cb10 <printk>
			k_panic();
   18daa:	4040      	eors	r0, r0
   18dac:	f380 8811 	msr	BASEPRI, r0
   18db0:	f04f 0004 	mov.w	r0, #4
   18db4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   18db6:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18db8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   18dba:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18dbc:	e7ca      	b.n	18d54 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   18dbe:	4648      	mov	r0, r9
   18dc0:	f003 fea6 	bl	1cb10 <printk>
			*ext_api_req->ext_api = NULL;
   18dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18dc6:	601f      	str	r7, [r3, #0]
   18dc8:	e7f5      	b.n	18db6 <check_ext_api_requests+0x76>
   18dca:	bf00      	nop
   18dcc:	0000823c 	.word	0x0000823c
   18dd0:	00021d30 	.word	0x00021d30
   18dd4:	00026139 	.word	0x00026139
   18dd8:	00026110 	.word	0x00026110

00018ddc <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   18ddc:	4b04      	ldr	r3, [pc, #16]	; (18df0 <SystemCoreClockUpdate+0x14>)
   18dde:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   18de2:	4b04      	ldr	r3, [pc, #16]	; (18df4 <SystemCoreClockUpdate+0x18>)
   18de4:	f002 0203 	and.w	r2, r2, #3
   18de8:	40d3      	lsrs	r3, r2
   18dea:	4a03      	ldr	r2, [pc, #12]	; (18df8 <SystemCoreClockUpdate+0x1c>)
   18dec:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   18dee:	4770      	bx	lr
   18df0:	40005000 	.word	0x40005000
   18df4:	07a12000 	.word	0x07a12000
   18df8:	200083e8 	.word	0x200083e8

00018dfc <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   18dfc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   18dfe:	4604      	mov	r4, r0
   18e00:	b940      	cbnz	r0, 18e14 <nrfx_clock_init+0x18>
   18e02:	4909      	ldr	r1, [pc, #36]	; (18e28 <nrfx_clock_init+0x2c>)
   18e04:	4809      	ldr	r0, [pc, #36]	; (18e2c <nrfx_clock_init+0x30>)
   18e06:	22b3      	movs	r2, #179	; 0xb3
   18e08:	f003 fe82 	bl	1cb10 <printk>
   18e0c:	21b3      	movs	r1, #179	; 0xb3
   18e0e:	4806      	ldr	r0, [pc, #24]	; (18e28 <nrfx_clock_init+0x2c>)
   18e10:	f004 f924 	bl	1d05c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   18e14:	4b06      	ldr	r3, [pc, #24]	; (18e30 <nrfx_clock_init+0x34>)
   18e16:	791a      	ldrb	r2, [r3, #4]
   18e18:	b922      	cbnz	r2, 18e24 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   18e1a:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   18e1c:	4805      	ldr	r0, [pc, #20]	; (18e34 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   18e1e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   18e20:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18e22:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   18e24:	4804      	ldr	r0, [pc, #16]	; (18e38 <nrfx_clock_init+0x3c>)
    return err_code;
   18e26:	e7fc      	b.n	18e22 <nrfx_clock_init+0x26>
   18e28:	0002616c 	.word	0x0002616c
   18e2c:	00022f17 	.word	0x00022f17
   18e30:	20009f24 	.word	0x20009f24
   18e34:	0bad0000 	.word	0x0bad0000
   18e38:	0bad000c 	.word	0x0bad000c

00018e3c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   18e3c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18e3e:	4b0d      	ldr	r3, [pc, #52]	; (18e74 <nrfx_clock_enable+0x38>)
   18e40:	791b      	ldrb	r3, [r3, #4]
   18e42:	b943      	cbnz	r3, 18e56 <nrfx_clock_enable+0x1a>
   18e44:	490c      	ldr	r1, [pc, #48]	; (18e78 <nrfx_clock_enable+0x3c>)
   18e46:	480d      	ldr	r0, [pc, #52]	; (18e7c <nrfx_clock_enable+0x40>)
   18e48:	22cc      	movs	r2, #204	; 0xcc
   18e4a:	f003 fe61 	bl	1cb10 <printk>
   18e4e:	21cc      	movs	r1, #204	; 0xcc
   18e50:	4809      	ldr	r0, [pc, #36]	; (18e78 <nrfx_clock_enable+0x3c>)
   18e52:	f004 f903 	bl	1d05c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   18e56:	2005      	movs	r0, #5
   18e58:	f7f4 fdb2 	bl	d9c0 <arch_irq_is_enabled>
   18e5c:	b910      	cbnz	r0, 18e64 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   18e5e:	2005      	movs	r0, #5
   18e60:	f7f4 fd9e 	bl	d9a0 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   18e64:	2201      	movs	r2, #1
   18e66:	4b06      	ldr	r3, [pc, #24]	; (18e80 <nrfx_clock_enable+0x44>)
   18e68:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   18e6c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   18e70:	bd08      	pop	{r3, pc}
   18e72:	bf00      	nop
   18e74:	20009f24 	.word	0x20009f24
   18e78:	0002616c 	.word	0x0002616c
   18e7c:	00022f17 	.word	0x00022f17
   18e80:	40005000 	.word	0x40005000

00018e84 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18e84:	4b30      	ldr	r3, [pc, #192]	; (18f48 <nrfx_clock_start+0xc4>)
{
   18e86:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18e88:	791b      	ldrb	r3, [r3, #4]
{
   18e8a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18e8c:	b953      	cbnz	r3, 18ea4 <nrfx_clock_start+0x20>
   18e8e:	492f      	ldr	r1, [pc, #188]	; (18f4c <nrfx_clock_start+0xc8>)
   18e90:	482f      	ldr	r0, [pc, #188]	; (18f50 <nrfx_clock_start+0xcc>)
   18e92:	f44f 7284 	mov.w	r2, #264	; 0x108
   18e96:	f003 fe3b 	bl	1cb10 <printk>
   18e9a:	f44f 7184 	mov.w	r1, #264	; 0x108
   18e9e:	482b      	ldr	r0, [pc, #172]	; (18f4c <nrfx_clock_start+0xc8>)
   18ea0:	f004 f8dc 	bl	1d05c <assert_post_action>
    switch (domain)
   18ea4:	2c03      	cmp	r4, #3
   18ea6:	d842      	bhi.n	18f2e <nrfx_clock_start+0xaa>
   18ea8:	e8df f004 	tbb	[pc, r4]
   18eac:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18eb0:	4b28      	ldr	r3, [pc, #160]	; (18f54 <nrfx_clock_start+0xd0>)
   18eb2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18eb6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   18eba:	03c9      	lsls	r1, r1, #15
   18ebc:	d510      	bpl.n	18ee0 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   18ebe:	f002 0203 	and.w	r2, r2, #3
   18ec2:	2a02      	cmp	r2, #2
   18ec4:	d10c      	bne.n	18ee0 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18ec6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18eca:	2200      	movs	r2, #0
   18ecc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18ed0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   18ed4:	2202      	movs	r2, #2
   18ed6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18eda:	2201      	movs	r2, #1
   18edc:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   18ede:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   18ee0:	2201      	movs	r2, #1
   18ee2:	e7f0      	b.n	18ec6 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18ee4:	2200      	movs	r2, #0
   18ee6:	4b1b      	ldr	r3, [pc, #108]	; (18f54 <nrfx_clock_start+0xd0>)
   18ee8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18eec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18ef0:	2201      	movs	r2, #1
   18ef2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18ef6:	601a      	str	r2, [r3, #0]
}
   18ef8:	e7f1      	b.n	18ede <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18efa:	2200      	movs	r2, #0
   18efc:	4b15      	ldr	r3, [pc, #84]	; (18f54 <nrfx_clock_start+0xd0>)
   18efe:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18f02:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   18f06:	f44f 7200 	mov.w	r2, #512	; 0x200
   18f0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18f0e:	2201      	movs	r2, #1
   18f10:	621a      	str	r2, [r3, #32]
}
   18f12:	e7e4      	b.n	18ede <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f14:	2200      	movs	r2, #0
   18f16:	4b0f      	ldr	r3, [pc, #60]	; (18f54 <nrfx_clock_start+0xd0>)
   18f18:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18f1c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   18f20:	f44f 7280 	mov.w	r2, #256	; 0x100
   18f24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18f28:	2201      	movs	r2, #1
   18f2a:	619a      	str	r2, [r3, #24]
}
   18f2c:	e7d7      	b.n	18ede <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   18f2e:	4907      	ldr	r1, [pc, #28]	; (18f4c <nrfx_clock_start+0xc8>)
   18f30:	4807      	ldr	r0, [pc, #28]	; (18f50 <nrfx_clock_start+0xcc>)
   18f32:	f44f 729d 	mov.w	r2, #314	; 0x13a
   18f36:	f003 fdeb 	bl	1cb10 <printk>
}
   18f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   18f3e:	f44f 719d 	mov.w	r1, #314	; 0x13a
   18f42:	4802      	ldr	r0, [pc, #8]	; (18f4c <nrfx_clock_start+0xc8>)
   18f44:	f004 b88a 	b.w	1d05c <assert_post_action>
   18f48:	20009f24 	.word	0x20009f24
   18f4c:	0002616c 	.word	0x0002616c
   18f50:	00022f17 	.word	0x00022f17
   18f54:	40005000 	.word	0x40005000

00018f58 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18f58:	4b42      	ldr	r3, [pc, #264]	; (19064 <nrfx_clock_stop+0x10c>)
{
   18f5a:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18f5c:	791b      	ldrb	r3, [r3, #4]
{
   18f5e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18f60:	b953      	cbnz	r3, 18f78 <nrfx_clock_stop+0x20>
   18f62:	4941      	ldr	r1, [pc, #260]	; (19068 <nrfx_clock_stop+0x110>)
   18f64:	4841      	ldr	r0, [pc, #260]	; (1906c <nrfx_clock_stop+0x114>)
   18f66:	f240 1241 	movw	r2, #321	; 0x141
   18f6a:	f003 fdd1 	bl	1cb10 <printk>
   18f6e:	f240 1141 	movw	r1, #321	; 0x141
   18f72:	483d      	ldr	r0, [pc, #244]	; (19068 <nrfx_clock_stop+0x110>)
   18f74:	f004 f872 	bl	1d05c <assert_post_action>
    switch (domain)
   18f78:	2c03      	cmp	r4, #3
   18f7a:	d856      	bhi.n	1902a <nrfx_clock_stop+0xd2>
   18f7c:	e8df f004 	tbb	[pc, r4]
   18f80:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   18f84:	2202      	movs	r2, #2
   18f86:	4b3a      	ldr	r3, [pc, #232]	; (19070 <nrfx_clock_stop+0x118>)
   18f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f8c:	2200      	movs	r2, #0
   18f8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18f92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18f96:	2201      	movs	r2, #1
   18f98:	60da      	str	r2, [r3, #12]
   18f9a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   18f9e:	4e34      	ldr	r6, [pc, #208]	; (19070 <nrfx_clock_stop+0x118>)
    switch (domain)
   18fa0:	2c02      	cmp	r4, #2
   18fa2:	d04f      	beq.n	19044 <nrfx_clock_stop+0xec>
   18fa4:	2c03      	cmp	r4, #3
   18fa6:	d050      	beq.n	1904a <nrfx_clock_stop+0xf2>
   18fa8:	2c00      	cmp	r4, #0
   18faa:	d151      	bne.n	19050 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18fac:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   18fb0:	03db      	lsls	r3, r3, #15
   18fb2:	d51f      	bpl.n	18ff4 <nrfx_clock_stop+0x9c>
   18fb4:	2001      	movs	r0, #1
   18fb6:	f007 fe6f 	bl	20c98 <nrfx_busy_wait>
   18fba:	3d01      	subs	r5, #1
   18fbc:	d1f0      	bne.n	18fa0 <nrfx_clock_stop+0x48>
   18fbe:	e019      	b.n	18ff4 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   18fc0:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18fc2:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18fc4:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   18fc8:	4c29      	ldr	r4, [pc, #164]	; (19070 <nrfx_clock_stop+0x118>)
   18fca:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18fce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18fd2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18fd6:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18fd8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18fdc:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18fe0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18fe4:	03d2      	lsls	r2, r2, #15
   18fe6:	d505      	bpl.n	18ff4 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   18fe8:	b123      	cbz	r3, 18ff4 <nrfx_clock_stop+0x9c>
   18fea:	2001      	movs	r0, #1
   18fec:	f007 fe54 	bl	20c98 <nrfx_busy_wait>
   18ff0:	3d01      	subs	r5, #1
   18ff2:	d1f1      	bne.n	18fd8 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   18ff4:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   18ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
   18ffa:	4b1d      	ldr	r3, [pc, #116]	; (19070 <nrfx_clock_stop+0x118>)
   18ffc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19000:	2200      	movs	r2, #0
   19002:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   19006:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1900a:	2201      	movs	r2, #1
   1900c:	625a      	str	r2, [r3, #36]	; 0x24
}
   1900e:	e7c4      	b.n	18f9a <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   19010:	f44f 7280 	mov.w	r2, #256	; 0x100
   19014:	4b16      	ldr	r3, [pc, #88]	; (19070 <nrfx_clock_stop+0x118>)
   19016:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1901a:	2200      	movs	r2, #0
   1901c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   19020:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19024:	2201      	movs	r2, #1
   19026:	61da      	str	r2, [r3, #28]
}
   19028:	e7b7      	b.n	18f9a <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   1902a:	490f      	ldr	r1, [pc, #60]	; (19068 <nrfx_clock_stop+0x110>)
   1902c:	480f      	ldr	r0, [pc, #60]	; (1906c <nrfx_clock_stop+0x114>)
   1902e:	f240 125d 	movw	r2, #349	; 0x15d
   19032:	f003 fd6d 	bl	1cb10 <printk>
   19036:	f240 115d 	movw	r1, #349	; 0x15d
   1903a:	480b      	ldr	r0, [pc, #44]	; (19068 <nrfx_clock_stop+0x110>)
}
   1903c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   19040:	f004 b80c 	b.w	1d05c <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   19044:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   19048:	e7b2      	b.n	18fb0 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1904a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1904e:	e7af      	b.n	18fb0 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   19050:	4908      	ldr	r1, [pc, #32]	; (19074 <nrfx_clock_stop+0x11c>)
   19052:	4806      	ldr	r0, [pc, #24]	; (1906c <nrfx_clock_stop+0x114>)
   19054:	f240 3242 	movw	r2, #834	; 0x342
   19058:	f003 fd5a 	bl	1cb10 <printk>
   1905c:	f240 3142 	movw	r1, #834	; 0x342
   19060:	4804      	ldr	r0, [pc, #16]	; (19074 <nrfx_clock_stop+0x11c>)
   19062:	e7eb      	b.n	1903c <nrfx_clock_stop+0xe4>
   19064:	20009f24 	.word	0x20009f24
   19068:	0002616c 	.word	0x0002616c
   1906c:	00022f17 	.word	0x00022f17
   19070:	40005000 	.word	0x40005000
   19074:	000261a9 	.word	0x000261a9

00019078 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19078:	4b28      	ldr	r3, [pc, #160]	; (1911c <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1907a:	b510      	push	{r4, lr}
   1907c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   19080:	b152      	cbz	r2, 19098 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19082:	2000      	movs	r0, #0
   19084:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   19088:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1908c:	2201      	movs	r2, #1
   1908e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19092:	4b23      	ldr	r3, [pc, #140]	; (19120 <nrfx_power_clock_irq_handler+0xa8>)
   19094:	681b      	ldr	r3, [r3, #0]
   19096:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19098:	4b20      	ldr	r3, [pc, #128]	; (1911c <nrfx_power_clock_irq_handler+0xa4>)
   1909a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1909e:	b18a      	cbz	r2, 190c4 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   190a0:	2200      	movs	r2, #0
   190a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   190a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   190aa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   190ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   190b2:	f002 0203 	and.w	r2, r2, #3
   190b6:	2a01      	cmp	r2, #1
   190b8:	f04f 0102 	mov.w	r1, #2
   190bc:	d126      	bne.n	1910c <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   190be:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   190c2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   190c4:	4b15      	ldr	r3, [pc, #84]	; (1911c <nrfx_power_clock_irq_handler+0xa4>)
   190c6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   190ca:	b162      	cbz	r2, 190e6 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   190cc:	2200      	movs	r2, #0
   190ce:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   190d2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   190d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   190da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   190de:	4b10      	ldr	r3, [pc, #64]	; (19120 <nrfx_power_clock_irq_handler+0xa8>)
   190e0:	2004      	movs	r0, #4
   190e2:	681b      	ldr	r3, [r3, #0]
   190e4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   190e6:	4b0d      	ldr	r3, [pc, #52]	; (1911c <nrfx_power_clock_irq_handler+0xa4>)
   190e8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   190ec:	b1aa      	cbz	r2, 1911a <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   190ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   190f2:	2200      	movs	r2, #0
   190f4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   190f8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   190fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   19100:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   19104:	4b06      	ldr	r3, [pc, #24]	; (19120 <nrfx_power_clock_irq_handler+0xa8>)
   19106:	2005      	movs	r0, #5
   19108:	681b      	ldr	r3, [r3, #0]
   1910a:	4718      	bx	r3
   1910c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19110:	4b03      	ldr	r3, [pc, #12]	; (19120 <nrfx_power_clock_irq_handler+0xa8>)
   19112:	2001      	movs	r0, #1
   19114:	681b      	ldr	r3, [r3, #0]
   19116:	4798      	blx	r3
   19118:	e7d4      	b.n	190c4 <nrfx_power_clock_irq_handler+0x4c>
}
   1911a:	bd10      	pop	{r4, pc}
   1911c:	40005000 	.word	0x40005000
   19120:	20009f24 	.word	0x20009f24

00019124 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   19124:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   19126:	4c0a      	ldr	r4, [pc, #40]	; (19150 <nrfx_dppi_channel_alloc+0x2c>)
   19128:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   1912a:	43ce      	mvns	r6, r1
   1912c:	d00e      	beq.n	1914c <nrfx_dppi_channel_alloc+0x28>
   1912e:	2300      	movs	r3, #0
   19130:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   19132:	fa26 f502 	lsr.w	r5, r6, r2
   19136:	07ed      	lsls	r5, r5, #31
   19138:	f103 0301 	add.w	r3, r3, #1
   1913c:	d5f8      	bpl.n	19130 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   1913e:	2301      	movs	r3, #1
   19140:	4093      	lsls	r3, r2
   19142:	430b      	orrs	r3, r1
    *p_channel = channel;
   19144:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   19146:	4803      	ldr	r0, [pc, #12]	; (19154 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   19148:	6023      	str	r3, [r4, #0]
}
   1914a:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1914c:	4802      	ldr	r0, [pc, #8]	; (19158 <nrfx_dppi_channel_alloc+0x34>)
   1914e:	e7fc      	b.n	1914a <nrfx_dppi_channel_alloc+0x26>
   19150:	20009f2c 	.word	0x20009f2c
   19154:	0bad0000 	.word	0x0bad0000
   19158:	0bad0002 	.word	0x0bad0002

0001915c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1915c:	2301      	movs	r3, #1
   1915e:	fa03 f000 	lsl.w	r0, r3, r0
   19162:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   19164:	b193      	cbz	r3, 1918c <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   19166:	f04f 0320 	mov.w	r3, #32
   1916a:	f3ef 8111 	mrs	r1, BASEPRI
   1916e:	f383 8811 	msr	BASEPRI, r3
   19172:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   19176:	4a06      	ldr	r2, [pc, #24]	; (19190 <nrfx_gpiote_channel_free+0x34>)
   19178:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1917a:	ea23 0000 	bic.w	r0, r3, r0
   1917e:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   19180:	f381 8811 	msr	BASEPRI, r1
   19184:	f3bf 8f6f 	isb	sy
   19188:	4802      	ldr	r0, [pc, #8]	; (19194 <nrfx_gpiote_channel_free+0x38>)
   1918a:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1918c:	4802      	ldr	r0, [pc, #8]	; (19198 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1918e:	4770      	bx	lr
   19190:	20009f30 	.word	0x20009f30
   19194:	0bad0000 	.word	0x0bad0000
   19198:	0bad0004 	.word	0x0bad0004

0001919c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   191a0:	22ff      	movs	r2, #255	; 0xff
{
   191a2:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   191a4:	2601      	movs	r6, #1
{
   191a6:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   191a8:	f8df e054 	ldr.w	lr, [pc, #84]	; 19200 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   191ac:	4815      	ldr	r0, [pc, #84]	; (19204 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   191ae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 19208 <nrfx_gpiote_channel_alloc+0x6c>
   191b2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   191b4:	f04f 0120 	mov.w	r1, #32
   191b8:	f3ef 8c11 	mrs	ip, BASEPRI
   191bc:	f381 8811 	msr	BASEPRI, r1
   191c0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   191c4:	fa22 f103 	lsr.w	r1, r2, r3
   191c8:	07c9      	lsls	r1, r1, #31
   191ca:	d50a      	bpl.n	191e2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   191cc:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   191d0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   191d4:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   191d6:	bf01      	itttt	eq
   191d8:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   191da:	4339      	orreq	r1, r7
   191dc:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   191e0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   191e2:	f38c 8811 	msr	BASEPRI, ip
   191e6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   191ea:	4540      	cmp	r0, r8
   191ec:	d005      	beq.n	191fa <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   191ee:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   191f2:	439a      	bics	r2, r3
   191f4:	f104 0401 	add.w	r4, r4, #1
   191f8:	d1db      	bne.n	191b2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   191fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191fe:	bf00      	nop
   19200:	20009f30 	.word	0x20009f30
   19204:	0bad0002 	.word	0x0bad0002
   19208:	0bad0000 	.word	0x0bad0000

0001920c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1920c:	b570      	push	{r4, r5, r6, lr}
   1920e:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   19210:	460d      	mov	r5, r1
   19212:	b941      	cbnz	r1, 19226 <nrfx_ipc_init+0x1a>
   19214:	490b      	ldr	r1, [pc, #44]	; (19244 <nrfx_ipc_init+0x38>)
   19216:	480c      	ldr	r0, [pc, #48]	; (19248 <nrfx_ipc_init+0x3c>)
   19218:	2232      	movs	r2, #50	; 0x32
   1921a:	f003 fc79 	bl	1cb10 <printk>
   1921e:	2132      	movs	r1, #50	; 0x32
   19220:	4808      	ldr	r0, [pc, #32]	; (19244 <nrfx_ipc_init+0x38>)
   19222:	f003 ff1b 	bl	1d05c <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19226:	4c09      	ldr	r4, [pc, #36]	; (1924c <nrfx_ipc_init+0x40>)
   19228:	7923      	ldrb	r3, [r4, #4]
   1922a:	b943      	cbnz	r3, 1923e <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1922c:	202a      	movs	r0, #42	; 0x2a
   1922e:	f7f4 fbb7 	bl	d9a0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19232:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   19234:	4806      	ldr	r0, [pc, #24]	; (19250 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19236:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   19238:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1923a:	60a6      	str	r6, [r4, #8]
}
   1923c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1923e:	4805      	ldr	r0, [pc, #20]	; (19254 <nrfx_ipc_init+0x48>)
   19240:	e7fc      	b.n	1923c <nrfx_ipc_init+0x30>
   19242:	bf00      	nop
   19244:	000261dd 	.word	0x000261dd
   19248:	00022f17 	.word	0x00022f17
   1924c:	20009f90 	.word	0x20009f90
   19250:	0bad0000 	.word	0x0bad0000
   19254:	0bad000c 	.word	0x0bad000c

00019258 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   19258:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1925a:	4604      	mov	r4, r0
   1925c:	b940      	cbnz	r0, 19270 <nrfx_ipc_config_load+0x18>
   1925e:	4919      	ldr	r1, [pc, #100]	; (192c4 <nrfx_ipc_config_load+0x6c>)
   19260:	4819      	ldr	r0, [pc, #100]	; (192c8 <nrfx_ipc_config_load+0x70>)
   19262:	2244      	movs	r2, #68	; 0x44
   19264:	f003 fc54 	bl	1cb10 <printk>
   19268:	2144      	movs	r1, #68	; 0x44
   1926a:	4816      	ldr	r0, [pc, #88]	; (192c4 <nrfx_ipc_config_load+0x6c>)
   1926c:	f003 fef6 	bl	1d05c <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   19270:	4b16      	ldr	r3, [pc, #88]	; (192cc <nrfx_ipc_config_load+0x74>)
   19272:	791b      	ldrb	r3, [r3, #4]
   19274:	2b01      	cmp	r3, #1
   19276:	d008      	beq.n	1928a <nrfx_ipc_config_load+0x32>
   19278:	4912      	ldr	r1, [pc, #72]	; (192c4 <nrfx_ipc_config_load+0x6c>)
   1927a:	4813      	ldr	r0, [pc, #76]	; (192c8 <nrfx_ipc_config_load+0x70>)
   1927c:	2245      	movs	r2, #69	; 0x45
   1927e:	f003 fc47 	bl	1cb10 <printk>
   19282:	2145      	movs	r1, #69	; 0x45
   19284:	480f      	ldr	r0, [pc, #60]	; (192c4 <nrfx_ipc_config_load+0x6c>)
   19286:	f003 fee9 	bl	1d05c <assert_post_action>
{
   1928a:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   1928c:	4a10      	ldr	r2, [pc, #64]	; (192d0 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1928e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   19292:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19296:	3301      	adds	r3, #1
   19298:	2b10      	cmp	r3, #16
   1929a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1929e:	d1f6      	bne.n	1928e <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   192a0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   192a2:	4a0b      	ldr	r2, [pc, #44]	; (192d0 <nrfx_ipc_config_load+0x78>)
   192a4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   192a8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   192ac:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   192b0:	3301      	adds	r3, #1
   192b2:	2b10      	cmp	r3, #16
   192b4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   192b8:	d1f6      	bne.n	192a8 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   192ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   192be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   192c2:	bd38      	pop	{r3, r4, r5, pc}
   192c4:	000261dd 	.word	0x000261dd
   192c8:	00022f17 	.word	0x00022f17
   192cc:	20009f90 	.word	0x20009f90
   192d0:	4002a000 	.word	0x4002a000

000192d4 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   192d4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   192d6:	4b0a      	ldr	r3, [pc, #40]	; (19300 <nrfx_ipc_receive_event_enable+0x2c>)
{
   192d8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   192da:	791b      	ldrb	r3, [r3, #4]
   192dc:	2b01      	cmp	r3, #1
   192de:	d008      	beq.n	192f2 <nrfx_ipc_receive_event_enable+0x1e>
   192e0:	4908      	ldr	r1, [pc, #32]	; (19304 <nrfx_ipc_receive_event_enable+0x30>)
   192e2:	4809      	ldr	r0, [pc, #36]	; (19308 <nrfx_ipc_receive_event_enable+0x34>)
   192e4:	226a      	movs	r2, #106	; 0x6a
   192e6:	f003 fc13 	bl	1cb10 <printk>
   192ea:	216a      	movs	r1, #106	; 0x6a
   192ec:	4805      	ldr	r0, [pc, #20]	; (19304 <nrfx_ipc_receive_event_enable+0x30>)
   192ee:	f003 feb5 	bl	1d05c <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   192f2:	2301      	movs	r3, #1
   192f4:	fa03 f404 	lsl.w	r4, r3, r4
   192f8:	4b04      	ldr	r3, [pc, #16]	; (1930c <nrfx_ipc_receive_event_enable+0x38>)
   192fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   192fe:	bd10      	pop	{r4, pc}
   19300:	20009f90 	.word	0x20009f90
   19304:	000261dd 	.word	0x000261dd
   19308:	00022f17 	.word	0x00022f17
   1930c:	4002a000 	.word	0x4002a000

00019310 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   19310:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   19312:	4b0a      	ldr	r3, [pc, #40]	; (1933c <nrfx_ipc_receive_event_disable+0x2c>)
{
   19314:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   19316:	791b      	ldrb	r3, [r3, #4]
   19318:	2b01      	cmp	r3, #1
   1931a:	d008      	beq.n	1932e <nrfx_ipc_receive_event_disable+0x1e>
   1931c:	4908      	ldr	r1, [pc, #32]	; (19340 <nrfx_ipc_receive_event_disable+0x30>)
   1931e:	4809      	ldr	r0, [pc, #36]	; (19344 <nrfx_ipc_receive_event_disable+0x34>)
   19320:	2270      	movs	r2, #112	; 0x70
   19322:	f003 fbf5 	bl	1cb10 <printk>
   19326:	2170      	movs	r1, #112	; 0x70
   19328:	4805      	ldr	r0, [pc, #20]	; (19340 <nrfx_ipc_receive_event_disable+0x30>)
   1932a:	f003 fe97 	bl	1d05c <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1932e:	2301      	movs	r3, #1
   19330:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   19334:	4b04      	ldr	r3, [pc, #16]	; (19348 <nrfx_ipc_receive_event_disable+0x38>)
   19336:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   1933a:	bd10      	pop	{r4, pc}
   1933c:	20009f90 	.word	0x20009f90
   19340:	000261dd 	.word	0x000261dd
   19344:	00022f17 	.word	0x00022f17
   19348:	4002a000 	.word	0x4002a000

0001934c <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   1934c:	4b15      	ldr	r3, [pc, #84]	; (193a4 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1934e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19352:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   19356:	4f14      	ldr	r7, [pc, #80]	; (193a8 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   19358:	4635      	mov	r5, r6
   1935a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 193ac <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   1935e:	b935      	cbnz	r5, 1936e <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   19360:	4b13      	ldr	r3, [pc, #76]	; (193b0 <nrfx_ipc_irq_handler+0x64>)
   19362:	4630      	mov	r0, r6
}
   19364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   19368:	681a      	ldr	r2, [r3, #0]
   1936a:	6899      	ldr	r1, [r3, #8]
   1936c:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1936e:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   19372:	2301      	movs	r3, #1
  return __builtin_clz(value);
   19374:	fab4 f484 	clz	r4, r4
   19378:	40a3      	lsls	r3, r4
   1937a:	2c0f      	cmp	r4, #15
   1937c:	ea25 0503 	bic.w	r5, r5, r3
   19380:	d90a      	bls.n	19398 <nrfx_ipc_irq_handler+0x4c>
   19382:	4639      	mov	r1, r7
   19384:	4640      	mov	r0, r8
   19386:	f240 12e5 	movw	r2, #485	; 0x1e5
   1938a:	f003 fbc1 	bl	1cb10 <printk>
   1938e:	f240 11e5 	movw	r1, #485	; 0x1e5
   19392:	4638      	mov	r0, r7
   19394:	f003 fe62 	bl	1d05c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19398:	2200      	movs	r2, #0
   1939a:	4b06      	ldr	r3, [pc, #24]	; (193b4 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1939c:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1939e:	511a      	str	r2, [r3, r4]
}
   193a0:	e7dd      	b.n	1935e <nrfx_ipc_irq_handler+0x12>
   193a2:	bf00      	nop
   193a4:	4002a000 	.word	0x4002a000
   193a8:	00026218 	.word	0x00026218
   193ac:	00022f17 	.word	0x00022f17
   193b0:	20009f90 	.word	0x20009f90
   193b4:	4002a100 	.word	0x4002a100

000193b8 <nvmc_word_write>:
   193b8:	4a04      	ldr	r2, [pc, #16]	; (193cc <nvmc_word_write+0x14>)
   193ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   193be:	07db      	lsls	r3, r3, #31
   193c0:	d5fb      	bpl.n	193ba <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   193c2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   193c4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   193c8:	4770      	bx	lr
   193ca:	bf00      	nop
   193cc:	40039000 	.word	0x40039000

000193d0 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   193d0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   193d4:	b510      	push	{r4, lr}
   193d6:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   193d8:	d30a      	bcc.n	193f0 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   193da:	4910      	ldr	r1, [pc, #64]	; (1941c <nrfx_nvmc_page_erase+0x4c>)
   193dc:	4810      	ldr	r0, [pc, #64]	; (19420 <nrfx_nvmc_page_erase+0x50>)
   193de:	f44f 7282 	mov.w	r2, #260	; 0x104
   193e2:	f003 fb95 	bl	1cb10 <printk>
   193e6:	f44f 7182 	mov.w	r1, #260	; 0x104
   193ea:	480c      	ldr	r0, [pc, #48]	; (1941c <nrfx_nvmc_page_erase+0x4c>)
   193ec:	f003 fe36 	bl	1d05c <assert_post_action>
    return !(addr % flash_page_size_get());
   193f0:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   193f4:	b97b      	cbnz	r3, 19416 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   193f6:	2202      	movs	r2, #2
   193f8:	4b0a      	ldr	r3, [pc, #40]	; (19424 <nrfx_nvmc_page_erase+0x54>)
   193fa:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   193fe:	f04f 32ff 	mov.w	r2, #4294967295
   19402:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   19404:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   19408:	07d2      	lsls	r2, r2, #31
   1940a:	d5fb      	bpl.n	19404 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1940c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1940e:	4806      	ldr	r0, [pc, #24]	; (19428 <nrfx_nvmc_page_erase+0x58>)
   19410:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   19414:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   19416:	4805      	ldr	r0, [pc, #20]	; (1942c <nrfx_nvmc_page_erase+0x5c>)
   19418:	e7fc      	b.n	19414 <nrfx_nvmc_page_erase+0x44>
   1941a:	bf00      	nop
   1941c:	0002624a 	.word	0x0002624a
   19420:	00022f17 	.word	0x00022f17
   19424:	40039000 	.word	0x40039000
   19428:	0bad0000 	.word	0x0bad0000
   1942c:	0bad000a 	.word	0x0bad000a

00019430 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   19430:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   19434:	b570      	push	{r4, r5, r6, lr}
   19436:	4604      	mov	r4, r0
   19438:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1943a:	d30a      	bcc.n	19452 <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   1943c:	4911      	ldr	r1, [pc, #68]	; (19484 <nrfx_nvmc_word_write+0x54>)
   1943e:	4812      	ldr	r0, [pc, #72]	; (19488 <nrfx_nvmc_word_write+0x58>)
   19440:	f44f 72c9 	mov.w	r2, #402	; 0x192
   19444:	f003 fb64 	bl	1cb10 <printk>
   19448:	f44f 71c9 	mov.w	r1, #402	; 0x192
   1944c:	480d      	ldr	r0, [pc, #52]	; (19484 <nrfx_nvmc_word_write+0x54>)
   1944e:	f003 fe05 	bl	1d05c <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   19452:	07a3      	lsls	r3, r4, #30
   19454:	d00a      	beq.n	1946c <nrfx_nvmc_word_write+0x3c>
   19456:	490b      	ldr	r1, [pc, #44]	; (19484 <nrfx_nvmc_word_write+0x54>)
   19458:	480b      	ldr	r0, [pc, #44]	; (19488 <nrfx_nvmc_word_write+0x58>)
   1945a:	f240 1293 	movw	r2, #403	; 0x193
   1945e:	f003 fb57 	bl	1cb10 <printk>
   19462:	f240 1193 	movw	r1, #403	; 0x193
   19466:	4807      	ldr	r0, [pc, #28]	; (19484 <nrfx_nvmc_word_write+0x54>)
   19468:	f003 fdf8 	bl	1d05c <assert_post_action>
   1946c:	2301      	movs	r3, #1
   1946e:	4e07      	ldr	r6, [pc, #28]	; (1948c <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   19470:	4629      	mov	r1, r5
   19472:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   19476:	4620      	mov	r0, r4
   19478:	f7ff ff9e 	bl	193b8 <nvmc_word_write>
   1947c:	2300      	movs	r3, #0
   1947e:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   19482:	bd70      	pop	{r4, r5, r6, pc}
   19484:	0002624a 	.word	0x0002624a
   19488:	00022f17 	.word	0x00022f17
   1948c:	40039000 	.word	0x40039000

00019490 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   19490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19494:	460e      	mov	r6, r1
   19496:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   19498:	4d0c      	ldr	r5, [pc, #48]	; (194cc <metal_generic_dev_open+0x3c>)
   1949a:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1949e:	42ac      	cmp	r4, r5
   194a0:	d103      	bne.n	194aa <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   194a2:	f06f 0012 	mvn.w	r0, #18
   194a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   194aa:	4631      	mov	r1, r6
   194ac:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   194b0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   194b4:	f004 ffb6 	bl	1e424 <strcmp>
   194b8:	b930      	cbnz	r0, 194c8 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   194ba:	4640      	mov	r0, r8
			*device = dev;
   194bc:	f8c7 8000 	str.w	r8, [r7]
}
   194c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   194c4:	f007 bcca 	b.w	20e5c <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   194c8:	6824      	ldr	r4, [r4, #0]
   194ca:	e7e8      	b.n	1949e <metal_generic_dev_open+0xe>
   194cc:	20009f9c 	.word	0x20009f9c

000194d0 <metal_bus_find>:
{
   194d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194d4:	4607      	mov	r7, r0
   194d6:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   194d8:	4e0b      	ldr	r6, [pc, #44]	; (19508 <metal_bus_find+0x38>)
   194da:	f856 4f08 	ldr.w	r4, [r6, #8]!
   194de:	42b4      	cmp	r4, r6
   194e0:	d102      	bne.n	194e8 <metal_bus_find+0x18>
	return -ENOENT;
   194e2:	f06f 0001 	mvn.w	r0, #1
   194e6:	e00a      	b.n	194fe <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   194e8:	4639      	mov	r1, r7
   194ea:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   194ee:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   194f2:	f004 ff97 	bl	1e424 <strcmp>
   194f6:	b920      	cbnz	r0, 19502 <metal_bus_find+0x32>
   194f8:	b11d      	cbz	r5, 19502 <metal_bus_find+0x32>
			*result = bus;
   194fa:	f8c5 8000 	str.w	r8, [r5]
}
   194fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   19502:	6824      	ldr	r4, [r4, #0]
   19504:	e7eb      	b.n	194de <metal_bus_find+0xe>
   19506:	bf00      	nop
   19508:	20009f9c 	.word	0x20009f9c

0001950c <metal_bus_register>:
{
   1950c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1950e:	4604      	mov	r4, r0
   19510:	b910      	cbnz	r0, 19518 <metal_bus_register+0xc>
		return -EINVAL;
   19512:	f06f 0015 	mvn.w	r0, #21
}
   19516:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   19518:	6800      	ldr	r0, [r0, #0]
   1951a:	2800      	cmp	r0, #0
   1951c:	d0f9      	beq.n	19512 <metal_bus_register+0x6>
   1951e:	f004 ff71 	bl	1e404 <strlen>
   19522:	2800      	cmp	r0, #0
   19524:	d0f5      	beq.n	19512 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   19526:	2100      	movs	r1, #0
   19528:	6820      	ldr	r0, [r4, #0]
   1952a:	f7ff ffd1 	bl	194d0 <metal_bus_find>
   1952e:	b1c0      	cbz	r0, 19562 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   19530:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   19534:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   19538:	4b0c      	ldr	r3, [pc, #48]	; (1956c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1953a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1953e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   19540:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   19544:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   19546:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   19548:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1954a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1954c:	781a      	ldrb	r2, [r3, #0]
   1954e:	2a06      	cmp	r2, #6
   19550:	d905      	bls.n	1955e <metal_bus_register+0x52>
   19552:	685b      	ldr	r3, [r3, #4]
   19554:	b143      	cbz	r3, 19568 <metal_bus_register+0x5c>
   19556:	2007      	movs	r0, #7
   19558:	6822      	ldr	r2, [r4, #0]
   1955a:	4905      	ldr	r1, [pc, #20]	; (19570 <metal_bus_register+0x64>)
   1955c:	4798      	blx	r3
	return 0;
   1955e:	2000      	movs	r0, #0
   19560:	e7d9      	b.n	19516 <metal_bus_register+0xa>
		return -EEXIST;
   19562:	f06f 0010 	mvn.w	r0, #16
   19566:	e7d6      	b.n	19516 <metal_bus_register+0xa>
	return 0;
   19568:	4618      	mov	r0, r3
   1956a:	e7d4      	b.n	19516 <metal_bus_register+0xa>
   1956c:	20009f9c 	.word	0x20009f9c
   19570:	00026286 	.word	0x00026286

00019574 <metal_register_generic_device>:
{
   19574:	b510      	push	{r4, lr}
   19576:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   19578:	6800      	ldr	r0, [r0, #0]
   1957a:	b910      	cbnz	r0, 19582 <metal_register_generic_device+0xe>
		return -EINVAL;
   1957c:	f06f 0015 	mvn.w	r0, #21
}
   19580:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   19582:	f004 ff3f 	bl	1e404 <strlen>
   19586:	2800      	cmp	r0, #0
   19588:	d0f8      	beq.n	1957c <metal_register_generic_device+0x8>
   1958a:	68a3      	ldr	r3, [r4, #8]
   1958c:	2b01      	cmp	r3, #1
   1958e:	d8f5      	bhi.n	1957c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   19590:	4b06      	ldr	r3, [pc, #24]	; (195ac <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   19592:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   19596:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   19598:	4b05      	ldr	r3, [pc, #20]	; (195b0 <metal_register_generic_device+0x3c>)
   1959a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1959c:	f103 0018 	add.w	r0, r3, #24
   195a0:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   195a2:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   195a4:	61d9      	str	r1, [r3, #28]
	return 0;
   195a6:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   195a8:	6011      	str	r1, [r2, #0]
}
   195aa:	e7e9      	b.n	19580 <metal_register_generic_device+0xc>
   195ac:	200083ec 	.word	0x200083ec
   195b0:	20009f9c 	.word	0x20009f9c

000195b4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   195b4:	b538      	push	{r3, r4, r5, lr}
   195b6:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   195b8:	4c0d      	ldr	r4, [pc, #52]	; (195f0 <metal_init+0x3c>)
   195ba:	2220      	movs	r2, #32
   195bc:	4620      	mov	r0, r4
   195be:	2100      	movs	r1, #0
   195c0:	f004 ff89 	bl	1e4d6 <memset>

	_metal.common.log_handler   = params->log_handler;
   195c4:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   195c6:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   195c8:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   195ca:	4623      	mov	r3, r4
   195cc:	792a      	ldrb	r2, [r5, #4]
   195ce:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   195d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   195d6:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   195da:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   195de:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   195e2:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   195e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   195ea:	f000 b803 	b.w	195f4 <metal_sys_init>
   195ee:	bf00      	nop
   195f0:	20009f9c 	.word	0x20009f9c

000195f4 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   195f4:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   195f6:	4802      	ldr	r0, [pc, #8]	; (19600 <metal_sys_init+0xc>)
   195f8:	f7ff ff88 	bl	1950c <metal_bus_register>
	return 0;
}
   195fc:	2000      	movs	r0, #0
   195fe:	bd08      	pop	{r3, pc}
   19600:	200083ec 	.word	0x200083ec

00019604 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   19604:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   19606:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   19608:	2b06      	cmp	r3, #6
{
   1960a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1960c:	bf88      	it	hi
   1960e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   19610:	4b09      	ldr	r3, [pc, #36]	; (19638 <metal_zephyr_log_handler+0x34>)
{
   19612:	ac05      	add	r4, sp, #20
   19614:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   19618:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1961c:	4807      	ldr	r0, [pc, #28]	; (1963c <metal_zephyr_log_handler+0x38>)
   1961e:	f003 fa77 	bl	1cb10 <printk>

	va_start(args, format);
	vprintk(format, args);
   19622:	4621      	mov	r1, r4
   19624:	4628      	mov	r0, r5
	va_start(args, format);
   19626:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   19628:	f7f0 fdb2 	bl	a190 <vprintk>
	va_end(args);
}
   1962c:	b002      	add	sp, #8
   1962e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19632:	b003      	add	sp, #12
   19634:	4770      	bx	lr
   19636:	bf00      	nop
   19638:	00022758 	.word	0x00022758
   1963c:	00024188 	.word	0x00024188

00019640 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   19640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19644:	b087      	sub	sp, #28
   19646:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   19648:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1964a:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   1964c:	4293      	cmp	r3, r2
{
   1964e:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   19650:	d349      	bcc.n	196e6 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   19652:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   19654:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   19658:	42b4      	cmp	r4, r6
   1965a:	d103      	bne.n	19664 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1965c:	2000      	movs	r0, #0
}
   1965e:	b007      	add	sp, #28
   19660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   19664:	fb0b f704 	mul.w	r7, fp, r4
   19668:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1966c:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   1966e:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   19672:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   19676:	bb02      	cbnz	r2, 196ba <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   19678:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   1967c:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   19680:	f8dc 3004 	ldr.w	r3, [ip, #4]
   19684:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   19686:	f8dc c008 	ldr.w	ip, [ip, #8]
   1968a:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   1968c:	f10c 33ff 	add.w	r3, ip, #4294967295
   19690:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   19694:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   19698:	f1cc 0c00 	rsb	ip, ip, #0
   1969c:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   196a0:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   196a4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   196a8:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   196ac:	4561      	cmp	r1, ip
   196ae:	bf28      	it	cs
   196b0:	f04f 31ff 	movcs.w	r1, #4294967295
   196b4:	3306      	adds	r3, #6
   196b6:	f007 fb98 	bl	20dea <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   196ba:	f858 3007 	ldr.w	r3, [r8, r7]
   196be:	9a05      	ldr	r2, [sp, #20]
   196c0:	9302      	str	r3, [sp, #8]
   196c2:	6a2b      	ldr	r3, [r5, #32]
   196c4:	4628      	mov	r0, r5
   196c6:	6a1b      	ldr	r3, [r3, #32]
   196c8:	b2a1      	uxth	r1, r4
   196ca:	9301      	str	r3, [sp, #4]
   196cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   196ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   196d2:	9300      	str	r3, [sp, #0]
   196d4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   196d8:	464b      	mov	r3, r9
   196da:	f007 fbdc 	bl	20e96 <virtqueue_create>
		if (ret)
   196de:	2800      	cmp	r0, #0
   196e0:	d1bd      	bne.n	1965e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   196e2:	3401      	adds	r4, #1
   196e4:	e7b8      	b.n	19658 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   196e6:	4801      	ldr	r0, [pc, #4]	; (196ec <virtio_create_virtqueues+0xac>)
   196e8:	e7b9      	b.n	1965e <virtio_create_virtqueues+0x1e>
   196ea:	bf00      	nop
   196ec:	fffff440 	.word	0xfffff440

000196f0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   196f0:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   196f2:	8944      	ldrh	r4, [r0, #10]
   196f4:	428c      	cmp	r4, r1
   196f6:	d312      	bcc.n	1971e <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   196f8:	6a03      	ldr	r3, [r0, #32]
   196fa:	3c01      	subs	r4, #1
   196fc:	885d      	ldrh	r5, [r3, #2]
   196fe:	402c      	ands	r4, r5
   19700:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   19704:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   19706:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   19708:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1970c:	6a02      	ldr	r2, [r0, #32]
   1970e:	8853      	ldrh	r3, [r2, #2]
   19710:	3301      	adds	r3, #1
   19712:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   19714:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   19716:	3301      	adds	r3, #1
   19718:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1971a:	2000      	movs	r0, #0
}
   1971c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1971e:	4801      	ldr	r0, [pc, #4]	; (19724 <virtqueue_add_consumed_buffer+0x34>)
   19720:	e7fc      	b.n	1971c <virtqueue_add_consumed_buffer+0x2c>
   19722:	bf00      	nop
   19724:	fffff441 	.word	0xfffff441

00019728 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   19728:	b4f0      	push	{r4, r5, r6, r7}
   1972a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   1972c:	b148      	cbz	r0, 19742 <rpmsg_send_offchannel_raw+0x1a>
   1972e:	6a00      	ldr	r0, [r0, #32]
   19730:	b138      	cbz	r0, 19742 <rpmsg_send_offchannel_raw+0x1a>
   19732:	b133      	cbz	r3, 19742 <rpmsg_send_offchannel_raw+0x1a>
   19734:	3401      	adds	r4, #1
   19736:	d004      	beq.n	19742 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   19738:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1973a:	b114      	cbz	r4, 19742 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1973c:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1973e:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   19740:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   19742:	4801      	ldr	r0, [pc, #4]	; (19748 <rpmsg_send_offchannel_raw+0x20>)
}
   19744:	bcf0      	pop	{r4, r5, r6, r7}
   19746:	4770      	bx	lr
   19748:	fffff82d 	.word	0xfffff82d

0001974c <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19750:	460e      	mov	r6, r1
   19752:	4690      	mov	r8, r2
   19754:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   19756:	4605      	mov	r5, r0
   19758:	2800      	cmp	r0, #0
   1975a:	d06a      	beq.n	19832 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1975c:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   19760:	4638      	mov	r0, r7
   19762:	f007 fd2a 	bl	211ba <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   19766:	1c63      	adds	r3, r4, #1
   19768:	d11a      	bne.n	197a0 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1976a:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1976c:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   19770:	095a      	lsrs	r2, r3, #5
   19772:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   19776:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1977a:	f003 011f 	and.w	r1, r3, #31
   1977e:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   19782:	07e4      	lsls	r4, r4, #31
   19784:	d407      	bmi.n	19796 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   19786:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1978a:	2301      	movs	r3, #1
   1978c:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1978e:	4313      	orrs	r3, r2
   19790:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   19794:	e01d      	b.n	197d2 <rpmsg_create_ept+0x86>
	     bit++)
   19796:	3301      	adds	r3, #1
	for (bit = start;
   19798:	2b80      	cmp	r3, #128	; 0x80
   1979a:	d1e9      	bne.n	19770 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   1979c:	4c27      	ldr	r4, [pc, #156]	; (1983c <rpmsg_create_ept+0xf0>)
   1979e:	e044      	b.n	1982a <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   197a0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   197a4:	d315      	bcc.n	197d2 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   197a6:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   197aa:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   197ac:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   197b0:	d83a      	bhi.n	19828 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   197b2:	0958      	lsrs	r0, r3, #5
   197b4:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   197b8:	f003 031f 	and.w	r3, r3, #31
   197bc:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   197c0:	07d2      	lsls	r2, r2, #31
   197c2:	d4eb      	bmi.n	1979c <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   197c4:	2201      	movs	r2, #1
   197c6:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   197ca:	ea43 030c 	orr.w	r3, r3, ip
   197ce:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   197d2:	491b      	ldr	r1, [pc, #108]	; (19840 <rpmsg_create_ept+0xf4>)
   197d4:	2220      	movs	r2, #32
   197d6:	f1b8 0f00 	cmp.w	r8, #0
   197da:	bf18      	it	ne
   197dc:	4641      	movne	r1, r8
   197de:	4628      	mov	r0, r5
   197e0:	f004 fdfe 	bl	1e3e0 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   197e4:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   197e6:	4629      	mov	r1, r5
   197e8:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   197ea:	9b07      	ldr	r3, [sp, #28]
   197ec:	4630      	mov	r0, r6
   197ee:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   197f0:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   197f2:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   197f4:	632b      	str	r3, [r5, #48]	; 0x30
   197f6:	f007 fd5a 	bl	212ae <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   197fa:	4638      	mov	r0, r7
   197fc:	f001 ffc8 	bl	1b790 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   19800:	782c      	ldrb	r4, [r5, #0]
   19802:	b174      	cbz	r4, 19822 <rpmsg_create_ept+0xd6>
   19804:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   19808:	b15c      	cbz	r4, 19822 <rpmsg_create_ept+0xd6>
   1980a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1980c:	3301      	adds	r3, #1
   1980e:	d112      	bne.n	19836 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   19810:	2100      	movs	r1, #0
   19812:	4628      	mov	r0, r5
   19814:	f007 fd02 	bl	2121c <rpmsg_send_ns_message>

	if (status)
   19818:	4604      	mov	r4, r0
   1981a:	b110      	cbz	r0, 19822 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   1981c:	4628      	mov	r0, r5
   1981e:	f007 fcd2 	bl	211c6 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   19822:	4620      	mov	r0, r4
   19824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19828:	4c06      	ldr	r4, [pc, #24]	; (19844 <rpmsg_create_ept+0xf8>)
   1982a:	4638      	mov	r0, r7
   1982c:	f001 ffb0 	bl	1b790 <z_impl_k_sem_give>
}
   19830:	e7f7      	b.n	19822 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   19832:	4c04      	ldr	r4, [pc, #16]	; (19844 <rpmsg_create_ept+0xf8>)
   19834:	e7f5      	b.n	19822 <rpmsg_create_ept+0xd6>
   19836:	2400      	movs	r4, #0
   19838:	e7f3      	b.n	19822 <rpmsg_create_ept+0xd6>
   1983a:	bf00      	nop
   1983c:	fffff829 	.word	0xfffff829
   19840:	000263a8 	.word	0x000263a8
   19844:	fffff82d 	.word	0xfffff82d

00019848 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   19848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1984c:	4605      	mov	r5, r0
   1984e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   19850:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   19852:	6a03      	ldr	r3, [r0, #32]
   19854:	b08d      	sub	sp, #52	; 0x34
   19856:	681b      	ldr	r3, [r3, #0]
   19858:	4692      	mov	sl, r2
   1985a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1985e:	9103      	str	r1, [sp, #12]
   19860:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   19862:	0743      	lsls	r3, r0, #29
   19864:	d57b      	bpl.n	1995e <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   19866:	f643 2398 	movw	r3, #15000	; 0x3a98
   1986a:	2f00      	cmp	r7, #0
   1986c:	bf18      	it	ne
   1986e:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   19870:	f105 0858 	add.w	r8, r5, #88	; 0x58
   19874:	4640      	mov	r0, r8
   19876:	f007 fd3e 	bl	212f6 <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   1987a:	4628      	mov	r0, r5
   1987c:	f007 fe00 	bl	21480 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   19880:	4681      	mov	r9, r0
   19882:	b130      	cbz	r0, 19892 <rpmsg_virtio_send_offchannel_raw+0x4a>
   19884:	42b0      	cmp	r0, r6
   19886:	da04      	bge.n	19892 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   19888:	4640      	mov	r0, r8
   1988a:	f007 fd32 	bl	212f2 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   1988e:	4e42      	ldr	r6, [pc, #264]	; (19998 <rpmsg_virtio_send_offchannel_raw+0x150>)
   19890:	e061      	b.n	19956 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   19892:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   19894:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   19896:	b9f3      	cbnz	r3, 198d6 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   19898:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1989c:	f10d 0212 	add.w	r2, sp, #18
   198a0:	a905      	add	r1, sp, #20
   198a2:	f007 fb88 	bl	20fb6 <virtqueue_get_buffer>
		if (!data) {
   198a6:	4604      	mov	r4, r0
   198a8:	b948      	cbnz	r0, 198be <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   198aa:	f44f 7100 	mov.w	r1, #512	; 0x200
   198ae:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   198b2:	f007 fdf8 	bl	214a6 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   198b6:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   198ba:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   198bc:	9305      	str	r3, [sp, #20]
   198be:	4640      	mov	r0, r8
   198c0:	f007 fd17 	bl	212f2 <k_sem_give>
		if (buffer || !tick_count)
   198c4:	2c00      	cmp	r4, #0
   198c6:	d14e      	bne.n	19966 <rpmsg_virtio_send_offchannel_raw+0x11e>
   198c8:	2f00      	cmp	r7, #0
   198ca:	d04a      	beq.n	19962 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   198cc:	f1b9 0f00 	cmp.w	r9, #0
   198d0:	d1dd      	bne.n	1988e <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   198d2:	3f01      	subs	r7, #1
	while (1) {
   198d4:	e7ce      	b.n	19874 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   198d6:	2b01      	cmp	r3, #1
   198d8:	d108      	bne.n	198ec <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   198da:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   198de:	aa05      	add	r2, sp, #20
   198e0:	f10d 0112 	add.w	r1, sp, #18
   198e4:	f007 fba1 	bl	2102a <virtqueue_get_available_buffer>
   198e8:	4604      	mov	r4, r0
   198ea:	e7e8      	b.n	198be <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   198ec:	2400      	movs	r4, #0
   198ee:	e7e6      	b.n	198be <rpmsg_virtio_send_offchannel_raw+0x76>
   198f0:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   198f2:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   198f4:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   198f8:	1ac9      	subs	r1, r1, r3
   198fa:	4281      	cmp	r1, r0
   198fc:	bf28      	it	cs
   198fe:	f04f 31ff 	movcs.w	r1, #4294967295
   19902:	4633      	mov	r3, r6
   19904:	465a      	mov	r2, fp
   19906:	4638      	mov	r0, r7
   19908:	f007 fa34 	bl	20d74 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   1990c:	4286      	cmp	r6, r0
   1990e:	d000      	beq.n	19912 <rpmsg_virtio_send_offchannel_raw+0xca>
   19910:	e7fe      	b.n	19910 <rpmsg_virtio_send_offchannel_raw+0xc8>
   19912:	4640      	mov	r0, r8
   19914:	f007 fcef 	bl	212f6 <__metal_mutex_acquire>
   19918:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   1991a:	9a05      	ldr	r2, [sp, #20]
   1991c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1991e:	b953      	cbnz	r3, 19936 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   19920:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   19924:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19928:	2201      	movs	r2, #1
   1992a:	9400      	str	r4, [sp, #0]
   1992c:	a906      	add	r1, sp, #24
   1992e:	f007 fae2 	bl	20ef6 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   19932:	b148      	cbz	r0, 19948 <rpmsg_virtio_send_offchannel_raw+0x100>
   19934:	e7fe      	b.n	19934 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   19936:	2b01      	cmp	r3, #1
   19938:	d106      	bne.n	19948 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1993a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1993e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19942:	f7ff fed5 	bl	196f0 <virtqueue_add_consumed_buffer>
   19946:	e7f4      	b.n	19932 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   19948:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1994c:	f007 fbe7 	bl	2111e <virtqueue_kick>
   19950:	4640      	mov	r0, r8
   19952:	f007 fcce 	bl	212f2 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   19956:	4630      	mov	r0, r6
   19958:	b00d      	add	sp, #52	; 0x34
   1995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   1995e:	4e0f      	ldr	r6, [pc, #60]	; (1999c <rpmsg_virtio_send_offchannel_raw+0x154>)
   19960:	e7f9      	b.n	19956 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   19962:	4e0f      	ldr	r6, [pc, #60]	; (199a0 <rpmsg_virtio_send_offchannel_raw+0x158>)
   19964:	e7f7      	b.n	19956 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   19966:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   19968:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   1996c:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1996e:	2300      	movs	r3, #0
   19970:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   19972:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   19974:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   19976:	4281      	cmp	r1, r0
   19978:	bf28      	it	cs
   1997a:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   1997e:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   19980:	4638      	mov	r0, r7
   19982:	2310      	movs	r3, #16
   19984:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   19986:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   1998a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1998e:	f007 f9f1 	bl	20d74 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   19992:	2810      	cmp	r0, #16
   19994:	d0ac      	beq.n	198f0 <rpmsg_virtio_send_offchannel_raw+0xa8>
   19996:	e7fe      	b.n	19996 <rpmsg_virtio_send_offchannel_raw+0x14e>
   19998:	fffff82b 	.word	0xfffff82b
   1999c:	fffff82c 	.word	0xfffff82c
   199a0:	fffff82e 	.word	0xfffff82e

000199a4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   199a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199a8:	460d      	mov	r5, r1
   199aa:	b088      	sub	sp, #32
   199ac:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   199ae:	2100      	movs	r1, #0
   199b0:	227c      	movs	r2, #124	; 0x7c
{
   199b2:	4604      	mov	r4, r0
   199b4:	461e      	mov	r6, r3
   199b6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   199ba:	f004 fd8c 	bl	1e4d6 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   199be:	2201      	movs	r2, #1
   199c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   199c4:	4611      	mov	r1, r2
   199c6:	f007 fe0b 	bl	215e0 <z_impl_k_sem_init>
   199ca:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   199ce:	4b5d      	ldr	r3, [pc, #372]	; (19b44 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   199d0:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   199d4:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   199d6:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   199d8:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   199da:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   199dc:	d020      	beq.n	19a20 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   199de:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   199e0:	6a03      	ldr	r3, [r0, #32]
   199e2:	689b      	ldr	r3, [r3, #8]
   199e4:	4798      	blx	r3
   199e6:	2300      	movs	r3, #0
   199e8:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   199ea:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   199ee:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   199f0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   199f4:	f1b8 0f00 	cmp.w	r8, #0
   199f8:	d01e      	beq.n	19a38 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   199fa:	f1b8 0f01 	cmp.w	r8, #1
   199fe:	d133      	bne.n	19a68 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   19a00:	4b51      	ldr	r3, [pc, #324]	; (19b48 <rpmsg_init_vdev+0x1a4>)
   19a02:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   19a04:	4b51      	ldr	r3, [pc, #324]	; (19b4c <rpmsg_init_vdev+0x1a8>)
   19a06:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   19a08:	4b51      	ldr	r3, [pc, #324]	; (19b50 <rpmsg_init_vdev+0x1ac>)
   19a0a:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   19a0c:	4b51      	ldr	r3, [pc, #324]	; (19b54 <rpmsg_init_vdev+0x1b0>)
   19a0e:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   19a10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19a12:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   19a14:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   19a16:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   19a1a:	e023      	b.n	19a64 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   19a1c:	0743      	lsls	r3, r0, #29
   19a1e:	d4de      	bmi.n	199de <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   19a20:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   19a22:	6a03      	ldr	r3, [r0, #32]
   19a24:	681b      	ldr	r3, [r3, #0]
   19a26:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   19a28:	0642      	lsls	r2, r0, #25
   19a2a:	d5f7      	bpl.n	19a1c <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   19a2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   19a2e:	2100      	movs	r1, #0
   19a30:	6a03      	ldr	r3, [r0, #32]
   19a32:	685b      	ldr	r3, [r3, #4]
   19a34:	4798      	blx	r3
}
   19a36:	e7f3      	b.n	19a20 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   19a38:	f1b9 0f00 	cmp.w	r9, #0
   19a3c:	d07d      	beq.n	19b3a <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   19a3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19a42:	2b00      	cmp	r3, #0
   19a44:	d07b      	beq.n	19b3e <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   19a46:	4b41      	ldr	r3, [pc, #260]	; (19b4c <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   19a48:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   19a4c:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   19a4e:	4b3e      	ldr	r3, [pc, #248]	; (19b48 <rpmsg_init_vdev+0x1a4>)
   19a50:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   19a52:	4b40      	ldr	r3, [pc, #256]	; (19b54 <rpmsg_init_vdev+0x1b0>)
   19a54:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   19a56:	4b3e      	ldr	r3, [pc, #248]	; (19b50 <rpmsg_init_vdev+0x1ac>)
   19a58:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   19a5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19a5c:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   19a5e:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   19a60:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   19a64:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   19a68:	ab04      	add	r3, sp, #16
   19a6a:	9300      	str	r3, [sp, #0]
   19a6c:	2202      	movs	r2, #2
   19a6e:	2100      	movs	r1, #0
   19a70:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   19a72:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   19a76:	ab02      	add	r3, sp, #8
   19a78:	f7ff fde2 	bl	19640 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   19a7c:	4607      	mov	r7, r0
   19a7e:	2800      	cmp	r0, #0
   19a80:	d157      	bne.n	19b32 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   19a82:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   19a86:	f007 fb24 	bl	210d2 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   19a8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   19a8c:	681a      	ldr	r2, [r3, #0]
   19a8e:	699b      	ldr	r3, [r3, #24]
   19a90:	6296      	str	r6, [r2, #40]	; 0x28
   19a92:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   19a94:	f1b8 0f00 	cmp.w	r8, #0
   19a98:	d108      	bne.n	19aac <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   19a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   19a9e:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   19aa0:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   19aa2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   19aa6:	895b      	ldrh	r3, [r3, #10]
   19aa8:	4553      	cmp	r3, sl
   19aaa:	d81f      	bhi.n	19aec <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   19aac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19ab0:	e9c4 4400 	strd	r4, r4, [r4]
   19ab4:	b18b      	cbz	r3, 19ada <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   19ab6:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   19aba:	4927      	ldr	r1, [pc, #156]	; (19b58 <rpmsg_init_vdev+0x1b4>)
   19abc:	2220      	movs	r2, #32
   19abe:	4628      	mov	r0, r5
   19ac0:	f004 fc8e 	bl	1e3e0 <strncpy>
	ept->addr = src;
   19ac4:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   19ac6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   19aca:	4b24      	ldr	r3, [pc, #144]	; (19b5c <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   19acc:	4629      	mov	r1, r5
   19ace:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   19ad0:	2300      	movs	r3, #0
   19ad2:	4620      	mov	r0, r4
   19ad4:	63a3      	str	r3, [r4, #56]	; 0x38
   19ad6:	f007 fbea 	bl	212ae <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   19ada:	f1b8 0f00 	cmp.w	r8, #0
   19ade:	d128      	bne.n	19b32 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   19ae0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   19ae2:	2104      	movs	r1, #4
   19ae4:	6a03      	ldr	r3, [r0, #32]
   19ae6:	685b      	ldr	r3, [r3, #4]
   19ae8:	4798      	blx	r3
}
   19aea:	e022      	b.n	19b32 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   19aec:	f44f 7100 	mov.w	r1, #512	; 0x200
   19af0:	4648      	mov	r0, r9
   19af2:	f007 fcd8 	bl	214a6 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   19af6:	4605      	mov	r5, r0
   19af8:	b1c8      	cbz	r0, 19b2e <rpmsg_init_vdev+0x18a>
   19afa:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   19afc:	9006      	str	r0, [sp, #24]
   19afe:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   19b00:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   19b02:	f44f 7300 	mov.w	r3, #512	; 0x200
   19b06:	4281      	cmp	r1, r0
   19b08:	bf28      	it	cs
   19b0a:	f04f 31ff 	movcs.w	r1, #4294967295
   19b0e:	2200      	movs	r2, #0
   19b10:	4630      	mov	r0, r6
   19b12:	f007 f96a 	bl	20dea <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   19b16:	2301      	movs	r3, #1
   19b18:	2200      	movs	r2, #0
   19b1a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   19b1e:	9500      	str	r5, [sp, #0]
   19b20:	a906      	add	r1, sp, #24
   19b22:	f007 f9e8 	bl	20ef6 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   19b26:	b918      	cbnz	r0, 19b30 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   19b28:	f10a 0a01 	add.w	sl, sl, #1
   19b2c:	e7b9      	b.n	19aa2 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   19b2e:	480c      	ldr	r0, [pc, #48]	; (19b60 <rpmsg_init_vdev+0x1bc>)
   19b30:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   19b32:	4638      	mov	r0, r7
   19b34:	b008      	add	sp, #32
   19b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   19b3a:	4f0a      	ldr	r7, [pc, #40]	; (19b64 <rpmsg_init_vdev+0x1c0>)
   19b3c:	e7f9      	b.n	19b32 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   19b3e:	4f08      	ldr	r7, [pc, #32]	; (19b60 <rpmsg_init_vdev+0x1bc>)
   19b40:	e7f7      	b.n	19b32 <rpmsg_init_vdev+0x18e>
   19b42:	bf00      	nop
   19b44:	00019849 	.word	0x00019849
   19b48:	00026337 	.word	0x00026337
   19b4c:	00026331 	.word	0x00026331
   19b50:	000212f1 	.word	0x000212f1
   19b54:	000213c1 	.word	0x000213c1
   19b58:	0002633d 	.word	0x0002633d
   19b5c:	00021303 	.word	0x00021303
   19b60:	fffff82e 	.word	0xfffff82e
   19b64:	fffff82d 	.word	0xfffff82d

00019b68 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   19b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19b6a:	4b10      	ldr	r3, [pc, #64]	; (19bac <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   19b6c:	4f10      	ldr	r7, [pc, #64]	; (19bb0 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19b6e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   19b72:	3001      	adds	r0, #1
   19b74:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19b78:	42ae      	cmp	r6, r5
   19b7a:	d800      	bhi.n	19b7e <z_sys_init_run_level+0x16>
		}
	}
}
   19b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   19b7e:	e9d5 3400 	ldrd	r3, r4, [r5]
   19b82:	4620      	mov	r0, r4
   19b84:	4798      	blx	r3
   19b86:	b170      	cbz	r0, 19ba6 <z_sys_init_run_level+0x3e>
   19b88:	b16c      	cbz	r4, 19ba6 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   19b8a:	2301      	movs	r3, #1
				(dev - __device_start));
   19b8c:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19b8e:	4a09      	ldr	r2, [pc, #36]	; (19bb4 <z_sys_init_run_level+0x4c>)
   19b90:	1124      	asrs	r4, r4, #4
   19b92:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   19b94:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19b98:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   19b9c:	fa03 f404 	lsl.w	r4, r3, r4
   19ba0:	4304      	orrs	r4, r0
   19ba2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19ba6:	3508      	adds	r5, #8
   19ba8:	e7e6      	b.n	19b78 <z_sys_init_run_level+0x10>
   19baa:	bf00      	nop
   19bac:	00022778 	.word	0x00022778
   19bb0:	20008438 	.word	0x20008438
   19bb4:	200084b8 	.word	0x200084b8

00019bb8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   19bb8:	4b08      	ldr	r3, [pc, #32]	; (19bdc <z_device_ready+0x24>)
   19bba:	1ac0      	subs	r0, r0, r3
   19bbc:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19bbe:	4b08      	ldr	r3, [pc, #32]	; (19be0 <z_device_ready+0x28>)
   19bc0:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   19bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   19bc6:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19bc8:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   19bcc:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   19bd0:	4210      	tst	r0, r2
}
   19bd2:	bf0c      	ite	eq
   19bd4:	4618      	moveq	r0, r3
   19bd6:	2000      	movne	r0, #0
   19bd8:	4770      	bx	lr
   19bda:	bf00      	nop
   19bdc:	20008438 	.word	0x20008438
   19be0:	200084b8 	.word	0x200084b8

00019be4 <z_impl_device_get_binding>:
{
   19be4:	b570      	push	{r4, r5, r6, lr}
   19be6:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   19be8:	4c0f      	ldr	r4, [pc, #60]	; (19c28 <z_impl_device_get_binding+0x44>)
   19bea:	4e10      	ldr	r6, [pc, #64]	; (19c2c <z_impl_device_get_binding+0x48>)
   19bec:	42b4      	cmp	r4, r6
   19bee:	d104      	bne.n	19bfa <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   19bf0:	4c0d      	ldr	r4, [pc, #52]	; (19c28 <z_impl_device_get_binding+0x44>)
   19bf2:	42b4      	cmp	r4, r6
   19bf4:	d10a      	bne.n	19c0c <z_impl_device_get_binding+0x28>
	return NULL;
   19bf6:	2400      	movs	r4, #0
   19bf8:	e014      	b.n	19c24 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   19bfa:	4620      	mov	r0, r4
   19bfc:	f7ff ffdc 	bl	19bb8 <z_device_ready>
   19c00:	b110      	cbz	r0, 19c08 <z_impl_device_get_binding+0x24>
   19c02:	6823      	ldr	r3, [r4, #0]
   19c04:	42ab      	cmp	r3, r5
   19c06:	d00d      	beq.n	19c24 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   19c08:	3410      	adds	r4, #16
   19c0a:	e7ef      	b.n	19bec <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19c0c:	4620      	mov	r0, r4
   19c0e:	f7ff ffd3 	bl	19bb8 <z_device_ready>
   19c12:	b908      	cbnz	r0, 19c18 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   19c14:	3410      	adds	r4, #16
   19c16:	e7ec      	b.n	19bf2 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19c18:	4628      	mov	r0, r5
   19c1a:	6821      	ldr	r1, [r4, #0]
   19c1c:	f004 fc02 	bl	1e424 <strcmp>
   19c20:	2800      	cmp	r0, #0
   19c22:	d1f7      	bne.n	19c14 <z_impl_device_get_binding+0x30>
}
   19c24:	4620      	mov	r0, r4
   19c26:	bd70      	pop	{r4, r5, r6, pc}
   19c28:	20008438 	.word	0x20008438
   19c2c:	200084b8 	.word	0x200084b8

00019c30 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   19c30:	4b01      	ldr	r3, [pc, #4]	; (19c38 <z_impl_z_errno+0x8>)
   19c32:	6898      	ldr	r0, [r3, #8]
}
   19c34:	3070      	adds	r0, #112	; 0x70
   19c36:	4770      	bx	lr
   19c38:	20009fc4 	.word	0x20009fc4

00019c3c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19c3e:	4604      	mov	r4, r0
   19c40:	460e      	mov	r6, r1
	__asm__ volatile(
   19c42:	f04f 0320 	mov.w	r3, #32
   19c46:	f3ef 8711 	mrs	r7, BASEPRI
   19c4a:	f383 8811 	msr	BASEPRI, r3
   19c4e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   19c52:	f001 fd97 	bl	1b784 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19c56:	2200      	movs	r2, #0
   19c58:	2c04      	cmp	r4, #4
   19c5a:	bf98      	it	ls
   19c5c:	4b1d      	ldrls	r3, [pc, #116]	; (19cd4 <z_fatal_error+0x98>)
   19c5e:	4605      	mov	r5, r0
	switch (reason) {
   19c60:	bf94      	ite	ls
   19c62:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   19c66:	4b1c      	ldrhi	r3, [pc, #112]	; (19cd8 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19c68:	9200      	str	r2, [sp, #0]
   19c6a:	2145      	movs	r1, #69	; 0x45
   19c6c:	4622      	mov	r2, r4
   19c6e:	481b      	ldr	r0, [pc, #108]	; (19cdc <z_fatal_error+0xa0>)
   19c70:	f002 ff4e 	bl	1cb10 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   19c74:	b13e      	cbz	r6, 19c86 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   19c76:	69f3      	ldr	r3, [r6, #28]
   19c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
   19c7c:	b11b      	cbz	r3, 19c86 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   19c7e:	2145      	movs	r1, #69	; 0x45
   19c80:	4817      	ldr	r0, [pc, #92]	; (19ce0 <z_fatal_error+0xa4>)
   19c82:	f002 ff45 	bl	1cb10 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   19c86:	b135      	cbz	r5, 19c96 <z_fatal_error+0x5a>
   19c88:	4628      	mov	r0, r5
   19c8a:	f007 fcc6 	bl	2161a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   19c8e:	4603      	mov	r3, r0
   19c90:	b108      	cbz	r0, 19c96 <z_fatal_error+0x5a>
   19c92:	7802      	ldrb	r2, [r0, #0]
   19c94:	b902      	cbnz	r2, 19c98 <z_fatal_error+0x5c>
		thread_name = "unknown";
   19c96:	4b13      	ldr	r3, [pc, #76]	; (19ce4 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   19c98:	462a      	mov	r2, r5
   19c9a:	2145      	movs	r1, #69	; 0x45
   19c9c:	4812      	ldr	r0, [pc, #72]	; (19ce8 <z_fatal_error+0xac>)
   19c9e:	f002 ff37 	bl	1cb10 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   19ca2:	4631      	mov	r1, r6
   19ca4:	4620      	mov	r0, r4
   19ca6:	f7ff f841 	bl	18d2c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   19caa:	2c04      	cmp	r4, #4
   19cac:	d108      	bne.n	19cc0 <z_fatal_error+0x84>
   19cae:	490f      	ldr	r1, [pc, #60]	; (19cec <z_fatal_error+0xb0>)
   19cb0:	480f      	ldr	r0, [pc, #60]	; (19cf0 <z_fatal_error+0xb4>)
   19cb2:	228e      	movs	r2, #142	; 0x8e
   19cb4:	f002 ff2c 	bl	1cb10 <printk>
   19cb8:	218e      	movs	r1, #142	; 0x8e
   19cba:	480c      	ldr	r0, [pc, #48]	; (19cec <z_fatal_error+0xb0>)
   19cbc:	f003 f9ce 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   19cc0:	f387 8811 	msr	BASEPRI, r7
   19cc4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   19cc8:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   19cca:	b003      	add	sp, #12
   19ccc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19cd0:	f7f4 b9a0 	b.w	e014 <z_impl_k_thread_abort>
   19cd4:	00022790 	.word	0x00022790
   19cd8:	00026340 	.word	0x00026340
   19cdc:	00026356 	.word	0x00026356
   19ce0:	00026383 	.word	0x00026383
   19ce4:	0002634e 	.word	0x0002634e
   19ce8:	000263a9 	.word	0x000263a9
   19cec:	000263c6 	.word	0x000263c6
   19cf0:	00022f17 	.word	0x00022f17

00019cf4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   19cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cf6:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   19cf8:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   19cfa:	4e15      	ldr	r6, [pc, #84]	; (19d50 <idle+0x5c>)
	__asm__ volatile(
   19cfc:	f04f 0220 	mov.w	r2, #32
   19d00:	f3ef 8311 	mrs	r3, BASEPRI
   19d04:	f382 8811 	msr	BASEPRI, r2
   19d08:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   19d0c:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   19d0e:	b188      	cbz	r0, 19d34 <idle+0x40>
			cpu->pending_abort = NULL;
   19d10:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   19d12:	f383 8811 	msr	BASEPRI, r3
   19d16:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   19d1a:	f001 f93b 	bl	1af94 <z_thread_single_abort>
	__asm__ volatile(
   19d1e:	f04f 0320 	mov.w	r3, #32
   19d22:	f3ef 8011 	mrs	r0, BASEPRI
   19d26:	f383 8811 	msr	BASEPRI, r3
   19d2a:	f3bf 8f6f 	isb	sy
   19d2e:	f007 fc1d 	bl	2156c <z_reschedule_irqlock>
			continue;
   19d32:	e7e3      	b.n	19cfc <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   19d34:	f002 f998 	bl	1c068 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19d38:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   19d3a:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19d3c:	2802      	cmp	r0, #2
   19d3e:	bfd8      	it	le
   19d40:	4608      	movle	r0, r1
   19d42:	f002 f9c7 	bl	1c0d4 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   19d46:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   19d48:	f7f3 feaa 	bl	daa0 <arch_cpu_idle>
}
   19d4c:	e7d6      	b.n	19cfc <idle+0x8>
   19d4e:	bf00      	nop
   19d50:	20009fc4 	.word	0x20009fc4

00019d54 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19d54:	4802      	ldr	r0, [pc, #8]	; (19d60 <z_bss_zero+0xc>)
   19d56:	4a03      	ldr	r2, [pc, #12]	; (19d64 <z_bss_zero+0x10>)
   19d58:	2100      	movs	r1, #0
   19d5a:	1a12      	subs	r2, r2, r0
   19d5c:	f004 bbbb 	b.w	1e4d6 <memset>
   19d60:	200086d0 	.word	0x200086d0
   19d64:	2000b7e0 	.word	0x2000b7e0

00019d68 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   19d68:	2201      	movs	r2, #1
{
   19d6a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19d6c:	4b09      	ldr	r3, [pc, #36]	; (19d94 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19d6e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19d70:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19d72:	f7ff fef9 	bl	19b68 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   19d76:	f002 f819 	bl	1bdac <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   19d7a:	2003      	movs	r0, #3
   19d7c:	f7ff fef4 	bl	19b68 <z_sys_init_run_level>

	z_init_static_threads();
   19d80:	f001 fe76 	bl	1ba70 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   19d84:	f7ef fc0c 	bl	95a0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19d88:	4a03      	ldr	r2, [pc, #12]	; (19d98 <bg_thread_main+0x30>)
   19d8a:	7b13      	ldrb	r3, [r2, #12]
   19d8c:	f023 0301 	bic.w	r3, r3, #1
   19d90:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19d92:	bd08      	pop	{r3, pc}
   19d94:	2000b7dc 	.word	0x2000b7dc
   19d98:	200095a8 	.word	0x200095a8

00019d9c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   19d9c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   19da0:	4b34      	ldr	r3, [pc, #208]	; (19e74 <z_cstart+0xd8>)
   19da2:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   19da4:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19da8:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   19dac:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19db0:	2400      	movs	r4, #0
   19db2:	23e0      	movs	r3, #224	; 0xe0
   19db4:	4d30      	ldr	r5, [pc, #192]	; (19e78 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19db6:	f04f 0b01 	mov.w	fp, #1
   19dba:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19dbe:	77ec      	strb	r4, [r5, #31]
   19dc0:	762c      	strb	r4, [r5, #24]
   19dc2:	766c      	strb	r4, [r5, #25]
   19dc4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   19dc8:	4e2c      	ldr	r6, [pc, #176]	; (19e7c <z_cstart+0xe0>)
   19dca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19dce:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19dd0:	f7f4 f8e8 	bl	dfa4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19dd4:	f7f3 fe5e 	bl	da94 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19dd8:	f04f 33ff 	mov.w	r3, #4294967295
   19ddc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19dde:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   19de0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   19de4:	4d26      	ldr	r5, [pc, #152]	; (19e80 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   19de6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   19dea:	ab06      	add	r3, sp, #24
   19dec:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19dee:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   19df0:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   19df4:	f7ff feb8 	bl	19b68 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19df8:	2001      	movs	r0, #1
   19dfa:	f7ff feb5 	bl	19b68 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19dfe:	f8df a084 	ldr.w	sl, [pc, #132]	; 19e84 <z_cstart+0xe8>
	z_sched_init();
   19e02:	f001 fb77 	bl	1b4f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19e06:	4b20      	ldr	r3, [pc, #128]	; (19e88 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   19e08:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19e0e:	491f      	ldr	r1, [pc, #124]	; (19e8c <z_cstart+0xf0>)
   19e10:	9305      	str	r3, [sp, #20]
   19e12:	4630      	mov	r0, r6
   19e14:	4653      	mov	r3, sl
   19e16:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   19e1a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19e1e:	9400      	str	r4, [sp, #0]
   19e20:	f001 fd74 	bl	1b90c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19e24:	7b73      	ldrb	r3, [r6, #13]
   19e26:	4680      	mov	r8, r0
   19e28:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   19e2c:	4630      	mov	r0, r6
   19e2e:	7373      	strb	r3, [r6, #13]
   19e30:	f000 feec 	bl	1ac0c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   19e34:	230f      	movs	r3, #15
   19e36:	4f16      	ldr	r7, [pc, #88]	; (19e90 <z_cstart+0xf4>)
   19e38:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19e3c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19e40:	4914      	ldr	r1, [pc, #80]	; (19e94 <z_cstart+0xf8>)
   19e42:	4b15      	ldr	r3, [pc, #84]	; (19e98 <z_cstart+0xfc>)
   19e44:	4638      	mov	r0, r7
   19e46:	e9cd b404 	strd	fp, r4, [sp, #16]
   19e4a:	e9cd 5400 	strd	r5, r4, [sp]
   19e4e:	f001 fd5d 	bl	1b90c <z_setup_new_thread>
   19e52:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19e54:	4652      	mov	r2, sl
   19e56:	f023 0304 	bic.w	r3, r3, #4
   19e5a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19e5c:	f105 031c 	add.w	r3, r5, #28
   19e60:	4641      	mov	r1, r8
   19e62:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   19e64:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19e68:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   19e6a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   19e6c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19e70:	f7f3 fdf6 	bl	da60 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19e74:	2000d578 	.word	0x2000d578
   19e78:	e000ed00 	.word	0xe000ed00
   19e7c:	200095a8 	.word	0x200095a8
   19e80:	20009fc4 	.word	0x20009fc4
   19e84:	00019d69 	.word	0x00019d69
   19e88:	00026432 	.word	0x00026432
   19e8c:	2000d038 	.word	0x2000d038
   19e90:	20009518 	.word	0x20009518
   19e94:	2000d438 	.word	0x2000d438
   19e98:	00019cf5 	.word	0x00019cf5

00019e9c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   19e9c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19e9e:	4c0c      	ldr	r4, [pc, #48]	; (19ed0 <statics_init+0x34>)
   19ea0:	4d0c      	ldr	r5, [pc, #48]	; (19ed4 <statics_init+0x38>)
   19ea2:	4e0d      	ldr	r6, [pc, #52]	; (19ed8 <statics_init+0x3c>)
   19ea4:	42ac      	cmp	r4, r5
   19ea6:	d908      	bls.n	19eba <statics_init+0x1e>
   19ea8:	4631      	mov	r1, r6
   19eaa:	480c      	ldr	r0, [pc, #48]	; (19edc <statics_init+0x40>)
   19eac:	2215      	movs	r2, #21
   19eae:	f002 fe2f 	bl	1cb10 <printk>
   19eb2:	2115      	movs	r1, #21
   19eb4:	4630      	mov	r0, r6
   19eb6:	f003 f8d1 	bl	1d05c <assert_post_action>
   19eba:	42ac      	cmp	r4, r5
   19ebc:	d301      	bcc.n	19ec2 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   19ebe:	2000      	movs	r0, #0
   19ec0:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19ec2:	4620      	mov	r0, r4
   19ec4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19ec8:	f007 fb02 	bl	214d0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19ecc:	3418      	adds	r4, #24
   19ece:	e7e9      	b.n	19ea4 <statics_init+0x8>
   19ed0:	20008510 	.word	0x20008510
   19ed4:	20008528 	.word	0x20008528
   19ed8:	0002643a 	.word	0x0002643a
   19edc:	00022f17 	.word	0x00022f17

00019ee0 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ee4:	b085      	sub	sp, #20
   19ee6:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   19eea:	4606      	mov	r6, r0
   19eec:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   19eee:	4648      	mov	r0, r9
   19ef0:	4639      	mov	r1, r7
{
   19ef2:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   19ef4:	f007 fbf2 	bl	216dc <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19ef8:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   19efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19f00:	f04f 0320 	mov.w	r3, #32
   19f04:	f3ef 8411 	mrs	r4, BASEPRI
   19f08:	f383 8811 	msr	BASEPRI, r3
   19f0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f10:	4628      	mov	r0, r5
   19f12:	f001 fe29 	bl	1bb68 <z_spin_lock_valid>
   19f16:	b940      	cbnz	r0, 19f2a <k_heap_aligned_alloc+0x4a>
   19f18:	4932      	ldr	r1, [pc, #200]	; (19fe4 <k_heap_aligned_alloc+0x104>)
   19f1a:	4833      	ldr	r0, [pc, #204]	; (19fe8 <k_heap_aligned_alloc+0x108>)
   19f1c:	227c      	movs	r2, #124	; 0x7c
   19f1e:	f002 fdf7 	bl	1cb10 <printk>
   19f22:	217c      	movs	r1, #124	; 0x7c
   19f24:	482f      	ldr	r0, [pc, #188]	; (19fe4 <k_heap_aligned_alloc+0x104>)
   19f26:	f003 f899 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   19f2a:	4628      	mov	r0, r5
   19f2c:	f001 fe38 	bl	1bba0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19f30:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   19f34:	b15b      	cbz	r3, 19f4e <k_heap_aligned_alloc+0x6e>
   19f36:	ea59 0307 	orrs.w	r3, r9, r7
   19f3a:	d008      	beq.n	19f4e <k_heap_aligned_alloc+0x6e>
   19f3c:	492b      	ldr	r1, [pc, #172]	; (19fec <k_heap_aligned_alloc+0x10c>)
   19f3e:	482a      	ldr	r0, [pc, #168]	; (19fe8 <k_heap_aligned_alloc+0x108>)
   19f40:	2224      	movs	r2, #36	; 0x24
   19f42:	f002 fde5 	bl	1cb10 <printk>
   19f46:	2124      	movs	r1, #36	; 0x24
   19f48:	4828      	ldr	r0, [pc, #160]	; (19fec <k_heap_aligned_alloc+0x10c>)
   19f4a:	f003 f887 	bl	1d05c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f4e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 19fe4 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19f52:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19f56:	4642      	mov	r2, r8
   19f58:	4659      	mov	r1, fp
   19f5a:	4630      	mov	r0, r6
   19f5c:	f7f0 fc10 	bl	a780 <sys_heap_aligned_alloc>
   19f60:	4607      	mov	r7, r0
		now = z_tick_get();
   19f62:	f002 f993 	bl	1c28c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   19f66:	b1a7      	cbz	r7, 19f92 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f68:	4628      	mov	r0, r5
   19f6a:	f001 fe0b 	bl	1bb84 <z_spin_unlock_valid>
   19f6e:	b940      	cbnz	r0, 19f82 <k_heap_aligned_alloc+0xa2>
   19f70:	491c      	ldr	r1, [pc, #112]	; (19fe4 <k_heap_aligned_alloc+0x104>)
   19f72:	481d      	ldr	r0, [pc, #116]	; (19fe8 <k_heap_aligned_alloc+0x108>)
   19f74:	22a7      	movs	r2, #167	; 0xa7
   19f76:	f002 fdcb 	bl	1cb10 <printk>
   19f7a:	21a7      	movs	r1, #167	; 0xa7
   19f7c:	4819      	ldr	r0, [pc, #100]	; (19fe4 <k_heap_aligned_alloc+0x104>)
   19f7e:	f003 f86d 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   19f82:	f384 8811 	msr	BASEPRI, r4
   19f86:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19f8a:	4638      	mov	r0, r7
   19f8c:	b005      	add	sp, #20
   19f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   19f92:	9b02      	ldr	r3, [sp, #8]
   19f94:	1a18      	subs	r0, r3, r0
   19f96:	9b03      	ldr	r3, [sp, #12]
   19f98:	eb63 0101 	sbc.w	r1, r3, r1
   19f9c:	2801      	cmp	r0, #1
   19f9e:	f171 0300 	sbcs.w	r3, r1, #0
   19fa2:	dbe1      	blt.n	19f68 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19fa4:	e9cd 0100 	strd	r0, r1, [sp]
   19fa8:	4652      	mov	r2, sl
   19faa:	4621      	mov	r1, r4
   19fac:	4628      	mov	r0, r5
   19fae:	f001 f997 	bl	1b2e0 <z_pend_curr>
	__asm__ volatile(
   19fb2:	f04f 0320 	mov.w	r3, #32
   19fb6:	f3ef 8411 	mrs	r4, BASEPRI
   19fba:	f383 8811 	msr	BASEPRI, r3
   19fbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fc2:	4628      	mov	r0, r5
   19fc4:	f001 fdd0 	bl	1bb68 <z_spin_lock_valid>
   19fc8:	b940      	cbnz	r0, 19fdc <k_heap_aligned_alloc+0xfc>
   19fca:	4649      	mov	r1, r9
   19fcc:	4806      	ldr	r0, [pc, #24]	; (19fe8 <k_heap_aligned_alloc+0x108>)
   19fce:	227c      	movs	r2, #124	; 0x7c
   19fd0:	f002 fd9e 	bl	1cb10 <printk>
   19fd4:	217c      	movs	r1, #124	; 0x7c
   19fd6:	4648      	mov	r0, r9
   19fd8:	f003 f840 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   19fdc:	4628      	mov	r0, r5
   19fde:	f001 fddf 	bl	1bba0 <z_spin_lock_set_owner>
	return k;
   19fe2:	e7b8      	b.n	19f56 <k_heap_aligned_alloc+0x76>
   19fe4:	00022f51 	.word	0x00022f51
   19fe8:	00022f17 	.word	0x00022f17
   19fec:	0002643a 	.word	0x0002643a

00019ff0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   19ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ff2:	4604      	mov	r4, r0
   19ff4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19ff6:	f100 0514 	add.w	r5, r0, #20
   19ffa:	f04f 0320 	mov.w	r3, #32
   19ffe:	f3ef 8711 	mrs	r7, BASEPRI
   1a002:	f383 8811 	msr	BASEPRI, r3
   1a006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a00a:	4628      	mov	r0, r5
   1a00c:	f001 fdac 	bl	1bb68 <z_spin_lock_valid>
   1a010:	b940      	cbnz	r0, 1a024 <k_heap_free+0x34>
   1a012:	4916      	ldr	r1, [pc, #88]	; (1a06c <k_heap_free+0x7c>)
   1a014:	4816      	ldr	r0, [pc, #88]	; (1a070 <k_heap_free+0x80>)
   1a016:	227c      	movs	r2, #124	; 0x7c
   1a018:	f002 fd7a 	bl	1cb10 <printk>
   1a01c:	217c      	movs	r1, #124	; 0x7c
   1a01e:	4813      	ldr	r0, [pc, #76]	; (1a06c <k_heap_free+0x7c>)
   1a020:	f003 f81c 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a024:	4628      	mov	r0, r5
   1a026:	f001 fdbb 	bl	1bba0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1a02a:	4620      	mov	r0, r4
   1a02c:	4631      	mov	r1, r6
   1a02e:	f7f0 fb65 	bl	a6fc <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1a032:	f104 000c 	add.w	r0, r4, #12
   1a036:	f007 fac3 	bl	215c0 <z_unpend_all>
   1a03a:	b128      	cbz	r0, 1a048 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1a03c:	4639      	mov	r1, r7
   1a03e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1a040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1a044:	f000 bc0e 	b.w	1a864 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a048:	4628      	mov	r0, r5
   1a04a:	f001 fd9b 	bl	1bb84 <z_spin_unlock_valid>
   1a04e:	b940      	cbnz	r0, 1a062 <k_heap_free+0x72>
   1a050:	4906      	ldr	r1, [pc, #24]	; (1a06c <k_heap_free+0x7c>)
   1a052:	4807      	ldr	r0, [pc, #28]	; (1a070 <k_heap_free+0x80>)
   1a054:	22a7      	movs	r2, #167	; 0xa7
   1a056:	f002 fd5b 	bl	1cb10 <printk>
   1a05a:	21a7      	movs	r1, #167	; 0xa7
   1a05c:	4803      	ldr	r0, [pc, #12]	; (1a06c <k_heap_free+0x7c>)
   1a05e:	f002 fffd 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a062:	f387 8811 	msr	BASEPRI, r7
   1a066:	f3bf 8f6f 	isb	sy
}
   1a06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a06c:	00022f51 	.word	0x00022f51
   1a070:	00022f17 	.word	0x00022f17

0001a074 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a076:	4c14      	ldr	r4, [pc, #80]	; (1a0c8 <init_mem_slab_module+0x54>)
   1a078:	4d14      	ldr	r5, [pc, #80]	; (1a0cc <init_mem_slab_module+0x58>)
   1a07a:	4e15      	ldr	r6, [pc, #84]	; (1a0d0 <init_mem_slab_module+0x5c>)
   1a07c:	42ac      	cmp	r4, r5
   1a07e:	d908      	bls.n	1a092 <init_mem_slab_module+0x1e>
   1a080:	4631      	mov	r1, r6
   1a082:	4814      	ldr	r0, [pc, #80]	; (1a0d4 <init_mem_slab_module+0x60>)
   1a084:	2242      	movs	r2, #66	; 0x42
   1a086:	f002 fd43 	bl	1cb10 <printk>
   1a08a:	2142      	movs	r1, #66	; 0x42
   1a08c:	4630      	mov	r0, r6
   1a08e:	f002 ffe5 	bl	1d05c <assert_post_action>
   1a092:	42ac      	cmp	r4, r5
   1a094:	d301      	bcc.n	1a09a <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1a096:	2000      	movs	r0, #0
	return rc;
}
   1a098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a09a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1a09e:	ea42 0301 	orr.w	r3, r2, r1
   1a0a2:	f013 0303 	ands.w	r3, r3, #3
   1a0a6:	d10b      	bne.n	1a0c0 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   1a0a8:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   1a0aa:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a0ac:	4283      	cmp	r3, r0
   1a0ae:	d101      	bne.n	1a0b4 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a0b0:	341c      	adds	r4, #28
   1a0b2:	e7e3      	b.n	1a07c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1a0b4:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a0b6:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1a0b8:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   1a0ba:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   1a0bc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1a0be:	e7f5      	b.n	1a0ac <init_mem_slab_module+0x38>
	return rc;
   1a0c0:	f06f 0015 	mvn.w	r0, #21
   1a0c4:	e7e8      	b.n	1a098 <init_mem_slab_module+0x24>
   1a0c6:	bf00      	nop
   1a0c8:	200084bc 	.word	0x200084bc
   1a0cc:	20008510 	.word	0x20008510
   1a0d0:	0002645c 	.word	0x0002645c
   1a0d4:	00022f17 	.word	0x00022f17

0001a0d8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a0d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a0dc:	4604      	mov	r4, r0
   1a0de:	460d      	mov	r5, r1
   1a0e0:	4617      	mov	r7, r2
   1a0e2:	461e      	mov	r6, r3
	__asm__ volatile(
   1a0e4:	f04f 0320 	mov.w	r3, #32
   1a0e8:	f3ef 8811 	mrs	r8, BASEPRI
   1a0ec:	f383 8811 	msr	BASEPRI, r3
   1a0f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0f4:	4821      	ldr	r0, [pc, #132]	; (1a17c <k_mem_slab_alloc+0xa4>)
   1a0f6:	f001 fd37 	bl	1bb68 <z_spin_lock_valid>
   1a0fa:	b940      	cbnz	r0, 1a10e <k_mem_slab_alloc+0x36>
   1a0fc:	4920      	ldr	r1, [pc, #128]	; (1a180 <k_mem_slab_alloc+0xa8>)
   1a0fe:	4821      	ldr	r0, [pc, #132]	; (1a184 <k_mem_slab_alloc+0xac>)
   1a100:	227c      	movs	r2, #124	; 0x7c
   1a102:	f002 fd05 	bl	1cb10 <printk>
   1a106:	217c      	movs	r1, #124	; 0x7c
   1a108:	481d      	ldr	r0, [pc, #116]	; (1a180 <k_mem_slab_alloc+0xa8>)
   1a10a:	f002 ffa7 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a10e:	481b      	ldr	r0, [pc, #108]	; (1a17c <k_mem_slab_alloc+0xa4>)
   1a110:	f001 fd46 	bl	1bba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1a114:	6963      	ldr	r3, [r4, #20]
   1a116:	b1c3      	cbz	r3, 1a14a <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   1a118:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1a11a:	681b      	ldr	r3, [r3, #0]
   1a11c:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   1a11e:	69a3      	ldr	r3, [r4, #24]
   1a120:	3301      	adds	r3, #1
   1a122:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1a124:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a126:	4815      	ldr	r0, [pc, #84]	; (1a17c <k_mem_slab_alloc+0xa4>)
   1a128:	f001 fd2c 	bl	1bb84 <z_spin_unlock_valid>
   1a12c:	b940      	cbnz	r0, 1a140 <k_mem_slab_alloc+0x68>
   1a12e:	4914      	ldr	r1, [pc, #80]	; (1a180 <k_mem_slab_alloc+0xa8>)
   1a130:	4814      	ldr	r0, [pc, #80]	; (1a184 <k_mem_slab_alloc+0xac>)
   1a132:	22a7      	movs	r2, #167	; 0xa7
   1a134:	f002 fcec 	bl	1cb10 <printk>
   1a138:	21a7      	movs	r1, #167	; 0xa7
   1a13a:	4811      	ldr	r0, [pc, #68]	; (1a180 <k_mem_slab_alloc+0xa8>)
   1a13c:	f002 ff8e 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a140:	f388 8811 	msr	BASEPRI, r8
   1a144:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1a148:	e013      	b.n	1a172 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a14a:	ea57 0206 	orrs.w	r2, r7, r6
   1a14e:	d103      	bne.n	1a158 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   1a150:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1a154:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1a156:	e7e6      	b.n	1a126 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1a158:	4622      	mov	r2, r4
   1a15a:	4641      	mov	r1, r8
   1a15c:	e9cd 7600 	strd	r7, r6, [sp]
   1a160:	4806      	ldr	r0, [pc, #24]	; (1a17c <k_mem_slab_alloc+0xa4>)
   1a162:	f001 f8bd 	bl	1b2e0 <z_pend_curr>
		if (result == 0) {
   1a166:	4604      	mov	r4, r0
   1a168:	b918      	cbnz	r0, 1a172 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   1a16a:	4b07      	ldr	r3, [pc, #28]	; (1a188 <k_mem_slab_alloc+0xb0>)
   1a16c:	689b      	ldr	r3, [r3, #8]
   1a16e:	695b      	ldr	r3, [r3, #20]
   1a170:	602b      	str	r3, [r5, #0]
}
   1a172:	4620      	mov	r0, r4
   1a174:	b002      	add	sp, #8
   1a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a17a:	bf00      	nop
   1a17c:	20009fbc 	.word	0x20009fbc
   1a180:	00022f51 	.word	0x00022f51
   1a184:	00022f17 	.word	0x00022f17
   1a188:	20009fc4 	.word	0x20009fc4

0001a18c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a18e:	4604      	mov	r4, r0
   1a190:	460d      	mov	r5, r1
	__asm__ volatile(
   1a192:	f04f 0320 	mov.w	r3, #32
   1a196:	f3ef 8611 	mrs	r6, BASEPRI
   1a19a:	f383 8811 	msr	BASEPRI, r3
   1a19e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1a2:	481e      	ldr	r0, [pc, #120]	; (1a21c <k_mem_slab_free+0x90>)
   1a1a4:	f001 fce0 	bl	1bb68 <z_spin_lock_valid>
   1a1a8:	b940      	cbnz	r0, 1a1bc <k_mem_slab_free+0x30>
   1a1aa:	491d      	ldr	r1, [pc, #116]	; (1a220 <k_mem_slab_free+0x94>)
   1a1ac:	481d      	ldr	r0, [pc, #116]	; (1a224 <k_mem_slab_free+0x98>)
   1a1ae:	227c      	movs	r2, #124	; 0x7c
   1a1b0:	f002 fcae 	bl	1cb10 <printk>
   1a1b4:	217c      	movs	r1, #124	; 0x7c
   1a1b6:	481a      	ldr	r0, [pc, #104]	; (1a220 <k_mem_slab_free+0x94>)
   1a1b8:	f002 ff50 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1bc:	4817      	ldr	r0, [pc, #92]	; (1a21c <k_mem_slab_free+0x90>)
   1a1be:	f001 fcef 	bl	1bba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1a1c2:	6967      	ldr	r7, [r4, #20]
   1a1c4:	b97f      	cbnz	r7, 1a1e6 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a1c6:	4620      	mov	r0, r4
   1a1c8:	f001 f92c 	bl	1b424 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1a1cc:	b158      	cbz	r0, 1a1e6 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a1ce:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a1d0:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a1d4:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1a1d6:	f000 fd19 	bl	1ac0c <z_ready_thread>
			z_reschedule(&lock, key);
   1a1da:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1a1dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1a1e0:	480e      	ldr	r0, [pc, #56]	; (1a21c <k_mem_slab_free+0x90>)
   1a1e2:	f000 bb3f 	b.w	1a864 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1a1e6:	682b      	ldr	r3, [r5, #0]
   1a1e8:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1ea:	480c      	ldr	r0, [pc, #48]	; (1a21c <k_mem_slab_free+0x90>)
   1a1ec:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1a1ee:	682b      	ldr	r3, [r5, #0]
   1a1f0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1a1f2:	69a3      	ldr	r3, [r4, #24]
   1a1f4:	3b01      	subs	r3, #1
   1a1f6:	61a3      	str	r3, [r4, #24]
   1a1f8:	f001 fcc4 	bl	1bb84 <z_spin_unlock_valid>
   1a1fc:	b940      	cbnz	r0, 1a210 <k_mem_slab_free+0x84>
   1a1fe:	4908      	ldr	r1, [pc, #32]	; (1a220 <k_mem_slab_free+0x94>)
   1a200:	4808      	ldr	r0, [pc, #32]	; (1a224 <k_mem_slab_free+0x98>)
   1a202:	22a7      	movs	r2, #167	; 0xa7
   1a204:	f002 fc84 	bl	1cb10 <printk>
   1a208:	21a7      	movs	r1, #167	; 0xa7
   1a20a:	4805      	ldr	r0, [pc, #20]	; (1a220 <k_mem_slab_free+0x94>)
   1a20c:	f002 ff26 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a210:	f386 8811 	msr	BASEPRI, r6
   1a214:	f3bf 8f6f 	isb	sy
}
   1a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a21a:	bf00      	nop
   1a21c:	20009fbc 	.word	0x20009fbc
   1a220:	00022f51 	.word	0x00022f51
   1a224:	00022f17 	.word	0x00022f17

0001a228 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a22c:	4604      	mov	r4, r0
   1a22e:	4617      	mov	r7, r2
   1a230:	461e      	mov	r6, r3
   1a232:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a236:	b143      	cbz	r3, 1a24a <z_impl_k_mutex_lock+0x22>
   1a238:	495c      	ldr	r1, [pc, #368]	; (1a3ac <z_impl_k_mutex_lock+0x184>)
   1a23a:	485d      	ldr	r0, [pc, #372]	; (1a3b0 <z_impl_k_mutex_lock+0x188>)
   1a23c:	227d      	movs	r2, #125	; 0x7d
   1a23e:	f002 fc67 	bl	1cb10 <printk>
   1a242:	217d      	movs	r1, #125	; 0x7d
   1a244:	4859      	ldr	r0, [pc, #356]	; (1a3ac <z_impl_k_mutex_lock+0x184>)
   1a246:	f002 ff09 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a24a:	f04f 0320 	mov.w	r3, #32
   1a24e:	f3ef 8811 	mrs	r8, BASEPRI
   1a252:	f383 8811 	msr	BASEPRI, r3
   1a256:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a25a:	4856      	ldr	r0, [pc, #344]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a25c:	f001 fc84 	bl	1bb68 <z_spin_lock_valid>
   1a260:	b940      	cbnz	r0, 1a274 <z_impl_k_mutex_lock+0x4c>
   1a262:	4955      	ldr	r1, [pc, #340]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a264:	4852      	ldr	r0, [pc, #328]	; (1a3b0 <z_impl_k_mutex_lock+0x188>)
   1a266:	227c      	movs	r2, #124	; 0x7c
   1a268:	f002 fc52 	bl	1cb10 <printk>
   1a26c:	217c      	movs	r1, #124	; 0x7c
   1a26e:	4852      	ldr	r0, [pc, #328]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a270:	f002 fef4 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a274:	484f      	ldr	r0, [pc, #316]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a276:	f001 fc93 	bl	1bba0 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a27a:	68e3      	ldr	r3, [r4, #12]
   1a27c:	4a4f      	ldr	r2, [pc, #316]	; (1a3bc <z_impl_k_mutex_lock+0x194>)
   1a27e:	b1d3      	cbz	r3, 1a2b6 <z_impl_k_mutex_lock+0x8e>
   1a280:	68a0      	ldr	r0, [r4, #8]
   1a282:	6891      	ldr	r1, [r2, #8]
   1a284:	4288      	cmp	r0, r1
   1a286:	d033      	beq.n	1a2f0 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a288:	ea57 0306 	orrs.w	r3, r7, r6
   1a28c:	d132      	bne.n	1a2f4 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a28e:	4849      	ldr	r0, [pc, #292]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a290:	f001 fc78 	bl	1bb84 <z_spin_unlock_valid>
   1a294:	b940      	cbnz	r0, 1a2a8 <z_impl_k_mutex_lock+0x80>
   1a296:	4948      	ldr	r1, [pc, #288]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a298:	4845      	ldr	r0, [pc, #276]	; (1a3b0 <z_impl_k_mutex_lock+0x188>)
   1a29a:	22a7      	movs	r2, #167	; 0xa7
   1a29c:	f002 fc38 	bl	1cb10 <printk>
   1a2a0:	21a7      	movs	r1, #167	; 0xa7
   1a2a2:	4845      	ldr	r0, [pc, #276]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a2a4:	f002 feda 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a2a8:	f388 8811 	msr	BASEPRI, r8
   1a2ac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1a2b0:	f06f 000f 	mvn.w	r0, #15
   1a2b4:	e019      	b.n	1a2ea <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1a2b6:	6891      	ldr	r1, [r2, #8]
   1a2b8:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1a2bc:	3301      	adds	r3, #1
   1a2be:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a2c0:	6893      	ldr	r3, [r2, #8]
   1a2c2:	483c      	ldr	r0, [pc, #240]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a2c4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1a2c6:	60a3      	str	r3, [r4, #8]
   1a2c8:	f001 fc5c 	bl	1bb84 <z_spin_unlock_valid>
   1a2cc:	b940      	cbnz	r0, 1a2e0 <z_impl_k_mutex_lock+0xb8>
   1a2ce:	493a      	ldr	r1, [pc, #232]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a2d0:	4837      	ldr	r0, [pc, #220]	; (1a3b0 <z_impl_k_mutex_lock+0x188>)
   1a2d2:	22a7      	movs	r2, #167	; 0xa7
   1a2d4:	f002 fc1c 	bl	1cb10 <printk>
   1a2d8:	21a7      	movs	r1, #167	; 0xa7
   1a2da:	4837      	ldr	r0, [pc, #220]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a2dc:	f002 febe 	bl	1d05c <assert_post_action>
   1a2e0:	f388 8811 	msr	BASEPRI, r8
   1a2e4:	f3bf 8f6f 	isb	sy
		return 0;
   1a2e8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1a2ea:	b002      	add	sp, #8
   1a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a2f0:	6921      	ldr	r1, [r4, #16]
   1a2f2:	e7e3      	b.n	1a2bc <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a2f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a2f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a2fc:	4299      	cmp	r1, r3
   1a2fe:	bfa8      	it	ge
   1a300:	4619      	movge	r1, r3
   1a302:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a306:	4299      	cmp	r1, r3
   1a308:	da3b      	bge.n	1a382 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   1a30a:	f007 f8e9 	bl	214e0 <adjust_owner_prio.isra.0>
   1a30e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a310:	4622      	mov	r2, r4
   1a312:	4641      	mov	r1, r8
   1a314:	e9cd 7600 	strd	r7, r6, [sp]
   1a318:	4826      	ldr	r0, [pc, #152]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a31a:	f000 ffe1 	bl	1b2e0 <z_pend_curr>
	if (got_mutex == 0) {
   1a31e:	2800      	cmp	r0, #0
   1a320:	d0e3      	beq.n	1a2ea <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1a322:	f04f 0320 	mov.w	r3, #32
   1a326:	f3ef 8611 	mrs	r6, BASEPRI
   1a32a:	f383 8811 	msr	BASEPRI, r3
   1a32e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a332:	4820      	ldr	r0, [pc, #128]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a334:	f001 fc18 	bl	1bb68 <z_spin_lock_valid>
   1a338:	b940      	cbnz	r0, 1a34c <z_impl_k_mutex_lock+0x124>
   1a33a:	491f      	ldr	r1, [pc, #124]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a33c:	481c      	ldr	r0, [pc, #112]	; (1a3b0 <z_impl_k_mutex_lock+0x188>)
   1a33e:	227c      	movs	r2, #124	; 0x7c
   1a340:	f002 fbe6 	bl	1cb10 <printk>
   1a344:	217c      	movs	r1, #124	; 0x7c
   1a346:	481c      	ldr	r0, [pc, #112]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a348:	f002 fe88 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a34c:	4819      	ldr	r0, [pc, #100]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a34e:	f001 fc27 	bl	1bba0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a352:	6823      	ldr	r3, [r4, #0]
   1a354:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a356:	42a3      	cmp	r3, r4
   1a358:	d007      	beq.n	1a36a <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a35a:	b133      	cbz	r3, 1a36a <z_impl_k_mutex_lock+0x142>
   1a35c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a360:	4299      	cmp	r1, r3
   1a362:	bfa8      	it	ge
   1a364:	4619      	movge	r1, r3
   1a366:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a36a:	68a0      	ldr	r0, [r4, #8]
   1a36c:	f007 f8b8 	bl	214e0 <adjust_owner_prio.isra.0>
   1a370:	b900      	cbnz	r0, 1a374 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   1a372:	b145      	cbz	r5, 1a386 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   1a374:	4631      	mov	r1, r6
   1a376:	480f      	ldr	r0, [pc, #60]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a378:	f000 fa74 	bl	1a864 <z_reschedule>
	return -EAGAIN;
   1a37c:	f06f 000a 	mvn.w	r0, #10
   1a380:	e7b3      	b.n	1a2ea <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   1a382:	2500      	movs	r5, #0
   1a384:	e7c4      	b.n	1a310 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a386:	480b      	ldr	r0, [pc, #44]	; (1a3b4 <z_impl_k_mutex_lock+0x18c>)
   1a388:	f001 fbfc 	bl	1bb84 <z_spin_unlock_valid>
   1a38c:	b940      	cbnz	r0, 1a3a0 <z_impl_k_mutex_lock+0x178>
   1a38e:	490a      	ldr	r1, [pc, #40]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a390:	4807      	ldr	r0, [pc, #28]	; (1a3b0 <z_impl_k_mutex_lock+0x188>)
   1a392:	22a7      	movs	r2, #167	; 0xa7
   1a394:	f002 fbbc 	bl	1cb10 <printk>
   1a398:	21a7      	movs	r1, #167	; 0xa7
   1a39a:	4807      	ldr	r0, [pc, #28]	; (1a3b8 <z_impl_k_mutex_lock+0x190>)
   1a39c:	f002 fe5e 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a3a0:	f386 8811 	msr	BASEPRI, r6
   1a3a4:	f3bf 8f6f 	isb	sy
   1a3a8:	e7e8      	b.n	1a37c <z_impl_k_mutex_lock+0x154>
   1a3aa:	bf00      	nop
   1a3ac:	00026481 	.word	0x00026481
   1a3b0:	00022f17 	.word	0x00022f17
   1a3b4:	20009fc0 	.word	0x20009fc0
   1a3b8:	00022f51 	.word	0x00022f51
   1a3bc:	20009fc4 	.word	0x20009fc4

0001a3c0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a3c0:	b538      	push	{r3, r4, r5, lr}
   1a3c2:	4604      	mov	r4, r0
   1a3c4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a3c8:	b143      	cbz	r3, 1a3dc <z_impl_k_mutex_unlock+0x1c>
   1a3ca:	4946      	ldr	r1, [pc, #280]	; (1a4e4 <z_impl_k_mutex_unlock+0x124>)
   1a3cc:	4846      	ldr	r0, [pc, #280]	; (1a4e8 <z_impl_k_mutex_unlock+0x128>)
   1a3ce:	22d8      	movs	r2, #216	; 0xd8
   1a3d0:	f002 fb9e 	bl	1cb10 <printk>
   1a3d4:	21d8      	movs	r1, #216	; 0xd8
   1a3d6:	4843      	ldr	r0, [pc, #268]	; (1a4e4 <z_impl_k_mutex_unlock+0x124>)
   1a3d8:	f002 fe40 	bl	1d05c <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1a3dc:	68a3      	ldr	r3, [r4, #8]
   1a3de:	2b00      	cmp	r3, #0
   1a3e0:	d079      	beq.n	1a4d6 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a3e2:	4d42      	ldr	r5, [pc, #264]	; (1a4ec <z_impl_k_mutex_unlock+0x12c>)
   1a3e4:	68aa      	ldr	r2, [r5, #8]
   1a3e6:	4293      	cmp	r3, r2
   1a3e8:	d178      	bne.n	1a4dc <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1a3ea:	68e3      	ldr	r3, [r4, #12]
   1a3ec:	b943      	cbnz	r3, 1a400 <z_impl_k_mutex_unlock+0x40>
   1a3ee:	493d      	ldr	r1, [pc, #244]	; (1a4e4 <z_impl_k_mutex_unlock+0x124>)
   1a3f0:	483d      	ldr	r0, [pc, #244]	; (1a4e8 <z_impl_k_mutex_unlock+0x128>)
   1a3f2:	22ea      	movs	r2, #234	; 0xea
   1a3f4:	f002 fb8c 	bl	1cb10 <printk>
   1a3f8:	21ea      	movs	r1, #234	; 0xea
   1a3fa:	483a      	ldr	r0, [pc, #232]	; (1a4e4 <z_impl_k_mutex_unlock+0x124>)
   1a3fc:	f002 fe2e 	bl	1d05c <assert_post_action>
   1a400:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   1a404:	b153      	cbz	r3, 1a41c <z_impl_k_mutex_unlock+0x5c>
   1a406:	493a      	ldr	r1, [pc, #232]	; (1a4f0 <z_impl_k_mutex_unlock+0x130>)
   1a408:	4837      	ldr	r0, [pc, #220]	; (1a4e8 <z_impl_k_mutex_unlock+0x128>)
   1a40a:	f44f 7289 	mov.w	r2, #274	; 0x112
   1a40e:	f002 fb7f 	bl	1cb10 <printk>
   1a412:	f44f 7189 	mov.w	r1, #274	; 0x112
   1a416:	4836      	ldr	r0, [pc, #216]	; (1a4f0 <z_impl_k_mutex_unlock+0x130>)
   1a418:	f002 fe20 	bl	1d05c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a41c:	68ab      	ldr	r3, [r5, #8]
   1a41e:	7bdb      	ldrb	r3, [r3, #15]
   1a420:	2b01      	cmp	r3, #1
   1a422:	d10a      	bne.n	1a43a <z_impl_k_mutex_unlock+0x7a>
   1a424:	4932      	ldr	r1, [pc, #200]	; (1a4f0 <z_impl_k_mutex_unlock+0x130>)
   1a426:	4830      	ldr	r0, [pc, #192]	; (1a4e8 <z_impl_k_mutex_unlock+0x128>)
   1a428:	f240 1213 	movw	r2, #275	; 0x113
   1a42c:	f002 fb70 	bl	1cb10 <printk>
   1a430:	f240 1113 	movw	r1, #275	; 0x113
   1a434:	482e      	ldr	r0, [pc, #184]	; (1a4f0 <z_impl_k_mutex_unlock+0x130>)
   1a436:	f002 fe11 	bl	1d05c <assert_post_action>

	--_current->base.sched_locked;
   1a43a:	68aa      	ldr	r2, [r5, #8]
   1a43c:	7bd3      	ldrb	r3, [r2, #15]
   1a43e:	3b01      	subs	r3, #1
   1a440:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1a442:	68e3      	ldr	r3, [r4, #12]
   1a444:	2b01      	cmp	r3, #1
   1a446:	d005      	beq.n	1a454 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   1a448:	3b01      	subs	r3, #1
   1a44a:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1a44c:	f000 fb38 	bl	1aac0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1a450:	2000      	movs	r0, #0
}
   1a452:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a454:	f04f 0320 	mov.w	r3, #32
   1a458:	f3ef 8511 	mrs	r5, BASEPRI
   1a45c:	f383 8811 	msr	BASEPRI, r3
   1a460:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a464:	4823      	ldr	r0, [pc, #140]	; (1a4f4 <z_impl_k_mutex_unlock+0x134>)
   1a466:	f001 fb7f 	bl	1bb68 <z_spin_lock_valid>
   1a46a:	b940      	cbnz	r0, 1a47e <z_impl_k_mutex_unlock+0xbe>
   1a46c:	4922      	ldr	r1, [pc, #136]	; (1a4f8 <z_impl_k_mutex_unlock+0x138>)
   1a46e:	481e      	ldr	r0, [pc, #120]	; (1a4e8 <z_impl_k_mutex_unlock+0x128>)
   1a470:	227c      	movs	r2, #124	; 0x7c
   1a472:	f002 fb4d 	bl	1cb10 <printk>
   1a476:	217c      	movs	r1, #124	; 0x7c
   1a478:	481f      	ldr	r0, [pc, #124]	; (1a4f8 <z_impl_k_mutex_unlock+0x138>)
   1a47a:	f002 fdef 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a47e:	481d      	ldr	r0, [pc, #116]	; (1a4f4 <z_impl_k_mutex_unlock+0x134>)
   1a480:	f001 fb8e 	bl	1bba0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a484:	6921      	ldr	r1, [r4, #16]
   1a486:	68a0      	ldr	r0, [r4, #8]
   1a488:	f007 f82a 	bl	214e0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a48c:	4620      	mov	r0, r4
   1a48e:	f000 ffc9 	bl	1b424 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a492:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a494:	b160      	cbz	r0, 1a4b0 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a496:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a49a:	6122      	str	r2, [r4, #16]
   1a49c:	2200      	movs	r2, #0
   1a49e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   1a4a2:	f000 fbb3 	bl	1ac0c <z_ready_thread>
		z_reschedule(&lock, key);
   1a4a6:	4629      	mov	r1, r5
   1a4a8:	4812      	ldr	r0, [pc, #72]	; (1a4f4 <z_impl_k_mutex_unlock+0x134>)
   1a4aa:	f000 f9db 	bl	1a864 <z_reschedule>
   1a4ae:	e7cd      	b.n	1a44c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   1a4b0:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a4b2:	4810      	ldr	r0, [pc, #64]	; (1a4f4 <z_impl_k_mutex_unlock+0x134>)
   1a4b4:	f001 fb66 	bl	1bb84 <z_spin_unlock_valid>
   1a4b8:	b940      	cbnz	r0, 1a4cc <z_impl_k_mutex_unlock+0x10c>
   1a4ba:	490f      	ldr	r1, [pc, #60]	; (1a4f8 <z_impl_k_mutex_unlock+0x138>)
   1a4bc:	480a      	ldr	r0, [pc, #40]	; (1a4e8 <z_impl_k_mutex_unlock+0x128>)
   1a4be:	22a7      	movs	r2, #167	; 0xa7
   1a4c0:	f002 fb26 	bl	1cb10 <printk>
   1a4c4:	21a7      	movs	r1, #167	; 0xa7
   1a4c6:	480c      	ldr	r0, [pc, #48]	; (1a4f8 <z_impl_k_mutex_unlock+0x138>)
   1a4c8:	f002 fdc8 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a4cc:	f385 8811 	msr	BASEPRI, r5
   1a4d0:	f3bf 8f6f 	isb	sy
   1a4d4:	e7ba      	b.n	1a44c <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   1a4d6:	f06f 0015 	mvn.w	r0, #21
   1a4da:	e7ba      	b.n	1a452 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1a4dc:	f04f 30ff 	mov.w	r0, #4294967295
   1a4e0:	e7b7      	b.n	1a452 <z_impl_k_mutex_unlock+0x92>
   1a4e2:	bf00      	nop
   1a4e4:	00026481 	.word	0x00026481
   1a4e8:	00022f17 	.word	0x00022f17
   1a4ec:	20009fc4 	.word	0x20009fc4
   1a4f0:	000264a3 	.word	0x000264a3
   1a4f4:	20009fc0 	.word	0x20009fc0
   1a4f8:	00022f51 	.word	0x00022f51

0001a4fc <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a500:	4604      	mov	r4, r0
   1a502:	460d      	mov	r5, r1
   1a504:	4690      	mov	r8, r2
   1a506:	4699      	mov	r9, r3
   1a508:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a50c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a510:	f04f 0320 	mov.w	r3, #32
   1a514:	f3ef 8711 	mrs	r7, BASEPRI
   1a518:	f383 8811 	msr	BASEPRI, r3
   1a51c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a520:	4630      	mov	r0, r6
   1a522:	f001 fb21 	bl	1bb68 <z_spin_lock_valid>
   1a526:	b940      	cbnz	r0, 1a53a <queue_insert+0x3e>
   1a528:	4937      	ldr	r1, [pc, #220]	; (1a608 <queue_insert+0x10c>)
   1a52a:	4838      	ldr	r0, [pc, #224]	; (1a60c <queue_insert+0x110>)
   1a52c:	227c      	movs	r2, #124	; 0x7c
   1a52e:	f002 faef 	bl	1cb10 <printk>
   1a532:	217c      	movs	r1, #124	; 0x7c
   1a534:	4834      	ldr	r0, [pc, #208]	; (1a608 <queue_insert+0x10c>)
   1a536:	f002 fd91 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a53a:	4630      	mov	r0, r6
   1a53c:	f001 fb30 	bl	1bba0 <z_spin_lock_set_owner>

	if (is_append) {
   1a540:	f1ba 0f00 	cmp.w	sl, #0
   1a544:	d000      	beq.n	1a548 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1a546:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a548:	f104 000c 	add.w	r0, r4, #12
   1a54c:	f000 ff6a 	bl	1b424 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1a550:	b160      	cbz	r0, 1a56c <queue_insert+0x70>
   1a552:	2400      	movs	r4, #0
   1a554:	f8c0 8014 	str.w	r8, [r0, #20]
   1a558:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1a55c:	f000 fb56 	bl	1ac0c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a560:	4630      	mov	r0, r6
   1a562:	4639      	mov	r1, r7
   1a564:	f000 f97e 	bl	1a864 <z_reschedule>
	return 0;
   1a568:	2000      	movs	r0, #0
   1a56a:	e019      	b.n	1a5a0 <queue_insert+0xa4>
	if (alloc) {
   1a56c:	f1b9 0f00 	cmp.w	r9, #0
   1a570:	d028      	beq.n	1a5c4 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1a572:	2108      	movs	r1, #8
   1a574:	f002 fa12 	bl	1c99c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a578:	b9a0      	cbnz	r0, 1a5a4 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a57a:	4630      	mov	r0, r6
   1a57c:	f001 fb02 	bl	1bb84 <z_spin_unlock_valid>
   1a580:	b940      	cbnz	r0, 1a594 <queue_insert+0x98>
   1a582:	4921      	ldr	r1, [pc, #132]	; (1a608 <queue_insert+0x10c>)
   1a584:	4821      	ldr	r0, [pc, #132]	; (1a60c <queue_insert+0x110>)
   1a586:	22a7      	movs	r2, #167	; 0xa7
   1a588:	f002 fac2 	bl	1cb10 <printk>
   1a58c:	21a7      	movs	r1, #167	; 0xa7
   1a58e:	481e      	ldr	r0, [pc, #120]	; (1a608 <queue_insert+0x10c>)
   1a590:	f002 fd64 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a594:	f387 8811 	msr	BASEPRI, r7
   1a598:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a59c:	f06f 000b 	mvn.w	r0, #11
}
   1a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1a5a4:	2301      	movs	r3, #1
		anode->data = data;
   1a5a6:	f8c0 8004 	str.w	r8, [r0, #4]
   1a5aa:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a5ac:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a5ae:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1a5b2:	b95d      	cbnz	r5, 1a5cc <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a5b4:	6823      	ldr	r3, [r4, #0]
   1a5b6:	4313      	orrs	r3, r2
   1a5b8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a5ba:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1a5bc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a5be:	b973      	cbnz	r3, 1a5de <queue_insert+0xe2>
	list->tail = node;
   1a5c0:	6060      	str	r0, [r4, #4]
}
   1a5c2:	e00c      	b.n	1a5de <queue_insert+0xe2>
}
   1a5c4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1a5c6:	f8c8 9000 	str.w	r9, [r8]
}
   1a5ca:	e7ef      	b.n	1a5ac <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a5cc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a5ce:	f033 0303 	bics.w	r3, r3, #3
   1a5d2:	d110      	bne.n	1a5f6 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a5d4:	6002      	str	r2, [r0, #0]
	return list->tail;
   1a5d6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a5d8:	b93a      	cbnz	r2, 1a5ea <queue_insert+0xee>
	list->head = node;
   1a5da:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a5de:	2104      	movs	r1, #4
   1a5e0:	f104 0014 	add.w	r0, r4, #20
   1a5e4:	f007 f8eb 	bl	217be <z_handle_obj_poll_events>
   1a5e8:	e7ba      	b.n	1a560 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a5ea:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a5ec:	f003 0303 	and.w	r3, r3, #3
   1a5f0:	4303      	orrs	r3, r0
   1a5f2:	6013      	str	r3, [r2, #0]
   1a5f4:	e7e4      	b.n	1a5c0 <queue_insert+0xc4>
   1a5f6:	4313      	orrs	r3, r2
   1a5f8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a5fa:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a5fc:	f003 0303 	and.w	r3, r3, #3
   1a600:	4303      	orrs	r3, r0
   1a602:	602b      	str	r3, [r5, #0]
}
   1a604:	e7eb      	b.n	1a5de <queue_insert+0xe2>
   1a606:	bf00      	nop
   1a608:	00022f51 	.word	0x00022f51
   1a60c:	00022f17 	.word	0x00022f17

0001a610 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a614:	4605      	mov	r5, r0
   1a616:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1a618:	460c      	mov	r4, r1
   1a61a:	2900      	cmp	r1, #0
   1a61c:	d045      	beq.n	1a6aa <k_queue_append_list+0x9a>
   1a61e:	2a00      	cmp	r2, #0
   1a620:	d043      	beq.n	1a6aa <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a622:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1a626:	f04f 0320 	mov.w	r3, #32
   1a62a:	f3ef 8911 	mrs	r9, BASEPRI
   1a62e:	f383 8811 	msr	BASEPRI, r3
   1a632:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a636:	4638      	mov	r0, r7
   1a638:	f001 fa96 	bl	1bb68 <z_spin_lock_valid>
   1a63c:	b940      	cbnz	r0, 1a650 <k_queue_append_list+0x40>
   1a63e:	491c      	ldr	r1, [pc, #112]	; (1a6b0 <k_queue_append_list+0xa0>)
   1a640:	481c      	ldr	r0, [pc, #112]	; (1a6b4 <k_queue_append_list+0xa4>)
   1a642:	227c      	movs	r2, #124	; 0x7c
   1a644:	f002 fa64 	bl	1cb10 <printk>
   1a648:	217c      	movs	r1, #124	; 0x7c
   1a64a:	4819      	ldr	r0, [pc, #100]	; (1a6b0 <k_queue_append_list+0xa0>)
   1a64c:	f002 fd06 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a650:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1a652:	f105 080c 	add.w	r8, r5, #12
   1a656:	f001 faa3 	bl	1bba0 <z_spin_lock_set_owner>
   1a65a:	4640      	mov	r0, r8
   1a65c:	f000 fee2 	bl	1b424 <z_unpend_first_thread>
   1a660:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   1a664:	b920      	cbnz	r0, 1a670 <k_queue_append_list+0x60>
	return list->tail;
   1a666:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a668:	b9ca      	cbnz	r2, 1a69e <k_queue_append_list+0x8e>
	list->head = node;
   1a66a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a66c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a66e:	e00a      	b.n	1a686 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   1a670:	6144      	str	r4, [r0, #20]
   1a672:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1a676:	f000 fac9 	bl	1ac0c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1a67a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1a67c:	4640      	mov	r0, r8
   1a67e:	f000 fed1 	bl	1b424 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1a682:	2c00      	cmp	r4, #0
   1a684:	d1ee      	bne.n	1a664 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a686:	2104      	movs	r1, #4
   1a688:	f105 0014 	add.w	r0, r5, #20
   1a68c:	f007 f897 	bl	217be <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a690:	4638      	mov	r0, r7
   1a692:	4649      	mov	r1, r9
   1a694:	f000 f8e6 	bl	1a864 <z_reschedule>
	return 0;
   1a698:	2000      	movs	r0, #0
}
   1a69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a69e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a6a0:	f003 0303 	and.w	r3, r3, #3
   1a6a4:	431c      	orrs	r4, r3
   1a6a6:	6014      	str	r4, [r2, #0]
}
   1a6a8:	e7e0      	b.n	1a66c <k_queue_append_list+0x5c>
		return -EINVAL;
   1a6aa:	f06f 0015 	mvn.w	r0, #21
   1a6ae:	e7f4      	b.n	1a69a <k_queue_append_list+0x8a>
   1a6b0:	00022f51 	.word	0x00022f51
   1a6b4:	00022f17 	.word	0x00022f17

0001a6b8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a6b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a6bc:	4605      	mov	r5, r0
   1a6be:	4690      	mov	r8, r2
   1a6c0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a6c2:	f100 0608 	add.w	r6, r0, #8
   1a6c6:	f04f 0320 	mov.w	r3, #32
   1a6ca:	f3ef 8911 	mrs	r9, BASEPRI
   1a6ce:	f383 8811 	msr	BASEPRI, r3
   1a6d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a6d6:	4630      	mov	r0, r6
   1a6d8:	f001 fa46 	bl	1bb68 <z_spin_lock_valid>
   1a6dc:	b940      	cbnz	r0, 1a6f0 <z_impl_k_queue_get+0x38>
   1a6de:	4921      	ldr	r1, [pc, #132]	; (1a764 <z_impl_k_queue_get+0xac>)
   1a6e0:	4821      	ldr	r0, [pc, #132]	; (1a768 <z_impl_k_queue_get+0xb0>)
   1a6e2:	227c      	movs	r2, #124	; 0x7c
   1a6e4:	f002 fa14 	bl	1cb10 <printk>
   1a6e8:	217c      	movs	r1, #124	; 0x7c
   1a6ea:	481e      	ldr	r0, [pc, #120]	; (1a764 <z_impl_k_queue_get+0xac>)
   1a6ec:	f002 fcb6 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a6f0:	4630      	mov	r0, r6
   1a6f2:	f001 fa55 	bl	1bba0 <z_spin_lock_set_owner>
	return list->head;
   1a6f6:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a6f8:	b314      	cbz	r4, 1a740 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a6fa:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a6fc:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a6fe:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a702:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a704:	4620      	mov	r0, r4
   1a706:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1a70a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1a70c:	bf08      	it	eq
   1a70e:	606b      	streq	r3, [r5, #4]
   1a710:	f006 fef5 	bl	214fe <z_queue_node_peek>
   1a714:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a716:	4630      	mov	r0, r6
   1a718:	f001 fa34 	bl	1bb84 <z_spin_unlock_valid>
   1a71c:	b940      	cbnz	r0, 1a730 <z_impl_k_queue_get+0x78>
   1a71e:	4911      	ldr	r1, [pc, #68]	; (1a764 <z_impl_k_queue_get+0xac>)
   1a720:	4811      	ldr	r0, [pc, #68]	; (1a768 <z_impl_k_queue_get+0xb0>)
   1a722:	22a7      	movs	r2, #167	; 0xa7
   1a724:	f002 f9f4 	bl	1cb10 <printk>
   1a728:	21a7      	movs	r1, #167	; 0xa7
   1a72a:	480e      	ldr	r0, [pc, #56]	; (1a764 <z_impl_k_queue_get+0xac>)
   1a72c:	f002 fc96 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a730:	f389 8811 	msr	BASEPRI, r9
   1a734:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a738:	4620      	mov	r0, r4
   1a73a:	b003      	add	sp, #12
   1a73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a740:	ea58 0307 	orrs.w	r3, r8, r7
   1a744:	d0e7      	beq.n	1a716 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a746:	4649      	mov	r1, r9
   1a748:	4630      	mov	r0, r6
   1a74a:	e9cd 8700 	strd	r8, r7, [sp]
   1a74e:	f105 020c 	add.w	r2, r5, #12
   1a752:	f000 fdc5 	bl	1b2e0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a756:	2800      	cmp	r0, #0
   1a758:	d1ee      	bne.n	1a738 <z_impl_k_queue_get+0x80>
   1a75a:	4b04      	ldr	r3, [pc, #16]	; (1a76c <z_impl_k_queue_get+0xb4>)
   1a75c:	689b      	ldr	r3, [r3, #8]
   1a75e:	695c      	ldr	r4, [r3, #20]
   1a760:	e7ea      	b.n	1a738 <z_impl_k_queue_get+0x80>
   1a762:	bf00      	nop
   1a764:	00022f51 	.word	0x00022f51
   1a768:	00022f17 	.word	0x00022f17
   1a76c:	20009fc4 	.word	0x20009fc4

0001a770 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a770:	6883      	ldr	r3, [r0, #8]
{
   1a772:	b510      	push	{r4, lr}
   1a774:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a776:	b953      	cbnz	r3, 1a78e <pended_on+0x1e>
   1a778:	4906      	ldr	r1, [pc, #24]	; (1a794 <pended_on+0x24>)
   1a77a:	4807      	ldr	r0, [pc, #28]	; (1a798 <pended_on+0x28>)
   1a77c:	f44f 7201 	mov.w	r2, #516	; 0x204
   1a780:	f002 f9c6 	bl	1cb10 <printk>
   1a784:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a788:	4802      	ldr	r0, [pc, #8]	; (1a794 <pended_on+0x24>)
   1a78a:	f002 fc67 	bl	1d05c <assert_post_action>

	return thread->base.pended_on;
}
   1a78e:	68a0      	ldr	r0, [r4, #8]
   1a790:	bd10      	pop	{r4, pc}
   1a792:	bf00      	nop
   1a794:	000264ce 	.word	0x000264ce
   1a798:	00022f17 	.word	0x00022f17

0001a79c <z_reset_time_slice>:
{
   1a79c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1a79e:	4c08      	ldr	r4, [pc, #32]	; (1a7c0 <z_reset_time_slice+0x24>)
   1a7a0:	6823      	ldr	r3, [r4, #0]
   1a7a2:	b15b      	cbz	r3, 1a7bc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a7a4:	f7f2 f8a6 	bl	c8f4 <z_clock_elapsed>
   1a7a8:	4603      	mov	r3, r0
   1a7aa:	6820      	ldr	r0, [r4, #0]
   1a7ac:	4a05      	ldr	r2, [pc, #20]	; (1a7c4 <z_reset_time_slice+0x28>)
   1a7ae:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1a7b0:	2100      	movs	r1, #0
}
   1a7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a7b6:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1a7b8:	f001 bc8c 	b.w	1c0d4 <z_set_timeout_expiry>
}
   1a7bc:	bd10      	pop	{r4, pc}
   1a7be:	bf00      	nop
   1a7c0:	2000a004 	.word	0x2000a004
   1a7c4:	20009fc4 	.word	0x20009fc4

0001a7c8 <k_sched_time_slice_set>:
{
   1a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7ca:	4604      	mov	r4, r0
   1a7cc:	460d      	mov	r5, r1
	__asm__ volatile(
   1a7ce:	f04f 0320 	mov.w	r3, #32
   1a7d2:	f3ef 8711 	mrs	r7, BASEPRI
   1a7d6:	f383 8811 	msr	BASEPRI, r3
   1a7da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a7de:	481b      	ldr	r0, [pc, #108]	; (1a84c <k_sched_time_slice_set+0x84>)
   1a7e0:	f001 f9c2 	bl	1bb68 <z_spin_lock_valid>
   1a7e4:	b940      	cbnz	r0, 1a7f8 <k_sched_time_slice_set+0x30>
   1a7e6:	491a      	ldr	r1, [pc, #104]	; (1a850 <k_sched_time_slice_set+0x88>)
   1a7e8:	481a      	ldr	r0, [pc, #104]	; (1a854 <k_sched_time_slice_set+0x8c>)
   1a7ea:	227c      	movs	r2, #124	; 0x7c
   1a7ec:	f002 f990 	bl	1cb10 <printk>
   1a7f0:	217c      	movs	r1, #124	; 0x7c
   1a7f2:	4817      	ldr	r0, [pc, #92]	; (1a850 <k_sched_time_slice_set+0x88>)
   1a7f4:	f002 fc32 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a7f8:	4814      	ldr	r0, [pc, #80]	; (1a84c <k_sched_time_slice_set+0x84>)
   1a7fa:	f001 f9d1 	bl	1bba0 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a7fe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1a802:	2100      	movs	r1, #0
   1a804:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a808:	4b13      	ldr	r3, [pc, #76]	; (1a858 <k_sched_time_slice_set+0x90>)
   1a80a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a80e:	6159      	str	r1, [r3, #20]
   1a810:	2300      	movs	r3, #0
   1a812:	fbe4 0106 	umlal	r0, r1, r4, r6
   1a816:	f7ee f989 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a81a:	4b10      	ldr	r3, [pc, #64]	; (1a85c <k_sched_time_slice_set+0x94>)
   1a81c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a81e:	4b10      	ldr	r3, [pc, #64]	; (1a860 <k_sched_time_slice_set+0x98>)
   1a820:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a822:	f7ff ffbb 	bl	1a79c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a826:	4809      	ldr	r0, [pc, #36]	; (1a84c <k_sched_time_slice_set+0x84>)
   1a828:	f001 f9ac 	bl	1bb84 <z_spin_unlock_valid>
   1a82c:	b940      	cbnz	r0, 1a840 <k_sched_time_slice_set+0x78>
   1a82e:	4908      	ldr	r1, [pc, #32]	; (1a850 <k_sched_time_slice_set+0x88>)
   1a830:	4808      	ldr	r0, [pc, #32]	; (1a854 <k_sched_time_slice_set+0x8c>)
   1a832:	22a7      	movs	r2, #167	; 0xa7
   1a834:	f002 f96c 	bl	1cb10 <printk>
   1a838:	21a7      	movs	r1, #167	; 0xa7
   1a83a:	4805      	ldr	r0, [pc, #20]	; (1a850 <k_sched_time_slice_set+0x88>)
   1a83c:	f002 fc0e 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a840:	f387 8811 	msr	BASEPRI, r7
   1a844:	f3bf 8f6f 	isb	sy
}
   1a848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a84a:	bf00      	nop
   1a84c:	20009ffc 	.word	0x20009ffc
   1a850:	00022f51 	.word	0x00022f51
   1a854:	00022f17 	.word	0x00022f17
   1a858:	20009fc4 	.word	0x20009fc4
   1a85c:	2000a004 	.word	0x2000a004
   1a860:	2000a000 	.word	0x2000a000

0001a864 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a864:	b510      	push	{r4, lr}
   1a866:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a868:	460c      	mov	r4, r1
   1a86a:	b9c1      	cbnz	r1, 1a89e <z_reschedule+0x3a>
   1a86c:	f3ef 8205 	mrs	r2, IPSR
   1a870:	b9aa      	cbnz	r2, 1a89e <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1a872:	4a14      	ldr	r2, [pc, #80]	; (1a8c4 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   1a874:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a876:	6892      	ldr	r2, [r2, #8]
   1a878:	4291      	cmp	r1, r2
   1a87a:	d010      	beq.n	1a89e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a87c:	f001 f982 	bl	1bb84 <z_spin_unlock_valid>
   1a880:	b940      	cbnz	r0, 1a894 <z_reschedule+0x30>
   1a882:	4911      	ldr	r1, [pc, #68]	; (1a8c8 <z_reschedule+0x64>)
   1a884:	4811      	ldr	r0, [pc, #68]	; (1a8cc <z_reschedule+0x68>)
   1a886:	22be      	movs	r2, #190	; 0xbe
   1a888:	f002 f942 	bl	1cb10 <printk>
   1a88c:	21be      	movs	r1, #190	; 0xbe
   1a88e:	480e      	ldr	r0, [pc, #56]	; (1a8c8 <z_reschedule+0x64>)
   1a890:	f002 fbe4 	bl	1d05c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1a898:	2000      	movs	r0, #0
   1a89a:	f7f3 b827 	b.w	d8ec <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a89e:	4618      	mov	r0, r3
   1a8a0:	f001 f970 	bl	1bb84 <z_spin_unlock_valid>
   1a8a4:	b940      	cbnz	r0, 1a8b8 <z_reschedule+0x54>
   1a8a6:	4908      	ldr	r1, [pc, #32]	; (1a8c8 <z_reschedule+0x64>)
   1a8a8:	4808      	ldr	r0, [pc, #32]	; (1a8cc <z_reschedule+0x68>)
   1a8aa:	22a7      	movs	r2, #167	; 0xa7
   1a8ac:	f002 f930 	bl	1cb10 <printk>
   1a8b0:	21a7      	movs	r1, #167	; 0xa7
   1a8b2:	4805      	ldr	r0, [pc, #20]	; (1a8c8 <z_reschedule+0x64>)
   1a8b4:	f002 fbd2 	bl	1d05c <assert_post_action>
   1a8b8:	f384 8811 	msr	BASEPRI, r4
   1a8bc:	f3bf 8f6f 	isb	sy
   1a8c0:	bd10      	pop	{r4, pc}
   1a8c2:	bf00      	nop
   1a8c4:	20009fc4 	.word	0x20009fc4
   1a8c8:	00022f51 	.word	0x00022f51
   1a8cc:	00022f17 	.word	0x00022f17

0001a8d0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1a8d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a8d2:	f04f 0320 	mov.w	r3, #32
   1a8d6:	f3ef 8511 	mrs	r5, BASEPRI
   1a8da:	f383 8811 	msr	BASEPRI, r3
   1a8de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a8e2:	4822      	ldr	r0, [pc, #136]	; (1a96c <k_sched_lock+0x9c>)
   1a8e4:	f001 f940 	bl	1bb68 <z_spin_lock_valid>
   1a8e8:	b940      	cbnz	r0, 1a8fc <k_sched_lock+0x2c>
   1a8ea:	4921      	ldr	r1, [pc, #132]	; (1a970 <k_sched_lock+0xa0>)
   1a8ec:	4821      	ldr	r0, [pc, #132]	; (1a974 <k_sched_lock+0xa4>)
   1a8ee:	227c      	movs	r2, #124	; 0x7c
   1a8f0:	f002 f90e 	bl	1cb10 <printk>
   1a8f4:	217c      	movs	r1, #124	; 0x7c
   1a8f6:	481e      	ldr	r0, [pc, #120]	; (1a970 <k_sched_lock+0xa0>)
   1a8f8:	f002 fbb0 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a8fc:	481b      	ldr	r0, [pc, #108]	; (1a96c <k_sched_lock+0x9c>)
   1a8fe:	f001 f94f 	bl	1bba0 <z_spin_lock_set_owner>
   1a902:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a906:	b153      	cbz	r3, 1a91e <k_sched_lock+0x4e>
   1a908:	491b      	ldr	r1, [pc, #108]	; (1a978 <k_sched_lock+0xa8>)
   1a90a:	481a      	ldr	r0, [pc, #104]	; (1a974 <k_sched_lock+0xa4>)
   1a90c:	f44f 7289 	mov.w	r2, #274	; 0x112
   1a910:	f002 f8fe 	bl	1cb10 <printk>
   1a914:	f44f 7189 	mov.w	r1, #274	; 0x112
   1a918:	4817      	ldr	r0, [pc, #92]	; (1a978 <k_sched_lock+0xa8>)
   1a91a:	f002 fb9f 	bl	1d05c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a91e:	4c17      	ldr	r4, [pc, #92]	; (1a97c <k_sched_lock+0xac>)
   1a920:	68a3      	ldr	r3, [r4, #8]
   1a922:	7bdb      	ldrb	r3, [r3, #15]
   1a924:	2b01      	cmp	r3, #1
   1a926:	d10a      	bne.n	1a93e <k_sched_lock+0x6e>
   1a928:	4913      	ldr	r1, [pc, #76]	; (1a978 <k_sched_lock+0xa8>)
   1a92a:	4812      	ldr	r0, [pc, #72]	; (1a974 <k_sched_lock+0xa4>)
   1a92c:	f240 1213 	movw	r2, #275	; 0x113
   1a930:	f002 f8ee 	bl	1cb10 <printk>
   1a934:	f240 1113 	movw	r1, #275	; 0x113
   1a938:	480f      	ldr	r0, [pc, #60]	; (1a978 <k_sched_lock+0xa8>)
   1a93a:	f002 fb8f 	bl	1d05c <assert_post_action>
	--_current->base.sched_locked;
   1a93e:	68a2      	ldr	r2, [r4, #8]
   1a940:	7bd3      	ldrb	r3, [r2, #15]
   1a942:	3b01      	subs	r3, #1
   1a944:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a946:	4809      	ldr	r0, [pc, #36]	; (1a96c <k_sched_lock+0x9c>)
   1a948:	f001 f91c 	bl	1bb84 <z_spin_unlock_valid>
   1a94c:	b940      	cbnz	r0, 1a960 <k_sched_lock+0x90>
   1a94e:	4908      	ldr	r1, [pc, #32]	; (1a970 <k_sched_lock+0xa0>)
   1a950:	4808      	ldr	r0, [pc, #32]	; (1a974 <k_sched_lock+0xa4>)
   1a952:	22a7      	movs	r2, #167	; 0xa7
   1a954:	f002 f8dc 	bl	1cb10 <printk>
   1a958:	21a7      	movs	r1, #167	; 0xa7
   1a95a:	4805      	ldr	r0, [pc, #20]	; (1a970 <k_sched_lock+0xa0>)
   1a95c:	f002 fb7e 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1a960:	f385 8811 	msr	BASEPRI, r5
   1a964:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a968:	bd38      	pop	{r3, r4, r5, pc}
   1a96a:	bf00      	nop
   1a96c:	20009ffc 	.word	0x20009ffc
   1a970:	00022f51 	.word	0x00022f51
   1a974:	00022f17 	.word	0x00022f17
   1a978:	000264a3 	.word	0x000264a3
   1a97c:	20009fc4 	.word	0x20009fc4

0001a980 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a980:	4b11      	ldr	r3, [pc, #68]	; (1a9c8 <z_priq_dumb_remove+0x48>)
{
   1a982:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a984:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1a988:	4282      	cmp	r2, r0
{
   1a98a:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a98c:	d105      	bne.n	1a99a <z_priq_dumb_remove+0x1a>
   1a98e:	689b      	ldr	r3, [r3, #8]
   1a990:	428b      	cmp	r3, r1
   1a992:	d102      	bne.n	1a99a <z_priq_dumb_remove+0x1a>
   1a994:	7b4b      	ldrb	r3, [r1, #13]
   1a996:	06db      	lsls	r3, r3, #27
   1a998:	d114      	bne.n	1a9c4 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a99a:	4b0c      	ldr	r3, [pc, #48]	; (1a9cc <z_priq_dumb_remove+0x4c>)
   1a99c:	429c      	cmp	r4, r3
   1a99e:	d10a      	bne.n	1a9b6 <z_priq_dumb_remove+0x36>
   1a9a0:	490b      	ldr	r1, [pc, #44]	; (1a9d0 <z_priq_dumb_remove+0x50>)
   1a9a2:	480c      	ldr	r0, [pc, #48]	; (1a9d4 <z_priq_dumb_remove+0x54>)
   1a9a4:	f240 32da 	movw	r2, #986	; 0x3da
   1a9a8:	f002 f8b2 	bl	1cb10 <printk>
   1a9ac:	f240 31da 	movw	r1, #986	; 0x3da
   1a9b0:	4807      	ldr	r0, [pc, #28]	; (1a9d0 <z_priq_dumb_remove+0x50>)
   1a9b2:	f002 fb53 	bl	1d05c <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1a9b6:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a9ba:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a9bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a9be:	2300      	movs	r3, #0
	node->prev = NULL;
   1a9c0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a9c4:	bd10      	pop	{r4, pc}
   1a9c6:	bf00      	nop
   1a9c8:	20009fc4 	.word	0x20009fc4
   1a9cc:	20009518 	.word	0x20009518
   1a9d0:	000264ce 	.word	0x000264ce
   1a9d4:	00022f17 	.word	0x00022f17

0001a9d8 <z_unpend_thread>:
{
   1a9d8:	b538      	push	{r3, r4, r5, lr}
   1a9da:	4604      	mov	r4, r0
	__asm__ volatile(
   1a9dc:	f04f 0320 	mov.w	r3, #32
   1a9e0:	f3ef 8511 	mrs	r5, BASEPRI
   1a9e4:	f383 8811 	msr	BASEPRI, r3
   1a9e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9ec:	4814      	ldr	r0, [pc, #80]	; (1aa40 <z_unpend_thread+0x68>)
   1a9ee:	f001 f8bb 	bl	1bb68 <z_spin_lock_valid>
   1a9f2:	b940      	cbnz	r0, 1aa06 <z_unpend_thread+0x2e>
   1a9f4:	4913      	ldr	r1, [pc, #76]	; (1aa44 <z_unpend_thread+0x6c>)
   1a9f6:	4814      	ldr	r0, [pc, #80]	; (1aa48 <z_unpend_thread+0x70>)
   1a9f8:	227c      	movs	r2, #124	; 0x7c
   1a9fa:	f002 f889 	bl	1cb10 <printk>
   1a9fe:	217c      	movs	r1, #124	; 0x7c
   1aa00:	4810      	ldr	r0, [pc, #64]	; (1aa44 <z_unpend_thread+0x6c>)
   1aa02:	f002 fb2b 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1aa06:	480e      	ldr	r0, [pc, #56]	; (1aa40 <z_unpend_thread+0x68>)
   1aa08:	f001 f8ca 	bl	1bba0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1aa0c:	4620      	mov	r0, r4
   1aa0e:	f006 fdc3 	bl	21598 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa12:	480b      	ldr	r0, [pc, #44]	; (1aa40 <z_unpend_thread+0x68>)
   1aa14:	f001 f8b6 	bl	1bb84 <z_spin_unlock_valid>
   1aa18:	b940      	cbnz	r0, 1aa2c <z_unpend_thread+0x54>
   1aa1a:	490a      	ldr	r1, [pc, #40]	; (1aa44 <z_unpend_thread+0x6c>)
   1aa1c:	480a      	ldr	r0, [pc, #40]	; (1aa48 <z_unpend_thread+0x70>)
   1aa1e:	22a7      	movs	r2, #167	; 0xa7
   1aa20:	f002 f876 	bl	1cb10 <printk>
   1aa24:	21a7      	movs	r1, #167	; 0xa7
   1aa26:	4807      	ldr	r0, [pc, #28]	; (1aa44 <z_unpend_thread+0x6c>)
   1aa28:	f002 fb18 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1aa2c:	f385 8811 	msr	BASEPRI, r5
   1aa30:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1aa34:	f104 0018 	add.w	r0, r4, #24
}
   1aa38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1aa3c:	f001 bad8 	b.w	1bff0 <z_abort_timeout>
   1aa40:	20009ffc 	.word	0x20009ffc
   1aa44:	00022f51 	.word	0x00022f51
   1aa48:	00022f17 	.word	0x00022f17

0001aa4c <update_cache>:
{
   1aa4c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1aa4e:	4c19      	ldr	r4, [pc, #100]	; (1aab4 <update_cache+0x68>)
{
   1aa50:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1aa52:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   1aa54:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   1aa56:	b143      	cbz	r3, 1aa6a <update_cache+0x1e>
		return _current_cpu->idle_thread;
   1aa58:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1aa5a:	b1a8      	cbz	r0, 1aa88 <update_cache+0x3c>
		if (thread != _current) {
   1aa5c:	68a3      	ldr	r3, [r4, #8]
   1aa5e:	42ab      	cmp	r3, r5
   1aa60:	d001      	beq.n	1aa66 <update_cache+0x1a>
			z_reset_time_slice();
   1aa62:	f7ff fe9b 	bl	1a79c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1aa66:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1aa68:	e023      	b.n	1aab2 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1aa6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1aa6e:	f006 fda1 	bl	215b4 <z_priq_dumb_best>
   1aa72:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1aa74:	7b4b      	ldrb	r3, [r1, #13]
   1aa76:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1aa78:	bf44      	itt	mi
   1aa7a:	f043 0308 	orrmi.w	r3, r3, #8
   1aa7e:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1aa80:	b905      	cbnz	r5, 1aa84 <update_cache+0x38>
   1aa82:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1aa84:	b152      	cbz	r2, 1aa9c <update_cache+0x50>
   1aa86:	e7e9      	b.n	1aa5c <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   1aa88:	b941      	cbnz	r1, 1aa9c <update_cache+0x50>
   1aa8a:	490b      	ldr	r1, [pc, #44]	; (1aab8 <update_cache+0x6c>)
   1aa8c:	480b      	ldr	r0, [pc, #44]	; (1aabc <update_cache+0x70>)
   1aa8e:	2283      	movs	r2, #131	; 0x83
   1aa90:	f002 f83e 	bl	1cb10 <printk>
   1aa94:	2183      	movs	r1, #131	; 0x83
   1aa96:	4808      	ldr	r0, [pc, #32]	; (1aab8 <update_cache+0x6c>)
   1aa98:	f002 fae0 	bl	1d05c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1aa9c:	68a3      	ldr	r3, [r4, #8]
   1aa9e:	7b5a      	ldrb	r2, [r3, #13]
   1aaa0:	06d2      	lsls	r2, r2, #27
   1aaa2:	d1db      	bne.n	1aa5c <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1aaa4:	69aa      	ldr	r2, [r5, #24]
   1aaa6:	2a00      	cmp	r2, #0
   1aaa8:	d1d8      	bne.n	1aa5c <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   1aaaa:	89da      	ldrh	r2, [r3, #14]
   1aaac:	2a7f      	cmp	r2, #127	; 0x7f
   1aaae:	d9d5      	bls.n	1aa5c <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   1aab0:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1aab2:	bd38      	pop	{r3, r4, r5, pc}
   1aab4:	20009fc4 	.word	0x20009fc4
   1aab8:	000264ce 	.word	0x000264ce
   1aabc:	00022f17 	.word	0x00022f17

0001aac0 <k_sched_unlock>:
{
   1aac0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1aac2:	f04f 0320 	mov.w	r3, #32
   1aac6:	f3ef 8511 	mrs	r5, BASEPRI
   1aaca:	f383 8811 	msr	BASEPRI, r3
   1aace:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aad2:	4824      	ldr	r0, [pc, #144]	; (1ab64 <k_sched_unlock+0xa4>)
   1aad4:	f001 f848 	bl	1bb68 <z_spin_lock_valid>
   1aad8:	b940      	cbnz	r0, 1aaec <k_sched_unlock+0x2c>
   1aada:	4923      	ldr	r1, [pc, #140]	; (1ab68 <k_sched_unlock+0xa8>)
   1aadc:	4823      	ldr	r0, [pc, #140]	; (1ab6c <k_sched_unlock+0xac>)
   1aade:	227c      	movs	r2, #124	; 0x7c
   1aae0:	f002 f816 	bl	1cb10 <printk>
   1aae4:	217c      	movs	r1, #124	; 0x7c
   1aae6:	4820      	ldr	r0, [pc, #128]	; (1ab68 <k_sched_unlock+0xa8>)
   1aae8:	f002 fab8 	bl	1d05c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1aaec:	4c20      	ldr	r4, [pc, #128]	; (1ab70 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1aaee:	481d      	ldr	r0, [pc, #116]	; (1ab64 <k_sched_unlock+0xa4>)
   1aaf0:	f001 f856 	bl	1bba0 <z_spin_lock_set_owner>
   1aaf4:	68a3      	ldr	r3, [r4, #8]
   1aaf6:	7bdb      	ldrb	r3, [r3, #15]
   1aaf8:	b953      	cbnz	r3, 1ab10 <k_sched_unlock+0x50>
   1aafa:	491e      	ldr	r1, [pc, #120]	; (1ab74 <k_sched_unlock+0xb4>)
   1aafc:	481b      	ldr	r0, [pc, #108]	; (1ab6c <k_sched_unlock+0xac>)
   1aafe:	f44f 725d 	mov.w	r2, #884	; 0x374
   1ab02:	f002 f805 	bl	1cb10 <printk>
   1ab06:	f44f 715d 	mov.w	r1, #884	; 0x374
   1ab0a:	481a      	ldr	r0, [pc, #104]	; (1ab74 <k_sched_unlock+0xb4>)
   1ab0c:	f002 faa6 	bl	1d05c <assert_post_action>
   1ab10:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1ab14:	b153      	cbz	r3, 1ab2c <k_sched_unlock+0x6c>
   1ab16:	4917      	ldr	r1, [pc, #92]	; (1ab74 <k_sched_unlock+0xb4>)
   1ab18:	4814      	ldr	r0, [pc, #80]	; (1ab6c <k_sched_unlock+0xac>)
   1ab1a:	f240 3275 	movw	r2, #885	; 0x375
   1ab1e:	f001 fff7 	bl	1cb10 <printk>
   1ab22:	f240 3175 	movw	r1, #885	; 0x375
   1ab26:	4813      	ldr	r0, [pc, #76]	; (1ab74 <k_sched_unlock+0xb4>)
   1ab28:	f002 fa98 	bl	1d05c <assert_post_action>
		++_current->base.sched_locked;
   1ab2c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1ab2e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1ab30:	7bd3      	ldrb	r3, [r2, #15]
   1ab32:	3301      	adds	r3, #1
   1ab34:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1ab36:	f7ff ff89 	bl	1aa4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab3a:	480a      	ldr	r0, [pc, #40]	; (1ab64 <k_sched_unlock+0xa4>)
   1ab3c:	f001 f822 	bl	1bb84 <z_spin_unlock_valid>
   1ab40:	b940      	cbnz	r0, 1ab54 <k_sched_unlock+0x94>
   1ab42:	4909      	ldr	r1, [pc, #36]	; (1ab68 <k_sched_unlock+0xa8>)
   1ab44:	4809      	ldr	r0, [pc, #36]	; (1ab6c <k_sched_unlock+0xac>)
   1ab46:	22a7      	movs	r2, #167	; 0xa7
   1ab48:	f001 ffe2 	bl	1cb10 <printk>
   1ab4c:	21a7      	movs	r1, #167	; 0xa7
   1ab4e:	4806      	ldr	r0, [pc, #24]	; (1ab68 <k_sched_unlock+0xa8>)
   1ab50:	f002 fa84 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1ab54:	f385 8811 	msr	BASEPRI, r5
   1ab58:	f3bf 8f6f 	isb	sy
}
   1ab5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1ab60:	f006 bd10 	b.w	21584 <z_reschedule_unlocked>
   1ab64:	20009ffc 	.word	0x20009ffc
   1ab68:	00022f51 	.word	0x00022f51
   1ab6c:	00022f17 	.word	0x00022f17
   1ab70:	20009fc4 	.word	0x20009fc4
   1ab74:	000264ce 	.word	0x000264ce

0001ab78 <ready_thread>:
{
   1ab78:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ab7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1ab7e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ab80:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1ab82:	7b43      	ldrb	r3, [r0, #13]
   1ab84:	db39      	blt.n	1abfa <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ab86:	06db      	lsls	r3, r3, #27
   1ab88:	d137      	bne.n	1abfa <ready_thread+0x82>
   1ab8a:	6983      	ldr	r3, [r0, #24]
   1ab8c:	2b00      	cmp	r3, #0
   1ab8e:	d134      	bne.n	1abfa <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ab90:	4b1a      	ldr	r3, [pc, #104]	; (1abfc <ready_thread+0x84>)
   1ab92:	4298      	cmp	r0, r3
   1ab94:	d10a      	bne.n	1abac <ready_thread+0x34>
   1ab96:	491a      	ldr	r1, [pc, #104]	; (1ac00 <ready_thread+0x88>)
   1ab98:	481a      	ldr	r0, [pc, #104]	; (1ac04 <ready_thread+0x8c>)
   1ab9a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1ab9e:	f001 ffb7 	bl	1cb10 <printk>
   1aba2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1aba6:	4816      	ldr	r0, [pc, #88]	; (1ac00 <ready_thread+0x88>)
   1aba8:	f002 fa58 	bl	1d05c <assert_post_action>
	return list->head == list;
   1abac:	4a16      	ldr	r2, [pc, #88]	; (1ac08 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1abae:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1abb2:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1abb6:	4283      	cmp	r3, r0
   1abb8:	d019      	beq.n	1abee <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1abba:	b1c3      	cbz	r3, 1abee <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1abbc:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1abc0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1abc4:	42ae      	cmp	r6, r5
   1abc6:	dd0d      	ble.n	1abe4 <ready_thread+0x6c>
	node->prev = successor->prev;
   1abc8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1abca:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1abce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1abd0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1abd2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   1abd4:	2000      	movs	r0, #0
   1abd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1abda:	7363      	strb	r3, [r4, #13]
}
   1abdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1abe0:	f7ff bf34 	b.w	1aa4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1abe4:	428b      	cmp	r3, r1
   1abe6:	d002      	beq.n	1abee <ready_thread+0x76>
   1abe8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1abea:	2b00      	cmp	r3, #0
   1abec:	d1e8      	bne.n	1abc0 <ready_thread+0x48>
	node->prev = list->tail;
   1abee:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1abf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1abf4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1abf6:	6314      	str	r4, [r2, #48]	; 0x30
}
   1abf8:	e7eb      	b.n	1abd2 <ready_thread+0x5a>
}
   1abfa:	bd70      	pop	{r4, r5, r6, pc}
   1abfc:	20009518 	.word	0x20009518
   1ac00:	000264ce 	.word	0x000264ce
   1ac04:	00022f17 	.word	0x00022f17
   1ac08:	20009fc4 	.word	0x20009fc4

0001ac0c <z_ready_thread>:
{
   1ac0c:	b538      	push	{r3, r4, r5, lr}
   1ac0e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ac10:	f04f 0320 	mov.w	r3, #32
   1ac14:	f3ef 8511 	mrs	r5, BASEPRI
   1ac18:	f383 8811 	msr	BASEPRI, r3
   1ac1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac20:	4812      	ldr	r0, [pc, #72]	; (1ac6c <z_ready_thread+0x60>)
   1ac22:	f000 ffa1 	bl	1bb68 <z_spin_lock_valid>
   1ac26:	b940      	cbnz	r0, 1ac3a <z_ready_thread+0x2e>
   1ac28:	4911      	ldr	r1, [pc, #68]	; (1ac70 <z_ready_thread+0x64>)
   1ac2a:	4812      	ldr	r0, [pc, #72]	; (1ac74 <z_ready_thread+0x68>)
   1ac2c:	227c      	movs	r2, #124	; 0x7c
   1ac2e:	f001 ff6f 	bl	1cb10 <printk>
   1ac32:	217c      	movs	r1, #124	; 0x7c
   1ac34:	480e      	ldr	r0, [pc, #56]	; (1ac70 <z_ready_thread+0x64>)
   1ac36:	f002 fa11 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac3a:	480c      	ldr	r0, [pc, #48]	; (1ac6c <z_ready_thread+0x60>)
   1ac3c:	f000 ffb0 	bl	1bba0 <z_spin_lock_set_owner>
		ready_thread(thread);
   1ac40:	4620      	mov	r0, r4
   1ac42:	f7ff ff99 	bl	1ab78 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac46:	4809      	ldr	r0, [pc, #36]	; (1ac6c <z_ready_thread+0x60>)
   1ac48:	f000 ff9c 	bl	1bb84 <z_spin_unlock_valid>
   1ac4c:	b940      	cbnz	r0, 1ac60 <z_ready_thread+0x54>
   1ac4e:	4908      	ldr	r1, [pc, #32]	; (1ac70 <z_ready_thread+0x64>)
   1ac50:	4808      	ldr	r0, [pc, #32]	; (1ac74 <z_ready_thread+0x68>)
   1ac52:	22a7      	movs	r2, #167	; 0xa7
   1ac54:	f001 ff5c 	bl	1cb10 <printk>
   1ac58:	21a7      	movs	r1, #167	; 0xa7
   1ac5a:	4805      	ldr	r0, [pc, #20]	; (1ac70 <z_ready_thread+0x64>)
   1ac5c:	f002 f9fe 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1ac60:	f385 8811 	msr	BASEPRI, r5
   1ac64:	f3bf 8f6f 	isb	sy
}
   1ac68:	bd38      	pop	{r3, r4, r5, pc}
   1ac6a:	bf00      	nop
   1ac6c:	20009ffc 	.word	0x20009ffc
   1ac70:	00022f51 	.word	0x00022f51
   1ac74:	00022f17 	.word	0x00022f17

0001ac78 <z_sched_start>:
{
   1ac78:	b538      	push	{r3, r4, r5, lr}
   1ac7a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ac7c:	f04f 0320 	mov.w	r3, #32
   1ac80:	f3ef 8511 	mrs	r5, BASEPRI
   1ac84:	f383 8811 	msr	BASEPRI, r3
   1ac88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac8c:	4818      	ldr	r0, [pc, #96]	; (1acf0 <z_sched_start+0x78>)
   1ac8e:	f000 ff6b 	bl	1bb68 <z_spin_lock_valid>
   1ac92:	b940      	cbnz	r0, 1aca6 <z_sched_start+0x2e>
   1ac94:	4917      	ldr	r1, [pc, #92]	; (1acf4 <z_sched_start+0x7c>)
   1ac96:	4818      	ldr	r0, [pc, #96]	; (1acf8 <z_sched_start+0x80>)
   1ac98:	227c      	movs	r2, #124	; 0x7c
   1ac9a:	f001 ff39 	bl	1cb10 <printk>
   1ac9e:	217c      	movs	r1, #124	; 0x7c
   1aca0:	4814      	ldr	r0, [pc, #80]	; (1acf4 <z_sched_start+0x7c>)
   1aca2:	f002 f9db 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1aca6:	4812      	ldr	r0, [pc, #72]	; (1acf0 <z_sched_start+0x78>)
   1aca8:	f000 ff7a 	bl	1bba0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1acac:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1acae:	075a      	lsls	r2, r3, #29
   1acb0:	d411      	bmi.n	1acd6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1acb2:	480f      	ldr	r0, [pc, #60]	; (1acf0 <z_sched_start+0x78>)
   1acb4:	f000 ff66 	bl	1bb84 <z_spin_unlock_valid>
   1acb8:	b940      	cbnz	r0, 1accc <z_sched_start+0x54>
   1acba:	490e      	ldr	r1, [pc, #56]	; (1acf4 <z_sched_start+0x7c>)
   1acbc:	480e      	ldr	r0, [pc, #56]	; (1acf8 <z_sched_start+0x80>)
   1acbe:	22a7      	movs	r2, #167	; 0xa7
   1acc0:	f001 ff26 	bl	1cb10 <printk>
   1acc4:	21a7      	movs	r1, #167	; 0xa7
   1acc6:	480b      	ldr	r0, [pc, #44]	; (1acf4 <z_sched_start+0x7c>)
   1acc8:	f002 f9c8 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1accc:	f385 8811 	msr	BASEPRI, r5
   1acd0:	f3bf 8f6f 	isb	sy
}
   1acd4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1acd6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1acda:	4620      	mov	r0, r4
   1acdc:	7363      	strb	r3, [r4, #13]
   1acde:	f7ff ff4b 	bl	1ab78 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ace2:	4629      	mov	r1, r5
}
   1ace4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1ace8:	4801      	ldr	r0, [pc, #4]	; (1acf0 <z_sched_start+0x78>)
   1acea:	f7ff bdbb 	b.w	1a864 <z_reschedule>
   1acee:	bf00      	nop
   1acf0:	20009ffc 	.word	0x20009ffc
   1acf4:	00022f51 	.word	0x00022f51
   1acf8:	00022f17 	.word	0x00022f17

0001acfc <z_thread_timeout>:
{
   1acfc:	b570      	push	{r4, r5, r6, lr}
   1acfe:	4604      	mov	r4, r0
	__asm__ volatile(
   1ad00:	f04f 0320 	mov.w	r3, #32
   1ad04:	f3ef 8611 	mrs	r6, BASEPRI
   1ad08:	f383 8811 	msr	BASEPRI, r3
   1ad0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad10:	4819      	ldr	r0, [pc, #100]	; (1ad78 <z_thread_timeout+0x7c>)
   1ad12:	f000 ff29 	bl	1bb68 <z_spin_lock_valid>
   1ad16:	b940      	cbnz	r0, 1ad2a <z_thread_timeout+0x2e>
   1ad18:	4918      	ldr	r1, [pc, #96]	; (1ad7c <z_thread_timeout+0x80>)
   1ad1a:	4819      	ldr	r0, [pc, #100]	; (1ad80 <z_thread_timeout+0x84>)
   1ad1c:	227c      	movs	r2, #124	; 0x7c
   1ad1e:	f001 fef7 	bl	1cb10 <printk>
   1ad22:	217c      	movs	r1, #124	; 0x7c
   1ad24:	4815      	ldr	r0, [pc, #84]	; (1ad7c <z_thread_timeout+0x80>)
   1ad26:	f002 f999 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad2a:	4813      	ldr	r0, [pc, #76]	; (1ad78 <z_thread_timeout+0x7c>)
   1ad2c:	f000 ff38 	bl	1bba0 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   1ad30:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1ad34:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   1ad38:	b113      	cbz	r3, 1ad40 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   1ad3a:	4628      	mov	r0, r5
   1ad3c:	f006 fc2c 	bl	21598 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ad40:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   1ad44:	4628      	mov	r0, r5
   1ad46:	f023 0314 	bic.w	r3, r3, #20
   1ad4a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1ad4e:	f7ff ff13 	bl	1ab78 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad52:	4809      	ldr	r0, [pc, #36]	; (1ad78 <z_thread_timeout+0x7c>)
   1ad54:	f000 ff16 	bl	1bb84 <z_spin_unlock_valid>
   1ad58:	b940      	cbnz	r0, 1ad6c <z_thread_timeout+0x70>
   1ad5a:	4908      	ldr	r1, [pc, #32]	; (1ad7c <z_thread_timeout+0x80>)
   1ad5c:	4808      	ldr	r0, [pc, #32]	; (1ad80 <z_thread_timeout+0x84>)
   1ad5e:	22a7      	movs	r2, #167	; 0xa7
   1ad60:	f001 fed6 	bl	1cb10 <printk>
   1ad64:	21a7      	movs	r1, #167	; 0xa7
   1ad66:	4805      	ldr	r0, [pc, #20]	; (1ad7c <z_thread_timeout+0x80>)
   1ad68:	f002 f978 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1ad6c:	f386 8811 	msr	BASEPRI, r6
   1ad70:	f3bf 8f6f 	isb	sy
}
   1ad74:	bd70      	pop	{r4, r5, r6, pc}
   1ad76:	bf00      	nop
   1ad78:	20009ffc 	.word	0x20009ffc
   1ad7c:	00022f51 	.word	0x00022f51
   1ad80:	00022f17 	.word	0x00022f17

0001ad84 <move_thread_to_end_of_prio_q>:
{
   1ad84:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ad86:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1ad8a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1ad8c:	2b00      	cmp	r3, #0
   1ad8e:	da03      	bge.n	1ad98 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ad90:	4601      	mov	r1, r0
   1ad92:	481d      	ldr	r0, [pc, #116]	; (1ae08 <move_thread_to_end_of_prio_q+0x84>)
   1ad94:	f7ff fdf4 	bl	1a980 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ad98:	4b1c      	ldr	r3, [pc, #112]	; (1ae0c <move_thread_to_end_of_prio_q+0x88>)
   1ad9a:	429c      	cmp	r4, r3
   1ad9c:	d10a      	bne.n	1adb4 <move_thread_to_end_of_prio_q+0x30>
   1ad9e:	491c      	ldr	r1, [pc, #112]	; (1ae10 <move_thread_to_end_of_prio_q+0x8c>)
   1ada0:	481c      	ldr	r0, [pc, #112]	; (1ae14 <move_thread_to_end_of_prio_q+0x90>)
   1ada2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1ada6:	f001 feb3 	bl	1cb10 <printk>
   1adaa:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1adae:	4818      	ldr	r0, [pc, #96]	; (1ae10 <move_thread_to_end_of_prio_q+0x8c>)
   1adb0:	f002 f954 	bl	1d05c <assert_post_action>
	return list->head == list;
   1adb4:	4a18      	ldr	r2, [pc, #96]	; (1ae18 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1adb6:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1adba:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1adbe:	4283      	cmp	r3, r0
   1adc0:	d01c      	beq.n	1adfc <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1adc2:	b1db      	cbz	r3, 1adfc <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   1adc4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1adc8:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1adcc:	42ae      	cmp	r6, r5
   1adce:	dd10      	ble.n	1adf2 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   1add0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1add2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1add6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1add8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1adda:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   1addc:	6890      	ldr	r0, [r2, #8]
   1adde:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ade2:	7363      	strb	r3, [r4, #13]
   1ade4:	1b03      	subs	r3, r0, r4
   1ade6:	4258      	negs	r0, r3
   1ade8:	4158      	adcs	r0, r3
}
   1adea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1adee:	f7ff be2d 	b.w	1aa4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1adf2:	428b      	cmp	r3, r1
   1adf4:	d002      	beq.n	1adfc <move_thread_to_end_of_prio_q+0x78>
   1adf6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d1e5      	bne.n	1adc8 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   1adfc:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1ae00:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ae02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ae04:	6314      	str	r4, [r2, #48]	; 0x30
}
   1ae06:	e7e8      	b.n	1adda <move_thread_to_end_of_prio_q+0x56>
   1ae08:	20009ff0 	.word	0x20009ff0
   1ae0c:	20009518 	.word	0x20009518
   1ae10:	000264ce 	.word	0x000264ce
   1ae14:	00022f17 	.word	0x00022f17
   1ae18:	20009fc4 	.word	0x20009fc4

0001ae1c <z_time_slice>:
{
   1ae1c:	b538      	push	{r3, r4, r5, lr}
   1ae1e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ae20:	f04f 0320 	mov.w	r3, #32
   1ae24:	f3ef 8511 	mrs	r5, BASEPRI
   1ae28:	f383 8811 	msr	BASEPRI, r3
   1ae2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae30:	4824      	ldr	r0, [pc, #144]	; (1aec4 <z_time_slice+0xa8>)
   1ae32:	f000 fe99 	bl	1bb68 <z_spin_lock_valid>
   1ae36:	b940      	cbnz	r0, 1ae4a <z_time_slice+0x2e>
   1ae38:	4923      	ldr	r1, [pc, #140]	; (1aec8 <z_time_slice+0xac>)
   1ae3a:	4824      	ldr	r0, [pc, #144]	; (1aecc <z_time_slice+0xb0>)
   1ae3c:	227c      	movs	r2, #124	; 0x7c
   1ae3e:	f001 fe67 	bl	1cb10 <printk>
   1ae42:	217c      	movs	r1, #124	; 0x7c
   1ae44:	4820      	ldr	r0, [pc, #128]	; (1aec8 <z_time_slice+0xac>)
   1ae46:	f002 f909 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1ae4a:	481e      	ldr	r0, [pc, #120]	; (1aec4 <z_time_slice+0xa8>)
   1ae4c:	f000 fea8 	bl	1bba0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1ae50:	4b1f      	ldr	r3, [pc, #124]	; (1aed0 <z_time_slice+0xb4>)
   1ae52:	4a20      	ldr	r2, [pc, #128]	; (1aed4 <z_time_slice+0xb8>)
   1ae54:	6898      	ldr	r0, [r3, #8]
   1ae56:	6811      	ldr	r1, [r2, #0]
   1ae58:	4288      	cmp	r0, r1
   1ae5a:	d113      	bne.n	1ae84 <z_time_slice+0x68>
			z_reset_time_slice();
   1ae5c:	f7ff fc9e 	bl	1a79c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae60:	4818      	ldr	r0, [pc, #96]	; (1aec4 <z_time_slice+0xa8>)
   1ae62:	f000 fe8f 	bl	1bb84 <z_spin_unlock_valid>
   1ae66:	b940      	cbnz	r0, 1ae7a <z_time_slice+0x5e>
   1ae68:	4917      	ldr	r1, [pc, #92]	; (1aec8 <z_time_slice+0xac>)
   1ae6a:	4818      	ldr	r0, [pc, #96]	; (1aecc <z_time_slice+0xb0>)
   1ae6c:	22a7      	movs	r2, #167	; 0xa7
   1ae6e:	f001 fe4f 	bl	1cb10 <printk>
   1ae72:	21a7      	movs	r1, #167	; 0xa7
   1ae74:	4814      	ldr	r0, [pc, #80]	; (1aec8 <z_time_slice+0xac>)
   1ae76:	f002 f8f1 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1ae7a:	f385 8811 	msr	BASEPRI, r5
   1ae7e:	f3bf 8f6f 	isb	sy
}
   1ae82:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1ae84:	2100      	movs	r1, #0
   1ae86:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1ae88:	4a13      	ldr	r2, [pc, #76]	; (1aed8 <z_time_slice+0xbc>)
   1ae8a:	6812      	ldr	r2, [r2, #0]
   1ae8c:	b1ba      	cbz	r2, 1aebe <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1ae8e:	89c2      	ldrh	r2, [r0, #14]
   1ae90:	2a7f      	cmp	r2, #127	; 0x7f
   1ae92:	d814      	bhi.n	1aebe <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   1ae94:	7b42      	ldrb	r2, [r0, #13]
   1ae96:	06d2      	lsls	r2, r2, #27
   1ae98:	d111      	bne.n	1aebe <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ae9a:	4a10      	ldr	r2, [pc, #64]	; (1aedc <z_time_slice+0xc0>)
   1ae9c:	f990 100e 	ldrsb.w	r1, [r0, #14]
   1aea0:	6812      	ldr	r2, [r2, #0]
   1aea2:	4291      	cmp	r1, r2
   1aea4:	db0b      	blt.n	1aebe <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1aea6:	4a0e      	ldr	r2, [pc, #56]	; (1aee0 <z_time_slice+0xc4>)
   1aea8:	4290      	cmp	r0, r2
   1aeaa:	d008      	beq.n	1aebe <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   1aeac:	695a      	ldr	r2, [r3, #20]
   1aeae:	42a2      	cmp	r2, r4
   1aeb0:	dc02      	bgt.n	1aeb8 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   1aeb2:	f7ff ff67 	bl	1ad84 <move_thread_to_end_of_prio_q>
   1aeb6:	e7d1      	b.n	1ae5c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   1aeb8:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   1aeba:	615a      	str	r2, [r3, #20]
   1aebc:	e7d0      	b.n	1ae60 <z_time_slice+0x44>
   1aebe:	2200      	movs	r2, #0
   1aec0:	e7fb      	b.n	1aeba <z_time_slice+0x9e>
   1aec2:	bf00      	nop
   1aec4:	20009ffc 	.word	0x20009ffc
   1aec8:	00022f51 	.word	0x00022f51
   1aecc:	00022f17 	.word	0x00022f17
   1aed0:	20009fc4 	.word	0x20009fc4
   1aed4:	20009ff8 	.word	0x20009ff8
   1aed8:	2000a004 	.word	0x2000a004
   1aedc:	2000a000 	.word	0x2000a000
   1aee0:	20009518 	.word	0x20009518

0001aee4 <z_impl_k_thread_suspend>:
{
   1aee4:	b570      	push	{r4, r5, r6, lr}
   1aee6:	4604      	mov	r4, r0
   1aee8:	3018      	adds	r0, #24
   1aeea:	f001 f881 	bl	1bff0 <z_abort_timeout>
	__asm__ volatile(
   1aeee:	f04f 0320 	mov.w	r3, #32
   1aef2:	f3ef 8611 	mrs	r6, BASEPRI
   1aef6:	f383 8811 	msr	BASEPRI, r3
   1aefa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aefe:	4820      	ldr	r0, [pc, #128]	; (1af80 <z_impl_k_thread_suspend+0x9c>)
   1af00:	f000 fe32 	bl	1bb68 <z_spin_lock_valid>
   1af04:	b940      	cbnz	r0, 1af18 <z_impl_k_thread_suspend+0x34>
   1af06:	491f      	ldr	r1, [pc, #124]	; (1af84 <z_impl_k_thread_suspend+0xa0>)
   1af08:	481f      	ldr	r0, [pc, #124]	; (1af88 <z_impl_k_thread_suspend+0xa4>)
   1af0a:	227c      	movs	r2, #124	; 0x7c
   1af0c:	f001 fe00 	bl	1cb10 <printk>
   1af10:	217c      	movs	r1, #124	; 0x7c
   1af12:	481c      	ldr	r0, [pc, #112]	; (1af84 <z_impl_k_thread_suspend+0xa0>)
   1af14:	f002 f8a2 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1af18:	4819      	ldr	r0, [pc, #100]	; (1af80 <z_impl_k_thread_suspend+0x9c>)
   1af1a:	f000 fe41 	bl	1bba0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1af1e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1af22:	2b00      	cmp	r3, #0
   1af24:	da07      	bge.n	1af36 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1af26:	4621      	mov	r1, r4
   1af28:	4818      	ldr	r0, [pc, #96]	; (1af8c <z_impl_k_thread_suspend+0xa8>)
   1af2a:	f7ff fd29 	bl	1a980 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1af2e:	7b63      	ldrb	r3, [r4, #13]
   1af30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1af34:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1af36:	4d16      	ldr	r5, [pc, #88]	; (1af90 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1af38:	7b63      	ldrb	r3, [r4, #13]
   1af3a:	68a8      	ldr	r0, [r5, #8]
   1af3c:	f043 0310 	orr.w	r3, r3, #16
   1af40:	7363      	strb	r3, [r4, #13]
   1af42:	1b03      	subs	r3, r0, r4
   1af44:	4258      	negs	r0, r3
   1af46:	4158      	adcs	r0, r3
   1af48:	f7ff fd80 	bl	1aa4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af4c:	480c      	ldr	r0, [pc, #48]	; (1af80 <z_impl_k_thread_suspend+0x9c>)
   1af4e:	f000 fe19 	bl	1bb84 <z_spin_unlock_valid>
   1af52:	b940      	cbnz	r0, 1af66 <z_impl_k_thread_suspend+0x82>
   1af54:	490b      	ldr	r1, [pc, #44]	; (1af84 <z_impl_k_thread_suspend+0xa0>)
   1af56:	480c      	ldr	r0, [pc, #48]	; (1af88 <z_impl_k_thread_suspend+0xa4>)
   1af58:	22a7      	movs	r2, #167	; 0xa7
   1af5a:	f001 fdd9 	bl	1cb10 <printk>
   1af5e:	21a7      	movs	r1, #167	; 0xa7
   1af60:	4808      	ldr	r0, [pc, #32]	; (1af84 <z_impl_k_thread_suspend+0xa0>)
   1af62:	f002 f87b 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1af66:	f386 8811 	msr	BASEPRI, r6
   1af6a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1af6e:	68ab      	ldr	r3, [r5, #8]
   1af70:	42a3      	cmp	r3, r4
   1af72:	d103      	bne.n	1af7c <z_impl_k_thread_suspend+0x98>
}
   1af74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1af78:	f006 bb04 	b.w	21584 <z_reschedule_unlocked>
}
   1af7c:	bd70      	pop	{r4, r5, r6, pc}
   1af7e:	bf00      	nop
   1af80:	20009ffc 	.word	0x20009ffc
   1af84:	00022f51 	.word	0x00022f51
   1af88:	00022f17 	.word	0x00022f17
   1af8c:	20009ff0 	.word	0x20009ff0
   1af90:	20009fc4 	.word	0x20009fc4

0001af94 <z_thread_single_abort>:
{
   1af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1af98:	7b03      	ldrb	r3, [r0, #12]
{
   1af9a:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1af9c:	07dd      	lsls	r5, r3, #31
   1af9e:	d50a      	bpl.n	1afb6 <z_thread_single_abort+0x22>
   1afa0:	4976      	ldr	r1, [pc, #472]	; (1b17c <z_thread_single_abort+0x1e8>)
   1afa2:	4877      	ldr	r0, [pc, #476]	; (1b180 <z_thread_single_abort+0x1ec>)
   1afa4:	f240 220d 	movw	r2, #525	; 0x20d
   1afa8:	f001 fdb2 	bl	1cb10 <printk>
   1afac:	f240 210d 	movw	r1, #525	; 0x20d
   1afb0:	4872      	ldr	r0, [pc, #456]	; (1b17c <z_thread_single_abort+0x1e8>)
   1afb2:	f002 f853 	bl	1d05c <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   1afb6:	4e73      	ldr	r6, [pc, #460]	; (1b184 <z_thread_single_abort+0x1f0>)
   1afb8:	68b3      	ldr	r3, [r6, #8]
   1afba:	42a3      	cmp	r3, r4
   1afbc:	d10d      	bne.n	1afda <z_thread_single_abort+0x46>
   1afbe:	f3ef 8305 	mrs	r3, IPSR
   1afc2:	b953      	cbnz	r3, 1afda <z_thread_single_abort+0x46>
   1afc4:	496d      	ldr	r1, [pc, #436]	; (1b17c <z_thread_single_abort+0x1e8>)
   1afc6:	486e      	ldr	r0, [pc, #440]	; (1b180 <z_thread_single_abort+0x1ec>)
   1afc8:	f240 220f 	movw	r2, #527	; 0x20f
   1afcc:	f001 fda0 	bl	1cb10 <printk>
   1afd0:	f240 210f 	movw	r1, #527	; 0x20f
   1afd4:	4869      	ldr	r0, [pc, #420]	; (1b17c <z_thread_single_abort+0x1e8>)
   1afd6:	f002 f841 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1afda:	f04f 0320 	mov.w	r3, #32
   1afde:	f3ef 8511 	mrs	r5, BASEPRI
   1afe2:	f383 8811 	msr	BASEPRI, r3
   1afe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1afea:	4867      	ldr	r0, [pc, #412]	; (1b188 <z_thread_single_abort+0x1f4>)
   1afec:	f000 fdbc 	bl	1bb68 <z_spin_lock_valid>
   1aff0:	b940      	cbnz	r0, 1b004 <z_thread_single_abort+0x70>
   1aff2:	4966      	ldr	r1, [pc, #408]	; (1b18c <z_thread_single_abort+0x1f8>)
   1aff4:	4862      	ldr	r0, [pc, #392]	; (1b180 <z_thread_single_abort+0x1ec>)
   1aff6:	227c      	movs	r2, #124	; 0x7c
   1aff8:	f001 fd8a 	bl	1cb10 <printk>
   1affc:	217c      	movs	r1, #124	; 0x7c
   1affe:	4863      	ldr	r0, [pc, #396]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b000:	f002 f82c 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b004:	4860      	ldr	r0, [pc, #384]	; (1b188 <z_thread_single_abort+0x1f4>)
   1b006:	f000 fdcb 	bl	1bba0 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   1b00a:	7b63      	ldrb	r3, [r4, #13]
   1b00c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1b010:	d012      	beq.n	1b038 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b012:	485d      	ldr	r0, [pc, #372]	; (1b188 <z_thread_single_abort+0x1f4>)
   1b014:	f000 fdb6 	bl	1bb84 <z_spin_unlock_valid>
   1b018:	b940      	cbnz	r0, 1b02c <z_thread_single_abort+0x98>
   1b01a:	495c      	ldr	r1, [pc, #368]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b01c:	4858      	ldr	r0, [pc, #352]	; (1b180 <z_thread_single_abort+0x1ec>)
   1b01e:	22a7      	movs	r2, #167	; 0xa7
   1b020:	f001 fd76 	bl	1cb10 <printk>
   1b024:	21a7      	movs	r1, #167	; 0xa7
   1b026:	4859      	ldr	r0, [pc, #356]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b028:	f002 f818 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b02c:	f385 8811 	msr	BASEPRI, r5
   1b030:	f3bf 8f6f 	isb	sy
}
   1b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1b038:	f043 0320 	orr.w	r3, r3, #32
   1b03c:	4852      	ldr	r0, [pc, #328]	; (1b188 <z_thread_single_abort+0x1f4>)
   1b03e:	7363      	strb	r3, [r4, #13]
   1b040:	f000 fda0 	bl	1bb84 <z_spin_unlock_valid>
   1b044:	b940      	cbnz	r0, 1b058 <z_thread_single_abort+0xc4>
   1b046:	4951      	ldr	r1, [pc, #324]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b048:	484d      	ldr	r0, [pc, #308]	; (1b180 <z_thread_single_abort+0x1ec>)
   1b04a:	22a7      	movs	r2, #167	; 0xa7
   1b04c:	f001 fd60 	bl	1cb10 <printk>
   1b050:	21a7      	movs	r1, #167	; 0xa7
   1b052:	484e      	ldr	r0, [pc, #312]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b054:	f002 f802 	bl	1d05c <assert_post_action>
   1b058:	f385 8811 	msr	BASEPRI, r5
   1b05c:	f3bf 8f6f 	isb	sy
   1b060:	f104 0018 	add.w	r0, r4, #24
   1b064:	f000 ffc4 	bl	1bff0 <z_abort_timeout>
	__asm__ volatile(
   1b068:	f04f 0320 	mov.w	r3, #32
   1b06c:	f3ef 8711 	mrs	r7, BASEPRI
   1b070:	f383 8811 	msr	BASEPRI, r3
   1b074:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b078:	4843      	ldr	r0, [pc, #268]	; (1b188 <z_thread_single_abort+0x1f4>)
   1b07a:	f000 fd75 	bl	1bb68 <z_spin_lock_valid>
   1b07e:	b940      	cbnz	r0, 1b092 <z_thread_single_abort+0xfe>
   1b080:	4942      	ldr	r1, [pc, #264]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b082:	483f      	ldr	r0, [pc, #252]	; (1b180 <z_thread_single_abort+0x1ec>)
   1b084:	227c      	movs	r2, #124	; 0x7c
   1b086:	f001 fd43 	bl	1cb10 <printk>
   1b08a:	217c      	movs	r1, #124	; 0x7c
   1b08c:	483f      	ldr	r0, [pc, #252]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b08e:	f001 ffe5 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b092:	483d      	ldr	r0, [pc, #244]	; (1b188 <z_thread_single_abort+0x1f4>)
   1b094:	f000 fd84 	bl	1bba0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1b098:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b09a:	06d8      	lsls	r0, r3, #27
   1b09c:	d116      	bne.n	1b0cc <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   1b09e:	69a2      	ldr	r2, [r4, #24]
   1b0a0:	b9a2      	cbnz	r2, 1b0cc <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   1b0a2:	0619      	lsls	r1, r3, #24
   1b0a4:	d507      	bpl.n	1b0b6 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   1b0a6:	4621      	mov	r1, r4
   1b0a8:	4839      	ldr	r0, [pc, #228]	; (1b190 <z_thread_single_abort+0x1fc>)
   1b0aa:	f7ff fc69 	bl	1a980 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b0ae:	7b63      	ldrb	r3, [r4, #13]
   1b0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b0b4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1b0b6:	68b0      	ldr	r0, [r6, #8]
   1b0b8:	1b02      	subs	r2, r0, r4
   1b0ba:	4250      	negs	r0, r2
   1b0bc:	4150      	adcs	r0, r2
   1b0be:	f7ff fcc5 	bl	1aa4c <update_cache>
			waiter->base.pended_on = NULL;
   1b0c2:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b0c6:	f104 0930 	add.w	r9, r4, #48	; 0x30
   1b0ca:	e023      	b.n	1b114 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   1b0cc:	079b      	lsls	r3, r3, #30
   1b0ce:	d5f8      	bpl.n	1b0c2 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1b0d0:	4620      	mov	r0, r4
   1b0d2:	f7ff fb4d 	bl	1a770 <pended_on>
   1b0d6:	4621      	mov	r1, r4
   1b0d8:	f7ff fc52 	bl	1a980 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b0dc:	7b63      	ldrb	r3, [r4, #13]
   1b0de:	f023 0302 	bic.w	r3, r3, #2
   1b0e2:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1b0e4:	2300      	movs	r3, #0
   1b0e6:	60a3      	str	r3, [r4, #8]
   1b0e8:	e7eb      	b.n	1b0c2 <z_thread_single_abort+0x12e>
   1b0ea:	f105 0018 	add.w	r0, r5, #24
   1b0ee:	f000 ff7f 	bl	1bff0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1b0f2:	4628      	mov	r0, r5
   1b0f4:	f7ff fb3c 	bl	1a770 <pended_on>
   1b0f8:	4629      	mov	r1, r5
   1b0fa:	f7ff fc41 	bl	1a980 <z_priq_dumb_remove>
   1b0fe:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1b100:	4628      	mov	r0, r5
   1b102:	f023 0302 	bic.w	r3, r3, #2
   1b106:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1b108:	f8c5 8008 	str.w	r8, [r5, #8]
   1b10c:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   1b110:	f7ff fd32 	bl	1ab78 <ready_thread>
	return list->head == list;
   1b114:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b116:	454d      	cmp	r5, r9
   1b118:	d001      	beq.n	1b11e <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1b11a:	2d00      	cmp	r5, #0
   1b11c:	d1e5      	bne.n	1b0ea <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   1b11e:	68b2      	ldr	r2, [r6, #8]
   1b120:	4b1c      	ldr	r3, [pc, #112]	; (1b194 <z_thread_single_abort+0x200>)
   1b122:	429a      	cmp	r2, r3
   1b124:	d102      	bne.n	1b12c <z_thread_single_abort+0x198>
			update_cache(1);
   1b126:	2001      	movs	r0, #1
   1b128:	f7ff fc90 	bl	1aa4c <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b12c:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   1b12e:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1b130:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   1b132:	f043 0308 	orr.w	r3, r3, #8
   1b136:	7363      	strb	r3, [r4, #13]
   1b138:	f104 0338 	add.w	r3, r4, #56	; 0x38
   1b13c:	e8d3 1fef 	ldaex	r1, [r3]
   1b140:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1b144:	2800      	cmp	r0, #0
   1b146:	d1f9      	bne.n	1b13c <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b148:	480f      	ldr	r0, [pc, #60]	; (1b188 <z_thread_single_abort+0x1f4>)
   1b14a:	f000 fd1b 	bl	1bb84 <z_spin_unlock_valid>
   1b14e:	b940      	cbnz	r0, 1b162 <z_thread_single_abort+0x1ce>
   1b150:	490e      	ldr	r1, [pc, #56]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b152:	480b      	ldr	r0, [pc, #44]	; (1b180 <z_thread_single_abort+0x1ec>)
   1b154:	22a7      	movs	r2, #167	; 0xa7
   1b156:	f001 fcdb 	bl	1cb10 <printk>
   1b15a:	21a7      	movs	r1, #167	; 0xa7
   1b15c:	480b      	ldr	r0, [pc, #44]	; (1b18c <z_thread_single_abort+0x1f8>)
   1b15e:	f001 ff7d 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b162:	f387 8811 	msr	BASEPRI, r7
   1b166:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1b16a:	2d00      	cmp	r5, #0
   1b16c:	f43f af62 	beq.w	1b034 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   1b170:	4620      	mov	r0, r4
   1b172:	462b      	mov	r3, r5
}
   1b174:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   1b178:	4718      	bx	r3
   1b17a:	bf00      	nop
   1b17c:	000264ce 	.word	0x000264ce
   1b180:	00022f17 	.word	0x00022f17
   1b184:	20009fc4 	.word	0x20009fc4
   1b188:	20009ffc 	.word	0x20009ffc
   1b18c:	00022f51 	.word	0x00022f51
   1b190:	20009ff0 	.word	0x20009ff0
   1b194:	20009518 	.word	0x20009518

0001b198 <unready_thread>:
{
   1b198:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1b19a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1b19e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	da07      	bge.n	1b1b4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b1a4:	4601      	mov	r1, r0
   1b1a6:	4808      	ldr	r0, [pc, #32]	; (1b1c8 <unready_thread+0x30>)
   1b1a8:	f7ff fbea 	bl	1a980 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b1ac:	7b63      	ldrb	r3, [r4, #13]
   1b1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b1b2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   1b1b4:	4b05      	ldr	r3, [pc, #20]	; (1b1cc <unready_thread+0x34>)
   1b1b6:	6898      	ldr	r0, [r3, #8]
   1b1b8:	1b03      	subs	r3, r0, r4
   1b1ba:	4258      	negs	r0, r3
   1b1bc:	4158      	adcs	r0, r3
}
   1b1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1b1c2:	f7ff bc43 	b.w	1aa4c <update_cache>
   1b1c6:	bf00      	nop
   1b1c8:	20009ff0 	.word	0x20009ff0
   1b1cc:	20009fc4 	.word	0x20009fc4

0001b1d0 <add_to_waitq_locked>:
{
   1b1d0:	b538      	push	{r3, r4, r5, lr}
   1b1d2:	4604      	mov	r4, r0
   1b1d4:	460d      	mov	r5, r1
	unready_thread(thread);
   1b1d6:	f7ff ffdf 	bl	1b198 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b1da:	7b63      	ldrb	r3, [r4, #13]
   1b1dc:	f043 0302 	orr.w	r3, r3, #2
   1b1e0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b1e2:	b1ed      	cbz	r5, 1b220 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b1e4:	4b15      	ldr	r3, [pc, #84]	; (1b23c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1b1e6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b1e8:	429c      	cmp	r4, r3
   1b1ea:	d10a      	bne.n	1b202 <add_to_waitq_locked+0x32>
   1b1ec:	4914      	ldr	r1, [pc, #80]	; (1b240 <add_to_waitq_locked+0x70>)
   1b1ee:	4815      	ldr	r0, [pc, #84]	; (1b244 <add_to_waitq_locked+0x74>)
   1b1f0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b1f4:	f001 fc8c 	bl	1cb10 <printk>
   1b1f8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b1fc:	4810      	ldr	r0, [pc, #64]	; (1b240 <add_to_waitq_locked+0x70>)
   1b1fe:	f001 ff2d 	bl	1d05c <assert_post_action>
	return list->head == list;
   1b202:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b204:	429d      	cmp	r5, r3
   1b206:	d012      	beq.n	1b22e <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b208:	b18b      	cbz	r3, 1b22e <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b20a:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1b20e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b212:	4291      	cmp	r1, r2
   1b214:	dd05      	ble.n	1b222 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   1b216:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b218:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b21c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b21e:	605c      	str	r4, [r3, #4]
}
   1b220:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1b222:	6869      	ldr	r1, [r5, #4]
   1b224:	428b      	cmp	r3, r1
   1b226:	d002      	beq.n	1b22e <add_to_waitq_locked+0x5e>
   1b228:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	d1ef      	bne.n	1b20e <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   1b22e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b230:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b232:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b234:	686b      	ldr	r3, [r5, #4]
   1b236:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b238:	606c      	str	r4, [r5, #4]
}
   1b23a:	e7f1      	b.n	1b220 <add_to_waitq_locked+0x50>
   1b23c:	20009518 	.word	0x20009518
   1b240:	000264ce 	.word	0x000264ce
   1b244:	00022f17 	.word	0x00022f17

0001b248 <pend>:
{
   1b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b24c:	4604      	mov	r4, r0
   1b24e:	4688      	mov	r8, r1
   1b250:	4616      	mov	r6, r2
   1b252:	461d      	mov	r5, r3
	__asm__ volatile(
   1b254:	f04f 0320 	mov.w	r3, #32
   1b258:	f3ef 8711 	mrs	r7, BASEPRI
   1b25c:	f383 8811 	msr	BASEPRI, r3
   1b260:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b264:	481a      	ldr	r0, [pc, #104]	; (1b2d0 <pend+0x88>)
   1b266:	f000 fc7f 	bl	1bb68 <z_spin_lock_valid>
   1b26a:	b940      	cbnz	r0, 1b27e <pend+0x36>
   1b26c:	4919      	ldr	r1, [pc, #100]	; (1b2d4 <pend+0x8c>)
   1b26e:	481a      	ldr	r0, [pc, #104]	; (1b2d8 <pend+0x90>)
   1b270:	227c      	movs	r2, #124	; 0x7c
   1b272:	f001 fc4d 	bl	1cb10 <printk>
   1b276:	217c      	movs	r1, #124	; 0x7c
   1b278:	4816      	ldr	r0, [pc, #88]	; (1b2d4 <pend+0x8c>)
   1b27a:	f001 feef 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b27e:	4814      	ldr	r0, [pc, #80]	; (1b2d0 <pend+0x88>)
   1b280:	f000 fc8e 	bl	1bba0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1b284:	4620      	mov	r0, r4
   1b286:	4641      	mov	r1, r8
   1b288:	f7ff ffa2 	bl	1b1d0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b28c:	4810      	ldr	r0, [pc, #64]	; (1b2d0 <pend+0x88>)
   1b28e:	f000 fc79 	bl	1bb84 <z_spin_unlock_valid>
   1b292:	b940      	cbnz	r0, 1b2a6 <pend+0x5e>
   1b294:	490f      	ldr	r1, [pc, #60]	; (1b2d4 <pend+0x8c>)
   1b296:	4810      	ldr	r0, [pc, #64]	; (1b2d8 <pend+0x90>)
   1b298:	22a7      	movs	r2, #167	; 0xa7
   1b29a:	f001 fc39 	bl	1cb10 <printk>
   1b29e:	21a7      	movs	r1, #167	; 0xa7
   1b2a0:	480c      	ldr	r0, [pc, #48]	; (1b2d4 <pend+0x8c>)
   1b2a2:	f001 fedb 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b2a6:	f387 8811 	msr	BASEPRI, r7
   1b2aa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b2ae:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b2b2:	bf08      	it	eq
   1b2b4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b2b8:	d008      	beq.n	1b2cc <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b2ba:	4632      	mov	r2, r6
   1b2bc:	462b      	mov	r3, r5
   1b2be:	f104 0018 	add.w	r0, r4, #24
   1b2c2:	4906      	ldr	r1, [pc, #24]	; (1b2dc <pend+0x94>)
}
   1b2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b2c8:	f000 bde2 	b.w	1be90 <z_add_timeout>
   1b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b2d0:	20009ffc 	.word	0x20009ffc
   1b2d4:	00022f51 	.word	0x00022f51
   1b2d8:	00022f17 	.word	0x00022f17
   1b2dc:	0001acfd 	.word	0x0001acfd

0001b2e0 <z_pend_curr>:
{
   1b2e0:	b538      	push	{r3, r4, r5, lr}
   1b2e2:	4605      	mov	r5, r0
	pending_current = _current;
   1b2e4:	4b0d      	ldr	r3, [pc, #52]	; (1b31c <z_pend_curr+0x3c>)
{
   1b2e6:	460c      	mov	r4, r1
	pending_current = _current;
   1b2e8:	6898      	ldr	r0, [r3, #8]
   1b2ea:	4b0d      	ldr	r3, [pc, #52]	; (1b320 <z_pend_curr+0x40>)
{
   1b2ec:	4611      	mov	r1, r2
	pending_current = _current;
   1b2ee:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b2f4:	f7ff ffa8 	bl	1b248 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b2f8:	4628      	mov	r0, r5
   1b2fa:	f000 fc43 	bl	1bb84 <z_spin_unlock_valid>
   1b2fe:	b940      	cbnz	r0, 1b312 <z_pend_curr+0x32>
   1b300:	4908      	ldr	r1, [pc, #32]	; (1b324 <z_pend_curr+0x44>)
   1b302:	4809      	ldr	r0, [pc, #36]	; (1b328 <z_pend_curr+0x48>)
   1b304:	22be      	movs	r2, #190	; 0xbe
   1b306:	f001 fc03 	bl	1cb10 <printk>
   1b30a:	21be      	movs	r1, #190	; 0xbe
   1b30c:	4805      	ldr	r0, [pc, #20]	; (1b324 <z_pend_curr+0x44>)
   1b30e:	f001 fea5 	bl	1d05c <assert_post_action>
   1b312:	4620      	mov	r0, r4
}
   1b314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b318:	f7f2 bae8 	b.w	d8ec <arch_swap>
   1b31c:	20009fc4 	.word	0x20009fc4
   1b320:	20009ff8 	.word	0x20009ff8
   1b324:	00022f51 	.word	0x00022f51
   1b328:	00022f17 	.word	0x00022f17

0001b32c <z_set_prio>:
{
   1b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b32e:	4604      	mov	r4, r0
   1b330:	460d      	mov	r5, r1
	__asm__ volatile(
   1b332:	f04f 0320 	mov.w	r3, #32
   1b336:	f3ef 8611 	mrs	r6, BASEPRI
   1b33a:	f383 8811 	msr	BASEPRI, r3
   1b33e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b342:	4831      	ldr	r0, [pc, #196]	; (1b408 <z_set_prio+0xdc>)
   1b344:	f000 fc10 	bl	1bb68 <z_spin_lock_valid>
   1b348:	b940      	cbnz	r0, 1b35c <z_set_prio+0x30>
   1b34a:	4930      	ldr	r1, [pc, #192]	; (1b40c <z_set_prio+0xe0>)
   1b34c:	4830      	ldr	r0, [pc, #192]	; (1b410 <z_set_prio+0xe4>)
   1b34e:	227c      	movs	r2, #124	; 0x7c
   1b350:	f001 fbde 	bl	1cb10 <printk>
   1b354:	217c      	movs	r1, #124	; 0x7c
   1b356:	482d      	ldr	r0, [pc, #180]	; (1b40c <z_set_prio+0xe0>)
   1b358:	f001 fe80 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b35c:	482a      	ldr	r0, [pc, #168]	; (1b408 <z_set_prio+0xdc>)
   1b35e:	f000 fc1f 	bl	1bba0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b362:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1b364:	b26d      	sxtb	r5, r5
   1b366:	06db      	lsls	r3, r3, #27
   1b368:	d14a      	bne.n	1b400 <z_set_prio+0xd4>
		if (need_sched) {
   1b36a:	69a3      	ldr	r3, [r4, #24]
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d147      	bne.n	1b400 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b370:	4621      	mov	r1, r4
   1b372:	4828      	ldr	r0, [pc, #160]	; (1b414 <z_set_prio+0xe8>)
   1b374:	f7ff fb04 	bl	1a980 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b378:	4b27      	ldr	r3, [pc, #156]	; (1b418 <z_set_prio+0xec>)
				thread->base.prio = prio;
   1b37a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b37c:	429c      	cmp	r4, r3
   1b37e:	d10a      	bne.n	1b396 <z_set_prio+0x6a>
   1b380:	4926      	ldr	r1, [pc, #152]	; (1b41c <z_set_prio+0xf0>)
   1b382:	4823      	ldr	r0, [pc, #140]	; (1b410 <z_set_prio+0xe4>)
   1b384:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b388:	f001 fbc2 	bl	1cb10 <printk>
   1b38c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b390:	4822      	ldr	r0, [pc, #136]	; (1b41c <z_set_prio+0xf0>)
   1b392:	f001 fe63 	bl	1d05c <assert_post_action>
	return list->head == list;
   1b396:	4a22      	ldr	r2, [pc, #136]	; (1b420 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b398:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1b39c:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3a0:	4283      	cmp	r3, r0
   1b3a2:	d027      	beq.n	1b3f4 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b3a4:	b333      	cbz	r3, 1b3f4 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b3a6:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1b3aa:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b3ae:	42af      	cmp	r7, r5
   1b3b0:	dd1b      	ble.n	1b3ea <z_set_prio+0xbe>
	node->prev = successor->prev;
   1b3b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b3b4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b3b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b3ba:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b3bc:	2001      	movs	r0, #1
   1b3be:	f7ff fb45 	bl	1aa4c <update_cache>
   1b3c2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b3c4:	4810      	ldr	r0, [pc, #64]	; (1b408 <z_set_prio+0xdc>)
   1b3c6:	f000 fbdd 	bl	1bb84 <z_spin_unlock_valid>
   1b3ca:	b940      	cbnz	r0, 1b3de <z_set_prio+0xb2>
   1b3cc:	490f      	ldr	r1, [pc, #60]	; (1b40c <z_set_prio+0xe0>)
   1b3ce:	4810      	ldr	r0, [pc, #64]	; (1b410 <z_set_prio+0xe4>)
   1b3d0:	22a7      	movs	r2, #167	; 0xa7
   1b3d2:	f001 fb9d 	bl	1cb10 <printk>
   1b3d6:	21a7      	movs	r1, #167	; 0xa7
   1b3d8:	480c      	ldr	r0, [pc, #48]	; (1b40c <z_set_prio+0xe0>)
   1b3da:	f001 fe3f 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b3de:	f386 8811 	msr	BASEPRI, r6
   1b3e2:	f3bf 8f6f 	isb	sy
}
   1b3e6:	4620      	mov	r0, r4
   1b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b3ea:	4299      	cmp	r1, r3
   1b3ec:	d002      	beq.n	1b3f4 <z_set_prio+0xc8>
   1b3ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b3f0:	2b00      	cmp	r3, #0
   1b3f2:	d1da      	bne.n	1b3aa <z_set_prio+0x7e>
	node->prev = list->tail;
   1b3f4:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1b3f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1b3fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b3fc:	6314      	str	r4, [r2, #48]	; 0x30
}
   1b3fe:	e7dd      	b.n	1b3bc <z_set_prio+0x90>
			thread->base.prio = prio;
   1b400:	73a5      	strb	r5, [r4, #14]
   1b402:	2400      	movs	r4, #0
   1b404:	e7de      	b.n	1b3c4 <z_set_prio+0x98>
   1b406:	bf00      	nop
   1b408:	20009ffc 	.word	0x20009ffc
   1b40c:	00022f51 	.word	0x00022f51
   1b410:	00022f17 	.word	0x00022f17
   1b414:	20009ff0 	.word	0x20009ff0
   1b418:	20009518 	.word	0x20009518
   1b41c:	000264ce 	.word	0x000264ce
   1b420:	20009fc4 	.word	0x20009fc4

0001b424 <z_unpend_first_thread>:
{
   1b424:	b538      	push	{r3, r4, r5, lr}
   1b426:	4604      	mov	r4, r0
	__asm__ volatile(
   1b428:	f04f 0320 	mov.w	r3, #32
   1b42c:	f3ef 8511 	mrs	r5, BASEPRI
   1b430:	f383 8811 	msr	BASEPRI, r3
   1b434:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b438:	482b      	ldr	r0, [pc, #172]	; (1b4e8 <z_unpend_first_thread+0xc4>)
   1b43a:	f000 fb95 	bl	1bb68 <z_spin_lock_valid>
   1b43e:	b940      	cbnz	r0, 1b452 <z_unpend_first_thread+0x2e>
   1b440:	492a      	ldr	r1, [pc, #168]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b442:	482b      	ldr	r0, [pc, #172]	; (1b4f0 <z_unpend_first_thread+0xcc>)
   1b444:	227c      	movs	r2, #124	; 0x7c
   1b446:	f001 fb63 	bl	1cb10 <printk>
   1b44a:	217c      	movs	r1, #124	; 0x7c
   1b44c:	4827      	ldr	r0, [pc, #156]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b44e:	f001 fe05 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b452:	4825      	ldr	r0, [pc, #148]	; (1b4e8 <z_unpend_first_thread+0xc4>)
   1b454:	f000 fba4 	bl	1bba0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1b458:	4620      	mov	r0, r4
   1b45a:	f006 f8ab 	bl	215b4 <z_priq_dumb_best>
   1b45e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b460:	4821      	ldr	r0, [pc, #132]	; (1b4e8 <z_unpend_first_thread+0xc4>)
   1b462:	f000 fb8f 	bl	1bb84 <z_spin_unlock_valid>
   1b466:	b940      	cbnz	r0, 1b47a <z_unpend_first_thread+0x56>
   1b468:	4920      	ldr	r1, [pc, #128]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b46a:	4821      	ldr	r0, [pc, #132]	; (1b4f0 <z_unpend_first_thread+0xcc>)
   1b46c:	22a7      	movs	r2, #167	; 0xa7
   1b46e:	f001 fb4f 	bl	1cb10 <printk>
   1b472:	21a7      	movs	r1, #167	; 0xa7
   1b474:	481d      	ldr	r0, [pc, #116]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b476:	f001 fdf1 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b47a:	f385 8811 	msr	BASEPRI, r5
   1b47e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1b482:	b37c      	cbz	r4, 1b4e4 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   1b484:	f04f 0320 	mov.w	r3, #32
   1b488:	f3ef 8511 	mrs	r5, BASEPRI
   1b48c:	f383 8811 	msr	BASEPRI, r3
   1b490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b494:	4814      	ldr	r0, [pc, #80]	; (1b4e8 <z_unpend_first_thread+0xc4>)
   1b496:	f000 fb67 	bl	1bb68 <z_spin_lock_valid>
   1b49a:	b940      	cbnz	r0, 1b4ae <z_unpend_first_thread+0x8a>
   1b49c:	4913      	ldr	r1, [pc, #76]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b49e:	4814      	ldr	r0, [pc, #80]	; (1b4f0 <z_unpend_first_thread+0xcc>)
   1b4a0:	227c      	movs	r2, #124	; 0x7c
   1b4a2:	f001 fb35 	bl	1cb10 <printk>
   1b4a6:	217c      	movs	r1, #124	; 0x7c
   1b4a8:	4810      	ldr	r0, [pc, #64]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b4aa:	f001 fdd7 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b4ae:	480e      	ldr	r0, [pc, #56]	; (1b4e8 <z_unpend_first_thread+0xc4>)
   1b4b0:	f000 fb76 	bl	1bba0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1b4b4:	4620      	mov	r0, r4
   1b4b6:	f006 f86f 	bl	21598 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b4ba:	480b      	ldr	r0, [pc, #44]	; (1b4e8 <z_unpend_first_thread+0xc4>)
   1b4bc:	f000 fb62 	bl	1bb84 <z_spin_unlock_valid>
   1b4c0:	b940      	cbnz	r0, 1b4d4 <z_unpend_first_thread+0xb0>
   1b4c2:	490a      	ldr	r1, [pc, #40]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b4c4:	480a      	ldr	r0, [pc, #40]	; (1b4f0 <z_unpend_first_thread+0xcc>)
   1b4c6:	22a7      	movs	r2, #167	; 0xa7
   1b4c8:	f001 fb22 	bl	1cb10 <printk>
   1b4cc:	21a7      	movs	r1, #167	; 0xa7
   1b4ce:	4807      	ldr	r0, [pc, #28]	; (1b4ec <z_unpend_first_thread+0xc8>)
   1b4d0:	f001 fdc4 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b4d4:	f385 8811 	msr	BASEPRI, r5
   1b4d8:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1b4dc:	f104 0018 	add.w	r0, r4, #24
   1b4e0:	f000 fd86 	bl	1bff0 <z_abort_timeout>
}
   1b4e4:	4620      	mov	r0, r4
   1b4e6:	bd38      	pop	{r3, r4, r5, pc}
   1b4e8:	20009ffc 	.word	0x20009ffc
   1b4ec:	00022f51 	.word	0x00022f51
   1b4f0:	00022f17 	.word	0x00022f17

0001b4f4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b4f4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b4f6:	4b04      	ldr	r3, [pc, #16]	; (1b508 <z_sched_init+0x14>)
   1b4f8:	4608      	mov	r0, r1
   1b4fa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1b4fe:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1b502:	f7ff b961 	b.w	1a7c8 <k_sched_time_slice_set>
   1b506:	bf00      	nop
   1b508:	20009fc4 	.word	0x20009fc4

0001b50c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b50e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b512:	b153      	cbz	r3, 1b52a <z_impl_k_yield+0x1e>
   1b514:	493d      	ldr	r1, [pc, #244]	; (1b60c <z_impl_k_yield+0x100>)
   1b516:	483e      	ldr	r0, [pc, #248]	; (1b610 <z_impl_k_yield+0x104>)
   1b518:	f240 42cf 	movw	r2, #1231	; 0x4cf
   1b51c:	f001 faf8 	bl	1cb10 <printk>
   1b520:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1b524:	4839      	ldr	r0, [pc, #228]	; (1b60c <z_impl_k_yield+0x100>)
   1b526:	f001 fd99 	bl	1d05c <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1b52a:	4d3a      	ldr	r5, [pc, #232]	; (1b614 <z_impl_k_yield+0x108>)
   1b52c:	4f3a      	ldr	r7, [pc, #232]	; (1b618 <z_impl_k_yield+0x10c>)
   1b52e:	68ab      	ldr	r3, [r5, #8]
   1b530:	42bb      	cmp	r3, r7
   1b532:	d054      	beq.n	1b5de <z_impl_k_yield+0xd2>
	__asm__ volatile(
   1b534:	f04f 0320 	mov.w	r3, #32
   1b538:	f3ef 8611 	mrs	r6, BASEPRI
   1b53c:	f383 8811 	msr	BASEPRI, r3
   1b540:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b544:	4835      	ldr	r0, [pc, #212]	; (1b61c <z_impl_k_yield+0x110>)
   1b546:	f000 fb0f 	bl	1bb68 <z_spin_lock_valid>
   1b54a:	b940      	cbnz	r0, 1b55e <z_impl_k_yield+0x52>
   1b54c:	4934      	ldr	r1, [pc, #208]	; (1b620 <z_impl_k_yield+0x114>)
   1b54e:	4830      	ldr	r0, [pc, #192]	; (1b610 <z_impl_k_yield+0x104>)
   1b550:	227c      	movs	r2, #124	; 0x7c
   1b552:	f001 fadd 	bl	1cb10 <printk>
   1b556:	217c      	movs	r1, #124	; 0x7c
   1b558:	4831      	ldr	r0, [pc, #196]	; (1b620 <z_impl_k_yield+0x114>)
   1b55a:	f001 fd7f 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b55e:	482f      	ldr	r0, [pc, #188]	; (1b61c <z_impl_k_yield+0x110>)
   1b560:	f000 fb1e 	bl	1bba0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1b564:	68a9      	ldr	r1, [r5, #8]
   1b566:	482f      	ldr	r0, [pc, #188]	; (1b624 <z_impl_k_yield+0x118>)
   1b568:	f7ff fa0a 	bl	1a980 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b56c:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b56e:	42bc      	cmp	r4, r7
   1b570:	d10a      	bne.n	1b588 <z_impl_k_yield+0x7c>
   1b572:	4926      	ldr	r1, [pc, #152]	; (1b60c <z_impl_k_yield+0x100>)
   1b574:	4826      	ldr	r0, [pc, #152]	; (1b610 <z_impl_k_yield+0x104>)
   1b576:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b57a:	f001 fac9 	bl	1cb10 <printk>
   1b57e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b582:	4822      	ldr	r0, [pc, #136]	; (1b60c <z_impl_k_yield+0x100>)
   1b584:	f001 fd6a 	bl	1d05c <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   1b588:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b58c:	4925      	ldr	r1, [pc, #148]	; (1b624 <z_impl_k_yield+0x118>)
   1b58e:	428b      	cmp	r3, r1
   1b590:	d036      	beq.n	1b600 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b592:	2b00      	cmp	r3, #0
   1b594:	d034      	beq.n	1b600 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b596:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1b59a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b59e:	4287      	cmp	r7, r0
   1b5a0:	dd29      	ble.n	1b5f6 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   1b5a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b5a4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b5a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b5aa:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   1b5ac:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   1b5ae:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   1b5b0:	7b53      	ldrb	r3, [r2, #13]
   1b5b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b5b6:	7353      	strb	r3, [r2, #13]
   1b5b8:	f7ff fa48 	bl	1aa4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b5bc:	4817      	ldr	r0, [pc, #92]	; (1b61c <z_impl_k_yield+0x110>)
   1b5be:	f000 fae1 	bl	1bb84 <z_spin_unlock_valid>
   1b5c2:	b940      	cbnz	r0, 1b5d6 <z_impl_k_yield+0xca>
   1b5c4:	4916      	ldr	r1, [pc, #88]	; (1b620 <z_impl_k_yield+0x114>)
   1b5c6:	4812      	ldr	r0, [pc, #72]	; (1b610 <z_impl_k_yield+0x104>)
   1b5c8:	22a7      	movs	r2, #167	; 0xa7
   1b5ca:	f001 faa1 	bl	1cb10 <printk>
   1b5ce:	21a7      	movs	r1, #167	; 0xa7
   1b5d0:	4813      	ldr	r0, [pc, #76]	; (1b620 <z_impl_k_yield+0x114>)
   1b5d2:	f001 fd43 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b5d6:	f386 8811 	msr	BASEPRI, r6
   1b5da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b5de:	f04f 0320 	mov.w	r3, #32
   1b5e2:	f3ef 8011 	mrs	r0, BASEPRI
   1b5e6:	f383 8811 	msr	BASEPRI, r3
   1b5ea:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1b5ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b5f2:	f7f2 b97b 	b.w	d8ec <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b5f6:	4293      	cmp	r3, r2
   1b5f8:	d002      	beq.n	1b600 <z_impl_k_yield+0xf4>
   1b5fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b5fc:	2b00      	cmp	r3, #0
   1b5fe:	d1cc      	bne.n	1b59a <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   1b600:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   1b604:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1b606:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b608:	632c      	str	r4, [r5, #48]	; 0x30
}
   1b60a:	e7cf      	b.n	1b5ac <z_impl_k_yield+0xa0>
   1b60c:	000264ce 	.word	0x000264ce
   1b610:	00022f17 	.word	0x00022f17
   1b614:	20009fc4 	.word	0x20009fc4
   1b618:	20009518 	.word	0x20009518
   1b61c:	20009ffc 	.word	0x20009ffc
   1b620:	00022f51 	.word	0x00022f51
   1b624:	20009ff0 	.word	0x20009ff0

0001b628 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b62c:	4605      	mov	r5, r0
   1b62e:	460f      	mov	r7, r1
   1b630:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b634:	b153      	cbz	r3, 1b64c <z_tick_sleep+0x24>
   1b636:	4934      	ldr	r1, [pc, #208]	; (1b708 <z_tick_sleep+0xe0>)
   1b638:	4834      	ldr	r0, [pc, #208]	; (1b70c <z_tick_sleep+0xe4>)
   1b63a:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1b63e:	f001 fa67 	bl	1cb10 <printk>
   1b642:	f240 41ed 	movw	r1, #1261	; 0x4ed
   1b646:	4830      	ldr	r0, [pc, #192]	; (1b708 <z_tick_sleep+0xe0>)
   1b648:	f001 fd08 	bl	1d05c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b64c:	ea55 0307 	orrs.w	r3, r5, r7
   1b650:	d104      	bne.n	1b65c <z_tick_sleep+0x34>
	z_impl_k_yield();
   1b652:	f7ff ff5b 	bl	1b50c <z_impl_k_yield>
		k_yield();
		return 0;
   1b656:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1b65c:	f006 f838 	bl	216d0 <z_tick_get_32>
   1b660:	1944      	adds	r4, r0, r5
   1b662:	f04f 0320 	mov.w	r3, #32
   1b666:	f3ef 8811 	mrs	r8, BASEPRI
   1b66a:	f383 8811 	msr	BASEPRI, r3
   1b66e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b672:	4827      	ldr	r0, [pc, #156]	; (1b710 <z_tick_sleep+0xe8>)
   1b674:	f000 fa78 	bl	1bb68 <z_spin_lock_valid>
   1b678:	b940      	cbnz	r0, 1b68c <z_tick_sleep+0x64>
   1b67a:	4926      	ldr	r1, [pc, #152]	; (1b714 <z_tick_sleep+0xec>)
   1b67c:	4823      	ldr	r0, [pc, #140]	; (1b70c <z_tick_sleep+0xe4>)
   1b67e:	227c      	movs	r2, #124	; 0x7c
   1b680:	f001 fa46 	bl	1cb10 <printk>
   1b684:	217c      	movs	r1, #124	; 0x7c
   1b686:	4823      	ldr	r0, [pc, #140]	; (1b714 <z_tick_sleep+0xec>)
   1b688:	f001 fce8 	bl	1d05c <assert_post_action>
	pending_current = _current;
   1b68c:	4e22      	ldr	r6, [pc, #136]	; (1b718 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   1b68e:	4820      	ldr	r0, [pc, #128]	; (1b710 <z_tick_sleep+0xe8>)
   1b690:	f000 fa86 	bl	1bba0 <z_spin_lock_set_owner>
   1b694:	68b0      	ldr	r0, [r6, #8]
   1b696:	4b21      	ldr	r3, [pc, #132]	; (1b71c <z_tick_sleep+0xf4>)
   1b698:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b69a:	f7ff fd7d 	bl	1b198 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b69e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b6a0:	462a      	mov	r2, r5
   1b6a2:	463b      	mov	r3, r7
   1b6a4:	3018      	adds	r0, #24
   1b6a6:	491e      	ldr	r1, [pc, #120]	; (1b720 <z_tick_sleep+0xf8>)
   1b6a8:	f000 fbf2 	bl	1be90 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b6ac:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b6ae:	4818      	ldr	r0, [pc, #96]	; (1b710 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b6b0:	7b53      	ldrb	r3, [r2, #13]
   1b6b2:	f043 0310 	orr.w	r3, r3, #16
   1b6b6:	7353      	strb	r3, [r2, #13]
   1b6b8:	f000 fa64 	bl	1bb84 <z_spin_unlock_valid>
   1b6bc:	b940      	cbnz	r0, 1b6d0 <z_tick_sleep+0xa8>
   1b6be:	4915      	ldr	r1, [pc, #84]	; (1b714 <z_tick_sleep+0xec>)
   1b6c0:	4812      	ldr	r0, [pc, #72]	; (1b70c <z_tick_sleep+0xe4>)
   1b6c2:	22be      	movs	r2, #190	; 0xbe
   1b6c4:	f001 fa24 	bl	1cb10 <printk>
   1b6c8:	21be      	movs	r1, #190	; 0xbe
   1b6ca:	4812      	ldr	r0, [pc, #72]	; (1b714 <z_tick_sleep+0xec>)
   1b6cc:	f001 fcc6 	bl	1d05c <assert_post_action>
   1b6d0:	4640      	mov	r0, r8
   1b6d2:	f7f2 f90b 	bl	d8ec <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1b6d6:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b6d8:	7b5b      	ldrb	r3, [r3, #13]
   1b6da:	06db      	lsls	r3, r3, #27
   1b6dc:	d50a      	bpl.n	1b6f4 <z_tick_sleep+0xcc>
   1b6de:	490a      	ldr	r1, [pc, #40]	; (1b708 <z_tick_sleep+0xe0>)
   1b6e0:	480a      	ldr	r0, [pc, #40]	; (1b70c <z_tick_sleep+0xe4>)
   1b6e2:	f240 520b 	movw	r2, #1291	; 0x50b
   1b6e6:	f001 fa13 	bl	1cb10 <printk>
   1b6ea:	f240 510b 	movw	r1, #1291	; 0x50b
   1b6ee:	4806      	ldr	r0, [pc, #24]	; (1b708 <z_tick_sleep+0xe0>)
   1b6f0:	f001 fcb4 	bl	1d05c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1b6f4:	f005 ffec 	bl	216d0 <z_tick_get_32>
   1b6f8:	1a20      	subs	r0, r4, r0
   1b6fa:	eb63 0303 	sbc.w	r3, r3, r3
   1b6fe:	2b00      	cmp	r3, #0
   1b700:	bfb8      	it	lt
   1b702:	2000      	movlt	r0, #0
   1b704:	e7a8      	b.n	1b658 <z_tick_sleep+0x30>
   1b706:	bf00      	nop
   1b708:	000264ce 	.word	0x000264ce
   1b70c:	00022f17 	.word	0x00022f17
   1b710:	20009ffc 	.word	0x20009ffc
   1b714:	00022f51 	.word	0x00022f51
   1b718:	20009fc4 	.word	0x20009fc4
   1b71c:	20009ff8 	.word	0x20009ff8
   1b720:	0001acfd 	.word	0x0001acfd

0001b724 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b724:	b538      	push	{r3, r4, r5, lr}
   1b726:	4605      	mov	r5, r0
   1b728:	460c      	mov	r4, r1
   1b72a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b72e:	b153      	cbz	r3, 1b746 <z_impl_k_sleep+0x22>
   1b730:	4911      	ldr	r1, [pc, #68]	; (1b778 <z_impl_k_sleep+0x54>)
   1b732:	4812      	ldr	r0, [pc, #72]	; (1b77c <z_impl_k_sleep+0x58>)
   1b734:	f240 521a 	movw	r2, #1306	; 0x51a
   1b738:	f001 f9ea 	bl	1cb10 <printk>
   1b73c:	f240 511a 	movw	r1, #1306	; 0x51a
   1b740:	480d      	ldr	r0, [pc, #52]	; (1b778 <z_impl_k_sleep+0x54>)
   1b742:	f001 fc8b 	bl	1d05c <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b746:	f1b4 3fff 	cmp.w	r4, #4294967295
   1b74a:	bf08      	it	eq
   1b74c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b750:	d106      	bne.n	1b760 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1b752:	4b0b      	ldr	r3, [pc, #44]	; (1b780 <z_impl_k_sleep+0x5c>)
   1b754:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b756:	f7ff fbc5 	bl	1aee4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1b75a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1b75e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1b760:	4628      	mov	r0, r5
   1b762:	4621      	mov	r1, r4
   1b764:	f7ff ff60 	bl	1b628 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b76c:	fb80 0303 	smull	r0, r3, r0, r3
   1b770:	0bc0      	lsrs	r0, r0, #15
   1b772:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b776:	e7f2      	b.n	1b75e <z_impl_k_sleep+0x3a>
   1b778:	000264ce 	.word	0x000264ce
   1b77c:	00022f17 	.word	0x00022f17
   1b780:	20009fc4 	.word	0x20009fc4

0001b784 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b784:	4b01      	ldr	r3, [pc, #4]	; (1b78c <z_impl_k_current_get+0x8>)
   1b786:	6898      	ldr	r0, [r3, #8]
   1b788:	4770      	bx	lr
   1b78a:	bf00      	nop
   1b78c:	20009fc4 	.word	0x20009fc4

0001b790 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b790:	b538      	push	{r3, r4, r5, lr}
   1b792:	4604      	mov	r4, r0
   1b794:	f04f 0320 	mov.w	r3, #32
   1b798:	f3ef 8511 	mrs	r5, BASEPRI
   1b79c:	f383 8811 	msr	BASEPRI, r3
   1b7a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b7a4:	4815      	ldr	r0, [pc, #84]	; (1b7fc <z_impl_k_sem_give+0x6c>)
   1b7a6:	f000 f9df 	bl	1bb68 <z_spin_lock_valid>
   1b7aa:	b940      	cbnz	r0, 1b7be <z_impl_k_sem_give+0x2e>
   1b7ac:	4914      	ldr	r1, [pc, #80]	; (1b800 <z_impl_k_sem_give+0x70>)
   1b7ae:	4815      	ldr	r0, [pc, #84]	; (1b804 <z_impl_k_sem_give+0x74>)
   1b7b0:	227c      	movs	r2, #124	; 0x7c
   1b7b2:	f001 f9ad 	bl	1cb10 <printk>
   1b7b6:	217c      	movs	r1, #124	; 0x7c
   1b7b8:	4811      	ldr	r0, [pc, #68]	; (1b800 <z_impl_k_sem_give+0x70>)
   1b7ba:	f001 fc4f 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b7be:	480f      	ldr	r0, [pc, #60]	; (1b7fc <z_impl_k_sem_give+0x6c>)
   1b7c0:	f000 f9ee 	bl	1bba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1b7c4:	4620      	mov	r0, r4
   1b7c6:	f7ff fe2d 	bl	1b424 <z_unpend_first_thread>

	if (thread != NULL) {
   1b7ca:	b150      	cbz	r0, 1b7e2 <z_impl_k_sem_give+0x52>
   1b7cc:	2200      	movs	r2, #0
   1b7ce:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b7d2:	f7ff fa1b 	bl	1ac0c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b7d6:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1b7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b7dc:	4807      	ldr	r0, [pc, #28]	; (1b7fc <z_impl_k_sem_give+0x6c>)
   1b7de:	f7ff b841 	b.w	1a864 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b7e2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b7e6:	429a      	cmp	r2, r3
   1b7e8:	bf18      	it	ne
   1b7ea:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b7ec:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b7ee:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b7f0:	f104 0010 	add.w	r0, r4, #16
   1b7f4:	f005 ffe3 	bl	217be <z_handle_obj_poll_events>
}
   1b7f8:	e7ed      	b.n	1b7d6 <z_impl_k_sem_give+0x46>
   1b7fa:	bf00      	nop
   1b7fc:	2000a008 	.word	0x2000a008
   1b800:	00022f51 	.word	0x00022f51
   1b804:	00022f17 	.word	0x00022f17

0001b808 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b80a:	4604      	mov	r4, r0
   1b80c:	4616      	mov	r6, r2
   1b80e:	461d      	mov	r5, r3
   1b810:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1b814:	b15b      	cbz	r3, 1b82e <z_impl_k_sem_take+0x26>
   1b816:	ea52 0305 	orrs.w	r3, r2, r5
   1b81a:	d008      	beq.n	1b82e <z_impl_k_sem_take+0x26>
   1b81c:	492b      	ldr	r1, [pc, #172]	; (1b8cc <z_impl_k_sem_take+0xc4>)
   1b81e:	482c      	ldr	r0, [pc, #176]	; (1b8d0 <z_impl_k_sem_take+0xc8>)
   1b820:	228c      	movs	r2, #140	; 0x8c
   1b822:	f001 f975 	bl	1cb10 <printk>
   1b826:	218c      	movs	r1, #140	; 0x8c
   1b828:	4828      	ldr	r0, [pc, #160]	; (1b8cc <z_impl_k_sem_take+0xc4>)
   1b82a:	f001 fc17 	bl	1d05c <assert_post_action>
   1b82e:	f04f 0320 	mov.w	r3, #32
   1b832:	f3ef 8711 	mrs	r7, BASEPRI
   1b836:	f383 8811 	msr	BASEPRI, r3
   1b83a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b83e:	4825      	ldr	r0, [pc, #148]	; (1b8d4 <z_impl_k_sem_take+0xcc>)
   1b840:	f000 f992 	bl	1bb68 <z_spin_lock_valid>
   1b844:	b940      	cbnz	r0, 1b858 <z_impl_k_sem_take+0x50>
   1b846:	4924      	ldr	r1, [pc, #144]	; (1b8d8 <z_impl_k_sem_take+0xd0>)
   1b848:	4821      	ldr	r0, [pc, #132]	; (1b8d0 <z_impl_k_sem_take+0xc8>)
   1b84a:	227c      	movs	r2, #124	; 0x7c
   1b84c:	f001 f960 	bl	1cb10 <printk>
   1b850:	217c      	movs	r1, #124	; 0x7c
   1b852:	4821      	ldr	r0, [pc, #132]	; (1b8d8 <z_impl_k_sem_take+0xd0>)
   1b854:	f001 fc02 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1b858:	481e      	ldr	r0, [pc, #120]	; (1b8d4 <z_impl_k_sem_take+0xcc>)
   1b85a:	f000 f9a1 	bl	1bba0 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1b85e:	68a3      	ldr	r3, [r4, #8]
   1b860:	b1ab      	cbz	r3, 1b88e <z_impl_k_sem_take+0x86>
		sem->count--;
   1b862:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b864:	481b      	ldr	r0, [pc, #108]	; (1b8d4 <z_impl_k_sem_take+0xcc>)
   1b866:	60a3      	str	r3, [r4, #8]
   1b868:	f000 f98c 	bl	1bb84 <z_spin_unlock_valid>
   1b86c:	b940      	cbnz	r0, 1b880 <z_impl_k_sem_take+0x78>
   1b86e:	491a      	ldr	r1, [pc, #104]	; (1b8d8 <z_impl_k_sem_take+0xd0>)
   1b870:	4817      	ldr	r0, [pc, #92]	; (1b8d0 <z_impl_k_sem_take+0xc8>)
   1b872:	22a7      	movs	r2, #167	; 0xa7
   1b874:	f001 f94c 	bl	1cb10 <printk>
   1b878:	21a7      	movs	r1, #167	; 0xa7
   1b87a:	4817      	ldr	r0, [pc, #92]	; (1b8d8 <z_impl_k_sem_take+0xd0>)
   1b87c:	f001 fbee 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1b880:	f387 8811 	msr	BASEPRI, r7
   1b884:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b888:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b88a:	b003      	add	sp, #12
   1b88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b88e:	ea56 0305 	orrs.w	r3, r6, r5
   1b892:	d113      	bne.n	1b8bc <z_impl_k_sem_take+0xb4>
   1b894:	480f      	ldr	r0, [pc, #60]	; (1b8d4 <z_impl_k_sem_take+0xcc>)
   1b896:	f000 f975 	bl	1bb84 <z_spin_unlock_valid>
   1b89a:	b940      	cbnz	r0, 1b8ae <z_impl_k_sem_take+0xa6>
   1b89c:	490e      	ldr	r1, [pc, #56]	; (1b8d8 <z_impl_k_sem_take+0xd0>)
   1b89e:	480c      	ldr	r0, [pc, #48]	; (1b8d0 <z_impl_k_sem_take+0xc8>)
   1b8a0:	22a7      	movs	r2, #167	; 0xa7
   1b8a2:	f001 f935 	bl	1cb10 <printk>
   1b8a6:	21a7      	movs	r1, #167	; 0xa7
   1b8a8:	480b      	ldr	r0, [pc, #44]	; (1b8d8 <z_impl_k_sem_take+0xd0>)
   1b8aa:	f001 fbd7 	bl	1d05c <assert_post_action>
   1b8ae:	f387 8811 	msr	BASEPRI, r7
   1b8b2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b8b6:	f06f 000f 	mvn.w	r0, #15
   1b8ba:	e7e6      	b.n	1b88a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b8bc:	4622      	mov	r2, r4
   1b8be:	4639      	mov	r1, r7
   1b8c0:	e9cd 6500 	strd	r6, r5, [sp]
   1b8c4:	4803      	ldr	r0, [pc, #12]	; (1b8d4 <z_impl_k_sem_take+0xcc>)
   1b8c6:	f7ff fd0b 	bl	1b2e0 <z_pend_curr>
	return ret;
   1b8ca:	e7de      	b.n	1b88a <z_impl_k_sem_take+0x82>
   1b8cc:	000264f0 	.word	0x000264f0
   1b8d0:	00022f17 	.word	0x00022f17
   1b8d4:	2000a008 	.word	0x2000a008
   1b8d8:	00022f51 	.word	0x00022f51

0001b8dc <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b8dc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b8de:	4c08      	ldr	r4, [pc, #32]	; (1b900 <k_sys_work_q_init+0x24>)
   1b8e0:	f04f 33ff 	mov.w	r3, #4294967295
   1b8e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b8e8:	4620      	mov	r0, r4
   1b8ea:	4906      	ldr	r1, [pc, #24]	; (1b904 <k_sys_work_q_init+0x28>)
   1b8ec:	f000 f98c 	bl	1bc08 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b8f0:	4905      	ldr	r1, [pc, #20]	; (1b908 <k_sys_work_q_init+0x2c>)
   1b8f2:	f104 0020 	add.w	r0, r4, #32
   1b8f6:	f005 fe8d 	bl	21614 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b8fa:	2000      	movs	r0, #0
   1b8fc:	bd10      	pop	{r4, pc}
   1b8fe:	bf00      	nop
   1b900:	20009638 	.word	0x20009638
   1b904:	2000dd78 	.word	0x2000dd78
   1b908:	00026510 	.word	0x00026510

0001b90c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b90c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b910:	4604      	mov	r4, r0
   1b912:	460f      	mov	r7, r1
   1b914:	4698      	mov	r8, r3
   1b916:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b918:	4b2c      	ldr	r3, [pc, #176]	; (1b9cc <z_setup_new_thread+0xc0>)
   1b91a:	4616      	mov	r6, r2
   1b91c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1b920:	e8d2 1fef 	ldaex	r1, [r2]
   1b924:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1b928:	2800      	cmp	r0, #0
   1b92a:	d1f9      	bne.n	1b920 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   1b92c:	4299      	cmp	r1, r3
   1b92e:	d10a      	bne.n	1b946 <z_setup_new_thread+0x3a>
   1b930:	4927      	ldr	r1, [pc, #156]	; (1b9d0 <z_setup_new_thread+0xc4>)
   1b932:	4828      	ldr	r0, [pc, #160]	; (1b9d4 <z_setup_new_thread+0xc8>)
   1b934:	f240 2223 	movw	r2, #547	; 0x223
   1b938:	f001 f8ea 	bl	1cb10 <printk>
   1b93c:	f240 2123 	movw	r1, #547	; 0x223
   1b940:	4823      	ldr	r0, [pc, #140]	; (1b9d0 <z_setup_new_thread+0xc4>)
   1b942:	f001 fb8b 	bl	1d05c <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   1b946:	2d0f      	cmp	r5, #15
   1b948:	d12f      	bne.n	1b9aa <z_setup_new_thread+0x9e>
   1b94a:	4b23      	ldr	r3, [pc, #140]	; (1b9d8 <z_setup_new_thread+0xcc>)
   1b94c:	4598      	cmp	r8, r3
   1b94e:	d130      	bne.n	1b9b2 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   1b950:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1b954:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1b958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1b95a:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1b95c:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b95e:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   1b960:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1b962:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b966:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b968:	9302      	str	r3, [sp, #8]
   1b96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b96c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b970:	9301      	str	r3, [sp, #4]
   1b972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   1b974:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   1b976:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b97a:	9300      	str	r3, [sp, #0]
   1b97c:	4632      	mov	r2, r6
   1b97e:	4643      	mov	r3, r8
   1b980:	4639      	mov	r1, r7
   1b982:	4620      	mov	r0, r4
	node->prev = NULL;
   1b984:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   1b988:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1b98a:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b98c:	f7f2 f84c 	bl	da28 <arch_new_thread>
	if (!_current) {
   1b990:	4b12      	ldr	r3, [pc, #72]	; (1b9dc <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   1b992:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1b996:	689b      	ldr	r3, [r3, #8]
   1b998:	b10b      	cbz	r3, 1b99e <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1b99a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1b99e:	4630      	mov	r0, r6
   1b9a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   1b9a4:	b004      	add	sp, #16
   1b9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1b9aa:	f105 0310 	add.w	r3, r5, #16
   1b9ae:	2b1e      	cmp	r3, #30
   1b9b0:	d9ce      	bls.n	1b950 <z_setup_new_thread+0x44>
   1b9b2:	f240 2226 	movw	r2, #550	; 0x226
   1b9b6:	4906      	ldr	r1, [pc, #24]	; (1b9d0 <z_setup_new_thread+0xc4>)
   1b9b8:	4806      	ldr	r0, [pc, #24]	; (1b9d4 <z_setup_new_thread+0xc8>)
   1b9ba:	f001 f8a9 	bl	1cb10 <printk>
   1b9be:	f240 2126 	movw	r1, #550	; 0x226
   1b9c2:	4803      	ldr	r0, [pc, #12]	; (1b9d0 <z_setup_new_thread+0xc4>)
   1b9c4:	f001 fb4a 	bl	1d05c <assert_post_action>
   1b9c8:	e7c2      	b.n	1b950 <z_setup_new_thread+0x44>
   1b9ca:	bf00      	nop
   1b9cc:	1337c0d3 	.word	0x1337c0d3
   1b9d0:	00026519 	.word	0x00026519
   1b9d4:	00022f17 	.word	0x00022f17
   1b9d8:	00019cf5 	.word	0x00019cf5
   1b9dc:	20009fc4 	.word	0x20009fc4

0001b9e0 <z_impl_k_thread_create>:
{
   1b9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b9e4:	b087      	sub	sp, #28
   1b9e6:	4604      	mov	r4, r0
   1b9e8:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   1b9ec:	460f      	mov	r7, r1
   1b9ee:	4690      	mov	r8, r2
   1b9f0:	4699      	mov	r9, r3
   1b9f2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1b9f6:	b153      	cbz	r3, 1ba0e <z_impl_k_thread_create+0x2e>
   1b9f8:	491a      	ldr	r1, [pc, #104]	; (1ba64 <z_impl_k_thread_create+0x84>)
   1b9fa:	481b      	ldr	r0, [pc, #108]	; (1ba68 <z_impl_k_thread_create+0x88>)
   1b9fc:	f240 228f 	movw	r2, #655	; 0x28f
   1ba00:	f001 f886 	bl	1cb10 <printk>
   1ba04:	f240 218f 	movw	r1, #655	; 0x28f
   1ba08:	4816      	ldr	r0, [pc, #88]	; (1ba64 <z_impl_k_thread_create+0x84>)
   1ba0a:	f001 fb27 	bl	1d05c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ba0e:	2300      	movs	r3, #0
   1ba10:	9305      	str	r3, [sp, #20]
   1ba12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ba14:	4642      	mov	r2, r8
   1ba16:	9304      	str	r3, [sp, #16]
   1ba18:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ba1a:	4639      	mov	r1, r7
   1ba1c:	9303      	str	r3, [sp, #12]
   1ba1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ba20:	4620      	mov	r0, r4
   1ba22:	9302      	str	r3, [sp, #8]
   1ba24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ba26:	9301      	str	r3, [sp, #4]
   1ba28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ba2a:	9300      	str	r3, [sp, #0]
   1ba2c:	464b      	mov	r3, r9
   1ba2e:	f7ff ff6d 	bl	1b90c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1ba32:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ba36:	bf08      	it	eq
   1ba38:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ba3c:	d005      	beq.n	1ba4a <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ba3e:	ea55 0306 	orrs.w	r3, r5, r6
   1ba42:	d106      	bne.n	1ba52 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   1ba44:	4620      	mov	r0, r4
   1ba46:	f7ff f917 	bl	1ac78 <z_sched_start>
}
   1ba4a:	4620      	mov	r0, r4
   1ba4c:	b007      	add	sp, #28
   1ba4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ba52:	4632      	mov	r2, r6
   1ba54:	462b      	mov	r3, r5
   1ba56:	4905      	ldr	r1, [pc, #20]	; (1ba6c <z_impl_k_thread_create+0x8c>)
   1ba58:	f104 0018 	add.w	r0, r4, #24
   1ba5c:	f000 fa18 	bl	1be90 <z_add_timeout>
   1ba60:	e7f3      	b.n	1ba4a <z_impl_k_thread_create+0x6a>
   1ba62:	bf00      	nop
   1ba64:	00026519 	.word	0x00026519
   1ba68:	00022f17 	.word	0x00022f17
   1ba6c:	0001acfd 	.word	0x0001acfd

0001ba70 <z_init_static_threads>:
{
   1ba70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ba74:	4c37      	ldr	r4, [pc, #220]	; (1bb54 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1ba76:	4d38      	ldr	r5, [pc, #224]	; (1bb58 <z_init_static_threads+0xe8>)
   1ba78:	4f38      	ldr	r7, [pc, #224]	; (1bb5c <z_init_static_threads+0xec>)
{
   1ba7a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1ba7c:	42ac      	cmp	r4, r5
   1ba7e:	4626      	mov	r6, r4
   1ba80:	d90a      	bls.n	1ba98 <z_init_static_threads+0x28>
   1ba82:	4639      	mov	r1, r7
   1ba84:	4836      	ldr	r0, [pc, #216]	; (1bb60 <z_init_static_threads+0xf0>)
   1ba86:	f240 22fd 	movw	r2, #765	; 0x2fd
   1ba8a:	f001 f841 	bl	1cb10 <printk>
   1ba8e:	f240 21fd 	movw	r1, #765	; 0x2fd
   1ba92:	4638      	mov	r0, r7
   1ba94:	f001 fae2 	bl	1d05c <assert_post_action>
   1ba98:	42ae      	cmp	r6, r5
   1ba9a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1ba9e:	d31b      	bcc.n	1bad8 <z_init_static_threads+0x68>
	k_sched_lock();
   1baa0:	f7fe ff16 	bl	1a8d0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1baa4:	4c2b      	ldr	r4, [pc, #172]	; (1bb54 <z_init_static_threads+0xe4>)
   1baa6:	4e2d      	ldr	r6, [pc, #180]	; (1bb5c <z_init_static_threads+0xec>)
   1baa8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1bb60 <z_init_static_threads+0xf0>
   1baac:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1bb64 <z_init_static_threads+0xf4>
   1bab0:	42ac      	cmp	r4, r5
   1bab2:	d90a      	bls.n	1baca <z_init_static_threads+0x5a>
   1bab4:	4631      	mov	r1, r6
   1bab6:	4640      	mov	r0, r8
   1bab8:	f44f 7247 	mov.w	r2, #796	; 0x31c
   1babc:	f001 f828 	bl	1cb10 <printk>
   1bac0:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1bac4:	4630      	mov	r0, r6
   1bac6:	f001 fac9 	bl	1d05c <assert_post_action>
   1baca:	42ac      	cmp	r4, r5
   1bacc:	d320      	bcc.n	1bb10 <z_init_static_threads+0xa0>
}
   1bace:	b007      	add	sp, #28
   1bad0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1bad4:	f7fe bff4 	b.w	1aac0 <k_sched_unlock>
		z_setup_new_thread(
   1bad8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1badc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bae0:	9305      	str	r3, [sp, #20]
   1bae2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1bae6:	9304      	str	r3, [sp, #16]
   1bae8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1baec:	9303      	str	r3, [sp, #12]
   1baee:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1baf2:	9302      	str	r3, [sp, #8]
   1baf4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1baf8:	9301      	str	r3, [sp, #4]
   1bafa:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1bafe:	9300      	str	r3, [sp, #0]
   1bb00:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bb04:	f7ff ff02 	bl	1b90c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1bb08:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1bb0c:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   1bb0e:	e7b5      	b.n	1ba7c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1bb10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bb12:	1c5a      	adds	r2, r3, #1
   1bb14:	d00f      	beq.n	1bb36 <z_init_static_threads+0xc6>
   1bb16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1bb1a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bb1e:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   1bb20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1bb24:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bb28:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1bb2c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bb2e:	d104      	bne.n	1bb3a <z_init_static_threads+0xca>
	z_sched_start(thread);
   1bb30:	4638      	mov	r0, r7
   1bb32:	f7ff f8a1 	bl	1ac78 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bb36:	3430      	adds	r4, #48	; 0x30
   1bb38:	e7ba      	b.n	1bab0 <z_init_static_threads+0x40>
   1bb3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bb3e:	2300      	movs	r3, #0
   1bb40:	f7ec fff4 	bl	8b2c <__aeabi_uldivmod>
   1bb44:	4602      	mov	r2, r0
   1bb46:	460b      	mov	r3, r1
   1bb48:	f107 0018 	add.w	r0, r7, #24
   1bb4c:	4649      	mov	r1, r9
   1bb4e:	f000 f99f 	bl	1be90 <z_add_timeout>
   1bb52:	e7f0      	b.n	1bb36 <z_init_static_threads+0xc6>
   1bb54:	200084bc 	.word	0x200084bc
   1bb58:	200084bc 	.word	0x200084bc
   1bb5c:	00026519 	.word	0x00026519
   1bb60:	00022f17 	.word	0x00022f17
   1bb64:	0001acfd 	.word	0x0001acfd

0001bb68 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1bb68:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1bb6a:	b138      	cbz	r0, 1bb7c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1bb6c:	4b04      	ldr	r3, [pc, #16]	; (1bb80 <z_spin_lock_valid+0x18>)
   1bb6e:	f000 0003 	and.w	r0, r0, #3
   1bb72:	7e1b      	ldrb	r3, [r3, #24]
   1bb74:	1ac0      	subs	r0, r0, r3
   1bb76:	bf18      	it	ne
   1bb78:	2001      	movne	r0, #1
   1bb7a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1bb7c:	2001      	movs	r0, #1
}
   1bb7e:	4770      	bx	lr
   1bb80:	20009fc4 	.word	0x20009fc4

0001bb84 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1bb84:	4905      	ldr	r1, [pc, #20]	; (1bb9c <z_spin_unlock_valid+0x18>)
{
   1bb86:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1bb88:	688a      	ldr	r2, [r1, #8]
   1bb8a:	7e08      	ldrb	r0, [r1, #24]
   1bb8c:	6819      	ldr	r1, [r3, #0]
   1bb8e:	4302      	orrs	r2, r0
   1bb90:	2000      	movs	r0, #0
   1bb92:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1bb94:	bf04      	itt	eq
   1bb96:	6018      	streq	r0, [r3, #0]
	return true;
   1bb98:	2001      	moveq	r0, #1
}
   1bb9a:	4770      	bx	lr
   1bb9c:	20009fc4 	.word	0x20009fc4

0001bba0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1bba0:	4a02      	ldr	r2, [pc, #8]	; (1bbac <z_spin_lock_set_owner+0xc>)
   1bba2:	7e11      	ldrb	r1, [r2, #24]
   1bba4:	6893      	ldr	r3, [r2, #8]
   1bba6:	430b      	orrs	r3, r1
   1bba8:	6003      	str	r3, [r0, #0]
}
   1bbaa:	4770      	bx	lr
   1bbac:	20009fc4 	.word	0x20009fc4

0001bbb0 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1bbb0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1bbb2:	f04f 0320 	mov.w	r3, #32
   1bbb6:	f3ef 8511 	mrs	r5, BASEPRI
   1bbba:	f383 8811 	msr	BASEPRI, r3
   1bbbe:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   1bbc2:	4c0e      	ldr	r4, [pc, #56]	; (1bbfc <z_self_abort+0x4c>)
   1bbc4:	6923      	ldr	r3, [r4, #16]
   1bbc6:	b143      	cbz	r3, 1bbda <z_self_abort+0x2a>
   1bbc8:	490d      	ldr	r1, [pc, #52]	; (1bc00 <z_self_abort+0x50>)
   1bbca:	480e      	ldr	r0, [pc, #56]	; (1bc04 <z_self_abort+0x54>)
   1bbcc:	2228      	movs	r2, #40	; 0x28
   1bbce:	f000 ff9f 	bl	1cb10 <printk>
   1bbd2:	2128      	movs	r1, #40	; 0x28
   1bbd4:	480a      	ldr	r0, [pc, #40]	; (1bc00 <z_self_abort+0x50>)
   1bbd6:	f001 fa41 	bl	1d05c <assert_post_action>
	cpu->pending_abort = _current;
   1bbda:	68a0      	ldr	r0, [r4, #8]
   1bbdc:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   1bbde:	f7ff f981 	bl	1aee4 <z_impl_k_thread_suspend>
   1bbe2:	4628      	mov	r0, r5
   1bbe4:	f7f1 fe82 	bl	d8ec <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   1bbe8:	4905      	ldr	r1, [pc, #20]	; (1bc00 <z_self_abort+0x50>)
   1bbea:	4806      	ldr	r0, [pc, #24]	; (1bc04 <z_self_abort+0x54>)
   1bbec:	2230      	movs	r2, #48	; 0x30
   1bbee:	f000 ff8f 	bl	1cb10 <printk>
   1bbf2:	2130      	movs	r1, #48	; 0x30
   1bbf4:	4802      	ldr	r0, [pc, #8]	; (1bc00 <z_self_abort+0x50>)
   1bbf6:	f001 fa31 	bl	1d05c <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1bbfa:	bf00      	nop
   1bbfc:	20009fc4 	.word	0x20009fc4
   1bc00:	0002653c 	.word	0x0002653c
   1bc04:	00022f17 	.word	0x00022f17

0001bc08 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc0c:	4604      	mov	r4, r0
   1bc0e:	b088      	sub	sp, #32
   1bc10:	460d      	mov	r5, r1
   1bc12:	4616      	mov	r6, r2
   1bc14:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1bc16:	f005 fc7e 	bl	21516 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1bc1a:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bc1e:	2200      	movs	r2, #0
   1bc20:	2300      	movs	r3, #0
   1bc22:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1bc26:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bc2a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1bc2e:	4629      	mov	r1, r5
   1bc30:	4632      	mov	r2, r6
   1bc32:	4640      	mov	r0, r8
   1bc34:	4b05      	ldr	r3, [pc, #20]	; (1bc4c <k_work_q_start+0x44>)
   1bc36:	9400      	str	r4, [sp, #0]
   1bc38:	f7ff fed2 	bl	1b9e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1bc3c:	4640      	mov	r0, r8
   1bc3e:	4904      	ldr	r1, [pc, #16]	; (1bc50 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1bc40:	b008      	add	sp, #32
   1bc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bc46:	f005 bce5 	b.w	21614 <z_impl_k_thread_name_set>
   1bc4a:	bf00      	nop
   1bc4c:	0000a69d 	.word	0x0000a69d
   1bc50:	00026565 	.word	0x00026565

0001bc54 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1bc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc58:	4606      	mov	r6, r0
   1bc5a:	460d      	mov	r5, r1
   1bc5c:	4690      	mov	r8, r2
   1bc5e:	461f      	mov	r7, r3
   1bc60:	f04f 0320 	mov.w	r3, #32
   1bc64:	f3ef 8911 	mrs	r9, BASEPRI
   1bc68:	f383 8811 	msr	BASEPRI, r3
   1bc6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc70:	482c      	ldr	r0, [pc, #176]	; (1bd24 <k_delayed_work_submit_to_queue+0xd0>)
   1bc72:	f7ff ff79 	bl	1bb68 <z_spin_lock_valid>
   1bc76:	b940      	cbnz	r0, 1bc8a <k_delayed_work_submit_to_queue+0x36>
   1bc78:	492b      	ldr	r1, [pc, #172]	; (1bd28 <k_delayed_work_submit_to_queue+0xd4>)
   1bc7a:	482c      	ldr	r0, [pc, #176]	; (1bd2c <k_delayed_work_submit_to_queue+0xd8>)
   1bc7c:	227c      	movs	r2, #124	; 0x7c
   1bc7e:	f000 ff47 	bl	1cb10 <printk>
   1bc82:	217c      	movs	r1, #124	; 0x7c
   1bc84:	4828      	ldr	r0, [pc, #160]	; (1bd28 <k_delayed_work_submit_to_queue+0xd4>)
   1bc86:	f001 f9e9 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bc8a:	4826      	ldr	r0, [pc, #152]	; (1bd24 <k_delayed_work_submit_to_queue+0xd0>)
   1bc8c:	f7ff ff88 	bl	1bba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1bc90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bc92:	b1e3      	cbz	r3, 1bcce <k_delayed_work_submit_to_queue+0x7a>
   1bc94:	42b3      	cmp	r3, r6
   1bc96:	d142      	bne.n	1bd1e <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1bc98:	4628      	mov	r0, r5
   1bc9a:	f005 fcd9 	bl	21650 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1bc9e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1bca2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1bca4:	d015      	beq.n	1bcd2 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   1bca6:	2800      	cmp	r0, #0
   1bca8:	da14      	bge.n	1bcd4 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bcaa:	481e      	ldr	r0, [pc, #120]	; (1bd24 <k_delayed_work_submit_to_queue+0xd0>)
   1bcac:	f7ff ff6a 	bl	1bb84 <z_spin_unlock_valid>
   1bcb0:	b940      	cbnz	r0, 1bcc4 <k_delayed_work_submit_to_queue+0x70>
   1bcb2:	491d      	ldr	r1, [pc, #116]	; (1bd28 <k_delayed_work_submit_to_queue+0xd4>)
   1bcb4:	481d      	ldr	r0, [pc, #116]	; (1bd2c <k_delayed_work_submit_to_queue+0xd8>)
   1bcb6:	22a7      	movs	r2, #167	; 0xa7
   1bcb8:	f000 ff2a 	bl	1cb10 <printk>
   1bcbc:	21a7      	movs	r1, #167	; 0xa7
   1bcbe:	481a      	ldr	r0, [pc, #104]	; (1bd28 <k_delayed_work_submit_to_queue+0xd4>)
   1bcc0:	f001 f9cc 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1bcc4:	f389 8811 	msr	BASEPRI, r9
   1bcc8:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1bccc:	e01c      	b.n	1bd08 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   1bcce:	2e00      	cmp	r6, #0
   1bcd0:	d0e2      	beq.n	1bc98 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   1bcd2:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bcd4:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   1bcd8:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bcda:	d118      	bne.n	1bd0e <k_delayed_work_submit_to_queue+0xba>
   1bcdc:	4811      	ldr	r0, [pc, #68]	; (1bd24 <k_delayed_work_submit_to_queue+0xd0>)
   1bcde:	f7ff ff51 	bl	1bb84 <z_spin_unlock_valid>
   1bce2:	b940      	cbnz	r0, 1bcf6 <k_delayed_work_submit_to_queue+0xa2>
   1bce4:	4910      	ldr	r1, [pc, #64]	; (1bd28 <k_delayed_work_submit_to_queue+0xd4>)
   1bce6:	4811      	ldr	r0, [pc, #68]	; (1bd2c <k_delayed_work_submit_to_queue+0xd8>)
   1bce8:	22a7      	movs	r2, #167	; 0xa7
   1bcea:	f000 ff11 	bl	1cb10 <printk>
   1bcee:	21a7      	movs	r1, #167	; 0xa7
   1bcf0:	480d      	ldr	r0, [pc, #52]	; (1bd28 <k_delayed_work_submit_to_queue+0xd4>)
   1bcf2:	f001 f9b3 	bl	1d05c <assert_post_action>
   1bcf6:	f389 8811 	msr	BASEPRI, r9
   1bcfa:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1bcfe:	4629      	mov	r1, r5
   1bd00:	4630      	mov	r0, r6
   1bd02:	f005 fc8c 	bl	2161e <k_work_submit_to_queue>
		return 0;
   1bd06:	2400      	movs	r4, #0
}
   1bd08:	4620      	mov	r0, r4
   1bd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1bd0e:	4642      	mov	r2, r8
   1bd10:	463b      	mov	r3, r7
   1bd12:	4907      	ldr	r1, [pc, #28]	; (1bd30 <k_delayed_work_submit_to_queue+0xdc>)
   1bd14:	f105 0010 	add.w	r0, r5, #16
   1bd18:	f000 f8ba 	bl	1be90 <z_add_timeout>
   1bd1c:	e7c5      	b.n	1bcaa <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   1bd1e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1bd22:	e7c2      	b.n	1bcaa <k_delayed_work_submit_to_queue+0x56>
   1bd24:	2000a00c 	.word	0x2000a00c
   1bd28:	00022f51 	.word	0x00022f51
   1bd2c:	00022f17 	.word	0x00022f17
   1bd30:	00021647 	.word	0x00021647

0001bd34 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1bd34:	b538      	push	{r3, r4, r5, lr}
   1bd36:	4604      	mov	r4, r0
	__asm__ volatile(
   1bd38:	f04f 0320 	mov.w	r3, #32
   1bd3c:	f3ef 8511 	mrs	r5, BASEPRI
   1bd40:	f383 8811 	msr	BASEPRI, r3
   1bd44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd48:	4815      	ldr	r0, [pc, #84]	; (1bda0 <k_delayed_work_cancel+0x6c>)
   1bd4a:	f7ff ff0d 	bl	1bb68 <z_spin_lock_valid>
   1bd4e:	b940      	cbnz	r0, 1bd62 <k_delayed_work_cancel+0x2e>
   1bd50:	4914      	ldr	r1, [pc, #80]	; (1bda4 <k_delayed_work_cancel+0x70>)
   1bd52:	4815      	ldr	r0, [pc, #84]	; (1bda8 <k_delayed_work_cancel+0x74>)
   1bd54:	227c      	movs	r2, #124	; 0x7c
   1bd56:	f000 fedb 	bl	1cb10 <printk>
   1bd5a:	217c      	movs	r1, #124	; 0x7c
   1bd5c:	4811      	ldr	r0, [pc, #68]	; (1bda4 <k_delayed_work_cancel+0x70>)
   1bd5e:	f001 f97d 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bd62:	480f      	ldr	r0, [pc, #60]	; (1bda0 <k_delayed_work_cancel+0x6c>)
   1bd64:	f7ff ff1c 	bl	1bba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1bd68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bd6a:	b1b3      	cbz	r3, 1bd9a <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   1bd6c:	4620      	mov	r0, r4
   1bd6e:	f005 fc6f 	bl	21650 <work_cancel>
   1bd72:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bd74:	480a      	ldr	r0, [pc, #40]	; (1bda0 <k_delayed_work_cancel+0x6c>)
   1bd76:	f7ff ff05 	bl	1bb84 <z_spin_unlock_valid>
   1bd7a:	b940      	cbnz	r0, 1bd8e <k_delayed_work_cancel+0x5a>
   1bd7c:	4909      	ldr	r1, [pc, #36]	; (1bda4 <k_delayed_work_cancel+0x70>)
   1bd7e:	480a      	ldr	r0, [pc, #40]	; (1bda8 <k_delayed_work_cancel+0x74>)
   1bd80:	22a7      	movs	r2, #167	; 0xa7
   1bd82:	f000 fec5 	bl	1cb10 <printk>
   1bd86:	21a7      	movs	r1, #167	; 0xa7
   1bd88:	4806      	ldr	r0, [pc, #24]	; (1bda4 <k_delayed_work_cancel+0x70>)
   1bd8a:	f001 f967 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1bd8e:	f385 8811 	msr	BASEPRI, r5
   1bd92:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1bd96:	4620      	mov	r0, r4
   1bd98:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bd9a:	f06f 0415 	mvn.w	r4, #21
   1bd9e:	e7e9      	b.n	1bd74 <k_delayed_work_cancel+0x40>
   1bda0:	2000a00c 	.word	0x2000a00c
   1bda4:	00022f51 	.word	0x00022f51
   1bda8:	00022f17 	.word	0x00022f17

0001bdac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1bdac:	4a02      	ldr	r2, [pc, #8]	; (1bdb8 <boot_banner+0xc>)
   1bdae:	4903      	ldr	r1, [pc, #12]	; (1bdbc <boot_banner+0x10>)
   1bdb0:	4803      	ldr	r0, [pc, #12]	; (1bdc0 <boot_banner+0x14>)
   1bdb2:	f000 bead 	b.w	1cb10 <printk>
   1bdb6:	bf00      	nop
   1bdb8:	000263a8 	.word	0x000263a8
   1bdbc:	0002656f 	.word	0x0002656f
   1bdc0:	0002657c 	.word	0x0002657c

0001bdc4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bdc4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bdc6:	4806      	ldr	r0, [pc, #24]	; (1bde0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bdc8:	4a06      	ldr	r2, [pc, #24]	; (1bde4 <z_data_copy+0x20>)
   1bdca:	4907      	ldr	r1, [pc, #28]	; (1bde8 <z_data_copy+0x24>)
   1bdcc:	1a12      	subs	r2, r2, r0
   1bdce:	f002 fb57 	bl	1e480 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bdd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bdd6:	4a05      	ldr	r2, [pc, #20]	; (1bdec <z_data_copy+0x28>)
   1bdd8:	4905      	ldr	r1, [pc, #20]	; (1bdf0 <z_data_copy+0x2c>)
   1bdda:	4806      	ldr	r0, [pc, #24]	; (1bdf4 <z_data_copy+0x30>)
   1bddc:	f002 bb50 	b.w	1e480 <memcpy>
   1bde0:	20008000 	.word	0x20008000
   1bde4:	200086cc 	.word	0x200086cc
   1bde8:	00026610 	.word	0x00026610
   1bdec:	00000000 	.word	0x00000000
   1bdf0:	00026610 	.word	0x00026610
   1bdf4:	20008000 	.word	0x20008000

0001bdf8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1bdf8:	4b03      	ldr	r3, [pc, #12]	; (1be08 <elapsed+0x10>)
   1bdfa:	681b      	ldr	r3, [r3, #0]
   1bdfc:	b90b      	cbnz	r3, 1be02 <elapsed+0xa>
   1bdfe:	f7f0 bd79 	b.w	c8f4 <z_clock_elapsed>
}
   1be02:	2000      	movs	r0, #0
   1be04:	4770      	bx	lr
   1be06:	bf00      	nop
   1be08:	2000a010 	.word	0x2000a010

0001be0c <next_timeout>:
	return list->head == list;
   1be0c:	4b11      	ldr	r3, [pc, #68]	; (1be54 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1be0e:	b510      	push	{r4, lr}
   1be10:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be12:	429c      	cmp	r4, r3
   1be14:	bf08      	it	eq
   1be16:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1be18:	f7ff ffee 	bl	1bdf8 <elapsed>
   1be1c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1be1e:	b16c      	cbz	r4, 1be3c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1be20:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1be24:	1ac0      	subs	r0, r0, r3
   1be26:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1be2a:	2801      	cmp	r0, #1
   1be2c:	f173 0200 	sbcs.w	r2, r3, #0
   1be30:	db0d      	blt.n	1be4e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1be32:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1be36:	f173 0300 	sbcs.w	r3, r3, #0
   1be3a:	db01      	blt.n	1be40 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1be3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1be40:	4b05      	ldr	r3, [pc, #20]	; (1be58 <next_timeout+0x4c>)
   1be42:	695b      	ldr	r3, [r3, #20]
   1be44:	b113      	cbz	r3, 1be4c <next_timeout+0x40>
   1be46:	4298      	cmp	r0, r3
   1be48:	bfa8      	it	ge
   1be4a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1be4c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1be4e:	2000      	movs	r0, #0
   1be50:	e7f6      	b.n	1be40 <next_timeout+0x34>
   1be52:	bf00      	nop
   1be54:	20008418 	.word	0x20008418
   1be58:	20009fc4 	.word	0x20009fc4

0001be5c <remove_timeout>:
{
   1be5c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1be5e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1be60:	b168      	cbz	r0, 1be7e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1be62:	4a0a      	ldr	r2, [pc, #40]	; (1be8c <remove_timeout+0x30>)
   1be64:	6852      	ldr	r2, [r2, #4]
   1be66:	4290      	cmp	r0, r2
   1be68:	d009      	beq.n	1be7e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1be6a:	b143      	cbz	r3, 1be7e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1be6c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1be70:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1be74:	1912      	adds	r2, r2, r4
   1be76:	eb41 0105 	adc.w	r1, r1, r5
   1be7a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1be7e:	6842      	ldr	r2, [r0, #4]
   1be80:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1be82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1be84:	2300      	movs	r3, #0
	node->prev = NULL;
   1be86:	e9c0 3300 	strd	r3, r3, [r0]
}
   1be8a:	bd30      	pop	{r4, r5, pc}
   1be8c:	20008418 	.word	0x20008418

0001be90 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1be90:	f1b3 3fff 	cmp.w	r3, #4294967295
   1be94:	bf08      	it	eq
   1be96:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1be9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be9e:	4604      	mov	r4, r0
   1bea0:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bea2:	f000 808c 	beq.w	1bfbe <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bea6:	f06f 0601 	mvn.w	r6, #1
   1beaa:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1beae:	1c55      	adds	r5, r2, #1
   1beb0:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1beb4:	1b73      	subs	r3, r6, r5
   1beb6:	eb69 0307 	sbc.w	r3, r9, r7
   1beba:	2b00      	cmp	r3, #0
   1bebc:	db0d      	blt.n	1beda <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1bebe:	f7ff ff9b 	bl	1bdf8 <elapsed>
   1bec2:	4b44      	ldr	r3, [pc, #272]	; (1bfd4 <z_add_timeout+0x144>)
   1bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bec8:	1ab6      	subs	r6, r6, r2
   1beca:	eb69 0303 	sbc.w	r3, r9, r3
   1bece:	1b75      	subs	r5, r6, r5
   1bed0:	eb63 0707 	sbc.w	r7, r3, r7
   1bed4:	1a2d      	subs	r5, r5, r0
   1bed6:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1beda:	6823      	ldr	r3, [r4, #0]
   1bedc:	b143      	cbz	r3, 1bef0 <z_add_timeout+0x60>
   1bede:	493e      	ldr	r1, [pc, #248]	; (1bfd8 <z_add_timeout+0x148>)
   1bee0:	483e      	ldr	r0, [pc, #248]	; (1bfdc <z_add_timeout+0x14c>)
   1bee2:	2268      	movs	r2, #104	; 0x68
   1bee4:	f000 fe14 	bl	1cb10 <printk>
   1bee8:	2168      	movs	r1, #104	; 0x68
   1beea:	483b      	ldr	r0, [pc, #236]	; (1bfd8 <z_add_timeout+0x148>)
   1beec:	f001 f8b6 	bl	1d05c <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   1bef0:	2d01      	cmp	r5, #1
   1bef2:	f177 0300 	sbcs.w	r3, r7, #0
   1bef6:	bfbc      	itt	lt
   1bef8:	2501      	movlt	r5, #1
   1befa:	2700      	movlt	r7, #0
	to->fn = fn;
   1befc:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   1bf00:	f04f 0320 	mov.w	r3, #32
   1bf04:	f3ef 8611 	mrs	r6, BASEPRI
   1bf08:	f383 8811 	msr	BASEPRI, r3
   1bf0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf10:	4833      	ldr	r0, [pc, #204]	; (1bfe0 <z_add_timeout+0x150>)
   1bf12:	f7ff fe29 	bl	1bb68 <z_spin_lock_valid>
   1bf16:	b940      	cbnz	r0, 1bf2a <z_add_timeout+0x9a>
   1bf18:	4932      	ldr	r1, [pc, #200]	; (1bfe4 <z_add_timeout+0x154>)
   1bf1a:	4830      	ldr	r0, [pc, #192]	; (1bfdc <z_add_timeout+0x14c>)
   1bf1c:	227c      	movs	r2, #124	; 0x7c
   1bf1e:	f000 fdf7 	bl	1cb10 <printk>
   1bf22:	217c      	movs	r1, #124	; 0x7c
   1bf24:	482f      	ldr	r0, [pc, #188]	; (1bfe4 <z_add_timeout+0x154>)
   1bf26:	f001 f899 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1bf2a:	482d      	ldr	r0, [pc, #180]	; (1bfe0 <z_add_timeout+0x150>)
   1bf2c:	f7ff fe38 	bl	1bba0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bf30:	f7ff ff62 	bl	1bdf8 <elapsed>
	return list->head == list;
   1bf34:	4a2c      	ldr	r2, [pc, #176]	; (1bfe8 <z_add_timeout+0x158>)
   1bf36:	1945      	adds	r5, r0, r5
   1bf38:	6813      	ldr	r3, [r2, #0]
   1bf3a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf3e:	4293      	cmp	r3, r2
   1bf40:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1bf44:	d002      	beq.n	1bf4c <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   1bf46:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bf4a:	b933      	cbnz	r3, 1bf5a <z_add_timeout+0xca>
	node->prev = list->tail;
   1bf4c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1bf4e:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   1bf50:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bf52:	6853      	ldr	r3, [r2, #4]
   1bf54:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bf56:	6054      	str	r4, [r2, #4]
}
   1bf58:	e011      	b.n	1bf7e <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   1bf5a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   1bf5e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1bf62:	4281      	cmp	r1, r0
   1bf64:	eb75 0e07 	sbcs.w	lr, r5, r7
   1bf68:	da2b      	bge.n	1bfc2 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   1bf6a:	1a41      	subs	r1, r0, r1
   1bf6c:	eb67 0505 	sbc.w	r5, r7, r5
   1bf70:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   1bf74:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1bf76:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1bf7a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bf7c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1bf7e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf80:	4293      	cmp	r3, r2
   1bf82:	d00b      	beq.n	1bf9c <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bf84:	429c      	cmp	r4, r3
   1bf86:	d109      	bne.n	1bf9c <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bf88:	f7ff ff40 	bl	1be0c <next_timeout>

			if (next_time == 0 ||
   1bf8c:	b118      	cbz	r0, 1bf96 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   1bf8e:	4b17      	ldr	r3, [pc, #92]	; (1bfec <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   1bf90:	695b      	ldr	r3, [r3, #20]
   1bf92:	4283      	cmp	r3, r0
   1bf94:	d002      	beq.n	1bf9c <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   1bf96:	2100      	movs	r1, #0
   1bf98:	f7f0 fc7a 	bl	c890 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf9c:	4810      	ldr	r0, [pc, #64]	; (1bfe0 <z_add_timeout+0x150>)
   1bf9e:	f7ff fdf1 	bl	1bb84 <z_spin_unlock_valid>
   1bfa2:	b940      	cbnz	r0, 1bfb6 <z_add_timeout+0x126>
   1bfa4:	490f      	ldr	r1, [pc, #60]	; (1bfe4 <z_add_timeout+0x154>)
   1bfa6:	480d      	ldr	r0, [pc, #52]	; (1bfdc <z_add_timeout+0x14c>)
   1bfa8:	22a7      	movs	r2, #167	; 0xa7
   1bfaa:	f000 fdb1 	bl	1cb10 <printk>
   1bfae:	21a7      	movs	r1, #167	; 0xa7
   1bfb0:	480c      	ldr	r0, [pc, #48]	; (1bfe4 <z_add_timeout+0x154>)
   1bfb2:	f001 f853 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1bfb6:	f386 8811 	msr	BASEPRI, r6
   1bfba:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bfbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   1bfc2:	1a09      	subs	r1, r1, r0
   1bfc4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1bfc8:	4563      	cmp	r3, ip
   1bfca:	e9c4 1504 	strd	r1, r5, [r4, #16]
   1bfce:	d0bd      	beq.n	1bf4c <z_add_timeout+0xbc>
   1bfd0:	681b      	ldr	r3, [r3, #0]
   1bfd2:	e7ba      	b.n	1bf4a <z_add_timeout+0xba>
   1bfd4:	200096e8 	.word	0x200096e8
   1bfd8:	000265a3 	.word	0x000265a3
   1bfdc:	00022f17 	.word	0x00022f17
   1bfe0:	2000a014 	.word	0x2000a014
   1bfe4:	00022f51 	.word	0x00022f51
   1bfe8:	20008418 	.word	0x20008418
   1bfec:	20009fc4 	.word	0x20009fc4

0001bff0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1bff0:	b538      	push	{r3, r4, r5, lr}
   1bff2:	4604      	mov	r4, r0
	__asm__ volatile(
   1bff4:	f04f 0320 	mov.w	r3, #32
   1bff8:	f3ef 8511 	mrs	r5, BASEPRI
   1bffc:	f383 8811 	msr	BASEPRI, r3
   1c000:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c004:	4815      	ldr	r0, [pc, #84]	; (1c05c <z_abort_timeout+0x6c>)
   1c006:	f7ff fdaf 	bl	1bb68 <z_spin_lock_valid>
   1c00a:	b940      	cbnz	r0, 1c01e <z_abort_timeout+0x2e>
   1c00c:	4914      	ldr	r1, [pc, #80]	; (1c060 <z_abort_timeout+0x70>)
   1c00e:	4815      	ldr	r0, [pc, #84]	; (1c064 <z_abort_timeout+0x74>)
   1c010:	227c      	movs	r2, #124	; 0x7c
   1c012:	f000 fd7d 	bl	1cb10 <printk>
   1c016:	217c      	movs	r1, #124	; 0x7c
   1c018:	4811      	ldr	r0, [pc, #68]	; (1c060 <z_abort_timeout+0x70>)
   1c01a:	f001 f81f 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c01e:	480f      	ldr	r0, [pc, #60]	; (1c05c <z_abort_timeout+0x6c>)
   1c020:	f7ff fdbe 	bl	1bba0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1c024:	6823      	ldr	r3, [r4, #0]
   1c026:	b1b3      	cbz	r3, 1c056 <z_abort_timeout+0x66>
			remove_timeout(to);
   1c028:	4620      	mov	r0, r4
   1c02a:	f7ff ff17 	bl	1be5c <remove_timeout>
			ret = 0;
   1c02e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c030:	480a      	ldr	r0, [pc, #40]	; (1c05c <z_abort_timeout+0x6c>)
   1c032:	f7ff fda7 	bl	1bb84 <z_spin_unlock_valid>
   1c036:	b940      	cbnz	r0, 1c04a <z_abort_timeout+0x5a>
   1c038:	4909      	ldr	r1, [pc, #36]	; (1c060 <z_abort_timeout+0x70>)
   1c03a:	480a      	ldr	r0, [pc, #40]	; (1c064 <z_abort_timeout+0x74>)
   1c03c:	22a7      	movs	r2, #167	; 0xa7
   1c03e:	f000 fd67 	bl	1cb10 <printk>
   1c042:	21a7      	movs	r1, #167	; 0xa7
   1c044:	4806      	ldr	r0, [pc, #24]	; (1c060 <z_abort_timeout+0x70>)
   1c046:	f001 f809 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c04a:	f385 8811 	msr	BASEPRI, r5
   1c04e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1c052:	4620      	mov	r0, r4
   1c054:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1c056:	f06f 0415 	mvn.w	r4, #21
   1c05a:	e7e9      	b.n	1c030 <z_abort_timeout+0x40>
   1c05c:	2000a014 	.word	0x2000a014
   1c060:	00022f51 	.word	0x00022f51
   1c064:	00022f17 	.word	0x00022f17

0001c068 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1c068:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c06a:	f04f 0320 	mov.w	r3, #32
   1c06e:	f3ef 8511 	mrs	r5, BASEPRI
   1c072:	f383 8811 	msr	BASEPRI, r3
   1c076:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c07a:	4813      	ldr	r0, [pc, #76]	; (1c0c8 <z_get_next_timeout_expiry+0x60>)
   1c07c:	f7ff fd74 	bl	1bb68 <z_spin_lock_valid>
   1c080:	b940      	cbnz	r0, 1c094 <z_get_next_timeout_expiry+0x2c>
   1c082:	4912      	ldr	r1, [pc, #72]	; (1c0cc <z_get_next_timeout_expiry+0x64>)
   1c084:	4812      	ldr	r0, [pc, #72]	; (1c0d0 <z_get_next_timeout_expiry+0x68>)
   1c086:	227c      	movs	r2, #124	; 0x7c
   1c088:	f000 fd42 	bl	1cb10 <printk>
   1c08c:	217c      	movs	r1, #124	; 0x7c
   1c08e:	480f      	ldr	r0, [pc, #60]	; (1c0cc <z_get_next_timeout_expiry+0x64>)
   1c090:	f000 ffe4 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c094:	480c      	ldr	r0, [pc, #48]	; (1c0c8 <z_get_next_timeout_expiry+0x60>)
   1c096:	f7ff fd83 	bl	1bba0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1c09a:	f7ff feb7 	bl	1be0c <next_timeout>
   1c09e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c0a0:	4809      	ldr	r0, [pc, #36]	; (1c0c8 <z_get_next_timeout_expiry+0x60>)
   1c0a2:	f7ff fd6f 	bl	1bb84 <z_spin_unlock_valid>
   1c0a6:	b940      	cbnz	r0, 1c0ba <z_get_next_timeout_expiry+0x52>
   1c0a8:	4908      	ldr	r1, [pc, #32]	; (1c0cc <z_get_next_timeout_expiry+0x64>)
   1c0aa:	4809      	ldr	r0, [pc, #36]	; (1c0d0 <z_get_next_timeout_expiry+0x68>)
   1c0ac:	22a7      	movs	r2, #167	; 0xa7
   1c0ae:	f000 fd2f 	bl	1cb10 <printk>
   1c0b2:	21a7      	movs	r1, #167	; 0xa7
   1c0b4:	4805      	ldr	r0, [pc, #20]	; (1c0cc <z_get_next_timeout_expiry+0x64>)
   1c0b6:	f000 ffd1 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c0ba:	f385 8811 	msr	BASEPRI, r5
   1c0be:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1c0c2:	4620      	mov	r0, r4
   1c0c4:	bd38      	pop	{r3, r4, r5, pc}
   1c0c6:	bf00      	nop
   1c0c8:	2000a014 	.word	0x2000a014
   1c0cc:	00022f51 	.word	0x00022f51
   1c0d0:	00022f17 	.word	0x00022f17

0001c0d4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1c0d4:	b570      	push	{r4, r5, r6, lr}
   1c0d6:	4604      	mov	r4, r0
   1c0d8:	460d      	mov	r5, r1
	__asm__ volatile(
   1c0da:	f04f 0320 	mov.w	r3, #32
   1c0de:	f3ef 8611 	mrs	r6, BASEPRI
   1c0e2:	f383 8811 	msr	BASEPRI, r3
   1c0e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c0ea:	4816      	ldr	r0, [pc, #88]	; (1c144 <z_set_timeout_expiry+0x70>)
   1c0ec:	f7ff fd3c 	bl	1bb68 <z_spin_lock_valid>
   1c0f0:	b940      	cbnz	r0, 1c104 <z_set_timeout_expiry+0x30>
   1c0f2:	4915      	ldr	r1, [pc, #84]	; (1c148 <z_set_timeout_expiry+0x74>)
   1c0f4:	4815      	ldr	r0, [pc, #84]	; (1c14c <z_set_timeout_expiry+0x78>)
   1c0f6:	227c      	movs	r2, #124	; 0x7c
   1c0f8:	f000 fd0a 	bl	1cb10 <printk>
   1c0fc:	217c      	movs	r1, #124	; 0x7c
   1c0fe:	4812      	ldr	r0, [pc, #72]	; (1c148 <z_set_timeout_expiry+0x74>)
   1c100:	f000 ffac 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c104:	480f      	ldr	r0, [pc, #60]	; (1c144 <z_set_timeout_expiry+0x70>)
   1c106:	f7ff fd4b 	bl	1bba0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1c10a:	f7ff fe7f 	bl	1be0c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c10e:	2801      	cmp	r0, #1
   1c110:	dd05      	ble.n	1c11e <z_set_timeout_expiry+0x4a>
   1c112:	42a0      	cmp	r0, r4
   1c114:	dd03      	ble.n	1c11e <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   1c116:	4629      	mov	r1, r5
   1c118:	4620      	mov	r0, r4
   1c11a:	f7f0 fbb9 	bl	c890 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c11e:	4809      	ldr	r0, [pc, #36]	; (1c144 <z_set_timeout_expiry+0x70>)
   1c120:	f7ff fd30 	bl	1bb84 <z_spin_unlock_valid>
   1c124:	b940      	cbnz	r0, 1c138 <z_set_timeout_expiry+0x64>
   1c126:	4908      	ldr	r1, [pc, #32]	; (1c148 <z_set_timeout_expiry+0x74>)
   1c128:	4808      	ldr	r0, [pc, #32]	; (1c14c <z_set_timeout_expiry+0x78>)
   1c12a:	22a7      	movs	r2, #167	; 0xa7
   1c12c:	f000 fcf0 	bl	1cb10 <printk>
   1c130:	21a7      	movs	r1, #167	; 0xa7
   1c132:	4805      	ldr	r0, [pc, #20]	; (1c148 <z_set_timeout_expiry+0x74>)
   1c134:	f000 ff92 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c138:	f386 8811 	msr	BASEPRI, r6
   1c13c:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c140:	bd70      	pop	{r4, r5, r6, pc}
   1c142:	bf00      	nop
   1c144:	2000a014 	.word	0x2000a014
   1c148:	00022f51 	.word	0x00022f51
   1c14c:	00022f17 	.word	0x00022f17

0001c150 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   1c150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c154:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c156:	f7fe fe61 	bl	1ae1c <z_time_slice>
	__asm__ volatile(
   1c15a:	f04f 0320 	mov.w	r3, #32
   1c15e:	f3ef 8511 	mrs	r5, BASEPRI
   1c162:	f383 8811 	msr	BASEPRI, r3
   1c166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c16a:	4842      	ldr	r0, [pc, #264]	; (1c274 <z_clock_announce+0x124>)
   1c16c:	f7ff fcfc 	bl	1bb68 <z_spin_lock_valid>
   1c170:	b940      	cbnz	r0, 1c184 <z_clock_announce+0x34>
   1c172:	4941      	ldr	r1, [pc, #260]	; (1c278 <z_clock_announce+0x128>)
   1c174:	4841      	ldr	r0, [pc, #260]	; (1c27c <z_clock_announce+0x12c>)
   1c176:	227c      	movs	r2, #124	; 0x7c
   1c178:	f000 fcca 	bl	1cb10 <printk>
   1c17c:	217c      	movs	r1, #124	; 0x7c
   1c17e:	483e      	ldr	r0, [pc, #248]	; (1c278 <z_clock_announce+0x128>)
   1c180:	f000 ff6c 	bl	1d05c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c184:	4f3e      	ldr	r7, [pc, #248]	; (1c280 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1c186:	483b      	ldr	r0, [pc, #236]	; (1c274 <z_clock_announce+0x124>)
	return list->head == list;
   1c188:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1c284 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1c18c:	4e3e      	ldr	r6, [pc, #248]	; (1c288 <z_clock_announce+0x138>)
   1c18e:	f7ff fd07 	bl	1bba0 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1c192:	603c      	str	r4, [r7, #0]
   1c194:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c198:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c19a:	4544      	cmp	r4, r8
   1c19c:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   1c1a0:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1c1a4:	d00b      	beq.n	1c1be <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c1a6:	b154      	cbz	r4, 1c1be <z_clock_announce+0x6e>
   1c1a8:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1c1ac:	429a      	cmp	r2, r3
   1c1ae:	eb70 090c 	sbcs.w	r9, r0, ip
   1c1b2:	da23      	bge.n	1c1fc <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c1b4:	1a9b      	subs	r3, r3, r2
   1c1b6:	eb6c 0c00 	sbc.w	ip, ip, r0
   1c1ba:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1c1be:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c1c0:	1852      	adds	r2, r2, r1
   1c1c2:	eb4e 0000 	adc.w	r0, lr, r0
   1c1c6:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1c1ca:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c1cc:	f7ff fe1e 	bl	1be0c <next_timeout>
   1c1d0:	4621      	mov	r1, r4
   1c1d2:	f7f0 fb5d 	bl	c890 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c1d6:	4827      	ldr	r0, [pc, #156]	; (1c274 <z_clock_announce+0x124>)
   1c1d8:	f7ff fcd4 	bl	1bb84 <z_spin_unlock_valid>
   1c1dc:	b940      	cbnz	r0, 1c1f0 <z_clock_announce+0xa0>
   1c1de:	4926      	ldr	r1, [pc, #152]	; (1c278 <z_clock_announce+0x128>)
   1c1e0:	4826      	ldr	r0, [pc, #152]	; (1c27c <z_clock_announce+0x12c>)
   1c1e2:	22a7      	movs	r2, #167	; 0xa7
   1c1e4:	f000 fc94 	bl	1cb10 <printk>
   1c1e8:	21a7      	movs	r1, #167	; 0xa7
   1c1ea:	4823      	ldr	r0, [pc, #140]	; (1c278 <z_clock_announce+0x128>)
   1c1ec:	f000 ff36 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c1f0:	f385 8811 	msr	BASEPRI, r5
   1c1f4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1c1fc:	1859      	adds	r1, r3, r1
   1c1fe:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   1c202:	1ad3      	subs	r3, r2, r3
   1c204:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   1c206:	2200      	movs	r2, #0
   1c208:	2300      	movs	r3, #0
		curr_tick += dt;
   1c20a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1c20e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1c212:	4620      	mov	r0, r4
   1c214:	f7ff fe22 	bl	1be5c <remove_timeout>
   1c218:	4816      	ldr	r0, [pc, #88]	; (1c274 <z_clock_announce+0x124>)
   1c21a:	f7ff fcb3 	bl	1bb84 <z_spin_unlock_valid>
   1c21e:	b940      	cbnz	r0, 1c232 <z_clock_announce+0xe2>
   1c220:	4915      	ldr	r1, [pc, #84]	; (1c278 <z_clock_announce+0x128>)
   1c222:	4816      	ldr	r0, [pc, #88]	; (1c27c <z_clock_announce+0x12c>)
   1c224:	22a7      	movs	r2, #167	; 0xa7
   1c226:	f000 fc73 	bl	1cb10 <printk>
   1c22a:	21a7      	movs	r1, #167	; 0xa7
   1c22c:	4812      	ldr	r0, [pc, #72]	; (1c278 <z_clock_announce+0x128>)
   1c22e:	f000 ff15 	bl	1d05c <assert_post_action>
   1c232:	f385 8811 	msr	BASEPRI, r5
   1c236:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c23a:	4620      	mov	r0, r4
   1c23c:	68a3      	ldr	r3, [r4, #8]
   1c23e:	4798      	blx	r3
	__asm__ volatile(
   1c240:	f04f 0320 	mov.w	r3, #32
   1c244:	f3ef 8511 	mrs	r5, BASEPRI
   1c248:	f383 8811 	msr	BASEPRI, r3
   1c24c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c250:	4808      	ldr	r0, [pc, #32]	; (1c274 <z_clock_announce+0x124>)
   1c252:	f7ff fc89 	bl	1bb68 <z_spin_lock_valid>
   1c256:	b940      	cbnz	r0, 1c26a <z_clock_announce+0x11a>
   1c258:	4907      	ldr	r1, [pc, #28]	; (1c278 <z_clock_announce+0x128>)
   1c25a:	4808      	ldr	r0, [pc, #32]	; (1c27c <z_clock_announce+0x12c>)
   1c25c:	227c      	movs	r2, #124	; 0x7c
   1c25e:	f000 fc57 	bl	1cb10 <printk>
   1c262:	217c      	movs	r1, #124	; 0x7c
   1c264:	4804      	ldr	r0, [pc, #16]	; (1c278 <z_clock_announce+0x128>)
   1c266:	f000 fef9 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c26a:	4802      	ldr	r0, [pc, #8]	; (1c274 <z_clock_announce+0x124>)
   1c26c:	f7ff fc98 	bl	1bba0 <z_spin_lock_set_owner>
	return k;
   1c270:	e790      	b.n	1c194 <z_clock_announce+0x44>
   1c272:	bf00      	nop
   1c274:	2000a014 	.word	0x2000a014
   1c278:	00022f51 	.word	0x00022f51
   1c27c:	00022f17 	.word	0x00022f17
   1c280:	2000a010 	.word	0x2000a010
   1c284:	20008418 	.word	0x20008418
   1c288:	200096e8 	.word	0x200096e8

0001c28c <z_tick_get>:

int64_t z_tick_get(void)
{
   1c28c:	b570      	push	{r4, r5, r6, lr}
   1c28e:	f04f 0320 	mov.w	r3, #32
   1c292:	f3ef 8611 	mrs	r6, BASEPRI
   1c296:	f383 8811 	msr	BASEPRI, r3
   1c29a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c29e:	4816      	ldr	r0, [pc, #88]	; (1c2f8 <z_tick_get+0x6c>)
   1c2a0:	f7ff fc62 	bl	1bb68 <z_spin_lock_valid>
   1c2a4:	b940      	cbnz	r0, 1c2b8 <z_tick_get+0x2c>
   1c2a6:	4915      	ldr	r1, [pc, #84]	; (1c2fc <z_tick_get+0x70>)
   1c2a8:	4815      	ldr	r0, [pc, #84]	; (1c300 <z_tick_get+0x74>)
   1c2aa:	227c      	movs	r2, #124	; 0x7c
   1c2ac:	f000 fc30 	bl	1cb10 <printk>
   1c2b0:	217c      	movs	r1, #124	; 0x7c
   1c2b2:	4812      	ldr	r0, [pc, #72]	; (1c2fc <z_tick_get+0x70>)
   1c2b4:	f000 fed2 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c2b8:	480f      	ldr	r0, [pc, #60]	; (1c2f8 <z_tick_get+0x6c>)
   1c2ba:	f7ff fc71 	bl	1bba0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c2be:	f7f0 fb19 	bl	c8f4 <z_clock_elapsed>
   1c2c2:	4b10      	ldr	r3, [pc, #64]	; (1c304 <z_tick_get+0x78>)
   1c2c4:	e9d3 4500 	ldrd	r4, r5, [r3]
   1c2c8:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2ca:	480b      	ldr	r0, [pc, #44]	; (1c2f8 <z_tick_get+0x6c>)
   1c2cc:	f145 0500 	adc.w	r5, r5, #0
   1c2d0:	f7ff fc58 	bl	1bb84 <z_spin_unlock_valid>
   1c2d4:	b940      	cbnz	r0, 1c2e8 <z_tick_get+0x5c>
   1c2d6:	4909      	ldr	r1, [pc, #36]	; (1c2fc <z_tick_get+0x70>)
   1c2d8:	4809      	ldr	r0, [pc, #36]	; (1c300 <z_tick_get+0x74>)
   1c2da:	22a7      	movs	r2, #167	; 0xa7
   1c2dc:	f000 fc18 	bl	1cb10 <printk>
   1c2e0:	21a7      	movs	r1, #167	; 0xa7
   1c2e2:	4806      	ldr	r0, [pc, #24]	; (1c2fc <z_tick_get+0x70>)
   1c2e4:	f000 feba 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c2e8:	f386 8811 	msr	BASEPRI, r6
   1c2ec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	4629      	mov	r1, r5
   1c2f4:	bd70      	pop	{r4, r5, r6, pc}
   1c2f6:	bf00      	nop
   1c2f8:	2000a014 	.word	0x2000a014
   1c2fc:	00022f51 	.word	0x00022f51
   1c300:	00022f17 	.word	0x00022f17
   1c304:	200096e8 	.word	0x200096e8

0001c308 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1c308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1c30c:	6884      	ldr	r4, [r0, #8]
{
   1c30e:	4605      	mov	r5, r0
   1c310:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1c312:	b1b4      	cbz	r4, 1c342 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1c314:	7863      	ldrb	r3, [r4, #1]
   1c316:	2b01      	cmp	r3, #1
   1c318:	d145      	bne.n	1c3a6 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1c31a:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1c31e:	d10a      	bne.n	1c336 <signal_poll_event+0x2e>
   1c320:	22e3      	movs	r2, #227	; 0xe3
   1c322:	492d      	ldr	r1, [pc, #180]	; (1c3d8 <signal_poll_event+0xd0>)
   1c324:	482d      	ldr	r0, [pc, #180]	; (1c3dc <signal_poll_event+0xd4>)
   1c326:	f000 fbf3 	bl	1cb10 <printk>
   1c32a:	21e3      	movs	r1, #227	; 0xe3
   1c32c:	482a      	ldr	r0, [pc, #168]	; (1c3d8 <signal_poll_event+0xd0>)
   1c32e:	f000 fe95 	bl	1d05c <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1c332:	7b7b      	ldrb	r3, [r7, #13]
   1c334:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1c336:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1c33a:	f013 0302 	ands.w	r3, r3, #2
   1c33e:	d10a      	bne.n	1c356 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1c340:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1c342:	2000      	movs	r0, #0
	event->state |= state;
   1c344:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1c346:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1c348:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1c34c:	430e      	orrs	r6, r1
   1c34e:	f366 3310 	bfi	r3, r6, #12, #5
   1c352:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1c354:	e00b      	b.n	1c36e <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1c356:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1c35a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c35e:	bf08      	it	eq
   1c360:	f112 0f02 	cmneq.w	r2, #2
   1c364:	d105      	bne.n	1c372 <signal_poll_event+0x6a>
		poller->is_polling = false;
   1c366:	2300      	movs	r3, #0
		return -EAGAIN;
   1c368:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1c36c:	7023      	strb	r3, [r4, #0]
}
   1c36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1c372:	4638      	mov	r0, r7
   1c374:	f7fe fb30 	bl	1a9d8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c378:	2e08      	cmp	r6, #8
   1c37a:	bf0c      	ite	eq
   1c37c:	f06f 0303 	mvneq.w	r3, #3
   1c380:	2300      	movne	r3, #0
   1c382:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c384:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1c388:	06db      	lsls	r3, r3, #27
   1c38a:	d104      	bne.n	1c396 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1c38c:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1c390:	f1b8 0f00 	cmp.w	r8, #0
   1c394:	d001      	beq.n	1c39a <signal_poll_event+0x92>
		poller->is_polling = false;
   1c396:	2300      	movs	r3, #0
   1c398:	e7d2      	b.n	1c340 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1c39a:	4638      	mov	r0, r7
   1c39c:	f7fe fc36 	bl	1ac0c <z_ready_thread>
		poller->is_polling = false;
   1c3a0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1c3a4:	e7cd      	b.n	1c342 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c3a6:	2b02      	cmp	r3, #2
   1c3a8:	d1f5      	bne.n	1c396 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c3aa:	7823      	ldrb	r3, [r4, #0]
   1c3ac:	2b00      	cmp	r3, #0
   1c3ae:	d0c8      	beq.n	1c342 <signal_poll_event+0x3a>
   1c3b0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1c3b4:	b177      	cbz	r7, 1c3d4 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1c3b6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1c3ba:	f1a4 0910 	sub.w	r9, r4, #16
   1c3be:	f104 0010 	add.w	r0, r4, #16
   1c3c2:	f7ff fe15 	bl	1bff0 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1c3c6:	4649      	mov	r1, r9
   1c3c8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1c3ca:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1c3ce:	f005 f9b0 	bl	21732 <k_work_submit_to_queue>
   1c3d2:	e7e5      	b.n	1c3a0 <signal_poll_event+0x98>
		poller->is_polling = false;
   1c3d4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1c3d6:	e7b4      	b.n	1c342 <signal_poll_event+0x3a>
   1c3d8:	000265c7 	.word	0x000265c7
   1c3dc:	00022f17 	.word	0x00022f17

0001c3e0 <register_events>:
{
   1c3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1c3e4:	2600      	movs	r6, #0
{
   1c3e6:	4614      	mov	r4, r2
   1c3e8:	4681      	mov	r9, r0
	int events_registered = 0;
   1c3ea:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c3ec:	f8df a188 	ldr.w	sl, [pc, #392]	; 1c578 <register_events+0x198>
   1c3f0:	4f62      	ldr	r7, [pc, #392]	; (1c57c <register_events+0x19c>)
   1c3f2:	4d63      	ldr	r5, [pc, #396]	; (1c580 <register_events+0x1a0>)
{
   1c3f4:	9100      	str	r1, [sp, #0]
   1c3f6:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1c3f8:	9b00      	ldr	r3, [sp, #0]
   1c3fa:	429e      	cmp	r6, r3
   1c3fc:	db03      	blt.n	1c406 <register_events+0x26>
}
   1c3fe:	4640      	mov	r0, r8
   1c400:	b003      	add	sp, #12
   1c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1c406:	f04f 0220 	mov.w	r2, #32
   1c40a:	f3ef 8b11 	mrs	fp, BASEPRI
   1c40e:	f382 8811 	msr	BASEPRI, r2
   1c412:	f3bf 8f6f 	isb	sy
   1c416:	4650      	mov	r0, sl
   1c418:	f7ff fba6 	bl	1bb68 <z_spin_lock_valid>
   1c41c:	b940      	cbnz	r0, 1c430 <register_events+0x50>
   1c41e:	4639      	mov	r1, r7
   1c420:	4628      	mov	r0, r5
   1c422:	227c      	movs	r2, #124	; 0x7c
   1c424:	f000 fb74 	bl	1cb10 <printk>
   1c428:	217c      	movs	r1, #124	; 0x7c
   1c42a:	4638      	mov	r0, r7
   1c42c:	f000 fe16 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c430:	4650      	mov	r0, sl
   1c432:	f7ff fbb5 	bl	1bba0 <z_spin_lock_set_owner>
	switch (event->type) {
   1c436:	f899 200d 	ldrb.w	r2, [r9, #13]
   1c43a:	f002 020f 	and.w	r2, r2, #15
   1c43e:	2a04      	cmp	r2, #4
   1c440:	d848      	bhi.n	1c4d4 <register_events+0xf4>
   1c442:	e8df f002 	tbb	[pc, r2]
   1c446:	402f      	.short	0x402f
   1c448:	4703      	.short	0x4703
   1c44a:	2b          	.byte	0x2b
   1c44b:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1c44c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c450:	6892      	ldr	r2, [r2, #8]
   1c452:	b33a      	cbz	r2, 1c4a4 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c454:	2102      	movs	r1, #2
	event->poller = NULL;
   1c456:	2000      	movs	r0, #0
	event->state |= state;
   1c458:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1c45c:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1c460:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1c464:	ea41 010c 	orr.w	r1, r1, ip
   1c468:	f361 3210 	bfi	r2, r1, #12, #5
   1c46c:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1c470:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c472:	4650      	mov	r0, sl
   1c474:	f7ff fb86 	bl	1bb84 <z_spin_unlock_valid>
   1c478:	b940      	cbnz	r0, 1c48c <register_events+0xac>
   1c47a:	4639      	mov	r1, r7
   1c47c:	4628      	mov	r0, r5
   1c47e:	22a7      	movs	r2, #167	; 0xa7
   1c480:	f000 fb46 	bl	1cb10 <printk>
   1c484:	21a7      	movs	r1, #167	; 0xa7
   1c486:	4638      	mov	r0, r7
   1c488:	f000 fde8 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c48c:	f38b 8811 	msr	BASEPRI, fp
   1c490:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c494:	3601      	adds	r6, #1
   1c496:	f109 0914 	add.w	r9, r9, #20
   1c49a:	e7ad      	b.n	1c3f8 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1c49c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c4a0:	6812      	ldr	r2, [r2, #0]
   1c4a2:	bb0a      	cbnz	r2, 1c4e8 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1c4a4:	9b01      	ldr	r3, [sp, #4]
   1c4a6:	2b00      	cmp	r3, #0
   1c4a8:	d1e3      	bne.n	1c472 <register_events+0x92>
   1c4aa:	7822      	ldrb	r2, [r4, #0]
   1c4ac:	2a00      	cmp	r2, #0
   1c4ae:	d0e0      	beq.n	1c472 <register_events+0x92>
	switch (event->type) {
   1c4b0:	f899 200d 	ldrb.w	r2, [r9, #13]
   1c4b4:	f002 020f 	and.w	r2, r2, #15
   1c4b8:	2a04      	cmp	r2, #4
   1c4ba:	d852      	bhi.n	1c562 <register_events+0x182>
   1c4bc:	e8df f002 	tbb	[pc, r2]
   1c4c0:	51164029 	.word	0x51164029
   1c4c4:	2e          	.byte	0x2e
   1c4c5:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1c4c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c4ca:	6892      	ldr	r2, [r2, #8]
   1c4cc:	2a00      	cmp	r2, #0
   1c4ce:	d0e9      	beq.n	1c4a4 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1c4d0:	2101      	movs	r1, #1
   1c4d2:	e7c0      	b.n	1c456 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1c4d4:	4628      	mov	r0, r5
   1c4d6:	2254      	movs	r2, #84	; 0x54
   1c4d8:	492a      	ldr	r1, [pc, #168]	; (1c584 <register_events+0x1a4>)
   1c4da:	f000 fb19 	bl	1cb10 <printk>
   1c4de:	2154      	movs	r1, #84	; 0x54
   1c4e0:	4828      	ldr	r0, [pc, #160]	; (1c584 <register_events+0x1a4>)
   1c4e2:	f000 fdbb 	bl	1d05c <assert_post_action>
		break;
   1c4e6:	e7dd      	b.n	1c4a4 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c4e8:	2104      	movs	r1, #4
   1c4ea:	e7b4      	b.n	1c456 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c4ec:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c4f0:	b942      	cbnz	r2, 1c504 <register_events+0x124>
   1c4f2:	4628      	mov	r0, r5
   1c4f4:	4923      	ldr	r1, [pc, #140]	; (1c584 <register_events+0x1a4>)
   1c4f6:	227e      	movs	r2, #126	; 0x7e
   1c4f8:	f000 fb0a 	bl	1cb10 <printk>
   1c4fc:	217e      	movs	r1, #126	; 0x7e
   1c4fe:	4821      	ldr	r0, [pc, #132]	; (1c584 <register_events+0x1a4>)
   1c500:	f000 fdac 	bl	1d05c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1c504:	4622      	mov	r2, r4
   1c506:	4649      	mov	r1, r9
   1c508:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c50c:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1c50e:	f005 f924 	bl	2175a <add_event>
	event->poller = poller;
   1c512:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1c516:	f108 0801 	add.w	r8, r8, #1
   1c51a:	e7aa      	b.n	1c472 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c51c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c520:	b942      	cbnz	r2, 1c534 <register_events+0x154>
   1c522:	4628      	mov	r0, r5
   1c524:	4917      	ldr	r1, [pc, #92]	; (1c584 <register_events+0x1a4>)
   1c526:	2282      	movs	r2, #130	; 0x82
   1c528:	f000 faf2 	bl	1cb10 <printk>
   1c52c:	2182      	movs	r1, #130	; 0x82
   1c52e:	4815      	ldr	r0, [pc, #84]	; (1c584 <register_events+0x1a4>)
   1c530:	f000 fd94 	bl	1d05c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1c534:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c538:	4622      	mov	r2, r4
   1c53a:	4649      	mov	r1, r9
   1c53c:	3014      	adds	r0, #20
   1c53e:	e7e6      	b.n	1c50e <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c540:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c544:	b942      	cbnz	r2, 1c558 <register_events+0x178>
   1c546:	4628      	mov	r0, r5
   1c548:	490e      	ldr	r1, [pc, #56]	; (1c584 <register_events+0x1a4>)
   1c54a:	2286      	movs	r2, #134	; 0x86
   1c54c:	f000 fae0 	bl	1cb10 <printk>
   1c550:	2186      	movs	r1, #134	; 0x86
   1c552:	480c      	ldr	r0, [pc, #48]	; (1c584 <register_events+0x1a4>)
   1c554:	f000 fd82 	bl	1d05c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1c558:	4622      	mov	r2, r4
   1c55a:	4649      	mov	r1, r9
   1c55c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c560:	e7d5      	b.n	1c50e <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1c562:	4628      	mov	r0, r5
   1c564:	228d      	movs	r2, #141	; 0x8d
   1c566:	4907      	ldr	r1, [pc, #28]	; (1c584 <register_events+0x1a4>)
   1c568:	f000 fad2 	bl	1cb10 <printk>
   1c56c:	218d      	movs	r1, #141	; 0x8d
   1c56e:	4805      	ldr	r0, [pc, #20]	; (1c584 <register_events+0x1a4>)
   1c570:	f000 fd74 	bl	1d05c <assert_post_action>
		break;
   1c574:	e7cd      	b.n	1c512 <register_events+0x132>
   1c576:	bf00      	nop
   1c578:	2000a018 	.word	0x2000a018
   1c57c:	00022f51 	.word	0x00022f51
   1c580:	00022f17 	.word	0x00022f17
   1c584:	000265c7 	.word	0x000265c7

0001c588 <clear_event_registrations>:
{
   1c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c58c:	2414      	movs	r4, #20
   1c58e:	4617      	mov	r7, r2
	while (num_events--) {
   1c590:	460e      	mov	r6, r1
   1c592:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1c596:	4d3d      	ldr	r5, [pc, #244]	; (1c68c <clear_event_registrations+0x104>)
   1c598:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c690 <clear_event_registrations+0x108>
   1c59c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1c694 <clear_event_registrations+0x10c>
	while (num_events--) {
   1c5a0:	b90e      	cbnz	r6, 1c5a6 <clear_event_registrations+0x1e>
}
   1c5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1c5a6:	2300      	movs	r3, #0
   1c5a8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c5ac:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c5b0:	f1a4 0a14 	sub.w	sl, r4, #20
   1c5b4:	f003 030f 	and.w	r3, r3, #15
   1c5b8:	2b04      	cmp	r3, #4
   1c5ba:	d831      	bhi.n	1c620 <clear_event_registrations+0x98>
   1c5bc:	e8df f003 	tbb	[pc, r3]
   1c5c0:	30032539 	.word	0x30032539
   1c5c4:	1a          	.byte	0x1a
   1c5c5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c5c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c5ca:	b943      	cbnz	r3, 1c5de <clear_event_registrations+0x56>
   1c5cc:	4629      	mov	r1, r5
   1c5ce:	229d      	movs	r2, #157	; 0x9d
   1c5d0:	4640      	mov	r0, r8
   1c5d2:	f000 fa9d 	bl	1cb10 <printk>
   1c5d6:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c5d8:	4628      	mov	r0, r5
   1c5da:	f000 fd3f 	bl	1d05c <assert_post_action>
	return node->next != NULL;
   1c5de:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1c5e2:	b333      	cbz	r3, 1c632 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1c5e4:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1c5e8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c5ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c5ec:	2300      	movs	r3, #0
	node->prev = NULL;
   1c5ee:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1c5f2:	e01e      	b.n	1c632 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c5f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c5f8:	2b00      	cmp	r3, #0
   1c5fa:	d1f0      	bne.n	1c5de <clear_event_registrations+0x56>
   1c5fc:	4629      	mov	r1, r5
   1c5fe:	22a1      	movs	r2, #161	; 0xa1
   1c600:	4640      	mov	r0, r8
   1c602:	f000 fa85 	bl	1cb10 <printk>
   1c606:	21a1      	movs	r1, #161	; 0xa1
   1c608:	e7e6      	b.n	1c5d8 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c60a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c60e:	2b00      	cmp	r3, #0
   1c610:	d1e5      	bne.n	1c5de <clear_event_registrations+0x56>
   1c612:	4629      	mov	r1, r5
   1c614:	22a5      	movs	r2, #165	; 0xa5
   1c616:	4640      	mov	r0, r8
   1c618:	f000 fa7a 	bl	1cb10 <printk>
   1c61c:	21a5      	movs	r1, #165	; 0xa5
   1c61e:	e7db      	b.n	1c5d8 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1c620:	4629      	mov	r1, r5
   1c622:	4640      	mov	r0, r8
   1c624:	22ac      	movs	r2, #172	; 0xac
   1c626:	f000 fa73 	bl	1cb10 <printk>
   1c62a:	21ac      	movs	r1, #172	; 0xac
   1c62c:	4628      	mov	r0, r5
   1c62e:	f000 fd15 	bl	1d05c <assert_post_action>
   1c632:	4648      	mov	r0, r9
   1c634:	f7ff faa6 	bl	1bb84 <z_spin_unlock_valid>
   1c638:	b940      	cbnz	r0, 1c64c <clear_event_registrations+0xc4>
   1c63a:	4640      	mov	r0, r8
   1c63c:	4916      	ldr	r1, [pc, #88]	; (1c698 <clear_event_registrations+0x110>)
   1c63e:	22a7      	movs	r2, #167	; 0xa7
   1c640:	f000 fa66 	bl	1cb10 <printk>
   1c644:	21a7      	movs	r1, #167	; 0xa7
   1c646:	4814      	ldr	r0, [pc, #80]	; (1c698 <clear_event_registrations+0x110>)
   1c648:	f000 fd08 	bl	1d05c <assert_post_action>
   1c64c:	f387 8811 	msr	BASEPRI, r7
   1c650:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c654:	f04f 0320 	mov.w	r3, #32
   1c658:	f3ef 8711 	mrs	r7, BASEPRI
   1c65c:	f383 8811 	msr	BASEPRI, r3
   1c660:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c664:	4648      	mov	r0, r9
   1c666:	f7ff fa7f 	bl	1bb68 <z_spin_lock_valid>
   1c66a:	b940      	cbnz	r0, 1c67e <clear_event_registrations+0xf6>
   1c66c:	4640      	mov	r0, r8
   1c66e:	490a      	ldr	r1, [pc, #40]	; (1c698 <clear_event_registrations+0x110>)
   1c670:	227c      	movs	r2, #124	; 0x7c
   1c672:	f000 fa4d 	bl	1cb10 <printk>
   1c676:	217c      	movs	r1, #124	; 0x7c
   1c678:	4807      	ldr	r0, [pc, #28]	; (1c698 <clear_event_registrations+0x110>)
   1c67a:	f000 fcef 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c67e:	4648      	mov	r0, r9
   1c680:	f7ff fa8e 	bl	1bba0 <z_spin_lock_set_owner>
	return k;
   1c684:	4654      	mov	r4, sl
   1c686:	3e01      	subs	r6, #1
   1c688:	e78a      	b.n	1c5a0 <clear_event_registrations+0x18>
   1c68a:	bf00      	nop
   1c68c:	000265c7 	.word	0x000265c7
   1c690:	00022f17 	.word	0x00022f17
   1c694:	2000a018 	.word	0x2000a018
   1c698:	00022f51 	.word	0x00022f51

0001c69c <k_poll_event_init>:
{
   1c69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c69e:	4605      	mov	r5, r0
   1c6a0:	460f      	mov	r7, r1
   1c6a2:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c6a4:	4614      	mov	r4, r2
   1c6a6:	b142      	cbz	r2, 1c6ba <k_poll_event_init+0x1e>
   1c6a8:	4915      	ldr	r1, [pc, #84]	; (1c700 <k_poll_event_init+0x64>)
   1c6aa:	4816      	ldr	r0, [pc, #88]	; (1c704 <k_poll_event_init+0x68>)
   1c6ac:	222d      	movs	r2, #45	; 0x2d
   1c6ae:	f000 fa2f 	bl	1cb10 <printk>
   1c6b2:	212d      	movs	r1, #45	; 0x2d
   1c6b4:	4812      	ldr	r0, [pc, #72]	; (1c700 <k_poll_event_init+0x64>)
   1c6b6:	f000 fcd1 	bl	1d05c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c6ba:	2f0f      	cmp	r7, #15
   1c6bc:	d908      	bls.n	1c6d0 <k_poll_event_init+0x34>
   1c6be:	4910      	ldr	r1, [pc, #64]	; (1c700 <k_poll_event_init+0x64>)
   1c6c0:	4810      	ldr	r0, [pc, #64]	; (1c704 <k_poll_event_init+0x68>)
   1c6c2:	222f      	movs	r2, #47	; 0x2f
   1c6c4:	f000 fa24 	bl	1cb10 <printk>
   1c6c8:	212f      	movs	r1, #47	; 0x2f
   1c6ca:	480d      	ldr	r0, [pc, #52]	; (1c700 <k_poll_event_init+0x64>)
   1c6cc:	f000 fcc6 	bl	1d05c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c6d0:	b946      	cbnz	r6, 1c6e4 <k_poll_event_init+0x48>
   1c6d2:	490b      	ldr	r1, [pc, #44]	; (1c700 <k_poll_event_init+0x64>)
   1c6d4:	480b      	ldr	r0, [pc, #44]	; (1c704 <k_poll_event_init+0x68>)
   1c6d6:	2230      	movs	r2, #48	; 0x30
   1c6d8:	f000 fa1a 	bl	1cb10 <printk>
   1c6dc:	2130      	movs	r1, #48	; 0x30
   1c6de:	4808      	ldr	r0, [pc, #32]	; (1c700 <k_poll_event_init+0x64>)
   1c6e0:	f000 fcbc 	bl	1d05c <assert_post_action>
	event->poller = NULL;
   1c6e4:	2300      	movs	r3, #0
	event->type = type;
   1c6e6:	0464      	lsls	r4, r4, #17
   1c6e8:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1c6ea:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1c6ec:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1c6f0:	7b2b      	ldrb	r3, [r5, #12]
   1c6f2:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1c6f6:	433c      	orrs	r4, r7
   1c6f8:	431c      	orrs	r4, r3
	event->obj = obj;
   1c6fa:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1c6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c700:	000265c7 	.word	0x000265c7
   1c704:	00022f17 	.word	0x00022f17

0001c708 <z_impl_k_poll>:
{
   1c708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c70c:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1c70e:	4b64      	ldr	r3, [pc, #400]	; (1c8a0 <z_impl_k_poll+0x198>)
{
   1c710:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1c712:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1c714:	2301      	movs	r3, #1
{
   1c716:	4688      	mov	r8, r1
   1c718:	4616      	mov	r6, r2
   1c71a:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1c71c:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1c720:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1c724:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1c728:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c72c:	b153      	cbz	r3, 1c744 <z_impl_k_poll+0x3c>
   1c72e:	495d      	ldr	r1, [pc, #372]	; (1c8a4 <z_impl_k_poll+0x19c>)
   1c730:	485d      	ldr	r0, [pc, #372]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c732:	f44f 7282 	mov.w	r2, #260	; 0x104
   1c736:	f000 f9eb 	bl	1cb10 <printk>
   1c73a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1c73e:	4859      	ldr	r0, [pc, #356]	; (1c8a4 <z_impl_k_poll+0x19c>)
   1c740:	f000 fc8c 	bl	1d05c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1c744:	b954      	cbnz	r4, 1c75c <z_impl_k_poll+0x54>
   1c746:	4957      	ldr	r1, [pc, #348]	; (1c8a4 <z_impl_k_poll+0x19c>)
   1c748:	4857      	ldr	r0, [pc, #348]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c74a:	f240 1205 	movw	r2, #261	; 0x105
   1c74e:	f000 f9df 	bl	1cb10 <printk>
   1c752:	f240 1105 	movw	r1, #261	; 0x105
   1c756:	4853      	ldr	r0, [pc, #332]	; (1c8a4 <z_impl_k_poll+0x19c>)
   1c758:	f000 fc80 	bl	1d05c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1c75c:	f1b8 0f00 	cmp.w	r8, #0
   1c760:	da0a      	bge.n	1c778 <z_impl_k_poll+0x70>
   1c762:	4950      	ldr	r1, [pc, #320]	; (1c8a4 <z_impl_k_poll+0x19c>)
   1c764:	4850      	ldr	r0, [pc, #320]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c766:	f44f 7283 	mov.w	r2, #262	; 0x106
   1c76a:	f000 f9d1 	bl	1cb10 <printk>
   1c76e:	f44f 7183 	mov.w	r1, #262	; 0x106
   1c772:	484c      	ldr	r0, [pc, #304]	; (1c8a4 <z_impl_k_poll+0x19c>)
   1c774:	f000 fc72 	bl	1d05c <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1c778:	ea56 0305 	orrs.w	r3, r6, r5
   1c77c:	bf0c      	ite	eq
   1c77e:	2301      	moveq	r3, #1
   1c780:	2300      	movne	r3, #0
   1c782:	4641      	mov	r1, r8
   1c784:	464a      	mov	r2, r9
   1c786:	4620      	mov	r0, r4
   1c788:	f7ff fe2a 	bl	1c3e0 <register_events>
   1c78c:	4680      	mov	r8, r0
   1c78e:	f04f 0320 	mov.w	r3, #32
   1c792:	f3ef 8911 	mrs	r9, BASEPRI
   1c796:	f383 8811 	msr	BASEPRI, r3
   1c79a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c79e:	4843      	ldr	r0, [pc, #268]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c7a0:	f7ff f9e2 	bl	1bb68 <z_spin_lock_valid>
   1c7a4:	b940      	cbnz	r0, 1c7b8 <z_impl_k_poll+0xb0>
   1c7a6:	4942      	ldr	r1, [pc, #264]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c7a8:	483f      	ldr	r0, [pc, #252]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c7aa:	227c      	movs	r2, #124	; 0x7c
   1c7ac:	f000 f9b0 	bl	1cb10 <printk>
   1c7b0:	217c      	movs	r1, #124	; 0x7c
   1c7b2:	483f      	ldr	r0, [pc, #252]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c7b4:	f000 fc52 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c7b8:	483c      	ldr	r0, [pc, #240]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c7ba:	f7ff f9f1 	bl	1bba0 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1c7be:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1c7c2:	b9d3      	cbnz	r3, 1c7fa <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1c7c4:	4620      	mov	r0, r4
   1c7c6:	464a      	mov	r2, r9
   1c7c8:	4641      	mov	r1, r8
   1c7ca:	f7ff fedd 	bl	1c588 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c7ce:	4837      	ldr	r0, [pc, #220]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c7d0:	f7ff f9d8 	bl	1bb84 <z_spin_unlock_valid>
   1c7d4:	b940      	cbnz	r0, 1c7e8 <z_impl_k_poll+0xe0>
   1c7d6:	4936      	ldr	r1, [pc, #216]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c7d8:	4833      	ldr	r0, [pc, #204]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c7da:	22a7      	movs	r2, #167	; 0xa7
   1c7dc:	f000 f998 	bl	1cb10 <printk>
   1c7e0:	21a7      	movs	r1, #167	; 0xa7
   1c7e2:	4833      	ldr	r0, [pc, #204]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c7e4:	f000 fc3a 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c7e8:	f389 8811 	msr	BASEPRI, r9
   1c7ec:	f3bf 8f6f 	isb	sy
		return 0;
   1c7f0:	2500      	movs	r5, #0
}
   1c7f2:	4628      	mov	r0, r5
   1c7f4:	b005      	add	sp, #20
   1c7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1c7fa:	2300      	movs	r3, #0
   1c7fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c800:	ea56 0305 	orrs.w	r3, r6, r5
   1c804:	d113      	bne.n	1c82e <z_impl_k_poll+0x126>
   1c806:	4829      	ldr	r0, [pc, #164]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c808:	f7ff f9bc 	bl	1bb84 <z_spin_unlock_valid>
   1c80c:	b940      	cbnz	r0, 1c820 <z_impl_k_poll+0x118>
   1c80e:	4928      	ldr	r1, [pc, #160]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c810:	4825      	ldr	r0, [pc, #148]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c812:	22a7      	movs	r2, #167	; 0xa7
   1c814:	f000 f97c 	bl	1cb10 <printk>
   1c818:	21a7      	movs	r1, #167	; 0xa7
   1c81a:	4825      	ldr	r0, [pc, #148]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c81c:	f000 fc1e 	bl	1d05c <assert_post_action>
   1c820:	f389 8811 	msr	BASEPRI, r9
   1c824:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c828:	f06f 050a 	mvn.w	r5, #10
   1c82c:	e7e1      	b.n	1c7f2 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c82e:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c832:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c834:	4649      	mov	r1, r9
   1c836:	481d      	ldr	r0, [pc, #116]	; (1c8ac <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c838:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c83c:	f7fe fd50 	bl	1b2e0 <z_pend_curr>
   1c840:	4605      	mov	r5, r0
	__asm__ volatile(
   1c842:	f04f 0320 	mov.w	r3, #32
   1c846:	f3ef 8611 	mrs	r6, BASEPRI
   1c84a:	f383 8811 	msr	BASEPRI, r3
   1c84e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c852:	4816      	ldr	r0, [pc, #88]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c854:	f7ff f988 	bl	1bb68 <z_spin_lock_valid>
   1c858:	b940      	cbnz	r0, 1c86c <z_impl_k_poll+0x164>
   1c85a:	4915      	ldr	r1, [pc, #84]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c85c:	4812      	ldr	r0, [pc, #72]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c85e:	227c      	movs	r2, #124	; 0x7c
   1c860:	f000 f956 	bl	1cb10 <printk>
   1c864:	217c      	movs	r1, #124	; 0x7c
   1c866:	4812      	ldr	r0, [pc, #72]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c868:	f000 fbf8 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c86c:	480f      	ldr	r0, [pc, #60]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c86e:	f7ff f997 	bl	1bba0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1c872:	4620      	mov	r0, r4
   1c874:	4632      	mov	r2, r6
   1c876:	4641      	mov	r1, r8
   1c878:	f7ff fe86 	bl	1c588 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c87c:	480b      	ldr	r0, [pc, #44]	; (1c8ac <z_impl_k_poll+0x1a4>)
   1c87e:	f7ff f981 	bl	1bb84 <z_spin_unlock_valid>
   1c882:	b940      	cbnz	r0, 1c896 <z_impl_k_poll+0x18e>
   1c884:	490a      	ldr	r1, [pc, #40]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c886:	4808      	ldr	r0, [pc, #32]	; (1c8a8 <z_impl_k_poll+0x1a0>)
   1c888:	22a7      	movs	r2, #167	; 0xa7
   1c88a:	f000 f941 	bl	1cb10 <printk>
   1c88e:	21a7      	movs	r1, #167	; 0xa7
   1c890:	4807      	ldr	r0, [pc, #28]	; (1c8b0 <z_impl_k_poll+0x1a8>)
   1c892:	f000 fbe3 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c896:	f386 8811 	msr	BASEPRI, r6
   1c89a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c89e:	e7a8      	b.n	1c7f2 <z_impl_k_poll+0xea>
   1c8a0:	20009fc4 	.word	0x20009fc4
   1c8a4:	000265c7 	.word	0x000265c7
   1c8a8:	00022f17 	.word	0x00022f17
   1c8ac:	2000a018 	.word	0x2000a018
   1c8b0:	00022f51 	.word	0x00022f51

0001c8b4 <z_impl_k_poll_signal_raise>:
{
   1c8b4:	b570      	push	{r4, r5, r6, lr}
   1c8b6:	4604      	mov	r4, r0
   1c8b8:	460d      	mov	r5, r1
	__asm__ volatile(
   1c8ba:	f04f 0320 	mov.w	r3, #32
   1c8be:	f3ef 8611 	mrs	r6, BASEPRI
   1c8c2:	f383 8811 	msr	BASEPRI, r3
   1c8c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c8ca:	481c      	ldr	r0, [pc, #112]	; (1c93c <z_impl_k_poll_signal_raise+0x88>)
   1c8cc:	f7ff f94c 	bl	1bb68 <z_spin_lock_valid>
   1c8d0:	b940      	cbnz	r0, 1c8e4 <z_impl_k_poll_signal_raise+0x30>
   1c8d2:	491b      	ldr	r1, [pc, #108]	; (1c940 <z_impl_k_poll_signal_raise+0x8c>)
   1c8d4:	481b      	ldr	r0, [pc, #108]	; (1c944 <z_impl_k_poll_signal_raise+0x90>)
   1c8d6:	227c      	movs	r2, #124	; 0x7c
   1c8d8:	f000 f91a 	bl	1cb10 <printk>
   1c8dc:	217c      	movs	r1, #124	; 0x7c
   1c8de:	4818      	ldr	r0, [pc, #96]	; (1c940 <z_impl_k_poll_signal_raise+0x8c>)
   1c8e0:	f000 fbbc 	bl	1d05c <assert_post_action>
	z_spin_lock_set_owner(l);
   1c8e4:	4815      	ldr	r0, [pc, #84]	; (1c93c <z_impl_k_poll_signal_raise+0x88>)
   1c8e6:	f7ff f95b 	bl	1bba0 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1c8ea:	2101      	movs	r1, #1
	return list->head == list;
   1c8ec:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1c8ee:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c8f0:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1c8f2:	60a1      	str	r1, [r4, #8]
   1c8f4:	d112      	bne.n	1c91c <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c8f6:	4811      	ldr	r0, [pc, #68]	; (1c93c <z_impl_k_poll_signal_raise+0x88>)
   1c8f8:	f7ff f944 	bl	1bb84 <z_spin_unlock_valid>
   1c8fc:	b940      	cbnz	r0, 1c910 <z_impl_k_poll_signal_raise+0x5c>
   1c8fe:	4910      	ldr	r1, [pc, #64]	; (1c940 <z_impl_k_poll_signal_raise+0x8c>)
   1c900:	4810      	ldr	r0, [pc, #64]	; (1c944 <z_impl_k_poll_signal_raise+0x90>)
   1c902:	22a7      	movs	r2, #167	; 0xa7
   1c904:	f000 f904 	bl	1cb10 <printk>
   1c908:	21a7      	movs	r1, #167	; 0xa7
   1c90a:	480d      	ldr	r0, [pc, #52]	; (1c940 <z_impl_k_poll_signal_raise+0x8c>)
   1c90c:	f000 fba6 	bl	1d05c <assert_post_action>
	__asm__ volatile(
   1c910:	f386 8811 	msr	BASEPRI, r6
   1c914:	f3bf 8f6f 	isb	sy
		return 0;
   1c918:	2400      	movs	r4, #0
   1c91a:	e00d      	b.n	1c938 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1c91c:	e9d0 3200 	ldrd	r3, r2, [r0]
   1c920:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c922:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c924:	2300      	movs	r3, #0
	node->prev = NULL;
   1c926:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c92a:	f7ff fced 	bl	1c308 <signal_poll_event>
	z_reschedule(&lock, key);
   1c92e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c930:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c932:	4802      	ldr	r0, [pc, #8]	; (1c93c <z_impl_k_poll_signal_raise+0x88>)
   1c934:	f7fd ff96 	bl	1a864 <z_reschedule>
}
   1c938:	4620      	mov	r0, r4
   1c93a:	bd70      	pop	{r4, r5, r6, pc}
   1c93c:	2000a018 	.word	0x2000a018
   1c940:	00022f51 	.word	0x00022f51
   1c944:	00022f17 	.word	0x00022f17

0001c948 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1c948:	2803      	cmp	r0, #3
{
   1c94a:	b538      	push	{r3, r4, r5, lr}
   1c94c:	4604      	mov	r4, r0
   1c94e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1c950:	d901      	bls.n	1c956 <k_aligned_alloc+0xe>
   1c952:	0783      	lsls	r3, r0, #30
   1c954:	d008      	beq.n	1c968 <k_aligned_alloc+0x20>
   1c956:	490e      	ldr	r1, [pc, #56]	; (1c990 <k_aligned_alloc+0x48>)
   1c958:	480e      	ldr	r0, [pc, #56]	; (1c994 <k_aligned_alloc+0x4c>)
   1c95a:	223e      	movs	r2, #62	; 0x3e
   1c95c:	f000 f8d8 	bl	1cb10 <printk>
   1c960:	213e      	movs	r1, #62	; 0x3e
   1c962:	480b      	ldr	r0, [pc, #44]	; (1c990 <k_aligned_alloc+0x48>)
   1c964:	f000 fb7a 	bl	1d05c <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1c968:	1e63      	subs	r3, r4, #1
   1c96a:	4223      	tst	r3, r4
   1c96c:	d008      	beq.n	1c980 <k_aligned_alloc+0x38>
   1c96e:	4908      	ldr	r1, [pc, #32]	; (1c990 <k_aligned_alloc+0x48>)
   1c970:	4808      	ldr	r0, [pc, #32]	; (1c994 <k_aligned_alloc+0x4c>)
   1c972:	2242      	movs	r2, #66	; 0x42
   1c974:	f000 f8cc 	bl	1cb10 <printk>
   1c978:	2142      	movs	r1, #66	; 0x42
   1c97a:	4805      	ldr	r0, [pc, #20]	; (1c990 <k_aligned_alloc+0x48>)
   1c97c:	f000 fb6e 	bl	1d05c <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c980:	462a      	mov	r2, r5
   1c982:	4621      	mov	r1, r4
}
   1c984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c988:	4803      	ldr	r0, [pc, #12]	; (1c998 <k_aligned_alloc+0x50>)
   1c98a:	f004 bf26 	b.w	217da <z_heap_aligned_alloc>
   1c98e:	bf00      	nop
   1c990:	000265e8 	.word	0x000265e8
   1c994:	00022f17 	.word	0x00022f17
   1c998:	20008510 	.word	0x20008510

0001c99c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c99c:	b538      	push	{r3, r4, r5, lr}
   1c99e:	4604      	mov	r4, r0
   1c9a0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c9a2:	f004 fe2d 	bl	21600 <k_is_in_isr>
   1c9a6:	b958      	cbnz	r0, 1c9c0 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c9a8:	4b07      	ldr	r3, [pc, #28]	; (1c9c8 <z_thread_aligned_alloc+0x2c>)
   1c9aa:	689b      	ldr	r3, [r3, #8]
   1c9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1c9b0:	b143      	cbz	r3, 1c9c4 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1c9b2:	462a      	mov	r2, r5
   1c9b4:	4621      	mov	r1, r4
   1c9b6:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1c9b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1c9bc:	f004 bf0d 	b.w	217da <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1c9c0:	4b02      	ldr	r3, [pc, #8]	; (1c9cc <z_thread_aligned_alloc+0x30>)
   1c9c2:	e7f6      	b.n	1c9b2 <z_thread_aligned_alloc+0x16>
}
   1c9c4:	bd38      	pop	{r3, r4, r5, pc}
   1c9c6:	bf00      	nop
   1c9c8:	20009fc4 	.word	0x20009fc4
   1c9cc:	20008510 	.word	0x20008510

0001c9d0 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   1c9d0:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1c9d2:	2003      	movs	r0, #3
   1c9d4:	f7fc b982 	b.w	18cdc <dk_set_led>

0001c9d8 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1c9d8:	f002 b978 	b.w	1eccc <bt_conn_get_dst>

0001c9dc <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1c9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1c9de:	2364      	movs	r3, #100	; 0x64
{
   1c9e0:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1c9e2:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1c9e4:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1c9e6:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1c9ea:	b111      	cbz	r1, 1c9f2 <u8_to_dec+0x16>
   1c9ec:	3d01      	subs	r5, #1
   1c9ee:	d101      	bne.n	1c9f4 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1c9f0:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1c9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1c9f4:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c9f8:	429a      	cmp	r2, r3
		digit = value / divisor;
   1c9fa:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c9fc:	d202      	bcs.n	1ca04 <u8_to_dec+0x28>
   1c9fe:	2b01      	cmp	r3, #1
   1ca00:	d000      	beq.n	1ca04 <u8_to_dec+0x28>
   1ca02:	b130      	cbz	r0, 1ca12 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1ca04:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1ca06:	3901      	subs	r1, #1
			num_digits++;
   1ca08:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1ca0a:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1ca0e:	b2c9      	uxtb	r1, r1
			num_digits++;
   1ca10:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1ca12:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1ca16:	fbb3 f3fc 	udiv	r3, r3, ip
   1ca1a:	b2d2      	uxtb	r2, r2
   1ca1c:	e7e5      	b.n	1c9ea <u8_to_dec+0xe>

0001ca1e <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1ca1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1ca22:	b2db      	uxtb	r3, r3
   1ca24:	2b09      	cmp	r3, #9
   1ca26:	d802      	bhi.n	1ca2e <char2hex+0x10>
		*x = c - '0';
   1ca28:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1ca2a:	2000      	movs	r0, #0
   1ca2c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1ca2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1ca32:	2b05      	cmp	r3, #5
   1ca34:	d802      	bhi.n	1ca3c <char2hex+0x1e>
		*x = c - 'a' + 10;
   1ca36:	3857      	subs	r0, #87	; 0x57
   1ca38:	7008      	strb	r0, [r1, #0]
   1ca3a:	e7f6      	b.n	1ca2a <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1ca3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1ca40:	2b05      	cmp	r3, #5
   1ca42:	d801      	bhi.n	1ca48 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1ca44:	3837      	subs	r0, #55	; 0x37
   1ca46:	e7f7      	b.n	1ca38 <char2hex+0x1a>
		return -EINVAL;
   1ca48:	f06f 0015 	mvn.w	r0, #21
}
   1ca4c:	4770      	bx	lr

0001ca4e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1ca4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ca50:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1ca52:	f001 0001 	and.w	r0, r1, #1
   1ca56:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1ca5a:	429d      	cmp	r5, r3
   1ca5c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1ca60:	d903      	bls.n	1ca6a <hex2bin+0x1c>
		return 0;
   1ca62:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1ca64:	4628      	mov	r0, r5
   1ca66:	b003      	add	sp, #12
   1ca68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1ca6a:	b158      	cbz	r0, 1ca84 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1ca6c:	7820      	ldrb	r0, [r4, #0]
   1ca6e:	f10d 0107 	add.w	r1, sp, #7
   1ca72:	f7ff ffd4 	bl	1ca1e <char2hex>
   1ca76:	2800      	cmp	r0, #0
   1ca78:	dbf3      	blt.n	1ca62 <hex2bin+0x14>
		buf[0] = dec;
   1ca7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1ca7e:	3401      	adds	r4, #1
		buf[0] = dec;
   1ca80:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1ca84:	3401      	adds	r4, #1
   1ca86:	4416      	add	r6, r2
   1ca88:	42b2      	cmp	r2, r6
   1ca8a:	d0eb      	beq.n	1ca64 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1ca8c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1ca90:	f10d 0107 	add.w	r1, sp, #7
   1ca94:	f7ff ffc3 	bl	1ca1e <char2hex>
   1ca98:	2800      	cmp	r0, #0
   1ca9a:	dbe2      	blt.n	1ca62 <hex2bin+0x14>
		buf[i] = dec << 4;
   1ca9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1caa0:	011b      	lsls	r3, r3, #4
   1caa2:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1caa4:	f814 0b02 	ldrb.w	r0, [r4], #2
   1caa8:	f7ff ffb9 	bl	1ca1e <char2hex>
   1caac:	2800      	cmp	r0, #0
   1caae:	dbd8      	blt.n	1ca62 <hex2bin+0x14>
		buf[i] += dec;
   1cab0:	7813      	ldrb	r3, [r2, #0]
   1cab2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1cab6:	440b      	add	r3, r1
   1cab8:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1cabc:	e7e4      	b.n	1ca88 <hex2bin+0x3a>

0001cabe <sys_notify_validate>:
	if (notify == NULL) {
   1cabe:	4603      	mov	r3, r0
   1cac0:	b140      	cbz	r0, 1cad4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cac2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cac4:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1cac8:	2a02      	cmp	r2, #2
   1caca:	d006      	beq.n	1cada <sys_notify_validate+0x1c>
   1cacc:	2a03      	cmp	r2, #3
   1cace:	d004      	beq.n	1cada <sys_notify_validate+0x1c>
   1cad0:	2a01      	cmp	r2, #1
   1cad2:	d005      	beq.n	1cae0 <sys_notify_validate+0x22>
		return -EINVAL;
   1cad4:	f06f 0015 	mvn.w	r0, #21
}
   1cad8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1cada:	681a      	ldr	r2, [r3, #0]
   1cadc:	2a00      	cmp	r2, #0
   1cade:	d0f9      	beq.n	1cad4 <sys_notify_validate+0x16>
		notify->result = 0;
   1cae0:	2000      	movs	r0, #0
   1cae2:	6098      	str	r0, [r3, #8]
   1cae4:	4770      	bx	lr

0001cae6 <arch_printk_char_out>:
}
   1cae6:	2000      	movs	r0, #0
   1cae8:	4770      	bx	lr

0001caea <str_out>:
{
   1caea:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1caec:	688a      	ldr	r2, [r1, #8]
   1caee:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1caf0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1caf2:	b114      	cbz	r4, 1cafa <str_out+0x10>
   1caf4:	684b      	ldr	r3, [r1, #4]
   1caf6:	4293      	cmp	r3, r2
   1caf8:	dc01      	bgt.n	1cafe <str_out+0x14>
		ctx->count++;
   1cafa:	608d      	str	r5, [r1, #8]
}
   1cafc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1cafe:	3b01      	subs	r3, #1
   1cb00:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1cb02:	bf08      	it	eq
   1cb04:	2200      	moveq	r2, #0
   1cb06:	608d      	str	r5, [r1, #8]
   1cb08:	bf0c      	ite	eq
   1cb0a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1cb0c:	54a0      	strbne	r0, [r4, r2]
   1cb0e:	e7f5      	b.n	1cafc <str_out+0x12>

0001cb10 <printk>:
{
   1cb10:	b40f      	push	{r0, r1, r2, r3}
   1cb12:	b507      	push	{r0, r1, r2, lr}
   1cb14:	a904      	add	r1, sp, #16
   1cb16:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cb1a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cb1c:	f7ed fb38 	bl	a190 <vprintk>
}
   1cb20:	b003      	add	sp, #12
   1cb22:	f85d eb04 	ldr.w	lr, [sp], #4
   1cb26:	b004      	add	sp, #16
   1cb28:	4770      	bx	lr

0001cb2a <snprintk>:
{
   1cb2a:	b40c      	push	{r2, r3}
   1cb2c:	b507      	push	{r0, r1, r2, lr}
   1cb2e:	ab04      	add	r3, sp, #16
   1cb30:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1cb34:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1cb36:	f7ed fb39 	bl	a1ac <vsnprintk>
}
   1cb3a:	b003      	add	sp, #12
   1cb3c:	f85d eb04 	ldr.w	lr, [sp], #4
   1cb40:	b002      	add	sp, #8
   1cb42:	4770      	bx	lr

0001cb44 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1cb44:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1cb46:	f013 0307 	ands.w	r3, r3, #7
   1cb4a:	d105      	bne.n	1cb58 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1cb4c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1cb4e:	2b00      	cmp	r3, #0
   1cb50:	bf0c      	ite	eq
   1cb52:	2000      	moveq	r0, #0
   1cb54:	2003      	movne	r0, #3
   1cb56:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1cb58:	2b02      	cmp	r3, #2
   1cb5a:	d105      	bne.n	1cb68 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1cb5c:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1cb5e:	2b00      	cmp	r3, #0
   1cb60:	bf14      	ite	ne
   1cb62:	2000      	movne	r0, #0
   1cb64:	2004      	moveq	r0, #4
   1cb66:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1cb68:	2b01      	cmp	r3, #1
   1cb6a:	d105      	bne.n	1cb78 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1cb6c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1cb6e:	2b00      	cmp	r3, #0
   1cb70:	bf0c      	ite	eq
   1cb72:	2000      	moveq	r0, #0
   1cb74:	2005      	movne	r0, #5
   1cb76:	4770      	bx	lr
	int evt = EVT_NOP;
   1cb78:	2000      	movs	r0, #0
}
   1cb7a:	4770      	bx	lr

0001cb7c <notify_one>:
{
   1cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb80:	460d      	mov	r5, r1
   1cb82:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1cb84:	4619      	mov	r1, r3
   1cb86:	1d28      	adds	r0, r5, #4
{
   1cb88:	4690      	mov	r8, r2
   1cb8a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1cb8c:	f7ed fac6 	bl	a11c <sys_notify_finalize>
	if (cb) {
   1cb90:	4604      	mov	r4, r0
   1cb92:	b138      	cbz	r0, 1cba4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1cb94:	4633      	mov	r3, r6
   1cb96:	4642      	mov	r2, r8
   1cb98:	4629      	mov	r1, r5
   1cb9a:	4638      	mov	r0, r7
   1cb9c:	46a4      	mov	ip, r4
}
   1cb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1cba2:	4760      	bx	ip
}
   1cba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cba8 <validate_args>:
{
   1cba8:	b510      	push	{r4, lr}
   1cbaa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1cbac:	b140      	cbz	r0, 1cbc0 <validate_args+0x18>
   1cbae:	b139      	cbz	r1, 1cbc0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1cbb0:	1d08      	adds	r0, r1, #4
   1cbb2:	f7ff ff84 	bl	1cabe <sys_notify_validate>
	if ((rv == 0)
   1cbb6:	b928      	cbnz	r0, 1cbc4 <validate_args+0x1c>
	    && ((cli->notify.flags
   1cbb8:	68a3      	ldr	r3, [r4, #8]
   1cbba:	f033 0303 	bics.w	r3, r3, #3
   1cbbe:	d001      	beq.n	1cbc4 <validate_args+0x1c>
		rv = -EINVAL;
   1cbc0:	f06f 0015 	mvn.w	r0, #21
}
   1cbc4:	bd10      	pop	{r4, pc}

0001cbc6 <onoff_manager_init>:
{
   1cbc6:	b538      	push	{r3, r4, r5, lr}
   1cbc8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1cbca:	4605      	mov	r5, r0
   1cbcc:	b158      	cbz	r0, 1cbe6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1cbce:	b151      	cbz	r1, 1cbe6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1cbd0:	680b      	ldr	r3, [r1, #0]
   1cbd2:	b143      	cbz	r3, 1cbe6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1cbd4:	684b      	ldr	r3, [r1, #4]
   1cbd6:	b133      	cbz	r3, 1cbe6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1cbd8:	2220      	movs	r2, #32
   1cbda:	2100      	movs	r1, #0
   1cbdc:	f001 fc7b 	bl	1e4d6 <memset>
	return 0;
   1cbe0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1cbe2:	612c      	str	r4, [r5, #16]
}
   1cbe4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1cbe6:	f06f 0015 	mvn.w	r0, #21
   1cbea:	e7fb      	b.n	1cbe4 <onoff_manager_init+0x1e>

0001cbec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1cbec:	4604      	mov	r4, r0
   1cbee:	b508      	push	{r3, lr}
   1cbf0:	4608      	mov	r0, r1
   1cbf2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1cbf4:	461a      	mov	r2, r3
   1cbf6:	47a0      	blx	r4
	return z_impl_k_current_get();
   1cbf8:	f7fe fdc4 	bl	1b784 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1cbfc:	f7f1 fa0a 	bl	e014 <z_impl_k_thread_abort>

0001cc00 <chunk_field>:
	if (big_heap(h)) {
   1cc00:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1cc02:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cc06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1cc0a:	bf2c      	ite	cs
   1cc0c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1cc10:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1cc14:	4770      	bx	lr

0001cc16 <chunk_set>:
	void *cmem = &buf[c];
   1cc16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cc1a:	6880      	ldr	r0, [r0, #8]
   1cc1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1cc20:	bf2c      	ite	cs
   1cc22:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1cc26:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1cc2a:	4770      	bx	lr

0001cc2c <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cc2c:	2201      	movs	r2, #1
{
   1cc2e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cc30:	f7ff ffe6 	bl	1cc00 <chunk_field>
}
   1cc34:	40d0      	lsrs	r0, r2
   1cc36:	bd08      	pop	{r3, pc}

0001cc38 <set_chunk_used>:
	if (big_heap(h)) {
   1cc38:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1cc3a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cc3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cc42:	d308      	bcc.n	1cc56 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cc44:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1cc46:	b11a      	cbz	r2, 1cc50 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cc48:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cc4c:	604b      	str	r3, [r1, #4]
   1cc4e:	4770      	bx	lr
   1cc50:	f023 0301 	bic.w	r3, r3, #1
   1cc54:	e7fa      	b.n	1cc4c <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cc56:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1cc58:	b11a      	cbz	r2, 1cc62 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cc5a:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cc5e:	804b      	strh	r3, [r1, #2]
}
   1cc60:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cc62:	f023 0301 	bic.w	r3, r3, #1
   1cc66:	e7fa      	b.n	1cc5e <set_chunk_used+0x26>

0001cc68 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cc68:	0053      	lsls	r3, r2, #1
   1cc6a:	2201      	movs	r2, #1
   1cc6c:	f7ff bfd3 	b.w	1cc16 <chunk_set>

0001cc70 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1cc70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1cc74:	bf2c      	ite	cs
   1cc76:	2008      	movcs	r0, #8
   1cc78:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cc7a:	3107      	adds	r1, #7
   1cc7c:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1cc7e:	08c0      	lsrs	r0, r0, #3
   1cc80:	4770      	bx	lr

0001cc82 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1cc82:	b508      	push	{r3, lr}
   1cc84:	460b      	mov	r3, r1
   1cc86:	2101      	movs	r1, #1
   1cc88:	f7ff fff2 	bl	1cc70 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1cc8c:	3301      	adds	r3, #1
   1cc8e:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1cc90:	fab3 f083 	clz	r0, r3
}
   1cc94:	f1c0 001f 	rsb	r0, r0, #31
   1cc98:	bd08      	pop	{r3, pc}

0001cc9a <free_list_remove_bidx>:
{
   1cc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc9e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1cca0:	2203      	movs	r2, #3
   1cca2:	460e      	mov	r6, r1
   1cca4:	4604      	mov	r4, r0
   1cca6:	f7ff ffab 	bl	1cc00 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1ccaa:	4286      	cmp	r6, r0
   1ccac:	4605      	mov	r5, r0
   1ccae:	f107 0804 	add.w	r8, r7, #4
   1ccb2:	d10b      	bne.n	1cccc <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1ccb4:	2301      	movs	r3, #1
   1ccb6:	fa03 f707 	lsl.w	r7, r3, r7
   1ccba:	68e3      	ldr	r3, [r4, #12]
   1ccbc:	ea23 0307 	bic.w	r3, r3, r7
   1ccc0:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1ccc2:	2300      	movs	r3, #0
   1ccc4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1cccc:	4631      	mov	r1, r6
   1ccce:	2202      	movs	r2, #2
   1ccd0:	4620      	mov	r0, r4
   1ccd2:	f7ff ff95 	bl	1cc00 <chunk_field>
   1ccd6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1ccd8:	462b      	mov	r3, r5
   1ccda:	4601      	mov	r1, r0
   1ccdc:	2203      	movs	r2, #3
   1ccde:	4620      	mov	r0, r4
		b->next = second;
   1cce0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1cce4:	f7ff ff97 	bl	1cc16 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cce8:	4633      	mov	r3, r6
   1ccea:	4629      	mov	r1, r5
   1ccec:	4620      	mov	r0, r4
}
   1ccee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ccf2:	2202      	movs	r2, #2
   1ccf4:	f7ff bf8f 	b.w	1cc16 <chunk_set>

0001ccf8 <free_list_remove>:
{
   1ccf8:	b570      	push	{r4, r5, r6, lr}
   1ccfa:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ccfc:	6886      	ldr	r6, [r0, #8]
   1ccfe:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cd00:	f7ff ff94 	bl	1cc2c <chunk_size>
   1cd04:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cd08:	4601      	mov	r1, r0
   1cd0a:	d301      	bcc.n	1cd10 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1cd0c:	2801      	cmp	r0, #1
   1cd0e:	d009      	beq.n	1cd24 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cd10:	4630      	mov	r0, r6
   1cd12:	f7ff ffb6 	bl	1cc82 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1cd16:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cd18:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1cd1a:	4620      	mov	r0, r4
}
   1cd1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1cd20:	f7ff bfbb 	b.w	1cc9a <free_list_remove_bidx>
}
   1cd24:	bd70      	pop	{r4, r5, r6, pc}

0001cd26 <alloc_chunk>:
{
   1cd26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd2a:	6886      	ldr	r6, [r0, #8]
   1cd2c:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1cd2e:	4630      	mov	r0, r6
{
   1cd30:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1cd32:	f7ff ffa6 	bl	1cc82 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1cd36:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1cd38:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1cd3a:	4630      	mov	r0, r6
   1cd3c:	f7ff ffa1 	bl	1cc82 <bucket_idx.isra.0>
   1cd40:	42a8      	cmp	r0, r5
   1cd42:	da03      	bge.n	1cd4c <alloc_chunk+0x26>
		return 0;
   1cd44:	2600      	movs	r6, #0
}
   1cd46:	4630      	mov	r0, r6
   1cd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1cd4c:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1cd50:	f8da 9010 	ldr.w	r9, [sl, #16]
   1cd54:	f1b9 0f00 	cmp.w	r9, #0
   1cd58:	d019      	beq.n	1cd8e <alloc_chunk+0x68>
   1cd5a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1cd5c:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1cd60:	4620      	mov	r0, r4
   1cd62:	4631      	mov	r1, r6
   1cd64:	f7ff ff62 	bl	1cc2c <chunk_size>
   1cd68:	4540      	cmp	r0, r8
   1cd6a:	d305      	bcc.n	1cd78 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1cd6c:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1cd6e:	4631      	mov	r1, r6
   1cd70:	4620      	mov	r0, r4
   1cd72:	f7ff ff92 	bl	1cc9a <free_list_remove_bidx>
		return c;
   1cd76:	e7e6      	b.n	1cd46 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1cd78:	2203      	movs	r2, #3
   1cd7a:	4631      	mov	r1, r6
   1cd7c:	4620      	mov	r0, r4
   1cd7e:	f7ff ff3f 	bl	1cc00 <chunk_field>
		} while (--i && b->next != first);
   1cd82:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1cd84:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1cd88:	d001      	beq.n	1cd8e <alloc_chunk+0x68>
   1cd8a:	4581      	cmp	r9, r0
   1cd8c:	d1e6      	bne.n	1cd5c <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1cd8e:	f04f 32ff 	mov.w	r2, #4294967295
   1cd92:	68e3      	ldr	r3, [r4, #12]
   1cd94:	3501      	adds	r5, #1
   1cd96:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1cd98:	401a      	ands	r2, r3
   1cd9a:	d0d3      	beq.n	1cd44 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1cd9c:	fa92 f2a2 	rbit	r2, r2
   1cda0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1cda4:	1d13      	adds	r3, r2, #4
   1cda6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1cdaa:	e7e0      	b.n	1cd6e <alloc_chunk+0x48>

0001cdac <split_chunks>:
{
   1cdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cdb0:	4614      	mov	r4, r2
   1cdb2:	460e      	mov	r6, r1
   1cdb4:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1cdb6:	f7ff ff39 	bl	1cc2c <chunk_size>
	size_t lsz = rc - lc;
   1cdba:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1cdbe:	1b37      	subs	r7, r6, r4
   1cdc0:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1cdc2:	4642      	mov	r2, r8
   1cdc4:	4631      	mov	r1, r6
   1cdc6:	4628      	mov	r0, r5
   1cdc8:	f7ff ff4e 	bl	1cc68 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1cdcc:	463a      	mov	r2, r7
   1cdce:	4621      	mov	r1, r4
   1cdd0:	4628      	mov	r0, r5
   1cdd2:	f7ff ff49 	bl	1cc68 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cdd6:	4643      	mov	r3, r8
   1cdd8:	2200      	movs	r2, #0
   1cdda:	4621      	mov	r1, r4
   1cddc:	4628      	mov	r0, r5
   1cdde:	f7ff ff1a 	bl	1cc16 <chunk_set>
	return c + chunk_size(h, c);
   1cde2:	4621      	mov	r1, r4
   1cde4:	4628      	mov	r0, r5
   1cde6:	f7ff ff21 	bl	1cc2c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cdea:	463b      	mov	r3, r7
   1cdec:	1821      	adds	r1, r4, r0
   1cdee:	2200      	movs	r2, #0
   1cdf0:	4628      	mov	r0, r5
}
   1cdf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cdf6:	f7ff bf0e 	b.w	1cc16 <chunk_set>

0001cdfa <merge_chunks>:
{
   1cdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cdfe:	4616      	mov	r6, r2
   1ce00:	4604      	mov	r4, r0
   1ce02:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ce04:	f7ff ff12 	bl	1cc2c <chunk_size>
   1ce08:	4631      	mov	r1, r6
   1ce0a:	4605      	mov	r5, r0
   1ce0c:	4620      	mov	r0, r4
   1ce0e:	f7ff ff0d 	bl	1cc2c <chunk_size>
   1ce12:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1ce14:	462a      	mov	r2, r5
   1ce16:	4639      	mov	r1, r7
   1ce18:	4620      	mov	r0, r4
   1ce1a:	f7ff ff25 	bl	1cc68 <set_chunk_size>
	return c + chunk_size(h, c);
   1ce1e:	4631      	mov	r1, r6
   1ce20:	4620      	mov	r0, r4
   1ce22:	f7ff ff03 	bl	1cc2c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ce26:	462b      	mov	r3, r5
   1ce28:	1831      	adds	r1, r6, r0
   1ce2a:	2200      	movs	r2, #0
   1ce2c:	4620      	mov	r0, r4
}
   1ce2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ce32:	f7ff bef0 	b.w	1cc16 <chunk_set>

0001ce36 <free_list_add>:
{
   1ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce3a:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ce3c:	6886      	ldr	r6, [r0, #8]
   1ce3e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ce40:	f7ff fef4 	bl	1cc2c <chunk_size>
   1ce44:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ce48:	4601      	mov	r1, r0
   1ce4a:	d301      	bcc.n	1ce50 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1ce4c:	2801      	cmp	r0, #1
   1ce4e:	d033      	beq.n	1ceb8 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ce50:	4630      	mov	r0, r6
   1ce52:	f7ff ff16 	bl	1cc82 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1ce56:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1ce5a:	6916      	ldr	r6, [r2, #16]
   1ce5c:	b99e      	cbnz	r6, 1ce86 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1ce5e:	2301      	movs	r3, #1
   1ce60:	fa03 f000 	lsl.w	r0, r3, r0
   1ce64:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ce66:	4629      	mov	r1, r5
   1ce68:	4303      	orrs	r3, r0
   1ce6a:	60e3      	str	r3, [r4, #12]
   1ce6c:	4620      	mov	r0, r4
		b->next = c;
   1ce6e:	6115      	str	r5, [r2, #16]
   1ce70:	462b      	mov	r3, r5
   1ce72:	2202      	movs	r2, #2
   1ce74:	f7ff fecf 	bl	1cc16 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ce78:	2203      	movs	r2, #3
   1ce7a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1ce7c:	4620      	mov	r0, r4
}
   1ce7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ce82:	f7ff bec8 	b.w	1cc16 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ce86:	2202      	movs	r2, #2
   1ce88:	4631      	mov	r1, r6
   1ce8a:	4620      	mov	r0, r4
   1ce8c:	f7ff feb8 	bl	1cc00 <chunk_field>
   1ce90:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1ce92:	4603      	mov	r3, r0
   1ce94:	4629      	mov	r1, r5
   1ce96:	4620      	mov	r0, r4
   1ce98:	f7ff febd 	bl	1cc16 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ce9c:	2203      	movs	r2, #3
   1ce9e:	4633      	mov	r3, r6
   1cea0:	4629      	mov	r1, r5
   1cea2:	4620      	mov	r0, r4
   1cea4:	f7ff feb7 	bl	1cc16 <chunk_set>
   1cea8:	4639      	mov	r1, r7
   1ceaa:	462b      	mov	r3, r5
   1ceac:	4620      	mov	r0, r4
   1ceae:	f7ff feb2 	bl	1cc16 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ceb2:	2202      	movs	r2, #2
   1ceb4:	4631      	mov	r1, r6
   1ceb6:	e7e1      	b.n	1ce7c <free_list_add+0x46>
   1ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cebc <free_chunk>:
{
   1cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cebe:	460c      	mov	r4, r1
   1cec0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1cec2:	f7ff feb3 	bl	1cc2c <chunk_size>
   1cec6:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cec8:	2201      	movs	r2, #1
   1ceca:	4631      	mov	r1, r6
   1cecc:	4628      	mov	r0, r5
   1cece:	f7ff fe97 	bl	1cc00 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1ced2:	07c3      	lsls	r3, r0, #31
   1ced4:	d40c      	bmi.n	1cef0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ced6:	4631      	mov	r1, r6
   1ced8:	4628      	mov	r0, r5
   1ceda:	f7ff ff0d 	bl	1ccf8 <free_list_remove>
	return c + chunk_size(h, c);
   1cede:	4621      	mov	r1, r4
   1cee0:	4628      	mov	r0, r5
   1cee2:	f7ff fea3 	bl	1cc2c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1cee6:	4621      	mov	r1, r4
   1cee8:	1822      	adds	r2, r4, r0
   1ceea:	4628      	mov	r0, r5
   1ceec:	f7ff ff85 	bl	1cdfa <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cef0:	2200      	movs	r2, #0
   1cef2:	4621      	mov	r1, r4
   1cef4:	4628      	mov	r0, r5
   1cef6:	f7ff fe83 	bl	1cc00 <chunk_field>
   1cefa:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cefc:	2201      	movs	r2, #1
   1cefe:	4639      	mov	r1, r7
   1cf00:	4628      	mov	r0, r5
   1cf02:	f7ff fe7d 	bl	1cc00 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1cf06:	ea10 0602 	ands.w	r6, r0, r2
   1cf0a:	d113      	bne.n	1cf34 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1cf0c:	4639      	mov	r1, r7
   1cf0e:	4628      	mov	r0, r5
   1cf10:	f7ff fef2 	bl	1ccf8 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cf14:	4621      	mov	r1, r4
   1cf16:	4632      	mov	r2, r6
   1cf18:	4628      	mov	r0, r5
   1cf1a:	f7ff fe71 	bl	1cc00 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1cf1e:	4622      	mov	r2, r4
   1cf20:	1a21      	subs	r1, r4, r0
   1cf22:	4628      	mov	r0, r5
   1cf24:	f7ff ff69 	bl	1cdfa <merge_chunks>
   1cf28:	4621      	mov	r1, r4
   1cf2a:	4632      	mov	r2, r6
   1cf2c:	4628      	mov	r0, r5
   1cf2e:	f7ff fe67 	bl	1cc00 <chunk_field>
   1cf32:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1cf34:	4621      	mov	r1, r4
   1cf36:	4628      	mov	r0, r5
}
   1cf38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1cf3c:	f7ff bf7b 	b.w	1ce36 <free_list_add>

0001cf40 <sys_heap_alloc>:
{
   1cf40:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1cf42:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cf44:	b909      	cbnz	r1, 1cf4a <sys_heap_alloc+0xa>
		return NULL;
   1cf46:	2000      	movs	r0, #0
}
   1cf48:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1cf4a:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cf4c:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1cf50:	d9f9      	bls.n	1cf46 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cf52:	f7ff fe8d 	bl	1cc70 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cf56:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cf58:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cf5a:	4630      	mov	r0, r6
   1cf5c:	f7ff fee3 	bl	1cd26 <alloc_chunk>
	if (c == 0U) {
   1cf60:	4604      	mov	r4, r0
   1cf62:	2800      	cmp	r0, #0
   1cf64:	d0ef      	beq.n	1cf46 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1cf66:	4601      	mov	r1, r0
   1cf68:	4630      	mov	r0, r6
   1cf6a:	f7ff fe5f 	bl	1cc2c <chunk_size>
   1cf6e:	42a8      	cmp	r0, r5
   1cf70:	d909      	bls.n	1cf86 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1cf72:	4425      	add	r5, r4
   1cf74:	4621      	mov	r1, r4
   1cf76:	4630      	mov	r0, r6
   1cf78:	462a      	mov	r2, r5
   1cf7a:	f7ff ff17 	bl	1cdac <split_chunks>
		free_list_add(h, c + chunk_sz);
   1cf7e:	4629      	mov	r1, r5
   1cf80:	4630      	mov	r0, r6
   1cf82:	f7ff ff58 	bl	1ce36 <free_list_add>
	set_chunk_used(h, c, true);
   1cf86:	4621      	mov	r1, r4
   1cf88:	4630      	mov	r0, r6
   1cf8a:	2201      	movs	r2, #1
   1cf8c:	f7ff fe54 	bl	1cc38 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1cf90:	68b3      	ldr	r3, [r6, #8]
   1cf92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cf96:	bf2c      	ite	cs
   1cf98:	2308      	movcs	r3, #8
   1cf9a:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1cf9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1cfa0:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1cfa2:	e7d1      	b.n	1cf48 <sys_heap_alloc+0x8>

0001cfa4 <encode_uint>:
{
   1cfa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfa8:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1cfaa:	78d3      	ldrb	r3, [r2, #3]
{
   1cfac:	4680      	mov	r8, r0
	switch (specifier) {
   1cfae:	2b6f      	cmp	r3, #111	; 0x6f
{
   1cfb0:	460f      	mov	r7, r1
   1cfb2:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cfb4:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1cfb8:	d029      	beq.n	1d00e <encode_uint+0x6a>
   1cfba:	d824      	bhi.n	1d006 <encode_uint+0x62>
		return 16;
   1cfbc:	2b58      	cmp	r3, #88	; 0x58
   1cfbe:	bf14      	ite	ne
   1cfc0:	260a      	movne	r6, #10
   1cfc2:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1cfc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1cfc8:	4632      	mov	r2, r6
   1cfca:	2300      	movs	r3, #0
   1cfcc:	4640      	mov	r0, r8
   1cfce:	4639      	mov	r1, r7
   1cfd0:	f7eb fdac 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cfd4:	2a09      	cmp	r2, #9
   1cfd6:	b2d4      	uxtb	r4, r2
   1cfd8:	d81e      	bhi.n	1d018 <encode_uint+0x74>
   1cfda:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1cfdc:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cfde:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1cfe0:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cfe4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1cfe8:	d301      	bcc.n	1cfee <encode_uint+0x4a>
   1cfea:	45d1      	cmp	r9, sl
   1cfec:	d811      	bhi.n	1d012 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1cfee:	782b      	ldrb	r3, [r5, #0]
   1cff0:	069b      	lsls	r3, r3, #26
   1cff2:	d505      	bpl.n	1d000 <encode_uint+0x5c>
		if (radix == 8) {
   1cff4:	2e08      	cmp	r6, #8
   1cff6:	d115      	bne.n	1d024 <encode_uint+0x80>
			conv->altform_0 = true;
   1cff8:	78ab      	ldrb	r3, [r5, #2]
   1cffa:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1cffe:	70ab      	strb	r3, [r5, #2]
}
   1d000:	4648      	mov	r0, r9
   1d002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1d006:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1d00a:	2b70      	cmp	r3, #112	; 0x70
   1d00c:	e7d7      	b.n	1cfbe <encode_uint+0x1a>
	switch (specifier) {
   1d00e:	2608      	movs	r6, #8
   1d010:	e7d8      	b.n	1cfc4 <encode_uint+0x20>
		value /= radix;
   1d012:	4680      	mov	r8, r0
   1d014:	460f      	mov	r7, r1
   1d016:	e7d7      	b.n	1cfc8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d018:	f1bb 0f19 	cmp.w	fp, #25
   1d01c:	bf94      	ite	ls
   1d01e:	3437      	addls	r4, #55	; 0x37
   1d020:	3457      	addhi	r4, #87	; 0x57
   1d022:	e7db      	b.n	1cfdc <encode_uint+0x38>
		} else if (radix == 16) {
   1d024:	2e10      	cmp	r6, #16
   1d026:	d1eb      	bne.n	1d000 <encode_uint+0x5c>
			conv->altform_0c = true;
   1d028:	78ab      	ldrb	r3, [r5, #2]
   1d02a:	f043 0310 	orr.w	r3, r3, #16
   1d02e:	e7e6      	b.n	1cffe <encode_uint+0x5a>

0001d030 <outs>:
{
   1d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d034:	4607      	mov	r7, r0
   1d036:	4688      	mov	r8, r1
   1d038:	4615      	mov	r5, r2
   1d03a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d03c:	4614      	mov	r4, r2
   1d03e:	42b4      	cmp	r4, r6
   1d040:	eba4 0005 	sub.w	r0, r4, r5
   1d044:	d302      	bcc.n	1d04c <outs+0x1c>
   1d046:	b93e      	cbnz	r6, 1d058 <outs+0x28>
   1d048:	7823      	ldrb	r3, [r4, #0]
   1d04a:	b12b      	cbz	r3, 1d058 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1d04c:	4641      	mov	r1, r8
   1d04e:	f814 0b01 	ldrb.w	r0, [r4], #1
   1d052:	47b8      	blx	r7
		if (rc < 0) {
   1d054:	2800      	cmp	r0, #0
   1d056:	daf2      	bge.n	1d03e <outs+0xe>
}
   1d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d05c <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1d05c:	4040      	eors	r0, r0
   1d05e:	f380 8811 	msr	BASEPRI, r0
   1d062:	f04f 0004 	mov.w	r0, #4
   1d066:	df02      	svc	2
}
   1d068:	4770      	bx	lr

0001d06a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   1d06a:	4770      	bx	lr

0001d06c <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1d06c:	f04f 0320 	mov.w	r3, #32
   1d070:	f3ef 8111 	mrs	r1, BASEPRI
   1d074:	f383 8811 	msr	BASEPRI, r3
   1d078:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1d07c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1d080:	2201      	movs	r2, #1
   1d082:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1d086:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1d08a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1d08e:	f381 8811 	msr	BASEPRI, r1
   1d092:	f3bf 8f6f 	isb	sy
}
   1d096:	2000      	movs	r0, #0
   1d098:	4770      	bx	lr

0001d09a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1d09a:	f003 bdfa 	b.w	20c92 <SystemInit>

0001d09e <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1d09e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d0a2:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1d0a6:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1d0a8:	4640      	mov	r0, r8
{
   1d0aa:	461f      	mov	r7, r3
   1d0ac:	460c      	mov	r4, r1
   1d0ae:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1d0b0:	f001 f9a8 	bl	1e404 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d0b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d0b8:	b280      	uxth	r0, r0
   1d0ba:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1d0be:	9300      	str	r3, [sp, #0]
   1d0c0:	4632      	mov	r2, r6
   1d0c2:	463b      	mov	r3, r7
   1d0c4:	4621      	mov	r1, r4
   1d0c6:	4628      	mov	r0, r5
   1d0c8:	f002 fce4 	bl	1fa94 <bt_gatt_attr_read>
}
   1d0cc:	b004      	add	sp, #16
   1d0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d0d2 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1d0d2:	6883      	ldr	r3, [r0, #8]
   1d0d4:	68db      	ldr	r3, [r3, #12]
   1d0d6:	4718      	bx	r3

0001d0d8 <nvs_flash_rd>:
{
   1d0d8:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1d0da:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d0dc:	8984      	ldrh	r4, [r0, #12]
   1d0de:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1d0e0:	fa16 f181 	uxtah	r1, r6, r1
   1d0e4:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   1d0e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   1d0ea:	6884      	ldr	r4, [r0, #8]
   1d0ec:	6824      	ldr	r4, [r4, #0]
   1d0ee:	46a4      	mov	ip, r4
}
   1d0f0:	bc70      	pop	{r4, r5, r6}
   1d0f2:	4760      	bx	ip

0001d0f4 <nvs_flash_block_cmp>:
{
   1d0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d0f8:	4681      	mov	r9, r0
   1d0fa:	460e      	mov	r6, r1
   1d0fc:	4617      	mov	r7, r2
   1d0fe:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d100:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1d102:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d104:	681d      	ldr	r5, [r3, #0]
   1d106:	426d      	negs	r5, r5
	block_size =
   1d108:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1d10c:	b91c      	cbnz	r4, 1d116 <nvs_flash_block_cmp+0x22>
	return 0;
   1d10e:	4620      	mov	r0, r4
}
   1d110:	b009      	add	sp, #36	; 0x24
   1d112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1d116:	42ac      	cmp	r4, r5
   1d118:	46a0      	mov	r8, r4
   1d11a:	bf28      	it	cs
   1d11c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1d11e:	466a      	mov	r2, sp
   1d120:	4643      	mov	r3, r8
   1d122:	4631      	mov	r1, r6
   1d124:	4648      	mov	r0, r9
   1d126:	f7ff ffd7 	bl	1d0d8 <nvs_flash_rd>
		if (rc) {
   1d12a:	2800      	cmp	r0, #0
   1d12c:	d1f0      	bne.n	1d110 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1d12e:	4642      	mov	r2, r8
   1d130:	4669      	mov	r1, sp
   1d132:	4638      	mov	r0, r7
   1d134:	f001 f993 	bl	1e45e <memcmp>
		if (rc) {
   1d138:	b920      	cbnz	r0, 1d144 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1d13a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1d13e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1d140:	4447      	add	r7, r8
   1d142:	e7e3      	b.n	1d10c <nvs_flash_block_cmp+0x18>
			return 1;
   1d144:	2001      	movs	r0, #1
   1d146:	e7e3      	b.n	1d110 <nvs_flash_block_cmp+0x1c>

0001d148 <nvs_flash_cmp_const>:
{
   1d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d14c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d14e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1d150:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d152:	681d      	ldr	r5, [r3, #0]
{
   1d154:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d156:	426d      	negs	r5, r5
	block_size =
   1d158:	f005 0520 	and.w	r5, r5, #32
{
   1d15c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1d15e:	4668      	mov	r0, sp
{
   1d160:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1d162:	462a      	mov	r2, r5
   1d164:	f001 f9b7 	bl	1e4d6 <memset>
	while (len) {
   1d168:	b91c      	cbnz	r4, 1d172 <nvs_flash_cmp_const+0x2a>
	return 0;
   1d16a:	4620      	mov	r0, r4
}
   1d16c:	b008      	add	sp, #32
   1d16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1d172:	42ac      	cmp	r4, r5
   1d174:	46a0      	mov	r8, r4
   1d176:	bf28      	it	cs
   1d178:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1d17a:	466a      	mov	r2, sp
   1d17c:	4643      	mov	r3, r8
   1d17e:	4631      	mov	r1, r6
   1d180:	4638      	mov	r0, r7
   1d182:	f7ff ffb7 	bl	1d0f4 <nvs_flash_block_cmp>
		if (rc) {
   1d186:	2800      	cmp	r0, #0
   1d188:	d1f0      	bne.n	1d16c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1d18a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1d18e:	4446      	add	r6, r8
   1d190:	e7ea      	b.n	1d168 <nvs_flash_cmp_const+0x20>

0001d192 <nvs_flash_erase_sector>:
{
   1d192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d196:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	addr &= ADDR_SECT_MASK;
   1d198:	0c0e      	lsrs	r6, r1, #16
   1d19a:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d19c:	4631      	mov	r1, r6
   1d19e:	8983      	ldrh	r3, [r0, #12]
   1d1a0:	7912      	ldrb	r2, [r2, #4]
{
   1d1a2:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d1a4:	f7ff ffd0 	bl	1d148 <nvs_flash_cmp_const>
	if (rc <= 0) {
   1d1a8:	1e04      	subs	r4, r0, #0
   1d1aa:	dd16      	ble.n	1d1da <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   1d1ac:	2100      	movs	r1, #0
   1d1ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   1d1b0:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d1b2:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   1d1b6:	f7ff ff8c 	bl	1d0d2 <flash_write_protection_set>
	if (rc) {
   1d1ba:	4604      	mov	r4, r0
   1d1bc:	b968      	cbnz	r0, 1d1da <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1d1be:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d1c0:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   1d1c2:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d1c4:	0c31      	lsrs	r1, r6, #16
   1d1c6:	fb08 7101 	mla	r1, r8, r1, r7
   1d1ca:	689b      	ldr	r3, [r3, #8]
   1d1cc:	4798      	blx	r3
	if (rc) {
   1d1ce:	4604      	mov	r4, r0
   1d1d0:	b918      	cbnz	r0, 1d1da <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   1d1d2:	2101      	movs	r1, #1
   1d1d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d1d6:	f7ff ff7c 	bl	1d0d2 <flash_write_protection_set>
}
   1d1da:	4620      	mov	r0, r4
   1d1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d1e0 <nvs_ate_crc8_check>:
{
   1d1e0:	b510      	push	{r4, lr}
   1d1e2:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d1e4:	4601      	mov	r1, r0
   1d1e6:	2207      	movs	r2, #7
   1d1e8:	20ff      	movs	r0, #255	; 0xff
   1d1ea:	f7ec ff7f 	bl	a0ec <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1d1ee:	79e3      	ldrb	r3, [r4, #7]
}
   1d1f0:	1a18      	subs	r0, r3, r0
   1d1f2:	bf18      	it	ne
   1d1f4:	2001      	movne	r0, #1
   1d1f6:	bd10      	pop	{r4, pc}

0001d1f8 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d1f8:	4601      	mov	r1, r0
{
   1d1fa:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d1fc:	2207      	movs	r2, #7
{
   1d1fe:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d200:	20ff      	movs	r0, #255	; 0xff
   1d202:	f7ec ff73 	bl	a0ec <crc8_ccitt>
	entry->crc8 = crc8;
   1d206:	71e0      	strb	r0, [r4, #7]
}
   1d208:	bd10      	pop	{r4, pc}

0001d20a <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1d20a:	680b      	ldr	r3, [r1, #0]
   1d20c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1d210:	0c1a      	lsrs	r2, r3, #16
   1d212:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1d216:	bf08      	it	eq
   1d218:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1d21c:	600b      	str	r3, [r1, #0]
}
   1d21e:	4770      	bx	lr

0001d220 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1d220:	7803      	ldrb	r3, [r0, #0]
   1d222:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1d224:	bf81      	itttt	hi
   1d226:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1d22a:	18c9      	addhi	r1, r1, r3
   1d22c:	425b      	neghi	r3, r3
   1d22e:	4019      	andhi	r1, r3
}
   1d230:	4608      	mov	r0, r1
   1d232:	4770      	bx	lr

0001d234 <nvs_prev_ate>:
{
   1d234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d236:	4604      	mov	r4, r0
   1d238:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d23a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1d23c:	2108      	movs	r1, #8
   1d23e:	f7ff ffef 	bl	1d220 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d242:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d244:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d246:	6829      	ldr	r1, [r5, #0]
   1d248:	4620      	mov	r0, r4
   1d24a:	f7ff ff45 	bl	1d0d8 <nvs_flash_rd>
	if (rc) {
   1d24e:	2800      	cmp	r0, #0
   1d250:	d13e      	bne.n	1d2d0 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   1d252:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d254:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   1d256:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d258:	b299      	uxth	r1, r3
   1d25a:	1b92      	subs	r2, r2, r6
   1d25c:	4291      	cmp	r1, r2
	*addr += ate_size;
   1d25e:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d260:	d136      	bne.n	1d2d0 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1d262:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1d264:	bf09      	itett	eq
   1d266:	89e1      	ldrheq	r1, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   1d268:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1d26c:	f101 31ff 	addeq.w	r1, r1, #4294967295
   1d270:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d274:	466a      	mov	r2, sp
   1d276:	2308      	movs	r3, #8
   1d278:	4620      	mov	r0, r4
   1d27a:	6029      	str	r1, [r5, #0]
   1d27c:	f7ff ff2c 	bl	1d0d8 <nvs_flash_rd>
	if (rc) {
   1d280:	bb30      	cbnz	r0, 1d2d0 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1d282:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d284:	466a      	mov	r2, sp
   1d286:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1d288:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1d28a:	f812 7b01 	ldrb.w	r7, [r2], #1
   1d28e:	42b9      	cmp	r1, r7
   1d290:	d115      	bne.n	1d2be <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1d292:	3301      	adds	r3, #1
   1d294:	2b08      	cmp	r3, #8
   1d296:	d1f8      	bne.n	1d28a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   1d298:	6863      	ldr	r3, [r4, #4]
   1d29a:	e00e      	b.n	1d2ba <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1d29c:	89a3      	ldrh	r3, [r4, #12]
   1d29e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1d2a2:	1b9b      	subs	r3, r3, r6
   1d2a4:	429a      	cmp	r2, r3
   1d2a6:	d20f      	bcs.n	1d2c8 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   1d2a8:	fbb2 f3f6 	udiv	r3, r2, r6
   1d2ac:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1d2b0:	b956      	cbnz	r6, 1d2c8 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   1d2b2:	682b      	ldr	r3, [r5, #0]
   1d2b4:	0c1b      	lsrs	r3, r3, #16
   1d2b6:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   1d2b8:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1d2ba:	602b      	str	r3, [r5, #0]
		return 0;
   1d2bc:	e008      	b.n	1d2d0 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   1d2be:	4668      	mov	r0, sp
   1d2c0:	f7ff ff8e 	bl	1d1e0 <nvs_ate_crc8_check>
   1d2c4:	2800      	cmp	r0, #0
   1d2c6:	d0e9      	beq.n	1d29c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   1d2c8:	4629      	mov	r1, r5
   1d2ca:	4620      	mov	r0, r4
   1d2cc:	f7ed ff26 	bl	b11c <nvs_recover_last_ate>
}
   1d2d0:	b003      	add	sp, #12
   1d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d2d4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d2d8:	4605      	mov	r5, r0
   1d2da:	460c      	mov	r4, r1
	offset = fs->offset;
   1d2dc:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d2e0:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d2e4:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, false);
   1d2e6:	2100      	movs	r1, #0
   1d2e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d2ea:	4690      	mov	r8, r2
   1d2ec:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   1d2ee:	f7ff fef0 	bl	1d0d2 <flash_write_protection_set>
	if (rc) {
   1d2f2:	2800      	cmp	r0, #0
   1d2f4:	d134      	bne.n	1d360 <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d2f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d2f8:	0c27      	lsrs	r7, r4, #16
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d2fa:	681b      	ldr	r3, [r3, #0]
	offset += addr & ADDR_OFFS_MASK;
   1d2fc:	fa1a f484 	uxtah	r4, sl, r4
   1d300:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d304:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   1d308:	ea19 0906 	ands.w	r9, r9, r6
   1d30c:	d00c      	beq.n	1d328 <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1d30e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   1d310:	6883      	ldr	r3, [r0, #8]
   1d312:	4642      	mov	r2, r8
   1d314:	685c      	ldr	r4, [r3, #4]
   1d316:	4639      	mov	r1, r7
   1d318:	464b      	mov	r3, r9
   1d31a:	47a0      	blx	r4
		if (rc) {
   1d31c:	4604      	mov	r4, r0
   1d31e:	b9d0      	cbnz	r0, 1d356 <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   1d320:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   1d324:	444f      	add	r7, r9
		data8 += blen;
   1d326:	44c8      	add	r8, r9
	if (len) {
   1d328:	b1ee      	cbz	r6, 1d366 <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   1d32a:	4632      	mov	r2, r6
   1d32c:	4641      	mov	r1, r8
   1d32e:	4668      	mov	r0, sp
   1d330:	f001 f8a6 	bl	1e480 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1d334:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1d336:	eb0d 0006 	add.w	r0, sp, r6
   1d33a:	681a      	ldr	r2, [r3, #0]
   1d33c:	7919      	ldrb	r1, [r3, #4]
   1d33e:	1b92      	subs	r2, r2, r6
   1d340:	f001 f8c9 	bl	1e4d6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1d344:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   1d348:	681b      	ldr	r3, [r3, #0]
   1d34a:	6882      	ldr	r2, [r0, #8]
   1d34c:	4639      	mov	r1, r7
   1d34e:	6854      	ldr	r4, [r2, #4]
   1d350:	466a      	mov	r2, sp
   1d352:	47a0      	blx	r4
   1d354:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   1d356:	2101      	movs	r1, #1
   1d358:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d35a:	f7ff feba 	bl	1d0d2 <flash_write_protection_set>
	return rc;
   1d35e:	4620      	mov	r0, r4
}
   1d360:	b008      	add	sp, #32
   1d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   1d366:	4634      	mov	r4, r6
   1d368:	e7f5      	b.n	1d356 <nvs_flash_al_wrt.part.0+0x82>

0001d36a <nvs_flash_data_wrt>:
{
   1d36a:	b538      	push	{r3, r4, r5, lr}
   1d36c:	4604      	mov	r4, r0
	if (!len) {
   1d36e:	4615      	mov	r5, r2
   1d370:	b12a      	cbz	r2, 1d37e <nvs_flash_data_wrt+0x14>
   1d372:	4613      	mov	r3, r2
   1d374:	460a      	mov	r2, r1
   1d376:	6881      	ldr	r1, [r0, #8]
   1d378:	f7ff ffac 	bl	1d2d4 <nvs_flash_al_wrt.part.0>
   1d37c:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   1d37e:	4629      	mov	r1, r5
   1d380:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d382:	f7ff ff4d 	bl	1d220 <nvs_al_size.isra.0>
   1d386:	68a3      	ldr	r3, [r4, #8]
   1d388:	4403      	add	r3, r0
   1d38a:	60a3      	str	r3, [r4, #8]
}
   1d38c:	4610      	mov	r0, r2
   1d38e:	bd38      	pop	{r3, r4, r5, pc}

0001d390 <nvs_flash_ate_wrt>:
{
   1d390:	b510      	push	{r4, lr}
   1d392:	460a      	mov	r2, r1
	if (!len) {
   1d394:	2308      	movs	r3, #8
   1d396:	6841      	ldr	r1, [r0, #4]
{
   1d398:	4604      	mov	r4, r0
   1d39a:	f7ff ff9b 	bl	1d2d4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1d39e:	2108      	movs	r1, #8
   1d3a0:	4602      	mov	r2, r0
   1d3a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d3a4:	f7ff ff3c 	bl	1d220 <nvs_al_size.isra.0>
   1d3a8:	6863      	ldr	r3, [r4, #4]
   1d3aa:	1a1b      	subs	r3, r3, r0
   1d3ac:	6063      	str	r3, [r4, #4]
}
   1d3ae:	4610      	mov	r0, r2
   1d3b0:	bd10      	pop	{r4, pc}

0001d3b2 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1d3b2:	2300      	movs	r3, #0
   1d3b4:	461a      	mov	r2, r3
   1d3b6:	f7ee b8c5 	b.w	b544 <nvs_write>

0001d3ba <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1d3ba:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1d3bc:	2400      	movs	r4, #0
   1d3be:	9400      	str	r4, [sp, #0]
   1d3c0:	f7ee f98a 	bl	b6d8 <nvs_read_hist>
	return rc;
}
   1d3c4:	b002      	add	sp, #8
   1d3c6:	bd10      	pop	{r4, pc}

0001d3c8 <virtio_get_status>:
}
   1d3c8:	2004      	movs	r0, #4
   1d3ca:	4770      	bx	lr

0001d3cc <virtio_get_features>:
}
   1d3cc:	2001      	movs	r0, #1
   1d3ce:	4770      	bx	lr

0001d3d0 <virtio_set_features>:
}
   1d3d0:	4770      	bx	lr

0001d3d2 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1d3d2:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1d3d4:	21b4      	movs	r1, #180	; 0xb4
   1d3d6:	2004      	movs	r0, #4
   1d3d8:	f7ff fab6 	bl	1c948 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1d3dc:	4604      	mov	r4, r0
   1d3de:	b118      	cbz	r0, 1d3e8 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1d3e0:	22b4      	movs	r2, #180	; 0xb4
   1d3e2:	2100      	movs	r1, #0
   1d3e4:	f001 f877 	bl	1e4d6 <memset>
	}

	return vqs;
}
   1d3e8:	4620      	mov	r0, r4
   1d3ea:	bd10      	pop	{r4, pc}

0001d3ec <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1d3ec:	f003 bf69 	b.w	212c2 <rpmsg_destroy_ept>

0001d3f0 <device_get_binding>:
   1d3f0:	f7fc bbf8 	b.w	19be4 <z_impl_device_get_binding>

0001d3f4 <get_sectors_cb>:
{
   1d3f4:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1d3f6:	6802      	ldr	r2, [r0, #0]
   1d3f8:	684c      	ldr	r4, [r1, #4]
   1d3fa:	42a2      	cmp	r2, r4
   1d3fc:	d316      	bcc.n	1d42c <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1d3fe:	688b      	ldr	r3, [r1, #8]
   1d400:	4423      	add	r3, r4
   1d402:	429a      	cmp	r2, r3
   1d404:	d206      	bcs.n	1d414 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1d406:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1d40a:	42ab      	cmp	r3, r5
   1d40c:	d304      	bcc.n	1d418 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1d40e:	f06f 030b 	mvn.w	r3, #11
   1d412:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1d414:	2000      	movs	r0, #0
   1d416:	e00a      	b.n	1d42e <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d418:	68cd      	ldr	r5, [r1, #12]
   1d41a:	1b12      	subs	r2, r2, r4
   1d41c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1d420:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d422:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   1d426:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   1d428:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1d42a:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1d42c:	2001      	movs	r0, #1
}
   1d42e:	bd70      	pop	{r4, r5, r6, pc}

0001d430 <settings_load>:
	return settings_load_subtree(NULL);
   1d430:	2000      	movs	r0, #0
   1d432:	f7ee bbfd 	b.w	bc30 <settings_load_subtree>

0001d436 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1d436:	2200      	movs	r2, #0
   1d438:	4611      	mov	r1, r2
   1d43a:	f7ee bbbf 	b.w	bbbc <settings_save_one>

0001d43e <settings_name_steq>:
{
   1d43e:	4603      	mov	r3, r0
   1d440:	b530      	push	{r4, r5, lr}
   1d442:	4608      	mov	r0, r1
	if (next) {
   1d444:	b10a      	cbz	r2, 1d44a <settings_name_steq+0xc>
		*next = NULL;
   1d446:	2100      	movs	r1, #0
   1d448:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1d44a:	b163      	cbz	r3, 1d466 <settings_name_steq+0x28>
   1d44c:	b190      	cbz	r0, 1d474 <settings_name_steq+0x36>
   1d44e:	1e41      	subs	r1, r0, #1
   1d450:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1d452:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1d456:	4604      	mov	r4, r0
   1d458:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d45c:	b15d      	cbz	r5, 1d476 <settings_name_steq+0x38>
   1d45e:	429d      	cmp	r5, r3
   1d460:	d101      	bne.n	1d466 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1d462:	2d3d      	cmp	r5, #61	; 0x3d
   1d464:	d1f5      	bne.n	1d452 <settings_name_steq+0x14>
	return 0;
   1d466:	2000      	movs	r0, #0
   1d468:	e004      	b.n	1d474 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1d46a:	2b3d      	cmp	r3, #61	; 0x3d
   1d46c:	d008      	beq.n	1d480 <settings_name_steq+0x42>
   1d46e:	fab3 f083 	clz	r0, r3
   1d472:	0940      	lsrs	r0, r0, #5
}
   1d474:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1d476:	2b2f      	cmp	r3, #47	; 0x2f
   1d478:	d1f7      	bne.n	1d46a <settings_name_steq+0x2c>
		if (next) {
   1d47a:	b10a      	cbz	r2, 1d480 <settings_name_steq+0x42>
			*next = name + 1;
   1d47c:	3401      	adds	r4, #1
   1d47e:	6014      	str	r4, [r2, #0]
		return 1;
   1d480:	2001      	movs	r0, #1
   1d482:	e7f7      	b.n	1d474 <settings_name_steq+0x36>

0001d484 <settings_name_next>:
{
   1d484:	4603      	mov	r3, r0
   1d486:	b530      	push	{r4, r5, lr}
	if (next) {
   1d488:	b109      	cbz	r1, 1d48e <settings_name_next+0xa>
		*next = NULL;
   1d48a:	2200      	movs	r2, #0
   1d48c:	600a      	str	r2, [r1, #0]
	if (!name) {
   1d48e:	b16b      	cbz	r3, 1d4ac <settings_name_next+0x28>
   1d490:	461a      	mov	r2, r3
   1d492:	4614      	mov	r4, r2
   1d494:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1d496:	f812 5b01 	ldrb.w	r5, [r2], #1
   1d49a:	b135      	cbz	r5, 1d4aa <settings_name_next+0x26>
   1d49c:	2d3d      	cmp	r5, #61	; 0x3d
   1d49e:	d004      	beq.n	1d4aa <settings_name_next+0x26>
   1d4a0:	2d2f      	cmp	r5, #47	; 0x2f
   1d4a2:	d1f6      	bne.n	1d492 <settings_name_next+0xe>
		if (next) {
   1d4a4:	b109      	cbz	r1, 1d4aa <settings_name_next+0x26>
			*next = name + 1;
   1d4a6:	3401      	adds	r4, #1
   1d4a8:	600c      	str	r4, [r1, #0]
}
   1d4aa:	bd30      	pop	{r4, r5, pc}
		return 0;
   1d4ac:	4618      	mov	r0, r3
   1d4ae:	e7fc      	b.n	1d4aa <settings_name_next+0x26>

0001d4b0 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d4b0:	4613      	mov	r3, r2
{
   1d4b2:	b510      	push	{r4, lr}
   1d4b4:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d4b6:	460a      	mov	r2, r1
   1d4b8:	8881      	ldrh	r1, [r0, #4]
   1d4ba:	6800      	ldr	r0, [r0, #0]
   1d4bc:	f7ff ff7d 	bl	1d3ba <nvs_read>
}
   1d4c0:	42a0      	cmp	r0, r4
   1d4c2:	bfa8      	it	ge
   1d4c4:	4620      	movge	r0, r4
   1d4c6:	bd10      	pop	{r4, pc}

0001d4c8 <settings_nvs_save>:
{
   1d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4cc:	b097      	sub	sp, #92	; 0x5c
   1d4ce:	4604      	mov	r4, r0
   1d4d0:	469b      	mov	fp, r3
	if (!name) {
   1d4d2:	4689      	mov	r9, r1
{
   1d4d4:	9201      	str	r2, [sp, #4]
	if (!name) {
   1d4d6:	2900      	cmp	r1, #0
   1d4d8:	d069      	beq.n	1d5ae <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   1d4da:	b1da      	cbz	r2, 1d514 <settings_nvs_save+0x4c>
   1d4dc:	fabb f78b 	clz	r7, fp
   1d4e0:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1d4e2:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d4e4:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   1d4e8:	3501      	adds	r5, #1
   1d4ea:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1d4ec:	46a8      	mov	r8, r5
		name_id--;
   1d4ee:	1e6e      	subs	r6, r5, #1
   1d4f0:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1d4f2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1d4f6:	d02e      	beq.n	1d556 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d4f8:	234a      	movs	r3, #74	; 0x4a
   1d4fa:	4631      	mov	r1, r6
   1d4fc:	4650      	mov	r0, sl
   1d4fe:	aa03      	add	r2, sp, #12
   1d500:	f7ff ff5b 	bl	1d3ba <nvs_read>
		if (rc < 0) {
   1d504:	2800      	cmp	r0, #0
   1d506:	da07      	bge.n	1d518 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1d508:	f110 0f02 	cmn.w	r0, #2
   1d50c:	bf08      	it	eq
   1d50e:	46b0      	moveq	r8, r6
   1d510:	4635      	mov	r5, r6
   1d512:	e7ec      	b.n	1d4ee <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1d514:	2701      	movs	r7, #1
   1d516:	e7e4      	b.n	1d4e2 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1d518:	ab16      	add	r3, sp, #88	; 0x58
   1d51a:	4418      	add	r0, r3
   1d51c:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   1d51e:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   1d520:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1d524:	4648      	mov	r0, r9
   1d526:	f000 ff7d 	bl	1e424 <strcmp>
   1d52a:	2800      	cmp	r0, #0
   1d52c:	d1f0      	bne.n	1d510 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1d52e:	2f00      	cmp	r7, #0
   1d530:	d03b      	beq.n	1d5aa <settings_nvs_save+0xe2>
   1d532:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d534:	42b3      	cmp	r3, r6
   1d536:	d142      	bne.n	1d5be <settings_nvs_save+0xf6>
			cf->last_name_id--;
   1d538:	4622      	mov	r2, r4
   1d53a:	1e73      	subs	r3, r6, #1
   1d53c:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1d540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d544:	2302      	movs	r3, #2
   1d546:	4650      	mov	r0, sl
   1d548:	f7ed fffc 	bl	b544 <nvs_write>
			if (rc < 0) {
   1d54c:	2800      	cmp	r0, #0
   1d54e:	da36      	bge.n	1d5be <settings_nvs_save+0xf6>
}
   1d550:	b017      	add	sp, #92	; 0x5c
   1d552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1d556:	bb6f      	cbnz	r7, 1d5b4 <settings_nvs_save+0xec>
	write_name = true;
   1d558:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1d55a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1d55e:	d02b      	beq.n	1d5b8 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1d560:	f104 0508 	add.w	r5, r4, #8
   1d564:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1d568:	465b      	mov	r3, fp
   1d56a:	4628      	mov	r0, r5
   1d56c:	9a01      	ldr	r2, [sp, #4]
   1d56e:	b289      	uxth	r1, r1
   1d570:	f7ed ffe8 	bl	b544 <nvs_write>
	if (rc < 0) {
   1d574:	2800      	cmp	r0, #0
   1d576:	dbeb      	blt.n	1d550 <settings_nvs_save+0x88>
	if (write_name) {
   1d578:	b157      	cbz	r7, 1d590 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1d57a:	4648      	mov	r0, r9
   1d57c:	f000 ff42 	bl	1e404 <strlen>
   1d580:	464a      	mov	r2, r9
   1d582:	4603      	mov	r3, r0
   1d584:	4641      	mov	r1, r8
   1d586:	4628      	mov	r0, r5
   1d588:	f7ed ffdc 	bl	b544 <nvs_write>
		if (rc < 0) {
   1d58c:	2800      	cmp	r0, #0
   1d58e:	dbdf      	blt.n	1d550 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1d590:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d592:	4543      	cmp	r3, r8
   1d594:	d220      	bcs.n	1d5d8 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   1d596:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d598:	2302      	movs	r3, #2
   1d59a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d59e:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   1d5a0:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d5a4:	f7ed ffce 	bl	b544 <nvs_write>
   1d5a8:	e016      	b.n	1d5d8 <settings_nvs_save+0x110>
   1d5aa:	46b0      	mov	r8, r6
   1d5ac:	e7d5      	b.n	1d55a <settings_nvs_save+0x92>
		return -EINVAL;
   1d5ae:	f06f 0015 	mvn.w	r0, #21
   1d5b2:	e7cd      	b.n	1d550 <settings_nvs_save+0x88>
		return 0;
   1d5b4:	2000      	movs	r0, #0
   1d5b6:	e7cb      	b.n	1d550 <settings_nvs_save+0x88>
		return -ENOMEM;
   1d5b8:	f06f 000b 	mvn.w	r0, #11
   1d5bc:	e7c8      	b.n	1d550 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1d5be:	4631      	mov	r1, r6
   1d5c0:	4650      	mov	r0, sl
   1d5c2:	f7ff fef6 	bl	1d3b2 <nvs_delete>
			if (rc >= 0) {
   1d5c6:	2800      	cmp	r0, #0
   1d5c8:	dbc2      	blt.n	1d550 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1d5ca:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1d5ce:	313f      	adds	r1, #63	; 0x3f
   1d5d0:	4650      	mov	r0, sl
   1d5d2:	b289      	uxth	r1, r1
   1d5d4:	f7ff feed 	bl	1d3b2 <nvs_delete>
	if (rc < 0) {
   1d5d8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1d5dc:	e7b8      	b.n	1d550 <settings_nvs_save+0x88>

0001d5de <settings_nvs_backend_init>:
{
   1d5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d5e0:	f100 0608 	add.w	r6, r0, #8
   1d5e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1d5e6:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d5e8:	4630      	mov	r0, r6
   1d5ea:	f7ed fe6f 	bl	b2cc <nvs_init>
	if (rc) {
   1d5ee:	4605      	mov	r5, r0
   1d5f0:	b970      	cbnz	r0, 1d610 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1d5f2:	2302      	movs	r3, #2
   1d5f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d5f8:	4630      	mov	r0, r6
   1d5fa:	f10d 0206 	add.w	r2, sp, #6
   1d5fe:	f7ff fedc 	bl	1d3ba <nvs_read>
	if (rc < 0) {
   1d602:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   1d604:	bfb4      	ite	lt
   1d606:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1d60a:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   1d60e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   1d610:	4628      	mov	r0, r5
   1d612:	b002      	add	sp, #8
   1d614:	bd70      	pop	{r4, r5, r6, pc}

0001d616 <set_on_state>:
	__asm__ volatile(
   1d616:	f04f 0320 	mov.w	r3, #32
   1d61a:	f3ef 8211 	mrs	r2, BASEPRI
   1d61e:	f383 8811 	msr	BASEPRI, r3
   1d622:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d626:	6803      	ldr	r3, [r0, #0]
   1d628:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d62c:	f043 0302 	orr.w	r3, r3, #2
   1d630:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d632:	f382 8811 	msr	BASEPRI, r2
   1d636:	f3bf 8f6f 	isb	sy
}
   1d63a:	4770      	bx	lr

0001d63c <async_start>:
{
   1d63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d63e:	9f06      	ldr	r7, [sp, #24]
   1d640:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1d642:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1d644:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d646:	f04f 0020 	mov.w	r0, #32
   1d64a:	f3ef 8c11 	mrs	ip, BASEPRI
   1d64e:	f380 8811 	msr	BASEPRI, r0
   1d652:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d656:	260c      	movs	r6, #12
   1d658:	fb06 4601 	mla	r6, r6, r1, r4
   1d65c:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d660:	f000 0e07 	and.w	lr, r0, #7
   1d664:	f1be 0f01 	cmp.w	lr, #1
   1d668:	d111      	bne.n	1d68e <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d66a:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1d66e:	2600      	movs	r6, #0
	__asm__ volatile(
   1d670:	f38c 8811 	msr	BASEPRI, ip
   1d674:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d678:	b93e      	cbnz	r6, 1d68a <async_start+0x4e>
	subdata->cb = cb;
   1d67a:	200c      	movs	r0, #12
   1d67c:	4341      	muls	r1, r0
   1d67e:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1d680:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1d684:	686b      	ldr	r3, [r5, #4]
   1d686:	585b      	ldr	r3, [r3, r1]
   1d688:	4798      	blx	r3
}
   1d68a:	4630      	mov	r0, r6
   1d68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d68e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1d692:	4287      	cmp	r7, r0
   1d694:	bf14      	ite	ne
   1d696:	f04f 36ff 	movne.w	r6, #4294967295
   1d69a:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1d69e:	e7e7      	b.n	1d670 <async_start+0x34>

0001d6a0 <api_start>:
{
   1d6a0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d6a2:	2480      	movs	r4, #128	; 0x80
   1d6a4:	9400      	str	r4, [sp, #0]
   1d6a6:	f7ff ffc9 	bl	1d63c <async_start>
}
   1d6aa:	b002      	add	sp, #8
   1d6ac:	bd10      	pop	{r4, pc}

0001d6ae <onoff_started_callback>:
	return &data->mgr[type];
   1d6ae:	68c0      	ldr	r0, [r0, #12]
   1d6b0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d6b2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1d6b6:	2100      	movs	r1, #0
   1d6b8:	4710      	bx	r2

0001d6ba <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d6ba:	2003      	movs	r0, #3
   1d6bc:	f7fb bbe2 	b.w	18e84 <nrfx_clock_start>

0001d6c0 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d6c0:	2002      	movs	r0, #2
   1d6c2:	f7fb bbdf 	b.w	18e84 <nrfx_clock_start>

0001d6c6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d6c6:	2000      	movs	r0, #0
   1d6c8:	f7fb bbdc 	b.w	18e84 <nrfx_clock_start>

0001d6cc <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d6cc:	2003      	movs	r0, #3
   1d6ce:	f7fb bc43 	b.w	18f58 <nrfx_clock_stop>

0001d6d2 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d6d2:	2002      	movs	r0, #2
   1d6d4:	f7fb bc40 	b.w	18f58 <nrfx_clock_stop>

0001d6d8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d6d8:	2000      	movs	r0, #0
   1d6da:	f7fb bc3d 	b.w	18f58 <nrfx_clock_stop>

0001d6de <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d6de:	2280      	movs	r2, #128	; 0x80
   1d6e0:	f7ee bd16 	b.w	c110 <stop>

0001d6e4 <blocking_start_callback>:
{
   1d6e4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d6e6:	f7fe b853 	b.w	1b790 <z_impl_k_sem_give>

0001d6ea <bt_rpmsg_open>:
{
   1d6ea:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1d6ec:	f7ef f810 	bl	c710 <bt_rpmsg_platform_endpoint_is_bound>
   1d6f0:	b108      	cbz	r0, 1d6f6 <bt_rpmsg_open+0xc>
}
   1d6f2:	2000      	movs	r0, #0
   1d6f4:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1d6f6:	2100      	movs	r1, #0
   1d6f8:	2021      	movs	r0, #33	; 0x21
   1d6fa:	f7fe f813 	bl	1b724 <z_impl_k_sleep>
   1d6fe:	e7f5      	b.n	1d6ec <bt_rpmsg_open+0x2>

0001d700 <endpoint_cb>:
{
   1d700:	b508      	push	{r3, lr}
   1d702:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1d704:	4611      	mov	r1, r2
   1d706:	f7ee ff19 	bl	c53c <bt_rpmsg_rx>
}
   1d70a:	2000      	movs	r0, #0
   1d70c:	bd08      	pop	{r3, pc}

0001d70e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d70e:	4770      	bx	lr

0001d710 <attr_find_by_handle>:
{
   1d710:	b570      	push	{r4, r5, r6, lr}
   1d712:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1d714:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1d718:	b1a8      	cbz	r0, 1d746 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1d71a:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1d71c:	3801      	subs	r0, #1
	while (upper >= lower) {
   1d71e:	4286      	cmp	r6, r0
   1d720:	dd01      	ble.n	1d726 <attr_find_by_handle+0x16>
		return NULL;
   1d722:	2000      	movs	r0, #0
   1d724:	e00f      	b.n	1d746 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1d726:	1832      	adds	r2, r6, r0
   1d728:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1d72c:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1d72e:	1cd5      	adds	r5, r2, #3
   1d730:	00eb      	lsls	r3, r5, #3
   1d732:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1d736:	892d      	ldrh	r5, [r5, #8]
   1d738:	428d      	cmp	r5, r1
   1d73a:	d201      	bcs.n	1d740 <attr_find_by_handle+0x30>
			lower = m + 1;
   1d73c:	1c56      	adds	r6, r2, #1
   1d73e:	e7ee      	b.n	1d71e <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1d740:	d802      	bhi.n	1d748 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1d742:	3304      	adds	r3, #4
   1d744:	18e0      	adds	r0, r4, r3
}
   1d746:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1d748:	1e50      	subs	r0, r2, #1
   1d74a:	e7e8      	b.n	1d71e <attr_find_by_handle+0xe>

0001d74c <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1d74c:	2300      	movs	r3, #0
{
   1d74e:	b510      	push	{r4, lr}
   1d750:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1d752:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1d756:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1d75a:	b910      	cbnz	r0, 1d762 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1d75c:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1d760:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d762:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1d766:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d768:	4290      	cmp	r0, r2
	list->head = node;
   1d76a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1d76e:	bf08      	it	eq
   1d770:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1d774:	f004 f84f 	bl	21816 <k_free>
   1d778:	e7ed      	b.n	1d756 <svc_attr_memory_release+0xa>

0001d77a <atomic_and>:
{
   1d77a:	4603      	mov	r3, r0
}
   1d77c:	e8d3 0fef 	ldaex	r0, [r3]
   1d780:	ea00 0201 	and.w	r2, r0, r1
   1d784:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d788:	f1bc 0f00 	cmp.w	ip, #0
   1d78c:	d1f6      	bne.n	1d77c <atomic_and+0x2>
   1d78e:	4770      	bx	lr

0001d790 <discovery_complete_not_found>:
{
   1d790:	b510      	push	{r4, lr}
   1d792:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1d794:	f7ff ffda 	bl	1d74c <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d798:	f06f 0101 	mvn.w	r1, #1
   1d79c:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1d7a0:	f7ff ffeb 	bl	1d77a <atomic_and>
	if (dm->callback->service_not_found) {
   1d7a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1d7a8:	685b      	ldr	r3, [r3, #4]
   1d7aa:	b123      	cbz	r3, 1d7b6 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1d7ac:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1d7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1d7b4:	4718      	bx	r3
}
   1d7b6:	bd10      	pop	{r4, pc}

0001d7b8 <bt_gatt_dm_attr_service_val>:
{
   1d7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d7ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d7be:	2400      	movs	r4, #0
{
   1d7c0:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d7c2:	6801      	ldr	r1, [r0, #0]
   1d7c4:	4668      	mov	r0, sp
   1d7c6:	f88d 4000 	strb.w	r4, [sp]
   1d7ca:	f8ad 3002 	strh.w	r3, [sp, #2]
   1d7ce:	f000 fef2 	bl	1e5b6 <bt_uuid_cmp>
   1d7d2:	b918      	cbnz	r0, 1d7dc <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1d7d4:	6828      	ldr	r0, [r5, #0]
   1d7d6:	3808      	subs	r0, #8
}
   1d7d8:	b003      	add	sp, #12
   1d7da:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1d7dc:	f642 0301 	movw	r3, #10241	; 0x2801
   1d7e0:	6829      	ldr	r1, [r5, #0]
   1d7e2:	a801      	add	r0, sp, #4
   1d7e4:	f88d 4004 	strb.w	r4, [sp, #4]
   1d7e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d7ec:	f000 fee3 	bl	1e5b6 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d7f0:	2800      	cmp	r0, #0
   1d7f2:	d0ef      	beq.n	1d7d4 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1d7f4:	4620      	mov	r0, r4
   1d7f6:	e7ef      	b.n	1d7d8 <bt_gatt_dm_attr_service_val+0x20>

0001d7f8 <bt_gatt_dm_attr_chrc_val>:
{
   1d7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1d7fa:	f642 0303 	movw	r3, #10243	; 0x2803
   1d7fe:	2400      	movs	r4, #0
{
   1d800:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1d802:	6801      	ldr	r1, [r0, #0]
   1d804:	a801      	add	r0, sp, #4
   1d806:	f88d 4004 	strb.w	r4, [sp, #4]
   1d80a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d80e:	f000 fed2 	bl	1e5b6 <bt_uuid_cmp>
   1d812:	b918      	cbnz	r0, 1d81c <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1d814:	6828      	ldr	r0, [r5, #0]
   1d816:	3808      	subs	r0, #8
}
   1d818:	b003      	add	sp, #12
   1d81a:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1d81c:	4620      	mov	r0, r4
   1d81e:	e7fb      	b.n	1d818 <bt_gatt_dm_attr_chrc_val+0x20>

0001d820 <bt_gatt_dm_conn_get>:
}
   1d820:	6800      	ldr	r0, [r0, #0]
   1d822:	4770      	bx	lr

0001d824 <bt_gatt_dm_char_next>:
{
   1d824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1d826:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1d82a:	b131      	cbz	r1, 1d83a <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1d82c:	42a9      	cmp	r1, r5
   1d82e:	d203      	bcs.n	1d838 <bt_gatt_dm_char_next+0x14>
	return NULL;
   1d830:	2500      	movs	r5, #0
}
   1d832:	4628      	mov	r0, r5
   1d834:	b003      	add	sp, #12
   1d836:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d838:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1d83a:	2600      	movs	r6, #0
   1d83c:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1d840:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1d844:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1d848:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1d84c:	3508      	adds	r5, #8
   1d84e:	42ac      	cmp	r4, r5
   1d850:	d9ee      	bls.n	1d830 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1d852:	6829      	ldr	r1, [r5, #0]
   1d854:	a801      	add	r0, sp, #4
   1d856:	f88d 6004 	strb.w	r6, [sp, #4]
   1d85a:	f8ad 7006 	strh.w	r7, [sp, #6]
   1d85e:	f000 feaa 	bl	1e5b6 <bt_uuid_cmp>
   1d862:	2800      	cmp	r0, #0
   1d864:	d1f2      	bne.n	1d84c <bt_gatt_dm_char_next+0x28>
   1d866:	e7e4      	b.n	1d832 <bt_gatt_dm_char_next+0xe>

0001d868 <bt_gatt_dm_attr_next>:
{
   1d868:	4602      	mov	r2, r0
		prev = dm->attrs;
   1d86a:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1d86e:	b111      	cbz	r1, 1d876 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1d870:	4299      	cmp	r1, r3
   1d872:	d30b      	bcc.n	1d88c <bt_gatt_dm_attr_next+0x24>
   1d874:	460b      	mov	r3, r1
		if (++prev < end) {
   1d876:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1d87a:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1d87e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d882:	321c      	adds	r2, #28
	return NULL;
   1d884:	4290      	cmp	r0, r2
   1d886:	bf28      	it	cs
   1d888:	2000      	movcs	r0, #0
   1d88a:	4770      	bx	lr
   1d88c:	2000      	movs	r0, #0
}
   1d88e:	4770      	bx	lr

0001d890 <bt_gatt_dm_desc_next>:
{
   1d890:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1d892:	f7ff ffe9 	bl	1d868 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1d896:	4604      	mov	r4, r0
   1d898:	b158      	cbz	r0, 1d8b2 <bt_gatt_dm_desc_next+0x22>
   1d89a:	2300      	movs	r3, #0
   1d89c:	f88d 3004 	strb.w	r3, [sp, #4]
   1d8a0:	f642 0303 	movw	r3, #10243	; 0x2803
   1d8a4:	6801      	ldr	r1, [r0, #0]
   1d8a6:	a801      	add	r0, sp, #4
   1d8a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d8ac:	f000 fe83 	bl	1e5b6 <bt_uuid_cmp>
   1d8b0:	b900      	cbnz	r0, 1d8b4 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1d8b2:	2400      	movs	r4, #0
}
   1d8b4:	4620      	mov	r0, r4
   1d8b6:	b002      	add	sp, #8
   1d8b8:	bd10      	pop	{r4, pc}

0001d8ba <bt_gatt_dm_desc_by_uuid>:
{
   1d8ba:	b570      	push	{r4, r5, r6, lr}
   1d8bc:	4605      	mov	r5, r0
   1d8be:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1d8c0:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1d8c2:	4621      	mov	r1, r4
   1d8c4:	4628      	mov	r0, r5
   1d8c6:	f7ff ffe3 	bl	1d890 <bt_gatt_dm_desc_next>
   1d8ca:	4604      	mov	r4, r0
   1d8cc:	b128      	cbz	r0, 1d8da <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1d8ce:	4630      	mov	r0, r6
   1d8d0:	6821      	ldr	r1, [r4, #0]
   1d8d2:	f000 fe70 	bl	1e5b6 <bt_uuid_cmp>
   1d8d6:	2800      	cmp	r0, #0
   1d8d8:	d1f3      	bne.n	1d8c2 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1d8da:	4620      	mov	r0, r4
   1d8dc:	bd70      	pop	{r4, r5, r6, pc}

0001d8de <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1d8de:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1d8e0:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1d8e4:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d8e6:	f06f 0102 	mvn.w	r1, #2
   1d8ea:	4628      	mov	r0, r5
   1d8ec:	f7ff ff45 	bl	1d77a <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1d8f0:	0783      	lsls	r3, r0, #30
   1d8f2:	d509      	bpl.n	1d908 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1d8f4:	4620      	mov	r0, r4
   1d8f6:	f7ff ff29 	bl	1d74c <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d8fa:	f06f 0101 	mvn.w	r1, #1
   1d8fe:	4628      	mov	r0, r5
   1d900:	f7ff ff3b 	bl	1d77a <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1d904:	2000      	movs	r0, #0
}
   1d906:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1d908:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d90c:	e7fb      	b.n	1d906 <bt_gatt_dm_data_release+0x28>

0001d90e <bt_scan_stop>:
	return bt_le_scan_stop();
   1d90e:	f7f3 bac1 	b.w	10e94 <bt_le_scan_stop>

0001d912 <spm_request_read>:
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   1d912:	b510      	push	{r4, lr}
   1d914:	b40f      	push	{r0, r1, r2, r3}
   1d916:	f7fc ffdb 	bl	1a8d0 <k_sched_lock>
   1d91a:	bc0f      	pop	{r0, r1, r2, r3}
   1d91c:	f7ea fb64 	bl	7fe8 <spm_request_read_nse>
   1d920:	b40f      	push	{r0, r1, r2, r3}
   1d922:	f7fd f8cd 	bl	1aac0 <k_sched_unlock>
   1d926:	bc0f      	pop	{r0, r1, r2, r3}
   1d928:	bd10      	pop	{r4, pc}

0001d92a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1d92a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1d92c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1d92e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1d930:	bf9c      	itt	ls
   1d932:	6880      	ldrls	r0, [r0, #8]
   1d934:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1d936:	3b01      	subs	r3, #1
   1d938:	1a98      	subs	r0, r3, r2
}
   1d93a:	4770      	bx	lr

0001d93c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1d940:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d944:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1d946:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1d94a:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1d94c:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1d94e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d950:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1d952:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1d954:	d904      	bls.n	1d960 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1d956:	f000 fd93 	bl	1e480 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1d95a:	60ec      	str	r4, [r5, #12]
}
   1d95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1d960:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1d962:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1d966:	f000 fd8b 	bl	1e480 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1d96a:	4622      	mov	r2, r4
   1d96c:	6868      	ldr	r0, [r5, #4]
   1d96e:	eb07 0108 	add.w	r1, r7, r8
   1d972:	e7f0      	b.n	1d956 <_WriteNoCheck+0x1a>

0001d974 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1d974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d978:	4606      	mov	r6, r0
   1d97a:	4689      	mov	r9, r1
   1d97c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1d97e:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1d982:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1d984:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d986:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1d988:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d98a:	bf28      	it	cs
   1d98c:	18e4      	addcs	r4, r4, r3
   1d98e:	3c01      	subs	r4, #1
   1d990:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1d992:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1d994:	42bc      	cmp	r4, r7
   1d996:	bf28      	it	cs
   1d998:	463c      	movcs	r4, r7
   1d99a:	4294      	cmp	r4, r2
   1d99c:	bf28      	it	cs
   1d99e:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1d9a0:	6870      	ldr	r0, [r6, #4]
   1d9a2:	4649      	mov	r1, r9
   1d9a4:	4428      	add	r0, r5
   1d9a6:	4622      	mov	r2, r4
   1d9a8:	f000 fd6a 	bl	1e480 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1d9ac:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1d9ae:	4425      	add	r5, r4
      WrOff = 0u;
   1d9b0:	42ab      	cmp	r3, r5
   1d9b2:	bf08      	it	eq
   1d9b4:	2500      	moveq	r5, #0
  } while (NumBytes);
   1d9b6:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1d9b8:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1d9ba:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1d9bc:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1d9be:	d1e1      	bne.n	1d984 <_WriteBlocking+0x10>
}
   1d9c0:	4640      	mov	r0, r8
   1d9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d9c6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1d9c6:	f7ef bdbd 	b.w	d544 <_DoInit>

0001d9ca <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1d9ca:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1d9cc:	f7ff fffb 	bl	1d9c6 <SEGGER_RTT_Init>

	return 0;
}
   1d9d0:	2000      	movs	r0, #0
   1d9d2:	bd08      	pop	{r3, pc}

0001d9d4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d9d4:	b538      	push	{r3, r4, r5, lr}
   1d9d6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d9d8:	42ab      	cmp	r3, r5
{
   1d9da:	4611      	mov	r1, r2
   1d9dc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d9de:	d804      	bhi.n	1d9ea <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d9e0:	461a      	mov	r2, r3
   1d9e2:	f000 fd4d 	bl	1e480 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d9e6:	4620      	mov	r0, r4
   1d9e8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d9ea:	2400      	movs	r4, #0
   1d9ec:	e7fb      	b.n	1d9e6 <_copy+0x12>

0001d9ee <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d9ee:	f000 bd72 	b.w	1e4d6 <memset>

0001d9f2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d9f2:	09c3      	lsrs	r3, r0, #7
   1d9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d9f8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d9fc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1da00:	b2c0      	uxtb	r0, r0
   1da02:	4770      	bx	lr

0001da04 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1da04:	78cb      	ldrb	r3, [r1, #3]
   1da06:	7802      	ldrb	r2, [r0, #0]
   1da08:	4053      	eors	r3, r2
   1da0a:	7003      	strb	r3, [r0, #0]
   1da0c:	884b      	ldrh	r3, [r1, #2]
   1da0e:	7842      	ldrb	r2, [r0, #1]
   1da10:	4053      	eors	r3, r2
   1da12:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1da14:	680a      	ldr	r2, [r1, #0]
   1da16:	7883      	ldrb	r3, [r0, #2]
   1da18:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1da1c:	7083      	strb	r3, [r0, #2]
   1da1e:	680a      	ldr	r2, [r1, #0]
   1da20:	78c3      	ldrb	r3, [r0, #3]
   1da22:	4053      	eors	r3, r2
   1da24:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1da26:	79cb      	ldrb	r3, [r1, #7]
   1da28:	7902      	ldrb	r2, [r0, #4]
   1da2a:	4053      	eors	r3, r2
   1da2c:	7103      	strb	r3, [r0, #4]
   1da2e:	88cb      	ldrh	r3, [r1, #6]
   1da30:	7942      	ldrb	r2, [r0, #5]
   1da32:	4053      	eors	r3, r2
   1da34:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1da36:	684a      	ldr	r2, [r1, #4]
   1da38:	7983      	ldrb	r3, [r0, #6]
   1da3a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1da3e:	7183      	strb	r3, [r0, #6]
   1da40:	684a      	ldr	r2, [r1, #4]
   1da42:	79c3      	ldrb	r3, [r0, #7]
   1da44:	4053      	eors	r3, r2
   1da46:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1da48:	7acb      	ldrb	r3, [r1, #11]
   1da4a:	7a02      	ldrb	r2, [r0, #8]
   1da4c:	4053      	eors	r3, r2
   1da4e:	7203      	strb	r3, [r0, #8]
   1da50:	7a42      	ldrb	r2, [r0, #9]
   1da52:	894b      	ldrh	r3, [r1, #10]
   1da54:	4053      	eors	r3, r2
   1da56:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1da58:	688a      	ldr	r2, [r1, #8]
   1da5a:	7a83      	ldrb	r3, [r0, #10]
   1da5c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1da60:	7283      	strb	r3, [r0, #10]
   1da62:	688a      	ldr	r2, [r1, #8]
   1da64:	7ac3      	ldrb	r3, [r0, #11]
   1da66:	4053      	eors	r3, r2
   1da68:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1da6a:	7bcb      	ldrb	r3, [r1, #15]
   1da6c:	7b02      	ldrb	r2, [r0, #12]
   1da6e:	4053      	eors	r3, r2
   1da70:	7303      	strb	r3, [r0, #12]
   1da72:	89cb      	ldrh	r3, [r1, #14]
   1da74:	7b42      	ldrb	r2, [r0, #13]
   1da76:	4053      	eors	r3, r2
   1da78:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1da7a:	68ca      	ldr	r2, [r1, #12]
   1da7c:	7b83      	ldrb	r3, [r0, #14]
   1da7e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1da82:	7383      	strb	r3, [r0, #14]
   1da84:	68ca      	ldr	r2, [r1, #12]
   1da86:	7bc3      	ldrb	r3, [r0, #15]
   1da88:	4053      	eors	r3, r2
   1da8a:	73c3      	strb	r3, [r0, #15]
}
   1da8c:	4770      	bx	lr

0001da8e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1da8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1da90:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1da92:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1da94:	f88d 2000 	strb.w	r2, [sp]
   1da98:	7942      	ldrb	r2, [r0, #5]
   1da9a:	f88d 2001 	strb.w	r2, [sp, #1]
   1da9e:	7a82      	ldrb	r2, [r0, #10]
   1daa0:	f88d 2002 	strb.w	r2, [sp, #2]
   1daa4:	7bc2      	ldrb	r2, [r0, #15]
   1daa6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1daaa:	7902      	ldrb	r2, [r0, #4]
   1daac:	f88d 2004 	strb.w	r2, [sp, #4]
   1dab0:	7a42      	ldrb	r2, [r0, #9]
   1dab2:	f88d 2005 	strb.w	r2, [sp, #5]
   1dab6:	7b82      	ldrb	r2, [r0, #14]
   1dab8:	f88d 2006 	strb.w	r2, [sp, #6]
   1dabc:	78c2      	ldrb	r2, [r0, #3]
   1dabe:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1dac2:	7a02      	ldrb	r2, [r0, #8]
   1dac4:	f88d 2008 	strb.w	r2, [sp, #8]
   1dac8:	7b42      	ldrb	r2, [r0, #13]
   1daca:	f88d 2009 	strb.w	r2, [sp, #9]
   1dace:	7882      	ldrb	r2, [r0, #2]
   1dad0:	f88d 200a 	strb.w	r2, [sp, #10]
   1dad4:	79c2      	ldrb	r2, [r0, #7]
   1dad6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1dada:	7b02      	ldrb	r2, [r0, #12]
   1dadc:	f88d 200c 	strb.w	r2, [sp, #12]
   1dae0:	7842      	ldrb	r2, [r0, #1]
   1dae2:	f88d 200d 	strb.w	r2, [sp, #13]
   1dae6:	7982      	ldrb	r2, [r0, #6]
   1dae8:	f88d 200e 	strb.w	r2, [sp, #14]
   1daec:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1daf0:	2310      	movs	r3, #16
   1daf2:	466a      	mov	r2, sp
   1daf4:	4619      	mov	r1, r3
   1daf6:	f7ff ff6d 	bl	1d9d4 <_copy>
}
   1dafa:	b005      	add	sp, #20
   1dafc:	f85d fb04 	ldr.w	pc, [sp], #4

0001db00 <mult_row_column>:
{
   1db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db02:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1db04:	7808      	ldrb	r0, [r1, #0]
{
   1db06:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1db08:	f7ff ff73 	bl	1d9f2 <_double_byte>
   1db0c:	4605      	mov	r5, r0
   1db0e:	7860      	ldrb	r0, [r4, #1]
   1db10:	f7ff ff6f 	bl	1d9f2 <_double_byte>
   1db14:	78a2      	ldrb	r2, [r4, #2]
   1db16:	7863      	ldrb	r3, [r4, #1]
   1db18:	4053      	eors	r3, r2
   1db1a:	78e2      	ldrb	r2, [r4, #3]
   1db1c:	4053      	eors	r3, r2
   1db1e:	405d      	eors	r5, r3
   1db20:	4045      	eors	r5, r0
   1db22:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1db24:	7860      	ldrb	r0, [r4, #1]
   1db26:	7827      	ldrb	r7, [r4, #0]
   1db28:	f7ff ff63 	bl	1d9f2 <_double_byte>
   1db2c:	4605      	mov	r5, r0
   1db2e:	78a0      	ldrb	r0, [r4, #2]
   1db30:	f7ff ff5f 	bl	1d9f2 <_double_byte>
   1db34:	78a3      	ldrb	r3, [r4, #2]
   1db36:	405f      	eors	r7, r3
   1db38:	78e3      	ldrb	r3, [r4, #3]
   1db3a:	405f      	eors	r7, r3
   1db3c:	407d      	eors	r5, r7
   1db3e:	4045      	eors	r5, r0
   1db40:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1db42:	78a0      	ldrb	r0, [r4, #2]
   1db44:	7865      	ldrb	r5, [r4, #1]
   1db46:	7827      	ldrb	r7, [r4, #0]
   1db48:	f7ff ff53 	bl	1d9f2 <_double_byte>
   1db4c:	406f      	eors	r7, r5
   1db4e:	4605      	mov	r5, r0
   1db50:	78e0      	ldrb	r0, [r4, #3]
   1db52:	f7ff ff4e 	bl	1d9f2 <_double_byte>
   1db56:	78e3      	ldrb	r3, [r4, #3]
   1db58:	405f      	eors	r7, r3
   1db5a:	407d      	eors	r5, r7
   1db5c:	4045      	eors	r5, r0
   1db5e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1db60:	7820      	ldrb	r0, [r4, #0]
   1db62:	f7ff ff46 	bl	1d9f2 <_double_byte>
   1db66:	7863      	ldrb	r3, [r4, #1]
   1db68:	7825      	ldrb	r5, [r4, #0]
   1db6a:	405d      	eors	r5, r3
   1db6c:	78a3      	ldrb	r3, [r4, #2]
   1db6e:	405d      	eors	r5, r3
   1db70:	4045      	eors	r5, r0
   1db72:	78e0      	ldrb	r0, [r4, #3]
   1db74:	f7ff ff3d 	bl	1d9f2 <_double_byte>
   1db78:	b2ed      	uxtb	r5, r5
   1db7a:	4045      	eors	r5, r0
   1db7c:	70f5      	strb	r5, [r6, #3]
}
   1db7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001db80 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1db80:	b570      	push	{r4, r5, r6, lr}
   1db82:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1db84:	4605      	mov	r5, r0
{
   1db86:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1db88:	2800      	cmp	r0, #0
   1db8a:	d049      	beq.n	1dc20 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1db8c:	2900      	cmp	r1, #0
   1db8e:	d049      	beq.n	1dc24 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1db90:	2a00      	cmp	r2, #0
   1db92:	d049      	beq.n	1dc28 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1db94:	2310      	movs	r3, #16
   1db96:	460a      	mov	r2, r1
   1db98:	4668      	mov	r0, sp
   1db9a:	4619      	mov	r1, r3
   1db9c:	f7ff ff1a 	bl	1d9d4 <_copy>
	add_round_key(state, s->words);
   1dba0:	4621      	mov	r1, r4
   1dba2:	4668      	mov	r0, sp
   1dba4:	f7ff ff2e 	bl	1da04 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1dba8:	3410      	adds	r4, #16
   1dbaa:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1dbae:	4668      	mov	r0, sp
   1dbb0:	f7ef fd28 	bl	d604 <sub_bytes>
		shift_rows(state);
   1dbb4:	4668      	mov	r0, sp
   1dbb6:	f7ff ff6a 	bl	1da8e <shift_rows>
	mult_row_column(t, s);
   1dbba:	4669      	mov	r1, sp
   1dbbc:	a804      	add	r0, sp, #16
   1dbbe:	f7ff ff9f 	bl	1db00 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1dbc2:	a901      	add	r1, sp, #4
   1dbc4:	a805      	add	r0, sp, #20
   1dbc6:	f7ff ff9b 	bl	1db00 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1dbca:	a902      	add	r1, sp, #8
   1dbcc:	a806      	add	r0, sp, #24
   1dbce:	f7ff ff97 	bl	1db00 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1dbd2:	a903      	add	r1, sp, #12
   1dbd4:	a807      	add	r0, sp, #28
   1dbd6:	f7ff ff93 	bl	1db00 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1dbda:	2310      	movs	r3, #16
   1dbdc:	4668      	mov	r0, sp
   1dbde:	4619      	mov	r1, r3
   1dbe0:	eb0d 0203 	add.w	r2, sp, r3
   1dbe4:	f7ff fef6 	bl	1d9d4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1dbe8:	4621      	mov	r1, r4
   1dbea:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1dbec:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1dbee:	f7ff ff09 	bl	1da04 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1dbf2:	42a6      	cmp	r6, r4
   1dbf4:	d1db      	bne.n	1dbae <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1dbf6:	f7ef fd05 	bl	d604 <sub_bytes>
	shift_rows(state);
   1dbfa:	4668      	mov	r0, sp
   1dbfc:	f7ff ff47 	bl	1da8e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1dc00:	4631      	mov	r1, r6
   1dc02:	4668      	mov	r0, sp
   1dc04:	f7ff fefe 	bl	1da04 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1dc08:	2310      	movs	r3, #16
   1dc0a:	466a      	mov	r2, sp
   1dc0c:	4619      	mov	r1, r3
   1dc0e:	4628      	mov	r0, r5
   1dc10:	f7ff fee0 	bl	1d9d4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1dc14:	4668      	mov	r0, sp
   1dc16:	2210      	movs	r2, #16
   1dc18:	2100      	movs	r1, #0
   1dc1a:	f7ff fee8 	bl	1d9ee <_set>

	return TC_CRYPTO_SUCCESS;
   1dc1e:	2001      	movs	r0, #1
}
   1dc20:	b008      	add	sp, #32
   1dc22:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1dc24:	4608      	mov	r0, r1
   1dc26:	e7fb      	b.n	1dc20 <tc_aes_encrypt+0xa0>
   1dc28:	4610      	mov	r0, r2
   1dc2a:	e7f9      	b.n	1dc20 <tc_aes_encrypt+0xa0>

0001dc2c <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dc2c:	460a      	mov	r2, r1
{
   1dc2e:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dc30:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1dc34:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	bfb4      	ite	lt
   1dc3a:	2387      	movlt	r3, #135	; 0x87
   1dc3c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1dc3e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1dc42:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1dc46:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1dc48:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1dc4c:	d002      	beq.n	1dc54 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1dc4e:	7813      	ldrb	r3, [r2, #0]
   1dc50:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1dc52:	e7f4      	b.n	1dc3e <gf_double+0x12>
	}
}
   1dc54:	bd10      	pop	{r4, pc}

0001dc56 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1dc56:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1dc58:	b120      	cbz	r0, 1dc64 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1dc5a:	2258      	movs	r2, #88	; 0x58
   1dc5c:	2100      	movs	r1, #0
   1dc5e:	f7ff fec6 	bl	1d9ee <_set>
   1dc62:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1dc64:	bd08      	pop	{r3, pc}

0001dc66 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1dc66:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1dc68:	4604      	mov	r4, r0
   1dc6a:	b188      	cbz	r0, 1dc90 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1dc6c:	2210      	movs	r2, #16
   1dc6e:	2100      	movs	r1, #0
   1dc70:	f7ff febd 	bl	1d9ee <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1dc74:	2210      	movs	r2, #16
   1dc76:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dc7a:	2100      	movs	r1, #0
   1dc7c:	f7ff feb7 	bl	1d9ee <_set>
	s->leftover_offset = 0;
   1dc80:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1dc82:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1dc84:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1dc86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dc8a:	2001      	movs	r0, #1
   1dc8c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1dc90:	bd10      	pop	{r4, pc}

0001dc92 <tc_cmac_setup>:
{
   1dc92:	b570      	push	{r4, r5, r6, lr}
   1dc94:	460d      	mov	r5, r1
   1dc96:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1dc98:	4604      	mov	r4, r0
   1dc9a:	b310      	cbz	r0, 1dce2 <tc_cmac_setup+0x50>
   1dc9c:	b311      	cbz	r1, 1dce4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1dc9e:	2258      	movs	r2, #88	; 0x58
   1dca0:	2100      	movs	r1, #0
   1dca2:	f7ff fea4 	bl	1d9ee <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1dca6:	4629      	mov	r1, r5
   1dca8:	4630      	mov	r0, r6
	s->sched = sched;
   1dcaa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1dcac:	f7ef fcb6 	bl	d61c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1dcb0:	2210      	movs	r2, #16
   1dcb2:	2100      	movs	r1, #0
   1dcb4:	4620      	mov	r0, r4
   1dcb6:	f7ff fe9a 	bl	1d9ee <_set>
	gf_double (s->K1, s->iv);
   1dcba:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dcbe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dcc0:	4621      	mov	r1, r4
   1dcc2:	4620      	mov	r0, r4
   1dcc4:	f7ff ff5c 	bl	1db80 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1dcc8:	4621      	mov	r1, r4
   1dcca:	4628      	mov	r0, r5
   1dccc:	f7ff ffae 	bl	1dc2c <gf_double>
	gf_double (s->K2, s->K1);
   1dcd0:	4629      	mov	r1, r5
   1dcd2:	f104 0020 	add.w	r0, r4, #32
   1dcd6:	f7ff ffa9 	bl	1dc2c <gf_double>
	tc_cmac_init(s);
   1dcda:	4620      	mov	r0, r4
   1dcdc:	f7ff ffc3 	bl	1dc66 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1dce0:	2001      	movs	r0, #1
}
   1dce2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1dce4:	4608      	mov	r0, r1
   1dce6:	e7fc      	b.n	1dce2 <tc_cmac_setup+0x50>

0001dce8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcec:	460d      	mov	r5, r1
   1dcee:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1dcf0:	4604      	mov	r4, r0
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	d061      	beq.n	1ddba <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1dcf6:	b912      	cbnz	r2, 1dcfe <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1dcf8:	2001      	movs	r0, #1
}
   1dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1dcfe:	2900      	cmp	r1, #0
   1dd00:	d05b      	beq.n	1ddba <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1dd02:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1dd06:	ea53 0102 	orrs.w	r1, r3, r2
   1dd0a:	d056      	beq.n	1ddba <tc_cmac_update+0xd2>
	s->countdown--;
   1dd0c:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1dd0e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1dd12:	f142 32ff 	adc.w	r2, r2, #4294967295
   1dd16:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1dd1a:	f1b8 0f00 	cmp.w	r8, #0
   1dd1e:	d02a      	beq.n	1dd76 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1dd20:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dd24:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1dd28:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dd2a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1dd2c:	d208      	bcs.n	1dd40 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1dd2e:	462a      	mov	r2, r5
   1dd30:	4633      	mov	r3, r6
   1dd32:	4631      	mov	r1, r6
   1dd34:	f7ff fe4e 	bl	1d9d4 <_copy>
			s->leftover_offset += data_length;
   1dd38:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1dd3a:	4432      	add	r2, r6
   1dd3c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1dd3e:	e7db      	b.n	1dcf8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1dd40:	463b      	mov	r3, r7
   1dd42:	462a      	mov	r2, r5
   1dd44:	4639      	mov	r1, r7
   1dd46:	f7ff fe45 	bl	1d9d4 <_copy>
		s->leftover_offset = 0;
   1dd4a:	2300      	movs	r3, #0
   1dd4c:	3e10      	subs	r6, #16
   1dd4e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1dd50:	4446      	add	r6, r8
		data += remaining_space;
   1dd52:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dd54:	1e63      	subs	r3, r4, #1
   1dd56:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1dd5a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dd5e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dd62:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1dd64:	ea82 0200 	eor.w	r2, r2, r0
   1dd68:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dd6a:	d1f6      	bne.n	1dd5a <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dd6c:	4621      	mov	r1, r4
   1dd6e:	4620      	mov	r0, r4
   1dd70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dd72:	f7ff ff05 	bl	1db80 <tc_aes_encrypt>
   1dd76:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1dd7a:	2e10      	cmp	r6, #16
   1dd7c:	d80a      	bhi.n	1dd94 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1dd7e:	2e00      	cmp	r6, #0
   1dd80:	d0ba      	beq.n	1dcf8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1dd82:	4633      	mov	r3, r6
   1dd84:	462a      	mov	r2, r5
   1dd86:	4631      	mov	r1, r6
   1dd88:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dd8c:	f7ff fe22 	bl	1d9d4 <_copy>
		s->leftover_offset = data_length;
   1dd90:	6466      	str	r6, [r4, #68]	; 0x44
   1dd92:	e7b1      	b.n	1dcf8 <tc_cmac_update+0x10>
   1dd94:	1e63      	subs	r3, r4, #1
   1dd96:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1dd98:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dd9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dda0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dda2:	ea82 0200 	eor.w	r2, r2, r0
   1dda6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dda8:	d1f6      	bne.n	1dd98 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ddaa:	4621      	mov	r1, r4
   1ddac:	4620      	mov	r0, r4
   1ddae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ddb0:	f7ff fee6 	bl	1db80 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1ddb4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1ddb6:	3e10      	subs	r6, #16
   1ddb8:	e7df      	b.n	1dd7a <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1ddba:	2000      	movs	r0, #0
   1ddbc:	e79d      	b.n	1dcfa <tc_cmac_update+0x12>

0001ddbe <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1ddbe:	b570      	push	{r4, r5, r6, lr}
   1ddc0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1ddc2:	4605      	mov	r5, r0
   1ddc4:	b1f0      	cbz	r0, 1de04 <tc_cmac_final+0x46>
   1ddc6:	b371      	cbz	r1, 1de26 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1ddc8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1ddca:	2a10      	cmp	r2, #16
   1ddcc:	d11b      	bne.n	1de06 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1ddce:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ddd0:	1e63      	subs	r3, r4, #1
   1ddd2:	3901      	subs	r1, #1
   1ddd4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1ddd8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dddc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dde0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dde2:	ea82 0206 	eor.w	r2, r2, r6
   1dde6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1ddea:	ea82 0206 	eor.w	r2, r2, r6
   1ddee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ddf0:	d1f2      	bne.n	1ddd8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1ddf2:	4621      	mov	r1, r4
   1ddf4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ddf6:	4628      	mov	r0, r5
   1ddf8:	f7ff fec2 	bl	1db80 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1ddfc:	4620      	mov	r0, r4
   1ddfe:	f7ff ff2a 	bl	1dc56 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1de02:	2001      	movs	r0, #1
}
   1de04:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1de06:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1de0a:	2100      	movs	r1, #0
   1de0c:	f1c2 0210 	rsb	r2, r2, #16
   1de10:	4420      	add	r0, r4
   1de12:	f7ff fdec 	bl	1d9ee <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1de16:	2280      	movs	r2, #128	; 0x80
   1de18:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1de1a:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1de1e:	4423      	add	r3, r4
   1de20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1de24:	e7d4      	b.n	1ddd0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1de26:	4608      	mov	r0, r1
   1de28:	e7ec      	b.n	1de04 <tc_cmac_final+0x46>

0001de2a <tc_sha256_update>:
{
   1de2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de2c:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1de2e:	b110      	cbz	r0, 1de36 <tc_sha256_update+0xc>
   1de30:	b1f9      	cbz	r1, 1de72 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1de32:	b90a      	cbnz	r2, 1de38 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1de34:	2001      	movs	r0, #1
}
   1de36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1de38:	2600      	movs	r6, #0
   1de3a:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1de3c:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1de40:	42a5      	cmp	r5, r4
   1de42:	d0f7      	beq.n	1de34 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1de44:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1de46:	1c5a      	adds	r2, r3, #1
   1de48:	6682      	str	r2, [r0, #104]	; 0x68
   1de4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1de4e:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1de50:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1de52:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1de56:	d9f3      	bls.n	1de40 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1de58:	4639      	mov	r1, r7
   1de5a:	f7ef fc33 	bl	d6c4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1de5e:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1de62:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1de66:	f142 0200 	adc.w	r2, r2, #0
   1de6a:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1de6e:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1de70:	e7e6      	b.n	1de40 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1de72:	4608      	mov	r0, r1
   1de74:	e7df      	b.n	1de36 <tc_sha256_update+0xc>

0001de76 <tc_sha256_final>:
{
   1de76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de78:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1de7a:	4605      	mov	r5, r0
   1de7c:	2800      	cmp	r0, #0
   1de7e:	d055      	beq.n	1df2c <tc_sha256_final+0xb6>
   1de80:	2900      	cmp	r1, #0
   1de82:	d054      	beq.n	1df2e <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1de84:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1de86:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1de8a:	00d8      	lsls	r0, r3, #3
   1de8c:	1812      	adds	r2, r2, r0
   1de8e:	f141 0100 	adc.w	r1, r1, #0
   1de92:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1de96:	2280      	movs	r2, #128	; 0x80
   1de98:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1de9a:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1de9c:	4423      	add	r3, r4
   1de9e:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1dea0:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1dea8:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1deac:	d90a      	bls.n	1dec4 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1deae:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1deb2:	4639      	mov	r1, r7
   1deb4:	4430      	add	r0, r6
   1deb6:	f7ff fd9a 	bl	1d9ee <_set>
		compress(s->iv, s->leftover);
   1deba:	4631      	mov	r1, r6
   1debc:	4620      	mov	r0, r4
   1debe:	f7ef fc01 	bl	d6c4 <compress>
		s->leftover_offset = 0;
   1dec2:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1dec4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1dec6:	2100      	movs	r1, #0
   1dec8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1decc:	4430      	add	r0, r6
   1dece:	f7ff fd8e 	bl	1d9ee <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1ded2:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1ded4:	4631      	mov	r1, r6
   1ded6:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1ded8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1deda:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1dedc:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1dede:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1dee2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1dee6:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1dee8:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1deea:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1deec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1def0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1def4:	f7ef fbe6 	bl	d6c4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1def8:	1f26      	subs	r6, r4, #4
   1defa:	1d2b      	adds	r3, r5, #4
   1defc:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1df00:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1df04:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1df06:	0e11      	lsrs	r1, r2, #24
   1df08:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1df0c:	0c11      	lsrs	r1, r2, #16
   1df0e:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1df12:	0a11      	lsrs	r1, r2, #8
   1df14:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1df18:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1df1c:	4283      	cmp	r3, r0
   1df1e:	d1ef      	bne.n	1df00 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1df20:	4620      	mov	r0, r4
   1df22:	2270      	movs	r2, #112	; 0x70
   1df24:	2100      	movs	r1, #0
   1df26:	f7ff fd62 	bl	1d9ee <_set>
	return TC_CRYPTO_SUCCESS;
   1df2a:	2001      	movs	r0, #1
}
   1df2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1df2e:	4608      	mov	r0, r1
   1df30:	e7fc      	b.n	1df2c <tc_sha256_final+0xb6>

0001df32 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1df32:	b530      	push	{r4, r5, lr}
   1df34:	1e43      	subs	r3, r0, #1
   1df36:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1df38:	42a9      	cmp	r1, r5
   1df3a:	d106      	bne.n	1df4a <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1df3c:	2136      	movs	r1, #54	; 0x36
   1df3e:	245c      	movs	r4, #92	; 0x5c
   1df40:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1df42:	1a13      	subs	r3, r2, r0
   1df44:	2b3f      	cmp	r3, #63	; 0x3f
   1df46:	d90c      	bls.n	1df62 <rekey+0x30>
	}
}
   1df48:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1df4a:	780c      	ldrb	r4, [r1, #0]
   1df4c:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1df50:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1df54:	f811 4b01 	ldrb.w	r4, [r1], #1
   1df58:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1df5c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1df60:	e7ea      	b.n	1df38 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1df62:	f802 1b01 	strb.w	r1, [r2], #1
   1df66:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1df6a:	e7ea      	b.n	1df42 <rekey+0x10>

0001df6c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df6e:	460e      	mov	r6, r1
   1df70:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1df72:	4605      	mov	r5, r0
{
   1df74:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1df76:	b1b8      	cbz	r0, 1dfa8 <tc_hmac_set_key+0x3c>
   1df78:	b341      	cbz	r1, 1dfcc <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1df7a:	b34a      	cbz	r2, 1dfd0 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1df7c:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1df7e:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1df82:	d813      	bhi.n	1dfac <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1df84:	a810      	add	r0, sp, #64	; 0x40
   1df86:	f7ef fc85 	bl	d894 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1df8a:	4622      	mov	r2, r4
   1df8c:	4669      	mov	r1, sp
   1df8e:	a810      	add	r0, sp, #64	; 0x40
   1df90:	f7ff ff4b 	bl	1de2a <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1df94:	a910      	add	r1, sp, #64	; 0x40
   1df96:	a834      	add	r0, sp, #208	; 0xd0
   1df98:	f7ff ff6d 	bl	1de76 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1df9c:	4622      	mov	r2, r4
   1df9e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1dfa0:	4638      	mov	r0, r7
   1dfa2:	f7ff ffc6 	bl	1df32 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1dfa6:	2001      	movs	r0, #1
}
   1dfa8:	b04d      	add	sp, #308	; 0x134
   1dfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1dfac:	f7ef fc72 	bl	d894 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1dfb0:	4622      	mov	r2, r4
   1dfb2:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1dfb4:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1dfb8:	4628      	mov	r0, r5
   1dfba:	f7ff ff36 	bl	1de2a <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1dfbe:	4629      	mov	r1, r5
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	f7ff ff58 	bl	1de76 <tc_sha256_final>
		rekey(ctx->key,
   1dfc6:	2220      	movs	r2, #32
   1dfc8:	4621      	mov	r1, r4
   1dfca:	e7e9      	b.n	1dfa0 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1dfcc:	4608      	mov	r0, r1
   1dfce:	e7eb      	b.n	1dfa8 <tc_hmac_set_key+0x3c>
   1dfd0:	4610      	mov	r0, r2
   1dfd2:	e7e9      	b.n	1dfa8 <tc_hmac_set_key+0x3c>

0001dfd4 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1dfd4:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1dfd6:	4604      	mov	r4, r0
   1dfd8:	b140      	cbz	r0, 1dfec <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1dfda:	f7ef fc5b 	bl	d894 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1dfde:	2240      	movs	r2, #64	; 0x40
   1dfe0:	4620      	mov	r0, r4
   1dfe2:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1dfe6:	f7ff ff20 	bl	1de2a <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1dfea:	2001      	movs	r0, #1
}
   1dfec:	bd10      	pop	{r4, pc}

0001dfee <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1dfee:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1dff0:	b110      	cbz	r0, 1dff8 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1dff2:	f7ff ff1a 	bl	1de2a <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1dff6:	2001      	movs	r0, #1
}
   1dff8:	bd08      	pop	{r3, pc}

0001dffa <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1dffa:	b570      	push	{r4, r5, r6, lr}
   1dffc:	460e      	mov	r6, r1
   1dffe:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1e000:	4605      	mov	r5, r0
   1e002:	b1f0      	cbz	r0, 1e042 <tc_hmac_final+0x48>
   1e004:	2920      	cmp	r1, #32
   1e006:	d11c      	bne.n	1e042 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1e008:	b1ea      	cbz	r2, 1e046 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1e00a:	4611      	mov	r1, r2
   1e00c:	f7ff ff33 	bl	1de76 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1e010:	4620      	mov	r0, r4
   1e012:	f7ef fc3f 	bl	d894 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1e016:	2240      	movs	r2, #64	; 0x40
   1e018:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1e01c:	4620      	mov	r0, r4
   1e01e:	f7ff ff04 	bl	1de2a <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1e022:	4632      	mov	r2, r6
   1e024:	4629      	mov	r1, r5
   1e026:	4620      	mov	r0, r4
   1e028:	f7ff feff 	bl	1de2a <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1e02c:	4621      	mov	r1, r4
   1e02e:	4628      	mov	r0, r5
   1e030:	f7ff ff21 	bl	1de76 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1e034:	4620      	mov	r0, r4
   1e036:	22f0      	movs	r2, #240	; 0xf0
   1e038:	2100      	movs	r1, #0
   1e03a:	f7ff fcd8 	bl	1d9ee <_set>

	return TC_CRYPTO_SUCCESS;
   1e03e:	2001      	movs	r0, #1
}
   1e040:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1e042:	2000      	movs	r0, #0
   1e044:	e7fc      	b.n	1e040 <tc_hmac_final+0x46>
   1e046:	4610      	mov	r0, r2
   1e048:	e7fa      	b.n	1e040 <tc_hmac_final+0x46>

0001e04a <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1e04a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e04e:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1e050:	f04f 0b01 	mov.w	fp, #1
{
   1e054:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1e056:	2300      	movs	r3, #0
{
   1e058:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e05a:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1e05e:	4631      	mov	r1, r6
{
   1e060:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e062:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1e064:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1e068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1e06c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e070:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e074:	f7ff ff7a 	bl	1df6c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1e078:	4620      	mov	r0, r4
   1e07a:	f7ff ffab 	bl	1dfd4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e07e:	2220      	movs	r2, #32
   1e080:	4629      	mov	r1, r5
   1e082:	4620      	mov	r0, r4
   1e084:	f7ff ffb3 	bl	1dfee <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1e088:	465a      	mov	r2, fp
   1e08a:	4620      	mov	r0, r4
   1e08c:	f10d 0106 	add.w	r1, sp, #6
   1e090:	f7ff ffad 	bl	1dfee <tc_hmac_update>

	if (data && datalen)
   1e094:	f1b8 0f00 	cmp.w	r8, #0
   1e098:	d007      	beq.n	1e0aa <update+0x60>
   1e09a:	f1b9 0f00 	cmp.w	r9, #0
   1e09e:	d004      	beq.n	1e0aa <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1e0a0:	464a      	mov	r2, r9
   1e0a2:	4641      	mov	r1, r8
   1e0a4:	4620      	mov	r0, r4
   1e0a6:	f7ff ffa2 	bl	1dfee <tc_hmac_update>
	if (additional_data && additional_datalen)
   1e0aa:	b13f      	cbz	r7, 1e0bc <update+0x72>
   1e0ac:	f1ba 0f00 	cmp.w	sl, #0
   1e0b0:	d004      	beq.n	1e0bc <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1e0b2:	4652      	mov	r2, sl
   1e0b4:	4639      	mov	r1, r7
   1e0b6:	4620      	mov	r0, r4
   1e0b8:	f7ff ff99 	bl	1dfee <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1e0bc:	4622      	mov	r2, r4
   1e0be:	2120      	movs	r1, #32
   1e0c0:	4630      	mov	r0, r6
   1e0c2:	f7ff ff9a 	bl	1dffa <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e0c6:	2220      	movs	r2, #32
   1e0c8:	4631      	mov	r1, r6
   1e0ca:	4620      	mov	r0, r4
   1e0cc:	f7ff ff4e 	bl	1df6c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1e0d0:	4620      	mov	r0, r4
   1e0d2:	f7ff ff7f 	bl	1dfd4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e0d6:	2220      	movs	r2, #32
   1e0d8:	4629      	mov	r1, r5
   1e0da:	4620      	mov	r0, r4
   1e0dc:	f7ff ff87 	bl	1dfee <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1e0e0:	4622      	mov	r2, r4
   1e0e2:	2120      	movs	r1, #32
   1e0e4:	4628      	mov	r0, r5
   1e0e6:	f7ff ff88 	bl	1dffa <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1e0ea:	f1b8 0f00 	cmp.w	r8, #0
   1e0ee:	d03a      	beq.n	1e166 <update+0x11c>
   1e0f0:	f1b9 0f00 	cmp.w	r9, #0
   1e0f4:	d037      	beq.n	1e166 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e0f6:	2220      	movs	r2, #32
   1e0f8:	4631      	mov	r1, r6
   1e0fa:	4620      	mov	r0, r4
   1e0fc:	f7ff ff36 	bl	1df6c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1e100:	4620      	mov	r0, r4
   1e102:	f7ff ff67 	bl	1dfd4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e106:	2220      	movs	r2, #32
   1e108:	4629      	mov	r1, r5
   1e10a:	4620      	mov	r0, r4
   1e10c:	f7ff ff6f 	bl	1dfee <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1e110:	2201      	movs	r2, #1
   1e112:	f10d 0107 	add.w	r1, sp, #7
   1e116:	4620      	mov	r0, r4
   1e118:	f7ff ff69 	bl	1dfee <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1e11c:	464a      	mov	r2, r9
   1e11e:	4641      	mov	r1, r8
   1e120:	4620      	mov	r0, r4
   1e122:	f7ff ff64 	bl	1dfee <tc_hmac_update>
	if (additional_data && additional_datalen)
   1e126:	b13f      	cbz	r7, 1e138 <update+0xee>
   1e128:	f1ba 0f00 	cmp.w	sl, #0
   1e12c:	d004      	beq.n	1e138 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1e12e:	4652      	mov	r2, sl
   1e130:	4639      	mov	r1, r7
   1e132:	4620      	mov	r0, r4
   1e134:	f7ff ff5b 	bl	1dfee <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1e138:	4622      	mov	r2, r4
   1e13a:	2120      	movs	r1, #32
   1e13c:	4630      	mov	r0, r6
   1e13e:	f7ff ff5c 	bl	1dffa <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e142:	2220      	movs	r2, #32
   1e144:	4631      	mov	r1, r6
   1e146:	4620      	mov	r0, r4
   1e148:	f7ff ff10 	bl	1df6c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1e14c:	4620      	mov	r0, r4
   1e14e:	f7ff ff41 	bl	1dfd4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e152:	2220      	movs	r2, #32
   1e154:	4629      	mov	r1, r5
   1e156:	4620      	mov	r0, r4
   1e158:	f7ff ff49 	bl	1dfee <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1e15c:	4622      	mov	r2, r4
   1e15e:	2120      	movs	r1, #32
   1e160:	4628      	mov	r0, r5
   1e162:	f7ff ff4a 	bl	1dffa <tc_hmac_final>
}
   1e166:	b003      	add	sp, #12
   1e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e16c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1e16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e16e:	460c      	mov	r4, r1
   1e170:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1e172:	4605      	mov	r5, r0
   1e174:	b1b0      	cbz	r0, 1e1a4 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1e176:	b1b9      	cbz	r1, 1e1a8 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1e178:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1e17a:	2220      	movs	r2, #32
   1e17c:	2100      	movs	r1, #0
   1e17e:	30f0      	adds	r0, #240	; 0xf0
   1e180:	f7ff fc35 	bl	1d9ee <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1e184:	2220      	movs	r2, #32
   1e186:	2101      	movs	r1, #1
   1e188:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1e18c:	f7ff fc2f 	bl	1d9ee <_set>
	update(prng, personalization, plen, 0, 0);
   1e190:	4628      	mov	r0, r5
   1e192:	4633      	mov	r3, r6
   1e194:	463a      	mov	r2, r7
   1e196:	4621      	mov	r1, r4
   1e198:	9600      	str	r6, [sp, #0]
   1e19a:	f7ff ff56 	bl	1e04a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1e19e:	2001      	movs	r0, #1
	prng->countdown = 0;
   1e1a0:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1e1a4:	b003      	add	sp, #12
   1e1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1e1a8:	4608      	mov	r0, r1
   1e1aa:	e7fb      	b.n	1e1a4 <tc_hmac_prng_init+0x38>

0001e1ac <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1e1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e1ae:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1e1b0:	4605      	mov	r5, r0
   1e1b2:	b180      	cbz	r0, 1e1d6 <tc_hmac_prng_reseed+0x2a>
   1e1b4:	b179      	cbz	r1, 1e1d6 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1e1b6:	2a1f      	cmp	r2, #31
   1e1b8:	d90d      	bls.n	1e1d6 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1e1ba:	b153      	cbz	r3, 1e1d2 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1e1bc:	b16c      	cbz	r4, 1e1da <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1e1be:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1e1c0:	f7ff ff43 	bl	1e04a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1e1c4:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1e1c8:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1e1ca:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1e1ce:	b003      	add	sp, #12
   1e1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1e1d2:	9300      	str	r3, [sp, #0]
   1e1d4:	e7f4      	b.n	1e1c0 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1e1d6:	2000      	movs	r0, #0
   1e1d8:	e7f9      	b.n	1e1ce <tc_hmac_prng_reseed+0x22>
   1e1da:	4620      	mov	r0, r4
   1e1dc:	e7f7      	b.n	1e1ce <tc_hmac_prng_reseed+0x22>

0001e1de <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1e1de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e1e2:	460d      	mov	r5, r1
   1e1e4:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1e1e6:	4680      	mov	r8, r0
   1e1e8:	b3d8      	cbz	r0, 1e262 <tc_hmac_prng_generate+0x84>
   1e1ea:	b3d2      	cbz	r2, 1e262 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1e1ec:	1e4b      	subs	r3, r1, #1
   1e1ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1e1f2:	d236      	bcs.n	1e262 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1e1f4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1e1f8:	b3ab      	cbz	r3, 1e266 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1e1fa:	3b01      	subs	r3, #1
   1e1fc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e200:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e204:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1e208:	2220      	movs	r2, #32
   1e20a:	4649      	mov	r1, r9
   1e20c:	4620      	mov	r0, r4
   1e20e:	f7ff fead 	bl	1df6c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1e212:	4620      	mov	r0, r4
   1e214:	f7ff fede 	bl	1dfd4 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1e218:	2220      	movs	r2, #32
   1e21a:	4639      	mov	r1, r7
   1e21c:	4620      	mov	r0, r4
   1e21e:	f7ff fee6 	bl	1dfee <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1e222:	4622      	mov	r2, r4
   1e224:	2120      	movs	r1, #32
   1e226:	4638      	mov	r0, r7
   1e228:	f7ff fee7 	bl	1dffa <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1e22c:	2d20      	cmp	r5, #32
   1e22e:	462e      	mov	r6, r5
   1e230:	bf28      	it	cs
   1e232:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1e234:	4640      	mov	r0, r8
   1e236:	4633      	mov	r3, r6
   1e238:	463a      	mov	r2, r7
   1e23a:	4631      	mov	r1, r6
   1e23c:	f7ff fbca 	bl	1d9d4 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1e240:	2d20      	cmp	r5, #32
   1e242:	bf38      	it	cc
   1e244:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1e246:	3d20      	subs	r5, #32
		out += bufferlen;
   1e248:	44b0      	add	r8, r6
	while (outlen != 0) {
   1e24a:	d1dd      	bne.n	1e208 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1e24c:	4620      	mov	r0, r4
   1e24e:	462b      	mov	r3, r5
   1e250:	462a      	mov	r2, r5
   1e252:	4629      	mov	r1, r5
   1e254:	9500      	str	r5, [sp, #0]
   1e256:	f7ff fef8 	bl	1e04a <update>

	return TC_CRYPTO_SUCCESS;
   1e25a:	2001      	movs	r0, #1
}
   1e25c:	b003      	add	sp, #12
   1e25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1e262:	2000      	movs	r0, #0
   1e264:	e7fa      	b.n	1e25c <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1e266:	f04f 30ff 	mov.w	r0, #4294967295
   1e26a:	e7f7      	b.n	1e25c <tc_hmac_prng_generate+0x7e>

0001e26c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e26c:	2100      	movs	r1, #0
   1e26e:	2001      	movs	r0, #1
   1e270:	f7ef bc2e 	b.w	dad0 <z_arm_fatal_error>

0001e274 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1e274:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1e276:	f383 880b 	msr	PSPLIM, r3
}
   1e27a:	4770      	bx	lr

0001e27c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e27c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1e27e:	6800      	ldr	r0, [r0, #0]
   1e280:	f7ef bc26 	b.w	dad0 <z_arm_fatal_error>

0001e284 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e284:	b508      	push	{r3, lr}
	handler();
   1e286:	f7ef fc51 	bl	db2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e28a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e28e:	f7ef be95 	b.w	dfbc <z_arm_exc_exit>

0001e292 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1e292:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1e296:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1e29a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1e29c:	bf08      	it	eq
   1e29e:	f06f 0015 	mvneq.w	r0, #21
   1e2a2:	4770      	bx	lr

0001e2a4 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1e2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e2a8:	4684      	mov	ip, r0
   1e2aa:	4688      	mov	r8, r1
	register const char *s = nptr;
   1e2ac:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1e2ae:	4621      	mov	r1, r4
   1e2b0:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e2b4:	2b20      	cmp	r3, #32
   1e2b6:	d0fa      	beq.n	1e2ae <strtol+0xa>
   1e2b8:	f1a3 0009 	sub.w	r0, r3, #9
   1e2bc:	2804      	cmp	r0, #4
   1e2be:	d9f6      	bls.n	1e2ae <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1e2c0:	2b2d      	cmp	r3, #45	; 0x2d
   1e2c2:	d12d      	bne.n	1e320 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1e2c4:	784b      	ldrb	r3, [r1, #1]
   1e2c6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1e2c8:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e2ca:	2a00      	cmp	r2, #0
   1e2cc:	d05a      	beq.n	1e384 <strtol+0xe0>
   1e2ce:	2a10      	cmp	r2, #16
   1e2d0:	d109      	bne.n	1e2e6 <strtol+0x42>
   1e2d2:	2b30      	cmp	r3, #48	; 0x30
   1e2d4:	d107      	bne.n	1e2e6 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e2d6:	7823      	ldrb	r3, [r4, #0]
   1e2d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e2dc:	2b58      	cmp	r3, #88	; 0x58
   1e2de:	d14c      	bne.n	1e37a <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1e2e0:	2210      	movs	r2, #16
		c = s[1];
   1e2e2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e2e4:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e2e6:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1e2e8:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1e2ec:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1e2ee:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1e2f2:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1e2f4:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e2f8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e2fc:	2d09      	cmp	r5, #9
   1e2fe:	d815      	bhi.n	1e32c <strtol+0x88>
			c -= '0';
   1e300:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e302:	429a      	cmp	r2, r3
   1e304:	dd22      	ble.n	1e34c <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e306:	1c75      	adds	r5, r6, #1
   1e308:	d007      	beq.n	1e31a <strtol+0x76>
   1e30a:	4570      	cmp	r0, lr
   1e30c:	d81b      	bhi.n	1e346 <strtol+0xa2>
   1e30e:	d101      	bne.n	1e314 <strtol+0x70>
   1e310:	454b      	cmp	r3, r9
   1e312:	dc18      	bgt.n	1e346 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1e314:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e316:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e31a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e31e:	e7eb      	b.n	1e2f8 <strtol+0x54>
	} else if (c == '+') {
   1e320:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1e322:	bf04      	itt	eq
   1e324:	784b      	ldrbeq	r3, [r1, #1]
   1e326:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1e328:	2100      	movs	r1, #0
   1e32a:	e7ce      	b.n	1e2ca <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e32c:	f043 0520 	orr.w	r5, r3, #32
   1e330:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e332:	2d19      	cmp	r5, #25
   1e334:	d80a      	bhi.n	1e34c <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e336:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e33a:	2d1a      	cmp	r5, #26
   1e33c:	bf34      	ite	cc
   1e33e:	2537      	movcc	r5, #55	; 0x37
   1e340:	2557      	movcs	r5, #87	; 0x57
   1e342:	1b5b      	subs	r3, r3, r5
   1e344:	e7dd      	b.n	1e302 <strtol+0x5e>
			any = -1;
   1e346:	f04f 36ff 	mov.w	r6, #4294967295
   1e34a:	e7e6      	b.n	1e31a <strtol+0x76>
		}
	}

	if (any < 0) {
   1e34c:	1c73      	adds	r3, r6, #1
   1e34e:	d109      	bne.n	1e364 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1e350:	f7fb fc6e 	bl	19c30 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1e354:	2326      	movs	r3, #38	; 0x26
   1e356:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1e358:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1e35a:	f1b8 0f00 	cmp.w	r8, #0
   1e35e:	d107      	bne.n	1e370 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1e364:	b101      	cbz	r1, 1e368 <strtol+0xc4>
		acc = -acc;
   1e366:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e368:	f1b8 0f00 	cmp.w	r8, #0
   1e36c:	d0f8      	beq.n	1e360 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e36e:	b10e      	cbz	r6, 1e374 <strtol+0xd0>
   1e370:	f104 3cff 	add.w	ip, r4, #4294967295
   1e374:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1e378:	e7f2      	b.n	1e360 <strtol+0xbc>
	if (base == 0) {
   1e37a:	2330      	movs	r3, #48	; 0x30
   1e37c:	2a00      	cmp	r2, #0
   1e37e:	d1b2      	bne.n	1e2e6 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1e380:	2208      	movs	r2, #8
   1e382:	e7b0      	b.n	1e2e6 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1e384:	2b30      	cmp	r3, #48	; 0x30
   1e386:	d0a6      	beq.n	1e2d6 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1e388:	220a      	movs	r2, #10
   1e38a:	e7ac      	b.n	1e2e6 <strtol+0x42>

0001e38c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1e38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1e390:	f891 8000 	ldrb.w	r8, [r1]
{
   1e394:	4605      	mov	r5, r0
	if (c != 0) {
   1e396:	f1b8 0f00 	cmp.w	r8, #0
   1e39a:	d010      	beq.n	1e3be <strstr+0x32>
	c = *find++;
   1e39c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1e39e:	4620      	mov	r0, r4
   1e3a0:	f000 f830 	bl	1e404 <strlen>
   1e3a4:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1e3a6:	462e      	mov	r6, r5
   1e3a8:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1e3ac:	b163      	cbz	r3, 1e3c8 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1e3ae:	4598      	cmp	r8, r3
   1e3b0:	d108      	bne.n	1e3c4 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1e3b2:	463a      	mov	r2, r7
   1e3b4:	4621      	mov	r1, r4
   1e3b6:	4630      	mov	r0, r6
   1e3b8:	f000 f840 	bl	1e43c <strncmp>
   1e3bc:	b910      	cbnz	r0, 1e3c4 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1e3be:	4628      	mov	r0, r5
   1e3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1e3c4:	4635      	mov	r5, r6
   1e3c6:	e7ee      	b.n	1e3a6 <strstr+0x1a>
					return NULL;
   1e3c8:	461d      	mov	r5, r3
   1e3ca:	e7f8      	b.n	1e3be <strstr+0x32>

0001e3cc <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1e3cc:	4603      	mov	r3, r0
   1e3ce:	3901      	subs	r1, #1
   1e3d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e3d4:	b90a      	cbnz	r2, 1e3da <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1e3d6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1e3d8:	4770      	bx	lr
		*d = *s;
   1e3da:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1e3de:	e7f7      	b.n	1e3d0 <strcpy+0x4>

0001e3e0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1e3e0:	b570      	push	{r4, r5, r6, lr}
   1e3e2:	4605      	mov	r5, r0
   1e3e4:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1e3e6:	b142      	cbz	r2, 1e3fa <strncpy+0x1a>
   1e3e8:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1e3ec:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1e3ee:	b92c      	cbnz	r4, 1e3fc <strncpy+0x1c>
   1e3f0:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1e3f2:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1e3f6:	429a      	cmp	r2, r3
   1e3f8:	d1fb      	bne.n	1e3f2 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1e3fa:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1e3fc:	4632      	mov	r2, r6
		*d = *s;
   1e3fe:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1e402:	e7ef      	b.n	1e3e4 <strncpy+0x4>

0001e404 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e404:	4603      	mov	r3, r0
	size_t n = 0;
   1e406:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e408:	5c1a      	ldrb	r2, [r3, r0]
   1e40a:	b902      	cbnz	r2, 1e40e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e40c:	4770      	bx	lr
		n++;
   1e40e:	3001      	adds	r0, #1
   1e410:	e7fa      	b.n	1e408 <strlen+0x4>

0001e412 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1e412:	4603      	mov	r3, r0
	size_t n = 0;
   1e414:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1e416:	5c1a      	ldrb	r2, [r3, r0]
   1e418:	b10a      	cbz	r2, 1e41e <strnlen+0xc>
   1e41a:	4288      	cmp	r0, r1
   1e41c:	d100      	bne.n	1e420 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1e41e:	4770      	bx	lr
		n++;
   1e420:	3001      	adds	r0, #1
   1e422:	e7f8      	b.n	1e416 <strnlen+0x4>

0001e424 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e424:	1e43      	subs	r3, r0, #1
   1e426:	3901      	subs	r1, #1
   1e428:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e42c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1e430:	4282      	cmp	r2, r0
   1e432:	d101      	bne.n	1e438 <strcmp+0x14>
   1e434:	2a00      	cmp	r2, #0
   1e436:	d1f7      	bne.n	1e428 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e438:	1a10      	subs	r0, r2, r0
   1e43a:	4770      	bx	lr

0001e43c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e43c:	b510      	push	{r4, lr}
   1e43e:	3901      	subs	r1, #1
   1e440:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1e442:	4282      	cmp	r2, r0
   1e444:	d009      	beq.n	1e45a <strncmp+0x1e>
   1e446:	7803      	ldrb	r3, [r0, #0]
   1e448:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1e44c:	42a3      	cmp	r3, r4
   1e44e:	d100      	bne.n	1e452 <strncmp+0x16>
   1e450:	b90b      	cbnz	r3, 1e456 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1e452:	1b18      	subs	r0, r3, r4
   1e454:	e002      	b.n	1e45c <strncmp+0x20>
		s1++;
   1e456:	3001      	adds	r0, #1
		n--;
   1e458:	e7f3      	b.n	1e442 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1e45a:	2000      	movs	r0, #0
}
   1e45c:	bd10      	pop	{r4, pc}

0001e45e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e45e:	4603      	mov	r3, r0
   1e460:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e462:	b15a      	cbz	r2, 1e47c <memcmp+0x1e>
   1e464:	3901      	subs	r1, #1
   1e466:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e468:	f813 0b01 	ldrb.w	r0, [r3], #1
   1e46c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e470:	42a3      	cmp	r3, r4
   1e472:	d001      	beq.n	1e478 <memcmp+0x1a>
   1e474:	4290      	cmp	r0, r2
   1e476:	d0f7      	beq.n	1e468 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e478:	1a80      	subs	r0, r0, r2
}
   1e47a:	bd10      	pop	{r4, pc}
		return 0;
   1e47c:	4610      	mov	r0, r2
   1e47e:	e7fc      	b.n	1e47a <memcmp+0x1c>

0001e480 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e480:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e482:	ea81 0400 	eor.w	r4, r1, r0
   1e486:	07a5      	lsls	r5, r4, #30
   1e488:	4603      	mov	r3, r0
   1e48a:	d00b      	beq.n	1e4a4 <memcpy+0x24>
   1e48c:	3b01      	subs	r3, #1
   1e48e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e490:	4291      	cmp	r1, r2
   1e492:	d11b      	bne.n	1e4cc <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e494:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e496:	2a00      	cmp	r2, #0
   1e498:	d0fc      	beq.n	1e494 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e49a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1e49e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1e4a0:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1e4a4:	079c      	lsls	r4, r3, #30
   1e4a6:	d1f6      	bne.n	1e496 <memcpy+0x16>
   1e4a8:	f022 0403 	bic.w	r4, r2, #3
   1e4ac:	1f1d      	subs	r5, r3, #4
   1e4ae:	0896      	lsrs	r6, r2, #2
   1e4b0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e4b2:	42b9      	cmp	r1, r7
   1e4b4:	d105      	bne.n	1e4c2 <memcpy+0x42>
   1e4b6:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1e4ba:	4423      	add	r3, r4
   1e4bc:	fb05 2206 	mla	r2, r5, r6, r2
   1e4c0:	e7e4      	b.n	1e48c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e4c2:	f851 cb04 	ldr.w	ip, [r1], #4
   1e4c6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e4ca:	e7f2      	b.n	1e4b2 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e4cc:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e4d0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e4d4:	e7dc      	b.n	1e490 <memcpy+0x10>

0001e4d6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1e4d6:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1e4d8:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1e4da:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e4dc:	07a3      	lsls	r3, r4, #30
   1e4de:	d111      	bne.n	1e504 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e4e0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e4e4:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e4e8:	f022 0303 	bic.w	r3, r2, #3
   1e4ec:	0896      	lsrs	r6, r2, #2
   1e4ee:	4423      	add	r3, r4
   1e4f0:	429c      	cmp	r4, r3
   1e4f2:	d10d      	bne.n	1e510 <memset+0x3a>
   1e4f4:	f06f 0403 	mvn.w	r4, #3
   1e4f8:	fb04 2206 	mla	r2, r4, r6, r2
   1e4fc:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e4fe:	4293      	cmp	r3, r2
   1e500:	d109      	bne.n	1e516 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e502:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e504:	2a00      	cmp	r2, #0
   1e506:	d0fc      	beq.n	1e502 <memset+0x2c>
		*(d_byte++) = c_byte;
   1e508:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1e50c:	3a01      	subs	r2, #1
   1e50e:	e7e5      	b.n	1e4dc <memset+0x6>
		*(d_word++) = c_word;
   1e510:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1e514:	e7ec      	b.n	1e4f0 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e516:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e51a:	e7f0      	b.n	1e4fe <memset+0x28>

0001e51c <_stdout_hook_default>:
}
   1e51c:	f04f 30ff 	mov.w	r0, #4294967295
   1e520:	4770      	bx	lr

0001e522 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1e522:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1e524:	b530      	push	{r4, r5, lr}
   1e526:	4605      	mov	r5, r0
   1e528:	b087      	sub	sp, #28
   1e52a:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1e52c:	a802      	add	r0, sp, #8
   1e52e:	4411      	add	r1, r2
   1e530:	f7ff ffa6 	bl	1e480 <memcpy>
	(void)memset(res + 3, 0, 13);
   1e534:	220d      	movs	r2, #13
   1e536:	2100      	movs	r1, #0
   1e538:	f10d 000b 	add.w	r0, sp, #11
   1e53c:	f7ff ffcb 	bl	1e4d6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1e540:	aa02      	add	r2, sp, #8
   1e542:	4611      	mov	r1, r2
   1e544:	4628      	mov	r0, r5
   1e546:	f000 fa70 	bl	1ea2a <bt_encrypt_le>
	if (err) {
   1e54a:	b970      	cbnz	r0, 1e56a <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   1e54c:	2203      	movs	r2, #3
   1e54e:	a902      	add	r1, sp, #8
   1e550:	a801      	add	r0, sp, #4
   1e552:	f7ff ff95 	bl	1e480 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1e556:	2203      	movs	r2, #3
   1e558:	4620      	mov	r0, r4
   1e55a:	a901      	add	r1, sp, #4
   1e55c:	f7ff ff7f 	bl	1e45e <memcmp>
   1e560:	fab0 f080 	clz	r0, r0
   1e564:	0940      	lsrs	r0, r0, #5
}
   1e566:	b007      	add	sp, #28
   1e568:	bd30      	pop	{r4, r5, pc}
		return false;
   1e56a:	2000      	movs	r0, #0
   1e56c:	e7fb      	b.n	1e566 <bt_rpa_irk_matches+0x44>

0001e56e <bt_settings_decode_key>:
{
   1e56e:	b570      	push	{r4, r5, r6, lr}
   1e570:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1e572:	2100      	movs	r1, #0
{
   1e574:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1e576:	f7fe ff85 	bl	1d484 <settings_name_next>
   1e57a:	280d      	cmp	r0, #13
   1e57c:	d118      	bne.n	1e5b0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1e57e:	7b23      	ldrb	r3, [r4, #12]
   1e580:	2b30      	cmp	r3, #48	; 0x30
   1e582:	d111      	bne.n	1e5a8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1e584:	2300      	movs	r3, #0
   1e586:	702b      	strb	r3, [r5, #0]
   1e588:	f104 060c 	add.w	r6, r4, #12
   1e58c:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e58e:	462a      	mov	r2, r5
   1e590:	4620      	mov	r0, r4
   1e592:	2301      	movs	r3, #1
   1e594:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1e596:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e598:	f7fe fa59 	bl	1ca4e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1e59c:	42b4      	cmp	r4, r6
   1e59e:	f105 35ff 	add.w	r5, r5, #4294967295
   1e5a2:	d1f4      	bne.n	1e58e <bt_settings_decode_key+0x20>
	return 0;
   1e5a4:	2000      	movs	r0, #0
}
   1e5a6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1e5a8:	2b31      	cmp	r3, #49	; 0x31
   1e5aa:	d101      	bne.n	1e5b0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1e5ac:	2301      	movs	r3, #1
   1e5ae:	e7ea      	b.n	1e586 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1e5b0:	f06f 0015 	mvn.w	r0, #21
   1e5b4:	e7f7      	b.n	1e5a6 <bt_settings_decode_key+0x38>

0001e5b6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e5b6:	b510      	push	{r4, lr}
   1e5b8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e5ba:	7801      	ldrb	r1, [r0, #0]
   1e5bc:	7822      	ldrb	r2, [r4, #0]
{
   1e5be:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e5c0:	428a      	cmp	r2, r1
   1e5c2:	d00f      	beq.n	1e5e4 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1e5c4:	4669      	mov	r1, sp
   1e5c6:	f7f0 f89f 	bl	e708 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e5ca:	4620      	mov	r0, r4
   1e5cc:	a905      	add	r1, sp, #20
   1e5ce:	f7f0 f89b 	bl	e708 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e5d2:	2210      	movs	r2, #16
   1e5d4:	f10d 0115 	add.w	r1, sp, #21
   1e5d8:	f10d 0001 	add.w	r0, sp, #1
   1e5dc:	f7ff ff3f 	bl	1e45e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1e5e0:	b00a      	add	sp, #40	; 0x28
   1e5e2:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1e5e4:	2a01      	cmp	r2, #1
   1e5e6:	d006      	beq.n	1e5f6 <bt_uuid_cmp+0x40>
   1e5e8:	2a02      	cmp	r2, #2
   1e5ea:	d007      	beq.n	1e5fc <bt_uuid_cmp+0x46>
   1e5ec:	b972      	cbnz	r2, 1e60c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e5ee:	8840      	ldrh	r0, [r0, #2]
   1e5f0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e5f2:	1ac0      	subs	r0, r0, r3
   1e5f4:	e7f4      	b.n	1e5e0 <bt_uuid_cmp+0x2a>
   1e5f6:	6840      	ldr	r0, [r0, #4]
   1e5f8:	6863      	ldr	r3, [r4, #4]
   1e5fa:	e7fa      	b.n	1e5f2 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e5fc:	2210      	movs	r2, #16
   1e5fe:	1c61      	adds	r1, r4, #1
   1e600:	3001      	adds	r0, #1
}
   1e602:	b00a      	add	sp, #40	; 0x28
   1e604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e608:	f7ff bf29 	b.w	1e45e <memcmp>
	switch (u1->type) {
   1e60c:	f06f 0015 	mvn.w	r0, #21
   1e610:	e7e6      	b.n	1e5e0 <bt_uuid_cmp+0x2a>

0001e612 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e612:	2a04      	cmp	r2, #4
{
   1e614:	b510      	push	{r4, lr}
	switch (data_len) {
   1e616:	d00a      	beq.n	1e62e <bt_uuid_create+0x1c>
   1e618:	2a10      	cmp	r2, #16
   1e61a:	d00d      	beq.n	1e638 <bt_uuid_create+0x26>
   1e61c:	2a02      	cmp	r2, #2
   1e61e:	f04f 0300 	mov.w	r3, #0
   1e622:	d10f      	bne.n	1e644 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1e624:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1e626:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e628:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e62a:	2001      	movs	r0, #1
}
   1e62c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e62e:	2301      	movs	r3, #1
   1e630:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e632:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e634:	6042      	str	r2, [r0, #4]
		break;
   1e636:	e7f8      	b.n	1e62a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1e638:	2302      	movs	r3, #2
   1e63a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e63e:	f7ff ff1f 	bl	1e480 <memcpy>
		break;
   1e642:	e7f2      	b.n	1e62a <bt_uuid_create+0x18>
	switch (data_len) {
   1e644:	4618      	mov	r0, r3
   1e646:	e7f1      	b.n	1e62c <bt_uuid_create+0x1a>

0001e648 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1e648:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1e64a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e64c:	2106      	movs	r1, #6
{
   1e64e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e650:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e654:	f7f2 fd64 	bl	11120 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1e658:	b918      	cbnz	r0, 1e662 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1e65a:	79a3      	ldrb	r3, [r4, #6]
   1e65c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e660:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1e662:	bd10      	pop	{r4, pc}

0001e664 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e664:	280f      	cmp	r0, #15
   1e666:	d806      	bhi.n	1e676 <bt_hci_evt_get_flags+0x12>
   1e668:	280d      	cmp	r0, #13
   1e66a:	d80b      	bhi.n	1e684 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1e66c:	2805      	cmp	r0, #5
   1e66e:	bf14      	ite	ne
   1e670:	2002      	movne	r0, #2
   1e672:	2003      	moveq	r0, #3
   1e674:	4770      	bx	lr
	switch (evt) {
   1e676:	2813      	cmp	r0, #19
   1e678:	d004      	beq.n	1e684 <bt_hci_evt_get_flags+0x20>
   1e67a:	281a      	cmp	r0, #26
   1e67c:	bf14      	ite	ne
   1e67e:	2002      	movne	r0, #2
   1e680:	2001      	moveq	r0, #1
   1e682:	4770      	bx	lr
   1e684:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1e686:	4770      	bx	lr

0001e688 <get_adv_channel_map>:
{
   1e688:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e68a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e68e:	bf0c      	ite	eq
   1e690:	2007      	moveq	r0, #7
   1e692:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e694:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e696:	bf48      	it	mi
   1e698:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e69c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e69e:	bf48      	it	mi
   1e6a0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e6a4:	4770      	bx	lr

0001e6a6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e6a6:	e8d0 0faf 	lda	r0, [r0]
}
   1e6aa:	4770      	bx	lr

0001e6ac <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1e6ac:	2207      	movs	r2, #7
   1e6ae:	f7ff bee7 	b.w	1e480 <memcpy>

0001e6b2 <atomic_or>:
{
   1e6b2:	4603      	mov	r3, r0
}
   1e6b4:	e8d3 0fef 	ldaex	r0, [r3]
   1e6b8:	ea40 0201 	orr.w	r2, r0, r1
   1e6bc:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e6c0:	f1bc 0f00 	cmp.w	ip, #0
   1e6c4:	d1f6      	bne.n	1e6b4 <atomic_or+0x2>
   1e6c6:	4770      	bx	lr

0001e6c8 <atomic_test_and_set_bit>:
{
   1e6c8:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e6ca:	2301      	movs	r3, #1
   1e6cc:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e6d0:	f7ff ffef 	bl	1e6b2 <atomic_or>
	return (old & mask) != 0;
   1e6d4:	4201      	tst	r1, r0
}
   1e6d6:	bf14      	ite	ne
   1e6d8:	2001      	movne	r0, #1
   1e6da:	2000      	moveq	r0, #0
   1e6dc:	bd08      	pop	{r3, pc}

0001e6de <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1e6de:	2207      	movs	r2, #7
   1e6e0:	f7ff bebd 	b.w	1e45e <memcmp>

0001e6e4 <atomic_and>:
{
   1e6e4:	4603      	mov	r3, r0
}
   1e6e6:	e8d3 0fef 	ldaex	r0, [r3]
   1e6ea:	ea00 0201 	and.w	r2, r0, r1
   1e6ee:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e6f2:	f1bc 0f00 	cmp.w	ip, #0
   1e6f6:	d1f6      	bne.n	1e6e6 <atomic_and+0x2>
   1e6f8:	4770      	bx	lr

0001e6fa <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1e6fa:	460b      	mov	r3, r1
   1e6fc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e6fe:	f001 041f 	and.w	r4, r1, #31
   1e702:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e704:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e706:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e708:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1e70c:	b112      	cbz	r2, 1e714 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1e70e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e710:	f7ff bfcf 	b.w	1e6b2 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e714:	43c9      	mvns	r1, r1
}
   1e716:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e718:	f7ff bfe4 	b.w	1e6e4 <atomic_and>

0001e71c <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   1e71c:	3008      	adds	r0, #8
   1e71e:	f002 b84b 	b.w	207b8 <net_buf_simple_add_u8>

0001e722 <sys_put_le64>:
	dst[1] = val >> 8;
   1e722:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1e726:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   1e728:	2300      	movs	r3, #0
   1e72a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1e72c:	0e00      	lsrs	r0, r0, #24
   1e72e:	70d0      	strb	r0, [r2, #3]
   1e730:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1e734:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1e736:	7093      	strb	r3, [r2, #2]
   1e738:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1e73a:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1e73c:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1e73e:	71d1      	strb	r1, [r2, #7]
}
   1e740:	4770      	bx	lr

0001e742 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1e742:	f100 0210 	add.w	r2, r0, #16
{
   1e746:	b508      	push	{r3, lr}
   1e748:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e74a:	4610      	mov	r0, r2
   1e74c:	f7ff ffab 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1e750:	0640      	lsls	r0, r0, #25
   1e752:	d50a      	bpl.n	1e76a <adv_id_check_connectable_func+0x28>
   1e754:	4610      	mov	r0, r2
   1e756:	f7ff ffa6 	bl	1e6a6 <atomic_get>
   1e75a:	05c2      	lsls	r2, r0, #23
   1e75c:	d505      	bpl.n	1e76a <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1e75e:	781a      	ldrb	r2, [r3, #0]
   1e760:	780b      	ldrb	r3, [r1, #0]
   1e762:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1e764:	bf1c      	itt	ne
   1e766:	2301      	movne	r3, #1
   1e768:	704b      	strbne	r3, [r1, #1]
}
   1e76a:	bd08      	pop	{r3, pc}

0001e76c <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1e76c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e76e:	2106      	movs	r1, #6
   1e770:	4668      	mov	r0, sp
   1e772:	f7f2 fcd5 	bl	11120 <bt_rand>
	if (err) {
   1e776:	b940      	cbnz	r0, 1e78a <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e778:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1e77c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e77e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e782:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1e786:	f7f0 fd27 	bl	f1d8 <set_random_address>
}
   1e78a:	b003      	add	sp, #12
   1e78c:	f85d fb04 	ldr.w	pc, [sp], #4

0001e790 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e790:	f100 0310 	add.w	r3, r0, #16
{
   1e794:	b510      	push	{r4, lr}
   1e796:	4604      	mov	r4, r0
   1e798:	4618      	mov	r0, r3
   1e79a:	f7ff ff84 	bl	1e6a6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e79e:	0642      	lsls	r2, r0, #25
   1e7a0:	d50a      	bpl.n	1e7b8 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e7a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1e7a6:	4618      	mov	r0, r3
   1e7a8:	f7ff ff83 	bl	1e6b2 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1e7ac:	4620      	mov	r0, r4
}
   1e7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e7b2:	2100      	movs	r1, #0
   1e7b4:	f7f0 bd3e 	b.w	f234 <set_le_adv_enable_legacy>
}
   1e7b8:	bd10      	pop	{r4, pc}

0001e7ba <adv_unpause_enabled>:
{
   1e7ba:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e7bc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1e7c0:	4604      	mov	r4, r0
   1e7c2:	3010      	adds	r0, #16
   1e7c4:	f7ff ff8e 	bl	1e6e4 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1e7c8:	0483      	lsls	r3, r0, #18
   1e7ca:	d505      	bpl.n	1e7d8 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1e7cc:	4620      	mov	r0, r4
}
   1e7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e7d2:	2101      	movs	r1, #1
   1e7d4:	f7f0 bd2e 	b.w	f234 <set_le_adv_enable_legacy>
}
   1e7d8:	bd10      	pop	{r4, pc}

0001e7da <addr_res_enable>:
{
   1e7da:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e7dc:	2101      	movs	r1, #1
{
   1e7de:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e7e0:	f242 002d 	movw	r0, #8237	; 0x202d
   1e7e4:	f7f0 fc2c 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1e7e8:	4604      	mov	r4, r0
   1e7ea:	b150      	cbz	r0, 1e802 <addr_res_enable+0x28>
	net_buf_add_u8(buf, enable);
   1e7ec:	4629      	mov	r1, r5
   1e7ee:	f7ff ff95 	bl	1e71c <net_buf_add_u8.isra.0>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e7f2:	4621      	mov	r1, r4
}
   1e7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e7f8:	2200      	movs	r2, #0
   1e7fa:	f242 002d 	movw	r0, #8237	; 0x202d
   1e7fe:	f7f0 bc69 	b.w	f0d4 <bt_hci_cmd_send_sync>
}
   1e802:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e806:	bd38      	pop	{r3, r4, r5, pc}

0001e808 <set_le_scan_enable.isra.0>:
	return set_le_scan_enable_legacy(enable);
   1e808:	f7f0 bd40 	b.w	f28c <set_le_scan_enable_legacy>

0001e80c <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1e80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e80e:	4607      	mov	r7, r0
   1e810:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1e812:	f242 0027 	movw	r0, #8231	; 0x2027
   1e816:	2127      	movs	r1, #39	; 0x27
   1e818:	f7f0 fc12 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1e81c:	4604      	mov	r4, r0
   1e81e:	b1d0      	cbz	r0, 1e856 <hci_id_add.constprop.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e820:	2127      	movs	r1, #39	; 0x27
   1e822:	3008      	adds	r0, #8
   1e824:	f7f9 f8f4 	bl	17a10 <net_buf_simple_add>
   1e828:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1e82a:	4639      	mov	r1, r7
   1e82c:	f7ff ff3e 	bl	1e6ac <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1e830:	4631      	mov	r1, r6
   1e832:	2210      	movs	r2, #16
   1e834:	1de8      	adds	r0, r5, #7
   1e836:	f7ff fe23 	bl	1e480 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1e83a:	2210      	movs	r2, #16
   1e83c:	2100      	movs	r1, #0
   1e83e:	f105 0017 	add.w	r0, r5, #23
   1e842:	f7ff fe48 	bl	1e4d6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e846:	4621      	mov	r1, r4
}
   1e848:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e84c:	2200      	movs	r2, #0
   1e84e:	f242 0027 	movw	r0, #8231	; 0x2027
   1e852:	f7f0 bc3f 	b.w	f0d4 <bt_hci_cmd_send_sync>
}
   1e856:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e85c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e85c:	7a03      	ldrb	r3, [r0, #8]
   1e85e:	075b      	lsls	r3, r3, #29
   1e860:	d504      	bpl.n	1e86c <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1e862:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1e866:	3001      	adds	r0, #1
   1e868:	f7ff bfd0 	b.w	1e80c <hci_id_add.constprop.0>
}
   1e86c:	4770      	bx	lr

0001e86e <bt_lookup_id_addr>:
{
   1e86e:	b510      	push	{r4, lr}
   1e870:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1e872:	f7f8 fd29 	bl	172c8 <bt_keys_find_irk>
		if (keys) {
   1e876:	b100      	cbz	r0, 1e87a <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1e878:	1c44      	adds	r4, r0, #1
}
   1e87a:	4620      	mov	r0, r4
   1e87c:	bd10      	pop	{r4, pc}

0001e87e <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1e87e:	f7f0 bf01 	b.w	f684 <bt_le_create_conn_legacy>

0001e882 <bt_hci_disconnect>:
{
   1e882:	b570      	push	{r4, r5, r6, lr}
   1e884:	4606      	mov	r6, r0
   1e886:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e888:	f240 4006 	movw	r0, #1030	; 0x406
   1e88c:	2103      	movs	r1, #3
   1e88e:	f7f0 fbd7 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1e892:	4604      	mov	r4, r0
   1e894:	b168      	cbz	r0, 1e8b2 <bt_hci_disconnect+0x30>
   1e896:	2103      	movs	r1, #3
   1e898:	3008      	adds	r0, #8
   1e89a:	f7f9 f8b9 	bl	17a10 <net_buf_simple_add>
	disconn->reason = reason;
   1e89e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e8a0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e8a2:	4621      	mov	r1, r4
}
   1e8a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e8a8:	2200      	movs	r2, #0
   1e8aa:	f240 4006 	movw	r0, #1030	; 0x406
   1e8ae:	f7f0 bc11 	b.w	f0d4 <bt_hci_cmd_send_sync>
}
   1e8b2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e8b6:	bd70      	pop	{r4, r5, r6, pc}

0001e8b8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e8b8:	8803      	ldrh	r3, [r0, #0]
   1e8ba:	8842      	ldrh	r2, [r0, #2]
{
   1e8bc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e8be:	4293      	cmp	r3, r2
   1e8c0:	d819      	bhi.n	1e8f6 <bt_le_conn_params_valid+0x3e>
   1e8c2:	2b05      	cmp	r3, #5
   1e8c4:	d917      	bls.n	1e8f6 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e8c6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1e8ca:	d814      	bhi.n	1e8f6 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1e8cc:	8883      	ldrh	r3, [r0, #4]
   1e8ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e8d2:	d210      	bcs.n	1e8f6 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e8d4:	f640 4476 	movw	r4, #3190	; 0xc76
   1e8d8:	88c0      	ldrh	r0, [r0, #6]
   1e8da:	f1a0 010a 	sub.w	r1, r0, #10
   1e8de:	b289      	uxth	r1, r1
   1e8e0:	42a1      	cmp	r1, r4
   1e8e2:	d808      	bhi.n	1e8f6 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1e8e4:	3301      	adds	r3, #1
   1e8e6:	b29b      	uxth	r3, r3
   1e8e8:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e8ea:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1e8ee:	bf34      	ite	cc
   1e8f0:	2001      	movcc	r0, #1
   1e8f2:	2000      	movcs	r0, #0
}
   1e8f4:	bd10      	pop	{r4, pc}
		return false;
   1e8f6:	2000      	movs	r0, #0
   1e8f8:	e7fc      	b.n	1e8f4 <bt_le_conn_params_valid+0x3c>

0001e8fa <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1e8fa:	7a03      	ldrb	r3, [r0, #8]
   1e8fc:	07d9      	lsls	r1, r3, #31
   1e8fe:	d504      	bpl.n	1e90a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1e900:	f023 0301 	bic.w	r3, r3, #1
   1e904:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1e906:	f7f0 bfb7 	b.w	f878 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1e90a:	0799      	lsls	r1, r3, #30
   1e90c:	d504      	bpl.n	1e918 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1e90e:	f023 0302 	bic.w	r3, r3, #2
   1e912:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1e914:	f7f1 b86e 	b.w	f9f4 <bt_id_del>
}
   1e918:	4770      	bx	lr

0001e91a <bt_le_set_data_len>:
{
   1e91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e91c:	4607      	mov	r7, r0
   1e91e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e920:	f242 0022 	movw	r0, #8226	; 0x2022
   1e924:	2106      	movs	r1, #6
{
   1e926:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e928:	f7f0 fb8a 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1e92c:	4604      	mov	r4, r0
   1e92e:	b170      	cbz	r0, 1e94e <bt_le_set_data_len+0x34>
   1e930:	2106      	movs	r1, #6
   1e932:	3008      	adds	r0, #8
   1e934:	f7f9 f86c 	bl	17a10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e938:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e93a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e93c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e93e:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e940:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e942:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e94a:	f7f1 ba93 	b.w	fe74 <bt_hci_cmd_send>
}
   1e94e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e954 <bt_le_set_phy>:
{
   1e954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e958:	4680      	mov	r8, r0
   1e95a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e95c:	f242 0032 	movw	r0, #8242	; 0x2032
   1e960:	2107      	movs	r1, #7
{
   1e962:	4616      	mov	r6, r2
   1e964:	461d      	mov	r5, r3
   1e966:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e96a:	f7f0 fb69 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1e96e:	4604      	mov	r4, r0
   1e970:	b190      	cbz	r0, 1e998 <bt_le_set_phy+0x44>
   1e972:	2107      	movs	r1, #7
   1e974:	3008      	adds	r0, #8
   1e976:	f7f9 f84b 	bl	17a10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e97a:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e97e:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e980:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e982:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e984:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e986:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e98a:	4621      	mov	r1, r4
}
   1e98c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e990:	f242 0032 	movw	r0, #8242	; 0x2032
   1e994:	f7f1 ba6e 	b.w	fe74 <bt_hci_cmd_send>
}
   1e998:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e9a0 <bt_addr_le_is_bonded>:
{
   1e9a0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1e9a2:	f7f8 fcc9 	bl	17338 <bt_keys_find_addr>
		return keys && keys->keys;
   1e9a6:	b118      	cbz	r0, 1e9b0 <bt_addr_le_is_bonded+0x10>
   1e9a8:	89c0      	ldrh	r0, [r0, #14]
   1e9aa:	3800      	subs	r0, #0
   1e9ac:	bf18      	it	ne
   1e9ae:	2001      	movne	r0, #1
}
   1e9b0:	bd08      	pop	{r3, pc}

0001e9b2 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1e9b2:	6880      	ldr	r0, [r0, #8]
   1e9b4:	f7f2 b8f2 	b.w	10b9c <enh_conn_complete>

0001e9b8 <le_legacy_conn_complete>:
{
   1e9b8:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e9ba:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e9bc:	6881      	ldr	r1, [r0, #8]
{
   1e9be:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1e9c0:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e9c2:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1e9c4:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e9c8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e9cc:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1e9ce:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e9d2:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1e9d6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e9da:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1e9de:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e9e2:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1e9e6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e9ea:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e9ee:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e9f2:	7b4b      	ldrb	r3, [r1, #13]
   1e9f4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e9f8:	f7ff fe58 	bl	1e6ac <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1e9fc:	4669      	mov	r1, sp
   1e9fe:	2206      	movs	r2, #6
   1ea00:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1ea04:	9400      	str	r4, [sp, #0]
   1ea06:	f8ad 4004 	strh.w	r4, [sp, #4]
   1ea0a:	f7ff fd39 	bl	1e480 <memcpy>
   1ea0e:	2206      	movs	r2, #6
   1ea10:	4669      	mov	r1, sp
   1ea12:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1ea16:	9400      	str	r4, [sp, #0]
   1ea18:	f8ad 4004 	strh.w	r4, [sp, #4]
   1ea1c:	f7ff fd30 	bl	1e480 <memcpy>
	enh_conn_complete(&enh);
   1ea20:	a802      	add	r0, sp, #8
   1ea22:	f7f2 f8bb 	bl	10b9c <enh_conn_complete>
}
   1ea26:	b00a      	add	sp, #40	; 0x28
   1ea28:	bd10      	pop	{r4, pc}

0001ea2a <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1ea2a:	b530      	push	{r4, r5, lr}
   1ea2c:	b0b1      	sub	sp, #196	; 0xc4
   1ea2e:	460d      	mov	r5, r1
	uint8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   1ea30:	4601      	mov	r1, r0
   1ea32:	4668      	mov	r0, sp
{
   1ea34:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   1ea36:	f7f2 fb1f 	bl	11078 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1ea3a:	4669      	mov	r1, sp
   1ea3c:	a804      	add	r0, sp, #16
   1ea3e:	f7ee fded 	bl	d61c <tc_aes128_set_encrypt_key>
   1ea42:	b1c0      	cbz	r0, 1ea76 <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   1ea44:	4629      	mov	r1, r5
   1ea46:	4668      	mov	r0, sp
   1ea48:	f7f2 fb16 	bl	11078 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1ea4c:	4669      	mov	r1, sp
   1ea4e:	4620      	mov	r0, r4
   1ea50:	aa04      	add	r2, sp, #16
   1ea52:	f7ff f895 	bl	1db80 <tc_aes_encrypt>
   1ea56:	b170      	cbz	r0, 1ea76 <bt_encrypt_le+0x4c>
   1ea58:	1e63      	subs	r3, r4, #1
   1ea5a:	f104 0210 	add.w	r2, r4, #16
   1ea5e:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ea60:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ea64:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1ea68:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ea6a:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ea6c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1ea6e:	d1f7      	bne.n	1ea60 <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1ea70:	2000      	movs	r0, #0
}
   1ea72:	b031      	add	sp, #196	; 0xc4
   1ea74:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1ea76:	f06f 0015 	mvn.w	r0, #21
   1ea7a:	e7fa      	b.n	1ea72 <bt_encrypt_le+0x48>

0001ea7c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ea7c:	e8d0 0faf 	lda	r0, [r0]
}
   1ea80:	4770      	bx	lr

0001ea82 <atomic_and>:
{
   1ea82:	4603      	mov	r3, r0
}
   1ea84:	e8d3 0fef 	ldaex	r0, [r3]
   1ea88:	ea00 0201 	and.w	r2, r0, r1
   1ea8c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1ea90:	f1bc 0f00 	cmp.w	ip, #0
   1ea94:	d1f6      	bne.n	1ea84 <atomic_and+0x2>
   1ea96:	4770      	bx	lr

0001ea98 <atomic_or>:
{
   1ea98:	4603      	mov	r3, r0
}
   1ea9a:	e8d3 0fef 	ldaex	r0, [r3]
   1ea9e:	ea40 0201 	orr.w	r2, r0, r1
   1eaa2:	e8c3 2fec 	stlex	ip, r2, [r3]
   1eaa6:	f1bc 0f00 	cmp.w	ip, #0
   1eaaa:	d1f6      	bne.n	1ea9a <atomic_or+0x2>
   1eaac:	4770      	bx	lr

0001eaae <tx_notify>:
{
   1eaae:	b570      	push	{r4, r5, r6, lr}
   1eab0:	4604      	mov	r4, r0
	__asm__ volatile(
   1eab2:	f04f 0220 	mov.w	r2, #32
   1eab6:	f3ef 8311 	mrs	r3, BASEPRI
   1eaba:	f382 8811 	msr	BASEPRI, r2
   1eabe:	f3bf 8f6f 	isb	sy
	return list->head;
   1eac2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1eac4:	b920      	cbnz	r0, 1ead0 <tx_notify+0x22>
	__asm__ volatile(
   1eac6:	f383 8811 	msr	BASEPRI, r3
   1eaca:	f3bf 8f6f 	isb	sy
}
   1eace:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ead0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1ead2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ead4:	4288      	cmp	r0, r1
	list->tail = node;
   1ead6:	bf08      	it	eq
   1ead8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1eada:	6222      	str	r2, [r4, #32]
   1eadc:	f383 8811 	msr	BASEPRI, r3
   1eae0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1eae4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1eae8:	f7f2 fb32 	bl	11150 <tx_free>
		cb(conn, user_data);
   1eaec:	4631      	mov	r1, r6
   1eaee:	4620      	mov	r0, r4
   1eaf0:	47a8      	blx	r5
	while (1) {
   1eaf2:	e7de      	b.n	1eab2 <tx_notify+0x4>

0001eaf4 <tx_complete_work>:
	tx_notify(conn);
   1eaf4:	3828      	subs	r0, #40	; 0x28
   1eaf6:	f7ff bfda 	b.w	1eaae <tx_notify>

0001eafa <bt_conn_new>:
{
   1eafa:	b538      	push	{r3, r4, r5, lr}
   1eafc:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1eafe:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1eb00:	2501      	movs	r5, #1
   1eb02:	428b      	cmp	r3, r1
   1eb04:	d102      	bne.n	1eb0c <bt_conn_new+0x12>
		return NULL;
   1eb06:	2400      	movs	r4, #0
}
   1eb08:	4620      	mov	r0, r4
   1eb0a:	bd38      	pop	{r3, r4, r5, pc}
   1eb0c:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1eb10:	e8d2 0fef 	ldaex	r0, [r2]
   1eb14:	2800      	cmp	r0, #0
   1eb16:	d104      	bne.n	1eb22 <bt_conn_new+0x28>
   1eb18:	e8c2 5fec 	stlex	ip, r5, [r2]
   1eb1c:	f1bc 0f00 	cmp.w	ip, #0
   1eb20:	d1f6      	bne.n	1eb10 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1eb22:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1eb26:	d002      	beq.n	1eb2e <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1eb28:	4604      	mov	r4, r0
   1eb2a:	3301      	adds	r3, #1
   1eb2c:	e7e9      	b.n	1eb02 <bt_conn_new+0x8>
	if (!conn) {
   1eb2e:	2c00      	cmp	r4, #0
   1eb30:	d0ea      	beq.n	1eb08 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1eb32:	22b8      	movs	r2, #184	; 0xb8
   1eb34:	2100      	movs	r1, #0
   1eb36:	4620      	mov	r0, r4
   1eb38:	f7ff fccd 	bl	1e4d6 <memset>
	return conn;
   1eb3c:	e7e4      	b.n	1eb08 <bt_conn_new+0xe>

0001eb3e <bt_conn_le_start_encryption>:
{
   1eb3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb42:	4682      	mov	sl, r0
   1eb44:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   1eb46:	f242 0019 	movw	r0, #8217	; 0x2019
   1eb4a:	211c      	movs	r1, #28
{
   1eb4c:	4690      	mov	r8, r2
   1eb4e:	461f      	mov	r7, r3
   1eb50:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   1eb52:	f7f0 fa75 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1eb56:	4605      	mov	r5, r0
   1eb58:	b340      	cbz	r0, 1ebac <bt_conn_le_start_encryption+0x6e>
   1eb5a:	211c      	movs	r1, #28
   1eb5c:	3008      	adds	r0, #8
   1eb5e:	f7f8 ff57 	bl	17a10 <net_buf_simple_add>
   1eb62:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   1eb64:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   1eb68:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   1eb6a:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   1eb6e:	4649      	mov	r1, r9
   1eb70:	f7ff fc86 	bl	1e480 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   1eb74:	2202      	movs	r2, #2
   1eb76:	4641      	mov	r1, r8
   1eb78:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   1eb7c:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   1eb7e:	f7ff fc7f 	bl	1e480 <memcpy>
	memcpy(cp->ltk, ltk, len);
   1eb82:	4632      	mov	r2, r6
   1eb84:	4639      	mov	r1, r7
   1eb86:	4620      	mov	r0, r4
   1eb88:	f7ff fc7a 	bl	1e480 <memcpy>
	if (len < sizeof(cp->ltk)) {
   1eb8c:	2e0f      	cmp	r6, #15
   1eb8e:	d805      	bhi.n	1eb9c <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   1eb90:	2100      	movs	r1, #0
   1eb92:	f1c6 0210 	rsb	r2, r6, #16
   1eb96:	19a0      	adds	r0, r4, r6
   1eb98:	f7ff fc9d 	bl	1e4d6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   1eb9c:	4629      	mov	r1, r5
}
   1eb9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   1eba2:	2200      	movs	r2, #0
   1eba4:	f242 0019 	movw	r0, #8217	; 0x2019
   1eba8:	f7f0 ba94 	b.w	f0d4 <bt_hci_cmd_send_sync>
}
   1ebac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ebb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ebb4 <bt_conn_set_security>:
{
   1ebb4:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ebb6:	7b43      	ldrb	r3, [r0, #13]
{
   1ebb8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ebba:	2b07      	cmp	r3, #7
{
   1ebbc:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1ebbe:	d11c      	bne.n	1ebfa <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1ebc0:	7a43      	ldrb	r3, [r0, #9]
   1ebc2:	428b      	cmp	r3, r1
   1ebc4:	d21c      	bcs.n	1ec00 <bt_conn_set_security+0x4c>
   1ebc6:	7a83      	ldrb	r3, [r0, #10]
   1ebc8:	428b      	cmp	r3, r1
   1ebca:	d219      	bcs.n	1ec00 <bt_conn_set_security+0x4c>
	if (val) {
   1ebcc:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1ebce:	f100 0004 	add.w	r0, r0, #4
   1ebd2:	d50d      	bpl.n	1ebf0 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ebd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1ebd8:	f7ff ff5e 	bl	1ea98 <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1ebdc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   1ebe0:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1ebe2:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1ebe4:	f001 fcf4 	bl	205d0 <bt_smp_start_security>
	if (err) {
   1ebe8:	b108      	cbz	r0, 1ebee <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   1ebea:	7a63      	ldrb	r3, [r4, #9]
   1ebec:	72a3      	strb	r3, [r4, #10]
}
   1ebee:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ebf0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1ebf4:	f7ff ff45 	bl	1ea82 <atomic_and>
   1ebf8:	e7f0      	b.n	1ebdc <bt_conn_set_security+0x28>
		return -ENOTCONN;
   1ebfa:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1ebfe:	e7f6      	b.n	1ebee <bt_conn_set_security+0x3a>
		return 0;
   1ec00:	2000      	movs	r0, #0
   1ec02:	e7f4      	b.n	1ebee <bt_conn_set_security+0x3a>

0001ec04 <bt_conn_get_security>:
}
   1ec04:	7a40      	ldrb	r0, [r0, #9]
   1ec06:	4770      	bx	lr

0001ec08 <bt_conn_reset_rx_state>:
{
   1ec08:	b510      	push	{r4, lr}
   1ec0a:	4604      	mov	r4, r0
	if (!conn->rx) {
   1ec0c:	6900      	ldr	r0, [r0, #16]
   1ec0e:	b118      	cbz	r0, 1ec18 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1ec10:	f7f8 fde8 	bl	177e4 <net_buf_unref>
	conn->rx = NULL;
   1ec14:	2300      	movs	r3, #0
   1ec16:	6123      	str	r3, [r4, #16]
}
   1ec18:	bd10      	pop	{r4, pc}

0001ec1a <bt_conn_is_peer_addr_le>:
{
   1ec1a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1ec1c:	7a03      	ldrb	r3, [r0, #8]
{
   1ec1e:	4604      	mov	r4, r0
	if (id != conn->id) {
   1ec20:	428b      	cmp	r3, r1
{
   1ec22:	4615      	mov	r5, r2
	if (id != conn->id) {
   1ec24:	d115      	bne.n	1ec52 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1ec26:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ec2a:	2207      	movs	r2, #7
   1ec2c:	4628      	mov	r0, r5
   1ec2e:	f7ff fc16 	bl	1e45e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1ec32:	b180      	cbz	r0, 1ec56 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1ec34:	78e3      	ldrb	r3, [r4, #3]
   1ec36:	2207      	movs	r2, #7
   1ec38:	b943      	cbnz	r3, 1ec4c <bt_conn_is_peer_addr_le+0x32>
   1ec3a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1ec3e:	4628      	mov	r0, r5
   1ec40:	f7ff fc0d 	bl	1e45e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1ec44:	fab0 f080 	clz	r0, r0
   1ec48:	0940      	lsrs	r0, r0, #5
}
   1ec4a:	bd38      	pop	{r3, r4, r5, pc}
   1ec4c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ec50:	e7f5      	b.n	1ec3e <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ec52:	2000      	movs	r0, #0
   1ec54:	e7f9      	b.n	1ec4a <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ec56:	2001      	movs	r0, #1
   1ec58:	e7f7      	b.n	1ec4a <bt_conn_is_peer_addr_le+0x30>

0001ec5a <bt_conn_ref>:
{
   1ec5a:	4603      	mov	r3, r0
   1ec5c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1ec5e:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1ec62:	4610      	mov	r0, r2
   1ec64:	f7ff ff0a 	bl	1ea7c <atomic_get>
		if (!old) {
   1ec68:	b160      	cbz	r0, 1ec84 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1ec6a:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ec6c:	e8d2 4fef 	ldaex	r4, [r2]
   1ec70:	4284      	cmp	r4, r0
   1ec72:	d104      	bne.n	1ec7e <bt_conn_ref+0x24>
   1ec74:	e8c2 1fec 	stlex	ip, r1, [r2]
   1ec78:	f1bc 0f00 	cmp.w	ip, #0
   1ec7c:	d1f6      	bne.n	1ec6c <bt_conn_ref+0x12>
   1ec7e:	d1f0      	bne.n	1ec62 <bt_conn_ref+0x8>
}
   1ec80:	4618      	mov	r0, r3
   1ec82:	bd10      	pop	{r4, pc}
			return NULL;
   1ec84:	4603      	mov	r3, r0
   1ec86:	e7fb      	b.n	1ec80 <bt_conn_ref+0x26>

0001ec88 <conn_lookup_handle>:
{
   1ec88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec8c:	4607      	mov	r7, r0
   1ec8e:	460e      	mov	r6, r1
   1ec90:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1ec92:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ec94:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1ec98:	42b4      	cmp	r4, r6
   1ec9a:	d103      	bne.n	1eca4 <conn_lookup_handle+0x1c>
	return NULL;
   1ec9c:	2300      	movs	r3, #0
}
   1ec9e:	4618      	mov	r0, r3
   1eca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1eca4:	fb09 7004 	mla	r0, r9, r4, r7
   1eca8:	f7ff ffd7 	bl	1ec5a <bt_conn_ref>
   1ecac:	4603      	mov	r3, r0
		if (!conn) {
   1ecae:	b158      	cbz	r0, 1ecc8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1ecb0:	7b45      	ldrb	r5, [r0, #13]
   1ecb2:	2d01      	cmp	r5, #1
   1ecb4:	d002      	beq.n	1ecbc <conn_lookup_handle+0x34>
   1ecb6:	3d07      	subs	r5, #7
   1ecb8:	2d01      	cmp	r5, #1
   1ecba:	d803      	bhi.n	1ecc4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1ecbc:	881a      	ldrh	r2, [r3, #0]
   1ecbe:	4542      	cmp	r2, r8
   1ecc0:	d0ed      	beq.n	1ec9e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1ecc2:	4618      	mov	r0, r3
   1ecc4:	f7f2 fcf4 	bl	116b0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1ecc8:	3401      	adds	r4, #1
   1ecca:	e7e5      	b.n	1ec98 <conn_lookup_handle+0x10>

0001eccc <bt_conn_get_dst>:
}
   1eccc:	3088      	adds	r0, #136	; 0x88
   1ecce:	4770      	bx	lr

0001ecd0 <bt_conn_le_conn_update>:
{
   1ecd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ecd2:	4607      	mov	r7, r0
   1ecd4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ecd6:	f242 0013 	movw	r0, #8211	; 0x2013
   1ecda:	210e      	movs	r1, #14
   1ecdc:	f7f0 f9b0 	bl	f040 <bt_hci_cmd_create>
	if (!buf) {
   1ece0:	4606      	mov	r6, r0
   1ece2:	b1d0      	cbz	r0, 1ed1a <_flash_used+0x3e>
   1ece4:	210e      	movs	r1, #14
   1ece6:	3008      	adds	r0, #8
   1ece8:	f7f8 fe92 	bl	17a10 <net_buf_simple_add>
   1ecec:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ecee:	220e      	movs	r2, #14
   1ecf0:	2100      	movs	r1, #0
   1ecf2:	f7ff fbf0 	bl	1e4d6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ecf6:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ecf8:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ecfa:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ecfc:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ecfe:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ed00:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ed02:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ed04:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ed08:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ed0a:	88ab      	ldrh	r3, [r5, #4]
   1ed0c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ed0e:	88eb      	ldrh	r3, [r5, #6]
   1ed10:	8123      	strh	r3, [r4, #8]
}
   1ed12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ed16:	f7f0 b9dd 	b.w	f0d4 <bt_hci_cmd_send_sync>
}
   1ed1a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ed1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ed20 <l2cap_connected>:
}
   1ed20:	4770      	bx	lr

0001ed22 <l2cap_disconnected>:
   1ed22:	4770      	bx	lr

0001ed24 <bt_l2cap_chan_remove>:
	return list->head;
   1ed24:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ed26:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed28:	b17b      	cbz	r3, 1ed4a <bt_l2cap_chan_remove+0x26>
   1ed2a:	2200      	movs	r2, #0
   1ed2c:	3b08      	subs	r3, #8
   1ed2e:	b163      	cbz	r3, 1ed4a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1ed30:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1ed32:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1ed36:	d10e      	bne.n	1ed56 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1ed38:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1ed3a:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1ed3c:	b932      	cbnz	r2, 1ed4c <bt_l2cap_chan_remove+0x28>
   1ed3e:	42ac      	cmp	r4, r5
	list->head = node;
   1ed40:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1ed42:	d100      	bne.n	1ed46 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1ed44:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1ed46:	2200      	movs	r2, #0
   1ed48:	609a      	str	r2, [r3, #8]
}
   1ed4a:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1ed4c:	42ac      	cmp	r4, r5
	parent->next = child;
   1ed4e:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1ed50:	bf08      	it	eq
   1ed52:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1ed54:	e7f7      	b.n	1ed46 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed56:	2c00      	cmp	r4, #0
   1ed58:	d0f7      	beq.n	1ed4a <bt_l2cap_chan_remove+0x26>
	return node->next;
   1ed5a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed5c:	2b00      	cmp	r3, #0
   1ed5e:	d0f4      	beq.n	1ed4a <bt_l2cap_chan_remove+0x26>
   1ed60:	4622      	mov	r2, r4
   1ed62:	3b08      	subs	r3, #8
   1ed64:	e7e3      	b.n	1ed2e <bt_l2cap_chan_remove+0xa>

0001ed66 <bt_l2cap_chan_del>:
{
   1ed66:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1ed68:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1ed6c:	4604      	mov	r4, r0
	if (!chan->conn) {
   1ed6e:	b123      	cbz	r3, 1ed7a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1ed70:	686b      	ldr	r3, [r5, #4]
   1ed72:	b103      	cbz	r3, 1ed76 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1ed74:	4798      	blx	r3
	chan->conn = NULL;
   1ed76:	2300      	movs	r3, #0
   1ed78:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1ed7a:	68e3      	ldr	r3, [r4, #12]
   1ed7c:	b10b      	cbz	r3, 1ed82 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1ed7e:	4620      	mov	r0, r4
   1ed80:	4798      	blx	r3
	if (ops->released) {
   1ed82:	69eb      	ldr	r3, [r5, #28]
   1ed84:	b11b      	cbz	r3, 1ed8e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1ed86:	4620      	mov	r0, r4
}
   1ed88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1ed8c:	4718      	bx	r3
}
   1ed8e:	bd70      	pop	{r4, r5, r6, pc}

0001ed90 <bt_l2cap_disconnected>:
	return list->head;
   1ed90:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ed92:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ed94:	b18b      	cbz	r3, 1edba <bt_l2cap_disconnected+0x2a>
   1ed96:	f1b3 0008 	subs.w	r0, r3, #8
   1ed9a:	d00e      	beq.n	1edba <bt_l2cap_disconnected+0x2a>
	return node->next;
   1ed9c:	681c      	ldr	r4, [r3, #0]
   1ed9e:	b104      	cbz	r4, 1eda2 <bt_l2cap_disconnected+0x12>
   1eda0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1eda2:	f7ff ffe0 	bl	1ed66 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1eda6:	b144      	cbz	r4, 1edba <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eda8:	f114 0308 	adds.w	r3, r4, #8
   1edac:	d002      	beq.n	1edb4 <bt_l2cap_disconnected+0x24>
	return node->next;
   1edae:	68a3      	ldr	r3, [r4, #8]
   1edb0:	b103      	cbz	r3, 1edb4 <bt_l2cap_disconnected+0x24>
   1edb2:	3b08      	subs	r3, #8
{
   1edb4:	4620      	mov	r0, r4
   1edb6:	461c      	mov	r4, r3
   1edb8:	e7f3      	b.n	1eda2 <bt_l2cap_disconnected+0x12>
}
   1edba:	bd10      	pop	{r4, pc}

0001edbc <bt_l2cap_security_changed>:
{
   1edbc:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1edbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1edc0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1edc2:	b1a3      	cbz	r3, 1edee <bt_l2cap_security_changed+0x32>
   1edc4:	f1b3 0008 	subs.w	r0, r3, #8
   1edc8:	d011      	beq.n	1edee <bt_l2cap_security_changed+0x32>
	return node->next;
   1edca:	681c      	ldr	r4, [r3, #0]
   1edcc:	b104      	cbz	r4, 1edd0 <bt_l2cap_security_changed+0x14>
   1edce:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1edd0:	6843      	ldr	r3, [r0, #4]
   1edd2:	689b      	ldr	r3, [r3, #8]
   1edd4:	b10b      	cbz	r3, 1edda <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1edd6:	4629      	mov	r1, r5
   1edd8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1edda:	b144      	cbz	r4, 1edee <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eddc:	f114 0308 	adds.w	r3, r4, #8
   1ede0:	d002      	beq.n	1ede8 <bt_l2cap_security_changed+0x2c>
	return node->next;
   1ede2:	68a3      	ldr	r3, [r4, #8]
   1ede4:	b103      	cbz	r3, 1ede8 <bt_l2cap_security_changed+0x2c>
   1ede6:	3b08      	subs	r3, #8
{
   1ede8:	4620      	mov	r0, r4
   1edea:	461c      	mov	r4, r3
   1edec:	e7f0      	b.n	1edd0 <bt_l2cap_security_changed+0x14>
}
   1edee:	bd38      	pop	{r3, r4, r5, pc}

0001edf0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1edf0:	3104      	adds	r1, #4
   1edf2:	f7f2 bfef 	b.w	11dd4 <bt_conn_create_pdu_timeout>

0001edf6 <bt_l2cap_send_cb>:
{
   1edf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edfa:	4614      	mov	r4, r2
   1edfc:	4605      	mov	r5, r0
   1edfe:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ee00:	f102 0008 	add.w	r0, r2, #8
   1ee04:	2104      	movs	r1, #4
   1ee06:	461e      	mov	r6, r3
   1ee08:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ee0c:	f7f8 fda8 	bl	17960 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ee10:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ee12:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ee14:	3a04      	subs	r2, #4
   1ee16:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1ee18:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ee1a:	4632      	mov	r2, r6
   1ee1c:	4621      	mov	r1, r4
   1ee1e:	4628      	mov	r0, r5
}
   1ee20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ee24:	f7f2 bb84 	b.w	11530 <bt_conn_send_cb>

0001ee28 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1ee28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ee2a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ee2c:	2202      	movs	r2, #2
   1ee2e:	2001      	movs	r0, #1
   1ee30:	f7f3 f926 	bl	12080 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1ee34:	4604      	mov	r4, r0
   1ee36:	b160      	cbz	r0, 1ee52 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1ee38:	2102      	movs	r1, #2
   1ee3a:	3008      	adds	r0, #8
   1ee3c:	f7f8 fde8 	bl	17a10 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ee40:	2300      	movs	r3, #0
   1ee42:	4622      	mov	r2, r4
   1ee44:	7003      	strb	r3, [r0, #0]
   1ee46:	7043      	strb	r3, [r0, #1]
   1ee48:	2105      	movs	r1, #5
   1ee4a:	4628      	mov	r0, r5
   1ee4c:	9300      	str	r3, [sp, #0]
   1ee4e:	f7ff ffd2 	bl	1edf6 <bt_l2cap_send_cb>
}
   1ee52:	b003      	add	sp, #12
   1ee54:	bd30      	pop	{r4, r5, pc}

0001ee56 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1ee56:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ee58:	b160      	cbz	r0, 1ee74 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1ee5a:	3808      	subs	r0, #8
   1ee5c:	b900      	cbnz	r0, 1ee60 <bt_l2cap_le_lookup_tx_cid+0xa>
   1ee5e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ee60:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1ee64:	428b      	cmp	r3, r1
   1ee66:	d005      	beq.n	1ee74 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee68:	f110 0308 	adds.w	r3, r0, #8
   1ee6c:	d001      	beq.n	1ee72 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1ee6e:	6880      	ldr	r0, [r0, #8]
   1ee70:	e7f2      	b.n	1ee58 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ee72:	4618      	mov	r0, r3
}
   1ee74:	4770      	bx	lr

0001ee76 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ee76:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ee78:	b160      	cbz	r0, 1ee94 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1ee7a:	3808      	subs	r0, #8
   1ee7c:	b900      	cbnz	r0, 1ee80 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ee7e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ee80:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1ee84:	428b      	cmp	r3, r1
   1ee86:	d005      	beq.n	1ee94 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee88:	f110 0308 	adds.w	r3, r0, #8
   1ee8c:	d001      	beq.n	1ee92 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1ee8e:	6880      	ldr	r0, [r0, #8]
   1ee90:	e7f2      	b.n	1ee78 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ee92:	4618      	mov	r0, r3
}
   1ee94:	4770      	bx	lr

0001ee96 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ee96:	4770      	bx	lr

0001ee98 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ee98:	4603      	mov	r3, r0
	return list->head;
   1ee9a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ee9c:	b128      	cbz	r0, 1eeaa <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ee9e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1eea0:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eea2:	4288      	cmp	r0, r1
	list->head = node;
   1eea4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1eea6:	bf08      	it	eq
   1eea8:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1eeaa:	4770      	bx	lr

0001eeac <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1eeac:	4603      	mov	r3, r0
	size_t bytes = 0;
   1eeae:	2000      	movs	r0, #0

	while (buf) {
   1eeb0:	b903      	cbnz	r3, 1eeb4 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1eeb2:	4770      	bx	lr
		bytes += buf->len;
   1eeb4:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1eeb6:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1eeb8:	4410      	add	r0, r2
		buf = buf->frags;
   1eeba:	e7f9      	b.n	1eeb0 <net_buf_frags_len+0x4>

0001eebc <att_sent>:
	if (chan->ops->sent) {
   1eebc:	684b      	ldr	r3, [r1, #4]
{
   1eebe:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1eec0:	695b      	ldr	r3, [r3, #20]
   1eec2:	b103      	cbz	r3, 1eec6 <att_sent+0xa>
		chan->ops->sent(chan);
   1eec4:	4718      	bx	r3
}
   1eec6:	4770      	bx	lr

0001eec8 <attr_read_type_cb>:
{
   1eec8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1eeca:	68d4      	ldr	r4, [r2, #12]
   1eecc:	3102      	adds	r1, #2
   1eece:	7823      	ldrb	r3, [r4, #0]
   1eed0:	b913      	cbnz	r3, 1eed8 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1eed2:	7021      	strb	r1, [r4, #0]
	return true;
   1eed4:	2001      	movs	r0, #1
   1eed6:	e006      	b.n	1eee6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1eed8:	428b      	cmp	r3, r1
   1eeda:	d0fb      	beq.n	1eed4 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1eedc:	8983      	ldrh	r3, [r0, #12]
   1eede:	3b02      	subs	r3, #2
   1eee0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1eee2:	2000      	movs	r0, #0
   1eee4:	6110      	str	r0, [r2, #16]
}
   1eee6:	bd10      	pop	{r4, pc}

0001eee8 <att_prepare_write_req>:
}
   1eee8:	2006      	movs	r0, #6
   1eeea:	4770      	bx	lr

0001eeec <att_op_get_type>:
	switch (op) {
   1eeec:	281e      	cmp	r0, #30
   1eeee:	d816      	bhi.n	1ef1e <att_op_get_type+0x32>
   1eef0:	b308      	cbz	r0, 1ef36 <att_op_get_type+0x4a>
   1eef2:	1e43      	subs	r3, r0, #1
   1eef4:	2b1d      	cmp	r3, #29
   1eef6:	d81e      	bhi.n	1ef36 <att_op_get_type+0x4a>
   1eef8:	e8df f003 	tbb	[pc, r3]
   1eefc:	23172317 	.word	0x23172317
   1ef00:	23172317 	.word	0x23172317
   1ef04:	23172317 	.word	0x23172317
   1ef08:	23172317 	.word	0x23172317
   1ef0c:	1d172317 	.word	0x1d172317
   1ef10:	2317231d 	.word	0x2317231d
   1ef14:	1d191d17 	.word	0x1d191d17
   1ef18:	0f1b      	.short	0x0f1b
   1ef1a:	2004      	movs	r0, #4
   1ef1c:	4770      	bx	lr
   1ef1e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ef22:	2b52      	cmp	r3, #82	; 0x52
   1ef24:	d107      	bne.n	1ef36 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ef26:	2000      	movs	r0, #0
}
   1ef28:	4770      	bx	lr
		return ATT_RESPONSE;
   1ef2a:	2002      	movs	r0, #2
   1ef2c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ef2e:	2003      	movs	r0, #3
   1ef30:	4770      	bx	lr
		return ATT_INDICATION;
   1ef32:	2005      	movs	r0, #5
   1ef34:	4770      	bx	lr
		return ATT_COMMAND;
   1ef36:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ef3a:	bf0c      	ite	eq
   1ef3c:	2006      	moveq	r0, #6
   1ef3e:	2000      	movne	r0, #0
   1ef40:	4770      	bx	lr
		return ATT_REQUEST;
   1ef42:	2001      	movs	r0, #1
   1ef44:	4770      	bx	lr

0001ef46 <att_notify_mult>:
{
   1ef46:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1ef48:	6803      	ldr	r3, [r0, #0]
   1ef4a:	898a      	ldrh	r2, [r1, #12]
   1ef4c:	6818      	ldr	r0, [r3, #0]
   1ef4e:	6889      	ldr	r1, [r1, #8]
   1ef50:	f7f6 f91c 	bl	1518c <bt_gatt_mult_notification>
}
   1ef54:	2000      	movs	r0, #0
   1ef56:	bd08      	pop	{r3, pc}

0001ef58 <att_notify>:
{
   1ef58:	b538      	push	{r3, r4, r5, lr}
   1ef5a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1ef5c:	f101 0008 	add.w	r0, r1, #8
   1ef60:	460c      	mov	r4, r1
   1ef62:	f001 fc09 	bl	20778 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1ef66:	682d      	ldr	r5, [r5, #0]
   1ef68:	4601      	mov	r1, r0
   1ef6a:	89a3      	ldrh	r3, [r4, #12]
   1ef6c:	6828      	ldr	r0, [r5, #0]
   1ef6e:	68a2      	ldr	r2, [r4, #8]
   1ef70:	f000 fe9a 	bl	1fca8 <bt_gatt_notification>
}
   1ef74:	2000      	movs	r0, #0
   1ef76:	bd38      	pop	{r3, r4, r5, pc}

0001ef78 <bt_gatt_foreach_attr>:
{
   1ef78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ef7a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ef7e:	2300      	movs	r3, #0
   1ef80:	461a      	mov	r2, r3
   1ef82:	9300      	str	r3, [sp, #0]
   1ef84:	f7f5 f854 	bl	14030 <bt_gatt_foreach_attr_type>
}
   1ef88:	b005      	add	sp, #20
   1ef8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ef8e <find_info_cb>:
{
   1ef8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ef90:	6893      	ldr	r3, [r2, #8]
{
   1ef92:	4605      	mov	r5, r0
   1ef94:	460e      	mov	r6, r1
   1ef96:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1ef98:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1ef9a:	b963      	cbnz	r3, 1efb6 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ef9c:	6850      	ldr	r0, [r2, #4]
   1ef9e:	2101      	movs	r1, #1
   1efa0:	3008      	adds	r0, #8
   1efa2:	f7f8 fd35 	bl	17a10 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1efa6:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1efa8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1efaa:	781b      	ldrb	r3, [r3, #0]
   1efac:	2b00      	cmp	r3, #0
   1efae:	bf0c      	ite	eq
   1efb0:	2301      	moveq	r3, #1
   1efb2:	2302      	movne	r3, #2
   1efb4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1efb6:	68a3      	ldr	r3, [r4, #8]
   1efb8:	781b      	ldrb	r3, [r3, #0]
   1efba:	2b01      	cmp	r3, #1
   1efbc:	d003      	beq.n	1efc6 <find_info_cb+0x38>
   1efbe:	2b02      	cmp	r3, #2
   1efc0:	d019      	beq.n	1eff6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1efc2:	2000      	movs	r0, #0
   1efc4:	e016      	b.n	1eff4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1efc6:	682b      	ldr	r3, [r5, #0]
   1efc8:	781b      	ldrb	r3, [r3, #0]
   1efca:	2b00      	cmp	r3, #0
   1efcc:	d1f9      	bne.n	1efc2 <find_info_cb+0x34>
   1efce:	6860      	ldr	r0, [r4, #4]
   1efd0:	2104      	movs	r1, #4
   1efd2:	3008      	adds	r0, #8
   1efd4:	f7f8 fd1c 	bl	17a10 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1efd8:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1efda:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1efdc:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1efde:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1efe0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1efe2:	6863      	ldr	r3, [r4, #4]
   1efe4:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1efe8:	899b      	ldrh	r3, [r3, #12]
   1efea:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1efec:	2804      	cmp	r0, #4
   1efee:	bf94      	ite	ls
   1eff0:	2000      	movls	r0, #0
   1eff2:	2001      	movhi	r0, #1
}
   1eff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1eff6:	682b      	ldr	r3, [r5, #0]
   1eff8:	781b      	ldrb	r3, [r3, #0]
   1effa:	2b02      	cmp	r3, #2
   1effc:	d1e1      	bne.n	1efc2 <find_info_cb+0x34>
   1effe:	6860      	ldr	r0, [r4, #4]
   1f000:	2112      	movs	r1, #18
   1f002:	3008      	adds	r0, #8
   1f004:	f7f8 fd04 	bl	17a10 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f008:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1f00a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f00c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1f00e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f012:	3101      	adds	r1, #1
   1f014:	f7ff fa34 	bl	1e480 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1f018:	6863      	ldr	r3, [r4, #4]
   1f01a:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1f01e:	899b      	ldrh	r3, [r3, #12]
   1f020:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f022:	2812      	cmp	r0, #18
   1f024:	e7e3      	b.n	1efee <find_info_cb+0x60>

0001f026 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1f026:	68d0      	ldr	r0, [r2, #12]
   1f028:	3104      	adds	r1, #4
   1f02a:	7803      	ldrb	r3, [r0, #0]
   1f02c:	b913      	cbnz	r3, 1f034 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1f02e:	7001      	strb	r1, [r0, #0]
	return true;
   1f030:	2001      	movs	r0, #1
}
   1f032:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1f034:	428b      	cmp	r3, r1
   1f036:	d0fb      	beq.n	1f030 <attr_read_group_cb+0xa>
		data->group = NULL;
   1f038:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1f03a:	6891      	ldr	r1, [r2, #8]
   1f03c:	898b      	ldrh	r3, [r1, #12]
   1f03e:	3b04      	subs	r3, #4
   1f040:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1f042:	6110      	str	r0, [r2, #16]
		return false;
   1f044:	4770      	bx	lr

0001f046 <write_cb>:
{
   1f046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f048:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f04a:	4601      	mov	r1, r0
{
   1f04c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f04e:	222a      	movs	r2, #42	; 0x2a
   1f050:	6820      	ldr	r0, [r4, #0]
   1f052:	f000 fd92 	bl	1fb7a <bt_gatt_check_perm>
   1f056:	4605      	mov	r5, r0
   1f058:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f05a:	bb00      	cbnz	r0, 1f09e <write_cb+0x58>
	if (!data->req) {
   1f05c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1f05e:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f060:	2b00      	cmp	r3, #0
   1f062:	bf14      	ite	ne
   1f064:	2300      	movne	r3, #0
   1f066:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1f068:	9301      	str	r3, [sp, #4]
   1f06a:	8a63      	ldrh	r3, [r4, #18]
   1f06c:	68b7      	ldr	r7, [r6, #8]
   1f06e:	9300      	str	r3, [sp, #0]
   1f070:	68e2      	ldr	r2, [r4, #12]
   1f072:	8a23      	ldrh	r3, [r4, #16]
   1f074:	6820      	ldr	r0, [r4, #0]
   1f076:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f078:	1e03      	subs	r3, r0, #0
   1f07a:	db05      	blt.n	1f088 <write_cb+0x42>
   1f07c:	8a22      	ldrh	r2, [r4, #16]
   1f07e:	4293      	cmp	r3, r2
   1f080:	d10b      	bne.n	1f09a <write_cb+0x54>
	data->err = 0U;
   1f082:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f084:	2501      	movs	r5, #1
   1f086:	e005      	b.n	1f094 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1f088:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1f08c:	d305      	bcc.n	1f09a <write_cb+0x54>
		return -err;
   1f08e:	425b      	negs	r3, r3
   1f090:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1f092:	7523      	strb	r3, [r4, #20]
}
   1f094:	4628      	mov	r0, r5
   1f096:	b003      	add	sp, #12
   1f098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f09a:	230e      	movs	r3, #14
   1f09c:	e7f9      	b.n	1f092 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1f09e:	2500      	movs	r5, #0
   1f0a0:	e7f8      	b.n	1f094 <write_cb+0x4e>

0001f0a2 <att_chan_read>:
{
   1f0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0a6:	4680      	mov	r8, r0
   1f0a8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f0aa:	4610      	mov	r0, r2
{
   1f0ac:	4699      	mov	r9, r3
   1f0ae:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f0b0:	f7ff fefc 	bl	1eeac <net_buf_frags_len>
   1f0b4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1f0b8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f0ba:	4283      	cmp	r3, r0
   1f0bc:	d97a      	bls.n	1f1b4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1f0be:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1f0c2:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1f0c4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1f0c6:	f7f8 fbe9 	bl	1789c <net_buf_frag_last>
	size_t len, total = 0;
   1f0ca:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1f0ce:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f0d0:	4630      	mov	r0, r6
   1f0d2:	f7ff feeb 	bl	1eeac <net_buf_frags_len>
   1f0d6:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1f0da:	f105 0708 	add.w	r7, r5, #8
   1f0de:	1a24      	subs	r4, r4, r0
   1f0e0:	4638      	mov	r0, r7
   1f0e2:	f001 fb55 	bl	20790 <net_buf_simple_tailroom>
   1f0e6:	4284      	cmp	r4, r0
   1f0e8:	d211      	bcs.n	1f10e <att_chan_read+0x6c>
   1f0ea:	4630      	mov	r0, r6
   1f0ec:	f7ff fede 	bl	1eeac <net_buf_frags_len>
   1f0f0:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f0f4:	1a24      	subs	r4, r4, r0
		if (!len) {
   1f0f6:	bb34      	cbnz	r4, 1f146 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1f0f8:	79b0      	ldrb	r0, [r6, #6]
   1f0fa:	f7f8 f9f3 	bl	174e4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1f0fe:	2200      	movs	r2, #0
   1f100:	2300      	movs	r3, #0
   1f102:	f001 fb1f 	bl	20744 <net_buf_alloc_fixed>
			if (!frag) {
   1f106:	4605      	mov	r5, r0
   1f108:	b930      	cbnz	r0, 1f118 <att_chan_read+0x76>
	return total;
   1f10a:	4657      	mov	r7, sl
   1f10c:	e02c      	b.n	1f168 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1f10e:	4638      	mov	r0, r7
   1f110:	f001 fb3e 	bl	20790 <net_buf_simple_tailroom>
   1f114:	4604      	mov	r4, r0
   1f116:	e7ee      	b.n	1f0f6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1f118:	4601      	mov	r1, r0
   1f11a:	4630      	mov	r0, r6
   1f11c:	f7f8 fbfe 	bl	1791c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f120:	4630      	mov	r0, r6
   1f122:	f7ff fec3 	bl	1eeac <net_buf_frags_len>
   1f126:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f12a:	f105 0708 	add.w	r7, r5, #8
   1f12e:	1a24      	subs	r4, r4, r0
   1f130:	4638      	mov	r0, r7
   1f132:	f001 fb2d 	bl	20790 <net_buf_simple_tailroom>
   1f136:	4284      	cmp	r4, r0
   1f138:	d21a      	bcs.n	1f170 <att_chan_read+0xce>
   1f13a:	4630      	mov	r0, r6
   1f13c:	f7ff feb6 	bl	1eeac <net_buf_frags_len>
   1f140:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f144:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1f146:	68a9      	ldr	r1, [r5, #8]
   1f148:	89aa      	ldrh	r2, [r5, #12]
   1f14a:	f8db 7004 	ldr.w	r7, [fp, #4]
   1f14e:	440a      	add	r2, r1
   1f150:	9803      	ldr	r0, [sp, #12]
   1f152:	4659      	mov	r1, fp
   1f154:	f8cd 9000 	str.w	r9, [sp]
   1f158:	b2a3      	uxth	r3, r4
   1f15a:	47b8      	blx	r7
		if (read < 0) {
   1f15c:	1e07      	subs	r7, r0, #0
   1f15e:	da0c      	bge.n	1f17a <att_chan_read+0xd8>
				return total;
   1f160:	f1ba 0f00 	cmp.w	sl, #0
   1f164:	bf18      	it	ne
   1f166:	4657      	movne	r7, sl
}
   1f168:	4638      	mov	r0, r7
   1f16a:	b005      	add	sp, #20
   1f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f170:	4638      	mov	r0, r7
   1f172:	f001 fb0d 	bl	20790 <net_buf_simple_tailroom>
   1f176:	4604      	mov	r4, r0
   1f178:	e7e5      	b.n	1f146 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1f17a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f17c:	b993      	cbnz	r3, 1f1a4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1f17e:	4639      	mov	r1, r7
   1f180:	f105 0008 	add.w	r0, r5, #8
   1f184:	f7f8 fc44 	bl	17a10 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f188:	4630      	mov	r0, r6
   1f18a:	f7ff fe8f 	bl	1eeac <net_buf_frags_len>
   1f18e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1f192:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f194:	4283      	cmp	r3, r0
		total += read;
   1f196:	44ba      	add	sl, r7
		offset += read;
   1f198:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f19c:	d9b5      	bls.n	1f10a <att_chan_read+0x68>
   1f19e:	42a7      	cmp	r7, r4
   1f1a0:	d096      	beq.n	1f0d0 <att_chan_read+0x2e>
   1f1a2:	e7b2      	b.n	1f10a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1f1a4:	4639      	mov	r1, r7
   1f1a6:	4628      	mov	r0, r5
   1f1a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f1aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f1ac:	4798      	blx	r3
   1f1ae:	2800      	cmp	r0, #0
   1f1b0:	d1e5      	bne.n	1f17e <att_chan_read+0xdc>
   1f1b2:	e7aa      	b.n	1f10a <att_chan_read+0x68>
		return 0;
   1f1b4:	2700      	movs	r7, #0
   1f1b6:	e7d7      	b.n	1f168 <att_chan_read+0xc6>

0001f1b8 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f1b8:	2200      	movs	r2, #0
   1f1ba:	b510      	push	{r4, lr}
	return list->head;
   1f1bc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f1be:	b153      	cbz	r3, 1f1d6 <sys_slist_find_and_remove.isra.0+0x1e>
   1f1c0:	428b      	cmp	r3, r1
   1f1c2:	d10e      	bne.n	1f1e2 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1f1c4:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1f1c6:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f1c8:	b932      	cbnz	r2, 1f1d8 <sys_slist_find_and_remove.isra.0+0x20>
   1f1ca:	42a1      	cmp	r1, r4
	list->head = node;
   1f1cc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f1ce:	d100      	bne.n	1f1d2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1f1d0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1f1d2:	2300      	movs	r3, #0
   1f1d4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f1d6:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f1d8:	42a1      	cmp	r1, r4
	parent->next = child;
   1f1da:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f1dc:	bf08      	it	eq
   1f1de:	6042      	streq	r2, [r0, #4]
}
   1f1e0:	e7f7      	b.n	1f1d2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1f1e2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f1e4:	681b      	ldr	r3, [r3, #0]
   1f1e6:	e7ea      	b.n	1f1be <sys_slist_find_and_remove.isra.0+0x6>

0001f1e8 <att_exec_write_req>:
   1f1e8:	2006      	movs	r0, #6
   1f1ea:	4770      	bx	lr

0001f1ec <chan_req_send>:
{
   1f1ec:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f1ee:	690e      	ldr	r6, [r1, #16]
{
   1f1f0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f1f2:	4630      	mov	r0, r6
   1f1f4:	f7ff fe5a 	bl	1eeac <net_buf_frags_len>
   1f1f8:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1f1fc:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1f1fe:	4283      	cmp	r3, r0
   1f200:	d317      	bcc.n	1f232 <chan_req_send+0x46>
	chan->req = req;
   1f202:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1f206:	f106 0008 	add.w	r0, r6, #8
   1f20a:	f001 fabd 	bl	20788 <net_buf_simple_headroom>
	state->len = buf->len;
   1f20e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1f210:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1f212:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1f214:	6920      	ldr	r0, [r4, #16]
   1f216:	f7f8 fb29 	bl	1786c <net_buf_ref>
   1f21a:	2200      	movs	r2, #0
   1f21c:	4601      	mov	r1, r0
   1f21e:	4628      	mov	r0, r5
   1f220:	f7f3 fa62 	bl	126e8 <chan_send>
	if (err) {
   1f224:	4605      	mov	r5, r0
   1f226:	b110      	cbz	r0, 1f22e <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1f228:	6920      	ldr	r0, [r4, #16]
   1f22a:	f7f8 fadb 	bl	177e4 <net_buf_unref>
}
   1f22e:	4628      	mov	r0, r5
   1f230:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1f232:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1f236:	e7fa      	b.n	1f22e <chan_req_send+0x42>

0001f238 <bt_att_chan_send>:
{
   1f238:	b570      	push	{r4, r5, r6, lr}
   1f23a:	4604      	mov	r4, r0
   1f23c:	460e      	mov	r6, r1
	if (!cb) {
   1f23e:	4615      	mov	r5, r2
   1f240:	b132      	cbz	r2, 1f250 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1f242:	462a      	mov	r2, r5
   1f244:	4631      	mov	r1, r6
   1f246:	4620      	mov	r0, r4
}
   1f248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1f24c:	f7f3 ba4c 	b.w	126e8 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1f250:	2200      	movs	r2, #0
   1f252:	2300      	movs	r3, #0
   1f254:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1f258:	f7fc fad6 	bl	1b808 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1f25c:	2800      	cmp	r0, #0
   1f25e:	daf0      	bge.n	1f242 <bt_att_chan_send+0xa>
}
   1f260:	f06f 000a 	mvn.w	r0, #10
   1f264:	bd70      	pop	{r4, r5, r6, pc}

0001f266 <bt_att_chan_send_rsp>:
{
   1f266:	b538      	push	{r3, r4, r5, lr}
   1f268:	4604      	mov	r4, r0
   1f26a:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1f26c:	f7ff ffe4 	bl	1f238 <bt_att_chan_send>
	if (err) {
   1f270:	b130      	cbz	r0, 1f280 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1f272:	4629      	mov	r1, r5
   1f274:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1f278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1f27c:	f7f8 ba84 	b.w	17788 <net_buf_put>
}
   1f280:	bd38      	pop	{r3, r4, r5, pc}

0001f282 <process_queue>:
{
   1f282:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1f284:	2200      	movs	r2, #0
{
   1f286:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1f288:	2300      	movs	r3, #0
   1f28a:	4608      	mov	r0, r1
{
   1f28c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1f28e:	f7f8 fa27 	bl	176e0 <net_buf_get>
	if (buf) {
   1f292:	4605      	mov	r5, r0
   1f294:	b160      	cbz	r0, 1f2b0 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1f296:	4601      	mov	r1, r0
   1f298:	2200      	movs	r2, #0
   1f29a:	4620      	mov	r0, r4
   1f29c:	f7f3 fa24 	bl	126e8 <chan_send>
		if (err) {
   1f2a0:	4604      	mov	r4, r0
   1f2a2:	b118      	cbz	r0, 1f2ac <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1f2a4:	4629      	mov	r1, r5
   1f2a6:	4630      	mov	r0, r6
   1f2a8:	f002 f94d 	bl	21546 <k_queue_prepend>
}
   1f2ac:	4620      	mov	r0, r4
   1f2ae:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1f2b0:	f06f 0401 	mvn.w	r4, #1
   1f2b4:	e7fa      	b.n	1f2ac <process_queue+0x2a>

0001f2b6 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f2b6:	30c8      	adds	r0, #200	; 0xc8
   1f2b8:	e8d0 3fef 	ldaex	r3, [r0]
   1f2bc:	f023 0301 	bic.w	r3, r3, #1
   1f2c0:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1f2c4:	2a00      	cmp	r2, #0
   1f2c6:	d1f7      	bne.n	1f2b8 <chan_rsp_sent+0x2>
}
   1f2c8:	4770      	bx	lr

0001f2ca <chan_cfm_sent>:
   1f2ca:	30c8      	adds	r0, #200	; 0xc8
   1f2cc:	e8d0 3fef 	ldaex	r3, [r0]
   1f2d0:	f023 0302 	bic.w	r3, r3, #2
   1f2d4:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1f2d8:	2a00      	cmp	r2, #0
   1f2da:	d1f7      	bne.n	1f2cc <chan_cfm_sent+0x2>
}
   1f2dc:	4770      	bx	lr

0001f2de <read_cb>:
{
   1f2de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f2e2:	4606      	mov	r6, r0
	data->err = 0x00;
   1f2e4:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1f2e6:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f2ea:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1f2ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f2f0:	4631      	mov	r1, r6
	data->err = 0x00;
   1f2f2:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f2f4:	2215      	movs	r2, #21
   1f2f6:	f000 fc40 	bl	1fb7a <bt_gatt_check_perm>
   1f2fa:	4604      	mov	r4, r0
   1f2fc:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f2fe:	b9a0      	cbnz	r0, 1f32a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f300:	e9cd 0000 	strd	r0, r0, [sp]
   1f304:	88ab      	ldrh	r3, [r5, #4]
   1f306:	4631      	mov	r1, r6
   1f308:	4640      	mov	r0, r8
   1f30a:	68aa      	ldr	r2, [r5, #8]
   1f30c:	f7ff fec9 	bl	1f0a2 <att_chan_read>
	if (ret < 0) {
   1f310:	1e03      	subs	r3, r0, #0
   1f312:	da0c      	bge.n	1f32e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f314:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1f318:	bf32      	itee	cc
   1f31a:	230e      	movcc	r3, #14
		return -err;
   1f31c:	425b      	negcs	r3, r3
   1f31e:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1f320:	732b      	strb	r3, [r5, #12]
}
   1f322:	4620      	mov	r0, r4
   1f324:	b002      	add	sp, #8
   1f326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f32a:	463c      	mov	r4, r7
   1f32c:	e7f9      	b.n	1f322 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f32e:	2401      	movs	r4, #1
   1f330:	e7f7      	b.n	1f322 <read_cb+0x44>

0001f332 <bt_att_sent>:
{
   1f332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f334:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1f338:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1f33a:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f33e:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f342:	b10b      	cbz	r3, 1f348 <bt_att_sent+0x16>
		chan->sent(chan);
   1f344:	4638      	mov	r0, r7
   1f346:	4798      	blx	r3
   1f348:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1f34c:	e8d3 2fef 	ldaex	r2, [r3]
   1f350:	f022 0210 	bic.w	r2, r2, #16
   1f354:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f358:	2900      	cmp	r1, #0
   1f35a:	d1f7      	bne.n	1f34c <bt_att_sent+0x1a>
	if (!att) {
   1f35c:	b335      	cbz	r5, 1f3ac <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f35e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f362:	b98b      	cbnz	r3, 1f388 <bt_att_sent+0x56>
   1f364:	686b      	ldr	r3, [r5, #4]
   1f366:	b17b      	cbz	r3, 1f388 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f368:	1d28      	adds	r0, r5, #4
   1f36a:	f7ff fd95 	bl	1ee98 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f36e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f370:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f372:	4638      	mov	r0, r7
   1f374:	f7ff ff3a 	bl	1f1ec <chan_req_send>
   1f378:	2800      	cmp	r0, #0
   1f37a:	da17      	bge.n	1f3ac <bt_att_sent+0x7a>
	parent->next = child;
   1f37c:	686b      	ldr	r3, [r5, #4]
   1f37e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f380:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f382:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f384:	b903      	cbnz	r3, 1f388 <bt_att_sent+0x56>
	list->tail = node;
   1f386:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f388:	4638      	mov	r0, r7
   1f38a:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1f38e:	f7ff ff78 	bl	1f282 <process_queue>
	if (!err) {
   1f392:	b158      	cbz	r0, 1f3ac <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1f394:	4638      	mov	r0, r7
   1f396:	f105 010c 	add.w	r1, r5, #12
   1f39a:	f7ff ff72 	bl	1f282 <process_queue>
	if (!err) {
   1f39e:	b128      	cbz	r0, 1f3ac <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1f3a0:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1f3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f3a8:	f7fc b9f2 	b.w	1b790 <z_impl_k_sem_give>
   1f3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f3ae <att_req_send_process>:
{
   1f3ae:	b570      	push	{r4, r5, r6, lr}
   1f3b0:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1f3b2:	3004      	adds	r0, #4
   1f3b4:	f7ff fd70 	bl	1ee98 <sys_slist_get>
	if (!node) {
   1f3b8:	4606      	mov	r6, r0
   1f3ba:	b1c0      	cbz	r0, 1f3ee <att_req_send_process+0x40>
	return list->head;
   1f3bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f3be:	b153      	cbz	r3, 1f3d6 <att_req_send_process+0x28>
   1f3c0:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1f3c4:	d007      	beq.n	1f3d6 <att_req_send_process+0x28>
	return node->next;
   1f3c6:	681c      	ldr	r4, [r3, #0]
   1f3c8:	b10c      	cbz	r4, 1f3ce <att_req_send_process+0x20>
   1f3ca:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1f3ce:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1f3d2:	b13b      	cbz	r3, 1f3e4 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f3d4:	b964      	cbnz	r4, 1f3f0 <att_req_send_process+0x42>
	parent->next = child;
   1f3d6:	686b      	ldr	r3, [r5, #4]
   1f3d8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f3da:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f3dc:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f3de:	b933      	cbnz	r3, 1f3ee <att_req_send_process+0x40>
	list->tail = node;
   1f3e0:	60ae      	str	r6, [r5, #8]
}
   1f3e2:	e004      	b.n	1f3ee <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f3e4:	4631      	mov	r1, r6
   1f3e6:	f7f3 f9df 	bl	127a8 <bt_att_chan_req_send>
   1f3ea:	2800      	cmp	r0, #0
   1f3ec:	dbf2      	blt.n	1f3d4 <att_req_send_process+0x26>
}
   1f3ee:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f3f0:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1f3f4:	d004      	beq.n	1f400 <att_req_send_process+0x52>
	return node->next;
   1f3f6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f3fa:	b10b      	cbz	r3, 1f400 <att_req_send_process+0x52>
   1f3fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1f400:	4620      	mov	r0, r4
   1f402:	461c      	mov	r4, r3
   1f404:	e7e3      	b.n	1f3ce <att_req_send_process+0x20>

0001f406 <bt_att_status>:
{
   1f406:	b538      	push	{r3, r4, r5, lr}
   1f408:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f40a:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f40e:	07db      	lsls	r3, r3, #31
   1f410:	d519      	bpl.n	1f446 <bt_att_status+0x40>
	if (!chan->att) {
   1f412:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f416:	b1b0      	cbz	r0, 1f446 <bt_att_status+0x40>
	if (chan->req) {
   1f418:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1f41c:	b99b      	cbnz	r3, 1f446 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1f41e:	3004      	adds	r0, #4
   1f420:	f7ff fd3a 	bl	1ee98 <sys_slist_get>
	if (!node) {
   1f424:	4604      	mov	r4, r0
   1f426:	b170      	cbz	r0, 1f446 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f428:	4601      	mov	r1, r0
   1f42a:	f1a5 0008 	sub.w	r0, r5, #8
   1f42e:	f7f3 f9bb 	bl	127a8 <bt_att_chan_req_send>
   1f432:	2800      	cmp	r0, #0
   1f434:	da07      	bge.n	1f446 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1f436:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1f43a:	685a      	ldr	r2, [r3, #4]
   1f43c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f43e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f440:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f442:	b902      	cbnz	r2, 1f446 <bt_att_status+0x40>
	list->tail = node;
   1f444:	609c      	str	r4, [r3, #8]
}
   1f446:	bd38      	pop	{r3, r4, r5, pc}

0001f448 <att_write_req>:
{
   1f448:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f44a:	460c      	mov	r4, r1
   1f44c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1f44e:	f101 0008 	add.w	r0, r1, #8
   1f452:	f001 f991 	bl	20778 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f456:	89a2      	ldrh	r2, [r4, #12]
   1f458:	4603      	mov	r3, r0
   1f45a:	9201      	str	r2, [sp, #4]
   1f45c:	68a2      	ldr	r2, [r4, #8]
   1f45e:	2112      	movs	r1, #18
   1f460:	9200      	str	r2, [sp, #0]
   1f462:	4628      	mov	r0, r5
   1f464:	2213      	movs	r2, #19
   1f466:	f7f3 fb7d 	bl	12b64 <att_write_rsp.constprop.0>
}
   1f46a:	b003      	add	sp, #12
   1f46c:	bd30      	pop	{r4, r5, pc}

0001f46e <att_write_cmd>:
{
   1f46e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f470:	460c      	mov	r4, r1
   1f472:	4605      	mov	r5, r0
   1f474:	f101 0008 	add.w	r0, r1, #8
   1f478:	f001 f97e 	bl	20778 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1f47c:	89a2      	ldrh	r2, [r4, #12]
   1f47e:	4603      	mov	r3, r0
   1f480:	9201      	str	r2, [sp, #4]
   1f482:	68a2      	ldr	r2, [r4, #8]
   1f484:	4628      	mov	r0, r5
   1f486:	9200      	str	r2, [sp, #0]
   1f488:	2200      	movs	r2, #0
   1f48a:	4611      	mov	r1, r2
   1f48c:	f7f3 fb6a 	bl	12b64 <att_write_rsp.constprop.0>
}
   1f490:	b003      	add	sp, #12
   1f492:	bd30      	pop	{r4, r5, pc}

0001f494 <att_read_blob_req>:
{
   1f494:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f496:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f498:	210c      	movs	r1, #12
   1f49a:	8813      	ldrh	r3, [r2, #0]
   1f49c:	8852      	ldrh	r2, [r2, #2]
   1f49e:	9200      	str	r2, [sp, #0]
   1f4a0:	220d      	movs	r2, #13
   1f4a2:	f7f3 fcbb 	bl	12e1c <att_read_rsp>
}
   1f4a6:	b003      	add	sp, #12
   1f4a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f4ac <att_read_req>:
{
   1f4ac:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f4ae:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1f4b0:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f4b2:	210a      	movs	r1, #10
   1f4b4:	881b      	ldrh	r3, [r3, #0]
   1f4b6:	9200      	str	r2, [sp, #0]
   1f4b8:	220b      	movs	r2, #11
   1f4ba:	f7f3 fcaf 	bl	12e1c <att_read_rsp>
}
   1f4be:	b003      	add	sp, #12
   1f4c0:	f85d fb04 	ldr.w	pc, [sp], #4

0001f4c4 <bt_att_init>:
	bt_gatt_init();
   1f4c4:	f7f4 bd08 	b.w	13ed8 <bt_gatt_init>

0001f4c8 <att_req_destroy>:
{
   1f4c8:	b510      	push	{r4, lr}
   1f4ca:	4604      	mov	r4, r0
	if (req->buf) {
   1f4cc:	6900      	ldr	r0, [r0, #16]
   1f4ce:	b108      	cbz	r0, 1f4d4 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1f4d0:	f7f8 f988 	bl	177e4 <net_buf_unref>
	if (req->destroy) {
   1f4d4:	68a3      	ldr	r3, [r4, #8]
   1f4d6:	b10b      	cbz	r3, 1f4dc <att_req_destroy+0x14>
		req->destroy(req);
   1f4d8:	4620      	mov	r0, r4
   1f4da:	4798      	blx	r3
	bt_att_req_free(req);
   1f4dc:	4620      	mov	r0, r4
}
   1f4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1f4e2:	f7f3 be3d 	b.w	13160 <bt_att_req_free>

0001f4e6 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f4e6:	898a      	ldrh	r2, [r1, #12]
   1f4e8:	2300      	movs	r3, #0
   1f4ea:	6889      	ldr	r1, [r1, #8]
   1f4ec:	f7f3 be44 	b.w	13178 <att_handle_rsp>

0001f4f0 <att_handle_find_type_rsp>:
   1f4f0:	f7ff bff9 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f4f4 <att_handle_read_type_rsp>:
   1f4f4:	f7ff bff7 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f4f8 <att_handle_read_rsp>:
   1f4f8:	f7ff bff5 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f4fc <att_handle_read_blob_rsp>:
   1f4fc:	f7ff bff3 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f500 <att_handle_read_mult_rsp>:
   1f500:	f7ff bff1 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f504 <att_handle_read_group_rsp>:
   1f504:	f7ff bfef 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f508 <att_handle_write_rsp>:
   1f508:	f7ff bfed 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f50c <att_handle_prepare_write_rsp>:
   1f50c:	f7ff bfeb 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f510 <att_handle_exec_write_rsp>:
   1f510:	f7ff bfe9 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f514 <att_confirm>:
   1f514:	f7ff bfe7 	b.w	1f4e6 <att_handle_find_info_rsp>

0001f518 <att_mtu_rsp>:
{
   1f518:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1f51a:	6889      	ldr	r1, [r1, #8]
{
   1f51c:	b410      	push	{r4}
	mtu = sys_le16_to_cpu(rsp->mtu);
   1f51e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1f520:	2b16      	cmp	r3, #22
   1f522:	d805      	bhi.n	1f530 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1f524:	2200      	movs	r2, #0
   1f526:	2304      	movs	r3, #4
   1f528:	4611      	mov	r1, r2
}
   1f52a:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f52c:	f7f3 be24 	b.w	13178 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f530:	2b41      	cmp	r3, #65	; 0x41
   1f532:	bf28      	it	cs
   1f534:	2341      	movcs	r3, #65	; 0x41
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f536:	8992      	ldrh	r2, [r2, #12]
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f538:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f53c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f540:	2300      	movs	r3, #0
   1f542:	e7f2      	b.n	1f52a <att_mtu_rsp+0x12>

0001f544 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1f544:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f54c:	4604      	mov	r4, r0
   1f54e:	460d      	mov	r5, r1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1f550:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1f554:	b323      	cbz	r3, 1f5a0 <bt_att_encrypt_change+0x5c>
	if (hci_status) {
   1f556:	b161      	cbz	r1, 1f572 <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   1f558:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1f55c:	b303      	cbz	r3, 1f5a0 <bt_att_encrypt_change+0x5c>
   1f55e:	7d1b      	ldrb	r3, [r3, #20]
   1f560:	b1f3      	cbz	r3, 1f5a0 <bt_att_encrypt_change+0x5c>
			att_handle_rsp(att_chan, NULL, 0,
   1f562:	2200      	movs	r2, #0
   1f564:	4630      	mov	r0, r6
}
   1f566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   1f56a:	2305      	movs	r3, #5
   1f56c:	4611      	mov	r1, r2
   1f56e:	f7f3 be03 	b.w	13178 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1f572:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1f574:	4638      	mov	r0, r7
   1f576:	f7f5 feb5 	bl	152e4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1f57a:	7a7b      	ldrb	r3, [r7, #9]
   1f57c:	2b01      	cmp	r3, #1
   1f57e:	d00f      	beq.n	1f5a0 <bt_att_encrypt_change+0x5c>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1f580:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f584:	b163      	cbz	r3, 1f5a0 <bt_att_encrypt_change+0x5c>
   1f586:	7d1a      	ldrb	r2, [r3, #20]
   1f588:	b152      	cbz	r2, 1f5a0 <bt_att_encrypt_change+0x5c>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   1f58a:	6919      	ldr	r1, [r3, #16]
   1f58c:	6888      	ldr	r0, [r1, #8]
   1f58e:	f7f3 f845 	bl	1261c <chan_cb.isra.0>
   1f592:	4602      	mov	r2, r0
   1f594:	4630      	mov	r0, r6
   1f596:	f7ff fe66 	bl	1f266 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   1f59a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f59e:	611d      	str	r5, [r3, #16]
}
   1f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f5a4 <att_chan_detach>:
{
   1f5a4:	b538      	push	{r3, r4, r5, lr}
   1f5a6:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1f5a8:	6800      	ldr	r0, [r0, #0]
   1f5aa:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1f5ae:	3028      	adds	r0, #40	; 0x28
   1f5b0:	f7ff fe02 	bl	1f1b8 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1f5b4:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1f5b8:	4628      	mov	r0, r5
   1f5ba:	f7fc f8e9 	bl	1b790 <z_impl_k_sem_give>
   1f5be:	4628      	mov	r0, r5
   1f5c0:	f7fc f8e6 	bl	1b790 <z_impl_k_sem_give>
   1f5c4:	4628      	mov	r0, r5
   1f5c6:	f7fc f8e3 	bl	1b790 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1f5ca:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1f5ce:	2200      	movs	r2, #0
   1f5d0:	2300      	movs	r3, #0
   1f5d2:	4628      	mov	r0, r5
   1f5d4:	f7f8 f884 	bl	176e0 <net_buf_get>
   1f5d8:	4602      	mov	r2, r0
   1f5da:	b950      	cbnz	r0, 1f5f2 <att_chan_detach+0x4e>
	if (chan->req) {
   1f5dc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1f5e0:	b123      	cbz	r3, 1f5ec <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f5e2:	4601      	mov	r1, r0
   1f5e4:	230e      	movs	r3, #14
   1f5e6:	4620      	mov	r0, r4
   1f5e8:	f7f3 fdc6 	bl	13178 <att_handle_rsp>
	chan->att = NULL;
   1f5ec:	2300      	movs	r3, #0
   1f5ee:	6023      	str	r3, [r4, #0]
}
   1f5f0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1f5f2:	f7f8 f8f7 	bl	177e4 <net_buf_unref>
   1f5f6:	e7ea      	b.n	1f5ce <att_chan_detach+0x2a>

0001f5f8 <bt_att_disconnected>:
{
   1f5f8:	b538      	push	{r3, r4, r5, lr}
   1f5fa:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1f5fc:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1f600:	f7ff ffd0 	bl	1f5a4 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1f604:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f606:	b93b      	cbnz	r3, 1f618 <bt_att_disconnected+0x20>
	att_reset(att);
   1f608:	4628      	mov	r0, r5
   1f60a:	f7f3 fe35 	bl	13278 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f60e:	6820      	ldr	r0, [r4, #0]
}
   1f610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1f614:	f7f5 bed8 	b.w	153c8 <bt_gatt_disconnected>
}
   1f618:	bd38      	pop	{r3, r4, r5, pc}

0001f61a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1f61a:	6010      	str	r0, [r2, #0]
}
   1f61c:	2000      	movs	r0, #0
   1f61e:	4770      	bx	lr

0001f620 <gatt_ccc_changed>:
{
   1f620:	460b      	mov	r3, r1
   1f622:	8909      	ldrh	r1, [r1, #8]
   1f624:	8a5a      	ldrh	r2, [r3, #18]
   1f626:	428a      	cmp	r2, r1
   1f628:	bf38      	it	cc
   1f62a:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   1f62c:	8b99      	ldrh	r1, [r3, #28]
   1f62e:	4291      	cmp	r1, r2
   1f630:	bf38      	it	cc
   1f632:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1f634:	8bda      	ldrh	r2, [r3, #30]
   1f636:	428a      	cmp	r2, r1
   1f638:	d003      	beq.n	1f642 <gatt_ccc_changed+0x22>
		ccc->value = value;
   1f63a:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   1f63c:	6a1b      	ldr	r3, [r3, #32]
   1f63e:	b103      	cbz	r3, 1f642 <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   1f640:	4718      	bx	r3
}
   1f642:	4770      	bx	lr

0001f644 <gatt_indicate_rsp>:
{
   1f644:	b510      	push	{r4, lr}
   1f646:	9c02      	ldr	r4, [sp, #8]
   1f648:	460a      	mov	r2, r1
	params->_ref--;
   1f64a:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1f64c:	4621      	mov	r1, r4
	params->_ref--;
   1f64e:	3b01      	subs	r3, #1
   1f650:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1f652:	68a3      	ldr	r3, [r4, #8]
   1f654:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1f656:	68e3      	ldr	r3, [r4, #12]
   1f658:	b12b      	cbz	r3, 1f666 <gatt_indicate_rsp+0x22>
   1f65a:	7da2      	ldrb	r2, [r4, #22]
   1f65c:	b91a      	cbnz	r2, 1f666 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1f65e:	4620      	mov	r0, r4
}
   1f660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f664:	4718      	bx	r3
}
   1f666:	bd10      	pop	{r4, pc}

0001f668 <match_uuid>:
	data->attr = attr;
   1f668:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f66a:	8091      	strh	r1, [r2, #4]
}
   1f66c:	2000      	movs	r0, #0
   1f66e:	4770      	bx	lr

0001f670 <ccc_set_cb>:
}
   1f670:	2000      	movs	r0, #0
   1f672:	4770      	bx	lr

0001f674 <gen_hash_m>:
{
   1f674:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f676:	6807      	ldr	r7, [r0, #0]
{
   1f678:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f67a:	783d      	ldrb	r5, [r7, #0]
{
   1f67c:	4614      	mov	r4, r2
   1f67e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f680:	b10d      	cbz	r5, 1f686 <gen_hash_m+0x12>
	switch (u16->val) {
   1f682:	2501      	movs	r5, #1
   1f684:	e014      	b.n	1f6b0 <gen_hash_m+0x3c>
   1f686:	887b      	ldrh	r3, [r7, #2]
   1f688:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f68c:	d004      	beq.n	1f698 <gen_hash_m+0x24>
   1f68e:	d812      	bhi.n	1f6b6 <gen_hash_m+0x42>
   1f690:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f694:	2b03      	cmp	r3, #3
   1f696:	d8f4      	bhi.n	1f682 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f698:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f69c:	2202      	movs	r2, #2
   1f69e:	4620      	mov	r0, r4
   1f6a0:	f10d 010e 	add.w	r1, sp, #14
   1f6a4:	f7fe fb20 	bl	1dce8 <tc_cmac_update>
   1f6a8:	b9e0      	cbnz	r0, 1f6e4 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f6aa:	f06f 0315 	mvn.w	r3, #21
   1f6ae:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f6b0:	4628      	mov	r0, r5
   1f6b2:	b009      	add	sp, #36	; 0x24
   1f6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f6b6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f6ba:	33ff      	adds	r3, #255	; 0xff
   1f6bc:	b29b      	uxth	r3, r3
   1f6be:	2b04      	cmp	r3, #4
   1f6c0:	d8df      	bhi.n	1f682 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f6c2:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f6c6:	2202      	movs	r2, #2
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	f10d 010e 	add.w	r1, sp, #14
   1f6ce:	f7fe fb0b 	bl	1dce8 <tc_cmac_update>
   1f6d2:	2800      	cmp	r0, #0
   1f6d4:	d0e9      	beq.n	1f6aa <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f6d6:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f6d8:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1f6da:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f6de:	f10d 010e 	add.w	r1, sp, #14
   1f6e2:	e017      	b.n	1f714 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f6e4:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f6e6:	2202      	movs	r2, #2
   1f6e8:	4620      	mov	r0, r4
   1f6ea:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1f6ee:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f6f2:	f7fe faf9 	bl	1dce8 <tc_cmac_update>
   1f6f6:	2800      	cmp	r0, #0
   1f6f8:	d0d7      	beq.n	1f6aa <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f6fa:	2000      	movs	r0, #0
   1f6fc:	2310      	movs	r3, #16
   1f6fe:	4631      	mov	r1, r6
   1f700:	eb0d 0203 	add.w	r2, sp, r3
   1f704:	6877      	ldr	r7, [r6, #4]
   1f706:	9000      	str	r0, [sp, #0]
   1f708:	47b8      	blx	r7
		if (len < 0) {
   1f70a:	1e02      	subs	r2, r0, #0
   1f70c:	da01      	bge.n	1f712 <gen_hash_m+0x9e>
			state->err = len;
   1f70e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f710:	e7ce      	b.n	1f6b0 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f712:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f714:	4620      	mov	r0, r4
   1f716:	f7fe fae7 	bl	1dce8 <tc_cmac_update>
   1f71a:	2800      	cmp	r0, #0
   1f71c:	d1b1      	bne.n	1f682 <gen_hash_m+0xe>
   1f71e:	e7c4      	b.n	1f6aa <gen_hash_m+0x36>

0001f720 <bt_addr_le_cmp>:
   1f720:	2207      	movs	r2, #7
   1f722:	f7fe be9c 	b.w	1e45e <memcmp>

0001f726 <find_ccc_cfg>:
{
   1f726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f728:	4606      	mov	r6, r0
   1f72a:	1c4c      	adds	r4, r1, #1
   1f72c:	f101 051f 	add.w	r5, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f730:	1e67      	subs	r7, r4, #1
		if (conn) {
   1f732:	b14e      	cbz	r6, 1f748 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f734:	4622      	mov	r2, r4
   1f736:	4630      	mov	r0, r6
   1f738:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1f73c:	f7ff fa6d 	bl	1ec1a <bt_conn_is_peer_addr_le>
   1f740:	b158      	cbz	r0, 1f75a <find_ccc_cfg+0x34>
}
   1f742:	4638      	mov	r0, r7
   1f744:	b003      	add	sp, #12
   1f746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f748:	4669      	mov	r1, sp
   1f74a:	4620      	mov	r0, r4
   1f74c:	9600      	str	r6, [sp, #0]
   1f74e:	f8cd 6003 	str.w	r6, [sp, #3]
   1f752:	f7ff ffe5 	bl	1f720 <bt_addr_le_cmp>
   1f756:	2800      	cmp	r0, #0
   1f758:	d0f3      	beq.n	1f742 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f75a:	340a      	adds	r4, #10
   1f75c:	42ac      	cmp	r4, r5
   1f75e:	d1e7      	bne.n	1f730 <find_ccc_cfg+0xa>
	return NULL;
   1f760:	2700      	movs	r7, #0
   1f762:	e7ee      	b.n	1f742 <find_ccc_cfg+0x1c>

0001f764 <ccc_find_cfg>:
{
   1f764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f768:	4604      	mov	r4, r0
   1f76a:	460f      	mov	r7, r1
   1f76c:	4690      	mov	r8, r2
   1f76e:	2500      	movs	r5, #0
   1f770:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1f772:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1f776:	4543      	cmp	r3, r8
   1f778:	d107      	bne.n	1f78a <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1f77a:	4639      	mov	r1, r7
   1f77c:	4630      	mov	r0, r6
   1f77e:	f7ff ffcf 	bl	1f720 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1f782:	b910      	cbnz	r0, 1f78a <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1f784:	1960      	adds	r0, r4, r5
}
   1f786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f78a:	350a      	adds	r5, #10
   1f78c:	2d1e      	cmp	r5, #30
   1f78e:	f106 060a 	add.w	r6, r6, #10
   1f792:	d1ee      	bne.n	1f772 <ccc_find_cfg+0xe>
	return NULL;
   1f794:	2000      	movs	r0, #0
   1f796:	e7f6      	b.n	1f786 <ccc_find_cfg+0x22>

0001f798 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f798:	2207      	movs	r2, #7
   1f79a:	f7fe be71 	b.w	1e480 <memcpy>

0001f79e <clear_ccc_cfg>:
{
   1f79e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f7a0:	2500      	movs	r5, #0
{
   1f7a2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f7a4:	4669      	mov	r1, sp
   1f7a6:	3001      	adds	r0, #1
   1f7a8:	9500      	str	r5, [sp, #0]
   1f7aa:	f8cd 5003 	str.w	r5, [sp, #3]
   1f7ae:	f7ff fff3 	bl	1f798 <bt_addr_le_copy>
	cfg->id = 0U;
   1f7b2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f7b4:	8125      	strh	r5, [r4, #8]
}
   1f7b6:	b003      	add	sp, #12
   1f7b8:	bd30      	pop	{r4, r5, pc}

0001f7ba <atomic_or>:
{
   1f7ba:	4603      	mov	r3, r0
}
   1f7bc:	e8d3 0fef 	ldaex	r0, [r3]
   1f7c0:	ea40 0201 	orr.w	r2, r0, r1
   1f7c4:	e8c3 2fec 	stlex	ip, r2, [r3]
   1f7c8:	f1bc 0f00 	cmp.w	ip, #0
   1f7cc:	d1f6      	bne.n	1f7bc <atomic_or+0x2>
   1f7ce:	4770      	bx	lr

0001f7d0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f7d0:	e8d0 0faf 	lda	r0, [r0]
}
   1f7d4:	4770      	bx	lr

0001f7d6 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1f7d6:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1f7d8:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1f7da:	3001      	adds	r0, #1
   1f7dc:	4669      	mov	r1, sp
   1f7de:	9300      	str	r3, [sp, #0]
   1f7e0:	f8cd 3003 	str.w	r3, [sp, #3]
   1f7e4:	f7ff ffd8 	bl	1f798 <bt_addr_le_copy>
}
   1f7e8:	b003      	add	sp, #12
   1f7ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001f7ee <clear_cf_cfg>:
{
   1f7ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f7f0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f7f2:	2500      	movs	r5, #0
   1f7f4:	4669      	mov	r1, sp
   1f7f6:	3001      	adds	r0, #1
   1f7f8:	9500      	str	r5, [sp, #0]
   1f7fa:	f8cd 5003 	str.w	r5, [sp, #3]
   1f7fe:	f7ff ffcb 	bl	1f798 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f802:	f104 0008 	add.w	r0, r4, #8
   1f806:	2201      	movs	r2, #1
   1f808:	4629      	mov	r1, r5
   1f80a:	f7fe fe64 	bl	1e4d6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f80e:	340c      	adds	r4, #12
   1f810:	e8d4 3fef 	ldaex	r3, [r4]
   1f814:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1f818:	2a00      	cmp	r2, #0
   1f81a:	d1f9      	bne.n	1f810 <clear_cf_cfg+0x22>
}
   1f81c:	b003      	add	sp, #12
   1f81e:	bd30      	pop	{r4, r5, pc}

0001f820 <gatt_sub_remove>:
{
   1f820:	b570      	push	{r4, r5, r6, lr}
   1f822:	460c      	mov	r4, r1
	if (params) {
   1f824:	4619      	mov	r1, r3
   1f826:	b16b      	cbz	r3, 1f844 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1f828:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1f82c:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1f82e:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1f830:	b97a      	cbnz	r2, 1f852 <gatt_sub_remove+0x32>
   1f832:	42ae      	cmp	r6, r5
	list->head = node;
   1f834:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1f836:	d100      	bne.n	1f83a <gatt_sub_remove+0x1a>
	list->tail = node;
   1f838:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1f83a:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1f83c:	680d      	ldr	r5, [r1, #0]
   1f83e:	461a      	mov	r2, r3
   1f840:	614b      	str	r3, [r1, #20]
   1f842:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1f844:	68a3      	ldr	r3, [r4, #8]
   1f846:	b94b      	cbnz	r3, 1f85c <gatt_sub_remove+0x3c>
   1f848:	4620      	mov	r0, r4
}
   1f84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f84e:	f7ff bfc2 	b.w	1f7d6 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1f852:	42ae      	cmp	r6, r5
	parent->next = child;
   1f854:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f856:	bf08      	it	eq
   1f858:	60e2      	streq	r2, [r4, #12]
}
   1f85a:	e7ee      	b.n	1f83a <gatt_sub_remove+0x1a>
   1f85c:	bd70      	pop	{r4, r5, r6, pc}

0001f85e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f85e:	2a02      	cmp	r2, #2
{
   1f860:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f862:	d108      	bne.n	1f876 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f864:	2300      	movs	r3, #0
   1f866:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f86a:	461a      	mov	r2, r3
   1f86c:	7a00      	ldrb	r0, [r0, #8]
   1f86e:	f7f3 ff9b 	bl	137a8 <sc_save>
}
   1f872:	2002      	movs	r0, #2
   1f874:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f876:	f7f4 fa4b 	bl	13d10 <sc_clear>
   1f87a:	e7fa      	b.n	1f872 <sc_ccc_cfg_write+0x14>

0001f87c <gatt_write_ccc_rsp>:
{
   1f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f880:	4606      	mov	r6, r0
   1f882:	460d      	mov	r5, r1
   1f884:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f886:	f104 0310 	add.w	r3, r4, #16
   1f88a:	e8d3 2fef 	ldaex	r2, [r3]
   1f88e:	f022 0204 	bic.w	r2, r2, #4
   1f892:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f896:	2900      	cmp	r1, #0
   1f898:	d1f7      	bne.n	1f88a <gatt_write_ccc_rsp+0xe>
	if (err) {
   1f89a:	b1dd      	cbz	r5, 1f8d4 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1f89c:	f7f3 fe6e 	bl	1357c <gatt_sub_find>
		if (!sub) {
   1f8a0:	4601      	mov	r1, r0
   1f8a2:	b300      	cbz	r0, 1f8e6 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1f8a4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f8a6:	b143      	cbz	r3, 1f8ba <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1f8a8:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1f8aa:	f104 0014 	add.w	r0, r4, #20
   1f8ae:	4283      	cmp	r3, r0
   1f8b0:	d10b      	bne.n	1f8ca <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1f8b2:	4623      	mov	r3, r4
   1f8b4:	4630      	mov	r0, r6
   1f8b6:	f7ff ffb3 	bl	1f820 <gatt_sub_remove>
	if (params->write) {
   1f8ba:	6863      	ldr	r3, [r4, #4]
   1f8bc:	b19b      	cbz	r3, 1f8e6 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1f8be:	4629      	mov	r1, r5
   1f8c0:	4630      	mov	r0, r6
}
   1f8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1f8c6:	2200      	movs	r2, #0
   1f8c8:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f8ca:	2a00      	cmp	r2, #0
   1f8cc:	d0f5      	beq.n	1f8ba <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1f8ce:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f8d0:	6812      	ldr	r2, [r2, #0]
   1f8d2:	e7ec      	b.n	1f8ae <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1f8d4:	89a3      	ldrh	r3, [r4, #12]
   1f8d6:	2b00      	cmp	r3, #0
   1f8d8:	d1ef      	bne.n	1f8ba <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1f8da:	462b      	mov	r3, r5
   1f8dc:	462a      	mov	r2, r5
   1f8de:	4621      	mov	r1, r4
   1f8e0:	6827      	ldr	r7, [r4, #0]
   1f8e2:	47b8      	blx	r7
   1f8e4:	e7e9      	b.n	1f8ba <gatt_write_ccc_rsp+0x3e>
}
   1f8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f8ea <read_ppcp>:
{
   1f8ea:	b513      	push	{r0, r1, r4, lr}
   1f8ec:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1f8ee:	2218      	movs	r2, #24
   1f8f0:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1f8f4:	2228      	movs	r2, #40	; 0x28
   1f8f6:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1f8fa:	2200      	movs	r2, #0
   1f8fc:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f900:	222a      	movs	r2, #42	; 0x2a
{
   1f902:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f906:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f90a:	2908      	cmp	r1, #8
   1f90c:	d80b      	bhi.n	1f926 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1f90e:	f1c1 0408 	rsb	r4, r1, #8
   1f912:	429c      	cmp	r4, r3
   1f914:	bfa8      	it	ge
   1f916:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f918:	4469      	add	r1, sp
   1f91a:	4622      	mov	r2, r4
   1f91c:	f7fe fdb0 	bl	1e480 <memcpy>
}
   1f920:	4620      	mov	r0, r4
   1f922:	b002      	add	sp, #8
   1f924:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f926:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1f92a:	e7f9      	b.n	1f920 <read_ppcp+0x36>

0001f92c <read_appearance>:
{
   1f92c:	b513      	push	{r0, r1, r4, lr}
   1f92e:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f930:	2200      	movs	r2, #0
{
   1f932:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f936:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f93a:	2902      	cmp	r1, #2
   1f93c:	d80d      	bhi.n	1f95a <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1f93e:	f1c1 0402 	rsb	r4, r1, #2
   1f942:	429c      	cmp	r4, r3
   1f944:	bfa8      	it	ge
   1f946:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f948:	f10d 0306 	add.w	r3, sp, #6
   1f94c:	4622      	mov	r2, r4
   1f94e:	4419      	add	r1, r3
   1f950:	f7fe fd96 	bl	1e480 <memcpy>
}
   1f954:	4620      	mov	r0, r4
   1f956:	b002      	add	sp, #8
   1f958:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f95a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f95e:	e7f9      	b.n	1f954 <read_appearance+0x28>

0001f960 <read_name>:
{
   1f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f964:	4698      	mov	r8, r3
   1f966:	4615      	mov	r5, r2
   1f968:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1f96c:	f7f0 fe64 	bl	10638 <bt_get_name>
   1f970:	4607      	mov	r7, r0
				 strlen(name));
   1f972:	f7fe fd47 	bl	1e404 <strlen>
	if (offset > value_len) {
   1f976:	b283      	uxth	r3, r0
   1f978:	42b3      	cmp	r3, r6
   1f97a:	d30c      	bcc.n	1f996 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f97c:	1b9c      	subs	r4, r3, r6
   1f97e:	4544      	cmp	r4, r8
   1f980:	bfa8      	it	ge
   1f982:	4644      	movge	r4, r8
   1f984:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f986:	4622      	mov	r2, r4
   1f988:	4628      	mov	r0, r5
   1f98a:	19b9      	adds	r1, r7, r6
   1f98c:	f7fe fd78 	bl	1e480 <memcpy>
}
   1f990:	4620      	mov	r0, r4
   1f992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f996:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f99a:	e7f9      	b.n	1f990 <read_name+0x30>

0001f99c <cf_read>:
{
   1f99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f99e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f9a0:	2300      	movs	r3, #0
{
   1f9a2:	4615      	mov	r5, r2
   1f9a4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f9a8:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1f9ac:	f7f3 fda8 	bl	13500 <find_cf_cfg>
	if (cfg) {
   1f9b0:	b128      	cbz	r0, 1f9be <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f9b2:	f100 0108 	add.w	r1, r0, #8
   1f9b6:	2201      	movs	r2, #1
   1f9b8:	a801      	add	r0, sp, #4
   1f9ba:	f7fe fd61 	bl	1e480 <memcpy>
	if (offset > value_len) {
   1f9be:	2e01      	cmp	r6, #1
   1f9c0:	d80d      	bhi.n	1f9de <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f9c2:	f1c6 0401 	rsb	r4, r6, #1
   1f9c6:	42bc      	cmp	r4, r7
   1f9c8:	bfa8      	it	ge
   1f9ca:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f9cc:	ab01      	add	r3, sp, #4
   1f9ce:	4622      	mov	r2, r4
   1f9d0:	4628      	mov	r0, r5
   1f9d2:	1999      	adds	r1, r3, r6
   1f9d4:	f7fe fd54 	bl	1e480 <memcpy>
}
   1f9d8:	4620      	mov	r0, r4
   1f9da:	b003      	add	sp, #12
   1f9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f9de:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f9e2:	e7f9      	b.n	1f9d8 <cf_read+0x3c>

0001f9e4 <bt_gatt_attr_read_service>:
{
   1f9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f9e6:	68c9      	ldr	r1, [r1, #12]
{
   1f9e8:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f9ea:	780b      	ldrb	r3, [r1, #0]
{
   1f9ec:	4610      	mov	r0, r2
   1f9ee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f9f2:	b993      	cbnz	r3, 1fa1a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f9f4:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1f9f6:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f9f8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f9fc:	d819      	bhi.n	1fa32 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f9fe:	f1c5 0202 	rsb	r2, r5, #2
   1fa02:	4294      	cmp	r4, r2
   1fa04:	bfa8      	it	ge
   1fa06:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1fa08:	4622      	mov	r2, r4
   1fa0a:	f10d 0306 	add.w	r3, sp, #6
   1fa0e:	1959      	adds	r1, r3, r5
   1fa10:	f7fe fd36 	bl	1e480 <memcpy>
}
   1fa14:	4620      	mov	r0, r4
   1fa16:	b003      	add	sp, #12
   1fa18:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1fa1a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1fa1c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1fa20:	d807      	bhi.n	1fa32 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1fa22:	f1c5 0210 	rsb	r2, r5, #16
   1fa26:	4294      	cmp	r4, r2
   1fa28:	bfa8      	it	ge
   1fa2a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1fa2c:	4429      	add	r1, r5
   1fa2e:	4622      	mov	r2, r4
   1fa30:	e7ee      	b.n	1fa10 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fa32:	f06f 0406 	mvn.w	r4, #6
   1fa36:	e7ed      	b.n	1fa14 <bt_gatt_attr_read_service+0x30>

0001fa38 <bt_gatt_attr_read_ccc>:
{
   1fa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1fa3a:	68c9      	ldr	r1, [r1, #12]
{
   1fa3c:	4615      	mov	r5, r2
   1fa3e:	461f      	mov	r7, r3
   1fa40:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1fa44:	f7ff fe6f 	bl	1f726 <find_ccc_cfg>
	if (cfg) {
   1fa48:	b100      	cbz	r0, 1fa4c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1fa4a:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1fa4c:	2e02      	cmp	r6, #2
   1fa4e:	f8ad 0006 	strh.w	r0, [sp, #6]
   1fa52:	d80e      	bhi.n	1fa72 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1fa54:	f1c6 0402 	rsb	r4, r6, #2
   1fa58:	42bc      	cmp	r4, r7
   1fa5a:	bfa8      	it	ge
   1fa5c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1fa5e:	f10d 0306 	add.w	r3, sp, #6
   1fa62:	4622      	mov	r2, r4
   1fa64:	4628      	mov	r0, r5
   1fa66:	1999      	adds	r1, r3, r6
   1fa68:	f7fe fd0a 	bl	1e480 <memcpy>
}
   1fa6c:	4620      	mov	r0, r4
   1fa6e:	b003      	add	sp, #12
   1fa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fa72:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1fa76:	e7f9      	b.n	1fa6c <bt_gatt_attr_read_ccc+0x34>

0001fa78 <sc_restore_rsp>:
{
   1fa78:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1fa7a:	f7f3 fd41 	bl	13500 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1fa7e:	b140      	cbz	r0, 1fa92 <sc_restore_rsp+0x1a>
   1fa80:	7a03      	ldrb	r3, [r0, #8]
   1fa82:	07db      	lsls	r3, r3, #31
   1fa84:	d505      	bpl.n	1fa92 <sc_restore_rsp+0x1a>
}
   1fa86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fa8a:	2101      	movs	r1, #1
   1fa8c:	300c      	adds	r0, #12
   1fa8e:	f7ff be94 	b.w	1f7ba <atomic_or>
   1fa92:	bd08      	pop	{r3, pc}

0001fa94 <bt_gatt_attr_read>:
{
   1fa94:	b538      	push	{r3, r4, r5, lr}
   1fa96:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1fa9a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1fa9e:	4610      	mov	r0, r2
	if (offset > value_len) {
   1faa0:	42a9      	cmp	r1, r5
   1faa2:	d80b      	bhi.n	1fabc <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1faa4:	1a6d      	subs	r5, r5, r1
   1faa6:	429d      	cmp	r5, r3
   1faa8:	bfa8      	it	ge
   1faaa:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1faac:	9b05      	ldr	r3, [sp, #20]
   1faae:	b2ad      	uxth	r5, r5
   1fab0:	462a      	mov	r2, r5
   1fab2:	4419      	add	r1, r3
   1fab4:	f7fe fce4 	bl	1e480 <memcpy>
}
   1fab8:	4628      	mov	r0, r5
   1faba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fabc:	f06f 0506 	mvn.w	r5, #6
   1fac0:	e7fa      	b.n	1fab8 <bt_gatt_attr_read+0x24>

0001fac2 <bt_gatt_attr_value_handle>:
{
   1fac2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1fac4:	4604      	mov	r4, r0
   1fac6:	b910      	cbnz	r0, 1face <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1fac8:	2000      	movs	r0, #0
}
   1faca:	b002      	add	sp, #8
   1facc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1face:	2300      	movs	r3, #0
   1fad0:	f88d 3004 	strb.w	r3, [sp, #4]
   1fad4:	f642 0303 	movw	r3, #10243	; 0x2803
   1fad8:	6800      	ldr	r0, [r0, #0]
   1fada:	a901      	add	r1, sp, #4
   1fadc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1fae0:	f7fe fd69 	bl	1e5b6 <bt_uuid_cmp>
   1fae4:	2800      	cmp	r0, #0
   1fae6:	d1ef      	bne.n	1fac8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1fae8:	68e3      	ldr	r3, [r4, #12]
   1faea:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1faec:	2800      	cmp	r0, #0
   1faee:	d1ec      	bne.n	1faca <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1faf0:	4620      	mov	r0, r4
   1faf2:	f7f4 fa59 	bl	13fa8 <bt_gatt_attr_get_handle>
   1faf6:	3001      	adds	r0, #1
   1faf8:	b280      	uxth	r0, r0
	return handle;
   1fafa:	e7e6      	b.n	1faca <bt_gatt_attr_value_handle+0x8>

0001fafc <bt_gatt_attr_read_chrc>:
{
   1fafc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1fafe:	68cf      	ldr	r7, [r1, #12]
{
   1fb00:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1fb02:	79bb      	ldrb	r3, [r7, #6]
{
   1fb04:	b087      	sub	sp, #28
   1fb06:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1fb08:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1fb0c:	4615      	mov	r5, r2
   1fb0e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1fb12:	f7ff ffd6 	bl	1fac2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1fb16:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1fb18:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1fb1c:	780b      	ldrb	r3, [r1, #0]
   1fb1e:	b99b      	cbnz	r3, 1fb48 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1fb20:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1fb22:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1fb24:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1fb28:	42b1      	cmp	r1, r6
   1fb2a:	d315      	bcc.n	1fb58 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1fb2c:	1b89      	subs	r1, r1, r6
   1fb2e:	42a1      	cmp	r1, r4
   1fb30:	bfa8      	it	ge
   1fb32:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1fb34:	ab01      	add	r3, sp, #4
   1fb36:	b28c      	uxth	r4, r1
   1fb38:	4622      	mov	r2, r4
   1fb3a:	4628      	mov	r0, r5
   1fb3c:	1999      	adds	r1, r3, r6
   1fb3e:	f7fe fc9f 	bl	1e480 <memcpy>
}
   1fb42:	4620      	mov	r0, r4
   1fb44:	b007      	add	sp, #28
   1fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1fb48:	3101      	adds	r1, #1
   1fb4a:	2210      	movs	r2, #16
   1fb4c:	f10d 0007 	add.w	r0, sp, #7
   1fb50:	f7fe fc96 	bl	1e480 <memcpy>
		value_len += 16U;
   1fb54:	2113      	movs	r1, #19
   1fb56:	e7e7      	b.n	1fb28 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fb58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1fb5c:	e7f1      	b.n	1fb42 <bt_gatt_attr_read_chrc+0x46>

0001fb5e <bt_gatt_foreach_attr>:
{
   1fb5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1fb60:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1fb64:	2300      	movs	r3, #0
   1fb66:	461a      	mov	r2, r3
   1fb68:	9300      	str	r3, [sp, #0]
   1fb6a:	f7f4 fa61 	bl	14030 <bt_gatt_foreach_attr_type>
}
   1fb6e:	b005      	add	sp, #20
   1fb70:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb74 <db_hash_process>:
	db_hash_gen(true);
   1fb74:	2001      	movs	r0, #1
   1fb76:	f7f4 bac7 	b.w	14108 <db_hash_gen>

0001fb7a <bt_gatt_check_perm>:
{
   1fb7a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1fb7c:	07d4      	lsls	r4, r2, #31
{
   1fb7e:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fb80:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fb82:	d504      	bpl.n	1fb8e <bt_gatt_check_perm+0x14>
   1fb84:	f010 0f15 	tst.w	r0, #21
   1fb88:	d01e      	beq.n	1fbc8 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fb8a:	684b      	ldr	r3, [r1, #4]
   1fb8c:	b1e3      	cbz	r3, 1fbc8 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fb8e:	0793      	lsls	r3, r2, #30
   1fb90:	d504      	bpl.n	1fb9c <bt_gatt_check_perm+0x22>
   1fb92:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1fb96:	d019      	beq.n	1fbcc <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fb98:	688b      	ldr	r3, [r1, #8]
   1fb9a:	b1bb      	cbz	r3, 1fbcc <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1fb9c:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fba0:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fba4:	d103      	bne.n	1fbae <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1fba6:	f014 000c 	ands.w	r0, r4, #12
   1fbaa:	d107      	bne.n	1fbbc <bt_gatt_check_perm+0x42>
}
   1fbac:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fbae:	4628      	mov	r0, r5
   1fbb0:	f7ff f828 	bl	1ec04 <bt_conn_get_security>
   1fbb4:	2802      	cmp	r0, #2
   1fbb6:	d8f6      	bhi.n	1fba6 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1fbb8:	2005      	movs	r0, #5
   1fbba:	e7f7      	b.n	1fbac <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1fbbc:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1fbbe:	2b00      	cmp	r3, #0
   1fbc0:	bf14      	ite	ne
   1fbc2:	2000      	movne	r0, #0
   1fbc4:	200f      	moveq	r0, #15
   1fbc6:	e7f1      	b.n	1fbac <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fbc8:	2002      	movs	r0, #2
   1fbca:	e7ef      	b.n	1fbac <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fbcc:	2003      	movs	r0, #3
   1fbce:	e7ed      	b.n	1fbac <bt_gatt_check_perm+0x32>

0001fbd0 <gatt_discover_next>:
{
   1fbd0:	b570      	push	{r4, r5, r6, lr}
   1fbd2:	4605      	mov	r5, r0
   1fbd4:	4614      	mov	r4, r2
	if (!last_handle)
   1fbd6:	b929      	cbnz	r1, 1fbe4 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1fbd8:	4621      	mov	r1, r4
   1fbda:	4628      	mov	r0, r5
   1fbdc:	f7f4 fe02 	bl	147e4 <bt_gatt_discover>
   1fbe0:	b928      	cbnz	r0, 1fbee <gatt_discover_next+0x1e>
}
   1fbe2:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1fbe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1fbe8:	4291      	cmp	r1, r2
   1fbea:	d107      	bne.n	1fbfc <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1fbec:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1fbee:	4622      	mov	r2, r4
   1fbf0:	4628      	mov	r0, r5
   1fbf2:	6863      	ldr	r3, [r4, #4]
   1fbf4:	2100      	movs	r1, #0
}
   1fbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1fbfa:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1fbfc:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1fbfe:	1c4b      	adds	r3, r1, #1
   1fc00:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1fc02:	429a      	cmp	r2, r3
		params->start_handle++;
   1fc04:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1fc06:	d2e7      	bcs.n	1fbd8 <gatt_discover_next+0x8>
   1fc08:	e7f1      	b.n	1fbee <gatt_discover_next+0x1e>

0001fc0a <gatt_find_type_rsp>:
{
   1fc0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc0e:	b088      	sub	sp, #32
   1fc10:	4607      	mov	r7, r0
   1fc12:	4614      	mov	r4, r2
   1fc14:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1fc18:	b911      	cbnz	r1, 1fc20 <gatt_find_type_rsp+0x16>
   1fc1a:	f013 0803 	ands.w	r8, r3, #3
   1fc1e:	d008      	beq.n	1fc32 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1fc20:	464a      	mov	r2, r9
   1fc22:	2100      	movs	r1, #0
   1fc24:	4638      	mov	r0, r7
   1fc26:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1fc2a:	b008      	add	sp, #32
   1fc2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1fc30:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1fc32:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1fc34:	f642 0a01 	movw	sl, #10241	; 0x2801
   1fc38:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1fc3c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1fc40:	42ac      	cmp	r4, r5
   1fc42:	d107      	bne.n	1fc54 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1fc44:	464a      	mov	r2, r9
   1fc46:	4641      	mov	r1, r8
   1fc48:	4638      	mov	r0, r7
}
   1fc4a:	b008      	add	sp, #32
   1fc4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1fc50:	f7ff bfbe 	b.w	1fbd0 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1fc54:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1fc58:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1fc5a:	2900      	cmp	r1, #0
   1fc5c:	bf0c      	ite	eq
   1fc5e:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1fc62:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1fc64:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1fc68:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1fc6c:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1fc70:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1fc72:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1fc74:	ab01      	add	r3, sp, #4
   1fc76:	f8ad 1002 	strh.w	r1, [sp, #2]
   1fc7a:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1fc7c:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1fc80:	4638      	mov	r0, r7
   1fc82:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1fc84:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1fc88:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1fc8c:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1fc90:	f8cd d00c 	str.w	sp, [sp, #12]
   1fc94:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1fc98:	a903      	add	r1, sp, #12
   1fc9a:	4798      	blx	r3
   1fc9c:	3404      	adds	r4, #4
   1fc9e:	2800      	cmp	r0, #0
   1fca0:	d1ce      	bne.n	1fc40 <gatt_find_type_rsp+0x36>
}
   1fca2:	b008      	add	sp, #32
   1fca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fca8 <bt_gatt_notification>:
{
   1fca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fcac:	4607      	mov	r7, r0
   1fcae:	4688      	mov	r8, r1
   1fcb0:	4691      	mov	r9, r2
   1fcb2:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1fcb4:	f7f3 fc62 	bl	1357c <gatt_sub_find>
	if (!sub) {
   1fcb8:	b1f8      	cbz	r0, 1fcfa <bt_gatt_notification+0x52>
	return list->head;
   1fcba:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fcbc:	b1eb      	cbz	r3, 1fcfa <bt_gatt_notification+0x52>
   1fcbe:	f1b3 0614 	subs.w	r6, r3, #20
   1fcc2:	d01a      	beq.n	1fcfa <bt_gatt_notification+0x52>
	return node->next;
   1fcc4:	681c      	ldr	r4, [r3, #0]
   1fcc6:	b104      	cbz	r4, 1fcca <bt_gatt_notification+0x22>
   1fcc8:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1fcca:	8933      	ldrh	r3, [r6, #8]
   1fccc:	4543      	cmp	r3, r8
   1fcce:	d10a      	bne.n	1fce6 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1fcd0:	4653      	mov	r3, sl
   1fcd2:	464a      	mov	r2, r9
   1fcd4:	4631      	mov	r1, r6
   1fcd6:	4638      	mov	r0, r7
   1fcd8:	6835      	ldr	r5, [r6, #0]
   1fcda:	47a8      	blx	r5
   1fcdc:	b918      	cbnz	r0, 1fce6 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1fcde:	4631      	mov	r1, r6
   1fce0:	4638      	mov	r0, r7
   1fce2:	f7f5 f9bb 	bl	1505c <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fce6:	b144      	cbz	r4, 1fcfa <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fce8:	f114 0514 	adds.w	r5, r4, #20
   1fcec:	d002      	beq.n	1fcf4 <bt_gatt_notification+0x4c>
	return node->next;
   1fcee:	6965      	ldr	r5, [r4, #20]
   1fcf0:	b105      	cbz	r5, 1fcf4 <bt_gatt_notification+0x4c>
   1fcf2:	3d14      	subs	r5, #20
{
   1fcf4:	4626      	mov	r6, r4
   1fcf6:	462c      	mov	r4, r5
   1fcf8:	e7e7      	b.n	1fcca <bt_gatt_notification+0x22>
}
   1fcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fcfe <bt_gatt_change_aware>:
{
   1fcfe:	b510      	push	{r4, lr}
   1fd00:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fd02:	f7f3 fbfd 	bl	13500 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fd06:	b910      	cbnz	r0, 1fd0e <bt_gatt_change_aware+0x10>
		return true;
   1fd08:	2401      	movs	r4, #1
}
   1fd0a:	4620      	mov	r0, r4
   1fd0c:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fd0e:	7a03      	ldrb	r3, [r0, #8]
   1fd10:	07db      	lsls	r3, r3, #31
   1fd12:	d5f9      	bpl.n	1fd08 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fd14:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1fd18:	4618      	mov	r0, r3
   1fd1a:	f7ff fd59 	bl	1f7d0 <atomic_get>
   1fd1e:	07c1      	lsls	r1, r0, #31
   1fd20:	d4f2      	bmi.n	1fd08 <bt_gatt_change_aware+0xa>
	if (!req) {
   1fd22:	2c00      	cmp	r4, #0
   1fd24:	d0f1      	beq.n	1fd0a <bt_gatt_change_aware+0xc>
   1fd26:	4618      	mov	r0, r3
   1fd28:	f7ff fd52 	bl	1f7d0 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fd2c:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fd2e:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1fd32:	d50c      	bpl.n	1fd4e <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fd34:	e8d3 2fef 	ldaex	r2, [r3]
   1fd38:	f022 0202 	bic.w	r2, r2, #2
   1fd3c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1fd40:	2900      	cmp	r1, #0
   1fd42:	d1f7      	bne.n	1fd34 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fd44:	2101      	movs	r1, #1
   1fd46:	4618      	mov	r0, r3
   1fd48:	f7ff fd37 	bl	1f7ba <atomic_or>
}
   1fd4c:	e7dd      	b.n	1fd0a <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fd4e:	2102      	movs	r1, #2
   1fd50:	e7f9      	b.n	1fd46 <bt_gatt_change_aware+0x48>

0001fd52 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fd52:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fd56:	f890 30d2 	ldrb.w	r3, [r0, #210]	; 0xd2
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1fd5a:	6800      	ldr	r0, [r0, #0]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fd5c:	f002 0201 	and.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fd60:	78c0      	ldrb	r0, [r0, #3]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fd62:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fd66:	b928      	cbnz	r0, 1fd74 <le_sc_oob_config_set+0x22>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1fd68:	b952      	cbnz	r2, 1fd80 <le_sc_oob_config_set+0x2e>
				     BT_CONN_OOB_BOTH_PEERS :
   1fd6a:	2b00      	cmp	r3, #0
   1fd6c:	bf0c      	ite	eq
   1fd6e:	2303      	moveq	r3, #3
   1fd70:	2300      	movne	r3, #0
   1fd72:	e009      	b.n	1fd88 <le_sc_oob_config_set+0x36>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1fd74:	b952      	cbnz	r2, 1fd8c <le_sc_oob_config_set+0x3a>
				     BT_CONN_OOB_BOTH_PEERS :
   1fd76:	2b00      	cmp	r3, #0
   1fd78:	bf0c      	ite	eq
   1fd7a:	2303      	moveq	r3, #3
   1fd7c:	2301      	movne	r3, #1
   1fd7e:	e003      	b.n	1fd88 <le_sc_oob_config_set+0x36>
				     BT_CONN_OOB_BOTH_PEERS :
   1fd80:	2b00      	cmp	r3, #0
   1fd82:	bf0c      	ite	eq
   1fd84:	2301      	moveq	r3, #1
   1fd86:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   1fd88:	704b      	strb	r3, [r1, #1]
}
   1fd8a:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   1fd8c:	005b      	lsls	r3, r3, #1
   1fd8e:	e7fb      	b.n	1fd88 <le_sc_oob_config_set+0x36>

0001fd90 <smp_signing_info>:
}
   1fd90:	2007      	movs	r0, #7
   1fd92:	4770      	bx	lr

0001fd94 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fd94:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fd98:	4108      	asrs	r0, r1
}
   1fd9a:	f000 0001 	and.w	r0, r0, #1
   1fd9e:	4770      	bx	lr

0001fda0 <update_keys_check>:
{
   1fda0:	4603      	mov	r3, r0
   1fda2:	b510      	push	{r4, lr}
	if (!keys ||
   1fda4:	b1f9      	cbz	r1, 1fde6 <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1fda6:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1fda8:	f010 0f24 	tst.w	r0, #36	; 0x24
   1fdac:	d01b      	beq.n	1fde6 <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fdae:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   1fdb2:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1fdb6:	7b09      	ldrb	r1, [r1, #12]
   1fdb8:	42a2      	cmp	r2, r4
   1fdba:	bf28      	it	cs
   1fdbc:	4622      	movcs	r2, r4
   1fdbe:	4291      	cmp	r1, r2
   1fdc0:	d901      	bls.n	1fdc6 <update_keys_check+0x26>
		return false;
   1fdc2:	2000      	movs	r0, #0
}
   1fdc4:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1fdc6:	0682      	lsls	r2, r0, #26
   1fdc8:	d405      	bmi.n	1fdd6 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1fdca:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   1fdce:	3800      	subs	r0, #0
   1fdd0:	bf18      	it	ne
   1fdd2:	2001      	movne	r0, #1
   1fdd4:	e7f6      	b.n	1fdc4 <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fdd6:	2105      	movs	r1, #5
   1fdd8:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   1fddc:	f7ff ffda 	bl	1fd94 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1fde0:	2800      	cmp	r0, #0
   1fde2:	d1f2      	bne.n	1fdca <update_keys_check+0x2a>
   1fde4:	e7ed      	b.n	1fdc2 <update_keys_check+0x22>
		return true;
   1fde6:	2001      	movs	r0, #1
   1fde8:	e7ec      	b.n	1fdc4 <update_keys_check+0x24>

0001fdea <remote_sec_level_reachable>:
{
   1fdea:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1fdec:	6802      	ldr	r2, [r0, #0]
{
   1fdee:	4603      	mov	r3, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1fdf0:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   1fdf2:	2a03      	cmp	r2, #3
   1fdf4:	d016      	beq.n	1fe24 <remote_sec_level_reachable+0x3a>
   1fdf6:	d805      	bhi.n	1fe04 <remote_sec_level_reachable+0x1a>
   1fdf8:	3a01      	subs	r2, #1
   1fdfa:	2a01      	cmp	r2, #1
   1fdfc:	bf94      	ite	ls
   1fdfe:	2000      	movls	r0, #0
   1fe00:	2008      	movhi	r0, #8
}
   1fe02:	bd08      	pop	{r3, pc}
	switch (sec) {
   1fe04:	2a04      	cmp	r2, #4
   1fe06:	d112      	bne.n	1fe2e <remote_sec_level_reachable+0x44>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fe08:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
   1fe0c:	f890 10cd 	ldrb.w	r1, [r0, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1fe10:	428a      	cmp	r2, r1
   1fe12:	bf28      	it	cs
   1fe14:	460a      	movcs	r2, r1
   1fe16:	2a10      	cmp	r2, #16
   1fe18:	d10b      	bne.n	1fe32 <remote_sec_level_reachable+0x48>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fe1a:	2105      	movs	r1, #5
   1fe1c:	30c4      	adds	r0, #196	; 0xc4
   1fe1e:	f7ff ffb9 	bl	1fd94 <atomic_test_bit>
   1fe22:	b110      	cbz	r0, 1fe2a <remote_sec_level_reachable+0x40>
		if (smp->method == JUST_WORKS) {
   1fe24:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1fe28:	b92b      	cbnz	r3, 1fe36 <remote_sec_level_reachable+0x4c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fe2a:	2003      	movs	r0, #3
   1fe2c:	e7e9      	b.n	1fe02 <remote_sec_level_reachable+0x18>
	switch (sec) {
   1fe2e:	2008      	movs	r0, #8
   1fe30:	e7e7      	b.n	1fe02 <remote_sec_level_reachable+0x18>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   1fe32:	2006      	movs	r0, #6
   1fe34:	e7e5      	b.n	1fe02 <remote_sec_level_reachable+0x18>
		return 0;
   1fe36:	2000      	movs	r0, #0
   1fe38:	e7e3      	b.n	1fe02 <remote_sec_level_reachable+0x18>

0001fe3a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fe3a:	2301      	movs	r3, #1
   1fe3c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fe3e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fe40:	e8d0 2fef 	ldaex	r2, [r0]
   1fe44:	401a      	ands	r2, r3
   1fe46:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1fe4a:	2900      	cmp	r1, #0
   1fe4c:	d1f8      	bne.n	1fe40 <atomic_clear_bit+0x6>
}
   1fe4e:	4770      	bx	lr

0001fe50 <bt_smp_aes_cmac>:
{
   1fe50:	b570      	push	{r4, r5, r6, lr}
   1fe52:	b0c2      	sub	sp, #264	; 0x108
   1fe54:	460d      	mov	r5, r1
   1fe56:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fe58:	4601      	mov	r1, r0
   1fe5a:	aa16      	add	r2, sp, #88	; 0x58
   1fe5c:	4668      	mov	r0, sp
{
   1fe5e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fe60:	f7fd ff17 	bl	1dc92 <tc_cmac_setup>
   1fe64:	b150      	cbz	r0, 1fe7c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1fe66:	4632      	mov	r2, r6
   1fe68:	4629      	mov	r1, r5
   1fe6a:	4668      	mov	r0, sp
   1fe6c:	f7fd ff3c 	bl	1dce8 <tc_cmac_update>
   1fe70:	b120      	cbz	r0, 1fe7c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1fe72:	4669      	mov	r1, sp
   1fe74:	4620      	mov	r0, r4
   1fe76:	f7fd ffa2 	bl	1ddbe <tc_cmac_final>
   1fe7a:	b918      	cbnz	r0, 1fe84 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1fe7c:	f06f 0004 	mvn.w	r0, #4
}
   1fe80:	b042      	add	sp, #264	; 0x108
   1fe82:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1fe84:	2000      	movs	r0, #0
   1fe86:	e7fb      	b.n	1fe80 <bt_smp_aes_cmac+0x30>

0001fe88 <bt_smp_disconnected>:
{
   1fe88:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1fe8a:	6803      	ldr	r3, [r0, #0]
{
   1fe8c:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   1fe8e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   1fe92:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1fe96:	f7fb ff4d 	bl	1bd34 <k_delayed_work_cancel>
	if (keys) {
   1fe9a:	b13d      	cbz	r5, 1feac <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fe9c:	89eb      	ldrh	r3, [r5, #14]
   1fe9e:	b113      	cbz	r3, 1fea6 <bt_smp_disconnected+0x1e>
   1fea0:	7b6b      	ldrb	r3, [r5, #13]
   1fea2:	079b      	lsls	r3, r3, #30
   1fea4:	d502      	bpl.n	1feac <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1fea6:	4628      	mov	r0, r5
   1fea8:	f7f7 fa56 	bl	17358 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1feac:	4620      	mov	r0, r4
}
   1feae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1feb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1feb6:	2100      	movs	r1, #0
   1feb8:	f7fe bb0d 	b.w	1e4d6 <memset>

0001febc <smp_keys_check>:
{
   1febc:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1febe:	210b      	movs	r1, #11
{
   1fec0:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1fec2:	3004      	adds	r0, #4
   1fec4:	f7ff ff66 	bl	1fd94 <atomic_test_bit>
   1fec8:	b108      	cbz	r0, 1fece <smp_keys_check+0x12>
		return false;
   1feca:	2000      	movs	r0, #0
}
   1fecc:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   1fece:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fed2:	b983      	cbnz	r3, 1fef6 <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   1fed4:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1fed8:	462a      	mov	r2, r5
   1feda:	2020      	movs	r0, #32
   1fedc:	7a21      	ldrb	r1, [r4, #8]
   1fede:	f7f7 f9dd 	bl	1729c <bt_keys_find>
   1fee2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1fee6:	b930      	cbnz	r0, 1fef6 <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1fee8:	462a      	mov	r2, r5
   1feea:	2004      	movs	r0, #4
   1feec:	7a21      	ldrb	r1, [r4, #8]
   1feee:	f7f7 f9d5 	bl	1729c <bt_keys_find>
   1fef2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   1fef6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fefa:	2b00      	cmp	r3, #0
   1fefc:	d0e5      	beq.n	1feca <smp_keys_check+0xe>
   1fefe:	89da      	ldrh	r2, [r3, #14]
   1ff00:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ff04:	2a00      	cmp	r2, #0
   1ff06:	d0e0      	beq.n	1feca <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1ff08:	7aa2      	ldrb	r2, [r4, #10]
   1ff0a:	2a02      	cmp	r2, #2
   1ff0c:	d902      	bls.n	1ff14 <smp_keys_check+0x58>
   1ff0e:	7b5b      	ldrb	r3, [r3, #13]
   1ff10:	07db      	lsls	r3, r3, #31
   1ff12:	d5da      	bpl.n	1feca <smp_keys_check+0xe>
	return true;
   1ff14:	2001      	movs	r0, #1
   1ff16:	e7d9      	b.n	1fecc <smp_keys_check+0x10>

0001ff18 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1ff18:	b510      	push	{r4, lr}
   1ff1a:	1e43      	subs	r3, r0, #1
   1ff1c:	f100 0210 	add.w	r2, r0, #16
   1ff20:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ff22:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ff26:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1ff2a:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ff2c:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ff2e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1ff30:	d1f7      	bne.n	1ff22 <sys_mem_swap.constprop.0+0xa>
	}
}
   1ff32:	bd10      	pop	{r4, pc}

0001ff34 <smp_f6>:
{
   1ff34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff36:	4616      	mov	r6, r2
   1ff38:	461c      	mov	r4, r3
   1ff3a:	4605      	mov	r5, r0
   1ff3c:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   1ff3e:	2210      	movs	r2, #16
   1ff40:	a805      	add	r0, sp, #20
{
   1ff42:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1ff44:	f7f5 fb30 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1ff48:	2210      	movs	r2, #16
   1ff4a:	4631      	mov	r1, r6
   1ff4c:	a809      	add	r0, sp, #36	; 0x24
   1ff4e:	f7f5 fb2b 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1ff52:	4621      	mov	r1, r4
   1ff54:	2210      	movs	r2, #16
   1ff56:	a80d      	add	r0, sp, #52	; 0x34
   1ff58:	f7f5 fb26 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1ff5c:	2203      	movs	r2, #3
   1ff5e:	991c      	ldr	r1, [sp, #112]	; 0x70
   1ff60:	a811      	add	r0, sp, #68	; 0x44
   1ff62:	f7f5 fb21 	bl	155a8 <sys_memcpy_swap>
	m[51] = a1->type;
   1ff66:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1ff68:	2206      	movs	r2, #6
	m[51] = a1->type;
   1ff6a:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   1ff6e:	a812      	add	r0, sp, #72	; 0x48
   1ff70:	4621      	mov	r1, r4
	m[51] = a1->type;
   1ff72:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1ff76:	f7fe fa83 	bl	1e480 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1ff7a:	4621      	mov	r1, r4
   1ff7c:	2206      	movs	r2, #6
   1ff7e:	a812      	add	r0, sp, #72	; 0x48
   1ff80:	f7f5 fb12 	bl	155a8 <sys_memcpy_swap>
	m[58] = a2->type;
   1ff84:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1ff86:	2206      	movs	r2, #6
	m[58] = a2->type;
   1ff88:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1ff8c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1ff90:	4621      	mov	r1, r4
	m[58] = a2->type;
   1ff92:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1ff96:	f7fe fa73 	bl	1e480 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1ff9a:	4621      	mov	r1, r4
   1ff9c:	2206      	movs	r2, #6
   1ff9e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1ffa2:	f7f5 fb01 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1ffa6:	2210      	movs	r2, #16
   1ffa8:	4629      	mov	r1, r5
   1ffaa:	a801      	add	r0, sp, #4
   1ffac:	f7f5 fafc 	bl	155a8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1ffb0:	463b      	mov	r3, r7
   1ffb2:	2241      	movs	r2, #65	; 0x41
   1ffb4:	a905      	add	r1, sp, #20
   1ffb6:	a801      	add	r0, sp, #4
   1ffb8:	f7ff ff4a 	bl	1fe50 <bt_smp_aes_cmac>
	if (err) {
   1ffbc:	4604      	mov	r4, r0
   1ffbe:	b910      	cbnz	r0, 1ffc6 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1ffc0:	4638      	mov	r0, r7
   1ffc2:	f7ff ffa9 	bl	1ff18 <sys_mem_swap.constprop.0>
}
   1ffc6:	4620      	mov	r0, r4
   1ffc8:	b017      	add	sp, #92	; 0x5c
   1ffca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ffcc <smp_f4>:
{
   1ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffce:	460e      	mov	r6, r1
   1ffd0:	4614      	mov	r4, r2
   1ffd2:	461d      	mov	r5, r3
   1ffd4:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1ffd6:	4601      	mov	r1, r0
   1ffd8:	2220      	movs	r2, #32
   1ffda:	a805      	add	r0, sp, #20
{
   1ffdc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1ffde:	f7f5 fae3 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1ffe2:	2220      	movs	r2, #32
   1ffe4:	4631      	mov	r1, r6
   1ffe6:	a80d      	add	r0, sp, #52	; 0x34
   1ffe8:	f7f5 fade 	bl	155a8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1ffec:	4621      	mov	r1, r4
   1ffee:	2210      	movs	r2, #16
   1fff0:	a801      	add	r0, sp, #4
	m[64] = z;
   1fff2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1fff6:	f7f5 fad7 	bl	155a8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1fffa:	463b      	mov	r3, r7
   1fffc:	2241      	movs	r2, #65	; 0x41
   1fffe:	a905      	add	r1, sp, #20
   20000:	a801      	add	r0, sp, #4
   20002:	f7ff ff25 	bl	1fe50 <bt_smp_aes_cmac>
	if (err) {
   20006:	4604      	mov	r4, r0
   20008:	b910      	cbnz	r0, 20010 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2000a:	4638      	mov	r0, r7
   2000c:	f7ff ff84 	bl	1ff18 <sys_mem_swap.constprop.0>
}
   20010:	4620      	mov	r0, r4
   20012:	b017      	add	sp, #92	; 0x5c
   20014:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020016 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20016:	2301      	movs	r3, #1
   20018:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2001a:	e8d0 2fef 	ldaex	r2, [r0]
   2001e:	431a      	orrs	r2, r3
   20020:	e8c0 2fe1 	stlex	r1, r2, [r0]
   20024:	2900      	cmp	r1, #0
   20026:	d1f8      	bne.n	2001a <atomic_set_bit+0x4>
}
   20028:	4770      	bx	lr

0002002a <smp_keypress_notif>:
{
   2002a:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2002c:	210e      	movs	r1, #14
   2002e:	30c0      	adds	r0, #192	; 0xc0
   20030:	f7ff fff1 	bl	20016 <atomic_set_bit>
}
   20034:	2000      	movs	r0, #0
   20036:	bd08      	pop	{r3, pc}

00020038 <generate_dhkey>:
{
   20038:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2003a:	2107      	movs	r1, #7
{
   2003c:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2003e:	30c4      	adds	r0, #196	; 0xc4
   20040:	f7ff ffe9 	bl	20016 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   20044:	2008      	movs	r0, #8
   20046:	f7f5 fa9b 	bl	15580 <smp_find>
   2004a:	b920      	cbnz	r0, 20056 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   2004c:	4620      	mov	r0, r4
}
   2004e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   20052:	f7f5 bce1 	b.w	15a18 <smp_dhkey_generate>
}
   20056:	2000      	movs	r0, #0
   20058:	bd10      	pop	{r4, pc}

0002005a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2005a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2005c:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   20060:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   20062:	4628      	mov	r0, r5
   20064:	2104      	movs	r1, #4
   20066:	f7ff fe95 	bl	1fd94 <atomic_test_bit>
   2006a:	b168      	cbz	r0, 20088 <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   2006c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2006e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   20070:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   20072:	4608      	mov	r0, r1
   20074:	f7fe febc 	bl	1edf0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   20078:	4604      	mov	r4, r0
   2007a:	b940      	cbnz	r0, 2008e <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2007c:	2104      	movs	r1, #4
   2007e:	4628      	mov	r0, r5
   20080:	f7ff ffc9 	bl	20016 <atomic_set_bit>
}
   20084:	4620      	mov	r0, r4
   20086:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   20088:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2008c:	e7ef      	b.n	2006e <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   2008e:	2101      	movs	r1, #1
   20090:	3008      	adds	r0, #8
   20092:	f7f7 fcbd 	bl	17a10 <net_buf_simple_add>
	hdr->code = op;
   20096:	7006      	strb	r6, [r0, #0]
	return buf;
   20098:	e7f4      	b.n	20084 <smp_create_pdu.constprop.0+0x2a>

0002009a <send_pairing_rsp>:
{
   2009a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2009c:	2102      	movs	r1, #2
{
   2009e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   200a0:	f7ff ffdb 	bl	2005a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   200a4:	4604      	mov	r4, r0
   200a6:	b178      	cbz	r0, 200c8 <send_pairing_rsp+0x2e>
   200a8:	2106      	movs	r1, #6
   200aa:	3008      	adds	r0, #8
   200ac:	f7f7 fcb0 	bl	17a10 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   200b0:	2206      	movs	r2, #6
   200b2:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   200b6:	f7fe f9e3 	bl	1e480 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   200ba:	4628      	mov	r0, r5
   200bc:	2200      	movs	r2, #0
   200be:	4621      	mov	r1, r4
   200c0:	f7f5 fc18 	bl	158f4 <smp_send.constprop.0>
	return 0;
   200c4:	2000      	movs	r0, #0
}
   200c6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   200c8:	2008      	movs	r0, #8
   200ca:	e7fc      	b.n	200c6 <send_pairing_rsp+0x2c>

000200cc <smp_send_pairing_random>:
{
   200cc:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   200ce:	2104      	movs	r1, #4
{
   200d0:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   200d2:	f7ff ffc2 	bl	2005a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   200d6:	4604      	mov	r4, r0
   200d8:	b178      	cbz	r0, 200fa <smp_send_pairing_random+0x2e>
   200da:	2110      	movs	r1, #16
   200dc:	3008      	adds	r0, #8
   200de:	f7f7 fc97 	bl	17a10 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   200e2:	2210      	movs	r2, #16
   200e4:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   200e8:	f7fe f9ca 	bl	1e480 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   200ec:	4628      	mov	r0, r5
   200ee:	2200      	movs	r2, #0
   200f0:	4621      	mov	r1, r4
   200f2:	f7f5 fbff 	bl	158f4 <smp_send.constprop.0>
	return 0;
   200f6:	2000      	movs	r0, #0
}
   200f8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   200fa:	2008      	movs	r0, #8
   200fc:	e7fc      	b.n	200f8 <smp_send_pairing_random+0x2c>

000200fe <sc_smp_send_dhkey_check>:
{
   200fe:	b570      	push	{r4, r5, r6, lr}
   20100:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   20102:	210d      	movs	r1, #13
{
   20104:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   20106:	f7ff ffa8 	bl	2005a <smp_create_pdu.constprop.0>
	if (!buf) {
   2010a:	4604      	mov	r4, r0
   2010c:	b170      	cbz	r0, 2012c <sc_smp_send_dhkey_check+0x2e>
   2010e:	2110      	movs	r1, #16
   20110:	3008      	adds	r0, #8
   20112:	f7f7 fc7d 	bl	17a10 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   20116:	2210      	movs	r2, #16
   20118:	4631      	mov	r1, r6
   2011a:	f7fe f9b1 	bl	1e480 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2011e:	4628      	mov	r0, r5
   20120:	2200      	movs	r2, #0
   20122:	4621      	mov	r1, r4
   20124:	f7f5 fbe6 	bl	158f4 <smp_send.constprop.0>
	return 0;
   20128:	2000      	movs	r0, #0
}
   2012a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2012c:	2008      	movs	r0, #8
   2012e:	e7fc      	b.n	2012a <sc_smp_send_dhkey_check+0x2c>

00020130 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20130:	2301      	movs	r3, #1
   20132:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20136:	43ca      	mvns	r2, r1
{
   20138:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2013a:	e8d0 3fef 	ldaex	r3, [r0]
   2013e:	ea03 0c02 	and.w	ip, r3, r2
   20142:	e8c0 cfee 	stlex	lr, ip, [r0]
   20146:	f1be 0f00 	cmp.w	lr, #0
   2014a:	d1f6      	bne.n	2013a <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2014c:	420b      	tst	r3, r1
}
   2014e:	bf14      	ite	ne
   20150:	2001      	movne	r0, #1
   20152:	2000      	moveq	r0, #0
   20154:	f85d fb04 	ldr.w	pc, [sp], #4

00020158 <smp_reset>:
{
   20158:	b538      	push	{r3, r4, r5, lr}
   2015a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2015c:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   2015e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   20162:	f7fb fde7 	bl	1bd34 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   20166:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   20168:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	smp->method = JUST_WORKS;
   2016c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20170:	e8d0 2fef 	ldaex	r2, [r0]
   20174:	e8c0 3fe1 	stlex	r1, r3, [r0]
   20178:	2900      	cmp	r1, #0
   2017a:	d1f9      	bne.n	20170 <smp_reset+0x18>
   2017c:	34c4      	adds	r4, #196	; 0xc4
   2017e:	e8d4 2fef 	ldaex	r2, [r4]
   20182:	e8c4 3fe1 	stlex	r1, r3, [r4]
   20186:	2900      	cmp	r1, #0
   20188:	d1f9      	bne.n	2017e <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   2018a:	7a6b      	ldrb	r3, [r5, #9]
   2018c:	7aaa      	ldrb	r2, [r5, #10]
   2018e:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   20190:	bf18      	it	ne
   20192:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20194:	78eb      	ldrb	r3, [r5, #3]
   20196:	b923      	cbnz	r3, 201a2 <smp_reset+0x4a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   20198:	210b      	movs	r1, #11
}
   2019a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2019e:	f7ff bf3a 	b.w	20016 <atomic_set_bit>
   201a2:	2101      	movs	r1, #1
   201a4:	e7f9      	b.n	2019a <smp_reset+0x42>

000201a6 <smp_error>:
{
   201a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   201a8:	4606      	mov	r6, r0
   201aa:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   201ac:	f7f6 fad6 	bl	1675c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   201b0:	2105      	movs	r1, #5
   201b2:	4630      	mov	r0, r6
   201b4:	f7ff ff51 	bl	2005a <smp_create_pdu.constprop.0>
	if (!buf) {
   201b8:	4605      	mov	r5, r0
   201ba:	b178      	cbz	r0, 201dc <smp_error+0x36>
   201bc:	2101      	movs	r1, #1
   201be:	3008      	adds	r0, #8
   201c0:	f7f7 fc26 	bl	17a10 <net_buf_simple_add>
	rsp->reason = reason;
   201c4:	7004      	strb	r4, [r0, #0]
   201c6:	2400      	movs	r4, #0
   201c8:	462a      	mov	r2, r5
   201ca:	4623      	mov	r3, r4
   201cc:	2106      	movs	r1, #6
   201ce:	6830      	ldr	r0, [r6, #0]
   201d0:	9400      	str	r4, [sp, #0]
   201d2:	f7fe fe10 	bl	1edf6 <bt_l2cap_send_cb>
	return 0;
   201d6:	4620      	mov	r0, r4
}
   201d8:	b002      	add	sp, #8
   201da:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   201dc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   201e0:	e7fa      	b.n	201d8 <smp_error+0x32>

000201e2 <bt_smp_dhkey_ready>:
{
   201e2:	b570      	push	{r4, r5, r6, lr}
   201e4:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   201e6:	2008      	movs	r0, #8
   201e8:	f7f5 f9ca 	bl	15580 <smp_find>
	if (smp) {
   201ec:	4604      	mov	r4, r0
   201ee:	b1c0      	cbz	r0, 20222 <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   201f0:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   201f4:	2108      	movs	r1, #8
   201f6:	4628      	mov	r0, r5
   201f8:	f7ff fe1f 	bl	1fe3a <atomic_clear_bit>
	if (!dhkey) {
   201fc:	b3be      	cbz	r6, 2026e <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   201fe:	2107      	movs	r1, #7
   20200:	f7ff fe1b 	bl	1fe3a <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   20204:	4631      	mov	r1, r6
   20206:	2220      	movs	r2, #32
   20208:	f204 1057 	addw	r0, r4, #343	; 0x157
   2020c:	f7fe f938 	bl	1e480 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20210:	210a      	movs	r1, #10
   20212:	4628      	mov	r0, r5
   20214:	f7ff fdbe 	bl	1fd94 <atomic_test_bit>
   20218:	b168      	cbz	r0, 20236 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2021a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2021c:	4628      	mov	r0, r5
   2021e:	f7ff fefa 	bl	20016 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   20222:	2007      	movs	r0, #7
   20224:	f7f5 f9ac 	bl	15580 <smp_find>
		if (smp) {
   20228:	4604      	mov	r4, r0
   2022a:	b118      	cbz	r0, 20234 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   2022c:	f7f5 fbf4 	bl	15a18 <smp_dhkey_generate>
			if (err) {
   20230:	4601      	mov	r1, r0
   20232:	b9a8      	cbnz	r0, 20260 <bt_smp_dhkey_ready+0x7e>
}
   20234:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   20236:	2110      	movs	r1, #16
   20238:	4628      	mov	r0, r5
   2023a:	f7ff fdab 	bl	1fd94 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2023e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   20240:	2800      	cmp	r0, #0
   20242:	d1eb      	bne.n	2021c <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   20244:	4628      	mov	r0, r5
   20246:	f7ff fda5 	bl	1fd94 <atomic_test_bit>
   2024a:	2800      	cmp	r0, #0
   2024c:	d0e9      	beq.n	20222 <bt_smp_dhkey_ready+0x40>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2024e:	6823      	ldr	r3, [r4, #0]
			return compute_and_send_master_dhcheck(smp);
   20250:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   20252:	78db      	ldrb	r3, [r3, #3]
   20254:	b943      	cbnz	r3, 20268 <bt_smp_dhkey_ready+0x86>
			return compute_and_send_master_dhcheck(smp);
   20256:	f7f6 f8d3 	bl	16400 <compute_and_send_master_dhcheck>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   2025a:	4601      	mov	r1, r0
		if (err) {
   2025c:	2800      	cmp	r0, #0
   2025e:	d0e0      	beq.n	20222 <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   20260:	4620      	mov	r0, r4
   20262:	f7ff ffa0 	bl	201a6 <smp_error>
   20266:	e7dc      	b.n	20222 <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   20268:	f7f6 f930 	bl	164cc <compute_and_check_and_send_slave_dhcheck>
   2026c:	e7f5      	b.n	2025a <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2026e:	210b      	movs	r1, #11
   20270:	e7f6      	b.n	20260 <bt_smp_dhkey_ready+0x7e>

00020272 <bt_smp_encrypt_change>:
{
   20272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   20274:	4605      	mov	r5, r0
{
   20276:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   20278:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   2027c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2027e:	2101      	movs	r1, #1
   20280:	4628      	mov	r0, r5
   20282:	f7ff fdda 	bl	1fe3a <atomic_clear_bit>
	if (hci_status) {
   20286:	2e00      	cmp	r6, #0
   20288:	d14a      	bne.n	20320 <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   2028a:	7afb      	ldrb	r3, [r7, #11]
   2028c:	2b00      	cmp	r3, #0
   2028e:	d047      	beq.n	20320 <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20290:	2103      	movs	r1, #3
   20292:	f7ff fd7f 	bl	1fd94 <atomic_test_bit>
   20296:	b920      	cbnz	r0, 202a2 <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   20298:	4620      	mov	r0, r4
}
   2029a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   2029e:	f7ff bf5b 	b.w	20158 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   202a2:	2105      	movs	r1, #5
   202a4:	4628      	mov	r0, r5
   202a6:	f7ff fd75 	bl	1fd94 <atomic_test_bit>
   202aa:	b198      	cbz	r0, 202d4 <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   202ac:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   202b0:	071e      	lsls	r6, r3, #28
   202b2:	d507      	bpl.n	202c4 <bt_smp_encrypt_change+0x52>
   202b4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   202b8:	0718      	lsls	r0, r3, #28
   202ba:	d503      	bpl.n	202c4 <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   202bc:	2111      	movs	r1, #17
   202be:	4628      	mov	r0, r5
   202c0:	f7ff fea9 	bl	20016 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   202c4:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   202c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   202cc:	f023 0308 	bic.w	r3, r3, #8
   202d0:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   202d4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   202d8:	07d9      	lsls	r1, r3, #31
   202da:	d519      	bpl.n	20310 <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   202dc:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   202de:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   202e2:	f7ff fe98 	bl	20016 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   202e6:	2102      	movs	r1, #2
   202e8:	4628      	mov	r0, r5
   202ea:	f7ff fe94 	bl	20016 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   202ee:	78fb      	ldrb	r3, [r7, #3]
   202f0:	b913      	cbnz	r3, 202f8 <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   202f2:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   202f6:	b99b      	cbnz	r3, 20320 <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   202f8:	4620      	mov	r0, r4
   202fa:	f7f5 fc77 	bl	15bec <bt_smp_distribute_keys>
   202fe:	b978      	cbnz	r0, 20320 <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   20300:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   20304:	b961      	cbnz	r1, 20320 <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   20306:	4620      	mov	r0, r4
}
   20308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   2030c:	f7f6 ba26 	b.w	1675c <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   20310:	079a      	lsls	r2, r3, #30
   20312:	d501      	bpl.n	20318 <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   20314:	2108      	movs	r1, #8
   20316:	e7e2      	b.n	202de <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   20318:	075b      	lsls	r3, r3, #29
   2031a:	d5e4      	bpl.n	202e6 <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2031c:	210a      	movs	r1, #10
   2031e:	e7de      	b.n	202de <bt_smp_encrypt_change+0x6c>
}
   20320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020322 <smp_c1>:
{
   20322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20326:	4699      	mov	r9, r3
   20328:	b089      	sub	sp, #36	; 0x24
   2032a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2032e:	783b      	ldrb	r3, [r7, #0]
{
   20330:	460c      	mov	r4, r1
	p1[0] = ia->type;
   20332:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   20336:	f898 3000 	ldrb.w	r3, [r8]
{
   2033a:	4611      	mov	r1, r2
   2033c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   2033e:	2207      	movs	r2, #7
{
   20340:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   20342:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   20346:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2034a:	f7fe f899 	bl	1e480 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2034e:	2207      	movs	r2, #7
   20350:	4649      	mov	r1, r9
   20352:	f10d 0009 	add.w	r0, sp, #9
   20356:	f7fe f893 	bl	1e480 <memcpy>
	while (len--) {
   2035a:	4629      	mov	r1, r5
   2035c:	466a      	mov	r2, sp
   2035e:	f104 0010 	add.w	r0, r4, #16
   20362:	42a0      	cmp	r0, r4
   20364:	d127      	bne.n	203b6 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   20366:	462a      	mov	r2, r5
   20368:	4629      	mov	r1, r5
   2036a:	4630      	mov	r0, r6
   2036c:	f7fe fb5d 	bl	1ea2a <bt_encrypt_le>
	if (err) {
   20370:	4604      	mov	r4, r0
   20372:	b9e0      	cbnz	r0, 203ae <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   20374:	2206      	movs	r2, #6
   20376:	f108 0101 	add.w	r1, r8, #1
   2037a:	a804      	add	r0, sp, #16
   2037c:	f7fe f880 	bl	1e480 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   20380:	2206      	movs	r2, #6
   20382:	1c79      	adds	r1, r7, #1
   20384:	f10d 0016 	add.w	r0, sp, #22
   20388:	f7fe f87a 	bl	1e480 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2038c:	2204      	movs	r2, #4
   2038e:	4621      	mov	r1, r4
   20390:	a807      	add	r0, sp, #28
   20392:	f7fe f8a0 	bl	1e4d6 <memset>
	while (len--) {
   20396:	462a      	mov	r2, r5
   20398:	f105 0010 	add.w	r0, r5, #16
   2039c:	ab04      	add	r3, sp, #16
   2039e:	4282      	cmp	r2, r0
   203a0:	d112      	bne.n	203c8 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   203a2:	462a      	mov	r2, r5
   203a4:	4629      	mov	r1, r5
   203a6:	4630      	mov	r0, r6
   203a8:	f7fe fb3f 	bl	1ea2a <bt_encrypt_le>
   203ac:	4604      	mov	r4, r0
}
   203ae:	4620      	mov	r0, r4
   203b0:	b009      	add	sp, #36	; 0x24
   203b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   203b6:	f814 3b01 	ldrb.w	r3, [r4], #1
   203ba:	f812 cb01 	ldrb.w	ip, [r2], #1
   203be:	ea83 030c 	eor.w	r3, r3, ip
   203c2:	f801 3b01 	strb.w	r3, [r1], #1
   203c6:	e7cc      	b.n	20362 <smp_c1+0x40>
   203c8:	f812 1b01 	ldrb.w	r1, [r2], #1
   203cc:	f813 4b01 	ldrb.w	r4, [r3], #1
   203d0:	4061      	eors	r1, r4
   203d2:	f802 1c01 	strb.w	r1, [r2, #-1]
   203d6:	e7e2      	b.n	2039e <smp_c1+0x7c>

000203d8 <legacy_send_pairing_confirm>:
{
   203d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   203da:	2103      	movs	r1, #3
{
   203dc:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   203de:	6804      	ldr	r4, [r0, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   203e0:	f7ff fe3b 	bl	2005a <smp_create_pdu.constprop.0>
	if (!buf) {
   203e4:	4606      	mov	r6, r0
   203e6:	b1c0      	cbz	r0, 2041a <legacy_send_pairing_confirm+0x42>
   203e8:	2110      	movs	r1, #16
   203ea:	3008      	adds	r0, #8
   203ec:	f7f7 fb10 	bl	17a10 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   203f0:	f104 0396 	add.w	r3, r4, #150	; 0x96
   203f4:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   203f6:	9002      	str	r0, [sp, #8]
   203f8:	9301      	str	r3, [sp, #4]
   203fa:	9400      	str	r4, [sp, #0]
   203fc:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   20400:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   20404:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   20408:	f205 1007 	addw	r0, r5, #263	; 0x107
   2040c:	f7ff ff89 	bl	20322 <smp_c1>
   20410:	4604      	mov	r4, r0
   20412:	b120      	cbz	r0, 2041e <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   20414:	4630      	mov	r0, r6
   20416:	f7f7 f9e5 	bl	177e4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2041a:	2008      	movs	r0, #8
   2041c:	e00a      	b.n	20434 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   2041e:	4602      	mov	r2, r0
   20420:	4631      	mov	r1, r6
   20422:	4628      	mov	r0, r5
   20424:	f7f5 fa66 	bl	158f4 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   20428:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   2042c:	4621      	mov	r1, r4
   2042e:	f7ff fd04 	bl	1fe3a <atomic_clear_bit>
	return 0;
   20432:	4620      	mov	r0, r4
}
   20434:	b004      	add	sp, #16
   20436:	bd70      	pop	{r4, r5, r6, pc}

00020438 <legacy_pairing_confirm>:
{
   20438:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2043a:	6803      	ldr	r3, [r0, #0]
{
   2043c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2043e:	78db      	ldrb	r3, [r3, #3]
   20440:	b94b      	cbnz	r3, 20456 <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   20442:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   20444:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   20448:	f7ff fde5 	bl	20016 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   2044c:	4620      	mov	r0, r4
}
   2044e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   20452:	f7ff bfc1 	b.w	203d8 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20456:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   2045a:	210a      	movs	r1, #10
   2045c:	4618      	mov	r0, r3
   2045e:	f7ff fc99 	bl	1fd94 <atomic_test_bit>
   20462:	b908      	cbnz	r0, 20468 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   20464:	2104      	movs	r1, #4
   20466:	e7ed      	b.n	20444 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   20468:	4618      	mov	r0, r3
   2046a:	2100      	movs	r1, #0
   2046c:	f7ff fdd3 	bl	20016 <atomic_set_bit>
}
   20470:	2000      	movs	r0, #0
   20472:	bd10      	pop	{r4, pc}

00020474 <bt_smp_request_ltk>:
{
   20474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20478:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   2047a:	4604      	mov	r4, r0
   2047c:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   20480:	f7f5 f8ec 	bl	1565c <smp_chan_get>
	if (!smp) {
   20484:	4605      	mov	r5, r0
   20486:	2800      	cmp	r0, #0
   20488:	f000 809d 	beq.w	205c6 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   2048c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   20490:	f1b9 0f00 	cmp.w	r9, #0
   20494:	d12d      	bne.n	204f2 <bt_smp_request_ltk+0x7e>
   20496:	e9dd 2300 	ldrd	r2, r3, [sp]
   2049a:	4313      	orrs	r3, r2
   2049c:	d129      	bne.n	204f2 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2049e:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   204a2:	2103      	movs	r1, #3
   204a4:	4640      	mov	r0, r8
   204a6:	f7ff fc75 	bl	1fd94 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   204aa:	b310      	cbz	r0, 204f2 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   204ac:	2101      	movs	r1, #1
   204ae:	4640      	mov	r0, r8
   204b0:	f7ff fc70 	bl	1fd94 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   204b4:	4606      	mov	r6, r0
   204b6:	b1e0      	cbz	r0, 204f2 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   204b8:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   204bc:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
		memcpy(ltk, smp->tk, enc_size);
   204c0:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   204c2:	429c      	cmp	r4, r3
   204c4:	bf28      	it	cs
   204c6:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   204c8:	f205 1107 	addw	r1, r5, #263	; 0x107
   204cc:	4622      	mov	r2, r4
   204ce:	f7fd ffd7 	bl	1e480 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   204d2:	2c0f      	cmp	r4, #15
   204d4:	d805      	bhi.n	204e2 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   204d6:	4649      	mov	r1, r9
   204d8:	f1c4 0210 	rsb	r2, r4, #16
   204dc:	1938      	adds	r0, r7, r4
   204de:	f7fd fffa 	bl	1e4d6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   204e2:	2101      	movs	r1, #1
   204e4:	4640      	mov	r0, r8
   204e6:	f7ff fd96 	bl	20016 <atomic_set_bit>
}
   204ea:	4630      	mov	r0, r6
   204ec:	b003      	add	sp, #12
   204ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   204f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   204f6:	b983      	cbnz	r3, 2051a <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   204f8:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   204fc:	4632      	mov	r2, r6
   204fe:	2020      	movs	r0, #32
   20500:	7a21      	ldrb	r1, [r4, #8]
   20502:	f7f6 fecb 	bl	1729c <bt_keys_find>
   20506:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2050a:	b930      	cbnz	r0, 2051a <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   2050c:	4632      	mov	r2, r6
   2050e:	2001      	movs	r0, #1
   20510:	7a21      	ldrb	r1, [r4, #8]
   20512:	f7f6 fec3 	bl	1729c <bt_keys_find>
   20516:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2051a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2051e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   20522:	b9ce      	cbnz	r6, 20558 <bt_smp_request_ltk+0xe4>
   20524:	e9dd 2300 	ldrd	r2, r3, [sp]
   20528:	4313      	orrs	r3, r2
   2052a:	d115      	bne.n	20558 <bt_smp_request_ltk+0xe4>
   2052c:	2800      	cmp	r0, #0
   2052e:	d03c      	beq.n	205aa <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   20530:	89c3      	ldrh	r3, [r0, #14]
   20532:	069a      	lsls	r2, r3, #26
   20534:	d511      	bpl.n	2055a <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   20536:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   20538:	f100 011a 	add.w	r1, r0, #26
   2053c:	4622      	mov	r2, r4
   2053e:	4638      	mov	r0, r7
   20540:	f7fd ff9e 	bl	1e480 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20544:	2c0f      	cmp	r4, #15
   20546:	d805      	bhi.n	20554 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   20548:	4631      	mov	r1, r6
   2054a:	f1c4 0210 	rsb	r2, r4, #16
   2054e:	1938      	adds	r0, r7, r4
   20550:	f7fd ffc1 	bl	1e4d6 <memset>
		return true;
   20554:	2601      	movs	r6, #1
   20556:	e7c8      	b.n	204ea <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   20558:	b338      	cbz	r0, 205aa <bt_smp_request_ltk+0x136>
   2055a:	89c3      	ldrh	r3, [r0, #14]
   2055c:	07db      	lsls	r3, r3, #31
   2055e:	d524      	bpl.n	205aa <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   20560:	2208      	movs	r2, #8
   20562:	4669      	mov	r1, sp
   20564:	3040      	adds	r0, #64	; 0x40
   20566:	f7fd ff7a 	bl	1e45e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2056a:	b9f0      	cbnz	r0, 205aa <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2056c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20570:	2202      	movs	r2, #2
   20572:	a90a      	add	r1, sp, #40	; 0x28
   20574:	3048      	adds	r0, #72	; 0x48
   20576:	f7fd ff72 	bl	1e45e <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2057a:	4606      	mov	r6, r0
   2057c:	b9a8      	cbnz	r0, 205aa <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   2057e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   20582:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   20584:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   20586:	314a      	adds	r1, #74	; 0x4a
   20588:	4622      	mov	r2, r4
   2058a:	f7fd ff79 	bl	1e480 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2058e:	2c0f      	cmp	r4, #15
   20590:	d805      	bhi.n	2059e <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   20592:	4631      	mov	r1, r6
   20594:	f1c4 0210 	rsb	r2, r4, #16
   20598:	1938      	adds	r0, r7, r4
   2059a:	f7fd ff9c 	bl	1e4d6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2059e:	2101      	movs	r1, #1
   205a0:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   205a4:	f7ff fd37 	bl	20016 <atomic_set_bit>
		return true;
   205a8:	e7d4      	b.n	20554 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   205aa:	210f      	movs	r1, #15
   205ac:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   205b0:	f7ff fbf0 	bl	1fd94 <atomic_test_bit>
   205b4:	b120      	cbz	r0, 205c0 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   205b6:	2202      	movs	r2, #2
   205b8:	2106      	movs	r1, #6
   205ba:	4620      	mov	r0, r4
   205bc:	f7f0 fef6 	bl	113ac <bt_conn_security_changed>
	smp_reset(smp);
   205c0:	4628      	mov	r0, r5
   205c2:	f7ff fdc9 	bl	20158 <smp_reset>
	return false;
   205c6:	2600      	movs	r6, #0
   205c8:	e78f      	b.n	204ea <bt_smp_request_ltk+0x76>

000205ca <bt_smp_sign>:
   205ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
   205ce:	4770      	bx	lr

000205d0 <bt_smp_start_security>:
{
   205d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   205d4:	78c4      	ldrb	r4, [r0, #3]
{
   205d6:	4605      	mov	r5, r0
	switch (conn->role) {
   205d8:	b124      	cbz	r4, 205e4 <bt_smp_start_security+0x14>
   205da:	2c01      	cmp	r4, #1
   205dc:	d03f      	beq.n	2065e <bt_smp_start_security+0x8e>
		return -EINVAL;
   205de:	f06f 0415 	mvn.w	r4, #21
   205e2:	e005      	b.n	205f0 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   205e4:	f7f5 f83a 	bl	1565c <smp_chan_get>
		if (!smp) {
   205e8:	4606      	mov	r6, r0
   205ea:	b928      	cbnz	r0, 205f8 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   205ec:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   205f0:	4620      	mov	r0, r4
   205f2:	b003      	add	sp, #12
   205f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!smp_keys_check(conn)) {
   205f8:	4628      	mov	r0, r5
   205fa:	f7ff fc5f 	bl	1febc <smp_keys_check>
   205fe:	b928      	cbnz	r0, 2060c <bt_smp_start_security+0x3c>
			return smp_send_pairing_req(conn);
   20600:	4628      	mov	r0, r5
}
   20602:	b003      	add	sp, #12
   20604:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   20608:	f7f5 bb84 	b.w	15d14 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2060c:	f106 07c4 	add.w	r7, r6, #196	; 0xc4
   20610:	2103      	movs	r1, #3
   20612:	4638      	mov	r0, r7
   20614:	f7ff fbbe 	bl	1fd94 <atomic_test_bit>
   20618:	b110      	cbz	r0, 20620 <bt_smp_start_security+0x50>
			return -EBUSY;
   2061a:	f06f 040f 	mvn.w	r4, #15
   2061e:	e7e7      	b.n	205f0 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   20620:	2101      	movs	r1, #1
   20622:	4638      	mov	r0, r7
   20624:	f7ff fbb6 	bl	1fd94 <atomic_test_bit>
   20628:	2800      	cmp	r0, #0
   2062a:	d1f6      	bne.n	2061a <bt_smp_start_security+0x4a>
						  conn->le.keys->ltk.rand,
   2062c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   20630:	4628      	mov	r0, r5
   20632:	7b0b      	ldrb	r3, [r1, #12]
   20634:	f101 0218 	add.w	r2, r1, #24
   20638:	9300      	str	r3, [sp, #0]
   2063a:	f101 031a 	add.w	r3, r1, #26
   2063e:	3110      	adds	r1, #16
   20640:	f7fe fa7d 	bl	1eb3e <bt_conn_le_start_encryption>
		if (err) {
   20644:	4604      	mov	r4, r0
   20646:	2800      	cmp	r0, #0
   20648:	d1d2      	bne.n	205f0 <bt_smp_start_security+0x20>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2064a:	210b      	movs	r1, #11
   2064c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   20650:	f7ff fce1 	bl	20016 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20654:	2101      	movs	r1, #1
   20656:	4638      	mov	r0, r7
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   20658:	f7ff fcdd 	bl	20016 <atomic_set_bit>
	return 0;
   2065c:	e7c8      	b.n	205f0 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   2065e:	f7f4 fffd 	bl	1565c <smp_chan_get>
	if (!smp) {
   20662:	4606      	mov	r6, r0
   20664:	2800      	cmp	r0, #0
   20666:	d0c1      	beq.n	205ec <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   20668:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   2066c:	2104      	movs	r1, #4
   2066e:	4640      	mov	r0, r8
   20670:	f7ff fb90 	bl	1fd94 <atomic_test_bit>
   20674:	2800      	cmp	r0, #0
   20676:	d14b      	bne.n	20710 <bt_smp_start_security+0x140>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20678:	2103      	movs	r1, #3
   2067a:	4640      	mov	r0, r8
   2067c:	f7ff fb8a 	bl	1fd94 <atomic_test_bit>
   20680:	2800      	cmp	r0, #0
   20682:	d1ca      	bne.n	2061a <bt_smp_start_security+0x4a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   20684:	4621      	mov	r1, r4
   20686:	4640      	mov	r0, r8
   20688:	f7ff fb84 	bl	1fd94 <atomic_test_bit>
   2068c:	2800      	cmp	r0, #0
   2068e:	d1c4      	bne.n	2061a <bt_smp_start_security+0x4a>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   20690:	7aa8      	ldrb	r0, [r5, #10]
   20692:	f7f5 f947 	bl	15924 <sec_level_reachable.isra.0>
   20696:	b168      	cbz	r0, 206b4 <bt_smp_start_security+0xe4>
	if (!conn->le.keys) {
   20698:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2069c:	b983      	cbnz	r3, 206c0 <bt_smp_start_security+0xf0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2069e:	7a28      	ldrb	r0, [r5, #8]
   206a0:	f105 0188 	add.w	r1, r5, #136	; 0x88
   206a4:	f7f6 fdba 	bl	1721c <bt_keys_get_addr>
   206a8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   206ac:	b940      	cbnz	r0, 206c0 <bt_smp_start_security+0xf0>
			return -ENOMEM;
   206ae:	f06f 040b 	mvn.w	r4, #11
   206b2:	e79d      	b.n	205f0 <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   206b4:	4628      	mov	r0, r5
   206b6:	f7ff fc01 	bl	1febc <smp_keys_check>
   206ba:	2800      	cmp	r0, #0
   206bc:	d1ec      	bne.n	20698 <bt_smp_start_security+0xc8>
   206be:	e78e      	b.n	205de <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   206c0:	4630      	mov	r0, r6
   206c2:	f7f5 f98b 	bl	159dc <smp_init>
   206c6:	4604      	mov	r4, r0
   206c8:	b110      	cbz	r0, 206d0 <bt_smp_start_security+0x100>
		return -ENOBUFS;
   206ca:	f06f 0436 	mvn.w	r4, #54	; 0x36
   206ce:	e78f      	b.n	205f0 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   206d0:	210b      	movs	r1, #11
   206d2:	4630      	mov	r0, r6
   206d4:	f7ff fcc1 	bl	2005a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   206d8:	4607      	mov	r7, r0
   206da:	2800      	cmp	r0, #0
   206dc:	d0f5      	beq.n	206ca <bt_smp_start_security+0xfa>
   206de:	2101      	movs	r1, #1
   206e0:	3008      	adds	r0, #8
   206e2:	f7f7 f995 	bl	17a10 <net_buf_simple_add>
   206e6:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   206e8:	2009      	movs	r0, #9
   206ea:	f7f5 f83b 	bl	15764 <get_auth.constprop.0>
   206ee:	4623      	mov	r3, r4
   206f0:	f889 0000 	strb.w	r0, [r9]
   206f4:	463a      	mov	r2, r7
   206f6:	2106      	movs	r1, #6
   206f8:	4628      	mov	r0, r5
   206fa:	9400      	str	r4, [sp, #0]
   206fc:	f7fe fb7b 	bl	1edf6 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   20700:	210f      	movs	r1, #15
   20702:	4640      	mov	r0, r8
   20704:	f7ff fc87 	bl	20016 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   20708:	2101      	movs	r1, #1
   2070a:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   2070e:	e7a3      	b.n	20658 <bt_smp_start_security+0x88>
		return -EIO;
   20710:	f06f 0404 	mvn.w	r4, #4
   20714:	e76c      	b.n	205f0 <bt_smp_start_security+0x20>

00020716 <id_add>:
	bt_id_add(keys);
   20716:	f7ef b8af 	b.w	f878 <bt_id_add>

0002071a <bt_keys_get_type>:
{
   2071a:	b570      	push	{r4, r5, r6, lr}
   2071c:	4604      	mov	r4, r0
   2071e:	460d      	mov	r5, r1
   20720:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   20722:	f7f6 fdbb 	bl	1729c <bt_keys_find>
	if (keys) {
   20726:	b938      	cbnz	r0, 20738 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   20728:	4631      	mov	r1, r6
   2072a:	4628      	mov	r0, r5
   2072c:	f7f6 fd76 	bl	1721c <bt_keys_get_addr>
	if (!keys) {
   20730:	b110      	cbz	r0, 20738 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   20732:	89c3      	ldrh	r3, [r0, #14]
   20734:	431c      	orrs	r4, r3
   20736:	81c4      	strh	r4, [r0, #14]
}
   20738:	bd70      	pop	{r4, r5, r6, pc}

0002073a <bt_keys_add_type>:
	keys->keys |= type;
   2073a:	89c3      	ldrh	r3, [r0, #14]
   2073c:	4319      	orrs	r1, r3
   2073e:	81c1      	strh	r1, [r0, #14]
}
   20740:	4770      	bx	lr

00020742 <fixed_data_unref>:
}
   20742:	4770      	bx	lr

00020744 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20744:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   20746:	6849      	ldr	r1, [r1, #4]
   20748:	6809      	ldr	r1, [r1, #0]
   2074a:	f7f6 bf1d 	b.w	17588 <net_buf_alloc_len>

0002074e <net_buf_simple_init_with_data>:
	buf->size  = size;
   2074e:	b292      	uxth	r2, r2
	buf->__buf = data;
   20750:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   20752:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   20754:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   20756:	8082      	strh	r2, [r0, #4]
}
   20758:	4770      	bx	lr

0002075a <net_buf_simple_push_u8>:
{
   2075a:	b510      	push	{r4, lr}
   2075c:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2075e:	2101      	movs	r1, #1
   20760:	f7f7 f8fe 	bl	17960 <net_buf_simple_push>
	*data = val;
   20764:	7004      	strb	r4, [r0, #0]
}
   20766:	bd10      	pop	{r4, pc}

00020768 <net_buf_simple_pull_u8>:
{
   20768:	b510      	push	{r4, lr}
	val = buf->data[0];
   2076a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   2076c:	2101      	movs	r1, #1
	val = buf->data[0];
   2076e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   20770:	f7f7 f914 	bl	1799c <net_buf_simple_pull>
}
   20774:	4620      	mov	r0, r4
   20776:	bd10      	pop	{r4, pc}

00020778 <net_buf_simple_pull_le16>:
{
   20778:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2077a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2077c:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2077e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20780:	f7f7 f90c 	bl	1799c <net_buf_simple_pull>
}
   20784:	4620      	mov	r0, r4
   20786:	bd10      	pop	{r4, pc}

00020788 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   20788:	6802      	ldr	r2, [r0, #0]
   2078a:	6880      	ldr	r0, [r0, #8]
}
   2078c:	1a10      	subs	r0, r2, r0
   2078e:	4770      	bx	lr

00020790 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   20790:	8883      	ldrh	r3, [r0, #4]
   20792:	88c2      	ldrh	r2, [r0, #6]
   20794:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   20796:	6803      	ldr	r3, [r0, #0]
   20798:	6880      	ldr	r0, [r0, #8]
   2079a:	1a18      	subs	r0, r3, r0
}
   2079c:	1a10      	subs	r0, r2, r0
   2079e:	4770      	bx	lr

000207a0 <net_buf_simple_add_mem>:
{
   207a0:	b538      	push	{r3, r4, r5, lr}
   207a2:	460d      	mov	r5, r1
   207a4:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   207a6:	4611      	mov	r1, r2
   207a8:	f7f7 f932 	bl	17a10 <net_buf_simple_add>
   207ac:	4622      	mov	r2, r4
   207ae:	4629      	mov	r1, r5
}
   207b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   207b4:	f7fd be64 	b.w	1e480 <memcpy>

000207b8 <net_buf_simple_add_u8>:
{
   207b8:	b510      	push	{r4, lr}
   207ba:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   207bc:	2101      	movs	r1, #1
   207be:	f7f7 f927 	bl	17a10 <net_buf_simple_add>
	*u8 = val;
   207c2:	7004      	strb	r4, [r0, #0]
}
   207c4:	bd10      	pop	{r4, pc}

000207c6 <net_buf_simple_add_le16>:
{
   207c6:	b510      	push	{r4, lr}
   207c8:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   207ca:	2102      	movs	r1, #2
   207cc:	f7f7 f920 	bl	17a10 <net_buf_simple_add>
	dst[0] = val;
   207d0:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   207d2:	0a24      	lsrs	r4, r4, #8
   207d4:	7044      	strb	r4, [r0, #1]
}
   207d6:	bd10      	pop	{r4, pc}

000207d8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   207d8:	6843      	ldr	r3, [r0, #4]
}
   207da:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   207dc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   207de:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   207e0:	600b      	str	r3, [r1, #0]
}
   207e2:	4770      	bx	lr

000207e4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   207e4:	6843      	ldr	r3, [r0, #4]
   207e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   207e8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   207ea:	4042      	eors	r2, r0
   207ec:	400a      	ands	r2, r1
   207ee:	4042      	eors	r2, r0
    p_reg->OUT = value;
   207f0:	605a      	str	r2, [r3, #4]
}
   207f2:	2000      	movs	r0, #0
   207f4:	4770      	bx	lr

000207f6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   207f6:	6843      	ldr	r3, [r0, #4]
}
   207f8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   207fa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   207fc:	6099      	str	r1, [r3, #8]
}
   207fe:	4770      	bx	lr

00020800 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20800:	6843      	ldr	r3, [r0, #4]
}
   20802:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20804:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   20806:	60d9      	str	r1, [r3, #12]
}
   20808:	4770      	bx	lr

0002080a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2080a:	6843      	ldr	r3, [r0, #4]
}
   2080c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2080e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20810:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   20812:	404b      	eors	r3, r1
    p_reg->OUT = value;
   20814:	6053      	str	r3, [r2, #4]
}
   20816:	4770      	bx	lr

00020818 <nrf_gpio_cfg_sense_set>:
{
   20818:	b513      	push	{r0, r1, r4, lr}
   2081a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2081c:	a801      	add	r0, sp, #4
{
   2081e:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20820:	f7f7 f95a 	bl	17ad8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   20824:	9b01      	ldr	r3, [sp, #4]
   20826:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2082a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2082e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   20832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   20836:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2083a:	b002      	add	sp, #8
   2083c:	bd10      	pop	{r4, pc}

0002083e <cfg_level_pins>:
{
   2083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   20842:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   20844:	2500      	movs	r5, #0
	return port->data;
   20846:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   20848:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2084c:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2084e:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   20852:	4313      	orrs	r3, r2
   20854:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   20858:	b90c      	cbnz	r4, 2085e <cfg_level_pins+0x20>
}
   2085a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2085e:	4226      	tst	r6, r4
   20860:	d010      	beq.n	20884 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   20862:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20864:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   20868:	40e9      	lsrs	r1, r5
   2086a:	f001 0101 	and.w	r1, r1, #1
   2086e:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20872:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   20876:	b2c9      	uxtb	r1, r1
   20878:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2087c:	f7ff ffcc 	bl	20818 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   20880:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   20884:	3501      	adds	r5, #1
		bit <<= 1;
   20886:	0076      	lsls	r6, r6, #1
   20888:	e7e6      	b.n	20858 <cfg_level_pins+0x1a>

0002088a <check_level_trigger_pins>:
{
   2088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   2088e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   20890:	2700      	movs	r7, #0
	return port->data;
   20892:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   20894:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   20898:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2089a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2089e:	430a      	orrs	r2, r1
   208a0:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   208a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   208a8:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   208aa:	6915      	ldr	r5, [r2, #16]
   208ac:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   208ae:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   208b2:	b914      	cbnz	r4, 208ba <check_level_trigger_pins+0x30>
}
   208b4:	4628      	mov	r0, r5
   208b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   208ba:	4234      	tst	r4, r6
   208bc:	d00a      	beq.n	208d4 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   208be:	f898 0008 	ldrb.w	r0, [r8, #8]
   208c2:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   208c6:	2100      	movs	r1, #0
   208c8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   208cc:	f7ff ffa4 	bl	20818 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   208d0:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   208d4:	3701      	adds	r7, #1
		bit <<= 1;
   208d6:	0076      	lsls	r6, r6, #1
   208d8:	e7eb      	b.n	208b2 <check_level_trigger_pins+0x28>

000208da <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   208da:	6883      	ldr	r3, [r0, #8]
   208dc:	689b      	ldr	r3, [r3, #8]
   208de:	4718      	bx	r3

000208e0 <vipm_nrf_max_id_val_get>:
}
   208e0:	2000      	movs	r0, #0
   208e2:	4770      	bx	lr

000208e4 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   208e4:	b508      	push	{r3, lr}
   208e6:	b139      	cbz	r1, 208f8 <vipm_nrf_1_set_enabled+0x14>
   208e8:	202a      	movs	r0, #42	; 0x2a
   208ea:	f7ed f859 	bl	d9a0 <arch_irq_enable>
   208ee:	2001      	movs	r0, #1
   208f0:	f7f8 fcf0 	bl	192d4 <nrfx_ipc_receive_event_enable>
   208f4:	2000      	movs	r0, #0
   208f6:	bd08      	pop	{r3, pc}
   208f8:	2001      	movs	r0, #1
   208fa:	f7f8 fd09 	bl	19310 <nrfx_ipc_receive_event_disable>
   208fe:	e7f9      	b.n	208f4 <vipm_nrf_1_set_enabled+0x10>

00020900 <flash_nrf_write_protection>:
}
   20900:	2000      	movs	r0, #0
   20902:	4770      	bx	lr

00020904 <is_regular_addr_valid>:
{
   20904:	b538      	push	{r3, r4, r5, lr}
   20906:	4604      	mov	r4, r0
   20908:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2090a:	f000 f9c7 	bl	20c9c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2090e:	4284      	cmp	r4, r0
   20910:	d209      	bcs.n	20926 <is_regular_addr_valid+0x22>
   20912:	2c00      	cmp	r4, #0
   20914:	db07      	blt.n	20926 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   20916:	42a8      	cmp	r0, r5
   20918:	d305      	bcc.n	20926 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2091a:	442c      	add	r4, r5
	    len > flash_size ||
   2091c:	4284      	cmp	r4, r0
   2091e:	bf8c      	ite	hi
   20920:	2000      	movhi	r0, #0
   20922:	2001      	movls	r0, #1
}
   20924:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   20926:	2000      	movs	r0, #0
   20928:	e7fc      	b.n	20924 <is_regular_addr_valid+0x20>

0002092a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2092a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2092e:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   20930:	6883      	ldr	r3, [r0, #8]
{
   20932:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   20934:	695b      	ldr	r3, [r3, #20]
   20936:	4669      	mov	r1, sp
{
   20938:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2093a:	aa01      	add	r2, sp, #4
   2093c:	4798      	blx	r3

	while (layout_size--) {
   2093e:	e9dd 1000 	ldrd	r1, r0, [sp]
   20942:	2300      	movs	r3, #0
	off_t end = 0;
   20944:	461d      	mov	r5, r3
	off_t group_offs = 0;
   20946:	469e      	mov	lr, r3
	size_t page_count = 0;
   20948:	469c      	mov	ip, r3
   2094a:	3801      	subs	r0, #1
	while (layout_size--) {
   2094c:	1c42      	adds	r2, r0, #1
   2094e:	d102      	bne.n	20956 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   20950:	f06f 0015 	mvn.w	r0, #21
   20954:	e019      	b.n	2098a <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   20956:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   20958:	b1d7      	cbz	r7, 20990 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   2095a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   2095e:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   20962:	42a5      	cmp	r5, r4
   20964:	f100 30ff 	add.w	r0, r0, #4294967295
   20968:	dd17      	ble.n	2099a <flash_get_page_info+0x70>
   2096a:	b103      	cbz	r3, 2096e <flash_get_page_info+0x44>
   2096c:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   2096e:	9b00      	ldr	r3, [sp, #0]
   20970:	685b      	ldr	r3, [r3, #4]
   20972:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   20974:	b177      	cbz	r7, 20994 <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   20976:	eba4 040e 	sub.w	r4, r4, lr
   2097a:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   2097e:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   20980:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   20984:	4464      	add	r4, ip
			info->start_offset = group_offs +
   20986:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   20988:	60b4      	str	r4, [r6, #8]
}
   2098a:	b002      	add	sp, #8
   2098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   20990:	4415      	add	r5, r2
   20992:	e7e6      	b.n	20962 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   20994:	eba4 040c 	sub.w	r4, r4, ip
   20998:	e7f1      	b.n	2097e <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   2099a:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2099c:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   2099e:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   209a2:	3108      	adds	r1, #8
   209a4:	2301      	movs	r3, #1
   209a6:	e7d1      	b.n	2094c <flash_get_page_info+0x22>

000209a8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   209a8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   209aa:	2201      	movs	r2, #1
   209ac:	f7ff bfbd 	b.w	2092a <flash_get_page_info>

000209b0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   209b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   209b4:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   209b6:	6883      	ldr	r3, [r0, #8]
{
   209b8:	b086      	sub	sp, #24
   209ba:	4688      	mov	r8, r1
   209bc:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   209be:	695b      	ldr	r3, [r3, #20]
   209c0:	aa02      	add	r2, sp, #8
   209c2:	a901      	add	r1, sp, #4
   209c4:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   209c6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   209c8:	4625      	mov	r5, r4
   209ca:	9b02      	ldr	r3, [sp, #8]
   209cc:	42ab      	cmp	r3, r5
   209ce:	d802      	bhi.n	209d6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   209d0:	b006      	add	sp, #24
   209d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   209d6:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   209d8:	9f01      	ldr	r7, [sp, #4]
   209da:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   209de:	687b      	ldr	r3, [r7, #4]
   209e0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   209e2:	683a      	ldr	r2, [r7, #0]
   209e4:	eb0a 0306 	add.w	r3, sl, r6
   209e8:	42b2      	cmp	r2, r6
   209ea:	d802      	bhi.n	209f2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   209ec:	469a      	mov	sl, r3
   209ee:	3501      	adds	r5, #1
   209f0:	e7eb      	b.n	209ca <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   209f2:	4649      	mov	r1, r9
   209f4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   209f6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   209f8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   209fa:	47c0      	blx	r8
   209fc:	2800      	cmp	r0, #0
   209fe:	d0e7      	beq.n	209d0 <flash_page_foreach+0x20>
			off += page_info.size;
   20a00:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   20a02:	3601      	adds	r6, #1
			off += page_info.size;
   20a04:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   20a06:	e7ec      	b.n	209e2 <flash_page_foreach+0x32>

00020a08 <uarte_nrfx_config_get>:
{
   20a08:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   20a0a:	68c2      	ldr	r2, [r0, #12]
   20a0c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   20a10:	e883 0003 	stmia.w	r3, {r0, r1}
}
   20a14:	2000      	movs	r0, #0
   20a16:	4770      	bx	lr

00020a18 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   20a18:	6843      	ldr	r3, [r0, #4]
   20a1a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   20a1c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   20a20:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   20a24:	4770      	bx	lr

00020a26 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   20a26:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   20a28:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   20a2a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a2c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20a30:	b148      	cbz	r0, 20a46 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a32:	2000      	movs	r0, #0
	*c = data->rx_data;
   20a34:	7d52      	ldrb	r2, [r2, #21]
   20a36:	700a      	strb	r2, [r1, #0]
   20a38:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20a3c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20a40:	2201      	movs	r2, #1
   20a42:	601a      	str	r2, [r3, #0]
	return 0;
   20a44:	4770      	bx	lr
		return -1;
   20a46:	f04f 30ff 	mov.w	r0, #4294967295
}
   20a4a:	4770      	bx	lr

00020a4c <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   20a4c:	6843      	ldr	r3, [r0, #4]
{
   20a4e:	4602      	mov	r2, r0
	return config->uarte_regs;
   20a50:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a52:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20a56:	b148      	cbz	r0, 20a6c <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a58:	2000      	movs	r0, #0
	return dev->data;
   20a5a:	68d2      	ldr	r2, [r2, #12]
   20a5c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20a60:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20a64:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   20a66:	7d52      	ldrb	r2, [r2, #21]
   20a68:	700a      	strb	r2, [r1, #0]
   20a6a:	6018      	str	r0, [r3, #0]
}
   20a6c:	4770      	bx	lr

00020a6e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   20a6e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   20a70:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   20a72:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   20a74:	f04f 0020 	mov.w	r0, #32
   20a78:	f3ef 8311 	mrs	r3, BASEPRI
   20a7c:	f380 8811 	msr	BASEPRI, r0
   20a80:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   20a84:	2000      	movs	r0, #0
   20a86:	68c9      	ldr	r1, [r1, #12]
   20a88:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   20a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   20a8e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   20a92:	f383 8811 	msr	BASEPRI, r3
   20a96:	f3bf 8f6f 	isb	sy
}
   20a9a:	4770      	bx	lr

00020a9c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   20a9c:	2201      	movs	r2, #1
   20a9e:	68c3      	ldr	r3, [r0, #12]
   20aa0:	68db      	ldr	r3, [r3, #12]
   20aa2:	739a      	strb	r2, [r3, #14]
}
   20aa4:	4770      	bx	lr

00020aa6 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   20aa6:	68c3      	ldr	r3, [r0, #12]
   20aa8:	68db      	ldr	r3, [r3, #12]
   20aaa:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   20aac:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   20ab0:	b962      	cbnz	r2, 20acc <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   20ab2:	6842      	ldr	r2, [r0, #4]
   20ab4:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ab6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   20aba:	b140      	cbz	r0, 20ace <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   20abc:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   20ac0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   20ac4:	d003      	beq.n	20ace <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   20ac6:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   20ac8:	6119      	str	r1, [r3, #16]
   20aca:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   20acc:	2000      	movs	r0, #0
}
   20ace:	4770      	bx	lr

00020ad0 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   20ad0:	6843      	ldr	r3, [r0, #4]
   20ad2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ad4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   20ad8:	3800      	subs	r0, #0
   20ada:	bf18      	it	ne
   20adc:	2001      	movne	r0, #1
   20ade:	4770      	bx	lr

00020ae0 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   20ae0:	2210      	movs	r2, #16
	return config->uarte_regs;
   20ae2:	6843      	ldr	r3, [r0, #4]
   20ae4:	681b      	ldr	r3, [r3, #0]
   20ae6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20aea:	4770      	bx	lr

00020aec <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   20aec:	2210      	movs	r2, #16
	return config->uarte_regs;
   20aee:	6843      	ldr	r3, [r0, #4]
   20af0:	681b      	ldr	r3, [r3, #0]
   20af2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20af6:	4770      	bx	lr

00020af8 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   20af8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   20afc:	6843      	ldr	r3, [r0, #4]
   20afe:	681b      	ldr	r3, [r3, #0]
   20b00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20b04:	4770      	bx	lr

00020b06 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   20b06:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   20b0a:	6843      	ldr	r3, [r0, #4]
   20b0c:	681b      	ldr	r3, [r3, #0]
   20b0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20b12:	4770      	bx	lr

00020b14 <uarte_nrfx_irq_update>:
}
   20b14:	2001      	movs	r0, #1
   20b16:	4770      	bx	lr

00020b18 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   20b18:	68c3      	ldr	r3, [r0, #12]
   20b1a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   20b1c:	e9c3 1200 	strd	r1, r2, [r3]
}
   20b20:	4770      	bx	lr

00020b22 <uarte_nrfx_irq_is_pending>:
{
   20b22:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   20b24:	6843      	ldr	r3, [r0, #4]
{
   20b26:	4604      	mov	r4, r0
	return config->uarte_regs;
   20b28:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   20b2a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   20b2e:	025b      	lsls	r3, r3, #9
   20b30:	d405      	bmi.n	20b3e <uarte_nrfx_irq_is_pending+0x1c>
   20b32:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   20b36:	f010 0010 	ands.w	r0, r0, #16
   20b3a:	d106      	bne.n	20b4a <uarte_nrfx_irq_is_pending+0x28>
}
   20b3c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   20b3e:	f7ff ffb2 	bl	20aa6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   20b42:	2800      	cmp	r0, #0
   20b44:	d0f5      	beq.n	20b32 <uarte_nrfx_irq_is_pending+0x10>
		||
   20b46:	2001      	movs	r0, #1
   20b48:	e7f8      	b.n	20b3c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   20b4a:	4620      	mov	r0, r4
   20b4c:	f7ff ffc0 	bl	20ad0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   20b50:	3800      	subs	r0, #0
   20b52:	bf18      	it	ne
   20b54:	2001      	movne	r0, #1
   20b56:	e7f1      	b.n	20b3c <uarte_nrfx_irq_is_pending+0x1a>

00020b58 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   20b58:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   20b5a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20b5c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   20b60:	b938      	cbnz	r0, 20b72 <is_tx_ready.isra.0+0x1a>
   20b62:	799b      	ldrb	r3, [r3, #6]
   20b64:	b933      	cbnz	r3, 20b74 <is_tx_ready.isra.0+0x1c>
   20b66:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   20b6a:	3800      	subs	r0, #0
   20b6c:	bf18      	it	ne
   20b6e:	2001      	movne	r0, #1
   20b70:	4770      	bx	lr
   20b72:	2001      	movs	r0, #1
}
   20b74:	4770      	bx	lr

00020b76 <uarte_nrfx_fifo_fill>:
{
   20b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   20b78:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   20b7a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   20b7c:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   20b7e:	68f3      	ldr	r3, [r6, #12]
   20b80:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20b82:	3310      	adds	r3, #16
   20b84:	4294      	cmp	r4, r2
   20b86:	bfa8      	it	ge
   20b88:	4614      	movge	r4, r2
   20b8a:	2201      	movs	r2, #1
   20b8c:	e8d3 7fef 	ldaex	r7, [r3]
   20b90:	2f00      	cmp	r7, #0
   20b92:	d104      	bne.n	20b9e <uarte_nrfx_fifo_fill+0x28>
   20b94:	e8c3 2fec 	stlex	ip, r2, [r3]
   20b98:	f1bc 0f00 	cmp.w	ip, #0
   20b9c:	d1f6      	bne.n	20b8c <uarte_nrfx_fifo_fill+0x16>
   20b9e:	bf0c      	ite	eq
   20ba0:	4613      	moveq	r3, r2
   20ba2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   20ba4:	d01d      	beq.n	20be2 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   20ba6:	461c      	mov	r4, r3
}
   20ba8:	4620      	mov	r0, r4
   20baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   20bac:	68f2      	ldr	r2, [r6, #12]
   20bae:	5ccf      	ldrb	r7, [r1, r3]
   20bb0:	6892      	ldr	r2, [r2, #8]
   20bb2:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   20bb4:	3301      	adds	r3, #1
   20bb6:	42a3      	cmp	r3, r4
   20bb8:	dbf8      	blt.n	20bac <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   20bba:	f04f 0320 	mov.w	r3, #32
   20bbe:	f3ef 8111 	mrs	r1, BASEPRI
   20bc2:	f383 8811 	msr	BASEPRI, r3
   20bc6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   20bca:	6840      	ldr	r0, [r0, #4]
   20bcc:	f7ff ffc4 	bl	20b58 <is_tx_ready.isra.0>
   20bd0:	68f3      	ldr	r3, [r6, #12]
   20bd2:	b940      	cbnz	r0, 20be6 <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   20bd4:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   20bd6:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   20bd8:	f381 8811 	msr	BASEPRI, r1
   20bdc:	f3bf 8f6f 	isb	sy
	return len;
   20be0:	e7e2      	b.n	20ba8 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   20be2:	2300      	movs	r3, #0
   20be4:	e7e7      	b.n	20bb6 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20be6:	689b      	ldr	r3, [r3, #8]
   20be8:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20bec:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   20bee:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20bf2:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   20bf6:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   20bfa:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   20bfe:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20c02:	2301      	movs	r3, #1
   20c04:	60ab      	str	r3, [r5, #8]
}
   20c06:	e7e7      	b.n	20bd8 <uarte_nrfx_fifo_fill+0x62>

00020c08 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   20c08:	6843      	ldr	r3, [r0, #4]
{
   20c0a:	b410      	push	{r4}
	return config->uarte_regs;
   20c0c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   20c0e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   20c12:	05d2      	lsls	r2, r2, #23
   20c14:	d518      	bpl.n	20c48 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20c16:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   20c1a:	b1aa      	cbz	r2, 20c48 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   20c1c:	f04f 0120 	mov.w	r1, #32
   20c20:	f3ef 8211 	mrs	r2, BASEPRI
   20c24:	f381 8811 	msr	BASEPRI, r1
   20c28:	f3bf 8f6f 	isb	sy
   20c2c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   20c30:	b131      	cbz	r1, 20c40 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20c32:	2100      	movs	r1, #0
   20c34:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   20c38:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20c3c:	2101      	movs	r1, #1
   20c3e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   20c40:	f382 8811 	msr	BASEPRI, r2
   20c44:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   20c48:	68c2      	ldr	r2, [r0, #12]
   20c4a:	68d2      	ldr	r2, [r2, #12]
   20c4c:	b15a      	cbz	r2, 20c66 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20c4e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   20c52:	b151      	cbz	r1, 20c6a <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   20c54:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   20c56:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   20c58:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   20c5a:	b134      	cbz	r4, 20c6a <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   20c5c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   20c60:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   20c64:	7391      	strb	r1, [r2, #14]
}
   20c66:	bc10      	pop	{r4}
   20c68:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20c6a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   20c6e:	b121      	cbz	r1, 20c7a <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20c70:	2100      	movs	r1, #0
   20c72:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   20c76:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   20c7a:	6813      	ldr	r3, [r2, #0]
   20c7c:	2b00      	cmp	r3, #0
   20c7e:	d0f2      	beq.n	20c66 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   20c80:	6851      	ldr	r1, [r2, #4]
}
   20c82:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   20c84:	4718      	bx	r3

00020c86 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   20c86:	2101      	movs	r1, #1
   20c88:	f7f8 b828 	b.w	18cdc <dk_set_led>

00020c8c <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   20c8c:	2100      	movs	r1, #0
   20c8e:	f7f8 b825 	b.w	18cdc <dk_set_led>

00020c92 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   20c92:	f7f8 b8a3 	b.w	18ddc <SystemCoreClockUpdate>

00020c96 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   20c96:	4700      	bx	r0

00020c98 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20c98:	f000 bcb8 	b.w	2160c <z_impl_k_busy_wait>

00020c9c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   20c9c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   20ca0:	4770      	bx	lr

00020ca2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   20ca2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   20ca6:	4770      	bx	lr

00020ca8 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   20ca8:	f44f 7080 	mov.w	r0, #256	; 0x100
   20cac:	4770      	bx	lr

00020cae <metal_device_open>:
{
   20cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20cb0:	460c      	mov	r4, r1
   20cb2:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   20cb4:	4606      	mov	r6, r0
   20cb6:	b918      	cbnz	r0, 20cc0 <metal_device_open+0x12>
		return -EINVAL;
   20cb8:	f06f 0015 	mvn.w	r0, #21
}
   20cbc:	b002      	add	sp, #8
   20cbe:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   20cc0:	f7fd fba0 	bl	1e404 <strlen>
   20cc4:	2800      	cmp	r0, #0
   20cc6:	d0f7      	beq.n	20cb8 <metal_device_open+0xa>
   20cc8:	2c00      	cmp	r4, #0
   20cca:	d0f5      	beq.n	20cb8 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   20ccc:	4620      	mov	r0, r4
   20cce:	f7fd fb99 	bl	1e404 <strlen>
   20cd2:	2800      	cmp	r0, #0
   20cd4:	d0f0      	beq.n	20cb8 <metal_device_open+0xa>
   20cd6:	2d00      	cmp	r5, #0
   20cd8:	d0ee      	beq.n	20cb8 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   20cda:	4630      	mov	r0, r6
   20cdc:	a901      	add	r1, sp, #4
   20cde:	f7f8 fbf7 	bl	194d0 <metal_bus_find>
	if (error)
   20ce2:	2800      	cmp	r0, #0
   20ce4:	d1ea      	bne.n	20cbc <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   20ce6:	9801      	ldr	r0, [sp, #4]
   20ce8:	6883      	ldr	r3, [r0, #8]
   20cea:	b11b      	cbz	r3, 20cf4 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   20cec:	462a      	mov	r2, r5
   20cee:	4621      	mov	r1, r4
   20cf0:	4798      	blx	r3
	if (error)
   20cf2:	e7e3      	b.n	20cbc <metal_device_open+0xe>
		return -ENODEV;
   20cf4:	f06f 0012 	mvn.w	r0, #18
   20cf8:	e7e0      	b.n	20cbc <metal_device_open+0xe>

00020cfa <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   20cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20cfc:	6804      	ldr	r4, [r0, #0]
   20cfe:	6885      	ldr	r5, [r0, #8]
		: NULL);
   20d00:	1c66      	adds	r6, r4, #1
   20d02:	d00f      	beq.n	20d24 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20d04:	42a9      	cmp	r1, r5
   20d06:	d232      	bcs.n	20d6e <metal_io_block_read+0x74>
		: NULL);
   20d08:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20d0a:	185e      	adds	r6, r3, r1
   20d0c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20d0e:	bf88      	it	hi
   20d10:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   20d12:	6a05      	ldr	r5, [r0, #32]
   20d14:	b155      	cbz	r5, 20d2c <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   20d16:	9300      	str	r3, [sp, #0]
   20d18:	2305      	movs	r3, #5
   20d1a:	47a8      	blx	r5
   20d1c:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   20d1e:	4618      	mov	r0, r3
   20d20:	b002      	add	sp, #8
   20d22:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   20d24:	42a9      	cmp	r1, r5
   20d26:	d222      	bcs.n	20d6e <metal_io_block_read+0x74>
   20d28:	2400      	movs	r4, #0
   20d2a:	e7ee      	b.n	20d0a <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   20d2c:	f3bf 8f5b 	dmb	ish
		while ( len && (
   20d30:	4621      	mov	r1, r4
   20d32:	4618      	mov	r0, r3
   20d34:	2800      	cmp	r0, #0
   20d36:	d0f2      	beq.n	20d1e <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   20d38:	ea42 0401 	orr.w	r4, r2, r1
   20d3c:	07a4      	lsls	r4, r4, #30
   20d3e:	d10a      	bne.n	20d56 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20d40:	2803      	cmp	r0, #3
   20d42:	dc0e      	bgt.n	20d62 <metal_io_block_read+0x68>
   20d44:	3901      	subs	r1, #1
   20d46:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   20d48:	4282      	cmp	r2, r0
   20d4a:	d0e8      	beq.n	20d1e <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   20d4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   20d50:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   20d54:	e7f8      	b.n	20d48 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   20d56:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   20d5a:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   20d5c:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   20d60:	e7e8      	b.n	20d34 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   20d62:	f851 4b04 	ldr.w	r4, [r1], #4
   20d66:	3804      	subs	r0, #4
   20d68:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20d6c:	e7e8      	b.n	20d40 <metal_io_block_read+0x46>
		return -ERANGE;
   20d6e:	f06f 0325 	mvn.w	r3, #37	; 0x25
   20d72:	e7d4      	b.n	20d1e <metal_io_block_read+0x24>

00020d74 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   20d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20d76:	6804      	ldr	r4, [r0, #0]
   20d78:	6885      	ldr	r5, [r0, #8]
		: NULL);
   20d7a:	1c66      	adds	r6, r4, #1
   20d7c:	d00e      	beq.n	20d9c <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20d7e:	42a9      	cmp	r1, r5
   20d80:	d230      	bcs.n	20de4 <metal_io_block_write+0x70>
		: NULL);
   20d82:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20d84:	185e      	adds	r6, r3, r1
   20d86:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20d88:	bf88      	it	hi
   20d8a:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   20d8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   20d8e:	b94d      	cbnz	r5, 20da4 <metal_io_block_write+0x30>
   20d90:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   20d92:	b991      	cbnz	r1, 20dba <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   20d94:	f3bf 8f5b 	dmb	ish
	retlen = len;
   20d98:	4618      	mov	r0, r3
   20d9a:	e006      	b.n	20daa <metal_io_block_write+0x36>
	if (offset >= io->size)
   20d9c:	42a9      	cmp	r1, r5
   20d9e:	d221      	bcs.n	20de4 <metal_io_block_write+0x70>
   20da0:	2400      	movs	r4, #0
   20da2:	e7ef      	b.n	20d84 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   20da4:	9300      	str	r3, [sp, #0]
   20da6:	2305      	movs	r3, #5
   20da8:	47a8      	blx	r5
	}
	return retlen;
}
   20daa:	b002      	add	sp, #8
   20dac:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   20dae:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   20db2:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   20db4:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   20db8:	e7eb      	b.n	20d92 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   20dba:	ea44 0002 	orr.w	r0, r4, r2
   20dbe:	0780      	lsls	r0, r0, #30
   20dc0:	d1f5      	bne.n	20dae <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20dc2:	2903      	cmp	r1, #3
   20dc4:	dc08      	bgt.n	20dd8 <metal_io_block_write+0x64>
   20dc6:	3a01      	subs	r2, #1
   20dc8:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   20dca:	428c      	cmp	r4, r1
   20dcc:	d0e2      	beq.n	20d94 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   20dce:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   20dd2:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   20dd6:	e7f8      	b.n	20dca <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   20dd8:	f852 0b04 	ldr.w	r0, [r2], #4
   20ddc:	3904      	subs	r1, #4
   20dde:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20de2:	e7ee      	b.n	20dc2 <metal_io_block_write+0x4e>
		return -ERANGE;
   20de4:	f06f 0025 	mvn.w	r0, #37	; 0x25
   20de8:	e7df      	b.n	20daa <metal_io_block_write+0x36>

00020dea <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   20dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20dec:	6804      	ldr	r4, [r0, #0]
   20dee:	461d      	mov	r5, r3
		: NULL);
   20df0:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   20df2:	6883      	ldr	r3, [r0, #8]
		: NULL);
   20df4:	d00e      	beq.n	20e14 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20df6:	4299      	cmp	r1, r3
   20df8:	d22d      	bcs.n	20e56 <metal_io_block_set+0x6c>
		: NULL);
   20dfa:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20dfc:	186e      	adds	r6, r5, r1
   20dfe:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   20e00:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   20e02:	bf88      	it	hi
   20e04:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   20e06:	b186      	cbz	r6, 20e2a <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   20e08:	2305      	movs	r3, #5
   20e0a:	9500      	str	r5, [sp, #0]
   20e0c:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   20e0e:	4628      	mov	r0, r5
   20e10:	b002      	add	sp, #8
   20e12:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   20e14:	4299      	cmp	r1, r3
   20e16:	d21e      	bcs.n	20e56 <metal_io_block_set+0x6c>
   20e18:	2400      	movs	r4, #0
   20e1a:	e7ef      	b.n	20dfc <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   20e1c:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   20e20:	3b01      	subs	r3, #1
   20e22:	b923      	cbnz	r3, 20e2e <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   20e24:	f3bf 8f5b 	dmb	ish
   20e28:	e7f1      	b.n	20e0e <metal_io_block_set+0x24>
   20e2a:	462b      	mov	r3, r5
   20e2c:	e7f9      	b.n	20e22 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   20e2e:	07a1      	lsls	r1, r4, #30
   20e30:	d1f4      	bne.n	20e1c <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   20e32:	0611      	lsls	r1, r2, #24
   20e34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   20e38:	4311      	orrs	r1, r2
   20e3a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20e3e:	2b03      	cmp	r3, #3
   20e40:	dc05      	bgt.n	20e4e <metal_io_block_set+0x64>
   20e42:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   20e44:	429c      	cmp	r4, r3
   20e46:	d0ed      	beq.n	20e24 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   20e48:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   20e4c:	e7fa      	b.n	20e44 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   20e4e:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20e52:	3b04      	subs	r3, #4
   20e54:	e7f3      	b.n	20e3e <metal_io_block_set+0x54>
		return -ERANGE;
   20e56:	f06f 0525 	mvn.w	r5, #37	; 0x25
   20e5a:	e7d8      	b.n	20e0e <metal_io_block_set+0x24>

00020e5c <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   20e5c:	2000      	movs	r0, #0
   20e5e:	4770      	bx	lr

00020e60 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   20e60:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   20e62:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   20e64:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   20e66:	b984      	cbnz	r4, 20e8a <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   20e68:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   20e6a:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   20e6c:	291f      	cmp	r1, #31
   20e6e:	bf98      	it	ls
   20e70:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   20e74:	b165      	cbz	r5, 20e90 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   20e76:	6881      	ldr	r1, [r0, #8]
   20e78:	428b      	cmp	r3, r1
   20e7a:	d209      	bcs.n	20e90 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   20e7c:	6900      	ldr	r0, [r0, #16]
   20e7e:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   20e80:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   20e84:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   20e86:	bc30      	pop	{r4, r5}
   20e88:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   20e8a:	4623      	mov	r3, r4
}
   20e8c:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   20e8e:	4718      	bx	r3
			: METAL_BAD_PHYS);
   20e90:	f04f 30ff 	mov.w	r0, #4294967295
   20e94:	e7f7      	b.n	20e86 <metal_io_phys+0x26>

00020e96 <virtqueue_create>:
{
   20e96:	b570      	push	{r4, r5, r6, lr}
   20e98:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   20e9a:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   20e9c:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   20e9e:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   20ea2:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   20ea4:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   20ea6:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20ea8:	1c96      	adds	r6, r2, #2
   20eaa:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   20eac:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   20eb0:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   20eb4:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20eb6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   20eba:	1c6e      	adds	r6, r5, #1
   20ebc:	4433      	add	r3, r6
   20ebe:	426d      	negs	r5, r5
   20ec0:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   20ec2:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20ec4:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   20ec6:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   20eca:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   20ecc:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20ece:	b96b      	cbnz	r3, 20eec <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   20ed0:	3a01      	subs	r2, #1
   20ed2:	4293      	cmp	r3, r2
   20ed4:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   20ed8:	db0a      	blt.n	20ef0 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20eda:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   20edc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20ee0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   20ee4:	7393      	strb	r3, [r2, #14]
   20ee6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   20eea:	73d3      	strb	r3, [r2, #15]
}
   20eec:	2000      	movs	r0, #0
   20eee:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   20ef0:	3301      	adds	r3, #1
   20ef2:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   20ef4:	e7ed      	b.n	20ed2 <virtqueue_create+0x3c>

00020ef6 <virtqueue_add_buffer>:
{
   20ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20efa:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   20efc:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   20f00:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20f02:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20f04:	46ba      	mov	sl, r7
{
   20f06:	b085      	sub	sp, #20
	needed = readable + writable;
   20f08:	18d6      	adds	r6, r2, r3
{
   20f0a:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   20f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20f0e:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   20f12:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   20f14:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   20f16:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   20f18:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20f1a:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   20f1e:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20f20:	42be      	cmp	r6, r7
   20f22:	dc19      	bgt.n	20f58 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   20f24:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20f26:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   20f28:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20f2a:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   20f2c:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   20f2e:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20f30:	1e51      	subs	r1, r2, #1
   20f32:	885a      	ldrh	r2, [r3, #2]
}
   20f34:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   20f36:	400a      	ands	r2, r1
   20f38:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   20f3c:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   20f40:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   20f44:	69e2      	ldr	r2, [r4, #28]
   20f46:	8853      	ldrh	r3, [r2, #2]
   20f48:	3301      	adds	r3, #1
   20f4a:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   20f4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   20f4e:	3301      	adds	r3, #1
   20f50:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   20f52:	b005      	add	sp, #20
   20f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   20f58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   20f5a:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   20f5c:	f858 1c04 	ldr.w	r1, [r8, #-4]
   20f60:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   20f64:	9302      	str	r3, [sp, #8]
   20f66:	6803      	ldr	r3, [r0, #0]
   20f68:	9203      	str	r2, [sp, #12]
   20f6a:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   20f6c:	6883      	ldr	r3, [r0, #8]
   20f6e:	f108 0808 	add.w	r8, r8, #8
   20f72:	4299      	cmp	r1, r3
   20f74:	bf28      	it	cs
   20f76:	f04f 31ff 	movcs.w	r1, #4294967295
   20f7a:	f7ff ff71 	bl	20e60 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20f7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   20f82:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   20f84:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   20f88:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   20f8c:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   20f8e:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20f90:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   20f94:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   20f96:	bfb6      	itet	lt
   20f98:	2201      	movlt	r2, #1
		dp->flags = 0;
   20f9a:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   20f9e:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   20fa0:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   20fa2:	bfd8      	it	le
   20fa4:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20fa6:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   20faa:	bfdc      	itt	le
   20fac:	f042 0202 	orrle.w	r2, r2, #2
   20fb0:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20fb2:	89ed      	ldrh	r5, [r5, #14]
   20fb4:	e7b4      	b.n	20f20 <virtqueue_add_buffer+0x2a>

00020fb6 <virtqueue_get_buffer>:
{
   20fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   20fb8:	b350      	cbz	r0, 21010 <virtqueue_get_buffer+0x5a>
   20fba:	6a05      	ldr	r5, [r0, #32]
   20fbc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   20fbe:	886c      	ldrh	r4, [r5, #2]
   20fc0:	429c      	cmp	r4, r3
   20fc2:	d030      	beq.n	21026 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20fc4:	1c5c      	adds	r4, r3, #1
   20fc6:	85c4      	strh	r4, [r0, #46]	; 0x2e
   20fc8:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   20fca:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20fce:	3c01      	subs	r4, #1
   20fd0:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   20fd2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   20fd6:	686b      	ldr	r3, [r5, #4]
   20fd8:	b29e      	uxth	r6, r3
	if (len)
   20fda:	b109      	cbz	r1, 20fe0 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   20fdc:	68ad      	ldr	r5, [r5, #8]
   20fde:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   20fe0:	f8d0 c018 	ldr.w	ip, [r0, #24]
   20fe4:	b29b      	uxth	r3, r3
   20fe6:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   20fea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   20fee:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   20ff0:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   20ff2:	442f      	add	r7, r5
	dxp->ndescs--;
   20ff4:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   20ff6:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   20ff8:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   20ffa:	898d      	ldrh	r5, [r1, #12]
   20ffc:	076f      	lsls	r7, r5, #29
   20ffe:	d50e      	bpl.n	2101e <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   21000:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   21002:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   21004:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   21006:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   21008:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2100a:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2100c:	b102      	cbz	r2, 21010 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2100e:	8014      	strh	r4, [r2, #0]
}
   21010:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   21012:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   21014:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   21016:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   21018:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2101c:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2101e:	898d      	ldrh	r5, [r1, #12]
   21020:	07ed      	lsls	r5, r5, #31
   21022:	d4f6      	bmi.n	21012 <virtqueue_get_buffer+0x5c>
   21024:	e7ec      	b.n	21000 <virtqueue_get_buffer+0x4a>
		return NULL;
   21026:	2000      	movs	r0, #0
   21028:	e7f2      	b.n	21010 <virtqueue_get_buffer+0x5a>

0002102a <virtqueue_get_available_buffer>:
{
   2102a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2102e:	f3bf 8f5b 	dmb	ish
{
   21032:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   21034:	69c2      	ldr	r2, [r0, #28]
{
   21036:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   21038:	8853      	ldrh	r3, [r2, #2]
   2103a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   2103c:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2103e:	428b      	cmp	r3, r1
   21040:	d045      	beq.n	210ce <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   21042:	1c4b      	adds	r3, r1, #1
   21044:	8603      	strh	r3, [r0, #48]	; 0x30
   21046:	8943      	ldrh	r3, [r0, #10]
   21048:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   2104c:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2104e:	400b      	ands	r3, r1
   21050:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   21054:	889a      	ldrh	r2, [r3, #4]
   21056:	b293      	uxth	r3, r2
   21058:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2105a:	6982      	ldr	r2, [r0, #24]
   2105c:	011b      	lsls	r3, r3, #4
   2105e:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   21062:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   21066:	bb5b      	cbnz	r3, 210c0 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   21068:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2106c:	1c62      	adds	r2, r4, #1
   2106e:	bf09      	itett	eq
   21070:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   21074:	ea09 0404 	andne.w	r4, r9, r4
   21078:	681c      	ldreq	r4, [r3, #0]
   2107a:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   2107e:	4621      	mov	r1, r4
   21080:	4640      	mov	r0, r8
   21082:	f7ff feed 	bl	20e60 <metal_io_phys>
   21086:	4581      	cmp	r9, r0
   21088:	d009      	beq.n	2109e <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   2108a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2108e:	3301      	adds	r3, #1
   21090:	441c      	add	r4, r3
		} while (offset < io->size);
   21092:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21096:	429c      	cmp	r4, r3
   21098:	d3f1      	bcc.n	2107e <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   2109a:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2109e:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   210a2:	1c43      	adds	r3, r0, #1
   210a4:	d011      	beq.n	210ca <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   210a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   210aa:	42a3      	cmp	r3, r4
   210ac:	d90d      	bls.n	210ca <virtqueue_get_available_buffer+0xa0>
		: NULL);
   210ae:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   210b0:	8832      	ldrh	r2, [r6, #0]
   210b2:	69ab      	ldr	r3, [r5, #24]
   210b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   210b8:	689b      	ldr	r3, [r3, #8]
   210ba:	603b      	str	r3, [r7, #0]
}
   210bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   210c0:	4649      	mov	r1, r9
   210c2:	4640      	mov	r0, r8
   210c4:	4798      	blx	r3
   210c6:	4604      	mov	r4, r0
   210c8:	e7e9      	b.n	2109e <virtqueue_get_available_buffer+0x74>
		: NULL);
   210ca:	2000      	movs	r0, #0
   210cc:	e7f0      	b.n	210b0 <virtqueue_get_available_buffer+0x86>
		return NULL;
   210ce:	2000      	movs	r0, #0
   210d0:	e7f4      	b.n	210bc <virtqueue_get_available_buffer+0x92>

000210d2 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   210d2:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   210d4:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   210d6:	6912      	ldr	r2, [r2, #16]
   210d8:	0092      	lsls	r2, r2, #2
   210da:	d515      	bpl.n	21108 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   210dc:	b94b      	cbnz	r3, 210f2 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   210de:	69c2      	ldr	r2, [r0, #28]
   210e0:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   210e2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   210e4:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   210e6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   210ea:	1a1b      	subs	r3, r3, r0
   210ec:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   210ee:	8093      	strh	r3, [r2, #4]
   210f0:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   210f2:	2b01      	cmp	r3, #1
   210f4:	d10e      	bne.n	21114 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   210f6:	6a02      	ldr	r2, [r0, #32]
   210f8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   210fa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   210fc:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   210fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   21102:	1a1b      	subs	r3, r3, r0
   21104:	3b01      	subs	r3, #1
   21106:	e7f2      	b.n	210ee <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   21108:	b92b      	cbnz	r3, 21116 <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2110a:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2110c:	8813      	ldrh	r3, [r2, #0]
   2110e:	f043 0301 	orr.w	r3, r3, #1
   21112:	8013      	strh	r3, [r2, #0]
}
   21114:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   21116:	2b01      	cmp	r3, #1
   21118:	d1fc      	bne.n	21114 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2111a:	6a02      	ldr	r2, [r0, #32]
   2111c:	e7f6      	b.n	2110c <virtqueue_disable_cb+0x3a>

0002111e <virtqueue_kick>:
{
   2111e:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   21120:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   21124:	6803      	ldr	r3, [r0, #0]
{
   21126:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   21128:	691a      	ldr	r2, [r3, #16]
   2112a:	699b      	ldr	r3, [r3, #24]
   2112c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   21130:	d019      	beq.n	21166 <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   21132:	b97b      	cbnz	r3, 21154 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   21134:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   21136:	6a02      	ldr	r2, [r0, #32]
   21138:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   2113a:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2113c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   21140:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   21142:	1a9b      	subs	r3, r3, r2
   21144:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   21146:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   21148:	b29b      	uxth	r3, r3
   2114a:	429a      	cmp	r2, r3
   2114c:	d813      	bhi.n	21176 <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   2114e:	2300      	movs	r3, #0
   21150:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   21152:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   21154:	2b01      	cmp	r3, #1
   21156:	d1fa      	bne.n	2114e <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   21158:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2115a:	69c2      	ldr	r2, [r0, #28]
   2115c:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   2115e:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   21160:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   21164:	e7ec      	b.n	21140 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   21166:	b963      	cbnz	r3, 21182 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   21168:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   2116a:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2116c:	43db      	mvns	r3, r3
   2116e:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   21172:	2b00      	cmp	r3, #0
   21174:	d0eb      	beq.n	2114e <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   21176:	6923      	ldr	r3, [r4, #16]
   21178:	2b00      	cmp	r3, #0
   2117a:	d0e8      	beq.n	2114e <virtqueue_kick+0x30>
		vq->notify(vq);
   2117c:	4620      	mov	r0, r4
   2117e:	4798      	blx	r3
   21180:	e7e5      	b.n	2114e <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   21182:	2b01      	cmp	r3, #1
   21184:	d1e3      	bne.n	2114e <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   21186:	69c3      	ldr	r3, [r0, #28]
   21188:	e7ef      	b.n	2116a <virtqueue_kick+0x4c>

0002118a <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2118a:	69c2      	ldr	r2, [r0, #28]
   2118c:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   2118e:	8853      	ldrh	r3, [r2, #2]
   21190:	428b      	cmp	r3, r1
   21192:	d00a      	beq.n	211aa <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   21194:	8943      	ldrh	r3, [r0, #10]
   21196:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   21198:	400b      	ands	r3, r1
   2119a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2119e:	889a      	ldrh	r2, [r3, #4]
   211a0:	6983      	ldr	r3, [r0, #24]
   211a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   211a6:	6898      	ldr	r0, [r3, #8]
	return len;
   211a8:	4770      	bx	lr
		return 0;
   211aa:	2000      	movs	r0, #0
}
   211ac:	4770      	bx	lr

000211ae <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   211ae:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   211b2:	68c3      	ldr	r3, [r0, #12]
   211b4:	b103      	cbz	r3, 211b8 <virtqueue_notification+0xa>
		vq->callback(vq);
   211b6:	4718      	bx	r3
}
   211b8:	4770      	bx	lr

000211ba <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   211ba:	f04f 32ff 	mov.w	r2, #4294967295
   211be:	f04f 33ff 	mov.w	r3, #4294967295
   211c2:	f7fa bb21 	b.w	1b808 <z_impl_k_sem_take>

000211c6 <rpmsg_unregister_endpoint>:
{
   211c6:	b570      	push	{r4, r5, r6, lr}
   211c8:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   211ca:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   211cc:	f105 0658 	add.w	r6, r5, #88	; 0x58
   211d0:	4630      	mov	r0, r6
   211d2:	f7ff fff2 	bl	211ba <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   211d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   211d8:	1c5a      	adds	r2, r3, #1
   211da:	d010      	beq.n	211fe <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   211dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   211e0:	2b7f      	cmp	r3, #127	; 0x7f
   211e2:	d80c      	bhi.n	211fe <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   211e4:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   211e6:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   211e8:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   211ea:	f003 031f 	and.w	r3, r3, #31
   211ee:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   211f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   211f6:	ea22 0203 	bic.w	r2, r2, r3
   211fa:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   211fe:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   21202:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   21206:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   21208:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   2120a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2120e:	2300      	movs	r3, #0
   21210:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   21212:	4630      	mov	r0, r6
}
   21214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21218:	f7fa baba 	b.w	1b790 <z_impl_k_sem_give>

0002121c <rpmsg_send_ns_message>:
{
   2121c:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   2121e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   21220:	b08c      	sub	sp, #48	; 0x30
   21222:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   21224:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   21226:	2220      	movs	r2, #32
   21228:	4601      	mov	r1, r0
   2122a:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2122c:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2122e:	f7fd f8d7 	bl	1e3e0 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   21232:	2328      	movs	r3, #40	; 0x28
   21234:	2201      	movs	r2, #1
   21236:	4620      	mov	r0, r4
   21238:	e9cd 3200 	strd	r3, r2, [sp]
   2123c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2123e:	2235      	movs	r2, #53	; 0x35
   21240:	ab02      	add	r3, sp, #8
   21242:	f7f8 fa71 	bl	19728 <rpmsg_send_offchannel_raw>
}
   21246:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2124a:	b00c      	add	sp, #48	; 0x30
   2124c:	bd10      	pop	{r4, pc}

0002124e <rpmsg_get_endpoint>:
{
   2124e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21252:	4680      	mov	r8, r0
   21254:	4689      	mov	r9, r1
   21256:	4615      	mov	r5, r2
   21258:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2125a:	6807      	ldr	r7, [r0, #0]
   2125c:	45b8      	cmp	r8, r7
   2125e:	d101      	bne.n	21264 <rpmsg_get_endpoint+0x16>
	return NULL;
   21260:	2400      	movs	r4, #0
   21262:	e021      	b.n	212a8 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   21264:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   21266:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2126a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2126c:	d006      	beq.n	2127c <rpmsg_get_endpoint+0x2e>
   2126e:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   21270:	d01a      	beq.n	212a8 <rpmsg_get_endpoint+0x5a>
		if (name)
   21272:	f1b9 0f00 	cmp.w	r9, #0
   21276:	d106      	bne.n	21286 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   21278:	683f      	ldr	r7, [r7, #0]
   2127a:	e7ef      	b.n	2125c <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   2127c:	3301      	adds	r3, #1
   2127e:	d1f8      	bne.n	21272 <rpmsg_get_endpoint+0x24>
   21280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21282:	42b3      	cmp	r3, r6
   21284:	e7f4      	b.n	21270 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   21286:	2220      	movs	r2, #32
   21288:	4649      	mov	r1, r9
   2128a:	4620      	mov	r0, r4
   2128c:	f7fd f8d6 	bl	1e43c <strncmp>
		if (!name || !name_match)
   21290:	2800      	cmp	r0, #0
   21292:	d1f1      	bne.n	21278 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   21294:	1c72      	adds	r2, r6, #1
   21296:	d002      	beq.n	2129e <rpmsg_get_endpoint+0x50>
   21298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2129a:	42b3      	cmp	r3, r6
   2129c:	d004      	beq.n	212a8 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2129e:	1c6b      	adds	r3, r5, #1
   212a0:	d1ea      	bne.n	21278 <rpmsg_get_endpoint+0x2a>
   212a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   212a4:	3301      	adds	r3, #1
   212a6:	d1e7      	bne.n	21278 <rpmsg_get_endpoint+0x2a>
}
   212a8:	4620      	mov	r0, r4
   212aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000212ae <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   212ae:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   212b0:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   212b4:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   212b8:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   212ba:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   212bc:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   212be:	6013      	str	r3, [r2, #0]
}
   212c0:	4770      	bx	lr

000212c2 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   212c2:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   212c4:	4604      	mov	r4, r0
   212c6:	b190      	cbz	r0, 212ee <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   212c8:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   212ca:	b183      	cbz	r3, 212ee <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   212cc:	7802      	ldrb	r2, [r0, #0]
   212ce:	b14a      	cbz	r2, 212e4 <rpmsg_destroy_ept+0x22>
   212d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   212d4:	b133      	cbz	r3, 212e4 <rpmsg_destroy_ept+0x22>
   212d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   212d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   212dc:	d302      	bcc.n	212e4 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   212de:	2101      	movs	r1, #1
   212e0:	f7ff ff9c 	bl	2121c <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   212e4:	4620      	mov	r0, r4
}
   212e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   212ea:	f7ff bf6c 	b.w	211c6 <rpmsg_unregister_endpoint>
}
   212ee:	bd10      	pop	{r4, pc}

000212f0 <rpmsg_virtio_tx_callback>:
}
   212f0:	4770      	bx	lr

000212f2 <k_sem_give>:
   212f2:	f7fa ba4d 	b.w	1b790 <z_impl_k_sem_give>

000212f6 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   212f6:	f04f 32ff 	mov.w	r2, #4294967295
   212fa:	f04f 33ff 	mov.w	r3, #4294967295
   212fe:	f7fa ba83 	b.w	1b808 <z_impl_k_sem_take>

00021302 <rpmsg_virtio_ns_callback>:
{
   21302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   21306:	2a28      	cmp	r2, #40	; 0x28
{
   21308:	4680      	mov	r8, r0
   2130a:	460e      	mov	r6, r1
   2130c:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   2130e:	d12b      	bne.n	21368 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   21310:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   21312:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   21314:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   21318:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2131a:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2131c:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2131e:	1a71      	subs	r1, r6, r1
   21320:	42a1      	cmp	r1, r4
   21322:	bf28      	it	cs
   21324:	f04f 31ff 	movcs.w	r1, #4294967295
   21328:	f7ff fce7 	bl	20cfa <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2132c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   21330:	f8d6 9020 	ldr.w	r9, [r6, #32]
   21334:	4638      	mov	r0, r7
   21336:	f7ff ffde 	bl	212f6 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2133a:	464b      	mov	r3, r9
   2133c:	f04f 32ff 	mov.w	r2, #4294967295
   21340:	4669      	mov	r1, sp
   21342:	4628      	mov	r0, r5
   21344:	f7ff ff83 	bl	2124e <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   21348:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2134a:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2134c:	07db      	lsls	r3, r3, #31
   2134e:	d50f      	bpl.n	21370 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   21350:	b110      	cbz	r0, 21358 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   21352:	f04f 33ff 	mov.w	r3, #4294967295
   21356:	6283      	str	r3, [r0, #40]	; 0x28
   21358:	4638      	mov	r0, r7
   2135a:	f7ff ffca 	bl	212f2 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2135e:	b11c      	cbz	r4, 21368 <rpmsg_virtio_ns_callback+0x66>
   21360:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21362:	b10b      	cbz	r3, 21368 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   21364:	4640      	mov	r0, r8
   21366:	4798      	blx	r3
}
   21368:	2000      	movs	r0, #0
   2136a:	b009      	add	sp, #36	; 0x24
   2136c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   21370:	b950      	cbnz	r0, 21388 <rpmsg_virtio_ns_callback+0x86>
   21372:	4638      	mov	r0, r7
   21374:	f7ff ffbd 	bl	212f2 <k_sem_give>
			if (rdev->ns_bind_cb)
   21378:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2137a:	2b00      	cmp	r3, #0
   2137c:	d0f4      	beq.n	21368 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   2137e:	464a      	mov	r2, r9
   21380:	4669      	mov	r1, sp
   21382:	4628      	mov	r0, r5
   21384:	4798      	blx	r3
   21386:	e7ef      	b.n	21368 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   21388:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   2138c:	4638      	mov	r0, r7
   2138e:	f7ff ffb0 	bl	212f2 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   21392:	e7e9      	b.n	21368 <rpmsg_virtio_ns_callback+0x66>

00021394 <rpmsg_virtio_get_rx_buffer>:
{
   21394:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   21396:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   21398:	4613      	mov	r3, r2
   2139a:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   2139c:	b925      	cbnz	r5, 213a8 <rpmsg_virtio_get_rx_buffer+0x14>
}
   2139e:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   213a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   213a4:	f7ff be07 	b.w	20fb6 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   213a8:	2d01      	cmp	r5, #1
   213aa:	d106      	bne.n	213ba <rpmsg_virtio_get_rx_buffer+0x26>
}
   213ac:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   213ae:	460a      	mov	r2, r1
   213b0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   213b4:	4619      	mov	r1, r3
   213b6:	f7ff be38 	b.w	2102a <virtqueue_get_available_buffer>
}
   213ba:	2000      	movs	r0, #0
   213bc:	bc30      	pop	{r4, r5}
   213be:	4770      	bx	lr

000213c0 <rpmsg_virtio_rx_callback>:
{
   213c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   213c4:	6803      	ldr	r3, [r0, #0]
{
   213c6:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   213c8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   213ca:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   213ce:	4638      	mov	r0, r7
   213d0:	f7ff ff91 	bl	212f6 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   213d4:	4630      	mov	r0, r6
   213d6:	f10d 020a 	add.w	r2, sp, #10
   213da:	a903      	add	r1, sp, #12
   213dc:	f7ff ffda 	bl	21394 <rpmsg_virtio_get_rx_buffer>
   213e0:	4604      	mov	r4, r0
   213e2:	4638      	mov	r0, r7
   213e4:	f7ff ff85 	bl	212f2 <k_sem_give>
	while (rp_hdr) {
   213e8:	b914      	cbnz	r4, 213f0 <rpmsg_virtio_rx_callback+0x30>
}
   213ea:	b006      	add	sp, #24
   213ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   213f0:	4638      	mov	r0, r7
   213f2:	f7ff ff80 	bl	212f6 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   213f6:	f04f 33ff 	mov.w	r3, #4294967295
   213fa:	2100      	movs	r1, #0
   213fc:	4630      	mov	r0, r6
   213fe:	6862      	ldr	r2, [r4, #4]
   21400:	f7ff ff25 	bl	2124e <rpmsg_get_endpoint>
   21404:	4605      	mov	r5, r0
   21406:	4638      	mov	r0, r7
   21408:	f7ff ff73 	bl	212f2 <k_sem_give>
		if (ept) {
   2140c:	b185      	cbz	r5, 21430 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   2140e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   21410:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   21412:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   21414:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   21416:	bf08      	it	eq
   21418:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2141a:	89a2      	ldrh	r2, [r4, #12]
   2141c:	9100      	str	r1, [sp, #0]
   2141e:	4628      	mov	r0, r5
   21420:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   21424:	f104 0110 	add.w	r1, r4, #16
   21428:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   2142a:	2800      	cmp	r0, #0
   2142c:	da00      	bge.n	21430 <rpmsg_virtio_rx_callback+0x70>
   2142e:	e7fe      	b.n	2142e <rpmsg_virtio_rx_callback+0x6e>
   21430:	4638      	mov	r0, r7
   21432:	f7ff ff60 	bl	212f6 <__metal_mutex_acquire>
   21436:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   21438:	9b03      	ldr	r3, [sp, #12]
   2143a:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   2143c:	b9b2      	cbnz	r2, 2146c <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2143e:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   21440:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   21444:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   21448:	2301      	movs	r3, #1
   2144a:	a904      	add	r1, sp, #16
   2144c:	f7ff fd53 	bl	20ef6 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   21450:	4630      	mov	r0, r6
   21452:	f10d 020a 	add.w	r2, sp, #10
   21456:	a903      	add	r1, sp, #12
   21458:	f7ff ff9c 	bl	21394 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   2145c:	4604      	mov	r4, r0
   2145e:	2800      	cmp	r0, #0
   21460:	d1bf      	bne.n	213e2 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   21462:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   21466:	f7ff fe5a 	bl	2111e <virtqueue_kick>
   2146a:	e7ba      	b.n	213e2 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   2146c:	2a01      	cmp	r2, #1
   2146e:	d1ef      	bne.n	21450 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   21470:	461a      	mov	r2, r3
   21472:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   21476:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   2147a:	f7f8 f939 	bl	196f0 <virtqueue_add_consumed_buffer>
   2147e:	e7e7      	b.n	21450 <rpmsg_virtio_rx_callback+0x90>

00021480 <_rpmsg_virtio_get_buffer_size>:
{
   21480:	b508      	push	{r3, lr}
   21482:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   21484:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   21486:	b14b      	cbz	r3, 2149c <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   21488:	2b01      	cmp	r3, #1
   2148a:	d10a      	bne.n	214a2 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   2148c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   21490:	f7ff fe7b 	bl	2118a <virtqueue_get_desc_size>
   21494:	3810      	subs	r0, #16
   21496:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   2149a:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   2149c:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   214a0:	e7fb      	b.n	2149a <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   214a2:	2000      	movs	r0, #0
	return length;
   214a4:	e7f9      	b.n	2149a <_rpmsg_virtio_get_buffer_size+0x1a>

000214a6 <rpmsg_virtio_shm_pool_get_buffer>:
{
   214a6:	4603      	mov	r3, r0
	if (shpool->avail < size)
   214a8:	6842      	ldr	r2, [r0, #4]
{
   214aa:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   214ac:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   214ae:	bf29      	itett	cs
   214b0:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   214b2:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   214b4:	1a84      	subcs	r4, r0, r2
   214b6:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   214b8:	bf22      	ittt	cs
   214ba:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   214bc:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   214be:	605a      	strcs	r2, [r3, #4]
}
   214c0:	bd10      	pop	{r4, pc}

000214c2 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   214c2:	b110      	cbz	r0, 214ca <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   214c4:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   214c8:	6001      	str	r1, [r0, #0]
}
   214ca:	4770      	bx	lr

000214cc <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   214cc:	f7fc b91f 	b.w	1d70e <z_clock_idle_exit>

000214d0 <k_heap_init>:
{
   214d0:	b410      	push	{r4}
   214d2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   214d6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   214da:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   214dc:	f7e9 b9c2 	b.w	a864 <sys_heap_init>

000214e0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   214e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   214e4:	428b      	cmp	r3, r1
   214e6:	d001      	beq.n	214ec <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   214e8:	f7f9 bf20 	b.w	1b32c <z_set_prio>
}
   214ec:	2000      	movs	r0, #0
   214ee:	4770      	bx	lr

000214f0 <z_impl_k_mutex_init>:
{
   214f0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   214f2:	2000      	movs	r0, #0
   214f4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   214f8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   214fc:	4770      	bx	lr

000214fe <z_queue_node_peek>:
{
   214fe:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   21500:	4604      	mov	r4, r0
   21502:	b130      	cbz	r0, 21512 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21504:	6802      	ldr	r2, [r0, #0]
   21506:	0793      	lsls	r3, r2, #30
   21508:	d003      	beq.n	21512 <z_queue_node_peek+0x14>
		ret = anode->data;
   2150a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2150c:	b109      	cbz	r1, 21512 <z_queue_node_peek+0x14>
			k_free(anode);
   2150e:	f000 f982 	bl	21816 <k_free>
}
   21512:	4620      	mov	r0, r4
   21514:	bd10      	pop	{r4, pc}

00021516 <z_impl_k_queue_init>:
	list->head = NULL;
   21516:	2300      	movs	r3, #0
	list->tail = NULL;
   21518:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2151c:	6083      	str	r3, [r0, #8]
   2151e:	f100 030c 	add.w	r3, r0, #12
   21522:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   21526:	f100 0314 	add.w	r3, r0, #20
   2152a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2152e:	4770      	bx	lr

00021530 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   21530:	2301      	movs	r3, #1
{
   21532:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   21534:	9300      	str	r3, [sp, #0]
   21536:	2300      	movs	r3, #0
{
   21538:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2153a:	4619      	mov	r1, r3
   2153c:	f7f8 ffde 	bl	1a4fc <queue_insert>
}
   21540:	b003      	add	sp, #12
   21542:	f85d fb04 	ldr.w	pc, [sp], #4

00021546 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   21546:	2300      	movs	r3, #0
{
   21548:	b507      	push	{r0, r1, r2, lr}
   2154a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2154c:	9300      	str	r3, [sp, #0]
   2154e:	4619      	mov	r1, r3
   21550:	f7f8 ffd4 	bl	1a4fc <queue_insert>
}
   21554:	b003      	add	sp, #12
   21556:	f85d fb04 	ldr.w	pc, [sp], #4

0002155a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2155a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2155e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   21562:	4298      	cmp	r0, r3
   21564:	bfac      	ite	ge
   21566:	2000      	movge	r0, #0
   21568:	2001      	movlt	r0, #1
   2156a:	4770      	bx	lr

0002156c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2156c:	4603      	mov	r3, r0
   2156e:	b920      	cbnz	r0, 2157a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21570:	f3ef 8205 	mrs	r2, IPSR
   21574:	b90a      	cbnz	r2, 2157a <z_reschedule_irqlock+0xe>
   21576:	f7ec b9b9 	b.w	d8ec <arch_swap>
   2157a:	f383 8811 	msr	BASEPRI, r3
   2157e:	f3bf 8f6f 	isb	sy
}
   21582:	4770      	bx	lr

00021584 <z_reschedule_unlocked>:
	__asm__ volatile(
   21584:	f04f 0320 	mov.w	r3, #32
   21588:	f3ef 8011 	mrs	r0, BASEPRI
   2158c:	f383 8811 	msr	BASEPRI, r3
   21590:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21594:	f7ff bfea 	b.w	2156c <z_reschedule_irqlock>

00021598 <unpend_thread_no_timeout>:
{
   21598:	b510      	push	{r4, lr}
   2159a:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2159c:	f7f9 f8e8 	bl	1a770 <pended_on>
   215a0:	4621      	mov	r1, r4
   215a2:	f7f9 f9ed 	bl	1a980 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   215a6:	7b63      	ldrb	r3, [r4, #13]
   215a8:	f023 0302 	bic.w	r3, r3, #2
   215ac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   215ae:	2300      	movs	r3, #0
   215b0:	60a3      	str	r3, [r4, #8]
}
   215b2:	bd10      	pop	{r4, pc}

000215b4 <z_priq_dumb_best>:
{
   215b4:	4603      	mov	r3, r0
	return list->head == list;
   215b6:	6800      	ldr	r0, [r0, #0]
}
   215b8:	4283      	cmp	r3, r0
   215ba:	bf08      	it	eq
   215bc:	2000      	moveq	r0, #0
   215be:	4770      	bx	lr

000215c0 <z_unpend_all>:
{
   215c0:	b538      	push	{r3, r4, r5, lr}
   215c2:	4605      	mov	r5, r0
	int need_sched = 0;
   215c4:	2000      	movs	r0, #0
   215c6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215c8:	42a5      	cmp	r5, r4
   215ca:	d000      	beq.n	215ce <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   215cc:	b904      	cbnz	r4, 215d0 <z_unpend_all+0x10>
}
   215ce:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   215d0:	4620      	mov	r0, r4
   215d2:	f7f9 fa01 	bl	1a9d8 <z_unpend_thread>
		z_ready_thread(thread);
   215d6:	4620      	mov	r0, r4
   215d8:	f7f9 fb18 	bl	1ac0c <z_ready_thread>
		need_sched = 1;
   215dc:	2001      	movs	r0, #1
   215de:	e7f2      	b.n	215c6 <z_unpend_all+0x6>

000215e0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   215e0:	b15a      	cbz	r2, 215fa <z_impl_k_sem_init+0x1a>
   215e2:	428a      	cmp	r2, r1
   215e4:	d309      	bcc.n	215fa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   215e6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   215ea:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   215ee:	e9c0 0000 	strd	r0, r0, [r0]
   215f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   215f6:	2000      	movs	r0, #0
   215f8:	4770      	bx	lr
		return -EINVAL;
   215fa:	f06f 0015 	mvn.w	r0, #21
}
   215fe:	4770      	bx	lr

00021600 <k_is_in_isr>:
   21600:	f3ef 8005 	mrs	r0, IPSR
}
   21604:	3800      	subs	r0, #0
   21606:	bf18      	it	ne
   21608:	2001      	movne	r0, #1
   2160a:	4770      	bx	lr

0002160c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2160c:	b108      	cbz	r0, 21612 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2160e:	f7e9 bd73 	b.w	b0f8 <arch_busy_wait>
}
   21612:	4770      	bx	lr

00021614 <z_impl_k_thread_name_set>:
}
   21614:	f06f 0046 	mvn.w	r0, #70	; 0x46
   21618:	4770      	bx	lr

0002161a <k_thread_name_get>:
}
   2161a:	2000      	movs	r0, #0
   2161c:	4770      	bx	lr

0002161e <k_work_submit_to_queue>:
{
   2161e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21620:	f101 0308 	add.w	r3, r1, #8
   21624:	e8d3 2fef 	ldaex	r2, [r3]
   21628:	f042 0c01 	orr.w	ip, r2, #1
   2162c:	e8c3 cfee 	stlex	lr, ip, [r3]
   21630:	f1be 0f00 	cmp.w	lr, #0
   21634:	d1f6      	bne.n	21624 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21636:	07d3      	lsls	r3, r2, #31
   21638:	d403      	bmi.n	21642 <k_work_submit_to_queue+0x24>
}
   2163a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2163e:	f7ff bf77 	b.w	21530 <k_queue_append>
}
   21642:	f85d fb04 	ldr.w	pc, [sp], #4

00021646 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   21646:	f1a0 0110 	sub.w	r1, r0, #16
   2164a:	6980      	ldr	r0, [r0, #24]
   2164c:	f7ff bfe7 	b.w	2161e <k_work_submit_to_queue>

00021650 <work_cancel>:
{
   21650:	b570      	push	{r4, r5, r6, lr}
   21652:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   21654:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21658:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2165c:	07db      	lsls	r3, r3, #31
   2165e:	d52f      	bpl.n	216c0 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   21660:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   21662:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   21664:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   21666:	b913      	cbnz	r3, 2166e <work_cancel+0x1e>
			return -EINVAL;
   21668:	f06f 0015 	mvn.w	r0, #21
}
   2166c:	bd70      	pop	{r4, r5, r6, pc}
   2166e:	429c      	cmp	r4, r3
   21670:	d121      	bne.n	216b6 <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21672:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   21674:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21676:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   2167a:	b991      	cbnz	r1, 216a2 <work_cancel+0x52>
   2167c:	42b4      	cmp	r4, r6
	list->head = node;
   2167e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   21680:	d100      	bne.n	21684 <work_cancel+0x34>
	list->tail = node;
   21682:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21684:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21686:	f003 0303 	and.w	r3, r3, #3
   2168a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2168c:	2000      	movs	r0, #0
   2168e:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21690:	e8d5 3fef 	ldaex	r3, [r5]
   21694:	f023 0301 	bic.w	r3, r3, #1
   21698:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2169c:	2a00      	cmp	r2, #0
   2169e:	d0e5      	beq.n	2166c <work_cancel+0x1c>
   216a0:	e7f6      	b.n	21690 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   216a2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   216a4:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   216a6:	f003 0303 	and.w	r3, r3, #3
   216aa:	ea43 0300 	orr.w	r3, r3, r0
   216ae:	600b      	str	r3, [r1, #0]
	list->tail = node;
   216b0:	bf08      	it	eq
   216b2:	6051      	streq	r1, [r2, #4]
}
   216b4:	e7e6      	b.n	21684 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   216b6:	6818      	ldr	r0, [r3, #0]
   216b8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   216ba:	f020 0303 	bic.w	r3, r0, #3
   216be:	e7d2      	b.n	21666 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   216c0:	3010      	adds	r0, #16
   216c2:	f7fa fc95 	bl	1bff0 <z_abort_timeout>
		if (err) {
   216c6:	2800      	cmp	r0, #0
   216c8:	d0e0      	beq.n	2168c <work_cancel+0x3c>
			return -EALREADY;
   216ca:	f06f 0044 	mvn.w	r0, #68	; 0x44
   216ce:	e7cd      	b.n	2166c <work_cancel+0x1c>

000216d0 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   216d0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   216d2:	f7fa fddb 	bl	1c28c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   216d6:	bd08      	pop	{r3, pc}

000216d8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   216d8:	f7fa bdd8 	b.w	1c28c <z_tick_get>

000216dc <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   216dc:	f1b1 3fff 	cmp.w	r1, #4294967295
   216e0:	bf08      	it	eq
   216e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   216e6:	b538      	push	{r3, r4, r5, lr}
   216e8:	4605      	mov	r5, r0
   216ea:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   216ec:	d01d      	beq.n	2172a <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   216ee:	ea51 0300 	orrs.w	r3, r1, r0
   216f2:	d103      	bne.n	216fc <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   216f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   216f8:	f7fa bdc8 	b.w	1c28c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   216fc:	f06f 0301 	mvn.w	r3, #1
   21700:	1a18      	subs	r0, r3, r0
   21702:	f04f 33ff 	mov.w	r3, #4294967295
   21706:	eb63 0101 	sbc.w	r1, r3, r1
   2170a:	2900      	cmp	r1, #0
   2170c:	da0c      	bge.n	21728 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   2170e:	f7fa fdbd 	bl	1c28c <z_tick_get>
   21712:	2d01      	cmp	r5, #1
   21714:	4622      	mov	r2, r4
   21716:	f174 0400 	sbcs.w	r4, r4, #0
   2171a:	462b      	mov	r3, r5
   2171c:	bfbc      	itt	lt
   2171e:	2301      	movlt	r3, #1
   21720:	2200      	movlt	r2, #0
   21722:	1818      	adds	r0, r3, r0
   21724:	eb41 0102 	adc.w	r1, r1, r2
}
   21728:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2172a:	f04f 30ff 	mov.w	r0, #4294967295
   2172e:	4601      	mov	r1, r0
   21730:	e7fa      	b.n	21728 <z_timeout_end_calc+0x4c>

00021732 <k_work_submit_to_queue>:
{
   21732:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21734:	f101 0308 	add.w	r3, r1, #8
   21738:	e8d3 2fef 	ldaex	r2, [r3]
   2173c:	f042 0c01 	orr.w	ip, r2, #1
   21740:	e8c3 cfee 	stlex	lr, ip, [r3]
   21744:	f1be 0f00 	cmp.w	lr, #0
   21748:	d1f6      	bne.n	21738 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2174a:	07d3      	lsls	r3, r2, #31
   2174c:	d403      	bmi.n	21756 <k_work_submit_to_queue+0x24>
}
   2174e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   21752:	f7ff beed 	b.w	21530 <k_queue_append>
}
   21756:	f85d fb04 	ldr.w	pc, [sp], #4

0002175a <add_event>:
{
   2175a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2175c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2175e:	e9d0 2300 	ldrd	r2, r3, [r0]
   21762:	4290      	cmp	r0, r2
   21764:	4604      	mov	r4, r0
   21766:	460d      	mov	r5, r1
   21768:	d106      	bne.n	21778 <add_event+0x1e>
	node->prev = list->tail;
   2176a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2176c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2176e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   21770:	6863      	ldr	r3, [r4, #4]
   21772:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21774:	6065      	str	r5, [r4, #4]
}
   21776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   21778:	2b00      	cmp	r3, #0
   2177a:	d0f6      	beq.n	2176a <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2177c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2177e:	b100      	cbz	r0, 21782 <add_event+0x28>
   21780:	386c      	subs	r0, #108	; 0x6c
   21782:	b107      	cbz	r7, 21786 <add_event+0x2c>
   21784:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   21786:	4639      	mov	r1, r7
   21788:	f7ff fee7 	bl	2155a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2178c:	2800      	cmp	r0, #0
   2178e:	d1ec      	bne.n	2176a <add_event+0x10>
	return list->head == list;
   21790:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21792:	42b4      	cmp	r4, r6
   21794:	d0e9      	beq.n	2176a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21796:	2e00      	cmp	r6, #0
   21798:	d0e7      	beq.n	2176a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2179a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2179c:	b101      	cbz	r1, 217a0 <add_event+0x46>
   2179e:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   217a0:	4638      	mov	r0, r7
   217a2:	f7ff feda 	bl	2155a <z_is_t1_higher_prio_than_t2>
   217a6:	b128      	cbz	r0, 217b4 <add_event+0x5a>
	node->prev = successor->prev;
   217a8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   217aa:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   217ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   217b0:	6075      	str	r5, [r6, #4]
			return;
   217b2:	e7e0      	b.n	21776 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   217b4:	6863      	ldr	r3, [r4, #4]
   217b6:	429e      	cmp	r6, r3
   217b8:	d0d7      	beq.n	2176a <add_event+0x10>
   217ba:	6836      	ldr	r6, [r6, #0]
   217bc:	e7eb      	b.n	21796 <add_event+0x3c>

000217be <z_handle_obj_poll_events>:
{
   217be:	4603      	mov	r3, r0
	return list->head == list;
   217c0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   217c2:	4283      	cmp	r3, r0
   217c4:	d008      	beq.n	217d8 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   217c6:	e9d0 3200 	ldrd	r3, r2, [r0]
   217ca:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   217cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   217ce:	2300      	movs	r3, #0
	node->prev = NULL;
   217d0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   217d4:	f7fa bd98 	b.w	1c308 <signal_poll_event>
}
   217d8:	4770      	bx	lr

000217da <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   217da:	2904      	cmp	r1, #4
{
   217dc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   217e0:	460d      	mov	r5, r1
   217e2:	bf38      	it	cc
   217e4:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   217e6:	1952      	adds	r2, r2, r5
{
   217e8:	4606      	mov	r6, r0
   217ea:	d209      	bcs.n	21800 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   217ec:	f04f 0800 	mov.w	r8, #0
   217f0:	f04f 0900 	mov.w	r9, #0
   217f4:	e9cd 8900 	strd	r8, r9, [sp]
   217f8:	f7f8 fb72 	bl	19ee0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   217fc:	4604      	mov	r4, r0
   217fe:	b918      	cbnz	r0, 21808 <z_heap_aligned_alloc+0x2e>
		return NULL;
   21800:	2000      	movs	r0, #0
}
   21802:	b002      	add	sp, #8
   21804:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   21808:	462a      	mov	r2, r5
   2180a:	21ff      	movs	r1, #255	; 0xff
   2180c:	f7fc fe63 	bl	1e4d6 <memset>
	*heap_ref = heap;
   21810:	6026      	str	r6, [r4, #0]
	return mem + excess;
   21812:	1960      	adds	r0, r4, r5
   21814:	e7f5      	b.n	21802 <z_heap_aligned_alloc+0x28>

00021816 <k_free>:
	if (ptr != NULL) {
   21816:	b138      	cbz	r0, 21828 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   21818:	1f03      	subs	r3, r0, #4
   2181a:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   2181c:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   21820:	1c42      	adds	r2, r0, #1
   21822:	d0fa      	beq.n	2181a <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   21824:	f7f8 bbe4 	b.w	19ff0 <k_heap_free>
}
   21828:	4770      	bx	lr

0002182a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2182a:	4770      	bx	lr
