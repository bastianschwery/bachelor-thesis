
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	00 eb 00 20 f1 cc 00 00 dd a9 01 00 21 cd 00 00     ... ........!...
    8010:	21 cd 00 00 21 cd 00 00 21 cd 00 00 21 cd 00 00     !...!...!...!...
	...
    802c:	b9 ca 00 00 21 cd 00 00 00 00 00 00 5d ca 00 00     ....!.......]...
    803c:	59 b8 00 00                                         Y...

00008040 <_irq_vector_table>:
    8040:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8050:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8060:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8070:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8080:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8090:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    80a0:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    80b0:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    80c0:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    80d0:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    80e0:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    80f0:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8100:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8110:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8120:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8130:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8140:	b1 cc 00 00 b1 cc 00 00 b1 cc 00 00 b1 cc 00 00     ................
    8150:	b1 cc 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	d8 9b 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
}

/*
 * calculate speed
 */
uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b49      	ldr	r3, [pc, #292]	; (9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b46      	ldr	r3, [pc, #280]	; (903c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x13c>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a341      	add	r3, pc, #260	; (adr r3, 9030 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x130>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b43      	ldr	r3, [pc, #268]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4841      	ldr	r0, [pc, #260]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f40:	f010 fbea 	bl	19718 <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f40      	ldr	r7, [pc, #256]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da69      	bge.n	9024 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x124>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f010 fbe0 	bl	19718 <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3a      	ldr	r2, [pc, #232]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
        switch (nbrAddresses)
    8f64:	2b02      	cmp	r3, #2
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        switch (nbrAddresses)
    8f68:	d00e      	beq.n	8f88 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x88>
    8f6a:	2b03      	cmp	r3, #3
    8f6c:	d02e      	beq.n	8fcc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xcc>
    8f6e:	2b01      	cmp	r3, #1
    8f70:	d1e2      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f72:	4a37      	ldr	r2, [pc, #220]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    8f74:	1e63      	subs	r3, r4, #1
    8f76:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f7a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f7e:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f80:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f84:	d1f9      	bne.n	8f7a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x7a>
    8f86:	e7d7      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f88:	4b32      	ldr	r3, [pc, #200]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
    8f8a:	781d      	ldrb	r5, [r3, #0]
    8f8c:	3501      	adds	r5, #1
    8f8e:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f90:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f92:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f94:	d10a      	bne.n	8fac <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xac>
    8f96:	4a2e      	ldr	r2, [pc, #184]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    8f98:	1e63      	subs	r3, r4, #1
    8f9a:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8f9e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa2:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fa4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fa8:	d1f9      	bne.n	8f9e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x9e>
    8faa:	e7c5      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fac:	2d02      	cmp	r5, #2
    8fae:	d1c3      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb0:	4a29      	ldr	r2, [pc, #164]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
    8fb2:	1e63      	subs	r3, r4, #1
    8fb4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fb8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fbc:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fbe:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc2:	d1f9      	bne.n	8fb8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb8>
                cntAddresses = 0;
    8fc4:	2200      	movs	r2, #0
    8fc6:	4b23      	ldr	r3, [pc, #140]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
    8fc8:	701a      	strb	r2, [r3, #0]
    8fca:	e7b5      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fcc:	4b21      	ldr	r3, [pc, #132]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
    8fce:	781d      	ldrb	r5, [r3, #0]
    8fd0:	3501      	adds	r5, #1
    8fd2:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fd4:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fd6:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fd8:	d10a      	bne.n	8ff0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf0>
    8fda:	4a1d      	ldr	r2, [pc, #116]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    8fdc:	1e63      	subs	r3, r4, #1
    8fde:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fe6:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fe8:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fec:	d1f9      	bne.n	8fe2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe2>
    8fee:	e7a3      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff0:	2d02      	cmp	r5, #2
    8ff2:	d10a      	bne.n	900a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x10a>
    8ff4:	4a18      	ldr	r2, [pc, #96]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
    8ff6:	1e63      	subs	r3, r4, #1
    8ff8:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8ffc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9000:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9002:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9006:	d1f9      	bne.n	8ffc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xfc>
    9008:	e796      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    900a:	2d03      	cmp	r5, #3
    900c:	d194      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    900e:	4a13      	ldr	r2, [pc, #76]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    9010:	1e63      	subs	r3, r4, #1
    9012:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9016:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    901a:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    901c:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9020:	d1f9      	bne.n	9016 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x116>
    9022:	e7cf      	b.n	8fc4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xc4>
    }
    printk("\n");
    9024:	480e      	ldr	r0, [pc, #56]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    9026:	f010 fb77 	bl	19718 <printk>
 	return len;
}
    902a:	4630      	mov	r0, r6
    902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9030:	851eb852 	.word	0x851eb852
    9034:	400451eb 	.word	0x400451eb
    9038:	2000c0e7 	.word	0x2000c0e7
    903c:	3fe00000 	.word	0x3fe00000
    9040:	20008808 	.word	0x20008808
    9044:	0001e5a1 	.word	0x0001e5a1
    9048:	0001e5cd 	.word	0x0001e5cd
    904c:	2000c0e8 	.word	0x2000c0e8
    9050:	2000bed3 	.word	0x2000bed3
    9054:	2000bf06 	.word	0x2000bf06
    9058:	2000bee4 	.word	0x2000bee4
    905c:	2000bef5 	.word	0x2000bef5
    9060:	00021194 	.word	0x00021194

00009064 <main>:
#include <bluetooth/services/bas_client.h>

//static struct bt_bas_client bas;

void main(void)
{
    9064:	b500      	push	{lr}
	printk("Application start\n");
    9066:	4807      	ldr	r0, [pc, #28]	; (9084 <main+0x20>)
{
    9068:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    906a:	f010 fb55 	bl	19718 <printk>

	//bt_bas_client_init(&bas);


	// create a new device manager
	deviceManager dManager;
    906e:	4668      	mov	r0, sp
    9070:	f000 f8ea 	bl	9248 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9074:	2201      	movs	r2, #1
    9076:	4668      	mov	r0, sp
    9078:	4611      	mov	r1, r2
    907a:	f000 fa35 	bl	94e8 <_ZN13deviceManager9setDeviceEbb>
    907e:	b011      	add	sp, #68	; 0x44
    9080:	f85d fb04 	ldr.w	pc, [sp], #4
    9084:	0001e02c 	.word	0x0001e02c

00009088 <_ZN13deviceManager13app_button_cbEv>:
/*
 * button callback method
 */
bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9088:	4b01      	ldr	r3, [pc, #4]	; (9090 <_ZN13deviceManager13app_button_cbEv+0x8>)
    908a:	7818      	ldrb	r0, [r3, #0]
    908c:	4770      	bx	lr
    908e:	bf00      	nop
    9090:	2000bece 	.word	0x2000bece

00009094 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
 * callback method
 * called when while discovering an error appears
 */
void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    9094:	4801      	ldr	r0, [pc, #4]	; (909c <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    9096:	f010 bb3f 	b.w	19718 <printk>
    909a:	bf00      	nop
    909c:	0001e03f 	.word	0x0001e03f

000090a0 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    90a0:	b513      	push	{r0, r1, r4, lr}
    90a2:	4604      	mov	r4, r0
	printk("Service not found!\n");
    90a4:	4808      	ldr	r0, [pc, #32]	; (90c8 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    90a6:	f010 fb37 	bl	19718 <printk>
	error[0] = 10;
    90aa:	230a      	movs	r3, #10
    90ac:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    90b0:	4b06      	ldr	r3, [pc, #24]	; (90cc <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    90b2:	2201      	movs	r2, #1
    90b4:	6818      	ldr	r0, [r3, #0]
    90b6:	a901      	add	r1, sp, #4
    90b8:	f000 fd4e 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    90bc:	21fb      	movs	r1, #251	; 0xfb
    90be:	4620      	mov	r0, r4
    90c0:	f007 fd0a 	bl	10ad8 <bt_conn_disconnect>
}
    90c4:	b002      	add	sp, #8
    90c6:	bd10      	pop	{r4, pc}
    90c8:	0001e067 	.word	0x0001e067
    90cc:	2000a458 	.word	0x2000a458

000090d0 <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    90d0:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    90d2:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    90d4:	d507      	bpl.n	90e6 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    90d6:	1e04      	subs	r4, r0, #0
    90d8:	bf18      	it	ne
    90da:	2401      	movne	r4, #1
    90dc:	4620      	mov	r0, r4
    90de:	f003 faab 	bl	c638 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    90e2:	4b01      	ldr	r3, [pc, #4]	; (90e8 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    90e4:	701c      	strb	r4, [r3, #0]
}
    90e6:	bd10      	pop	{r4, pc}
    90e8:	2000bece 	.word	0x2000bece

000090ec <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
 * callback method
 * called every second with data
 */
uint8_t deviceManager::onReceived(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params,
			const void *data, uint16_t length) {
    90ec:	b513      	push	{r0, r1, r4, lr}
    90ee:	4611      	mov	r1, r2

	// start calculating and showing data only when all characteristics are subscribed
	if (subscriptionDone)
    90f0:	4a31      	ldr	r2, [pc, #196]	; (91b8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    90f2:	7812      	ldrb	r2, [r2, #0]
    90f4:	2a00      	cmp	r2, #0
    90f6:	d034      	beq.n	9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
	{
		if (length > 0)
    90f8:	2b00      	cmp	r3, #0
    90fa:	d032      	beq.n	9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
		{
			// save the new received data
			deviceManager::data.saveData(data);
    90fc:	4c2f      	ldr	r4, [pc, #188]	; (91bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    90fe:	4620      	mov	r0, r4
    9100:	f000 fc8a 	bl	9a18 <_ZN7dataCSC8saveDataEPKv>

			uint8_t val_after_comma;
			uint8_t dataToSend[3];

			if (getDiameter() != 0 && diameterSet == false)
    9104:	f000 fd52 	bl	9bac <_Z11getDiameterv>
    9108:	2200      	movs	r2, #0
    910a:	2300      	movs	r3, #0
    910c:	f7ff fcbc 	bl	8a88 <__aeabi_dcmpeq>
    9110:	bb50      	cbnz	r0, 9168 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    9112:	4b2b      	ldr	r3, [pc, #172]	; (91c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9114:	781a      	ldrb	r2, [r3, #0]
    9116:	bb3a      	cbnz	r2, 9168 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
			{
				diameterSet = true;
    9118:	2201      	movs	r2, #1
    911a:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    911c:	f000 fd46 	bl	9bac <_Z11getDiameterv>
    9120:	e9c4 0106 	strd	r0, r1, [r4, #24]
			{
				// reset button was pressed
				diameterSet = false;
			}
			
			if (deviceManager::data.type == CSC_SPEED)
    9124:	7c24      	ldrb	r4, [r4, #16]
    9126:	2c01      	cmp	r4, #1
    9128:	d12d      	bne.n	9186 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
			{
				// calculate speed
				if (diameterSet)
    912a:	4b25      	ldr	r3, [pc, #148]	; (91c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    912c:	781b      	ldrb	r3, [r3, #0]
    912e:	b1c3      	cbz	r3, 9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				{
					uint16_t speed = deviceManager::data.calcSpeed();
    9130:	4822      	ldr	r0, [pc, #136]	; (91bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9132:	f7ff fe89 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>

					if (speed > 0)
    9136:	b1a0      	cbz	r0, 9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					{
						// 1. value: type -> speed
						// 2. value: 8 bit on the left side of comma
						// 3. value: 8 bit on the right side of comma
						dataToSend[0] = CSC_SPEED;
						dataToSend[1] = (uint8_t) (speed/100);	
    9138:	2164      	movs	r1, #100	; 0x64
    913a:	fbb0 f1f1 	udiv	r1, r0, r1
						dataToSend[0] = CSC_SPEED;
    913e:	f88d 4004 	strb.w	r4, [sp, #4]
						val_after_comma = (uint8_t) (speed);
						dataToSend[2] = val_after_comma;

						if (peripheralConn != nullptr)
    9142:	4c20      	ldr	r4, [pc, #128]	; (91c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[1] = (uint8_t) (speed/100);	
    9144:	b289      	uxth	r1, r1
						if (peripheralConn != nullptr)
    9146:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) (speed/100);	
    9148:	f88d 1005 	strb.w	r1, [sp, #5]
						val_after_comma = (uint8_t) (speed);
    914c:	f88d 0006 	strb.w	r0, [sp, #6]
						if (peripheralConn != nullptr)
    9150:	b13b      	cbz	r3, 9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						{	
							printk("Speed: %d\n",speed/100);
    9152:	481d      	ldr	r0, [pc, #116]	; (91c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
						dataToSend[0] = CSC_CADENCE;	
						dataToSend[1] = (uint8_t) rpm;
						dataToSend[2] = (uint8_t) (rpm >> 8);	
						if (peripheralConn != nullptr)
						{
							printk("Cadence rpm: %d\n",rpm);
    9154:	f010 fae0 	bl	19718 <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    9158:	2203      	movs	r2, #3
    915a:	6820      	ldr	r0, [r4, #0]
    915c:	a901      	add	r1, sp, #4
    915e:	f000 fcfb 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
				}
			}
		}
	}
	return BT_GATT_ITER_CONTINUE;
}
    9162:	2001      	movs	r0, #1
    9164:	b002      	add	sp, #8
    9166:	bd10      	pop	{r4, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    9168:	f000 fd20 	bl	9bac <_Z11getDiameterv>
    916c:	2200      	movs	r2, #0
    916e:	2300      	movs	r3, #0
    9170:	f7ff fc8a 	bl	8a88 <__aeabi_dcmpeq>
    9174:	2800      	cmp	r0, #0
    9176:	d0d5      	beq.n	9124 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    9178:	4b11      	ldr	r3, [pc, #68]	; (91c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    917a:	781a      	ldrb	r2, [r3, #0]
    917c:	2a00      	cmp	r2, #0
    917e:	d0d1      	beq.n	9124 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
				diameterSet = false;
    9180:	2200      	movs	r2, #0
    9182:	701a      	strb	r2, [r3, #0]
    9184:	e7ce      	b.n	9124 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
			else if (deviceManager::data.type == CSC_CADENCE)
    9186:	2c02      	cmp	r4, #2
    9188:	d1eb      	bne.n	9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				if (diameterSet)
    918a:	4b0d      	ldr	r3, [pc, #52]	; (91c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    918c:	781b      	ldrb	r3, [r3, #0]
    918e:	2b00      	cmp	r3, #0
    9190:	d0e7      	beq.n	9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t rpm = deviceManager::data.calcRPM();
    9192:	480a      	ldr	r0, [pc, #40]	; (91bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9194:	f000 fc7c 	bl	9a90 <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0)
    9198:	4601      	mov	r1, r0
    919a:	2800      	cmp	r0, #0
    919c:	d0e1      	beq.n	9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[0] = CSC_CADENCE;	
    919e:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    91a2:	4c08      	ldr	r4, [pc, #32]	; (91c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    91a4:	0a03      	lsrs	r3, r0, #8
    91a6:	f88d 3006 	strb.w	r3, [sp, #6]
						if (peripheralConn != nullptr)
    91aa:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    91ac:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    91b0:	2b00      	cmp	r3, #0
    91b2:	d0d6      	beq.n	9162 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Cadence rpm: %d\n",rpm);
    91b4:	4805      	ldr	r0, [pc, #20]	; (91cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    91b6:	e7cd      	b.n	9154 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
    91b8:	2000becf 	.word	0x2000becf
    91bc:	200087d8 	.word	0x200087d8
    91c0:	2000becb 	.word	0x2000becb
    91c4:	2000a458 	.word	0x2000a458
    91c8:	0001e07b 	.word	0x0001e07b
    91cc:	0001e086 	.word	0x0001e086

000091d0 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    91d0:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    91d2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    91d4:	b08b      	sub	sp, #44	; 0x2c
    91d6:	4604      	mov	r4, r0
    91d8:	460e      	mov	r6, r1
    91da:	4617      	mov	r7, r2
    91dc:	ad07      	add	r5, sp, #28
    91de:	2b03      	cmp	r3, #3
    91e0:	d820      	bhi.n	9224 <bt_addr_le_to_str.isra.0+0x54>
    91e2:	e8df f003 	tbb	[pc, r3]
    91e6:	1902      	.short	0x1902
    91e8:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    91ea:	4911      	ldr	r1, [pc, #68]	; (9230 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    91ec:	4628      	mov	r0, r5
    91ee:	f011 fc99 	bl	1ab24 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    91f2:	7863      	ldrb	r3, [r4, #1]
    91f4:	4639      	mov	r1, r7
    91f6:	9304      	str	r3, [sp, #16]
    91f8:	78a3      	ldrb	r3, [r4, #2]
    91fa:	4630      	mov	r0, r6
    91fc:	9303      	str	r3, [sp, #12]
    91fe:	78e3      	ldrb	r3, [r4, #3]
    9200:	4a0c      	ldr	r2, [pc, #48]	; (9234 <bt_addr_le_to_str.isra.0+0x64>)
    9202:	9302      	str	r3, [sp, #8]
    9204:	7923      	ldrb	r3, [r4, #4]
    9206:	9505      	str	r5, [sp, #20]
    9208:	9301      	str	r3, [sp, #4]
    920a:	7963      	ldrb	r3, [r4, #5]
    920c:	9300      	str	r3, [sp, #0]
    920e:	79a3      	ldrb	r3, [r4, #6]
    9210:	f010 fa8f 	bl	19732 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    9214:	b00b      	add	sp, #44	; 0x2c
    9216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9218:	4907      	ldr	r1, [pc, #28]	; (9238 <bt_addr_le_to_str.isra.0+0x68>)
    921a:	e7e7      	b.n	91ec <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    921c:	4907      	ldr	r1, [pc, #28]	; (923c <bt_addr_le_to_str.isra.0+0x6c>)
    921e:	e7e5      	b.n	91ec <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    9220:	4907      	ldr	r1, [pc, #28]	; (9240 <bt_addr_le_to_str.isra.0+0x70>)
    9222:	e7e3      	b.n	91ec <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9224:	210a      	movs	r1, #10
    9226:	4628      	mov	r0, r5
    9228:	4a06      	ldr	r2, [pc, #24]	; (9244 <bt_addr_le_to_str.isra.0+0x74>)
    922a:	f010 fa82 	bl	19732 <snprintk>
		break;
    922e:	e7e0      	b.n	91f2 <bt_addr_le_to_str.isra.0+0x22>
    9230:	0001e097 	.word	0x0001e097
    9234:	0001e0c0 	.word	0x0001e0c0
    9238:	0001e09e 	.word	0x0001e09e
    923c:	0001e0a5 	.word	0x0001e0a5
    9240:	0001e0af 	.word	0x0001e0af
    9244:	0001e0b9 	.word	0x0001e0b9

00009248 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9248:	b510      	push	{r4, lr}
    924a:	4604      	mov	r4, r0
    924c:	2214      	movs	r2, #20
    924e:	2100      	movs	r1, #0
    9250:	f011 fced 	bl	1ac2e <memset>
    9254:	4b0e      	ldr	r3, [pc, #56]	; (9290 <_ZN13deviceManagerC1Ev+0x48>)
    9256:	4a0f      	ldr	r2, [pc, #60]	; (9294 <_ZN13deviceManagerC1Ev+0x4c>)
    9258:	6023      	str	r3, [r4, #0]
    925a:	4b0f      	ldr	r3, [pc, #60]	; (9298 <_ZN13deviceManagerC1Ev+0x50>)
    925c:	e892 0003 	ldmia.w	r2, {r0, r1}
    9260:	6063      	str	r3, [r4, #4]
    9262:	f104 0314 	add.w	r3, r4, #20
    9266:	e883 0003 	stmia.w	r3, {r0, r1}
    926a:	2224      	movs	r2, #36	; 0x24
    926c:	2100      	movs	r1, #0
    926e:	f104 001c 	add.w	r0, r4, #28
    9272:	f011 fcdc 	bl	1ac2e <memset>
		centralConnections[i] = nullptr;
    9276:	2300      	movs	r3, #0
    9278:	4a08      	ldr	r2, [pc, #32]	; (929c <_ZN13deviceManagerC1Ev+0x54>)
}
    927a:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    927c:	e9c2 3300 	strd	r3, r3, [r2]
    9280:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    9284:	4a06      	ldr	r2, [pc, #24]	; (92a0 <_ZN13deviceManagerC1Ev+0x58>)
    9286:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9288:	4a06      	ldr	r2, [pc, #24]	; (92a4 <_ZN13deviceManagerC1Ev+0x5c>)
    928a:	7013      	strb	r3, [r2, #0]
}
    928c:	bd10      	pop	{r4, pc}
    928e:	bf00      	nop
    9290:	0000952d 	.word	0x0000952d
    9294:	0001d5c0 	.word	0x0001d5c0
    9298:	00009609 	.word	0x00009609
    929c:	2000a45c 	.word	0x2000a45c
    92a0:	2000beca 	.word	0x2000beca
    92a4:	2000bec9 	.word	0x2000bec9

000092a8 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    92a8:	4a07      	ldr	r2, [pc, #28]	; (92c8 <_ZN13deviceManager9getDeviceEv+0x20>)
    92aa:	4b08      	ldr	r3, [pc, #32]	; (92cc <_ZN13deviceManager9getDeviceEv+0x24>)
    92ac:	7812      	ldrb	r2, [r2, #0]
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	b122      	cbz	r2, 92bc <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    92b2:	2b00      	cmp	r3, #0
    92b4:	bf14      	ite	ne
    92b6:	2003      	movne	r0, #3
    92b8:	2001      	moveq	r0, #1
    92ba:	4770      	bx	lr
        return 0;
    92bc:	2b00      	cmp	r3, #0
    92be:	bf14      	ite	ne
    92c0:	2002      	movne	r0, #2
    92c2:	2000      	moveq	r0, #0
}
    92c4:	4770      	bx	lr
    92c6:	bf00      	nop
    92c8:	2000bed1 	.word	0x2000bed1
    92cc:	2000becc 	.word	0x2000becc

000092d0 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    92d0:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    92d2:	4805      	ldr	r0, [pc, #20]	; (92e8 <_ZN13deviceManager10initButtonEv+0x18>)
    92d4:	f00c fab0 	bl	15838 <dk_buttons_init>
	if (err) {
    92d8:	4604      	mov	r4, r0
    92da:	b118      	cbz	r0, 92e4 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    92dc:	4601      	mov	r1, r0
    92de:	4803      	ldr	r0, [pc, #12]	; (92ec <_ZN13deviceManager10initButtonEv+0x1c>)
    92e0:	f010 fa1a 	bl	19718 <printk>
}
    92e4:	4620      	mov	r0, r4
    92e6:	bd10      	pop	{r4, pc}
    92e8:	000090d1 	.word	0x000090d1
    92ec:	0001e0e3 	.word	0x0001e0e3

000092f0 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    92f0:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    92f2:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    92f4:	490b      	ldr	r1, [pc, #44]	; (9324 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    92f6:	9300      	str	r3, [sp, #0]
    92f8:	2202      	movs	r2, #2
    92fa:	4b0b      	ldr	r3, [pc, #44]	; (9328 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    92fc:	480b      	ldr	r0, [pc, #44]	; (932c <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    92fe:	f006 fbfd 	bl	fafc <bt_le_adv_start>
	if (err) {
    9302:	4601      	mov	r1, r0
    9304:	b128      	cbz	r0, 9312 <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    9306:	480a      	ldr	r0, [pc, #40]	; (9330 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    9308:	b003      	add	sp, #12
    930a:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    930e:	f010 ba03 	b.w	19718 <printk>
	printk("Advertising successfully started\n");
    9312:	4808      	ldr	r0, [pc, #32]	; (9334 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    9314:	f010 fa00 	bl	19718 <printk>
	printk("Waiting for connection...\n");
    9318:	4807      	ldr	r0, [pc, #28]	; (9338 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    931a:	b003      	add	sp, #12
    931c:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    9320:	f010 b9fa 	b.w	19718 <printk>
    9324:	0001d6d8 	.word	0x0001d6d8
    9328:	0001d6e8 	.word	0x0001d6e8
    932c:	0001d658 	.word	0x0001d658
    9330:	0001e102 	.word	0x0001e102
    9334:	0001e128 	.word	0x0001e128
    9338:	0001e14a 	.word	0x0001e14a

0000933c <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    933c:	b510      	push	{r4, lr}
    933e:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9340:	f7ff ffb2 	bl	92a8 <_ZN13deviceManager9getDeviceEv>
    9344:	1e83      	subs	r3, r0, #2
    9346:	b2db      	uxtb	r3, r3
    9348:	2b01      	cmp	r3, #1
    934a:	d82d      	bhi.n	93a8 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    934c:	f00c fa0e 	bl	1576c <dk_leds_init>
        if (err) {
    9350:	4601      	mov	r1, r0
    9352:	b120      	cbz	r0, 935e <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    9354:	4815      	ldr	r0, [pc, #84]	; (93ac <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    9356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    935a:	f010 b9dd 	b.w	19718 <printk>
        err = initButton();
    935e:	f7ff ffb7 	bl	92d0 <_ZN13deviceManager10initButtonEv>
    9362:	4601      	mov	r1, r0
        if (err) {
    9364:	b108      	cbz	r0, 936a <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    9366:	4812      	ldr	r0, [pc, #72]	; (93b0 <_ZN13deviceManager14initPeripheralEv+0x74>)
    9368:	e7f5      	b.n	9356 <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    936a:	f006 f92d 	bl	f5c8 <bt_enable>
        if (err) {
    936e:	4601      	mov	r1, r0
    9370:	b108      	cbz	r0, 9376 <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    9372:	4810      	ldr	r0, [pc, #64]	; (93b4 <_ZN13deviceManager14initPeripheralEv+0x78>)
    9374:	e7ef      	b.n	9356 <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    9376:	4810      	ldr	r0, [pc, #64]	; (93b8 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9378:	f010 f9ce 	bl	19718 <printk>
		bt_conn_cb_register(&conn_callbacks);
    937c:	4620      	mov	r0, r4
    937e:	f006 ff81 	bl	10284 <bt_conn_cb_register>
            settings_load();
    9382:	f010 fcbe 	bl	19d02 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    9386:	f104 0014 	add.w	r0, r4, #20
    938a:	f003 f94b 	bl	c624 <bt_lbs_init>
        if (err) {
    938e:	4601      	mov	r1, r0
    9390:	b108      	cbz	r0, 9396 <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    9392:	480a      	ldr	r0, [pc, #40]	; (93bc <_ZN13deviceManager14initPeripheralEv+0x80>)
    9394:	e7df      	b.n	9356 <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    9396:	f000 fbcd 	bl	9b34 <_Z17data_service_initv>
		if (err) 
    939a:	4601      	mov	r1, r0
    939c:	2800      	cmp	r0, #0
    939e:	d1f8      	bne.n	9392 <_ZN13deviceManager14initPeripheralEv+0x56>
}
    93a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    93a4:	f7ff bfa4 	b.w	92f0 <_ZN13deviceManager16startAdvertisingEv>
}
    93a8:	bd10      	pop	{r4, pc}
    93aa:	bf00      	nop
    93ac:	0001e165 	.word	0x0001e165
    93b0:	0001e180 	.word	0x0001e180
    93b4:	0001e19d 	.word	0x0001e19d
    93b8:	0001e1bd 	.word	0x0001e1bd
    93bc:	0001e1d4 	.word	0x0001e1d4

000093c0 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    93c0:	b500      	push	{lr}
    93c2:	b089      	sub	sp, #36	; 0x24
	struct bt_le_scan_param scanParam = {
    93c4:	ab03      	add	r3, sp, #12
    93c6:	2100      	movs	r1, #0
    93c8:	4618      	mov	r0, r3
    93ca:	2214      	movs	r2, #20
    93cc:	f011 fc2f 	bl	1ac2e <memset>
    93d0:	2201      	movs	r2, #1
    93d2:	f88d 200c 	strb.w	r2, [sp, #12]
    93d6:	9204      	str	r2, [sp, #16]
    93d8:	4a0f      	ldr	r2, [pc, #60]	; (9418 <_ZN13deviceManager8initScanEv+0x58>)
	};
    93da:	9000      	str	r0, [sp, #0]
	struct bt_le_scan_param scanParam = {
    93dc:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    93de:	2200      	movs	r2, #0
    93e0:	9201      	str	r2, [sp, #4]
    93e2:	4a0e      	ldr	r2, [pc, #56]	; (941c <_ZN13deviceManager8initScanEv+0x5c>)
	bt_scan_init(&scanInit);
    93e4:	4668      	mov	r0, sp
	struct bt_scan_init_param scanInit = {
    93e6:	9202      	str	r2, [sp, #8]
	bt_scan_init(&scanInit);
    93e8:	f003 f8a2 	bl	c530 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    93ec:	480c      	ldr	r0, [pc, #48]	; (9420 <_ZN13deviceManager8initScanEv+0x60>)
    93ee:	f002 ff09 	bl	c204 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    93f2:	490c      	ldr	r1, [pc, #48]	; (9424 <_ZN13deviceManager8initScanEv+0x64>)
    93f4:	2003      	movs	r0, #3
    93f6:	f002 ff15 	bl	c224 <bt_scan_filter_add>
	if (err) {
    93fa:	4601      	mov	r1, r0
    93fc:	b128      	cbz	r0, 940a <_ZN13deviceManager8initScanEv+0x4a>
		printk("Scanning filters cannot be set\n");
    93fe:	480a      	ldr	r0, [pc, #40]	; (9428 <_ZN13deviceManager8initScanEv+0x68>)
		printk("Filters cannot be turned on\n");
    9400:	f010 f98a 	bl	19718 <printk>
}
    9404:	b009      	add	sp, #36	; 0x24
    9406:	f85d fb04 	ldr.w	pc, [sp], #4
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    940a:	2004      	movs	r0, #4
    940c:	f002 ff6e 	bl	c2ec <bt_scan_filter_enable>
	if (err) {
    9410:	2800      	cmp	r0, #0
    9412:	d0f7      	beq.n	9404 <_ZN13deviceManager8initScanEv+0x44>
		printk("Filters cannot be turned on\n");
    9414:	4805      	ldr	r0, [pc, #20]	; (942c <_ZN13deviceManager8initScanEv+0x6c>)
    9416:	e7f3      	b.n	9400 <_ZN13deviceManager8initScanEv+0x40>
    9418:	00300060 	.word	0x00300060
    941c:	0001df74 	.word	0x0001df74
    9420:	20008164 	.word	0x20008164
    9424:	0001df7c 	.word	0x0001df7c
    9428:	0001e1f1 	.word	0x0001e1f1
    942c:	0001e211 	.word	0x0001e211

00009430 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9430:	2001      	movs	r0, #1
void deviceManager::startScan(){
    9432:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9434:	f003 f8ae 	bl	c594 <bt_scan_start>
	if (err) {
    9438:	4601      	mov	r1, r0
    943a:	b110      	cbz	r0, 9442 <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    943c:	4803      	ldr	r0, [pc, #12]	; (944c <_ZN13deviceManager9startScanEv+0x1c>)
    943e:	f010 f96b 	bl	19718 <printk>
}
    9442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    9446:	4802      	ldr	r0, [pc, #8]	; (9450 <_ZN13deviceManager9startScanEv+0x20>)
    9448:	f010 b966 	b.w	19718 <printk>
    944c:	0001e22e 	.word	0x0001e22e
    9450:	0001e250 	.word	0x0001e250

00009454 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9454:	b510      	push	{r4, lr}
    9456:	4604      	mov	r4, r0
	printk("Init Central\n");
    9458:	481c      	ldr	r0, [pc, #112]	; (94cc <_ZN13deviceManager11initCentralEv+0x78>)
    945a:	f010 f95d 	bl	19718 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    945e:	f7ff ff23 	bl	92a8 <_ZN13deviceManager9getDeviceEv>
    9462:	2801      	cmp	r0, #1
    9464:	d00a      	beq.n	947c <_ZN13deviceManager11initCentralEv+0x28>
    9466:	2803      	cmp	r0, #3
    9468:	d12f      	bne.n	94ca <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    946a:	4620      	mov	r0, r4
    946c:	f006 ff0a 	bl	10284 <bt_conn_cb_register>
		initScan();
    9470:	f7ff ffa6 	bl	93c0 <_ZN13deviceManager8initScanEv>
}
    9474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9478:	f7ff bfda 	b.w	9430 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    947c:	2000      	movs	r0, #0
    947e:	f006 f8a3 	bl	f5c8 <bt_enable>
			if (err) {
    9482:	4601      	mov	r1, r0
    9484:	b120      	cbz	r0, 9490 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    9486:	4812      	ldr	r0, [pc, #72]	; (94d0 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    948c:	f010 b944 	b.w	19718 <printk>
			printk("Bluetooth ready\n");
    9490:	4810      	ldr	r0, [pc, #64]	; (94d4 <_ZN13deviceManager11initCentralEv+0x80>)
    9492:	f010 f941 	bl	19718 <printk>
			err = dk_leds_init();
    9496:	f00c f969 	bl	1576c <dk_leds_init>
			if (err) {
    949a:	4601      	mov	r1, r0
    949c:	b108      	cbz	r0, 94a2 <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    949e:	480e      	ldr	r0, [pc, #56]	; (94d8 <_ZN13deviceManager11initCentralEv+0x84>)
    94a0:	e7f2      	b.n	9488 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    94a2:	f7ff ff15 	bl	92d0 <_ZN13deviceManager10initButtonEv>
			if (err) {
    94a6:	4601      	mov	r1, r0
    94a8:	b108      	cbz	r0, 94ae <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    94aa:	480c      	ldr	r0, [pc, #48]	; (94dc <_ZN13deviceManager11initCentralEv+0x88>)
    94ac:	e7ec      	b.n	9488 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    94ae:	f104 0014 	add.w	r0, r4, #20
    94b2:	f003 f8b7 	bl	c624 <bt_lbs_init>
			if (err) {
    94b6:	4601      	mov	r1, r0
    94b8:	b108      	cbz	r0, 94be <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    94ba:	4809      	ldr	r0, [pc, #36]	; (94e0 <_ZN13deviceManager11initCentralEv+0x8c>)
    94bc:	e7e4      	b.n	9488 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    94be:	f010 fc20 	bl	19d02 <settings_load>
				printk("Settings loaded\n");
    94c2:	4808      	ldr	r0, [pc, #32]	; (94e4 <_ZN13deviceManager11initCentralEv+0x90>)
    94c4:	f010 f928 	bl	19718 <printk>
    94c8:	e7cf      	b.n	946a <_ZN13deviceManager11initCentralEv+0x16>
}
    94ca:	bd10      	pop	{r4, pc}
    94cc:	0001e25d 	.word	0x0001e25d
    94d0:	0001e19d 	.word	0x0001e19d
    94d4:	0001e26b 	.word	0x0001e26b
    94d8:	0001e165 	.word	0x0001e165
    94dc:	0001e180 	.word	0x0001e180
    94e0:	0001e1d4 	.word	0x0001e1d4
    94e4:	0001e27c 	.word	0x0001e27c

000094e8 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    94e8:	b410      	push	{r4}
    isPeripheral = p;
    94ea:	4c09      	ldr	r4, [pc, #36]	; (9510 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    94ec:	4603      	mov	r3, r0
    isPeripheral = p;
    94ee:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    94f0:	4c08      	ldr	r4, [pc, #32]	; (9514 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    94f2:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    94f4:	b139      	cbz	r1, 9506 <_ZN13deviceManager9setDeviceEbb+0x1e>
    94f6:	b11a      	cbz	r2, 9500 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    94f8:	4618      	mov	r0, r3
}
    94fa:	bc10      	pop	{r4}
		initPeripheral();
    94fc:	f7ff bf1e 	b.w	933c <_ZN13deviceManager14initPeripheralEv>
}
    9500:	bc10      	pop	{r4}
		initCentral();
    9502:	f7ff bfa7 	b.w	9454 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9506:	2a00      	cmp	r2, #0
    9508:	d1f6      	bne.n	94f8 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    950a:	bc10      	pop	{r4}
    950c:	4770      	bx	lr
    950e:	bf00      	nop
    9510:	2000becc 	.word	0x2000becc
    9514:	2000bed1 	.word	0x2000bed1

00009518 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9518:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    951a:	4803      	ldr	r0, [pc, #12]	; (9528 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    951c:	f010 f8fc 	bl	19718 <printk>
}
    9520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9524:	f7ff bf84 	b.w	9430 <_ZN13deviceManager9startScanEv>
    9528:	0001e28d 	.word	0x0001e28d

0000952c <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    952c:	b570      	push	{r4, r5, r6, lr}
    952e:	b090      	sub	sp, #64	; 0x40
    9530:	460d      	mov	r5, r1
	int error = bt_conn_get_info(conn,&info);
    9532:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9534:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9536:	f007 f9a5 	bl	10884 <bt_conn_get_info>
	if (error)
    953a:	b120      	cbz	r0, 9546 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    953c:	4826      	ldr	r0, [pc, #152]	; (95d8 <_ZN13deviceManager9connectedEP7bt_connh+0xac>)
    953e:	f010 f8eb 	bl	19718 <printk>
}
    9542:	b010      	add	sp, #64	; 0x40
    9544:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9546:	f89d 4005 	ldrb.w	r4, [sp, #5]
    954a:	bb54      	cbnz	r4, 95a2 <_ZN13deviceManager9connectedEP7bt_connh+0x76>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    954c:	4630      	mov	r0, r6
    954e:	f011 fdf7 	bl	1b140 <bt_conn_get_dst>
    9552:	221e      	movs	r2, #30
    9554:	a908      	add	r1, sp, #32
    9556:	f7ff fe3b 	bl	91d0 <bt_addr_le_to_str.isra.0>
		if (err) {
    955a:	b13d      	cbz	r5, 956c <_ZN13deviceManager9connectedEP7bt_connh+0x40>
			printk("Failed to connect to %s (%u)\n", addr, err);
    955c:	462a      	mov	r2, r5
    955e:	481f      	ldr	r0, [pc, #124]	; (95dc <_ZN13deviceManager9connectedEP7bt_connh+0xb0>)
    9560:	a908      	add	r1, sp, #32
    9562:	f010 f8d9 	bl	19718 <printk>
			startScan();
    9566:	f7ff ff63 	bl	9430 <_ZN13deviceManager9startScanEv>
    956a:	e7ea      	b.n	9542 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected: %s\n", addr);
    956c:	481c      	ldr	r0, [pc, #112]	; (95e0 <_ZN13deviceManager9connectedEP7bt_connh+0xb4>)
    956e:	a908      	add	r1, sp, #32
    9570:	f010 f8d2 	bl	19718 <printk>
		centralConnections[nbrConnectionsCentral] = conn;
    9574:	4b1b      	ldr	r3, [pc, #108]	; (95e4 <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9576:	481c      	ldr	r0, [pc, #112]	; (95e8 <_ZN13deviceManager9connectedEP7bt_connh+0xbc>)
    9578:	781c      	ldrb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    957a:	491c      	ldr	r1, [pc, #112]	; (95ec <_ZN13deviceManager9connectedEP7bt_connh+0xc0>)
		centralConnections[nbrConnectionsCentral] = conn;
    957c:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
		nbrConnectionsCentral++;
    9580:	3401      	adds	r4, #1
    9582:	b2e4      	uxtb	r4, r4
    9584:	701c      	strb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9586:	3c01      	subs	r4, #1
    9588:	462b      	mov	r3, r5
    958a:	4a19      	ldr	r2, [pc, #100]	; (95f0 <_ZN13deviceManager9connectedEP7bt_connh+0xc4>)
    958c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    9590:	f002 fc9a 	bl	bec8 <bt_gatt_dm_start>
		if (err) 
    9594:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9598:	d0d3      	beq.n	9542 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			printk("Could not start service discovery, err %d\n", err);
    959a:	4816      	ldr	r0, [pc, #88]	; (95f4 <_ZN13deviceManager9connectedEP7bt_connh+0xc8>)
			printk("Connection failed (err %u)\n", err);
    959c:	f010 f8bc 	bl	19718 <printk>
			return;
    95a0:	e7cf      	b.n	9542 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    95a2:	2c01      	cmp	r4, #1
    95a4:	d1cd      	bne.n	9542 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    95a6:	b115      	cbz	r5, 95ae <_ZN13deviceManager9connectedEP7bt_connh+0x82>
			printk("Connection failed (err %u)\n", err);
    95a8:	4629      	mov	r1, r5
    95aa:	4813      	ldr	r0, [pc, #76]	; (95f8 <_ZN13deviceManager9connectedEP7bt_connh+0xcc>)
    95ac:	e7f6      	b.n	959c <_ZN13deviceManager9connectedEP7bt_connh+0x70>
		printk("Connected\n");
    95ae:	4813      	ldr	r0, [pc, #76]	; (95fc <_ZN13deviceManager9connectedEP7bt_connh+0xd0>)
    95b0:	f010 f8b2 	bl	19718 <printk>
		connectedP = true;
    95b4:	4b12      	ldr	r3, [pc, #72]	; (9600 <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    95b6:	4628      	mov	r0, r5
		connectedP = true;
    95b8:	701c      	strb	r4, [r3, #0]
		peripheralConn = conn;
    95ba:	4b12      	ldr	r3, [pc, #72]	; (9604 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    95bc:	601e      	str	r6, [r3, #0]
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    95be:	f012 fffc 	bl	1c5ba <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    95c2:	f7ff fe71 	bl	92a8 <_ZN13deviceManager9getDeviceEv>
    95c6:	2803      	cmp	r0, #3
    95c8:	d1bb      	bne.n	9542 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    95ca:	4b06      	ldr	r3, [pc, #24]	; (95e4 <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	2b00      	cmp	r3, #0
    95d0:	d1b7      	bne.n	9542 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    95d2:	f7ff fef5 	bl	93c0 <_ZN13deviceManager8initScanEv>
    95d6:	e7c6      	b.n	9566 <_ZN13deviceManager9connectedEP7bt_connh+0x3a>
    95d8:	0001e2a0 	.word	0x0001e2a0
    95dc:	0001e2c6 	.word	0x0001e2c6
    95e0:	0001e2e4 	.word	0x0001e2e4
    95e4:	2000bed0 	.word	0x2000bed0
    95e8:	2000a45c 	.word	0x2000a45c
    95ec:	0001df80 	.word	0x0001df80
    95f0:	20008140 	.word	0x20008140
    95f4:	0001e2f3 	.word	0x0001e2f3
    95f8:	0001e31e 	.word	0x0001e31e
    95fc:	0001e33a 	.word	0x0001e33a
    9600:	2000beca 	.word	0x2000beca
    9604:	2000a458 	.word	0x2000a458

00009608 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    960c:	b090      	sub	sp, #64	; 0x40
    960e:	460f      	mov	r7, r1
	int error = bt_conn_get_info(conn,&info);
    9610:	a901      	add	r1, sp, #4
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9612:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9614:	f007 f936 	bl	10884 <bt_conn_get_info>
	if (error)
    9618:	4606      	mov	r6, r0
    961a:	b128      	cbz	r0, 9628 <_ZN13deviceManager12disconnectedEP7bt_connh+0x20>
		printk("Cannot get info of connection object\n");
    961c:	4836      	ldr	r0, [pc, #216]	; (96f8 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>)
    961e:	f010 f87b 	bl	19718 <printk>
}
    9622:	b010      	add	sp, #64	; 0x40
    9624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9628:	f89d 4005 	ldrb.w	r4, [sp, #5]
    962c:	2c01      	cmp	r4, #1
    962e:	d10b      	bne.n	9648 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9630:	4639      	mov	r1, r7
    9632:	4832      	ldr	r0, [pc, #200]	; (96fc <_ZN13deviceManager12disconnectedEP7bt_connh+0xf4>)
    9634:	f010 f870 	bl	19718 <printk>
		connectedP = false;
    9638:	4b31      	ldr	r3, [pc, #196]	; (9700 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf8>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    963a:	4630      	mov	r0, r6
		connectedP = false;
    963c:	701e      	strb	r6, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    963e:	f012 ffbf 	bl	1c5c0 <dk_set_led_off>
		startAdvertising();
    9642:	f7ff fe55 	bl	92f0 <_ZN13deviceManager16startAdvertisingEv>
    9646:	e7ec      	b.n	9622 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9648:	2c00      	cmp	r4, #0
    964a:	d1ea      	bne.n	9622 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    964c:	4628      	mov	r0, r5
    964e:	f011 fd77 	bl	1b140 <bt_conn_get_dst>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9652:	4e2c      	ldr	r6, [pc, #176]	; (9704 <_ZN13deviceManager12disconnectedEP7bt_connh+0xfc>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9654:	221e      	movs	r2, #30
    9656:	a908      	add	r1, sp, #32
    9658:	f7ff fdba 	bl	91d0 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    965c:	a908      	add	r1, sp, #32
    965e:	463a      	mov	r2, r7
    9660:	4829      	ldr	r0, [pc, #164]	; (9708 <_ZN13deviceManager12disconnectedEP7bt_connh+0x100>)
    9662:	f010 f859 	bl	19718 <printk>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9666:	7833      	ldrb	r3, [r6, #0]
			if (centralConnections[i] == conn)
    9668:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 970c <_ZN13deviceManager12disconnectedEP7bt_connh+0x104>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    966c:	1e59      	subs	r1, r3, #1
    966e:	b2e7      	uxtb	r7, r4
    9670:	428f      	cmp	r7, r1
    9672:	da17      	bge.n	96a4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x9c>
			if (centralConnections[i] == conn)
    9674:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
    9678:	3401      	adds	r4, #1
    967a:	42aa      	cmp	r2, r5
    967c:	d1f7      	bne.n	966e <_ZN13deviceManager12disconnectedEP7bt_connh+0x66>
				bt_conn_unref(centralConnections[i]);
    967e:	4628      	mov	r0, r5
    9680:	f006 ff6e 	bl	10560 <bt_conn_unref>
				centralConnections[i] = nullptr;
    9684:	2300      	movs	r3, #0
    9686:	f848 3027 	str.w	r3, [r8, r7, lsl #2]
				nbrConnectionsCentral--;
    968a:	7833      	ldrb	r3, [r6, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    968c:	2201      	movs	r2, #1
				nbrConnectionsCentral--;
    968e:	3b01      	subs	r3, #1
    9690:	7033      	strb	r3, [r6, #0]
				disconnectedCode[0] = 11;
    9692:	230b      	movs	r3, #11
    9694:	f88d 3000 	strb.w	r3, [sp]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9698:	4b1d      	ldr	r3, [pc, #116]	; (9710 <_ZN13deviceManager12disconnectedEP7bt_connh+0x108>)
    969a:	4669      	mov	r1, sp
    969c:	6818      	ldr	r0, [r3, #0]
    969e:	f000 fa5b 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
				return;
    96a2:	e7be      	b.n	9622 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		if (nbrConnectionsCentral == 0)
    96a4:	b96b      	cbnz	r3, 96c2 <_ZN13deviceManager12disconnectedEP7bt_connh+0xba>
			connectedC = false;
    96a6:	4a1b      	ldr	r2, [pc, #108]	; (9714 <_ZN13deviceManager12disconnectedEP7bt_connh+0x10c>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    96a8:	4669      	mov	r1, sp
			connectedC = false;
    96aa:	7013      	strb	r3, [r2, #0]
			disconnectedCode[0] = 12;
    96ac:	230c      	movs	r3, #12
    96ae:	f88d 3000 	strb.w	r3, [sp]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    96b2:	4b17      	ldr	r3, [pc, #92]	; (9710 <_ZN13deviceManager12disconnectedEP7bt_connh+0x108>)
    96b4:	2201      	movs	r2, #1
    96b6:	6818      	ldr	r0, [r3, #0]
    96b8:	f000 fa4e 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    96bc:	2001      	movs	r0, #1
    96be:	f012 ff7f 	bl	1c5c0 <dk_set_led_off>
		if (strstr(addr,sensor1))
    96c2:	4915      	ldr	r1, [pc, #84]	; (9718 <_ZN13deviceManager12disconnectedEP7bt_connh+0x110>)
    96c4:	a808      	add	r0, sp, #32
    96c6:	f011 fa0d 	bl	1aae4 <strstr>
    96ca:	b110      	cbz	r0, 96d2 <_ZN13deviceManager12disconnectedEP7bt_connh+0xca>
			once_sensor1 = true;
    96cc:	2201      	movs	r2, #1
    96ce:	4b13      	ldr	r3, [pc, #76]	; (971c <_ZN13deviceManager12disconnectedEP7bt_connh+0x114>)
    96d0:	701a      	strb	r2, [r3, #0]
		if (strstr(addr,sensor2))
    96d2:	4913      	ldr	r1, [pc, #76]	; (9720 <_ZN13deviceManager12disconnectedEP7bt_connh+0x118>)
    96d4:	a808      	add	r0, sp, #32
    96d6:	f011 fa05 	bl	1aae4 <strstr>
    96da:	b110      	cbz	r0, 96e2 <_ZN13deviceManager12disconnectedEP7bt_connh+0xda>
			once_sensor2 = true;
    96dc:	2201      	movs	r2, #1
    96de:	4b11      	ldr	r3, [pc, #68]	; (9724 <_ZN13deviceManager12disconnectedEP7bt_connh+0x11c>)
    96e0:	701a      	strb	r2, [r3, #0]
		if (strstr(addr,sensor3))
    96e2:	4911      	ldr	r1, [pc, #68]	; (9728 <_ZN13deviceManager12disconnectedEP7bt_connh+0x120>)
    96e4:	a808      	add	r0, sp, #32
    96e6:	f011 f9fd 	bl	1aae4 <strstr>
    96ea:	b110      	cbz	r0, 96f2 <_ZN13deviceManager12disconnectedEP7bt_connh+0xea>
			once_sensor3 = true;
    96ec:	2201      	movs	r2, #1
    96ee:	4b0f      	ldr	r3, [pc, #60]	; (972c <_ZN13deviceManager12disconnectedEP7bt_connh+0x124>)
    96f0:	701a      	strb	r2, [r3, #0]
		startScan();	
    96f2:	f7ff fe9d 	bl	9430 <_ZN13deviceManager9startScanEv>
    96f6:	e794      	b.n	9622 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
    96f8:	0001e2a0 	.word	0x0001e2a0
    96fc:	0001e345 	.word	0x0001e345
    9700:	2000beca 	.word	0x2000beca
    9704:	2000bed0 	.word	0x2000bed0
    9708:	0001e370 	.word	0x0001e370
    970c:	2000a45c 	.word	0x2000a45c
    9710:	2000a458 	.word	0x2000a458
    9714:	2000bec9 	.word	0x2000bec9
    9718:	2000be96 	.word	0x2000be96
    971c:	20008565 	.word	0x20008565
    9720:	2000bea7 	.word	0x2000bea7
    9724:	20008566 	.word	0x20008566
    9728:	2000beb8 	.word	0x2000beb8
    972c:	20008567 	.word	0x20008567

00009730 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!subscriptionDone)
    9732:	4e3c      	ldr	r6, [pc, #240]	; (9824 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xf4>)
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9734:	4604      	mov	r4, r0
	if (!subscriptionDone)
    9736:	7833      	ldrb	r3, [r6, #0]
    9738:	2b00      	cmp	r3, #0
    973a:	d134      	bne.n	97a6 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x76>
		chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    973c:	493a      	ldr	r1, [pc, #232]	; (9828 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xf8>)
    973e:	f002 fb97 	bl	be70 <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    9742:	4605      	mov	r5, r0
    9744:	b968      	cbnz	r0, 9762 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x32>
			printk("Missing CSC measurement characteristic\n");
    9746:	4839      	ldr	r0, [pc, #228]	; (982c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xfc>)
			printk("Missing CSC measurement char CCC descriptor\n");
    9748:	f00f ffe6 	bl	19718 <printk>
			err = bt_gatt_dm_data_release(disc);
    974c:	4620      	mov	r0, r4
    974e:	f010 fc7e 	bl	1a04e <bt_gatt_dm_data_release>
			if (err) {
    9752:	4601      	mov	r1, r0
    9754:	b368      	cbz	r0, 97b2 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x82>
				printk("Could not release discovery data, err: %d\n", err);
    9756:	4836      	ldr	r0, [pc, #216]	; (9830 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x100>)
}
    9758:	b003      	add	sp, #12
    975a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				printk("Could not release discovery data, err: %d\n", err);
    975e:	f00f bfdb 	b.w	19718 <printk>
		desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_CSC_MEASUREMENT);
    9762:	4601      	mov	r1, r0
    9764:	4a33      	ldr	r2, [pc, #204]	; (9834 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x104>)
    9766:	4620      	mov	r0, r4
    9768:	f010 fc5f 	bl	1a02a <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    976c:	b908      	cbnz	r0, 9772 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x42>
			printk("Missing CSC measurement char CCC descriptor\n");
    976e:	4832      	ldr	r0, [pc, #200]	; (9838 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x108>)
    9770:	e7ea      	b.n	9748 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x18>
		param.value_handle = desc->handle;
    9772:	8883      	ldrh	r3, [r0, #4]
    9774:	4f31      	ldr	r7, [pc, #196]	; (983c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x10c>)
		desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9776:	4629      	mov	r1, r5
    9778:	4620      	mov	r0, r4
    977a:	4a31      	ldr	r2, [pc, #196]	; (9840 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x110>)
		param.value_handle = desc->handle;
    977c:	813b      	strh	r3, [r7, #8]
		desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    977e:	f010 fc54 	bl	1a02a <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9782:	2800      	cmp	r0, #0
    9784:	d0f3      	beq.n	976e <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x3e>
		param.ccc_handle = desc->handle;
    9786:	8883      	ldrh	r3, [r0, #4]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9788:	4620      	mov	r0, r4
		param.ccc_handle = desc->handle;
    978a:	817b      	strh	r3, [r7, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    978c:	f010 fc00 	bl	19f90 <bt_gatt_dm_conn_get>
    9790:	4639      	mov	r1, r7
    9792:	f00a fae1 	bl	13d58 <bt_gatt_subscribe>
		if (err) {
    9796:	4601      	mov	r1, r0
    9798:	b110      	cbz	r0, 97a0 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x70>
			printk("Subscribtion failed (err %d)\n", err);
    979a:	482a      	ldr	r0, [pc, #168]	; (9844 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x114>)
    979c:	f00f ffbc 	bl	19718 <printk>
		bt_gatt_dm_data_release(disc);
    97a0:	4620      	mov	r0, r4
    97a2:	f010 fc54 	bl	1a04e <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    97a6:	4b28      	ldr	r3, [pc, #160]	; (9848 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x118>)
    97a8:	781a      	ldrb	r2, [r3, #0]
    97aa:	2a01      	cmp	r2, #1
    97ac:	d003      	beq.n	97b6 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x86>
    97ae:	2a02      	cmp	r2, #2
    97b0:	d023      	beq.n	97fa <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xca>
}
    97b2:	b003      	add	sp, #12
    97b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (nbrAddresses == 1)
    97b6:	4b25      	ldr	r3, [pc, #148]	; (984c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x11c>)
    97b8:	781c      	ldrb	r4, [r3, #0]
    97ba:	2c01      	cmp	r4, #1
    97bc:	d10d      	bne.n	97da <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 13;
    97be:	230d      	movs	r3, #13
    97c0:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    97c4:	4b22      	ldr	r3, [pc, #136]	; (9850 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x120>)
    97c6:	4622      	mov	r2, r4
    97c8:	6818      	ldr	r0, [r3, #0]
    97ca:	a901      	add	r1, sp, #4
    97cc:	f000 f9c4 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    97d0:	4820      	ldr	r0, [pc, #128]	; (9854 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x124>)
    97d2:	f00f ffa1 	bl	19718 <printk>
			subscriptionDone = true;
    97d6:	7034      	strb	r4, [r6, #0]
    97d8:	e7eb      	b.n	97b2 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x82>
		else if (nbrAddresses == 2)	
    97da:	2c02      	cmp	r4, #2
    97dc:	d1e9      	bne.n	97b2 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x82>
			connectedCode[0] = 14;
    97de:	230e      	movs	r3, #14
    97e0:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    97e4:	4b1a      	ldr	r3, [pc, #104]	; (9850 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x120>)
    97e6:	a901      	add	r1, sp, #4
    97e8:	6818      	ldr	r0, [r3, #0]
    97ea:	f000 f9b5 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
			startScan();
    97ee:	f7ff fe1f 	bl	9430 <_ZN13deviceManager9startScanEv>
			printk("First discovery completed\n");			
    97f2:	4819      	ldr	r0, [pc, #100]	; (9858 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x128>)
    97f4:	f00f ff90 	bl	19718 <printk>
    97f8:	e7db      	b.n	97b2 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x82>
		connectedCode[0] = 15;
    97fa:	230f      	movs	r3, #15
    97fc:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9800:	4b13      	ldr	r3, [pc, #76]	; (9850 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x120>)
    9802:	2201      	movs	r2, #1
    9804:	6818      	ldr	r0, [r3, #0]
    9806:	a901      	add	r1, sp, #4
    9808:	f000 f9a6 	bl	9b58 <_Z17data_service_sendP7bt_connPKht>
		printk("Second discovery completed\n");
    980c:	4813      	ldr	r0, [pc, #76]	; (985c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x12c>)
    980e:	f00f ff83 	bl	19718 <printk>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9812:	2001      	movs	r0, #1
    9814:	f012 fed1 	bl	1c5ba <dk_set_led_on>
		connectedC = true;	
    9818:	2301      	movs	r3, #1
    981a:	4a11      	ldr	r2, [pc, #68]	; (9860 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x130>)
		subscriptionDone = true;
    981c:	7033      	strb	r3, [r6, #0]
		connectedC = true;	
    981e:	7013      	strb	r3, [r2, #0]
		break;
    9820:	e7c7      	b.n	97b2 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x82>
    9822:	bf00      	nop
    9824:	2000becf 	.word	0x2000becf
    9828:	0001df84 	.word	0x0001df84
    982c:	0001e39e 	.word	0x0001e39e
    9830:	0001e3c6 	.word	0x0001e3c6
    9834:	0001df88 	.word	0x0001df88
    9838:	0001e3f1 	.word	0x0001e3f1
    983c:	2000814c 	.word	0x2000814c
    9840:	0001df8c 	.word	0x0001df8c
    9844:	0001e41e 	.word	0x0001e41e
    9848:	2000bed0 	.word	0x2000bed0
    984c:	2000becd 	.word	0x2000becd
    9850:	2000a458 	.word	0x2000a458
    9854:	0001e43c 	.word	0x0001e43c
    9858:	0001e451 	.word	0x0001e451
    985c:	0001e46c 	.word	0x0001e46c
    9860:	2000bec9 	.word	0x2000bec9

00009864 <_ZN13deviceManager14checkAddressesEPcS0_>:
		       addr, battery_level);
	}
}

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
    9864:	b538      	push	{r3, r4, r5, lr}
	uint8_t cnt = 0;
    9866:	2300      	movs	r3, #0
    9868:	1e42      	subs	r2, r0, #1
    986a:	3901      	subs	r1, #1
    986c:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
    986e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
    9872:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9876:	42a5      	cmp	r5, r4
		{
			cnt++;
    9878:	bf04      	itt	eq
    987a:	3301      	addeq	r3, #1
    987c:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
    987e:	4282      	cmp	r2, r0
    9880:	d1f5      	bne.n	986e <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
		}
	}
	if (cnt == 17)
    9882:	2b11      	cmp	r3, #17
    9884:	d104      	bne.n	9890 <_ZN13deviceManager14checkAddressesEPcS0_+0x2c>
	{
		printk("Address OK\n");
    9886:	4805      	ldr	r0, [pc, #20]	; (989c <_ZN13deviceManager14checkAddressesEPcS0_+0x38>)
    9888:	f00f ff46 	bl	19718 <printk>
		cnt = 0;
		retVal = true;
    988c:	2001      	movs	r0, #1
		printk("address NOT OK\n");
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
    988e:	bd38      	pop	{r3, r4, r5, pc}
		printk("address NOT OK\n");
    9890:	4803      	ldr	r0, [pc, #12]	; (98a0 <_ZN13deviceManager14checkAddressesEPcS0_+0x3c>)
    9892:	f00f ff41 	bl	19718 <printk>
		retVal = false;
    9896:	2000      	movs	r0, #0
    9898:	e7f9      	b.n	988e <_ZN13deviceManager14checkAddressesEPcS0_+0x2a>
    989a:	bf00      	nop
    989c:	0001e488 	.word	0x0001e488
    98a0:	0001e494 	.word	0x0001e494

000098a4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    98a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98a8:	b08e      	sub	sp, #56	; 0x38
    98aa:	4605      	mov	r5, r0
    98ac:	4617      	mov	r7, r2
	nbrAddresses = getNbrOfAddresses();
    98ae:	f000 f983 	bl	9bb8 <_Z17getNbrOfAddressesv>
    98b2:	4b47      	ldr	r3, [pc, #284]	; (99d0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    98b4:	4604      	mov	r4, r0
    98b6:	4e47      	ldr	r6, [pc, #284]	; (99d4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    98b8:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    98ba:	2800      	cmp	r0, #0
    98bc:	d059      	beq.n	9972 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xce>
		ready = true;
    98be:	2101      	movs	r1, #1
		switch (nbrAddresses)
    98c0:	2802      	cmp	r0, #2
		ready = true;
    98c2:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    98c4:	d045      	beq.n	9952 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xae>
    98c6:	2803      	cmp	r0, #3
    98c8:	d049      	beq.n	995e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xba>
    98ca:	4288      	cmp	r0, r1
    98cc:	d103      	bne.n	98d6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x32>
			getAddress(sensor1,1);
    98ce:	4601      	mov	r1, r0
    98d0:	4841      	ldr	r0, [pc, #260]	; (99d8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
			getAddress(sensor2,2);
    98d2:	f000 f977 	bl	9bc4 <_Z10getAddressPch>
	once_sensor3 = false;
    98d6:	f04f 0800 	mov.w	r8, #0
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    98da:	682b      	ldr	r3, [r5, #0]
    98dc:	221e      	movs	r2, #30
    98de:	6818      	ldr	r0, [r3, #0]
    98e0:	a906      	add	r1, sp, #24
    98e2:	f7ff fc75 	bl	91d0 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    98e6:	682b      	ldr	r3, [r5, #0]
    98e8:	2212      	movs	r2, #18
    98ea:	6818      	ldr	r0, [r3, #0]
    98ec:	a901      	add	r1, sp, #4
    98ee:	f7ff fc6f 	bl	91d0 <bt_addr_le_to_str.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
    98f2:	4b3a      	ldr	r3, [pc, #232]	; (99dc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    98f4:	4a3a      	ldr	r2, [pc, #232]	; (99e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
	once_sensor3 = false;
    98f6:	4c3b      	ldr	r4, [pc, #236]	; (99e4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
	printk("Filters matched. Address: %s connectable: %s\n",
    98f8:	4547      	cmp	r7, r8
    98fa:	bf08      	it	eq
    98fc:	461a      	moveq	r2, r3
    98fe:	483a      	ldr	r0, [pc, #232]	; (99e8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9900:	a906      	add	r1, sp, #24
	once_sensor3 = false;
    9902:	f884 8000 	strb.w	r8, [r4]
	printk("Filters matched. Address: %s connectable: %s\n",
    9906:	f00f ff07 	bl	19718 <printk>
	if (ready)
    990a:	7833      	ldrb	r3, [r6, #0]
    990c:	2b00      	cmp	r3, #0
    990e:	d040      	beq.n	9992 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xee>
		printk("once1 %d\n", once_sensor1);
    9910:	4f36      	ldr	r7, [pc, #216]	; (99ec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
		printk("once2 %d\n", once_sensor2);
    9912:	4e37      	ldr	r6, [pc, #220]	; (99f0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14c>)
		printk("once1 %d\n", once_sensor1);
    9914:	7839      	ldrb	r1, [r7, #0]
    9916:	4837      	ldr	r0, [pc, #220]	; (99f4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9918:	f00f fefe 	bl	19718 <printk>
		printk("once2 %d\n", once_sensor2);
    991c:	7831      	ldrb	r1, [r6, #0]
    991e:	4836      	ldr	r0, [pc, #216]	; (99f8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x154>)
    9920:	f00f fefa 	bl	19718 <printk>
		bt_scan_stop();
    9924:	f010 fbab 	bl	1a07e <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9928:	492b      	ldr	r1, [pc, #172]	; (99d8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    992a:	a801      	add	r0, sp, #4
    992c:	f7ff ff9a 	bl	9864 <_ZN13deviceManager14checkAddressesEPcS0_>
    9930:	b308      	cbz	r0, 9976 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd2>
    9932:	783b      	ldrb	r3, [r7, #0]
    9934:	b1fb      	cbz	r3, 9976 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd2>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9936:	4b31      	ldr	r3, [pc, #196]	; (99fc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    9938:	6828      	ldr	r0, [r5, #0]
    993a:	781a      	ldrb	r2, [r3, #0]
    993c:	4b30      	ldr	r3, [pc, #192]	; (9a00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x15c>)
    993e:	4931      	ldr	r1, [pc, #196]	; (9a04 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x160>)
    9940:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9944:	686a      	ldr	r2, [r5, #4]
			once_sensor1 = false;
    9946:	f887 8000 	strb.w	r8, [r7]
			err = bt_conn_le_create(device_info->recv_info->addr,
    994a:	6800      	ldr	r0, [r0, #0]
    994c:	f006 ffc6 	bl	108dc <bt_conn_le_create>
}
    9950:	e01f      	b.n	9992 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xee>
			getAddress(sensor1,1);
    9952:	4821      	ldr	r0, [pc, #132]	; (99d8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9954:	f000 f936 	bl	9bc4 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9958:	4621      	mov	r1, r4
    995a:	482b      	ldr	r0, [pc, #172]	; (9a08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x164>)
    995c:	e7b9      	b.n	98d2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    995e:	481e      	ldr	r0, [pc, #120]	; (99d8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9960:	f000 f930 	bl	9bc4 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9964:	2102      	movs	r1, #2
    9966:	4828      	ldr	r0, [pc, #160]	; (9a08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x164>)
    9968:	f000 f92c 	bl	9bc4 <_Z10getAddressPch>
			getAddress(sensor3,3);
    996c:	4621      	mov	r1, r4
    996e:	4827      	ldr	r0, [pc, #156]	; (9a0c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x168>)
    9970:	e7af      	b.n	98d2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		ready = false;
    9972:	7030      	strb	r0, [r6, #0]
    9974:	e7af      	b.n	98d6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x32>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9976:	4924      	ldr	r1, [pc, #144]	; (9a08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x164>)
    9978:	a801      	add	r0, sp, #4
    997a:	f7ff ff73 	bl	9864 <_ZN13deviceManager14checkAddressesEPcS0_>
    997e:	b108      	cbz	r0, 9984 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe0>
    9980:	7833      	ldrb	r3, [r6, #0]
    9982:	b94b      	cbnz	r3, 9998 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf4>
		else if ((strstr(addrShort,sensor3) != nullptr && once_sensor3))
    9984:	4921      	ldr	r1, [pc, #132]	; (9a0c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x168>)
    9986:	a801      	add	r0, sp, #4
    9988:	f011 f8ac 	bl	1aae4 <strstr>
    998c:	b978      	cbnz	r0, 99ae <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10a>
			startScan();
    998e:	f7ff fd4f 	bl	9430 <_ZN13deviceManager9startScanEv>
}
    9992:	b00e      	add	sp, #56	; 0x38
    9994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			once_sensor2 = false;
    9998:	2300      	movs	r3, #0
    999a:	7033      	strb	r3, [r6, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    999c:	4b17      	ldr	r3, [pc, #92]	; (99fc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    999e:	6828      	ldr	r0, [r5, #0]
    99a0:	781a      	ldrb	r2, [r3, #0]
    99a2:	4b17      	ldr	r3, [pc, #92]	; (9a00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x15c>)
    99a4:	491a      	ldr	r1, [pc, #104]	; (9a10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x16c>)
    99a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    99aa:	686a      	ldr	r2, [r5, #4]
    99ac:	e7cd      	b.n	994a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa6>
		else if ((strstr(addrShort,sensor3) != nullptr && once_sensor3))
    99ae:	7823      	ldrb	r3, [r4, #0]
    99b0:	2b00      	cmp	r3, #0
    99b2:	d0ec      	beq.n	998e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xea>
			once_sensor3 = false;
    99b4:	2300      	movs	r3, #0
    99b6:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    99b8:	f010 fb61 	bl	1a07e <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    99bc:	4b0f      	ldr	r3, [pc, #60]	; (99fc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    99be:	6828      	ldr	r0, [r5, #0]
    99c0:	781a      	ldrb	r2, [r3, #0]
    99c2:	4b0f      	ldr	r3, [pc, #60]	; (9a00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x15c>)
    99c4:	4913      	ldr	r1, [pc, #76]	; (9a14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x170>)
    99c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    99ca:	686a      	ldr	r2, [r5, #4]
    99cc:	e7bd      	b.n	994a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa6>
    99ce:	bf00      	nop
    99d0:	2000becd 	.word	0x2000becd
    99d4:	2000bed2 	.word	0x2000bed2
    99d8:	2000be96 	.word	0x2000be96
    99dc:	0001e4a8 	.word	0x0001e4a8
    99e0:	0001e4a4 	.word	0x0001e4a4
    99e4:	20008567 	.word	0x20008567
    99e8:	0001e4ab 	.word	0x0001e4ab
    99ec:	20008565 	.word	0x20008565
    99f0:	20008566 	.word	0x20008566
    99f4:	0001e4d9 	.word	0x0001e4d9
    99f8:	0001e4e3 	.word	0x0001e4e3
    99fc:	2000bed0 	.word	0x2000bed0
    9a00:	2000a45c 	.word	0x2000a45c
    9a04:	0001d66c 	.word	0x0001d66c
    9a08:	2000bea7 	.word	0x2000bea7
    9a0c:	2000beb8 	.word	0x2000beb8
    9a10:	0001d67c 	.word	0x0001d67c
    9a14:	0001d68c 	.word	0x0001d68c

00009a18 <_ZN7dataCSC8saveDataEPKv>:
void dataCSC::saveData(const void *data) {
    9a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a1a:	4604      	mov	r4, r0
    type = ((uint8_t*)data)[0];
    9a1c:	780b      	ldrb	r3, [r1, #0]
void dataCSC::saveData(const void *data) {
    9a1e:	460d      	mov	r5, r1
    type = ((uint8_t*)data)[0];
    9a20:	7403      	strb	r3, [r0, #16]
    val2 = ((uint8_t*)data)[4];
    9a22:	790f      	ldrb	r7, [r1, #4]
    val3 = ((uint8_t*)data)[6];
    9a24:	798e      	ldrb	r6, [r1, #6]
    printk("val1: %d\n",val1);
    9a26:	4816      	ldr	r0, [pc, #88]	; (9a80 <_ZN7dataCSC8saveDataEPKv+0x68>)
    9a28:	7889      	ldrb	r1, [r1, #2]
    9a2a:	f00f fe75 	bl	19718 <printk>
    printk("val2: %d\n",val2);
    9a2e:	4639      	mov	r1, r7
    9a30:	4814      	ldr	r0, [pc, #80]	; (9a84 <_ZN7dataCSC8saveDataEPKv+0x6c>)
    9a32:	f00f fe71 	bl	19718 <printk>
    printk("val3: %d\n",val3);
    9a36:	4631      	mov	r1, r6
    9a38:	4813      	ldr	r0, [pc, #76]	; (9a88 <_ZN7dataCSC8saveDataEPKv+0x70>)
    9a3a:	f00f fe6d 	bl	19718 <printk>
    switch (type)
    9a3e:	7c23      	ldrb	r3, [r4, #16]
    9a40:	2b01      	cmp	r3, #1
    9a42:	d006      	beq.n	9a52 <_ZN7dataCSC8saveDataEPKv+0x3a>
    9a44:	2b02      	cmp	r3, #2
    9a46:	d00f      	beq.n	9a68 <_ZN7dataCSC8saveDataEPKv+0x50>
}
    9a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        printk("Unknown type\n");
    9a4c:	480f      	ldr	r0, [pc, #60]	; (9a8c <_ZN7dataCSC8saveDataEPKv+0x74>)
    9a4e:	f00f be63 	b.w	19718 <printk>
        oldSumRevSpeed = sumRevSpeed;
    9a52:	8823      	ldrh	r3, [r4, #0]
    9a54:	8063      	strh	r3, [r4, #2]
        oldLastEventSpeed = lastEventSpeed;
    9a56:	8923      	ldrh	r3, [r4, #8]
    9a58:	8163      	strh	r3, [r4, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    9a5a:	f8b5 3001 	ldrh.w	r3, [r5, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9a5e:	8023      	strh	r3, [r4, #0]
    9a60:	f8b5 3005 	ldrh.w	r3, [r5, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9a64:	8123      	strh	r3, [r4, #8]
}
    9a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        oldSumRevCadence = sumRevCadence;
    9a68:	88a3      	ldrh	r3, [r4, #4]
    9a6a:	80e3      	strh	r3, [r4, #6]
        oldLastEventCadence  = lastEventCadence;
    9a6c:	89a3      	ldrh	r3, [r4, #12]
    9a6e:	81e3      	strh	r3, [r4, #14]
    9a70:	f8b5 3001 	ldrh.w	r3, [r5, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9a74:	80a3      	strh	r3, [r4, #4]
    9a76:	f8b5 3003 	ldrh.w	r3, [r5, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9a7a:	81a3      	strh	r3, [r4, #12]
        break;
    9a7c:	e7f3      	b.n	9a66 <_ZN7dataCSC8saveDataEPKv+0x4e>
    9a7e:	bf00      	nop
    9a80:	0001e4ff 	.word	0x0001e4ff
    9a84:	0001e509 	.word	0x0001e509
    9a88:	0001e513 	.word	0x0001e513
    9a8c:	0001e51d 	.word	0x0001e51d

00009a90 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9a94:	8985      	ldrh	r5, [r0, #12]
    9a96:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9a98:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9a9a:	429d      	cmp	r5, r3
    9a9c:	d02f      	beq.n	9afe <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9a9e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9aa2:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9aa6:	45c8      	cmp	r8, r9
    9aa8:	d029      	beq.n	9afe <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9aaa:	1aed      	subs	r5, r5, r3
    9aac:	4628      	mov	r0, r5
    9aae:	f7fe fd19 	bl	84e4 <__aeabi_i2d>
    9ab2:	2200      	movs	r2, #0
    9ab4:	4b13      	ldr	r3, [pc, #76]	; (9b04 <_ZN7dataCSC7calcRPMEv+0x74>)
    9ab6:	f7fe fd7f 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9aba:	2200      	movs	r2, #0
    9abc:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9abe:	4606      	mov	r6, r0
    9ac0:	460f      	mov	r7, r1
        if (time < 0)
    9ac2:	f7fe ffeb 	bl	8a9c <__aeabi_dcmplt>
    9ac6:	b130      	cbz	r0, 9ad6 <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9ac8:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9acc:	30ff      	adds	r0, #255	; 0xff
    9ace:	f7fe fd09 	bl	84e4 <__aeabi_i2d>
    9ad2:	4606      	mov	r6, r0
    9ad4:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9ad6:	203c      	movs	r0, #60	; 0x3c
    9ad8:	eba8 0809 	sub.w	r8, r8, r9
    9adc:	fb00 f008 	mul.w	r0, r0, r8
    9ae0:	f7fe fd00 	bl	84e4 <__aeabi_i2d>
    9ae4:	4632      	mov	r2, r6
    9ae6:	463b      	mov	r3, r7
    9ae8:	f7fe fe90 	bl	880c <__aeabi_ddiv>
    9aec:	4602      	mov	r2, r0
    9aee:	460b      	mov	r3, r1
    9af0:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9af4:	f7fe fffa 	bl	8aec <__aeabi_d2uiz>
    9af8:	b280      	uxth	r0, r0
}
    9afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9afe:	2000      	movs	r0, #0
    9b00:	e7fb      	b.n	9afa <_ZN7dataCSC7calcRPMEv+0x6a>
    9b02:	bf00      	nop
    9b04:	3f500000 	.word	0x3f500000

00009b08 <_Z15on_cccd_changedPK12bt_gatt_attrt>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    9b08:	2901      	cmp	r1, #1
    9b0a:	d004      	beq.n	9b16 <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9b0c:	2902      	cmp	r1, #2
    9b0e:	d005      	beq.n	9b1c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9b10:	b931      	cbnz	r1, 9b20 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9b12:	4804      	ldr	r0, [pc, #16]	; (9b24 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9b14:	e000      	b.n	9b18 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9b16:	4804      	ldr	r0, [pc, #16]	; (9b28 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9b18:	f00f bdfe 	b.w	19718 <printk>
            printk("Notifications ON with Indications\n");
    9b1c:	4803      	ldr	r0, [pc, #12]	; (9b2c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9b1e:	e7fb      	b.n	9b18 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9b20:	4803      	ldr	r0, [pc, #12]	; (9b30 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9b22:	e7f9      	b.n	9b18 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9b24:	0001e560 	.word	0x0001e560
    9b28:	0001e52b 	.word	0x0001e52b
    9b2c:	0001e53d 	.word	0x0001e53d
    9b30:	0001e573 	.word	0x0001e573

00009b34 <_Z17data_service_initv>:
{
    9b34:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9b36:	22f0      	movs	r2, #240	; 0xf0
    9b38:	2100      	movs	r1, #0
    9b3a:	4805      	ldr	r0, [pc, #20]	; (9b50 <_Z17data_service_initv+0x1c>)
    9b3c:	f011 f877 	bl	1ac2e <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9b40:	22f0      	movs	r2, #240	; 0xf0
    9b42:	2100      	movs	r1, #0
    9b44:	4803      	ldr	r0, [pc, #12]	; (9b54 <_Z17data_service_initv+0x20>)
    9b46:	f011 f872 	bl	1ac2e <memset>
}
    9b4a:	2000      	movs	r0, #0
    9b4c:	bd08      	pop	{r3, pc}
    9b4e:	bf00      	nop
    9b50:	2000bf07 	.word	0x2000bf07
    9b54:	2000bff7 	.word	0x2000bff7

00009b58 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9b58:	2300      	movs	r3, #0
{
    9b5a:	b510      	push	{r4, lr}
    9b5c:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9b5e:	9303      	str	r3, [sp, #12]
    9b60:	9305      	str	r3, [sp, #20]
    9b62:	4b0d      	ldr	r3, [pc, #52]	; (9b98 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9b64:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9b68:	9300      	str	r3, [sp, #0]
    9b6a:	4b0c      	ldr	r3, [pc, #48]	; (9b9c <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9b6c:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9b6e:	9304      	str	r3, [sp, #16]
    };
    9b70:	4b0b      	ldr	r3, [pc, #44]	; (9ba0 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9b72:	4604      	mov	r4, r0
    };
    9b74:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9b78:	4619      	mov	r1, r3
    9b7a:	f009 fcd9 	bl	13530 <bt_gatt_is_subscribed>
    9b7e:	b148      	cbz	r0, 9b94 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9b80:	4669      	mov	r1, sp
    9b82:	4620      	mov	r0, r4
    9b84:	f009 faf2 	bl	1316c <bt_gatt_notify_cb>
    9b88:	b110      	cbz	r0, 9b90 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9b8a:	4806      	ldr	r0, [pc, #24]	; (9ba4 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9b8c:	f00f fdc4 	bl	19718 <printk>
    }
}
    9b90:	b006      	add	sp, #24
    9b92:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9b94:	4804      	ldr	r0, [pc, #16]	; (9ba8 <_Z17data_service_sendP7bt_connPKht+0x50>)
    9b96:	e7f9      	b.n	9b8c <_Z17data_service_sendP7bt_connPKht+0x34>
    9b98:	0001e688 	.word	0x0001e688
    9b9c:	000195e1 	.word	0x000195e1
    9ba0:	0001d73c 	.word	0x0001d73c
    9ba4:	0001e5d2 	.word	0x0001e5d2
    9ba8:	0001e5f6 	.word	0x0001e5f6

00009bac <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    9bac:	4b01      	ldr	r3, [pc, #4]	; (9bb4 <_Z11getDiameterv+0x8>)
    9bae:	e9d3 0100 	ldrd	r0, r1, [r3]
    9bb2:	4770      	bx	lr
    9bb4:	20008808 	.word	0x20008808

00009bb8 <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    9bb8:	4b01      	ldr	r3, [pc, #4]	; (9bc0 <_Z17getNbrOfAddressesv+0x8>)
    9bba:	7818      	ldrb	r0, [r3, #0]
    9bbc:	4770      	bx	lr
    9bbe:	bf00      	nop
    9bc0:	2000c0e8 	.word	0x2000c0e8

00009bc4 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    9bc4:	2902      	cmp	r1, #2
    9bc6:	d00d      	beq.n	9be4 <_Z10getAddressPch+0x20>
    9bc8:	2903      	cmp	r1, #3
    9bca:	d015      	beq.n	9bf8 <_Z10getAddressPch+0x34>
    9bcc:	2901      	cmp	r1, #1
    9bce:	d11c      	bne.n	9c0a <_Z10getAddressPch+0x46>
    9bd0:	4a0e      	ldr	r2, [pc, #56]	; (9c0c <_Z10getAddressPch+0x48>)
    9bd2:	1e43      	subs	r3, r0, #1
    9bd4:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    9bd6:	f812 1b01 	ldrb.w	r1, [r2], #1
    9bda:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9bde:	4283      	cmp	r3, r0
    9be0:	d1f9      	bne.n	9bd6 <_Z10getAddressPch+0x12>
    9be2:	4770      	bx	lr
    9be4:	4a0a      	ldr	r2, [pc, #40]	; (9c10 <_Z10getAddressPch+0x4c>)
    9be6:	1e43      	subs	r3, r0, #1
    9be8:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    9bea:	f812 1b01 	ldrb.w	r1, [r2], #1
    9bee:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9bf2:	4283      	cmp	r3, r0
    9bf4:	d1f9      	bne.n	9bea <_Z10getAddressPch+0x26>
    9bf6:	4770      	bx	lr
    9bf8:	4a06      	ldr	r2, [pc, #24]	; (9c14 <_Z10getAddressPch+0x50>)
    9bfa:	1e43      	subs	r3, r0, #1
    9bfc:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    9bfe:	f812 1b01 	ldrb.w	r1, [r2], #1
    9c02:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9c06:	4283      	cmp	r3, r0
    9c08:	d1f9      	bne.n	9bfe <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    9c0a:	4770      	bx	lr
    9c0c:	2000bed3 	.word	0x2000bed3
    9c10:	2000bee4 	.word	0x2000bee4
    9c14:	2000bef5 	.word	0x2000bef5

00009c18 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9c18:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9c1a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    9c1c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9c20:	2b02      	cmp	r3, #2
{
    9c22:	4604      	mov	r4, r0
    9c24:	460e      	mov	r6, r1
	notify->result = res;
    9c26:	6081      	str	r1, [r0, #8]
	switch (method) {
    9c28:	d010      	beq.n	9c4c <sys_notify_finalize+0x34>
    9c2a:	2b03      	cmp	r3, #3
    9c2c:	d004      	beq.n	9c38 <sys_notify_finalize+0x20>
    9c2e:	2b01      	cmp	r3, #1
    9c30:	d10f      	bne.n	9c52 <sys_notify_finalize+0x3a>
    9c32:	2500      	movs	r5, #0
    9c34:	4628      	mov	r0, r5
    9c36:	e001      	b.n	9c3c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9c38:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9c3a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9c3c:	2300      	movs	r3, #0
    9c3e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9c40:	b110      	cbz	r0, 9c48 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9c42:	4631      	mov	r1, r6
    9c44:	f00f fc3a 	bl	194bc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9c48:	4628      	mov	r0, r5
    9c4a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    9c4c:	2500      	movs	r5, #0
		sig = notify->method.signal;
    9c4e:	6800      	ldr	r0, [r0, #0]
		break;
    9c50:	e7f4      	b.n	9c3c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9c52:	2245      	movs	r2, #69	; 0x45
    9c54:	4904      	ldr	r1, [pc, #16]	; (9c68 <sys_notify_finalize+0x50>)
    9c56:	4805      	ldr	r0, [pc, #20]	; (9c6c <sys_notify_finalize+0x54>)
    9c58:	f00f fd5e 	bl	19718 <printk>
    9c5c:	2145      	movs	r1, #69	; 0x45
    9c5e:	4802      	ldr	r0, [pc, #8]	; (9c68 <sys_notify_finalize+0x50>)
    9c60:	f010 f800 	bl	19c64 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    9c64:	2500      	movs	r5, #0
    9c66:	e7e8      	b.n	9c3a <sys_notify_finalize+0x22>
    9c68:	0001e699 	.word	0x0001e699
    9c6c:	0001e6bc 	.word	0x0001e6bc

00009c70 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9c70:	680b      	ldr	r3, [r1, #0]
    9c72:	3301      	adds	r3, #1
    9c74:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    9c76:	4b01      	ldr	r3, [pc, #4]	; (9c7c <char_out+0xc>)
    9c78:	681b      	ldr	r3, [r3, #0]
    9c7a:	4718      	bx	r3
    9c7c:	200081f0 	.word	0x200081f0

00009c80 <__printk_hook_install>:
	_char_out = fn;
    9c80:	4b01      	ldr	r3, [pc, #4]	; (9c88 <__printk_hook_install+0x8>)
    9c82:	6018      	str	r0, [r3, #0]
}
    9c84:	4770      	bx	lr
    9c86:	bf00      	nop
    9c88:	200081f0 	.word	0x200081f0

00009c8c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    9c8c:	b507      	push	{r0, r1, r2, lr}
    9c8e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    9c90:	2100      	movs	r1, #0
{
    9c92:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    9c94:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    9c96:	4803      	ldr	r0, [pc, #12]	; (9ca4 <vprintk+0x18>)
    9c98:	a901      	add	r1, sp, #4
    9c9a:	f000 fbe9 	bl	a470 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    9c9e:	b003      	add	sp, #12
    9ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ca4:	00009c71 	.word	0x00009c71

00009ca8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9ca8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9caa:	2500      	movs	r5, #0
{
    9cac:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    9cae:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    9cb2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    9cb4:	a901      	add	r1, sp, #4
    9cb6:	4805      	ldr	r0, [pc, #20]	; (9ccc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    9cb8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    9cba:	f000 fbd9 	bl	a470 <cbvprintf>

	if (ctx.count < ctx.max) {
    9cbe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    9cc2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9cc4:	bfb8      	it	lt
    9cc6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9cc8:	b005      	add	sp, #20
    9cca:	bd30      	pop	{r4, r5, pc}
    9ccc:	000196f3 	.word	0x000196f3

00009cd0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9cd4:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    9cd8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9cda:	f01a 0f08 	tst.w	sl, #8
{
    9cde:	4693      	mov	fp, r2
	if (processing) {
    9ce0:	d01c      	beq.n	9d1c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    9ce2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9ce4:	bf0c      	ite	eq
    9ce6:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    9cea:	f04a 0a20 	orrne.w	sl, sl, #32
    9cee:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9cf2:	f104 0014 	add.w	r0, r4, #20
    9cf6:	f00e fd49 	bl	1878c <z_spin_unlock_valid>
    9cfa:	b940      	cbnz	r0, 9d0e <process_event+0x3e>
    9cfc:	4992      	ldr	r1, [pc, #584]	; (9f48 <process_event+0x278>)
    9cfe:	4893      	ldr	r0, [pc, #588]	; (9f4c <process_event+0x27c>)
    9d00:	22a7      	movs	r2, #167	; 0xa7
    9d02:	f00f fd09 	bl	19718 <printk>
    9d06:	21a7      	movs	r1, #167	; 0xa7
    9d08:	488f      	ldr	r0, [pc, #572]	; (9f48 <process_event+0x278>)
    9d0a:	f00f ffab 	bl	19c64 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9d0e:	f38b 8811 	msr	BASEPRI, fp
    9d12:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    9d16:	b003      	add	sp, #12
    9d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    9d1c:	4f8c      	ldr	r7, [pc, #560]	; (9f50 <process_event+0x280>)
    9d1e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 9f4c <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9d22:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    9d26:	2902      	cmp	r1, #2
    9d28:	d106      	bne.n	9d38 <process_event+0x68>
			evt = process_recheck(mgr);
    9d2a:	4620      	mov	r0, r4
    9d2c:	f00f fd0e 	bl	1974c <process_recheck>
		if (evt == EVT_NOP) {
    9d30:	2800      	cmp	r0, #0
    9d32:	d0de      	beq.n	9cf2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    9d34:	2801      	cmp	r0, #1
    9d36:	d163      	bne.n	9e00 <process_event+0x130>
			res = mgr->last_res;
    9d38:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9d3c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9d3e:	f1b9 0f00 	cmp.w	r9, #0
    9d42:	da19      	bge.n	9d78 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    9d44:	2600      	movs	r6, #0
		*clients = mgr->clients;
    9d46:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d48:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    9d4c:	e9c4 6600 	strd	r6, r6, [r4]
    9d50:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9d54:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d56:	8ba3      	ldrh	r3, [r4, #28]
    9d58:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9d5c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d5e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    9d60:	d003      	beq.n	9d6a <process_event+0x9a>
		if (do_monitors
    9d62:	68a2      	ldr	r2, [r4, #8]
    9d64:	2a00      	cmp	r2, #0
    9d66:	f040 80f5 	bne.w	9f54 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    9d6a:	b915      	cbnz	r5, 9d72 <process_event+0xa2>
		    || (transit != NULL)) {
    9d6c:	2e00      	cmp	r6, #0
    9d6e:	f000 812f 	beq.w	9fd0 <process_event+0x300>
    9d72:	f04f 0a00 	mov.w	sl, #0
    9d76:	e0ef      	b.n	9f58 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9d78:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9d7c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9d7e:	2901      	cmp	r1, #1
    9d80:	d820      	bhi.n	9dc4 <process_event+0xf4>
	list->head = NULL;
    9d82:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d84:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    9d88:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    9d8a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d8c:	b29b      	uxth	r3, r3
	list->tail = NULL;
    9d8e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9d92:	d10a      	bne.n	9daa <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9d94:	b13d      	cbz	r5, 9da6 <process_event+0xd6>
    9d96:	4629      	mov	r1, r5
    9d98:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    9d9a:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    9d9c:	3201      	adds	r2, #1
    9d9e:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9da0:	2900      	cmp	r1, #0
    9da2:	d1fa      	bne.n	9d9a <process_event+0xca>
    9da4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9da6:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9daa:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9dac:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9dae:	f00f fccd 	bl	1974c <process_recheck>
    9db2:	4606      	mov	r6, r0
    9db4:	2800      	cmp	r0, #0
    9db6:	d0ce      	beq.n	9d56 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9db8:	8ba3      	ldrh	r3, [r4, #28]
    9dba:	f043 0320 	orr.w	r3, r3, #32
    9dbe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    9dc0:	2600      	movs	r6, #0
    9dc2:	e7c8      	b.n	9d56 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9dc4:	2a04      	cmp	r2, #4
    9dc6:	d10d      	bne.n	9de4 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9dc8:	f023 0307 	bic.w	r3, r3, #7
    9dcc:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    9dce:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9dd0:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9dd2:	f00f fcbb 	bl	1974c <process_recheck>
    9dd6:	4605      	mov	r5, r0
    9dd8:	b180      	cbz	r0, 9dfc <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9dda:	f042 0220 	orr.w	r2, r2, #32
    9dde:	2500      	movs	r5, #0
    9de0:	83a2      	strh	r2, [r4, #28]
    9de2:	e7ed      	b.n	9dc0 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    9de4:	f240 1219 	movw	r2, #281	; 0x119
    9de8:	4639      	mov	r1, r7
    9dea:	4640      	mov	r0, r8
    9dec:	f00f fc94 	bl	19718 <printk>
    9df0:	f240 1119 	movw	r1, #281	; 0x119
    9df4:	4638      	mov	r0, r7
    9df6:	f00f ff35 	bl	19c64 <assert_post_action>
    9dfa:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    9dfc:	462e      	mov	r6, r5
    9dfe:	e7aa      	b.n	9d56 <process_event+0x86>
		} else if (evt == EVT_START) {
    9e00:	2803      	cmp	r0, #3
    9e02:	d131      	bne.n	9e68 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    9e04:	f1ba 0f00 	cmp.w	sl, #0
    9e08:	d00a      	beq.n	9e20 <process_event+0x150>
    9e0a:	4639      	mov	r1, r7
    9e0c:	4640      	mov	r0, r8
    9e0e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    9e12:	f00f fc81 	bl	19718 <printk>
    9e16:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9e1a:	4638      	mov	r0, r7
    9e1c:	f00f ff22 	bl	19c64 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9e20:	6823      	ldr	r3, [r4, #0]
    9e22:	b953      	cbnz	r3, 9e3a <process_event+0x16a>
    9e24:	4639      	mov	r1, r7
    9e26:	4640      	mov	r0, r8
    9e28:	f240 1255 	movw	r2, #341	; 0x155
    9e2c:	f00f fc74 	bl	19718 <printk>
    9e30:	f240 1155 	movw	r1, #341	; 0x155
    9e34:	4638      	mov	r0, r7
    9e36:	f00f ff15 	bl	19c64 <assert_post_action>
			transit = mgr->transitions->start;
    9e3a:	6923      	ldr	r3, [r4, #16]
    9e3c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    9e3e:	b956      	cbnz	r6, 9e56 <process_event+0x186>
    9e40:	4639      	mov	r1, r7
    9e42:	4640      	mov	r0, r8
    9e44:	f44f 72ac 	mov.w	r2, #344	; 0x158
    9e48:	f00f fc66 	bl	19718 <printk>
    9e4c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    9e50:	4638      	mov	r0, r7
    9e52:	f00f ff07 	bl	19c64 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e56:	8ba3      	ldrh	r3, [r4, #28]
    9e58:	f023 0307 	bic.w	r3, r3, #7
    9e5c:	f043 0306 	orr.w	r3, r3, #6
}
    9e60:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    9e62:	83a3      	strh	r3, [r4, #28]
		res = 0;
    9e64:	46a9      	mov	r9, r5
}
    9e66:	e776      	b.n	9d56 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    9e68:	2804      	cmp	r0, #4
    9e6a:	d12e      	bne.n	9eca <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    9e6c:	f1ba 0f02 	cmp.w	sl, #2
    9e70:	d00a      	beq.n	9e88 <process_event+0x1b8>
    9e72:	4639      	mov	r1, r7
    9e74:	4640      	mov	r0, r8
    9e76:	f240 125b 	movw	r2, #347	; 0x15b
    9e7a:	f00f fc4d 	bl	19718 <printk>
    9e7e:	f240 115b 	movw	r1, #347	; 0x15b
    9e82:	4638      	mov	r0, r7
    9e84:	f00f feee 	bl	19c64 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    9e88:	8be3      	ldrh	r3, [r4, #30]
    9e8a:	b153      	cbz	r3, 9ea2 <process_event+0x1d2>
    9e8c:	4639      	mov	r1, r7
    9e8e:	4640      	mov	r0, r8
    9e90:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    9e94:	f00f fc40 	bl	19718 <printk>
    9e98:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    9e9c:	4638      	mov	r0, r7
    9e9e:	f00f fee1 	bl	19c64 <assert_post_action>
			transit = mgr->transitions->stop;
    9ea2:	6923      	ldr	r3, [r4, #16]
    9ea4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    9ea6:	b956      	cbnz	r6, 9ebe <process_event+0x1ee>
    9ea8:	4639      	mov	r1, r7
    9eaa:	4640      	mov	r0, r8
    9eac:	f240 125f 	movw	r2, #351	; 0x15f
    9eb0:	f00f fc32 	bl	19718 <printk>
    9eb4:	f240 115f 	movw	r1, #351	; 0x15f
    9eb8:	4638      	mov	r0, r7
    9eba:	f00f fed3 	bl	19c64 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ebe:	8ba3      	ldrh	r3, [r4, #28]
    9ec0:	f023 0307 	bic.w	r3, r3, #7
    9ec4:	f043 0304 	orr.w	r3, r3, #4
    9ec8:	e7ca      	b.n	9e60 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    9eca:	2805      	cmp	r0, #5
    9ecc:	d12e      	bne.n	9f2c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    9ece:	f1ba 0f01 	cmp.w	sl, #1
    9ed2:	d00a      	beq.n	9eea <process_event+0x21a>
    9ed4:	4639      	mov	r1, r7
    9ed6:	4640      	mov	r0, r8
    9ed8:	f44f 72b1 	mov.w	r2, #354	; 0x162
    9edc:	f00f fc1c 	bl	19718 <printk>
    9ee0:	f44f 71b1 	mov.w	r1, #354	; 0x162
    9ee4:	4638      	mov	r0, r7
    9ee6:	f00f febd 	bl	19c64 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9eea:	6823      	ldr	r3, [r4, #0]
    9eec:	b953      	cbnz	r3, 9f04 <process_event+0x234>
    9eee:	4639      	mov	r1, r7
    9ef0:	4640      	mov	r0, r8
    9ef2:	f240 1263 	movw	r2, #355	; 0x163
    9ef6:	f00f fc0f 	bl	19718 <printk>
    9efa:	f240 1163 	movw	r1, #355	; 0x163
    9efe:	4638      	mov	r0, r7
    9f00:	f00f feb0 	bl	19c64 <assert_post_action>
			transit = mgr->transitions->reset;
    9f04:	6923      	ldr	r3, [r4, #16]
    9f06:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    9f08:	b956      	cbnz	r6, 9f20 <process_event+0x250>
    9f0a:	4639      	mov	r1, r7
    9f0c:	4640      	mov	r0, r8
    9f0e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    9f12:	f00f fc01 	bl	19718 <printk>
    9f16:	f44f 71b3 	mov.w	r1, #358	; 0x166
    9f1a:	4638      	mov	r0, r7
    9f1c:	f00f fea2 	bl	19c64 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f20:	8ba3      	ldrh	r3, [r4, #28]
    9f22:	f023 0307 	bic.w	r3, r3, #7
    9f26:	f043 0305 	orr.w	r3, r3, #5
    9f2a:	e799      	b.n	9e60 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    9f2c:	2500      	movs	r5, #0
    9f2e:	f240 1269 	movw	r2, #361	; 0x169
    9f32:	4639      	mov	r1, r7
    9f34:	4640      	mov	r0, r8
    9f36:	f00f fbef 	bl	19718 <printk>
    9f3a:	f240 1169 	movw	r1, #361	; 0x169
    9f3e:	4638      	mov	r0, r7
    9f40:	f00f fe90 	bl	19c64 <assert_post_action>
		onoff_transition_fn transit = NULL;
    9f44:	462e      	mov	r6, r5
    9f46:	e78d      	b.n	9e64 <process_event+0x194>
    9f48:	0001e6f6 	.word	0x0001e6f6
    9f4c:	0001e6bc 	.word	0x0001e6bc
    9f50:	0001e6d4 	.word	0x0001e6d4
				   && !sys_slist_is_empty(&mgr->monitors);
    9f54:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9f58:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    9f5c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    9f5e:	f104 0314 	add.w	r3, r4, #20
    9f62:	4618      	mov	r0, r3
    9f64:	9301      	str	r3, [sp, #4]
    9f66:	f00e fc11 	bl	1878c <z_spin_unlock_valid>
    9f6a:	b940      	cbnz	r0, 9f7e <process_event+0x2ae>
    9f6c:	4640      	mov	r0, r8
    9f6e:	4931      	ldr	r1, [pc, #196]	; (a034 <process_event+0x364>)
    9f70:	22a7      	movs	r2, #167	; 0xa7
    9f72:	f00f fbd1 	bl	19718 <printk>
    9f76:	21a7      	movs	r1, #167	; 0xa7
    9f78:	482e      	ldr	r0, [pc, #184]	; (a034 <process_event+0x364>)
    9f7a:	f00f fe73 	bl	19c64 <assert_post_action>
    9f7e:	f38b 8811 	msr	BASEPRI, fp
    9f82:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    9f86:	f1ba 0f00 	cmp.w	sl, #0
    9f8a:	d130      	bne.n	9fee <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    9f8c:	2d00      	cmp	r5, #0
    9f8e:	d140      	bne.n	a012 <process_event+0x342>
			if (transit != NULL) {
    9f90:	b116      	cbz	r6, 9f98 <process_event+0x2c8>
				transit(mgr, transition_complete);
    9f92:	4620      	mov	r0, r4
    9f94:	4928      	ldr	r1, [pc, #160]	; (a038 <process_event+0x368>)
    9f96:	47b0      	blx	r6
	__asm__ volatile(
    9f98:	f04f 0320 	mov.w	r3, #32
    9f9c:	f3ef 8b11 	mrs	fp, BASEPRI
    9fa0:	f383 8811 	msr	BASEPRI, r3
    9fa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fa8:	9801      	ldr	r0, [sp, #4]
    9faa:	f00e fbe1 	bl	18770 <z_spin_lock_valid>
    9fae:	b940      	cbnz	r0, 9fc2 <process_event+0x2f2>
    9fb0:	4640      	mov	r0, r8
    9fb2:	4920      	ldr	r1, [pc, #128]	; (a034 <process_event+0x364>)
    9fb4:	227c      	movs	r2, #124	; 0x7c
    9fb6:	f00f fbaf 	bl	19718 <printk>
    9fba:	217c      	movs	r1, #124	; 0x7c
    9fbc:	481d      	ldr	r0, [pc, #116]	; (a034 <process_event+0x364>)
    9fbe:	f00f fe51 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    9fc2:	9801      	ldr	r0, [sp, #4]
    9fc4:	f00e fbf0 	bl	187a8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    9fc8:	8ba3      	ldrh	r3, [r4, #28]
    9fca:	f023 0308 	bic.w	r3, r3, #8
    9fce:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9fd0:	8ba3      	ldrh	r3, [r4, #28]
    9fd2:	06da      	lsls	r2, r3, #27
    9fd4:	d525      	bpl.n	a022 <process_event+0x352>
			evt = EVT_COMPLETE;
    9fd6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9fd8:	f023 0310 	bic.w	r3, r3, #16
    9fdc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    9fde:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    9fe2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    9fe6:	2900      	cmp	r1, #0
    9fe8:	f47f ae9d 	bne.w	9d26 <process_event+0x56>
out:
    9fec:	e681      	b.n	9cf2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    9fee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9ff0:	2900      	cmp	r1, #0
    9ff2:	d0cb      	beq.n	9f8c <process_event+0x2bc>
	return node->next;
    9ff4:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    9ff8:	464b      	mov	r3, r9
    9ffa:	4620      	mov	r0, r4
    9ffc:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a000:	9a00      	ldr	r2, [sp, #0]
    a002:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a004:	f1ba 0f00 	cmp.w	sl, #0
    a008:	d0c0      	beq.n	9f8c <process_event+0x2bc>
    a00a:	4651      	mov	r1, sl
    a00c:	f8da a000 	ldr.w	sl, [sl]
    a010:	e7f2      	b.n	9ff8 <process_event+0x328>
    a012:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a014:	464b      	mov	r3, r9
    a016:	4620      	mov	r0, r4
    a018:	9a00      	ldr	r2, [sp, #0]
    a01a:	682d      	ldr	r5, [r5, #0]
    a01c:	f00f fbb2 	bl	19784 <notify_one>
    a020:	e7b4      	b.n	9f8c <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a022:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a026:	bf1e      	ittt	ne
    a028:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a02c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a02e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a030:	e7d5      	b.n	9fde <process_event+0x30e>
    a032:	bf00      	nop
    a034:	0001e6f6 	.word	0x0001e6f6
    a038:	0000a03d 	.word	0x0000a03d

0000a03c <transition_complete>:
{
    a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a03e:	4604      	mov	r4, r0
    a040:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a042:	f100 0614 	add.w	r6, r0, #20
    a046:	f04f 0320 	mov.w	r3, #32
    a04a:	f3ef 8711 	mrs	r7, BASEPRI
    a04e:	f383 8811 	msr	BASEPRI, r3
    a052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a056:	4630      	mov	r0, r6
    a058:	f00e fb8a 	bl	18770 <z_spin_lock_valid>
    a05c:	b940      	cbnz	r0, a070 <transition_complete+0x34>
    a05e:	490a      	ldr	r1, [pc, #40]	; (a088 <transition_complete+0x4c>)
    a060:	480a      	ldr	r0, [pc, #40]	; (a08c <transition_complete+0x50>)
    a062:	227c      	movs	r2, #124	; 0x7c
    a064:	f00f fb58 	bl	19718 <printk>
    a068:	217c      	movs	r1, #124	; 0x7c
    a06a:	4807      	ldr	r0, [pc, #28]	; (a088 <transition_complete+0x4c>)
    a06c:	f00f fdfa 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    a070:	4630      	mov	r0, r6
    a072:	f00e fb99 	bl	187a8 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a076:	463a      	mov	r2, r7
    a078:	4620      	mov	r0, r4
	mgr->last_res = res;
    a07a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a07c:	2101      	movs	r1, #1
}
    a07e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a082:	f7ff be25 	b.w	9cd0 <process_event>
    a086:	bf00      	nop
    a088:	0001e6f6 	.word	0x0001e6f6
    a08c:	0001e6bc 	.word	0x0001e6bc

0000a090 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a094:	4604      	mov	r4, r0
    a096:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a098:	f00f fb8a 	bl	197b0 <validate_args>

	if (rv < 0) {
    a09c:	1e05      	subs	r5, r0, #0
    a09e:	db54      	blt.n	a14a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a0a0:	f104 0914 	add.w	r9, r4, #20
    a0a4:	f04f 0320 	mov.w	r3, #32
    a0a8:	f3ef 8a11 	mrs	sl, BASEPRI
    a0ac:	f383 8811 	msr	BASEPRI, r3
    a0b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0b4:	4648      	mov	r0, r9
    a0b6:	f00e fb5b 	bl	18770 <z_spin_lock_valid>
    a0ba:	b940      	cbnz	r0, a0ce <onoff_request+0x3e>
    a0bc:	4933      	ldr	r1, [pc, #204]	; (a18c <onoff_request+0xfc>)
    a0be:	4834      	ldr	r0, [pc, #208]	; (a190 <onoff_request+0x100>)
    a0c0:	227c      	movs	r2, #124	; 0x7c
    a0c2:	f00f fb29 	bl	19718 <printk>
    a0c6:	217c      	movs	r1, #124	; 0x7c
    a0c8:	4830      	ldr	r0, [pc, #192]	; (a18c <onoff_request+0xfc>)
    a0ca:	f00f fdcb 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    a0ce:	4648      	mov	r0, r9
    a0d0:	f00e fb6a 	bl	187a8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a0d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a0d8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a0da:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a0dc:	428b      	cmp	r3, r1
    a0de:	f002 0607 	and.w	r6, r2, #7
    a0e2:	d04a      	beq.n	a17a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a0e4:	2e02      	cmp	r6, #2
    a0e6:	d11f      	bne.n	a128 <onoff_request+0x98>
	rv = state;
    a0e8:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a0ea:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a0ee:	3301      	adds	r3, #1
    a0f0:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0f2:	4648      	mov	r0, r9
    a0f4:	f00e fb4a 	bl	1878c <z_spin_unlock_valid>
    a0f8:	b940      	cbnz	r0, a10c <onoff_request+0x7c>
    a0fa:	4924      	ldr	r1, [pc, #144]	; (a18c <onoff_request+0xfc>)
    a0fc:	4824      	ldr	r0, [pc, #144]	; (a190 <onoff_request+0x100>)
    a0fe:	22a7      	movs	r2, #167	; 0xa7
    a100:	f00f fb0a 	bl	19718 <printk>
    a104:	21a7      	movs	r1, #167	; 0xa7
    a106:	4821      	ldr	r0, [pc, #132]	; (a18c <onoff_request+0xfc>)
    a108:	f00f fdac 	bl	19c64 <assert_post_action>
	__asm__ volatile(
    a10c:	f38a 8811 	msr	BASEPRI, sl
    a110:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a114:	f1b8 0f00 	cmp.w	r8, #0
    a118:	d017      	beq.n	a14a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a11a:	2300      	movs	r3, #0
    a11c:	4632      	mov	r2, r6
    a11e:	4639      	mov	r1, r7
    a120:	4620      	mov	r0, r4
    a122:	f00f fb2f 	bl	19784 <notify_one>
    a126:	e010      	b.n	a14a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a128:	0793      	lsls	r3, r2, #30
    a12a:	d001      	beq.n	a130 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a12c:	2e06      	cmp	r6, #6
    a12e:	d10f      	bne.n	a150 <onoff_request+0xc0>
	parent->next = child;
    a130:	2300      	movs	r3, #0
    a132:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a134:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a136:	b9eb      	cbnz	r3, a174 <onoff_request+0xe4>
	list->head = node;
    a138:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a13c:	4635      	mov	r5, r6
    a13e:	b9f6      	cbnz	r6, a17e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a140:	4652      	mov	r2, sl
    a142:	2102      	movs	r1, #2
    a144:	4620      	mov	r0, r4
    a146:	f7ff fdc3 	bl	9cd0 <process_event>
		}
	}

	return rv;
}
    a14a:	4628      	mov	r0, r5
    a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a150:	2e05      	cmp	r6, #5
    a152:	d017      	beq.n	a184 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a154:	2e01      	cmp	r6, #1
    a156:	d00a      	beq.n	a16e <onoff_request+0xde>
    a158:	490e      	ldr	r1, [pc, #56]	; (a194 <onoff_request+0x104>)
    a15a:	480d      	ldr	r0, [pc, #52]	; (a190 <onoff_request+0x100>)
    a15c:	f240 12c5 	movw	r2, #453	; 0x1c5
    a160:	f00f fada 	bl	19718 <printk>
    a164:	f240 11c5 	movw	r1, #453	; 0x1c5
    a168:	480a      	ldr	r0, [pc, #40]	; (a194 <onoff_request+0x104>)
    a16a:	f00f fd7b 	bl	19c64 <assert_post_action>
		rv = -EIO;
    a16e:	f06f 0504 	mvn.w	r5, #4
    a172:	e004      	b.n	a17e <onoff_request+0xee>
	parent->next = child;
    a174:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a176:	6067      	str	r7, [r4, #4]
}
    a178:	e7e0      	b.n	a13c <onoff_request+0xac>
		rv = -EAGAIN;
    a17a:	f06f 050a 	mvn.w	r5, #10
    a17e:	f04f 0800 	mov.w	r8, #0
    a182:	e7b6      	b.n	a0f2 <onoff_request+0x62>
		rv = -ENOTSUP;
    a184:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a188:	e7f9      	b.n	a17e <onoff_request+0xee>
    a18a:	bf00      	nop
    a18c:	0001e6f6 	.word	0x0001e6f6
    a190:	0001e6bc 	.word	0x0001e6bc
    a194:	0001e6d4 	.word	0x0001e6d4

0000a198 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a19c:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a19e:	4e14      	ldr	r6, [pc, #80]	; (a1f0 <z_work_q_main+0x58>)
    a1a0:	f8df 8050 	ldr.w	r8, [pc, #80]	; a1f4 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a1a4:	f04f 32ff 	mov.w	r2, #4294967295
    a1a8:	f04f 33ff 	mov.w	r3, #4294967295
    a1ac:	4628      	mov	r0, r5
    a1ae:	f00d f887 	bl	172c0 <z_impl_k_queue_get>
		if (work == NULL) {
    a1b2:	4604      	mov	r4, r0
    a1b4:	2800      	cmp	r0, #0
    a1b6:	d0f5      	beq.n	a1a4 <z_work_q_main+0xc>
		handler = work->handler;
    a1b8:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a1ba:	b947      	cbnz	r7, a1ce <z_work_q_main+0x36>
    a1bc:	4631      	mov	r1, r6
    a1be:	4640      	mov	r0, r8
    a1c0:	221c      	movs	r2, #28
    a1c2:	f00f faa9 	bl	19718 <printk>
    a1c6:	211c      	movs	r1, #28
    a1c8:	4630      	mov	r0, r6
    a1ca:	f00f fd4b 	bl	19c64 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a1ce:	f104 0308 	add.w	r3, r4, #8
    a1d2:	e8d3 2fef 	ldaex	r2, [r3]
    a1d6:	f022 0101 	bic.w	r1, r2, #1
    a1da:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a1de:	2800      	cmp	r0, #0
    a1e0:	d1f7      	bne.n	a1d2 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a1e2:	07d3      	lsls	r3, r2, #31
    a1e4:	d501      	bpl.n	a1ea <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a1e6:	4620      	mov	r0, r4
    a1e8:	47b8      	blx	r7
	z_impl_k_yield();
    a1ea:	f00d ff93 	bl	18114 <z_impl_k_yield>
    a1ee:	e7d9      	b.n	a1a4 <z_work_q_main+0xc>
    a1f0:	0001e71c 	.word	0x0001e71c
    a1f4:	0001e6bc 	.word	0x0001e6bc

0000a1f8 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a1f8:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a1fa:	2900      	cmp	r1, #0
    a1fc:	d039      	beq.n	a272 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a1fe:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a200:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a202:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a204:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a20a:	bf2c      	ite	cs
    a20c:	2408      	movcs	r4, #8
    a20e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a210:	1b0c      	subs	r4, r1, r4
    a212:	1b64      	subs	r4, r4, r5
    a214:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a216:	4621      	mov	r1, r4
    a218:	f00f faf6 	bl	19808 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a21c:	07c3      	lsls	r3, r0, #31
    a21e:	d408      	bmi.n	a232 <sys_heap_free+0x3a>
    a220:	4914      	ldr	r1, [pc, #80]	; (a274 <sys_heap_free+0x7c>)
    a222:	4815      	ldr	r0, [pc, #84]	; (a278 <sys_heap_free+0x80>)
    a224:	229a      	movs	r2, #154	; 0x9a
    a226:	f00f fa77 	bl	19718 <printk>
    a22a:	219a      	movs	r1, #154	; 0x9a
    a22c:	4811      	ldr	r0, [pc, #68]	; (a274 <sys_heap_free+0x7c>)
    a22e:	f00f fd19 	bl	19c64 <assert_post_action>
	return c + chunk_size(h, c);
    a232:	4621      	mov	r1, r4
    a234:	4628      	mov	r0, r5
    a236:	f00f fafd 	bl	19834 <chunk_size>
    a23a:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a23c:	4631      	mov	r1, r6
    a23e:	2200      	movs	r2, #0
    a240:	4628      	mov	r0, r5
    a242:	f00f fae1 	bl	19808 <chunk_field>
    a246:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a248:	42b4      	cmp	r4, r6
    a24a:	d008      	beq.n	a25e <sys_heap_free+0x66>
    a24c:	4909      	ldr	r1, [pc, #36]	; (a274 <sys_heap_free+0x7c>)
    a24e:	480a      	ldr	r0, [pc, #40]	; (a278 <sys_heap_free+0x80>)
    a250:	22a2      	movs	r2, #162	; 0xa2
    a252:	f00f fa61 	bl	19718 <printk>
    a256:	21a2      	movs	r1, #162	; 0xa2
    a258:	4806      	ldr	r0, [pc, #24]	; (a274 <sys_heap_free+0x7c>)
    a25a:	f00f fd03 	bl	19c64 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a25e:	4621      	mov	r1, r4
    a260:	4628      	mov	r0, r5
    a262:	2200      	movs	r2, #0
    a264:	f00f faec 	bl	19840 <set_chunk_used>
	free_chunk(h, c);
    a268:	4621      	mov	r1, r4
}
    a26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a26e:	f00f bc29 	b.w	19ac4 <free_chunk>
}
    a272:	bd70      	pop	{r4, r5, r6, pc}
    a274:	0001e73f 	.word	0x0001e73f
    a278:	0001e6bc 	.word	0x0001e6bc

0000a27c <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a280:	f101 39ff 	add.w	r9, r1, #4294967295
    a284:	ea19 0f01 	tst.w	r9, r1
{
    a288:	4680      	mov	r8, r0
    a28a:	460f      	mov	r7, r1
    a28c:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a28e:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a290:	d008      	beq.n	a2a4 <sys_heap_aligned_alloc+0x28>
    a292:	4931      	ldr	r1, [pc, #196]	; (a358 <sys_heap_aligned_alloc+0xdc>)
    a294:	4831      	ldr	r0, [pc, #196]	; (a35c <sys_heap_aligned_alloc+0xe0>)
    a296:	22fc      	movs	r2, #252	; 0xfc
    a298:	f00f fa3e 	bl	19718 <printk>
    a29c:	21fc      	movs	r1, #252	; 0xfc
    a29e:	482e      	ldr	r0, [pc, #184]	; (a358 <sys_heap_aligned_alloc+0xdc>)
    a2a0:	f00f fce0 	bl	19c64 <assert_post_action>
	return big_heap_chunks(h->len);
    a2a4:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a2a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a2aa:	bf2c      	ite	cs
    a2ac:	2308      	movcs	r3, #8
    a2ae:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a2b0:	429f      	cmp	r7, r3
    a2b2:	d805      	bhi.n	a2c0 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a2b4:	4621      	mov	r1, r4
    a2b6:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a2b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a2bc:	f00f bc44 	b.w	19b48 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a2c0:	b91c      	cbnz	r4, a2ca <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a2c2:	2600      	movs	r6, #0
}
    a2c4:	4630      	mov	r0, r6
    a2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a2ca:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a2ce:	d9f8      	bls.n	a2c2 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a2d0:	1939      	adds	r1, r7, r4
    a2d2:	1ac9      	subs	r1, r1, r3
    a2d4:	f00f fad0 	bl	19878 <bytes_to_chunksz.isra.0>
    a2d8:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a2da:	4628      	mov	r0, r5
    a2dc:	f00f fb27 	bl	1992e <alloc_chunk>
	if (c0 == 0) {
    a2e0:	4680      	mov	r8, r0
    a2e2:	2800      	cmp	r0, #0
    a2e4:	d0ed      	beq.n	a2c2 <sys_heap_aligned_alloc+0x46>
    a2e6:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a2e8:	427f      	negs	r7, r7
    a2ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a2ee:	bf2c      	ite	cs
    a2f0:	2308      	movcs	r3, #8
    a2f2:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a2f4:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a2f8:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a2fa:	444e      	add	r6, r9
    a2fc:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a2fe:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a300:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a302:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a304:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a306:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a30a:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a30c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a310:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a314:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a318:	d208      	bcs.n	a32c <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a31a:	4601      	mov	r1, r0
    a31c:	463a      	mov	r2, r7
    a31e:	4628      	mov	r0, r5
    a320:	f00f fb48 	bl	199b4 <split_chunks>
		free_list_add(h, c0);
    a324:	4641      	mov	r1, r8
    a326:	4628      	mov	r0, r5
    a328:	f00f fb89 	bl	19a3e <free_list_add>
	return c + chunk_size(h, c);
    a32c:	4639      	mov	r1, r7
    a32e:	4628      	mov	r0, r5
    a330:	f00f fa80 	bl	19834 <chunk_size>
    a334:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a336:	4284      	cmp	r4, r0
    a338:	d208      	bcs.n	a34c <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a33a:	4639      	mov	r1, r7
    a33c:	4628      	mov	r0, r5
    a33e:	4622      	mov	r2, r4
    a340:	f00f fb38 	bl	199b4 <split_chunks>
		free_list_add(h, c_end);
    a344:	4621      	mov	r1, r4
    a346:	4628      	mov	r0, r5
    a348:	f00f fb79 	bl	19a3e <free_list_add>
	set_chunk_used(h, c, true);
    a34c:	2201      	movs	r2, #1
    a34e:	4639      	mov	r1, r7
    a350:	4628      	mov	r0, r5
    a352:	f00f fa75 	bl	19840 <set_chunk_used>
	return mem;
    a356:	e7b5      	b.n	a2c4 <sys_heap_aligned_alloc+0x48>
    a358:	0001e73f 	.word	0x0001e73f
    a35c:	0001e6bc 	.word	0x0001e6bc

0000a360 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a360:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a366:	4607      	mov	r7, r0
    a368:	460c      	mov	r4, r1
    a36a:	4616      	mov	r6, r2
    a36c:	d20e      	bcs.n	a38c <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a36e:	2a04      	cmp	r2, #4
    a370:	d80a      	bhi.n	a388 <sys_heap_init+0x28>
    a372:	493d      	ldr	r1, [pc, #244]	; (a468 <sys_heap_init+0x108>)
    a374:	483d      	ldr	r0, [pc, #244]	; (a46c <sys_heap_init+0x10c>)
    a376:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a37a:	f00f f9cd 	bl	19718 <printk>
    a37e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a382:	4839      	ldr	r0, [pc, #228]	; (a468 <sys_heap_init+0x108>)
    a384:	f00f fc6e 	bl	19c64 <assert_post_action>
    a388:	2204      	movs	r2, #4
    a38a:	e000      	b.n	a38e <sys_heap_init+0x2e>
    a38c:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a38e:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a390:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a392:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a394:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a398:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a39c:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a39e:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a3a0:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a3a4:	d80a      	bhi.n	a3bc <sys_heap_init+0x5c>
    a3a6:	4930      	ldr	r1, [pc, #192]	; (a468 <sys_heap_init+0x108>)
    a3a8:	4830      	ldr	r0, [pc, #192]	; (a46c <sys_heap_init+0x10c>)
    a3aa:	f240 1275 	movw	r2, #373	; 0x175
    a3ae:	f00f f9b3 	bl	19718 <printk>
    a3b2:	f240 1175 	movw	r1, #373	; 0x175
    a3b6:	482c      	ldr	r0, [pc, #176]	; (a468 <sys_heap_init+0x108>)
    a3b8:	f00f fc54 	bl	19c64 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a3bc:	2300      	movs	r3, #0
    a3be:	2200      	movs	r2, #0
	heap->heap = h;
    a3c0:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a3c2:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a3c6:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a3c8:	4631      	mov	r1, r6
    a3ca:	4630      	mov	r0, r6
	h->len = buf_sz;
    a3cc:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a3ce:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a3d0:	f00f fa5b 	bl	1988a <bucket_idx.isra.0>
    a3d4:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a3d6:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a3d8:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a3da:	4630      	mov	r0, r6
    a3dc:	f00f fa4c 	bl	19878 <bytes_to_chunksz.isra.0>
    a3e0:	341b      	adds	r4, #27
    a3e2:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a3e4:	4420      	add	r0, r4
    a3e6:	42b0      	cmp	r0, r6
    a3e8:	d30a      	bcc.n	a400 <sys_heap_init+0xa0>
    a3ea:	491f      	ldr	r1, [pc, #124]	; (a468 <sys_heap_init+0x108>)
    a3ec:	481f      	ldr	r0, [pc, #124]	; (a46c <sys_heap_init+0x10c>)
    a3ee:	f240 1281 	movw	r2, #385	; 0x181
    a3f2:	f00f f991 	bl	19718 <printk>
    a3f6:	f240 1181 	movw	r1, #385	; 0x181
    a3fa:	481b      	ldr	r0, [pc, #108]	; (a468 <sys_heap_init+0x108>)
    a3fc:	f00f fc32 	bl	19c64 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a400:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a402:	4619      	mov	r1, r3
    a404:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a408:	42bb      	cmp	r3, r7
    a40a:	db28      	blt.n	a45e <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a40c:	4622      	mov	r2, r4
    a40e:	4628      	mov	r0, r5
    a410:	2100      	movs	r1, #0
    a412:	f00f fa2d 	bl	19870 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a416:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a418:	4628      	mov	r0, r5
    a41a:	2201      	movs	r2, #1
    a41c:	2100      	movs	r1, #0
    a41e:	f00f fa0f 	bl	19840 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a422:	463a      	mov	r2, r7
    a424:	4621      	mov	r1, r4
    a426:	f00f fa23 	bl	19870 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a42a:	4623      	mov	r3, r4
    a42c:	2200      	movs	r2, #0
    a42e:	4621      	mov	r1, r4
    a430:	4628      	mov	r0, r5
    a432:	f00f f9f4 	bl	1981e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a436:	4631      	mov	r1, r6
    a438:	4628      	mov	r0, r5
    a43a:	f00f fa19 	bl	19870 <set_chunk_size>
    a43e:	463b      	mov	r3, r7
    a440:	4631      	mov	r1, r6
    a442:	4628      	mov	r0, r5
    a444:	2200      	movs	r2, #0
    a446:	f00f f9ea 	bl	1981e <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a44a:	4631      	mov	r1, r6
    a44c:	4628      	mov	r0, r5
    a44e:	2201      	movs	r2, #1
    a450:	f00f f9f6 	bl	19840 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a454:	4621      	mov	r1, r4
}
    a456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a45a:	f00f baf0 	b.w	19a3e <free_list_add>
		h->buckets[i].next = 0;
    a45e:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a462:	3301      	adds	r3, #1
    a464:	e7d0      	b.n	a408 <sys_heap_init+0xa8>
    a466:	bf00      	nop
    a468:	0001e73f 	.word	0x0001e73f
    a46c:	0001e6bc 	.word	0x0001e6bc

0000a470 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a474:	468b      	mov	fp, r1
    a476:	4692      	mov	sl, r2
    a478:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a47a:	2500      	movs	r5, #0
{
    a47c:	b091      	sub	sp, #68	; 0x44
    a47e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a480:	f89a 0000 	ldrb.w	r0, [sl]
    a484:	b908      	cbnz	r0, a48a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a486:	4628      	mov	r0, r5
    a488:	e35f      	b.n	ab4a <cbvprintf+0x6da>
		if (*fp != '%') {
    a48a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a48c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a490:	d007      	beq.n	a4a2 <cbvprintf+0x32>
			OUTC('%');
    a492:	4659      	mov	r1, fp
    a494:	9b02      	ldr	r3, [sp, #8]
    a496:	4798      	blx	r3
    a498:	2800      	cmp	r0, #0
    a49a:	f2c0 8356 	blt.w	ab4a <cbvprintf+0x6da>
    a49e:	3501      	adds	r5, #1
			break;
    a4a0:	e212      	b.n	a8c8 <cbvprintf+0x458>
		} state = {
    a4a2:	2218      	movs	r2, #24
    a4a4:	2100      	movs	r1, #0
    a4a6:	a80a      	add	r0, sp, #40	; 0x28
    a4a8:	f010 fbc1 	bl	1ac2e <memset>
	if (*sp == '%') {
    a4ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a4b0:	2b25      	cmp	r3, #37	; 0x25
    a4b2:	d078      	beq.n	a5a6 <cbvprintf+0x136>
    a4b4:	2200      	movs	r2, #0
    a4b6:	4694      	mov	ip, r2
    a4b8:	4696      	mov	lr, r2
    a4ba:	4616      	mov	r6, r2
    a4bc:	4610      	mov	r0, r2
    a4be:	4639      	mov	r1, r7
		switch (*sp) {
    a4c0:	f817 3b01 	ldrb.w	r3, [r7], #1
    a4c4:	2b2b      	cmp	r3, #43	; 0x2b
    a4c6:	f000 809d 	beq.w	a604 <cbvprintf+0x194>
    a4ca:	f200 8094 	bhi.w	a5f6 <cbvprintf+0x186>
    a4ce:	2b20      	cmp	r3, #32
    a4d0:	f000 809a 	beq.w	a608 <cbvprintf+0x198>
    a4d4:	2b23      	cmp	r3, #35	; 0x23
    a4d6:	f000 809a 	beq.w	a60e <cbvprintf+0x19e>
    a4da:	b128      	cbz	r0, a4e8 <cbvprintf+0x78>
    a4dc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a4e0:	f040 0004 	orr.w	r0, r0, #4
    a4e4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a4e8:	b12e      	cbz	r6, a4f6 <cbvprintf+0x86>
    a4ea:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a4ee:	f040 0008 	orr.w	r0, r0, #8
    a4f2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a4f6:	f1be 0f00 	cmp.w	lr, #0
    a4fa:	d005      	beq.n	a508 <cbvprintf+0x98>
    a4fc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a500:	f040 0010 	orr.w	r0, r0, #16
    a504:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a508:	f1bc 0f00 	cmp.w	ip, #0
    a50c:	d005      	beq.n	a51a <cbvprintf+0xaa>
    a50e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a512:	f040 0020 	orr.w	r0, r0, #32
    a516:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a51a:	b12a      	cbz	r2, a528 <cbvprintf+0xb8>
    a51c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a524:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    a528:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a52c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    a530:	2844      	cmp	r0, #68	; 0x44
    a532:	d103      	bne.n	a53c <cbvprintf+0xcc>
		conv->flag_zero = false;
    a534:	f36f 1286 	bfc	r2, #6, #1
    a538:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    a53c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a540:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    a542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a546:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a54a:	d17b      	bne.n	a644 <cbvprintf+0x1d4>
		conv->width_star = true;
    a54c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    a550:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a552:	f042 0201 	orr.w	r2, r2, #1
    a556:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    a55a:	781a      	ldrb	r2, [r3, #0]
    a55c:	2a2e      	cmp	r2, #46	; 0x2e
    a55e:	bf0c      	ite	eq
    a560:	2101      	moveq	r1, #1
    a562:	2100      	movne	r1, #0
    a564:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a568:	f361 0241 	bfi	r2, r1, #1, #1
    a56c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    a570:	d174      	bne.n	a65c <cbvprintf+0x1ec>
	if (*sp == '*') {
    a572:	785a      	ldrb	r2, [r3, #1]
    a574:	2a2a      	cmp	r2, #42	; 0x2a
    a576:	d06a      	beq.n	a64e <cbvprintf+0x1de>
	size_t val = 0;
    a578:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    a57a:	260a      	movs	r6, #10
	++sp;
    a57c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a57e:	4618      	mov	r0, r3
    a580:	f810 2b01 	ldrb.w	r2, [r0], #1
    a584:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a588:	2f09      	cmp	r7, #9
    a58a:	f240 808e 	bls.w	a6aa <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    a58e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    a592:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    a594:	f3c2 0040 	ubfx	r0, r2, #1, #1
    a598:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    a59c:	f361 0241 	bfi	r2, r1, #1, #1
    a5a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a5a4:	e05a      	b.n	a65c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    a5a6:	f10a 0702 	add.w	r7, sl, #2
    a5aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    a5ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a5b2:	07d9      	lsls	r1, r3, #31
    a5b4:	f140 8149 	bpl.w	a84a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    a5b8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    a5bc:	f1b9 0f00 	cmp.w	r9, #0
    a5c0:	da07      	bge.n	a5d2 <cbvprintf+0x162>
				conv->flag_dash = true;
    a5c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    a5c6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    a5ca:	f042 0204 	orr.w	r2, r2, #4
    a5ce:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    a5d2:	075a      	lsls	r2, r3, #29
    a5d4:	f140 8142 	bpl.w	a85c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    a5d8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    a5dc:	f1b8 0f00 	cmp.w	r8, #0
    a5e0:	f280 8141 	bge.w	a866 <cbvprintf+0x3f6>
				conv->prec_present = false;
    a5e4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a5e8:	f36f 0341 	bfc	r3, #1, #1
    a5ec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    a5f0:	f04f 38ff 	mov.w	r8, #4294967295
    a5f4:	e137      	b.n	a866 <cbvprintf+0x3f6>
		switch (*sp) {
    a5f6:	2b2d      	cmp	r3, #45	; 0x2d
    a5f8:	d00c      	beq.n	a614 <cbvprintf+0x1a4>
    a5fa:	2b30      	cmp	r3, #48	; 0x30
    a5fc:	f47f af6d 	bne.w	a4da <cbvprintf+0x6a>
			conv->flag_zero = true;
    a600:	2201      	movs	r2, #1
	} while (loop);
    a602:	e75c      	b.n	a4be <cbvprintf+0x4e>
			conv->flag_plus = true;
    a604:	2601      	movs	r6, #1
    a606:	e75a      	b.n	a4be <cbvprintf+0x4e>
			conv->flag_space = true;
    a608:	f04f 0e01 	mov.w	lr, #1
    a60c:	e757      	b.n	a4be <cbvprintf+0x4e>
			conv->flag_hash = true;
    a60e:	f04f 0c01 	mov.w	ip, #1
    a612:	e754      	b.n	a4be <cbvprintf+0x4e>
		switch (*sp) {
    a614:	2001      	movs	r0, #1
    a616:	e752      	b.n	a4be <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    a618:	4633      	mov	r3, r6
    a61a:	fb0c 0202 	mla	r2, ip, r2, r0
    a61e:	3a30      	subs	r2, #48	; 0x30
    a620:	461e      	mov	r6, r3
    a622:	f816 0b01 	ldrb.w	r0, [r6], #1
    a626:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a62a:	2f09      	cmp	r7, #9
    a62c:	d9f4      	bls.n	a618 <cbvprintf+0x1a8>
	if (sp != wp) {
    a62e:	4299      	cmp	r1, r3
    a630:	d093      	beq.n	a55a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a632:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    a636:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    a638:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a63a:	f362 0141 	bfi	r1, r2, #1, #1
    a63e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    a642:	e78a      	b.n	a55a <cbvprintf+0xea>
    a644:	460b      	mov	r3, r1
	size_t val = 0;
    a646:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a648:	f04f 0c0a 	mov.w	ip, #10
    a64c:	e7e8      	b.n	a620 <cbvprintf+0x1b0>
		conv->prec_star = true;
    a64e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    a652:	3302      	adds	r3, #2
		conv->prec_star = true;
    a654:	f042 0204 	orr.w	r2, r2, #4
    a658:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    a65c:	461f      	mov	r7, r3
    a65e:	f817 2b01 	ldrb.w	r2, [r7], #1
    a662:	2a6c      	cmp	r2, #108	; 0x6c
    a664:	d041      	beq.n	a6ea <cbvprintf+0x27a>
    a666:	d825      	bhi.n	a6b4 <cbvprintf+0x244>
    a668:	2a68      	cmp	r2, #104	; 0x68
    a66a:	d02b      	beq.n	a6c4 <cbvprintf+0x254>
    a66c:	2a6a      	cmp	r2, #106	; 0x6a
    a66e:	d046      	beq.n	a6fe <cbvprintf+0x28e>
    a670:	2a4c      	cmp	r2, #76	; 0x4c
    a672:	d04c      	beq.n	a70e <cbvprintf+0x29e>
    a674:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    a676:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    a67a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    a67e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    a680:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    a684:	f200 80d9 	bhi.w	a83a <cbvprintf+0x3ca>
    a688:	2a57      	cmp	r2, #87	; 0x57
    a68a:	d84d      	bhi.n	a728 <cbvprintf+0x2b8>
    a68c:	2a41      	cmp	r2, #65	; 0x41
    a68e:	d003      	beq.n	a698 <cbvprintf+0x228>
    a690:	3a45      	subs	r2, #69	; 0x45
    a692:	2a02      	cmp	r2, #2
    a694:	f200 80d1 	bhi.w	a83a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    a698:	2204      	movs	r2, #4
    a69a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a69e:	f362 0302 	bfi	r3, r2, #0, #3
    a6a2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    a6a6:	2301      	movs	r3, #1
			break;
    a6a8:	e09e      	b.n	a7e8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    a6aa:	fb06 2101 	mla	r1, r6, r1, r2
    a6ae:	4603      	mov	r3, r0
    a6b0:	3930      	subs	r1, #48	; 0x30
    a6b2:	e764      	b.n	a57e <cbvprintf+0x10e>
	switch (*sp) {
    a6b4:	2a74      	cmp	r2, #116	; 0x74
    a6b6:	d026      	beq.n	a706 <cbvprintf+0x296>
    a6b8:	2a7a      	cmp	r2, #122	; 0x7a
    a6ba:	d1db      	bne.n	a674 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    a6bc:	2206      	movs	r2, #6
    a6be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a6c2:	e00d      	b.n	a6e0 <cbvprintf+0x270>
		if (*++sp == 'h') {
    a6c4:	785a      	ldrb	r2, [r3, #1]
    a6c6:	2a68      	cmp	r2, #104	; 0x68
    a6c8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a6cc:	d106      	bne.n	a6dc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    a6ce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a6d0:	f361 02c6 	bfi	r2, r1, #3, #4
    a6d4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    a6d8:	1c9f      	adds	r7, r3, #2
    a6da:	e7cc      	b.n	a676 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    a6dc:	4613      	mov	r3, r2
    a6de:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    a6e0:	f362 03c6 	bfi	r3, r2, #3, #4
    a6e4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    a6e8:	e7c5      	b.n	a676 <cbvprintf+0x206>
		if (*++sp == 'l') {
    a6ea:	785a      	ldrb	r2, [r3, #1]
    a6ec:	2a6c      	cmp	r2, #108	; 0x6c
    a6ee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a6f2:	d101      	bne.n	a6f8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    a6f4:	2104      	movs	r1, #4
    a6f6:	e7eb      	b.n	a6d0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    a6f8:	4613      	mov	r3, r2
    a6fa:	2203      	movs	r2, #3
    a6fc:	e7f0      	b.n	a6e0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    a6fe:	2205      	movs	r2, #5
    a700:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a704:	e7ec      	b.n	a6e0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    a706:	2207      	movs	r2, #7
    a708:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a70c:	e7e8      	b.n	a6e0 <cbvprintf+0x270>
		conv->unsupported = true;
    a70e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    a712:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    a716:	f023 0302 	bic.w	r3, r3, #2
    a71a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    a71e:	f043 0302 	orr.w	r3, r3, #2
    a722:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    a726:	e7a6      	b.n	a676 <cbvprintf+0x206>
    a728:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    a72c:	2920      	cmp	r1, #32
    a72e:	f200 8084 	bhi.w	a83a <cbvprintf+0x3ca>
    a732:	a001      	add	r0, pc, #4	; (adr r0, a738 <cbvprintf+0x2c8>)
    a734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    a738:	0000a7fd 	.word	0x0000a7fd
    a73c:	0000a83b 	.word	0x0000a83b
    a740:	0000a83b 	.word	0x0000a83b
    a744:	0000a83b 	.word	0x0000a83b
    a748:	0000a83b 	.word	0x0000a83b
    a74c:	0000a83b 	.word	0x0000a83b
    a750:	0000a83b 	.word	0x0000a83b
    a754:	0000a83b 	.word	0x0000a83b
    a758:	0000a83b 	.word	0x0000a83b
    a75c:	0000a699 	.word	0x0000a699
    a760:	0000a83b 	.word	0x0000a83b
    a764:	0000a7fd 	.word	0x0000a7fd
    a768:	0000a7bd 	.word	0x0000a7bd
    a76c:	0000a699 	.word	0x0000a699
    a770:	0000a699 	.word	0x0000a699
    a774:	0000a699 	.word	0x0000a699
    a778:	0000a83b 	.word	0x0000a83b
    a77c:	0000a7bd 	.word	0x0000a7bd
    a780:	0000a83b 	.word	0x0000a83b
    a784:	0000a83b 	.word	0x0000a83b
    a788:	0000a83b 	.word	0x0000a83b
    a78c:	0000a83b 	.word	0x0000a83b
    a790:	0000a805 	.word	0x0000a805
    a794:	0000a7fd 	.word	0x0000a7fd
    a798:	0000a821 	.word	0x0000a821
    a79c:	0000a83b 	.word	0x0000a83b
    a7a0:	0000a83b 	.word	0x0000a83b
    a7a4:	0000a821 	.word	0x0000a821
    a7a8:	0000a83b 	.word	0x0000a83b
    a7ac:	0000a7fd 	.word	0x0000a7fd
    a7b0:	0000a83b 	.word	0x0000a83b
    a7b4:	0000a83b 	.word	0x0000a83b
    a7b8:	0000a7fd 	.word	0x0000a7fd
		conv->specifier_cat = SPECIFIER_SINT;
    a7bc:	2001      	movs	r0, #1
    a7be:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a7c2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    a7c6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a7ca:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    a7cc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    a7d0:	bf02      	ittt	eq
    a7d2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    a7d6:	f041 0101 	orreq.w	r1, r1, #1
    a7da:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    a7de:	2a63      	cmp	r2, #99	; 0x63
    a7e0:	d131      	bne.n	a846 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    a7e2:	3b00      	subs	r3, #0
    a7e4:	bf18      	it	ne
    a7e6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    a7e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a7ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
    a7f0:	430b      	orrs	r3, r1
    a7f2:	f363 0241 	bfi	r2, r3, #1, #1
    a7f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a7fa:	e6d8      	b.n	a5ae <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    a7fc:	2002      	movs	r0, #2
    a7fe:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    a802:	e7de      	b.n	a7c2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    a804:	2103      	movs	r1, #3
    a806:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a80a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    a80e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    a812:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a816:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    a818:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a81c:	4143      	adcs	r3, r0
    a81e:	e7e3      	b.n	a7e8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    a820:	2103      	movs	r1, #3
    a822:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    a826:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    a82a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    a82e:	bf14      	ite	ne
    a830:	2301      	movne	r3, #1
    a832:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    a834:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    a838:	e7d6      	b.n	a7e8 <cbvprintf+0x378>
		conv->invalid = true;
    a83a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    a83e:	f043 0301 	orr.w	r3, r3, #1
    a842:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    a846:	2300      	movs	r3, #0
    a848:	e7ce      	b.n	a7e8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    a84a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    a84e:	2a00      	cmp	r2, #0
		int width = -1;
    a850:	bfac      	ite	ge
    a852:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    a856:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    a85a:	e6ba      	b.n	a5d2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    a85c:	079b      	lsls	r3, r3, #30
    a85e:	f57f aec7 	bpl.w	a5f0 <cbvprintf+0x180>
			precision = conv->prec_value;
    a862:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    a866:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    a868:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    a86c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    a870:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    a874:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    a878:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    a87a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    a87e:	d138      	bne.n	a8f2 <cbvprintf+0x482>
			switch (length_mod) {
    a880:	1ecb      	subs	r3, r1, #3
    a882:	2b04      	cmp	r3, #4
    a884:	d822      	bhi.n	a8cc <cbvprintf+0x45c>
    a886:	e8df f003 	tbb	[pc, r3]
    a88a:	0903      	.short	0x0903
    a88c:	2109      	.short	0x2109
    a88e:	21          	.byte	0x21
    a88f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    a890:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    a894:	17da      	asrs	r2, r3, #31
    a896:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    a89a:	e006      	b.n	a8aa <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    a89c:	3407      	adds	r4, #7
    a89e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    a8a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    a8a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    a8aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    a8ae:	f013 0603 	ands.w	r6, r3, #3
    a8b2:	d056      	beq.n	a962 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    a8b4:	463b      	mov	r3, r7
    a8b6:	4652      	mov	r2, sl
    a8b8:	4659      	mov	r1, fp
    a8ba:	9802      	ldr	r0, [sp, #8]
    a8bc:	f00f f9bc 	bl	19c38 <outs>
    a8c0:	2800      	cmp	r0, #0
    a8c2:	f2c0 8142 	blt.w	ab4a <cbvprintf+0x6da>
    a8c6:	4405      	add	r5, r0
			continue;
    a8c8:	46ba      	mov	sl, r7
    a8ca:	e5d9      	b.n	a480 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a8cc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    a8d0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a8d2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    a8d6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    a8da:	d105      	bne.n	a8e8 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    a8dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    a8e0:	930a      	str	r3, [sp, #40]	; 0x28
    a8e2:	2300      	movs	r3, #0
    a8e4:	930b      	str	r3, [sp, #44]	; 0x2c
    a8e6:	e7e0      	b.n	a8aa <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    a8e8:	2902      	cmp	r1, #2
    a8ea:	d1de      	bne.n	a8aa <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    a8ec:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    a8f0:	e7d0      	b.n	a894 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    a8f2:	2b02      	cmp	r3, #2
    a8f4:	d123      	bne.n	a93e <cbvprintf+0x4ce>
			switch (length_mod) {
    a8f6:	1ecb      	subs	r3, r1, #3
    a8f8:	2b04      	cmp	r3, #4
    a8fa:	d813      	bhi.n	a924 <cbvprintf+0x4b4>
    a8fc:	e8df f003 	tbb	[pc, r3]
    a900:	120a0a03 	.word	0x120a0a03
    a904:	12          	.byte	0x12
    a905:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    a906:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    a908:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    a90a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    a90c:	920a      	str	r2, [sp, #40]	; 0x28
    a90e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    a910:	4604      	mov	r4, r0
    a912:	e7ca      	b.n	a8aa <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    a914:	1de0      	adds	r0, r4, #7
    a916:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    a91a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    a91e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    a922:	e7f5      	b.n	a910 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    a924:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    a928:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    a92a:	930a      	str	r3, [sp, #40]	; 0x28
    a92c:	f04f 0300 	mov.w	r3, #0
    a930:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    a932:	d0d3      	beq.n	a8dc <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    a934:	2902      	cmp	r1, #2
    a936:	d1b8      	bne.n	a8aa <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    a938:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a93c:	e7d0      	b.n	a8e0 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    a93e:	2b04      	cmp	r3, #4
    a940:	d109      	bne.n	a956 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    a942:	1de3      	adds	r3, r4, #7
    a944:	f023 0307 	bic.w	r3, r3, #7
    a948:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a950:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    a954:	e7a9      	b.n	a8aa <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    a956:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    a958:	bf04      	itt	eq
    a95a:	f854 3b04 	ldreq.w	r3, [r4], #4
    a95e:	930a      	streq	r3, [sp, #40]	; 0x28
    a960:	e7a3      	b.n	a8aa <cbvprintf+0x43a>
		switch (conv->specifier) {
    a962:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a966:	2878      	cmp	r0, #120	; 0x78
    a968:	d8ae      	bhi.n	a8c8 <cbvprintf+0x458>
    a96a:	2862      	cmp	r0, #98	; 0x62
    a96c:	d822      	bhi.n	a9b4 <cbvprintf+0x544>
    a96e:	2825      	cmp	r0, #37	; 0x25
    a970:	f43f ad8f 	beq.w	a492 <cbvprintf+0x22>
    a974:	2858      	cmp	r0, #88	; 0x58
    a976:	d1a7      	bne.n	a8c8 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    a978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a97c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    a980:	9300      	str	r3, [sp, #0]
    a982:	aa0c      	add	r2, sp, #48	; 0x30
    a984:	ab04      	add	r3, sp, #16
    a986:	f00f f911 	bl	19bac <encode_uint>
    a98a:	4682      	mov	sl, r0
			if (precision >= 0) {
    a98c:	f1b8 0f00 	cmp.w	r8, #0
    a990:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    a994:	db0c      	blt.n	a9b0 <cbvprintf+0x540>
				conv->flag_zero = false;
    a996:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    a99a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    a99e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    a9a2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    a9a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    a9a8:	d902      	bls.n	a9b0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    a9aa:	eba8 0303 	sub.w	r3, r8, r3
    a9ae:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    a9b0:	4680      	mov	r8, r0
    a9b2:	e03d      	b.n	aa30 <cbvprintf+0x5c0>
    a9b4:	3863      	subs	r0, #99	; 0x63
    a9b6:	2815      	cmp	r0, #21
    a9b8:	d886      	bhi.n	a8c8 <cbvprintf+0x458>
    a9ba:	a201      	add	r2, pc, #4	; (adr r2, a9c0 <cbvprintf+0x550>)
    a9bc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    a9c0:	0000aa41 	.word	0x0000aa41
    a9c4:	0000aaa5 	.word	0x0000aaa5
    a9c8:	0000a8c9 	.word	0x0000a8c9
    a9cc:	0000a8c9 	.word	0x0000a8c9
    a9d0:	0000a8c9 	.word	0x0000a8c9
    a9d4:	0000a8c9 	.word	0x0000a8c9
    a9d8:	0000aaa5 	.word	0x0000aaa5
    a9dc:	0000a8c9 	.word	0x0000a8c9
    a9e0:	0000a8c9 	.word	0x0000a8c9
    a9e4:	0000a8c9 	.word	0x0000a8c9
    a9e8:	0000a8c9 	.word	0x0000a8c9
    a9ec:	0000aaff 	.word	0x0000aaff
    a9f0:	0000aacd 	.word	0x0000aacd
    a9f4:	0000aad1 	.word	0x0000aad1
    a9f8:	0000a8c9 	.word	0x0000a8c9
    a9fc:	0000a8c9 	.word	0x0000a8c9
    aa00:	0000aa19 	.word	0x0000aa19
    aa04:	0000a8c9 	.word	0x0000a8c9
    aa08:	0000aacd 	.word	0x0000aacd
    aa0c:	0000a8c9 	.word	0x0000a8c9
    aa10:	0000a8c9 	.word	0x0000a8c9
    aa14:	0000aacd 	.word	0x0000aacd
			if (precision >= 0) {
    aa18:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    aa1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    aa20:	db0a      	blt.n	aa38 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    aa22:	4641      	mov	r1, r8
    aa24:	4650      	mov	r0, sl
    aa26:	f010 f8a0 	bl	1ab6a <strnlen>
		char sign = 0;
    aa2a:	2600      	movs	r6, #0
			bpe = bps + len;
    aa2c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    aa30:	f1ba 0f00 	cmp.w	sl, #0
    aa34:	d10c      	bne.n	aa50 <cbvprintf+0x5e0>
    aa36:	e747      	b.n	a8c8 <cbvprintf+0x458>
				len = strlen(bps);
    aa38:	4650      	mov	r0, sl
    aa3a:	f010 f88f 	bl	1ab5c <strlen>
    aa3e:	e7f4      	b.n	aa2a <cbvprintf+0x5ba>
			break;
    aa40:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    aa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    aa44:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    aa48:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    aa4c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    aa50:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    aa54:	b106      	cbz	r6, aa58 <cbvprintf+0x5e8>
			nj_len += 1U;
    aa56:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    aa58:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    aa5c:	06d0      	lsls	r0, r2, #27
    aa5e:	d568      	bpl.n	ab32 <cbvprintf+0x6c2>
			nj_len += 2U;
    aa60:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    aa62:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    aa64:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    aa66:	bf48      	it	mi
    aa68:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    aa6a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    aa6c:	bf48      	it	mi
    aa6e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    aa70:	f1b9 0f00 	cmp.w	r9, #0
    aa74:	dd76      	ble.n	ab64 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    aa76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    aa7a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    aa7e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    aa82:	9303      	str	r3, [sp, #12]
    aa84:	0753      	lsls	r3, r2, #29
    aa86:	d46d      	bmi.n	ab64 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    aa88:	0650      	lsls	r0, r2, #25
    aa8a:	d561      	bpl.n	ab50 <cbvprintf+0x6e0>
					if (sign != 0) {
    aa8c:	b146      	cbz	r6, aaa0 <cbvprintf+0x630>
						OUTC(sign);
    aa8e:	4659      	mov	r1, fp
    aa90:	4630      	mov	r0, r6
    aa92:	9b02      	ldr	r3, [sp, #8]
    aa94:	4798      	blx	r3
    aa96:	2800      	cmp	r0, #0
    aa98:	db57      	blt.n	ab4a <cbvprintf+0x6da>
						sign = 0;
    aa9a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    aa9c:	3501      	adds	r5, #1
						sign = 0;
    aa9e:	461e      	mov	r6, r3
					pad = '0';
    aaa0:	2330      	movs	r3, #48	; 0x30
    aaa2:	e056      	b.n	ab52 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    aaa4:	071e      	lsls	r6, r3, #28
    aaa6:	d40f      	bmi.n	aac8 <cbvprintf+0x658>
				sign = ' ';
    aaa8:	f013 0610 	ands.w	r6, r3, #16
    aaac:	bf18      	it	ne
    aaae:	2620      	movne	r6, #32
			if (value->sint < 0) {
    aab0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    aab4:	2b00      	cmp	r3, #0
    aab6:	f6bf af5f 	bge.w	a978 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    aaba:	4252      	negs	r2, r2
    aabc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    aac0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    aac2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    aac6:	e757      	b.n	a978 <cbvprintf+0x508>
				sign = '+';
    aac8:	262b      	movs	r6, #43	; 0x2b
    aaca:	e7f1      	b.n	aab0 <cbvprintf+0x640>
		switch (conv->specifier) {
    aacc:	2600      	movs	r6, #0
    aace:	e753      	b.n	a978 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    aad0:	980a      	ldr	r0, [sp, #40]	; 0x28
    aad2:	b340      	cbz	r0, ab26 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    aad4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    aad8:	9300      	str	r3, [sp, #0]
    aada:	2100      	movs	r1, #0
    aadc:	ab04      	add	r3, sp, #16
    aade:	aa0c      	add	r2, sp, #48	; 0x30
    aae0:	f00f f864 	bl	19bac <encode_uint>
				conv->altform_0c = true;
    aae4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    aae8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    aaea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    aaee:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    aaf2:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    aaf6:	2600      	movs	r6, #0
				conv->altform_0c = true;
    aaf8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    aafc:	e746      	b.n	a98c <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    aafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ab00:	2907      	cmp	r1, #7
    ab02:	f63f aee1 	bhi.w	a8c8 <cbvprintf+0x458>
    ab06:	e8df f001 	tbb	[pc, r1]
    ab0a:	040c      	.short	0x040c
    ab0c:	08080c06 	.word	0x08080c06
    ab10:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ab12:	701d      	strb	r5, [r3, #0]
		break;
    ab14:	e6d8      	b.n	a8c8 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    ab16:	801d      	strh	r5, [r3, #0]
		break;
    ab18:	e6d6      	b.n	a8c8 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    ab1a:	17ea      	asrs	r2, r5, #31
    ab1c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    ab20:	e6d2      	b.n	a8c8 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ab22:	601d      	str	r5, [r3, #0]
		break;
    ab24:	e6d0      	b.n	a8c8 <cbvprintf+0x458>
			bps = "(nil)";
    ab26:	f8df a0c8 	ldr.w	sl, [pc, #200]	; abf0 <cbvprintf+0x780>
    ab2a:	4606      	mov	r6, r0
			bpe = bps + 5;
    ab2c:	f10a 0805 	add.w	r8, sl, #5
    ab30:	e78e      	b.n	aa50 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    ab32:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ab34:	bf48      	it	mi
    ab36:	3301      	addmi	r3, #1
    ab38:	e793      	b.n	aa62 <cbvprintf+0x5f2>
					OUTC(pad);
    ab3a:	4618      	mov	r0, r3
    ab3c:	9303      	str	r3, [sp, #12]
    ab3e:	4659      	mov	r1, fp
    ab40:	9b02      	ldr	r3, [sp, #8]
    ab42:	4798      	blx	r3
    ab44:	2800      	cmp	r0, #0
    ab46:	9b03      	ldr	r3, [sp, #12]
    ab48:	da04      	bge.n	ab54 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    ab4a:	b011      	add	sp, #68	; 0x44
    ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ab50:	2320      	movs	r3, #32
    ab52:	444d      	add	r5, r9
    ab54:	464a      	mov	r2, r9
				while (width-- > 0) {
    ab56:	2a00      	cmp	r2, #0
    ab58:	eba5 0109 	sub.w	r1, r5, r9
    ab5c:	f109 39ff 	add.w	r9, r9, #4294967295
    ab60:	dceb      	bgt.n	ab3a <cbvprintf+0x6ca>
    ab62:	460d      	mov	r5, r1
		if (sign != 0) {
    ab64:	b136      	cbz	r6, ab74 <cbvprintf+0x704>
			OUTC(sign);
    ab66:	4659      	mov	r1, fp
    ab68:	4630      	mov	r0, r6
    ab6a:	9b02      	ldr	r3, [sp, #8]
    ab6c:	4798      	blx	r3
    ab6e:	2800      	cmp	r0, #0
    ab70:	dbeb      	blt.n	ab4a <cbvprintf+0x6da>
    ab72:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ab74:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ab78:	06d9      	lsls	r1, r3, #27
    ab7a:	d401      	bmi.n	ab80 <cbvprintf+0x710>
    ab7c:	071a      	lsls	r2, r3, #28
    ab7e:	d506      	bpl.n	ab8e <cbvprintf+0x71e>
				OUTC('0');
    ab80:	4659      	mov	r1, fp
    ab82:	2030      	movs	r0, #48	; 0x30
    ab84:	9b02      	ldr	r3, [sp, #8]
    ab86:	4798      	blx	r3
    ab88:	2800      	cmp	r0, #0
    ab8a:	dbde      	blt.n	ab4a <cbvprintf+0x6da>
    ab8c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ab8e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ab92:	06db      	lsls	r3, r3, #27
    ab94:	d507      	bpl.n	aba6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    ab96:	4659      	mov	r1, fp
    ab98:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ab9c:	9b02      	ldr	r3, [sp, #8]
    ab9e:	4798      	blx	r3
    aba0:	2800      	cmp	r0, #0
    aba2:	dbd2      	blt.n	ab4a <cbvprintf+0x6da>
    aba4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    aba6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    aba8:	442e      	add	r6, r5
    abaa:	1b73      	subs	r3, r6, r5
    abac:	2b00      	cmp	r3, #0
    abae:	dc16      	bgt.n	abde <cbvprintf+0x76e>
			OUTS(bps, bpe);
    abb0:	4643      	mov	r3, r8
    abb2:	4652      	mov	r2, sl
    abb4:	4659      	mov	r1, fp
    abb6:	9802      	ldr	r0, [sp, #8]
    abb8:	f00f f83e 	bl	19c38 <outs>
    abbc:	2800      	cmp	r0, #0
    abbe:	dbc4      	blt.n	ab4a <cbvprintf+0x6da>
    abc0:	4405      	add	r5, r0
		while (width > 0) {
    abc2:	44a9      	add	r9, r5
    abc4:	eba9 0305 	sub.w	r3, r9, r5
    abc8:	2b00      	cmp	r3, #0
    abca:	f77f ae7d 	ble.w	a8c8 <cbvprintf+0x458>
			OUTC(' ');
    abce:	4659      	mov	r1, fp
    abd0:	2020      	movs	r0, #32
    abd2:	9b02      	ldr	r3, [sp, #8]
    abd4:	4798      	blx	r3
    abd6:	2800      	cmp	r0, #0
    abd8:	dbb7      	blt.n	ab4a <cbvprintf+0x6da>
    abda:	3501      	adds	r5, #1
			--width;
    abdc:	e7f2      	b.n	abc4 <cbvprintf+0x754>
				OUTC('0');
    abde:	4659      	mov	r1, fp
    abe0:	2030      	movs	r0, #48	; 0x30
    abe2:	9b02      	ldr	r3, [sp, #8]
    abe4:	4798      	blx	r3
    abe6:	2800      	cmp	r0, #0
    abe8:	dbaf      	blt.n	ab4a <cbvprintf+0x6da>
    abea:	3501      	adds	r5, #1
    abec:	e7dd      	b.n	abaa <cbvprintf+0x73a>
    abee:	bf00      	nop
    abf0:	0001e760 	.word	0x0001e760

0000abf4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    abf4:	b148      	cbz	r0, ac0a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    abf6:	4b05      	ldr	r3, [pc, #20]	; (ac0c <arch_busy_wait+0x18>)
    abf8:	681a      	ldr	r2, [r3, #0]
    abfa:	4b05      	ldr	r3, [pc, #20]	; (ac10 <arch_busy_wait+0x1c>)
    abfc:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    ac00:	4b04      	ldr	r3, [pc, #16]	; (ac14 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    ac02:	4350      	muls	r0, r2
    ac04:	f043 0301 	orr.w	r3, r3, #1
    ac08:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ac0a:	4770      	bx	lr
    ac0c:	2000851c 	.word	0x2000851c
    ac10:	000f4240 	.word	0x000f4240
    ac14:	0001d650 	.word	0x0001d650

0000ac18 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    ac18:	4b01      	ldr	r3, [pc, #4]	; (ac20 <virtio_set_status+0x8>)
    ac1a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    ac1c:	4770      	bx	lr
    ac1e:	bf00      	nop
    ac20:	20070000 	.word	0x20070000

0000ac24 <init_status_flag>:
    ac24:	2000      	movs	r0, #0
    ac26:	4b01      	ldr	r3, [pc, #4]	; (ac2c <init_status_flag+0x8>)
    ac28:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    ac2a:	4770      	bx	lr
    ac2c:	20070000 	.word	0x20070000

0000ac30 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    ac30:	4b01      	ldr	r3, [pc, #4]	; (ac38 <ipm_callback_process+0x8>)
    ac32:	6818      	ldr	r0, [r3, #0]
    ac34:	f011 bf4c 	b.w	1cad0 <virtqueue_notification>
    ac38:	2000a480 	.word	0x2000a480

0000ac3c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    ac3c:	4b0a      	ldr	r3, [pc, #40]	; (ac68 <virtio_notify+0x2c>)
{
    ac3e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    ac40:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    ac42:	2300      	movs	r3, #0
    ac44:	6882      	ldr	r2, [r0, #8]
    ac46:	9300      	str	r3, [sp, #0]
    ac48:	6814      	ldr	r4, [r2, #0]
    ac4a:	4619      	mov	r1, r3
    ac4c:	461a      	mov	r2, r3
    ac4e:	47a0      	blx	r4
	if (status != 0) {
    ac50:	4602      	mov	r2, r0
    ac52:	b130      	cbz	r0, ac62 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    ac54:	2145      	movs	r1, #69	; 0x45
    ac56:	4805      	ldr	r0, [pc, #20]	; (ac6c <virtio_notify+0x30>)
}
    ac58:	b002      	add	sp, #8
    ac5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    ac5e:	f00e bd5b 	b.w	19718 <printk>
}
    ac62:	b002      	add	sp, #8
    ac64:	bd10      	pop	{r4, pc}
    ac66:	bf00      	nop
    ac68:	2000a470 	.word	0x2000a470
    ac6c:	0001e792 	.word	0x0001e792

0000ac70 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac70:	4907      	ldr	r1, [pc, #28]	; (ac90 <ipm_callback+0x20>)
    ac72:	e8d1 3fef 	ldaex	r3, [r1]
    ac76:	f043 0201 	orr.w	r2, r3, #1
    ac7a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ac7e:	2800      	cmp	r0, #0
    ac80:	d1f7      	bne.n	ac72 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ac82:	07db      	lsls	r3, r3, #31
    ac84:	d403      	bmi.n	ac8e <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    ac86:	4803      	ldr	r0, [pc, #12]	; (ac94 <ipm_callback+0x24>)
    ac88:	3908      	subs	r1, #8
    ac8a:	f012 b8e2 	b.w	1ce52 <k_queue_append>
}
    ac8e:	4770      	bx	lr
    ac90:	2000a47c 	.word	0x2000a47c
    ac94:	20008810 	.word	0x20008810

0000ac98 <rpmsg_backend_init>:
{
    ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ac9a:	4b47      	ldr	r3, [pc, #284]	; (adb8 <rpmsg_backend_init+0x120>)
{
    ac9c:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ac9e:	ac02      	add	r4, sp, #8
{
    aca0:	4606      	mov	r6, r0
    aca2:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    aca4:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    aca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    acac:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    acb0:	f04f 33ff 	mov.w	r3, #4294967295
    acb4:	4941      	ldr	r1, [pc, #260]	; (adbc <rpmsg_backend_init+0x124>)
    acb6:	4842      	ldr	r0, [pc, #264]	; (adc0 <rpmsg_backend_init+0x128>)
    acb8:	f00d fdaa 	bl	18810 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    acbc:	4941      	ldr	r1, [pc, #260]	; (adc4 <rpmsg_backend_init+0x12c>)
    acbe:	4842      	ldr	r0, [pc, #264]	; (adc8 <rpmsg_backend_init+0x130>)
    acc0:	f012 f939 	bl	1cf36 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    acc4:	2200      	movs	r2, #0
    acc6:	4b41      	ldr	r3, [pc, #260]	; (adcc <rpmsg_backend_init+0x134>)
    acc8:	4941      	ldr	r1, [pc, #260]	; (add0 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    acca:	4620      	mov	r0, r4
    accc:	e9c3 1201 	strd	r1, r2, [r3, #4]
    acd0:	601a      	str	r2, [r3, #0]
    acd2:	f00b fa73 	bl	161bc <metal_init>
	if (err) {
    acd6:	4604      	mov	r4, r0
    acd8:	b138      	cbz	r0, acea <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    acda:	2145      	movs	r1, #69	; 0x45
    acdc:	4602      	mov	r2, r0
    acde:	483d      	ldr	r0, [pc, #244]	; (add4 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    ace0:	f00e fd1a 	bl	19718 <printk>
}
    ace4:	4620      	mov	r0, r4
    ace6:	b005      	add	sp, #20
    ace8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    acea:	483b      	ldr	r0, [pc, #236]	; (add8 <rpmsg_backend_init+0x140>)
    acec:	f00b fa46 	bl	1617c <metal_register_generic_device>
	if (err) {
    acf0:	4604      	mov	r4, r0
    acf2:	b118      	cbz	r0, acfc <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    acf4:	4602      	mov	r2, r0
    acf6:	2145      	movs	r1, #69	; 0x45
    acf8:	4838      	ldr	r0, [pc, #224]	; (addc <rpmsg_backend_init+0x144>)
    acfa:	e7f1      	b.n	ace0 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    acfc:	4938      	ldr	r1, [pc, #224]	; (ade0 <rpmsg_backend_init+0x148>)
    acfe:	4839      	ldr	r0, [pc, #228]	; (ade4 <rpmsg_backend_init+0x14c>)
    ad00:	aa01      	add	r2, sp, #4
    ad02:	f011 fc65 	bl	1c5d0 <metal_device_open>
	if (err) {
    ad06:	4604      	mov	r4, r0
    ad08:	b118      	cbz	r0, ad12 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    ad0a:	4602      	mov	r2, r0
    ad0c:	2145      	movs	r1, #69	; 0x45
    ad0e:	4836      	ldr	r0, [pc, #216]	; (ade8 <rpmsg_backend_init+0x150>)
    ad10:	e7e6      	b.n	ace0 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    ad12:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    ad14:	689a      	ldr	r2, [r3, #8]
    ad16:	b92a      	cbnz	r2, ad24 <rpmsg_backend_init+0x8c>
    ad18:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    ad1a:	2145      	movs	r1, #69	; 0x45
    ad1c:	4833      	ldr	r0, [pc, #204]	; (adec <rpmsg_backend_init+0x154>)
    ad1e:	f00e fcfb 	bl	19718 <printk>
		return err;
    ad22:	e7df      	b.n	ace4 <rpmsg_backend_init+0x4c>
    ad24:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    ad26:	6033      	str	r3, [r6, #0]
	if (!*io) {
    ad28:	2b00      	cmp	r3, #0
    ad2a:	d0f6      	beq.n	ad1a <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ad2c:	4830      	ldr	r0, [pc, #192]	; (adf0 <rpmsg_backend_init+0x158>)
    ad2e:	f00b fd5d 	bl	167ec <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    ad32:	4f30      	ldr	r7, [pc, #192]	; (adf4 <rpmsg_backend_init+0x15c>)
    ad34:	6038      	str	r0, [r7, #0]
    ad36:	4830      	ldr	r0, [pc, #192]	; (adf8 <rpmsg_backend_init+0x160>)
    ad38:	f00b fd58 	bl	167ec <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    ad3c:	683a      	ldr	r2, [r7, #0]
    ad3e:	b932      	cbnz	r2, ad4e <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    ad40:	2145      	movs	r1, #69	; 0x45
    ad42:	482e      	ldr	r0, [pc, #184]	; (adfc <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    ad44:	f00e fce8 	bl	19718 <printk>
		return -ENODEV;
    ad48:	f06f 0412 	mvn.w	r4, #18
    ad4c:	e7ca      	b.n	ace4 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    ad4e:	b910      	cbnz	r0, ad56 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    ad50:	2145      	movs	r1, #69	; 0x45
    ad52:	482b      	ldr	r0, [pc, #172]	; (ae00 <rpmsg_backend_init+0x168>)
    ad54:	e7f6      	b.n	ad44 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    ad56:	6883      	ldr	r3, [r0, #8]
    ad58:	4622      	mov	r2, r4
    ad5a:	685b      	ldr	r3, [r3, #4]
    ad5c:	4929      	ldr	r1, [pc, #164]	; (ae04 <rpmsg_backend_init+0x16c>)
    ad5e:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    ad60:	f00e ffc0 	bl	19ce4 <virtqueue_allocate.constprop.0>
    ad64:	4f28      	ldr	r7, [pc, #160]	; (ae08 <rpmsg_backend_init+0x170>)
    ad66:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    ad68:	b930      	cbnz	r0, ad78 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    ad6a:	2145      	movs	r1, #69	; 0x45
    ad6c:	4827      	ldr	r0, [pc, #156]	; (ae0c <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    ad6e:	f00e fcd3 	bl	19718 <printk>
		return -ENOMEM;
    ad72:	f06f 040b 	mvn.w	r4, #11
    ad76:	e7b5      	b.n	ace4 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    ad78:	f00e ffb4 	bl	19ce4 <virtqueue_allocate.constprop.0>
    ad7c:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    ad7e:	b910      	cbnz	r0, ad86 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    ad80:	2145      	movs	r1, #69	; 0x45
    ad82:	4823      	ldr	r0, [pc, #140]	; (ae10 <rpmsg_backend_init+0x178>)
    ad84:	e7f3      	b.n	ad6e <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    ad86:	6832      	ldr	r2, [r6, #0]
    ad88:	4b22      	ldr	r3, [pc, #136]	; (ae14 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    ad8a:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    ad8c:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    ad8e:	4a22      	ldr	r2, [pc, #136]	; (ae18 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    ad90:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    ad92:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    ad94:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    ad96:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    ad98:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    ad9a:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    ad9c:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    ad9e:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    ada0:	4e1e      	ldr	r6, [pc, #120]	; (ae1c <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    ada2:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    ada4:	4a1e      	ldr	r2, [pc, #120]	; (ae20 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    ada6:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    ada8:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    adaa:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    adac:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    adae:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    adb0:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    adb2:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    adb4:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    adb6:	e795      	b.n	ace4 <rpmsg_backend_init+0x4c>
    adb8:	0001d5c8 	.word	0x0001d5c8
    adbc:	2000c5e8 	.word	0x2000c5e8
    adc0:	20008810 	.word	0x20008810
    adc4:	0001e7b5 	.word	0x0001e7b5
    adc8:	20008830 	.word	0x20008830
    adcc:	2000a474 	.word	0x2000a474
    add0:	0000ac31 	.word	0x0000ac31
    add4:	0001e7c0 	.word	0x0001e7c0
    add8:	20008234 	.word	0x20008234
    addc:	0001e7e8 	.word	0x0001e7e8
    ade0:	0001e818 	.word	0x0001e818
    ade4:	0001e822 	.word	0x0001e822
    ade8:	0001e82a 	.word	0x0001e82a
    adec:	0001e84c 	.word	0x0001e84c
    adf0:	0001e87d 	.word	0x0001e87d
    adf4:	2000a470 	.word	0x2000a470
    adf8:	0001e883 	.word	0x0001e883
    adfc:	0001e889 	.word	0x0001e889
    ae00:	0001e8b1 	.word	0x0001e8b1
    ae04:	0000ac71 	.word	0x0000ac71
    ae08:	2000a480 	.word	0x2000a480
    ae0c:	0001e8d9 	.word	0x0001e8d9
    ae10:	0001e907 	.word	0x0001e907
    ae14:	20008204 	.word	0x20008204
    ae18:	2007fc00 	.word	0x2007fc00
    ae1c:	2007f800 	.word	0x2007f800
    ae20:	0001d7dc 	.word	0x0001d7dc

0000ae24 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    ae24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ae28:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    ae2a:	4e1b      	ldr	r6, [pc, #108]	; (ae98 <ns_bind_cb+0x74>)
{
    ae2c:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    ae2e:	6831      	ldr	r1, [r6, #0]
    ae30:	4628      	mov	r0, r5
{
    ae32:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    ae34:	f00f fea2 	bl	1ab7c <strcmp>
    ae38:	b168      	cbz	r0, ae56 <ns_bind_cb+0x32>
    ae3a:	4628      	mov	r0, r5
    ae3c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    ae3e:	f00f fe9d 	bl	1ab7c <strcmp>
    ae42:	b138      	cbz	r0, ae54 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    ae44:	462a      	mov	r2, r5
    ae46:	2145      	movs	r1, #69	; 0x45
    ae48:	4814      	ldr	r0, [pc, #80]	; (ae9c <ns_bind_cb+0x78>)
}
    ae4a:	b004      	add	sp, #16
    ae4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    ae50:	f00e bc62 	b.w	19718 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    ae54:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    ae56:	244c      	movs	r4, #76	; 0x4c
    ae58:	4344      	muls	r4, r0
    ae5a:	4b11      	ldr	r3, [pc, #68]	; (aea0 <ns_bind_cb+0x7c>)
    ae5c:	f104 0008 	add.w	r0, r4, #8
    ae60:	9302      	str	r3, [sp, #8]
    ae62:	4434      	add	r4, r6
    ae64:	6863      	ldr	r3, [r4, #4]
    ae66:	462a      	mov	r2, r5
    ae68:	e9cd 8300 	strd	r8, r3, [sp]
    ae6c:	4639      	mov	r1, r7
    ae6e:	f04f 33ff 	mov.w	r3, #4294967295
    ae72:	4430      	add	r0, r6
    ae74:	f00b fa6e 	bl	16354 <rpmsg_create_ept>
			if (err != 0) {
    ae78:	4603      	mov	r3, r0
    ae7a:	b138      	cbz	r0, ae8c <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    ae7c:	462a      	mov	r2, r5
    ae7e:	2145      	movs	r1, #69	; 0x45
    ae80:	4808      	ldr	r0, [pc, #32]	; (aea4 <ns_bind_cb+0x80>)
}
    ae82:	b004      	add	sp, #16
    ae84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    ae88:	f00e bc46 	b.w	19718 <printk>
				endpoints[i].bound = true;
    ae8c:	2301      	movs	r3, #1
    ae8e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    ae92:	b004      	add	sp, #16
    ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae98:	2000a488 	.word	0x2000a488
    ae9c:	0001e943 	.word	0x0001e943
    aea0:	00019cff 	.word	0x00019cff
    aea4:	0001e972 	.word	0x0001e972

0000aea8 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    aea8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    aeaa:	4d13      	ldr	r5, [pc, #76]	; (aef8 <rpmsg_service_init+0x50>)
    aeac:	4913      	ldr	r1, [pc, #76]	; (aefc <rpmsg_service_init+0x54>)
    aeae:	4628      	mov	r0, r5
    aeb0:	f7ff fef2 	bl	ac98 <rpmsg_backend_init>
	if (err) {
    aeb4:	4604      	mov	r4, r0
    aeb6:	b138      	cbz	r0, aec8 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    aeb8:	2145      	movs	r1, #69	; 0x45
    aeba:	4602      	mov	r2, r0
    aebc:	4810      	ldr	r0, [pc, #64]	; (af00 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    aebe:	f00e fc2b 	bl	19718 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    aec2:	4620      	mov	r0, r4
    aec4:	b003      	add	sp, #12
    aec6:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    aec8:	4c0e      	ldr	r4, [pc, #56]	; (af04 <rpmsg_service_init+0x5c>)
    aeca:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    aece:	4620      	mov	r0, r4
    aed0:	490d      	ldr	r1, [pc, #52]	; (af08 <rpmsg_service_init+0x60>)
    aed2:	f011 ff87 	bl	1cde4 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    aed6:	9400      	str	r4, [sp, #0]
    aed8:	682b      	ldr	r3, [r5, #0]
    aeda:	4a0c      	ldr	r2, [pc, #48]	; (af0c <rpmsg_service_init+0x64>)
    aedc:	4907      	ldr	r1, [pc, #28]	; (aefc <rpmsg_service_init+0x54>)
    aede:	480c      	ldr	r0, [pc, #48]	; (af10 <rpmsg_service_init+0x68>)
    aee0:	f00b fb64 	bl	165ac <rpmsg_init_vdev>
	if (err) {
    aee4:	4604      	mov	r4, r0
    aee6:	b118      	cbz	r0, aef0 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    aee8:	4602      	mov	r2, r0
    aeea:	2145      	movs	r1, #69	; 0x45
    aeec:	4809      	ldr	r0, [pc, #36]	; (af14 <rpmsg_service_init+0x6c>)
    aeee:	e7e6      	b.n	aebe <rpmsg_service_init+0x16>
	ep_crt_started = true;
    aef0:	2201      	movs	r2, #1
    aef2:	4b09      	ldr	r3, [pc, #36]	; (af18 <rpmsg_service_init+0x70>)
    aef4:	701a      	strb	r2, [r3, #0]
	return 0;
    aef6:	e7e4      	b.n	aec2 <rpmsg_service_init+0x1a>
    aef8:	2000a520 	.word	0x2000a520
    aefc:	200088c0 	.word	0x200088c0
    af00:	0001e9a8 	.word	0x0001e9a8
    af04:	2000a5b4 	.word	0x2000a5b4
    af08:	20070400 	.word	0x20070400
    af0c:	0000ae25 	.word	0x0000ae25
    af10:	2000a524 	.word	0x2000a524
    af14:	0001e9d5 	.word	0x0001e9d5
    af18:	2000c0e9 	.word	0x2000c0e9

0000af1c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    af1c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    af1e:	4b0d      	ldr	r3, [pc, #52]	; (af54 <rpmsg_service_register_endpoint+0x38>)
{
    af20:	4602      	mov	r2, r0
	if (ep_crt_started) {
    af22:	781b      	ldrb	r3, [r3, #0]
    af24:	b993      	cbnz	r3, af4c <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    af26:	4c0c      	ldr	r4, [pc, #48]	; (af58 <rpmsg_service_register_endpoint+0x3c>)
    af28:	6820      	ldr	r0, [r4, #0]
    af2a:	b148      	cbz	r0, af40 <rpmsg_service_register_endpoint+0x24>
    af2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    af2e:	b133      	cbz	r3, af3e <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    af30:	480a      	ldr	r0, [pc, #40]	; (af5c <rpmsg_service_register_endpoint+0x40>)
    af32:	2145      	movs	r1, #69	; 0x45
    af34:	f00e fbf0 	bl	19718 <printk>

	return -ENOMEM;
    af38:	f06f 000b 	mvn.w	r0, #11
}
    af3c:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    af3e:	2001      	movs	r0, #1
			endpoints[i].name = name;
    af40:	234c      	movs	r3, #76	; 0x4c
    af42:	4343      	muls	r3, r0
    af44:	18e5      	adds	r5, r4, r3
    af46:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    af48:	6069      	str	r1, [r5, #4]
			return i;
    af4a:	e7f7      	b.n	af3c <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    af4c:	f06f 0043 	mvn.w	r0, #67	; 0x43
    af50:	e7f4      	b.n	af3c <rpmsg_service_register_endpoint+0x20>
    af52:	bf00      	nop
    af54:	2000c0e9 	.word	0x2000c0e9
    af58:	2000a488 	.word	0x2000a488
    af5c:	0001e9f4 	.word	0x0001e9f4

0000af60 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    af60:	224c      	movs	r2, #76	; 0x4c
    af62:	4b03      	ldr	r3, [pc, #12]	; (af70 <rpmsg_service_endpoint_is_bound+0x10>)
    af64:	fb02 3300 	mla	r3, r2, r0, r3
    af68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    af6c:	4770      	bx	lr
    af6e:	bf00      	nop
    af70:	2000a488 	.word	0x2000a488

0000af74 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    af74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    af76:	244c      	movs	r4, #76	; 0x4c
    af78:	460b      	mov	r3, r1
    af7a:	2101      	movs	r1, #1
    af7c:	4344      	muls	r4, r0
    af7e:	e9cd 2100 	strd	r2, r1, [sp]
    af82:	4d05      	ldr	r5, [pc, #20]	; (af98 <rpmsg_service_send+0x24>)
    af84:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    af86:	3408      	adds	r4, #8
    af88:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    af8c:	1928      	adds	r0, r5, r4
    af8e:	f00b f9cf 	bl	16330 <rpmsg_send_offchannel_raw>
}
    af92:	b003      	add	sp, #12
    af94:	bd30      	pop	{r4, r5, pc}
    af96:	bf00      	nop
    af98:	2000a488 	.word	0x2000a488

0000af9c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    af9c:	4b10      	ldr	r3, [pc, #64]	; (afe0 <settings_save_one+0x44>)
{
    af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    afa2:	681c      	ldr	r4, [r3, #0]
{
    afa4:	4605      	mov	r5, r0
    afa6:	460e      	mov	r6, r1
    afa8:	4617      	mov	r7, r2
	if (!cs) {
    afaa:	b1ac      	cbz	r4, afd8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    afac:	f04f 32ff 	mov.w	r2, #4294967295
    afb0:	f04f 33ff 	mov.w	r3, #4294967295
    afb4:	480b      	ldr	r0, [pc, #44]	; (afe4 <settings_save_one+0x48>)
    afb6:	f00b ff3b 	bl	16e30 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    afba:	6863      	ldr	r3, [r4, #4]
    afbc:	4632      	mov	r2, r6
    afbe:	f8d3 8008 	ldr.w	r8, [r3, #8]
    afc2:	4629      	mov	r1, r5
    afc4:	463b      	mov	r3, r7
    afc6:	4620      	mov	r0, r4
    afc8:	47c0      	blx	r8
    afca:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    afcc:	4805      	ldr	r0, [pc, #20]	; (afe4 <settings_save_one+0x48>)
    afce:	f00b fffb 	bl	16fc8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    afd2:	4620      	mov	r0, r4
    afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    afd8:	f06f 0401 	mvn.w	r4, #1
    afdc:	e7f9      	b.n	afd2 <settings_save_one+0x36>
    afde:	bf00      	nop
    afe0:	2000a5c8 	.word	0x2000a5c8
    afe4:	20008674 	.word	0x20008674

0000afe8 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    afe8:	2300      	movs	r3, #0
{
    afea:	b530      	push	{r4, r5, lr}
    afec:	b085      	sub	sp, #20
    afee:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    aff0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    aff4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    aff6:	f04f 33ff 	mov.w	r3, #4294967295
    affa:	f04f 32ff 	mov.w	r2, #4294967295
    affe:	480b      	ldr	r0, [pc, #44]	; (b02c <settings_load_subtree+0x44>)
    b000:	f00b ff16 	bl	16e30 <z_impl_k_mutex_lock>
	return list->head;
    b004:	4b0a      	ldr	r3, [pc, #40]	; (b030 <settings_load_subtree+0x48>)
    b006:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b008:	b134      	cbz	r4, b018 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b00a:	6863      	ldr	r3, [r4, #4]
    b00c:	4620      	mov	r0, r4
    b00e:	681b      	ldr	r3, [r3, #0]
    b010:	a901      	add	r1, sp, #4
    b012:	4798      	blx	r3
	return node->next;
    b014:	6824      	ldr	r4, [r4, #0]
    b016:	e7f7      	b.n	b008 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b018:	4628      	mov	r0, r5
    b01a:	f000 f83b 	bl	b094 <settings_commit_subtree>
    b01e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b020:	4802      	ldr	r0, [pc, #8]	; (b02c <settings_load_subtree+0x44>)
    b022:	f00b ffd1 	bl	16fc8 <z_impl_k_mutex_unlock>
}
    b026:	4620      	mov	r0, r4
    b028:	b005      	add	sp, #20
    b02a:	bd30      	pop	{r4, r5, pc}
    b02c:	20008674 	.word	0x20008674
    b030:	2000a5c0 	.word	0x2000a5c0

0000b034 <settings_load_subtree_direct>:
{
    b034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b036:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b03a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b03c:	f04f 33ff 	mov.w	r3, #4294967295
    b040:	f04f 32ff 	mov.w	r2, #4294967295
    b044:	4809      	ldr	r0, [pc, #36]	; (b06c <settings_load_subtree_direct+0x38>)
    b046:	f00b fef3 	bl	16e30 <z_impl_k_mutex_lock>
	return list->head;
    b04a:	4b09      	ldr	r3, [pc, #36]	; (b070 <settings_load_subtree_direct+0x3c>)
    b04c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b04e:	b134      	cbz	r4, b05e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b050:	6863      	ldr	r3, [r4, #4]
    b052:	4620      	mov	r0, r4
    b054:	681b      	ldr	r3, [r3, #0]
    b056:	a901      	add	r1, sp, #4
    b058:	4798      	blx	r3
	return node->next;
    b05a:	6824      	ldr	r4, [r4, #0]
    b05c:	e7f7      	b.n	b04e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b05e:	4803      	ldr	r0, [pc, #12]	; (b06c <settings_load_subtree_direct+0x38>)
    b060:	f00b ffb2 	bl	16fc8 <z_impl_k_mutex_unlock>
}
    b064:	2000      	movs	r0, #0
    b066:	b004      	add	sp, #16
    b068:	bd10      	pop	{r4, pc}
    b06a:	bf00      	nop
    b06c:	20008674 	.word	0x20008674
    b070:	2000a5c0 	.word	0x2000a5c0

0000b074 <settings_store_init>:
	list->head = NULL;
    b074:	2200      	movs	r2, #0
    b076:	4b02      	ldr	r3, [pc, #8]	; (b080 <settings_store_init+0xc>)
	list->tail = NULL;
    b078:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b07c:	4770      	bx	lr
    b07e:	bf00      	nop
    b080:	2000a5c0 	.word	0x2000a5c0

0000b084 <settings_init>:
	list->head = NULL;
    b084:	2200      	movs	r2, #0
    b086:	4b02      	ldr	r3, [pc, #8]	; (b090 <settings_init+0xc>)
	list->tail = NULL;
    b088:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    b08c:	f7ff bff2 	b.w	b074 <settings_store_init>
    b090:	2000a5cc 	.word	0x2000a5cc

0000b094 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    b094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b098:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    b09a:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b09c:	4c1f      	ldr	r4, [pc, #124]	; (b11c <settings_commit_subtree+0x88>)
    b09e:	4f20      	ldr	r7, [pc, #128]	; (b120 <settings_commit_subtree+0x8c>)
    b0a0:	f8df 8080 	ldr.w	r8, [pc, #128]	; b124 <settings_commit_subtree+0x90>
    b0a4:	42bc      	cmp	r4, r7
    b0a6:	d908      	bls.n	b0ba <settings_commit_subtree+0x26>
    b0a8:	4641      	mov	r1, r8
    b0aa:	481f      	ldr	r0, [pc, #124]	; (b128 <settings_commit_subtree+0x94>)
    b0ac:	22f4      	movs	r2, #244	; 0xf4
    b0ae:	f00e fb33 	bl	19718 <printk>
    b0b2:	21f4      	movs	r1, #244	; 0xf4
    b0b4:	4640      	mov	r0, r8
    b0b6:	f00e fdd5 	bl	19c64 <assert_post_action>
    b0ba:	42bc      	cmp	r4, r7
    b0bc:	d307      	bcc.n	b0ce <settings_commit_subtree+0x3a>
	return list->head;
    b0be:	4b1b      	ldr	r3, [pc, #108]	; (b12c <settings_commit_subtree+0x98>)
    b0c0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    b0c2:	b10c      	cbz	r4, b0c8 <settings_commit_subtree+0x34>
    b0c4:	3c14      	subs	r4, #20
    b0c6:	b9a4      	cbnz	r4, b0f2 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    b0c8:	4628      	mov	r0, r5
    b0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b0ce:	b91e      	cbnz	r6, b0d8 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    b0d0:	68e3      	ldr	r3, [r4, #12]
    b0d2:	b94b      	cbnz	r3, b0e8 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b0d4:	3414      	adds	r4, #20
    b0d6:	e7e5      	b.n	b0a4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b0d8:	2200      	movs	r2, #0
    b0da:	4631      	mov	r1, r6
    b0dc:	6820      	ldr	r0, [r4, #0]
    b0de:	f00e fe17 	bl	19d10 <settings_name_steq>
    b0e2:	2800      	cmp	r0, #0
    b0e4:	d1f4      	bne.n	b0d0 <settings_commit_subtree+0x3c>
    b0e6:	e7f5      	b.n	b0d4 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    b0e8:	4798      	blx	r3
				rc = rc2;
    b0ea:	2d00      	cmp	r5, #0
    b0ec:	bf08      	it	eq
    b0ee:	4605      	moveq	r5, r0
    b0f0:	e7f0      	b.n	b0d4 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b0f2:	b936      	cbnz	r6, b102 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    b0f4:	68e3      	ldr	r3, [r4, #12]
    b0f6:	b963      	cbnz	r3, b112 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b0f8:	f114 0f14 	cmn.w	r4, #20
    b0fc:	d0e4      	beq.n	b0c8 <settings_commit_subtree+0x34>
	return node->next;
    b0fe:	6964      	ldr	r4, [r4, #20]
    b100:	e7df      	b.n	b0c2 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b102:	2200      	movs	r2, #0
    b104:	4631      	mov	r1, r6
    b106:	6820      	ldr	r0, [r4, #0]
    b108:	f00e fe02 	bl	19d10 <settings_name_steq>
    b10c:	2800      	cmp	r0, #0
    b10e:	d1f1      	bne.n	b0f4 <settings_commit_subtree+0x60>
    b110:	e7f2      	b.n	b0f8 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    b112:	4798      	blx	r3
				rc = rc2;
    b114:	2d00      	cmp	r5, #0
    b116:	bf08      	it	eq
    b118:	4605      	moveq	r5, r0
    b11a:	e7ed      	b.n	b0f8 <settings_commit_subtree+0x64>
    b11c:	0001d46c 	.word	0x0001d46c
    b120:	0001d4d0 	.word	0x0001d4d0
    b124:	0001ea2d 	.word	0x0001ea2d
    b128:	0001e6bc 	.word	0x0001e6bc
    b12c:	2000a5cc 	.word	0x2000a5cc

0000b130 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    b130:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    b132:	4c06      	ldr	r4, [pc, #24]	; (b14c <settings_subsys_init+0x1c>)
    b134:	7823      	ldrb	r3, [r4, #0]
    b136:	b93b      	cbnz	r3, b148 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    b138:	f7ff ffa4 	bl	b084 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    b13c:	f00e fe21 	bl	19d82 <settings_backend_init>

	if (!err) {
    b140:	b908      	cbnz	r0, b146 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    b142:	2301      	movs	r3, #1
    b144:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    b146:	bd10      	pop	{r4, pc}
		return 0;
    b148:	2000      	movs	r0, #0
    b14a:	e7fc      	b.n	b146 <settings_subsys_init+0x16>
    b14c:	2000c0ea 	.word	0x2000c0ea

0000b150 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    b150:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    b152:	4c04      	ldr	r4, [pc, #16]	; (b164 <rtt_console_init+0x14>)
    b154:	4620      	mov	r0, r4
    b156:	f7fe fd93 	bl	9c80 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    b15a:	4620      	mov	r0, r4
    b15c:	f002 fa20 	bl	d5a0 <__stdout_hook_install>

	return 0;
}
    b160:	2000      	movs	r0, #0
    b162:	bd10      	pop	{r4, pc}
    b164:	0000b169 	.word	0x0000b169

0000b168 <rtt_console_out>:
{
    b168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b16c:	4604      	mov	r4, r0
	char c = (char)character;
    b16e:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    b170:	f8df 8058 	ldr.w	r8, [pc, #88]	; b1cc <rtt_console_out+0x64>
    b174:	4e16      	ldr	r6, [pc, #88]	; (b1d0 <rtt_console_out+0x68>)
    b176:	f88d 0007 	strb.w	r0, [sp, #7]
    b17a:	f04f 33ff 	mov.w	r3, #4294967295
    b17e:	f04f 32ff 	mov.w	r2, #4294967295
    b182:	4640      	mov	r0, r8
    b184:	f00b fe54 	bl	16e30 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    b188:	2201      	movs	r2, #1
    b18a:	f10d 0107 	add.w	r1, sp, #7
    b18e:	2000      	movs	r0, #0
    b190:	f001 faa4 	bl	c6dc <SEGGER_RTT_WriteNoLock>
    b194:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    b196:	4640      	mov	r0, r8
    b198:	f00b ff16 	bl	16fc8 <z_impl_k_mutex_unlock>
		if (cnt) {
    b19c:	b12f      	cbz	r7, b1aa <rtt_console_out+0x42>
			host_present = true;
    b19e:	2301      	movs	r3, #1
    b1a0:	7033      	strb	r3, [r6, #0]
}
    b1a2:	4620      	mov	r0, r4
    b1a4:	b002      	add	sp, #8
    b1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    b1aa:	7833      	ldrb	r3, [r6, #0]
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d0f8      	beq.n	b1a2 <rtt_console_out+0x3a>
			if (max_cnt) {
    b1b0:	3d01      	subs	r5, #1
    b1b2:	d008      	beq.n	b1c6 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    b1b4:	f011 feb5 	bl	1cf22 <k_is_in_isr>
    b1b8:	2800      	cmp	r0, #0
    b1ba:	d1de      	bne.n	b17a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    b1bc:	2100      	movs	r1, #0
    b1be:	2042      	movs	r0, #66	; 0x42
    b1c0:	f00d f8b4 	bl	1832c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b1c4:	e7d9      	b.n	b17a <rtt_console_out+0x12>
				host_present = false;
    b1c6:	7035      	strb	r5, [r6, #0]
    b1c8:	e7eb      	b.n	b1a2 <rtt_console_out+0x3a>
    b1ca:	bf00      	nop
    b1cc:	2000864c 	.word	0x2000864c
    b1d0:	2000c0eb 	.word	0x2000c0eb

0000b1d4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b1d6:	2340      	movs	r3, #64	; 0x40
{
    b1d8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b1da:	490a      	ldr	r1, [pc, #40]	; (b204 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b1dc:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    b1de:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b1e0:	1149      	asrs	r1, r1, #5
{
    b1e2:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b1e4:	4623      	mov	r3, r4
    b1e6:	4a08      	ldr	r2, [pc, #32]	; (b208 <onoff_start+0x34>)
    b1e8:	4808      	ldr	r0, [pc, #32]	; (b20c <onoff_start+0x38>)
    b1ea:	f00e fddf 	bl	19dac <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    b1ee:	1e01      	subs	r1, r0, #0
    b1f0:	da05      	bge.n	b1fe <onoff_start+0x2a>
		notify(mgr, err);
    b1f2:	4628      	mov	r0, r5
    b1f4:	4623      	mov	r3, r4
	}
}
    b1f6:	b003      	add	sp, #12
    b1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    b1fc:	4718      	bx	r3
}
    b1fe:	b003      	add	sp, #12
    b200:	bd30      	pop	{r4, r5, pc}
    b202:	bf00      	nop
    b204:	2000a5e4 	.word	0x2000a5e4
    b208:	00019e1f 	.word	0x00019e1f
    b20c:	2000856c 	.word	0x2000856c

0000b210 <get_status>:
{
    b210:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b212:	b2cc      	uxtb	r4, r1
    b214:	2c03      	cmp	r4, #3
{
    b216:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b218:	d908      	bls.n	b22c <get_status+0x1c>
    b21a:	4909      	ldr	r1, [pc, #36]	; (b240 <get_status+0x30>)
    b21c:	4809      	ldr	r0, [pc, #36]	; (b244 <get_status+0x34>)
    b21e:	227e      	movs	r2, #126	; 0x7e
    b220:	f00e fa7a 	bl	19718 <printk>
    b224:	217e      	movs	r1, #126	; 0x7e
    b226:	4806      	ldr	r0, [pc, #24]	; (b240 <get_status+0x30>)
    b228:	f00e fd1c 	bl	19c64 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b22c:	230c      	movs	r3, #12
    b22e:	68e9      	ldr	r1, [r5, #12]
    b230:	fb04 1403 	mla	r4, r4, r3, r1
    b234:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    b238:	f000 0007 	and.w	r0, r0, #7
    b23c:	bd38      	pop	{r3, r4, r5, pc}
    b23e:	bf00      	nop
    b240:	0001ea65 	.word	0x0001ea65
    b244:	0001e6bc 	.word	0x0001e6bc

0000b248 <stop>:
{
    b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b24a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b24c:	2c03      	cmp	r4, #3
{
    b24e:	4605      	mov	r5, r0
    b250:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    b252:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b254:	d90a      	bls.n	b26c <stop+0x24>
    b256:	4919      	ldr	r1, [pc, #100]	; (b2bc <stop+0x74>)
    b258:	4819      	ldr	r0, [pc, #100]	; (b2c0 <stop+0x78>)
    b25a:	f240 1253 	movw	r2, #339	; 0x153
    b25e:	f00e fa5b 	bl	19718 <printk>
    b262:	f240 1153 	movw	r1, #339	; 0x153
    b266:	4815      	ldr	r0, [pc, #84]	; (b2bc <stop+0x74>)
    b268:	f00e fcfc 	bl	19c64 <assert_post_action>
	__asm__ volatile(
    b26c:	f04f 0320 	mov.w	r3, #32
    b270:	f3ef 8111 	mrs	r1, BASEPRI
    b274:	f383 8811 	msr	BASEPRI, r3
    b278:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b27c:	220c      	movs	r2, #12
    b27e:	fb02 6304 	mla	r3, r2, r4, r6
    b282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b286:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b28a:	d001      	beq.n	b290 <stop+0x48>
    b28c:	429f      	cmp	r7, r3
    b28e:	d112      	bne.n	b2b6 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b290:	2301      	movs	r3, #1
	int err = 0;
    b292:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b294:	fb02 6604 	mla	r6, r2, r4, r6
    b298:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    b29c:	f381 8811 	msr	BASEPRI, r1
    b2a0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b2a4:	b930      	cbnz	r0, b2b4 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    b2a6:	230c      	movs	r3, #12
    b2a8:	6869      	ldr	r1, [r5, #4]
    b2aa:	fb03 1404 	mla	r4, r3, r4, r1
    b2ae:	6863      	ldr	r3, [r4, #4]
    b2b0:	4798      	blx	r3
	return 0;
    b2b2:	2000      	movs	r0, #0
}
    b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    b2b6:	f04f 30ff 	mov.w	r0, #4294967295
    b2ba:	e7ef      	b.n	b29c <stop+0x54>
    b2bc:	0001ea65 	.word	0x0001ea65
    b2c0:	0001e6bc 	.word	0x0001e6bc

0000b2c4 <onoff_stop>:
{
    b2c4:	b570      	push	{r4, r5, r6, lr}
    b2c6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b2c8:	4906      	ldr	r1, [pc, #24]	; (b2e4 <onoff_stop+0x20>)
{
    b2ca:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    b2cc:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b2ce:	1149      	asrs	r1, r1, #5
    b2d0:	2240      	movs	r2, #64	; 0x40
    b2d2:	4805      	ldr	r0, [pc, #20]	; (b2e8 <onoff_stop+0x24>)
    b2d4:	f7ff ffb8 	bl	b248 <stop>
	notify(mgr, res);
    b2d8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b2da:	4601      	mov	r1, r0
	notify(mgr, res);
    b2dc:	4620      	mov	r0, r4
}
    b2de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    b2e2:	4718      	bx	r3
    b2e4:	2000a5e4 	.word	0x2000a5e4
    b2e8:	2000856c 	.word	0x2000856c

0000b2ec <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b2f0:	2200      	movs	r2, #0
    b2f2:	2101      	movs	r1, #1
{
    b2f4:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b2f6:	2005      	movs	r0, #5
    b2f8:	f001 fc0c 	bl	cb14 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    b2fc:	2005      	movs	r0, #5
    b2fe:	f001 fbeb 	bl	cad8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    b302:	4811      	ldr	r0, [pc, #68]	; (b348 <clk_init+0x5c>)
    b304:	f00a fbea 	bl	15adc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    b308:	4b10      	ldr	r3, [pc, #64]	; (b34c <clk_init+0x60>)
    b30a:	4298      	cmp	r0, r3
    b30c:	d119      	bne.n	b342 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    b30e:	f00a fc05 	bl	15b1c <nrfx_clock_enable>
    b312:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b314:	f04f 080c 	mov.w	r8, #12
    b318:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b31a:	f8df 9034 	ldr.w	r9, [pc, #52]	; b350 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    b31e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b320:	4649      	mov	r1, r9
    b322:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    b326:	f00e fa52 	bl	197ce <onoff_manager_init>
		if (err < 0) {
    b32a:	2800      	cmp	r0, #0
    b32c:	db07      	blt.n	b33e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b32e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    b332:	3401      	adds	r4, #1
    b334:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b336:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    b33a:	d1f0      	bne.n	b31e <clk_init+0x32>
	}

	return 0;
    b33c:	2000      	movs	r0, #0
}
    b33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    b342:	f06f 0004 	mvn.w	r0, #4
    b346:	e7fa      	b.n	b33e <clk_init+0x52>
    b348:	0000b38d 	.word	0x0000b38d
    b34c:	0bad0000 	.word	0x0bad0000
    b350:	0001d844 	.word	0x0001d844

0000b354 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    b354:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    b356:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    b358:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    b35a:	434b      	muls	r3, r1
    b35c:	4809      	ldr	r0, [pc, #36]	; (b384 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    b35e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    b360:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    b362:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    b364:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b368:	4418      	add	r0, r3
	sub_data->cb = NULL;
    b36a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b36e:	f00e fd0a 	bl	19d86 <set_on_state>
	if (callback) {
    b372:	b12d      	cbz	r5, b380 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b374:	4632      	mov	r2, r6
    b376:	462b      	mov	r3, r5
}
    b378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    b37c:	4802      	ldr	r0, [pc, #8]	; (b388 <clkstarted_handle.constprop.0+0x34>)
    b37e:	4718      	bx	r3
}
    b380:	bd70      	pop	{r4, r5, r6, pc}
    b382:	bf00      	nop
    b384:	2000a5e4 	.word	0x2000a5e4
    b388:	2000856c 	.word	0x2000856c

0000b38c <clock_event_handler>:
{
    b38c:	b508      	push	{r3, lr}
    b38e:	2805      	cmp	r0, #5
    b390:	d821      	bhi.n	b3d6 <clock_event_handler+0x4a>
    b392:	e8df f000 	tbb	[pc, r0]
    b396:	1103      	.short	0x1103
    b398:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    b39c:	4b13      	ldr	r3, [pc, #76]	; (b3ec <clock_event_handler+0x60>)
    b39e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    b3a2:	f010 0007 	ands.w	r0, r0, #7
    b3a6:	d11f      	bne.n	b3e8 <clock_event_handler+0x5c>
}
    b3a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    b3ac:	f7ff bfd2 	b.w	b354 <clkstarted_handle.constprop.0>
    b3b0:	2002      	movs	r0, #2
    b3b2:	e7f9      	b.n	b3a8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    b3b4:	2003      	movs	r0, #3
    b3b6:	e7f7      	b.n	b3a8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b3b8:	2001      	movs	r0, #1
    b3ba:	e7f5      	b.n	b3a8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    b3bc:	490c      	ldr	r1, [pc, #48]	; (b3f0 <clock_event_handler+0x64>)
    b3be:	f240 2266 	movw	r2, #614	; 0x266
    b3c2:	480c      	ldr	r0, [pc, #48]	; (b3f4 <clock_event_handler+0x68>)
    b3c4:	f00e f9a8 	bl	19718 <printk>
    b3c8:	f240 2166 	movw	r1, #614	; 0x266
}
    b3cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    b3d0:	4807      	ldr	r0, [pc, #28]	; (b3f0 <clock_event_handler+0x64>)
    b3d2:	f00e bc47 	b.w	19c64 <assert_post_action>
    b3d6:	4906      	ldr	r1, [pc, #24]	; (b3f0 <clock_event_handler+0x64>)
    b3d8:	f240 226a 	movw	r2, #618	; 0x26a
    b3dc:	4805      	ldr	r0, [pc, #20]	; (b3f4 <clock_event_handler+0x68>)
    b3de:	f00e f99b 	bl	19718 <printk>
    b3e2:	f240 216a 	movw	r1, #618	; 0x26a
    b3e6:	e7f1      	b.n	b3cc <clock_event_handler+0x40>
}
    b3e8:	bd08      	pop	{r3, pc}
    b3ea:	bf00      	nop
    b3ec:	2000a5e4 	.word	0x2000a5e4
    b3f0:	0001ea65 	.word	0x0001ea65
    b3f4:	0001e6bc 	.word	0x0001e6bc

0000b3f8 <generic_hfclk_start>:
{
    b3f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    b3fa:	f04f 0320 	mov.w	r3, #32
    b3fe:	f3ef 8111 	mrs	r1, BASEPRI
    b402:	f383 8811 	msr	BASEPRI, r3
    b406:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    b40a:	4a11      	ldr	r2, [pc, #68]	; (b450 <generic_hfclk_start+0x58>)
    b40c:	6813      	ldr	r3, [r2, #0]
    b40e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    b412:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    b416:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b418:	d00b      	beq.n	b432 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b41a:	4a0e      	ldr	r2, [pc, #56]	; (b454 <generic_hfclk_start+0x5c>)
    b41c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b420:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b424:	f013 0301 	ands.w	r3, r3, #1
    b428:	d003      	beq.n	b432 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    b42a:	480b      	ldr	r0, [pc, #44]	; (b458 <generic_hfclk_start+0x60>)
    b42c:	f00e fcab 	bl	19d86 <set_on_state>
			already_started = true;
    b430:	2301      	movs	r3, #1
	__asm__ volatile(
    b432:	f381 8811 	msr	BASEPRI, r1
    b436:	f3bf 8f6f 	isb	sy
	if (already_started) {
    b43a:	b123      	cbz	r3, b446 <generic_hfclk_start+0x4e>
}
    b43c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b440:	2000      	movs	r0, #0
    b442:	f7ff bf87 	b.w	b354 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b446:	2001      	movs	r0, #1
}
    b448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b44c:	f00a bb8a 	b.w	15b64 <nrfx_clock_start>
    b450:	2000a694 	.word	0x2000a694
    b454:	40005000 	.word	0x40005000
    b458:	2000a66c 	.word	0x2000a66c

0000b45c <api_blocking_start>:
{
    b45c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b45e:	2200      	movs	r2, #0
    b460:	2301      	movs	r3, #1
    b462:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b466:	ab04      	add	r3, sp, #16
    b468:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b46c:	4a09      	ldr	r2, [pc, #36]	; (b494 <api_blocking_start+0x38>)
    b46e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b470:	f8cd d000 	str.w	sp, [sp]
    b474:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b478:	f00e fcca 	bl	19e10 <api_start>
	if (err < 0) {
    b47c:	2800      	cmp	r0, #0
    b47e:	db05      	blt.n	b48c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    b480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b484:	2300      	movs	r3, #0
    b486:	4668      	mov	r0, sp
    b488:	f00c ffc2 	bl	18410 <z_impl_k_sem_take>
}
    b48c:	b007      	add	sp, #28
    b48e:	f85d fb04 	ldr.w	pc, [sp], #4
    b492:	bf00      	nop
    b494:	00019e55 	.word	0x00019e55

0000b498 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b498:	4b07      	ldr	r3, [pc, #28]	; (b4b8 <generic_hfclk_stop+0x20>)
    b49a:	e8d3 2fef 	ldaex	r2, [r3]
    b49e:	f022 0102 	bic.w	r1, r2, #2
    b4a2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    b4a6:	2800      	cmp	r0, #0
    b4a8:	d1f7      	bne.n	b49a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    b4aa:	07d3      	lsls	r3, r2, #31
    b4ac:	d402      	bmi.n	b4b4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b4ae:	2001      	movs	r0, #1
    b4b0:	f00a bbc2 	b.w	15c38 <nrfx_clock_stop>
}
    b4b4:	4770      	bx	lr
    b4b6:	bf00      	nop
    b4b8:	2000a694 	.word	0x2000a694

0000b4bc <z_nrf_clock_control_lf_on>:
{
    b4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b4c0:	2201      	movs	r2, #1
    b4c2:	4606      	mov	r6, r0
    b4c4:	4942      	ldr	r1, [pc, #264]	; (b5d0 <z_nrf_clock_control_lf_on+0x114>)
    b4c6:	e8d1 3fef 	ldaex	r3, [r1]
    b4ca:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b4ce:	2800      	cmp	r0, #0
    b4d0:	d1f9      	bne.n	b4c6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    b4d2:	b99b      	cbnz	r3, b4fc <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b4d4:	493f      	ldr	r1, [pc, #252]	; (b5d4 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    b4d6:	4840      	ldr	r0, [pc, #256]	; (b5d8 <z_nrf_clock_control_lf_on+0x11c>)
    b4d8:	604b      	str	r3, [r1, #4]
    b4da:	60cb      	str	r3, [r1, #12]
    b4dc:	608a      	str	r2, [r1, #8]
    b4de:	f7fe fdd7 	bl	a090 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    b4e2:	2800      	cmp	r0, #0
    b4e4:	da0a      	bge.n	b4fc <z_nrf_clock_control_lf_on+0x40>
    b4e6:	493d      	ldr	r1, [pc, #244]	; (b5dc <z_nrf_clock_control_lf_on+0x120>)
    b4e8:	483d      	ldr	r0, [pc, #244]	; (b5e0 <z_nrf_clock_control_lf_on+0x124>)
    b4ea:	f240 2226 	movw	r2, #550	; 0x226
    b4ee:	f00e f913 	bl	19718 <printk>
    b4f2:	f240 2126 	movw	r1, #550	; 0x226
    b4f6:	4839      	ldr	r0, [pc, #228]	; (b5dc <z_nrf_clock_control_lf_on+0x120>)
    b4f8:	f00e fbb4 	bl	19c64 <assert_post_action>
	switch (start_mode) {
    b4fc:	b386      	cbz	r6, b560 <z_nrf_clock_control_lf_on+0xa4>
    b4fe:	1e73      	subs	r3, r6, #1
    b500:	2b01      	cmp	r3, #1
    b502:	d852      	bhi.n	b5aa <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b504:	2e01      	cmp	r6, #1
    b506:	d106      	bne.n	b516 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b508:	4b36      	ldr	r3, [pc, #216]	; (b5e4 <z_nrf_clock_control_lf_on+0x128>)
    b50a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b50e:	f003 0303 	and.w	r3, r3, #3
    b512:	2b02      	cmp	r3, #2
    b514:	d024      	beq.n	b560 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b516:	f011 fd04 	bl	1cf22 <k_is_in_isr>
    b51a:	4604      	mov	r4, r0
    b51c:	b918      	cbnz	r0, b526 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    b51e:	4b32      	ldr	r3, [pc, #200]	; (b5e8 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    b520:	781b      	ldrb	r3, [r3, #0]
    b522:	2b00      	cmp	r3, #0
    b524:	d14e      	bne.n	b5c4 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    b526:	f04f 0320 	mov.w	r3, #32
    b52a:	f3ef 8711 	mrs	r7, BASEPRI
    b52e:	f383 8811 	msr	BASEPRI, r3
    b532:	f3bf 8f6f 	isb	sy
    b536:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b538:	4d2a      	ldr	r5, [pc, #168]	; (b5e4 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b53a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b5ec <z_nrf_clock_control_lf_on+0x130>
    b53e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b542:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    b546:	03d2      	lsls	r2, r2, #15
    b548:	d50c      	bpl.n	b564 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b54a:	f003 0303 	and.w	r3, r3, #3
    b54e:	2b02      	cmp	r3, #2
    b550:	d001      	beq.n	b556 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b552:	2e01      	cmp	r6, #1
    b554:	d106      	bne.n	b564 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    b556:	b324      	cbz	r4, b5a2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    b558:	f387 8811 	msr	BASEPRI, r7
    b55c:	f3bf 8f6f 	isb	sy
}
    b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    b564:	b1c4      	cbz	r4, b598 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b566:	4638      	mov	r0, r7
    b568:	f001 fb44 	bl	cbf4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b56c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b570:	b2db      	uxtb	r3, r3
    b572:	2b01      	cmp	r3, #1
    b574:	d1e3      	bne.n	b53e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b576:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    b57a:	2a00      	cmp	r2, #0
    b57c:	d0df      	beq.n	b53e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b57e:	2200      	movs	r2, #0
    b580:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    b584:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    b588:	2202      	movs	r2, #2
    b58a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    b58e:	2220      	movs	r2, #32
    b590:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b594:	60ab      	str	r3, [r5, #8]
}
    b596:	e7d2      	b.n	b53e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    b598:	2100      	movs	r1, #0
    b59a:	2021      	movs	r0, #33	; 0x21
    b59c:	f00c fec6 	bl	1832c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b5a0:	e7e4      	b.n	b56c <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    b5a2:	2302      	movs	r3, #2
    b5a4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    b5a8:	e7da      	b.n	b560 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    b5aa:	490c      	ldr	r1, [pc, #48]	; (b5dc <z_nrf_clock_control_lf_on+0x120>)
    b5ac:	480c      	ldr	r0, [pc, #48]	; (b5e0 <z_nrf_clock_control_lf_on+0x124>)
    b5ae:	f44f 720e 	mov.w	r2, #568	; 0x238
    b5b2:	f00e f8b1 	bl	19718 <printk>
}
    b5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    b5ba:	f44f 710e 	mov.w	r1, #568	; 0x238
    b5be:	4807      	ldr	r0, [pc, #28]	; (b5dc <z_nrf_clock_control_lf_on+0x120>)
    b5c0:	f00e bb50 	b.w	19c64 <assert_post_action>
    p_reg->INTENCLR = mask;
    b5c4:	2202      	movs	r2, #2
    b5c6:	4b07      	ldr	r3, [pc, #28]	; (b5e4 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    b5c8:	4607      	mov	r7, r0
    b5ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b5ce:	e7b3      	b.n	b538 <z_nrf_clock_control_lf_on+0x7c>
    b5d0:	2000a698 	.word	0x2000a698
    b5d4:	2000a5d4 	.word	0x2000a5d4
    b5d8:	2000a604 	.word	0x2000a604
    b5dc:	0001ea65 	.word	0x0001ea65
    b5e0:	0001e6bc 	.word	0x0001e6bc
    b5e4:	40005000 	.word	0x40005000
    b5e8:	2000c5e1 	.word	0x2000c5e1
    b5ec:	e000e100 	.word	0xe000e100

0000b5f0 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    b5f0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    b5f2:	f000 f905 	bl	b800 <bt_rpmsg_platform_init>
	if (err < 0) {
    b5f6:	1e04      	subs	r4, r0, #0
    b5f8:	da06      	bge.n	b608 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    b5fa:	4622      	mov	r2, r4
    b5fc:	2145      	movs	r1, #69	; 0x45
    b5fe:	4807      	ldr	r0, [pc, #28]	; (b61c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b600:	f00e f88a 	bl	19718 <printk>
	}

	return err;
}
    b604:	4620      	mov	r0, r4
    b606:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    b608:	4805      	ldr	r0, [pc, #20]	; (b620 <bt_rpmsg_init+0x30>)
    b60a:	f003 fd77 	bl	f0fc <bt_hci_driver_register>
	if (err < 0) {
    b60e:	1e04      	subs	r4, r0, #0
    b610:	daf8      	bge.n	b604 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b612:	4622      	mov	r2, r4
    b614:	2145      	movs	r1, #69	; 0x45
    b616:	4803      	ldr	r0, [pc, #12]	; (b624 <bt_rpmsg_init+0x34>)
    b618:	e7f2      	b.n	b600 <bt_rpmsg_init+0x10>
    b61a:	bf00      	nop
    b61c:	0001ead7 	.word	0x0001ead7
    b620:	0001d850 	.word	0x0001d850
    b624:	0001eb03 	.word	0x0001eb03

0000b628 <bt_rpmsg_send>:
{
    b628:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    b62a:	7d02      	ldrb	r2, [r0, #20]
    b62c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    b62e:	2a02      	cmp	r2, #2
    b630:	d00c      	beq.n	b64c <bt_rpmsg_send+0x24>
    b632:	2a04      	cmp	r2, #4
    b634:	d009      	beq.n	b64a <bt_rpmsg_send+0x22>
    b636:	b1b2      	cbz	r2, b666 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    b638:	2145      	movs	r1, #69	; 0x45
    b63a:	480c      	ldr	r0, [pc, #48]	; (b66c <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    b63c:	f00e f86c 	bl	19718 <printk>
	net_buf_unref(buf);
    b640:	4620      	mov	r0, r4
    b642:	f009 f80b 	bl	1465c <net_buf_unref>
}
    b646:	2000      	movs	r0, #0
    b648:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    b64a:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    b64c:	4611      	mov	r1, r2
    b64e:	f104 0008 	add.w	r0, r4, #8
    b652:	f010 fda0 	bl	1c196 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    b656:	4620      	mov	r0, r4
    b658:	f000 f8ee 	bl	b838 <bt_rpmsg_platform_send>
	if (err < 0) {
    b65c:	1e02      	subs	r2, r0, #0
    b65e:	daef      	bge.n	b640 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    b660:	2145      	movs	r1, #69	; 0x45
    b662:	4803      	ldr	r0, [pc, #12]	; (b670 <bt_rpmsg_send+0x48>)
    b664:	e7ea      	b.n	b63c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    b666:	2201      	movs	r2, #1
    b668:	e7f0      	b.n	b64c <bt_rpmsg_send+0x24>
    b66a:	bf00      	nop
    b66c:	0001eb32 	.word	0x0001eb32
    b670:	0001eb47 	.word	0x0001eb47

0000b674 <bt_rpmsg_rx>:
{
    b674:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    b678:	4680      	mov	r8, r0
{
    b67a:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    b67c:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    b680:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    b682:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    b684:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    b688:	d009      	beq.n	b69e <bt_rpmsg_rx+0x2a>
    b68a:	2805      	cmp	r0, #5
    b68c:	d074      	beq.n	b778 <bt_rpmsg_rx+0x104>
    b68e:	2802      	cmp	r0, #2
    b690:	f040 8099 	bne.w	b7c6 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    b694:	2b03      	cmp	r3, #3
    b696:	d84a      	bhi.n	b72e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    b698:	2145      	movs	r1, #69	; 0x45
    b69a:	484f      	ldr	r0, [pc, #316]	; (b7d8 <bt_rpmsg_rx+0x164>)
    b69c:	e003      	b.n	b6a6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b69e:	2b01      	cmp	r3, #1
    b6a0:	d806      	bhi.n	b6b0 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    b6a2:	2145      	movs	r1, #69	; 0x45
    b6a4:	484d      	ldr	r0, [pc, #308]	; (b7dc <bt_rpmsg_rx+0x168>)
}
    b6a6:	b002      	add	sp, #8
    b6a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    b6ac:	f00e b834 	b.w	19718 <printk>
	switch (evt_type) {
    b6b0:	7873      	ldrb	r3, [r6, #1]
    b6b2:	2b3e      	cmp	r3, #62	; 0x3e
    b6b4:	d117      	bne.n	b6e6 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    b6b6:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    b6b8:	2f02      	cmp	r7, #2
    b6ba:	d016      	beq.n	b6ea <bt_rpmsg_rx+0x76>
    b6bc:	f1a7 030d 	sub.w	r3, r7, #13
    b6c0:	425f      	negs	r7, r3
    b6c2:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    b6c4:	2202      	movs	r2, #2
    b6c6:	4641      	mov	r1, r8
    b6c8:	a801      	add	r0, sp, #4
    b6ca:	f00f fa85 	bl	1abd8 <memcpy>
	if (remaining != hdr.len) {
    b6ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    b6d2:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    b6d4:	429d      	cmp	r5, r3
    b6d6:	d00a      	beq.n	b6ee <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    b6d8:	2145      	movs	r1, #69	; 0x45
    b6da:	4841      	ldr	r0, [pc, #260]	; (b7e0 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    b6dc:	f00e f81c 	bl	19718 <printk>
}
    b6e0:	b002      	add	sp, #8
    b6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    b6e6:	2700      	movs	r7, #0
    b6e8:	e7ec      	b.n	b6c4 <bt_rpmsg_rx+0x50>
			return true;
    b6ea:	2701      	movs	r7, #1
    b6ec:	e7ea      	b.n	b6c4 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    b6ee:	2200      	movs	r2, #0
    b6f0:	2300      	movs	r3, #0
    b6f2:	4639      	mov	r1, r7
    b6f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b6f8:	f002 f92a 	bl	d950 <bt_buf_get_evt>
	if (!buf) {
    b6fc:	4604      	mov	r4, r0
    b6fe:	b920      	cbnz	r0, b70a <bt_rpmsg_rx+0x96>
		if (discardable) {
    b700:	2f00      	cmp	r7, #0
    b702:	d1ed      	bne.n	b6e0 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    b704:	2145      	movs	r1, #69	; 0x45
    b706:	4837      	ldr	r0, [pc, #220]	; (b7e4 <bt_rpmsg_rx+0x170>)
    b708:	e7e8      	b.n	b6dc <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b70a:	f100 0708 	add.w	r7, r0, #8
    b70e:	2202      	movs	r2, #2
    b710:	a901      	add	r1, sp, #4
    b712:	4638      	mov	r0, r7
    b714:	f010 fd62 	bl	1c1dc <net_buf_simple_add_mem>
    b718:	462a      	mov	r2, r5
    b71a:	1cf1      	adds	r1, r6, #3
    b71c:	4638      	mov	r0, r7
    b71e:	f010 fd5d 	bl	1c1dc <net_buf_simple_add_mem>
		bt_recv(buf);
    b722:	4620      	mov	r0, r4
}
    b724:	b002      	add	sp, #8
    b726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    b72a:	f003 bcbd 	b.w	f0a8 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    b72e:	2200      	movs	r2, #0
    b730:	2300      	movs	r3, #0
    b732:	2003      	movs	r0, #3
    b734:	f002 f8ba 	bl	d8ac <bt_buf_get_rx>
	if (buf) {
    b738:	4604      	mov	r4, r0
    b73a:	b1d0      	cbz	r0, b772 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    b73c:	2204      	movs	r2, #4
    b73e:	4641      	mov	r1, r8
    b740:	eb0d 0002 	add.w	r0, sp, r2
    b744:	f00f fa48 	bl	1abd8 <memcpy>
    b748:	2204      	movs	r2, #4
    b74a:	f104 0708 	add.w	r7, r4, #8
    b74e:	4638      	mov	r0, r7
    b750:	eb0d 0102 	add.w	r1, sp, r2
    b754:	f010 fd42 	bl	1c1dc <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b758:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    b75c:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b75e:	429d      	cmp	r5, r3
    b760:	d02e      	beq.n	b7c0 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    b762:	2145      	movs	r1, #69	; 0x45
    b764:	4820      	ldr	r0, [pc, #128]	; (b7e8 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    b766:	f00d ffd7 	bl	19718 <printk>
		net_buf_unref(buf);
    b76a:	4620      	mov	r0, r4
    b76c:	f008 ff76 	bl	1465c <net_buf_unref>
	if (buf) {
    b770:	e7b6      	b.n	b6e0 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    b772:	2145      	movs	r1, #69	; 0x45
    b774:	481d      	ldr	r0, [pc, #116]	; (b7ec <bt_rpmsg_rx+0x178>)
    b776:	e796      	b.n	b6a6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b778:	2b03      	cmp	r3, #3
    b77a:	d802      	bhi.n	b782 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    b77c:	2145      	movs	r1, #69	; 0x45
    b77e:	481c      	ldr	r0, [pc, #112]	; (b7f0 <bt_rpmsg_rx+0x17c>)
    b780:	e791      	b.n	b6a6 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    b782:	2200      	movs	r2, #0
    b784:	2300      	movs	r3, #0
    b786:	f002 f891 	bl	d8ac <bt_buf_get_rx>
	if (buf) {
    b78a:	4604      	mov	r4, r0
    b78c:	b1a8      	cbz	r0, b7ba <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    b78e:	2204      	movs	r2, #4
    b790:	4641      	mov	r1, r8
    b792:	eb0d 0002 	add.w	r0, sp, r2
    b796:	f00f fa1f 	bl	1abd8 <memcpy>
    b79a:	2204      	movs	r2, #4
    b79c:	f104 0708 	add.w	r7, r4, #8
    b7a0:	4638      	mov	r0, r7
    b7a2:	eb0d 0102 	add.w	r1, sp, r2
    b7a6:	f010 fd19 	bl	1c1dc <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b7aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    b7ae:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b7b0:	429d      	cmp	r5, r3
    b7b2:	d005      	beq.n	b7c0 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    b7b4:	2145      	movs	r1, #69	; 0x45
    b7b6:	480f      	ldr	r0, [pc, #60]	; (b7f4 <bt_rpmsg_rx+0x180>)
    b7b8:	e7d5      	b.n	b766 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    b7ba:	2145      	movs	r1, #69	; 0x45
    b7bc:	480e      	ldr	r0, [pc, #56]	; (b7f8 <bt_rpmsg_rx+0x184>)
    b7be:	e772      	b.n	b6a6 <bt_rpmsg_rx+0x32>
    b7c0:	462a      	mov	r2, r5
    b7c2:	1d71      	adds	r1, r6, #5
    b7c4:	e7aa      	b.n	b71c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    b7c6:	4602      	mov	r2, r0
    b7c8:	2145      	movs	r1, #69	; 0x45
    b7ca:	480c      	ldr	r0, [pc, #48]	; (b7fc <bt_rpmsg_rx+0x188>)
}
    b7cc:	b002      	add	sp, #8
    b7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    b7d2:	f00d bfa1 	b.w	19718 <printk>
    b7d6:	bf00      	nop
    b7d8:	0001ebd4 	.word	0x0001ebd4
    b7dc:	0001eb64 	.word	0x0001eb64
    b7e0:	0001eb8a 	.word	0x0001eb8a
    b7e4:	0001ebb3 	.word	0x0001ebb3
    b7e8:	0001ec17 	.word	0x0001ec17
    b7ec:	0001ebf8 	.word	0x0001ebf8
    b7f0:	0001ec3e 	.word	0x0001ec3e
    b7f4:	0001ec81 	.word	0x0001ec81
    b7f8:	0001ec62 	.word	0x0001ec62
    b7fc:	0001eca8 	.word	0x0001eca8

0000b800 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    b800:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    b802:	4908      	ldr	r1, [pc, #32]	; (b824 <bt_rpmsg_platform_init+0x24>)
    b804:	4808      	ldr	r0, [pc, #32]	; (b828 <bt_rpmsg_platform_init+0x28>)
    b806:	f7ff fb89 	bl	af1c <rpmsg_service_register_endpoint>

	if (err < 0) {
    b80a:	1e02      	subs	r2, r0, #0
    b80c:	da05      	bge.n	b81a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    b80e:	4807      	ldr	r0, [pc, #28]	; (b82c <bt_rpmsg_platform_init+0x2c>)
    b810:	2145      	movs	r1, #69	; 0x45
    b812:	f00d ff81 	bl	19718 <printk>
		return RPMSG_ERR_INIT;
    b816:	4806      	ldr	r0, [pc, #24]	; (b830 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    b818:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    b81a:	4b06      	ldr	r3, [pc, #24]	; (b834 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    b81c:	2000      	movs	r0, #0
	endpoint_id = err;
    b81e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    b820:	e7fa      	b.n	b818 <bt_rpmsg_platform_init+0x18>
    b822:	bf00      	nop
    b824:	00019e71 	.word	0x00019e71
    b828:	0001ecd5 	.word	0x0001ecd5
    b82c:	0001ece0 	.word	0x0001ece0
    b830:	fffff82a 	.word	0xfffff82a
    b834:	2000a69c 	.word	0x2000a69c

0000b838 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    b838:	4b02      	ldr	r3, [pc, #8]	; (b844 <bt_rpmsg_platform_send+0xc>)
    b83a:	8982      	ldrh	r2, [r0, #12]
    b83c:	6881      	ldr	r1, [r0, #8]
    b83e:	6818      	ldr	r0, [r3, #0]
    b840:	f7ff bb98 	b.w	af74 <rpmsg_service_send>
    b844:	2000a69c 	.word	0x2000a69c

0000b848 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    b848:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    b84a:	4b02      	ldr	r3, [pc, #8]	; (b854 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    b84c:	6818      	ldr	r0, [r3, #0]
    b84e:	f7ff fb87 	bl	af60 <rpmsg_service_endpoint_is_bound>
}
    b852:	bd08      	pop	{r3, pc}
    b854:	2000a69c 	.word	0x2000a69c

0000b858 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    b858:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    b85a:	4c06      	ldr	r4, [pc, #24]	; (b874 <z_clock_isr+0x1c>)
    b85c:	4806      	ldr	r0, [pc, #24]	; (b878 <z_clock_isr+0x20>)
    b85e:	4621      	mov	r1, r4
    b860:	2217      	movs	r2, #23
    b862:	f00d ff59 	bl	19718 <printk>
    b866:	4620      	mov	r0, r4
}
    b868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    b86c:	2117      	movs	r1, #23
    b86e:	f00e b9f9 	b.w	19c64 <assert_post_action>
    b872:	bf00      	nop
    b874:	0001ed1d 	.word	0x0001ed1d
    b878:	0001e6bc 	.word	0x0001e6bc

0000b87c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    b87c:	4a04      	ldr	r2, [pc, #16]	; (b890 <sys_clock_timeout_handler+0x14>)
    b87e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    b880:	1ac8      	subs	r0, r1, r3
    b882:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    b886:	4403      	add	r3, r0
    b888:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    b88a:	f00d ba65 	b.w	18d58 <z_clock_announce>
    b88e:	bf00      	nop
    b890:	2000a6ac 	.word	0x2000a6ac

0000b894 <set_absolute_alarm>:
{
    b894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b898:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b89c:	f04f 0900 	mov.w	r9, #0
    b8a0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b8a2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    b8a6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    b8aa:	00a4      	lsls	r4, r4, #2
    b8ac:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    b8b0:	b2a4      	uxth	r4, r4
    b8b2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    b8b6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    b8ba:	f8df 806c 	ldr.w	r8, [pc, #108]	; b928 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b8be:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b8c2:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b8c6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    b8c8:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b8cc:	eba3 030a 	sub.w	r3, r3, sl
    b8d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b8d4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    b8d8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    b8da:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    b8de:	d102      	bne.n	b8e6 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    b8e0:	2013      	movs	r0, #19
    b8e2:	f011 fb24 	bl	1cf2e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    b8e6:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    b8ea:	1aab      	subs	r3, r5, r2
    b8ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    b8f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b8f4:	bf88      	it	hi
    b8f6:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b8f8:	f8c4 9000 	str.w	r9, [r4]
    b8fc:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b8fe:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    b902:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    b906:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    b90a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    b90e:	459a      	cmp	sl, r3
    b910:	d006      	beq.n	b920 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    b912:	1aeb      	subs	r3, r5, r3
    b914:	3b02      	subs	r3, #2
    b916:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    b91a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b91e:	d801      	bhi.n	b924 <set_absolute_alarm+0x90>
}
    b920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    b924:	462b      	mov	r3, r5
    b926:	e7cf      	b.n	b8c8 <set_absolute_alarm+0x34>
    b928:	40015000 	.word	0x40015000

0000b92c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    b92e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b930:	462f      	mov	r7, r5
    b932:	4c10      	ldr	r4, [pc, #64]	; (b974 <rtc_nrf_isr+0x48>)
    b934:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    b936:	4b10      	ldr	r3, [pc, #64]	; (b978 <rtc_nrf_isr+0x4c>)
    b938:	b105      	cbz	r5, b93c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    b93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b93c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    b940:	03d2      	lsls	r2, r2, #15
    b942:	d5fa      	bpl.n	b93a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b944:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    b948:	2a00      	cmp	r2, #0
    b94a:	d0f6      	beq.n	b93a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b94c:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    b950:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    b954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b958:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    b95c:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    b95e:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    b962:	b126      	cbz	r6, b96e <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    b964:	2000      	movs	r0, #0
    b966:	6862      	ldr	r2, [r4, #4]
    b968:	6027      	str	r7, [r4, #0]
    b96a:	47b0      	blx	r6
    b96c:	e7e2      	b.n	b934 <rtc_nrf_isr+0x8>
    b96e:	6026      	str	r6, [r4, #0]
}
    b970:	e7e3      	b.n	b93a <rtc_nrf_isr+0xe>
    b972:	bf00      	nop
    b974:	2000a6a0 	.word	0x2000a6a0
    b978:	40015000 	.word	0x40015000

0000b97c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    b97c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    b97e:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    b980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    b988:	4c0c      	ldr	r4, [pc, #48]	; (b9bc <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    b98a:	2101      	movs	r1, #1
    b98c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    b990:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    b994:	4b0a      	ldr	r3, [pc, #40]	; (b9c0 <z_clock_driver_init+0x44>)
    b996:	2015      	movs	r0, #21
    b998:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    b99c:	462a      	mov	r2, r5
    b99e:	f001 f8b9 	bl	cb14 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    b9a2:	2015      	movs	r0, #21
    b9a4:	f001 f898 	bl	cad8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    b9a8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    b9aa:	4a06      	ldr	r2, [pc, #24]	; (b9c4 <z_clock_driver_init+0x48>)
    b9ac:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    b9ae:	2002      	movs	r0, #2
    b9b0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    b9b2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    b9b4:	f7ff fd82 	bl	b4bc <z_nrf_clock_control_lf_on>

	return 0;
}
    b9b8:	4628      	mov	r0, r5
    b9ba:	bd38      	pop	{r3, r4, r5, pc}
    b9bc:	40015000 	.word	0x40015000
    b9c0:	e000e100 	.word	0xe000e100
    b9c4:	2000a6a8 	.word	0x2000a6a8

0000b9c8 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    b9c8:	4a13      	ldr	r2, [pc, #76]	; (ba18 <z_clock_set_timeout+0x50>)
    b9ca:	f1b0 3fff 	cmp.w	r0, #4294967295
    b9ce:	bf14      	ite	ne
    b9d0:	4603      	movne	r3, r0
    b9d2:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    b9d4:	3b01      	subs	r3, #1
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	dd1c      	ble.n	ba14 <z_clock_set_timeout+0x4c>
    b9da:	4293      	cmp	r3, r2
    b9dc:	bfa8      	it	ge
    b9de:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    b9e0:	4a0e      	ldr	r2, [pc, #56]	; (ba1c <z_clock_set_timeout+0x54>)
    b9e2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    b9e6:	4a0e      	ldr	r2, [pc, #56]	; (ba20 <z_clock_set_timeout+0x58>)
    b9e8:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    b9ea:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    b9ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    b9f0:	bf18      	it	ne
    b9f2:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    b9f4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    b9f8:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    b9fa:	480a      	ldr	r0, [pc, #40]	; (ba24 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    b9fc:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    b9fe:	4a0a      	ldr	r2, [pc, #40]	; (ba28 <z_clock_set_timeout+0x60>)
    ba00:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    ba02:	2000      	movs	r0, #0
    ba04:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    ba06:	4a04      	ldr	r2, [pc, #16]	; (ba18 <z_clock_set_timeout+0x50>)
    ba08:	4293      	cmp	r3, r2
    ba0a:	bf94      	ite	ls
    ba0c:	18c9      	addls	r1, r1, r3
    ba0e:	1889      	addhi	r1, r1, r2
    ba10:	f7ff bf40 	b.w	b894 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ba14:	2300      	movs	r3, #0
    ba16:	e7e3      	b.n	b9e0 <z_clock_set_timeout+0x18>
    ba18:	007fffff 	.word	0x007fffff
    ba1c:	40015000 	.word	0x40015000
    ba20:	2000a6ac 	.word	0x2000a6ac
    ba24:	0000b87d 	.word	0x0000b87d
    ba28:	2000a6a0 	.word	0x2000a6a0

0000ba2c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    ba2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ba2e:	f04f 0320 	mov.w	r3, #32
    ba32:	f3ef 8511 	mrs	r5, BASEPRI
    ba36:	f383 8811 	msr	BASEPRI, r3
    ba3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba3e:	4815      	ldr	r0, [pc, #84]	; (ba94 <z_clock_elapsed+0x68>)
    ba40:	f00c fe96 	bl	18770 <z_spin_lock_valid>
    ba44:	b940      	cbnz	r0, ba58 <z_clock_elapsed+0x2c>
    ba46:	4914      	ldr	r1, [pc, #80]	; (ba98 <z_clock_elapsed+0x6c>)
    ba48:	4814      	ldr	r0, [pc, #80]	; (ba9c <z_clock_elapsed+0x70>)
    ba4a:	227c      	movs	r2, #124	; 0x7c
    ba4c:	f00d fe64 	bl	19718 <printk>
    ba50:	217c      	movs	r1, #124	; 0x7c
    ba52:	4811      	ldr	r0, [pc, #68]	; (ba98 <z_clock_elapsed+0x6c>)
    ba54:	f00e f906 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    ba58:	480e      	ldr	r0, [pc, #56]	; (ba94 <z_clock_elapsed+0x68>)
    ba5a:	f00c fea5 	bl	187a8 <z_spin_lock_set_owner>
    ba5e:	4b10      	ldr	r3, [pc, #64]	; (baa0 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ba60:	480c      	ldr	r0, [pc, #48]	; (ba94 <z_clock_elapsed+0x68>)
    ba62:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    ba66:	4b0f      	ldr	r3, [pc, #60]	; (baa4 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    ba68:	681b      	ldr	r3, [r3, #0]
    ba6a:	1ae4      	subs	r4, r4, r3
    ba6c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    ba70:	f00c fe8c 	bl	1878c <z_spin_unlock_valid>
    ba74:	b940      	cbnz	r0, ba88 <z_clock_elapsed+0x5c>
    ba76:	4908      	ldr	r1, [pc, #32]	; (ba98 <z_clock_elapsed+0x6c>)
    ba78:	4808      	ldr	r0, [pc, #32]	; (ba9c <z_clock_elapsed+0x70>)
    ba7a:	22a7      	movs	r2, #167	; 0xa7
    ba7c:	f00d fe4c 	bl	19718 <printk>
    ba80:	21a7      	movs	r1, #167	; 0xa7
    ba82:	4805      	ldr	r0, [pc, #20]	; (ba98 <z_clock_elapsed+0x6c>)
    ba84:	f00e f8ee 	bl	19c64 <assert_post_action>
	__asm__ volatile(
    ba88:	f385 8811 	msr	BASEPRI, r5
    ba8c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ba90:	4620      	mov	r0, r4
    ba92:	bd38      	pop	{r3, r4, r5, pc}
    ba94:	2000a6b0 	.word	0x2000a6b0
    ba98:	0001e6f6 	.word	0x0001e6f6
    ba9c:	0001e6bc 	.word	0x0001e6bc
    baa0:	40015000 	.word	0x40015000
    baa4:	2000a6ac 	.word	0x2000a6ac

0000baa8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    baa8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    baaa:	1cc5      	adds	r5, r0, #3
    baac:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    bab0:	2d74      	cmp	r5, #116	; 0x74
    bab2:	d908      	bls.n	bac6 <user_data_alloc.constprop.0+0x1e>
    bab4:	4917      	ldr	r1, [pc, #92]	; (bb14 <user_data_alloc.constprop.0+0x6c>)
    bab6:	4818      	ldr	r0, [pc, #96]	; (bb18 <user_data_alloc.constprop.0+0x70>)
    bab8:	2250      	movs	r2, #80	; 0x50
    baba:	f00d fe2d 	bl	19718 <printk>
    babe:	2150      	movs	r1, #80	; 0x50
    bac0:	4814      	ldr	r0, [pc, #80]	; (bb14 <user_data_alloc.constprop.0+0x6c>)
    bac2:	f00e f8cf 	bl	19c64 <assert_post_action>
	return list->head;
    bac6:	4c15      	ldr	r4, [pc, #84]	; (bb1c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    bac8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    bacc:	b123      	cbz	r3, bad8 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    bace:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    bad2:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    bad4:	2b74      	cmp	r3, #116	; 0x74
    bad6:	d919      	bls.n	bb0c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    bad8:	2178      	movs	r1, #120	; 0x78
    bada:	2004      	movs	r0, #4
    badc:	f00d fd38 	bl	19550 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    bae0:	b178      	cbz	r0, bb02 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    bae2:	2300      	movs	r3, #0
	return list->tail;
    bae4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    bae8:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    baea:	b95a      	cbnz	r2, bb04 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    baec:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    baf0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    baf4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    baf8:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    bafa:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    bafc:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    bafe:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    bb02:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    bb04:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bb06:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    bb0a:	e7f1      	b.n	baf0 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    bb0c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    bb10:	e7f0      	b.n	baf4 <user_data_alloc.constprop.0+0x4c>
    bb12:	bf00      	nop
    bb14:	0001ed8a 	.word	0x0001ed8a
    bb18:	0001e6bc 	.word	0x0001e6bc
    bb1c:	2000a6b4 	.word	0x2000a6b4

0000bb20 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb20:	4808      	ldr	r0, [pc, #32]	; (bb44 <discovery_complete.constprop.0+0x24>)
    bb22:	f500 739c 	add.w	r3, r0, #312	; 0x138
    bb26:	e8d3 2fef 	ldaex	r2, [r3]
    bb2a:	f042 0202 	orr.w	r2, r2, #2
    bb2e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    bb32:	2900      	cmp	r1, #0
    bb34:	d1f7      	bne.n	bb26 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    bb36:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    bb3a:	681b      	ldr	r3, [r3, #0]
    bb3c:	b10b      	cbz	r3, bb42 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    bb3e:	6841      	ldr	r1, [r0, #4]
    bb40:	4718      	bx	r3
	}
}
    bb42:	4770      	bx	lr
    bb44:	2000a6b4 	.word	0x2000a6b4

0000bb48 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    bb48:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    bb4a:	4c0b      	ldr	r4, [pc, #44]	; (bb78 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    bb4c:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    bb4e:	4620      	mov	r0, r4
    bb50:	f00e f9b4 	bl	19ebc <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb54:	f06f 0101 	mvn.w	r1, #1
    bb58:	f504 709c 	add.w	r0, r4, #312	; 0x138
    bb5c:	f00e f9c5 	bl	19eea <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    bb60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    bb64:	689b      	ldr	r3, [r3, #8]
    bb66:	b12b      	cbz	r3, bb74 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    bb68:	4629      	mov	r1, r5
    bb6a:	6862      	ldr	r2, [r4, #4]
    bb6c:	6820      	ldr	r0, [r4, #0]
	}
}
    bb6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    bb72:	4718      	bx	r3
}
    bb74:	bd70      	pop	{r4, r5, r6, pc}
    bb76:	bf00      	nop
    bb78:	2000a6b4 	.word	0x2000a6b4

0000bb7c <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bb80:	4c1f      	ldr	r4, [pc, #124]	; (bc00 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bb82:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bb84:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bb88:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bb8a:	2b22      	cmp	r3, #34	; 0x22
    bb8c:	d907      	bls.n	bb9e <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    bb8e:	2145      	movs	r1, #69	; 0x45
    bb90:	481c      	ldr	r0, [pc, #112]	; (bc04 <attr_store.constprop.0+0x88>)
    bb92:	f00d fdc1 	bl	19718 <printk>
		return NULL;
    bb96:	2500      	movs	r5, #0
}
    bb98:	4628      	mov	r0, r5
    bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    bb9e:	6803      	ldr	r3, [r0, #0]
    bba0:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    bba2:	2b02      	cmp	r3, #2
    bba4:	d80d      	bhi.n	bbc2 <attr_store.constprop.0+0x46>
    bba6:	4a18      	ldr	r2, [pc, #96]	; (bc08 <attr_store.constprop.0+0x8c>)
    bba8:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    bbac:	eb06 0009 	add.w	r0, r6, r9
    bbb0:	f7ff ff7a 	bl	baa8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    bbb4:	4605      	mov	r5, r0
    bbb6:	b958      	cbnz	r0, bbd0 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    bbb8:	2145      	movs	r1, #69	; 0x45
    bbba:	4814      	ldr	r0, [pc, #80]	; (bc0c <attr_store.constprop.0+0x90>)
    bbbc:	f00d fdac 	bl	19718 <printk>
		return NULL;
    bbc0:	e7ea      	b.n	bb98 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    bbc2:	2145      	movs	r1, #69	; 0x45
    bbc4:	4812      	ldr	r0, [pc, #72]	; (bc10 <attr_store.constprop.0+0x94>)
    bbc6:	f00d fda7 	bl	19718 <printk>
    bbca:	f04f 0900 	mov.w	r9, #0
    bbce:	e7ed      	b.n	bbac <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    bbd0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    bbd4:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    bbd6:	1c5a      	adds	r2, r3, #1
    bbd8:	3303      	adds	r3, #3
    bbda:	00db      	lsls	r3, r3, #3
    bbdc:	f103 0804 	add.w	r8, r3, #4
    bbe0:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    bbe4:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    bbe6:	441c      	add	r4, r3
    bbe8:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bbea:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    bbec:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    bbee:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bbf0:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    bbf2:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    bbf4:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bbf6:	f00e ffef 	bl	1abd8 <memcpy>
	return cur_attr;
    bbfa:	4645      	mov	r5, r8
    bbfc:	e7cc      	b.n	bb98 <attr_store.constprop.0+0x1c>
    bbfe:	bf00      	nop
    bc00:	2000a6b4 	.word	0x2000a6b4
    bc04:	0001edb5 	.word	0x0001edb5
    bc08:	0001ef80 	.word	0x0001ef80
    bc0c:	0001edf2 	.word	0x0001edf2
    bc10:	0001edd6 	.word	0x0001edd6

0000bc14 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    bc14:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    bc16:	4604      	mov	r4, r0
    bc18:	b930      	cbnz	r0, bc28 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    bc1a:	2145      	movs	r1, #69	; 0x45
    bc1c:	480c      	ldr	r0, [pc, #48]	; (bc50 <uuid_store.constprop.0+0x3c>)
    bc1e:	f00d fd7b 	bl	19718 <printk>
    bc22:	4625      	mov	r5, r4
}
    bc24:	4628      	mov	r0, r5
    bc26:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    bc28:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    bc2a:	2b02      	cmp	r3, #2
    bc2c:	d80a      	bhi.n	bc44 <uuid_store.constprop.0+0x30>
    bc2e:	4a09      	ldr	r2, [pc, #36]	; (bc54 <uuid_store.constprop.0+0x40>)
    bc30:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    bc32:	4630      	mov	r0, r6
    bc34:	f7ff ff38 	bl	baa8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    bc38:	4632      	mov	r2, r6
    bc3a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    bc3c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    bc3e:	f00e ffcb 	bl	1abd8 <memcpy>
	return (struct bt_uuid *)buffer;
    bc42:	e7ef      	b.n	bc24 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    bc44:	2145      	movs	r1, #69	; 0x45
    bc46:	4804      	ldr	r0, [pc, #16]	; (bc58 <uuid_store.constprop.0+0x44>)
    bc48:	f00d fd66 	bl	19718 <printk>
    bc4c:	2600      	movs	r6, #0
    bc4e:	e7f0      	b.n	bc32 <uuid_store.constprop.0+0x1e>
    bc50:	0001ee14 	.word	0x0001ee14
    bc54:	0001ef80 	.word	0x0001ef80
    bc58:	0001edd6 	.word	0x0001edd6

0000bc5c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    bc5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    bc60:	4e79      	ldr	r6, [pc, #484]	; (be48 <discovery_callback+0x1ec>)
{
    bc62:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    bc64:	6833      	ldr	r3, [r6, #0]
    bc66:	4283      	cmp	r3, r0
    bc68:	d008      	beq.n	bc7c <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    bc6a:	4878      	ldr	r0, [pc, #480]	; (be4c <discovery_callback+0x1f0>)
    bc6c:	2145      	movs	r1, #69	; 0x45
    bc6e:	f00d fd53 	bl	19718 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    bc72:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    bc76:	f7ff ff67 	bl	bb48 <discovery_complete_error.constprop.0>
    bc7a:	e031      	b.n	bce0 <discovery_callback+0x84>
    bc7c:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    bc7e:	2b03      	cmp	r3, #3
    bc80:	f000 80ae 	beq.w	bde0 <discovery_callback+0x184>
    bc84:	d80d      	bhi.n	bca2 <discovery_callback+0x46>
    bc86:	2b02      	cmp	r3, #2
    bc88:	d126      	bne.n	bcd8 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    bc8a:	f240 12b3 	movw	r2, #435	; 0x1b3
    bc8e:	4970      	ldr	r1, [pc, #448]	; (be50 <discovery_callback+0x1f4>)
    bc90:	4870      	ldr	r0, [pc, #448]	; (be54 <discovery_callback+0x1f8>)
    bc92:	f00d fd41 	bl	19718 <printk>
    bc96:	f240 11b3 	movw	r1, #435	; 0x1b3
    bc9a:	486d      	ldr	r0, [pc, #436]	; (be50 <discovery_callback+0x1f4>)
    bc9c:	f00d ffe2 	bl	19c64 <assert_post_action>
    bca0:	e01e      	b.n	bce0 <discovery_callback+0x84>
	switch (params->type) {
    bca2:	2b05      	cmp	r3, #5
    bca4:	d1f1      	bne.n	bc8a <discovery_callback+0x2e>
	if (!attr) {
    bca6:	2900      	cmp	r1, #0
    bca8:	f040 8081 	bne.w	bdae <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    bcac:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    bcb0:	2b01      	cmp	r3, #1
    bcb2:	d979      	bls.n	bda8 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    bcb4:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    bcb6:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    bcba:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    bcbc:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    bcbe:	2303      	movs	r3, #3
    bcc0:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    bcc2:	f007 fc9f 	bl	13604 <bt_gatt_discover>
			if (err) {
    bcc6:	4604      	mov	r4, r0
    bcc8:	b150      	cbz	r0, bce0 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    bcca:	4602      	mov	r2, r0
    bccc:	2145      	movs	r1, #69	; 0x45
    bcce:	4862      	ldr	r0, [pc, #392]	; (be58 <discovery_callback+0x1fc>)
    bcd0:	f00d fd22 	bl	19718 <printk>
				discovery_complete_error(dm, err);
    bcd4:	4620      	mov	r0, r4
    bcd6:	e7ce      	b.n	bc76 <discovery_callback+0x1a>
	if (!attr) {
    bcd8:	b921      	cbnz	r1, bce4 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    bcda:	4630      	mov	r0, r6
    bcdc:	f00e f910 	bl	19f00 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    bce0:	2400      	movs	r4, #0
    bce2:	e04a      	b.n	bd7a <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    bce4:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    bce8:	4628      	mov	r0, r5
    bcea:	2108      	movs	r1, #8
    bcec:	f7ff ff46 	bl	bb7c <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    bcf0:	2400      	movs	r4, #0
    bcf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    bcf6:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    bcf8:	4669      	mov	r1, sp
    bcfa:	6828      	ldr	r0, [r5, #0]
    bcfc:	f88d 4000 	strb.w	r4, [sp]
    bd00:	f8ad 3002 	strh.w	r3, [sp, #2]
    bd04:	f00e ffdd 	bl	1acc2 <bt_uuid_cmp>
    bd08:	b1a8      	cbz	r0, bd36 <discovery_callback+0xda>
    bd0a:	f642 0301 	movw	r3, #10241	; 0x2801
    bd0e:	6828      	ldr	r0, [r5, #0]
    bd10:	a901      	add	r1, sp, #4
    bd12:	f88d 4004 	strb.w	r4, [sp, #4]
    bd16:	f8ad 3006 	strh.w	r3, [sp, #6]
    bd1a:	f00e ffd2 	bl	1acc2 <bt_uuid_cmp>
    bd1e:	b150      	cbz	r0, bd36 <discovery_callback+0xda>
    bd20:	494b      	ldr	r1, [pc, #300]	; (be50 <discovery_callback+0x1f4>)
    bd22:	484c      	ldr	r0, [pc, #304]	; (be54 <discovery_callback+0x1f8>)
    bd24:	f240 1217 	movw	r2, #279	; 0x117
    bd28:	f00d fcf6 	bl	19718 <printk>
    bd2c:	f240 1117 	movw	r1, #279	; 0x117
    bd30:	4847      	ldr	r0, [pc, #284]	; (be50 <discovery_callback+0x1f4>)
    bd32:	f00d ff97 	bl	19c64 <assert_post_action>
	if (!cur_attr) {
    bd36:	b937      	cbnz	r7, bd46 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    bd38:	4848      	ldr	r0, [pc, #288]	; (be5c <discovery_callback+0x200>)
    bd3a:	2145      	movs	r1, #69	; 0x45
    bd3c:	f00d fcec 	bl	19718 <printk>
		discovery_complete_error(dm, -ENOMEM);
    bd40:	f06f 000b 	mvn.w	r0, #11
    bd44:	e797      	b.n	bc76 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    bd46:	4638      	mov	r0, r7
    bd48:	f00e f8ee 	bl	19f28 <bt_gatt_dm_attr_service_val>
    bd4c:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    bd4e:	2208      	movs	r2, #8
    bd50:	4641      	mov	r1, r8
    bd52:	f00e ff41 	bl	1abd8 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    bd56:	6828      	ldr	r0, [r5, #0]
    bd58:	f7ff ff5c 	bl	bc14 <uuid_store.constprop.0>
    bd5c:	4604      	mov	r4, r0
    bd5e:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    bd60:	b930      	cbnz	r0, bd70 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    bd62:	2145      	movs	r1, #69	; 0x45
    bd64:	483e      	ldr	r0, [pc, #248]	; (be60 <discovery_callback+0x204>)
    bd66:	f00d fcd7 	bl	19718 <printk>
		discovery_complete_error(dm, -ENOMEM);
    bd6a:	f06f 000b 	mvn.w	r0, #11
    bd6e:	e058      	b.n	be22 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    bd70:	88bb      	ldrh	r3, [r7, #4]
    bd72:	88aa      	ldrh	r2, [r5, #4]
    bd74:	4293      	cmp	r3, r2
    bd76:	d104      	bne.n	bd82 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    bd78:	2401      	movs	r4, #1
}
    bd7a:	4620      	mov	r0, r4
    bd7c:	b002      	add	sp, #8
    bd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    bd82:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    bd84:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    bd86:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    bd88:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    bd8a:	4936      	ldr	r1, [pc, #216]	; (be64 <discovery_callback+0x208>)
    bd8c:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    bd8e:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    bd90:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    bd92:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    bd94:	f007 fc36 	bl	13604 <bt_gatt_discover>
	if (err) {
    bd98:	4602      	mov	r2, r0
    bd9a:	2800      	cmp	r0, #0
    bd9c:	d0a0      	beq.n	bce0 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    bd9e:	2145      	movs	r1, #69	; 0x45
    bda0:	4831      	ldr	r0, [pc, #196]	; (be68 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    bda2:	f00d fcb9 	bl	19718 <printk>
		discovery_complete_error(dm, -ENOMEM);
    bda6:	e7e0      	b.n	bd6a <discovery_callback+0x10e>
			discovery_complete(dm);
    bda8:	f7ff feba 	bl	bb20 <discovery_complete.constprop.0>
    bdac:	e798      	b.n	bce0 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    bdae:	2400      	movs	r4, #0
    bdb0:	f642 0303 	movw	r3, #10243	; 0x2803
    bdb4:	6828      	ldr	r0, [r5, #0]
    bdb6:	a901      	add	r1, sp, #4
    bdb8:	f88d 4004 	strb.w	r4, [sp, #4]
    bdbc:	f8ad 3006 	strh.w	r3, [sp, #6]
    bdc0:	f00e ff7f 	bl	1acc2 <bt_uuid_cmp>
    bdc4:	b950      	cbnz	r0, bddc <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    bdc6:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    bdc8:	4628      	mov	r0, r5
    bdca:	f7ff fed7 	bl	bb7c <attr_store.constprop.0>
    bdce:	4604      	mov	r4, r0
	if (!cur_attr) {
    bdd0:	2800      	cmp	r0, #0
    bdd2:	d1d1      	bne.n	bd78 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    bdd4:	2145      	movs	r1, #69	; 0x45
    bdd6:	8a2a      	ldrh	r2, [r5, #16]
    bdd8:	4824      	ldr	r0, [pc, #144]	; (be6c <discovery_callback+0x210>)
    bdda:	e7e2      	b.n	bda2 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    bddc:	4621      	mov	r1, r4
    bdde:	e7f3      	b.n	bdc8 <discovery_callback+0x16c>
	if (!attr) {
    bde0:	2900      	cmp	r1, #0
    bde2:	d0e1      	beq.n	bda8 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    bde4:	2300      	movs	r3, #0
    bde6:	f88d 3004 	strb.w	r3, [sp, #4]
    bdea:	f642 0303 	movw	r3, #10243	; 0x2803
    bdee:	6828      	ldr	r0, [r5, #0]
    bdf0:	a901      	add	r1, sp, #4
    bdf2:	f8ad 3006 	strh.w	r3, [sp, #6]
    bdf6:	f00e ff64 	bl	1acc2 <bt_uuid_cmp>
    bdfa:	b150      	cbz	r0, be12 <discovery_callback+0x1b6>
    bdfc:	4914      	ldr	r1, [pc, #80]	; (be50 <discovery_callback+0x1f4>)
    bdfe:	4815      	ldr	r0, [pc, #84]	; (be54 <discovery_callback+0x1f8>)
    be00:	f44f 72c0 	mov.w	r2, #384	; 0x180
    be04:	f00d fc88 	bl	19718 <printk>
    be08:	f44f 71c0 	mov.w	r1, #384	; 0x180
    be0c:	4810      	ldr	r0, [pc, #64]	; (be50 <discovery_callback+0x1f4>)
    be0e:	f00d ff29 	bl	19c64 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    be12:	8a29      	ldrh	r1, [r5, #16]
    be14:	480c      	ldr	r0, [pc, #48]	; (be48 <discovery_callback+0x1ec>)
    be16:	f00e f833 	bl	19e80 <attr_find_by_handle>
	if (!cur_attr) {
    be1a:	4604      	mov	r4, r0
    be1c:	b920      	cbnz	r0, be28 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    be1e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    be22:	f7ff fe91 	bl	bb48 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    be26:	e7a8      	b.n	bd7a <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    be28:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    be2a:	f00e f89d 	bl	19f68 <bt_gatt_dm_attr_chrc_val>
    be2e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    be30:	4621      	mov	r1, r4
    be32:	2208      	movs	r2, #8
    be34:	f00e fed0 	bl	1abd8 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    be38:	6828      	ldr	r0, [r5, #0]
    be3a:	f7ff feeb 	bl	bc14 <uuid_store.constprop.0>
    be3e:	4604      	mov	r4, r0
    be40:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    be42:	2800      	cmp	r0, #0
    be44:	d198      	bne.n	bd78 <discovery_callback+0x11c>
    be46:	e790      	b.n	bd6a <discovery_callback+0x10e>
    be48:	2000a6b4 	.word	0x2000a6b4
    be4c:	0001ee2d 	.word	0x0001ee2d
    be50:	0001ed8a 	.word	0x0001ed8a
    be54:	0001e6bc 	.word	0x0001e6bc
    be58:	0001eee1 	.word	0x0001eee1
    be5c:	0001ee54 	.word	0x0001ee54
    be60:	0001ee82 	.word	0x0001ee82
    be64:	2000a6bc 	.word	0x2000a6bc
    be68:	0001eeb5 	.word	0x0001eeb5
    be6c:	0001ef11 	.word	0x0001ef11

0000be70 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    be70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    be74:	4606      	mov	r6, r0
    be76:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    be78:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    be7a:	f8df 8044 	ldr.w	r8, [pc, #68]	; bec0 <bt_gatt_dm_char_by_uuid+0x50>
    be7e:	f8df 9044 	ldr.w	r9, [pc, #68]	; bec4 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    be82:	4621      	mov	r1, r4
    be84:	4630      	mov	r0, r6
    be86:	f00e f885 	bl	19f94 <bt_gatt_dm_char_next>
    be8a:	4604      	mov	r4, r0
    be8c:	b1a0      	cbz	r0, beb8 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    be8e:	f00e f86b 	bl	19f68 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    be92:	4605      	mov	r5, r0
    be94:	b950      	cbnz	r0, beac <bt_gatt_dm_char_by_uuid+0x3c>
    be96:	4641      	mov	r1, r8
    be98:	4648      	mov	r0, r9
    be9a:	f240 12fb 	movw	r2, #507	; 0x1fb
    be9e:	f00d fc3b 	bl	19718 <printk>
    bea2:	f240 11fb 	movw	r1, #507	; 0x1fb
    bea6:	4640      	mov	r0, r8
    bea8:	f00d fedc 	bl	19c64 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    beac:	4638      	mov	r0, r7
    beae:	6829      	ldr	r1, [r5, #0]
    beb0:	f00e ff07 	bl	1acc2 <bt_uuid_cmp>
    beb4:	2800      	cmp	r0, #0
    beb6:	d1e4      	bne.n	be82 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    beb8:	4620      	mov	r0, r4
    beba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bebe:	bf00      	nop
    bec0:	0001ed8a 	.word	0x0001ed8a
    bec4:	0001e6bc 	.word	0x0001e6bc

0000bec8 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    bec8:	b570      	push	{r4, r5, r6, lr}
    beca:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    becc:	4608      	mov	r0, r1
    bece:	b119      	cbz	r1, bed8 <bt_gatt_dm_start+0x10>
    bed0:	7809      	ldrb	r1, [r1, #0]
    bed2:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    bed6:	d139      	bne.n	bf4c <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    bed8:	2a00      	cmp	r2, #0
    beda:	d037      	beq.n	bf4c <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bedc:	4c1e      	ldr	r4, [pc, #120]	; (bf58 <bt_gatt_dm_start+0x90>)
    bede:	f504 769c 	add.w	r6, r4, #312	; 0x138
    bee2:	e8d6 1fef 	ldaex	r1, [r6]
    bee6:	f041 0c01 	orr.w	ip, r1, #1
    beea:	e8c6 cfee 	stlex	lr, ip, [r6]
    beee:	f1be 0f00 	cmp.w	lr, #0
    bef2:	d1f6      	bne.n	bee2 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    bef4:	f011 0101 	ands.w	r1, r1, #1
    bef8:	d12b      	bne.n	bf52 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    befa:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    befe:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    bf02:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    bf06:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    bf0a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    bf0e:	b108      	cbz	r0, bf14 <bt_gatt_dm_start+0x4c>
    bf10:	f7ff fe80 	bl	bc14 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    bf14:	4b11      	ldr	r3, [pc, #68]	; (bf5c <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    bf16:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    bf18:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    bf1a:	2301      	movs	r3, #1
    bf1c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    bf1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bf22:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    bf24:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    bf26:	4628      	mov	r0, r5
    bf28:	490d      	ldr	r1, [pc, #52]	; (bf60 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    bf2a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    bf2c:	f007 fb6a 	bl	13604 <bt_gatt_discover>
	if (err) {
    bf30:	4604      	mov	r4, r0
    bf32:	b148      	cbz	r0, bf48 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    bf34:	4602      	mov	r2, r0
    bf36:	2145      	movs	r1, #69	; 0x45
    bf38:	480a      	ldr	r0, [pc, #40]	; (bf64 <bt_gatt_dm_start+0x9c>)
    bf3a:	f00d fbed 	bl	19718 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bf3e:	f06f 0101 	mvn.w	r1, #1
    bf42:	4809      	ldr	r0, [pc, #36]	; (bf68 <bt_gatt_dm_start+0xa0>)
    bf44:	f00d ffd1 	bl	19eea <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    bf48:	4620      	mov	r0, r4
    bf4a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    bf4c:	f06f 0415 	mvn.w	r4, #21
    bf50:	e7fa      	b.n	bf48 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    bf52:	f06f 0444 	mvn.w	r4, #68	; 0x44
    bf56:	e7f7      	b.n	bf48 <bt_gatt_dm_start+0x80>
    bf58:	2000a6b4 	.word	0x2000a6b4
    bf5c:	0000bc5d 	.word	0x0000bc5d
    bf60:	2000a6bc 	.word	0x2000a6bc
    bf64:	0001ef54 	.word	0x0001ef54
    bf68:	2000a7ec 	.word	0x2000a7ec

0000bf6c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    bf6c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    bf6e:	4c06      	ldr	r4, [pc, #24]	; (bf88 <scan_default_param_set+0x1c>)
{
    bf70:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    bf72:	ad01      	add	r5, sp, #4
    bf74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bf76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bf78:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    bf7a:	4c04      	ldr	r4, [pc, #16]	; (bf8c <scan_default_param_set+0x20>)
    bf7c:	ad01      	add	r5, sp, #4
    bf7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    bf80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bf82:	6026      	str	r6, [r4, #0]
}
    bf84:	b006      	add	sp, #24
    bf86:	bd70      	pop	{r4, r5, r6, pc}
    bf88:	0001d5d0 	.word	0x0001d5d0
    bf8c:	2000a830 	.word	0x2000a830

0000bf90 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    bf90:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    bf94:	4b02      	ldr	r3, [pc, #8]	; (bfa0 <scan_default_conn_param_set+0x10>)
    bf96:	4903      	ldr	r1, [pc, #12]	; (bfa4 <scan_default_conn_param_set+0x14>)
    bf98:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    bf9c:	4770      	bx	lr
    bf9e:	bf00      	nop
    bfa0:	2000a800 	.word	0x2000a800
    bfa4:	00280018 	.word	0x00280018

0000bfa8 <uuid_check>:
{
    bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    bfac:	4c29      	ldr	r4, [pc, #164]	; (c054 <uuid_check+0xac>)
{
    bfae:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    bfb0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    bfb4:	4606      	mov	r6, r0
    bfb6:	9100      	str	r1, [sp, #0]
    bfb8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d03c      	beq.n	c038 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    bfbe:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    bfc0:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    bfc2:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    bfc4:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    bfc8:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
    bfcc:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    bfce:	4557      	cmp	r7, sl
    bfd0:	d30e      	bcc.n	bff0 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    bfd2:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    bfd6:	f1bb 0f00 	cmp.w	fp, #0
    bfda:	d02b      	beq.n	c034 <uuid_check+0x8c>
    bfdc:	45aa      	cmp	sl, r5
    bfde:	d12b      	bne.n	c038 <uuid_check+0x90>
			control->filter_match_cnt++;
    bfe0:	7873      	ldrb	r3, [r6, #1]
    bfe2:	3301      	adds	r3, #1
    bfe4:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    bfe6:	2301      	movs	r3, #1
    bfe8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    bfec:	70b3      	strb	r3, [r6, #2]
}
    bfee:	e023      	b.n	c038 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    bff0:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    bff4:	9b00      	ldr	r3, [sp, #0]
    bff6:	9a03      	ldr	r2, [sp, #12]
    bff8:	685b      	ldr	r3, [r3, #4]
    bffa:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    bffc:	4b16      	ldr	r3, [pc, #88]	; (c058 <uuid_check+0xb0>)
    bffe:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c002:	9b01      	ldr	r3, [sp, #4]
    c004:	4599      	cmp	r9, r3
    c006:	d305      	bcc.n	c014 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    c008:	f1bb 0f00 	cmp.w	fp, #0
    c00c:	d1e1      	bne.n	bfd2 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    c00e:	3701      	adds	r7, #1
    c010:	3418      	adds	r4, #24
    c012:	e7dc      	b.n	bfce <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    c014:	9b02      	ldr	r3, [sp, #8]
    c016:	4642      	mov	r2, r8
    c018:	eb03 0109 	add.w	r1, r3, r9
    c01c:	a805      	add	r0, sp, #20
    c01e:	f00e fe7e 	bl	1ad1e <bt_uuid_create>
    c022:	2800      	cmp	r0, #0
    c024:	d0f0      	beq.n	c008 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    c026:	68a1      	ldr	r1, [r4, #8]
    c028:	a805      	add	r0, sp, #20
    c02a:	f00e fe4a 	bl	1acc2 <bt_uuid_cmp>
    c02e:	b130      	cbz	r0, c03e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c030:	44c1      	add	r9, r8
    c032:	e7e6      	b.n	c002 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    c034:	2d00      	cmp	r5, #0
    c036:	d1d3      	bne.n	bfe0 <uuid_check+0x38>
}
    c038:	b00b      	add	sp, #44	; 0x2c
    c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    c03e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c040:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    c044:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c046:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    c048:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    c04a:	f1bb 0f00 	cmp.w	fp, #0
    c04e:	d1de      	bne.n	c00e <uuid_check+0x66>
    c050:	e7bf      	b.n	bfd2 <uuid_check+0x2a>
    c052:	bf00      	nop
    c054:	2000a800 	.word	0x2000a800
    c058:	0001ef8f 	.word	0x0001ef8f

0000c05c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    c05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    c060:	7803      	ldrb	r3, [r0, #0]
{
    c062:	4605      	mov	r5, r0
	switch (data->type) {
    c064:	2b19      	cmp	r3, #25
{
    c066:	460c      	mov	r4, r1
	switch (data->type) {
    c068:	d812      	bhi.n	c090 <adv_data_found+0x34>
    c06a:	2b01      	cmp	r3, #1
    c06c:	d912      	bls.n	c094 <adv_data_found+0x38>
    c06e:	3b02      	subs	r3, #2
    c070:	2b17      	cmp	r3, #23
    c072:	d80f      	bhi.n	c094 <adv_data_found+0x38>
    c074:	e8df f003 	tbb	[pc, r3]
    c078:	7f7f7979 	.word	0x7f7f7979
    c07c:	11318181 	.word	0x11318181
    c080:	0e0e0e0e 	.word	0x0e0e0e0e
    c084:	0e0e0e0e 	.word	0x0e0e0e0e
    c088:	0e0e0e0e 	.word	0x0e0e0e0e
    c08c:	560e0e0e 	.word	0x560e0e0e
    c090:	2bff      	cmp	r3, #255	; 0xff
    c092:	d074      	beq.n	c17e <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    c094:	2001      	movs	r0, #1
    c096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    c09a:	4f4d      	ldr	r7, [pc, #308]	; (c1d0 <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    c09c:	787b      	ldrb	r3, [r7, #1]
    c09e:	2b00      	cmp	r3, #0
    c0a0:	d0f8      	beq.n	c094 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c0a2:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    c0a4:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    c0a8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c0ac:	4556      	cmp	r6, sl
    c0ae:	d2f1      	bcs.n	c094 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    c0b0:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    c0b4:	4642      	mov	r2, r8
    c0b6:	4648      	mov	r0, r9
    c0b8:	6869      	ldr	r1, [r5, #4]
    c0ba:	f00e fd6b 	bl	1ab94 <strncmp>
		if (adv_name_cmp(data->data,
    c0be:	b950      	cbnz	r0, c0d6 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    c0c0:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    c0c2:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    c0c6:	3301      	adds	r3, #1
    c0c8:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    c0ca:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    c0cc:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    c0d0:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    c0d2:	70a3      	strb	r3, [r4, #2]
    c0d4:	e7de      	b.n	c094 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c0d6:	3601      	adds	r6, #1
    c0d8:	e7e8      	b.n	c0ac <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    c0da:	4e3d      	ldr	r6, [pc, #244]	; (c1d0 <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    c0dc:	78f3      	ldrb	r3, [r6, #3]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d0d8      	beq.n	c094 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    c0e2:	78b3      	ldrb	r3, [r6, #2]
    c0e4:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c0e8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    c0ec:	18f7      	adds	r7, r6, r3
    c0ee:	42be      	cmp	r6, r7
    c0f0:	d0d0      	beq.n	c094 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    c0f2:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c0f6:	4543      	cmp	r3, r8
    c0f8:	d812      	bhi.n	c120 <adv_data_found+0xc4>
    c0fa:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    c0fe:	4642      	mov	r2, r8
    c100:	4648      	mov	r0, r9
    c102:	6869      	ldr	r1, [r5, #4]
    c104:	f00e fd46 	bl	1ab94 <strncmp>
	if ((data_len >= short_name_min_len) &&
    c108:	b950      	cbnz	r0, c120 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    c10a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    c10c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    c110:	3301      	adds	r3, #1
    c112:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    c114:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    c116:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    c11a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    c11e:	e7d8      	b.n	c0d2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c120:	3621      	adds	r6, #33	; 0x21
    c122:	e7e4      	b.n	c0ee <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    c124:	482a      	ldr	r0, [pc, #168]	; (c1d0 <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    c126:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    c12a:	2b00      	cmp	r3, #0
    c12c:	d0b2      	beq.n	c094 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c12e:	2300      	movs	r3, #0
	const uint8_t counter =
    c130:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
	uint8_t data_len = data->data_len;
    c134:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    c136:	42b3      	cmp	r3, r6
    c138:	d2ac      	bcs.n	c094 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    c13a:	2f02      	cmp	r7, #2
    c13c:	d113      	bne.n	c166 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    c13e:	686a      	ldr	r2, [r5, #4]
    c140:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    c144:	8812      	ldrh	r2, [r2, #0]
    c146:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    c148:	ba52      	rev16	r2, r2
    c14a:	b292      	uxth	r2, r2
    c14c:	4291      	cmp	r1, r2
    c14e:	d10a      	bne.n	c166 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    c150:	3312      	adds	r3, #18
    c152:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    c156:	6463      	str	r3, [r4, #68]	; 0x44
			control->filter_match_cnt++;
    c158:	7863      	ldrb	r3, [r4, #1]
    c15a:	3301      	adds	r3, #1
    c15c:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    c15e:	2301      	movs	r3, #1
    c160:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			control->filter_match = true;
    c164:	e7b5      	b.n	c0d2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c166:	3301      	adds	r3, #1
    c168:	e7e5      	b.n	c136 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    c16a:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c16c:	4629      	mov	r1, r5
    c16e:	4620      	mov	r0, r4
    c170:	f7ff ff1a 	bl	bfa8 <uuid_check>
		break;
    c174:	e78e      	b.n	c094 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    c176:	2201      	movs	r2, #1
    c178:	e7f8      	b.n	c16c <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c17a:	2202      	movs	r2, #2
    c17c:	e7f6      	b.n	c16c <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    c17e:	f8df 8050 	ldr.w	r8, [pc, #80]	; c1d0 <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    c182:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
    c186:	2b00      	cmp	r3, #0
    c188:	d084      	beq.n	c094 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c18a:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    c18c:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c18e:	f817 9f26 	ldrb.w	r9, [r7, #38]!
	for (size_t i = 0; i < counter; i++) {
    c192:	454e      	cmp	r6, r9
    c194:	f4bf af7e 	bcs.w	c094 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    c198:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    c19c:	786b      	ldrb	r3, [r5, #1]
    c19e:	4293      	cmp	r3, r2
    c1a0:	d313      	bcc.n	c1ca <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    c1a2:	4638      	mov	r0, r7
    c1a4:	6869      	ldr	r1, [r5, #4]
    c1a6:	f00e fd06 	bl	1abb6 <memcmp>
    c1aa:	b970      	cbnz	r0, c1ca <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    c1ac:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    c1b0:	64e7      	str	r7, [r4, #76]	; 0x4c
				md_filter->manufacturer_data[i].data_len;
    c1b2:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    c1b4:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
    c1b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			control->filter_match_cnt++;
    c1bc:	7863      	ldrb	r3, [r4, #1]
    c1be:	3301      	adds	r3, #1
    c1c0:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    c1c2:	2301      	movs	r3, #1
    c1c4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    c1c8:	e783      	b.n	c0d2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c1ca:	3601      	adds	r6, #1
    c1cc:	3721      	adds	r7, #33	; 0x21
    c1ce:	e7e0      	b.n	c192 <adv_data_found+0x136>
    c1d0:	2000a800 	.word	0x2000a800

0000c1d4 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1d6:	4605      	mov	r5, r0
    c1d8:	460e      	mov	r6, r1
    c1da:	4617      	mov	r7, r2
	return list->head;
    c1dc:	4b08      	ldr	r3, [pc, #32]	; (c200 <notify_filter_matched.constprop.0+0x2c>)
    c1de:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c1e0:	b10c      	cbz	r4, c1e6 <notify_filter_matched.constprop.0+0x12>
    c1e2:	3c04      	subs	r4, #4
    c1e4:	b904      	cbnz	r4, c1e8 <notify_filter_matched.constprop.0+0x14>
}
    c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    c1e8:	6823      	ldr	r3, [r4, #0]
    c1ea:	681b      	ldr	r3, [r3, #0]
    c1ec:	b11b      	cbz	r3, c1f6 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    c1ee:	463a      	mov	r2, r7
    c1f0:	4631      	mov	r1, r6
    c1f2:	4628      	mov	r0, r5
    c1f4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c1f6:	1d23      	adds	r3, r4, #4
    c1f8:	d0f5      	beq.n	c1e6 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    c1fa:	6864      	ldr	r4, [r4, #4]
    c1fc:	e7f0      	b.n	c1e0 <notify_filter_matched.constprop.0+0xc>
    c1fe:	bf00      	nop
    c200:	2000a84c 	.word	0x2000a84c

0000c204 <bt_scan_cb_register>:
	if (!cb) {
    c204:	b150      	cbz	r0, c21c <bt_scan_cb_register+0x18>
	parent->next = child;
    c206:	2300      	movs	r3, #0
    c208:	6043      	str	r3, [r0, #4]
	return list->tail;
    c20a:	4b05      	ldr	r3, [pc, #20]	; (c220 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    c20c:	1d02      	adds	r2, r0, #4
    c20e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    c210:	b911      	cbnz	r1, c218 <bt_scan_cb_register+0x14>
	list->head = node;
    c212:	e9c3 2200 	strd	r2, r2, [r3]
}
    c216:	4770      	bx	lr
	parent->next = child;
    c218:	600a      	str	r2, [r1, #0]
	list->tail = node;
    c21a:	605a      	str	r2, [r3, #4]
}
    c21c:	4770      	bx	lr
    c21e:	bf00      	nop
    c220:	2000a84c 	.word	0x2000a84c

0000c224 <bt_scan_filter_add>:
{
    c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c226:	4605      	mov	r5, r0
	if (!data) {
    c228:	460c      	mov	r4, r1
    c22a:	2900      	cmp	r1, #0
    c22c:	d048      	beq.n	c2c0 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    c22e:	f04f 32ff 	mov.w	r2, #4294967295
    c232:	f04f 33ff 	mov.w	r3, #4294967295
    c236:	4824      	ldr	r0, [pc, #144]	; (c2c8 <bt_scan_filter_add+0xa4>)
    c238:	f00a fdfa 	bl	16e30 <z_impl_k_mutex_lock>
	switch (type) {
    c23c:	2d03      	cmp	r5, #3
    c23e:	d00c      	beq.n	c25a <bt_scan_filter_add+0x36>
    c240:	d938      	bls.n	c2b4 <bt_scan_filter_add+0x90>
    c242:	3d04      	subs	r5, #4
		err = -EINVAL;
    c244:	2d01      	cmp	r5, #1
    c246:	bf94      	ite	ls
    c248:	f06f 040b 	mvnls.w	r4, #11
    c24c:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    c250:	481d      	ldr	r0, [pc, #116]	; (c2c8 <bt_scan_filter_add+0xa4>)
    c252:	f00a feb9 	bl	16fc8 <z_impl_k_mutex_unlock>
}
    c256:	4620      	mov	r0, r4
    c258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c25a:	4a1c      	ldr	r2, [pc, #112]	; (c2cc <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    c25c:	f892 3020 	ldrb.w	r3, [r2, #32]
    c260:	bb43      	cbnz	r3, c2b4 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    c262:	7823      	ldrb	r3, [r4, #0]
    c264:	2b01      	cmp	r3, #1
    c266:	d00c      	beq.n	c282 <bt_scan_filter_add+0x5e>
    c268:	2b02      	cmp	r3, #2
    c26a:	d011      	beq.n	c290 <bt_scan_filter_add+0x6c>
    c26c:	bb2b      	cbnz	r3, c2ba <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    c26e:	6820      	ldr	r0, [r4, #0]
    c270:	f102 030c 	add.w	r3, r2, #12
    c274:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    c276:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    c278:	2301      	movs	r3, #1
	return 0;
    c27a:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    c27c:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    c280:	e7e6      	b.n	c250 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    c282:	f102 030c 	add.w	r3, r2, #12
    c286:	e894 0003 	ldmia.w	r4, {r0, r1}
    c28a:	e883 0003 	stmia.w	r3, {r0, r1}
    c28e:	e7f2      	b.n	c276 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    c290:	4623      	mov	r3, r4
    c292:	f102 040c 	add.w	r4, r2, #12
    c296:	4626      	mov	r6, r4
    c298:	f103 0710 	add.w	r7, r3, #16
    c29c:	4625      	mov	r5, r4
    c29e:	6818      	ldr	r0, [r3, #0]
    c2a0:	6859      	ldr	r1, [r3, #4]
    c2a2:	3308      	adds	r3, #8
    c2a4:	c503      	stmia	r5!, {r0, r1}
    c2a6:	42bb      	cmp	r3, r7
    c2a8:	462c      	mov	r4, r5
    c2aa:	d1f7      	bne.n	c29c <bt_scan_filter_add+0x78>
    c2ac:	781b      	ldrb	r3, [r3, #0]
    c2ae:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    c2b0:	6096      	str	r6, [r2, #8]
		break;
    c2b2:	e7e1      	b.n	c278 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    c2b4:	f06f 040b 	mvn.w	r4, #11
    c2b8:	e7ca      	b.n	c250 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    c2ba:	f06f 0415 	mvn.w	r4, #21
    c2be:	e7c7      	b.n	c250 <bt_scan_filter_add+0x2c>
		return -EINVAL;
    c2c0:	f06f 0415 	mvn.w	r4, #21
    c2c4:	e7c7      	b.n	c256 <bt_scan_filter_add+0x32>
    c2c6:	bf00      	nop
    c2c8:	20008660 	.word	0x20008660
    c2cc:	2000a800 	.word	0x2000a800

0000c2d0 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    c2d0:	2200      	movs	r2, #0
    c2d2:	4b05      	ldr	r3, [pc, #20]	; (c2e8 <bt_scan_filter_disable+0x18>)
    c2d4:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    c2d6:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    c2d8:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    c2da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    c2de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    c2e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    c2e6:	4770      	bx	lr
    c2e8:	2000a800 	.word	0x2000a800

0000c2ec <bt_scan_filter_enable>:
{
    c2ec:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    c2ee:	0683      	lsls	r3, r0, #26
    c2f0:	d025      	beq.n	c33e <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    c2f2:	f7ff ffed 	bl	c2d0 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    c2f6:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    c2fa:	bf18      	it	ne
    c2fc:	2201      	movne	r2, #1
    c2fe:	4b11      	ldr	r3, [pc, #68]	; (c344 <bt_scan_filter_enable+0x58>)
    c300:	bf18      	it	ne
    c302:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    c304:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    c306:	bf44      	itt	mi
    c308:	2201      	movmi	r2, #1
    c30a:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    c30c:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    c30e:	bf44      	itt	mi
    c310:	2201      	movmi	r2, #1
    c312:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    c314:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    c316:	bf44      	itt	mi
    c318:	2201      	movmi	r2, #1
    c31a:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    c31e:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    c320:	bf44      	itt	mi
    c322:	2201      	movmi	r2, #1
    c324:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    c328:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    c32a:	bf48      	it	mi
    c32c:	2201      	movmi	r2, #1
	return 0;
    c32e:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    c332:	bf48      	it	mi
    c334:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    c338:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    c33c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    c33e:	f06f 0015 	mvn.w	r0, #21
    c342:	e7fb      	b.n	c33c <bt_scan_filter_enable+0x50>
    c344:	2000a800 	.word	0x2000a800

0000c348 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    c348:	b570      	push	{r4, r5, r6, lr}
    c34a:	460e      	mov	r6, r1
    c34c:	b086      	sub	sp, #24
    c34e:	4605      	mov	r5, r0
	bt_scan_stop();
    c350:	f00d fe95 	bl	1a07e <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    c354:	4b18      	ldr	r3, [pc, #96]	; (c3b8 <scan_connect_with_target.part.0+0x70>)
    c356:	ac02      	add	r4, sp, #8
    c358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    c35a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    c35e:	4621      	mov	r1, r4
    c360:	ab01      	add	r3, sp, #4
    c362:	4630      	mov	r0, r6
    c364:	4a15      	ldr	r2, [pc, #84]	; (c3bc <scan_connect_with_target.part.0+0x74>)
    c366:	f004 fab9 	bl	108dc <bt_conn_le_create>
	if (err) {
    c36a:	4b15      	ldr	r3, [pc, #84]	; (c3c0 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    c36c:	3508      	adds	r5, #8
	return list->head;
    c36e:	681c      	ldr	r4, [r3, #0]
	if (err) {
    c370:	b168      	cbz	r0, c38e <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c372:	b10c      	cbz	r4, c378 <scan_connect_with_target.part.0+0x30>
    c374:	3c04      	subs	r4, #4
    c376:	b90c      	cbnz	r4, c37c <scan_connect_with_target.part.0+0x34>
}
    c378:	b006      	add	sp, #24
    c37a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    c37c:	6823      	ldr	r3, [r4, #0]
    c37e:	689b      	ldr	r3, [r3, #8]
    c380:	b10b      	cbz	r3, c386 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    c382:	4628      	mov	r0, r5
    c384:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c386:	1d22      	adds	r2, r4, #4
    c388:	d0f6      	beq.n	c378 <scan_connect_with_target.part.0+0x30>
	return node->next;
    c38a:	6864      	ldr	r4, [r4, #4]
    c38c:	e7f1      	b.n	c372 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c38e:	b91c      	cbnz	r4, c398 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    c390:	9801      	ldr	r0, [sp, #4]
    c392:	f004 f8e5 	bl	10560 <bt_conn_unref>
    c396:	e7ef      	b.n	c378 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    c398:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c39a:	3c04      	subs	r4, #4
    c39c:	2c00      	cmp	r4, #0
    c39e:	d0f7      	beq.n	c390 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    c3a0:	6823      	ldr	r3, [r4, #0]
    c3a2:	68db      	ldr	r3, [r3, #12]
    c3a4:	b113      	cbz	r3, c3ac <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    c3a6:	4631      	mov	r1, r6
    c3a8:	4628      	mov	r0, r5
    c3aa:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c3ac:	1d23      	adds	r3, r4, #4
    c3ae:	d0ef      	beq.n	c390 <scan_connect_with_target.part.0+0x48>
	return node->next;
    c3b0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c3b2:	2c00      	cmp	r4, #0
    c3b4:	d1f1      	bne.n	c39a <scan_connect_with_target.part.0+0x52>
    c3b6:	e7eb      	b.n	c390 <scan_connect_with_target.part.0+0x48>
    c3b8:	0001d5e4 	.word	0x0001d5e4
    c3bc:	2000a844 	.word	0x2000a844
    c3c0:	2000a84c 	.word	0x2000a84c

0000c3c4 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c3c8:	4c54      	ldr	r4, [pc, #336]	; (c51c <scan_recv+0x158>)
{
    c3ca:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    c3cc:	2254      	movs	r2, #84	; 0x54
{
    c3ce:	4606      	mov	r6, r0
    c3d0:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    c3d2:	a801      	add	r0, sp, #4
    c3d4:	2100      	movs	r1, #0
    c3d6:	f00e fc2a 	bl	1ac2e <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c3da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    c3de:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c3e0:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    c3e4:	2300      	movs	r3, #0
    c3e6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    c3ea:	b112      	cbz	r2, c3f2 <scan_recv+0x2e>
		control->filter_cnt++;
    c3ec:	2301      	movs	r3, #1
    c3ee:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    c3f2:	7863      	ldrb	r3, [r4, #1]
    c3f4:	b123      	cbz	r3, c400 <scan_recv+0x3c>
		control->filter_cnt++;
    c3f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c3fa:	3301      	adds	r3, #1
    c3fc:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    c400:	78e3      	ldrb	r3, [r4, #3]
    c402:	b123      	cbz	r3, c40e <scan_recv+0x4a>
		control->filter_cnt++;
    c404:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c408:	3301      	adds	r3, #1
    c40a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    c40e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    c412:	b123      	cbz	r3, c41e <scan_recv+0x5a>
		control->filter_cnt++;
    c414:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c418:	3301      	adds	r3, #1
    c41a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    c41e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    c422:	b123      	cbz	r3, c42e <scan_recv+0x6a>
		control->filter_cnt++;
    c424:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c428:	3301      	adds	r3, #1
    c42a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    c42e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    c432:	b123      	cbz	r3, c43e <scan_recv+0x7a>
		control->filter_cnt++;
    c434:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c438:	3301      	adds	r3, #1
    c43a:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    c43e:	7a33      	ldrb	r3, [r6, #8]
    c440:	f003 0301 	and.w	r3, r3, #1
    c444:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    c448:	b1ea      	cbz	r2, c486 <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    c44a:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    c44e:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    c452:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    c456:	4f32      	ldr	r7, [pc, #200]	; (c520 <scan_recv+0x15c>)
    c458:	45c8      	cmp	r8, r9
    c45a:	d214      	bcs.n	c486 <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    c45c:	4639      	mov	r1, r7
    c45e:	2207      	movs	r2, #7
    c460:	4650      	mov	r0, sl
    c462:	f00e fba8 	bl	1abb6 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    c466:	46bb      	mov	fp, r7
    c468:	3707      	adds	r7, #7
    c46a:	2800      	cmp	r0, #0
    c46c:	d13a      	bne.n	c4e4 <scan_recv+0x120>
			control->filter_match_cnt++;
    c46e:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    c472:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    c476:	3301      	adds	r3, #1
    c478:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    c47c:	2301      	movs	r3, #1
    c47e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    c482:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    c486:	4628      	mov	r0, r5
    c488:	f00f fe9c 	bl	1c1c4 <net_buf_simple_headroom>
    c48c:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    c48e:	4925      	ldr	r1, [pc, #148]	; (c524 <scan_recv+0x160>)
    c490:	4628      	mov	r0, r5
    c492:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    c494:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    c498:	f002 fb1c 	bl	ead4 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    c49c:	4b22      	ldr	r3, [pc, #136]	; (c528 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    c49e:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    c4a0:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    c4a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c4a8:	fa10 f787 	uxtah	r7, r0, r7
    c4ac:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    c4ae:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    c4b2:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    c4b4:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    c4b6:	b1c3      	cbz	r3, c4ea <scan_recv+0x126>
    c4b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c4bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c4c0:	429a      	cmp	r2, r3
    c4c2:	d116      	bne.n	c4f2 <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    c4c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    c4c8:	a906      	add	r1, sp, #24
    c4ca:	a803      	add	r0, sp, #12
    c4cc:	f7ff fe82 	bl	c1d4 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    c4d0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    c4d4:	b11b      	cbz	r3, c4de <scan_recv+0x11a>
    c4d6:	4629      	mov	r1, r5
    c4d8:	a801      	add	r0, sp, #4
    c4da:	f7ff ff35 	bl	c348 <scan_connect_with_target.part.0>
}
    c4de:	b017      	add	sp, #92	; 0x5c
    c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    c4e4:	f108 0801 	add.w	r8, r8, #1
    c4e8:	e7b6      	b.n	c458 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    c4ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d1e8      	bne.n	c4c4 <scan_recv+0x100>
	return list->head;
    c4f2:	4b0e      	ldr	r3, [pc, #56]	; (c52c <scan_recv+0x168>)
    c4f4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c4f6:	2c00      	cmp	r4, #0
    c4f8:	d0f1      	beq.n	c4de <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    c4fa:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c4fe:	3c04      	subs	r4, #4
    c500:	2c00      	cmp	r4, #0
    c502:	d0ec      	beq.n	c4de <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    c504:	6823      	ldr	r3, [r4, #0]
    c506:	685b      	ldr	r3, [r3, #4]
    c508:	b113      	cbz	r3, c510 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    c50a:	4629      	mov	r1, r5
    c50c:	a803      	add	r0, sp, #12
    c50e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c510:	1d23      	adds	r3, r4, #4
    c512:	d0e4      	beq.n	c4de <scan_recv+0x11a>
	return node->next;
    c514:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c516:	2c00      	cmp	r4, #0
    c518:	d1f1      	bne.n	c4fe <scan_recv+0x13a>
    c51a:	e7e0      	b.n	c4de <scan_recv+0x11a>
    c51c:	2000a800 	.word	0x2000a800
    c520:	2000a804 	.word	0x2000a804
    c524:	0000c05d 	.word	0x0000c05d
    c528:	2000a844 	.word	0x2000a844
    c52c:	2000a84c 	.word	0x2000a84c

0000c530 <bt_scan_init>:
{
    c530:	b570      	push	{r4, r5, r6, lr}
    c532:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c534:	4c14      	ldr	r4, [pc, #80]	; (c588 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    c536:	4815      	ldr	r0, [pc, #84]	; (c58c <bt_scan_init+0x5c>)
    c538:	f003 fcf8 	bl	ff2c <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c53c:	222c      	movs	r2, #44	; 0x2c
    c53e:	2100      	movs	r1, #0
    c540:	4620      	mov	r0, r4
    c542:	f00e fb74 	bl	1ac2e <memset>
	if (init) {
    c546:	b1be      	cbz	r6, c578 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    c548:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    c54a:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    c54c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    c550:	b15d      	cbz	r5, c56a <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    c552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c554:	3430      	adds	r4, #48	; 0x30
    c556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c558:	682b      	ldr	r3, [r5, #0]
    c55a:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    c55c:	68b2      	ldr	r2, [r6, #8]
    c55e:	b13a      	cbz	r2, c570 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    c560:	4b0b      	ldr	r3, [pc, #44]	; (c590 <bt_scan_init+0x60>)
    c562:	6810      	ldr	r0, [r2, #0]
    c564:	6851      	ldr	r1, [r2, #4]
    c566:	c303      	stmia	r3!, {r0, r1}
}
    c568:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    c56a:	f7ff fcff 	bl	bf6c <scan_default_param_set>
    c56e:	e7f5      	b.n	c55c <bt_scan_init+0x2c>
}
    c570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    c574:	f7ff bd0c 	b.w	bf90 <scan_default_conn_param_set>
		scan_default_param_set();
    c578:	f7ff fcf8 	bl	bf6c <scan_default_param_set>
		scan_default_conn_param_set();
    c57c:	f7ff fd08 	bl	bf90 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    c580:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    c584:	e7f0      	b.n	c568 <bt_scan_init+0x38>
    c586:	bf00      	nop
    c588:	2000a800 	.word	0x2000a800
    c58c:	2000828c 	.word	0x2000828c
    c590:	2000a844 	.word	0x2000a844

0000c594 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    c594:	b108      	cbz	r0, c59a <bt_scan_start+0x6>
    c596:	2801      	cmp	r0, #1
    c598:	d106      	bne.n	c5a8 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c59a:	4b05      	ldr	r3, [pc, #20]	; (c5b0 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c59c:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c59e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c5a2:	4804      	ldr	r0, [pc, #16]	; (c5b4 <bt_scan_start+0x20>)
    c5a4:	f003 bc48 	b.w	fe38 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    c5a8:	f06f 0015 	mvn.w	r0, #21
    c5ac:	4770      	bx	lr
    c5ae:	bf00      	nop
    c5b0:	2000a800 	.word	0x2000a800
    c5b4:	2000a830 	.word	0x2000a830

0000c5b8 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    c5b8:	1e4b      	subs	r3, r1, #1
    c5ba:	4259      	negs	r1, r3
    c5bc:	4159      	adcs	r1, r3
    c5be:	4b01      	ldr	r3, [pc, #4]	; (c5c4 <lbslc_ccc_cfg_changed+0xc>)
    c5c0:	7019      	strb	r1, [r3, #0]
}
    c5c2:	4770      	bx	lr
    c5c4:	2000c0ed 	.word	0x2000c0ed

0000c5c8 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    c5c8:	b510      	push	{r4, lr}
    c5ca:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    c5cc:	4b03      	ldr	r3, [pc, #12]	; (c5dc <write_led+0x14>)
    c5ce:	681b      	ldr	r3, [r3, #0]
    c5d0:	b10b      	cbz	r3, c5d6 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    c5d2:	7810      	ldrb	r0, [r2, #0]
    c5d4:	4798      	blx	r3
	}

	return len;
}
    c5d6:	4620      	mov	r0, r4
    c5d8:	bd10      	pop	{r4, pc}
    c5da:	bf00      	nop
    c5dc:	2000a854 	.word	0x2000a854

0000c5e0 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    c5e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c5e4:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    c5e6:	4b0d      	ldr	r3, [pc, #52]	; (c61c <read_button+0x3c>)
{
    c5e8:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    c5ea:	6858      	ldr	r0, [r3, #4]
{
    c5ec:	460c      	mov	r4, r1
    c5ee:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    c5f0:	b180      	cbz	r0, c614 <read_button+0x34>
	const char *value = attr->user_data;
    c5f2:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    c5f6:	4780      	blx	r0
    c5f8:	4b09      	ldr	r3, [pc, #36]	; (c620 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c5fa:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    c5fc:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c5fe:	2301      	movs	r3, #1
    c600:	e9cd 8301 	strd	r8, r3, [sp, #4]
    c604:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c608:	4621      	mov	r1, r4
    c60a:	9300      	str	r3, [sp, #0]
    c60c:	4628      	mov	r0, r5
    c60e:	463b      	mov	r3, r7
    c610:	f00f fc36 	bl	1be80 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    c614:	b004      	add	sp, #16
    c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c61a:	bf00      	nop
    c61c:	2000a854 	.word	0x2000a854
    c620:	2000c0ec 	.word	0x2000c0ec

0000c624 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    c624:	b120      	cbz	r0, c630 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    c626:	4b03      	ldr	r3, [pc, #12]	; (c634 <bt_lbs_init+0x10>)
    c628:	6802      	ldr	r2, [r0, #0]
    c62a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    c62c:	6842      	ldr	r2, [r0, #4]
    c62e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    c630:	2000      	movs	r0, #0
    c632:	4770      	bx	lr
    c634:	2000a854 	.word	0x2000a854

0000c638 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    c638:	b500      	push	{lr}
	if (!notify_enabled) {
    c63a:	4b0e      	ldr	r3, [pc, #56]	; (c674 <bt_lbs_send_button_state+0x3c>)
{
    c63c:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    c63e:	781b      	ldrb	r3, [r3, #0]
{
    c640:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    c644:	b19b      	cbz	r3, c66e <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    c646:	2100      	movs	r1, #0
    c648:	2218      	movs	r2, #24
    c64a:	a802      	add	r0, sp, #8
    c64c:	f00e faef 	bl	1ac2e <memset>

	params.attr = attr;
    c650:	4b09      	ldr	r3, [pc, #36]	; (c678 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    c652:	2000      	movs	r0, #0
	params.attr = attr;
    c654:	9303      	str	r3, [sp, #12]
	params.data = data;
    c656:	f10d 0307 	add.w	r3, sp, #7
    c65a:	9304      	str	r3, [sp, #16]
	params.len = len;
    c65c:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    c65e:	a902      	add	r1, sp, #8
	params.len = len;
    c660:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    c664:	f006 fd82 	bl	1316c <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    c668:	b009      	add	sp, #36	; 0x24
    c66a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    c66e:	f06f 000c 	mvn.w	r0, #12
    c672:	e7f9      	b.n	c668 <bt_lbs_send_button_state+0x30>
    c674:	2000c0ed 	.word	0x2000c0ed
    c678:	0001d88c 	.word	0x0001d88c

0000c67c <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    c67c:	2303      	movs	r3, #3
static void _DoInit(void) {
    c67e:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    c680:	4c10      	ldr	r4, [pc, #64]	; (c6c4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    c682:	4a11      	ldr	r2, [pc, #68]	; (c6c8 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    c684:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    c688:	4b10      	ldr	r3, [pc, #64]	; (c6cc <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    c68a:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    c68c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    c68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    c692:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    c694:	4a0e      	ldr	r2, [pc, #56]	; (c6d0 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    c696:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    c698:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    c69a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    c69c:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    c69e:	490d      	ldr	r1, [pc, #52]	; (c6d4 <_DoInit+0x58>)
    c6a0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    c6a2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    c6a4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    c6a6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    c6a8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    c6aa:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    c6ac:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    c6ae:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    c6b0:	f00e fa38 	bl	1ab24 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    c6b4:	4620      	mov	r0, r4
    c6b6:	4908      	ldr	r1, [pc, #32]	; (c6d8 <_DoInit+0x5c>)
    c6b8:	f00e fa34 	bl	1ab24 <strcpy>
  p->acID[6] = ' ';
    c6bc:	2320      	movs	r3, #32
    c6be:	71a3      	strb	r3, [r4, #6]
}
    c6c0:	bd10      	pop	{r4, pc}
    c6c2:	bf00      	nop
    c6c4:	2000a85c 	.word	0x2000a85c
    c6c8:	0001eff9 	.word	0x0001eff9
    c6cc:	2000c0fe 	.word	0x2000c0fe
    c6d0:	2000c0ee 	.word	0x2000c0ee
    c6d4:	0001f002 	.word	0x0001f002
    c6d8:	0001f006 	.word	0x0001f006

0000c6dc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    c6dc:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    c6de:	2418      	movs	r4, #24
    c6e0:	fb00 4504 	mla	r5, r0, r4, r4
    c6e4:	4b14      	ldr	r3, [pc, #80]	; (c738 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    c6e6:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    c6e8:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    c6ea:	fb04 3300 	mla	r3, r4, r0, r3
    c6ee:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    c6f0:	2c01      	cmp	r4, #1
    c6f2:	d00e      	beq.n	c712 <SEGGER_RTT_WriteNoLock+0x36>
    c6f4:	2c02      	cmp	r4, #2
    c6f6:	d018      	beq.n	c72a <SEGGER_RTT_WriteNoLock+0x4e>
    c6f8:	b9e4      	cbnz	r4, c734 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    c6fa:	4628      	mov	r0, r5
    c6fc:	f00d fcc1 	bl	1a082 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    c700:	4286      	cmp	r6, r0
    c702:	d804      	bhi.n	c70e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    c704:	4632      	mov	r2, r6
    c706:	4628      	mov	r0, r5
    c708:	f00d fcc4 	bl	1a094 <_WriteNoCheck>
    c70c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    c70e:	4620      	mov	r0, r4
    c710:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    c712:	4628      	mov	r0, r5
    c714:	f00d fcb5 	bl	1a082 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    c718:	4286      	cmp	r6, r0
    c71a:	4634      	mov	r4, r6
    c71c:	bf28      	it	cs
    c71e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    c720:	4628      	mov	r0, r5
    c722:	4622      	mov	r2, r4
    c724:	f00d fcb6 	bl	1a094 <_WriteNoCheck>
    break;
    c728:	e7f1      	b.n	c70e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    c72a:	4628      	mov	r0, r5
}
    c72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    c730:	f00d bccc 	b.w	1a0cc <_WriteBlocking>
  switch (pRing->Flags) {
    c734:	2400      	movs	r4, #0
  return Status;
    c736:	e7ea      	b.n	c70e <SEGGER_RTT_WriteNoLock+0x32>
    c738:	2000a85c 	.word	0x2000a85c

0000c73c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c73c:	4904      	ldr	r1, [pc, #16]	; (c750 <sub_bytes+0x14>)
    c73e:	1e43      	subs	r3, r0, #1
    c740:	300f      	adds	r0, #15
    c742:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c746:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c748:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c74a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c74c:	d1f9      	bne.n	c742 <sub_bytes+0x6>
	}
}
    c74e:	4770      	bx	lr
    c750:	0001f00d 	.word	0x0001f00d

0000c754 <tc_aes128_set_encrypt_key>:
{
    c754:	b5f0      	push	{r4, r5, r6, r7, lr}
    c756:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    c758:	4e26      	ldr	r6, [pc, #152]	; (c7f4 <tc_aes128_set_encrypt_key+0xa0>)
{
    c75a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    c75c:	ad01      	add	r5, sp, #4
{
    c75e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    c760:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c764:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c768:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    c76c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    c770:	4638      	mov	r0, r7
    c772:	2f00      	cmp	r7, #0
    c774:	d039      	beq.n	c7ea <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    c776:	2c00      	cmp	r4, #0
    c778:	d039      	beq.n	c7ee <tc_aes128_set_encrypt_key+0x9a>
    c77a:	1f38      	subs	r0, r7, #4
    c77c:	4602      	mov	r2, r0
    c77e:	4621      	mov	r1, r4
    c780:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c782:	784b      	ldrb	r3, [r1, #1]
    c784:	780d      	ldrb	r5, [r1, #0]
    c786:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c788:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    c78c:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    c78e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c790:	432b      	orrs	r3, r5
    c792:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    c796:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c798:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c79c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    c7a0:	d1ef      	bne.n	c782 <tc_aes128_set_encrypt_key+0x2e>
    c7a2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c7a4:	4c14      	ldr	r4, [pc, #80]	; (c7f8 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    c7a6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    c7a8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    c7aa:	d116      	bne.n	c7da <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c7ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
    c7b0:	5ca5      	ldrb	r5, [r4, r2]
    c7b2:	0e1a      	lsrs	r2, r3, #24
    c7b4:	5ca2      	ldrb	r2, [r4, r2]
    c7b6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    c7ba:	f3c3 2507 	ubfx	r5, r3, #8, #8
    c7be:	5d65      	ldrb	r5, [r4, r5]
    c7c0:	b2db      	uxtb	r3, r3
    c7c2:	5ce3      	ldrb	r3, [r4, r3]
    c7c4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    c7c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    c7cc:	ad0c      	add	r5, sp, #48	; 0x30
    c7ce:	f021 0303 	bic.w	r3, r1, #3
    c7d2:	442b      	add	r3, r5
    c7d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    c7d8:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    c7da:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    c7de:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    c7e0:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    c7e2:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    c7e4:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    c7e6:	d1de      	bne.n	c7a6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    c7e8:	2001      	movs	r0, #1
}
    c7ea:	b00d      	add	sp, #52	; 0x34
    c7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    c7ee:	4620      	mov	r0, r4
    c7f0:	e7fb      	b.n	c7ea <tc_aes128_set_encrypt_key+0x96>
    c7f2:	bf00      	nop
    c7f4:	0001d5f4 	.word	0x0001d5f4
    c7f8:	0001f00d 	.word	0x0001f00d

0000c7fc <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c800:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c802:	6803      	ldr	r3, [r0, #0]
{
    c804:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c806:	9302      	str	r3, [sp, #8]
    c808:	6843      	ldr	r3, [r0, #4]
    c80a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; c9c4 <compress+0x1c8>
    c80e:	9303      	str	r3, [sp, #12]
    c810:	6883      	ldr	r3, [r0, #8]
    c812:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    c816:	9304      	str	r3, [sp, #16]
    c818:	68c3      	ldr	r3, [r0, #12]
    c81a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c81c:	6903      	ldr	r3, [r0, #16]
    c81e:	9306      	str	r3, [sp, #24]
    c820:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c822:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c826:	9307      	str	r3, [sp, #28]
    c828:	6983      	ldr	r3, [r0, #24]
    c82a:	9308      	str	r3, [sp, #32]
    c82c:	69c3      	ldr	r3, [r0, #28]
    c82e:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    c832:	4698      	mov	r8, r3
    c834:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c836:	9b04      	ldr	r3, [sp, #16]
    c838:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    c83a:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    c83c:	ab0c      	add	r3, sp, #48	; 0x30
    c83e:	ba2d      	rev	r5, r5
    c840:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    c842:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    c846:	3704      	adds	r7, #4
    c848:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    c84c:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c850:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    c854:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    c858:	444d      	add	r5, r9
    c85a:	ea2b 0302 	bic.w	r3, fp, r2
    c85e:	ea02 090c 	and.w	r9, r2, ip
    c862:	ea83 0309 	eor.w	r3, r3, r9
    c866:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    c868:	9d00      	ldr	r5, [sp, #0]
    c86a:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c86e:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    c870:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    c872:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    c876:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    c87a:	4025      	ands	r5, r4
    c87c:	ea06 0909 	and.w	r9, r6, r9
    c880:	ea85 0509 	eor.w	r5, r5, r9
    c884:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    c888:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    c88a:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    c88c:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    c890:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    c892:	f8dd e000 	ldr.w	lr, [sp]
    c896:	46d8      	mov	r8, fp
    c898:	f040 8085 	bne.w	c9a6 <compress+0x1aa>
    c89c:	f04f 0a10 	mov.w	sl, #16
    c8a0:	4949      	ldr	r1, [pc, #292]	; (c9c8 <compress+0x1cc>)
    c8a2:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    c8a4:	4651      	mov	r1, sl
    c8a6:	f10a 0a01 	add.w	sl, sl, #1
    c8aa:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    c8ae:	f00a 070f 	and.w	r7, sl, #15
    c8b2:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c8b6:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c8ba:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    c8be:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    c8c2:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    c8c4:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    c8c8:	f101 070e 	add.w	r7, r1, #14
    c8cc:	f007 070f 	and.w	r7, r7, #15
    c8d0:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c8d4:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c8d8:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    c8da:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    c8de:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    c8e2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c8e6:	f001 010f 	and.w	r1, r1, #15
    c8ea:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    c8ee:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    c8f2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    c8f6:	f851 1c40 	ldr.w	r1, [r1, #-64]
    c8fa:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    c8fe:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c902:	4471      	add	r1, lr
		s0 = sigma0(s0);
    c904:	f8dd e004 	ldr.w	lr, [sp, #4]
    c908:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    c90c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c910:	4441      	add	r1, r8
		s1 = sigma1(s1);
    c912:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c916:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c918:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c91a:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c91e:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    c922:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c926:	ea05 0802 	and.w	r8, r5, r2
    c92a:	970a      	str	r7, [sp, #40]	; 0x28
    c92c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    c930:	ea2c 0705 	bic.w	r7, ip, r5
    c934:	ea87 0708 	eor.w	r7, r7, r8
    c938:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    c93c:	444f      	add	r7, r9
    c93e:	4477      	add	r7, lr
    c940:	4439      	add	r1, r7
    c942:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    c944:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    c948:	ea84 0b06 	eor.w	fp, r4, r6
    c94c:	ea0b 0b03 	and.w	fp, fp, r3
    c950:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    c954:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    c958:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    c95c:	ea8b 0e0e 	eor.w	lr, fp, lr
    c960:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    c964:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    c966:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    c968:	46e3      	mov	fp, ip
    c96a:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    c96c:	9600      	str	r6, [sp, #0]
    c96e:	d121      	bne.n	c9b4 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    c970:	9f02      	ldr	r7, [sp, #8]
    c972:	440f      	add	r7, r1
    c974:	9903      	ldr	r1, [sp, #12]
    c976:	6007      	str	r7, [r0, #0]
    c978:	4419      	add	r1, r3
    c97a:	9b04      	ldr	r3, [sp, #16]
    c97c:	6041      	str	r1, [r0, #4]
    c97e:	4423      	add	r3, r4
    c980:	6083      	str	r3, [r0, #8]
    c982:	9b05      	ldr	r3, [sp, #20]
    c984:	4433      	add	r3, r6
    c986:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    c988:	9b06      	ldr	r3, [sp, #24]
    c98a:	4443      	add	r3, r8
    c98c:	6103      	str	r3, [r0, #16]
    c98e:	9b07      	ldr	r3, [sp, #28]
    c990:	442b      	add	r3, r5
    c992:	6143      	str	r3, [r0, #20]
    c994:	9b08      	ldr	r3, [sp, #32]
    c996:	4413      	add	r3, r2
    c998:	6183      	str	r3, [r0, #24]
    c99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c99c:	4463      	add	r3, ip
    c99e:	61c3      	str	r3, [r0, #28]
}
    c9a0:	b01d      	add	sp, #116	; 0x74
    c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9a6:	46e3      	mov	fp, ip
    c9a8:	9600      	str	r6, [sp, #0]
    c9aa:	4694      	mov	ip, r2
    c9ac:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    c9ae:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    c9b0:	461c      	mov	r4, r3
    c9b2:	e742      	b.n	c83a <compress+0x3e>
    c9b4:	4694      	mov	ip, r2
    c9b6:	4626      	mov	r6, r4
    c9b8:	462a      	mov	r2, r5
    c9ba:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    c9bc:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    c9be:	460b      	mov	r3, r1
    c9c0:	e770      	b.n	c8a4 <compress+0xa8>
    c9c2:	bf00      	nop
    c9c4:	0001d8dc 	.word	0x0001d8dc
    c9c8:	0001d91c 	.word	0x0001d91c

0000c9cc <tc_sha256_init>:
{
    c9cc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    c9ce:	4604      	mov	r4, r0
    c9d0:	b1c8      	cbz	r0, ca06 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    c9d2:	2270      	movs	r2, #112	; 0x70
    c9d4:	2100      	movs	r1, #0
    c9d6:	f00d fbb6 	bl	1a146 <_set>
	s->iv[1] = 0xbb67ae85;
    c9da:	4b0b      	ldr	r3, [pc, #44]	; (ca08 <tc_sha256_init+0x3c>)
    c9dc:	4a0b      	ldr	r2, [pc, #44]	; (ca0c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    c9de:	490c      	ldr	r1, [pc, #48]	; (ca10 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    c9e0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    c9e4:	4b0b      	ldr	r3, [pc, #44]	; (ca14 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    c9e6:	480c      	ldr	r0, [pc, #48]	; (ca18 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    c9e8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    c9ec:	4b0b      	ldr	r3, [pc, #44]	; (ca1c <tc_sha256_init+0x50>)
    c9ee:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    c9f2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    c9f4:	4b0a      	ldr	r3, [pc, #40]	; (ca20 <tc_sha256_init+0x54>)
    c9f6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    c9f8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    c9fc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    ca00:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    ca04:	61e3      	str	r3, [r4, #28]
}
    ca06:	bd10      	pop	{r4, pc}
    ca08:	bb67ae85 	.word	0xbb67ae85
    ca0c:	6a09e667 	.word	0x6a09e667
    ca10:	3c6ef372 	.word	0x3c6ef372
    ca14:	a54ff53a 	.word	0xa54ff53a
    ca18:	510e527f 	.word	0x510e527f
    ca1c:	9b05688c 	.word	0x9b05688c
    ca20:	1f83d9ab 	.word	0x1f83d9ab

0000ca24 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    ca24:	4a0a      	ldr	r2, [pc, #40]	; (ca50 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ca26:	490b      	ldr	r1, [pc, #44]	; (ca54 <arch_swap+0x30>)
	_current->arch.basepri = key;
    ca28:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ca2a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    ca2c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    ca30:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ca34:	4908      	ldr	r1, [pc, #32]	; (ca58 <arch_swap+0x34>)
    ca36:	684b      	ldr	r3, [r1, #4]
    ca38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ca3c:	604b      	str	r3, [r1, #4]
    ca3e:	2300      	movs	r3, #0
    ca40:	f383 8811 	msr	BASEPRI, r3
    ca44:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ca48:	6893      	ldr	r3, [r2, #8]
}
    ca4a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    ca4e:	4770      	bx	lr
    ca50:	2000adc4 	.word	0x2000adc4
    ca54:	0001df48 	.word	0x0001df48
    ca58:	e000ed00 	.word	0xe000ed00

0000ca5c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ca5c:	4914      	ldr	r1, [pc, #80]	; (cab0 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ca5e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ca60:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    ca64:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ca66:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ca6a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ca6e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ca70:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ca74:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ca78:	4f0e      	ldr	r7, [pc, #56]	; (cab4 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ca7a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ca7e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    ca80:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ca82:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ca84:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    ca88:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ca8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ca8e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ca92:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    ca96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ca9a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ca9e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    caa2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    caa4:	f00d ff92 	bl	1a9cc <configure_builtin_stack_guard>
    pop {r2, lr}
    caa8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    caac:	4770      	bx	lr
    caae:	0000      	.short	0x0000
    ldr r1, =_kernel
    cab0:	2000adc4 	.word	0x2000adc4
    ldr v4, =_SCS_ICSR
    cab4:	e000ed04 	.word	0xe000ed04

0000cab8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    cab8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cabc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cabe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cac2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cac6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cac8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cacc:	2902      	cmp	r1, #2
    beq _oops
    cace:	d0ff      	beq.n	cad0 <_oops>

0000cad0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cad0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    cad2:	f00d ff7f 	bl	1a9d4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    cad6:	bd01      	pop	{r0, pc}

0000cad8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cad8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cada:	2b00      	cmp	r3, #0
    cadc:	db08      	blt.n	caf0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cade:	2201      	movs	r2, #1
    cae0:	f000 001f 	and.w	r0, r0, #31
    cae4:	fa02 f000 	lsl.w	r0, r2, r0
    cae8:	4a02      	ldr	r2, [pc, #8]	; (caf4 <arch_irq_enable+0x1c>)
    caea:	095b      	lsrs	r3, r3, #5
    caec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    caf0:	4770      	bx	lr
    caf2:	bf00      	nop
    caf4:	e000e100 	.word	0xe000e100

0000caf8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    caf8:	4b05      	ldr	r3, [pc, #20]	; (cb10 <arch_irq_is_enabled+0x18>)
    cafa:	0942      	lsrs	r2, r0, #5
    cafc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cb00:	2301      	movs	r3, #1
    cb02:	f000 001f 	and.w	r0, r0, #31
    cb06:	fa03 f000 	lsl.w	r0, r3, r0
}
    cb0a:	4010      	ands	r0, r2
    cb0c:	4770      	bx	lr
    cb0e:	bf00      	nop
    cb10:	e000e100 	.word	0xe000e100

0000cb14 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    cb14:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    cb16:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cb18:	2c07      	cmp	r4, #7
{
    cb1a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cb1c:	d908      	bls.n	cb30 <z_arm_irq_priority_set+0x1c>
    cb1e:	490d      	ldr	r1, [pc, #52]	; (cb54 <z_arm_irq_priority_set+0x40>)
    cb20:	480d      	ldr	r0, [pc, #52]	; (cb58 <z_arm_irq_priority_set+0x44>)
    cb22:	225c      	movs	r2, #92	; 0x5c
    cb24:	f00c fdf8 	bl	19718 <printk>
    cb28:	215c      	movs	r1, #92	; 0x5c
    cb2a:	480a      	ldr	r0, [pc, #40]	; (cb54 <z_arm_irq_priority_set+0x40>)
    cb2c:	f00d f89a 	bl	19c64 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    cb30:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cb32:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb34:	bfac      	ite	ge
    cb36:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb3a:	4b08      	ldrlt	r3, [pc, #32]	; (cb5c <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb3c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    cb40:	b2e4      	uxtb	r4, r4
    cb42:	bfab      	itete	ge
    cb44:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb48:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb4c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb50:	555c      	strblt	r4, [r3, r5]
}
    cb52:	bd38      	pop	{r3, r4, r5, pc}
    cb54:	0001f10d 	.word	0x0001f10d
    cb58:	0001e6bc 	.word	0x0001e6bc
    cb5c:	e000ed14 	.word	0xe000ed14

0000cb60 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    cb60:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    cb64:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    cb66:	490b      	ldr	r1, [pc, #44]	; (cb94 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    cb68:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    cb6c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    cb6e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    cb72:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    cb76:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    cb78:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    cb7c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    cb80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    cb84:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    cb88:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    cb8a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    cb8c:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    cb8e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    cb92:	4770      	bx	lr
    cb94:	000197f5 	.word	0x000197f5

0000cb98 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    cb98:	4604      	mov	r4, r0
    cb9a:	b508      	push	{r3, lr}
    cb9c:	460e      	mov	r6, r1
    cb9e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    cba0:	f000 faf6 	bl	d190 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    cba4:	4b08      	ldr	r3, [pc, #32]	; (cbc8 <arch_switch_to_main_thread+0x30>)
    cba6:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    cba8:	6f63      	ldr	r3, [r4, #116]	; 0x74
    cbaa:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    cbae:	4628      	mov	r0, r5
    cbb0:	f386 8809 	msr	PSP, r6
    cbb4:	2100      	movs	r1, #0
    cbb6:	b663      	cpsie	if
    cbb8:	f381 8811 	msr	BASEPRI, r1
    cbbc:	f3bf 8f6f 	isb	sy
    cbc0:	2200      	movs	r2, #0
    cbc2:	2300      	movs	r3, #0
    cbc4:	f00c fe16 	bl	197f4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cbc8:	2000adc4 	.word	0x2000adc4

0000cbcc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cbcc:	4901      	ldr	r1, [pc, #4]	; (cbd4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cbce:	2210      	movs	r2, #16
	str	r2, [r1]
    cbd0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cbd2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cbd4:	e000ed10 	.word	0xe000ed10

0000cbd8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    cbd8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    cbda:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    cbdc:	f380 8811 	msr	BASEPRI, r0
	isb
    cbe0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    cbe4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    cbe8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    cbea:	b662      	cpsie	i
	isb
    cbec:	f3bf 8f6f 	isb	sy

	bx	lr
    cbf0:	4770      	bx	lr
    cbf2:	bf00      	nop

0000cbf4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    cbf4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    cbf6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    cbf8:	f381 8811 	msr	BASEPRI, r1

	wfe
    cbfc:	bf20      	wfe

	msr	BASEPRI, r0
    cbfe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    cc02:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    cc04:	4770      	bx	lr
    cc06:	bf00      	nop

0000cc08 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cc0a:	4605      	mov	r5, r0

	if (esf != NULL) {
    cc0c:	460c      	mov	r4, r1
    cc0e:	b1c9      	cbz	r1, cc44 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    cc10:	688b      	ldr	r3, [r1, #8]
    cc12:	4810      	ldr	r0, [pc, #64]	; (cc54 <z_arm_fatal_error+0x4c>)
    cc14:	9300      	str	r3, [sp, #0]
    cc16:	e9d1 2300 	ldrd	r2, r3, [r1]
    cc1a:	2145      	movs	r1, #69	; 0x45
    cc1c:	f00c fd7c 	bl	19718 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    cc20:	6963      	ldr	r3, [r4, #20]
    cc22:	2145      	movs	r1, #69	; 0x45
    cc24:	9300      	str	r3, [sp, #0]
    cc26:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    cc2a:	480b      	ldr	r0, [pc, #44]	; (cc58 <z_arm_fatal_error+0x50>)
    cc2c:	f00c fd74 	bl	19718 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    cc30:	2145      	movs	r1, #69	; 0x45
    cc32:	69e2      	ldr	r2, [r4, #28]
    cc34:	4809      	ldr	r0, [pc, #36]	; (cc5c <z_arm_fatal_error+0x54>)
    cc36:	f00c fd6f 	bl	19718 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    cc3a:	2145      	movs	r1, #69	; 0x45
    cc3c:	69a2      	ldr	r2, [r4, #24]
    cc3e:	4808      	ldr	r0, [pc, #32]	; (cc60 <z_arm_fatal_error+0x58>)
    cc40:	f00c fd6a 	bl	19718 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    cc44:	4621      	mov	r1, r4
    cc46:	4628      	mov	r0, r5
}
    cc48:	b003      	add	sp, #12
    cc4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    cc4e:	f009 bdf9 	b.w	16844 <z_fatal_error>
    cc52:	bf00      	nop
    cc54:	0001f143 	.word	0x0001f143
    cc58:	0001f177 	.word	0x0001f177
    cc5c:	0001f1ab 	.word	0x0001f1ab
    cc60:	0001f1bf 	.word	0x0001f1bf

0000cc64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cc64:	bf30      	wfi
    b z_SysNmiOnReset
    cc66:	f7ff bffd 	b.w	cc64 <z_SysNmiOnReset>
    cc6a:	bf00      	nop

0000cc6c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cc6c:	4a0e      	ldr	r2, [pc, #56]	; (cca8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    cc6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cc70:	4b0e      	ldr	r3, [pc, #56]	; (ccac <z_arm_prep_c+0x40>)
    cc72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    cc76:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cc78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cc80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cc84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cc88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    cc8c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    cc90:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    cc94:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    cc98:	f009 fe60 	bl	1695c <z_bss_zero>
	z_data_copy();
    cc9c:	f00b fe96 	bl	189cc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cca0:	f000 fa48 	bl	d134 <z_arm_interrupt_init>
	z_cstart();
    cca4:	f009 fe7e 	bl	169a4 <z_cstart>
    cca8:	00008000 	.word	0x00008000
    ccac:	e000ed00 	.word	0xe000ed00

0000ccb0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ccb0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ccb2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ccb4:	4a0b      	ldr	r2, [pc, #44]	; (cce4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ccb6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    ccb8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ccba:	bf1e      	ittt	ne
	movne	r1, #0
    ccbc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ccbe:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    ccc0:	f010 f895 	blne	1cdee <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ccc4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ccc6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ccca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ccce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ccd2:	4905      	ldr	r1, [pc, #20]	; (cce8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ccd4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ccd6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ccd8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ccda:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ccde:	4903      	ldr	r1, [pc, #12]	; (ccec <_isr_wrapper+0x3c>)
	bx r1
    cce0:	4708      	bx	r1
    cce2:	0000      	.short	0x0000
	ldr r2, =_kernel
    cce4:	2000adc4 	.word	0x2000adc4
	ldr r1, =_sw_isr_table
    cce8:	0001d1f0 	.word	0x0001d1f0
	ldr r1, =z_arm_int_exit
    ccec:	0000d0f5 	.word	0x0000d0f5

0000ccf0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    ccf0:	f00c ffd7 	bl	19ca2 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ccf4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ccf6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    ccfa:	4808      	ldr	r0, [pc, #32]	; (cd1c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    ccfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    cd00:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cd02:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    cd06:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    cd0a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    cd0c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    cd0e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    cd12:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    cd16:	f7ff ffa9 	bl	cc6c <z_arm_prep_c>
    cd1a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    cd1c:	2000ec40 	.word	0x2000ec40

0000cd20 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    cd20:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    cd24:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    cd28:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    cd2a:	4672      	mov	r2, lr
	bl z_arm_fault
    cd2c:	f000 f91a 	bl	cf64 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    cd30:	bd01      	pop	{r0, pc}
    cd32:	bf00      	nop

0000cd34 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    cd34:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cd36:	4c21      	ldr	r4, [pc, #132]	; (cdbc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    cd38:	2145      	movs	r1, #69	; 0x45
    cd3a:	4821      	ldr	r0, [pc, #132]	; (cdc0 <usage_fault.constprop.0+0x8c>)
    cd3c:	f00c fcec 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cd40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cd42:	019d      	lsls	r5, r3, #6
    cd44:	d503      	bpl.n	cd4e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    cd46:	2145      	movs	r1, #69	; 0x45
    cd48:	481e      	ldr	r0, [pc, #120]	; (cdc4 <usage_fault.constprop.0+0x90>)
    cd4a:	f00c fce5 	bl	19718 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    cd4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cd50:	01dc      	lsls	r4, r3, #7
    cd52:	d503      	bpl.n	cd5c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    cd54:	2145      	movs	r1, #69	; 0x45
    cd56:	481c      	ldr	r0, [pc, #112]	; (cdc8 <usage_fault.constprop.0+0x94>)
    cd58:	f00c fcde 	bl	19718 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    cd5c:	4d17      	ldr	r5, [pc, #92]	; (cdbc <usage_fault.constprop.0+0x88>)
    cd5e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    cd60:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    cd64:	d004      	beq.n	cd70 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    cd66:	2145      	movs	r1, #69	; 0x45
    cd68:	4818      	ldr	r0, [pc, #96]	; (cdcc <usage_fault.constprop.0+0x98>)
    cd6a:	f00c fcd5 	bl	19718 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    cd6e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    cd70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cd72:	0318      	lsls	r0, r3, #12
    cd74:	d503      	bpl.n	cd7e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    cd76:	2145      	movs	r1, #69	; 0x45
    cd78:	4815      	ldr	r0, [pc, #84]	; (cdd0 <usage_fault.constprop.0+0x9c>)
    cd7a:	f00c fccd 	bl	19718 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    cd7e:	4d0f      	ldr	r5, [pc, #60]	; (cdbc <usage_fault.constprop.0+0x88>)
    cd80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cd82:	0359      	lsls	r1, r3, #13
    cd84:	d503      	bpl.n	cd8e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    cd86:	2145      	movs	r1, #69	; 0x45
    cd88:	4812      	ldr	r0, [pc, #72]	; (cdd4 <usage_fault.constprop.0+0xa0>)
    cd8a:	f00c fcc5 	bl	19718 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    cd8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cd90:	039a      	lsls	r2, r3, #14
    cd92:	d503      	bpl.n	cd9c <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    cd94:	2145      	movs	r1, #69	; 0x45
    cd96:	4810      	ldr	r0, [pc, #64]	; (cdd8 <usage_fault.constprop.0+0xa4>)
    cd98:	f00c fcbe 	bl	19718 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    cd9c:	4d07      	ldr	r5, [pc, #28]	; (cdbc <usage_fault.constprop.0+0x88>)
    cd9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cda0:	03db      	lsls	r3, r3, #15
    cda2:	d503      	bpl.n	cdac <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    cda4:	2145      	movs	r1, #69	; 0x45
    cda6:	480d      	ldr	r0, [pc, #52]	; (cddc <usage_fault.constprop.0+0xa8>)
    cda8:	f00c fcb6 	bl	19718 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    cdac:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    cdae:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    cdb0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    cdb4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    cdb8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    cdba:	bd38      	pop	{r3, r4, r5, pc}
    cdbc:	e000ed00 	.word	0xe000ed00
    cdc0:	0001f1f2 	.word	0x0001f1f2
    cdc4:	0001f20f 	.word	0x0001f20f
    cdc8:	0001f227 	.word	0x0001f227
    cdcc:	0001f246 	.word	0x0001f246
    cdd0:	0001f275 	.word	0x0001f275
    cdd4:	0001f298 	.word	0x0001f298
    cdd8:	0001f2c2 	.word	0x0001f2c2
    cddc:	0001f2e1 	.word	0x0001f2e1

0000cde0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    cde0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    cde2:	4c23      	ldr	r4, [pc, #140]	; (ce70 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    cde4:	4606      	mov	r6, r0
    cde6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    cde8:	4822      	ldr	r0, [pc, #136]	; (ce74 <bus_fault.constprop.0+0x94>)
    cdea:	2145      	movs	r1, #69	; 0x45
    cdec:	f00c fc94 	bl	19718 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    cdf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cdf2:	04d9      	lsls	r1, r3, #19
    cdf4:	d503      	bpl.n	cdfe <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    cdf6:	2145      	movs	r1, #69	; 0x45
    cdf8:	481f      	ldr	r0, [pc, #124]	; (ce78 <bus_fault.constprop.0+0x98>)
    cdfa:	f00c fc8d 	bl	19718 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    cdfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce00:	051a      	lsls	r2, r3, #20
    ce02:	d503      	bpl.n	ce0c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    ce04:	2145      	movs	r1, #69	; 0x45
    ce06:	481d      	ldr	r0, [pc, #116]	; (ce7c <bus_fault.constprop.0+0x9c>)
    ce08:	f00c fc86 	bl	19718 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ce0c:	4c18      	ldr	r4, [pc, #96]	; (ce70 <bus_fault.constprop.0+0x90>)
    ce0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce10:	059b      	lsls	r3, r3, #22
    ce12:	d510      	bpl.n	ce36 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    ce14:	481a      	ldr	r0, [pc, #104]	; (ce80 <bus_fault.constprop.0+0xa0>)
    ce16:	2145      	movs	r1, #69	; 0x45
    ce18:	f00c fc7e 	bl	19718 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    ce1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ce1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce20:	0418      	lsls	r0, r3, #16
    ce22:	d508      	bpl.n	ce36 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ce24:	2145      	movs	r1, #69	; 0x45
    ce26:	4817      	ldr	r0, [pc, #92]	; (ce84 <bus_fault.constprop.0+0xa4>)
    ce28:	f00c fc76 	bl	19718 <printk>
			if (from_hard_fault) {
    ce2c:	b11e      	cbz	r6, ce36 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    ce2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ce34:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ce36:	4c0e      	ldr	r4, [pc, #56]	; (ce70 <bus_fault.constprop.0+0x90>)
    ce38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce3a:	0559      	lsls	r1, r3, #21
    ce3c:	d503      	bpl.n	ce46 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    ce3e:	2145      	movs	r1, #69	; 0x45
    ce40:	4811      	ldr	r0, [pc, #68]	; (ce88 <bus_fault.constprop.0+0xa8>)
    ce42:	f00c fc69 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ce46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce48:	05da      	lsls	r2, r3, #23
    ce4a:	d50b      	bpl.n	ce64 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    ce4c:	2145      	movs	r1, #69	; 0x45
    ce4e:	480f      	ldr	r0, [pc, #60]	; (ce8c <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ce50:	f00c fc62 	bl	19718 <printk>
	*recoverable = memory_fault_recoverable(esf);
    ce54:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ce56:	4a06      	ldr	r2, [pc, #24]	; (ce70 <bus_fault.constprop.0+0x90>)
    ce58:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ce5a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ce5e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ce60:	7028      	strb	r0, [r5, #0]
}
    ce62:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ce64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ce66:	049b      	lsls	r3, r3, #18
    ce68:	d5f4      	bpl.n	ce54 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ce6a:	2145      	movs	r1, #69	; 0x45
    ce6c:	4808      	ldr	r0, [pc, #32]	; (ce90 <bus_fault.constprop.0+0xb0>)
    ce6e:	e7ef      	b.n	ce50 <bus_fault.constprop.0+0x70>
    ce70:	e000ed00 	.word	0xe000ed00
    ce74:	0001f311 	.word	0x0001f311
    ce78:	0001f32c 	.word	0x0001f32c
    ce7c:	0001f342 	.word	0x0001f342
    ce80:	0001f35a 	.word	0x0001f35a
    ce84:	0001f378 	.word	0x0001f378
    ce88:	0001f392 	.word	0x0001f392
    ce8c:	0001f3b2 	.word	0x0001f3b2
    ce90:	0001f3cf 	.word	0x0001f3cf

0000ce94 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ce94:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ce96:	4c29      	ldr	r4, [pc, #164]	; (cf3c <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ce98:	4606      	mov	r6, r0
    ce9a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    ce9c:	4828      	ldr	r0, [pc, #160]	; (cf40 <mem_manage_fault.constprop.0+0xac>)
    ce9e:	2145      	movs	r1, #69	; 0x45
    cea0:	f00c fc3a 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    cea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cea6:	06d8      	lsls	r0, r3, #27
    cea8:	d503      	bpl.n	ceb2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ceaa:	2145      	movs	r1, #69	; 0x45
    ceac:	4825      	ldr	r0, [pc, #148]	; (cf44 <mem_manage_fault.constprop.0+0xb0>)
    ceae:	f00c fc33 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ceb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ceb4:	0719      	lsls	r1, r3, #28
    ceb6:	d503      	bpl.n	cec0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    ceb8:	2145      	movs	r1, #69	; 0x45
    ceba:	4823      	ldr	r0, [pc, #140]	; (cf48 <mem_manage_fault.constprop.0+0xb4>)
    cebc:	f00c fc2c 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    cec0:	4c1e      	ldr	r4, [pc, #120]	; (cf3c <mem_manage_fault.constprop.0+0xa8>)
    cec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cec4:	079a      	lsls	r2, r3, #30
    cec6:	d510      	bpl.n	ceea <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    cec8:	2145      	movs	r1, #69	; 0x45
    ceca:	4820      	ldr	r0, [pc, #128]	; (cf4c <mem_manage_fault.constprop.0+0xb8>)
    cecc:	f00c fc24 	bl	19718 <printk>
		uint32_t temp = SCB->MMFAR;
    ced0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ced2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ced4:	061b      	lsls	r3, r3, #24
    ced6:	d508      	bpl.n	ceea <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ced8:	2145      	movs	r1, #69	; 0x45
    ceda:	481d      	ldr	r0, [pc, #116]	; (cf50 <mem_manage_fault.constprop.0+0xbc>)
    cedc:	f00c fc1c 	bl	19718 <printk>
			if (from_hard_fault) {
    cee0:	b11e      	cbz	r6, ceea <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    cee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cee8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ceea:	4c14      	ldr	r4, [pc, #80]	; (cf3c <mem_manage_fault.constprop.0+0xa8>)
    ceec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ceee:	07d8      	lsls	r0, r3, #31
    cef0:	d503      	bpl.n	cefa <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    cef2:	2145      	movs	r1, #69	; 0x45
    cef4:	4817      	ldr	r0, [pc, #92]	; (cf54 <mem_manage_fault.constprop.0+0xc0>)
    cef6:	f00c fc0f 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cefa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cefc:	0699      	lsls	r1, r3, #26
    cefe:	d503      	bpl.n	cf08 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    cf00:	2145      	movs	r1, #69	; 0x45
    cf02:	4815      	ldr	r0, [pc, #84]	; (cf58 <mem_manage_fault.constprop.0+0xc4>)
    cf04:	f00c fc08 	bl	19718 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cf08:	4b0c      	ldr	r3, [pc, #48]	; (cf3c <mem_manage_fault.constprop.0+0xa8>)
    cf0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cf0c:	06d2      	lsls	r2, r2, #27
    cf0e:	d402      	bmi.n	cf16 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cf12:	079b      	lsls	r3, r3, #30
    cf14:	d50a      	bpl.n	cf2c <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    cf16:	4911      	ldr	r1, [pc, #68]	; (cf5c <mem_manage_fault.constprop.0+0xc8>)
    cf18:	4811      	ldr	r0, [pc, #68]	; (cf60 <mem_manage_fault.constprop.0+0xcc>)
    cf1a:	f240 1247 	movw	r2, #327	; 0x147
    cf1e:	f00c fbfb 	bl	19718 <printk>
    cf22:	f240 1147 	movw	r1, #327	; 0x147
    cf26:	480d      	ldr	r0, [pc, #52]	; (cf5c <mem_manage_fault.constprop.0+0xc8>)
    cf28:	f00c fe9c 	bl	19c64 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    cf2c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    cf2e:	4a03      	ldr	r2, [pc, #12]	; (cf3c <mem_manage_fault.constprop.0+0xa8>)
    cf30:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cf32:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    cf36:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    cf38:	7028      	strb	r0, [r5, #0]
}
    cf3a:	bd70      	pop	{r4, r5, r6, pc}
    cf3c:	e000ed00 	.word	0xe000ed00
    cf40:	0001f403 	.word	0x0001f403
    cf44:	0001f41e 	.word	0x0001f41e
    cf48:	0001f342 	.word	0x0001f342
    cf4c:	0001f456 	.word	0x0001f456
    cf50:	0001f473 	.word	0x0001f473
    cf54:	0001f48e 	.word	0x0001f48e
    cf58:	0001f3cf 	.word	0x0001f3cf
    cf5c:	0001f4b2 	.word	0x0001f4b2
    cf60:	0001e6bc 	.word	0x0001e6bc

0000cf64 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    cf64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    cf68:	4b51      	ldr	r3, [pc, #324]	; (d0b0 <z_arm_fault+0x14c>)
{
    cf6a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    cf6c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    cf70:	4689      	mov	r9, r1
    cf72:	4614      	mov	r4, r2
    cf74:	2600      	movs	r6, #0
    cf76:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    cf78:	f3c8 0708 	ubfx	r7, r8, #0, #9
    cf7c:	f386 8811 	msr	BASEPRI, r6
    cf80:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    cf84:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    cf88:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    cf8c:	d111      	bne.n	cfb2 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    cf8e:	07d0      	lsls	r0, r2, #31
    cf90:	d40f      	bmi.n	cfb2 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    cf92:	0651      	lsls	r1, r2, #25
    cf94:	d403      	bmi.n	cf9e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    cf96:	0722      	lsls	r2, r4, #28
    cf98:	d408      	bmi.n	cfac <z_arm_fault+0x48>
			*nested_exc = true;
    cf9a:	2601      	movs	r6, #1
    cf9c:	e008      	b.n	cfb0 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    cf9e:	2145      	movs	r1, #69	; 0x45
    cfa0:	4844      	ldr	r0, [pc, #272]	; (d0b4 <z_arm_fault+0x150>)
    cfa2:	f00c fbb9 	bl	19718 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    cfa6:	f014 0404 	ands.w	r4, r4, #4
    cfaa:	d000      	beq.n	cfae <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    cfac:	464d      	mov	r5, r9
	*nested_exc = false;
    cfae:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    cfb0:	b95d      	cbnz	r5, cfca <z_arm_fault+0x66>
    cfb2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    cfb6:	4940      	ldr	r1, [pc, #256]	; (d0b8 <z_arm_fault+0x154>)
    cfb8:	4840      	ldr	r0, [pc, #256]	; (d0bc <z_arm_fault+0x158>)
    cfba:	f00c fbad 	bl	19718 <printk>
    cfbe:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    cfc2:	483d      	ldr	r0, [pc, #244]	; (d0b8 <z_arm_fault+0x154>)
    cfc4:	f00c fe4e 	bl	19c64 <assert_post_action>
    cfc8:	2500      	movs	r5, #0
	*recoverable = false;
    cfca:	2400      	movs	r4, #0
    cfcc:	1efb      	subs	r3, r7, #3
    cfce:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    cfd2:	2b09      	cmp	r3, #9
    cfd4:	d85a      	bhi.n	d08c <z_arm_fault+0x128>
    cfd6:	e8df f003 	tbb	[pc, r3]
    cfda:	4e05      	.short	0x4e05
    cfdc:	59593252 	.word	0x59593252
    cfe0:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    cfe4:	4f32      	ldr	r7, [pc, #200]	; (d0b0 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    cfe6:	2145      	movs	r1, #69	; 0x45
    cfe8:	4835      	ldr	r0, [pc, #212]	; (d0c0 <z_arm_fault+0x15c>)
    cfea:	f00c fb95 	bl	19718 <printk>
	*recoverable = false;
    cfee:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    cff2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    cff4:	f014 0402 	ands.w	r4, r4, #2
    cff8:	d005      	beq.n	d006 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    cffa:	2145      	movs	r1, #69	; 0x45
    cffc:	4831      	ldr	r0, [pc, #196]	; (d0c4 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    cffe:	f00c fb8b 	bl	19718 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d002:	2400      	movs	r4, #0
}
    d004:	e01e      	b.n	d044 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d008:	005b      	lsls	r3, r3, #1
    d00a:	d51b      	bpl.n	d044 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    d00c:	2145      	movs	r1, #69	; 0x45
    d00e:	482e      	ldr	r0, [pc, #184]	; (d0c8 <z_arm_fault+0x164>)
    d010:	f00c fb82 	bl	19718 <printk>
		if (SCB_MMFSR != 0) {
    d014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d018:	b12b      	cbz	r3, d026 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    d01a:	2001      	movs	r0, #1
    d01c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d020:	f7ff ff38 	bl	ce94 <mem_manage_fault.constprop.0>
    d024:	e00d      	b.n	d042 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    d026:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    d02a:	b12b      	cbz	r3, d038 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    d02c:	2001      	movs	r0, #1
    d02e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d032:	f7ff fed5 	bl	cde0 <bus_fault.constprop.0>
    d036:	e004      	b.n	d042 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    d038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    d03a:	b29b      	uxth	r3, r3
    d03c:	b113      	cbz	r3, d044 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    d03e:	f7ff fe79 	bl	cd34 <usage_fault.constprop.0>
    d042:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d048:	b993      	cbnz	r3, d070 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d04a:	2220      	movs	r2, #32
    d04c:	4629      	mov	r1, r5
    d04e:	a802      	add	r0, sp, #8
    d050:	f00d fdc2 	bl	1abd8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d056:	b336      	cbz	r6, d0a6 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d058:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d05c:	b922      	cbnz	r2, d068 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d05e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d062:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d066:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d068:	4620      	mov	r0, r4
    d06a:	a902      	add	r1, sp, #8
    d06c:	f7ff fdcc 	bl	cc08 <z_arm_fatal_error>
}
    d070:	b00b      	add	sp, #44	; 0x2c
    d072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    d076:	2000      	movs	r0, #0
    d078:	f10d 0107 	add.w	r1, sp, #7
    d07c:	e7d0      	b.n	d020 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    d07e:	2000      	movs	r0, #0
    d080:	f10d 0107 	add.w	r1, sp, #7
    d084:	e7d5      	b.n	d032 <z_arm_fault+0xce>
	PR_FAULT_INFO(
    d086:	2145      	movs	r1, #69	; 0x45
    d088:	4810      	ldr	r0, [pc, #64]	; (d0cc <z_arm_fault+0x168>)
    d08a:	e7b8      	b.n	cffe <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    d08c:	4910      	ldr	r1, [pc, #64]	; (d0d0 <z_arm_fault+0x16c>)
    d08e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    d092:	4a10      	ldr	r2, [pc, #64]	; (d0d4 <z_arm_fault+0x170>)
    d094:	4810      	ldr	r0, [pc, #64]	; (d0d8 <z_arm_fault+0x174>)
    d096:	bf08      	it	eq
    d098:	460a      	moveq	r2, r1
    d09a:	f1a7 0310 	sub.w	r3, r7, #16
    d09e:	2145      	movs	r1, #69	; 0x45
    d0a0:	f00c fb3a 	bl	19718 <printk>
    d0a4:	e7ad      	b.n	d002 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d0a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d0aa:	f023 0301 	bic.w	r3, r3, #1
    d0ae:	e7da      	b.n	d066 <z_arm_fault+0x102>
    d0b0:	e000ed00 	.word	0xe000ed00
    d0b4:	0001f51a 	.word	0x0001f51a
    d0b8:	0001f4b2 	.word	0x0001f4b2
    d0bc:	0001e6bc 	.word	0x0001e6bc
    d0c0:	0001f542 	.word	0x0001f542
    d0c4:	0001f55e 	.word	0x0001f55e
    d0c8:	0001f584 	.word	0x0001f584
    d0cc:	0001f5a8 	.word	0x0001f5a8
    d0d0:	0001f4ec 	.word	0x0001f4ec
    d0d4:	0001f501 	.word	0x0001f501
    d0d8:	0001f5e3 	.word	0x0001f5e3

0000d0dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d0dc:	4b04      	ldr	r3, [pc, #16]	; (d0f0 <z_arm_fault_init+0x14>)
    d0de:	695a      	ldr	r2, [r3, #20]
    d0e0:	f042 0210 	orr.w	r2, r2, #16
    d0e4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d0e6:	695a      	ldr	r2, [r3, #20]
    d0e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d0ec:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d0ee:	4770      	bx	lr
    d0f0:	e000ed00 	.word	0xe000ed00

0000d0f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d0f4:	4b04      	ldr	r3, [pc, #16]	; (d108 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d0f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d0f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    d0fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d0fc:	d003      	beq.n	d106 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d0fe:	4903      	ldr	r1, [pc, #12]	; (d10c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d104:	600a      	str	r2, [r1, #0]

0000d106 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d106:	4770      	bx	lr
	ldr r3, =_kernel
    d108:	2000adc4 	.word	0x2000adc4
	ldr r1, =_SCS_ICSR
    d10c:	e000ed04 	.word	0xe000ed04

0000d110 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d110:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d114:	4905      	ldr	r1, [pc, #20]	; (d12c <sys_arch_reboot+0x1c>)
    d116:	4b06      	ldr	r3, [pc, #24]	; (d130 <sys_arch_reboot+0x20>)
    d118:	68ca      	ldr	r2, [r1, #12]
    d11a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d11e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d120:	60cb      	str	r3, [r1, #12]
    d122:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d126:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d128:	e7fd      	b.n	d126 <sys_arch_reboot+0x16>
    d12a:	bf00      	nop
    d12c:	e000ed00 	.word	0xe000ed00
    d130:	05fa0004 	.word	0x05fa0004

0000d134 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d134:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d136:	2120      	movs	r1, #32
    d138:	4803      	ldr	r0, [pc, #12]	; (d148 <z_arm_interrupt_init+0x14>)
    d13a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d13c:	3301      	adds	r3, #1
    d13e:	2b45      	cmp	r3, #69	; 0x45
    d140:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d144:	d1f9      	bne.n	d13a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d146:	4770      	bx	lr
    d148:	e000e100 	.word	0xe000e100

0000d14c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    d14c:	b508      	push	{r3, lr}
	if (_current == thread) {
    d14e:	4b0e      	ldr	r3, [pc, #56]	; (d188 <z_impl_k_thread_abort+0x3c>)
    d150:	689b      	ldr	r3, [r3, #8]
    d152:	4283      	cmp	r3, r0
    d154:	d107      	bne.n	d166 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d156:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d15a:	b193      	cbz	r3, d182 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d15c:	4a0b      	ldr	r2, [pc, #44]	; (d18c <z_impl_k_thread_abort+0x40>)
    d15e:	6853      	ldr	r3, [r2, #4]
    d160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d164:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    d166:	f00a fd19 	bl	17b9c <z_thread_single_abort>
	__asm__ volatile(
    d16a:	f04f 0320 	mov.w	r3, #32
    d16e:	f3ef 8011 	mrs	r0, BASEPRI
    d172:	f383 8811 	msr	BASEPRI, r3
    d176:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    d17a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    d17e:	f00f be86 	b.w	1ce8e <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    d182:	f00b fb19 	bl	187b8 <z_self_abort>
    d186:	bf00      	nop
    d188:	2000adc4 	.word	0x2000adc4
    d18c:	e000ed00 	.word	0xe000ed00

0000d190 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d192:	4c09      	ldr	r4, [pc, #36]	; (d1b8 <z_arm_configure_static_mpu_regions+0x28>)
    d194:	4a09      	ldr	r2, [pc, #36]	; (d1bc <z_arm_configure_static_mpu_regions+0x2c>)
    d196:	4623      	mov	r3, r4
    d198:	2101      	movs	r1, #1
    d19a:	4809      	ldr	r0, [pc, #36]	; (d1c0 <z_arm_configure_static_mpu_regions+0x30>)
    d19c:	f000 f976 	bl	d48c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d1a0:	2300      	movs	r3, #0
    d1a2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d1a4:	4b07      	ldr	r3, [pc, #28]	; (d1c4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d1a6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d1a8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d1aa:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d1ac:	9301      	str	r3, [sp, #4]
    d1ae:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d1b0:	f000 f988 	bl	d4c4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d1b4:	b004      	add	sp, #16
    d1b6:	bd10      	pop	{r4, pc}
    d1b8:	20070000 	.word	0x20070000
    d1bc:	20008000 	.word	0x20008000
    d1c0:	0001d9dc 	.word	0x0001d9dc
    d1c4:	200087d8 	.word	0x200087d8

0000d1c8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d1c8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d1ca:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d1cc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d1ce:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d1d2:	f004 031f 	and.w	r3, r4, #31
    d1d6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d1d8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d1da:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d1dc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d1e0:	4905      	ldr	r1, [pc, #20]	; (d1f8 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d1e2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d1e6:	f043 0301 	orr.w	r3, r3, #1
    d1ea:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    d1ee:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    d1f2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d1f6:	bd10      	pop	{r4, pc}
    d1f8:	e000ed00 	.word	0xe000ed00

0000d1fc <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    d1fc:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d1fe:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    d200:	680c      	ldr	r4, [r1, #0]
{
    d202:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    d204:	890a      	ldrh	r2, [r1, #8]
    d206:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    d208:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d20a:	3b01      	subs	r3, #1
    d20c:	f024 041f 	bic.w	r4, r4, #31
    d210:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    d212:	f002 021f 	and.w	r2, r2, #31
    d216:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d21a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d21e:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d220:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    d222:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d226:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    d228:	d909      	bls.n	d23e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d22a:	4602      	mov	r2, r0
    d22c:	2145      	movs	r1, #69	; 0x45
    d22e:	4806      	ldr	r0, [pc, #24]	; (d248 <mpu_configure_region+0x4c>)
    d230:	f00c fa72 	bl	19718 <printk>
    d234:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    d238:	4620      	mov	r0, r4
    d23a:	b005      	add	sp, #20
    d23c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    d23e:	4669      	mov	r1, sp
    d240:	f7ff ffc2 	bl	d1c8 <region_init>
	return region_allocate_and_init(index,
    d244:	e7f8      	b.n	d238 <mpu_configure_region+0x3c>
    d246:	bf00      	nop
    d248:	0001f5ff 	.word	0x0001f5ff

0000d24c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d250:	4689      	mov	r9, r1
    d252:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d254:	4606      	mov	r6, r0
    d256:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    d25a:	4d59      	ldr	r5, [pc, #356]	; (d3c0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d25c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d25e:	45c8      	cmp	r8, r9
    d260:	da27      	bge.n	d2b2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    d262:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d266:	f1ba 0f00 	cmp.w	sl, #0
    d26a:	d045      	beq.n	d2f8 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    d26c:	f1ba 0f1f 	cmp.w	sl, #31
    d270:	d918      	bls.n	d2a4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    d272:	f01a 0f1f 	tst.w	sl, #31
    d276:	d115      	bne.n	d2a4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    d278:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d27c:	f01b 0f1f 	tst.w	fp, #31
    d280:	d110      	bne.n	d2a4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d282:	4658      	mov	r0, fp
    d284:	f00d fbb1 	bl	1a9ea <arm_cmse_mpu_region_get>
    d288:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d28a:	eb0a 000b 	add.w	r0, sl, fp
    d28e:	3801      	subs	r0, #1
    d290:	f00d fbab 	bl	1a9ea <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d294:	4287      	cmp	r7, r0
    d296:	d010      	beq.n	d2ba <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    d298:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d29c:	463a      	mov	r2, r7
    d29e:	2145      	movs	r1, #69	; 0x45
    d2a0:	4848      	ldr	r0, [pc, #288]	; (d3c4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    d2a2:	e002      	b.n	d2aa <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d2a4:	4642      	mov	r2, r8
    d2a6:	2145      	movs	r1, #69	; 0x45
    d2a8:	4847      	ldr	r0, [pc, #284]	; (d3c8 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d2aa:	f00c fa35 	bl	19718 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d2ae:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d2b2:	4620      	mov	r0, r4
    d2b4:	b005      	add	sp, #20
    d2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d2ba:	f117 0f16 	cmn.w	r7, #22
    d2be:	d0ed      	beq.n	d29c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    d2c0:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d2c2:	42bb      	cmp	r3, r7
    d2c4:	dbea      	blt.n	d29c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    d2c6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d2ca:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    d2ce:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d2d2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d2d6:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d2da:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d2de:	e9d6 3200 	ldrd	r3, r2, [r6]
    d2e2:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    d2e4:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d2e6:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d2ea:	d11d      	bne.n	d328 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    d2ec:	45d3      	cmp	fp, sl
    d2ee:	d107      	bne.n	d300 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    d2f0:	4631      	mov	r1, r6
    d2f2:	b2f8      	uxtb	r0, r7
    d2f4:	f7ff ff82 	bl	d1fc <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d2f8:	f108 0801 	add.w	r8, r8, #1
    d2fc:	360c      	adds	r6, #12
    d2fe:	e7ae      	b.n	d25e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    d300:	4631      	mov	r1, r6
	MPU->RNR = index;
    d302:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d306:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    d30a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d30e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d312:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d314:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d318:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d31a:	f7ff ff6f 	bl	d1fc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d31e:	f110 0f16 	cmn.w	r0, #22
    d322:	d0c4      	beq.n	d2ae <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    d324:	1c44      	adds	r4, r0, #1
    d326:	e7e7      	b.n	d2f8 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    d328:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    d32a:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    d32c:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    d32e:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    d332:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d336:	d108      	bne.n	d34a <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d338:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d33c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d33e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d342:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d344:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d348:	e7e7      	b.n	d31a <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d34a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    d34e:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d352:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d354:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d358:	4631      	mov	r1, r6
    d35a:	f7ff ff4f 	bl	d1fc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d35e:	f110 0f16 	cmn.w	r0, #22
    d362:	d0a4      	beq.n	d2ae <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    d364:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d368:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    d36c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d370:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    d374:	f362 0304 	bfi	r3, r2, #0, #5
    d378:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d37c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d380:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d384:	085b      	lsrs	r3, r3, #1
    d386:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    d38a:	e9d6 3100 	ldrd	r3, r1, [r6]
    d38e:	440b      	add	r3, r1
    d390:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    d392:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d396:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d398:	445b      	add	r3, fp
    d39a:	eba3 030a 	sub.w	r3, r3, sl
    d39e:	b2c0      	uxtb	r0, r0
    d3a0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d3a4:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d3a6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    d3aa:	9303      	str	r3, [sp, #12]
    d3ac:	d903      	bls.n	d3b6 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d3ae:	4602      	mov	r2, r0
    d3b0:	2145      	movs	r1, #69	; 0x45
    d3b2:	4806      	ldr	r0, [pc, #24]	; (d3cc <mpu_configure_regions_and_partition.constprop.0+0x180>)
    d3b4:	e779      	b.n	d2aa <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    d3b6:	4669      	mov	r1, sp
    d3b8:	f7ff ff06 	bl	d1c8 <region_init>
    d3bc:	e7b2      	b.n	d324 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    d3be:	bf00      	nop
    d3c0:	e000ed00 	.word	0xe000ed00
    d3c4:	0001f652 	.word	0x0001f652
    d3c8:	0001f62a 	.word	0x0001f62a
    d3cc:	0001f5ff 	.word	0x0001f5ff

0000d3d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d3d0:	2205      	movs	r2, #5
    d3d2:	4b04      	ldr	r3, [pc, #16]	; (d3e4 <arm_core_mpu_enable+0x14>)
    d3d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d3d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d3dc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d3e0:	4770      	bx	lr
    d3e2:	bf00      	nop
    d3e4:	e000ed00 	.word	0xe000ed00

0000d3e8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d3e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d3ec:	2200      	movs	r2, #0
    d3ee:	4b02      	ldr	r3, [pc, #8]	; (d3f8 <arm_core_mpu_disable+0x10>)
    d3f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d3f4:	4770      	bx	lr
    d3f6:	bf00      	nop
    d3f8:	e000ed00 	.word	0xe000ed00

0000d3fc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    d3fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d3fe:	4d1d      	ldr	r5, [pc, #116]	; (d474 <arm_mpu_init+0x78>)
    d400:	682c      	ldr	r4, [r5, #0]
    d402:	2c08      	cmp	r4, #8
    d404:	d90d      	bls.n	d422 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    d406:	f240 123b 	movw	r2, #315	; 0x13b
    d40a:	491b      	ldr	r1, [pc, #108]	; (d478 <arm_mpu_init+0x7c>)
    d40c:	481b      	ldr	r0, [pc, #108]	; (d47c <arm_mpu_init+0x80>)
    d40e:	f00c f983 	bl	19718 <printk>
    d412:	4819      	ldr	r0, [pc, #100]	; (d478 <arm_mpu_init+0x7c>)
    d414:	f240 113b 	movw	r1, #315	; 0x13b
    d418:	f00c fc24 	bl	19c64 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    d41c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    d420:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d422:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d424:	f7ff ffe0 	bl	d3e8 <arm_core_mpu_disable>
	MPU->MAIR0 =
    d428:	4b15      	ldr	r3, [pc, #84]	; (d480 <arm_mpu_init+0x84>)
    d42a:	4a16      	ldr	r2, [pc, #88]	; (d484 <arm_mpu_init+0x88>)
    d42c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d430:	4284      	cmp	r4, r0
    d432:	d117      	bne.n	d464 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    d434:	4b14      	ldr	r3, [pc, #80]	; (d488 <arm_mpu_init+0x8c>)
    d436:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d438:	f7ff ffca 	bl	d3d0 <arm_core_mpu_enable>
	__ASSERT(
    d43c:	4b10      	ldr	r3, [pc, #64]	; (d480 <arm_mpu_init+0x84>)
    d43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d442:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d446:	2b08      	cmp	r3, #8
    d448:	d00a      	beq.n	d460 <arm_mpu_init+0x64>
    d44a:	490b      	ldr	r1, [pc, #44]	; (d478 <arm_mpu_init+0x7c>)
    d44c:	480b      	ldr	r0, [pc, #44]	; (d47c <arm_mpu_init+0x80>)
    d44e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    d452:	f00c f961 	bl	19718 <printk>
    d456:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d45a:	4807      	ldr	r0, [pc, #28]	; (d478 <arm_mpu_init+0x7c>)
    d45c:	f00c fc02 	bl	19c64 <assert_post_action>
	return 0;
    d460:	2000      	movs	r0, #0
    d462:	e7dd      	b.n	d420 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d464:	6869      	ldr	r1, [r5, #4]
    d466:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    d46a:	f7ff fead 	bl	d1c8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d46e:	3001      	adds	r0, #1
    d470:	e7de      	b.n	d430 <arm_mpu_init+0x34>
    d472:	bf00      	nop
    d474:	0001d9e8 	.word	0x0001d9e8
    d478:	0001f67a 	.word	0x0001f67a
    d47c:	0001e6bc 	.word	0x0001e6bc
    d480:	e000ed00 	.word	0xe000ed00
    d484:	0044ffaa 	.word	0x0044ffaa
    d488:	2000c4fe 	.word	0x2000c4fe

0000d48c <arm_core_mpu_configure_static_mpu_regions>:
{
    d48c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d48e:	4c0a      	ldr	r4, [pc, #40]	; (d4b8 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d490:	7822      	ldrb	r2, [r4, #0]
    d492:	f7ff fedb 	bl	d24c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d496:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d498:	3016      	adds	r0, #22
    d49a:	d10c      	bne.n	d4b6 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d49c:	4907      	ldr	r1, [pc, #28]	; (d4bc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d49e:	4808      	ldr	r0, [pc, #32]	; (d4c0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    d4a0:	f44f 7282 	mov.w	r2, #260	; 0x104
    d4a4:	f00c f938 	bl	19718 <printk>
}
    d4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d4ac:	f44f 7182 	mov.w	r1, #260	; 0x104
    d4b0:	4802      	ldr	r0, [pc, #8]	; (d4bc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d4b2:	f00c bbd7 	b.w	19c64 <assert_post_action>
}
    d4b6:	bd10      	pop	{r4, pc}
    d4b8:	2000c4fe 	.word	0x2000c4fe
    d4bc:	0001f67a 	.word	0x0001f67a
    d4c0:	0001e6bc 	.word	0x0001e6bc

0000d4c4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d4c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4c8:	4d30      	ldr	r5, [pc, #192]	; (d58c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    d4ca:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d4cc:	4606      	mov	r6, r0
    d4ce:	f04f 0800 	mov.w	r8, #0
    d4d2:	46ab      	mov	fp, r5
	MPU->RNR = index;
    d4d4:	4f2e      	ldr	r7, [pc, #184]	; (d590 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d4d6:	45d0      	cmp	r8, sl
    d4d8:	db02      	blt.n	d4e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    d4da:	b003      	add	sp, #12
    d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d4e0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    d4e4:	f1b9 0f00 	cmp.w	r9, #0
    d4e8:	d04a      	beq.n	d580 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d4ea:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d4ec:	4608      	mov	r0, r1
    d4ee:	9101      	str	r1, [sp, #4]
    d4f0:	f00d fa7b 	bl	1a9ea <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d4f4:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d4f6:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d4f8:	eb09 0001 	add.w	r0, r9, r1
    d4fc:	3801      	subs	r0, #1
    d4fe:	f00d fa74 	bl	1a9ea <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d502:	4284      	cmp	r4, r0
    d504:	f04f 0214 	mov.w	r2, #20
    d508:	4b22      	ldr	r3, [pc, #136]	; (d594 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    d50a:	d013      	beq.n	d534 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    d50c:	f06f 0315 	mvn.w	r3, #21
    d510:	fb02 f808 	mul.w	r8, r2, r8
    d514:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d518:	f44f 728a 	mov.w	r2, #276	; 0x114
    d51c:	491e      	ldr	r1, [pc, #120]	; (d598 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    d51e:	481f      	ldr	r0, [pc, #124]	; (d59c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d520:	f00c f8fa 	bl	19718 <printk>
    d524:	f44f 718a 	mov.w	r1, #276	; 0x114
    d528:	481b      	ldr	r0, [pc, #108]	; (d598 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    d52a:	b003      	add	sp, #12
    d52c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d530:	f00c bb98 	b.w	19c64 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d534:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d538:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d53a:	d0ed      	beq.n	d518 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d53c:	7819      	ldrb	r1, [r3, #0]
    d53e:	42a1      	cmp	r1, r4
    d540:	ddea      	ble.n	d518 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    d542:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    d546:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    d54a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d54e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    d552:	f100 0108 	add.w	r1, r0, #8
    d556:	7b00      	ldrb	r0, [r0, #12]
    d558:	f364 0004 	bfi	r0, r4, #0, #5
    d55c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d55e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    d562:	790c      	ldrb	r4, [r1, #4]
    d564:	0840      	lsrs	r0, r0, #1
    d566:	f360 1447 	bfi	r4, r0, #5, #3
    d56a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    d56c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    d570:	f021 011f 	bic.w	r1, r1, #31
    d574:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    d576:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    d57a:	f021 011f 	bic.w	r1, r1, #31
    d57e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d580:	f108 0801 	add.w	r8, r8, #1
    d584:	3514      	adds	r5, #20
    d586:	360c      	adds	r6, #12
    d588:	e7a5      	b.n	d4d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d58a:	bf00      	nop
    d58c:	2000a904 	.word	0x2000a904
    d590:	e000ed00 	.word	0xe000ed00
    d594:	2000c4fe 	.word	0x2000c4fe
    d598:	0001f67a 	.word	0x0001f67a
    d59c:	0001e6bc 	.word	0x0001e6bc

0000d5a0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    d5a0:	4b01      	ldr	r3, [pc, #4]	; (d5a8 <__stdout_hook_install+0x8>)
    d5a2:	6018      	str	r0, [r3, #0]
}
    d5a4:	4770      	bx	lr
    d5a6:	bf00      	nop
    d5a8:	2000831c 	.word	0x2000831c

0000d5ac <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    d5ac:	2000      	movs	r0, #0
    d5ae:	4b02      	ldr	r3, [pc, #8]	; (d5b8 <remoteproc_mgr_boot+0xc>)
    d5b0:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    d5b4:	4770      	bx	lr
    d5b6:	bf00      	nop
    d5b8:	40005000 	.word	0x40005000

0000d5bc <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d5bc:	4b0e      	ldr	r3, [pc, #56]	; (d5f8 <bt_hex_real+0x3c>)
    d5be:	2940      	cmp	r1, #64	; 0x40
    d5c0:	bf28      	it	cs
    d5c2:	2140      	movcs	r1, #64	; 0x40
{
    d5c4:	b570      	push	{r4, r5, r6, lr}
    d5c6:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    d5c8:	4c0c      	ldr	r4, [pc, #48]	; (d5fc <bt_hex_real+0x40>)
    d5ca:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    d5cc:	42b0      	cmp	r0, r6
    d5ce:	f103 0302 	add.w	r3, r3, #2
    d5d2:	d104      	bne.n	d5de <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d5d4:	2300      	movs	r3, #0
    d5d6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d5da:	4807      	ldr	r0, [pc, #28]	; (d5f8 <bt_hex_real+0x3c>)
    d5dc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    d5de:	7802      	ldrb	r2, [r0, #0]
    d5e0:	0912      	lsrs	r2, r2, #4
    d5e2:	5ca2      	ldrb	r2, [r4, r2]
    d5e4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
    d5ec:	f002 020f 	and.w	r2, r2, #15
    d5f0:	5ca2      	ldrb	r2, [r4, r2]
    d5f2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d5f6:	e7e9      	b.n	d5cc <bt_hex_real+0x10>
    d5f8:	2000c51d 	.word	0x2000c51d
    d5fc:	0001f6e3 	.word	0x0001f6e3

0000d600 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    d600:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    d602:	7803      	ldrb	r3, [r0, #0]
    d604:	b08b      	sub	sp, #44	; 0x2c
    d606:	4604      	mov	r4, r0
    d608:	ad07      	add	r5, sp, #28
    d60a:	2b03      	cmp	r3, #3
    d60c:	d821      	bhi.n	d652 <bt_addr_le_str_real+0x52>
    d60e:	e8df f003 	tbb	[pc, r3]
    d612:	1a02      	.short	0x1a02
    d614:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    d616:	4912      	ldr	r1, [pc, #72]	; (d660 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    d618:	4628      	mov	r0, r5
    d61a:	f00d fa83 	bl	1ab24 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d61e:	7863      	ldrb	r3, [r4, #1]
    d620:	211e      	movs	r1, #30
    d622:	9304      	str	r3, [sp, #16]
    d624:	78a3      	ldrb	r3, [r4, #2]
    d626:	4a0f      	ldr	r2, [pc, #60]	; (d664 <bt_addr_le_str_real+0x64>)
    d628:	9303      	str	r3, [sp, #12]
    d62a:	78e3      	ldrb	r3, [r4, #3]
    d62c:	9505      	str	r5, [sp, #20]
    d62e:	9302      	str	r3, [sp, #8]
    d630:	7923      	ldrb	r3, [r4, #4]
    d632:	480d      	ldr	r0, [pc, #52]	; (d668 <bt_addr_le_str_real+0x68>)
    d634:	9301      	str	r3, [sp, #4]
    d636:	7963      	ldrb	r3, [r4, #5]
    d638:	9300      	str	r3, [sp, #0]
    d63a:	79a3      	ldrb	r3, [r4, #6]
    d63c:	f00c f879 	bl	19732 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    d640:	4809      	ldr	r0, [pc, #36]	; (d668 <bt_addr_le_str_real+0x68>)
    d642:	b00b      	add	sp, #44	; 0x2c
    d644:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    d646:	4909      	ldr	r1, [pc, #36]	; (d66c <bt_addr_le_str_real+0x6c>)
    d648:	e7e6      	b.n	d618 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    d64a:	4909      	ldr	r1, [pc, #36]	; (d670 <bt_addr_le_str_real+0x70>)
    d64c:	e7e4      	b.n	d618 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    d64e:	4909      	ldr	r1, [pc, #36]	; (d674 <bt_addr_le_str_real+0x74>)
    d650:	e7e2      	b.n	d618 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d652:	210a      	movs	r1, #10
    d654:	4628      	mov	r0, r5
    d656:	4a08      	ldr	r2, [pc, #32]	; (d678 <bt_addr_le_str_real+0x78>)
    d658:	f00c f86b 	bl	19732 <snprintk>
		break;
    d65c:	e7df      	b.n	d61e <bt_addr_le_str_real+0x1e>
    d65e:	bf00      	nop
    d660:	0001e097 	.word	0x0001e097
    d664:	0001e0c0 	.word	0x0001e0c0
    d668:	2000c4ff 	.word	0x2000c4ff
    d66c:	0001e09e 	.word	0x0001e09e
    d670:	0001e0a5 	.word	0x0001e0a5
    d674:	0001e0af 	.word	0x0001e0af
    d678:	0001e0b9 	.word	0x0001e0b9

0000d67c <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    d67c:	2149      	movs	r1, #73	; 0x49
{
    d67e:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    d680:	4809      	ldr	r0, [pc, #36]	; (d6a8 <save_id+0x2c>)
    d682:	f00c f849 	bl	19718 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    d686:	4909      	ldr	r1, [pc, #36]	; (d6ac <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    d688:	4809      	ldr	r0, [pc, #36]	; (d6b0 <save_id+0x34>)
    d68a:	79ca      	ldrb	r2, [r1, #7]
    d68c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    d690:	f7fd fc84 	bl	af9c <settings_save_one>
	if (err) {
    d694:	4602      	mov	r2, r0
    d696:	b128      	cbz	r0, d6a4 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    d698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    d69c:	2145      	movs	r1, #69	; 0x45
    d69e:	4805      	ldr	r0, [pc, #20]	; (d6b4 <save_id+0x38>)
    d6a0:	f00c b83a 	b.w	19718 <printk>
}
    d6a4:	bd08      	pop	{r3, pc}
    d6a6:	bf00      	nop
    d6a8:	0001f6f4 	.word	0x0001f6f4
    d6ac:	20008000 	.word	0x20008000
    d6b0:	0001f703 	.word	0x0001f703
    d6b4:	0001f709 	.word	0x0001f709

0000d6b8 <set>:
{
    d6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d6ba:	4616      	mov	r6, r2
    d6bc:	461f      	mov	r7, r3
	if (!name) {
    d6be:	4604      	mov	r4, r0
    d6c0:	b930      	cbnz	r0, d6d0 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    d6c2:	2145      	movs	r1, #69	; 0x45
    d6c4:	4819      	ldr	r0, [pc, #100]	; (d72c <set+0x74>)
    d6c6:	f00c f827 	bl	19718 <printk>
	return -ENOENT;
    d6ca:	f06f 0401 	mvn.w	r4, #1
    d6ce:	e013      	b.n	d6f8 <set+0x40>
	len = settings_name_next(name, &next);
    d6d0:	a901      	add	r1, sp, #4
    d6d2:	f00c fb40 	bl	19d56 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    d6d6:	4916      	ldr	r1, [pc, #88]	; (d730 <set+0x78>)
	len = settings_name_next(name, &next);
    d6d8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    d6da:	4620      	mov	r0, r4
    d6dc:	f00d fa5a 	bl	1ab94 <strncmp>
    d6e0:	4604      	mov	r4, r0
    d6e2:	2800      	cmp	r0, #0
    d6e4:	d1f1      	bne.n	d6ca <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d6e6:	4d13      	ldr	r5, [pc, #76]	; (d734 <set+0x7c>)
    d6e8:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    d6ec:	075b      	lsls	r3, r3, #29
    d6ee:	d506      	bpl.n	d6fe <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    d6f0:	2157      	movs	r1, #87	; 0x57
    d6f2:	4811      	ldr	r0, [pc, #68]	; (d738 <set+0x80>)
    d6f4:	f00c f810 	bl	19718 <printk>
}
    d6f8:	4620      	mov	r0, r4
    d6fa:	b003      	add	sp, #12
    d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    d6fe:	3d94      	subs	r5, #148	; 0x94
    d700:	2207      	movs	r2, #7
    d702:	4629      	mov	r1, r5
    d704:	4638      	mov	r0, r7
    d706:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    d708:	2806      	cmp	r0, #6
    d70a:	d80a      	bhi.n	d722 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    d70c:	2145      	movs	r1, #69	; 0x45
    d70e:	480b      	ldr	r0, [pc, #44]	; (d73c <set+0x84>)
    d710:	f00c f802 	bl	19718 <printk>
			(void)memset(bt_dev.id_addr, 0,
    d714:	2207      	movs	r2, #7
    d716:	4621      	mov	r1, r4
    d718:	4628      	mov	r0, r5
    d71a:	f00d fa88 	bl	1ac2e <memset>
			bt_dev.id_count = 0U;
    d71e:	71ec      	strb	r4, [r5, #7]
    d720:	e7ea      	b.n	d6f8 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    d722:	2307      	movs	r3, #7
    d724:	fbb0 f0f3 	udiv	r0, r0, r3
    d728:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    d72a:	e7e5      	b.n	d6f8 <set+0x40>
    d72c:	0001f729 	.word	0x0001f729
    d730:	0001e0ac 	.word	0x0001e0ac
    d734:	20008094 	.word	0x20008094
    d738:	0001f74f 	.word	0x0001f74f
    d73c:	0001f778 	.word	0x0001f778

0000d740 <bt_settings_encode_key>:
{
    d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d744:	b088      	sub	sp, #32
    d746:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    d74a:	799c      	ldrb	r4, [r3, #6]
    d74c:	795d      	ldrb	r5, [r3, #5]
    d74e:	791e      	ldrb	r6, [r3, #4]
    d750:	78df      	ldrb	r7, [r3, #3]
    d752:	f893 c002 	ldrb.w	ip, [r3, #2]
    d756:	f893 e001 	ldrb.w	lr, [r3, #1]
    d75a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    d75c:	f1b8 0f00 	cmp.w	r8, #0
    d760:	d00e      	beq.n	d780 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    d762:	e9cd 3806 	strd	r3, r8, [sp, #24]
    d766:	e9cd ce04 	strd	ip, lr, [sp, #16]
    d76a:	4613      	mov	r3, r2
    d76c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d770:	e9cd 4500 	strd	r4, r5, [sp]
    d774:	4a08      	ldr	r2, [pc, #32]	; (d798 <bt_settings_encode_key+0x58>)
    d776:	f00b ffdc 	bl	19732 <snprintk>
}
    d77a:	b008      	add	sp, #32
    d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    d780:	e9cd e305 	strd	lr, r3, [sp, #20]
    d784:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    d788:	4613      	mov	r3, r2
    d78a:	e9cd 5601 	strd	r5, r6, [sp, #4]
    d78e:	4a03      	ldr	r2, [pc, #12]	; (d79c <bt_settings_encode_key+0x5c>)
    d790:	9400      	str	r4, [sp, #0]
    d792:	f00b ffce 	bl	19732 <snprintk>
}
    d796:	e7f0      	b.n	d77a <bt_settings_encode_key+0x3a>
    d798:	0001f7a2 	.word	0x0001f7a2
    d79c:	0001f7c6 	.word	0x0001f7c6

0000d7a0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d7a0:	4907      	ldr	r1, [pc, #28]	; (d7c0 <bt_settings_save_id+0x20>)
    d7a2:	e8d1 3fef 	ldaex	r3, [r1]
    d7a6:	f043 0201 	orr.w	r2, r3, #1
    d7aa:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d7ae:	2800      	cmp	r0, #0
    d7b0:	d1f7      	bne.n	d7a2 <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d7b2:	07db      	lsls	r3, r3, #31
    d7b4:	d403      	bmi.n	d7be <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    d7b6:	4803      	ldr	r0, [pc, #12]	; (d7c4 <bt_settings_save_id+0x24>)
    d7b8:	3908      	subs	r1, #8
    d7ba:	f00f bb4a 	b.w	1ce52 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    d7be:	4770      	bx	lr
    d7c0:	20008328 	.word	0x20008328
    d7c4:	2000a3a0 	.word	0x2000a3a0

0000d7c8 <commit>:

static int commit(void)
{
    d7c8:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    d7ca:	4c13      	ldr	r4, [pc, #76]	; (d818 <commit+0x50>)
    d7cc:	79e3      	ldrb	r3, [r4, #7]
    d7ce:	b96b      	cbnz	r3, d7ec <commit+0x24>
		bt_setup_public_id_addr();
    d7d0:	f001 ffc0 	bl	f754 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    d7d4:	79e3      	ldrb	r3, [r4, #7]
    d7d6:	b94b      	cbnz	r3, d7ec <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    d7d8:	f002 f84a 	bl	f870 <bt_setup_random_id_addr>
		if (err) {
    d7dc:	4604      	mov	r4, r0
    d7de:	b128      	cbz	r0, d7ec <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    d7e0:	2145      	movs	r1, #69	; 0x45
    d7e2:	480e      	ldr	r0, [pc, #56]	; (d81c <commit+0x54>)
    d7e4:	f00b ff98 	bl	19718 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    d7e8:	4620      	mov	r0, r4
    d7ea:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d7ec:	4d0c      	ldr	r5, [pc, #48]	; (d820 <commit+0x58>)
    d7ee:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d7f2:	079b      	lsls	r3, r3, #30
    d7f4:	d401      	bmi.n	d7fa <commit+0x32>
		bt_finalize_init();
    d7f6:	f001 fc95 	bl	f124 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d7fa:	e8d5 4fef 	ldaex	r4, [r5]
    d7fe:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    d802:	e8c5 3fe2 	stlex	r2, r3, [r5]
    d806:	2a00      	cmp	r2, #0
    d808:	d1f7      	bne.n	d7fa <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    d80a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    d80e:	d0eb      	beq.n	d7e8 <commit+0x20>
		bt_settings_save_id();
    d810:	f7ff ffc6 	bl	d7a0 <bt_settings_save_id>
	return 0;
    d814:	2400      	movs	r4, #0
    d816:	e7e7      	b.n	d7e8 <commit+0x20>
    d818:	20008000 	.word	0x20008000
    d81c:	0001f7e7 	.word	0x0001f7e7
    d820:	20008094 	.word	0x20008094

0000d824 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    d824:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    d826:	f7fd fc83 	bl	b130 <settings_subsys_init>
	if (err) {
    d82a:	4604      	mov	r4, r0
    d82c:	b120      	cbz	r0, d838 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    d82e:	4602      	mov	r2, r0
    d830:	2145      	movs	r1, #69	; 0x45
    d832:	4802      	ldr	r0, [pc, #8]	; (d83c <bt_settings_init+0x18>)
    d834:	f00b ff70 	bl	19718 <printk>
		return err;
	}

	return 0;
}
    d838:	4620      	mov	r0, r4
    d83a:	bd10      	pop	{r4, pc}
    d83c:	0001f810 	.word	0x0001f810

0000d840 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    d840:	4603      	mov	r3, r0
    d842:	b430      	push	{r4, r5}
	switch (src->type) {
    d844:	781a      	ldrb	r2, [r3, #0]
{
    d846:	4608      	mov	r0, r1
	switch (src->type) {
    d848:	2a01      	cmp	r2, #1
    d84a:	d013      	beq.n	d874 <uuid_to_uuid128+0x34>
    d84c:	2a02      	cmp	r2, #2
    d84e:	d026      	beq.n	d89e <uuid_to_uuid128+0x5e>
    d850:	b972      	cbnz	r2, d870 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    d852:	4a15      	ldr	r2, [pc, #84]	; (d8a8 <uuid_to_uuid128+0x68>)
    d854:	f102 0410 	add.w	r4, r2, #16
    d858:	f852 5b04 	ldr.w	r5, [r2], #4
    d85c:	42a2      	cmp	r2, r4
    d85e:	f841 5b04 	str.w	r5, [r1], #4
    d862:	d1f9      	bne.n	d858 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    d864:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    d866:	7812      	ldrb	r2, [r2, #0]
    d868:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    d86a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    d86c:	0a1b      	lsrs	r3, r3, #8
    d86e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    d870:	bc30      	pop	{r4, r5}
    d872:	4770      	bx	lr
		*dst = uuid128_base;
    d874:	4a0c      	ldr	r2, [pc, #48]	; (d8a8 <uuid_to_uuid128+0x68>)
    d876:	f102 0410 	add.w	r4, r2, #16
    d87a:	f852 5b04 	ldr.w	r5, [r2], #4
    d87e:	42a2      	cmp	r2, r4
    d880:	f841 5b04 	str.w	r5, [r1], #4
    d884:	d1f9      	bne.n	d87a <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    d886:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    d888:	7812      	ldrb	r2, [r2, #0]
    d88a:	700a      	strb	r2, [r1, #0]
    d88c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    d890:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    d892:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d894:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    d896:	0a1b      	lsrs	r3, r3, #8
    d898:	7382      	strb	r2, [r0, #14]
    d89a:	7403      	strb	r3, [r0, #16]
}
    d89c:	e7e8      	b.n	d870 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    d89e:	2211      	movs	r2, #17
}
    d8a0:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    d8a2:	4619      	mov	r1, r3
    d8a4:	f00d b998 	b.w	1abd8 <memcpy>
    d8a8:	0001f849 	.word	0x0001f849

0000d8ac <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    d8ac:	2801      	cmp	r0, #1
{
    d8ae:	b570      	push	{r4, r5, r6, lr}
    d8b0:	4605      	mov	r5, r0
    d8b2:	4616      	mov	r6, r2
    d8b4:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    d8b6:	d010      	beq.n	d8da <bt_buf_get_rx+0x2e>
    d8b8:	2803      	cmp	r0, #3
    d8ba:	d00a      	beq.n	d8d2 <bt_buf_get_rx+0x26>
    d8bc:	2805      	cmp	r0, #5
    d8be:	d008      	beq.n	d8d2 <bt_buf_get_rx+0x26>
    d8c0:	490c      	ldr	r1, [pc, #48]	; (d8f4 <bt_buf_get_rx+0x48>)
    d8c2:	480d      	ldr	r0, [pc, #52]	; (d8f8 <bt_buf_get_rx+0x4c>)
    d8c4:	2233      	movs	r2, #51	; 0x33
    d8c6:	f00b ff27 	bl	19718 <printk>
    d8ca:	2133      	movs	r1, #51	; 0x33
    d8cc:	4809      	ldr	r0, [pc, #36]	; (d8f4 <bt_buf_get_rx+0x48>)
    d8ce:	f00c f9c9 	bl	19c64 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    d8d2:	4632      	mov	r2, r6
    d8d4:	4623      	mov	r3, r4
    d8d6:	4809      	ldr	r0, [pc, #36]	; (d8fc <bt_buf_get_rx+0x50>)
    d8d8:	e000      	b.n	d8dc <bt_buf_get_rx+0x30>
    d8da:	4809      	ldr	r0, [pc, #36]	; (d900 <bt_buf_get_rx+0x54>)
    d8dc:	f00e fc50 	bl	1c180 <net_buf_alloc_fixed>
    d8e0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    d8e2:	b12c      	cbz	r4, d8f0 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    d8e4:	2101      	movs	r1, #1
    d8e6:	f104 0008 	add.w	r0, r4, #8
    d8ea:	f006 fe65 	bl	145b8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    d8ee:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    d8f0:	4620      	mov	r0, r4
    d8f2:	bd70      	pop	{r4, r5, r6, pc}
    d8f4:	0001f85a 	.word	0x0001f85a
    d8f8:	0001e6bc 	.word	0x0001e6bc
    d8fc:	200086a4 	.word	0x200086a4
    d900:	20008780 	.word	0x20008780

0000d904 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    d904:	4602      	mov	r2, r0
    d906:	460b      	mov	r3, r1
    d908:	b570      	push	{r4, r5, r6, lr}
    d90a:	f04f 0120 	mov.w	r1, #32
    d90e:	f3ef 8511 	mrs	r5, BASEPRI
    d912:	f381 8811 	msr	BASEPRI, r1
    d916:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    d91a:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    d91c:	490b      	ldr	r1, [pc, #44]	; (d94c <bt_buf_get_cmd_complete+0x48>)
    d91e:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    d922:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    d926:	f385 8811 	msr	BASEPRI, r5
    d92a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    d92e:	b924      	cbnz	r4, d93a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    d930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d934:	2001      	movs	r0, #1
    d936:	f7ff bfb9 	b.w	d8ac <bt_buf_get_rx>
    d93a:	2101      	movs	r1, #1
		buf->len = 0U;
    d93c:	81a0      	strh	r0, [r4, #12]
    d93e:	7521      	strb	r1, [r4, #20]
    d940:	f104 0008 	add.w	r0, r4, #8
    d944:	f006 fe38 	bl	145b8 <net_buf_simple_reserve>
}
    d948:	4620      	mov	r0, r4
    d94a:	bd70      	pop	{r4, r5, r6, pc}
    d94c:	20008000 	.word	0x20008000

0000d950 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    d950:	b570      	push	{r4, r5, r6, lr}
    d952:	4604      	mov	r4, r0
	switch (evt) {
    d954:	2c0f      	cmp	r4, #15
{
    d956:	460d      	mov	r5, r1
    d958:	4610      	mov	r0, r2
    d95a:	4619      	mov	r1, r3
	switch (evt) {
    d95c:	d805      	bhi.n	d96a <bt_buf_get_evt+0x1a>
    d95e:	2c0d      	cmp	r4, #13
    d960:	d912      	bls.n	d988 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    d962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    d966:	f7ff bfcd 	b.w	d904 <bt_buf_get_cmd_complete>
	switch (evt) {
    d96a:	2c13      	cmp	r4, #19
    d96c:	d10c      	bne.n	d988 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    d96e:	480b      	ldr	r0, [pc, #44]	; (d99c <bt_buf_get_evt+0x4c>)
    d970:	f00e fc06 	bl	1c180 <net_buf_alloc_fixed>
			if (buf) {
    d974:	4604      	mov	r4, r0
    d976:	b128      	cbz	r0, d984 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    d978:	2101      	movs	r1, #1
    d97a:	3008      	adds	r0, #8
    d97c:	f006 fe1c 	bl	145b8 <net_buf_simple_reserve>
    d980:	2301      	movs	r3, #1
    d982:	7523      	strb	r3, [r4, #20]
}
    d984:	4620      	mov	r0, r4
    d986:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    d988:	4602      	mov	r2, r0
    d98a:	460b      	mov	r3, r1
		if (discardable) {
    d98c:	b10d      	cbz	r5, d992 <bt_buf_get_evt+0x42>
    d98e:	4804      	ldr	r0, [pc, #16]	; (d9a0 <bt_buf_get_evt+0x50>)
    d990:	e7ee      	b.n	d970 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d992:	2001      	movs	r0, #1
}
    d994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d998:	f7ff bf88 	b.w	d8ac <bt_buf_get_rx>
    d99c:	200087ac 	.word	0x200087ac
    d9a0:	200086fc 	.word	0x200086fc

0000d9a4 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    d9a4:	6883      	ldr	r3, [r0, #8]
    d9a6:	2157      	movs	r1, #87	; 0x57
    d9a8:	781a      	ldrb	r2, [r3, #0]
    d9aa:	4801      	ldr	r0, [pc, #4]	; (d9b0 <hci_data_buf_overflow+0xc>)
    d9ac:	f00b beb4 	b.w	19718 <printk>
    d9b0:	0001f890 	.word	0x0001f890

0000d9b4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    d9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9b6:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    d9b8:	2500      	movs	r5, #0
    d9ba:	4f09      	ldr	r7, [pc, #36]	; (d9e0 <id_find+0x2c>)
    d9bc:	79fb      	ldrb	r3, [r7, #7]
    d9be:	b2ec      	uxtb	r4, r5
    d9c0:	42a3      	cmp	r3, r4
    d9c2:	d802      	bhi.n	d9ca <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    d9c4:	f06f 0401 	mvn.w	r4, #1
    d9c8:	e008      	b.n	d9dc <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    d9ca:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    d9ce:	4630      	mov	r0, r6
    d9d0:	4439      	add	r1, r7
    d9d2:	f00d f9ff 	bl	1add4 <bt_addr_le_cmp>
    d9d6:	3501      	adds	r5, #1
    d9d8:	2800      	cmp	r0, #0
    d9da:	d1ef      	bne.n	d9bc <id_find+0x8>
}
    d9dc:	4620      	mov	r0, r4
    d9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9e0:	20008000 	.word	0x20008000

0000d9e4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    d9e4:	6843      	ldr	r3, [r0, #4]
{
    d9e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d9e8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    d9ea:	0558      	lsls	r0, r3, #21
    d9ec:	d502      	bpl.n	d9f4 <valid_adv_param+0x10>
		return false;
    d9ee:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    d9f0:	b003      	add	sp, #12
    d9f2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    d9f4:	6922      	ldr	r2, [r4, #16]
    d9f6:	b10a      	cbz	r2, d9fc <valid_adv_param+0x18>
    d9f8:	07d9      	lsls	r1, r3, #31
    d9fa:	d5f8      	bpl.n	d9ee <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    d9fc:	4d1a      	ldr	r5, [pc, #104]	; (da68 <valid_adv_param+0x84>)
    d9fe:	7820      	ldrb	r0, [r4, #0]
    da00:	79eb      	ldrb	r3, [r5, #7]
    da02:	4283      	cmp	r3, r0
    da04:	d9f3      	bls.n	d9ee <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    da06:	2300      	movs	r3, #0
    da08:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    da0c:	4669      	mov	r1, sp
    da0e:	4428      	add	r0, r5
    da10:	9300      	str	r3, [sp, #0]
    da12:	f8cd 3003 	str.w	r3, [sp, #3]
    da16:	f00d f9dd 	bl	1add4 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    da1a:	2800      	cmp	r0, #0
    da1c:	d0e7      	beq.n	d9ee <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    da1e:	6860      	ldr	r0, [r4, #4]
    da20:	07c2      	lsls	r2, r0, #31
    da22:	d406      	bmi.n	da32 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    da24:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    da28:	2b08      	cmp	r3, #8
    da2a:	d802      	bhi.n	da32 <valid_adv_param+0x4e>
    da2c:	68a3      	ldr	r3, [r4, #8]
    da2e:	2b9f      	cmp	r3, #159	; 0x9f
    da30:	d9dd      	bls.n	d9ee <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    da32:	f010 0f30 	tst.w	r0, #48	; 0x30
    da36:	d002      	beq.n	da3e <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    da38:	6923      	ldr	r3, [r4, #16]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d0d7      	beq.n	d9ee <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    da3e:	06c3      	lsls	r3, r0, #27
    da40:	d401      	bmi.n	da46 <valid_adv_param+0x62>
    da42:	6923      	ldr	r3, [r4, #16]
    da44:	b943      	cbnz	r3, da58 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    da46:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    da4a:	429a      	cmp	r2, r3
    da4c:	d8cf      	bhi.n	d9ee <valid_adv_param+0xa>
    da4e:	2a1f      	cmp	r2, #31
    da50:	d9cd      	bls.n	d9ee <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    da52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    da56:	d8ca      	bhi.n	d9ee <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    da58:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    da5c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    da60:	bf18      	it	ne
    da62:	2001      	movne	r0, #1
    da64:	e7c4      	b.n	d9f0 <valid_adv_param+0xc>
    da66:	bf00      	nop
    da68:	20008000 	.word	0x20008000

0000da6c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    da6c:	6883      	ldr	r3, [r0, #8]
{
    da6e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    da70:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    da72:	4620      	mov	r0, r4
    da74:	f002 fd98 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    da78:	b930      	cbnz	r0, da88 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    da7a:	4622      	mov	r2, r4
}
    da7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    da80:	2145      	movs	r1, #69	; 0x45
    da82:	4803      	ldr	r0, [pc, #12]	; (da90 <le_data_len_change+0x24>)
    da84:	f00b be48 	b.w	19718 <printk>
}
    da88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    da8c:	f002 bd68 	b.w	10560 <bt_conn_unref>
    da90:	0001f8bd 	.word	0x0001f8bd

0000da94 <hci_disconn_complete_prio>:
{
    da94:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    da96:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    da98:	781a      	ldrb	r2, [r3, #0]
    da9a:	b9aa      	cbnz	r2, dac8 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    da9c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    daa0:	4628      	mov	r0, r5
    daa2:	f002 fd81 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    daa6:	4604      	mov	r4, r0
    daa8:	b930      	cbnz	r0, dab8 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    daaa:	462a      	mov	r2, r5
}
    daac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    dab0:	2145      	movs	r1, #69	; 0x45
    dab2:	4806      	ldr	r0, [pc, #24]	; (dacc <hci_disconn_complete_prio+0x38>)
    dab4:	f00b be30 	b.w	19718 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    dab8:	2101      	movs	r1, #1
    daba:	f002 fd7d 	bl	105b8 <bt_conn_set_state>
	bt_conn_unref(conn);
    dabe:	4620      	mov	r0, r4
}
    dac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    dac4:	f002 bd4c 	b.w	10560 <bt_conn_unref>
}
    dac8:	bd38      	pop	{r3, r4, r5, pc}
    daca:	bf00      	nop
    dacc:	0001f8e6 	.word	0x0001f8e6

0000dad0 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    dad0:	2101      	movs	r1, #1
{
    dad2:	b508      	push	{r3, lr}
    dad4:	3008      	adds	r0, #8
    dad6:	f006 feb9 	bl	1484c <net_buf_simple_pull_mem>
}
    dada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    dade:	7802      	ldrb	r2, [r0, #0]
    dae0:	2145      	movs	r1, #69	; 0x45
    dae2:	4801      	ldr	r0, [pc, #4]	; (dae8 <hci_hardware_error+0x18>)
    dae4:	f00b be18 	b.w	19718 <printk>
    dae8:	0001f911 	.word	0x0001f911

0000daec <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    daec:	8981      	ldrh	r1, [r0, #12]
{
    daee:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    daf0:	6880      	ldr	r0, [r0, #8]
    daf2:	f7ff fd63 	bl	d5bc <bt_hex_real>
}
    daf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    dafa:	4602      	mov	r2, r0
    dafc:	2157      	movs	r1, #87	; 0x57
    dafe:	4801      	ldr	r0, [pc, #4]	; (db04 <hci_vendor_event+0x18>)
    db00:	f00b be0a 	b.w	19718 <printk>
    db04:	0001f938 	.word	0x0001f938

0000db08 <le_conn_update_complete>:
{
    db08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    db0a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    db0c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    db10:	4630      	mov	r0, r6
    db12:	f002 fd49 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    db16:	4604      	mov	r4, r0
    db18:	b938      	cbnz	r0, db2a <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    db1a:	4632      	mov	r2, r6
    db1c:	2145      	movs	r1, #69	; 0x45
    db1e:	4821      	ldr	r0, [pc, #132]	; (dba4 <le_conn_update_complete+0x9c>)
}
    db20:	b002      	add	sp, #8
    db22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    db26:	f00b bdf7 	b.w	19718 <printk>
	if (!evt->status) {
    db2a:	782b      	ldrb	r3, [r5, #0]
    db2c:	b9cb      	cbnz	r3, db62 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    db2e:	792a      	ldrb	r2, [r5, #4]
    db30:	78eb      	ldrb	r3, [r5, #3]
    db32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    db36:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    db3a:	79aa      	ldrb	r2, [r5, #6]
    db3c:	796b      	ldrb	r3, [r5, #5]
    db3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    db42:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    db46:	79eb      	ldrb	r3, [r5, #7]
    db48:	7a2a      	ldrb	r2, [r5, #8]
    db4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    db4e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    db52:	f002 fb47 	bl	101e4 <notify_le_param_updated>
	bt_conn_unref(conn);
    db56:	4620      	mov	r0, r4
}
    db58:	b002      	add	sp, #8
    db5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    db5e:	f002 bcff 	b.w	10560 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    db62:	2b1a      	cmp	r3, #26
    db64:	d1f7      	bne.n	db56 <le_conn_update_complete+0x4e>
    db66:	78c3      	ldrb	r3, [r0, #3]
    db68:	2b01      	cmp	r3, #1
    db6a:	d1f4      	bne.n	db56 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    db6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    db70:	3004      	adds	r0, #4
    db72:	f00d f924 	bl	1adbe <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    db76:	0543      	lsls	r3, r0, #21
    db78:	d4ed      	bmi.n	db56 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    db7a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    db7e:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    db80:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    db84:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    db88:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    db8a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    db8e:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    db92:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    db96:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    db9a:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    db9e:	f003 fb09 	bl	111b4 <bt_l2cap_update_conn_param>
    dba2:	e7d8      	b.n	db56 <le_conn_update_complete+0x4e>
    dba4:	0001f8bd 	.word	0x0001f8bd

0000dba8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    dba8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    dbaa:	4c0c      	ldr	r4, [pc, #48]	; (dbdc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    dbac:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    dbae:	2205      	movs	r2, #5
    dbb0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    dbb4:	f002 fe36 	bl	10824 <bt_conn_lookup_state_le>
		if (!conn) {
    dbb8:	b970      	cbnz	r0, dbd8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    dbba:	4b09      	ldr	r3, [pc, #36]	; (dbe0 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    dbbc:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    dbbe:	6818      	ldr	r0, [r3, #0]
    dbc0:	889a      	ldrh	r2, [r3, #4]
    dbc2:	799b      	ldrb	r3, [r3, #6]
    dbc4:	9000      	str	r0, [sp, #0]
    dbc6:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    dbca:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    dbce:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    dbd0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    dbd4:	f002 fe26 	bl	10824 <bt_conn_lookup_state_le>
}
    dbd8:	b002      	add	sp, #8
    dbda:	bd10      	pop	{r4, pc}
    dbdc:	20008000 	.word	0x20008000
    dbe0:	0001d640 	.word	0x0001d640

0000dbe4 <handle_event>:
{
    dbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dbe6:	4605      	mov	r5, r0
    dbe8:	4614      	mov	r4, r2
    dbea:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    dbec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    dbf0:	7822      	ldrb	r2, [r4, #0]
    dbf2:	42aa      	cmp	r2, r5
    dbf4:	d010      	beq.n	dc18 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    dbf6:	3408      	adds	r4, #8
    dbf8:	429c      	cmp	r4, r3
    dbfa:	d1f9      	bne.n	dbf0 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    dbfc:	8984      	ldrh	r4, [r0, #12]
    dbfe:	6880      	ldr	r0, [r0, #8]
    dc00:	4621      	mov	r1, r4
    dc02:	f7ff fcdb 	bl	d5bc <bt_hex_real>
    dc06:	4623      	mov	r3, r4
    dc08:	9000      	str	r0, [sp, #0]
    dc0a:	462a      	mov	r2, r5
    dc0c:	2157      	movs	r1, #87	; 0x57
    dc0e:	480b      	ldr	r0, [pc, #44]	; (dc3c <handle_event+0x58>)
    dc10:	f00b fd82 	bl	19718 <printk>
}
    dc14:	b003      	add	sp, #12
    dc16:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    dc18:	8982      	ldrh	r2, [r0, #12]
    dc1a:	7863      	ldrb	r3, [r4, #1]
    dc1c:	4293      	cmp	r3, r2
    dc1e:	d907      	bls.n	dc30 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    dc20:	462b      	mov	r3, r5
    dc22:	2145      	movs	r1, #69	; 0x45
    dc24:	4806      	ldr	r0, [pc, #24]	; (dc40 <handle_event+0x5c>)
}
    dc26:	b003      	add	sp, #12
    dc28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    dc2c:	f00b bd74 	b.w	19718 <printk>
		handler->handler(buf);
    dc30:	6863      	ldr	r3, [r4, #4]
}
    dc32:	b003      	add	sp, #12
    dc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    dc38:	4718      	bx	r3
    dc3a:	bf00      	nop
    dc3c:	0001f988 	.word	0x0001f988
    dc40:	0001f961 	.word	0x0001f961

0000dc44 <hci_le_meta_event>:
{
    dc44:	b510      	push	{r4, lr}
    dc46:	2101      	movs	r1, #1
    dc48:	4604      	mov	r4, r0
    dc4a:	3008      	adds	r0, #8
    dc4c:	f006 fdfe 	bl	1484c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    dc50:	4621      	mov	r1, r4
}
    dc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    dc56:	2308      	movs	r3, #8
    dc58:	4a01      	ldr	r2, [pc, #4]	; (dc60 <hci_le_meta_event+0x1c>)
    dc5a:	7800      	ldrb	r0, [r0, #0]
    dc5c:	f7ff bfc2 	b.w	dbe4 <handle_event>
    dc60:	0001da50 	.word	0x0001da50

0000dc64 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    dc64:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    dc66:	4d18      	ldr	r5, [pc, #96]	; (dcc8 <id_create.constprop.0+0x64>)
    dc68:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    dc6c:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    dc6e:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    dc70:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    dc72:	b1b1      	cbz	r1, dca2 <id_create.constprop.0+0x3e>
    dc74:	2300      	movs	r3, #0
    dc76:	4620      	mov	r0, r4
    dc78:	a902      	add	r1, sp, #8
    dc7a:	9302      	str	r3, [sp, #8]
    dc7c:	f8cd 300b 	str.w	r3, [sp, #11]
    dc80:	f00d f8a8 	bl	1add4 <bt_addr_le_cmp>
    dc84:	b168      	cbz	r0, dca2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    dc86:	4621      	mov	r1, r4
    dc88:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    dc8a:	f00d f895 	bl	1adb8 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    dc8e:	480f      	ldr	r0, [pc, #60]	; (dccc <id_create.constprop.0+0x68>)
    dc90:	f00d f88f 	bl	1adb2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    dc94:	0783      	lsls	r3, r0, #30
    dc96:	d515      	bpl.n	dcc4 <id_create.constprop.0+0x60>
}
    dc98:	b005      	add	sp, #20
    dc9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    dc9e:	f7ff bd7f 	b.w	d7a0 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    dca2:	4668      	mov	r0, sp
    dca4:	f00d f856 	bl	1ad54 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    dca8:	4668      	mov	r0, sp
    dcaa:	f7ff fe83 	bl	d9b4 <id_find>
    dcae:	2800      	cmp	r0, #0
    dcb0:	daf7      	bge.n	dca2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    dcb2:	4669      	mov	r1, sp
    dcb4:	4628      	mov	r0, r5
    dcb6:	f00d f87f 	bl	1adb8 <bt_addr_le_copy>
		if (addr) {
    dcba:	2c00      	cmp	r4, #0
    dcbc:	d0e7      	beq.n	dc8e <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    dcbe:	4629      	mov	r1, r5
    dcc0:	4620      	mov	r0, r4
    dcc2:	e7e2      	b.n	dc8a <id_create.constprop.0+0x26>
}
    dcc4:	b005      	add	sp, #20
    dcc6:	bd30      	pop	{r4, r5, pc}
    dcc8:	20008000 	.word	0x20008000
    dccc:	20008094 	.word	0x20008094

0000dcd0 <hci_rx_thread>:
{
    dcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    dcd4:	4f40      	ldr	r7, [pc, #256]	; (ddd8 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    dcd6:	f8df 8104 	ldr.w	r8, [pc, #260]	; dddc <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    dcda:	4e41      	ldr	r6, [pc, #260]	; (dde0 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    dcdc:	f04f 32ff 	mov.w	r2, #4294967295
    dce0:	f04f 33ff 	mov.w	r3, #4294967295
    dce4:	4638      	mov	r0, r7
    dce6:	f006 fc37 	bl	14558 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    dcea:	7d02      	ldrb	r2, [r0, #20]
    dcec:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    dcee:	2a01      	cmp	r2, #1
    dcf0:	d041      	beq.n	dd76 <hci_rx_thread+0xa6>
    dcf2:	2a03      	cmp	r2, #3
    dcf4:	d16c      	bne.n	ddd0 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    dcf6:	8983      	ldrh	r3, [r0, #12]
    dcf8:	2b03      	cmp	r3, #3
    dcfa:	d80b      	bhi.n	dd14 <hci_rx_thread+0x44>
    dcfc:	f240 42ac 	movw	r2, #1196	; 0x4ac
    dd00:	4631      	mov	r1, r6
    dd02:	4838      	ldr	r0, [pc, #224]	; (dde4 <hci_rx_thread+0x114>)
    dd04:	f00b fd08 	bl	19718 <printk>
    dd08:	4040      	eors	r0, r0
    dd0a:	f380 8811 	msr	BASEPRI, r0
    dd0e:	f04f 0003 	mov.w	r0, #3
    dd12:	df02      	svc	2
    dd14:	2104      	movs	r1, #4
    dd16:	f104 0008 	add.w	r0, r4, #8
    dd1a:	f006 fd97 	bl	1484c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    dd1e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    dd20:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    dd22:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    dd26:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    dd28:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    dd2a:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    dd2e:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    dd30:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    dd32:	d007      	beq.n	dd44 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    dd34:	2145      	movs	r1, #69	; 0x45
    dd36:	482c      	ldr	r0, [pc, #176]	; (dde8 <hci_rx_thread+0x118>)
    dd38:	f00b fcee 	bl	19718 <printk>
			net_buf_unref(buf);
    dd3c:	4620      	mov	r0, r4
    dd3e:	f006 fc8d 	bl	1465c <net_buf_unref>
			break;
    dd42:	e015      	b.n	dd70 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    dd44:	f002 fc30 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    dd48:	4605      	mov	r5, r0
    dd4a:	b928      	cbnz	r0, dd58 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    dd4c:	2145      	movs	r1, #69	; 0x45
    dd4e:	8ae2      	ldrh	r2, [r4, #22]
    dd50:	4826      	ldr	r0, [pc, #152]	; (ddec <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    dd52:	f00b fce1 	bl	19718 <printk>
    dd56:	e7f1      	b.n	dd3c <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    dd58:	f003 f85a 	bl	10e10 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    dd5c:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    dd5e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    dd60:	ea4f 3219 	mov.w	r2, r9, lsr #12
    dd64:	4628      	mov	r0, r5
    dd66:	f002 fad5 	bl	10314 <bt_conn_recv>
	bt_conn_unref(conn);
    dd6a:	4628      	mov	r0, r5
    dd6c:	f002 fbf8 	bl	10560 <bt_conn_unref>
	z_impl_k_yield();
    dd70:	f00a f9d0 	bl	18114 <z_impl_k_yield>
	while (1) {
    dd74:	e7b2      	b.n	dcdc <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    dd76:	8983      	ldrh	r3, [r0, #12]
    dd78:	2b01      	cmp	r3, #1
    dd7a:	d80b      	bhi.n	dd94 <hci_rx_thread+0xc4>
    dd7c:	f241 32fb 	movw	r2, #5115	; 0x13fb
    dd80:	4631      	mov	r1, r6
    dd82:	4818      	ldr	r0, [pc, #96]	; (dde4 <hci_rx_thread+0x114>)
    dd84:	f00b fcc8 	bl	19718 <printk>
    dd88:	4040      	eors	r0, r0
    dd8a:	f380 8811 	msr	BASEPRI, r0
    dd8e:	f04f 0003 	mov.w	r0, #3
    dd92:	df02      	svc	2
    dd94:	2102      	movs	r1, #2
    dd96:	f104 0008 	add.w	r0, r4, #8
    dd9a:	f006 fd57 	bl	1484c <net_buf_simple_pull_mem>
    dd9e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    dda0:	7800      	ldrb	r0, [r0, #0]
    dda2:	f00c ffe5 	bl	1ad70 <bt_hci_evt_get_flags>
    dda6:	0783      	lsls	r3, r0, #30
    dda8:	d40b      	bmi.n	ddc2 <hci_rx_thread+0xf2>
    ddaa:	f241 32ff 	movw	r2, #5119	; 0x13ff
    ddae:	4631      	mov	r1, r6
    ddb0:	480c      	ldr	r0, [pc, #48]	; (dde4 <hci_rx_thread+0x114>)
    ddb2:	f00b fcb1 	bl	19718 <printk>
    ddb6:	4040      	eors	r0, r0
    ddb8:	f380 8811 	msr	BASEPRI, r0
    ddbc:	f04f 0003 	mov.w	r0, #3
    ddc0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ddc2:	2304      	movs	r3, #4
    ddc4:	4642      	mov	r2, r8
    ddc6:	4621      	mov	r1, r4
    ddc8:	7828      	ldrb	r0, [r5, #0]
    ddca:	f7ff ff0b 	bl	dbe4 <handle_event>
	net_buf_unref(buf);
    ddce:	e7b5      	b.n	dd3c <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ddd0:	2145      	movs	r1, #69	; 0x45
    ddd2:	4807      	ldr	r0, [pc, #28]	; (ddf0 <hci_rx_thread+0x120>)
    ddd4:	e7bd      	b.n	dd52 <hci_rx_thread+0x82>
    ddd6:	bf00      	nop
    ddd8:	200080fc 	.word	0x200080fc
    dddc:	0001daa0 	.word	0x0001daa0
    dde0:	0001f9af 	.word	0x0001f9af
    dde4:	0001e6bc 	.word	0x0001e6bc
    dde8:	0001f9e3 	.word	0x0001f9e3
    ddec:	0001fa0c 	.word	0x0001fa0c
    ddf0:	0001fa33 	.word	0x0001fa33

0000ddf4 <hci_cmd_done>:
{
    ddf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ddf8:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ddfa:	7990      	ldrb	r0, [r2, #6]
{
    ddfc:	460f      	mov	r7, r1
    ddfe:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    de00:	f006 faac 	bl	1435c <net_buf_pool_get>
    de04:	4d2a      	ldr	r5, [pc, #168]	; (deb0 <hci_cmd_done+0xbc>)
    de06:	4285      	cmp	r5, r0
    de08:	d00e      	beq.n	de28 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    de0a:	79a4      	ldrb	r4, [r4, #6]
    de0c:	4620      	mov	r0, r4
    de0e:	f006 faa5 	bl	1435c <net_buf_pool_get>
    de12:	4623      	mov	r3, r4
    de14:	e9cd 0500 	strd	r0, r5, [sp]
    de18:	4632      	mov	r2, r6
    de1a:	2157      	movs	r1, #87	; 0x57
    de1c:	4825      	ldr	r0, [pc, #148]	; (deb4 <hci_cmd_done+0xc0>)
    de1e:	f00b fc7b 	bl	19718 <printk>
}
    de22:	b002      	add	sp, #8
    de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    de28:	4620      	mov	r0, r4
    de2a:	f006 fa9f 	bl	1436c <net_buf_id>
    de2e:	f04f 080c 	mov.w	r8, #12
    de32:	4d21      	ldr	r5, [pc, #132]	; (deb8 <hci_cmd_done+0xc4>)
    de34:	fb08 5000 	mla	r0, r8, r0, r5
    de38:	8843      	ldrh	r3, [r0, #2]
    de3a:	42b3      	cmp	r3, r6
    de3c:	d00a      	beq.n	de54 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    de3e:	4620      	mov	r0, r4
    de40:	f006 fa94 	bl	1436c <net_buf_id>
    de44:	fb08 5000 	mla	r0, r8, r0, r5
    de48:	4632      	mov	r2, r6
    de4a:	8843      	ldrh	r3, [r0, #2]
    de4c:	2157      	movs	r1, #87	; 0x57
    de4e:	481b      	ldr	r0, [pc, #108]	; (debc <hci_cmd_done+0xc8>)
    de50:	f00b fc62 	bl	19718 <printk>
	if (cmd(buf)->state && !status) {
    de54:	4620      	mov	r0, r4
    de56:	f006 fa89 	bl	1436c <net_buf_id>
    de5a:	260c      	movs	r6, #12
    de5c:	fb06 5000 	mla	r0, r6, r0, r5
    de60:	6843      	ldr	r3, [r0, #4]
    de62:	b15b      	cbz	r3, de7c <hci_cmd_done+0x88>
    de64:	b957      	cbnz	r7, de7c <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    de66:	4620      	mov	r0, r4
    de68:	f006 fa80 	bl	1436c <net_buf_id>
    de6c:	fb06 5000 	mla	r0, r6, r0, r5
    de70:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    de72:	7a1a      	ldrb	r2, [r3, #8]
    de74:	e9d3 0100 	ldrd	r0, r1, [r3]
    de78:	f00c ffba 	bl	1adf0 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    de7c:	4620      	mov	r0, r4
    de7e:	f006 fa75 	bl	1436c <net_buf_id>
    de82:	260c      	movs	r6, #12
    de84:	fb06 5000 	mla	r0, r6, r0, r5
    de88:	6883      	ldr	r3, [r0, #8]
    de8a:	2b00      	cmp	r3, #0
    de8c:	d0c9      	beq.n	de22 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    de8e:	4620      	mov	r0, r4
    de90:	f006 fa6c 	bl	1436c <net_buf_id>
    de94:	4370      	muls	r0, r6
    de96:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    de98:	4620      	mov	r0, r4
    de9a:	f006 fa67 	bl	1436c <net_buf_id>
    de9e:	fb06 5500 	mla	r5, r6, r0, r5
    dea2:	68a8      	ldr	r0, [r5, #8]
}
    dea4:	b002      	add	sp, #8
    dea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    deaa:	f00a ba75 	b.w	18398 <z_impl_k_sem_give>
    deae:	bf00      	nop
    deb0:	20008754 	.word	0x20008754
    deb4:	0001fa4c 	.word	0x0001fa4c
    deb8:	2000a918 	.word	0x2000a918
    debc:	0001fa86 	.word	0x0001fa86

0000dec0 <hci_cmd_status>:
{
    dec0:	b538      	push	{r3, r4, r5, lr}
    dec2:	2104      	movs	r1, #4
    dec4:	4604      	mov	r4, r0
    dec6:	3008      	adds	r0, #8
    dec8:	f006 fcc0 	bl	1484c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    decc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    dece:	7801      	ldrb	r1, [r0, #0]
    ded0:	4622      	mov	r2, r4
    ded2:	8840      	ldrh	r0, [r0, #2]
    ded4:	f7ff ff8e 	bl	ddf4 <hci_cmd_done>
	if (ncmd) {
    ded8:	b125      	cbz	r5, dee4 <hci_cmd_status+0x24>
}
    deda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dede:	4802      	ldr	r0, [pc, #8]	; (dee8 <hci_cmd_status+0x28>)
    dee0:	f00a ba5a 	b.w	18398 <z_impl_k_sem_give>
    dee4:	bd38      	pop	{r3, r4, r5, pc}
    dee6:	bf00      	nop
    dee8:	200080e0 	.word	0x200080e0

0000deec <hci_cmd_complete>:
{
    deec:	b538      	push	{r3, r4, r5, lr}
    deee:	2103      	movs	r1, #3
    def0:	4604      	mov	r4, r0
    def2:	3008      	adds	r0, #8
    def4:	f006 fcaa 	bl	1484c <net_buf_simple_pull_mem>
	status = buf->data[0];
    def8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    defa:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    defc:	4622      	mov	r2, r4
    defe:	7819      	ldrb	r1, [r3, #0]
    df00:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    df04:	f7ff ff76 	bl	ddf4 <hci_cmd_done>
	if (ncmd) {
    df08:	b125      	cbz	r5, df14 <hci_cmd_complete+0x28>
}
    df0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    df0e:	4802      	ldr	r0, [pc, #8]	; (df18 <hci_cmd_complete+0x2c>)
    df10:	f00a ba42 	b.w	18398 <z_impl_k_sem_give>
    df14:	bd38      	pop	{r3, r4, r5, pc}
    df16:	bf00      	nop
    df18:	200080e0 	.word	0x200080e0

0000df1c <hci_num_completed_packets>:
{
    df1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    df20:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    df22:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    df24:	6887      	ldr	r7, [r0, #8]
    df26:	f8df 90dc 	ldr.w	r9, [pc, #220]	; e004 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    df2a:	783b      	ldrb	r3, [r7, #0]
    df2c:	429d      	cmp	r5, r3
    df2e:	db01      	blt.n	df34 <hci_num_completed_packets+0x18>
}
    df30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    df34:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    df38:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    df3c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    df40:	4650      	mov	r0, sl
    df42:	f002 fb31 	bl	105a8 <bt_conn_lookup_handle>
		if (!conn) {
    df46:	4604      	mov	r4, r0
    df48:	b1d0      	cbz	r0, df80 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    df4a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    df4e:	b37e      	cbz	r6, dfb0 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    df50:	f04f 0320 	mov.w	r3, #32
    df54:	f3ef 8211 	mrs	r2, BASEPRI
    df58:	f383 8811 	msr	BASEPRI, r3
    df5c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    df60:	69e3      	ldr	r3, [r4, #28]
    df62:	b1a3      	cbz	r3, df8e <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    df64:	3b01      	subs	r3, #1
    df66:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    df68:	f382 8811 	msr	BASEPRI, r2
    df6c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    df70:	4620      	mov	r0, r4
    df72:	f002 f933 	bl	101dc <bt_conn_get_pkts>
    df76:	3e01      	subs	r6, #1
    df78:	f00a fa0e 	bl	18398 <z_impl_k_sem_give>
    df7c:	b2b6      	uxth	r6, r6
    df7e:	e7e6      	b.n	df4e <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    df80:	4652      	mov	r2, sl
    df82:	2145      	movs	r1, #69	; 0x45
    df84:	4820      	ldr	r0, [pc, #128]	; (e008 <hci_num_completed_packets+0xec>)
    df86:	f00b fbc7 	bl	19718 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    df8a:	3501      	adds	r5, #1
    df8c:	e7cd      	b.n	df2a <hci_num_completed_packets+0xe>
	return list->head;
    df8e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    df90:	b12b      	cbz	r3, df9e <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    df92:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    df94:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    df96:	428b      	cmp	r3, r1
	list->head = node;
    df98:	6160      	str	r0, [r4, #20]
	list->tail = node;
    df9a:	bf08      	it	eq
    df9c:	61a0      	streq	r0, [r4, #24]
    df9e:	f382 8811 	msr	BASEPRI, r2
    dfa2:	f3bf 8f6f 	isb	sy
			if (!node) {
    dfa6:	b93b      	cbnz	r3, dfb8 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    dfa8:	2145      	movs	r1, #69	; 0x45
    dfaa:	4818      	ldr	r0, [pc, #96]	; (e00c <hci_num_completed_packets+0xf0>)
    dfac:	f00b fbb4 	bl	19718 <printk>
		bt_conn_unref(conn);
    dfb0:	4620      	mov	r0, r4
    dfb2:	f002 fad5 	bl	10560 <bt_conn_unref>
    dfb6:	e7e8      	b.n	df8a <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    dfb8:	f04f 0220 	mov.w	r2, #32
    dfbc:	f3ef 8111 	mrs	r1, BASEPRI
    dfc0:	f382 8811 	msr	BASEPRI, r2
    dfc4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    dfc8:	68da      	ldr	r2, [r3, #12]
    dfca:	61e2      	str	r2, [r4, #28]
	return list->tail;
    dfcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    dfce:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    dfd2:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    dfd6:	b98a      	cbnz	r2, dffc <hci_num_completed_packets+0xe0>
	list->head = node;
    dfd8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    dfdc:	f381 8811 	msr	BASEPRI, r1
    dfe0:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dfe4:	2101      	movs	r1, #1
    dfe6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    dfea:	f00c fee8 	bl	1adbe <atomic_or>
    dfee:	07c3      	lsls	r3, r0, #31
    dff0:	d4be      	bmi.n	df70 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    dff2:	4651      	mov	r1, sl
    dff4:	4648      	mov	r0, r9
    dff6:	f00e ff2c 	bl	1ce52 <k_queue_append>
    dffa:	e7b9      	b.n	df70 <hci_num_completed_packets+0x54>
	parent->next = child;
    dffc:	6013      	str	r3, [r2, #0]
	list->tail = node;
    dffe:	6263      	str	r3, [r4, #36]	; 0x24
}
    e000:	e7ec      	b.n	dfdc <hci_num_completed_packets+0xc0>
    e002:	bf00      	nop
    e004:	2000a3a0 	.word	0x2000a3a0
    e008:	0001fabe 	.word	0x0001fabe
    e00c:	0001fadf 	.word	0x0001fadf

0000e010 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e010:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    e012:	7803      	ldrb	r3, [r0, #0]
{
    e014:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    e016:	f88d 3004 	strb.w	r3, [sp, #4]
    e01a:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    e01c:	4c24      	ldr	r4, [pc, #144]	; (e0b0 <le_adv_start_add_conn+0xa0>)
{
    e01e:	4605      	mov	r5, r0
    e020:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    e022:	f104 0018 	add.w	r0, r4, #24
    e026:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    e028:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    e02c:	f00c fef1 	bl	1ae12 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    e030:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e034:	bb93      	cbnz	r3, e09c <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    e036:	462e      	mov	r6, r5
    e038:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e03c:	a902      	add	r1, sp, #8
    e03e:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    e040:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e044:	9302      	str	r3, [sp, #8]
    e046:	f8cd 300b 	str.w	r3, [sp, #11]
    e04a:	f00c fec3 	bl	1add4 <bt_addr_le_cmp>
    e04e:	782a      	ldrb	r2, [r5, #0]
    e050:	4604      	mov	r4, r0
    e052:	b9a8      	cbnz	r0, e080 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e054:	4b17      	ldr	r3, [pc, #92]	; (e0b4 <le_adv_start_add_conn+0xa4>)
    e056:	6818      	ldr	r0, [r3, #0]
    e058:	8899      	ldrh	r1, [r3, #4]
    e05a:	799b      	ldrb	r3, [r3, #6]
    e05c:	9004      	str	r0, [sp, #16]
    e05e:	f8ad 1014 	strh.w	r1, [sp, #20]
    e062:	4610      	mov	r0, r2
    e064:	a904      	add	r1, sp, #16
    e066:	f88d 3016 	strb.w	r3, [sp, #22]
    e06a:	f002 fa4d 	bl	10508 <bt_conn_add_le>
		if (!conn) {
    e06e:	4605      	mov	r5, r0
    e070:	b1d0      	cbz	r0, e0a8 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    e072:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e074:	f002 faa0 	bl	105b8 <bt_conn_set_state>
	*out_conn = conn;
    e078:	603d      	str	r5, [r7, #0]
	return 0;
}
    e07a:	4620      	mov	r0, r4
    e07c:	b007      	add	sp, #28
    e07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e080:	4631      	mov	r1, r6
    e082:	4610      	mov	r0, r2
    e084:	f002 fbb2 	bl	107ec <bt_conn_exists_le>
    e088:	4604      	mov	r4, r0
    e08a:	b950      	cbnz	r0, e0a2 <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e08c:	7828      	ldrb	r0, [r5, #0]
    e08e:	4631      	mov	r1, r6
    e090:	f002 fa3a 	bl	10508 <bt_conn_add_le>
	if (!conn) {
    e094:	4605      	mov	r5, r0
    e096:	b138      	cbz	r0, e0a8 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e098:	2105      	movs	r1, #5
    e09a:	e7eb      	b.n	e074 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    e09c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e0a0:	e7eb      	b.n	e07a <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    e0a2:	f06f 0415 	mvn.w	r4, #21
    e0a6:	e7e8      	b.n	e07a <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    e0a8:	f06f 040b 	mvn.w	r4, #11
    e0ac:	e7e5      	b.n	e07a <le_adv_start_add_conn+0x6a>
    e0ae:	bf00      	nop
    e0b0:	20008000 	.word	0x20008000
    e0b4:	0001d640 	.word	0x0001d640

0000e0b8 <bt_hci_cmd_create>:
{
    e0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e0bc:	f04f 32ff 	mov.w	r2, #4294967295
    e0c0:	4606      	mov	r6, r0
    e0c2:	f04f 33ff 	mov.w	r3, #4294967295
    e0c6:	481d      	ldr	r0, [pc, #116]	; (e13c <bt_hci_cmd_create+0x84>)
    e0c8:	460f      	mov	r7, r1
    e0ca:	f00e f859 	bl	1c180 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e0ce:	4604      	mov	r4, r0
    e0d0:	b950      	cbnz	r0, e0e8 <bt_hci_cmd_create+0x30>
    e0d2:	491b      	ldr	r1, [pc, #108]	; (e140 <bt_hci_cmd_create+0x88>)
    e0d4:	481b      	ldr	r0, [pc, #108]	; (e144 <bt_hci_cmd_create+0x8c>)
    e0d6:	f44f 7281 	mov.w	r2, #258	; 0x102
    e0da:	f00b fb1d 	bl	19718 <printk>
    e0de:	f44f 7181 	mov.w	r1, #258	; 0x102
    e0e2:	4817      	ldr	r0, [pc, #92]	; (e140 <bt_hci_cmd_create+0x88>)
    e0e4:	f00b fdbe 	bl	19c64 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e0e8:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e0ec:	f104 0a08 	add.w	sl, r4, #8
    e0f0:	2101      	movs	r1, #1
    e0f2:	4650      	mov	r0, sl
    e0f4:	f006 fa60 	bl	145b8 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e0f8:	4620      	mov	r0, r4
    e0fa:	f884 8014 	strb.w	r8, [r4, #20]
    e0fe:	f006 f935 	bl	1436c <net_buf_id>
    e102:	f04f 090c 	mov.w	r9, #12
    e106:	4d10      	ldr	r5, [pc, #64]	; (e148 <bt_hci_cmd_create+0x90>)
    e108:	fb09 5000 	mla	r0, r9, r0, r5
    e10c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e10e:	4620      	mov	r0, r4
    e110:	f006 f92c 	bl	1436c <net_buf_id>
    e114:	fb09 5000 	mla	r0, r9, r0, r5
    e118:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e11c:	4620      	mov	r0, r4
    e11e:	f006 f925 	bl	1436c <net_buf_id>
    e122:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e126:	2103      	movs	r1, #3
    e128:	4650      	mov	r0, sl
    e12a:	f8c5 8004 	str.w	r8, [r5, #4]
    e12e:	f006 fbab 	bl	14888 <net_buf_simple_add>
	hdr->param_len = param_len;
    e132:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    e134:	8006      	strh	r6, [r0, #0]
}
    e136:	4620      	mov	r0, r4
    e138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e13c:	20008754 	.word	0x20008754
    e140:	0001f9af 	.word	0x0001f9af
    e144:	0001e6bc 	.word	0x0001e6bc
    e148:	2000a918 	.word	0x2000a918

0000e14c <bt_hci_cmd_send_sync>:
{
    e14c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e14e:	4607      	mov	r7, r0
    e150:	4615      	mov	r5, r2
	if (!buf) {
    e152:	460c      	mov	r4, r1
{
    e154:	b087      	sub	sp, #28
	if (!buf) {
    e156:	b921      	cbnz	r1, e162 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    e158:	f7ff ffae 	bl	e0b8 <bt_hci_cmd_create>
		if (!buf) {
    e15c:	4604      	mov	r4, r0
    e15e:	2800      	cmp	r0, #0
    e160:	d048      	beq.n	e1f4 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e162:	2201      	movs	r2, #1
    e164:	2100      	movs	r1, #0
    e166:	4668      	mov	r0, sp
    e168:	f00e fecb 	bl	1cf02 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e16c:	4620      	mov	r0, r4
    e16e:	f006 f8fd 	bl	1436c <net_buf_id>
    e172:	230c      	movs	r3, #12
    e174:	4e21      	ldr	r6, [pc, #132]	; (e1fc <bt_hci_cmd_send_sync+0xb0>)
    e176:	fb03 6000 	mla	r0, r3, r0, r6
    e17a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    e17e:	4620      	mov	r0, r4
    e180:	f006 fab0 	bl	146e4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    e184:	4621      	mov	r1, r4
    e186:	481e      	ldr	r0, [pc, #120]	; (e200 <bt_hci_cmd_send_sync+0xb4>)
    e188:	f006 fa3a 	bl	14600 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e18c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e190:	2300      	movs	r3, #0
    e192:	4668      	mov	r0, sp
    e194:	f00a f93c 	bl	18410 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e198:	b158      	cbz	r0, e1b2 <bt_hci_cmd_send_sync+0x66>
    e19a:	f240 124d 	movw	r2, #333	; 0x14d
    e19e:	4919      	ldr	r1, [pc, #100]	; (e204 <bt_hci_cmd_send_sync+0xb8>)
    e1a0:	4819      	ldr	r0, [pc, #100]	; (e208 <bt_hci_cmd_send_sync+0xbc>)
    e1a2:	f00b fab9 	bl	19718 <printk>
    e1a6:	4040      	eors	r0, r0
    e1a8:	f380 8811 	msr	BASEPRI, r0
    e1ac:	f04f 0003 	mov.w	r0, #3
    e1b0:	df02      	svc	2
	status = cmd(buf)->status;
    e1b2:	4620      	mov	r0, r4
    e1b4:	f006 f8da 	bl	1436c <net_buf_id>
    e1b8:	230c      	movs	r3, #12
    e1ba:	4358      	muls	r0, r3
    e1bc:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    e1be:	b186      	cbz	r6, e1e2 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e1c0:	4633      	mov	r3, r6
    e1c2:	463a      	mov	r2, r7
    e1c4:	2157      	movs	r1, #87	; 0x57
    e1c6:	4811      	ldr	r0, [pc, #68]	; (e20c <bt_hci_cmd_send_sync+0xc0>)
    e1c8:	f00b faa6 	bl	19718 <printk>
		net_buf_unref(buf);
    e1cc:	4620      	mov	r0, r4
    e1ce:	f006 fa45 	bl	1465c <net_buf_unref>
			return -EIO;
    e1d2:	2e09      	cmp	r6, #9
    e1d4:	bf0c      	ite	eq
    e1d6:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    e1da:	f06f 0004 	mvnne.w	r0, #4
}
    e1de:	b007      	add	sp, #28
    e1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    e1e2:	b115      	cbz	r5, e1ea <bt_hci_cmd_send_sync+0x9e>
	return 0;
    e1e4:	4630      	mov	r0, r6
		*rsp = buf;
    e1e6:	602c      	str	r4, [r5, #0]
    e1e8:	e7f9      	b.n	e1de <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    e1ea:	4620      	mov	r0, r4
    e1ec:	f006 fa36 	bl	1465c <net_buf_unref>
	return 0;
    e1f0:	4628      	mov	r0, r5
    e1f2:	e7f4      	b.n	e1de <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    e1f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e1f8:	e7f1      	b.n	e1de <bt_hci_cmd_send_sync+0x92>
    e1fa:	bf00      	nop
    e1fc:	2000a918 	.word	0x2000a918
    e200:	20008118 	.word	0x20008118
    e204:	0001f9af 	.word	0x0001f9af
    e208:	0001e6bc 	.word	0x0001e6bc
    e20c:	0001fafb 	.word	0x0001fafb

0000e210 <hci_le_read_max_data_len>:
{
    e210:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e212:	4606      	mov	r6, r0
    e214:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e216:	f242 002f 	movw	r0, #8239	; 0x202f
    e21a:	2100      	movs	r1, #0
    e21c:	aa01      	add	r2, sp, #4
    e21e:	f7ff ff95 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    e222:	4604      	mov	r4, r0
    e224:	b130      	cbz	r0, e234 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    e226:	2145      	movs	r1, #69	; 0x45
    e228:	4808      	ldr	r0, [pc, #32]	; (e24c <hci_le_read_max_data_len+0x3c>)
    e22a:	f00b fa75 	bl	19718 <printk>
}
    e22e:	4620      	mov	r0, r4
    e230:	b002      	add	sp, #8
    e232:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e234:	9801      	ldr	r0, [sp, #4]
    e236:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e238:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e23c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e23e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e242:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e244:	f006 fa0a 	bl	1465c <net_buf_unref>
	return 0;
    e248:	e7f1      	b.n	e22e <hci_le_read_max_data_len+0x1e>
    e24a:	bf00      	nop
    e24c:	0001fb1c 	.word	0x0001fb1c

0000e250 <set_random_address>:
{
    e250:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    e252:	4e15      	ldr	r6, [pc, #84]	; (e2a8 <set_random_address+0x58>)
    e254:	2206      	movs	r2, #6
    e256:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    e25a:	4605      	mov	r5, r0
    e25c:	f00c fcab 	bl	1abb6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e260:	4604      	mov	r4, r0
    e262:	b1e0      	cbz	r0, e29e <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e264:	2106      	movs	r1, #6
    e266:	f242 0005 	movw	r0, #8197	; 0x2005
    e26a:	f7ff ff25 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    e26e:	4604      	mov	r4, r0
    e270:	b1b8      	cbz	r0, e2a2 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e272:	2206      	movs	r2, #6
    e274:	4629      	mov	r1, r5
    e276:	3008      	adds	r0, #8
    e278:	f00d ffb0 	bl	1c1dc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e27c:	4621      	mov	r1, r4
    e27e:	2200      	movs	r2, #0
    e280:	f242 0005 	movw	r0, #8197	; 0x2005
    e284:	f7ff ff62 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    e288:	4604      	mov	r4, r0
    e28a:	b940      	cbnz	r0, e29e <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    e28c:	2206      	movs	r2, #6
    e28e:	4629      	mov	r1, r5
    e290:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    e294:	f00c fca0 	bl	1abd8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e298:	2301      	movs	r3, #1
    e29a:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    e29e:	4620      	mov	r0, r4
    e2a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e2a2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e2a6:	e7fa      	b.n	e29e <set_random_address+0x4e>
    e2a8:	20008000 	.word	0x20008000

0000e2ac <set_le_scan_enable_legacy>:
{
    e2ac:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e2ae:	2102      	movs	r1, #2
{
    e2b0:	4604      	mov	r4, r0
    e2b2:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e2b4:	f242 000c 	movw	r0, #8204	; 0x200c
    e2b8:	f7ff fefe 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    e2bc:	4605      	mov	r5, r0
    e2be:	b348      	cbz	r0, e314 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    e2c0:	2102      	movs	r1, #2
    e2c2:	3008      	adds	r0, #8
    e2c4:	f006 fae0 	bl	14888 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    e2c8:	2c01      	cmp	r4, #1
    e2ca:	4603      	mov	r3, r0
    e2cc:	d11f      	bne.n	e30e <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e2ce:	4813      	ldr	r0, [pc, #76]	; (e31c <set_le_scan_enable_legacy+0x70>)
    e2d0:	f00c fd6f 	bl	1adb2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e2d4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e2d8:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    e2da:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    e2dc:	4b0f      	ldr	r3, [pc, #60]	; (e31c <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    e2de:	4628      	mov	r0, r5
    e2e0:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e2e2:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    e2e4:	f004 0401 	and.w	r4, r4, #1
    e2e8:	9302      	str	r3, [sp, #8]
    e2ea:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    e2ee:	f006 f83d 	bl	1436c <net_buf_id>
    e2f2:	220c      	movs	r2, #12
    e2f4:	4b0a      	ldr	r3, [pc, #40]	; (e320 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e2f6:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    e2f8:	fb02 3300 	mla	r3, r2, r0, r3
    e2fc:	aa01      	add	r2, sp, #4
    e2fe:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e300:	f242 000c 	movw	r0, #8204	; 0x200c
    e304:	2200      	movs	r2, #0
    e306:	f7ff ff21 	bl	e14c <bt_hci_cmd_send_sync>
}
    e30a:	b005      	add	sp, #20
    e30c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    e30e:	2200      	movs	r2, #0
    e310:	7042      	strb	r2, [r0, #1]
    e312:	e7e2      	b.n	e2da <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    e314:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e318:	e7f7      	b.n	e30a <set_le_scan_enable_legacy+0x5e>
    e31a:	bf00      	nop
    e31c:	20008094 	.word	0x20008094
    e320:	2000a918 	.word	0x2000a918

0000e324 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e324:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e328:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e32a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e32e:	460e      	mov	r6, r1
    e330:	4691      	mov	r9, r2
    e332:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e334:	d02c      	beq.n	e390 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e336:	f8df 80e0 	ldr.w	r8, [pc, #224]	; e418 <le_adv_set_random_addr.isra.0+0xf4>
    e33a:	b12a      	cbz	r2, e348 <le_adv_set_random_addr.isra.0+0x24>
    e33c:	068c      	lsls	r4, r1, #26
    e33e:	d503      	bpl.n	e348 <le_adv_set_random_addr.isra.0+0x24>
    e340:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    e344:	0658      	lsls	r0, r3, #25
    e346:	d563      	bpl.n	e410 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e348:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e34c:	f818 3003 	ldrb.w	r3, [r8, r3]
    e350:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    e354:	2b01      	cmp	r3, #1
    e356:	d009      	beq.n	e36c <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    e358:	ebaa 0505 	sub.w	r5, sl, r5
    e35c:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e360:	f1b9 0f00 	cmp.w	r9, #0
    e364:	d10f      	bne.n	e386 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    e366:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e368:	703b      	strb	r3, [r7, #0]
    e36a:	e008      	b.n	e37e <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    e36c:	2007      	movs	r0, #7
    e36e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e372:	4440      	add	r0, r8
    e374:	f7ff ff6c 	bl	e250 <set_random_address>
				if (err) {
    e378:	4604      	mov	r4, r0
    e37a:	2800      	cmp	r0, #0
    e37c:	d0ec      	beq.n	e358 <le_adv_set_random_addr.isra.0+0x34>
}
    e37e:	4620      	mov	r0, r4
    e380:	b002      	add	sp, #8
    e382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e386:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e388:	bf48      	it	mi
    e38a:	f043 0302 	orrmi.w	r3, r3, #2
    e38e:	e7ea      	b.n	e366 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e390:	f011 0604 	ands.w	r6, r1, #4
    e394:	d014      	beq.n	e3c0 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e396:	f8df 8080 	ldr.w	r8, [pc, #128]	; e418 <le_adv_set_random_addr.isra.0+0xf4>
    e39a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e39e:	f818 3003 	ldrb.w	r3, [r8, r3]
    e3a2:	00ee      	lsls	r6, r5, #3
    e3a4:	2b01      	cmp	r3, #1
    e3a6:	d105      	bne.n	e3b4 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    e3a8:	2007      	movs	r0, #7
    e3aa:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e3ae:	4440      	add	r0, r8
    e3b0:	f7ff ff4e 	bl	e250 <set_random_address>
			*own_addr_type = id_addr->type;
    e3b4:	1b75      	subs	r5, r6, r5
    e3b6:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    e3ba:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    e3bc:	703b      	strb	r3, [r7, #0]
    e3be:	e7de      	b.n	e37e <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e3c0:	4816      	ldr	r0, [pc, #88]	; (e41c <le_adv_set_random_addr.isra.0+0xf8>)
    e3c2:	f00c fcf6 	bl	1adb2 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e3c6:	0682      	lsls	r2, r0, #26
    e3c8:	d417      	bmi.n	e3fa <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    e3ca:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    e3cc:	2106      	movs	r1, #6
    e3ce:	4668      	mov	r0, sp
    e3d0:	f001 fe2a 	bl	10028 <bt_rand>
	if (err) {
    e3d4:	4604      	mov	r4, r0
    e3d6:	b948      	cbnz	r0, e3ec <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    e3d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    e3dc:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    e3de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e3e2:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    e3e6:	f7ff ff33 	bl	e250 <set_random_address>
    e3ea:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e3ec:	2001      	movs	r0, #1
    e3ee:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    e3f0:	2d00      	cmp	r5, #0
    e3f2:	d0c4      	beq.n	e37e <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    e3f4:	f7ff ff5a 	bl	e2ac <set_le_scan_enable_legacy>
		if (err) {
    e3f8:	e7c1      	b.n	e37e <le_adv_set_random_addr.isra.0+0x5a>
    e3fa:	4808      	ldr	r0, [pc, #32]	; (e41c <le_adv_set_random_addr.isra.0+0xf8>)
    e3fc:	f00c fcd9 	bl	1adb2 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    e400:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e402:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    e406:	d5e0      	bpl.n	e3ca <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    e408:	4630      	mov	r0, r6
    e40a:	f7ff ff4f 	bl	e2ac <set_le_scan_enable_legacy>
    e40e:	e7dd      	b.n	e3cc <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    e410:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e414:	e7b3      	b.n	e37e <le_adv_set_random_addr.isra.0+0x5a>
    e416:	bf00      	nop
    e418:	20008000 	.word	0x20008000
    e41c:	20008094 	.word	0x20008094

0000e420 <hci_set_ad>:
{
    e420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e424:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e426:	2120      	movs	r1, #32
{
    e428:	4682      	mov	sl, r0
    e42a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e42c:	f7ff fe44 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    e430:	4606      	mov	r6, r0
    e432:	2800      	cmp	r0, #0
    e434:	d056      	beq.n	e4e4 <hci_set_ad+0xc4>
    e436:	2120      	movs	r1, #32
    e438:	3008      	adds	r0, #8
    e43a:	f006 fa25 	bl	14888 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    e43e:	2220      	movs	r2, #32
    e440:	4681      	mov	r9, r0
    e442:	2100      	movs	r1, #0
    e444:	f00c fbf3 	bl	1ac2e <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e448:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    e44c:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e44e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e452:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    e454:	2300      	movs	r3, #0
    e456:	f8d4 8000 	ldr.w	r8, [r4]
    e45a:	6862      	ldr	r2, [r4, #4]
    e45c:	4293      	cmp	r3, r2
    e45e:	d30d      	bcc.n	e47c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    e460:	9b00      	ldr	r3, [sp, #0]
    e462:	3408      	adds	r4, #8
    e464:	429c      	cmp	r4, r3
    e466:	d1f5      	bne.n	e454 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e468:	2200      	movs	r2, #0
    e46a:	4631      	mov	r1, r6
    e46c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    e46e:	f889 5000 	strb.w	r5, [r9]
}
    e472:	b003      	add	sp, #12
    e474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e478:	f7ff be68 	b.w	e14c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e47c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e480:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    e482:	1881      	adds	r1, r0, r2
    e484:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    e486:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e48a:	d914      	bls.n	e4b6 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e48c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e490:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e494:	d101      	bne.n	e49a <hci_set_ad+0x7a>
    e496:	2a00      	cmp	r2, #0
    e498:	dc0b      	bgt.n	e4b2 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    e49a:	2145      	movs	r1, #69	; 0x45
    e49c:	4813      	ldr	r0, [pc, #76]	; (e4ec <hci_set_ad+0xcc>)
    e49e:	f00b f93b 	bl	19718 <printk>
		net_buf_unref(buf);
    e4a2:	4630      	mov	r0, r6
    e4a4:	f006 f8da 	bl	1465c <net_buf_unref>
					return -EINVAL;
    e4a8:	f06f 0015 	mvn.w	r0, #21
}
    e4ac:	b003      	add	sp, #12
    e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e4b2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    e4b6:	b2d7      	uxtb	r7, r2
    e4b8:	1c79      	adds	r1, r7, #1
    e4ba:	f80b 1005 	strb.w	r1, [fp, r5]
    e4be:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    e4c0:	b2c9      	uxtb	r1, r1
    e4c2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    e4c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e4ca:	fa5b f080 	uxtab	r0, fp, r0
    e4ce:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    e4d0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    e4d2:	f00c fb81 	bl	1abd8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    e4d6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    e4d8:	443d      	add	r5, r7
    e4da:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    e4dc:	3301      	adds	r3, #1
    e4de:	f108 0808 	add.w	r8, r8, #8
    e4e2:	e7ba      	b.n	e45a <hci_set_ad+0x3a>
		return -ENOBUFS;
    e4e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e4e8:	e7e0      	b.n	e4ac <hci_set_ad+0x8c>
    e4ea:	bf00      	nop
    e4ec:	0001fb41 	.word	0x0001fb41

0000e4f0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4f4:	b087      	sub	sp, #28
    e4f6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    e4fa:	4606      	mov	r6, r0
    e4fc:	460c      	mov	r4, r1
    e4fe:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    e500:	2100      	movs	r1, #0
    e502:	2210      	movs	r2, #16
    e504:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    e506:	461d      	mov	r5, r3
    e508:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    e50c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    e510:	f00c fb8d 	bl	1ac2e <memset>
	if (use_name) {
    e514:	f1b8 0f00 	cmp.w	r8, #0
    e518:	d00e      	beq.n	e538 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    e51a:	bbb4      	cbnz	r4, e58a <le_adv_update.constprop.0+0x9a>
    e51c:	2d00      	cmp	r5, #0
    e51e:	d13f      	bne.n	e5a0 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    e520:	f8df b0b0 	ldr.w	fp, [pc, #176]	; e5d4 <le_adv_update.constprop.0+0xe4>
    e524:	4658      	mov	r0, fp
    e526:	f00c fb19 	bl	1ab5c <strlen>
    e52a:	2309      	movs	r3, #9
    e52c:	f88d 0001 	strb.w	r0, [sp, #1]
    e530:	f88d 3000 	strb.w	r3, [sp]
    e534:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    e538:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    e53c:	f1b8 0f00 	cmp.w	r8, #0
    e540:	d030      	beq.n	e5a4 <le_adv_update.constprop.0+0xb4>
    e542:	f1ba 0f00 	cmp.w	sl, #0
    e546:	d12d      	bne.n	e5a4 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    e548:	2301      	movs	r3, #1
			d_len = 2;
    e54a:	2202      	movs	r2, #2
			d[1].data = &data;
    e54c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    e550:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    e552:	f242 0008 	movw	r0, #8200	; 0x2008
    e556:	a902      	add	r1, sp, #8
    e558:	f7ff ff62 	bl	e420 <hci_set_ad>
		if (err) {
    e55c:	4604      	mov	r4, r0
    e55e:	b938      	cbnz	r0, e570 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    e560:	f1ba 0f00 	cmp.w	sl, #0
    e564:	d120      	bne.n	e5a8 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e566:	2104      	movs	r1, #4
    e568:	f106 0010 	add.w	r0, r6, #16
    e56c:	f00c fc27 	bl	1adbe <atomic_or>
}
    e570:	4620      	mov	r0, r4
    e572:	b007      	add	sp, #28
    e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e578:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    e57c:	3a08      	subs	r2, #8
    e57e:	2a01      	cmp	r2, #1
    e580:	d925      	bls.n	e5ce <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e582:	3301      	adds	r3, #1
    e584:	429f      	cmp	r7, r3
    e586:	d1f7      	bne.n	e578 <le_adv_update.constprop.0+0x88>
    e588:	e7c8      	b.n	e51c <le_adv_update.constprop.0+0x2c>
    e58a:	2300      	movs	r3, #0
    e58c:	e7fa      	b.n	e584 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e58e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    e592:	3a08      	subs	r2, #8
    e594:	2a01      	cmp	r2, #1
    e596:	d91a      	bls.n	e5ce <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e598:	3301      	adds	r3, #1
    e59a:	4599      	cmp	r9, r3
    e59c:	d1f7      	bne.n	e58e <le_adv_update.constprop.0+0x9e>
    e59e:	e7bf      	b.n	e520 <le_adv_update.constprop.0+0x30>
    e5a0:	2300      	movs	r3, #0
    e5a2:	e7fa      	b.n	e59a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    e5a4:	2201      	movs	r2, #1
    e5a6:	e7d4      	b.n	e552 <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    e5a8:	2201      	movs	r2, #1
		d[0].len = sd_len;
    e5aa:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    e5ae:	f1b8 0f00 	cmp.w	r8, #0
    e5b2:	d003      	beq.n	e5bc <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    e5b4:	9205      	str	r2, [sp, #20]
			d_len = 2;
    e5b6:	2202      	movs	r2, #2
			d[1].data = &data;
    e5b8:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    e5bc:	f242 0009 	movw	r0, #8201	; 0x2009
    e5c0:	a902      	add	r1, sp, #8
    e5c2:	f7ff ff2d 	bl	e420 <hci_set_ad>
		if (err) {
    e5c6:	2800      	cmp	r0, #0
    e5c8:	d0cd      	beq.n	e566 <le_adv_update.constprop.0+0x76>
    e5ca:	4604      	mov	r4, r0
    e5cc:	e7d0      	b.n	e570 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    e5ce:	f06f 0415 	mvn.w	r4, #21
    e5d2:	e7cd      	b.n	e570 <le_adv_update.constprop.0+0x80>
    e5d4:	0001e4ed 	.word	0x0001e4ed

0000e5d8 <set_le_adv_enable_legacy>:
{
    e5d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e5da:	4606      	mov	r6, r0
    e5dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    e5de:	f242 000a 	movw	r0, #8202	; 0x200a
    e5e2:	2101      	movs	r1, #1
    e5e4:	f7ff fd68 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    e5e8:	4604      	mov	r4, r0
    e5ea:	b1e8      	cbz	r0, e628 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    e5ec:	3008      	adds	r0, #8
	if (enable) {
    e5ee:	b1cd      	cbz	r5, e624 <set_le_adv_enable_legacy+0x4c>
    e5f0:	2101      	movs	r1, #1
    e5f2:	f00d fdff 	bl	1c1f4 <net_buf_simple_add_u8>
    e5f6:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    e5f8:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    e5fa:	3610      	adds	r6, #16
    e5fc:	9302      	str	r3, [sp, #8]
	state->target = target;
    e5fe:	9601      	str	r6, [sp, #4]
	state->val = val;
    e600:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    e604:	f005 feb2 	bl	1436c <net_buf_id>
    e608:	220c      	movs	r2, #12
    e60a:	4b09      	ldr	r3, [pc, #36]	; (e630 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e60c:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    e60e:	fb02 3300 	mla	r3, r2, r0, r3
    e612:	aa01      	add	r2, sp, #4
    e614:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e616:	f242 000a 	movw	r0, #8202	; 0x200a
    e61a:	2200      	movs	r2, #0
    e61c:	f7ff fd96 	bl	e14c <bt_hci_cmd_send_sync>
}
    e620:	b004      	add	sp, #16
    e622:	bd70      	pop	{r4, r5, r6, pc}
    e624:	4629      	mov	r1, r5
    e626:	e7e4      	b.n	e5f2 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    e628:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e62c:	e7f8      	b.n	e620 <set_le_adv_enable_legacy+0x48>
    e62e:	bf00      	nop
    e630:	2000a918 	.word	0x2000a918

0000e634 <start_le_scan_legacy>:
{
    e634:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e636:	460e      	mov	r6, r1
    e638:	4605      	mov	r5, r0
    e63a:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    e63c:	2100      	movs	r1, #0
    e63e:	2207      	movs	r2, #7
    e640:	4668      	mov	r0, sp
    e642:	f00c faf4 	bl	1ac2e <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    e646:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    e64a:	4e26      	ldr	r6, [pc, #152]	; (e6e4 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    e64c:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    e64e:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    e650:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    e654:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    e658:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    e65c:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    e660:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e664:	f00c fba5 	bl	1adb2 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    e668:	0641      	lsls	r1, r0, #25
    e66a:	d413      	bmi.n	e694 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    e66c:	f00c fbe6 	bl	1ae3c <le_set_private_addr.constprop.0>
			if (err) {
    e670:	4604      	mov	r4, r0
    e672:	b160      	cbz	r0, e68e <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    e674:	2d01      	cmp	r5, #1
    e676:	d02e      	beq.n	e6d6 <start_le_scan_legacy+0xa2>
    e678:	f106 0028 	add.w	r0, r6, #40	; 0x28
    e67c:	f00c fb99 	bl	1adb2 <atomic_get>
    e680:	0642      	lsls	r2, r0, #25
    e682:	d528      	bpl.n	e6d6 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    e684:	4622      	mov	r2, r4
    e686:	2157      	movs	r1, #87	; 0x57
    e688:	4817      	ldr	r0, [pc, #92]	; (e6e8 <start_le_scan_legacy+0xb4>)
    e68a:	f00b f845 	bl	19718 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e68e:	2301      	movs	r3, #1
    e690:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    e694:	2107      	movs	r1, #7
    e696:	f242 000b 	movw	r0, #8203	; 0x200b
    e69a:	f7ff fd0d 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    e69e:	4604      	mov	r4, r0
    e6a0:	b1e0      	cbz	r0, e6dc <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e6a2:	2207      	movs	r2, #7
    e6a4:	4669      	mov	r1, sp
    e6a6:	3008      	adds	r0, #8
    e6a8:	f00d fd98 	bl	1c1dc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    e6ac:	4621      	mov	r1, r4
    e6ae:	2200      	movs	r2, #0
    e6b0:	f242 000b 	movw	r0, #8203	; 0x200b
    e6b4:	f7ff fd4a 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    e6b8:	4604      	mov	r4, r0
    e6ba:	b960      	cbnz	r0, e6d6 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    e6bc:	2001      	movs	r0, #1
    e6be:	f7ff fdf5 	bl	e2ac <set_le_scan_enable_legacy>
	if (err) {
    e6c2:	4604      	mov	r4, r0
    e6c4:	b938      	cbnz	r0, e6d6 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    e6c6:	1e6b      	subs	r3, r5, #1
    e6c8:	425a      	negs	r2, r3
    e6ca:	f04f 0107 	mov.w	r1, #7
    e6ce:	4807      	ldr	r0, [pc, #28]	; (e6ec <start_le_scan_legacy+0xb8>)
    e6d0:	415a      	adcs	r2, r3
    e6d2:	f00c fb8d 	bl	1adf0 <atomic_set_bit_to>
}
    e6d6:	4620      	mov	r0, r4
    e6d8:	b002      	add	sp, #8
    e6da:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e6dc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e6e0:	e7f9      	b.n	e6d6 <start_le_scan_legacy+0xa2>
    e6e2:	bf00      	nop
    e6e4:	20008000 	.word	0x20008000
    e6e8:	0001fb5f 	.word	0x0001fb5f
    e6ec:	20008094 	.word	0x20008094

0000e6f0 <bt_le_scan_random_addr_check>:
{
    e6f0:	b508      	push	{r3, lr}
    e6f2:	4802      	ldr	r0, [pc, #8]	; (e6fc <bt_le_scan_random_addr_check+0xc>)
    e6f4:	f00c fb5d 	bl	1adb2 <atomic_get>
}
    e6f8:	2001      	movs	r0, #1
    e6fa:	bd08      	pop	{r3, pc}
    e6fc:	20008028 	.word	0x20008028

0000e700 <bt_le_create_conn_legacy>:
{
    e700:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    e704:	4f2b      	ldr	r7, [pc, #172]	; (e7b4 <bt_le_create_conn_legacy+0xb4>)
{
    e706:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    e708:	783b      	ldrb	r3, [r7, #0]
    e70a:	2b01      	cmp	r3, #1
    e70c:	d00b      	beq.n	e726 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    e70e:	2119      	movs	r1, #25
    e710:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    e714:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    e718:	f7ff fcce 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    e71c:	4606      	mov	r6, r0
    e71e:	b950      	cbnz	r0, e736 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    e720:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e724:	e004      	b.n	e730 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    e726:	1c78      	adds	r0, r7, #1
    e728:	f7ff fd92 	bl	e250 <set_random_address>
			if (err) {
    e72c:	2800      	cmp	r0, #0
    e72e:	d0ee      	beq.n	e70e <bt_le_create_conn_legacy+0xe>
}
    e730:	b004      	add	sp, #16
    e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    e736:	2119      	movs	r1, #25
    e738:	3008      	adds	r0, #8
    e73a:	f006 f8a5 	bl	14888 <net_buf_simple_add>
    e73e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    e740:	2219      	movs	r2, #25
    e742:	2100      	movs	r1, #0
    e744:	f00c fa73 	bl	1ac2e <memset>
	cp->own_addr_type = own_addr_type;
    e748:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    e74c:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    e750:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e754:	1d60      	adds	r0, r4, #5
    e756:	f00c fb2f 	bl	1adb8 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    e75a:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    e75e:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    e760:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    e762:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    e764:	89fb      	ldrh	r3, [r7, #14]
    e766:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    e768:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    e76c:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    e770:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    e774:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    e778:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    e77c:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    e780:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    e784:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    e788:	4b0b      	ldr	r3, [pc, #44]	; (e7b8 <bt_le_create_conn_legacy+0xb8>)
    e78a:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e78c:	230b      	movs	r3, #11
    e78e:	9302      	str	r3, [sp, #8]
	state->val = val;
    e790:	2301      	movs	r3, #1
    e792:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    e796:	f005 fde9 	bl	1436c <net_buf_id>
    e79a:	220c      	movs	r2, #12
    e79c:	4b07      	ldr	r3, [pc, #28]	; (e7bc <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    e79e:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    e7a0:	fb02 3300 	mla	r3, r2, r0, r3
    e7a4:	aa01      	add	r2, sp, #4
    e7a6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    e7a8:	f242 000d 	movw	r0, #8205	; 0x200d
    e7ac:	4642      	mov	r2, r8
    e7ae:	f7ff fccd 	bl	e14c <bt_hci_cmd_send_sync>
    e7b2:	e7bd      	b.n	e730 <bt_le_create_conn_legacy+0x30>
    e7b4:	20008000 	.word	0x20008000
    e7b8:	20008094 	.word	0x20008094
    e7bc:	2000a918 	.word	0x2000a918

0000e7c0 <bt_le_create_conn_cancel>:
{
    e7c0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    e7c2:	2100      	movs	r1, #0
{
    e7c4:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    e7c6:	f242 000e 	movw	r0, #8206	; 0x200e
    e7ca:	f7ff fc75 	bl	e0b8 <bt_hci_cmd_create>
	state->target = target;
    e7ce:	4b0c      	ldr	r3, [pc, #48]	; (e800 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    e7d0:	2500      	movs	r5, #0
	state->target = target;
    e7d2:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e7d4:	230b      	movs	r3, #11
    e7d6:	4604      	mov	r4, r0
    e7d8:	9302      	str	r3, [sp, #8]
	state->val = val;
    e7da:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    e7de:	f005 fdc5 	bl	1436c <net_buf_id>
    e7e2:	220c      	movs	r2, #12
    e7e4:	4b07      	ldr	r3, [pc, #28]	; (e804 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    e7e6:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    e7e8:	fb02 3300 	mla	r3, r2, r0, r3
    e7ec:	aa01      	add	r2, sp, #4
    e7ee:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    e7f0:	f242 000e 	movw	r0, #8206	; 0x200e
    e7f4:	462a      	mov	r2, r5
    e7f6:	f7ff fca9 	bl	e14c <bt_hci_cmd_send_sync>
}
    e7fa:	b005      	add	sp, #20
    e7fc:	bd30      	pop	{r4, r5, pc}
    e7fe:	bf00      	nop
    e800:	20008094 	.word	0x20008094
    e804:	2000a918 	.word	0x2000a918

0000e808 <bt_le_scan_update>:
{
    e808:	b570      	push	{r4, r5, r6, lr}
    e80a:	4606      	mov	r6, r0
    e80c:	481c      	ldr	r0, [pc, #112]	; (e880 <bt_le_scan_update+0x78>)
    e80e:	f00c fad0 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    e812:	0641      	lsls	r1, r0, #25
    e814:	f3c0 1380 	ubfx	r3, r0, #6, #1
    e818:	d501      	bpl.n	e81e <bt_le_scan_update+0x16>
			return 0;
    e81a:	2000      	movs	r0, #0
    e81c:	e02b      	b.n	e876 <bt_le_scan_update+0x6e>
    e81e:	4818      	ldr	r0, [pc, #96]	; (e880 <bt_le_scan_update+0x78>)
    e820:	f00c fac7 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    e824:	0682      	lsls	r2, r0, #26
    e826:	d421      	bmi.n	e86c <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    e828:	2100      	movs	r1, #0
    e82a:	2206      	movs	r2, #6
    e82c:	4608      	mov	r0, r1
    e82e:	f001 fff9 	bl	10824 <bt_conn_lookup_state_le>
		if (conn) {
    e832:	4604      	mov	r4, r0
    e834:	bb00      	cbnz	r0, e878 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    e836:	2202      	movs	r2, #2
    e838:	4601      	mov	r1, r0
    e83a:	f001 fff3 	bl	10824 <bt_conn_lookup_state_le>
		if (conn) {
    e83e:	4605      	mov	r5, r0
    e840:	2800      	cmp	r0, #0
    e842:	d0ea      	beq.n	e81a <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e844:	f44f 7180 	mov.w	r1, #256	; 0x100
    e848:	480d      	ldr	r0, [pc, #52]	; (e880 <bt_le_scan_update+0x78>)
    e84a:	f00c fab8 	bl	1adbe <atomic_or>
			bt_conn_unref(conn);
    e84e:	4628      	mov	r0, r5
    e850:	f001 fe86 	bl	10560 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    e854:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    e856:	4620      	mov	r0, r4
}
    e858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    e85c:	bf15      	itete	ne
    e85e:	2230      	movne	r2, #48	; 0x30
    e860:	2212      	moveq	r2, #18
    e862:	2160      	movne	r1, #96	; 0x60
    e864:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    e868:	f7ff bee4 	b.w	e634 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    e86c:	4618      	mov	r0, r3
    e86e:	f7ff fd1d 	bl	e2ac <set_le_scan_enable_legacy>
		if (err) {
    e872:	2800      	cmp	r0, #0
    e874:	d0d8      	beq.n	e828 <bt_le_scan_update+0x20>
}
    e876:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    e878:	f001 fe72 	bl	10560 <bt_conn_unref>
    e87c:	e7cd      	b.n	e81a <bt_le_scan_update+0x12>
    e87e:	bf00      	nop
    e880:	20008094 	.word	0x20008094

0000e884 <hci_disconn_complete>:
{
    e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e886:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    e888:	7835      	ldrb	r5, [r6, #0]
    e88a:	bb45      	cbnz	r5, e8de <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e88c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    e890:	4638      	mov	r0, r7
    e892:	f001 fe89 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    e896:	4604      	mov	r4, r0
    e898:	b930      	cbnz	r0, e8a8 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e89a:	463a      	mov	r2, r7
}
    e89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e8a0:	2145      	movs	r1, #69	; 0x45
    e8a2:	480f      	ldr	r0, [pc, #60]	; (e8e0 <hci_disconn_complete+0x5c>)
    e8a4:	f00a bf38 	b.w	19718 <printk>
	conn->err = evt->reason;
    e8a8:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e8aa:	4629      	mov	r1, r5
	conn->err = evt->reason;
    e8ac:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e8ae:	f001 fe83 	bl	105b8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    e8b2:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    e8b4:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    e8b6:	2b01      	cmp	r3, #1
    e8b8:	d004      	beq.n	e8c4 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    e8ba:	4620      	mov	r0, r4
}
    e8bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    e8c0:	f001 be4e 	b.w	10560 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e8c4:	1d20      	adds	r0, r4, #4
    e8c6:	f00c fa74 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    e8ca:	07c3      	lsls	r3, r0, #31
    e8cc:	d5f5      	bpl.n	e8ba <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    e8ce:	4620      	mov	r0, r4
    e8d0:	2102      	movs	r1, #2
    e8d2:	f001 fe71 	bl	105b8 <bt_conn_set_state>
		bt_le_scan_update(false);
    e8d6:	4628      	mov	r0, r5
    e8d8:	f7ff ff96 	bl	e808 <bt_le_scan_update>
    e8dc:	e7ed      	b.n	e8ba <hci_disconn_complete+0x36>
}
    e8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8e0:	0001f8e6 	.word	0x0001f8e6

0000e8e4 <le_adv_report>:
{
    e8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    e8e8:	f100 0708 	add.w	r7, r0, #8
    e8ec:	b08d      	sub	sp, #52	; 0x34
    e8ee:	4604      	mov	r4, r0
    e8f0:	4638      	mov	r0, r7
    e8f2:	f00d fc57 	bl	1c1a4 <net_buf_simple_pull_u8>
    e8f6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; eac0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>
	if (scan_dev_found_cb) {
    e8fa:	f8df a1c8 	ldr.w	sl, [pc, #456]	; eac4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    e8fe:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    e900:	9b01      	ldr	r3, [sp, #4]
    e902:	b913      	cbnz	r3, e90a <le_adv_report+0x26>
}
    e904:	b00d      	add	sp, #52	; 0x34
    e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    e90a:	89a3      	ldrh	r3, [r4, #12]
    e90c:	2b08      	cmp	r3, #8
    e90e:	d806      	bhi.n	e91e <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    e910:	2145      	movs	r1, #69	; 0x45
    e912:	486d      	ldr	r0, [pc, #436]	; (eac8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
}
    e914:	b00d      	add	sp, #52	; 0x34
    e916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    e91a:	f00a befd 	b.w	19718 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    e91e:	2109      	movs	r1, #9
    e920:	4638      	mov	r0, r7
    e922:	f005 ff93 	bl	1484c <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    e926:	237f      	movs	r3, #127	; 0x7f
    e928:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    e92c:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    e92e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    e930:	9300      	str	r3, [sp, #0]
    e932:	18c3      	adds	r3, r0, r3
    e934:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    e936:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    e93a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    e93e:	23ff      	movs	r3, #255	; 0xff
    e940:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    e944:	2300      	movs	r3, #0
    e946:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    e94a:	7802      	ldrb	r2, [r0, #0]
    e94c:	4606      	mov	r6, r0
    e94e:	2a04      	cmp	r2, #4
    e950:	bf98      	it	ls
    e952:	4b5e      	ldrls	r3, [pc, #376]	; (eacc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    e954:	f100 0901 	add.w	r9, r0, #1
    e958:	bf98      	it	ls
    e95a:	5c9b      	ldrbls	r3, [r3, r2]
    e95c:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    e95e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    e962:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    e966:	f00c fa24 	bl	1adb2 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e96a:	0645      	lsls	r5, r0, #25
    e96c:	d50d      	bpl.n	e98a <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    e96e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    e972:	0758      	lsls	r0, r3, #29
    e974:	d509      	bpl.n	e98a <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    e976:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    e978:	4638      	mov	r0, r7
    e97a:	3101      	adds	r1, #1
    e97c:	f005 ff4a 	bl	14814 <net_buf_simple_pull>
    e980:	9b01      	ldr	r3, [sp, #4]
    e982:	1e58      	subs	r0, r3, #1
    e984:	b2c3      	uxtb	r3, r0
    e986:	9301      	str	r3, [sp, #4]
    e988:	e7ba      	b.n	e900 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    e98a:	7873      	ldrb	r3, [r6, #1]
    e98c:	1e9a      	subs	r2, r3, #2
    e98e:	2a01      	cmp	r2, #1
    e990:	d84c      	bhi.n	ea2c <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    e992:	4649      	mov	r1, r9
    e994:	a804      	add	r0, sp, #16
    e996:	f00c fa0f 	bl	1adb8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    e99a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e99e:	3b02      	subs	r3, #2
    e9a0:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    e9a4:	ab04      	add	r3, sp, #16
    e9a6:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    e9a8:	f8da 3000 	ldr.w	r3, [sl]
    e9ac:	b1a3      	cbz	r3, e9d8 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    e9ae:	4638      	mov	r0, r7
    e9b0:	f00d fc08 	bl	1c1c4 <net_buf_simple_headroom>
    e9b4:	4683      	mov	fp, r0
		buf->len = len;
    e9b6:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    e9b8:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    e9ba:	a804      	add	r0, sp, #16
		buf->len = len;
    e9bc:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    e9be:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    e9c2:	463b      	mov	r3, r7
    e9c4:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    e9c8:	f8da c000 	ldr.w	ip, [sl]
    e9cc:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    e9ce:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    e9d0:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    e9d2:	fa10 f08b 	uxtah	r0, r0, fp
    e9d6:	60a0      	str	r0, [r4, #8]
	return list->head;
    e9d8:	4b3d      	ldr	r3, [pc, #244]	; (ead0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    e9da:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d032      	beq.n	ea46 <le_adv_report+0x162>
    e9e0:	f1b3 0208 	subs.w	r2, r3, #8
    e9e4:	d02f      	beq.n	ea46 <le_adv_report+0x162>
	return node->next;
    e9e6:	681d      	ldr	r5, [r3, #0]
    e9e8:	b105      	cbz	r5, e9ec <le_adv_report+0x108>
    e9ea:	3d08      	subs	r5, #8
		if (listener->recv) {
    e9ec:	6813      	ldr	r3, [r2, #0]
    e9ee:	9203      	str	r2, [sp, #12]
    e9f0:	b193      	cbz	r3, ea18 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    e9f2:	4638      	mov	r0, r7
    e9f4:	f00d fbe6 	bl	1c1c4 <net_buf_simple_headroom>
    e9f8:	4683      	mov	fp, r0
	state->len = buf->len;
    e9fa:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    e9fc:	9a03      	ldr	r2, [sp, #12]
    e9fe:	9302      	str	r3, [sp, #8]
			buf->len = len;
    ea00:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    ea02:	a808      	add	r0, sp, #32
			buf->len = len;
    ea04:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    ea06:	4639      	mov	r1, r7
    ea08:	6812      	ldr	r2, [r2, #0]
    ea0a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    ea0c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ea0e:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    ea10:	fa10 f08b 	uxtah	r0, r0, fp
    ea14:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    ea16:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ea18:	b1ad      	cbz	r5, ea46 <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ea1a:	f115 0308 	adds.w	r3, r5, #8
    ea1e:	d002      	beq.n	ea26 <le_adv_report+0x142>
	return node->next;
    ea20:	68ab      	ldr	r3, [r5, #8]
    ea22:	b103      	cbz	r3, ea26 <le_adv_report+0x142>
    ea24:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    ea26:	462a      	mov	r2, r5
    ea28:	461d      	mov	r5, r3
    ea2a:	e7df      	b.n	e9ec <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    ea2c:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ea2e:	bf0a      	itet	eq
    ea30:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    ea32:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ea34:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    ea36:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ea38:	bf04      	itt	eq
    ea3a:	9306      	streq	r3, [sp, #24]
    ea3c:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    ea40:	f00c f9ba 	bl	1adb8 <bt_addr_le_copy>
    ea44:	e7ae      	b.n	e9a4 <le_adv_report+0xc0>
    ea46:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    ea48:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ea4c:	f00c f9b1 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ea50:	0641      	lsls	r1, r0, #25
    ea52:	f3c0 1580 	ubfx	r5, r0, #6, #1
    ea56:	d48e      	bmi.n	e976 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    ea58:	07da      	lsls	r2, r3, #31
    ea5a:	d58c      	bpl.n	e976 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    ea5c:	2202      	movs	r2, #2
    ea5e:	4628      	mov	r0, r5
    ea60:	a904      	add	r1, sp, #16
    ea62:	f001 fedf 	bl	10824 <bt_conn_lookup_state_le>
	if (!conn) {
    ea66:	4683      	mov	fp, r0
    ea68:	2800      	cmp	r0, #0
    ea6a:	d084      	beq.n	e976 <le_adv_report+0x92>
    ea6c:	4640      	mov	r0, r8
    ea6e:	f00c f9a0 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ea72:	0683      	lsls	r3, r0, #26
    ea74:	d410      	bmi.n	ea98 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    ea76:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    ea7a:	4649      	mov	r1, r9
    ea7c:	f00c f99c 	bl	1adb8 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    ea80:	4658      	mov	r0, fp
    ea82:	f7ff fe3d 	bl	e700 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    ea86:	b960      	cbnz	r0, eaa2 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    ea88:	4658      	mov	r0, fp
    ea8a:	2106      	movs	r1, #6
    ea8c:	f001 fd94 	bl	105b8 <bt_conn_set_state>
	bt_conn_unref(conn);
    ea90:	4658      	mov	r0, fp
    ea92:	f001 fd65 	bl	10560 <bt_conn_unref>
	return;
    ea96:	e76e      	b.n	e976 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    ea98:	4628      	mov	r0, r5
    ea9a:	f7ff fc07 	bl	e2ac <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ea9e:	2800      	cmp	r0, #0
    eaa0:	d0e9      	beq.n	ea76 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    eaa2:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eaa4:	2100      	movs	r1, #0
    eaa6:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    eaa8:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eaac:	f001 fd84 	bl	105b8 <bt_conn_set_state>
	bt_conn_unref(conn);
    eab0:	4658      	mov	r0, fp
    eab2:	f001 fd55 	bl	10560 <bt_conn_unref>
	bt_le_scan_update(false);
    eab6:	2000      	movs	r0, #0
    eab8:	f7ff fea6 	bl	e808 <bt_le_scan_update>
    eabc:	e75b      	b.n	e976 <le_adv_report+0x92>
    eabe:	bf00      	nop
    eac0:	20008094 	.word	0x20008094
    eac4:	2000a93c 	.word	0x2000a93c
    eac8:	0001fb9a 	.word	0x0001fb9a
    eacc:	0002001e 	.word	0x0002001e
    ead0:	2000a934 	.word	0x2000a934

0000ead4 <bt_data_parse>:
{
    ead4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ead6:	4604      	mov	r4, r0
    ead8:	460e      	mov	r6, r1
    eada:	4617      	mov	r7, r2
	while (ad->len > 1) {
    eadc:	88a3      	ldrh	r3, [r4, #4]
    eade:	2b01      	cmp	r3, #1
    eae0:	d801      	bhi.n	eae6 <bt_data_parse+0x12>
}
    eae2:	b003      	add	sp, #12
    eae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    eae6:	4620      	mov	r0, r4
    eae8:	f00d fb5c 	bl	1c1a4 <net_buf_simple_pull_u8>
		if (len == 0U) {
    eaec:	4605      	mov	r5, r0
    eaee:	2800      	cmp	r0, #0
    eaf0:	d0f7      	beq.n	eae2 <bt_data_parse+0xe>
		if (len > ad->len) {
    eaf2:	88a2      	ldrh	r2, [r4, #4]
    eaf4:	b283      	uxth	r3, r0
    eaf6:	429a      	cmp	r2, r3
    eaf8:	d206      	bcs.n	eb08 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    eafa:	2157      	movs	r1, #87	; 0x57
    eafc:	480c      	ldr	r0, [pc, #48]	; (eb30 <bt_data_parse+0x5c>)
}
    eafe:	b003      	add	sp, #12
    eb00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    eb04:	f00a be08 	b.w	19718 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    eb08:	4620      	mov	r0, r4
    eb0a:	f00d fb4b 	bl	1c1a4 <net_buf_simple_pull_u8>
		data.data = ad->data;
    eb0e:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    eb10:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    eb14:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    eb16:	4639      	mov	r1, r7
    eb18:	4668      	mov	r0, sp
		data.data_len = len - 1;
    eb1a:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    eb1e:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    eb20:	47b0      	blx	r6
    eb22:	2800      	cmp	r0, #0
    eb24:	d0dd      	beq.n	eae2 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    eb26:	4629      	mov	r1, r5
    eb28:	4620      	mov	r0, r4
    eb2a:	f005 fe73 	bl	14814 <net_buf_simple_pull>
    eb2e:	e7d5      	b.n	eadc <bt_data_parse+0x8>
    eb30:	0001fbb8 	.word	0x0001fbb8

0000eb34 <bt_send>:
	return bt_dev.drv->send(buf);
    eb34:	4b02      	ldr	r3, [pc, #8]	; (eb40 <bt_send+0xc>)
    eb36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    eb3a:	691b      	ldr	r3, [r3, #16]
    eb3c:	4718      	bx	r3
    eb3e:	bf00      	nop
    eb40:	20008000 	.word	0x20008000

0000eb44 <bt_hci_cmd_send>:
{
    eb44:	b538      	push	{r3, r4, r5, lr}
    eb46:	4605      	mov	r5, r0
	if (!buf) {
    eb48:	460c      	mov	r4, r1
    eb4a:	b919      	cbnz	r1, eb54 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    eb4c:	f7ff fab4 	bl	e0b8 <bt_hci_cmd_create>
		if (!buf) {
    eb50:	4604      	mov	r4, r0
    eb52:	b1c0      	cbz	r0, eb86 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    eb54:	f640 4335 	movw	r3, #3125	; 0xc35
    eb58:	429d      	cmp	r5, r3
    eb5a:	d10e      	bne.n	eb7a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    eb5c:	4620      	mov	r0, r4
    eb5e:	f7ff ffe9 	bl	eb34 <bt_send>
		if (err) {
    eb62:	4605      	mov	r5, r0
    eb64:	b138      	cbz	r0, eb76 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    eb66:	4602      	mov	r2, r0
    eb68:	2145      	movs	r1, #69	; 0x45
    eb6a:	4808      	ldr	r0, [pc, #32]	; (eb8c <bt_hci_cmd_send+0x48>)
    eb6c:	f00a fdd4 	bl	19718 <printk>
			net_buf_unref(buf);
    eb70:	4620      	mov	r0, r4
    eb72:	f005 fd73 	bl	1465c <net_buf_unref>
}
    eb76:	4628      	mov	r0, r5
    eb78:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    eb7a:	4621      	mov	r1, r4
    eb7c:	4804      	ldr	r0, [pc, #16]	; (eb90 <bt_hci_cmd_send+0x4c>)
    eb7e:	f005 fd3f 	bl	14600 <net_buf_put>
	return 0;
    eb82:	2500      	movs	r5, #0
    eb84:	e7f7      	b.n	eb76 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    eb86:	f06f 0536 	mvn.w	r5, #54	; 0x36
    eb8a:	e7f4      	b.n	eb76 <bt_hci_cmd_send+0x32>
    eb8c:	0001fbcc 	.word	0x0001fbcc
    eb90:	20008118 	.word	0x20008118

0000eb94 <bt_hci_host_num_completed_packets>:
{
    eb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb96:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    eb98:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    eb9a:	7980      	ldrb	r0, [r0, #6]
    eb9c:	f005 fbde 	bl	1435c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    eba0:	4621      	mov	r1, r4
    eba2:	f00e f961 	bl	1ce68 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    eba6:	4b24      	ldr	r3, [pc, #144]	; (ec38 <bt_hci_host_num_completed_packets+0xa4>)
    eba8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    ebac:	069b      	lsls	r3, r3, #26
    ebae:	d541      	bpl.n	ec34 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    ebb0:	7d60      	ldrb	r0, [r4, #21]
    ebb2:	f002 f94d 	bl	10e50 <bt_conn_lookup_index>
	if (!conn) {
    ebb6:	4605      	mov	r5, r0
    ebb8:	b930      	cbnz	r0, ebc8 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    ebba:	7d62      	ldrb	r2, [r4, #21]
    ebbc:	2157      	movs	r1, #87	; 0x57
}
    ebbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    ebc2:	481e      	ldr	r0, [pc, #120]	; (ec3c <bt_hci_host_num_completed_packets+0xa8>)
    ebc4:	f00a bda8 	b.w	19718 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    ebc8:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    ebca:	2b01      	cmp	r3, #1
    ebcc:	d002      	beq.n	ebd4 <bt_hci_host_num_completed_packets+0x40>
    ebce:	3b07      	subs	r3, #7
    ebd0:	2b01      	cmp	r3, #1
    ebd2:	d80f      	bhi.n	ebf4 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    ebd4:	4628      	mov	r0, r5
    ebd6:	f001 fcc3 	bl	10560 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ebda:	2105      	movs	r1, #5
    ebdc:	f640 4035 	movw	r0, #3125	; 0xc35
    ebe0:	f7ff fa6a 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    ebe4:	4604      	mov	r4, r0
    ebe6:	b970      	cbnz	r0, ec06 <bt_hci_host_num_completed_packets+0x72>
}
    ebe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    ebec:	2145      	movs	r1, #69	; 0x45
    ebee:	4814      	ldr	r0, [pc, #80]	; (ec40 <bt_hci_host_num_completed_packets+0xac>)
    ebf0:	f00a bd92 	b.w	19718 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    ebf4:	4813      	ldr	r0, [pc, #76]	; (ec44 <bt_hci_host_num_completed_packets+0xb0>)
    ebf6:	2157      	movs	r1, #87	; 0x57
    ebf8:	f00a fd8e 	bl	19718 <printk>
		bt_conn_unref(conn);
    ebfc:	4628      	mov	r0, r5
}
    ebfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    ec02:	f001 bcad 	b.w	10560 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    ec06:	f100 0708 	add.w	r7, r0, #8
    ec0a:	2101      	movs	r1, #1
    ec0c:	4638      	mov	r0, r7
    ec0e:	f005 fe3b 	bl	14888 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ec12:	2501      	movs	r5, #1
    ec14:	2104      	movs	r1, #4
    ec16:	7005      	strb	r5, [r0, #0]
    ec18:	4638      	mov	r0, r7
    ec1a:	f005 fe35 	bl	14888 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ec1e:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ec20:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ec22:	7085      	strb	r5, [r0, #2]
    ec24:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ec26:	4621      	mov	r1, r4
}
    ec28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ec2c:	f640 4035 	movw	r0, #3125	; 0xc35
    ec30:	f7ff bf88 	b.w	eb44 <bt_hci_cmd_send>
}
    ec34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec36:	bf00      	nop
    ec38:	20008000 	.word	0x20008000
    ec3c:	0001fbf3 	.word	0x0001fbf3
    ec40:	0001fc52 	.word	0x0001fc52
    ec44:	0001fc21 	.word	0x0001fc21

0000ec48 <conn_auto_initiate>:
{
    ec48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    ec4a:	7a83      	ldrb	r3, [r0, #10]
{
    ec4c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ec4e:	2b07      	cmp	r3, #7
    ec50:	d15d      	bne.n	ed0e <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    ec52:	1d06      	adds	r6, r0, #4
    ec54:	4630      	mov	r0, r6
    ec56:	f00c f8ac 	bl	1adb2 <atomic_get>
    ec5a:	0483      	lsls	r3, r0, #18
    ec5c:	d41b      	bmi.n	ec96 <conn_auto_initiate+0x4e>
    ec5e:	78e3      	ldrb	r3, [r4, #3]
    ec60:	b123      	cbz	r3, ec6c <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    ec62:	4b2c      	ldr	r3, [pc, #176]	; (ed14 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    ec64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    ec68:	071d      	lsls	r5, r3, #28
    ec6a:	d514      	bpl.n	ec96 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    ec6c:	2102      	movs	r1, #2
    ec6e:	f242 0016 	movw	r0, #8214	; 0x2016
    ec72:	f7ff fa21 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    ec76:	4605      	mov	r5, r0
    ec78:	b168      	cbz	r0, ec96 <conn_auto_initiate+0x4e>
    ec7a:	2102      	movs	r1, #2
    ec7c:	3008      	adds	r0, #8
    ec7e:	f005 fe03 	bl	14888 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    ec82:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    ec84:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    ec86:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    ec88:	f242 0016 	movw	r0, #8214	; 0x2016
}
    ec8c:	b004      	add	sp, #16
    ec8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    ec92:	f7ff bf57 	b.w	eb44 <bt_hci_cmd_send>
    ec96:	4630      	mov	r0, r6
    ec98:	f00c f88b 	bl	1adb2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    ec9c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    eca0:	4d1c      	ldr	r5, [pc, #112]	; (ed14 <conn_auto_initiate+0xcc>)
    eca2:	f3c0 3100 	ubfx	r1, r0, #12, #1
    eca6:	d116      	bne.n	ecd6 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    eca8:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    ecac:	07d8      	lsls	r0, r3, #31
    ecae:	d512      	bpl.n	ecd6 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    ecb0:	2302      	movs	r3, #2
    ecb2:	4620      	mov	r0, r4
    ecb4:	461a      	mov	r2, r3
    ecb6:	9100      	str	r1, [sp, #0]
    ecb8:	f00c f92f 	bl	1af1a <bt_le_set_phy>
		if (!err) {
    ecbc:	4602      	mov	r2, r0
    ecbe:	b930      	cbnz	r0, ecce <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ecc0:	2180      	movs	r1, #128	; 0x80
    ecc2:	4630      	mov	r0, r6
}
    ecc4:	b004      	add	sp, #16
    ecc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ecca:	f00c b878 	b.w	1adbe <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    ecce:	2145      	movs	r1, #69	; 0x45
    ecd0:	4811      	ldr	r0, [pc, #68]	; (ed18 <conn_auto_initiate+0xd0>)
    ecd2:	f00a fd21 	bl	19718 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    ecd6:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    ecda:	069a      	lsls	r2, r3, #26
    ecdc:	d517      	bpl.n	ed0e <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    ecde:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    ece2:	689b      	ldr	r3, [r3, #8]
    ece4:	079b      	lsls	r3, r3, #30
    ece6:	d512      	bpl.n	ed0e <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    ece8:	f10d 010e 	add.w	r1, sp, #14
    ecec:	a803      	add	r0, sp, #12
    ecee:	f7ff fa8f 	bl	e210 <hci_le_read_max_data_len>
			if (!err) {
    ecf2:	b960      	cbnz	r0, ed0e <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    ecf4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ecf8:	4620      	mov	r0, r4
    ecfa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ecfe:	f00c f8ef 	bl	1aee0 <bt_le_set_data_len>
				if (err) {
    ed02:	4602      	mov	r2, r0
    ed04:	b118      	cbz	r0, ed0e <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    ed06:	2145      	movs	r1, #69	; 0x45
    ed08:	4804      	ldr	r0, [pc, #16]	; (ed1c <conn_auto_initiate+0xd4>)
    ed0a:	f00a fd05 	bl	19718 <printk>
}
    ed0e:	b004      	add	sp, #16
    ed10:	bd70      	pop	{r4, r5, r6, pc}
    ed12:	bf00      	nop
    ed14:	20008000 	.word	0x20008000
    ed18:	0001fc7a 	.word	0x0001fc7a
    ed1c:	0001fc99 	.word	0x0001fc99

0000ed20 <le_phy_update_complete>:
{
    ed20:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ed22:	6883      	ldr	r3, [r0, #8]
    ed24:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    ed28:	4628      	mov	r0, r5
    ed2a:	f001 fc3d 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    ed2e:	4604      	mov	r4, r0
    ed30:	b930      	cbnz	r0, ed40 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ed32:	462a      	mov	r2, r5
}
    ed34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ed38:	2145      	movs	r1, #69	; 0x45
    ed3a:	480c      	ldr	r0, [pc, #48]	; (ed6c <le_phy_update_complete+0x4c>)
    ed3c:	f00a bcec 	b.w	19718 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    ed40:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ed42:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ed46:	4628      	mov	r0, r5
    ed48:	f00c f847 	bl	1adda <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    ed4c:	0603      	lsls	r3, r0, #24
    ed4e:	d507      	bpl.n	ed60 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ed50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ed54:	4628      	mov	r0, r5
    ed56:	f00c f832 	bl	1adbe <atomic_or>
		conn_auto_initiate(conn);
    ed5a:	4620      	mov	r0, r4
    ed5c:	f7ff ff74 	bl	ec48 <conn_auto_initiate>
	bt_conn_unref(conn);
    ed60:	4620      	mov	r0, r4
}
    ed62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ed66:	f001 bbfb 	b.w	10560 <bt_conn_unref>
    ed6a:	bf00      	nop
    ed6c:	0001f8bd 	.word	0x0001f8bd

0000ed70 <le_remote_feat_complete>:
{
    ed70:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    ed72:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ed74:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ed78:	4630      	mov	r0, r6
    ed7a:	f001 fc15 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    ed7e:	4604      	mov	r4, r0
    ed80:	b930      	cbnz	r0, ed90 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ed82:	4632      	mov	r2, r6
}
    ed84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ed88:	2145      	movs	r1, #69	; 0x45
    ed8a:	480b      	ldr	r0, [pc, #44]	; (edb8 <le_remote_feat_complete+0x48>)
    ed8c:	f00a bcc4 	b.w	19718 <printk>
	if (!evt->status) {
    ed90:	782b      	ldrb	r3, [r5, #0]
    ed92:	b923      	cbnz	r3, ed9e <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    ed94:	2208      	movs	r2, #8
    ed96:	1ce9      	adds	r1, r5, #3
    ed98:	30ac      	adds	r0, #172	; 0xac
    ed9a:	f00b ff1d 	bl	1abd8 <memcpy>
    ed9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    eda2:	1d20      	adds	r0, r4, #4
    eda4:	f00c f80b 	bl	1adbe <atomic_or>
	conn_auto_initiate(conn);
    eda8:	4620      	mov	r0, r4
    edaa:	f7ff ff4d 	bl	ec48 <conn_auto_initiate>
	bt_conn_unref(conn);
    edae:	4620      	mov	r0, r4
}
    edb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    edb4:	f001 bbd4 	b.w	10560 <bt_conn_unref>
    edb8:	0001f8bd 	.word	0x0001f8bd

0000edbc <le_conn_param_neg_reply>:
{
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	4606      	mov	r6, r0
    edc0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    edc2:	f242 0021 	movw	r0, #8225	; 0x2021
    edc6:	2103      	movs	r1, #3
    edc8:	f7ff f976 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    edcc:	4604      	mov	r4, r0
    edce:	b928      	cbnz	r0, eddc <le_conn_param_neg_reply+0x20>
}
    edd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    edd4:	2145      	movs	r1, #69	; 0x45
    edd6:	4808      	ldr	r0, [pc, #32]	; (edf8 <le_conn_param_neg_reply+0x3c>)
    edd8:	f00a bc9e 	b.w	19718 <printk>
    eddc:	2103      	movs	r1, #3
    edde:	3008      	adds	r0, #8
    ede0:	f005 fd52 	bl	14888 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    ede4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ede6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    ede8:	4621      	mov	r1, r4
}
    edea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    edee:	f242 0021 	movw	r0, #8225	; 0x2021
    edf2:	f7ff bea7 	b.w	eb44 <bt_hci_cmd_send>
    edf6:	bf00      	nop
    edf8:	0001fcba 	.word	0x0001fcba

0000edfc <le_conn_param_req>:
{
    edfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    edfe:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ee00:	78d9      	ldrb	r1, [r3, #3]
    ee02:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ee04:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ee06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ee0a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ee0e:	7959      	ldrb	r1, [r3, #5]
    ee10:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ee12:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ee14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ee18:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ee1c:	799a      	ldrb	r2, [r3, #6]
    ee1e:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ee20:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ee22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ee26:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ee2a:	7a1a      	ldrb	r2, [r3, #8]
    ee2c:	7a5b      	ldrb	r3, [r3, #9]
    ee2e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ee32:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    ee36:	f001 fbb7 	bl	105a8 <bt_conn_lookup_handle>
	if (!conn) {
    ee3a:	4606      	mov	r6, r0
    ee3c:	b950      	cbnz	r0, ee54 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ee3e:	2145      	movs	r1, #69	; 0x45
    ee40:	481c      	ldr	r0, [pc, #112]	; (eeb4 <le_conn_param_req+0xb8>)
    ee42:	4622      	mov	r2, r4
    ee44:	f00a fc68 	bl	19718 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    ee48:	2102      	movs	r1, #2
    ee4a:	4620      	mov	r0, r4
    ee4c:	f7ff ffb6 	bl	edbc <le_conn_param_neg_reply>
}
    ee50:	b003      	add	sp, #12
    ee52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    ee54:	4669      	mov	r1, sp
    ee56:	f001 f9f5 	bl	10244 <le_param_req>
    ee5a:	b938      	cbnz	r0, ee6c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ee5c:	211e      	movs	r1, #30
    ee5e:	4620      	mov	r0, r4
    ee60:	f7ff ffac 	bl	edbc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    ee64:	4630      	mov	r0, r6
    ee66:	f001 fb7b 	bl	10560 <bt_conn_unref>
    ee6a:	e7f1      	b.n	ee50 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    ee6c:	210e      	movs	r1, #14
    ee6e:	f242 0020 	movw	r0, #8224	; 0x2020
    ee72:	f7ff f921 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    ee76:	4605      	mov	r5, r0
    ee78:	2800      	cmp	r0, #0
    ee7a:	d0f3      	beq.n	ee64 <le_conn_param_req+0x68>
    ee7c:	210e      	movs	r1, #14
    ee7e:	3008      	adds	r0, #8
    ee80:	f005 fd02 	bl	14888 <net_buf_simple_add>
    ee84:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ee86:	220e      	movs	r2, #14
    ee88:	2100      	movs	r1, #0
    ee8a:	f00b fed0 	bl	1ac2e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ee8e:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee92:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ee94:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ee96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ee9a:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ee9c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ee9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    eea2:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    eea6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    eea8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    eeac:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    eeae:	f7ff fe49 	bl	eb44 <bt_hci_cmd_send>
    eeb2:	e7d7      	b.n	ee64 <le_conn_param_req+0x68>
    eeb4:	0001f8bd 	.word	0x0001f8bd

0000eeb8 <hci_tx_thread>:
{
    eeb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    eebc:	f8df 8128 	ldr.w	r8, [pc, #296]	; efe8 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    eec0:	f8df 9128 	ldr.w	r9, [pc, #296]	; efec <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    eec4:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    eec8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    eecc:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    eece:	f36f 3310 	bfc	r3, #12, #5
    eed2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    eed6:	f001 fad7 	bl	10488 <bt_conn_prepare_events>
    eeda:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    eedc:	f04f 32ff 	mov.w	r2, #4294967295
    eee0:	f04f 33ff 	mov.w	r3, #4294967295
    eee4:	4631      	mov	r1, r6
    eee6:	4840      	ldr	r0, [pc, #256]	; (efe8 <hci_tx_thread+0x130>)
    eee8:	f00a fa12 	bl	19310 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    eeec:	b158      	cbz	r0, ef06 <hci_tx_thread+0x4e>
    eeee:	f241 4271 	movw	r2, #5233	; 0x1471
    eef2:	4649      	mov	r1, r9
    eef4:	483e      	ldr	r0, [pc, #248]	; (eff0 <hci_tx_thread+0x138>)
    eef6:	f00a fc0f 	bl	19718 <printk>
    eefa:	4040      	eors	r0, r0
    eefc:	f380 8811 	msr	BASEPRI, r0
    ef00:	f04f 0003 	mov.w	r0, #3
    ef04:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    ef06:	4d3b      	ldr	r5, [pc, #236]	; (eff4 <hci_tx_thread+0x13c>)
{
    ef08:	4f37      	ldr	r7, [pc, #220]	; (efe8 <hci_tx_thread+0x130>)
    ef0a:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    ef0e:	b916      	cbnz	r6, ef16 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    ef10:	f009 f900 	bl	18114 <z_impl_k_yield>
	while (1) {
    ef14:	e7d8      	b.n	eec8 <hci_tx_thread+0x10>
		switch (ev->state) {
    ef16:	68fa      	ldr	r2, [r7, #12]
    ef18:	f3c2 3204 	ubfx	r2, r2, #12, #5
    ef1c:	2a01      	cmp	r2, #1
    ef1e:	d953      	bls.n	efc8 <hci_tx_thread+0x110>
    ef20:	2a04      	cmp	r2, #4
    ef22:	d15b      	bne.n	efdc <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    ef24:	7b3b      	ldrb	r3, [r7, #12]
    ef26:	2b00      	cmp	r3, #0
    ef28:	d151      	bne.n	efce <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    ef2a:	2200      	movs	r2, #0
    ef2c:	2300      	movs	r3, #0
    ef2e:	4832      	ldr	r0, [pc, #200]	; (eff8 <hci_tx_thread+0x140>)
    ef30:	f005 fb12 	bl	14558 <net_buf_get>
	BT_ASSERT(buf);
    ef34:	4604      	mov	r4, r0
    ef36:	b958      	cbnz	r0, ef50 <hci_tx_thread+0x98>
    ef38:	f241 420e 	movw	r2, #5134	; 0x140e
    ef3c:	4649      	mov	r1, r9
    ef3e:	482c      	ldr	r0, [pc, #176]	; (eff0 <hci_tx_thread+0x138>)
    ef40:	f00a fbea 	bl	19718 <printk>
    ef44:	4040      	eors	r0, r0
    ef46:	f380 8811 	msr	BASEPRI, r0
    ef4a:	f04f 0003 	mov.w	r0, #3
    ef4e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    ef50:	f04f 33ff 	mov.w	r3, #4294967295
    ef54:	f04f 32ff 	mov.w	r2, #4294967295
    ef58:	4658      	mov	r0, fp
    ef5a:	f009 fa59 	bl	18410 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    ef5e:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    ef62:	b153      	cbz	r3, ef7a <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    ef64:	2145      	movs	r1, #69	; 0x45
    ef66:	4825      	ldr	r0, [pc, #148]	; (effc <hci_tx_thread+0x144>)
    ef68:	f00a fbd6 	bl	19718 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    ef6c:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    ef70:	f005 fb74 	bl	1465c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ef74:	2300      	movs	r3, #0
    ef76:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    ef7a:	4620      	mov	r0, r4
    ef7c:	f005 fbb2 	bl	146e4 <net_buf_ref>
    ef80:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    ef84:	4620      	mov	r0, r4
    ef86:	f7ff fdd5 	bl	eb34 <bt_send>
	if (err) {
    ef8a:	4602      	mov	r2, r0
    ef8c:	b1e0      	cbz	r0, efc8 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    ef8e:	2145      	movs	r1, #69	; 0x45
    ef90:	481b      	ldr	r0, [pc, #108]	; (f000 <hci_tx_thread+0x148>)
    ef92:	f00a fbc1 	bl	19718 <printk>
	z_impl_k_sem_give(sem);
    ef96:	481b      	ldr	r0, [pc, #108]	; (f004 <hci_tx_thread+0x14c>)
    ef98:	f009 f9fe 	bl	18398 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    ef9c:	4620      	mov	r0, r4
    ef9e:	f005 f9e5 	bl	1436c <net_buf_id>
    efa2:	220c      	movs	r2, #12
    efa4:	4b18      	ldr	r3, [pc, #96]	; (f008 <hci_tx_thread+0x150>)
    efa6:	211f      	movs	r1, #31
    efa8:	fb02 3000 	mla	r0, r2, r0, r3
    efac:	4622      	mov	r2, r4
    efae:	8840      	ldrh	r0, [r0, #2]
    efb0:	f7fe ff20 	bl	ddf4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    efb4:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    efb8:	f005 fb50 	bl	1465c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    efbc:	2300      	movs	r3, #0
		net_buf_unref(buf);
    efbe:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    efc0:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    efc4:	f005 fb4a 	bl	1465c <net_buf_unref>
	for (; count; ev++, count--) {
    efc8:	3714      	adds	r7, #20
    efca:	3e01      	subs	r6, #1
    efcc:	e79f      	b.n	ef0e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    efce:	2b01      	cmp	r3, #1
    efd0:	d1fa      	bne.n	efc8 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    efd2:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    efd4:	3834      	subs	r0, #52	; 0x34
    efd6:	f001 febb 	bl	10d50 <bt_conn_process_tx>
    efda:	e7f5      	b.n	efc8 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    efdc:	2157      	movs	r1, #87	; 0x57
    efde:	480b      	ldr	r0, [pc, #44]	; (f00c <hci_tx_thread+0x154>)
    efe0:	f00a fb9a 	bl	19718 <printk>
    efe4:	e7f0      	b.n	efc8 <hci_tx_thread+0x110>
    efe6:	bf00      	nop
    efe8:	2000832c 	.word	0x2000832c
    efec:	0001f9af 	.word	0x0001f9af
    eff0:	0001e6bc 	.word	0x0001e6bc
    eff4:	20008000 	.word	0x20008000
    eff8:	20008118 	.word	0x20008118
    effc:	0001fcd9 	.word	0x0001fcd9
    f000:	0001fbcc 	.word	0x0001fbcc
    f004:	200080e0 	.word	0x200080e0
    f008:	2000a918 	.word	0x2000a918
    f00c:	0001fcf9 	.word	0x0001fcf9

0000f010 <hci_event_prio>:
{
    f010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f014:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    f016:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    f01a:	4630      	mov	r0, r6
    f01c:	f00d f8d2 	bl	1c1c4 <net_buf_simple_headroom>
	state->len = buf->len;
    f020:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f024:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f026:	f1b8 0f01 	cmp.w	r8, #1
    f02a:	d80b      	bhi.n	f044 <hci_event_prio+0x34>
    f02c:	f641 02ae 	movw	r2, #6318	; 0x18ae
    f030:	491a      	ldr	r1, [pc, #104]	; (f09c <hci_event_prio+0x8c>)
    f032:	481b      	ldr	r0, [pc, #108]	; (f0a0 <hci_event_prio+0x90>)
    f034:	f00a fb70 	bl	19718 <printk>
    f038:	4040      	eors	r0, r0
    f03a:	f380 8811 	msr	BASEPRI, r0
    f03e:	f04f 0003 	mov.w	r0, #3
    f042:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    f044:	4630      	mov	r0, r6
    f046:	2102      	movs	r1, #2
    f048:	f005 fc00 	bl	1484c <net_buf_simple_pull_mem>
    f04c:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f04e:	7800      	ldrb	r0, [r0, #0]
    f050:	f00b fe8e 	bl	1ad70 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f054:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f056:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f058:	d40b      	bmi.n	f072 <hci_event_prio+0x62>
    f05a:	f641 02b2 	movw	r2, #6322	; 0x18b2
    f05e:	490f      	ldr	r1, [pc, #60]	; (f09c <hci_event_prio+0x8c>)
    f060:	480f      	ldr	r0, [pc, #60]	; (f0a0 <hci_event_prio+0x90>)
    f062:	f00a fb59 	bl	19718 <printk>
    f066:	4040      	eors	r0, r0
    f068:	f380 8811 	msr	BASEPRI, r0
    f06c:	f04f 0003 	mov.w	r0, #3
    f070:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    f072:	2305      	movs	r3, #5
    f074:	4621      	mov	r1, r4
    f076:	4a0b      	ldr	r2, [pc, #44]	; (f0a4 <hci_event_prio+0x94>)
    f078:	7838      	ldrb	r0, [r7, #0]
    f07a:	f7fe fdb3 	bl	dbe4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f07e:	07b3      	lsls	r3, r6, #30
    f080:	d507      	bpl.n	f092 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    f082:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f084:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f088:	fa10 f585 	uxtah	r5, r0, r5
    f08c:	60a5      	str	r5, [r4, #8]
}
    f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f092:	4620      	mov	r0, r4
}
    f094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    f098:	f005 bae0 	b.w	1465c <net_buf_unref>
    f09c:	0001f9af 	.word	0x0001f9af
    f0a0:	0001e6bc 	.word	0x0001e6bc
    f0a4:	0001dac0 	.word	0x0001dac0

0000f0a8 <bt_recv>:
{
    f0a8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f0aa:	7d02      	ldrb	r2, [r0, #20]
    f0ac:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    f0ae:	2a01      	cmp	r2, #1
    f0b0:	d007      	beq.n	f0c2 <bt_recv+0x1a>
    f0b2:	2a03      	cmp	r2, #3
    f0b4:	d113      	bne.n	f0de <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    f0b6:	480f      	ldr	r0, [pc, #60]	; (f0f4 <bt_recv+0x4c>)
    f0b8:	4629      	mov	r1, r5
    f0ba:	f005 faa1 	bl	14600 <net_buf_put>
		return 0;
    f0be:	2000      	movs	r0, #0
    f0c0:	e00c      	b.n	f0dc <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f0c2:	6883      	ldr	r3, [r0, #8]
    f0c4:	7818      	ldrb	r0, [r3, #0]
    f0c6:	f00b fe53 	bl	1ad70 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f0ca:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f0cc:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f0ce:	d502      	bpl.n	f0d6 <bt_recv+0x2e>
			hci_event_prio(buf);
    f0d0:	4628      	mov	r0, r5
    f0d2:	f7ff ff9d 	bl	f010 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f0d6:	f014 0002 	ands.w	r0, r4, #2
    f0da:	d1ec      	bne.n	f0b6 <bt_recv+0xe>
}
    f0dc:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f0de:	2145      	movs	r1, #69	; 0x45
    f0e0:	4805      	ldr	r0, [pc, #20]	; (f0f8 <bt_recv+0x50>)
    f0e2:	f00a fb19 	bl	19718 <printk>
		net_buf_unref(buf);
    f0e6:	4628      	mov	r0, r5
    f0e8:	f005 fab8 	bl	1465c <net_buf_unref>
		return -EINVAL;
    f0ec:	f06f 0015 	mvn.w	r0, #21
    f0f0:	e7f4      	b.n	f0dc <bt_recv+0x34>
    f0f2:	bf00      	nop
    f0f4:	200080fc 	.word	0x200080fc
    f0f8:	0001fd1f 	.word	0x0001fd1f

0000f0fc <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f0fc:	4a08      	ldr	r2, [pc, #32]	; (f120 <bt_hci_driver_register+0x24>)
{
    f0fe:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f100:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    f104:	b930      	cbnz	r0, f114 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f106:	68d9      	ldr	r1, [r3, #12]
    f108:	b139      	cbz	r1, f11a <bt_hci_driver_register+0x1e>
    f10a:	6919      	ldr	r1, [r3, #16]
    f10c:	b129      	cbz	r1, f11a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f10e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    f112:	4770      	bx	lr
		return -EALREADY;
    f114:	f06f 0044 	mvn.w	r0, #68	; 0x44
    f118:	4770      	bx	lr
		return -EINVAL;
    f11a:	f06f 0015 	mvn.w	r0, #21
}
    f11e:	4770      	bx	lr
    f120:	20008000 	.word	0x20008000

0000f124 <bt_finalize_init>:
{
    f124:	b508      	push	{r3, lr}
    f126:	2102      	movs	r1, #2
    f128:	4803      	ldr	r0, [pc, #12]	; (f138 <bt_finalize_init+0x14>)
    f12a:	f00b fe48 	bl	1adbe <atomic_or>
}
    f12e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    f132:	2000      	movs	r0, #0
    f134:	f7ff bb68 	b.w	e808 <bt_le_scan_update>
    f138:	20008094 	.word	0x20008094

0000f13c <bt_init>:
{
    f13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f13e:	4d60      	ldr	r5, [pc, #384]	; (f2c0 <bt_init+0x184>)
    f140:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f144:	6899      	ldr	r1, [r3, #8]
    f146:	f011 0101 	ands.w	r1, r1, #1
    f14a:	d11e      	bne.n	f18a <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f14c:	f640 4003 	movw	r0, #3075	; 0xc03
    f150:	aa01      	add	r2, sp, #4
    f152:	f7fe fffb 	bl	e14c <bt_hci_cmd_send_sync>
		if (err) {
    f156:	4604      	mov	r4, r0
    f158:	2800      	cmp	r0, #0
    f15a:	f040 80ad 	bne.w	f2b8 <bt_init+0x17c>
	uint8_t status = buf->data[0];
    f15e:	9b01      	ldr	r3, [sp, #4]
    f160:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f162:	781b      	ldrb	r3, [r3, #0]
    f164:	b973      	cbnz	r3, f184 <bt_init+0x48>
	scan_dev_found_cb = NULL;
    f166:	4a57      	ldr	r2, [pc, #348]	; (f2c4 <bt_init+0x188>)
    f168:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f16a:	f105 0394 	add.w	r3, r5, #148	; 0x94
    f16e:	4618      	mov	r0, r3
    f170:	f00b fe1f 	bl	1adb2 <atomic_get>
    f174:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f178:	e8d3 2fef 	ldaex	r2, [r3]
    f17c:	e8c3 0fe1 	stlex	r1, r0, [r3]
    f180:	2900      	cmp	r1, #0
    f182:	d1f9      	bne.n	f178 <bt_init+0x3c>
		net_buf_unref(rsp);
    f184:	9801      	ldr	r0, [sp, #4]
    f186:	f005 fa69 	bl	1465c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f18a:	2100      	movs	r1, #0
    f18c:	f241 0003 	movw	r0, #4099	; 0x1003
    f190:	aa01      	add	r2, sp, #4
    f192:	f7fe ffdb 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f196:	4604      	mov	r4, r0
    f198:	2800      	cmp	r0, #0
    f19a:	f040 808d 	bne.w	f2b8 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f19e:	9b01      	ldr	r3, [sp, #4]
    f1a0:	2208      	movs	r2, #8
    f1a2:	6899      	ldr	r1, [r3, #8]
    f1a4:	4848      	ldr	r0, [pc, #288]	; (f2c8 <bt_init+0x18c>)
    f1a6:	3101      	adds	r1, #1
    f1a8:	f00b fd16 	bl	1abd8 <memcpy>
	net_buf_unref(rsp);
    f1ac:	9801      	ldr	r0, [sp, #4]
    f1ae:	f005 fa55 	bl	1465c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f1b2:	4621      	mov	r1, r4
    f1b4:	f241 0001 	movw	r0, #4097	; 0x1001
    f1b8:	aa01      	add	r2, sp, #4
    f1ba:	f7fe ffc7 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f1be:	4604      	mov	r4, r0
    f1c0:	2800      	cmp	r0, #0
    f1c2:	d179      	bne.n	f2b8 <bt_init+0x17c>
	read_local_ver_complete(rsp);
    f1c4:	9801      	ldr	r0, [sp, #4]
    f1c6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f1c8:	785a      	ldrb	r2, [r3, #1]
    f1ca:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f1ce:	78d9      	ldrb	r1, [r3, #3]
    f1d0:	789a      	ldrb	r2, [r3, #2]
    f1d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f1d6:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f1d8:	791a      	ldrb	r2, [r3, #4]
    f1da:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f1de:	7a19      	ldrb	r1, [r3, #8]
    f1e0:	79da      	ldrb	r2, [r3, #7]
    f1e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f1e6:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f1e8:	795a      	ldrb	r2, [r3, #5]
    f1ea:	799b      	ldrb	r3, [r3, #6]
    f1ec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f1f0:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f1f2:	f005 fa33 	bl	1465c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f1f6:	4621      	mov	r1, r4
    f1f8:	f241 0002 	movw	r0, #4098	; 0x1002
    f1fc:	aa01      	add	r2, sp, #4
    f1fe:	f7fe ffa5 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f202:	4604      	mov	r4, r0
    f204:	2800      	cmp	r0, #0
    f206:	d157      	bne.n	f2b8 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
    f208:	9b01      	ldr	r3, [sp, #4]
    f20a:	2240      	movs	r2, #64	; 0x40
    f20c:	6899      	ldr	r1, [r3, #8]
    f20e:	482f      	ldr	r0, [pc, #188]	; (f2cc <bt_init+0x190>)
    f210:	3101      	adds	r1, #1
    f212:	f00b fce1 	bl	1abd8 <memcpy>
	net_buf_unref(rsp);
    f216:	9801      	ldr	r0, [sp, #4]
    f218:	f005 fa20 	bl	1465c <net_buf_unref>
		err = prng_init();
    f21c:	f000 fed6 	bl	ffcc <prng_init>
		if (err) {
    f220:	4604      	mov	r4, r0
    f222:	2800      	cmp	r0, #0
    f224:	d148      	bne.n	f2b8 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f226:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    f22a:	069f      	lsls	r7, r3, #26
    f22c:	d40e      	bmi.n	f24c <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    f22e:	2157      	movs	r1, #87	; 0x57
    f230:	4827      	ldr	r0, [pc, #156]	; (f2d0 <bt_init+0x194>)
    f232:	f00a fa71 	bl	19718 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f236:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f23a:	065e      	lsls	r6, r3, #25
    f23c:	d44c      	bmi.n	f2d8 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
    f23e:	2145      	movs	r1, #69	; 0x45
    f240:	4824      	ldr	r0, [pc, #144]	; (f2d4 <bt_init+0x198>)
    f242:	f00a fa69 	bl	19718 <printk>
		return -ENODEV;
    f246:	f06f 0412 	mvn.w	r4, #18
    f24a:	e035      	b.n	f2b8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    f24c:	2107      	movs	r1, #7
    f24e:	f640 4033 	movw	r0, #3123	; 0xc33
    f252:	f7fe ff31 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    f256:	4607      	mov	r7, r0
    f258:	b910      	cbnz	r0, f260 <bt_init+0x124>
		return -ENOBUFS;
    f25a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f25e:	e02b      	b.n	f2b8 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
    f260:	2107      	movs	r1, #7
    f262:	3008      	adds	r0, #8
    f264:	f005 fb10 	bl	14888 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    f268:	4621      	mov	r1, r4
    f26a:	2207      	movs	r2, #7
    f26c:	4606      	mov	r6, r0
    f26e:	f00b fcde 	bl	1ac2e <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f272:	231b      	movs	r3, #27
    f274:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f276:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f278:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f27a:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f27c:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f27e:	4639      	mov	r1, r7
    f280:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f284:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f286:	f7fe ff61 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f28a:	4604      	mov	r4, r0
    f28c:	b9a0      	cbnz	r0, f2b8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    f28e:	2101      	movs	r1, #1
    f290:	f640 4031 	movw	r0, #3121	; 0xc31
    f294:	f7fe ff10 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    f298:	4606      	mov	r6, r0
    f29a:	2800      	cmp	r0, #0
    f29c:	d0dd      	beq.n	f25a <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
    f29e:	2101      	movs	r1, #1
    f2a0:	3008      	adds	r0, #8
    f2a2:	f00c ffa7 	bl	1c1f4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    f2a6:	4622      	mov	r2, r4
    f2a8:	4631      	mov	r1, r6
    f2aa:	f640 4031 	movw	r0, #3121	; 0xc31
    f2ae:	f7fe ff4d 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f2b2:	4604      	mov	r4, r0
    f2b4:	2800      	cmp	r0, #0
    f2b6:	d0be      	beq.n	f236 <bt_init+0xfa>
}
    f2b8:	4620      	mov	r0, r4
    f2ba:	b003      	add	sp, #12
    f2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2be:	bf00      	nop
    f2c0:	20008000 	.word	0x20008000
    f2c4:	2000a93c 	.word	0x2000a93c
    f2c8:	2000803c 	.word	0x2000803c
    f2cc:	20008044 	.word	0x20008044
    f2d0:	0001fd38 	.word	0x0001fd38
    f2d4:	0001fd6b 	.word	0x0001fd6b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f2d8:	2100      	movs	r1, #0
    f2da:	f242 0003 	movw	r0, #8195	; 0x2003
    f2de:	aa01      	add	r2, sp, #4
    f2e0:	f7fe ff34 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f2e4:	4604      	mov	r4, r0
    f2e6:	2800      	cmp	r0, #0
    f2e8:	d1e6      	bne.n	f2b8 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f2ea:	9b01      	ldr	r3, [sp, #4]
    f2ec:	2208      	movs	r2, #8
    f2ee:	6899      	ldr	r1, [r3, #8]
    f2f0:	48a6      	ldr	r0, [pc, #664]	; (f58c <bt_init+0x450>)
    f2f2:	3101      	adds	r1, #1
    f2f4:	f00b fc70 	bl	1abd8 <memcpy>
	net_buf_unref(rsp);
    f2f8:	9801      	ldr	r0, [sp, #4]
    f2fa:	f005 f9af 	bl	1465c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f2fe:	4621      	mov	r1, r4
    f300:	f242 0002 	movw	r0, #8194	; 0x2002
    f304:	aa01      	add	r2, sp, #4
    f306:	f7fe ff21 	bl	e14c <bt_hci_cmd_send_sync>
		if (err) {
    f30a:	4604      	mov	r4, r0
    f30c:	2800      	cmp	r0, #0
    f30e:	d1d3      	bne.n	f2b8 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f314:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f318:	b291      	uxth	r1, r2
    f31a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    f31e:	b121      	cbz	r1, f32a <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f320:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f322:	489b      	ldr	r0, [pc, #620]	; (f590 <bt_init+0x454>)
    f324:	4611      	mov	r1, r2
    f326:	f00d fdec 	bl	1cf02 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f32a:	9801      	ldr	r0, [sp, #4]
    f32c:	f005 f996 	bl	1465c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f330:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f334:	f016 0620 	ands.w	r6, r6, #32
    f338:	f000 80d4 	beq.w	f4e4 <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f33c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f340:	071c      	lsls	r4, r3, #28
    f342:	d512      	bpl.n	f36a <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f344:	2100      	movs	r1, #0
    f346:	f242 001c 	movw	r0, #8220	; 0x201c
    f34a:	aa01      	add	r2, sp, #4
    f34c:	f7fe fefe 	bl	e14c <bt_hci_cmd_send_sync>
		if (err) {
    f350:	4604      	mov	r4, r0
    f352:	2800      	cmp	r0, #0
    f354:	d1b0      	bne.n	f2b8 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
    f356:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f358:	6883      	ldr	r3, [r0, #8]
    f35a:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f35e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f362:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    f366:	f005 f979 	bl	1465c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f36a:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f36e:	0698      	lsls	r0, r3, #26
    f370:	d524      	bpl.n	f3bc <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f372:	4668      	mov	r0, sp
    f374:	f10d 0102 	add.w	r1, sp, #2
    f378:	f7fe ff4a 	bl	e210 <hci_le_read_max_data_len>
		if (err) {
    f37c:	4604      	mov	r4, r0
    f37e:	2800      	cmp	r0, #0
    f380:	d19a      	bne.n	f2b8 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f382:	2104      	movs	r1, #4
    f384:	f242 0024 	movw	r0, #8228	; 0x2024
    f388:	f7fe fe96 	bl	e0b8 <bt_hci_cmd_create>
		if (!buf) {
    f38c:	4606      	mov	r6, r0
    f38e:	2800      	cmp	r0, #0
    f390:	f43f af63 	beq.w	f25a <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
    f394:	2104      	movs	r1, #4
    f396:	3008      	adds	r0, #8
    f398:	f005 fa76 	bl	14888 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f39c:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3a0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f3a2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f3a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3a8:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f3aa:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3ac:	f242 0024 	movw	r0, #8228	; 0x2024
    f3b0:	f7fe fecc 	bl	e14c <bt_hci_cmd_send_sync>
		if (err) {
    f3b4:	4604      	mov	r4, r0
    f3b6:	2800      	cmp	r0, #0
    f3b8:	f47f af7e 	bne.w	f2b8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f3bc:	2108      	movs	r1, #8
    f3be:	f242 0001 	movw	r0, #8193	; 0x2001
    f3c2:	f7fe fe79 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    f3c6:	4604      	mov	r4, r0
    f3c8:	2800      	cmp	r0, #0
    f3ca:	f43f af46 	beq.w	f25a <bt_init+0x11e>
    f3ce:	2108      	movs	r1, #8
    f3d0:	4408      	add	r0, r1
    f3d2:	f005 fa59 	bl	14888 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f3d6:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f3da:	f012 0f02 	tst.w	r2, #2
    f3de:	bf14      	ite	ne
    f3e0:	232f      	movne	r3, #47	; 0x2f
    f3e2:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f3e4:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f3e6:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f3ea:	bf48      	it	mi
    f3ec:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f3f0:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    f3f4:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f3f8:	bf18      	it	ne
    f3fa:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    f3fe:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f400:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f404:	4621      	mov	r1, r4
    f406:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f408:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f40a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f40c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f40e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f410:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f412:	71c2      	strb	r2, [r0, #7]
    f414:	f242 0001 	movw	r0, #8193	; 0x2001
    f418:	f7fe fe98 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f41c:	4604      	mov	r4, r0
    f41e:	2800      	cmp	r0, #0
    f420:	f47f af4a 	bne.w	f2b8 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f424:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f428:	069a      	lsls	r2, r3, #26
    f42a:	d41e      	bmi.n	f46a <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
    f42c:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    f430:	b9d9      	cbnz	r1, f46a <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f432:	f241 0005 	movw	r0, #4101	; 0x1005
    f436:	aa01      	add	r2, sp, #4
    f438:	f7fe fe88 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f43c:	4604      	mov	r4, r0
    f43e:	2800      	cmp	r0, #0
    f440:	f47f af3a 	bne.w	f2b8 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
    f444:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    f448:	b963      	cbnz	r3, f464 <bt_init+0x328>
    f44a:	9b01      	ldr	r3, [sp, #4]
    f44c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f44e:	785a      	ldrb	r2, [r3, #1]
    f450:	7899      	ldrb	r1, [r3, #2]
    f452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f456:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f45a:	889a      	ldrh	r2, [r3, #4]
    f45c:	484c      	ldr	r0, [pc, #304]	; (f590 <bt_init+0x454>)
    f45e:	4611      	mov	r1, r2
    f460:	f00d fd4f 	bl	1cf02 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f464:	9801      	ldr	r0, [sp, #4]
    f466:	f005 f8f9 	bl	1465c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f46a:	2108      	movs	r1, #8
    f46c:	f640 4001 	movw	r0, #3073	; 0xc01
    f470:	f7fe fe22 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    f474:	4604      	mov	r4, r0
    f476:	2800      	cmp	r0, #0
    f478:	f43f aeef 	beq.w	f25a <bt_init+0x11e>
    f47c:	2108      	movs	r1, #8
    f47e:	4408      	add	r0, r1
    f480:	f005 fa02 	bl	14888 <net_buf_simple_add>
	dst[0] = val;
    f484:	2310      	movs	r3, #16
    f486:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f488:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f48a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f48c:	7043      	strb	r3, [r0, #1]
    f48e:	2602      	movs	r6, #2
    f490:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f492:	4621      	mov	r1, r4
	dst[0] = val;
    f494:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f496:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f498:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f49a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f49c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f49e:	71c3      	strb	r3, [r0, #7]
    f4a0:	f640 4001 	movw	r0, #3073	; 0xc01
    f4a4:	f7fe fe52 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f4a8:	4604      	mov	r4, r0
    f4aa:	2800      	cmp	r0, #0
    f4ac:	f47f af04 	bne.w	f2b8 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f4b0:	4601      	mov	r1, r0
    f4b2:	aa01      	add	r2, sp, #4
    f4b4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f4b8:	f7fe fe48 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f4bc:	4604      	mov	r4, r0
    f4be:	b360      	cbz	r0, f51a <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
    f4c0:	2157      	movs	r1, #87	; 0x57
    f4c2:	4834      	ldr	r0, [pc, #208]	; (f594 <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
    f4c4:	f00a f928 	bl	19718 <printk>
		err = bt_conn_init();
    f4c8:	f001 fcd0 	bl	10e6c <bt_conn_init>
		if (err) {
    f4cc:	4604      	mov	r4, r0
    f4ce:	2800      	cmp	r0, #0
    f4d0:	f47f aef2 	bne.w	f2b8 <bt_init+0x17c>
		if (!bt_dev.id_count) {
    f4d4:	79eb      	ldrb	r3, [r5, #7]
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d150      	bne.n	f57c <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
    f4da:	2149      	movs	r1, #73	; 0x49
    f4dc:	482e      	ldr	r0, [pc, #184]	; (f598 <bt_init+0x45c>)
    f4de:	f00a f91b 	bl	19718 <printk>
			return 0;
    f4e2:	e6e9      	b.n	f2b8 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f4e4:	2102      	movs	r1, #2
    f4e6:	f640 406d 	movw	r0, #3181	; 0xc6d
    f4ea:	f7fe fde5 	bl	e0b8 <bt_hci_cmd_create>
		if (!buf) {
    f4ee:	4604      	mov	r4, r0
    f4f0:	2800      	cmp	r0, #0
    f4f2:	f43f aeb2 	beq.w	f25a <bt_init+0x11e>
    f4f6:	2102      	movs	r1, #2
    f4f8:	3008      	adds	r0, #8
    f4fa:	f005 f9c5 	bl	14888 <net_buf_simple_add>
		cp_le->le = 0x01;
    f4fe:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f500:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    f502:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f504:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f506:	4632      	mov	r2, r6
    f508:	f640 406d 	movw	r0, #3181	; 0xc6d
    f50c:	f7fe fe1e 	bl	e14c <bt_hci_cmd_send_sync>
		if (err) {
    f510:	4604      	mov	r4, r0
    f512:	2800      	cmp	r0, #0
    f514:	f43f af12 	beq.w	f33c <bt_init+0x200>
    f518:	e6ce      	b.n	f2b8 <bt_init+0x17c>
	net_buf_unref(rsp);
    f51a:	9801      	ldr	r0, [sp, #4]
    f51c:	f005 f89e 	bl	1465c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f520:	4621      	mov	r1, r4
    f522:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f526:	aa01      	add	r2, sp, #4
    f528:	f7fe fe10 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f52c:	4604      	mov	r4, r0
    f52e:	b110      	cbz	r0, f536 <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
    f530:	2157      	movs	r1, #87	; 0x57
    f532:	481a      	ldr	r0, [pc, #104]	; (f59c <bt_init+0x460>)
    f534:	e7c6      	b.n	f4c4 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
    f536:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f538:	4632      	mov	r2, r6
    f53a:	6899      	ldr	r1, [r3, #8]
    f53c:	4818      	ldr	r0, [pc, #96]	; (f5a0 <bt_init+0x464>)
    f53e:	3101      	adds	r1, #1
    f540:	f00b fb4a 	bl	1abd8 <memcpy>
	net_buf_unref(rsp);
    f544:	9801      	ldr	r0, [sp, #4]
    f546:	f005 f889 	bl	1465c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f54a:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    f54e:	075b      	lsls	r3, r3, #29
    f550:	d5ba      	bpl.n	f4c8 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f552:	4621      	mov	r1, r4
    f554:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f558:	aa01      	add	r2, sp, #4
    f55a:	f7fe fdf7 	bl	e14c <bt_hci_cmd_send_sync>
		if (err) {
    f55e:	b110      	cbz	r0, f566 <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
    f560:	2157      	movs	r1, #87	; 0x57
    f562:	4810      	ldr	r0, [pc, #64]	; (f5a4 <bt_init+0x468>)
    f564:	e7ae      	b.n	f4c4 <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f566:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f568:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f56a:	480f      	ldr	r0, [pc, #60]	; (f5a8 <bt_init+0x46c>)
    f56c:	6899      	ldr	r1, [r3, #8]
    f56e:	4411      	add	r1, r2
    f570:	f00b fb32 	bl	1abd8 <memcpy>
		net_buf_unref(rsp);
    f574:	9801      	ldr	r0, [sp, #4]
    f576:	f005 f871 	bl	1465c <net_buf_unref>
    f57a:	e7a5      	b.n	f4c8 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f57c:	2104      	movs	r1, #4
    f57e:	480b      	ldr	r0, [pc, #44]	; (f5ac <bt_init+0x470>)
    f580:	f00b fc1d 	bl	1adbe <atomic_or>
	bt_finalize_init();
    f584:	f7ff fdce 	bl	f124 <bt_finalize_init>
	return 0;
    f588:	e696      	b.n	f2b8 <bt_init+0x17c>
    f58a:	bf00      	nop
    f58c:	20008098 	.word	0x20008098
    f590:	200080c8 	.word	0x200080c8
    f594:	0001fd94 	.word	0x0001fd94
    f598:	0001fe19 	.word	0x0001fe19
    f59c:	0001fdbd 	.word	0x0001fdbd
    f5a0:	20008085 	.word	0x20008085
    f5a4:	0001fdeb 	.word	0x0001fdeb
    f5a8:	20008084 	.word	0x20008084
    f5ac:	20008094 	.word	0x20008094

0000f5b0 <init_work>:
{
    f5b0:	b510      	push	{r4, lr}
	err = bt_init();
    f5b2:	f7ff fdc3 	bl	f13c <bt_init>
	if (ready_cb) {
    f5b6:	4b03      	ldr	r3, [pc, #12]	; (f5c4 <init_work+0x14>)
    f5b8:	681b      	ldr	r3, [r3, #0]
    f5ba:	b113      	cbz	r3, f5c2 <init_work+0x12>
}
    f5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f5c0:	4718      	bx	r3
}
    f5c2:	bd10      	pop	{r4, pc}
    f5c4:	2000a930 	.word	0x2000a930

0000f5c8 <bt_enable>:
{
    f5c8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    f5cc:	4d35      	ldr	r5, [pc, #212]	; (f6a4 <bt_enable+0xdc>)
{
    f5ce:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f5d0:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
    f5d4:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    f5d6:	b94b      	cbnz	r3, f5ec <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    f5d8:	2145      	movs	r1, #69	; 0x45
    f5da:	4833      	ldr	r0, [pc, #204]	; (f6a8 <bt_enable+0xe0>)
    f5dc:	f00a f89c 	bl	19718 <printk>
		return -ENODEV;
    f5e0:	f06f 0412 	mvn.w	r4, #18
}
    f5e4:	4620      	mov	r0, r4
    f5e6:	b008      	add	sp, #32
    f5e8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f5ec:	2101      	movs	r1, #1
    f5ee:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f5f2:	f00b fbe4 	bl	1adbe <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f5f6:	07c2      	lsls	r2, r0, #31
    f5f8:	d451      	bmi.n	f69e <bt_enable+0xd6>
		err = bt_settings_init();
    f5fa:	f7fe f913 	bl	d824 <bt_settings_init>
		if (err) {
    f5fe:	4604      	mov	r4, r0
    f600:	2800      	cmp	r0, #0
    f602:	d1ef      	bne.n	f5e4 <bt_enable+0x1c>
	ready_cb = cb;
    f604:	4b29      	ldr	r3, [pc, #164]	; (f6ac <bt_enable+0xe4>)
    f606:	f04f 0800 	mov.w	r8, #0
    f60a:	f04f 0900 	mov.w	r9, #0
    f60e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f610:	f06f 0308 	mvn.w	r3, #8
    f614:	e9cd 0000 	strd	r0, r0, [sp]
    f618:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f61c:	9004      	str	r0, [sp, #16]
    f61e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f622:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f626:	4b22      	ldr	r3, [pc, #136]	; (f6b0 <bt_enable+0xe8>)
    f628:	4922      	ldr	r1, [pc, #136]	; (f6b4 <bt_enable+0xec>)
    f62a:	4823      	ldr	r0, [pc, #140]	; (f6b8 <bt_enable+0xf0>)
    f62c:	f008 ffdc 	bl	185e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f630:	4922      	ldr	r1, [pc, #136]	; (f6bc <bt_enable+0xf4>)
    f632:	4821      	ldr	r0, [pc, #132]	; (f6b8 <bt_enable+0xf0>)
    f634:	f00d fc7f 	bl	1cf36 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f638:	f06f 0307 	mvn.w	r3, #7
    f63c:	f640 0298 	movw	r2, #2200	; 0x898
    f640:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f644:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f648:	e9cd 4400 	strd	r4, r4, [sp]
    f64c:	4b1c      	ldr	r3, [pc, #112]	; (f6c0 <bt_enable+0xf8>)
    f64e:	491d      	ldr	r1, [pc, #116]	; (f6c4 <bt_enable+0xfc>)
    f650:	9404      	str	r4, [sp, #16]
    f652:	481d      	ldr	r0, [pc, #116]	; (f6c8 <bt_enable+0x100>)
    f654:	f008 ffc8 	bl	185e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f658:	491c      	ldr	r1, [pc, #112]	; (f6cc <bt_enable+0x104>)
    f65a:	481b      	ldr	r0, [pc, #108]	; (f6c8 <bt_enable+0x100>)
    f65c:	f00d fc6b 	bl	1cf36 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f660:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f664:	68db      	ldr	r3, [r3, #12]
    f666:	4798      	blx	r3
	if (err) {
    f668:	4604      	mov	r4, r0
    f66a:	b128      	cbz	r0, f678 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    f66c:	4602      	mov	r2, r0
    f66e:	2145      	movs	r1, #69	; 0x45
    f670:	4817      	ldr	r0, [pc, #92]	; (f6d0 <bt_enable+0x108>)
    f672:	f00a f851 	bl	19718 <printk>
		return err;
    f676:	e7b5      	b.n	f5e4 <bt_enable+0x1c>
	if (!cb) {
    f678:	b926      	cbnz	r6, f684 <bt_enable+0xbc>
}
    f67a:	b008      	add	sp, #32
    f67c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    f680:	f7ff bd5c 	b.w	f13c <bt_init>
    f684:	2101      	movs	r1, #1
    f686:	f105 0090 	add.w	r0, r5, #144	; 0x90
    f68a:	f00b fb98 	bl	1adbe <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f68e:	07c3      	lsls	r3, r0, #31
    f690:	d4a8      	bmi.n	f5e4 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    f692:	4810      	ldr	r0, [pc, #64]	; (f6d4 <bt_enable+0x10c>)
    f694:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f698:	f00d fbdb 	bl	1ce52 <k_queue_append>
    f69c:	e7a2      	b.n	f5e4 <bt_enable+0x1c>
		return -EALREADY;
    f69e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    f6a2:	e79f      	b.n	f5e4 <bt_enable+0x1c>
    f6a4:	20008000 	.word	0x20008000
    f6a8:	0001fe4b 	.word	0x0001fe4b
    f6ac:	2000a930 	.word	0x2000a930
    f6b0:	0000eeb9 	.word	0x0000eeb9
    f6b4:	2000d680 	.word	0x2000d680
    f6b8:	20008980 	.word	0x20008980
    f6bc:	0001fe69 	.word	0x0001fe69
    f6c0:	0000dcd1 	.word	0x0000dcd1
    f6c4:	2000cde8 	.word	0x2000cde8
    f6c8:	200088f0 	.word	0x200088f0
    f6cc:	0001fe6f 	.word	0x0001fe6f
    f6d0:	0001fe75 	.word	0x0001fe75
    f6d4:	2000a3a0 	.word	0x2000a3a0

0000f6d8 <bt_get_name>:
}
    f6d8:	4800      	ldr	r0, [pc, #0]	; (f6dc <bt_get_name+0x4>)
    f6da:	4770      	bx	lr
    f6dc:	0001e4ed 	.word	0x0001e4ed

0000f6e0 <bt_id_create>:
{
    f6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f6e2:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    f6e4:	4605      	mov	r5, r0
    f6e6:	b918      	cbnz	r0, f6f0 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f6e8:	b314      	cbz	r4, f730 <bt_id_create+0x50>
		return -EINVAL;
    f6ea:	f06f 0415 	mvn.w	r4, #21
    f6ee:	e01c      	b.n	f72a <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    f6f0:	2300      	movs	r3, #0
    f6f2:	4669      	mov	r1, sp
    f6f4:	9300      	str	r3, [sp, #0]
    f6f6:	f8cd 3003 	str.w	r3, [sp, #3]
    f6fa:	f00b fb6b 	bl	1add4 <bt_addr_le_cmp>
    f6fe:	2800      	cmp	r0, #0
    f700:	d0f2      	beq.n	f6e8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f702:	782b      	ldrb	r3, [r5, #0]
    f704:	2b01      	cmp	r3, #1
    f706:	d104      	bne.n	f712 <bt_id_create+0x32>
    f708:	79ab      	ldrb	r3, [r5, #6]
    f70a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f70e:	2bc0      	cmp	r3, #192	; 0xc0
    f710:	d004      	beq.n	f71c <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    f712:	2145      	movs	r1, #69	; 0x45
    f714:	480d      	ldr	r0, [pc, #52]	; (f74c <bt_id_create+0x6c>)
    f716:	f009 ffff 	bl	19718 <printk>
			return -EINVAL;
    f71a:	e7e6      	b.n	f6ea <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    f71c:	4628      	mov	r0, r5
    f71e:	f7fe f949 	bl	d9b4 <id_find>
    f722:	2800      	cmp	r0, #0
    f724:	dbe0      	blt.n	f6e8 <bt_id_create+0x8>
			return -EALREADY;
    f726:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    f72a:	4620      	mov	r0, r4
    f72c:	b003      	add	sp, #12
    f72e:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f730:	4b07      	ldr	r3, [pc, #28]	; (f750 <bt_id_create+0x70>)
    f732:	79dc      	ldrb	r4, [r3, #7]
    f734:	2c01      	cmp	r4, #1
    f736:	d006      	beq.n	f746 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    f738:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    f73a:	4629      	mov	r1, r5
    f73c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    f73e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    f740:	f7fe fa90 	bl	dc64 <id_create.constprop.0>
	return new_id;
    f744:	e7f1      	b.n	f72a <bt_id_create+0x4a>
		return -ENOMEM;
    f746:	f06f 040b 	mvn.w	r4, #11
    f74a:	e7ee      	b.n	f72a <bt_id_create+0x4a>
    f74c:	0001fe96 	.word	0x0001fe96
    f750:	20008000 	.word	0x20008000

0000f754 <bt_setup_public_id_addr>:
{
    f754:	b570      	push	{r4, r5, r6, lr}
    f756:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    f758:	2100      	movs	r1, #0
    f75a:	f241 0009 	movw	r0, #4105	; 0x1009
    f75e:	aa01      	add	r2, sp, #4
    f760:	f7fe fcf4 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f764:	4e1d      	ldr	r6, [pc, #116]	; (f7dc <bt_setup_public_id_addr+0x88>)
    f766:	4604      	mov	r4, r0
    f768:	b138      	cbz	r0, f77a <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    f76a:	2157      	movs	r1, #87	; 0x57
    f76c:	481c      	ldr	r0, [pc, #112]	; (f7e0 <bt_setup_public_id_addr+0x8c>)
    f76e:	f009 ffd3 	bl	19718 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    f772:	2300      	movs	r3, #0
    f774:	71f3      	strb	r3, [r6, #7]
}
    f776:	b006      	add	sp, #24
    f778:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f77a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    f77c:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f77e:	689d      	ldr	r5, [r3, #8]
    f780:	a904      	add	r1, sp, #16
    f782:	3501      	adds	r5, #1
    f784:	9004      	str	r0, [sp, #16]
    f786:	f8ad 0014 	strh.w	r0, [sp, #20]
    f78a:	4628      	mov	r0, r5
    f78c:	f00b fa13 	bl	1abb6 <memcmp>
    f790:	b918      	cbnz	r0, f79a <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    f792:	9801      	ldr	r0, [sp, #4]
    f794:	f004 ff62 	bl	1465c <net_buf_unref>
    f798:	e7eb      	b.n	f772 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    f79a:	4b12      	ldr	r3, [pc, #72]	; (f7e4 <bt_setup_public_id_addr+0x90>)
    f79c:	2206      	movs	r2, #6
    f79e:	f8d3 0007 	ldr.w	r0, [r3, #7]
    f7a2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
    f7a6:	9002      	str	r0, [sp, #8]
    f7a8:	a902      	add	r1, sp, #8
    f7aa:	4628      	mov	r0, r5
    f7ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    f7b0:	f00b fa01 	bl	1abb6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f7b4:	2800      	cmp	r0, #0
    f7b6:	d0ec      	beq.n	f792 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    f7b8:	4629      	mov	r1, r5
    f7ba:	2206      	movs	r2, #6
    f7bc:	f10d 0011 	add.w	r0, sp, #17
    f7c0:	f00b fa0a 	bl	1abd8 <memcpy>
	net_buf_unref(rsp);
    f7c4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    f7c6:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    f7ca:	f004 ff47 	bl	1465c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    f7ce:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    f7d0:	4620      	mov	r0, r4
    f7d2:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    f7d4:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    f7d6:	f7fe fa45 	bl	dc64 <id_create.constprop.0>
    f7da:	e7cc      	b.n	f776 <bt_setup_public_id_addr+0x22>
    f7dc:	20008000 	.word	0x20008000
    f7e0:	0001fec9 	.word	0x0001fec9
    f7e4:	0001d640 	.word	0x0001d640

0000f7e8 <bt_read_static_addr>:
{
    f7e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f7ec:	4b1c      	ldr	r3, [pc, #112]	; (f860 <bt_read_static_addr+0x78>)
{
    f7ee:	4607      	mov	r7, r0
    f7f0:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    f7f4:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f7f6:	f014 0401 	ands.w	r4, r4, #1
    f7fa:	d104      	bne.n	f806 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    f7fc:	2157      	movs	r1, #87	; 0x57
    f7fe:	4819      	ldr	r0, [pc, #100]	; (f864 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
    f800:	f009 ff8a 	bl	19718 <printk>
    f804:	e00c      	b.n	f820 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    f806:	2100      	movs	r1, #0
    f808:	f64f 4009 	movw	r0, #64521	; 0xfc09
    f80c:	aa01      	add	r2, sp, #4
    f80e:	f7fe fc9d 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f812:	4605      	mov	r5, r0
    f814:	b140      	cbz	r0, f828 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    f816:	2157      	movs	r1, #87	; 0x57
    f818:	4813      	ldr	r0, [pc, #76]	; (f868 <bt_read_static_addr+0x80>)
    f81a:	f009 ff7d 	bl	19718 <printk>
		return 0;
    f81e:	2400      	movs	r4, #0
}
    f820:	4620      	mov	r0, r4
    f822:	b002      	add	sp, #8
    f824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    f828:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    f82c:	9b01      	ldr	r3, [sp, #4]
    f82e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    f830:	785c      	ldrb	r4, [r3, #1]
    f832:	42b4      	cmp	r4, r6
    f834:	bf28      	it	cs
    f836:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    f838:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    f83a:	42a5      	cmp	r5, r4
    f83c:	db07      	blt.n	f84e <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    f83e:	9801      	ldr	r0, [sp, #4]
    f840:	f004 ff0c 	bl	1465c <net_buf_unref>
	if (!cnt) {
    f844:	2c00      	cmp	r4, #0
    f846:	d1eb      	bne.n	f820 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    f848:	2157      	movs	r1, #87	; 0x57
    f84a:	4808      	ldr	r0, [pc, #32]	; (f86c <bt_read_static_addr+0x84>)
    f84c:	e7d8      	b.n	f800 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    f84e:	fb08 7005 	mla	r0, r8, r5, r7
    f852:	2216      	movs	r2, #22
    f854:	4631      	mov	r1, r6
    f856:	f00b f9bf 	bl	1abd8 <memcpy>
	for (i = 0; i < cnt; i++) {
    f85a:	3501      	adds	r5, #1
    f85c:	e7ed      	b.n	f83a <bt_read_static_addr+0x52>
    f85e:	bf00      	nop
    f860:	20008000 	.word	0x20008000
    f864:	0001feec 	.word	0x0001feec
    f868:	0001ff1d 	.word	0x0001ff1d
    f86c:	0001ff42 	.word	0x0001ff42

0000f870 <bt_setup_random_id_addr>:
{
    f870:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    f872:	4d15      	ldr	r5, [pc, #84]	; (f8c8 <bt_setup_random_id_addr+0x58>)
{
    f874:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    f876:	79ec      	ldrb	r4, [r5, #7]
    f878:	b9f4      	cbnz	r4, f8b8 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    f87a:	2101      	movs	r1, #1
    f87c:	a802      	add	r0, sp, #8
    f87e:	f7ff ffb3 	bl	f7e8 <bt_read_static_addr>
    f882:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    f884:	b1c0      	cbz	r0, f8b8 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    f886:	2716      	movs	r7, #22
    f888:	b2e6      	uxtb	r6, r4
    f88a:	ab02      	add	r3, sp, #8
    f88c:	2206      	movs	r2, #6
    f88e:	fb07 3106 	mla	r1, r7, r6, r3
    f892:	f10d 0001 	add.w	r0, sp, #1
    f896:	f00b f99f 	bl	1abd8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    f89a:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    f89c:	4669      	mov	r1, sp
    f89e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    f8a0:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    f8a4:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    f8a6:	f7fe f9dd 	bl	dc64 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    f8aa:	79ea      	ldrb	r2, [r5, #7]
    f8ac:	b2e3      	uxtb	r3, r4
    f8ae:	429a      	cmp	r2, r3
    f8b0:	d8ea      	bhi.n	f888 <bt_setup_random_id_addr+0x18>
}
    f8b2:	2000      	movs	r0, #0
    f8b4:	b009      	add	sp, #36	; 0x24
    f8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    f8b8:	2100      	movs	r1, #0
    f8ba:	4608      	mov	r0, r1
}
    f8bc:	b009      	add	sp, #36	; 0x24
    f8be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    f8c2:	f7ff bf0d 	b.w	f6e0 <bt_id_create>
    f8c6:	bf00      	nop
    f8c8:	20008000 	.word	0x20008000

0000f8cc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8d0:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    f8d2:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    f8d4:	690d      	ldr	r5, [r1, #16]
{
    f8d6:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
    f8d8:	ebb5 0b03 	subs.w	fp, r5, r3
{
    f8dc:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f8de:	4884      	ldr	r0, [pc, #528]	; (faf0 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
    f8e0:	bf18      	it	ne
    f8e2:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
    f8e6:	9307      	str	r3, [sp, #28]
    f8e8:	f00b fa63 	bl	1adb2 <atomic_get>
{
    f8ec:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    f8ee:	0782      	lsls	r2, r0, #30
{
    f8f0:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    f8f2:	f140 80ef 	bpl.w	fad4 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    f8f6:	4608      	mov	r0, r1
    f8f8:	f7fe f874 	bl	d9e4 <valid_adv_param>
    f8fc:	4607      	mov	r7, r0
    f8fe:	2800      	cmp	r0, #0
    f900:	f000 80eb 	beq.w	fada <bt_le_adv_start_legacy+0x20e>
    f904:	487a      	ldr	r0, [pc, #488]	; (faf0 <bt_le_adv_start_legacy+0x224>)
    f906:	f00b fa54 	bl	1adb2 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    f90a:	0503      	lsls	r3, r0, #20
    f90c:	d402      	bmi.n	f914 <bt_le_adv_start_legacy+0x48>
    f90e:	4878      	ldr	r0, [pc, #480]	; (faf0 <bt_le_adv_start_legacy+0x224>)
    f910:	f00b fa4f 	bl	1adb2 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f914:	f106 0810 	add.w	r8, r6, #16
    f918:	4640      	mov	r0, r8
    f91a:	f00b fa4a 	bl	1adb2 <atomic_get>
    f91e:	f3c0 1180 	ubfx	r1, r0, #6, #1
    f922:	0640      	lsls	r0, r0, #25
    f924:	f100 80dc 	bmi.w	fae0 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    f928:	220f      	movs	r2, #15
    f92a:	a80a      	add	r0, sp, #40	; 0x28
    f92c:	9105      	str	r1, [sp, #20]
    f92e:	f00b f97e 	bl	1ac2e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    f932:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    f934:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    f936:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    f93a:	68e3      	ldr	r3, [r4, #12]
    f93c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    f940:	f00b fa28 	bl	1ad94 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    f944:	7832      	ldrb	r2, [r6, #0]
    f946:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    f948:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
    f94a:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
    f94c:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
    f950:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    f954:	d004      	beq.n	f960 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f956:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    f95a:	4865      	ldr	r0, [pc, #404]	; (faf0 <bt_le_adv_start_legacy+0x224>)
    f95c:	f00b fa3d 	bl	1adda <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    f960:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
    f962:	4b64      	ldr	r3, [pc, #400]	; (faf4 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
    f964:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    f966:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    f96a:	465a      	mov	r2, fp
    f96c:	6861      	ldr	r1, [r4, #4]
    f96e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    f972:	f7fe fcd7 	bl	e324 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    f976:	4683      	mov	fp, r0
    f978:	2800      	cmp	r0, #0
    f97a:	d169      	bne.n	fa50 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    f97c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    f980:	2d00      	cmp	r5, #0
    f982:	d042      	beq.n	fa0a <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    f984:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    f986:	f00b fa17 	bl	1adb8 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    f98a:	6860      	ldr	r0, [r4, #4]
    f98c:	07c1      	lsls	r1, r0, #31
    f98e:	d544      	bpl.n	fa1a <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
    f990:	2d00      	cmp	r5, #0
    f992:	d03f      	beq.n	fa14 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    f994:	f010 0f10 	tst.w	r0, #16
    f998:	bf14      	ite	ne
    f99a:	2304      	movne	r3, #4
    f99c:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    f99e:	6921      	ldr	r1, [r4, #16]
    f9a0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    f9a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    f9a8:	f00b fa06 	bl	1adb8 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    f9ac:	210f      	movs	r1, #15
    f9ae:	f242 0006 	movw	r0, #8198	; 0x2006
    f9b2:	f7fe fb81 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
    f9b6:	4683      	mov	fp, r0
    f9b8:	2800      	cmp	r0, #0
    f9ba:	f000 8094 	beq.w	fae6 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f9be:	220f      	movs	r2, #15
    f9c0:	a90a      	add	r1, sp, #40	; 0x28
    f9c2:	3008      	adds	r0, #8
    f9c4:	f00c fc0a 	bl	1c1dc <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    f9c8:	2200      	movs	r2, #0
    f9ca:	4659      	mov	r1, fp
    f9cc:	f242 0006 	movw	r0, #8198	; 0x2006
    f9d0:	f7fe fbbc 	bl	e14c <bt_hci_cmd_send_sync>
	if (err) {
    f9d4:	2800      	cmp	r0, #0
    f9d6:	f040 8089 	bne.w	faec <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
    f9da:	b34d      	cbz	r5, fa30 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    f9dc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f9de:	07da      	lsls	r2, r3, #31
    f9e0:	d43a      	bmi.n	fa58 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
    f9e2:	2101      	movs	r1, #1
    f9e4:	4630      	mov	r0, r6
    f9e6:	f7fe fdf7 	bl	e5d8 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    f9ea:	4683      	mov	fp, r0
    f9ec:	2800      	cmp	r0, #0
    f9ee:	d06a      	beq.n	fac6 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
    f9f0:	4841      	ldr	r0, [pc, #260]	; (faf8 <bt_le_adv_start_legacy+0x22c>)
    f9f2:	2145      	movs	r1, #69	; 0x45
    f9f4:	f009 fe90 	bl	19718 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    f9f8:	9807      	ldr	r0, [sp, #28]
    f9fa:	b348      	cbz	r0, fa50 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9fc:	2100      	movs	r1, #0
    f9fe:	f000 fddb 	bl	105b8 <bt_conn_set_state>
			bt_conn_unref(conn);
    fa02:	9807      	ldr	r0, [sp, #28]
    fa04:	f000 fdac 	bl	10560 <bt_conn_unref>
    fa08:	e022      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fa0a:	9508      	str	r5, [sp, #32]
    fa0c:	a908      	add	r1, sp, #32
    fa0e:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    fa12:	e7b8      	b.n	f986 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
    fa14:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    fa18:	e7c8      	b.n	f9ac <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fa1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fa1c:	b933      	cbnz	r3, fa2c <bt_le_adv_start_legacy+0x160>
    fa1e:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    fa22:	f1c7 0303 	rsb	r3, r7, #3
    fa26:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fa2a:	e7bf      	b.n	f9ac <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fa2c:	2701      	movs	r7, #1
    fa2e:	e7f8      	b.n	fa22 <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fa30:	6863      	ldr	r3, [r4, #4]
    fa32:	4652      	mov	r2, sl
    fa34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    fa38:	e9cd 7301 	strd	r7, r3, [sp, #4]
    fa3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fa3e:	4649      	mov	r1, r9
    fa40:	9300      	str	r3, [sp, #0]
    fa42:	4630      	mov	r0, r6
    fa44:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fa46:	f7fe fd53 	bl	e4f0 <le_adv_update.constprop.0>
		if (err) {
    fa4a:	4683      	mov	fp, r0
    fa4c:	2800      	cmp	r0, #0
    fa4e:	d0c5      	beq.n	f9dc <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fa50:	4658      	mov	r0, fp
    fa52:	b00f      	add	sp, #60	; 0x3c
    fa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    fa58:	4630      	mov	r0, r6
    fa5a:	a907      	add	r1, sp, #28
    fa5c:	f7fe fad8 	bl	e010 <le_adv_start_add_conn>
		if (err) {
    fa60:	4683      	mov	fp, r0
    fa62:	2800      	cmp	r0, #0
    fa64:	d0bd      	beq.n	f9e2 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
    fa66:	f110 0f0c 	cmn.w	r0, #12
    fa6a:	d1f1      	bne.n	fa50 <bt_le_adv_start_legacy+0x184>
    fa6c:	2d00      	cmp	r5, #0
    fa6e:	d1ef      	bne.n	fa50 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    fa70:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    fa72:	079b      	lsls	r3, r3, #30
    fa74:	d4ec      	bmi.n	fa50 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fa76:	6860      	ldr	r0, [r4, #4]
    fa78:	f080 0002 	eor.w	r0, r0, #2
    fa7c:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    fa80:	f00b 0201 	and.w	r2, fp, #1
    fa84:	210c      	movs	r1, #12
    fa86:	4640      	mov	r0, r8
    fa88:	f00b f9b2 	bl	1adf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    fa8c:	6862      	ldr	r2, [r4, #4]
    fa8e:	2107      	movs	r1, #7
    fa90:	4640      	mov	r0, r8
    fa92:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fa96:	f00b f9ab 	bl	1adf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    fa9a:	6862      	ldr	r2, [r4, #4]
    fa9c:	2108      	movs	r1, #8
    fa9e:	4640      	mov	r0, r8
    faa0:	f002 0201 	and.w	r2, r2, #1
    faa4:	f00b f9a4 	bl	1adf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    faa8:	463a      	mov	r2, r7
    faaa:	2109      	movs	r1, #9
    faac:	4640      	mov	r0, r8
    faae:	f00b f99f 	bl	1adf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    fab2:	6862      	ldr	r2, [r4, #4]
    fab4:	210b      	movs	r1, #11
    fab6:	4640      	mov	r0, r8
    fab8:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fabc:	f00b f998 	bl	1adf0 <atomic_set_bit_to>
	return 0;
    fac0:	f04f 0b00 	mov.w	fp, #0
    fac4:	e7c4      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fac6:	9807      	ldr	r0, [sp, #28]
    fac8:	b108      	cbz	r0, face <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
    faca:	f000 fd49 	bl	10560 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    face:	2d00      	cmp	r5, #0
    fad0:	d1d6      	bne.n	fa80 <bt_le_adv_start_legacy+0x1b4>
    fad2:	e7d0      	b.n	fa76 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
    fad4:	f06f 0b0a 	mvn.w	fp, #10
    fad8:	e7ba      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
    fada:	f06f 0b15 	mvn.w	fp, #21
    fade:	e7b7      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
    fae0:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    fae4:	e7b4      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
    fae6:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    faea:	e7b1      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
    faec:	4683      	mov	fp, r0
    faee:	e7af      	b.n	fa50 <bt_le_adv_start_legacy+0x184>
    faf0:	20008094 	.word	0x20008094
    faf4:	20008000 	.word	0x20008000
    faf8:	0001ff70 	.word	0x0001ff70

0000fafc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    fafc:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    fafe:	9c04      	ldr	r4, [sp, #16]
    fb00:	e9cd 3400 	strd	r3, r4, [sp]
    fb04:	4613      	mov	r3, r2
    fb06:	460a      	mov	r2, r1
    fb08:	4601      	mov	r1, r0
    fb0a:	4802      	ldr	r0, [pc, #8]	; (fb14 <bt_le_adv_start+0x18>)
    fb0c:	f7ff fede 	bl	f8cc <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    fb10:	b002      	add	sp, #8
    fb12:	bd10      	pop	{r4, pc}
    fb14:	20008018 	.word	0x20008018

0000fb18 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    fb18:	b530      	push	{r4, r5, lr}
    fb1a:	4c29      	ldr	r4, [pc, #164]	; (fbc0 <bt_le_adv_stop+0xa8>)
    fb1c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fb20:	b085      	sub	sp, #20
    fb22:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fb26:	f00b f958 	bl	1adda <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fb2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fb2e:	f00b f940 	bl	1adb2 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fb32:	0641      	lsls	r1, r0, #25
    fb34:	d403      	bmi.n	fb3e <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    fb36:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    fb38:	4620      	mov	r0, r4
    fb3a:	b005      	add	sp, #20
    fb3c:	bd30      	pop	{r4, r5, pc}
    fb3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fb42:	f00b f936 	bl	1adb2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fb46:	05c2      	lsls	r2, r0, #23
    fb48:	d521      	bpl.n	fb8e <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    fb4a:	2300      	movs	r3, #0
    fb4c:	4669      	mov	r1, sp
    fb4e:	f104 0021 	add.w	r0, r4, #33	; 0x21
    fb52:	9300      	str	r3, [sp, #0]
    fb54:	f8cd 3003 	str.w	r3, [sp, #3]
    fb58:	f00b f93c 	bl	1add4 <bt_addr_le_cmp>
    fb5c:	7e25      	ldrb	r5, [r4, #24]
    fb5e:	bb58      	cbnz	r0, fbb8 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    fb60:	4b18      	ldr	r3, [pc, #96]	; (fbc4 <bt_le_adv_stop+0xac>)
    fb62:	a902      	add	r1, sp, #8
    fb64:	889a      	ldrh	r2, [r3, #4]
    fb66:	6818      	ldr	r0, [r3, #0]
    fb68:	f8ad 200c 	strh.w	r2, [sp, #12]
    fb6c:	2204      	movs	r2, #4
    fb6e:	799b      	ldrb	r3, [r3, #6]
    fb70:	9002      	str	r0, [sp, #8]
    fb72:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    fb76:	4628      	mov	r0, r5
    fb78:	f000 fe54 	bl	10824 <bt_conn_lookup_state_le>
    fb7c:	4604      	mov	r4, r0
	if (conn) {
    fb7e:	b130      	cbz	r0, fb8e <bt_le_adv_stop+0x76>
		conn->err = status;
    fb80:	2100      	movs	r1, #0
    fb82:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fb84:	f000 fd18 	bl	105b8 <bt_conn_set_state>
		bt_conn_unref(conn);
    fb88:	4620      	mov	r0, r4
    fb8a:	f000 fce9 	bl	10560 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    fb8e:	2100      	movs	r1, #0
    fb90:	480d      	ldr	r0, [pc, #52]	; (fbc8 <bt_le_adv_stop+0xb0>)
    fb92:	f7fe fd21 	bl	e5d8 <set_le_adv_enable_legacy>
		if (err) {
    fb96:	4604      	mov	r4, r0
    fb98:	2800      	cmp	r0, #0
    fb9a:	d1cd      	bne.n	fb38 <bt_le_adv_stop+0x20>
    fb9c:	480b      	ldr	r0, [pc, #44]	; (fbcc <bt_le_adv_stop+0xb4>)
    fb9e:	f00b f908 	bl	1adb2 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    fba2:	0683      	lsls	r3, r0, #26
    fba4:	d5c7      	bpl.n	fb36 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    fba6:	4620      	mov	r0, r4
    fba8:	f7fe fb80 	bl	e2ac <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    fbac:	f00b f946 	bl	1ae3c <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
    fbb0:	2001      	movs	r0, #1
    fbb2:	f7fe fb7b 	bl	e2ac <set_le_scan_enable_legacy>
    fbb6:	e7bf      	b.n	fb38 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    fbb8:	2205      	movs	r2, #5
    fbba:	f104 0121 	add.w	r1, r4, #33	; 0x21
    fbbe:	e7da      	b.n	fb76 <bt_le_adv_stop+0x5e>
    fbc0:	20008000 	.word	0x20008000
    fbc4:	0001d640 	.word	0x0001d640
    fbc8:	20008018 	.word	0x20008018
    fbcc:	20008094 	.word	0x20008094

0000fbd0 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    fbd0:	b513      	push	{r0, r1, r4, lr}
    fbd2:	4818      	ldr	r0, [pc, #96]	; (fc34 <bt_le_adv_resume+0x64>)
    fbd4:	f00b f8ed 	bl	1adb2 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    fbd8:	04c1      	lsls	r1, r0, #19
    fbda:	d529      	bpl.n	fc30 <bt_le_adv_resume+0x60>
    fbdc:	4815      	ldr	r0, [pc, #84]	; (fc34 <bt_le_adv_resume+0x64>)
    fbde:	f00b f8e8 	bl	1adb2 <atomic_get>
    fbe2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fbe4:	f3c0 1480 	ubfx	r4, r0, #6, #1
    fbe8:	d422      	bmi.n	fc30 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fbea:	4812      	ldr	r0, [pc, #72]	; (fc34 <bt_le_adv_resume+0x64>)
    fbec:	f00b f8e1 	bl	1adb2 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    fbf0:	05c3      	lsls	r3, r0, #23
    fbf2:	d51d      	bpl.n	fc30 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    fbf4:	4810      	ldr	r0, [pc, #64]	; (fc38 <bt_le_adv_resume+0x68>)
    fbf6:	a901      	add	r1, sp, #4
    fbf8:	f7fe fa0a 	bl	e010 <le_adv_start_add_conn>
	if (err) {
    fbfc:	b9c0      	cbnz	r0, fc30 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    fbfe:	2101      	movs	r1, #1
    fc00:	480d      	ldr	r0, [pc, #52]	; (fc38 <bt_le_adv_resume+0x68>)
    fc02:	f7fe fce9 	bl	e5d8 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    fc06:	b150      	cbz	r0, fc1e <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fc08:	4621      	mov	r1, r4
    fc0a:	9801      	ldr	r0, [sp, #4]
    fc0c:	f000 fcd4 	bl	105b8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fc10:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fc14:	4807      	ldr	r0, [pc, #28]	; (fc34 <bt_le_adv_resume+0x64>)
    fc16:	f00b f8e0 	bl	1adda <atomic_and>
	return (old & mask) != 0;
    fc1a:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    fc1e:	9801      	ldr	r0, [sp, #4]
    fc20:	f000 fc9e 	bl	10560 <bt_conn_unref>
	if (persist_paused) {
    fc24:	b124      	cbz	r4, fc30 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fc26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fc2a:	4802      	ldr	r0, [pc, #8]	; (fc34 <bt_le_adv_resume+0x64>)
    fc2c:	f00b f8c7 	bl	1adbe <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    fc30:	b002      	add	sp, #8
    fc32:	bd10      	pop	{r4, pc}
    fc34:	20008028 	.word	0x20008028
    fc38:	20008018 	.word	0x20008018

0000fc3c <enh_conn_complete>:
{
    fc3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    fc40:	7804      	ldrb	r4, [r0, #0]
{
    fc42:	4605      	mov	r5, r0
	if (evt->status) {
    fc44:	2c00      	cmp	r4, #0
    fc46:	d048      	beq.n	fcda <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fc48:	2c3c      	cmp	r4, #60	; 0x3c
    fc4a:	d11a      	bne.n	fc82 <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fc4c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    fc50:	4872      	ldr	r0, [pc, #456]	; (fe1c <enh_conn_complete+0x1e0>)
    fc52:	f00b f8c2 	bl	1adda <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    fc56:	2000      	movs	r0, #0
    fc58:	f7fd ffa6 	bl	dba8 <find_pending_connect.part.0>
		if (!conn) {
    fc5c:	4605      	mov	r5, r0
    fc5e:	b930      	cbnz	r0, fc6e <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
    fc60:	2145      	movs	r1, #69	; 0x45
    fc62:	486f      	ldr	r0, [pc, #444]	; (fe20 <enh_conn_complete+0x1e4>)
}
    fc64:	b004      	add	sp, #16
    fc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    fc6a:	f009 bd55 	b.w	19718 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    fc6e:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fc70:	2100      	movs	r1, #0
    fc72:	f000 fca1 	bl	105b8 <bt_conn_set_state>
		bt_conn_unref(conn);
    fc76:	4628      	mov	r0, r5
}
    fc78:	b004      	add	sp, #16
    fc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    fc7e:	f000 bc6f 	b.w	10560 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fc82:	2c02      	cmp	r4, #2
    fc84:	d121      	bne.n	fcca <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    fc86:	2100      	movs	r1, #0
    fc88:	2206      	movs	r2, #6
    fc8a:	4608      	mov	r0, r1
    fc8c:	f000 fdca 	bl	10824 <bt_conn_lookup_state_le>
	if (!conn) {
    fc90:	4605      	mov	r5, r0
    fc92:	b948      	cbnz	r0, fca8 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
    fc94:	2145      	movs	r1, #69	; 0x45
    fc96:	4863      	ldr	r0, [pc, #396]	; (fe24 <enh_conn_complete+0x1e8>)
    fc98:	f009 fd3e 	bl	19718 <printk>
			bt_le_scan_update(false);
    fc9c:	2000      	movs	r0, #0
    fc9e:	f7fe fdb3 	bl	e808 <bt_le_scan_update>
}
    fca2:	b004      	add	sp, #16
    fca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    fca8:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fcaa:	2100      	movs	r1, #0
    fcac:	f000 fc84 	bl	105b8 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fcb0:	1d28      	adds	r0, r5, #4
    fcb2:	f00b f87e 	bl	1adb2 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    fcb6:	07c2      	lsls	r2, r0, #31
    fcb8:	d503      	bpl.n	fcc2 <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fcba:	4621      	mov	r1, r4
    fcbc:	4628      	mov	r0, r5
    fcbe:	f000 fc7b 	bl	105b8 <bt_conn_set_state>
	bt_conn_unref(conn);
    fcc2:	4628      	mov	r0, r5
    fcc4:	f000 fc4c 	bl	10560 <bt_conn_unref>
    fcc8:	e7e8      	b.n	fc9c <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    fcca:	4622      	mov	r2, r4
    fccc:	2157      	movs	r1, #87	; 0x57
    fcce:	4856      	ldr	r0, [pc, #344]	; (fe28 <enh_conn_complete+0x1ec>)
}
    fcd0:	b004      	add	sp, #16
    fcd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    fcd6:	f009 bd1f 	b.w	19718 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    fcda:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fcdc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    fce0:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    fce2:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    fce4:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    fce6:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fce8:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    fcec:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    fcee:	d834      	bhi.n	fd5a <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    fcf0:	f00b f862 	bl	1adb8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    fcf4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    fcf8:	2206      	movs	r2, #6
    fcfa:	3b02      	subs	r3, #2
    fcfc:	f105 0111 	add.w	r1, r5, #17
    fd00:	f10d 0001 	add.w	r0, sp, #1
    fd04:	f88d 3008 	strb.w	r3, [sp, #8]
    fd08:	f00a ff66 	bl	1abd8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    fd0c:	2301      	movs	r3, #1
    fd0e:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    fd12:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    fd14:	bb40      	cbnz	r0, fd68 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    fd16:	2206      	movs	r2, #6
    fd18:	a902      	add	r1, sp, #8
    fd1a:	f000 fd83 	bl	10824 <bt_conn_lookup_state_le>
    fd1e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fd20:	78eb      	ldrb	r3, [r5, #3]
    fd22:	2b01      	cmp	r3, #1
    fd24:	d104      	bne.n	fd30 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fd26:	f06f 0140 	mvn.w	r1, #64	; 0x40
    fd2a:	483c      	ldr	r0, [pc, #240]	; (fe1c <enh_conn_complete+0x1e0>)
    fd2c:	f00b f855 	bl	1adda <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fd30:	78eb      	ldrb	r3, [r5, #3]
    fd32:	b923      	cbnz	r3, fd3e <enh_conn_complete+0x102>
    fd34:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    fd38:	483c      	ldr	r0, [pc, #240]	; (fe2c <enh_conn_complete+0x1f0>)
    fd3a:	f00b f84e 	bl	1adda <atomic_and>
	if (!conn) {
    fd3e:	b9dc      	cbnz	r4, fd78 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
    fd40:	4630      	mov	r0, r6
    fd42:	f7fd fc5d 	bl	d600 <bt_addr_le_str_real>
    fd46:	2145      	movs	r1, #69	; 0x45
    fd48:	4602      	mov	r2, r0
    fd4a:	4839      	ldr	r0, [pc, #228]	; (fe30 <enh_conn_complete+0x1f4>)
    fd4c:	f009 fce4 	bl	19718 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    fd50:	211f      	movs	r1, #31
    fd52:	4640      	mov	r0, r8
    fd54:	f00b f888 	bl	1ae68 <bt_hci_disconnect>
		return;
    fd58:	e7a3      	b.n	fca2 <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
    fd5a:	f00b f82d 	bl	1adb8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    fd5e:	4631      	mov	r1, r6
    fd60:	4668      	mov	r0, sp
    fd62:	f00b f829 	bl	1adb8 <bt_addr_le_copy>
    fd66:	e7d4      	b.n	fd12 <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    fd68:	2801      	cmp	r0, #1
    fd6a:	d103      	bne.n	fd74 <enh_conn_complete+0x138>
    fd6c:	a802      	add	r0, sp, #8
    fd6e:	f7fd ff1b 	bl	dba8 <find_pending_connect.part.0>
    fd72:	e7d4      	b.n	fd1e <enh_conn_complete+0xe2>
	return NULL;
    fd74:	2400      	movs	r4, #0
    fd76:	e7d3      	b.n	fd20 <enh_conn_complete+0xe4>
	conn->handle = handle;
    fd78:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    fd7a:	a902      	add	r1, sp, #8
	conn->handle = handle;
    fd7c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    fd80:	f00b f81a 	bl	1adb8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    fd84:	7e2a      	ldrb	r2, [r5, #24]
    fd86:	7deb      	ldrb	r3, [r5, #23]
    fd88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    fd8c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    fd90:	7eaa      	ldrb	r2, [r5, #26]
    fd92:	7e6b      	ldrb	r3, [r5, #25]
    fd94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    fd98:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    fd9c:	7f2a      	ldrb	r2, [r5, #28]
    fd9e:	7eeb      	ldrb	r3, [r5, #27]
    fda0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
    fda4:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    fda6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    fdaa:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    fdac:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fdae:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    fdb0:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fdb2:	d113      	bne.n	fddc <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    fdb4:	4669      	mov	r1, sp
    fdb6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    fdba:	f00a fffd 	bl	1adb8 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    fdbe:	7a21      	ldrb	r1, [r4, #8]
    fdc0:	4d1c      	ldr	r5, [pc, #112]	; (fe34 <enh_conn_complete+0x1f8>)
    fdc2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    fdc6:	4429      	add	r1, r5
    fdc8:	f104 0096 	add.w	r0, r4, #150	; 0x96
    fdcc:	f00a fff4 	bl	1adb8 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    fdd0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
    fdd4:	065b      	lsls	r3, r3, #25
    fdd6:	d501      	bpl.n	fddc <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
    fdd8:	f7ff fefa 	bl	fbd0 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fddc:	78e3      	ldrb	r3, [r4, #3]
    fdde:	b96b      	cbnz	r3, fdfc <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    fde0:	4669      	mov	r1, sp
    fde2:	f104 0096 	add.w	r0, r4, #150	; 0x96
    fde6:	f00a ffe7 	bl	1adb8 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    fdea:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    fdec:	4b11      	ldr	r3, [pc, #68]	; (fe34 <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
    fdee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    fdf2:	4419      	add	r1, r3
    fdf4:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    fdf8:	f00a ffde 	bl	1adb8 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    fdfc:	2107      	movs	r1, #7
    fdfe:	4620      	mov	r0, r4
    fe00:	f000 fbda 	bl	105b8 <bt_conn_set_state>
	conn_auto_initiate(conn);
    fe04:	4620      	mov	r0, r4
    fe06:	f7fe ff1f 	bl	ec48 <conn_auto_initiate>
	bt_conn_unref(conn);
    fe0a:	4620      	mov	r0, r4
    fe0c:	f000 fba8 	bl	10560 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fe10:	78e3      	ldrb	r3, [r4, #3]
    fe12:	2b00      	cmp	r3, #0
    fe14:	f47f af45 	bne.w	fca2 <enh_conn_complete+0x66>
    fe18:	e740      	b.n	fc9c <enh_conn_complete+0x60>
    fe1a:	bf00      	nop
    fe1c:	20008028 	.word	0x20008028
    fe20:	0001ff90 	.word	0x0001ff90
    fe24:	0001ffb1 	.word	0x0001ffb1
    fe28:	0001ffd3 	.word	0x0001ffd3
    fe2c:	20008094 	.word	0x20008094
    fe30:	0001fff1 	.word	0x0001fff1
    fe34:	20008000 	.word	0x20008000

0000fe38 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    fe38:	b570      	push	{r4, r5, r6, lr}
    fe3a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe3c:	482e      	ldr	r0, [pc, #184]	; (fef8 <bt_le_scan_start+0xc0>)
    fe3e:	f00a ffb8 	bl	1adb2 <atomic_get>
    fe42:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fe44:	0781      	lsls	r1, r0, #30
    fe46:	d554      	bpl.n	fef2 <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    fe48:	782a      	ldrb	r2, [r5, #0]
    fe4a:	2a01      	cmp	r2, #1
    fe4c:	d903      	bls.n	fe56 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    fe4e:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    fe52:	4620      	mov	r0, r4
    fe54:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    fe56:	686b      	ldr	r3, [r5, #4]
    fe58:	f033 030f 	bics.w	r3, r3, #15
    fe5c:	d1f7      	bne.n	fe4e <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    fe5e:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    fe62:	8928      	ldrh	r0, [r5, #8]
    fe64:	1f03      	subs	r3, r0, #4
    fe66:	b29b      	uxth	r3, r3
    fe68:	42a3      	cmp	r3, r4
    fe6a:	d8f0      	bhi.n	fe4e <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    fe6c:	8969      	ldrh	r1, [r5, #10]
    fe6e:	1f0b      	subs	r3, r1, #4
    fe70:	b29b      	uxth	r3, r3
    fe72:	42a3      	cmp	r3, r4
    fe74:	d8eb      	bhi.n	fe4e <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    fe76:	4288      	cmp	r0, r1
    fe78:	d3e9      	bcc.n	fe4e <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
    fe7a:	b94a      	cbnz	r2, fe90 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    fe7c:	2140      	movs	r1, #64	; 0x40
    fe7e:	481e      	ldr	r0, [pc, #120]	; (fef8 <bt_le_scan_start+0xc0>)
    fe80:	f00a ff9d 	bl	1adbe <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fe84:	ea10 0301 	ands.w	r3, r0, r1
    fe88:	d007      	beq.n	fe9a <bt_le_scan_start+0x62>
		return -EALREADY;
    fe8a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    fe8e:	e7e0      	b.n	fe52 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
    fe90:	f7fe fc2e 	bl	e6f0 <bt_le_scan_random_addr_check>
    fe94:	2800      	cmp	r0, #0
    fe96:	d1f1      	bne.n	fe7c <bt_le_scan_start+0x44>
    fe98:	e7d9      	b.n	fe4e <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe9a:	4817      	ldr	r0, [pc, #92]	; (fef8 <bt_le_scan_start+0xc0>)
    fe9c:	f00a ff89 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    fea0:	0682      	lsls	r2, r0, #26
    fea2:	d50a      	bpl.n	feba <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
    fea4:	4618      	mov	r0, r3
    fea6:	f7fe fa01 	bl	e2ac <set_le_scan_enable_legacy>
		if (err) {
    feaa:	4604      	mov	r4, r0
    feac:	b128      	cbz	r0, feba <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    feae:	f06f 0140 	mvn.w	r1, #64	; 0x40
    feb2:	4811      	ldr	r0, [pc, #68]	; (fef8 <bt_le_scan_start+0xc0>)
    feb4:	f00a ff91 	bl	1adda <atomic_and>
		return err;
    feb8:	e7cb      	b.n	fe52 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    feba:	686a      	ldr	r2, [r5, #4]
    febc:	2108      	movs	r1, #8
    febe:	480e      	ldr	r0, [pc, #56]	; (fef8 <bt_le_scan_start+0xc0>)
    fec0:	f002 0201 	and.w	r2, r2, #1
    fec4:	f00a ff94 	bl	1adf0 <atomic_set_bit_to>
		if (param->timeout) {
    fec8:	89ab      	ldrh	r3, [r5, #12]
    feca:	b13b      	cbz	r3, fedc <bt_le_scan_start+0xa4>
    fecc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    fed0:	4809      	ldr	r0, [pc, #36]	; (fef8 <bt_le_scan_start+0xc0>)
    fed2:	f00a ff82 	bl	1adda <atomic_and>
			return -ENOTSUP;
    fed6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    feda:	e7ba      	b.n	fe52 <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
    fedc:	896a      	ldrh	r2, [r5, #10]
    fede:	8929      	ldrh	r1, [r5, #8]
    fee0:	7828      	ldrb	r0, [r5, #0]
    fee2:	f7fe fba7 	bl	e634 <start_le_scan_legacy>
	if (err) {
    fee6:	4604      	mov	r4, r0
    fee8:	2800      	cmp	r0, #0
    feea:	d1e0      	bne.n	feae <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
    feec:	4b03      	ldr	r3, [pc, #12]	; (fefc <bt_le_scan_start+0xc4>)
    feee:	601e      	str	r6, [r3, #0]
	return 0;
    fef0:	e7af      	b.n	fe52 <bt_le_scan_start+0x1a>
		return -EAGAIN;
    fef2:	f06f 040a 	mvn.w	r4, #10
    fef6:	e7ac      	b.n	fe52 <bt_le_scan_start+0x1a>
    fef8:	20008094 	.word	0x20008094
    fefc:	2000a93c 	.word	0x2000a93c

0000ff00 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    ff00:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ff02:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ff06:	4807      	ldr	r0, [pc, #28]	; (ff24 <bt_le_scan_stop+0x24>)
    ff08:	f00a ff67 	bl	1adda <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ff0c:	0643      	lsls	r3, r0, #25
    ff0e:	d506      	bpl.n	ff1e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    ff10:	2000      	movs	r0, #0
    ff12:	4b05      	ldr	r3, [pc, #20]	; (ff28 <bt_le_scan_stop+0x28>)
    ff14:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    ff16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    ff1a:	f7fe bc75 	b.w	e808 <bt_le_scan_update>
}
    ff1e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    ff22:	bd08      	pop	{r3, pc}
    ff24:	20008094 	.word	0x20008094
    ff28:	2000a93c 	.word	0x2000a93c

0000ff2c <bt_le_scan_cb_register>:
	parent->next = child;
    ff2c:	2300      	movs	r3, #0
    ff2e:	6083      	str	r3, [r0, #8]
	return list->tail;
    ff30:	4b05      	ldr	r3, [pc, #20]	; (ff48 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
    ff32:	f100 0208 	add.w	r2, r0, #8
    ff36:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    ff38:	b911      	cbnz	r1, ff40 <bt_le_scan_cb_register+0x14>
	list->head = node;
    ff3a:	e9c3 2200 	strd	r2, r2, [r3]
}
    ff3e:	4770      	bx	lr
	parent->next = child;
    ff40:	600a      	str	r2, [r1, #0]
	list->tail = node;
    ff42:	605a      	str	r2, [r3, #4]
}
    ff44:	4770      	bx	lr
    ff46:	bf00      	nop
    ff48:	2000a934 	.word	0x2000a934

0000ff4c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    ff4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff4e:	b08d      	sub	sp, #52	; 0x34
    ff50:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    ff52:	2700      	movs	r7, #0
    ff54:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    ff56:	2100      	movs	r1, #0
    ff58:	f242 0018 	movw	r0, #8216	; 0x2018
    ff5c:	aa02      	add	r2, sp, #8
    ff5e:	f7fe f8f5 	bl	e14c <bt_hci_cmd_send_sync>
		if (ret) {
    ff62:	4604      	mov	r4, r0
    ff64:	bb58      	cbnz	r0, ffbe <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
    ff66:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    ff68:	2208      	movs	r2, #8
    ff6a:	6899      	ldr	r1, [r3, #8]
    ff6c:	4630      	mov	r0, r6
    ff6e:	3101      	adds	r1, #1
    ff70:	f00a fe32 	bl	1abd8 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    ff74:	3701      	adds	r7, #1

		net_buf_unref(rsp);
    ff76:	9802      	ldr	r0, [sp, #8]
    ff78:	f004 fb70 	bl	1465c <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    ff7c:	2f04      	cmp	r7, #4
    ff7e:	f106 0608 	add.w	r6, r6, #8
    ff82:	d1e8      	bne.n	ff56 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
    ff84:	f00d f839 	bl	1cffa <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    ff88:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    ff8c:	fba0 3206 	umull	r3, r2, r0, r6
    ff90:	fb06 2101 	mla	r1, r6, r1, r2
    ff94:	0bdb      	lsrs	r3, r3, #15
    ff96:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    ff9a:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
    ff9c:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    ffa0:	2308      	movs	r3, #8
    ffa2:	2220      	movs	r2, #32
    ffa4:	9300      	str	r3, [sp, #0]
    ffa6:	4629      	mov	r1, r5
    ffa8:	4806      	ldr	r0, [pc, #24]	; (ffc4 <prng_reseed.constprop.0+0x78>)
    ffaa:	446b      	add	r3, sp
    ffac:	f00a fcaa 	bl	1a904 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    ffb0:	b928      	cbnz	r0, ffbe <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
    ffb2:	2145      	movs	r1, #69	; 0x45
    ffb4:	4804      	ldr	r0, [pc, #16]	; (ffc8 <prng_reseed.constprop.0+0x7c>)
    ffb6:	f009 fbaf 	bl	19718 <printk>
		return -EIO;
    ffba:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
    ffbe:	4620      	mov	r0, r4
    ffc0:	b00d      	add	sp, #52	; 0x34
    ffc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffc4:	20008a10 	.word	0x20008a10
    ffc8:	00020023 	.word	0x00020023

0000ffcc <prng_init>:

int prng_init(void)
{
    ffcc:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    ffce:	4b13      	ldr	r3, [pc, #76]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
    ffd0:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
    ffd4:	2b00      	cmp	r3, #0
    ffd6:	da1d      	bge.n	10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    ffd8:	2100      	movs	r1, #0
    ffda:	f242 0018 	movw	r0, #8216	; 0x2018
    ffde:	aa01      	add	r2, sp, #4
    ffe0:	f7fe f8b4 	bl	e14c <bt_hci_cmd_send_sync>
	if (ret) {
    ffe4:	b988      	cbnz	r0, 1000a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa>
		return ret;
	}

	rp = (void *)rsp->data;
    ffe6:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    ffe8:	2208      	movs	r2, #8
    ffea:	6899      	ldr	r1, [r3, #8]
    ffec:	480c      	ldr	r0, [pc, #48]	; (10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>)
    ffee:	3101      	adds	r1, #1
    fff0:	f00a fc68 	bl	1a8c4 <tc_hmac_prng_init>
    fff4:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    fff6:	9801      	ldr	r0, [sp, #4]
    fff8:	f004 fb30 	bl	1465c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    fffc:	b93c      	cbnz	r4, 1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
		BT_ERR("Failed to initialize PRNG");
    fffe:	4809      	ldr	r0, [pc, #36]	; (10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>)
   10000:	2145      	movs	r1, #69	; 0x45
   10002:	f009 fb89 	bl	19718 <printk>
		return -EIO;
   10006:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1000a:	b002      	add	sp, #8
   1000c:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1000e:	f7ff ff9d 	bl	ff4c <prng_reseed.constprop.0>
   10012:	e7fa      	b.n	1000a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa>
		return -ENOTSUP;
   10014:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10018:	e7f7      	b.n	1000a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa>
   1001a:	bf00      	nop
   1001c:	20008000 	.word	0x20008000
   10020:	20008a10 	.word	0x20008a10
   10024:	0002003f 	.word	0x0002003f

00010028 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10028:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1002a:	4a0a      	ldr	r2, [pc, #40]	; (10054 <bt_rand+0x2c>)
{
   1002c:	4604      	mov	r4, r0
   1002e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10030:	f00a fc81 	bl	1a936 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10034:	1c43      	adds	r3, r0, #1
   10036:	d107      	bne.n	10048 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10038:	f7ff ff88 	bl	ff4c <prng_reseed.constprop.0>
		if (ret) {
   1003c:	b948      	cbnz	r0, 10052 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1003e:	4629      	mov	r1, r5
   10040:	4620      	mov	r0, r4
   10042:	4a04      	ldr	r2, [pc, #16]	; (10054 <bt_rand+0x2c>)
   10044:	f00a fc77 	bl	1a936 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10048:	2801      	cmp	r0, #1
   1004a:	bf14      	ite	ne
   1004c:	f06f 0004 	mvnne.w	r0, #4
   10050:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   10052:	bd38      	pop	{r3, r4, r5, pc}
   10054:	20008a10 	.word	0x20008a10

00010058 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10058:	2300      	movs	r3, #0
{
   1005a:	4601      	mov	r1, r0
	tx->user_data = NULL;
   1005c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10060:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   10062:	4801      	ldr	r0, [pc, #4]	; (10068 <tx_free+0x10>)
   10064:	f00c bef5 	b.w	1ce52 <k_queue_append>
   10068:	20008688 	.word	0x20008688

0001006c <notify_connected>:
{
   1006c:	b538      	push	{r3, r4, r5, lr}
   1006e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10070:	4b08      	ldr	r3, [pc, #32]	; (10094 <notify_connected+0x28>)
   10072:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10074:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   10076:	b92d      	cbnz	r5, 10084 <notify_connected+0x18>
	if (!conn->err) {
   10078:	b951      	cbnz	r1, 10090 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1007a:	4620      	mov	r0, r4
}
   1007c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   10080:	f003 bfe6 	b.w	14050 <bt_gatt_connected>
		if (cb->connected) {
   10084:	682b      	ldr	r3, [r5, #0]
   10086:	b10b      	cbz	r3, 1008c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10088:	4620      	mov	r0, r4
   1008a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1008c:	692d      	ldr	r5, [r5, #16]
   1008e:	e7f1      	b.n	10074 <notify_connected+0x8>
}
   10090:	bd38      	pop	{r3, r4, r5, pc}
   10092:	bf00      	nop
   10094:	2000a940 	.word	0x2000a940

00010098 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1009c:	4604      	mov	r4, r0
   1009e:	460e      	mov	r6, r1
   100a0:	4691      	mov	r9, r2
   100a2:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   100a4:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   100a6:	f04f 33ff 	mov.w	r3, #4294967295
   100aa:	f04f 32ff 	mov.w	r2, #4294967295
   100ae:	4847      	ldr	r0, [pc, #284]	; (101cc <send_frag+0x134>)
   100b0:	f008 f9ae 	bl	18410 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   100b4:	7aa3      	ldrb	r3, [r4, #10]
   100b6:	2b07      	cmp	r3, #7
   100b8:	d14b      	bne.n	10152 <send_frag+0xba>
	__asm__ volatile(
   100ba:	f04f 0320 	mov.w	r3, #32
   100be:	f3ef 8211 	mrs	r2, BASEPRI
   100c2:	f383 8811 	msr	BASEPRI, r3
   100c6:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   100ca:	69a3      	ldr	r3, [r4, #24]
   100cc:	2d00      	cmp	r5, #0
   100ce:	d052      	beq.n	10176 <send_frag+0xde>
	parent->next = child;
   100d0:	2100      	movs	r1, #0
   100d2:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   100d4:	2b00      	cmp	r3, #0
   100d6:	d14b      	bne.n	10170 <send_frag+0xd8>
	list->head = node;
   100d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   100dc:	f382 8811 	msr	BASEPRI, r2
   100e0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   100e4:	2104      	movs	r1, #4
   100e6:	f106 0008 	add.w	r0, r6, #8
   100ea:	f004 fb75 	bl	147d8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   100ee:	8823      	ldrh	r3, [r4, #0]
   100f0:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   100f4:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   100f8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   100fa:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   100fe:	3b04      	subs	r3, #4
   10100:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10102:	2302      	movs	r3, #2
	return bt_send(buf);
   10104:	4630      	mov	r0, r6
   10106:	7533      	strb	r3, [r6, #20]
   10108:	f7fe fd14 	bl	eb34 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   1010c:	4602      	mov	r2, r0
   1010e:	2800      	cmp	r0, #0
   10110:	d059      	beq.n	101c6 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   10112:	2145      	movs	r1, #69	; 0x45
   10114:	482e      	ldr	r0, [pc, #184]	; (101d0 <send_frag+0x138>)
   10116:	f009 faff 	bl	19718 <printk>
	__asm__ volatile(
   1011a:	f04f 0320 	mov.w	r3, #32
   1011e:	f3ef 8911 	mrs	r9, BASEPRI
   10122:	f383 8811 	msr	BASEPRI, r3
   10126:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1012a:	2d00      	cmp	r5, #0
   1012c:	d037      	beq.n	1019e <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1012e:	2200      	movs	r2, #0
	return list->head;
   10130:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10132:	b153      	cbz	r3, 1014a <send_frag+0xb2>
   10134:	429d      	cmp	r5, r3
   10136:	d12f      	bne.n	10198 <send_frag+0x100>
	return node->next;
   10138:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   1013a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   1013c:	bb3a      	cbnz	r2, 1018e <send_frag+0xf6>
   1013e:	42a9      	cmp	r1, r5
	list->head = node;
   10140:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10142:	d100      	bne.n	10146 <send_frag+0xae>
	list->tail = node;
   10144:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   10146:	2300      	movs	r3, #0
   10148:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1014a:	f389 8811 	msr	BASEPRI, r9
   1014e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10152:	481e      	ldr	r0, [pc, #120]	; (101cc <send_frag+0x134>)
   10154:	f008 f920 	bl	18398 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10158:	b115      	cbz	r5, 10160 <send_frag+0xc8>
		tx_free(tx);
   1015a:	4628      	mov	r0, r5
   1015c:	f7ff ff7c 	bl	10058 <tx_free>
	}

	if (always_consume) {
   10160:	b11f      	cbz	r7, 1016a <send_frag+0xd2>
		net_buf_unref(buf);
   10162:	4630      	mov	r0, r6
   10164:	f004 fa7a 	bl	1465c <net_buf_unref>
	}
	return false;
   10168:	2700      	movs	r7, #0
}
   1016a:	4638      	mov	r0, r7
   1016c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10170:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10172:	61a5      	str	r5, [r4, #24]
}
   10174:	e7b2      	b.n	100dc <send_frag+0x44>
		if (tail_tx) {
   10176:	b133      	cbz	r3, 10186 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   10178:	f103 080c 	add.w	r8, r3, #12
   1017c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1017e:	3301      	adds	r3, #1
   10180:	f8c8 3000 	str.w	r3, [r8]
   10184:	e7aa      	b.n	100dc <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   10186:	69e3      	ldr	r3, [r4, #28]
   10188:	f104 081c 	add.w	r8, r4, #28
   1018c:	e7f7      	b.n	1017e <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   1018e:	42a9      	cmp	r1, r5
	parent->next = child;
   10190:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10192:	bf08      	it	eq
   10194:	61a2      	streq	r2, [r4, #24]
}
   10196:	e7d6      	b.n	10146 <send_frag+0xae>
	return node->next;
   10198:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1019a:	681b      	ldr	r3, [r3, #0]
   1019c:	e7c9      	b.n	10132 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1019e:	f8d8 3000 	ldr.w	r3, [r8]
   101a2:	b953      	cbnz	r3, 101ba <send_frag+0x122>
   101a4:	490b      	ldr	r1, [pc, #44]	; (101d4 <send_frag+0x13c>)
   101a6:	480c      	ldr	r0, [pc, #48]	; (101d8 <send_frag+0x140>)
   101a8:	f240 4292 	movw	r2, #1170	; 0x492
   101ac:	f009 fab4 	bl	19718 <printk>
   101b0:	f240 4192 	movw	r1, #1170	; 0x492
   101b4:	4807      	ldr	r0, [pc, #28]	; (101d4 <send_frag+0x13c>)
   101b6:	f009 fd55 	bl	19c64 <assert_post_action>
			(*pending_no_cb)--;
   101ba:	f8d8 3000 	ldr.w	r3, [r8]
   101be:	3b01      	subs	r3, #1
   101c0:	f8c8 3000 	str.w	r3, [r8]
   101c4:	e7c1      	b.n	1014a <send_frag+0xb2>
	return true;
   101c6:	2701      	movs	r7, #1
   101c8:	e7cf      	b.n	1016a <send_frag+0xd2>
   101ca:	bf00      	nop
   101cc:	200080c8 	.word	0x200080c8
   101d0:	0001fbcc 	.word	0x0001fbcc
   101d4:	00020068 	.word	0x00020068
   101d8:	0001e6bc 	.word	0x0001e6bc

000101dc <bt_conn_get_pkts>:
}
   101dc:	4800      	ldr	r0, [pc, #0]	; (101e0 <bt_conn_get_pkts+0x4>)
   101de:	4770      	bx	lr
   101e0:	200080c8 	.word	0x200080c8

000101e4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   101e4:	1d03      	adds	r3, r0, #4
{
   101e6:	b570      	push	{r4, r5, r6, lr}
   101e8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   101ea:	4618      	mov	r0, r3
   101ec:	f00a fef9 	bl	1afe2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   101f0:	0582      	lsls	r2, r0, #22
   101f2:	d515      	bpl.n	10220 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   101f4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   101f8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   101fc:	4291      	cmp	r1, r2
   101fe:	d80f      	bhi.n	10220 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   10200:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   10204:	4291      	cmp	r1, r2
   10206:	d30b      	bcc.n	10220 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   10208:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   1020c:	4291      	cmp	r1, r2
   1020e:	d107      	bne.n	10220 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10210:	e8d3 2fef 	ldaex	r2, [r3]
   10214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   10218:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1021c:	2900      	cmp	r1, #0
   1021e:	d1f7      	bne.n	10210 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   10220:	4b07      	ldr	r3, [pc, #28]	; (10240 <notify_le_param_updated+0x5c>)
   10222:	681d      	ldr	r5, [r3, #0]
   10224:	b905      	cbnz	r5, 10228 <notify_le_param_updated+0x44>
}
   10226:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   10228:	68ee      	ldr	r6, [r5, #12]
   1022a:	b13e      	cbz	r6, 1023c <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   1022c:	4620      	mov	r0, r4
   1022e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   10232:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   10236:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1023a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1023c:	692d      	ldr	r5, [r5, #16]
   1023e:	e7f1      	b.n	10224 <notify_le_param_updated+0x40>
   10240:	2000a940 	.word	0x2000a940

00010244 <le_param_req>:
{
   10244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10246:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   10248:	4608      	mov	r0, r1
{
   1024a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1024c:	f00a fe27 	bl	1ae9e <bt_le_conn_params_valid>
   10250:	4604      	mov	r4, r0
   10252:	b910      	cbnz	r0, 1025a <le_param_req+0x16>
		return false;
   10254:	2400      	movs	r4, #0
}
   10256:	4620      	mov	r0, r4
   10258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1025a:	4b09      	ldr	r3, [pc, #36]	; (10280 <le_param_req+0x3c>)
   1025c:	681e      	ldr	r6, [r3, #0]
   1025e:	2e00      	cmp	r6, #0
   10260:	d0f9      	beq.n	10256 <le_param_req+0x12>
		if (!cb->le_param_req) {
   10262:	68b3      	ldr	r3, [r6, #8]
   10264:	b90b      	cbnz	r3, 1026a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   10266:	6936      	ldr	r6, [r6, #16]
   10268:	e7f9      	b.n	1025e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1026a:	4629      	mov	r1, r5
   1026c:	4638      	mov	r0, r7
   1026e:	4798      	blx	r3
   10270:	2800      	cmp	r0, #0
   10272:	d0ef      	beq.n	10254 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   10274:	4628      	mov	r0, r5
   10276:	f00a fe12 	bl	1ae9e <bt_le_conn_params_valid>
   1027a:	2800      	cmp	r0, #0
   1027c:	d1f3      	bne.n	10266 <le_param_req+0x22>
   1027e:	e7e9      	b.n	10254 <le_param_req+0x10>
   10280:	2000a940 	.word	0x2000a940

00010284 <bt_conn_cb_register>:
	cb->_next = callback_list;
   10284:	4b02      	ldr	r3, [pc, #8]	; (10290 <bt_conn_cb_register+0xc>)
   10286:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10288:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   1028a:	6102      	str	r2, [r0, #16]
}
   1028c:	4770      	bx	lr
   1028e:	bf00      	nop
   10290:	2000a940 	.word	0x2000a940

00010294 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   10294:	b570      	push	{r4, r5, r6, lr}
   10296:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10298:	f100 0634 	add.w	r6, r0, #52	; 0x34
   1029c:	2200      	movs	r2, #0
   1029e:	2300      	movs	r3, #0
   102a0:	4630      	mov	r0, r6
   102a2:	f004 f959 	bl	14558 <net_buf_get>
   102a6:	4605      	mov	r5, r0
   102a8:	bb28      	cbnz	r0, 102f6 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   102aa:	6963      	ldr	r3, [r4, #20]
   102ac:	b153      	cbz	r3, 102c4 <conn_cleanup+0x30>
   102ae:	4916      	ldr	r1, [pc, #88]	; (10308 <conn_cleanup+0x74>)
   102b0:	4816      	ldr	r0, [pc, #88]	; (1030c <conn_cleanup+0x78>)
   102b2:	f240 520c 	movw	r2, #1292	; 0x50c
   102b6:	f009 fa2f 	bl	19718 <printk>
   102ba:	f240 510c 	movw	r1, #1292	; 0x50c
   102be:	4812      	ldr	r0, [pc, #72]	; (10308 <conn_cleanup+0x74>)
   102c0:	f009 fcd0 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   102c4:	69e3      	ldr	r3, [r4, #28]
   102c6:	b153      	cbz	r3, 102de <conn_cleanup+0x4a>
   102c8:	490f      	ldr	r1, [pc, #60]	; (10308 <conn_cleanup+0x74>)
   102ca:	4810      	ldr	r0, [pc, #64]	; (1030c <conn_cleanup+0x78>)
   102cc:	f240 520d 	movw	r2, #1293	; 0x50d
   102d0:	f009 fa22 	bl	19718 <printk>
   102d4:	f240 510d 	movw	r1, #1293	; 0x50d
   102d8:	480b      	ldr	r0, [pc, #44]	; (10308 <conn_cleanup+0x74>)
   102da:	f009 fcc3 	bl	19c64 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   102de:	4620      	mov	r0, r4
   102e0:	f00a fecc 	bl	1b07c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   102e4:	f104 0158 	add.w	r1, r4, #88	; 0x58
   102e8:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   102ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   102ee:	2300      	movs	r3, #0
   102f0:	4807      	ldr	r0, [pc, #28]	; (10310 <conn_cleanup+0x7c>)
   102f2:	f008 bab3 	b.w	1885c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   102f6:	6968      	ldr	r0, [r5, #20]
   102f8:	b108      	cbz	r0, 102fe <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   102fa:	f7ff fead 	bl	10058 <tx_free>
		net_buf_unref(buf);
   102fe:	4628      	mov	r0, r5
   10300:	f004 f9ac 	bl	1465c <net_buf_unref>
   10304:	e7ca      	b.n	1029c <conn_cleanup+0x8>
   10306:	bf00      	nop
   10308:	00020068 	.word	0x00020068
   1030c:	0001e6bc 	.word	0x0001e6bc
   10310:	2000a3a0 	.word	0x2000a3a0

00010314 <bt_conn_recv>:
{
   10314:	b570      	push	{r4, r5, r6, lr}
   10316:	4616      	mov	r6, r2
   10318:	4604      	mov	r4, r0
   1031a:	460d      	mov	r5, r1
	tx_notify(conn);
   1031c:	f00a fe64 	bl	1afe8 <tx_notify>
	switch (flags) {
   10320:	2e01      	cmp	r6, #1
   10322:	d01f      	beq.n	10364 <bt_conn_recv+0x50>
   10324:	2e02      	cmp	r6, #2
   10326:	d140      	bne.n	103aa <bt_conn_recv+0x96>
		if (conn->rx) {
   10328:	6923      	ldr	r3, [r4, #16]
   1032a:	b133      	cbz	r3, 1033a <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   1032c:	4826      	ldr	r0, [pc, #152]	; (103c8 <bt_conn_recv+0xb4>)
   1032e:	2145      	movs	r1, #69	; 0x45
   10330:	f009 f9f2 	bl	19718 <printk>
			bt_conn_reset_rx_state(conn);
   10334:	4620      	mov	r0, r4
   10336:	f00a fea1 	bl	1b07c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1033a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1033c:	6921      	ldr	r1, [r4, #16]
   1033e:	898a      	ldrh	r2, [r1, #12]
   10340:	2a01      	cmp	r2, #1
   10342:	d93f      	bls.n	103c4 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   10344:	688b      	ldr	r3, [r1, #8]
   10346:	881b      	ldrh	r3, [r3, #0]
   10348:	3304      	adds	r3, #4
   1034a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1034c:	429a      	cmp	r2, r3
   1034e:	d339      	bcc.n	103c4 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   10350:	d931      	bls.n	103b6 <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   10352:	481e      	ldr	r0, [pc, #120]	; (103cc <bt_conn_recv+0xb8>)
   10354:	2145      	movs	r1, #69	; 0x45
   10356:	f009 f9df 	bl	19718 <printk>
		bt_conn_reset_rx_state(conn);
   1035a:	4620      	mov	r0, r4
}
   1035c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   10360:	f00a be8c 	b.w	1b07c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   10364:	6920      	ldr	r0, [r4, #16]
   10366:	b938      	cbnz	r0, 10378 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   10368:	2145      	movs	r1, #69	; 0x45
   1036a:	4819      	ldr	r0, [pc, #100]	; (103d0 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   1036c:	f009 f9d4 	bl	19718 <printk>
			bt_conn_reset_rx_state(conn);
   10370:	4620      	mov	r0, r4
   10372:	f00a fe83 	bl	1b07c <bt_conn_reset_rx_state>
   10376:	e001      	b.n	1037c <bt_conn_recv+0x68>
		if (!buf->len) {
   10378:	89ae      	ldrh	r6, [r5, #12]
   1037a:	b926      	cbnz	r6, 10386 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   1037c:	4628      	mov	r0, r5
}
   1037e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   10382:	f004 b96b 	b.w	1465c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   10386:	3008      	adds	r0, #8
   10388:	f00b ff20 	bl	1c1cc <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1038c:	4286      	cmp	r6, r0
   1038e:	d902      	bls.n	10396 <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   10390:	2145      	movs	r1, #69	; 0x45
   10392:	4810      	ldr	r0, [pc, #64]	; (103d4 <bt_conn_recv+0xc0>)
   10394:	e7ea      	b.n	1036c <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10396:	6920      	ldr	r0, [r4, #16]
   10398:	89aa      	ldrh	r2, [r5, #12]
   1039a:	68a9      	ldr	r1, [r5, #8]
   1039c:	3008      	adds	r0, #8
   1039e:	f00b ff1d 	bl	1c1dc <net_buf_simple_add_mem>
		net_buf_unref(buf);
   103a2:	4628      	mov	r0, r5
   103a4:	f004 f95a 	bl	1465c <net_buf_unref>
		break;
   103a8:	e7c8      	b.n	1033c <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   103aa:	4632      	mov	r2, r6
   103ac:	2145      	movs	r1, #69	; 0x45
   103ae:	480a      	ldr	r0, [pc, #40]	; (103d8 <bt_conn_recv+0xc4>)
   103b0:	f009 f9b2 	bl	19718 <printk>
		bt_conn_reset_rx_state(conn);
   103b4:	e7dc      	b.n	10370 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   103b6:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   103b8:	4620      	mov	r0, r4
	conn->rx = NULL;
   103ba:	6123      	str	r3, [r4, #16]
}
   103bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   103c0:	f000 bed0 	b.w	11164 <bt_l2cap_recv>
}
   103c4:	bd70      	pop	{r4, r5, r6, pc}
   103c6:	bf00      	nop
   103c8:	00020098 	.word	0x00020098
   103cc:	0002012c 	.word	0x0002012c
   103d0:	000200ba 	.word	0x000200ba
   103d4:	000200dd 	.word	0x000200dd
   103d8:	00020109 	.word	0x00020109

000103dc <bt_conn_send_cb>:
{
   103dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103e0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   103e2:	7a83      	ldrb	r3, [r0, #10]
{
   103e4:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   103e6:	2b07      	cmp	r3, #7
{
   103e8:	460d      	mov	r5, r1
   103ea:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   103ec:	d009      	beq.n	10402 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   103ee:	4821      	ldr	r0, [pc, #132]	; (10474 <bt_conn_send_cb+0x98>)
   103f0:	2145      	movs	r1, #69	; 0x45
   103f2:	f009 f991 	bl	19718 <printk>
		net_buf_unref(buf);
   103f6:	4628      	mov	r0, r5
   103f8:	f004 f930 	bl	1465c <net_buf_unref>
			return -ENOTCONN;
   103fc:	f06f 0038 	mvn.w	r0, #56	; 0x38
   10400:	e01a      	b.n	10438 <bt_conn_send_cb+0x5c>
	if (cb) {
   10402:	2a00      	cmp	r2, #0
   10404:	d034      	beq.n	10470 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   10406:	f007 ffc1 	bl	1838c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1040a:	4b1b      	ldr	r3, [pc, #108]	; (10478 <bt_conn_send_cb+0x9c>)
   1040c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1040e:	481b      	ldr	r0, [pc, #108]	; (1047c <bt_conn_send_cb+0xa0>)
   10410:	bf07      	ittee	eq
   10412:	2200      	moveq	r2, #0
   10414:	2300      	moveq	r3, #0
   10416:	f04f 32ff 	movne.w	r2, #4294967295
   1041a:	f04f 33ff 	movne.w	r3, #4294967295
   1041e:	f006 ff4f 	bl	172c0 <z_impl_k_queue_get>
   10422:	4604      	mov	r4, r0
		if (!tx) {
   10424:	b950      	cbnz	r0, 1043c <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   10426:	2145      	movs	r1, #69	; 0x45
   10428:	4815      	ldr	r0, [pc, #84]	; (10480 <bt_conn_send_cb+0xa4>)
   1042a:	f009 f975 	bl	19718 <printk>
			net_buf_unref(buf);
   1042e:	4628      	mov	r0, r5
   10430:	f004 f914 	bl	1465c <net_buf_unref>
			return -ENOBUFS;
   10434:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   10438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1043c:	7ab3      	ldrb	r3, [r6, #10]
   1043e:	2b07      	cmp	r3, #7
   10440:	d00a      	beq.n	10458 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   10442:	2157      	movs	r1, #87	; 0x57
   10444:	480f      	ldr	r0, [pc, #60]	; (10484 <bt_conn_send_cb+0xa8>)
   10446:	f009 f967 	bl	19718 <printk>
			net_buf_unref(buf);
   1044a:	4628      	mov	r0, r5
   1044c:	f004 f906 	bl	1465c <net_buf_unref>
			tx_free(tx);
   10450:	4620      	mov	r0, r4
   10452:	f7ff fe01 	bl	10058 <tx_free>
   10456:	e7d1      	b.n	103fc <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   10458:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1045a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1045e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   10460:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   10462:	f106 0034 	add.w	r0, r6, #52	; 0x34
   10466:	4629      	mov	r1, r5
   10468:	f004 f8ca 	bl	14600 <net_buf_put>
	return 0;
   1046c:	2000      	movs	r0, #0
   1046e:	e7e3      	b.n	10438 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   10470:	614a      	str	r2, [r1, #20]
   10472:	e7f6      	b.n	10462 <bt_conn_send_cb+0x86>
   10474:	0002014c 	.word	0x0002014c
   10478:	2000a3c0 	.word	0x2000a3c0
   1047c:	20008688 	.word	0x20008688
   10480:	00020160 	.word	0x00020160
   10484:	00020183 	.word	0x00020183

00010488 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   10488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   1048c:	2500      	movs	r5, #0
   1048e:	4b1c      	ldr	r3, [pc, #112]	; (10500 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10490:	462a      	mov	r2, r5
   10492:	2101      	movs	r1, #1
{
   10494:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   10496:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10498:	2601      	movs	r6, #1
   1049a:	f008 ff03 	bl	192a4 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1049e:	f04f 0914 	mov.w	r9, #20
   104a2:	4c18      	ldr	r4, [pc, #96]	; (10504 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   104a4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   104a8:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   104ac:	f00a fd99 	bl	1afe2 <atomic_get>
   104b0:	b178      	cbz	r0, 104d2 <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   104b2:	7aa3      	ldrb	r3, [r4, #10]
   104b4:	b9ab      	cbnz	r3, 104e2 <bt_conn_prepare_events+0x5a>
   104b6:	1d23      	adds	r3, r4, #4
   104b8:	e8d3 2fef 	ldaex	r2, [r3]
   104bc:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   104c0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   104c4:	2800      	cmp	r0, #0
   104c6:	d1f7      	bne.n	104b8 <bt_conn_prepare_events+0x30>
   104c8:	0653      	lsls	r3, r2, #25
   104ca:	d50a      	bpl.n	104e2 <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   104cc:	4620      	mov	r0, r4
   104ce:	f7ff fee1 	bl	10294 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   104d2:	3501      	adds	r5, #1
   104d4:	2d0a      	cmp	r5, #10
   104d6:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   104da:	d1e3      	bne.n	104a4 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   104dc:	4630      	mov	r0, r6
   104de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   104e2:	7aa3      	ldrb	r3, [r4, #10]
   104e4:	2b07      	cmp	r3, #7
   104e6:	d1f4      	bne.n	104d2 <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   104e8:	f104 0334 	add.w	r3, r4, #52	; 0x34
   104ec:	2200      	movs	r2, #0
   104ee:	2104      	movs	r1, #4
   104f0:	4640      	mov	r0, r8
   104f2:	f008 fed7 	bl	192a4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   104f6:	2301      	movs	r3, #1
   104f8:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   104fc:	441e      	add	r6, r3
   104fe:	e7e8      	b.n	104d2 <bt_conn_prepare_events+0x4a>
   10500:	2000841c 	.word	0x2000841c
   10504:	20008b48 	.word	0x20008b48

00010508 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   10508:	b570      	push	{r4, r5, r6, lr}
   1050a:	4606      	mov	r6, r0
   1050c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1050e:	4810      	ldr	r0, [pc, #64]	; (10550 <bt_conn_add_le+0x48>)
   10510:	210a      	movs	r1, #10
   10512:	f00a fd8f 	bl	1b034 <bt_conn_new>
	if (!conn) {
   10516:	4604      	mov	r4, r0
   10518:	b1b8      	cbz	r0, 1054a <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1051a:	2230      	movs	r2, #48	; 0x30
   1051c:	2100      	movs	r1, #0
   1051e:	3058      	adds	r0, #88	; 0x58
   10520:	f00a fb85 	bl	1ac2e <memset>
   10524:	4b0b      	ldr	r3, [pc, #44]	; (10554 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10526:	4a0c      	ldr	r2, [pc, #48]	; (10558 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   10528:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1052a:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   1052c:	4629      	mov	r1, r5
   1052e:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   10532:	62a3      	str	r3, [r4, #40]	; 0x28
   10534:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   10536:	7226      	strb	r6, [r4, #8]
   10538:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1053c:	f00a fb4c 	bl	1abd8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10540:	2301      	movs	r3, #1
   10542:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   10544:	4b05      	ldr	r3, [pc, #20]	; (1055c <bt_conn_add_le+0x54>)
   10546:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1054a:	4620      	mov	r0, r4
   1054c:	bd70      	pop	{r4, r5, r6, pc}
   1054e:	bf00      	nop
   10550:	20008b48 	.word	0x20008b48
   10554:	00010bc1 	.word	0x00010bc1
   10558:	0001b02f 	.word	0x0001b02f
   1055c:	00280018 	.word	0x00280018

00010560 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   10560:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   10562:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10566:	e8d4 3fef 	ldaex	r3, [r4]
   1056a:	1e5a      	subs	r2, r3, #1
   1056c:	e8c4 2fe1 	stlex	r1, r2, [r4]
   10570:	2900      	cmp	r1, #0
   10572:	d1f8      	bne.n	10566 <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   10574:	2b00      	cmp	r3, #0
   10576:	dc0a      	bgt.n	1058e <bt_conn_unref+0x2e>
   10578:	4909      	ldr	r1, [pc, #36]	; (105a0 <bt_conn_unref+0x40>)
   1057a:	480a      	ldr	r0, [pc, #40]	; (105a4 <bt_conn_unref+0x44>)
   1057c:	f240 7265 	movw	r2, #1893	; 0x765
   10580:	f009 f8ca 	bl	19718 <printk>
   10584:	f240 7165 	movw	r1, #1893	; 0x765
   10588:	4805      	ldr	r0, [pc, #20]	; (105a0 <bt_conn_unref+0x40>)
   1058a:	f009 fb6b 	bl	19c64 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   1058e:	4620      	mov	r0, r4
   10590:	f00a fd27 	bl	1afe2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10594:	b918      	cbnz	r0, 1059e <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   10596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1059a:	f7ff bb19 	b.w	fbd0 <bt_le_adv_resume>
}
   1059e:	bd10      	pop	{r4, pc}
   105a0:	00020068 	.word	0x00020068
   105a4:	0001e6bc 	.word	0x0001e6bc

000105a8 <bt_conn_lookup_handle>:
{
   105a8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   105aa:	210a      	movs	r1, #10
   105ac:	4801      	ldr	r0, [pc, #4]	; (105b4 <bt_conn_lookup_handle+0xc>)
   105ae:	f00a bda5 	b.w	1b0fc <conn_lookup_handle>
   105b2:	bf00      	nop
   105b4:	20008b48 	.word	0x20008b48

000105b8 <bt_conn_set_state>:
{
   105b8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   105ba:	7a85      	ldrb	r5, [r0, #10]
{
   105bc:	4604      	mov	r4, r0
	if (conn->state == state) {
   105be:	428d      	cmp	r5, r1
{
   105c0:	460e      	mov	r6, r1
	if (conn->state == state) {
   105c2:	d10b      	bne.n	105dc <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   105c4:	2157      	movs	r1, #87	; 0x57
   105c6:	2d08      	cmp	r5, #8
   105c8:	bf96      	itet	ls
   105ca:	4b6d      	ldrls	r3, [pc, #436]	; (10780 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   105cc:	4a6d      	ldrhi	r2, [pc, #436]	; (10784 <bt_conn_set_state+0x1cc>)
   105ce:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   105d2:	486d      	ldr	r0, [pc, #436]	; (10788 <bt_conn_set_state+0x1d0>)
}
   105d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   105d8:	f009 b89e 	b.w	19718 <printk>
	conn->state = state;
   105dc:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   105de:	b165      	cbz	r5, 105fa <bt_conn_set_state+0x42>
   105e0:	2d06      	cmp	r5, #6
   105e2:	d00d      	beq.n	10600 <bt_conn_set_state+0x48>
	switch (conn->state) {
   105e4:	7aa3      	ldrb	r3, [r4, #10]
   105e6:	2b08      	cmp	r3, #8
   105e8:	f200 80c5 	bhi.w	10776 <bt_conn_set_state+0x1be>
   105ec:	e8df f003 	tbb	[pc, r3]
   105f0:	c7c70f4a 	.word	0xc7c70f4a
   105f4:	278ec7c7 	.word	0x278ec7c7
   105f8:	c7          	.byte	0xc7
   105f9:	00          	.byte	0x00
		bt_conn_ref(conn);
   105fa:	f00a fd68 	bl	1b0ce <bt_conn_ref>
		break;
   105fe:	e7f1      	b.n	105e4 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10600:	7883      	ldrb	r3, [r0, #2]
   10602:	2b01      	cmp	r3, #1
   10604:	d1ee      	bne.n	105e4 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   10606:	3058      	adds	r0, #88	; 0x58
   10608:	f008 f998 	bl	1893c <k_delayed_work_cancel>
   1060c:	e7ea      	b.n	105e4 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   1060e:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   10610:	4d5e      	ldr	r5, [pc, #376]	; (1078c <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   10612:	f04f 0320 	mov.w	r3, #32
   10616:	f3ef 8211 	mrs	r2, BASEPRI
   1061a:	f383 8811 	msr	BASEPRI, r3
   1061e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   10622:	69e3      	ldr	r3, [r4, #28]
   10624:	2b00      	cmp	r3, #0
   10626:	f000 8087 	beq.w	10738 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   1062a:	3b01      	subs	r3, #1
   1062c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1062e:	f382 8811 	msr	BASEPRI, r2
   10632:	f3bf 8f6f 	isb	sy
   10636:	4628      	mov	r0, r5
   10638:	f007 feae 	bl	18398 <z_impl_k_sem_give>
}
   1063c:	e7e9      	b.n	10612 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1063e:	78a3      	ldrb	r3, [r4, #2]
   10640:	2b04      	cmp	r3, #4
   10642:	f000 809c 	beq.w	1077e <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   10646:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1064a:	f00c fbf5 	bl	1ce38 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   1064e:	2100      	movs	r1, #0
   10650:	484f      	ldr	r0, [pc, #316]	; (10790 <bt_conn_set_state+0x1d8>)
   10652:	f008 ff33 	bl	194bc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   10656:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   10658:	4620      	mov	r0, r4
	list->tail = NULL;
   1065a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   1065e:	f000 fc8f 	bl	10f80 <bt_l2cap_connected>
		notify_connected(conn);
   10662:	4620      	mov	r0, r4
   10664:	f7ff fd02 	bl	1006c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10668:	78e3      	ldrb	r3, [r4, #3]
   1066a:	2b01      	cmp	r3, #1
   1066c:	f040 8087 	bne.w	1077e <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10670:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   10674:	2300      	movs	r3, #0
   10676:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1067a:	4846      	ldr	r0, [pc, #280]	; (10794 <bt_conn_set_state+0x1dc>)
}
   1067c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10680:	f008 b8ec 	b.w	1885c <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   10684:	78a3      	ldrb	r3, [r4, #2]
   10686:	2b04      	cmp	r3, #4
   10688:	d104      	bne.n	10694 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1068a:	4620      	mov	r0, r4
}
   1068c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   10690:	f7ff bf66 	b.w	10560 <bt_conn_unref>
		switch (old_state) {
   10694:	2d08      	cmp	r5, #8
   10696:	d872      	bhi.n	1077e <bt_conn_set_state+0x1c6>
   10698:	a301      	add	r3, pc, #4	; (adr r3, 106a0 <bt_conn_set_state+0xe8>)
   1069a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1069e:	bf00      	nop
   106a0:	00010705 	.word	0x00010705
   106a4:	000106c5 	.word	0x000106c5
   106a8:	000106f7 	.word	0x000106f7
   106ac:	0001068b 	.word	0x0001068b
   106b0:	0001068b 	.word	0x0001068b
   106b4:	000106f7 	.word	0x000106f7
   106b8:	000106f7 	.word	0x000106f7
   106bc:	00010705 	.word	0x00010705
   106c0:	00010705 	.word	0x00010705
			tx_notify(conn);
   106c4:	4620      	mov	r0, r4
   106c6:	f00a fc8f 	bl	1afe8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   106ca:	78a3      	ldrb	r3, [r4, #2]
   106cc:	2b01      	cmp	r3, #1
   106ce:	d103      	bne.n	106d8 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   106d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   106d4:	f008 f932 	bl	1893c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   106d8:	3404      	adds	r4, #4
   106da:	e8d4 3fef 	ldaex	r3, [r4]
   106de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106e2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   106e6:	2a00      	cmp	r2, #0
   106e8:	d1f7      	bne.n	106da <bt_conn_set_state+0x122>
}
   106ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106ee:	2100      	movs	r1, #0
   106f0:	4827      	ldr	r0, [pc, #156]	; (10790 <bt_conn_set_state+0x1d8>)
   106f2:	f008 bee3 	b.w	194bc <z_impl_k_poll_signal_raise>
			if (conn->err) {
   106f6:	7a63      	ldrb	r3, [r4, #9]
   106f8:	2b00      	cmp	r3, #0
   106fa:	d0c6      	beq.n	1068a <bt_conn_set_state+0xd2>
				notify_connected(conn);
   106fc:	4620      	mov	r0, r4
   106fe:	f7ff fcb5 	bl	1006c <notify_connected>
   10702:	e7c2      	b.n	1068a <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   10704:	4632      	mov	r2, r6
   10706:	2157      	movs	r1, #87	; 0x57
   10708:	4823      	ldr	r0, [pc, #140]	; (10798 <bt_conn_set_state+0x1e0>)
   1070a:	e763      	b.n	105d4 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1070c:	78a3      	ldrb	r3, [r4, #2]
   1070e:	2b01      	cmp	r3, #1
   10710:	d135      	bne.n	1077e <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   10712:	4b22      	ldr	r3, [pc, #136]	; (1079c <bt_conn_set_state+0x1e4>)
   10714:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10718:	8a9d      	ldrh	r5, [r3, #20]
   1071a:	230a      	movs	r3, #10
   1071c:	f240 30e7 	movw	r0, #999	; 0x3e7
   10720:	2100      	movs	r1, #0
   10722:	435d      	muls	r5, r3
   10724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10728:	2300      	movs	r3, #0
   1072a:	fbc5 0106 	smlal	r0, r1, r5, r6
   1072e:	f7f8 f9fd 	bl	8b2c <__aeabi_uldivmod>
   10732:	4602      	mov	r2, r0
   10734:	460b      	mov	r3, r1
   10736:	e79e      	b.n	10676 <bt_conn_set_state+0xbe>
	return list->head;
   10738:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1073a:	b128      	cbz	r0, 10748 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1073c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1073e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10740:	4288      	cmp	r0, r1
	list->head = node;
   10742:	6163      	str	r3, [r4, #20]
	list->tail = node;
   10744:	bf08      	it	eq
   10746:	61a3      	streq	r3, [r4, #24]
   10748:	f382 8811 	msr	BASEPRI, r2
   1074c:	f3bf 8f6f 	isb	sy
		if (!node) {
   10750:	b1a8      	cbz	r0, 1077e <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   10752:	f04f 0220 	mov.w	r2, #32
   10756:	f3ef 8311 	mrs	r3, BASEPRI
   1075a:	f382 8811 	msr	BASEPRI, r2
   1075e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   10762:	68c2      	ldr	r2, [r0, #12]
   10764:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   10766:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   10768:	f383 8811 	msr	BASEPRI, r3
   1076c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   10770:	f7ff fc72 	bl	10058 <tx_free>
   10774:	e75f      	b.n	10636 <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   10776:	4632      	mov	r2, r6
   10778:	2157      	movs	r1, #87	; 0x57
   1077a:	4809      	ldr	r0, [pc, #36]	; (107a0 <bt_conn_set_state+0x1e8>)
   1077c:	e72a      	b.n	105d4 <bt_conn_set_state+0x1c>
}
   1077e:	bd70      	pop	{r4, r5, r6, pc}
   10780:	0001dae8 	.word	0x0001dae8
   10784:	000201ae 	.word	0x000201ae
   10788:	000201b8 	.word	0x000201b8
   1078c:	200080c8 	.word	0x200080c8
   10790:	2000841c 	.word	0x2000841c
   10794:	2000a3a0 	.word	0x2000a3a0
   10798:	000201ce 	.word	0x000201ce
   1079c:	20008000 	.word	0x20008000
   107a0:	000201ea 	.word	0x000201ea

000107a4 <bt_conn_lookup_addr_le>:
{
   107a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107a8:	4607      	mov	r7, r0
   107aa:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   107ac:	2500      	movs	r5, #0
   107ae:	4e0e      	ldr	r6, [pc, #56]	; (107e8 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   107b0:	4630      	mov	r0, r6
   107b2:	f00a fc8c 	bl	1b0ce <bt_conn_ref>
		if (!conn) {
   107b6:	4604      	mov	r4, r0
   107b8:	b120      	cbz	r0, 107c4 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   107ba:	7883      	ldrb	r3, [r0, #2]
   107bc:	2b01      	cmp	r3, #1
   107be:	d00a      	beq.n	107d6 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   107c0:	f7ff fece 	bl	10560 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   107c4:	3501      	adds	r5, #1
   107c6:	2d0a      	cmp	r5, #10
   107c8:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   107cc:	d1f0      	bne.n	107b0 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   107ce:	2400      	movs	r4, #0
}
   107d0:	4620      	mov	r0, r4
   107d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   107d6:	4642      	mov	r2, r8
   107d8:	4639      	mov	r1, r7
   107da:	f00a fc58 	bl	1b08e <bt_conn_is_peer_addr_le>
   107de:	2800      	cmp	r0, #0
   107e0:	d1f6      	bne.n	107d0 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   107e2:	4620      	mov	r0, r4
   107e4:	e7ec      	b.n	107c0 <bt_conn_lookup_addr_le+0x1c>
   107e6:	bf00      	nop
   107e8:	20008b48 	.word	0x20008b48

000107ec <bt_conn_exists_le>:
{
   107ec:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   107ee:	f7ff ffd9 	bl	107a4 <bt_conn_lookup_addr_le>
	if (conn) {
   107f2:	4604      	mov	r4, r0
   107f4:	b170      	cbz	r0, 10814 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   107f6:	7a83      	ldrb	r3, [r0, #10]
   107f8:	2157      	movs	r1, #87	; 0x57
   107fa:	2b08      	cmp	r3, #8
   107fc:	bf96      	itet	ls
   107fe:	4a06      	ldrls	r2, [pc, #24]	; (10818 <bt_conn_exists_le+0x2c>)
   10800:	4a06      	ldrhi	r2, [pc, #24]	; (1081c <bt_conn_exists_le+0x30>)
   10802:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   10806:	4806      	ldr	r0, [pc, #24]	; (10820 <bt_conn_exists_le+0x34>)
   10808:	f008 ff86 	bl	19718 <printk>
		bt_conn_unref(conn);
   1080c:	4620      	mov	r0, r4
   1080e:	f7ff fea7 	bl	10560 <bt_conn_unref>
		return true;
   10812:	2001      	movs	r0, #1
}
   10814:	bd10      	pop	{r4, pc}
   10816:	bf00      	nop
   10818:	0001dae8 	.word	0x0001dae8
   1081c:	000201ae 	.word	0x000201ae
   10820:	0002020b 	.word	0x0002020b

00010824 <bt_conn_lookup_state_le>:
{
   10824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10828:	4606      	mov	r6, r0
   1082a:	460f      	mov	r7, r1
   1082c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1082e:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10830:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   10834:	f8df a048 	ldr.w	sl, [pc, #72]	; 10880 <bt_conn_lookup_state_le+0x5c>
   10838:	fb09 a005 	mla	r0, r9, r5, sl
   1083c:	f00a fc47 	bl	1b0ce <bt_conn_ref>
		if (!conn) {
   10840:	4604      	mov	r4, r0
   10842:	b120      	cbz	r0, 1084e <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   10844:	7883      	ldrb	r3, [r0, #2]
   10846:	2b01      	cmp	r3, #1
   10848:	d006      	beq.n	10858 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   1084a:	f00a fc40 	bl	1b0ce <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1084e:	3501      	adds	r5, #1
   10850:	2d0a      	cmp	r5, #10
   10852:	d1f1      	bne.n	10838 <bt_conn_lookup_state_le+0x14>
	return NULL;
   10854:	2400      	movs	r4, #0
   10856:	e00f      	b.n	10878 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10858:	b147      	cbz	r7, 1086c <bt_conn_lookup_state_le+0x48>
   1085a:	463a      	mov	r2, r7
   1085c:	4631      	mov	r1, r6
   1085e:	f00a fc16 	bl	1b08e <bt_conn_is_peer_addr_le>
   10862:	b918      	cbnz	r0, 1086c <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   10864:	4620      	mov	r0, r4
   10866:	f7ff fe7b 	bl	10560 <bt_conn_unref>
			continue;
   1086a:	e7f0      	b.n	1084e <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   1086c:	7aa3      	ldrb	r3, [r4, #10]
   1086e:	4543      	cmp	r3, r8
   10870:	d1f8      	bne.n	10864 <bt_conn_lookup_state_le+0x40>
   10872:	7a23      	ldrb	r3, [r4, #8]
   10874:	42b3      	cmp	r3, r6
   10876:	d1f5      	bne.n	10864 <bt_conn_lookup_state_le+0x40>
}
   10878:	4620      	mov	r0, r4
   1087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1087e:	bf00      	nop
   10880:	20008b48 	.word	0x20008b48

00010884 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   10884:	b510      	push	{r4, lr}
	info->type = conn->type;
   10886:	7882      	ldrb	r2, [r0, #2]
   10888:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   1088a:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   1088c:	2a01      	cmp	r2, #1
	info->role = conn->role;
   1088e:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   10890:	7a03      	ldrb	r3, [r0, #8]
   10892:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   10894:	d11c      	bne.n	108d0 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   10896:	f100 0288 	add.w	r2, r0, #136	; 0x88
   1089a:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   1089c:	4a0e      	ldr	r2, [pc, #56]	; (108d8 <bt_conn_get_info+0x54>)
   1089e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   108a2:	4413      	add	r3, r2
   108a4:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   108a6:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   108aa:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   108ae:	b964      	cbnz	r4, 108ca <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   108b0:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   108b4:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   108b8:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   108ba:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   108be:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   108c0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   108c4:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   108c6:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   108c8:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   108ca:	e9c1 2303 	strd	r2, r3, [r1, #12]
   108ce:	e7f1      	b.n	108b4 <bt_conn_get_info+0x30>
	return -EINVAL;
   108d0:	f06f 0015 	mvn.w	r0, #21
   108d4:	e7f8      	b.n	108c8 <bt_conn_get_info+0x44>
   108d6:	bf00      	nop
   108d8:	20008000 	.word	0x20008000

000108dc <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   108dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   108e0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   108e2:	4844      	ldr	r0, [pc, #272]	; (109f4 <bt_conn_le_create+0x118>)
   108e4:	f00a fb7d 	bl	1afe2 <atomic_get>
   108e8:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   108ea:	0781      	lsls	r1, r0, #30
{
   108ec:	4615      	mov	r5, r2
   108ee:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   108f0:	d576      	bpl.n	109e0 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   108f2:	4610      	mov	r0, r2
   108f4:	f00a fad3 	bl	1ae9e <bt_le_conn_params_valid>
   108f8:	b928      	cbnz	r0, 10906 <bt_conn_le_create+0x2a>
		return -EINVAL;
   108fa:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   108fe:	4628      	mov	r0, r5
   10900:	b002      	add	sp, #8
   10902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10906:	483b      	ldr	r0, [pc, #236]	; (109f4 <bt_conn_le_create+0x118>)
   10908:	f00a fb6b 	bl	1afe2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1090c:	0642      	lsls	r2, r0, #25
   1090e:	d4f4      	bmi.n	108fa <bt_conn_le_create+0x1e>
   10910:	4838      	ldr	r0, [pc, #224]	; (109f4 <bt_conn_le_create+0x118>)
   10912:	f00a fb66 	bl	1afe2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   10916:	0503      	lsls	r3, r0, #20
   10918:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1091c:	d463      	bmi.n	109e6 <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   1091e:	f7fd fee7 	bl	e6f0 <bt_le_scan_random_addr_check>
   10922:	2800      	cmp	r0, #0
   10924:	d0e9      	beq.n	108fa <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   10926:	4621      	mov	r1, r4
   10928:	4640      	mov	r0, r8
   1092a:	f7ff ff5f 	bl	107ec <bt_conn_exists_le>
   1092e:	2800      	cmp	r0, #0
   10930:	d1e3      	bne.n	108fa <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   10932:	7823      	ldrb	r3, [r4, #0]
   10934:	3b02      	subs	r3, #2
   10936:	2b01      	cmp	r3, #1
   10938:	d847      	bhi.n	109ca <bt_conn_le_create+0xee>
   1093a:	2207      	movs	r2, #7
   1093c:	4621      	mov	r1, r4
   1093e:	4668      	mov	r0, sp
   10940:	f00a f94a 	bl	1abd8 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   10944:	f89d 3000 	ldrb.w	r3, [sp]
   10948:	3b02      	subs	r3, #2
   1094a:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1094e:	4669      	mov	r1, sp
   10950:	2000      	movs	r0, #0
   10952:	f7ff fdd9 	bl	10508 <bt_conn_add_le>
	if (!conn) {
   10956:	4604      	mov	r4, r0
   10958:	2800      	cmp	r0, #0
   1095a:	d047      	beq.n	109ec <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   1095c:	882b      	ldrh	r3, [r5, #0]
   1095e:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10962:	886b      	ldrh	r3, [r5, #2]
   10964:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   10968:	88ab      	ldrh	r3, [r5, #4]
   1096a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   1096e:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   10970:	4d21      	ldr	r5, [pc, #132]	; (109f8 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   10972:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   10976:	f105 0c08 	add.w	ip, r5, #8
   1097a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1097e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   10982:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   10984:	2b00      	cmp	r3, #0
   10986:	bf08      	it	eq
   10988:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1098c:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1098e:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   10990:	b903      	cbnz	r3, 10994 <bt_conn_le_create+0xb8>
   10992:	89ab      	ldrh	r3, [r5, #12]
   10994:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   10996:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   10998:	b903      	cbnz	r3, 1099c <bt_conn_le_create+0xc0>
   1099a:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1099c:	2106      	movs	r1, #6
   1099e:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   109a0:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   109a2:	f7ff fe09 	bl	105b8 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   109a6:	4620      	mov	r0, r4
   109a8:	f00a fa5c 	bl	1ae64 <bt_le_create_conn>
	if (err) {
   109ac:	4605      	mov	r5, r0
   109ae:	b1a8      	cbz	r0, 109dc <bt_conn_le_create+0x100>
		conn->err = 0;
   109b0:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   109b2:	4620      	mov	r0, r4
   109b4:	4631      	mov	r1, r6
		conn->err = 0;
   109b6:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   109b8:	f7ff fdfe 	bl	105b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   109bc:	4620      	mov	r0, r4
   109be:	f7ff fdcf 	bl	10560 <bt_conn_unref>
		bt_le_scan_update(false);
   109c2:	4630      	mov	r0, r6
   109c4:	f7fd ff20 	bl	e808 <bt_le_scan_update>
		return err;
   109c8:	e799      	b.n	108fe <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   109ca:	4621      	mov	r1, r4
   109cc:	f00a fa48 	bl	1ae60 <bt_lookup_id_addr>
   109d0:	2207      	movs	r2, #7
   109d2:	4601      	mov	r1, r0
   109d4:	4668      	mov	r0, sp
   109d6:	f00a f8ff 	bl	1abd8 <memcpy>
}
   109da:	e7b8      	b.n	1094e <bt_conn_le_create+0x72>
	*ret_conn = conn;
   109dc:	603c      	str	r4, [r7, #0]
	return 0;
   109de:	e78e      	b.n	108fe <bt_conn_le_create+0x22>
		return -EAGAIN;
   109e0:	f06f 050a 	mvn.w	r5, #10
   109e4:	e78b      	b.n	108fe <bt_conn_le_create+0x22>
		return -EALREADY;
   109e6:	f06f 0544 	mvn.w	r5, #68	; 0x44
   109ea:	e788      	b.n	108fe <bt_conn_le_create+0x22>
		return -ENOMEM;
   109ec:	f06f 050b 	mvn.w	r5, #11
   109f0:	e785      	b.n	108fe <bt_conn_le_create+0x22>
   109f2:	bf00      	nop
   109f4:	20008094 	.word	0x20008094
   109f8:	20008000 	.word	0x20008000

000109fc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   109fc:	b570      	push	{r4, r5, r6, lr}
   109fe:	4606      	mov	r6, r0
   10a00:	4834      	ldr	r0, [pc, #208]	; (10ad4 <bt_le_set_auto_conn+0xd8>)
   10a02:	f00a faee 	bl	1afe2 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a06:	0780      	lsls	r0, r0, #30
{
   10a08:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a0a:	d55c      	bpl.n	10ac6 <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   10a0c:	b929      	cbnz	r1, 10a1a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   10a0e:	f7fd fe6f 	bl	e6f0 <bt_le_scan_random_addr_check>
   10a12:	b940      	cbnz	r0, 10a26 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   10a14:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   10a18:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   10a1a:	4608      	mov	r0, r1
   10a1c:	f00a fa3f 	bl	1ae9e <bt_le_conn_params_valid>
   10a20:	2800      	cmp	r0, #0
   10a22:	d1f4      	bne.n	10a0e <bt_le_set_auto_conn+0x12>
   10a24:	e7f6      	b.n	10a14 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   10a26:	4631      	mov	r1, r6
   10a28:	2000      	movs	r0, #0
   10a2a:	f7ff febb 	bl	107a4 <bt_conn_lookup_addr_le>
	if (!conn) {
   10a2e:	4604      	mov	r4, r0
   10a30:	b928      	cbnz	r0, 10a3e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   10a32:	4631      	mov	r1, r6
   10a34:	f7ff fd68 	bl	10508 <bt_conn_add_le>
		if (!conn) {
   10a38:	4604      	mov	r4, r0
   10a3a:	2800      	cmp	r0, #0
   10a3c:	d046      	beq.n	10acc <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   10a3e:	1d23      	adds	r3, r4, #4
	if (param) {
   10a40:	b365      	cbz	r5, 10a9c <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   10a42:	882a      	ldrh	r2, [r5, #0]
   10a44:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10a48:	886a      	ldrh	r2, [r5, #2]
   10a4a:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   10a4e:	88aa      	ldrh	r2, [r5, #4]
   10a50:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10a54:	88ea      	ldrh	r2, [r5, #6]
   10a56:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10a5a:	e8d3 2fef 	ldaex	r2, [r3]
   10a5e:	f042 0101 	orr.w	r1, r2, #1
   10a62:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10a66:	2800      	cmp	r0, #0
   10a68:	d1f7      	bne.n	10a5a <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   10a6a:	07d1      	lsls	r1, r2, #31
   10a6c:	d402      	bmi.n	10a74 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   10a6e:	4620      	mov	r0, r4
   10a70:	f00a fb2d 	bl	1b0ce <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   10a74:	7aa3      	ldrb	r3, [r4, #10]
   10a76:	b963      	cbnz	r3, 10a92 <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10a78:	4816      	ldr	r0, [pc, #88]	; (10ad4 <bt_le_set_auto_conn+0xd8>)
   10a7a:	f00a fab2 	bl	1afe2 <atomic_get>
   10a7e:	0783      	lsls	r3, r0, #30
   10a80:	d507      	bpl.n	10a92 <bt_le_set_auto_conn+0x96>
		if (param) {
   10a82:	b11d      	cbz	r5, 10a8c <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10a84:	2102      	movs	r1, #2
   10a86:	4620      	mov	r0, r4
   10a88:	f7ff fd96 	bl	105b8 <bt_conn_set_state>
		bt_le_scan_update(false);
   10a8c:	2000      	movs	r0, #0
   10a8e:	f7fd febb 	bl	e808 <bt_le_scan_update>
	bt_conn_unref(conn);
   10a92:	4620      	mov	r0, r4
   10a94:	f7ff fd64 	bl	10560 <bt_conn_unref>
	return 0;
   10a98:	2000      	movs	r0, #0
   10a9a:	e7bd      	b.n	10a18 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a9c:	e8d3 2fef 	ldaex	r2, [r3]
   10aa0:	f022 0101 	bic.w	r1, r2, #1
   10aa4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10aa8:	2800      	cmp	r0, #0
   10aaa:	d1f7      	bne.n	10a9c <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   10aac:	07d2      	lsls	r2, r2, #31
   10aae:	d5e1      	bpl.n	10a74 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   10ab0:	4620      	mov	r0, r4
   10ab2:	f7ff fd55 	bl	10560 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   10ab6:	7aa3      	ldrb	r3, [r4, #10]
   10ab8:	2b02      	cmp	r3, #2
   10aba:	d1db      	bne.n	10a74 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10abc:	4629      	mov	r1, r5
   10abe:	4620      	mov	r0, r4
   10ac0:	f7ff fd7a 	bl	105b8 <bt_conn_set_state>
   10ac4:	e7d6      	b.n	10a74 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   10ac6:	f06f 000a 	mvn.w	r0, #10
   10aca:	e7a5      	b.n	10a18 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   10acc:	f06f 000b 	mvn.w	r0, #11
   10ad0:	e7a2      	b.n	10a18 <bt_le_set_auto_conn+0x1c>
   10ad2:	bf00      	nop
   10ad4:	20008094 	.word	0x20008094

00010ad8 <bt_conn_disconnect>:
{
   10ad8:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ada:	7883      	ldrb	r3, [r0, #2]
{
   10adc:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ade:	2b01      	cmp	r3, #1
{
   10ae0:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ae2:	d103      	bne.n	10aec <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   10ae4:	2100      	movs	r1, #0
   10ae6:	3088      	adds	r0, #136	; 0x88
   10ae8:	f7ff ff88 	bl	109fc <bt_le_set_auto_conn>
	switch (conn->state) {
   10aec:	7aa3      	ldrb	r3, [r4, #10]
   10aee:	3b02      	subs	r3, #2
   10af0:	2b06      	cmp	r3, #6
   10af2:	d805      	bhi.n	10b00 <bt_conn_disconnect+0x28>
   10af4:	e8df f003 	tbb	[pc, r3]
   10af8:	12040408 	.word	0x12040408
   10afc:	271f      	.short	0x271f
   10afe:	10          	.byte	0x10
   10aff:	00          	.byte	0x00
   10b00:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   10b04:	4628      	mov	r0, r5
   10b06:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b08:	4620      	mov	r0, r4
   10b0a:	2100      	movs	r1, #0
		conn->err = reason;
   10b0c:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b0e:	f7ff fd53 	bl	105b8 <bt_conn_set_state>
			bt_le_scan_update(false);
   10b12:	2000      	movs	r0, #0
   10b14:	f7fd fe78 	bl	e808 <bt_le_scan_update>
		return 0;
   10b18:	2500      	movs	r5, #0
   10b1a:	e7f3      	b.n	10b04 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   10b1c:	2157      	movs	r1, #87	; 0x57
   10b1e:	4810      	ldr	r0, [pc, #64]	; (10b60 <bt_conn_disconnect+0x88>)
   10b20:	f008 fdfa 	bl	19718 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b24:	4620      	mov	r0, r4
		conn->err = reason;
   10b26:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b28:	2100      	movs	r1, #0
   10b2a:	f7ff fd45 	bl	105b8 <bt_conn_set_state>
}
   10b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   10b32:	f7fe bff1 	b.w	fb18 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   10b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10b3a:	f007 feff 	bl	1893c <k_delayed_work_cancel>
}
   10b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   10b42:	f7fd be3d 	b.w	e7c0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   10b46:	4629      	mov	r1, r5
   10b48:	8820      	ldrh	r0, [r4, #0]
   10b4a:	f00a f98d 	bl	1ae68 <bt_hci_disconnect>
	if (err) {
   10b4e:	4605      	mov	r5, r0
   10b50:	2800      	cmp	r0, #0
   10b52:	d1d7      	bne.n	10b04 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   10b54:	2108      	movs	r1, #8
   10b56:	4620      	mov	r0, r4
   10b58:	f7ff fd2e 	bl	105b8 <bt_conn_set_state>
	return 0;
   10b5c:	e7d2      	b.n	10b04 <bt_conn_disconnect+0x2c>
   10b5e:	bf00      	nop
   10b60:	00020233 	.word	0x00020233

00010b64 <send_conn_le_param_update>:
{
   10b64:	b538      	push	{r3, r4, r5, lr}
   10b66:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10b68:	4608      	mov	r0, r1
{
   10b6a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10b6c:	f00a f997 	bl	1ae9e <bt_le_conn_params_valid>
   10b70:	b308      	cbz	r0, 10bb6 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10b72:	4b12      	ldr	r3, [pc, #72]	; (10bbc <send_conn_le_param_update+0x58>)
   10b74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10b78:	0799      	lsls	r1, r3, #30
   10b7a:	d407      	bmi.n	10b8c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   10b7c:	78e3      	ldrb	r3, [r4, #3]
   10b7e:	b173      	cbz	r3, 10b9e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10b80:	4629      	mov	r1, r5
   10b82:	4620      	mov	r0, r4
}
   10b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10b88:	f000 bb14 	b.w	111b4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10b8c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   10b90:	079a      	lsls	r2, r3, #30
   10b92:	d5f3      	bpl.n	10b7c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b94:	1d20      	adds	r0, r4, #4
   10b96:	f00a fa24 	bl	1afe2 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   10b9a:	0543      	lsls	r3, r0, #21
   10b9c:	d4ee      	bmi.n	10b7c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   10b9e:	4629      	mov	r1, r5
   10ba0:	4620      	mov	r0, r4
   10ba2:	f00a facf 	bl	1b144 <bt_conn_le_conn_update>
		if (rc == 0) {
   10ba6:	b928      	cbnz	r0, 10bb4 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   10ba8:	88ab      	ldrh	r3, [r5, #4]
   10baa:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   10bae:	88eb      	ldrh	r3, [r5, #6]
   10bb0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   10bb4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10bb6:	f06f 0015 	mvn.w	r0, #21
   10bba:	e7fb      	b.n	10bb4 <send_conn_le_param_update+0x50>
   10bbc:	20008000 	.word	0x20008000

00010bc0 <deferred_work>:
{
   10bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   10bc2:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   10bc6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   10bc8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   10bcc:	b99b      	cbnz	r3, 10bf6 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   10bce:	4630      	mov	r0, r6
   10bd0:	f00a fb18 	bl	1b204 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   10bd4:	4b26      	ldr	r3, [pc, #152]	; (10c70 <deferred_work+0xb0>)
   10bd6:	681d      	ldr	r5, [r3, #0]
   10bd8:	b92d      	cbnz	r5, 10be6 <deferred_work+0x26>
		bt_conn_unref(conn);
   10bda:	4630      	mov	r0, r6
}
   10bdc:	b002      	add	sp, #8
   10bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   10be2:	f7ff bcbd 	b.w	10560 <bt_conn_unref>
		if (cb->disconnected) {
   10be6:	686b      	ldr	r3, [r5, #4]
   10be8:	b11b      	cbz	r3, 10bf2 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   10bea:	4630      	mov	r0, r6
   10bec:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   10bf0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10bf2:	692d      	ldr	r5, [r5, #16]
   10bf4:	e7f0      	b.n	10bd8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   10bf6:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   10bfa:	2b01      	cmp	r3, #1
   10bfc:	d12f      	bne.n	10c5e <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10bfe:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   10c02:	b923      	cbnz	r3, 10c0e <deferred_work+0x4e>
}
   10c04:	b002      	add	sp, #8
   10c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   10c0a:	f7fd bdd9 	b.w	e7c0 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   10c0e:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10c12:	e8d5 3fef 	ldaex	r3, [r5]
   10c16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   10c1a:	e8c5 2fe1 	stlex	r1, r2, [r5]
   10c1e:	2900      	cmp	r1, #0
   10c20:	d1f7      	bne.n	10c12 <deferred_work+0x52>
   10c22:	059b      	lsls	r3, r3, #22
   10c24:	d51d      	bpl.n	10c62 <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   10c26:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   10c2a:	f8ad 3000 	strh.w	r3, [sp]
   10c2e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   10c32:	f8ad 3002 	strh.w	r3, [sp, #2]
   10c36:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   10c3a:	f8ad 3004 	strh.w	r3, [sp, #4]
   10c3e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   10c42:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   10c46:	4669      	mov	r1, sp
   10c48:	4630      	mov	r0, r6
   10c4a:	f7ff ff8b 	bl	10b64 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10c4e:	e8d5 3fef 	ldaex	r3, [r5]
   10c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10c56:	e8c5 3fe2 	stlex	r2, r3, [r5]
   10c5a:	2a00      	cmp	r2, #0
   10c5c:	d1f7      	bne.n	10c4e <deferred_work+0x8e>
}
   10c5e:	b002      	add	sp, #8
   10c60:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   10c62:	466b      	mov	r3, sp
   10c64:	4a03      	ldr	r2, [pc, #12]	; (10c74 <deferred_work+0xb4>)
   10c66:	6810      	ldr	r0, [r2, #0]
   10c68:	6851      	ldr	r1, [r2, #4]
   10c6a:	c303      	stmia	r3!, {r0, r1}
   10c6c:	e7eb      	b.n	10c46 <deferred_work+0x86>
   10c6e:	bf00      	nop
   10c70:	2000a940 	.word	0x2000a940
   10c74:	0001d638 	.word	0x0001d638

00010c78 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   10c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c7a:	4604      	mov	r4, r0
   10c7c:	460d      	mov	r5, r1
   10c7e:	4617      	mov	r7, r2
   10c80:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   10c82:	f00c f94e 	bl	1cf22 <k_is_in_isr>
   10c86:	b150      	cbz	r0, 10c9e <bt_conn_create_pdu_timeout+0x26>
   10c88:	490f      	ldr	r1, [pc, #60]	; (10cc8 <bt_conn_create_pdu_timeout+0x50>)
   10c8a:	4810      	ldr	r0, [pc, #64]	; (10ccc <bt_conn_create_pdu_timeout+0x54>)
   10c8c:	f640 12ee 	movw	r2, #2542	; 0x9ee
   10c90:	f008 fd42 	bl	19718 <printk>
   10c94:	f640 11ee 	movw	r1, #2542	; 0x9ee
   10c98:	480b      	ldr	r0, [pc, #44]	; (10cc8 <bt_conn_create_pdu_timeout+0x50>)
   10c9a:	f008 ffe3 	bl	19c64 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   10c9e:	480c      	ldr	r0, [pc, #48]	; (10cd0 <bt_conn_create_pdu_timeout+0x58>)
   10ca0:	463a      	mov	r2, r7
   10ca2:	2c00      	cmp	r4, #0
   10ca4:	bf18      	it	ne
   10ca6:	4620      	movne	r0, r4
   10ca8:	4633      	mov	r3, r6
   10caa:	f00b fa69 	bl	1c180 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   10cae:	4604      	mov	r4, r0
   10cb0:	b928      	cbnz	r0, 10cbe <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   10cb2:	2157      	movs	r1, #87	; 0x57
   10cb4:	4807      	ldr	r0, [pc, #28]	; (10cd4 <bt_conn_create_pdu_timeout+0x5c>)
   10cb6:	f008 fd2f 	bl	19718 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   10cba:	4620      	mov	r0, r4
   10cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   10cbe:	1d69      	adds	r1, r5, #5
   10cc0:	3008      	adds	r0, #8
   10cc2:	f003 fc79 	bl	145b8 <net_buf_simple_reserve>
	return buf;
   10cc6:	e7f8      	b.n	10cba <bt_conn_create_pdu_timeout+0x42>
   10cc8:	00020068 	.word	0x00020068
   10ccc:	0001e6bc 	.word	0x0001e6bc
   10cd0:	200086d0 	.word	0x200086d0
   10cd4:	0002025f 	.word	0x0002025f

00010cd8 <bt_conn_create_frag_timeout>:
{
   10cd8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   10cda:	4801      	ldr	r0, [pc, #4]	; (10ce0 <bt_conn_create_frag_timeout+0x8>)
   10cdc:	f7ff bfcc 	b.w	10c78 <bt_conn_create_pdu_timeout>
   10ce0:	20008728 	.word	0x20008728

00010ce4 <create_frag>:
{
   10ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ce8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   10cea:	f04f 33ff 	mov.w	r3, #4294967295
   10cee:	f04f 32ff 	mov.w	r2, #4294967295
   10cf2:	2000      	movs	r0, #0
{
   10cf4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   10cf6:	f7ff ffef 	bl	10cd8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   10cfa:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   10cfc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10cfe:	2b07      	cmp	r3, #7
   10d00:	f04f 0600 	mov.w	r6, #0
   10d04:	d005      	beq.n	10d12 <create_frag+0x2e>
		net_buf_unref(frag);
   10d06:	f003 fca9 	bl	1465c <net_buf_unref>
		return NULL;
   10d0a:	4635      	mov	r5, r6
}
   10d0c:	4628      	mov	r0, r5
   10d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   10d12:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   10d14:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   10d18:	4e0c      	ldr	r6, [pc, #48]	; (10d4c <create_frag+0x68>)
   10d1a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10d1c:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   10d20:	f00b fa54 	bl	1c1cc <net_buf_simple_tailroom>
   10d24:	4580      	cmp	r8, r0
   10d26:	d20c      	bcs.n	10d42 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   10d28:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10d2c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   10d30:	4632      	mov	r2, r6
   10d32:	4638      	mov	r0, r7
   10d34:	f00b fa52 	bl	1c1dc <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   10d38:	4631      	mov	r1, r6
   10d3a:	4620      	mov	r0, r4
   10d3c:	f003 fd6a 	bl	14814 <net_buf_simple_pull>
   10d40:	e7e4      	b.n	10d0c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   10d42:	4638      	mov	r0, r7
   10d44:	f00b fa42 	bl	1c1cc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10d48:	b286      	uxth	r6, r0
   10d4a:	e7ef      	b.n	10d2c <create_frag+0x48>
   10d4c:	20008000 	.word	0x20008000

00010d50 <bt_conn_process_tx>:
{
   10d50:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10d52:	7a83      	ldrb	r3, [r0, #10]
{
   10d54:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   10d56:	b973      	cbnz	r3, 10d76 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d58:	1d03      	adds	r3, r0, #4
   10d5a:	e8d3 2fef 	ldaex	r2, [r3]
   10d5e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   10d62:	e8c3 1fe5 	stlex	r5, r1, [r3]
   10d66:	2d00      	cmp	r5, #0
   10d68:	d1f7      	bne.n	10d5a <bt_conn_process_tx+0xa>
   10d6a:	0653      	lsls	r3, r2, #25
   10d6c:	d503      	bpl.n	10d76 <bt_conn_process_tx+0x26>
}
   10d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   10d72:	f7ff ba8f 	b.w	10294 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   10d76:	2200      	movs	r2, #0
   10d78:	2300      	movs	r3, #0
   10d7a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10d7e:	f003 fbeb 	bl	14558 <net_buf_get>
	BT_ASSERT(buf);
   10d82:	4605      	mov	r5, r0
   10d84:	b958      	cbnz	r0, 10d9e <bt_conn_process_tx+0x4e>
   10d86:	f240 525f 	movw	r2, #1375	; 0x55f
   10d8a:	491e      	ldr	r1, [pc, #120]	; (10e04 <bt_conn_process_tx+0xb4>)
   10d8c:	481e      	ldr	r0, [pc, #120]	; (10e08 <bt_conn_process_tx+0xb8>)
   10d8e:	f008 fcc3 	bl	19718 <printk>
   10d92:	4040      	eors	r0, r0
   10d94:	f380 8811 	msr	BASEPRI, r0
   10d98:	f04f 0003 	mov.w	r0, #3
   10d9c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   10d9e:	4e1b      	ldr	r6, [pc, #108]	; (10e0c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   10da0:	89aa      	ldrh	r2, [r5, #12]
   10da2:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   10da6:	429a      	cmp	r2, r3
   10da8:	d807      	bhi.n	10dba <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   10daa:	2300      	movs	r3, #0
   10dac:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   10dae:	4629      	mov	r1, r5
   10db0:	4620      	mov	r0, r4
   10db2:	f7ff f971 	bl	10098 <send_frag>
	if (!send_buf(conn, buf)) {
   10db6:	b130      	cbz	r0, 10dc6 <bt_conn_process_tx+0x76>
}
   10db8:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   10dba:	4629      	mov	r1, r5
   10dbc:	4620      	mov	r0, r4
   10dbe:	f7ff ff91 	bl	10ce4 <create_frag>
	if (!frag) {
   10dc2:	4601      	mov	r1, r0
   10dc4:	b920      	cbnz	r0, 10dd0 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   10dc6:	4628      	mov	r0, r5
}
   10dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   10dcc:	f003 bc46 	b.w	1465c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   10dd0:	2301      	movs	r3, #1
   10dd2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10dd4:	4620      	mov	r0, r4
   10dd6:	f7ff f95f 	bl	10098 <send_frag>
   10dda:	2800      	cmp	r0, #0
   10ddc:	d0f3      	beq.n	10dc6 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   10dde:	89aa      	ldrh	r2, [r5, #12]
   10de0:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   10de4:	429a      	cmp	r2, r3
   10de6:	d802      	bhi.n	10dee <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   10de8:	2300      	movs	r3, #0
   10dea:	2203      	movs	r2, #3
   10dec:	e7df      	b.n	10dae <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   10dee:	4629      	mov	r1, r5
   10df0:	4620      	mov	r0, r4
   10df2:	f7ff ff77 	bl	10ce4 <create_frag>
		if (!frag) {
   10df6:	4601      	mov	r1, r0
   10df8:	2800      	cmp	r0, #0
   10dfa:	d0e4      	beq.n	10dc6 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10dfc:	2301      	movs	r3, #1
   10dfe:	461a      	mov	r2, r3
   10e00:	e7e8      	b.n	10dd4 <bt_conn_process_tx+0x84>
   10e02:	bf00      	nop
   10e04:	00020068 	.word	0x00020068
   10e08:	0001e6bc 	.word	0x0001e6bc
   10e0c:	20008000 	.word	0x20008000

00010e10 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   10e10:	4b0b      	ldr	r3, [pc, #44]	; (10e40 <bt_conn_index+0x30>)
{
   10e12:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   10e14:	1ac0      	subs	r0, r0, r3
   10e16:	4b0b      	ldr	r3, [pc, #44]	; (10e44 <bt_conn_index+0x34>)
   10e18:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   10e1a:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   10e1e:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   10e22:	d90a      	bls.n	10e3a <bt_conn_index+0x2a>
   10e24:	4908      	ldr	r1, [pc, #32]	; (10e48 <bt_conn_index+0x38>)
   10e26:	4809      	ldr	r0, [pc, #36]	; (10e4c <bt_conn_index+0x3c>)
   10e28:	f640 2295 	movw	r2, #2709	; 0xa95
   10e2c:	f008 fc74 	bl	19718 <printk>
   10e30:	f640 2195 	movw	r1, #2709	; 0xa95
   10e34:	4804      	ldr	r0, [pc, #16]	; (10e48 <bt_conn_index+0x38>)
   10e36:	f008 ff15 	bl	19c64 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   10e3a:	b2e0      	uxtb	r0, r4
   10e3c:	bd10      	pop	{r4, pc}
   10e3e:	bf00      	nop
   10e40:	20008b48 	.word	0x20008b48
   10e44:	aaaaaaab 	.word	0xaaaaaaab
   10e48:	00020068 	.word	0x00020068
   10e4c:	0001e6bc 	.word	0x0001e6bc

00010e50 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   10e50:	2809      	cmp	r0, #9
   10e52:	d806      	bhi.n	10e62 <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   10e54:	4b04      	ldr	r3, [pc, #16]	; (10e68 <bt_conn_lookup_index+0x18>)
   10e56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10e5a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   10e5e:	f00a b936 	b.w	1b0ce <bt_conn_ref>
}
   10e62:	2000      	movs	r0, #0
   10e64:	4770      	bx	lr
   10e66:	bf00      	nop
   10e68:	20008b48 	.word	0x20008b48

00010e6c <bt_conn_init>:

int bt_conn_init(void)
{
   10e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   10e6e:	4917      	ldr	r1, [pc, #92]	; (10ecc <bt_conn_init+0x60>)
   10e70:	4817      	ldr	r0, [pc, #92]	; (10ed0 <bt_conn_init+0x64>)
   10e72:	f00b ffee 	bl	1ce52 <k_queue_append>
   10e76:	4917      	ldr	r1, [pc, #92]	; (10ed4 <bt_conn_init+0x68>)
   10e78:	4815      	ldr	r0, [pc, #84]	; (10ed0 <bt_conn_init+0x64>)
   10e7a:	f00b ffea 	bl	1ce52 <k_queue_append>
   10e7e:	4916      	ldr	r1, [pc, #88]	; (10ed8 <bt_conn_init+0x6c>)
   10e80:	4813      	ldr	r0, [pc, #76]	; (10ed0 <bt_conn_init+0x64>)
   10e82:	f00b ffe6 	bl	1ce52 <k_queue_append>
	}

	bt_att_init();
   10e86:	f00a fd3d 	bl	1b904 <bt_att_init>

	err = bt_smp_init();
   10e8a:	f00b f976 	bl	1c17a <bt_smp_init>
	if (err) {
   10e8e:	4605      	mov	r5, r0
   10e90:	b9d0      	cbnz	r0, 10ec8 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   10e92:	f00a fa20 	bl	1b2d6 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10e96:	462e      	mov	r6, r5
   10e98:	4f10      	ldr	r7, [pc, #64]	; (10edc <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10e9a:	4638      	mov	r0, r7
   10e9c:	f00a f917 	bl	1b0ce <bt_conn_ref>

			if (!conn) {
   10ea0:	4604      	mov	r4, r0
   10ea2:	b160      	cbz	r0, 10ebe <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10ea4:	3004      	adds	r0, #4
   10ea6:	f00a f89c 	bl	1afe2 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   10eaa:	07c3      	lsls	r3, r0, #31
   10eac:	d504      	bpl.n	10eb8 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10eae:	2102      	movs	r1, #2
   10eb0:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   10eb2:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10eb4:	f7ff fb80 	bl	105b8 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   10eb8:	4620      	mov	r0, r4
   10eba:	f7ff fb51 	bl	10560 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10ebe:	3601      	adds	r6, #1
   10ec0:	2e0a      	cmp	r6, #10
   10ec2:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   10ec6:	d1e8      	bne.n	10e9a <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   10ec8:	4628      	mov	r0, r5
   10eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ecc:	2000a944 	.word	0x2000a944
   10ed0:	20008688 	.word	0x20008688
   10ed4:	2000a954 	.word	0x2000a954
   10ed8:	2000a964 	.word	0x2000a964
   10edc:	20008b48 	.word	0x20008b48

00010ee0 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   10ee0:	b570      	push	{r4, r5, r6, lr}
   10ee2:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   10ee4:	2400      	movs	r4, #0
   10ee6:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   10ee8:	4b09      	ldr	r3, [pc, #36]	; (10f10 <l2cap_accept+0x30>)
   10eea:	fb06 f504 	mul.w	r5, r6, r4
   10eee:	58e8      	ldr	r0, [r5, r3]
   10ef0:	b148      	cbz	r0, 10f06 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   10ef2:	3401      	adds	r4, #1
   10ef4:	2c0a      	cmp	r4, #10
   10ef6:	d1f8      	bne.n	10eea <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   10ef8:	4806      	ldr	r0, [pc, #24]	; (10f14 <l2cap_accept+0x34>)
   10efa:	2145      	movs	r1, #69	; 0x45
   10efc:	f008 fc0c 	bl	19718 <printk>
   10f00:	f06f 000b 	mvn.w	r0, #11
   10f04:	e003      	b.n	10f0e <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   10f06:	4a04      	ldr	r2, [pc, #16]	; (10f18 <l2cap_accept+0x38>)
   10f08:	442b      	add	r3, r5
   10f0a:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   10f0c:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   10f0e:	bd70      	pop	{r4, r5, r6, pc}
   10f10:	200092c8 	.word	0x200092c8
   10f14:	000202f7 	.word	0x000202f7
   10f18:	0001db2c 	.word	0x0001db2c

00010f1c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   10f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f1e:	4605      	mov	r5, r0
   10f20:	460f      	mov	r7, r1
   10f22:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   10f24:	2300      	movs	r3, #0
   10f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10f2a:	2104      	movs	r1, #4
   10f2c:	2000      	movs	r0, #0
   10f2e:	f7ff fea3 	bl	10c78 <bt_conn_create_pdu_timeout>
	if (!buf) {
   10f32:	4604      	mov	r4, r0
   10f34:	b930      	cbnz	r0, 10f44 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   10f36:	462a      	mov	r2, r5
   10f38:	2145      	movs	r1, #69	; 0x45
   10f3a:	4806      	ldr	r0, [pc, #24]	; (10f54 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   10f3c:	f008 fbec 	bl	19718 <printk>
}
   10f40:	4620      	mov	r0, r4
   10f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   10f44:	2104      	movs	r1, #4
   10f46:	3008      	adds	r0, #8
   10f48:	f003 fc9e 	bl	14888 <net_buf_simple_add>
	hdr->code = code;
   10f4c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   10f4e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   10f50:	8046      	strh	r6, [r0, #2]
	return buf;
   10f52:	e7f5      	b.n	10f40 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   10f54:	00020323 	.word	0x00020323

00010f58 <l2cap_rtx_timeout>:
{
   10f58:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   10f5a:	4604      	mov	r4, r0
   10f5c:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   10f60:	2145      	movs	r1, #69	; 0x45
   10f62:	4622      	mov	r2, r4
   10f64:	4805      	ldr	r0, [pc, #20]	; (10f7c <l2cap_rtx_timeout+0x24>)
   10f66:	f008 fbd7 	bl	19718 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   10f6a:	4628      	mov	r0, r5
   10f6c:	4621      	mov	r1, r4
   10f6e:	f00a f913 	bl	1b198 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   10f72:	4620      	mov	r0, r4
}
   10f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   10f78:	f00a b92f 	b.w	1b1da <bt_l2cap_chan_del>
   10f7c:	00020350 	.word	0x00020350

00010f80 <bt_l2cap_connected>:
{
   10f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10f84:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   10f86:	4e2d      	ldr	r6, [pc, #180]	; (1103c <bt_l2cap_connected+0xbc>)
   10f88:	4f2d      	ldr	r7, [pc, #180]	; (11040 <bt_l2cap_connected+0xc0>)
   10f8a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11044 <bt_l2cap_connected+0xc4>
   10f8e:	42be      	cmp	r6, r7
   10f90:	d90a      	bls.n	10fa8 <bt_l2cap_connected+0x28>
   10f92:	4641      	mov	r1, r8
   10f94:	482c      	ldr	r0, [pc, #176]	; (11048 <bt_l2cap_connected+0xc8>)
   10f96:	f240 1267 	movw	r2, #359	; 0x167
   10f9a:	f008 fbbd 	bl	19718 <printk>
   10f9e:	f240 1167 	movw	r1, #359	; 0x167
   10fa2:	4640      	mov	r0, r8
   10fa4:	f008 fe5e 	bl	19c64 <assert_post_action>
   10fa8:	42be      	cmp	r6, r7
   10faa:	d302      	bcc.n	10fb2 <bt_l2cap_connected+0x32>
}
   10fac:	b003      	add	sp, #12
   10fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   10fb2:	4628      	mov	r0, r5
   10fb4:	6873      	ldr	r3, [r6, #4]
   10fb6:	a901      	add	r1, sp, #4
   10fb8:	4798      	blx	r3
   10fba:	2800      	cmp	r0, #0
   10fbc:	db38      	blt.n	11030 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   10fbe:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   10fc0:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   10fc2:	2230      	movs	r2, #48	; 0x30
   10fc4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   10fc8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   10fcc:	2100      	movs	r1, #0
   10fce:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   10fd2:	f8d6 9008 	ldr.w	r9, [r6, #8]
   10fd6:	f009 fe2a 	bl	1ac2e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10fda:	2200      	movs	r2, #0
   10fdc:	4b1b      	ldr	r3, [pc, #108]	; (1104c <bt_l2cap_connected+0xcc>)
   10fde:	6163      	str	r3, [r4, #20]
   10fe0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10fe4:	e8d3 1fef 	ldaex	r1, [r3]
   10fe8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   10fec:	2800      	cmp	r0, #0
   10fee:	d1f9      	bne.n	10fe4 <bt_l2cap_connected+0x64>
	parent->next = child;
   10ff0:	60a2      	str	r2, [r4, #8]
	return list->tail;
   10ff2:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   10ff4:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   10ff8:	b9e2      	cbnz	r2, 11034 <bt_l2cap_connected+0xb4>
	list->head = node;
   10ffa:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   10ffe:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11000:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   11002:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   11004:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11008:	681b      	ldr	r3, [r3, #0]
   1100a:	b103      	cbz	r3, 1100e <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   1100c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	3340      	adds	r3, #64	; 0x40
   11012:	e8d3 2fef 	ldaex	r2, [r3]
   11016:	f042 0201 	orr.w	r2, r2, #1
   1101a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1101e:	2900      	cmp	r1, #0
   11020:	d1f7      	bne.n	11012 <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   11022:	9801      	ldr	r0, [sp, #4]
   11024:	6843      	ldr	r3, [r0, #4]
   11026:	699b      	ldr	r3, [r3, #24]
   11028:	b113      	cbz	r3, 11030 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   1102a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1102e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11030:	360c      	adds	r6, #12
   11032:	e7ac      	b.n	10f8e <bt_l2cap_connected+0xe>
	parent->next = child;
   11034:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11036:	656b      	str	r3, [r5, #84]	; 0x54
}
   11038:	e7e1      	b.n	10ffe <bt_l2cap_connected+0x7e>
   1103a:	bf00      	nop
   1103c:	0001d418 	.word	0x0001d418
   11040:	0001d43c 	.word	0x0001d43c
   11044:	00020365 	.word	0x00020365
   11048:	0001e6bc 	.word	0x0001e6bc
   1104c:	00010f59 	.word	0x00010f59

00011050 <l2cap_recv>:
{
   11050:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   11052:	898b      	ldrh	r3, [r1, #12]
{
   11054:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11056:	2b03      	cmp	r3, #3
{
   11058:	460d      	mov	r5, r1
   1105a:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1105c:	d804      	bhi.n	11068 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   1105e:	2145      	movs	r1, #69	; 0x45
   11060:	483a      	ldr	r0, [pc, #232]	; (1114c <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11062:	f008 fb59 	bl	19718 <printk>
		return 0;
   11066:	e00d      	b.n	11084 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11068:	2104      	movs	r1, #4
   1106a:	f105 0008 	add.w	r0, r5, #8
   1106e:	f003 fbed 	bl	1484c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   11072:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   11074:	8843      	ldrh	r3, [r0, #2]
   11076:	4604      	mov	r4, r0
	if (buf->len != len) {
   11078:	4293      	cmp	r3, r2
   1107a:	d006      	beq.n	1108a <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1107c:	2145      	movs	r1, #69	; 0x45
   1107e:	4834      	ldr	r0, [pc, #208]	; (11150 <l2cap_recv+0x100>)
   11080:	f008 fb4a 	bl	19718 <printk>
}
   11084:	2000      	movs	r0, #0
   11086:	b005      	add	sp, #20
   11088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1108a:	7841      	ldrb	r1, [r0, #1]
   1108c:	b911      	cbnz	r1, 11094 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1108e:	2145      	movs	r1, #69	; 0x45
   11090:	4830      	ldr	r0, [pc, #192]	; (11154 <l2cap_recv+0x104>)
   11092:	e7e6      	b.n	11062 <l2cap_recv+0x12>
	switch (hdr->code) {
   11094:	7802      	ldrb	r2, [r0, #0]
   11096:	2a12      	cmp	r2, #18
   11098:	d00f      	beq.n	110ba <l2cap_recv+0x6a>
   1109a:	2a13      	cmp	r2, #19
   1109c:	d008      	beq.n	110b0 <l2cap_recv+0x60>
   1109e:	2a01      	cmp	r2, #1
   110a0:	d0f0      	beq.n	11084 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   110a2:	2157      	movs	r1, #87	; 0x57
   110a4:	482c      	ldr	r0, [pc, #176]	; (11158 <l2cap_recv+0x108>)
   110a6:	f008 fb37 	bl	19718 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   110aa:	7861      	ldrb	r1, [r4, #1]
   110ac:	6830      	ldr	r0, [r6, #0]
   110ae:	e00d      	b.n	110cc <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   110b0:	2b01      	cmp	r3, #1
   110b2:	d8e7      	bhi.n	11084 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   110b4:	2145      	movs	r1, #69	; 0x45
   110b6:	4829      	ldr	r0, [pc, #164]	; (1115c <l2cap_recv+0x10c>)
   110b8:	e7d3      	b.n	11062 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   110ba:	2b07      	cmp	r3, #7
   110bc:	d802      	bhi.n	110c4 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   110be:	2145      	movs	r1, #69	; 0x45
   110c0:	4827      	ldr	r0, [pc, #156]	; (11160 <l2cap_recv+0x110>)
   110c2:	e7ce      	b.n	11062 <l2cap_recv+0x12>
   110c4:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   110c6:	78e7      	ldrb	r7, [r4, #3]
   110c8:	b11f      	cbz	r7, 110d2 <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   110ca:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   110cc:	f00a f8cc 	bl	1b268 <l2cap_send_reject.constprop.0>
		break;
   110d0:	e7d8      	b.n	11084 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   110d2:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   110d4:	7850      	ldrb	r0, [r2, #1]
   110d6:	7813      	ldrb	r3, [r2, #0]
   110d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   110dc:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   110e0:	78d0      	ldrb	r0, [r2, #3]
   110e2:	7893      	ldrb	r3, [r2, #2]
   110e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   110e8:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   110ec:	7950      	ldrb	r0, [r2, #5]
   110ee:	7913      	ldrb	r3, [r2, #4]
   110f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   110f4:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   110f8:	7993      	ldrb	r3, [r2, #6]
   110fa:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   110fc:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   110fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11102:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   11104:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11108:	f7ff ff08 	bl	10f1c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1110c:	4605      	mov	r5, r0
   1110e:	2800      	cmp	r0, #0
   11110:	d0b8      	beq.n	11084 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   11112:	a902      	add	r1, sp, #8
   11114:	4620      	mov	r0, r4
   11116:	f7ff f895 	bl	10244 <le_param_req>
   1111a:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1111c:	2102      	movs	r1, #2
   1111e:	f105 0008 	add.w	r0, r5, #8
   11122:	f003 fbb1 	bl	14888 <net_buf_simple_add>
	if (accepted) {
   11126:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1112a:	b2db      	uxtb	r3, r3
   1112c:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1112e:	462a      	mov	r2, r5
   11130:	463b      	mov	r3, r7
   11132:	2105      	movs	r1, #5
   11134:	4620      	mov	r0, r4
   11136:	9700      	str	r7, [sp, #0]
   11138:	f00a f87d 	bl	1b236 <bt_l2cap_send_cb>
	if (accepted) {
   1113c:	2e00      	cmp	r6, #0
   1113e:	d0a1      	beq.n	11084 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   11140:	4620      	mov	r0, r4
   11142:	a902      	add	r1, sp, #8
   11144:	f009 fffe 	bl	1b144 <bt_conn_le_conn_update>
   11148:	e79c      	b.n	11084 <l2cap_recv+0x34>
   1114a:	bf00      	nop
   1114c:	00020396 	.word	0x00020396
   11150:	000203b9 	.word	0x000203b9
   11154:	000203df 	.word	0x000203df
   11158:	0002044e 	.word	0x0002044e
   1115c:	00020405 	.word	0x00020405
   11160:	00020426 	.word	0x00020426

00011164 <bt_l2cap_recv>:
{
   11164:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   11166:	898b      	ldrh	r3, [r1, #12]
{
   11168:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1116a:	2b03      	cmp	r3, #3
{
   1116c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1116e:	d808      	bhi.n	11182 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   11170:	2145      	movs	r1, #69	; 0x45
   11172:	480e      	ldr	r0, [pc, #56]	; (111ac <bt_l2cap_recv+0x48>)
   11174:	f008 fad0 	bl	19718 <printk>
	net_buf_unref(buf);
   11178:	4620      	mov	r0, r4
}
   1117a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1117e:	f003 ba6d 	b.w	1465c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   11182:	2104      	movs	r1, #4
   11184:	f104 0008 	add.w	r0, r4, #8
   11188:	f003 fb60 	bl	1484c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1118c:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1118e:	4628      	mov	r0, r5
   11190:	4611      	mov	r1, r2
   11192:	f00a f890 	bl	1b2b6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11196:	b920      	cbnz	r0, 111a2 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   11198:	2157      	movs	r1, #87	; 0x57
   1119a:	4805      	ldr	r0, [pc, #20]	; (111b0 <bt_l2cap_recv+0x4c>)
   1119c:	f008 fabc 	bl	19718 <printk>
		net_buf_unref(buf);
   111a0:	e7ea      	b.n	11178 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   111a2:	6843      	ldr	r3, [r0, #4]
   111a4:	4621      	mov	r1, r4
   111a6:	691b      	ldr	r3, [r3, #16]
   111a8:	4798      	blx	r3
   111aa:	e7e5      	b.n	11178 <bt_l2cap_recv+0x14>
   111ac:	00020471 	.word	0x00020471
   111b0:	00020493 	.word	0x00020493

000111b4 <bt_l2cap_update_conn_param>:
{
   111b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   111b6:	460c      	mov	r4, r1
	ident++;
   111b8:	4914      	ldr	r1, [pc, #80]	; (1120c <bt_l2cap_update_conn_param+0x58>)
{
   111ba:	4605      	mov	r5, r0
	ident++;
   111bc:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   111be:	2208      	movs	r2, #8
	ident++;
   111c0:	3301      	adds	r3, #1
	if (!ident) {
   111c2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   111c6:	bf08      	it	eq
   111c8:	2301      	moveq	r3, #1
   111ca:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   111cc:	2012      	movs	r0, #18
   111ce:	7809      	ldrb	r1, [r1, #0]
   111d0:	f7ff fea4 	bl	10f1c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   111d4:	4606      	mov	r6, r0
   111d6:	b1b0      	cbz	r0, 11206 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   111d8:	2108      	movs	r1, #8
   111da:	4408      	add	r0, r1
   111dc:	f003 fb54 	bl	14888 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   111e0:	8822      	ldrh	r2, [r4, #0]
   111e2:	2105      	movs	r1, #5
   111e4:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   111e6:	8862      	ldrh	r2, [r4, #2]
   111e8:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   111ea:	88a2      	ldrh	r2, [r4, #4]
   111ec:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   111ee:	88e2      	ldrh	r2, [r4, #6]
   111f0:	2400      	movs	r4, #0
   111f2:	80c2      	strh	r2, [r0, #6]
   111f4:	4623      	mov	r3, r4
   111f6:	4632      	mov	r2, r6
   111f8:	4628      	mov	r0, r5
   111fa:	9400      	str	r4, [sp, #0]
   111fc:	f00a f81b 	bl	1b236 <bt_l2cap_send_cb>
	return 0;
   11200:	4620      	mov	r0, r4
}
   11202:	b002      	add	sp, #8
   11204:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11206:	f06f 000b 	mvn.w	r0, #11
   1120a:	e7fa      	b.n	11202 <bt_l2cap_update_conn_param+0x4e>
   1120c:	2000c59e 	.word	0x2000c59e

00011210 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   11210:	4b02      	ldr	r3, [pc, #8]	; (1121c <att_cfm_sent+0xc>)
   11212:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11216:	f00a b871 	b.w	1b2fc <att_sent>
   1121a:	bf00      	nop
   1121c:	0001b70b 	.word	0x0001b70b

00011220 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   11220:	4b02      	ldr	r3, [pc, #8]	; (1122c <att_rsp_sent+0xc>)
   11222:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11226:	f00a b869 	b.w	1b2fc <att_sent>
   1122a:	bf00      	nop
   1122c:	0001b6f7 	.word	0x0001b6f7

00011230 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   11230:	4b02      	ldr	r3, [pc, #8]	; (1123c <att_req_sent+0xc>)
   11232:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11236:	f00a b861 	b.w	1b2fc <att_sent>
   1123a:	bf00      	nop
   1123c:	000113ed 	.word	0x000113ed

00011240 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   11240:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   11242:	7a83      	ldrb	r3, [r0, #10]
   11244:	2b07      	cmp	r3, #7
   11246:	d005      	beq.n	11254 <att_get+0x14>
		BT_WARN("Not connected");
   11248:	2157      	movs	r1, #87	; 0x57
   1124a:	480e      	ldr	r0, [pc, #56]	; (11284 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   1124c:	f008 fa64 	bl	19718 <printk>
		return NULL;
   11250:	2400      	movs	r4, #0
   11252:	e008      	b.n	11266 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11254:	2104      	movs	r1, #4
   11256:	f00a f82e 	bl	1b2b6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1125a:	4604      	mov	r4, r0
   1125c:	b928      	cbnz	r0, 1126a <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1125e:	2145      	movs	r1, #69	; 0x45
   11260:	4809      	ldr	r0, [pc, #36]	; (11288 <att_get+0x48>)
   11262:	f008 fa59 	bl	19718 <printk>
	}

	return att_chan->att;
}
   11266:	4620      	mov	r0, r4
   11268:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1126a:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   1126e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   11272:	075b      	lsls	r3, r3, #29
   11274:	d502      	bpl.n	1127c <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   11276:	2157      	movs	r1, #87	; 0x57
   11278:	4804      	ldr	r0, [pc, #16]	; (1128c <att_get+0x4c>)
   1127a:	e7e7      	b.n	1124c <att_get+0xc>
	return att_chan->att;
   1127c:	f850 4c08 	ldr.w	r4, [r0, #-8]
   11280:	e7f1      	b.n	11266 <att_get+0x26>
   11282:	bf00      	nop
   11284:	000204cd 	.word	0x000204cd
   11288:	000204e0 	.word	0x000204e0
   1128c:	00020500 	.word	0x00020500

00011290 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   11290:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   11292:	3808      	subs	r0, #8
   11294:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   11296:	a901      	add	r1, sp, #4
   11298:	4802      	ldr	r0, [pc, #8]	; (112a4 <bt_att_released+0x14>)
   1129a:	f005 fd7b 	bl	16d94 <k_mem_slab_free>
}
   1129e:	b003      	add	sp, #12
   112a0:	f85d fb04 	ldr.w	pc, [sp], #4
   112a4:	200085fc 	.word	0x200085fc

000112a8 <find_type_cb>:
{
   112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   112ac:	f642 0301 	movw	r3, #10241	; 0x2801
   112b0:	2500      	movs	r5, #0
{
   112b2:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   112b4:	f8d2 9000 	ldr.w	r9, [r2]
{
   112b8:	4607      	mov	r7, r0
   112ba:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   112bc:	6800      	ldr	r0, [r0, #0]
   112be:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   112c0:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   112c4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   112c6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   112ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   112ce:	f009 fcf8 	bl	1acc2 <bt_uuid_cmp>
   112d2:	2800      	cmp	r0, #0
   112d4:	d060      	beq.n	11398 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   112d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   112da:	6838      	ldr	r0, [r7, #0]
   112dc:	a90b      	add	r1, sp, #44	; 0x2c
   112de:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   112e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   112e6:	f009 fcec 	bl	1acc2 <bt_uuid_cmp>
   112ea:	b138      	cbz	r0, 112fc <find_type_cb+0x54>
		if (data->group &&
   112ec:	68a3      	ldr	r3, [r4, #8]
   112ee:	b11b      	cbz	r3, 112f8 <find_type_cb+0x50>
   112f0:	885a      	ldrh	r2, [r3, #2]
   112f2:	42b2      	cmp	r2, r6
   112f4:	d200      	bcs.n	112f8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   112f6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   112f8:	2001      	movs	r0, #1
   112fa:	e009      	b.n	11310 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   112fc:	6861      	ldr	r1, [r4, #4]
   112fe:	4608      	mov	r0, r1
   11300:	f009 fff4 	bl	1b2ec <net_buf_frags_len>
   11304:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   11308:	1a1b      	subs	r3, r3, r0
   1130a:	2b03      	cmp	r3, #3
   1130c:	d803      	bhi.n	11316 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1130e:	2000      	movs	r0, #0
}
   11310:	b011      	add	sp, #68	; 0x44
   11312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   11316:	4608      	mov	r0, r1
   11318:	f003 f9fc 	bl	14714 <net_buf_frag_last>
   1131c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1131e:	6860      	ldr	r0, [r4, #4]
   11320:	f009 ffe4 	bl	1b2ec <net_buf_frags_len>
   11324:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   11328:	f105 0b08 	add.w	fp, r5, #8
   1132c:	ebaa 0a00 	sub.w	sl, sl, r0
   11330:	4658      	mov	r0, fp
   11332:	f00a ff4b 	bl	1c1cc <net_buf_simple_tailroom>
   11336:	4582      	cmp	sl, r0
   11338:	d231      	bcs.n	1139e <find_type_cb+0xf6>
   1133a:	6860      	ldr	r0, [r4, #4]
   1133c:	f009 ffd6 	bl	1b2ec <net_buf_frags_len>
   11340:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   11344:	1a18      	subs	r0, r3, r0
	if (!len) {
   11346:	b970      	cbnz	r0, 11366 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   11348:	6863      	ldr	r3, [r4, #4]
   1134a:	7998      	ldrb	r0, [r3, #6]
   1134c:	f003 f806 	bl	1435c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   11350:	2200      	movs	r2, #0
   11352:	2300      	movs	r3, #0
   11354:	f00a ff14 	bl	1c180 <net_buf_alloc_fixed>
		if (!frag) {
   11358:	4605      	mov	r5, r0
   1135a:	2800      	cmp	r0, #0
   1135c:	d0d7      	beq.n	1130e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1135e:	4601      	mov	r1, r0
   11360:	6860      	ldr	r0, [r4, #4]
   11362:	f003 fa17 	bl	14794 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   11366:	2300      	movs	r3, #0
   11368:	9300      	str	r3, [sp, #0]
   1136a:	4639      	mov	r1, r7
   1136c:	f8d7 9004 	ldr.w	r9, [r7, #4]
   11370:	2310      	movs	r3, #16
   11372:	4640      	mov	r0, r8
   11374:	aa02      	add	r2, sp, #8
   11376:	47c8      	blx	r9
	if (read < 0) {
   11378:	1e07      	subs	r7, r0, #0
   1137a:	db0d      	blt.n	11398 <find_type_cb+0xf0>
	if (read != data->value_len) {
   1137c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1137e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   11380:	42ba      	cmp	r2, r7
   11382:	d02b      	beq.n	113dc <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11384:	4601      	mov	r1, r0
   11386:	a80b      	add	r0, sp, #44	; 0x2c
   11388:	f009 fcc9 	bl	1ad1e <bt_uuid_create>
   1138c:	b958      	cbnz	r0, 113a6 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1138e:	2157      	movs	r1, #87	; 0x57
   11390:	7c22      	ldrb	r2, [r4, #16]
   11392:	4814      	ldr	r0, [pc, #80]	; (113e4 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   11394:	f008 f9c0 	bl	19718 <printk>
	data->group = NULL;
   11398:	2300      	movs	r3, #0
   1139a:	60a3      	str	r3, [r4, #8]
   1139c:	e7ac      	b.n	112f8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1139e:	4658      	mov	r0, fp
   113a0:	f00a ff14 	bl	1c1cc <net_buf_simple_tailroom>
   113a4:	e7cf      	b.n	11346 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   113a6:	b2fa      	uxtb	r2, r7
   113a8:	a902      	add	r1, sp, #8
   113aa:	a806      	add	r0, sp, #24
   113ac:	f009 fcb7 	bl	1ad1e <bt_uuid_create>
   113b0:	b918      	cbnz	r0, 113ba <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   113b2:	463a      	mov	r2, r7
   113b4:	2157      	movs	r1, #87	; 0x57
   113b6:	480c      	ldr	r0, [pc, #48]	; (113e8 <find_type_cb+0x140>)
   113b8:	e7ec      	b.n	11394 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   113ba:	a906      	add	r1, sp, #24
   113bc:	a80b      	add	r0, sp, #44	; 0x2c
   113be:	f009 fc80 	bl	1acc2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   113c2:	2800      	cmp	r0, #0
   113c4:	d1e8      	bne.n	11398 <find_type_cb+0xf0>
	data->err = 0x00;
   113c6:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   113c8:	2104      	movs	r1, #4
   113ca:	7463      	strb	r3, [r4, #17]
   113cc:	f105 0008 	add.w	r0, r5, #8
   113d0:	f003 fa5a 	bl	14888 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   113d4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   113d6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   113d8:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   113da:	e78d      	b.n	112f8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   113dc:	a902      	add	r1, sp, #8
   113de:	f009 fbea 	bl	1abb6 <memcmp>
   113e2:	e7ee      	b.n	113c2 <find_type_cb+0x11a>
   113e4:	00020529 	.word	0x00020529
   113e8:	0002054d 	.word	0x0002054d

000113ec <chan_req_sent>:
	if (chan->req) {
   113ec:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   113f0:	b13b      	cbz	r3, 11402 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   113f2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   113f6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   113fa:	2300      	movs	r3, #0
   113fc:	4801      	ldr	r0, [pc, #4]	; (11404 <chan_req_sent+0x18>)
   113fe:	f007 ba2d 	b.w	1885c <k_delayed_work_submit_to_queue>
}
   11402:	4770      	bx	lr
   11404:	2000a3a0 	.word	0x2000a3a0

00011408 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   11408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1140a:	2300      	movs	r3, #0
{
   1140c:	4606      	mov	r6, r0
   1140e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11410:	2200      	movs	r2, #0
   11412:	4669      	mov	r1, sp
   11414:	4823      	ldr	r0, [pc, #140]	; (114a4 <bt_att_accept+0x9c>)
   11416:	f005 fc63 	bl	16ce0 <k_mem_slab_alloc>
   1141a:	4604      	mov	r4, r0
   1141c:	b148      	cbz	r0, 11432 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   1141e:	4632      	mov	r2, r6
   11420:	2145      	movs	r1, #69	; 0x45
   11422:	4821      	ldr	r0, [pc, #132]	; (114a8 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   11424:	f008 f978 	bl	19718 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   11428:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1142c:	4620      	mov	r0, r4
   1142e:	b003      	add	sp, #12
   11430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   11432:	4601      	mov	r1, r0
   11434:	2230      	movs	r2, #48	; 0x30
   11436:	9800      	ldr	r0, [sp, #0]
   11438:	f009 fbf9 	bl	1ac2e <memset>
	att->conn = conn;
   1143c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1143e:	2200      	movs	r2, #0
	list->head = NULL;
   11440:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   11444:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   11448:	60ac      	str	r4, [r5, #8]
   1144a:	2300      	movs	r3, #0
   1144c:	4817      	ldr	r0, [pc, #92]	; (114ac <bt_att_accept+0xa4>)
   1144e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11450:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11452:	f005 fc45 	bl	16ce0 <k_mem_slab_alloc>
   11456:	4604      	mov	r4, r0
   11458:	b118      	cbz	r0, 11462 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1145a:	2145      	movs	r1, #69	; 0x45
   1145c:	682a      	ldr	r2, [r5, #0]
   1145e:	4814      	ldr	r0, [pc, #80]	; (114b0 <bt_att_accept+0xa8>)
   11460:	e7e0      	b.n	11424 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   11462:	4601      	mov	r1, r0
   11464:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11468:	9801      	ldr	r0, [sp, #4]
   1146a:	f009 fbe0 	bl	1ac2e <memset>
	chan->chan.chan.ops = &ops;
   1146e:	9801      	ldr	r0, [sp, #4]
   11470:	4b10      	ldr	r3, [pc, #64]	; (114b4 <bt_att_accept+0xac>)
   11472:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   11474:	30d0      	adds	r0, #208	; 0xd0
   11476:	f00b fcdf 	bl	1ce38 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   1147a:	9801      	ldr	r0, [sp, #4]
   1147c:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   11480:	2203      	movs	r2, #3
   11482:	4611      	mov	r1, r2
   11484:	f00b fd3d 	bl	1cf02 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11488:	9b01      	ldr	r3, [sp, #4]
   1148a:	33c8      	adds	r3, #200	; 0xc8
   1148c:	e8d3 2fef 	ldaex	r2, [r3]
   11490:	e8c3 4fe1 	stlex	r1, r4, [r3]
   11494:	2900      	cmp	r1, #0
   11496:	d1f9      	bne.n	1148c <bt_att_accept+0x84>
	chan->att = att;
   11498:	9b01      	ldr	r3, [sp, #4]
   1149a:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1149e:	603b      	str	r3, [r7, #0]
	return 0;
   114a0:	e7c4      	b.n	1142c <bt_att_accept+0x24>
   114a2:	bf00      	nop
   114a4:	200085e0 	.word	0x200085e0
   114a8:	00020571 	.word	0x00020571
   114ac:	200085fc 	.word	0x200085fc
   114b0:	0002059b 	.word	0x0002059b
   114b4:	2000842c 	.word	0x2000842c

000114b8 <read_group_cb>:
{
   114b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   114bc:	f04f 0800 	mov.w	r8, #0
   114c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   114c4:	4605      	mov	r5, r0
   114c6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   114c8:	6800      	ldr	r0, [r0, #0]
   114ca:	a902      	add	r1, sp, #8
{
   114cc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   114ce:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   114d0:	f88d 8008 	strb.w	r8, [sp, #8]
   114d4:	f8ad 300a 	strh.w	r3, [sp, #10]
   114d8:	f009 fbf3 	bl	1acc2 <bt_uuid_cmp>
   114dc:	b1a0      	cbz	r0, 11508 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   114de:	f642 0301 	movw	r3, #10241	; 0x2801
   114e2:	6828      	ldr	r0, [r5, #0]
   114e4:	a903      	add	r1, sp, #12
   114e6:	f88d 800c 	strb.w	r8, [sp, #12]
   114ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   114ee:	f009 fbe8 	bl	1acc2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   114f2:	b148      	cbz	r0, 11508 <read_group_cb+0x50>
		if (data->group &&
   114f4:	6923      	ldr	r3, [r4, #16]
   114f6:	b11b      	cbz	r3, 11500 <read_group_cb+0x48>
   114f8:	885a      	ldrh	r2, [r3, #2]
   114fa:	42b2      	cmp	r2, r6
   114fc:	d200      	bcs.n	11500 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   114fe:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11500:	2001      	movs	r0, #1
}
   11502:	b004      	add	sp, #16
   11504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11508:	6861      	ldr	r1, [r4, #4]
   1150a:	6828      	ldr	r0, [r5, #0]
   1150c:	f009 fbd9 	bl	1acc2 <bt_uuid_cmp>
   11510:	b110      	cbz	r0, 11518 <read_group_cb+0x60>
		data->group = NULL;
   11512:	2300      	movs	r3, #0
   11514:	6123      	str	r3, [r4, #16]
   11516:	e7f3      	b.n	11500 <read_group_cb+0x48>
	if (data->rsp->len &&
   11518:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1151a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1151c:	781a      	ldrb	r2, [r3, #0]
   1151e:	b13a      	cbz	r2, 11530 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11520:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   11524:	8981      	ldrh	r1, [r0, #12]
   11526:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11528:	4293      	cmp	r3, r2
   1152a:	da01      	bge.n	11530 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1152c:	2000      	movs	r0, #0
   1152e:	e7e8      	b.n	11502 <read_group_cb+0x4a>
   11530:	2104      	movs	r1, #4
   11532:	3008      	adds	r0, #8
   11534:	f003 f9a8 	bl	14888 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11538:	4b09      	ldr	r3, [pc, #36]	; (11560 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1153a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1153c:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   1153e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11540:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11542:	68a2      	ldr	r2, [r4, #8]
   11544:	9300      	str	r3, [sp, #0]
   11546:	4638      	mov	r0, r7
   11548:	2300      	movs	r3, #0
   1154a:	9401      	str	r4, [sp, #4]
   1154c:	f009 ffc9 	bl	1b4e2 <att_chan_read>
	if (read < 0) {
   11550:	2800      	cmp	r0, #0
   11552:	dbeb      	blt.n	1152c <read_group_cb+0x74>
	if (!data->group) {
   11554:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   11556:	3800      	subs	r0, #0
   11558:	bf18      	it	ne
   1155a:	2001      	movne	r0, #1
   1155c:	e7d1      	b.n	11502 <read_group_cb+0x4a>
   1155e:	bf00      	nop
   11560:	0001b467 	.word	0x0001b467

00011564 <chan_send>:
{
   11564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11568:	688b      	ldr	r3, [r1, #8]
{
   1156a:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1156c:	781b      	ldrb	r3, [r3, #0]
{
   1156e:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11570:	2bd2      	cmp	r3, #210	; 0xd2
{
   11572:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11574:	d110      	bne.n	11598 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   11576:	6803      	ldr	r3, [r0, #0]
   11578:	6818      	ldr	r0, [r3, #0]
   1157a:	f00a fdfb 	bl	1c174 <bt_smp_sign>
		if (err) {
   1157e:	4606      	mov	r6, r0
   11580:	b150      	cbz	r0, 11598 <chan_send+0x34>
			BT_ERR("Error signing data");
   11582:	2145      	movs	r1, #69	; 0x45
   11584:	4824      	ldr	r0, [pc, #144]	; (11618 <chan_send+0xb4>)
   11586:	f008 f8c7 	bl	19718 <printk>
		net_buf_unref(buf);
   1158a:	4620      	mov	r0, r4
   1158c:	f003 f866 	bl	1465c <net_buf_unref>
}
   11590:	4630      	mov	r0, r6
   11592:	b003      	add	sp, #12
   11594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   11598:	f104 0008 	add.w	r0, r4, #8
   1159c:	f00a fe12 	bl	1c1c4 <net_buf_simple_headroom>
	state->len = buf->len;
   115a0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   115a4:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   115a6:	f1b9 0f00 	cmp.w	r9, #0
   115aa:	d10a      	bne.n	115c2 <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   115ac:	68a3      	ldr	r3, [r4, #8]
   115ae:	7818      	ldrb	r0, [r3, #0]
   115b0:	f009 febc 	bl	1b32c <att_op_get_type>
   115b4:	1e43      	subs	r3, r0, #1
   115b6:	b2db      	uxtb	r3, r3
   115b8:	2b04      	cmp	r3, #4
   115ba:	bf9c      	itt	ls
   115bc:	4a17      	ldrls	r2, [pc, #92]	; (1161c <chan_send+0xb8>)
   115be:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   115c2:	682b      	ldr	r3, [r5, #0]
   115c4:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   115c6:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   115ca:	681e      	ldr	r6, [r3, #0]
   115cc:	f003 f88a 	bl	146e4 <net_buf_ref>
   115d0:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   115d4:	4b12      	ldr	r3, [pc, #72]	; (11620 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   115d6:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   115d8:	4299      	cmp	r1, r3
   115da:	d019      	beq.n	11610 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   115dc:	4b11      	ldr	r3, [pc, #68]	; (11624 <chan_send+0xc0>)
   115de:	4299      	cmp	r1, r3
   115e0:	d018      	beq.n	11614 <chan_send+0xb0>
		return att_sent;
   115e2:	f8df c044 	ldr.w	ip, [pc, #68]	; 11628 <chan_send+0xc4>
   115e6:	4b11      	ldr	r3, [pc, #68]	; (1162c <chan_send+0xc8>)
   115e8:	4811      	ldr	r0, [pc, #68]	; (11630 <chan_send+0xcc>)
   115ea:	4561      	cmp	r1, ip
   115ec:	bf18      	it	ne
   115ee:	4603      	movne	r3, r0
				&chan->chan.chan);
   115f0:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   115f2:	4630      	mov	r0, r6
   115f4:	2104      	movs	r1, #4
   115f6:	9500      	str	r5, [sp, #0]
   115f8:	f009 fe1d 	bl	1b236 <bt_l2cap_send_cb>
	if (!err) {
   115fc:	4606      	mov	r6, r0
   115fe:	2800      	cmp	r0, #0
   11600:	d0c3      	beq.n	1158a <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   11602:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   11604:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   11608:	fa10 f787 	uxtah	r7, r0, r7
   1160c:	60a7      	str	r7, [r4, #8]
}
   1160e:	e7bf      	b.n	11590 <chan_send+0x2c>
		return att_rsp_sent;
   11610:	4b08      	ldr	r3, [pc, #32]	; (11634 <chan_send+0xd0>)
   11612:	e7ed      	b.n	115f0 <chan_send+0x8c>
		return att_cfm_sent;
   11614:	4b08      	ldr	r3, [pc, #32]	; (11638 <chan_send+0xd4>)
   11616:	e7eb      	b.n	115f0 <chan_send+0x8c>
   11618:	000205c5 	.word	0x000205c5
   1161c:	0001db4c 	.word	0x0001db4c
   11620:	0001b6f7 	.word	0x0001b6f7
   11624:	0001b70b 	.word	0x0001b70b
   11628:	000113ed 	.word	0x000113ed
   1162c:	00011231 	.word	0x00011231
   11630:	0001b2fd 	.word	0x0001b2fd
   11634:	00011221 	.word	0x00011221
   11638:	00011211 	.word	0x00011211

0001163c <bt_att_chan_req_send>:
{
   1163c:	b570      	push	{r4, r5, r6, lr}
   1163e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   11640:	4604      	mov	r4, r0
   11642:	b950      	cbnz	r0, 1165a <bt_att_chan_req_send+0x1e>
   11644:	4924      	ldr	r1, [pc, #144]	; (116d8 <bt_att_chan_req_send+0x9c>)
   11646:	4825      	ldr	r0, [pc, #148]	; (116dc <bt_att_chan_req_send+0xa0>)
   11648:	f240 224f 	movw	r2, #591	; 0x24f
   1164c:	f008 f864 	bl	19718 <printk>
   11650:	f240 214f 	movw	r1, #591	; 0x24f
   11654:	4820      	ldr	r0, [pc, #128]	; (116d8 <bt_att_chan_req_send+0x9c>)
   11656:	f008 fb05 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1165a:	b955      	cbnz	r5, 11672 <bt_att_chan_req_send+0x36>
   1165c:	491e      	ldr	r1, [pc, #120]	; (116d8 <bt_att_chan_req_send+0x9c>)
   1165e:	481f      	ldr	r0, [pc, #124]	; (116dc <bt_att_chan_req_send+0xa0>)
   11660:	f44f 7214 	mov.w	r2, #592	; 0x250
   11664:	f008 f858 	bl	19718 <printk>
   11668:	f44f 7114 	mov.w	r1, #592	; 0x250
   1166c:	481a      	ldr	r0, [pc, #104]	; (116d8 <bt_att_chan_req_send+0x9c>)
   1166e:	f008 faf9 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   11672:	686b      	ldr	r3, [r5, #4]
   11674:	b953      	cbnz	r3, 1168c <bt_att_chan_req_send+0x50>
   11676:	4918      	ldr	r1, [pc, #96]	; (116d8 <bt_att_chan_req_send+0x9c>)
   11678:	4818      	ldr	r0, [pc, #96]	; (116dc <bt_att_chan_req_send+0xa0>)
   1167a:	f240 2251 	movw	r2, #593	; 0x251
   1167e:	f008 f84b 	bl	19718 <printk>
   11682:	f240 2151 	movw	r1, #593	; 0x251
   11686:	4814      	ldr	r0, [pc, #80]	; (116d8 <bt_att_chan_req_send+0x9c>)
   11688:	f008 faec 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1168c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   11690:	b153      	cbz	r3, 116a8 <bt_att_chan_req_send+0x6c>
   11692:	4911      	ldr	r1, [pc, #68]	; (116d8 <bt_att_chan_req_send+0x9c>)
   11694:	4811      	ldr	r0, [pc, #68]	; (116dc <bt_att_chan_req_send+0xa0>)
   11696:	f240 2252 	movw	r2, #594	; 0x252
   1169a:	f008 f83d 	bl	19718 <printk>
   1169e:	f240 2152 	movw	r1, #594	; 0x252
   116a2:	480d      	ldr	r0, [pc, #52]	; (116d8 <bt_att_chan_req_send+0x9c>)
   116a4:	f008 fade 	bl	19c64 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   116a8:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   116ac:	2200      	movs	r2, #0
   116ae:	2300      	movs	r3, #0
   116b0:	4630      	mov	r0, r6
   116b2:	f006 fead 	bl	18410 <z_impl_k_sem_take>
   116b6:	2800      	cmp	r0, #0
   116b8:	db0a      	blt.n	116d0 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   116ba:	4620      	mov	r0, r4
   116bc:	4629      	mov	r1, r5
   116be:	f009 fff4 	bl	1b6aa <chan_req_send>
	if (err < 0) {
   116c2:	1e04      	subs	r4, r0, #0
   116c4:	da02      	bge.n	116cc <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   116c6:	4630      	mov	r0, r6
   116c8:	f006 fe66 	bl	18398 <z_impl_k_sem_give>
}
   116cc:	4620      	mov	r0, r4
   116ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   116d0:	f06f 040a 	mvn.w	r4, #10
   116d4:	e7fa      	b.n	116cc <bt_att_chan_req_send+0x90>
   116d6:	bf00      	nop
   116d8:	000205dd 	.word	0x000205dd
   116dc:	0001e6bc 	.word	0x0001e6bc

000116e0 <read_type_cb>:
{
   116e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   116e4:	f8d2 8000 	ldr.w	r8, [r2]
{
   116e8:	4606      	mov	r6, r0
   116ea:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   116ec:	6800      	ldr	r0, [r0, #0]
   116ee:	6851      	ldr	r1, [r2, #4]
{
   116f0:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   116f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   116f6:	f009 fae4 	bl	1acc2 <bt_uuid_cmp>
   116fa:	4607      	mov	r7, r0
   116fc:	2800      	cmp	r0, #0
   116fe:	d13e      	bne.n	1177e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11700:	4628      	mov	r0, r5
   11702:	2215      	movs	r2, #21
   11704:	4631      	mov	r1, r6
   11706:	f00a fc2e 	bl	1bf66 <bt_gatt_check_perm>
   1170a:	4605      	mov	r5, r0
   1170c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1170e:	b148      	cbz	r0, 11724 <read_type_cb+0x44>
		if (data->rsp->len) {
   11710:	68e3      	ldr	r3, [r4, #12]
   11712:	781b      	ldrb	r3, [r3, #0]
   11714:	b923      	cbnz	r3, 11720 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   11716:	2500      	movs	r5, #0
}
   11718:	4628      	mov	r0, r5
   1171a:	b003      	add	sp, #12
   1171c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   11720:	7527      	strb	r7, [r4, #20]
   11722:	e7f8      	b.n	11716 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11724:	68a0      	ldr	r0, [r4, #8]
   11726:	f002 fff5 	bl	14714 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1172a:	2102      	movs	r1, #2
   1172c:	3008      	adds	r0, #8
   1172e:	f003 f8ab 	bl	14888 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11732:	4b14      	ldr	r3, [pc, #80]	; (11784 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11734:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11736:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   11738:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1173c:	68a2      	ldr	r2, [r4, #8]
   1173e:	9300      	str	r3, [sp, #0]
   11740:	4640      	mov	r0, r8
   11742:	462b      	mov	r3, r5
   11744:	9401      	str	r4, [sp, #4]
   11746:	f009 fecc 	bl	1b4e2 <att_chan_read>
	if (read < 0) {
   1174a:	2800      	cmp	r0, #0
   1174c:	da07      	bge.n	1175e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1174e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   11752:	bf32      	itee	cc
   11754:	200e      	movcc	r0, #14
		return -err;
   11756:	4240      	negcs	r0, r0
   11758:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1175a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1175c:	e7dc      	b.n	11718 <read_type_cb+0x38>
	if (!data->item) {
   1175e:	6923      	ldr	r3, [r4, #16]
   11760:	2b00      	cmp	r3, #0
   11762:	d0d8      	beq.n	11716 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11764:	68a0      	ldr	r0, [r4, #8]
   11766:	f009 fdc1 	bl	1b2ec <net_buf_frags_len>
   1176a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1176e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11770:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11772:	7818      	ldrb	r0, [r3, #0]
   11774:	4285      	cmp	r5, r0
   11776:	bf94      	ite	ls
   11778:	2500      	movls	r5, #0
   1177a:	2501      	movhi	r5, #1
   1177c:	e7cc      	b.n	11718 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1177e:	2501      	movs	r5, #1
   11780:	e7ca      	b.n	11718 <read_type_cb+0x38>
   11782:	bf00      	nop
   11784:	0001b309 	.word	0x0001b309

00011788 <bt_att_connected>:
{
   11788:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1178a:	2104      	movs	r1, #4
{
   1178c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1178e:	6800      	ldr	r0, [r0, #0]
   11790:	f009 fd81 	bl	1b296 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   11794:	4605      	mov	r5, r0
   11796:	b950      	cbnz	r0, 117ae <bt_att_connected+0x26>
   11798:	4919      	ldr	r1, [pc, #100]	; (11800 <bt_att_connected+0x78>)
   1179a:	481a      	ldr	r0, [pc, #104]	; (11804 <bt_att_connected+0x7c>)
   1179c:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   117a0:	f007 ffba 	bl	19718 <printk>
   117a4:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   117a8:	4815      	ldr	r0, [pc, #84]	; (11800 <bt_att_connected+0x78>)
   117aa:	f008 fa5b 	bl	19c64 <assert_post_action>
	struct bt_att *att = att_chan->att;
   117ae:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   117b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   117b4:	b91b      	cbnz	r3, 117be <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   117b6:	f105 000c 	add.w	r0, r5, #12
   117ba:	f00b fb3d 	bl	1ce38 <z_impl_k_queue_init>
	parent->next = child;
   117be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   117c0:	f504 739a 	add.w	r3, r4, #308	; 0x134
   117c4:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   117c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   117ca:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   117cc:	b902      	cbnz	r2, 117d0 <bt_att_connected+0x48>
	list->tail = node;
   117ce:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   117d0:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   117d4:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   117d8:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   117da:	bf58      	it	pl
   117dc:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   117de:	f04f 0230 	mov.w	r2, #48	; 0x30
   117e2:	bf5c      	itt	pl
   117e4:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   117e8:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   117ec:	2100      	movs	r1, #0
   117ee:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   117f2:	f009 fa1c 	bl	1ac2e <memset>
   117f6:	4b04      	ldr	r3, [pc, #16]	; (11808 <bt_att_connected+0x80>)
   117f8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   117fc:	bd38      	pop	{r3, r4, r5, pc}
   117fe:	bf00      	nop
   11800:	000205dd 	.word	0x000205dd
   11804:	0001e6bc 	.word	0x0001e6bc
   11808:	00012115 	.word	0x00012115

0001180c <bt_att_chan_create_pdu>:
{
   1180c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1180e:	1c53      	adds	r3, r2, #1
   11810:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   11814:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11816:	4293      	cmp	r3, r2
   11818:	d906      	bls.n	11828 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1181a:	2157      	movs	r1, #87	; 0x57
   1181c:	4813      	ldr	r0, [pc, #76]	; (1186c <bt_att_chan_create_pdu+0x60>)
   1181e:	f007 ff7b 	bl	19718 <printk>
		return NULL;
   11822:	2400      	movs	r4, #0
}
   11824:	4620      	mov	r0, r4
   11826:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   11828:	4608      	mov	r0, r1
   1182a:	f009 fd7f 	bl	1b32c <att_op_get_type>
   1182e:	2802      	cmp	r0, #2
   11830:	d001      	beq.n	11836 <bt_att_chan_create_pdu+0x2a>
   11832:	2804      	cmp	r0, #4
   11834:	d10e      	bne.n	11854 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   11836:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1183a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1183c:	2100      	movs	r1, #0
   1183e:	4608      	mov	r0, r1
   11840:	f009 fcf6 	bl	1b230 <bt_l2cap_create_pdu_timeout>
   11844:	4604      	mov	r4, r0
	if (!buf) {
   11846:	b950      	cbnz	r0, 1185e <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11848:	462a      	mov	r2, r5
   1184a:	2145      	movs	r1, #69	; 0x45
   1184c:	4808      	ldr	r0, [pc, #32]	; (11870 <bt_att_chan_create_pdu+0x64>)
   1184e:	f007 ff63 	bl	19718 <printk>
		return NULL;
   11852:	e7e7      	b.n	11824 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   11854:	f04f 32ff 	mov.w	r2, #4294967295
   11858:	f04f 33ff 	mov.w	r3, #4294967295
   1185c:	e7ee      	b.n	1183c <bt_att_chan_create_pdu+0x30>
   1185e:	2101      	movs	r1, #1
   11860:	3008      	adds	r0, #8
   11862:	f003 f811 	bl	14888 <net_buf_simple_add>
	hdr->code = op;
   11866:	7005      	strb	r5, [r0, #0]
	return buf;
   11868:	e7dc      	b.n	11824 <bt_att_chan_create_pdu+0x18>
   1186a:	bf00      	nop
   1186c:	0002060c 	.word	0x0002060c
   11870:	00020323 	.word	0x00020323

00011874 <att_indicate>:
{
   11874:	b570      	push	{r4, r5, r6, lr}
   11876:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   11878:	f101 0008 	add.w	r0, r1, #8
   1187c:	460d      	mov	r5, r1
   1187e:	f00a fc99 	bl	1c1b4 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   11882:	6826      	ldr	r6, [r4, #0]
   11884:	4601      	mov	r1, r0
   11886:	89ab      	ldrh	r3, [r5, #12]
   11888:	68aa      	ldr	r2, [r5, #8]
   1188a:	6830      	ldr	r0, [r6, #0]
   1188c:	f00a fbfa 	bl	1c084 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   11890:	211e      	movs	r1, #30
   11892:	2200      	movs	r2, #0
   11894:	4620      	mov	r0, r4
   11896:	f7ff ffb9 	bl	1180c <bt_att_chan_create_pdu>
	if (!buf) {
   1189a:	4601      	mov	r1, r0
   1189c:	b118      	cbz	r0, 118a6 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1189e:	4620      	mov	r0, r4
   118a0:	4a02      	ldr	r2, [pc, #8]	; (118ac <att_indicate+0x38>)
   118a2:	f009 fec0 	bl	1b626 <bt_att_chan_send_rsp>
}
   118a6:	2000      	movs	r0, #0
   118a8:	bd70      	pop	{r4, r5, r6, pc}
   118aa:	bf00      	nop
   118ac:	0001b70b 	.word	0x0001b70b

000118b0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   118b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118b4:	4688      	mov	r8, r1
   118b6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   118b8:	2101      	movs	r1, #1
   118ba:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   118bc:	4605      	mov	r5, r0
   118be:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   118c0:	f7ff ffa4 	bl	1180c <bt_att_chan_create_pdu>
	if (!buf) {
   118c4:	4604      	mov	r4, r0
   118c6:	b178      	cbz	r0, 118e8 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   118c8:	2104      	movs	r1, #4
   118ca:	3008      	adds	r0, #8
   118cc:	f002 ffdc 	bl	14888 <net_buf_simple_add>
	rsp->request = req;
   118d0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   118d4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   118d6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   118da:	4621      	mov	r1, r4
   118dc:	4628      	mov	r0, r5
}
   118de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   118e2:	4a02      	ldr	r2, [pc, #8]	; (118ec <send_err_rsp.part.0+0x3c>)
   118e4:	f009 be9f 	b.w	1b626 <bt_att_chan_send_rsp>
}
   118e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118ec:	0001b6f7 	.word	0x0001b6f7

000118f0 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   118f0:	898b      	ldrh	r3, [r1, #12]
{
   118f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118f6:	4604      	mov	r4, r0
   118f8:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   118fa:	b933      	cbnz	r3, 1190a <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   118fc:	2145      	movs	r1, #69	; 0x45
   118fe:	4838      	ldr	r0, [pc, #224]	; (119e0 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   11900:	f007 ff0a 	bl	19718 <printk>
}
   11904:	2000      	movs	r0, #0
   11906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1190a:	2101      	movs	r1, #1
   1190c:	f108 0008 	add.w	r0, r8, #8
   11910:	f002 ff9c 	bl	1484c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11914:	f854 3c08 	ldr.w	r3, [r4, #-8]
   11918:	4605      	mov	r5, r0
   1191a:	2b00      	cmp	r3, #0
   1191c:	d0f2      	beq.n	11904 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1191e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11920:	7802      	ldrb	r2, [r0, #0]
   11922:	4930      	ldr	r1, [pc, #192]	; (119e4 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11924:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   11928:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   1192c:	4290      	cmp	r0, r2
   1192e:	d114      	bne.n	1195a <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   11930:	00d8      	lsls	r0, r3, #3
   11932:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11936:	789f      	ldrb	r7, [r3, #2]
   11938:	2f01      	cmp	r7, #1
   1193a:	d123      	bne.n	11984 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1193c:	34c0      	adds	r4, #192	; 0xc0
   1193e:	e8d4 3fef 	ldaex	r3, [r4]
   11942:	f043 0201 	orr.w	r2, r3, #1
   11946:	e8c4 2fec 	stlex	ip, r2, [r4]
   1194a:	f1bc 0f00 	cmp.w	ip, #0
   1194e:	d1f6      	bne.n	1193e <bt_att_recv+0x4e>
   11950:	07da      	lsls	r2, r3, #31
   11952:	d528      	bpl.n	119a6 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   11954:	2157      	movs	r1, #87	; 0x57
   11956:	4824      	ldr	r0, [pc, #144]	; (119e8 <bt_att_recv+0xf8>)
   11958:	e7d2      	b.n	11900 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1195a:	3301      	adds	r3, #1
   1195c:	2b1c      	cmp	r3, #28
   1195e:	d1e3      	bne.n	11928 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11960:	2157      	movs	r1, #87	; 0x57
   11962:	4822      	ldr	r0, [pc, #136]	; (119ec <bt_att_recv+0xfc>)
   11964:	f007 fed8 	bl	19718 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   11968:	7829      	ldrb	r1, [r5, #0]
   1196a:	4608      	mov	r0, r1
   1196c:	f009 fcde 	bl	1b32c <att_op_get_type>
   11970:	2800      	cmp	r0, #0
   11972:	d0c7      	beq.n	11904 <bt_att_recv+0x14>
	if (!req) {
   11974:	2900      	cmp	r1, #0
   11976:	d0c5      	beq.n	11904 <bt_att_recv+0x14>
   11978:	2306      	movs	r3, #6
   1197a:	2200      	movs	r2, #0
   1197c:	4630      	mov	r0, r6
   1197e:	f7ff ff97 	bl	118b0 <send_err_rsp.part.0>
   11982:	e7bf      	b.n	11904 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   11984:	2f05      	cmp	r7, #5
   11986:	d10e      	bne.n	119a6 <bt_att_recv+0xb6>
   11988:	34c0      	adds	r4, #192	; 0xc0
   1198a:	e8d4 3fef 	ldaex	r3, [r4]
   1198e:	f043 0202 	orr.w	r2, r3, #2
   11992:	e8c4 2fec 	stlex	ip, r2, [r4]
   11996:	f1bc 0f00 	cmp.w	ip, #0
   1199a:	d1f6      	bne.n	1198a <bt_att_recv+0x9a>
   1199c:	079b      	lsls	r3, r3, #30
   1199e:	d502      	bpl.n	119a6 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   119a0:	2157      	movs	r1, #87	; 0x57
   119a2:	4813      	ldr	r0, [pc, #76]	; (119f0 <bt_att_recv+0x100>)
   119a4:	e7ac      	b.n	11900 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   119a6:	180b      	adds	r3, r1, r0
   119a8:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   119ac:	7859      	ldrb	r1, [r3, #1]
   119ae:	4291      	cmp	r1, r2
   119b0:	d908      	bls.n	119c4 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   119b2:	2145      	movs	r1, #69	; 0x45
   119b4:	782b      	ldrb	r3, [r5, #0]
   119b6:	480f      	ldr	r0, [pc, #60]	; (119f4 <bt_att_recv+0x104>)
   119b8:	f007 feae 	bl	19718 <printk>
	if (handler->type == ATT_REQUEST && err) {
   119bc:	2f01      	cmp	r7, #1
   119be:	d1a1      	bne.n	11904 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   119c0:	2304      	movs	r3, #4
   119c2:	e008      	b.n	119d6 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   119c4:	685b      	ldr	r3, [r3, #4]
   119c6:	4641      	mov	r1, r8
   119c8:	4630      	mov	r0, r6
   119ca:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   119cc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   119ce:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   119d0:	d198      	bne.n	11904 <bt_att_recv+0x14>
   119d2:	2800      	cmp	r0, #0
   119d4:	d096      	beq.n	11904 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   119d6:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   119d8:	2900      	cmp	r1, #0
   119da:	d093      	beq.n	11904 <bt_att_recv+0x14>
   119dc:	e7cd      	b.n	1197a <bt_att_recv+0x8a>
   119de:	bf00      	nop
   119e0:	00020636 	.word	0x00020636
   119e4:	0001db60 	.word	0x0001db60
   119e8:	00020656 	.word	0x00020656
   119ec:	000206bf 	.word	0x000206bf
   119f0:	00020677 	.word	0x00020677
   119f4:	0002069b 	.word	0x0002069b

000119f8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   119f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119fc:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   119fe:	6803      	ldr	r3, [r0, #0]
   11a00:	460e      	mov	r6, r1
   11a02:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11a04:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11a06:	bf18      	it	ne
   11a08:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11a0a:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11a0c:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11a0e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11a10:	f00a fb63 	bl	1c0da <bt_gatt_change_aware>
   11a14:	2800      	cmp	r0, #0
   11a16:	d04b      	beq.n	11ab0 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   11a18:	2f00      	cmp	r7, #0
   11a1a:	d04b      	beq.n	11ab4 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   11a1c:	2218      	movs	r2, #24
   11a1e:	2100      	movs	r1, #0
   11a20:	4668      	mov	r0, sp
   11a22:	f009 f904 	bl	1ac2e <memset>
	if (rsp) {
   11a26:	f1b8 0f00 	cmp.w	r8, #0
   11a2a:	d122      	bne.n	11a72 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   11a2c:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   11a2e:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   11a32:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11a34:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   11a36:	9300      	str	r3, [sp, #0]
	data.value = value;
   11a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11a3a:	4638      	mov	r0, r7
	data.value = value;
   11a3c:	9303      	str	r3, [sp, #12]
	data.len = len;
   11a3e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11a42:	4a1d      	ldr	r2, [pc, #116]	; (11ab8 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   11a44:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11a48:	2301      	movs	r3, #1
   11a4a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11a4e:	466b      	mov	r3, sp
	data.req = req;
   11a50:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   11a54:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11a58:	f009 fcae 	bl	1b3b8 <bt_gatt_foreach_attr>
	if (data.err) {
   11a5c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11a60:	b1f4      	cbz	r4, 11aa0 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   11a62:	f1b8 0f00 	cmp.w	r8, #0
   11a66:	d10e      	bne.n	11a86 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   11a68:	2400      	movs	r4, #0
}
   11a6a:	4620      	mov	r0, r4
   11a6c:	b007      	add	sp, #28
   11a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11a72:	2200      	movs	r2, #0
   11a74:	4641      	mov	r1, r8
   11a76:	4628      	mov	r0, r5
   11a78:	f7ff fec8 	bl	1180c <bt_att_chan_create_pdu>
   11a7c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11a7e:	2800      	cmp	r0, #0
   11a80:	d1d4      	bne.n	11a2c <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   11a82:	240e      	movs	r4, #14
   11a84:	e7f1      	b.n	11a6a <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   11a86:	9801      	ldr	r0, [sp, #4]
   11a88:	f002 fde8 	bl	1465c <net_buf_unref>
	if (!req) {
   11a8c:	2e00      	cmp	r6, #0
   11a8e:	d0eb      	beq.n	11a68 <att_write_rsp.constprop.0+0x70>
   11a90:	463a      	mov	r2, r7
   11a92:	4631      	mov	r1, r6
   11a94:	4628      	mov	r0, r5
   11a96:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11a9a:	f7ff ff09 	bl	118b0 <send_err_rsp.part.0>
   11a9e:	e7e3      	b.n	11a68 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   11aa0:	9901      	ldr	r1, [sp, #4]
   11aa2:	2900      	cmp	r1, #0
   11aa4:	d0e0      	beq.n	11a68 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11aa6:	4628      	mov	r0, r5
   11aa8:	4a04      	ldr	r2, [pc, #16]	; (11abc <att_write_rsp.constprop.0+0xc4>)
   11aaa:	f009 fdbc 	bl	1b626 <bt_att_chan_send_rsp>
   11aae:	e7dc      	b.n	11a6a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11ab0:	2412      	movs	r4, #18
   11ab2:	e7da      	b.n	11a6a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   11ab4:	2401      	movs	r4, #1
   11ab6:	e7d8      	b.n	11a6a <att_write_rsp.constprop.0+0x72>
   11ab8:	0001b487 	.word	0x0001b487
   11abc:	0001b6f7 	.word	0x0001b6f7

00011ac0 <bt_att_create_pdu>:
{
   11ac0:	b570      	push	{r4, r5, r6, lr}
   11ac2:	460e      	mov	r6, r1
   11ac4:	4615      	mov	r5, r2
	att = att_get(conn);
   11ac6:	f7ff fbbb 	bl	11240 <att_get>
	if (!att) {
   11aca:	b190      	cbz	r0, 11af2 <bt_att_create_pdu+0x32>
	return list->head;
   11acc:	6a83      	ldr	r3, [r0, #40]	; 0x28
   11ace:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11ad0:	b15b      	cbz	r3, 11aea <bt_att_create_pdu+0x2a>
   11ad2:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   11ad6:	d008      	beq.n	11aea <bt_att_create_pdu+0x2a>
	return node->next;
   11ad8:	681b      	ldr	r3, [r3, #0]
   11ada:	b10b      	cbz	r3, 11ae0 <bt_att_create_pdu+0x20>
   11adc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11ae0:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   11ae4:	428a      	cmp	r2, r1
   11ae6:	d906      	bls.n	11af6 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11ae8:	b95b      	cbnz	r3, 11b02 <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   11aea:	2157      	movs	r1, #87	; 0x57
   11aec:	480a      	ldr	r0, [pc, #40]	; (11b18 <bt_att_create_pdu+0x58>)
   11aee:	f007 fe13 	bl	19718 <printk>
}
   11af2:	2000      	movs	r0, #0
   11af4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   11af6:	462a      	mov	r2, r5
   11af8:	4631      	mov	r1, r6
}
   11afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   11afe:	f7ff be85 	b.w	1180c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11b02:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   11b06:	d004      	beq.n	11b12 <bt_att_create_pdu+0x52>
	return node->next;
   11b08:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11b0c:	b10c      	cbz	r4, 11b12 <bt_att_create_pdu+0x52>
   11b0e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   11b12:	4618      	mov	r0, r3
   11b14:	4623      	mov	r3, r4
   11b16:	e7e3      	b.n	11ae0 <bt_att_create_pdu+0x20>
   11b18:	000206de 	.word	0x000206de

00011b1c <att_read_group_req>:
{
   11b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11b20:	898c      	ldrh	r4, [r1, #12]
{
   11b22:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11b24:	3c04      	subs	r4, #4
   11b26:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11b28:	2c02      	cmp	r4, #2
{
   11b2a:	4608      	mov	r0, r1
   11b2c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11b2e:	d001      	beq.n	11b34 <att_read_group_req+0x18>
   11b30:	2c10      	cmp	r4, #16
   11b32:	d16f      	bne.n	11c14 <att_read_group_req+0xf8>
   11b34:	2104      	movs	r1, #4
   11b36:	3008      	adds	r0, #8
   11b38:	f002 fe88 	bl	1484c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11b3c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   11b40:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11b42:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11b44:	1d01      	adds	r1, r0, #4
   11b46:	4622      	mov	r2, r4
   11b48:	4640      	mov	r0, r8
   11b4a:	f009 f8e8 	bl	1ad1e <bt_uuid_create>
   11b4e:	2800      	cmp	r0, #0
   11b50:	d062      	beq.n	11c18 <att_read_group_req+0xfc>
	if (!start || !end) {
   11b52:	2e00      	cmp	r6, #0
   11b54:	d03a      	beq.n	11bcc <att_read_group_req+0xb0>
   11b56:	2400      	movs	r4, #0
   11b58:	2f00      	cmp	r7, #0
   11b5a:	d036      	beq.n	11bca <att_read_group_req+0xae>
	if (start > end) {
   11b5c:	42be      	cmp	r6, r7
   11b5e:	d835      	bhi.n	11bcc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11b60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11b64:	4640      	mov	r0, r8
   11b66:	a901      	add	r1, sp, #4
   11b68:	f88d 4004 	strb.w	r4, [sp, #4]
   11b6c:	f8ad 3006 	strh.w	r3, [sp, #6]
   11b70:	f009 f8a7 	bl	1acc2 <bt_uuid_cmp>
   11b74:	2800      	cmp	r0, #0
   11b76:	d134      	bne.n	11be2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   11b78:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11b7a:	2214      	movs	r2, #20
   11b7c:	2100      	movs	r1, #0
   11b7e:	a807      	add	r0, sp, #28
   11b80:	f009 f855 	bl	1ac2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   11b84:	2201      	movs	r2, #1
   11b86:	2111      	movs	r1, #17
   11b88:	4620      	mov	r0, r4
   11b8a:	f7ff ff99 	bl	11ac0 <bt_att_create_pdu>
   11b8e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   11b90:	2800      	cmp	r0, #0
   11b92:	d041      	beq.n	11c18 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   11b94:	2101      	movs	r1, #1
   11b96:	3008      	adds	r0, #8
	data.uuid = uuid;
   11b98:	e9cd 5807 	strd	r5, r8, [sp, #28]
   11b9c:	f002 fe74 	bl	14888 <net_buf_simple_add>
	data.rsp->len = 0U;
   11ba0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11ba4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11ba6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   11ba8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11bac:	4639      	mov	r1, r7
   11bae:	4630      	mov	r0, r6
   11bb0:	4a1a      	ldr	r2, [pc, #104]	; (11c1c <att_read_group_req+0x100>)
	data.group = NULL;
   11bb2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11bb6:	f009 fbff 	bl	1b3b8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   11bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11bbc:	781c      	ldrb	r4, [r3, #0]
   11bbe:	bb1c      	cbnz	r4, 11c08 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   11bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   11bc2:	f002 fd4b 	bl	1465c <net_buf_unref>
	if (!req) {
   11bc6:	230a      	movs	r3, #10
   11bc8:	e018      	b.n	11bfc <att_read_group_req+0xe0>
			*err = 0U;
   11bca:	463e      	mov	r6, r7
	if (!req) {
   11bcc:	2301      	movs	r3, #1
   11bce:	4632      	mov	r2, r6
   11bd0:	2110      	movs	r1, #16
   11bd2:	4628      	mov	r0, r5
   11bd4:	f7ff fe6c 	bl	118b0 <send_err_rsp.part.0>
		return 0;
   11bd8:	2400      	movs	r4, #0
}
   11bda:	4620      	mov	r0, r4
   11bdc:	b00c      	add	sp, #48	; 0x30
   11bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11be2:	f642 0301 	movw	r3, #10241	; 0x2801
   11be6:	4640      	mov	r0, r8
   11be8:	a907      	add	r1, sp, #28
   11bea:	f88d 401c 	strb.w	r4, [sp, #28]
   11bee:	f8ad 301e 	strh.w	r3, [sp, #30]
   11bf2:	f009 f866 	bl	1acc2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11bf6:	2800      	cmp	r0, #0
   11bf8:	d0be      	beq.n	11b78 <att_read_group_req+0x5c>
	if (!req) {
   11bfa:	2310      	movs	r3, #16
   11bfc:	4632      	mov	r2, r6
   11bfe:	2110      	movs	r1, #16
   11c00:	4628      	mov	r0, r5
   11c02:	f7ff fe55 	bl	118b0 <send_err_rsp.part.0>
		return 0;
   11c06:	e7e8      	b.n	11bda <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11c08:	4628      	mov	r0, r5
   11c0a:	4a05      	ldr	r2, [pc, #20]	; (11c20 <att_read_group_req+0x104>)
   11c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11c0e:	f009 fd0a 	bl	1b626 <bt_att_chan_send_rsp>
	return 0;
   11c12:	e7e1      	b.n	11bd8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   11c14:	2404      	movs	r4, #4
   11c16:	e7e0      	b.n	11bda <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   11c18:	240e      	movs	r4, #14
   11c1a:	e7de      	b.n	11bda <att_read_group_req+0xbe>
   11c1c:	000114b9 	.word	0x000114b9
   11c20:	0001b6f7 	.word	0x0001b6f7

00011c24 <att_read_mult_req>:
{
   11c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11c28:	6886      	ldr	r6, [r0, #8]
{
   11c2a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   11c2c:	2210      	movs	r2, #16
{
   11c2e:	4604      	mov	r4, r0
   11c30:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   11c32:	4668      	mov	r0, sp
   11c34:	2100      	movs	r1, #0
   11c36:	f008 fffa 	bl	1ac2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   11c3a:	2200      	movs	r2, #0
   11c3c:	210f      	movs	r1, #15
   11c3e:	4630      	mov	r0, r6
   11c40:	f7ff ff3e 	bl	11ac0 <bt_att_create_pdu>
   11c44:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11c46:	b360      	cbz	r0, 11ca2 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11c48:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11c4c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 11ca8 <att_read_mult_req+0x84>
	data.chan = chan;
   11c50:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   11c52:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   11c56:	89ab      	ldrh	r3, [r5, #12]
   11c58:	2b01      	cmp	r3, #1
   11c5a:	d805      	bhi.n	11c68 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11c5c:	4620      	mov	r0, r4
   11c5e:	4a13      	ldr	r2, [pc, #76]	; (11cac <att_read_mult_req+0x88>)
   11c60:	9902      	ldr	r1, [sp, #8]
   11c62:	f009 fce0 	bl	1b626 <bt_att_chan_send_rsp>
   11c66:	e018      	b.n	11c9a <att_read_mult_req+0x76>
   11c68:	4638      	mov	r0, r7
   11c6a:	f00a faa3 	bl	1c1b4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11c6e:	466b      	mov	r3, sp
   11c70:	464a      	mov	r2, r9
   11c72:	4601      	mov	r1, r0
   11c74:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11c76:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11c7a:	f009 fb9d 	bl	1b3b8 <bt_gatt_foreach_attr>
		if (data.err) {
   11c7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11c82:	2b00      	cmp	r3, #0
   11c84:	d0e7      	beq.n	11c56 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   11c86:	9802      	ldr	r0, [sp, #8]
   11c88:	f002 fce8 	bl	1465c <net_buf_unref>
	if (!req) {
   11c8c:	4632      	mov	r2, r6
   11c8e:	210e      	movs	r1, #14
   11c90:	4620      	mov	r0, r4
   11c92:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11c96:	f7ff fe0b 	bl	118b0 <send_err_rsp.part.0>
	return 0;
   11c9a:	2000      	movs	r0, #0
}
   11c9c:	b005      	add	sp, #20
   11c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   11ca2:	200e      	movs	r0, #14
   11ca4:	e7fa      	b.n	11c9c <att_read_mult_req+0x78>
   11ca6:	bf00      	nop
   11ca8:	0001b71f 	.word	0x0001b71f
   11cac:	0001b6f7 	.word	0x0001b6f7

00011cb0 <att_read_rsp>:
{
   11cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11cb4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   11cb8:	4605      	mov	r5, r0
   11cba:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   11cbc:	4640      	mov	r0, r8
   11cbe:	2101      	movs	r1, #1
{
   11cc0:	4614      	mov	r4, r2
   11cc2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   11cc4:	f00a fa09 	bl	1c0da <bt_gatt_change_aware>
   11cc8:	b390      	cbz	r0, 11d30 <att_read_rsp+0x80>
	if (!handle) {
   11cca:	b39e      	cbz	r6, 11d34 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   11ccc:	2210      	movs	r2, #16
   11cce:	2100      	movs	r1, #0
   11cd0:	4668      	mov	r0, sp
   11cd2:	f008 ffac 	bl	1ac2e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   11cd6:	2200      	movs	r2, #0
   11cd8:	4621      	mov	r1, r4
   11cda:	4640      	mov	r0, r8
   11cdc:	f7ff fef0 	bl	11ac0 <bt_att_create_pdu>
   11ce0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11ce2:	b348      	cbz	r0, 11d38 <att_read_rsp+0x88>
	data.offset = offset;
   11ce4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11ce8:	4631      	mov	r1, r6
	data.offset = offset;
   11cea:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11cee:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11cf0:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11cf2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11cf6:	4a11      	ldr	r2, [pc, #68]	; (11d3c <att_read_rsp+0x8c>)
   11cf8:	466b      	mov	r3, sp
	data.chan = chan;
   11cfa:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11cfc:	f009 fb5c 	bl	1b3b8 <bt_gatt_foreach_attr>
	if (data.err) {
   11d00:	f89d 400c 	ldrb.w	r4, [sp, #12]
   11d04:	b174      	cbz	r4, 11d24 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   11d06:	9802      	ldr	r0, [sp, #8]
   11d08:	f002 fca8 	bl	1465c <net_buf_unref>
	if (!req) {
   11d0c:	4632      	mov	r2, r6
   11d0e:	4639      	mov	r1, r7
   11d10:	4628      	mov	r0, r5
   11d12:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11d16:	f7ff fdcb 	bl	118b0 <send_err_rsp.part.0>
		return 0;
   11d1a:	2400      	movs	r4, #0
}
   11d1c:	4620      	mov	r0, r4
   11d1e:	b004      	add	sp, #16
   11d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11d24:	4628      	mov	r0, r5
   11d26:	4a06      	ldr	r2, [pc, #24]	; (11d40 <att_read_rsp+0x90>)
   11d28:	9902      	ldr	r1, [sp, #8]
   11d2a:	f009 fc7c 	bl	1b626 <bt_att_chan_send_rsp>
	return 0;
   11d2e:	e7f5      	b.n	11d1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11d30:	2412      	movs	r4, #18
   11d32:	e7f3      	b.n	11d1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11d34:	2401      	movs	r4, #1
   11d36:	e7f1      	b.n	11d1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   11d38:	240e      	movs	r4, #14
   11d3a:	e7ef      	b.n	11d1c <att_read_rsp+0x6c>
   11d3c:	0001b71f 	.word	0x0001b71f
   11d40:	0001b6f7 	.word	0x0001b6f7

00011d44 <att_read_type_req>:
{
   11d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11d48:	898c      	ldrh	r4, [r1, #12]
{
   11d4a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11d4c:	3c04      	subs	r4, #4
   11d4e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11d50:	2c02      	cmp	r4, #2
{
   11d52:	4608      	mov	r0, r1
   11d54:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11d56:	d001      	beq.n	11d5c <att_read_type_req+0x18>
   11d58:	2c10      	cmp	r4, #16
   11d5a:	d150      	bne.n	11dfe <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   11d5c:	2104      	movs	r1, #4
   11d5e:	3008      	adds	r0, #8
   11d60:	f002 fd74 	bl	1484c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11d64:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   11d68:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11d6a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11d6c:	1d01      	adds	r1, r0, #4
   11d6e:	4622      	mov	r2, r4
   11d70:	4640      	mov	r0, r8
   11d72:	f008 ffd4 	bl	1ad1e <bt_uuid_create>
   11d76:	b188      	cbz	r0, 11d9c <att_read_type_req+0x58>
	if (!start || !end) {
   11d78:	b19e      	cbz	r6, 11da2 <att_read_type_req+0x5e>
   11d7a:	b18f      	cbz	r7, 11da0 <att_read_type_req+0x5c>
	if (start > end) {
   11d7c:	42b7      	cmp	r7, r6
   11d7e:	d310      	bcc.n	11da2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   11d80:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   11d82:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11d84:	2100      	movs	r1, #0
   11d86:	eb0d 0002 	add.w	r0, sp, r2
   11d8a:	f008 ff50 	bl	1ac2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   11d8e:	2201      	movs	r2, #1
   11d90:	2109      	movs	r1, #9
   11d92:	4620      	mov	r0, r4
   11d94:	f7ff fe94 	bl	11ac0 <bt_att_create_pdu>
   11d98:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   11d9a:	b968      	cbnz	r0, 11db8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   11d9c:	240e      	movs	r4, #14
   11d9e:	e007      	b.n	11db0 <att_read_type_req+0x6c>
			*err = 0U;
   11da0:	463e      	mov	r6, r7
	if (!req) {
   11da2:	2301      	movs	r3, #1
   11da4:	4632      	mov	r2, r6
   11da6:	2108      	movs	r1, #8
   11da8:	4628      	mov	r0, r5
   11daa:	f7ff fd81 	bl	118b0 <send_err_rsp.part.0>
		return 0;
   11dae:	2400      	movs	r4, #0
}
   11db0:	4620      	mov	r0, r4
   11db2:	b00c      	add	sp, #48	; 0x30
   11db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   11db8:	2101      	movs	r1, #1
   11dba:	3008      	adds	r0, #8
	data.uuid = uuid;
   11dbc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   11dc0:	f002 fd62 	bl	14888 <net_buf_simple_add>
	data.rsp->len = 0U;
   11dc4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11dc8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11dca:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11dcc:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   11dce:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11dd2:	4a0c      	ldr	r2, [pc, #48]	; (11e04 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11dd4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11dd8:	4630      	mov	r0, r6
   11dda:	ab06      	add	r3, sp, #24
   11ddc:	f009 faec 	bl	1b3b8 <bt_gatt_foreach_attr>
	if (data.err) {
   11de0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   11de4:	b12c      	cbz	r4, 11df2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   11de6:	9808      	ldr	r0, [sp, #32]
   11de8:	f002 fc38 	bl	1465c <net_buf_unref>
	if (!req) {
   11dec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   11df0:	e7d8      	b.n	11da4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11df2:	4628      	mov	r0, r5
   11df4:	4a04      	ldr	r2, [pc, #16]	; (11e08 <att_read_type_req+0xc4>)
   11df6:	9908      	ldr	r1, [sp, #32]
   11df8:	f009 fc15 	bl	1b626 <bt_att_chan_send_rsp>
	return 0;
   11dfc:	e7d8      	b.n	11db0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   11dfe:	2404      	movs	r4, #4
   11e00:	e7d6      	b.n	11db0 <att_read_type_req+0x6c>
   11e02:	bf00      	nop
   11e04:	000116e1 	.word	0x000116e1
   11e08:	0001b6f7 	.word	0x0001b6f7

00011e0c <att_find_type_req>:
{
   11e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e10:	4688      	mov	r8, r1
   11e12:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   11e14:	2106      	movs	r1, #6
   11e16:	b086      	sub	sp, #24
   11e18:	f108 0008 	add.w	r0, r8, #8
   11e1c:	f002 fd16 	bl	1484c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   11e20:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   11e22:	b317      	cbz	r7, 11e6a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   11e24:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   11e28:	f1b9 0f00 	cmp.w	r9, #0
   11e2c:	d01c      	beq.n	11e68 <att_find_type_req+0x5c>
	if (start > end) {
   11e2e:	454f      	cmp	r7, r9
   11e30:	d81b      	bhi.n	11e6a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   11e32:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   11e34:	2400      	movs	r4, #0
   11e36:	f8ad 3002 	strh.w	r3, [sp, #2]
   11e3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11e3e:	4668      	mov	r0, sp
   11e40:	a901      	add	r1, sp, #4
	value = buf->data;
   11e42:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   11e46:	f88d 4000 	strb.w	r4, [sp]
   11e4a:	f88d 4004 	strb.w	r4, [sp, #4]
   11e4e:	f8ad 3006 	strh.w	r3, [sp, #6]
   11e52:	f008 ff36 	bl	1acc2 <bt_uuid_cmp>
   11e56:	4606      	mov	r6, r0
   11e58:	b190      	cbz	r0, 11e80 <att_find_type_req+0x74>
	if (!req) {
   11e5a:	230a      	movs	r3, #10
   11e5c:	463a      	mov	r2, r7
   11e5e:	2106      	movs	r1, #6
   11e60:	4628      	mov	r0, r5
   11e62:	f7ff fd25 	bl	118b0 <send_err_rsp.part.0>
		return 0;
   11e66:	e007      	b.n	11e78 <att_find_type_req+0x6c>
			*err = 0U;
   11e68:	464f      	mov	r7, r9
	if (!req) {
   11e6a:	2301      	movs	r3, #1
   11e6c:	463a      	mov	r2, r7
   11e6e:	2106      	movs	r1, #6
   11e70:	4628      	mov	r0, r5
   11e72:	f7ff fd1d 	bl	118b0 <send_err_rsp.part.0>
		return 0;
   11e76:	2400      	movs	r4, #0
}
   11e78:	4620      	mov	r0, r4
   11e7a:	b006      	add	sp, #24
   11e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   11e80:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   11e84:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11e88:	4601      	mov	r1, r0
   11e8a:	2214      	movs	r2, #20
   11e8c:	a801      	add	r0, sp, #4
   11e8e:	f008 fece 	bl	1ac2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   11e92:	4632      	mov	r2, r6
   11e94:	2107      	movs	r1, #7
   11e96:	4640      	mov	r0, r8
   11e98:	f7ff fe12 	bl	11ac0 <bt_att_create_pdu>
   11e9c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11e9e:	b1e0      	cbz	r0, 11eda <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11ea0:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   11ea2:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11ea4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   11ea8:	4638      	mov	r0, r7
   11eaa:	4a0d      	ldr	r2, [pc, #52]	; (11ee0 <att_find_type_req+0xd4>)
   11eac:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   11eae:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   11eb2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   11eb6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   11eb8:	f009 fa7e 	bl	1b3b8 <bt_gatt_foreach_attr>
	if (data.err) {
   11ebc:	f89d 4015 	ldrb.w	r4, [sp, #21]
   11ec0:	b12c      	cbz	r4, 11ece <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   11ec2:	9802      	ldr	r0, [sp, #8]
   11ec4:	f002 fbca 	bl	1465c <net_buf_unref>
	if (!req) {
   11ec8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11ecc:	e7ce      	b.n	11e6c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11ece:	4628      	mov	r0, r5
   11ed0:	4a04      	ldr	r2, [pc, #16]	; (11ee4 <att_find_type_req+0xd8>)
   11ed2:	9902      	ldr	r1, [sp, #8]
   11ed4:	f009 fba7 	bl	1b626 <bt_att_chan_send_rsp>
	return 0;
   11ed8:	e7ce      	b.n	11e78 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   11eda:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   11edc:	e7cc      	b.n	11e78 <att_find_type_req+0x6c>
   11ede:	bf00      	nop
   11ee0:	000112a9 	.word	0x000112a9
   11ee4:	0001b6f7 	.word	0x0001b6f7

00011ee8 <att_find_info_req>:
{
   11ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   11eea:	688b      	ldr	r3, [r1, #8]
{
   11eec:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   11eee:	881e      	ldrh	r6, [r3, #0]
{
   11ef0:	b085      	sub	sp, #20
	if (!start || !end) {
   11ef2:	b19e      	cbz	r6, 11f1c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   11ef4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   11ef6:	b184      	cbz	r4, 11f1a <att_find_info_req+0x32>
	if (start > end) {
   11ef8:	42b4      	cmp	r4, r6
   11efa:	d30f      	bcc.n	11f1c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   11efc:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   11efe:	2210      	movs	r2, #16
   11f00:	2100      	movs	r1, #0
   11f02:	4668      	mov	r0, sp
   11f04:	f008 fe93 	bl	1ac2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   11f08:	2200      	movs	r2, #0
   11f0a:	2105      	movs	r1, #5
   11f0c:	4638      	mov	r0, r7
   11f0e:	f7ff fdd7 	bl	11ac0 <bt_att_create_pdu>
   11f12:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   11f14:	b958      	cbnz	r0, 11f2e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   11f16:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   11f18:	e007      	b.n	11f2a <att_find_info_req+0x42>
			*err = 0U;
   11f1a:	4626      	mov	r6, r4
	if (!req) {
   11f1c:	2301      	movs	r3, #1
   11f1e:	4632      	mov	r2, r6
   11f20:	2104      	movs	r1, #4
   11f22:	4628      	mov	r0, r5
   11f24:	f7ff fcc4 	bl	118b0 <send_err_rsp.part.0>
	return 0;
   11f28:	2000      	movs	r0, #0
}
   11f2a:	b005      	add	sp, #20
   11f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11f2e:	4621      	mov	r1, r4
   11f30:	466b      	mov	r3, sp
   11f32:	4630      	mov	r0, r6
   11f34:	4a08      	ldr	r2, [pc, #32]	; (11f58 <att_find_info_req+0x70>)
	data.chan = chan;
   11f36:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11f38:	f009 fa3e 	bl	1b3b8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   11f3c:	9c02      	ldr	r4, [sp, #8]
   11f3e:	b924      	cbnz	r4, 11f4a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   11f40:	9801      	ldr	r0, [sp, #4]
   11f42:	f002 fb8b 	bl	1465c <net_buf_unref>
	if (!req) {
   11f46:	230a      	movs	r3, #10
   11f48:	e7e9      	b.n	11f1e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11f4a:	4628      	mov	r0, r5
   11f4c:	4a03      	ldr	r2, [pc, #12]	; (11f5c <att_find_info_req+0x74>)
   11f4e:	9901      	ldr	r1, [sp, #4]
   11f50:	f009 fb69 	bl	1b626 <bt_att_chan_send_rsp>
   11f54:	e7e8      	b.n	11f28 <att_find_info_req+0x40>
   11f56:	bf00      	nop
   11f58:	0001b3cf 	.word	0x0001b3cf
   11f5c:	0001b6f7 	.word	0x0001b6f7

00011f60 <att_mtu_req>:
{
   11f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   11f62:	4603      	mov	r3, r0
   11f64:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   11f68:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   11f6a:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f6c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   11f70:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   11f74:	071b      	lsls	r3, r3, #28
   11f76:	d41b      	bmi.n	11fb0 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   11f78:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   11f7a:	881b      	ldrh	r3, [r3, #0]
   11f7c:	2b16      	cmp	r3, #22
   11f7e:	d919      	bls.n	11fb4 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   11f80:	2202      	movs	r2, #2
   11f82:	2103      	movs	r1, #3
   11f84:	f7ff fd9c 	bl	11ac0 <bt_att_create_pdu>
	if (!pdu) {
   11f88:	4606      	mov	r6, r0
   11f8a:	b1a8      	cbz	r0, 11fb8 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   11f8c:	2102      	movs	r1, #2
   11f8e:	3008      	adds	r0, #8
   11f90:	f002 fc7a 	bl	14888 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   11f94:	2717      	movs	r7, #23
   11f96:	7044      	strb	r4, [r0, #1]
   11f98:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   11f9a:	4631      	mov	r1, r6
   11f9c:	4628      	mov	r0, r5
   11f9e:	4a07      	ldr	r2, [pc, #28]	; (11fbc <att_mtu_req+0x5c>)
   11fa0:	f009 fb41 	bl	1b626 <bt_att_chan_send_rsp>
	return 0;
   11fa4:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   11fa6:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   11faa:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   11fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   11fb0:	2006      	movs	r0, #6
   11fb2:	e7fc      	b.n	11fae <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   11fb4:	2004      	movs	r0, #4
   11fb6:	e7fa      	b.n	11fae <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   11fb8:	200e      	movs	r0, #14
   11fba:	e7f8      	b.n	11fae <att_mtu_req+0x4e>
   11fbc:	0001b6f7 	.word	0x0001b6f7

00011fc0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   11fc0:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   11fc2:	2400      	movs	r4, #0
{
   11fc4:	4602      	mov	r2, r0
   11fc6:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   11fc8:	4807      	ldr	r0, [pc, #28]	; (11fe8 <bt_att_req_alloc+0x28>)
   11fca:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   11fcc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   11fce:	f004 fe87 	bl	16ce0 <k_mem_slab_alloc>
   11fd2:	4601      	mov	r1, r0
   11fd4:	b930      	cbnz	r0, 11fe4 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   11fd6:	2218      	movs	r2, #24
   11fd8:	9801      	ldr	r0, [sp, #4]
   11fda:	f008 fe28 	bl	1ac2e <memset>

	return req;
   11fde:	9801      	ldr	r0, [sp, #4]
}
   11fe0:	b002      	add	sp, #8
   11fe2:	bd10      	pop	{r4, pc}
		return NULL;
   11fe4:	4620      	mov	r0, r4
   11fe6:	e7fb      	b.n	11fe0 <bt_att_req_alloc+0x20>
   11fe8:	20008618 	.word	0x20008618

00011fec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   11fec:	b507      	push	{r0, r1, r2, lr}
   11fee:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   11ff0:	a901      	add	r1, sp, #4
   11ff2:	4803      	ldr	r0, [pc, #12]	; (12000 <bt_att_req_free+0x14>)
   11ff4:	f004 fece 	bl	16d94 <k_mem_slab_free>
}
   11ff8:	b003      	add	sp, #12
   11ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   11ffe:	bf00      	nop
   12000:	20008618 	.word	0x20008618

00012004 <att_handle_rsp>:
{
   12004:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12008:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   1200a:	30f0      	adds	r0, #240	; 0xf0
{
   1200c:	460f      	mov	r7, r1
   1200e:	4690      	mov	r8, r2
   12010:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   12012:	f006 fc93 	bl	1893c <k_delayed_work_cancel>
	if (!chan->req) {
   12016:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   1201a:	f04f 0a00 	mov.w	sl, #0
   1201e:	b99d      	cbnz	r5, 12048 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   12020:	2157      	movs	r1, #87	; 0x57
   12022:	4818      	ldr	r0, [pc, #96]	; (12084 <att_handle_rsp+0x80>)
   12024:	f007 fb78 	bl	19718 <printk>
	att_req_send_process(chan->att);
   12028:	6820      	ldr	r0, [r4, #0]
   1202a:	f009 fbe0 	bl	1b7ee <att_req_send_process>
	if (func) {
   1202e:	b13d      	cbz	r5, 12040 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   12030:	6820      	ldr	r0, [r4, #0]
   12032:	f8cd 9000 	str.w	r9, [sp]
   12036:	4643      	mov	r3, r8
   12038:	463a      	mov	r2, r7
   1203a:	4631      	mov	r1, r6
   1203c:	6800      	ldr	r0, [r0, #0]
   1203e:	47a8      	blx	r5
}
   12040:	2000      	movs	r0, #0
   12042:	b002      	add	sp, #8
   12044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12048:	4b0f      	ldr	r3, [pc, #60]	; (12088 <att_handle_rsp+0x84>)
   1204a:	429d      	cmp	r5, r3
   1204c:	d103      	bne.n	12056 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   1204e:	4655      	mov	r5, sl
		chan->req = NULL;
   12050:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   12054:	e7e8      	b.n	12028 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   12056:	6928      	ldr	r0, [r5, #16]
   12058:	b128      	cbz	r0, 12066 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   1205a:	f002 faff 	bl	1465c <net_buf_unref>
		chan->req->buf = NULL;
   1205e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12062:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   12066:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   1206a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1206e:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12070:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   12074:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   12078:	f009 fc46 	bl	1b908 <att_req_destroy>
	chan->req = NULL;
   1207c:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   12080:	e7d2      	b.n	12028 <att_handle_rsp+0x24>
   12082:	bf00      	nop
   12084:	000206fe 	.word	0x000206fe
   12088:	2000a974 	.word	0x2000a974

0001208c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1208c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   12090:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   12092:	b18b      	cbz	r3, 120b8 <att_error_rsp+0x2c>
   12094:	4a09      	ldr	r2, [pc, #36]	; (120bc <att_error_rsp+0x30>)
   12096:	4293      	cmp	r3, r2
   12098:	d00e      	beq.n	120b8 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   1209a:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   1209c:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   1209e:	b12a      	cbz	r2, 120ac <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   120a0:	899d      	ldrh	r5, [r3, #12]
   120a2:	89dc      	ldrh	r4, [r3, #14]
   120a4:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   120a6:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   120a8:	442b      	add	r3, r5
   120aa:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   120ac:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   120ae:	2200      	movs	r2, #0
}
   120b0:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   120b2:	4611      	mov	r1, r2
   120b4:	f7ff bfa6 	b.w	12004 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   120b8:	230e      	movs	r3, #14
   120ba:	e7f8      	b.n	120ae <att_error_rsp+0x22>
   120bc:	2000a974 	.word	0x2000a974

000120c0 <att_reset>:
{
   120c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   120c2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   120c4:	9803      	ldr	r0, [sp, #12]
   120c6:	2200      	movs	r2, #0
   120c8:	2300      	movs	r3, #0
   120ca:	300c      	adds	r0, #12
   120cc:	f002 fa44 	bl	14558 <net_buf_get>
   120d0:	b948      	cbnz	r0, 120e6 <att_reset+0x26>
	att->conn = NULL;
   120d2:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   120d4:	6854      	ldr	r4, [r2, #4]
   120d6:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   120d8:	b944      	cbnz	r4, 120ec <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   120da:	480d      	ldr	r0, [pc, #52]	; (12110 <att_reset+0x50>)
   120dc:	a903      	add	r1, sp, #12
   120de:	f004 fe59 	bl	16d94 <k_mem_slab_free>
}
   120e2:	b004      	add	sp, #16
   120e4:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   120e6:	f002 fab9 	bl	1465c <net_buf_unref>
   120ea:	e7eb      	b.n	120c4 <att_reset+0x4>
	return node->next;
   120ec:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   120ee:	6866      	ldr	r6, [r4, #4]
   120f0:	b136      	cbz	r6, 12100 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   120f2:	6963      	ldr	r3, [r4, #20]
   120f4:	210e      	movs	r1, #14
   120f6:	9300      	str	r3, [sp, #0]
   120f8:	2300      	movs	r3, #0
   120fa:	461a      	mov	r2, r3
   120fc:	4618      	mov	r0, r3
   120fe:	47b0      	blx	r6
		att_req_destroy(req);
   12100:	4620      	mov	r0, r4
   12102:	f009 fc01 	bl	1b908 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12106:	2d00      	cmp	r5, #0
   12108:	d0e7      	beq.n	120da <att_reset+0x1a>
   1210a:	462c      	mov	r4, r5
   1210c:	682d      	ldr	r5, [r5, #0]
   1210e:	e7ee      	b.n	120ee <att_reset+0x2e>
   12110:	200085e0 	.word	0x200085e0

00012114 <att_timeout>:
{
   12114:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   12116:	4605      	mov	r5, r0
   12118:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   1211c:	2145      	movs	r1, #69	; 0x45
{
   1211e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   12120:	4808      	ldr	r0, [pc, #32]	; (12144 <att_timeout+0x30>)
   12122:	f007 faf9 	bl	19718 <printk>
	att_chan_detach(chan);
   12126:	4628      	mov	r0, r5
   12128:	f009 fc2b 	bl	1b982 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1212c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1212e:	b945      	cbnz	r5, 12142 <att_timeout+0x2e>
	att_reset(att);
   12130:	4630      	mov	r0, r6
   12132:	f7ff ffc5 	bl	120c0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   12136:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   1213a:	f002 f83b 	bl	141b4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1213e:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   12142:	bd70      	pop	{r4, r5, r6, pc}
   12144:	0002071a 	.word	0x0002071a

00012148 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   12148:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1214c:	460c      	mov	r4, r1
   1214e:	4617      	mov	r7, r2
   12150:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   12152:	4605      	mov	r5, r0
   12154:	b950      	cbnz	r0, 1216c <bt_att_send+0x24>
   12156:	492e      	ldr	r1, [pc, #184]	; (12210 <bt_att_send+0xc8>)
   12158:	482e      	ldr	r0, [pc, #184]	; (12214 <bt_att_send+0xcc>)
   1215a:	f640 32ce 	movw	r2, #3022	; 0xbce
   1215e:	f007 fadb 	bl	19718 <printk>
   12162:	f640 31ce 	movw	r1, #3022	; 0xbce
   12166:	482a      	ldr	r0, [pc, #168]	; (12210 <bt_att_send+0xc8>)
   12168:	f007 fd7c 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1216c:	b954      	cbnz	r4, 12184 <bt_att_send+0x3c>
   1216e:	4928      	ldr	r1, [pc, #160]	; (12210 <bt_att_send+0xc8>)
   12170:	4828      	ldr	r0, [pc, #160]	; (12214 <bt_att_send+0xcc>)
   12172:	f640 32cf 	movw	r2, #3023	; 0xbcf
   12176:	f007 facf 	bl	19718 <printk>
   1217a:	f640 31cf 	movw	r1, #3023	; 0xbcf
   1217e:	4824      	ldr	r0, [pc, #144]	; (12210 <bt_att_send+0xc8>)
   12180:	f007 fd70 	bl	19c64 <assert_post_action>

	att = att_get(conn);
   12184:	4628      	mov	r0, r5
   12186:	f7ff f85b 	bl	11240 <att_get>
	if (!att) {
   1218a:	4606      	mov	r6, r0
   1218c:	b938      	cbnz	r0, 1219e <bt_att_send+0x56>
		net_buf_unref(buf);
   1218e:	4620      	mov	r0, r4
   12190:	f002 fa64 	bl	1465c <net_buf_unref>
		return -ENOTCONN;
   12194:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   12198:	b002      	add	sp, #8
   1219a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1219e:	b147      	cbz	r7, 121b2 <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   121a0:	463b      	mov	r3, r7
   121a2:	4622      	mov	r2, r4
   121a4:	2104      	movs	r1, #4
   121a6:	4628      	mov	r0, r5
   121a8:	f8cd 8000 	str.w	r8, [sp]
   121ac:	f009 f843 	bl	1b236 <bt_l2cap_send_cb>
   121b0:	e7f2      	b.n	12198 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   121b2:	f100 070c 	add.w	r7, r0, #12
   121b6:	4621      	mov	r1, r4
   121b8:	4638      	mov	r0, r7
   121ba:	f002 fa21 	bl	14600 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   121be:	2200      	movs	r2, #0
   121c0:	2300      	movs	r3, #0
   121c2:	4638      	mov	r0, r7
   121c4:	f002 f9c8 	bl	14558 <net_buf_get>
	if (!buf) {
   121c8:	4605      	mov	r5, r0
   121ca:	b908      	cbnz	r0, 121d0 <bt_att_send+0x88>
	return 0;
   121cc:	2000      	movs	r0, #0
   121ce:	e7e3      	b.n	12198 <bt_att_send+0x50>
	return list->head;
   121d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   121d2:	b1c3      	cbz	r3, 12206 <bt_att_send+0xbe>
   121d4:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   121d8:	d015      	beq.n	12206 <bt_att_send+0xbe>
	return node->next;
   121da:	681c      	ldr	r4, [r3, #0]
   121dc:	b10c      	cbz	r4, 121e2 <bt_att_send+0x9a>
   121de:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   121e2:	2200      	movs	r2, #0
   121e4:	4629      	mov	r1, r5
   121e6:	f009 fa07 	bl	1b5f8 <bt_att_chan_send>
		if (err >= 0) {
   121ea:	2800      	cmp	r0, #0
   121ec:	daee      	bge.n	121cc <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   121ee:	b154      	cbz	r4, 12206 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   121f0:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   121f4:	d004      	beq.n	12200 <bt_att_send+0xb8>
	return node->next;
   121f6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   121fa:	b10b      	cbz	r3, 12200 <bt_att_send+0xb8>
   121fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   12200:	4620      	mov	r0, r4
   12202:	461c      	mov	r4, r3
   12204:	e7ed      	b.n	121e2 <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   12206:	4629      	mov	r1, r5
   12208:	4638      	mov	r0, r7
   1220a:	f00a fe2d 	bl	1ce68 <k_queue_prepend>
   1220e:	e7dd      	b.n	121cc <bt_att_send+0x84>
   12210:	000205dd 	.word	0x000205dd
   12214:	0001e6bc 	.word	0x0001e6bc

00012218 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   12218:	b538      	push	{r3, r4, r5, lr}
   1221a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1221c:	4605      	mov	r5, r0
   1221e:	b950      	cbnz	r0, 12236 <bt_att_req_send+0x1e>
   12220:	4918      	ldr	r1, [pc, #96]	; (12284 <bt_att_req_send+0x6c>)
   12222:	4819      	ldr	r0, [pc, #100]	; (12288 <bt_att_req_send+0x70>)
   12224:	f640 32eb 	movw	r2, #3051	; 0xbeb
   12228:	f007 fa76 	bl	19718 <printk>
   1222c:	f640 31eb 	movw	r1, #3051	; 0xbeb
   12230:	4814      	ldr	r0, [pc, #80]	; (12284 <bt_att_req_send+0x6c>)
   12232:	f007 fd17 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(req);
   12236:	b954      	cbnz	r4, 1224e <bt_att_req_send+0x36>
   12238:	4912      	ldr	r1, [pc, #72]	; (12284 <bt_att_req_send+0x6c>)
   1223a:	4813      	ldr	r0, [pc, #76]	; (12288 <bt_att_req_send+0x70>)
   1223c:	f640 32ec 	movw	r2, #3052	; 0xbec
   12240:	f007 fa6a 	bl	19718 <printk>
   12244:	f640 31ec 	movw	r1, #3052	; 0xbec
   12248:	480e      	ldr	r0, [pc, #56]	; (12284 <bt_att_req_send+0x6c>)
   1224a:	f007 fd0b 	bl	19c64 <assert_post_action>

	att = att_get(conn);
   1224e:	4628      	mov	r0, r5
   12250:	f7fe fff6 	bl	11240 <att_get>
	if (!att) {
   12254:	4605      	mov	r5, r0
   12256:	b930      	cbnz	r0, 12266 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   12258:	6920      	ldr	r0, [r4, #16]
   1225a:	f002 f9ff 	bl	1465c <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1225e:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   12262:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   12264:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   12266:	2300      	movs	r3, #0
   12268:	6023      	str	r3, [r4, #0]
	return list->tail;
   1226a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1226c:	b933      	cbnz	r3, 1227c <bt_att_req_send+0x64>
	list->head = node;
   1226e:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   12272:	4628      	mov	r0, r5
   12274:	f009 fabb 	bl	1b7ee <att_req_send_process>
	return 0;
   12278:	2000      	movs	r0, #0
   1227a:	e7f3      	b.n	12264 <bt_att_req_send+0x4c>
	parent->next = child;
   1227c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1227e:	6084      	str	r4, [r0, #8]
}
   12280:	e7f7      	b.n	12272 <bt_att_req_send+0x5a>
   12282:	bf00      	nop
   12284:	000205dd 	.word	0x000205dd
   12288:	0001e6bc 	.word	0x0001e6bc

0001228c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1228c:	b510      	push	{r4, lr}
   1228e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   12290:	b350      	cbz	r0, 122e8 <bt_att_req_cancel+0x5c>
   12292:	b349      	cbz	r1, 122e8 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   12294:	f7fe ffd4 	bl	11240 <att_get>
	if (!att) {
   12298:	b330      	cbz	r0, 122e8 <bt_att_req_cancel+0x5c>
	return list->head;
   1229a:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1229c:	b15b      	cbz	r3, 122b6 <bt_att_req_cancel+0x2a>
   1229e:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   122a2:	d008      	beq.n	122b6 <bt_att_req_cancel+0x2a>
	return node->next;
   122a4:	681b      	ldr	r3, [r3, #0]
   122a6:	b10b      	cbz	r3, 122ac <bt_att_req_cancel+0x20>
   122a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   122ac:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   122b0:	4294      	cmp	r4, r2
   122b2:	d006      	beq.n	122c2 <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   122b4:	b96b      	cbnz	r3, 122d2 <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   122b6:	3004      	adds	r0, #4
   122b8:	4621      	mov	r1, r4
   122ba:	f009 f9dc 	bl	1b676 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   122be:	4620      	mov	r0, r4
   122c0:	e003      	b.n	122ca <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   122c2:	4620      	mov	r0, r4
	chan->req = &cancel;
   122c4:	4b09      	ldr	r3, [pc, #36]	; (122ec <bt_att_req_cancel+0x60>)
   122c6:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   122ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   122ce:	f009 bb1b 	b.w	1b908 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   122d2:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   122d6:	d004      	beq.n	122e2 <bt_att_req_cancel+0x56>
	return node->next;
   122d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   122dc:	b10a      	cbz	r2, 122e2 <bt_att_req_cancel+0x56>
   122de:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   122e2:	4619      	mov	r1, r3
   122e4:	4613      	mov	r3, r2
   122e6:	e7e1      	b.n	122ac <bt_att_req_cancel+0x20>
}
   122e8:	bd10      	pop	{r4, pc}
   122ea:	bf00      	nop
   122ec:	2000a974 	.word	0x2000a974

000122f0 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   122f0:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   122f2:	4618      	mov	r0, r3
{
   122f4:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   122f6:	4907      	ldr	r1, [pc, #28]	; (12314 <db_hash_set+0x24>)
   122f8:	2210      	movs	r2, #16
   122fa:	47a0      	blx	r4
	if (len < 0) {
   122fc:	1e04      	subs	r4, r0, #0
   122fe:	da06      	bge.n	1230e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   12300:	4622      	mov	r2, r4
   12302:	2145      	movs	r1, #69	; 0x45
   12304:	4804      	ldr	r0, [pc, #16]	; (12318 <db_hash_set+0x28>)
   12306:	f007 fa07 	bl	19718 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   1230a:	4620      	mov	r0, r4
   1230c:	bd10      	pop	{r4, pc}
	return 0;
   1230e:	2400      	movs	r4, #0
   12310:	e7fb      	b.n	1230a <db_hash_set+0x1a>
   12312:	bf00      	nop
   12314:	2000c5af 	.word	0x2000c5af
   12318:	00020732 	.word	0x00020732

0001231c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1231c:	2210      	movs	r2, #16
{
   1231e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   12320:	4906      	ldr	r1, [pc, #24]	; (1233c <db_hash_store+0x20>)
   12322:	4807      	ldr	r0, [pc, #28]	; (12340 <db_hash_store+0x24>)
   12324:	f7f8 fe3a 	bl	af9c <settings_save_one>
	if (err) {
   12328:	4602      	mov	r2, r0
   1232a:	b128      	cbz	r0, 12338 <db_hash_store+0x1c>
}
   1232c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   12330:	2145      	movs	r1, #69	; 0x45
   12332:	4804      	ldr	r0, [pc, #16]	; (12344 <db_hash_store+0x28>)
   12334:	f007 b9f0 	b.w	19718 <printk>
}
   12338:	bd08      	pop	{r3, pc}
   1233a:	bf00      	nop
   1233c:	2000c59f 	.word	0x2000c59f
   12340:	00020758 	.word	0x00020758
   12344:	00020760 	.word	0x00020760

00012348 <find_cf_cfg>:
{
   12348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1234a:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1234c:	2600      	movs	r6, #0
   1234e:	4d0e      	ldr	r5, [pc, #56]	; (12388 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   12350:	462f      	mov	r7, r5
		if (!conn) {
   12352:	1c6a      	adds	r2, r5, #1
   12354:	b954      	cbnz	r4, 1236c <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12356:	4669      	mov	r1, sp
   12358:	4610      	mov	r0, r2
   1235a:	9400      	str	r4, [sp, #0]
   1235c:	f8cd 4003 	str.w	r4, [sp, #3]
   12360:	f009 fbd4 	bl	1bb0c <bt_addr_le_cmp>
   12364:	b940      	cbnz	r0, 12378 <find_cf_cfg+0x30>
}
   12366:	4638      	mov	r0, r7
   12368:	b003      	add	sp, #12
   1236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1236c:	4620      	mov	r0, r4
   1236e:	7829      	ldrb	r1, [r5, #0]
   12370:	f008 fe8d 	bl	1b08e <bt_conn_is_peer_addr_le>
   12374:	2800      	cmp	r0, #0
   12376:	d1f6      	bne.n	12366 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12378:	3601      	adds	r6, #1
   1237a:	2e0a      	cmp	r6, #10
   1237c:	f105 0510 	add.w	r5, r5, #16
   12380:	d1e6      	bne.n	12350 <find_cf_cfg+0x8>
	return NULL;
   12382:	2700      	movs	r7, #0
   12384:	e7ef      	b.n	12366 <find_cf_cfg+0x1e>
   12386:	bf00      	nop
   12388:	2000a98c 	.word	0x2000a98c

0001238c <find_sc_cfg>:
{
   1238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1238e:	4606      	mov	r6, r0
   12390:	460f      	mov	r7, r1
   12392:	2400      	movs	r4, #0
   12394:	4d09      	ldr	r5, [pc, #36]	; (123bc <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   12396:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1239a:	42b3      	cmp	r3, r6
   1239c:	d107      	bne.n	123ae <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1239e:	4639      	mov	r1, r7
   123a0:	4628      	mov	r0, r5
   123a2:	f009 fbb3 	bl	1bb0c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   123a6:	b910      	cbnz	r0, 123ae <find_sc_cfg+0x22>
			return &sc_cfg[i];
   123a8:	4805      	ldr	r0, [pc, #20]	; (123c0 <find_sc_cfg+0x34>)
   123aa:	4420      	add	r0, r4
}
   123ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   123ae:	340c      	adds	r4, #12
   123b0:	2c78      	cmp	r4, #120	; 0x78
   123b2:	f105 050c 	add.w	r5, r5, #12
   123b6:	d1ee      	bne.n	12396 <find_sc_cfg+0xa>
	return NULL;
   123b8:	2000      	movs	r0, #0
   123ba:	e7f7      	b.n	123ac <find_sc_cfg+0x20>
   123bc:	2000be1f 	.word	0x2000be1f
   123c0:	2000be1e 	.word	0x2000be1e

000123c4 <gatt_sub_find>:
{
   123c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   123c6:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   123c8:	2600      	movs	r6, #0
   123ca:	4d0e      	ldr	r5, [pc, #56]	; (12404 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   123cc:	462f      	mov	r7, r5
		if (!conn) {
   123ce:	1c6a      	adds	r2, r5, #1
   123d0:	b954      	cbnz	r4, 123e8 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   123d2:	4669      	mov	r1, sp
   123d4:	4610      	mov	r0, r2
   123d6:	9400      	str	r4, [sp, #0]
   123d8:	f8cd 4003 	str.w	r4, [sp, #3]
   123dc:	f009 fb96 	bl	1bb0c <bt_addr_le_cmp>
   123e0:	b940      	cbnz	r0, 123f4 <gatt_sub_find+0x30>
}
   123e2:	4638      	mov	r0, r7
   123e4:	b003      	add	sp, #12
   123e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   123e8:	4620      	mov	r0, r4
   123ea:	7829      	ldrb	r1, [r5, #0]
   123ec:	f008 fe4f 	bl	1b08e <bt_conn_is_peer_addr_le>
   123f0:	2800      	cmp	r0, #0
   123f2:	d1f6      	bne.n	123e2 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   123f4:	3601      	adds	r6, #1
   123f6:	2e0a      	cmp	r6, #10
   123f8:	f105 0510 	add.w	r5, r5, #16
   123fc:	d1e6      	bne.n	123cc <gatt_sub_find+0x8>
	return NULL;
   123fe:	2700      	movs	r7, #0
   12400:	e7ef      	b.n	123e2 <gatt_sub_find+0x1e>
   12402:	bf00      	nop
   12404:	2000ab24 	.word	0x2000ab24

00012408 <find_cf_cfg_by_addr>:
{
   12408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1240a:	4606      	mov	r6, r0
   1240c:	460f      	mov	r7, r1
   1240e:	2400      	movs	r4, #0
   12410:	4d09      	ldr	r5, [pc, #36]	; (12438 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   12412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12416:	42b3      	cmp	r3, r6
   12418:	d107      	bne.n	1242a <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1241a:	4629      	mov	r1, r5
   1241c:	4638      	mov	r0, r7
   1241e:	f009 fb75 	bl	1bb0c <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   12422:	b910      	cbnz	r0, 1242a <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   12424:	4805      	ldr	r0, [pc, #20]	; (1243c <find_cf_cfg_by_addr+0x34>)
   12426:	4420      	add	r0, r4
}
   12428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1242a:	3410      	adds	r4, #16
   1242c:	2ca0      	cmp	r4, #160	; 0xa0
   1242e:	f105 0510 	add.w	r5, r5, #16
   12432:	d1ee      	bne.n	12412 <find_cf_cfg_by_addr+0xa>
	return NULL;
   12434:	2000      	movs	r0, #0
   12436:	e7f7      	b.n	12428 <find_cf_cfg_by_addr+0x20>
   12438:	2000a98d 	.word	0x2000a98d
   1243c:	2000a98c 	.word	0x2000a98c

00012440 <bt_gatt_attr_write_ccc>:
{
   12440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12444:	461f      	mov	r7, r3
   12446:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1244a:	4604      	mov	r4, r0
   1244c:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1244e:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   12452:	2b00      	cmp	r3, #0
   12454:	d141      	bne.n	124da <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   12456:	1e7b      	subs	r3, r7, #1
   12458:	2b01      	cmp	r3, #1
   1245a:	d841      	bhi.n	124e0 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1245c:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1245e:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   12460:	4649      	mov	r1, r9
   12462:	bf14      	ite	ne
   12464:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   12466:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   12468:	f009 fb53 	bl	1bb12 <find_ccc_cfg>
	if (!cfg) {
   1246c:	4605      	mov	r5, r0
   1246e:	b9b0      	cbnz	r0, 1249e <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   12470:	b916      	cbnz	r6, 12478 <bt_gatt_attr_write_ccc+0x38>
			return len;
   12472:	4638      	mov	r0, r7
}
   12474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   12478:	4649      	mov	r1, r9
   1247a:	f009 fb4a 	bl	1bb12 <find_ccc_cfg>
		if (!cfg) {
   1247e:	4605      	mov	r5, r0
   12480:	b930      	cbnz	r0, 12490 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   12482:	4819      	ldr	r0, [pc, #100]	; (124e8 <bt_gatt_attr_write_ccc+0xa8>)
   12484:	2157      	movs	r1, #87	; 0x57
   12486:	f007 f947 	bl	19718 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1248a:	f06f 0010 	mvn.w	r0, #16
   1248e:	e7f1      	b.n	12474 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12490:	f104 0188 	add.w	r1, r4, #136	; 0x88
   12494:	3001      	adds	r0, #1
   12496:	f009 fb75 	bl	1bb84 <bt_addr_le_copy>
		cfg->id = conn->id;
   1249a:	7a23      	ldrb	r3, [r4, #8]
   1249c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1249e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   124a2:	b973      	cbnz	r3, 124c2 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   124a4:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   124a8:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   124aa:	42b3      	cmp	r3, r6
   124ac:	d003      	beq.n	124b6 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   124ae:	4649      	mov	r1, r9
   124b0:	4640      	mov	r0, r8
   124b2:	f009 faa4 	bl	1b9fe <gatt_ccc_changed>
	if (!value) {
   124b6:	2e00      	cmp	r6, #0
   124b8:	d1db      	bne.n	12472 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   124ba:	4628      	mov	r0, r5
   124bc:	f009 fb65 	bl	1bb8a <clear_ccc_cfg>
   124c0:	e7d7      	b.n	12472 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   124c2:	4632      	mov	r2, r6
   124c4:	4641      	mov	r1, r8
   124c6:	4620      	mov	r0, r4
   124c8:	4798      	blx	r3
		if (write < 0) {
   124ca:	2800      	cmp	r0, #0
   124cc:	dbd2      	blt.n	12474 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   124ce:	1e44      	subs	r4, r0, #1
   124d0:	2c01      	cmp	r4, #1
   124d2:	d9e7      	bls.n	124a4 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   124d4:	f06f 000d 	mvn.w	r0, #13
   124d8:	e7cc      	b.n	12474 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   124da:	f06f 0006 	mvn.w	r0, #6
   124de:	e7c9      	b.n	12474 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   124e0:	f06f 000c 	mvn.w	r0, #12
   124e4:	e7c6      	b.n	12474 <bt_gatt_attr_write_ccc+0x34>
   124e6:	bf00      	nop
   124e8:	0002078b 	.word	0x0002078b

000124ec <cf_write>:
{
   124ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124f0:	461f      	mov	r7, r3
   124f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   124f6:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   124f8:	2b01      	cmp	r3, #1
{
   124fa:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   124fc:	d845      	bhi.n	1258a <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   124fe:	443b      	add	r3, r7
   12500:	2b01      	cmp	r3, #1
   12502:	463d      	mov	r5, r7
   12504:	dc44      	bgt.n	12590 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   12506:	f7ff ff1f 	bl	12348 <find_cf_cfg>
	if (!cfg) {
   1250a:	4604      	mov	r4, r0
   1250c:	b918      	cbnz	r0, 12516 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1250e:	f7ff ff1b 	bl	12348 <find_cf_cfg>
	if (!cfg) {
   12512:	4604      	mov	r4, r0
   12514:	b1d8      	cbz	r0, 1254e <cf_write+0x62>
   12516:	4632      	mov	r2, r6
   12518:	f104 0008 	add.w	r0, r4, #8
   1251c:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   12520:	4596      	cmp	lr, r2
   12522:	d11d      	bne.n	12560 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   12524:	b12f      	cbz	r7, 12532 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   12526:	7833      	ldrb	r3, [r6, #0]
   12528:	7a22      	ldrb	r2, [r4, #8]
   1252a:	f003 0307 	and.w	r3, r3, #7
   1252e:	4313      	orrs	r3, r2
   12530:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12532:	f108 0188 	add.w	r1, r8, #136	; 0x88
   12536:	1c60      	adds	r0, r4, #1
   12538:	f009 fb24 	bl	1bb84 <bt_addr_le_copy>
	cfg->id = conn->id;
   1253c:	4620      	mov	r0, r4
   1253e:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12542:	2101      	movs	r1, #1
   12544:	f800 3b0c 	strb.w	r3, [r0], #12
   12548:	f009 fb2d 	bl	1bba6 <atomic_or>
}
   1254c:	e005      	b.n	1255a <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1254e:	2157      	movs	r1, #87	; 0x57
   12550:	4812      	ldr	r0, [pc, #72]	; (1259c <cf_write+0xb0>)
   12552:	f007 f8e1 	bl	19718 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   12556:	f06f 0510 	mvn.w	r5, #16
}
   1255a:	4628      	mov	r0, r5
   1255c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   12560:	2300      	movs	r3, #0
   12562:	f812 1b01 	ldrb.w	r1, [r2], #1
   12566:	f810 cb01 	ldrb.w	ip, [r0], #1
   1256a:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1256e:	fa21 f903 	lsr.w	r9, r1, r3
   12572:	f019 0f01 	tst.w	r9, #1
   12576:	d004      	beq.n	12582 <cf_write+0x96>
   12578:	fa2c f903 	lsr.w	r9, ip, r3
   1257c:	f019 0f01 	tst.w	r9, #1
   12580:	d109      	bne.n	12596 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   12582:	3301      	adds	r3, #1
   12584:	2b03      	cmp	r3, #3
   12586:	d1f2      	bne.n	1256e <cf_write+0x82>
   12588:	e7ca      	b.n	12520 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1258a:	f06f 0506 	mvn.w	r5, #6
   1258e:	e7e4      	b.n	1255a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12590:	f06f 050c 	mvn.w	r5, #12
   12594:	e7e1      	b.n	1255a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12596:	f06f 0512 	mvn.w	r5, #18
   1259a:	e7de      	b.n	1255a <cf_write+0x6e>
   1259c:	000207aa 	.word	0x000207aa

000125a0 <sc_store>:
{
   125a0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   125a2:	4605      	mov	r5, r0
   125a4:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   125a8:	4604      	mov	r4, r0
   125aa:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   125ac:	b1ca      	cbz	r2, 125e2 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   125ae:	ae02      	add	r6, sp, #8
   125b0:	2104      	movs	r1, #4
   125b2:	4630      	mov	r0, r6
   125b4:	f007 f816 	bl	195e4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   125b8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   125ba:	462b      	mov	r3, r5
   125bc:	2124      	movs	r1, #36	; 0x24
   125be:	4a0a      	ldr	r2, [pc, #40]	; (125e8 <sc_store+0x48>)
   125c0:	a803      	add	r0, sp, #12
   125c2:	f7fb f8bd 	bl	d740 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   125c6:	2204      	movs	r2, #4
   125c8:	f104 0108 	add.w	r1, r4, #8
   125cc:	a803      	add	r0, sp, #12
   125ce:	f7f8 fce5 	bl	af9c <settings_save_one>
	if (err) {
   125d2:	4602      	mov	r2, r0
   125d4:	b118      	cbz	r0, 125de <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   125d6:	2145      	movs	r1, #69	; 0x45
   125d8:	4804      	ldr	r0, [pc, #16]	; (125ec <sc_store+0x4c>)
   125da:	f007 f89d 	bl	19718 <printk>
}
   125de:	b00c      	add	sp, #48	; 0x30
   125e0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   125e2:	9200      	str	r2, [sp, #0]
   125e4:	e7e9      	b.n	125ba <sc_store+0x1a>
   125e6:	bf00      	nop
   125e8:	00020ae6 	.word	0x00020ae6
   125ec:	000207db 	.word	0x000207db

000125f0 <sc_save>:
{
   125f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   125f4:	4680      	mov	r8, r0
   125f6:	460f      	mov	r7, r1
   125f8:	4616      	mov	r6, r2
   125fa:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   125fc:	f7ff fec6 	bl	1238c <find_sc_cfg>
	if (!cfg) {
   12600:	4604      	mov	r4, r0
   12602:	b998      	cbnz	r0, 1262c <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12604:	4669      	mov	r1, sp
   12606:	9000      	str	r0, [sp, #0]
   12608:	f8cd 0003 	str.w	r0, [sp, #3]
   1260c:	f7ff febe 	bl	1238c <find_sc_cfg>
		if (!cfg) {
   12610:	4604      	mov	r4, r0
   12612:	b930      	cbnz	r0, 12622 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   12614:	2145      	movs	r1, #69	; 0x45
   12616:	4813      	ldr	r0, [pc, #76]	; (12664 <sc_save+0x74>)
   12618:	f007 f87e 	bl	19718 <printk>
}
   1261c:	b002      	add	sp, #8
   1261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   12622:	4639      	mov	r1, r7
		cfg->id = id;
   12624:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   12628:	f009 faac 	bl	1bb84 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1262c:	8922      	ldrh	r2, [r4, #8]
   1262e:	8963      	ldrh	r3, [r4, #10]
   12630:	b97a      	cbnz	r2, 12652 <sc_save+0x62>
   12632:	b983      	cbnz	r3, 12656 <sc_save+0x66>
		cfg->data.start = start;
   12634:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   12636:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   12638:	4621      	mov	r1, r4
   1263a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1263e:	f008 fc92 	bl	1af66 <bt_addr_le_is_bonded>
   12642:	2800      	cmp	r0, #0
   12644:	d0ea      	beq.n	1261c <sc_save+0x2c>
		sc_store(cfg);
   12646:	4620      	mov	r0, r4
}
   12648:	b002      	add	sp, #8
   1264a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1264e:	f7ff bfa7 	b.w	125a0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   12652:	4296      	cmp	r6, r2
   12654:	d302      	bcc.n	1265c <sc_save+0x6c>
   12656:	429d      	cmp	r5, r3
   12658:	d8ed      	bhi.n	12636 <sc_save+0x46>
   1265a:	e7df      	b.n	1261c <sc_save+0x2c>
	if (*end < new_end) {
   1265c:	429d      	cmp	r5, r3
		*start = new_start;
   1265e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   12660:	d9ea      	bls.n	12638 <sc_save+0x48>
   12662:	e7e8      	b.n	12636 <sc_save+0x46>
   12664:	000207fc 	.word	0x000207fc

00012668 <sc_set>:
{
   12668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1266c:	460e      	mov	r6, r1
   1266e:	4690      	mov	r8, r2
   12670:	4699      	mov	r9, r3
	if (!name) {
   12672:	4604      	mov	r4, r0
{
   12674:	b087      	sub	sp, #28
	if (!name) {
   12676:	b948      	cbnz	r0, 1268c <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   12678:	2145      	movs	r1, #69	; 0x45
   1267a:	4829      	ldr	r0, [pc, #164]	; (12720 <sc_set+0xb8>)
   1267c:	f007 f84c 	bl	19718 <printk>
		return -EINVAL;
   12680:	f06f 0515 	mvn.w	r5, #21
}
   12684:	4628      	mov	r0, r5
   12686:	b007      	add	sp, #28
   12688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1268c:	a902      	add	r1, sp, #8
   1268e:	f008 faf4 	bl	1ac7a <bt_settings_decode_key>
	if (err) {
   12692:	4605      	mov	r5, r0
   12694:	b128      	cbz	r0, 126a2 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   12696:	4622      	mov	r2, r4
   12698:	2145      	movs	r1, #69	; 0x45
   1269a:	4822      	ldr	r0, [pc, #136]	; (12724 <sc_set+0xbc>)
   1269c:	f007 f83c 	bl	19718 <printk>
   126a0:	e7ee      	b.n	12680 <sc_set+0x18>
	settings_name_next(name, &next);
   126a2:	4620      	mov	r0, r4
   126a4:	a901      	add	r1, sp, #4
   126a6:	f007 fb56 	bl	19d56 <settings_name_next>
	if (!next) {
   126aa:	9801      	ldr	r0, [sp, #4]
   126ac:	b1d8      	cbz	r0, 126e6 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   126ae:	220a      	movs	r2, #10
   126b0:	4629      	mov	r1, r5
   126b2:	f008 f9a3 	bl	1a9fc <strtol>
   126b6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   126b8:	4638      	mov	r0, r7
   126ba:	a902      	add	r1, sp, #8
   126bc:	f7ff fe66 	bl	1238c <find_sc_cfg>
	if (!cfg && len_rd) {
   126c0:	4604      	mov	r4, r0
   126c2:	bb28      	cbnz	r0, 12710 <sc_set+0xa8>
   126c4:	2e00      	cmp	r6, #0
   126c6:	d0dd      	beq.n	12684 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   126c8:	a904      	add	r1, sp, #16
   126ca:	9004      	str	r0, [sp, #16]
   126cc:	f8cd 0013 	str.w	r0, [sp, #19]
   126d0:	f7ff fe5c 	bl	1238c <find_sc_cfg>
		if (!cfg) {
   126d4:	4604      	mov	r4, r0
   126d6:	b940      	cbnz	r0, 126ea <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   126d8:	2145      	movs	r1, #69	; 0x45
   126da:	4813      	ldr	r0, [pc, #76]	; (12728 <sc_set+0xc0>)
   126dc:	f007 f81c 	bl	19718 <printk>
			return -ENOMEM;
   126e0:	f06f 050b 	mvn.w	r5, #11
   126e4:	e7ce      	b.n	12684 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   126e6:	462f      	mov	r7, r5
   126e8:	e7e6      	b.n	126b8 <sc_set+0x50>
		cfg->id = id;
   126ea:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   126ee:	a902      	add	r1, sp, #8
   126f0:	f009 fa48 	bl	1bb84 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   126f4:	f104 0108 	add.w	r1, r4, #8
   126f8:	2204      	movs	r2, #4
   126fa:	4648      	mov	r0, r9
   126fc:	47c0      	blx	r8
		if (len < 0) {
   126fe:	1e04      	subs	r4, r0, #0
   12700:	dac0      	bge.n	12684 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   12702:	4622      	mov	r2, r4
   12704:	2145      	movs	r1, #69	; 0x45
   12706:	4809      	ldr	r0, [pc, #36]	; (1272c <sc_set+0xc4>)
   12708:	f007 f806 	bl	19718 <printk>
			return len;
   1270c:	4625      	mov	r5, r4
   1270e:	e7b9      	b.n	12684 <sc_set+0x1c>
	if (len_rd) {
   12710:	2e00      	cmp	r6, #0
   12712:	d1ef      	bne.n	126f4 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   12714:	220c      	movs	r2, #12
   12716:	4631      	mov	r1, r6
   12718:	f008 fa89 	bl	1ac2e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1271c:	e7b2      	b.n	12684 <sc_set+0x1c>
   1271e:	bf00      	nop
   12720:	0001f729 	.word	0x0001f729
   12724:	00020820 	.word	0x00020820
   12728:	00020841 	.word	0x00020841
   1272c:	00020732 	.word	0x00020732

00012730 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   12730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12734:	4606      	mov	r6, r0
   12736:	4688      	mov	r8, r1
   12738:	4617      	mov	r7, r2
	if (params) {
   1273a:	461c      	mov	r4, r3
   1273c:	b31b      	cbz	r3, 12786 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1273e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   12742:	2100      	movs	r1, #0
   12744:	f7ff fc3c 	bl	11fc0 <bt_att_req_alloc>
		if (!req) {
   12748:	4605      	mov	r5, r0
   1274a:	b920      	cbnz	r0, 12756 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   1274c:	f06f 040b 	mvn.w	r4, #11
}
   12750:	4620      	mov	r0, r4
   12752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   12756:	2300      	movs	r3, #0
		req->user_data = params;
   12758:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   1275a:	4601      	mov	r1, r0
		req->buf = buf;
   1275c:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   12760:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   12762:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   12764:	4630      	mov	r0, r6
   12766:	f7ff fd57 	bl	12218 <bt_att_req_send>
		if (err) {
   1276a:	4604      	mov	r4, r0
   1276c:	2800      	cmp	r0, #0
   1276e:	d0ef      	beq.n	12750 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   12770:	4628      	mov	r0, r5
   12772:	f7ff fc3b 	bl	11fec <bt_att_req_free>
	if (err) {
   12776:	2c00      	cmp	r4, #0
   12778:	d0ea      	beq.n	12750 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   1277a:	4622      	mov	r2, r4
   1277c:	2145      	movs	r1, #69	; 0x45
   1277e:	4804      	ldr	r0, [pc, #16]	; (12790 <gatt_send.constprop.0+0x60>)
   12780:	f006 ffca 	bl	19718 <printk>
   12784:	e7e4      	b.n	12750 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   12786:	461a      	mov	r2, r3
   12788:	f7ff fcde 	bl	12148 <bt_att_send>
   1278c:	4604      	mov	r4, r0
   1278e:	e7f2      	b.n	12776 <gatt_send.constprop.0+0x46>
   12790:	00020868 	.word	0x00020868

00012794 <cf_set>:
{
   12794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12798:	4689      	mov	r9, r1
   1279a:	4617      	mov	r7, r2
   1279c:	4698      	mov	r8, r3
	if (!name) {
   1279e:	4605      	mov	r5, r0
{
   127a0:	b085      	sub	sp, #20
	if (!name) {
   127a2:	b948      	cbnz	r0, 127b8 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   127a4:	2145      	movs	r1, #69	; 0x45
   127a6:	4826      	ldr	r0, [pc, #152]	; (12840 <cf_set+0xac>)
   127a8:	f006 ffb6 	bl	19718 <printk>
		return -EINVAL;
   127ac:	f06f 0415 	mvn.w	r4, #21
}
   127b0:	4620      	mov	r0, r4
   127b2:	b005      	add	sp, #20
   127b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   127b8:	a902      	add	r1, sp, #8
   127ba:	f008 fa5e 	bl	1ac7a <bt_settings_decode_key>
	if (err) {
   127be:	4604      	mov	r4, r0
   127c0:	b128      	cbz	r0, 127ce <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   127c2:	462a      	mov	r2, r5
   127c4:	2145      	movs	r1, #69	; 0x45
   127c6:	481f      	ldr	r0, [pc, #124]	; (12844 <cf_set+0xb0>)
   127c8:	f006 ffa6 	bl	19718 <printk>
   127cc:	e7ee      	b.n	127ac <cf_set+0x18>
	settings_name_next(name, &next);
   127ce:	4628      	mov	r0, r5
   127d0:	a901      	add	r1, sp, #4
   127d2:	f007 fac0 	bl	19d56 <settings_name_next>
	if (!next) {
   127d6:	9801      	ldr	r0, [sp, #4]
   127d8:	b1a8      	cbz	r0, 12806 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   127da:	220a      	movs	r2, #10
   127dc:	4621      	mov	r1, r4
   127de:	f008 f90d 	bl	1a9fc <strtol>
   127e2:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   127e4:	4630      	mov	r0, r6
   127e6:	a902      	add	r1, sp, #8
   127e8:	f7ff fe0e 	bl	12408 <find_cf_cfg_by_addr>
	if (!cfg) {
   127ec:	4605      	mov	r5, r0
   127ee:	b988      	cbnz	r0, 12814 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   127f0:	f7ff fdaa 	bl	12348 <find_cf_cfg>
		if (!cfg) {
   127f4:	4605      	mov	r5, r0
   127f6:	b940      	cbnz	r0, 1280a <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   127f8:	2145      	movs	r1, #69	; 0x45
   127fa:	4813      	ldr	r0, [pc, #76]	; (12848 <cf_set+0xb4>)
   127fc:	f006 ff8c 	bl	19718 <printk>
			return -ENOMEM;
   12800:	f06f 040b 	mvn.w	r4, #11
   12804:	e7d4      	b.n	127b0 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   12806:	4626      	mov	r6, r4
   12808:	e7ec      	b.n	127e4 <cf_set+0x50>
		cfg->id = id;
   1280a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1280e:	a902      	add	r1, sp, #8
   12810:	f009 f9b8 	bl	1bb84 <bt_addr_le_copy>
	if (len_rd) {
   12814:	f1b9 0f00 	cmp.w	r9, #0
   12818:	d00d      	beq.n	12836 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1281a:	f105 0108 	add.w	r1, r5, #8
   1281e:	2201      	movs	r2, #1
   12820:	4640      	mov	r0, r8
   12822:	47b8      	blx	r7
		if (len < 0) {
   12824:	1e05      	subs	r5, r0, #0
   12826:	dac3      	bge.n	127b0 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   12828:	462a      	mov	r2, r5
   1282a:	2145      	movs	r1, #69	; 0x45
   1282c:	4807      	ldr	r0, [pc, #28]	; (1284c <cf_set+0xb8>)
   1282e:	f006 ff73 	bl	19718 <printk>
			return len;
   12832:	462c      	mov	r4, r5
   12834:	e7bc      	b.n	127b0 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   12836:	4628      	mov	r0, r5
   12838:	f009 f9cf 	bl	1bbda <clear_cf_cfg>
   1283c:	e7b8      	b.n	127b0 <cf_set+0x1c>
   1283e:	bf00      	nop
   12840:	0001f729 	.word	0x0001f729
   12844:	00020820 	.word	0x00020820
   12848:	00020887 	.word	0x00020887
   1284c:	00020732 	.word	0x00020732

00012850 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   12850:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12852:	6881      	ldr	r1, [r0, #8]
{
   12854:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12856:	4a07      	ldr	r2, [pc, #28]	; (12874 <remove_peer_from_attr+0x24>)
   12858:	4291      	cmp	r1, r2
   1285a:	d109      	bne.n	12870 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1285c:	791a      	ldrb	r2, [r3, #4]
   1285e:	6819      	ldr	r1, [r3, #0]
   12860:	68c0      	ldr	r0, [r0, #12]
   12862:	f009 f975 	bl	1bb50 <ccc_find_cfg>
	if (cfg) {
   12866:	b118      	cbz	r0, 12870 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   12868:	220a      	movs	r2, #10
   1286a:	2100      	movs	r1, #0
   1286c:	f008 f9df 	bl	1ac2e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   12870:	2001      	movs	r0, #1
   12872:	bd08      	pop	{r3, pc}
   12874:	00012441 	.word	0x00012441

00012878 <ccc_load>:
{
   12878:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1287a:	4b21      	ldr	r3, [pc, #132]	; (12900 <ccc_load+0x88>)
{
   1287c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1287e:	6882      	ldr	r2, [r0, #8]
   12880:	429a      	cmp	r2, r3
   12882:	d002      	beq.n	1288a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   12884:	2001      	movs	r0, #1
}
   12886:	b002      	add	sp, #8
   12888:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1288a:	68a3      	ldr	r3, [r4, #8]
   1288c:	68c6      	ldr	r6, [r0, #12]
   1288e:	b94b      	cbnz	r3, 128a4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   12890:	4630      	mov	r0, r6
   12892:	7922      	ldrb	r2, [r4, #4]
   12894:	6821      	ldr	r1, [r4, #0]
   12896:	f009 f95b 	bl	1bb50 <ccc_find_cfg>
	if (!cfg) {
   1289a:	2800      	cmp	r0, #0
   1289c:	d0f2      	beq.n	12884 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1289e:	f009 f974 	bl	1bb8a <clear_ccc_cfg>
   128a2:	e7ef      	b.n	12884 <ccc_load+0xc>
	} else if (!load->count) {
   128a4:	68e0      	ldr	r0, [r4, #12]
   128a6:	2800      	cmp	r0, #0
   128a8:	d0ed      	beq.n	12886 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   128aa:	881b      	ldrh	r3, [r3, #0]
   128ac:	4299      	cmp	r1, r3
   128ae:	d00a      	beq.n	128c6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   128b0:	d9e8      	bls.n	12884 <ccc_load+0xc>
	load->count--;
   128b2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   128b4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   128b6:	3801      	subs	r0, #1
	load->entry++;
   128b8:	3304      	adds	r3, #4
	load->count--;
   128ba:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   128bc:	3800      	subs	r0, #0
   128be:	bf18      	it	ne
   128c0:	2001      	movne	r0, #1
	load->entry++;
   128c2:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   128c4:	e7df      	b.n	12886 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   128c6:	4630      	mov	r0, r6
   128c8:	7922      	ldrb	r2, [r4, #4]
   128ca:	6821      	ldr	r1, [r4, #0]
   128cc:	f009 f940 	bl	1bb50 <ccc_find_cfg>
	if (!cfg) {
   128d0:	4605      	mov	r5, r0
   128d2:	b980      	cbnz	r0, 128f6 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   128d4:	9000      	str	r0, [sp, #0]
   128d6:	4602      	mov	r2, r0
   128d8:	f8cd 0003 	str.w	r0, [sp, #3]
   128dc:	4669      	mov	r1, sp
   128de:	4630      	mov	r0, r6
   128e0:	f009 f936 	bl	1bb50 <ccc_find_cfg>
		if (!cfg) {
   128e4:	4605      	mov	r5, r0
   128e6:	2800      	cmp	r0, #0
   128e8:	d0e3      	beq.n	128b2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   128ea:	6821      	ldr	r1, [r4, #0]
   128ec:	3001      	adds	r0, #1
   128ee:	f009 f949 	bl	1bb84 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   128f2:	7923      	ldrb	r3, [r4, #4]
   128f4:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   128f6:	68a3      	ldr	r3, [r4, #8]
   128f8:	885b      	ldrh	r3, [r3, #2]
   128fa:	812b      	strh	r3, [r5, #8]
   128fc:	e7d9      	b.n	128b2 <ccc_load+0x3a>
   128fe:	bf00      	nop
   12900:	00012441 	.word	0x00012441

00012904 <ccc_save>:
{
   12904:	b538      	push	{r3, r4, r5, lr}
   12906:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12908:	4b0b      	ldr	r3, [pc, #44]	; (12938 <ccc_save+0x34>)
   1290a:	6882      	ldr	r2, [r0, #8]
{
   1290c:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1290e:	429a      	cmp	r2, r3
   12910:	d10f      	bne.n	12932 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   12912:	7922      	ldrb	r2, [r4, #4]
   12914:	6821      	ldr	r1, [r4, #0]
   12916:	68c0      	ldr	r0, [r0, #12]
   12918:	f009 f91a 	bl	1bb50 <ccc_find_cfg>
	if (!cfg) {
   1291c:	b148      	cbz	r0, 12932 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1291e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   12922:	8901      	ldrh	r1, [r0, #8]
   12924:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   12928:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1292a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1292c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1292e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   12932:	2001      	movs	r0, #1
   12934:	bd38      	pop	{r3, r4, r5, pc}
   12936:	bf00      	nop
   12938:	00012441 	.word	0x00012441

0001293c <gatt_indicate>:
{
   1293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12940:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   12942:	8a92      	ldrh	r2, [r2, #20]
{
   12944:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12946:	3202      	adds	r2, #2
   12948:	211d      	movs	r1, #29
{
   1294a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   1294c:	f7ff f8b8 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   12950:	4605      	mov	r5, r0
   12952:	b1e8      	cbz	r0, 12990 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   12954:	f100 0808 	add.w	r8, r0, #8
   12958:	2102      	movs	r1, #2
   1295a:	4640      	mov	r0, r8
   1295c:	f001 ff94 	bl	14888 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12960:	4606      	mov	r6, r0
   12962:	8aa1      	ldrh	r1, [r4, #20]
   12964:	f826 9b02 	strh.w	r9, [r6], #2
   12968:	4640      	mov	r0, r8
   1296a:	f001 ff8d 	bl	14888 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1296e:	4630      	mov	r0, r6
   12970:	8aa2      	ldrh	r2, [r4, #20]
   12972:	6921      	ldr	r1, [r4, #16]
   12974:	f008 f930 	bl	1abd8 <memcpy>
	if (!params->func) {
   12978:	68a3      	ldr	r3, [r4, #8]
   1297a:	b933      	cbnz	r3, 1298a <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   1297c:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   1297e:	4629      	mov	r1, r5
   12980:	4638      	mov	r0, r7
}
   12982:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12986:	f7ff bed3 	b.w	12730 <gatt_send.constprop.0>
   1298a:	4623      	mov	r3, r4
   1298c:	4a04      	ldr	r2, [pc, #16]	; (129a0 <gatt_indicate+0x64>)
   1298e:	e7f6      	b.n	1297e <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   12990:	2157      	movs	r1, #87	; 0x57
   12992:	4804      	ldr	r0, [pc, #16]	; (129a4 <gatt_indicate+0x68>)
   12994:	f006 fec0 	bl	19718 <printk>
}
   12998:	f06f 000b 	mvn.w	r0, #11
   1299c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   129a0:	0001ba31 	.word	0x0001ba31
   129a4:	000208ae 	.word	0x000208ae

000129a8 <gatt_notify>:
{
   129a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129ac:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   129ae:	8992      	ldrh	r2, [r2, #12]
{
   129b0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   129b2:	3202      	adds	r2, #2
   129b4:	211b      	movs	r1, #27
{
   129b6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   129b8:	f7ff f882 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   129bc:	4605      	mov	r5, r0
   129be:	b1c8      	cbz	r0, 129f4 <gatt_notify+0x4c>
   129c0:	f100 0908 	add.w	r9, r0, #8
   129c4:	2102      	movs	r1, #2
   129c6:	4648      	mov	r0, r9
   129c8:	f001 ff5e 	bl	14888 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   129cc:	4606      	mov	r6, r0
   129ce:	89a1      	ldrh	r1, [r4, #12]
   129d0:	f826 8b02 	strh.w	r8, [r6], #2
   129d4:	4648      	mov	r0, r9
   129d6:	f001 ff57 	bl	14888 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   129da:	89a2      	ldrh	r2, [r4, #12]
   129dc:	68a1      	ldr	r1, [r4, #8]
   129de:	4630      	mov	r0, r6
   129e0:	f008 f8fa 	bl	1abd8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   129e4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   129e8:	4629      	mov	r1, r5
   129ea:	4638      	mov	r0, r7
}
   129ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   129f0:	f7ff bbaa 	b.w	12148 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   129f4:	2157      	movs	r1, #87	; 0x57
   129f6:	4803      	ldr	r0, [pc, #12]	; (12a04 <gatt_notify+0x5c>)
   129f8:	f006 fe8e 	bl	19718 <printk>
}
   129fc:	f06f 000b 	mvn.w	r0, #11
   12a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a04:	000208da 	.word	0x000208da

00012a08 <notify_cb>:
{
   12a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12a0c:	4b38      	ldr	r3, [pc, #224]	; (12af0 <notify_cb+0xe8>)
{
   12a0e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12a10:	6882      	ldr	r2, [r0, #8]
{
   12a12:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12a14:	429a      	cmp	r2, r3
   12a16:	d003      	beq.n	12a20 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   12a18:	2001      	movs	r0, #1
}
   12a1a:	b003      	add	sp, #12
   12a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   12a20:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   12a24:	4b33      	ldr	r3, [pc, #204]	; (12af4 <notify_cb+0xec>)
   12a26:	4599      	cmp	r9, r3
   12a28:	d01a      	beq.n	12a60 <notify_cb+0x58>
   12a2a:	f04f 0b00 	mov.w	fp, #0
   12a2e:	f109 0701 	add.w	r7, r9, #1
   12a32:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   12a36:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   12a3a:	89a3      	ldrh	r3, [r4, #12]
   12a3c:	429a      	cmp	r2, r3
   12a3e:	d10b      	bne.n	12a58 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12a40:	4639      	mov	r1, r7
   12a42:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   12a46:	f7fd fead 	bl	107a4 <bt_conn_lookup_addr_le>
		if (!conn) {
   12a4a:	4605      	mov	r5, r0
   12a4c:	b120      	cbz	r0, 12a58 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   12a4e:	7a83      	ldrb	r3, [r0, #10]
   12a50:	2b07      	cmp	r3, #7
   12a52:	d029      	beq.n	12aa8 <notify_cb+0xa0>
			bt_conn_unref(conn);
   12a54:	f7fd fd84 	bl	10560 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12a58:	370a      	adds	r7, #10
   12a5a:	4557      	cmp	r7, sl
   12a5c:	d1eb      	bne.n	12a36 <notify_cb+0x2e>
   12a5e:	e7db      	b.n	12a18 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12a60:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12a62:	4637      	mov	r7, r6
   12a64:	4d24      	ldr	r5, [pc, #144]	; (12af8 <notify_cb+0xf0>)
   12a66:	4669      	mov	r1, sp
   12a68:	4628      	mov	r0, r5
   12a6a:	9700      	str	r7, [sp, #0]
   12a6c:	f8cd 7003 	str.w	r7, [sp, #3]
   12a70:	f009 f84c 	bl	1bb0c <bt_addr_le_cmp>
   12a74:	b178      	cbz	r0, 12a96 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   12a76:	2207      	movs	r2, #7
   12a78:	4629      	mov	r1, r5
   12a7a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12a7e:	f7fd fed1 	bl	10824 <bt_conn_lookup_state_le>
			if (!conn) {
   12a82:	b970      	cbnz	r0, 12aa2 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   12a84:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   12a86:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   12a88:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   12a8a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12a8e:	8853      	ldrh	r3, [r2, #2]
   12a90:	8812      	ldrh	r2, [r2, #0]
   12a92:	f7ff fdad 	bl	125f0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12a96:	3601      	adds	r6, #1
   12a98:	2e0a      	cmp	r6, #10
   12a9a:	f105 050c 	add.w	r5, r5, #12
   12a9e:	d1e2      	bne.n	12a66 <notify_cb+0x5e>
   12aa0:	e7c3      	b.n	12a2a <notify_cb+0x22>
			bt_conn_unref(conn);
   12aa2:	f7fd fd5d 	bl	10560 <bt_conn_unref>
   12aa6:	e7f6      	b.n	12a96 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   12aa8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   12aac:	b123      	cbz	r3, 12ab8 <notify_cb+0xb0>
   12aae:	4641      	mov	r1, r8
   12ab0:	4798      	blx	r3
   12ab2:	b908      	cbnz	r0, 12ab8 <notify_cb+0xb0>
			bt_conn_unref(conn);
   12ab4:	4628      	mov	r0, r5
   12ab6:	e7cd      	b.n	12a54 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   12ab8:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   12aba:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   12abc:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   12abe:	88a1      	ldrh	r1, [r4, #4]
   12ac0:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   12ac2:	d10f      	bne.n	12ae4 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   12ac4:	f7ff ff3a 	bl	1293c <gatt_indicate>
			if (err == 0) {
   12ac8:	4606      	mov	r6, r0
   12aca:	b918      	cbnz	r0, 12ad4 <notify_cb+0xcc>
				data->ind_params->_ref++;
   12acc:	6922      	ldr	r2, [r4, #16]
   12ace:	7d93      	ldrb	r3, [r2, #22]
   12ad0:	3301      	adds	r3, #1
   12ad2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   12ad4:	4628      	mov	r0, r5
   12ad6:	f7fd fd43 	bl	10560 <bt_conn_unref>
		if (err < 0) {
   12ada:	2e00      	cmp	r6, #0
   12adc:	db06      	blt.n	12aec <notify_cb+0xe4>
		data->err = 0;
   12ade:	f8c4 b008 	str.w	fp, [r4, #8]
   12ae2:	e7b9      	b.n	12a58 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   12ae4:	f7ff ff60 	bl	129a8 <gatt_notify>
   12ae8:	4606      	mov	r6, r0
   12aea:	e7f3      	b.n	12ad4 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   12aec:	2000      	movs	r0, #0
   12aee:	e794      	b.n	12a1a <notify_cb+0x12>
   12af0:	00012441 	.word	0x00012441
   12af4:	2000847c 	.word	0x2000847c
   12af8:	2000be1f 	.word	0x2000be1f

00012afc <bt_gatt_clear_sc>:
{
   12afc:	b570      	push	{r4, r5, r6, lr}
   12afe:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   12b00:	f7ff fc44 	bl	1238c <find_sc_cfg>
	if (!cfg) {
   12b04:	4604      	mov	r4, r0
   12b06:	b1e8      	cbz	r0, 12b44 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   12b08:	4605      	mov	r5, r0
   12b0a:	f815 2b01 	ldrb.w	r2, [r5], #1
   12b0e:	b1e2      	cbz	r2, 12b4a <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12b10:	ae02      	add	r6, sp, #8
   12b12:	2104      	movs	r1, #4
   12b14:	4630      	mov	r0, r6
   12b16:	f006 fd65 	bl	195e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   12b1a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   12b1c:	4a0c      	ldr	r2, [pc, #48]	; (12b50 <bt_gatt_clear_sc+0x54>)
   12b1e:	462b      	mov	r3, r5
   12b20:	2124      	movs	r1, #36	; 0x24
   12b22:	a803      	add	r0, sp, #12
   12b24:	f7fa fe0c 	bl	d740 <bt_settings_encode_key>
		err = settings_delete(key);
   12b28:	a803      	add	r0, sp, #12
   12b2a:	f007 f8ed 	bl	19d08 <settings_delete>
		if (err) {
   12b2e:	4602      	mov	r2, r0
   12b30:	b118      	cbz	r0, 12b3a <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   12b32:	2145      	movs	r1, #69	; 0x45
   12b34:	4807      	ldr	r0, [pc, #28]	; (12b54 <bt_gatt_clear_sc+0x58>)
   12b36:	f006 fdef 	bl	19718 <printk>
	memset(cfg, 0, sizeof(*cfg));
   12b3a:	220c      	movs	r2, #12
   12b3c:	2100      	movs	r1, #0
   12b3e:	4620      	mov	r0, r4
   12b40:	f008 f875 	bl	1ac2e <memset>
}
   12b44:	2000      	movs	r0, #0
   12b46:	b00c      	add	sp, #48	; 0x30
   12b48:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   12b4a:	9200      	str	r2, [sp, #0]
   12b4c:	e7e6      	b.n	12b1c <bt_gatt_clear_sc+0x20>
   12b4e:	bf00      	nop
   12b50:	00020ae6 	.word	0x00020ae6
   12b54:	00020908 	.word	0x00020908

00012b58 <sc_clear>:
{
   12b58:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12b5a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   12b5e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12b60:	4631      	mov	r1, r6
   12b62:	7a00      	ldrb	r0, [r0, #8]
   12b64:	f008 f9ff 	bl	1af66 <bt_addr_le_is_bonded>
   12b68:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12b6a:	4631      	mov	r1, r6
   12b6c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12b6e:	b14d      	cbz	r5, 12b84 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12b70:	f7ff ffc4 	bl	12afc <bt_gatt_clear_sc>
		if (err) {
   12b74:	4602      	mov	r2, r0
   12b76:	b170      	cbz	r0, 12b96 <sc_clear+0x3e>
}
   12b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   12b7c:	2145      	movs	r1, #69	; 0x45
   12b7e:	4806      	ldr	r0, [pc, #24]	; (12b98 <sc_clear+0x40>)
   12b80:	f006 bdca 	b.w	19718 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   12b84:	f7ff fc02 	bl	1238c <find_sc_cfg>
		if (cfg) {
   12b88:	b128      	cbz	r0, 12b96 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   12b8a:	4629      	mov	r1, r5
}
   12b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   12b90:	220c      	movs	r2, #12
   12b92:	f008 b84c 	b.w	1ac2e <memset>
}
   12b96:	bd70      	pop	{r4, r5, r6, pc}
   12b98:	0002092a 	.word	0x0002092a

00012b9c <disconnected_cb>:
{
   12b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ba0:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12ba2:	4b26      	ldr	r3, [pc, #152]	; (12c3c <disconnected_cb+0xa0>)
   12ba4:	6882      	ldr	r2, [r0, #8]
{
   12ba6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12ba8:	429a      	cmp	r2, r3
   12baa:	d130      	bne.n	12c0e <disconnected_cb+0x72>
	ccc = attr->user_data;
   12bac:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   12bae:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   12bb2:	b363      	cbz	r3, 12c0e <disconnected_cb+0x72>
	value_used = false;
   12bb4:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   12bb8:	f8df b084 	ldr.w	fp, [pc, #132]	; 12c40 <disconnected_cb+0xa4>
   12bbc:	1c6c      	adds	r4, r5, #1
   12bbe:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12bc2:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   12bc6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   12bca:	b19b      	cbz	r3, 12bf4 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12bcc:	4622      	mov	r2, r4
   12bce:	4630      	mov	r0, r6
   12bd0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   12bd4:	f008 fa5b 	bl	1b08e <bt_conn_is_peer_addr_le>
   12bd8:	b9e0      	cbnz	r0, 12c14 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12bda:	4621      	mov	r1, r4
   12bdc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12be0:	f7fd fde0 	bl	107a4 <bt_conn_lookup_addr_le>
			if (tmp) {
   12be4:	b130      	cbz	r0, 12bf4 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   12be6:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   12be8:	2b07      	cmp	r3, #7
   12bea:	bf08      	it	eq
   12bec:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   12bf0:	f7fd fcb6 	bl	10560 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12bf4:	340a      	adds	r4, #10
   12bf6:	45a2      	cmp	sl, r4
   12bf8:	d1e5      	bne.n	12bc6 <disconnected_cb+0x2a>
	if (!value_used) {
   12bfa:	f1b8 0f00 	cmp.w	r8, #0
   12bfe:	d106      	bne.n	12c0e <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   12c00:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   12c02:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   12c06:	b113      	cbz	r3, 12c0e <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   12c08:	4641      	mov	r1, r8
   12c0a:	4638      	mov	r0, r7
   12c0c:	4798      	blx	r3
}
   12c0e:	2001      	movs	r0, #1
   12c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12c14:	4649      	mov	r1, r9
   12c16:	7a30      	ldrb	r0, [r6, #8]
   12c18:	f008 f9a5 	bl	1af66 <bt_addr_le_is_bonded>
   12c1c:	b940      	cbnz	r0, 12c30 <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   12c1e:	455d      	cmp	r5, fp
   12c20:	d102      	bne.n	12c28 <disconnected_cb+0x8c>
					sc_clear(conn);
   12c22:	4630      	mov	r0, r6
   12c24:	f7ff ff98 	bl	12b58 <sc_clear>
				clear_ccc_cfg(cfg);
   12c28:	1e60      	subs	r0, r4, #1
   12c2a:	f008 ffae 	bl	1bb8a <clear_ccc_cfg>
   12c2e:	e7e1      	b.n	12bf4 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12c30:	4649      	mov	r1, r9
   12c32:	4620      	mov	r0, r4
   12c34:	f008 ffa6 	bl	1bb84 <bt_addr_le_copy>
   12c38:	e7dc      	b.n	12bf4 <disconnected_cb+0x58>
   12c3a:	bf00      	nop
   12c3c:	00012441 	.word	0x00012441
   12c40:	2000847c 	.word	0x2000847c

00012c44 <sc_commit>:
{
   12c44:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12c46:	490b      	ldr	r1, [pc, #44]	; (12c74 <sc_commit+0x30>)
   12c48:	e8d1 3fef 	ldaex	r3, [r1]
   12c4c:	f023 0302 	bic.w	r3, r3, #2
   12c50:	e8c1 3fe2 	stlex	r2, r3, [r1]
   12c54:	2a00      	cmp	r2, #0
   12c56:	d1f7      	bne.n	12c48 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12c58:	4608      	mov	r0, r1
   12c5a:	f008 ffaf 	bl	1bbbc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12c5e:	07c3      	lsls	r3, r0, #31
   12c60:	d506      	bpl.n	12c70 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12c62:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12c66:	2300      	movs	r3, #0
   12c68:	4803      	ldr	r0, [pc, #12]	; (12c78 <sc_commit+0x34>)
   12c6a:	3930      	subs	r1, #48	; 0x30
   12c6c:	f005 fdf6 	bl	1885c <k_delayed_work_submit_to_queue>
}
   12c70:	2000      	movs	r0, #0
   12c72:	bd08      	pop	{r3, pc}
   12c74:	20009ac8 	.word	0x20009ac8
   12c78:	2000a3a0 	.word	0x2000a3a0

00012c7c <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   12c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c80:	4688      	mov	r8, r1
   12c82:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   12c84:	2112      	movs	r1, #18
   12c86:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   12c88:	4606      	mov	r6, r0
   12c8a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   12c8c:	f7fe ff18 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   12c90:	4604      	mov	r4, r0
   12c92:	b1c0      	cbz	r0, 12cc6 <gatt_write_ccc.constprop.0+0x4a>
   12c94:	f100 0908 	add.w	r9, r0, #8
   12c98:	2102      	movs	r1, #2
   12c9a:	4648      	mov	r0, r9
   12c9c:	f001 fdf4 	bl	14888 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   12ca0:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   12ca2:	f8a0 8000 	strh.w	r8, [r0]
   12ca6:	4648      	mov	r0, r9
   12ca8:	f009 faab 	bl	1c202 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12cac:	2104      	movs	r1, #4
   12cae:	f105 0010 	add.w	r0, r5, #16
   12cb2:	f008 ff78 	bl	1bba6 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   12cb6:	462b      	mov	r3, r5
   12cb8:	4621      	mov	r1, r4
   12cba:	4630      	mov	r0, r6
}
   12cbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   12cc0:	4a03      	ldr	r2, [pc, #12]	; (12cd0 <gatt_write_ccc.constprop.0+0x54>)
   12cc2:	f7ff bd35 	b.w	12730 <gatt_send.constprop.0>
}
   12cc6:	f06f 000b 	mvn.w	r0, #11
   12cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12cce:	bf00      	nop
   12cd0:	0001bc69 	.word	0x0001bc69

00012cd4 <sc_indicate_rsp>:
{
   12cd4:	b510      	push	{r4, lr}
   12cd6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12cd8:	4910      	ldr	r1, [pc, #64]	; (12d1c <sc_indicate_rsp+0x48>)
   12cda:	e8d1 3fef 	ldaex	r3, [r1]
   12cde:	f023 0302 	bic.w	r3, r3, #2
   12ce2:	e8c1 3fe2 	stlex	r2, r3, [r1]
   12ce6:	2a00      	cmp	r2, #0
   12ce8:	d1f7      	bne.n	12cda <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12cea:	4608      	mov	r0, r1
   12cec:	f008 ff66 	bl	1bbbc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12cf0:	07c2      	lsls	r2, r0, #31
   12cf2:	d505      	bpl.n	12d00 <sc_indicate_rsp+0x2c>
   12cf4:	2200      	movs	r2, #0
   12cf6:	2300      	movs	r3, #0
   12cf8:	4809      	ldr	r0, [pc, #36]	; (12d20 <sc_indicate_rsp+0x4c>)
   12cfa:	3930      	subs	r1, #48	; 0x30
   12cfc:	f005 fdae 	bl	1885c <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   12d00:	4620      	mov	r0, r4
   12d02:	f7ff fb21 	bl	12348 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   12d06:	b140      	cbz	r0, 12d1a <sc_indicate_rsp+0x46>
   12d08:	7a03      	ldrb	r3, [r0, #8]
   12d0a:	07db      	lsls	r3, r3, #31
   12d0c:	d505      	bpl.n	12d1a <sc_indicate_rsp+0x46>
}
   12d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12d12:	2101      	movs	r1, #1
   12d14:	300c      	adds	r0, #12
   12d16:	f008 bf46 	b.w	1bba6 <atomic_or>
   12d1a:	bd10      	pop	{r4, pc}
   12d1c:	20009ac8 	.word	0x20009ac8
   12d20:	2000a3a0 	.word	0x2000a3a0

00012d24 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12d24:	2201      	movs	r2, #1
{
   12d26:	b570      	push	{r4, r5, r6, lr}
   12d28:	4b26      	ldr	r3, [pc, #152]	; (12dc4 <bt_gatt_init+0xa0>)
   12d2a:	e8d3 1fef 	ldaex	r1, [r3]
   12d2e:	2900      	cmp	r1, #0
   12d30:	d103      	bne.n	12d3a <bt_gatt_init+0x16>
   12d32:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12d36:	2800      	cmp	r0, #0
   12d38:	d1f7      	bne.n	12d2a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   12d3a:	d142      	bne.n	12dc2 <bt_gatt_init+0x9e>
   12d3c:	4b22      	ldr	r3, [pc, #136]	; (12dc8 <bt_gatt_init+0xa4>)
   12d3e:	e8d3 1fef 	ldaex	r1, [r3]
   12d42:	2900      	cmp	r1, #0
   12d44:	d103      	bne.n	12d4e <bt_gatt_init+0x2a>
   12d46:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12d4a:	2800      	cmp	r0, #0
   12d4c:	d1f7      	bne.n	12d3e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   12d4e:	d034      	beq.n	12dba <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12d50:	4c1e      	ldr	r4, [pc, #120]	; (12dcc <bt_gatt_init+0xa8>)
   12d52:	2230      	movs	r2, #48	; 0x30
   12d54:	2100      	movs	r1, #0
   12d56:	4620      	mov	r0, r4
   12d58:	f007 ff69 	bl	1ac2e <memset>
   12d5c:	4b1c      	ldr	r3, [pc, #112]	; (12dd0 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12d5e:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12d60:	6063      	str	r3, [r4, #4]
   12d62:	4c1c      	ldr	r4, [pc, #112]	; (12dd4 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12d64:	2300      	movs	r3, #0
   12d66:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12d6a:	481b      	ldr	r0, [pc, #108]	; (12dd8 <bt_gatt_init+0xb4>)
   12d6c:	f005 fd76 	bl	1885c <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12d70:	2100      	movs	r1, #0
   12d72:	f104 0020 	add.w	r0, r4, #32
   12d76:	2230      	movs	r2, #48	; 0x30
   12d78:	f007 ff59 	bl	1ac2e <memset>
   12d7c:	4b17      	ldr	r3, [pc, #92]	; (12ddc <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12d7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   12d82:	6263      	str	r3, [r4, #36]	; 0x24
   12d84:	2102      	movs	r1, #2
}
   12d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12d8a:	f008 bf0c 	b.w	1bba6 <atomic_or>
		last_static_handle += svc->attr_count;
   12d8e:	4a14      	ldr	r2, [pc, #80]	; (12de0 <bt_gatt_init+0xbc>)
   12d90:	6863      	ldr	r3, [r4, #4]
   12d92:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12d94:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   12d96:	440b      	add	r3, r1
   12d98:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12d9a:	42ac      	cmp	r4, r5
   12d9c:	d90a      	bls.n	12db4 <bt_gatt_init+0x90>
   12d9e:	4631      	mov	r1, r6
   12da0:	4810      	ldr	r0, [pc, #64]	; (12de4 <bt_gatt_init+0xc0>)
   12da2:	f44f 6283 	mov.w	r2, #1048	; 0x418
   12da6:	f006 fcb7 	bl	19718 <printk>
   12daa:	f44f 6183 	mov.w	r1, #1048	; 0x418
   12dae:	4630      	mov	r0, r6
   12db0:	f006 ff58 	bl	19c64 <assert_post_action>
   12db4:	42ac      	cmp	r4, r5
   12db6:	d3ea      	bcc.n	12d8e <bt_gatt_init+0x6a>
   12db8:	e7ca      	b.n	12d50 <bt_gatt_init+0x2c>
   12dba:	4c0b      	ldr	r4, [pc, #44]	; (12de8 <bt_gatt_init+0xc4>)
   12dbc:	4d0b      	ldr	r5, [pc, #44]	; (12dec <bt_gatt_init+0xc8>)
   12dbe:	4e0c      	ldr	r6, [pc, #48]	; (12df0 <bt_gatt_init+0xcc>)
   12dc0:	e7eb      	b.n	12d9a <bt_gatt_init+0x76>
}
   12dc2:	bd70      	pop	{r4, r5, r6, pc}
   12dc4:	2000aa2c 	.word	0x2000aa2c
   12dc8:	2000ab20 	.word	0x2000ab20
   12dcc:	20009a48 	.word	0x20009a48
   12dd0:	0001bf61 	.word	0x0001bf61
   12dd4:	20009a78 	.word	0x20009a78
   12dd8:	2000a3a0 	.word	0x2000a3a0
   12ddc:	000133b5 	.word	0x000133b5
   12de0:	2000be1c 	.word	0x2000be1c
   12de4:	0001e6bc 	.word	0x0001e6bc
   12de8:	0001d43c 	.word	0x0001d43c
   12dec:	0001d46c 	.word	0x0001d46c
   12df0:	00020945 	.word	0x00020945

00012df4 <bt_gatt_attr_get_handle>:
{
   12df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   12df8:	4604      	mov	r4, r0
   12dfa:	b910      	cbnz	r0, 12e02 <bt_gatt_attr_get_handle+0xe>
		return 0;
   12dfc:	2000      	movs	r0, #0
}
   12dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   12e02:	8a00      	ldrh	r0, [r0, #16]
   12e04:	2800      	cmp	r0, #0
   12e06:	d1fa      	bne.n	12dfe <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   12e08:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12e0c:	4d17      	ldr	r5, [pc, #92]	; (12e6c <bt_gatt_attr_get_handle+0x78>)
   12e0e:	4e18      	ldr	r6, [pc, #96]	; (12e70 <bt_gatt_attr_get_handle+0x7c>)
   12e10:	4f18      	ldr	r7, [pc, #96]	; (12e74 <bt_gatt_attr_get_handle+0x80>)
   12e12:	42b5      	cmp	r5, r6
   12e14:	d90a      	bls.n	12e2c <bt_gatt_attr_get_handle+0x38>
   12e16:	4639      	mov	r1, r7
   12e18:	4817      	ldr	r0, [pc, #92]	; (12e78 <bt_gatt_attr_get_handle+0x84>)
   12e1a:	f240 522d 	movw	r2, #1325	; 0x52d
   12e1e:	f006 fc7b 	bl	19718 <printk>
   12e22:	f240 512d 	movw	r1, #1325	; 0x52d
   12e26:	4638      	mov	r0, r7
   12e28:	f006 ff1c 	bl	19c64 <assert_post_action>
   12e2c:	42b5      	cmp	r5, r6
   12e2e:	d2e5      	bcs.n	12dfc <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12e30:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   12e34:	4564      	cmp	r4, ip
   12e36:	d306      	bcc.n	12e46 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12e38:	f04f 0e14 	mov.w	lr, #20
   12e3c:	fb0e c301 	mla	r3, lr, r1, ip
   12e40:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   12e42:	429c      	cmp	r4, r3
   12e44:	d910      	bls.n	12e68 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   12e46:	eb08 0001 	add.w	r0, r8, r1
   12e4a:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12e4c:	4680      	mov	r8, r0
   12e4e:	3508      	adds	r5, #8
   12e50:	e7df      	b.n	12e12 <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   12e52:	fb0e c302 	mla	r3, lr, r2, ip
   12e56:	429c      	cmp	r4, r3
   12e58:	d0d1      	beq.n	12dfe <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   12e5a:	3201      	adds	r2, #1
   12e5c:	eb08 0302 	add.w	r3, r8, r2
   12e60:	4291      	cmp	r1, r2
   12e62:	b298      	uxth	r0, r3
   12e64:	d1f5      	bne.n	12e52 <bt_gatt_attr_get_handle+0x5e>
   12e66:	e7f1      	b.n	12e4c <bt_gatt_attr_get_handle+0x58>
   12e68:	2200      	movs	r2, #0
   12e6a:	e7f7      	b.n	12e5c <bt_gatt_attr_get_handle+0x68>
   12e6c:	0001d43c 	.word	0x0001d43c
   12e70:	0001d46c 	.word	0x0001d46c
   12e74:	00020945 	.word	0x00020945
   12e78:	0001e6bc 	.word	0x0001e6bc

00012e7c <bt_gatt_foreach_attr_type>:
{
   12e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e80:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   12e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   12e86:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   12e8a:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   12e8c:	2d00      	cmp	r5, #0
   12e8e:	bf08      	it	eq
   12e90:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   12e92:	4b2b      	ldr	r3, [pc, #172]	; (12f40 <bt_gatt_foreach_attr_type+0xc4>)
{
   12e94:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   12e96:	881b      	ldrh	r3, [r3, #0]
{
   12e98:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   12e9a:	4283      	cmp	r3, r0
   12e9c:	d24b      	bcs.n	12f36 <bt_gatt_foreach_attr_type+0xba>
}
   12e9e:	b003      	add	sp, #12
   12ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   12ea4:	6873      	ldr	r3, [r6, #4]
   12ea6:	4423      	add	r3, r4
   12ea8:	42bb      	cmp	r3, r7
   12eaa:	d241      	bcs.n	12f30 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   12eac:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12eae:	3608      	adds	r6, #8
   12eb0:	4b24      	ldr	r3, [pc, #144]	; (12f44 <bt_gatt_foreach_attr_type+0xc8>)
   12eb2:	429e      	cmp	r6, r3
   12eb4:	d90a      	bls.n	12ecc <bt_gatt_foreach_attr_type+0x50>
   12eb6:	4659      	mov	r1, fp
   12eb8:	4823      	ldr	r0, [pc, #140]	; (12f48 <bt_gatt_foreach_attr_type+0xcc>)
   12eba:	f240 52f1 	movw	r2, #1521	; 0x5f1
   12ebe:	f006 fc2b 	bl	19718 <printk>
   12ec2:	f240 51f1 	movw	r1, #1521	; 0x5f1
   12ec6:	4658      	mov	r0, fp
   12ec8:	f006 fecc 	bl	19c64 <assert_post_action>
   12ecc:	4b1d      	ldr	r3, [pc, #116]	; (12f44 <bt_gatt_foreach_attr_type+0xc8>)
   12ece:	429e      	cmp	r6, r3
   12ed0:	d3e8      	bcc.n	12ea4 <bt_gatt_foreach_attr_type+0x28>
   12ed2:	e7e4      	b.n	12e9e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12ed4:	4640      	mov	r0, r8
   12ed6:	5889      	ldr	r1, [r1, r2]
   12ed8:	9301      	str	r3, [sp, #4]
   12eda:	f007 fef2 	bl	1acc2 <bt_uuid_cmp>
   12ede:	9b01      	ldr	r3, [sp, #4]
   12ee0:	b198      	cbz	r0, 12f0a <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12ee2:	3401      	adds	r4, #1
   12ee4:	f10a 0a01 	add.w	sl, sl, #1
   12ee8:	b2a4      	uxth	r4, r4
   12eea:	6873      	ldr	r3, [r6, #4]
   12eec:	4553      	cmp	r3, sl
   12eee:	d9de      	bls.n	12eae <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   12ef0:	9b00      	ldr	r3, [sp, #0]
   12ef2:	429c      	cmp	r4, r3
   12ef4:	d8d3      	bhi.n	12e9e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   12ef6:	42bc      	cmp	r4, r7
   12ef8:	d3f3      	bcc.n	12ee2 <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12efa:	2314      	movs	r3, #20
   12efc:	fb03 f20a 	mul.w	r2, r3, sl
   12f00:	6831      	ldr	r1, [r6, #0]
   12f02:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12f04:	f1b8 0f00 	cmp.w	r8, #0
   12f08:	d1e4      	bne.n	12ed4 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   12f0a:	f1b9 0f00 	cmp.w	r9, #0
   12f0e:	d10b      	bne.n	12f28 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   12f10:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   12f12:	4618      	mov	r0, r3
	*num_matches -= 1;
   12f14:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   12f16:	4621      	mov	r1, r4
   12f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f1c:	4798      	blx	r3
	if (!*num_matches) {
   12f1e:	2d00      	cmp	r5, #0
   12f20:	d0bd      	beq.n	12e9e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12f22:	2800      	cmp	r0, #0
   12f24:	d1dd      	bne.n	12ee2 <bt_gatt_foreach_attr_type+0x66>
   12f26:	e7ba      	b.n	12e9e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   12f28:	68da      	ldr	r2, [r3, #12]
   12f2a:	4591      	cmp	r9, r2
   12f2c:	d1d9      	bne.n	12ee2 <bt_gatt_foreach_attr_type+0x66>
   12f2e:	e7ef      	b.n	12f10 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12f30:	f04f 0a00 	mov.w	sl, #0
   12f34:	e7d9      	b.n	12eea <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   12f36:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12f38:	4e04      	ldr	r6, [pc, #16]	; (12f4c <bt_gatt_foreach_attr_type+0xd0>)
   12f3a:	f8df b014 	ldr.w	fp, [pc, #20]	; 12f50 <bt_gatt_foreach_attr_type+0xd4>
   12f3e:	e7b7      	b.n	12eb0 <bt_gatt_foreach_attr_type+0x34>
   12f40:	2000be1c 	.word	0x2000be1c
   12f44:	0001d46c 	.word	0x0001d46c
   12f48:	0001e6bc 	.word	0x0001e6bc
   12f4c:	0001d43c 	.word	0x0001d43c
   12f50:	00020945 	.word	0x00020945

00012f54 <db_hash_gen>:
	uint8_t key[16] = {};
   12f54:	2300      	movs	r3, #0
{
   12f56:	b530      	push	{r4, r5, lr}
   12f58:	b0c9      	sub	sp, #292	; 0x124
   12f5a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12f5c:	4669      	mov	r1, sp
   12f5e:	aa1c      	add	r2, sp, #112	; 0x70
   12f60:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   12f62:	e9cd 3300 	strd	r3, r3, [sp]
   12f66:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12f6a:	f007 fa3e 	bl	1a3ea <tc_cmac_setup>
   12f6e:	b928      	cbnz	r0, 12f7c <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   12f70:	2145      	movs	r1, #69	; 0x45
   12f72:	4812      	ldr	r0, [pc, #72]	; (12fbc <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   12f74:	f006 fbd0 	bl	19718 <printk>
}
   12f78:	b049      	add	sp, #292	; 0x124
   12f7a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   12f7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12f80:	2001      	movs	r0, #1
   12f82:	4a0f      	ldr	r2, [pc, #60]	; (12fc0 <db_hash_gen+0x6c>)
   12f84:	ab04      	add	r3, sp, #16
   12f86:	f008 ffe0 	bl	1bf4a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   12f8a:	480e      	ldr	r0, [pc, #56]	; (12fc4 <db_hash_gen+0x70>)
   12f8c:	a904      	add	r1, sp, #16
   12f8e:	f007 fac2 	bl	1a516 <tc_cmac_final>
   12f92:	b910      	cbnz	r0, 12f9a <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   12f94:	2145      	movs	r1, #69	; 0x45
   12f96:	480c      	ldr	r0, [pc, #48]	; (12fc8 <db_hash_gen+0x74>)
   12f98:	e7ec      	b.n	12f74 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   12f9a:	2208      	movs	r2, #8
   12f9c:	4b09      	ldr	r3, [pc, #36]	; (12fc4 <db_hash_gen+0x70>)
   12f9e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   12fa2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12fa4:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   12fa8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12faa:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   12fae:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   12fb0:	d1f7      	bne.n	12fa2 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   12fb2:	2c00      	cmp	r4, #0
   12fb4:	d0e0      	beq.n	12f78 <db_hash_gen+0x24>
		db_hash_store();
   12fb6:	f7ff f9b1 	bl	1231c <db_hash_store>
   12fba:	e7dd      	b.n	12f78 <db_hash_gen+0x24>
   12fbc:	00020975 	.word	0x00020975
   12fc0:	0001ba61 	.word	0x0001ba61
   12fc4:	2000c59f 	.word	0x2000c59f
   12fc8:	00020993 	.word	0x00020993

00012fcc <db_hash_commit>:
{
   12fcc:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   12fce:	4821      	ldr	r0, [pc, #132]	; (13054 <db_hash_commit+0x88>)
   12fd0:	f005 fcb4 	bl	1893c <k_delayed_work_cancel>
	if (!err) {
   12fd4:	b908      	cbnz	r0, 12fda <db_hash_commit+0xe>
		db_hash_gen(false);
   12fd6:	f7ff ffbd 	bl	12f54 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   12fda:	2210      	movs	r2, #16
   12fdc:	491e      	ldr	r1, [pc, #120]	; (13058 <db_hash_commit+0x8c>)
   12fde:	481f      	ldr	r0, [pc, #124]	; (1305c <db_hash_commit+0x90>)
   12fe0:	f007 fde9 	bl	1abb6 <memcmp>
   12fe4:	b968      	cbnz	r0, 13002 <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   12fe6:	481e      	ldr	r0, [pc, #120]	; (13060 <db_hash_commit+0x94>)
   12fe8:	f005 fca8 	bl	1893c <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12fec:	4b1d      	ldr	r3, [pc, #116]	; (13064 <db_hash_commit+0x98>)
   12fee:	e8d3 2fef 	ldaex	r2, [r3]
   12ff2:	f022 0201 	bic.w	r2, r2, #1
   12ff6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12ffa:	2900      	cmp	r1, #0
   12ffc:	d1f7      	bne.n	12fee <db_hash_commit+0x22>
}
   12ffe:	2000      	movs	r0, #0
   13000:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13002:	4c19      	ldr	r4, [pc, #100]	; (13068 <db_hash_commit+0x9c>)
   13004:	2101      	movs	r1, #1
   13006:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1300a:	f008 fdcc 	bl	1bba6 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1300e:	07c2      	lsls	r2, r0, #31
   13010:	d410      	bmi.n	13034 <db_hash_commit+0x68>
		gatt_sc.start = start;
   13012:	4b16      	ldr	r3, [pc, #88]	; (1306c <db_hash_commit+0xa0>)
   13014:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13016:	4813      	ldr	r0, [pc, #76]	; (13064 <db_hash_commit+0x98>)
   13018:	f008 fdd0 	bl	1bbbc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1301c:	0783      	lsls	r3, r0, #30
   1301e:	d406      	bmi.n	1302e <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13020:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13024:	2300      	movs	r3, #0
   13026:	490e      	ldr	r1, [pc, #56]	; (13060 <db_hash_commit+0x94>)
   13028:	4811      	ldr	r0, [pc, #68]	; (13070 <db_hash_commit+0xa4>)
   1302a:	f005 fc17 	bl	1885c <k_delayed_work_submit_to_queue>
	db_hash_store();
   1302e:	f7ff f975 	bl	1231c <db_hash_store>
	return 0;
   13032:	e7e4      	b.n	12ffe <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   13034:	8b23      	ldrh	r3, [r4, #24]
   13036:	8b62      	ldrh	r2, [r4, #26]
   13038:	2b01      	cmp	r3, #1
   1303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1303e:	d805      	bhi.n	1304c <db_hash_commit+0x80>
   13040:	429a      	cmp	r2, r3
   13042:	d0f4      	beq.n	1302e <db_hash_commit+0x62>
		*end = new_end;
   13044:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13048:	8363      	strh	r3, [r4, #26]
   1304a:	e7e4      	b.n	13016 <db_hash_commit+0x4a>
	if (*end < new_end) {
   1304c:	429a      	cmp	r2, r3
		*start = new_start;
   1304e:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13050:	d0e1      	beq.n	13016 <db_hash_commit+0x4a>
   13052:	e7f7      	b.n	13044 <db_hash_commit+0x78>
   13054:	20009a48 	.word	0x20009a48
   13058:	2000c59f 	.word	0x2000c59f
   1305c:	2000c5af 	.word	0x2000c5af
   13060:	20009a98 	.word	0x20009a98
   13064:	20009ac8 	.word	0x20009ac8
   13068:	20009a78 	.word	0x20009a78
   1306c:	ffff0001 	.word	0xffff0001
   13070:	2000a3a0 	.word	0x2000a3a0

00013074 <ccc_set_direct>:
{
   13074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13078:	b0b9      	sub	sp, #228	; 0xe4
   1307a:	4688      	mov	r8, r1
   1307c:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1307e:	492c      	ldr	r1, [pc, #176]	; (13130 <ccc_set_direct+0xbc>)
   13080:	466a      	mov	r2, sp
   13082:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   13084:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13086:	f006 fe43 	bl	19d10 <settings_name_steq>
   1308a:	b948      	cbnz	r0, 130a0 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   1308c:	2145      	movs	r1, #69	; 0x45
   1308e:	4829      	ldr	r0, [pc, #164]	; (13134 <ccc_set_direct+0xc0>)
   13090:	f006 fb42 	bl	19718 <printk>
   13094:	f06f 0515 	mvn.w	r5, #21
}
   13098:	4628      	mov	r0, r5
   1309a:	b039      	add	sp, #228	; 0xe4
   1309c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   130a0:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   130a2:	a901      	add	r1, sp, #4
   130a4:	4620      	mov	r0, r4
   130a6:	f006 fe56 	bl	19d56 <settings_name_next>
		if (!name) {
   130aa:	b93c      	cbnz	r4, 130bc <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   130ac:	2145      	movs	r1, #69	; 0x45
   130ae:	4822      	ldr	r0, [pc, #136]	; (13138 <ccc_set_direct+0xc4>)
   130b0:	f006 fb32 	bl	19718 <printk>
			return -EINVAL;
   130b4:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   130b8:	4625      	mov	r5, r4
   130ba:	e7ed      	b.n	13098 <ccc_set_direct+0x24>
		} else if (!next) {
   130bc:	9801      	ldr	r0, [sp, #4]
   130be:	b978      	cbnz	r0, 130e0 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   130c0:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   130c4:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   130c8:	4649      	mov	r1, r9
   130ca:	4620      	mov	r0, r4
   130cc:	f007 fdd5 	bl	1ac7a <bt_settings_decode_key>
		if (err) {
   130d0:	4605      	mov	r5, r0
   130d2:	b150      	cbz	r0, 130ea <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   130d4:	4622      	mov	r2, r4
   130d6:	2145      	movs	r1, #69	; 0x45
   130d8:	4818      	ldr	r0, [pc, #96]	; (1313c <ccc_set_direct+0xc8>)
   130da:	f006 fb1d 	bl	19718 <printk>
   130de:	e7e9      	b.n	130b4 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   130e0:	220a      	movs	r2, #10
   130e2:	2100      	movs	r1, #0
   130e4:	f007 fc8a 	bl	1a9fc <strtol>
   130e8:	e7ea      	b.n	130c0 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   130ea:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   130ee:	f1b8 0f00 	cmp.w	r8, #0
   130f2:	d019      	beq.n	13128 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   130f4:	f10d 0820 	add.w	r8, sp, #32
   130f8:	22c0      	movs	r2, #192	; 0xc0
   130fa:	4641      	mov	r1, r8
   130fc:	4638      	mov	r0, r7
   130fe:	47b0      	blx	r6
			if (len < 0) {
   13100:	1e04      	subs	r4, r0, #0
   13102:	da05      	bge.n	13110 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   13104:	4622      	mov	r2, r4
   13106:	2145      	movs	r1, #69	; 0x45
   13108:	480d      	ldr	r0, [pc, #52]	; (13140 <ccc_set_direct+0xcc>)
   1310a:	f006 fb05 	bl	19718 <printk>
				return len;
   1310e:	e7d3      	b.n	130b8 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   13110:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   13112:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   13116:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   13118:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1311c:	2001      	movs	r0, #1
   1311e:	4a09      	ldr	r2, [pc, #36]	; (13144 <ccc_set_direct+0xd0>)
   13120:	ab04      	add	r3, sp, #16
   13122:	f008 ff12 	bl	1bf4a <bt_gatt_foreach_attr>
	return 0;
   13126:	e7b7      	b.n	13098 <ccc_set_direct+0x24>
			load.count = 0;
   13128:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1312c:	e7f4      	b.n	13118 <ccc_set_direct+0xa4>
   1312e:	bf00      	nop
   13130:	000209b1 	.word	0x000209b1
   13134:	000209b8 	.word	0x000209b8
   13138:	0001f729 	.word	0x0001f729
   1313c:	00020820 	.word	0x00020820
   13140:	00020732 	.word	0x00020732
   13144:	00012879 	.word	0x00012879

00013148 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13148:	2300      	movs	r3, #0
{
   1314a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1314c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1314e:	f7ff fe51 	bl	12df4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   13152:	1c41      	adds	r1, r0, #1
   13154:	b289      	uxth	r1, r1
   13156:	4608      	mov	r0, r1
   13158:	4a03      	ldr	r2, [pc, #12]	; (13168 <bt_gatt_attr_next+0x20>)
   1315a:	ab01      	add	r3, sp, #4
   1315c:	f008 fef5 	bl	1bf4a <bt_gatt_foreach_attr>
}
   13160:	9801      	ldr	r0, [sp, #4]
   13162:	b003      	add	sp, #12
   13164:	f85d fb04 	ldr.w	pc, [sp], #4
   13168:	0001b9f9 	.word	0x0001b9f9

0001316c <bt_gatt_notify_cb>:
{
   1316c:	b530      	push	{r4, r5, lr}
   1316e:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   13170:	460d      	mov	r5, r1
{
   13172:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13174:	b951      	cbnz	r1, 1318c <bt_gatt_notify_cb+0x20>
   13176:	4940      	ldr	r1, [pc, #256]	; (13278 <bt_gatt_notify_cb+0x10c>)
   13178:	4840      	ldr	r0, [pc, #256]	; (1327c <bt_gatt_notify_cb+0x110>)
   1317a:	f640 023d 	movw	r2, #2109	; 0x83d
   1317e:	f006 facb 	bl	19718 <printk>
   13182:	f640 013d 	movw	r1, #2109	; 0x83d
   13186:	483c      	ldr	r0, [pc, #240]	; (13278 <bt_gatt_notify_cb+0x10c>)
   13188:	f006 fd6c 	bl	19c64 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1318c:	686b      	ldr	r3, [r5, #4]
   1318e:	b953      	cbnz	r3, 131a6 <bt_gatt_notify_cb+0x3a>
   13190:	4939      	ldr	r1, [pc, #228]	; (13278 <bt_gatt_notify_cb+0x10c>)
   13192:	483a      	ldr	r0, [pc, #232]	; (1327c <bt_gatt_notify_cb+0x110>)
   13194:	f640 023e 	movw	r2, #2110	; 0x83e
   13198:	f006 fabe 	bl	19718 <printk>
   1319c:	f640 013e 	movw	r1, #2110	; 0x83e
   131a0:	4835      	ldr	r0, [pc, #212]	; (13278 <bt_gatt_notify_cb+0x10c>)
   131a2:	f006 fd5f 	bl	19c64 <assert_post_action>
   131a6:	4836      	ldr	r0, [pc, #216]	; (13280 <bt_gatt_notify_cb+0x114>)
   131a8:	f008 fd08 	bl	1bbbc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   131ac:	0782      	lsls	r2, r0, #30
   131ae:	d55d      	bpl.n	1326c <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   131b0:	6868      	ldr	r0, [r5, #4]
   131b2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   131b4:	b114      	cbz	r4, 131bc <bt_gatt_notify_cb+0x50>
   131b6:	7aa3      	ldrb	r3, [r4, #10]
   131b8:	2b07      	cmp	r3, #7
   131ba:	d15a      	bne.n	13272 <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   131bc:	f7ff fe1a 	bl	12df4 <bt_gatt_attr_get_handle>
   131c0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   131c4:	b918      	cbnz	r0, 131ce <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   131c6:	f06f 0001 	mvn.w	r0, #1
}
   131ca:	b00b      	add	sp, #44	; 0x2c
   131cc:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   131ce:	682a      	ldr	r2, [r5, #0]
   131d0:	b9aa      	cbnz	r2, 131fe <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   131d2:	9b05      	ldr	r3, [sp, #20]
   131d4:	a904      	add	r1, sp, #16
   131d6:	6818      	ldr	r0, [r3, #0]
   131d8:	2300      	movs	r3, #0
   131da:	f88d 3010 	strb.w	r3, [sp, #16]
   131de:	f642 0303 	movw	r3, #10243	; 0x2803
   131e2:	f8ad 3012 	strh.w	r3, [sp, #18]
   131e6:	f007 fd6c 	bl	1acc2 <bt_uuid_cmp>
   131ea:	b1c0      	cbz	r0, 1321e <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   131ec:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   131f0:	b314      	cbz	r4, 13238 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   131f2:	4601      	mov	r1, r0
   131f4:	462a      	mov	r2, r5
   131f6:	4620      	mov	r0, r4
   131f8:	f7ff fbd6 	bl	129a8 <gatt_notify>
   131fc:	e7e5      	b.n	131ca <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   131fe:	a905      	add	r1, sp, #20
   13200:	9102      	str	r1, [sp, #8]
   13202:	4920      	ldr	r1, [pc, #128]	; (13284 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   13204:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13206:	9101      	str	r1, [sp, #4]
   13208:	2101      	movs	r1, #1
   1320a:	9100      	str	r1, [sp, #0]
   1320c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13210:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13212:	f7ff fe33 	bl	12e7c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13216:	9b05      	ldr	r3, [sp, #20]
   13218:	2b00      	cmp	r3, #0
   1321a:	d1da      	bne.n	131d2 <bt_gatt_notify_cb+0x66>
   1321c:	e7d3      	b.n	131c6 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1321e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   13220:	68c3      	ldr	r3, [r0, #12]
   13222:	799b      	ldrb	r3, [r3, #6]
   13224:	06db      	lsls	r3, r3, #27
   13226:	d402      	bmi.n	1322e <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   13228:	f06f 0015 	mvn.w	r0, #21
   1322c:	e7cd      	b.n	131ca <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1322e:	f008 fe3e 	bl	1beae <bt_gatt_attr_value_handle>
   13232:	f8ad 0018 	strh.w	r0, [sp, #24]
   13236:	e7d9      	b.n	131ec <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   13238:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1323c:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   13240:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   13242:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13244:	f8ad 2012 	strh.w	r2, [sp, #18]
   13248:	aa05      	add	r2, sp, #20
   1324a:	9202      	str	r2, [sp, #8]
   1324c:	4a0e      	ldr	r2, [pc, #56]	; (13288 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   1324e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13252:	e9cd 3200 	strd	r3, r2, [sp]
   13256:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1325a:	4623      	mov	r3, r4
   1325c:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1325e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13260:	f88d 4010 	strb.w	r4, [sp, #16]
   13264:	f7ff fe0a 	bl	12e7c <bt_gatt_foreach_attr_type>
	return data.err;
   13268:	9807      	ldr	r0, [sp, #28]
   1326a:	e7ae      	b.n	131ca <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   1326c:	f06f 000a 	mvn.w	r0, #10
   13270:	e7ab      	b.n	131ca <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   13272:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13276:	e7a8      	b.n	131ca <bt_gatt_notify_cb+0x5e>
   13278:	00020945 	.word	0x00020945
   1327c:	0001e6bc 	.word	0x0001e6bc
   13280:	20008094 	.word	0x20008094
   13284:	0001ba55 	.word	0x0001ba55
   13288:	00012a09 	.word	0x00012a09

0001328c <bt_gatt_indicate>:
{
   1328c:	b530      	push	{r4, r5, lr}
   1328e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   13290:	460c      	mov	r4, r1
{
   13292:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13294:	b951      	cbnz	r1, 132ac <bt_gatt_indicate+0x20>
   13296:	4942      	ldr	r1, [pc, #264]	; (133a0 <bt_gatt_indicate+0x114>)
   13298:	4842      	ldr	r0, [pc, #264]	; (133a4 <bt_gatt_indicate+0x118>)
   1329a:	f640 0289 	movw	r2, #2185	; 0x889
   1329e:	f006 fa3b 	bl	19718 <printk>
   132a2:	f640 0189 	movw	r1, #2185	; 0x889
   132a6:	483e      	ldr	r0, [pc, #248]	; (133a0 <bt_gatt_indicate+0x114>)
   132a8:	f006 fcdc 	bl	19c64 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   132ac:	6863      	ldr	r3, [r4, #4]
   132ae:	b953      	cbnz	r3, 132c6 <bt_gatt_indicate+0x3a>
   132b0:	493b      	ldr	r1, [pc, #236]	; (133a0 <bt_gatt_indicate+0x114>)
   132b2:	483c      	ldr	r0, [pc, #240]	; (133a4 <bt_gatt_indicate+0x118>)
   132b4:	f640 028a 	movw	r2, #2186	; 0x88a
   132b8:	f006 fa2e 	bl	19718 <printk>
   132bc:	f640 018a 	movw	r1, #2186	; 0x88a
   132c0:	4837      	ldr	r0, [pc, #220]	; (133a0 <bt_gatt_indicate+0x114>)
   132c2:	f006 fccf 	bl	19c64 <assert_post_action>
   132c6:	4838      	ldr	r0, [pc, #224]	; (133a8 <bt_gatt_indicate+0x11c>)
   132c8:	f008 fc78 	bl	1bbbc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   132cc:	0782      	lsls	r2, r0, #30
   132ce:	d561      	bpl.n	13394 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   132d0:	6860      	ldr	r0, [r4, #4]
   132d2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   132d4:	b115      	cbz	r5, 132dc <bt_gatt_indicate+0x50>
   132d6:	7aab      	ldrb	r3, [r5, #10]
   132d8:	2b07      	cmp	r3, #7
   132da:	d15e      	bne.n	1339a <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   132dc:	f7ff fd8a 	bl	12df4 <bt_gatt_attr_get_handle>
   132e0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   132e4:	b918      	cbnz	r0, 132ee <bt_gatt_indicate+0x62>
		return -ENOENT;
   132e6:	f06f 0001 	mvn.w	r0, #1
}
   132ea:	b00b      	add	sp, #44	; 0x2c
   132ec:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   132ee:	6822      	ldr	r2, [r4, #0]
   132f0:	b9ba      	cbnz	r2, 13322 <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   132f2:	9b05      	ldr	r3, [sp, #20]
   132f4:	a904      	add	r1, sp, #16
   132f6:	6818      	ldr	r0, [r3, #0]
   132f8:	2300      	movs	r3, #0
   132fa:	f88d 3010 	strb.w	r3, [sp, #16]
   132fe:	f642 0303 	movw	r3, #10243	; 0x2803
   13302:	f8ad 3012 	strh.w	r3, [sp, #18]
   13306:	f007 fcdc 	bl	1acc2 <bt_uuid_cmp>
   1330a:	b1d0      	cbz	r0, 13342 <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   1330c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13310:	b325      	cbz	r5, 1335c <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   13312:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13314:	4601      	mov	r1, r0
   13316:	4622      	mov	r2, r4
   13318:	4628      	mov	r0, r5
		params->_ref = 1;
   1331a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1331c:	f7ff fb0e 	bl	1293c <gatt_indicate>
   13320:	e7e3      	b.n	132ea <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13322:	a905      	add	r1, sp, #20
   13324:	9102      	str	r1, [sp, #8]
   13326:	4921      	ldr	r1, [pc, #132]	; (133ac <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   13328:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1332a:	9101      	str	r1, [sp, #4]
   1332c:	2101      	movs	r1, #1
   1332e:	9100      	str	r1, [sp, #0]
   13330:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13334:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13336:	f7ff fda1 	bl	12e7c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1333a:	9b05      	ldr	r3, [sp, #20]
   1333c:	2b00      	cmp	r3, #0
   1333e:	d1d8      	bne.n	132f2 <bt_gatt_indicate+0x66>
   13340:	e7d1      	b.n	132e6 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13342:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   13344:	68c3      	ldr	r3, [r0, #12]
   13346:	799b      	ldrb	r3, [r3, #6]
   13348:	069b      	lsls	r3, r3, #26
   1334a:	d402      	bmi.n	13352 <bt_gatt_indicate+0xc6>
			return -EINVAL;
   1334c:	f06f 0015 	mvn.w	r0, #21
   13350:	e7cb      	b.n	132ea <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13352:	f008 fdac 	bl	1beae <bt_gatt_attr_value_handle>
   13356:	f8ad 0018 	strh.w	r0, [sp, #24]
   1335a:	e7d7      	b.n	1330c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1335c:	f06f 0338 	mvn.w	r3, #56	; 0x38
   13360:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   13362:	2302      	movs	r3, #2
   13364:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13368:	f642 1302 	movw	r3, #10498	; 0x2902
   1336c:	f8ad 3012 	strh.w	r3, [sp, #18]
   13370:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   13372:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13374:	9302      	str	r3, [sp, #8]
   13376:	4b0e      	ldr	r3, [pc, #56]	; (133b0 <bt_gatt_indicate+0x124>)
   13378:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1337c:	9301      	str	r3, [sp, #4]
   1337e:	2301      	movs	r3, #1
   13380:	aa04      	add	r2, sp, #16
   13382:	9300      	str	r3, [sp, #0]
   13384:	462b      	mov	r3, r5
	data.ind_params = params;
   13386:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13388:	f88d 5010 	strb.w	r5, [sp, #16]
   1338c:	f7ff fd76 	bl	12e7c <bt_gatt_foreach_attr_type>
	return data.err;
   13390:	9807      	ldr	r0, [sp, #28]
   13392:	e7aa      	b.n	132ea <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   13394:	f06f 000a 	mvn.w	r0, #10
   13398:	e7a7      	b.n	132ea <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   1339a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1339e:	e7a4      	b.n	132ea <bt_gatt_indicate+0x5e>
   133a0:	00020945 	.word	0x00020945
   133a4:	0001e6bc 	.word	0x0001e6bc
   133a8:	20008094 	.word	0x20008094
   133ac:	0001ba55 	.word	0x0001ba55
   133b0:	00012a09 	.word	0x00012a09

000133b4 <sc_process>:
{
   133b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   133b6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   133ba:	4604      	mov	r4, r0
   133bc:	4628      	mov	r0, r5
   133be:	f008 fbfd 	bl	1bbbc <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   133c2:	0783      	lsls	r3, r0, #30
   133c4:	d50a      	bpl.n	133dc <sc_process+0x28>
   133c6:	491b      	ldr	r1, [pc, #108]	; (13434 <sc_process+0x80>)
   133c8:	481b      	ldr	r0, [pc, #108]	; (13438 <sc_process+0x84>)
   133ca:	f240 32ae 	movw	r2, #942	; 0x3ae
   133ce:	f006 f9a3 	bl	19718 <printk>
   133d2:	f240 31ae 	movw	r1, #942	; 0x3ae
   133d6:	4817      	ldr	r0, [pc, #92]	; (13434 <sc_process+0x80>)
   133d8:	f006 fc44 	bl	19c64 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   133dc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   133e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   133e4:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   133e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133ec:	e8d5 3fef 	ldaex	r3, [r5]
   133f0:	f023 0301 	bic.w	r3, r3, #1
   133f4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   133f8:	2a00      	cmp	r2, #0
   133fa:	d1f7      	bne.n	133ec <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   133fc:	4b0f      	ldr	r3, [pc, #60]	; (1343c <sc_process+0x88>)
	sc->start = 0U;
   133fe:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13400:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   13404:	4b0e      	ldr	r3, [pc, #56]	; (13440 <sc_process+0x8c>)
	sc->start = 0U;
   13406:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1340a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1340e:	ab01      	add	r3, sp, #4
   13410:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   13414:	2304      	movs	r3, #4
	sc->end = 0U;
   13416:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1341a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1341e:	f1a4 0120 	sub.w	r1, r4, #32
   13422:	f7ff ff33 	bl	1328c <bt_gatt_indicate>
   13426:	b918      	cbnz	r0, 13430 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13428:	2102      	movs	r1, #2
   1342a:	4628      	mov	r0, r5
   1342c:	f008 fbbb 	bl	1bba6 <atomic_or>
}
   13430:	b003      	add	sp, #12
   13432:	bd30      	pop	{r4, r5, pc}
   13434:	00020945 	.word	0x00020945
   13438:	0001e6bc 	.word	0x0001e6bc
   1343c:	0001dc68 	.word	0x0001dc68
   13440:	00012cd5 	.word	0x00012cd5

00013444 <update_ccc>:
{
   13444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13448:	4b32      	ldr	r3, [pc, #200]	; (13514 <update_ccc+0xd0>)
   1344a:	6881      	ldr	r1, [r0, #8]
{
   1344c:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1344e:	4299      	cmp	r1, r3
   13450:	d15c      	bne.n	1350c <update_ccc+0xc8>
	ccc = attr->user_data;
   13452:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   13454:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   13456:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13518 <update_ccc+0xd4>
   1345a:	1c7d      	adds	r5, r7, #1
   1345c:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   13460:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   13464:	b193      	cbz	r3, 1348c <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13466:	462a      	mov	r2, r5
   13468:	4630      	mov	r0, r6
   1346a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1346e:	f007 fe0e 	bl	1b08e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   13472:	b158      	cbz	r0, 1348c <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13474:	222a      	movs	r2, #42	; 0x2a
   13476:	4621      	mov	r1, r4
   13478:	4630      	mov	r0, r6
   1347a:	f008 fd74 	bl	1bf66 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1347e:	2803      	cmp	r0, #3
   13480:	d108      	bne.n	13494 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   13482:	4622      	mov	r2, r4
   13484:	2157      	movs	r1, #87	; 0x57
   13486:	4648      	mov	r0, r9
   13488:	f006 f946 	bl	19718 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1348c:	350a      	adds	r5, #10
   1348e:	4545      	cmp	r5, r8
   13490:	d1e6      	bne.n	13460 <update_ccc+0x1c>
   13492:	e03b      	b.n	1350c <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   13494:	4639      	mov	r1, r7
   13496:	4620      	mov	r0, r4
   13498:	f008 fab1 	bl	1b9fe <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1349c:	4b1f      	ldr	r3, [pc, #124]	; (1351c <update_ccc+0xd8>)
   1349e:	429f      	cmp	r7, r3
   134a0:	d134      	bne.n	1350c <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   134a2:	7a30      	ldrb	r0, [r6, #8]
   134a4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   134a8:	f7fe ff70 	bl	1238c <find_sc_cfg>
	if (!cfg) {
   134ac:	4604      	mov	r4, r0
   134ae:	b368      	cbz	r0, 1350c <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   134b0:	8902      	ldrh	r2, [r0, #8]
   134b2:	8943      	ldrh	r3, [r0, #10]
   134b4:	ea52 0103 	orrs.w	r1, r2, r3
   134b8:	d028      	beq.n	1350c <update_ccc+0xc8>
	index = bt_conn_index(conn);
   134ba:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   134bc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   134c0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   134c4:	f7fd fca4 	bl	10e10 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   134c8:	2318      	movs	r3, #24
   134ca:	4915      	ldr	r1, [pc, #84]	; (13520 <update_ccc+0xdc>)
   134cc:	4a15      	ldr	r2, [pc, #84]	; (13524 <update_ccc+0xe0>)
   134ce:	fb03 1300 	mla	r3, r3, r0, r1
   134d2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   134d4:	4a14      	ldr	r2, [pc, #80]	; (13528 <update_ccc+0xe4>)
   134d6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   134d8:	aa01      	add	r2, sp, #4
   134da:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   134dc:	2204      	movs	r2, #4
   134de:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   134e0:	b203      	sxth	r3, r0
   134e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   134e6:	4630      	mov	r0, r6
   134e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   134ec:	f7ff fece 	bl	1328c <bt_gatt_indicate>
   134f0:	b118      	cbz	r0, 134fa <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   134f2:	2145      	movs	r1, #69	; 0x45
   134f4:	480d      	ldr	r0, [pc, #52]	; (1352c <update_ccc+0xe8>)
   134f6:	f006 f90f 	bl	19718 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   134fa:	2204      	movs	r2, #4
   134fc:	2100      	movs	r1, #0
   134fe:	f104 0008 	add.w	r0, r4, #8
   13502:	f007 fb94 	bl	1ac2e <memset>
		sc_store(cfg);
   13506:	4620      	mov	r0, r4
   13508:	f7ff f84a 	bl	125a0 <sc_store>
}
   1350c:	2001      	movs	r0, #1
   1350e:	b003      	add	sp, #12
   13510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13514:	00012441 	.word	0x00012441
   13518:	000209c9 	.word	0x000209c9
   1351c:	2000847c 	.word	0x2000847c
   13520:	2000aa30 	.word	0x2000aa30
   13524:	0001dc68 	.word	0x0001dc68
   13528:	0001be65 	.word	0x0001be65
   1352c:	000209e2 	.word	0x000209e2

00013530 <bt_gatt_is_subscribed>:
{
   13530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13532:	460c      	mov	r4, r1
   13534:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   13536:	4606      	mov	r6, r0
   13538:	b950      	cbnz	r0, 13550 <bt_gatt_is_subscribed+0x20>
   1353a:	4930      	ldr	r1, [pc, #192]	; (135fc <bt_gatt_is_subscribed+0xcc>)
   1353c:	4830      	ldr	r0, [pc, #192]	; (13600 <bt_gatt_is_subscribed+0xd0>)
   1353e:	f640 12b5 	movw	r2, #2485	; 0x9b5
   13542:	f006 f8e9 	bl	19718 <printk>
   13546:	f640 11b5 	movw	r1, #2485	; 0x9b5
   1354a:	482c      	ldr	r0, [pc, #176]	; (135fc <bt_gatt_is_subscribed+0xcc>)
   1354c:	f006 fb8a 	bl	19c64 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   13550:	b954      	cbnz	r4, 13568 <bt_gatt_is_subscribed+0x38>
   13552:	492a      	ldr	r1, [pc, #168]	; (135fc <bt_gatt_is_subscribed+0xcc>)
   13554:	482a      	ldr	r0, [pc, #168]	; (13600 <bt_gatt_is_subscribed+0xd0>)
   13556:	f640 12b6 	movw	r2, #2486	; 0x9b6
   1355a:	f006 f8dd 	bl	19718 <printk>
   1355e:	f640 11b6 	movw	r1, #2486	; 0x9b6
   13562:	4826      	ldr	r0, [pc, #152]	; (135fc <bt_gatt_is_subscribed+0xcc>)
   13564:	f006 fb7e 	bl	19c64 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13568:	7ab3      	ldrb	r3, [r6, #10]
   1356a:	2b07      	cmp	r3, #7
   1356c:	d130      	bne.n	135d0 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1356e:	2300      	movs	r3, #0
   13570:	f88d 3004 	strb.w	r3, [sp, #4]
   13574:	f642 0303 	movw	r3, #10243	; 0x2803
   13578:	6820      	ldr	r0, [r4, #0]
   1357a:	a901      	add	r1, sp, #4
   1357c:	f8ad 3006 	strh.w	r3, [sp, #6]
   13580:	f007 fb9f 	bl	1acc2 <bt_uuid_cmp>
   13584:	b940      	cbnz	r0, 13598 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   13586:	68e3      	ldr	r3, [r4, #12]
   13588:	799b      	ldrb	r3, [r3, #6]
   1358a:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1358e:	d020      	beq.n	135d2 <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   13590:	4620      	mov	r0, r4
   13592:	f7ff fdd9 	bl	13148 <bt_gatt_attr_next>
   13596:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13598:	2300      	movs	r3, #0
   1359a:	6820      	ldr	r0, [r4, #0]
   1359c:	f88d 3004 	strb.w	r3, [sp, #4]
   135a0:	f642 1302 	movw	r3, #10498	; 0x2902
   135a4:	a901      	add	r1, sp, #4
   135a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   135aa:	f007 fb8a 	bl	1acc2 <bt_uuid_cmp>
   135ae:	b118      	cbz	r0, 135b8 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   135b0:	4620      	mov	r0, r4
   135b2:	f7ff fdc9 	bl	13148 <bt_gatt_attr_next>
   135b6:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   135b8:	2500      	movs	r5, #0
   135ba:	f642 1302 	movw	r3, #10498	; 0x2902
   135be:	6820      	ldr	r0, [r4, #0]
   135c0:	a901      	add	r1, sp, #4
   135c2:	f88d 5004 	strb.w	r5, [sp, #4]
   135c6:	f8ad 3006 	strh.w	r3, [sp, #6]
   135ca:	f007 fb7a 	bl	1acc2 <bt_uuid_cmp>
   135ce:	b110      	cbz	r0, 135d6 <bt_gatt_is_subscribed+0xa6>
		return false;
   135d0:	2000      	movs	r0, #0
}
   135d2:	b003      	add	sp, #12
   135d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   135d6:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   135d8:	1c6c      	adds	r4, r5, #1
   135da:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   135dc:	4622      	mov	r2, r4
   135de:	4630      	mov	r0, r6
   135e0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   135e4:	f007 fd53 	bl	1b08e <bt_conn_is_peer_addr_le>
   135e8:	b118      	cbz	r0, 135f2 <bt_gatt_is_subscribed+0xc2>
   135ea:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   135ee:	421f      	tst	r7, r3
   135f0:	d1ef      	bne.n	135d2 <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   135f2:	340a      	adds	r4, #10
   135f4:	42ac      	cmp	r4, r5
   135f6:	d1f1      	bne.n	135dc <bt_gatt_is_subscribed+0xac>
   135f8:	e7ea      	b.n	135d0 <bt_gatt_is_subscribed+0xa0>
   135fa:	bf00      	nop
   135fc:	00020945 	.word	0x00020945
   13600:	0001e6bc 	.word	0x0001e6bc

00013604 <bt_gatt_discover>:
{
   13604:	b5f0      	push	{r4, r5, r6, r7, lr}
   13606:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   13608:	4605      	mov	r5, r0
{
   1360a:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   1360c:	b950      	cbnz	r0, 13624 <bt_gatt_discover+0x20>
   1360e:	4989      	ldr	r1, [pc, #548]	; (13834 <bt_gatt_discover+0x230>)
   13610:	4889      	ldr	r0, [pc, #548]	; (13838 <bt_gatt_discover+0x234>)
   13612:	f640 5277 	movw	r2, #3447	; 0xd77
   13616:	f006 f87f 	bl	19718 <printk>
   1361a:	f640 5177 	movw	r1, #3447	; 0xd77
   1361e:	4885      	ldr	r0, [pc, #532]	; (13834 <bt_gatt_discover+0x230>)
   13620:	f006 fb20 	bl	19c64 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   13624:	b10c      	cbz	r4, 1362a <bt_gatt_discover+0x26>
   13626:	6863      	ldr	r3, [r4, #4]
   13628:	b953      	cbnz	r3, 13640 <bt_gatt_discover+0x3c>
   1362a:	4982      	ldr	r1, [pc, #520]	; (13834 <bt_gatt_discover+0x230>)
   1362c:	4882      	ldr	r0, [pc, #520]	; (13838 <bt_gatt_discover+0x234>)
   1362e:	f640 5278 	movw	r2, #3448	; 0xd78
   13632:	f006 f871 	bl	19718 <printk>
   13636:	f640 5178 	movw	r1, #3448	; 0xd78
   1363a:	487e      	ldr	r0, [pc, #504]	; (13834 <bt_gatt_discover+0x230>)
   1363c:	f006 fb12 	bl	19c64 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   13640:	8923      	ldrh	r3, [r4, #8]
   13642:	b10b      	cbz	r3, 13648 <bt_gatt_discover+0x44>
   13644:	89e3      	ldrh	r3, [r4, #14]
   13646:	b953      	cbnz	r3, 1365e <bt_gatt_discover+0x5a>
   13648:	497a      	ldr	r1, [pc, #488]	; (13834 <bt_gatt_discover+0x230>)
   1364a:	487b      	ldr	r0, [pc, #492]	; (13838 <bt_gatt_discover+0x234>)
   1364c:	f640 5279 	movw	r2, #3449	; 0xd79
   13650:	f006 f862 	bl	19718 <printk>
   13654:	f640 5179 	movw	r1, #3449	; 0xd79
   13658:	4876      	ldr	r0, [pc, #472]	; (13834 <bt_gatt_discover+0x230>)
   1365a:	f006 fb03 	bl	19c64 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1365e:	8922      	ldrh	r2, [r4, #8]
   13660:	89e3      	ldrh	r3, [r4, #14]
   13662:	429a      	cmp	r2, r3
   13664:	d90a      	bls.n	1367c <bt_gatt_discover+0x78>
   13666:	4973      	ldr	r1, [pc, #460]	; (13834 <bt_gatt_discover+0x230>)
   13668:	4873      	ldr	r0, [pc, #460]	; (13838 <bt_gatt_discover+0x234>)
   1366a:	f640 527b 	movw	r2, #3451	; 0xd7b
   1366e:	f006 f853 	bl	19718 <printk>
   13672:	f640 517b 	movw	r1, #3451	; 0xd7b
   13676:	486f      	ldr	r0, [pc, #444]	; (13834 <bt_gatt_discover+0x230>)
   13678:	f006 faf4 	bl	19c64 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1367c:	7aab      	ldrb	r3, [r5, #10]
   1367e:	2b07      	cmp	r3, #7
   13680:	f040 80d5 	bne.w	1382e <bt_gatt_discover+0x22a>
	switch (params->type) {
   13684:	7c22      	ldrb	r2, [r4, #16]
   13686:	2a05      	cmp	r2, #5
   13688:	f200 80cc 	bhi.w	13824 <bt_gatt_discover+0x220>
   1368c:	e8df f002 	tbb	[pc, r2]
   13690:	64640303 	.word	0x64640303
   13694:	b683      	.short	0xb683
		if (params->uuid) {
   13696:	6823      	ldr	r3, [r4, #0]
   13698:	2b00      	cmp	r3, #0
   1369a:	d03e      	beq.n	1371a <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   1369c:	2206      	movs	r2, #6
   1369e:	4628      	mov	r0, r5
   136a0:	4611      	mov	r1, r2
   136a2:	f7fe fa0d 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   136a6:	4606      	mov	r6, r0
   136a8:	b918      	cbnz	r0, 136b2 <bt_gatt_discover+0xae>
		return -ENOMEM;
   136aa:	f06f 000b 	mvn.w	r0, #11
}
   136ae:	b005      	add	sp, #20
   136b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   136b2:	f100 0708 	add.w	r7, r0, #8
   136b6:	2106      	movs	r1, #6
   136b8:	4638      	mov	r0, r7
   136ba:	f001 f8e5 	bl	14888 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   136be:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   136c0:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   136c2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   136c4:	89e3      	ldrh	r3, [r4, #14]
   136c6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   136c8:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   136ca:	2b00      	cmp	r3, #0
   136cc:	f642 0301 	movw	r3, #10241	; 0x2801
   136d0:	bf08      	it	eq
   136d2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   136d6:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   136d8:	780a      	ldrb	r2, [r1, #0]
   136da:	b15a      	cbz	r2, 136f4 <bt_gatt_discover+0xf0>
   136dc:	2a02      	cmp	r2, #2
   136de:	d016      	beq.n	1370e <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   136e0:	4856      	ldr	r0, [pc, #344]	; (1383c <bt_gatt_discover+0x238>)
   136e2:	2145      	movs	r1, #69	; 0x45
   136e4:	f006 f818 	bl	19718 <printk>
		net_buf_unref(buf);
   136e8:	4630      	mov	r0, r6
   136ea:	f000 ffb7 	bl	1465c <net_buf_unref>
	return -EINVAL;
   136ee:	f06f 0015 	mvn.w	r0, #21
   136f2:	e7dc      	b.n	136ae <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   136f4:	4638      	mov	r0, r7
   136f6:	8849      	ldrh	r1, [r1, #2]
   136f8:	f008 fd83 	bl	1c202 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   136fc:	4623      	mov	r3, r4
   136fe:	4a50      	ldr	r2, [pc, #320]	; (13840 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13700:	4631      	mov	r1, r6
   13702:	4628      	mov	r0, r5
}
   13704:	b005      	add	sp, #20
   13706:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1370a:	f7ff b811 	b.w	12730 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1370e:	2210      	movs	r2, #16
   13710:	4638      	mov	r0, r7
   13712:	3101      	adds	r1, #1
   13714:	f008 fd62 	bl	1c1dc <net_buf_simple_add_mem>
   13718:	e7f0      	b.n	136fc <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   1371a:	2204      	movs	r2, #4
   1371c:	2110      	movs	r1, #16
   1371e:	4628      	mov	r0, r5
   13720:	f7fe f9ce 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   13724:	4606      	mov	r6, r0
   13726:	2800      	cmp	r0, #0
   13728:	d0bf      	beq.n	136aa <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1372a:	f100 0708 	add.w	r7, r0, #8
   1372e:	2104      	movs	r1, #4
   13730:	4638      	mov	r0, r7
   13732:	f001 f8a9 	bl	14888 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13736:	8923      	ldrh	r3, [r4, #8]
   13738:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1373a:	89e3      	ldrh	r3, [r4, #14]
   1373c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1373e:	7c23      	ldrb	r3, [r4, #16]
   13740:	b93b      	cbnz	r3, 13752 <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   13742:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   13746:	4638      	mov	r0, r7
   13748:	f008 fd5b 	bl	1c202 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   1374c:	4623      	mov	r3, r4
   1374e:	4a3d      	ldr	r2, [pc, #244]	; (13844 <bt_gatt_discover+0x240>)
   13750:	e7d6      	b.n	13700 <bt_gatt_discover+0xfc>
   13752:	f642 0101 	movw	r1, #10241	; 0x2801
   13756:	e7f6      	b.n	13746 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   13758:	2204      	movs	r2, #4
   1375a:	2108      	movs	r1, #8
   1375c:	4628      	mov	r0, r5
   1375e:	f7fe f9af 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   13762:	4606      	mov	r6, r0
   13764:	2800      	cmp	r0, #0
   13766:	d0a0      	beq.n	136aa <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13768:	f100 0708 	add.w	r7, r0, #8
   1376c:	2104      	movs	r1, #4
   1376e:	4638      	mov	r0, r7
   13770:	f001 f88a 	bl	14888 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13774:	8923      	ldrh	r3, [r4, #8]
   13776:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13778:	89e3      	ldrh	r3, [r4, #14]
   1377a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1377c:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   1377e:	4638      	mov	r0, r7
   13780:	2b02      	cmp	r3, #2
   13782:	bf0c      	ite	eq
   13784:	f642 0102 	movweq	r1, #10242	; 0x2802
   13788:	f642 0103 	movwne	r1, #10243	; 0x2803
   1378c:	f008 fd39 	bl	1c202 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   13790:	4623      	mov	r3, r4
   13792:	4a2d      	ldr	r2, [pc, #180]	; (13848 <bt_gatt_discover+0x244>)
   13794:	e7b4      	b.n	13700 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   13796:	6820      	ldr	r0, [r4, #0]
   13798:	b380      	cbz	r0, 137fc <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1379a:	2600      	movs	r6, #0
   1379c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   137a0:	4669      	mov	r1, sp
   137a2:	f88d 6000 	strb.w	r6, [sp]
   137a6:	f8ad 3002 	strh.w	r3, [sp, #2]
   137aa:	f007 fa8a 	bl	1acc2 <bt_uuid_cmp>
		if (params->uuid &&
   137ae:	2800      	cmp	r0, #0
   137b0:	d09d      	beq.n	136ee <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   137b2:	f642 0301 	movw	r3, #10241	; 0x2801
   137b6:	6820      	ldr	r0, [r4, #0]
   137b8:	a901      	add	r1, sp, #4
   137ba:	f88d 6004 	strb.w	r6, [sp, #4]
   137be:	f8ad 3006 	strh.w	r3, [sp, #6]
   137c2:	f007 fa7e 	bl	1acc2 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   137c6:	2800      	cmp	r0, #0
   137c8:	d091      	beq.n	136ee <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   137ca:	f642 0302 	movw	r3, #10242	; 0x2802
   137ce:	6820      	ldr	r0, [r4, #0]
   137d0:	a902      	add	r1, sp, #8
   137d2:	f88d 6008 	strb.w	r6, [sp, #8]
   137d6:	f8ad 300a 	strh.w	r3, [sp, #10]
   137da:	f007 fa72 	bl	1acc2 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   137de:	2800      	cmp	r0, #0
   137e0:	d085      	beq.n	136ee <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   137e2:	f642 0303 	movw	r3, #10243	; 0x2803
   137e6:	6820      	ldr	r0, [r4, #0]
   137e8:	a903      	add	r1, sp, #12
   137ea:	f88d 600c 	strb.w	r6, [sp, #12]
   137ee:	f8ad 300e 	strh.w	r3, [sp, #14]
   137f2:	f007 fa66 	bl	1acc2 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   137f6:	2800      	cmp	r0, #0
   137f8:	f43f af79 	beq.w	136ee <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   137fc:	2204      	movs	r2, #4
   137fe:	4628      	mov	r0, r5
   13800:	4611      	mov	r1, r2
   13802:	f7fe f95d 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   13806:	4606      	mov	r6, r0
   13808:	2800      	cmp	r0, #0
   1380a:	f43f af4e 	beq.w	136aa <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1380e:	2104      	movs	r1, #4
   13810:	3008      	adds	r0, #8
   13812:	f001 f839 	bl	14888 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13816:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13818:	4a0c      	ldr	r2, [pc, #48]	; (1384c <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1381a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1381c:	89e3      	ldrh	r3, [r4, #14]
   1381e:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13820:	4623      	mov	r3, r4
   13822:	e76d      	b.n	13700 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   13824:	2145      	movs	r1, #69	; 0x45
   13826:	480a      	ldr	r0, [pc, #40]	; (13850 <bt_gatt_discover+0x24c>)
   13828:	f005 ff76 	bl	19718 <printk>
   1382c:	e75f      	b.n	136ee <bt_gatt_discover+0xea>
		return -ENOTCONN;
   1382e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13832:	e73c      	b.n	136ae <bt_gatt_discover+0xaa>
   13834:	00020945 	.word	0x00020945
   13838:	0001e6bc 	.word	0x0001e6bc
   1383c:	00020a04 	.word	0x00020a04
   13840:	0001bfe7 	.word	0x0001bfe7
   13844:	00013855 	.word	0x00013855
   13848:	0001395d 	.word	0x0001395d
   1384c:	00013c0d 	.word	0x00013c0d
   13850:	00020a1e 	.word	0x00020a1e

00013854 <gatt_read_group_rsp>:
{
   13854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13858:	b08f      	sub	sp, #60	; 0x3c
   1385a:	4681      	mov	r9, r0
   1385c:	4617      	mov	r7, r2
   1385e:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   13860:	b131      	cbz	r1, 13870 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   13862:	462a      	mov	r2, r5
   13864:	2100      	movs	r1, #0
   13866:	686b      	ldr	r3, [r5, #4]
}
   13868:	b00f      	add	sp, #60	; 0x3c
   1386a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1386e:	4718      	bx	r3
	switch (rsp->len) {
   13870:	7812      	ldrb	r2, [r2, #0]
   13872:	2a06      	cmp	r2, #6
   13874:	d00d      	beq.n	13892 <gatt_read_group_rsp+0x3e>
   13876:	2a14      	cmp	r2, #20
   13878:	d021      	beq.n	138be <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   1387a:	2145      	movs	r1, #69	; 0x45
   1387c:	4836      	ldr	r0, [pc, #216]	; (13958 <gatt_read_group_rsp+0x104>)
   1387e:	f005 ff4b 	bl	19718 <printk>
	params->func(conn, NULL, params);
   13882:	462a      	mov	r2, r5
   13884:	2100      	movs	r1, #0
   13886:	4648      	mov	r0, r9
   13888:	686b      	ldr	r3, [r5, #4]
   1388a:	4798      	blx	r3
}
   1388c:	b00f      	add	sp, #60	; 0x3c
   1388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   13892:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   13896:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13898:	3b01      	subs	r3, #1
   1389a:	b29c      	uxth	r4, r3
   1389c:	f107 0801 	add.w	r8, r7, #1
   138a0:	783b      	ldrb	r3, [r7, #0]
   138a2:	42a3      	cmp	r3, r4
   138a4:	d90f      	bls.n	138c6 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   138a6:	2c00      	cmp	r4, #0
   138a8:	d1eb      	bne.n	13882 <gatt_read_group_rsp+0x2e>
   138aa:	2e00      	cmp	r6, #0
   138ac:	d0e9      	beq.n	13882 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   138ae:	462a      	mov	r2, r5
   138b0:	4631      	mov	r1, r6
   138b2:	4648      	mov	r0, r9
}
   138b4:	b00f      	add	sp, #60	; 0x3c
   138b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   138ba:	f008 bb77 	b.w	1bfac <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   138be:	2202      	movs	r2, #2
   138c0:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   138c4:	e7e7      	b.n	13896 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   138c6:	2214      	movs	r2, #20
   138c8:	2100      	movs	r1, #0
   138ca:	a809      	add	r0, sp, #36	; 0x24
   138cc:	f007 f9af 	bl	1ac2e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   138d0:	f8b8 a000 	ldrh.w	sl, [r8]
   138d4:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   138d8:	2b00      	cmp	r3, #0
   138da:	d0d2      	beq.n	13882 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   138dc:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   138e0:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   138e4:	2e00      	cmp	r6, #0
   138e6:	d0cc      	beq.n	13882 <gatt_read_group_rsp+0x2e>
   138e8:	42b3      	cmp	r3, r6
   138ea:	d8ca      	bhi.n	13882 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   138ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
   138f0:	b323      	cbz	r3, 1393c <gatt_read_group_rsp+0xe8>
   138f2:	2b02      	cmp	r3, #2
   138f4:	d02a      	beq.n	1394c <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   138f6:	f04f 0300 	mov.w	r3, #0
   138fa:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   138fe:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13900:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   13902:	2b00      	cmp	r3, #0
   13904:	f642 0301 	movw	r3, #10241	; 0x2801
   13908:	bf08      	it	eq
   1390a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1390e:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   13912:	ab04      	add	r3, sp, #16
   13914:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   13916:	ab01      	add	r3, sp, #4
   13918:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1391a:	ab02      	add	r3, sp, #8
   1391c:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1391e:	4648      	mov	r0, r9
   13920:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   13922:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   13926:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1392a:	a909      	add	r1, sp, #36	; 0x24
   1392c:	4798      	blx	r3
   1392e:	2800      	cmp	r0, #0
   13930:	d0ac      	beq.n	1388c <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13932:	783a      	ldrb	r2, [r7, #0]
   13934:	1aa4      	subs	r4, r4, r2
   13936:	b2a4      	uxth	r4, r4
   13938:	4490      	add	r8, r2
   1393a:	e7b1      	b.n	138a0 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1393c:	2202      	movs	r2, #2
   1393e:	f108 0104 	add.w	r1, r8, #4
   13942:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13946:	f007 f947 	bl	1abd8 <memcpy>
			break;
   1394a:	e7d4      	b.n	138f6 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1394c:	2210      	movs	r2, #16
   1394e:	f108 0104 	add.w	r1, r8, #4
   13952:	f10d 0011 	add.w	r0, sp, #17
   13956:	e7f6      	b.n	13946 <gatt_read_group_rsp+0xf2>
   13958:	00020a3e 	.word	0x00020a3e

0001395c <gatt_read_type_rsp>:
{
   1395c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13960:	b091      	sub	sp, #68	; 0x44
   13962:	4607      	mov	r7, r0
   13964:	4690      	mov	r8, r2
   13966:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   13968:	b131      	cbz	r1, 13978 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1396a:	462a      	mov	r2, r5
   1396c:	2100      	movs	r1, #0
   1396e:	686b      	ldr	r3, [r5, #4]
}
   13970:	b011      	add	sp, #68	; 0x44
   13972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13976:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13978:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   1397a:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1397c:	2802      	cmp	r0, #2
   1397e:	f040 8089 	bne.w	13a94 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   13982:	2a06      	cmp	r2, #6
   13984:	d01c      	beq.n	139c0 <gatt_read_type_rsp+0x64>
   13986:	2a08      	cmp	r2, #8
   13988:	f040 8088 	bne.w	13a9c <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   1398c:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13990:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13992:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   13994:	1e5c      	subs	r4, r3, #1
   13996:	b2a4      	uxth	r4, r4
   13998:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   1399c:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   139a0:	f898 3000 	ldrb.w	r3, [r8]
   139a4:	42a3      	cmp	r3, r4
   139a6:	d90e      	bls.n	139c6 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   139a8:	2c00      	cmp	r4, #0
   139aa:	d17b      	bne.n	13aa4 <gatt_read_type_rsp+0x148>
   139ac:	2e00      	cmp	r6, #0
   139ae:	d079      	beq.n	13aa4 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   139b0:	462a      	mov	r2, r5
   139b2:	4631      	mov	r1, r6
   139b4:	4638      	mov	r0, r7
}
   139b6:	b011      	add	sp, #68	; 0x44
   139b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   139bc:	f008 baf6 	b.w	1bfac <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   139c0:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   139c4:	e7e4      	b.n	13990 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   139c6:	f8b9 3000 	ldrh.w	r3, [r9]
   139ca:	b29e      	uxth	r6, r3
		if (!handle) {
   139cc:	2e00      	cmp	r6, #0
   139ce:	d069      	beq.n	13aa4 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   139d0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   139d4:	f8ad 2014 	strh.w	r2, [sp, #20]
   139d8:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   139da:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   139de:	b291      	uxth	r1, r2
   139e0:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   139e4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   139e8:	b182      	cbz	r2, 13a0c <gatt_read_type_rsp+0xb0>
   139ea:	2a02      	cmp	r2, #2
   139ec:	d019      	beq.n	13a22 <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   139ee:	6829      	ldr	r1, [r5, #0]
   139f0:	2900      	cmp	r1, #0
   139f2:	d036      	beq.n	13a62 <gatt_read_type_rsp+0x106>
   139f4:	4650      	mov	r0, sl
   139f6:	9301      	str	r3, [sp, #4]
   139f8:	f007 f963 	bl	1acc2 <bt_uuid_cmp>
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	b380      	cbz	r0, 13a62 <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13a00:	f898 2000 	ldrb.w	r2, [r8]
   13a04:	1aa4      	subs	r4, r4, r2
   13a06:	b2a4      	uxth	r4, r4
   13a08:	4491      	add	r9, r2
   13a0a:	e7c9      	b.n	139a0 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   13a0c:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   13a10:	f899 2006 	ldrb.w	r2, [r9, #6]
   13a14:	f899 1007 	ldrb.w	r1, [r9, #7]
   13a18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13a1c:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   13a20:	e7e5      	b.n	139ee <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   13a22:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   13a24:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13a26:	4638      	mov	r0, r7
   13a28:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   13a2a:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13a2c:	9201      	str	r2, [sp, #4]
   13a2e:	f7fe f847 	bl	11ac0 <bt_att_create_pdu>
	if (!buf) {
   13a32:	4604      	mov	r4, r0
   13a34:	b190      	cbz	r0, 13a5c <gatt_read_type_rsp+0x100>
   13a36:	9a01      	ldr	r2, [sp, #4]
   13a38:	3008      	adds	r0, #8
   13a3a:	4611      	mov	r1, r2
   13a3c:	f000 ff24 	bl	14888 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13a40:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13a42:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13a44:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13a46:	4a49      	ldr	r2, [pc, #292]	; (13b6c <gatt_read_type_rsp+0x210>)
   13a48:	462b      	mov	r3, r5
   13a4a:	4638      	mov	r0, r7
   13a4c:	f7fe fe70 	bl	12730 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   13a50:	b286      	uxth	r6, r0
	if (!handle) {
   13a52:	2e00      	cmp	r6, #0
   13a54:	d1ac      	bne.n	139b0 <gatt_read_type_rsp+0x54>
}
   13a56:	b011      	add	sp, #68	; 0x44
   13a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   13a5c:	f06f 000b 	mvn.w	r0, #11
   13a60:	e7f6      	b.n	13a50 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13a62:	f642 0202 	movw	r2, #10242	; 0x2802
   13a66:	f8ad 200e 	strh.w	r2, [sp, #14]
   13a6a:	aa03      	add	r2, sp, #12
   13a6c:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   13a70:	aa04      	add	r2, sp, #16
   13a72:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   13a74:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13a78:	462a      	mov	r2, r5
   13a7a:	4638      	mov	r0, r7
   13a7c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13a7e:	f88d b00c 	strb.w	fp, [sp, #12]
   13a82:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   13a86:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13a8a:	a90b      	add	r1, sp, #44	; 0x2c
   13a8c:	4798      	blx	r3
   13a8e:	2800      	cmp	r0, #0
   13a90:	d1b6      	bne.n	13a00 <gatt_read_type_rsp+0xa4>
   13a92:	e7e0      	b.n	13a56 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   13a94:	2a07      	cmp	r2, #7
   13a96:	d00b      	beq.n	13ab0 <gatt_read_type_rsp+0x154>
   13a98:	2a15      	cmp	r2, #21
   13a9a:	d02e      	beq.n	13afa <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   13a9c:	2145      	movs	r1, #69	; 0x45
   13a9e:	4834      	ldr	r0, [pc, #208]	; (13b70 <gatt_read_type_rsp+0x214>)
   13aa0:	f005 fe3a 	bl	19718 <printk>
	params->func(conn, NULL, params);
   13aa4:	462a      	mov	r2, r5
   13aa6:	2100      	movs	r1, #0
   13aa8:	4638      	mov	r0, r7
   13aaa:	686b      	ldr	r3, [r5, #4]
   13aac:	4798      	blx	r3
	if (!handle) {
   13aae:	e7d2      	b.n	13a56 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   13ab0:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13ab4:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13ab6:	1e5c      	subs	r4, r3, #1
   13ab8:	b2a4      	uxth	r4, r4
   13aba:	f108 0901 	add.w	r9, r8, #1
   13abe:	f10d 0a18 	add.w	sl, sp, #24
   13ac2:	f898 3000 	ldrb.w	r3, [r8]
   13ac6:	42a3      	cmp	r3, r4
   13ac8:	f63f af6e 	bhi.w	139a8 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   13acc:	f8b9 b000 	ldrh.w	fp, [r9]
   13ad0:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   13ad4:	2e00      	cmp	r6, #0
   13ad6:	d0e5      	beq.n	13aa4 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   13ad8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13adc:	b18b      	cbz	r3, 13b02 <gatt_read_type_rsp+0x1a6>
   13ade:	2b02      	cmp	r3, #2
   13ae0:	d018      	beq.n	13b14 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13ae2:	6829      	ldr	r1, [r5, #0]
   13ae4:	b1f1      	cbz	r1, 13b24 <gatt_read_type_rsp+0x1c8>
   13ae6:	4650      	mov	r0, sl
   13ae8:	f007 f8eb 	bl	1acc2 <bt_uuid_cmp>
   13aec:	b1d0      	cbz	r0, 13b24 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13aee:	f898 2000 	ldrb.w	r2, [r8]
   13af2:	1aa4      	subs	r4, r4, r2
   13af4:	b2a4      	uxth	r4, r4
   13af6:	4491      	add	r9, r2
   13af8:	e7e3      	b.n	13ac2 <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   13afa:	2202      	movs	r2, #2
   13afc:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   13b00:	e7d8      	b.n	13ab4 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   13b02:	f899 3005 	ldrb.w	r3, [r9, #5]
   13b06:	f899 2006 	ldrb.w	r2, [r9, #6]
   13b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13b0e:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   13b12:	e7e6      	b.n	13ae2 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   13b14:	2210      	movs	r2, #16
   13b16:	f109 0105 	add.w	r1, r9, #5
   13b1a:	f10d 0019 	add.w	r0, sp, #25
   13b1e:	f007 f85b 	bl	1abd8 <memcpy>
			break;
   13b22:	e7de      	b.n	13ae2 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13b24:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   13b28:	f899 3002 	ldrb.w	r3, [r9, #2]
   13b2c:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13b30:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13b34:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13b38:	2300      	movs	r3, #0
   13b3a:	f8ad 200e 	strh.w	r2, [sp, #14]
   13b3e:	aa03      	add	r2, sp, #12
   13b40:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   13b44:	aa04      	add	r2, sp, #16
   13b46:	f88d 300c 	strb.w	r3, [sp, #12]
   13b4a:	930d      	str	r3, [sp, #52]	; 0x34
   13b4c:	920e      	str	r2, [sp, #56]	; 0x38
   13b4e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13b52:	462a      	mov	r2, r5
   13b54:	4638      	mov	r0, r7
   13b56:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13b58:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   13b5c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13b60:	a90b      	add	r1, sp, #44	; 0x2c
   13b62:	4798      	blx	r3
   13b64:	2800      	cmp	r0, #0
   13b66:	d1c2      	bne.n	13aee <gatt_read_type_rsp+0x192>
   13b68:	e775      	b.n	13a56 <gatt_read_type_rsp+0xfa>
   13b6a:	bf00      	nop
   13b6c:	00013b75 	.word	0x00013b75
   13b70:	00020a3e 	.word	0x00020a3e

00013b74 <read_included_uuid_cb>:
{
   13b74:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   13b76:	2b10      	cmp	r3, #16
{
   13b78:	b08e      	sub	sp, #56	; 0x38
   13b7a:	4611      	mov	r1, r2
   13b7c:	4605      	mov	r5, r0
   13b7e:	461a      	mov	r2, r3
   13b80:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   13b82:	d00b      	beq.n	13b9c <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   13b84:	2145      	movs	r1, #69	; 0x45
   13b86:	4820      	ldr	r0, [pc, #128]	; (13c08 <read_included_uuid_cb+0x94>)
   13b88:	f005 fdc6 	bl	19718 <printk>
		params->func(conn, NULL, params);
   13b8c:	4622      	mov	r2, r4
   13b8e:	2100      	movs	r1, #0
   13b90:	4628      	mov	r0, r5
   13b92:	6863      	ldr	r3, [r4, #4]
}
   13b94:	b00e      	add	sp, #56	; 0x38
   13b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   13b9a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   13b9c:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   13b9e:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   13ba0:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   13ba4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   13ba6:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   13baa:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   13bae:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   13bb0:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   13bb2:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   13bb6:	f007 f80f 	bl	1abd8 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13bba:	6821      	ldr	r1, [r4, #0]
   13bbc:	b9c9      	cbnz	r1, 13bf2 <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13bbe:	f642 0202 	movw	r2, #10242	; 0x2802
   13bc2:	2300      	movs	r3, #0
   13bc4:	f8ad 2006 	strh.w	r2, [sp, #6]
   13bc8:	aa01      	add	r2, sp, #4
   13bca:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   13bce:	f88d 3004 	strb.w	r3, [sp, #4]
   13bd2:	930b      	str	r3, [sp, #44]	; 0x2c
   13bd4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   13bd8:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13bda:	aa02      	add	r2, sp, #8
   13bdc:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   13bde:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13be2:	4622      	mov	r2, r4
   13be4:	4628      	mov	r0, r5
   13be6:	6863      	ldr	r3, [r4, #4]
   13be8:	a909      	add	r1, sp, #36	; 0x24
   13bea:	4798      	blx	r3
   13bec:	b930      	cbnz	r0, 13bfc <read_included_uuid_cb+0x88>
}
   13bee:	b00e      	add	sp, #56	; 0x38
   13bf0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13bf2:	4630      	mov	r0, r6
   13bf4:	f007 f865 	bl	1acc2 <bt_uuid_cmp>
   13bf8:	2800      	cmp	r0, #0
   13bfa:	d0e0      	beq.n	13bbe <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   13bfc:	4622      	mov	r2, r4
   13bfe:	4628      	mov	r0, r5
   13c00:	8921      	ldrh	r1, [r4, #8]
   13c02:	f008 f9d3 	bl	1bfac <gatt_discover_next>
	return;
   13c06:	e7f2      	b.n	13bee <read_included_uuid_cb+0x7a>
   13c08:	00020a3e 	.word	0x00020a3e

00013c0c <gatt_find_info_rsp>:
{
   13c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c10:	b08f      	sub	sp, #60	; 0x3c
   13c12:	4680      	mov	r8, r0
   13c14:	4614      	mov	r4, r2
   13c16:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   13c18:	b941      	cbnz	r1, 13c2c <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   13c1a:	7812      	ldrb	r2, [r2, #0]
   13c1c:	2a01      	cmp	r2, #1
   13c1e:	d00b      	beq.n	13c38 <gatt_find_info_rsp+0x2c>
   13c20:	2a02      	cmp	r2, #2
   13c22:	d022      	beq.n	13c6a <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   13c24:	2145      	movs	r1, #69	; 0x45
   13c26:	484b      	ldr	r0, [pc, #300]	; (13d54 <gatt_find_info_rsp+0x148>)
   13c28:	f005 fd76 	bl	19718 <printk>
	params->func(conn, NULL, params);
   13c2c:	4632      	mov	r2, r6
   13c2e:	2100      	movs	r1, #0
   13c30:	4640      	mov	r0, r8
   13c32:	6873      	ldr	r3, [r6, #4]
   13c34:	4798      	blx	r3
   13c36:	e08a      	b.n	13d4e <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   13c38:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   13c3c:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   13c40:	3b01      	subs	r3, #1
   13c42:	b29b      	uxth	r3, r3
	if (length < len) {
   13c44:	4553      	cmp	r3, sl
   13c46:	d3f1      	bcc.n	13c2c <gatt_find_info_rsp+0x20>
	bool skip = false;
   13c48:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   13c4c:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   13c50:	46cb      	mov	fp, r9
			skip = false;
   13c52:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   13c54:	9300      	str	r3, [sp, #0]
   13c56:	3401      	adds	r4, #1
   13c58:	af04      	add	r7, sp, #16
   13c5a:	9b00      	ldr	r3, [sp, #0]
   13c5c:	b953      	cbnz	r3, 13c74 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   13c5e:	4632      	mov	r2, r6
   13c60:	4659      	mov	r1, fp
   13c62:	4640      	mov	r0, r8
   13c64:	f008 f9a2 	bl	1bfac <gatt_discover_next>
	return;
   13c68:	e071      	b.n	13d4e <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   13c6a:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   13c6e:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   13c72:	e7e5      	b.n	13c40 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   13c74:	8823      	ldrh	r3, [r4, #0]
   13c76:	9301      	str	r3, [sp, #4]
   13c78:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   13c7c:	f1b9 0f00 	cmp.w	r9, #0
   13c80:	d151      	bne.n	13d26 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   13c82:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13c86:	2b00      	cmp	r3, #0
   13c88:	d03a      	beq.n	13d00 <gatt_find_info_rsp+0xf4>
   13c8a:	2b02      	cmp	r3, #2
   13c8c:	d03f      	beq.n	13d0e <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13c8e:	6831      	ldr	r1, [r6, #0]
   13c90:	2900      	cmp	r1, #0
   13c92:	d143      	bne.n	13d1c <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   13c94:	7c33      	ldrb	r3, [r6, #16]
   13c96:	2b04      	cmp	r3, #4
   13c98:	d148      	bne.n	13d2c <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   13c9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13c9e:	4638      	mov	r0, r7
   13ca0:	a902      	add	r1, sp, #8
   13ca2:	f88d 5008 	strb.w	r5, [sp, #8]
   13ca6:	f8ad 300a 	strh.w	r3, [sp, #10]
   13caa:	f007 f80a 	bl	1acc2 <bt_uuid_cmp>
   13cae:	b310      	cbz	r0, 13cf6 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   13cb0:	f642 0301 	movw	r3, #10241	; 0x2801
   13cb4:	4638      	mov	r0, r7
   13cb6:	a903      	add	r1, sp, #12
   13cb8:	f88d 500c 	strb.w	r5, [sp, #12]
   13cbc:	f8ad 300e 	strh.w	r3, [sp, #14]
   13cc0:	f006 ffff 	bl	1acc2 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   13cc4:	b1b8      	cbz	r0, 13cf6 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   13cc6:	f642 0302 	movw	r3, #10242	; 0x2802
   13cca:	4638      	mov	r0, r7
   13ccc:	a909      	add	r1, sp, #36	; 0x24
   13cce:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   13cd2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   13cd6:	f006 fff4 	bl	1acc2 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   13cda:	b160      	cbz	r0, 13cf6 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   13cdc:	f642 0303 	movw	r3, #10243	; 0x2803
   13ce0:	4638      	mov	r0, r7
   13ce2:	a909      	add	r1, sp, #36	; 0x24
   13ce4:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   13ce8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   13cec:	f006 ffe9 	bl	1acc2 <bt_uuid_cmp>
   13cf0:	b9e0      	cbnz	r0, 13d2c <gatt_find_info_rsp+0x120>
				skip = true;
   13cf2:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   13cf6:	9b00      	ldr	r3, [sp, #0]
   13cf8:	4454      	add	r4, sl
   13cfa:	3b01      	subs	r3, #1
   13cfc:	9300      	str	r3, [sp, #0]
   13cfe:	e7ac      	b.n	13c5a <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   13d00:	78a3      	ldrb	r3, [r4, #2]
   13d02:	78e2      	ldrb	r2, [r4, #3]
   13d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13d08:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   13d0c:	e7bf      	b.n	13c8e <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   13d0e:	2210      	movs	r2, #16
   13d10:	1ca1      	adds	r1, r4, #2
   13d12:	f10d 0011 	add.w	r0, sp, #17
   13d16:	f006 ff5f 	bl	1abd8 <memcpy>
			break;
   13d1a:	e7b8      	b.n	13c8e <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13d1c:	4638      	mov	r0, r7
   13d1e:	f006 ffd0 	bl	1acc2 <bt_uuid_cmp>
   13d22:	2800      	cmp	r0, #0
   13d24:	d0b6      	beq.n	13c94 <gatt_find_info_rsp+0x88>
			skip = false;
   13d26:	f04f 0900 	mov.w	r9, #0
   13d2a:	e7e4      	b.n	13cf6 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   13d2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d30:	4632      	mov	r2, r6
		attr.handle = handle;
   13d32:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d36:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d38:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   13d3c:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d40:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d42:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d46:	a909      	add	r1, sp, #36	; 0x24
   13d48:	4798      	blx	r3
   13d4a:	2800      	cmp	r0, #0
   13d4c:	d1d3      	bne.n	13cf6 <gatt_find_info_rsp+0xea>
}
   13d4e:	b00f      	add	sp, #60	; 0x3c
   13d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d54:	00020a57 	.word	0x00020a57

00013d58 <bt_gatt_subscribe>:
{
   13d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d5a:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   13d5c:	4606      	mov	r6, r0
   13d5e:	b950      	cbnz	r0, 13d76 <bt_gatt_subscribe+0x1e>
   13d60:	4944      	ldr	r1, [pc, #272]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13d62:	4845      	ldr	r0, [pc, #276]	; (13e78 <bt_gatt_subscribe+0x120>)
   13d64:	f640 72fb 	movw	r2, #4091	; 0xffb
   13d68:	f005 fcd6 	bl	19718 <printk>
   13d6c:	f640 71fb 	movw	r1, #4091	; 0xffb
   13d70:	4840      	ldr	r0, [pc, #256]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13d72:	f005 ff77 	bl	19c64 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   13d76:	b10d      	cbz	r5, 13d7c <bt_gatt_subscribe+0x24>
   13d78:	682b      	ldr	r3, [r5, #0]
   13d7a:	b953      	cbnz	r3, 13d92 <bt_gatt_subscribe+0x3a>
   13d7c:	493d      	ldr	r1, [pc, #244]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13d7e:	483e      	ldr	r0, [pc, #248]	; (13e78 <bt_gatt_subscribe+0x120>)
   13d80:	f640 72fc 	movw	r2, #4092	; 0xffc
   13d84:	f005 fcc8 	bl	19718 <printk>
   13d88:	f640 71fc 	movw	r1, #4092	; 0xffc
   13d8c:	4839      	ldr	r0, [pc, #228]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13d8e:	f005 ff69 	bl	19c64 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   13d92:	89ab      	ldrh	r3, [r5, #12]
   13d94:	b953      	cbnz	r3, 13dac <bt_gatt_subscribe+0x54>
   13d96:	4937      	ldr	r1, [pc, #220]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13d98:	4837      	ldr	r0, [pc, #220]	; (13e78 <bt_gatt_subscribe+0x120>)
   13d9a:	f640 72fd 	movw	r2, #4093	; 0xffd
   13d9e:	f005 fcbb 	bl	19718 <printk>
   13da2:	f640 71fd 	movw	r1, #4093	; 0xffd
   13da6:	4833      	ldr	r0, [pc, #204]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13da8:	f005 ff5c 	bl	19c64 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   13dac:	896b      	ldrh	r3, [r5, #10]
   13dae:	b953      	cbnz	r3, 13dc6 <bt_gatt_subscribe+0x6e>
   13db0:	4930      	ldr	r1, [pc, #192]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13db2:	4831      	ldr	r0, [pc, #196]	; (13e78 <bt_gatt_subscribe+0x120>)
   13db4:	f241 0203 	movw	r2, #4099	; 0x1003
   13db8:	f005 fcae 	bl	19718 <printk>
   13dbc:	f241 0103 	movw	r1, #4099	; 0x1003
   13dc0:	482c      	ldr	r0, [pc, #176]	; (13e74 <bt_gatt_subscribe+0x11c>)
   13dc2:	f005 ff4f 	bl	19c64 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13dc6:	7ab3      	ldrb	r3, [r6, #10]
   13dc8:	2b07      	cmp	r3, #7
   13dca:	d14b      	bne.n	13e64 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   13dcc:	4630      	mov	r0, r6
   13dce:	f7fe faf9 	bl	123c4 <gatt_sub_find>
	if (!sub) {
   13dd2:	4604      	mov	r4, r0
   13dd4:	b958      	cbnz	r0, 13dee <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   13dd6:	f7fe faf5 	bl	123c4 <gatt_sub_find>
		if (sub) {
   13dda:	4604      	mov	r4, r0
   13ddc:	2800      	cmp	r0, #0
   13dde:	d044      	beq.n	13e6a <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   13de0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13de4:	3001      	adds	r0, #1
   13de6:	f007 fecd 	bl	1bb84 <bt_addr_le_copy>
			sub->id = conn->id;
   13dea:	7a33      	ldrb	r3, [r6, #8]
   13dec:	7023      	strb	r3, [r4, #0]
	return list->head;
   13dee:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   13df0:	b90a      	cbnz	r2, 13df6 <bt_gatt_subscribe+0x9e>
   13df2:	4613      	mov	r3, r2
   13df4:	e001      	b.n	13dfa <bt_gatt_subscribe+0xa2>
   13df6:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   13dfa:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   13dfc:	b97b      	cbnz	r3, 13e1e <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   13dfe:	bb41      	cbnz	r1, 13e52 <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   13e00:	4630      	mov	r0, r6
   13e02:	462b      	mov	r3, r5
   13e04:	89aa      	ldrh	r2, [r5, #12]
   13e06:	8969      	ldrh	r1, [r5, #10]
   13e08:	f7fe ff38 	bl	12c7c <gatt_write_ccc.constprop.0>
		if (err) {
   13e0c:	4606      	mov	r6, r0
   13e0e:	b300      	cbz	r0, 13e52 <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   13e10:	68a3      	ldr	r3, [r4, #8]
   13e12:	b913      	cbnz	r3, 13e1a <bt_gatt_subscribe+0xc2>
   13e14:	4620      	mov	r0, r4
   13e16:	f007 fed4 	bl	1bbc2 <gatt_sub_remove.part.0>
}
   13e1a:	4630      	mov	r0, r6
   13e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   13e1e:	42ab      	cmp	r3, r5
   13e20:	d106      	bne.n	13e30 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   13e22:	b912      	cbnz	r2, 13e2a <bt_gatt_subscribe+0xd2>
   13e24:	4620      	mov	r0, r4
   13e26:	f007 fecc 	bl	1bbc2 <gatt_sub_remove.part.0>
			return -EALREADY;
   13e2a:	f06f 0644 	mvn.w	r6, #68	; 0x44
   13e2e:	e7f4      	b.n	13e1a <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   13e30:	891f      	ldrh	r7, [r3, #8]
   13e32:	8928      	ldrh	r0, [r5, #8]
   13e34:	4287      	cmp	r7, r0
   13e36:	d104      	bne.n	13e42 <bt_gatt_subscribe+0xea>
   13e38:	899f      	ldrh	r7, [r3, #12]
   13e3a:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   13e3c:	4287      	cmp	r7, r0
   13e3e:	bf28      	it	cs
   13e40:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   13e42:	f113 0f14 	cmn.w	r3, #20
   13e46:	d0da      	beq.n	13dfe <bt_gatt_subscribe+0xa6>
	return node->next;
   13e48:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d0d7      	beq.n	13dfe <bt_gatt_subscribe+0xa6>
   13e4e:	3b14      	subs	r3, #20
   13e50:	e7d4      	b.n	13dfc <bt_gatt_subscribe+0xa4>
	parent->next = child;
   13e52:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   13e54:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   13e56:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   13e5a:	616a      	str	r2, [r5, #20]
	list->head = node;
   13e5c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   13e5e:	b93e      	cbnz	r6, 13e70 <bt_gatt_subscribe+0x118>
	list->tail = node;
   13e60:	60e3      	str	r3, [r4, #12]
}
   13e62:	e7da      	b.n	13e1a <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   13e64:	f06f 0638 	mvn.w	r6, #56	; 0x38
   13e68:	e7d7      	b.n	13e1a <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   13e6a:	f06f 060b 	mvn.w	r6, #11
   13e6e:	e7d4      	b.n	13e1a <bt_gatt_subscribe+0xc2>
	return 0;
   13e70:	2600      	movs	r6, #0
   13e72:	e7d2      	b.n	13e1a <bt_gatt_subscribe+0xc2>
   13e74:	00020945 	.word	0x00020945
   13e78:	0001e6bc 	.word	0x0001e6bc

00013e7c <bt_gatt_unsubscribe>:
{
   13e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   13e82:	4607      	mov	r7, r0
   13e84:	b950      	cbnz	r0, 13e9c <bt_gatt_unsubscribe+0x20>
   13e86:	4947      	ldr	r1, [pc, #284]	; (13fa4 <bt_gatt_unsubscribe+0x128>)
   13e88:	4847      	ldr	r0, [pc, #284]	; (13fa8 <bt_gatt_unsubscribe+0x12c>)
   13e8a:	f241 025c 	movw	r2, #4188	; 0x105c
   13e8e:	f005 fc43 	bl	19718 <printk>
   13e92:	f241 015c 	movw	r1, #4188	; 0x105c
   13e96:	4843      	ldr	r0, [pc, #268]	; (13fa4 <bt_gatt_unsubscribe+0x128>)
   13e98:	f005 fee4 	bl	19c64 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   13e9c:	b956      	cbnz	r6, 13eb4 <bt_gatt_unsubscribe+0x38>
   13e9e:	4941      	ldr	r1, [pc, #260]	; (13fa4 <bt_gatt_unsubscribe+0x128>)
   13ea0:	4841      	ldr	r0, [pc, #260]	; (13fa8 <bt_gatt_unsubscribe+0x12c>)
   13ea2:	f241 025d 	movw	r2, #4189	; 0x105d
   13ea6:	f005 fc37 	bl	19718 <printk>
   13eaa:	f241 015d 	movw	r1, #4189	; 0x105d
   13eae:	483d      	ldr	r0, [pc, #244]	; (13fa4 <bt_gatt_unsubscribe+0x128>)
   13eb0:	f005 fed8 	bl	19c64 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13eb4:	7abb      	ldrb	r3, [r7, #10]
   13eb6:	2b07      	cmp	r3, #7
   13eb8:	d170      	bne.n	13f9c <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   13eba:	4638      	mov	r0, r7
   13ebc:	f7fe fa82 	bl	123c4 <gatt_sub_find>
	if (!sub) {
   13ec0:	4680      	mov	r8, r0
   13ec2:	b920      	cbnz	r0, 13ece <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   13ec4:	f06f 0015 	mvn.w	r0, #21
}
   13ec8:	b003      	add	sp, #12
   13eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   13ece:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   13ed0:	b1cc      	cbz	r4, 13f06 <bt_gatt_unsubscribe+0x8a>
   13ed2:	f1b4 0514 	subs.w	r5, r4, #20
   13ed6:	d018      	beq.n	13f0a <bt_gatt_unsubscribe+0x8e>
	return node->next;
   13ed8:	6824      	ldr	r4, [r4, #0]
   13eda:	b104      	cbz	r4, 13ede <bt_gatt_unsubscribe+0x62>
   13edc:	3c14      	subs	r4, #20
   13ede:	f04f 0900 	mov.w	r9, #0
   13ee2:	464b      	mov	r3, r9
   13ee4:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   13ee6:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   13eea:	b985      	cbnz	r5, 13f0e <bt_gatt_unsubscribe+0x92>
	if (!found) {
   13eec:	2b00      	cmp	r3, #0
   13eee:	d0e9      	beq.n	13ec4 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   13ef0:	f1ba 0f00 	cmp.w	sl, #0
   13ef4:	d047      	beq.n	13f86 <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   13ef6:	462b      	mov	r3, r5
   13ef8:	462a      	mov	r2, r5
   13efa:	4631      	mov	r1, r6
   13efc:	4638      	mov	r0, r7
   13efe:	6834      	ldr	r4, [r6, #0]
   13f00:	47a0      	blx	r4
		return 0;
   13f02:	4628      	mov	r0, r5
   13f04:	e7e0      	b.n	13ec8 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   13f06:	4625      	mov	r5, r4
   13f08:	e7e9      	b.n	13ede <bt_gatt_unsubscribe+0x62>
   13f0a:	462c      	mov	r4, r5
   13f0c:	e7e7      	b.n	13ede <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   13f0e:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   13f10:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   13f14:	d12b      	bne.n	13f6e <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   13f16:	696b      	ldr	r3, [r5, #20]
   13f18:	f8d8 000c 	ldr.w	r0, [r8, #12]
   13f1c:	f1b9 0f00 	cmp.w	r9, #0
   13f20:	d11e      	bne.n	13f60 <bt_gatt_unsubscribe+0xe4>
   13f22:	4281      	cmp	r1, r0
	list->head = node;
   13f24:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   13f28:	d101      	bne.n	13f2e <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   13f2a:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   13f2e:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13f30:	4658      	mov	r0, fp
   13f32:	616b      	str	r3, [r5, #20]
   13f34:	f007 fe42 	bl	1bbbc <atomic_get>
			if (atomic_test_bit(params->flags,
   13f38:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13f3a:	f3c0 0380 	ubfx	r3, r0, #2, #1
   13f3e:	d51e      	bpl.n	13f7e <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   13f40:	4631      	mov	r1, r6
   13f42:	4638      	mov	r0, r7
   13f44:	9301      	str	r3, [sp, #4]
   13f46:	f7fe f9a1 	bl	1228c <bt_att_req_cancel>
}
   13f4a:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   13f4c:	b1cc      	cbz	r4, 13f82 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13f4e:	f114 0114 	adds.w	r1, r4, #20
   13f52:	d002      	beq.n	13f5a <bt_gatt_unsubscribe+0xde>
	return node->next;
   13f54:	6961      	ldr	r1, [r4, #20]
   13f56:	b101      	cbz	r1, 13f5a <bt_gatt_unsubscribe+0xde>
   13f58:	3914      	subs	r1, #20
   13f5a:	4625      	mov	r5, r4
   13f5c:	460c      	mov	r4, r1
   13f5e:	e7c4      	b.n	13eea <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   13f60:	4288      	cmp	r0, r1
	parent->next = child;
   13f62:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   13f66:	bf08      	it	eq
   13f68:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   13f6c:	e7df      	b.n	13f2e <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   13f6e:	892d      	ldrh	r5, [r5, #8]
   13f70:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   13f72:	4689      	mov	r9, r1
   13f74:	4285      	cmp	r5, r0
   13f76:	bf08      	it	eq
   13f78:	f04f 0a01 	moveq.w	sl, #1
   13f7c:	e7e6      	b.n	13f4c <bt_gatt_unsubscribe+0xd0>
			found = true;
   13f7e:	2301      	movs	r3, #1
   13f80:	e7e4      	b.n	13f4c <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   13f82:	4621      	mov	r1, r4
   13f84:	e7e9      	b.n	13f5a <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   13f86:	4633      	mov	r3, r6
   13f88:	4652      	mov	r2, sl
   13f8a:	4638      	mov	r0, r7
   13f8c:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   13f8e:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   13f92:	b003      	add	sp, #12
   13f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   13f98:	f7fe be70 	b.w	12c7c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   13f9c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13fa0:	e792      	b.n	13ec8 <bt_gatt_unsubscribe+0x4c>
   13fa2:	bf00      	nop
   13fa4:	00020945 	.word	0x00020945
   13fa8:	0001e6bc 	.word	0x0001e6bc

00013fac <bt_gatt_mult_notification>:
{
   13fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fb0:	b085      	sub	sp, #20
   13fb2:	4680      	mov	r8, r0
   13fb4:	460c      	mov	r4, r1
   13fb6:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   13fb8:	f7fe fa04 	bl	123c4 <gatt_sub_find>
	if (!sub) {
   13fbc:	4606      	mov	r6, r0
   13fbe:	b1d0      	cbz	r0, 13ff6 <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   13fc0:	464a      	mov	r2, r9
   13fc2:	4621      	mov	r1, r4
   13fc4:	a801      	add	r0, sp, #4
   13fc6:	f008 f8e0 	bl	1c18a <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   13fca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13fce:	2b04      	cmp	r3, #4
   13fd0:	d911      	bls.n	13ff6 <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   13fd2:	2104      	movs	r1, #4
   13fd4:	eb0d 0001 	add.w	r0, sp, r1
   13fd8:	f000 fc38 	bl	1484c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   13fdc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   13fe0:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   13fe4:	4605      	mov	r5, r0
		if (len > buf.len) {
   13fe6:	4553      	cmp	r3, sl
   13fe8:	d208      	bcs.n	13ffc <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   13fea:	464b      	mov	r3, r9
   13fec:	4652      	mov	r2, sl
   13fee:	2145      	movs	r1, #69	; 0x45
   13ff0:	4816      	ldr	r0, [pc, #88]	; (1404c <bt_gatt_mult_notification+0xa0>)
   13ff2:	f005 fb91 	bl	19718 <printk>
}
   13ff6:	b005      	add	sp, #20
   13ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   13ffc:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   13ffe:	b303      	cbz	r3, 14042 <bt_gatt_mult_notification+0x96>
   14000:	f1b3 0714 	subs.w	r7, r3, #20
   14004:	d01d      	beq.n	14042 <bt_gatt_mult_notification+0x96>
	return node->next;
   14006:	681c      	ldr	r4, [r3, #0]
   14008:	b104      	cbz	r4, 1400c <bt_gatt_mult_notification+0x60>
   1400a:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1400c:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   14010:	893b      	ldrh	r3, [r7, #8]
   14012:	455b      	cmp	r3, fp
   14014:	d10b      	bne.n	1402e <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   14016:	4653      	mov	r3, sl
   14018:	462a      	mov	r2, r5
   1401a:	4639      	mov	r1, r7
   1401c:	4640      	mov	r0, r8
   1401e:	f8d7 c000 	ldr.w	ip, [r7]
   14022:	47e0      	blx	ip
   14024:	b918      	cbnz	r0, 1402e <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   14026:	4639      	mov	r1, r7
   14028:	4640      	mov	r0, r8
   1402a:	f7ff ff27 	bl	13e7c <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1402e:	b144      	cbz	r4, 14042 <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14030:	f114 0314 	adds.w	r3, r4, #20
   14034:	d002      	beq.n	1403c <bt_gatt_mult_notification+0x90>
	return node->next;
   14036:	6963      	ldr	r3, [r4, #20]
   14038:	b103      	cbz	r3, 1403c <bt_gatt_mult_notification+0x90>
   1403a:	3b14      	subs	r3, #20
{
   1403c:	4627      	mov	r7, r4
   1403e:	461c      	mov	r4, r3
   14040:	e7e6      	b.n	14010 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   14042:	4651      	mov	r1, sl
   14044:	a801      	add	r0, sp, #4
   14046:	f000 fc01 	bl	1484c <net_buf_simple_pull_mem>
   1404a:	e7be      	b.n	13fca <bt_gatt_mult_notification+0x1e>
   1404c:	00020a6e 	.word	0x00020a6e

00014050 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14050:	2301      	movs	r3, #1
{
   14052:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14054:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14058:	b08e      	sub	sp, #56	; 0x38
   1405a:	4605      	mov	r5, r0
	data.conn = conn;
   1405c:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1405e:	4631      	mov	r1, r6
   14060:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   14062:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14066:	f006 ff7e 	bl	1af66 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1406a:	b190      	cbz	r0, 14092 <bt_gatt_connected+0x42>
		if (conn->id) {
   1406c:	7a2a      	ldrb	r2, [r5, #8]
   1406e:	b30a      	cbz	r2, 140b4 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14070:	ac02      	add	r4, sp, #8
   14072:	2104      	movs	r1, #4
   14074:	4620      	mov	r0, r4
   14076:	f005 fab5 	bl	195e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1407a:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1407c:	2124      	movs	r1, #36	; 0x24
   1407e:	4a19      	ldr	r2, [pc, #100]	; (140e4 <bt_gatt_connected+0x94>)
   14080:	a805      	add	r0, sp, #20
   14082:	4633      	mov	r3, r6
   14084:	f7f9 fb5c 	bl	d740 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14088:	aa05      	add	r2, sp, #20
   1408a:	4610      	mov	r0, r2
   1408c:	4916      	ldr	r1, [pc, #88]	; (140e8 <bt_gatt_connected+0x98>)
   1408e:	f7f6 ffd1 	bl	b034 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14092:	2001      	movs	r0, #1
   14094:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14098:	4a14      	ldr	r2, [pc, #80]	; (140ec <bt_gatt_connected+0x9c>)
   1409a:	ab03      	add	r3, sp, #12
   1409c:	f007 ff55 	bl	1bf4a <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   140a0:	4628      	mov	r0, r5
   140a2:	f7fe f98f 	bl	123c4 <gatt_sub_find>
	if (!sub) {
   140a6:	b118      	cbz	r0, 140b0 <bt_gatt_connected+0x60>
	return list->head;
   140a8:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   140aa:	b10c      	cbz	r4, 140b0 <bt_gatt_connected+0x60>
   140ac:	3c14      	subs	r4, #20
   140ae:	b91c      	cbnz	r4, 140b8 <bt_gatt_connected+0x68>
}
   140b0:	b00e      	add	sp, #56	; 0x38
   140b2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   140b4:	9200      	str	r2, [sp, #0]
   140b6:	e7e1      	b.n	1407c <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   140b8:	4631      	mov	r1, r6
   140ba:	7a28      	ldrb	r0, [r5, #8]
   140bc:	f006 ff53 	bl	1af66 <bt_addr_le_is_bonded>
   140c0:	b158      	cbz	r0, 140da <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   140c2:	f104 0010 	add.w	r0, r4, #16
   140c6:	f007 fd79 	bl	1bbbc <atomic_get>
   140ca:	0783      	lsls	r3, r0, #30
   140cc:	d405      	bmi.n	140da <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   140ce:	4623      	mov	r3, r4
   140d0:	4628      	mov	r0, r5
   140d2:	89a2      	ldrh	r2, [r4, #12]
   140d4:	8961      	ldrh	r1, [r4, #10]
   140d6:	f7fe fdd1 	bl	12c7c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   140da:	f114 0f14 	cmn.w	r4, #20
   140de:	d0e7      	beq.n	140b0 <bt_gatt_connected+0x60>
	return node->next;
   140e0:	6964      	ldr	r4, [r4, #20]
   140e2:	e7e2      	b.n	140aa <bt_gatt_connected+0x5a>
   140e4:	000209b4 	.word	0x000209b4
   140e8:	00013075 	.word	0x00013075
   140ec:	00013445 	.word	0x00013445

000140f0 <db_hash_read>:
{
   140f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140f2:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   140f4:	4810      	ldr	r0, [pc, #64]	; (14138 <db_hash_read+0x48>)
{
   140f6:	4615      	mov	r5, r2
   140f8:	461f      	mov	r7, r3
   140fa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   140fe:	f004 fc1d 	bl	1893c <k_delayed_work_cancel>
	if (!err) {
   14102:	b910      	cbnz	r0, 1410a <db_hash_read+0x1a>
		db_hash_gen(true);
   14104:	2001      	movs	r0, #1
   14106:	f7fe ff25 	bl	12f54 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1410a:	2101      	movs	r1, #1
   1410c:	4620      	mov	r0, r4
   1410e:	f007 ffe4 	bl	1c0da <bt_gatt_change_aware>
	if (offset > value_len) {
   14112:	2e10      	cmp	r6, #16
   14114:	d80c      	bhi.n	14130 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   14116:	f1c6 0410 	rsb	r4, r6, #16
   1411a:	42bc      	cmp	r4, r7
   1411c:	bfa8      	it	ge
   1411e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   14120:	4906      	ldr	r1, [pc, #24]	; (1413c <db_hash_read+0x4c>)
   14122:	4622      	mov	r2, r4
   14124:	4628      	mov	r0, r5
   14126:	4431      	add	r1, r6
   14128:	f006 fd56 	bl	1abd8 <memcpy>
}
   1412c:	4620      	mov	r0, r4
   1412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14130:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   14134:	e7fa      	b.n	1412c <db_hash_read+0x3c>
   14136:	bf00      	nop
   14138:	20009a48 	.word	0x20009a48
   1413c:	2000c59f 	.word	0x2000c59f

00014140 <bt_gatt_store_ccc>:
	save.count = 0;
   14140:	2300      	movs	r3, #0
{
   14142:	b570      	push	{r4, r5, r6, lr}
   14144:	4604      	mov	r4, r0
   14146:	b0c0      	sub	sp, #256	; 0x100
   14148:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1414a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1414c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   14150:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   14152:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14156:	2001      	movs	r0, #1
   14158:	4a13      	ldr	r2, [pc, #76]	; (141a8 <bt_gatt_store_ccc+0x68>)
   1415a:	ab0d      	add	r3, sp, #52	; 0x34
   1415c:	f007 fef5 	bl	1bf4a <bt_gatt_foreach_attr>
	if (id) {
   14160:	b1ec      	cbz	r4, 1419e <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   14162:	ae03      	add	r6, sp, #12
   14164:	4622      	mov	r2, r4
   14166:	2104      	movs	r1, #4
   14168:	4630      	mov	r0, r6
   1416a:	f005 fa3b 	bl	195e4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1416e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14170:	4a0e      	ldr	r2, [pc, #56]	; (141ac <bt_gatt_store_ccc+0x6c>)
   14172:	462b      	mov	r3, r5
   14174:	2124      	movs	r1, #36	; 0x24
   14176:	a804      	add	r0, sp, #16
   14178:	f7f9 fae2 	bl	d740 <bt_settings_encode_key>
	if (save.count) {
   1417c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1417e:	b182      	cbz	r2, 141a2 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   14180:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   14182:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   14184:	a804      	add	r0, sp, #16
   14186:	f7f6 ff09 	bl	af9c <settings_save_one>
	if (err) {
   1418a:	4604      	mov	r4, r0
   1418c:	b120      	cbz	r0, 14198 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1418e:	4602      	mov	r2, r0
   14190:	2145      	movs	r1, #69	; 0x45
   14192:	4807      	ldr	r0, [pc, #28]	; (141b0 <bt_gatt_store_ccc+0x70>)
   14194:	f005 fac0 	bl	19718 <printk>
}
   14198:	4620      	mov	r0, r4
   1419a:	b040      	add	sp, #256	; 0x100
   1419c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1419e:	9400      	str	r4, [sp, #0]
   141a0:	e7e6      	b.n	14170 <bt_gatt_store_ccc+0x30>
		str = NULL;
   141a2:	4611      	mov	r1, r2
   141a4:	e7ee      	b.n	14184 <bt_gatt_store_ccc+0x44>
   141a6:	bf00      	nop
   141a8:	00012905 	.word	0x00012905
   141ac:	000209b4 	.word	0x000209b4
   141b0:	00020a8c 	.word	0x00020a8c

000141b4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b8:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   141ba:	4603      	mov	r3, r0
   141bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   141c0:	2001      	movs	r0, #1
{
   141c2:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   141c4:	4a52      	ldr	r2, [pc, #328]	; (14310 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   141c6:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   141ca:	f007 febe 	bl	1bf4a <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   141ce:	4629      	mov	r1, r5
   141d0:	7a20      	ldrb	r0, [r4, #8]
   141d2:	f006 fec8 	bl	1af66 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   141d6:	b378      	cbz	r0, 14238 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   141d8:	4629      	mov	r1, r5
   141da:	7a20      	ldrb	r0, [r4, #8]
   141dc:	f7ff ffb0 	bl	14140 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   141e0:	4620      	mov	r0, r4
   141e2:	f7fe f8b1 	bl	12348 <find_cf_cfg>
	if (!cfg) {
   141e6:	4606      	mov	r6, r0
   141e8:	2800      	cmp	r0, #0
   141ea:	d05e      	beq.n	142aa <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   141ec:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   141ee:	3608      	adds	r6, #8
		if (conn->id) {
   141f0:	2a00      	cmp	r2, #0
   141f2:	d05c      	beq.n	142ae <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   141f4:	af02      	add	r7, sp, #8
   141f6:	2104      	movs	r1, #4
   141f8:	4638      	mov	r0, r7
   141fa:	f005 f9f3 	bl	195e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   141fe:	462b      	mov	r3, r5
   14200:	9700      	str	r7, [sp, #0]
   14202:	2124      	movs	r1, #36	; 0x24
   14204:	4a43      	ldr	r2, [pc, #268]	; (14314 <bt_gatt_disconnected+0x160>)
   14206:	a803      	add	r0, sp, #12
   14208:	f7f9 fa9a 	bl	d740 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1420c:	7a23      	ldrb	r3, [r4, #8]
   1420e:	2701      	movs	r7, #1
   14210:	b93b      	cbnz	r3, 14222 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   14212:	2300      	movs	r3, #0
   14214:	2124      	movs	r1, #36	; 0x24
   14216:	9300      	str	r3, [sp, #0]
   14218:	4a3e      	ldr	r2, [pc, #248]	; (14314 <bt_gatt_disconnected+0x160>)
   1421a:	462b      	mov	r3, r5
   1421c:	a803      	add	r0, sp, #12
   1421e:	f7f9 fa8f 	bl	d740 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   14222:	463a      	mov	r2, r7
   14224:	4631      	mov	r1, r6
   14226:	a803      	add	r0, sp, #12
   14228:	f7f6 feb8 	bl	af9c <settings_save_one>
	if (err) {
   1422c:	4602      	mov	r2, r0
   1422e:	b118      	cbz	r0, 14238 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   14230:	2145      	movs	r1, #69	; 0x45
   14232:	4839      	ldr	r0, [pc, #228]	; (14318 <bt_gatt_disconnected+0x164>)
   14234:	f005 fa70 	bl	19718 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14238:	4629      	mov	r1, r5
   1423a:	7a20      	ldrb	r0, [r4, #8]
   1423c:	f006 fe93 	bl	1af66 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14240:	b150      	cbz	r0, 14258 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   14242:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14244:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   14248:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1424c:	2001      	movs	r0, #1
   1424e:	4a33      	ldr	r2, [pc, #204]	; (1431c <bt_gatt_disconnected+0x168>)
   14250:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   14252:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14254:	f007 fe79 	bl	1bf4a <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14258:	4620      	mov	r0, r4
   1425a:	f7fe f8b3 	bl	123c4 <gatt_sub_find>
	if (!sub) {
   1425e:	4607      	mov	r7, r0
   14260:	b3b0      	cbz	r0, 142d0 <bt_gatt_disconnected+0x11c>
	return list->head;
   14262:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14264:	b3a3      	cbz	r3, 142d0 <bt_gatt_disconnected+0x11c>
   14266:	f1b3 0b14 	subs.w	fp, r3, #20
   1426a:	d031      	beq.n	142d0 <bt_gatt_disconnected+0x11c>
	return node->next;
   1426c:	681e      	ldr	r6, [r3, #0]
   1426e:	b106      	cbz	r6, 14272 <bt_gatt_disconnected+0xbe>
   14270:	3e14      	subs	r6, #20
   14272:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   14276:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14278:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1427c:	4629      	mov	r1, r5
   1427e:	7a20      	ldrb	r0, [r4, #8]
   14280:	f006 fe71 	bl	1af66 <bt_addr_le_is_bonded>
   14284:	b9a8      	cbnz	r0, 142b2 <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   14286:	465b      	mov	r3, fp
   14288:	4642      	mov	r2, r8
   1428a:	4639      	mov	r1, r7
   1428c:	4620      	mov	r0, r4
			params->value = 0U;
   1428e:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   14292:	f007 fcbb 	bl	1bc0c <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14296:	b1de      	cbz	r6, 142d0 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14298:	f116 0214 	adds.w	r2, r6, #20
   1429c:	d002      	beq.n	142a4 <bt_gatt_disconnected+0xf0>
	return node->next;
   1429e:	6972      	ldr	r2, [r6, #20]
   142a0:	b102      	cbz	r2, 142a4 <bt_gatt_disconnected+0xf0>
   142a2:	3a14      	subs	r2, #20
   142a4:	46b3      	mov	fp, r6
   142a6:	4616      	mov	r6, r2
   142a8:	e7e8      	b.n	1427c <bt_gatt_disconnected+0xc8>
		len = 0;
   142aa:	4607      	mov	r7, r0
   142ac:	e7b1      	b.n	14212 <bt_gatt_disconnected+0x5e>
   142ae:	2701      	movs	r7, #1
   142b0:	e7af      	b.n	14212 <bt_gatt_disconnected+0x5e>
   142b2:	f10b 0010 	add.w	r0, fp, #16
   142b6:	f007 fc81 	bl	1bbbc <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   142ba:	07c3      	lsls	r3, r0, #31
   142bc:	d4e3      	bmi.n	14286 <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   142be:	787b      	ldrb	r3, [r7, #1]
   142c0:	b11b      	cbz	r3, 142ca <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   142c2:	4629      	mov	r1, r5
   142c4:	4648      	mov	r0, r9
   142c6:	f007 fc5d 	bl	1bb84 <bt_addr_le_copy>
			prev = &params->node;
   142ca:	f10b 0814 	add.w	r8, fp, #20
   142ce:	e7e2      	b.n	14296 <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   142d0:	4620      	mov	r0, r4
   142d2:	f7fe f839 	bl	12348 <find_cf_cfg>
	if (!cfg) {
   142d6:	4606      	mov	r6, r0
   142d8:	b1b8      	cbz	r0, 1430a <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   142da:	4629      	mov	r1, r5
   142dc:	7a20      	ldrb	r0, [r4, #8]
   142de:	f006 fe42 	bl	1af66 <bt_addr_le_is_bonded>
   142e2:	b928      	cbnz	r0, 142f0 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   142e4:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   142e6:	b00d      	add	sp, #52	; 0x34
   142e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   142ec:	f007 bc75 	b.w	1bbda <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   142f0:	1c70      	adds	r0, r6, #1
   142f2:	4629      	mov	r1, r5
   142f4:	f007 fc46 	bl	1bb84 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142f8:	360c      	adds	r6, #12
   142fa:	e8d6 3fef 	ldaex	r3, [r6]
   142fe:	f023 0302 	bic.w	r3, r3, #2
   14302:	e8c6 3fe2 	stlex	r2, r3, [r6]
   14306:	2a00      	cmp	r2, #0
   14308:	d1f7      	bne.n	142fa <bt_gatt_disconnected+0x146>
}
   1430a:	b00d      	add	sp, #52	; 0x34
   1430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14310:	00012b9d 	.word	0x00012b9d
   14314:	00020ae0 	.word	0x00020ae0
   14318:	00020aaf 	.word	0x00020aaf
   1431c:	00012851 	.word	0x00012851

00014320 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   14320:	b570      	push	{r4, r5, r6, lr}
   14322:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   14324:	2400      	movs	r4, #0
   14326:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   14328:	4b09      	ldr	r3, [pc, #36]	; (14350 <bt_smp_accept+0x30>)
   1432a:	fb06 f504 	mul.w	r5, r6, r4
   1432e:	58e8      	ldr	r0, [r5, r3]
   14330:	b148      	cbz	r0, 14346 <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   14332:	3401      	adds	r4, #1
   14334:	2c0a      	cmp	r4, #10
   14336:	d1f8      	bne.n	1432a <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   14338:	4806      	ldr	r0, [pc, #24]	; (14354 <bt_smp_accept+0x34>)
   1433a:	2145      	movs	r1, #69	; 0x45
   1433c:	f005 f9ec 	bl	19718 <printk>
   14340:	f06f 000b 	mvn.w	r0, #11
   14344:	e003      	b.n	1434e <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   14346:	4a04      	ldr	r2, [pc, #16]	; (14358 <bt_smp_accept+0x38>)
   14348:	442b      	add	r3, r5
   1434a:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   1434c:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   1434e:	bd70      	pop	{r4, r5, r6, pc}
   14350:	20009ad0 	.word	0x20009ad0
   14354:	00020af1 	.word	0x00020af1
   14358:	0001dd6c 	.word	0x0001dd6c

0001435c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1435c:	222c      	movs	r2, #44	; 0x2c
   1435e:	4b02      	ldr	r3, [pc, #8]	; (14368 <net_buf_pool_get+0xc>)
   14360:	fb02 3000 	mla	r0, r2, r0, r3
   14364:	4770      	bx	lr
   14366:	bf00      	nop
   14368:	200086a4 	.word	0x200086a4

0001436c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1436c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1436e:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   14370:	4b04      	ldr	r3, [pc, #16]	; (14384 <net_buf_id+0x18>)
   14372:	fb01 3302 	mla	r3, r1, r2, r3
   14376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14378:	1ac0      	subs	r0, r0, r3
}
   1437a:	4b03      	ldr	r3, [pc, #12]	; (14388 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1437c:	10c0      	asrs	r0, r0, #3
}
   1437e:	4358      	muls	r0, r3
   14380:	4770      	bx	lr
   14382:	bf00      	nop
   14384:	200086a4 	.word	0x200086a4
   14388:	aaaaaaab 	.word	0xaaaaaaab

0001438c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1438c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1438e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14390:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14392:	4b09      	ldr	r3, [pc, #36]	; (143b8 <fixed_data_alloc+0x2c>)
   14394:	fb04 3302 	mla	r3, r4, r2, r3
   14398:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1439a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1439c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1439e:	6823      	ldr	r3, [r4, #0]
   143a0:	429a      	cmp	r2, r3
   143a2:	bf94      	ite	ls
   143a4:	600a      	strls	r2, [r1, #0]
   143a6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   143a8:	f7ff ffe0 	bl	1436c <net_buf_id>
   143ac:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   143b0:	fb02 3000 	mla	r0, r2, r0, r3
   143b4:	bd10      	pop	{r4, pc}
   143b6:	bf00      	nop
   143b8:	200086a4 	.word	0x200086a4

000143bc <net_buf_reset>:
{
   143bc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   143be:	7943      	ldrb	r3, [r0, #5]
{
   143c0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   143c2:	b143      	cbz	r3, 143d6 <net_buf_reset+0x1a>
   143c4:	490c      	ldr	r1, [pc, #48]	; (143f8 <net_buf_reset+0x3c>)
   143c6:	480d      	ldr	r0, [pc, #52]	; (143fc <net_buf_reset+0x40>)
   143c8:	224f      	movs	r2, #79	; 0x4f
   143ca:	f005 f9a5 	bl	19718 <printk>
   143ce:	214f      	movs	r1, #79	; 0x4f
   143d0:	4809      	ldr	r0, [pc, #36]	; (143f8 <net_buf_reset+0x3c>)
   143d2:	f005 fc47 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   143d6:	6823      	ldr	r3, [r4, #0]
   143d8:	b143      	cbz	r3, 143ec <net_buf_reset+0x30>
   143da:	4907      	ldr	r1, [pc, #28]	; (143f8 <net_buf_reset+0x3c>)
   143dc:	4807      	ldr	r0, [pc, #28]	; (143fc <net_buf_reset+0x40>)
   143de:	2250      	movs	r2, #80	; 0x50
   143e0:	f005 f99a 	bl	19718 <printk>
   143e4:	2150      	movs	r1, #80	; 0x50
   143e6:	4804      	ldr	r0, [pc, #16]	; (143f8 <net_buf_reset+0x3c>)
   143e8:	f005 fc3c 	bl	19c64 <assert_post_action>
	buf->len  = 0U;
   143ec:	2300      	movs	r3, #0
   143ee:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   143f0:	6923      	ldr	r3, [r4, #16]
   143f2:	60a3      	str	r3, [r4, #8]
}
   143f4:	bd10      	pop	{r4, pc}
   143f6:	bf00      	nop
   143f8:	00020b22 	.word	0x00020b22
   143fc:	0001e6bc 	.word	0x0001e6bc

00014400 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   14400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14404:	4605      	mov	r5, r0
   14406:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   14408:	4610      	mov	r0, r2
   1440a:	4619      	mov	r1, r3
{
   1440c:	4691      	mov	r9, r2
   1440e:	4698      	mov	r8, r3
   14410:	4617      	mov	r7, r2
   14412:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   14414:	f008 fdf3 	bl	1cffe <z_timeout_end_calc>
   14418:	4682      	mov	sl, r0
   1441a:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1441c:	b945      	cbnz	r5, 14430 <net_buf_alloc_len+0x30>
   1441e:	494a      	ldr	r1, [pc, #296]	; (14548 <net_buf_alloc_len+0x148>)
   14420:	484a      	ldr	r0, [pc, #296]	; (1454c <net_buf_alloc_len+0x14c>)
   14422:	22ed      	movs	r2, #237	; 0xed
   14424:	f005 f978 	bl	19718 <printk>
   14428:	21ed      	movs	r1, #237	; 0xed
   1442a:	4847      	ldr	r0, [pc, #284]	; (14548 <net_buf_alloc_len+0x148>)
   1442c:	f005 fc1a 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   14430:	f04f 0320 	mov.w	r3, #32
   14434:	f3ef 8111 	mrs	r1, BASEPRI
   14438:	f383 8811 	msr	BASEPRI, r3
   1443c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14440:	8beb      	ldrh	r3, [r5, #30]
   14442:	2b00      	cmp	r3, #0
   14444:	d055      	beq.n	144f2 <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   14446:	8baa      	ldrh	r2, [r5, #28]
   14448:	429a      	cmp	r2, r3
   1444a:	d93e      	bls.n	144ca <net_buf_alloc_len+0xca>
   1444c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1444e:	2200      	movs	r2, #0
   14450:	2300      	movs	r3, #0
   14452:	4628      	mov	r0, r5
   14454:	f002 ff34 	bl	172c0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   14458:	9900      	ldr	r1, [sp, #0]
   1445a:	4604      	mov	r4, r0
   1445c:	2800      	cmp	r0, #0
   1445e:	d034      	beq.n	144ca <net_buf_alloc_len+0xca>
	__asm__ volatile(
   14460:	f381 8811 	msr	BASEPRI, r1
   14464:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   14468:	9d01      	ldr	r5, [sp, #4]
   1446a:	2d00      	cmp	r5, #0
   1446c:	d069      	beq.n	14542 <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1446e:	ea58 0309 	orrs.w	r3, r8, r9
   14472:	d00f      	beq.n	14494 <net_buf_alloc_len+0x94>
   14474:	f1b8 3fff 	cmp.w	r8, #4294967295
   14478:	bf08      	it	eq
   1447a:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1447e:	d009      	beq.n	14494 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   14480:	f004 fd08 	bl	18e94 <z_tick_get>
   14484:	ebba 0700 	subs.w	r7, sl, r0
   14488:	eb6b 0601 	sbc.w	r6, fp, r1
   1448c:	2e00      	cmp	r6, #0
   1448e:	bfbc      	itt	lt
   14490:	2700      	movlt	r7, #0
   14492:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   14494:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14498:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1449a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14550 <net_buf_alloc_len+0x150>
   1449e:	463a      	mov	r2, r7
   144a0:	fb09 8303 	mla	r3, r9, r3, r8
   144a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   144a6:	4620      	mov	r0, r4
   144a8:	681b      	ldr	r3, [r3, #0]
   144aa:	a901      	add	r1, sp, #4
   144ac:	f8d3 a000 	ldr.w	sl, [r3]
   144b0:	4633      	mov	r3, r6
   144b2:	47d0      	blx	sl
   144b4:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   144b6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   144b8:	bb58      	cbnz	r0, 14512 <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   144ba:	79a0      	ldrb	r0, [r4, #6]
   144bc:	4621      	mov	r1, r4
   144be:	fb00 8009 	mla	r0, r0, r9, r8
   144c2:	f008 fcd1 	bl	1ce68 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   144c6:	4634      	mov	r4, r6
}
   144c8:	e01f      	b.n	1450a <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   144ca:	8beb      	ldrh	r3, [r5, #30]
   144cc:	1e5a      	subs	r2, r3, #1
   144ce:	83ea      	strh	r2, [r5, #30]
   144d0:	f381 8811 	msr	BASEPRI, r1
   144d4:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   144d8:	2018      	movs	r0, #24
   144da:	8bac      	ldrh	r4, [r5, #28]
   144dc:	1ae3      	subs	r3, r4, r3
   144de:	6aac      	ldr	r4, [r5, #40]	; 0x28
   144e0:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   144e4:	481a      	ldr	r0, [pc, #104]	; (14550 <net_buf_alloc_len+0x150>)
   144e6:	4b1b      	ldr	r3, [pc, #108]	; (14554 <net_buf_alloc_len+0x154>)
   144e8:	1a2d      	subs	r5, r5, r0
   144ea:	10ad      	asrs	r5, r5, #2
   144ec:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   144ee:	71a5      	strb	r5, [r4, #6]
		goto success;
   144f0:	e7ba      	b.n	14468 <net_buf_alloc_len+0x68>
   144f2:	f381 8811 	msr	BASEPRI, r1
   144f6:	f3bf 8f6f 	isb	sy
   144fa:	464a      	mov	r2, r9
   144fc:	4643      	mov	r3, r8
   144fe:	4628      	mov	r0, r5
   14500:	f002 fede 	bl	172c0 <z_impl_k_queue_get>
	if (!buf) {
   14504:	4604      	mov	r4, r0
   14506:	2800      	cmp	r0, #0
   14508:	d1ae      	bne.n	14468 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1450a:	4620      	mov	r0, r4
   1450c:	b003      	add	sp, #12
   1450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   14512:	9b01      	ldr	r3, [sp, #4]
   14514:	429d      	cmp	r5, r3
   14516:	d90a      	bls.n	1452e <net_buf_alloc_len+0x12e>
   14518:	490b      	ldr	r1, [pc, #44]	; (14548 <net_buf_alloc_len+0x148>)
   1451a:	480c      	ldr	r0, [pc, #48]	; (1454c <net_buf_alloc_len+0x14c>)
   1451c:	f240 124d 	movw	r2, #333	; 0x14d
   14520:	f005 f8fa 	bl	19718 <printk>
   14524:	f240 114d 	movw	r1, #333	; 0x14d
   14528:	4807      	ldr	r0, [pc, #28]	; (14548 <net_buf_alloc_len+0x148>)
   1452a:	f005 fb9b 	bl	19c64 <assert_post_action>
	buf->frags = NULL;
   1452e:	2300      	movs	r3, #0
   14530:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   14532:	2301      	movs	r3, #1
   14534:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   14536:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   14538:	4620      	mov	r0, r4
	buf->size  = size;
   1453a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1453c:	f7ff ff3e 	bl	143bc <net_buf_reset>
	return buf;
   14540:	e7e3      	b.n	1450a <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   14542:	6125      	str	r5, [r4, #16]
   14544:	e7f3      	b.n	1452e <net_buf_alloc_len+0x12e>
   14546:	bf00      	nop
   14548:	00020b22 	.word	0x00020b22
   1454c:	0001e6bc 	.word	0x0001e6bc
   14550:	200086a4 	.word	0x200086a4
   14554:	ba2e8ba3 	.word	0xba2e8ba3

00014558 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   14558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1455c:	4606      	mov	r6, r0
   1455e:	f002 feaf 	bl	172c0 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   14562:	4605      	mov	r5, r0
   14564:	b140      	cbz	r0, 14578 <net_buf_get+0x20>
   14566:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   14568:	4f11      	ldr	r7, [pc, #68]	; (145b0 <net_buf_get+0x58>)
   1456a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 145b4 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1456e:	7963      	ldrb	r3, [r4, #5]
   14570:	f013 0301 	ands.w	r3, r3, #1
   14574:	d103      	bne.n	1457e <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   14576:	6023      	str	r3, [r4, #0]

	return buf;
}
   14578:	4628      	mov	r0, r5
   1457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1457e:	2200      	movs	r2, #0
   14580:	2300      	movs	r3, #0
   14582:	4630      	mov	r0, r6
   14584:	f002 fe9c 	bl	172c0 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   14588:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1458a:	b950      	cbnz	r0, 145a2 <net_buf_get+0x4a>
   1458c:	4639      	mov	r1, r7
   1458e:	4640      	mov	r0, r8
   14590:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   14594:	f005 f8c0 	bl	19718 <printk>
   14598:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1459c:	4638      	mov	r0, r7
   1459e:	f005 fb61 	bl	19c64 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   145a2:	7963      	ldrb	r3, [r4, #5]
   145a4:	f023 0301 	bic.w	r3, r3, #1
   145a8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   145aa:	6824      	ldr	r4, [r4, #0]
   145ac:	e7df      	b.n	1456e <net_buf_get+0x16>
   145ae:	bf00      	nop
   145b0:	00020b22 	.word	0x00020b22
   145b4:	0001e6bc 	.word	0x0001e6bc

000145b8 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   145b8:	b538      	push	{r3, r4, r5, lr}
   145ba:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   145bc:	4604      	mov	r4, r0
   145be:	b950      	cbnz	r0, 145d6 <net_buf_simple_reserve+0x1e>
   145c0:	490d      	ldr	r1, [pc, #52]	; (145f8 <net_buf_simple_reserve+0x40>)
   145c2:	480e      	ldr	r0, [pc, #56]	; (145fc <net_buf_simple_reserve+0x44>)
   145c4:	f240 12bb 	movw	r2, #443	; 0x1bb
   145c8:	f005 f8a6 	bl	19718 <printk>
   145cc:	f240 11bb 	movw	r1, #443	; 0x1bb
   145d0:	4809      	ldr	r0, [pc, #36]	; (145f8 <net_buf_simple_reserve+0x40>)
   145d2:	f005 fb47 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   145d6:	88a3      	ldrh	r3, [r4, #4]
   145d8:	b153      	cbz	r3, 145f0 <net_buf_simple_reserve+0x38>
   145da:	4907      	ldr	r1, [pc, #28]	; (145f8 <net_buf_simple_reserve+0x40>)
   145dc:	4807      	ldr	r0, [pc, #28]	; (145fc <net_buf_simple_reserve+0x44>)
   145de:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   145e2:	f005 f899 	bl	19718 <printk>
   145e6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   145ea:	4803      	ldr	r0, [pc, #12]	; (145f8 <net_buf_simple_reserve+0x40>)
   145ec:	f005 fb3a 	bl	19c64 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   145f0:	68a3      	ldr	r3, [r4, #8]
   145f2:	442b      	add	r3, r5
   145f4:	6023      	str	r3, [r4, #0]
}
   145f6:	bd38      	pop	{r3, r4, r5, pc}
   145f8:	00020b22 	.word	0x00020b22
   145fc:	0001e6bc 	.word	0x0001e6bc

00014600 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   14600:	b538      	push	{r3, r4, r5, lr}
   14602:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   14604:	4605      	mov	r5, r0
   14606:	b950      	cbnz	r0, 1461e <net_buf_put+0x1e>
   14608:	4912      	ldr	r1, [pc, #72]	; (14654 <net_buf_put+0x54>)
   1460a:	4813      	ldr	r0, [pc, #76]	; (14658 <net_buf_put+0x58>)
   1460c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   14610:	f005 f882 	bl	19718 <printk>
   14614:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   14618:	480e      	ldr	r0, [pc, #56]	; (14654 <net_buf_put+0x54>)
   1461a:	f005 fb23 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1461e:	b954      	cbnz	r4, 14636 <net_buf_put+0x36>
   14620:	490c      	ldr	r1, [pc, #48]	; (14654 <net_buf_put+0x54>)
   14622:	480d      	ldr	r0, [pc, #52]	; (14658 <net_buf_put+0x58>)
   14624:	f240 12f9 	movw	r2, #505	; 0x1f9
   14628:	f005 f876 	bl	19718 <printk>
   1462c:	f240 11f9 	movw	r1, #505	; 0x1f9
   14630:	4808      	ldr	r0, [pc, #32]	; (14654 <net_buf_put+0x54>)
   14632:	f005 fb17 	bl	19c64 <assert_post_action>
{
   14636:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   14638:	6811      	ldr	r1, [r2, #0]
   1463a:	b929      	cbnz	r1, 14648 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1463c:	4621      	mov	r1, r4
   1463e:	4628      	mov	r0, r5
}
   14640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   14644:	f002 bde8 	b.w	17218 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   14648:	7953      	ldrb	r3, [r2, #5]
   1464a:	f043 0301 	orr.w	r3, r3, #1
   1464e:	7153      	strb	r3, [r2, #5]
   14650:	460a      	mov	r2, r1
   14652:	e7f1      	b.n	14638 <net_buf_put+0x38>
   14654:	00020b22 	.word	0x00020b22
   14658:	0001e6bc 	.word	0x0001e6bc

0001465c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   14660:	4605      	mov	r5, r0
   14662:	b328      	cbz	r0, 146b0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   14664:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   14666:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1466a:	4e1b      	ldr	r6, [pc, #108]	; (146d8 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   1466c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1466e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   14670:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   14672:	3b01      	subs	r3, #1
   14674:	b2db      	uxtb	r3, r3
   14676:	7123      	strb	r3, [r4, #4]
   14678:	b9c3      	cbnz	r3, 146ac <net_buf_unref+0x50>
		if (buf->__buf) {
   1467a:	6921      	ldr	r1, [r4, #16]
   1467c:	b159      	cbz	r1, 14696 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1467e:	7963      	ldrb	r3, [r4, #5]
   14680:	079b      	lsls	r3, r3, #30
   14682:	d407      	bmi.n	14694 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14684:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   14686:	4620      	mov	r0, r4
   14688:	fb08 6303 	mla	r3, r8, r3, r6
   1468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1468e:	681b      	ldr	r3, [r3, #0]
   14690:	689b      	ldr	r3, [r3, #8]
   14692:	4798      	blx	r3
			buf->__buf = NULL;
   14694:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   14696:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   14698:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1469a:	fb08 6300 	mla	r3, r8, r0, r6
   1469e:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   146a0:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   146a2:	b193      	cbz	r3, 146ca <net_buf_unref+0x6e>
			pool->destroy(buf);
   146a4:	4620      	mov	r0, r4
   146a6:	4798      	blx	r3
	while (buf) {
   146a8:	2d00      	cmp	r5, #0
   146aa:	d1df      	bne.n	1466c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   146b0:	490a      	ldr	r1, [pc, #40]	; (146dc <net_buf_unref+0x80>)
   146b2:	480b      	ldr	r0, [pc, #44]	; (146e0 <net_buf_unref+0x84>)
   146b4:	f44f 7202 	mov.w	r2, #520	; 0x208
   146b8:	f005 f82e 	bl	19718 <printk>
}
   146bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   146c0:	f44f 7102 	mov.w	r1, #520	; 0x208
   146c4:	4805      	ldr	r0, [pc, #20]	; (146dc <net_buf_unref+0x80>)
   146c6:	f005 bacd 	b.w	19c64 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   146ca:	4621      	mov	r1, r4
   146cc:	fb00 6008 	mla	r0, r0, r8, r6
   146d0:	f008 fbca 	bl	1ce68 <k_queue_prepend>
}
   146d4:	e7e8      	b.n	146a8 <net_buf_unref+0x4c>
   146d6:	bf00      	nop
   146d8:	200086a4 	.word	0x200086a4
   146dc:	00020b22 	.word	0x00020b22
   146e0:	0001e6bc 	.word	0x0001e6bc

000146e4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   146e4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   146e6:	4604      	mov	r4, r0
   146e8:	b950      	cbnz	r0, 14700 <net_buf_ref+0x1c>
   146ea:	4908      	ldr	r1, [pc, #32]	; (1470c <net_buf_ref+0x28>)
   146ec:	4808      	ldr	r0, [pc, #32]	; (14710 <net_buf_ref+0x2c>)
   146ee:	f240 2237 	movw	r2, #567	; 0x237
   146f2:	f005 f811 	bl	19718 <printk>
   146f6:	f240 2137 	movw	r1, #567	; 0x237
   146fa:	4804      	ldr	r0, [pc, #16]	; (1470c <net_buf_ref+0x28>)
   146fc:	f005 fab2 	bl	19c64 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   14700:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   14702:	4620      	mov	r0, r4
	buf->ref++;
   14704:	3301      	adds	r3, #1
   14706:	7123      	strb	r3, [r4, #4]
}
   14708:	bd10      	pop	{r4, pc}
   1470a:	bf00      	nop
   1470c:	00020b22 	.word	0x00020b22
   14710:	0001e6bc 	.word	0x0001e6bc

00014714 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   14714:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   14716:	4604      	mov	r4, r0
   14718:	b950      	cbnz	r0, 14730 <net_buf_frag_last+0x1c>
   1471a:	4908      	ldr	r1, [pc, #32]	; (1473c <net_buf_frag_last+0x28>)
   1471c:	4808      	ldr	r0, [pc, #32]	; (14740 <net_buf_frag_last+0x2c>)
   1471e:	f44f 721d 	mov.w	r2, #628	; 0x274
   14722:	f004 fff9 	bl	19718 <printk>
   14726:	f44f 711d 	mov.w	r1, #628	; 0x274
   1472a:	4804      	ldr	r0, [pc, #16]	; (1473c <net_buf_frag_last+0x28>)
   1472c:	f005 fa9a 	bl	19c64 <assert_post_action>

	while (buf->frags) {
   14730:	4620      	mov	r0, r4
   14732:	6824      	ldr	r4, [r4, #0]
   14734:	2c00      	cmp	r4, #0
   14736:	d1fb      	bne.n	14730 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   14738:	bd10      	pop	{r4, pc}
   1473a:	bf00      	nop
   1473c:	00020b22 	.word	0x00020b22
   14740:	0001e6bc 	.word	0x0001e6bc

00014744 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   14744:	b538      	push	{r3, r4, r5, lr}
   14746:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   14748:	4604      	mov	r4, r0
   1474a:	b950      	cbnz	r0, 14762 <net_buf_frag_insert+0x1e>
   1474c:	490f      	ldr	r1, [pc, #60]	; (1478c <net_buf_frag_insert+0x48>)
   1474e:	4810      	ldr	r0, [pc, #64]	; (14790 <net_buf_frag_insert+0x4c>)
   14750:	f240 227f 	movw	r2, #639	; 0x27f
   14754:	f004 ffe0 	bl	19718 <printk>
   14758:	f240 217f 	movw	r1, #639	; 0x27f
   1475c:	480b      	ldr	r0, [pc, #44]	; (1478c <net_buf_frag_insert+0x48>)
   1475e:	f005 fa81 	bl	19c64 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   14762:	b955      	cbnz	r5, 1477a <net_buf_frag_insert+0x36>
   14764:	4909      	ldr	r1, [pc, #36]	; (1478c <net_buf_frag_insert+0x48>)
   14766:	480a      	ldr	r0, [pc, #40]	; (14790 <net_buf_frag_insert+0x4c>)
   14768:	f44f 7220 	mov.w	r2, #640	; 0x280
   1476c:	f004 ffd4 	bl	19718 <printk>
   14770:	f44f 7120 	mov.w	r1, #640	; 0x280
   14774:	4805      	ldr	r0, [pc, #20]	; (1478c <net_buf_frag_insert+0x48>)
   14776:	f005 fa75 	bl	19c64 <assert_post_action>

	if (parent->frags) {
   1477a:	6823      	ldr	r3, [r4, #0]
   1477c:	b123      	cbz	r3, 14788 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1477e:	4628      	mov	r0, r5
   14780:	f7ff ffc8 	bl	14714 <net_buf_frag_last>
   14784:	6823      	ldr	r3, [r4, #0]
   14786:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   14788:	6025      	str	r5, [r4, #0]
}
   1478a:	bd38      	pop	{r3, r4, r5, pc}
   1478c:	00020b22 	.word	0x00020b22
   14790:	0001e6bc 	.word	0x0001e6bc

00014794 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   14794:	b538      	push	{r3, r4, r5, lr}
   14796:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   14798:	460d      	mov	r5, r1
   1479a:	b951      	cbnz	r1, 147b2 <net_buf_frag_add+0x1e>
   1479c:	490c      	ldr	r1, [pc, #48]	; (147d0 <net_buf_frag_add+0x3c>)
   1479e:	480d      	ldr	r0, [pc, #52]	; (147d4 <net_buf_frag_add+0x40>)
   147a0:	f240 228b 	movw	r2, #651	; 0x28b
   147a4:	f004 ffb8 	bl	19718 <printk>
   147a8:	f240 218b 	movw	r1, #651	; 0x28b
   147ac:	4808      	ldr	r0, [pc, #32]	; (147d0 <net_buf_frag_add+0x3c>)
   147ae:	f005 fa59 	bl	19c64 <assert_post_action>

	if (!head) {
   147b2:	b924      	cbnz	r4, 147be <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   147b4:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   147b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   147ba:	f7ff bf93 	b.w	146e4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   147be:	4620      	mov	r0, r4
   147c0:	f7ff ffa8 	bl	14714 <net_buf_frag_last>
   147c4:	4629      	mov	r1, r5
   147c6:	f7ff ffbd 	bl	14744 <net_buf_frag_insert>
}
   147ca:	4620      	mov	r0, r4
   147cc:	bd38      	pop	{r3, r4, r5, pc}
   147ce:	bf00      	nop
   147d0:	00020b22 	.word	0x00020b22
   147d4:	0001e6bc 	.word	0x0001e6bc

000147d8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   147d8:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   147da:	6882      	ldr	r2, [r0, #8]
   147dc:	6803      	ldr	r3, [r0, #0]
{
   147de:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   147e0:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   147e2:	4299      	cmp	r1, r3
{
   147e4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   147e6:	d90a      	bls.n	147fe <net_buf_simple_push+0x26>
   147e8:	4908      	ldr	r1, [pc, #32]	; (1480c <net_buf_simple_push+0x34>)
   147ea:	4809      	ldr	r0, [pc, #36]	; (14810 <net_buf_simple_push+0x38>)
   147ec:	f240 4204 	movw	r2, #1028	; 0x404
   147f0:	f004 ff92 	bl	19718 <printk>
   147f4:	f240 4104 	movw	r1, #1028	; 0x404
   147f8:	4804      	ldr	r0, [pc, #16]	; (1480c <net_buf_simple_push+0x34>)
   147fa:	f005 fa33 	bl	19c64 <assert_post_action>
	buf->data -= len;
   147fe:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   14800:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   14802:	1b40      	subs	r0, r0, r5
	buf->len += len;
   14804:	440d      	add	r5, r1
	buf->data -= len;
   14806:	6020      	str	r0, [r4, #0]
	buf->len += len;
   14808:	80a5      	strh	r5, [r4, #4]
}
   1480a:	bd38      	pop	{r3, r4, r5, pc}
   1480c:	00020b22 	.word	0x00020b22
   14810:	0001e6bc 	.word	0x0001e6bc

00014814 <net_buf_simple_pull>:
{
   14814:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14816:	8883      	ldrh	r3, [r0, #4]
{
   14818:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1481a:	428b      	cmp	r3, r1
{
   1481c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1481e:	d20a      	bcs.n	14836 <net_buf_simple_pull+0x22>
   14820:	4908      	ldr	r1, [pc, #32]	; (14844 <net_buf_simple_pull+0x30>)
   14822:	4809      	ldr	r0, [pc, #36]	; (14848 <net_buf_simple_pull+0x34>)
   14824:	f240 4264 	movw	r2, #1124	; 0x464
   14828:	f004 ff76 	bl	19718 <printk>
   1482c:	f240 4164 	movw	r1, #1124	; 0x464
   14830:	4804      	ldr	r0, [pc, #16]	; (14844 <net_buf_simple_pull+0x30>)
   14832:	f005 fa17 	bl	19c64 <assert_post_action>
	buf->len -= len;
   14836:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   14838:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1483a:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1483c:	4428      	add	r0, r5
	buf->len -= len;
   1483e:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   14840:	6020      	str	r0, [r4, #0]
}
   14842:	bd38      	pop	{r3, r4, r5, pc}
   14844:	00020b22 	.word	0x00020b22
   14848:	0001e6bc 	.word	0x0001e6bc

0001484c <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1484c:	8883      	ldrh	r3, [r0, #4]
{
   1484e:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14850:	428b      	cmp	r3, r1
{
   14852:	4604      	mov	r4, r0
   14854:	460d      	mov	r5, r1
	void *data = buf->data;
   14856:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   14858:	d20a      	bcs.n	14870 <net_buf_simple_pull_mem+0x24>
   1485a:	4909      	ldr	r1, [pc, #36]	; (14880 <net_buf_simple_pull_mem+0x34>)
   1485c:	4809      	ldr	r0, [pc, #36]	; (14884 <net_buf_simple_pull_mem+0x38>)
   1485e:	f44f 628e 	mov.w	r2, #1136	; 0x470
   14862:	f004 ff59 	bl	19718 <printk>
   14866:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1486a:	4805      	ldr	r0, [pc, #20]	; (14880 <net_buf_simple_pull_mem+0x34>)
   1486c:	f005 f9fa 	bl	19c64 <assert_post_action>
	buf->len -= len;
   14870:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   14872:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   14874:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   14876:	4429      	add	r1, r5
}
   14878:	4630      	mov	r0, r6
	buf->len -= len;
   1487a:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1487c:	6021      	str	r1, [r4, #0]
}
   1487e:	bd70      	pop	{r4, r5, r6, pc}
   14880:	00020b22 	.word	0x00020b22
   14884:	0001e6bc 	.word	0x0001e6bc

00014888 <net_buf_simple_add>:
{
   14888:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1488a:	6803      	ldr	r3, [r0, #0]
   1488c:	8886      	ldrh	r6, [r0, #4]
   1488e:	4604      	mov	r4, r0
   14890:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14892:	f007 fc9b 	bl	1c1cc <net_buf_simple_tailroom>
   14896:	4288      	cmp	r0, r1
{
   14898:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1489a:	d20a      	bcs.n	148b2 <net_buf_simple_add+0x2a>
   1489c:	4907      	ldr	r1, [pc, #28]	; (148bc <net_buf_simple_add+0x34>)
   1489e:	4808      	ldr	r0, [pc, #32]	; (148c0 <net_buf_simple_add+0x38>)
   148a0:	f240 3215 	movw	r2, #789	; 0x315
   148a4:	f004 ff38 	bl	19718 <printk>
   148a8:	f240 3115 	movw	r1, #789	; 0x315
   148ac:	4803      	ldr	r0, [pc, #12]	; (148bc <net_buf_simple_add+0x34>)
   148ae:	f005 f9d9 	bl	19c64 <assert_post_action>
	buf->len += len;
   148b2:	88a1      	ldrh	r1, [r4, #4]
}
   148b4:	4630      	mov	r0, r6
	buf->len += len;
   148b6:	440d      	add	r5, r1
   148b8:	80a5      	strh	r5, [r4, #4]
}
   148ba:	bd70      	pop	{r4, r5, r6, pc}
   148bc:	00020b22 	.word	0x00020b22
   148c0:	0001e6bc 	.word	0x0001e6bc

000148c4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   148c4:	b570      	push	{r4, r5, r6, lr}
   148c6:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   148c8:	460c      	mov	r4, r1
	return port->data;
   148ca:	68c5      	ldr	r5, [r0, #12]
   148cc:	b941      	cbnz	r1, 148e0 <gpio_nrfx_manage_callback+0x1c>
   148ce:	491e      	ldr	r1, [pc, #120]	; (14948 <gpio_nrfx_manage_callback+0x84>)
   148d0:	481e      	ldr	r0, [pc, #120]	; (1494c <gpio_nrfx_manage_callback+0x88>)
   148d2:	2224      	movs	r2, #36	; 0x24
   148d4:	f004 ff20 	bl	19718 <printk>
   148d8:	2124      	movs	r1, #36	; 0x24
   148da:	481b      	ldr	r0, [pc, #108]	; (14948 <gpio_nrfx_manage_callback+0x84>)
   148dc:	f005 f9c2 	bl	19c64 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   148e0:	6863      	ldr	r3, [r4, #4]
   148e2:	b943      	cbnz	r3, 148f6 <gpio_nrfx_manage_callback+0x32>
   148e4:	4918      	ldr	r1, [pc, #96]	; (14948 <gpio_nrfx_manage_callback+0x84>)
   148e6:	4819      	ldr	r0, [pc, #100]	; (1494c <gpio_nrfx_manage_callback+0x88>)
   148e8:	2225      	movs	r2, #37	; 0x25
   148ea:	f004 ff15 	bl	19718 <printk>
   148ee:	2125      	movs	r1, #37	; 0x25
   148f0:	4815      	ldr	r0, [pc, #84]	; (14948 <gpio_nrfx_manage_callback+0x84>)
   148f2:	f005 f9b7 	bl	19c64 <assert_post_action>
	return list->head;
   148f6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   148f8:	b15b      	cbz	r3, 14912 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   148fa:	2200      	movs	r2, #0
   148fc:	429c      	cmp	r4, r3
   148fe:	d112      	bne.n	14926 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   14900:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   14902:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   14904:	b952      	cbnz	r2, 1491c <gpio_nrfx_manage_callback+0x58>
   14906:	42a1      	cmp	r1, r4
	list->head = node;
   14908:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1490a:	d100      	bne.n	1490e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1490c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1490e:	2300      	movs	r3, #0
   14910:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   14912:	b96e      	cbnz	r6, 14930 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   14914:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   14916:	bd70      	pop	{r4, r5, r6, pc}
   14918:	460b      	mov	r3, r1
   1491a:	e7ef      	b.n	148fc <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1491c:	42a1      	cmp	r1, r4
	parent->next = child;
   1491e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14920:	bf08      	it	eq
   14922:	60aa      	streq	r2, [r5, #8]
}
   14924:	e7f3      	b.n	1490e <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   14926:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14928:	461a      	mov	r2, r3
   1492a:	2900      	cmp	r1, #0
   1492c:	d1f4      	bne.n	14918 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1492e:	b13e      	cbz	r6, 14940 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   14930:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14932:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   14934:	6023      	str	r3, [r4, #0]
	list->head = node;
   14936:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14938:	2800      	cmp	r0, #0
   1493a:	d1eb      	bne.n	14914 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1493c:	60ac      	str	r4, [r5, #8]
}
   1493e:	e7ea      	b.n	14916 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   14940:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14944:	e7e7      	b.n	14916 <gpio_nrfx_manage_callback+0x52>
   14946:	bf00      	nop
   14948:	00020b4e 	.word	0x00020b4e
   1494c:	0001e6bc 	.word	0x0001e6bc

00014950 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14950:	6802      	ldr	r2, [r0, #0]
{
   14952:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   14954:	0953      	lsrs	r3, r2, #5
{
   14956:	4604      	mov	r4, r0
    switch (port)
   14958:	d029      	beq.n	149ae <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1495a:	2b01      	cmp	r3, #1
   1495c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14960:	bf18      	it	ne
   14962:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   14964:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   14968:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1496a:	07db      	lsls	r3, r3, #31
   1496c:	d40a      	bmi.n	14984 <nrf_gpio_pin_port_decode+0x34>
   1496e:	4912      	ldr	r1, [pc, #72]	; (149b8 <nrf_gpio_pin_port_decode+0x68>)
   14970:	4812      	ldr	r0, [pc, #72]	; (149bc <nrf_gpio_pin_port_decode+0x6c>)
   14972:	f240 221a 	movw	r2, #538	; 0x21a
   14976:	f004 fecf 	bl	19718 <printk>
   1497a:	f240 211a 	movw	r1, #538	; 0x21a
   1497e:	480e      	ldr	r0, [pc, #56]	; (149b8 <nrf_gpio_pin_port_decode+0x68>)
   14980:	f005 f970 	bl	19c64 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   14984:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14986:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1498a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1498c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1498e:	d00c      	beq.n	149aa <nrf_gpio_pin_port_decode+0x5a>
   14990:	2b01      	cmp	r3, #1
   14992:	d00f      	beq.n	149b4 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   14994:	4908      	ldr	r1, [pc, #32]	; (149b8 <nrf_gpio_pin_port_decode+0x68>)
   14996:	4809      	ldr	r0, [pc, #36]	; (149bc <nrf_gpio_pin_port_decode+0x6c>)
   14998:	f240 221f 	movw	r2, #543	; 0x21f
   1499c:	f004 febc 	bl	19718 <printk>
   149a0:	f240 211f 	movw	r1, #543	; 0x21f
   149a4:	4804      	ldr	r0, [pc, #16]	; (149b8 <nrf_gpio_pin_port_decode+0x68>)
   149a6:	f005 f95d 	bl	19c64 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   149aa:	4805      	ldr	r0, [pc, #20]	; (149c0 <nrf_gpio_pin_port_decode+0x70>)
}
   149ac:	bd10      	pop	{r4, pc}
    switch (port)
   149ae:	f04f 33ff 	mov.w	r3, #4294967295
   149b2:	e7d7      	b.n	14964 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   149b4:	4803      	ldr	r0, [pc, #12]	; (149c4 <nrf_gpio_pin_port_decode+0x74>)
   149b6:	e7f9      	b.n	149ac <nrf_gpio_pin_port_decode+0x5c>
   149b8:	00020b7b 	.word	0x00020b7b
   149bc:	0001e6bc 	.word	0x0001e6bc
   149c0:	40842500 	.word	0x40842500
   149c4:	40842800 	.word	0x40842800

000149c8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   149c8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   149ca:	4b09      	ldr	r3, [pc, #36]	; (149f0 <gpio_nrfx_init+0x28>)
   149cc:	781a      	ldrb	r2, [r3, #0]
   149ce:	b96a      	cbnz	r2, 149ec <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   149d0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   149d2:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   149d4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   149d6:	2105      	movs	r1, #5
   149d8:	f7f8 f89c 	bl	cb14 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   149dc:	202f      	movs	r0, #47	; 0x2f
   149de:	f7f8 f87b 	bl	cad8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   149e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   149e6:	4b03      	ldr	r3, [pc, #12]	; (149f4 <gpio_nrfx_init+0x2c>)
   149e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   149ec:	2000      	movs	r0, #0
   149ee:	bd08      	pop	{r3, pc}
   149f0:	2000c5bf 	.word	0x2000c5bf
   149f4:	4002f000 	.word	0x4002f000

000149f8 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   149f8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   149fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14a00:	4680      	mov	r8, r0
   14a02:	460e      	mov	r6, r1
   14a04:	4617      	mov	r7, r2
   14a06:	4699      	mov	r9, r3
	return port->data;
   14a08:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   14a0a:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14a0e:	f040 80ab 	bne.w	14b68 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14a12:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14a14:	a801      	add	r0, sp, #4
   14a16:	7a1b      	ldrb	r3, [r3, #8]
   14a18:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   14a1c:	9301      	str	r3, [sp, #4]
   14a1e:	f7ff ff97 	bl	14950 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14a22:	9b01      	ldr	r3, [sp, #4]
   14a24:	3380      	adds	r3, #128	; 0x80
   14a26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14a2a:	07d8      	lsls	r0, r3, #31
   14a2c:	f100 80bb 	bmi.w	14ba6 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14a30:	2101      	movs	r1, #1
   14a32:	68e3      	ldr	r3, [r4, #12]
   14a34:	40b1      	lsls	r1, r6
   14a36:	4319      	orrs	r1, r3
   14a38:	60e1      	str	r1, [r4, #12]
   14a3a:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14a3c:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14a3e:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14a40:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14a42:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   14a46:	bf0c      	ite	eq
   14a48:	430b      	orreq	r3, r1
   14a4a:	438b      	bicne	r3, r1
   14a4c:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14a4e:	69a3      	ldr	r3, [r4, #24]
   14a50:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   14a54:	bf0c      	ite	eq
   14a56:	430b      	orreq	r3, r1
   14a58:	438b      	bicne	r3, r1
   14a5a:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14a5c:	6923      	ldr	r3, [r4, #16]
   14a5e:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   14a62:	bf0c      	ite	eq
   14a64:	4319      	orreq	r1, r3
   14a66:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14a6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14a6e:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14a70:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14a72:	4a4e      	ldr	r2, [pc, #312]	; (14bac <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14a74:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   14a78:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   14a7c:	f8d8 700c 	ldr.w	r7, [r8, #12]
   14a80:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14a82:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14a86:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   14a8a:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14a8e:	428d      	cmp	r5, r1
   14a90:	d175      	bne.n	14b7e <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   14a92:	fa23 f100 	lsr.w	r1, r3, r0
   14a96:	07c9      	lsls	r1, r1, #31
   14a98:	d571      	bpl.n	14b7e <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   14a9a:	0083      	lsls	r3, r0, #2
   14a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14aa0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14aa4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   14aa8:	f021 0101 	bic.w	r1, r1, #1
   14aac:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14ab0:	2301      	movs	r3, #1
   14ab2:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   14ab4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   14ab8:	b2c0      	uxtb	r0, r0
   14aba:	f001 f9bf 	bl	15e3c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14abe:	4628      	mov	r0, r5
   14ac0:	2100      	movs	r1, #0
   14ac2:	f007 fbc7 	bl	1c254 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   14ac6:	68f8      	ldr	r0, [r7, #12]
   14ac8:	40f0      	lsrs	r0, r6
   14aca:	f010 0001 	ands.w	r0, r0, #1
   14ace:	d048      	beq.n	14b62 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   14ad0:	6978      	ldr	r0, [r7, #20]
   14ad2:	40f0      	lsrs	r0, r6
   14ad4:	f010 0401 	ands.w	r4, r0, #1
   14ad8:	d059      	beq.n	14b8e <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   14ada:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14adc:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   14ade:	40f3      	lsrs	r3, r6
   14ae0:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14ae2:	bf57      	itett	pl
   14ae4:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14ae6:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14ae8:	fa21 f606 	lsrpl.w	r6, r1, r6
   14aec:	f006 0601 	andpl.w	r6, r6, #1
   14af0:	bf5c      	itt	pl
   14af2:	f1c6 0602 	rsbpl	r6, r6, #2
   14af6:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14af8:	f001 f9c0 	bl	15e7c <nrfx_gpiote_channel_alloc>
   14afc:	4b2c      	ldr	r3, [pc, #176]	; (14bb0 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   14afe:	4298      	cmp	r0, r3
   14b00:	d142      	bne.n	14b88 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14b02:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   14b04:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14b08:	022d      	lsls	r5, r5, #8
   14b0a:	008b      	lsls	r3, r1, #2
   14b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14b10:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14b14:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14b18:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14b1c:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   14b20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   14b24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14b28:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14b2c:	4315      	orrs	r5, r2
   14b2e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   14b32:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   14b36:	4b1f      	ldr	r3, [pc, #124]	; (14bb4 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   14b38:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14b3a:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   14b3c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   14b40:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14b42:	008b      	lsls	r3, r1, #2
   14b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14b48:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14b4c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14b50:	f042 0201 	orr.w	r2, r2, #1
   14b54:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   14b58:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   14b5a:	4a14      	ldr	r2, [pc, #80]	; (14bac <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14b5c:	408b      	lsls	r3, r1
   14b5e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14b62:	b003      	add	sp, #12
   14b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14b68:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14b6c:	f47f af60 	bne.w	14a30 <gpio_nrfx_pin_interrupt_configure+0x38>
   14b70:	2101      	movs	r1, #1
   14b72:	fa01 f306 	lsl.w	r3, r1, r6
   14b76:	68e1      	ldr	r1, [r4, #12]
   14b78:	ea21 0103 	bic.w	r1, r1, r3
   14b7c:	e75c      	b.n	14a38 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14b7e:	3001      	adds	r0, #1
   14b80:	2808      	cmp	r0, #8
   14b82:	f47f af7e 	bne.w	14a82 <gpio_nrfx_pin_interrupt_configure+0x8a>
   14b86:	e79a      	b.n	14abe <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   14b88:	f06f 0012 	mvn.w	r0, #18
   14b8c:	e7e9      	b.n	14b62 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14b8e:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14b90:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14b92:	40f1      	lsrs	r1, r6
   14b94:	f001 0101 	and.w	r1, r1, #1
   14b98:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14b9c:	b2c9      	uxtb	r1, r1
   14b9e:	f007 fb59 	bl	1c254 <nrf_gpio_cfg_sense_set>
	int res = 0;
   14ba2:	4620      	mov	r0, r4
   14ba4:	e7dd      	b.n	14b62 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   14ba6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14baa:	e7da      	b.n	14b62 <gpio_nrfx_pin_interrupt_configure+0x16a>
   14bac:	4002f000 	.word	0x4002f000
   14bb0:	0bad0000 	.word	0x0bad0000
   14bb4:	4002f100 	.word	0x4002f100

00014bb8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14bb8:	4b2e      	ldr	r3, [pc, #184]	; (14c74 <gpio_nrfx_config+0xbc>)
{
   14bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14bbc:	4c2e      	ldr	r4, [pc, #184]	; (14c78 <gpio_nrfx_config+0xc0>)
   14bbe:	4013      	ands	r3, r2
   14bc0:	42a3      	cmp	r3, r4
	return port->config;
   14bc2:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14bc4:	d044      	beq.n	14c50 <gpio_nrfx_config+0x98>
   14bc6:	d80e      	bhi.n	14be6 <gpio_nrfx_config+0x2e>
   14bc8:	2b06      	cmp	r3, #6
   14bca:	d043      	beq.n	14c54 <gpio_nrfx_config+0x9c>
   14bcc:	d806      	bhi.n	14bdc <gpio_nrfx_config+0x24>
   14bce:	2b00      	cmp	r3, #0
   14bd0:	d040      	beq.n	14c54 <gpio_nrfx_config+0x9c>
   14bd2:	2b02      	cmp	r3, #2
   14bd4:	d040      	beq.n	14c58 <gpio_nrfx_config+0xa0>
   14bd6:	f06f 0015 	mvn.w	r0, #21
   14bda:	e037      	b.n	14c4c <gpio_nrfx_config+0x94>
   14bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14be0:	d1f9      	bne.n	14bd6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   14be2:	2401      	movs	r4, #1
   14be4:	e009      	b.n	14bfa <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14be6:	4c25      	ldr	r4, [pc, #148]	; (14c7c <gpio_nrfx_config+0xc4>)
   14be8:	42a3      	cmp	r3, r4
   14bea:	d037      	beq.n	14c5c <gpio_nrfx_config+0xa4>
   14bec:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14bf0:	d036      	beq.n	14c60 <gpio_nrfx_config+0xa8>
   14bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14bf6:	d1ee      	bne.n	14bd6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   14bf8:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14bfa:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14bfc:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   14c00:	bf4c      	ite	mi
   14c02:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14c04:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14c08:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14c0c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14c0e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14c12:	d507      	bpl.n	14c24 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14c14:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c16:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14c1a:	d523      	bpl.n	14c64 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14c1c:	2301      	movs	r3, #1
   14c1e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   14c20:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14c24:	7a03      	ldrb	r3, [r0, #8]
   14c26:	f001 011f 	and.w	r1, r1, #31
   14c2a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14c2e:	a801      	add	r0, sp, #4
   14c30:	9101      	str	r1, [sp, #4]
   14c32:	f7ff fe8d 	bl	14950 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14c36:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14c38:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   14c3c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   14c40:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14c44:	3280      	adds	r2, #128	; 0x80
   14c46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   14c4a:	2000      	movs	r0, #0
}
   14c4c:	b003      	add	sp, #12
   14c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   14c50:	2407      	movs	r4, #7
   14c52:	e7d2      	b.n	14bfa <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14c54:	461c      	mov	r4, r3
   14c56:	e7d0      	b.n	14bfa <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   14c58:	2404      	movs	r4, #4
   14c5a:	e7ce      	b.n	14bfa <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   14c5c:	2405      	movs	r4, #5
   14c5e:	e7cc      	b.n	14bfa <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   14c60:	2403      	movs	r4, #3
   14c62:	e7ca      	b.n	14bfa <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   14c64:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   14c66:	bf42      	ittt	mi
   14c68:	2301      	movmi	r3, #1
   14c6a:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   14c6c:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   14c70:	e7d8      	b.n	14c24 <gpio_nrfx_config+0x6c>
   14c72:	bf00      	nop
   14c74:	00f00006 	.word	0x00f00006
   14c78:	00100006 	.word	0x00100006
   14c7c:	00400002 	.word	0x00400002

00014c80 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   14c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c84:	460f      	mov	r7, r1
   14c86:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14c88:	4604      	mov	r4, r0
   14c8a:	b1e0      	cbz	r0, 14cc6 <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   14c8c:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   14c8e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 14ccc <gpio_fire_callbacks.isra.0+0x4c>
   14c92:	f8df 903c 	ldr.w	r9, [pc, #60]	; 14cd0 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   14c96:	68a3      	ldr	r3, [r4, #8]
   14c98:	421e      	tst	r6, r3
   14c9a:	d010      	beq.n	14cbe <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   14c9c:	6863      	ldr	r3, [r4, #4]
   14c9e:	b943      	cbnz	r3, 14cb2 <gpio_fire_callbacks.isra.0+0x32>
   14ca0:	4641      	mov	r1, r8
   14ca2:	4648      	mov	r0, r9
   14ca4:	2245      	movs	r2, #69	; 0x45
   14ca6:	f004 fd37 	bl	19718 <printk>
   14caa:	2145      	movs	r1, #69	; 0x45
   14cac:	4640      	mov	r0, r8
   14cae:	f004 ffd9 	bl	19c64 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   14cb2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   14cb6:	4621      	mov	r1, r4
   14cb8:	4638      	mov	r0, r7
   14cba:	4032      	ands	r2, r6
   14cbc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14cbe:	b115      	cbz	r5, 14cc6 <gpio_fire_callbacks.isra.0+0x46>
   14cc0:	462c      	mov	r4, r5
   14cc2:	682d      	ldr	r5, [r5, #0]
   14cc4:	e7e7      	b.n	14c96 <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   14cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14cca:	bf00      	nop
   14ccc:	00020b4e 	.word	0x00020b4e
   14cd0:	0001e6bc 	.word	0x0001e6bc

00014cd4 <gpiote_event_handler>:
{
   14cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14cd6:	2600      	movs	r6, #0
   14cd8:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cdc:	4d28      	ldr	r5, [pc, #160]	; (14d80 <gpiote_event_handler+0xac>)
   14cde:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   14ce2:	b15c      	cbz	r4, 14cfc <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   14ce4:	4827      	ldr	r0, [pc, #156]	; (14d84 <gpiote_event_handler+0xb0>)
   14ce6:	f007 faee 	bl	1c2c6 <check_level_trigger_pins>
		fired_triggers[0] =
   14cea:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   14cec:	4826      	ldr	r0, [pc, #152]	; (14d88 <gpiote_event_handler+0xb4>)
   14cee:	f007 faea 	bl	1c2c6 <check_level_trigger_pins>
		fired_triggers[1] =
   14cf2:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14cf4:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   14cf8:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   14cfc:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14cfe:	2601      	movs	r6, #1
   14d00:	4694      	mov	ip, r2
{
   14d02:	4922      	ldr	r1, [pc, #136]	; (14d8c <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   14d04:	4d1e      	ldr	r5, [pc, #120]	; (14d80 <gpiote_event_handler+0xac>)
   14d06:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14d0a:	fa06 f002 	lsl.w	r0, r6, r2
   14d0e:	4218      	tst	r0, r3
   14d10:	d016      	beq.n	14d40 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14d12:	680b      	ldr	r3, [r1, #0]
   14d14:	b1a3      	cbz	r3, 14d40 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14d16:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   14d1a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14d1e:	af02      	add	r7, sp, #8
   14d20:	f3c3 3040 	ubfx	r0, r3, #13, #1
   14d24:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   14d28:	f850 7c08 	ldr.w	r7, [r0, #-8]
   14d2c:	f3c3 2304 	ubfx	r3, r3, #8, #5
   14d30:	fa06 f303 	lsl.w	r3, r6, r3
   14d34:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14d36:	f8c1 c000 	str.w	ip, [r1]
   14d3a:	f840 3c08 	str.w	r3, [r0, #-8]
   14d3e:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14d40:	3201      	adds	r2, #1
   14d42:	2a08      	cmp	r2, #8
   14d44:	f101 0104 	add.w	r1, r1, #4
   14d48:	d1dd      	bne.n	14d06 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   14d4a:	9a00      	ldr	r2, [sp, #0]
   14d4c:	b122      	cbz	r2, 14d58 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   14d4e:	4b10      	ldr	r3, [pc, #64]	; (14d90 <gpiote_event_handler+0xbc>)
   14d50:	490c      	ldr	r1, [pc, #48]	; (14d84 <gpiote_event_handler+0xb0>)
   14d52:	6858      	ldr	r0, [r3, #4]
   14d54:	f7ff ff94 	bl	14c80 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   14d58:	9a01      	ldr	r2, [sp, #4]
   14d5a:	b122      	cbz	r2, 14d66 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   14d5c:	4b0d      	ldr	r3, [pc, #52]	; (14d94 <gpiote_event_handler+0xc0>)
   14d5e:	490a      	ldr	r1, [pc, #40]	; (14d88 <gpiote_event_handler+0xb4>)
   14d60:	6858      	ldr	r0, [r3, #4]
   14d62:	f7ff ff8d 	bl	14c80 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   14d66:	b144      	cbz	r4, 14d7a <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   14d68:	4806      	ldr	r0, [pc, #24]	; (14d84 <gpiote_event_handler+0xb0>)
   14d6a:	f007 fa86 	bl	1c27a <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   14d6e:	4806      	ldr	r0, [pc, #24]	; (14d88 <gpiote_event_handler+0xb4>)
}
   14d70:	b003      	add	sp, #12
   14d72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   14d76:	f007 ba80 	b.w	1c27a <cfg_level_pins>
}
   14d7a:	b003      	add	sp, #12
   14d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d7e:	bf00      	nop
   14d80:	4002f000 	.word	0x4002f000
   14d84:	200085bc 	.word	0x200085bc
   14d88:	200085cc 	.word	0x200085cc
   14d8c:	4002f100 	.word	0x4002f100
   14d90:	2000abc4 	.word	0x2000abc4
   14d94:	2000abe0 	.word	0x2000abe0

00014d98 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   14d98:	4b02      	ldr	r3, [pc, #8]	; (14da4 <vipm_nrf_1_register_callback+0xc>)
   14d9a:	6059      	str	r1, [r3, #4]
   14d9c:	645a      	str	r2, [r3, #68]	; 0x44
   14d9e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   14da2:	4770      	bx	lr
   14da4:	2000ac04 	.word	0x2000ac04

00014da8 <vipm_nrf_0_set_enabled>:
   14da8:	b508      	push	{r3, lr}
   14daa:	2145      	movs	r1, #69	; 0x45
   14dac:	4802      	ldr	r0, [pc, #8]	; (14db8 <vipm_nrf_0_set_enabled+0x10>)
   14dae:	f004 fcb3 	bl	19718 <printk>
   14db2:	f06f 0015 	mvn.w	r0, #21
   14db6:	bd08      	pop	{r3, pc}
   14db8:	00020bbc 	.word	0x00020bbc

00014dbc <vipm_nrf_0_register_callback>:
   14dbc:	2157      	movs	r1, #87	; 0x57
   14dbe:	4801      	ldr	r0, [pc, #4]	; (14dc4 <vipm_nrf_0_register_callback+0x8>)
   14dc0:	f004 bcaa 	b.w	19718 <printk>
   14dc4:	00020bdd 	.word	0x00020bdd

00014dc8 <vipm_nrf_1_send>:
   14dc8:	b508      	push	{r3, lr}
   14dca:	2145      	movs	r1, #69	; 0x45
   14dcc:	4802      	ldr	r0, [pc, #8]	; (14dd8 <vipm_nrf_1_send+0x10>)
   14dce:	f004 fca3 	bl	19718 <printk>
   14dd2:	f06f 0015 	mvn.w	r0, #21
   14dd6:	bd08      	pop	{r3, pc}
   14dd8:	00020c14 	.word	0x00020c14

00014ddc <vipm_nrf_init>:
{
   14ddc:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   14dde:	4d0b      	ldr	r5, [pc, #44]	; (14e0c <vipm_nrf_init+0x30>)
   14de0:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   14de4:	b97c      	cbnz	r4, 14e06 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   14de6:	4a0a      	ldr	r2, [pc, #40]	; (14e10 <vipm_nrf_init+0x34>)
   14de8:	490a      	ldr	r1, [pc, #40]	; (14e14 <vipm_nrf_init+0x38>)
   14dea:	4620      	mov	r0, r4
   14dec:	f001 f87e 	bl	15eec <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   14df0:	4622      	mov	r2, r4
   14df2:	2101      	movs	r1, #1
   14df4:	202a      	movs	r0, #42	; 0x2a
   14df6:	f7f7 fe8d 	bl	cb14 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   14dfa:	4807      	ldr	r0, [pc, #28]	; (14e18 <vipm_nrf_init+0x3c>)
   14dfc:	f001 f89c 	bl	15f38 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   14e00:	2301      	movs	r3, #1
   14e02:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   14e06:	2000      	movs	r0, #0
   14e08:	bd38      	pop	{r3, r4, r5, pc}
   14e0a:	bf00      	nop
   14e0c:	2000ac04 	.word	0x2000ac04
   14e10:	2000abfc 	.word	0x2000abfc
   14e14:	00014e1d 	.word	0x00014e1d
   14e18:	0001ddd4 	.word	0x0001ddd4

00014e1c <vipm_dispatcher>:
{
   14e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14e20:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   14e22:	4f17      	ldr	r7, [pc, #92]	; (14e80 <vipm_dispatcher+0x64>)
   14e24:	f8df 805c 	ldr.w	r8, [pc, #92]	; 14e84 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   14e28:	4e17      	ldr	r6, [pc, #92]	; (14e88 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   14e2a:	b90d      	cbnz	r5, 14e30 <vipm_dispatcher+0x14>
}
   14e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   14e30:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   14e34:	b30c      	cbz	r4, 14e7a <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   14e36:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   14e3a:	2b0f      	cmp	r3, #15
   14e3c:	461c      	mov	r4, r3
   14e3e:	dd08      	ble.n	14e52 <vipm_dispatcher+0x36>
   14e40:	4639      	mov	r1, r7
   14e42:	4640      	mov	r0, r8
   14e44:	2283      	movs	r2, #131	; 0x83
   14e46:	f004 fc67 	bl	19718 <printk>
   14e4a:	2183      	movs	r1, #131	; 0x83
   14e4c:	4638      	mov	r0, r7
   14e4e:	f004 ff09 	bl	19c64 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   14e52:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   14e54:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   14e58:	40a3      	lsls	r3, r4
   14e5a:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   14e5e:	f1b9 0f00 	cmp.w	r9, #0
   14e62:	d0e2      	beq.n	14e2a <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   14e64:	2300      	movs	r3, #0
   14e66:	f104 0110 	add.w	r1, r4, #16
   14e6a:	3420      	adds	r4, #32
   14e6c:	461a      	mov	r2, r3
   14e6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   14e72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   14e76:	47c8      	blx	r9
   14e78:	e7d7      	b.n	14e2a <vipm_dispatcher+0xe>
    return 32U;
   14e7a:	2420      	movs	r4, #32
   14e7c:	e7e0      	b.n	14e40 <vipm_dispatcher+0x24>
   14e7e:	bf00      	nop
   14e80:	00020c35 	.word	0x00020c35
   14e84:	0001e6bc 	.word	0x0001e6bc
   14e88:	2000ac04 	.word	0x2000ac04

00014e8c <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   14e8c:	2a10      	cmp	r2, #16
   14e8e:	b508      	push	{r3, lr}
   14e90:	d810      	bhi.n	14eb4 <vipm_nrf_0_send+0x28>
   14e92:	b11a      	cbz	r2, 14e9c <vipm_nrf_0_send+0x10>
   14e94:	2157      	movs	r1, #87	; 0x57
   14e96:	4809      	ldr	r0, [pc, #36]	; (14ebc <vipm_nrf_0_send+0x30>)
   14e98:	f004 fc3e 	bl	19718 <printk>
   14e9c:	9b02      	ldr	r3, [sp, #8]
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	dd03      	ble.n	14eaa <vipm_nrf_0_send+0x1e>
   14ea2:	2157      	movs	r1, #87	; 0x57
   14ea4:	4806      	ldr	r0, [pc, #24]	; (14ec0 <vipm_nrf_0_send+0x34>)
   14ea6:	f004 fc37 	bl	19718 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14eaa:	2201      	movs	r2, #1
   14eac:	2000      	movs	r0, #0
   14eae:	4b05      	ldr	r3, [pc, #20]	; (14ec4 <vipm_nrf_0_send+0x38>)
   14eb0:	601a      	str	r2, [r3, #0]
   14eb2:	bd08      	pop	{r3, pc}
   14eb4:	f06f 0015 	mvn.w	r0, #21
   14eb8:	e7fb      	b.n	14eb2 <vipm_nrf_0_send+0x26>
   14eba:	bf00      	nop
   14ebc:	00020c63 	.word	0x00020c63
   14ec0:	00020c9c 	.word	0x00020c9c
   14ec4:	4002a000 	.word	0x4002a000

00014ec8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14ec8:	6802      	ldr	r2, [r0, #0]
{
   14eca:	b510      	push	{r4, lr}
    switch (port)
   14ecc:	0953      	lsrs	r3, r2, #5
{
   14ece:	4604      	mov	r4, r0
    switch (port)
   14ed0:	d029      	beq.n	14f26 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   14ed2:	2b01      	cmp	r3, #1
   14ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14ed8:	bf18      	it	ne
   14eda:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   14edc:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   14ee0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14ee2:	07db      	lsls	r3, r3, #31
   14ee4:	d40a      	bmi.n	14efc <nrf_gpio_pin_port_decode+0x34>
   14ee6:	4912      	ldr	r1, [pc, #72]	; (14f30 <nrf_gpio_pin_port_decode+0x68>)
   14ee8:	4812      	ldr	r0, [pc, #72]	; (14f34 <nrf_gpio_pin_port_decode+0x6c>)
   14eea:	f240 221a 	movw	r2, #538	; 0x21a
   14eee:	f004 fc13 	bl	19718 <printk>
   14ef2:	f240 211a 	movw	r1, #538	; 0x21a
   14ef6:	480e      	ldr	r0, [pc, #56]	; (14f30 <nrf_gpio_pin_port_decode+0x68>)
   14ef8:	f004 feb4 	bl	19c64 <assert_post_action>
    uint32_t pin_number = *p_pin;
   14efc:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14efe:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14f02:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   14f04:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14f06:	d00c      	beq.n	14f22 <nrf_gpio_pin_port_decode+0x5a>
   14f08:	2b01      	cmp	r3, #1
   14f0a:	d00f      	beq.n	14f2c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   14f0c:	4908      	ldr	r1, [pc, #32]	; (14f30 <nrf_gpio_pin_port_decode+0x68>)
   14f0e:	4809      	ldr	r0, [pc, #36]	; (14f34 <nrf_gpio_pin_port_decode+0x6c>)
   14f10:	f240 221f 	movw	r2, #543	; 0x21f
   14f14:	f004 fc00 	bl	19718 <printk>
   14f18:	f240 211f 	movw	r1, #543	; 0x21f
   14f1c:	4804      	ldr	r0, [pc, #16]	; (14f30 <nrf_gpio_pin_port_decode+0x68>)
   14f1e:	f004 fea1 	bl	19c64 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14f22:	4805      	ldr	r0, [pc, #20]	; (14f38 <nrf_gpio_pin_port_decode+0x70>)
}
   14f24:	bd10      	pop	{r4, pc}
    switch (port)
   14f26:	f04f 33ff 	mov.w	r3, #4294967295
   14f2a:	e7d7      	b.n	14edc <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   14f2c:	4803      	ldr	r0, [pc, #12]	; (14f3c <nrf_gpio_pin_port_decode+0x74>)
   14f2e:	e7f9      	b.n	14f24 <nrf_gpio_pin_port_decode+0x5c>
   14f30:	00020b7b 	.word	0x00020b7b
   14f34:	0001e6bc 	.word	0x0001e6bc
   14f38:	40842500 	.word	0x40842500
   14f3c:	40842800 	.word	0x40842800

00014f40 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   14f40:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14f42:	794b      	ldrb	r3, [r1, #5]
   14f44:	2b01      	cmp	r3, #1
   14f46:	d02b      	beq.n	14fa0 <uarte_nrfx_configure+0x60>
   14f48:	2b03      	cmp	r3, #3
   14f4a:	d126      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14f4c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14f4e:	798b      	ldrb	r3, [r1, #6]
   14f50:	2b03      	cmp	r3, #3
   14f52:	d122      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14f54:	79cd      	ldrb	r5, [r1, #7]
   14f56:	b125      	cbz	r5, 14f62 <uarte_nrfx_configure+0x22>
   14f58:	2d01      	cmp	r5, #1
   14f5a:	d11e      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   14f5c:	6843      	ldr	r3, [r0, #4]
   14f5e:	791b      	ldrb	r3, [r3, #4]
   14f60:	b1db      	cbz	r3, 14f9a <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14f62:	790a      	ldrb	r2, [r1, #4]
   14f64:	2a01      	cmp	r2, #1
   14f66:	d01d      	beq.n	14fa4 <uarte_nrfx_configure+0x64>
   14f68:	2a02      	cmp	r2, #2
   14f6a:	d01f      	beq.n	14fac <uarte_nrfx_configure+0x6c>
   14f6c:	b9aa      	cbnz	r2, 14f9a <uarte_nrfx_configure+0x5a>
   14f6e:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14f70:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14f72:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   14f74:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14f78:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   14f7a:	d06e      	beq.n	1505a <uarte_nrfx_configure+0x11a>
   14f7c:	d833      	bhi.n	14fe6 <uarte_nrfx_configure+0xa6>
   14f7e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14f82:	d06d      	beq.n	15060 <uarte_nrfx_configure+0x120>
   14f84:	d81c      	bhi.n	14fc0 <uarte_nrfx_configure+0x80>
   14f86:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14f8a:	d06b      	beq.n	15064 <uarte_nrfx_configure+0x124>
   14f8c:	d810      	bhi.n	14fb0 <uarte_nrfx_configure+0x70>
   14f8e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14f92:	d06a      	beq.n	1506a <uarte_nrfx_configure+0x12a>
   14f94:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14f98:	d06a      	beq.n	15070 <uarte_nrfx_configure+0x130>
   14f9a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14f9e:	e05b      	b.n	15058 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   14fa0:	2700      	movs	r7, #0
   14fa2:	e7d4      	b.n	14f4e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   14fa4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14fa8:	220e      	movs	r2, #14
   14faa:	e7e1      	b.n	14f70 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   14fac:	2400      	movs	r4, #0
   14fae:	e7fb      	b.n	14fa8 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   14fb0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14fb4:	d05f      	beq.n	15076 <uarte_nrfx_configure+0x136>
   14fb6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14fba:	d1ee      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14fbc:	4b38      	ldr	r3, [pc, #224]	; (150a0 <uarte_nrfx_configure+0x160>)
   14fbe:	e03e      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   14fc0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14fc4:	d05a      	beq.n	1507c <uarte_nrfx_configure+0x13c>
   14fc6:	d807      	bhi.n	14fd8 <uarte_nrfx_configure+0x98>
   14fc8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14fcc:	d058      	beq.n	15080 <uarte_nrfx_configure+0x140>
   14fce:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14fd2:	d1e2      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14fd4:	4b33      	ldr	r3, [pc, #204]	; (150a4 <uarte_nrfx_configure+0x164>)
   14fd6:	e032      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   14fd8:	f647 2c12 	movw	ip, #31250	; 0x7a12
   14fdc:	4563      	cmp	r3, ip
   14fde:	d1dc      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14fe0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14fe4:	e02b      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   14fe6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14fea:	d04b      	beq.n	15084 <uarte_nrfx_configure+0x144>
   14fec:	d813      	bhi.n	15016 <uarte_nrfx_configure+0xd6>
   14fee:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14ff2:	d04a      	beq.n	1508a <uarte_nrfx_configure+0x14a>
   14ff4:	d809      	bhi.n	1500a <uarte_nrfx_configure+0xca>
   14ff6:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   14ffa:	4563      	cmp	r3, ip
   14ffc:	d047      	beq.n	1508e <uarte_nrfx_configure+0x14e>
   14ffe:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15002:	d1ca      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15004:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15008:	e019      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1500a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1500e:	d1c4      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15010:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15014:	e013      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15016:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1501a:	d03b      	beq.n	15094 <uarte_nrfx_configure+0x154>
   1501c:	d809      	bhi.n	15032 <uarte_nrfx_configure+0xf2>
   1501e:	f8df c088 	ldr.w	ip, [pc, #136]	; 150a8 <uarte_nrfx_configure+0x168>
   15022:	4563      	cmp	r3, ip
   15024:	d039      	beq.n	1509a <uarte_nrfx_configure+0x15a>
   15026:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1502a:	d1b6      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1502c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15030:	e005      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15032:	f8df c078 	ldr.w	ip, [pc, #120]	; 150ac <uarte_nrfx_configure+0x16c>
   15036:	4563      	cmp	r3, ip
   15038:	d1af      	bne.n	14f9a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1503a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1503e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15042:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   15044:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   15046:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   15048:	4322      	orrs	r2, r4
   1504a:	3304      	adds	r3, #4
   1504c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1504e:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   15052:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15056:	2000      	movs	r0, #0
}
   15058:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1505a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1505e:	e7ee      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15060:	4b13      	ldr	r3, [pc, #76]	; (150b0 <uarte_nrfx_configure+0x170>)
   15062:	e7ec      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15064:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15068:	e7e9      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   1506a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1506e:	e7e6      	b.n	1503e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15070:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15074:	e7e3      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15076:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1507a:	e7e0      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1507c:	4b0d      	ldr	r3, [pc, #52]	; (150b4 <uarte_nrfx_configure+0x174>)
   1507e:	e7de      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15080:	4b0d      	ldr	r3, [pc, #52]	; (150b8 <uarte_nrfx_configure+0x178>)
   15082:	e7dc      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15084:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15088:	e7d9      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1508a:	4b0c      	ldr	r3, [pc, #48]	; (150bc <uarte_nrfx_configure+0x17c>)
   1508c:	e7d7      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1508e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15092:	e7d4      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15094:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15098:	e7d1      	b.n	1503e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1509a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1509e:	e7ce      	b.n	1503e <uarte_nrfx_configure+0xfe>
   150a0:	0013b000 	.word	0x0013b000
   150a4:	004ea000 	.word	0x004ea000
   150a8:	0003d090 	.word	0x0003d090
   150ac:	000f4240 	.word	0x000f4240
   150b0:	00275000 	.word	0x00275000
   150b4:	0075c000 	.word	0x0075c000
   150b8:	003af000 	.word	0x003af000
   150bc:	013a9000 	.word	0x013a9000

000150c0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   150c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150c4:	4606      	mov	r6, r0
   150c6:	4688      	mov	r8, r1
	return dev->data;
   150c8:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   150ca:	f007 ff2a 	bl	1cf22 <k_is_in_isr>
   150ce:	b9b8      	cbnz	r0, 15100 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   150d0:	4b28      	ldr	r3, [pc, #160]	; (15174 <uarte_nrfx_poll_out+0xb4>)
   150d2:	781b      	ldrb	r3, [r3, #0]
   150d4:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   150d8:	6872      	ldr	r2, [r6, #4]
   150da:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   150dc:	b193      	cbz	r3, 15104 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   150de:	f04f 0320 	mov.w	r3, #32
   150e2:	f3ef 8411 	mrs	r4, BASEPRI
   150e6:	f383 8811 	msr	BASEPRI, r3
   150ea:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   150ee:	6870      	ldr	r0, [r6, #4]
   150f0:	f007 f9cc 	bl	1c48c <is_tx_ready.isra.0>
   150f4:	bb38      	cbnz	r0, 15146 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   150f6:	f384 8811 	msr	BASEPRI, r4
   150fa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   150fe:	e7ee      	b.n	150de <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15100:	2301      	movs	r3, #1
   15102:	e7e9      	b.n	150d8 <uarte_nrfx_poll_out+0x18>
   15104:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   15106:	6870      	ldr	r0, [r6, #4]
   15108:	f007 f9c0 	bl	1c48c <is_tx_ready.isra.0>
   1510c:	b970      	cbnz	r0, 1512c <uarte_nrfx_poll_out+0x6c>
   1510e:	2001      	movs	r0, #1
   15110:	f007 fa5c 	bl	1c5cc <nrfx_busy_wait>
   15114:	3c01      	subs	r4, #1
   15116:	d1f6      	bne.n	15106 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   15118:	2100      	movs	r1, #0
   1511a:	2021      	movs	r0, #33	; 0x21
   1511c:	f003 f906 	bl	1832c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15120:	e7f0      	b.n	15104 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   15122:	f384 8811 	msr	BASEPRI, r4
   15126:	f3bf 8f6f 	isb	sy
}
   1512a:	e7f5      	b.n	15118 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1512c:	f04f 0320 	mov.w	r3, #32
   15130:	f3ef 8411 	mrs	r4, BASEPRI
   15134:	f383 8811 	msr	BASEPRI, r3
   15138:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1513c:	6870      	ldr	r0, [r6, #4]
   1513e:	f007 f9a5 	bl	1c48c <is_tx_ready.isra.0>
   15142:	2800      	cmp	r0, #0
   15144:	d0ed      	beq.n	15122 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   15146:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15148:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1514a:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1514e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15152:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15156:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1515a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1515e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   15162:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15166:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   15168:	f384 8811 	msr	BASEPRI, r4
   1516c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   15170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15174:	2000c5e1 	.word	0x2000c5e1

00015178 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1517c:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1517e:	f04f 0800 	mov.w	r8, #0
   15182:	f04f 0914 	mov.w	r9, #20
   15186:	2200      	movs	r2, #0
   15188:	2101      	movs	r1, #1
   1518a:	2008      	movs	r0, #8
   1518c:	f7f7 fcc2 	bl	cb14 <z_arm_irq_priority_set>
   15190:	2008      	movs	r0, #8
   15192:	f7f7 fca1 	bl	cad8 <arch_irq_enable>
	return config->uarte_regs;
   15196:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   15198:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   1519a:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1519c:	2701      	movs	r7, #1
   1519e:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   151a2:	a801      	add	r0, sp, #4
	data->dev = dev;
   151a4:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   151a6:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   151aa:	f7ff fe8d 	bl	14ec8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   151ae:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   151b0:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   151b4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   151b8:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   151ba:	a801      	add	r0, sp, #4
   151bc:	f8cd 9004 	str.w	r9, [sp, #4]
   151c0:	f7ff fe82 	bl	14ec8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   151c4:	f04f 0b16 	mov.w	fp, #22
   151c8:	9b01      	ldr	r3, [sp, #4]
   151ca:	3380      	adds	r3, #128	; 0x80
   151cc:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   151d0:	a801      	add	r0, sp, #4
   151d2:	f8cd b004 	str.w	fp, [sp, #4]
   151d6:	f7ff fe77 	bl	14ec8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   151da:	9b01      	ldr	r3, [sp, #4]
   151dc:	3380      	adds	r3, #128	; 0x80
   151de:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   151e2:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   151e6:	f04f 0915 	mov.w	r9, #21
   151ea:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   151ee:	a801      	add	r0, sp, #4
   151f0:	f8cd 9004 	str.w	r9, [sp, #4]
   151f4:	f7ff fe68 	bl	14ec8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   151f8:	9b01      	ldr	r3, [sp, #4]
   151fa:	3380      	adds	r3, #128	; 0x80
   151fc:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   15200:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15204:	a801      	add	r0, sp, #4
   15206:	f8cd 8004 	str.w	r8, [sp, #4]
   1520a:	f7ff fe5d 	bl	14ec8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1520e:	9b01      	ldr	r3, [sp, #4]
   15210:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   15212:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15214:	a801      	add	r0, sp, #4
   15216:	f8cd 8004 	str.w	r8, [sp, #4]
   1521a:	f7ff fe55 	bl	14ec8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1521e:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15220:	68e9      	ldr	r1, [r5, #12]
   15222:	3380      	adds	r3, #128	; 0x80
   15224:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   15228:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   1522a:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   1522e:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   15230:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   15234:	f7ff fe84 	bl	14f40 <uarte_nrfx_configure>
	if (err) {
   15238:	4607      	mov	r7, r0
   1523a:	b980      	cbnz	r0, 1525e <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   1523c:	686b      	ldr	r3, [r5, #4]
   1523e:	799b      	ldrb	r3, [r3, #6]
   15240:	2b00      	cmp	r3, #0
   15242:	d03a      	beq.n	152ba <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   15244:	eb06 000b 	add.w	r0, r6, fp
   15248:	f000 fddc 	bl	15e04 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1524c:	4b2b      	ldr	r3, [pc, #172]	; (152fc <uarte_0_init+0x184>)
   1524e:	4298      	cmp	r0, r3
   15250:	d009      	beq.n	15266 <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   15252:	2145      	movs	r1, #69	; 0x45
   15254:	482a      	ldr	r0, [pc, #168]	; (15300 <uarte_0_init+0x188>)
   15256:	f004 fa5f 	bl	19718 <printk>
		return -EIO;
   1525a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1525e:	4638      	mov	r0, r7
   15260:	b003      	add	sp, #12
   15262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   15266:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1526a:	f896 8016 	ldrb.w	r8, [r6, #22]
   1526e:	d10a      	bne.n	15286 <uarte_0_init+0x10e>
   15270:	4924      	ldr	r1, [pc, #144]	; (15304 <uarte_0_init+0x18c>)
   15272:	4825      	ldr	r0, [pc, #148]	; (15308 <uarte_0_init+0x190>)
   15274:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   15278:	f004 fa4e 	bl	19718 <printk>
   1527c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   15280:	4820      	ldr	r0, [pc, #128]	; (15304 <uarte_0_init+0x18c>)
   15282:	f004 fcef 	bl	19c64 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15286:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   1528a:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1528e:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   15292:	d10a      	bne.n	152aa <uarte_0_init+0x132>
   15294:	491b      	ldr	r1, [pc, #108]	; (15304 <uarte_0_init+0x18c>)
   15296:	481c      	ldr	r0, [pc, #112]	; (15308 <uarte_0_init+0x190>)
   15298:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   1529c:	f004 fa3c 	bl	19718 <printk>
   152a0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   152a4:	4817      	ldr	r0, [pc, #92]	; (15304 <uarte_0_init+0x18c>)
   152a6:	f004 fcdd 	bl	19c64 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   152aa:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   152ac:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   152b0:	7db2      	ldrb	r2, [r6, #22]
   152b2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   152b4:	4a15      	ldr	r2, [pc, #84]	; (1530c <uarte_0_init+0x194>)
   152b6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   152ba:	2308      	movs	r3, #8
   152bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   152c0:	2300      	movs	r3, #0
   152c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   152c6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   152ca:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   152ce:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   152d2:	2301      	movs	r3, #1
   152d4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   152d8:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   152da:	686b      	ldr	r3, [r5, #4]
   152dc:	799b      	ldrb	r3, [r3, #6]
   152de:	b91b      	cbnz	r3, 152e8 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   152e0:	f44f 7380 	mov.w	r3, #256	; 0x100
   152e4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   152e8:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   152ea:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   152ec:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   152f0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   152f4:	2301      	movs	r3, #1
   152f6:	60a3      	str	r3, [r4, #8]
   152f8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   152fa:	e7b0      	b.n	1525e <uarte_0_init+0xe6>
   152fc:	0bad0000 	.word	0x0bad0000
   15300:	00020cdf 	.word	0x00020cdf
   15304:	00020d03 	.word	0x00020d03
   15308:	0001e6bc 	.word	0x0001e6bc
   1530c:	40017000 	.word	0x40017000

00015310 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   15310:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   15314:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   15318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   1531c:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   15320:	4605      	mov	r5, r0
   15322:	460e      	mov	r6, r1
   15324:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   15326:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1532a:	d14f      	bne.n	153cc <z_impl_gpio_pin_interrupt_configure+0xbc>
   1532c:	492d      	ldr	r1, [pc, #180]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1532e:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   15332:	482d      	ldr	r0, [pc, #180]	; (153e8 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15334:	f004 f9f0 	bl	19718 <printk>
   15338:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1533c:	4829      	ldr	r0, [pc, #164]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1533e:	f004 fc91 	bl	19c64 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   15342:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   15346:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1534a:	d10a      	bne.n	15362 <z_impl_gpio_pin_interrupt_configure+0x52>
   1534c:	4925      	ldr	r1, [pc, #148]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1534e:	4826      	ldr	r0, [pc, #152]	; (153e8 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15350:	f240 12f1 	movw	r2, #497	; 0x1f1
   15354:	f004 f9e0 	bl	19718 <printk>
   15358:	f240 11f1 	movw	r1, #497	; 0x1f1
   1535c:	4821      	ldr	r0, [pc, #132]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1535e:	f004 fc81 	bl	19c64 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   15362:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   15366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1536a:	d10a      	bne.n	15382 <z_impl_gpio_pin_interrupt_configure+0x72>
   1536c:	491d      	ldr	r1, [pc, #116]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1536e:	481e      	ldr	r0, [pc, #120]	; (153e8 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15370:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   15374:	f004 f9d0 	bl	19718 <printk>
   15378:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1537c:	4819      	ldr	r0, [pc, #100]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1537e:	f004 fc71 	bl	19c64 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15382:	2701      	movs	r7, #1
   15384:	f8da 3000 	ldr.w	r3, [sl]
   15388:	40b7      	lsls	r7, r6
   1538a:	421f      	tst	r7, r3
   1538c:	d10a      	bne.n	153a4 <z_impl_gpio_pin_interrupt_configure+0x94>
   1538e:	4915      	ldr	r1, [pc, #84]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15390:	4815      	ldr	r0, [pc, #84]	; (153e8 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15392:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   15396:	f004 f9bf 	bl	19718 <printk>
   1539a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1539e:	4811      	ldr	r0, [pc, #68]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   153a0:	f004 fc60 	bl	19c64 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   153a4:	0423      	lsls	r3, r4, #16
   153a6:	d505      	bpl.n	153b4 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   153a8:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   153ac:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   153ae:	bf18      	it	ne
   153b0:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   153b4:	f8d8 7018 	ldr.w	r7, [r8, #24]
   153b8:	4631      	mov	r1, r6
   153ba:	4628      	mov	r0, r5
   153bc:	46bc      	mov	ip, r7
   153be:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   153c2:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   153c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   153ca:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   153cc:	2b00      	cmp	r3, #0
   153ce:	d1b8      	bne.n	15342 <z_impl_gpio_pin_interrupt_configure+0x32>
   153d0:	4904      	ldr	r1, [pc, #16]	; (153e4 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   153d2:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   153d6:	4804      	ldr	r0, [pc, #16]	; (153e8 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   153d8:	f004 f99e 	bl	19718 <printk>
   153dc:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   153e0:	e7ac      	b.n	1533c <z_impl_gpio_pin_interrupt_configure+0x2c>
   153e2:	bf00      	nop
   153e4:	00020d52 	.word	0x00020d52
   153e8:	0001e6bc 	.word	0x0001e6bc

000153ec <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   153ec:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   153ee:	2501      	movs	r5, #1
   153f0:	6843      	ldr	r3, [r0, #4]
   153f2:	408d      	lsls	r5, r1
   153f4:	681b      	ldr	r3, [r3, #0]
{
   153f6:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   153f8:	421d      	tst	r5, r3
{
   153fa:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   153fc:	d10a      	bne.n	15414 <gpio_pin_set_raw+0x28>
   153fe:	490b      	ldr	r1, [pc, #44]	; (1542c <gpio_pin_set_raw+0x40>)
   15400:	480b      	ldr	r0, [pc, #44]	; (15430 <gpio_pin_set_raw+0x44>)
   15402:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   15406:	f004 f987 	bl	19718 <printk>
   1540a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   1540e:	4807      	ldr	r0, [pc, #28]	; (1542c <gpio_pin_set_raw+0x40>)
   15410:	f004 fc28 	bl	19c64 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   15414:	b136      	cbz	r6, 15424 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   15416:	68a3      	ldr	r3, [r4, #8]
   15418:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1541a:	4629      	mov	r1, r5
   1541c:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1541e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   15422:	4718      	bx	r3
   15424:	68a3      	ldr	r3, [r4, #8]
   15426:	691b      	ldr	r3, [r3, #16]
   15428:	e7f7      	b.n	1541a <gpio_pin_set_raw+0x2e>
   1542a:	bf00      	nop
   1542c:	00020d52 	.word	0x00020d52
   15430:	0001e6bc 	.word	0x0001e6bc

00015434 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   15434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15438:	4606      	mov	r6, r0
   1543a:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1543c:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   1543e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 15484 <dk_set_leds_state.part.0+0x50>
   15442:	f8df 9044 	ldr.w	r9, [pc, #68]	; 15488 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   15446:	fa26 f204 	lsr.w	r2, r6, r4
   1544a:	fa27 f304 	lsr.w	r3, r7, r4
   1544e:	4313      	orrs	r3, r2
   15450:	07db      	lsls	r3, r3, #31
   15452:	d512      	bpl.n	1547a <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   15454:	43d2      	mvns	r2, r2
   15456:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1545a:	7919      	ldrb	r1, [r3, #4]
   1545c:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   15460:	f002 0201 	and.w	r2, r2, #1
   15464:	f7ff ffc2 	bl	153ec <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   15468:	4605      	mov	r5, r0
   1546a:	b130      	cbz	r0, 1547a <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   1546c:	2145      	movs	r1, #69	; 0x45
   1546e:	4807      	ldr	r0, [pc, #28]	; (1548c <dk_set_leds_state.part.0+0x58>)
   15470:	f004 f952 	bl	19718 <printk>
			}
		}
	}

	return 0;
}
   15474:	4628      	mov	r0, r5
   15476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1547a:	3401      	adds	r4, #1
   1547c:	2c04      	cmp	r4, #4
   1547e:	d1e2      	bne.n	15446 <dk_set_leds_state.part.0+0x12>
	return 0;
   15480:	2500      	movs	r5, #0
   15482:	e7f7      	b.n	15474 <dk_set_leds_state.part.0+0x40>
   15484:	0001def4 	.word	0x0001def4
   15488:	2000ad0c 	.word	0x2000ad0c
   1548c:	00020d7c 	.word	0x00020d7c

00015490 <buttons_scan_fn>:
{
   15490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   15494:	2400      	movs	r4, #0
   15496:	4e6c      	ldr	r6, [pc, #432]	; (15648 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15498:	4625      	mov	r5, r4
{
   1549a:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1549c:	4f6b      	ldr	r7, [pc, #428]	; (1564c <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1549e:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 15650 <buttons_scan_fn+0x1c0>
   154a2:	f04f 0801 	mov.w	r8, #1
   154a6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   154aa:	791b      	ldrb	r3, [r3, #4]
   154ac:	f859 bb04 	ldr.w	fp, [r9], #4
   154b0:	fa08 f803 	lsl.w	r8, r8, r3
   154b4:	f8db 3004 	ldr.w	r3, [fp, #4]
   154b8:	681b      	ldr	r3, [r3, #0]
   154ba:	ea18 0f03 	tst.w	r8, r3
   154be:	d10a      	bne.n	154d6 <buttons_scan_fn+0x46>
   154c0:	4651      	mov	r1, sl
   154c2:	4864      	ldr	r0, [pc, #400]	; (15654 <buttons_scan_fn+0x1c4>)
   154c4:	f44f 725e 	mov.w	r2, #888	; 0x378
   154c8:	f004 f926 	bl	19718 <printk>
   154cc:	f44f 715e 	mov.w	r1, #888	; 0x378
   154d0:	4650      	mov	r0, sl
   154d2:	f004 fbc7 	bl	19c64 <assert_post_action>
	return api->port_get_raw(port, value);
   154d6:	f8db 3008 	ldr.w	r3, [fp, #8]
   154da:	4658      	mov	r0, fp
   154dc:	685b      	ldr	r3, [r3, #4]
   154de:	a901      	add	r1, sp, #4
   154e0:	4798      	blx	r3
	if (ret == 0) {
   154e2:	2800      	cmp	r0, #0
   154e4:	d16b      	bne.n	155be <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   154e6:	9b01      	ldr	r3, [sp, #4]
   154e8:	ea18 0f03 	tst.w	r8, r3
   154ec:	d003      	beq.n	154f6 <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   154ee:	3501      	adds	r5, #1
   154f0:	2d04      	cmp	r5, #4
   154f2:	d1d6      	bne.n	154a2 <buttons_scan_fn+0x12>
   154f4:	e069      	b.n	155ca <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   154f6:	2301      	movs	r3, #1
   154f8:	40ab      	lsls	r3, r5
   154fa:	431c      	orrs	r4, r3
   154fc:	e7f7      	b.n	154ee <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   154fe:	3d04      	subs	r5, #4
   15500:	2d00      	cmp	r5, #0
   15502:	f000 8087 	beq.w	15614 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   15506:	46aa      	mov	sl, r5
   15508:	f85a 3b04 	ldr.w	r3, [sl], #4
   1550c:	4641      	mov	r1, r8
   1550e:	4620      	mov	r0, r4
   15510:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15512:	f1ba 0f00 	cmp.w	sl, #0
   15516:	d07d      	beq.n	15614 <buttons_scan_fn+0x184>
	return node->next;
   15518:	686d      	ldr	r5, [r5, #4]
   1551a:	e078      	b.n	1560e <buttons_scan_fn+0x17e>
		initial_run = false;
   1551c:	2200      	movs	r2, #0
   1551e:	701a      	strb	r2, [r3, #0]
   15520:	e07b      	b.n	1561a <buttons_scan_fn+0x18a>
	__asm__ volatile(
   15522:	f04f 0320 	mov.w	r3, #32
   15526:	f3ef 8811 	mrs	r8, BASEPRI
   1552a:	f383 8811 	msr	BASEPRI, r3
   1552e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15532:	4849      	ldr	r0, [pc, #292]	; (15658 <buttons_scan_fn+0x1c8>)
   15534:	f003 f91c 	bl	18770 <z_spin_lock_valid>
   15538:	b940      	cbnz	r0, 1554c <buttons_scan_fn+0xbc>
   1553a:	4948      	ldr	r1, [pc, #288]	; (1565c <buttons_scan_fn+0x1cc>)
   1553c:	4845      	ldr	r0, [pc, #276]	; (15654 <buttons_scan_fn+0x1c4>)
   1553e:	227c      	movs	r2, #124	; 0x7c
   15540:	f004 f8ea 	bl	19718 <printk>
   15544:	217c      	movs	r1, #124	; 0x7c
   15546:	4845      	ldr	r0, [pc, #276]	; (1565c <buttons_scan_fn+0x1cc>)
   15548:	f004 fb8c 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   1554c:	4842      	ldr	r0, [pc, #264]	; (15658 <buttons_scan_fn+0x1c8>)
   1554e:	f003 f92b 	bl	187a8 <z_spin_lock_set_owner>
		switch (state) {
   15552:	4b43      	ldr	r3, [pc, #268]	; (15660 <buttons_scan_fn+0x1d0>)
   15554:	781a      	ldrb	r2, [r3, #0]
   15556:	2a01      	cmp	r2, #1
   15558:	d126      	bne.n	155a8 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   1555a:	2200      	movs	r2, #0
   1555c:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1555e:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   15562:	f856 0b04 	ldr.w	r0, [r6], #4
   15566:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   15568:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1556c:	f7ff fed0 	bl	15310 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15570:	3401      	adds	r4, #1
   15572:	2c04      	cmp	r4, #4
   15574:	4605      	mov	r5, r0
   15576:	d001      	beq.n	1557c <buttons_scan_fn+0xec>
   15578:	2800      	cmp	r0, #0
   1557a:	d0f0      	beq.n	1555e <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1557c:	4836      	ldr	r0, [pc, #216]	; (15658 <buttons_scan_fn+0x1c8>)
   1557e:	f003 f905 	bl	1878c <z_spin_unlock_valid>
   15582:	b940      	cbnz	r0, 15596 <buttons_scan_fn+0x106>
   15584:	4935      	ldr	r1, [pc, #212]	; (1565c <buttons_scan_fn+0x1cc>)
   15586:	4833      	ldr	r0, [pc, #204]	; (15654 <buttons_scan_fn+0x1c4>)
   15588:	22a7      	movs	r2, #167	; 0xa7
   1558a:	f004 f8c5 	bl	19718 <printk>
   1558e:	21a7      	movs	r1, #167	; 0xa7
   15590:	4832      	ldr	r0, [pc, #200]	; (1565c <buttons_scan_fn+0x1cc>)
   15592:	f004 fb67 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   15596:	f388 8811 	msr	BASEPRI, r8
   1559a:	f3bf 8f6f 	isb	sy
		if (err) {
   1559e:	2d00      	cmp	r5, #0
   155a0:	d04f      	beq.n	15642 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   155a2:	2145      	movs	r1, #69	; 0x45
   155a4:	482f      	ldr	r0, [pc, #188]	; (15664 <buttons_scan_fn+0x1d4>)
   155a6:	e047      	b.n	15638 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   155a8:	22b4      	movs	r2, #180	; 0xb4
   155aa:	492f      	ldr	r1, [pc, #188]	; (15668 <buttons_scan_fn+0x1d8>)
   155ac:	4829      	ldr	r0, [pc, #164]	; (15654 <buttons_scan_fn+0x1c4>)
   155ae:	f004 f8b3 	bl	19718 <printk>
   155b2:	21b4      	movs	r1, #180	; 0xb4
   155b4:	482c      	ldr	r0, [pc, #176]	; (15668 <buttons_scan_fn+0x1d8>)
   155b6:	f004 fb55 	bl	19c64 <assert_post_action>
		int err = 0;
   155ba:	2500      	movs	r5, #0
			break;
   155bc:	e7de      	b.n	1557c <buttons_scan_fn+0xec>
		if (val < 0) {
   155be:	da96      	bge.n	154ee <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   155c0:	2145      	movs	r1, #69	; 0x45
   155c2:	482a      	ldr	r0, [pc, #168]	; (1566c <buttons_scan_fn+0x1dc>)
   155c4:	f004 f8a8 	bl	19718 <printk>
			return 0;
   155c8:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   155ca:	4b29      	ldr	r3, [pc, #164]	; (15670 <buttons_scan_fn+0x1e0>)
   155cc:	e8d3 2fef 	ldaex	r2, [r3]
   155d0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   155d4:	2900      	cmp	r1, #0
   155d6:	d1f9      	bne.n	155cc <buttons_scan_fn+0x13c>
	if (!initial_run) {
   155d8:	4b26      	ldr	r3, [pc, #152]	; (15674 <buttons_scan_fn+0x1e4>)
   155da:	f8df 909c 	ldr.w	r9, [pc, #156]	; 15678 <buttons_scan_fn+0x1e8>
   155de:	781a      	ldrb	r2, [r3, #0]
   155e0:	2a00      	cmp	r2, #0
   155e2:	d19b      	bne.n	1551c <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   155e4:	f8d9 3000 	ldr.w	r3, [r9]
   155e8:	42a3      	cmp	r3, r4
   155ea:	d016      	beq.n	1561a <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   155ec:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   155f0:	4b22      	ldr	r3, [pc, #136]	; (1567c <buttons_scan_fn+0x1ec>)
   155f2:	681b      	ldr	r3, [r3, #0]
   155f4:	b113      	cbz	r3, 155fc <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   155f6:	4641      	mov	r1, r8
   155f8:	4620      	mov	r0, r4
   155fa:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   155fc:	f04f 33ff 	mov.w	r3, #4294967295
   15600:	f04f 32ff 	mov.w	r2, #4294967295
   15604:	481e      	ldr	r0, [pc, #120]	; (15680 <buttons_scan_fn+0x1f0>)
   15606:	f001 fc13 	bl	16e30 <z_impl_k_mutex_lock>
	return list->head;
   1560a:	4b1e      	ldr	r3, [pc, #120]	; (15684 <buttons_scan_fn+0x1f4>)
   1560c:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1560e:	2d00      	cmp	r5, #0
   15610:	f47f af75 	bne.w	154fe <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   15614:	481a      	ldr	r0, [pc, #104]	; (15680 <buttons_scan_fn+0x1f0>)
   15616:	f001 fcd7 	bl	16fc8 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1561a:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   1561e:	2c00      	cmp	r4, #0
   15620:	f43f af7f 	beq.w	15522 <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15624:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15628:	2300      	movs	r3, #0
   1562a:	4917      	ldr	r1, [pc, #92]	; (15688 <buttons_scan_fn+0x1f8>)
   1562c:	4817      	ldr	r0, [pc, #92]	; (1568c <buttons_scan_fn+0x1fc>)
   1562e:	f003 f915 	bl	1885c <k_delayed_work_submit_to_queue>
		if (err) {
   15632:	b130      	cbz	r0, 15642 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   15634:	2145      	movs	r1, #69	; 0x45
   15636:	4816      	ldr	r0, [pc, #88]	; (15690 <buttons_scan_fn+0x200>)
}
   15638:	b003      	add	sp, #12
   1563a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   1563e:	f004 b86b 	b.w	19718 <printk>
}
   15642:	b003      	add	sp, #12
   15644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15648:	2000acc8 	.word	0x2000acc8
   1564c:	0001ded4 	.word	0x0001ded4
   15650:	00020d52 	.word	0x00020d52
   15654:	0001e6bc 	.word	0x0001e6bc
   15658:	2000ad1c 	.word	0x2000ad1c
   1565c:	0001e6f6 	.word	0x0001e6f6
   15660:	2000c5e0 	.word	0x2000c5e0
   15664:	00020e11 	.word	0x00020e11
   15668:	00020dd3 	.word	0x00020dd3
   1566c:	00020d97 	.word	0x00020d97
   15670:	2000ad20 	.word	0x2000ad20
   15674:	20008568 	.word	0x20008568
   15678:	2000ad04 	.word	0x2000ad04
   1567c:	2000acd8 	.word	0x2000acd8
   15680:	2000acdc 	.word	0x2000acdc
   15684:	2000acf0 	.word	0x2000acf0
   15688:	2000a250 	.word	0x2000a250
   1568c:	2000a3a0 	.word	0x2000a3a0
   15690:	00020db1 	.word	0x00020db1

00015694 <button_pressed>:
{
   15694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15696:	f04f 0320 	mov.w	r3, #32
   1569a:	f3ef 8611 	mrs	r6, BASEPRI
   1569e:	f383 8811 	msr	BASEPRI, r3
   156a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   156a6:	4827      	ldr	r0, [pc, #156]	; (15744 <button_pressed+0xb0>)
   156a8:	f003 f862 	bl	18770 <z_spin_lock_valid>
   156ac:	b940      	cbnz	r0, 156c0 <button_pressed+0x2c>
   156ae:	4926      	ldr	r1, [pc, #152]	; (15748 <button_pressed+0xb4>)
   156b0:	4826      	ldr	r0, [pc, #152]	; (1574c <button_pressed+0xb8>)
   156b2:	227c      	movs	r2, #124	; 0x7c
   156b4:	f004 f830 	bl	19718 <printk>
   156b8:	217c      	movs	r1, #124	; 0x7c
   156ba:	4823      	ldr	r0, [pc, #140]	; (15748 <button_pressed+0xb4>)
   156bc:	f004 fad2 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   156c0:	4820      	ldr	r0, [pc, #128]	; (15744 <button_pressed+0xb0>)
   156c2:	f003 f871 	bl	187a8 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   156c6:	2400      	movs	r4, #0
   156c8:	4d21      	ldr	r5, [pc, #132]	; (15750 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   156ca:	4f22      	ldr	r7, [pc, #136]	; (15754 <button_pressed+0xc0>)
   156cc:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   156d0:	f855 0b04 	ldr.w	r0, [r5], #4
   156d4:	7919      	ldrb	r1, [r3, #4]
   156d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   156da:	3401      	adds	r4, #1
   156dc:	f7ff fe18 	bl	15310 <z_impl_gpio_pin_interrupt_configure>
   156e0:	2c04      	cmp	r4, #4
   156e2:	d006      	beq.n	156f2 <button_pressed+0x5e>
   156e4:	2800      	cmp	r0, #0
   156e6:	d0f1      	beq.n	156cc <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   156e8:	2145      	movs	r1, #69	; 0x45
   156ea:	481b      	ldr	r0, [pc, #108]	; (15758 <button_pressed+0xc4>)
   156ec:	f004 f814 	bl	19718 <printk>
   156f0:	e001      	b.n	156f6 <button_pressed+0x62>
	if (err) {
   156f2:	2800      	cmp	r0, #0
   156f4:	d1f8      	bne.n	156e8 <button_pressed+0x54>
	switch (state) {
   156f6:	4b19      	ldr	r3, [pc, #100]	; (1575c <button_pressed+0xc8>)
   156f8:	781a      	ldrb	r2, [r3, #0]
   156fa:	b9ca      	cbnz	r2, 15730 <button_pressed+0x9c>
		state = STATE_SCANNING;
   156fc:	2201      	movs	r2, #1
   156fe:	4918      	ldr	r1, [pc, #96]	; (15760 <button_pressed+0xcc>)
   15700:	701a      	strb	r2, [r3, #0]
   15702:	4818      	ldr	r0, [pc, #96]	; (15764 <button_pressed+0xd0>)
   15704:	2221      	movs	r2, #33	; 0x21
   15706:	2300      	movs	r3, #0
   15708:	f003 f8a8 	bl	1885c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1570c:	480d      	ldr	r0, [pc, #52]	; (15744 <button_pressed+0xb0>)
   1570e:	f003 f83d 	bl	1878c <z_spin_unlock_valid>
   15712:	b940      	cbnz	r0, 15726 <button_pressed+0x92>
   15714:	490c      	ldr	r1, [pc, #48]	; (15748 <button_pressed+0xb4>)
   15716:	480d      	ldr	r0, [pc, #52]	; (1574c <button_pressed+0xb8>)
   15718:	22a7      	movs	r2, #167	; 0xa7
   1571a:	f003 fffd 	bl	19718 <printk>
   1571e:	21a7      	movs	r1, #167	; 0xa7
   15720:	4809      	ldr	r0, [pc, #36]	; (15748 <button_pressed+0xb4>)
   15722:	f004 fa9f 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   15726:	f386 8811 	msr	BASEPRI, r6
   1572a:	f3bf 8f6f 	isb	sy
}
   1572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   15730:	22eb      	movs	r2, #235	; 0xeb
   15732:	490d      	ldr	r1, [pc, #52]	; (15768 <button_pressed+0xd4>)
   15734:	4805      	ldr	r0, [pc, #20]	; (1574c <button_pressed+0xb8>)
   15736:	f003 ffef 	bl	19718 <printk>
   1573a:	21eb      	movs	r1, #235	; 0xeb
   1573c:	480a      	ldr	r0, [pc, #40]	; (15768 <button_pressed+0xd4>)
   1573e:	f004 fa91 	bl	19c64 <assert_post_action>
		break;
   15742:	e7e3      	b.n	1570c <button_pressed+0x78>
   15744:	2000ad1c 	.word	0x2000ad1c
   15748:	0001e6f6 	.word	0x0001e6f6
   1574c:	0001e6bc 	.word	0x0001e6bc
   15750:	2000acc8 	.word	0x2000acc8
   15754:	0001ded4 	.word	0x0001ded4
   15758:	00020e2e 	.word	0x00020e2e
   1575c:	2000c5e0 	.word	0x2000c5e0
   15760:	2000a250 	.word	0x2000a250
   15764:	2000a3a0 	.word	0x2000a3a0
   15768:	00020dd3 	.word	0x00020dd3

0001576c <dk_leds_init>:
{
   1576c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15770:	2600      	movs	r6, #0
   15772:	4d23      	ldr	r5, [pc, #140]	; (15800 <dk_leds_init+0x94>)
   15774:	f8df 908c 	ldr.w	r9, [pc, #140]	; 15804 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15778:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15808 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   1577c:	6828      	ldr	r0, [r5, #0]
   1577e:	f001 f835 	bl	167ec <z_impl_device_get_binding>
   15782:	4604      	mov	r4, r0
   15784:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   15788:	b940      	cbnz	r0, 1579c <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   1578a:	2145      	movs	r1, #69	; 0x45
   1578c:	481f      	ldr	r0, [pc, #124]	; (1580c <dk_leds_init+0xa0>)
   1578e:	f003 ffc3 	bl	19718 <printk>
			return -ENODEV;
   15792:	f06f 0412 	mvn.w	r4, #18
}
   15796:	4620      	mov	r0, r4
   15798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1579c:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1579e:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   157a2:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   157a4:	fa03 f80b 	lsl.w	r8, r3, fp
   157a8:	6843      	ldr	r3, [r0, #4]
   157aa:	681b      	ldr	r3, [r3, #0]
   157ac:	ea18 0f03 	tst.w	r8, r3
   157b0:	d10a      	bne.n	157c8 <dk_leds_init+0x5c>
   157b2:	4651      	mov	r1, sl
   157b4:	4816      	ldr	r0, [pc, #88]	; (15810 <dk_leds_init+0xa4>)
   157b6:	f44f 7211 	mov.w	r2, #580	; 0x244
   157ba:	f003 ffad 	bl	19718 <printk>
   157be:	f44f 7111 	mov.w	r1, #580	; 0x244
   157c2:	4650      	mov	r0, sl
   157c4:	f004 fa4e 	bl	19c64 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   157c8:	68a3      	ldr	r3, [r4, #8]
   157ca:	4620      	mov	r0, r4
   157cc:	f44f 7200 	mov.w	r2, #512	; 0x200
   157d0:	4659      	mov	r1, fp
   157d2:	681b      	ldr	r3, [r3, #0]
   157d4:	4798      	blx	r3
	if (ret != 0) {
   157d6:	4604      	mov	r4, r0
   157d8:	b968      	cbnz	r0, 157f6 <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   157da:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   157dc:	3601      	adds	r6, #1
   157de:	ea23 0308 	bic.w	r3, r3, r8
   157e2:	2e04      	cmp	r6, #4
   157e4:	603b      	str	r3, [r7, #0]
   157e6:	f105 0508 	add.w	r5, r5, #8
   157ea:	d1c7      	bne.n	1577c <dk_leds_init+0x10>
}
   157ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157f0:	210f      	movs	r1, #15
   157f2:	f7ff be1f 	b.w	15434 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   157f6:	2145      	movs	r1, #69	; 0x45
   157f8:	4806      	ldr	r0, [pc, #24]	; (15814 <dk_leds_init+0xa8>)
   157fa:	f003 ff8d 	bl	19718 <printk>
			return err;
   157fe:	e7ca      	b.n	15796 <dk_leds_init+0x2a>
   15800:	0001def4 	.word	0x0001def4
   15804:	2000ad0c 	.word	0x2000ad0c
   15808:	00020d52 	.word	0x00020d52
   1580c:	00020e4c 	.word	0x00020e4c
   15810:	0001e6bc 	.word	0x0001e6bc
   15814:	00020e69 	.word	0x00020e69

00015818 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15818:	4b05      	ldr	r3, [pc, #20]	; (15830 <dk_read_buttons+0x18>)
   1581a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   1581e:	b100      	cbz	r0, 15822 <dk_read_buttons+0xa>
		*button_state = current_state;
   15820:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   15822:	4804      	ldr	r0, [pc, #16]	; (15834 <dk_read_buttons+0x1c>)
   15824:	b111      	cbz	r1, 1582c <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   15826:	6802      	ldr	r2, [r0, #0]
   15828:	405a      	eors	r2, r3
   1582a:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1582c:	6003      	str	r3, [r0, #0]
}
   1582e:	4770      	bx	lr
   15830:	2000ad20 	.word	0x2000ad20
   15834:	2000ad08 	.word	0x2000ad08

00015838 <dk_buttons_init>:
	button_handler_cb = button_handler;
   15838:	4b4f      	ldr	r3, [pc, #316]	; (15978 <dk_buttons_init+0x140>)
{
   1583a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   1583e:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   15840:	4e4e      	ldr	r6, [pc, #312]	; (1597c <dk_buttons_init+0x144>)
   15842:	484f      	ldr	r0, [pc, #316]	; (15980 <dk_buttons_init+0x148>)
   15844:	f007 fae5 	bl	1ce12 <z_impl_k_mutex_init>
   15848:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1584a:	2700      	movs	r7, #0
   1584c:	4d4d      	ldr	r5, [pc, #308]	; (15984 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1584e:	f8df a138 	ldr.w	sl, [pc, #312]	; 15988 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   15852:	6828      	ldr	r0, [r5, #0]
   15854:	f000 ffca 	bl	167ec <z_impl_device_get_binding>
   15858:	4604      	mov	r4, r0
   1585a:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   1585e:	b948      	cbnz	r0, 15874 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   15860:	2145      	movs	r1, #69	; 0x45
   15862:	484a      	ldr	r0, [pc, #296]	; (1598c <dk_buttons_init+0x154>)
   15864:	f003 ff58 	bl	19718 <printk>
			return -ENODEV;
   15868:	f06f 0412 	mvn.w	r4, #18
}
   1586c:	4620      	mov	r0, r4
   1586e:	b003      	add	sp, #12
   15870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15874:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   15876:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   1587a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1587e:	fa03 f30b 	lsl.w	r3, r3, fp
   15882:	9301      	str	r3, [sp, #4]
   15884:	6843      	ldr	r3, [r0, #4]
   15886:	9a01      	ldr	r2, [sp, #4]
   15888:	681b      	ldr	r3, [r3, #0]
   1588a:	421a      	tst	r2, r3
   1588c:	d10a      	bne.n	158a4 <dk_buttons_init+0x6c>
   1588e:	4651      	mov	r1, sl
   15890:	483f      	ldr	r0, [pc, #252]	; (15990 <dk_buttons_init+0x158>)
   15892:	f44f 7211 	mov.w	r2, #580	; 0x244
   15896:	f003 ff3f 	bl	19718 <printk>
   1589a:	f44f 7111 	mov.w	r1, #580	; 0x244
   1589e:	4650      	mov	r0, sl
   158a0:	f004 f9e0 	bl	19c64 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   158a4:	68a3      	ldr	r3, [r4, #8]
   158a6:	4620      	mov	r0, r4
   158a8:	f44f 7288 	mov.w	r2, #272	; 0x110
   158ac:	4659      	mov	r1, fp
   158ae:	681b      	ldr	r3, [r3, #0]
   158b0:	4798      	blx	r3
	if (ret != 0) {
   158b2:	4604      	mov	r4, r0
   158b4:	bb08      	cbnz	r0, 158fa <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   158b6:	f8d8 3000 	ldr.w	r3, [r8]
   158ba:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   158bc:	3701      	adds	r7, #1
   158be:	ea23 0302 	bic.w	r3, r3, r2
   158c2:	2f04      	cmp	r7, #4
   158c4:	f8c8 3000 	str.w	r3, [r8]
   158c8:	f105 0508 	add.w	r5, r5, #8
   158cc:	d1c1      	bne.n	15852 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   158ce:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   158d0:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   158d2:	f04f 0a01 	mov.w	sl, #1
   158d6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1597c <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   158da:	4b2a      	ldr	r3, [pc, #168]	; (15984 <dk_buttons_init+0x14c>)
   158dc:	f859 0b04 	ldr.w	r0, [r9], #4
   158e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   158e4:	791f      	ldrb	r7, [r3, #4]
   158e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   158ea:	4639      	mov	r1, r7
   158ec:	f7ff fd10 	bl	15310 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   158f0:	4604      	mov	r4, r0
   158f2:	b138      	cbz	r0, 15904 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   158f4:	2145      	movs	r1, #69	; 0x45
   158f6:	4827      	ldr	r0, [pc, #156]	; (15994 <dk_buttons_init+0x15c>)
   158f8:	e001      	b.n	158fe <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   158fa:	2145      	movs	r1, #69	; 0x45
   158fc:	4826      	ldr	r0, [pc, #152]	; (15998 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   158fe:	f003 ff0b 	bl	19718 <printk>
		return err;
   15902:	e7b3      	b.n	1586c <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15904:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   15906:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1590a:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   1590c:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15910:	d1e3      	bne.n	158da <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15912:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   15914:	4f21      	ldr	r7, [pc, #132]	; (1599c <dk_buttons_init+0x164>)
   15916:	4b22      	ldr	r3, [pc, #136]	; (159a0 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   15918:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1591c:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   15920:	6883      	ldr	r3, [r0, #8]
   15922:	69db      	ldr	r3, [r3, #28]
   15924:	b13b      	cbz	r3, 15936 <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   15926:	2201      	movs	r2, #1
   15928:	4639      	mov	r1, r7
   1592a:	4798      	blx	r3
		if (err) {
   1592c:	4604      	mov	r4, r0
   1592e:	b128      	cbz	r0, 1593c <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   15930:	2145      	movs	r1, #69	; 0x45
   15932:	481c      	ldr	r0, [pc, #112]	; (159a4 <dk_buttons_init+0x16c>)
   15934:	e7e3      	b.n	158fe <dk_buttons_init+0xc6>
		return -ENOTSUP;
   15936:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1593a:	e7f9      	b.n	15930 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1593c:	3501      	adds	r5, #1
   1593e:	2d04      	cmp	r5, #4
   15940:	d1ec      	bne.n	1591c <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15942:	4d19      	ldr	r5, [pc, #100]	; (159a8 <dk_buttons_init+0x170>)
   15944:	4601      	mov	r1, r0
   15946:	2230      	movs	r2, #48	; 0x30
   15948:	4628      	mov	r0, r5
   1594a:	f005 f970 	bl	1ac2e <memset>
	state = STATE_SCANNING;
   1594e:	2201      	movs	r2, #1
   15950:	4b16      	ldr	r3, [pc, #88]	; (159ac <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15952:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15954:	606b      	str	r3, [r5, #4]
   15956:	4b16      	ldr	r3, [pc, #88]	; (159b0 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15958:	4816      	ldr	r0, [pc, #88]	; (159b4 <dk_buttons_init+0x17c>)
   1595a:	701a      	strb	r2, [r3, #0]
   1595c:	2200      	movs	r2, #0
   1595e:	2300      	movs	r3, #0
   15960:	f002 ff7c 	bl	1885c <k_delayed_work_submit_to_queue>
	if (err) {
   15964:	4604      	mov	r4, r0
   15966:	b110      	cbz	r0, 1596e <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   15968:	2145      	movs	r1, #69	; 0x45
   1596a:	4813      	ldr	r0, [pc, #76]	; (159b8 <dk_buttons_init+0x180>)
   1596c:	e7c7      	b.n	158fe <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   1596e:	4601      	mov	r1, r0
   15970:	f7ff ff52 	bl	15818 <dk_read_buttons>
	return 0;
   15974:	e77a      	b.n	1586c <dk_buttons_init+0x34>
   15976:	bf00      	nop
   15978:	2000acd8 	.word	0x2000acd8
   1597c:	2000acc8 	.word	0x2000acc8
   15980:	2000acdc 	.word	0x2000acdc
   15984:	0001ded4 	.word	0x0001ded4
   15988:	00020d52 	.word	0x00020d52
   1598c:	00020e4c 	.word	0x00020e4c
   15990:	0001e6bc 	.word	0x0001e6bc
   15994:	00020eaa 	.word	0x00020eaa
   15998:	00020e88 	.word	0x00020e88
   1599c:	2000acf8 	.word	0x2000acf8
   159a0:	00015695 	.word	0x00015695
   159a4:	00020eca 	.word	0x00020eca
   159a8:	2000a250 	.word	0x2000a250
   159ac:	00015491 	.word	0x00015491
   159b0:	2000c5e0 	.word	0x2000c5e0
   159b4:	2000a3a0 	.word	0x2000a3a0
   159b8:	00020db1 	.word	0x00020db1

000159bc <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   159bc:	2804      	cmp	r0, #4
{
   159be:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   159c0:	d907      	bls.n	159d2 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   159c2:	2145      	movs	r1, #69	; 0x45
   159c4:	480d      	ldr	r0, [pc, #52]	; (159fc <dk_set_led+0x40>)
   159c6:	f003 fea7 	bl	19718 <printk>
   159ca:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   159ce:	4620      	mov	r0, r4
   159d0:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   159d2:	fab1 f281 	clz	r2, r1
   159d6:	4b0a      	ldr	r3, [pc, #40]	; (15a00 <dk_set_led+0x44>)
   159d8:	0952      	lsrs	r2, r2, #5
   159da:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   159de:	7919      	ldrb	r1, [r3, #4]
   159e0:	4b08      	ldr	r3, [pc, #32]	; (15a04 <dk_set_led+0x48>)
   159e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   159e6:	f7ff fd01 	bl	153ec <gpio_pin_set_raw>
	if (err) {
   159ea:	4604      	mov	r4, r0
   159ec:	2800      	cmp	r0, #0
   159ee:	d0ee      	beq.n	159ce <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   159f0:	2145      	movs	r1, #69	; 0x45
   159f2:	4805      	ldr	r0, [pc, #20]	; (15a08 <dk_set_led+0x4c>)
   159f4:	f003 fe90 	bl	19718 <printk>
   159f8:	e7e9      	b.n	159ce <dk_set_led+0x12>
   159fa:	bf00      	nop
   159fc:	00020ee3 	.word	0x00020ee3
   15a00:	0001def4 	.word	0x0001def4
   15a04:	2000ad0c 	.word	0x2000ad0c
   15a08:	00020d7c 	.word	0x00020d7c

00015a0c <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   15a0c:	4803      	ldr	r0, [pc, #12]	; (15a1c <k_sys_fatal_error_handler+0x10>)
   15a0e:	2145      	movs	r1, #69	; 0x45
{
   15a10:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   15a12:	f003 fe81 	bl	19718 <printk>
	sys_arch_reboot(0);
   15a16:	2000      	movs	r0, #0
   15a18:	f7f7 fb7a 	bl	d110 <sys_arch_reboot>

	CODE_UNREACHABLE;
   15a1c:	00020f17 	.word	0x00020f17

00015a20 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   15a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15a24:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   15a26:	4c21      	ldr	r4, [pc, #132]	; (15aac <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   15a28:	4e21      	ldr	r6, [pc, #132]	; (15ab0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15a2a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   15a2e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15ab4 <check_ext_api_requests+0x94>
{
   15a32:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15a34:	45a8      	cmp	r8, r5
   15a36:	d803      	bhi.n	15a40 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   15a38:	2000      	movs	r0, #0
   15a3a:	b005      	add	sp, #20
   15a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   15a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a42:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15a46:	681f      	ldr	r7, [r3, #0]
   15a48:	ab01      	add	r3, sp, #4
   15a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15a4e:	220c      	movs	r2, #12
   15a50:	4619      	mov	r1, r3
   15a52:	4638      	mov	r0, r7
   15a54:	f005 f8af 	bl	1abb6 <memcmp>
   15a58:	b990      	cbnz	r0, 15a80 <check_ext_api_requests+0x60>
   15a5a:	b18f      	cbz	r7, 15a80 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   15a5e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15a60:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   15a62:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15a64:	4291      	cmp	r1, r2
   15a66:	d10b      	bne.n	15a80 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   15a68:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   15a6a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   15a6c:	4291      	cmp	r1, r2
   15a6e:	d807      	bhi.n	15a80 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   15a70:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   15a72:	4291      	cmp	r1, r2
   15a74:	d904      	bls.n	15a80 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   15a76:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15a78:	695b      	ldr	r3, [r3, #20]
   15a7a:	ea32 0303 	bics.w	r3, r2, r3
   15a7e:	d00a      	beq.n	15a96 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   15a80:	6a27      	ldr	r7, [r4, #32]
   15a82:	b167      	cbz	r7, 15a9e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   15a84:	480c      	ldr	r0, [pc, #48]	; (15ab8 <check_ext_api_requests+0x98>)
   15a86:	f003 fe47 	bl	19718 <printk>
			k_panic();
   15a8a:	4040      	eors	r0, r0
   15a8c:	f380 8811 	msr	BASEPRI, r0
   15a90:	f04f 0004 	mov.w	r0, #4
   15a94:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   15a96:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15a98:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   15a9a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15a9c:	e7ca      	b.n	15a34 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   15a9e:	4648      	mov	r0, r9
   15aa0:	f003 fe3a 	bl	19718 <printk>
			*ext_api_req->ext_api = NULL;
   15aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15aa6:	601f      	str	r7, [r3, #0]
   15aa8:	e7f5      	b.n	15a96 <check_ext_api_requests+0x76>
   15aaa:	bf00      	nop
   15aac:	0000823c 	.word	0x0000823c
   15ab0:	0001d620 	.word	0x0001d620
   15ab4:	00020f62 	.word	0x00020f62
   15ab8:	00020f39 	.word	0x00020f39

00015abc <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15abc:	4b04      	ldr	r3, [pc, #16]	; (15ad0 <SystemCoreClockUpdate+0x14>)
   15abe:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15ac2:	4b04      	ldr	r3, [pc, #16]	; (15ad4 <SystemCoreClockUpdate+0x18>)
   15ac4:	f002 0203 	and.w	r2, r2, #3
   15ac8:	40d3      	lsrs	r3, r2
   15aca:	4a03      	ldr	r2, [pc, #12]	; (15ad8 <SystemCoreClockUpdate+0x1c>)
   15acc:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15ace:	4770      	bx	lr
   15ad0:	40005000 	.word	0x40005000
   15ad4:	07a12000 	.word	0x07a12000
   15ad8:	2000851c 	.word	0x2000851c

00015adc <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   15adc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   15ade:	4604      	mov	r4, r0
   15ae0:	b940      	cbnz	r0, 15af4 <nrfx_clock_init+0x18>
   15ae2:	4909      	ldr	r1, [pc, #36]	; (15b08 <nrfx_clock_init+0x2c>)
   15ae4:	4809      	ldr	r0, [pc, #36]	; (15b0c <nrfx_clock_init+0x30>)
   15ae6:	22b3      	movs	r2, #179	; 0xb3
   15ae8:	f003 fe16 	bl	19718 <printk>
   15aec:	21b3      	movs	r1, #179	; 0xb3
   15aee:	4806      	ldr	r0, [pc, #24]	; (15b08 <nrfx_clock_init+0x2c>)
   15af0:	f004 f8b8 	bl	19c64 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15af4:	4b06      	ldr	r3, [pc, #24]	; (15b10 <nrfx_clock_init+0x34>)
   15af6:	791a      	ldrb	r2, [r3, #4]
   15af8:	b922      	cbnz	r2, 15b04 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15afa:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   15afc:	4805      	ldr	r0, [pc, #20]	; (15b14 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   15afe:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   15b00:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15b02:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15b04:	4804      	ldr	r0, [pc, #16]	; (15b18 <nrfx_clock_init+0x3c>)
    return err_code;
   15b06:	e7fc      	b.n	15b02 <nrfx_clock_init+0x26>
   15b08:	00020f95 	.word	0x00020f95
   15b0c:	0001e6bc 	.word	0x0001e6bc
   15b10:	2000ad24 	.word	0x2000ad24
   15b14:	0bad0000 	.word	0x0bad0000
   15b18:	0bad000c 	.word	0x0bad000c

00015b1c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15b1c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15b1e:	4b0d      	ldr	r3, [pc, #52]	; (15b54 <nrfx_clock_enable+0x38>)
   15b20:	791b      	ldrb	r3, [r3, #4]
   15b22:	b943      	cbnz	r3, 15b36 <nrfx_clock_enable+0x1a>
   15b24:	490c      	ldr	r1, [pc, #48]	; (15b58 <nrfx_clock_enable+0x3c>)
   15b26:	480d      	ldr	r0, [pc, #52]	; (15b5c <nrfx_clock_enable+0x40>)
   15b28:	22cc      	movs	r2, #204	; 0xcc
   15b2a:	f003 fdf5 	bl	19718 <printk>
   15b2e:	21cc      	movs	r1, #204	; 0xcc
   15b30:	4809      	ldr	r0, [pc, #36]	; (15b58 <nrfx_clock_enable+0x3c>)
   15b32:	f004 f897 	bl	19c64 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15b36:	2005      	movs	r0, #5
   15b38:	f7f6 ffde 	bl	caf8 <arch_irq_is_enabled>
   15b3c:	b910      	cbnz	r0, 15b44 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15b3e:	2005      	movs	r0, #5
   15b40:	f7f6 ffca 	bl	cad8 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15b44:	2201      	movs	r2, #1
   15b46:	4b06      	ldr	r3, [pc, #24]	; (15b60 <nrfx_clock_enable+0x44>)
   15b48:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15b4c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15b50:	bd08      	pop	{r3, pc}
   15b52:	bf00      	nop
   15b54:	2000ad24 	.word	0x2000ad24
   15b58:	00020f95 	.word	0x00020f95
   15b5c:	0001e6bc 	.word	0x0001e6bc
   15b60:	40005000 	.word	0x40005000

00015b64 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15b64:	4b30      	ldr	r3, [pc, #192]	; (15c28 <nrfx_clock_start+0xc4>)
{
   15b66:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15b68:	791b      	ldrb	r3, [r3, #4]
{
   15b6a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15b6c:	b953      	cbnz	r3, 15b84 <nrfx_clock_start+0x20>
   15b6e:	492f      	ldr	r1, [pc, #188]	; (15c2c <nrfx_clock_start+0xc8>)
   15b70:	482f      	ldr	r0, [pc, #188]	; (15c30 <nrfx_clock_start+0xcc>)
   15b72:	f44f 7284 	mov.w	r2, #264	; 0x108
   15b76:	f003 fdcf 	bl	19718 <printk>
   15b7a:	f44f 7184 	mov.w	r1, #264	; 0x108
   15b7e:	482b      	ldr	r0, [pc, #172]	; (15c2c <nrfx_clock_start+0xc8>)
   15b80:	f004 f870 	bl	19c64 <assert_post_action>
    switch (domain)
   15b84:	2c03      	cmp	r4, #3
   15b86:	d842      	bhi.n	15c0e <nrfx_clock_start+0xaa>
   15b88:	e8df f004 	tbb	[pc, r4]
   15b8c:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15b90:	4b28      	ldr	r3, [pc, #160]	; (15c34 <nrfx_clock_start+0xd0>)
   15b92:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15b96:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   15b9a:	03c9      	lsls	r1, r1, #15
   15b9c:	d510      	bpl.n	15bc0 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   15b9e:	f002 0203 	and.w	r2, r2, #3
   15ba2:	2a02      	cmp	r2, #2
   15ba4:	d10c      	bne.n	15bc0 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15ba6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15baa:	2200      	movs	r2, #0
   15bac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15bb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   15bb4:	2202      	movs	r2, #2
   15bb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15bba:	2201      	movs	r2, #1
   15bbc:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15bbe:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   15bc0:	2201      	movs	r2, #1
   15bc2:	e7f0      	b.n	15ba6 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15bc4:	2200      	movs	r2, #0
   15bc6:	4b1b      	ldr	r3, [pc, #108]	; (15c34 <nrfx_clock_start+0xd0>)
   15bc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15bcc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15bd0:	2201      	movs	r2, #1
   15bd2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15bd6:	601a      	str	r2, [r3, #0]
}
   15bd8:	e7f1      	b.n	15bbe <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15bda:	2200      	movs	r2, #0
   15bdc:	4b15      	ldr	r3, [pc, #84]	; (15c34 <nrfx_clock_start+0xd0>)
   15bde:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15be2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15be6:	f44f 7200 	mov.w	r2, #512	; 0x200
   15bea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15bee:	2201      	movs	r2, #1
   15bf0:	621a      	str	r2, [r3, #32]
}
   15bf2:	e7e4      	b.n	15bbe <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15bf4:	2200      	movs	r2, #0
   15bf6:	4b0f      	ldr	r3, [pc, #60]	; (15c34 <nrfx_clock_start+0xd0>)
   15bf8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15bfc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15c00:	f44f 7280 	mov.w	r2, #256	; 0x100
   15c04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c08:	2201      	movs	r2, #1
   15c0a:	619a      	str	r2, [r3, #24]
}
   15c0c:	e7d7      	b.n	15bbe <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   15c0e:	4907      	ldr	r1, [pc, #28]	; (15c2c <nrfx_clock_start+0xc8>)
   15c10:	4807      	ldr	r0, [pc, #28]	; (15c30 <nrfx_clock_start+0xcc>)
   15c12:	f44f 729d 	mov.w	r2, #314	; 0x13a
   15c16:	f003 fd7f 	bl	19718 <printk>
}
   15c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   15c1e:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15c22:	4802      	ldr	r0, [pc, #8]	; (15c2c <nrfx_clock_start+0xc8>)
   15c24:	f004 b81e 	b.w	19c64 <assert_post_action>
   15c28:	2000ad24 	.word	0x2000ad24
   15c2c:	00020f95 	.word	0x00020f95
   15c30:	0001e6bc 	.word	0x0001e6bc
   15c34:	40005000 	.word	0x40005000

00015c38 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15c38:	4b42      	ldr	r3, [pc, #264]	; (15d44 <nrfx_clock_stop+0x10c>)
{
   15c3a:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15c3c:	791b      	ldrb	r3, [r3, #4]
{
   15c3e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15c40:	b953      	cbnz	r3, 15c58 <nrfx_clock_stop+0x20>
   15c42:	4941      	ldr	r1, [pc, #260]	; (15d48 <nrfx_clock_stop+0x110>)
   15c44:	4841      	ldr	r0, [pc, #260]	; (15d4c <nrfx_clock_stop+0x114>)
   15c46:	f240 1241 	movw	r2, #321	; 0x141
   15c4a:	f003 fd65 	bl	19718 <printk>
   15c4e:	f240 1141 	movw	r1, #321	; 0x141
   15c52:	483d      	ldr	r0, [pc, #244]	; (15d48 <nrfx_clock_stop+0x110>)
   15c54:	f004 f806 	bl	19c64 <assert_post_action>
    switch (domain)
   15c58:	2c03      	cmp	r4, #3
   15c5a:	d856      	bhi.n	15d0a <nrfx_clock_stop+0xd2>
   15c5c:	e8df f004 	tbb	[pc, r4]
   15c60:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   15c64:	2202      	movs	r2, #2
   15c66:	4b3a      	ldr	r3, [pc, #232]	; (15d50 <nrfx_clock_stop+0x118>)
   15c68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c6c:	2200      	movs	r2, #0
   15c6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15c72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c76:	2201      	movs	r2, #1
   15c78:	60da      	str	r2, [r3, #12]
   15c7a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15c7e:	4e34      	ldr	r6, [pc, #208]	; (15d50 <nrfx_clock_stop+0x118>)
    switch (domain)
   15c80:	2c02      	cmp	r4, #2
   15c82:	d04f      	beq.n	15d24 <nrfx_clock_stop+0xec>
   15c84:	2c03      	cmp	r4, #3
   15c86:	d050      	beq.n	15d2a <nrfx_clock_stop+0xf2>
   15c88:	2c00      	cmp	r4, #0
   15c8a:	d151      	bne.n	15d30 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15c8c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   15c90:	03db      	lsls	r3, r3, #15
   15c92:	d51f      	bpl.n	15cd4 <nrfx_clock_stop+0x9c>
   15c94:	2001      	movs	r0, #1
   15c96:	f006 fc99 	bl	1c5cc <nrfx_busy_wait>
   15c9a:	3d01      	subs	r5, #1
   15c9c:	d1f0      	bne.n	15c80 <nrfx_clock_stop+0x48>
   15c9e:	e019      	b.n	15cd4 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   15ca0:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ca2:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ca4:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   15ca8:	4c29      	ldr	r4, [pc, #164]	; (15d50 <nrfx_clock_stop+0x118>)
   15caa:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15cae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   15cb2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15cb6:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15cb8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15cbc:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15cc0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15cc4:	03d2      	lsls	r2, r2, #15
   15cc6:	d505      	bpl.n	15cd4 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15cc8:	b123      	cbz	r3, 15cd4 <nrfx_clock_stop+0x9c>
   15cca:	2001      	movs	r0, #1
   15ccc:	f006 fc7e 	bl	1c5cc <nrfx_busy_wait>
   15cd0:	3d01      	subs	r5, #1
   15cd2:	d1f1      	bne.n	15cb8 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15cd4:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   15cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
   15cda:	4b1d      	ldr	r3, [pc, #116]	; (15d50 <nrfx_clock_stop+0x118>)
   15cdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ce0:	2200      	movs	r2, #0
   15ce2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15ce6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15cea:	2201      	movs	r2, #1
   15cec:	625a      	str	r2, [r3, #36]	; 0x24
}
   15cee:	e7c4      	b.n	15c7a <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   15cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
   15cf4:	4b16      	ldr	r3, [pc, #88]	; (15d50 <nrfx_clock_stop+0x118>)
   15cf6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15cfa:	2200      	movs	r2, #0
   15cfc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15d00:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15d04:	2201      	movs	r2, #1
   15d06:	61da      	str	r2, [r3, #28]
}
   15d08:	e7b7      	b.n	15c7a <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   15d0a:	490f      	ldr	r1, [pc, #60]	; (15d48 <nrfx_clock_stop+0x110>)
   15d0c:	480f      	ldr	r0, [pc, #60]	; (15d4c <nrfx_clock_stop+0x114>)
   15d0e:	f240 125d 	movw	r2, #349	; 0x15d
   15d12:	f003 fd01 	bl	19718 <printk>
   15d16:	f240 115d 	movw	r1, #349	; 0x15d
   15d1a:	480b      	ldr	r0, [pc, #44]	; (15d48 <nrfx_clock_stop+0x110>)
}
   15d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   15d20:	f003 bfa0 	b.w	19c64 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15d24:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15d28:	e7b2      	b.n	15c90 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   15d2a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   15d2e:	e7af      	b.n	15c90 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   15d30:	4908      	ldr	r1, [pc, #32]	; (15d54 <nrfx_clock_stop+0x11c>)
   15d32:	4806      	ldr	r0, [pc, #24]	; (15d4c <nrfx_clock_stop+0x114>)
   15d34:	f240 3242 	movw	r2, #834	; 0x342
   15d38:	f003 fcee 	bl	19718 <printk>
   15d3c:	f240 3142 	movw	r1, #834	; 0x342
   15d40:	4804      	ldr	r0, [pc, #16]	; (15d54 <nrfx_clock_stop+0x11c>)
   15d42:	e7eb      	b.n	15d1c <nrfx_clock_stop+0xe4>
   15d44:	2000ad24 	.word	0x2000ad24
   15d48:	00020f95 	.word	0x00020f95
   15d4c:	0001e6bc 	.word	0x0001e6bc
   15d50:	40005000 	.word	0x40005000
   15d54:	00020fd2 	.word	0x00020fd2

00015d58 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15d58:	4b28      	ldr	r3, [pc, #160]	; (15dfc <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15d5a:	b510      	push	{r4, lr}
   15d5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   15d60:	b152      	cbz	r2, 15d78 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15d62:	2000      	movs	r0, #0
   15d64:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15d68:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   15d6c:	2201      	movs	r2, #1
   15d6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   15d72:	4b23      	ldr	r3, [pc, #140]	; (15e00 <nrfx_power_clock_irq_handler+0xa8>)
   15d74:	681b      	ldr	r3, [r3, #0]
   15d76:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15d78:	4b20      	ldr	r3, [pc, #128]	; (15dfc <nrfx_power_clock_irq_handler+0xa4>)
   15d7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15d7e:	b18a      	cbz	r2, 15da4 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15d80:	2200      	movs	r2, #0
   15d82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15d86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15d8a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15d8e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   15d92:	f002 0203 	and.w	r2, r2, #3
   15d96:	2a01      	cmp	r2, #1
   15d98:	f04f 0102 	mov.w	r1, #2
   15d9c:	d126      	bne.n	15dec <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15d9e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15da2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15da4:	4b15      	ldr	r3, [pc, #84]	; (15dfc <nrfx_power_clock_irq_handler+0xa4>)
   15da6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   15daa:	b162      	cbz	r2, 15dc6 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dac:	2200      	movs	r2, #0
   15dae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15db2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   15db6:	f44f 7280 	mov.w	r2, #256	; 0x100
   15dba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   15dbe:	4b10      	ldr	r3, [pc, #64]	; (15e00 <nrfx_power_clock_irq_handler+0xa8>)
   15dc0:	2004      	movs	r0, #4
   15dc2:	681b      	ldr	r3, [r3, #0]
   15dc4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15dc6:	4b0d      	ldr	r3, [pc, #52]	; (15dfc <nrfx_power_clock_irq_handler+0xa4>)
   15dc8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   15dcc:	b1aa      	cbz	r2, 15dfa <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   15dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dd2:	2200      	movs	r2, #0
   15dd4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15dd8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   15ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
   15de0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   15de4:	4b06      	ldr	r3, [pc, #24]	; (15e00 <nrfx_power_clock_irq_handler+0xa8>)
   15de6:	2005      	movs	r0, #5
   15de8:	681b      	ldr	r3, [r3, #0]
   15dea:	4718      	bx	r3
   15dec:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15df0:	4b03      	ldr	r3, [pc, #12]	; (15e00 <nrfx_power_clock_irq_handler+0xa8>)
   15df2:	2001      	movs	r0, #1
   15df4:	681b      	ldr	r3, [r3, #0]
   15df6:	4798      	blx	r3
   15df8:	e7d4      	b.n	15da4 <nrfx_power_clock_irq_handler+0x4c>
}
   15dfa:	bd10      	pop	{r4, pc}
   15dfc:	40005000 	.word	0x40005000
   15e00:	2000ad24 	.word	0x2000ad24

00015e04 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   15e04:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   15e06:	4c0a      	ldr	r4, [pc, #40]	; (15e30 <nrfx_dppi_channel_alloc+0x2c>)
   15e08:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   15e0a:	43ce      	mvns	r6, r1
   15e0c:	d00e      	beq.n	15e2c <nrfx_dppi_channel_alloc+0x28>
   15e0e:	2300      	movs	r3, #0
   15e10:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   15e12:	fa26 f502 	lsr.w	r5, r6, r2
   15e16:	07ed      	lsls	r5, r5, #31
   15e18:	f103 0301 	add.w	r3, r3, #1
   15e1c:	d5f8      	bpl.n	15e10 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   15e1e:	2301      	movs	r3, #1
   15e20:	4093      	lsls	r3, r2
   15e22:	430b      	orrs	r3, r1
    *p_channel = channel;
   15e24:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   15e26:	4803      	ldr	r0, [pc, #12]	; (15e34 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   15e28:	6023      	str	r3, [r4, #0]
}
   15e2a:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   15e2c:	4802      	ldr	r0, [pc, #8]	; (15e38 <nrfx_dppi_channel_alloc+0x34>)
   15e2e:	e7fc      	b.n	15e2a <nrfx_dppi_channel_alloc+0x26>
   15e30:	2000ad2c 	.word	0x2000ad2c
   15e34:	0bad0000 	.word	0x0bad0000
   15e38:	0bad0002 	.word	0x0bad0002

00015e3c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   15e3c:	2301      	movs	r3, #1
   15e3e:	fa03 f000 	lsl.w	r0, r3, r0
   15e42:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   15e44:	b193      	cbz	r3, 15e6c <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   15e46:	f04f 0320 	mov.w	r3, #32
   15e4a:	f3ef 8111 	mrs	r1, BASEPRI
   15e4e:	f383 8811 	msr	BASEPRI, r3
   15e52:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   15e56:	4a06      	ldr	r2, [pc, #24]	; (15e70 <nrfx_gpiote_channel_free+0x34>)
   15e58:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   15e5a:	ea23 0000 	bic.w	r0, r3, r0
   15e5e:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   15e60:	f381 8811 	msr	BASEPRI, r1
   15e64:	f3bf 8f6f 	isb	sy
   15e68:	4802      	ldr	r0, [pc, #8]	; (15e74 <nrfx_gpiote_channel_free+0x38>)
   15e6a:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   15e6c:	4802      	ldr	r0, [pc, #8]	; (15e78 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15e6e:	4770      	bx	lr
   15e70:	2000ad30 	.word	0x2000ad30
   15e74:	0bad0000 	.word	0x0bad0000
   15e78:	0bad0004 	.word	0x0bad0004

00015e7c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   15e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   15e80:	22ff      	movs	r2, #255	; 0xff
{
   15e82:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   15e84:	2601      	movs	r6, #1
{
   15e86:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   15e88:	f8df e054 	ldr.w	lr, [pc, #84]	; 15ee0 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   15e8c:	4815      	ldr	r0, [pc, #84]	; (15ee4 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   15e8e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 15ee8 <nrfx_gpiote_channel_alloc+0x6c>
   15e92:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   15e94:	f04f 0120 	mov.w	r1, #32
   15e98:	f3ef 8c11 	mrs	ip, BASEPRI
   15e9c:	f381 8811 	msr	BASEPRI, r1
   15ea0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   15ea4:	fa22 f103 	lsr.w	r1, r2, r3
   15ea8:	07c9      	lsls	r1, r1, #31
   15eaa:	d50a      	bpl.n	15ec2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   15eac:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   15eb0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   15eb4:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   15eb6:	bf01      	itttt	eq
   15eb8:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   15eba:	4339      	orreq	r1, r7
   15ebc:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   15ec0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   15ec2:	f38c 8811 	msr	BASEPRI, ip
   15ec6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   15eca:	4540      	cmp	r0, r8
   15ecc:	d005      	beq.n	15eda <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   15ece:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   15ed2:	439a      	bics	r2, r3
   15ed4:	f104 0401 	add.w	r4, r4, #1
   15ed8:	d1db      	bne.n	15e92 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15ede:	bf00      	nop
   15ee0:	2000ad30 	.word	0x2000ad30
   15ee4:	0bad0002 	.word	0x0bad0002
   15ee8:	0bad0000 	.word	0x0bad0000

00015eec <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   15eec:	b570      	push	{r4, r5, r6, lr}
   15eee:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   15ef0:	460d      	mov	r5, r1
   15ef2:	b941      	cbnz	r1, 15f06 <nrfx_ipc_init+0x1a>
   15ef4:	490b      	ldr	r1, [pc, #44]	; (15f24 <nrfx_ipc_init+0x38>)
   15ef6:	480c      	ldr	r0, [pc, #48]	; (15f28 <nrfx_ipc_init+0x3c>)
   15ef8:	2232      	movs	r2, #50	; 0x32
   15efa:	f003 fc0d 	bl	19718 <printk>
   15efe:	2132      	movs	r1, #50	; 0x32
   15f00:	4808      	ldr	r0, [pc, #32]	; (15f24 <nrfx_ipc_init+0x38>)
   15f02:	f003 feaf 	bl	19c64 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   15f06:	4c09      	ldr	r4, [pc, #36]	; (15f2c <nrfx_ipc_init+0x40>)
   15f08:	7923      	ldrb	r3, [r4, #4]
   15f0a:	b943      	cbnz	r3, 15f1e <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   15f0c:	202a      	movs	r0, #42	; 0x2a
   15f0e:	f7f6 fde3 	bl	cad8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15f12:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   15f14:	4806      	ldr	r0, [pc, #24]	; (15f30 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15f16:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   15f18:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   15f1a:	60a6      	str	r6, [r4, #8]
}
   15f1c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   15f1e:	4805      	ldr	r0, [pc, #20]	; (15f34 <nrfx_ipc_init+0x48>)
   15f20:	e7fc      	b.n	15f1c <nrfx_ipc_init+0x30>
   15f22:	bf00      	nop
   15f24:	00021006 	.word	0x00021006
   15f28:	0001e6bc 	.word	0x0001e6bc
   15f2c:	2000ad90 	.word	0x2000ad90
   15f30:	0bad0000 	.word	0x0bad0000
   15f34:	0bad000c 	.word	0x0bad000c

00015f38 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   15f38:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   15f3a:	4604      	mov	r4, r0
   15f3c:	b940      	cbnz	r0, 15f50 <nrfx_ipc_config_load+0x18>
   15f3e:	4919      	ldr	r1, [pc, #100]	; (15fa4 <nrfx_ipc_config_load+0x6c>)
   15f40:	4819      	ldr	r0, [pc, #100]	; (15fa8 <nrfx_ipc_config_load+0x70>)
   15f42:	2244      	movs	r2, #68	; 0x44
   15f44:	f003 fbe8 	bl	19718 <printk>
   15f48:	2144      	movs	r1, #68	; 0x44
   15f4a:	4816      	ldr	r0, [pc, #88]	; (15fa4 <nrfx_ipc_config_load+0x6c>)
   15f4c:	f003 fe8a 	bl	19c64 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15f50:	4b16      	ldr	r3, [pc, #88]	; (15fac <nrfx_ipc_config_load+0x74>)
   15f52:	791b      	ldrb	r3, [r3, #4]
   15f54:	2b01      	cmp	r3, #1
   15f56:	d008      	beq.n	15f6a <nrfx_ipc_config_load+0x32>
   15f58:	4912      	ldr	r1, [pc, #72]	; (15fa4 <nrfx_ipc_config_load+0x6c>)
   15f5a:	4813      	ldr	r0, [pc, #76]	; (15fa8 <nrfx_ipc_config_load+0x70>)
   15f5c:	2245      	movs	r2, #69	; 0x45
   15f5e:	f003 fbdb 	bl	19718 <printk>
   15f62:	2145      	movs	r1, #69	; 0x45
   15f64:	480f      	ldr	r0, [pc, #60]	; (15fa4 <nrfx_ipc_config_load+0x6c>)
   15f66:	f003 fe7d 	bl	19c64 <assert_post_action>
{
   15f6a:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   15f6c:	4a10      	ldr	r2, [pc, #64]	; (15fb0 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   15f6e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   15f72:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15f76:	3301      	adds	r3, #1
   15f78:	2b10      	cmp	r3, #16
   15f7a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   15f7e:	d1f6      	bne.n	15f6e <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   15f80:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   15f82:	4a0b      	ldr	r2, [pc, #44]	; (15fb0 <nrfx_ipc_config_load+0x78>)
   15f84:	f104 0140 	add.w	r1, r4, #64	; 0x40
   15f88:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   15f8c:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15f90:	3301      	adds	r3, #1
   15f92:	2b10      	cmp	r3, #16
   15f94:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   15f98:	d1f6      	bne.n	15f88 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   15f9a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   15f9e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15fa2:	bd38      	pop	{r3, r4, r5, pc}
   15fa4:	00021006 	.word	0x00021006
   15fa8:	0001e6bc 	.word	0x0001e6bc
   15fac:	2000ad90 	.word	0x2000ad90
   15fb0:	4002a000 	.word	0x4002a000

00015fb4 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   15fb4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15fb6:	4b0a      	ldr	r3, [pc, #40]	; (15fe0 <nrfx_ipc_receive_event_enable+0x2c>)
{
   15fb8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15fba:	791b      	ldrb	r3, [r3, #4]
   15fbc:	2b01      	cmp	r3, #1
   15fbe:	d008      	beq.n	15fd2 <nrfx_ipc_receive_event_enable+0x1e>
   15fc0:	4908      	ldr	r1, [pc, #32]	; (15fe4 <nrfx_ipc_receive_event_enable+0x30>)
   15fc2:	4809      	ldr	r0, [pc, #36]	; (15fe8 <nrfx_ipc_receive_event_enable+0x34>)
   15fc4:	226a      	movs	r2, #106	; 0x6a
   15fc6:	f003 fba7 	bl	19718 <printk>
   15fca:	216a      	movs	r1, #106	; 0x6a
   15fcc:	4805      	ldr	r0, [pc, #20]	; (15fe4 <nrfx_ipc_receive_event_enable+0x30>)
   15fce:	f003 fe49 	bl	19c64 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   15fd2:	2301      	movs	r3, #1
   15fd4:	fa03 f404 	lsl.w	r4, r3, r4
   15fd8:	4b04      	ldr	r3, [pc, #16]	; (15fec <nrfx_ipc_receive_event_enable+0x38>)
   15fda:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   15fde:	bd10      	pop	{r4, pc}
   15fe0:	2000ad90 	.word	0x2000ad90
   15fe4:	00021006 	.word	0x00021006
   15fe8:	0001e6bc 	.word	0x0001e6bc
   15fec:	4002a000 	.word	0x4002a000

00015ff0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   15ff0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15ff2:	4b0a      	ldr	r3, [pc, #40]	; (1601c <nrfx_ipc_receive_event_disable+0x2c>)
{
   15ff4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15ff6:	791b      	ldrb	r3, [r3, #4]
   15ff8:	2b01      	cmp	r3, #1
   15ffa:	d008      	beq.n	1600e <nrfx_ipc_receive_event_disable+0x1e>
   15ffc:	4908      	ldr	r1, [pc, #32]	; (16020 <nrfx_ipc_receive_event_disable+0x30>)
   15ffe:	4809      	ldr	r0, [pc, #36]	; (16024 <nrfx_ipc_receive_event_disable+0x34>)
   16000:	2270      	movs	r2, #112	; 0x70
   16002:	f003 fb89 	bl	19718 <printk>
   16006:	2170      	movs	r1, #112	; 0x70
   16008:	4805      	ldr	r0, [pc, #20]	; (16020 <nrfx_ipc_receive_event_disable+0x30>)
   1600a:	f003 fe2b 	bl	19c64 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1600e:	2301      	movs	r3, #1
   16010:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   16014:	4b04      	ldr	r3, [pc, #16]	; (16028 <nrfx_ipc_receive_event_disable+0x38>)
   16016:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   1601a:	bd10      	pop	{r4, pc}
   1601c:	2000ad90 	.word	0x2000ad90
   16020:	00021006 	.word	0x00021006
   16024:	0001e6bc 	.word	0x0001e6bc
   16028:	4002a000 	.word	0x4002a000

0001602c <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   1602c:	4b15      	ldr	r3, [pc, #84]	; (16084 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16032:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   16036:	4f14      	ldr	r7, [pc, #80]	; (16088 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   16038:	4635      	mov	r5, r6
   1603a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1608c <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   1603e:	b935      	cbnz	r5, 1604e <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16040:	4b13      	ldr	r3, [pc, #76]	; (16090 <nrfx_ipc_irq_handler+0x64>)
   16042:	4630      	mov	r0, r6
}
   16044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16048:	681a      	ldr	r2, [r3, #0]
   1604a:	6899      	ldr	r1, [r3, #8]
   1604c:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1604e:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   16052:	2301      	movs	r3, #1
  return __builtin_clz(value);
   16054:	fab4 f484 	clz	r4, r4
   16058:	40a3      	lsls	r3, r4
   1605a:	2c0f      	cmp	r4, #15
   1605c:	ea25 0503 	bic.w	r5, r5, r3
   16060:	d90a      	bls.n	16078 <nrfx_ipc_irq_handler+0x4c>
   16062:	4639      	mov	r1, r7
   16064:	4640      	mov	r0, r8
   16066:	f240 12e5 	movw	r2, #485	; 0x1e5
   1606a:	f003 fb55 	bl	19718 <printk>
   1606e:	f240 11e5 	movw	r1, #485	; 0x1e5
   16072:	4638      	mov	r0, r7
   16074:	f003 fdf6 	bl	19c64 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16078:	2200      	movs	r2, #0
   1607a:	4b06      	ldr	r3, [pc, #24]	; (16094 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1607c:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1607e:	511a      	str	r2, [r3, r4]
}
   16080:	e7dd      	b.n	1603e <nrfx_ipc_irq_handler+0x12>
   16082:	bf00      	nop
   16084:	4002a000 	.word	0x4002a000
   16088:	00021041 	.word	0x00021041
   1608c:	0001e6bc 	.word	0x0001e6bc
   16090:	2000ad90 	.word	0x2000ad90
   16094:	4002a100 	.word	0x4002a100

00016098 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1609c:	460e      	mov	r6, r1
   1609e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   160a0:	4d0c      	ldr	r5, [pc, #48]	; (160d4 <metal_generic_dev_open+0x3c>)
   160a2:	f855 4f18 	ldr.w	r4, [r5, #24]!
   160a6:	42ac      	cmp	r4, r5
   160a8:	d103      	bne.n	160b2 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   160aa:	f06f 0012 	mvn.w	r0, #18
   160ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   160b2:	4631      	mov	r1, r6
   160b4:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   160b8:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   160bc:	f004 fd5e 	bl	1ab7c <strcmp>
   160c0:	b930      	cbnz	r0, 160d0 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   160c2:	4640      	mov	r0, r8
			*device = dev;
   160c4:	f8c7 8000 	str.w	r8, [r7]
}
   160c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   160cc:	f006 bb57 	b.w	1c77e <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   160d0:	6824      	ldr	r4, [r4, #0]
   160d2:	e7e8      	b.n	160a6 <metal_generic_dev_open+0xe>
   160d4:	2000ad9c 	.word	0x2000ad9c

000160d8 <metal_bus_find>:
{
   160d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160dc:	4607      	mov	r7, r0
   160de:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   160e0:	4e0b      	ldr	r6, [pc, #44]	; (16110 <metal_bus_find+0x38>)
   160e2:	f856 4f08 	ldr.w	r4, [r6, #8]!
   160e6:	42b4      	cmp	r4, r6
   160e8:	d102      	bne.n	160f0 <metal_bus_find+0x18>
	return -ENOENT;
   160ea:	f06f 0001 	mvn.w	r0, #1
   160ee:	e00a      	b.n	16106 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   160f0:	4639      	mov	r1, r7
   160f2:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   160f6:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   160fa:	f004 fd3f 	bl	1ab7c <strcmp>
   160fe:	b920      	cbnz	r0, 1610a <metal_bus_find+0x32>
   16100:	b11d      	cbz	r5, 1610a <metal_bus_find+0x32>
			*result = bus;
   16102:	f8c5 8000 	str.w	r8, [r5]
}
   16106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1610a:	6824      	ldr	r4, [r4, #0]
   1610c:	e7eb      	b.n	160e6 <metal_bus_find+0xe>
   1610e:	bf00      	nop
   16110:	2000ad9c 	.word	0x2000ad9c

00016114 <metal_bus_register>:
{
   16114:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   16116:	4604      	mov	r4, r0
   16118:	b910      	cbnz	r0, 16120 <metal_bus_register+0xc>
		return -EINVAL;
   1611a:	f06f 0015 	mvn.w	r0, #21
}
   1611e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   16120:	6800      	ldr	r0, [r0, #0]
   16122:	2800      	cmp	r0, #0
   16124:	d0f9      	beq.n	1611a <metal_bus_register+0x6>
   16126:	f004 fd19 	bl	1ab5c <strlen>
   1612a:	2800      	cmp	r0, #0
   1612c:	d0f5      	beq.n	1611a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1612e:	2100      	movs	r1, #0
   16130:	6820      	ldr	r0, [r4, #0]
   16132:	f7ff ffd1 	bl	160d8 <metal_bus_find>
   16136:	b1c0      	cbz	r0, 1616a <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   16138:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   1613c:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   16140:	4b0c      	ldr	r3, [pc, #48]	; (16174 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   16142:	f104 0224 	add.w	r2, r4, #36	; 0x24
   16146:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   16148:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1614c:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1614e:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   16150:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   16152:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   16154:	781a      	ldrb	r2, [r3, #0]
   16156:	2a06      	cmp	r2, #6
   16158:	d905      	bls.n	16166 <metal_bus_register+0x52>
   1615a:	685b      	ldr	r3, [r3, #4]
   1615c:	b143      	cbz	r3, 16170 <metal_bus_register+0x5c>
   1615e:	2007      	movs	r0, #7
   16160:	6822      	ldr	r2, [r4, #0]
   16162:	4905      	ldr	r1, [pc, #20]	; (16178 <metal_bus_register+0x64>)
   16164:	4798      	blx	r3
	return 0;
   16166:	2000      	movs	r0, #0
   16168:	e7d9      	b.n	1611e <metal_bus_register+0xa>
		return -EEXIST;
   1616a:	f06f 0010 	mvn.w	r0, #16
   1616e:	e7d6      	b.n	1611e <metal_bus_register+0xa>
	return 0;
   16170:	4618      	mov	r0, r3
   16172:	e7d4      	b.n	1611e <metal_bus_register+0xa>
   16174:	2000ad9c 	.word	0x2000ad9c
   16178:	00021073 	.word	0x00021073

0001617c <metal_register_generic_device>:
{
   1617c:	b510      	push	{r4, lr}
   1617e:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   16180:	6800      	ldr	r0, [r0, #0]
   16182:	b910      	cbnz	r0, 1618a <metal_register_generic_device+0xe>
		return -EINVAL;
   16184:	f06f 0015 	mvn.w	r0, #21
}
   16188:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1618a:	f004 fce7 	bl	1ab5c <strlen>
   1618e:	2800      	cmp	r0, #0
   16190:	d0f8      	beq.n	16184 <metal_register_generic_device+0x8>
   16192:	68a3      	ldr	r3, [r4, #8]
   16194:	2b01      	cmp	r3, #1
   16196:	d8f5      	bhi.n	16184 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   16198:	4b06      	ldr	r3, [pc, #24]	; (161b4 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1619a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1619e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   161a0:	4b05      	ldr	r3, [pc, #20]	; (161b8 <metal_register_generic_device+0x3c>)
   161a2:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   161a4:	f103 0018 	add.w	r0, r3, #24
   161a8:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   161aa:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   161ac:	61d9      	str	r1, [r3, #28]
	return 0;
   161ae:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   161b0:	6011      	str	r1, [r2, #0]
}
   161b2:	e7e9      	b.n	16188 <metal_register_generic_device+0xc>
   161b4:	20008520 	.word	0x20008520
   161b8:	2000ad9c 	.word	0x2000ad9c

000161bc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   161bc:	b538      	push	{r3, r4, r5, lr}
   161be:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   161c0:	4c0d      	ldr	r4, [pc, #52]	; (161f8 <metal_init+0x3c>)
   161c2:	2220      	movs	r2, #32
   161c4:	4620      	mov	r0, r4
   161c6:	2100      	movs	r1, #0
   161c8:	f004 fd31 	bl	1ac2e <memset>

	_metal.common.log_handler   = params->log_handler;
   161cc:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   161ce:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   161d0:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   161d2:	4623      	mov	r3, r4
   161d4:	792a      	ldrb	r2, [r5, #4]
   161d6:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   161da:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   161de:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   161e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   161e6:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   161ea:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   161ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   161f2:	f000 b803 	b.w	161fc <metal_sys_init>
   161f6:	bf00      	nop
   161f8:	2000ad9c 	.word	0x2000ad9c

000161fc <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   161fc:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   161fe:	4802      	ldr	r0, [pc, #8]	; (16208 <metal_sys_init+0xc>)
   16200:	f7ff ff88 	bl	16114 <metal_bus_register>
	return 0;
}
   16204:	2000      	movs	r0, #0
   16206:	bd08      	pop	{r3, pc}
   16208:	20008520 	.word	0x20008520

0001620c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1620c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1620e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   16210:	2b06      	cmp	r3, #6
{
   16212:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   16214:	bf88      	it	hi
   16216:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   16218:	4b09      	ldr	r3, [pc, #36]	; (16240 <metal_zephyr_log_handler+0x34>)
{
   1621a:	ac05      	add	r4, sp, #20
   1621c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   16220:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   16224:	4807      	ldr	r0, [pc, #28]	; (16244 <metal_zephyr_log_handler+0x38>)
   16226:	f003 fa77 	bl	19718 <printk>

	va_start(args, format);
	vprintk(format, args);
   1622a:	4621      	mov	r1, r4
   1622c:	4628      	mov	r0, r5
	va_start(args, format);
   1622e:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   16230:	f7f3 fd2c 	bl	9c8c <vprintk>
	va_end(args);
}
   16234:	b002      	add	sp, #8
   16236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1623a:	b003      	add	sp, #12
   1623c:	4770      	bx	lr
   1623e:	bf00      	nop
   16240:	0001df14 	.word	0x0001df14
   16244:	0001f7c3 	.word	0x0001f7c3

00016248 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   16248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1624c:	b087      	sub	sp, #28
   1624e:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   16250:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   16252:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   16254:	4293      	cmp	r3, r2
{
   16256:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   16258:	d349      	bcc.n	162ee <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1625a:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   1625c:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   16260:	42b4      	cmp	r4, r6
   16262:	d103      	bne.n	1626c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   16264:	2000      	movs	r0, #0
}
   16266:	b007      	add	sp, #28
   16268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1626c:	fb0b f704 	mul.w	r7, fp, r4
   16270:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   16274:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   16276:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   1627a:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1627e:	bb02      	cbnz	r2, 162c2 <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   16280:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   16284:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16288:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1628c:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   1628e:	f8dc c008 	ldr.w	ip, [ip, #8]
   16292:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   16294:	f10c 33ff 	add.w	r3, ip, #4294967295
   16298:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1629c:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   162a0:	f1cc 0c00 	rsb	ip, ip, #0
   162a4:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   162a8:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   162ac:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   162b0:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   162b4:	4561      	cmp	r1, ip
   162b6:	bf28      	it	cs
   162b8:	f04f 31ff 	movcs.w	r1, #4294967295
   162bc:	3306      	adds	r3, #6
   162be:	f006 fa25 	bl	1c70c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   162c2:	f858 3007 	ldr.w	r3, [r8, r7]
   162c6:	9a05      	ldr	r2, [sp, #20]
   162c8:	9302      	str	r3, [sp, #8]
   162ca:	6a2b      	ldr	r3, [r5, #32]
   162cc:	4628      	mov	r0, r5
   162ce:	6a1b      	ldr	r3, [r3, #32]
   162d0:	b2a1      	uxth	r1, r4
   162d2:	9301      	str	r3, [sp, #4]
   162d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   162d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   162da:	9300      	str	r3, [sp, #0]
   162dc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   162e0:	464b      	mov	r3, r9
   162e2:	f006 fa69 	bl	1c7b8 <virtqueue_create>
		if (ret)
   162e6:	2800      	cmp	r0, #0
   162e8:	d1bd      	bne.n	16266 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   162ea:	3401      	adds	r4, #1
   162ec:	e7b8      	b.n	16260 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   162ee:	4801      	ldr	r0, [pc, #4]	; (162f4 <virtio_create_virtqueues+0xac>)
   162f0:	e7b9      	b.n	16266 <virtio_create_virtqueues+0x1e>
   162f2:	bf00      	nop
   162f4:	fffff440 	.word	0xfffff440

000162f8 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   162f8:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   162fa:	8944      	ldrh	r4, [r0, #10]
   162fc:	428c      	cmp	r4, r1
   162fe:	d312      	bcc.n	16326 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   16300:	6a03      	ldr	r3, [r0, #32]
   16302:	3c01      	subs	r4, #1
   16304:	885d      	ldrh	r5, [r3, #2]
   16306:	402c      	ands	r4, r5
   16308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   1630c:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   1630e:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   16310:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   16314:	6a02      	ldr	r2, [r0, #32]
   16316:	8853      	ldrh	r3, [r2, #2]
   16318:	3301      	adds	r3, #1
   1631a:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1631c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1631e:	3301      	adds	r3, #1
   16320:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   16322:	2000      	movs	r0, #0
}
   16324:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   16326:	4801      	ldr	r0, [pc, #4]	; (1632c <virtqueue_add_consumed_buffer+0x34>)
   16328:	e7fc      	b.n	16324 <virtqueue_add_consumed_buffer+0x2c>
   1632a:	bf00      	nop
   1632c:	fffff441 	.word	0xfffff441

00016330 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   16330:	b4f0      	push	{r4, r5, r6, r7}
   16332:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   16334:	b148      	cbz	r0, 1634a <rpmsg_send_offchannel_raw+0x1a>
   16336:	6a00      	ldr	r0, [r0, #32]
   16338:	b138      	cbz	r0, 1634a <rpmsg_send_offchannel_raw+0x1a>
   1633a:	b133      	cbz	r3, 1634a <rpmsg_send_offchannel_raw+0x1a>
   1633c:	3401      	adds	r4, #1
   1633e:	d004      	beq.n	1634a <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   16340:	6f44      	ldr	r4, [r0, #116]	; 0x74
   16342:	b114      	cbz	r4, 1634a <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16344:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   16346:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16348:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1634a:	4801      	ldr	r0, [pc, #4]	; (16350 <rpmsg_send_offchannel_raw+0x20>)
}
   1634c:	bcf0      	pop	{r4, r5, r6, r7}
   1634e:	4770      	bx	lr
   16350:	fffff82d 	.word	0xfffff82d

00016354 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   16354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16358:	460e      	mov	r6, r1
   1635a:	4690      	mov	r8, r2
   1635c:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   1635e:	4605      	mov	r5, r0
   16360:	2800      	cmp	r0, #0
   16362:	d06a      	beq.n	1643a <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   16364:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   16368:	4638      	mov	r0, r7
   1636a:	f006 fbb7 	bl	1cadc <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1636e:	1c63      	adds	r3, r4, #1
   16370:	d11a      	bne.n	163a8 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   16372:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   16374:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16378:	095a      	lsrs	r2, r3, #5
   1637a:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   1637e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   16382:	f003 011f 	and.w	r1, r3, #31
   16386:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1638a:	07e4      	lsls	r4, r4, #31
   1638c:	d407      	bmi.n	1639e <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1638e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16392:	2301      	movs	r3, #1
   16394:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   16396:	4313      	orrs	r3, r2
   16398:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   1639c:	e01d      	b.n	163da <rpmsg_create_ept+0x86>
	     bit++)
   1639e:	3301      	adds	r3, #1
	for (bit = start;
   163a0:	2b80      	cmp	r3, #128	; 0x80
   163a2:	d1e9      	bne.n	16378 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   163a4:	4c27      	ldr	r4, [pc, #156]	; (16444 <rpmsg_create_ept+0xf0>)
   163a6:	e044      	b.n	16432 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   163a8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   163ac:	d315      	bcc.n	163da <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   163ae:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   163b2:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   163b4:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   163b8:	d83a      	bhi.n	16430 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   163ba:	0958      	lsrs	r0, r3, #5
   163bc:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   163c0:	f003 031f 	and.w	r3, r3, #31
   163c4:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   163c8:	07d2      	lsls	r2, r2, #31
   163ca:	d4eb      	bmi.n	163a4 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   163cc:	2201      	movs	r2, #1
   163ce:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   163d2:	ea43 030c 	orr.w	r3, r3, ip
   163d6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   163da:	491b      	ldr	r1, [pc, #108]	; (16448 <rpmsg_create_ept+0xf4>)
   163dc:	2220      	movs	r2, #32
   163de:	f1b8 0f00 	cmp.w	r8, #0
   163e2:	bf18      	it	ne
   163e4:	4641      	movne	r1, r8
   163e6:	4628      	mov	r0, r5
   163e8:	f004 fba6 	bl	1ab38 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   163ec:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   163ee:	4629      	mov	r1, r5
   163f0:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   163f2:	9b07      	ldr	r3, [sp, #28]
   163f4:	4630      	mov	r0, r6
   163f6:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   163f8:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   163fa:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   163fc:	632b      	str	r3, [r5, #48]	; 0x30
   163fe:	f006 fbe7 	bl	1cbd0 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   16402:	4638      	mov	r0, r7
   16404:	f001 ffc8 	bl	18398 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   16408:	782c      	ldrb	r4, [r5, #0]
   1640a:	b174      	cbz	r4, 1642a <rpmsg_create_ept+0xd6>
   1640c:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   16410:	b15c      	cbz	r4, 1642a <rpmsg_create_ept+0xd6>
   16412:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16414:	3301      	adds	r3, #1
   16416:	d112      	bne.n	1643e <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   16418:	2100      	movs	r1, #0
   1641a:	4628      	mov	r0, r5
   1641c:	f006 fb8f 	bl	1cb3e <rpmsg_send_ns_message>

	if (status)
   16420:	4604      	mov	r4, r0
   16422:	b110      	cbz	r0, 1642a <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   16424:	4628      	mov	r0, r5
   16426:	f006 fb5f 	bl	1cae8 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1642a:	4620      	mov	r0, r4
   1642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16430:	4c06      	ldr	r4, [pc, #24]	; (1644c <rpmsg_create_ept+0xf8>)
   16432:	4638      	mov	r0, r7
   16434:	f001 ffb0 	bl	18398 <z_impl_k_sem_give>
}
   16438:	e7f7      	b.n	1642a <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   1643a:	4c04      	ldr	r4, [pc, #16]	; (1644c <rpmsg_create_ept+0xf8>)
   1643c:	e7f5      	b.n	1642a <rpmsg_create_ept+0xd6>
   1643e:	2400      	movs	r4, #0
   16440:	e7f3      	b.n	1642a <rpmsg_create_ept+0xd6>
   16442:	bf00      	nop
   16444:	fffff829 	.word	0xfffff829
   16448:	00021195 	.word	0x00021195
   1644c:	fffff82d 	.word	0xfffff82d

00016450 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   16450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16454:	4605      	mov	r5, r0
   16456:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   16458:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1645a:	6a03      	ldr	r3, [r0, #32]
   1645c:	b08d      	sub	sp, #52	; 0x34
   1645e:	681b      	ldr	r3, [r3, #0]
   16460:	4692      	mov	sl, r2
   16462:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   16466:	9103      	str	r1, [sp, #12]
   16468:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   1646a:	0743      	lsls	r3, r0, #29
   1646c:	d57b      	bpl.n	16566 <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1646e:	f643 2398 	movw	r3, #15000	; 0x3a98
   16472:	2f00      	cmp	r7, #0
   16474:	bf18      	it	ne
   16476:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   16478:	f105 0858 	add.w	r8, r5, #88	; 0x58
   1647c:	4640      	mov	r0, r8
   1647e:	f006 fbcb 	bl	1cc18 <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   16482:	4628      	mov	r0, r5
   16484:	f006 fc8d 	bl	1cda2 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   16488:	4681      	mov	r9, r0
   1648a:	b130      	cbz	r0, 1649a <rpmsg_virtio_send_offchannel_raw+0x4a>
   1648c:	42b0      	cmp	r0, r6
   1648e:	da04      	bge.n	1649a <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   16490:	4640      	mov	r0, r8
   16492:	f006 fbbf 	bl	1cc14 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   16496:	4e42      	ldr	r6, [pc, #264]	; (165a0 <rpmsg_virtio_send_offchannel_raw+0x150>)
   16498:	e061      	b.n	1655e <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   1649a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   1649c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1649e:	b9f3      	cbnz	r3, 164de <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   164a0:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   164a4:	f10d 0212 	add.w	r2, sp, #18
   164a8:	a905      	add	r1, sp, #20
   164aa:	f006 fa15 	bl	1c8d8 <virtqueue_get_buffer>
		if (!data) {
   164ae:	4604      	mov	r4, r0
   164b0:	b948      	cbnz	r0, 164c6 <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   164b2:	f44f 7100 	mov.w	r1, #512	; 0x200
   164b6:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   164ba:	f006 fc85 	bl	1cdc8 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   164be:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   164c2:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   164c4:	9305      	str	r3, [sp, #20]
   164c6:	4640      	mov	r0, r8
   164c8:	f006 fba4 	bl	1cc14 <k_sem_give>
		if (buffer || !tick_count)
   164cc:	2c00      	cmp	r4, #0
   164ce:	d14e      	bne.n	1656e <rpmsg_virtio_send_offchannel_raw+0x11e>
   164d0:	2f00      	cmp	r7, #0
   164d2:	d04a      	beq.n	1656a <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   164d4:	f1b9 0f00 	cmp.w	r9, #0
   164d8:	d1dd      	bne.n	16496 <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   164da:	3f01      	subs	r7, #1
	while (1) {
   164dc:	e7ce      	b.n	1647c <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   164de:	2b01      	cmp	r3, #1
   164e0:	d108      	bne.n	164f4 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   164e2:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   164e6:	aa05      	add	r2, sp, #20
   164e8:	f10d 0112 	add.w	r1, sp, #18
   164ec:	f006 fa2e 	bl	1c94c <virtqueue_get_available_buffer>
   164f0:	4604      	mov	r4, r0
   164f2:	e7e8      	b.n	164c6 <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   164f4:	2400      	movs	r4, #0
   164f6:	e7e6      	b.n	164c6 <rpmsg_virtio_send_offchannel_raw+0x76>
   164f8:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   164fa:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   164fc:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16500:	1ac9      	subs	r1, r1, r3
   16502:	4281      	cmp	r1, r0
   16504:	bf28      	it	cs
   16506:	f04f 31ff 	movcs.w	r1, #4294967295
   1650a:	4633      	mov	r3, r6
   1650c:	465a      	mov	r2, fp
   1650e:	4638      	mov	r0, r7
   16510:	f006 f8c1 	bl	1c696 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   16514:	4286      	cmp	r6, r0
   16516:	d000      	beq.n	1651a <rpmsg_virtio_send_offchannel_raw+0xca>
   16518:	e7fe      	b.n	16518 <rpmsg_virtio_send_offchannel_raw+0xc8>
   1651a:	4640      	mov	r0, r8
   1651c:	f006 fb7c 	bl	1cc18 <__metal_mutex_acquire>
   16520:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   16522:	9a05      	ldr	r2, [sp, #20]
   16524:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   16526:	b953      	cbnz	r3, 1653e <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   16528:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1652c:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16530:	2201      	movs	r2, #1
   16532:	9400      	str	r4, [sp, #0]
   16534:	a906      	add	r1, sp, #24
   16536:	f006 f96f 	bl	1c818 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1653a:	b148      	cbz	r0, 16550 <rpmsg_virtio_send_offchannel_raw+0x100>
   1653c:	e7fe      	b.n	1653c <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   1653e:	2b01      	cmp	r3, #1
   16540:	d106      	bne.n	16550 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   16542:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   16546:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1654a:	f7ff fed5 	bl	162f8 <virtqueue_add_consumed_buffer>
   1654e:	e7f4      	b.n	1653a <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   16550:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16554:	f006 fa74 	bl	1ca40 <virtqueue_kick>
   16558:	4640      	mov	r0, r8
   1655a:	f006 fb5b 	bl	1cc14 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   1655e:	4630      	mov	r0, r6
   16560:	b00d      	add	sp, #52	; 0x34
   16562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   16566:	4e0f      	ldr	r6, [pc, #60]	; (165a4 <rpmsg_virtio_send_offchannel_raw+0x154>)
   16568:	e7f9      	b.n	1655e <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   1656a:	4e0f      	ldr	r6, [pc, #60]	; (165a8 <rpmsg_virtio_send_offchannel_raw+0x158>)
   1656c:	e7f7      	b.n	1655e <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   1656e:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   16570:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   16574:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   16576:	2300      	movs	r3, #0
   16578:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1657a:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1657c:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1657e:	4281      	cmp	r1, r0
   16580:	bf28      	it	cs
   16582:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   16586:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16588:	4638      	mov	r0, r7
   1658a:	2310      	movs	r3, #16
   1658c:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   1658e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   16592:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16596:	f006 f87e 	bl	1c696 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1659a:	2810      	cmp	r0, #16
   1659c:	d0ac      	beq.n	164f8 <rpmsg_virtio_send_offchannel_raw+0xa8>
   1659e:	e7fe      	b.n	1659e <rpmsg_virtio_send_offchannel_raw+0x14e>
   165a0:	fffff82b 	.word	0xfffff82b
   165a4:	fffff82c 	.word	0xfffff82c
   165a8:	fffff82e 	.word	0xfffff82e

000165ac <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   165ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165b0:	460d      	mov	r5, r1
   165b2:	b088      	sub	sp, #32
   165b4:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   165b6:	2100      	movs	r1, #0
   165b8:	227c      	movs	r2, #124	; 0x7c
{
   165ba:	4604      	mov	r4, r0
   165bc:	461e      	mov	r6, r3
   165be:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   165c2:	f004 fb34 	bl	1ac2e <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   165c6:	2201      	movs	r2, #1
   165c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   165cc:	4611      	mov	r1, r2
   165ce:	f006 fc98 	bl	1cf02 <z_impl_k_sem_init>
   165d2:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   165d6:	4b5d      	ldr	r3, [pc, #372]	; (1674c <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   165d8:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   165dc:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   165de:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   165e0:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   165e2:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   165e4:	d020      	beq.n	16628 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   165e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   165e8:	6a03      	ldr	r3, [r0, #32]
   165ea:	689b      	ldr	r3, [r3, #8]
   165ec:	4798      	blx	r3
   165ee:	2300      	movs	r3, #0
   165f0:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   165f2:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   165f6:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   165f8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   165fc:	f1b8 0f00 	cmp.w	r8, #0
   16600:	d01e      	beq.n	16640 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   16602:	f1b8 0f01 	cmp.w	r8, #1
   16606:	d133      	bne.n	16670 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   16608:	4b51      	ldr	r3, [pc, #324]	; (16750 <rpmsg_init_vdev+0x1a4>)
   1660a:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   1660c:	4b51      	ldr	r3, [pc, #324]	; (16754 <rpmsg_init_vdev+0x1a8>)
   1660e:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   16610:	4b51      	ldr	r3, [pc, #324]	; (16758 <rpmsg_init_vdev+0x1ac>)
   16612:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   16614:	4b51      	ldr	r3, [pc, #324]	; (1675c <rpmsg_init_vdev+0x1b0>)
   16616:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   16618:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1661a:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1661c:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1661e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   16622:	e023      	b.n	1666c <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   16624:	0743      	lsls	r3, r0, #29
   16626:	d4de      	bmi.n	165e6 <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   16628:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1662a:	6a03      	ldr	r3, [r0, #32]
   1662c:	681b      	ldr	r3, [r3, #0]
   1662e:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   16630:	0642      	lsls	r2, r0, #25
   16632:	d5f7      	bpl.n	16624 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   16634:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16636:	2100      	movs	r1, #0
   16638:	6a03      	ldr	r3, [r0, #32]
   1663a:	685b      	ldr	r3, [r3, #4]
   1663c:	4798      	blx	r3
}
   1663e:	e7f3      	b.n	16628 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   16640:	f1b9 0f00 	cmp.w	r9, #0
   16644:	d07d      	beq.n	16742 <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   16646:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1664a:	2b00      	cmp	r3, #0
   1664c:	d07b      	beq.n	16746 <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   1664e:	4b41      	ldr	r3, [pc, #260]	; (16754 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   16650:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   16654:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   16656:	4b3e      	ldr	r3, [pc, #248]	; (16750 <rpmsg_init_vdev+0x1a4>)
   16658:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   1665a:	4b40      	ldr	r3, [pc, #256]	; (1675c <rpmsg_init_vdev+0x1b0>)
   1665c:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   1665e:	4b3e      	ldr	r3, [pc, #248]	; (16758 <rpmsg_init_vdev+0x1ac>)
   16660:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16662:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16664:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   16666:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16668:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   1666c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   16670:	ab04      	add	r3, sp, #16
   16672:	9300      	str	r3, [sp, #0]
   16674:	2202      	movs	r2, #2
   16676:	2100      	movs	r1, #0
   16678:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   1667a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   1667e:	ab02      	add	r3, sp, #8
   16680:	f7ff fde2 	bl	16248 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   16684:	4607      	mov	r7, r0
   16686:	2800      	cmp	r0, #0
   16688:	d157      	bne.n	1673a <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   1668a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1668e:	f006 f9b1 	bl	1c9f4 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   16692:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   16694:	681a      	ldr	r2, [r3, #0]
   16696:	699b      	ldr	r3, [r3, #24]
   16698:	6296      	str	r6, [r2, #40]	; 0x28
   1669a:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   1669c:	f1b8 0f00 	cmp.w	r8, #0
   166a0:	d108      	bne.n	166b4 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   166a2:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   166a6:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   166a8:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   166aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   166ae:	895b      	ldrh	r3, [r3, #10]
   166b0:	4553      	cmp	r3, sl
   166b2:	d81f      	bhi.n	166f4 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   166b4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   166b8:	e9c4 4400 	strd	r4, r4, [r4]
   166bc:	b18b      	cbz	r3, 166e2 <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   166be:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   166c2:	4927      	ldr	r1, [pc, #156]	; (16760 <rpmsg_init_vdev+0x1b4>)
   166c4:	2220      	movs	r2, #32
   166c6:	4628      	mov	r0, r5
   166c8:	f004 fa36 	bl	1ab38 <strncpy>
	ept->addr = src;
   166cc:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   166ce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   166d2:	4b24      	ldr	r3, [pc, #144]	; (16764 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   166d4:	4629      	mov	r1, r5
   166d6:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   166d8:	2300      	movs	r3, #0
   166da:	4620      	mov	r0, r4
   166dc:	63a3      	str	r3, [r4, #56]	; 0x38
   166de:	f006 fa77 	bl	1cbd0 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   166e2:	f1b8 0f00 	cmp.w	r8, #0
   166e6:	d128      	bne.n	1673a <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   166e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   166ea:	2104      	movs	r1, #4
   166ec:	6a03      	ldr	r3, [r0, #32]
   166ee:	685b      	ldr	r3, [r3, #4]
   166f0:	4798      	blx	r3
}
   166f2:	e022      	b.n	1673a <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   166f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   166f8:	4648      	mov	r0, r9
   166fa:	f006 fb65 	bl	1cdc8 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   166fe:	4605      	mov	r5, r0
   16700:	b1c8      	cbz	r0, 16736 <rpmsg_init_vdev+0x18a>
   16702:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   16704:	9006      	str	r0, [sp, #24]
   16706:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16708:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1670a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1670e:	4281      	cmp	r1, r0
   16710:	bf28      	it	cs
   16712:	f04f 31ff 	movcs.w	r1, #4294967295
   16716:	2200      	movs	r2, #0
   16718:	4630      	mov	r0, r6
   1671a:	f005 fff7 	bl	1c70c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1671e:	2301      	movs	r3, #1
   16720:	2200      	movs	r2, #0
   16722:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   16726:	9500      	str	r5, [sp, #0]
   16728:	a906      	add	r1, sp, #24
   1672a:	f006 f875 	bl	1c818 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1672e:	b918      	cbnz	r0, 16738 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16730:	f10a 0a01 	add.w	sl, sl, #1
   16734:	e7b9      	b.n	166aa <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   16736:	480c      	ldr	r0, [pc, #48]	; (16768 <rpmsg_init_vdev+0x1bc>)
   16738:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   1673a:	4638      	mov	r0, r7
   1673c:	b008      	add	sp, #32
   1673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   16742:	4f0a      	ldr	r7, [pc, #40]	; (1676c <rpmsg_init_vdev+0x1c0>)
   16744:	e7f9      	b.n	1673a <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   16746:	4f08      	ldr	r7, [pc, #32]	; (16768 <rpmsg_init_vdev+0x1bc>)
   16748:	e7f7      	b.n	1673a <rpmsg_init_vdev+0x18e>
   1674a:	bf00      	nop
   1674c:	00016451 	.word	0x00016451
   16750:	00021124 	.word	0x00021124
   16754:	0002111e 	.word	0x0002111e
   16758:	0001cc13 	.word	0x0001cc13
   1675c:	0001cce3 	.word	0x0001cce3
   16760:	0002112a 	.word	0x0002112a
   16764:	0001cc25 	.word	0x0001cc25
   16768:	fffff82e 	.word	0xfffff82e
   1676c:	fffff82d 	.word	0xfffff82d

00016770 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   16770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16772:	4b10      	ldr	r3, [pc, #64]	; (167b4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   16774:	4f10      	ldr	r7, [pc, #64]	; (167b8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16776:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1677a:	3001      	adds	r0, #1
   1677c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16780:	42ae      	cmp	r6, r5
   16782:	d800      	bhi.n	16786 <z_sys_init_run_level+0x16>
		}
	}
}
   16784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   16786:	e9d5 3400 	ldrd	r3, r4, [r5]
   1678a:	4620      	mov	r0, r4
   1678c:	4798      	blx	r3
   1678e:	b170      	cbz	r0, 167ae <z_sys_init_run_level+0x3e>
   16790:	b16c      	cbz	r4, 167ae <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   16792:	2301      	movs	r3, #1
				(dev - __device_start));
   16794:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16796:	4a09      	ldr	r2, [pc, #36]	; (167bc <z_sys_init_run_level+0x4c>)
   16798:	1124      	asrs	r4, r4, #4
   1679a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1679c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   167a0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   167a4:	fa03 f404 	lsl.w	r4, r3, r4
   167a8:	4304      	orrs	r4, r0
   167aa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   167ae:	3508      	adds	r5, #8
   167b0:	e7e6      	b.n	16780 <z_sys_init_run_level+0x10>
   167b2:	bf00      	nop
   167b4:	0001df34 	.word	0x0001df34
   167b8:	2000856c 	.word	0x2000856c
   167bc:	200085dc 	.word	0x200085dc

000167c0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   167c0:	4b08      	ldr	r3, [pc, #32]	; (167e4 <z_device_ready+0x24>)
   167c2:	1ac0      	subs	r0, r0, r3
   167c4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   167c6:	4b08      	ldr	r3, [pc, #32]	; (167e8 <z_device_ready+0x28>)
   167c8:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   167ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   167ce:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   167d0:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   167d4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   167d8:	4210      	tst	r0, r2
}
   167da:	bf0c      	ite	eq
   167dc:	4618      	moveq	r0, r3
   167de:	2000      	movne	r0, #0
   167e0:	4770      	bx	lr
   167e2:	bf00      	nop
   167e4:	2000856c 	.word	0x2000856c
   167e8:	200085dc 	.word	0x200085dc

000167ec <z_impl_device_get_binding>:
{
   167ec:	b570      	push	{r4, r5, r6, lr}
   167ee:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   167f0:	4c0f      	ldr	r4, [pc, #60]	; (16830 <z_impl_device_get_binding+0x44>)
   167f2:	4e10      	ldr	r6, [pc, #64]	; (16834 <z_impl_device_get_binding+0x48>)
   167f4:	42b4      	cmp	r4, r6
   167f6:	d104      	bne.n	16802 <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   167f8:	4c0d      	ldr	r4, [pc, #52]	; (16830 <z_impl_device_get_binding+0x44>)
   167fa:	42b4      	cmp	r4, r6
   167fc:	d10a      	bne.n	16814 <z_impl_device_get_binding+0x28>
	return NULL;
   167fe:	2400      	movs	r4, #0
   16800:	e014      	b.n	1682c <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   16802:	4620      	mov	r0, r4
   16804:	f7ff ffdc 	bl	167c0 <z_device_ready>
   16808:	b110      	cbz	r0, 16810 <z_impl_device_get_binding+0x24>
   1680a:	6823      	ldr	r3, [r4, #0]
   1680c:	42ab      	cmp	r3, r5
   1680e:	d00d      	beq.n	1682c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   16810:	3410      	adds	r4, #16
   16812:	e7ef      	b.n	167f4 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16814:	4620      	mov	r0, r4
   16816:	f7ff ffd3 	bl	167c0 <z_device_ready>
   1681a:	b908      	cbnz	r0, 16820 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   1681c:	3410      	adds	r4, #16
   1681e:	e7ec      	b.n	167fa <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16820:	4628      	mov	r0, r5
   16822:	6821      	ldr	r1, [r4, #0]
   16824:	f004 f9aa 	bl	1ab7c <strcmp>
   16828:	2800      	cmp	r0, #0
   1682a:	d1f7      	bne.n	1681c <z_impl_device_get_binding+0x30>
}
   1682c:	4620      	mov	r0, r4
   1682e:	bd70      	pop	{r4, r5, r6, pc}
   16830:	2000856c 	.word	0x2000856c
   16834:	200085dc 	.word	0x200085dc

00016838 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   16838:	4b01      	ldr	r3, [pc, #4]	; (16840 <z_impl_z_errno+0x8>)
   1683a:	6898      	ldr	r0, [r3, #8]
}
   1683c:	3070      	adds	r0, #112	; 0x70
   1683e:	4770      	bx	lr
   16840:	2000adc4 	.word	0x2000adc4

00016844 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16846:	4604      	mov	r4, r0
   16848:	460e      	mov	r6, r1
	__asm__ volatile(
   1684a:	f04f 0320 	mov.w	r3, #32
   1684e:	f3ef 8711 	mrs	r7, BASEPRI
   16852:	f383 8811 	msr	BASEPRI, r3
   16856:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1685a:	f001 fd97 	bl	1838c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1685e:	2200      	movs	r2, #0
   16860:	2c04      	cmp	r4, #4
   16862:	bf98      	it	ls
   16864:	4b1d      	ldrls	r3, [pc, #116]	; (168dc <z_fatal_error+0x98>)
   16866:	4605      	mov	r5, r0
	switch (reason) {
   16868:	bf94      	ite	ls
   1686a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   1686e:	4b1c      	ldrhi	r3, [pc, #112]	; (168e0 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16870:	9200      	str	r2, [sp, #0]
   16872:	2145      	movs	r1, #69	; 0x45
   16874:	4622      	mov	r2, r4
   16876:	481b      	ldr	r0, [pc, #108]	; (168e4 <z_fatal_error+0xa0>)
   16878:	f002 ff4e 	bl	19718 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1687c:	b13e      	cbz	r6, 1688e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1687e:	69f3      	ldr	r3, [r6, #28]
   16880:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16884:	b11b      	cbz	r3, 1688e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   16886:	2145      	movs	r1, #69	; 0x45
   16888:	4817      	ldr	r0, [pc, #92]	; (168e8 <z_fatal_error+0xa4>)
   1688a:	f002 ff45 	bl	19718 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1688e:	b135      	cbz	r5, 1689e <z_fatal_error+0x5a>
   16890:	4628      	mov	r0, r5
   16892:	f006 fb53 	bl	1cf3c <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   16896:	4603      	mov	r3, r0
   16898:	b108      	cbz	r0, 1689e <z_fatal_error+0x5a>
   1689a:	7802      	ldrb	r2, [r0, #0]
   1689c:	b902      	cbnz	r2, 168a0 <z_fatal_error+0x5c>
		thread_name = "unknown";
   1689e:	4b13      	ldr	r3, [pc, #76]	; (168ec <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   168a0:	462a      	mov	r2, r5
   168a2:	2145      	movs	r1, #69	; 0x45
   168a4:	4812      	ldr	r0, [pc, #72]	; (168f0 <z_fatal_error+0xac>)
   168a6:	f002 ff37 	bl	19718 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   168aa:	4631      	mov	r1, r6
   168ac:	4620      	mov	r0, r4
   168ae:	f7ff f8ad 	bl	15a0c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   168b2:	2c04      	cmp	r4, #4
   168b4:	d108      	bne.n	168c8 <z_fatal_error+0x84>
   168b6:	490f      	ldr	r1, [pc, #60]	; (168f4 <z_fatal_error+0xb0>)
   168b8:	480f      	ldr	r0, [pc, #60]	; (168f8 <z_fatal_error+0xb4>)
   168ba:	228e      	movs	r2, #142	; 0x8e
   168bc:	f002 ff2c 	bl	19718 <printk>
   168c0:	218e      	movs	r1, #142	; 0x8e
   168c2:	480c      	ldr	r0, [pc, #48]	; (168f4 <z_fatal_error+0xb0>)
   168c4:	f003 f9ce 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   168c8:	f387 8811 	msr	BASEPRI, r7
   168cc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   168d0:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   168d2:	b003      	add	sp, #12
   168d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   168d8:	f7f6 bc38 	b.w	d14c <z_impl_k_thread_abort>
   168dc:	0001df4c 	.word	0x0001df4c
   168e0:	0002112d 	.word	0x0002112d
   168e4:	00021143 	.word	0x00021143
   168e8:	00021170 	.word	0x00021170
   168ec:	0002113b 	.word	0x0002113b
   168f0:	00021196 	.word	0x00021196
   168f4:	000211b3 	.word	0x000211b3
   168f8:	0001e6bc 	.word	0x0001e6bc

000168fc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   168fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168fe:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   16900:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   16902:	4e15      	ldr	r6, [pc, #84]	; (16958 <idle+0x5c>)
	__asm__ volatile(
   16904:	f04f 0220 	mov.w	r2, #32
   16908:	f3ef 8311 	mrs	r3, BASEPRI
   1690c:	f382 8811 	msr	BASEPRI, r2
   16910:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   16914:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   16916:	b188      	cbz	r0, 1693c <idle+0x40>
			cpu->pending_abort = NULL;
   16918:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1691a:	f383 8811 	msr	BASEPRI, r3
   1691e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   16922:	f001 f93b 	bl	17b9c <z_thread_single_abort>
	__asm__ volatile(
   16926:	f04f 0320 	mov.w	r3, #32
   1692a:	f3ef 8011 	mrs	r0, BASEPRI
   1692e:	f383 8811 	msr	BASEPRI, r3
   16932:	f3bf 8f6f 	isb	sy
   16936:	f006 faaa 	bl	1ce8e <z_reschedule_irqlock>
			continue;
   1693a:	e7e3      	b.n	16904 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   1693c:	f002 f998 	bl	18c70 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16940:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   16942:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16944:	2802      	cmp	r0, #2
   16946:	bfd8      	it	le
   16948:	4608      	movle	r0, r1
   1694a:	f002 f9c7 	bl	18cdc <z_set_timeout_expiry>
		_kernel.idle = ticks;
   1694e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   16950:	f7f6 f942 	bl	cbd8 <arch_cpu_idle>
}
   16954:	e7d6      	b.n	16904 <idle+0x8>
   16956:	bf00      	nop
   16958:	2000adc4 	.word	0x2000adc4

0001695c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1695c:	4802      	ldr	r0, [pc, #8]	; (16968 <z_bss_zero+0xc>)
   1695e:	4a03      	ldr	r2, [pc, #12]	; (1696c <z_bss_zero+0x10>)
   16960:	2100      	movs	r1, #0
   16962:	1a12      	subs	r2, r2, r0
   16964:	f004 b963 	b.w	1ac2e <memset>
   16968:	200087d8 	.word	0x200087d8
   1696c:	2000c5e4 	.word	0x2000c5e4

00016970 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   16970:	2201      	movs	r2, #1
{
   16972:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16974:	4b09      	ldr	r3, [pc, #36]	; (1699c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16976:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16978:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1697a:	f7ff fef9 	bl	16770 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1697e:	f002 f819 	bl	189b4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16982:	2003      	movs	r0, #3
   16984:	f7ff fef4 	bl	16770 <z_sys_init_run_level>

	z_init_static_threads();
   16988:	f001 fe76 	bl	18678 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1698c:	f7f2 fb6a 	bl	9064 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16990:	4a03      	ldr	r2, [pc, #12]	; (169a0 <bg_thread_main+0x30>)
   16992:	7b13      	ldrb	r3, [r2, #12]
   16994:	f023 0301 	bic.w	r3, r3, #1
   16998:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1699a:	bd08      	pop	{r3, pc}
   1699c:	2000c5e1 	.word	0x2000c5e1
   169a0:	2000a310 	.word	0x2000a310

000169a4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   169a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   169a8:	4b34      	ldr	r3, [pc, #208]	; (16a7c <z_cstart+0xd8>)
   169aa:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   169ac:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   169b0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   169b4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   169b8:	2400      	movs	r4, #0
   169ba:	23e0      	movs	r3, #224	; 0xe0
   169bc:	4d30      	ldr	r5, [pc, #192]	; (16a80 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   169be:	f04f 0b01 	mov.w	fp, #1
   169c2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   169c6:	77ec      	strb	r4, [r5, #31]
   169c8:	762c      	strb	r4, [r5, #24]
   169ca:	766c      	strb	r4, [r5, #25]
   169cc:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   169ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   169d0:	4e2c      	ldr	r6, [pc, #176]	; (16a84 <z_cstart+0xe0>)
   169d2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   169d6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   169d8:	f7f6 fb80 	bl	d0dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   169dc:	f7f6 f8f6 	bl	cbcc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   169e0:	f04f 33ff 	mov.w	r3, #4294967295
   169e4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   169e6:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   169e8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   169ec:	4d26      	ldr	r5, [pc, #152]	; (16a88 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   169ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   169f2:	ab06      	add	r3, sp, #24
   169f4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   169f6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   169f8:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   169fc:	f7ff feb8 	bl	16770 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16a00:	2001      	movs	r0, #1
   16a02:	f7ff feb5 	bl	16770 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16a06:	f8df a084 	ldr.w	sl, [pc, #132]	; 16a8c <z_cstart+0xe8>
	z_sched_init();
   16a0a:	f001 fb77 	bl	180fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16a0e:	4b20      	ldr	r3, [pc, #128]	; (16a90 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   16a10:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16a16:	491f      	ldr	r1, [pc, #124]	; (16a94 <z_cstart+0xf0>)
   16a18:	9305      	str	r3, [sp, #20]
   16a1a:	4630      	mov	r0, r6
   16a1c:	4653      	mov	r3, sl
   16a1e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   16a22:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16a26:	9400      	str	r4, [sp, #0]
   16a28:	f001 fd74 	bl	18514 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16a2c:	7b73      	ldrb	r3, [r6, #13]
   16a2e:	4680      	mov	r8, r0
   16a30:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   16a34:	4630      	mov	r0, r6
   16a36:	7373      	strb	r3, [r6, #13]
   16a38:	f000 feec 	bl	17814 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   16a3c:	230f      	movs	r3, #15
   16a3e:	4f16      	ldr	r7, [pc, #88]	; (16a98 <z_cstart+0xf4>)
   16a40:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16a44:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16a48:	4914      	ldr	r1, [pc, #80]	; (16a9c <z_cstart+0xf8>)
   16a4a:	4b15      	ldr	r3, [pc, #84]	; (16aa0 <z_cstart+0xfc>)
   16a4c:	4638      	mov	r0, r7
   16a4e:	e9cd b404 	strd	fp, r4, [sp, #16]
   16a52:	e9cd 5400 	strd	r5, r4, [sp]
   16a56:	f001 fd5d 	bl	18514 <z_setup_new_thread>
   16a5a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16a5c:	4652      	mov	r2, sl
   16a5e:	f023 0304 	bic.w	r3, r3, #4
   16a62:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16a64:	f105 031c 	add.w	r3, r5, #28
   16a68:	4641      	mov	r1, r8
   16a6a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   16a6c:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16a70:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   16a72:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   16a74:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16a78:	f7f6 f88e 	bl	cb98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16a7c:	2000ec40 	.word	0x2000ec40
   16a80:	e000ed00 	.word	0xe000ed00
   16a84:	2000a310 	.word	0x2000a310
   16a88:	2000adc4 	.word	0x2000adc4
   16a8c:	00016971 	.word	0x00016971
   16a90:	0002121f 	.word	0x0002121f
   16a94:	2000e700 	.word	0x2000e700
   16a98:	2000a280 	.word	0x2000a280
   16a9c:	2000eb00 	.word	0x2000eb00
   16aa0:	000168fd 	.word	0x000168fd

00016aa4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   16aa4:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16aa6:	4c0c      	ldr	r4, [pc, #48]	; (16ad8 <statics_init+0x34>)
   16aa8:	4d0c      	ldr	r5, [pc, #48]	; (16adc <statics_init+0x38>)
   16aaa:	4e0d      	ldr	r6, [pc, #52]	; (16ae0 <statics_init+0x3c>)
   16aac:	42ac      	cmp	r4, r5
   16aae:	d908      	bls.n	16ac2 <statics_init+0x1e>
   16ab0:	4631      	mov	r1, r6
   16ab2:	480c      	ldr	r0, [pc, #48]	; (16ae4 <statics_init+0x40>)
   16ab4:	2215      	movs	r2, #21
   16ab6:	f002 fe2f 	bl	19718 <printk>
   16aba:	2115      	movs	r1, #21
   16abc:	4630      	mov	r0, r6
   16abe:	f003 f8d1 	bl	19c64 <assert_post_action>
   16ac2:	42ac      	cmp	r4, r5
   16ac4:	d301      	bcc.n	16aca <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   16ac6:	2000      	movs	r0, #0
   16ac8:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16aca:	4620      	mov	r0, r4
   16acc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   16ad0:	f006 f98f 	bl	1cdf2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16ad4:	3418      	adds	r4, #24
   16ad6:	e7e9      	b.n	16aac <statics_init+0x8>
   16ad8:	20008634 	.word	0x20008634
   16adc:	2000864c 	.word	0x2000864c
   16ae0:	00021227 	.word	0x00021227
   16ae4:	0001e6bc 	.word	0x0001e6bc

00016ae8 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   16ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16aec:	b085      	sub	sp, #20
   16aee:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   16af2:	4606      	mov	r6, r0
   16af4:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   16af6:	4648      	mov	r0, r9
   16af8:	4639      	mov	r1, r7
{
   16afa:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   16afc:	f006 fa7f 	bl	1cffe <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16b00:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   16b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16b08:	f04f 0320 	mov.w	r3, #32
   16b0c:	f3ef 8411 	mrs	r4, BASEPRI
   16b10:	f383 8811 	msr	BASEPRI, r3
   16b14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16b18:	4628      	mov	r0, r5
   16b1a:	f001 fe29 	bl	18770 <z_spin_lock_valid>
   16b1e:	b940      	cbnz	r0, 16b32 <k_heap_aligned_alloc+0x4a>
   16b20:	4932      	ldr	r1, [pc, #200]	; (16bec <k_heap_aligned_alloc+0x104>)
   16b22:	4833      	ldr	r0, [pc, #204]	; (16bf0 <k_heap_aligned_alloc+0x108>)
   16b24:	227c      	movs	r2, #124	; 0x7c
   16b26:	f002 fdf7 	bl	19718 <printk>
   16b2a:	217c      	movs	r1, #124	; 0x7c
   16b2c:	482f      	ldr	r0, [pc, #188]	; (16bec <k_heap_aligned_alloc+0x104>)
   16b2e:	f003 f899 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16b32:	4628      	mov	r0, r5
   16b34:	f001 fe38 	bl	187a8 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16b38:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   16b3c:	b15b      	cbz	r3, 16b56 <k_heap_aligned_alloc+0x6e>
   16b3e:	ea59 0307 	orrs.w	r3, r9, r7
   16b42:	d008      	beq.n	16b56 <k_heap_aligned_alloc+0x6e>
   16b44:	492b      	ldr	r1, [pc, #172]	; (16bf4 <k_heap_aligned_alloc+0x10c>)
   16b46:	482a      	ldr	r0, [pc, #168]	; (16bf0 <k_heap_aligned_alloc+0x108>)
   16b48:	2224      	movs	r2, #36	; 0x24
   16b4a:	f002 fde5 	bl	19718 <printk>
   16b4e:	2124      	movs	r1, #36	; 0x24
   16b50:	4828      	ldr	r0, [pc, #160]	; (16bf4 <k_heap_aligned_alloc+0x10c>)
   16b52:	f003 f887 	bl	19c64 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16b56:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16bec <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16b5a:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   16b5e:	4642      	mov	r2, r8
   16b60:	4659      	mov	r1, fp
   16b62:	4630      	mov	r0, r6
   16b64:	f7f3 fb8a 	bl	a27c <sys_heap_aligned_alloc>
   16b68:	4607      	mov	r7, r0
		now = z_tick_get();
   16b6a:	f002 f993 	bl	18e94 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   16b6e:	b1a7      	cbz	r7, 16b9a <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16b70:	4628      	mov	r0, r5
   16b72:	f001 fe0b 	bl	1878c <z_spin_unlock_valid>
   16b76:	b940      	cbnz	r0, 16b8a <k_heap_aligned_alloc+0xa2>
   16b78:	491c      	ldr	r1, [pc, #112]	; (16bec <k_heap_aligned_alloc+0x104>)
   16b7a:	481d      	ldr	r0, [pc, #116]	; (16bf0 <k_heap_aligned_alloc+0x108>)
   16b7c:	22a7      	movs	r2, #167	; 0xa7
   16b7e:	f002 fdcb 	bl	19718 <printk>
   16b82:	21a7      	movs	r1, #167	; 0xa7
   16b84:	4819      	ldr	r0, [pc, #100]	; (16bec <k_heap_aligned_alloc+0x104>)
   16b86:	f003 f86d 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16b8a:	f384 8811 	msr	BASEPRI, r4
   16b8e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   16b92:	4638      	mov	r0, r7
   16b94:	b005      	add	sp, #20
   16b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   16b9a:	9b02      	ldr	r3, [sp, #8]
   16b9c:	1a18      	subs	r0, r3, r0
   16b9e:	9b03      	ldr	r3, [sp, #12]
   16ba0:	eb63 0101 	sbc.w	r1, r3, r1
   16ba4:	2801      	cmp	r0, #1
   16ba6:	f171 0300 	sbcs.w	r3, r1, #0
   16baa:	dbe1      	blt.n	16b70 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16bac:	e9cd 0100 	strd	r0, r1, [sp]
   16bb0:	4652      	mov	r2, sl
   16bb2:	4621      	mov	r1, r4
   16bb4:	4628      	mov	r0, r5
   16bb6:	f001 f997 	bl	17ee8 <z_pend_curr>
	__asm__ volatile(
   16bba:	f04f 0320 	mov.w	r3, #32
   16bbe:	f3ef 8411 	mrs	r4, BASEPRI
   16bc2:	f383 8811 	msr	BASEPRI, r3
   16bc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16bca:	4628      	mov	r0, r5
   16bcc:	f001 fdd0 	bl	18770 <z_spin_lock_valid>
   16bd0:	b940      	cbnz	r0, 16be4 <k_heap_aligned_alloc+0xfc>
   16bd2:	4649      	mov	r1, r9
   16bd4:	4806      	ldr	r0, [pc, #24]	; (16bf0 <k_heap_aligned_alloc+0x108>)
   16bd6:	227c      	movs	r2, #124	; 0x7c
   16bd8:	f002 fd9e 	bl	19718 <printk>
   16bdc:	217c      	movs	r1, #124	; 0x7c
   16bde:	4648      	mov	r0, r9
   16be0:	f003 f840 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16be4:	4628      	mov	r0, r5
   16be6:	f001 fddf 	bl	187a8 <z_spin_lock_set_owner>
	return k;
   16bea:	e7b8      	b.n	16b5e <k_heap_aligned_alloc+0x76>
   16bec:	0001e6f6 	.word	0x0001e6f6
   16bf0:	0001e6bc 	.word	0x0001e6bc
   16bf4:	00021227 	.word	0x00021227

00016bf8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   16bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bfa:	4604      	mov	r4, r0
   16bfc:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16bfe:	f100 0514 	add.w	r5, r0, #20
   16c02:	f04f 0320 	mov.w	r3, #32
   16c06:	f3ef 8711 	mrs	r7, BASEPRI
   16c0a:	f383 8811 	msr	BASEPRI, r3
   16c0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16c12:	4628      	mov	r0, r5
   16c14:	f001 fdac 	bl	18770 <z_spin_lock_valid>
   16c18:	b940      	cbnz	r0, 16c2c <k_heap_free+0x34>
   16c1a:	4916      	ldr	r1, [pc, #88]	; (16c74 <k_heap_free+0x7c>)
   16c1c:	4816      	ldr	r0, [pc, #88]	; (16c78 <k_heap_free+0x80>)
   16c1e:	227c      	movs	r2, #124	; 0x7c
   16c20:	f002 fd7a 	bl	19718 <printk>
   16c24:	217c      	movs	r1, #124	; 0x7c
   16c26:	4813      	ldr	r0, [pc, #76]	; (16c74 <k_heap_free+0x7c>)
   16c28:	f003 f81c 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16c2c:	4628      	mov	r0, r5
   16c2e:	f001 fdbb 	bl	187a8 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   16c32:	4620      	mov	r0, r4
   16c34:	4631      	mov	r1, r6
   16c36:	f7f3 fadf 	bl	a1f8 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   16c3a:	f104 000c 	add.w	r0, r4, #12
   16c3e:	f006 f950 	bl	1cee2 <z_unpend_all>
   16c42:	b128      	cbz	r0, 16c50 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   16c44:	4639      	mov	r1, r7
   16c46:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   16c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   16c4c:	f000 bc0e 	b.w	1746c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16c50:	4628      	mov	r0, r5
   16c52:	f001 fd9b 	bl	1878c <z_spin_unlock_valid>
   16c56:	b940      	cbnz	r0, 16c6a <k_heap_free+0x72>
   16c58:	4906      	ldr	r1, [pc, #24]	; (16c74 <k_heap_free+0x7c>)
   16c5a:	4807      	ldr	r0, [pc, #28]	; (16c78 <k_heap_free+0x80>)
   16c5c:	22a7      	movs	r2, #167	; 0xa7
   16c5e:	f002 fd5b 	bl	19718 <printk>
   16c62:	21a7      	movs	r1, #167	; 0xa7
   16c64:	4803      	ldr	r0, [pc, #12]	; (16c74 <k_heap_free+0x7c>)
   16c66:	f002 fffd 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16c6a:	f387 8811 	msr	BASEPRI, r7
   16c6e:	f3bf 8f6f 	isb	sy
}
   16c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c74:	0001e6f6 	.word	0x0001e6f6
   16c78:	0001e6bc 	.word	0x0001e6bc

00016c7c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   16c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16c7e:	4c14      	ldr	r4, [pc, #80]	; (16cd0 <init_mem_slab_module+0x54>)
   16c80:	4d14      	ldr	r5, [pc, #80]	; (16cd4 <init_mem_slab_module+0x58>)
   16c82:	4e15      	ldr	r6, [pc, #84]	; (16cd8 <init_mem_slab_module+0x5c>)
   16c84:	42ac      	cmp	r4, r5
   16c86:	d908      	bls.n	16c9a <init_mem_slab_module+0x1e>
   16c88:	4631      	mov	r1, r6
   16c8a:	4814      	ldr	r0, [pc, #80]	; (16cdc <init_mem_slab_module+0x60>)
   16c8c:	2242      	movs	r2, #66	; 0x42
   16c8e:	f002 fd43 	bl	19718 <printk>
   16c92:	2142      	movs	r1, #66	; 0x42
   16c94:	4630      	mov	r0, r6
   16c96:	f002 ffe5 	bl	19c64 <assert_post_action>
   16c9a:	42ac      	cmp	r4, r5
   16c9c:	d301      	bcc.n	16ca2 <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   16c9e:	2000      	movs	r0, #0
	return rc;
}
   16ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   16ca2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   16ca6:	ea42 0301 	orr.w	r3, r2, r1
   16caa:	f013 0303 	ands.w	r3, r3, #3
   16cae:	d10b      	bne.n	16cc8 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   16cb0:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   16cb2:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16cb4:	4283      	cmp	r3, r0
   16cb6:	d101      	bne.n	16cbc <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16cb8:	341c      	adds	r4, #28
   16cba:	e7e3      	b.n	16c84 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   16cbc:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16cbe:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   16cc0:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   16cc2:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   16cc4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   16cc6:	e7f5      	b.n	16cb4 <init_mem_slab_module+0x38>
	return rc;
   16cc8:	f06f 0015 	mvn.w	r0, #21
   16ccc:	e7e8      	b.n	16ca0 <init_mem_slab_module+0x24>
   16cce:	bf00      	nop
   16cd0:	200085e0 	.word	0x200085e0
   16cd4:	20008634 	.word	0x20008634
   16cd8:	00021249 	.word	0x00021249
   16cdc:	0001e6bc 	.word	0x0001e6bc

00016ce0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   16ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16ce4:	4604      	mov	r4, r0
   16ce6:	460d      	mov	r5, r1
   16ce8:	4617      	mov	r7, r2
   16cea:	461e      	mov	r6, r3
	__asm__ volatile(
   16cec:	f04f 0320 	mov.w	r3, #32
   16cf0:	f3ef 8811 	mrs	r8, BASEPRI
   16cf4:	f383 8811 	msr	BASEPRI, r3
   16cf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16cfc:	4821      	ldr	r0, [pc, #132]	; (16d84 <k_mem_slab_alloc+0xa4>)
   16cfe:	f001 fd37 	bl	18770 <z_spin_lock_valid>
   16d02:	b940      	cbnz	r0, 16d16 <k_mem_slab_alloc+0x36>
   16d04:	4920      	ldr	r1, [pc, #128]	; (16d88 <k_mem_slab_alloc+0xa8>)
   16d06:	4821      	ldr	r0, [pc, #132]	; (16d8c <k_mem_slab_alloc+0xac>)
   16d08:	227c      	movs	r2, #124	; 0x7c
   16d0a:	f002 fd05 	bl	19718 <printk>
   16d0e:	217c      	movs	r1, #124	; 0x7c
   16d10:	481d      	ldr	r0, [pc, #116]	; (16d88 <k_mem_slab_alloc+0xa8>)
   16d12:	f002 ffa7 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16d16:	481b      	ldr	r0, [pc, #108]	; (16d84 <k_mem_slab_alloc+0xa4>)
   16d18:	f001 fd46 	bl	187a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   16d1c:	6963      	ldr	r3, [r4, #20]
   16d1e:	b1c3      	cbz	r3, 16d52 <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   16d20:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   16d22:	681b      	ldr	r3, [r3, #0]
   16d24:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   16d26:	69a3      	ldr	r3, [r4, #24]
   16d28:	3301      	adds	r3, #1
   16d2a:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   16d2c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16d2e:	4815      	ldr	r0, [pc, #84]	; (16d84 <k_mem_slab_alloc+0xa4>)
   16d30:	f001 fd2c 	bl	1878c <z_spin_unlock_valid>
   16d34:	b940      	cbnz	r0, 16d48 <k_mem_slab_alloc+0x68>
   16d36:	4914      	ldr	r1, [pc, #80]	; (16d88 <k_mem_slab_alloc+0xa8>)
   16d38:	4814      	ldr	r0, [pc, #80]	; (16d8c <k_mem_slab_alloc+0xac>)
   16d3a:	22a7      	movs	r2, #167	; 0xa7
   16d3c:	f002 fcec 	bl	19718 <printk>
   16d40:	21a7      	movs	r1, #167	; 0xa7
   16d42:	4811      	ldr	r0, [pc, #68]	; (16d88 <k_mem_slab_alloc+0xa8>)
   16d44:	f002 ff8e 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16d48:	f388 8811 	msr	BASEPRI, r8
   16d4c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   16d50:	e013      	b.n	16d7a <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16d52:	ea57 0206 	orrs.w	r2, r7, r6
   16d56:	d103      	bne.n	16d60 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   16d58:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   16d5c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   16d5e:	e7e6      	b.n	16d2e <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   16d60:	4622      	mov	r2, r4
   16d62:	4641      	mov	r1, r8
   16d64:	e9cd 7600 	strd	r7, r6, [sp]
   16d68:	4806      	ldr	r0, [pc, #24]	; (16d84 <k_mem_slab_alloc+0xa4>)
   16d6a:	f001 f8bd 	bl	17ee8 <z_pend_curr>
		if (result == 0) {
   16d6e:	4604      	mov	r4, r0
   16d70:	b918      	cbnz	r0, 16d7a <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   16d72:	4b07      	ldr	r3, [pc, #28]	; (16d90 <k_mem_slab_alloc+0xb0>)
   16d74:	689b      	ldr	r3, [r3, #8]
   16d76:	695b      	ldr	r3, [r3, #20]
   16d78:	602b      	str	r3, [r5, #0]
}
   16d7a:	4620      	mov	r0, r4
   16d7c:	b002      	add	sp, #8
   16d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d82:	bf00      	nop
   16d84:	2000adbc 	.word	0x2000adbc
   16d88:	0001e6f6 	.word	0x0001e6f6
   16d8c:	0001e6bc 	.word	0x0001e6bc
   16d90:	2000adc4 	.word	0x2000adc4

00016d94 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   16d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d96:	4604      	mov	r4, r0
   16d98:	460d      	mov	r5, r1
	__asm__ volatile(
   16d9a:	f04f 0320 	mov.w	r3, #32
   16d9e:	f3ef 8611 	mrs	r6, BASEPRI
   16da2:	f383 8811 	msr	BASEPRI, r3
   16da6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16daa:	481e      	ldr	r0, [pc, #120]	; (16e24 <k_mem_slab_free+0x90>)
   16dac:	f001 fce0 	bl	18770 <z_spin_lock_valid>
   16db0:	b940      	cbnz	r0, 16dc4 <k_mem_slab_free+0x30>
   16db2:	491d      	ldr	r1, [pc, #116]	; (16e28 <k_mem_slab_free+0x94>)
   16db4:	481d      	ldr	r0, [pc, #116]	; (16e2c <k_mem_slab_free+0x98>)
   16db6:	227c      	movs	r2, #124	; 0x7c
   16db8:	f002 fcae 	bl	19718 <printk>
   16dbc:	217c      	movs	r1, #124	; 0x7c
   16dbe:	481a      	ldr	r0, [pc, #104]	; (16e28 <k_mem_slab_free+0x94>)
   16dc0:	f002 ff50 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16dc4:	4817      	ldr	r0, [pc, #92]	; (16e24 <k_mem_slab_free+0x90>)
   16dc6:	f001 fcef 	bl	187a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   16dca:	6967      	ldr	r7, [r4, #20]
   16dcc:	b97f      	cbnz	r7, 16dee <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   16dce:	4620      	mov	r0, r4
   16dd0:	f001 f92c 	bl	1802c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   16dd4:	b158      	cbz	r0, 16dee <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   16dd6:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16dd8:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   16ddc:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   16dde:	f000 fd19 	bl	17814 <z_ready_thread>
			z_reschedule(&lock, key);
   16de2:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   16de4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   16de8:	480e      	ldr	r0, [pc, #56]	; (16e24 <k_mem_slab_free+0x90>)
   16dea:	f000 bb3f 	b.w	1746c <z_reschedule>
	**(char ***) mem = slab->free_list;
   16dee:	682b      	ldr	r3, [r5, #0]
   16df0:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16df2:	480c      	ldr	r0, [pc, #48]	; (16e24 <k_mem_slab_free+0x90>)
   16df4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   16df6:	682b      	ldr	r3, [r5, #0]
   16df8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   16dfa:	69a3      	ldr	r3, [r4, #24]
   16dfc:	3b01      	subs	r3, #1
   16dfe:	61a3      	str	r3, [r4, #24]
   16e00:	f001 fcc4 	bl	1878c <z_spin_unlock_valid>
   16e04:	b940      	cbnz	r0, 16e18 <k_mem_slab_free+0x84>
   16e06:	4908      	ldr	r1, [pc, #32]	; (16e28 <k_mem_slab_free+0x94>)
   16e08:	4808      	ldr	r0, [pc, #32]	; (16e2c <k_mem_slab_free+0x98>)
   16e0a:	22a7      	movs	r2, #167	; 0xa7
   16e0c:	f002 fc84 	bl	19718 <printk>
   16e10:	21a7      	movs	r1, #167	; 0xa7
   16e12:	4805      	ldr	r0, [pc, #20]	; (16e28 <k_mem_slab_free+0x94>)
   16e14:	f002 ff26 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16e18:	f386 8811 	msr	BASEPRI, r6
   16e1c:	f3bf 8f6f 	isb	sy
}
   16e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e22:	bf00      	nop
   16e24:	2000adbc 	.word	0x2000adbc
   16e28:	0001e6f6 	.word	0x0001e6f6
   16e2c:	0001e6bc 	.word	0x0001e6bc

00016e30 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   16e30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16e34:	4604      	mov	r4, r0
   16e36:	4617      	mov	r7, r2
   16e38:	461e      	mov	r6, r3
   16e3a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   16e3e:	b143      	cbz	r3, 16e52 <z_impl_k_mutex_lock+0x22>
   16e40:	495c      	ldr	r1, [pc, #368]	; (16fb4 <z_impl_k_mutex_lock+0x184>)
   16e42:	485d      	ldr	r0, [pc, #372]	; (16fb8 <z_impl_k_mutex_lock+0x188>)
   16e44:	227d      	movs	r2, #125	; 0x7d
   16e46:	f002 fc67 	bl	19718 <printk>
   16e4a:	217d      	movs	r1, #125	; 0x7d
   16e4c:	4859      	ldr	r0, [pc, #356]	; (16fb4 <z_impl_k_mutex_lock+0x184>)
   16e4e:	f002 ff09 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16e52:	f04f 0320 	mov.w	r3, #32
   16e56:	f3ef 8811 	mrs	r8, BASEPRI
   16e5a:	f383 8811 	msr	BASEPRI, r3
   16e5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16e62:	4856      	ldr	r0, [pc, #344]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16e64:	f001 fc84 	bl	18770 <z_spin_lock_valid>
   16e68:	b940      	cbnz	r0, 16e7c <z_impl_k_mutex_lock+0x4c>
   16e6a:	4955      	ldr	r1, [pc, #340]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16e6c:	4852      	ldr	r0, [pc, #328]	; (16fb8 <z_impl_k_mutex_lock+0x188>)
   16e6e:	227c      	movs	r2, #124	; 0x7c
   16e70:	f002 fc52 	bl	19718 <printk>
   16e74:	217c      	movs	r1, #124	; 0x7c
   16e76:	4852      	ldr	r0, [pc, #328]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16e78:	f002 fef4 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16e7c:	484f      	ldr	r0, [pc, #316]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16e7e:	f001 fc93 	bl	187a8 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16e82:	68e3      	ldr	r3, [r4, #12]
   16e84:	4a4f      	ldr	r2, [pc, #316]	; (16fc4 <z_impl_k_mutex_lock+0x194>)
   16e86:	b1d3      	cbz	r3, 16ebe <z_impl_k_mutex_lock+0x8e>
   16e88:	68a0      	ldr	r0, [r4, #8]
   16e8a:	6891      	ldr	r1, [r2, #8]
   16e8c:	4288      	cmp	r0, r1
   16e8e:	d033      	beq.n	16ef8 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   16e90:	ea57 0306 	orrs.w	r3, r7, r6
   16e94:	d132      	bne.n	16efc <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e96:	4849      	ldr	r0, [pc, #292]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16e98:	f001 fc78 	bl	1878c <z_spin_unlock_valid>
   16e9c:	b940      	cbnz	r0, 16eb0 <z_impl_k_mutex_lock+0x80>
   16e9e:	4948      	ldr	r1, [pc, #288]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16ea0:	4845      	ldr	r0, [pc, #276]	; (16fb8 <z_impl_k_mutex_lock+0x188>)
   16ea2:	22a7      	movs	r2, #167	; 0xa7
   16ea4:	f002 fc38 	bl	19718 <printk>
   16ea8:	21a7      	movs	r1, #167	; 0xa7
   16eaa:	4845      	ldr	r0, [pc, #276]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16eac:	f002 feda 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16eb0:	f388 8811 	msr	BASEPRI, r8
   16eb4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   16eb8:	f06f 000f 	mvn.w	r0, #15
   16ebc:	e019      	b.n	16ef2 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   16ebe:	6891      	ldr	r1, [r2, #8]
   16ec0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   16ec4:	3301      	adds	r3, #1
   16ec6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   16ec8:	6893      	ldr	r3, [r2, #8]
   16eca:	483c      	ldr	r0, [pc, #240]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16ecc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   16ece:	60a3      	str	r3, [r4, #8]
   16ed0:	f001 fc5c 	bl	1878c <z_spin_unlock_valid>
   16ed4:	b940      	cbnz	r0, 16ee8 <z_impl_k_mutex_lock+0xb8>
   16ed6:	493a      	ldr	r1, [pc, #232]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16ed8:	4837      	ldr	r0, [pc, #220]	; (16fb8 <z_impl_k_mutex_lock+0x188>)
   16eda:	22a7      	movs	r2, #167	; 0xa7
   16edc:	f002 fc1c 	bl	19718 <printk>
   16ee0:	21a7      	movs	r1, #167	; 0xa7
   16ee2:	4837      	ldr	r0, [pc, #220]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16ee4:	f002 febe 	bl	19c64 <assert_post_action>
   16ee8:	f388 8811 	msr	BASEPRI, r8
   16eec:	f3bf 8f6f 	isb	sy
		return 0;
   16ef0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   16ef2:	b002      	add	sp, #8
   16ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   16ef8:	6921      	ldr	r1, [r4, #16]
   16efa:	e7e3      	b.n	16ec4 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16efc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16f00:	f991 100e 	ldrsb.w	r1, [r1, #14]
   16f04:	4299      	cmp	r1, r3
   16f06:	bfa8      	it	ge
   16f08:	4619      	movge	r1, r3
   16f0a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16f0e:	4299      	cmp	r1, r3
   16f10:	da3b      	bge.n	16f8a <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   16f12:	f005 ff76 	bl	1ce02 <adjust_owner_prio.isra.0>
   16f16:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   16f18:	4622      	mov	r2, r4
   16f1a:	4641      	mov	r1, r8
   16f1c:	e9cd 7600 	strd	r7, r6, [sp]
   16f20:	4826      	ldr	r0, [pc, #152]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16f22:	f000 ffe1 	bl	17ee8 <z_pend_curr>
	if (got_mutex == 0) {
   16f26:	2800      	cmp	r0, #0
   16f28:	d0e3      	beq.n	16ef2 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   16f2a:	f04f 0320 	mov.w	r3, #32
   16f2e:	f3ef 8611 	mrs	r6, BASEPRI
   16f32:	f383 8811 	msr	BASEPRI, r3
   16f36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16f3a:	4820      	ldr	r0, [pc, #128]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16f3c:	f001 fc18 	bl	18770 <z_spin_lock_valid>
   16f40:	b940      	cbnz	r0, 16f54 <z_impl_k_mutex_lock+0x124>
   16f42:	491f      	ldr	r1, [pc, #124]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16f44:	481c      	ldr	r0, [pc, #112]	; (16fb8 <z_impl_k_mutex_lock+0x188>)
   16f46:	227c      	movs	r2, #124	; 0x7c
   16f48:	f002 fbe6 	bl	19718 <printk>
   16f4c:	217c      	movs	r1, #124	; 0x7c
   16f4e:	481c      	ldr	r0, [pc, #112]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16f50:	f002 fe88 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   16f54:	4819      	ldr	r0, [pc, #100]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16f56:	f001 fc27 	bl	187a8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16f5a:	6823      	ldr	r3, [r4, #0]
   16f5c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16f5e:	42a3      	cmp	r3, r4
   16f60:	d007      	beq.n	16f72 <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16f62:	b133      	cbz	r3, 16f72 <z_impl_k_mutex_lock+0x142>
   16f64:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16f68:	4299      	cmp	r1, r3
   16f6a:	bfa8      	it	ge
   16f6c:	4619      	movge	r1, r3
   16f6e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   16f72:	68a0      	ldr	r0, [r4, #8]
   16f74:	f005 ff45 	bl	1ce02 <adjust_owner_prio.isra.0>
   16f78:	b900      	cbnz	r0, 16f7c <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   16f7a:	b145      	cbz	r5, 16f8e <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   16f7c:	4631      	mov	r1, r6
   16f7e:	480f      	ldr	r0, [pc, #60]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16f80:	f000 fa74 	bl	1746c <z_reschedule>
	return -EAGAIN;
   16f84:	f06f 000a 	mvn.w	r0, #10
   16f88:	e7b3      	b.n	16ef2 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   16f8a:	2500      	movs	r5, #0
   16f8c:	e7c4      	b.n	16f18 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f8e:	480b      	ldr	r0, [pc, #44]	; (16fbc <z_impl_k_mutex_lock+0x18c>)
   16f90:	f001 fbfc 	bl	1878c <z_spin_unlock_valid>
   16f94:	b940      	cbnz	r0, 16fa8 <z_impl_k_mutex_lock+0x178>
   16f96:	490a      	ldr	r1, [pc, #40]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16f98:	4807      	ldr	r0, [pc, #28]	; (16fb8 <z_impl_k_mutex_lock+0x188>)
   16f9a:	22a7      	movs	r2, #167	; 0xa7
   16f9c:	f002 fbbc 	bl	19718 <printk>
   16fa0:	21a7      	movs	r1, #167	; 0xa7
   16fa2:	4807      	ldr	r0, [pc, #28]	; (16fc0 <z_impl_k_mutex_lock+0x190>)
   16fa4:	f002 fe5e 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   16fa8:	f386 8811 	msr	BASEPRI, r6
   16fac:	f3bf 8f6f 	isb	sy
   16fb0:	e7e8      	b.n	16f84 <z_impl_k_mutex_lock+0x154>
   16fb2:	bf00      	nop
   16fb4:	0002126e 	.word	0x0002126e
   16fb8:	0001e6bc 	.word	0x0001e6bc
   16fbc:	2000adc0 	.word	0x2000adc0
   16fc0:	0001e6f6 	.word	0x0001e6f6
   16fc4:	2000adc4 	.word	0x2000adc4

00016fc8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   16fc8:	b538      	push	{r3, r4, r5, lr}
   16fca:	4604      	mov	r4, r0
   16fcc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   16fd0:	b143      	cbz	r3, 16fe4 <z_impl_k_mutex_unlock+0x1c>
   16fd2:	4946      	ldr	r1, [pc, #280]	; (170ec <z_impl_k_mutex_unlock+0x124>)
   16fd4:	4846      	ldr	r0, [pc, #280]	; (170f0 <z_impl_k_mutex_unlock+0x128>)
   16fd6:	22d8      	movs	r2, #216	; 0xd8
   16fd8:	f002 fb9e 	bl	19718 <printk>
   16fdc:	21d8      	movs	r1, #216	; 0xd8
   16fde:	4843      	ldr	r0, [pc, #268]	; (170ec <z_impl_k_mutex_unlock+0x124>)
   16fe0:	f002 fe40 	bl	19c64 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   16fe4:	68a3      	ldr	r3, [r4, #8]
   16fe6:	2b00      	cmp	r3, #0
   16fe8:	d079      	beq.n	170de <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   16fea:	4d42      	ldr	r5, [pc, #264]	; (170f4 <z_impl_k_mutex_unlock+0x12c>)
   16fec:	68aa      	ldr	r2, [r5, #8]
   16fee:	4293      	cmp	r3, r2
   16ff0:	d178      	bne.n	170e4 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   16ff2:	68e3      	ldr	r3, [r4, #12]
   16ff4:	b943      	cbnz	r3, 17008 <z_impl_k_mutex_unlock+0x40>
   16ff6:	493d      	ldr	r1, [pc, #244]	; (170ec <z_impl_k_mutex_unlock+0x124>)
   16ff8:	483d      	ldr	r0, [pc, #244]	; (170f0 <z_impl_k_mutex_unlock+0x128>)
   16ffa:	22ea      	movs	r2, #234	; 0xea
   16ffc:	f002 fb8c 	bl	19718 <printk>
   17000:	21ea      	movs	r1, #234	; 0xea
   17002:	483a      	ldr	r0, [pc, #232]	; (170ec <z_impl_k_mutex_unlock+0x124>)
   17004:	f002 fe2e 	bl	19c64 <assert_post_action>
   17008:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   1700c:	b153      	cbz	r3, 17024 <z_impl_k_mutex_unlock+0x5c>
   1700e:	493a      	ldr	r1, [pc, #232]	; (170f8 <z_impl_k_mutex_unlock+0x130>)
   17010:	4837      	ldr	r0, [pc, #220]	; (170f0 <z_impl_k_mutex_unlock+0x128>)
   17012:	f44f 7289 	mov.w	r2, #274	; 0x112
   17016:	f002 fb7f 	bl	19718 <printk>
   1701a:	f44f 7189 	mov.w	r1, #274	; 0x112
   1701e:	4836      	ldr	r0, [pc, #216]	; (170f8 <z_impl_k_mutex_unlock+0x130>)
   17020:	f002 fe20 	bl	19c64 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   17024:	68ab      	ldr	r3, [r5, #8]
   17026:	7bdb      	ldrb	r3, [r3, #15]
   17028:	2b01      	cmp	r3, #1
   1702a:	d10a      	bne.n	17042 <z_impl_k_mutex_unlock+0x7a>
   1702c:	4932      	ldr	r1, [pc, #200]	; (170f8 <z_impl_k_mutex_unlock+0x130>)
   1702e:	4830      	ldr	r0, [pc, #192]	; (170f0 <z_impl_k_mutex_unlock+0x128>)
   17030:	f240 1213 	movw	r2, #275	; 0x113
   17034:	f002 fb70 	bl	19718 <printk>
   17038:	f240 1113 	movw	r1, #275	; 0x113
   1703c:	482e      	ldr	r0, [pc, #184]	; (170f8 <z_impl_k_mutex_unlock+0x130>)
   1703e:	f002 fe11 	bl	19c64 <assert_post_action>

	--_current->base.sched_locked;
   17042:	68aa      	ldr	r2, [r5, #8]
   17044:	7bd3      	ldrb	r3, [r2, #15]
   17046:	3b01      	subs	r3, #1
   17048:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1704a:	68e3      	ldr	r3, [r4, #12]
   1704c:	2b01      	cmp	r3, #1
   1704e:	d005      	beq.n	1705c <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   17050:	3b01      	subs	r3, #1
   17052:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   17054:	f000 fb38 	bl	176c8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   17058:	2000      	movs	r0, #0
}
   1705a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1705c:	f04f 0320 	mov.w	r3, #32
   17060:	f3ef 8511 	mrs	r5, BASEPRI
   17064:	f383 8811 	msr	BASEPRI, r3
   17068:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1706c:	4823      	ldr	r0, [pc, #140]	; (170fc <z_impl_k_mutex_unlock+0x134>)
   1706e:	f001 fb7f 	bl	18770 <z_spin_lock_valid>
   17072:	b940      	cbnz	r0, 17086 <z_impl_k_mutex_unlock+0xbe>
   17074:	4922      	ldr	r1, [pc, #136]	; (17100 <z_impl_k_mutex_unlock+0x138>)
   17076:	481e      	ldr	r0, [pc, #120]	; (170f0 <z_impl_k_mutex_unlock+0x128>)
   17078:	227c      	movs	r2, #124	; 0x7c
   1707a:	f002 fb4d 	bl	19718 <printk>
   1707e:	217c      	movs	r1, #124	; 0x7c
   17080:	481f      	ldr	r0, [pc, #124]	; (17100 <z_impl_k_mutex_unlock+0x138>)
   17082:	f002 fdef 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17086:	481d      	ldr	r0, [pc, #116]	; (170fc <z_impl_k_mutex_unlock+0x134>)
   17088:	f001 fb8e 	bl	187a8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1708c:	6921      	ldr	r1, [r4, #16]
   1708e:	68a0      	ldr	r0, [r4, #8]
   17090:	f005 feb7 	bl	1ce02 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17094:	4620      	mov	r0, r4
   17096:	f000 ffc9 	bl	1802c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1709a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1709c:	b160      	cbz	r0, 170b8 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   1709e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   170a2:	6122      	str	r2, [r4, #16]
   170a4:	2200      	movs	r2, #0
   170a6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   170aa:	f000 fbb3 	bl	17814 <z_ready_thread>
		z_reschedule(&lock, key);
   170ae:	4629      	mov	r1, r5
   170b0:	4812      	ldr	r0, [pc, #72]	; (170fc <z_impl_k_mutex_unlock+0x134>)
   170b2:	f000 f9db 	bl	1746c <z_reschedule>
   170b6:	e7cd      	b.n	17054 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   170b8:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   170ba:	4810      	ldr	r0, [pc, #64]	; (170fc <z_impl_k_mutex_unlock+0x134>)
   170bc:	f001 fb66 	bl	1878c <z_spin_unlock_valid>
   170c0:	b940      	cbnz	r0, 170d4 <z_impl_k_mutex_unlock+0x10c>
   170c2:	490f      	ldr	r1, [pc, #60]	; (17100 <z_impl_k_mutex_unlock+0x138>)
   170c4:	480a      	ldr	r0, [pc, #40]	; (170f0 <z_impl_k_mutex_unlock+0x128>)
   170c6:	22a7      	movs	r2, #167	; 0xa7
   170c8:	f002 fb26 	bl	19718 <printk>
   170cc:	21a7      	movs	r1, #167	; 0xa7
   170ce:	480c      	ldr	r0, [pc, #48]	; (17100 <z_impl_k_mutex_unlock+0x138>)
   170d0:	f002 fdc8 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   170d4:	f385 8811 	msr	BASEPRI, r5
   170d8:	f3bf 8f6f 	isb	sy
   170dc:	e7ba      	b.n	17054 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   170de:	f06f 0015 	mvn.w	r0, #21
   170e2:	e7ba      	b.n	1705a <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   170e4:	f04f 30ff 	mov.w	r0, #4294967295
   170e8:	e7b7      	b.n	1705a <z_impl_k_mutex_unlock+0x92>
   170ea:	bf00      	nop
   170ec:	0002126e 	.word	0x0002126e
   170f0:	0001e6bc 	.word	0x0001e6bc
   170f4:	2000adc4 	.word	0x2000adc4
   170f8:	00021290 	.word	0x00021290
   170fc:	2000adc0 	.word	0x2000adc0
   17100:	0001e6f6 	.word	0x0001e6f6

00017104 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   17104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17108:	4604      	mov	r4, r0
   1710a:	460d      	mov	r5, r1
   1710c:	4690      	mov	r8, r2
   1710e:	4699      	mov	r9, r3
   17110:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17114:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   17118:	f04f 0320 	mov.w	r3, #32
   1711c:	f3ef 8711 	mrs	r7, BASEPRI
   17120:	f383 8811 	msr	BASEPRI, r3
   17124:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17128:	4630      	mov	r0, r6
   1712a:	f001 fb21 	bl	18770 <z_spin_lock_valid>
   1712e:	b940      	cbnz	r0, 17142 <queue_insert+0x3e>
   17130:	4937      	ldr	r1, [pc, #220]	; (17210 <queue_insert+0x10c>)
   17132:	4838      	ldr	r0, [pc, #224]	; (17214 <queue_insert+0x110>)
   17134:	227c      	movs	r2, #124	; 0x7c
   17136:	f002 faef 	bl	19718 <printk>
   1713a:	217c      	movs	r1, #124	; 0x7c
   1713c:	4834      	ldr	r0, [pc, #208]	; (17210 <queue_insert+0x10c>)
   1713e:	f002 fd91 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17142:	4630      	mov	r0, r6
   17144:	f001 fb30 	bl	187a8 <z_spin_lock_set_owner>

	if (is_append) {
   17148:	f1ba 0f00 	cmp.w	sl, #0
   1714c:	d000      	beq.n	17150 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1714e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   17150:	f104 000c 	add.w	r0, r4, #12
   17154:	f000 ff6a 	bl	1802c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   17158:	b160      	cbz	r0, 17174 <queue_insert+0x70>
   1715a:	2400      	movs	r4, #0
   1715c:	f8c0 8014 	str.w	r8, [r0, #20]
   17160:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   17164:	f000 fb56 	bl	17814 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17168:	4630      	mov	r0, r6
   1716a:	4639      	mov	r1, r7
   1716c:	f000 f97e 	bl	1746c <z_reschedule>
	return 0;
   17170:	2000      	movs	r0, #0
   17172:	e019      	b.n	171a8 <queue_insert+0xa4>
	if (alloc) {
   17174:	f1b9 0f00 	cmp.w	r9, #0
   17178:	d028      	beq.n	171cc <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1717a:	2108      	movs	r1, #8
   1717c:	f002 fa12 	bl	195a4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   17180:	b9a0      	cbnz	r0, 171ac <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17182:	4630      	mov	r0, r6
   17184:	f001 fb02 	bl	1878c <z_spin_unlock_valid>
   17188:	b940      	cbnz	r0, 1719c <queue_insert+0x98>
   1718a:	4921      	ldr	r1, [pc, #132]	; (17210 <queue_insert+0x10c>)
   1718c:	4821      	ldr	r0, [pc, #132]	; (17214 <queue_insert+0x110>)
   1718e:	22a7      	movs	r2, #167	; 0xa7
   17190:	f002 fac2 	bl	19718 <printk>
   17194:	21a7      	movs	r1, #167	; 0xa7
   17196:	481e      	ldr	r0, [pc, #120]	; (17210 <queue_insert+0x10c>)
   17198:	f002 fd64 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   1719c:	f387 8811 	msr	BASEPRI, r7
   171a0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   171a4:	f06f 000b 	mvn.w	r0, #11
}
   171a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   171ac:	2301      	movs	r3, #1
		anode->data = data;
   171ae:	f8c0 8004 	str.w	r8, [r0, #4]
   171b2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   171b4:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   171b6:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   171ba:	b95d      	cbnz	r5, 171d4 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   171bc:	6823      	ldr	r3, [r4, #0]
   171be:	4313      	orrs	r3, r2
   171c0:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   171c2:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   171c4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   171c6:	b973      	cbnz	r3, 171e6 <queue_insert+0xe2>
	list->tail = node;
   171c8:	6060      	str	r0, [r4, #4]
}
   171ca:	e00c      	b.n	171e6 <queue_insert+0xe2>
}
   171cc:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   171ce:	f8c8 9000 	str.w	r9, [r8]
}
   171d2:	e7ef      	b.n	171b4 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   171d4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   171d6:	f033 0303 	bics.w	r3, r3, #3
   171da:	d110      	bne.n	171fe <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   171dc:	6002      	str	r2, [r0, #0]
	return list->tail;
   171de:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   171e0:	b93a      	cbnz	r2, 171f2 <queue_insert+0xee>
	list->head = node;
   171e2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   171e6:	2104      	movs	r1, #4
   171e8:	f104 0014 	add.w	r0, r4, #20
   171ec:	f005 ff78 	bl	1d0e0 <z_handle_obj_poll_events>
   171f0:	e7ba      	b.n	17168 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   171f2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   171f4:	f003 0303 	and.w	r3, r3, #3
   171f8:	4303      	orrs	r3, r0
   171fa:	6013      	str	r3, [r2, #0]
   171fc:	e7e4      	b.n	171c8 <queue_insert+0xc4>
   171fe:	4313      	orrs	r3, r2
   17200:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17202:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17204:	f003 0303 	and.w	r3, r3, #3
   17208:	4303      	orrs	r3, r0
   1720a:	602b      	str	r3, [r5, #0]
}
   1720c:	e7eb      	b.n	171e6 <queue_insert+0xe2>
   1720e:	bf00      	nop
   17210:	0001e6f6 	.word	0x0001e6f6
   17214:	0001e6bc 	.word	0x0001e6bc

00017218 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   17218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1721c:	4605      	mov	r5, r0
   1721e:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   17220:	460c      	mov	r4, r1
   17222:	2900      	cmp	r1, #0
   17224:	d045      	beq.n	172b2 <k_queue_append_list+0x9a>
   17226:	2a00      	cmp	r2, #0
   17228:	d043      	beq.n	172b2 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1722a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1722e:	f04f 0320 	mov.w	r3, #32
   17232:	f3ef 8911 	mrs	r9, BASEPRI
   17236:	f383 8811 	msr	BASEPRI, r3
   1723a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1723e:	4638      	mov	r0, r7
   17240:	f001 fa96 	bl	18770 <z_spin_lock_valid>
   17244:	b940      	cbnz	r0, 17258 <k_queue_append_list+0x40>
   17246:	491c      	ldr	r1, [pc, #112]	; (172b8 <k_queue_append_list+0xa0>)
   17248:	481c      	ldr	r0, [pc, #112]	; (172bc <k_queue_append_list+0xa4>)
   1724a:	227c      	movs	r2, #124	; 0x7c
   1724c:	f002 fa64 	bl	19718 <printk>
   17250:	217c      	movs	r1, #124	; 0x7c
   17252:	4819      	ldr	r0, [pc, #100]	; (172b8 <k_queue_append_list+0xa0>)
   17254:	f002 fd06 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17258:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1725a:	f105 080c 	add.w	r8, r5, #12
   1725e:	f001 faa3 	bl	187a8 <z_spin_lock_set_owner>
   17262:	4640      	mov	r0, r8
   17264:	f000 fee2 	bl	1802c <z_unpend_first_thread>
   17268:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   1726c:	b920      	cbnz	r0, 17278 <k_queue_append_list+0x60>
	return list->tail;
   1726e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17270:	b9ca      	cbnz	r2, 172a6 <k_queue_append_list+0x8e>
	list->head = node;
   17272:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17274:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17276:	e00a      	b.n	1728e <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   17278:	6144      	str	r4, [r0, #20]
   1727a:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1727e:	f000 fac9 	bl	17814 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   17282:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   17284:	4640      	mov	r0, r8
   17286:	f000 fed1 	bl	1802c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1728a:	2c00      	cmp	r4, #0
   1728c:	d1ee      	bne.n	1726c <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1728e:	2104      	movs	r1, #4
   17290:	f105 0014 	add.w	r0, r5, #20
   17294:	f005 ff24 	bl	1d0e0 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17298:	4638      	mov	r0, r7
   1729a:	4649      	mov	r1, r9
   1729c:	f000 f8e6 	bl	1746c <z_reschedule>
	return 0;
   172a0:	2000      	movs	r0, #0
}
   172a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   172a6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   172a8:	f003 0303 	and.w	r3, r3, #3
   172ac:	431c      	orrs	r4, r3
   172ae:	6014      	str	r4, [r2, #0]
}
   172b0:	e7e0      	b.n	17274 <k_queue_append_list+0x5c>
		return -EINVAL;
   172b2:	f06f 0015 	mvn.w	r0, #21
   172b6:	e7f4      	b.n	172a2 <k_queue_append_list+0x8a>
   172b8:	0001e6f6 	.word	0x0001e6f6
   172bc:	0001e6bc 	.word	0x0001e6bc

000172c0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   172c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   172c4:	4605      	mov	r5, r0
   172c6:	4690      	mov	r8, r2
   172c8:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   172ca:	f100 0608 	add.w	r6, r0, #8
   172ce:	f04f 0320 	mov.w	r3, #32
   172d2:	f3ef 8911 	mrs	r9, BASEPRI
   172d6:	f383 8811 	msr	BASEPRI, r3
   172da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   172de:	4630      	mov	r0, r6
   172e0:	f001 fa46 	bl	18770 <z_spin_lock_valid>
   172e4:	b940      	cbnz	r0, 172f8 <z_impl_k_queue_get+0x38>
   172e6:	4921      	ldr	r1, [pc, #132]	; (1736c <z_impl_k_queue_get+0xac>)
   172e8:	4821      	ldr	r0, [pc, #132]	; (17370 <z_impl_k_queue_get+0xb0>)
   172ea:	227c      	movs	r2, #124	; 0x7c
   172ec:	f002 fa14 	bl	19718 <printk>
   172f0:	217c      	movs	r1, #124	; 0x7c
   172f2:	481e      	ldr	r0, [pc, #120]	; (1736c <z_impl_k_queue_get+0xac>)
   172f4:	f002 fcb6 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   172f8:	4630      	mov	r0, r6
   172fa:	f001 fa55 	bl	187a8 <z_spin_lock_set_owner>
	return list->head;
   172fe:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17300:	b314      	cbz	r4, 17348 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17302:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17304:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17306:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1730a:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1730c:	4620      	mov	r0, r4
   1730e:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   17312:	602b      	str	r3, [r5, #0]
	list->tail = node;
   17314:	bf08      	it	eq
   17316:	606b      	streq	r3, [r5, #4]
   17318:	f005 fd82 	bl	1ce20 <z_queue_node_peek>
   1731c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1731e:	4630      	mov	r0, r6
   17320:	f001 fa34 	bl	1878c <z_spin_unlock_valid>
   17324:	b940      	cbnz	r0, 17338 <z_impl_k_queue_get+0x78>
   17326:	4911      	ldr	r1, [pc, #68]	; (1736c <z_impl_k_queue_get+0xac>)
   17328:	4811      	ldr	r0, [pc, #68]	; (17370 <z_impl_k_queue_get+0xb0>)
   1732a:	22a7      	movs	r2, #167	; 0xa7
   1732c:	f002 f9f4 	bl	19718 <printk>
   17330:	21a7      	movs	r1, #167	; 0xa7
   17332:	480e      	ldr	r0, [pc, #56]	; (1736c <z_impl_k_queue_get+0xac>)
   17334:	f002 fc96 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17338:	f389 8811 	msr	BASEPRI, r9
   1733c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17340:	4620      	mov	r0, r4
   17342:	b003      	add	sp, #12
   17344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17348:	ea58 0307 	orrs.w	r3, r8, r7
   1734c:	d0e7      	beq.n	1731e <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1734e:	4649      	mov	r1, r9
   17350:	4630      	mov	r0, r6
   17352:	e9cd 8700 	strd	r8, r7, [sp]
   17356:	f105 020c 	add.w	r2, r5, #12
   1735a:	f000 fdc5 	bl	17ee8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1735e:	2800      	cmp	r0, #0
   17360:	d1ee      	bne.n	17340 <z_impl_k_queue_get+0x80>
   17362:	4b04      	ldr	r3, [pc, #16]	; (17374 <z_impl_k_queue_get+0xb4>)
   17364:	689b      	ldr	r3, [r3, #8]
   17366:	695c      	ldr	r4, [r3, #20]
   17368:	e7ea      	b.n	17340 <z_impl_k_queue_get+0x80>
   1736a:	bf00      	nop
   1736c:	0001e6f6 	.word	0x0001e6f6
   17370:	0001e6bc 	.word	0x0001e6bc
   17374:	2000adc4 	.word	0x2000adc4

00017378 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   17378:	6883      	ldr	r3, [r0, #8]
{
   1737a:	b510      	push	{r4, lr}
   1737c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1737e:	b953      	cbnz	r3, 17396 <pended_on+0x1e>
   17380:	4906      	ldr	r1, [pc, #24]	; (1739c <pended_on+0x24>)
   17382:	4807      	ldr	r0, [pc, #28]	; (173a0 <pended_on+0x28>)
   17384:	f44f 7201 	mov.w	r2, #516	; 0x204
   17388:	f002 f9c6 	bl	19718 <printk>
   1738c:	f44f 7101 	mov.w	r1, #516	; 0x204
   17390:	4802      	ldr	r0, [pc, #8]	; (1739c <pended_on+0x24>)
   17392:	f002 fc67 	bl	19c64 <assert_post_action>

	return thread->base.pended_on;
}
   17396:	68a0      	ldr	r0, [r4, #8]
   17398:	bd10      	pop	{r4, pc}
   1739a:	bf00      	nop
   1739c:	000212bb 	.word	0x000212bb
   173a0:	0001e6bc 	.word	0x0001e6bc

000173a4 <z_reset_time_slice>:
{
   173a4:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   173a6:	4c08      	ldr	r4, [pc, #32]	; (173c8 <z_reset_time_slice+0x24>)
   173a8:	6823      	ldr	r3, [r4, #0]
   173aa:	b15b      	cbz	r3, 173c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   173ac:	f7f4 fb3e 	bl	ba2c <z_clock_elapsed>
   173b0:	4603      	mov	r3, r0
   173b2:	6820      	ldr	r0, [r4, #0]
   173b4:	4a05      	ldr	r2, [pc, #20]	; (173cc <z_reset_time_slice+0x28>)
   173b6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   173b8:	2100      	movs	r1, #0
}
   173ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   173be:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   173c0:	f001 bc8c 	b.w	18cdc <z_set_timeout_expiry>
}
   173c4:	bd10      	pop	{r4, pc}
   173c6:	bf00      	nop
   173c8:	2000ae04 	.word	0x2000ae04
   173cc:	2000adc4 	.word	0x2000adc4

000173d0 <k_sched_time_slice_set>:
{
   173d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173d2:	4604      	mov	r4, r0
   173d4:	460d      	mov	r5, r1
	__asm__ volatile(
   173d6:	f04f 0320 	mov.w	r3, #32
   173da:	f3ef 8711 	mrs	r7, BASEPRI
   173de:	f383 8811 	msr	BASEPRI, r3
   173e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   173e6:	481b      	ldr	r0, [pc, #108]	; (17454 <k_sched_time_slice_set+0x84>)
   173e8:	f001 f9c2 	bl	18770 <z_spin_lock_valid>
   173ec:	b940      	cbnz	r0, 17400 <k_sched_time_slice_set+0x30>
   173ee:	491a      	ldr	r1, [pc, #104]	; (17458 <k_sched_time_slice_set+0x88>)
   173f0:	481a      	ldr	r0, [pc, #104]	; (1745c <k_sched_time_slice_set+0x8c>)
   173f2:	227c      	movs	r2, #124	; 0x7c
   173f4:	f002 f990 	bl	19718 <printk>
   173f8:	217c      	movs	r1, #124	; 0x7c
   173fa:	4817      	ldr	r0, [pc, #92]	; (17458 <k_sched_time_slice_set+0x88>)
   173fc:	f002 fc32 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17400:	4814      	ldr	r0, [pc, #80]	; (17454 <k_sched_time_slice_set+0x84>)
   17402:	f001 f9d1 	bl	187a8 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   17406:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1740a:	2100      	movs	r1, #0
   1740c:	f240 30e7 	movw	r0, #999	; 0x3e7
   17410:	4b13      	ldr	r3, [pc, #76]	; (17460 <k_sched_time_slice_set+0x90>)
   17412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17416:	6159      	str	r1, [r3, #20]
   17418:	2300      	movs	r3, #0
   1741a:	fbe4 0106 	umlal	r0, r1, r4, r6
   1741e:	f7f1 fb85 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   17422:	4b10      	ldr	r3, [pc, #64]	; (17464 <k_sched_time_slice_set+0x94>)
   17424:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   17426:	4b10      	ldr	r3, [pc, #64]	; (17468 <k_sched_time_slice_set+0x98>)
   17428:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1742a:	f7ff ffbb 	bl	173a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1742e:	4809      	ldr	r0, [pc, #36]	; (17454 <k_sched_time_slice_set+0x84>)
   17430:	f001 f9ac 	bl	1878c <z_spin_unlock_valid>
   17434:	b940      	cbnz	r0, 17448 <k_sched_time_slice_set+0x78>
   17436:	4908      	ldr	r1, [pc, #32]	; (17458 <k_sched_time_slice_set+0x88>)
   17438:	4808      	ldr	r0, [pc, #32]	; (1745c <k_sched_time_slice_set+0x8c>)
   1743a:	22a7      	movs	r2, #167	; 0xa7
   1743c:	f002 f96c 	bl	19718 <printk>
   17440:	21a7      	movs	r1, #167	; 0xa7
   17442:	4805      	ldr	r0, [pc, #20]	; (17458 <k_sched_time_slice_set+0x88>)
   17444:	f002 fc0e 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17448:	f387 8811 	msr	BASEPRI, r7
   1744c:	f3bf 8f6f 	isb	sy
}
   17450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17452:	bf00      	nop
   17454:	2000adfc 	.word	0x2000adfc
   17458:	0001e6f6 	.word	0x0001e6f6
   1745c:	0001e6bc 	.word	0x0001e6bc
   17460:	2000adc4 	.word	0x2000adc4
   17464:	2000ae04 	.word	0x2000ae04
   17468:	2000ae00 	.word	0x2000ae00

0001746c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1746c:	b510      	push	{r4, lr}
   1746e:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17470:	460c      	mov	r4, r1
   17472:	b9c1      	cbnz	r1, 174a6 <z_reschedule+0x3a>
   17474:	f3ef 8205 	mrs	r2, IPSR
   17478:	b9aa      	cbnz	r2, 174a6 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1747a:	4a14      	ldr	r2, [pc, #80]	; (174cc <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   1747c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1747e:	6892      	ldr	r2, [r2, #8]
   17480:	4291      	cmp	r1, r2
   17482:	d010      	beq.n	174a6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17484:	f001 f982 	bl	1878c <z_spin_unlock_valid>
   17488:	b940      	cbnz	r0, 1749c <z_reschedule+0x30>
   1748a:	4911      	ldr	r1, [pc, #68]	; (174d0 <z_reschedule+0x64>)
   1748c:	4811      	ldr	r0, [pc, #68]	; (174d4 <z_reschedule+0x68>)
   1748e:	22be      	movs	r2, #190	; 0xbe
   17490:	f002 f942 	bl	19718 <printk>
   17494:	21be      	movs	r1, #190	; 0xbe
   17496:	480e      	ldr	r0, [pc, #56]	; (174d0 <z_reschedule+0x64>)
   17498:	f002 fbe4 	bl	19c64 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1749c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   174a0:	2000      	movs	r0, #0
   174a2:	f7f5 babf 	b.w	ca24 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   174a6:	4618      	mov	r0, r3
   174a8:	f001 f970 	bl	1878c <z_spin_unlock_valid>
   174ac:	b940      	cbnz	r0, 174c0 <z_reschedule+0x54>
   174ae:	4908      	ldr	r1, [pc, #32]	; (174d0 <z_reschedule+0x64>)
   174b0:	4808      	ldr	r0, [pc, #32]	; (174d4 <z_reschedule+0x68>)
   174b2:	22a7      	movs	r2, #167	; 0xa7
   174b4:	f002 f930 	bl	19718 <printk>
   174b8:	21a7      	movs	r1, #167	; 0xa7
   174ba:	4805      	ldr	r0, [pc, #20]	; (174d0 <z_reschedule+0x64>)
   174bc:	f002 fbd2 	bl	19c64 <assert_post_action>
   174c0:	f384 8811 	msr	BASEPRI, r4
   174c4:	f3bf 8f6f 	isb	sy
   174c8:	bd10      	pop	{r4, pc}
   174ca:	bf00      	nop
   174cc:	2000adc4 	.word	0x2000adc4
   174d0:	0001e6f6 	.word	0x0001e6f6
   174d4:	0001e6bc 	.word	0x0001e6bc

000174d8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   174d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   174da:	f04f 0320 	mov.w	r3, #32
   174de:	f3ef 8511 	mrs	r5, BASEPRI
   174e2:	f383 8811 	msr	BASEPRI, r3
   174e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   174ea:	4822      	ldr	r0, [pc, #136]	; (17574 <k_sched_lock+0x9c>)
   174ec:	f001 f940 	bl	18770 <z_spin_lock_valid>
   174f0:	b940      	cbnz	r0, 17504 <k_sched_lock+0x2c>
   174f2:	4921      	ldr	r1, [pc, #132]	; (17578 <k_sched_lock+0xa0>)
   174f4:	4821      	ldr	r0, [pc, #132]	; (1757c <k_sched_lock+0xa4>)
   174f6:	227c      	movs	r2, #124	; 0x7c
   174f8:	f002 f90e 	bl	19718 <printk>
   174fc:	217c      	movs	r1, #124	; 0x7c
   174fe:	481e      	ldr	r0, [pc, #120]	; (17578 <k_sched_lock+0xa0>)
   17500:	f002 fbb0 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17504:	481b      	ldr	r0, [pc, #108]	; (17574 <k_sched_lock+0x9c>)
   17506:	f001 f94f 	bl	187a8 <z_spin_lock_set_owner>
   1750a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1750e:	b153      	cbz	r3, 17526 <k_sched_lock+0x4e>
   17510:	491b      	ldr	r1, [pc, #108]	; (17580 <k_sched_lock+0xa8>)
   17512:	481a      	ldr	r0, [pc, #104]	; (1757c <k_sched_lock+0xa4>)
   17514:	f44f 7289 	mov.w	r2, #274	; 0x112
   17518:	f002 f8fe 	bl	19718 <printk>
   1751c:	f44f 7189 	mov.w	r1, #274	; 0x112
   17520:	4817      	ldr	r0, [pc, #92]	; (17580 <k_sched_lock+0xa8>)
   17522:	f002 fb9f 	bl	19c64 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   17526:	4c17      	ldr	r4, [pc, #92]	; (17584 <k_sched_lock+0xac>)
   17528:	68a3      	ldr	r3, [r4, #8]
   1752a:	7bdb      	ldrb	r3, [r3, #15]
   1752c:	2b01      	cmp	r3, #1
   1752e:	d10a      	bne.n	17546 <k_sched_lock+0x6e>
   17530:	4913      	ldr	r1, [pc, #76]	; (17580 <k_sched_lock+0xa8>)
   17532:	4812      	ldr	r0, [pc, #72]	; (1757c <k_sched_lock+0xa4>)
   17534:	f240 1213 	movw	r2, #275	; 0x113
   17538:	f002 f8ee 	bl	19718 <printk>
   1753c:	f240 1113 	movw	r1, #275	; 0x113
   17540:	480f      	ldr	r0, [pc, #60]	; (17580 <k_sched_lock+0xa8>)
   17542:	f002 fb8f 	bl	19c64 <assert_post_action>
	--_current->base.sched_locked;
   17546:	68a2      	ldr	r2, [r4, #8]
   17548:	7bd3      	ldrb	r3, [r2, #15]
   1754a:	3b01      	subs	r3, #1
   1754c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1754e:	4809      	ldr	r0, [pc, #36]	; (17574 <k_sched_lock+0x9c>)
   17550:	f001 f91c 	bl	1878c <z_spin_unlock_valid>
   17554:	b940      	cbnz	r0, 17568 <k_sched_lock+0x90>
   17556:	4908      	ldr	r1, [pc, #32]	; (17578 <k_sched_lock+0xa0>)
   17558:	4808      	ldr	r0, [pc, #32]	; (1757c <k_sched_lock+0xa4>)
   1755a:	22a7      	movs	r2, #167	; 0xa7
   1755c:	f002 f8dc 	bl	19718 <printk>
   17560:	21a7      	movs	r1, #167	; 0xa7
   17562:	4805      	ldr	r0, [pc, #20]	; (17578 <k_sched_lock+0xa0>)
   17564:	f002 fb7e 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17568:	f385 8811 	msr	BASEPRI, r5
   1756c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   17570:	bd38      	pop	{r3, r4, r5, pc}
   17572:	bf00      	nop
   17574:	2000adfc 	.word	0x2000adfc
   17578:	0001e6f6 	.word	0x0001e6f6
   1757c:	0001e6bc 	.word	0x0001e6bc
   17580:	00021290 	.word	0x00021290
   17584:	2000adc4 	.word	0x2000adc4

00017588 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17588:	4b11      	ldr	r3, [pc, #68]	; (175d0 <z_priq_dumb_remove+0x48>)
{
   1758a:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1758c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   17590:	4282      	cmp	r2, r0
{
   17592:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17594:	d105      	bne.n	175a2 <z_priq_dumb_remove+0x1a>
   17596:	689b      	ldr	r3, [r3, #8]
   17598:	428b      	cmp	r3, r1
   1759a:	d102      	bne.n	175a2 <z_priq_dumb_remove+0x1a>
   1759c:	7b4b      	ldrb	r3, [r1, #13]
   1759e:	06db      	lsls	r3, r3, #27
   175a0:	d114      	bne.n	175cc <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   175a2:	4b0c      	ldr	r3, [pc, #48]	; (175d4 <z_priq_dumb_remove+0x4c>)
   175a4:	429c      	cmp	r4, r3
   175a6:	d10a      	bne.n	175be <z_priq_dumb_remove+0x36>
   175a8:	490b      	ldr	r1, [pc, #44]	; (175d8 <z_priq_dumb_remove+0x50>)
   175aa:	480c      	ldr	r0, [pc, #48]	; (175dc <z_priq_dumb_remove+0x54>)
   175ac:	f240 32da 	movw	r2, #986	; 0x3da
   175b0:	f002 f8b2 	bl	19718 <printk>
   175b4:	f240 31da 	movw	r1, #986	; 0x3da
   175b8:	4807      	ldr	r0, [pc, #28]	; (175d8 <z_priq_dumb_remove+0x50>)
   175ba:	f002 fb53 	bl	19c64 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   175be:	e9d4 3200 	ldrd	r3, r2, [r4]
   175c2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   175c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   175c6:	2300      	movs	r3, #0
	node->prev = NULL;
   175c8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   175cc:	bd10      	pop	{r4, pc}
   175ce:	bf00      	nop
   175d0:	2000adc4 	.word	0x2000adc4
   175d4:	2000a280 	.word	0x2000a280
   175d8:	000212bb 	.word	0x000212bb
   175dc:	0001e6bc 	.word	0x0001e6bc

000175e0 <z_unpend_thread>:
{
   175e0:	b538      	push	{r3, r4, r5, lr}
   175e2:	4604      	mov	r4, r0
	__asm__ volatile(
   175e4:	f04f 0320 	mov.w	r3, #32
   175e8:	f3ef 8511 	mrs	r5, BASEPRI
   175ec:	f383 8811 	msr	BASEPRI, r3
   175f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   175f4:	4814      	ldr	r0, [pc, #80]	; (17648 <z_unpend_thread+0x68>)
   175f6:	f001 f8bb 	bl	18770 <z_spin_lock_valid>
   175fa:	b940      	cbnz	r0, 1760e <z_unpend_thread+0x2e>
   175fc:	4913      	ldr	r1, [pc, #76]	; (1764c <z_unpend_thread+0x6c>)
   175fe:	4814      	ldr	r0, [pc, #80]	; (17650 <z_unpend_thread+0x70>)
   17600:	227c      	movs	r2, #124	; 0x7c
   17602:	f002 f889 	bl	19718 <printk>
   17606:	217c      	movs	r1, #124	; 0x7c
   17608:	4810      	ldr	r0, [pc, #64]	; (1764c <z_unpend_thread+0x6c>)
   1760a:	f002 fb2b 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   1760e:	480e      	ldr	r0, [pc, #56]	; (17648 <z_unpend_thread+0x68>)
   17610:	f001 f8ca 	bl	187a8 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   17614:	4620      	mov	r0, r4
   17616:	f005 fc50 	bl	1ceba <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1761a:	480b      	ldr	r0, [pc, #44]	; (17648 <z_unpend_thread+0x68>)
   1761c:	f001 f8b6 	bl	1878c <z_spin_unlock_valid>
   17620:	b940      	cbnz	r0, 17634 <z_unpend_thread+0x54>
   17622:	490a      	ldr	r1, [pc, #40]	; (1764c <z_unpend_thread+0x6c>)
   17624:	480a      	ldr	r0, [pc, #40]	; (17650 <z_unpend_thread+0x70>)
   17626:	22a7      	movs	r2, #167	; 0xa7
   17628:	f002 f876 	bl	19718 <printk>
   1762c:	21a7      	movs	r1, #167	; 0xa7
   1762e:	4807      	ldr	r0, [pc, #28]	; (1764c <z_unpend_thread+0x6c>)
   17630:	f002 fb18 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17634:	f385 8811 	msr	BASEPRI, r5
   17638:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1763c:	f104 0018 	add.w	r0, r4, #24
}
   17640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17644:	f001 bad8 	b.w	18bf8 <z_abort_timeout>
   17648:	2000adfc 	.word	0x2000adfc
   1764c:	0001e6f6 	.word	0x0001e6f6
   17650:	0001e6bc 	.word	0x0001e6bc

00017654 <update_cache>:
{
   17654:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   17656:	4c19      	ldr	r4, [pc, #100]	; (176bc <update_cache+0x68>)
{
   17658:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1765a:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   1765c:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   1765e:	b143      	cbz	r3, 17672 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   17660:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   17662:	b1a8      	cbz	r0, 17690 <update_cache+0x3c>
		if (thread != _current) {
   17664:	68a3      	ldr	r3, [r4, #8]
   17666:	42ab      	cmp	r3, r5
   17668:	d001      	beq.n	1766e <update_cache+0x1a>
			z_reset_time_slice();
   1766a:	f7ff fe9b 	bl	173a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1766e:	62a5      	str	r5, [r4, #40]	; 0x28
}
   17670:	e023      	b.n	176ba <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   17672:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17676:	f005 fc2e 	bl	1ced6 <z_priq_dumb_best>
   1767a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1767c:	7b4b      	ldrb	r3, [r1, #13]
   1767e:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   17680:	bf44      	itt	mi
   17682:	f043 0308 	orrmi.w	r3, r3, #8
   17686:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   17688:	b905      	cbnz	r5, 1768c <update_cache+0x38>
   1768a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1768c:	b152      	cbz	r2, 176a4 <update_cache+0x50>
   1768e:	e7e9      	b.n	17664 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   17690:	b941      	cbnz	r1, 176a4 <update_cache+0x50>
   17692:	490b      	ldr	r1, [pc, #44]	; (176c0 <update_cache+0x6c>)
   17694:	480b      	ldr	r0, [pc, #44]	; (176c4 <update_cache+0x70>)
   17696:	2283      	movs	r2, #131	; 0x83
   17698:	f002 f83e 	bl	19718 <printk>
   1769c:	2183      	movs	r1, #131	; 0x83
   1769e:	4808      	ldr	r0, [pc, #32]	; (176c0 <update_cache+0x6c>)
   176a0:	f002 fae0 	bl	19c64 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   176a4:	68a3      	ldr	r3, [r4, #8]
   176a6:	7b5a      	ldrb	r2, [r3, #13]
   176a8:	06d2      	lsls	r2, r2, #27
   176aa:	d1db      	bne.n	17664 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   176ac:	69aa      	ldr	r2, [r5, #24]
   176ae:	2a00      	cmp	r2, #0
   176b0:	d1d8      	bne.n	17664 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   176b2:	89da      	ldrh	r2, [r3, #14]
   176b4:	2a7f      	cmp	r2, #127	; 0x7f
   176b6:	d9d5      	bls.n	17664 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   176b8:	62a3      	str	r3, [r4, #40]	; 0x28
}
   176ba:	bd38      	pop	{r3, r4, r5, pc}
   176bc:	2000adc4 	.word	0x2000adc4
   176c0:	000212bb 	.word	0x000212bb
   176c4:	0001e6bc 	.word	0x0001e6bc

000176c8 <k_sched_unlock>:
{
   176c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   176ca:	f04f 0320 	mov.w	r3, #32
   176ce:	f3ef 8511 	mrs	r5, BASEPRI
   176d2:	f383 8811 	msr	BASEPRI, r3
   176d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   176da:	4824      	ldr	r0, [pc, #144]	; (1776c <k_sched_unlock+0xa4>)
   176dc:	f001 f848 	bl	18770 <z_spin_lock_valid>
   176e0:	b940      	cbnz	r0, 176f4 <k_sched_unlock+0x2c>
   176e2:	4923      	ldr	r1, [pc, #140]	; (17770 <k_sched_unlock+0xa8>)
   176e4:	4823      	ldr	r0, [pc, #140]	; (17774 <k_sched_unlock+0xac>)
   176e6:	227c      	movs	r2, #124	; 0x7c
   176e8:	f002 f816 	bl	19718 <printk>
   176ec:	217c      	movs	r1, #124	; 0x7c
   176ee:	4820      	ldr	r0, [pc, #128]	; (17770 <k_sched_unlock+0xa8>)
   176f0:	f002 fab8 	bl	19c64 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   176f4:	4c20      	ldr	r4, [pc, #128]	; (17778 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   176f6:	481d      	ldr	r0, [pc, #116]	; (1776c <k_sched_unlock+0xa4>)
   176f8:	f001 f856 	bl	187a8 <z_spin_lock_set_owner>
   176fc:	68a3      	ldr	r3, [r4, #8]
   176fe:	7bdb      	ldrb	r3, [r3, #15]
   17700:	b953      	cbnz	r3, 17718 <k_sched_unlock+0x50>
   17702:	491e      	ldr	r1, [pc, #120]	; (1777c <k_sched_unlock+0xb4>)
   17704:	481b      	ldr	r0, [pc, #108]	; (17774 <k_sched_unlock+0xac>)
   17706:	f44f 725d 	mov.w	r2, #884	; 0x374
   1770a:	f002 f805 	bl	19718 <printk>
   1770e:	f44f 715d 	mov.w	r1, #884	; 0x374
   17712:	481a      	ldr	r0, [pc, #104]	; (1777c <k_sched_unlock+0xb4>)
   17714:	f002 faa6 	bl	19c64 <assert_post_action>
   17718:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1771c:	b153      	cbz	r3, 17734 <k_sched_unlock+0x6c>
   1771e:	4917      	ldr	r1, [pc, #92]	; (1777c <k_sched_unlock+0xb4>)
   17720:	4814      	ldr	r0, [pc, #80]	; (17774 <k_sched_unlock+0xac>)
   17722:	f240 3275 	movw	r2, #885	; 0x375
   17726:	f001 fff7 	bl	19718 <printk>
   1772a:	f240 3175 	movw	r1, #885	; 0x375
   1772e:	4813      	ldr	r0, [pc, #76]	; (1777c <k_sched_unlock+0xb4>)
   17730:	f002 fa98 	bl	19c64 <assert_post_action>
		++_current->base.sched_locked;
   17734:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   17736:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   17738:	7bd3      	ldrb	r3, [r2, #15]
   1773a:	3301      	adds	r3, #1
   1773c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1773e:	f7ff ff89 	bl	17654 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17742:	480a      	ldr	r0, [pc, #40]	; (1776c <k_sched_unlock+0xa4>)
   17744:	f001 f822 	bl	1878c <z_spin_unlock_valid>
   17748:	b940      	cbnz	r0, 1775c <k_sched_unlock+0x94>
   1774a:	4909      	ldr	r1, [pc, #36]	; (17770 <k_sched_unlock+0xa8>)
   1774c:	4809      	ldr	r0, [pc, #36]	; (17774 <k_sched_unlock+0xac>)
   1774e:	22a7      	movs	r2, #167	; 0xa7
   17750:	f001 ffe2 	bl	19718 <printk>
   17754:	21a7      	movs	r1, #167	; 0xa7
   17756:	4806      	ldr	r0, [pc, #24]	; (17770 <k_sched_unlock+0xa8>)
   17758:	f002 fa84 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   1775c:	f385 8811 	msr	BASEPRI, r5
   17760:	f3bf 8f6f 	isb	sy
}
   17764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   17768:	f005 bb9d 	b.w	1cea6 <z_reschedule_unlocked>
   1776c:	2000adfc 	.word	0x2000adfc
   17770:	0001e6f6 	.word	0x0001e6f6
   17774:	0001e6bc 	.word	0x0001e6bc
   17778:	2000adc4 	.word	0x2000adc4
   1777c:	000212bb 	.word	0x000212bb

00017780 <ready_thread>:
{
   17780:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17782:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   17786:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17788:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1778a:	7b43      	ldrb	r3, [r0, #13]
   1778c:	db39      	blt.n	17802 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1778e:	06db      	lsls	r3, r3, #27
   17790:	d137      	bne.n	17802 <ready_thread+0x82>
   17792:	6983      	ldr	r3, [r0, #24]
   17794:	2b00      	cmp	r3, #0
   17796:	d134      	bne.n	17802 <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17798:	4b1a      	ldr	r3, [pc, #104]	; (17804 <ready_thread+0x84>)
   1779a:	4298      	cmp	r0, r3
   1779c:	d10a      	bne.n	177b4 <ready_thread+0x34>
   1779e:	491a      	ldr	r1, [pc, #104]	; (17808 <ready_thread+0x88>)
   177a0:	481a      	ldr	r0, [pc, #104]	; (1780c <ready_thread+0x8c>)
   177a2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   177a6:	f001 ffb7 	bl	19718 <printk>
   177aa:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   177ae:	4816      	ldr	r0, [pc, #88]	; (17808 <ready_thread+0x88>)
   177b0:	f002 fa58 	bl	19c64 <assert_post_action>
	return list->head == list;
   177b4:	4a16      	ldr	r2, [pc, #88]	; (17810 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177b6:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   177ba:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177be:	4283      	cmp	r3, r0
   177c0:	d019      	beq.n	177f6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   177c2:	b1c3      	cbz	r3, 177f6 <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   177c4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   177c8:	f993 600e 	ldrsb.w	r6, [r3, #14]
   177cc:	42ae      	cmp	r6, r5
   177ce:	dd0d      	ble.n	177ec <ready_thread+0x6c>
	node->prev = successor->prev;
   177d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   177d2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   177d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   177d8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   177da:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   177dc:	2000      	movs	r0, #0
   177de:	f063 037f 	orn	r3, r3, #127	; 0x7f
   177e2:	7363      	strb	r3, [r4, #13]
}
   177e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   177e8:	f7ff bf34 	b.w	17654 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   177ec:	428b      	cmp	r3, r1
   177ee:	d002      	beq.n	177f6 <ready_thread+0x76>
   177f0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   177f2:	2b00      	cmp	r3, #0
   177f4:	d1e8      	bne.n	177c8 <ready_thread+0x48>
	node->prev = list->tail;
   177f6:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   177fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   177fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   177fe:	6314      	str	r4, [r2, #48]	; 0x30
}
   17800:	e7eb      	b.n	177da <ready_thread+0x5a>
}
   17802:	bd70      	pop	{r4, r5, r6, pc}
   17804:	2000a280 	.word	0x2000a280
   17808:	000212bb 	.word	0x000212bb
   1780c:	0001e6bc 	.word	0x0001e6bc
   17810:	2000adc4 	.word	0x2000adc4

00017814 <z_ready_thread>:
{
   17814:	b538      	push	{r3, r4, r5, lr}
   17816:	4604      	mov	r4, r0
	__asm__ volatile(
   17818:	f04f 0320 	mov.w	r3, #32
   1781c:	f3ef 8511 	mrs	r5, BASEPRI
   17820:	f383 8811 	msr	BASEPRI, r3
   17824:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17828:	4812      	ldr	r0, [pc, #72]	; (17874 <z_ready_thread+0x60>)
   1782a:	f000 ffa1 	bl	18770 <z_spin_lock_valid>
   1782e:	b940      	cbnz	r0, 17842 <z_ready_thread+0x2e>
   17830:	4911      	ldr	r1, [pc, #68]	; (17878 <z_ready_thread+0x64>)
   17832:	4812      	ldr	r0, [pc, #72]	; (1787c <z_ready_thread+0x68>)
   17834:	227c      	movs	r2, #124	; 0x7c
   17836:	f001 ff6f 	bl	19718 <printk>
   1783a:	217c      	movs	r1, #124	; 0x7c
   1783c:	480e      	ldr	r0, [pc, #56]	; (17878 <z_ready_thread+0x64>)
   1783e:	f002 fa11 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17842:	480c      	ldr	r0, [pc, #48]	; (17874 <z_ready_thread+0x60>)
   17844:	f000 ffb0 	bl	187a8 <z_spin_lock_set_owner>
		ready_thread(thread);
   17848:	4620      	mov	r0, r4
   1784a:	f7ff ff99 	bl	17780 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1784e:	4809      	ldr	r0, [pc, #36]	; (17874 <z_ready_thread+0x60>)
   17850:	f000 ff9c 	bl	1878c <z_spin_unlock_valid>
   17854:	b940      	cbnz	r0, 17868 <z_ready_thread+0x54>
   17856:	4908      	ldr	r1, [pc, #32]	; (17878 <z_ready_thread+0x64>)
   17858:	4808      	ldr	r0, [pc, #32]	; (1787c <z_ready_thread+0x68>)
   1785a:	22a7      	movs	r2, #167	; 0xa7
   1785c:	f001 ff5c 	bl	19718 <printk>
   17860:	21a7      	movs	r1, #167	; 0xa7
   17862:	4805      	ldr	r0, [pc, #20]	; (17878 <z_ready_thread+0x64>)
   17864:	f002 f9fe 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17868:	f385 8811 	msr	BASEPRI, r5
   1786c:	f3bf 8f6f 	isb	sy
}
   17870:	bd38      	pop	{r3, r4, r5, pc}
   17872:	bf00      	nop
   17874:	2000adfc 	.word	0x2000adfc
   17878:	0001e6f6 	.word	0x0001e6f6
   1787c:	0001e6bc 	.word	0x0001e6bc

00017880 <z_sched_start>:
{
   17880:	b538      	push	{r3, r4, r5, lr}
   17882:	4604      	mov	r4, r0
	__asm__ volatile(
   17884:	f04f 0320 	mov.w	r3, #32
   17888:	f3ef 8511 	mrs	r5, BASEPRI
   1788c:	f383 8811 	msr	BASEPRI, r3
   17890:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17894:	4818      	ldr	r0, [pc, #96]	; (178f8 <z_sched_start+0x78>)
   17896:	f000 ff6b 	bl	18770 <z_spin_lock_valid>
   1789a:	b940      	cbnz	r0, 178ae <z_sched_start+0x2e>
   1789c:	4917      	ldr	r1, [pc, #92]	; (178fc <z_sched_start+0x7c>)
   1789e:	4818      	ldr	r0, [pc, #96]	; (17900 <z_sched_start+0x80>)
   178a0:	227c      	movs	r2, #124	; 0x7c
   178a2:	f001 ff39 	bl	19718 <printk>
   178a6:	217c      	movs	r1, #124	; 0x7c
   178a8:	4814      	ldr	r0, [pc, #80]	; (178fc <z_sched_start+0x7c>)
   178aa:	f002 f9db 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   178ae:	4812      	ldr	r0, [pc, #72]	; (178f8 <z_sched_start+0x78>)
   178b0:	f000 ff7a 	bl	187a8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   178b4:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   178b6:	075a      	lsls	r2, r3, #29
   178b8:	d411      	bmi.n	178de <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   178ba:	480f      	ldr	r0, [pc, #60]	; (178f8 <z_sched_start+0x78>)
   178bc:	f000 ff66 	bl	1878c <z_spin_unlock_valid>
   178c0:	b940      	cbnz	r0, 178d4 <z_sched_start+0x54>
   178c2:	490e      	ldr	r1, [pc, #56]	; (178fc <z_sched_start+0x7c>)
   178c4:	480e      	ldr	r0, [pc, #56]	; (17900 <z_sched_start+0x80>)
   178c6:	22a7      	movs	r2, #167	; 0xa7
   178c8:	f001 ff26 	bl	19718 <printk>
   178cc:	21a7      	movs	r1, #167	; 0xa7
   178ce:	480b      	ldr	r0, [pc, #44]	; (178fc <z_sched_start+0x7c>)
   178d0:	f002 f9c8 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   178d4:	f385 8811 	msr	BASEPRI, r5
   178d8:	f3bf 8f6f 	isb	sy
}
   178dc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   178de:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   178e2:	4620      	mov	r0, r4
   178e4:	7363      	strb	r3, [r4, #13]
   178e6:	f7ff ff4b 	bl	17780 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   178ea:	4629      	mov	r1, r5
}
   178ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   178f0:	4801      	ldr	r0, [pc, #4]	; (178f8 <z_sched_start+0x78>)
   178f2:	f7ff bdbb 	b.w	1746c <z_reschedule>
   178f6:	bf00      	nop
   178f8:	2000adfc 	.word	0x2000adfc
   178fc:	0001e6f6 	.word	0x0001e6f6
   17900:	0001e6bc 	.word	0x0001e6bc

00017904 <z_thread_timeout>:
{
   17904:	b570      	push	{r4, r5, r6, lr}
   17906:	4604      	mov	r4, r0
	__asm__ volatile(
   17908:	f04f 0320 	mov.w	r3, #32
   1790c:	f3ef 8611 	mrs	r6, BASEPRI
   17910:	f383 8811 	msr	BASEPRI, r3
   17914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17918:	4819      	ldr	r0, [pc, #100]	; (17980 <z_thread_timeout+0x7c>)
   1791a:	f000 ff29 	bl	18770 <z_spin_lock_valid>
   1791e:	b940      	cbnz	r0, 17932 <z_thread_timeout+0x2e>
   17920:	4918      	ldr	r1, [pc, #96]	; (17984 <z_thread_timeout+0x80>)
   17922:	4819      	ldr	r0, [pc, #100]	; (17988 <z_thread_timeout+0x84>)
   17924:	227c      	movs	r2, #124	; 0x7c
   17926:	f001 fef7 	bl	19718 <printk>
   1792a:	217c      	movs	r1, #124	; 0x7c
   1792c:	4815      	ldr	r0, [pc, #84]	; (17984 <z_thread_timeout+0x80>)
   1792e:	f002 f999 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17932:	4813      	ldr	r0, [pc, #76]	; (17980 <z_thread_timeout+0x7c>)
   17934:	f000 ff38 	bl	187a8 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   17938:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1793c:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   17940:	b113      	cbz	r3, 17948 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   17942:	4628      	mov	r0, r5
   17944:	f005 fab9 	bl	1ceba <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17948:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   1794c:	4628      	mov	r0, r5
   1794e:	f023 0314 	bic.w	r3, r3, #20
   17952:	f804 3c0b 	strb.w	r3, [r4, #-11]
   17956:	f7ff ff13 	bl	17780 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1795a:	4809      	ldr	r0, [pc, #36]	; (17980 <z_thread_timeout+0x7c>)
   1795c:	f000 ff16 	bl	1878c <z_spin_unlock_valid>
   17960:	b940      	cbnz	r0, 17974 <z_thread_timeout+0x70>
   17962:	4908      	ldr	r1, [pc, #32]	; (17984 <z_thread_timeout+0x80>)
   17964:	4808      	ldr	r0, [pc, #32]	; (17988 <z_thread_timeout+0x84>)
   17966:	22a7      	movs	r2, #167	; 0xa7
   17968:	f001 fed6 	bl	19718 <printk>
   1796c:	21a7      	movs	r1, #167	; 0xa7
   1796e:	4805      	ldr	r0, [pc, #20]	; (17984 <z_thread_timeout+0x80>)
   17970:	f002 f978 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17974:	f386 8811 	msr	BASEPRI, r6
   17978:	f3bf 8f6f 	isb	sy
}
   1797c:	bd70      	pop	{r4, r5, r6, pc}
   1797e:	bf00      	nop
   17980:	2000adfc 	.word	0x2000adfc
   17984:	0001e6f6 	.word	0x0001e6f6
   17988:	0001e6bc 	.word	0x0001e6bc

0001798c <move_thread_to_end_of_prio_q>:
{
   1798c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1798e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17992:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17994:	2b00      	cmp	r3, #0
   17996:	da03      	bge.n	179a0 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17998:	4601      	mov	r1, r0
   1799a:	481d      	ldr	r0, [pc, #116]	; (17a10 <move_thread_to_end_of_prio_q+0x84>)
   1799c:	f7ff fdf4 	bl	17588 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   179a0:	4b1c      	ldr	r3, [pc, #112]	; (17a14 <move_thread_to_end_of_prio_q+0x88>)
   179a2:	429c      	cmp	r4, r3
   179a4:	d10a      	bne.n	179bc <move_thread_to_end_of_prio_q+0x30>
   179a6:	491c      	ldr	r1, [pc, #112]	; (17a18 <move_thread_to_end_of_prio_q+0x8c>)
   179a8:	481c      	ldr	r0, [pc, #112]	; (17a1c <move_thread_to_end_of_prio_q+0x90>)
   179aa:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   179ae:	f001 feb3 	bl	19718 <printk>
   179b2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   179b6:	4818      	ldr	r0, [pc, #96]	; (17a18 <move_thread_to_end_of_prio_q+0x8c>)
   179b8:	f002 f954 	bl	19c64 <assert_post_action>
	return list->head == list;
   179bc:	4a18      	ldr	r2, [pc, #96]	; (17a20 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179be:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   179c2:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179c6:	4283      	cmp	r3, r0
   179c8:	d01c      	beq.n	17a04 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   179ca:	b1db      	cbz	r3, 17a04 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   179cc:	f994 500e 	ldrsb.w	r5, [r4, #14]
   179d0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   179d4:	42ae      	cmp	r6, r5
   179d6:	dd10      	ble.n	179fa <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   179d8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   179da:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   179de:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   179e0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   179e2:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   179e4:	6890      	ldr	r0, [r2, #8]
   179e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   179ea:	7363      	strb	r3, [r4, #13]
   179ec:	1b03      	subs	r3, r0, r4
   179ee:	4258      	negs	r0, r3
   179f0:	4158      	adcs	r0, r3
}
   179f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   179f6:	f7ff be2d 	b.w	17654 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   179fa:	428b      	cmp	r3, r1
   179fc:	d002      	beq.n	17a04 <move_thread_to_end_of_prio_q+0x78>
   179fe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17a00:	2b00      	cmp	r3, #0
   17a02:	d1e5      	bne.n	179d0 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   17a04:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17a08:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17a0a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17a0c:	6314      	str	r4, [r2, #48]	; 0x30
}
   17a0e:	e7e8      	b.n	179e2 <move_thread_to_end_of_prio_q+0x56>
   17a10:	2000adf0 	.word	0x2000adf0
   17a14:	2000a280 	.word	0x2000a280
   17a18:	000212bb 	.word	0x000212bb
   17a1c:	0001e6bc 	.word	0x0001e6bc
   17a20:	2000adc4 	.word	0x2000adc4

00017a24 <z_time_slice>:
{
   17a24:	b538      	push	{r3, r4, r5, lr}
   17a26:	4604      	mov	r4, r0
	__asm__ volatile(
   17a28:	f04f 0320 	mov.w	r3, #32
   17a2c:	f3ef 8511 	mrs	r5, BASEPRI
   17a30:	f383 8811 	msr	BASEPRI, r3
   17a34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a38:	4824      	ldr	r0, [pc, #144]	; (17acc <z_time_slice+0xa8>)
   17a3a:	f000 fe99 	bl	18770 <z_spin_lock_valid>
   17a3e:	b940      	cbnz	r0, 17a52 <z_time_slice+0x2e>
   17a40:	4923      	ldr	r1, [pc, #140]	; (17ad0 <z_time_slice+0xac>)
   17a42:	4824      	ldr	r0, [pc, #144]	; (17ad4 <z_time_slice+0xb0>)
   17a44:	227c      	movs	r2, #124	; 0x7c
   17a46:	f001 fe67 	bl	19718 <printk>
   17a4a:	217c      	movs	r1, #124	; 0x7c
   17a4c:	4820      	ldr	r0, [pc, #128]	; (17ad0 <z_time_slice+0xac>)
   17a4e:	f002 f909 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17a52:	481e      	ldr	r0, [pc, #120]	; (17acc <z_time_slice+0xa8>)
   17a54:	f000 fea8 	bl	187a8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   17a58:	4b1f      	ldr	r3, [pc, #124]	; (17ad8 <z_time_slice+0xb4>)
   17a5a:	4a20      	ldr	r2, [pc, #128]	; (17adc <z_time_slice+0xb8>)
   17a5c:	6898      	ldr	r0, [r3, #8]
   17a5e:	6811      	ldr	r1, [r2, #0]
   17a60:	4288      	cmp	r0, r1
   17a62:	d113      	bne.n	17a8c <z_time_slice+0x68>
			z_reset_time_slice();
   17a64:	f7ff fc9e 	bl	173a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a68:	4818      	ldr	r0, [pc, #96]	; (17acc <z_time_slice+0xa8>)
   17a6a:	f000 fe8f 	bl	1878c <z_spin_unlock_valid>
   17a6e:	b940      	cbnz	r0, 17a82 <z_time_slice+0x5e>
   17a70:	4917      	ldr	r1, [pc, #92]	; (17ad0 <z_time_slice+0xac>)
   17a72:	4818      	ldr	r0, [pc, #96]	; (17ad4 <z_time_slice+0xb0>)
   17a74:	22a7      	movs	r2, #167	; 0xa7
   17a76:	f001 fe4f 	bl	19718 <printk>
   17a7a:	21a7      	movs	r1, #167	; 0xa7
   17a7c:	4814      	ldr	r0, [pc, #80]	; (17ad0 <z_time_slice+0xac>)
   17a7e:	f002 f8f1 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17a82:	f385 8811 	msr	BASEPRI, r5
   17a86:	f3bf 8f6f 	isb	sy
}
   17a8a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   17a8c:	2100      	movs	r1, #0
   17a8e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   17a90:	4a13      	ldr	r2, [pc, #76]	; (17ae0 <z_time_slice+0xbc>)
   17a92:	6812      	ldr	r2, [r2, #0]
   17a94:	b1ba      	cbz	r2, 17ac6 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17a96:	89c2      	ldrh	r2, [r0, #14]
   17a98:	2a7f      	cmp	r2, #127	; 0x7f
   17a9a:	d814      	bhi.n	17ac6 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   17a9c:	7b42      	ldrb	r2, [r0, #13]
   17a9e:	06d2      	lsls	r2, r2, #27
   17aa0:	d111      	bne.n	17ac6 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17aa2:	4a10      	ldr	r2, [pc, #64]	; (17ae4 <z_time_slice+0xc0>)
   17aa4:	f990 100e 	ldrsb.w	r1, [r0, #14]
   17aa8:	6812      	ldr	r2, [r2, #0]
   17aaa:	4291      	cmp	r1, r2
   17aac:	db0b      	blt.n	17ac6 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17aae:	4a0e      	ldr	r2, [pc, #56]	; (17ae8 <z_time_slice+0xc4>)
   17ab0:	4290      	cmp	r0, r2
   17ab2:	d008      	beq.n	17ac6 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   17ab4:	695a      	ldr	r2, [r3, #20]
   17ab6:	42a2      	cmp	r2, r4
   17ab8:	dc02      	bgt.n	17ac0 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   17aba:	f7ff ff67 	bl	1798c <move_thread_to_end_of_prio_q>
   17abe:	e7d1      	b.n	17a64 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   17ac0:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   17ac2:	615a      	str	r2, [r3, #20]
   17ac4:	e7d0      	b.n	17a68 <z_time_slice+0x44>
   17ac6:	2200      	movs	r2, #0
   17ac8:	e7fb      	b.n	17ac2 <z_time_slice+0x9e>
   17aca:	bf00      	nop
   17acc:	2000adfc 	.word	0x2000adfc
   17ad0:	0001e6f6 	.word	0x0001e6f6
   17ad4:	0001e6bc 	.word	0x0001e6bc
   17ad8:	2000adc4 	.word	0x2000adc4
   17adc:	2000adf8 	.word	0x2000adf8
   17ae0:	2000ae04 	.word	0x2000ae04
   17ae4:	2000ae00 	.word	0x2000ae00
   17ae8:	2000a280 	.word	0x2000a280

00017aec <z_impl_k_thread_suspend>:
{
   17aec:	b570      	push	{r4, r5, r6, lr}
   17aee:	4604      	mov	r4, r0
   17af0:	3018      	adds	r0, #24
   17af2:	f001 f881 	bl	18bf8 <z_abort_timeout>
	__asm__ volatile(
   17af6:	f04f 0320 	mov.w	r3, #32
   17afa:	f3ef 8611 	mrs	r6, BASEPRI
   17afe:	f383 8811 	msr	BASEPRI, r3
   17b02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b06:	4820      	ldr	r0, [pc, #128]	; (17b88 <z_impl_k_thread_suspend+0x9c>)
   17b08:	f000 fe32 	bl	18770 <z_spin_lock_valid>
   17b0c:	b940      	cbnz	r0, 17b20 <z_impl_k_thread_suspend+0x34>
   17b0e:	491f      	ldr	r1, [pc, #124]	; (17b8c <z_impl_k_thread_suspend+0xa0>)
   17b10:	481f      	ldr	r0, [pc, #124]	; (17b90 <z_impl_k_thread_suspend+0xa4>)
   17b12:	227c      	movs	r2, #124	; 0x7c
   17b14:	f001 fe00 	bl	19718 <printk>
   17b18:	217c      	movs	r1, #124	; 0x7c
   17b1a:	481c      	ldr	r0, [pc, #112]	; (17b8c <z_impl_k_thread_suspend+0xa0>)
   17b1c:	f002 f8a2 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17b20:	4819      	ldr	r0, [pc, #100]	; (17b88 <z_impl_k_thread_suspend+0x9c>)
   17b22:	f000 fe41 	bl	187a8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17b26:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17b2a:	2b00      	cmp	r3, #0
   17b2c:	da07      	bge.n	17b3e <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17b2e:	4621      	mov	r1, r4
   17b30:	4818      	ldr	r0, [pc, #96]	; (17b94 <z_impl_k_thread_suspend+0xa8>)
   17b32:	f7ff fd29 	bl	17588 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17b36:	7b63      	ldrb	r3, [r4, #13]
   17b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17b3c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17b3e:	4d16      	ldr	r5, [pc, #88]	; (17b98 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17b40:	7b63      	ldrb	r3, [r4, #13]
   17b42:	68a8      	ldr	r0, [r5, #8]
   17b44:	f043 0310 	orr.w	r3, r3, #16
   17b48:	7363      	strb	r3, [r4, #13]
   17b4a:	1b03      	subs	r3, r0, r4
   17b4c:	4258      	negs	r0, r3
   17b4e:	4158      	adcs	r0, r3
   17b50:	f7ff fd80 	bl	17654 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17b54:	480c      	ldr	r0, [pc, #48]	; (17b88 <z_impl_k_thread_suspend+0x9c>)
   17b56:	f000 fe19 	bl	1878c <z_spin_unlock_valid>
   17b5a:	b940      	cbnz	r0, 17b6e <z_impl_k_thread_suspend+0x82>
   17b5c:	490b      	ldr	r1, [pc, #44]	; (17b8c <z_impl_k_thread_suspend+0xa0>)
   17b5e:	480c      	ldr	r0, [pc, #48]	; (17b90 <z_impl_k_thread_suspend+0xa4>)
   17b60:	22a7      	movs	r2, #167	; 0xa7
   17b62:	f001 fdd9 	bl	19718 <printk>
   17b66:	21a7      	movs	r1, #167	; 0xa7
   17b68:	4808      	ldr	r0, [pc, #32]	; (17b8c <z_impl_k_thread_suspend+0xa0>)
   17b6a:	f002 f87b 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17b6e:	f386 8811 	msr	BASEPRI, r6
   17b72:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17b76:	68ab      	ldr	r3, [r5, #8]
   17b78:	42a3      	cmp	r3, r4
   17b7a:	d103      	bne.n	17b84 <z_impl_k_thread_suspend+0x98>
}
   17b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17b80:	f005 b991 	b.w	1cea6 <z_reschedule_unlocked>
}
   17b84:	bd70      	pop	{r4, r5, r6, pc}
   17b86:	bf00      	nop
   17b88:	2000adfc 	.word	0x2000adfc
   17b8c:	0001e6f6 	.word	0x0001e6f6
   17b90:	0001e6bc 	.word	0x0001e6bc
   17b94:	2000adf0 	.word	0x2000adf0
   17b98:	2000adc4 	.word	0x2000adc4

00017b9c <z_thread_single_abort>:
{
   17b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17ba0:	7b03      	ldrb	r3, [r0, #12]
{
   17ba2:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17ba4:	07dd      	lsls	r5, r3, #31
   17ba6:	d50a      	bpl.n	17bbe <z_thread_single_abort+0x22>
   17ba8:	4976      	ldr	r1, [pc, #472]	; (17d84 <z_thread_single_abort+0x1e8>)
   17baa:	4877      	ldr	r0, [pc, #476]	; (17d88 <z_thread_single_abort+0x1ec>)
   17bac:	f240 220d 	movw	r2, #525	; 0x20d
   17bb0:	f001 fdb2 	bl	19718 <printk>
   17bb4:	f240 210d 	movw	r1, #525	; 0x20d
   17bb8:	4872      	ldr	r0, [pc, #456]	; (17d84 <z_thread_single_abort+0x1e8>)
   17bba:	f002 f853 	bl	19c64 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   17bbe:	4e73      	ldr	r6, [pc, #460]	; (17d8c <z_thread_single_abort+0x1f0>)
   17bc0:	68b3      	ldr	r3, [r6, #8]
   17bc2:	42a3      	cmp	r3, r4
   17bc4:	d10d      	bne.n	17be2 <z_thread_single_abort+0x46>
   17bc6:	f3ef 8305 	mrs	r3, IPSR
   17bca:	b953      	cbnz	r3, 17be2 <z_thread_single_abort+0x46>
   17bcc:	496d      	ldr	r1, [pc, #436]	; (17d84 <z_thread_single_abort+0x1e8>)
   17bce:	486e      	ldr	r0, [pc, #440]	; (17d88 <z_thread_single_abort+0x1ec>)
   17bd0:	f240 220f 	movw	r2, #527	; 0x20f
   17bd4:	f001 fda0 	bl	19718 <printk>
   17bd8:	f240 210f 	movw	r1, #527	; 0x20f
   17bdc:	4869      	ldr	r0, [pc, #420]	; (17d84 <z_thread_single_abort+0x1e8>)
   17bde:	f002 f841 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17be2:	f04f 0320 	mov.w	r3, #32
   17be6:	f3ef 8511 	mrs	r5, BASEPRI
   17bea:	f383 8811 	msr	BASEPRI, r3
   17bee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17bf2:	4867      	ldr	r0, [pc, #412]	; (17d90 <z_thread_single_abort+0x1f4>)
   17bf4:	f000 fdbc 	bl	18770 <z_spin_lock_valid>
   17bf8:	b940      	cbnz	r0, 17c0c <z_thread_single_abort+0x70>
   17bfa:	4966      	ldr	r1, [pc, #408]	; (17d94 <z_thread_single_abort+0x1f8>)
   17bfc:	4862      	ldr	r0, [pc, #392]	; (17d88 <z_thread_single_abort+0x1ec>)
   17bfe:	227c      	movs	r2, #124	; 0x7c
   17c00:	f001 fd8a 	bl	19718 <printk>
   17c04:	217c      	movs	r1, #124	; 0x7c
   17c06:	4863      	ldr	r0, [pc, #396]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c08:	f002 f82c 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c0c:	4860      	ldr	r0, [pc, #384]	; (17d90 <z_thread_single_abort+0x1f4>)
   17c0e:	f000 fdcb 	bl	187a8 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   17c12:	7b63      	ldrb	r3, [r4, #13]
   17c14:	f013 0f28 	tst.w	r3, #40	; 0x28
   17c18:	d012      	beq.n	17c40 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c1a:	485d      	ldr	r0, [pc, #372]	; (17d90 <z_thread_single_abort+0x1f4>)
   17c1c:	f000 fdb6 	bl	1878c <z_spin_unlock_valid>
   17c20:	b940      	cbnz	r0, 17c34 <z_thread_single_abort+0x98>
   17c22:	495c      	ldr	r1, [pc, #368]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c24:	4858      	ldr	r0, [pc, #352]	; (17d88 <z_thread_single_abort+0x1ec>)
   17c26:	22a7      	movs	r2, #167	; 0xa7
   17c28:	f001 fd76 	bl	19718 <printk>
   17c2c:	21a7      	movs	r1, #167	; 0xa7
   17c2e:	4859      	ldr	r0, [pc, #356]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c30:	f002 f818 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17c34:	f385 8811 	msr	BASEPRI, r5
   17c38:	f3bf 8f6f 	isb	sy
}
   17c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   17c40:	f043 0320 	orr.w	r3, r3, #32
   17c44:	4852      	ldr	r0, [pc, #328]	; (17d90 <z_thread_single_abort+0x1f4>)
   17c46:	7363      	strb	r3, [r4, #13]
   17c48:	f000 fda0 	bl	1878c <z_spin_unlock_valid>
   17c4c:	b940      	cbnz	r0, 17c60 <z_thread_single_abort+0xc4>
   17c4e:	4951      	ldr	r1, [pc, #324]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c50:	484d      	ldr	r0, [pc, #308]	; (17d88 <z_thread_single_abort+0x1ec>)
   17c52:	22a7      	movs	r2, #167	; 0xa7
   17c54:	f001 fd60 	bl	19718 <printk>
   17c58:	21a7      	movs	r1, #167	; 0xa7
   17c5a:	484e      	ldr	r0, [pc, #312]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c5c:	f002 f802 	bl	19c64 <assert_post_action>
   17c60:	f385 8811 	msr	BASEPRI, r5
   17c64:	f3bf 8f6f 	isb	sy
   17c68:	f104 0018 	add.w	r0, r4, #24
   17c6c:	f000 ffc4 	bl	18bf8 <z_abort_timeout>
	__asm__ volatile(
   17c70:	f04f 0320 	mov.w	r3, #32
   17c74:	f3ef 8711 	mrs	r7, BASEPRI
   17c78:	f383 8811 	msr	BASEPRI, r3
   17c7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c80:	4843      	ldr	r0, [pc, #268]	; (17d90 <z_thread_single_abort+0x1f4>)
   17c82:	f000 fd75 	bl	18770 <z_spin_lock_valid>
   17c86:	b940      	cbnz	r0, 17c9a <z_thread_single_abort+0xfe>
   17c88:	4942      	ldr	r1, [pc, #264]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c8a:	483f      	ldr	r0, [pc, #252]	; (17d88 <z_thread_single_abort+0x1ec>)
   17c8c:	227c      	movs	r2, #124	; 0x7c
   17c8e:	f001 fd43 	bl	19718 <printk>
   17c92:	217c      	movs	r1, #124	; 0x7c
   17c94:	483f      	ldr	r0, [pc, #252]	; (17d94 <z_thread_single_abort+0x1f8>)
   17c96:	f001 ffe5 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c9a:	483d      	ldr	r0, [pc, #244]	; (17d90 <z_thread_single_abort+0x1f4>)
   17c9c:	f000 fd84 	bl	187a8 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   17ca0:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17ca2:	06d8      	lsls	r0, r3, #27
   17ca4:	d116      	bne.n	17cd4 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   17ca6:	69a2      	ldr	r2, [r4, #24]
   17ca8:	b9a2      	cbnz	r2, 17cd4 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   17caa:	0619      	lsls	r1, r3, #24
   17cac:	d507      	bpl.n	17cbe <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   17cae:	4621      	mov	r1, r4
   17cb0:	4839      	ldr	r0, [pc, #228]	; (17d98 <z_thread_single_abort+0x1fc>)
   17cb2:	f7ff fc69 	bl	17588 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17cb6:	7b63      	ldrb	r3, [r4, #13]
   17cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17cbc:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   17cbe:	68b0      	ldr	r0, [r6, #8]
   17cc0:	1b02      	subs	r2, r0, r4
   17cc2:	4250      	negs	r0, r2
   17cc4:	4150      	adcs	r0, r2
   17cc6:	f7ff fcc5 	bl	17654 <update_cache>
			waiter->base.pended_on = NULL;
   17cca:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   17cce:	f104 0930 	add.w	r9, r4, #48	; 0x30
   17cd2:	e023      	b.n	17d1c <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   17cd4:	079b      	lsls	r3, r3, #30
   17cd6:	d5f8      	bpl.n	17cca <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   17cd8:	4620      	mov	r0, r4
   17cda:	f7ff fb4d 	bl	17378 <pended_on>
   17cde:	4621      	mov	r1, r4
   17ce0:	f7ff fc52 	bl	17588 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17ce4:	7b63      	ldrb	r3, [r4, #13]
   17ce6:	f023 0302 	bic.w	r3, r3, #2
   17cea:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   17cec:	2300      	movs	r3, #0
   17cee:	60a3      	str	r3, [r4, #8]
   17cf0:	e7eb      	b.n	17cca <z_thread_single_abort+0x12e>
   17cf2:	f105 0018 	add.w	r0, r5, #24
   17cf6:	f000 ff7f 	bl	18bf8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   17cfa:	4628      	mov	r0, r5
   17cfc:	f7ff fb3c 	bl	17378 <pended_on>
   17d00:	4629      	mov	r1, r5
   17d02:	f7ff fc41 	bl	17588 <z_priq_dumb_remove>
   17d06:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   17d08:	4628      	mov	r0, r5
   17d0a:	f023 0302 	bic.w	r3, r3, #2
   17d0e:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   17d10:	f8c5 8008 	str.w	r8, [r5, #8]
   17d14:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   17d18:	f7ff fd32 	bl	17780 <ready_thread>
	return list->head == list;
   17d1c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d1e:	454d      	cmp	r5, r9
   17d20:	d001      	beq.n	17d26 <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   17d22:	2d00      	cmp	r5, #0
   17d24:	d1e5      	bne.n	17cf2 <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   17d26:	68b2      	ldr	r2, [r6, #8]
   17d28:	4b1c      	ldr	r3, [pc, #112]	; (17d9c <z_thread_single_abort+0x200>)
   17d2a:	429a      	cmp	r2, r3
   17d2c:	d102      	bne.n	17d34 <z_thread_single_abort+0x198>
			update_cache(1);
   17d2e:	2001      	movs	r0, #1
   17d30:	f7ff fc90 	bl	17654 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17d34:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   17d36:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   17d38:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   17d3a:	f043 0308 	orr.w	r3, r3, #8
   17d3e:	7363      	strb	r3, [r4, #13]
   17d40:	f104 0338 	add.w	r3, r4, #56	; 0x38
   17d44:	e8d3 1fef 	ldaex	r1, [r3]
   17d48:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17d4c:	2800      	cmp	r0, #0
   17d4e:	d1f9      	bne.n	17d44 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d50:	480f      	ldr	r0, [pc, #60]	; (17d90 <z_thread_single_abort+0x1f4>)
   17d52:	f000 fd1b 	bl	1878c <z_spin_unlock_valid>
   17d56:	b940      	cbnz	r0, 17d6a <z_thread_single_abort+0x1ce>
   17d58:	490e      	ldr	r1, [pc, #56]	; (17d94 <z_thread_single_abort+0x1f8>)
   17d5a:	480b      	ldr	r0, [pc, #44]	; (17d88 <z_thread_single_abort+0x1ec>)
   17d5c:	22a7      	movs	r2, #167	; 0xa7
   17d5e:	f001 fcdb 	bl	19718 <printk>
   17d62:	21a7      	movs	r1, #167	; 0xa7
   17d64:	480b      	ldr	r0, [pc, #44]	; (17d94 <z_thread_single_abort+0x1f8>)
   17d66:	f001 ff7d 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17d6a:	f387 8811 	msr	BASEPRI, r7
   17d6e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   17d72:	2d00      	cmp	r5, #0
   17d74:	f43f af62 	beq.w	17c3c <z_thread_single_abort+0xa0>
		fn_abort(thread);
   17d78:	4620      	mov	r0, r4
   17d7a:	462b      	mov	r3, r5
}
   17d7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   17d80:	4718      	bx	r3
   17d82:	bf00      	nop
   17d84:	000212bb 	.word	0x000212bb
   17d88:	0001e6bc 	.word	0x0001e6bc
   17d8c:	2000adc4 	.word	0x2000adc4
   17d90:	2000adfc 	.word	0x2000adfc
   17d94:	0001e6f6 	.word	0x0001e6f6
   17d98:	2000adf0 	.word	0x2000adf0
   17d9c:	2000a280 	.word	0x2000a280

00017da0 <unready_thread>:
{
   17da0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   17da2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17da6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17da8:	2b00      	cmp	r3, #0
   17daa:	da07      	bge.n	17dbc <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17dac:	4601      	mov	r1, r0
   17dae:	4808      	ldr	r0, [pc, #32]	; (17dd0 <unready_thread+0x30>)
   17db0:	f7ff fbea 	bl	17588 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17db4:	7b63      	ldrb	r3, [r4, #13]
   17db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17dba:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   17dbc:	4b05      	ldr	r3, [pc, #20]	; (17dd4 <unready_thread+0x34>)
   17dbe:	6898      	ldr	r0, [r3, #8]
   17dc0:	1b03      	subs	r3, r0, r4
   17dc2:	4258      	negs	r0, r3
   17dc4:	4158      	adcs	r0, r3
}
   17dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   17dca:	f7ff bc43 	b.w	17654 <update_cache>
   17dce:	bf00      	nop
   17dd0:	2000adf0 	.word	0x2000adf0
   17dd4:	2000adc4 	.word	0x2000adc4

00017dd8 <add_to_waitq_locked>:
{
   17dd8:	b538      	push	{r3, r4, r5, lr}
   17dda:	4604      	mov	r4, r0
   17ddc:	460d      	mov	r5, r1
	unready_thread(thread);
   17dde:	f7ff ffdf 	bl	17da0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   17de2:	7b63      	ldrb	r3, [r4, #13]
   17de4:	f043 0302 	orr.w	r3, r3, #2
   17de8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   17dea:	b1ed      	cbz	r5, 17e28 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17dec:	4b15      	ldr	r3, [pc, #84]	; (17e44 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   17dee:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17df0:	429c      	cmp	r4, r3
   17df2:	d10a      	bne.n	17e0a <add_to_waitq_locked+0x32>
   17df4:	4914      	ldr	r1, [pc, #80]	; (17e48 <add_to_waitq_locked+0x70>)
   17df6:	4815      	ldr	r0, [pc, #84]	; (17e4c <add_to_waitq_locked+0x74>)
   17df8:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17dfc:	f001 fc8c 	bl	19718 <printk>
   17e00:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17e04:	4810      	ldr	r0, [pc, #64]	; (17e48 <add_to_waitq_locked+0x70>)
   17e06:	f001 ff2d 	bl	19c64 <assert_post_action>
	return list->head == list;
   17e0a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e0c:	429d      	cmp	r5, r3
   17e0e:	d012      	beq.n	17e36 <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17e10:	b18b      	cbz	r3, 17e36 <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   17e12:	f994 200e 	ldrsb.w	r2, [r4, #14]
   17e16:	f993 100e 	ldrsb.w	r1, [r3, #14]
   17e1a:	4291      	cmp	r1, r2
   17e1c:	dd05      	ble.n	17e2a <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   17e1e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17e20:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17e24:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17e26:	605c      	str	r4, [r3, #4]
}
   17e28:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   17e2a:	6869      	ldr	r1, [r5, #4]
   17e2c:	428b      	cmp	r3, r1
   17e2e:	d002      	beq.n	17e36 <add_to_waitq_locked+0x5e>
   17e30:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17e32:	2b00      	cmp	r3, #0
   17e34:	d1ef      	bne.n	17e16 <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   17e36:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   17e38:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   17e3a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   17e3c:	686b      	ldr	r3, [r5, #4]
   17e3e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17e40:	606c      	str	r4, [r5, #4]
}
   17e42:	e7f1      	b.n	17e28 <add_to_waitq_locked+0x50>
   17e44:	2000a280 	.word	0x2000a280
   17e48:	000212bb 	.word	0x000212bb
   17e4c:	0001e6bc 	.word	0x0001e6bc

00017e50 <pend>:
{
   17e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e54:	4604      	mov	r4, r0
   17e56:	4688      	mov	r8, r1
   17e58:	4616      	mov	r6, r2
   17e5a:	461d      	mov	r5, r3
	__asm__ volatile(
   17e5c:	f04f 0320 	mov.w	r3, #32
   17e60:	f3ef 8711 	mrs	r7, BASEPRI
   17e64:	f383 8811 	msr	BASEPRI, r3
   17e68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e6c:	481a      	ldr	r0, [pc, #104]	; (17ed8 <pend+0x88>)
   17e6e:	f000 fc7f 	bl	18770 <z_spin_lock_valid>
   17e72:	b940      	cbnz	r0, 17e86 <pend+0x36>
   17e74:	4919      	ldr	r1, [pc, #100]	; (17edc <pend+0x8c>)
   17e76:	481a      	ldr	r0, [pc, #104]	; (17ee0 <pend+0x90>)
   17e78:	227c      	movs	r2, #124	; 0x7c
   17e7a:	f001 fc4d 	bl	19718 <printk>
   17e7e:	217c      	movs	r1, #124	; 0x7c
   17e80:	4816      	ldr	r0, [pc, #88]	; (17edc <pend+0x8c>)
   17e82:	f001 feef 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e86:	4814      	ldr	r0, [pc, #80]	; (17ed8 <pend+0x88>)
   17e88:	f000 fc8e 	bl	187a8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   17e8c:	4620      	mov	r0, r4
   17e8e:	4641      	mov	r1, r8
   17e90:	f7ff ffa2 	bl	17dd8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e94:	4810      	ldr	r0, [pc, #64]	; (17ed8 <pend+0x88>)
   17e96:	f000 fc79 	bl	1878c <z_spin_unlock_valid>
   17e9a:	b940      	cbnz	r0, 17eae <pend+0x5e>
   17e9c:	490f      	ldr	r1, [pc, #60]	; (17edc <pend+0x8c>)
   17e9e:	4810      	ldr	r0, [pc, #64]	; (17ee0 <pend+0x90>)
   17ea0:	22a7      	movs	r2, #167	; 0xa7
   17ea2:	f001 fc39 	bl	19718 <printk>
   17ea6:	21a7      	movs	r1, #167	; 0xa7
   17ea8:	480c      	ldr	r0, [pc, #48]	; (17edc <pend+0x8c>)
   17eaa:	f001 fedb 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17eae:	f387 8811 	msr	BASEPRI, r7
   17eb2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17eb6:	f1b5 3fff 	cmp.w	r5, #4294967295
   17eba:	bf08      	it	eq
   17ebc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17ec0:	d008      	beq.n	17ed4 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   17ec2:	4632      	mov	r2, r6
   17ec4:	462b      	mov	r3, r5
   17ec6:	f104 0018 	add.w	r0, r4, #24
   17eca:	4906      	ldr	r1, [pc, #24]	; (17ee4 <pend+0x94>)
}
   17ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17ed0:	f000 bde2 	b.w	18a98 <z_add_timeout>
   17ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ed8:	2000adfc 	.word	0x2000adfc
   17edc:	0001e6f6 	.word	0x0001e6f6
   17ee0:	0001e6bc 	.word	0x0001e6bc
   17ee4:	00017905 	.word	0x00017905

00017ee8 <z_pend_curr>:
{
   17ee8:	b538      	push	{r3, r4, r5, lr}
   17eea:	4605      	mov	r5, r0
	pending_current = _current;
   17eec:	4b0d      	ldr	r3, [pc, #52]	; (17f24 <z_pend_curr+0x3c>)
{
   17eee:	460c      	mov	r4, r1
	pending_current = _current;
   17ef0:	6898      	ldr	r0, [r3, #8]
   17ef2:	4b0d      	ldr	r3, [pc, #52]	; (17f28 <z_pend_curr+0x40>)
{
   17ef4:	4611      	mov	r1, r2
	pending_current = _current;
   17ef6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   17ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17efc:	f7ff ffa8 	bl	17e50 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f00:	4628      	mov	r0, r5
   17f02:	f000 fc43 	bl	1878c <z_spin_unlock_valid>
   17f06:	b940      	cbnz	r0, 17f1a <z_pend_curr+0x32>
   17f08:	4908      	ldr	r1, [pc, #32]	; (17f2c <z_pend_curr+0x44>)
   17f0a:	4809      	ldr	r0, [pc, #36]	; (17f30 <z_pend_curr+0x48>)
   17f0c:	22be      	movs	r2, #190	; 0xbe
   17f0e:	f001 fc03 	bl	19718 <printk>
   17f12:	21be      	movs	r1, #190	; 0xbe
   17f14:	4805      	ldr	r0, [pc, #20]	; (17f2c <z_pend_curr+0x44>)
   17f16:	f001 fea5 	bl	19c64 <assert_post_action>
   17f1a:	4620      	mov	r0, r4
}
   17f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17f20:	f7f4 bd80 	b.w	ca24 <arch_swap>
   17f24:	2000adc4 	.word	0x2000adc4
   17f28:	2000adf8 	.word	0x2000adf8
   17f2c:	0001e6f6 	.word	0x0001e6f6
   17f30:	0001e6bc 	.word	0x0001e6bc

00017f34 <z_set_prio>:
{
   17f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f36:	4604      	mov	r4, r0
   17f38:	460d      	mov	r5, r1
	__asm__ volatile(
   17f3a:	f04f 0320 	mov.w	r3, #32
   17f3e:	f3ef 8611 	mrs	r6, BASEPRI
   17f42:	f383 8811 	msr	BASEPRI, r3
   17f46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f4a:	4831      	ldr	r0, [pc, #196]	; (18010 <z_set_prio+0xdc>)
   17f4c:	f000 fc10 	bl	18770 <z_spin_lock_valid>
   17f50:	b940      	cbnz	r0, 17f64 <z_set_prio+0x30>
   17f52:	4930      	ldr	r1, [pc, #192]	; (18014 <z_set_prio+0xe0>)
   17f54:	4830      	ldr	r0, [pc, #192]	; (18018 <z_set_prio+0xe4>)
   17f56:	227c      	movs	r2, #124	; 0x7c
   17f58:	f001 fbde 	bl	19718 <printk>
   17f5c:	217c      	movs	r1, #124	; 0x7c
   17f5e:	482d      	ldr	r0, [pc, #180]	; (18014 <z_set_prio+0xe0>)
   17f60:	f001 fe80 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f64:	482a      	ldr	r0, [pc, #168]	; (18010 <z_set_prio+0xdc>)
   17f66:	f000 fc1f 	bl	187a8 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17f6a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   17f6c:	b26d      	sxtb	r5, r5
   17f6e:	06db      	lsls	r3, r3, #27
   17f70:	d14a      	bne.n	18008 <z_set_prio+0xd4>
		if (need_sched) {
   17f72:	69a3      	ldr	r3, [r4, #24]
   17f74:	2b00      	cmp	r3, #0
   17f76:	d147      	bne.n	18008 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   17f78:	4621      	mov	r1, r4
   17f7a:	4828      	ldr	r0, [pc, #160]	; (1801c <z_set_prio+0xe8>)
   17f7c:	f7ff fb04 	bl	17588 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17f80:	4b27      	ldr	r3, [pc, #156]	; (18020 <z_set_prio+0xec>)
				thread->base.prio = prio;
   17f82:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17f84:	429c      	cmp	r4, r3
   17f86:	d10a      	bne.n	17f9e <z_set_prio+0x6a>
   17f88:	4926      	ldr	r1, [pc, #152]	; (18024 <z_set_prio+0xf0>)
   17f8a:	4823      	ldr	r0, [pc, #140]	; (18018 <z_set_prio+0xe4>)
   17f8c:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17f90:	f001 fbc2 	bl	19718 <printk>
   17f94:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17f98:	4822      	ldr	r0, [pc, #136]	; (18024 <z_set_prio+0xf0>)
   17f9a:	f001 fe63 	bl	19c64 <assert_post_action>
	return list->head == list;
   17f9e:	4a22      	ldr	r2, [pc, #136]	; (18028 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fa0:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   17fa4:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fa8:	4283      	cmp	r3, r0
   17faa:	d027      	beq.n	17ffc <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17fac:	b333      	cbz	r3, 17ffc <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   17fae:	f994 500e 	ldrsb.w	r5, [r4, #14]
   17fb2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   17fb6:	42af      	cmp	r7, r5
   17fb8:	dd1b      	ble.n	17ff2 <z_set_prio+0xbe>
	node->prev = successor->prev;
   17fba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17fbc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17fc0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17fc2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   17fc4:	2001      	movs	r0, #1
   17fc6:	f7ff fb45 	bl	17654 <update_cache>
   17fca:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fcc:	4810      	ldr	r0, [pc, #64]	; (18010 <z_set_prio+0xdc>)
   17fce:	f000 fbdd 	bl	1878c <z_spin_unlock_valid>
   17fd2:	b940      	cbnz	r0, 17fe6 <z_set_prio+0xb2>
   17fd4:	490f      	ldr	r1, [pc, #60]	; (18014 <z_set_prio+0xe0>)
   17fd6:	4810      	ldr	r0, [pc, #64]	; (18018 <z_set_prio+0xe4>)
   17fd8:	22a7      	movs	r2, #167	; 0xa7
   17fda:	f001 fb9d 	bl	19718 <printk>
   17fde:	21a7      	movs	r1, #167	; 0xa7
   17fe0:	480c      	ldr	r0, [pc, #48]	; (18014 <z_set_prio+0xe0>)
   17fe2:	f001 fe3f 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   17fe6:	f386 8811 	msr	BASEPRI, r6
   17fea:	f3bf 8f6f 	isb	sy
}
   17fee:	4620      	mov	r0, r4
   17ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   17ff2:	4299      	cmp	r1, r3
   17ff4:	d002      	beq.n	17ffc <z_set_prio+0xc8>
   17ff6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17ff8:	2b00      	cmp	r3, #0
   17ffa:	d1da      	bne.n	17fb2 <z_set_prio+0x7e>
	node->prev = list->tail;
   17ffc:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18000:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18002:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18004:	6314      	str	r4, [r2, #48]	; 0x30
}
   18006:	e7dd      	b.n	17fc4 <z_set_prio+0x90>
			thread->base.prio = prio;
   18008:	73a5      	strb	r5, [r4, #14]
   1800a:	2400      	movs	r4, #0
   1800c:	e7de      	b.n	17fcc <z_set_prio+0x98>
   1800e:	bf00      	nop
   18010:	2000adfc 	.word	0x2000adfc
   18014:	0001e6f6 	.word	0x0001e6f6
   18018:	0001e6bc 	.word	0x0001e6bc
   1801c:	2000adf0 	.word	0x2000adf0
   18020:	2000a280 	.word	0x2000a280
   18024:	000212bb 	.word	0x000212bb
   18028:	2000adc4 	.word	0x2000adc4

0001802c <z_unpend_first_thread>:
{
   1802c:	b538      	push	{r3, r4, r5, lr}
   1802e:	4604      	mov	r4, r0
	__asm__ volatile(
   18030:	f04f 0320 	mov.w	r3, #32
   18034:	f3ef 8511 	mrs	r5, BASEPRI
   18038:	f383 8811 	msr	BASEPRI, r3
   1803c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18040:	482b      	ldr	r0, [pc, #172]	; (180f0 <z_unpend_first_thread+0xc4>)
   18042:	f000 fb95 	bl	18770 <z_spin_lock_valid>
   18046:	b940      	cbnz	r0, 1805a <z_unpend_first_thread+0x2e>
   18048:	492a      	ldr	r1, [pc, #168]	; (180f4 <z_unpend_first_thread+0xc8>)
   1804a:	482b      	ldr	r0, [pc, #172]	; (180f8 <z_unpend_first_thread+0xcc>)
   1804c:	227c      	movs	r2, #124	; 0x7c
   1804e:	f001 fb63 	bl	19718 <printk>
   18052:	217c      	movs	r1, #124	; 0x7c
   18054:	4827      	ldr	r0, [pc, #156]	; (180f4 <z_unpend_first_thread+0xc8>)
   18056:	f001 fe05 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   1805a:	4825      	ldr	r0, [pc, #148]	; (180f0 <z_unpend_first_thread+0xc4>)
   1805c:	f000 fba4 	bl	187a8 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   18060:	4620      	mov	r0, r4
   18062:	f004 ff38 	bl	1ced6 <z_priq_dumb_best>
   18066:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18068:	4821      	ldr	r0, [pc, #132]	; (180f0 <z_unpend_first_thread+0xc4>)
   1806a:	f000 fb8f 	bl	1878c <z_spin_unlock_valid>
   1806e:	b940      	cbnz	r0, 18082 <z_unpend_first_thread+0x56>
   18070:	4920      	ldr	r1, [pc, #128]	; (180f4 <z_unpend_first_thread+0xc8>)
   18072:	4821      	ldr	r0, [pc, #132]	; (180f8 <z_unpend_first_thread+0xcc>)
   18074:	22a7      	movs	r2, #167	; 0xa7
   18076:	f001 fb4f 	bl	19718 <printk>
   1807a:	21a7      	movs	r1, #167	; 0xa7
   1807c:	481d      	ldr	r0, [pc, #116]	; (180f4 <z_unpend_first_thread+0xc8>)
   1807e:	f001 fdf1 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18082:	f385 8811 	msr	BASEPRI, r5
   18086:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1808a:	b37c      	cbz	r4, 180ec <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   1808c:	f04f 0320 	mov.w	r3, #32
   18090:	f3ef 8511 	mrs	r5, BASEPRI
   18094:	f383 8811 	msr	BASEPRI, r3
   18098:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1809c:	4814      	ldr	r0, [pc, #80]	; (180f0 <z_unpend_first_thread+0xc4>)
   1809e:	f000 fb67 	bl	18770 <z_spin_lock_valid>
   180a2:	b940      	cbnz	r0, 180b6 <z_unpend_first_thread+0x8a>
   180a4:	4913      	ldr	r1, [pc, #76]	; (180f4 <z_unpend_first_thread+0xc8>)
   180a6:	4814      	ldr	r0, [pc, #80]	; (180f8 <z_unpend_first_thread+0xcc>)
   180a8:	227c      	movs	r2, #124	; 0x7c
   180aa:	f001 fb35 	bl	19718 <printk>
   180ae:	217c      	movs	r1, #124	; 0x7c
   180b0:	4810      	ldr	r0, [pc, #64]	; (180f4 <z_unpend_first_thread+0xc8>)
   180b2:	f001 fdd7 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   180b6:	480e      	ldr	r0, [pc, #56]	; (180f0 <z_unpend_first_thread+0xc4>)
   180b8:	f000 fb76 	bl	187a8 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   180bc:	4620      	mov	r0, r4
   180be:	f004 fefc 	bl	1ceba <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   180c2:	480b      	ldr	r0, [pc, #44]	; (180f0 <z_unpend_first_thread+0xc4>)
   180c4:	f000 fb62 	bl	1878c <z_spin_unlock_valid>
   180c8:	b940      	cbnz	r0, 180dc <z_unpend_first_thread+0xb0>
   180ca:	490a      	ldr	r1, [pc, #40]	; (180f4 <z_unpend_first_thread+0xc8>)
   180cc:	480a      	ldr	r0, [pc, #40]	; (180f8 <z_unpend_first_thread+0xcc>)
   180ce:	22a7      	movs	r2, #167	; 0xa7
   180d0:	f001 fb22 	bl	19718 <printk>
   180d4:	21a7      	movs	r1, #167	; 0xa7
   180d6:	4807      	ldr	r0, [pc, #28]	; (180f4 <z_unpend_first_thread+0xc8>)
   180d8:	f001 fdc4 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   180dc:	f385 8811 	msr	BASEPRI, r5
   180e0:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   180e4:	f104 0018 	add.w	r0, r4, #24
   180e8:	f000 fd86 	bl	18bf8 <z_abort_timeout>
}
   180ec:	4620      	mov	r0, r4
   180ee:	bd38      	pop	{r3, r4, r5, pc}
   180f0:	2000adfc 	.word	0x2000adfc
   180f4:	0001e6f6 	.word	0x0001e6f6
   180f8:	0001e6bc 	.word	0x0001e6bc

000180fc <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   180fc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   180fe:	4b04      	ldr	r3, [pc, #16]	; (18110 <z_sched_init+0x14>)
   18100:	4608      	mov	r0, r1
   18102:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   18106:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1810a:	f7ff b961 	b.w	173d0 <k_sched_time_slice_set>
   1810e:	bf00      	nop
   18110:	2000adc4 	.word	0x2000adc4

00018114 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   18114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18116:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1811a:	b153      	cbz	r3, 18132 <z_impl_k_yield+0x1e>
   1811c:	493d      	ldr	r1, [pc, #244]	; (18214 <z_impl_k_yield+0x100>)
   1811e:	483e      	ldr	r0, [pc, #248]	; (18218 <z_impl_k_yield+0x104>)
   18120:	f240 42cf 	movw	r2, #1231	; 0x4cf
   18124:	f001 faf8 	bl	19718 <printk>
   18128:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1812c:	4839      	ldr	r0, [pc, #228]	; (18214 <z_impl_k_yield+0x100>)
   1812e:	f001 fd99 	bl	19c64 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   18132:	4d3a      	ldr	r5, [pc, #232]	; (1821c <z_impl_k_yield+0x108>)
   18134:	4f3a      	ldr	r7, [pc, #232]	; (18220 <z_impl_k_yield+0x10c>)
   18136:	68ab      	ldr	r3, [r5, #8]
   18138:	42bb      	cmp	r3, r7
   1813a:	d054      	beq.n	181e6 <z_impl_k_yield+0xd2>
	__asm__ volatile(
   1813c:	f04f 0320 	mov.w	r3, #32
   18140:	f3ef 8611 	mrs	r6, BASEPRI
   18144:	f383 8811 	msr	BASEPRI, r3
   18148:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1814c:	4835      	ldr	r0, [pc, #212]	; (18224 <z_impl_k_yield+0x110>)
   1814e:	f000 fb0f 	bl	18770 <z_spin_lock_valid>
   18152:	b940      	cbnz	r0, 18166 <z_impl_k_yield+0x52>
   18154:	4934      	ldr	r1, [pc, #208]	; (18228 <z_impl_k_yield+0x114>)
   18156:	4830      	ldr	r0, [pc, #192]	; (18218 <z_impl_k_yield+0x104>)
   18158:	227c      	movs	r2, #124	; 0x7c
   1815a:	f001 fadd 	bl	19718 <printk>
   1815e:	217c      	movs	r1, #124	; 0x7c
   18160:	4831      	ldr	r0, [pc, #196]	; (18228 <z_impl_k_yield+0x114>)
   18162:	f001 fd7f 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18166:	482f      	ldr	r0, [pc, #188]	; (18224 <z_impl_k_yield+0x110>)
   18168:	f000 fb1e 	bl	187a8 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1816c:	68a9      	ldr	r1, [r5, #8]
   1816e:	482f      	ldr	r0, [pc, #188]	; (1822c <z_impl_k_yield+0x118>)
   18170:	f7ff fa0a 	bl	17588 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   18174:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18176:	42bc      	cmp	r4, r7
   18178:	d10a      	bne.n	18190 <z_impl_k_yield+0x7c>
   1817a:	4926      	ldr	r1, [pc, #152]	; (18214 <z_impl_k_yield+0x100>)
   1817c:	4826      	ldr	r0, [pc, #152]	; (18218 <z_impl_k_yield+0x104>)
   1817e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18182:	f001 fac9 	bl	19718 <printk>
   18186:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1818a:	4822      	ldr	r0, [pc, #136]	; (18214 <z_impl_k_yield+0x100>)
   1818c:	f001 fd6a 	bl	19c64 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   18190:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18194:	4925      	ldr	r1, [pc, #148]	; (1822c <z_impl_k_yield+0x118>)
   18196:	428b      	cmp	r3, r1
   18198:	d036      	beq.n	18208 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1819a:	2b00      	cmp	r3, #0
   1819c:	d034      	beq.n	18208 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1819e:	f994 000e 	ldrsb.w	r0, [r4, #14]
   181a2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   181a6:	4287      	cmp	r7, r0
   181a8:	dd29      	ble.n	181fe <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   181aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   181ac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   181b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   181b2:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   181b4:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   181b6:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   181b8:	7b53      	ldrb	r3, [r2, #13]
   181ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   181be:	7353      	strb	r3, [r2, #13]
   181c0:	f7ff fa48 	bl	17654 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181c4:	4817      	ldr	r0, [pc, #92]	; (18224 <z_impl_k_yield+0x110>)
   181c6:	f000 fae1 	bl	1878c <z_spin_unlock_valid>
   181ca:	b940      	cbnz	r0, 181de <z_impl_k_yield+0xca>
   181cc:	4916      	ldr	r1, [pc, #88]	; (18228 <z_impl_k_yield+0x114>)
   181ce:	4812      	ldr	r0, [pc, #72]	; (18218 <z_impl_k_yield+0x104>)
   181d0:	22a7      	movs	r2, #167	; 0xa7
   181d2:	f001 faa1 	bl	19718 <printk>
   181d6:	21a7      	movs	r1, #167	; 0xa7
   181d8:	4813      	ldr	r0, [pc, #76]	; (18228 <z_impl_k_yield+0x114>)
   181da:	f001 fd43 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   181de:	f386 8811 	msr	BASEPRI, r6
   181e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   181e6:	f04f 0320 	mov.w	r3, #32
   181ea:	f3ef 8011 	mrs	r0, BASEPRI
   181ee:	f383 8811 	msr	BASEPRI, r3
   181f2:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   181f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   181fa:	f7f4 bc13 	b.w	ca24 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   181fe:	4293      	cmp	r3, r2
   18200:	d002      	beq.n	18208 <z_impl_k_yield+0xf4>
   18202:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18204:	2b00      	cmp	r3, #0
   18206:	d1cc      	bne.n	181a2 <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   18208:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   1820c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1820e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18210:	632c      	str	r4, [r5, #48]	; 0x30
}
   18212:	e7cf      	b.n	181b4 <z_impl_k_yield+0xa0>
   18214:	000212bb 	.word	0x000212bb
   18218:	0001e6bc 	.word	0x0001e6bc
   1821c:	2000adc4 	.word	0x2000adc4
   18220:	2000a280 	.word	0x2000a280
   18224:	2000adfc 	.word	0x2000adfc
   18228:	0001e6f6 	.word	0x0001e6f6
   1822c:	2000adf0 	.word	0x2000adf0

00018230 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   18230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18234:	4605      	mov	r5, r0
   18236:	460f      	mov	r7, r1
   18238:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1823c:	b153      	cbz	r3, 18254 <z_tick_sleep+0x24>
   1823e:	4934      	ldr	r1, [pc, #208]	; (18310 <z_tick_sleep+0xe0>)
   18240:	4834      	ldr	r0, [pc, #208]	; (18314 <z_tick_sleep+0xe4>)
   18242:	f240 42ed 	movw	r2, #1261	; 0x4ed
   18246:	f001 fa67 	bl	19718 <printk>
   1824a:	f240 41ed 	movw	r1, #1261	; 0x4ed
   1824e:	4830      	ldr	r0, [pc, #192]	; (18310 <z_tick_sleep+0xe0>)
   18250:	f001 fd08 	bl	19c64 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18254:	ea55 0307 	orrs.w	r3, r5, r7
   18258:	d104      	bne.n	18264 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1825a:	f7ff ff5b 	bl	18114 <z_impl_k_yield>
		k_yield();
		return 0;
   1825e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   18260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   18264:	f004 fec5 	bl	1cff2 <z_tick_get_32>
   18268:	1944      	adds	r4, r0, r5
   1826a:	f04f 0320 	mov.w	r3, #32
   1826e:	f3ef 8811 	mrs	r8, BASEPRI
   18272:	f383 8811 	msr	BASEPRI, r3
   18276:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1827a:	4827      	ldr	r0, [pc, #156]	; (18318 <z_tick_sleep+0xe8>)
   1827c:	f000 fa78 	bl	18770 <z_spin_lock_valid>
   18280:	b940      	cbnz	r0, 18294 <z_tick_sleep+0x64>
   18282:	4926      	ldr	r1, [pc, #152]	; (1831c <z_tick_sleep+0xec>)
   18284:	4823      	ldr	r0, [pc, #140]	; (18314 <z_tick_sleep+0xe4>)
   18286:	227c      	movs	r2, #124	; 0x7c
   18288:	f001 fa46 	bl	19718 <printk>
   1828c:	217c      	movs	r1, #124	; 0x7c
   1828e:	4823      	ldr	r0, [pc, #140]	; (1831c <z_tick_sleep+0xec>)
   18290:	f001 fce8 	bl	19c64 <assert_post_action>
	pending_current = _current;
   18294:	4e22      	ldr	r6, [pc, #136]	; (18320 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   18296:	4820      	ldr	r0, [pc, #128]	; (18318 <z_tick_sleep+0xe8>)
   18298:	f000 fa86 	bl	187a8 <z_spin_lock_set_owner>
   1829c:	68b0      	ldr	r0, [r6, #8]
   1829e:	4b21      	ldr	r3, [pc, #132]	; (18324 <z_tick_sleep+0xf4>)
   182a0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   182a2:	f7ff fd7d 	bl	17da0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   182a6:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   182a8:	462a      	mov	r2, r5
   182aa:	463b      	mov	r3, r7
   182ac:	3018      	adds	r0, #24
   182ae:	491e      	ldr	r1, [pc, #120]	; (18328 <z_tick_sleep+0xf8>)
   182b0:	f000 fbf2 	bl	18a98 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   182b4:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182b6:	4818      	ldr	r0, [pc, #96]	; (18318 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   182b8:	7b53      	ldrb	r3, [r2, #13]
   182ba:	f043 0310 	orr.w	r3, r3, #16
   182be:	7353      	strb	r3, [r2, #13]
   182c0:	f000 fa64 	bl	1878c <z_spin_unlock_valid>
   182c4:	b940      	cbnz	r0, 182d8 <z_tick_sleep+0xa8>
   182c6:	4915      	ldr	r1, [pc, #84]	; (1831c <z_tick_sleep+0xec>)
   182c8:	4812      	ldr	r0, [pc, #72]	; (18314 <z_tick_sleep+0xe4>)
   182ca:	22be      	movs	r2, #190	; 0xbe
   182cc:	f001 fa24 	bl	19718 <printk>
   182d0:	21be      	movs	r1, #190	; 0xbe
   182d2:	4812      	ldr	r0, [pc, #72]	; (1831c <z_tick_sleep+0xec>)
   182d4:	f001 fcc6 	bl	19c64 <assert_post_action>
   182d8:	4640      	mov	r0, r8
   182da:	f7f4 fba3 	bl	ca24 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   182de:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   182e0:	7b5b      	ldrb	r3, [r3, #13]
   182e2:	06db      	lsls	r3, r3, #27
   182e4:	d50a      	bpl.n	182fc <z_tick_sleep+0xcc>
   182e6:	490a      	ldr	r1, [pc, #40]	; (18310 <z_tick_sleep+0xe0>)
   182e8:	480a      	ldr	r0, [pc, #40]	; (18314 <z_tick_sleep+0xe4>)
   182ea:	f240 520b 	movw	r2, #1291	; 0x50b
   182ee:	f001 fa13 	bl	19718 <printk>
   182f2:	f240 510b 	movw	r1, #1291	; 0x50b
   182f6:	4806      	ldr	r0, [pc, #24]	; (18310 <z_tick_sleep+0xe0>)
   182f8:	f001 fcb4 	bl	19c64 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   182fc:	f004 fe79 	bl	1cff2 <z_tick_get_32>
   18300:	1a20      	subs	r0, r4, r0
   18302:	eb63 0303 	sbc.w	r3, r3, r3
   18306:	2b00      	cmp	r3, #0
   18308:	bfb8      	it	lt
   1830a:	2000      	movlt	r0, #0
   1830c:	e7a8      	b.n	18260 <z_tick_sleep+0x30>
   1830e:	bf00      	nop
   18310:	000212bb 	.word	0x000212bb
   18314:	0001e6bc 	.word	0x0001e6bc
   18318:	2000adfc 	.word	0x2000adfc
   1831c:	0001e6f6 	.word	0x0001e6f6
   18320:	2000adc4 	.word	0x2000adc4
   18324:	2000adf8 	.word	0x2000adf8
   18328:	00017905 	.word	0x00017905

0001832c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1832c:	b538      	push	{r3, r4, r5, lr}
   1832e:	4605      	mov	r5, r0
   18330:	460c      	mov	r4, r1
   18332:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   18336:	b153      	cbz	r3, 1834e <z_impl_k_sleep+0x22>
   18338:	4911      	ldr	r1, [pc, #68]	; (18380 <z_impl_k_sleep+0x54>)
   1833a:	4812      	ldr	r0, [pc, #72]	; (18384 <z_impl_k_sleep+0x58>)
   1833c:	f240 521a 	movw	r2, #1306	; 0x51a
   18340:	f001 f9ea 	bl	19718 <printk>
   18344:	f240 511a 	movw	r1, #1306	; 0x51a
   18348:	480d      	ldr	r0, [pc, #52]	; (18380 <z_impl_k_sleep+0x54>)
   1834a:	f001 fc8b 	bl	19c64 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1834e:	f1b4 3fff 	cmp.w	r4, #4294967295
   18352:	bf08      	it	eq
   18354:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   18358:	d106      	bne.n	18368 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1835a:	4b0b      	ldr	r3, [pc, #44]	; (18388 <z_impl_k_sleep+0x5c>)
   1835c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1835e:	f7ff fbc5 	bl	17aec <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   18362:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   18366:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   18368:	4628      	mov	r0, r5
   1836a:	4621      	mov	r1, r4
   1836c:	f7ff ff60 	bl	18230 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   18370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18374:	fb80 0303 	smull	r0, r3, r0, r3
   18378:	0bc0      	lsrs	r0, r0, #15
   1837a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1837e:	e7f2      	b.n	18366 <z_impl_k_sleep+0x3a>
   18380:	000212bb 	.word	0x000212bb
   18384:	0001e6bc 	.word	0x0001e6bc
   18388:	2000adc4 	.word	0x2000adc4

0001838c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1838c:	4b01      	ldr	r3, [pc, #4]	; (18394 <z_impl_k_current_get+0x8>)
   1838e:	6898      	ldr	r0, [r3, #8]
   18390:	4770      	bx	lr
   18392:	bf00      	nop
   18394:	2000adc4 	.word	0x2000adc4

00018398 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18398:	b538      	push	{r3, r4, r5, lr}
   1839a:	4604      	mov	r4, r0
   1839c:	f04f 0320 	mov.w	r3, #32
   183a0:	f3ef 8511 	mrs	r5, BASEPRI
   183a4:	f383 8811 	msr	BASEPRI, r3
   183a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   183ac:	4815      	ldr	r0, [pc, #84]	; (18404 <z_impl_k_sem_give+0x6c>)
   183ae:	f000 f9df 	bl	18770 <z_spin_lock_valid>
   183b2:	b940      	cbnz	r0, 183c6 <z_impl_k_sem_give+0x2e>
   183b4:	4914      	ldr	r1, [pc, #80]	; (18408 <z_impl_k_sem_give+0x70>)
   183b6:	4815      	ldr	r0, [pc, #84]	; (1840c <z_impl_k_sem_give+0x74>)
   183b8:	227c      	movs	r2, #124	; 0x7c
   183ba:	f001 f9ad 	bl	19718 <printk>
   183be:	217c      	movs	r1, #124	; 0x7c
   183c0:	4811      	ldr	r0, [pc, #68]	; (18408 <z_impl_k_sem_give+0x70>)
   183c2:	f001 fc4f 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   183c6:	480f      	ldr	r0, [pc, #60]	; (18404 <z_impl_k_sem_give+0x6c>)
   183c8:	f000 f9ee 	bl	187a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   183cc:	4620      	mov	r0, r4
   183ce:	f7ff fe2d 	bl	1802c <z_unpend_first_thread>

	if (thread != NULL) {
   183d2:	b150      	cbz	r0, 183ea <z_impl_k_sem_give+0x52>
   183d4:	2200      	movs	r2, #0
   183d6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   183da:	f7ff fa1b 	bl	17814 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   183de:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   183e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   183e4:	4807      	ldr	r0, [pc, #28]	; (18404 <z_impl_k_sem_give+0x6c>)
   183e6:	f7ff b841 	b.w	1746c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   183ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   183ee:	429a      	cmp	r2, r3
   183f0:	bf18      	it	ne
   183f2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   183f4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   183f6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   183f8:	f104 0010 	add.w	r0, r4, #16
   183fc:	f004 fe70 	bl	1d0e0 <z_handle_obj_poll_events>
}
   18400:	e7ed      	b.n	183de <z_impl_k_sem_give+0x46>
   18402:	bf00      	nop
   18404:	2000ae08 	.word	0x2000ae08
   18408:	0001e6f6 	.word	0x0001e6f6
   1840c:	0001e6bc 	.word	0x0001e6bc

00018410 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18412:	4604      	mov	r4, r0
   18414:	4616      	mov	r6, r2
   18416:	461d      	mov	r5, r3
   18418:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1841c:	b15b      	cbz	r3, 18436 <z_impl_k_sem_take+0x26>
   1841e:	ea52 0305 	orrs.w	r3, r2, r5
   18422:	d008      	beq.n	18436 <z_impl_k_sem_take+0x26>
   18424:	492b      	ldr	r1, [pc, #172]	; (184d4 <z_impl_k_sem_take+0xc4>)
   18426:	482c      	ldr	r0, [pc, #176]	; (184d8 <z_impl_k_sem_take+0xc8>)
   18428:	228c      	movs	r2, #140	; 0x8c
   1842a:	f001 f975 	bl	19718 <printk>
   1842e:	218c      	movs	r1, #140	; 0x8c
   18430:	4828      	ldr	r0, [pc, #160]	; (184d4 <z_impl_k_sem_take+0xc4>)
   18432:	f001 fc17 	bl	19c64 <assert_post_action>
   18436:	f04f 0320 	mov.w	r3, #32
   1843a:	f3ef 8711 	mrs	r7, BASEPRI
   1843e:	f383 8811 	msr	BASEPRI, r3
   18442:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18446:	4825      	ldr	r0, [pc, #148]	; (184dc <z_impl_k_sem_take+0xcc>)
   18448:	f000 f992 	bl	18770 <z_spin_lock_valid>
   1844c:	b940      	cbnz	r0, 18460 <z_impl_k_sem_take+0x50>
   1844e:	4924      	ldr	r1, [pc, #144]	; (184e0 <z_impl_k_sem_take+0xd0>)
   18450:	4821      	ldr	r0, [pc, #132]	; (184d8 <z_impl_k_sem_take+0xc8>)
   18452:	227c      	movs	r2, #124	; 0x7c
   18454:	f001 f960 	bl	19718 <printk>
   18458:	217c      	movs	r1, #124	; 0x7c
   1845a:	4821      	ldr	r0, [pc, #132]	; (184e0 <z_impl_k_sem_take+0xd0>)
   1845c:	f001 fc02 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18460:	481e      	ldr	r0, [pc, #120]	; (184dc <z_impl_k_sem_take+0xcc>)
   18462:	f000 f9a1 	bl	187a8 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   18466:	68a3      	ldr	r3, [r4, #8]
   18468:	b1ab      	cbz	r3, 18496 <z_impl_k_sem_take+0x86>
		sem->count--;
   1846a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1846c:	481b      	ldr	r0, [pc, #108]	; (184dc <z_impl_k_sem_take+0xcc>)
   1846e:	60a3      	str	r3, [r4, #8]
   18470:	f000 f98c 	bl	1878c <z_spin_unlock_valid>
   18474:	b940      	cbnz	r0, 18488 <z_impl_k_sem_take+0x78>
   18476:	491a      	ldr	r1, [pc, #104]	; (184e0 <z_impl_k_sem_take+0xd0>)
   18478:	4817      	ldr	r0, [pc, #92]	; (184d8 <z_impl_k_sem_take+0xc8>)
   1847a:	22a7      	movs	r2, #167	; 0xa7
   1847c:	f001 f94c 	bl	19718 <printk>
   18480:	21a7      	movs	r1, #167	; 0xa7
   18482:	4817      	ldr	r0, [pc, #92]	; (184e0 <z_impl_k_sem_take+0xd0>)
   18484:	f001 fbee 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18488:	f387 8811 	msr	BASEPRI, r7
   1848c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18490:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   18492:	b003      	add	sp, #12
   18494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18496:	ea56 0305 	orrs.w	r3, r6, r5
   1849a:	d113      	bne.n	184c4 <z_impl_k_sem_take+0xb4>
   1849c:	480f      	ldr	r0, [pc, #60]	; (184dc <z_impl_k_sem_take+0xcc>)
   1849e:	f000 f975 	bl	1878c <z_spin_unlock_valid>
   184a2:	b940      	cbnz	r0, 184b6 <z_impl_k_sem_take+0xa6>
   184a4:	490e      	ldr	r1, [pc, #56]	; (184e0 <z_impl_k_sem_take+0xd0>)
   184a6:	480c      	ldr	r0, [pc, #48]	; (184d8 <z_impl_k_sem_take+0xc8>)
   184a8:	22a7      	movs	r2, #167	; 0xa7
   184aa:	f001 f935 	bl	19718 <printk>
   184ae:	21a7      	movs	r1, #167	; 0xa7
   184b0:	480b      	ldr	r0, [pc, #44]	; (184e0 <z_impl_k_sem_take+0xd0>)
   184b2:	f001 fbd7 	bl	19c64 <assert_post_action>
   184b6:	f387 8811 	msr	BASEPRI, r7
   184ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   184be:	f06f 000f 	mvn.w	r0, #15
   184c2:	e7e6      	b.n	18492 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   184c4:	4622      	mov	r2, r4
   184c6:	4639      	mov	r1, r7
   184c8:	e9cd 6500 	strd	r6, r5, [sp]
   184cc:	4803      	ldr	r0, [pc, #12]	; (184dc <z_impl_k_sem_take+0xcc>)
   184ce:	f7ff fd0b 	bl	17ee8 <z_pend_curr>
	return ret;
   184d2:	e7de      	b.n	18492 <z_impl_k_sem_take+0x82>
   184d4:	000212dd 	.word	0x000212dd
   184d8:	0001e6bc 	.word	0x0001e6bc
   184dc:	2000ae08 	.word	0x2000ae08
   184e0:	0001e6f6 	.word	0x0001e6f6

000184e4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   184e4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   184e6:	4c08      	ldr	r4, [pc, #32]	; (18508 <k_sys_work_q_init+0x24>)
   184e8:	f04f 33ff 	mov.w	r3, #4294967295
   184ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   184f0:	4620      	mov	r0, r4
   184f2:	4906      	ldr	r1, [pc, #24]	; (1850c <k_sys_work_q_init+0x28>)
   184f4:	f000 f98c 	bl	18810 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   184f8:	4905      	ldr	r1, [pc, #20]	; (18510 <k_sys_work_q_init+0x2c>)
   184fa:	f104 0020 	add.w	r0, r4, #32
   184fe:	f004 fd1a 	bl	1cf36 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   18502:	2000      	movs	r0, #0
   18504:	bd10      	pop	{r4, pc}
   18506:	bf00      	nop
   18508:	2000a3a0 	.word	0x2000a3a0
   1850c:	2000f440 	.word	0x2000f440
   18510:	000212fd 	.word	0x000212fd

00018514 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18514:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18518:	4604      	mov	r4, r0
   1851a:	460f      	mov	r7, r1
   1851c:	4698      	mov	r8, r3
   1851e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18520:	4b2c      	ldr	r3, [pc, #176]	; (185d4 <z_setup_new_thread+0xc0>)
   18522:	4616      	mov	r6, r2
   18524:	f100 0238 	add.w	r2, r0, #56	; 0x38
   18528:	e8d2 1fef 	ldaex	r1, [r2]
   1852c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   18530:	2800      	cmp	r0, #0
   18532:	d1f9      	bne.n	18528 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   18534:	4299      	cmp	r1, r3
   18536:	d10a      	bne.n	1854e <z_setup_new_thread+0x3a>
   18538:	4927      	ldr	r1, [pc, #156]	; (185d8 <z_setup_new_thread+0xc4>)
   1853a:	4828      	ldr	r0, [pc, #160]	; (185dc <z_setup_new_thread+0xc8>)
   1853c:	f240 2223 	movw	r2, #547	; 0x223
   18540:	f001 f8ea 	bl	19718 <printk>
   18544:	f240 2123 	movw	r1, #547	; 0x223
   18548:	4823      	ldr	r0, [pc, #140]	; (185d8 <z_setup_new_thread+0xc4>)
   1854a:	f001 fb8b 	bl	19c64 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   1854e:	2d0f      	cmp	r5, #15
   18550:	d12f      	bne.n	185b2 <z_setup_new_thread+0x9e>
   18552:	4b23      	ldr	r3, [pc, #140]	; (185e0 <z_setup_new_thread+0xcc>)
   18554:	4598      	cmp	r8, r3
   18556:	d130      	bne.n	185ba <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   18558:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1855c:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   18560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   18562:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   18564:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18566:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   18568:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1856a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1856c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1856e:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18570:	9302      	str	r3, [sp, #8]
   18572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18574:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18578:	9301      	str	r3, [sp, #4]
   1857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   1857c:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   1857e:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18582:	9300      	str	r3, [sp, #0]
   18584:	4632      	mov	r2, r6
   18586:	4643      	mov	r3, r8
   18588:	4639      	mov	r1, r7
   1858a:	4620      	mov	r0, r4
	node->prev = NULL;
   1858c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   18590:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   18592:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18594:	f7f4 fae4 	bl	cb60 <arch_new_thread>
	if (!_current) {
   18598:	4b12      	ldr	r3, [pc, #72]	; (185e4 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   1859a:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1859e:	689b      	ldr	r3, [r3, #8]
   185a0:	b10b      	cbz	r3, 185a6 <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   185a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   185a6:	4630      	mov	r0, r6
   185a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   185ac:	b004      	add	sp, #16
   185ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   185b2:	f105 0310 	add.w	r3, r5, #16
   185b6:	2b1e      	cmp	r3, #30
   185b8:	d9ce      	bls.n	18558 <z_setup_new_thread+0x44>
   185ba:	f240 2226 	movw	r2, #550	; 0x226
   185be:	4906      	ldr	r1, [pc, #24]	; (185d8 <z_setup_new_thread+0xc4>)
   185c0:	4806      	ldr	r0, [pc, #24]	; (185dc <z_setup_new_thread+0xc8>)
   185c2:	f001 f8a9 	bl	19718 <printk>
   185c6:	f240 2126 	movw	r1, #550	; 0x226
   185ca:	4803      	ldr	r0, [pc, #12]	; (185d8 <z_setup_new_thread+0xc4>)
   185cc:	f001 fb4a 	bl	19c64 <assert_post_action>
   185d0:	e7c2      	b.n	18558 <z_setup_new_thread+0x44>
   185d2:	bf00      	nop
   185d4:	1337c0d3 	.word	0x1337c0d3
   185d8:	00021306 	.word	0x00021306
   185dc:	0001e6bc 	.word	0x0001e6bc
   185e0:	000168fd 	.word	0x000168fd
   185e4:	2000adc4 	.word	0x2000adc4

000185e8 <z_impl_k_thread_create>:
{
   185e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   185ec:	b087      	sub	sp, #28
   185ee:	4604      	mov	r4, r0
   185f0:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   185f4:	460f      	mov	r7, r1
   185f6:	4690      	mov	r8, r2
   185f8:	4699      	mov	r9, r3
   185fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   185fe:	b153      	cbz	r3, 18616 <z_impl_k_thread_create+0x2e>
   18600:	491a      	ldr	r1, [pc, #104]	; (1866c <z_impl_k_thread_create+0x84>)
   18602:	481b      	ldr	r0, [pc, #108]	; (18670 <z_impl_k_thread_create+0x88>)
   18604:	f240 228f 	movw	r2, #655	; 0x28f
   18608:	f001 f886 	bl	19718 <printk>
   1860c:	f240 218f 	movw	r1, #655	; 0x28f
   18610:	4816      	ldr	r0, [pc, #88]	; (1866c <z_impl_k_thread_create+0x84>)
   18612:	f001 fb27 	bl	19c64 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18616:	2300      	movs	r3, #0
   18618:	9305      	str	r3, [sp, #20]
   1861a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1861c:	4642      	mov	r2, r8
   1861e:	9304      	str	r3, [sp, #16]
   18620:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18622:	4639      	mov	r1, r7
   18624:	9303      	str	r3, [sp, #12]
   18626:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18628:	4620      	mov	r0, r4
   1862a:	9302      	str	r3, [sp, #8]
   1862c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1862e:	9301      	str	r3, [sp, #4]
   18630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18632:	9300      	str	r3, [sp, #0]
   18634:	464b      	mov	r3, r9
   18636:	f7ff ff6d 	bl	18514 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1863a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1863e:	bf08      	it	eq
   18640:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18644:	d005      	beq.n	18652 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18646:	ea55 0306 	orrs.w	r3, r5, r6
   1864a:	d106      	bne.n	1865a <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   1864c:	4620      	mov	r0, r4
   1864e:	f7ff f917 	bl	17880 <z_sched_start>
}
   18652:	4620      	mov	r0, r4
   18654:	b007      	add	sp, #28
   18656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1865a:	4632      	mov	r2, r6
   1865c:	462b      	mov	r3, r5
   1865e:	4905      	ldr	r1, [pc, #20]	; (18674 <z_impl_k_thread_create+0x8c>)
   18660:	f104 0018 	add.w	r0, r4, #24
   18664:	f000 fa18 	bl	18a98 <z_add_timeout>
   18668:	e7f3      	b.n	18652 <z_impl_k_thread_create+0x6a>
   1866a:	bf00      	nop
   1866c:	00021306 	.word	0x00021306
   18670:	0001e6bc 	.word	0x0001e6bc
   18674:	00017905 	.word	0x00017905

00018678 <z_init_static_threads>:
{
   18678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1867c:	4c37      	ldr	r4, [pc, #220]	; (1875c <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1867e:	4d38      	ldr	r5, [pc, #224]	; (18760 <z_init_static_threads+0xe8>)
   18680:	4f38      	ldr	r7, [pc, #224]	; (18764 <z_init_static_threads+0xec>)
{
   18682:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   18684:	42ac      	cmp	r4, r5
   18686:	4626      	mov	r6, r4
   18688:	d90a      	bls.n	186a0 <z_init_static_threads+0x28>
   1868a:	4639      	mov	r1, r7
   1868c:	4836      	ldr	r0, [pc, #216]	; (18768 <z_init_static_threads+0xf0>)
   1868e:	f240 22fd 	movw	r2, #765	; 0x2fd
   18692:	f001 f841 	bl	19718 <printk>
   18696:	f240 21fd 	movw	r1, #765	; 0x2fd
   1869a:	4638      	mov	r0, r7
   1869c:	f001 fae2 	bl	19c64 <assert_post_action>
   186a0:	42ae      	cmp	r6, r5
   186a2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   186a6:	d31b      	bcc.n	186e0 <z_init_static_threads+0x68>
	k_sched_lock();
   186a8:	f7fe ff16 	bl	174d8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   186ac:	4c2b      	ldr	r4, [pc, #172]	; (1875c <z_init_static_threads+0xe4>)
   186ae:	4e2d      	ldr	r6, [pc, #180]	; (18764 <z_init_static_threads+0xec>)
   186b0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18768 <z_init_static_threads+0xf0>
   186b4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1876c <z_init_static_threads+0xf4>
   186b8:	42ac      	cmp	r4, r5
   186ba:	d90a      	bls.n	186d2 <z_init_static_threads+0x5a>
   186bc:	4631      	mov	r1, r6
   186be:	4640      	mov	r0, r8
   186c0:	f44f 7247 	mov.w	r2, #796	; 0x31c
   186c4:	f001 f828 	bl	19718 <printk>
   186c8:	f44f 7147 	mov.w	r1, #796	; 0x31c
   186cc:	4630      	mov	r0, r6
   186ce:	f001 fac9 	bl	19c64 <assert_post_action>
   186d2:	42ac      	cmp	r4, r5
   186d4:	d320      	bcc.n	18718 <z_init_static_threads+0xa0>
}
   186d6:	b007      	add	sp, #28
   186d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   186dc:	f7fe bff4 	b.w	176c8 <k_sched_unlock>
		z_setup_new_thread(
   186e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   186e4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   186e8:	9305      	str	r3, [sp, #20]
   186ea:	f854 3c10 	ldr.w	r3, [r4, #-16]
   186ee:	9304      	str	r3, [sp, #16]
   186f0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   186f4:	9303      	str	r3, [sp, #12]
   186f6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   186fa:	9302      	str	r3, [sp, #8]
   186fc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18700:	9301      	str	r3, [sp, #4]
   18702:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18706:	9300      	str	r3, [sp, #0]
   18708:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1870c:	f7ff ff02 	bl	18514 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18710:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18714:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   18716:	e7b5      	b.n	18684 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18718:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1871a:	1c5a      	adds	r2, r3, #1
   1871c:	d00f      	beq.n	1873e <z_init_static_threads+0xc6>
   1871e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   18722:	f240 30e7 	movw	r0, #999	; 0x3e7
   18726:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   18728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1872c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18730:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   18734:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18736:	d104      	bne.n	18742 <z_init_static_threads+0xca>
	z_sched_start(thread);
   18738:	4638      	mov	r0, r7
   1873a:	f7ff f8a1 	bl	17880 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1873e:	3430      	adds	r4, #48	; 0x30
   18740:	e7ba      	b.n	186b8 <z_init_static_threads+0x40>
   18742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18746:	2300      	movs	r3, #0
   18748:	f7f0 f9f0 	bl	8b2c <__aeabi_uldivmod>
   1874c:	4602      	mov	r2, r0
   1874e:	460b      	mov	r3, r1
   18750:	f107 0018 	add.w	r0, r7, #24
   18754:	4649      	mov	r1, r9
   18756:	f000 f99f 	bl	18a98 <z_add_timeout>
   1875a:	e7f0      	b.n	1873e <z_init_static_threads+0xc6>
   1875c:	200085e0 	.word	0x200085e0
   18760:	200085e0 	.word	0x200085e0
   18764:	00021306 	.word	0x00021306
   18768:	0001e6bc 	.word	0x0001e6bc
   1876c:	00017905 	.word	0x00017905

00018770 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   18770:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   18772:	b138      	cbz	r0, 18784 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   18774:	4b04      	ldr	r3, [pc, #16]	; (18788 <z_spin_lock_valid+0x18>)
   18776:	f000 0003 	and.w	r0, r0, #3
   1877a:	7e1b      	ldrb	r3, [r3, #24]
   1877c:	1ac0      	subs	r0, r0, r3
   1877e:	bf18      	it	ne
   18780:	2001      	movne	r0, #1
   18782:	4770      	bx	lr
			return false;
		}
	}
	return true;
   18784:	2001      	movs	r0, #1
}
   18786:	4770      	bx	lr
   18788:	2000adc4 	.word	0x2000adc4

0001878c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1878c:	4905      	ldr	r1, [pc, #20]	; (187a4 <z_spin_unlock_valid+0x18>)
{
   1878e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18790:	688a      	ldr	r2, [r1, #8]
   18792:	7e08      	ldrb	r0, [r1, #24]
   18794:	6819      	ldr	r1, [r3, #0]
   18796:	4302      	orrs	r2, r0
   18798:	2000      	movs	r0, #0
   1879a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1879c:	bf04      	itt	eq
   1879e:	6018      	streq	r0, [r3, #0]
	return true;
   187a0:	2001      	moveq	r0, #1
}
   187a2:	4770      	bx	lr
   187a4:	2000adc4 	.word	0x2000adc4

000187a8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   187a8:	4a02      	ldr	r2, [pc, #8]	; (187b4 <z_spin_lock_set_owner+0xc>)
   187aa:	7e11      	ldrb	r1, [r2, #24]
   187ac:	6893      	ldr	r3, [r2, #8]
   187ae:	430b      	orrs	r3, r1
   187b0:	6003      	str	r3, [r0, #0]
}
   187b2:	4770      	bx	lr
   187b4:	2000adc4 	.word	0x2000adc4

000187b8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   187b8:	b508      	push	{r3, lr}
	__asm__ volatile(
   187ba:	f04f 0320 	mov.w	r3, #32
   187be:	f3ef 8511 	mrs	r5, BASEPRI
   187c2:	f383 8811 	msr	BASEPRI, r3
   187c6:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   187ca:	4c0e      	ldr	r4, [pc, #56]	; (18804 <z_self_abort+0x4c>)
   187cc:	6923      	ldr	r3, [r4, #16]
   187ce:	b143      	cbz	r3, 187e2 <z_self_abort+0x2a>
   187d0:	490d      	ldr	r1, [pc, #52]	; (18808 <z_self_abort+0x50>)
   187d2:	480e      	ldr	r0, [pc, #56]	; (1880c <z_self_abort+0x54>)
   187d4:	2228      	movs	r2, #40	; 0x28
   187d6:	f000 ff9f 	bl	19718 <printk>
   187da:	2128      	movs	r1, #40	; 0x28
   187dc:	480a      	ldr	r0, [pc, #40]	; (18808 <z_self_abort+0x50>)
   187de:	f001 fa41 	bl	19c64 <assert_post_action>
	cpu->pending_abort = _current;
   187e2:	68a0      	ldr	r0, [r4, #8]
   187e4:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   187e6:	f7ff f981 	bl	17aec <z_impl_k_thread_suspend>
   187ea:	4628      	mov	r0, r5
   187ec:	f7f4 f91a 	bl	ca24 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   187f0:	4905      	ldr	r1, [pc, #20]	; (18808 <z_self_abort+0x50>)
   187f2:	4806      	ldr	r0, [pc, #24]	; (1880c <z_self_abort+0x54>)
   187f4:	2230      	movs	r2, #48	; 0x30
   187f6:	f000 ff8f 	bl	19718 <printk>
   187fa:	2130      	movs	r1, #48	; 0x30
   187fc:	4802      	ldr	r0, [pc, #8]	; (18808 <z_self_abort+0x50>)
   187fe:	f001 fa31 	bl	19c64 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18802:	bf00      	nop
   18804:	2000adc4 	.word	0x2000adc4
   18808:	00021329 	.word	0x00021329
   1880c:	0001e6bc 	.word	0x0001e6bc

00018810 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   18810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18814:	4604      	mov	r4, r0
   18816:	b088      	sub	sp, #32
   18818:	460d      	mov	r5, r1
   1881a:	4616      	mov	r6, r2
   1881c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1881e:	f004 fb0b 	bl	1ce38 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   18822:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18826:	2200      	movs	r2, #0
   18828:	2300      	movs	r3, #0
   1882a:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1882e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18832:	e9cd 2201 	strd	r2, r2, [sp, #4]
   18836:	4629      	mov	r1, r5
   18838:	4632      	mov	r2, r6
   1883a:	4640      	mov	r0, r8
   1883c:	4b05      	ldr	r3, [pc, #20]	; (18854 <k_work_q_start+0x44>)
   1883e:	9400      	str	r4, [sp, #0]
   18840:	f7ff fed2 	bl	185e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18844:	4640      	mov	r0, r8
   18846:	4904      	ldr	r1, [pc, #16]	; (18858 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   18848:	b008      	add	sp, #32
   1884a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1884e:	f004 bb72 	b.w	1cf36 <z_impl_k_thread_name_set>
   18852:	bf00      	nop
   18854:	0000a199 	.word	0x0000a199
   18858:	00021352 	.word	0x00021352

0001885c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18860:	4606      	mov	r6, r0
   18862:	460d      	mov	r5, r1
   18864:	4690      	mov	r8, r2
   18866:	461f      	mov	r7, r3
   18868:	f04f 0320 	mov.w	r3, #32
   1886c:	f3ef 8911 	mrs	r9, BASEPRI
   18870:	f383 8811 	msr	BASEPRI, r3
   18874:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18878:	482c      	ldr	r0, [pc, #176]	; (1892c <k_delayed_work_submit_to_queue+0xd0>)
   1887a:	f7ff ff79 	bl	18770 <z_spin_lock_valid>
   1887e:	b940      	cbnz	r0, 18892 <k_delayed_work_submit_to_queue+0x36>
   18880:	492b      	ldr	r1, [pc, #172]	; (18930 <k_delayed_work_submit_to_queue+0xd4>)
   18882:	482c      	ldr	r0, [pc, #176]	; (18934 <k_delayed_work_submit_to_queue+0xd8>)
   18884:	227c      	movs	r2, #124	; 0x7c
   18886:	f000 ff47 	bl	19718 <printk>
   1888a:	217c      	movs	r1, #124	; 0x7c
   1888c:	4828      	ldr	r0, [pc, #160]	; (18930 <k_delayed_work_submit_to_queue+0xd4>)
   1888e:	f001 f9e9 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18892:	4826      	ldr	r0, [pc, #152]	; (1892c <k_delayed_work_submit_to_queue+0xd0>)
   18894:	f7ff ff88 	bl	187a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   18898:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1889a:	b1e3      	cbz	r3, 188d6 <k_delayed_work_submit_to_queue+0x7a>
   1889c:	42b3      	cmp	r3, r6
   1889e:	d142      	bne.n	18926 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   188a0:	4628      	mov	r0, r5
   188a2:	f004 fb66 	bl	1cf72 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   188a6:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   188aa:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   188ac:	d015      	beq.n	188da <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   188ae:	2800      	cmp	r0, #0
   188b0:	da14      	bge.n	188dc <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188b2:	481e      	ldr	r0, [pc, #120]	; (1892c <k_delayed_work_submit_to_queue+0xd0>)
   188b4:	f7ff ff6a 	bl	1878c <z_spin_unlock_valid>
   188b8:	b940      	cbnz	r0, 188cc <k_delayed_work_submit_to_queue+0x70>
   188ba:	491d      	ldr	r1, [pc, #116]	; (18930 <k_delayed_work_submit_to_queue+0xd4>)
   188bc:	481d      	ldr	r0, [pc, #116]	; (18934 <k_delayed_work_submit_to_queue+0xd8>)
   188be:	22a7      	movs	r2, #167	; 0xa7
   188c0:	f000 ff2a 	bl	19718 <printk>
   188c4:	21a7      	movs	r1, #167	; 0xa7
   188c6:	481a      	ldr	r0, [pc, #104]	; (18930 <k_delayed_work_submit_to_queue+0xd4>)
   188c8:	f001 f9cc 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   188cc:	f389 8811 	msr	BASEPRI, r9
   188d0:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   188d4:	e01c      	b.n	18910 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   188d6:	2e00      	cmp	r6, #0
   188d8:	d0e2      	beq.n	188a0 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   188da:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   188dc:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   188e0:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   188e2:	d118      	bne.n	18916 <k_delayed_work_submit_to_queue+0xba>
   188e4:	4811      	ldr	r0, [pc, #68]	; (1892c <k_delayed_work_submit_to_queue+0xd0>)
   188e6:	f7ff ff51 	bl	1878c <z_spin_unlock_valid>
   188ea:	b940      	cbnz	r0, 188fe <k_delayed_work_submit_to_queue+0xa2>
   188ec:	4910      	ldr	r1, [pc, #64]	; (18930 <k_delayed_work_submit_to_queue+0xd4>)
   188ee:	4811      	ldr	r0, [pc, #68]	; (18934 <k_delayed_work_submit_to_queue+0xd8>)
   188f0:	22a7      	movs	r2, #167	; 0xa7
   188f2:	f000 ff11 	bl	19718 <printk>
   188f6:	21a7      	movs	r1, #167	; 0xa7
   188f8:	480d      	ldr	r0, [pc, #52]	; (18930 <k_delayed_work_submit_to_queue+0xd4>)
   188fa:	f001 f9b3 	bl	19c64 <assert_post_action>
   188fe:	f389 8811 	msr	BASEPRI, r9
   18902:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   18906:	4629      	mov	r1, r5
   18908:	4630      	mov	r0, r6
   1890a:	f004 fb19 	bl	1cf40 <k_work_submit_to_queue>
		return 0;
   1890e:	2400      	movs	r4, #0
}
   18910:	4620      	mov	r0, r4
   18912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   18916:	4642      	mov	r2, r8
   18918:	463b      	mov	r3, r7
   1891a:	4907      	ldr	r1, [pc, #28]	; (18938 <k_delayed_work_submit_to_queue+0xdc>)
   1891c:	f105 0010 	add.w	r0, r5, #16
   18920:	f000 f8ba 	bl	18a98 <z_add_timeout>
   18924:	e7c5      	b.n	188b2 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   18926:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1892a:	e7c2      	b.n	188b2 <k_delayed_work_submit_to_queue+0x56>
   1892c:	2000ae0c 	.word	0x2000ae0c
   18930:	0001e6f6 	.word	0x0001e6f6
   18934:	0001e6bc 	.word	0x0001e6bc
   18938:	0001cf69 	.word	0x0001cf69

0001893c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1893c:	b538      	push	{r3, r4, r5, lr}
   1893e:	4604      	mov	r4, r0
	__asm__ volatile(
   18940:	f04f 0320 	mov.w	r3, #32
   18944:	f3ef 8511 	mrs	r5, BASEPRI
   18948:	f383 8811 	msr	BASEPRI, r3
   1894c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18950:	4815      	ldr	r0, [pc, #84]	; (189a8 <k_delayed_work_cancel+0x6c>)
   18952:	f7ff ff0d 	bl	18770 <z_spin_lock_valid>
   18956:	b940      	cbnz	r0, 1896a <k_delayed_work_cancel+0x2e>
   18958:	4914      	ldr	r1, [pc, #80]	; (189ac <k_delayed_work_cancel+0x70>)
   1895a:	4815      	ldr	r0, [pc, #84]	; (189b0 <k_delayed_work_cancel+0x74>)
   1895c:	227c      	movs	r2, #124	; 0x7c
   1895e:	f000 fedb 	bl	19718 <printk>
   18962:	217c      	movs	r1, #124	; 0x7c
   18964:	4811      	ldr	r0, [pc, #68]	; (189ac <k_delayed_work_cancel+0x70>)
   18966:	f001 f97d 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   1896a:	480f      	ldr	r0, [pc, #60]	; (189a8 <k_delayed_work_cancel+0x6c>)
   1896c:	f7ff ff1c 	bl	187a8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   18970:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18972:	b1b3      	cbz	r3, 189a2 <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   18974:	4620      	mov	r0, r4
   18976:	f004 fafc 	bl	1cf72 <work_cancel>
   1897a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1897c:	480a      	ldr	r0, [pc, #40]	; (189a8 <k_delayed_work_cancel+0x6c>)
   1897e:	f7ff ff05 	bl	1878c <z_spin_unlock_valid>
   18982:	b940      	cbnz	r0, 18996 <k_delayed_work_cancel+0x5a>
   18984:	4909      	ldr	r1, [pc, #36]	; (189ac <k_delayed_work_cancel+0x70>)
   18986:	480a      	ldr	r0, [pc, #40]	; (189b0 <k_delayed_work_cancel+0x74>)
   18988:	22a7      	movs	r2, #167	; 0xa7
   1898a:	f000 fec5 	bl	19718 <printk>
   1898e:	21a7      	movs	r1, #167	; 0xa7
   18990:	4806      	ldr	r0, [pc, #24]	; (189ac <k_delayed_work_cancel+0x70>)
   18992:	f001 f967 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18996:	f385 8811 	msr	BASEPRI, r5
   1899a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1899e:	4620      	mov	r0, r4
   189a0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   189a2:	f06f 0415 	mvn.w	r4, #21
   189a6:	e7e9      	b.n	1897c <k_delayed_work_cancel+0x40>
   189a8:	2000ae0c 	.word	0x2000ae0c
   189ac:	0001e6f6 	.word	0x0001e6f6
   189b0:	0001e6bc 	.word	0x0001e6bc

000189b4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   189b4:	4a02      	ldr	r2, [pc, #8]	; (189c0 <boot_banner+0xc>)
   189b6:	4903      	ldr	r1, [pc, #12]	; (189c4 <boot_banner+0x10>)
   189b8:	4803      	ldr	r0, [pc, #12]	; (189c8 <boot_banner+0x14>)
   189ba:	f000 bead 	b.w	19718 <printk>
   189be:	bf00      	nop
   189c0:	00021195 	.word	0x00021195
   189c4:	0002135c 	.word	0x0002135c
   189c8:	00021369 	.word	0x00021369

000189cc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   189cc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   189ce:	4806      	ldr	r0, [pc, #24]	; (189e8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   189d0:	4a06      	ldr	r2, [pc, #24]	; (189ec <z_data_copy+0x20>)
   189d2:	4907      	ldr	r1, [pc, #28]	; (189f0 <z_data_copy+0x24>)
   189d4:	1a12      	subs	r2, r2, r0
   189d6:	f002 f8ff 	bl	1abd8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   189da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   189de:	4a05      	ldr	r2, [pc, #20]	; (189f4 <z_data_copy+0x28>)
   189e0:	4905      	ldr	r1, [pc, #20]	; (189f8 <z_data_copy+0x2c>)
   189e2:	4806      	ldr	r0, [pc, #24]	; (189fc <z_data_copy+0x30>)
   189e4:	f002 b8f8 	b.w	1abd8 <memcpy>
   189e8:	20008000 	.word	0x20008000
   189ec:	200087d8 	.word	0x200087d8
   189f0:	00021400 	.word	0x00021400
   189f4:	00000000 	.word	0x00000000
   189f8:	00021400 	.word	0x00021400
   189fc:	20008000 	.word	0x20008000

00018a00 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   18a00:	4b03      	ldr	r3, [pc, #12]	; (18a10 <elapsed+0x10>)
   18a02:	681b      	ldr	r3, [r3, #0]
   18a04:	b90b      	cbnz	r3, 18a0a <elapsed+0xa>
   18a06:	f7f3 b811 	b.w	ba2c <z_clock_elapsed>
}
   18a0a:	2000      	movs	r0, #0
   18a0c:	4770      	bx	lr
   18a0e:	bf00      	nop
   18a10:	2000ae10 	.word	0x2000ae10

00018a14 <next_timeout>:
	return list->head == list;
   18a14:	4b11      	ldr	r3, [pc, #68]	; (18a5c <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   18a16:	b510      	push	{r4, lr}
   18a18:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a1a:	429c      	cmp	r4, r3
   18a1c:	bf08      	it	eq
   18a1e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18a20:	f7ff ffee 	bl	18a00 <elapsed>
   18a24:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   18a26:	b16c      	cbz	r4, 18a44 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18a28:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   18a2c:	1ac0      	subs	r0, r0, r3
   18a2e:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   18a32:	2801      	cmp	r0, #1
   18a34:	f173 0200 	sbcs.w	r2, r3, #0
   18a38:	db0d      	blt.n	18a56 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18a3a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   18a3e:	f173 0300 	sbcs.w	r3, r3, #0
   18a42:	db01      	blt.n	18a48 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   18a44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18a48:	4b05      	ldr	r3, [pc, #20]	; (18a60 <next_timeout+0x4c>)
   18a4a:	695b      	ldr	r3, [r3, #20]
   18a4c:	b113      	cbz	r3, 18a54 <next_timeout+0x40>
   18a4e:	4298      	cmp	r0, r3
   18a50:	bfa8      	it	ge
   18a52:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18a54:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   18a56:	2000      	movs	r0, #0
   18a58:	e7f6      	b.n	18a48 <next_timeout+0x34>
   18a5a:	bf00      	nop
   18a5c:	2000854c 	.word	0x2000854c
   18a60:	2000adc4 	.word	0x2000adc4

00018a64 <remove_timeout>:
{
   18a64:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   18a66:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18a68:	b168      	cbz	r0, 18a86 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18a6a:	4a0a      	ldr	r2, [pc, #40]	; (18a94 <remove_timeout+0x30>)
   18a6c:	6852      	ldr	r2, [r2, #4]
   18a6e:	4290      	cmp	r0, r2
   18a70:	d009      	beq.n	18a86 <remove_timeout+0x22>
	if (next(t) != NULL) {
   18a72:	b143      	cbz	r3, 18a86 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18a74:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18a78:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18a7c:	1912      	adds	r2, r2, r4
   18a7e:	eb41 0105 	adc.w	r1, r1, r5
   18a82:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   18a86:	6842      	ldr	r2, [r0, #4]
   18a88:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18a8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18a8c:	2300      	movs	r3, #0
	node->prev = NULL;
   18a8e:	e9c0 3300 	strd	r3, r3, [r0]
}
   18a92:	bd30      	pop	{r4, r5, pc}
   18a94:	2000854c 	.word	0x2000854c

00018a98 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a98:	f1b3 3fff 	cmp.w	r3, #4294967295
   18a9c:	bf08      	it	eq
   18a9e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18aa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18aa6:	4604      	mov	r4, r0
   18aa8:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18aaa:	f000 808c 	beq.w	18bc6 <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18aae:	f06f 0601 	mvn.w	r6, #1
   18ab2:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   18ab6:	1c55      	adds	r5, r2, #1
   18ab8:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18abc:	1b73      	subs	r3, r6, r5
   18abe:	eb69 0307 	sbc.w	r3, r9, r7
   18ac2:	2b00      	cmp	r3, #0
   18ac4:	db0d      	blt.n	18ae2 <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   18ac6:	f7ff ff9b 	bl	18a00 <elapsed>
   18aca:	4b44      	ldr	r3, [pc, #272]	; (18bdc <z_add_timeout+0x144>)
   18acc:	e9d3 2300 	ldrd	r2, r3, [r3]
   18ad0:	1ab6      	subs	r6, r6, r2
   18ad2:	eb69 0303 	sbc.w	r3, r9, r3
   18ad6:	1b75      	subs	r5, r6, r5
   18ad8:	eb63 0707 	sbc.w	r7, r3, r7
   18adc:	1a2d      	subs	r5, r5, r0
   18ade:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   18ae2:	6823      	ldr	r3, [r4, #0]
   18ae4:	b143      	cbz	r3, 18af8 <z_add_timeout+0x60>
   18ae6:	493e      	ldr	r1, [pc, #248]	; (18be0 <z_add_timeout+0x148>)
   18ae8:	483e      	ldr	r0, [pc, #248]	; (18be4 <z_add_timeout+0x14c>)
   18aea:	2268      	movs	r2, #104	; 0x68
   18aec:	f000 fe14 	bl	19718 <printk>
   18af0:	2168      	movs	r1, #104	; 0x68
   18af2:	483b      	ldr	r0, [pc, #236]	; (18be0 <z_add_timeout+0x148>)
   18af4:	f001 f8b6 	bl	19c64 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   18af8:	2d01      	cmp	r5, #1
   18afa:	f177 0300 	sbcs.w	r3, r7, #0
   18afe:	bfbc      	itt	lt
   18b00:	2501      	movlt	r5, #1
   18b02:	2700      	movlt	r7, #0
	to->fn = fn;
   18b04:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   18b08:	f04f 0320 	mov.w	r3, #32
   18b0c:	f3ef 8611 	mrs	r6, BASEPRI
   18b10:	f383 8811 	msr	BASEPRI, r3
   18b14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b18:	4833      	ldr	r0, [pc, #204]	; (18be8 <z_add_timeout+0x150>)
   18b1a:	f7ff fe29 	bl	18770 <z_spin_lock_valid>
   18b1e:	b940      	cbnz	r0, 18b32 <z_add_timeout+0x9a>
   18b20:	4932      	ldr	r1, [pc, #200]	; (18bec <z_add_timeout+0x154>)
   18b22:	4830      	ldr	r0, [pc, #192]	; (18be4 <z_add_timeout+0x14c>)
   18b24:	227c      	movs	r2, #124	; 0x7c
   18b26:	f000 fdf7 	bl	19718 <printk>
   18b2a:	217c      	movs	r1, #124	; 0x7c
   18b2c:	482f      	ldr	r0, [pc, #188]	; (18bec <z_add_timeout+0x154>)
   18b2e:	f001 f899 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18b32:	482d      	ldr	r0, [pc, #180]	; (18be8 <z_add_timeout+0x150>)
   18b34:	f7ff fe38 	bl	187a8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18b38:	f7ff ff62 	bl	18a00 <elapsed>
	return list->head == list;
   18b3c:	4a2c      	ldr	r2, [pc, #176]	; (18bf0 <z_add_timeout+0x158>)
   18b3e:	1945      	adds	r5, r0, r5
   18b40:	6813      	ldr	r3, [r2, #0]
   18b42:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b46:	4293      	cmp	r3, r2
   18b48:	e9c4 5704 	strd	r5, r7, [r4, #16]
   18b4c:	d002      	beq.n	18b54 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   18b4e:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   18b52:	b933      	cbnz	r3, 18b62 <z_add_timeout+0xca>
	node->prev = list->tail;
   18b54:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   18b56:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   18b58:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18b5a:	6853      	ldr	r3, [r2, #4]
   18b5c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b5e:	6054      	str	r4, [r2, #4]
}
   18b60:	e011      	b.n	18b86 <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   18b62:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   18b66:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   18b6a:	4281      	cmp	r1, r0
   18b6c:	eb75 0e07 	sbcs.w	lr, r5, r7
   18b70:	da2b      	bge.n	18bca <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   18b72:	1a41      	subs	r1, r0, r1
   18b74:	eb67 0505 	sbc.w	r5, r7, r5
   18b78:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   18b7c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18b7e:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18b82:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18b84:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18b86:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b88:	4293      	cmp	r3, r2
   18b8a:	d00b      	beq.n	18ba4 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18b8c:	429c      	cmp	r4, r3
   18b8e:	d109      	bne.n	18ba4 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18b90:	f7ff ff40 	bl	18a14 <next_timeout>

			if (next_time == 0 ||
   18b94:	b118      	cbz	r0, 18b9e <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   18b96:	4b17      	ldr	r3, [pc, #92]	; (18bf4 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   18b98:	695b      	ldr	r3, [r3, #20]
   18b9a:	4283      	cmp	r3, r0
   18b9c:	d002      	beq.n	18ba4 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   18b9e:	2100      	movs	r1, #0
   18ba0:	f7f2 ff12 	bl	b9c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ba4:	4810      	ldr	r0, [pc, #64]	; (18be8 <z_add_timeout+0x150>)
   18ba6:	f7ff fdf1 	bl	1878c <z_spin_unlock_valid>
   18baa:	b940      	cbnz	r0, 18bbe <z_add_timeout+0x126>
   18bac:	490f      	ldr	r1, [pc, #60]	; (18bec <z_add_timeout+0x154>)
   18bae:	480d      	ldr	r0, [pc, #52]	; (18be4 <z_add_timeout+0x14c>)
   18bb0:	22a7      	movs	r2, #167	; 0xa7
   18bb2:	f000 fdb1 	bl	19718 <printk>
   18bb6:	21a7      	movs	r1, #167	; 0xa7
   18bb8:	480c      	ldr	r0, [pc, #48]	; (18bec <z_add_timeout+0x154>)
   18bba:	f001 f853 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18bbe:	f386 8811 	msr	BASEPRI, r6
   18bc2:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   18bca:	1a09      	subs	r1, r1, r0
   18bcc:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   18bd0:	4563      	cmp	r3, ip
   18bd2:	e9c4 1504 	strd	r1, r5, [r4, #16]
   18bd6:	d0bd      	beq.n	18b54 <z_add_timeout+0xbc>
   18bd8:	681b      	ldr	r3, [r3, #0]
   18bda:	e7ba      	b.n	18b52 <z_add_timeout+0xba>
   18bdc:	2000a450 	.word	0x2000a450
   18be0:	00021390 	.word	0x00021390
   18be4:	0001e6bc 	.word	0x0001e6bc
   18be8:	2000ae14 	.word	0x2000ae14
   18bec:	0001e6f6 	.word	0x0001e6f6
   18bf0:	2000854c 	.word	0x2000854c
   18bf4:	2000adc4 	.word	0x2000adc4

00018bf8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   18bf8:	b538      	push	{r3, r4, r5, lr}
   18bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   18bfc:	f04f 0320 	mov.w	r3, #32
   18c00:	f3ef 8511 	mrs	r5, BASEPRI
   18c04:	f383 8811 	msr	BASEPRI, r3
   18c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c0c:	4815      	ldr	r0, [pc, #84]	; (18c64 <z_abort_timeout+0x6c>)
   18c0e:	f7ff fdaf 	bl	18770 <z_spin_lock_valid>
   18c12:	b940      	cbnz	r0, 18c26 <z_abort_timeout+0x2e>
   18c14:	4914      	ldr	r1, [pc, #80]	; (18c68 <z_abort_timeout+0x70>)
   18c16:	4815      	ldr	r0, [pc, #84]	; (18c6c <z_abort_timeout+0x74>)
   18c18:	227c      	movs	r2, #124	; 0x7c
   18c1a:	f000 fd7d 	bl	19718 <printk>
   18c1e:	217c      	movs	r1, #124	; 0x7c
   18c20:	4811      	ldr	r0, [pc, #68]	; (18c68 <z_abort_timeout+0x70>)
   18c22:	f001 f81f 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c26:	480f      	ldr	r0, [pc, #60]	; (18c64 <z_abort_timeout+0x6c>)
   18c28:	f7ff fdbe 	bl	187a8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   18c2c:	6823      	ldr	r3, [r4, #0]
   18c2e:	b1b3      	cbz	r3, 18c5e <z_abort_timeout+0x66>
			remove_timeout(to);
   18c30:	4620      	mov	r0, r4
   18c32:	f7ff ff17 	bl	18a64 <remove_timeout>
			ret = 0;
   18c36:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c38:	480a      	ldr	r0, [pc, #40]	; (18c64 <z_abort_timeout+0x6c>)
   18c3a:	f7ff fda7 	bl	1878c <z_spin_unlock_valid>
   18c3e:	b940      	cbnz	r0, 18c52 <z_abort_timeout+0x5a>
   18c40:	4909      	ldr	r1, [pc, #36]	; (18c68 <z_abort_timeout+0x70>)
   18c42:	480a      	ldr	r0, [pc, #40]	; (18c6c <z_abort_timeout+0x74>)
   18c44:	22a7      	movs	r2, #167	; 0xa7
   18c46:	f000 fd67 	bl	19718 <printk>
   18c4a:	21a7      	movs	r1, #167	; 0xa7
   18c4c:	4806      	ldr	r0, [pc, #24]	; (18c68 <z_abort_timeout+0x70>)
   18c4e:	f001 f809 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18c52:	f385 8811 	msr	BASEPRI, r5
   18c56:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   18c5a:	4620      	mov	r0, r4
   18c5c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18c5e:	f06f 0415 	mvn.w	r4, #21
   18c62:	e7e9      	b.n	18c38 <z_abort_timeout+0x40>
   18c64:	2000ae14 	.word	0x2000ae14
   18c68:	0001e6f6 	.word	0x0001e6f6
   18c6c:	0001e6bc 	.word	0x0001e6bc

00018c70 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   18c70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18c72:	f04f 0320 	mov.w	r3, #32
   18c76:	f3ef 8511 	mrs	r5, BASEPRI
   18c7a:	f383 8811 	msr	BASEPRI, r3
   18c7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c82:	4813      	ldr	r0, [pc, #76]	; (18cd0 <z_get_next_timeout_expiry+0x60>)
   18c84:	f7ff fd74 	bl	18770 <z_spin_lock_valid>
   18c88:	b940      	cbnz	r0, 18c9c <z_get_next_timeout_expiry+0x2c>
   18c8a:	4912      	ldr	r1, [pc, #72]	; (18cd4 <z_get_next_timeout_expiry+0x64>)
   18c8c:	4812      	ldr	r0, [pc, #72]	; (18cd8 <z_get_next_timeout_expiry+0x68>)
   18c8e:	227c      	movs	r2, #124	; 0x7c
   18c90:	f000 fd42 	bl	19718 <printk>
   18c94:	217c      	movs	r1, #124	; 0x7c
   18c96:	480f      	ldr	r0, [pc, #60]	; (18cd4 <z_get_next_timeout_expiry+0x64>)
   18c98:	f000 ffe4 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c9c:	480c      	ldr	r0, [pc, #48]	; (18cd0 <z_get_next_timeout_expiry+0x60>)
   18c9e:	f7ff fd83 	bl	187a8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   18ca2:	f7ff feb7 	bl	18a14 <next_timeout>
   18ca6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ca8:	4809      	ldr	r0, [pc, #36]	; (18cd0 <z_get_next_timeout_expiry+0x60>)
   18caa:	f7ff fd6f 	bl	1878c <z_spin_unlock_valid>
   18cae:	b940      	cbnz	r0, 18cc2 <z_get_next_timeout_expiry+0x52>
   18cb0:	4908      	ldr	r1, [pc, #32]	; (18cd4 <z_get_next_timeout_expiry+0x64>)
   18cb2:	4809      	ldr	r0, [pc, #36]	; (18cd8 <z_get_next_timeout_expiry+0x68>)
   18cb4:	22a7      	movs	r2, #167	; 0xa7
   18cb6:	f000 fd2f 	bl	19718 <printk>
   18cba:	21a7      	movs	r1, #167	; 0xa7
   18cbc:	4805      	ldr	r0, [pc, #20]	; (18cd4 <z_get_next_timeout_expiry+0x64>)
   18cbe:	f000 ffd1 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18cc2:	f385 8811 	msr	BASEPRI, r5
   18cc6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   18cca:	4620      	mov	r0, r4
   18ccc:	bd38      	pop	{r3, r4, r5, pc}
   18cce:	bf00      	nop
   18cd0:	2000ae14 	.word	0x2000ae14
   18cd4:	0001e6f6 	.word	0x0001e6f6
   18cd8:	0001e6bc 	.word	0x0001e6bc

00018cdc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   18cdc:	b570      	push	{r4, r5, r6, lr}
   18cde:	4604      	mov	r4, r0
   18ce0:	460d      	mov	r5, r1
	__asm__ volatile(
   18ce2:	f04f 0320 	mov.w	r3, #32
   18ce6:	f3ef 8611 	mrs	r6, BASEPRI
   18cea:	f383 8811 	msr	BASEPRI, r3
   18cee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18cf2:	4816      	ldr	r0, [pc, #88]	; (18d4c <z_set_timeout_expiry+0x70>)
   18cf4:	f7ff fd3c 	bl	18770 <z_spin_lock_valid>
   18cf8:	b940      	cbnz	r0, 18d0c <z_set_timeout_expiry+0x30>
   18cfa:	4915      	ldr	r1, [pc, #84]	; (18d50 <z_set_timeout_expiry+0x74>)
   18cfc:	4815      	ldr	r0, [pc, #84]	; (18d54 <z_set_timeout_expiry+0x78>)
   18cfe:	227c      	movs	r2, #124	; 0x7c
   18d00:	f000 fd0a 	bl	19718 <printk>
   18d04:	217c      	movs	r1, #124	; 0x7c
   18d06:	4812      	ldr	r0, [pc, #72]	; (18d50 <z_set_timeout_expiry+0x74>)
   18d08:	f000 ffac 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d0c:	480f      	ldr	r0, [pc, #60]	; (18d4c <z_set_timeout_expiry+0x70>)
   18d0e:	f7ff fd4b 	bl	187a8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   18d12:	f7ff fe7f 	bl	18a14 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18d16:	2801      	cmp	r0, #1
   18d18:	dd05      	ble.n	18d26 <z_set_timeout_expiry+0x4a>
   18d1a:	42a0      	cmp	r0, r4
   18d1c:	dd03      	ble.n	18d26 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   18d1e:	4629      	mov	r1, r5
   18d20:	4620      	mov	r0, r4
   18d22:	f7f2 fe51 	bl	b9c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d26:	4809      	ldr	r0, [pc, #36]	; (18d4c <z_set_timeout_expiry+0x70>)
   18d28:	f7ff fd30 	bl	1878c <z_spin_unlock_valid>
   18d2c:	b940      	cbnz	r0, 18d40 <z_set_timeout_expiry+0x64>
   18d2e:	4908      	ldr	r1, [pc, #32]	; (18d50 <z_set_timeout_expiry+0x74>)
   18d30:	4808      	ldr	r0, [pc, #32]	; (18d54 <z_set_timeout_expiry+0x78>)
   18d32:	22a7      	movs	r2, #167	; 0xa7
   18d34:	f000 fcf0 	bl	19718 <printk>
   18d38:	21a7      	movs	r1, #167	; 0xa7
   18d3a:	4805      	ldr	r0, [pc, #20]	; (18d50 <z_set_timeout_expiry+0x74>)
   18d3c:	f000 ff92 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18d40:	f386 8811 	msr	BASEPRI, r6
   18d44:	f3bf 8f6f 	isb	sy
		}
	}
}
   18d48:	bd70      	pop	{r4, r5, r6, pc}
   18d4a:	bf00      	nop
   18d4c:	2000ae14 	.word	0x2000ae14
   18d50:	0001e6f6 	.word	0x0001e6f6
   18d54:	0001e6bc 	.word	0x0001e6bc

00018d58 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   18d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18d5c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18d5e:	f7fe fe61 	bl	17a24 <z_time_slice>
	__asm__ volatile(
   18d62:	f04f 0320 	mov.w	r3, #32
   18d66:	f3ef 8511 	mrs	r5, BASEPRI
   18d6a:	f383 8811 	msr	BASEPRI, r3
   18d6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d72:	4842      	ldr	r0, [pc, #264]	; (18e7c <z_clock_announce+0x124>)
   18d74:	f7ff fcfc 	bl	18770 <z_spin_lock_valid>
   18d78:	b940      	cbnz	r0, 18d8c <z_clock_announce+0x34>
   18d7a:	4941      	ldr	r1, [pc, #260]	; (18e80 <z_clock_announce+0x128>)
   18d7c:	4841      	ldr	r0, [pc, #260]	; (18e84 <z_clock_announce+0x12c>)
   18d7e:	227c      	movs	r2, #124	; 0x7c
   18d80:	f000 fcca 	bl	19718 <printk>
   18d84:	217c      	movs	r1, #124	; 0x7c
   18d86:	483e      	ldr	r0, [pc, #248]	; (18e80 <z_clock_announce+0x128>)
   18d88:	f000 ff6c 	bl	19c64 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   18d8c:	4f3e      	ldr	r7, [pc, #248]	; (18e88 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   18d8e:	483b      	ldr	r0, [pc, #236]	; (18e7c <z_clock_announce+0x124>)
	return list->head == list;
   18d90:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 18e8c <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   18d94:	4e3e      	ldr	r6, [pc, #248]	; (18e90 <z_clock_announce+0x138>)
   18d96:	f7ff fd07 	bl	187a8 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   18d9a:	603c      	str	r4, [r7, #0]
   18d9c:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18da0:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18da2:	4544      	cmp	r4, r8
   18da4:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   18da8:	e9d6 1e00 	ldrd	r1, lr, [r6]
   18dac:	d00b      	beq.n	18dc6 <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18dae:	b154      	cbz	r4, 18dc6 <z_clock_announce+0x6e>
   18db0:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   18db4:	429a      	cmp	r2, r3
   18db6:	eb70 090c 	sbcs.w	r9, r0, ip
   18dba:	da23      	bge.n	18e04 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18dbc:	1a9b      	subs	r3, r3, r2
   18dbe:	eb6c 0c00 	sbc.w	ip, ip, r0
   18dc2:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   18dc6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   18dc8:	1852      	adds	r2, r2, r1
   18dca:	eb4e 0000 	adc.w	r0, lr, r0
   18dce:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   18dd2:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   18dd4:	f7ff fe1e 	bl	18a14 <next_timeout>
   18dd8:	4621      	mov	r1, r4
   18dda:	f7f2 fdf5 	bl	b9c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dde:	4827      	ldr	r0, [pc, #156]	; (18e7c <z_clock_announce+0x124>)
   18de0:	f7ff fcd4 	bl	1878c <z_spin_unlock_valid>
   18de4:	b940      	cbnz	r0, 18df8 <z_clock_announce+0xa0>
   18de6:	4926      	ldr	r1, [pc, #152]	; (18e80 <z_clock_announce+0x128>)
   18de8:	4826      	ldr	r0, [pc, #152]	; (18e84 <z_clock_announce+0x12c>)
   18dea:	22a7      	movs	r2, #167	; 0xa7
   18dec:	f000 fc94 	bl	19718 <printk>
   18df0:	21a7      	movs	r1, #167	; 0xa7
   18df2:	4823      	ldr	r0, [pc, #140]	; (18e80 <z_clock_announce+0x128>)
   18df4:	f000 ff36 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18df8:	f385 8811 	msr	BASEPRI, r5
   18dfc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   18e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   18e04:	1859      	adds	r1, r3, r1
   18e06:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   18e0a:	1ad3      	subs	r3, r2, r3
   18e0c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   18e0e:	2200      	movs	r2, #0
   18e10:	2300      	movs	r3, #0
		curr_tick += dt;
   18e12:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   18e16:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   18e1a:	4620      	mov	r0, r4
   18e1c:	f7ff fe22 	bl	18a64 <remove_timeout>
   18e20:	4816      	ldr	r0, [pc, #88]	; (18e7c <z_clock_announce+0x124>)
   18e22:	f7ff fcb3 	bl	1878c <z_spin_unlock_valid>
   18e26:	b940      	cbnz	r0, 18e3a <z_clock_announce+0xe2>
   18e28:	4915      	ldr	r1, [pc, #84]	; (18e80 <z_clock_announce+0x128>)
   18e2a:	4816      	ldr	r0, [pc, #88]	; (18e84 <z_clock_announce+0x12c>)
   18e2c:	22a7      	movs	r2, #167	; 0xa7
   18e2e:	f000 fc73 	bl	19718 <printk>
   18e32:	21a7      	movs	r1, #167	; 0xa7
   18e34:	4812      	ldr	r0, [pc, #72]	; (18e80 <z_clock_announce+0x128>)
   18e36:	f000 ff15 	bl	19c64 <assert_post_action>
   18e3a:	f385 8811 	msr	BASEPRI, r5
   18e3e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18e42:	4620      	mov	r0, r4
   18e44:	68a3      	ldr	r3, [r4, #8]
   18e46:	4798      	blx	r3
	__asm__ volatile(
   18e48:	f04f 0320 	mov.w	r3, #32
   18e4c:	f3ef 8511 	mrs	r5, BASEPRI
   18e50:	f383 8811 	msr	BASEPRI, r3
   18e54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e58:	4808      	ldr	r0, [pc, #32]	; (18e7c <z_clock_announce+0x124>)
   18e5a:	f7ff fc89 	bl	18770 <z_spin_lock_valid>
   18e5e:	b940      	cbnz	r0, 18e72 <z_clock_announce+0x11a>
   18e60:	4907      	ldr	r1, [pc, #28]	; (18e80 <z_clock_announce+0x128>)
   18e62:	4808      	ldr	r0, [pc, #32]	; (18e84 <z_clock_announce+0x12c>)
   18e64:	227c      	movs	r2, #124	; 0x7c
   18e66:	f000 fc57 	bl	19718 <printk>
   18e6a:	217c      	movs	r1, #124	; 0x7c
   18e6c:	4804      	ldr	r0, [pc, #16]	; (18e80 <z_clock_announce+0x128>)
   18e6e:	f000 fef9 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e72:	4802      	ldr	r0, [pc, #8]	; (18e7c <z_clock_announce+0x124>)
   18e74:	f7ff fc98 	bl	187a8 <z_spin_lock_set_owner>
	return k;
   18e78:	e790      	b.n	18d9c <z_clock_announce+0x44>
   18e7a:	bf00      	nop
   18e7c:	2000ae14 	.word	0x2000ae14
   18e80:	0001e6f6 	.word	0x0001e6f6
   18e84:	0001e6bc 	.word	0x0001e6bc
   18e88:	2000ae10 	.word	0x2000ae10
   18e8c:	2000854c 	.word	0x2000854c
   18e90:	2000a450 	.word	0x2000a450

00018e94 <z_tick_get>:

int64_t z_tick_get(void)
{
   18e94:	b570      	push	{r4, r5, r6, lr}
   18e96:	f04f 0320 	mov.w	r3, #32
   18e9a:	f3ef 8611 	mrs	r6, BASEPRI
   18e9e:	f383 8811 	msr	BASEPRI, r3
   18ea2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ea6:	4816      	ldr	r0, [pc, #88]	; (18f00 <z_tick_get+0x6c>)
   18ea8:	f7ff fc62 	bl	18770 <z_spin_lock_valid>
   18eac:	b940      	cbnz	r0, 18ec0 <z_tick_get+0x2c>
   18eae:	4915      	ldr	r1, [pc, #84]	; (18f04 <z_tick_get+0x70>)
   18eb0:	4815      	ldr	r0, [pc, #84]	; (18f08 <z_tick_get+0x74>)
   18eb2:	227c      	movs	r2, #124	; 0x7c
   18eb4:	f000 fc30 	bl	19718 <printk>
   18eb8:	217c      	movs	r1, #124	; 0x7c
   18eba:	4812      	ldr	r0, [pc, #72]	; (18f04 <z_tick_get+0x70>)
   18ebc:	f000 fed2 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   18ec0:	480f      	ldr	r0, [pc, #60]	; (18f00 <z_tick_get+0x6c>)
   18ec2:	f7ff fc71 	bl	187a8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   18ec6:	f7f2 fdb1 	bl	ba2c <z_clock_elapsed>
   18eca:	4b10      	ldr	r3, [pc, #64]	; (18f0c <z_tick_get+0x78>)
   18ecc:	e9d3 4500 	ldrd	r4, r5, [r3]
   18ed0:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ed2:	480b      	ldr	r0, [pc, #44]	; (18f00 <z_tick_get+0x6c>)
   18ed4:	f145 0500 	adc.w	r5, r5, #0
   18ed8:	f7ff fc58 	bl	1878c <z_spin_unlock_valid>
   18edc:	b940      	cbnz	r0, 18ef0 <z_tick_get+0x5c>
   18ede:	4909      	ldr	r1, [pc, #36]	; (18f04 <z_tick_get+0x70>)
   18ee0:	4809      	ldr	r0, [pc, #36]	; (18f08 <z_tick_get+0x74>)
   18ee2:	22a7      	movs	r2, #167	; 0xa7
   18ee4:	f000 fc18 	bl	19718 <printk>
   18ee8:	21a7      	movs	r1, #167	; 0xa7
   18eea:	4806      	ldr	r0, [pc, #24]	; (18f04 <z_tick_get+0x70>)
   18eec:	f000 feba 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   18ef0:	f386 8811 	msr	BASEPRI, r6
   18ef4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   18ef8:	4620      	mov	r0, r4
   18efa:	4629      	mov	r1, r5
   18efc:	bd70      	pop	{r4, r5, r6, pc}
   18efe:	bf00      	nop
   18f00:	2000ae14 	.word	0x2000ae14
   18f04:	0001e6f6 	.word	0x0001e6f6
   18f08:	0001e6bc 	.word	0x0001e6bc
   18f0c:	2000a450 	.word	0x2000a450

00018f10 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   18f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   18f14:	6884      	ldr	r4, [r0, #8]
{
   18f16:	4605      	mov	r5, r0
   18f18:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   18f1a:	b1b4      	cbz	r4, 18f4a <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   18f1c:	7863      	ldrb	r3, [r4, #1]
   18f1e:	2b01      	cmp	r3, #1
   18f20:	d145      	bne.n	18fae <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   18f22:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   18f26:	d10a      	bne.n	18f3e <signal_poll_event+0x2e>
   18f28:	22e3      	movs	r2, #227	; 0xe3
   18f2a:	492d      	ldr	r1, [pc, #180]	; (18fe0 <signal_poll_event+0xd0>)
   18f2c:	482d      	ldr	r0, [pc, #180]	; (18fe4 <signal_poll_event+0xd4>)
   18f2e:	f000 fbf3 	bl	19718 <printk>
   18f32:	21e3      	movs	r1, #227	; 0xe3
   18f34:	482a      	ldr	r0, [pc, #168]	; (18fe0 <signal_poll_event+0xd0>)
   18f36:	f000 fe95 	bl	19c64 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   18f3a:	7b7b      	ldrb	r3, [r7, #13]
   18f3c:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   18f3e:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   18f42:	f013 0302 	ands.w	r3, r3, #2
   18f46:	d10a      	bne.n	18f5e <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   18f48:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   18f4a:	2000      	movs	r0, #0
	event->state |= state;
   18f4c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   18f4e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   18f50:	f3c3 3104 	ubfx	r1, r3, #12, #5
   18f54:	430e      	orrs	r6, r1
   18f56:	f366 3310 	bfi	r3, r6, #12, #5
   18f5a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   18f5c:	e00b      	b.n	18f76 <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   18f5e:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   18f62:	f1b3 3fff 	cmp.w	r3, #4294967295
   18f66:	bf08      	it	eq
   18f68:	f112 0f02 	cmneq.w	r2, #2
   18f6c:	d105      	bne.n	18f7a <signal_poll_event+0x6a>
		poller->is_polling = false;
   18f6e:	2300      	movs	r3, #0
		return -EAGAIN;
   18f70:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   18f74:	7023      	strb	r3, [r4, #0]
}
   18f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   18f7a:	4638      	mov	r0, r7
   18f7c:	f7fe fb30 	bl	175e0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   18f80:	2e08      	cmp	r6, #8
   18f82:	bf0c      	ite	eq
   18f84:	f06f 0303 	mvneq.w	r3, #3
   18f88:	2300      	movne	r3, #0
   18f8a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18f8c:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   18f90:	06db      	lsls	r3, r3, #27
   18f92:	d104      	bne.n	18f9e <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   18f94:	f854 8c54 	ldr.w	r8, [r4, #-84]
   18f98:	f1b8 0f00 	cmp.w	r8, #0
   18f9c:	d001      	beq.n	18fa2 <signal_poll_event+0x92>
		poller->is_polling = false;
   18f9e:	2300      	movs	r3, #0
   18fa0:	e7d2      	b.n	18f48 <signal_poll_event+0x38>
	z_ready_thread(thread);
   18fa2:	4638      	mov	r0, r7
   18fa4:	f7fe fc36 	bl	17814 <z_ready_thread>
		poller->is_polling = false;
   18fa8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   18fac:	e7cd      	b.n	18f4a <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   18fae:	2b02      	cmp	r3, #2
   18fb0:	d1f5      	bne.n	18f9e <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   18fb2:	7823      	ldrb	r3, [r4, #0]
   18fb4:	2b00      	cmp	r3, #0
   18fb6:	d0c8      	beq.n	18f4a <signal_poll_event+0x3a>
   18fb8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   18fbc:	b177      	cbz	r7, 18fdc <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   18fbe:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   18fc2:	f1a4 0910 	sub.w	r9, r4, #16
   18fc6:	f104 0010 	add.w	r0, r4, #16
   18fca:	f7ff fe15 	bl	18bf8 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   18fce:	4649      	mov	r1, r9
   18fd0:	4638      	mov	r0, r7
		twork->poll_result = 0;
   18fd2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   18fd6:	f004 f83d 	bl	1d054 <k_work_submit_to_queue>
   18fda:	e7e5      	b.n	18fa8 <signal_poll_event+0x98>
		poller->is_polling = false;
   18fdc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   18fde:	e7b4      	b.n	18f4a <signal_poll_event+0x3a>
   18fe0:	000213b4 	.word	0x000213b4
   18fe4:	0001e6bc 	.word	0x0001e6bc

00018fe8 <register_events>:
{
   18fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   18fec:	2600      	movs	r6, #0
{
   18fee:	4614      	mov	r4, r2
   18ff0:	4681      	mov	r9, r0
	int events_registered = 0;
   18ff2:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ff4:	f8df a188 	ldr.w	sl, [pc, #392]	; 19180 <register_events+0x198>
   18ff8:	4f62      	ldr	r7, [pc, #392]	; (19184 <register_events+0x19c>)
   18ffa:	4d63      	ldr	r5, [pc, #396]	; (19188 <register_events+0x1a0>)
{
   18ffc:	9100      	str	r1, [sp, #0]
   18ffe:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   19000:	9b00      	ldr	r3, [sp, #0]
   19002:	429e      	cmp	r6, r3
   19004:	db03      	blt.n	1900e <register_events+0x26>
}
   19006:	4640      	mov	r0, r8
   19008:	b003      	add	sp, #12
   1900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1900e:	f04f 0220 	mov.w	r2, #32
   19012:	f3ef 8b11 	mrs	fp, BASEPRI
   19016:	f382 8811 	msr	BASEPRI, r2
   1901a:	f3bf 8f6f 	isb	sy
   1901e:	4650      	mov	r0, sl
   19020:	f7ff fba6 	bl	18770 <z_spin_lock_valid>
   19024:	b940      	cbnz	r0, 19038 <register_events+0x50>
   19026:	4639      	mov	r1, r7
   19028:	4628      	mov	r0, r5
   1902a:	227c      	movs	r2, #124	; 0x7c
   1902c:	f000 fb74 	bl	19718 <printk>
   19030:	217c      	movs	r1, #124	; 0x7c
   19032:	4638      	mov	r0, r7
   19034:	f000 fe16 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   19038:	4650      	mov	r0, sl
   1903a:	f7ff fbb5 	bl	187a8 <z_spin_lock_set_owner>
	switch (event->type) {
   1903e:	f899 200d 	ldrb.w	r2, [r9, #13]
   19042:	f002 020f 	and.w	r2, r2, #15
   19046:	2a04      	cmp	r2, #4
   19048:	d848      	bhi.n	190dc <register_events+0xf4>
   1904a:	e8df f002 	tbb	[pc, r2]
   1904e:	402f      	.short	0x402f
   19050:	4703      	.short	0x4703
   19052:	2b          	.byte	0x2b
   19053:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   19054:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19058:	6892      	ldr	r2, [r2, #8]
   1905a:	b33a      	cbz	r2, 190ac <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1905c:	2102      	movs	r1, #2
	event->poller = NULL;
   1905e:	2000      	movs	r0, #0
	event->state |= state;
   19060:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   19064:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   19068:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1906c:	ea41 010c 	orr.w	r1, r1, ip
   19070:	f361 3210 	bfi	r2, r1, #12, #5
   19074:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   19078:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1907a:	4650      	mov	r0, sl
   1907c:	f7ff fb86 	bl	1878c <z_spin_unlock_valid>
   19080:	b940      	cbnz	r0, 19094 <register_events+0xac>
   19082:	4639      	mov	r1, r7
   19084:	4628      	mov	r0, r5
   19086:	22a7      	movs	r2, #167	; 0xa7
   19088:	f000 fb46 	bl	19718 <printk>
   1908c:	21a7      	movs	r1, #167	; 0xa7
   1908e:	4638      	mov	r0, r7
   19090:	f000 fde8 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   19094:	f38b 8811 	msr	BASEPRI, fp
   19098:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1909c:	3601      	adds	r6, #1
   1909e:	f109 0914 	add.w	r9, r9, #20
   190a2:	e7ad      	b.n	19000 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   190a4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   190a8:	6812      	ldr	r2, [r2, #0]
   190aa:	bb0a      	cbnz	r2, 190f0 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   190ac:	9b01      	ldr	r3, [sp, #4]
   190ae:	2b00      	cmp	r3, #0
   190b0:	d1e3      	bne.n	1907a <register_events+0x92>
   190b2:	7822      	ldrb	r2, [r4, #0]
   190b4:	2a00      	cmp	r2, #0
   190b6:	d0e0      	beq.n	1907a <register_events+0x92>
	switch (event->type) {
   190b8:	f899 200d 	ldrb.w	r2, [r9, #13]
   190bc:	f002 020f 	and.w	r2, r2, #15
   190c0:	2a04      	cmp	r2, #4
   190c2:	d852      	bhi.n	1916a <register_events+0x182>
   190c4:	e8df f002 	tbb	[pc, r2]
   190c8:	51164029 	.word	0x51164029
   190cc:	2e          	.byte	0x2e
   190cd:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   190ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
   190d2:	6892      	ldr	r2, [r2, #8]
   190d4:	2a00      	cmp	r2, #0
   190d6:	d0e9      	beq.n	190ac <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   190d8:	2101      	movs	r1, #1
   190da:	e7c0      	b.n	1905e <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   190dc:	4628      	mov	r0, r5
   190de:	2254      	movs	r2, #84	; 0x54
   190e0:	492a      	ldr	r1, [pc, #168]	; (1918c <register_events+0x1a4>)
   190e2:	f000 fb19 	bl	19718 <printk>
   190e6:	2154      	movs	r1, #84	; 0x54
   190e8:	4828      	ldr	r0, [pc, #160]	; (1918c <register_events+0x1a4>)
   190ea:	f000 fdbb 	bl	19c64 <assert_post_action>
		break;
   190ee:	e7dd      	b.n	190ac <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   190f0:	2104      	movs	r1, #4
   190f2:	e7b4      	b.n	1905e <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   190f4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   190f8:	b942      	cbnz	r2, 1910c <register_events+0x124>
   190fa:	4628      	mov	r0, r5
   190fc:	4923      	ldr	r1, [pc, #140]	; (1918c <register_events+0x1a4>)
   190fe:	227e      	movs	r2, #126	; 0x7e
   19100:	f000 fb0a 	bl	19718 <printk>
   19104:	217e      	movs	r1, #126	; 0x7e
   19106:	4821      	ldr	r0, [pc, #132]	; (1918c <register_events+0x1a4>)
   19108:	f000 fdac 	bl	19c64 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1910c:	4622      	mov	r2, r4
   1910e:	4649      	mov	r1, r9
   19110:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19114:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   19116:	f003 ffb1 	bl	1d07c <add_event>
	event->poller = poller;
   1911a:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1911e:	f108 0801 	add.w	r8, r8, #1
   19122:	e7aa      	b.n	1907a <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   19124:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19128:	b942      	cbnz	r2, 1913c <register_events+0x154>
   1912a:	4628      	mov	r0, r5
   1912c:	4917      	ldr	r1, [pc, #92]	; (1918c <register_events+0x1a4>)
   1912e:	2282      	movs	r2, #130	; 0x82
   19130:	f000 faf2 	bl	19718 <printk>
   19134:	2182      	movs	r1, #130	; 0x82
   19136:	4815      	ldr	r0, [pc, #84]	; (1918c <register_events+0x1a4>)
   19138:	f000 fd94 	bl	19c64 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1913c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19140:	4622      	mov	r2, r4
   19142:	4649      	mov	r1, r9
   19144:	3014      	adds	r0, #20
   19146:	e7e6      	b.n	19116 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19148:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1914c:	b942      	cbnz	r2, 19160 <register_events+0x178>
   1914e:	4628      	mov	r0, r5
   19150:	490e      	ldr	r1, [pc, #56]	; (1918c <register_events+0x1a4>)
   19152:	2286      	movs	r2, #134	; 0x86
   19154:	f000 fae0 	bl	19718 <printk>
   19158:	2186      	movs	r1, #134	; 0x86
   1915a:	480c      	ldr	r0, [pc, #48]	; (1918c <register_events+0x1a4>)
   1915c:	f000 fd82 	bl	19c64 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   19160:	4622      	mov	r2, r4
   19162:	4649      	mov	r1, r9
   19164:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19168:	e7d5      	b.n	19116 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1916a:	4628      	mov	r0, r5
   1916c:	228d      	movs	r2, #141	; 0x8d
   1916e:	4907      	ldr	r1, [pc, #28]	; (1918c <register_events+0x1a4>)
   19170:	f000 fad2 	bl	19718 <printk>
   19174:	218d      	movs	r1, #141	; 0x8d
   19176:	4805      	ldr	r0, [pc, #20]	; (1918c <register_events+0x1a4>)
   19178:	f000 fd74 	bl	19c64 <assert_post_action>
		break;
   1917c:	e7cd      	b.n	1911a <register_events+0x132>
   1917e:	bf00      	nop
   19180:	2000ae18 	.word	0x2000ae18
   19184:	0001e6f6 	.word	0x0001e6f6
   19188:	0001e6bc 	.word	0x0001e6bc
   1918c:	000213b4 	.word	0x000213b4

00019190 <clear_event_registrations>:
{
   19190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19194:	2414      	movs	r4, #20
   19196:	4617      	mov	r7, r2
	while (num_events--) {
   19198:	460e      	mov	r6, r1
   1919a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1919e:	4d3d      	ldr	r5, [pc, #244]	; (19294 <clear_event_registrations+0x104>)
   191a0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 19298 <clear_event_registrations+0x108>
   191a4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1929c <clear_event_registrations+0x10c>
	while (num_events--) {
   191a8:	b90e      	cbnz	r6, 191ae <clear_event_registrations+0x1e>
}
   191aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   191ae:	2300      	movs	r3, #0
   191b0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   191b4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   191b8:	f1a4 0a14 	sub.w	sl, r4, #20
   191bc:	f003 030f 	and.w	r3, r3, #15
   191c0:	2b04      	cmp	r3, #4
   191c2:	d831      	bhi.n	19228 <clear_event_registrations+0x98>
   191c4:	e8df f003 	tbb	[pc, r3]
   191c8:	30032539 	.word	0x30032539
   191cc:	1a          	.byte	0x1a
   191cd:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   191ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   191d2:	b943      	cbnz	r3, 191e6 <clear_event_registrations+0x56>
   191d4:	4629      	mov	r1, r5
   191d6:	229d      	movs	r2, #157	; 0x9d
   191d8:	4640      	mov	r0, r8
   191da:	f000 fa9d 	bl	19718 <printk>
   191de:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   191e0:	4628      	mov	r0, r5
   191e2:	f000 fd3f 	bl	19c64 <assert_post_action>
	return node->next != NULL;
   191e6:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   191ea:	b333      	cbz	r3, 1923a <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   191ec:	f854 2c10 	ldr.w	r2, [r4, #-16]
   191f0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   191f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   191f4:	2300      	movs	r3, #0
	node->prev = NULL;
   191f6:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   191fa:	e01e      	b.n	1923a <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   191fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19200:	2b00      	cmp	r3, #0
   19202:	d1f0      	bne.n	191e6 <clear_event_registrations+0x56>
   19204:	4629      	mov	r1, r5
   19206:	22a1      	movs	r2, #161	; 0xa1
   19208:	4640      	mov	r0, r8
   1920a:	f000 fa85 	bl	19718 <printk>
   1920e:	21a1      	movs	r1, #161	; 0xa1
   19210:	e7e6      	b.n	191e0 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19212:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19216:	2b00      	cmp	r3, #0
   19218:	d1e5      	bne.n	191e6 <clear_event_registrations+0x56>
   1921a:	4629      	mov	r1, r5
   1921c:	22a5      	movs	r2, #165	; 0xa5
   1921e:	4640      	mov	r0, r8
   19220:	f000 fa7a 	bl	19718 <printk>
   19224:	21a5      	movs	r1, #165	; 0xa5
   19226:	e7db      	b.n	191e0 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   19228:	4629      	mov	r1, r5
   1922a:	4640      	mov	r0, r8
   1922c:	22ac      	movs	r2, #172	; 0xac
   1922e:	f000 fa73 	bl	19718 <printk>
   19232:	21ac      	movs	r1, #172	; 0xac
   19234:	4628      	mov	r0, r5
   19236:	f000 fd15 	bl	19c64 <assert_post_action>
   1923a:	4648      	mov	r0, r9
   1923c:	f7ff faa6 	bl	1878c <z_spin_unlock_valid>
   19240:	b940      	cbnz	r0, 19254 <clear_event_registrations+0xc4>
   19242:	4640      	mov	r0, r8
   19244:	4916      	ldr	r1, [pc, #88]	; (192a0 <clear_event_registrations+0x110>)
   19246:	22a7      	movs	r2, #167	; 0xa7
   19248:	f000 fa66 	bl	19718 <printk>
   1924c:	21a7      	movs	r1, #167	; 0xa7
   1924e:	4814      	ldr	r0, [pc, #80]	; (192a0 <clear_event_registrations+0x110>)
   19250:	f000 fd08 	bl	19c64 <assert_post_action>
   19254:	f387 8811 	msr	BASEPRI, r7
   19258:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1925c:	f04f 0320 	mov.w	r3, #32
   19260:	f3ef 8711 	mrs	r7, BASEPRI
   19264:	f383 8811 	msr	BASEPRI, r3
   19268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1926c:	4648      	mov	r0, r9
   1926e:	f7ff fa7f 	bl	18770 <z_spin_lock_valid>
   19272:	b940      	cbnz	r0, 19286 <clear_event_registrations+0xf6>
   19274:	4640      	mov	r0, r8
   19276:	490a      	ldr	r1, [pc, #40]	; (192a0 <clear_event_registrations+0x110>)
   19278:	227c      	movs	r2, #124	; 0x7c
   1927a:	f000 fa4d 	bl	19718 <printk>
   1927e:	217c      	movs	r1, #124	; 0x7c
   19280:	4807      	ldr	r0, [pc, #28]	; (192a0 <clear_event_registrations+0x110>)
   19282:	f000 fcef 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   19286:	4648      	mov	r0, r9
   19288:	f7ff fa8e 	bl	187a8 <z_spin_lock_set_owner>
	return k;
   1928c:	4654      	mov	r4, sl
   1928e:	3e01      	subs	r6, #1
   19290:	e78a      	b.n	191a8 <clear_event_registrations+0x18>
   19292:	bf00      	nop
   19294:	000213b4 	.word	0x000213b4
   19298:	0001e6bc 	.word	0x0001e6bc
   1929c:	2000ae18 	.word	0x2000ae18
   192a0:	0001e6f6 	.word	0x0001e6f6

000192a4 <k_poll_event_init>:
{
   192a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192a6:	4605      	mov	r5, r0
   192a8:	460f      	mov	r7, r1
   192aa:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   192ac:	4614      	mov	r4, r2
   192ae:	b142      	cbz	r2, 192c2 <k_poll_event_init+0x1e>
   192b0:	4915      	ldr	r1, [pc, #84]	; (19308 <k_poll_event_init+0x64>)
   192b2:	4816      	ldr	r0, [pc, #88]	; (1930c <k_poll_event_init+0x68>)
   192b4:	222d      	movs	r2, #45	; 0x2d
   192b6:	f000 fa2f 	bl	19718 <printk>
   192ba:	212d      	movs	r1, #45	; 0x2d
   192bc:	4812      	ldr	r0, [pc, #72]	; (19308 <k_poll_event_init+0x64>)
   192be:	f000 fcd1 	bl	19c64 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   192c2:	2f0f      	cmp	r7, #15
   192c4:	d908      	bls.n	192d8 <k_poll_event_init+0x34>
   192c6:	4910      	ldr	r1, [pc, #64]	; (19308 <k_poll_event_init+0x64>)
   192c8:	4810      	ldr	r0, [pc, #64]	; (1930c <k_poll_event_init+0x68>)
   192ca:	222f      	movs	r2, #47	; 0x2f
   192cc:	f000 fa24 	bl	19718 <printk>
   192d0:	212f      	movs	r1, #47	; 0x2f
   192d2:	480d      	ldr	r0, [pc, #52]	; (19308 <k_poll_event_init+0x64>)
   192d4:	f000 fcc6 	bl	19c64 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   192d8:	b946      	cbnz	r6, 192ec <k_poll_event_init+0x48>
   192da:	490b      	ldr	r1, [pc, #44]	; (19308 <k_poll_event_init+0x64>)
   192dc:	480b      	ldr	r0, [pc, #44]	; (1930c <k_poll_event_init+0x68>)
   192de:	2230      	movs	r2, #48	; 0x30
   192e0:	f000 fa1a 	bl	19718 <printk>
   192e4:	2130      	movs	r1, #48	; 0x30
   192e6:	4808      	ldr	r0, [pc, #32]	; (19308 <k_poll_event_init+0x64>)
   192e8:	f000 fcbc 	bl	19c64 <assert_post_action>
	event->poller = NULL;
   192ec:	2300      	movs	r3, #0
	event->type = type;
   192ee:	0464      	lsls	r4, r4, #17
   192f0:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   192f2:	60ab      	str	r3, [r5, #8]
	event->type = type;
   192f4:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   192f8:	7b2b      	ldrb	r3, [r5, #12]
   192fa:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   192fe:	433c      	orrs	r4, r7
   19300:	431c      	orrs	r4, r3
	event->obj = obj;
   19302:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   19306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19308:	000213b4 	.word	0x000213b4
   1930c:	0001e6bc 	.word	0x0001e6bc

00019310 <z_impl_k_poll>:
{
   19310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19314:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   19316:	4b64      	ldr	r3, [pc, #400]	; (194a8 <z_impl_k_poll+0x198>)
{
   19318:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1931a:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1931c:	2301      	movs	r3, #1
{
   1931e:	4688      	mov	r8, r1
   19320:	4616      	mov	r6, r2
   19322:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   19324:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   19328:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1932c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   19330:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   19334:	b153      	cbz	r3, 1934c <z_impl_k_poll+0x3c>
   19336:	495d      	ldr	r1, [pc, #372]	; (194ac <z_impl_k_poll+0x19c>)
   19338:	485d      	ldr	r0, [pc, #372]	; (194b0 <z_impl_k_poll+0x1a0>)
   1933a:	f44f 7282 	mov.w	r2, #260	; 0x104
   1933e:	f000 f9eb 	bl	19718 <printk>
   19342:	f44f 7182 	mov.w	r1, #260	; 0x104
   19346:	4859      	ldr	r0, [pc, #356]	; (194ac <z_impl_k_poll+0x19c>)
   19348:	f000 fc8c 	bl	19c64 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1934c:	b954      	cbnz	r4, 19364 <z_impl_k_poll+0x54>
   1934e:	4957      	ldr	r1, [pc, #348]	; (194ac <z_impl_k_poll+0x19c>)
   19350:	4857      	ldr	r0, [pc, #348]	; (194b0 <z_impl_k_poll+0x1a0>)
   19352:	f240 1205 	movw	r2, #261	; 0x105
   19356:	f000 f9df 	bl	19718 <printk>
   1935a:	f240 1105 	movw	r1, #261	; 0x105
   1935e:	4853      	ldr	r0, [pc, #332]	; (194ac <z_impl_k_poll+0x19c>)
   19360:	f000 fc80 	bl	19c64 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   19364:	f1b8 0f00 	cmp.w	r8, #0
   19368:	da0a      	bge.n	19380 <z_impl_k_poll+0x70>
   1936a:	4950      	ldr	r1, [pc, #320]	; (194ac <z_impl_k_poll+0x19c>)
   1936c:	4850      	ldr	r0, [pc, #320]	; (194b0 <z_impl_k_poll+0x1a0>)
   1936e:	f44f 7283 	mov.w	r2, #262	; 0x106
   19372:	f000 f9d1 	bl	19718 <printk>
   19376:	f44f 7183 	mov.w	r1, #262	; 0x106
   1937a:	484c      	ldr	r0, [pc, #304]	; (194ac <z_impl_k_poll+0x19c>)
   1937c:	f000 fc72 	bl	19c64 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   19380:	ea56 0305 	orrs.w	r3, r6, r5
   19384:	bf0c      	ite	eq
   19386:	2301      	moveq	r3, #1
   19388:	2300      	movne	r3, #0
   1938a:	4641      	mov	r1, r8
   1938c:	464a      	mov	r2, r9
   1938e:	4620      	mov	r0, r4
   19390:	f7ff fe2a 	bl	18fe8 <register_events>
   19394:	4680      	mov	r8, r0
   19396:	f04f 0320 	mov.w	r3, #32
   1939a:	f3ef 8911 	mrs	r9, BASEPRI
   1939e:	f383 8811 	msr	BASEPRI, r3
   193a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193a6:	4843      	ldr	r0, [pc, #268]	; (194b4 <z_impl_k_poll+0x1a4>)
   193a8:	f7ff f9e2 	bl	18770 <z_spin_lock_valid>
   193ac:	b940      	cbnz	r0, 193c0 <z_impl_k_poll+0xb0>
   193ae:	4942      	ldr	r1, [pc, #264]	; (194b8 <z_impl_k_poll+0x1a8>)
   193b0:	483f      	ldr	r0, [pc, #252]	; (194b0 <z_impl_k_poll+0x1a0>)
   193b2:	227c      	movs	r2, #124	; 0x7c
   193b4:	f000 f9b0 	bl	19718 <printk>
   193b8:	217c      	movs	r1, #124	; 0x7c
   193ba:	483f      	ldr	r0, [pc, #252]	; (194b8 <z_impl_k_poll+0x1a8>)
   193bc:	f000 fc52 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   193c0:	483c      	ldr	r0, [pc, #240]	; (194b4 <z_impl_k_poll+0x1a4>)
   193c2:	f7ff f9f1 	bl	187a8 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   193c6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   193ca:	b9d3      	cbnz	r3, 19402 <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   193cc:	4620      	mov	r0, r4
   193ce:	464a      	mov	r2, r9
   193d0:	4641      	mov	r1, r8
   193d2:	f7ff fedd 	bl	19190 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193d6:	4837      	ldr	r0, [pc, #220]	; (194b4 <z_impl_k_poll+0x1a4>)
   193d8:	f7ff f9d8 	bl	1878c <z_spin_unlock_valid>
   193dc:	b940      	cbnz	r0, 193f0 <z_impl_k_poll+0xe0>
   193de:	4936      	ldr	r1, [pc, #216]	; (194b8 <z_impl_k_poll+0x1a8>)
   193e0:	4833      	ldr	r0, [pc, #204]	; (194b0 <z_impl_k_poll+0x1a0>)
   193e2:	22a7      	movs	r2, #167	; 0xa7
   193e4:	f000 f998 	bl	19718 <printk>
   193e8:	21a7      	movs	r1, #167	; 0xa7
   193ea:	4833      	ldr	r0, [pc, #204]	; (194b8 <z_impl_k_poll+0x1a8>)
   193ec:	f000 fc3a 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   193f0:	f389 8811 	msr	BASEPRI, r9
   193f4:	f3bf 8f6f 	isb	sy
		return 0;
   193f8:	2500      	movs	r5, #0
}
   193fa:	4628      	mov	r0, r5
   193fc:	b005      	add	sp, #20
   193fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   19402:	2300      	movs	r3, #0
   19404:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19408:	ea56 0305 	orrs.w	r3, r6, r5
   1940c:	d113      	bne.n	19436 <z_impl_k_poll+0x126>
   1940e:	4829      	ldr	r0, [pc, #164]	; (194b4 <z_impl_k_poll+0x1a4>)
   19410:	f7ff f9bc 	bl	1878c <z_spin_unlock_valid>
   19414:	b940      	cbnz	r0, 19428 <z_impl_k_poll+0x118>
   19416:	4928      	ldr	r1, [pc, #160]	; (194b8 <z_impl_k_poll+0x1a8>)
   19418:	4825      	ldr	r0, [pc, #148]	; (194b0 <z_impl_k_poll+0x1a0>)
   1941a:	22a7      	movs	r2, #167	; 0xa7
   1941c:	f000 f97c 	bl	19718 <printk>
   19420:	21a7      	movs	r1, #167	; 0xa7
   19422:	4825      	ldr	r0, [pc, #148]	; (194b8 <z_impl_k_poll+0x1a8>)
   19424:	f000 fc1e 	bl	19c64 <assert_post_action>
   19428:	f389 8811 	msr	BASEPRI, r9
   1942c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19430:	f06f 050a 	mvn.w	r5, #10
   19434:	e7e1      	b.n	193fa <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19436:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1943a:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1943c:	4649      	mov	r1, r9
   1943e:	481d      	ldr	r0, [pc, #116]	; (194b4 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19440:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19444:	f7fe fd50 	bl	17ee8 <z_pend_curr>
   19448:	4605      	mov	r5, r0
	__asm__ volatile(
   1944a:	f04f 0320 	mov.w	r3, #32
   1944e:	f3ef 8611 	mrs	r6, BASEPRI
   19452:	f383 8811 	msr	BASEPRI, r3
   19456:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1945a:	4816      	ldr	r0, [pc, #88]	; (194b4 <z_impl_k_poll+0x1a4>)
   1945c:	f7ff f988 	bl	18770 <z_spin_lock_valid>
   19460:	b940      	cbnz	r0, 19474 <z_impl_k_poll+0x164>
   19462:	4915      	ldr	r1, [pc, #84]	; (194b8 <z_impl_k_poll+0x1a8>)
   19464:	4812      	ldr	r0, [pc, #72]	; (194b0 <z_impl_k_poll+0x1a0>)
   19466:	227c      	movs	r2, #124	; 0x7c
   19468:	f000 f956 	bl	19718 <printk>
   1946c:	217c      	movs	r1, #124	; 0x7c
   1946e:	4812      	ldr	r0, [pc, #72]	; (194b8 <z_impl_k_poll+0x1a8>)
   19470:	f000 fbf8 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   19474:	480f      	ldr	r0, [pc, #60]	; (194b4 <z_impl_k_poll+0x1a4>)
   19476:	f7ff f997 	bl	187a8 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1947a:	4620      	mov	r0, r4
   1947c:	4632      	mov	r2, r6
   1947e:	4641      	mov	r1, r8
   19480:	f7ff fe86 	bl	19190 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19484:	480b      	ldr	r0, [pc, #44]	; (194b4 <z_impl_k_poll+0x1a4>)
   19486:	f7ff f981 	bl	1878c <z_spin_unlock_valid>
   1948a:	b940      	cbnz	r0, 1949e <z_impl_k_poll+0x18e>
   1948c:	490a      	ldr	r1, [pc, #40]	; (194b8 <z_impl_k_poll+0x1a8>)
   1948e:	4808      	ldr	r0, [pc, #32]	; (194b0 <z_impl_k_poll+0x1a0>)
   19490:	22a7      	movs	r2, #167	; 0xa7
   19492:	f000 f941 	bl	19718 <printk>
   19496:	21a7      	movs	r1, #167	; 0xa7
   19498:	4807      	ldr	r0, [pc, #28]	; (194b8 <z_impl_k_poll+0x1a8>)
   1949a:	f000 fbe3 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   1949e:	f386 8811 	msr	BASEPRI, r6
   194a2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   194a6:	e7a8      	b.n	193fa <z_impl_k_poll+0xea>
   194a8:	2000adc4 	.word	0x2000adc4
   194ac:	000213b4 	.word	0x000213b4
   194b0:	0001e6bc 	.word	0x0001e6bc
   194b4:	2000ae18 	.word	0x2000ae18
   194b8:	0001e6f6 	.word	0x0001e6f6

000194bc <z_impl_k_poll_signal_raise>:
{
   194bc:	b570      	push	{r4, r5, r6, lr}
   194be:	4604      	mov	r4, r0
   194c0:	460d      	mov	r5, r1
	__asm__ volatile(
   194c2:	f04f 0320 	mov.w	r3, #32
   194c6:	f3ef 8611 	mrs	r6, BASEPRI
   194ca:	f383 8811 	msr	BASEPRI, r3
   194ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194d2:	481c      	ldr	r0, [pc, #112]	; (19544 <z_impl_k_poll_signal_raise+0x88>)
   194d4:	f7ff f94c 	bl	18770 <z_spin_lock_valid>
   194d8:	b940      	cbnz	r0, 194ec <z_impl_k_poll_signal_raise+0x30>
   194da:	491b      	ldr	r1, [pc, #108]	; (19548 <z_impl_k_poll_signal_raise+0x8c>)
   194dc:	481b      	ldr	r0, [pc, #108]	; (1954c <z_impl_k_poll_signal_raise+0x90>)
   194de:	227c      	movs	r2, #124	; 0x7c
   194e0:	f000 f91a 	bl	19718 <printk>
   194e4:	217c      	movs	r1, #124	; 0x7c
   194e6:	4818      	ldr	r0, [pc, #96]	; (19548 <z_impl_k_poll_signal_raise+0x8c>)
   194e8:	f000 fbbc 	bl	19c64 <assert_post_action>
	z_spin_lock_set_owner(l);
   194ec:	4815      	ldr	r0, [pc, #84]	; (19544 <z_impl_k_poll_signal_raise+0x88>)
   194ee:	f7ff f95b 	bl	187a8 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   194f2:	2101      	movs	r1, #1
	return list->head == list;
   194f4:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   194f6:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   194f8:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   194fa:	60a1      	str	r1, [r4, #8]
   194fc:	d112      	bne.n	19524 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194fe:	4811      	ldr	r0, [pc, #68]	; (19544 <z_impl_k_poll_signal_raise+0x88>)
   19500:	f7ff f944 	bl	1878c <z_spin_unlock_valid>
   19504:	b940      	cbnz	r0, 19518 <z_impl_k_poll_signal_raise+0x5c>
   19506:	4910      	ldr	r1, [pc, #64]	; (19548 <z_impl_k_poll_signal_raise+0x8c>)
   19508:	4810      	ldr	r0, [pc, #64]	; (1954c <z_impl_k_poll_signal_raise+0x90>)
   1950a:	22a7      	movs	r2, #167	; 0xa7
   1950c:	f000 f904 	bl	19718 <printk>
   19510:	21a7      	movs	r1, #167	; 0xa7
   19512:	480d      	ldr	r0, [pc, #52]	; (19548 <z_impl_k_poll_signal_raise+0x8c>)
   19514:	f000 fba6 	bl	19c64 <assert_post_action>
	__asm__ volatile(
   19518:	f386 8811 	msr	BASEPRI, r6
   1951c:	f3bf 8f6f 	isb	sy
		return 0;
   19520:	2400      	movs	r4, #0
   19522:	e00d      	b.n	19540 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   19524:	e9d0 3200 	ldrd	r3, r2, [r0]
   19528:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1952a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1952c:	2300      	movs	r3, #0
	node->prev = NULL;
   1952e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19532:	f7ff fced 	bl	18f10 <signal_poll_event>
	z_reschedule(&lock, key);
   19536:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19538:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1953a:	4802      	ldr	r0, [pc, #8]	; (19544 <z_impl_k_poll_signal_raise+0x88>)
   1953c:	f7fd ff96 	bl	1746c <z_reschedule>
}
   19540:	4620      	mov	r0, r4
   19542:	bd70      	pop	{r4, r5, r6, pc}
   19544:	2000ae18 	.word	0x2000ae18
   19548:	0001e6f6 	.word	0x0001e6f6
   1954c:	0001e6bc 	.word	0x0001e6bc

00019550 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   19550:	2803      	cmp	r0, #3
{
   19552:	b538      	push	{r3, r4, r5, lr}
   19554:	4604      	mov	r4, r0
   19556:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   19558:	d901      	bls.n	1955e <k_aligned_alloc+0xe>
   1955a:	0783      	lsls	r3, r0, #30
   1955c:	d008      	beq.n	19570 <k_aligned_alloc+0x20>
   1955e:	490e      	ldr	r1, [pc, #56]	; (19598 <k_aligned_alloc+0x48>)
   19560:	480e      	ldr	r0, [pc, #56]	; (1959c <k_aligned_alloc+0x4c>)
   19562:	223e      	movs	r2, #62	; 0x3e
   19564:	f000 f8d8 	bl	19718 <printk>
   19568:	213e      	movs	r1, #62	; 0x3e
   1956a:	480b      	ldr	r0, [pc, #44]	; (19598 <k_aligned_alloc+0x48>)
   1956c:	f000 fb7a 	bl	19c64 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   19570:	1e63      	subs	r3, r4, #1
   19572:	4223      	tst	r3, r4
   19574:	d008      	beq.n	19588 <k_aligned_alloc+0x38>
   19576:	4908      	ldr	r1, [pc, #32]	; (19598 <k_aligned_alloc+0x48>)
   19578:	4808      	ldr	r0, [pc, #32]	; (1959c <k_aligned_alloc+0x4c>)
   1957a:	2242      	movs	r2, #66	; 0x42
   1957c:	f000 f8cc 	bl	19718 <printk>
   19580:	2142      	movs	r1, #66	; 0x42
   19582:	4805      	ldr	r0, [pc, #20]	; (19598 <k_aligned_alloc+0x48>)
   19584:	f000 fb6e 	bl	19c64 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   19588:	462a      	mov	r2, r5
   1958a:	4621      	mov	r1, r4
}
   1958c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   19590:	4803      	ldr	r0, [pc, #12]	; (195a0 <k_aligned_alloc+0x50>)
   19592:	f003 bdb3 	b.w	1d0fc <z_heap_aligned_alloc>
   19596:	bf00      	nop
   19598:	000213d5 	.word	0x000213d5
   1959c:	0001e6bc 	.word	0x0001e6bc
   195a0:	20008634 	.word	0x20008634

000195a4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   195a4:	b538      	push	{r3, r4, r5, lr}
   195a6:	4604      	mov	r4, r0
   195a8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   195aa:	f003 fcba 	bl	1cf22 <k_is_in_isr>
   195ae:	b958      	cbnz	r0, 195c8 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   195b0:	4b07      	ldr	r3, [pc, #28]	; (195d0 <z_thread_aligned_alloc+0x2c>)
   195b2:	689b      	ldr	r3, [r3, #8]
   195b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   195b8:	b143      	cbz	r3, 195cc <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   195ba:	462a      	mov	r2, r5
   195bc:	4621      	mov	r1, r4
   195be:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   195c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   195c4:	f003 bd9a 	b.w	1d0fc <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   195c8:	4b02      	ldr	r3, [pc, #8]	; (195d4 <z_thread_aligned_alloc+0x30>)
   195ca:	e7f6      	b.n	195ba <z_thread_aligned_alloc+0x16>
}
   195cc:	bd38      	pop	{r3, r4, r5, pc}
   195ce:	bf00      	nop
   195d0:	2000adc4 	.word	0x2000adc4
   195d4:	20008634 	.word	0x20008634

000195d8 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   195d8:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   195da:	2003      	movs	r0, #3
   195dc:	f7fc b9ee 	b.w	159bc <dk_set_led>

000195e0 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   195e0:	f001 bdae 	b.w	1b140 <bt_conn_get_dst>

000195e4 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   195e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   195e6:	2364      	movs	r3, #100	; 0x64
{
   195e8:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   195ea:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   195ec:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   195ee:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   195f2:	b111      	cbz	r1, 195fa <u8_to_dec+0x16>
   195f4:	3d01      	subs	r5, #1
   195f6:	d101      	bne.n	195fc <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   195f8:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   195fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   195fc:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   19600:	429a      	cmp	r2, r3
		digit = value / divisor;
   19602:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   19604:	d202      	bcs.n	1960c <u8_to_dec+0x28>
   19606:	2b01      	cmp	r3, #1
   19608:	d000      	beq.n	1960c <u8_to_dec+0x28>
   1960a:	b130      	cbz	r0, 1961a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1960c:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1960e:	3901      	subs	r1, #1
			num_digits++;
   19610:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   19612:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   19616:	b2c9      	uxtb	r1, r1
			num_digits++;
   19618:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1961a:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1961e:	fbb3 f3fc 	udiv	r3, r3, ip
   19622:	b2d2      	uxtb	r2, r2
   19624:	e7e5      	b.n	195f2 <u8_to_dec+0xe>

00019626 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   19626:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1962a:	b2db      	uxtb	r3, r3
   1962c:	2b09      	cmp	r3, #9
   1962e:	d802      	bhi.n	19636 <char2hex+0x10>
		*x = c - '0';
   19630:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   19632:	2000      	movs	r0, #0
   19634:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   19636:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1963a:	2b05      	cmp	r3, #5
   1963c:	d802      	bhi.n	19644 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1963e:	3857      	subs	r0, #87	; 0x57
   19640:	7008      	strb	r0, [r1, #0]
   19642:	e7f6      	b.n	19632 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   19644:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19648:	2b05      	cmp	r3, #5
   1964a:	d801      	bhi.n	19650 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1964c:	3837      	subs	r0, #55	; 0x37
   1964e:	e7f7      	b.n	19640 <char2hex+0x1a>
		return -EINVAL;
   19650:	f06f 0015 	mvn.w	r0, #21
}
   19654:	4770      	bx	lr

00019656 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   19656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19658:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1965a:	f001 0001 	and.w	r0, r1, #1
   1965e:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   19662:	429d      	cmp	r5, r3
   19664:	ea4f 0651 	mov.w	r6, r1, lsr #1
   19668:	d903      	bls.n	19672 <hex2bin+0x1c>
		return 0;
   1966a:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1966c:	4628      	mov	r0, r5
   1966e:	b003      	add	sp, #12
   19670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   19672:	b158      	cbz	r0, 1968c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   19674:	7820      	ldrb	r0, [r4, #0]
   19676:	f10d 0107 	add.w	r1, sp, #7
   1967a:	f7ff ffd4 	bl	19626 <char2hex>
   1967e:	2800      	cmp	r0, #0
   19680:	dbf3      	blt.n	1966a <hex2bin+0x14>
		buf[0] = dec;
   19682:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   19686:	3401      	adds	r4, #1
		buf[0] = dec;
   19688:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1968c:	3401      	adds	r4, #1
   1968e:	4416      	add	r6, r2
   19690:	42b2      	cmp	r2, r6
   19692:	d0eb      	beq.n	1966c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   19694:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19698:	f10d 0107 	add.w	r1, sp, #7
   1969c:	f7ff ffc3 	bl	19626 <char2hex>
   196a0:	2800      	cmp	r0, #0
   196a2:	dbe2      	blt.n	1966a <hex2bin+0x14>
		buf[i] = dec << 4;
   196a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   196a8:	011b      	lsls	r3, r3, #4
   196aa:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   196ac:	f814 0b02 	ldrb.w	r0, [r4], #2
   196b0:	f7ff ffb9 	bl	19626 <char2hex>
   196b4:	2800      	cmp	r0, #0
   196b6:	dbd8      	blt.n	1966a <hex2bin+0x14>
		buf[i] += dec;
   196b8:	7813      	ldrb	r3, [r2, #0]
   196ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
   196be:	440b      	add	r3, r1
   196c0:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   196c4:	e7e4      	b.n	19690 <hex2bin+0x3a>

000196c6 <sys_notify_validate>:
	if (notify == NULL) {
   196c6:	4603      	mov	r3, r0
   196c8:	b140      	cbz	r0, 196dc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   196ca:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   196cc:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   196d0:	2a02      	cmp	r2, #2
   196d2:	d006      	beq.n	196e2 <sys_notify_validate+0x1c>
   196d4:	2a03      	cmp	r2, #3
   196d6:	d004      	beq.n	196e2 <sys_notify_validate+0x1c>
   196d8:	2a01      	cmp	r2, #1
   196da:	d005      	beq.n	196e8 <sys_notify_validate+0x22>
		return -EINVAL;
   196dc:	f06f 0015 	mvn.w	r0, #21
}
   196e0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   196e2:	681a      	ldr	r2, [r3, #0]
   196e4:	2a00      	cmp	r2, #0
   196e6:	d0f9      	beq.n	196dc <sys_notify_validate+0x16>
		notify->result = 0;
   196e8:	2000      	movs	r0, #0
   196ea:	6098      	str	r0, [r3, #8]
   196ec:	4770      	bx	lr

000196ee <arch_printk_char_out>:
}
   196ee:	2000      	movs	r0, #0
   196f0:	4770      	bx	lr

000196f2 <str_out>:
{
   196f2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   196f4:	688a      	ldr	r2, [r1, #8]
   196f6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   196f8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   196fa:	b114      	cbz	r4, 19702 <str_out+0x10>
   196fc:	684b      	ldr	r3, [r1, #4]
   196fe:	4293      	cmp	r3, r2
   19700:	dc01      	bgt.n	19706 <str_out+0x14>
		ctx->count++;
   19702:	608d      	str	r5, [r1, #8]
}
   19704:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19706:	3b01      	subs	r3, #1
   19708:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1970a:	bf08      	it	eq
   1970c:	2200      	moveq	r2, #0
   1970e:	608d      	str	r5, [r1, #8]
   19710:	bf0c      	ite	eq
   19712:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   19714:	54a0      	strbne	r0, [r4, r2]
   19716:	e7f5      	b.n	19704 <str_out+0x12>

00019718 <printk>:
{
   19718:	b40f      	push	{r0, r1, r2, r3}
   1971a:	b507      	push	{r0, r1, r2, lr}
   1971c:	a904      	add	r1, sp, #16
   1971e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19722:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19724:	f7f0 fab2 	bl	9c8c <vprintk>
}
   19728:	b003      	add	sp, #12
   1972a:	f85d eb04 	ldr.w	lr, [sp], #4
   1972e:	b004      	add	sp, #16
   19730:	4770      	bx	lr

00019732 <snprintk>:
{
   19732:	b40c      	push	{r2, r3}
   19734:	b507      	push	{r0, r1, r2, lr}
   19736:	ab04      	add	r3, sp, #16
   19738:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1973c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1973e:	f7f0 fab3 	bl	9ca8 <vsnprintk>
}
   19742:	b003      	add	sp, #12
   19744:	f85d eb04 	ldr.w	lr, [sp], #4
   19748:	b002      	add	sp, #8
   1974a:	4770      	bx	lr

0001974c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1974c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1974e:	f013 0307 	ands.w	r3, r3, #7
   19752:	d105      	bne.n	19760 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19754:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19756:	2b00      	cmp	r3, #0
   19758:	bf0c      	ite	eq
   1975a:	2000      	moveq	r0, #0
   1975c:	2003      	movne	r0, #3
   1975e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19760:	2b02      	cmp	r3, #2
   19762:	d105      	bne.n	19770 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19764:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   19766:	2b00      	cmp	r3, #0
   19768:	bf14      	ite	ne
   1976a:	2000      	movne	r0, #0
   1976c:	2004      	moveq	r0, #4
   1976e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19770:	2b01      	cmp	r3, #1
   19772:	d105      	bne.n	19780 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19774:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19776:	2b00      	cmp	r3, #0
   19778:	bf0c      	ite	eq
   1977a:	2000      	moveq	r0, #0
   1977c:	2005      	movne	r0, #5
   1977e:	4770      	bx	lr
	int evt = EVT_NOP;
   19780:	2000      	movs	r0, #0
}
   19782:	4770      	bx	lr

00019784 <notify_one>:
{
   19784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19788:	460d      	mov	r5, r1
   1978a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1978c:	4619      	mov	r1, r3
   1978e:	1d28      	adds	r0, r5, #4
{
   19790:	4690      	mov	r8, r2
   19792:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19794:	f7f0 fa40 	bl	9c18 <sys_notify_finalize>
	if (cb) {
   19798:	4604      	mov	r4, r0
   1979a:	b138      	cbz	r0, 197ac <notify_one+0x28>
		cb(mgr, cli, state, res);
   1979c:	4633      	mov	r3, r6
   1979e:	4642      	mov	r2, r8
   197a0:	4629      	mov	r1, r5
   197a2:	4638      	mov	r0, r7
   197a4:	46a4      	mov	ip, r4
}
   197a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   197aa:	4760      	bx	ip
}
   197ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000197b0 <validate_args>:
{
   197b0:	b510      	push	{r4, lr}
   197b2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   197b4:	b140      	cbz	r0, 197c8 <validate_args+0x18>
   197b6:	b139      	cbz	r1, 197c8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   197b8:	1d08      	adds	r0, r1, #4
   197ba:	f7ff ff84 	bl	196c6 <sys_notify_validate>
	if ((rv == 0)
   197be:	b928      	cbnz	r0, 197cc <validate_args+0x1c>
	    && ((cli->notify.flags
   197c0:	68a3      	ldr	r3, [r4, #8]
   197c2:	f033 0303 	bics.w	r3, r3, #3
   197c6:	d001      	beq.n	197cc <validate_args+0x1c>
		rv = -EINVAL;
   197c8:	f06f 0015 	mvn.w	r0, #21
}
   197cc:	bd10      	pop	{r4, pc}

000197ce <onoff_manager_init>:
{
   197ce:	b538      	push	{r3, r4, r5, lr}
   197d0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   197d2:	4605      	mov	r5, r0
   197d4:	b158      	cbz	r0, 197ee <onoff_manager_init+0x20>
	    || (transitions == NULL)
   197d6:	b151      	cbz	r1, 197ee <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   197d8:	680b      	ldr	r3, [r1, #0]
   197da:	b143      	cbz	r3, 197ee <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   197dc:	684b      	ldr	r3, [r1, #4]
   197de:	b133      	cbz	r3, 197ee <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   197e0:	2220      	movs	r2, #32
   197e2:	2100      	movs	r1, #0
   197e4:	f001 fa23 	bl	1ac2e <memset>
	return 0;
   197e8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   197ea:	612c      	str	r4, [r5, #16]
}
   197ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   197ee:	f06f 0015 	mvn.w	r0, #21
   197f2:	e7fb      	b.n	197ec <onoff_manager_init+0x1e>

000197f4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   197f4:	4604      	mov	r4, r0
   197f6:	b508      	push	{r3, lr}
   197f8:	4608      	mov	r0, r1
   197fa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   197fc:	461a      	mov	r2, r3
   197fe:	47a0      	blx	r4
	return z_impl_k_current_get();
   19800:	f7fe fdc4 	bl	1838c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19804:	f7f3 fca2 	bl	d14c <z_impl_k_thread_abort>

00019808 <chunk_field>:
	if (big_heap(h)) {
   19808:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1980a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1980e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19812:	bf2c      	ite	cs
   19814:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   19818:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1981c:	4770      	bx	lr

0001981e <chunk_set>:
	void *cmem = &buf[c];
   1981e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19822:	6880      	ldr	r0, [r0, #8]
   19824:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   19828:	bf2c      	ite	cs
   1982a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1982e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   19832:	4770      	bx	lr

00019834 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19834:	2201      	movs	r2, #1
{
   19836:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19838:	f7ff ffe6 	bl	19808 <chunk_field>
}
   1983c:	40d0      	lsrs	r0, r2
   1983e:	bd08      	pop	{r3, pc}

00019840 <set_chunk_used>:
	if (big_heap(h)) {
   19840:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19842:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1984a:	d308      	bcc.n	1985e <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1984c:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1984e:	b11a      	cbz	r2, 19858 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19850:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19854:	604b      	str	r3, [r1, #4]
   19856:	4770      	bx	lr
   19858:	f023 0301 	bic.w	r3, r3, #1
   1985c:	e7fa      	b.n	19854 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1985e:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   19860:	b11a      	cbz	r2, 1986a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19862:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19866:	804b      	strh	r3, [r1, #2]
}
   19868:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1986a:	f023 0301 	bic.w	r3, r3, #1
   1986e:	e7fa      	b.n	19866 <set_chunk_used+0x26>

00019870 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19870:	0053      	lsls	r3, r2, #1
   19872:	2201      	movs	r2, #1
   19874:	f7ff bfd3 	b.w	1981e <chunk_set>

00019878 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   19878:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1987c:	bf2c      	ite	cs
   1987e:	2008      	movcs	r0, #8
   19880:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19882:	3107      	adds	r1, #7
   19884:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   19886:	08c0      	lsrs	r0, r0, #3
   19888:	4770      	bx	lr

0001988a <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1988a:	b508      	push	{r3, lr}
   1988c:	460b      	mov	r3, r1
   1988e:	2101      	movs	r1, #1
   19890:	f7ff fff2 	bl	19878 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   19894:	3301      	adds	r3, #1
   19896:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   19898:	fab3 f083 	clz	r0, r3
}
   1989c:	f1c0 001f 	rsb	r0, r0, #31
   198a0:	bd08      	pop	{r3, pc}

000198a2 <free_list_remove_bidx>:
{
   198a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198a6:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   198a8:	2203      	movs	r2, #3
   198aa:	460e      	mov	r6, r1
   198ac:	4604      	mov	r4, r0
   198ae:	f7ff ffab 	bl	19808 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   198b2:	4286      	cmp	r6, r0
   198b4:	4605      	mov	r5, r0
   198b6:	f107 0804 	add.w	r8, r7, #4
   198ba:	d10b      	bne.n	198d4 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   198bc:	2301      	movs	r3, #1
   198be:	fa03 f707 	lsl.w	r7, r3, r7
   198c2:	68e3      	ldr	r3, [r4, #12]
   198c4:	ea23 0307 	bic.w	r3, r3, r7
   198c8:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   198ca:	2300      	movs	r3, #0
   198cc:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   198d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   198d4:	4631      	mov	r1, r6
   198d6:	2202      	movs	r2, #2
   198d8:	4620      	mov	r0, r4
   198da:	f7ff ff95 	bl	19808 <chunk_field>
   198de:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   198e0:	462b      	mov	r3, r5
   198e2:	4601      	mov	r1, r0
   198e4:	2203      	movs	r2, #3
   198e6:	4620      	mov	r0, r4
		b->next = second;
   198e8:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   198ec:	f7ff ff97 	bl	1981e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   198f0:	4633      	mov	r3, r6
   198f2:	4629      	mov	r1, r5
   198f4:	4620      	mov	r0, r4
}
   198f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   198fa:	2202      	movs	r2, #2
   198fc:	f7ff bf8f 	b.w	1981e <chunk_set>

00019900 <free_list_remove>:
{
   19900:	b570      	push	{r4, r5, r6, lr}
   19902:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19904:	6886      	ldr	r6, [r0, #8]
   19906:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19908:	f7ff ff94 	bl	19834 <chunk_size>
   1990c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19910:	4601      	mov	r1, r0
   19912:	d301      	bcc.n	19918 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   19914:	2801      	cmp	r0, #1
   19916:	d009      	beq.n	1992c <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19918:	4630      	mov	r0, r6
   1991a:	f7ff ffb6 	bl	1988a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1991e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   19920:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19922:	4620      	mov	r0, r4
}
   19924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   19928:	f7ff bfbb 	b.w	198a2 <free_list_remove_bidx>
}
   1992c:	bd70      	pop	{r4, r5, r6, pc}

0001992e <alloc_chunk>:
{
   1992e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19932:	6886      	ldr	r6, [r0, #8]
   19934:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   19936:	4630      	mov	r0, r6
{
   19938:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1993a:	f7ff ffa6 	bl	1988a <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1993e:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   19940:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   19942:	4630      	mov	r0, r6
   19944:	f7ff ffa1 	bl	1988a <bucket_idx.isra.0>
   19948:	42a8      	cmp	r0, r5
   1994a:	da03      	bge.n	19954 <alloc_chunk+0x26>
		return 0;
   1994c:	2600      	movs	r6, #0
}
   1994e:	4630      	mov	r0, r6
   19950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19954:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19958:	f8da 9010 	ldr.w	r9, [sl, #16]
   1995c:	f1b9 0f00 	cmp.w	r9, #0
   19960:	d019      	beq.n	19996 <alloc_chunk+0x68>
   19962:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   19964:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19968:	4620      	mov	r0, r4
   1996a:	4631      	mov	r1, r6
   1996c:	f7ff ff62 	bl	19834 <chunk_size>
   19970:	4540      	cmp	r0, r8
   19972:	d305      	bcc.n	19980 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   19974:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   19976:	4631      	mov	r1, r6
   19978:	4620      	mov	r0, r4
   1997a:	f7ff ff92 	bl	198a2 <free_list_remove_bidx>
		return c;
   1997e:	e7e6      	b.n	1994e <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   19980:	2203      	movs	r2, #3
   19982:	4631      	mov	r1, r6
   19984:	4620      	mov	r0, r4
   19986:	f7ff ff3f 	bl	19808 <chunk_field>
		} while (--i && b->next != first);
   1998a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1998c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   19990:	d001      	beq.n	19996 <alloc_chunk+0x68>
   19992:	4581      	cmp	r9, r0
   19994:	d1e6      	bne.n	19964 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19996:	f04f 32ff 	mov.w	r2, #4294967295
   1999a:	68e3      	ldr	r3, [r4, #12]
   1999c:	3501      	adds	r5, #1
   1999e:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   199a0:	401a      	ands	r2, r3
   199a2:	d0d3      	beq.n	1994c <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   199a4:	fa92 f2a2 	rbit	r2, r2
   199a8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   199ac:	1d13      	adds	r3, r2, #4
   199ae:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   199b2:	e7e0      	b.n	19976 <alloc_chunk+0x48>

000199b4 <split_chunks>:
{
   199b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199b8:	4614      	mov	r4, r2
   199ba:	460e      	mov	r6, r1
   199bc:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   199be:	f7ff ff39 	bl	19834 <chunk_size>
	size_t lsz = rc - lc;
   199c2:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   199c6:	1b37      	subs	r7, r6, r4
   199c8:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   199ca:	4642      	mov	r2, r8
   199cc:	4631      	mov	r1, r6
   199ce:	4628      	mov	r0, r5
   199d0:	f7ff ff4e 	bl	19870 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   199d4:	463a      	mov	r2, r7
   199d6:	4621      	mov	r1, r4
   199d8:	4628      	mov	r0, r5
   199da:	f7ff ff49 	bl	19870 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   199de:	4643      	mov	r3, r8
   199e0:	2200      	movs	r2, #0
   199e2:	4621      	mov	r1, r4
   199e4:	4628      	mov	r0, r5
   199e6:	f7ff ff1a 	bl	1981e <chunk_set>
	return c + chunk_size(h, c);
   199ea:	4621      	mov	r1, r4
   199ec:	4628      	mov	r0, r5
   199ee:	f7ff ff21 	bl	19834 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   199f2:	463b      	mov	r3, r7
   199f4:	1821      	adds	r1, r4, r0
   199f6:	2200      	movs	r2, #0
   199f8:	4628      	mov	r0, r5
}
   199fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   199fe:	f7ff bf0e 	b.w	1981e <chunk_set>

00019a02 <merge_chunks>:
{
   19a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a06:	4616      	mov	r6, r2
   19a08:	4604      	mov	r4, r0
   19a0a:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19a0c:	f7ff ff12 	bl	19834 <chunk_size>
   19a10:	4631      	mov	r1, r6
   19a12:	4605      	mov	r5, r0
   19a14:	4620      	mov	r0, r4
   19a16:	f7ff ff0d 	bl	19834 <chunk_size>
   19a1a:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   19a1c:	462a      	mov	r2, r5
   19a1e:	4639      	mov	r1, r7
   19a20:	4620      	mov	r0, r4
   19a22:	f7ff ff25 	bl	19870 <set_chunk_size>
	return c + chunk_size(h, c);
   19a26:	4631      	mov	r1, r6
   19a28:	4620      	mov	r0, r4
   19a2a:	f7ff ff03 	bl	19834 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19a2e:	462b      	mov	r3, r5
   19a30:	1831      	adds	r1, r6, r0
   19a32:	2200      	movs	r2, #0
   19a34:	4620      	mov	r0, r4
}
   19a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19a3a:	f7ff bef0 	b.w	1981e <chunk_set>

00019a3e <free_list_add>:
{
   19a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a42:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19a44:	6886      	ldr	r6, [r0, #8]
   19a46:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19a48:	f7ff fef4 	bl	19834 <chunk_size>
   19a4c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19a50:	4601      	mov	r1, r0
   19a52:	d301      	bcc.n	19a58 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19a54:	2801      	cmp	r0, #1
   19a56:	d033      	beq.n	19ac0 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19a58:	4630      	mov	r0, r6
   19a5a:	f7ff ff16 	bl	1988a <bucket_idx.isra.0>
	if (b->next == 0U) {
   19a5e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19a62:	6916      	ldr	r6, [r2, #16]
   19a64:	b99e      	cbnz	r6, 19a8e <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19a66:	2301      	movs	r3, #1
   19a68:	fa03 f000 	lsl.w	r0, r3, r0
   19a6c:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19a6e:	4629      	mov	r1, r5
   19a70:	4303      	orrs	r3, r0
   19a72:	60e3      	str	r3, [r4, #12]
   19a74:	4620      	mov	r0, r4
		b->next = c;
   19a76:	6115      	str	r5, [r2, #16]
   19a78:	462b      	mov	r3, r5
   19a7a:	2202      	movs	r2, #2
   19a7c:	f7ff fecf 	bl	1981e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19a80:	2203      	movs	r2, #3
   19a82:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19a84:	4620      	mov	r0, r4
}
   19a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19a8a:	f7ff bec8 	b.w	1981e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19a8e:	2202      	movs	r2, #2
   19a90:	4631      	mov	r1, r6
   19a92:	4620      	mov	r0, r4
   19a94:	f7ff feb8 	bl	19808 <chunk_field>
   19a98:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   19a9a:	4603      	mov	r3, r0
   19a9c:	4629      	mov	r1, r5
   19a9e:	4620      	mov	r0, r4
   19aa0:	f7ff febd 	bl	1981e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19aa4:	2203      	movs	r2, #3
   19aa6:	4633      	mov	r3, r6
   19aa8:	4629      	mov	r1, r5
   19aaa:	4620      	mov	r0, r4
   19aac:	f7ff feb7 	bl	1981e <chunk_set>
   19ab0:	4639      	mov	r1, r7
   19ab2:	462b      	mov	r3, r5
   19ab4:	4620      	mov	r0, r4
   19ab6:	f7ff feb2 	bl	1981e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19aba:	2202      	movs	r2, #2
   19abc:	4631      	mov	r1, r6
   19abe:	e7e1      	b.n	19a84 <free_list_add+0x46>
   19ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019ac4 <free_chunk>:
{
   19ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ac6:	460c      	mov	r4, r1
   19ac8:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   19aca:	f7ff feb3 	bl	19834 <chunk_size>
   19ace:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19ad0:	2201      	movs	r2, #1
   19ad2:	4631      	mov	r1, r6
   19ad4:	4628      	mov	r0, r5
   19ad6:	f7ff fe97 	bl	19808 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   19ada:	07c3      	lsls	r3, r0, #31
   19adc:	d40c      	bmi.n	19af8 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   19ade:	4631      	mov	r1, r6
   19ae0:	4628      	mov	r0, r5
   19ae2:	f7ff ff0d 	bl	19900 <free_list_remove>
	return c + chunk_size(h, c);
   19ae6:	4621      	mov	r1, r4
   19ae8:	4628      	mov	r0, r5
   19aea:	f7ff fea3 	bl	19834 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19aee:	4621      	mov	r1, r4
   19af0:	1822      	adds	r2, r4, r0
   19af2:	4628      	mov	r0, r5
   19af4:	f7ff ff85 	bl	19a02 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   19af8:	2200      	movs	r2, #0
   19afa:	4621      	mov	r1, r4
   19afc:	4628      	mov	r0, r5
   19afe:	f7ff fe83 	bl	19808 <chunk_field>
   19b02:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19b04:	2201      	movs	r2, #1
   19b06:	4639      	mov	r1, r7
   19b08:	4628      	mov	r0, r5
   19b0a:	f7ff fe7d 	bl	19808 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19b0e:	ea10 0602 	ands.w	r6, r0, r2
   19b12:	d113      	bne.n	19b3c <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   19b14:	4639      	mov	r1, r7
   19b16:	4628      	mov	r0, r5
   19b18:	f7ff fef2 	bl	19900 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   19b1c:	4621      	mov	r1, r4
   19b1e:	4632      	mov	r2, r6
   19b20:	4628      	mov	r0, r5
   19b22:	f7ff fe71 	bl	19808 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   19b26:	4622      	mov	r2, r4
   19b28:	1a21      	subs	r1, r4, r0
   19b2a:	4628      	mov	r0, r5
   19b2c:	f7ff ff69 	bl	19a02 <merge_chunks>
   19b30:	4621      	mov	r1, r4
   19b32:	4632      	mov	r2, r6
   19b34:	4628      	mov	r0, r5
   19b36:	f7ff fe67 	bl	19808 <chunk_field>
   19b3a:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   19b3c:	4621      	mov	r1, r4
   19b3e:	4628      	mov	r0, r5
}
   19b40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   19b44:	f7ff bf7b 	b.w	19a3e <free_list_add>

00019b48 <sys_heap_alloc>:
{
   19b48:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19b4a:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19b4c:	b909      	cbnz	r1, 19b52 <sys_heap_alloc+0xa>
		return NULL;
   19b4e:	2000      	movs	r0, #0
}
   19b50:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   19b52:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19b54:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   19b58:	d9f9      	bls.n	19b4e <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19b5a:	f7ff fe8d 	bl	19878 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19b5e:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19b60:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19b62:	4630      	mov	r0, r6
   19b64:	f7ff fee3 	bl	1992e <alloc_chunk>
	if (c == 0U) {
   19b68:	4604      	mov	r4, r0
   19b6a:	2800      	cmp	r0, #0
   19b6c:	d0ef      	beq.n	19b4e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19b6e:	4601      	mov	r1, r0
   19b70:	4630      	mov	r0, r6
   19b72:	f7ff fe5f 	bl	19834 <chunk_size>
   19b76:	42a8      	cmp	r0, r5
   19b78:	d909      	bls.n	19b8e <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   19b7a:	4425      	add	r5, r4
   19b7c:	4621      	mov	r1, r4
   19b7e:	4630      	mov	r0, r6
   19b80:	462a      	mov	r2, r5
   19b82:	f7ff ff17 	bl	199b4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   19b86:	4629      	mov	r1, r5
   19b88:	4630      	mov	r0, r6
   19b8a:	f7ff ff58 	bl	19a3e <free_list_add>
	set_chunk_used(h, c, true);
   19b8e:	4621      	mov	r1, r4
   19b90:	4630      	mov	r0, r6
   19b92:	2201      	movs	r2, #1
   19b94:	f7ff fe54 	bl	19840 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19b98:	68b3      	ldr	r3, [r6, #8]
   19b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19b9e:	bf2c      	ite	cs
   19ba0:	2308      	movcs	r3, #8
   19ba2:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19ba4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   19ba8:	4420      	add	r0, r4
	return chunk_mem(h, c);
   19baa:	e7d1      	b.n	19b50 <sys_heap_alloc+0x8>

00019bac <encode_uint>:
{
   19bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bb0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19bb2:	78d3      	ldrb	r3, [r2, #3]
{
   19bb4:	4680      	mov	r8, r0
	switch (specifier) {
   19bb6:	2b6f      	cmp	r3, #111	; 0x6f
{
   19bb8:	460f      	mov	r7, r1
   19bba:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19bbc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19bc0:	d029      	beq.n	19c16 <_flash_used+0x3e>
   19bc2:	d824      	bhi.n	19c0e <_flash_used+0x36>
		return 16;
   19bc4:	2b58      	cmp	r3, #88	; 0x58
   19bc6:	bf14      	ite	ne
   19bc8:	260a      	movne	r6, #10
   19bca:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   19bcc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   19bd0:	4632      	mov	r2, r6
   19bd2:	2300      	movs	r3, #0
   19bd4:	4640      	mov	r0, r8
   19bd6:	4639      	mov	r1, r7
   19bd8:	f7ee ffa8 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19bdc:	2a09      	cmp	r2, #9
   19bde:	b2d4      	uxtb	r4, r2
   19be0:	d81e      	bhi.n	19c20 <_flash_used+0x48>
   19be2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19be4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19be6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19be8:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19bec:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19bf0:	d301      	bcc.n	19bf6 <_flash_used+0x1e>
   19bf2:	45d1      	cmp	r9, sl
   19bf4:	d811      	bhi.n	19c1a <_flash_used+0x42>
	if (conv->flag_hash) {
   19bf6:	782b      	ldrb	r3, [r5, #0]
   19bf8:	069b      	lsls	r3, r3, #26
   19bfa:	d505      	bpl.n	19c08 <_flash_used+0x30>
		if (radix == 8) {
   19bfc:	2e08      	cmp	r6, #8
   19bfe:	d115      	bne.n	19c2c <_flash_used+0x54>
			conv->altform_0 = true;
   19c00:	78ab      	ldrb	r3, [r5, #2]
   19c02:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19c06:	70ab      	strb	r3, [r5, #2]
}
   19c08:	4648      	mov	r0, r9
   19c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19c0e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19c12:	2b70      	cmp	r3, #112	; 0x70
   19c14:	e7d7      	b.n	19bc6 <encode_uint+0x1a>
	switch (specifier) {
   19c16:	2608      	movs	r6, #8
   19c18:	e7d8      	b.n	19bcc <encode_uint+0x20>
		value /= radix;
   19c1a:	4680      	mov	r8, r0
   19c1c:	460f      	mov	r7, r1
   19c1e:	e7d7      	b.n	19bd0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19c20:	f1bb 0f19 	cmp.w	fp, #25
   19c24:	bf94      	ite	ls
   19c26:	3437      	addls	r4, #55	; 0x37
   19c28:	3457      	addhi	r4, #87	; 0x57
   19c2a:	e7db      	b.n	19be4 <_flash_used+0xc>
		} else if (radix == 16) {
   19c2c:	2e10      	cmp	r6, #16
   19c2e:	d1eb      	bne.n	19c08 <_flash_used+0x30>
			conv->altform_0c = true;
   19c30:	78ab      	ldrb	r3, [r5, #2]
   19c32:	f043 0310 	orr.w	r3, r3, #16
   19c36:	e7e6      	b.n	19c06 <_flash_used+0x2e>

00019c38 <outs>:
{
   19c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c3c:	4607      	mov	r7, r0
   19c3e:	4688      	mov	r8, r1
   19c40:	4615      	mov	r5, r2
   19c42:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19c44:	4614      	mov	r4, r2
   19c46:	42b4      	cmp	r4, r6
   19c48:	eba4 0005 	sub.w	r0, r4, r5
   19c4c:	d302      	bcc.n	19c54 <outs+0x1c>
   19c4e:	b93e      	cbnz	r6, 19c60 <outs+0x28>
   19c50:	7823      	ldrb	r3, [r4, #0]
   19c52:	b12b      	cbz	r3, 19c60 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19c54:	4641      	mov	r1, r8
   19c56:	f814 0b01 	ldrb.w	r0, [r4], #1
   19c5a:	47b8      	blx	r7
		if (rc < 0) {
   19c5c:	2800      	cmp	r0, #0
   19c5e:	daf2      	bge.n	19c46 <outs+0xe>
}
   19c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019c64 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   19c64:	4040      	eors	r0, r0
   19c66:	f380 8811 	msr	BASEPRI, r0
   19c6a:	f04f 0004 	mov.w	r0, #4
   19c6e:	df02      	svc	2
}
   19c70:	4770      	bx	lr

00019c72 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19c72:	4770      	bx	lr

00019c74 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   19c74:	f04f 0320 	mov.w	r3, #32
   19c78:	f3ef 8111 	mrs	r1, BASEPRI
   19c7c:	f383 8811 	msr	BASEPRI, r3
   19c80:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   19c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   19c88:	2201      	movs	r2, #1
   19c8a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   19c8e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   19c92:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   19c96:	f381 8811 	msr	BASEPRI, r1
   19c9a:	f3bf 8f6f 	isb	sy
}
   19c9e:	2000      	movs	r0, #0
   19ca0:	4770      	bx	lr

00019ca2 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   19ca2:	f002 bc90 	b.w	1c5c6 <SystemInit>

00019ca6 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   19ca6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19caa:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   19cae:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   19cb0:	4640      	mov	r0, r8
{
   19cb2:	461f      	mov	r7, r3
   19cb4:	460c      	mov	r4, r1
   19cb6:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   19cb8:	f000 ff50 	bl	1ab5c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19cbc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19cc0:	b280      	uxth	r0, r0
   19cc2:	e9cd 8001 	strd	r8, r0, [sp, #4]
   19cc6:	9300      	str	r3, [sp, #0]
   19cc8:	4632      	mov	r2, r6
   19cca:	463b      	mov	r3, r7
   19ccc:	4621      	mov	r1, r4
   19cce:	4628      	mov	r0, r5
   19cd0:	f002 f8d6 	bl	1be80 <bt_gatt_attr_read>
}
   19cd4:	b004      	add	sp, #16
   19cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019cda <virtio_get_status>:
}
   19cda:	2004      	movs	r0, #4
   19cdc:	4770      	bx	lr

00019cde <virtio_get_features>:
}
   19cde:	2001      	movs	r0, #1
   19ce0:	4770      	bx	lr

00019ce2 <virtio_set_features>:
}
   19ce2:	4770      	bx	lr

00019ce4 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   19ce4:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   19ce6:	21b4      	movs	r1, #180	; 0xb4
   19ce8:	2004      	movs	r0, #4
   19cea:	f7ff fc31 	bl	19550 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   19cee:	4604      	mov	r4, r0
   19cf0:	b118      	cbz	r0, 19cfa <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   19cf2:	22b4      	movs	r2, #180	; 0xb4
   19cf4:	2100      	movs	r1, #0
   19cf6:	f000 ff9a 	bl	1ac2e <memset>
	}

	return vqs;
}
   19cfa:	4620      	mov	r0, r4
   19cfc:	bd10      	pop	{r4, pc}

00019cfe <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   19cfe:	f002 bf71 	b.w	1cbe4 <rpmsg_destroy_ept>

00019d02 <settings_load>:
	return settings_load_subtree(NULL);
   19d02:	2000      	movs	r0, #0
   19d04:	f7f1 b970 	b.w	afe8 <settings_load_subtree>

00019d08 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   19d08:	2200      	movs	r2, #0
   19d0a:	4611      	mov	r1, r2
   19d0c:	f7f1 b946 	b.w	af9c <settings_save_one>

00019d10 <settings_name_steq>:
{
   19d10:	4603      	mov	r3, r0
   19d12:	b530      	push	{r4, r5, lr}
   19d14:	4608      	mov	r0, r1
	if (next) {
   19d16:	b10a      	cbz	r2, 19d1c <settings_name_steq+0xc>
		*next = NULL;
   19d18:	2100      	movs	r1, #0
   19d1a:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   19d1c:	b163      	cbz	r3, 19d38 <settings_name_steq+0x28>
   19d1e:	b190      	cbz	r0, 19d46 <settings_name_steq+0x36>
   19d20:	1e41      	subs	r1, r0, #1
   19d22:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   19d24:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   19d28:	4604      	mov	r4, r0
   19d2a:	f810 3b01 	ldrb.w	r3, [r0], #1
   19d2e:	b15d      	cbz	r5, 19d48 <settings_name_steq+0x38>
   19d30:	429d      	cmp	r5, r3
   19d32:	d101      	bne.n	19d38 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   19d34:	2d3d      	cmp	r5, #61	; 0x3d
   19d36:	d1f5      	bne.n	19d24 <settings_name_steq+0x14>
	return 0;
   19d38:	2000      	movs	r0, #0
   19d3a:	e004      	b.n	19d46 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   19d3c:	2b3d      	cmp	r3, #61	; 0x3d
   19d3e:	d008      	beq.n	19d52 <settings_name_steq+0x42>
   19d40:	fab3 f083 	clz	r0, r3
   19d44:	0940      	lsrs	r0, r0, #5
}
   19d46:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   19d48:	2b2f      	cmp	r3, #47	; 0x2f
   19d4a:	d1f7      	bne.n	19d3c <settings_name_steq+0x2c>
		if (next) {
   19d4c:	b10a      	cbz	r2, 19d52 <settings_name_steq+0x42>
			*next = name + 1;
   19d4e:	3401      	adds	r4, #1
   19d50:	6014      	str	r4, [r2, #0]
		return 1;
   19d52:	2001      	movs	r0, #1
   19d54:	e7f7      	b.n	19d46 <settings_name_steq+0x36>

00019d56 <settings_name_next>:
{
   19d56:	4603      	mov	r3, r0
   19d58:	b530      	push	{r4, r5, lr}
	if (next) {
   19d5a:	b109      	cbz	r1, 19d60 <settings_name_next+0xa>
		*next = NULL;
   19d5c:	2200      	movs	r2, #0
   19d5e:	600a      	str	r2, [r1, #0]
	if (!name) {
   19d60:	b16b      	cbz	r3, 19d7e <settings_name_next+0x28>
   19d62:	461a      	mov	r2, r3
   19d64:	4614      	mov	r4, r2
   19d66:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   19d68:	f812 5b01 	ldrb.w	r5, [r2], #1
   19d6c:	b135      	cbz	r5, 19d7c <settings_name_next+0x26>
   19d6e:	2d3d      	cmp	r5, #61	; 0x3d
   19d70:	d004      	beq.n	19d7c <settings_name_next+0x26>
   19d72:	2d2f      	cmp	r5, #47	; 0x2f
   19d74:	d1f6      	bne.n	19d64 <settings_name_next+0xe>
		if (next) {
   19d76:	b109      	cbz	r1, 19d7c <settings_name_next+0x26>
			*next = name + 1;
   19d78:	3401      	adds	r4, #1
   19d7a:	600c      	str	r4, [r1, #0]
}
   19d7c:	bd30      	pop	{r4, r5, pc}
		return 0;
   19d7e:	4618      	mov	r0, r3
   19d80:	e7fc      	b.n	19d7c <settings_name_next+0x26>

00019d82 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   19d82:	2000      	movs	r0, #0
   19d84:	4770      	bx	lr

00019d86 <set_on_state>:
	__asm__ volatile(
   19d86:	f04f 0320 	mov.w	r3, #32
   19d8a:	f3ef 8211 	mrs	r2, BASEPRI
   19d8e:	f383 8811 	msr	BASEPRI, r3
   19d92:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   19d96:	6803      	ldr	r3, [r0, #0]
   19d98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19d9c:	f043 0302 	orr.w	r3, r3, #2
   19da0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19da2:	f382 8811 	msr	BASEPRI, r2
   19da6:	f3bf 8f6f 	isb	sy
}
   19daa:	4770      	bx	lr

00019dac <async_start>:
{
   19dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dae:	9f06      	ldr	r7, [sp, #24]
   19db0:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   19db2:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   19db4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   19db6:	f04f 0020 	mov.w	r0, #32
   19dba:	f3ef 8c11 	mrs	ip, BASEPRI
   19dbe:	f380 8811 	msr	BASEPRI, r0
   19dc2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19dc6:	260c      	movs	r6, #12
   19dc8:	fb06 4601 	mla	r6, r6, r1, r4
   19dcc:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19dd0:	f000 0e07 	and.w	lr, r0, #7
   19dd4:	f1be 0f01 	cmp.w	lr, #1
   19dd8:	d111      	bne.n	19dfe <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   19dda:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   19dde:	2600      	movs	r6, #0
	__asm__ volatile(
   19de0:	f38c 8811 	msr	BASEPRI, ip
   19de4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   19de8:	b93e      	cbnz	r6, 19dfa <async_start+0x4e>
	subdata->cb = cb;
   19dea:	200c      	movs	r0, #12
   19dec:	4341      	muls	r1, r0
   19dee:	440c      	add	r4, r1
	subdata->user_data = user_data;
   19df0:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   19df4:	686b      	ldr	r3, [r5, #4]
   19df6:	585b      	ldr	r3, [r3, r1]
   19df8:	4798      	blx	r3
}
   19dfa:	4630      	mov	r0, r6
   19dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   19dfe:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   19e02:	4287      	cmp	r7, r0
   19e04:	bf14      	ite	ne
   19e06:	f04f 36ff 	movne.w	r6, #4294967295
   19e0a:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   19e0e:	e7e7      	b.n	19de0 <async_start+0x34>

00019e10 <api_start>:
{
   19e10:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   19e12:	2480      	movs	r4, #128	; 0x80
   19e14:	9400      	str	r4, [sp, #0]
   19e16:	f7ff ffc9 	bl	19dac <async_start>
}
   19e1a:	b002      	add	sp, #8
   19e1c:	bd10      	pop	{r4, pc}

00019e1e <onoff_started_callback>:
	return &data->mgr[type];
   19e1e:	68c0      	ldr	r0, [r0, #12]
   19e20:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19e22:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   19e26:	2100      	movs	r1, #0
   19e28:	4710      	bx	r2

00019e2a <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   19e2a:	2003      	movs	r0, #3
   19e2c:	f7fb be9a 	b.w	15b64 <nrfx_clock_start>

00019e30 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   19e30:	2002      	movs	r0, #2
   19e32:	f7fb be97 	b.w	15b64 <nrfx_clock_start>

00019e36 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   19e36:	2000      	movs	r0, #0
   19e38:	f7fb be94 	b.w	15b64 <nrfx_clock_start>

00019e3c <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   19e3c:	2003      	movs	r0, #3
   19e3e:	f7fb befb 	b.w	15c38 <nrfx_clock_stop>

00019e42 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   19e42:	2002      	movs	r0, #2
   19e44:	f7fb bef8 	b.w	15c38 <nrfx_clock_stop>

00019e48 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19e48:	2000      	movs	r0, #0
   19e4a:	f7fb bef5 	b.w	15c38 <nrfx_clock_stop>

00019e4e <api_stop>:
	return stop(dev, subsys, CTX_API);
   19e4e:	2280      	movs	r2, #128	; 0x80
   19e50:	f7f1 b9fa 	b.w	b248 <stop>

00019e54 <blocking_start_callback>:
{
   19e54:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19e56:	f7fe ba9f 	b.w	18398 <z_impl_k_sem_give>

00019e5a <bt_rpmsg_open>:
{
   19e5a:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   19e5c:	f7f1 fcf4 	bl	b848 <bt_rpmsg_platform_endpoint_is_bound>
   19e60:	b108      	cbz	r0, 19e66 <bt_rpmsg_open+0xc>
}
   19e62:	2000      	movs	r0, #0
   19e64:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   19e66:	2100      	movs	r1, #0
   19e68:	2021      	movs	r0, #33	; 0x21
   19e6a:	f7fe fa5f 	bl	1832c <z_impl_k_sleep>
   19e6e:	e7f5      	b.n	19e5c <bt_rpmsg_open+0x2>

00019e70 <endpoint_cb>:
{
   19e70:	b508      	push	{r3, lr}
   19e72:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   19e74:	4611      	mov	r1, r2
   19e76:	f7f1 fbfd 	bl	b674 <bt_rpmsg_rx>
}
   19e7a:	2000      	movs	r0, #0
   19e7c:	bd08      	pop	{r3, pc}

00019e7e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   19e7e:	4770      	bx	lr

00019e80 <attr_find_by_handle>:
{
   19e80:	b570      	push	{r4, r5, r6, lr}
   19e82:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   19e84:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   19e88:	b1a8      	cbz	r0, 19eb6 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   19e8a:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   19e8c:	3801      	subs	r0, #1
	while (upper >= lower) {
   19e8e:	4286      	cmp	r6, r0
   19e90:	dd01      	ble.n	19e96 <attr_find_by_handle+0x16>
		return NULL;
   19e92:	2000      	movs	r0, #0
   19e94:	e00f      	b.n	19eb6 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   19e96:	1832      	adds	r2, r6, r0
   19e98:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   19e9c:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   19e9e:	1cd5      	adds	r5, r2, #3
   19ea0:	00eb      	lsls	r3, r5, #3
   19ea2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   19ea6:	892d      	ldrh	r5, [r5, #8]
   19ea8:	428d      	cmp	r5, r1
   19eaa:	d201      	bcs.n	19eb0 <attr_find_by_handle+0x30>
			lower = m + 1;
   19eac:	1c56      	adds	r6, r2, #1
   19eae:	e7ee      	b.n	19e8e <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   19eb0:	d802      	bhi.n	19eb8 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   19eb2:	3304      	adds	r3, #4
   19eb4:	18e0      	adds	r0, r4, r3
}
   19eb6:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   19eb8:	1e50      	subs	r0, r2, #1
   19eba:	e7e8      	b.n	19e8e <attr_find_by_handle+0xe>

00019ebc <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   19ebc:	2300      	movs	r3, #0
{
   19ebe:	b510      	push	{r4, lr}
   19ec0:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   19ec2:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   19ec6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   19eca:	b910      	cbnz	r0, 19ed2 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   19ecc:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   19ed0:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ed2:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   19ed6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ed8:	4290      	cmp	r0, r2
	list->head = node;
   19eda:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   19ede:	bf08      	it	eq
   19ee0:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   19ee4:	f003 f928 	bl	1d138 <k_free>
   19ee8:	e7ed      	b.n	19ec6 <svc_attr_memory_release+0xa>

00019eea <atomic_and>:
{
   19eea:	4603      	mov	r3, r0
}
   19eec:	e8d3 0fef 	ldaex	r0, [r3]
   19ef0:	ea00 0201 	and.w	r2, r0, r1
   19ef4:	e8c3 2fec 	stlex	ip, r2, [r3]
   19ef8:	f1bc 0f00 	cmp.w	ip, #0
   19efc:	d1f6      	bne.n	19eec <atomic_and+0x2>
   19efe:	4770      	bx	lr

00019f00 <discovery_complete_not_found>:
{
   19f00:	b510      	push	{r4, lr}
   19f02:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   19f04:	f7ff ffda 	bl	19ebc <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19f08:	f06f 0101 	mvn.w	r1, #1
   19f0c:	f504 709c 	add.w	r0, r4, #312	; 0x138
   19f10:	f7ff ffeb 	bl	19eea <atomic_and>
	if (dm->callback->service_not_found) {
   19f14:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   19f18:	685b      	ldr	r3, [r3, #4]
   19f1a:	b123      	cbz	r3, 19f26 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   19f1c:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   19f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   19f24:	4718      	bx	r3
}
   19f26:	bd10      	pop	{r4, pc}

00019f28 <bt_gatt_dm_attr_service_val>:
{
   19f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   19f2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19f2e:	2400      	movs	r4, #0
{
   19f30:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   19f32:	6801      	ldr	r1, [r0, #0]
   19f34:	4668      	mov	r0, sp
   19f36:	f88d 4000 	strb.w	r4, [sp]
   19f3a:	f8ad 3002 	strh.w	r3, [sp, #2]
   19f3e:	f000 fec0 	bl	1acc2 <bt_uuid_cmp>
   19f42:	b918      	cbnz	r0, 19f4c <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   19f44:	6828      	ldr	r0, [r5, #0]
   19f46:	3808      	subs	r0, #8
}
   19f48:	b003      	add	sp, #12
   19f4a:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   19f4c:	f642 0301 	movw	r3, #10241	; 0x2801
   19f50:	6829      	ldr	r1, [r5, #0]
   19f52:	a801      	add	r0, sp, #4
   19f54:	f88d 4004 	strb.w	r4, [sp, #4]
   19f58:	f8ad 3006 	strh.w	r3, [sp, #6]
   19f5c:	f000 feb1 	bl	1acc2 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   19f60:	2800      	cmp	r0, #0
   19f62:	d0ef      	beq.n	19f44 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   19f64:	4620      	mov	r0, r4
   19f66:	e7ef      	b.n	19f48 <bt_gatt_dm_attr_service_val+0x20>

00019f68 <bt_gatt_dm_attr_chrc_val>:
{
   19f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   19f6a:	f642 0303 	movw	r3, #10243	; 0x2803
   19f6e:	2400      	movs	r4, #0
{
   19f70:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   19f72:	6801      	ldr	r1, [r0, #0]
   19f74:	a801      	add	r0, sp, #4
   19f76:	f88d 4004 	strb.w	r4, [sp, #4]
   19f7a:	f8ad 3006 	strh.w	r3, [sp, #6]
   19f7e:	f000 fea0 	bl	1acc2 <bt_uuid_cmp>
   19f82:	b918      	cbnz	r0, 19f8c <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   19f84:	6828      	ldr	r0, [r5, #0]
   19f86:	3808      	subs	r0, #8
}
   19f88:	b003      	add	sp, #12
   19f8a:	bd30      	pop	{r4, r5, pc}
	return NULL;
   19f8c:	4620      	mov	r0, r4
   19f8e:	e7fb      	b.n	19f88 <bt_gatt_dm_attr_chrc_val+0x20>

00019f90 <bt_gatt_dm_conn_get>:
}
   19f90:	6800      	ldr	r0, [r0, #0]
   19f92:	4770      	bx	lr

00019f94 <bt_gatt_dm_char_next>:
{
   19f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   19f96:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   19f9a:	b131      	cbz	r1, 19faa <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   19f9c:	42a9      	cmp	r1, r5
   19f9e:	d203      	bcs.n	19fa8 <bt_gatt_dm_char_next+0x14>
	return NULL;
   19fa0:	2500      	movs	r5, #0
}
   19fa2:	4628      	mov	r0, r5
   19fa4:	b003      	add	sp, #12
   19fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19fa8:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   19faa:	2600      	movs	r6, #0
   19fac:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   19fb0:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   19fb4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   19fb8:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   19fbc:	3508      	adds	r5, #8
   19fbe:	42ac      	cmp	r4, r5
   19fc0:	d9ee      	bls.n	19fa0 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   19fc2:	6829      	ldr	r1, [r5, #0]
   19fc4:	a801      	add	r0, sp, #4
   19fc6:	f88d 6004 	strb.w	r6, [sp, #4]
   19fca:	f8ad 7006 	strh.w	r7, [sp, #6]
   19fce:	f000 fe78 	bl	1acc2 <bt_uuid_cmp>
   19fd2:	2800      	cmp	r0, #0
   19fd4:	d1f2      	bne.n	19fbc <bt_gatt_dm_char_next+0x28>
   19fd6:	e7e4      	b.n	19fa2 <bt_gatt_dm_char_next+0xe>

00019fd8 <bt_gatt_dm_attr_next>:
{
   19fd8:	4602      	mov	r2, r0
		prev = dm->attrs;
   19fda:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   19fde:	b111      	cbz	r1, 19fe6 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   19fe0:	4299      	cmp	r1, r3
   19fe2:	d30b      	bcc.n	19ffc <bt_gatt_dm_attr_next+0x24>
   19fe4:	460b      	mov	r3, r1
		if (++prev < end) {
   19fe6:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   19fea:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   19fee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   19ff2:	321c      	adds	r2, #28
	return NULL;
   19ff4:	4290      	cmp	r0, r2
   19ff6:	bf28      	it	cs
   19ff8:	2000      	movcs	r0, #0
   19ffa:	4770      	bx	lr
   19ffc:	2000      	movs	r0, #0
}
   19ffe:	4770      	bx	lr

0001a000 <bt_gatt_dm_desc_next>:
{
   1a000:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1a002:	f7ff ffe9 	bl	19fd8 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1a006:	4604      	mov	r4, r0
   1a008:	b158      	cbz	r0, 1a022 <bt_gatt_dm_desc_next+0x22>
   1a00a:	2300      	movs	r3, #0
   1a00c:	f88d 3004 	strb.w	r3, [sp, #4]
   1a010:	f642 0303 	movw	r3, #10243	; 0x2803
   1a014:	6801      	ldr	r1, [r0, #0]
   1a016:	a801      	add	r0, sp, #4
   1a018:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a01c:	f000 fe51 	bl	1acc2 <bt_uuid_cmp>
   1a020:	b900      	cbnz	r0, 1a024 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1a022:	2400      	movs	r4, #0
}
   1a024:	4620      	mov	r0, r4
   1a026:	b002      	add	sp, #8
   1a028:	bd10      	pop	{r4, pc}

0001a02a <bt_gatt_dm_desc_by_uuid>:
{
   1a02a:	b570      	push	{r4, r5, r6, lr}
   1a02c:	4605      	mov	r5, r0
   1a02e:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1a030:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1a032:	4621      	mov	r1, r4
   1a034:	4628      	mov	r0, r5
   1a036:	f7ff ffe3 	bl	1a000 <bt_gatt_dm_desc_next>
   1a03a:	4604      	mov	r4, r0
   1a03c:	b128      	cbz	r0, 1a04a <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1a03e:	4630      	mov	r0, r6
   1a040:	6821      	ldr	r1, [r4, #0]
   1a042:	f000 fe3e 	bl	1acc2 <bt_uuid_cmp>
   1a046:	2800      	cmp	r0, #0
   1a048:	d1f3      	bne.n	1a032 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1a04a:	4620      	mov	r0, r4
   1a04c:	bd70      	pop	{r4, r5, r6, pc}

0001a04e <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1a04e:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a050:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1a054:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a056:	f06f 0102 	mvn.w	r1, #2
   1a05a:	4628      	mov	r0, r5
   1a05c:	f7ff ff45 	bl	19eea <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a060:	0783      	lsls	r3, r0, #30
   1a062:	d509      	bpl.n	1a078 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1a064:	4620      	mov	r0, r4
   1a066:	f7ff ff29 	bl	19ebc <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a06a:	f06f 0101 	mvn.w	r1, #1
   1a06e:	4628      	mov	r0, r5
   1a070:	f7ff ff3b 	bl	19eea <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1a074:	2000      	movs	r0, #0
}
   1a076:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1a078:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1a07c:	e7fb      	b.n	1a076 <bt_gatt_dm_data_release+0x28>

0001a07e <bt_scan_stop>:
	return bt_le_scan_stop();
   1a07e:	f7f5 bf3f 	b.w	ff00 <bt_le_scan_stop>

0001a082 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1a082:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1a084:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1a086:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a088:	bf9c      	itt	ls
   1a08a:	6880      	ldrls	r0, [r0, #8]
   1a08c:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1a08e:	3b01      	subs	r3, #1
   1a090:	1a98      	subs	r0, r3, r2
}
   1a092:	4770      	bx	lr

0001a094 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1a098:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a09c:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1a09e:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a0a2:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1a0a4:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a0a6:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a0a8:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1a0aa:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1a0ac:	d904      	bls.n	1a0b8 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a0ae:	f000 fd93 	bl	1abd8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a0b2:	60ec      	str	r4, [r5, #12]
}
   1a0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a0b8:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1a0ba:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a0be:	f000 fd8b 	bl	1abd8 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a0c2:	4622      	mov	r2, r4
   1a0c4:	6868      	ldr	r0, [r5, #4]
   1a0c6:	eb07 0108 	add.w	r1, r7, r8
   1a0ca:	e7f0      	b.n	1a0ae <_WriteNoCheck+0x1a>

0001a0cc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1a0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a0d0:	4606      	mov	r6, r0
   1a0d2:	4689      	mov	r9, r1
   1a0d4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1a0d6:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1a0da:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a0dc:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a0de:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1a0e0:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a0e2:	bf28      	it	cs
   1a0e4:	18e4      	addcs	r4, r4, r3
   1a0e6:	3c01      	subs	r4, #1
   1a0e8:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a0ea:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a0ec:	42bc      	cmp	r4, r7
   1a0ee:	bf28      	it	cs
   1a0f0:	463c      	movcs	r4, r7
   1a0f2:	4294      	cmp	r4, r2
   1a0f4:	bf28      	it	cs
   1a0f6:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a0f8:	6870      	ldr	r0, [r6, #4]
   1a0fa:	4649      	mov	r1, r9
   1a0fc:	4428      	add	r0, r5
   1a0fe:	4622      	mov	r2, r4
   1a100:	f000 fd6a 	bl	1abd8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a104:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1a106:	4425      	add	r5, r4
      WrOff = 0u;
   1a108:	42ab      	cmp	r3, r5
   1a10a:	bf08      	it	eq
   1a10c:	2500      	moveq	r5, #0
  } while (NumBytes);
   1a10e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1a110:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1a112:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1a114:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1a116:	d1e1      	bne.n	1a0dc <_WriteBlocking+0x10>
}
   1a118:	4640      	mov	r0, r8
   1a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a11e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a11e:	f7f2 baad 	b.w	c67c <_DoInit>

0001a122 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1a122:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a124:	f7ff fffb 	bl	1a11e <SEGGER_RTT_Init>

	return 0;
}
   1a128:	2000      	movs	r0, #0
   1a12a:	bd08      	pop	{r3, pc}

0001a12c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1a12c:	b538      	push	{r3, r4, r5, lr}
   1a12e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1a130:	42ab      	cmp	r3, r5
{
   1a132:	4611      	mov	r1, r2
   1a134:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1a136:	d804      	bhi.n	1a142 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1a138:	461a      	mov	r2, r3
   1a13a:	f000 fd4d 	bl	1abd8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1a13e:	4620      	mov	r0, r4
   1a140:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1a142:	2400      	movs	r4, #0
   1a144:	e7fb      	b.n	1a13e <_copy+0x12>

0001a146 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1a146:	f000 bd72 	b.w	1ac2e <memset>

0001a14a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1a14a:	09c3      	lsrs	r3, r0, #7
   1a14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a150:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1a154:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1a158:	b2c0      	uxtb	r0, r0
   1a15a:	4770      	bx	lr

0001a15c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1a15c:	78cb      	ldrb	r3, [r1, #3]
   1a15e:	7802      	ldrb	r2, [r0, #0]
   1a160:	4053      	eors	r3, r2
   1a162:	7003      	strb	r3, [r0, #0]
   1a164:	884b      	ldrh	r3, [r1, #2]
   1a166:	7842      	ldrb	r2, [r0, #1]
   1a168:	4053      	eors	r3, r2
   1a16a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1a16c:	680a      	ldr	r2, [r1, #0]
   1a16e:	7883      	ldrb	r3, [r0, #2]
   1a170:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a174:	7083      	strb	r3, [r0, #2]
   1a176:	680a      	ldr	r2, [r1, #0]
   1a178:	78c3      	ldrb	r3, [r0, #3]
   1a17a:	4053      	eors	r3, r2
   1a17c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1a17e:	79cb      	ldrb	r3, [r1, #7]
   1a180:	7902      	ldrb	r2, [r0, #4]
   1a182:	4053      	eors	r3, r2
   1a184:	7103      	strb	r3, [r0, #4]
   1a186:	88cb      	ldrh	r3, [r1, #6]
   1a188:	7942      	ldrb	r2, [r0, #5]
   1a18a:	4053      	eors	r3, r2
   1a18c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1a18e:	684a      	ldr	r2, [r1, #4]
   1a190:	7983      	ldrb	r3, [r0, #6]
   1a192:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a196:	7183      	strb	r3, [r0, #6]
   1a198:	684a      	ldr	r2, [r1, #4]
   1a19a:	79c3      	ldrb	r3, [r0, #7]
   1a19c:	4053      	eors	r3, r2
   1a19e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1a1a0:	7acb      	ldrb	r3, [r1, #11]
   1a1a2:	7a02      	ldrb	r2, [r0, #8]
   1a1a4:	4053      	eors	r3, r2
   1a1a6:	7203      	strb	r3, [r0, #8]
   1a1a8:	7a42      	ldrb	r2, [r0, #9]
   1a1aa:	894b      	ldrh	r3, [r1, #10]
   1a1ac:	4053      	eors	r3, r2
   1a1ae:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1a1b0:	688a      	ldr	r2, [r1, #8]
   1a1b2:	7a83      	ldrb	r3, [r0, #10]
   1a1b4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a1b8:	7283      	strb	r3, [r0, #10]
   1a1ba:	688a      	ldr	r2, [r1, #8]
   1a1bc:	7ac3      	ldrb	r3, [r0, #11]
   1a1be:	4053      	eors	r3, r2
   1a1c0:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1a1c2:	7bcb      	ldrb	r3, [r1, #15]
   1a1c4:	7b02      	ldrb	r2, [r0, #12]
   1a1c6:	4053      	eors	r3, r2
   1a1c8:	7303      	strb	r3, [r0, #12]
   1a1ca:	89cb      	ldrh	r3, [r1, #14]
   1a1cc:	7b42      	ldrb	r2, [r0, #13]
   1a1ce:	4053      	eors	r3, r2
   1a1d0:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1a1d2:	68ca      	ldr	r2, [r1, #12]
   1a1d4:	7b83      	ldrb	r3, [r0, #14]
   1a1d6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a1da:	7383      	strb	r3, [r0, #14]
   1a1dc:	68ca      	ldr	r2, [r1, #12]
   1a1de:	7bc3      	ldrb	r3, [r0, #15]
   1a1e0:	4053      	eors	r3, r2
   1a1e2:	73c3      	strb	r3, [r0, #15]
}
   1a1e4:	4770      	bx	lr

0001a1e6 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1a1e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a1e8:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a1ea:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a1ec:	f88d 2000 	strb.w	r2, [sp]
   1a1f0:	7942      	ldrb	r2, [r0, #5]
   1a1f2:	f88d 2001 	strb.w	r2, [sp, #1]
   1a1f6:	7a82      	ldrb	r2, [r0, #10]
   1a1f8:	f88d 2002 	strb.w	r2, [sp, #2]
   1a1fc:	7bc2      	ldrb	r2, [r0, #15]
   1a1fe:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1a202:	7902      	ldrb	r2, [r0, #4]
   1a204:	f88d 2004 	strb.w	r2, [sp, #4]
   1a208:	7a42      	ldrb	r2, [r0, #9]
   1a20a:	f88d 2005 	strb.w	r2, [sp, #5]
   1a20e:	7b82      	ldrb	r2, [r0, #14]
   1a210:	f88d 2006 	strb.w	r2, [sp, #6]
   1a214:	78c2      	ldrb	r2, [r0, #3]
   1a216:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1a21a:	7a02      	ldrb	r2, [r0, #8]
   1a21c:	f88d 2008 	strb.w	r2, [sp, #8]
   1a220:	7b42      	ldrb	r2, [r0, #13]
   1a222:	f88d 2009 	strb.w	r2, [sp, #9]
   1a226:	7882      	ldrb	r2, [r0, #2]
   1a228:	f88d 200a 	strb.w	r2, [sp, #10]
   1a22c:	79c2      	ldrb	r2, [r0, #7]
   1a22e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a232:	7b02      	ldrb	r2, [r0, #12]
   1a234:	f88d 200c 	strb.w	r2, [sp, #12]
   1a238:	7842      	ldrb	r2, [r0, #1]
   1a23a:	f88d 200d 	strb.w	r2, [sp, #13]
   1a23e:	7982      	ldrb	r2, [r0, #6]
   1a240:	f88d 200e 	strb.w	r2, [sp, #14]
   1a244:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a248:	2310      	movs	r3, #16
   1a24a:	466a      	mov	r2, sp
   1a24c:	4619      	mov	r1, r3
   1a24e:	f7ff ff6d 	bl	1a12c <_copy>
}
   1a252:	b005      	add	sp, #20
   1a254:	f85d fb04 	ldr.w	pc, [sp], #4

0001a258 <mult_row_column>:
{
   1a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a25a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a25c:	7808      	ldrb	r0, [r1, #0]
{
   1a25e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a260:	f7ff ff73 	bl	1a14a <_double_byte>
   1a264:	4605      	mov	r5, r0
   1a266:	7860      	ldrb	r0, [r4, #1]
   1a268:	f7ff ff6f 	bl	1a14a <_double_byte>
   1a26c:	78a2      	ldrb	r2, [r4, #2]
   1a26e:	7863      	ldrb	r3, [r4, #1]
   1a270:	4053      	eors	r3, r2
   1a272:	78e2      	ldrb	r2, [r4, #3]
   1a274:	4053      	eors	r3, r2
   1a276:	405d      	eors	r5, r3
   1a278:	4045      	eors	r5, r0
   1a27a:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1a27c:	7860      	ldrb	r0, [r4, #1]
   1a27e:	7827      	ldrb	r7, [r4, #0]
   1a280:	f7ff ff63 	bl	1a14a <_double_byte>
   1a284:	4605      	mov	r5, r0
   1a286:	78a0      	ldrb	r0, [r4, #2]
   1a288:	f7ff ff5f 	bl	1a14a <_double_byte>
   1a28c:	78a3      	ldrb	r3, [r4, #2]
   1a28e:	405f      	eors	r7, r3
   1a290:	78e3      	ldrb	r3, [r4, #3]
   1a292:	405f      	eors	r7, r3
   1a294:	407d      	eors	r5, r7
   1a296:	4045      	eors	r5, r0
   1a298:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1a29a:	78a0      	ldrb	r0, [r4, #2]
   1a29c:	7865      	ldrb	r5, [r4, #1]
   1a29e:	7827      	ldrb	r7, [r4, #0]
   1a2a0:	f7ff ff53 	bl	1a14a <_double_byte>
   1a2a4:	406f      	eors	r7, r5
   1a2a6:	4605      	mov	r5, r0
   1a2a8:	78e0      	ldrb	r0, [r4, #3]
   1a2aa:	f7ff ff4e 	bl	1a14a <_double_byte>
   1a2ae:	78e3      	ldrb	r3, [r4, #3]
   1a2b0:	405f      	eors	r7, r3
   1a2b2:	407d      	eors	r5, r7
   1a2b4:	4045      	eors	r5, r0
   1a2b6:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1a2b8:	7820      	ldrb	r0, [r4, #0]
   1a2ba:	f7ff ff46 	bl	1a14a <_double_byte>
   1a2be:	7863      	ldrb	r3, [r4, #1]
   1a2c0:	7825      	ldrb	r5, [r4, #0]
   1a2c2:	405d      	eors	r5, r3
   1a2c4:	78a3      	ldrb	r3, [r4, #2]
   1a2c6:	405d      	eors	r5, r3
   1a2c8:	4045      	eors	r5, r0
   1a2ca:	78e0      	ldrb	r0, [r4, #3]
   1a2cc:	f7ff ff3d 	bl	1a14a <_double_byte>
   1a2d0:	b2ed      	uxtb	r5, r5
   1a2d2:	4045      	eors	r5, r0
   1a2d4:	70f5      	strb	r5, [r6, #3]
}
   1a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a2d8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1a2d8:	b570      	push	{r4, r5, r6, lr}
   1a2da:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1a2dc:	4605      	mov	r5, r0
{
   1a2de:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1a2e0:	2800      	cmp	r0, #0
   1a2e2:	d049      	beq.n	1a378 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1a2e4:	2900      	cmp	r1, #0
   1a2e6:	d049      	beq.n	1a37c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1a2e8:	2a00      	cmp	r2, #0
   1a2ea:	d049      	beq.n	1a380 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a2ec:	2310      	movs	r3, #16
   1a2ee:	460a      	mov	r2, r1
   1a2f0:	4668      	mov	r0, sp
   1a2f2:	4619      	mov	r1, r3
   1a2f4:	f7ff ff1a 	bl	1a12c <_copy>
	add_round_key(state, s->words);
   1a2f8:	4621      	mov	r1, r4
   1a2fa:	4668      	mov	r0, sp
   1a2fc:	f7ff ff2e 	bl	1a15c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1a300:	3410      	adds	r4, #16
   1a302:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1a306:	4668      	mov	r0, sp
   1a308:	f7f2 fa18 	bl	c73c <sub_bytes>
		shift_rows(state);
   1a30c:	4668      	mov	r0, sp
   1a30e:	f7ff ff6a 	bl	1a1e6 <shift_rows>
	mult_row_column(t, s);
   1a312:	4669      	mov	r1, sp
   1a314:	a804      	add	r0, sp, #16
   1a316:	f7ff ff9f 	bl	1a258 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1a31a:	a901      	add	r1, sp, #4
   1a31c:	a805      	add	r0, sp, #20
   1a31e:	f7ff ff9b 	bl	1a258 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1a322:	a902      	add	r1, sp, #8
   1a324:	a806      	add	r0, sp, #24
   1a326:	f7ff ff97 	bl	1a258 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1a32a:	a903      	add	r1, sp, #12
   1a32c:	a807      	add	r0, sp, #28
   1a32e:	f7ff ff93 	bl	1a258 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a332:	2310      	movs	r3, #16
   1a334:	4668      	mov	r0, sp
   1a336:	4619      	mov	r1, r3
   1a338:	eb0d 0203 	add.w	r2, sp, r3
   1a33c:	f7ff fef6 	bl	1a12c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1a340:	4621      	mov	r1, r4
   1a342:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1a344:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1a346:	f7ff ff09 	bl	1a15c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1a34a:	42a6      	cmp	r6, r4
   1a34c:	d1db      	bne.n	1a306 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1a34e:	f7f2 f9f5 	bl	c73c <sub_bytes>
	shift_rows(state);
   1a352:	4668      	mov	r0, sp
   1a354:	f7ff ff47 	bl	1a1e6 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1a358:	4631      	mov	r1, r6
   1a35a:	4668      	mov	r0, sp
   1a35c:	f7ff fefe 	bl	1a15c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1a360:	2310      	movs	r3, #16
   1a362:	466a      	mov	r2, sp
   1a364:	4619      	mov	r1, r3
   1a366:	4628      	mov	r0, r5
   1a368:	f7ff fee0 	bl	1a12c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1a36c:	4668      	mov	r0, sp
   1a36e:	2210      	movs	r2, #16
   1a370:	2100      	movs	r1, #0
   1a372:	f7ff fee8 	bl	1a146 <_set>

	return TC_CRYPTO_SUCCESS;
   1a376:	2001      	movs	r0, #1
}
   1a378:	b008      	add	sp, #32
   1a37a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a37c:	4608      	mov	r0, r1
   1a37e:	e7fb      	b.n	1a378 <tc_aes_encrypt+0xa0>
   1a380:	4610      	mov	r0, r2
   1a382:	e7f9      	b.n	1a378 <tc_aes_encrypt+0xa0>

0001a384 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a384:	460a      	mov	r2, r1
{
   1a386:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a388:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1a38c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a38e:	2b00      	cmp	r3, #0
   1a390:	bfb4      	ite	lt
   1a392:	2387      	movlt	r3, #135	; 0x87
   1a394:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1a396:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a39a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1a39e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1a3a0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1a3a4:	d002      	beq.n	1a3ac <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1a3a6:	7813      	ldrb	r3, [r2, #0]
   1a3a8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1a3aa:	e7f4      	b.n	1a396 <gf_double+0x12>
	}
}
   1a3ac:	bd10      	pop	{r4, pc}

0001a3ae <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1a3ae:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1a3b0:	b120      	cbz	r0, 1a3bc <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1a3b2:	2258      	movs	r2, #88	; 0x58
   1a3b4:	2100      	movs	r1, #0
   1a3b6:	f7ff fec6 	bl	1a146 <_set>
   1a3ba:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a3bc:	bd08      	pop	{r3, pc}

0001a3be <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1a3be:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a3c0:	4604      	mov	r4, r0
   1a3c2:	b188      	cbz	r0, 1a3e8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a3c4:	2210      	movs	r2, #16
   1a3c6:	2100      	movs	r1, #0
   1a3c8:	f7ff febd 	bl	1a146 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1a3cc:	2210      	movs	r2, #16
   1a3ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a3d2:	2100      	movs	r1, #0
   1a3d4:	f7ff feb7 	bl	1a146 <_set>
	s->leftover_offset = 0;
   1a3d8:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1a3da:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1a3dc:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1a3de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a3e2:	2001      	movs	r0, #1
   1a3e4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1a3e8:	bd10      	pop	{r4, pc}

0001a3ea <tc_cmac_setup>:
{
   1a3ea:	b570      	push	{r4, r5, r6, lr}
   1a3ec:	460d      	mov	r5, r1
   1a3ee:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1a3f0:	4604      	mov	r4, r0
   1a3f2:	b310      	cbz	r0, 1a43a <tc_cmac_setup+0x50>
   1a3f4:	b311      	cbz	r1, 1a43c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1a3f6:	2258      	movs	r2, #88	; 0x58
   1a3f8:	2100      	movs	r1, #0
   1a3fa:	f7ff fea4 	bl	1a146 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1a3fe:	4629      	mov	r1, r5
   1a400:	4630      	mov	r0, r6
	s->sched = sched;
   1a402:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1a404:	f7f2 f9a6 	bl	c754 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a408:	2210      	movs	r2, #16
   1a40a:	2100      	movs	r1, #0
   1a40c:	4620      	mov	r0, r4
   1a40e:	f7ff fe9a 	bl	1a146 <_set>
	gf_double (s->K1, s->iv);
   1a412:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a416:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a418:	4621      	mov	r1, r4
   1a41a:	4620      	mov	r0, r4
   1a41c:	f7ff ff5c 	bl	1a2d8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1a420:	4621      	mov	r1, r4
   1a422:	4628      	mov	r0, r5
   1a424:	f7ff ffae 	bl	1a384 <gf_double>
	gf_double (s->K2, s->K1);
   1a428:	4629      	mov	r1, r5
   1a42a:	f104 0020 	add.w	r0, r4, #32
   1a42e:	f7ff ffa9 	bl	1a384 <gf_double>
	tc_cmac_init(s);
   1a432:	4620      	mov	r0, r4
   1a434:	f7ff ffc3 	bl	1a3be <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1a438:	2001      	movs	r0, #1
}
   1a43a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a43c:	4608      	mov	r0, r1
   1a43e:	e7fc      	b.n	1a43a <tc_cmac_setup+0x50>

0001a440 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1a440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a444:	460d      	mov	r5, r1
   1a446:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a448:	4604      	mov	r4, r0
   1a44a:	2800      	cmp	r0, #0
   1a44c:	d061      	beq.n	1a512 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1a44e:	b912      	cbnz	r2, 1a456 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1a450:	2001      	movs	r0, #1
}
   1a452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1a456:	2900      	cmp	r1, #0
   1a458:	d05b      	beq.n	1a512 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1a45a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1a45e:	ea53 0102 	orrs.w	r1, r3, r2
   1a462:	d056      	beq.n	1a512 <tc_cmac_update+0xd2>
	s->countdown--;
   1a464:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1a466:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1a46a:	f142 32ff 	adc.w	r2, r2, #4294967295
   1a46e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1a472:	f1b8 0f00 	cmp.w	r8, #0
   1a476:	d02a      	beq.n	1a4ce <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1a478:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a47c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1a480:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a482:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1a484:	d208      	bcs.n	1a498 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a486:	462a      	mov	r2, r5
   1a488:	4633      	mov	r3, r6
   1a48a:	4631      	mov	r1, r6
   1a48c:	f7ff fe4e 	bl	1a12c <_copy>
			s->leftover_offset += data_length;
   1a490:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a492:	4432      	add	r2, r6
   1a494:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1a496:	e7db      	b.n	1a450 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1a498:	463b      	mov	r3, r7
   1a49a:	462a      	mov	r2, r5
   1a49c:	4639      	mov	r1, r7
   1a49e:	f7ff fe45 	bl	1a12c <_copy>
		s->leftover_offset = 0;
   1a4a2:	2300      	movs	r3, #0
   1a4a4:	3e10      	subs	r6, #16
   1a4a6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1a4a8:	4446      	add	r6, r8
		data += remaining_space;
   1a4aa:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a4ac:	1e63      	subs	r3, r4, #1
   1a4ae:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1a4b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a4b6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a4ba:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1a4bc:	ea82 0200 	eor.w	r2, r2, r0
   1a4c0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a4c2:	d1f6      	bne.n	1a4b2 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a4c4:	4621      	mov	r1, r4
   1a4c6:	4620      	mov	r0, r4
   1a4c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a4ca:	f7ff ff05 	bl	1a2d8 <tc_aes_encrypt>
   1a4ce:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1a4d2:	2e10      	cmp	r6, #16
   1a4d4:	d80a      	bhi.n	1a4ec <tc_cmac_update+0xac>
	if (data_length > 0) {
   1a4d6:	2e00      	cmp	r6, #0
   1a4d8:	d0ba      	beq.n	1a450 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1a4da:	4633      	mov	r3, r6
   1a4dc:	462a      	mov	r2, r5
   1a4de:	4631      	mov	r1, r6
   1a4e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a4e4:	f7ff fe22 	bl	1a12c <_copy>
		s->leftover_offset = data_length;
   1a4e8:	6466      	str	r6, [r4, #68]	; 0x44
   1a4ea:	e7b1      	b.n	1a450 <tc_cmac_update+0x10>
   1a4ec:	1e63      	subs	r3, r4, #1
   1a4ee:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1a4f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a4f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a4f8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1a4fa:	ea82 0200 	eor.w	r2, r2, r0
   1a4fe:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a500:	d1f6      	bne.n	1a4f0 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a502:	4621      	mov	r1, r4
   1a504:	4620      	mov	r0, r4
   1a506:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a508:	f7ff fee6 	bl	1a2d8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1a50c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1a50e:	3e10      	subs	r6, #16
   1a510:	e7df      	b.n	1a4d2 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1a512:	2000      	movs	r0, #0
   1a514:	e79d      	b.n	1a452 <tc_cmac_update+0x12>

0001a516 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a516:	b570      	push	{r4, r5, r6, lr}
   1a518:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a51a:	4605      	mov	r5, r0
   1a51c:	b1f0      	cbz	r0, 1a55c <tc_cmac_final+0x46>
   1a51e:	b371      	cbz	r1, 1a57e <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a520:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a522:	2a10      	cmp	r2, #16
   1a524:	d11b      	bne.n	1a55e <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a526:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a528:	1e63      	subs	r3, r4, #1
   1a52a:	3901      	subs	r1, #1
   1a52c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a530:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a534:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a538:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a53a:	ea82 0206 	eor.w	r2, r2, r6
   1a53e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1a542:	ea82 0206 	eor.w	r2, r2, r6
   1a546:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a548:	d1f2      	bne.n	1a530 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a54a:	4621      	mov	r1, r4
   1a54c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a54e:	4628      	mov	r0, r5
   1a550:	f7ff fec2 	bl	1a2d8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a554:	4620      	mov	r0, r4
   1a556:	f7ff ff2a 	bl	1a3ae <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a55a:	2001      	movs	r0, #1
}
   1a55c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a55e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a562:	2100      	movs	r1, #0
   1a564:	f1c2 0210 	rsb	r2, r2, #16
   1a568:	4420      	add	r0, r4
   1a56a:	f7ff fdec 	bl	1a146 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a56e:	2280      	movs	r2, #128	; 0x80
   1a570:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1a572:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a576:	4423      	add	r3, r4
   1a578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a57c:	e7d4      	b.n	1a528 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a57e:	4608      	mov	r0, r1
   1a580:	e7ec      	b.n	1a55c <tc_cmac_final+0x46>

0001a582 <tc_sha256_update>:
{
   1a582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a584:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1a586:	b110      	cbz	r0, 1a58e <tc_sha256_update+0xc>
   1a588:	b1f9      	cbz	r1, 1a5ca <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1a58a:	b90a      	cbnz	r2, 1a590 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1a58c:	2001      	movs	r0, #1
}
   1a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1a590:	2600      	movs	r6, #0
   1a592:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1a594:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1a598:	42a5      	cmp	r5, r4
   1a59a:	d0f7      	beq.n	1a58c <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1a59c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1a59e:	1c5a      	adds	r2, r3, #1
   1a5a0:	6682      	str	r2, [r0, #104]	; 0x68
   1a5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a5a6:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a5a8:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1a5aa:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a5ae:	d9f3      	bls.n	1a598 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1a5b0:	4639      	mov	r1, r7
   1a5b2:	f7f2 f923 	bl	c7fc <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a5b6:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1a5ba:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1a5be:	f142 0200 	adc.w	r2, r2, #0
   1a5c2:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1a5c6:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a5c8:	e7e6      	b.n	1a598 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1a5ca:	4608      	mov	r0, r1
   1a5cc:	e7df      	b.n	1a58e <tc_sha256_update+0xc>

0001a5ce <tc_sha256_final>:
{
   1a5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5d0:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1a5d2:	4605      	mov	r5, r0
   1a5d4:	2800      	cmp	r0, #0
   1a5d6:	d055      	beq.n	1a684 <tc_sha256_final+0xb6>
   1a5d8:	2900      	cmp	r1, #0
   1a5da:	d054      	beq.n	1a686 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1a5dc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1a5de:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1a5e2:	00d8      	lsls	r0, r3, #3
   1a5e4:	1812      	adds	r2, r2, r0
   1a5e6:	f141 0100 	adc.w	r1, r1, #0
   1a5ea:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a5ee:	2280      	movs	r2, #128	; 0x80
   1a5f0:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a5f2:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a5f4:	4423      	add	r3, r4
   1a5f6:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1a5f8:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a5fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1a600:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a604:	d90a      	bls.n	1a61c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1a606:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1a60a:	4639      	mov	r1, r7
   1a60c:	4430      	add	r0, r6
   1a60e:	f7ff fd9a 	bl	1a146 <_set>
		compress(s->iv, s->leftover);
   1a612:	4631      	mov	r1, r6
   1a614:	4620      	mov	r0, r4
   1a616:	f7f2 f8f1 	bl	c7fc <compress>
		s->leftover_offset = 0;
   1a61a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1a61c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1a61e:	2100      	movs	r1, #0
   1a620:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1a624:	4430      	add	r0, r6
   1a626:	f7ff fd8e 	bl	1a146 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1a62a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1a62c:	4631      	mov	r1, r6
   1a62e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1a630:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1a632:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1a634:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1a636:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1a63a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1a63e:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1a640:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1a642:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1a644:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1a648:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1a64c:	f7f2 f8d6 	bl	c7fc <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a650:	1f26      	subs	r6, r4, #4
   1a652:	1d2b      	adds	r3, r5, #4
   1a654:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1a658:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a65c:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1a65e:	0e11      	lsrs	r1, r2, #24
   1a660:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1a664:	0c11      	lsrs	r1, r2, #16
   1a666:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1a66a:	0a11      	lsrs	r1, r2, #8
   1a66c:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1a670:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a674:	4283      	cmp	r3, r0
   1a676:	d1ef      	bne.n	1a658 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1a678:	4620      	mov	r0, r4
   1a67a:	2270      	movs	r2, #112	; 0x70
   1a67c:	2100      	movs	r1, #0
   1a67e:	f7ff fd62 	bl	1a146 <_set>
	return TC_CRYPTO_SUCCESS;
   1a682:	2001      	movs	r0, #1
}
   1a684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1a686:	4608      	mov	r0, r1
   1a688:	e7fc      	b.n	1a684 <tc_sha256_final+0xb6>

0001a68a <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1a68a:	b530      	push	{r4, r5, lr}
   1a68c:	1e43      	subs	r3, r0, #1
   1a68e:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1a690:	42a9      	cmp	r1, r5
   1a692:	d106      	bne.n	1a6a2 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1a694:	2136      	movs	r1, #54	; 0x36
   1a696:	245c      	movs	r4, #92	; 0x5c
   1a698:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1a69a:	1a13      	subs	r3, r2, r0
   1a69c:	2b3f      	cmp	r3, #63	; 0x3f
   1a69e:	d90c      	bls.n	1a6ba <rekey+0x30>
	}
}
   1a6a0:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1a6a2:	780c      	ldrb	r4, [r1, #0]
   1a6a4:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1a6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1a6ac:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a6b0:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1a6b4:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1a6b8:	e7ea      	b.n	1a690 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1a6ba:	f802 1b01 	strb.w	r1, [r2], #1
   1a6be:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1a6c2:	e7ea      	b.n	1a69a <rekey+0x10>

0001a6c4 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6c6:	460e      	mov	r6, r1
   1a6c8:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1a6ca:	4605      	mov	r5, r0
{
   1a6cc:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1a6ce:	b1b8      	cbz	r0, 1a700 <tc_hmac_set_key+0x3c>
   1a6d0:	b341      	cbz	r1, 1a724 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1a6d2:	b34a      	cbz	r2, 1a728 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1a6d4:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1a6d6:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1a6da:	d813      	bhi.n	1a704 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1a6dc:	a810      	add	r0, sp, #64	; 0x40
   1a6de:	f7f2 f975 	bl	c9cc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1a6e2:	4622      	mov	r2, r4
   1a6e4:	4669      	mov	r1, sp
   1a6e6:	a810      	add	r0, sp, #64	; 0x40
   1a6e8:	f7ff ff4b 	bl	1a582 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1a6ec:	a910      	add	r1, sp, #64	; 0x40
   1a6ee:	a834      	add	r0, sp, #208	; 0xd0
   1a6f0:	f7ff ff6d 	bl	1a5ce <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1a6f4:	4622      	mov	r2, r4
   1a6f6:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1a6f8:	4638      	mov	r0, r7
   1a6fa:	f7ff ffc6 	bl	1a68a <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1a6fe:	2001      	movs	r0, #1
}
   1a700:	b04d      	add	sp, #308	; 0x134
   1a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1a704:	f7f2 f962 	bl	c9cc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1a708:	4622      	mov	r2, r4
   1a70a:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1a70c:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1a710:	4628      	mov	r0, r5
   1a712:	f7ff ff36 	bl	1a582 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1a716:	4629      	mov	r1, r5
   1a718:	4620      	mov	r0, r4
   1a71a:	f7ff ff58 	bl	1a5ce <tc_sha256_final>
		rekey(ctx->key,
   1a71e:	2220      	movs	r2, #32
   1a720:	4621      	mov	r1, r4
   1a722:	e7e9      	b.n	1a6f8 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1a724:	4608      	mov	r0, r1
   1a726:	e7eb      	b.n	1a700 <tc_hmac_set_key+0x3c>
   1a728:	4610      	mov	r0, r2
   1a72a:	e7e9      	b.n	1a700 <tc_hmac_set_key+0x3c>

0001a72c <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1a72c:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1a72e:	4604      	mov	r4, r0
   1a730:	b140      	cbz	r0, 1a744 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1a732:	f7f2 f94b 	bl	c9cc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1a736:	2240      	movs	r2, #64	; 0x40
   1a738:	4620      	mov	r0, r4
   1a73a:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1a73e:	f7ff ff20 	bl	1a582 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1a742:	2001      	movs	r0, #1
}
   1a744:	bd10      	pop	{r4, pc}

0001a746 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1a746:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1a748:	b110      	cbz	r0, 1a750 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1a74a:	f7ff ff1a 	bl	1a582 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1a74e:	2001      	movs	r0, #1
}
   1a750:	bd08      	pop	{r3, pc}

0001a752 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1a752:	b570      	push	{r4, r5, r6, lr}
   1a754:	460e      	mov	r6, r1
   1a756:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a758:	4605      	mov	r5, r0
   1a75a:	b1f0      	cbz	r0, 1a79a <tc_hmac_final+0x48>
   1a75c:	2920      	cmp	r1, #32
   1a75e:	d11c      	bne.n	1a79a <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1a760:	b1ea      	cbz	r2, 1a79e <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1a762:	4611      	mov	r1, r2
   1a764:	f7ff ff33 	bl	1a5ce <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1a768:	4620      	mov	r0, r4
   1a76a:	f7f2 f92f 	bl	c9cc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1a76e:	2240      	movs	r2, #64	; 0x40
   1a770:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1a774:	4620      	mov	r0, r4
   1a776:	f7ff ff04 	bl	1a582 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1a77a:	4632      	mov	r2, r6
   1a77c:	4629      	mov	r1, r5
   1a77e:	4620      	mov	r0, r4
   1a780:	f7ff feff 	bl	1a582 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1a784:	4621      	mov	r1, r4
   1a786:	4628      	mov	r0, r5
   1a788:	f7ff ff21 	bl	1a5ce <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1a78c:	4620      	mov	r0, r4
   1a78e:	22f0      	movs	r2, #240	; 0xf0
   1a790:	2100      	movs	r1, #0
   1a792:	f7ff fcd8 	bl	1a146 <_set>

	return TC_CRYPTO_SUCCESS;
   1a796:	2001      	movs	r0, #1
}
   1a798:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a79a:	2000      	movs	r0, #0
   1a79c:	e7fc      	b.n	1a798 <tc_hmac_final+0x46>
   1a79e:	4610      	mov	r0, r2
   1a7a0:	e7fa      	b.n	1a798 <tc_hmac_final+0x46>

0001a7a2 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1a7a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7a6:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1a7a8:	f04f 0b01 	mov.w	fp, #1
{
   1a7ac:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1a7ae:	2300      	movs	r3, #0
{
   1a7b0:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a7b2:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1a7b6:	4631      	mov	r1, r6
{
   1a7b8:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a7ba:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1a7bc:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1a7c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1a7c4:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a7c8:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a7cc:	f7ff ff7a 	bl	1a6c4 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1a7d0:	4620      	mov	r0, r4
   1a7d2:	f7ff ffab 	bl	1a72c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a7d6:	2220      	movs	r2, #32
   1a7d8:	4629      	mov	r1, r5
   1a7da:	4620      	mov	r0, r4
   1a7dc:	f7ff ffb3 	bl	1a746 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1a7e0:	465a      	mov	r2, fp
   1a7e2:	4620      	mov	r0, r4
   1a7e4:	f10d 0106 	add.w	r1, sp, #6
   1a7e8:	f7ff ffad 	bl	1a746 <tc_hmac_update>

	if (data && datalen)
   1a7ec:	f1b8 0f00 	cmp.w	r8, #0
   1a7f0:	d007      	beq.n	1a802 <update+0x60>
   1a7f2:	f1b9 0f00 	cmp.w	r9, #0
   1a7f6:	d004      	beq.n	1a802 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1a7f8:	464a      	mov	r2, r9
   1a7fa:	4641      	mov	r1, r8
   1a7fc:	4620      	mov	r0, r4
   1a7fe:	f7ff ffa2 	bl	1a746 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1a802:	b13f      	cbz	r7, 1a814 <update+0x72>
   1a804:	f1ba 0f00 	cmp.w	sl, #0
   1a808:	d004      	beq.n	1a814 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1a80a:	4652      	mov	r2, sl
   1a80c:	4639      	mov	r1, r7
   1a80e:	4620      	mov	r0, r4
   1a810:	f7ff ff99 	bl	1a746 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1a814:	4622      	mov	r2, r4
   1a816:	2120      	movs	r1, #32
   1a818:	4630      	mov	r0, r6
   1a81a:	f7ff ff9a 	bl	1a752 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a81e:	2220      	movs	r2, #32
   1a820:	4631      	mov	r1, r6
   1a822:	4620      	mov	r0, r4
   1a824:	f7ff ff4e 	bl	1a6c4 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1a828:	4620      	mov	r0, r4
   1a82a:	f7ff ff7f 	bl	1a72c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a82e:	2220      	movs	r2, #32
   1a830:	4629      	mov	r1, r5
   1a832:	4620      	mov	r0, r4
   1a834:	f7ff ff87 	bl	1a746 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1a838:	4622      	mov	r2, r4
   1a83a:	2120      	movs	r1, #32
   1a83c:	4628      	mov	r0, r5
   1a83e:	f7ff ff88 	bl	1a752 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1a842:	f1b8 0f00 	cmp.w	r8, #0
   1a846:	d03a      	beq.n	1a8be <update+0x11c>
   1a848:	f1b9 0f00 	cmp.w	r9, #0
   1a84c:	d037      	beq.n	1a8be <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a84e:	2220      	movs	r2, #32
   1a850:	4631      	mov	r1, r6
   1a852:	4620      	mov	r0, r4
   1a854:	f7ff ff36 	bl	1a6c4 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1a858:	4620      	mov	r0, r4
   1a85a:	f7ff ff67 	bl	1a72c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a85e:	2220      	movs	r2, #32
   1a860:	4629      	mov	r1, r5
   1a862:	4620      	mov	r0, r4
   1a864:	f7ff ff6f 	bl	1a746 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1a868:	2201      	movs	r2, #1
   1a86a:	f10d 0107 	add.w	r1, sp, #7
   1a86e:	4620      	mov	r0, r4
   1a870:	f7ff ff69 	bl	1a746 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1a874:	464a      	mov	r2, r9
   1a876:	4641      	mov	r1, r8
   1a878:	4620      	mov	r0, r4
   1a87a:	f7ff ff64 	bl	1a746 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1a87e:	b13f      	cbz	r7, 1a890 <update+0xee>
   1a880:	f1ba 0f00 	cmp.w	sl, #0
   1a884:	d004      	beq.n	1a890 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1a886:	4652      	mov	r2, sl
   1a888:	4639      	mov	r1, r7
   1a88a:	4620      	mov	r0, r4
   1a88c:	f7ff ff5b 	bl	1a746 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1a890:	4622      	mov	r2, r4
   1a892:	2120      	movs	r1, #32
   1a894:	4630      	mov	r0, r6
   1a896:	f7ff ff5c 	bl	1a752 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a89a:	2220      	movs	r2, #32
   1a89c:	4631      	mov	r1, r6
   1a89e:	4620      	mov	r0, r4
   1a8a0:	f7ff ff10 	bl	1a6c4 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1a8a4:	4620      	mov	r0, r4
   1a8a6:	f7ff ff41 	bl	1a72c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a8aa:	2220      	movs	r2, #32
   1a8ac:	4629      	mov	r1, r5
   1a8ae:	4620      	mov	r0, r4
   1a8b0:	f7ff ff49 	bl	1a746 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1a8b4:	4622      	mov	r2, r4
   1a8b6:	2120      	movs	r1, #32
   1a8b8:	4628      	mov	r0, r5
   1a8ba:	f7ff ff4a 	bl	1a752 <tc_hmac_final>
}
   1a8be:	b003      	add	sp, #12
   1a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a8c4 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1a8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a8c6:	460c      	mov	r4, r1
   1a8c8:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1a8ca:	4605      	mov	r5, r0
   1a8cc:	b1b0      	cbz	r0, 1a8fc <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1a8ce:	b1b9      	cbz	r1, 1a900 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1a8d0:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1a8d2:	2220      	movs	r2, #32
   1a8d4:	2100      	movs	r1, #0
   1a8d6:	30f0      	adds	r0, #240	; 0xf0
   1a8d8:	f7ff fc35 	bl	1a146 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1a8dc:	2220      	movs	r2, #32
   1a8de:	2101      	movs	r1, #1
   1a8e0:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1a8e4:	f7ff fc2f 	bl	1a146 <_set>
	update(prng, personalization, plen, 0, 0);
   1a8e8:	4628      	mov	r0, r5
   1a8ea:	4633      	mov	r3, r6
   1a8ec:	463a      	mov	r2, r7
   1a8ee:	4621      	mov	r1, r4
   1a8f0:	9600      	str	r6, [sp, #0]
   1a8f2:	f7ff ff56 	bl	1a7a2 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1a8f6:	2001      	movs	r0, #1
	prng->countdown = 0;
   1a8f8:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1a8fc:	b003      	add	sp, #12
   1a8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1a900:	4608      	mov	r0, r1
   1a902:	e7fb      	b.n	1a8fc <tc_hmac_prng_init+0x38>

0001a904 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1a904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a906:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1a908:	4605      	mov	r5, r0
   1a90a:	b180      	cbz	r0, 1a92e <tc_hmac_prng_reseed+0x2a>
   1a90c:	b179      	cbz	r1, 1a92e <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1a90e:	2a1f      	cmp	r2, #31
   1a910:	d90d      	bls.n	1a92e <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1a912:	b153      	cbz	r3, 1a92a <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1a914:	b16c      	cbz	r4, 1a932 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1a916:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1a918:	f7ff ff43 	bl	1a7a2 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1a91c:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1a920:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1a922:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1a926:	b003      	add	sp, #12
   1a928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1a92a:	9300      	str	r3, [sp, #0]
   1a92c:	e7f4      	b.n	1a918 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1a92e:	2000      	movs	r0, #0
   1a930:	e7f9      	b.n	1a926 <tc_hmac_prng_reseed+0x22>
   1a932:	4620      	mov	r0, r4
   1a934:	e7f7      	b.n	1a926 <tc_hmac_prng_reseed+0x22>

0001a936 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1a936:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a93a:	460d      	mov	r5, r1
   1a93c:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1a93e:	4680      	mov	r8, r0
   1a940:	b3d8      	cbz	r0, 1a9ba <tc_hmac_prng_generate+0x84>
   1a942:	b3d2      	cbz	r2, 1a9ba <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1a944:	1e4b      	subs	r3, r1, #1
   1a946:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1a94a:	d236      	bcs.n	1a9ba <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1a94c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1a950:	b3ab      	cbz	r3, 1a9be <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1a952:	3b01      	subs	r3, #1
   1a954:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a958:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a95c:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1a960:	2220      	movs	r2, #32
   1a962:	4649      	mov	r1, r9
   1a964:	4620      	mov	r0, r4
   1a966:	f7ff fead 	bl	1a6c4 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1a96a:	4620      	mov	r0, r4
   1a96c:	f7ff fede 	bl	1a72c <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1a970:	2220      	movs	r2, #32
   1a972:	4639      	mov	r1, r7
   1a974:	4620      	mov	r0, r4
   1a976:	f7ff fee6 	bl	1a746 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1a97a:	4622      	mov	r2, r4
   1a97c:	2120      	movs	r1, #32
   1a97e:	4638      	mov	r0, r7
   1a980:	f7ff fee7 	bl	1a752 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1a984:	2d20      	cmp	r5, #32
   1a986:	462e      	mov	r6, r5
   1a988:	bf28      	it	cs
   1a98a:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1a98c:	4640      	mov	r0, r8
   1a98e:	4633      	mov	r3, r6
   1a990:	463a      	mov	r2, r7
   1a992:	4631      	mov	r1, r6
   1a994:	f7ff fbca 	bl	1a12c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1a998:	2d20      	cmp	r5, #32
   1a99a:	bf38      	it	cc
   1a99c:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1a99e:	3d20      	subs	r5, #32
		out += bufferlen;
   1a9a0:	44b0      	add	r8, r6
	while (outlen != 0) {
   1a9a2:	d1dd      	bne.n	1a960 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1a9a4:	4620      	mov	r0, r4
   1a9a6:	462b      	mov	r3, r5
   1a9a8:	462a      	mov	r2, r5
   1a9aa:	4629      	mov	r1, r5
   1a9ac:	9500      	str	r5, [sp, #0]
   1a9ae:	f7ff fef8 	bl	1a7a2 <update>

	return TC_CRYPTO_SUCCESS;
   1a9b2:	2001      	movs	r0, #1
}
   1a9b4:	b003      	add	sp, #12
   1a9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1a9ba:	2000      	movs	r0, #0
   1a9bc:	e7fa      	b.n	1a9b4 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1a9be:	f04f 30ff 	mov.w	r0, #4294967295
   1a9c2:	e7f7      	b.n	1a9b4 <tc_hmac_prng_generate+0x7e>

0001a9c4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a9c4:	2100      	movs	r1, #0
   1a9c6:	2001      	movs	r0, #1
   1a9c8:	f7f2 b91e 	b.w	cc08 <z_arm_fatal_error>

0001a9cc <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1a9cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1a9ce:	f383 880b 	msr	PSPLIM, r3
}
   1a9d2:	4770      	bx	lr

0001a9d4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1a9d4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1a9d6:	6800      	ldr	r0, [r0, #0]
   1a9d8:	f7f2 b916 	b.w	cc08 <z_arm_fatal_error>

0001a9dc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1a9dc:	b508      	push	{r3, lr}
	handler();
   1a9de:	f7f2 f941 	bl	cc64 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1a9e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1a9e6:	f7f2 bb85 	b.w	d0f4 <z_arm_exc_exit>

0001a9ea <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1a9ea:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1a9ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a9f2:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1a9f4:	bf08      	it	eq
   1a9f6:	f06f 0015 	mvneq.w	r0, #21
   1a9fa:	4770      	bx	lr

0001a9fc <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1a9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aa00:	4684      	mov	ip, r0
   1aa02:	4688      	mov	r8, r1
	register const char *s = nptr;
   1aa04:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1aa06:	4621      	mov	r1, r4
   1aa08:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1aa0c:	2b20      	cmp	r3, #32
   1aa0e:	d0fa      	beq.n	1aa06 <strtol+0xa>
   1aa10:	f1a3 0009 	sub.w	r0, r3, #9
   1aa14:	2804      	cmp	r0, #4
   1aa16:	d9f6      	bls.n	1aa06 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1aa18:	2b2d      	cmp	r3, #45	; 0x2d
   1aa1a:	d12d      	bne.n	1aa78 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1aa1c:	784b      	ldrb	r3, [r1, #1]
   1aa1e:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1aa20:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1aa22:	2a00      	cmp	r2, #0
   1aa24:	d05a      	beq.n	1aadc <strtol+0xe0>
   1aa26:	2a10      	cmp	r2, #16
   1aa28:	d109      	bne.n	1aa3e <strtol+0x42>
   1aa2a:	2b30      	cmp	r3, #48	; 0x30
   1aa2c:	d107      	bne.n	1aa3e <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1aa2e:	7823      	ldrb	r3, [r4, #0]
   1aa30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1aa34:	2b58      	cmp	r3, #88	; 0x58
   1aa36:	d14c      	bne.n	1aad2 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1aa38:	2210      	movs	r2, #16
		c = s[1];
   1aa3a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1aa3c:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1aa3e:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1aa40:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1aa44:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1aa46:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1aa4a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1aa4c:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1aa50:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1aa54:	2d09      	cmp	r5, #9
   1aa56:	d815      	bhi.n	1aa84 <strtol+0x88>
			c -= '0';
   1aa58:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1aa5a:	429a      	cmp	r2, r3
   1aa5c:	dd22      	ble.n	1aaa4 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1aa5e:	1c75      	adds	r5, r6, #1
   1aa60:	d007      	beq.n	1aa72 <strtol+0x76>
   1aa62:	4570      	cmp	r0, lr
   1aa64:	d81b      	bhi.n	1aa9e <strtol+0xa2>
   1aa66:	d101      	bne.n	1aa6c <strtol+0x70>
   1aa68:	454b      	cmp	r3, r9
   1aa6a:	dc18      	bgt.n	1aa9e <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1aa6c:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1aa6e:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1aa72:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1aa76:	e7eb      	b.n	1aa50 <strtol+0x54>
	} else if (c == '+') {
   1aa78:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1aa7a:	bf04      	itt	eq
   1aa7c:	784b      	ldrbeq	r3, [r1, #1]
   1aa7e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1aa80:	2100      	movs	r1, #0
   1aa82:	e7ce      	b.n	1aa22 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1aa84:	f043 0520 	orr.w	r5, r3, #32
   1aa88:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1aa8a:	2d19      	cmp	r5, #25
   1aa8c:	d80a      	bhi.n	1aaa4 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1aa8e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1aa92:	2d1a      	cmp	r5, #26
   1aa94:	bf34      	ite	cc
   1aa96:	2537      	movcc	r5, #55	; 0x37
   1aa98:	2557      	movcs	r5, #87	; 0x57
   1aa9a:	1b5b      	subs	r3, r3, r5
   1aa9c:	e7dd      	b.n	1aa5a <strtol+0x5e>
			any = -1;
   1aa9e:	f04f 36ff 	mov.w	r6, #4294967295
   1aaa2:	e7e6      	b.n	1aa72 <strtol+0x76>
		}
	}

	if (any < 0) {
   1aaa4:	1c73      	adds	r3, r6, #1
   1aaa6:	d109      	bne.n	1aabc <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1aaa8:	f7fb fec6 	bl	16838 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1aaac:	2326      	movs	r3, #38	; 0x26
   1aaae:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1aab0:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1aab2:	f1b8 0f00 	cmp.w	r8, #0
   1aab6:	d107      	bne.n	1aac8 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1aab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1aabc:	b101      	cbz	r1, 1aac0 <strtol+0xc4>
		acc = -acc;
   1aabe:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1aac0:	f1b8 0f00 	cmp.w	r8, #0
   1aac4:	d0f8      	beq.n	1aab8 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1aac6:	b10e      	cbz	r6, 1aacc <strtol+0xd0>
   1aac8:	f104 3cff 	add.w	ip, r4, #4294967295
   1aacc:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1aad0:	e7f2      	b.n	1aab8 <strtol+0xbc>
	if (base == 0) {
   1aad2:	2330      	movs	r3, #48	; 0x30
   1aad4:	2a00      	cmp	r2, #0
   1aad6:	d1b2      	bne.n	1aa3e <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1aad8:	2208      	movs	r2, #8
   1aada:	e7b0      	b.n	1aa3e <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1aadc:	2b30      	cmp	r3, #48	; 0x30
   1aade:	d0a6      	beq.n	1aa2e <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1aae0:	220a      	movs	r2, #10
   1aae2:	e7ac      	b.n	1aa3e <strtol+0x42>

0001aae4 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1aae8:	f891 8000 	ldrb.w	r8, [r1]
{
   1aaec:	4605      	mov	r5, r0
	if (c != 0) {
   1aaee:	f1b8 0f00 	cmp.w	r8, #0
   1aaf2:	d010      	beq.n	1ab16 <strstr+0x32>
	c = *find++;
   1aaf4:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1aaf6:	4620      	mov	r0, r4
   1aaf8:	f000 f830 	bl	1ab5c <strlen>
   1aafc:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1aafe:	462e      	mov	r6, r5
   1ab00:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1ab04:	b163      	cbz	r3, 1ab20 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1ab06:	4598      	cmp	r8, r3
   1ab08:	d108      	bne.n	1ab1c <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1ab0a:	463a      	mov	r2, r7
   1ab0c:	4621      	mov	r1, r4
   1ab0e:	4630      	mov	r0, r6
   1ab10:	f000 f840 	bl	1ab94 <strncmp>
   1ab14:	b910      	cbnz	r0, 1ab1c <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1ab16:	4628      	mov	r0, r5
   1ab18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1ab1c:	4635      	mov	r5, r6
   1ab1e:	e7ee      	b.n	1aafe <strstr+0x1a>
					return NULL;
   1ab20:	461d      	mov	r5, r3
   1ab22:	e7f8      	b.n	1ab16 <strstr+0x32>

0001ab24 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1ab24:	4603      	mov	r3, r0
   1ab26:	3901      	subs	r1, #1
   1ab28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1ab2c:	b90a      	cbnz	r2, 1ab32 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1ab2e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1ab30:	4770      	bx	lr
		*d = *s;
   1ab32:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ab36:	e7f7      	b.n	1ab28 <strcpy+0x4>

0001ab38 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1ab38:	b570      	push	{r4, r5, r6, lr}
   1ab3a:	4605      	mov	r5, r0
   1ab3c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1ab3e:	b142      	cbz	r2, 1ab52 <strncpy+0x1a>
   1ab40:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1ab44:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1ab46:	b92c      	cbnz	r4, 1ab54 <strncpy+0x1c>
   1ab48:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1ab4a:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1ab4e:	429a      	cmp	r2, r3
   1ab50:	d1fb      	bne.n	1ab4a <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1ab52:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1ab54:	4632      	mov	r2, r6
		*d = *s;
   1ab56:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1ab5a:	e7ef      	b.n	1ab3c <strncpy+0x4>

0001ab5c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ab5c:	4603      	mov	r3, r0
	size_t n = 0;
   1ab5e:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ab60:	5c1a      	ldrb	r2, [r3, r0]
   1ab62:	b902      	cbnz	r2, 1ab66 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1ab64:	4770      	bx	lr
		n++;
   1ab66:	3001      	adds	r0, #1
   1ab68:	e7fa      	b.n	1ab60 <strlen+0x4>

0001ab6a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1ab6a:	4603      	mov	r3, r0
	size_t n = 0;
   1ab6c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1ab6e:	5c1a      	ldrb	r2, [r3, r0]
   1ab70:	b10a      	cbz	r2, 1ab76 <strnlen+0xc>
   1ab72:	4288      	cmp	r0, r1
   1ab74:	d100      	bne.n	1ab78 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1ab76:	4770      	bx	lr
		n++;
   1ab78:	3001      	adds	r0, #1
   1ab7a:	e7f8      	b.n	1ab6e <strnlen+0x4>

0001ab7c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ab7c:	1e43      	subs	r3, r0, #1
   1ab7e:	3901      	subs	r1, #1
   1ab80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ab84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1ab88:	4282      	cmp	r2, r0
   1ab8a:	d101      	bne.n	1ab90 <strcmp+0x14>
   1ab8c:	2a00      	cmp	r2, #0
   1ab8e:	d1f7      	bne.n	1ab80 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1ab90:	1a10      	subs	r0, r2, r0
   1ab92:	4770      	bx	lr

0001ab94 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1ab94:	b510      	push	{r4, lr}
   1ab96:	3901      	subs	r1, #1
   1ab98:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1ab9a:	4282      	cmp	r2, r0
   1ab9c:	d009      	beq.n	1abb2 <strncmp+0x1e>
   1ab9e:	7803      	ldrb	r3, [r0, #0]
   1aba0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1aba4:	42a3      	cmp	r3, r4
   1aba6:	d100      	bne.n	1abaa <strncmp+0x16>
   1aba8:	b90b      	cbnz	r3, 1abae <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1abaa:	1b18      	subs	r0, r3, r4
   1abac:	e002      	b.n	1abb4 <strncmp+0x20>
		s1++;
   1abae:	3001      	adds	r0, #1
		n--;
   1abb0:	e7f3      	b.n	1ab9a <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1abb2:	2000      	movs	r0, #0
}
   1abb4:	bd10      	pop	{r4, pc}

0001abb6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1abb6:	4603      	mov	r3, r0
   1abb8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1abba:	b15a      	cbz	r2, 1abd4 <memcmp+0x1e>
   1abbc:	3901      	subs	r1, #1
   1abbe:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1abc0:	f813 0b01 	ldrb.w	r0, [r3], #1
   1abc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1abc8:	42a3      	cmp	r3, r4
   1abca:	d001      	beq.n	1abd0 <memcmp+0x1a>
   1abcc:	4290      	cmp	r0, r2
   1abce:	d0f7      	beq.n	1abc0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1abd0:	1a80      	subs	r0, r0, r2
}
   1abd2:	bd10      	pop	{r4, pc}
		return 0;
   1abd4:	4610      	mov	r0, r2
   1abd6:	e7fc      	b.n	1abd2 <memcmp+0x1c>

0001abd8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1abd8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1abda:	ea81 0400 	eor.w	r4, r1, r0
   1abde:	07a5      	lsls	r5, r4, #30
   1abe0:	4603      	mov	r3, r0
   1abe2:	d00b      	beq.n	1abfc <memcpy+0x24>
   1abe4:	3b01      	subs	r3, #1
   1abe6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1abe8:	4291      	cmp	r1, r2
   1abea:	d11b      	bne.n	1ac24 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1abec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1abee:	2a00      	cmp	r2, #0
   1abf0:	d0fc      	beq.n	1abec <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1abf2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1abf6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1abf8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1abfc:	079c      	lsls	r4, r3, #30
   1abfe:	d1f6      	bne.n	1abee <memcpy+0x16>
   1ac00:	f022 0403 	bic.w	r4, r2, #3
   1ac04:	1f1d      	subs	r5, r3, #4
   1ac06:	0896      	lsrs	r6, r2, #2
   1ac08:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1ac0a:	42b9      	cmp	r1, r7
   1ac0c:	d105      	bne.n	1ac1a <memcpy+0x42>
   1ac0e:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1ac12:	4423      	add	r3, r4
   1ac14:	fb05 2206 	mla	r2, r5, r6, r2
   1ac18:	e7e4      	b.n	1abe4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1ac1a:	f851 cb04 	ldr.w	ip, [r1], #4
   1ac1e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1ac22:	e7f2      	b.n	1ac0a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1ac24:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ac28:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ac2c:	e7dc      	b.n	1abe8 <memcpy+0x10>

0001ac2e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1ac2e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1ac30:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1ac32:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ac34:	07a3      	lsls	r3, r4, #30
   1ac36:	d111      	bne.n	1ac5c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1ac38:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ac3c:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ac40:	f022 0303 	bic.w	r3, r2, #3
   1ac44:	0896      	lsrs	r6, r2, #2
   1ac46:	4423      	add	r3, r4
   1ac48:	429c      	cmp	r4, r3
   1ac4a:	d10d      	bne.n	1ac68 <memset+0x3a>
   1ac4c:	f06f 0403 	mvn.w	r4, #3
   1ac50:	fb04 2206 	mla	r2, r4, r6, r2
   1ac54:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1ac56:	4293      	cmp	r3, r2
   1ac58:	d109      	bne.n	1ac6e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1ac5a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1ac5c:	2a00      	cmp	r2, #0
   1ac5e:	d0fc      	beq.n	1ac5a <memset+0x2c>
		*(d_byte++) = c_byte;
   1ac60:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1ac64:	3a01      	subs	r2, #1
   1ac66:	e7e5      	b.n	1ac34 <memset+0x6>
		*(d_word++) = c_word;
   1ac68:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1ac6c:	e7ec      	b.n	1ac48 <memset+0x1a>
		*(d_byte++) = c_byte;
   1ac6e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ac72:	e7f0      	b.n	1ac56 <memset+0x28>

0001ac74 <_stdout_hook_default>:
}
   1ac74:	f04f 30ff 	mov.w	r0, #4294967295
   1ac78:	4770      	bx	lr

0001ac7a <bt_settings_decode_key>:
{
   1ac7a:	b570      	push	{r4, r5, r6, lr}
   1ac7c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1ac7e:	2100      	movs	r1, #0
{
   1ac80:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1ac82:	f7ff f868 	bl	19d56 <settings_name_next>
   1ac86:	280d      	cmp	r0, #13
   1ac88:	d118      	bne.n	1acbc <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1ac8a:	7b23      	ldrb	r3, [r4, #12]
   1ac8c:	2b30      	cmp	r3, #48	; 0x30
   1ac8e:	d111      	bne.n	1acb4 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1ac90:	2300      	movs	r3, #0
   1ac92:	702b      	strb	r3, [r5, #0]
   1ac94:	f104 060c 	add.w	r6, r4, #12
   1ac98:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1ac9a:	462a      	mov	r2, r5
   1ac9c:	4620      	mov	r0, r4
   1ac9e:	2301      	movs	r3, #1
   1aca0:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1aca2:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1aca4:	f7fe fcd7 	bl	19656 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1aca8:	42b4      	cmp	r4, r6
   1acaa:	f105 35ff 	add.w	r5, r5, #4294967295
   1acae:	d1f4      	bne.n	1ac9a <bt_settings_decode_key+0x20>
	return 0;
   1acb0:	2000      	movs	r0, #0
}
   1acb2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1acb4:	2b31      	cmp	r3, #49	; 0x31
   1acb6:	d101      	bne.n	1acbc <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1acb8:	2301      	movs	r3, #1
   1acba:	e7ea      	b.n	1ac92 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1acbc:	f06f 0015 	mvn.w	r0, #21
   1acc0:	e7f7      	b.n	1acb2 <bt_settings_decode_key+0x38>

0001acc2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1acc2:	b510      	push	{r4, lr}
   1acc4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1acc6:	7801      	ldrb	r1, [r0, #0]
   1acc8:	7822      	ldrb	r2, [r4, #0]
{
   1acca:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1accc:	428a      	cmp	r2, r1
   1acce:	d00f      	beq.n	1acf0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1acd0:	4669      	mov	r1, sp
   1acd2:	f7f2 fdb5 	bl	d840 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1acd6:	4620      	mov	r0, r4
   1acd8:	a905      	add	r1, sp, #20
   1acda:	f7f2 fdb1 	bl	d840 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1acde:	2210      	movs	r2, #16
   1ace0:	f10d 0115 	add.w	r1, sp, #21
   1ace4:	f10d 0001 	add.w	r0, sp, #1
   1ace8:	f7ff ff65 	bl	1abb6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1acec:	b00a      	add	sp, #40	; 0x28
   1acee:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1acf0:	2a01      	cmp	r2, #1
   1acf2:	d006      	beq.n	1ad02 <bt_uuid_cmp+0x40>
   1acf4:	2a02      	cmp	r2, #2
   1acf6:	d007      	beq.n	1ad08 <bt_uuid_cmp+0x46>
   1acf8:	b972      	cbnz	r2, 1ad18 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1acfa:	8840      	ldrh	r0, [r0, #2]
   1acfc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1acfe:	1ac0      	subs	r0, r0, r3
   1ad00:	e7f4      	b.n	1acec <bt_uuid_cmp+0x2a>
   1ad02:	6840      	ldr	r0, [r0, #4]
   1ad04:	6863      	ldr	r3, [r4, #4]
   1ad06:	e7fa      	b.n	1acfe <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ad08:	2210      	movs	r2, #16
   1ad0a:	1c61      	adds	r1, r4, #1
   1ad0c:	3001      	adds	r0, #1
}
   1ad0e:	b00a      	add	sp, #40	; 0x28
   1ad10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ad14:	f7ff bf4f 	b.w	1abb6 <memcmp>
	switch (u1->type) {
   1ad18:	f06f 0015 	mvn.w	r0, #21
   1ad1c:	e7e6      	b.n	1acec <bt_uuid_cmp+0x2a>

0001ad1e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1ad1e:	2a04      	cmp	r2, #4
{
   1ad20:	b510      	push	{r4, lr}
	switch (data_len) {
   1ad22:	d00a      	beq.n	1ad3a <bt_uuid_create+0x1c>
   1ad24:	2a10      	cmp	r2, #16
   1ad26:	d00d      	beq.n	1ad44 <bt_uuid_create+0x26>
   1ad28:	2a02      	cmp	r2, #2
   1ad2a:	f04f 0300 	mov.w	r3, #0
   1ad2e:	d10f      	bne.n	1ad50 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1ad30:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1ad32:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1ad34:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1ad36:	2001      	movs	r0, #1
}
   1ad38:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1ad3a:	2301      	movs	r3, #1
   1ad3c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1ad3e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1ad40:	6042      	str	r2, [r0, #4]
		break;
   1ad42:	e7f8      	b.n	1ad36 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1ad44:	2302      	movs	r3, #2
   1ad46:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1ad4a:	f7ff ff45 	bl	1abd8 <memcpy>
		break;
   1ad4e:	e7f2      	b.n	1ad36 <bt_uuid_create+0x18>
	switch (data_len) {
   1ad50:	4618      	mov	r0, r3
   1ad52:	e7f1      	b.n	1ad38 <bt_uuid_create+0x1a>

0001ad54 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1ad54:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1ad56:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ad58:	2106      	movs	r1, #6
{
   1ad5a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ad5c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1ad60:	f7f5 f962 	bl	10028 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1ad64:	b918      	cbnz	r0, 1ad6e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1ad66:	79a3      	ldrb	r3, [r4, #6]
   1ad68:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ad6c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1ad6e:	bd10      	pop	{r4, pc}

0001ad70 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1ad70:	280f      	cmp	r0, #15
   1ad72:	d806      	bhi.n	1ad82 <bt_hci_evt_get_flags+0x12>
   1ad74:	280d      	cmp	r0, #13
   1ad76:	d80b      	bhi.n	1ad90 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1ad78:	2805      	cmp	r0, #5
   1ad7a:	bf14      	ite	ne
   1ad7c:	2002      	movne	r0, #2
   1ad7e:	2003      	moveq	r0, #3
   1ad80:	4770      	bx	lr
	switch (evt) {
   1ad82:	2813      	cmp	r0, #19
   1ad84:	d004      	beq.n	1ad90 <bt_hci_evt_get_flags+0x20>
   1ad86:	281a      	cmp	r0, #26
   1ad88:	bf14      	ite	ne
   1ad8a:	2002      	movne	r0, #2
   1ad8c:	2001      	moveq	r0, #1
   1ad8e:	4770      	bx	lr
   1ad90:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1ad92:	4770      	bx	lr

0001ad94 <get_adv_channel_map>:
{
   1ad94:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1ad96:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1ad9a:	bf0c      	ite	eq
   1ad9c:	2007      	moveq	r0, #7
   1ad9e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1ada0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1ada2:	bf48      	it	mi
   1ada4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1ada8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1adaa:	bf48      	it	mi
   1adac:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1adb0:	4770      	bx	lr

0001adb2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1adb2:	e8d0 0faf 	lda	r0, [r0]
}
   1adb6:	4770      	bx	lr

0001adb8 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1adb8:	2207      	movs	r2, #7
   1adba:	f7ff bf0d 	b.w	1abd8 <memcpy>

0001adbe <atomic_or>:
{
   1adbe:	4603      	mov	r3, r0
}
   1adc0:	e8d3 0fef 	ldaex	r0, [r3]
   1adc4:	ea40 0201 	orr.w	r2, r0, r1
   1adc8:	e8c3 2fec 	stlex	ip, r2, [r3]
   1adcc:	f1bc 0f00 	cmp.w	ip, #0
   1add0:	d1f6      	bne.n	1adc0 <atomic_or+0x2>
   1add2:	4770      	bx	lr

0001add4 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1add4:	2207      	movs	r2, #7
   1add6:	f7ff beee 	b.w	1abb6 <memcmp>

0001adda <atomic_and>:
{
   1adda:	4603      	mov	r3, r0
}
   1addc:	e8d3 0fef 	ldaex	r0, [r3]
   1ade0:	ea00 0201 	and.w	r2, r0, r1
   1ade4:	e8c3 2fec 	stlex	ip, r2, [r3]
   1ade8:	f1bc 0f00 	cmp.w	ip, #0
   1adec:	d1f6      	bne.n	1addc <atomic_and+0x2>
   1adee:	4770      	bx	lr

0001adf0 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1adf0:	460b      	mov	r3, r1
   1adf2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1adf4:	f001 041f 	and.w	r4, r1, #31
   1adf8:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1adfa:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1adfc:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1adfe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1ae02:	b112      	cbz	r2, 1ae0a <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1ae04:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ae06:	f7ff bfda 	b.w	1adbe <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ae0a:	43c9      	mvns	r1, r1
}
   1ae0c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ae0e:	f7ff bfe4 	b.w	1adda <atomic_and>

0001ae12 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1ae12:	f100 0210 	add.w	r2, r0, #16
{
   1ae16:	b508      	push	{r3, lr}
   1ae18:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ae1a:	4610      	mov	r0, r2
   1ae1c:	f7ff ffc9 	bl	1adb2 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1ae20:	0640      	lsls	r0, r0, #25
   1ae22:	d50a      	bpl.n	1ae3a <adv_id_check_connectable_func+0x28>
   1ae24:	4610      	mov	r0, r2
   1ae26:	f7ff ffc4 	bl	1adb2 <atomic_get>
   1ae2a:	05c2      	lsls	r2, r0, #23
   1ae2c:	d505      	bpl.n	1ae3a <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1ae2e:	781a      	ldrb	r2, [r3, #0]
   1ae30:	780b      	ldrb	r3, [r1, #0]
   1ae32:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1ae34:	bf1c      	itt	ne
   1ae36:	2301      	movne	r3, #1
   1ae38:	704b      	strbne	r3, [r1, #1]
}
   1ae3a:	bd08      	pop	{r3, pc}

0001ae3c <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1ae3c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1ae3e:	2106      	movs	r1, #6
   1ae40:	4668      	mov	r0, sp
   1ae42:	f7f5 f8f1 	bl	10028 <bt_rand>
	if (err) {
   1ae46:	b940      	cbnz	r0, 1ae5a <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1ae48:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1ae4c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1ae4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ae52:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1ae56:	f7f3 f9fb 	bl	e250 <set_random_address>
}
   1ae5a:	b003      	add	sp, #12
   1ae5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ae60 <bt_lookup_id_addr>:
}
   1ae60:	4608      	mov	r0, r1
   1ae62:	4770      	bx	lr

0001ae64 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1ae64:	f7f3 bc4c 	b.w	e700 <bt_le_create_conn_legacy>

0001ae68 <bt_hci_disconnect>:
{
   1ae68:	b570      	push	{r4, r5, r6, lr}
   1ae6a:	4606      	mov	r6, r0
   1ae6c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1ae6e:	f240 4006 	movw	r0, #1030	; 0x406
   1ae72:	2103      	movs	r1, #3
   1ae74:	f7f3 f920 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
   1ae78:	4604      	mov	r4, r0
   1ae7a:	b168      	cbz	r0, 1ae98 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1ae7c:	2103      	movs	r1, #3
   1ae7e:	3008      	adds	r0, #8
   1ae80:	f7f9 fd02 	bl	14888 <net_buf_simple_add>
	disconn->reason = reason;
   1ae84:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1ae86:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ae88:	4621      	mov	r1, r4
}
   1ae8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ae8e:	2200      	movs	r2, #0
   1ae90:	f240 4006 	movw	r0, #1030	; 0x406
   1ae94:	f7f3 b95a 	b.w	e14c <bt_hci_cmd_send_sync>
}
   1ae98:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ae9c:	bd70      	pop	{r4, r5, r6, pc}

0001ae9e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1ae9e:	8803      	ldrh	r3, [r0, #0]
   1aea0:	8842      	ldrh	r2, [r0, #2]
{
   1aea2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1aea4:	4293      	cmp	r3, r2
   1aea6:	d819      	bhi.n	1aedc <bt_le_conn_params_valid+0x3e>
   1aea8:	2b05      	cmp	r3, #5
   1aeaa:	d917      	bls.n	1aedc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1aeac:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1aeb0:	d814      	bhi.n	1aedc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1aeb2:	8883      	ldrh	r3, [r0, #4]
   1aeb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1aeb8:	d210      	bcs.n	1aedc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1aeba:	f640 4476 	movw	r4, #3190	; 0xc76
   1aebe:	88c0      	ldrh	r0, [r0, #6]
   1aec0:	f1a0 010a 	sub.w	r1, r0, #10
   1aec4:	b289      	uxth	r1, r1
   1aec6:	42a1      	cmp	r1, r4
   1aec8:	d808      	bhi.n	1aedc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1aeca:	3301      	adds	r3, #1
   1aecc:	b29b      	uxth	r3, r3
   1aece:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1aed0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1aed4:	bf34      	ite	cc
   1aed6:	2001      	movcc	r0, #1
   1aed8:	2000      	movcs	r0, #0
}
   1aeda:	bd10      	pop	{r4, pc}
		return false;
   1aedc:	2000      	movs	r0, #0
   1aede:	e7fc      	b.n	1aeda <bt_le_conn_params_valid+0x3c>

0001aee0 <bt_le_set_data_len>:
{
   1aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aee2:	4607      	mov	r7, r0
   1aee4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1aee6:	f242 0022 	movw	r0, #8226	; 0x2022
   1aeea:	2106      	movs	r1, #6
{
   1aeec:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1aeee:	f7f3 f8e3 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
   1aef2:	4604      	mov	r4, r0
   1aef4:	b170      	cbz	r0, 1af14 <bt_le_set_data_len+0x34>
   1aef6:	2106      	movs	r1, #6
   1aef8:	3008      	adds	r0, #8
   1aefa:	f7f9 fcc5 	bl	14888 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1aefe:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1af00:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1af02:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1af04:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1af06:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1af08:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1af0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1af10:	f7f3 be18 	b.w	eb44 <bt_hci_cmd_send>
}
   1af14:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1af18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001af1a <bt_le_set_phy>:
{
   1af1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af1e:	4680      	mov	r8, r0
   1af20:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1af22:	f242 0032 	movw	r0, #8242	; 0x2032
   1af26:	2107      	movs	r1, #7
{
   1af28:	4616      	mov	r6, r2
   1af2a:	461d      	mov	r5, r3
   1af2c:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1af30:	f7f3 f8c2 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
   1af34:	4604      	mov	r4, r0
   1af36:	b190      	cbz	r0, 1af5e <bt_le_set_phy+0x44>
   1af38:	2107      	movs	r1, #7
   1af3a:	3008      	adds	r0, #8
   1af3c:	f7f9 fca4 	bl	14888 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1af40:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1af44:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1af46:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1af48:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1af4a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1af4c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1af50:	4621      	mov	r1, r4
}
   1af52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1af56:	f242 0032 	movw	r0, #8242	; 0x2032
   1af5a:	f7f3 bdf3 	b.w	eb44 <bt_hci_cmd_send>
}
   1af5e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1af62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001af66 <bt_addr_le_is_bonded>:
}
   1af66:	2000      	movs	r0, #0
   1af68:	4770      	bx	lr

0001af6a <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1af6a:	6880      	ldr	r0, [r0, #8]
   1af6c:	f7f4 be66 	b.w	fc3c <enh_conn_complete>

0001af70 <le_legacy_conn_complete>:
{
   1af70:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1af72:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1af74:	6881      	ldr	r1, [r0, #8]
{
   1af76:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1af78:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1af7a:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1af7c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1af80:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1af84:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1af86:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1af8a:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1af8e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1af92:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1af96:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1af9a:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1af9e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1afa2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1afa6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1afaa:	7b4b      	ldrb	r3, [r1, #13]
   1afac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1afb0:	f7ff ff02 	bl	1adb8 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1afb4:	4669      	mov	r1, sp
   1afb6:	2206      	movs	r2, #6
   1afb8:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1afbc:	9400      	str	r4, [sp, #0]
   1afbe:	f8ad 4004 	strh.w	r4, [sp, #4]
   1afc2:	f7ff fe09 	bl	1abd8 <memcpy>
   1afc6:	2206      	movs	r2, #6
   1afc8:	4669      	mov	r1, sp
   1afca:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1afce:	9400      	str	r4, [sp, #0]
   1afd0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1afd4:	f7ff fe00 	bl	1abd8 <memcpy>
	enh_conn_complete(&enh);
   1afd8:	a802      	add	r0, sp, #8
   1afda:	f7f4 fe2f 	bl	fc3c <enh_conn_complete>
}
   1afde:	b00a      	add	sp, #40	; 0x28
   1afe0:	bd10      	pop	{r4, pc}

0001afe2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1afe2:	e8d0 0faf 	lda	r0, [r0]
}
   1afe6:	4770      	bx	lr

0001afe8 <tx_notify>:
{
   1afe8:	b570      	push	{r4, r5, r6, lr}
   1afea:	4604      	mov	r4, r0
	__asm__ volatile(
   1afec:	f04f 0220 	mov.w	r2, #32
   1aff0:	f3ef 8311 	mrs	r3, BASEPRI
   1aff4:	f382 8811 	msr	BASEPRI, r2
   1aff8:	f3bf 8f6f 	isb	sy
	return list->head;
   1affc:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1affe:	b920      	cbnz	r0, 1b00a <tx_notify+0x22>
	__asm__ volatile(
   1b000:	f383 8811 	msr	BASEPRI, r3
   1b004:	f3bf 8f6f 	isb	sy
}
   1b008:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b00a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1b00c:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b00e:	4288      	cmp	r0, r1
	list->tail = node;
   1b010:	bf08      	it	eq
   1b012:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1b014:	6222      	str	r2, [r4, #32]
   1b016:	f383 8811 	msr	BASEPRI, r3
   1b01a:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1b01e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1b022:	f7f5 f819 	bl	10058 <tx_free>
		cb(conn, user_data);
   1b026:	4631      	mov	r1, r6
   1b028:	4620      	mov	r0, r4
   1b02a:	47a8      	blx	r5
	while (1) {
   1b02c:	e7de      	b.n	1afec <tx_notify+0x4>

0001b02e <tx_complete_work>:
	tx_notify(conn);
   1b02e:	3828      	subs	r0, #40	; 0x28
   1b030:	f7ff bfda 	b.w	1afe8 <tx_notify>

0001b034 <bt_conn_new>:
{
   1b034:	b538      	push	{r3, r4, r5, lr}
   1b036:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1b038:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b03a:	2501      	movs	r5, #1
   1b03c:	428b      	cmp	r3, r1
   1b03e:	d102      	bne.n	1b046 <bt_conn_new+0x12>
		return NULL;
   1b040:	2400      	movs	r4, #0
}
   1b042:	4620      	mov	r0, r4
   1b044:	bd38      	pop	{r3, r4, r5, pc}
   1b046:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1b04a:	e8d2 0fef 	ldaex	r0, [r2]
   1b04e:	2800      	cmp	r0, #0
   1b050:	d104      	bne.n	1b05c <bt_conn_new+0x28>
   1b052:	e8c2 5fec 	stlex	ip, r5, [r2]
   1b056:	f1bc 0f00 	cmp.w	ip, #0
   1b05a:	d1f6      	bne.n	1b04a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1b05c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1b060:	d002      	beq.n	1b068 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1b062:	4604      	mov	r4, r0
   1b064:	3301      	adds	r3, #1
   1b066:	e7e9      	b.n	1b03c <bt_conn_new+0x8>
	if (!conn) {
   1b068:	2c00      	cmp	r4, #0
   1b06a:	d0ea      	beq.n	1b042 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1b06c:	22b8      	movs	r2, #184	; 0xb8
   1b06e:	2100      	movs	r1, #0
   1b070:	4620      	mov	r0, r4
   1b072:	f7ff fddc 	bl	1ac2e <memset>
	return conn;
   1b076:	e7e4      	b.n	1b042 <bt_conn_new+0xe>

0001b078 <bt_conn_get_security>:
}
   1b078:	2001      	movs	r0, #1
   1b07a:	4770      	bx	lr

0001b07c <bt_conn_reset_rx_state>:
{
   1b07c:	b510      	push	{r4, lr}
   1b07e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1b080:	6900      	ldr	r0, [r0, #16]
   1b082:	b118      	cbz	r0, 1b08c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1b084:	f7f9 faea 	bl	1465c <net_buf_unref>
	conn->rx = NULL;
   1b088:	2300      	movs	r3, #0
   1b08a:	6123      	str	r3, [r4, #16]
}
   1b08c:	bd10      	pop	{r4, pc}

0001b08e <bt_conn_is_peer_addr_le>:
{
   1b08e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1b090:	7a03      	ldrb	r3, [r0, #8]
{
   1b092:	4604      	mov	r4, r0
	if (id != conn->id) {
   1b094:	428b      	cmp	r3, r1
{
   1b096:	4615      	mov	r5, r2
	if (id != conn->id) {
   1b098:	d115      	bne.n	1b0c6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1b09a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b09e:	2207      	movs	r2, #7
   1b0a0:	4628      	mov	r0, r5
   1b0a2:	f7ff fd88 	bl	1abb6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b0a6:	b180      	cbz	r0, 1b0ca <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1b0a8:	78e3      	ldrb	r3, [r4, #3]
   1b0aa:	2207      	movs	r2, #7
   1b0ac:	b943      	cbnz	r3, 1b0c0 <bt_conn_is_peer_addr_le+0x32>
   1b0ae:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1b0b2:	4628      	mov	r0, r5
   1b0b4:	f7ff fd7f 	bl	1abb6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1b0b8:	fab0 f080 	clz	r0, r0
   1b0bc:	0940      	lsrs	r0, r0, #5
}
   1b0be:	bd38      	pop	{r3, r4, r5, pc}
   1b0c0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1b0c4:	e7f5      	b.n	1b0b2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1b0c6:	2000      	movs	r0, #0
   1b0c8:	e7f9      	b.n	1b0be <bt_conn_is_peer_addr_le+0x30>
		return true;
   1b0ca:	2001      	movs	r0, #1
   1b0cc:	e7f7      	b.n	1b0be <bt_conn_is_peer_addr_le+0x30>

0001b0ce <bt_conn_ref>:
{
   1b0ce:	4603      	mov	r3, r0
   1b0d0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1b0d2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1b0d6:	4610      	mov	r0, r2
   1b0d8:	f7ff ff83 	bl	1afe2 <atomic_get>
		if (!old) {
   1b0dc:	b160      	cbz	r0, 1b0f8 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b0de:	1c41      	adds	r1, r0, #1
   1b0e0:	e8d2 4fef 	ldaex	r4, [r2]
   1b0e4:	4284      	cmp	r4, r0
   1b0e6:	d104      	bne.n	1b0f2 <bt_conn_ref+0x24>
   1b0e8:	e8c2 1fec 	stlex	ip, r1, [r2]
   1b0ec:	f1bc 0f00 	cmp.w	ip, #0
   1b0f0:	d1f6      	bne.n	1b0e0 <bt_conn_ref+0x12>
   1b0f2:	d1f0      	bne.n	1b0d6 <bt_conn_ref+0x8>
}
   1b0f4:	4618      	mov	r0, r3
   1b0f6:	bd10      	pop	{r4, pc}
			return NULL;
   1b0f8:	4603      	mov	r3, r0
   1b0fa:	e7fb      	b.n	1b0f4 <bt_conn_ref+0x26>

0001b0fc <conn_lookup_handle>:
{
   1b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b100:	4607      	mov	r7, r0
   1b102:	460e      	mov	r6, r1
   1b104:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1b106:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b108:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1b10c:	42b4      	cmp	r4, r6
   1b10e:	d103      	bne.n	1b118 <conn_lookup_handle+0x1c>
	return NULL;
   1b110:	2300      	movs	r3, #0
}
   1b112:	4618      	mov	r0, r3
   1b114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b118:	fb09 7004 	mla	r0, r9, r4, r7
   1b11c:	f7ff ffd7 	bl	1b0ce <bt_conn_ref>
   1b120:	4603      	mov	r3, r0
		if (!conn) {
   1b122:	b158      	cbz	r0, 1b13c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1b124:	7a85      	ldrb	r5, [r0, #10]
   1b126:	2d01      	cmp	r5, #1
   1b128:	d002      	beq.n	1b130 <conn_lookup_handle+0x34>
   1b12a:	3d07      	subs	r5, #7
   1b12c:	2d01      	cmp	r5, #1
   1b12e:	d803      	bhi.n	1b138 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1b130:	881a      	ldrh	r2, [r3, #0]
   1b132:	4542      	cmp	r2, r8
   1b134:	d0ed      	beq.n	1b112 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1b136:	4618      	mov	r0, r3
   1b138:	f7f5 fa12 	bl	10560 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1b13c:	3401      	adds	r4, #1
   1b13e:	e7e5      	b.n	1b10c <conn_lookup_handle+0x10>

0001b140 <bt_conn_get_dst>:
}
   1b140:	3088      	adds	r0, #136	; 0x88
   1b142:	4770      	bx	lr

0001b144 <bt_conn_le_conn_update>:
{
   1b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b146:	4607      	mov	r7, r0
   1b148:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b14a:	f242 0013 	movw	r0, #8211	; 0x2013
   1b14e:	210e      	movs	r1, #14
   1b150:	f7f2 ffb2 	bl	e0b8 <bt_hci_cmd_create>
	if (!buf) {
   1b154:	4606      	mov	r6, r0
   1b156:	b1d0      	cbz	r0, 1b18e <bt_conn_le_conn_update+0x4a>
   1b158:	210e      	movs	r1, #14
   1b15a:	3008      	adds	r0, #8
   1b15c:	f7f9 fb94 	bl	14888 <net_buf_simple_add>
   1b160:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b162:	220e      	movs	r2, #14
   1b164:	2100      	movs	r1, #0
   1b166:	f7ff fd62 	bl	1ac2e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b16a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b16c:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b16e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b170:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b172:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b174:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b176:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b178:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b17c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b17e:	88ab      	ldrh	r3, [r5, #4]
   1b180:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b182:	88eb      	ldrh	r3, [r5, #6]
   1b184:	8123      	strh	r3, [r4, #8]
}
   1b186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b18a:	f7f2 bfdf 	b.w	e14c <bt_hci_cmd_send_sync>
}
   1b18e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b194 <l2cap_connected>:
}
   1b194:	4770      	bx	lr

0001b196 <l2cap_disconnected>:
   1b196:	4770      	bx	lr

0001b198 <bt_l2cap_chan_remove>:
	return list->head;
   1b198:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b19a:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b19c:	b17b      	cbz	r3, 1b1be <bt_l2cap_chan_remove+0x26>
   1b19e:	2200      	movs	r2, #0
   1b1a0:	3b08      	subs	r3, #8
   1b1a2:	b163      	cbz	r3, 1b1be <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1b1a4:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b1a6:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1b1aa:	d10e      	bne.n	1b1ca <bt_l2cap_chan_remove+0x32>
	return node->next;
   1b1ac:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1b1ae:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1b1b0:	b932      	cbnz	r2, 1b1c0 <bt_l2cap_chan_remove+0x28>
   1b1b2:	42ac      	cmp	r4, r5
	list->head = node;
   1b1b4:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1b1b6:	d100      	bne.n	1b1ba <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1b1b8:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1b1ba:	2200      	movs	r2, #0
   1b1bc:	609a      	str	r2, [r3, #8]
}
   1b1be:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b1c0:	42ac      	cmp	r4, r5
	parent->next = child;
   1b1c2:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1b1c4:	bf08      	it	eq
   1b1c6:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1b1c8:	e7f7      	b.n	1b1ba <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b1ca:	2c00      	cmp	r4, #0
   1b1cc:	d0f7      	beq.n	1b1be <bt_l2cap_chan_remove+0x26>
	return node->next;
   1b1ce:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b1d0:	2b00      	cmp	r3, #0
   1b1d2:	d0f4      	beq.n	1b1be <bt_l2cap_chan_remove+0x26>
   1b1d4:	4622      	mov	r2, r4
   1b1d6:	3b08      	subs	r3, #8
   1b1d8:	e7e3      	b.n	1b1a2 <bt_l2cap_chan_remove+0xa>

0001b1da <bt_l2cap_chan_del>:
{
   1b1da:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1b1dc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1b1e0:	4604      	mov	r4, r0
	if (!chan->conn) {
   1b1e2:	b123      	cbz	r3, 1b1ee <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1b1e4:	686b      	ldr	r3, [r5, #4]
   1b1e6:	b103      	cbz	r3, 1b1ea <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1b1e8:	4798      	blx	r3
	chan->conn = NULL;
   1b1ea:	2300      	movs	r3, #0
   1b1ec:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1b1ee:	68e3      	ldr	r3, [r4, #12]
   1b1f0:	b10b      	cbz	r3, 1b1f6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1b1f2:	4620      	mov	r0, r4
   1b1f4:	4798      	blx	r3
	if (ops->released) {
   1b1f6:	69eb      	ldr	r3, [r5, #28]
   1b1f8:	b11b      	cbz	r3, 1b202 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1b1fa:	4620      	mov	r0, r4
}
   1b1fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1b200:	4718      	bx	r3
}
   1b202:	bd70      	pop	{r4, r5, r6, pc}

0001b204 <bt_l2cap_disconnected>:
	return list->head;
   1b204:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b206:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b208:	b18b      	cbz	r3, 1b22e <bt_l2cap_disconnected+0x2a>
   1b20a:	f1b3 0008 	subs.w	r0, r3, #8
   1b20e:	d00e      	beq.n	1b22e <bt_l2cap_disconnected+0x2a>
	return node->next;
   1b210:	681c      	ldr	r4, [r3, #0]
   1b212:	b104      	cbz	r4, 1b216 <bt_l2cap_disconnected+0x12>
   1b214:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1b216:	f7ff ffe0 	bl	1b1da <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b21a:	b144      	cbz	r4, 1b22e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b21c:	f114 0308 	adds.w	r3, r4, #8
   1b220:	d002      	beq.n	1b228 <bt_l2cap_disconnected+0x24>
	return node->next;
   1b222:	68a3      	ldr	r3, [r4, #8]
   1b224:	b103      	cbz	r3, 1b228 <bt_l2cap_disconnected+0x24>
   1b226:	3b08      	subs	r3, #8
{
   1b228:	4620      	mov	r0, r4
   1b22a:	461c      	mov	r4, r3
   1b22c:	e7f3      	b.n	1b216 <bt_l2cap_disconnected+0x12>
}
   1b22e:	bd10      	pop	{r4, pc}

0001b230 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1b230:	3104      	adds	r1, #4
   1b232:	f7f5 bd21 	b.w	10c78 <bt_conn_create_pdu_timeout>

0001b236 <bt_l2cap_send_cb>:
{
   1b236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b23a:	4614      	mov	r4, r2
   1b23c:	4605      	mov	r5, r0
   1b23e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1b240:	f102 0008 	add.w	r0, r2, #8
   1b244:	2104      	movs	r1, #4
   1b246:	461e      	mov	r6, r3
   1b248:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1b24c:	f7f9 fac4 	bl	147d8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b250:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b252:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b254:	3a04      	subs	r2, #4
   1b256:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1b258:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b25a:	4632      	mov	r2, r6
   1b25c:	4621      	mov	r1, r4
   1b25e:	4628      	mov	r0, r5
}
   1b260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b264:	f7f5 b8ba 	b.w	103dc <bt_conn_send_cb>

0001b268 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1b268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b26a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1b26c:	2202      	movs	r2, #2
   1b26e:	2001      	movs	r0, #1
   1b270:	f7f5 fe54 	bl	10f1c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1b274:	4604      	mov	r4, r0
   1b276:	b160      	cbz	r0, 1b292 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1b278:	2102      	movs	r1, #2
   1b27a:	3008      	adds	r0, #8
   1b27c:	f7f9 fb04 	bl	14888 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1b280:	2300      	movs	r3, #0
   1b282:	4622      	mov	r2, r4
   1b284:	7003      	strb	r3, [r0, #0]
   1b286:	7043      	strb	r3, [r0, #1]
   1b288:	2105      	movs	r1, #5
   1b28a:	4628      	mov	r0, r5
   1b28c:	9300      	str	r3, [sp, #0]
   1b28e:	f7ff ffd2 	bl	1b236 <bt_l2cap_send_cb>
}
   1b292:	b003      	add	sp, #12
   1b294:	bd30      	pop	{r4, r5, pc}

0001b296 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1b296:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b298:	b160      	cbz	r0, 1b2b4 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1b29a:	3808      	subs	r0, #8
   1b29c:	b900      	cbnz	r0, 1b2a0 <bt_l2cap_le_lookup_tx_cid+0xa>
   1b29e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1b2a0:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1b2a4:	428b      	cmp	r3, r1
   1b2a6:	d005      	beq.n	1b2b4 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2a8:	f110 0308 	adds.w	r3, r0, #8
   1b2ac:	d001      	beq.n	1b2b2 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1b2ae:	6880      	ldr	r0, [r0, #8]
   1b2b0:	e7f2      	b.n	1b298 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1b2b2:	4618      	mov	r0, r3
}
   1b2b4:	4770      	bx	lr

0001b2b6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1b2b6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b2b8:	b160      	cbz	r0, 1b2d4 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1b2ba:	3808      	subs	r0, #8
   1b2bc:	b900      	cbnz	r0, 1b2c0 <bt_l2cap_le_lookup_rx_cid+0xa>
   1b2be:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b2c0:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1b2c4:	428b      	cmp	r3, r1
   1b2c6:	d005      	beq.n	1b2d4 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2c8:	f110 0308 	adds.w	r3, r0, #8
   1b2cc:	d001      	beq.n	1b2d2 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1b2ce:	6880      	ldr	r0, [r0, #8]
   1b2d0:	e7f2      	b.n	1b2b8 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1b2d2:	4618      	mov	r0, r3
}
   1b2d4:	4770      	bx	lr

0001b2d6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1b2d6:	4770      	bx	lr

0001b2d8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1b2d8:	4603      	mov	r3, r0
	return list->head;
   1b2da:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1b2dc:	b128      	cbz	r0, 1b2ea <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2de:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1b2e0:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2e2:	4288      	cmp	r0, r1
	list->head = node;
   1b2e4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b2e6:	bf08      	it	eq
   1b2e8:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1b2ea:	4770      	bx	lr

0001b2ec <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1b2ec:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b2ee:	2000      	movs	r0, #0

	while (buf) {
   1b2f0:	b903      	cbnz	r3, 1b2f4 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1b2f2:	4770      	bx	lr
		bytes += buf->len;
   1b2f4:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b2f6:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b2f8:	4410      	add	r0, r2
		buf = buf->frags;
   1b2fa:	e7f9      	b.n	1b2f0 <net_buf_frags_len+0x4>

0001b2fc <att_sent>:
	if (chan->ops->sent) {
   1b2fc:	684b      	ldr	r3, [r1, #4]
{
   1b2fe:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1b300:	695b      	ldr	r3, [r3, #20]
   1b302:	b103      	cbz	r3, 1b306 <att_sent+0xa>
		chan->ops->sent(chan);
   1b304:	4718      	bx	r3
}
   1b306:	4770      	bx	lr

0001b308 <attr_read_type_cb>:
{
   1b308:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1b30a:	68d4      	ldr	r4, [r2, #12]
   1b30c:	3102      	adds	r1, #2
   1b30e:	7823      	ldrb	r3, [r4, #0]
   1b310:	b913      	cbnz	r3, 1b318 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1b312:	7021      	strb	r1, [r4, #0]
	return true;
   1b314:	2001      	movs	r0, #1
   1b316:	e006      	b.n	1b326 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1b318:	428b      	cmp	r3, r1
   1b31a:	d0fb      	beq.n	1b314 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1b31c:	8983      	ldrh	r3, [r0, #12]
   1b31e:	3b02      	subs	r3, #2
   1b320:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1b322:	2000      	movs	r0, #0
   1b324:	6110      	str	r0, [r2, #16]
}
   1b326:	bd10      	pop	{r4, pc}

0001b328 <att_prepare_write_req>:
}
   1b328:	2006      	movs	r0, #6
   1b32a:	4770      	bx	lr

0001b32c <att_op_get_type>:
	switch (op) {
   1b32c:	281e      	cmp	r0, #30
   1b32e:	d816      	bhi.n	1b35e <att_op_get_type+0x32>
   1b330:	b308      	cbz	r0, 1b376 <att_op_get_type+0x4a>
   1b332:	1e43      	subs	r3, r0, #1
   1b334:	2b1d      	cmp	r3, #29
   1b336:	d81e      	bhi.n	1b376 <att_op_get_type+0x4a>
   1b338:	e8df f003 	tbb	[pc, r3]
   1b33c:	23172317 	.word	0x23172317
   1b340:	23172317 	.word	0x23172317
   1b344:	23172317 	.word	0x23172317
   1b348:	23172317 	.word	0x23172317
   1b34c:	1d172317 	.word	0x1d172317
   1b350:	2317231d 	.word	0x2317231d
   1b354:	1d191d17 	.word	0x1d191d17
   1b358:	0f1b      	.short	0x0f1b
   1b35a:	2004      	movs	r0, #4
   1b35c:	4770      	bx	lr
   1b35e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1b362:	2b52      	cmp	r3, #82	; 0x52
   1b364:	d107      	bne.n	1b376 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1b366:	2000      	movs	r0, #0
}
   1b368:	4770      	bx	lr
		return ATT_RESPONSE;
   1b36a:	2002      	movs	r0, #2
   1b36c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1b36e:	2003      	movs	r0, #3
   1b370:	4770      	bx	lr
		return ATT_INDICATION;
   1b372:	2005      	movs	r0, #5
   1b374:	4770      	bx	lr
		return ATT_COMMAND;
   1b376:	f010 0f40 	tst.w	r0, #64	; 0x40
   1b37a:	bf0c      	ite	eq
   1b37c:	2006      	moveq	r0, #6
   1b37e:	2000      	movne	r0, #0
   1b380:	4770      	bx	lr
		return ATT_REQUEST;
   1b382:	2001      	movs	r0, #1
   1b384:	4770      	bx	lr

0001b386 <att_notify_mult>:
{
   1b386:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1b388:	6803      	ldr	r3, [r0, #0]
   1b38a:	898a      	ldrh	r2, [r1, #12]
   1b38c:	6818      	ldr	r0, [r3, #0]
   1b38e:	6889      	ldr	r1, [r1, #8]
   1b390:	f7f8 fe0c 	bl	13fac <bt_gatt_mult_notification>
}
   1b394:	2000      	movs	r0, #0
   1b396:	bd08      	pop	{r3, pc}

0001b398 <att_notify>:
{
   1b398:	b538      	push	{r3, r4, r5, lr}
   1b39a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b39c:	f101 0008 	add.w	r0, r1, #8
   1b3a0:	460c      	mov	r4, r1
   1b3a2:	f000 ff07 	bl	1c1b4 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b3a6:	682d      	ldr	r5, [r5, #0]
   1b3a8:	4601      	mov	r1, r0
   1b3aa:	89a3      	ldrh	r3, [r4, #12]
   1b3ac:	6828      	ldr	r0, [r5, #0]
   1b3ae:	68a2      	ldr	r2, [r4, #8]
   1b3b0:	f000 fe68 	bl	1c084 <bt_gatt_notification>
}
   1b3b4:	2000      	movs	r0, #0
   1b3b6:	bd38      	pop	{r3, r4, r5, pc}

0001b3b8 <bt_gatt_foreach_attr>:
{
   1b3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b3ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b3be:	2300      	movs	r3, #0
   1b3c0:	461a      	mov	r2, r3
   1b3c2:	9300      	str	r3, [sp, #0]
   1b3c4:	f7f7 fd5a 	bl	12e7c <bt_gatt_foreach_attr_type>
}
   1b3c8:	b005      	add	sp, #20
   1b3ca:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3ce <find_info_cb>:
{
   1b3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1b3d0:	6893      	ldr	r3, [r2, #8]
{
   1b3d2:	4605      	mov	r5, r0
   1b3d4:	460e      	mov	r6, r1
   1b3d6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b3d8:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1b3da:	b963      	cbnz	r3, 1b3f6 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1b3dc:	6850      	ldr	r0, [r2, #4]
   1b3de:	2101      	movs	r1, #1
   1b3e0:	3008      	adds	r0, #8
   1b3e2:	f7f9 fa51 	bl	14888 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b3e6:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b3e8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b3ea:	781b      	ldrb	r3, [r3, #0]
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	bf0c      	ite	eq
   1b3f0:	2301      	moveq	r3, #1
   1b3f2:	2302      	movne	r3, #2
   1b3f4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b3f6:	68a3      	ldr	r3, [r4, #8]
   1b3f8:	781b      	ldrb	r3, [r3, #0]
   1b3fa:	2b01      	cmp	r3, #1
   1b3fc:	d003      	beq.n	1b406 <find_info_cb+0x38>
   1b3fe:	2b02      	cmp	r3, #2
   1b400:	d019      	beq.n	1b436 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1b402:	2000      	movs	r0, #0
   1b404:	e016      	b.n	1b434 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b406:	682b      	ldr	r3, [r5, #0]
   1b408:	781b      	ldrb	r3, [r3, #0]
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	d1f9      	bne.n	1b402 <find_info_cb+0x34>
   1b40e:	6860      	ldr	r0, [r4, #4]
   1b410:	2104      	movs	r1, #4
   1b412:	3008      	adds	r0, #8
   1b414:	f7f9 fa38 	bl	14888 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b418:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b41a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b41c:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b41e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b420:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b422:	6863      	ldr	r3, [r4, #4]
   1b424:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b428:	899b      	ldrh	r3, [r3, #12]
   1b42a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b42c:	2804      	cmp	r0, #4
   1b42e:	bf94      	ite	ls
   1b430:	2000      	movls	r0, #0
   1b432:	2001      	movhi	r0, #1
}
   1b434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b436:	682b      	ldr	r3, [r5, #0]
   1b438:	781b      	ldrb	r3, [r3, #0]
   1b43a:	2b02      	cmp	r3, #2
   1b43c:	d1e1      	bne.n	1b402 <find_info_cb+0x34>
   1b43e:	6860      	ldr	r0, [r4, #4]
   1b440:	2112      	movs	r1, #18
   1b442:	3008      	adds	r0, #8
   1b444:	f7f9 fa20 	bl	14888 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b448:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b44a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b44c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1b44e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b452:	3101      	adds	r1, #1
   1b454:	f7ff fbc0 	bl	1abd8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1b458:	6863      	ldr	r3, [r4, #4]
   1b45a:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b45e:	899b      	ldrh	r3, [r3, #12]
   1b460:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b462:	2812      	cmp	r0, #18
   1b464:	e7e3      	b.n	1b42e <find_info_cb+0x60>

0001b466 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1b466:	68d0      	ldr	r0, [r2, #12]
   1b468:	3104      	adds	r1, #4
   1b46a:	7803      	ldrb	r3, [r0, #0]
   1b46c:	b913      	cbnz	r3, 1b474 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1b46e:	7001      	strb	r1, [r0, #0]
	return true;
   1b470:	2001      	movs	r0, #1
}
   1b472:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b474:	428b      	cmp	r3, r1
   1b476:	d0fb      	beq.n	1b470 <attr_read_group_cb+0xa>
		data->group = NULL;
   1b478:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1b47a:	6891      	ldr	r1, [r2, #8]
   1b47c:	898b      	ldrh	r3, [r1, #12]
   1b47e:	3b04      	subs	r3, #4
   1b480:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1b482:	6110      	str	r0, [r2, #16]
		return false;
   1b484:	4770      	bx	lr

0001b486 <write_cb>:
{
   1b486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b488:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b48a:	4601      	mov	r1, r0
{
   1b48c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b48e:	222a      	movs	r2, #42	; 0x2a
   1b490:	6820      	ldr	r0, [r4, #0]
   1b492:	f000 fd68 	bl	1bf66 <bt_gatt_check_perm>
   1b496:	4605      	mov	r5, r0
   1b498:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b49a:	bb00      	cbnz	r0, 1b4de <write_cb+0x58>
	if (!data->req) {
   1b49c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1b49e:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1b4a0:	2b00      	cmp	r3, #0
   1b4a2:	bf14      	ite	ne
   1b4a4:	2300      	movne	r3, #0
   1b4a6:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1b4a8:	9301      	str	r3, [sp, #4]
   1b4aa:	8a63      	ldrh	r3, [r4, #18]
   1b4ac:	68b7      	ldr	r7, [r6, #8]
   1b4ae:	9300      	str	r3, [sp, #0]
   1b4b0:	68e2      	ldr	r2, [r4, #12]
   1b4b2:	8a23      	ldrh	r3, [r4, #16]
   1b4b4:	6820      	ldr	r0, [r4, #0]
   1b4b6:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1b4b8:	1e03      	subs	r3, r0, #0
   1b4ba:	db05      	blt.n	1b4c8 <write_cb+0x42>
   1b4bc:	8a22      	ldrh	r2, [r4, #16]
   1b4be:	4293      	cmp	r3, r2
   1b4c0:	d10b      	bne.n	1b4da <write_cb+0x54>
	data->err = 0U;
   1b4c2:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1b4c4:	2501      	movs	r5, #1
   1b4c6:	e005      	b.n	1b4d4 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1b4c8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1b4cc:	d305      	bcc.n	1b4da <write_cb+0x54>
		return -err;
   1b4ce:	425b      	negs	r3, r3
   1b4d0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1b4d2:	7523      	strb	r3, [r4, #20]
}
   1b4d4:	4628      	mov	r0, r5
   1b4d6:	b003      	add	sp, #12
   1b4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1b4da:	230e      	movs	r3, #14
   1b4dc:	e7f9      	b.n	1b4d2 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1b4de:	2500      	movs	r5, #0
   1b4e0:	e7f8      	b.n	1b4d4 <write_cb+0x4e>

0001b4e2 <att_chan_read>:
{
   1b4e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4e6:	4680      	mov	r8, r0
   1b4e8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b4ea:	4610      	mov	r0, r2
{
   1b4ec:	4699      	mov	r9, r3
   1b4ee:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b4f0:	f7ff fefc 	bl	1b2ec <net_buf_frags_len>
   1b4f4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1b4f8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b4fa:	4283      	cmp	r3, r0
   1b4fc:	d97a      	bls.n	1b5f4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b4fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1b502:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1b504:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b506:	f7f9 f905 	bl	14714 <net_buf_frag_last>
	size_t len, total = 0;
   1b50a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b50e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b510:	4630      	mov	r0, r6
   1b512:	f7ff feeb 	bl	1b2ec <net_buf_frags_len>
   1b516:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1b51a:	f105 0708 	add.w	r7, r5, #8
   1b51e:	1a24      	subs	r4, r4, r0
   1b520:	4638      	mov	r0, r7
   1b522:	f000 fe53 	bl	1c1cc <net_buf_simple_tailroom>
   1b526:	4284      	cmp	r4, r0
   1b528:	d211      	bcs.n	1b54e <att_chan_read+0x6c>
   1b52a:	4630      	mov	r0, r6
   1b52c:	f7ff fede 	bl	1b2ec <net_buf_frags_len>
   1b530:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b534:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b536:	bb34      	cbnz	r4, 1b586 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b538:	79b0      	ldrb	r0, [r6, #6]
   1b53a:	f7f8 ff0f 	bl	1435c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b53e:	2200      	movs	r2, #0
   1b540:	2300      	movs	r3, #0
   1b542:	f000 fe1d 	bl	1c180 <net_buf_alloc_fixed>
			if (!frag) {
   1b546:	4605      	mov	r5, r0
   1b548:	b930      	cbnz	r0, 1b558 <att_chan_read+0x76>
	return total;
   1b54a:	4657      	mov	r7, sl
   1b54c:	e02c      	b.n	1b5a8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b54e:	4638      	mov	r0, r7
   1b550:	f000 fe3c 	bl	1c1cc <net_buf_simple_tailroom>
   1b554:	4604      	mov	r4, r0
   1b556:	e7ee      	b.n	1b536 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b558:	4601      	mov	r1, r0
   1b55a:	4630      	mov	r0, r6
   1b55c:	f7f9 f91a 	bl	14794 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b560:	4630      	mov	r0, r6
   1b562:	f7ff fec3 	bl	1b2ec <net_buf_frags_len>
   1b566:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b56a:	f105 0708 	add.w	r7, r5, #8
   1b56e:	1a24      	subs	r4, r4, r0
   1b570:	4638      	mov	r0, r7
   1b572:	f000 fe2b 	bl	1c1cc <net_buf_simple_tailroom>
   1b576:	4284      	cmp	r4, r0
   1b578:	d21a      	bcs.n	1b5b0 <att_chan_read+0xce>
   1b57a:	4630      	mov	r0, r6
   1b57c:	f7ff feb6 	bl	1b2ec <net_buf_frags_len>
   1b580:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b584:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b586:	68a9      	ldr	r1, [r5, #8]
   1b588:	89aa      	ldrh	r2, [r5, #12]
   1b58a:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b58e:	440a      	add	r2, r1
   1b590:	9803      	ldr	r0, [sp, #12]
   1b592:	4659      	mov	r1, fp
   1b594:	f8cd 9000 	str.w	r9, [sp]
   1b598:	b2a3      	uxth	r3, r4
   1b59a:	47b8      	blx	r7
		if (read < 0) {
   1b59c:	1e07      	subs	r7, r0, #0
   1b59e:	da0c      	bge.n	1b5ba <att_chan_read+0xd8>
				return total;
   1b5a0:	f1ba 0f00 	cmp.w	sl, #0
   1b5a4:	bf18      	it	ne
   1b5a6:	4657      	movne	r7, sl
}
   1b5a8:	4638      	mov	r0, r7
   1b5aa:	b005      	add	sp, #20
   1b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5b0:	4638      	mov	r0, r7
   1b5b2:	f000 fe0b 	bl	1c1cc <net_buf_simple_tailroom>
   1b5b6:	4604      	mov	r4, r0
   1b5b8:	e7e5      	b.n	1b586 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b5ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b5bc:	b993      	cbnz	r3, 1b5e4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b5be:	4639      	mov	r1, r7
   1b5c0:	f105 0008 	add.w	r0, r5, #8
   1b5c4:	f7f9 f960 	bl	14888 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b5c8:	4630      	mov	r0, r6
   1b5ca:	f7ff fe8f 	bl	1b2ec <net_buf_frags_len>
   1b5ce:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1b5d2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b5d4:	4283      	cmp	r3, r0
		total += read;
   1b5d6:	44ba      	add	sl, r7
		offset += read;
   1b5d8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b5dc:	d9b5      	bls.n	1b54a <att_chan_read+0x68>
   1b5de:	42a7      	cmp	r7, r4
   1b5e0:	d096      	beq.n	1b510 <att_chan_read+0x2e>
   1b5e2:	e7b2      	b.n	1b54a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b5e4:	4639      	mov	r1, r7
   1b5e6:	4628      	mov	r0, r5
   1b5e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b5ec:	4798      	blx	r3
   1b5ee:	2800      	cmp	r0, #0
   1b5f0:	d1e5      	bne.n	1b5be <att_chan_read+0xdc>
   1b5f2:	e7aa      	b.n	1b54a <att_chan_read+0x68>
		return 0;
   1b5f4:	2700      	movs	r7, #0
   1b5f6:	e7d7      	b.n	1b5a8 <att_chan_read+0xc6>

0001b5f8 <bt_att_chan_send>:
{
   1b5f8:	b570      	push	{r4, r5, r6, lr}
   1b5fa:	4604      	mov	r4, r0
   1b5fc:	460e      	mov	r6, r1
	if (!cb) {
   1b5fe:	4615      	mov	r5, r2
   1b600:	b132      	cbz	r2, 1b610 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1b602:	462a      	mov	r2, r5
   1b604:	4631      	mov	r1, r6
   1b606:	4620      	mov	r0, r4
}
   1b608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1b60c:	f7f5 bfaa 	b.w	11564 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1b610:	2200      	movs	r2, #0
   1b612:	2300      	movs	r3, #0
   1b614:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1b618:	f7fc fefa 	bl	18410 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1b61c:	2800      	cmp	r0, #0
   1b61e:	daf0      	bge.n	1b602 <bt_att_chan_send+0xa>
}
   1b620:	f06f 000a 	mvn.w	r0, #10
   1b624:	bd70      	pop	{r4, r5, r6, pc}

0001b626 <bt_att_chan_send_rsp>:
{
   1b626:	b538      	push	{r3, r4, r5, lr}
   1b628:	4604      	mov	r4, r0
   1b62a:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1b62c:	f7ff ffe4 	bl	1b5f8 <bt_att_chan_send>
	if (err) {
   1b630:	b130      	cbz	r0, 1b640 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1b632:	4629      	mov	r1, r5
   1b634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1b638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1b63c:	f7f8 bfe0 	b.w	14600 <net_buf_put>
}
   1b640:	bd38      	pop	{r3, r4, r5, pc}

0001b642 <process_queue>:
{
   1b642:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1b644:	2200      	movs	r2, #0
{
   1b646:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1b648:	2300      	movs	r3, #0
   1b64a:	4608      	mov	r0, r1
{
   1b64c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1b64e:	f7f8 ff83 	bl	14558 <net_buf_get>
	if (buf) {
   1b652:	4605      	mov	r5, r0
   1b654:	b160      	cbz	r0, 1b670 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1b656:	4601      	mov	r1, r0
   1b658:	2200      	movs	r2, #0
   1b65a:	4620      	mov	r0, r4
   1b65c:	f7f5 ff82 	bl	11564 <chan_send>
		if (err) {
   1b660:	4604      	mov	r4, r0
   1b662:	b118      	cbz	r0, 1b66c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1b664:	4629      	mov	r1, r5
   1b666:	4630      	mov	r0, r6
   1b668:	f001 fbfe 	bl	1ce68 <k_queue_prepend>
}
   1b66c:	4620      	mov	r0, r4
   1b66e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b670:	f06f 0401 	mvn.w	r4, #1
   1b674:	e7fa      	b.n	1b66c <process_queue+0x2a>

0001b676 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b676:	2200      	movs	r2, #0
   1b678:	b510      	push	{r4, lr}
	return list->head;
   1b67a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b67c:	b153      	cbz	r3, 1b694 <sys_slist_find_and_remove.isra.0+0x1e>
   1b67e:	428b      	cmp	r3, r1
   1b680:	d10e      	bne.n	1b6a0 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1b682:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1b684:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b686:	b932      	cbnz	r2, 1b696 <sys_slist_find_and_remove.isra.0+0x20>
   1b688:	42a1      	cmp	r1, r4
	list->head = node;
   1b68a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b68c:	d100      	bne.n	1b690 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1b68e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b690:	2300      	movs	r3, #0
   1b692:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b694:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b696:	42a1      	cmp	r1, r4
	parent->next = child;
   1b698:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b69a:	bf08      	it	eq
   1b69c:	6042      	streq	r2, [r0, #4]
}
   1b69e:	e7f7      	b.n	1b690 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1b6a0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b6a2:	681b      	ldr	r3, [r3, #0]
   1b6a4:	e7ea      	b.n	1b67c <sys_slist_find_and_remove.isra.0+0x6>

0001b6a6 <att_exec_write_req>:
   1b6a6:	2006      	movs	r0, #6
   1b6a8:	4770      	bx	lr

0001b6aa <chan_req_send>:
{
   1b6aa:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b6ac:	690e      	ldr	r6, [r1, #16]
{
   1b6ae:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b6b0:	4630      	mov	r0, r6
   1b6b2:	f7ff fe1b 	bl	1b2ec <net_buf_frags_len>
   1b6b6:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1b6ba:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b6bc:	4283      	cmp	r3, r0
   1b6be:	d317      	bcc.n	1b6f0 <chan_req_send+0x46>
	chan->req = req;
   1b6c0:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1b6c4:	f106 0008 	add.w	r0, r6, #8
   1b6c8:	f000 fd7c 	bl	1c1c4 <net_buf_simple_headroom>
	state->len = buf->len;
   1b6cc:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1b6ce:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1b6d0:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1b6d2:	6920      	ldr	r0, [r4, #16]
   1b6d4:	f7f9 f806 	bl	146e4 <net_buf_ref>
   1b6d8:	2200      	movs	r2, #0
   1b6da:	4601      	mov	r1, r0
   1b6dc:	4628      	mov	r0, r5
   1b6de:	f7f5 ff41 	bl	11564 <chan_send>
	if (err) {
   1b6e2:	4605      	mov	r5, r0
   1b6e4:	b110      	cbz	r0, 1b6ec <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1b6e6:	6920      	ldr	r0, [r4, #16]
   1b6e8:	f7f8 ffb8 	bl	1465c <net_buf_unref>
}
   1b6ec:	4628      	mov	r0, r5
   1b6ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1b6f0:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1b6f4:	e7fa      	b.n	1b6ec <chan_req_send+0x42>

0001b6f6 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b6f6:	30c8      	adds	r0, #200	; 0xc8
   1b6f8:	e8d0 3fef 	ldaex	r3, [r0]
   1b6fc:	f023 0301 	bic.w	r3, r3, #1
   1b700:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b704:	2a00      	cmp	r2, #0
   1b706:	d1f7      	bne.n	1b6f8 <chan_rsp_sent+0x2>
}
   1b708:	4770      	bx	lr

0001b70a <chan_cfm_sent>:
   1b70a:	30c8      	adds	r0, #200	; 0xc8
   1b70c:	e8d0 3fef 	ldaex	r3, [r0]
   1b710:	f023 0302 	bic.w	r3, r3, #2
   1b714:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b718:	2a00      	cmp	r2, #0
   1b71a:	d1f7      	bne.n	1b70c <chan_cfm_sent+0x2>
}
   1b71c:	4770      	bx	lr

0001b71e <read_cb>:
{
   1b71e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b722:	4606      	mov	r6, r0
	data->err = 0x00;
   1b724:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1b726:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b72a:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1b72c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b730:	4631      	mov	r1, r6
	data->err = 0x00;
   1b732:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b734:	2215      	movs	r2, #21
   1b736:	f000 fc16 	bl	1bf66 <bt_gatt_check_perm>
   1b73a:	4604      	mov	r4, r0
   1b73c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1b73e:	b9a0      	cbnz	r0, 1b76a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b740:	e9cd 0000 	strd	r0, r0, [sp]
   1b744:	88ab      	ldrh	r3, [r5, #4]
   1b746:	4631      	mov	r1, r6
   1b748:	4640      	mov	r0, r8
   1b74a:	68aa      	ldr	r2, [r5, #8]
   1b74c:	f7ff fec9 	bl	1b4e2 <att_chan_read>
	if (ret < 0) {
   1b750:	1e03      	subs	r3, r0, #0
   1b752:	da0c      	bge.n	1b76e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1b754:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1b758:	bf32      	itee	cc
   1b75a:	230e      	movcc	r3, #14
		return -err;
   1b75c:	425b      	negcs	r3, r3
   1b75e:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1b760:	732b      	strb	r3, [r5, #12]
}
   1b762:	4620      	mov	r0, r4
   1b764:	b002      	add	sp, #8
   1b766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1b76a:	463c      	mov	r4, r7
   1b76c:	e7f9      	b.n	1b762 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1b76e:	2401      	movs	r4, #1
   1b770:	e7f7      	b.n	1b762 <read_cb+0x44>

0001b772 <bt_att_sent>:
{
   1b772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1b774:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1b778:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1b77a:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b77e:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1b782:	b10b      	cbz	r3, 1b788 <bt_att_sent+0x16>
		chan->sent(chan);
   1b784:	4638      	mov	r0, r7
   1b786:	4798      	blx	r3
   1b788:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1b78c:	e8d3 2fef 	ldaex	r2, [r3]
   1b790:	f022 0210 	bic.w	r2, r2, #16
   1b794:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b798:	2900      	cmp	r1, #0
   1b79a:	d1f7      	bne.n	1b78c <bt_att_sent+0x1a>
	if (!att) {
   1b79c:	b335      	cbz	r5, 1b7ec <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b79e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1b7a2:	b98b      	cbnz	r3, 1b7c8 <bt_att_sent+0x56>
   1b7a4:	686b      	ldr	r3, [r5, #4]
   1b7a6:	b17b      	cbz	r3, 1b7c8 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b7a8:	1d28      	adds	r0, r5, #4
   1b7aa:	f7ff fd95 	bl	1b2d8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b7ae:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b7b0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b7b2:	4638      	mov	r0, r7
   1b7b4:	f7ff ff79 	bl	1b6aa <chan_req_send>
   1b7b8:	2800      	cmp	r0, #0
   1b7ba:	da17      	bge.n	1b7ec <bt_att_sent+0x7a>
	parent->next = child;
   1b7bc:	686b      	ldr	r3, [r5, #4]
   1b7be:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b7c0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1b7c2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b7c4:	b903      	cbnz	r3, 1b7c8 <bt_att_sent+0x56>
	list->tail = node;
   1b7c6:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b7c8:	4638      	mov	r0, r7
   1b7ca:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1b7ce:	f7ff ff38 	bl	1b642 <process_queue>
	if (!err) {
   1b7d2:	b158      	cbz	r0, 1b7ec <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1b7d4:	4638      	mov	r0, r7
   1b7d6:	f105 010c 	add.w	r1, r5, #12
   1b7da:	f7ff ff32 	bl	1b642 <process_queue>
	if (!err) {
   1b7de:	b128      	cbz	r0, 1b7ec <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1b7e0:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1b7e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b7e8:	f7fc bdd6 	b.w	18398 <z_impl_k_sem_give>
   1b7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b7ee <att_req_send_process>:
{
   1b7ee:	b570      	push	{r4, r5, r6, lr}
   1b7f0:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1b7f2:	3004      	adds	r0, #4
   1b7f4:	f7ff fd70 	bl	1b2d8 <sys_slist_get>
	if (!node) {
   1b7f8:	4606      	mov	r6, r0
   1b7fa:	b1c0      	cbz	r0, 1b82e <att_req_send_process+0x40>
	return list->head;
   1b7fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b7fe:	b153      	cbz	r3, 1b816 <att_req_send_process+0x28>
   1b800:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1b804:	d007      	beq.n	1b816 <att_req_send_process+0x28>
	return node->next;
   1b806:	681c      	ldr	r4, [r3, #0]
   1b808:	b10c      	cbz	r4, 1b80e <att_req_send_process+0x20>
   1b80a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1b80e:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1b812:	b13b      	cbz	r3, 1b824 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b814:	b964      	cbnz	r4, 1b830 <att_req_send_process+0x42>
	parent->next = child;
   1b816:	686b      	ldr	r3, [r5, #4]
   1b818:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b81a:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1b81c:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b81e:	b933      	cbnz	r3, 1b82e <att_req_send_process+0x40>
	list->tail = node;
   1b820:	60ae      	str	r6, [r5, #8]
}
   1b822:	e004      	b.n	1b82e <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b824:	4631      	mov	r1, r6
   1b826:	f7f5 ff09 	bl	1163c <bt_att_chan_req_send>
   1b82a:	2800      	cmp	r0, #0
   1b82c:	dbf2      	blt.n	1b814 <att_req_send_process+0x26>
}
   1b82e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b830:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1b834:	d004      	beq.n	1b840 <att_req_send_process+0x52>
	return node->next;
   1b836:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b83a:	b10b      	cbz	r3, 1b840 <att_req_send_process+0x52>
   1b83c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1b840:	4620      	mov	r0, r4
   1b842:	461c      	mov	r4, r3
   1b844:	e7e3      	b.n	1b80e <att_req_send_process+0x20>

0001b846 <bt_att_status>:
{
   1b846:	b538      	push	{r3, r4, r5, lr}
   1b848:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b84a:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b84e:	07db      	lsls	r3, r3, #31
   1b850:	d519      	bpl.n	1b886 <bt_att_status+0x40>
	if (!chan->att) {
   1b852:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1b856:	b1b0      	cbz	r0, 1b886 <bt_att_status+0x40>
	if (chan->req) {
   1b858:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1b85c:	b99b      	cbnz	r3, 1b886 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1b85e:	3004      	adds	r0, #4
   1b860:	f7ff fd3a 	bl	1b2d8 <sys_slist_get>
	if (!node) {
   1b864:	4604      	mov	r4, r0
   1b866:	b170      	cbz	r0, 1b886 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b868:	4601      	mov	r1, r0
   1b86a:	f1a5 0008 	sub.w	r0, r5, #8
   1b86e:	f7f5 fee5 	bl	1163c <bt_att_chan_req_send>
   1b872:	2800      	cmp	r0, #0
   1b874:	da07      	bge.n	1b886 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1b876:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1b87a:	685a      	ldr	r2, [r3, #4]
   1b87c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b87e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b880:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b882:	b902      	cbnz	r2, 1b886 <bt_att_status+0x40>
	list->tail = node;
   1b884:	609c      	str	r4, [r3, #8]
}
   1b886:	bd38      	pop	{r3, r4, r5, pc}

0001b888 <att_write_req>:
{
   1b888:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b88a:	460c      	mov	r4, r1
   1b88c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b88e:	f101 0008 	add.w	r0, r1, #8
   1b892:	f000 fc8f 	bl	1c1b4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b896:	89a2      	ldrh	r2, [r4, #12]
   1b898:	4603      	mov	r3, r0
   1b89a:	9201      	str	r2, [sp, #4]
   1b89c:	68a2      	ldr	r2, [r4, #8]
   1b89e:	2112      	movs	r1, #18
   1b8a0:	9200      	str	r2, [sp, #0]
   1b8a2:	4628      	mov	r0, r5
   1b8a4:	2213      	movs	r2, #19
   1b8a6:	f7f6 f8a7 	bl	119f8 <att_write_rsp.constprop.0>
}
   1b8aa:	b003      	add	sp, #12
   1b8ac:	bd30      	pop	{r4, r5, pc}

0001b8ae <att_write_cmd>:
{
   1b8ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b8b0:	460c      	mov	r4, r1
   1b8b2:	4605      	mov	r5, r0
   1b8b4:	f101 0008 	add.w	r0, r1, #8
   1b8b8:	f000 fc7c 	bl	1c1b4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b8bc:	89a2      	ldrh	r2, [r4, #12]
   1b8be:	4603      	mov	r3, r0
   1b8c0:	9201      	str	r2, [sp, #4]
   1b8c2:	68a2      	ldr	r2, [r4, #8]
   1b8c4:	4628      	mov	r0, r5
   1b8c6:	9200      	str	r2, [sp, #0]
   1b8c8:	2200      	movs	r2, #0
   1b8ca:	4611      	mov	r1, r2
   1b8cc:	f7f6 f894 	bl	119f8 <att_write_rsp.constprop.0>
}
   1b8d0:	b003      	add	sp, #12
   1b8d2:	bd30      	pop	{r4, r5, pc}

0001b8d4 <att_read_blob_req>:
{
   1b8d4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b8d6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b8d8:	210c      	movs	r1, #12
   1b8da:	8813      	ldrh	r3, [r2, #0]
   1b8dc:	8852      	ldrh	r2, [r2, #2]
   1b8de:	9200      	str	r2, [sp, #0]
   1b8e0:	220d      	movs	r2, #13
   1b8e2:	f7f6 f9e5 	bl	11cb0 <att_read_rsp>
}
   1b8e6:	b003      	add	sp, #12
   1b8e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b8ec <att_read_req>:
{
   1b8ec:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b8ee:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1b8f0:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b8f2:	210a      	movs	r1, #10
   1b8f4:	881b      	ldrh	r3, [r3, #0]
   1b8f6:	9200      	str	r2, [sp, #0]
   1b8f8:	220b      	movs	r2, #11
   1b8fa:	f7f6 f9d9 	bl	11cb0 <att_read_rsp>
}
   1b8fe:	b003      	add	sp, #12
   1b900:	f85d fb04 	ldr.w	pc, [sp], #4

0001b904 <bt_att_init>:
	bt_gatt_init();
   1b904:	f7f7 ba0e 	b.w	12d24 <bt_gatt_init>

0001b908 <att_req_destroy>:
{
   1b908:	b510      	push	{r4, lr}
   1b90a:	4604      	mov	r4, r0
	if (req->buf) {
   1b90c:	6900      	ldr	r0, [r0, #16]
   1b90e:	b108      	cbz	r0, 1b914 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1b910:	f7f8 fea4 	bl	1465c <net_buf_unref>
	if (req->destroy) {
   1b914:	68a3      	ldr	r3, [r4, #8]
   1b916:	b10b      	cbz	r3, 1b91c <att_req_destroy+0x14>
		req->destroy(req);
   1b918:	4620      	mov	r0, r4
   1b91a:	4798      	blx	r3
	bt_att_req_free(req);
   1b91c:	4620      	mov	r0, r4
}
   1b91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1b922:	f7f6 bb63 	b.w	11fec <bt_att_req_free>

0001b926 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b926:	898a      	ldrh	r2, [r1, #12]
   1b928:	2300      	movs	r3, #0
   1b92a:	6889      	ldr	r1, [r1, #8]
   1b92c:	f7f6 bb6a 	b.w	12004 <att_handle_rsp>

0001b930 <att_handle_find_type_rsp>:
   1b930:	f7ff bff9 	b.w	1b926 <att_handle_find_info_rsp>

0001b934 <att_handle_read_type_rsp>:
   1b934:	f7ff bff7 	b.w	1b926 <att_handle_find_info_rsp>

0001b938 <att_handle_read_rsp>:
   1b938:	f7ff bff5 	b.w	1b926 <att_handle_find_info_rsp>

0001b93c <att_handle_read_blob_rsp>:
   1b93c:	f7ff bff3 	b.w	1b926 <att_handle_find_info_rsp>

0001b940 <att_handle_read_mult_rsp>:
   1b940:	f7ff bff1 	b.w	1b926 <att_handle_find_info_rsp>

0001b944 <att_handle_read_group_rsp>:
   1b944:	f7ff bfef 	b.w	1b926 <att_handle_find_info_rsp>

0001b948 <att_handle_write_rsp>:
   1b948:	f7ff bfed 	b.w	1b926 <att_handle_find_info_rsp>

0001b94c <att_handle_prepare_write_rsp>:
   1b94c:	f7ff bfeb 	b.w	1b926 <att_handle_find_info_rsp>

0001b950 <att_handle_exec_write_rsp>:
   1b950:	f7ff bfe9 	b.w	1b926 <att_handle_find_info_rsp>

0001b954 <att_confirm>:
   1b954:	f7ff bfe7 	b.w	1b926 <att_handle_find_info_rsp>

0001b958 <att_mtu_rsp>:
{
   1b958:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1b95a:	6889      	ldr	r1, [r1, #8]
{
   1b95c:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1b95e:	880c      	ldrh	r4, [r1, #0]
{
   1b960:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1b962:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1b964:	bf89      	itett	hi
   1b966:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1b968:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1b96a:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b96e:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1b972:	bf99      	ittee	ls
   1b974:	2304      	movls	r3, #4
   1b976:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1b978:	2300      	movhi	r3, #0
   1b97a:	8992      	ldrhhi	r2, [r2, #12]
}
   1b97c:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1b97e:	f7f6 bb41 	b.w	12004 <att_handle_rsp>

0001b982 <att_chan_detach>:
{
   1b982:	b538      	push	{r3, r4, r5, lr}
   1b984:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b986:	6800      	ldr	r0, [r0, #0]
   1b988:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1b98c:	3028      	adds	r0, #40	; 0x28
   1b98e:	f7ff fe72 	bl	1b676 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1b992:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1b996:	4628      	mov	r0, r5
   1b998:	f7fc fcfe 	bl	18398 <z_impl_k_sem_give>
   1b99c:	4628      	mov	r0, r5
   1b99e:	f7fc fcfb 	bl	18398 <z_impl_k_sem_give>
   1b9a2:	4628      	mov	r0, r5
   1b9a4:	f7fc fcf8 	bl	18398 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b9a8:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1b9ac:	2200      	movs	r2, #0
   1b9ae:	2300      	movs	r3, #0
   1b9b0:	4628      	mov	r0, r5
   1b9b2:	f7f8 fdd1 	bl	14558 <net_buf_get>
   1b9b6:	4602      	mov	r2, r0
   1b9b8:	b950      	cbnz	r0, 1b9d0 <att_chan_detach+0x4e>
	if (chan->req) {
   1b9ba:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1b9be:	b123      	cbz	r3, 1b9ca <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b9c0:	4601      	mov	r1, r0
   1b9c2:	230e      	movs	r3, #14
   1b9c4:	4620      	mov	r0, r4
   1b9c6:	f7f6 fb1d 	bl	12004 <att_handle_rsp>
	chan->att = NULL;
   1b9ca:	2300      	movs	r3, #0
   1b9cc:	6023      	str	r3, [r4, #0]
}
   1b9ce:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1b9d0:	f7f8 fe44 	bl	1465c <net_buf_unref>
   1b9d4:	e7ea      	b.n	1b9ac <att_chan_detach+0x2a>

0001b9d6 <bt_att_disconnected>:
{
   1b9d6:	b538      	push	{r3, r4, r5, lr}
   1b9d8:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1b9da:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1b9de:	f7ff ffd0 	bl	1b982 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1b9e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b9e4:	b93b      	cbnz	r3, 1b9f6 <bt_att_disconnected+0x20>
	att_reset(att);
   1b9e6:	4628      	mov	r0, r5
   1b9e8:	f7f6 fb6a 	bl	120c0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1b9ec:	6820      	ldr	r0, [r4, #0]
}
   1b9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1b9f2:	f7f8 bbdf 	b.w	141b4 <bt_gatt_disconnected>
}
   1b9f6:	bd38      	pop	{r3, r4, r5, pc}

0001b9f8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1b9f8:	6010      	str	r0, [r2, #0]
}
   1b9fa:	2000      	movs	r0, #0
   1b9fc:	4770      	bx	lr

0001b9fe <gatt_ccc_changed>:
{
   1b9fe:	460b      	mov	r3, r1
   1ba00:	460a      	mov	r2, r1
   1ba02:	b430      	push	{r4, r5}
   1ba04:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1ba08:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1ba0a:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ba0c:	320a      	adds	r2, #10
   1ba0e:	42a9      	cmp	r1, r5
   1ba10:	bf38      	it	cc
   1ba12:	4629      	movcc	r1, r5
   1ba14:	42a2      	cmp	r2, r4
   1ba16:	d1f8      	bne.n	1ba0a <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1ba18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1ba1c:	428a      	cmp	r2, r1
   1ba1e:	d005      	beq.n	1ba2c <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1ba20:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1ba24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1ba26:	b10b      	cbz	r3, 1ba2c <gatt_ccc_changed+0x2e>
}
   1ba28:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1ba2a:	4718      	bx	r3
}
   1ba2c:	bc30      	pop	{r4, r5}
   1ba2e:	4770      	bx	lr

0001ba30 <gatt_indicate_rsp>:
{
   1ba30:	b510      	push	{r4, lr}
   1ba32:	9c02      	ldr	r4, [sp, #8]
   1ba34:	460a      	mov	r2, r1
	params->_ref--;
   1ba36:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1ba38:	4621      	mov	r1, r4
	params->_ref--;
   1ba3a:	3b01      	subs	r3, #1
   1ba3c:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1ba3e:	68a3      	ldr	r3, [r4, #8]
   1ba40:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1ba42:	68e3      	ldr	r3, [r4, #12]
   1ba44:	b12b      	cbz	r3, 1ba52 <gatt_indicate_rsp+0x22>
   1ba46:	7da2      	ldrb	r2, [r4, #22]
   1ba48:	b91a      	cbnz	r2, 1ba52 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1ba4a:	4620      	mov	r0, r4
}
   1ba4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1ba50:	4718      	bx	r3
}
   1ba52:	bd10      	pop	{r4, pc}

0001ba54 <match_uuid>:
	data->attr = attr;
   1ba54:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1ba56:	8091      	strh	r1, [r2, #4]
}
   1ba58:	2000      	movs	r0, #0
   1ba5a:	4770      	bx	lr

0001ba5c <ccc_set_cb>:
}
   1ba5c:	2000      	movs	r0, #0
   1ba5e:	4770      	bx	lr

0001ba60 <gen_hash_m>:
{
   1ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ba62:	6807      	ldr	r7, [r0, #0]
{
   1ba64:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ba66:	783d      	ldrb	r5, [r7, #0]
{
   1ba68:	4614      	mov	r4, r2
   1ba6a:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ba6c:	b10d      	cbz	r5, 1ba72 <gen_hash_m+0x12>
	switch (u16->val) {
   1ba6e:	2501      	movs	r5, #1
   1ba70:	e014      	b.n	1ba9c <gen_hash_m+0x3c>
   1ba72:	887b      	ldrh	r3, [r7, #2]
   1ba74:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1ba78:	d004      	beq.n	1ba84 <gen_hash_m+0x24>
   1ba7a:	d812      	bhi.n	1baa2 <gen_hash_m+0x42>
   1ba7c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1ba80:	2b03      	cmp	r3, #3
   1ba82:	d8f4      	bhi.n	1ba6e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ba84:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ba88:	2202      	movs	r2, #2
   1ba8a:	4620      	mov	r0, r4
   1ba8c:	f10d 010e 	add.w	r1, sp, #14
   1ba90:	f7fe fcd6 	bl	1a440 <tc_cmac_update>
   1ba94:	b9e0      	cbnz	r0, 1bad0 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1ba96:	f06f 0315 	mvn.w	r3, #21
   1ba9a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1ba9c:	4628      	mov	r0, r5
   1ba9e:	b009      	add	sp, #36	; 0x24
   1baa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1baa2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1baa6:	33ff      	adds	r3, #255	; 0xff
   1baa8:	b29b      	uxth	r3, r3
   1baaa:	2b04      	cmp	r3, #4
   1baac:	d8df      	bhi.n	1ba6e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1baae:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bab2:	2202      	movs	r2, #2
   1bab4:	4620      	mov	r0, r4
   1bab6:	f10d 010e 	add.w	r1, sp, #14
   1baba:	f7fe fcc1 	bl	1a440 <tc_cmac_update>
   1babe:	2800      	cmp	r0, #0
   1bac0:	d0e9      	beq.n	1ba96 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1bac2:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bac4:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1bac6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1baca:	f10d 010e 	add.w	r1, sp, #14
   1bace:	e017      	b.n	1bb00 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1bad0:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bad2:	2202      	movs	r2, #2
   1bad4:	4620      	mov	r0, r4
   1bad6:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1bada:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bade:	f7fe fcaf 	bl	1a440 <tc_cmac_update>
   1bae2:	2800      	cmp	r0, #0
   1bae4:	d0d7      	beq.n	1ba96 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1bae6:	2000      	movs	r0, #0
   1bae8:	2310      	movs	r3, #16
   1baea:	4631      	mov	r1, r6
   1baec:	eb0d 0203 	add.w	r2, sp, r3
   1baf0:	6877      	ldr	r7, [r6, #4]
   1baf2:	9000      	str	r0, [sp, #0]
   1baf4:	47b8      	blx	r7
		if (len < 0) {
   1baf6:	1e02      	subs	r2, r0, #0
   1baf8:	da01      	bge.n	1bafe <gen_hash_m+0x9e>
			state->err = len;
   1bafa:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bafc:	e7ce      	b.n	1ba9c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1bafe:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bb00:	4620      	mov	r0, r4
   1bb02:	f7fe fc9d 	bl	1a440 <tc_cmac_update>
   1bb06:	2800      	cmp	r0, #0
   1bb08:	d1b1      	bne.n	1ba6e <gen_hash_m+0xe>
   1bb0a:	e7c4      	b.n	1ba96 <gen_hash_m+0x36>

0001bb0c <bt_addr_le_cmp>:
   1bb0c:	2207      	movs	r2, #7
   1bb0e:	f7ff b852 	b.w	1abb6 <memcmp>

0001bb12 <find_ccc_cfg>:
{
   1bb12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bb14:	4606      	mov	r6, r0
   1bb16:	1c4c      	adds	r4, r1, #1
   1bb18:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1bb1c:	1e67      	subs	r7, r4, #1
		if (conn) {
   1bb1e:	b14e      	cbz	r6, 1bb34 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1bb20:	4622      	mov	r2, r4
   1bb22:	4630      	mov	r0, r6
   1bb24:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1bb28:	f7ff fab1 	bl	1b08e <bt_conn_is_peer_addr_le>
   1bb2c:	b158      	cbz	r0, 1bb46 <find_ccc_cfg+0x34>
}
   1bb2e:	4638      	mov	r0, r7
   1bb30:	b003      	add	sp, #12
   1bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bb34:	4669      	mov	r1, sp
   1bb36:	4620      	mov	r0, r4
   1bb38:	9600      	str	r6, [sp, #0]
   1bb3a:	f8cd 6003 	str.w	r6, [sp, #3]
   1bb3e:	f7ff ffe5 	bl	1bb0c <bt_addr_le_cmp>
   1bb42:	2800      	cmp	r0, #0
   1bb44:	d0f3      	beq.n	1bb2e <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bb46:	340a      	adds	r4, #10
   1bb48:	42ac      	cmp	r4, r5
   1bb4a:	d1e7      	bne.n	1bb1c <find_ccc_cfg+0xa>
	return NULL;
   1bb4c:	2700      	movs	r7, #0
   1bb4e:	e7ee      	b.n	1bb2e <find_ccc_cfg+0x1c>

0001bb50 <ccc_find_cfg>:
{
   1bb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb54:	4604      	mov	r4, r0
   1bb56:	460f      	mov	r7, r1
   1bb58:	4690      	mov	r8, r2
   1bb5a:	2500      	movs	r5, #0
   1bb5c:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1bb5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1bb62:	4543      	cmp	r3, r8
   1bb64:	d107      	bne.n	1bb76 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1bb66:	4639      	mov	r1, r7
   1bb68:	4630      	mov	r0, r6
   1bb6a:	f7ff ffcf 	bl	1bb0c <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1bb6e:	b910      	cbnz	r0, 1bb76 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1bb70:	1960      	adds	r0, r4, r5
}
   1bb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bb76:	350a      	adds	r5, #10
   1bb78:	2d64      	cmp	r5, #100	; 0x64
   1bb7a:	f106 060a 	add.w	r6, r6, #10
   1bb7e:	d1ee      	bne.n	1bb5e <ccc_find_cfg+0xe>
	return NULL;
   1bb80:	2000      	movs	r0, #0
   1bb82:	e7f6      	b.n	1bb72 <ccc_find_cfg+0x22>

0001bb84 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bb84:	2207      	movs	r2, #7
   1bb86:	f7ff b827 	b.w	1abd8 <memcpy>

0001bb8a <clear_ccc_cfg>:
{
   1bb8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bb8c:	2500      	movs	r5, #0
{
   1bb8e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bb90:	4669      	mov	r1, sp
   1bb92:	3001      	adds	r0, #1
   1bb94:	9500      	str	r5, [sp, #0]
   1bb96:	f8cd 5003 	str.w	r5, [sp, #3]
   1bb9a:	f7ff fff3 	bl	1bb84 <bt_addr_le_copy>
	cfg->id = 0U;
   1bb9e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bba0:	8125      	strh	r5, [r4, #8]
}
   1bba2:	b003      	add	sp, #12
   1bba4:	bd30      	pop	{r4, r5, pc}

0001bba6 <atomic_or>:
{
   1bba6:	4603      	mov	r3, r0
}
   1bba8:	e8d3 0fef 	ldaex	r0, [r3]
   1bbac:	ea40 0201 	orr.w	r2, r0, r1
   1bbb0:	e8c3 2fec 	stlex	ip, r2, [r3]
   1bbb4:	f1bc 0f00 	cmp.w	ip, #0
   1bbb8:	d1f6      	bne.n	1bba8 <atomic_or+0x2>
   1bbba:	4770      	bx	lr

0001bbbc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bbbc:	e8d0 0faf 	lda	r0, [r0]
}
   1bbc0:	4770      	bx	lr

0001bbc2 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bbc2:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1bbc4:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bbc6:	3001      	adds	r0, #1
   1bbc8:	4669      	mov	r1, sp
   1bbca:	9300      	str	r3, [sp, #0]
   1bbcc:	f8cd 3003 	str.w	r3, [sp, #3]
   1bbd0:	f7ff ffd8 	bl	1bb84 <bt_addr_le_copy>
}
   1bbd4:	b003      	add	sp, #12
   1bbd6:	f85d fb04 	ldr.w	pc, [sp], #4

0001bbda <clear_cf_cfg>:
{
   1bbda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bbdc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bbde:	2500      	movs	r5, #0
   1bbe0:	4669      	mov	r1, sp
   1bbe2:	3001      	adds	r0, #1
   1bbe4:	9500      	str	r5, [sp, #0]
   1bbe6:	f8cd 5003 	str.w	r5, [sp, #3]
   1bbea:	f7ff ffcb 	bl	1bb84 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1bbee:	f104 0008 	add.w	r0, r4, #8
   1bbf2:	2201      	movs	r2, #1
   1bbf4:	4629      	mov	r1, r5
   1bbf6:	f7ff f81a 	bl	1ac2e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bbfa:	340c      	adds	r4, #12
   1bbfc:	e8d4 3fef 	ldaex	r3, [r4]
   1bc00:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1bc04:	2a00      	cmp	r2, #0
   1bc06:	d1f9      	bne.n	1bbfc <clear_cf_cfg+0x22>
}
   1bc08:	b003      	add	sp, #12
   1bc0a:	bd30      	pop	{r4, r5, pc}

0001bc0c <gatt_sub_remove>:
{
   1bc0c:	b570      	push	{r4, r5, r6, lr}
   1bc0e:	460c      	mov	r4, r1
	if (params) {
   1bc10:	4619      	mov	r1, r3
   1bc12:	b16b      	cbz	r3, 1bc30 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1bc14:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1bc18:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1bc1a:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1bc1c:	b97a      	cbnz	r2, 1bc3e <gatt_sub_remove+0x32>
   1bc1e:	42ae      	cmp	r6, r5
	list->head = node;
   1bc20:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1bc22:	d100      	bne.n	1bc26 <gatt_sub_remove+0x1a>
	list->tail = node;
   1bc24:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1bc26:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1bc28:	680d      	ldr	r5, [r1, #0]
   1bc2a:	461a      	mov	r2, r3
   1bc2c:	614b      	str	r3, [r1, #20]
   1bc2e:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1bc30:	68a3      	ldr	r3, [r4, #8]
   1bc32:	b94b      	cbnz	r3, 1bc48 <gatt_sub_remove+0x3c>
   1bc34:	4620      	mov	r0, r4
}
   1bc36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bc3a:	f7ff bfc2 	b.w	1bbc2 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1bc3e:	42ae      	cmp	r6, r5
	parent->next = child;
   1bc40:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bc42:	bf08      	it	eq
   1bc44:	60e2      	streq	r2, [r4, #12]
}
   1bc46:	e7ee      	b.n	1bc26 <gatt_sub_remove+0x1a>
   1bc48:	bd70      	pop	{r4, r5, r6, pc}

0001bc4a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1bc4a:	2a02      	cmp	r2, #2
{
   1bc4c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1bc4e:	d108      	bne.n	1bc62 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1bc50:	2300      	movs	r3, #0
   1bc52:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1bc56:	461a      	mov	r2, r3
   1bc58:	7a00      	ldrb	r0, [r0, #8]
   1bc5a:	f7f6 fcc9 	bl	125f0 <sc_save>
}
   1bc5e:	2002      	movs	r0, #2
   1bc60:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1bc62:	f7f6 ff79 	bl	12b58 <sc_clear>
   1bc66:	e7fa      	b.n	1bc5e <sc_ccc_cfg_write+0x14>

0001bc68 <gatt_write_ccc_rsp>:
{
   1bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc6c:	4606      	mov	r6, r0
   1bc6e:	460d      	mov	r5, r1
   1bc70:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bc72:	f104 0310 	add.w	r3, r4, #16
   1bc76:	e8d3 2fef 	ldaex	r2, [r3]
   1bc7a:	f022 0204 	bic.w	r2, r2, #4
   1bc7e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bc82:	2900      	cmp	r1, #0
   1bc84:	d1f7      	bne.n	1bc76 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1bc86:	b1dd      	cbz	r5, 1bcc0 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1bc88:	f7f6 fb9c 	bl	123c4 <gatt_sub_find>
		if (!sub) {
   1bc8c:	4601      	mov	r1, r0
   1bc8e:	b300      	cbz	r0, 1bcd2 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1bc90:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bc92:	b143      	cbz	r3, 1bca6 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1bc94:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1bc96:	f104 0014 	add.w	r0, r4, #20
   1bc9a:	4283      	cmp	r3, r0
   1bc9c:	d10b      	bne.n	1bcb6 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1bc9e:	4623      	mov	r3, r4
   1bca0:	4630      	mov	r0, r6
   1bca2:	f7ff ffb3 	bl	1bc0c <gatt_sub_remove>
	if (params->write) {
   1bca6:	6863      	ldr	r3, [r4, #4]
   1bca8:	b19b      	cbz	r3, 1bcd2 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1bcaa:	4629      	mov	r1, r5
   1bcac:	4630      	mov	r0, r6
}
   1bcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1bcb2:	2200      	movs	r2, #0
   1bcb4:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bcb6:	2a00      	cmp	r2, #0
   1bcb8:	d0f5      	beq.n	1bca6 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1bcba:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bcbc:	6812      	ldr	r2, [r2, #0]
   1bcbe:	e7ec      	b.n	1bc9a <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1bcc0:	89a3      	ldrh	r3, [r4, #12]
   1bcc2:	2b00      	cmp	r3, #0
   1bcc4:	d1ef      	bne.n	1bca6 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1bcc6:	462b      	mov	r3, r5
   1bcc8:	462a      	mov	r2, r5
   1bcca:	4621      	mov	r1, r4
   1bccc:	6827      	ldr	r7, [r4, #0]
   1bcce:	47b8      	blx	r7
   1bcd0:	e7e9      	b.n	1bca6 <gatt_write_ccc_rsp+0x3e>
}
   1bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bcd6 <read_ppcp>:
{
   1bcd6:	b513      	push	{r0, r1, r4, lr}
   1bcd8:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1bcda:	2218      	movs	r2, #24
   1bcdc:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1bce0:	2228      	movs	r2, #40	; 0x28
   1bce2:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1bce6:	2200      	movs	r2, #0
   1bce8:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1bcec:	222a      	movs	r2, #42	; 0x2a
{
   1bcee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1bcf2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bcf6:	2908      	cmp	r1, #8
   1bcf8:	d80b      	bhi.n	1bd12 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1bcfa:	f1c1 0408 	rsb	r4, r1, #8
   1bcfe:	429c      	cmp	r4, r3
   1bd00:	bfa8      	it	ge
   1bd02:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bd04:	4469      	add	r1, sp
   1bd06:	4622      	mov	r2, r4
   1bd08:	f7fe ff66 	bl	1abd8 <memcpy>
}
   1bd0c:	4620      	mov	r0, r4
   1bd0e:	b002      	add	sp, #8
   1bd10:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bd12:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1bd16:	e7f9      	b.n	1bd0c <read_ppcp+0x36>

0001bd18 <read_appearance>:
{
   1bd18:	b513      	push	{r0, r1, r4, lr}
   1bd1a:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bd1c:	2200      	movs	r2, #0
{
   1bd1e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bd22:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bd26:	2902      	cmp	r1, #2
   1bd28:	d80d      	bhi.n	1bd46 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1bd2a:	f1c1 0402 	rsb	r4, r1, #2
   1bd2e:	429c      	cmp	r4, r3
   1bd30:	bfa8      	it	ge
   1bd32:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bd34:	f10d 0306 	add.w	r3, sp, #6
   1bd38:	4622      	mov	r2, r4
   1bd3a:	4419      	add	r1, r3
   1bd3c:	f7fe ff4c 	bl	1abd8 <memcpy>
}
   1bd40:	4620      	mov	r0, r4
   1bd42:	b002      	add	sp, #8
   1bd44:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bd46:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1bd4a:	e7f9      	b.n	1bd40 <read_appearance+0x28>

0001bd4c <read_name>:
{
   1bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd50:	4698      	mov	r8, r3
   1bd52:	4615      	mov	r5, r2
   1bd54:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1bd58:	f7f3 fcbe 	bl	f6d8 <bt_get_name>
   1bd5c:	4607      	mov	r7, r0
				 strlen(name));
   1bd5e:	f7fe fefd 	bl	1ab5c <strlen>
	if (offset > value_len) {
   1bd62:	b283      	uxth	r3, r0
   1bd64:	42b3      	cmp	r3, r6
   1bd66:	d30c      	bcc.n	1bd82 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1bd68:	1b9c      	subs	r4, r3, r6
   1bd6a:	4544      	cmp	r4, r8
   1bd6c:	bfa8      	it	ge
   1bd6e:	4644      	movge	r4, r8
   1bd70:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1bd72:	4622      	mov	r2, r4
   1bd74:	4628      	mov	r0, r5
   1bd76:	19b9      	adds	r1, r7, r6
   1bd78:	f7fe ff2e 	bl	1abd8 <memcpy>
}
   1bd7c:	4620      	mov	r0, r4
   1bd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bd82:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1bd86:	e7f9      	b.n	1bd7c <read_name+0x30>

0001bd88 <cf_read>:
{
   1bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bd8a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1bd8c:	2300      	movs	r3, #0
{
   1bd8e:	4615      	mov	r5, r2
   1bd90:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1bd94:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1bd98:	f7f6 fad6 	bl	12348 <find_cf_cfg>
	if (cfg) {
   1bd9c:	b128      	cbz	r0, 1bdaa <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1bd9e:	f100 0108 	add.w	r1, r0, #8
   1bda2:	2201      	movs	r2, #1
   1bda4:	a801      	add	r0, sp, #4
   1bda6:	f7fe ff17 	bl	1abd8 <memcpy>
	if (offset > value_len) {
   1bdaa:	2e01      	cmp	r6, #1
   1bdac:	d80d      	bhi.n	1bdca <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1bdae:	f1c6 0401 	rsb	r4, r6, #1
   1bdb2:	42bc      	cmp	r4, r7
   1bdb4:	bfa8      	it	ge
   1bdb6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1bdb8:	ab01      	add	r3, sp, #4
   1bdba:	4622      	mov	r2, r4
   1bdbc:	4628      	mov	r0, r5
   1bdbe:	1999      	adds	r1, r3, r6
   1bdc0:	f7fe ff0a 	bl	1abd8 <memcpy>
}
   1bdc4:	4620      	mov	r0, r4
   1bdc6:	b003      	add	sp, #12
   1bdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bdca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1bdce:	e7f9      	b.n	1bdc4 <cf_read+0x3c>

0001bdd0 <bt_gatt_attr_read_service>:
{
   1bdd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1bdd2:	68c9      	ldr	r1, [r1, #12]
{
   1bdd4:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1bdd6:	780b      	ldrb	r3, [r1, #0]
{
   1bdd8:	4610      	mov	r0, r2
   1bdda:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1bdde:	b993      	cbnz	r3, 1be06 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1bde0:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1bde2:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1bde4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1bde8:	d819      	bhi.n	1be1e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1bdea:	f1c5 0202 	rsb	r2, r5, #2
   1bdee:	4294      	cmp	r4, r2
   1bdf0:	bfa8      	it	ge
   1bdf2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1bdf4:	4622      	mov	r2, r4
   1bdf6:	f10d 0306 	add.w	r3, sp, #6
   1bdfa:	1959      	adds	r1, r3, r5
   1bdfc:	f7fe feec 	bl	1abd8 <memcpy>
}
   1be00:	4620      	mov	r0, r4
   1be02:	b003      	add	sp, #12
   1be04:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1be06:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1be08:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1be0c:	d807      	bhi.n	1be1e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1be0e:	f1c5 0210 	rsb	r2, r5, #16
   1be12:	4294      	cmp	r4, r2
   1be14:	bfa8      	it	ge
   1be16:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1be18:	4429      	add	r1, r5
   1be1a:	4622      	mov	r2, r4
   1be1c:	e7ee      	b.n	1bdfc <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1be1e:	f06f 0406 	mvn.w	r4, #6
   1be22:	e7ed      	b.n	1be00 <bt_gatt_attr_read_service+0x30>

0001be24 <bt_gatt_attr_read_ccc>:
{
   1be24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1be26:	68c9      	ldr	r1, [r1, #12]
{
   1be28:	4615      	mov	r5, r2
   1be2a:	461f      	mov	r7, r3
   1be2c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1be30:	f7ff fe6f 	bl	1bb12 <find_ccc_cfg>
	if (cfg) {
   1be34:	b100      	cbz	r0, 1be38 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1be36:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1be38:	2e02      	cmp	r6, #2
   1be3a:	f8ad 0006 	strh.w	r0, [sp, #6]
   1be3e:	d80e      	bhi.n	1be5e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1be40:	f1c6 0402 	rsb	r4, r6, #2
   1be44:	42bc      	cmp	r4, r7
   1be46:	bfa8      	it	ge
   1be48:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1be4a:	f10d 0306 	add.w	r3, sp, #6
   1be4e:	4622      	mov	r2, r4
   1be50:	4628      	mov	r0, r5
   1be52:	1999      	adds	r1, r3, r6
   1be54:	f7fe fec0 	bl	1abd8 <memcpy>
}
   1be58:	4620      	mov	r0, r4
   1be5a:	b003      	add	sp, #12
   1be5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1be5e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1be62:	e7f9      	b.n	1be58 <bt_gatt_attr_read_ccc+0x34>

0001be64 <sc_restore_rsp>:
{
   1be64:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1be66:	f7f6 fa6f 	bl	12348 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1be6a:	b140      	cbz	r0, 1be7e <sc_restore_rsp+0x1a>
   1be6c:	7a03      	ldrb	r3, [r0, #8]
   1be6e:	07db      	lsls	r3, r3, #31
   1be70:	d505      	bpl.n	1be7e <sc_restore_rsp+0x1a>
}
   1be72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1be76:	2101      	movs	r1, #1
   1be78:	300c      	adds	r0, #12
   1be7a:	f7ff be94 	b.w	1bba6 <atomic_or>
   1be7e:	bd08      	pop	{r3, pc}

0001be80 <bt_gatt_attr_read>:
{
   1be80:	b538      	push	{r3, r4, r5, lr}
   1be82:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1be86:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1be8a:	4610      	mov	r0, r2
	if (offset > value_len) {
   1be8c:	42a9      	cmp	r1, r5
   1be8e:	d80b      	bhi.n	1bea8 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1be90:	1a6d      	subs	r5, r5, r1
   1be92:	429d      	cmp	r5, r3
   1be94:	bfa8      	it	ge
   1be96:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1be98:	9b05      	ldr	r3, [sp, #20]
   1be9a:	b2ad      	uxth	r5, r5
   1be9c:	462a      	mov	r2, r5
   1be9e:	4419      	add	r1, r3
   1bea0:	f7fe fe9a 	bl	1abd8 <memcpy>
}
   1bea4:	4628      	mov	r0, r5
   1bea6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bea8:	f06f 0506 	mvn.w	r5, #6
   1beac:	e7fa      	b.n	1bea4 <bt_gatt_attr_read+0x24>

0001beae <bt_gatt_attr_value_handle>:
{
   1beae:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1beb0:	4604      	mov	r4, r0
   1beb2:	b910      	cbnz	r0, 1beba <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1beb4:	2000      	movs	r0, #0
}
   1beb6:	b002      	add	sp, #8
   1beb8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1beba:	2300      	movs	r3, #0
   1bebc:	f88d 3004 	strb.w	r3, [sp, #4]
   1bec0:	f642 0303 	movw	r3, #10243	; 0x2803
   1bec4:	6800      	ldr	r0, [r0, #0]
   1bec6:	a901      	add	r1, sp, #4
   1bec8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1becc:	f7fe fef9 	bl	1acc2 <bt_uuid_cmp>
   1bed0:	2800      	cmp	r0, #0
   1bed2:	d1ef      	bne.n	1beb4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1bed4:	68e3      	ldr	r3, [r4, #12]
   1bed6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1bed8:	2800      	cmp	r0, #0
   1beda:	d1ec      	bne.n	1beb6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1bedc:	4620      	mov	r0, r4
   1bede:	f7f6 ff89 	bl	12df4 <bt_gatt_attr_get_handle>
   1bee2:	3001      	adds	r0, #1
   1bee4:	b280      	uxth	r0, r0
	return handle;
   1bee6:	e7e6      	b.n	1beb6 <bt_gatt_attr_value_handle+0x8>

0001bee8 <bt_gatt_attr_read_chrc>:
{
   1bee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1beea:	68cf      	ldr	r7, [r1, #12]
{
   1beec:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1beee:	79bb      	ldrb	r3, [r7, #6]
{
   1bef0:	b087      	sub	sp, #28
   1bef2:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1bef4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1bef8:	4615      	mov	r5, r2
   1befa:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1befe:	f7ff ffd6 	bl	1beae <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bf02:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bf04:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bf08:	780b      	ldrb	r3, [r1, #0]
   1bf0a:	b99b      	cbnz	r3, 1bf34 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1bf0c:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1bf0e:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1bf10:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1bf14:	42b1      	cmp	r1, r6
   1bf16:	d315      	bcc.n	1bf44 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1bf18:	1b89      	subs	r1, r1, r6
   1bf1a:	42a1      	cmp	r1, r4
   1bf1c:	bfa8      	it	ge
   1bf1e:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1bf20:	ab01      	add	r3, sp, #4
   1bf22:	b28c      	uxth	r4, r1
   1bf24:	4622      	mov	r2, r4
   1bf26:	4628      	mov	r0, r5
   1bf28:	1999      	adds	r1, r3, r6
   1bf2a:	f7fe fe55 	bl	1abd8 <memcpy>
}
   1bf2e:	4620      	mov	r0, r4
   1bf30:	b007      	add	sp, #28
   1bf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1bf34:	3101      	adds	r1, #1
   1bf36:	2210      	movs	r2, #16
   1bf38:	f10d 0007 	add.w	r0, sp, #7
   1bf3c:	f7fe fe4c 	bl	1abd8 <memcpy>
		value_len += 16U;
   1bf40:	2113      	movs	r1, #19
   1bf42:	e7e7      	b.n	1bf14 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bf44:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1bf48:	e7f1      	b.n	1bf2e <bt_gatt_attr_read_chrc+0x46>

0001bf4a <bt_gatt_foreach_attr>:
{
   1bf4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1bf4c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1bf50:	2300      	movs	r3, #0
   1bf52:	461a      	mov	r2, r3
   1bf54:	9300      	str	r3, [sp, #0]
   1bf56:	f7f6 ff91 	bl	12e7c <bt_gatt_foreach_attr_type>
}
   1bf5a:	b005      	add	sp, #20
   1bf5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bf60 <db_hash_process>:
	db_hash_gen(true);
   1bf60:	2001      	movs	r0, #1
   1bf62:	f7f6 bff7 	b.w	12f54 <db_hash_gen>

0001bf66 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1bf66:	07d3      	lsls	r3, r2, #31
{
   1bf68:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bf6a:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1bf6c:	d504      	bpl.n	1bf78 <bt_gatt_check_perm+0x12>
   1bf6e:	f014 0f15 	tst.w	r4, #21
   1bf72:	d017      	beq.n	1bfa4 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bf74:	684b      	ldr	r3, [r1, #4]
   1bf76:	b1ab      	cbz	r3, 1bfa4 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1bf78:	0793      	lsls	r3, r2, #30
   1bf7a:	d504      	bpl.n	1bf86 <bt_gatt_check_perm+0x20>
   1bf7c:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1bf80:	d012      	beq.n	1bfa8 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1bf82:	688b      	ldr	r3, [r1, #8]
   1bf84:	b183      	cbz	r3, 1bfa8 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1bf86:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1bf88:	f014 0f30 	tst.w	r4, #48	; 0x30
   1bf8c:	d104      	bne.n	1bf98 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1bf8e:	f014 000c 	ands.w	r0, r4, #12
   1bf92:	bf18      	it	ne
   1bf94:	200f      	movne	r0, #15
}
   1bf96:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1bf98:	f7ff f86e 	bl	1b078 <bt_conn_get_security>
   1bf9c:	2802      	cmp	r0, #2
   1bf9e:	d8f6      	bhi.n	1bf8e <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1bfa0:	2005      	movs	r0, #5
   1bfa2:	e7f8      	b.n	1bf96 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1bfa4:	2002      	movs	r0, #2
   1bfa6:	e7f6      	b.n	1bf96 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1bfa8:	2003      	movs	r0, #3
   1bfaa:	e7f4      	b.n	1bf96 <bt_gatt_check_perm+0x30>

0001bfac <gatt_discover_next>:
{
   1bfac:	b570      	push	{r4, r5, r6, lr}
   1bfae:	4605      	mov	r5, r0
   1bfb0:	4614      	mov	r4, r2
	if (!last_handle)
   1bfb2:	b929      	cbnz	r1, 1bfc0 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1bfb4:	4621      	mov	r1, r4
   1bfb6:	4628      	mov	r0, r5
   1bfb8:	f7f7 fb24 	bl	13604 <bt_gatt_discover>
   1bfbc:	b928      	cbnz	r0, 1bfca <gatt_discover_next+0x1e>
}
   1bfbe:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1bfc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bfc4:	4291      	cmp	r1, r2
   1bfc6:	d107      	bne.n	1bfd8 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1bfc8:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1bfca:	4622      	mov	r2, r4
   1bfcc:	4628      	mov	r0, r5
   1bfce:	6863      	ldr	r3, [r4, #4]
   1bfd0:	2100      	movs	r1, #0
}
   1bfd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1bfd6:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1bfd8:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1bfda:	1c4b      	adds	r3, r1, #1
   1bfdc:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1bfde:	429a      	cmp	r2, r3
		params->start_handle++;
   1bfe0:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1bfe2:	d2e7      	bcs.n	1bfb4 <gatt_discover_next+0x8>
   1bfe4:	e7f1      	b.n	1bfca <gatt_discover_next+0x1e>

0001bfe6 <gatt_find_type_rsp>:
{
   1bfe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bfea:	b088      	sub	sp, #32
   1bfec:	4607      	mov	r7, r0
   1bfee:	4614      	mov	r4, r2
   1bff0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1bff4:	b911      	cbnz	r1, 1bffc <gatt_find_type_rsp+0x16>
   1bff6:	f013 0803 	ands.w	r8, r3, #3
   1bffa:	d008      	beq.n	1c00e <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1bffc:	464a      	mov	r2, r9
   1bffe:	2100      	movs	r1, #0
   1c000:	4638      	mov	r0, r7
   1c002:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1c006:	b008      	add	sp, #32
   1c008:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1c00c:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c00e:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c010:	f642 0a01 	movw	sl, #10241	; 0x2801
   1c014:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1c018:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1c01c:	42ac      	cmp	r4, r5
   1c01e:	d107      	bne.n	1c030 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1c020:	464a      	mov	r2, r9
   1c022:	4641      	mov	r1, r8
   1c024:	4638      	mov	r0, r7
}
   1c026:	b008      	add	sp, #32
   1c028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1c02c:	f7ff bfbe 	b.w	1bfac <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1c030:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c034:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c036:	2900      	cmp	r1, #0
   1c038:	bf0c      	ite	eq
   1c03a:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1c03e:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1c040:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c044:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1c048:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1c04c:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1c04e:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c050:	ab01      	add	r3, sp, #4
   1c052:	f8ad 1002 	strh.w	r1, [sp, #2]
   1c056:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1c058:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c05c:	4638      	mov	r0, r7
   1c05e:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c060:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c064:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c068:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c06c:	f8cd d00c 	str.w	sp, [sp, #12]
   1c070:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c074:	a903      	add	r1, sp, #12
   1c076:	4798      	blx	r3
   1c078:	3404      	adds	r4, #4
   1c07a:	2800      	cmp	r0, #0
   1c07c:	d1ce      	bne.n	1c01c <gatt_find_type_rsp+0x36>
}
   1c07e:	b008      	add	sp, #32
   1c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c084 <bt_gatt_notification>:
{
   1c084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c088:	4607      	mov	r7, r0
   1c08a:	4688      	mov	r8, r1
   1c08c:	4691      	mov	r9, r2
   1c08e:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1c090:	f7f6 f998 	bl	123c4 <gatt_sub_find>
	if (!sub) {
   1c094:	b1f8      	cbz	r0, 1c0d6 <bt_gatt_notification+0x52>
	return list->head;
   1c096:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c098:	b1eb      	cbz	r3, 1c0d6 <bt_gatt_notification+0x52>
   1c09a:	f1b3 0614 	subs.w	r6, r3, #20
   1c09e:	d01a      	beq.n	1c0d6 <bt_gatt_notification+0x52>
	return node->next;
   1c0a0:	681c      	ldr	r4, [r3, #0]
   1c0a2:	b104      	cbz	r4, 1c0a6 <bt_gatt_notification+0x22>
   1c0a4:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1c0a6:	8933      	ldrh	r3, [r6, #8]
   1c0a8:	4543      	cmp	r3, r8
   1c0aa:	d10a      	bne.n	1c0c2 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1c0ac:	4653      	mov	r3, sl
   1c0ae:	464a      	mov	r2, r9
   1c0b0:	4631      	mov	r1, r6
   1c0b2:	4638      	mov	r0, r7
   1c0b4:	6835      	ldr	r5, [r6, #0]
   1c0b6:	47a8      	blx	r5
   1c0b8:	b918      	cbnz	r0, 1c0c2 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1c0ba:	4631      	mov	r1, r6
   1c0bc:	4638      	mov	r0, r7
   1c0be:	f7f7 fedd 	bl	13e7c <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c0c2:	b144      	cbz	r4, 1c0d6 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c0c4:	f114 0514 	adds.w	r5, r4, #20
   1c0c8:	d002      	beq.n	1c0d0 <bt_gatt_notification+0x4c>
	return node->next;
   1c0ca:	6965      	ldr	r5, [r4, #20]
   1c0cc:	b105      	cbz	r5, 1c0d0 <bt_gatt_notification+0x4c>
   1c0ce:	3d14      	subs	r5, #20
{
   1c0d0:	4626      	mov	r6, r4
   1c0d2:	462c      	mov	r4, r5
   1c0d4:	e7e7      	b.n	1c0a6 <bt_gatt_notification+0x22>
}
   1c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c0da <bt_gatt_change_aware>:
{
   1c0da:	b510      	push	{r4, lr}
   1c0dc:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1c0de:	f7f6 f933 	bl	12348 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c0e2:	b910      	cbnz	r0, 1c0ea <bt_gatt_change_aware+0x10>
		return true;
   1c0e4:	2401      	movs	r4, #1
}
   1c0e6:	4620      	mov	r0, r4
   1c0e8:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c0ea:	7a03      	ldrb	r3, [r0, #8]
   1c0ec:	07db      	lsls	r3, r3, #31
   1c0ee:	d5f9      	bpl.n	1c0e4 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c0f0:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c0f4:	4618      	mov	r0, r3
   1c0f6:	f7ff fd61 	bl	1bbbc <atomic_get>
   1c0fa:	07c1      	lsls	r1, r0, #31
   1c0fc:	d4f2      	bmi.n	1c0e4 <bt_gatt_change_aware+0xa>
	if (!req) {
   1c0fe:	2c00      	cmp	r4, #0
   1c100:	d0f1      	beq.n	1c0e6 <bt_gatt_change_aware+0xc>
   1c102:	4618      	mov	r0, r3
   1c104:	f7ff fd5a 	bl	1bbbc <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1c108:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c10a:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1c10e:	d50c      	bpl.n	1c12a <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c110:	e8d3 2fef 	ldaex	r2, [r3]
   1c114:	f022 0202 	bic.w	r2, r2, #2
   1c118:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c11c:	2900      	cmp	r1, #0
   1c11e:	d1f7      	bne.n	1c110 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c120:	2101      	movs	r1, #1
   1c122:	4618      	mov	r0, r3
   1c124:	f7ff fd3f 	bl	1bba6 <atomic_or>
}
   1c128:	e7dd      	b.n	1c0e6 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c12a:	2102      	movs	r1, #2
   1c12c:	e7f9      	b.n	1c122 <bt_gatt_change_aware+0x48>

0001c12e <bt_smp_recv>:
{
   1c12e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c130:	2100      	movs	r1, #0
   1c132:	f04f 32ff 	mov.w	r2, #4294967295
   1c136:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1c13a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c13c:	4608      	mov	r0, r1
   1c13e:	f7ff f877 	bl	1b230 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1c142:	f100 0608 	add.w	r6, r0, #8
   1c146:	4604      	mov	r4, r0
   1c148:	2101      	movs	r1, #1
   1c14a:	4630      	mov	r0, r6
   1c14c:	f7f8 fb9c 	bl	14888 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1c150:	2505      	movs	r5, #5
   1c152:	2101      	movs	r1, #1
   1c154:	7005      	strb	r5, [r0, #0]
   1c156:	4630      	mov	r0, r6
   1c158:	f7f8 fb96 	bl	14888 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1c15c:	7005      	strb	r5, [r0, #0]
   1c15e:	2500      	movs	r5, #0
   1c160:	4622      	mov	r2, r4
   1c162:	462b      	mov	r3, r5
   1c164:	2106      	movs	r1, #6
   1c166:	4638      	mov	r0, r7
   1c168:	9500      	str	r5, [sp, #0]
   1c16a:	f7ff f864 	bl	1b236 <bt_l2cap_send_cb>
}
   1c16e:	4628      	mov	r0, r5
   1c170:	b003      	add	sp, #12
   1c172:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c174 <bt_smp_sign>:
   1c174:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c178:	4770      	bx	lr

0001c17a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1c17a:	2000      	movs	r0, #0
   1c17c:	4770      	bx	lr

0001c17e <fixed_data_unref>:
}
   1c17e:	4770      	bx	lr

0001c180 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c180:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c182:	6849      	ldr	r1, [r1, #4]
   1c184:	6809      	ldr	r1, [r1, #0]
   1c186:	f7f8 b93b 	b.w	14400 <net_buf_alloc_len>

0001c18a <net_buf_simple_init_with_data>:
	buf->size  = size;
   1c18a:	b292      	uxth	r2, r2
	buf->__buf = data;
   1c18c:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1c18e:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1c190:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1c192:	8082      	strh	r2, [r0, #4]
}
   1c194:	4770      	bx	lr

0001c196 <net_buf_simple_push_u8>:
{
   1c196:	b510      	push	{r4, lr}
   1c198:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1c19a:	2101      	movs	r1, #1
   1c19c:	f7f8 fb1c 	bl	147d8 <net_buf_simple_push>
	*data = val;
   1c1a0:	7004      	strb	r4, [r0, #0]
}
   1c1a2:	bd10      	pop	{r4, pc}

0001c1a4 <net_buf_simple_pull_u8>:
{
   1c1a4:	b510      	push	{r4, lr}
	val = buf->data[0];
   1c1a6:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1c1a8:	2101      	movs	r1, #1
	val = buf->data[0];
   1c1aa:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1c1ac:	f7f8 fb32 	bl	14814 <net_buf_simple_pull>
}
   1c1b0:	4620      	mov	r0, r4
   1c1b2:	bd10      	pop	{r4, pc}

0001c1b4 <net_buf_simple_pull_le16>:
{
   1c1b4:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c1b6:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c1b8:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c1ba:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c1bc:	f7f8 fb2a 	bl	14814 <net_buf_simple_pull>
}
   1c1c0:	4620      	mov	r0, r4
   1c1c2:	bd10      	pop	{r4, pc}

0001c1c4 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1c1c4:	6802      	ldr	r2, [r0, #0]
   1c1c6:	6880      	ldr	r0, [r0, #8]
}
   1c1c8:	1a10      	subs	r0, r2, r0
   1c1ca:	4770      	bx	lr

0001c1cc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c1cc:	8883      	ldrh	r3, [r0, #4]
   1c1ce:	88c2      	ldrh	r2, [r0, #6]
   1c1d0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1c1d2:	6803      	ldr	r3, [r0, #0]
   1c1d4:	6880      	ldr	r0, [r0, #8]
   1c1d6:	1a18      	subs	r0, r3, r0
}
   1c1d8:	1a10      	subs	r0, r2, r0
   1c1da:	4770      	bx	lr

0001c1dc <net_buf_simple_add_mem>:
{
   1c1dc:	b538      	push	{r3, r4, r5, lr}
   1c1de:	460d      	mov	r5, r1
   1c1e0:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c1e2:	4611      	mov	r1, r2
   1c1e4:	f7f8 fb50 	bl	14888 <net_buf_simple_add>
   1c1e8:	4622      	mov	r2, r4
   1c1ea:	4629      	mov	r1, r5
}
   1c1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c1f0:	f7fe bcf2 	b.w	1abd8 <memcpy>

0001c1f4 <net_buf_simple_add_u8>:
{
   1c1f4:	b510      	push	{r4, lr}
   1c1f6:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1c1f8:	2101      	movs	r1, #1
   1c1fa:	f7f8 fb45 	bl	14888 <net_buf_simple_add>
	*u8 = val;
   1c1fe:	7004      	strb	r4, [r0, #0]
}
   1c200:	bd10      	pop	{r4, pc}

0001c202 <net_buf_simple_add_le16>:
{
   1c202:	b510      	push	{r4, lr}
   1c204:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1c206:	2102      	movs	r1, #2
   1c208:	f7f8 fb3e 	bl	14888 <net_buf_simple_add>
	dst[0] = val;
   1c20c:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1c20e:	0a24      	lsrs	r4, r4, #8
   1c210:	7044      	strb	r4, [r0, #1]
}
   1c212:	bd10      	pop	{r4, pc}

0001c214 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c214:	6843      	ldr	r3, [r0, #4]
}
   1c216:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c218:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c21a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1c21c:	600b      	str	r3, [r1, #0]
}
   1c21e:	4770      	bx	lr

0001c220 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c220:	6843      	ldr	r3, [r0, #4]
   1c222:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c224:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c226:	4042      	eors	r2, r0
   1c228:	400a      	ands	r2, r1
   1c22a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c22c:	605a      	str	r2, [r3, #4]
}
   1c22e:	2000      	movs	r0, #0
   1c230:	4770      	bx	lr

0001c232 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c232:	6843      	ldr	r3, [r0, #4]
}
   1c234:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c236:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1c238:	6099      	str	r1, [r3, #8]
}
   1c23a:	4770      	bx	lr

0001c23c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c23c:	6843      	ldr	r3, [r0, #4]
}
   1c23e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c240:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1c242:	60d9      	str	r1, [r3, #12]
}
   1c244:	4770      	bx	lr

0001c246 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c246:	6843      	ldr	r3, [r0, #4]
}
   1c248:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c24a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c24c:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c24e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c250:	6053      	str	r3, [r2, #4]
}
   1c252:	4770      	bx	lr

0001c254 <nrf_gpio_cfg_sense_set>:
{
   1c254:	b513      	push	{r0, r1, r4, lr}
   1c256:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c258:	a801      	add	r0, sp, #4
{
   1c25a:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c25c:	f7f8 fb78 	bl	14950 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1c260:	9b01      	ldr	r3, [sp, #4]
   1c262:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c266:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1c26a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1c26e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1c272:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1c276:	b002      	add	sp, #8
   1c278:	bd10      	pop	{r4, pc}

0001c27a <cfg_level_pins>:
{
   1c27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c27e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c280:	2500      	movs	r5, #0
	return port->data;
   1c282:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1c284:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c288:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c28a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1c28e:	4313      	orrs	r3, r2
   1c290:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1c294:	b90c      	cbnz	r4, 1c29a <cfg_level_pins+0x20>
}
   1c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c29a:	4226      	tst	r6, r4
   1c29c:	d010      	beq.n	1c2c0 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c29e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c2a0:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c2a4:	40e9      	lsrs	r1, r5
   1c2a6:	f001 0101 	and.w	r1, r1, #1
   1c2aa:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c2ae:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1c2b2:	b2c9      	uxtb	r1, r1
   1c2b4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1c2b8:	f7ff ffcc 	bl	1c254 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c2bc:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c2c0:	3501      	adds	r5, #1
		bit <<= 1;
   1c2c2:	0076      	lsls	r6, r6, #1
   1c2c4:	e7e6      	b.n	1c294 <cfg_level_pins+0x1a>

0001c2c6 <check_level_trigger_pins>:
{
   1c2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c2ca:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c2cc:	2700      	movs	r7, #0
	return port->data;
   1c2ce:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1c2d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c2d4:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c2d6:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1c2da:	430a      	orrs	r2, r1
   1c2dc:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1c2e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1c2e4:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1c2e6:	6915      	ldr	r5, [r2, #16]
   1c2e8:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1c2ea:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1c2ee:	b914      	cbnz	r4, 1c2f6 <check_level_trigger_pins+0x30>
}
   1c2f0:	4628      	mov	r0, r5
   1c2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c2f6:	4234      	tst	r4, r6
   1c2f8:	d00a      	beq.n	1c310 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c2fa:	f898 0008 	ldrb.w	r0, [r8, #8]
   1c2fe:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c302:	2100      	movs	r1, #0
   1c304:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1c308:	f7ff ffa4 	bl	1c254 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c30c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c310:	3701      	adds	r7, #1
		bit <<= 1;
   1c312:	0076      	lsls	r6, r6, #1
   1c314:	e7eb      	b.n	1c2ee <check_level_trigger_pins+0x28>

0001c316 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1c316:	6883      	ldr	r3, [r0, #8]
   1c318:	689b      	ldr	r3, [r3, #8]
   1c31a:	4718      	bx	r3

0001c31c <vipm_nrf_max_id_val_get>:
}
   1c31c:	2000      	movs	r0, #0
   1c31e:	4770      	bx	lr

0001c320 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1c320:	b508      	push	{r3, lr}
   1c322:	b139      	cbz	r1, 1c334 <vipm_nrf_1_set_enabled+0x14>
   1c324:	202a      	movs	r0, #42	; 0x2a
   1c326:	f7f0 fbd7 	bl	cad8 <arch_irq_enable>
   1c32a:	2001      	movs	r0, #1
   1c32c:	f7f9 fe42 	bl	15fb4 <nrfx_ipc_receive_event_enable>
   1c330:	2000      	movs	r0, #0
   1c332:	bd08      	pop	{r3, pc}
   1c334:	2001      	movs	r0, #1
   1c336:	f7f9 fe5b 	bl	15ff0 <nrfx_ipc_receive_event_disable>
   1c33a:	e7f9      	b.n	1c330 <vipm_nrf_1_set_enabled+0x10>

0001c33c <uarte_nrfx_config_get>:
{
   1c33c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c33e:	68c2      	ldr	r2, [r0, #12]
   1c340:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c344:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c348:	2000      	movs	r0, #0
   1c34a:	4770      	bx	lr

0001c34c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c34c:	6843      	ldr	r3, [r0, #4]
   1c34e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c350:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c354:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c358:	4770      	bx	lr

0001c35a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c35a:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c35c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1c35e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c360:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c364:	b148      	cbz	r0, 1c37a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c366:	2000      	movs	r0, #0
	*c = data->rx_data;
   1c368:	7d52      	ldrb	r2, [r2, #21]
   1c36a:	700a      	strb	r2, [r1, #0]
   1c36c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c370:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c374:	2201      	movs	r2, #1
   1c376:	601a      	str	r2, [r3, #0]
	return 0;
   1c378:	4770      	bx	lr
		return -1;
   1c37a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c37e:	4770      	bx	lr

0001c380 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1c380:	6843      	ldr	r3, [r0, #4]
{
   1c382:	4602      	mov	r2, r0
	return config->uarte_regs;
   1c384:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c386:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c38a:	b148      	cbz	r0, 1c3a0 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c38c:	2000      	movs	r0, #0
	return dev->data;
   1c38e:	68d2      	ldr	r2, [r2, #12]
   1c390:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c394:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c398:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1c39a:	7d52      	ldrb	r2, [r2, #21]
   1c39c:	700a      	strb	r2, [r1, #0]
   1c39e:	6018      	str	r0, [r3, #0]
}
   1c3a0:	4770      	bx	lr

0001c3a2 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1c3a2:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c3a4:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1c3a6:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1c3a8:	f04f 0020 	mov.w	r0, #32
   1c3ac:	f3ef 8311 	mrs	r3, BASEPRI
   1c3b0:	f380 8811 	msr	BASEPRI, r0
   1c3b4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1c3b8:	2000      	movs	r0, #0
   1c3ba:	68c9      	ldr	r1, [r1, #12]
   1c3bc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1c3be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c3c2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1c3c6:	f383 8811 	msr	BASEPRI, r3
   1c3ca:	f3bf 8f6f 	isb	sy
}
   1c3ce:	4770      	bx	lr

0001c3d0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1c3d0:	2201      	movs	r2, #1
   1c3d2:	68c3      	ldr	r3, [r0, #12]
   1c3d4:	68db      	ldr	r3, [r3, #12]
   1c3d6:	739a      	strb	r2, [r3, #14]
}
   1c3d8:	4770      	bx	lr

0001c3da <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1c3da:	68c3      	ldr	r3, [r0, #12]
   1c3dc:	68db      	ldr	r3, [r3, #12]
   1c3de:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c3e0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1c3e4:	b962      	cbnz	r2, 1c400 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1c3e6:	6842      	ldr	r2, [r0, #4]
   1c3e8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3ea:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1c3ee:	b140      	cbz	r0, 1c402 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1c3f0:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1c3f4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1c3f8:	d003      	beq.n	1c402 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c3fa:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1c3fc:	6119      	str	r1, [r3, #16]
   1c3fe:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c400:	2000      	movs	r0, #0
}
   1c402:	4770      	bx	lr

0001c404 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1c404:	6843      	ldr	r3, [r0, #4]
   1c406:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c408:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1c40c:	3800      	subs	r0, #0
   1c40e:	bf18      	it	ne
   1c410:	2001      	movne	r0, #1
   1c412:	4770      	bx	lr

0001c414 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1c414:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c416:	6843      	ldr	r3, [r0, #4]
   1c418:	681b      	ldr	r3, [r3, #0]
   1c41a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c41e:	4770      	bx	lr

0001c420 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1c420:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c422:	6843      	ldr	r3, [r0, #4]
   1c424:	681b      	ldr	r3, [r3, #0]
   1c426:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c42a:	4770      	bx	lr

0001c42c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1c42c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c430:	6843      	ldr	r3, [r0, #4]
   1c432:	681b      	ldr	r3, [r3, #0]
   1c434:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c438:	4770      	bx	lr

0001c43a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1c43a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c43e:	6843      	ldr	r3, [r0, #4]
   1c440:	681b      	ldr	r3, [r3, #0]
   1c442:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c446:	4770      	bx	lr

0001c448 <uarte_nrfx_irq_update>:
}
   1c448:	2001      	movs	r0, #1
   1c44a:	4770      	bx	lr

0001c44c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1c44c:	68c3      	ldr	r3, [r0, #12]
   1c44e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1c450:	e9c3 1200 	strd	r1, r2, [r3]
}
   1c454:	4770      	bx	lr

0001c456 <uarte_nrfx_irq_is_pending>:
{
   1c456:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1c458:	6843      	ldr	r3, [r0, #4]
{
   1c45a:	4604      	mov	r4, r0
	return config->uarte_regs;
   1c45c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1c45e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1c462:	025b      	lsls	r3, r3, #9
   1c464:	d405      	bmi.n	1c472 <uarte_nrfx_irq_is_pending+0x1c>
   1c466:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c46a:	f010 0010 	ands.w	r0, r0, #16
   1c46e:	d106      	bne.n	1c47e <uarte_nrfx_irq_is_pending+0x28>
}
   1c470:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1c472:	f7ff ffb2 	bl	1c3da <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1c476:	2800      	cmp	r0, #0
   1c478:	d0f5      	beq.n	1c466 <uarte_nrfx_irq_is_pending+0x10>
		||
   1c47a:	2001      	movs	r0, #1
   1c47c:	e7f8      	b.n	1c470 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1c47e:	4620      	mov	r0, r4
   1c480:	f7ff ffc0 	bl	1c404 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1c484:	3800      	subs	r0, #0
   1c486:	bf18      	it	ne
   1c488:	2001      	movne	r0, #1
   1c48a:	e7f1      	b.n	1c470 <uarte_nrfx_irq_is_pending+0x1a>

0001c48c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1c48c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1c48e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c490:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c494:	b938      	cbnz	r0, 1c4a6 <is_tx_ready.isra.0+0x1a>
   1c496:	799b      	ldrb	r3, [r3, #6]
   1c498:	b933      	cbnz	r3, 1c4a8 <is_tx_ready.isra.0+0x1c>
   1c49a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1c49e:	3800      	subs	r0, #0
   1c4a0:	bf18      	it	ne
   1c4a2:	2001      	movne	r0, #1
   1c4a4:	4770      	bx	lr
   1c4a6:	2001      	movs	r0, #1
}
   1c4a8:	4770      	bx	lr

0001c4aa <uarte_nrfx_fifo_fill>:
{
   1c4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1c4ac:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c4ae:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1c4b0:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1c4b2:	68f3      	ldr	r3, [r6, #12]
   1c4b4:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c4b6:	3310      	adds	r3, #16
   1c4b8:	4294      	cmp	r4, r2
   1c4ba:	bfa8      	it	ge
   1c4bc:	4614      	movge	r4, r2
   1c4be:	2201      	movs	r2, #1
   1c4c0:	e8d3 7fef 	ldaex	r7, [r3]
   1c4c4:	2f00      	cmp	r7, #0
   1c4c6:	d104      	bne.n	1c4d2 <uarte_nrfx_fifo_fill+0x28>
   1c4c8:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c4cc:	f1bc 0f00 	cmp.w	ip, #0
   1c4d0:	d1f6      	bne.n	1c4c0 <uarte_nrfx_fifo_fill+0x16>
   1c4d2:	bf0c      	ite	eq
   1c4d4:	4613      	moveq	r3, r2
   1c4d6:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1c4d8:	d01d      	beq.n	1c516 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1c4da:	461c      	mov	r4, r3
}
   1c4dc:	4620      	mov	r0, r4
   1c4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1c4e0:	68f2      	ldr	r2, [r6, #12]
   1c4e2:	5ccf      	ldrb	r7, [r1, r3]
   1c4e4:	6892      	ldr	r2, [r2, #8]
   1c4e6:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1c4e8:	3301      	adds	r3, #1
   1c4ea:	42a3      	cmp	r3, r4
   1c4ec:	dbf8      	blt.n	1c4e0 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1c4ee:	f04f 0320 	mov.w	r3, #32
   1c4f2:	f3ef 8111 	mrs	r1, BASEPRI
   1c4f6:	f383 8811 	msr	BASEPRI, r3
   1c4fa:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1c4fe:	6840      	ldr	r0, [r0, #4]
   1c500:	f7ff ffc4 	bl	1c48c <is_tx_ready.isra.0>
   1c504:	68f3      	ldr	r3, [r6, #12]
   1c506:	b940      	cbnz	r0, 1c51a <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1c508:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1c50a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1c50c:	f381 8811 	msr	BASEPRI, r1
   1c510:	f3bf 8f6f 	isb	sy
	return len;
   1c514:	e7e2      	b.n	1c4dc <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1c516:	2300      	movs	r3, #0
   1c518:	e7e7      	b.n	1c4ea <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c51a:	689b      	ldr	r3, [r3, #8]
   1c51c:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c520:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1c522:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c526:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1c52a:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1c52e:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1c532:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c536:	2301      	movs	r3, #1
   1c538:	60ab      	str	r3, [r5, #8]
}
   1c53a:	e7e7      	b.n	1c50c <uarte_nrfx_fifo_fill+0x62>

0001c53c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1c53c:	6843      	ldr	r3, [r0, #4]
{
   1c53e:	b410      	push	{r4}
	return config->uarte_regs;
   1c540:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1c542:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c546:	05d2      	lsls	r2, r2, #23
   1c548:	d518      	bpl.n	1c57c <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c54a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1c54e:	b1aa      	cbz	r2, 1c57c <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1c550:	f04f 0120 	mov.w	r1, #32
   1c554:	f3ef 8211 	mrs	r2, BASEPRI
   1c558:	f381 8811 	msr	BASEPRI, r1
   1c55c:	f3bf 8f6f 	isb	sy
   1c560:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c564:	b131      	cbz	r1, 1c574 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c566:	2100      	movs	r1, #0
   1c568:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c56c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c570:	2101      	movs	r1, #1
   1c572:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c574:	f382 8811 	msr	BASEPRI, r2
   1c578:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1c57c:	68c2      	ldr	r2, [r0, #12]
   1c57e:	68d2      	ldr	r2, [r2, #12]
   1c580:	b15a      	cbz	r2, 1c59a <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c582:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c586:	b151      	cbz	r1, 1c59e <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1c588:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1c58a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1c58c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1c58e:	b134      	cbz	r4, 1c59e <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1c590:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1c594:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1c598:	7391      	strb	r1, [r2, #14]
}
   1c59a:	bc10      	pop	{r4}
   1c59c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c59e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c5a2:	b121      	cbz	r1, 1c5ae <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5a4:	2100      	movs	r1, #0
   1c5a6:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1c5aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1c5ae:	6813      	ldr	r3, [r2, #0]
   1c5b0:	2b00      	cmp	r3, #0
   1c5b2:	d0f2      	beq.n	1c59a <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c5b4:	6851      	ldr	r1, [r2, #4]
}
   1c5b6:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c5b8:	4718      	bx	r3

0001c5ba <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1c5ba:	2101      	movs	r1, #1
   1c5bc:	f7f9 b9fe 	b.w	159bc <dk_set_led>

0001c5c0 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1c5c0:	2100      	movs	r1, #0
   1c5c2:	f7f9 b9fb 	b.w	159bc <dk_set_led>

0001c5c6 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1c5c6:	f7f9 ba79 	b.w	15abc <SystemCoreClockUpdate>

0001c5ca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c5ca:	4700      	bx	r0

0001c5cc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c5cc:	f000 bcaf 	b.w	1cf2e <z_impl_k_busy_wait>

0001c5d0 <metal_device_open>:
{
   1c5d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c5d2:	460c      	mov	r4, r1
   1c5d4:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1c5d6:	4606      	mov	r6, r0
   1c5d8:	b918      	cbnz	r0, 1c5e2 <metal_device_open+0x12>
		return -EINVAL;
   1c5da:	f06f 0015 	mvn.w	r0, #21
}
   1c5de:	b002      	add	sp, #8
   1c5e0:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1c5e2:	f7fe fabb 	bl	1ab5c <strlen>
   1c5e6:	2800      	cmp	r0, #0
   1c5e8:	d0f7      	beq.n	1c5da <metal_device_open+0xa>
   1c5ea:	2c00      	cmp	r4, #0
   1c5ec:	d0f5      	beq.n	1c5da <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1c5ee:	4620      	mov	r0, r4
   1c5f0:	f7fe fab4 	bl	1ab5c <strlen>
   1c5f4:	2800      	cmp	r0, #0
   1c5f6:	d0f0      	beq.n	1c5da <metal_device_open+0xa>
   1c5f8:	2d00      	cmp	r5, #0
   1c5fa:	d0ee      	beq.n	1c5da <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1c5fc:	4630      	mov	r0, r6
   1c5fe:	a901      	add	r1, sp, #4
   1c600:	f7f9 fd6a 	bl	160d8 <metal_bus_find>
	if (error)
   1c604:	2800      	cmp	r0, #0
   1c606:	d1ea      	bne.n	1c5de <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1c608:	9801      	ldr	r0, [sp, #4]
   1c60a:	6883      	ldr	r3, [r0, #8]
   1c60c:	b11b      	cbz	r3, 1c616 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1c60e:	462a      	mov	r2, r5
   1c610:	4621      	mov	r1, r4
   1c612:	4798      	blx	r3
	if (error)
   1c614:	e7e3      	b.n	1c5de <metal_device_open+0xe>
		return -ENODEV;
   1c616:	f06f 0012 	mvn.w	r0, #18
   1c61a:	e7e0      	b.n	1c5de <metal_device_open+0xe>

0001c61c <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1c61c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c61e:	6804      	ldr	r4, [r0, #0]
   1c620:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c622:	1c66      	adds	r6, r4, #1
   1c624:	d00f      	beq.n	1c646 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c626:	42a9      	cmp	r1, r5
   1c628:	d232      	bcs.n	1c690 <metal_io_block_read+0x74>
		: NULL);
   1c62a:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c62c:	185e      	adds	r6, r3, r1
   1c62e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c630:	bf88      	it	hi
   1c632:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1c634:	6a05      	ldr	r5, [r0, #32]
   1c636:	b155      	cbz	r5, 1c64e <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1c638:	9300      	str	r3, [sp, #0]
   1c63a:	2305      	movs	r3, #5
   1c63c:	47a8      	blx	r5
   1c63e:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1c640:	4618      	mov	r0, r3
   1c642:	b002      	add	sp, #8
   1c644:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c646:	42a9      	cmp	r1, r5
   1c648:	d222      	bcs.n	1c690 <metal_io_block_read+0x74>
   1c64a:	2400      	movs	r4, #0
   1c64c:	e7ee      	b.n	1c62c <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1c64e:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1c652:	4621      	mov	r1, r4
   1c654:	4618      	mov	r0, r3
   1c656:	2800      	cmp	r0, #0
   1c658:	d0f2      	beq.n	1c640 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1c65a:	ea42 0401 	orr.w	r4, r2, r1
   1c65e:	07a4      	lsls	r4, r4, #30
   1c660:	d10a      	bne.n	1c678 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1c662:	2803      	cmp	r0, #3
   1c664:	dc0e      	bgt.n	1c684 <metal_io_block_read+0x68>
   1c666:	3901      	subs	r1, #1
   1c668:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1c66a:	4282      	cmp	r2, r0
   1c66c:	d0e8      	beq.n	1c640 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1c66e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1c672:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1c676:	e7f8      	b.n	1c66a <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1c678:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1c67c:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1c67e:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1c682:	e7e8      	b.n	1c656 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1c684:	f851 4b04 	ldr.w	r4, [r1], #4
   1c688:	3804      	subs	r0, #4
   1c68a:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1c68e:	e7e8      	b.n	1c662 <metal_io_block_read+0x46>
		return -ERANGE;
   1c690:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1c694:	e7d4      	b.n	1c640 <metal_io_block_read+0x24>

0001c696 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1c696:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c698:	6804      	ldr	r4, [r0, #0]
   1c69a:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c69c:	1c66      	adds	r6, r4, #1
   1c69e:	d00e      	beq.n	1c6be <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c6a0:	42a9      	cmp	r1, r5
   1c6a2:	d230      	bcs.n	1c706 <metal_io_block_write+0x70>
		: NULL);
   1c6a4:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c6a6:	185e      	adds	r6, r3, r1
   1c6a8:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c6aa:	bf88      	it	hi
   1c6ac:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1c6ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1c6b0:	b94d      	cbnz	r5, 1c6c6 <metal_io_block_write+0x30>
   1c6b2:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1c6b4:	b991      	cbnz	r1, 1c6dc <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1c6b6:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1c6ba:	4618      	mov	r0, r3
   1c6bc:	e006      	b.n	1c6cc <metal_io_block_write+0x36>
	if (offset >= io->size)
   1c6be:	42a9      	cmp	r1, r5
   1c6c0:	d221      	bcs.n	1c706 <metal_io_block_write+0x70>
   1c6c2:	2400      	movs	r4, #0
   1c6c4:	e7ef      	b.n	1c6a6 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1c6c6:	9300      	str	r3, [sp, #0]
   1c6c8:	2305      	movs	r3, #5
   1c6ca:	47a8      	blx	r5
	}
	return retlen;
}
   1c6cc:	b002      	add	sp, #8
   1c6ce:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1c6d0:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1c6d4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1c6d6:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1c6da:	e7eb      	b.n	1c6b4 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1c6dc:	ea44 0002 	orr.w	r0, r4, r2
   1c6e0:	0780      	lsls	r0, r0, #30
   1c6e2:	d1f5      	bne.n	1c6d0 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c6e4:	2903      	cmp	r1, #3
   1c6e6:	dc08      	bgt.n	1c6fa <metal_io_block_write+0x64>
   1c6e8:	3a01      	subs	r2, #1
   1c6ea:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1c6ec:	428c      	cmp	r4, r1
   1c6ee:	d0e2      	beq.n	1c6b6 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1c6f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1c6f4:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1c6f8:	e7f8      	b.n	1c6ec <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1c6fa:	f852 0b04 	ldr.w	r0, [r2], #4
   1c6fe:	3904      	subs	r1, #4
   1c700:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c704:	e7ee      	b.n	1c6e4 <metal_io_block_write+0x4e>
		return -ERANGE;
   1c706:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1c70a:	e7df      	b.n	1c6cc <metal_io_block_write+0x36>

0001c70c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1c70c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c70e:	6804      	ldr	r4, [r0, #0]
   1c710:	461d      	mov	r5, r3
		: NULL);
   1c712:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c714:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1c716:	d00e      	beq.n	1c736 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c718:	4299      	cmp	r1, r3
   1c71a:	d22d      	bcs.n	1c778 <metal_io_block_set+0x6c>
		: NULL);
   1c71c:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c71e:	186e      	adds	r6, r5, r1
   1c720:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1c722:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1c724:	bf88      	it	hi
   1c726:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1c728:	b186      	cbz	r6, 1c74c <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1c72a:	2305      	movs	r3, #5
   1c72c:	9500      	str	r5, [sp, #0]
   1c72e:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1c730:	4628      	mov	r0, r5
   1c732:	b002      	add	sp, #8
   1c734:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c736:	4299      	cmp	r1, r3
   1c738:	d21e      	bcs.n	1c778 <metal_io_block_set+0x6c>
   1c73a:	2400      	movs	r4, #0
   1c73c:	e7ef      	b.n	1c71e <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1c73e:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1c742:	3b01      	subs	r3, #1
   1c744:	b923      	cbnz	r3, 1c750 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1c746:	f3bf 8f5b 	dmb	ish
   1c74a:	e7f1      	b.n	1c730 <metal_io_block_set+0x24>
   1c74c:	462b      	mov	r3, r5
   1c74e:	e7f9      	b.n	1c744 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1c750:	07a1      	lsls	r1, r4, #30
   1c752:	d1f4      	bne.n	1c73e <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1c754:	0611      	lsls	r1, r2, #24
   1c756:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1c75a:	4311      	orrs	r1, r2
   1c75c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c760:	2b03      	cmp	r3, #3
   1c762:	dc05      	bgt.n	1c770 <metal_io_block_set+0x64>
   1c764:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1c766:	429c      	cmp	r4, r3
   1c768:	d0ed      	beq.n	1c746 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1c76a:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1c76e:	e7fa      	b.n	1c766 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1c770:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c774:	3b04      	subs	r3, #4
   1c776:	e7f3      	b.n	1c760 <metal_io_block_set+0x54>
		return -ERANGE;
   1c778:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1c77c:	e7d8      	b.n	1c730 <metal_io_block_set+0x24>

0001c77e <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1c77e:	2000      	movs	r0, #0
   1c780:	4770      	bx	lr

0001c782 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1c782:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1c784:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1c786:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1c788:	b984      	cbnz	r4, 1c7ac <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1c78a:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1c78c:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1c78e:	291f      	cmp	r1, #31
   1c790:	bf98      	it	ls
   1c792:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1c796:	b165      	cbz	r5, 1c7b2 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1c798:	6881      	ldr	r1, [r0, #8]
   1c79a:	428b      	cmp	r3, r1
   1c79c:	d209      	bcs.n	1c7b2 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1c79e:	6900      	ldr	r0, [r0, #16]
   1c7a0:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1c7a2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1c7a6:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1c7a8:	bc30      	pop	{r4, r5}
   1c7aa:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1c7ac:	4623      	mov	r3, r4
}
   1c7ae:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1c7b0:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1c7b2:	f04f 30ff 	mov.w	r0, #4294967295
   1c7b6:	e7f7      	b.n	1c7a8 <metal_io_phys+0x26>

0001c7b8 <virtqueue_create>:
{
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1c7bc:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1c7be:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1c7c0:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1c7c4:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1c7c6:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1c7c8:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1c7ca:	1c96      	adds	r6, r2, #2
   1c7cc:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1c7ce:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1c7d2:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1c7d6:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1c7d8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1c7dc:	1c6e      	adds	r6, r5, #1
   1c7de:	4433      	add	r3, r6
   1c7e0:	426d      	negs	r5, r5
   1c7e2:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1c7e4:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1c7e6:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1c7e8:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1c7ec:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1c7ee:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1c7f0:	b96b      	cbnz	r3, 1c80e <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1c7f2:	3a01      	subs	r2, #1
   1c7f4:	4293      	cmp	r3, r2
   1c7f6:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1c7fa:	db0a      	blt.n	1c812 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1c7fc:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1c7fe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1c802:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1c806:	7393      	strb	r3, [r2, #14]
   1c808:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c80c:	73d3      	strb	r3, [r2, #15]
}
   1c80e:	2000      	movs	r0, #0
   1c810:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1c812:	3301      	adds	r3, #1
   1c814:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1c816:	e7ed      	b.n	1c7f4 <virtqueue_create+0x3c>

0001c818 <virtqueue_add_buffer>:
{
   1c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1c81c:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1c81e:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1c822:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1c824:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1c826:	46ba      	mov	sl, r7
{
   1c828:	b085      	sub	sp, #20
	needed = readable + writable;
   1c82a:	18d6      	adds	r6, r2, r3
{
   1c82c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1c82e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c830:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1c834:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1c836:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1c838:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1c83a:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1c83c:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1c840:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1c842:	42be      	cmp	r6, r7
   1c844:	dc19      	bgt.n	1c87a <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1c846:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1c848:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1c84a:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1c84c:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1c84e:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1c850:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1c852:	1e51      	subs	r1, r2, #1
   1c854:	885a      	ldrh	r2, [r3, #2]
}
   1c856:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1c858:	400a      	ands	r2, r1
   1c85a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1c85e:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1c862:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1c866:	69e2      	ldr	r2, [r4, #28]
   1c868:	8853      	ldrh	r3, [r2, #2]
   1c86a:	3301      	adds	r3, #1
   1c86c:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1c86e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1c870:	3301      	adds	r3, #1
   1c872:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1c874:	b005      	add	sp, #20
   1c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1c87a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1c87c:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1c87e:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1c882:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1c886:	9302      	str	r3, [sp, #8]
   1c888:	6803      	ldr	r3, [r0, #0]
   1c88a:	9203      	str	r2, [sp, #12]
   1c88c:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1c88e:	6883      	ldr	r3, [r0, #8]
   1c890:	f108 0808 	add.w	r8, r8, #8
   1c894:	4299      	cmp	r1, r3
   1c896:	bf28      	it	cs
   1c898:	f04f 31ff 	movcs.w	r1, #4294967295
   1c89c:	f7ff ff71 	bl	1c782 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1c8a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1c8a4:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1c8a6:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1c8aa:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1c8ae:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1c8b0:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1c8b2:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1c8b6:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1c8b8:	bfb6      	itet	lt
   1c8ba:	2201      	movlt	r2, #1
		dp->flags = 0;
   1c8bc:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1c8c0:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1c8c2:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1c8c4:	bfd8      	it	le
   1c8c6:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1c8c8:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1c8cc:	bfdc      	itt	le
   1c8ce:	f042 0202 	orrle.w	r2, r2, #2
   1c8d2:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1c8d4:	89ed      	ldrh	r5, [r5, #14]
   1c8d6:	e7b4      	b.n	1c842 <virtqueue_add_buffer+0x2a>

0001c8d8 <virtqueue_get_buffer>:
{
   1c8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1c8da:	b350      	cbz	r0, 1c932 <virtqueue_get_buffer+0x5a>
   1c8dc:	6a05      	ldr	r5, [r0, #32]
   1c8de:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1c8e0:	886c      	ldrh	r4, [r5, #2]
   1c8e2:	429c      	cmp	r4, r3
   1c8e4:	d030      	beq.n	1c948 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1c8e6:	1c5c      	adds	r4, r3, #1
   1c8e8:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1c8ea:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1c8ec:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1c8f0:	3c01      	subs	r4, #1
   1c8f2:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1c8f4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1c8f8:	686b      	ldr	r3, [r5, #4]
   1c8fa:	b29e      	uxth	r6, r3
	if (len)
   1c8fc:	b109      	cbz	r1, 1c902 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1c8fe:	68ad      	ldr	r5, [r5, #8]
   1c900:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1c902:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1c906:	b29b      	uxth	r3, r3
   1c908:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1c90c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1c910:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1c912:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1c914:	442f      	add	r7, r5
	dxp->ndescs--;
   1c916:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1c918:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1c91a:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1c91c:	898d      	ldrh	r5, [r1, #12]
   1c91e:	076f      	lsls	r7, r5, #29
   1c920:	d50e      	bpl.n	1c940 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1c922:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1c924:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1c926:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1c928:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1c92a:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1c92c:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1c92e:	b102      	cbz	r2, 1c932 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1c930:	8014      	strh	r4, [r2, #0]
}
   1c932:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1c934:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1c936:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1c938:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1c93a:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1c93e:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1c940:	898d      	ldrh	r5, [r1, #12]
   1c942:	07ed      	lsls	r5, r5, #31
   1c944:	d4f6      	bmi.n	1c934 <virtqueue_get_buffer+0x5c>
   1c946:	e7ec      	b.n	1c922 <virtqueue_get_buffer+0x4a>
		return NULL;
   1c948:	2000      	movs	r0, #0
   1c94a:	e7f2      	b.n	1c932 <virtqueue_get_buffer+0x5a>

0001c94c <virtqueue_get_available_buffer>:
{
   1c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1c950:	f3bf 8f5b 	dmb	ish
{
   1c954:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1c956:	69c2      	ldr	r2, [r0, #28]
{
   1c958:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1c95a:	8853      	ldrh	r3, [r2, #2]
   1c95c:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1c95e:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1c960:	428b      	cmp	r3, r1
   1c962:	d045      	beq.n	1c9f0 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1c964:	1c4b      	adds	r3, r1, #1
   1c966:	8603      	strh	r3, [r0, #48]	; 0x30
   1c968:	8943      	ldrh	r3, [r0, #10]
   1c96a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1c96e:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1c970:	400b      	ands	r3, r1
   1c972:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1c976:	889a      	ldrh	r2, [r3, #4]
   1c978:	b293      	uxth	r3, r2
   1c97a:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1c97c:	6982      	ldr	r2, [r0, #24]
   1c97e:	011b      	lsls	r3, r3, #4
   1c980:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1c984:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1c988:	bb5b      	cbnz	r3, 1c9e2 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1c98a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1c98e:	1c62      	adds	r2, r4, #1
   1c990:	bf09      	itett	eq
   1c992:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1c996:	ea09 0404 	andne.w	r4, r9, r4
   1c99a:	681c      	ldreq	r4, [r3, #0]
   1c99c:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1c9a0:	4621      	mov	r1, r4
   1c9a2:	4640      	mov	r0, r8
   1c9a4:	f7ff feed 	bl	1c782 <metal_io_phys>
   1c9a8:	4581      	cmp	r9, r0
   1c9aa:	d009      	beq.n	1c9c0 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1c9ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1c9b0:	3301      	adds	r3, #1
   1c9b2:	441c      	add	r4, r3
		} while (offset < io->size);
   1c9b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c9b8:	429c      	cmp	r4, r3
   1c9ba:	d3f1      	bcc.n	1c9a0 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1c9bc:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9c0:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1c9c4:	1c43      	adds	r3, r0, #1
   1c9c6:	d011      	beq.n	1c9ec <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c9cc:	42a3      	cmp	r3, r4
   1c9ce:	d90d      	bls.n	1c9ec <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1c9d0:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1c9d2:	8832      	ldrh	r2, [r6, #0]
   1c9d4:	69ab      	ldr	r3, [r5, #24]
   1c9d6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1c9da:	689b      	ldr	r3, [r3, #8]
   1c9dc:	603b      	str	r3, [r7, #0]
}
   1c9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1c9e2:	4649      	mov	r1, r9
   1c9e4:	4640      	mov	r0, r8
   1c9e6:	4798      	blx	r3
   1c9e8:	4604      	mov	r4, r0
   1c9ea:	e7e9      	b.n	1c9c0 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1c9ec:	2000      	movs	r0, #0
   1c9ee:	e7f0      	b.n	1c9d2 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1c9f0:	2000      	movs	r0, #0
   1c9f2:	e7f4      	b.n	1c9de <virtqueue_get_available_buffer+0x92>

0001c9f4 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1c9f4:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1c9f6:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1c9f8:	6912      	ldr	r2, [r2, #16]
   1c9fa:	0092      	lsls	r2, r2, #2
   1c9fc:	d515      	bpl.n	1ca2a <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1c9fe:	b94b      	cbnz	r3, 1ca14 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1ca00:	69c2      	ldr	r2, [r0, #28]
   1ca02:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1ca04:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1ca06:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1ca08:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1ca0c:	1a1b      	subs	r3, r3, r0
   1ca0e:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1ca10:	8093      	strh	r3, [r2, #4]
   1ca12:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1ca14:	2b01      	cmp	r3, #1
   1ca16:	d10e      	bne.n	1ca36 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1ca18:	6a02      	ldr	r2, [r0, #32]
   1ca1a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1ca1c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1ca1e:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1ca20:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1ca24:	1a1b      	subs	r3, r3, r0
   1ca26:	3b01      	subs	r3, #1
   1ca28:	e7f2      	b.n	1ca10 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1ca2a:	b92b      	cbnz	r3, 1ca38 <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1ca2c:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1ca2e:	8813      	ldrh	r3, [r2, #0]
   1ca30:	f043 0301 	orr.w	r3, r3, #1
   1ca34:	8013      	strh	r3, [r2, #0]
}
   1ca36:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1ca38:	2b01      	cmp	r3, #1
   1ca3a:	d1fc      	bne.n	1ca36 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1ca3c:	6a02      	ldr	r2, [r0, #32]
   1ca3e:	e7f6      	b.n	1ca2e <virtqueue_disable_cb+0x3a>

0001ca40 <virtqueue_kick>:
{
   1ca40:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1ca42:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1ca46:	6803      	ldr	r3, [r0, #0]
{
   1ca48:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1ca4a:	691a      	ldr	r2, [r3, #16]
   1ca4c:	699b      	ldr	r3, [r3, #24]
   1ca4e:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1ca52:	d019      	beq.n	1ca88 <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ca54:	b97b      	cbnz	r3, 1ca76 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1ca56:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1ca58:	6a02      	ldr	r2, [r0, #32]
   1ca5a:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1ca5c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1ca5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1ca62:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1ca64:	1a9b      	subs	r3, r3, r2
   1ca66:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1ca68:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1ca6a:	b29b      	uxth	r3, r3
   1ca6c:	429a      	cmp	r2, r3
   1ca6e:	d813      	bhi.n	1ca98 <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1ca70:	2300      	movs	r3, #0
   1ca72:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1ca74:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1ca76:	2b01      	cmp	r3, #1
   1ca78:	d1fa      	bne.n	1ca70 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1ca7a:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1ca7c:	69c2      	ldr	r2, [r0, #28]
   1ca7e:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1ca80:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1ca82:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1ca86:	e7ec      	b.n	1ca62 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1ca88:	b963      	cbnz	r3, 1caa4 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1ca8a:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1ca8c:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1ca8e:	43db      	mvns	r3, r3
   1ca90:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1ca94:	2b00      	cmp	r3, #0
   1ca96:	d0eb      	beq.n	1ca70 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1ca98:	6923      	ldr	r3, [r4, #16]
   1ca9a:	2b00      	cmp	r3, #0
   1ca9c:	d0e8      	beq.n	1ca70 <virtqueue_kick+0x30>
		vq->notify(vq);
   1ca9e:	4620      	mov	r0, r4
   1caa0:	4798      	blx	r3
   1caa2:	e7e5      	b.n	1ca70 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1caa4:	2b01      	cmp	r3, #1
   1caa6:	d1e3      	bne.n	1ca70 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1caa8:	69c3      	ldr	r3, [r0, #28]
   1caaa:	e7ef      	b.n	1ca8c <virtqueue_kick+0x4c>

0001caac <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1caac:	69c2      	ldr	r2, [r0, #28]
   1caae:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1cab0:	8853      	ldrh	r3, [r2, #2]
   1cab2:	428b      	cmp	r3, r1
   1cab4:	d00a      	beq.n	1cacc <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1cab6:	8943      	ldrh	r3, [r0, #10]
   1cab8:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1caba:	400b      	ands	r3, r1
   1cabc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1cac0:	889a      	ldrh	r2, [r3, #4]
   1cac2:	6983      	ldr	r3, [r0, #24]
   1cac4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cac8:	6898      	ldr	r0, [r3, #8]
	return len;
   1caca:	4770      	bx	lr
		return 0;
   1cacc:	2000      	movs	r0, #0
}
   1cace:	4770      	bx	lr

0001cad0 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1cad0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1cad4:	68c3      	ldr	r3, [r0, #12]
   1cad6:	b103      	cbz	r3, 1cada <virtqueue_notification+0xa>
		vq->callback(vq);
   1cad8:	4718      	bx	r3
}
   1cada:	4770      	bx	lr

0001cadc <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1cadc:	f04f 32ff 	mov.w	r2, #4294967295
   1cae0:	f04f 33ff 	mov.w	r3, #4294967295
   1cae4:	f7fb bc94 	b.w	18410 <z_impl_k_sem_take>

0001cae8 <rpmsg_unregister_endpoint>:
{
   1cae8:	b570      	push	{r4, r5, r6, lr}
   1caea:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1caec:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1caee:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1caf2:	4630      	mov	r0, r6
   1caf4:	f7ff fff2 	bl	1cadc <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1caf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cafa:	1c5a      	adds	r2, r3, #1
   1cafc:	d010      	beq.n	1cb20 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1cafe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1cb02:	2b7f      	cmp	r3, #127	; 0x7f
   1cb04:	d80c      	bhi.n	1cb20 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cb06:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cb08:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1cb0a:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cb0c:	f003 031f 	and.w	r3, r3, #31
   1cb10:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cb14:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1cb18:	ea22 0203 	bic.w	r2, r2, r3
   1cb1c:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1cb20:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1cb24:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1cb28:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1cb2a:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1cb2c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1cb30:	2300      	movs	r3, #0
   1cb32:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1cb34:	4630      	mov	r0, r6
}
   1cb36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cb3a:	f7fb bc2d 	b.w	18398 <z_impl_k_sem_give>

0001cb3e <rpmsg_send_ns_message>:
{
   1cb3e:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1cb40:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1cb42:	b08c      	sub	sp, #48	; 0x30
   1cb44:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1cb46:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cb48:	2220      	movs	r2, #32
   1cb4a:	4601      	mov	r1, r0
   1cb4c:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1cb4e:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cb50:	f7fd fff2 	bl	1ab38 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1cb54:	2328      	movs	r3, #40	; 0x28
   1cb56:	2201      	movs	r2, #1
   1cb58:	4620      	mov	r0, r4
   1cb5a:	e9cd 3200 	strd	r3, r2, [sp]
   1cb5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cb60:	2235      	movs	r2, #53	; 0x35
   1cb62:	ab02      	add	r3, sp, #8
   1cb64:	f7f9 fbe4 	bl	16330 <rpmsg_send_offchannel_raw>
}
   1cb68:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1cb6c:	b00c      	add	sp, #48	; 0x30
   1cb6e:	bd10      	pop	{r4, pc}

0001cb70 <rpmsg_get_endpoint>:
{
   1cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb74:	4680      	mov	r8, r0
   1cb76:	4689      	mov	r9, r1
   1cb78:	4615      	mov	r5, r2
   1cb7a:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1cb7c:	6807      	ldr	r7, [r0, #0]
   1cb7e:	45b8      	cmp	r8, r7
   1cb80:	d101      	bne.n	1cb86 <rpmsg_get_endpoint+0x16>
	return NULL;
   1cb82:	2400      	movs	r4, #0
   1cb84:	e021      	b.n	1cbca <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1cb86:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1cb88:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1cb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cb8e:	d006      	beq.n	1cb9e <rpmsg_get_endpoint+0x2e>
   1cb90:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1cb92:	d01a      	beq.n	1cbca <rpmsg_get_endpoint+0x5a>
		if (name)
   1cb94:	f1b9 0f00 	cmp.w	r9, #0
   1cb98:	d106      	bne.n	1cba8 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1cb9a:	683f      	ldr	r7, [r7, #0]
   1cb9c:	e7ef      	b.n	1cb7e <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1cb9e:	3301      	adds	r3, #1
   1cba0:	d1f8      	bne.n	1cb94 <rpmsg_get_endpoint+0x24>
   1cba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cba4:	42b3      	cmp	r3, r6
   1cba6:	e7f4      	b.n	1cb92 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1cba8:	2220      	movs	r2, #32
   1cbaa:	4649      	mov	r1, r9
   1cbac:	4620      	mov	r0, r4
   1cbae:	f7fd fff1 	bl	1ab94 <strncmp>
		if (!name || !name_match)
   1cbb2:	2800      	cmp	r0, #0
   1cbb4:	d1f1      	bne.n	1cb9a <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1cbb6:	1c72      	adds	r2, r6, #1
   1cbb8:	d002      	beq.n	1cbc0 <rpmsg_get_endpoint+0x50>
   1cbba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cbbc:	42b3      	cmp	r3, r6
   1cbbe:	d004      	beq.n	1cbca <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1cbc0:	1c6b      	adds	r3, r5, #1
   1cbc2:	d1ea      	bne.n	1cb9a <rpmsg_get_endpoint+0x2a>
   1cbc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cbc6:	3301      	adds	r3, #1
   1cbc8:	d1e7      	bne.n	1cb9a <rpmsg_get_endpoint+0x2a>
}
   1cbca:	4620      	mov	r0, r4
   1cbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cbd0 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1cbd0:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1cbd2:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1cbd6:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1cbda:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1cbdc:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1cbde:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1cbe0:	6013      	str	r3, [r2, #0]
}
   1cbe2:	4770      	bx	lr

0001cbe4 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1cbe4:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1cbe6:	4604      	mov	r4, r0
   1cbe8:	b190      	cbz	r0, 1cc10 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1cbea:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1cbec:	b183      	cbz	r3, 1cc10 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1cbee:	7802      	ldrb	r2, [r0, #0]
   1cbf0:	b14a      	cbz	r2, 1cc06 <rpmsg_destroy_ept+0x22>
   1cbf2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1cbf6:	b133      	cbz	r3, 1cc06 <rpmsg_destroy_ept+0x22>
   1cbf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1cbfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1cbfe:	d302      	bcc.n	1cc06 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1cc00:	2101      	movs	r1, #1
   1cc02:	f7ff ff9c 	bl	1cb3e <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1cc06:	4620      	mov	r0, r4
}
   1cc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1cc0c:	f7ff bf6c 	b.w	1cae8 <rpmsg_unregister_endpoint>
}
   1cc10:	bd10      	pop	{r4, pc}

0001cc12 <rpmsg_virtio_tx_callback>:
}
   1cc12:	4770      	bx	lr

0001cc14 <k_sem_give>:
   1cc14:	f7fb bbc0 	b.w	18398 <z_impl_k_sem_give>

0001cc18 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1cc18:	f04f 32ff 	mov.w	r2, #4294967295
   1cc1c:	f04f 33ff 	mov.w	r3, #4294967295
   1cc20:	f7fb bbf6 	b.w	18410 <z_impl_k_sem_take>

0001cc24 <rpmsg_virtio_ns_callback>:
{
   1cc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1cc28:	2a28      	cmp	r2, #40	; 0x28
{
   1cc2a:	4680      	mov	r8, r0
   1cc2c:	460e      	mov	r6, r1
   1cc2e:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1cc30:	d12b      	bne.n	1cc8a <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1cc32:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1cc34:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1cc36:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1cc3a:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1cc3c:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1cc3e:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1cc40:	1a71      	subs	r1, r6, r1
   1cc42:	42a1      	cmp	r1, r4
   1cc44:	bf28      	it	cs
   1cc46:	f04f 31ff 	movcs.w	r1, #4294967295
   1cc4a:	f7ff fce7 	bl	1c61c <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1cc4e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1cc52:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1cc56:	4638      	mov	r0, r7
   1cc58:	f7ff ffde 	bl	1cc18 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1cc5c:	464b      	mov	r3, r9
   1cc5e:	f04f 32ff 	mov.w	r2, #4294967295
   1cc62:	4669      	mov	r1, sp
   1cc64:	4628      	mov	r0, r5
   1cc66:	f7ff ff83 	bl	1cb70 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1cc6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1cc6c:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1cc6e:	07db      	lsls	r3, r3, #31
   1cc70:	d50f      	bpl.n	1cc92 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1cc72:	b110      	cbz	r0, 1cc7a <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1cc74:	f04f 33ff 	mov.w	r3, #4294967295
   1cc78:	6283      	str	r3, [r0, #40]	; 0x28
   1cc7a:	4638      	mov	r0, r7
   1cc7c:	f7ff ffca 	bl	1cc14 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1cc80:	b11c      	cbz	r4, 1cc8a <rpmsg_virtio_ns_callback+0x66>
   1cc82:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cc84:	b10b      	cbz	r3, 1cc8a <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1cc86:	4640      	mov	r0, r8
   1cc88:	4798      	blx	r3
}
   1cc8a:	2000      	movs	r0, #0
   1cc8c:	b009      	add	sp, #36	; 0x24
   1cc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1cc92:	b950      	cbnz	r0, 1ccaa <rpmsg_virtio_ns_callback+0x86>
   1cc94:	4638      	mov	r0, r7
   1cc96:	f7ff ffbd 	bl	1cc14 <k_sem_give>
			if (rdev->ns_bind_cb)
   1cc9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1cc9c:	2b00      	cmp	r3, #0
   1cc9e:	d0f4      	beq.n	1cc8a <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1cca0:	464a      	mov	r2, r9
   1cca2:	4669      	mov	r1, sp
   1cca4:	4628      	mov	r0, r5
   1cca6:	4798      	blx	r3
   1cca8:	e7ef      	b.n	1cc8a <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1ccaa:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1ccae:	4638      	mov	r0, r7
   1ccb0:	f7ff ffb0 	bl	1cc14 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1ccb4:	e7e9      	b.n	1cc8a <rpmsg_virtio_ns_callback+0x66>

0001ccb6 <rpmsg_virtio_get_rx_buffer>:
{
   1ccb6:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1ccb8:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1ccba:	4613      	mov	r3, r2
   1ccbc:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1ccbe:	b925      	cbnz	r5, 1ccca <rpmsg_virtio_get_rx_buffer+0x14>
}
   1ccc0:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1ccc2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1ccc6:	f7ff be07 	b.w	1c8d8 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1ccca:	2d01      	cmp	r5, #1
   1cccc:	d106      	bne.n	1ccdc <rpmsg_virtio_get_rx_buffer+0x26>
}
   1ccce:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1ccd0:	460a      	mov	r2, r1
   1ccd2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1ccd6:	4619      	mov	r1, r3
   1ccd8:	f7ff be38 	b.w	1c94c <virtqueue_get_available_buffer>
}
   1ccdc:	2000      	movs	r0, #0
   1ccde:	bc30      	pop	{r4, r5}
   1cce0:	4770      	bx	lr

0001cce2 <rpmsg_virtio_rx_callback>:
{
   1cce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1cce6:	6803      	ldr	r3, [r0, #0]
{
   1cce8:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1ccea:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1ccec:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1ccf0:	4638      	mov	r0, r7
   1ccf2:	f7ff ff91 	bl	1cc18 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1ccf6:	4630      	mov	r0, r6
   1ccf8:	f10d 020a 	add.w	r2, sp, #10
   1ccfc:	a903      	add	r1, sp, #12
   1ccfe:	f7ff ffda 	bl	1ccb6 <rpmsg_virtio_get_rx_buffer>
   1cd02:	4604      	mov	r4, r0
   1cd04:	4638      	mov	r0, r7
   1cd06:	f7ff ff85 	bl	1cc14 <k_sem_give>
	while (rp_hdr) {
   1cd0a:	b914      	cbnz	r4, 1cd12 <rpmsg_virtio_rx_callback+0x30>
}
   1cd0c:	b006      	add	sp, #24
   1cd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd12:	4638      	mov	r0, r7
   1cd14:	f7ff ff80 	bl	1cc18 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1cd18:	f04f 33ff 	mov.w	r3, #4294967295
   1cd1c:	2100      	movs	r1, #0
   1cd1e:	4630      	mov	r0, r6
   1cd20:	6862      	ldr	r2, [r4, #4]
   1cd22:	f7ff ff25 	bl	1cb70 <rpmsg_get_endpoint>
   1cd26:	4605      	mov	r5, r0
   1cd28:	4638      	mov	r0, r7
   1cd2a:	f7ff ff73 	bl	1cc14 <k_sem_give>
		if (ept) {
   1cd2e:	b185      	cbz	r5, 1cd52 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1cd30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1cd32:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1cd34:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1cd36:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1cd38:	bf08      	it	eq
   1cd3a:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1cd3c:	89a2      	ldrh	r2, [r4, #12]
   1cd3e:	9100      	str	r1, [sp, #0]
   1cd40:	4628      	mov	r0, r5
   1cd42:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1cd46:	f104 0110 	add.w	r1, r4, #16
   1cd4a:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1cd4c:	2800      	cmp	r0, #0
   1cd4e:	da00      	bge.n	1cd52 <rpmsg_virtio_rx_callback+0x70>
   1cd50:	e7fe      	b.n	1cd50 <rpmsg_virtio_rx_callback+0x6e>
   1cd52:	4638      	mov	r0, r7
   1cd54:	f7ff ff60 	bl	1cc18 <__metal_mutex_acquire>
   1cd58:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1cd5a:	9b03      	ldr	r3, [sp, #12]
   1cd5c:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1cd5e:	b9b2      	cbnz	r2, 1cd8e <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1cd60:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1cd62:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1cd66:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1cd6a:	2301      	movs	r3, #1
   1cd6c:	a904      	add	r1, sp, #16
   1cd6e:	f7ff fd53 	bl	1c818 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1cd72:	4630      	mov	r0, r6
   1cd74:	f10d 020a 	add.w	r2, sp, #10
   1cd78:	a903      	add	r1, sp, #12
   1cd7a:	f7ff ff9c 	bl	1ccb6 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1cd7e:	4604      	mov	r4, r0
   1cd80:	2800      	cmp	r0, #0
   1cd82:	d1bf      	bne.n	1cd04 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1cd84:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1cd88:	f7ff fe5a 	bl	1ca40 <virtqueue_kick>
   1cd8c:	e7ba      	b.n	1cd04 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1cd8e:	2a01      	cmp	r2, #1
   1cd90:	d1ef      	bne.n	1cd72 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1cd92:	461a      	mov	r2, r3
   1cd94:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1cd98:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1cd9c:	f7f9 faac 	bl	162f8 <virtqueue_add_consumed_buffer>
   1cda0:	e7e7      	b.n	1cd72 <rpmsg_virtio_rx_callback+0x90>

0001cda2 <_rpmsg_virtio_get_buffer_size>:
{
   1cda2:	b508      	push	{r3, lr}
   1cda4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1cda6:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1cda8:	b14b      	cbz	r3, 1cdbe <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1cdaa:	2b01      	cmp	r3, #1
   1cdac:	d10a      	bne.n	1cdc4 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1cdae:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1cdb2:	f7ff fe7b 	bl	1caac <virtqueue_get_desc_size>
   1cdb6:	3810      	subs	r0, #16
   1cdb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1cdbc:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1cdbe:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1cdc2:	e7fb      	b.n	1cdbc <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1cdc4:	2000      	movs	r0, #0
	return length;
   1cdc6:	e7f9      	b.n	1cdbc <_rpmsg_virtio_get_buffer_size+0x1a>

0001cdc8 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1cdc8:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1cdca:	6842      	ldr	r2, [r0, #4]
{
   1cdcc:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1cdce:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1cdd0:	bf29      	itett	cs
   1cdd2:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1cdd4:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1cdd6:	1a84      	subcs	r4, r0, r2
   1cdd8:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1cdda:	bf22      	ittt	cs
   1cddc:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1cdde:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1cde0:	605a      	strcs	r2, [r3, #4]
}
   1cde2:	bd10      	pop	{r4, pc}

0001cde4 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1cde4:	b110      	cbz	r0, 1cdec <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1cde6:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1cdea:	6001      	str	r1, [r0, #0]
}
   1cdec:	4770      	bx	lr

0001cdee <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1cdee:	f7fd b846 	b.w	19e7e <z_clock_idle_exit>

0001cdf2 <k_heap_init>:
{
   1cdf2:	b410      	push	{r4}
   1cdf4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1cdf8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1cdfc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1cdfe:	f7ed baaf 	b.w	a360 <sys_heap_init>

0001ce02 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1ce02:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ce06:	428b      	cmp	r3, r1
   1ce08:	d001      	beq.n	1ce0e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1ce0a:	f7fb b893 	b.w	17f34 <z_set_prio>
}
   1ce0e:	2000      	movs	r0, #0
   1ce10:	4770      	bx	lr

0001ce12 <z_impl_k_mutex_init>:
{
   1ce12:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1ce14:	2000      	movs	r0, #0
   1ce16:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1ce1a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1ce1e:	4770      	bx	lr

0001ce20 <z_queue_node_peek>:
{
   1ce20:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1ce22:	4604      	mov	r4, r0
   1ce24:	b130      	cbz	r0, 1ce34 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ce26:	6802      	ldr	r2, [r0, #0]
   1ce28:	0793      	lsls	r3, r2, #30
   1ce2a:	d003      	beq.n	1ce34 <z_queue_node_peek+0x14>
		ret = anode->data;
   1ce2c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ce2e:	b109      	cbz	r1, 1ce34 <z_queue_node_peek+0x14>
			k_free(anode);
   1ce30:	f000 f982 	bl	1d138 <k_free>
}
   1ce34:	4620      	mov	r0, r4
   1ce36:	bd10      	pop	{r4, pc}

0001ce38 <z_impl_k_queue_init>:
	list->head = NULL;
   1ce38:	2300      	movs	r3, #0
	list->tail = NULL;
   1ce3a:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1ce3e:	6083      	str	r3, [r0, #8]
   1ce40:	f100 030c 	add.w	r3, r0, #12
   1ce44:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1ce48:	f100 0314 	add.w	r3, r0, #20
   1ce4c:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1ce50:	4770      	bx	lr

0001ce52 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1ce52:	2301      	movs	r3, #1
{
   1ce54:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1ce56:	9300      	str	r3, [sp, #0]
   1ce58:	2300      	movs	r3, #0
{
   1ce5a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1ce5c:	4619      	mov	r1, r3
   1ce5e:	f7fa f951 	bl	17104 <queue_insert>
}
   1ce62:	b003      	add	sp, #12
   1ce64:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce68 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1ce68:	2300      	movs	r3, #0
{
   1ce6a:	b507      	push	{r0, r1, r2, lr}
   1ce6c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1ce6e:	9300      	str	r3, [sp, #0]
   1ce70:	4619      	mov	r1, r3
   1ce72:	f7fa f947 	bl	17104 <queue_insert>
}
   1ce76:	b003      	add	sp, #12
   1ce78:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce7c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1ce7c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1ce80:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1ce84:	4298      	cmp	r0, r3
   1ce86:	bfac      	ite	ge
   1ce88:	2000      	movge	r0, #0
   1ce8a:	2001      	movlt	r0, #1
   1ce8c:	4770      	bx	lr

0001ce8e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ce8e:	4603      	mov	r3, r0
   1ce90:	b920      	cbnz	r0, 1ce9c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ce92:	f3ef 8205 	mrs	r2, IPSR
   1ce96:	b90a      	cbnz	r2, 1ce9c <z_reschedule_irqlock+0xe>
   1ce98:	f7ef bdc4 	b.w	ca24 <arch_swap>
   1ce9c:	f383 8811 	msr	BASEPRI, r3
   1cea0:	f3bf 8f6f 	isb	sy
}
   1cea4:	4770      	bx	lr

0001cea6 <z_reschedule_unlocked>:
	__asm__ volatile(
   1cea6:	f04f 0320 	mov.w	r3, #32
   1ceaa:	f3ef 8011 	mrs	r0, BASEPRI
   1ceae:	f383 8811 	msr	BASEPRI, r3
   1ceb2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ceb6:	f7ff bfea 	b.w	1ce8e <z_reschedule_irqlock>

0001ceba <unpend_thread_no_timeout>:
{
   1ceba:	b510      	push	{r4, lr}
   1cebc:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1cebe:	f7fa fa5b 	bl	17378 <pended_on>
   1cec2:	4621      	mov	r1, r4
   1cec4:	f7fa fb60 	bl	17588 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1cec8:	7b63      	ldrb	r3, [r4, #13]
   1ceca:	f023 0302 	bic.w	r3, r3, #2
   1cece:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1ced0:	2300      	movs	r3, #0
   1ced2:	60a3      	str	r3, [r4, #8]
}
   1ced4:	bd10      	pop	{r4, pc}

0001ced6 <z_priq_dumb_best>:
{
   1ced6:	4603      	mov	r3, r0
	return list->head == list;
   1ced8:	6800      	ldr	r0, [r0, #0]
}
   1ceda:	4283      	cmp	r3, r0
   1cedc:	bf08      	it	eq
   1cede:	2000      	moveq	r0, #0
   1cee0:	4770      	bx	lr

0001cee2 <z_unpend_all>:
{
   1cee2:	b538      	push	{r3, r4, r5, lr}
   1cee4:	4605      	mov	r5, r0
	int need_sched = 0;
   1cee6:	2000      	movs	r0, #0
   1cee8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ceea:	42a5      	cmp	r5, r4
   1ceec:	d000      	beq.n	1cef0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ceee:	b904      	cbnz	r4, 1cef2 <z_unpend_all+0x10>
}
   1cef0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1cef2:	4620      	mov	r0, r4
   1cef4:	f7fa fb74 	bl	175e0 <z_unpend_thread>
		z_ready_thread(thread);
   1cef8:	4620      	mov	r0, r4
   1cefa:	f7fa fc8b 	bl	17814 <z_ready_thread>
		need_sched = 1;
   1cefe:	2001      	movs	r0, #1
   1cf00:	e7f2      	b.n	1cee8 <z_unpend_all+0x6>

0001cf02 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1cf02:	b15a      	cbz	r2, 1cf1c <z_impl_k_sem_init+0x1a>
   1cf04:	428a      	cmp	r2, r1
   1cf06:	d309      	bcc.n	1cf1c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1cf08:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1cf0c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1cf10:	e9c0 0000 	strd	r0, r0, [r0]
   1cf14:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1cf18:	2000      	movs	r0, #0
   1cf1a:	4770      	bx	lr
		return -EINVAL;
   1cf1c:	f06f 0015 	mvn.w	r0, #21
}
   1cf20:	4770      	bx	lr

0001cf22 <k_is_in_isr>:
   1cf22:	f3ef 8005 	mrs	r0, IPSR
}
   1cf26:	3800      	subs	r0, #0
   1cf28:	bf18      	it	ne
   1cf2a:	2001      	movne	r0, #1
   1cf2c:	4770      	bx	lr

0001cf2e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1cf2e:	b108      	cbz	r0, 1cf34 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1cf30:	f7ed be60 	b.w	abf4 <arch_busy_wait>
}
   1cf34:	4770      	bx	lr

0001cf36 <z_impl_k_thread_name_set>:
}
   1cf36:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1cf3a:	4770      	bx	lr

0001cf3c <k_thread_name_get>:
}
   1cf3c:	2000      	movs	r0, #0
   1cf3e:	4770      	bx	lr

0001cf40 <k_work_submit_to_queue>:
{
   1cf40:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cf42:	f101 0308 	add.w	r3, r1, #8
   1cf46:	e8d3 2fef 	ldaex	r2, [r3]
   1cf4a:	f042 0c01 	orr.w	ip, r2, #1
   1cf4e:	e8c3 cfee 	stlex	lr, ip, [r3]
   1cf52:	f1be 0f00 	cmp.w	lr, #0
   1cf56:	d1f6      	bne.n	1cf46 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1cf58:	07d3      	lsls	r3, r2, #31
   1cf5a:	d403      	bmi.n	1cf64 <k_work_submit_to_queue+0x24>
}
   1cf5c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1cf60:	f7ff bf77 	b.w	1ce52 <k_queue_append>
}
   1cf64:	f85d fb04 	ldr.w	pc, [sp], #4

0001cf68 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1cf68:	f1a0 0110 	sub.w	r1, r0, #16
   1cf6c:	6980      	ldr	r0, [r0, #24]
   1cf6e:	f7ff bfe7 	b.w	1cf40 <k_work_submit_to_queue>

0001cf72 <work_cancel>:
{
   1cf72:	b570      	push	{r4, r5, r6, lr}
   1cf74:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1cf76:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf7a:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1cf7e:	07db      	lsls	r3, r3, #31
   1cf80:	d52f      	bpl.n	1cfe2 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1cf82:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1cf84:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1cf86:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1cf88:	b913      	cbnz	r3, 1cf90 <work_cancel+0x1e>
			return -EINVAL;
   1cf8a:	f06f 0015 	mvn.w	r0, #21
}
   1cf8e:	bd70      	pop	{r4, r5, r6, pc}
   1cf90:	429c      	cmp	r4, r3
   1cf92:	d121      	bne.n	1cfd8 <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cf94:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1cf96:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cf98:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1cf9c:	b991      	cbnz	r1, 1cfc4 <work_cancel+0x52>
   1cf9e:	42b4      	cmp	r4, r6
	list->head = node;
   1cfa0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1cfa2:	d100      	bne.n	1cfa6 <work_cancel+0x34>
	list->tail = node;
   1cfa4:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cfa6:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfa8:	f003 0303 	and.w	r3, r3, #3
   1cfac:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1cfae:	2000      	movs	r0, #0
   1cfb0:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cfb2:	e8d5 3fef 	ldaex	r3, [r5]
   1cfb6:	f023 0301 	bic.w	r3, r3, #1
   1cfba:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1cfbe:	2a00      	cmp	r2, #0
   1cfc0:	d0e5      	beq.n	1cf8e <work_cancel+0x1c>
   1cfc2:	e7f6      	b.n	1cfb2 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cfc4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1cfc6:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfc8:	f003 0303 	and.w	r3, r3, #3
   1cfcc:	ea43 0300 	orr.w	r3, r3, r0
   1cfd0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1cfd2:	bf08      	it	eq
   1cfd4:	6051      	streq	r1, [r2, #4]
}
   1cfd6:	e7e6      	b.n	1cfa6 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cfd8:	6818      	ldr	r0, [r3, #0]
   1cfda:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1cfdc:	f020 0303 	bic.w	r3, r0, #3
   1cfe0:	e7d2      	b.n	1cf88 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1cfe2:	3010      	adds	r0, #16
   1cfe4:	f7fb fe08 	bl	18bf8 <z_abort_timeout>
		if (err) {
   1cfe8:	2800      	cmp	r0, #0
   1cfea:	d0e0      	beq.n	1cfae <work_cancel+0x3c>
			return -EALREADY;
   1cfec:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1cff0:	e7cd      	b.n	1cf8e <work_cancel+0x1c>

0001cff2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1cff2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1cff4:	f7fb ff4e 	bl	18e94 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1cff8:	bd08      	pop	{r3, pc}

0001cffa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1cffa:	f7fb bf4b 	b.w	18e94 <z_tick_get>

0001cffe <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cffe:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d002:	bf08      	it	eq
   1d004:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d008:	b538      	push	{r3, r4, r5, lr}
   1d00a:	4605      	mov	r5, r0
   1d00c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d00e:	d01d      	beq.n	1d04c <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d010:	ea51 0300 	orrs.w	r3, r1, r0
   1d014:	d103      	bne.n	1d01e <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1d016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1d01a:	f7fb bf3b 	b.w	18e94 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d01e:	f06f 0301 	mvn.w	r3, #1
   1d022:	1a18      	subs	r0, r3, r0
   1d024:	f04f 33ff 	mov.w	r3, #4294967295
   1d028:	eb63 0101 	sbc.w	r1, r3, r1
   1d02c:	2900      	cmp	r1, #0
   1d02e:	da0c      	bge.n	1d04a <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1d030:	f7fb ff30 	bl	18e94 <z_tick_get>
   1d034:	2d01      	cmp	r5, #1
   1d036:	4622      	mov	r2, r4
   1d038:	f174 0400 	sbcs.w	r4, r4, #0
   1d03c:	462b      	mov	r3, r5
   1d03e:	bfbc      	itt	lt
   1d040:	2301      	movlt	r3, #1
   1d042:	2200      	movlt	r2, #0
   1d044:	1818      	adds	r0, r3, r0
   1d046:	eb41 0102 	adc.w	r1, r1, r2
}
   1d04a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1d04c:	f04f 30ff 	mov.w	r0, #4294967295
   1d050:	4601      	mov	r1, r0
   1d052:	e7fa      	b.n	1d04a <z_timeout_end_calc+0x4c>

0001d054 <k_work_submit_to_queue>:
{
   1d054:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d056:	f101 0308 	add.w	r3, r1, #8
   1d05a:	e8d3 2fef 	ldaex	r2, [r3]
   1d05e:	f042 0c01 	orr.w	ip, r2, #1
   1d062:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d066:	f1be 0f00 	cmp.w	lr, #0
   1d06a:	d1f6      	bne.n	1d05a <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d06c:	07d3      	lsls	r3, r2, #31
   1d06e:	d403      	bmi.n	1d078 <k_work_submit_to_queue+0x24>
}
   1d070:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d074:	f7ff beed 	b.w	1ce52 <k_queue_append>
}
   1d078:	f85d fb04 	ldr.w	pc, [sp], #4

0001d07c <add_event>:
{
   1d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d07e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d080:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d084:	4290      	cmp	r0, r2
   1d086:	4604      	mov	r4, r0
   1d088:	460d      	mov	r5, r1
   1d08a:	d106      	bne.n	1d09a <add_event+0x1e>
	node->prev = list->tail;
   1d08c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1d08e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1d090:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1d092:	6863      	ldr	r3, [r4, #4]
   1d094:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d096:	6065      	str	r5, [r4, #4]
}
   1d098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d09a:	2b00      	cmp	r3, #0
   1d09c:	d0f6      	beq.n	1d08c <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d09e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d0a0:	b100      	cbz	r0, 1d0a4 <add_event+0x28>
   1d0a2:	386c      	subs	r0, #108	; 0x6c
   1d0a4:	b107      	cbz	r7, 1d0a8 <add_event+0x2c>
   1d0a6:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d0a8:	4639      	mov	r1, r7
   1d0aa:	f7ff fee7 	bl	1ce7c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1d0ae:	2800      	cmp	r0, #0
   1d0b0:	d1ec      	bne.n	1d08c <add_event+0x10>
	return list->head == list;
   1d0b2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d0b4:	42b4      	cmp	r4, r6
   1d0b6:	d0e9      	beq.n	1d08c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d0b8:	2e00      	cmp	r6, #0
   1d0ba:	d0e7      	beq.n	1d08c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d0bc:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d0be:	b101      	cbz	r1, 1d0c2 <add_event+0x46>
   1d0c0:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d0c2:	4638      	mov	r0, r7
   1d0c4:	f7ff feda 	bl	1ce7c <z_is_t1_higher_prio_than_t2>
   1d0c8:	b128      	cbz	r0, 1d0d6 <add_event+0x5a>
	node->prev = successor->prev;
   1d0ca:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d0cc:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1d0d0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d0d2:	6075      	str	r5, [r6, #4]
			return;
   1d0d4:	e7e0      	b.n	1d098 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1d0d6:	6863      	ldr	r3, [r4, #4]
   1d0d8:	429e      	cmp	r6, r3
   1d0da:	d0d7      	beq.n	1d08c <add_event+0x10>
   1d0dc:	6836      	ldr	r6, [r6, #0]
   1d0de:	e7eb      	b.n	1d0b8 <add_event+0x3c>

0001d0e0 <z_handle_obj_poll_events>:
{
   1d0e0:	4603      	mov	r3, r0
	return list->head == list;
   1d0e2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d0e4:	4283      	cmp	r3, r0
   1d0e6:	d008      	beq.n	1d0fa <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1d0e8:	e9d0 3200 	ldrd	r3, r2, [r0]
   1d0ec:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d0ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d0f0:	2300      	movs	r3, #0
	node->prev = NULL;
   1d0f2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d0f6:	f7fb bf0b 	b.w	18f10 <signal_poll_event>
}
   1d0fa:	4770      	bx	lr

0001d0fc <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d0fc:	2904      	cmp	r1, #4
{
   1d0fe:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d102:	460d      	mov	r5, r1
   1d104:	bf38      	it	cc
   1d106:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d108:	1952      	adds	r2, r2, r5
{
   1d10a:	4606      	mov	r6, r0
   1d10c:	d209      	bcs.n	1d122 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1d10e:	f04f 0800 	mov.w	r8, #0
   1d112:	f04f 0900 	mov.w	r9, #0
   1d116:	e9cd 8900 	strd	r8, r9, [sp]
   1d11a:	f7f9 fce5 	bl	16ae8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d11e:	4604      	mov	r4, r0
   1d120:	b918      	cbnz	r0, 1d12a <z_heap_aligned_alloc+0x2e>
		return NULL;
   1d122:	2000      	movs	r0, #0
}
   1d124:	b002      	add	sp, #8
   1d126:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1d12a:	462a      	mov	r2, r5
   1d12c:	21ff      	movs	r1, #255	; 0xff
   1d12e:	f7fd fd7e 	bl	1ac2e <memset>
	*heap_ref = heap;
   1d132:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1d134:	1960      	adds	r0, r4, r5
   1d136:	e7f5      	b.n	1d124 <z_heap_aligned_alloc+0x28>

0001d138 <k_free>:
	if (ptr != NULL) {
   1d138:	b138      	cbz	r0, 1d14a <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d13a:	1f03      	subs	r3, r0, #4
   1d13c:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1d13e:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d142:	1c42      	adds	r2, r0, #1
   1d144:	d0fa      	beq.n	1d13c <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1d146:	f7f9 bd57 	b.w	16bf8 <k_heap_free>
}
   1d14a:	4770      	bx	lr

0001d14c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1d14c:	4770      	bx	lr
