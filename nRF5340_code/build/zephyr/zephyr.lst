
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	38 25 01 20 11 de 00 00 25 bd 01 00 41 de 00 00     8%. ....%...A...
    8010:	41 de 00 00 41 de 00 00 41 de 00 00 41 de 00 00     A...A...A...A...
	...
    802c:	d9 db 00 00 41 de 00 00 00 00 00 00 7d db 00 00     ....A.......}...
    803c:	15 c6 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8050:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8060:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8070:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8080:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8090:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    80a0:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    80b0:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    80c0:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    80d0:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    80e0:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    80f0:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8100:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8110:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8120:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8130:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8140:	d1 dd 00 00 d1 dd 00 00 d1 dd 00 00 d1 dd 00 00     ................
    8150:	d1 dd 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	04 b1 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN4Data9calcSpeedEv>:

    return retVal;
}

uint16_t Data::calcSpeed() 
{
    8e48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4604      	mov	r4, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	8963      	ldrh	r3, [r4, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d103      	bne.n	8e5e <_ZN4Data9calcSpeedEv+0x16>
            speed = (rpm_speed * wheelCircumference) * 60 / 1000; // km/h * 100 for the values after the comma
            retVal = (uint16_t) (speed);
            return retVal;
        }  
    }
    return 0;
    8e56:	2000      	movs	r0, #0
    8e58:	b002      	add	sp, #8
    8e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e5e:	8825      	ldrh	r5, [r4, #0]
    8e60:	8862      	ldrh	r2, [r4, #2]
    8e62:	1aad      	subs	r5, r5, r2
    8e64:	b2ad      	uxth	r5, r5
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e66:	2d00      	cmp	r5, #0
    8e68:	d0f5      	beq.n	8e56 <_ZN4Data9calcSpeedEv+0xe>
        wheelCircumference = wheelDiameter;
    8e6a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e6e:	1ac0      	subs	r0, r0, r3
        wheelCircumference = wheelDiameter;
    8e70:	e9cd 1200 	strd	r1, r2, [sp]
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e74:	f7ff fb36 	bl	84e4 <__aeabi_i2d>
    8e78:	2200      	movs	r2, #0
    8e7a:	4b35      	ldr	r3, [pc, #212]	; (8f50 <_ZN4Data9calcSpeedEv+0x108>)
    8e7c:	f7ff fb9c 	bl	85b8 <__aeabi_dmul>
    8e80:	4606      	mov	r6, r0
    8e82:	460f      	mov	r7, r1
        cntNbr++;
    8e84:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8f54 <_ZN4Data9calcSpeedEv+0x10c>
        totalTime += time;
    8e88:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8f58 <_ZN4Data9calcSpeedEv+0x110>
        cntNbr++;
    8e8c:	f89a 8000 	ldrb.w	r8, [sl]
        totalTime += time;
    8e90:	f8b9 0000 	ldrh.w	r0, [r9]
        cntNbr++;
    8e94:	f108 0801 	add.w	r8, r8, #1
    8e98:	fa5f f888 	uxtb.w	r8, r8
    8e9c:	f88a 8000 	strb.w	r8, [sl]
        totalTime += time;
    8ea0:	f7ff fb20 	bl	84e4 <__aeabi_i2d>
    8ea4:	4632      	mov	r2, r6
    8ea6:	463b      	mov	r3, r7
    8ea8:	f7ff f9d0 	bl	824c <__adddf3>
    8eac:	f7ff fe1e 	bl	8aec <__aeabi_d2uiz>
        if (cntNbr == 30)
    8eb0:	f1b8 0f1e 	cmp.w	r8, #30
        totalTime += time;
    8eb4:	b281      	uxth	r1, r0
    8eb6:	f8a9 1000 	strh.w	r1, [r9]
        if (cntNbr == 30)
    8eba:	d108      	bne.n	8ece <_ZN4Data9calcSpeedEv+0x86>
            cntNbr = 0;
    8ebc:	f04f 0800 	mov.w	r8, #0
            printk("Total time is: %d\n",totalTime);
    8ec0:	4826      	ldr	r0, [pc, #152]	; (8f5c <_ZN4Data9calcSpeedEv+0x114>)
            cntNbr = 0;
    8ec2:	f88a 8000 	strb.w	r8, [sl]
            printk("Total time is: %d\n",totalTime);
    8ec6:	f011 fde1 	bl	1aa8c <printk>
            totalTime = 0;
    8eca:	f8a9 8000 	strh.w	r8, [r9]
        if (time < 0)
    8ece:	2200      	movs	r2, #0
    8ed0:	2300      	movs	r3, #0
    8ed2:	4630      	mov	r0, r6
    8ed4:	4639      	mov	r1, r7
    8ed6:	f7ff fde1 	bl	8a9c <__aeabi_dcmplt>
    8eda:	b150      	cbz	r0, 8ef2 <_ZN4Data9calcSpeedEv+0xaa>
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8edc:	8920      	ldrh	r0, [r4, #8]
    8ede:	8963      	ldrh	r3, [r4, #10]
    8ee0:	f500 407f 	add.w	r0, r0, #65280	; 0xff00
    8ee4:	30ff      	adds	r0, #255	; 0xff
    8ee6:	1ac0      	subs	r0, r0, r3
    8ee8:	1280      	asrs	r0, r0, #10
    8eea:	f7ff fafb 	bl	84e4 <__aeabi_i2d>
    8eee:	4606      	mov	r6, r0
    8ef0:	460f      	mov	r7, r1
        if (sumRevSpeed == oldSumRevSpeed)
    8ef2:	8822      	ldrh	r2, [r4, #0]
    8ef4:	8863      	ldrh	r3, [r4, #2]
    8ef6:	429a      	cmp	r2, r3
    8ef8:	d0ad      	beq.n	8e56 <_ZN4Data9calcSpeedEv+0xe>
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8efa:	203c      	movs	r0, #60	; 0x3c
    8efc:	4368      	muls	r0, r5
    8efe:	f7ff faf1 	bl	84e4 <__aeabi_i2d>
    8f02:	4632      	mov	r2, r6
    8f04:	463b      	mov	r3, r7
    8f06:	f7ff fc81 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * PI;
    8f0a:	a30f      	add	r3, pc, #60	; (adr r3, 8f48 <_ZN4Data9calcSpeedEv+0x100>)
    8f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8f10:	4606      	mov	r6, r0
    8f12:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * PI;
    8f14:	e9dd 0100 	ldrd	r0, r1, [sp]
    8f18:	f7ff fb4e 	bl	85b8 <__aeabi_dmul>
    8f1c:	4602      	mov	r2, r0
    8f1e:	460b      	mov	r3, r1
            speed = (rpm_speed * wheelCircumference) * 60 / 1000; // km/h * 100 for the values after the comma
    8f20:	4630      	mov	r0, r6
    8f22:	4639      	mov	r1, r7
    8f24:	f7ff fb48 	bl	85b8 <__aeabi_dmul>
    8f28:	2200      	movs	r2, #0
    8f2a:	4b0d      	ldr	r3, [pc, #52]	; (8f60 <_ZN4Data9calcSpeedEv+0x118>)
    8f2c:	f7ff fb44 	bl	85b8 <__aeabi_dmul>
    8f30:	2200      	movs	r2, #0
    8f32:	4b0c      	ldr	r3, [pc, #48]	; (8f64 <_ZN4Data9calcSpeedEv+0x11c>)
    8f34:	f7ff fc6a 	bl	880c <__aeabi_ddiv>
    8f38:	4602      	mov	r2, r0
    8f3a:	460b      	mov	r3, r1
    8f3c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
            retVal = (uint16_t) (speed);
    8f40:	f7ff fdd4 	bl	8aec <__aeabi_d2uiz>
    8f44:	b280      	uxth	r0, r0
            return retVal;
    8f46:	e787      	b.n	8e58 <_ZN4Data9calcSpeedEv+0x10>
    8f48:	4d12d84a 	.word	0x4d12d84a
    8f4c:	400921fb 	.word	0x400921fb
    8f50:	3f500000 	.word	0x3f500000
    8f54:	2000e363 	.word	0x2000e363
    8f58:	2000e2d6 	.word	0x2000e2d6
    8f5c:	0001f7bd 	.word	0x0001f7bd
    8f60:	404e0000 	.word	0x404e0000
    8f64:	408f4000 	.word	0x408f4000

00008f68 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
			  uint8_t flags)
{
    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f68:	2b01      	cmp	r3, #1
{
    8f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f6e:	4607      	mov	r7, r0
    8f70:	4688      	mov	r8, r1
    8f72:	4614      	mov	r4, r2
    8f74:	461e      	mov	r6, r3
    if (len == 1)
    8f76:	d125      	bne.n	8fc4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f78:	7815      	ldrb	r5, [r2, #0]
    8f7a:	4b4b      	ldr	r3, [pc, #300]	; (90a8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f7c:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f7e:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f80:	f7ff fab0 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f84:	062b      	lsls	r3, r5, #24
    8f86:	d503      	bpl.n	8f90 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f88:	2200      	movs	r2, #0
    8f8a:	4b48      	ldr	r3, [pc, #288]	; (90ac <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f8c:	f7ff f95e 	bl	824c <__adddf3>
        }
        else 
        {
            dia = diameter * 2.54;
    8f90:	a343      	add	r3, pc, #268	; (adr r3, 90a0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f92:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f96:	f7ff fb0f 	bl	85b8 <__aeabi_dmul>
    8f9a:	4b45      	ldr	r3, [pc, #276]	; (90b0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f9c:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8fa0:	463a      	mov	r2, r7
    8fa2:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8fa6:	4843      	ldr	r0, [pc, #268]	; (90b4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8fa8:	f011 fd70 	bl	1aa8c <printk>
    8fac:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++)
    {
        printk("%02X", buffer[i]);
    8fae:	4f42      	ldr	r7, [pc, #264]	; (90b8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++)
    8fb0:	1c5d      	adds	r5, r3, #1
    8fb2:	b2db      	uxtb	r3, r3
    8fb4:	42b3      	cmp	r3, r6
    8fb6:	da6c      	bge.n	9092 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8fb8:	5ce1      	ldrb	r1, [r4, r3]
    8fba:	4638      	mov	r0, r7
    8fbc:	f011 fd66 	bl	1aa8c <printk>
    for(uint8_t i = 0; i < len; i++)
    8fc0:	462b      	mov	r3, r5
    8fc2:	e7f5      	b.n	8fb0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8fc4:	2b13      	cmp	r3, #19
    8fc6:	d1eb      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8fc8:	7c53      	ldrb	r3, [r2, #17]
    8fca:	4a3c      	ldr	r2, [pc, #240]	; (90bc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8fcc:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8fce:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8fd0:	4a3b      	ldr	r2, [pc, #236]	; (90c0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8fd2:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8fd4:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8fd6:	d00e      	beq.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8fd8:	2b03      	cmp	r3, #3
    8fda:	d02e      	beq.n	903a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8fdc:	2b01      	cmp	r3, #1
    8fde:	d1df      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fe0:	4a38      	ldr	r2, [pc, #224]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8fec:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8ff4:	e7d4      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8ff6:	4b34      	ldr	r3, [pc, #208]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8ff8:	781d      	ldrb	r5, [r3, #0]
    8ffa:	3501      	adds	r5, #1
    8ffc:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8ffe:	2d01      	cmp	r5, #1
            cntAddresses++;
    9000:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    9002:	d10a      	bne.n	901a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    9004:	4a2f      	ldr	r2, [pc, #188]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    9006:	1e63      	subs	r3, r4, #1
    9008:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    900c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9010:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    9012:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9016:	d1f9      	bne.n	900c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    9018:	e7c2      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    901a:	2d02      	cmp	r5, #2
    901c:	d1c0      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    901e:	4a2b      	ldr	r2, [pc, #172]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    9020:	1e63      	subs	r3, r4, #1
    9022:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9026:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    902a:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    902c:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9030:	d1f9      	bne.n	9026 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    9032:	2200      	movs	r2, #0
    9034:	4b24      	ldr	r3, [pc, #144]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    9036:	701a      	strb	r2, [r3, #0]
    9038:	e7b2      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    903a:	4b23      	ldr	r3, [pc, #140]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    903c:	781d      	ldrb	r5, [r3, #0]
    903e:	3501      	adds	r5, #1
    9040:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    9042:	2d01      	cmp	r5, #1
            cntAddresses++;
    9044:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    9046:	d10a      	bne.n	905e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    9048:	4a1e      	ldr	r2, [pc, #120]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    904a:	1e63      	subs	r3, r4, #1
    904c:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9050:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9054:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    9056:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    905a:	d1f9      	bne.n	9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    905c:	e7a0      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    905e:	2d02      	cmp	r5, #2
    9060:	d10a      	bne.n	9078 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    9062:	4a1a      	ldr	r2, [pc, #104]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    9064:	1e63      	subs	r3, r4, #1
    9066:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    906a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    906e:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9070:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9074:	d1f9      	bne.n	906a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    9076:	e793      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9078:	2d03      	cmp	r5, #3
    907a:	d191      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    907c:	4a14      	ldr	r2, [pc, #80]	; (90d0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    907e:	1e63      	subs	r3, r4, #1
    9080:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9084:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9088:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    908a:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    908e:	d1f9      	bne.n	9084 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9090:	e7cf      	b.n	9032 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    9092:	4810      	ldr	r0, [pc, #64]	; (90d4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    9094:	f011 fcfa 	bl	1aa8c <printk>
 	return len;
}
    9098:	4630      	mov	r0, r6
    909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    909e:	bf00      	nop
    90a0:	851eb852 	.word	0x851eb852
    90a4:	400451eb 	.word	0x400451eb
    90a8:	2000e578 	.word	0x2000e578
    90ac:	3fe00000 	.word	0x3fe00000
    90b0:	200086f0 	.word	0x200086f0
    90b4:	0001f7d0 	.word	0x0001f7d0
    90b8:	0001f7fc 	.word	0x0001f7fc
    90bc:	2000e57a 	.word	0x2000e57a
    90c0:	2000e579 	.word	0x2000e579
    90c4:	2000e364 	.word	0x2000e364
    90c8:	2000e397 	.word	0x2000e397
    90cc:	2000e375 	.word	0x2000e375
    90d0:	2000e386 	.word	0x2000e386
    90d4:	000227e7 	.word	0x000227e7

000090d8 <main>:
 */

#include "DeviceManager.h"

void main(void)
{
    90d8:	b500      	push	{lr}

	printk("Application start\n");
    90da:	4807      	ldr	r0, [pc, #28]	; (90f8 <main+0x20>)
{
    90dc:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    90de:	f011 fcd5 	bl	1aa8c <printk>

	// create a new device manager
	DeviceManager dManager;
    90e2:	4668      	mov	r0, sp
    90e4:	f000 fb6e 	bl	97c4 <_ZN13DeviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    90e8:	2201      	movs	r2, #1
    90ea:	4668      	mov	r0, sp
    90ec:	4611      	mov	r1, r2
    90ee:	f000 fe13 	bl	9d18 <_ZN13DeviceManager9setDeviceEbb>
    90f2:	b011      	add	sp, #68	; 0x44
    90f4:	f85d fb04 	ldr.w	pc, [sp], #4
    90f8:	0001f150 	.word	0x0001f150

000090fc <_ZN13DeviceManager13app_button_cbEv>:
}

bool DeviceManager::app_button_cb(void)
{
    return app_button_state;
}
    90fc:	4b01      	ldr	r3, [pc, #4]	; (9104 <_ZN13DeviceManager13app_button_cbEv+0x8>)
    90fe:	7818      	ldrb	r0, [r3, #0]
    9100:	4770      	bx	lr
    9102:	bf00      	nop
    9104:	2000e31e 	.word	0x2000e31e

00009108 <_ZN13DeviceManager21discovery_error_foundEP7bt_conniPv>:
	bt_conn_disconnect(conn,100);
}

void DeviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    9108:	4801      	ldr	r0, [pc, #4]	; (9110 <_ZN13DeviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    910a:	f011 bcbf 	b.w	1aa8c <printk>
    910e:	bf00      	nop
    9110:	0001f163 	.word	0x0001f163

00009114 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
}


void DeviceManager::discoveryCompletedHR(struct bt_gatt_dm *dm, void *ctx) 
{
    9114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9118:	4604      	mov	r4, r0
	uint8_t err;

	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    911a:	f012 f8d9 	bl	1b2d0 <bt_gatt_dm_conn_get>
    911e:	4607      	mov	r7, r0

	printk("The discovery procedure succeeded\n");
    9120:	4858      	ldr	r0, [pc, #352]	; (9284 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x170>)
    9122:	f011 fcb3 	bl	1aa8c <printk>

	bt_gatt_dm_data_print(dm);

	// Heart rate characteristic 
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    9126:	4620      	mov	r0, r4
    9128:	4957      	ldr	r1, [pc, #348]	; (9288 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x174>)
    912a:	f003 fd7f 	bl	cc2c <bt_gatt_dm_char_by_uuid>

	if (!gatt_chrc) 
    912e:	4605      	mov	r5, r0
    9130:	b928      	cbnz	r0, 913e <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x2a>
	{
		printk("No heart rate measurement characteristic found\n");
    9132:	4856      	ldr	r0, [pc, #344]	; (928c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x178>)
		break;
	default:
		break;
	}
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
}
    9134:	b003      	add	sp, #12
    9136:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		printk("No heart rate CCC descriptor found. "
    913a:	f011 bca7 	b.w	1aa8c <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_HRS_MEASUREMENT);
    913e:	4601      	mov	r1, r0
    9140:	4a53      	ldr	r2, [pc, #332]	; (9290 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x17c>)
    9142:	4620      	mov	r0, r4
    9144:	f012 f913 	bl	1b36e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) 
    9148:	b908      	cbnz	r0, 914e <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x3a>
		printk("No heat rate measurement characteristic value found\n");
    914a:	4852      	ldr	r0, [pc, #328]	; (9294 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x180>)
    914c:	e7f2      	b.n	9134 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    914e:	f04f 0918 	mov.w	r9, #24
    9152:	4e51      	ldr	r6, [pc, #324]	; (9298 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x184>)
    9154:	f8df 8144 	ldr.w	r8, [pc, #324]	; 929c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x188>
    9158:	7832      	ldrb	r2, [r6, #0]
    915a:	8883      	ldrh	r3, [r0, #4]
    915c:	3a01      	subs	r2, #1
    915e:	fb09 8202 	mla	r2, r9, r2, r8
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9162:	4629      	mov	r1, r5
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    9164:	8113      	strh	r3, [r2, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9166:	4620      	mov	r0, r4
    9168:	4a4d      	ldr	r2, [pc, #308]	; (92a0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x18c>)
    916a:	f012 f900 	bl	1b36e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) 
    916e:	b908      	cbnz	r0, 9174 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x60>
		printk("No heart rate CCC descriptor found. "
    9170:	484c      	ldr	r0, [pc, #304]	; (92a4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x190>)
    9172:	e7df      	b.n	9134 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].notify = notify_HR;
    9174:	7833      	ldrb	r3, [r6, #0]
    9176:	4a4c      	ldr	r2, [pc, #304]	; (92a8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x194>)
    9178:	3b01      	subs	r3, #1
    917a:	fb09 f303 	mul.w	r3, r9, r3
    917e:	eb08 0103 	add.w	r1, r8, r3
    9182:	f848 2003 	str.w	r2, [r8, r3]
	subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    9186:	2301      	movs	r3, #1
    9188:	818b      	strh	r3, [r1, #12]
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    918a:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    918c:	4638      	mov	r0, r7
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    918e:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    9190:	f00b ff84 	bl	1509c <bt_gatt_subscribe>
	if (err && err != -EALREADY) 
    9194:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9198:	d02a      	beq.n	91f0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xdc>
		printk("Subscribe failed (err %d)\n", err);
    919a:	4844      	ldr	r0, [pc, #272]	; (92ac <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x198>)
    919c:	f011 fc76 	bl	1aa8c <printk>
	err = bt_gatt_dm_data_release(dm);
    91a0:	4620      	mov	r0, r4
    91a2:	f012 f8f6 	bl	1b392 <bt_gatt_dm_data_release>
	if (err) 
    91a6:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    91aa:	d002      	beq.n	91b2 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9e>
		printk("Could not release the discovery data (err %d)\n", err);
    91ac:	4840      	ldr	r0, [pc, #256]	; (92b0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x19c>)
    91ae:	f011 fc6d 	bl	1aa8c <printk>
	subscriptionDone = true;
    91b2:	2501      	movs	r5, #1
	switch (nbrConnectionsCentral)
    91b4:	7834      	ldrb	r4, [r6, #0]
	subscriptionDone = true;
    91b6:	4b3f      	ldr	r3, [pc, #252]	; (92b4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1a0>)
	switch (nbrConnectionsCentral)
    91b8:	2c02      	cmp	r4, #2
	subscriptionDone = true;
    91ba:	701d      	strb	r5, [r3, #0]
	switch (nbrConnectionsCentral)
    91bc:	d01c      	beq.n	91f8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xe4>
    91be:	2c03      	cmp	r4, #3
    91c0:	d045      	beq.n	924e <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x13a>
    91c2:	42ac      	cmp	r4, r5
    91c4:	d10e      	bne.n	91e4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xd0>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    91c6:	4620      	mov	r0, r4
    91c8:	f014 faca 	bl	1d760 <dk_set_led_on>
		connectedCode[0] = 16;
    91cc:	2310      	movs	r3, #16
    91ce:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    91d2:	4b39      	ldr	r3, [pc, #228]	; (92b8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1a4>)
    91d4:	4622      	mov	r2, r4
    91d6:	6818      	ldr	r0, [r3, #0]
    91d8:	a901      	add	r1, sp, #4
    91da:	f001 f929 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
		printk("Discovery completed\n");
    91de:	4837      	ldr	r0, [pc, #220]	; (92bc <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1a8>)
    91e0:	f011 fc54 	bl	1aa8c <printk>
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
    91e4:	2001      	movs	r0, #1
    91e6:	f014 fabb 	bl	1d760 <dk_set_led_on>
}
    91ea:	b003      	add	sp, #12
    91ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printk("[SUBSCRIBED]\n");
    91f0:	4833      	ldr	r0, [pc, #204]	; (92c0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1ac>)
    91f2:	f011 fc4b 	bl	1aa8c <printk>
    91f6:	e7d3      	b.n	91a0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
		printk("Second discovery completed\n");
    91f8:	4832      	ldr	r0, [pc, #200]	; (92c4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1b0>)
    91fa:	f011 fc47 	bl	1aa8c <printk>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    91fe:	4628      	mov	r0, r5
    9200:	f014 faae 	bl	1d760 <dk_set_led_on>
		if (sensorInfos == 5)
    9204:	4b30      	ldr	r3, [pc, #192]	; (92c8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1b4>)
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	2b05      	cmp	r3, #5
    920a:	d114      	bne.n	9236 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x122>
			if (reconnectedHeartRate)
    920c:	4b2f      	ldr	r3, [pc, #188]	; (92cc <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1b8>)
    920e:	781a      	ldrb	r2, [r3, #0]
    9210:	b13a      	cbz	r2, 9222 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x10e>
				if (batterySubscriptionDone)
    9212:	4a2f      	ldr	r2, [pc, #188]	; (92d0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1bc>)
    9214:	7812      	ldrb	r2, [r2, #0]
    9216:	b11a      	cbz	r2, 9220 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x10c>
					reconnectedHeartRate = false;
    9218:	2200      	movs	r2, #0
    921a:	701a      	strb	r2, [r3, #0]
					connectedCode[0] = 24;
    921c:	2318      	movs	r3, #24
    921e:	e001      	b.n	9224 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x110>
					reconnectedHeartRate = false;
    9220:	701a      	strb	r2, [r3, #0]
				connectedCode[0] = 22;	
    9222:	2316      	movs	r3, #22
				connectedCode[0] = 20;
    9224:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9228:	4b23      	ldr	r3, [pc, #140]	; (92b8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1a4>)
    922a:	2201      	movs	r2, #1
    922c:	6818      	ldr	r0, [r3, #0]
    922e:	a901      	add	r1, sp, #4
    9230:	f001 f8fe 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    9234:	e7d6      	b.n	91e4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xd0>
		else if (sensorInfos == 6)
    9236:	2b06      	cmp	r3, #6
    9238:	d1d4      	bne.n	91e4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xd0>
			if (reconnectedHeartRate)
    923a:	4b24      	ldr	r3, [pc, #144]	; (92cc <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1b8>)
    923c:	781a      	ldrb	r2, [r3, #0]
    923e:	b122      	cbz	r2, 924a <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x136>
				if (batterySubscriptionDone)
    9240:	4a23      	ldr	r2, [pc, #140]	; (92d0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1bc>)
    9242:	7812      	ldrb	r2, [r2, #0]
    9244:	2a00      	cmp	r2, #0
    9246:	d1e7      	bne.n	9218 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x104>
					reconnectedHeartRate = false;
    9248:	701a      	strb	r2, [r3, #0]
				connectedCode[0] = 20;
    924a:	2314      	movs	r3, #20
    924c:	e7ea      	b.n	9224 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x110>
		if (reconnectedHeartRate)
    924e:	4b1f      	ldr	r3, [pc, #124]	; (92cc <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1b8>)
    9250:	781a      	ldrb	r2, [r3, #0]
    9252:	b1aa      	cbz	r2, 9280 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x16c>
			if (batterySubscriptionDone)
    9254:	4a1e      	ldr	r2, [pc, #120]	; (92d0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1bc>)
    9256:	7812      	ldrb	r2, [r2, #0]
    9258:	b18a      	cbz	r2, 927e <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x16a>
				reconnectedHeartRate = false;
    925a:	2200      	movs	r2, #0
    925c:	701a      	strb	r2, [r3, #0]
				connectedCode[0] = 24;
    925e:	2318      	movs	r3, #24
			connectedCode[0] = 23;
    9260:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9264:	4b14      	ldr	r3, [pc, #80]	; (92b8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1a4>)
    9266:	2201      	movs	r2, #1
    9268:	6818      	ldr	r0, [r3, #0]
    926a:	a901      	add	r1, sp, #4
    926c:	f001 f8e0 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
		printk("Third discovery completed\n");
    9270:	4818      	ldr	r0, [pc, #96]	; (92d4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1c0>)
    9272:	f011 fc0b 	bl	1aa8c <printk>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9276:	2001      	movs	r0, #1
    9278:	f014 fa72 	bl	1d760 <dk_set_led_on>
		break;
    927c:	e7b2      	b.n	91e4 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xd0>
				reconnectedHeartRate = false;
    927e:	701a      	strb	r2, [r3, #0]
			connectedCode[0] = 23;
    9280:	2317      	movs	r3, #23
    9282:	e7ed      	b.n	9260 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x14c>
    9284:	0001f18b 	.word	0x0001f18b
    9288:	0001f0c8 	.word	0x0001f0c8
    928c:	0001f1ae 	.word	0x0001f1ae
    9290:	0001f0cc 	.word	0x0001f0cc
    9294:	0001f1de 	.word	0x0001f1de
    9298:	2000e322 	.word	0x2000e322
    929c:	2000999c 	.word	0x2000999c
    92a0:	0001f0d0 	.word	0x0001f0d0
    92a4:	0001f213 	.word	0x0001f213
    92a8:	00009311 	.word	0x00009311
    92ac:	0001f26c 	.word	0x0001f26c
    92b0:	0001f295 	.word	0x0001f295
    92b4:	2000e31f 	.word	0x2000e31f
    92b8:	20009998 	.word	0x20009998
    92bc:	0001f2c4 	.word	0x0001f2c4
    92c0:	0001f287 	.word	0x0001f287
    92c4:	0001f2d9 	.word	0x0001f2d9
    92c8:	2000e318 	.word	0x2000e318
    92cc:	2000e321 	.word	0x2000e321
    92d0:	2000e324 	.word	0x2000e324
    92d4:	0001f2f5 	.word	0x0001f2f5

000092d8 <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv>:
{
    92d8:	b513      	push	{r0, r1, r4, lr}
    92da:	4604      	mov	r4, r0
	printk("Service not found!\n");
    92dc:	4809      	ldr	r0, [pc, #36]	; (9304 <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    92de:	f011 fbd5 	bl	1aa8c <printk>
	serviceNotFound = true;
    92e2:	2201      	movs	r2, #1
    92e4:	4b08      	ldr	r3, [pc, #32]	; (9308 <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv+0x30>)
	data_service_send(peripheralConn,error, sizeof(error));
    92e6:	a901      	add	r1, sp, #4
	serviceNotFound = true;
    92e8:	701a      	strb	r2, [r3, #0]
	error[0] = 10;
    92ea:	230a      	movs	r3, #10
    92ec:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    92f0:	4b06      	ldr	r3, [pc, #24]	; (930c <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv+0x34>)
    92f2:	6818      	ldr	r0, [r3, #0]
    92f4:	f001 f89c 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,100);
    92f8:	2164      	movs	r1, #100	; 0x64
    92fa:	4620      	mov	r0, r4
    92fc:	f008 fc7c 	bl	11bf8 <bt_conn_disconnect>
}
    9300:	b002      	add	sp, #8
    9302:	bd10      	pop	{r4, pc}
    9304:	0001f310 	.word	0x0001f310
    9308:	2000e31d 	.word	0x2000e31d
    930c:	20009998 	.word	0x20009998

00009310 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
}

uint8_t DeviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) 
{
    9310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9314:	461e      	mov	r6, r3
	static bool onceHeartRate = true;
	static uint16_t cntNbrReceived = 0;		
	//static uint16_t cntFirst = 0;	
	uint8_t dataToSend[2];
	uint8_t batteryLevelToSend[4];
	dataToSend[0] = TYPE_HEARTRATE;
    9316:	2303      	movs	r3, #3
{
    9318:	4614      	mov	r4, r2
	batteryLevelToSend[0] = TYPE_BATTERY;
    931a:	2204      	movs	r2, #4
	dataToSend[0] = TYPE_HEARTRATE;
    931c:	f88d 3000 	strb.w	r3, [sp]
	batteryLevelToSend[1] = TYPE_HEARTRATE;
    9320:	f88d 3005 	strb.w	r3, [sp, #5]

	if (sensorInfos == 7)
    9324:	4b41      	ldr	r3, [pc, #260]	; (942c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11c>)
{
    9326:	4688      	mov	r8, r1
	if (sensorInfos == 7)
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	4d41      	ldr	r5, [pc, #260]	; (9430 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x120>)
    932c:	2b07      	cmp	r3, #7
    932e:	4f41      	ldr	r7, [pc, #260]	; (9434 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x124>)
	batteryLevelToSend[0] = TYPE_BATTERY;
    9330:	f88d 2004 	strb.w	r2, [sp, #4]
	if (sensorInfos == 7)
    9334:	d119      	bne.n	936a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
	{
		if (onceHeartRate || (peripheralDisconnected && connectedPeripheral))
    9336:	4a40      	ldr	r2, [pc, #256]	; (9438 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x128>)
    9338:	4940      	ldr	r1, [pc, #256]	; (943c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x12c>)
    933a:	7813      	ldrb	r3, [r2, #0]
    933c:	b923      	cbnz	r3, 9348 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    933e:	780b      	ldrb	r3, [r1, #0]
    9340:	b19b      	cbz	r3, 936a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
    9342:	4b3f      	ldr	r3, [pc, #252]	; (9440 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x130>)
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	b183      	cbz	r3, 936a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
		{
			cntFirstHR = 0;
    9348:	2300      	movs	r3, #0
			peripheralDisconnected = false;
			onceHeartRate = false;
			initBatteryManager(sensorInfos);
    934a:	2007      	movs	r0, #7
			onceHeartRate = false;
    934c:	7013      	strb	r3, [r2, #0]
			cntFirstHR = 0;
    934e:	702b      	strb	r3, [r5, #0]
			peripheralDisconnected = false;
    9350:	700b      	strb	r3, [r1, #0]
			initBatteryManager(sensorInfos);
    9352:	f001 f9e9 	bl	a728 <initBatteryManager>
			err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    9356:	4b3b      	ldr	r3, [pc, #236]	; (9444 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x134>)
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	4b3b      	ldr	r3, [pc, #236]	; (9448 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x138>)
    935c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9360:	f001 f9b4 	bl	a6cc <gatt_discover_battery_service>
			if (err == 0)
    9364:	b908      	cbnz	r0, 936a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
			{
				batterySubscriptionDone = true;
    9366:	2301      	movs	r3, #1
    9368:	703b      	strb	r3, [r7, #0]
			}			
		}	
	}

	if (hrDisconnected)
    936a:	4a38      	ldr	r2, [pc, #224]	; (944c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x13c>)
    936c:	7813      	ldrb	r3, [r2, #0]
    936e:	b113      	cbz	r3, 9376 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
	{
		hrDisconnected = false;
    9370:	2300      	movs	r3, #0
    9372:	7013      	strb	r3, [r2, #0]
		cntFirstHR = 0;
    9374:	702b      	strb	r3, [r5, #0]
	}
	
	if (batterySubscriptionDone)
    9376:	783b      	ldrb	r3, [r7, #0]
    9378:	2b00      	cmp	r3, #0
    937a:	d054      	beq.n	9426 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x116>
	{
		// get battery level every few minutes
		if (cntFirstHR == 2 || cntNbrReceived == 300)
    937c:	782a      	ldrb	r2, [r5, #0]
    937e:	4f34      	ldr	r7, [pc, #208]	; (9450 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x140>)
    9380:	2a02      	cmp	r2, #2
    9382:	883b      	ldrh	r3, [r7, #0]
    9384:	d002      	beq.n	938c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    9386:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    938a:	d110      	bne.n	93ae <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9e>
		{
			cntFirstHR++;
    938c:	3201      	adds	r2, #1
			cntNbrReceived++;
    938e:	3301      	adds	r3, #1
			askForBatteryLevel(TYPE_HEARTRATE);
    9390:	2003      	movs	r0, #3
			cntFirstHR++;
    9392:	702a      	strb	r2, [r5, #0]
			cntNbrReceived++;
    9394:	803b      	strh	r3, [r7, #0]
			askForBatteryLevel(TYPE_HEARTRATE);
    9396:	f001 fac7 	bl	a928 <askForBatteryLevel>
		{
			cntFirstHR++;
			cntNbrReceived++;
		}	

		if (!data) {
    939a:	bb5c      	cbnz	r4, 93f4 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe4>
			printk("[UNSUBSCRIBED]\n");
    939c:	482d      	ldr	r0, [pc, #180]	; (9454 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x144>)
    939e:	f011 fb75 	bl	1aa8c <printk>
			params->value_handle = 0U;
			return BT_GATT_ITER_STOP;
    93a2:	4620      	mov	r0, r4
			params->value_handle = 0U;
    93a4:	f8a8 4008 	strh.w	r4, [r8, #8]
	{
		cntFirstHR = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    93a8:	b002      	add	sp, #8
    93aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (isValueReady(TYPE_HEARTRATE))
    93ae:	2003      	movs	r0, #3
    93b0:	f001 fae2 	bl	a978 <isValueReady>
    93b4:	b1b8      	cbz	r0, 93e6 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd6>
			resetReadyValue(TYPE_HEARTRATE);
    93b6:	2003      	movs	r0, #3
    93b8:	f001 faf2 	bl	a9a0 <resetReadyValue>
			cntNbrReceived = 0;
    93bc:	2300      	movs	r3, #0
    93be:	803b      	strh	r3, [r7, #0]
			cntFirstHR++;
    93c0:	782b      	ldrb	r3, [r5, #0]
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    93c2:	2003      	movs	r0, #3
			cntFirstHR++;
    93c4:	3301      	adds	r3, #1
    93c6:	702b      	strb	r3, [r5, #0]
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    93c8:	f001 f9f8 	bl	a7bc <getBatteryLevel>
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    93cc:	2204      	movs	r2, #4
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    93ce:	4b22      	ldr	r3, [pc, #136]	; (9458 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x148>)
			batteryLevelToSend[2] = DeviceManager::data.battValue_heartRate;
    93d0:	f88d 0006 	strb.w	r0, [sp, #6]
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    93d4:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    93d8:	4b20      	ldr	r3, [pc, #128]	; (945c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x14c>)
    93da:	eb0d 0102 	add.w	r1, sp, r2
    93de:	6818      	ldr	r0, [r3, #0]
    93e0:	f001 f826 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    93e4:	e7d9      	b.n	939a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8a>
			cntFirstHR++;
    93e6:	782b      	ldrb	r3, [r5, #0]
    93e8:	3301      	adds	r3, #1
    93ea:	702b      	strb	r3, [r5, #0]
			cntNbrReceived++;
    93ec:	883b      	ldrh	r3, [r7, #0]
    93ee:	3301      	adds	r3, #1
    93f0:	803b      	strh	r3, [r7, #0]
    93f2:	e7d2      	b.n	939a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8a>
		if (length == 2)
    93f4:	2e02      	cmp	r6, #2
    93f6:	d110      	bne.n	941a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x10a>
				uint8_t hr_bpm = ((uint8_t *)data)[1];
    93f8:	7861      	ldrb	r1, [r4, #1]
				DeviceManager::data.heartRate = hr_bpm;
    93fa:	4b17      	ldr	r3, [pc, #92]	; (9458 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x148>)
				printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    93fc:	4818      	ldr	r0, [pc, #96]	; (9460 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x150>)
				DeviceManager::data.heartRate = hr_bpm;
    93fe:	f883 1020 	strb.w	r1, [r3, #32]
				dataToSend[1] = hr_bpm;
    9402:	f88d 1001 	strb.w	r1, [sp, #1]
				printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    9406:	f011 fb41 	bl	1aa8c <printk>
				data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    940a:	4b14      	ldr	r3, [pc, #80]	; (945c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x14c>)
    940c:	4632      	mov	r2, r6
    940e:	4669      	mov	r1, sp
    9410:	6818      	ldr	r0, [r3, #0]
    9412:	f001 f80d 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    9416:	2001      	movs	r0, #1
    9418:	e7c6      	b.n	93a8 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x98>
			printk("[NOTIFICATION] data %p length %u\n", data, length);
    941a:	4632      	mov	r2, r6
    941c:	4621      	mov	r1, r4
    941e:	4811      	ldr	r0, [pc, #68]	; (9464 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x154>)
    9420:	f011 fb34 	bl	1aa8c <printk>
    9424:	e7f7      	b.n	9416 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x106>
		cntFirstHR = 0;
    9426:	702b      	strb	r3, [r5, #0]
    9428:	e7f5      	b.n	9416 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x106>
    942a:	bf00      	nop
    942c:	2000e318 	.word	0x2000e318
    9430:	2000e316 	.word	0x2000e316
    9434:	2000e324 	.word	0x2000e324
    9438:	20008442 	.word	0x20008442
    943c:	2000e323 	.word	0x2000e323
    9440:	2000e320 	.word	0x2000e320
    9444:	2000e325 	.word	0x2000e325
    9448:	20009a14 	.word	0x20009a14
    944c:	2000e31b 	.word	0x2000e31b
    9450:	2000e2d4 	.word	0x2000e2d4
    9454:	0001f324 	.word	0x0001f324
    9458:	200086b8 	.word	0x200086b8
    945c:	20009998 	.word	0x20009998
    9460:	0001f334 	.word	0x0001f334
    9464:	0001f356 	.word	0x0001f356

00009468 <_ZN13DeviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    9468:	07cb      	lsls	r3, r1, #31
{
    946a:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    946c:	d507      	bpl.n	947e <_ZN13DeviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    946e:	1e04      	subs	r4, r0, #0
    9470:	bf18      	it	ne
    9472:	2401      	movne	r4, #1
    9474:	4620      	mov	r0, r4
    9476:	f004 f96f 	bl	d758 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    947a:	4b01      	ldr	r3, [pc, #4]	; (9480 <_ZN13DeviceManager13buttonChangedEjj+0x18>)
    947c:	701c      	strb	r4, [r3, #0]
}
    947e:	bd10      	pop	{r4, pc}
    9480:	2000e31e 	.word	0x2000e31e

00009484 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
{
    9484:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9486:	461c      	mov	r4, r3
	if (subscriptionDone)
    9488:	4b98      	ldr	r3, [pc, #608]	; (96ec <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x268>)
{
    948a:	4615      	mov	r5, r2
	if (subscriptionDone)
    948c:	7818      	ldrb	r0, [r3, #0]
    948e:	2800      	cmp	r0, #0
    9490:	f000 8126 	beq.w	96e0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x25c>
		if (!batterySubscriptionDone)
    9494:	4e96      	ldr	r6, [pc, #600]	; (96f0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26c>)
    9496:	7833      	ldrb	r3, [r6, #0]
    9498:	bb5b      	cbnz	r3, 94f2 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6e>
			if (cntBatterySubscriptions == nbrConnectionsCentral)
    949a:	4c96      	ldr	r4, [pc, #600]	; (96f4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x270>)
    949c:	4b96      	ldr	r3, [pc, #600]	; (96f8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x274>)
    949e:	7822      	ldrb	r2, [r4, #0]
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	429a      	cmp	r2, r3
    94a4:	d102      	bne.n	94ac <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28>
				batterySubscriptionDone = true;
    94a6:	2301      	movs	r3, #1
						cntNbrReceived2++;
    94a8:	7033      	strb	r3, [r6, #0]
    94aa:	e02a      	b.n	9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
				if (isFree())
    94ac:	f001 fa36 	bl	a91c <isFree>
    94b0:	b338      	cbz	r0, 9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
					if (cntForDiscover == 0 || cntForDiscover == 7 || cntForDiscover == 14) 
    94b2:	4d92      	ldr	r5, [pc, #584]	; (96fc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x278>)
    94b4:	782a      	ldrb	r2, [r5, #0]
    94b6:	2a0e      	cmp	r2, #14
    94b8:	d817      	bhi.n	94ea <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
    94ba:	f244 0381 	movw	r3, #16513	; 0x4081
    94be:	40d3      	lsrs	r3, r2
    94c0:	07db      	lsls	r3, r3, #31
    94c2:	d512      	bpl.n	94ea <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
						initBatteryManager(sensorInfos);
    94c4:	4b8e      	ldr	r3, [pc, #568]	; (9700 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x27c>)
    94c6:	7818      	ldrb	r0, [r3, #0]
    94c8:	f001 f92e 	bl	a728 <initBatteryManager>
						err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    94cc:	7822      	ldrb	r2, [r4, #0]
    94ce:	4b8d      	ldr	r3, [pc, #564]	; (9704 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x280>)
    94d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    94d4:	f001 f8fa 	bl	a6cc <gatt_discover_battery_service>
    94d8:	4606      	mov	r6, r0
						printk("Nbr connections %d\n", cntBatterySubscriptions);
    94da:	7821      	ldrb	r1, [r4, #0]
    94dc:	488a      	ldr	r0, [pc, #552]	; (9708 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x284>)
    94de:	f011 fad5 	bl	1aa8c <printk>
						if (err == 0)
    94e2:	b916      	cbnz	r6, 94ea <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
							cntBatterySubscriptions++;
    94e4:	7823      	ldrb	r3, [r4, #0]
    94e6:	3301      	adds	r3, #1
    94e8:	7023      	strb	r3, [r4, #0]
						cntFirstCadence++;
    94ea:	782b      	ldrb	r3, [r5, #0]
    94ec:	3301      	adds	r3, #1
    94ee:	702b      	strb	r3, [r5, #0]
    94f0:	e007      	b.n	9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
		else if (!serviceFound())
    94f2:	f001 fa69 	bl	a9c8 <serviceFound>
    94f6:	b938      	cbnz	r0, 9508 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x84>
			cntBatterySubscriptions--;
    94f8:	4a7e      	ldr	r2, [pc, #504]	; (96f4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x270>)
			batterySubscriptionDone = false;
    94fa:	7030      	strb	r0, [r6, #0]
			cntBatterySubscriptions--;
    94fc:	7813      	ldrb	r3, [r2, #0]
    94fe:	3b01      	subs	r3, #1
    9500:	7013      	strb	r3, [r2, #0]
}
    9502:	2001      	movs	r0, #1
    9504:	b002      	add	sp, #8
    9506:	bd70      	pop	{r4, r5, r6, pc}
			if (length > 0)
    9508:	2c00      	cmp	r4, #0
    950a:	d0fa      	beq.n	9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
				if (cscDisconnected)
    950c:	4b7f      	ldr	r3, [pc, #508]	; (970c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x288>)
    950e:	781b      	ldrb	r3, [r3, #0]
    9510:	b123      	cbz	r3, 951c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x98>
					cntFirstSpeed = 0;
    9512:	2300      	movs	r3, #0
    9514:	4a7e      	ldr	r2, [pc, #504]	; (9710 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    9516:	7013      	strb	r3, [r2, #0]
					cntFirstCadence = 0;			
    9518:	4a7e      	ldr	r2, [pc, #504]	; (9714 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x290>)
    951a:	7013      	strb	r3, [r2, #0]
				if (peripheralDisconnected && connectedPeripheral)
    951c:	4a7e      	ldr	r2, [pc, #504]	; (9718 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x294>)
    951e:	7813      	ldrb	r3, [r2, #0]
    9520:	b153      	cbz	r3, 9538 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xb4>
    9522:	4b7e      	ldr	r3, [pc, #504]	; (971c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x298>)
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	b13b      	cbz	r3, 9538 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xb4>
					peripheralDisconnected = false;
    9528:	2300      	movs	r3, #0
    952a:	7013      	strb	r3, [r2, #0]
					cntFirstSpeed = 0;
    952c:	4a78      	ldr	r2, [pc, #480]	; (9710 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    952e:	7013      	strb	r3, [r2, #0]
					cntFirstCadence = 0;
    9530:	4a78      	ldr	r2, [pc, #480]	; (9714 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x290>)
    9532:	7013      	strb	r3, [r2, #0]
					cntFirstHR = 0;
    9534:	4a7a      	ldr	r2, [pc, #488]	; (9720 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x29c>)
    9536:	7013      	strb	r3, [r2, #0]
				if (!areNotificationsOn() && disconnectOnce)
    9538:	f000 ffea 	bl	a510 <_Z18areNotificationsOnv>
    953c:	b940      	cbnz	r0, 9550 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>
    953e:	4b79      	ldr	r3, [pc, #484]	; (9724 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a0>)
    9540:	781a      	ldrb	r2, [r3, #0]
    9542:	b12a      	cbz	r2, 9550 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>
					disconnectOnce = false;
    9544:	7018      	strb	r0, [r3, #0]
					bt_conn_disconnect(peripheralConn,1);
    9546:	4b78      	ldr	r3, [pc, #480]	; (9728 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
    9548:	2101      	movs	r1, #1
    954a:	6818      	ldr	r0, [r3, #0]
    954c:	f008 fb54 	bl	11bf8 <bt_conn_disconnect>
				DeviceManager::data.saveData(data);
    9550:	4c76      	ldr	r4, [pc, #472]	; (972c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a8>)
    9552:	4629      	mov	r1, r5
    9554:	4620      	mov	r0, r4
    9556:	f000 fed5 	bl	a304 <_ZN4Data8saveDataEPKv>
				if (getDiameter() != 0 && diameterSet == false)
    955a:	f000 ff93 	bl	a484 <_Z11getDiameterv>
    955e:	2200      	movs	r2, #0
    9560:	2300      	movs	r3, #0
    9562:	f7ff fa91 	bl	8a88 <__aeabi_dcmpeq>
    9566:	b910      	cbnz	r0, 956e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xea>
    9568:	4b71      	ldr	r3, [pc, #452]	; (9730 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2ac>)
    956a:	781a      	ldrb	r2, [r3, #0]
    956c:	b32a      	cbz	r2, 95ba <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x136>
				else if (getDiameter() == 0 && diameterSet == true)
    956e:	f000 ff89 	bl	a484 <_Z11getDiameterv>
    9572:	2200      	movs	r2, #0
    9574:	2300      	movs	r3, #0
    9576:	f7ff fa87 	bl	8a88 <__aeabi_dcmpeq>
    957a:	bb28      	cbnz	r0, 95c8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x144>
				if (DeviceManager::data.type == TYPE_CSC_SPEED)
    957c:	7c23      	ldrb	r3, [r4, #16]
    957e:	2b01      	cmp	r3, #1
    9580:	d162      	bne.n	9648 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c4>
					if (diameterSet)
    9582:	4b6b      	ldr	r3, [pc, #428]	; (9730 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2ac>)
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	b153      	cbz	r3, 959e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11a>
						uint16_t speed = DeviceManager::data.calcSpeed();
    9588:	4868      	ldr	r0, [pc, #416]	; (972c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a8>)
    958a:	f7ff fc5d 	bl	8e48 <_ZN4Data9calcSpeedEv>
						if (speed == 0)
    958e:	4a69      	ldr	r2, [pc, #420]	; (9734 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2b0>)
    9590:	bb08      	cbnz	r0, 95d6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x152>
							cntZerosSpeed++;
    9592:	7813      	ldrb	r3, [r2, #0]
    9594:	3301      	adds	r3, #1
    9596:	b2db      	uxtb	r3, r3
						if (speed > 0 || cntZerosSpeed >= 3)	// when 3 times speed is 0, bike is not running any more
    9598:	2b02      	cmp	r3, #2
							cntZerosSpeed++;
    959a:	7013      	strb	r3, [r2, #0]
						if (speed > 0 || cntZerosSpeed >= 3)	// when 3 times speed is 0, bike is not running any more
    959c:	d81d      	bhi.n	95da <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x156>
					if (cntFirstSpeed == 1 || cntNbrReceived1 == 50)
    959e:	4d5c      	ldr	r5, [pc, #368]	; (9710 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    95a0:	4e65      	ldr	r6, [pc, #404]	; (9738 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2b4>)
    95a2:	782b      	ldrb	r3, [r5, #0]
    95a4:	2b01      	cmp	r3, #1
    95a6:	d002      	beq.n	95ae <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x12a>
    95a8:	7833      	ldrb	r3, [r6, #0]
    95aa:	2b32      	cmp	r3, #50	; 0x32
    95ac:	d12d      	bne.n	960a <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x186>
						cntNbrReceived1 = 0;
    95ae:	2300      	movs	r3, #0
						askForBatteryLevel(TYPE_CSC_SPEED);
    95b0:	2001      	movs	r0, #1
						cntNbrReceived1 = 0;
    95b2:	7033      	strb	r3, [r6, #0]
						askForBatteryLevel(TYPE_CSC_SPEED);
    95b4:	f001 f9b8 	bl	a928 <askForBatteryLevel>
						cntFirstSpeed++;
    95b8:	e797      	b.n	94ea <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
					diameterSet = true;
    95ba:	2201      	movs	r2, #1
    95bc:	701a      	strb	r2, [r3, #0]
					DeviceManager::data.wheelDiameter = getDiameter();
    95be:	f000 ff61 	bl	a484 <_Z11getDiameterv>
    95c2:	e9c4 0106 	strd	r0, r1, [r4, #24]
    95c6:	e7d9      	b.n	957c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf8>
				else if (getDiameter() == 0 && diameterSet == true)
    95c8:	4b59      	ldr	r3, [pc, #356]	; (9730 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2ac>)
    95ca:	781a      	ldrb	r2, [r3, #0]
    95cc:	2a00      	cmp	r2, #0
    95ce:	d0d5      	beq.n	957c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf8>
					diameterSet = false;
    95d0:	2200      	movs	r2, #0
    95d2:	701a      	strb	r2, [r3, #0]
    95d4:	e7d2      	b.n	957c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf8>
							cntZerosSpeed = 0;
    95d6:	2300      	movs	r3, #0
    95d8:	7013      	strb	r3, [r2, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    95da:	2164      	movs	r1, #100	; 0x64
							dataToSend[0] = TYPE_CSC_SPEED;
    95dc:	2301      	movs	r3, #1
							dataToSend[1] = (uint8_t) (speed/100);	
    95de:	fbb0 f1f1 	udiv	r1, r0, r1
							if (peripheralConn != nullptr)
    95e2:	4d51      	ldr	r5, [pc, #324]	; (9728 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
							dataToSend[0] = TYPE_CSC_SPEED;
    95e4:	f88d 3000 	strb.w	r3, [sp]
							if (peripheralConn != nullptr)
    95e8:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    95ea:	b289      	uxth	r1, r1
    95ec:	f88d 1001 	strb.w	r1, [sp, #1]
							val_after_comma = (uint8_t) (speed);
    95f0:	f88d 0002 	strb.w	r0, [sp, #2]
							if (peripheralConn != nullptr)
    95f4:	2b00      	cmp	r3, #0
    95f6:	d0d2      	beq.n	959e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11a>
								printk("Speed: %d\n",speed/100);
    95f8:	4850      	ldr	r0, [pc, #320]	; (973c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2b8>)
    95fa:	f011 fa47 	bl	1aa8c <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    95fe:	2203      	movs	r2, #3
    9600:	4669      	mov	r1, sp
    9602:	6828      	ldr	r0, [r5, #0]
    9604:	f000 ff14 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    9608:	e7c9      	b.n	959e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11a>
					else if (isValueReady(TYPE_CSC_SPEED))
    960a:	2001      	movs	r0, #1
    960c:	f001 f9b4 	bl	a978 <isValueReady>
    9610:	b1b0      	cbz	r0, 9640 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1bc>
						resetReadyValue(TYPE_CSC_SPEED);
    9612:	2001      	movs	r0, #1
    9614:	f001 f9c4 	bl	a9a0 <resetReadyValue>
						DeviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    9618:	2001      	movs	r0, #1
    961a:	f001 f8cf 	bl	a7bc <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    961e:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_SPEED;
    9620:	2301      	movs	r3, #1
						DeviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    9622:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
						batteryLevelToSend[0] = TYPE_BATTERY;
    9626:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    962a:	f88d 3005 	strb.w	r3, [sp, #5]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));			
    962e:	4b3e      	ldr	r3, [pc, #248]	; (9728 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
						batteryLevelToSend[2] = DeviceManager::data.battValue_cadence;
    9630:	f88d 0006 	strb.w	r0, [sp, #6]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));			
    9634:	eb0d 0102 	add.w	r1, sp, r2
    9638:	6818      	ldr	r0, [r3, #0]
    963a:	f000 fef9 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    963e:	e760      	b.n	9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
						cntNbrReceived1++;
    9640:	7833      	ldrb	r3, [r6, #0]
    9642:	3301      	adds	r3, #1
						cntNbrReceived2 = 0;
    9644:	7033      	strb	r3, [r6, #0]
    9646:	e750      	b.n	94ea <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
				else if (DeviceManager::data.type == TYPE_CSC_CADENCE)
    9648:	2b02      	cmp	r3, #2
    964a:	f47f af5a 	bne.w	9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
					uint16_t rpm = DeviceManager::data.calcRPM();
    964e:	4837      	ldr	r0, [pc, #220]	; (972c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a8>)
    9650:	f000 fe7a 	bl	a348 <_ZN4Data7calcRPMEv>
					if (rpm == 0)
    9654:	4a3a      	ldr	r2, [pc, #232]	; (9740 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2bc>)
    9656:	4601      	mov	r1, r0
    9658:	b9e8      	cbnz	r0, 9696 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x212>
						cntZerosCadence++;
    965a:	7813      	ldrb	r3, [r2, #0]
    965c:	3301      	adds	r3, #1
    965e:	b2db      	uxtb	r3, r3
					if (rpm > 0 || cntZerosCadence >= 3)	// when 3 times speed is 0, bike is not running any more
    9660:	2b02      	cmp	r3, #2
						cntZerosCadence++;
    9662:	7013      	strb	r3, [r2, #0]
					if (rpm > 0 || cntZerosCadence >= 3)	// when 3 times speed is 0, bike is not running any more
    9664:	d90a      	bls.n	967c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f8>
							dataToSend[0] = TYPE_CSC_CADENCE;	
    9666:	2302      	movs	r3, #2
							if (peripheralConn != nullptr)
    9668:	4d2f      	ldr	r5, [pc, #188]	; (9728 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
							dataToSend[0] = TYPE_CSC_CADENCE;	
    966a:	f88d 3000 	strb.w	r3, [sp]
							dataToSend[2] = (uint8_t) (rpm >> 8);	
    966e:	0a0b      	lsrs	r3, r1, #8
    9670:	f88d 3002 	strb.w	r3, [sp, #2]
							if (peripheralConn != nullptr)
    9674:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) rpm;
    9676:	f88d 1001 	strb.w	r1, [sp, #1]
							if (peripheralConn != nullptr)
    967a:	b993      	cbnz	r3, 96a2 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x21e>
					if (cntFirstCadence == 3 || cntNbrReceived2 == 100)
    967c:	4d25      	ldr	r5, [pc, #148]	; (9714 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x290>)
						askForBatteryLevel(TYPE_CSC_CADENCE);
    967e:	2002      	movs	r0, #2
					if (cntFirstCadence == 3 || cntNbrReceived2 == 100)
    9680:	782b      	ldrb	r3, [r5, #0]
    9682:	4e30      	ldr	r6, [pc, #192]	; (9744 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2c0>)
    9684:	2b03      	cmp	r3, #3
    9686:	d002      	beq.n	968e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20a>
    9688:	7833      	ldrb	r3, [r6, #0]
    968a:	2b64      	cmp	r3, #100	; 0x64
    968c:	d112      	bne.n	96b4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x230>
						askForBatteryLevel(TYPE_CSC_CADENCE);
    968e:	f001 f94b 	bl	a928 <askForBatteryLevel>
						cntNbrReceived2 = 0;
    9692:	2300      	movs	r3, #0
    9694:	e7d6      	b.n	9644 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c0>
						cntZerosCadence = 0;
    9696:	2300      	movs	r3, #0
						if (rpm < 500)
    9698:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
						cntZerosCadence = 0;
    969c:	7013      	strb	r3, [r2, #0]
						if (rpm < 500)
    969e:	d2ed      	bcs.n	967c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f8>
    96a0:	e7e1      	b.n	9666 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e2>
								printk("Cadence rpm: %d\n",rpm);
    96a2:	4829      	ldr	r0, [pc, #164]	; (9748 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2c4>)
    96a4:	f011 f9f2 	bl	1aa8c <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    96a8:	2203      	movs	r2, #3
    96aa:	4669      	mov	r1, sp
    96ac:	6828      	ldr	r0, [r5, #0]
    96ae:	f000 febf 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    96b2:	e7e3      	b.n	967c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f8>
					else if (isValueReady(TYPE_CSC_CADENCE))
    96b4:	f001 f960 	bl	a978 <isValueReady>
    96b8:	b160      	cbz	r0, 96d4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x250>
						resetReadyValue(TYPE_CSC_CADENCE);
    96ba:	2002      	movs	r0, #2
    96bc:	f001 f970 	bl	a9a0 <resetReadyValue>
						DeviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    96c0:	2002      	movs	r0, #2
    96c2:	f001 f87b 	bl	a7bc <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    96c6:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    96c8:	2302      	movs	r3, #2
						DeviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    96ca:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
						batteryLevelToSend[0] = TYPE_BATTERY;
    96ce:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    96d2:	e7aa      	b.n	962a <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a6>
						cntFirstCadence++;
    96d4:	782b      	ldrb	r3, [r5, #0]
    96d6:	3301      	adds	r3, #1
    96d8:	702b      	strb	r3, [r5, #0]
						cntNbrReceived2++;
    96da:	7833      	ldrb	r3, [r6, #0]
    96dc:	3301      	adds	r3, #1
    96de:	e6e3      	b.n	94a8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x24>
		cntFirstSpeed = 0;
    96e0:	4b0b      	ldr	r3, [pc, #44]	; (9710 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    96e2:	7018      	strb	r0, [r3, #0]
		cntFirstCadence = 0;		
    96e4:	4b0b      	ldr	r3, [pc, #44]	; (9714 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x290>)
    96e6:	7018      	strb	r0, [r3, #0]
    96e8:	e70b      	b.n	9502 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
    96ea:	bf00      	nop
    96ec:	2000e31f 	.word	0x2000e31f
    96f0:	2000e324 	.word	0x2000e324
    96f4:	2000e325 	.word	0x2000e325
    96f8:	2000e322 	.word	0x2000e322
    96fc:	2000e35d 	.word	0x2000e35d
    9700:	2000e318 	.word	0x2000e318
    9704:	20009a14 	.word	0x20009a14
    9708:	0001f378 	.word	0x0001f378
    970c:	2000e31c 	.word	0x2000e31c
    9710:	2000e35b 	.word	0x2000e35b
    9714:	2000e35e 	.word	0x2000e35e
    9718:	2000e323 	.word	0x2000e323
    971c:	2000e320 	.word	0x2000e320
    9720:	2000e316 	.word	0x2000e316
    9724:	20008440 	.word	0x20008440
    9728:	20009998 	.word	0x20009998
    972c:	200086b8 	.word	0x200086b8
    9730:	2000e317 	.word	0x2000e317
    9734:	2000e35c 	.word	0x2000e35c
    9738:	2000e35f 	.word	0x2000e35f
    973c:	0001f38c 	.word	0x0001f38c
    9740:	2000e361 	.word	0x2000e361
    9744:	2000e360 	.word	0x2000e360
    9748:	0001f397 	.word	0x0001f397

0000974c <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    974c:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    974e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9750:	b08b      	sub	sp, #44	; 0x2c
    9752:	4604      	mov	r4, r0
    9754:	460e      	mov	r6, r1
    9756:	4617      	mov	r7, r2
    9758:	ad07      	add	r5, sp, #28
    975a:	2b03      	cmp	r3, #3
    975c:	d820      	bhi.n	97a0 <bt_addr_le_to_str.isra.0+0x54>
    975e:	e8df f003 	tbb	[pc, r3]
    9762:	1902      	.short	0x1902
    9764:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9766:	4911      	ldr	r1, [pc, #68]	; (97ac <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9768:	4628      	mov	r0, r5
    976a:	f012 fb5f 	bl	1be2c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    976e:	7863      	ldrb	r3, [r4, #1]
    9770:	4639      	mov	r1, r7
    9772:	9304      	str	r3, [sp, #16]
    9774:	78a3      	ldrb	r3, [r4, #2]
    9776:	4630      	mov	r0, r6
    9778:	9303      	str	r3, [sp, #12]
    977a:	78e3      	ldrb	r3, [r4, #3]
    977c:	4a0c      	ldr	r2, [pc, #48]	; (97b0 <bt_addr_le_to_str.isra.0+0x64>)
    977e:	9302      	str	r3, [sp, #8]
    9780:	7923      	ldrb	r3, [r4, #4]
    9782:	9505      	str	r5, [sp, #20]
    9784:	9301      	str	r3, [sp, #4]
    9786:	7963      	ldrb	r3, [r4, #5]
    9788:	9300      	str	r3, [sp, #0]
    978a:	79a3      	ldrb	r3, [r4, #6]
    978c:	f011 f98b 	bl	1aaa6 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    9790:	b00b      	add	sp, #44	; 0x2c
    9792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9794:	4907      	ldr	r1, [pc, #28]	; (97b4 <bt_addr_le_to_str.isra.0+0x68>)
    9796:	e7e7      	b.n	9768 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    9798:	4907      	ldr	r1, [pc, #28]	; (97b8 <bt_addr_le_to_str.isra.0+0x6c>)
    979a:	e7e5      	b.n	9768 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    979c:	4907      	ldr	r1, [pc, #28]	; (97bc <bt_addr_le_to_str.isra.0+0x70>)
    979e:	e7e3      	b.n	9768 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    97a0:	210a      	movs	r1, #10
    97a2:	4628      	mov	r0, r5
    97a4:	4a06      	ldr	r2, [pc, #24]	; (97c0 <bt_addr_le_to_str.isra.0+0x74>)
    97a6:	f011 f97e 	bl	1aaa6 <snprintk>
		break;
    97aa:	e7e0      	b.n	976e <bt_addr_le_to_str.isra.0+0x22>
    97ac:	0001f3a8 	.word	0x0001f3a8
    97b0:	0001f3d1 	.word	0x0001f3d1
    97b4:	0001f3af 	.word	0x0001f3af
    97b8:	0001f3b6 	.word	0x0001f3b6
    97bc:	0001f3c0 	.word	0x0001f3c0
    97c0:	0001f3ca 	.word	0x0001f3ca

000097c4 <_ZN13DeviceManagerC1Ev>:
DeviceManager::DeviceManager()
    97c4:	b510      	push	{r4, lr}
    97c6:	4604      	mov	r4, r0
    97c8:	2214      	movs	r2, #20
    97ca:	2100      	movs	r1, #0
    97cc:	f012 fbb3 	bl	1bf36 <memset>
    97d0:	4b0e      	ldr	r3, [pc, #56]	; (980c <_ZN13DeviceManagerC1Ev+0x48>)
    97d2:	4a0f      	ldr	r2, [pc, #60]	; (9810 <_ZN13DeviceManagerC1Ev+0x4c>)
    97d4:	6023      	str	r3, [r4, #0]
    97d6:	4b0f      	ldr	r3, [pc, #60]	; (9814 <_ZN13DeviceManagerC1Ev+0x50>)
    97d8:	e892 0003 	ldmia.w	r2, {r0, r1}
    97dc:	6063      	str	r3, [r4, #4]
    97de:	4b0e      	ldr	r3, [pc, #56]	; (9818 <_ZN13DeviceManagerC1Ev+0x54>)
    97e0:	2224      	movs	r2, #36	; 0x24
    97e2:	60a3      	str	r3, [r4, #8]
    97e4:	4b0d      	ldr	r3, [pc, #52]	; (981c <_ZN13DeviceManagerC1Ev+0x58>)
    97e6:	60e3      	str	r3, [r4, #12]
    97e8:	f104 0314 	add.w	r3, r4, #20
    97ec:	e883 0003 	stmia.w	r3, {r0, r1}
    97f0:	2100      	movs	r1, #0
    97f2:	f104 001c 	add.w	r0, r4, #28
    97f6:	f012 fb9e 	bl	1bf36 <memset>
		centralConnections[i] = nullptr;
    97fa:	2200      	movs	r2, #0
    97fc:	4b08      	ldr	r3, [pc, #32]	; (9820 <_ZN13DeviceManagerC1Ev+0x5c>)
}
    97fe:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    9800:	e9c3 2200 	strd	r2, r2, [r3]
    9804:	e9c3 2202 	strd	r2, r2, [r3, #8]
    9808:	611a      	str	r2, [r3, #16]
}
    980a:	bd10      	pop	{r4, pc}
    980c:	00009e45 	.word	0x00009e45
    9810:	0001e760 	.word	0x0001e760
    9814:	0000a0c1 	.word	0x0000a0c1
    9818:	0001a91d 	.word	0x0001a91d
    981c:	0001a921 	.word	0x0001a921
    9820:	20009a14 	.word	0x20009a14

00009824 <_ZN13DeviceManager9getDeviceEv>:
    if (isCentral && isPeripheral)
    9824:	4a07      	ldr	r2, [pc, #28]	; (9844 <_ZN13DeviceManager9getDeviceEv+0x20>)
    9826:	4b08      	ldr	r3, [pc, #32]	; (9848 <_ZN13DeviceManager9getDeviceEv+0x24>)
    9828:	7812      	ldrb	r2, [r2, #0]
    982a:	781b      	ldrb	r3, [r3, #0]
    982c:	b122      	cbz	r2, 9838 <_ZN13DeviceManager9getDeviceEv+0x14>
        return 1;
    982e:	2b00      	cmp	r3, #0
    9830:	bf14      	ite	ne
    9832:	2003      	movne	r0, #3
    9834:	2001      	moveq	r0, #1
    9836:	4770      	bx	lr
        return 0;
    9838:	2b00      	cmp	r3, #0
    983a:	bf14      	ite	ne
    983c:	2002      	movne	r0, #2
    983e:	2000      	moveq	r0, #0
}
    9840:	4770      	bx	lr
    9842:	bf00      	nop
    9844:	2000e35a 	.word	0x2000e35a
    9848:	2000e319 	.word	0x2000e319

0000984c <_ZN13DeviceManager10initButtonEv>:
{
    984c:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    984e:	4806      	ldr	r0, [pc, #24]	; (9868 <_ZN13DeviceManager10initButtonEv+0x1c>)
    9850:	f00d f994 	bl	16b7c <dk_buttons_init>
	if (err) {
    9854:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    9858:	d003      	beq.n	9862 <_ZN13DeviceManager10initButtonEv+0x16>
		printk("Cannot init buttons (err: %d)\n", err);
    985a:	4621      	mov	r1, r4
    985c:	4803      	ldr	r0, [pc, #12]	; (986c <_ZN13DeviceManager10initButtonEv+0x20>)
    985e:	f011 f915 	bl	1aa8c <printk>
}
    9862:	4620      	mov	r0, r4
    9864:	bd10      	pop	{r4, pc}
    9866:	bf00      	nop
    9868:	00009469 	.word	0x00009469
    986c:	0001f3f4 	.word	0x0001f3f4

00009870 <_ZN13DeviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9870:	2301      	movs	r3, #1
{
    9872:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9874:	490c      	ldr	r1, [pc, #48]	; (98a8 <_ZN13DeviceManager16startAdvertisingEv+0x38>)
    9876:	9300      	str	r3, [sp, #0]
    9878:	2202      	movs	r2, #2
    987a:	4b0c      	ldr	r3, [pc, #48]	; (98ac <_ZN13DeviceManager16startAdvertisingEv+0x3c>)
    987c:	480c      	ldr	r0, [pc, #48]	; (98b0 <_ZN13DeviceManager16startAdvertisingEv+0x40>)
    987e:	f007 f9cd 	bl	10c1c <bt_le_adv_start>
	if (err) 
    9882:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9886:	d005      	beq.n	9894 <_ZN13DeviceManager16startAdvertisingEv+0x24>
		printk("Advertising failed to start (err %d)\n", err);
    9888:	480a      	ldr	r0, [pc, #40]	; (98b4 <_ZN13DeviceManager16startAdvertisingEv+0x44>)
}
    988a:	b003      	add	sp, #12
    988c:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    9890:	f011 b8fc 	b.w	1aa8c <printk>
	printk("Advertising successfully started\n");
    9894:	4808      	ldr	r0, [pc, #32]	; (98b8 <_ZN13DeviceManager16startAdvertisingEv+0x48>)
    9896:	f011 f8f9 	bl	1aa8c <printk>
	printk("Waiting for connection...\n");
    989a:	4808      	ldr	r0, [pc, #32]	; (98bc <_ZN13DeviceManager16startAdvertisingEv+0x4c>)
}
    989c:	b003      	add	sp, #12
    989e:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    98a2:	f011 b8f3 	b.w	1aa8c <printk>
    98a6:	bf00      	nop
    98a8:	0001e878 	.word	0x0001e878
    98ac:	0001e888 	.word	0x0001e888
    98b0:	0001e7f8 	.word	0x0001e7f8
    98b4:	0001f413 	.word	0x0001f413
    98b8:	0001f439 	.word	0x0001f439
    98bc:	0001f45b 	.word	0x0001f45b

000098c0 <_ZN13DeviceManager14initPeripheralEv>:
{
    98c0:	b510      	push	{r4, lr}
    98c2:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2)
    98c4:	f7ff ffae 	bl	9824 <_ZN13DeviceManager9getDeviceEv>
    98c8:	1e83      	subs	r3, r0, #2
    98ca:	b2db      	uxtb	r3, r3
    98cc:	2b01      	cmp	r3, #1
    98ce:	d830      	bhi.n	9932 <_ZN13DeviceManager14initPeripheralEv+0x72>
        err = dk_leds_init();
    98d0:	f00d f8ee 	bl	16ab0 <dk_leds_init>
        if (err) 
    98d4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    98d8:	d004      	beq.n	98e4 <_ZN13DeviceManager14initPeripheralEv+0x24>
            printk("LEDs init failed (err %d)\n", err);
    98da:	4816      	ldr	r0, [pc, #88]	; (9934 <_ZN13DeviceManager14initPeripheralEv+0x74>)
}
    98dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    98e0:	f011 b8d4 	b.w	1aa8c <printk>
        err = initButton();
    98e4:	f7ff ffb2 	bl	984c <_ZN13DeviceManager10initButtonEv>
    98e8:	4601      	mov	r1, r0
        if (err) 
    98ea:	b108      	cbz	r0, 98f0 <_ZN13DeviceManager14initPeripheralEv+0x30>
            printk("Button init failed (err %d)\n", err);
    98ec:	4812      	ldr	r0, [pc, #72]	; (9938 <_ZN13DeviceManager14initPeripheralEv+0x78>)
    98ee:	e7f5      	b.n	98dc <_ZN13DeviceManager14initPeripheralEv+0x1c>
        err = bt_enable(NULL);
    98f0:	f006 fefa 	bl	106e8 <bt_enable>
        if (err) 
    98f4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    98f8:	d001      	beq.n	98fe <_ZN13DeviceManager14initPeripheralEv+0x3e>
            printk("Bluetooth init failed (err %d)\n", err);
    98fa:	4810      	ldr	r0, [pc, #64]	; (993c <_ZN13DeviceManager14initPeripheralEv+0x7c>)
    98fc:	e7ee      	b.n	98dc <_ZN13DeviceManager14initPeripheralEv+0x1c>
        printk("Bluetooth initialized\n");
    98fe:	4810      	ldr	r0, [pc, #64]	; (9940 <_ZN13DeviceManager14initPeripheralEv+0x80>)
    9900:	f011 f8c4 	bl	1aa8c <printk>
		bt_conn_cb_register(&conn_callbacks);
    9904:	4620      	mov	r0, r4
    9906:	f007 fd4d 	bl	113a4 <bt_conn_cb_register>
            settings_load();
    990a:	f011 fb9a 	bl	1b042 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    990e:	f104 0014 	add.w	r0, r4, #20
    9912:	f003 ff17 	bl	d744 <bt_lbs_init>
        if (err) 
    9916:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    991a:	d001      	beq.n	9920 <_ZN13DeviceManager14initPeripheralEv+0x60>
			printk("Failed to init LBS (err:%d)\n", err);
    991c:	4809      	ldr	r0, [pc, #36]	; (9944 <_ZN13DeviceManager14initPeripheralEv+0x84>)
    991e:	e7dd      	b.n	98dc <_ZN13DeviceManager14initPeripheralEv+0x1c>
		err = data_service_init();
    9920:	f000 fd74 	bl	a40c <_Z17data_service_initv>
		if (err) 
    9924:	4601      	mov	r1, r0
    9926:	2800      	cmp	r0, #0
    9928:	d1f8      	bne.n	991c <_ZN13DeviceManager14initPeripheralEv+0x5c>
}
    992a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    992e:	f7ff bf9f 	b.w	9870 <_ZN13DeviceManager16startAdvertisingEv>
}
    9932:	bd10      	pop	{r4, pc}
    9934:	0001f476 	.word	0x0001f476
    9938:	0001f491 	.word	0x0001f491
    993c:	0001f4ae 	.word	0x0001f4ae
    9940:	0001f4ce 	.word	0x0001f4ce
    9944:	0001f4e5 	.word	0x0001f4e5

00009948 <_ZN13DeviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9948:	2001      	movs	r0, #1
{
    994a:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    994c:	f003 fd3a 	bl	d3c4 <bt_scan_start>
	if (err)
    9950:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9954:	d002      	beq.n	995c <_ZN13DeviceManager9startScanEv+0x14>
		printk("Scanning failed to start, err %d\n", err);
    9956:	4805      	ldr	r0, [pc, #20]	; (996c <_ZN13DeviceManager9startScanEv+0x24>)
    9958:	f011 f898 	bl	1aa8c <printk>
	scanning = true;
    995c:	2201      	movs	r2, #1
    995e:	4b04      	ldr	r3, [pc, #16]	; (9970 <_ZN13DeviceManager9startScanEv+0x28>)
	printk("Scanning...\n");
    9960:	4804      	ldr	r0, [pc, #16]	; (9974 <_ZN13DeviceManager9startScanEv+0x2c>)
	scanning = true;
    9962:	701a      	strb	r2, [r3, #0]
}
    9964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    9968:	f011 b890 	b.w	1aa8c <printk>
    996c:	0001f502 	.word	0x0001f502
    9970:	2000e359 	.word	0x2000e359
    9974:	0001f524 	.word	0x0001f524

00009978 <_ZN13DeviceManager8initScanEv>:
{
    9978:	b530      	push	{r4, r5, lr}
    997a:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    997c:	f000 fdc2 	bl	a504 <_Z14getSensorInfosv>
    9980:	4d37      	ldr	r5, [pc, #220]	; (9a60 <_ZN13DeviceManager8initScanEv+0xe8>)
	struct bt_le_scan_param scanParam = {
    9982:	ab03      	add	r3, sp, #12
    9984:	2214      	movs	r2, #20
    9986:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    9988:	7028      	strb	r0, [r5, #0]
    998a:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    998c:	4618      	mov	r0, r3
    998e:	f012 fad2 	bl	1bf36 <memset>
    9992:	2201      	movs	r2, #1
    9994:	f88d 200c 	strb.w	r2, [sp, #12]
    9998:	9204      	str	r2, [sp, #16]
    999a:	4a32      	ldr	r2, [pc, #200]	; (9a64 <_ZN13DeviceManager8initScanEv+0xec>)
	struct bt_scan_init_param scanInit = {
    999c:	4932      	ldr	r1, [pc, #200]	; (9a68 <_ZN13DeviceManager8initScanEv+0xf0>)
	struct bt_le_scan_param scanParam = {
    999e:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    99a0:	2200      	movs	r2, #0
    99a2:	9102      	str	r1, [sp, #8]
    99a4:	9201      	str	r2, [sp, #4]
	};
    99a6:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    99a8:	2c00      	cmp	r4, #0
    99aa:	d054      	beq.n	9a56 <_ZN13DeviceManager8initScanEv+0xde>
		if (once)
    99ac:	4b2f      	ldr	r3, [pc, #188]	; (9a6c <_ZN13DeviceManager8initScanEv+0xf4>)
    99ae:	7819      	ldrb	r1, [r3, #0]
    99b0:	b141      	cbz	r1, 99c4 <_ZN13DeviceManager8initScanEv+0x4c>
			once = false;
    99b2:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    99b4:	f007 fb34 	bl	11020 <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    99b8:	4668      	mov	r0, sp
    99ba:	f003 fcd1 	bl	d360 <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    99be:	482c      	ldr	r0, [pc, #176]	; (9a70 <_ZN13DeviceManager8initScanEv+0xf8>)
    99c0:	f003 fafe 	bl	cfc0 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    99c4:	f003 fb7e 	bl	d0c4 <bt_scan_filter_remove_all>
		switch (sensorInfos)
    99c8:	782b      	ldrb	r3, [r5, #0]
    99ca:	3b01      	subs	r3, #1
    99cc:	2b06      	cmp	r3, #6
    99ce:	d840      	bhi.n	9a52 <_ZN13DeviceManager8initScanEv+0xda>
    99d0:	e8df f003 	tbb	[pc, r3]
    99d4:	211f1d04 	.word	0x211f1d04
    99d8:	342b      	.short	0x342b
    99da:	3d          	.byte	0x3d
    99db:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    99dc:	4925      	ldr	r1, [pc, #148]	; (9a74 <_ZN13DeviceManager8initScanEv+0xfc>)
    99de:	2003      	movs	r0, #3
    99e0:	f003 fafe 	bl	cfe0 <bt_scan_filter_add>
				if (err) 
    99e4:	b2c0      	uxtb	r0, r0
    99e6:	b968      	cbnz	r0, 9a04 <_ZN13DeviceManager8initScanEv+0x8c>
				readyToScan = true;
    99e8:	2401      	movs	r4, #1
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    99ea:	2100      	movs	r1, #0
    99ec:	2004      	movs	r0, #4
    99ee:	f003 fb95 	bl	d11c <bt_scan_filter_enable>
		if (err) 
    99f2:	b2c0      	uxtb	r0, r0
    99f4:	b110      	cbz	r0, 99fc <_ZN13DeviceManager8initScanEv+0x84>
			printk("Filters cannot be turned on\n");
    99f6:	4820      	ldr	r0, [pc, #128]	; (9a78 <_ZN13DeviceManager8initScanEv+0x100>)
    99f8:	f011 f848 	bl	1aa8c <printk>
		if (readyToScan)
    99fc:	b12c      	cbz	r4, 9a0a <_ZN13DeviceManager8initScanEv+0x92>
			startScan();
    99fe:	f7ff ffa3 	bl	9948 <_ZN13DeviceManager9startScanEv>
			readyToScan = false;
    9a02:	e002      	b.n	9a0a <_ZN13DeviceManager8initScanEv+0x92>
					printk("Scanning filters cannot be set\n");
    9a04:	481d      	ldr	r0, [pc, #116]	; (9a7c <_ZN13DeviceManager8initScanEv+0x104>)
    9a06:	f011 f841 	bl	1aa8c <printk>
}
    9a0a:	b009      	add	sp, #36	; 0x24
    9a0c:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9a0e:	491c      	ldr	r1, [pc, #112]	; (9a80 <_ZN13DeviceManager8initScanEv+0x108>)
    9a10:	e7e5      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9a12:	491c      	ldr	r1, [pc, #112]	; (9a84 <_ZN13DeviceManager8initScanEv+0x10c>)
    9a14:	e7e3      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    9a16:	4b1c      	ldr	r3, [pc, #112]	; (9a88 <_ZN13DeviceManager8initScanEv+0x110>)
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	2b01      	cmp	r3, #1
    9a1c:	d801      	bhi.n	9a22 <_ZN13DeviceManager8initScanEv+0xaa>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9a1e:	491b      	ldr	r1, [pc, #108]	; (9a8c <_ZN13DeviceManager8initScanEv+0x114>)
    9a20:	e7dd      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 2)
    9a22:	2b02      	cmp	r3, #2
    9a24:	d115      	bne.n	9a52 <_ZN13DeviceManager8initScanEv+0xda>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9a26:	491a      	ldr	r1, [pc, #104]	; (9a90 <_ZN13DeviceManager8initScanEv+0x118>)
    9a28:	e7d9      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    9a2a:	4b17      	ldr	r3, [pc, #92]	; (9a88 <_ZN13DeviceManager8initScanEv+0x110>)
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	b90b      	cbnz	r3, 9a34 <_ZN13DeviceManager8initScanEv+0xbc>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9a30:	4918      	ldr	r1, [pc, #96]	; (9a94 <_ZN13DeviceManager8initScanEv+0x11c>)
    9a32:	e7d4      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    9a34:	2b01      	cmp	r3, #1
    9a36:	d10c      	bne.n	9a52 <_ZN13DeviceManager8initScanEv+0xda>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9a38:	4917      	ldr	r1, [pc, #92]	; (9a98 <_ZN13DeviceManager8initScanEv+0x120>)
    9a3a:	e7d0      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    9a3c:	4b12      	ldr	r3, [pc, #72]	; (9a88 <_ZN13DeviceManager8initScanEv+0x110>)
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	b90b      	cbnz	r3, 9a46 <_ZN13DeviceManager8initScanEv+0xce>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9a42:	4916      	ldr	r1, [pc, #88]	; (9a9c <_ZN13DeviceManager8initScanEv+0x124>)
    9a44:	e7cb      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    9a46:	2b01      	cmp	r3, #1
    9a48:	d103      	bne.n	9a52 <_ZN13DeviceManager8initScanEv+0xda>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9a4a:	4915      	ldr	r1, [pc, #84]	; (9aa0 <_ZN13DeviceManager8initScanEv+0x128>)
    9a4c:	e7c7      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9a4e:	4915      	ldr	r1, [pc, #84]	; (9aa4 <_ZN13DeviceManager8initScanEv+0x12c>)
    9a50:	e7c5      	b.n	99de <_ZN13DeviceManager8initScanEv+0x66>
	bool readyToScan = false;
    9a52:	2400      	movs	r4, #0
    9a54:	e7c9      	b.n	99ea <_ZN13DeviceManager8initScanEv+0x72>
		bt_le_scan_start(&scanParam, deviceFound);
    9a56:	4914      	ldr	r1, [pc, #80]	; (9aa8 <_ZN13DeviceManager8initScanEv+0x130>)
    9a58:	f007 fa7e 	bl	10f58 <bt_le_scan_start>
    9a5c:	e7d5      	b.n	9a0a <_ZN13DeviceManager8initScanEv+0x92>
    9a5e:	bf00      	nop
    9a60:	2000e318 	.word	0x2000e318
    9a64:	00300060 	.word	0x00300060
    9a68:	0001f078 	.word	0x0001f078
    9a6c:	20008441 	.word	0x20008441
    9a70:	20008158 	.word	0x20008158
    9a74:	0001f080 	.word	0x0001f080
    9a78:	0001f551 	.word	0x0001f551
    9a7c:	0001f531 	.word	0x0001f531
    9a80:	0001f084 	.word	0x0001f084
    9a84:	0001f088 	.word	0x0001f088
    9a88:	2000e322 	.word	0x2000e322
    9a8c:	0001f08c 	.word	0x0001f08c
    9a90:	0001f090 	.word	0x0001f090
    9a94:	0001f094 	.word	0x0001f094
    9a98:	0001f098 	.word	0x0001f098
    9a9c:	0001f09c 	.word	0x0001f09c
    9aa0:	0001f0a0 	.word	0x0001f0a0
    9aa4:	0001f0a4 	.word	0x0001f0a4
    9aa8:	0001a92b 	.word	0x0001a92b

00009aac <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
{
    9aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!subscriptionDone)
    9ab0:	4e61      	ldr	r6, [pc, #388]	; (9c38 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
{
    9ab2:	4604      	mov	r4, r0
	if (!subscriptionDone)
    9ab4:	7833      	ldrb	r3, [r6, #0]
    9ab6:	4d61      	ldr	r5, [pc, #388]	; (9c3c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d14c      	bne.n	9b56 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    9abc:	f04f 0818 	mov.w	r8, #24
    9ac0:	2101      	movs	r1, #1
    9ac2:	782b      	ldrb	r3, [r5, #0]
    9ac4:	4f5e      	ldr	r7, [pc, #376]	; (9c40 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9ac6:	3b01      	subs	r3, #1
    9ac8:	fb08 f303 	mul.w	r3, r8, r3
    9acc:	18fa      	adds	r2, r7, r3
    9ace:	8191      	strh	r1, [r2, #12]
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    9ad0:	4a5c      	ldr	r2, [pc, #368]	; (9c44 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x198>)
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    9ad2:	495d      	ldr	r1, [pc, #372]	; (9c48 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    9ad4:	50fa      	str	r2, [r7, r3]
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    9ad6:	f003 f8a9 	bl	cc2c <bt_gatt_dm_char_by_uuid>
		if (!chrc) 
    9ada:	4681      	mov	r9, r0
    9adc:	b970      	cbnz	r0, 9afc <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x50>
			printk("Missing CSC measurement characteristic\n");
    9ade:	485b      	ldr	r0, [pc, #364]	; (9c4c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a0>)
			printk("Missing CSC measurement char CCC descriptor\n");
    9ae0:	f010 ffd4 	bl	1aa8c <printk>
			err = bt_gatt_dm_data_release(dm);
    9ae4:	4620      	mov	r0, r4
    9ae6:	f011 fc54 	bl	1b392 <bt_gatt_dm_data_release>
			if (err) 
    9aea:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9aee:	d037      	beq.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
				printk("Could not release discovery data, err: %d\n", err);
    9af0:	4857      	ldr	r0, [pc, #348]	; (9c50 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a4>)
}
    9af2:	b003      	add	sp, #12
    9af4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9af8:	f010 bfc8 	b.w	1aa8c <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    9afc:	4601      	mov	r1, r0
    9afe:	4a55      	ldr	r2, [pc, #340]	; (9c54 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a8>)
    9b00:	4620      	mov	r0, r4
    9b02:	f011 fc34 	bl	1b36e <bt_gatt_dm_desc_by_uuid>
		if (!desc) 
    9b06:	b908      	cbnz	r0, 9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x60>
			printk("Missing CSC measurement char CCC descriptor\n");
    9b08:	4853      	ldr	r0, [pc, #332]	; (9c58 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1ac>)
    9b0a:	e7e9      	b.n	9ae0 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    9b0c:	782b      	ldrb	r3, [r5, #0]
    9b0e:	8882      	ldrh	r2, [r0, #4]
    9b10:	3b01      	subs	r3, #1
    9b12:	fb08 7303 	mla	r3, r8, r3, r7
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9b16:	4649      	mov	r1, r9
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    9b18:	811a      	strh	r2, [r3, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9b1a:	4620      	mov	r0, r4
    9b1c:	4a4f      	ldr	r2, [pc, #316]	; (9c5c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b0>)
    9b1e:	f011 fc26 	bl	1b36e <bt_gatt_dm_desc_by_uuid>
		if (!desc) 
    9b22:	2800      	cmp	r0, #0
    9b24:	d0f0      	beq.n	9b08 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x5c>
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    9b26:	782b      	ldrb	r3, [r5, #0]
    9b28:	8882      	ldrh	r2, [r0, #4]
    9b2a:	3b01      	subs	r3, #1
    9b2c:	fb08 7303 	mla	r3, r8, r3, r7
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    9b30:	4620      	mov	r0, r4
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    9b32:	815a      	strh	r2, [r3, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    9b34:	f011 fbcc 	bl	1b2d0 <bt_gatt_dm_conn_get>
    9b38:	7829      	ldrb	r1, [r5, #0]
    9b3a:	3901      	subs	r1, #1
    9b3c:	fb08 7101 	mla	r1, r8, r1, r7
    9b40:	f00b faac 	bl	1509c <bt_gatt_subscribe>
		if (err) 
    9b44:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9b48:	d002      	beq.n	9b50 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xa4>
			printk("Subscription failed (err %d)\n", err);
    9b4a:	4845      	ldr	r0, [pc, #276]	; (9c60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b4>)
    9b4c:	f010 ff9e 	bl	1aa8c <printk>
		bt_gatt_dm_data_release(dm);
    9b50:	4620      	mov	r0, r4
    9b52:	f011 fc1e 	bl	1b392 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9b56:	782d      	ldrb	r5, [r5, #0]
    9b58:	2d01      	cmp	r5, #1
    9b5a:	d004      	beq.n	9b66 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xba>
    9b5c:	2d02      	cmp	r5, #2
    9b5e:	d04a      	beq.n	9bf6 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x14a>
}
    9b60:	b003      	add	sp, #12
    9b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (nbrAddresses == 1 && sensorInfos == 1)
    9b66:	4b3f      	ldr	r3, [pc, #252]	; (9c64 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b8>)
    9b68:	781c      	ldrb	r4, [r3, #0]
    9b6a:	2c01      	cmp	r4, #1
    9b6c:	d122      	bne.n	9bb4 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x108>
    9b6e:	4b3e      	ldr	r3, [pc, #248]	; (9c68 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1bc>)
    9b70:	781d      	ldrb	r5, [r3, #0]
    9b72:	2d01      	cmp	r5, #1
    9b74:	d110      	bne.n	9b98 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xec>
			printk("Discovery completed\n");
    9b76:	483d      	ldr	r0, [pc, #244]	; (9c6c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c0>)
    9b78:	f010 ff88 	bl	1aa8c <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9b7c:	4628      	mov	r0, r5
			subscriptionDone = true;
    9b7e:	7035      	strb	r5, [r6, #0]
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9b80:	f013 fdee 	bl	1d760 <dk_set_led_on>
			connectedCode[0] = 14;
    9b84:	230e      	movs	r3, #14
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b86:	462a      	mov	r2, r5
			connectedCode[0] = 14;
    9b88:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b8c:	4b38      	ldr	r3, [pc, #224]	; (9c70 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c4>)
    9b8e:	a901      	add	r1, sp, #4
    9b90:	6818      	ldr	r0, [r3, #0]
    9b92:	f000 fc4d 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    9b96:	e7e3      	b.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 1 && sensorInfos == 2)
    9b98:	2d02      	cmp	r5, #2
    9b9a:	d1e1      	bne.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Discovery completed\n");
    9b9c:	4833      	ldr	r0, [pc, #204]	; (9c6c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c0>)
    9b9e:	f010 ff75 	bl	1aa8c <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9ba2:	4620      	mov	r0, r4
			subscriptionDone = true;
    9ba4:	7034      	strb	r4, [r6, #0]
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9ba6:	f013 fddb 	bl	1d760 <dk_set_led_on>
			connectedCode[0] = 15;
    9baa:	230f      	movs	r3, #15
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9bac:	4622      	mov	r2, r4
			connectedCode[0] = 15;
    9bae:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9bb2:	e7eb      	b.n	9b8c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xe0>
		else if (nbrAddresses == 2 && (sensorInfos == 3 || sensorInfos == 5))	
    9bb4:	2c02      	cmp	r4, #2
    9bb6:	d11b      	bne.n	9bf0 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x144>
    9bb8:	4b2b      	ldr	r3, [pc, #172]	; (9c68 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1bc>)
    9bba:	781b      	ldrb	r3, [r3, #0]
    9bbc:	2b03      	cmp	r3, #3
    9bbe:	d001      	beq.n	9bc4 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x118>
    9bc0:	2b05      	cmp	r3, #5
    9bc2:	d10e      	bne.n	9be2 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x136>
			printk("First discovery completed\n");
    9bc4:	482b      	ldr	r0, [pc, #172]	; (9c74 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c8>)
    9bc6:	f010 ff61 	bl	1aa8c <printk>
			connectedCode[0] = 17;	// speed connected
    9bca:	2311      	movs	r3, #17
			connectedCode[0] = 21;	// cadence sensor connected
    9bcc:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9bd0:	4b27      	ldr	r3, [pc, #156]	; (9c70 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c4>)
    9bd2:	2201      	movs	r2, #1
    9bd4:	6818      	ldr	r0, [r3, #0]
    9bd6:	a901      	add	r1, sp, #4
    9bd8:	f000 fc2a 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    9bdc:	f7ff fecc 	bl	9978 <_ZN13DeviceManager8initScanEv>
    9be0:	e7be      	b.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 2 && sensorInfos == 6)
    9be2:	2b06      	cmp	r3, #6
    9be4:	d1bc      	bne.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("First discovery completed\n");
    9be6:	4823      	ldr	r0, [pc, #140]	; (9c74 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c8>)
    9be8:	f010 ff50 	bl	1aa8c <printk>
			connectedCode[0] = 18;	// cadence connected
    9bec:	2312      	movs	r3, #18
    9bee:	e7ed      	b.n	9bcc <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x120>
		else if (nbrAddresses == 3)
    9bf0:	2c03      	cmp	r4, #3
    9bf2:	d0e7      	beq.n	9bc4 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x118>
    9bf4:	e7b4      	b.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		if (nbrAddresses == 2 && sensorInfos == 3)
    9bf6:	4b1b      	ldr	r3, [pc, #108]	; (9c64 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b8>)
    9bf8:	781b      	ldrb	r3, [r3, #0]
    9bfa:	2b02      	cmp	r3, #2
    9bfc:	d115      	bne.n	9c2a <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17e>
    9bfe:	4b1a      	ldr	r3, [pc, #104]	; (9c68 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1bc>)
    9c00:	781b      	ldrb	r3, [r3, #0]
    9c02:	2b03      	cmp	r3, #3
    9c04:	d1ac      	bne.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Second discovery completed\n");
    9c06:	481c      	ldr	r0, [pc, #112]	; (9c78 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1cc>)
    9c08:	f010 ff40 	bl	1aa8c <printk>
			connectedCode[0] = 19;	// cadence sensor connected
    9c0c:	2313      	movs	r3, #19
    9c0e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    9c12:	4b17      	ldr	r3, [pc, #92]	; (9c70 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c4>)
    9c14:	2201      	movs	r2, #1
    9c16:	6818      	ldr	r0, [r3, #0]
    9c18:	a901      	add	r1, sp, #4
    9c1a:	f000 fc09 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9c1e:	2001      	movs	r0, #1
    9c20:	f013 fd9e 	bl	1d760 <dk_set_led_on>
			subscriptionDone = true;
    9c24:	2301      	movs	r3, #1
    9c26:	7033      	strb	r3, [r6, #0]
    9c28:	e79a      	b.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 3) 
    9c2a:	2b03      	cmp	r3, #3
    9c2c:	d198      	bne.n	9b60 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Second discovery completed\n");	
    9c2e:	4812      	ldr	r0, [pc, #72]	; (9c78 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1cc>)
    9c30:	f010 ff2c 	bl	1aa8c <printk>
			connectedCode[0] = 21;	// cadence sensor connected
    9c34:	2315      	movs	r3, #21
    9c36:	e7c9      	b.n	9bcc <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x120>
    9c38:	2000e31f 	.word	0x2000e31f
    9c3c:	2000e322 	.word	0x2000e322
    9c40:	2000999c 	.word	0x2000999c
    9c44:	00009485 	.word	0x00009485
    9c48:	0001f0bc 	.word	0x0001f0bc
    9c4c:	0001f56e 	.word	0x0001f56e
    9c50:	0001f596 	.word	0x0001f596
    9c54:	0001f0c0 	.word	0x0001f0c0
    9c58:	0001f5c1 	.word	0x0001f5c1
    9c5c:	0001f0c4 	.word	0x0001f0c4
    9c60:	0001f5ee 	.word	0x0001f5ee
    9c64:	2000e31a 	.word	0x2000e31a
    9c68:	2000e318 	.word	0x2000e318
    9c6c:	0001f2c4 	.word	0x0001f2c4
    9c70:	20009998 	.word	0x20009998
    9c74:	0001f60c 	.word	0x0001f60c
    9c78:	0001f2d9 	.word	0x0001f2d9

00009c7c <_ZN13DeviceManager11initCentralEv>:
{
    9c7c:	b510      	push	{r4, lr}
    9c7e:	4604      	mov	r4, r0
	printk("Init Central\n");
    9c80:	481e      	ldr	r0, [pc, #120]	; (9cfc <_ZN13DeviceManager11initCentralEv+0x80>)
    9c82:	f010 ff03 	bl	1aa8c <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9c86:	f7ff fdcd 	bl	9824 <_ZN13DeviceManager9getDeviceEv>
    9c8a:	2801      	cmp	r0, #1
    9c8c:	d007      	beq.n	9c9e <_ZN13DeviceManager11initCentralEv+0x22>
    9c8e:	2803      	cmp	r0, #3
    9c90:	d132      	bne.n	9cf8 <_ZN13DeviceManager11initCentralEv+0x7c>
		initScan();
    9c92:	f7ff fe71 	bl	9978 <_ZN13DeviceManager8initScanEv>
}
    9c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9c9a:	f7ff be55 	b.w	9948 <_ZN13DeviceManager9startScanEv>
			err = bt_enable(nullptr);
    9c9e:	2000      	movs	r0, #0
    9ca0:	f006 fd22 	bl	106e8 <bt_enable>
			if (err)
    9ca4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9ca8:	d004      	beq.n	9cb4 <_ZN13DeviceManager11initCentralEv+0x38>
				printk("Bluetooth init failed (err %d)\n", err);
    9caa:	4815      	ldr	r0, [pc, #84]	; (9d00 <_ZN13DeviceManager11initCentralEv+0x84>)
}
    9cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9cb0:	f010 beec 	b.w	1aa8c <printk>
			printk("Bluetooth ready\n");
    9cb4:	4813      	ldr	r0, [pc, #76]	; (9d04 <_ZN13DeviceManager11initCentralEv+0x88>)
    9cb6:	f010 fee9 	bl	1aa8c <printk>
			err = dk_leds_init();
    9cba:	f00c fef9 	bl	16ab0 <dk_leds_init>
			if (err) 
    9cbe:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9cc2:	d001      	beq.n	9cc8 <_ZN13DeviceManager11initCentralEv+0x4c>
				printk("LEDs init failed (err %d)\n", err);
    9cc4:	4810      	ldr	r0, [pc, #64]	; (9d08 <_ZN13DeviceManager11initCentralEv+0x8c>)
    9cc6:	e7f1      	b.n	9cac <_ZN13DeviceManager11initCentralEv+0x30>
			err = initButton();
    9cc8:	f7ff fdc0 	bl	984c <_ZN13DeviceManager10initButtonEv>
			if (err) 
    9ccc:	4601      	mov	r1, r0
    9cce:	b108      	cbz	r0, 9cd4 <_ZN13DeviceManager11initCentralEv+0x58>
				printk("Button init failed (err %d)\n", err);
    9cd0:	480e      	ldr	r0, [pc, #56]	; (9d0c <_ZN13DeviceManager11initCentralEv+0x90>)
    9cd2:	e7eb      	b.n	9cac <_ZN13DeviceManager11initCentralEv+0x30>
			err = bt_lbs_init(&lbs_callbacs);
    9cd4:	f104 0014 	add.w	r0, r4, #20
    9cd8:	f003 fd34 	bl	d744 <bt_lbs_init>
			if (err) 
    9cdc:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9ce0:	d001      	beq.n	9ce6 <_ZN13DeviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9ce2:	480b      	ldr	r0, [pc, #44]	; (9d10 <_ZN13DeviceManager11initCentralEv+0x94>)
    9ce4:	e7e2      	b.n	9cac <_ZN13DeviceManager11initCentralEv+0x30>
				settings_load();
    9ce6:	f011 f9ac 	bl	1b042 <settings_load>
				printk("Settings loaded\n");
    9cea:	480a      	ldr	r0, [pc, #40]	; (9d14 <_ZN13DeviceManager11initCentralEv+0x98>)
    9cec:	f010 fece 	bl	1aa8c <printk>
			bt_conn_cb_register(&conn_callbacks);
    9cf0:	4620      	mov	r0, r4
    9cf2:	f007 fb57 	bl	113a4 <bt_conn_cb_register>
    9cf6:	e7cc      	b.n	9c92 <_ZN13DeviceManager11initCentralEv+0x16>
}
    9cf8:	bd10      	pop	{r4, pc}
    9cfa:	bf00      	nop
    9cfc:	0001f627 	.word	0x0001f627
    9d00:	0001f4ae 	.word	0x0001f4ae
    9d04:	0001f635 	.word	0x0001f635
    9d08:	0001f476 	.word	0x0001f476
    9d0c:	0001f491 	.word	0x0001f491
    9d10:	0001f4e5 	.word	0x0001f4e5
    9d14:	0001f646 	.word	0x0001f646

00009d18 <_ZN13DeviceManager9setDeviceEbb>:
{
    9d18:	b410      	push	{r4}
    isPeripheral = p;
    9d1a:	4c09      	ldr	r4, [pc, #36]	; (9d40 <_ZN13DeviceManager9setDeviceEbb+0x28>)
{
    9d1c:	4603      	mov	r3, r0
    isPeripheral = p;
    9d1e:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9d20:	4c08      	ldr	r4, [pc, #32]	; (9d44 <_ZN13DeviceManager9setDeviceEbb+0x2c>)
    9d22:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9d24:	b139      	cbz	r1, 9d36 <_ZN13DeviceManager9setDeviceEbb+0x1e>
    9d26:	b11a      	cbz	r2, 9d30 <_ZN13DeviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9d28:	4618      	mov	r0, r3
}
    9d2a:	bc10      	pop	{r4}
		initPeripheral();
    9d2c:	f7ff bdc8 	b.w	98c0 <_ZN13DeviceManager14initPeripheralEv>
}
    9d30:	bc10      	pop	{r4}
		initCentral();
    9d32:	f7ff bfa3 	b.w	9c7c <_ZN13DeviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9d36:	2a00      	cmp	r2, #0
    9d38:	d1f6      	bne.n	9d28 <_ZN13DeviceManager9setDeviceEbb+0x10>
}
    9d3a:	bc10      	pop	{r4}
    9d3c:	4770      	bx	lr
    9d3e:	bf00      	nop
    9d40:	2000e319 	.word	0x2000e319
    9d44:	2000e35a 	.word	0x2000e35a

00009d48 <_ZN13DeviceManager19scanConnectionErrorEP19bt_scan_device_info>:
{
    9d48:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9d4a:	4803      	ldr	r0, [pc, #12]	; (9d58 <_ZN13DeviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9d4c:	f010 fe9e 	bl	1aa8c <printk>
}
    9d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9d54:	f7ff bdf8 	b.w	9948 <_ZN13DeviceManager9startScanEv>
    9d58:	0001f657 	.word	0x0001f657

00009d5c <_ZN13DeviceManager6reScanEh>:
{
    9d5c:	b510      	push	{r4, lr}
    9d5e:	4604      	mov	r4, r0
	bt_scan_filter_remove_all();	
    9d60:	f003 f9b0 	bl	d0c4 <bt_scan_filter_remove_all>
	switch (type)
    9d64:	2c02      	cmp	r4, #2
    9d66:	d019      	beq.n	9d9c <_ZN13DeviceManager6reScanEh+0x40>
    9d68:	2c03      	cmp	r4, #3
    9d6a:	d019      	beq.n	9da0 <_ZN13DeviceManager6reScanEh+0x44>
    9d6c:	2c01      	cmp	r4, #1
    9d6e:	d108      	bne.n	9d82 <_ZN13DeviceManager6reScanEh+0x26>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9d70:	490c      	ldr	r1, [pc, #48]	; (9da4 <_ZN13DeviceManager6reScanEh+0x48>)
    9d72:	2003      	movs	r0, #3
    9d74:	f003 f934 	bl	cfe0 <bt_scan_filter_add>
		if (err) 
    9d78:	b2c0      	uxtb	r0, r0
    9d7a:	b110      	cbz	r0, 9d82 <_ZN13DeviceManager6reScanEh+0x26>
			printk("Scanning filters cannot be set\n");
    9d7c:	480a      	ldr	r0, [pc, #40]	; (9da8 <_ZN13DeviceManager6reScanEh+0x4c>)
    9d7e:	f010 fe85 	bl	1aa8c <printk>
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9d82:	2100      	movs	r1, #0
    9d84:	2004      	movs	r0, #4
    9d86:	f003 f9c9 	bl	d11c <bt_scan_filter_enable>
	if (err) 
    9d8a:	b2c0      	uxtb	r0, r0
    9d8c:	b110      	cbz	r0, 9d94 <_ZN13DeviceManager6reScanEh+0x38>
		printk("Filters cannot be turned on\n");
    9d8e:	4807      	ldr	r0, [pc, #28]	; (9dac <_ZN13DeviceManager6reScanEh+0x50>)
    9d90:	f010 fe7c 	bl	1aa8c <printk>
}
    9d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	startScan();
    9d98:	f7ff bdd6 	b.w	9948 <_ZN13DeviceManager9startScanEv>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9d9c:	4904      	ldr	r1, [pc, #16]	; (9db0 <_ZN13DeviceManager6reScanEh+0x54>)
    9d9e:	e7e8      	b.n	9d72 <_ZN13DeviceManager6reScanEh+0x16>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9da0:	4904      	ldr	r1, [pc, #16]	; (9db4 <_ZN13DeviceManager6reScanEh+0x58>)
    9da2:	e7e6      	b.n	9d72 <_ZN13DeviceManager6reScanEh+0x16>
    9da4:	0001f0a8 	.word	0x0001f0a8
    9da8:	0001f531 	.word	0x0001f531
    9dac:	0001f551 	.word	0x0001f551
    9db0:	0001f0ac 	.word	0x0001f0ac
    9db4:	0001f0b0 	.word	0x0001f0b0

00009db8 <_ZN13DeviceManager11discoverCSCEv>:
{
    9db8:	b510      	push	{r4, lr}
	printk("nbr conn: %d\n", nbrConnectionsCentral);
    9dba:	4c0c      	ldr	r4, [pc, #48]	; (9dec <_ZN13DeviceManager11discoverCSCEv+0x34>)
    9dbc:	480c      	ldr	r0, [pc, #48]	; (9df0 <_ZN13DeviceManager11discoverCSCEv+0x38>)
    9dbe:	7821      	ldrb	r1, [r4, #0]
    9dc0:	f010 fe64 	bl	1aa8c <printk>
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb_CSC, NULL);
    9dc4:	7820      	ldrb	r0, [r4, #0]
    9dc6:	4c0b      	ldr	r4, [pc, #44]	; (9df4 <_ZN13DeviceManager11discoverCSCEv+0x3c>)
    9dc8:	3801      	subs	r0, #1
    9dca:	490b      	ldr	r1, [pc, #44]	; (9df8 <_ZN13DeviceManager11discoverCSCEv+0x40>)
    9dcc:	2300      	movs	r3, #0
    9dce:	4a0b      	ldr	r2, [pc, #44]	; (9dfc <_ZN13DeviceManager11discoverCSCEv+0x44>)
    9dd0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9dd4:	f002 ff56 	bl	cc84 <bt_gatt_dm_start>
	if (err) 
    9dd8:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9ddc:	d004      	beq.n	9de8 <_ZN13DeviceManager11discoverCSCEv+0x30>
}
    9dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9de2:	4807      	ldr	r0, [pc, #28]	; (9e00 <_ZN13DeviceManager11discoverCSCEv+0x48>)
    9de4:	f010 be52 	b.w	1aa8c <printk>
}
    9de8:	bd10      	pop	{r4, pc}
    9dea:	bf00      	nop
    9dec:	2000e322 	.word	0x2000e322
    9df0:	0001f66a 	.word	0x0001f66a
    9df4:	20009a14 	.word	0x20009a14
    9df8:	0001f0b4 	.word	0x0001f0b4
    9dfc:	2000814c 	.word	0x2000814c
    9e00:	0001f678 	.word	0x0001f678

00009e04 <_ZN13DeviceManager10discoverHREv>:
{
    9e04:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_HRS, &discovery_cb_HR, NULL);
    9e06:	4b0a      	ldr	r3, [pc, #40]	; (9e30 <_ZN13DeviceManager10discoverHREv+0x2c>)
    9e08:	4c0a      	ldr	r4, [pc, #40]	; (9e34 <_ZN13DeviceManager10discoverHREv+0x30>)
    9e0a:	7818      	ldrb	r0, [r3, #0]
    9e0c:	490a      	ldr	r1, [pc, #40]	; (9e38 <_ZN13DeviceManager10discoverHREv+0x34>)
    9e0e:	3801      	subs	r0, #1
    9e10:	2300      	movs	r3, #0
    9e12:	4a0a      	ldr	r2, [pc, #40]	; (9e3c <_ZN13DeviceManager10discoverHREv+0x38>)
    9e14:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9e18:	f002 ff34 	bl	cc84 <bt_gatt_dm_start>
	if (err) 
    9e1c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9e20:	d004      	beq.n	9e2c <_ZN13DeviceManager10discoverHREv+0x28>
}
    9e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9e26:	4806      	ldr	r0, [pc, #24]	; (9e40 <_ZN13DeviceManager10discoverHREv+0x3c>)
    9e28:	f010 be30 	b.w	1aa8c <printk>
}
    9e2c:	bd10      	pop	{r4, pc}
    9e2e:	bf00      	nop
    9e30:	2000e322 	.word	0x2000e322
    9e34:	20009a14 	.word	0x20009a14
    9e38:	0001f0b8 	.word	0x0001f0b8
    9e3c:	20008140 	.word	0x20008140
    9e40:	0001f678 	.word	0x0001f678

00009e44 <_ZN13DeviceManager9connectedEP7bt_connh>:
{
    9e44:	b570      	push	{r4, r5, r6, lr}
    9e46:	b090      	sub	sp, #64	; 0x40
    9e48:	460c      	mov	r4, r1
	uint8_t error = bt_conn_get_info(conn,&info);
    9e4a:	a901      	add	r1, sp, #4
{
    9e4c:	4605      	mov	r5, r0
	uint8_t error = bt_conn_get_info(conn,&info);
    9e4e:	f007 fda9 	bl	119a4 <bt_conn_get_info>
	if (error)
    9e52:	b2c0      	uxtb	r0, r0
    9e54:	b120      	cbz	r0, 9e60 <_ZN13DeviceManager9connectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9e56:	4839      	ldr	r0, [pc, #228]	; (9f3c <_ZN13DeviceManager9connectedEP7bt_connh+0xf8>)
    9e58:	f010 fe18 	bl	1aa8c <printk>
}
    9e5c:	b010      	add	sp, #64	; 0x40
    9e5e:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9e60:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e64:	2b00      	cmp	r3, #0
    9e66:	d143      	bne.n	9ef0 <_ZN13DeviceManager9connectedEP7bt_connh+0xac>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9e68:	4628      	mov	r0, r5
    9e6a:	f012 faed 	bl	1c448 <bt_conn_get_dst>
    9e6e:	221e      	movs	r2, #30
    9e70:	a908      	add	r1, sp, #32
    9e72:	f7ff fc6b 	bl	974c <bt_addr_le_to_str.isra.0>
		if (err) 
    9e76:	b13c      	cbz	r4, 9e88 <_ZN13DeviceManager9connectedEP7bt_connh+0x44>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9e78:	4622      	mov	r2, r4
    9e7a:	4831      	ldr	r0, [pc, #196]	; (9f40 <_ZN13DeviceManager9connectedEP7bt_connh+0xfc>)
    9e7c:	a908      	add	r1, sp, #32
    9e7e:	f010 fe05 	bl	1aa8c <printk>
			startScan();
    9e82:	f7ff fd61 	bl	9948 <_ZN13DeviceManager9startScanEv>
			return;
    9e86:	e7e9      	b.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
		printk("Connected: %s\n", addr);
    9e88:	482e      	ldr	r0, [pc, #184]	; (9f44 <_ZN13DeviceManager9connectedEP7bt_connh+0x100>)
    9e8a:	a908      	add	r1, sp, #32
    9e8c:	f010 fdfe 	bl	1aa8c <printk>
		for (uint8_t i=0; i <= MAX_CONNECTIONS_CENTRAL-1; i++)
    9e90:	4b2d      	ldr	r3, [pc, #180]	; (9f48 <_ZN13DeviceManager9connectedEP7bt_connh+0x104>)
    9e92:	461e      	mov	r6, r3
			if (centralConnections[i] == nullptr)
    9e94:	f853 2b04 	ldr.w	r2, [r3], #4
    9e98:	b9e2      	cbnz	r2, 9ed4 <_ZN13DeviceManager9connectedEP7bt_connh+0x90>
				centralConnections[i] = bt_conn_ref(conn);
    9e9a:	4628      	mov	r0, r5
    9e9c:	f012 fa9b 	bl	1c3d6 <bt_conn_ref>
    9ea0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
		bt_conn_unref(conn);
    9ea4:	4628      	mov	r0, r5
    9ea6:	f007 fbeb 	bl	11680 <bt_conn_unref>
		nbrConnectionsCentral++;
    9eaa:	4a28      	ldr	r2, [pc, #160]	; (9f4c <_ZN13DeviceManager9connectedEP7bt_connh+0x108>)
    9eac:	7813      	ldrb	r3, [r2, #0]
    9eae:	3301      	adds	r3, #1
    9eb0:	b2db      	uxtb	r3, r3
    9eb2:	7013      	strb	r3, [r2, #0]
		if (cscDisconnected)
    9eb4:	4a26      	ldr	r2, [pc, #152]	; (9f50 <_ZN13DeviceManager9connectedEP7bt_connh+0x10c>)
    9eb6:	7811      	ldrb	r1, [r2, #0]
    9eb8:	b109      	cbz	r1, 9ebe <_ZN13DeviceManager9connectedEP7bt_connh+0x7a>
			cscDisconnected = false;
    9eba:	2100      	movs	r1, #0
    9ebc:	7011      	strb	r1, [r2, #0]
		switch (sensorInfos)
    9ebe:	4a25      	ldr	r2, [pc, #148]	; (9f54 <_ZN13DeviceManager9connectedEP7bt_connh+0x110>)
    9ec0:	7812      	ldrb	r2, [r2, #0]
    9ec2:	3a01      	subs	r2, #1
    9ec4:	2a06      	cmp	r2, #6
    9ec6:	d8c9      	bhi.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
    9ec8:	e8df f002 	tbb	[pc, r2]
    9ecc:	080a0a0a 	.word	0x080a0a0a
    9ed0:	0d0d      	.short	0x0d0d
    9ed2:	0f          	.byte	0x0f
    9ed3:	00          	.byte	0x00
		for (uint8_t i=0; i <= MAX_CONNECTIONS_CENTRAL-1; i++)
    9ed4:	3401      	adds	r4, #1
    9ed6:	2c05      	cmp	r4, #5
    9ed8:	d1dc      	bne.n	9e94 <_ZN13DeviceManager9connectedEP7bt_connh+0x50>
    9eda:	e7e3      	b.n	9ea4 <_ZN13DeviceManager9connectedEP7bt_connh+0x60>
			if (nbrConnectionsCentral <= 2)
    9edc:	2b02      	cmp	r3, #2
    9ede:	d804      	bhi.n	9eea <_ZN13DeviceManager9connectedEP7bt_connh+0xa6>
				discoverCSC();
    9ee0:	f7ff ff6a 	bl	9db8 <_ZN13DeviceManager11discoverCSCEv>
    9ee4:	e7ba      	b.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
			if (nbrConnectionsCentral == 1)
    9ee6:	2b01      	cmp	r3, #1
    9ee8:	d0fa      	beq.n	9ee0 <_ZN13DeviceManager9connectedEP7bt_connh+0x9c>
			discoverHR();
    9eea:	f7ff ff8b 	bl	9e04 <_ZN13DeviceManager10discoverHREv>
			break;
    9eee:	e7b5      	b.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9ef0:	2b01      	cmp	r3, #1
    9ef2:	d1b3      	bne.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
		if (err) 
    9ef4:	b124      	cbz	r4, 9f00 <_ZN13DeviceManager9connectedEP7bt_connh+0xbc>
			printk("Connection failed (err %u)\n", err);
    9ef6:	4621      	mov	r1, r4
    9ef8:	4817      	ldr	r0, [pc, #92]	; (9f58 <_ZN13DeviceManager9connectedEP7bt_connh+0x114>)
    9efa:	f010 fdc7 	bl	1aa8c <printk>
			return;
    9efe:	e7ad      	b.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
		disconnectOnce = true;
    9f00:	4a16      	ldr	r2, [pc, #88]	; (9f5c <_ZN13DeviceManager9connectedEP7bt_connh+0x118>)
		printk("Connected with application\n");
    9f02:	4817      	ldr	r0, [pc, #92]	; (9f60 <_ZN13DeviceManager9connectedEP7bt_connh+0x11c>)
		disconnectOnce = true;
    9f04:	7013      	strb	r3, [r2, #0]
		connectedPeripheral = true;
    9f06:	4a17      	ldr	r2, [pc, #92]	; (9f64 <_ZN13DeviceManager9connectedEP7bt_connh+0x120>)
    9f08:	7013      	strb	r3, [r2, #0]
		printk("Connected with application\n");
    9f0a:	f010 fdbf 	bl	1aa8c <printk>
		peripheralConn = bt_conn_ref(conn);
    9f0e:	4628      	mov	r0, r5
    9f10:	f012 fa61 	bl	1c3d6 <bt_conn_ref>
    9f14:	4b14      	ldr	r3, [pc, #80]	; (9f68 <_ZN13DeviceManager9connectedEP7bt_connh+0x124>)
    9f16:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9f18:	4628      	mov	r0, r5
    9f1a:	f007 fbb1 	bl	11680 <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);			
    9f1e:	4620      	mov	r0, r4
    9f20:	f013 fc1e 	bl	1d760 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9f24:	f7ff fc7e 	bl	9824 <_ZN13DeviceManager9getDeviceEv>
    9f28:	2803      	cmp	r0, #3
    9f2a:	d197      	bne.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
    9f2c:	4b07      	ldr	r3, [pc, #28]	; (9f4c <_ZN13DeviceManager9connectedEP7bt_connh+0x108>)
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	2b00      	cmp	r3, #0
    9f32:	d193      	bne.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
			initScan();
    9f34:	f7ff fd20 	bl	9978 <_ZN13DeviceManager8initScanEv>
    9f38:	e790      	b.n	9e5c <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
    9f3a:	bf00      	nop
    9f3c:	0001f6a3 	.word	0x0001f6a3
    9f40:	0001f6c9 	.word	0x0001f6c9
    9f44:	0001f6e7 	.word	0x0001f6e7
    9f48:	20009a14 	.word	0x20009a14
    9f4c:	2000e322 	.word	0x2000e322
    9f50:	2000e31c 	.word	0x2000e31c
    9f54:	2000e318 	.word	0x2000e318
    9f58:	0001f6f6 	.word	0x0001f6f6
    9f5c:	20008440 	.word	0x20008440
    9f60:	0001f712 	.word	0x0001f712
    9f64:	2000e320 	.word	0x2000e320
    9f68:	20009998 	.word	0x20009998

00009f6c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9f6c:	b570      	push	{r4, r5, r6, lr}
    9f6e:	b08e      	sub	sp, #56	; 0x38
    9f70:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9f72:	f000 fa97 	bl	a4a4 <_Z17getNbrOfAddressesv>
    9f76:	4b43      	ldr	r3, [pc, #268]	; (a084 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9f78:	4604      	mov	r4, r0
    9f7a:	4e43      	ldr	r6, [pc, #268]	; (a088 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9f7c:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9f7e:	2800      	cmp	r0, #0
    9f80:	d047      	beq.n	a012 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa6>
		ready = true;
    9f82:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9f84:	2802      	cmp	r0, #2
		ready = true;
    9f86:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9f88:	d033      	beq.n	9ff2 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x86>
    9f8a:	2803      	cmp	r0, #3
    9f8c:	d037      	beq.n	9ffe <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x92>
    9f8e:	4288      	cmp	r0, r1
    9f90:	d103      	bne.n	9f9a <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9f92:	4601      	mov	r1, r0
    9f94:	483d      	ldr	r0, [pc, #244]	; (a08c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
			getAddress(sensor2,2);
    9f96:	f000 fa8b 	bl	a4b0 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9f9a:	682b      	ldr	r3, [r5, #0]
    9f9c:	221e      	movs	r2, #30
    9f9e:	6818      	ldr	r0, [r3, #0]
    9fa0:	a906      	add	r1, sp, #24
    9fa2:	f7ff fbd3 	bl	974c <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9fa6:	682b      	ldr	r3, [r5, #0]
    9fa8:	2212      	movs	r2, #18
    9faa:	6818      	ldr	r0, [r3, #0]
    9fac:	a901      	add	r1, sp, #4
    9fae:	f7ff fbcd 	bl	974c <bt_addr_le_to_str.isra.0>
	if (ready)
    9fb2:	7833      	ldrb	r3, [r6, #0]
    9fb4:	2b00      	cmp	r3, #0
    9fb6:	d042      	beq.n	a03e <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd2>
		scanning = false;
    9fb8:	2600      	movs	r6, #0
		bt_scan_stop();
    9fba:	f011 fa02 	bl	1b3c2 <bt_scan_stop>
		scanning = false;
    9fbe:	4b34      	ldr	r3, [pc, #208]	; (a090 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9fc0:	4932      	ldr	r1, [pc, #200]	; (a08c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9fc2:	a801      	add	r0, sp, #4
		scanning = false;
    9fc4:	701e      	strb	r6, [r3, #0]
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9fc6:	f010 fcb2 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    9fca:	b330      	cbz	r0, a01a <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xae>
    9fcc:	4c31      	ldr	r4, [pc, #196]	; (a094 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9fce:	7823      	ldrb	r3, [r4, #0]
    9fd0:	b31b      	cbz	r3, a01a <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xae>
			printk("Correct sensor found\n");
    9fd2:	4831      	ldr	r0, [pc, #196]	; (a098 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9fd4:	f010 fd5a 	bl	1aa8c <printk>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9fd8:	4b30      	ldr	r3, [pc, #192]	; (a09c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9fda:	6828      	ldr	r0, [r5, #0]
    9fdc:	781a      	ldrb	r2, [r3, #0]
    9fde:	4b30      	ldr	r3, [pc, #192]	; (a0a0 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9fe0:	4930      	ldr	r1, [pc, #192]	; (a0a4 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9fe2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9fe6:	686a      	ldr	r2, [r5, #4]
			once_sensor1 = false;
    9fe8:	7026      	strb	r6, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9fea:	6800      	ldr	r0, [r0, #0]
    9fec:	f007 fd06 	bl	119fc <bt_conn_le_create>
}
    9ff0:	e025      	b.n	a03e <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd2>
			getAddress(sensor1,1);
    9ff2:	4826      	ldr	r0, [pc, #152]	; (a08c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9ff4:	f000 fa5c 	bl	a4b0 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9ff8:	4621      	mov	r1, r4
    9ffa:	482b      	ldr	r0, [pc, #172]	; (a0a8 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9ffc:	e7cb      	b.n	9f96 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9ffe:	4823      	ldr	r0, [pc, #140]	; (a08c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    a000:	f000 fa56 	bl	a4b0 <_Z10getAddressPch>
			getAddress(sensor2,2);
    a004:	2102      	movs	r1, #2
    a006:	4828      	ldr	r0, [pc, #160]	; (a0a8 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    a008:	f000 fa52 	bl	a4b0 <_Z10getAddressPch>
			getAddress(sensor3,3);
    a00c:	4621      	mov	r1, r4
    a00e:	4827      	ldr	r0, [pc, #156]	; (a0ac <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    a010:	e7c1      	b.n	9f96 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    a012:	f7ff fcb1 	bl	9978 <_ZN13DeviceManager8initScanEv>
		ready = false;
    a016:	7034      	strb	r4, [r6, #0]
    a018:	e7bf      	b.n	9f9a <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2 && !once_sensor1)
    a01a:	4923      	ldr	r1, [pc, #140]	; (a0a8 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    a01c:	a801      	add	r0, sp, #4
    a01e:	f010 fc86 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    a022:	b128      	cbz	r0, a030 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
    a024:	4c22      	ldr	r4, [pc, #136]	; (a0b0 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    a026:	7823      	ldrb	r3, [r4, #0]
    a028:	b113      	cbz	r3, a030 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
    a02a:	4b1a      	ldr	r3, [pc, #104]	; (a094 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    a02c:	781e      	ldrb	r6, [r3, #0]
    a02e:	b146      	cbz	r6, a042 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd6>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    a030:	491e      	ldr	r1, [pc, #120]	; (a0ac <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    a032:	a801      	add	r0, sp, #4
    a034:	f010 fc7b 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    a038:	b980      	cbnz	r0, a05c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf0>
			startScan();
    a03a:	f7ff fc85 	bl	9948 <_ZN13DeviceManager9startScanEv>
}
    a03e:	b00e      	add	sp, #56	; 0x38
    a040:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    a042:	4815      	ldr	r0, [pc, #84]	; (a098 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    a044:	f010 fd22 	bl	1aa8c <printk>
			err = bt_conn_le_create(device_info->recv_info->addr,
    a048:	4b14      	ldr	r3, [pc, #80]	; (a09c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    a04a:	6828      	ldr	r0, [r5, #0]
    a04c:	781a      	ldrb	r2, [r3, #0]
    a04e:	4b14      	ldr	r3, [pc, #80]	; (a0a0 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    a050:	4918      	ldr	r1, [pc, #96]	; (a0b4 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    a052:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			once_sensor2 = false;
    a056:	7026      	strb	r6, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    a058:	686a      	ldr	r2, [r5, #4]
    a05a:	e7c6      	b.n	9fea <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7e>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    a05c:	4c16      	ldr	r4, [pc, #88]	; (a0b8 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14c>)
    a05e:	7823      	ldrb	r3, [r4, #0]
    a060:	2b00      	cmp	r3, #0
    a062:	d0ea      	beq.n	a03a <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xce>
			printk("Correct sensor found\n");
    a064:	480c      	ldr	r0, [pc, #48]	; (a098 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    a066:	f010 fd11 	bl	1aa8c <printk>
			once_sensor3 = false;
    a06a:	2300      	movs	r3, #0
    a06c:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    a06e:	f011 f9a8 	bl	1b3c2 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    a072:	4b0a      	ldr	r3, [pc, #40]	; (a09c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    a074:	6828      	ldr	r0, [r5, #0]
    a076:	781a      	ldrb	r2, [r3, #0]
    a078:	4b09      	ldr	r3, [pc, #36]	; (a0a0 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    a07a:	4910      	ldr	r1, [pc, #64]	; (a0bc <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    a07c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a080:	686a      	ldr	r2, [r5, #4]
    a082:	e7b2      	b.n	9fea <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7e>
    a084:	2000e31a 	.word	0x2000e31a
    a088:	2000e362 	.word	0x2000e362
    a08c:	2000e326 	.word	0x2000e326
    a090:	2000e359 	.word	0x2000e359
    a094:	2000843d 	.word	0x2000843d
    a098:	0001f72e 	.word	0x0001f72e
    a09c:	2000e322 	.word	0x2000e322
    a0a0:	20009a14 	.word	0x20009a14
    a0a4:	0001e80c 	.word	0x0001e80c
    a0a8:	2000e337 	.word	0x2000e337
    a0ac:	2000e348 	.word	0x2000e348
    a0b0:	2000843e 	.word	0x2000843e
    a0b4:	0001e81c 	.word	0x0001e81c
    a0b8:	2000843f 	.word	0x2000843f
    a0bc:	0001e82c 	.word	0x0001e82c

0000a0c0 <_ZN13DeviceManager12disconnectedEP7bt_connh>:
{
    a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c4:	b096      	sub	sp, #88	; 0x58
    a0c6:	460d      	mov	r5, r1
	uint8_t err = bt_conn_get_info(conn,&info);
    a0c8:	a907      	add	r1, sp, #28
{
    a0ca:	4680      	mov	r8, r0
	uint8_t err = bt_conn_get_info(conn,&info);
    a0cc:	f007 fc6a 	bl	119a4 <bt_conn_get_info>
	if (err)
    a0d0:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    a0d4:	d005      	beq.n	a0e2 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x22>
		printk("Cannot get info of connection object\n");
    a0d6:	4877      	ldr	r0, [pc, #476]	; (a2b4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1f4>)
    a0d8:	f010 fcd8 	bl	1aa8c <printk>
}
    a0dc:	b016      	add	sp, #88	; 0x58
    a0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    a0e2:	f89d 401d 	ldrb.w	r4, [sp, #29]
    a0e6:	2c01      	cmp	r4, #1
    a0e8:	d110      	bne.n	a10c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x4c>
		peripheralDisconnected = true;
    a0ea:	4b73      	ldr	r3, [pc, #460]	; (a2b8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1f8>)
		setDiameter(0);
    a0ec:	4630      	mov	r0, r6
		peripheralDisconnected = true;
    a0ee:	701c      	strb	r4, [r3, #0]
		connectedPeripheral = false;
    a0f0:	4b72      	ldr	r3, [pc, #456]	; (a2bc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1fc>)
    a0f2:	701e      	strb	r6, [r3, #0]
		setDiameter(0);
    a0f4:	f000 f9cc 	bl	a490 <_Z11setDiameterh>
		printk("Disconnected from Application (reason %u)\n", reason);		
    a0f8:	4629      	mov	r1, r5
    a0fa:	4871      	ldr	r0, [pc, #452]	; (a2c0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x200>)
    a0fc:	f010 fcc6 	bl	1aa8c <printk>
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    a100:	4630      	mov	r0, r6
    a102:	f013 fb30 	bl	1d766 <dk_set_led_off>
		startAdvertising();
    a106:	f7ff fbb3 	bl	9870 <_ZN13DeviceManager16startAdvertisingEv>
    a10a:	e7e7      	b.n	a0dc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    a10c:	2c00      	cmp	r4, #0
    a10e:	d1e5      	bne.n	a0dc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c>
		subscriptionDone = false;
    a110:	4f6c      	ldr	r7, [pc, #432]	; (a2c4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x204>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a112:	4640      	mov	r0, r8
		subscriptionDone = false;
    a114:	703c      	strb	r4, [r7, #0]
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a116:	f012 f997 	bl	1c448 <bt_conn_get_dst>
    a11a:	221e      	movs	r2, #30
    a11c:	a90e      	add	r1, sp, #56	; 0x38
    a11e:	f7ff fb15 	bl	974c <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    a122:	4869      	ldr	r0, [pc, #420]	; (a2c8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x208>)
    a124:	a90e      	add	r1, sp, #56	; 0x38
    a126:	462a      	mov	r2, r5
    a128:	f010 fcb0 	bl	1aa8c <printk>
		if (checkAddresses(addr,sensor1))
    a12c:	4967      	ldr	r1, [pc, #412]	; (a2cc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x20c>)
    a12e:	a80e      	add	r0, sp, #56	; 0x38
    a130:	f010 fbfd 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    a134:	b1e0      	cbz	r0, a170 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xb0>
			once_sensor1 = true;
    a136:	2501      	movs	r5, #1
    a138:	4b65      	ldr	r3, [pc, #404]	; (a2d0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x210>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a13a:	4628      	mov	r0, r5
			once_sensor1 = true;
    a13c:	701d      	strb	r5, [r3, #0]
			subscriptionDone = false;
    a13e:	703c      	strb	r4, [r7, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a140:	f013 fb11 	bl	1d766 <dk_set_led_off>
			if (sensorInfos == 7)
    a144:	4b63      	ldr	r3, [pc, #396]	; (a2d4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x214>)
    a146:	781a      	ldrb	r2, [r3, #0]
    a148:	4b63      	ldr	r3, [pc, #396]	; (a2d8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x218>)
    a14a:	2a07      	cmp	r2, #7
    a14c:	d175      	bne.n	a23a <_ZN13DeviceManager12disconnectedEP7bt_connh+0x17a>
				hrDisconnected = true;
    a14e:	4a63      	ldr	r2, [pc, #396]	; (a2dc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x21c>)
    a150:	7015      	strb	r5, [r2, #0]
				reconnectedHeartRate = true;
    a152:	4a63      	ldr	r2, [pc, #396]	; (a2e0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x220>)
    a154:	7015      	strb	r5, [r2, #0]
				if (!serviceNotFound)	// don't show disconnected message to user
    a156:	781a      	ldrb	r2, [r3, #0]
    a158:	2a00      	cmp	r2, #0
    a15a:	d16c      	bne.n	a236 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x176>
					disconnectedCode[0] = 13;
    a15c:	230d      	movs	r3, #13
    a15e:	f88d 3004 	strb.w	r3, [sp, #4]
					data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a162:	4b60      	ldr	r3, [pc, #384]	; (a2e4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x224>)
    a164:	462a      	mov	r2, r5
    a166:	6818      	ldr	r0, [r3, #0]
    a168:	a901      	add	r1, sp, #4
    a16a:	f000 f961 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_HEARTRATE;
    a16e:	2403      	movs	r4, #3
		if (checkAddresses(addr,sensor2))
    a170:	495d      	ldr	r1, [pc, #372]	; (a2e8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x228>)
    a172:	a80e      	add	r0, sp, #56	; 0x38
    a174:	f010 fbdb 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    a178:	b1e0      	cbz	r0, a1b4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xf4>
			once_sensor2 = true;
    a17a:	2401      	movs	r4, #1
			subscriptionDone = false;
    a17c:	2500      	movs	r5, #0
			once_sensor2 = true;
    a17e:	4b5b      	ldr	r3, [pc, #364]	; (a2ec <_ZN13DeviceManager12disconnectedEP7bt_connh+0x22c>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a180:	4620      	mov	r0, r4
			once_sensor2 = true;
    a182:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    a184:	703d      	strb	r5, [r7, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a186:	f013 faee 	bl	1d766 <dk_set_led_off>
			if (sensorInfos == 3 || sensorInfos == 4)	
    a18a:	4b52      	ldr	r3, [pc, #328]	; (a2d4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x214>)
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	3b03      	subs	r3, #3
    a190:	42a3      	cmp	r3, r4
    a192:	4b51      	ldr	r3, [pc, #324]	; (a2d8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x218>)
    a194:	d875      	bhi.n	a282 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c2>
				cscDisconnected = true;
    a196:	4a56      	ldr	r2, [pc, #344]	; (a2f0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x230>)
    a198:	7014      	strb	r4, [r2, #0]
				if (!serviceNotFound)	// don't show disconnected message to user
    a19a:	781a      	ldrb	r2, [r3, #0]
    a19c:	2a00      	cmp	r2, #0
    a19e:	d16e      	bne.n	a27e <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1be>
					disconnectedCode[0] = 12;
    a1a0:	230c      	movs	r3, #12
    a1a2:	f88d 3004 	strb.w	r3, [sp, #4]
					data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1a6:	4b4f      	ldr	r3, [pc, #316]	; (a2e4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x224>)
    a1a8:	4622      	mov	r2, r4
    a1aa:	6818      	ldr	r0, [r3, #0]
    a1ac:	a901      	add	r1, sp, #4
    a1ae:	f000 f93f 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_CSC_CADENCE;
    a1b2:	2402      	movs	r4, #2
		if (checkAddresses(addr,sensor3))
    a1b4:	494f      	ldr	r1, [pc, #316]	; (a2f4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x234>)
    a1b6:	a80e      	add	r0, sp, #56	; 0x38
    a1b8:	f010 fbb9 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    a1bc:	b1c8      	cbz	r0, a1f2 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x132>
			hrDisconnected = true;
    a1be:	2401      	movs	r4, #1
			subscriptionDone = false;
    a1c0:	2500      	movs	r5, #0
			hrDisconnected = true;
    a1c2:	4b46      	ldr	r3, [pc, #280]	; (a2dc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x21c>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a1c4:	4620      	mov	r0, r4
			hrDisconnected = true;
    a1c6:	701c      	strb	r4, [r3, #0]
			reconnectedHeartRate = true;
    a1c8:	4b45      	ldr	r3, [pc, #276]	; (a2e0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x220>)
			subscriptionDone = false;
    a1ca:	703d      	strb	r5, [r7, #0]
			reconnectedHeartRate = true;
    a1cc:	701c      	strb	r4, [r3, #0]
			once_sensor3 = true;
    a1ce:	4b4a      	ldr	r3, [pc, #296]	; (a2f8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x238>)
    a1d0:	701c      	strb	r4, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a1d2:	f013 fac8 	bl	1d766 <dk_set_led_off>
			if (!serviceNotFound)	// don't show disconnected message to user
    a1d6:	4b40      	ldr	r3, [pc, #256]	; (a2d8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x218>)
    a1d8:	781a      	ldrb	r2, [r3, #0]
    a1da:	2a00      	cmp	r2, #0
    a1dc:	d164      	bne.n	a2a8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e8>
				disconnectedCode[0] = 13;
    a1de:	230d      	movs	r3, #13
    a1e0:	f88d 3004 	strb.w	r3, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1e4:	4b3f      	ldr	r3, [pc, #252]	; (a2e4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x224>)
    a1e6:	4622      	mov	r2, r4
    a1e8:	6818      	ldr	r0, [r3, #0]
    a1ea:	a901      	add	r1, sp, #4
    a1ec:	f000 f920 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
			typeToReconnect = TYPE_HEARTRATE;
    a1f0:	2403      	movs	r4, #3
    a1f2:	2600      	movs	r6, #0
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a1f4:	4f41      	ldr	r7, [pc, #260]	; (a2fc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x23c>)
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    a1f6:	f8df 8108 	ldr.w	r8, [pc, #264]	; a300 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x240>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a1fa:	783b      	ldrb	r3, [r7, #0]
    a1fc:	b2f5      	uxtb	r5, r6
    a1fe:	3b01      	subs	r3, #1
    a200:	429d      	cmp	r5, r3
    a202:	dc53      	bgt.n	a2ac <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1ec>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    a204:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    a208:	f012 f91e 	bl	1c448 <bt_conn_get_dst>
    a20c:	a902      	add	r1, sp, #8
    a20e:	2212      	movs	r2, #18
    a210:	f7ff fa9c 	bl	974c <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    a214:	a902      	add	r1, sp, #8
    a216:	a80e      	add	r0, sp, #56	; 0x38
    a218:	f010 fb89 	bl	1a92e <_ZN13DeviceManager14checkAddressesEPcS0_>
    a21c:	b148      	cbz	r0, a232 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x172>
				bt_conn_unref(centralConnections[i]);
    a21e:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    a222:	f007 fa2d 	bl	11680 <bt_conn_unref>
				centralConnections[i] = nullptr;
    a226:	2300      	movs	r3, #0
    a228:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
				nbrConnectionsCentral--;
    a22c:	783b      	ldrb	r3, [r7, #0]
    a22e:	3b01      	subs	r3, #1
    a230:	703b      	strb	r3, [r7, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a232:	3601      	adds	r6, #1
    a234:	e7e1      	b.n	a1fa <_ZN13DeviceManager12disconnectedEP7bt_connh+0x13a>
					serviceNotFound = false;
    a236:	701c      	strb	r4, [r3, #0]
    a238:	e799      	b.n	a16e <_ZN13DeviceManager12disconnectedEP7bt_connh+0xae>
				if (sensorInfos == 6 || sensorInfos == 2)
    a23a:	f002 04fb 	and.w	r4, r2, #251	; 0xfb
    a23e:	492c      	ldr	r1, [pc, #176]	; (a2f0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x230>)
    a240:	2c02      	cmp	r4, #2
				if (!serviceNotFound)	// don't show disconnected message to user
    a242:	781a      	ldrb	r2, [r3, #0]
					cscDisconnected = true;
    a244:	700d      	strb	r5, [r1, #0]
				if (sensorInfos == 6 || sensorInfos == 2)
    a246:	d10c      	bne.n	a262 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1a2>
					if (!serviceNotFound)	// don't show disconnected message to user
    a248:	b94a      	cbnz	r2, a25e <_ZN13DeviceManager12disconnectedEP7bt_connh+0x19e>
						disconnectedCode[0] = 12;
    a24a:	230c      	movs	r3, #12
    a24c:	f88d 3004 	strb.w	r3, [sp, #4]
						data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a250:	4b24      	ldr	r3, [pc, #144]	; (a2e4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x224>)
    a252:	462a      	mov	r2, r5
    a254:	6818      	ldr	r0, [r3, #0]
    a256:	a901      	add	r1, sp, #4
    a258:	f000 f8ea 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
    a25c:	e788      	b.n	a170 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xb0>
						serviceNotFound = false;
    a25e:	701e      	strb	r6, [r3, #0]
    a260:	e786      	b.n	a170 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xb0>
					if (!serviceNotFound)	// don't show disconnected message to user
    a262:	b952      	cbnz	r2, a27a <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1ba>
						disconnectedCode[0] = 11;
    a264:	230b      	movs	r3, #11
    a266:	f88d 3004 	strb.w	r3, [sp, #4]
						data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a26a:	4b1e      	ldr	r3, [pc, #120]	; (a2e4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x224>)
    a26c:	462a      	mov	r2, r5
    a26e:	6818      	ldr	r0, [r3, #0]
    a270:	a901      	add	r1, sp, #4
    a272:	f000 f8dd 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
					typeToReconnect = TYPE_CSC_SPEED;
    a276:	462c      	mov	r4, r5
    a278:	e77a      	b.n	a170 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xb0>
						serviceNotFound = false;
    a27a:	701e      	strb	r6, [r3, #0]
    a27c:	e7fb      	b.n	a276 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1b6>
					serviceNotFound = false;
    a27e:	701d      	strb	r5, [r3, #0]
    a280:	e797      	b.n	a1b2 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xf2>
				hrDisconnected = true;
    a282:	4a16      	ldr	r2, [pc, #88]	; (a2dc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x21c>)
    a284:	7014      	strb	r4, [r2, #0]
				reconnectedHeartRate = true;
    a286:	4a16      	ldr	r2, [pc, #88]	; (a2e0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x220>)
    a288:	7014      	strb	r4, [r2, #0]
				if (!serviceNotFound)	// don't show disconnected message to user
    a28a:	781a      	ldrb	r2, [r3, #0]
    a28c:	b952      	cbnz	r2, a2a4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e4>
					disconnectedCode[0] = 13;
    a28e:	230d      	movs	r3, #13
    a290:	f88d 3004 	strb.w	r3, [sp, #4]
					data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a294:	4b13      	ldr	r3, [pc, #76]	; (a2e4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x224>)
    a296:	4622      	mov	r2, r4
    a298:	6818      	ldr	r0, [r3, #0]
    a29a:	a901      	add	r1, sp, #4
    a29c:	f000 f8c8 	bl	a430 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_HEARTRATE;
    a2a0:	2403      	movs	r4, #3
    a2a2:	e787      	b.n	a1b4 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xf4>
					serviceNotFound = false;
    a2a4:	701d      	strb	r5, [r3, #0]
    a2a6:	e7fb      	b.n	a2a0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e0>
				serviceNotFound = false;
    a2a8:	701d      	strb	r5, [r3, #0]
    a2aa:	e7a1      	b.n	a1f0 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x130>
		reScan(typeToReconnect);
    a2ac:	4620      	mov	r0, r4
    a2ae:	f7ff fd55 	bl	9d5c <_ZN13DeviceManager6reScanEh>
    a2b2:	e713      	b.n	a0dc <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c>
    a2b4:	0001f6a3 	.word	0x0001f6a3
    a2b8:	2000e323 	.word	0x2000e323
    a2bc:	2000e320 	.word	0x2000e320
    a2c0:	0001f744 	.word	0x0001f744
    a2c4:	2000e31f 	.word	0x2000e31f
    a2c8:	0001f76f 	.word	0x0001f76f
    a2cc:	2000e326 	.word	0x2000e326
    a2d0:	2000843d 	.word	0x2000843d
    a2d4:	2000e318 	.word	0x2000e318
    a2d8:	2000e31d 	.word	0x2000e31d
    a2dc:	2000e31b 	.word	0x2000e31b
    a2e0:	2000e321 	.word	0x2000e321
    a2e4:	20009998 	.word	0x20009998
    a2e8:	2000e337 	.word	0x2000e337
    a2ec:	2000843e 	.word	0x2000843e
    a2f0:	2000e31c 	.word	0x2000e31c
    a2f4:	2000e348 	.word	0x2000e348
    a2f8:	2000843f 	.word	0x2000843f
    a2fc:	2000e322 	.word	0x2000e322
    a300:	20009a14 	.word	0x20009a14

0000a304 <_ZN4Data8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    a304:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    a306:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    a308:	7403      	strb	r3, [r0, #16]
    switch (type)
    a30a:	d004      	beq.n	a316 <_ZN4Data8saveDataEPKv+0x12>
    a30c:	2b02      	cmp	r3, #2
    a30e:	d00d      	beq.n	a32c <_ZN4Data8saveDataEPKv+0x28>
        printk("Unknown type\n");
    a310:	480c      	ldr	r0, [pc, #48]	; (a344 <_ZN4Data8saveDataEPKv+0x40>)
    a312:	f010 bbbb 	b.w	1aa8c <printk>
        oldSumRevSpeed = sumRevSpeed;
    a316:	8803      	ldrh	r3, [r0, #0]
    a318:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    a31a:	8903      	ldrh	r3, [r0, #8]
    a31c:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    a31e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    a322:	8003      	strh	r3, [r0, #0]
    a324:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    a328:	8103      	strh	r3, [r0, #8]
        break;
    a32a:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    a32c:	8883      	ldrh	r3, [r0, #4]
    a32e:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    a330:	8983      	ldrh	r3, [r0, #12]
    a332:	81c3      	strh	r3, [r0, #14]
    a334:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    a338:	8083      	strh	r3, [r0, #4]
    a33a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    a33e:	8183      	strh	r3, [r0, #12]
}
    a340:	4770      	bx	lr
    a342:	bf00      	nop
    a344:	0001f7af 	.word	0x0001f7af

0000a348 <_ZN4Data7calcRPMEv>:
{
    a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a34c:	8985      	ldrh	r5, [r0, #12]
    a34e:	89c3      	ldrh	r3, [r0, #14]
{
    a350:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a352:	429d      	cmp	r5, r3
    a354:	d02f      	beq.n	a3b6 <_ZN4Data7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    a356:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    a35a:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a35e:	45c8      	cmp	r8, r9
    a360:	d029      	beq.n	a3b6 <_ZN4Data7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a362:	1aed      	subs	r5, r5, r3
    a364:	4628      	mov	r0, r5
    a366:	f7fe f8bd 	bl	84e4 <__aeabi_i2d>
    a36a:	2200      	movs	r2, #0
    a36c:	4b13      	ldr	r3, [pc, #76]	; (a3bc <_ZN4Data7calcRPMEv+0x74>)
    a36e:	f7fe f923 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    a372:	2200      	movs	r2, #0
    a374:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a376:	4606      	mov	r6, r0
    a378:	460f      	mov	r7, r1
        if (time < 0)
    a37a:	f7fe fb8f 	bl	8a9c <__aeabi_dcmplt>
    a37e:	b130      	cbz	r0, a38e <_ZN4Data7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    a380:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    a384:	30ff      	adds	r0, #255	; 0xff
    a386:	f7fe f8ad 	bl	84e4 <__aeabi_i2d>
    a38a:	4606      	mov	r6, r0
    a38c:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    a38e:	203c      	movs	r0, #60	; 0x3c
    a390:	eba8 0809 	sub.w	r8, r8, r9
    a394:	fb00 f008 	mul.w	r0, r0, r8
    a398:	f7fe f8a4 	bl	84e4 <__aeabi_i2d>
    a39c:	4632      	mov	r2, r6
    a39e:	463b      	mov	r3, r7
    a3a0:	f7fe fa34 	bl	880c <__aeabi_ddiv>
    a3a4:	4602      	mov	r2, r0
    a3a6:	460b      	mov	r3, r1
    a3a8:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        retVal = (uint16_t) rpm;
    a3ac:	f7fe fb9e 	bl	8aec <__aeabi_d2uiz>
    a3b0:	b280      	uxth	r0, r0
}
    a3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    a3b6:	2000      	movs	r0, #0
    a3b8:	e7fb      	b.n	a3b2 <_ZN4Data7calcRPMEv+0x6a>
    a3ba:	bf00      	nop
    a3bc:	3f500000 	.word	0x3f500000

0000a3c0 <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    a3c0:	2901      	cmp	r1, #1
{
    a3c2:	b510      	push	{r4, lr}
    a3c4:	460c      	mov	r4, r1
    switch(value)
    a3c6:	d004      	beq.n	a3d2 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x12>
    a3c8:	2902      	cmp	r1, #2
    a3ca:	d008      	beq.n	a3de <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1e>
    a3cc:	b971      	cbnz	r1, a3ec <_Z15on_cccd_changedPK12bt_gatt_attrt+0x2c>
            notificationsOn = true;
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    a3ce:	480a      	ldr	r0, [pc, #40]	; (a3f8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x38>)
    a3d0:	e000      	b.n	a3d4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
            printk("Notifications ON\n");
    a3d2:	480a      	ldr	r0, [pc, #40]	; (a3fc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x3c>)
            printk("Notifications OFF\n");
    a3d4:	f010 fb5a 	bl	1aa8c <printk>
            notificationsOn = false;
    a3d8:	4b09      	ldr	r3, [pc, #36]	; (a400 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x40>)
    a3da:	701c      	strb	r4, [r3, #0]
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    }
}
    a3dc:	e005      	b.n	a3ea <_Z15on_cccd_changedPK12bt_gatt_attrt+0x2a>
            printk("Notifications ON with Indications\n");
    a3de:	4809      	ldr	r0, [pc, #36]	; (a404 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x44>)
    a3e0:	f010 fb54 	bl	1aa8c <printk>
            notificationsOn = true;
    a3e4:	2201      	movs	r2, #1
    a3e6:	4b06      	ldr	r3, [pc, #24]	; (a400 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x40>)
    a3e8:	701a      	strb	r2, [r3, #0]
}
    a3ea:	bd10      	pop	{r4, pc}
            printk("Error, CCCD has been set to an invalid value\n");     
    a3ec:	4806      	ldr	r0, [pc, #24]	; (a408 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x48>)
}
    a3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Error, CCCD has been set to an invalid value\n");     
    a3f2:	f010 bb4b 	b.w	1aa8c <printk>
    a3f6:	bf00      	nop
    a3f8:	0001f836 	.word	0x0001f836
    a3fc:	0001f801 	.word	0x0001f801
    a400:	2000e57b 	.word	0x2000e57b
    a404:	0001f813 	.word	0x0001f813
    a408:	0001f849 	.word	0x0001f849

0000a40c <_Z17data_service_initv>:
{
    a40c:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    a40e:	22f0      	movs	r2, #240	; 0xf0
    a410:	2100      	movs	r1, #0
    a412:	4805      	ldr	r0, [pc, #20]	; (a428 <_Z17data_service_initv+0x1c>)
    a414:	f011 fd8f 	bl	1bf36 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    a418:	22f0      	movs	r2, #240	; 0xf0
    a41a:	2100      	movs	r1, #0
    a41c:	4803      	ldr	r0, [pc, #12]	; (a42c <_Z17data_service_initv+0x20>)
    a41e:	f011 fd8a 	bl	1bf36 <memset>
}
    a422:	2000      	movs	r0, #0
    a424:	bd08      	pop	{r3, pc}
    a426:	bf00      	nop
    a428:	2000e398 	.word	0x2000e398
    a42c:	2000e488 	.word	0x2000e488

0000a430 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    a430:	2300      	movs	r3, #0
{
    a432:	b510      	push	{r4, lr}
    a434:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    a436:	9303      	str	r3, [sp, #12]
    a438:	9305      	str	r3, [sp, #20]
    a43a:	4b0d      	ldr	r3, [pc, #52]	; (a470 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    a43c:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    a440:	9300      	str	r3, [sp, #0]
    a442:	4b0c      	ldr	r3, [pc, #48]	; (a474 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a444:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    a446:	9304      	str	r3, [sp, #16]
    };
    a448:	4b0b      	ldr	r3, [pc, #44]	; (a478 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    a44a:	4604      	mov	r4, r0
    };
    a44c:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a450:	4619      	mov	r1, r3
    a452:	f00a f8fb 	bl	1464c <bt_gatt_is_subscribed>
    a456:	b148      	cbz	r0, a46c <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    a458:	4669      	mov	r1, sp
    a45a:	4620      	mov	r0, r4
    a45c:	f009 ff14 	bl	14288 <bt_gatt_notify_cb>
    a460:	b110      	cbz	r0, a468 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    a462:	4806      	ldr	r0, [pc, #24]	; (a47c <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    a464:	f010 fb12 	bl	1aa8c <printk>
    }
}
    a468:	b006      	add	sp, #24
    a46a:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    a46c:	4804      	ldr	r0, [pc, #16]	; (a480 <_Z17data_service_sendP7bt_connPKht+0x50>)
    a46e:	e7f9      	b.n	a464 <_Z17data_service_sendP7bt_connPKht+0x34>
    a470:	0001f92d 	.word	0x0001f92d
    a474:	0001a955 	.word	0x0001a955
    a478:	0001e8dc 	.word	0x0001e8dc
    a47c:	0001f877 	.word	0x0001f877
    a480:	0001f89b 	.word	0x0001f89b

0000a484 <_Z11getDiameterv>:

double getDiameter() 
{
    return dia;
}
    a484:	4b01      	ldr	r3, [pc, #4]	; (a48c <_Z11getDiameterv+0x8>)
    a486:	e9d3 0100 	ldrd	r0, r1, [r3]
    a48a:	4770      	bx	lr
    a48c:	200086f0 	.word	0x200086f0

0000a490 <_Z11setDiameterh>:

void setDiameter(uint8_t diameter) 
{
    a490:	b508      	push	{r3, lr}
    dia = diameter;
    a492:	f7fe f817 	bl	84c4 <__aeabi_ui2d>
    a496:	4b02      	ldr	r3, [pc, #8]	; (a4a0 <_Z11setDiameterh+0x10>)
    a498:	e9c3 0100 	strd	r0, r1, [r3]
}
    a49c:	bd08      	pop	{r3, pc}
    a49e:	bf00      	nop
    a4a0:	200086f0 	.word	0x200086f0

0000a4a4 <_Z17getNbrOfAddressesv>:

uint8_t getNbrOfAddresses() 
{
    return nbrAddresses;
}
    a4a4:	4b01      	ldr	r3, [pc, #4]	; (a4ac <_Z17getNbrOfAddressesv+0x8>)
    a4a6:	7818      	ldrb	r0, [r3, #0]
    a4a8:	4770      	bx	lr
    a4aa:	bf00      	nop
    a4ac:	2000e57a 	.word	0x2000e57a

0000a4b0 <_Z10getAddressPch>:

void getAddress(char* outArray, uint8_t nbr) 
{
    switch (nbr)
    a4b0:	2902      	cmp	r1, #2
    a4b2:	d00d      	beq.n	a4d0 <_Z10getAddressPch+0x20>
    a4b4:	2903      	cmp	r1, #3
    a4b6:	d015      	beq.n	a4e4 <_Z10getAddressPch+0x34>
    a4b8:	2901      	cmp	r1, #1
    a4ba:	d11c      	bne.n	a4f6 <_Z10getAddressPch+0x46>
    a4bc:	4a0e      	ldr	r2, [pc, #56]	; (a4f8 <_Z10getAddressPch+0x48>)
    a4be:	1e43      	subs	r3, r0, #1
    a4c0:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    a4c2:	f812 1b01 	ldrb.w	r1, [r2], #1
    a4c6:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a4ca:	4283      	cmp	r3, r0
    a4cc:	d1f9      	bne.n	a4c2 <_Z10getAddressPch+0x12>
    a4ce:	4770      	bx	lr
    a4d0:	4a0a      	ldr	r2, [pc, #40]	; (a4fc <_Z10getAddressPch+0x4c>)
    a4d2:	1e43      	subs	r3, r0, #1
    a4d4:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    a4d6:	f812 1b01 	ldrb.w	r1, [r2], #1
    a4da:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a4de:	4283      	cmp	r3, r0
    a4e0:	d1f9      	bne.n	a4d6 <_Z10getAddressPch+0x26>
    a4e2:	4770      	bx	lr
    a4e4:	4a06      	ldr	r2, [pc, #24]	; (a500 <_Z10getAddressPch+0x50>)
    a4e6:	1e43      	subs	r3, r0, #1
    a4e8:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    a4ea:	f812 1b01 	ldrb.w	r1, [r2], #1
    a4ee:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a4f2:	4283      	cmp	r3, r0
    a4f4:	d1f9      	bne.n	a4ea <_Z10getAddressPch+0x3a>
        }    
        break;
    default:
        break;
    }
}
    a4f6:	4770      	bx	lr
    a4f8:	2000e364 	.word	0x2000e364
    a4fc:	2000e375 	.word	0x2000e375
    a500:	2000e386 	.word	0x2000e386

0000a504 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() 
{
    return infoSensors;
}
    a504:	4b01      	ldr	r3, [pc, #4]	; (a50c <_Z14getSensorInfosv+0x8>)
    a506:	7818      	ldrb	r0, [r3, #0]
    a508:	4770      	bx	lr
    a50a:	bf00      	nop
    a50c:	2000e579 	.word	0x2000e579

0000a510 <_Z18areNotificationsOnv>:

bool areNotificationsOn()
{
    return notificationsOn;
    a510:	4b01      	ldr	r3, [pc, #4]	; (a518 <_Z18areNotificationsOnv+0x8>)
    a512:	7818      	ldrb	r0, [r3, #0]
    a514:	4770      	bx	lr
    a516:	bf00      	nop
    a518:	2000e57b 	.word	0x2000e57b

0000a51c <discovery_service_not_found_cb>:
		break;
	}
}

void discovery_service_not_found_cb(struct bt_conn *conn, void *context)
{
    a51c:	b508      	push	{r3, lr}
	printk("The service could not be found during the discovery\n");
    a51e:	4807      	ldr	r0, [pc, #28]	; (a53c <discovery_service_not_found_cb+0x20>)
    a520:	f010 fab4 	bl	1aa8c <printk>
	service_found = false;
    a524:	2200      	movs	r2, #0
    a526:	4b06      	ldr	r3, [pc, #24]	; (a540 <discovery_service_not_found_cb+0x24>)
    a528:	701a      	strb	r2, [r3, #0]
	cntDevices--;
    a52a:	4a06      	ldr	r2, [pc, #24]	; (a544 <discovery_service_not_found_cb+0x28>)
    a52c:	7813      	ldrb	r3, [r2, #0]
    a52e:	3b01      	subs	r3, #1
    a530:	7013      	strb	r3, [r2, #0]
	free = true;
    a532:	2201      	movs	r2, #1
    a534:	4b04      	ldr	r3, [pc, #16]	; (a548 <discovery_service_not_found_cb+0x2c>)
    a536:	701a      	strb	r2, [r3, #0]
}
    a538:	bd08      	pop	{r3, pc}
    a53a:	bf00      	nop
    a53c:	0001f93e 	.word	0x0001f93e
    a540:	20008444 	.word	0x20008444
    a544:	2000e581 	.word	0x2000e581
    a548:	20008443 	.word	0x20008443

0000a54c <discovery_error_found_cb>:

void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
    a54c:	b508      	push	{r3, lr}
	printk("The discovery procedure failed with %d\n", err);
    a54e:	4805      	ldr	r0, [pc, #20]	; (a564 <discovery_error_found_cb+0x18>)
    a550:	f010 fa9c 	bl	1aa8c <printk>
	cntDevices--;
    a554:	4a04      	ldr	r2, [pc, #16]	; (a568 <discovery_error_found_cb+0x1c>)
    a556:	7813      	ldrb	r3, [r2, #0]
    a558:	3b01      	subs	r3, #1
    a55a:	7013      	strb	r3, [r2, #0]
	free = true;
    a55c:	2201      	movs	r2, #1
    a55e:	4b03      	ldr	r3, [pc, #12]	; (a56c <discovery_error_found_cb+0x20>)
    a560:	701a      	strb	r2, [r3, #0]
}
    a562:	bd08      	pop	{r3, pc}
    a564:	0001f973 	.word	0x0001f973
    a568:	2000e581 	.word	0x2000e581
    a56c:	20008443 	.word	0x20008443

0000a570 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a570:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    a572:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a574:	b08a      	sub	sp, #40	; 0x28
    a576:	4604      	mov	r4, r0
    a578:	460e      	mov	r6, r1
    a57a:	ad07      	add	r5, sp, #28
    a57c:	2b03      	cmp	r3, #3
    a57e:	d820      	bhi.n	a5c2 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a580:	e8df f003 	tbb	[pc, r3]
    a584:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    a588:	4911      	ldr	r1, [pc, #68]	; (a5d0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
    a58a:	4628      	mov	r0, r5
    a58c:	f011 fc4e 	bl	1be2c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a590:	7863      	ldrb	r3, [r4, #1]
    a592:	211e      	movs	r1, #30
    a594:	9304      	str	r3, [sp, #16]
    a596:	78a3      	ldrb	r3, [r4, #2]
    a598:	4630      	mov	r0, r6
    a59a:	9303      	str	r3, [sp, #12]
    a59c:	78e3      	ldrb	r3, [r4, #3]
    a59e:	4a0d      	ldr	r2, [pc, #52]	; (a5d4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a5a0:	9302      	str	r3, [sp, #8]
    a5a2:	7923      	ldrb	r3, [r4, #4]
    a5a4:	9505      	str	r5, [sp, #20]
    a5a6:	9301      	str	r3, [sp, #4]
    a5a8:	7963      	ldrb	r3, [r4, #5]
    a5aa:	9300      	str	r3, [sp, #0]
    a5ac:	79a3      	ldrb	r3, [r4, #6]
    a5ae:	f010 fa7a 	bl	1aaa6 <snprintk>
}
    a5b2:	b00a      	add	sp, #40	; 0x28
    a5b4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a5b6:	4908      	ldr	r1, [pc, #32]	; (a5d8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a5b8:	e7e7      	b.n	a58a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a5ba:	4908      	ldr	r1, [pc, #32]	; (a5dc <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a5bc:	e7e5      	b.n	a58a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a5be:	4908      	ldr	r1, [pc, #32]	; (a5e0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a5c0:	e7e3      	b.n	a58a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a5c2:	210a      	movs	r1, #10
    a5c4:	4628      	mov	r0, r5
    a5c6:	4a07      	ldr	r2, [pc, #28]	; (a5e4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a5c8:	f010 fa6d 	bl	1aaa6 <snprintk>
		break;
    a5cc:	e7e0      	b.n	a590 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a5ce:	bf00      	nop
    a5d0:	0001f3a8 	.word	0x0001f3a8
    a5d4:	0001f3d1 	.word	0x0001f3d1
    a5d8:	0001f3af 	.word	0x0001f3af
    a5dc:	0001f3b6 	.word	0x0001f3b6
    a5e0:	0001f3c0 	.word	0x0001f3c0
    a5e4:	0001f3ca 	.word	0x0001f3ca

0000a5e8 <read_battery_level_cb_speed>:
}

void read_battery_level_cb_speed(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a5e8:	b530      	push	{r4, r5, lr}
    a5ea:	4615      	mov	r5, r2
	readyValues[SPEED] = true;
    a5ec:	2201      	movs	r2, #1
    a5ee:	4b0d      	ldr	r3, [pc, #52]	; (a624 <read_battery_level_cb_speed+0x3c>)
{
    a5f0:	b089      	sub	sp, #36	; 0x24
	readyValues[SPEED] = true;
    a5f2:	701a      	strb	r2, [r3, #0]
{
    a5f4:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a5f6:	f010 fee6 	bl	1b3c6 <bt_bas_conn>
    a5fa:	f011 ff25 	bl	1c448 <bt_conn_get_dst>
    a5fe:	4669      	mov	r1, sp
    a600:	f7ff ffb6 	bl	a570 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a604:	b135      	cbz	r5, a614 <read_battery_level_cb_speed+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a606:	462a      	mov	r2, r5
    a608:	4669      	mov	r1, sp
    a60a:	4807      	ldr	r0, [pc, #28]	; (a628 <read_battery_level_cb_speed+0x40>)
    a60c:	f010 fa3e 	bl	1aa8c <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
	batteryLevels[SPEED] = battery_level;
}
    a610:	b009      	add	sp, #36	; 0x24
    a612:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a614:	4622      	mov	r2, r4
    a616:	4669      	mov	r1, sp
    a618:	4804      	ldr	r0, [pc, #16]	; (a62c <read_battery_level_cb_speed+0x44>)
    a61a:	f010 fa37 	bl	1aa8c <printk>
	batteryLevels[SPEED] = battery_level;
    a61e:	4b04      	ldr	r3, [pc, #16]	; (a630 <read_battery_level_cb_speed+0x48>)
    a620:	701c      	strb	r4, [r3, #0]
    a622:	e7f5      	b.n	a610 <read_battery_level_cb_speed+0x28>
    a624:	2000e583 	.word	0x2000e583
    a628:	0001f99b 	.word	0x0001f99b
    a62c:	0001f9b8 	.word	0x0001f9b8
    a630:	2000e57c 	.word	0x2000e57c

0000a634 <read_battery_level_cb_cadence>:

void read_battery_level_cb_cadence(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a634:	b530      	push	{r4, r5, lr}
    a636:	4615      	mov	r5, r2
	readyValues[CADENCE] = true;
    a638:	2201      	movs	r2, #1
    a63a:	4b0d      	ldr	r3, [pc, #52]	; (a670 <read_battery_level_cb_cadence+0x3c>)
{
    a63c:	b089      	sub	sp, #36	; 0x24
	readyValues[CADENCE] = true;
    a63e:	705a      	strb	r2, [r3, #1]
{
    a640:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a642:	f010 fec0 	bl	1b3c6 <bt_bas_conn>
    a646:	f011 feff 	bl	1c448 <bt_conn_get_dst>
    a64a:	4669      	mov	r1, sp
    a64c:	f7ff ff90 	bl	a570 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a650:	b135      	cbz	r5, a660 <read_battery_level_cb_cadence+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a652:	462a      	mov	r2, r5
    a654:	4669      	mov	r1, sp
    a656:	4807      	ldr	r0, [pc, #28]	; (a674 <read_battery_level_cb_cadence+0x40>)
    a658:	f010 fa18 	bl	1aa8c <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
	batteryLevels[CADENCE] = battery_level;
}
    a65c:	b009      	add	sp, #36	; 0x24
    a65e:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a660:	4622      	mov	r2, r4
    a662:	4669      	mov	r1, sp
    a664:	4804      	ldr	r0, [pc, #16]	; (a678 <read_battery_level_cb_cadence+0x44>)
    a666:	f010 fa11 	bl	1aa8c <printk>
	batteryLevels[CADENCE] = battery_level;
    a66a:	4b04      	ldr	r3, [pc, #16]	; (a67c <read_battery_level_cb_cadence+0x48>)
    a66c:	705c      	strb	r4, [r3, #1]
    a66e:	e7f5      	b.n	a65c <read_battery_level_cb_cadence+0x28>
    a670:	2000e583 	.word	0x2000e583
    a674:	0001f99b 	.word	0x0001f99b
    a678:	0001f9b8 	.word	0x0001f9b8
    a67c:	2000e57c 	.word	0x2000e57c

0000a680 <read_battery_level_cb_heartRate>:

void read_battery_level_cb_heartRate(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a680:	b530      	push	{r4, r5, lr}
    a682:	4615      	mov	r5, r2
	readyValues[HEARTRATE] = true;
    a684:	2201      	movs	r2, #1
    a686:	4b0d      	ldr	r3, [pc, #52]	; (a6bc <read_battery_level_cb_heartRate+0x3c>)
{
    a688:	b089      	sub	sp, #36	; 0x24
	readyValues[HEARTRATE] = true;
    a68a:	709a      	strb	r2, [r3, #2]
{
    a68c:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a68e:	f010 fe9a 	bl	1b3c6 <bt_bas_conn>
    a692:	f011 fed9 	bl	1c448 <bt_conn_get_dst>
    a696:	4669      	mov	r1, sp
    a698:	f7ff ff6a 	bl	a570 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a69c:	b135      	cbz	r5, a6ac <read_battery_level_cb_heartRate+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a69e:	462a      	mov	r2, r5
    a6a0:	4669      	mov	r1, sp
    a6a2:	4807      	ldr	r0, [pc, #28]	; (a6c0 <read_battery_level_cb_heartRate+0x40>)
    a6a4:	f010 f9f2 	bl	1aa8c <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
	batteryLevels[HEARTRATE] = battery_level;
}
    a6a8:	b009      	add	sp, #36	; 0x24
    a6aa:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a6ac:	4622      	mov	r2, r4
    a6ae:	4669      	mov	r1, sp
    a6b0:	4804      	ldr	r0, [pc, #16]	; (a6c4 <read_battery_level_cb_heartRate+0x44>)
    a6b2:	f010 f9eb 	bl	1aa8c <printk>
	batteryLevels[HEARTRATE] = battery_level;
    a6b6:	4b04      	ldr	r3, [pc, #16]	; (a6c8 <read_battery_level_cb_heartRate+0x48>)
    a6b8:	709c      	strb	r4, [r3, #2]
    a6ba:	e7f5      	b.n	a6a8 <read_battery_level_cb_heartRate+0x28>
    a6bc:	2000e583 	.word	0x2000e583
    a6c0:	0001f99b 	.word	0x0001f99b
    a6c4:	0001f9b8 	.word	0x0001f9b8
    a6c8:	2000e57c 	.word	0x2000e57c

0000a6cc <gatt_discover_battery_service>:
	free = false;
    a6cc:	2300      	movs	r3, #0
{
    a6ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	free = false;
    a6d0:	4a10      	ldr	r2, [pc, #64]	; (a714 <gatt_discover_battery_service+0x48>)
	cnt++;
    a6d2:	4d11      	ldr	r5, [pc, #68]	; (a718 <gatt_discover_battery_service+0x4c>)
	free = false;
    a6d4:	7013      	strb	r3, [r2, #0]
	cnt++;
    a6d6:	782a      	ldrb	r2, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a6d8:	a901      	add	r1, sp, #4
	cnt++;
    a6da:	3201      	adds	r2, #1
    a6dc:	702a      	strb	r2, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a6de:	f641 020f 	movw	r2, #6159	; 0x180f
    a6e2:	f8ad 2006 	strh.w	r2, [sp, #6]
    a6e6:	4a0d      	ldr	r2, [pc, #52]	; (a71c <gatt_discover_battery_service+0x50>)
    a6e8:	f88d 3004 	strb.w	r3, [sp, #4]
    a6ec:	f002 faca 	bl	cc84 <bt_gatt_dm_start>
	if (err) 
    a6f0:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    a6f4:	d00a      	beq.n	a70c <gatt_discover_battery_service+0x40>
		printk("Could not start the discovery procedure, error "
    a6f6:	4621      	mov	r1, r4
    a6f8:	4809      	ldr	r0, [pc, #36]	; (a720 <gatt_discover_battery_service+0x54>)
    a6fa:	f010 f9c7 	bl	1aa8c <printk>
		cnt--;
    a6fe:	782b      	ldrb	r3, [r5, #0]
		cntDevices--;
    a700:	4a08      	ldr	r2, [pc, #32]	; (a724 <gatt_discover_battery_service+0x58>)
		cnt--;
    a702:	3b01      	subs	r3, #1
    a704:	702b      	strb	r3, [r5, #0]
		cntDevices--;
    a706:	7813      	ldrb	r3, [r2, #0]
    a708:	3b01      	subs	r3, #1
    a70a:	7013      	strb	r3, [r2, #0]
}
    a70c:	4620      	mov	r0, r4
    a70e:	b003      	add	sp, #12
    a710:	bd30      	pop	{r4, r5, pc}
    a712:	bf00      	nop
    a714:	20008443 	.word	0x20008443
    a718:	2000e580 	.word	0x2000e580
    a71c:	200081b0 	.word	0x200081b0
    a720:	0001f9d1 	.word	0x0001f9d1
    a724:	2000e581 	.word	0x2000e581

0000a728 <initBatteryManager>:

void initBatteryManager(uint8_t sensorInfos)
{
    a728:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i <= 2; i++)
	{
		readyValues[i] = false;
    a72a:	2300      	movs	r3, #0
{
    a72c:	4604      	mov	r4, r0
		batteryLevels[i] = 0;
    a72e:	4a1a      	ldr	r2, [pc, #104]	; (a798 <initBatteryManager+0x70>)
		readyValues[i] = false;
    a730:	491a      	ldr	r1, [pc, #104]	; (a79c <initBatteryManager+0x74>)
	}
	
	free = false;
	infoSensors = sensorInfos;
	cntDevices++;
    a732:	4d1b      	ldr	r5, [pc, #108]	; (a7a0 <initBatteryManager+0x78>)
		batteryLevels[i] = 0;
    a734:	7013      	strb	r3, [r2, #0]
    a736:	7053      	strb	r3, [r2, #1]
    a738:	7093      	strb	r3, [r2, #2]
	free = false;
    a73a:	4a1a      	ldr	r2, [pc, #104]	; (a7a4 <initBatteryManager+0x7c>)
		readyValues[i] = false;
    a73c:	700b      	strb	r3, [r1, #0]
    a73e:	704b      	strb	r3, [r1, #1]
    a740:	708b      	strb	r3, [r1, #2]
	cntDevices++;
    a742:	7829      	ldrb	r1, [r5, #0]
	free = false;
    a744:	7013      	strb	r3, [r2, #0]
	infoSensors = sensorInfos;
    a746:	4b18      	ldr	r3, [pc, #96]	; (a7a8 <initBatteryManager+0x80>)
	cntDevices++;
    a748:	3101      	adds	r1, #1
	infoSensors = sensorInfos;
    a74a:	7018      	strb	r0, [r3, #0]
	cntDevices++;
    a74c:	b2c9      	uxtb	r1, r1
	printk("Initialize battery manager: # %d\n", cntDevices);
    a74e:	4817      	ldr	r0, [pc, #92]	; (a7ac <initBatteryManager+0x84>)
    a750:	3c01      	subs	r4, #1
	cntDevices++;
    a752:	7029      	strb	r1, [r5, #0]
	printk("Initialize battery manager: # %d\n", cntDevices);
    a754:	f010 f99a 	bl	1aa8c <printk>

	switch (sensorInfos)
    a758:	2c06      	cmp	r4, #6
    a75a:	d81c      	bhi.n	a796 <initBatteryManager+0x6e>
    a75c:	e8df f004 	tbb	[pc, r4]
    a760:	0c041107 	.word	0x0c041107
    a764:	1813      	.short	0x1813
    a766:	16          	.byte	0x16
    a767:	00          	.byte	0x00
		break;
	case 2:
		bt_bas_client_init(&clients[CADENCE]);
		break;
	case 3:
		if (cntDevices == 1)
    a768:	782b      	ldrb	r3, [r5, #0]
    a76a:	2b01      	cmp	r3, #1
    a76c:	d109      	bne.n	a782 <initBatteryManager+0x5a>
		{
			bt_bas_client_init(&clients[SPEED]);
    a76e:	4810      	ldr	r0, [pc, #64]	; (a7b0 <initBatteryManager+0x88>)
		bt_bas_client_init(&clients[HEARTRATE]);
		break;				
	default:
		break;
	}
}
    a770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_bas_client_init(&clients[HEARTRATE]);
    a774:	f002 bef2 	b.w	d55c <bt_bas_client_init>
		if (cntDevices == 1)
    a778:	782b      	ldrb	r3, [r5, #0]
    a77a:	2b01      	cmp	r3, #1
    a77c:	d0f7      	beq.n	a76e <initBatteryManager+0x46>
		else if (cntDevices == 2)
    a77e:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a780:	d104      	bne.n	a78c <initBatteryManager+0x64>
			bt_bas_client_init(&clients[CADENCE]);
    a782:	480c      	ldr	r0, [pc, #48]	; (a7b4 <initBatteryManager+0x8c>)
    a784:	e7f4      	b.n	a770 <initBatteryManager+0x48>
		if (cntDevices == 1)
    a786:	782b      	ldrb	r3, [r5, #0]
    a788:	2b01      	cmp	r3, #1
    a78a:	d0f0      	beq.n	a76e <initBatteryManager+0x46>
		bt_bas_client_init(&clients[HEARTRATE]);
    a78c:	480a      	ldr	r0, [pc, #40]	; (a7b8 <initBatteryManager+0x90>)
    a78e:	e7ef      	b.n	a770 <initBatteryManager+0x48>
		if (cntDevices == 1)
    a790:	782b      	ldrb	r3, [r5, #0]
    a792:	2b01      	cmp	r3, #1
    a794:	e7f4      	b.n	a780 <initBatteryManager+0x58>
}
    a796:	bd38      	pop	{r3, r4, r5, pc}
    a798:	2000e57c 	.word	0x2000e57c
    a79c:	2000e583 	.word	0x2000e583
    a7a0:	2000e581 	.word	0x2000e581
    a7a4:	20008443 	.word	0x20008443
    a7a8:	2000e582 	.word	0x2000e582
    a7ac:	0001fa0a 	.word	0x0001fa0a
    a7b0:	200086f8 	.word	0x200086f8
    a7b4:	20008780 	.word	0x20008780
    a7b8:	20008808 	.word	0x20008808

0000a7bc <getBatteryLevel>:

uint8_t getBatteryLevel(uint8_t nbrSensor) 
{
    uint8_t defaultValue = 0;
	switch (nbrSensor)
    a7bc:	2802      	cmp	r0, #2
    a7be:	4b07      	ldr	r3, [pc, #28]	; (a7dc <getBatteryLevel+0x20>)
    a7c0:	d005      	beq.n	a7ce <getBatteryLevel+0x12>
    a7c2:	2803      	cmp	r0, #3
    a7c4:	d005      	beq.n	a7d2 <getBatteryLevel+0x16>
    a7c6:	2801      	cmp	r0, #1
    a7c8:	d105      	bne.n	a7d6 <getBatteryLevel+0x1a>
	{
	case 1:
		return batteryLevels[SPEED];	
    a7ca:	7818      	ldrb	r0, [r3, #0]
    a7cc:	4770      	bx	lr
		break;
	case 2:
		return batteryLevels[CADENCE];
    a7ce:	7858      	ldrb	r0, [r3, #1]
    a7d0:	4770      	bx	lr
		break;
	case 3:
		return batteryLevels[HEARTRATE];
    a7d2:	7898      	ldrb	r0, [r3, #2]
    a7d4:	4770      	bx	lr
		break;
	default:
		batteryLevels[DEFAULT] = 0;
    a7d6:	2000      	movs	r0, #0
    a7d8:	70d8      	strb	r0, [r3, #3]
		return batteryLevels[DEFAULT];
		break;
	}

    return defaultValue;
}
    a7da:	4770      	bx	lr
    a7dc:	2000e57c 	.word	0x2000e57c

0000a7e0 <subscribeBatterySpeed>:

void subscribeBatterySpeed(struct bt_gatt_dm *dm) 
{
    a7e0:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &clients[SPEED]);
    a7e2:	490b      	ldr	r1, [pc, #44]	; (a810 <subscribeBatterySpeed+0x30>)
{
    a7e4:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &clients[SPEED]);
    a7e6:	f002 fecd 	bl	d584 <bt_bas_handles_assign>
	if (err) 
    a7ea:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a7ee:	d002      	beq.n	a7f6 <subscribeBatterySpeed+0x16>
	{
		printk("Could not init BAS client object from speed sensor, error: %d\n", err);
    a7f0:	4808      	ldr	r0, [pc, #32]	; (a814 <subscribeBatterySpeed+0x34>)
    a7f2:	f010 f94b 	bl	1aa8c <printk>
	}

	err = bt_gatt_dm_data_release(dm);
    a7f6:	4620      	mov	r0, r4
    a7f8:	f010 fdcb 	bl	1b392 <bt_gatt_dm_data_release>
	if (err) 
    a7fc:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a800:	d002      	beq.n	a808 <subscribeBatterySpeed+0x28>
	{
		printk("Could not release the discovery data, error "
    a802:	4805      	ldr	r0, [pc, #20]	; (a818 <subscribeBatterySpeed+0x38>)
    a804:	f010 f942 	bl	1aa8c <printk>
		       "code: %d\n", err);
	}
	free = true;
    a808:	2201      	movs	r2, #1
    a80a:	4b04      	ldr	r3, [pc, #16]	; (a81c <subscribeBatterySpeed+0x3c>)
    a80c:	701a      	strb	r2, [r3, #0]
}
    a80e:	bd10      	pop	{r4, pc}
    a810:	200086f8 	.word	0x200086f8
    a814:	0001fa2c 	.word	0x0001fa2c
    a818:	0001fa6b 	.word	0x0001fa6b
    a81c:	20008443 	.word	0x20008443

0000a820 <subscribeBatteryCadence>:

void subscribeBatteryCadence(struct bt_gatt_dm *dm) 
{
    a820:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &clients[CADENCE]);
    a822:	490b      	ldr	r1, [pc, #44]	; (a850 <subscribeBatteryCadence+0x30>)
{
    a824:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &clients[CADENCE]);
    a826:	f002 fead 	bl	d584 <bt_bas_handles_assign>
	if (err) 
    a82a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a82e:	d002      	beq.n	a836 <subscribeBatteryCadence+0x16>
	{
		printk("Could not init BAS client object from cadence sensor, error: %d\n", err);
    a830:	4808      	ldr	r0, [pc, #32]	; (a854 <subscribeBatteryCadence+0x34>)
    a832:	f010 f92b 	bl	1aa8c <printk>
	}

	err = bt_gatt_dm_data_release(dm);
    a836:	4620      	mov	r0, r4
    a838:	f010 fdab 	bl	1b392 <bt_gatt_dm_data_release>
	if (err) 
    a83c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a840:	d002      	beq.n	a848 <subscribeBatteryCadence+0x28>
	{
		printk("Could not release the discovery data, error "
    a842:	4805      	ldr	r0, [pc, #20]	; (a858 <subscribeBatteryCadence+0x38>)
    a844:	f010 f922 	bl	1aa8c <printk>
		       "code: %d\n", err);
	}

	free = true;
    a848:	2201      	movs	r2, #1
    a84a:	4b04      	ldr	r3, [pc, #16]	; (a85c <subscribeBatteryCadence+0x3c>)
    a84c:	701a      	strb	r2, [r3, #0]
}
    a84e:	bd10      	pop	{r4, pc}
    a850:	20008780 	.word	0x20008780
    a854:	0001faa1 	.word	0x0001faa1
    a858:	0001fa6b 	.word	0x0001fa6b
    a85c:	20008443 	.word	0x20008443

0000a860 <subscribeBatteryHeartRate>:

void subscribeBatteryHeartRate(struct bt_gatt_dm *dm) 
{
    a860:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &clients[HEARTRATE]);
    a862:	490b      	ldr	r1, [pc, #44]	; (a890 <subscribeBatteryHeartRate+0x30>)
{
    a864:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &clients[HEARTRATE]);
    a866:	f002 fe8d 	bl	d584 <bt_bas_handles_assign>
	if (err) 
    a86a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a86e:	d002      	beq.n	a876 <subscribeBatteryHeartRate+0x16>
	{
		printk("Could not init BAS client object from heart rate sensor, error: %d\n", err);
    a870:	4808      	ldr	r0, [pc, #32]	; (a894 <subscribeBatteryHeartRate+0x34>)
    a872:	f010 f90b 	bl	1aa8c <printk>
	}

	err = bt_gatt_dm_data_release(dm);
    a876:	4620      	mov	r0, r4
    a878:	f010 fd8b 	bl	1b392 <bt_gatt_dm_data_release>
	if (err) 
    a87c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a880:	d002      	beq.n	a888 <subscribeBatteryHeartRate+0x28>
	{
		printk("Could not release the discovery data, error "
    a882:	4805      	ldr	r0, [pc, #20]	; (a898 <subscribeBatteryHeartRate+0x38>)
    a884:	f010 f902 	bl	1aa8c <printk>
		       "code: %d\n", err);
	}	
	
	free = true;
    a888:	2201      	movs	r2, #1
    a88a:	4b04      	ldr	r3, [pc, #16]	; (a89c <subscribeBatteryHeartRate+0x3c>)
    a88c:	701a      	strb	r2, [r3, #0]
}
    a88e:	bd10      	pop	{r4, pc}
    a890:	20008808 	.word	0x20008808
    a894:	0001fae2 	.word	0x0001fae2
    a898:	0001fa6b 	.word	0x0001fa6b
    a89c:	20008443 	.word	0x20008443

0000a8a0 <discovery_completed_cb>:
{
    a8a0:	b510      	push	{r4, lr}
    a8a2:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
    a8a4:	4819      	ldr	r0, [pc, #100]	; (a90c <discovery_completed_cb+0x6c>)
    a8a6:	f010 f8f1 	bl	1aa8c <printk>
	service_found = true;
    a8aa:	2201      	movs	r2, #1
    a8ac:	4b18      	ldr	r3, [pc, #96]	; (a910 <discovery_completed_cb+0x70>)
    a8ae:	701a      	strb	r2, [r3, #0]
	switch (infoSensors)
    a8b0:	4b18      	ldr	r3, [pc, #96]	; (a914 <discovery_completed_cb+0x74>)
    a8b2:	781b      	ldrb	r3, [r3, #0]
    a8b4:	3b01      	subs	r3, #1
    a8b6:	2b06      	cmp	r3, #6
    a8b8:	d826      	bhi.n	a908 <discovery_completed_cb+0x68>
    a8ba:	e8df f003 	tbb	[pc, r3]
    a8be:	1308      	.short	0x1308
    a8c0:	21180d04 	.word	0x21180d04
    a8c4:	1c          	.byte	0x1c
    a8c5:	00          	.byte	0x00
		if (cntDevices == 1)
    a8c6:	4b14      	ldr	r3, [pc, #80]	; (a918 <discovery_completed_cb+0x78>)
    a8c8:	781b      	ldrb	r3, [r3, #0]
    a8ca:	2b01      	cmp	r3, #1
    a8cc:	d10a      	bne.n	a8e4 <discovery_completed_cb+0x44>
			subscribeBatterySpeed(dm);
    a8ce:	4620      	mov	r0, r4
}
    a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatterySpeed(dm);
    a8d4:	f7ff bf84 	b.w	a7e0 <subscribeBatterySpeed>
		if (cntDevices == 1)
    a8d8:	4b0f      	ldr	r3, [pc, #60]	; (a918 <discovery_completed_cb+0x78>)
    a8da:	781b      	ldrb	r3, [r3, #0]
    a8dc:	2b01      	cmp	r3, #1
    a8de:	d0f6      	beq.n	a8ce <discovery_completed_cb+0x2e>
		else if (cntDevices == 2)
    a8e0:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a8e2:	d108      	bne.n	a8f6 <discovery_completed_cb+0x56>
			subscribeBatteryCadence(dm);
    a8e4:	4620      	mov	r0, r4
}
    a8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryCadence(dm);
    a8ea:	f7ff bf99 	b.w	a820 <subscribeBatteryCadence>
		if (cntDevices == 1)
    a8ee:	4b0a      	ldr	r3, [pc, #40]	; (a918 <discovery_completed_cb+0x78>)
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	2b01      	cmp	r3, #1
    a8f4:	d0eb      	beq.n	a8ce <discovery_completed_cb+0x2e>
			subscribeBatteryHeartRate(dm);
    a8f6:	4620      	mov	r0, r4
}
    a8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryHeartRate(dm);
    a8fc:	f7ff bfb0 	b.w	a860 <subscribeBatteryHeartRate>
		if (cntDevices == 1)
    a900:	4b05      	ldr	r3, [pc, #20]	; (a918 <discovery_completed_cb+0x78>)
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	2b01      	cmp	r3, #1
    a906:	e7ec      	b.n	a8e2 <discovery_completed_cb+0x42>
}
    a908:	bd10      	pop	{r4, pc}
    a90a:	bf00      	nop
    a90c:	0001f18b 	.word	0x0001f18b
    a910:	20008444 	.word	0x20008444
    a914:	2000e582 	.word	0x2000e582
    a918:	2000e581 	.word	0x2000e581

0000a91c <isFree>:

bool isFree()
{
	return free;
}
    a91c:	4b01      	ldr	r3, [pc, #4]	; (a924 <isFree+0x8>)
    a91e:	7818      	ldrb	r0, [r3, #0]
    a920:	4770      	bx	lr
    a922:	bf00      	nop
    a924:	20008443 	.word	0x20008443

0000a928 <askForBatteryLevel>:

void askForBatteryLevel(uint8_t type)
{
	switch (type)
    a928:	2802      	cmp	r0, #2
    a92a:	d00a      	beq.n	a942 <askForBatteryLevel+0x1a>
    a92c:	2803      	cmp	r0, #3
    a92e:	d00e      	beq.n	a94e <askForBatteryLevel+0x26>
    a930:	2801      	cmp	r0, #1
    a932:	d112      	bne.n	a95a <askForBatteryLevel+0x32>
	{
	case 1:
		readyValues[SPEED] = false;
    a934:	2200      	movs	r2, #0
    a936:	4b09      	ldr	r3, [pc, #36]	; (a95c <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&clients[SPEED], read_battery_level_cb_speed);
    a938:	4909      	ldr	r1, [pc, #36]	; (a960 <askForBatteryLevel+0x38>)
    a93a:	480a      	ldr	r0, [pc, #40]	; (a964 <askForBatteryLevel+0x3c>)
		readyValues[SPEED] = false;
    a93c:	701a      	strb	r2, [r3, #0]
		readyValues[CADENCE] = false;
		bt_bas_read_battery_level(&clients[CADENCE], read_battery_level_cb_cadence);
		break;
	case 3:
		readyValues[HEARTRATE] = false;
		bt_bas_read_battery_level(&clients[HEARTRATE], read_battery_level_cb_heartRate);
    a93e:	f002 beab 	b.w	d698 <bt_bas_read_battery_level>
		readyValues[CADENCE] = false;
    a942:	2200      	movs	r2, #0
    a944:	4b05      	ldr	r3, [pc, #20]	; (a95c <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&clients[CADENCE], read_battery_level_cb_cadence);
    a946:	4908      	ldr	r1, [pc, #32]	; (a968 <askForBatteryLevel+0x40>)
    a948:	4808      	ldr	r0, [pc, #32]	; (a96c <askForBatteryLevel+0x44>)
		readyValues[CADENCE] = false;
    a94a:	705a      	strb	r2, [r3, #1]
		bt_bas_read_battery_level(&clients[CADENCE], read_battery_level_cb_cadence);
    a94c:	e7f7      	b.n	a93e <askForBatteryLevel+0x16>
		readyValues[HEARTRATE] = false;
    a94e:	2200      	movs	r2, #0
    a950:	4b02      	ldr	r3, [pc, #8]	; (a95c <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&clients[HEARTRATE], read_battery_level_cb_heartRate);
    a952:	4907      	ldr	r1, [pc, #28]	; (a970 <askForBatteryLevel+0x48>)
    a954:	4807      	ldr	r0, [pc, #28]	; (a974 <askForBatteryLevel+0x4c>)
		readyValues[HEARTRATE] = false;
    a956:	709a      	strb	r2, [r3, #2]
		bt_bas_read_battery_level(&clients[HEARTRATE], read_battery_level_cb_heartRate);
    a958:	e7f1      	b.n	a93e <askForBatteryLevel+0x16>
		break;
	default:
		break;
	}
}
    a95a:	4770      	bx	lr
    a95c:	2000e583 	.word	0x2000e583
    a960:	0000a5e9 	.word	0x0000a5e9
    a964:	200086f8 	.word	0x200086f8
    a968:	0000a635 	.word	0x0000a635
    a96c:	20008780 	.word	0x20008780
    a970:	0000a681 	.word	0x0000a681
    a974:	20008808 	.word	0x20008808

0000a978 <isValueReady>:

bool isValueReady(uint8_t type)
{
	switch (type)
    a978:	2802      	cmp	r0, #2
    a97a:	d006      	beq.n	a98a <isValueReady+0x12>
    a97c:	2803      	cmp	r0, #3
    a97e:	d007      	beq.n	a990 <isValueReady+0x18>
    a980:	2801      	cmp	r0, #1
    a982:	d108      	bne.n	a996 <isValueReady+0x1e>
	{
	case 1:
		return readyValues[SPEED];
    a984:	4b05      	ldr	r3, [pc, #20]	; (a99c <isValueReady+0x24>)
    a986:	7818      	ldrb	r0, [r3, #0]
    a988:	4770      	bx	lr
		break;
	case 2:
		return readyValues[CADENCE];
    a98a:	4b04      	ldr	r3, [pc, #16]	; (a99c <isValueReady+0x24>)
    a98c:	7858      	ldrb	r0, [r3, #1]
    a98e:	4770      	bx	lr
		break;
	case 3:
		return readyValues[HEARTRATE];
    a990:	4b02      	ldr	r3, [pc, #8]	; (a99c <isValueReady+0x24>)
    a992:	7898      	ldrb	r0, [r3, #2]
    a994:	4770      	bx	lr
	switch (type)
    a996:	2000      	movs	r0, #0
		break;			
	default:
		return false;
		break;
	}	
}
    a998:	4770      	bx	lr
    a99a:	bf00      	nop
    a99c:	2000e583 	.word	0x2000e583

0000a9a0 <resetReadyValue>:

void resetReadyValue(uint8_t type)
{
	switch (type)
    a9a0:	2802      	cmp	r0, #2
    a9a2:	d007      	beq.n	a9b4 <resetReadyValue+0x14>
    a9a4:	2803      	cmp	r0, #3
    a9a6:	d009      	beq.n	a9bc <resetReadyValue+0x1c>
    a9a8:	2801      	cmp	r0, #1
    a9aa:	d10a      	bne.n	a9c2 <resetReadyValue+0x22>
	{
	case 1:
		readyValues[SPEED] = false;
    a9ac:	2200      	movs	r2, #0
    a9ae:	4b05      	ldr	r3, [pc, #20]	; (a9c4 <resetReadyValue+0x24>)
    a9b0:	701a      	strb	r2, [r3, #0]
		break;
    a9b2:	4770      	bx	lr
	case 2:
		readyValues[CADENCE] = false;
    a9b4:	2200      	movs	r2, #0
    a9b6:	4b03      	ldr	r3, [pc, #12]	; (a9c4 <resetReadyValue+0x24>)
    a9b8:	705a      	strb	r2, [r3, #1]
		break;
    a9ba:	4770      	bx	lr
	case 3:
		readyValues[HEARTRATE] = false;
    a9bc:	2200      	movs	r2, #0
    a9be:	4b01      	ldr	r3, [pc, #4]	; (a9c4 <resetReadyValue+0x24>)
    a9c0:	709a      	strb	r2, [r3, #2]
		break;			
	default:
		break;
	}		
}
    a9c2:	4770      	bx	lr
    a9c4:	2000e583 	.word	0x2000e583

0000a9c8 <serviceFound>:

bool serviceFound()
{
	return service_found;
    a9c8:	4b01      	ldr	r3, [pc, #4]	; (a9d0 <serviceFound+0x8>)
    a9ca:	7818      	ldrb	r0, [r3, #0]
    a9cc:	4770      	bx	lr
    a9ce:	bf00      	nop
    a9d0:	20008444 	.word	0x20008444

0000a9d4 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a9d4:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a9d6:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a9d8:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a9dc:	2b02      	cmp	r3, #2
{
    a9de:	4604      	mov	r4, r0
    a9e0:	460e      	mov	r6, r1
	notify->result = res;
    a9e2:	6081      	str	r1, [r0, #8]
	switch (method) {
    a9e4:	d010      	beq.n	aa08 <sys_notify_finalize+0x34>
    a9e6:	2b03      	cmp	r3, #3
    a9e8:	d004      	beq.n	a9f4 <sys_notify_finalize+0x20>
    a9ea:	2b01      	cmp	r3, #1
    a9ec:	d10f      	bne.n	aa0e <sys_notify_finalize+0x3a>
    a9ee:	2500      	movs	r5, #0
    a9f0:	4628      	mov	r0, r5
    a9f2:	e001      	b.n	a9f8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a9f4:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a9f6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a9f8:	2300      	movs	r3, #0
    a9fa:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a9fc:	b110      	cbz	r0, aa04 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a9fe:	4631      	mov	r1, r6
    aa00:	f00f fefe 	bl	1a800 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    aa04:	4628      	mov	r0, r5
    aa06:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    aa08:	2500      	movs	r5, #0
		sig = notify->method.signal;
    aa0a:	6800      	ldr	r0, [r0, #0]
		break;
    aa0c:	e7f4      	b.n	a9f8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    aa0e:	2245      	movs	r2, #69	; 0x45
    aa10:	4904      	ldr	r1, [pc, #16]	; (aa24 <sys_notify_finalize+0x50>)
    aa12:	4805      	ldr	r0, [pc, #20]	; (aa28 <sys_notify_finalize+0x54>)
    aa14:	f010 f83a 	bl	1aa8c <printk>
    aa18:	2145      	movs	r1, #69	; 0x45
    aa1a:	4802      	ldr	r0, [pc, #8]	; (aa24 <sys_notify_finalize+0x50>)
    aa1c:	f010 fadc 	bl	1afd8 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    aa20:	2500      	movs	r5, #0
    aa22:	e7e8      	b.n	a9f6 <sys_notify_finalize+0x22>
    aa24:	0001fb26 	.word	0x0001fb26
    aa28:	0001fb49 	.word	0x0001fb49

0000aa2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    aa2c:	680b      	ldr	r3, [r1, #0]
    aa2e:	3301      	adds	r3, #1
    aa30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    aa32:	4b01      	ldr	r3, [pc, #4]	; (aa38 <char_out+0xc>)
    aa34:	681b      	ldr	r3, [r3, #0]
    aa36:	4718      	bx	r3
    aa38:	200081bc 	.word	0x200081bc

0000aa3c <__printk_hook_install>:
	_char_out = fn;
    aa3c:	4b01      	ldr	r3, [pc, #4]	; (aa44 <__printk_hook_install+0x8>)
    aa3e:	6018      	str	r0, [r3, #0]
}
    aa40:	4770      	bx	lr
    aa42:	bf00      	nop
    aa44:	200081bc 	.word	0x200081bc

0000aa48 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    aa48:	b507      	push	{r0, r1, r2, lr}
    aa4a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    aa4c:	2100      	movs	r1, #0
{
    aa4e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    aa50:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    aa52:	4803      	ldr	r0, [pc, #12]	; (aa60 <vprintk+0x18>)
    aa54:	a901      	add	r1, sp, #4
    aa56:	f000 fbe9 	bl	b22c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    aa5a:	b003      	add	sp, #12
    aa5c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa60:	0000aa2d 	.word	0x0000aa2d

0000aa64 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    aa64:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    aa66:	2500      	movs	r5, #0
{
    aa68:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    aa6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    aa6e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    aa70:	a901      	add	r1, sp, #4
    aa72:	4805      	ldr	r0, [pc, #20]	; (aa88 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    aa74:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    aa76:	f000 fbd9 	bl	b22c <cbvprintf>

	if (ctx.count < ctx.max) {
    aa7a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    aa7e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    aa80:	bfb8      	it	lt
    aa82:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    aa84:	b005      	add	sp, #20
    aa86:	bd30      	pop	{r4, r5, pc}
    aa88:	0001aa67 	.word	0x0001aa67

0000aa8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    aa8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa90:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    aa94:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    aa96:	f01a 0f08 	tst.w	sl, #8
{
    aa9a:	4693      	mov	fp, r2
	if (processing) {
    aa9c:	d01c      	beq.n	aad8 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    aa9e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    aaa0:	bf0c      	ite	eq
    aaa2:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    aaa6:	f04a 0a20 	orrne.w	sl, sl, #32
    aaaa:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aaae:	f104 0014 	add.w	r0, r4, #20
    aab2:	f00f f80d 	bl	19ad0 <z_spin_unlock_valid>
    aab6:	b940      	cbnz	r0, aaca <process_event+0x3e>
    aab8:	4992      	ldr	r1, [pc, #584]	; (ad04 <process_event+0x278>)
    aaba:	4893      	ldr	r0, [pc, #588]	; (ad08 <process_event+0x27c>)
    aabc:	22a7      	movs	r2, #167	; 0xa7
    aabe:	f00f ffe5 	bl	1aa8c <printk>
    aac2:	21a7      	movs	r1, #167	; 0xa7
    aac4:	488f      	ldr	r0, [pc, #572]	; (ad04 <process_event+0x278>)
    aac6:	f010 fa87 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    aaca:	f38b 8811 	msr	BASEPRI, fp
    aace:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    aad2:	b003      	add	sp, #12
    aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    aad8:	4f8c      	ldr	r7, [pc, #560]	; (ad0c <process_event+0x280>)
    aada:	f8df 822c 	ldr.w	r8, [pc, #556]	; ad08 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aade:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    aae2:	2902      	cmp	r1, #2
    aae4:	d106      	bne.n	aaf4 <process_event+0x68>
			evt = process_recheck(mgr);
    aae6:	4620      	mov	r0, r4
    aae8:	f00f ffea 	bl	1aac0 <process_recheck>
		if (evt == EVT_NOP) {
    aaec:	2800      	cmp	r0, #0
    aaee:	d0de      	beq.n	aaae <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    aaf0:	2801      	cmp	r0, #1
    aaf2:	d163      	bne.n	abbc <process_event+0x130>
			res = mgr->last_res;
    aaf4:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aaf8:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    aafa:	f1b9 0f00 	cmp.w	r9, #0
    aafe:	da19      	bge.n	ab34 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    ab00:	2600      	movs	r6, #0
		*clients = mgr->clients;
    ab02:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab04:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    ab08:	e9c4 6600 	strd	r6, r6, [r4]
    ab0c:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ab10:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ab12:	8ba3      	ldrh	r3, [r4, #28]
    ab14:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ab18:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ab1a:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    ab1c:	d003      	beq.n	ab26 <process_event+0x9a>
		if (do_monitors
    ab1e:	68a2      	ldr	r2, [r4, #8]
    ab20:	2a00      	cmp	r2, #0
    ab22:	f040 80f5 	bne.w	ad10 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    ab26:	b915      	cbnz	r5, ab2e <process_event+0xa2>
		    || (transit != NULL)) {
    ab28:	2e00      	cmp	r6, #0
    ab2a:	f000 812f 	beq.w	ad8c <process_event+0x300>
    ab2e:	f04f 0a00 	mov.w	sl, #0
    ab32:	e0ef      	b.n	ad14 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ab34:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ab38:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ab3a:	2901      	cmp	r1, #1
    ab3c:	d820      	bhi.n	ab80 <process_event+0xf4>
	list->head = NULL;
    ab3e:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab40:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    ab44:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    ab46:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab48:	b29b      	uxth	r3, r3
	list->tail = NULL;
    ab4a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ab4e:	d10a      	bne.n	ab66 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ab50:	b13d      	cbz	r5, ab62 <process_event+0xd6>
    ab52:	4629      	mov	r1, r5
    ab54:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    ab56:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    ab58:	3201      	adds	r2, #1
    ab5a:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ab5c:	2900      	cmp	r1, #0
    ab5e:	d1fa      	bne.n	ab56 <process_event+0xca>
    ab60:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab62:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    ab66:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ab68:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    ab6a:	f00f ffa9 	bl	1aac0 <process_recheck>
    ab6e:	4606      	mov	r6, r0
    ab70:	2800      	cmp	r0, #0
    ab72:	d0ce      	beq.n	ab12 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ab74:	8ba3      	ldrh	r3, [r4, #28]
    ab76:	f043 0320 	orr.w	r3, r3, #32
    ab7a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    ab7c:	2600      	movs	r6, #0
    ab7e:	e7c8      	b.n	ab12 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ab80:	2a04      	cmp	r2, #4
    ab82:	d10d      	bne.n	aba0 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab84:	f023 0307 	bic.w	r3, r3, #7
    ab88:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    ab8a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ab8c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    ab8e:	f00f ff97 	bl	1aac0 <process_recheck>
    ab92:	4605      	mov	r5, r0
    ab94:	b180      	cbz	r0, abb8 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ab96:	f042 0220 	orr.w	r2, r2, #32
    ab9a:	2500      	movs	r5, #0
    ab9c:	83a2      	strh	r2, [r4, #28]
    ab9e:	e7ed      	b.n	ab7c <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    aba0:	f240 1219 	movw	r2, #281	; 0x119
    aba4:	4639      	mov	r1, r7
    aba6:	4640      	mov	r0, r8
    aba8:	f00f ff70 	bl	1aa8c <printk>
    abac:	f240 1119 	movw	r1, #281	; 0x119
    abb0:	4638      	mov	r0, r7
    abb2:	f010 fa11 	bl	1afd8 <assert_post_action>
    abb6:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    abb8:	462e      	mov	r6, r5
    abba:	e7aa      	b.n	ab12 <process_event+0x86>
		} else if (evt == EVT_START) {
    abbc:	2803      	cmp	r0, #3
    abbe:	d131      	bne.n	ac24 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    abc0:	f1ba 0f00 	cmp.w	sl, #0
    abc4:	d00a      	beq.n	abdc <process_event+0x150>
    abc6:	4639      	mov	r1, r7
    abc8:	4640      	mov	r0, r8
    abca:	f44f 72aa 	mov.w	r2, #340	; 0x154
    abce:	f00f ff5d 	bl	1aa8c <printk>
    abd2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    abd6:	4638      	mov	r0, r7
    abd8:	f010 f9fe 	bl	1afd8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    abdc:	6823      	ldr	r3, [r4, #0]
    abde:	b953      	cbnz	r3, abf6 <process_event+0x16a>
    abe0:	4639      	mov	r1, r7
    abe2:	4640      	mov	r0, r8
    abe4:	f240 1255 	movw	r2, #341	; 0x155
    abe8:	f00f ff50 	bl	1aa8c <printk>
    abec:	f240 1155 	movw	r1, #341	; 0x155
    abf0:	4638      	mov	r0, r7
    abf2:	f010 f9f1 	bl	1afd8 <assert_post_action>
			transit = mgr->transitions->start;
    abf6:	6923      	ldr	r3, [r4, #16]
    abf8:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    abfa:	b956      	cbnz	r6, ac12 <process_event+0x186>
    abfc:	4639      	mov	r1, r7
    abfe:	4640      	mov	r0, r8
    ac00:	f44f 72ac 	mov.w	r2, #344	; 0x158
    ac04:	f00f ff42 	bl	1aa8c <printk>
    ac08:	f44f 71ac 	mov.w	r1, #344	; 0x158
    ac0c:	4638      	mov	r0, r7
    ac0e:	f010 f9e3 	bl	1afd8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ac12:	8ba3      	ldrh	r3, [r4, #28]
    ac14:	f023 0307 	bic.w	r3, r3, #7
    ac18:	f043 0306 	orr.w	r3, r3, #6
}
    ac1c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    ac1e:	83a3      	strh	r3, [r4, #28]
		res = 0;
    ac20:	46a9      	mov	r9, r5
}
    ac22:	e776      	b.n	ab12 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    ac24:	2804      	cmp	r0, #4
    ac26:	d12e      	bne.n	ac86 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ac28:	f1ba 0f02 	cmp.w	sl, #2
    ac2c:	d00a      	beq.n	ac44 <process_event+0x1b8>
    ac2e:	4639      	mov	r1, r7
    ac30:	4640      	mov	r0, r8
    ac32:	f240 125b 	movw	r2, #347	; 0x15b
    ac36:	f00f ff29 	bl	1aa8c <printk>
    ac3a:	f240 115b 	movw	r1, #347	; 0x15b
    ac3e:	4638      	mov	r0, r7
    ac40:	f010 f9ca 	bl	1afd8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ac44:	8be3      	ldrh	r3, [r4, #30]
    ac46:	b153      	cbz	r3, ac5e <process_event+0x1d2>
    ac48:	4639      	mov	r1, r7
    ac4a:	4640      	mov	r0, r8
    ac4c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    ac50:	f00f ff1c 	bl	1aa8c <printk>
    ac54:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    ac58:	4638      	mov	r0, r7
    ac5a:	f010 f9bd 	bl	1afd8 <assert_post_action>
			transit = mgr->transitions->stop;
    ac5e:	6923      	ldr	r3, [r4, #16]
    ac60:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ac62:	b956      	cbnz	r6, ac7a <process_event+0x1ee>
    ac64:	4639      	mov	r1, r7
    ac66:	4640      	mov	r0, r8
    ac68:	f240 125f 	movw	r2, #351	; 0x15f
    ac6c:	f00f ff0e 	bl	1aa8c <printk>
    ac70:	f240 115f 	movw	r1, #351	; 0x15f
    ac74:	4638      	mov	r0, r7
    ac76:	f010 f9af 	bl	1afd8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ac7a:	8ba3      	ldrh	r3, [r4, #28]
    ac7c:	f023 0307 	bic.w	r3, r3, #7
    ac80:	f043 0304 	orr.w	r3, r3, #4
    ac84:	e7ca      	b.n	ac1c <process_event+0x190>
		} else if (evt == EVT_RESET) {
    ac86:	2805      	cmp	r0, #5
    ac88:	d12e      	bne.n	ace8 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ac8a:	f1ba 0f01 	cmp.w	sl, #1
    ac8e:	d00a      	beq.n	aca6 <process_event+0x21a>
    ac90:	4639      	mov	r1, r7
    ac92:	4640      	mov	r0, r8
    ac94:	f44f 72b1 	mov.w	r2, #354	; 0x162
    ac98:	f00f fef8 	bl	1aa8c <printk>
    ac9c:	f44f 71b1 	mov.w	r1, #354	; 0x162
    aca0:	4638      	mov	r0, r7
    aca2:	f010 f999 	bl	1afd8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    aca6:	6823      	ldr	r3, [r4, #0]
    aca8:	b953      	cbnz	r3, acc0 <process_event+0x234>
    acaa:	4639      	mov	r1, r7
    acac:	4640      	mov	r0, r8
    acae:	f240 1263 	movw	r2, #355	; 0x163
    acb2:	f00f feeb 	bl	1aa8c <printk>
    acb6:	f240 1163 	movw	r1, #355	; 0x163
    acba:	4638      	mov	r0, r7
    acbc:	f010 f98c 	bl	1afd8 <assert_post_action>
			transit = mgr->transitions->reset;
    acc0:	6923      	ldr	r3, [r4, #16]
    acc2:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    acc4:	b956      	cbnz	r6, acdc <process_event+0x250>
    acc6:	4639      	mov	r1, r7
    acc8:	4640      	mov	r0, r8
    acca:	f44f 72b3 	mov.w	r2, #358	; 0x166
    acce:	f00f fedd 	bl	1aa8c <printk>
    acd2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    acd6:	4638      	mov	r0, r7
    acd8:	f010 f97e 	bl	1afd8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    acdc:	8ba3      	ldrh	r3, [r4, #28]
    acde:	f023 0307 	bic.w	r3, r3, #7
    ace2:	f043 0305 	orr.w	r3, r3, #5
    ace6:	e799      	b.n	ac1c <process_event+0x190>
			__ASSERT_NO_MSG(false);
    ace8:	2500      	movs	r5, #0
    acea:	f240 1269 	movw	r2, #361	; 0x169
    acee:	4639      	mov	r1, r7
    acf0:	4640      	mov	r0, r8
    acf2:	f00f fecb 	bl	1aa8c <printk>
    acf6:	f240 1169 	movw	r1, #361	; 0x169
    acfa:	4638      	mov	r0, r7
    acfc:	f010 f96c 	bl	1afd8 <assert_post_action>
		onoff_transition_fn transit = NULL;
    ad00:	462e      	mov	r6, r5
    ad02:	e78d      	b.n	ac20 <process_event+0x194>
    ad04:	0001fb83 	.word	0x0001fb83
    ad08:	0001fb49 	.word	0x0001fb49
    ad0c:	0001fb61 	.word	0x0001fb61
				   && !sys_slist_is_empty(&mgr->monitors);
    ad10:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ad14:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    ad18:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    ad1a:	f104 0314 	add.w	r3, r4, #20
    ad1e:	4618      	mov	r0, r3
    ad20:	9301      	str	r3, [sp, #4]
    ad22:	f00e fed5 	bl	19ad0 <z_spin_unlock_valid>
    ad26:	b940      	cbnz	r0, ad3a <process_event+0x2ae>
    ad28:	4640      	mov	r0, r8
    ad2a:	4931      	ldr	r1, [pc, #196]	; (adf0 <process_event+0x364>)
    ad2c:	22a7      	movs	r2, #167	; 0xa7
    ad2e:	f00f fead 	bl	1aa8c <printk>
    ad32:	21a7      	movs	r1, #167	; 0xa7
    ad34:	482e      	ldr	r0, [pc, #184]	; (adf0 <process_event+0x364>)
    ad36:	f010 f94f 	bl	1afd8 <assert_post_action>
    ad3a:	f38b 8811 	msr	BASEPRI, fp
    ad3e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    ad42:	f1ba 0f00 	cmp.w	sl, #0
    ad46:	d130      	bne.n	adaa <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    ad48:	2d00      	cmp	r5, #0
    ad4a:	d140      	bne.n	adce <process_event+0x342>
			if (transit != NULL) {
    ad4c:	b116      	cbz	r6, ad54 <process_event+0x2c8>
				transit(mgr, transition_complete);
    ad4e:	4620      	mov	r0, r4
    ad50:	4928      	ldr	r1, [pc, #160]	; (adf4 <process_event+0x368>)
    ad52:	47b0      	blx	r6
	__asm__ volatile(
    ad54:	f04f 0320 	mov.w	r3, #32
    ad58:	f3ef 8b11 	mrs	fp, BASEPRI
    ad5c:	f383 8811 	msr	BASEPRI, r3
    ad60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad64:	9801      	ldr	r0, [sp, #4]
    ad66:	f00e fea5 	bl	19ab4 <z_spin_lock_valid>
    ad6a:	b940      	cbnz	r0, ad7e <process_event+0x2f2>
    ad6c:	4640      	mov	r0, r8
    ad6e:	4920      	ldr	r1, [pc, #128]	; (adf0 <process_event+0x364>)
    ad70:	227c      	movs	r2, #124	; 0x7c
    ad72:	f00f fe8b 	bl	1aa8c <printk>
    ad76:	217c      	movs	r1, #124	; 0x7c
    ad78:	481d      	ldr	r0, [pc, #116]	; (adf0 <process_event+0x364>)
    ad7a:	f010 f92d 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
    ad7e:	9801      	ldr	r0, [sp, #4]
    ad80:	f00e feb4 	bl	19aec <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ad84:	8ba3      	ldrh	r3, [r4, #28]
    ad86:	f023 0308 	bic.w	r3, r3, #8
    ad8a:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ad8c:	8ba3      	ldrh	r3, [r4, #28]
    ad8e:	06da      	lsls	r2, r3, #27
    ad90:	d525      	bpl.n	adde <process_event+0x352>
			evt = EVT_COMPLETE;
    ad92:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ad94:	f023 0310 	bic.w	r3, r3, #16
    ad98:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ad9a:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    ad9e:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    ada2:	2900      	cmp	r1, #0
    ada4:	f47f ae9d 	bne.w	aae2 <process_event+0x56>
out:
    ada8:	e681      	b.n	aaae <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    adaa:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    adac:	2900      	cmp	r1, #0
    adae:	d0cb      	beq.n	ad48 <process_event+0x2bc>
	return node->next;
    adb0:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    adb4:	464b      	mov	r3, r9
    adb6:	4620      	mov	r0, r4
    adb8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    adbc:	9a00      	ldr	r2, [sp, #0]
    adbe:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    adc0:	f1ba 0f00 	cmp.w	sl, #0
    adc4:	d0c0      	beq.n	ad48 <process_event+0x2bc>
    adc6:	4651      	mov	r1, sl
    adc8:	f8da a000 	ldr.w	sl, [sl]
    adcc:	e7f2      	b.n	adb4 <process_event+0x328>
    adce:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    add0:	464b      	mov	r3, r9
    add2:	4620      	mov	r0, r4
    add4:	9a00      	ldr	r2, [sp, #0]
    add6:	682d      	ldr	r5, [r5, #0]
    add8:	f00f fe8e 	bl	1aaf8 <notify_one>
    addc:	e7b4      	b.n	ad48 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    adde:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ade2:	bf1e      	ittt	ne
    ade4:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    ade8:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    adea:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    adec:	e7d5      	b.n	ad9a <process_event+0x30e>
    adee:	bf00      	nop
    adf0:	0001fb83 	.word	0x0001fb83
    adf4:	0000adf9 	.word	0x0000adf9

0000adf8 <transition_complete>:
{
    adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adfa:	4604      	mov	r4, r0
    adfc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    adfe:	f100 0614 	add.w	r6, r0, #20
    ae02:	f04f 0320 	mov.w	r3, #32
    ae06:	f3ef 8711 	mrs	r7, BASEPRI
    ae0a:	f383 8811 	msr	BASEPRI, r3
    ae0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae12:	4630      	mov	r0, r6
    ae14:	f00e fe4e 	bl	19ab4 <z_spin_lock_valid>
    ae18:	b940      	cbnz	r0, ae2c <transition_complete+0x34>
    ae1a:	490a      	ldr	r1, [pc, #40]	; (ae44 <transition_complete+0x4c>)
    ae1c:	480a      	ldr	r0, [pc, #40]	; (ae48 <transition_complete+0x50>)
    ae1e:	227c      	movs	r2, #124	; 0x7c
    ae20:	f00f fe34 	bl	1aa8c <printk>
    ae24:	217c      	movs	r1, #124	; 0x7c
    ae26:	4807      	ldr	r0, [pc, #28]	; (ae44 <transition_complete+0x4c>)
    ae28:	f010 f8d6 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
    ae2c:	4630      	mov	r0, r6
    ae2e:	f00e fe5d 	bl	19aec <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    ae32:	463a      	mov	r2, r7
    ae34:	4620      	mov	r0, r4
	mgr->last_res = res;
    ae36:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    ae38:	2101      	movs	r1, #1
}
    ae3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    ae3e:	f7ff be25 	b.w	aa8c <process_event>
    ae42:	bf00      	nop
    ae44:	0001fb83 	.word	0x0001fb83
    ae48:	0001fb49 	.word	0x0001fb49

0000ae4c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    ae4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae50:	4604      	mov	r4, r0
    ae52:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    ae54:	f00f fe66 	bl	1ab24 <validate_args>

	if (rv < 0) {
    ae58:	1e05      	subs	r5, r0, #0
    ae5a:	db54      	blt.n	af06 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    ae5c:	f104 0914 	add.w	r9, r4, #20
    ae60:	f04f 0320 	mov.w	r3, #32
    ae64:	f3ef 8a11 	mrs	sl, BASEPRI
    ae68:	f383 8811 	msr	BASEPRI, r3
    ae6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae70:	4648      	mov	r0, r9
    ae72:	f00e fe1f 	bl	19ab4 <z_spin_lock_valid>
    ae76:	b940      	cbnz	r0, ae8a <onoff_request+0x3e>
    ae78:	4933      	ldr	r1, [pc, #204]	; (af48 <onoff_request+0xfc>)
    ae7a:	4834      	ldr	r0, [pc, #208]	; (af4c <onoff_request+0x100>)
    ae7c:	227c      	movs	r2, #124	; 0x7c
    ae7e:	f00f fe05 	bl	1aa8c <printk>
    ae82:	217c      	movs	r1, #124	; 0x7c
    ae84:	4830      	ldr	r0, [pc, #192]	; (af48 <onoff_request+0xfc>)
    ae86:	f010 f8a7 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
    ae8a:	4648      	mov	r0, r9
    ae8c:	f00e fe2e 	bl	19aec <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ae90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae94:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ae96:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    ae98:	428b      	cmp	r3, r1
    ae9a:	f002 0607 	and.w	r6, r2, #7
    ae9e:	d04a      	beq.n	af36 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    aea0:	2e02      	cmp	r6, #2
    aea2:	d11f      	bne.n	aee4 <onoff_request+0x98>
	rv = state;
    aea4:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    aea6:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    aeaa:	3301      	adds	r3, #1
    aeac:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aeae:	4648      	mov	r0, r9
    aeb0:	f00e fe0e 	bl	19ad0 <z_spin_unlock_valid>
    aeb4:	b940      	cbnz	r0, aec8 <onoff_request+0x7c>
    aeb6:	4924      	ldr	r1, [pc, #144]	; (af48 <onoff_request+0xfc>)
    aeb8:	4824      	ldr	r0, [pc, #144]	; (af4c <onoff_request+0x100>)
    aeba:	22a7      	movs	r2, #167	; 0xa7
    aebc:	f00f fde6 	bl	1aa8c <printk>
    aec0:	21a7      	movs	r1, #167	; 0xa7
    aec2:	4821      	ldr	r0, [pc, #132]	; (af48 <onoff_request+0xfc>)
    aec4:	f010 f888 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
    aec8:	f38a 8811 	msr	BASEPRI, sl
    aecc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    aed0:	f1b8 0f00 	cmp.w	r8, #0
    aed4:	d017      	beq.n	af06 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    aed6:	2300      	movs	r3, #0
    aed8:	4632      	mov	r2, r6
    aeda:	4639      	mov	r1, r7
    aedc:	4620      	mov	r0, r4
    aede:	f00f fe0b 	bl	1aaf8 <notify_one>
    aee2:	e010      	b.n	af06 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    aee4:	0793      	lsls	r3, r2, #30
    aee6:	d001      	beq.n	aeec <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    aee8:	2e06      	cmp	r6, #6
    aeea:	d10f      	bne.n	af0c <onoff_request+0xc0>
	parent->next = child;
    aeec:	2300      	movs	r3, #0
    aeee:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    aef0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    aef2:	b9eb      	cbnz	r3, af30 <onoff_request+0xe4>
	list->head = node;
    aef4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    aef8:	4635      	mov	r5, r6
    aefa:	b9f6      	cbnz	r6, af3a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    aefc:	4652      	mov	r2, sl
    aefe:	2102      	movs	r1, #2
    af00:	4620      	mov	r0, r4
    af02:	f7ff fdc3 	bl	aa8c <process_event>
		}
	}

	return rv;
}
    af06:	4628      	mov	r0, r5
    af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    af0c:	2e05      	cmp	r6, #5
    af0e:	d017      	beq.n	af40 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    af10:	2e01      	cmp	r6, #1
    af12:	d00a      	beq.n	af2a <onoff_request+0xde>
    af14:	490e      	ldr	r1, [pc, #56]	; (af50 <onoff_request+0x104>)
    af16:	480d      	ldr	r0, [pc, #52]	; (af4c <onoff_request+0x100>)
    af18:	f240 12c5 	movw	r2, #453	; 0x1c5
    af1c:	f00f fdb6 	bl	1aa8c <printk>
    af20:	f240 11c5 	movw	r1, #453	; 0x1c5
    af24:	480a      	ldr	r0, [pc, #40]	; (af50 <onoff_request+0x104>)
    af26:	f010 f857 	bl	1afd8 <assert_post_action>
		rv = -EIO;
    af2a:	f06f 0504 	mvn.w	r5, #4
    af2e:	e004      	b.n	af3a <onoff_request+0xee>
	parent->next = child;
    af30:	601f      	str	r7, [r3, #0]
	list->tail = node;
    af32:	6067      	str	r7, [r4, #4]
}
    af34:	e7e0      	b.n	aef8 <onoff_request+0xac>
		rv = -EAGAIN;
    af36:	f06f 050a 	mvn.w	r5, #10
    af3a:	f04f 0800 	mov.w	r8, #0
    af3e:	e7b6      	b.n	aeae <onoff_request+0x62>
		rv = -ENOTSUP;
    af40:	f06f 0522 	mvn.w	r5, #34	; 0x22
    af44:	e7f9      	b.n	af3a <onoff_request+0xee>
    af46:	bf00      	nop
    af48:	0001fb83 	.word	0x0001fb83
    af4c:	0001fb49 	.word	0x0001fb49
    af50:	0001fb61 	.word	0x0001fb61

0000af54 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af58:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    af5a:	4e14      	ldr	r6, [pc, #80]	; (afac <z_work_q_main+0x58>)
    af5c:	f8df 8050 	ldr.w	r8, [pc, #80]	; afb0 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    af60:	f04f 32ff 	mov.w	r2, #4294967295
    af64:	f04f 33ff 	mov.w	r3, #4294967295
    af68:	4628      	mov	r0, r5
    af6a:	f00d fb4b 	bl	18604 <z_impl_k_queue_get>
		if (work == NULL) {
    af6e:	4604      	mov	r4, r0
    af70:	2800      	cmp	r0, #0
    af72:	d0f5      	beq.n	af60 <z_work_q_main+0xc>
		handler = work->handler;
    af74:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    af76:	b947      	cbnz	r7, af8a <z_work_q_main+0x36>
    af78:	4631      	mov	r1, r6
    af7a:	4640      	mov	r0, r8
    af7c:	221c      	movs	r2, #28
    af7e:	f00f fd85 	bl	1aa8c <printk>
    af82:	211c      	movs	r1, #28
    af84:	4630      	mov	r0, r6
    af86:	f010 f827 	bl	1afd8 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    af8a:	f104 0308 	add.w	r3, r4, #8
    af8e:	e8d3 2fef 	ldaex	r2, [r3]
    af92:	f022 0101 	bic.w	r1, r2, #1
    af96:	e8c3 1fe0 	stlex	r0, r1, [r3]
    af9a:	2800      	cmp	r0, #0
    af9c:	d1f7      	bne.n	af8e <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    af9e:	07d3      	lsls	r3, r2, #31
    afa0:	d501      	bpl.n	afa6 <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    afa2:	4620      	mov	r0, r4
    afa4:	47b8      	blx	r7
	z_impl_k_yield();
    afa6:	f00e fa57 	bl	19458 <z_impl_k_yield>
    afaa:	e7d9      	b.n	af60 <z_work_q_main+0xc>
    afac:	0001fba9 	.word	0x0001fba9
    afb0:	0001fb49 	.word	0x0001fb49

0000afb4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    afb4:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    afb6:	2900      	cmp	r1, #0
    afb8:	d039      	beq.n	b02e <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    afba:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    afbc:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    afbe:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    afc0:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    afc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    afc6:	bf2c      	ite	cs
    afc8:	2408      	movcs	r4, #8
    afca:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    afcc:	1b0c      	subs	r4, r1, r4
    afce:	1b64      	subs	r4, r4, r5
    afd0:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    afd2:	4621      	mov	r1, r4
    afd4:	f00f fdd2 	bl	1ab7c <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    afd8:	07c3      	lsls	r3, r0, #31
    afda:	d408      	bmi.n	afee <sys_heap_free+0x3a>
    afdc:	4914      	ldr	r1, [pc, #80]	; (b030 <sys_heap_free+0x7c>)
    afde:	4815      	ldr	r0, [pc, #84]	; (b034 <sys_heap_free+0x80>)
    afe0:	229a      	movs	r2, #154	; 0x9a
    afe2:	f00f fd53 	bl	1aa8c <printk>
    afe6:	219a      	movs	r1, #154	; 0x9a
    afe8:	4811      	ldr	r0, [pc, #68]	; (b030 <sys_heap_free+0x7c>)
    afea:	f00f fff5 	bl	1afd8 <assert_post_action>
	return c + chunk_size(h, c);
    afee:	4621      	mov	r1, r4
    aff0:	4628      	mov	r0, r5
    aff2:	f00f fdd9 	bl	1aba8 <chunk_size>
    aff6:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    aff8:	4631      	mov	r1, r6
    affa:	2200      	movs	r2, #0
    affc:	4628      	mov	r0, r5
    affe:	f00f fdbd 	bl	1ab7c <chunk_field>
    b002:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    b004:	42b4      	cmp	r4, r6
    b006:	d008      	beq.n	b01a <sys_heap_free+0x66>
    b008:	4909      	ldr	r1, [pc, #36]	; (b030 <sys_heap_free+0x7c>)
    b00a:	480a      	ldr	r0, [pc, #40]	; (b034 <sys_heap_free+0x80>)
    b00c:	22a2      	movs	r2, #162	; 0xa2
    b00e:	f00f fd3d 	bl	1aa8c <printk>
    b012:	21a2      	movs	r1, #162	; 0xa2
    b014:	4806      	ldr	r0, [pc, #24]	; (b030 <sys_heap_free+0x7c>)
    b016:	f00f ffdf 	bl	1afd8 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    b01a:	4621      	mov	r1, r4
    b01c:	4628      	mov	r0, r5
    b01e:	2200      	movs	r2, #0
    b020:	f00f fdc8 	bl	1abb4 <set_chunk_used>
	free_chunk(h, c);
    b024:	4621      	mov	r1, r4
}
    b026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    b02a:	f00f bf05 	b.w	1ae38 <free_chunk>
}
    b02e:	bd70      	pop	{r4, r5, r6, pc}
    b030:	0001fbcc 	.word	0x0001fbcc
    b034:	0001fb49 	.word	0x0001fb49

0000b038 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    b038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    b03c:	f101 39ff 	add.w	r9, r1, #4294967295
    b040:	ea19 0f01 	tst.w	r9, r1
{
    b044:	4680      	mov	r8, r0
    b046:	460f      	mov	r7, r1
    b048:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    b04a:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    b04c:	d008      	beq.n	b060 <sys_heap_aligned_alloc+0x28>
    b04e:	4931      	ldr	r1, [pc, #196]	; (b114 <sys_heap_aligned_alloc+0xdc>)
    b050:	4831      	ldr	r0, [pc, #196]	; (b118 <sys_heap_aligned_alloc+0xe0>)
    b052:	22fc      	movs	r2, #252	; 0xfc
    b054:	f00f fd1a 	bl	1aa8c <printk>
    b058:	21fc      	movs	r1, #252	; 0xfc
    b05a:	482e      	ldr	r0, [pc, #184]	; (b114 <sys_heap_aligned_alloc+0xdc>)
    b05c:	f00f ffbc 	bl	1afd8 <assert_post_action>
	return big_heap_chunks(h->len);
    b060:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    b062:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    b066:	bf2c      	ite	cs
    b068:	2308      	movcs	r3, #8
    b06a:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    b06c:	429f      	cmp	r7, r3
    b06e:	d805      	bhi.n	b07c <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    b070:	4621      	mov	r1, r4
    b072:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    b074:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    b078:	f00f bf20 	b.w	1aebc <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    b07c:	b91c      	cbnz	r4, b086 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    b07e:	2600      	movs	r6, #0
}
    b080:	4630      	mov	r0, r6
    b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    b086:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    b08a:	d9f8      	bls.n	b07e <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    b08c:	1939      	adds	r1, r7, r4
    b08e:	1ac9      	subs	r1, r1, r3
    b090:	f00f fdac 	bl	1abec <bytes_to_chunksz.isra.0>
    b094:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    b096:	4628      	mov	r0, r5
    b098:	f00f fe03 	bl	1aca2 <alloc_chunk>
	if (c0 == 0) {
    b09c:	4680      	mov	r8, r0
    b09e:	2800      	cmp	r0, #0
    b0a0:	d0ed      	beq.n	b07e <sys_heap_aligned_alloc+0x46>
    b0a2:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    b0a4:	427f      	negs	r7, r7
    b0a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b0aa:	bf2c      	ite	cs
    b0ac:	2308      	movcs	r3, #8
    b0ae:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b0b0:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    b0b4:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    b0b6:	444e      	add	r6, r9
    b0b8:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b0ba:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b0bc:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b0be:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b0c0:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b0c2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    b0c6:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    b0c8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b0cc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    b0d0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    b0d4:	d208      	bcs.n	b0e8 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    b0d6:	4601      	mov	r1, r0
    b0d8:	463a      	mov	r2, r7
    b0da:	4628      	mov	r0, r5
    b0dc:	f00f fe24 	bl	1ad28 <split_chunks>
		free_list_add(h, c0);
    b0e0:	4641      	mov	r1, r8
    b0e2:	4628      	mov	r0, r5
    b0e4:	f00f fe65 	bl	1adb2 <free_list_add>
	return c + chunk_size(h, c);
    b0e8:	4639      	mov	r1, r7
    b0ea:	4628      	mov	r0, r5
    b0ec:	f00f fd5c 	bl	1aba8 <chunk_size>
    b0f0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    b0f2:	4284      	cmp	r4, r0
    b0f4:	d208      	bcs.n	b108 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    b0f6:	4639      	mov	r1, r7
    b0f8:	4628      	mov	r0, r5
    b0fa:	4622      	mov	r2, r4
    b0fc:	f00f fe14 	bl	1ad28 <split_chunks>
		free_list_add(h, c_end);
    b100:	4621      	mov	r1, r4
    b102:	4628      	mov	r0, r5
    b104:	f00f fe55 	bl	1adb2 <free_list_add>
	set_chunk_used(h, c, true);
    b108:	2201      	movs	r2, #1
    b10a:	4639      	mov	r1, r7
    b10c:	4628      	mov	r0, r5
    b10e:	f00f fd51 	bl	1abb4 <set_chunk_used>
	return mem;
    b112:	e7b5      	b.n	b080 <sys_heap_aligned_alloc+0x48>
    b114:	0001fbcc 	.word	0x0001fbcc
    b118:	0001fb49 	.word	0x0001fb49

0000b11c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    b11c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b122:	4607      	mov	r7, r0
    b124:	460c      	mov	r4, r1
    b126:	4616      	mov	r6, r2
    b128:	d20e      	bcs.n	b148 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    b12a:	2a04      	cmp	r2, #4
    b12c:	d80a      	bhi.n	b144 <sys_heap_init+0x28>
    b12e:	493d      	ldr	r1, [pc, #244]	; (b224 <sys_heap_init+0x108>)
    b130:	483d      	ldr	r0, [pc, #244]	; (b228 <sys_heap_init+0x10c>)
    b132:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    b136:	f00f fca9 	bl	1aa8c <printk>
    b13a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    b13e:	4839      	ldr	r0, [pc, #228]	; (b224 <sys_heap_init+0x108>)
    b140:	f00f ff4a 	bl	1afd8 <assert_post_action>
    b144:	2204      	movs	r2, #4
    b146:	e000      	b.n	b14a <sys_heap_init+0x2e>
    b148:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    b14a:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b14c:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b14e:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b150:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b154:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    b158:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    b15a:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    b15c:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    b160:	d80a      	bhi.n	b178 <sys_heap_init+0x5c>
    b162:	4930      	ldr	r1, [pc, #192]	; (b224 <sys_heap_init+0x108>)
    b164:	4830      	ldr	r0, [pc, #192]	; (b228 <sys_heap_init+0x10c>)
    b166:	f240 1275 	movw	r2, #373	; 0x175
    b16a:	f00f fc8f 	bl	1aa8c <printk>
    b16e:	f240 1175 	movw	r1, #373	; 0x175
    b172:	482c      	ldr	r0, [pc, #176]	; (b224 <sys_heap_init+0x108>)
    b174:	f00f ff30 	bl	1afd8 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    b178:	2300      	movs	r3, #0
    b17a:	2200      	movs	r2, #0
	heap->heap = h;
    b17c:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    b17e:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    b182:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b184:	4631      	mov	r1, r6
    b186:	4630      	mov	r0, r6
	h->len = buf_sz;
    b188:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    b18a:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b18c:	f00f fd37 	bl	1abfe <bucket_idx.isra.0>
    b190:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b192:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b194:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b196:	4630      	mov	r0, r6
    b198:	f00f fd28 	bl	1abec <bytes_to_chunksz.isra.0>
    b19c:	341b      	adds	r4, #27
    b19e:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    b1a0:	4420      	add	r0, r4
    b1a2:	42b0      	cmp	r0, r6
    b1a4:	d30a      	bcc.n	b1bc <sys_heap_init+0xa0>
    b1a6:	491f      	ldr	r1, [pc, #124]	; (b224 <sys_heap_init+0x108>)
    b1a8:	481f      	ldr	r0, [pc, #124]	; (b228 <sys_heap_init+0x10c>)
    b1aa:	f240 1281 	movw	r2, #385	; 0x181
    b1ae:	f00f fc6d 	bl	1aa8c <printk>
    b1b2:	f240 1181 	movw	r1, #385	; 0x181
    b1b6:	481b      	ldr	r0, [pc, #108]	; (b224 <sys_heap_init+0x108>)
    b1b8:	f00f ff0e 	bl	1afd8 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    b1bc:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    b1be:	4619      	mov	r1, r3
    b1c0:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    b1c4:	42bb      	cmp	r3, r7
    b1c6:	db28      	blt.n	b21a <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    b1c8:	4622      	mov	r2, r4
    b1ca:	4628      	mov	r0, r5
    b1cc:	2100      	movs	r1, #0
    b1ce:	f00f fd09 	bl	1abe4 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    b1d2:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    b1d4:	4628      	mov	r0, r5
    b1d6:	2201      	movs	r2, #1
    b1d8:	2100      	movs	r1, #0
    b1da:	f00f fceb 	bl	1abb4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    b1de:	463a      	mov	r2, r7
    b1e0:	4621      	mov	r1, r4
    b1e2:	f00f fcff 	bl	1abe4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    b1e6:	4623      	mov	r3, r4
    b1e8:	2200      	movs	r2, #0
    b1ea:	4621      	mov	r1, r4
    b1ec:	4628      	mov	r0, r5
    b1ee:	f00f fcd0 	bl	1ab92 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    b1f2:	4631      	mov	r1, r6
    b1f4:	4628      	mov	r0, r5
    b1f6:	f00f fcf5 	bl	1abe4 <set_chunk_size>
    b1fa:	463b      	mov	r3, r7
    b1fc:	4631      	mov	r1, r6
    b1fe:	4628      	mov	r0, r5
    b200:	2200      	movs	r2, #0
    b202:	f00f fcc6 	bl	1ab92 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    b206:	4631      	mov	r1, r6
    b208:	4628      	mov	r0, r5
    b20a:	2201      	movs	r2, #1
    b20c:	f00f fcd2 	bl	1abb4 <set_chunk_used>

	free_list_add(h, chunk0_size);
    b210:	4621      	mov	r1, r4
}
    b212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    b216:	f00f bdcc 	b.w	1adb2 <free_list_add>
		h->buckets[i].next = 0;
    b21a:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    b21e:	3301      	adds	r3, #1
    b220:	e7d0      	b.n	b1c4 <sys_heap_init+0xa8>
    b222:	bf00      	nop
    b224:	0001fbcc 	.word	0x0001fbcc
    b228:	0001fb49 	.word	0x0001fb49

0000b22c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b230:	468b      	mov	fp, r1
    b232:	4692      	mov	sl, r2
    b234:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b236:	2500      	movs	r5, #0
{
    b238:	b091      	sub	sp, #68	; 0x44
    b23a:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b23c:	f89a 0000 	ldrb.w	r0, [sl]
    b240:	b908      	cbnz	r0, b246 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    b242:	4628      	mov	r0, r5
    b244:	e35f      	b.n	b906 <cbvprintf+0x6da>
		if (*fp != '%') {
    b246:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    b248:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    b24c:	d007      	beq.n	b25e <cbvprintf+0x32>
			OUTC('%');
    b24e:	4659      	mov	r1, fp
    b250:	9b02      	ldr	r3, [sp, #8]
    b252:	4798      	blx	r3
    b254:	2800      	cmp	r0, #0
    b256:	f2c0 8356 	blt.w	b906 <cbvprintf+0x6da>
    b25a:	3501      	adds	r5, #1
			break;
    b25c:	e212      	b.n	b684 <cbvprintf+0x458>
		} state = {
    b25e:	2218      	movs	r2, #24
    b260:	2100      	movs	r1, #0
    b262:	a80a      	add	r0, sp, #40	; 0x28
    b264:	f010 fe67 	bl	1bf36 <memset>
	if (*sp == '%') {
    b268:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b26c:	2b25      	cmp	r3, #37	; 0x25
    b26e:	d078      	beq.n	b362 <cbvprintf+0x136>
    b270:	2200      	movs	r2, #0
    b272:	4694      	mov	ip, r2
    b274:	4696      	mov	lr, r2
    b276:	4616      	mov	r6, r2
    b278:	4610      	mov	r0, r2
    b27a:	4639      	mov	r1, r7
		switch (*sp) {
    b27c:	f817 3b01 	ldrb.w	r3, [r7], #1
    b280:	2b2b      	cmp	r3, #43	; 0x2b
    b282:	f000 809d 	beq.w	b3c0 <cbvprintf+0x194>
    b286:	f200 8094 	bhi.w	b3b2 <cbvprintf+0x186>
    b28a:	2b20      	cmp	r3, #32
    b28c:	f000 809a 	beq.w	b3c4 <cbvprintf+0x198>
    b290:	2b23      	cmp	r3, #35	; 0x23
    b292:	f000 809a 	beq.w	b3ca <cbvprintf+0x19e>
    b296:	b128      	cbz	r0, b2a4 <cbvprintf+0x78>
    b298:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b29c:	f040 0004 	orr.w	r0, r0, #4
    b2a0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b2a4:	b12e      	cbz	r6, b2b2 <cbvprintf+0x86>
    b2a6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b2aa:	f040 0008 	orr.w	r0, r0, #8
    b2ae:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b2b2:	f1be 0f00 	cmp.w	lr, #0
    b2b6:	d005      	beq.n	b2c4 <cbvprintf+0x98>
    b2b8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b2bc:	f040 0010 	orr.w	r0, r0, #16
    b2c0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b2c4:	f1bc 0f00 	cmp.w	ip, #0
    b2c8:	d005      	beq.n	b2d6 <cbvprintf+0xaa>
    b2ca:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b2ce:	f040 0020 	orr.w	r0, r0, #32
    b2d2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b2d6:	b12a      	cbz	r2, b2e4 <cbvprintf+0xb8>
    b2d8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b2dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    b2e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    b2e4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b2e8:	f002 0044 	and.w	r0, r2, #68	; 0x44
    b2ec:	2844      	cmp	r0, #68	; 0x44
    b2ee:	d103      	bne.n	b2f8 <cbvprintf+0xcc>
		conv->flag_zero = false;
    b2f0:	f36f 1286 	bfc	r2, #6, #1
    b2f4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    b2f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    b2fc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    b2fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b302:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    b306:	d17b      	bne.n	b400 <cbvprintf+0x1d4>
		conv->width_star = true;
    b308:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    b30c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    b30e:	f042 0201 	orr.w	r2, r2, #1
    b312:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    b316:	781a      	ldrb	r2, [r3, #0]
    b318:	2a2e      	cmp	r2, #46	; 0x2e
    b31a:	bf0c      	ite	eq
    b31c:	2101      	moveq	r1, #1
    b31e:	2100      	movne	r1, #0
    b320:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b324:	f361 0241 	bfi	r2, r1, #1, #1
    b328:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    b32c:	d174      	bne.n	b418 <cbvprintf+0x1ec>
	if (*sp == '*') {
    b32e:	785a      	ldrb	r2, [r3, #1]
    b330:	2a2a      	cmp	r2, #42	; 0x2a
    b332:	d06a      	beq.n	b40a <cbvprintf+0x1de>
	size_t val = 0;
    b334:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    b336:	260a      	movs	r6, #10
	++sp;
    b338:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b33a:	4618      	mov	r0, r3
    b33c:	f810 2b01 	ldrb.w	r2, [r0], #1
    b340:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b344:	2f09      	cmp	r7, #9
    b346:	f240 808e 	bls.w	b466 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    b34a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    b34e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    b350:	f3c2 0040 	ubfx	r0, r2, #1, #1
    b354:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    b358:	f361 0241 	bfi	r2, r1, #1, #1
    b35c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b360:	e05a      	b.n	b418 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    b362:	f10a 0702 	add.w	r7, sl, #2
    b366:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    b36a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b36e:	07d9      	lsls	r1, r3, #31
    b370:	f140 8149 	bpl.w	b606 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    b374:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    b378:	f1b9 0f00 	cmp.w	r9, #0
    b37c:	da07      	bge.n	b38e <cbvprintf+0x162>
				conv->flag_dash = true;
    b37e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    b382:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    b386:	f042 0204 	orr.w	r2, r2, #4
    b38a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    b38e:	075a      	lsls	r2, r3, #29
    b390:	f140 8142 	bpl.w	b618 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    b394:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    b398:	f1b8 0f00 	cmp.w	r8, #0
    b39c:	f280 8141 	bge.w	b622 <cbvprintf+0x3f6>
				conv->prec_present = false;
    b3a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b3a4:	f36f 0341 	bfc	r3, #1, #1
    b3a8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    b3ac:	f04f 38ff 	mov.w	r8, #4294967295
    b3b0:	e137      	b.n	b622 <cbvprintf+0x3f6>
		switch (*sp) {
    b3b2:	2b2d      	cmp	r3, #45	; 0x2d
    b3b4:	d00c      	beq.n	b3d0 <cbvprintf+0x1a4>
    b3b6:	2b30      	cmp	r3, #48	; 0x30
    b3b8:	f47f af6d 	bne.w	b296 <cbvprintf+0x6a>
			conv->flag_zero = true;
    b3bc:	2201      	movs	r2, #1
	} while (loop);
    b3be:	e75c      	b.n	b27a <cbvprintf+0x4e>
			conv->flag_plus = true;
    b3c0:	2601      	movs	r6, #1
    b3c2:	e75a      	b.n	b27a <cbvprintf+0x4e>
			conv->flag_space = true;
    b3c4:	f04f 0e01 	mov.w	lr, #1
    b3c8:	e757      	b.n	b27a <cbvprintf+0x4e>
			conv->flag_hash = true;
    b3ca:	f04f 0c01 	mov.w	ip, #1
    b3ce:	e754      	b.n	b27a <cbvprintf+0x4e>
		switch (*sp) {
    b3d0:	2001      	movs	r0, #1
    b3d2:	e752      	b.n	b27a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    b3d4:	4633      	mov	r3, r6
    b3d6:	fb0c 0202 	mla	r2, ip, r2, r0
    b3da:	3a30      	subs	r2, #48	; 0x30
    b3dc:	461e      	mov	r6, r3
    b3de:	f816 0b01 	ldrb.w	r0, [r6], #1
    b3e2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b3e6:	2f09      	cmp	r7, #9
    b3e8:	d9f4      	bls.n	b3d4 <cbvprintf+0x1a8>
	if (sp != wp) {
    b3ea:	4299      	cmp	r1, r3
    b3ec:	d093      	beq.n	b316 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    b3ee:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    b3f2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    b3f4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    b3f6:	f362 0141 	bfi	r1, r2, #1, #1
    b3fa:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    b3fe:	e78a      	b.n	b316 <cbvprintf+0xea>
    b400:	460b      	mov	r3, r1
	size_t val = 0;
    b402:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    b404:	f04f 0c0a 	mov.w	ip, #10
    b408:	e7e8      	b.n	b3dc <cbvprintf+0x1b0>
		conv->prec_star = true;
    b40a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    b40e:	3302      	adds	r3, #2
		conv->prec_star = true;
    b410:	f042 0204 	orr.w	r2, r2, #4
    b414:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    b418:	461f      	mov	r7, r3
    b41a:	f817 2b01 	ldrb.w	r2, [r7], #1
    b41e:	2a6c      	cmp	r2, #108	; 0x6c
    b420:	d041      	beq.n	b4a6 <cbvprintf+0x27a>
    b422:	d825      	bhi.n	b470 <cbvprintf+0x244>
    b424:	2a68      	cmp	r2, #104	; 0x68
    b426:	d02b      	beq.n	b480 <cbvprintf+0x254>
    b428:	2a6a      	cmp	r2, #106	; 0x6a
    b42a:	d046      	beq.n	b4ba <cbvprintf+0x28e>
    b42c:	2a4c      	cmp	r2, #76	; 0x4c
    b42e:	d04c      	beq.n	b4ca <cbvprintf+0x29e>
    b430:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    b432:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    b436:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    b43a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    b43c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    b440:	f200 80d9 	bhi.w	b5f6 <cbvprintf+0x3ca>
    b444:	2a57      	cmp	r2, #87	; 0x57
    b446:	d84d      	bhi.n	b4e4 <cbvprintf+0x2b8>
    b448:	2a41      	cmp	r2, #65	; 0x41
    b44a:	d003      	beq.n	b454 <cbvprintf+0x228>
    b44c:	3a45      	subs	r2, #69	; 0x45
    b44e:	2a02      	cmp	r2, #2
    b450:	f200 80d1 	bhi.w	b5f6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    b454:	2204      	movs	r2, #4
    b456:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b45a:	f362 0302 	bfi	r3, r2, #0, #3
    b45e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    b462:	2301      	movs	r3, #1
			break;
    b464:	e09e      	b.n	b5a4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    b466:	fb06 2101 	mla	r1, r6, r1, r2
    b46a:	4603      	mov	r3, r0
    b46c:	3930      	subs	r1, #48	; 0x30
    b46e:	e764      	b.n	b33a <cbvprintf+0x10e>
	switch (*sp) {
    b470:	2a74      	cmp	r2, #116	; 0x74
    b472:	d026      	beq.n	b4c2 <cbvprintf+0x296>
    b474:	2a7a      	cmp	r2, #122	; 0x7a
    b476:	d1db      	bne.n	b430 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    b478:	2206      	movs	r2, #6
    b47a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b47e:	e00d      	b.n	b49c <cbvprintf+0x270>
		if (*++sp == 'h') {
    b480:	785a      	ldrb	r2, [r3, #1]
    b482:	2a68      	cmp	r2, #104	; 0x68
    b484:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b488:	d106      	bne.n	b498 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    b48a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b48c:	f361 02c6 	bfi	r2, r1, #3, #4
    b490:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    b494:	1c9f      	adds	r7, r3, #2
    b496:	e7cc      	b.n	b432 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    b498:	4613      	mov	r3, r2
    b49a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    b49c:	f362 03c6 	bfi	r3, r2, #3, #4
    b4a0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    b4a4:	e7c5      	b.n	b432 <cbvprintf+0x206>
		if (*++sp == 'l') {
    b4a6:	785a      	ldrb	r2, [r3, #1]
    b4a8:	2a6c      	cmp	r2, #108	; 0x6c
    b4aa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b4ae:	d101      	bne.n	b4b4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    b4b0:	2104      	movs	r1, #4
    b4b2:	e7eb      	b.n	b48c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    b4b4:	4613      	mov	r3, r2
    b4b6:	2203      	movs	r2, #3
    b4b8:	e7f0      	b.n	b49c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    b4ba:	2205      	movs	r2, #5
    b4bc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b4c0:	e7ec      	b.n	b49c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    b4c2:	2207      	movs	r2, #7
    b4c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b4c8:	e7e8      	b.n	b49c <cbvprintf+0x270>
		conv->unsupported = true;
    b4ca:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    b4ce:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    b4d2:	f023 0302 	bic.w	r3, r3, #2
    b4d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b4da:	f043 0302 	orr.w	r3, r3, #2
    b4de:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    b4e2:	e7a6      	b.n	b432 <cbvprintf+0x206>
    b4e4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    b4e8:	2920      	cmp	r1, #32
    b4ea:	f200 8084 	bhi.w	b5f6 <cbvprintf+0x3ca>
    b4ee:	a001      	add	r0, pc, #4	; (adr r0, b4f4 <cbvprintf+0x2c8>)
    b4f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    b4f4:	0000b5b9 	.word	0x0000b5b9
    b4f8:	0000b5f7 	.word	0x0000b5f7
    b4fc:	0000b5f7 	.word	0x0000b5f7
    b500:	0000b5f7 	.word	0x0000b5f7
    b504:	0000b5f7 	.word	0x0000b5f7
    b508:	0000b5f7 	.word	0x0000b5f7
    b50c:	0000b5f7 	.word	0x0000b5f7
    b510:	0000b5f7 	.word	0x0000b5f7
    b514:	0000b5f7 	.word	0x0000b5f7
    b518:	0000b455 	.word	0x0000b455
    b51c:	0000b5f7 	.word	0x0000b5f7
    b520:	0000b5b9 	.word	0x0000b5b9
    b524:	0000b579 	.word	0x0000b579
    b528:	0000b455 	.word	0x0000b455
    b52c:	0000b455 	.word	0x0000b455
    b530:	0000b455 	.word	0x0000b455
    b534:	0000b5f7 	.word	0x0000b5f7
    b538:	0000b579 	.word	0x0000b579
    b53c:	0000b5f7 	.word	0x0000b5f7
    b540:	0000b5f7 	.word	0x0000b5f7
    b544:	0000b5f7 	.word	0x0000b5f7
    b548:	0000b5f7 	.word	0x0000b5f7
    b54c:	0000b5c1 	.word	0x0000b5c1
    b550:	0000b5b9 	.word	0x0000b5b9
    b554:	0000b5dd 	.word	0x0000b5dd
    b558:	0000b5f7 	.word	0x0000b5f7
    b55c:	0000b5f7 	.word	0x0000b5f7
    b560:	0000b5dd 	.word	0x0000b5dd
    b564:	0000b5f7 	.word	0x0000b5f7
    b568:	0000b5b9 	.word	0x0000b5b9
    b56c:	0000b5f7 	.word	0x0000b5f7
    b570:	0000b5f7 	.word	0x0000b5f7
    b574:	0000b5b9 	.word	0x0000b5b9
		conv->specifier_cat = SPECIFIER_SINT;
    b578:	2001      	movs	r0, #1
    b57a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b57e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b582:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b586:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b588:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    b58c:	bf02      	ittt	eq
    b58e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    b592:	f041 0101 	orreq.w	r1, r1, #1
    b596:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    b59a:	2a63      	cmp	r2, #99	; 0x63
    b59c:	d131      	bne.n	b602 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b59e:	3b00      	subs	r3, #0
    b5a0:	bf18      	it	ne
    b5a2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b5a4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b5a8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b5ac:	430b      	orrs	r3, r1
    b5ae:	f363 0241 	bfi	r2, r3, #1, #1
    b5b2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b5b6:	e6d8      	b.n	b36a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    b5b8:	2002      	movs	r0, #2
    b5ba:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    b5be:	e7de      	b.n	b57e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    b5c0:	2103      	movs	r1, #3
    b5c2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b5ca:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    b5ce:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5d2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    b5d4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5d8:	4143      	adcs	r3, r0
    b5da:	e7e3      	b.n	b5a4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    b5dc:	2103      	movs	r1, #3
    b5de:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b5e2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b5e6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b5ea:	bf14      	ite	ne
    b5ec:	2301      	movne	r3, #1
    b5ee:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    b5f0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b5f4:	e7d6      	b.n	b5a4 <cbvprintf+0x378>
		conv->invalid = true;
    b5f6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b5fa:	f043 0301 	orr.w	r3, r3, #1
    b5fe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    b602:	2300      	movs	r3, #0
    b604:	e7ce      	b.n	b5a4 <cbvprintf+0x378>
		} else if (conv->width_present) {
    b606:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    b60a:	2a00      	cmp	r2, #0
		int width = -1;
    b60c:	bfac      	ite	ge
    b60e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b612:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    b616:	e6ba      	b.n	b38e <cbvprintf+0x162>
		} else if (conv->prec_present) {
    b618:	079b      	lsls	r3, r3, #30
    b61a:	f57f aec7 	bpl.w	b3ac <cbvprintf+0x180>
			precision = conv->prec_value;
    b61e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    b622:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b624:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    b628:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    b62c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    b630:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b634:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b636:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b63a:	d138      	bne.n	b6ae <cbvprintf+0x482>
			switch (length_mod) {
    b63c:	1ecb      	subs	r3, r1, #3
    b63e:	2b04      	cmp	r3, #4
    b640:	d822      	bhi.n	b688 <cbvprintf+0x45c>
    b642:	e8df f003 	tbb	[pc, r3]
    b646:	0903      	.short	0x0903
    b648:	2109      	.short	0x2109
    b64a:	21          	.byte	0x21
    b64b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b64c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    b650:	17da      	asrs	r2, r3, #31
    b652:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    b656:	e006      	b.n	b666 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    b658:	3407      	adds	r4, #7
    b65a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b65e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b662:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    b666:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b66a:	f013 0603 	ands.w	r6, r3, #3
    b66e:	d056      	beq.n	b71e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    b670:	463b      	mov	r3, r7
    b672:	4652      	mov	r2, sl
    b674:	4659      	mov	r1, fp
    b676:	9802      	ldr	r0, [sp, #8]
    b678:	f00f fc98 	bl	1afac <outs>
    b67c:	2800      	cmp	r0, #0
    b67e:	f2c0 8142 	blt.w	b906 <cbvprintf+0x6da>
    b682:	4405      	add	r5, r0
			continue;
    b684:	46ba      	mov	sl, r7
    b686:	e5d9      	b.n	b23c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b688:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b68c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b68e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b692:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    b696:	d105      	bne.n	b6a4 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    b698:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    b69c:	930a      	str	r3, [sp, #40]	; 0x28
    b69e:	2300      	movs	r3, #0
    b6a0:	930b      	str	r3, [sp, #44]	; 0x2c
    b6a2:	e7e0      	b.n	b666 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    b6a4:	2902      	cmp	r1, #2
    b6a6:	d1de      	bne.n	b666 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    b6a8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    b6ac:	e7d0      	b.n	b650 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b6ae:	2b02      	cmp	r3, #2
    b6b0:	d123      	bne.n	b6fa <cbvprintf+0x4ce>
			switch (length_mod) {
    b6b2:	1ecb      	subs	r3, r1, #3
    b6b4:	2b04      	cmp	r3, #4
    b6b6:	d813      	bhi.n	b6e0 <cbvprintf+0x4b4>
    b6b8:	e8df f003 	tbb	[pc, r3]
    b6bc:	120a0a03 	.word	0x120a0a03
    b6c0:	12          	.byte	0x12
    b6c1:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    b6c2:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    b6c4:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    b6c6:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    b6c8:	920a      	str	r2, [sp, #40]	; 0x28
    b6ca:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    b6cc:	4604      	mov	r4, r0
    b6ce:	e7ca      	b.n	b666 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    b6d0:	1de0      	adds	r0, r4, #7
    b6d2:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    b6d6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b6da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    b6de:	e7f5      	b.n	b6cc <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    b6e0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b6e4:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b6e6:	930a      	str	r3, [sp, #40]	; 0x28
    b6e8:	f04f 0300 	mov.w	r3, #0
    b6ec:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    b6ee:	d0d3      	beq.n	b698 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    b6f0:	2902      	cmp	r1, #2
    b6f2:	d1b8      	bne.n	b666 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    b6f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b6f8:	e7d0      	b.n	b69c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    b6fa:	2b04      	cmp	r3, #4
    b6fc:	d109      	bne.n	b712 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    b6fe:	1de3      	adds	r3, r4, #7
    b700:	f023 0307 	bic.w	r3, r3, #7
    b704:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    b708:	e9d3 2300 	ldrd	r2, r3, [r3]
    b70c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b710:	e7a9      	b.n	b666 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b712:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b714:	bf04      	itt	eq
    b716:	f854 3b04 	ldreq.w	r3, [r4], #4
    b71a:	930a      	streq	r3, [sp, #40]	; 0x28
    b71c:	e7a3      	b.n	b666 <cbvprintf+0x43a>
		switch (conv->specifier) {
    b71e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b722:	2878      	cmp	r0, #120	; 0x78
    b724:	d8ae      	bhi.n	b684 <cbvprintf+0x458>
    b726:	2862      	cmp	r0, #98	; 0x62
    b728:	d822      	bhi.n	b770 <cbvprintf+0x544>
    b72a:	2825      	cmp	r0, #37	; 0x25
    b72c:	f43f ad8f 	beq.w	b24e <cbvprintf+0x22>
    b730:	2858      	cmp	r0, #88	; 0x58
    b732:	d1a7      	bne.n	b684 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b734:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b738:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b73c:	9300      	str	r3, [sp, #0]
    b73e:	aa0c      	add	r2, sp, #48	; 0x30
    b740:	ab04      	add	r3, sp, #16
    b742:	f00f fbed 	bl	1af20 <encode_uint>
    b746:	4682      	mov	sl, r0
			if (precision >= 0) {
    b748:	f1b8 0f00 	cmp.w	r8, #0
    b74c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    b750:	db0c      	blt.n	b76c <cbvprintf+0x540>
				conv->flag_zero = false;
    b752:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    b756:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    b75a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b75e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    b760:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    b764:	d902      	bls.n	b76c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    b766:	eba8 0303 	sub.w	r3, r8, r3
    b76a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    b76c:	4680      	mov	r8, r0
    b76e:	e03d      	b.n	b7ec <cbvprintf+0x5c0>
    b770:	3863      	subs	r0, #99	; 0x63
    b772:	2815      	cmp	r0, #21
    b774:	d886      	bhi.n	b684 <cbvprintf+0x458>
    b776:	a201      	add	r2, pc, #4	; (adr r2, b77c <cbvprintf+0x550>)
    b778:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b77c:	0000b7fd 	.word	0x0000b7fd
    b780:	0000b861 	.word	0x0000b861
    b784:	0000b685 	.word	0x0000b685
    b788:	0000b685 	.word	0x0000b685
    b78c:	0000b685 	.word	0x0000b685
    b790:	0000b685 	.word	0x0000b685
    b794:	0000b861 	.word	0x0000b861
    b798:	0000b685 	.word	0x0000b685
    b79c:	0000b685 	.word	0x0000b685
    b7a0:	0000b685 	.word	0x0000b685
    b7a4:	0000b685 	.word	0x0000b685
    b7a8:	0000b8bb 	.word	0x0000b8bb
    b7ac:	0000b889 	.word	0x0000b889
    b7b0:	0000b88d 	.word	0x0000b88d
    b7b4:	0000b685 	.word	0x0000b685
    b7b8:	0000b685 	.word	0x0000b685
    b7bc:	0000b7d5 	.word	0x0000b7d5
    b7c0:	0000b685 	.word	0x0000b685
    b7c4:	0000b889 	.word	0x0000b889
    b7c8:	0000b685 	.word	0x0000b685
    b7cc:	0000b685 	.word	0x0000b685
    b7d0:	0000b889 	.word	0x0000b889
			if (precision >= 0) {
    b7d4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    b7d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    b7dc:	db0a      	blt.n	b7f4 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    b7de:	4641      	mov	r1, r8
    b7e0:	4650      	mov	r0, sl
    b7e2:	f010 fb46 	bl	1be72 <strnlen>
		char sign = 0;
    b7e6:	2600      	movs	r6, #0
			bpe = bps + len;
    b7e8:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    b7ec:	f1ba 0f00 	cmp.w	sl, #0
    b7f0:	d10c      	bne.n	b80c <cbvprintf+0x5e0>
    b7f2:	e747      	b.n	b684 <cbvprintf+0x458>
				len = strlen(bps);
    b7f4:	4650      	mov	r0, sl
    b7f6:	f010 fb35 	bl	1be64 <strlen>
    b7fa:	e7f4      	b.n	b7e6 <cbvprintf+0x5ba>
			break;
    b7fc:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    b800:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b804:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    b808:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    b80c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    b810:	b106      	cbz	r6, b814 <cbvprintf+0x5e8>
			nj_len += 1U;
    b812:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    b814:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    b818:	06d0      	lsls	r0, r2, #27
    b81a:	d568      	bpl.n	b8ee <cbvprintf+0x6c2>
			nj_len += 2U;
    b81c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    b81e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    b820:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    b822:	bf48      	it	mi
    b824:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    b826:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    b828:	bf48      	it	mi
    b82a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    b82c:	f1b9 0f00 	cmp.w	r9, #0
    b830:	dd76      	ble.n	b920 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    b832:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    b836:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    b83a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b83e:	9303      	str	r3, [sp, #12]
    b840:	0753      	lsls	r3, r2, #29
    b842:	d46d      	bmi.n	b920 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    b844:	0650      	lsls	r0, r2, #25
    b846:	d561      	bpl.n	b90c <cbvprintf+0x6e0>
					if (sign != 0) {
    b848:	b146      	cbz	r6, b85c <cbvprintf+0x630>
						OUTC(sign);
    b84a:	4659      	mov	r1, fp
    b84c:	4630      	mov	r0, r6
    b84e:	9b02      	ldr	r3, [sp, #8]
    b850:	4798      	blx	r3
    b852:	2800      	cmp	r0, #0
    b854:	db57      	blt.n	b906 <cbvprintf+0x6da>
						sign = 0;
    b856:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    b858:	3501      	adds	r5, #1
						sign = 0;
    b85a:	461e      	mov	r6, r3
					pad = '0';
    b85c:	2330      	movs	r3, #48	; 0x30
    b85e:	e056      	b.n	b90e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    b860:	071e      	lsls	r6, r3, #28
    b862:	d40f      	bmi.n	b884 <cbvprintf+0x658>
				sign = ' ';
    b864:	f013 0610 	ands.w	r6, r3, #16
    b868:	bf18      	it	ne
    b86a:	2620      	movne	r6, #32
			if (value->sint < 0) {
    b86c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b870:	2b00      	cmp	r3, #0
    b872:	f6bf af5f 	bge.w	b734 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    b876:	4252      	negs	r2, r2
    b878:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    b87c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    b87e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b882:	e757      	b.n	b734 <cbvprintf+0x508>
				sign = '+';
    b884:	262b      	movs	r6, #43	; 0x2b
    b886:	e7f1      	b.n	b86c <cbvprintf+0x640>
		switch (conv->specifier) {
    b888:	2600      	movs	r6, #0
    b88a:	e753      	b.n	b734 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    b88c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b88e:	b340      	cbz	r0, b8e2 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b890:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b894:	9300      	str	r3, [sp, #0]
    b896:	2100      	movs	r1, #0
    b898:	ab04      	add	r3, sp, #16
    b89a:	aa0c      	add	r2, sp, #48	; 0x30
    b89c:	f00f fb40 	bl	1af20 <encode_uint>
				conv->altform_0c = true;
    b8a0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b8a4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    b8a6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b8aa:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b8ae:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    b8b2:	2600      	movs	r6, #0
				conv->altform_0c = true;
    b8b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b8b8:	e746      	b.n	b748 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b8bc:	2907      	cmp	r1, #7
    b8be:	f63f aee1 	bhi.w	b684 <cbvprintf+0x458>
    b8c2:	e8df f001 	tbb	[pc, r1]
    b8c6:	040c      	.short	0x040c
    b8c8:	08080c06 	.word	0x08080c06
    b8cc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b8ce:	701d      	strb	r5, [r3, #0]
		break;
    b8d0:	e6d8      	b.n	b684 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b8d2:	801d      	strh	r5, [r3, #0]
		break;
    b8d4:	e6d6      	b.n	b684 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b8d6:	17ea      	asrs	r2, r5, #31
    b8d8:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b8dc:	e6d2      	b.n	b684 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b8de:	601d      	str	r5, [r3, #0]
		break;
    b8e0:	e6d0      	b.n	b684 <cbvprintf+0x458>
			bps = "(nil)";
    b8e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b9ac <cbvprintf+0x780>
    b8e6:	4606      	mov	r6, r0
			bpe = bps + 5;
    b8e8:	f10a 0805 	add.w	r8, sl, #5
    b8ec:	e78e      	b.n	b80c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b8ee:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b8f0:	bf48      	it	mi
    b8f2:	3301      	addmi	r3, #1
    b8f4:	e793      	b.n	b81e <cbvprintf+0x5f2>
					OUTC(pad);
    b8f6:	4618      	mov	r0, r3
    b8f8:	9303      	str	r3, [sp, #12]
    b8fa:	4659      	mov	r1, fp
    b8fc:	9b02      	ldr	r3, [sp, #8]
    b8fe:	4798      	blx	r3
    b900:	2800      	cmp	r0, #0
    b902:	9b03      	ldr	r3, [sp, #12]
    b904:	da04      	bge.n	b910 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b906:	b011      	add	sp, #68	; 0x44
    b908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b90c:	2320      	movs	r3, #32
    b90e:	444d      	add	r5, r9
    b910:	464a      	mov	r2, r9
				while (width-- > 0) {
    b912:	2a00      	cmp	r2, #0
    b914:	eba5 0109 	sub.w	r1, r5, r9
    b918:	f109 39ff 	add.w	r9, r9, #4294967295
    b91c:	dceb      	bgt.n	b8f6 <cbvprintf+0x6ca>
    b91e:	460d      	mov	r5, r1
		if (sign != 0) {
    b920:	b136      	cbz	r6, b930 <cbvprintf+0x704>
			OUTC(sign);
    b922:	4659      	mov	r1, fp
    b924:	4630      	mov	r0, r6
    b926:	9b02      	ldr	r3, [sp, #8]
    b928:	4798      	blx	r3
    b92a:	2800      	cmp	r0, #0
    b92c:	dbeb      	blt.n	b906 <cbvprintf+0x6da>
    b92e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b930:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b934:	06d9      	lsls	r1, r3, #27
    b936:	d401      	bmi.n	b93c <cbvprintf+0x710>
    b938:	071a      	lsls	r2, r3, #28
    b93a:	d506      	bpl.n	b94a <cbvprintf+0x71e>
				OUTC('0');
    b93c:	4659      	mov	r1, fp
    b93e:	2030      	movs	r0, #48	; 0x30
    b940:	9b02      	ldr	r3, [sp, #8]
    b942:	4798      	blx	r3
    b944:	2800      	cmp	r0, #0
    b946:	dbde      	blt.n	b906 <cbvprintf+0x6da>
    b948:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b94a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b94e:	06db      	lsls	r3, r3, #27
    b950:	d507      	bpl.n	b962 <cbvprintf+0x736>
				OUTC(conv->specifier);
    b952:	4659      	mov	r1, fp
    b954:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b958:	9b02      	ldr	r3, [sp, #8]
    b95a:	4798      	blx	r3
    b95c:	2800      	cmp	r0, #0
    b95e:	dbd2      	blt.n	b906 <cbvprintf+0x6da>
    b960:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b962:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b964:	442e      	add	r6, r5
    b966:	1b73      	subs	r3, r6, r5
    b968:	2b00      	cmp	r3, #0
    b96a:	dc16      	bgt.n	b99a <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b96c:	4643      	mov	r3, r8
    b96e:	4652      	mov	r2, sl
    b970:	4659      	mov	r1, fp
    b972:	9802      	ldr	r0, [sp, #8]
    b974:	f00f fb1a 	bl	1afac <outs>
    b978:	2800      	cmp	r0, #0
    b97a:	dbc4      	blt.n	b906 <cbvprintf+0x6da>
    b97c:	4405      	add	r5, r0
		while (width > 0) {
    b97e:	44a9      	add	r9, r5
    b980:	eba9 0305 	sub.w	r3, r9, r5
    b984:	2b00      	cmp	r3, #0
    b986:	f77f ae7d 	ble.w	b684 <cbvprintf+0x458>
			OUTC(' ');
    b98a:	4659      	mov	r1, fp
    b98c:	2020      	movs	r0, #32
    b98e:	9b02      	ldr	r3, [sp, #8]
    b990:	4798      	blx	r3
    b992:	2800      	cmp	r0, #0
    b994:	dbb7      	blt.n	b906 <cbvprintf+0x6da>
    b996:	3501      	adds	r5, #1
			--width;
    b998:	e7f2      	b.n	b980 <cbvprintf+0x754>
				OUTC('0');
    b99a:	4659      	mov	r1, fp
    b99c:	2030      	movs	r0, #48	; 0x30
    b99e:	9b02      	ldr	r3, [sp, #8]
    b9a0:	4798      	blx	r3
    b9a2:	2800      	cmp	r0, #0
    b9a4:	dbaf      	blt.n	b906 <cbvprintf+0x6da>
    b9a6:	3501      	adds	r5, #1
    b9a8:	e7dd      	b.n	b966 <cbvprintf+0x73a>
    b9aa:	bf00      	nop
    b9ac:	0001fbed 	.word	0x0001fbed

0000b9b0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b9b0:	b148      	cbz	r0, b9c6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b9b2:	4b05      	ldr	r3, [pc, #20]	; (b9c8 <arch_busy_wait+0x18>)
    b9b4:	681a      	ldr	r2, [r3, #0]
    b9b6:	4b05      	ldr	r3, [pc, #20]	; (b9cc <arch_busy_wait+0x1c>)
    b9b8:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b9bc:	4b04      	ldr	r3, [pc, #16]	; (b9d0 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b9be:	4350      	muls	r0, r2
    b9c0:	f043 0301 	orr.w	r3, r3, #1
    b9c4:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b9c6:	4770      	bx	lr
    b9c8:	200083f4 	.word	0x200083f4
    b9cc:	000f4240 	.word	0x000f4240
    b9d0:	0001e7f0 	.word	0x0001e7f0

0000b9d4 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b9d4:	4b01      	ldr	r3, [pc, #4]	; (b9dc <virtio_set_status+0x8>)
    b9d6:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b9d8:	4770      	bx	lr
    b9da:	bf00      	nop
    b9dc:	20070000 	.word	0x20070000

0000b9e0 <init_status_flag>:
    b9e0:	2000      	movs	r0, #0
    b9e2:	4b01      	ldr	r3, [pc, #4]	; (b9e8 <init_status_flag+0x8>)
    b9e4:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b9e6:	4770      	bx	lr
    b9e8:	20070000 	.word	0x20070000

0000b9ec <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b9ec:	4b01      	ldr	r3, [pc, #4]	; (b9f4 <ipm_callback_process+0x8>)
    b9ee:	6818      	ldr	r0, [r3, #0]
    b9f0:	f012 b941 	b.w	1dc76 <virtqueue_notification>
    b9f4:	20009a38 	.word	0x20009a38

0000b9f8 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b9f8:	4b0a      	ldr	r3, [pc, #40]	; (ba24 <virtio_notify+0x2c>)
{
    b9fa:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b9fc:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b9fe:	2300      	movs	r3, #0
    ba00:	6882      	ldr	r2, [r0, #8]
    ba02:	9300      	str	r3, [sp, #0]
    ba04:	6814      	ldr	r4, [r2, #0]
    ba06:	4619      	mov	r1, r3
    ba08:	461a      	mov	r2, r3
    ba0a:	47a0      	blx	r4
	if (status != 0) {
    ba0c:	4602      	mov	r2, r0
    ba0e:	b130      	cbz	r0, ba1e <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    ba10:	2145      	movs	r1, #69	; 0x45
    ba12:	4805      	ldr	r0, [pc, #20]	; (ba28 <virtio_notify+0x30>)
}
    ba14:	b002      	add	sp, #8
    ba16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    ba1a:	f00f b837 	b.w	1aa8c <printk>
}
    ba1e:	b002      	add	sp, #8
    ba20:	bd10      	pop	{r4, pc}
    ba22:	bf00      	nop
    ba24:	20009a28 	.word	0x20009a28
    ba28:	0001fbf7 	.word	0x0001fbf7

0000ba2c <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba2c:	4907      	ldr	r1, [pc, #28]	; (ba4c <ipm_callback+0x20>)
    ba2e:	e8d1 3fef 	ldaex	r3, [r1]
    ba32:	f043 0201 	orr.w	r2, r3, #1
    ba36:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ba3a:	2800      	cmp	r0, #0
    ba3c:	d1f7      	bne.n	ba2e <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ba3e:	07db      	lsls	r3, r3, #31
    ba40:	d403      	bmi.n	ba4a <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    ba42:	4803      	ldr	r0, [pc, #12]	; (ba50 <ipm_callback+0x24>)
    ba44:	3908      	subs	r1, #8
    ba46:	f012 bad7 	b.w	1dff8 <k_queue_append>
}
    ba4a:	4770      	bx	lr
    ba4c:	20009a34 	.word	0x20009a34
    ba50:	20008890 	.word	0x20008890

0000ba54 <rpmsg_backend_init>:
{
    ba54:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ba56:	4b47      	ldr	r3, [pc, #284]	; (bb74 <rpmsg_backend_init+0x120>)
{
    ba58:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ba5a:	ac02      	add	r4, sp, #8
{
    ba5c:	4606      	mov	r6, r0
    ba5e:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ba60:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    ba64:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ba68:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    ba6c:	f04f 33ff 	mov.w	r3, #4294967295
    ba70:	4941      	ldr	r1, [pc, #260]	; (bb78 <rpmsg_backend_init+0x124>)
    ba72:	4842      	ldr	r0, [pc, #264]	; (bb7c <rpmsg_backend_init+0x128>)
    ba74:	f00e f86e 	bl	19b54 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    ba78:	4941      	ldr	r1, [pc, #260]	; (bb80 <rpmsg_backend_init+0x12c>)
    ba7a:	4842      	ldr	r0, [pc, #264]	; (bb84 <rpmsg_backend_init+0x130>)
    ba7c:	f012 fb2e 	bl	1e0dc <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ba80:	2200      	movs	r2, #0
    ba82:	4b41      	ldr	r3, [pc, #260]	; (bb88 <rpmsg_backend_init+0x134>)
    ba84:	4941      	ldr	r1, [pc, #260]	; (bb8c <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    ba86:	4620      	mov	r0, r4
    ba88:	e9c3 1201 	strd	r1, r2, [r3, #4]
    ba8c:	601a      	str	r2, [r3, #0]
    ba8e:	f00b fd37 	bl	17500 <metal_init>
	if (err) {
    ba92:	4604      	mov	r4, r0
    ba94:	b138      	cbz	r0, baa6 <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    ba96:	2145      	movs	r1, #69	; 0x45
    ba98:	4602      	mov	r2, r0
    ba9a:	483d      	ldr	r0, [pc, #244]	; (bb90 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    ba9c:	f00e fff6 	bl	1aa8c <printk>
}
    baa0:	4620      	mov	r0, r4
    baa2:	b005      	add	sp, #20
    baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    baa6:	483b      	ldr	r0, [pc, #236]	; (bb94 <rpmsg_backend_init+0x140>)
    baa8:	f00b fd0a 	bl	174c0 <metal_register_generic_device>
	if (err) {
    baac:	4604      	mov	r4, r0
    baae:	b118      	cbz	r0, bab8 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    bab0:	4602      	mov	r2, r0
    bab2:	2145      	movs	r1, #69	; 0x45
    bab4:	4838      	ldr	r0, [pc, #224]	; (bb98 <rpmsg_backend_init+0x144>)
    bab6:	e7f1      	b.n	ba9c <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    bab8:	4938      	ldr	r1, [pc, #224]	; (bb9c <rpmsg_backend_init+0x148>)
    baba:	4839      	ldr	r0, [pc, #228]	; (bba0 <rpmsg_backend_init+0x14c>)
    babc:	aa01      	add	r2, sp, #4
    babe:	f011 fe5a 	bl	1d776 <metal_device_open>
	if (err) {
    bac2:	4604      	mov	r4, r0
    bac4:	b118      	cbz	r0, bace <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    bac6:	4602      	mov	r2, r0
    bac8:	2145      	movs	r1, #69	; 0x45
    baca:	4836      	ldr	r0, [pc, #216]	; (bba4 <rpmsg_backend_init+0x150>)
    bacc:	e7e6      	b.n	ba9c <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    bace:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    bad0:	689a      	ldr	r2, [r3, #8]
    bad2:	b92a      	cbnz	r2, bae0 <rpmsg_backend_init+0x8c>
    bad4:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    bad6:	2145      	movs	r1, #69	; 0x45
    bad8:	4833      	ldr	r0, [pc, #204]	; (bba8 <rpmsg_backend_init+0x154>)
    bada:	f00e ffd7 	bl	1aa8c <printk>
		return err;
    bade:	e7df      	b.n	baa0 <rpmsg_backend_init+0x4c>
    bae0:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    bae2:	6033      	str	r3, [r6, #0]
	if (!*io) {
    bae4:	2b00      	cmp	r3, #0
    bae6:	d0f6      	beq.n	bad6 <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    bae8:	4830      	ldr	r0, [pc, #192]	; (bbac <rpmsg_backend_init+0x158>)
    baea:	f00c f821 	bl	17b30 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    baee:	4f30      	ldr	r7, [pc, #192]	; (bbb0 <rpmsg_backend_init+0x15c>)
    baf0:	6038      	str	r0, [r7, #0]
    baf2:	4830      	ldr	r0, [pc, #192]	; (bbb4 <rpmsg_backend_init+0x160>)
    baf4:	f00c f81c 	bl	17b30 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    baf8:	683a      	ldr	r2, [r7, #0]
    bafa:	b932      	cbnz	r2, bb0a <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    bafc:	2145      	movs	r1, #69	; 0x45
    bafe:	482e      	ldr	r0, [pc, #184]	; (bbb8 <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    bb00:	f00e ffc4 	bl	1aa8c <printk>
		return -ENODEV;
    bb04:	f06f 0412 	mvn.w	r4, #18
    bb08:	e7ca      	b.n	baa0 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    bb0a:	b910      	cbnz	r0, bb12 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    bb0c:	2145      	movs	r1, #69	; 0x45
    bb0e:	482b      	ldr	r0, [pc, #172]	; (bbbc <rpmsg_backend_init+0x168>)
    bb10:	e7f6      	b.n	bb00 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    bb12:	6883      	ldr	r3, [r0, #8]
    bb14:	4622      	mov	r2, r4
    bb16:	685b      	ldr	r3, [r3, #4]
    bb18:	4929      	ldr	r1, [pc, #164]	; (bbc0 <rpmsg_backend_init+0x16c>)
    bb1a:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    bb1c:	f00f fa82 	bl	1b024 <virtqueue_allocate.constprop.0>
    bb20:	4f28      	ldr	r7, [pc, #160]	; (bbc4 <rpmsg_backend_init+0x170>)
    bb22:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    bb24:	b930      	cbnz	r0, bb34 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    bb26:	2145      	movs	r1, #69	; 0x45
    bb28:	4827      	ldr	r0, [pc, #156]	; (bbc8 <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    bb2a:	f00e ffaf 	bl	1aa8c <printk>
		return -ENOMEM;
    bb2e:	f06f 040b 	mvn.w	r4, #11
    bb32:	e7b5      	b.n	baa0 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    bb34:	f00f fa76 	bl	1b024 <virtqueue_allocate.constprop.0>
    bb38:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    bb3a:	b910      	cbnz	r0, bb42 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    bb3c:	2145      	movs	r1, #69	; 0x45
    bb3e:	4823      	ldr	r0, [pc, #140]	; (bbcc <rpmsg_backend_init+0x178>)
    bb40:	e7f3      	b.n	bb2a <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    bb42:	6832      	ldr	r2, [r6, #0]
    bb44:	4b22      	ldr	r3, [pc, #136]	; (bbd0 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    bb46:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    bb48:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    bb4a:	4a22      	ldr	r2, [pc, #136]	; (bbd4 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    bb4c:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    bb4e:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    bb50:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    bb52:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    bb54:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    bb56:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    bb58:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    bb5a:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    bb5c:	4e1e      	ldr	r6, [pc, #120]	; (bbd8 <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    bb5e:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    bb60:	4a1e      	ldr	r2, [pc, #120]	; (bbdc <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    bb62:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    bb64:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    bb66:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    bb68:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    bb6a:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    bb6c:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    bb6e:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    bb70:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    bb72:	e795      	b.n	baa0 <rpmsg_backend_init+0x4c>
    bb74:	0001e768 	.word	0x0001e768
    bb78:	2000ea60 	.word	0x2000ea60
    bb7c:	20008890 	.word	0x20008890
    bb80:	0001fc1a 	.word	0x0001fc1a
    bb84:	200088b0 	.word	0x200088b0
    bb88:	20009a2c 	.word	0x20009a2c
    bb8c:	0000b9ed 	.word	0x0000b9ed
    bb90:	0001fc25 	.word	0x0001fc25
    bb94:	200081f0 	.word	0x200081f0
    bb98:	0001fc4d 	.word	0x0001fc4d
    bb9c:	0001fc7d 	.word	0x0001fc7d
    bba0:	0001fc87 	.word	0x0001fc87
    bba4:	0001fc8f 	.word	0x0001fc8f
    bba8:	0001fcb1 	.word	0x0001fcb1
    bbac:	0001fce2 	.word	0x0001fce2
    bbb0:	20009a28 	.word	0x20009a28
    bbb4:	0001fce8 	.word	0x0001fce8
    bbb8:	0001fcee 	.word	0x0001fcee
    bbbc:	0001fd16 	.word	0x0001fd16
    bbc0:	0000ba2d 	.word	0x0000ba2d
    bbc4:	20009a38 	.word	0x20009a38
    bbc8:	0001fd3e 	.word	0x0001fd3e
    bbcc:	0001fd6c 	.word	0x0001fd6c
    bbd0:	200081c0 	.word	0x200081c0
    bbd4:	2007fc00 	.word	0x2007fc00
    bbd8:	2007f800 	.word	0x2007f800
    bbdc:	0001e918 	.word	0x0001e918

0000bbe0 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    bbe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bbe4:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    bbe6:	4e1b      	ldr	r6, [pc, #108]	; (bc54 <ns_bind_cb+0x74>)
{
    bbe8:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    bbea:	6831      	ldr	r1, [r6, #0]
    bbec:	4628      	mov	r0, r5
{
    bbee:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    bbf0:	f010 f948 	bl	1be84 <strcmp>
    bbf4:	b168      	cbz	r0, bc12 <ns_bind_cb+0x32>
    bbf6:	4628      	mov	r0, r5
    bbf8:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    bbfa:	f010 f943 	bl	1be84 <strcmp>
    bbfe:	b138      	cbz	r0, bc10 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    bc00:	462a      	mov	r2, r5
    bc02:	2145      	movs	r1, #69	; 0x45
    bc04:	4814      	ldr	r0, [pc, #80]	; (bc58 <ns_bind_cb+0x78>)
}
    bc06:	b004      	add	sp, #16
    bc08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    bc0c:	f00e bf3e 	b.w	1aa8c <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    bc10:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    bc12:	244c      	movs	r4, #76	; 0x4c
    bc14:	4344      	muls	r4, r0
    bc16:	4b11      	ldr	r3, [pc, #68]	; (bc5c <ns_bind_cb+0x7c>)
    bc18:	f104 0008 	add.w	r0, r4, #8
    bc1c:	9302      	str	r3, [sp, #8]
    bc1e:	4434      	add	r4, r6
    bc20:	6863      	ldr	r3, [r4, #4]
    bc22:	462a      	mov	r2, r5
    bc24:	e9cd 8300 	strd	r8, r3, [sp]
    bc28:	4639      	mov	r1, r7
    bc2a:	f04f 33ff 	mov.w	r3, #4294967295
    bc2e:	4430      	add	r0, r6
    bc30:	f00b fd32 	bl	17698 <rpmsg_create_ept>
			if (err != 0) {
    bc34:	4603      	mov	r3, r0
    bc36:	b138      	cbz	r0, bc48 <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    bc38:	462a      	mov	r2, r5
    bc3a:	2145      	movs	r1, #69	; 0x45
    bc3c:	4808      	ldr	r0, [pc, #32]	; (bc60 <ns_bind_cb+0x80>)
}
    bc3e:	b004      	add	sp, #16
    bc40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    bc44:	f00e bf22 	b.w	1aa8c <printk>
				endpoints[i].bound = true;
    bc48:	2301      	movs	r3, #1
    bc4a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    bc4e:	b004      	add	sp, #16
    bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc54:	20009a40 	.word	0x20009a40
    bc58:	0001fda8 	.word	0x0001fda8
    bc5c:	0001b03f 	.word	0x0001b03f
    bc60:	0001fdd7 	.word	0x0001fdd7

0000bc64 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    bc64:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    bc66:	4d13      	ldr	r5, [pc, #76]	; (bcb4 <rpmsg_service_init+0x50>)
    bc68:	4913      	ldr	r1, [pc, #76]	; (bcb8 <rpmsg_service_init+0x54>)
    bc6a:	4628      	mov	r0, r5
    bc6c:	f7ff fef2 	bl	ba54 <rpmsg_backend_init>
	if (err) {
    bc70:	4604      	mov	r4, r0
    bc72:	b138      	cbz	r0, bc84 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    bc74:	2145      	movs	r1, #69	; 0x45
    bc76:	4602      	mov	r2, r0
    bc78:	4810      	ldr	r0, [pc, #64]	; (bcbc <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    bc7a:	f00e ff07 	bl	1aa8c <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    bc7e:	4620      	mov	r0, r4
    bc80:	b003      	add	sp, #12
    bc82:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    bc84:	4c0e      	ldr	r4, [pc, #56]	; (bcc0 <rpmsg_service_init+0x5c>)
    bc86:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    bc8a:	4620      	mov	r0, r4
    bc8c:	490d      	ldr	r1, [pc, #52]	; (bcc4 <rpmsg_service_init+0x60>)
    bc8e:	f012 f97c 	bl	1df8a <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    bc92:	9400      	str	r4, [sp, #0]
    bc94:	682b      	ldr	r3, [r5, #0]
    bc96:	4a0c      	ldr	r2, [pc, #48]	; (bcc8 <rpmsg_service_init+0x64>)
    bc98:	4907      	ldr	r1, [pc, #28]	; (bcb8 <rpmsg_service_init+0x54>)
    bc9a:	480c      	ldr	r0, [pc, #48]	; (bccc <rpmsg_service_init+0x68>)
    bc9c:	f00b fe28 	bl	178f0 <rpmsg_init_vdev>
	if (err) {
    bca0:	4604      	mov	r4, r0
    bca2:	b118      	cbz	r0, bcac <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    bca4:	4602      	mov	r2, r0
    bca6:	2145      	movs	r1, #69	; 0x45
    bca8:	4809      	ldr	r0, [pc, #36]	; (bcd0 <rpmsg_service_init+0x6c>)
    bcaa:	e7e6      	b.n	bc7a <rpmsg_service_init+0x16>
	ep_crt_started = true;
    bcac:	2201      	movs	r2, #1
    bcae:	4b09      	ldr	r3, [pc, #36]	; (bcd4 <rpmsg_service_init+0x70>)
    bcb0:	701a      	strb	r2, [r3, #0]
	return 0;
    bcb2:	e7e4      	b.n	bc7e <rpmsg_service_init+0x1a>
    bcb4:	20009ad8 	.word	0x20009ad8
    bcb8:	20008940 	.word	0x20008940
    bcbc:	0001fe0d 	.word	0x0001fe0d
    bcc0:	20009b6c 	.word	0x20009b6c
    bcc4:	20070400 	.word	0x20070400
    bcc8:	0000bbe1 	.word	0x0000bbe1
    bccc:	20009adc 	.word	0x20009adc
    bcd0:	0001fe3a 	.word	0x0001fe3a
    bcd4:	2000e586 	.word	0x2000e586

0000bcd8 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    bcd8:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    bcda:	4b0d      	ldr	r3, [pc, #52]	; (bd10 <rpmsg_service_register_endpoint+0x38>)
{
    bcdc:	4602      	mov	r2, r0
	if (ep_crt_started) {
    bcde:	781b      	ldrb	r3, [r3, #0]
    bce0:	b993      	cbnz	r3, bd08 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    bce2:	4c0c      	ldr	r4, [pc, #48]	; (bd14 <rpmsg_service_register_endpoint+0x3c>)
    bce4:	6820      	ldr	r0, [r4, #0]
    bce6:	b148      	cbz	r0, bcfc <rpmsg_service_register_endpoint+0x24>
    bce8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    bcea:	b133      	cbz	r3, bcfa <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    bcec:	480a      	ldr	r0, [pc, #40]	; (bd18 <rpmsg_service_register_endpoint+0x40>)
    bcee:	2145      	movs	r1, #69	; 0x45
    bcf0:	f00e fecc 	bl	1aa8c <printk>

	return -ENOMEM;
    bcf4:	f06f 000b 	mvn.w	r0, #11
}
    bcf8:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    bcfa:	2001      	movs	r0, #1
			endpoints[i].name = name;
    bcfc:	234c      	movs	r3, #76	; 0x4c
    bcfe:	4343      	muls	r3, r0
    bd00:	18e5      	adds	r5, r4, r3
    bd02:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    bd04:	6069      	str	r1, [r5, #4]
			return i;
    bd06:	e7f7      	b.n	bcf8 <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    bd08:	f06f 0043 	mvn.w	r0, #67	; 0x43
    bd0c:	e7f4      	b.n	bcf8 <rpmsg_service_register_endpoint+0x20>
    bd0e:	bf00      	nop
    bd10:	2000e586 	.word	0x2000e586
    bd14:	20009a40 	.word	0x20009a40
    bd18:	0001fe59 	.word	0x0001fe59

0000bd1c <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    bd1c:	224c      	movs	r2, #76	; 0x4c
    bd1e:	4b03      	ldr	r3, [pc, #12]	; (bd2c <rpmsg_service_endpoint_is_bound+0x10>)
    bd20:	fb02 3300 	mla	r3, r2, r0, r3
    bd24:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    bd28:	4770      	bx	lr
    bd2a:	bf00      	nop
    bd2c:	20009a40 	.word	0x20009a40

0000bd30 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    bd30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    bd32:	244c      	movs	r4, #76	; 0x4c
    bd34:	460b      	mov	r3, r1
    bd36:	2101      	movs	r1, #1
    bd38:	4344      	muls	r4, r0
    bd3a:	e9cd 2100 	strd	r2, r1, [sp]
    bd3e:	4d05      	ldr	r5, [pc, #20]	; (bd54 <rpmsg_service_send+0x24>)
    bd40:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    bd42:	3408      	adds	r4, #8
    bd44:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    bd48:	1928      	adds	r0, r5, r4
    bd4a:	f00b fc93 	bl	17674 <rpmsg_send_offchannel_raw>
}
    bd4e:	b003      	add	sp, #12
    bd50:	bd30      	pop	{r4, r5, pc}
    bd52:	bf00      	nop
    bd54:	20009a40 	.word	0x20009a40

0000bd58 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    bd58:	4b10      	ldr	r3, [pc, #64]	; (bd9c <settings_save_one+0x44>)
{
    bd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    bd5e:	681c      	ldr	r4, [r3, #0]
{
    bd60:	4605      	mov	r5, r0
    bd62:	460e      	mov	r6, r1
    bd64:	4617      	mov	r7, r2
	if (!cs) {
    bd66:	b1ac      	cbz	r4, bd94 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    bd68:	f04f 32ff 	mov.w	r2, #4294967295
    bd6c:	f04f 33ff 	mov.w	r3, #4294967295
    bd70:	480b      	ldr	r0, [pc, #44]	; (bda0 <settings_save_one+0x48>)
    bd72:	f00c f9ff 	bl	18174 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    bd76:	6863      	ldr	r3, [r4, #4]
    bd78:	4632      	mov	r2, r6
    bd7a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    bd7e:	4629      	mov	r1, r5
    bd80:	463b      	mov	r3, r7
    bd82:	4620      	mov	r0, r4
    bd84:	47c0      	blx	r8
    bd86:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bd88:	4805      	ldr	r0, [pc, #20]	; (bda0 <settings_save_one+0x48>)
    bd8a:	f00c fabf 	bl	1830c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    bd8e:	4620      	mov	r0, r4
    bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    bd94:	f06f 0401 	mvn.w	r4, #1
    bd98:	e7f9      	b.n	bd8e <settings_save_one+0x36>
    bd9a:	bf00      	nop
    bd9c:	20009b80 	.word	0x20009b80
    bda0:	20008550 	.word	0x20008550

0000bda4 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    bda4:	2300      	movs	r3, #0
{
    bda6:	b530      	push	{r4, r5, lr}
    bda8:	b085      	sub	sp, #20
    bdaa:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    bdac:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bdb0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    bdb2:	f04f 33ff 	mov.w	r3, #4294967295
    bdb6:	f04f 32ff 	mov.w	r2, #4294967295
    bdba:	480b      	ldr	r0, [pc, #44]	; (bde8 <settings_load_subtree+0x44>)
    bdbc:	f00c f9da 	bl	18174 <z_impl_k_mutex_lock>
	return list->head;
    bdc0:	4b0a      	ldr	r3, [pc, #40]	; (bdec <settings_load_subtree+0x48>)
    bdc2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bdc4:	b134      	cbz	r4, bdd4 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    bdc6:	6863      	ldr	r3, [r4, #4]
    bdc8:	4620      	mov	r0, r4
    bdca:	681b      	ldr	r3, [r3, #0]
    bdcc:	a901      	add	r1, sp, #4
    bdce:	4798      	blx	r3
	return node->next;
    bdd0:	6824      	ldr	r4, [r4, #0]
    bdd2:	e7f7      	b.n	bdc4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    bdd4:	4628      	mov	r0, r5
    bdd6:	f000 f83b 	bl	be50 <settings_commit_subtree>
    bdda:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bddc:	4802      	ldr	r0, [pc, #8]	; (bde8 <settings_load_subtree+0x44>)
    bdde:	f00c fa95 	bl	1830c <z_impl_k_mutex_unlock>
}
    bde2:	4620      	mov	r0, r4
    bde4:	b005      	add	sp, #20
    bde6:	bd30      	pop	{r4, r5, pc}
    bde8:	20008550 	.word	0x20008550
    bdec:	20009b78 	.word	0x20009b78

0000bdf0 <settings_load_subtree_direct>:
{
    bdf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    bdf2:	e9cd 0101 	strd	r0, r1, [sp, #4]
    bdf6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    bdf8:	f04f 33ff 	mov.w	r3, #4294967295
    bdfc:	f04f 32ff 	mov.w	r2, #4294967295
    be00:	4809      	ldr	r0, [pc, #36]	; (be28 <settings_load_subtree_direct+0x38>)
    be02:	f00c f9b7 	bl	18174 <z_impl_k_mutex_lock>
	return list->head;
    be06:	4b09      	ldr	r3, [pc, #36]	; (be2c <settings_load_subtree_direct+0x3c>)
    be08:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    be0a:	b134      	cbz	r4, be1a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    be0c:	6863      	ldr	r3, [r4, #4]
    be0e:	4620      	mov	r0, r4
    be10:	681b      	ldr	r3, [r3, #0]
    be12:	a901      	add	r1, sp, #4
    be14:	4798      	blx	r3
	return node->next;
    be16:	6824      	ldr	r4, [r4, #0]
    be18:	e7f7      	b.n	be0a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    be1a:	4803      	ldr	r0, [pc, #12]	; (be28 <settings_load_subtree_direct+0x38>)
    be1c:	f00c fa76 	bl	1830c <z_impl_k_mutex_unlock>
}
    be20:	2000      	movs	r0, #0
    be22:	b004      	add	sp, #16
    be24:	bd10      	pop	{r4, pc}
    be26:	bf00      	nop
    be28:	20008550 	.word	0x20008550
    be2c:	20009b78 	.word	0x20009b78

0000be30 <settings_store_init>:
	list->head = NULL;
    be30:	2200      	movs	r2, #0
    be32:	4b02      	ldr	r3, [pc, #8]	; (be3c <settings_store_init+0xc>)
	list->tail = NULL;
    be34:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    be38:	4770      	bx	lr
    be3a:	bf00      	nop
    be3c:	20009b78 	.word	0x20009b78

0000be40 <settings_init>:
	list->head = NULL;
    be40:	2200      	movs	r2, #0
    be42:	4b02      	ldr	r3, [pc, #8]	; (be4c <settings_init+0xc>)
	list->tail = NULL;
    be44:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    be48:	f7ff bff2 	b.w	be30 <settings_store_init>
    be4c:	20009b84 	.word	0x20009b84

0000be50 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be54:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    be56:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    be58:	4c1f      	ldr	r4, [pc, #124]	; (bed8 <settings_commit_subtree+0x88>)
    be5a:	4f20      	ldr	r7, [pc, #128]	; (bedc <settings_commit_subtree+0x8c>)
    be5c:	f8df 8080 	ldr.w	r8, [pc, #128]	; bee0 <settings_commit_subtree+0x90>
    be60:	42bc      	cmp	r4, r7
    be62:	d908      	bls.n	be76 <settings_commit_subtree+0x26>
    be64:	4641      	mov	r1, r8
    be66:	481f      	ldr	r0, [pc, #124]	; (bee4 <settings_commit_subtree+0x94>)
    be68:	22f4      	movs	r2, #244	; 0xf4
    be6a:	f00e fe0f 	bl	1aa8c <printk>
    be6e:	21f4      	movs	r1, #244	; 0xf4
    be70:	4640      	mov	r0, r8
    be72:	f00f f8b1 	bl	1afd8 <assert_post_action>
    be76:	42bc      	cmp	r4, r7
    be78:	d307      	bcc.n	be8a <settings_commit_subtree+0x3a>
	return list->head;
    be7a:	4b1b      	ldr	r3, [pc, #108]	; (bee8 <settings_commit_subtree+0x98>)
    be7c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    be7e:	b10c      	cbz	r4, be84 <settings_commit_subtree+0x34>
    be80:	3c14      	subs	r4, #20
    be82:	b9a4      	cbnz	r4, beae <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    be84:	4628      	mov	r0, r5
    be86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be8a:	b91e      	cbnz	r6, be94 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    be8c:	68e3      	ldr	r3, [r4, #12]
    be8e:	b94b      	cbnz	r3, bea4 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    be90:	3414      	adds	r4, #20
    be92:	e7e5      	b.n	be60 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be94:	2200      	movs	r2, #0
    be96:	4631      	mov	r1, r6
    be98:	6820      	ldr	r0, [r4, #0]
    be9a:	f00f f8d9 	bl	1b050 <settings_name_steq>
    be9e:	2800      	cmp	r0, #0
    bea0:	d1f4      	bne.n	be8c <settings_commit_subtree+0x3c>
    bea2:	e7f5      	b.n	be90 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    bea4:	4798      	blx	r3
				rc = rc2;
    bea6:	2d00      	cmp	r5, #0
    bea8:	bf08      	it	eq
    beaa:	4605      	moveq	r5, r0
    beac:	e7f0      	b.n	be90 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    beae:	b936      	cbnz	r6, bebe <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    beb0:	68e3      	ldr	r3, [r4, #12]
    beb2:	b963      	cbnz	r3, bece <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    beb4:	f114 0f14 	cmn.w	r4, #20
    beb8:	d0e4      	beq.n	be84 <settings_commit_subtree+0x34>
	return node->next;
    beba:	6964      	ldr	r4, [r4, #20]
    bebc:	e7df      	b.n	be7e <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bebe:	2200      	movs	r2, #0
    bec0:	4631      	mov	r1, r6
    bec2:	6820      	ldr	r0, [r4, #0]
    bec4:	f00f f8c4 	bl	1b050 <settings_name_steq>
    bec8:	2800      	cmp	r0, #0
    beca:	d1f1      	bne.n	beb0 <settings_commit_subtree+0x60>
    becc:	e7f2      	b.n	beb4 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    bece:	4798      	blx	r3
				rc = rc2;
    bed0:	2d00      	cmp	r5, #0
    bed2:	bf08      	it	eq
    bed4:	4605      	moveq	r5, r0
    bed6:	e7ed      	b.n	beb4 <settings_commit_subtree+0x64>
    bed8:	0001e608 	.word	0x0001e608
    bedc:	0001e66c 	.word	0x0001e66c
    bee0:	0001fe92 	.word	0x0001fe92
    bee4:	0001fb49 	.word	0x0001fb49
    bee8:	20009b84 	.word	0x20009b84

0000beec <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    beec:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    beee:	4c06      	ldr	r4, [pc, #24]	; (bf08 <settings_subsys_init+0x1c>)
    bef0:	7823      	ldrb	r3, [r4, #0]
    bef2:	b93b      	cbnz	r3, bf04 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    bef4:	f7ff ffa4 	bl	be40 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    bef8:	f00f f8e3 	bl	1b0c2 <settings_backend_init>

	if (!err) {
    befc:	b908      	cbnz	r0, bf02 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    befe:	2301      	movs	r3, #1
    bf00:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    bf02:	bd10      	pop	{r4, pc}
		return 0;
    bf04:	2000      	movs	r0, #0
    bf06:	e7fc      	b.n	bf02 <settings_subsys_init+0x16>
    bf08:	2000e587 	.word	0x2000e587

0000bf0c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    bf0c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    bf0e:	4c04      	ldr	r4, [pc, #16]	; (bf20 <rtt_console_init+0x14>)
    bf10:	4620      	mov	r0, r4
    bf12:	f7fe fd93 	bl	aa3c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    bf16:	4620      	mov	r0, r4
    bf18:	f002 fbd2 	bl	e6c0 <__stdout_hook_install>

	return 0;
}
    bf1c:	2000      	movs	r0, #0
    bf1e:	bd10      	pop	{r4, pc}
    bf20:	0000bf25 	.word	0x0000bf25

0000bf24 <rtt_console_out>:
{
    bf24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bf28:	4604      	mov	r4, r0
	char c = (char)character;
    bf2a:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    bf2c:	f8df 8058 	ldr.w	r8, [pc, #88]	; bf88 <rtt_console_out+0x64>
    bf30:	4e16      	ldr	r6, [pc, #88]	; (bf8c <rtt_console_out+0x68>)
    bf32:	f88d 0007 	strb.w	r0, [sp, #7]
    bf36:	f04f 33ff 	mov.w	r3, #4294967295
    bf3a:	f04f 32ff 	mov.w	r2, #4294967295
    bf3e:	4640      	mov	r0, r8
    bf40:	f00c f918 	bl	18174 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    bf44:	2201      	movs	r2, #1
    bf46:	f10d 0107 	add.w	r1, sp, #7
    bf4a:	2000      	movs	r0, #0
    bf4c:	f001 fc56 	bl	d7fc <SEGGER_RTT_WriteNoLock>
    bf50:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    bf52:	4640      	mov	r0, r8
    bf54:	f00c f9da 	bl	1830c <z_impl_k_mutex_unlock>
		if (cnt) {
    bf58:	b12f      	cbz	r7, bf66 <rtt_console_out+0x42>
			host_present = true;
    bf5a:	2301      	movs	r3, #1
    bf5c:	7033      	strb	r3, [r6, #0]
}
    bf5e:	4620      	mov	r0, r4
    bf60:	b002      	add	sp, #8
    bf62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    bf66:	7833      	ldrb	r3, [r6, #0]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d0f8      	beq.n	bf5e <rtt_console_out+0x3a>
			if (max_cnt) {
    bf6c:	3d01      	subs	r5, #1
    bf6e:	d008      	beq.n	bf82 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    bf70:	f012 f8aa 	bl	1e0c8 <k_is_in_isr>
    bf74:	2800      	cmp	r0, #0
    bf76:	d1de      	bne.n	bf36 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    bf78:	2100      	movs	r1, #0
    bf7a:	2042      	movs	r0, #66	; 0x42
    bf7c:	f00d fb78 	bl	19670 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bf80:	e7d9      	b.n	bf36 <rtt_console_out+0x12>
				host_present = false;
    bf82:	7035      	strb	r5, [r6, #0]
    bf84:	e7eb      	b.n	bf5e <rtt_console_out+0x3a>
    bf86:	bf00      	nop
    bf88:	20008528 	.word	0x20008528
    bf8c:	2000e588 	.word	0x2000e588

0000bf90 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    bf90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf92:	2340      	movs	r3, #64	; 0x40
{
    bf94:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bf96:	490a      	ldr	r1, [pc, #40]	; (bfc0 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf98:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    bf9a:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bf9c:	1149      	asrs	r1, r1, #5
{
    bf9e:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bfa0:	4623      	mov	r3, r4
    bfa2:	4a08      	ldr	r2, [pc, #32]	; (bfc4 <onoff_start+0x34>)
    bfa4:	4808      	ldr	r0, [pc, #32]	; (bfc8 <onoff_start+0x38>)
    bfa6:	f00f f8a1 	bl	1b0ec <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    bfaa:	1e01      	subs	r1, r0, #0
    bfac:	da05      	bge.n	bfba <onoff_start+0x2a>
		notify(mgr, err);
    bfae:	4628      	mov	r0, r5
    bfb0:	4623      	mov	r3, r4
	}
}
    bfb2:	b003      	add	sp, #12
    bfb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    bfb8:	4718      	bx	r3
}
    bfba:	b003      	add	sp, #12
    bfbc:	bd30      	pop	{r4, r5, pc}
    bfbe:	bf00      	nop
    bfc0:	20009b9c 	.word	0x20009b9c
    bfc4:	0001b15f 	.word	0x0001b15f
    bfc8:	20008448 	.word	0x20008448

0000bfcc <get_status>:
{
    bfcc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bfce:	b2cc      	uxtb	r4, r1
    bfd0:	2c03      	cmp	r4, #3
{
    bfd2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bfd4:	d908      	bls.n	bfe8 <get_status+0x1c>
    bfd6:	4909      	ldr	r1, [pc, #36]	; (bffc <get_status+0x30>)
    bfd8:	4809      	ldr	r0, [pc, #36]	; (c000 <get_status+0x34>)
    bfda:	227e      	movs	r2, #126	; 0x7e
    bfdc:	f00e fd56 	bl	1aa8c <printk>
    bfe0:	217e      	movs	r1, #126	; 0x7e
    bfe2:	4806      	ldr	r0, [pc, #24]	; (bffc <get_status+0x30>)
    bfe4:	f00e fff8 	bl	1afd8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bfe8:	230c      	movs	r3, #12
    bfea:	68e9      	ldr	r1, [r5, #12]
    bfec:	fb04 1403 	mla	r4, r4, r3, r1
    bff0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    bff4:	f000 0007 	and.w	r0, r0, #7
    bff8:	bd38      	pop	{r3, r4, r5, pc}
    bffa:	bf00      	nop
    bffc:	0001feca 	.word	0x0001feca
    c000:	0001fb49 	.word	0x0001fb49

0000c004 <stop>:
{
    c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c006:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c008:	2c03      	cmp	r4, #3
{
    c00a:	4605      	mov	r5, r0
    c00c:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    c00e:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c010:	d90a      	bls.n	c028 <stop+0x24>
    c012:	4919      	ldr	r1, [pc, #100]	; (c078 <stop+0x74>)
    c014:	4819      	ldr	r0, [pc, #100]	; (c07c <stop+0x78>)
    c016:	f240 1253 	movw	r2, #339	; 0x153
    c01a:	f00e fd37 	bl	1aa8c <printk>
    c01e:	f240 1153 	movw	r1, #339	; 0x153
    c022:	4815      	ldr	r0, [pc, #84]	; (c078 <stop+0x74>)
    c024:	f00e ffd8 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
    c028:	f04f 0320 	mov.w	r3, #32
    c02c:	f3ef 8111 	mrs	r1, BASEPRI
    c030:	f383 8811 	msr	BASEPRI, r3
    c034:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c038:	220c      	movs	r2, #12
    c03a:	fb02 6304 	mla	r3, r2, r4, r6
    c03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c042:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c046:	d001      	beq.n	c04c <stop+0x48>
    c048:	429f      	cmp	r7, r3
    c04a:	d112      	bne.n	c072 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c04c:	2301      	movs	r3, #1
	int err = 0;
    c04e:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c050:	fb02 6604 	mla	r6, r2, r4, r6
    c054:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    c058:	f381 8811 	msr	BASEPRI, r1
    c05c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    c060:	b930      	cbnz	r0, c070 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    c062:	230c      	movs	r3, #12
    c064:	6869      	ldr	r1, [r5, #4]
    c066:	fb03 1404 	mla	r4, r3, r4, r1
    c06a:	6863      	ldr	r3, [r4, #4]
    c06c:	4798      	blx	r3
	return 0;
    c06e:	2000      	movs	r0, #0
}
    c070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    c072:	f04f 30ff 	mov.w	r0, #4294967295
    c076:	e7ef      	b.n	c058 <stop+0x54>
    c078:	0001feca 	.word	0x0001feca
    c07c:	0001fb49 	.word	0x0001fb49

0000c080 <onoff_stop>:
{
    c080:	b570      	push	{r4, r5, r6, lr}
    c082:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c084:	4906      	ldr	r1, [pc, #24]	; (c0a0 <onoff_stop+0x20>)
{
    c086:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    c088:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c08a:	1149      	asrs	r1, r1, #5
    c08c:	2240      	movs	r2, #64	; 0x40
    c08e:	4805      	ldr	r0, [pc, #20]	; (c0a4 <onoff_stop+0x24>)
    c090:	f7ff ffb8 	bl	c004 <stop>
	notify(mgr, res);
    c094:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c096:	4601      	mov	r1, r0
	notify(mgr, res);
    c098:	4620      	mov	r0, r4
}
    c09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    c09e:	4718      	bx	r3
    c0a0:	20009b9c 	.word	0x20009b9c
    c0a4:	20008448 	.word	0x20008448

0000c0a8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    c0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c0ac:	2200      	movs	r2, #0
    c0ae:	2101      	movs	r1, #1
{
    c0b0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c0b2:	2005      	movs	r0, #5
    c0b4:	f001 fdbe 	bl	dc34 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    c0b8:	2005      	movs	r0, #5
    c0ba:	f001 fd9d 	bl	dbf8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    c0be:	4811      	ldr	r0, [pc, #68]	; (c104 <clk_init+0x5c>)
    c0c0:	f00a feae 	bl	16e20 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    c0c4:	4b10      	ldr	r3, [pc, #64]	; (c108 <clk_init+0x60>)
    c0c6:	4298      	cmp	r0, r3
    c0c8:	d119      	bne.n	c0fe <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c0ca:	f00a fec9 	bl	16e60 <nrfx_clock_enable>
    c0ce:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c0d0:	f04f 080c 	mov.w	r8, #12
    c0d4:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c0d6:	f8df 9034 	ldr.w	r9, [pc, #52]	; c10c <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    c0da:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c0dc:	4649      	mov	r1, r9
    c0de:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    c0e2:	f00e fd2e 	bl	1ab42 <onoff_manager_init>
		if (err < 0) {
    c0e6:	2800      	cmp	r0, #0
    c0e8:	db07      	blt.n	c0fa <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c0ea:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    c0ee:	3401      	adds	r4, #1
    c0f0:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c0f2:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    c0f6:	d1f0      	bne.n	c0da <clk_init+0x32>
	}

	return 0;
    c0f8:	2000      	movs	r0, #0
}
    c0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    c0fe:	f06f 0004 	mvn.w	r0, #4
    c102:	e7fa      	b.n	c0fa <clk_init+0x52>
    c104:	0000c149 	.word	0x0000c149
    c108:	0bad0000 	.word	0x0bad0000
    c10c:	0001e980 	.word	0x0001e980

0000c110 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    c110:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    c112:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    c114:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    c116:	434b      	muls	r3, r1
    c118:	4809      	ldr	r0, [pc, #36]	; (c140 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    c11a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    c11c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    c11e:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    c120:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c124:	4418      	add	r0, r3
	sub_data->cb = NULL;
    c126:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c12a:	f00e ffcc 	bl	1b0c6 <set_on_state>
	if (callback) {
    c12e:	b12d      	cbz	r5, c13c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c130:	4632      	mov	r2, r6
    c132:	462b      	mov	r3, r5
}
    c134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    c138:	4802      	ldr	r0, [pc, #8]	; (c144 <clkstarted_handle.constprop.0+0x34>)
    c13a:	4718      	bx	r3
}
    c13c:	bd70      	pop	{r4, r5, r6, pc}
    c13e:	bf00      	nop
    c140:	20009b9c 	.word	0x20009b9c
    c144:	20008448 	.word	0x20008448

0000c148 <clock_event_handler>:
{
    c148:	b508      	push	{r3, lr}
    c14a:	2805      	cmp	r0, #5
    c14c:	d821      	bhi.n	c192 <clock_event_handler+0x4a>
    c14e:	e8df f000 	tbb	[pc, r0]
    c152:	1103      	.short	0x1103
    c154:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c158:	4b13      	ldr	r3, [pc, #76]	; (c1a8 <clock_event_handler+0x60>)
    c15a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    c15e:	f010 0007 	ands.w	r0, r0, #7
    c162:	d11f      	bne.n	c1a4 <clock_event_handler+0x5c>
}
    c164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    c168:	f7ff bfd2 	b.w	c110 <clkstarted_handle.constprop.0>
    c16c:	2002      	movs	r0, #2
    c16e:	e7f9      	b.n	c164 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    c170:	2003      	movs	r0, #3
    c172:	e7f7      	b.n	c164 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c174:	2001      	movs	r0, #1
    c176:	e7f5      	b.n	c164 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    c178:	490c      	ldr	r1, [pc, #48]	; (c1ac <clock_event_handler+0x64>)
    c17a:	f240 2266 	movw	r2, #614	; 0x266
    c17e:	480c      	ldr	r0, [pc, #48]	; (c1b0 <clock_event_handler+0x68>)
    c180:	f00e fc84 	bl	1aa8c <printk>
    c184:	f240 2166 	movw	r1, #614	; 0x266
}
    c188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    c18c:	4807      	ldr	r0, [pc, #28]	; (c1ac <clock_event_handler+0x64>)
    c18e:	f00e bf23 	b.w	1afd8 <assert_post_action>
    c192:	4906      	ldr	r1, [pc, #24]	; (c1ac <clock_event_handler+0x64>)
    c194:	f240 226a 	movw	r2, #618	; 0x26a
    c198:	4805      	ldr	r0, [pc, #20]	; (c1b0 <clock_event_handler+0x68>)
    c19a:	f00e fc77 	bl	1aa8c <printk>
    c19e:	f240 216a 	movw	r1, #618	; 0x26a
    c1a2:	e7f1      	b.n	c188 <clock_event_handler+0x40>
}
    c1a4:	bd08      	pop	{r3, pc}
    c1a6:	bf00      	nop
    c1a8:	20009b9c 	.word	0x20009b9c
    c1ac:	0001feca 	.word	0x0001feca
    c1b0:	0001fb49 	.word	0x0001fb49

0000c1b4 <generic_hfclk_start>:
{
    c1b4:	b508      	push	{r3, lr}
	__asm__ volatile(
    c1b6:	f04f 0320 	mov.w	r3, #32
    c1ba:	f3ef 8111 	mrs	r1, BASEPRI
    c1be:	f383 8811 	msr	BASEPRI, r3
    c1c2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c1c6:	4a11      	ldr	r2, [pc, #68]	; (c20c <generic_hfclk_start+0x58>)
    c1c8:	6813      	ldr	r3, [r2, #0]
    c1ca:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c1ce:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c1d2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c1d4:	d00b      	beq.n	c1ee <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c1d6:	4a0e      	ldr	r2, [pc, #56]	; (c210 <generic_hfclk_start+0x5c>)
    c1d8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c1dc:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c1e0:	f013 0301 	ands.w	r3, r3, #1
    c1e4:	d003      	beq.n	c1ee <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    c1e6:	480b      	ldr	r0, [pc, #44]	; (c214 <generic_hfclk_start+0x60>)
    c1e8:	f00e ff6d 	bl	1b0c6 <set_on_state>
			already_started = true;
    c1ec:	2301      	movs	r3, #1
	__asm__ volatile(
    c1ee:	f381 8811 	msr	BASEPRI, r1
    c1f2:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c1f6:	b123      	cbz	r3, c202 <generic_hfclk_start+0x4e>
}
    c1f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c1fc:	2000      	movs	r0, #0
    c1fe:	f7ff bf87 	b.w	c110 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c202:	2001      	movs	r0, #1
}
    c204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c208:	f00a be4e 	b.w	16ea8 <nrfx_clock_start>
    c20c:	20009c4c 	.word	0x20009c4c
    c210:	40005000 	.word	0x40005000
    c214:	20009c24 	.word	0x20009c24

0000c218 <api_blocking_start>:
{
    c218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c21a:	2200      	movs	r2, #0
    c21c:	2301      	movs	r3, #1
    c21e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c222:	ab04      	add	r3, sp, #16
    c224:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c228:	4a09      	ldr	r2, [pc, #36]	; (c250 <api_blocking_start+0x38>)
    c22a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c22c:	f8cd d000 	str.w	sp, [sp]
    c230:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c234:	f00e ff8c 	bl	1b150 <api_start>
	if (err < 0) {
    c238:	2800      	cmp	r0, #0
    c23a:	db05      	blt.n	c248 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    c23c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c240:	2300      	movs	r3, #0
    c242:	4668      	mov	r0, sp
    c244:	f00d fa86 	bl	19754 <z_impl_k_sem_take>
}
    c248:	b007      	add	sp, #28
    c24a:	f85d fb04 	ldr.w	pc, [sp], #4
    c24e:	bf00      	nop
    c250:	0001b195 	.word	0x0001b195

0000c254 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c254:	4b07      	ldr	r3, [pc, #28]	; (c274 <generic_hfclk_stop+0x20>)
    c256:	e8d3 2fef 	ldaex	r2, [r3]
    c25a:	f022 0102 	bic.w	r1, r2, #2
    c25e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c262:	2800      	cmp	r0, #0
    c264:	d1f7      	bne.n	c256 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c266:	07d3      	lsls	r3, r2, #31
    c268:	d402      	bmi.n	c270 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c26a:	2001      	movs	r0, #1
    c26c:	f00a be86 	b.w	16f7c <nrfx_clock_stop>
}
    c270:	4770      	bx	lr
    c272:	bf00      	nop
    c274:	20009c4c 	.word	0x20009c4c

0000c278 <z_nrf_clock_control_lf_on>:
{
    c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c27c:	2201      	movs	r2, #1
    c27e:	4606      	mov	r6, r0
    c280:	4942      	ldr	r1, [pc, #264]	; (c38c <z_nrf_clock_control_lf_on+0x114>)
    c282:	e8d1 3fef 	ldaex	r3, [r1]
    c286:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c28a:	2800      	cmp	r0, #0
    c28c:	d1f9      	bne.n	c282 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    c28e:	b99b      	cbnz	r3, c2b8 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c290:	493f      	ldr	r1, [pc, #252]	; (c390 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    c292:	4840      	ldr	r0, [pc, #256]	; (c394 <z_nrf_clock_control_lf_on+0x11c>)
    c294:	604b      	str	r3, [r1, #4]
    c296:	60cb      	str	r3, [r1, #12]
    c298:	608a      	str	r2, [r1, #8]
    c29a:	f7fe fdd7 	bl	ae4c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    c29e:	2800      	cmp	r0, #0
    c2a0:	da0a      	bge.n	c2b8 <z_nrf_clock_control_lf_on+0x40>
    c2a2:	493d      	ldr	r1, [pc, #244]	; (c398 <z_nrf_clock_control_lf_on+0x120>)
    c2a4:	483d      	ldr	r0, [pc, #244]	; (c39c <z_nrf_clock_control_lf_on+0x124>)
    c2a6:	f240 2226 	movw	r2, #550	; 0x226
    c2aa:	f00e fbef 	bl	1aa8c <printk>
    c2ae:	f240 2126 	movw	r1, #550	; 0x226
    c2b2:	4839      	ldr	r0, [pc, #228]	; (c398 <z_nrf_clock_control_lf_on+0x120>)
    c2b4:	f00e fe90 	bl	1afd8 <assert_post_action>
	switch (start_mode) {
    c2b8:	b386      	cbz	r6, c31c <z_nrf_clock_control_lf_on+0xa4>
    c2ba:	1e73      	subs	r3, r6, #1
    c2bc:	2b01      	cmp	r3, #1
    c2be:	d852      	bhi.n	c366 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c2c0:	2e01      	cmp	r6, #1
    c2c2:	d106      	bne.n	c2d2 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c2c4:	4b36      	ldr	r3, [pc, #216]	; (c3a0 <z_nrf_clock_control_lf_on+0x128>)
    c2c6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c2ca:	f003 0303 	and.w	r3, r3, #3
    c2ce:	2b02      	cmp	r3, #2
    c2d0:	d024      	beq.n	c31c <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c2d2:	f011 fef9 	bl	1e0c8 <k_is_in_isr>
    c2d6:	4604      	mov	r4, r0
    c2d8:	b918      	cbnz	r0, c2e2 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    c2da:	4b32      	ldr	r3, [pc, #200]	; (c3a4 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	2b00      	cmp	r3, #0
    c2e0:	d14e      	bne.n	c380 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    c2e2:	f04f 0320 	mov.w	r3, #32
    c2e6:	f3ef 8711 	mrs	r7, BASEPRI
    c2ea:	f383 8811 	msr	BASEPRI, r3
    c2ee:	f3bf 8f6f 	isb	sy
    c2f2:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c2f4:	4d2a      	ldr	r5, [pc, #168]	; (c3a0 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c2f6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c3a8 <z_nrf_clock_control_lf_on+0x130>
    c2fa:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c2fe:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c302:	03d2      	lsls	r2, r2, #15
    c304:	d50c      	bpl.n	c320 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c306:	f003 0303 	and.w	r3, r3, #3
    c30a:	2b02      	cmp	r3, #2
    c30c:	d001      	beq.n	c312 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c30e:	2e01      	cmp	r6, #1
    c310:	d106      	bne.n	c320 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    c312:	b324      	cbz	r4, c35e <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    c314:	f387 8811 	msr	BASEPRI, r7
    c318:	f3bf 8f6f 	isb	sy
}
    c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    c320:	b1c4      	cbz	r4, c354 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c322:	4638      	mov	r0, r7
    c324:	f001 fcf6 	bl	dd14 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c328:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c32c:	b2db      	uxtb	r3, r3
    c32e:	2b01      	cmp	r3, #1
    c330:	d1e3      	bne.n	c2fa <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c332:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c336:	2a00      	cmp	r2, #0
    c338:	d0df      	beq.n	c2fa <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c33a:	2200      	movs	r2, #0
    c33c:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c340:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c344:	2202      	movs	r2, #2
    c346:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    c34a:	2220      	movs	r2, #32
    c34c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c350:	60ab      	str	r3, [r5, #8]
}
    c352:	e7d2      	b.n	c2fa <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    c354:	2100      	movs	r1, #0
    c356:	2021      	movs	r0, #33	; 0x21
    c358:	f00d f98a 	bl	19670 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c35c:	e7e4      	b.n	c328 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    c35e:	2302      	movs	r3, #2
    c360:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    c364:	e7da      	b.n	c31c <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    c366:	490c      	ldr	r1, [pc, #48]	; (c398 <z_nrf_clock_control_lf_on+0x120>)
    c368:	480c      	ldr	r0, [pc, #48]	; (c39c <z_nrf_clock_control_lf_on+0x124>)
    c36a:	f44f 720e 	mov.w	r2, #568	; 0x238
    c36e:	f00e fb8d 	bl	1aa8c <printk>
}
    c372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    c376:	f44f 710e 	mov.w	r1, #568	; 0x238
    c37a:	4807      	ldr	r0, [pc, #28]	; (c398 <z_nrf_clock_control_lf_on+0x120>)
    c37c:	f00e be2c 	b.w	1afd8 <assert_post_action>
    p_reg->INTENCLR = mask;
    c380:	2202      	movs	r2, #2
    c382:	4b07      	ldr	r3, [pc, #28]	; (c3a0 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c384:	4607      	mov	r7, r0
    c386:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c38a:	e7b3      	b.n	c2f4 <z_nrf_clock_control_lf_on+0x7c>
    c38c:	20009c50 	.word	0x20009c50
    c390:	20009b8c 	.word	0x20009b8c
    c394:	20009bbc 	.word	0x20009bbc
    c398:	0001feca 	.word	0x0001feca
    c39c:	0001fb49 	.word	0x0001fb49
    c3a0:	40005000 	.word	0x40005000
    c3a4:	2000ea5e 	.word	0x2000ea5e
    c3a8:	e000e100 	.word	0xe000e100

0000c3ac <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c3ac:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c3ae:	f000 f905 	bl	c5bc <bt_rpmsg_platform_init>
	if (err < 0) {
    c3b2:	1e04      	subs	r4, r0, #0
    c3b4:	da06      	bge.n	c3c4 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c3b6:	4622      	mov	r2, r4
    c3b8:	2145      	movs	r1, #69	; 0x45
    c3ba:	4807      	ldr	r0, [pc, #28]	; (c3d8 <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c3bc:	f00e fb66 	bl	1aa8c <printk>
	}

	return err;
}
    c3c0:	4620      	mov	r0, r4
    c3c2:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c3c4:	4805      	ldr	r0, [pc, #20]	; (c3dc <bt_rpmsg_init+0x30>)
    c3c6:	f003 ff29 	bl	1021c <bt_hci_driver_register>
	if (err < 0) {
    c3ca:	1e04      	subs	r4, r0, #0
    c3cc:	daf8      	bge.n	c3c0 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c3ce:	4622      	mov	r2, r4
    c3d0:	2145      	movs	r1, #69	; 0x45
    c3d2:	4803      	ldr	r0, [pc, #12]	; (c3e0 <bt_rpmsg_init+0x34>)
    c3d4:	e7f2      	b.n	c3bc <bt_rpmsg_init+0x10>
    c3d6:	bf00      	nop
    c3d8:	0001ff3c 	.word	0x0001ff3c
    c3dc:	0001e98c 	.word	0x0001e98c
    c3e0:	0001ff68 	.word	0x0001ff68

0000c3e4 <bt_rpmsg_send>:
{
    c3e4:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c3e6:	7d02      	ldrb	r2, [r0, #20]
    c3e8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c3ea:	2a02      	cmp	r2, #2
    c3ec:	d00c      	beq.n	c408 <bt_rpmsg_send+0x24>
    c3ee:	2a04      	cmp	r2, #4
    c3f0:	d009      	beq.n	c406 <bt_rpmsg_send+0x22>
    c3f2:	b1b2      	cbz	r2, c422 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c3f4:	2145      	movs	r1, #69	; 0x45
    c3f6:	480c      	ldr	r0, [pc, #48]	; (c428 <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c3f8:	f00e fb48 	bl	1aa8c <printk>
	net_buf_unref(buf);
    c3fc:	4620      	mov	r0, r4
    c3fe:	f009 facf 	bl	159a0 <net_buf_unref>
}
    c402:	2000      	movs	r0, #0
    c404:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c406:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c408:	4611      	mov	r1, r2
    c40a:	f104 0008 	add.w	r0, r4, #8
    c40e:	f011 f883 	bl	1d518 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c412:	4620      	mov	r0, r4
    c414:	f000 f8ee 	bl	c5f4 <bt_rpmsg_platform_send>
	if (err < 0) {
    c418:	1e02      	subs	r2, r0, #0
    c41a:	daef      	bge.n	c3fc <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c41c:	2145      	movs	r1, #69	; 0x45
    c41e:	4803      	ldr	r0, [pc, #12]	; (c42c <bt_rpmsg_send+0x48>)
    c420:	e7ea      	b.n	c3f8 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c422:	2201      	movs	r2, #1
    c424:	e7f0      	b.n	c408 <bt_rpmsg_send+0x24>
    c426:	bf00      	nop
    c428:	0001ff97 	.word	0x0001ff97
    c42c:	0001ffac 	.word	0x0001ffac

0000c430 <bt_rpmsg_rx>:
{
    c430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c434:	4680      	mov	r8, r0
{
    c436:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c438:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c43c:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c43e:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c440:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c444:	d009      	beq.n	c45a <bt_rpmsg_rx+0x2a>
    c446:	2805      	cmp	r0, #5
    c448:	d074      	beq.n	c534 <bt_rpmsg_rx+0x104>
    c44a:	2802      	cmp	r0, #2
    c44c:	f040 8099 	bne.w	c582 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c450:	2b03      	cmp	r3, #3
    c452:	d84a      	bhi.n	c4ea <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c454:	2145      	movs	r1, #69	; 0x45
    c456:	484f      	ldr	r0, [pc, #316]	; (c594 <bt_rpmsg_rx+0x164>)
    c458:	e003      	b.n	c462 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c45a:	2b01      	cmp	r3, #1
    c45c:	d806      	bhi.n	c46c <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c45e:	2145      	movs	r1, #69	; 0x45
    c460:	484d      	ldr	r0, [pc, #308]	; (c598 <bt_rpmsg_rx+0x168>)
}
    c462:	b002      	add	sp, #8
    c464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c468:	f00e bb10 	b.w	1aa8c <printk>
	switch (evt_type) {
    c46c:	7873      	ldrb	r3, [r6, #1]
    c46e:	2b3e      	cmp	r3, #62	; 0x3e
    c470:	d117      	bne.n	c4a2 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c472:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c474:	2f02      	cmp	r7, #2
    c476:	d016      	beq.n	c4a6 <bt_rpmsg_rx+0x76>
    c478:	f1a7 030d 	sub.w	r3, r7, #13
    c47c:	425f      	negs	r7, r3
    c47e:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c480:	2202      	movs	r2, #2
    c482:	4641      	mov	r1, r8
    c484:	a801      	add	r0, sp, #4
    c486:	f00f fd2b 	bl	1bee0 <memcpy>
	if (remaining != hdr.len) {
    c48a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c48e:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c490:	429d      	cmp	r5, r3
    c492:	d00a      	beq.n	c4aa <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c494:	2145      	movs	r1, #69	; 0x45
    c496:	4841      	ldr	r0, [pc, #260]	; (c59c <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c498:	f00e faf8 	bl	1aa8c <printk>
}
    c49c:	b002      	add	sp, #8
    c49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c4a2:	2700      	movs	r7, #0
    c4a4:	e7ec      	b.n	c480 <bt_rpmsg_rx+0x50>
			return true;
    c4a6:	2701      	movs	r7, #1
    c4a8:	e7ea      	b.n	c480 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c4aa:	2200      	movs	r2, #0
    c4ac:	2300      	movs	r3, #0
    c4ae:	4639      	mov	r1, r7
    c4b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c4b4:	f002 fadc 	bl	ea70 <bt_buf_get_evt>
	if (!buf) {
    c4b8:	4604      	mov	r4, r0
    c4ba:	b920      	cbnz	r0, c4c6 <bt_rpmsg_rx+0x96>
		if (discardable) {
    c4bc:	2f00      	cmp	r7, #0
    c4be:	d1ed      	bne.n	c49c <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c4c0:	2145      	movs	r1, #69	; 0x45
    c4c2:	4837      	ldr	r0, [pc, #220]	; (c5a0 <bt_rpmsg_rx+0x170>)
    c4c4:	e7e8      	b.n	c498 <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c4c6:	f100 0708 	add.w	r7, r0, #8
    c4ca:	2202      	movs	r2, #2
    c4cc:	a901      	add	r1, sp, #4
    c4ce:	4638      	mov	r0, r7
    c4d0:	f011 f845 	bl	1d55e <net_buf_simple_add_mem>
    c4d4:	462a      	mov	r2, r5
    c4d6:	1cf1      	adds	r1, r6, #3
    c4d8:	4638      	mov	r0, r7
    c4da:	f011 f840 	bl	1d55e <net_buf_simple_add_mem>
		bt_recv(buf);
    c4de:	4620      	mov	r0, r4
}
    c4e0:	b002      	add	sp, #8
    c4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c4e6:	f003 be6f 	b.w	101c8 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c4ea:	2200      	movs	r2, #0
    c4ec:	2300      	movs	r3, #0
    c4ee:	2003      	movs	r0, #3
    c4f0:	f002 fa6c 	bl	e9cc <bt_buf_get_rx>
	if (buf) {
    c4f4:	4604      	mov	r4, r0
    c4f6:	b1d0      	cbz	r0, c52e <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c4f8:	2204      	movs	r2, #4
    c4fa:	4641      	mov	r1, r8
    c4fc:	eb0d 0002 	add.w	r0, sp, r2
    c500:	f00f fcee 	bl	1bee0 <memcpy>
    c504:	2204      	movs	r2, #4
    c506:	f104 0708 	add.w	r7, r4, #8
    c50a:	4638      	mov	r0, r7
    c50c:	eb0d 0102 	add.w	r1, sp, r2
    c510:	f011 f825 	bl	1d55e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c514:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c518:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c51a:	429d      	cmp	r5, r3
    c51c:	d02e      	beq.n	c57c <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c51e:	2145      	movs	r1, #69	; 0x45
    c520:	4820      	ldr	r0, [pc, #128]	; (c5a4 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c522:	f00e fab3 	bl	1aa8c <printk>
		net_buf_unref(buf);
    c526:	4620      	mov	r0, r4
    c528:	f009 fa3a 	bl	159a0 <net_buf_unref>
	if (buf) {
    c52c:	e7b6      	b.n	c49c <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c52e:	2145      	movs	r1, #69	; 0x45
    c530:	481d      	ldr	r0, [pc, #116]	; (c5a8 <bt_rpmsg_rx+0x178>)
    c532:	e796      	b.n	c462 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c534:	2b03      	cmp	r3, #3
    c536:	d802      	bhi.n	c53e <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c538:	2145      	movs	r1, #69	; 0x45
    c53a:	481c      	ldr	r0, [pc, #112]	; (c5ac <bt_rpmsg_rx+0x17c>)
    c53c:	e791      	b.n	c462 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c53e:	2200      	movs	r2, #0
    c540:	2300      	movs	r3, #0
    c542:	f002 fa43 	bl	e9cc <bt_buf_get_rx>
	if (buf) {
    c546:	4604      	mov	r4, r0
    c548:	b1a8      	cbz	r0, c576 <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c54a:	2204      	movs	r2, #4
    c54c:	4641      	mov	r1, r8
    c54e:	eb0d 0002 	add.w	r0, sp, r2
    c552:	f00f fcc5 	bl	1bee0 <memcpy>
    c556:	2204      	movs	r2, #4
    c558:	f104 0708 	add.w	r7, r4, #8
    c55c:	4638      	mov	r0, r7
    c55e:	eb0d 0102 	add.w	r1, sp, r2
    c562:	f010 fffc 	bl	1d55e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c566:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c56a:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c56c:	429d      	cmp	r5, r3
    c56e:	d005      	beq.n	c57c <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c570:	2145      	movs	r1, #69	; 0x45
    c572:	480f      	ldr	r0, [pc, #60]	; (c5b0 <bt_rpmsg_rx+0x180>)
    c574:	e7d5      	b.n	c522 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c576:	2145      	movs	r1, #69	; 0x45
    c578:	480e      	ldr	r0, [pc, #56]	; (c5b4 <bt_rpmsg_rx+0x184>)
    c57a:	e772      	b.n	c462 <bt_rpmsg_rx+0x32>
    c57c:	462a      	mov	r2, r5
    c57e:	1d71      	adds	r1, r6, #5
    c580:	e7aa      	b.n	c4d8 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c582:	4602      	mov	r2, r0
    c584:	2145      	movs	r1, #69	; 0x45
    c586:	480c      	ldr	r0, [pc, #48]	; (c5b8 <bt_rpmsg_rx+0x188>)
}
    c588:	b002      	add	sp, #8
    c58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c58e:	f00e ba7d 	b.w	1aa8c <printk>
    c592:	bf00      	nop
    c594:	00020039 	.word	0x00020039
    c598:	0001ffc9 	.word	0x0001ffc9
    c59c:	0001ffef 	.word	0x0001ffef
    c5a0:	00020018 	.word	0x00020018
    c5a4:	0002007c 	.word	0x0002007c
    c5a8:	0002005d 	.word	0x0002005d
    c5ac:	000200a3 	.word	0x000200a3
    c5b0:	000200e6 	.word	0x000200e6
    c5b4:	000200c7 	.word	0x000200c7
    c5b8:	0002010d 	.word	0x0002010d

0000c5bc <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c5bc:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c5be:	4908      	ldr	r1, [pc, #32]	; (c5e0 <bt_rpmsg_platform_init+0x24>)
    c5c0:	4808      	ldr	r0, [pc, #32]	; (c5e4 <bt_rpmsg_platform_init+0x28>)
    c5c2:	f7ff fb89 	bl	bcd8 <rpmsg_service_register_endpoint>

	if (err < 0) {
    c5c6:	1e02      	subs	r2, r0, #0
    c5c8:	da05      	bge.n	c5d6 <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c5ca:	4807      	ldr	r0, [pc, #28]	; (c5e8 <bt_rpmsg_platform_init+0x2c>)
    c5cc:	2145      	movs	r1, #69	; 0x45
    c5ce:	f00e fa5d 	bl	1aa8c <printk>
		return RPMSG_ERR_INIT;
    c5d2:	4806      	ldr	r0, [pc, #24]	; (c5ec <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c5d4:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c5d6:	4b06      	ldr	r3, [pc, #24]	; (c5f0 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c5d8:	2000      	movs	r0, #0
	endpoint_id = err;
    c5da:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c5dc:	e7fa      	b.n	c5d4 <bt_rpmsg_platform_init+0x18>
    c5de:	bf00      	nop
    c5e0:	0001b1b1 	.word	0x0001b1b1
    c5e4:	0002013a 	.word	0x0002013a
    c5e8:	00020145 	.word	0x00020145
    c5ec:	fffff82a 	.word	0xfffff82a
    c5f0:	20009c54 	.word	0x20009c54

0000c5f4 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c5f4:	4b02      	ldr	r3, [pc, #8]	; (c600 <bt_rpmsg_platform_send+0xc>)
    c5f6:	8982      	ldrh	r2, [r0, #12]
    c5f8:	6881      	ldr	r1, [r0, #8]
    c5fa:	6818      	ldr	r0, [r3, #0]
    c5fc:	f7ff bb98 	b.w	bd30 <rpmsg_service_send>
    c600:	20009c54 	.word	0x20009c54

0000c604 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c604:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c606:	4b02      	ldr	r3, [pc, #8]	; (c610 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c608:	6818      	ldr	r0, [r3, #0]
    c60a:	f7ff fb87 	bl	bd1c <rpmsg_service_endpoint_is_bound>
}
    c60e:	bd08      	pop	{r3, pc}
    c610:	20009c54 	.word	0x20009c54

0000c614 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c614:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c616:	4c06      	ldr	r4, [pc, #24]	; (c630 <z_clock_isr+0x1c>)
    c618:	4806      	ldr	r0, [pc, #24]	; (c634 <z_clock_isr+0x20>)
    c61a:	4621      	mov	r1, r4
    c61c:	2217      	movs	r2, #23
    c61e:	f00e fa35 	bl	1aa8c <printk>
    c622:	4620      	mov	r0, r4
}
    c624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c628:	2117      	movs	r1, #23
    c62a:	f00e bcd5 	b.w	1afd8 <assert_post_action>
    c62e:	bf00      	nop
    c630:	00020182 	.word	0x00020182
    c634:	0001fb49 	.word	0x0001fb49

0000c638 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c638:	4a04      	ldr	r2, [pc, #16]	; (c64c <sys_clock_timeout_handler+0x14>)
    c63a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c63c:	1ac8      	subs	r0, r1, r3
    c63e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c642:	4403      	add	r3, r0
    c644:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c646:	f00d bd29 	b.w	1a09c <z_clock_announce>
    c64a:	bf00      	nop
    c64c:	20009c64 	.word	0x20009c64

0000c650 <set_absolute_alarm>:
{
    c650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c654:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c658:	f04f 0900 	mov.w	r9, #0
    c65c:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c65e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c662:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c666:	00a4      	lsls	r4, r4, #2
    c668:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c66c:	b2a4      	uxth	r4, r4
    c66e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c672:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c676:	f8df 806c 	ldr.w	r8, [pc, #108]	; c6e4 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c67a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c67e:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c682:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c684:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c688:	eba3 030a 	sub.w	r3, r3, sl
    c68c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c690:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c694:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c696:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c69a:	d102      	bne.n	c6a2 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c69c:	2013      	movs	r0, #19
    c69e:	f011 fd19 	bl	1e0d4 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c6a2:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c6a6:	1aab      	subs	r3, r5, r2
    c6a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c6ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c6b0:	bf88      	it	hi
    c6b2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c6b4:	f8c4 9000 	str.w	r9, [r4]
    c6b8:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c6ba:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c6be:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c6c2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c6c6:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c6ca:	459a      	cmp	sl, r3
    c6cc:	d006      	beq.n	c6dc <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c6ce:	1aeb      	subs	r3, r5, r3
    c6d0:	3b02      	subs	r3, #2
    c6d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c6d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c6da:	d801      	bhi.n	c6e0 <set_absolute_alarm+0x90>
}
    c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c6e0:	462b      	mov	r3, r5
    c6e2:	e7cf      	b.n	c684 <set_absolute_alarm+0x34>
    c6e4:	40015000 	.word	0x40015000

0000c6e8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c6ea:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c6ec:	462f      	mov	r7, r5
    c6ee:	4c10      	ldr	r4, [pc, #64]	; (c730 <rtc_nrf_isr+0x48>)
    c6f0:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c6f2:	4b10      	ldr	r3, [pc, #64]	; (c734 <rtc_nrf_isr+0x4c>)
    c6f4:	b105      	cbz	r5, c6f8 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6f8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c6fc:	03d2      	lsls	r2, r2, #15
    c6fe:	d5fa      	bpl.n	c6f6 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c700:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c704:	2a00      	cmp	r2, #0
    c706:	d0f6      	beq.n	c6f6 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c708:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c70c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c710:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c714:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c718:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c71a:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c71e:	b126      	cbz	r6, c72a <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c720:	2000      	movs	r0, #0
    c722:	6862      	ldr	r2, [r4, #4]
    c724:	6027      	str	r7, [r4, #0]
    c726:	47b0      	blx	r6
    c728:	e7e2      	b.n	c6f0 <rtc_nrf_isr+0x8>
    c72a:	6026      	str	r6, [r4, #0]
}
    c72c:	e7e3      	b.n	c6f6 <rtc_nrf_isr+0xe>
    c72e:	bf00      	nop
    c730:	20009c58 	.word	0x20009c58
    c734:	40015000 	.word	0x40015000

0000c738 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c738:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c73a:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c73c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c740:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c744:	4c0c      	ldr	r4, [pc, #48]	; (c778 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c746:	2101      	movs	r1, #1
    c748:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c74c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c750:	4b0a      	ldr	r3, [pc, #40]	; (c77c <z_clock_driver_init+0x44>)
    c752:	2015      	movs	r0, #21
    c754:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c758:	462a      	mov	r2, r5
    c75a:	f001 fa6b 	bl	dc34 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c75e:	2015      	movs	r0, #21
    c760:	f001 fa4a 	bl	dbf8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c764:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c766:	4a06      	ldr	r2, [pc, #24]	; (c780 <z_clock_driver_init+0x48>)
    c768:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c76a:	2002      	movs	r0, #2
    c76c:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c76e:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c770:	f7ff fd82 	bl	c278 <z_nrf_clock_control_lf_on>

	return 0;
}
    c774:	4628      	mov	r0, r5
    c776:	bd38      	pop	{r3, r4, r5, pc}
    c778:	40015000 	.word	0x40015000
    c77c:	e000e100 	.word	0xe000e100
    c780:	20009c60 	.word	0x20009c60

0000c784 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c784:	4a13      	ldr	r2, [pc, #76]	; (c7d4 <z_clock_set_timeout+0x50>)
    c786:	f1b0 3fff 	cmp.w	r0, #4294967295
    c78a:	bf14      	ite	ne
    c78c:	4603      	movne	r3, r0
    c78e:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c790:	3b01      	subs	r3, #1
    c792:	2b00      	cmp	r3, #0
    c794:	dd1c      	ble.n	c7d0 <z_clock_set_timeout+0x4c>
    c796:	4293      	cmp	r3, r2
    c798:	bfa8      	it	ge
    c79a:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c79c:	4a0e      	ldr	r2, [pc, #56]	; (c7d8 <z_clock_set_timeout+0x54>)
    c79e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c7a2:	4a0e      	ldr	r2, [pc, #56]	; (c7dc <z_clock_set_timeout+0x58>)
    c7a4:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c7a6:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c7a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c7ac:	bf18      	it	ne
    c7ae:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c7b0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c7b4:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c7b6:	480a      	ldr	r0, [pc, #40]	; (c7e0 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c7b8:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c7ba:	4a0a      	ldr	r2, [pc, #40]	; (c7e4 <z_clock_set_timeout+0x60>)
    c7bc:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c7be:	2000      	movs	r0, #0
    c7c0:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c7c2:	4a04      	ldr	r2, [pc, #16]	; (c7d4 <z_clock_set_timeout+0x50>)
    c7c4:	4293      	cmp	r3, r2
    c7c6:	bf94      	ite	ls
    c7c8:	18c9      	addls	r1, r1, r3
    c7ca:	1889      	addhi	r1, r1, r2
    c7cc:	f7ff bf40 	b.w	c650 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c7d0:	2300      	movs	r3, #0
    c7d2:	e7e3      	b.n	c79c <z_clock_set_timeout+0x18>
    c7d4:	007fffff 	.word	0x007fffff
    c7d8:	40015000 	.word	0x40015000
    c7dc:	20009c64 	.word	0x20009c64
    c7e0:	0000c639 	.word	0x0000c639
    c7e4:	20009c58 	.word	0x20009c58

0000c7e8 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c7e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c7ea:	f04f 0320 	mov.w	r3, #32
    c7ee:	f3ef 8511 	mrs	r5, BASEPRI
    c7f2:	f383 8811 	msr	BASEPRI, r3
    c7f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c7fa:	4815      	ldr	r0, [pc, #84]	; (c850 <z_clock_elapsed+0x68>)
    c7fc:	f00d f95a 	bl	19ab4 <z_spin_lock_valid>
    c800:	b940      	cbnz	r0, c814 <z_clock_elapsed+0x2c>
    c802:	4914      	ldr	r1, [pc, #80]	; (c854 <z_clock_elapsed+0x6c>)
    c804:	4814      	ldr	r0, [pc, #80]	; (c858 <z_clock_elapsed+0x70>)
    c806:	227c      	movs	r2, #124	; 0x7c
    c808:	f00e f940 	bl	1aa8c <printk>
    c80c:	217c      	movs	r1, #124	; 0x7c
    c80e:	4811      	ldr	r0, [pc, #68]	; (c854 <z_clock_elapsed+0x6c>)
    c810:	f00e fbe2 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
    c814:	480e      	ldr	r0, [pc, #56]	; (c850 <z_clock_elapsed+0x68>)
    c816:	f00d f969 	bl	19aec <z_spin_lock_set_owner>
    c81a:	4b10      	ldr	r3, [pc, #64]	; (c85c <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c81c:	480c      	ldr	r0, [pc, #48]	; (c850 <z_clock_elapsed+0x68>)
    c81e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c822:	4b0f      	ldr	r3, [pc, #60]	; (c860 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c824:	681b      	ldr	r3, [r3, #0]
    c826:	1ae4      	subs	r4, r4, r3
    c828:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c82c:	f00d f950 	bl	19ad0 <z_spin_unlock_valid>
    c830:	b940      	cbnz	r0, c844 <z_clock_elapsed+0x5c>
    c832:	4908      	ldr	r1, [pc, #32]	; (c854 <z_clock_elapsed+0x6c>)
    c834:	4808      	ldr	r0, [pc, #32]	; (c858 <z_clock_elapsed+0x70>)
    c836:	22a7      	movs	r2, #167	; 0xa7
    c838:	f00e f928 	bl	1aa8c <printk>
    c83c:	21a7      	movs	r1, #167	; 0xa7
    c83e:	4805      	ldr	r0, [pc, #20]	; (c854 <z_clock_elapsed+0x6c>)
    c840:	f00e fbca 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
    c844:	f385 8811 	msr	BASEPRI, r5
    c848:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c84c:	4620      	mov	r0, r4
    c84e:	bd38      	pop	{r3, r4, r5, pc}
    c850:	20009c68 	.word	0x20009c68
    c854:	0001fb83 	.word	0x0001fb83
    c858:	0001fb49 	.word	0x0001fb49
    c85c:	40015000 	.word	0x40015000
    c860:	20009c64 	.word	0x20009c64

0000c864 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c864:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c866:	1cc5      	adds	r5, r0, #3
    c868:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c86c:	2d74      	cmp	r5, #116	; 0x74
    c86e:	d908      	bls.n	c882 <user_data_alloc.constprop.0+0x1e>
    c870:	4917      	ldr	r1, [pc, #92]	; (c8d0 <user_data_alloc.constprop.0+0x6c>)
    c872:	4818      	ldr	r0, [pc, #96]	; (c8d4 <user_data_alloc.constprop.0+0x70>)
    c874:	2250      	movs	r2, #80	; 0x50
    c876:	f00e f909 	bl	1aa8c <printk>
    c87a:	2150      	movs	r1, #80	; 0x50
    c87c:	4814      	ldr	r0, [pc, #80]	; (c8d0 <user_data_alloc.constprop.0+0x6c>)
    c87e:	f00e fbab 	bl	1afd8 <assert_post_action>
	return list->head;
    c882:	4c15      	ldr	r4, [pc, #84]	; (c8d8 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c884:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c888:	b123      	cbz	r3, c894 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c88a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c88e:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c890:	2b74      	cmp	r3, #116	; 0x74
    c892:	d919      	bls.n	c8c8 <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c894:	2178      	movs	r1, #120	; 0x78
    c896:	2004      	movs	r0, #4
    c898:	f00d fffc 	bl	1a894 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c89c:	b178      	cbz	r0, c8be <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c89e:	2300      	movs	r3, #0
	return list->tail;
    c8a0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c8a4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c8a6:	b95a      	cbnz	r2, c8c0 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c8a8:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c8ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c8b0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c8b4:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c8b6:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c8b8:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c8ba:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c8be:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c8c0:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c8c2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c8c6:	e7f1      	b.n	c8ac <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c8c8:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c8cc:	e7f0      	b.n	c8b0 <user_data_alloc.constprop.0+0x4c>
    c8ce:	bf00      	nop
    c8d0:	000201ef 	.word	0x000201ef
    c8d4:	0001fb49 	.word	0x0001fb49
    c8d8:	20009c6c 	.word	0x20009c6c

0000c8dc <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c8dc:	4808      	ldr	r0, [pc, #32]	; (c900 <discovery_complete.constprop.0+0x24>)
    c8de:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c8e2:	e8d3 2fef 	ldaex	r2, [r3]
    c8e6:	f042 0202 	orr.w	r2, r2, #2
    c8ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c8ee:	2900      	cmp	r1, #0
    c8f0:	d1f7      	bne.n	c8e2 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c8f2:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c8f6:	681b      	ldr	r3, [r3, #0]
    c8f8:	b10b      	cbz	r3, c8fe <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c8fa:	6841      	ldr	r1, [r0, #4]
    c8fc:	4718      	bx	r3
	}
}
    c8fe:	4770      	bx	lr
    c900:	20009c6c 	.word	0x20009c6c

0000c904 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c904:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c906:	4c0b      	ldr	r4, [pc, #44]	; (c934 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c908:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c90a:	4620      	mov	r0, r4
    c90c:	f00e fc76 	bl	1b1fc <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c910:	f06f 0101 	mvn.w	r1, #1
    c914:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c918:	f00e fc87 	bl	1b22a <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c91c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c920:	689b      	ldr	r3, [r3, #8]
    c922:	b12b      	cbz	r3, c930 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c924:	4629      	mov	r1, r5
    c926:	6862      	ldr	r2, [r4, #4]
    c928:	6820      	ldr	r0, [r4, #0]
	}
}
    c92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c92e:	4718      	bx	r3
}
    c930:	bd70      	pop	{r4, r5, r6, pc}
    c932:	bf00      	nop
    c934:	20009c6c 	.word	0x20009c6c

0000c938 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c93c:	4c1f      	ldr	r4, [pc, #124]	; (c9bc <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c93e:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c940:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c944:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c946:	2b22      	cmp	r3, #34	; 0x22
    c948:	d907      	bls.n	c95a <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c94a:	2145      	movs	r1, #69	; 0x45
    c94c:	481c      	ldr	r0, [pc, #112]	; (c9c0 <attr_store.constprop.0+0x88>)
    c94e:	f00e f89d 	bl	1aa8c <printk>
		return NULL;
    c952:	2500      	movs	r5, #0
}
    c954:	4628      	mov	r0, r5
    c956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c95a:	6803      	ldr	r3, [r0, #0]
    c95c:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c95e:	2b02      	cmp	r3, #2
    c960:	d80d      	bhi.n	c97e <attr_store.constprop.0+0x46>
    c962:	4a18      	ldr	r2, [pc, #96]	; (c9c4 <attr_store.constprop.0+0x8c>)
    c964:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c968:	eb06 0009 	add.w	r0, r6, r9
    c96c:	f7ff ff7a 	bl	c864 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c970:	4605      	mov	r5, r0
    c972:	b958      	cbnz	r0, c98c <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c974:	2145      	movs	r1, #69	; 0x45
    c976:	4814      	ldr	r0, [pc, #80]	; (c9c8 <attr_store.constprop.0+0x90>)
    c978:	f00e f888 	bl	1aa8c <printk>
		return NULL;
    c97c:	e7ea      	b.n	c954 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c97e:	2145      	movs	r1, #69	; 0x45
    c980:	4812      	ldr	r0, [pc, #72]	; (c9cc <attr_store.constprop.0+0x94>)
    c982:	f00e f883 	bl	1aa8c <printk>
    c986:	f04f 0900 	mov.w	r9, #0
    c98a:	e7ed      	b.n	c968 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c98c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c990:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c992:	1c5a      	adds	r2, r3, #1
    c994:	3303      	adds	r3, #3
    c996:	00db      	lsls	r3, r3, #3
    c998:	f103 0804 	add.w	r8, r3, #4
    c99c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c9a0:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c9a2:	441c      	add	r4, r3
    c9a4:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c9a6:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c9a8:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c9aa:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c9ac:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c9ae:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c9b0:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c9b2:	f00f fa95 	bl	1bee0 <memcpy>
	return cur_attr;
    c9b6:	4645      	mov	r5, r8
    c9b8:	e7cc      	b.n	c954 <attr_store.constprop.0+0x1c>
    c9ba:	bf00      	nop
    c9bc:	20009c6c 	.word	0x20009c6c
    c9c0:	0002021a 	.word	0x0002021a
    c9c4:	000203e5 	.word	0x000203e5
    c9c8:	00020257 	.word	0x00020257
    c9cc:	0002023b 	.word	0x0002023b

0000c9d0 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c9d0:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c9d2:	4604      	mov	r4, r0
    c9d4:	b930      	cbnz	r0, c9e4 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c9d6:	2145      	movs	r1, #69	; 0x45
    c9d8:	480c      	ldr	r0, [pc, #48]	; (ca0c <uuid_store.constprop.0+0x3c>)
    c9da:	f00e f857 	bl	1aa8c <printk>
    c9de:	4625      	mov	r5, r4
}
    c9e0:	4628      	mov	r0, r5
    c9e2:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c9e4:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c9e6:	2b02      	cmp	r3, #2
    c9e8:	d80a      	bhi.n	ca00 <uuid_store.constprop.0+0x30>
    c9ea:	4a09      	ldr	r2, [pc, #36]	; (ca10 <uuid_store.constprop.0+0x40>)
    c9ec:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c9ee:	4630      	mov	r0, r6
    c9f0:	f7ff ff38 	bl	c864 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c9f4:	4632      	mov	r2, r6
    c9f6:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c9f8:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c9fa:	f00f fa71 	bl	1bee0 <memcpy>
	return (struct bt_uuid *)buffer;
    c9fe:	e7ef      	b.n	c9e0 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    ca00:	2145      	movs	r1, #69	; 0x45
    ca02:	4804      	ldr	r0, [pc, #16]	; (ca14 <uuid_store.constprop.0+0x44>)
    ca04:	f00e f842 	bl	1aa8c <printk>
    ca08:	2600      	movs	r6, #0
    ca0a:	e7f0      	b.n	c9ee <uuid_store.constprop.0+0x1e>
    ca0c:	00020279 	.word	0x00020279
    ca10:	000203e5 	.word	0x000203e5
    ca14:	0002023b 	.word	0x0002023b

0000ca18 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    ca18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    ca1c:	4e79      	ldr	r6, [pc, #484]	; (cc04 <discovery_callback+0x1ec>)
{
    ca1e:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    ca20:	6833      	ldr	r3, [r6, #0]
    ca22:	4283      	cmp	r3, r0
    ca24:	d008      	beq.n	ca38 <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    ca26:	4878      	ldr	r0, [pc, #480]	; (cc08 <discovery_callback+0x1f0>)
    ca28:	2145      	movs	r1, #69	; 0x45
    ca2a:	f00e f82f 	bl	1aa8c <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    ca2e:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    ca32:	f7ff ff67 	bl	c904 <discovery_complete_error.constprop.0>
    ca36:	e031      	b.n	ca9c <discovery_callback+0x84>
    ca38:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    ca3a:	2b03      	cmp	r3, #3
    ca3c:	f000 80ae 	beq.w	cb9c <discovery_callback+0x184>
    ca40:	d80d      	bhi.n	ca5e <discovery_callback+0x46>
    ca42:	2b02      	cmp	r3, #2
    ca44:	d126      	bne.n	ca94 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    ca46:	f240 12b3 	movw	r2, #435	; 0x1b3
    ca4a:	4970      	ldr	r1, [pc, #448]	; (cc0c <discovery_callback+0x1f4>)
    ca4c:	4870      	ldr	r0, [pc, #448]	; (cc10 <discovery_callback+0x1f8>)
    ca4e:	f00e f81d 	bl	1aa8c <printk>
    ca52:	f240 11b3 	movw	r1, #435	; 0x1b3
    ca56:	486d      	ldr	r0, [pc, #436]	; (cc0c <discovery_callback+0x1f4>)
    ca58:	f00e fabe 	bl	1afd8 <assert_post_action>
    ca5c:	e01e      	b.n	ca9c <discovery_callback+0x84>
	switch (params->type) {
    ca5e:	2b05      	cmp	r3, #5
    ca60:	d1f1      	bne.n	ca46 <discovery_callback+0x2e>
	if (!attr) {
    ca62:	2900      	cmp	r1, #0
    ca64:	f040 8081 	bne.w	cb6a <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    ca68:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    ca6c:	2b01      	cmp	r3, #1
    ca6e:	d979      	bls.n	cb64 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    ca70:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    ca72:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    ca76:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    ca78:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    ca7a:	2303      	movs	r3, #3
    ca7c:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    ca7e:	f007 fe4f 	bl	14720 <bt_gatt_discover>
			if (err) {
    ca82:	4604      	mov	r4, r0
    ca84:	b150      	cbz	r0, ca9c <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    ca86:	4602      	mov	r2, r0
    ca88:	2145      	movs	r1, #69	; 0x45
    ca8a:	4862      	ldr	r0, [pc, #392]	; (cc14 <discovery_callback+0x1fc>)
    ca8c:	f00d fffe 	bl	1aa8c <printk>
				discovery_complete_error(dm, err);
    ca90:	4620      	mov	r0, r4
    ca92:	e7ce      	b.n	ca32 <discovery_callback+0x1a>
	if (!attr) {
    ca94:	b921      	cbnz	r1, caa0 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    ca96:	4630      	mov	r0, r6
    ca98:	f00e fbd2 	bl	1b240 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    ca9c:	2400      	movs	r4, #0
    ca9e:	e04a      	b.n	cb36 <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    caa0:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    caa4:	4628      	mov	r0, r5
    caa6:	2108      	movs	r1, #8
    caa8:	f7ff ff46 	bl	c938 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    caac:	2400      	movs	r4, #0
    caae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    cab2:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    cab4:	4669      	mov	r1, sp
    cab6:	6828      	ldr	r0, [r5, #0]
    cab8:	f88d 4000 	strb.w	r4, [sp]
    cabc:	f8ad 3002 	strh.w	r3, [sp, #2]
    cac0:	f00f fa83 	bl	1bfca <bt_uuid_cmp>
    cac4:	b1a8      	cbz	r0, caf2 <discovery_callback+0xda>
    cac6:	f642 0301 	movw	r3, #10241	; 0x2801
    caca:	6828      	ldr	r0, [r5, #0]
    cacc:	a901      	add	r1, sp, #4
    cace:	f88d 4004 	strb.w	r4, [sp, #4]
    cad2:	f8ad 3006 	strh.w	r3, [sp, #6]
    cad6:	f00f fa78 	bl	1bfca <bt_uuid_cmp>
    cada:	b150      	cbz	r0, caf2 <discovery_callback+0xda>
    cadc:	494b      	ldr	r1, [pc, #300]	; (cc0c <discovery_callback+0x1f4>)
    cade:	484c      	ldr	r0, [pc, #304]	; (cc10 <discovery_callback+0x1f8>)
    cae0:	f240 1217 	movw	r2, #279	; 0x117
    cae4:	f00d ffd2 	bl	1aa8c <printk>
    cae8:	f240 1117 	movw	r1, #279	; 0x117
    caec:	4847      	ldr	r0, [pc, #284]	; (cc0c <discovery_callback+0x1f4>)
    caee:	f00e fa73 	bl	1afd8 <assert_post_action>
	if (!cur_attr) {
    caf2:	b937      	cbnz	r7, cb02 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    caf4:	4848      	ldr	r0, [pc, #288]	; (cc18 <discovery_callback+0x200>)
    caf6:	2145      	movs	r1, #69	; 0x45
    caf8:	f00d ffc8 	bl	1aa8c <printk>
		discovery_complete_error(dm, -ENOMEM);
    cafc:	f06f 000b 	mvn.w	r0, #11
    cb00:	e797      	b.n	ca32 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    cb02:	4638      	mov	r0, r7
    cb04:	f00e fbb0 	bl	1b268 <bt_gatt_dm_attr_service_val>
    cb08:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    cb0a:	2208      	movs	r2, #8
    cb0c:	4641      	mov	r1, r8
    cb0e:	f00f f9e7 	bl	1bee0 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    cb12:	6828      	ldr	r0, [r5, #0]
    cb14:	f7ff ff5c 	bl	c9d0 <uuid_store.constprop.0>
    cb18:	4604      	mov	r4, r0
    cb1a:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    cb1c:	b930      	cbnz	r0, cb2c <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    cb1e:	2145      	movs	r1, #69	; 0x45
    cb20:	483e      	ldr	r0, [pc, #248]	; (cc1c <discovery_callback+0x204>)
    cb22:	f00d ffb3 	bl	1aa8c <printk>
		discovery_complete_error(dm, -ENOMEM);
    cb26:	f06f 000b 	mvn.w	r0, #11
    cb2a:	e058      	b.n	cbde <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    cb2c:	88bb      	ldrh	r3, [r7, #4]
    cb2e:	88aa      	ldrh	r2, [r5, #4]
    cb30:	4293      	cmp	r3, r2
    cb32:	d104      	bne.n	cb3e <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    cb34:	2401      	movs	r4, #1
}
    cb36:	4620      	mov	r0, r4
    cb38:	b002      	add	sp, #8
    cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    cb3e:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    cb40:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    cb42:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    cb44:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    cb46:	4936      	ldr	r1, [pc, #216]	; (cc20 <discovery_callback+0x208>)
    cb48:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    cb4a:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    cb4c:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    cb4e:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    cb50:	f007 fde6 	bl	14720 <bt_gatt_discover>
	if (err) {
    cb54:	4602      	mov	r2, r0
    cb56:	2800      	cmp	r0, #0
    cb58:	d0a0      	beq.n	ca9c <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    cb5a:	2145      	movs	r1, #69	; 0x45
    cb5c:	4831      	ldr	r0, [pc, #196]	; (cc24 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    cb5e:	f00d ff95 	bl	1aa8c <printk>
		discovery_complete_error(dm, -ENOMEM);
    cb62:	e7e0      	b.n	cb26 <discovery_callback+0x10e>
			discovery_complete(dm);
    cb64:	f7ff feba 	bl	c8dc <discovery_complete.constprop.0>
    cb68:	e798      	b.n	ca9c <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    cb6a:	2400      	movs	r4, #0
    cb6c:	f642 0303 	movw	r3, #10243	; 0x2803
    cb70:	6828      	ldr	r0, [r5, #0]
    cb72:	a901      	add	r1, sp, #4
    cb74:	f88d 4004 	strb.w	r4, [sp, #4]
    cb78:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb7c:	f00f fa25 	bl	1bfca <bt_uuid_cmp>
    cb80:	b950      	cbnz	r0, cb98 <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    cb82:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    cb84:	4628      	mov	r0, r5
    cb86:	f7ff fed7 	bl	c938 <attr_store.constprop.0>
    cb8a:	4604      	mov	r4, r0
	if (!cur_attr) {
    cb8c:	2800      	cmp	r0, #0
    cb8e:	d1d1      	bne.n	cb34 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    cb90:	2145      	movs	r1, #69	; 0x45
    cb92:	8a2a      	ldrh	r2, [r5, #16]
    cb94:	4824      	ldr	r0, [pc, #144]	; (cc28 <discovery_callback+0x210>)
    cb96:	e7e2      	b.n	cb5e <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    cb98:	4621      	mov	r1, r4
    cb9a:	e7f3      	b.n	cb84 <discovery_callback+0x16c>
	if (!attr) {
    cb9c:	2900      	cmp	r1, #0
    cb9e:	d0e1      	beq.n	cb64 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    cba0:	2300      	movs	r3, #0
    cba2:	f88d 3004 	strb.w	r3, [sp, #4]
    cba6:	f642 0303 	movw	r3, #10243	; 0x2803
    cbaa:	6828      	ldr	r0, [r5, #0]
    cbac:	a901      	add	r1, sp, #4
    cbae:	f8ad 3006 	strh.w	r3, [sp, #6]
    cbb2:	f00f fa0a 	bl	1bfca <bt_uuid_cmp>
    cbb6:	b150      	cbz	r0, cbce <discovery_callback+0x1b6>
    cbb8:	4914      	ldr	r1, [pc, #80]	; (cc0c <discovery_callback+0x1f4>)
    cbba:	4815      	ldr	r0, [pc, #84]	; (cc10 <discovery_callback+0x1f8>)
    cbbc:	f44f 72c0 	mov.w	r2, #384	; 0x180
    cbc0:	f00d ff64 	bl	1aa8c <printk>
    cbc4:	f44f 71c0 	mov.w	r1, #384	; 0x180
    cbc8:	4810      	ldr	r0, [pc, #64]	; (cc0c <discovery_callback+0x1f4>)
    cbca:	f00e fa05 	bl	1afd8 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    cbce:	8a29      	ldrh	r1, [r5, #16]
    cbd0:	480c      	ldr	r0, [pc, #48]	; (cc04 <discovery_callback+0x1ec>)
    cbd2:	f00e faf5 	bl	1b1c0 <attr_find_by_handle>
	if (!cur_attr) {
    cbd6:	4604      	mov	r4, r0
    cbd8:	b920      	cbnz	r0, cbe4 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    cbda:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    cbde:	f7ff fe91 	bl	c904 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    cbe2:	e7a8      	b.n	cb36 <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    cbe4:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    cbe6:	f00e fb5f 	bl	1b2a8 <bt_gatt_dm_attr_chrc_val>
    cbea:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    cbec:	4621      	mov	r1, r4
    cbee:	2208      	movs	r2, #8
    cbf0:	f00f f976 	bl	1bee0 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    cbf4:	6828      	ldr	r0, [r5, #0]
    cbf6:	f7ff feeb 	bl	c9d0 <uuid_store.constprop.0>
    cbfa:	4604      	mov	r4, r0
    cbfc:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    cbfe:	2800      	cmp	r0, #0
    cc00:	d198      	bne.n	cb34 <discovery_callback+0x11c>
    cc02:	e790      	b.n	cb26 <discovery_callback+0x10e>
    cc04:	20009c6c 	.word	0x20009c6c
    cc08:	00020292 	.word	0x00020292
    cc0c:	000201ef 	.word	0x000201ef
    cc10:	0001fb49 	.word	0x0001fb49
    cc14:	00020346 	.word	0x00020346
    cc18:	000202b9 	.word	0x000202b9
    cc1c:	000202e7 	.word	0x000202e7
    cc20:	20009c74 	.word	0x20009c74
    cc24:	0002031a 	.word	0x0002031a
    cc28:	00020376 	.word	0x00020376

0000cc2c <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    cc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc30:	4606      	mov	r6, r0
    cc32:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    cc34:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    cc36:	f8df 8044 	ldr.w	r8, [pc, #68]	; cc7c <bt_gatt_dm_char_by_uuid+0x50>
    cc3a:	f8df 9044 	ldr.w	r9, [pc, #68]	; cc80 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    cc3e:	4621      	mov	r1, r4
    cc40:	4630      	mov	r0, r6
    cc42:	f00e fb49 	bl	1b2d8 <bt_gatt_dm_char_next>
    cc46:	4604      	mov	r4, r0
    cc48:	b1a0      	cbz	r0, cc74 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    cc4a:	f00e fb2d 	bl	1b2a8 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    cc4e:	4605      	mov	r5, r0
    cc50:	b950      	cbnz	r0, cc68 <bt_gatt_dm_char_by_uuid+0x3c>
    cc52:	4641      	mov	r1, r8
    cc54:	4648      	mov	r0, r9
    cc56:	f240 12fb 	movw	r2, #507	; 0x1fb
    cc5a:	f00d ff17 	bl	1aa8c <printk>
    cc5e:	f240 11fb 	movw	r1, #507	; 0x1fb
    cc62:	4640      	mov	r0, r8
    cc64:	f00e f9b8 	bl	1afd8 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    cc68:	4638      	mov	r0, r7
    cc6a:	6829      	ldr	r1, [r5, #0]
    cc6c:	f00f f9ad 	bl	1bfca <bt_uuid_cmp>
    cc70:	2800      	cmp	r0, #0
    cc72:	d1e4      	bne.n	cc3e <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    cc74:	4620      	mov	r0, r4
    cc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cc7a:	bf00      	nop
    cc7c:	000201ef 	.word	0x000201ef
    cc80:	0001fb49 	.word	0x0001fb49

0000cc84 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    cc84:	b570      	push	{r4, r5, r6, lr}
    cc86:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    cc88:	4608      	mov	r0, r1
    cc8a:	b119      	cbz	r1, cc94 <bt_gatt_dm_start+0x10>
    cc8c:	7809      	ldrb	r1, [r1, #0]
    cc8e:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    cc92:	d139      	bne.n	cd08 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    cc94:	2a00      	cmp	r2, #0
    cc96:	d037      	beq.n	cd08 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc98:	4c1e      	ldr	r4, [pc, #120]	; (cd14 <bt_gatt_dm_start+0x90>)
    cc9a:	f504 769c 	add.w	r6, r4, #312	; 0x138
    cc9e:	e8d6 1fef 	ldaex	r1, [r6]
    cca2:	f041 0c01 	orr.w	ip, r1, #1
    cca6:	e8c6 cfee 	stlex	lr, ip, [r6]
    ccaa:	f1be 0f00 	cmp.w	lr, #0
    ccae:	d1f6      	bne.n	cc9e <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    ccb0:	f011 0101 	ands.w	r1, r1, #1
    ccb4:	d12b      	bne.n	cd0e <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    ccb6:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    ccba:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    ccbe:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    ccc2:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    ccc6:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    ccca:	b108      	cbz	r0, ccd0 <bt_gatt_dm_start+0x4c>
    cccc:	f7ff fe80 	bl	c9d0 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    ccd0:	4b11      	ldr	r3, [pc, #68]	; (cd18 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    ccd2:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    ccd4:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    ccd6:	2301      	movs	r3, #1
    ccd8:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    ccda:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ccde:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cce0:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    cce2:	4628      	mov	r0, r5
    cce4:	490d      	ldr	r1, [pc, #52]	; (cd1c <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cce6:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    cce8:	f007 fd1a 	bl	14720 <bt_gatt_discover>
	if (err) {
    ccec:	4604      	mov	r4, r0
    ccee:	b148      	cbz	r0, cd04 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    ccf0:	4602      	mov	r2, r0
    ccf2:	2145      	movs	r1, #69	; 0x45
    ccf4:	480a      	ldr	r0, [pc, #40]	; (cd20 <bt_gatt_dm_start+0x9c>)
    ccf6:	f00d fec9 	bl	1aa8c <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ccfa:	f06f 0101 	mvn.w	r1, #1
    ccfe:	4809      	ldr	r0, [pc, #36]	; (cd24 <bt_gatt_dm_start+0xa0>)
    cd00:	f00e fa93 	bl	1b22a <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    cd04:	4620      	mov	r0, r4
    cd06:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cd08:	f06f 0415 	mvn.w	r4, #21
    cd0c:	e7fa      	b.n	cd04 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    cd0e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    cd12:	e7f7      	b.n	cd04 <bt_gatt_dm_start+0x80>
    cd14:	20009c6c 	.word	0x20009c6c
    cd18:	0000ca19 	.word	0x0000ca19
    cd1c:	20009c74 	.word	0x20009c74
    cd20:	000203b9 	.word	0x000203b9
    cd24:	20009da4 	.word	0x20009da4

0000cd28 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    cd28:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cd2a:	4c06      	ldr	r4, [pc, #24]	; (cd44 <scan_default_param_set+0x1c>)
{
    cd2c:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cd2e:	ad01      	add	r5, sp, #4
    cd30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cd32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cd34:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    cd36:	4c04      	ldr	r4, [pc, #16]	; (cd48 <scan_default_param_set+0x20>)
    cd38:	ad01      	add	r5, sp, #4
    cd3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd3e:	6026      	str	r6, [r4, #0]
}
    cd40:	b006      	add	sp, #24
    cd42:	bd70      	pop	{r4, r5, r6, pc}
    cd44:	0001e770 	.word	0x0001e770
    cd48:	20009e00 	.word	0x20009e00

0000cd4c <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    cd4c:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    cd50:	4b02      	ldr	r3, [pc, #8]	; (cd5c <scan_default_conn_param_set+0x10>)
    cd52:	4903      	ldr	r1, [pc, #12]	; (cd60 <scan_default_conn_param_set+0x14>)
    cd54:	e9c3 1217 	strd	r1, r2, [r3, #92]	; 0x5c
}
    cd58:	4770      	bx	lr
    cd5a:	bf00      	nop
    cd5c:	20009db8 	.word	0x20009db8
    cd60:	00280018 	.word	0x00280018

0000cd64 <uuid_check>:
{
    cd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    cd68:	4c29      	ldr	r4, [pc, #164]	; (ce10 <uuid_check+0xac>)
{
    cd6a:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    cd6c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
{
    cd70:	4606      	mov	r6, r0
    cd72:	9100      	str	r1, [sp, #0]
    cd74:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    cd76:	2b00      	cmp	r3, #0
    cd78:	d03c      	beq.n	cdf4 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    cd7a:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    cd7c:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    cd7e:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    cd80:	f894 b040 	ldrb.w	fp, [r4, #64]	; 0x40
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cd84:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
	uint8_t data_len = data->data_len;
    cd88:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    cd8a:	4557      	cmp	r7, sl
    cd8c:	d30e      	bcc.n	cdac <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    cd8e:	f886 5040 	strb.w	r5, [r6, #64]	; 0x40
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    cd92:	f1bb 0f00 	cmp.w	fp, #0
    cd96:	d02b      	beq.n	cdf0 <uuid_check+0x8c>
    cd98:	45aa      	cmp	sl, r5
    cd9a:	d12b      	bne.n	cdf4 <uuid_check+0x90>
			control->filter_match_cnt++;
    cd9c:	7873      	ldrb	r3, [r6, #1]
    cd9e:	3301      	adds	r3, #1
    cda0:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    cda2:	2301      	movs	r3, #1
    cda4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    cda8:	70b3      	strb	r3, [r6, #2]
}
    cdaa:	e023      	b.n	cdf4 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cdac:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    cdb0:	9b00      	ldr	r3, [sp, #0]
    cdb2:	9a03      	ldr	r2, [sp, #12]
    cdb4:	685b      	ldr	r3, [r3, #4]
    cdb6:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    cdb8:	4b16      	ldr	r3, [pc, #88]	; (ce14 <uuid_check+0xb0>)
    cdba:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cdbe:	9b01      	ldr	r3, [sp, #4]
    cdc0:	4599      	cmp	r9, r3
    cdc2:	d305      	bcc.n	cdd0 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    cdc4:	f1bb 0f00 	cmp.w	fp, #0
    cdc8:	d1e1      	bne.n	cd8e <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    cdca:	3701      	adds	r7, #1
    cdcc:	3418      	adds	r4, #24
    cdce:	e7dc      	b.n	cd8a <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    cdd0:	9b02      	ldr	r3, [sp, #8]
    cdd2:	4642      	mov	r2, r8
    cdd4:	eb03 0109 	add.w	r1, r3, r9
    cdd8:	a805      	add	r0, sp, #20
    cdda:	f00f f924 	bl	1c026 <bt_uuid_create>
    cdde:	2800      	cmp	r0, #0
    cde0:	d0f0      	beq.n	cdc4 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    cde2:	68a1      	ldr	r1, [r4, #8]
    cde4:	a805      	add	r0, sp, #20
    cde6:	f00f f8f0 	bl	1bfca <bt_uuid_cmp>
    cdea:	b130      	cbz	r0, cdfa <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cdec:	44c1      	add	r9, r8
    cdee:	e7e6      	b.n	cdbe <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    cdf0:	2d00      	cmp	r5, #0
    cdf2:	d1d3      	bne.n	cd9c <uuid_check+0x38>
}
    cdf4:	b00b      	add	sp, #44	; 0x2c
    cdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    cdfa:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cdfc:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    ce00:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    ce02:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    ce04:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    ce06:	f1bb 0f00 	cmp.w	fp, #0
    ce0a:	d1de      	bne.n	cdca <uuid_check+0x66>
    ce0c:	e7bf      	b.n	cd8e <uuid_check+0x2a>
    ce0e:	bf00      	nop
    ce10:	20009db8 	.word	0x20009db8
    ce14:	000203f4 	.word	0x000203f4

0000ce18 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    ce1c:	7803      	ldrb	r3, [r0, #0]
{
    ce1e:	4605      	mov	r5, r0
	switch (data->type) {
    ce20:	2b19      	cmp	r3, #25
{
    ce22:	460c      	mov	r4, r1
	switch (data->type) {
    ce24:	d812      	bhi.n	ce4c <adv_data_found+0x34>
    ce26:	2b01      	cmp	r3, #1
    ce28:	d912      	bls.n	ce50 <adv_data_found+0x38>
    ce2a:	3b02      	subs	r3, #2
    ce2c:	2b17      	cmp	r3, #23
    ce2e:	d80f      	bhi.n	ce50 <adv_data_found+0x38>
    ce30:	e8df f003 	tbb	[pc, r3]
    ce34:	7f7f7979 	.word	0x7f7f7979
    ce38:	11318181 	.word	0x11318181
    ce3c:	0e0e0e0e 	.word	0x0e0e0e0e
    ce40:	0e0e0e0e 	.word	0x0e0e0e0e
    ce44:	0e0e0e0e 	.word	0x0e0e0e0e
    ce48:	560e0e0e 	.word	0x560e0e0e
    ce4c:	2bff      	cmp	r3, #255	; 0xff
    ce4e:	d074      	beq.n	cf3a <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    ce50:	2001      	movs	r0, #1
    ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    ce56:	4f4d      	ldr	r7, [pc, #308]	; (cf8c <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    ce58:	787b      	ldrb	r3, [r7, #1]
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d0f8      	beq.n	ce50 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ce5e:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    ce60:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    ce64:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    ce68:	4556      	cmp	r6, sl
    ce6a:	d2f1      	bcs.n	ce50 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    ce6c:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    ce70:	4642      	mov	r2, r8
    ce72:	4648      	mov	r0, r9
    ce74:	6869      	ldr	r1, [r5, #4]
    ce76:	f00f f811 	bl	1be9c <strncmp>
		if (adv_name_cmp(data->data,
    ce7a:	b950      	cbnz	r0, ce92 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    ce7c:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    ce7e:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    ce82:	3301      	adds	r3, #1
    ce84:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    ce86:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    ce88:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    ce8c:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    ce8e:	70a3      	strb	r3, [r4, #2]
    ce90:	e7de      	b.n	ce50 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ce92:	3601      	adds	r6, #1
    ce94:	e7e8      	b.n	ce68 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    ce96:	4e3d      	ldr	r6, [pc, #244]	; (cf8c <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    ce98:	78f3      	ldrb	r3, [r6, #3]
    ce9a:	2b00      	cmp	r3, #0
    ce9c:	d0d8      	beq.n	ce50 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    ce9e:	78b3      	ldrb	r3, [r6, #2]
    cea0:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cea4:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cea8:	18f7      	adds	r7, r6, r3
    ceaa:	42be      	cmp	r6, r7
    ceac:	d0d0      	beq.n	ce50 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    ceae:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    ceb2:	4543      	cmp	r3, r8
    ceb4:	d812      	bhi.n	cedc <adv_data_found+0xc4>
    ceb6:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    ceba:	4642      	mov	r2, r8
    cebc:	4648      	mov	r0, r9
    cebe:	6869      	ldr	r1, [r5, #4]
    cec0:	f00e ffec 	bl	1be9c <strncmp>
	if ((data_len >= short_name_min_len) &&
    cec4:	b950      	cbnz	r0, cedc <adv_data_found+0xc4>
			control->filter_match_cnt++;
    cec6:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    cec8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    cecc:	3301      	adds	r3, #1
    cece:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    ced0:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    ced2:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    ced6:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    ceda:	e7d8      	b.n	ce8e <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cedc:	3621      	adds	r6, #33	; 0x21
    cede:	e7e4      	b.n	ceaa <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    cee0:	482a      	ldr	r0, [pc, #168]	; (cf8c <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    cee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    cee6:	2b00      	cmp	r3, #0
    cee8:	d0b2      	beq.n	ce50 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ceea:	2300      	movs	r3, #0
	const uint8_t counter =
    ceec:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
	uint8_t data_len = data->data_len;
    cef0:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    cef2:	42b3      	cmp	r3, r6
    cef4:	d2ac      	bcs.n	ce50 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    cef6:	2f02      	cmp	r7, #2
    cef8:	d113      	bne.n	cf22 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    cefa:	686a      	ldr	r2, [r5, #4]
    cefc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    cf00:	8812      	ldrh	r2, [r2, #0]
    cf02:	8f89      	ldrh	r1, [r1, #60]	; 0x3c
    cf04:	ba52      	rev16	r2, r2
    cf06:	b292      	uxth	r2, r2
    cf08:	4291      	cmp	r1, r2
    cf0a:	d10a      	bne.n	cf22 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    cf0c:	331e      	adds	r3, #30
    cf0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    cf12:	64a3      	str	r3, [r4, #72]	; 0x48
			control->filter_match_cnt++;
    cf14:	7863      	ldrb	r3, [r4, #1]
    cf16:	3301      	adds	r3, #1
    cf18:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    cf1a:	2301      	movs	r3, #1
    cf1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			control->filter_match = true;
    cf20:	e7b5      	b.n	ce8e <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cf22:	3301      	adds	r3, #1
    cf24:	e7e5      	b.n	cef2 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    cf26:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cf28:	4629      	mov	r1, r5
    cf2a:	4620      	mov	r0, r4
    cf2c:	f7ff ff1a 	bl	cd64 <uuid_check>
		break;
    cf30:	e78e      	b.n	ce50 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    cf32:	2201      	movs	r2, #1
    cf34:	e7f8      	b.n	cf28 <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cf36:	2202      	movs	r2, #2
    cf38:	e7f6      	b.n	cf28 <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    cf3a:	f8df 8050 	ldr.w	r8, [pc, #80]	; cf8c <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    cf3e:	f898 303f 	ldrb.w	r3, [r8, #63]	; 0x3f
    cf42:	2b00      	cmp	r3, #0
    cf44:	d084      	beq.n	ce50 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cf46:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    cf48:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cf4a:	f817 9f3e 	ldrb.w	r9, [r7, #62]!
	for (size_t i = 0; i < counter; i++) {
    cf4e:	454e      	cmp	r6, r9
    cf50:	f4bf af7e 	bcs.w	ce50 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    cf54:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    cf58:	786b      	ldrb	r3, [r5, #1]
    cf5a:	4293      	cmp	r3, r2
    cf5c:	d313      	bcc.n	cf86 <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    cf5e:	4638      	mov	r0, r7
    cf60:	6869      	ldr	r1, [r5, #4]
    cf62:	f00e ffac 	bl	1bebe <memcmp>
    cf66:	b970      	cbnz	r0, cf86 <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    cf68:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    cf6c:	6527      	str	r7, [r4, #80]	; 0x50
				md_filter->manufacturer_data[i].data_len;
    cf6e:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    cf70:	f896 305e 	ldrb.w	r3, [r6, #94]	; 0x5e
    cf74:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
			control->filter_match_cnt++;
    cf78:	7863      	ldrb	r3, [r4, #1]
    cf7a:	3301      	adds	r3, #1
    cf7c:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    cf7e:	2301      	movs	r3, #1
    cf80:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    cf84:	e783      	b.n	ce8e <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cf86:	3601      	adds	r6, #1
    cf88:	3721      	adds	r7, #33	; 0x21
    cf8a:	e7e0      	b.n	cf4e <adv_data_found+0x136>
    cf8c:	20009db8 	.word	0x20009db8

0000cf90 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf92:	4605      	mov	r5, r0
    cf94:	460e      	mov	r6, r1
    cf96:	4617      	mov	r7, r2
	return list->head;
    cf98:	4b08      	ldr	r3, [pc, #32]	; (cfbc <notify_filter_matched.constprop.0+0x2c>)
    cf9a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cf9c:	b10c      	cbz	r4, cfa2 <notify_filter_matched.constprop.0+0x12>
    cf9e:	3c04      	subs	r4, #4
    cfa0:	b904      	cbnz	r4, cfa4 <notify_filter_matched.constprop.0+0x14>
}
    cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    cfa4:	6823      	ldr	r3, [r4, #0]
    cfa6:	681b      	ldr	r3, [r3, #0]
    cfa8:	b11b      	cbz	r3, cfb2 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    cfaa:	463a      	mov	r2, r7
    cfac:	4631      	mov	r1, r6
    cfae:	4628      	mov	r0, r5
    cfb0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cfb2:	1d23      	adds	r3, r4, #4
    cfb4:	d0f5      	beq.n	cfa2 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    cfb6:	6864      	ldr	r4, [r4, #4]
    cfb8:	e7f0      	b.n	cf9c <notify_filter_matched.constprop.0+0xc>
    cfba:	bf00      	nop
    cfbc:	20009e1c 	.word	0x20009e1c

0000cfc0 <bt_scan_cb_register>:
	if (!cb) {
    cfc0:	b150      	cbz	r0, cfd8 <bt_scan_cb_register+0x18>
	parent->next = child;
    cfc2:	2300      	movs	r3, #0
    cfc4:	6043      	str	r3, [r0, #4]
	return list->tail;
    cfc6:	4b05      	ldr	r3, [pc, #20]	; (cfdc <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    cfc8:	1d02      	adds	r2, r0, #4
    cfca:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    cfcc:	b911      	cbnz	r1, cfd4 <bt_scan_cb_register+0x14>
	list->head = node;
    cfce:	e9c3 2200 	strd	r2, r2, [r3]
}
    cfd2:	4770      	bx	lr
	parent->next = child;
    cfd4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    cfd6:	605a      	str	r2, [r3, #4]
}
    cfd8:	4770      	bx	lr
    cfda:	bf00      	nop
    cfdc:	20009e1c 	.word	0x20009e1c

0000cfe0 <bt_scan_filter_add>:
{
    cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfe2:	4604      	mov	r4, r0
	if (!data) {
    cfe4:	460d      	mov	r5, r1
    cfe6:	2900      	cmp	r1, #0
    cfe8:	d063      	beq.n	d0b2 <bt_scan_filter_add+0xd2>
	return z_impl_k_mutex_lock(mutex, timeout);
    cfea:	f04f 32ff 	mov.w	r2, #4294967295
    cfee:	f04f 33ff 	mov.w	r3, #4294967295
    cff2:	4831      	ldr	r0, [pc, #196]	; (d0b8 <bt_scan_filter_add+0xd8>)
    cff4:	f00b f8be 	bl	18174 <z_impl_k_mutex_lock>
	switch (type) {
    cff8:	2c03      	cmp	r4, #3
    cffa:	d006      	beq.n	d00a <bt_scan_filter_add+0x2a>
    cffc:	d902      	bls.n	d004 <bt_scan_filter_add+0x24>
    cffe:	3c04      	subs	r4, #4
    d000:	2c01      	cmp	r4, #1
    d002:	d853      	bhi.n	d0ac <bt_scan_filter_add+0xcc>
		return -ENOMEM;
    d004:	f06f 060b 	mvn.w	r6, #11
    d008:	e027      	b.n	d05a <bt_scan_filter_add+0x7a>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    d00a:	4f2c      	ldr	r7, [pc, #176]	; (d0bc <bt_scan_filter_add+0xdc>)
    d00c:	f897 4038 	ldrb.w	r4, [r7, #56]	; 0x38
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    d010:	2c01      	cmp	r4, #1
    d012:	d8f7      	bhi.n	d004 <bt_scan_filter_add+0x24>
	for (size_t i = 0; i < counter; i++) {
    d014:	2300      	movs	r3, #0
    d016:	429c      	cmp	r4, r3
    d018:	d817      	bhi.n	d04a <bt_scan_filter_add+0x6a>
	switch (uuid->type) {
    d01a:	782b      	ldrb	r3, [r5, #0]
    d01c:	2b01      	cmp	r3, #1
    d01e:	d021      	beq.n	d064 <bt_scan_filter_add+0x84>
    d020:	2b02      	cmp	r3, #2
    d022:	d02c      	beq.n	d07e <bt_scan_filter_add+0x9e>
    d024:	2b00      	cmp	r3, #0
    d026:	d141      	bne.n	d0ac <bt_scan_filter_add+0xcc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    d028:	4b25      	ldr	r3, [pc, #148]	; (d0c0 <bt_scan_filter_add+0xe0>)
    d02a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d02e:	6828      	ldr	r0, [r5, #0]
    d030:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    d034:	1d11      	adds	r1, r2, #4
    d036:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    d038:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	bt_scan.scan_filters.uuid.cnt++;
    d03c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
	return 0;
    d040:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    d042:	3301      	adds	r3, #1
    d044:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	return 0;
    d048:	e007      	b.n	d05a <bt_scan_filter_add+0x7a>
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    d04a:	4629      	mov	r1, r5
    d04c:	68b8      	ldr	r0, [r7, #8]
    d04e:	f00e ffbc 	bl	1bfca <bt_uuid_cmp>
	for (size_t i = 0; i < counter; i++) {
    d052:	2301      	movs	r3, #1
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    d054:	4606      	mov	r6, r0
    d056:	2800      	cmp	r0, #0
    d058:	d1dd      	bne.n	d016 <bt_scan_filter_add+0x36>
	return z_impl_k_mutex_unlock(mutex);
    d05a:	4817      	ldr	r0, [pc, #92]	; (d0b8 <bt_scan_filter_add+0xd8>)
    d05c:	f00b f956 	bl	1830c <z_impl_k_mutex_unlock>
}
    d060:	4630      	mov	r0, r6
    d062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    d064:	4a16      	ldr	r2, [pc, #88]	; (d0c0 <bt_scan_filter_add+0xe0>)
    d066:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d06a:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    d06e:	3304      	adds	r3, #4
    d070:	e895 0003 	ldmia.w	r5, {r0, r1}
    d074:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    d078:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    d07c:	e7de      	b.n	d03c <bt_scan_filter_add+0x5c>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    d07e:	4a10      	ldr	r2, [pc, #64]	; (d0c0 <bt_scan_filter_add+0xe0>)
    d080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d084:	00e6      	lsls	r6, r4, #3
    d086:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    d08a:	3404      	adds	r4, #4
    d08c:	46a4      	mov	ip, r4
    d08e:	f105 0e10 	add.w	lr, r5, #16
    d092:	4623      	mov	r3, r4
    d094:	6828      	ldr	r0, [r5, #0]
    d096:	6869      	ldr	r1, [r5, #4]
    d098:	3508      	adds	r5, #8
    d09a:	c303      	stmia	r3!, {r0, r1}
    d09c:	4575      	cmp	r5, lr
    d09e:	461c      	mov	r4, r3
    d0a0:	d1f7      	bne.n	d092 <bt_scan_filter_add+0xb2>
    d0a2:	782b      	ldrb	r3, [r5, #0]
    d0a4:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    d0a6:	f842 c006 	str.w	ip, [r2, r6]
		break;
    d0aa:	e7c7      	b.n	d03c <bt_scan_filter_add+0x5c>
		err = -EINVAL;
    d0ac:	f06f 0615 	mvn.w	r6, #21
		break;
    d0b0:	e7d3      	b.n	d05a <bt_scan_filter_add+0x7a>
		return -EINVAL;
    d0b2:	f06f 0615 	mvn.w	r6, #21
    d0b6:	e7d3      	b.n	d060 <bt_scan_filter_add+0x80>
    d0b8:	2000853c 	.word	0x2000853c
    d0bc:	20009db8 	.word	0x20009db8
    d0c0:	20009dc0 	.word	0x20009dc0

0000d0c4 <bt_scan_filter_remove_all>:
{
    d0c4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    d0c6:	4c0c      	ldr	r4, [pc, #48]	; (d0f8 <bt_scan_filter_remove_all+0x34>)
    d0c8:	f04f 32ff 	mov.w	r2, #4294967295
    d0cc:	f04f 33ff 	mov.w	r3, #4294967295
    d0d0:	4620      	mov	r0, r4
    d0d2:	f00b f84f 	bl	18174 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    d0d6:	2200      	movs	r2, #0
    d0d8:	4b08      	ldr	r3, [pc, #32]	; (d0fc <bt_scan_filter_remove_all+0x38>)
    d0da:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    d0dc:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    d0de:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    d0e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	appearance_filter->cnt = 0;
    d0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	manufacturer_data_filter->cnt = 0;
    d0e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	return z_impl_k_mutex_unlock(mutex);
    d0ec:	4620      	mov	r0, r4
}
    d0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0f2:	f00b b90b 	b.w	1830c <z_impl_k_mutex_unlock>
    d0f6:	bf00      	nop
    d0f8:	2000853c 	.word	0x2000853c
    d0fc:	20009db8 	.word	0x20009db8

0000d100 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    d100:	2200      	movs	r2, #0
    d102:	4b05      	ldr	r3, [pc, #20]	; (d118 <bt_scan_filter_disable+0x18>)
    d104:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    d106:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    d108:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    d10a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	bt_scan.scan_filters.appearance.enabled = false;
    d10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    d112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
    d116:	4770      	bx	lr
    d118:	20009db8 	.word	0x20009db8

0000d11c <bt_scan_filter_enable>:
{
    d11c:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    d11e:	0683      	lsls	r3, r0, #26
    d120:	d025      	beq.n	d16e <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    d122:	f7ff ffed 	bl	d100 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    d126:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    d12a:	bf18      	it	ne
    d12c:	2201      	movne	r2, #1
    d12e:	4b11      	ldr	r3, [pc, #68]	; (d174 <bt_scan_filter_enable+0x58>)
    d130:	bf18      	it	ne
    d132:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    d134:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    d136:	bf44      	itt	mi
    d138:	2201      	movmi	r2, #1
    d13a:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    d13c:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    d13e:	bf44      	itt	mi
    d140:	2201      	movmi	r2, #1
    d142:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    d144:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    d146:	bf44      	itt	mi
    d148:	2201      	movmi	r2, #1
    d14a:	f883 2039 	strbmi.w	r2, [r3, #57]	; 0x39
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    d14e:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    d150:	bf44      	itt	mi
    d152:	2201      	movmi	r2, #1
    d154:	f883 203d 	strbmi.w	r2, [r3, #61]	; 0x3d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    d158:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    d15a:	bf48      	it	mi
    d15c:	2201      	movmi	r2, #1
	return 0;
    d15e:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    d162:	bf48      	it	mi
    d164:	f883 203f 	strbmi.w	r2, [r3, #63]	; 0x3f
	filters->all_mode = match_all;
    d168:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
}
    d16c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d16e:	f06f 0015 	mvn.w	r0, #21
    d172:	e7fb      	b.n	d16c <bt_scan_filter_enable+0x50>
    d174:	20009db8 	.word	0x20009db8

0000d178 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    d178:	b570      	push	{r4, r5, r6, lr}
    d17a:	460e      	mov	r6, r1
    d17c:	b086      	sub	sp, #24
    d17e:	4605      	mov	r5, r0
	bt_scan_stop();
    d180:	f00e f91f 	bl	1b3c2 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    d184:	4b18      	ldr	r3, [pc, #96]	; (d1e8 <scan_connect_with_target.part.0+0x70>)
    d186:	ac02      	add	r4, sp, #8
    d188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d18a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    d18e:	4621      	mov	r1, r4
    d190:	ab01      	add	r3, sp, #4
    d192:	4630      	mov	r0, r6
    d194:	4a15      	ldr	r2, [pc, #84]	; (d1ec <scan_connect_with_target.part.0+0x74>)
    d196:	f004 fc31 	bl	119fc <bt_conn_le_create>
	if (err) {
    d19a:	4b15      	ldr	r3, [pc, #84]	; (d1f0 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    d19c:	3508      	adds	r5, #8
	return list->head;
    d19e:	681c      	ldr	r4, [r3, #0]
	if (err) {
    d1a0:	b168      	cbz	r0, d1be <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d1a2:	b10c      	cbz	r4, d1a8 <scan_connect_with_target.part.0+0x30>
    d1a4:	3c04      	subs	r4, #4
    d1a6:	b90c      	cbnz	r4, d1ac <scan_connect_with_target.part.0+0x34>
}
    d1a8:	b006      	add	sp, #24
    d1aa:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    d1ac:	6823      	ldr	r3, [r4, #0]
    d1ae:	689b      	ldr	r3, [r3, #8]
    d1b0:	b10b      	cbz	r3, d1b6 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    d1b2:	4628      	mov	r0, r5
    d1b4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d1b6:	1d22      	adds	r2, r4, #4
    d1b8:	d0f6      	beq.n	d1a8 <scan_connect_with_target.part.0+0x30>
	return node->next;
    d1ba:	6864      	ldr	r4, [r4, #4]
    d1bc:	e7f1      	b.n	d1a2 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d1be:	b91c      	cbnz	r4, d1c8 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    d1c0:	9801      	ldr	r0, [sp, #4]
    d1c2:	f004 fa5d 	bl	11680 <bt_conn_unref>
    d1c6:	e7ef      	b.n	d1a8 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    d1c8:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d1ca:	3c04      	subs	r4, #4
    d1cc:	2c00      	cmp	r4, #0
    d1ce:	d0f7      	beq.n	d1c0 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    d1d0:	6823      	ldr	r3, [r4, #0]
    d1d2:	68db      	ldr	r3, [r3, #12]
    d1d4:	b113      	cbz	r3, d1dc <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    d1d6:	4631      	mov	r1, r6
    d1d8:	4628      	mov	r0, r5
    d1da:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d1dc:	1d23      	adds	r3, r4, #4
    d1de:	d0ef      	beq.n	d1c0 <scan_connect_with_target.part.0+0x48>
	return node->next;
    d1e0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d1e2:	2c00      	cmp	r4, #0
    d1e4:	d1f1      	bne.n	d1ca <scan_connect_with_target.part.0+0x52>
    d1e6:	e7eb      	b.n	d1c0 <scan_connect_with_target.part.0+0x48>
    d1e8:	0001e784 	.word	0x0001e784
    d1ec:	20009e14 	.word	0x20009e14
    d1f0:	20009e1c 	.word	0x20009e1c

0000d1f4 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d1f8:	4c54      	ldr	r4, [pc, #336]	; (d34c <scan_recv+0x158>)
{
    d1fa:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    d1fc:	2258      	movs	r2, #88	; 0x58
{
    d1fe:	4606      	mov	r6, r0
    d200:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    d202:	4668      	mov	r0, sp
    d204:	2100      	movs	r1, #0
    d206:	f00e fe96 	bl	1bf36 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d20a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	return bt_scan.scan_filters.addr.enabled;
    d20e:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d210:	f88d 3003 	strb.w	r3, [sp, #3]
	control->filter_cnt = 0;
    d214:	2300      	movs	r3, #0
    d216:	f88d 3000 	strb.w	r3, [sp]
	if (is_addr_filter_enabled()) {
    d21a:	b112      	cbz	r2, d222 <scan_recv+0x2e>
		control->filter_cnt++;
    d21c:	2301      	movs	r3, #1
    d21e:	f88d 3000 	strb.w	r3, [sp]
	if (is_name_filter_enabled()) {
    d222:	7863      	ldrb	r3, [r4, #1]
    d224:	b123      	cbz	r3, d230 <scan_recv+0x3c>
		control->filter_cnt++;
    d226:	f89d 3000 	ldrb.w	r3, [sp]
    d22a:	3301      	adds	r3, #1
    d22c:	f88d 3000 	strb.w	r3, [sp]
	if (is_short_name_filter_enabled()) {
    d230:	78e3      	ldrb	r3, [r4, #3]
    d232:	b123      	cbz	r3, d23e <scan_recv+0x4a>
		control->filter_cnt++;
    d234:	f89d 3000 	ldrb.w	r3, [sp]
    d238:	3301      	adds	r3, #1
    d23a:	f88d 3000 	strb.w	r3, [sp]
	if (is_uuid_filter_enabled()) {
    d23e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d242:	b123      	cbz	r3, d24e <scan_recv+0x5a>
		control->filter_cnt++;
    d244:	f89d 3000 	ldrb.w	r3, [sp]
    d248:	3301      	adds	r3, #1
    d24a:	f88d 3000 	strb.w	r3, [sp]
	if (is_appearance_filter_enabled()) {
    d24e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    d252:	b123      	cbz	r3, d25e <scan_recv+0x6a>
		control->filter_cnt++;
    d254:	f89d 3000 	ldrb.w	r3, [sp]
    d258:	3301      	adds	r3, #1
    d25a:	f88d 3000 	strb.w	r3, [sp]
	if (is_manufacturer_data_filter_enabled()) {
    d25e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    d262:	b123      	cbz	r3, d26e <scan_recv+0x7a>
		control->filter_cnt++;
    d264:	f89d 3000 	ldrb.w	r3, [sp]
    d268:	3301      	adds	r3, #1
    d26a:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    d26e:	7a33      	ldrb	r3, [r6, #8]
    d270:	f003 0301 	and.w	r3, r3, #1
    d274:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    d278:	b1ea      	cbz	r2, d2b6 <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    d27a:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    d27e:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    d282:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    d286:	4f32      	ldr	r7, [pc, #200]	; (d350 <scan_recv+0x15c>)
    d288:	45c8      	cmp	r8, r9
    d28a:	d214      	bcs.n	d2b6 <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    d28c:	4639      	mov	r1, r7
    d28e:	2207      	movs	r2, #7
    d290:	4650      	mov	r0, sl
    d292:	f00e fe14 	bl	1bebe <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    d296:	46bb      	mov	fp, r7
    d298:	3707      	adds	r7, #7
    d29a:	2800      	cmp	r0, #0
    d29c:	d13a      	bne.n	d314 <scan_recv+0x120>
			control->filter_match_cnt++;
    d29e:	f89d 3001 	ldrb.w	r3, [sp, #1]
			control->filter_status.addr.addr = &addr[i];
    d2a2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
			control->filter_match_cnt++;
    d2a6:	3301      	adds	r3, #1
    d2a8:	f88d 3001 	strb.w	r3, [sp, #1]
			control->filter_status.addr.match = true;
    d2ac:	2301      	movs	r3, #1
    d2ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
			control->filter_match = true;
    d2b2:	f88d 3002 	strb.w	r3, [sp, #2]
	state->offset = net_buf_simple_headroom(buf);
    d2b6:	4628      	mov	r0, r5
    d2b8:	f010 f945 	bl	1d546 <net_buf_simple_headroom>
    d2bc:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    d2be:	466a      	mov	r2, sp
    d2c0:	4628      	mov	r0, r5
    d2c2:	4924      	ldr	r1, [pc, #144]	; (d354 <scan_recv+0x160>)
	state->len = buf->len;
    d2c4:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    d2c8:	f002 fc94 	bl	fbf4 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    d2cc:	4b22      	ldr	r3, [pc, #136]	; (d358 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    d2ce:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    d2d0:	e9cd 3503 	strd	r3, r5, [sp, #12]
	if (control->all_mode &&
    d2d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d2d8:	fa10 f787 	uxtah	r7, r0, r7
    d2dc:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    d2de:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    d2e2:	9602      	str	r6, [sp, #8]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    d2e4:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    d2e6:	b1c3      	cbz	r3, d31a <scan_recv+0x126>
    d2e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
    d2ec:	f89d 3000 	ldrb.w	r3, [sp]
    d2f0:	429a      	cmp	r2, r3
    d2f2:	d116      	bne.n	d322 <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    d2f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    d2f8:	a905      	add	r1, sp, #20
    d2fa:	a802      	add	r0, sp, #8
    d2fc:	f7ff fe48 	bl	cf90 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    d300:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d304:	b11b      	cbz	r3, d30e <scan_recv+0x11a>
    d306:	4629      	mov	r1, r5
    d308:	4668      	mov	r0, sp
    d30a:	f7ff ff35 	bl	d178 <scan_connect_with_target.part.0>
}
    d30e:	b017      	add	sp, #92	; 0x5c
    d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    d314:	f108 0801 	add.w	r8, r8, #1
    d318:	e7b6      	b.n	d288 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    d31a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d31e:	2b00      	cmp	r3, #0
    d320:	d1e8      	bne.n	d2f4 <scan_recv+0x100>
	return list->head;
    d322:	4b0e      	ldr	r3, [pc, #56]	; (d35c <scan_recv+0x168>)
    d324:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d326:	2c00      	cmp	r4, #0
    d328:	d0f1      	beq.n	d30e <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    d32a:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d32e:	3c04      	subs	r4, #4
    d330:	2c00      	cmp	r4, #0
    d332:	d0ec      	beq.n	d30e <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    d334:	6823      	ldr	r3, [r4, #0]
    d336:	685b      	ldr	r3, [r3, #4]
    d338:	b113      	cbz	r3, d340 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    d33a:	4629      	mov	r1, r5
    d33c:	a802      	add	r0, sp, #8
    d33e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d340:	1d23      	adds	r3, r4, #4
    d342:	d0e4      	beq.n	d30e <scan_recv+0x11a>
	return node->next;
    d344:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d346:	2c00      	cmp	r4, #0
    d348:	d1f1      	bne.n	d32e <scan_recv+0x13a>
    d34a:	e7e0      	b.n	d30e <scan_recv+0x11a>
    d34c:	20009db8 	.word	0x20009db8
    d350:	20009dbc 	.word	0x20009dbc
    d354:	0000ce19 	.word	0x0000ce19
    d358:	20009e14 	.word	0x20009e14
    d35c:	20009e1c 	.word	0x20009e1c

0000d360 <bt_scan_init>:
{
    d360:	b570      	push	{r4, r5, r6, lr}
    d362:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d364:	4c14      	ldr	r4, [pc, #80]	; (d3b8 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    d366:	4815      	ldr	r0, [pc, #84]	; (d3bc <bt_scan_init+0x5c>)
    d368:	f003 fe70 	bl	1104c <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d36c:	2244      	movs	r2, #68	; 0x44
    d36e:	2100      	movs	r1, #0
    d370:	4620      	mov	r0, r4
    d372:	f00e fde0 	bl	1bf36 <memset>
	if (init) {
    d376:	b1be      	cbz	r6, d3a8 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d378:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d37a:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d37c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (init->scan_param) {
    d380:	b15d      	cbz	r5, d39a <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d384:	3448      	adds	r4, #72	; 0x48
    d386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d388:	682b      	ldr	r3, [r5, #0]
    d38a:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d38c:	68b2      	ldr	r2, [r6, #8]
    d38e:	b13a      	cbz	r2, d3a0 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d390:	4b0b      	ldr	r3, [pc, #44]	; (d3c0 <bt_scan_init+0x60>)
    d392:	6810      	ldr	r0, [r2, #0]
    d394:	6851      	ldr	r1, [r2, #4]
    d396:	c303      	stmia	r3!, {r0, r1}
}
    d398:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d39a:	f7ff fcc5 	bl	cd28 <scan_default_param_set>
    d39e:	e7f5      	b.n	d38c <bt_scan_init+0x2c>
}
    d3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d3a4:	f7ff bcd2 	b.w	cd4c <scan_default_conn_param_set>
		scan_default_param_set();
    d3a8:	f7ff fcbe 	bl	cd28 <scan_default_param_set>
		scan_default_conn_param_set();
    d3ac:	f7ff fcce 	bl	cd4c <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d3b0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
}
    d3b4:	e7f0      	b.n	d398 <bt_scan_init+0x38>
    d3b6:	bf00      	nop
    d3b8:	20009db8 	.word	0x20009db8
    d3bc:	20008248 	.word	0x20008248
    d3c0:	20009e14 	.word	0x20009e14

0000d3c4 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d3c4:	b108      	cbz	r0, d3ca <bt_scan_start+0x6>
    d3c6:	2801      	cmp	r0, #1
    d3c8:	d106      	bne.n	d3d8 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d3ca:	4b05      	ldr	r3, [pc, #20]	; (d3e0 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d3cc:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d3ce:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d3d2:	4804      	ldr	r0, [pc, #16]	; (d3e4 <bt_scan_start+0x20>)
    d3d4:	f003 bdc0 	b.w	10f58 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d3d8:	f06f 0015 	mvn.w	r0, #21
    d3dc:	4770      	bx	lr
    d3de:	bf00      	nop
    d3e0:	20009db8 	.word	0x20009db8
    d3e4:	20009e00 	.word	0x20009e00

0000d3e8 <read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t read_process(struct bt_conn *conn, uint8_t err,
			     struct bt_gatt_read_params *params,
			     const void *data, uint16_t length)
{
    d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t battery_level = BT_BAS_VAL_INVALID;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);

	if (!bas->read_cb) {
    d3ea:	6e17      	ldr	r7, [r2, #96]	; 0x60
{
    d3ec:	460d      	mov	r5, r1
    d3ee:	4614      	mov	r4, r2
	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);
    d3f0:	f1a2 061c 	sub.w	r6, r2, #28
	if (!bas->read_cb) {
    d3f4:	b937      	cbnz	r7, d404 <read_process+0x1c>
		LOG_ERR("No read callback present");
    d3f6:	2145      	movs	r1, #69	; 0x45
    d3f8:	4814      	ldr	r0, [pc, #80]	; (d44c <read_process+0x64>)
    d3fa:	f00d fb47 	bl	1aa8c <printk>
			bas->battery_level = battery_level;
			bas->read_cb(bas, battery_level, err);
		}
	}

	bas->read_cb = NULL;
    d3fe:	2000      	movs	r0, #0
    d400:	6620      	str	r0, [r4, #96]	; 0x60

	return BT_GATT_ITER_STOP;
}
    d402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else  if (err) {
    d404:	b151      	cbz	r1, d41c <read_process+0x34>
		LOG_ERR("Read value error: %d", err);
    d406:	460a      	mov	r2, r1
    d408:	4811      	ldr	r0, [pc, #68]	; (d450 <read_process+0x68>)
    d40a:	2145      	movs	r1, #69	; 0x45
    d40c:	f00d fb3e 	bl	1aa8c <printk>
			bas->read_cb(bas, BT_BAS_VAL_INVALID, err);
    d410:	462a      	mov	r2, r5
    d412:	21ff      	movs	r1, #255	; 0xff
    d414:	4630      	mov	r0, r6
    d416:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d418:	4798      	blx	r3
    d41a:	e7f0      	b.n	d3fe <read_process+0x16>
	} else if (!data || length != 1) {
    d41c:	b11b      	cbz	r3, d426 <read_process+0x3e>
    d41e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    d422:	2a01      	cmp	r2, #1
    d424:	d005      	beq.n	d432 <read_process+0x4a>
		bas->read_cb(bas,  battery_level, -EMSGSIZE);
    d426:	f06f 0223 	mvn.w	r2, #35	; 0x23
    d42a:	21ff      	movs	r1, #255	; 0xff
			bas->read_cb(bas, battery_level, err);
    d42c:	4630      	mov	r0, r6
    d42e:	47b8      	blx	r7
    d430:	e7e5      	b.n	d3fe <read_process+0x16>
		battery_level = bdata[0];
    d432:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d434:	2964      	cmp	r1, #100	; 0x64
    d436:	d904      	bls.n	d442 <read_process+0x5a>
			LOG_ERR("Unexpected read value.");
    d438:	2145      	movs	r1, #69	; 0x45
    d43a:	4806      	ldr	r0, [pc, #24]	; (d454 <read_process+0x6c>)
    d43c:	f00d fb26 	bl	1aa8c <printk>
    d440:	e7e6      	b.n	d410 <read_process+0x28>
			bas->read_cb(bas, battery_level, err);
    d442:	462a      	mov	r2, r5
			bas->battery_level = battery_level;
    d444:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			bas->read_cb(bas, battery_level, err);
    d448:	e7f0      	b.n	d42c <read_process+0x44>
    d44a:	bf00      	nop
    d44c:	000203f7 	.word	0x000203f7
    d450:	00020415 	.word	0x00020415
    d454:	0002042f 	.word	0x0002042f

0000d458 <bas_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void bas_read_value_handler(struct k_work *work)
{
    d458:	4601      	mov	r1, r0
	struct bt_bas_client *bas;

	bas = CONTAINER_OF(work, struct bt_bas_client,
			     periodic_read.read_work);

	if (!bas->conn) {
    d45a:	f850 0c30 	ldr.w	r0, [r0, #-48]
{
    d45e:	b508      	push	{r3, lr}
	if (!bas->conn) {
    d460:	b928      	cbnz	r0, d46e <bas_read_value_handler+0x16>
	 */
	if (err) {
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
    d462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
    d466:	2145      	movs	r1, #69	; 0x45
    d468:	480b      	ldr	r0, [pc, #44]	; (d498 <bas_read_value_handler+0x40>)
    d46a:	f00d bb0f 	b.w	1aa8c <printk>
	bas->periodic_read.params.func = periodic_read_process;
    d46e:	4b0b      	ldr	r3, [pc, #44]	; (d49c <bas_read_value_handler+0x44>)
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d470:	3130      	adds	r1, #48	; 0x30
	bas->periodic_read.params.func = periodic_read_process;
    d472:	600b      	str	r3, [r1, #0]
	bas->periodic_read.params.handle_count  = 1;
    d474:	2301      	movs	r3, #1
    d476:	604b      	str	r3, [r1, #4]
	bas->periodic_read.params.single.handle = bas->val_handle;
    d478:	8c0b      	ldrh	r3, [r1, #32]
    d47a:	810b      	strh	r3, [r1, #8]
	bas->periodic_read.params.single.offset = 0;
    d47c:	2300      	movs	r3, #0
    d47e:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d480:	f007 fcf8 	bl	14e74 <bt_gatt_read>
	if (err) {
    d484:	4602      	mov	r2, r0
    d486:	b128      	cbz	r0, d494 <bas_read_value_handler+0x3c>
}
    d488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
    d48c:	2145      	movs	r1, #69	; 0x45
    d48e:	4804      	ldr	r0, [pc, #16]	; (d4a0 <bas_read_value_handler+0x48>)
    d490:	f00d bafc 	b.w	1aa8c <printk>
}
    d494:	bd08      	pop	{r3, pc}
    d496:	bf00      	nop
    d498:	0002044b 	.word	0x0002044b
    d49c:	0000d4a5 	.word	0x0000d4a5
    d4a0:	00020466 	.word	0x00020466

0000d4a4 <periodic_read_process>:
{
    d4a4:	b538      	push	{r3, r4, r5, lr}
    d4a6:	4614      	mov	r4, r2
	if (!bas->notify_cb) {
    d4a8:	6992      	ldr	r2, [r2, #24]
    d4aa:	b922      	cbnz	r2, d4b6 <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
    d4ac:	2145      	movs	r1, #69	; 0x45
    d4ae:	4826      	ldr	r0, [pc, #152]	; (d548 <periodic_read_process+0xa4>)
		LOG_ERR("Unexpected read value size.");
    d4b0:	f00d faec 	bl	1aa8c <printk>
    d4b4:	e005      	b.n	d4c2 <periodic_read_process+0x1e>
	} else  if (err) {
    d4b6:	b359      	cbz	r1, d510 <periodic_read_process+0x6c>
		LOG_ERR("Read value error: %d", err);
    d4b8:	460a      	mov	r2, r1
    d4ba:	4824      	ldr	r0, [pc, #144]	; (d54c <periodic_read_process+0xa8>)
    d4bc:	2145      	movs	r1, #69	; 0x45
    d4be:	f00d fae5 	bl	1aa8c <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d4c2:	f104 0314 	add.w	r3, r4, #20
    d4c6:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(&bas->periodic_read.process,
    d4ca:	079b      	lsls	r3, r3, #30
    d4cc:	d51e      	bpl.n	d50c <periodic_read_process+0x68>
		k_delayed_work_submit(&bas->periodic_read.read_work,
    d4ce:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				      K_MSEC(atomic_get(
    d4d2:	3410      	adds	r4, #16
    d4d4:	e8d4 3faf 	lda	r3, [r4]
    d4d8:	2b00      	cmp	r3, #0
    d4da:	dd31      	ble.n	d540 <periodic_read_process+0x9c>
    d4dc:	e8d4 0faf 	lda	r0, [r4]
    d4e0:	17c1      	asrs	r1, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d4e2:	f240 33e7 	movw	r3, #999	; 0x3e7
    d4e6:	03c9      	lsls	r1, r1, #15
    d4e8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d4ec:	03c0      	lsls	r0, r0, #15
    d4ee:	18c0      	adds	r0, r0, r3
    d4f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d4f4:	f04f 0300 	mov.w	r3, #0
    d4f8:	f141 0100 	adc.w	r1, r1, #0
    d4fc:	f7fb fb16 	bl	8b2c <__aeabi_uldivmod>
    d500:	4602      	mov	r2, r0
    d502:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d504:	4812      	ldr	r0, [pc, #72]	; (d550 <periodic_read_process+0xac>)
    d506:	4629      	mov	r1, r5
    d508:	f00c fb4a 	bl	19ba0 <k_delayed_work_submit_to_queue>
}
    d50c:	2000      	movs	r0, #0
    d50e:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!data || length != 1) {
    d510:	b11b      	cbz	r3, d51a <periodic_read_process+0x76>
    d512:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d516:	2901      	cmp	r1, #1
    d518:	d002      	beq.n	d520 <periodic_read_process+0x7c>
		LOG_ERR("Unexpected read value size.");
    d51a:	2145      	movs	r1, #69	; 0x45
    d51c:	480d      	ldr	r0, [pc, #52]	; (d554 <periodic_read_process+0xb0>)
    d51e:	e7c7      	b.n	d4b0 <periodic_read_process+0xc>
		battery_level = bdata[0];
    d520:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d522:	2964      	cmp	r1, #100	; 0x64
    d524:	d902      	bls.n	d52c <periodic_read_process+0x88>
			LOG_ERR("Unexpected read value.");
    d526:	2145      	movs	r1, #69	; 0x45
    d528:	480b      	ldr	r0, [pc, #44]	; (d558 <periodic_read_process+0xb4>)
    d52a:	e7c1      	b.n	d4b0 <periodic_read_process+0xc>
		} else if (bas->battery_level != battery_level) {
    d52c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d530:	428b      	cmp	r3, r1
    d532:	d0c6      	beq.n	d4c2 <periodic_read_process+0x1e>
			bas->battery_level = battery_level;
    d534:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			bas->notify_cb(bas, battery_level);
    d538:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
    d53c:	4790      	blx	r2
    d53e:	e7c0      	b.n	d4c2 <periodic_read_process+0x1e>
				      K_MSEC(atomic_get(
    d540:	2000      	movs	r0, #0
    d542:	4601      	mov	r1, r0
    d544:	e7cd      	b.n	d4e2 <periodic_read_process+0x3e>
    d546:	bf00      	nop
    d548:	000204a0 	.word	0x000204a0
    d54c:	00020415 	.word	0x00020415
    d550:	200098e0 	.word	0x200098e0
    d554:	000204c6 	.word	0x000204c6
    d558:	0002042f 	.word	0x0002042f

0000d55c <bt_bas_client_init>:
	bas->notify = false;
}


void bt_bas_client_init(struct bt_bas_client *bas)
{
    d55c:	b510      	push	{r4, lr}
	memset(bas, 0, sizeof(*bas));
    d55e:	2288      	movs	r2, #136	; 0x88
    d560:	2100      	movs	r1, #0
{
    d562:	4604      	mov	r4, r0
	memset(bas, 0, sizeof(*bas));
    d564:	f00e fce7 	bl	1bf36 <memset>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d568:	23ff      	movs	r3, #255	; 0xff
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d56a:	2230      	movs	r2, #48	; 0x30
    d56c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    d570:	2100      	movs	r1, #0
    d572:	18a0      	adds	r0, r4, r2
    d574:	f00e fcdf 	bl	1bf36 <memset>
    d578:	4b01      	ldr	r3, [pc, #4]	; (d580 <bt_bas_client_init+0x24>)
    d57a:	6363      	str	r3, [r4, #52]	; 0x34

	k_delayed_work_init(&bas->periodic_read.read_work,
			    bas_read_value_handler);
}
    d57c:	bd10      	pop	{r4, pc}
    d57e:	bf00      	nop
    d580:	0000d459 	.word	0x0000d459

0000d584 <bt_bas_handles_assign>:


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
    d584:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d588:	460c      	mov	r4, r1
    d58a:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    d58c:	f00d fea2 	bl	1b2d4 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    d590:	f00d fe6a 	bl	1b268 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
    d594:	2300      	movs	r3, #0
    d596:	6800      	ldr	r0, [r0, #0]
    d598:	f88d 300c 	strb.w	r3, [sp, #12]
    d59c:	f641 030f 	movw	r3, #6159	; 0x180f
    d5a0:	a903      	add	r1, sp, #12
    d5a2:	f8ad 300e 	strh.w	r3, [sp, #14]
    d5a6:	f00e fd10 	bl	1bfca <bt_uuid_cmp>
    d5aa:	4605      	mov	r5, r0
    d5ac:	b128      	cbz	r0, d5ba <bt_bas_handles_assign+0x36>
		return -ENOTSUP;
    d5ae:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    d5b2:	4628      	mov	r0, r5
    d5b4:	b004      	add	sp, #16
    d5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_delayed_work_cancel(&bas->periodic_read.read_work);
    d5ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
    d5be:	f00c fb5f 	bl	19c80 <k_delayed_work_cancel>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d5c2:	23ff      	movs	r3, #255	; 0xff
    d5c4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d5c8:	f642 2319 	movw	r3, #10777	; 0x2a19
    d5cc:	4630      	mov	r0, r6
	bas->read_cb = NULL;
    d5ce:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	bas->conn = NULL;
    d5d2:	6025      	str	r5, [r4, #0]
	bas->val_handle = 0;
    d5d4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	bas->notify = false;
    d5d8:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d5dc:	a901      	add	r1, sp, #4
    d5de:	f88d 5004 	strb.w	r5, [sp, #4]
    d5e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    d5e6:	f7ff fb21 	bl	cc2c <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    d5ea:	4607      	mov	r7, r0
    d5ec:	b930      	cbnz	r0, d5fc <bt_bas_handles_assign+0x78>
		LOG_ERR("No battery level characteristic found.");
    d5ee:	2145      	movs	r1, #69	; 0x45
    d5f0:	4824      	ldr	r0, [pc, #144]	; (d684 <bt_bas_handles_assign+0x100>)
		LOG_ERR("No battery level characteristic value found.");
    d5f2:	f00d fa4b 	bl	1aa8c <printk>
		return -EINVAL;
    d5f6:	f06f 0515 	mvn.w	r5, #21
    d5fa:	e7da      	b.n	d5b2 <bt_bas_handles_assign+0x2e>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
    d5fc:	f00d fe54 	bl	1b2a8 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
    d600:	4680      	mov	r8, r0
    d602:	b950      	cbnz	r0, d61a <bt_bas_handles_assign+0x96>
    d604:	4920      	ldr	r1, [pc, #128]	; (d688 <bt_bas_handles_assign+0x104>)
    d606:	4821      	ldr	r0, [pc, #132]	; (d68c <bt_bas_handles_assign+0x108>)
    d608:	f44f 7285 	mov.w	r2, #266	; 0x10a
    d60c:	f00d fa3e 	bl	1aa8c <printk>
    d610:	f44f 7185 	mov.w	r1, #266	; 0x10a
    d614:	481c      	ldr	r0, [pc, #112]	; (d688 <bt_bas_handles_assign+0x104>)
    d616:	f00d fcdf 	bl	1afd8 <assert_post_action>
	bas->properties = chrc_val->properties;
    d61a:	f898 3006 	ldrb.w	r3, [r8, #6]
					    BT_UUID_BAS_BATTERY_LEVEL);
    d61e:	f04f 0800 	mov.w	r8, #0
	bas->properties = chrc_val->properties;
    d622:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
					    BT_UUID_BAS_BATTERY_LEVEL);
    d626:	f642 2319 	movw	r3, #10777	; 0x2a19
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d62a:	4639      	mov	r1, r7
    d62c:	4630      	mov	r0, r6
    d62e:	aa02      	add	r2, sp, #8
					    BT_UUID_BAS_BATTERY_LEVEL);
    d630:	f88d 8008 	strb.w	r8, [sp, #8]
    d634:	f8ad 300a 	strh.w	r3, [sp, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d638:	f00d fe99 	bl	1b36e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d63c:	b910      	cbnz	r0, d644 <bt_bas_handles_assign+0xc0>
		LOG_ERR("No battery level characteristic value found.");
    d63e:	2145      	movs	r1, #69	; 0x45
    d640:	4813      	ldr	r0, [pc, #76]	; (d690 <bt_bas_handles_assign+0x10c>)
    d642:	e7d6      	b.n	d5f2 <bt_bas_handles_assign+0x6e>
	bas->val_handle = gatt_desc->handle;
    d644:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d646:	4639      	mov	r1, r7
	bas->val_handle = gatt_desc->handle;
    d648:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d64c:	f642 1302 	movw	r3, #10498	; 0x2902
    d650:	4630      	mov	r0, r6
    d652:	aa03      	add	r2, sp, #12
    d654:	f88d 800c 	strb.w	r8, [sp, #12]
    d658:	f8ad 300e 	strh.w	r3, [sp, #14]
    d65c:	f00d fe87 	bl	1b36e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d660:	b940      	cbnz	r0, d674 <bt_bas_handles_assign+0xf0>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
    d662:	2149      	movs	r1, #73	; 0x49
    d664:	480b      	ldr	r0, [pc, #44]	; (d694 <bt_bas_handles_assign+0x110>)
    d666:	f00d fa11 	bl	1aa8c <printk>
	bas->conn = bt_gatt_dm_conn_get(dm);
    d66a:	4630      	mov	r0, r6
    d66c:	f00d fe30 	bl	1b2d0 <bt_gatt_dm_conn_get>
    d670:	6020      	str	r0, [r4, #0]
	return 0;
    d672:	e79e      	b.n	d5b2 <bt_bas_handles_assign+0x2e>
		bas->notify = true;
    d674:	2301      	movs	r3, #1
    d676:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		bas->ccc_handle = gatt_desc->handle;
    d67a:	8883      	ldrh	r3, [r0, #4]
    d67c:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    d680:	e7f3      	b.n	d66a <bt_bas_handles_assign+0xe6>
    d682:	bf00      	nop
    d684:	000204e7 	.word	0x000204e7
    d688:	00020513 	.word	0x00020513
    d68c:	0001fb49 	.word	0x0001fb49
    d690:	0002054a 	.word	0x0002054a
    d694:	0002057c 	.word	0x0002057c

0000d698 <bt_bas_read_battery_level>:
	return bas->conn;
}


int bt_bas_read_battery_level(struct bt_bas_client *bas, bt_bas_read_cb func)
{
    d698:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!bas || !func) {
    d69a:	4604      	mov	r4, r0
    d69c:	b1a0      	cbz	r0, d6c8 <bt_bas_read_battery_level+0x30>
    d69e:	b199      	cbz	r1, d6c8 <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (!bas->conn) {
    d6a0:	6800      	ldr	r0, [r0, #0]
    d6a2:	b188      	cbz	r0, d6c8 <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (bas->read_cb) {
    d6a4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    d6a6:	b995      	cbnz	r5, d6ce <bt_bas_read_battery_level+0x36>
		return -EBUSY;
	}
	bas->read_cb = func;
	bas->read_params.func = read_process;
    d6a8:	4b0a      	ldr	r3, [pc, #40]	; (d6d4 <bt_bas_read_battery_level+0x3c>)
	bas->read_cb = func;
    d6aa:	67e1      	str	r1, [r4, #124]	; 0x7c
	bas->read_params.func = read_process;
    d6ac:	61e3      	str	r3, [r4, #28]
	bas->read_params.handle_count  = 1;
    d6ae:	2301      	movs	r3, #1
    d6b0:	6223      	str	r3, [r4, #32]
	bas->read_params.single.handle = bas->val_handle;
    d6b2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	bas->read_params.single.offset = 0;
    d6b6:	84e5      	strh	r5, [r4, #38]	; 0x26
	bas->read_params.single.handle = bas->val_handle;
    d6b8:	84a3      	strh	r3, [r4, #36]	; 0x24

	err = bt_gatt_read(bas->conn, &bas->read_params);
    d6ba:	f104 011c 	add.w	r1, r4, #28
    d6be:	f007 fbd9 	bl	14e74 <bt_gatt_read>
	if (err) {
    d6c2:	b100      	cbz	r0, d6c6 <bt_bas_read_battery_level+0x2e>
		bas->read_cb = NULL;
    d6c4:	67e5      	str	r5, [r4, #124]	; 0x7c
		return err;
	}
	return 0;
}
    d6c6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d6c8:	f06f 0015 	mvn.w	r0, #21
    d6cc:	e7fb      	b.n	d6c6 <bt_bas_read_battery_level+0x2e>
		return -EBUSY;
    d6ce:	f06f 000f 	mvn.w	r0, #15
    d6d2:	e7f8      	b.n	d6c6 <bt_bas_read_battery_level+0x2e>
    d6d4:	0000d3e9 	.word	0x0000d3e9

0000d6d8 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d6d8:	1e4b      	subs	r3, r1, #1
    d6da:	4259      	negs	r1, r3
    d6dc:	4159      	adcs	r1, r3
    d6de:	4b01      	ldr	r3, [pc, #4]	; (d6e4 <lbslc_ccc_cfg_changed+0xc>)
    d6e0:	7019      	strb	r1, [r3, #0]
}
    d6e2:	4770      	bx	lr
    d6e4:	2000e58a 	.word	0x2000e58a

0000d6e8 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d6e8:	b510      	push	{r4, lr}
    d6ea:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d6ec:	4b03      	ldr	r3, [pc, #12]	; (d6fc <write_led+0x14>)
    d6ee:	681b      	ldr	r3, [r3, #0]
    d6f0:	b10b      	cbz	r3, d6f6 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d6f2:	7810      	ldrb	r0, [r2, #0]
    d6f4:	4798      	blx	r3
	}

	return len;
}
    d6f6:	4620      	mov	r0, r4
    d6f8:	bd10      	pop	{r4, pc}
    d6fa:	bf00      	nop
    d6fc:	20009e24 	.word	0x20009e24

0000d700 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d700:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d704:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d706:	4b0d      	ldr	r3, [pc, #52]	; (d73c <read_button+0x3c>)
{
    d708:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d70a:	6858      	ldr	r0, [r3, #4]
{
    d70c:	460c      	mov	r4, r1
    d70e:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d710:	b180      	cbz	r0, d734 <read_button+0x34>
	const char *value = attr->user_data;
    d712:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d716:	4780      	blx	r0
    d718:	4b09      	ldr	r3, [pc, #36]	; (d740 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d71a:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d71c:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d71e:	2301      	movs	r3, #1
    d720:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d724:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d728:	4621      	mov	r1, r4
    d72a:	9300      	str	r3, [sp, #0]
    d72c:	4628      	mov	r0, r5
    d72e:	463b      	mov	r3, r7
    d730:	f00f fd67 	bl	1d202 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d734:	b004      	add	sp, #16
    d736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d73a:	bf00      	nop
    d73c:	20009e24 	.word	0x20009e24
    d740:	2000e589 	.word	0x2000e589

0000d744 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d744:	b120      	cbz	r0, d750 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d746:	4b03      	ldr	r3, [pc, #12]	; (d754 <bt_lbs_init+0x10>)
    d748:	6802      	ldr	r2, [r0, #0]
    d74a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d74c:	6842      	ldr	r2, [r0, #4]
    d74e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d750:	2000      	movs	r0, #0
    d752:	4770      	bx	lr
    d754:	20009e24 	.word	0x20009e24

0000d758 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d758:	b500      	push	{lr}
	if (!notify_enabled) {
    d75a:	4b0e      	ldr	r3, [pc, #56]	; (d794 <bt_lbs_send_button_state+0x3c>)
{
    d75c:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d75e:	781b      	ldrb	r3, [r3, #0]
{
    d760:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d764:	b19b      	cbz	r3, d78e <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d766:	2100      	movs	r1, #0
    d768:	2218      	movs	r2, #24
    d76a:	a802      	add	r0, sp, #8
    d76c:	f00e fbe3 	bl	1bf36 <memset>

	params.attr = attr;
    d770:	4b09      	ldr	r3, [pc, #36]	; (d798 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d772:	2000      	movs	r0, #0
	params.attr = attr;
    d774:	9303      	str	r3, [sp, #12]
	params.data = data;
    d776:	f10d 0307 	add.w	r3, sp, #7
    d77a:	9304      	str	r3, [sp, #16]
	params.len = len;
    d77c:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d77e:	a902      	add	r1, sp, #8
	params.len = len;
    d780:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d784:	f006 fd80 	bl	14288 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d788:	b009      	add	sp, #36	; 0x24
    d78a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d78e:	f06f 000c 	mvn.w	r0, #12
    d792:	e7f9      	b.n	d788 <bt_lbs_send_button_state+0x30>
    d794:	2000e58a 	.word	0x2000e58a
    d798:	0001e9c8 	.word	0x0001e9c8

0000d79c <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d79c:	2303      	movs	r3, #3
static void _DoInit(void) {
    d79e:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d7a0:	4c10      	ldr	r4, [pc, #64]	; (d7e4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d7a2:	4a11      	ldr	r2, [pc, #68]	; (d7e8 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d7a4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d7a8:	4b10      	ldr	r3, [pc, #64]	; (d7ec <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d7aa:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d7ac:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d7b2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d7b4:	4a0e      	ldr	r2, [pc, #56]	; (d7f0 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d7b6:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d7b8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d7ba:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d7bc:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d7be:	490d      	ldr	r1, [pc, #52]	; (d7f4 <_DoInit+0x58>)
    d7c0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d7c2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d7c4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d7c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d7c8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d7ca:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d7cc:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d7ce:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d7d0:	f00e fb2c 	bl	1be2c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d7d4:	4620      	mov	r0, r4
    d7d6:	4908      	ldr	r1, [pc, #32]	; (d7f8 <_DoInit+0x5c>)
    d7d8:	f00e fb28 	bl	1be2c <strcpy>
  p->acID[6] = ' ';
    d7dc:	2320      	movs	r3, #32
    d7de:	71a3      	strb	r3, [r4, #6]
}
    d7e0:	bd10      	pop	{r4, pc}
    d7e2:	bf00      	nop
    d7e4:	20009e2c 	.word	0x20009e2c
    d7e8:	00020638 	.word	0x00020638
    d7ec:	2000e59b 	.word	0x2000e59b
    d7f0:	2000e58b 	.word	0x2000e58b
    d7f4:	00020641 	.word	0x00020641
    d7f8:	00020645 	.word	0x00020645

0000d7fc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d7fc:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d7fe:	2418      	movs	r4, #24
    d800:	fb00 4504 	mla	r5, r0, r4, r4
    d804:	4b14      	ldr	r3, [pc, #80]	; (d858 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d806:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d808:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d80a:	fb04 3300 	mla	r3, r4, r0, r3
    d80e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d810:	2c01      	cmp	r4, #1
    d812:	d00e      	beq.n	d832 <SEGGER_RTT_WriteNoLock+0x36>
    d814:	2c02      	cmp	r4, #2
    d816:	d018      	beq.n	d84a <SEGGER_RTT_WriteNoLock+0x4e>
    d818:	b9e4      	cbnz	r4, d854 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d81a:	4628      	mov	r0, r5
    d81c:	f00d fdd5 	bl	1b3ca <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d820:	4286      	cmp	r6, r0
    d822:	d804      	bhi.n	d82e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d824:	4632      	mov	r2, r6
    d826:	4628      	mov	r0, r5
    d828:	f00d fdd8 	bl	1b3dc <_WriteNoCheck>
    d82c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d82e:	4620      	mov	r0, r4
    d830:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d832:	4628      	mov	r0, r5
    d834:	f00d fdc9 	bl	1b3ca <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d838:	4286      	cmp	r6, r0
    d83a:	4634      	mov	r4, r6
    d83c:	bf28      	it	cs
    d83e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d840:	4628      	mov	r0, r5
    d842:	4622      	mov	r2, r4
    d844:	f00d fdca 	bl	1b3dc <_WriteNoCheck>
    break;
    d848:	e7f1      	b.n	d82e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d84a:	4628      	mov	r0, r5
}
    d84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d850:	f00d bde0 	b.w	1b414 <_WriteBlocking>
  switch (pRing->Flags) {
    d854:	2400      	movs	r4, #0
  return Status;
    d856:	e7ea      	b.n	d82e <SEGGER_RTT_WriteNoLock+0x32>
    d858:	20009e2c 	.word	0x20009e2c

0000d85c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d85c:	4904      	ldr	r1, [pc, #16]	; (d870 <sub_bytes+0x14>)
    d85e:	1e43      	subs	r3, r0, #1
    d860:	300f      	adds	r0, #15
    d862:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d866:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d868:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d86a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d86c:	d1f9      	bne.n	d862 <sub_bytes+0x6>
	}
}
    d86e:	4770      	bx	lr
    d870:	0002064c 	.word	0x0002064c

0000d874 <tc_aes128_set_encrypt_key>:
{
    d874:	b5f0      	push	{r4, r5, r6, r7, lr}
    d876:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d878:	4e26      	ldr	r6, [pc, #152]	; (d914 <tc_aes128_set_encrypt_key+0xa0>)
{
    d87a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d87c:	ad01      	add	r5, sp, #4
{
    d87e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d880:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d884:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d888:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d88c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d890:	4638      	mov	r0, r7
    d892:	2f00      	cmp	r7, #0
    d894:	d039      	beq.n	d90a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d896:	2c00      	cmp	r4, #0
    d898:	d039      	beq.n	d90e <tc_aes128_set_encrypt_key+0x9a>
    d89a:	1f38      	subs	r0, r7, #4
    d89c:	4602      	mov	r2, r0
    d89e:	4621      	mov	r1, r4
    d8a0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d8a2:	784b      	ldrb	r3, [r1, #1]
    d8a4:	780d      	ldrb	r5, [r1, #0]
    d8a6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d8a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d8ac:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d8ae:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d8b0:	432b      	orrs	r3, r5
    d8b2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d8b6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d8b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d8bc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d8c0:	d1ef      	bne.n	d8a2 <tc_aes128_set_encrypt_key+0x2e>
    d8c2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d8c4:	4c14      	ldr	r4, [pc, #80]	; (d918 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d8c6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d8c8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d8ca:	d116      	bne.n	d8fa <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d8cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d8d0:	5ca5      	ldrb	r5, [r4, r2]
    d8d2:	0e1a      	lsrs	r2, r3, #24
    d8d4:	5ca2      	ldrb	r2, [r4, r2]
    d8d6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d8da:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d8de:	5d65      	ldrb	r5, [r4, r5]
    d8e0:	b2db      	uxtb	r3, r3
    d8e2:	5ce3      	ldrb	r3, [r4, r3]
    d8e4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d8e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d8ec:	ad0c      	add	r5, sp, #48	; 0x30
    d8ee:	f021 0303 	bic.w	r3, r1, #3
    d8f2:	442b      	add	r3, r5
    d8f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d8f8:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d8fa:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d8fe:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d900:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d902:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d904:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d906:	d1de      	bne.n	d8c6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d908:	2001      	movs	r0, #1
}
    d90a:	b00d      	add	sp, #52	; 0x34
    d90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d90e:	4620      	mov	r0, r4
    d910:	e7fb      	b.n	d90a <tc_aes128_set_encrypt_key+0x96>
    d912:	bf00      	nop
    d914:	0001e794 	.word	0x0001e794
    d918:	0002064c 	.word	0x0002064c

0000d91c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d920:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d922:	6803      	ldr	r3, [r0, #0]
{
    d924:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d926:	9302      	str	r3, [sp, #8]
    d928:	6843      	ldr	r3, [r0, #4]
    d92a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; dae4 <compress+0x1c8>
    d92e:	9303      	str	r3, [sp, #12]
    d930:	6883      	ldr	r3, [r0, #8]
    d932:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d936:	9304      	str	r3, [sp, #16]
    d938:	68c3      	ldr	r3, [r0, #12]
    d93a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d93c:	6903      	ldr	r3, [r0, #16]
    d93e:	9306      	str	r3, [sp, #24]
    d940:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d942:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d946:	9307      	str	r3, [sp, #28]
    d948:	6983      	ldr	r3, [r0, #24]
    d94a:	9308      	str	r3, [sp, #32]
    d94c:	69c3      	ldr	r3, [r0, #28]
    d94e:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d952:	4698      	mov	r8, r3
    d954:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d956:	9b04      	ldr	r3, [sp, #16]
    d958:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d95a:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d95c:	ab0c      	add	r3, sp, #48	; 0x30
    d95e:	ba2d      	rev	r5, r5
    d960:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d962:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d966:	3704      	adds	r7, #4
    d968:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d96c:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d970:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d974:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d978:	444d      	add	r5, r9
    d97a:	ea2b 0302 	bic.w	r3, fp, r2
    d97e:	ea02 090c 	and.w	r9, r2, ip
    d982:	ea83 0309 	eor.w	r3, r3, r9
    d986:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d988:	9d00      	ldr	r5, [sp, #0]
    d98a:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d98e:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d990:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d992:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d996:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d99a:	4025      	ands	r5, r4
    d99c:	ea06 0909 	and.w	r9, r6, r9
    d9a0:	ea85 0509 	eor.w	r5, r5, r9
    d9a4:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d9a8:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d9aa:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d9ac:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d9b0:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d9b2:	f8dd e000 	ldr.w	lr, [sp]
    d9b6:	46d8      	mov	r8, fp
    d9b8:	f040 8085 	bne.w	dac6 <compress+0x1aa>
    d9bc:	f04f 0a10 	mov.w	sl, #16
    d9c0:	4949      	ldr	r1, [pc, #292]	; (dae8 <compress+0x1cc>)
    d9c2:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d9c4:	4651      	mov	r1, sl
    d9c6:	f10a 0a01 	add.w	sl, sl, #1
    d9ca:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d9ce:	f00a 070f 	and.w	r7, sl, #15
    d9d2:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d9d6:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d9da:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d9de:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d9e2:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d9e4:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d9e8:	f101 070e 	add.w	r7, r1, #14
    d9ec:	f007 070f 	and.w	r7, r7, #15
    d9f0:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d9f4:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d9f8:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d9fa:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d9fe:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    da02:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da06:	f001 010f 	and.w	r1, r1, #15
    da0a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    da0e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    da12:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    da16:	f851 1c40 	ldr.w	r1, [r1, #-64]
    da1a:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    da1e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da22:	4471      	add	r1, lr
		s0 = sigma0(s0);
    da24:	f8dd e004 	ldr.w	lr, [sp, #4]
    da28:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    da2c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da30:	4441      	add	r1, r8
		s1 = sigma1(s1);
    da32:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    da36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da38:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    da3a:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da3e:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    da42:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    da46:	ea05 0802 	and.w	r8, r5, r2
    da4a:	970a      	str	r7, [sp, #40]	; 0x28
    da4c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    da50:	ea2c 0705 	bic.w	r7, ip, r5
    da54:	ea87 0708 	eor.w	r7, r7, r8
    da58:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    da5c:	444f      	add	r7, r9
    da5e:	4477      	add	r7, lr
    da60:	4439      	add	r1, r7
    da62:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    da64:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    da68:	ea84 0b06 	eor.w	fp, r4, r6
    da6c:	ea0b 0b03 	and.w	fp, fp, r3
    da70:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    da74:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    da78:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    da7c:	ea8b 0e0e 	eor.w	lr, fp, lr
    da80:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    da84:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    da86:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    da88:	46e3      	mov	fp, ip
    da8a:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    da8c:	9600      	str	r6, [sp, #0]
    da8e:	d121      	bne.n	dad4 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    da90:	9f02      	ldr	r7, [sp, #8]
    da92:	440f      	add	r7, r1
    da94:	9903      	ldr	r1, [sp, #12]
    da96:	6007      	str	r7, [r0, #0]
    da98:	4419      	add	r1, r3
    da9a:	9b04      	ldr	r3, [sp, #16]
    da9c:	6041      	str	r1, [r0, #4]
    da9e:	4423      	add	r3, r4
    daa0:	6083      	str	r3, [r0, #8]
    daa2:	9b05      	ldr	r3, [sp, #20]
    daa4:	4433      	add	r3, r6
    daa6:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    daa8:	9b06      	ldr	r3, [sp, #24]
    daaa:	4443      	add	r3, r8
    daac:	6103      	str	r3, [r0, #16]
    daae:	9b07      	ldr	r3, [sp, #28]
    dab0:	442b      	add	r3, r5
    dab2:	6143      	str	r3, [r0, #20]
    dab4:	9b08      	ldr	r3, [sp, #32]
    dab6:	4413      	add	r3, r2
    dab8:	6183      	str	r3, [r0, #24]
    daba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dabc:	4463      	add	r3, ip
    dabe:	61c3      	str	r3, [r0, #28]
}
    dac0:	b01d      	add	sp, #116	; 0x74
    dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dac6:	46e3      	mov	fp, ip
    dac8:	9600      	str	r6, [sp, #0]
    daca:	4694      	mov	ip, r2
    dacc:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    dace:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    dad0:	461c      	mov	r4, r3
    dad2:	e742      	b.n	d95a <compress+0x3e>
    dad4:	4694      	mov	ip, r2
    dad6:	4626      	mov	r6, r4
    dad8:	462a      	mov	r2, r5
    dada:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    dadc:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    dade:	460b      	mov	r3, r1
    dae0:	e770      	b.n	d9c4 <compress+0xa8>
    dae2:	bf00      	nop
    dae4:	0001ea18 	.word	0x0001ea18
    dae8:	0001ea58 	.word	0x0001ea58

0000daec <tc_sha256_init>:
{
    daec:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    daee:	4604      	mov	r4, r0
    daf0:	b1c8      	cbz	r0, db26 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    daf2:	2270      	movs	r2, #112	; 0x70
    daf4:	2100      	movs	r1, #0
    daf6:	f00d fcca 	bl	1b48e <_set>
	s->iv[1] = 0xbb67ae85;
    dafa:	4b0b      	ldr	r3, [pc, #44]	; (db28 <tc_sha256_init+0x3c>)
    dafc:	4a0b      	ldr	r2, [pc, #44]	; (db2c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    dafe:	490c      	ldr	r1, [pc, #48]	; (db30 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    db00:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    db04:	4b0b      	ldr	r3, [pc, #44]	; (db34 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    db06:	480c      	ldr	r0, [pc, #48]	; (db38 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    db08:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    db0c:	4b0b      	ldr	r3, [pc, #44]	; (db3c <tc_sha256_init+0x50>)
    db0e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    db12:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    db14:	4b0a      	ldr	r3, [pc, #40]	; (db40 <tc_sha256_init+0x54>)
    db16:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    db18:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    db1c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    db20:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    db24:	61e3      	str	r3, [r4, #28]
}
    db26:	bd10      	pop	{r4, pc}
    db28:	bb67ae85 	.word	0xbb67ae85
    db2c:	6a09e667 	.word	0x6a09e667
    db30:	3c6ef372 	.word	0x3c6ef372
    db34:	a54ff53a 	.word	0xa54ff53a
    db38:	510e527f 	.word	0x510e527f
    db3c:	9b05688c 	.word	0x9b05688c
    db40:	1f83d9ab 	.word	0x1f83d9ab

0000db44 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    db44:	4a0a      	ldr	r2, [pc, #40]	; (db70 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    db46:	490b      	ldr	r1, [pc, #44]	; (db74 <arch_swap+0x30>)
	_current->arch.basepri = key;
    db48:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    db4a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    db4c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    db50:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    db54:	4908      	ldr	r1, [pc, #32]	; (db78 <arch_swap+0x34>)
    db56:	684b      	ldr	r3, [r1, #4]
    db58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    db5c:	604b      	str	r3, [r1, #4]
    db5e:	2300      	movs	r3, #0
    db60:	f383 8811 	msr	BASEPRI, r3
    db64:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    db68:	6893      	ldr	r3, [r2, #8]
}
    db6a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    db6e:	4770      	bx	lr
    db70:	2000a27c 	.word	0x2000a27c
    db74:	0001f04c 	.word	0x0001f04c
    db78:	e000ed00 	.word	0xe000ed00

0000db7c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    db7c:	4914      	ldr	r1, [pc, #80]	; (dbd0 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    db7e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    db80:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    db84:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    db86:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    db8a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    db8e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    db90:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    db94:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    db98:	4f0e      	ldr	r7, [pc, #56]	; (dbd4 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    db9a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    db9e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    dba0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    dba2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    dba4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    dba8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    dbaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    dbae:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    dbb2:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    dbb6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dbba:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    dbbe:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    dbc2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    dbc4:	f00e f8a6 	bl	1bd14 <configure_builtin_stack_guard>
    pop {r2, lr}
    dbc8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    dbcc:	4770      	bx	lr
    dbce:	0000      	.short	0x0000
    ldr r1, =_kernel
    dbd0:	2000a27c 	.word	0x2000a27c
    ldr v4, =_SCS_ICSR
    dbd4:	e000ed04 	.word	0xe000ed04

0000dbd8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    dbd8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dbdc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dbde:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dbe2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dbe6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    dbe8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dbec:	2902      	cmp	r1, #2
    beq _oops
    dbee:	d0ff      	beq.n	dbf0 <_oops>

0000dbf0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dbf0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dbf2:	f00e f893 	bl	1bd1c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    dbf6:	bd01      	pop	{r0, pc}

0000dbf8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dbf8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	db08      	blt.n	dc10 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dbfe:	2201      	movs	r2, #1
    dc00:	f000 001f 	and.w	r0, r0, #31
    dc04:	fa02 f000 	lsl.w	r0, r2, r0
    dc08:	4a02      	ldr	r2, [pc, #8]	; (dc14 <arch_irq_enable+0x1c>)
    dc0a:	095b      	lsrs	r3, r3, #5
    dc0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dc10:	4770      	bx	lr
    dc12:	bf00      	nop
    dc14:	e000e100 	.word	0xe000e100

0000dc18 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    dc18:	4b05      	ldr	r3, [pc, #20]	; (dc30 <arch_irq_is_enabled+0x18>)
    dc1a:	0942      	lsrs	r2, r0, #5
    dc1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    dc20:	2301      	movs	r3, #1
    dc22:	f000 001f 	and.w	r0, r0, #31
    dc26:	fa03 f000 	lsl.w	r0, r3, r0
}
    dc2a:	4010      	ands	r0, r2
    dc2c:	4770      	bx	lr
    dc2e:	bf00      	nop
    dc30:	e000e100 	.word	0xe000e100

0000dc34 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    dc34:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    dc36:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    dc38:	2c07      	cmp	r4, #7
{
    dc3a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    dc3c:	d908      	bls.n	dc50 <z_arm_irq_priority_set+0x1c>
    dc3e:	490d      	ldr	r1, [pc, #52]	; (dc74 <z_arm_irq_priority_set+0x40>)
    dc40:	480d      	ldr	r0, [pc, #52]	; (dc78 <z_arm_irq_priority_set+0x44>)
    dc42:	225c      	movs	r2, #92	; 0x5c
    dc44:	f00c ff22 	bl	1aa8c <printk>
    dc48:	215c      	movs	r1, #92	; 0x5c
    dc4a:	480a      	ldr	r0, [pc, #40]	; (dc74 <z_arm_irq_priority_set+0x40>)
    dc4c:	f00d f9c4 	bl	1afd8 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dc50:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dc52:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc54:	bfac      	ite	ge
    dc56:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc5a:	4b08      	ldrlt	r3, [pc, #32]	; (dc7c <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc5c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    dc60:	b2e4      	uxtb	r4, r4
    dc62:	bfab      	itete	ge
    dc64:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc68:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc6c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc70:	555c      	strblt	r4, [r3, r5]
}
    dc72:	bd38      	pop	{r3, r4, r5, pc}
    dc74:	0002074c 	.word	0x0002074c
    dc78:	0001fb49 	.word	0x0001fb49
    dc7c:	e000ed14 	.word	0xe000ed14

0000dc80 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dc80:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dc84:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dc86:	490b      	ldr	r1, [pc, #44]	; (dcb4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dc88:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dc8c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dc8e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    dc92:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dc96:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dc98:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dc9c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dca4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dca8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dcaa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dcac:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    dcae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dcb2:	4770      	bx	lr
    dcb4:	0001ab69 	.word	0x0001ab69

0000dcb8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    dcb8:	4604      	mov	r4, r0
    dcba:	b508      	push	{r3, lr}
    dcbc:	460e      	mov	r6, r1
    dcbe:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    dcc0:	f000 faf6 	bl	e2b0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dcc4:	4b08      	ldr	r3, [pc, #32]	; (dce8 <arch_switch_to_main_thread+0x30>)
    dcc6:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dcc8:	6f63      	ldr	r3, [r4, #116]	; 0x74
    dcca:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dcce:	4628      	mov	r0, r5
    dcd0:	f386 8809 	msr	PSP, r6
    dcd4:	2100      	movs	r1, #0
    dcd6:	b663      	cpsie	if
    dcd8:	f381 8811 	msr	BASEPRI, r1
    dcdc:	f3bf 8f6f 	isb	sy
    dce0:	2200      	movs	r2, #0
    dce2:	2300      	movs	r3, #0
    dce4:	f00c ff40 	bl	1ab68 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dce8:	2000a27c 	.word	0x2000a27c

0000dcec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    dcec:	4901      	ldr	r1, [pc, #4]	; (dcf4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    dcee:	2210      	movs	r2, #16
	str	r2, [r1]
    dcf0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    dcf2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    dcf4:	e000ed10 	.word	0xe000ed10

0000dcf8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    dcf8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    dcfa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    dcfc:	f380 8811 	msr	BASEPRI, r0
	isb
    dd00:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    dd04:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dd08:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dd0a:	b662      	cpsie	i
	isb
    dd0c:	f3bf 8f6f 	isb	sy

	bx	lr
    dd10:	4770      	bx	lr
    dd12:	bf00      	nop

0000dd14 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    dd14:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    dd16:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    dd18:	f381 8811 	msr	BASEPRI, r1

	wfe
    dd1c:	bf20      	wfe

	msr	BASEPRI, r0
    dd1e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    dd22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    dd24:	4770      	bx	lr
    dd26:	bf00      	nop

0000dd28 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd2a:	4605      	mov	r5, r0

	if (esf != NULL) {
    dd2c:	460c      	mov	r4, r1
    dd2e:	b1c9      	cbz	r1, dd64 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dd30:	688b      	ldr	r3, [r1, #8]
    dd32:	4810      	ldr	r0, [pc, #64]	; (dd74 <z_arm_fatal_error+0x4c>)
    dd34:	9300      	str	r3, [sp, #0]
    dd36:	e9d1 2300 	ldrd	r2, r3, [r1]
    dd3a:	2145      	movs	r1, #69	; 0x45
    dd3c:	f00c fea6 	bl	1aa8c <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dd40:	6963      	ldr	r3, [r4, #20]
    dd42:	2145      	movs	r1, #69	; 0x45
    dd44:	9300      	str	r3, [sp, #0]
    dd46:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    dd4a:	480b      	ldr	r0, [pc, #44]	; (dd78 <z_arm_fatal_error+0x50>)
    dd4c:	f00c fe9e 	bl	1aa8c <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dd50:	2145      	movs	r1, #69	; 0x45
    dd52:	69e2      	ldr	r2, [r4, #28]
    dd54:	4809      	ldr	r0, [pc, #36]	; (dd7c <z_arm_fatal_error+0x54>)
    dd56:	f00c fe99 	bl	1aa8c <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    dd5a:	2145      	movs	r1, #69	; 0x45
    dd5c:	69a2      	ldr	r2, [r4, #24]
    dd5e:	4808      	ldr	r0, [pc, #32]	; (dd80 <z_arm_fatal_error+0x58>)
    dd60:	f00c fe94 	bl	1aa8c <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    dd64:	4621      	mov	r1, r4
    dd66:	4628      	mov	r0, r5
}
    dd68:	b003      	add	sp, #12
    dd6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    dd6e:	f009 bf0b 	b.w	17b88 <z_fatal_error>
    dd72:	bf00      	nop
    dd74:	00020782 	.word	0x00020782
    dd78:	000207b6 	.word	0x000207b6
    dd7c:	000207ea 	.word	0x000207ea
    dd80:	000207fe 	.word	0x000207fe

0000dd84 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dd84:	bf30      	wfi
    b z_SysNmiOnReset
    dd86:	f7ff bffd 	b.w	dd84 <z_SysNmiOnReset>
    dd8a:	bf00      	nop

0000dd8c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dd8c:	4a0e      	ldr	r2, [pc, #56]	; (ddc8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    dd8e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dd90:	4b0e      	ldr	r3, [pc, #56]	; (ddcc <z_arm_prep_c+0x40>)
    dd92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    dd96:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dd98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dd9c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    dda0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dda4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    dda8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    ddac:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ddb0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ddb4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ddb8:	f009 ff72 	bl	17ca0 <z_bss_zero>
	z_data_copy();
    ddbc:	f00b ffa8 	bl	19d10 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ddc0:	f000 fa48 	bl	e254 <z_arm_interrupt_init>
	z_cstart();
    ddc4:	f009 ff90 	bl	17ce8 <z_cstart>
    ddc8:	00008000 	.word	0x00008000
    ddcc:	e000ed00 	.word	0xe000ed00

0000ddd0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ddd0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ddd2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ddd4:	4a0b      	ldr	r2, [pc, #44]	; (de04 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ddd6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    ddd8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ddda:	bf1e      	ittt	ne
	movne	r1, #0
    dddc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ddde:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    dde0:	f010 f8d8 	blne	1df94 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dde4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dde6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ddea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ddee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ddf2:	4905      	ldr	r1, [pc, #20]	; (de08 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ddf4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ddf6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ddf8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ddfa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ddfe:	4903      	ldr	r1, [pc, #12]	; (de0c <_isr_wrapper+0x3c>)
	bx r1
    de00:	4708      	bx	r1
    de02:	0000      	.short	0x0000
	ldr r2, =_kernel
    de04:	2000a27c 	.word	0x2000a27c
	ldr r1, =_sw_isr_table
    de08:	0001e394 	.word	0x0001e394
	ldr r1, =z_arm_int_exit
    de0c:	0000e215 	.word	0x0000e215

0000de10 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    de10:	f00d f901 	bl	1b016 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    de14:	2020      	movs	r0, #32
    msr BASEPRI, r0
    de16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    de1a:	4808      	ldr	r0, [pc, #32]	; (de3c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    de1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    de20:	1840      	adds	r0, r0, r1
    msr PSP, r0
    de22:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    de26:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    de2a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    de2c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    de2e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    de32:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    de36:	f7ff ffa9 	bl	dd8c <z_arm_prep_c>
    de3a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    de3c:	20012678 	.word	0x20012678

0000de40 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    de40:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    de44:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    de48:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    de4a:	4672      	mov	r2, lr
	bl z_arm_fault
    de4c:	f000 f91a 	bl	e084 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    de50:	bd01      	pop	{r0, pc}
    de52:	bf00      	nop

0000de54 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    de54:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    de56:	4c21      	ldr	r4, [pc, #132]	; (dedc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    de58:	2145      	movs	r1, #69	; 0x45
    de5a:	4821      	ldr	r0, [pc, #132]	; (dee0 <usage_fault.constprop.0+0x8c>)
    de5c:	f00c fe16 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    de60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de62:	019d      	lsls	r5, r3, #6
    de64:	d503      	bpl.n	de6e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    de66:	2145      	movs	r1, #69	; 0x45
    de68:	481e      	ldr	r0, [pc, #120]	; (dee4 <usage_fault.constprop.0+0x90>)
    de6a:	f00c fe0f 	bl	1aa8c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    de6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de70:	01dc      	lsls	r4, r3, #7
    de72:	d503      	bpl.n	de7c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    de74:	2145      	movs	r1, #69	; 0x45
    de76:	481c      	ldr	r0, [pc, #112]	; (dee8 <usage_fault.constprop.0+0x94>)
    de78:	f00c fe08 	bl	1aa8c <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    de7c:	4d17      	ldr	r5, [pc, #92]	; (dedc <usage_fault.constprop.0+0x88>)
    de7e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    de80:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    de84:	d004      	beq.n	de90 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    de86:	2145      	movs	r1, #69	; 0x45
    de88:	4818      	ldr	r0, [pc, #96]	; (deec <usage_fault.constprop.0+0x98>)
    de8a:	f00c fdff 	bl	1aa8c <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    de8e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    de90:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de92:	0318      	lsls	r0, r3, #12
    de94:	d503      	bpl.n	de9e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    de96:	2145      	movs	r1, #69	; 0x45
    de98:	4815      	ldr	r0, [pc, #84]	; (def0 <usage_fault.constprop.0+0x9c>)
    de9a:	f00c fdf7 	bl	1aa8c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    de9e:	4d0f      	ldr	r5, [pc, #60]	; (dedc <usage_fault.constprop.0+0x88>)
    dea0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dea2:	0359      	lsls	r1, r3, #13
    dea4:	d503      	bpl.n	deae <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dea6:	2145      	movs	r1, #69	; 0x45
    dea8:	4812      	ldr	r0, [pc, #72]	; (def4 <usage_fault.constprop.0+0xa0>)
    deaa:	f00c fdef 	bl	1aa8c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    deae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    deb0:	039a      	lsls	r2, r3, #14
    deb2:	d503      	bpl.n	debc <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    deb4:	2145      	movs	r1, #69	; 0x45
    deb6:	4810      	ldr	r0, [pc, #64]	; (def8 <usage_fault.constprop.0+0xa4>)
    deb8:	f00c fde8 	bl	1aa8c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    debc:	4d07      	ldr	r5, [pc, #28]	; (dedc <usage_fault.constprop.0+0x88>)
    debe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dec0:	03db      	lsls	r3, r3, #15
    dec2:	d503      	bpl.n	decc <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dec4:	2145      	movs	r1, #69	; 0x45
    dec6:	480d      	ldr	r0, [pc, #52]	; (defc <usage_fault.constprop.0+0xa8>)
    dec8:	f00c fde0 	bl	1aa8c <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    decc:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    dece:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ded0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ded4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ded8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    deda:	bd38      	pop	{r3, r4, r5, pc}
    dedc:	e000ed00 	.word	0xe000ed00
    dee0:	00020831 	.word	0x00020831
    dee4:	0002084e 	.word	0x0002084e
    dee8:	00020866 	.word	0x00020866
    deec:	00020885 	.word	0x00020885
    def0:	000208b4 	.word	0x000208b4
    def4:	000208d7 	.word	0x000208d7
    def8:	00020901 	.word	0x00020901
    defc:	00020920 	.word	0x00020920

0000df00 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    df00:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    df02:	4c23      	ldr	r4, [pc, #140]	; (df90 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    df04:	4606      	mov	r6, r0
    df06:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    df08:	4822      	ldr	r0, [pc, #136]	; (df94 <bus_fault.constprop.0+0x94>)
    df0a:	2145      	movs	r1, #69	; 0x45
    df0c:	f00c fdbe 	bl	1aa8c <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    df10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df12:	04d9      	lsls	r1, r3, #19
    df14:	d503      	bpl.n	df1e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    df16:	2145      	movs	r1, #69	; 0x45
    df18:	481f      	ldr	r0, [pc, #124]	; (df98 <bus_fault.constprop.0+0x98>)
    df1a:	f00c fdb7 	bl	1aa8c <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    df1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df20:	051a      	lsls	r2, r3, #20
    df22:	d503      	bpl.n	df2c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    df24:	2145      	movs	r1, #69	; 0x45
    df26:	481d      	ldr	r0, [pc, #116]	; (df9c <bus_fault.constprop.0+0x9c>)
    df28:	f00c fdb0 	bl	1aa8c <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    df2c:	4c18      	ldr	r4, [pc, #96]	; (df90 <bus_fault.constprop.0+0x90>)
    df2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df30:	059b      	lsls	r3, r3, #22
    df32:	d510      	bpl.n	df56 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    df34:	481a      	ldr	r0, [pc, #104]	; (dfa0 <bus_fault.constprop.0+0xa0>)
    df36:	2145      	movs	r1, #69	; 0x45
    df38:	f00c fda8 	bl	1aa8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    df3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    df3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df40:	0418      	lsls	r0, r3, #16
    df42:	d508      	bpl.n	df56 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    df44:	2145      	movs	r1, #69	; 0x45
    df46:	4817      	ldr	r0, [pc, #92]	; (dfa4 <bus_fault.constprop.0+0xa4>)
    df48:	f00c fda0 	bl	1aa8c <printk>
			if (from_hard_fault) {
    df4c:	b11e      	cbz	r6, df56 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    df4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    df54:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    df56:	4c0e      	ldr	r4, [pc, #56]	; (df90 <bus_fault.constprop.0+0x90>)
    df58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df5a:	0559      	lsls	r1, r3, #21
    df5c:	d503      	bpl.n	df66 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    df5e:	2145      	movs	r1, #69	; 0x45
    df60:	4811      	ldr	r0, [pc, #68]	; (dfa8 <bus_fault.constprop.0+0xa8>)
    df62:	f00c fd93 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    df66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df68:	05da      	lsls	r2, r3, #23
    df6a:	d50b      	bpl.n	df84 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    df6c:	2145      	movs	r1, #69	; 0x45
    df6e:	480f      	ldr	r0, [pc, #60]	; (dfac <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    df70:	f00c fd8c 	bl	1aa8c <printk>
	*recoverable = memory_fault_recoverable(esf);
    df74:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    df76:	4a06      	ldr	r2, [pc, #24]	; (df90 <bus_fault.constprop.0+0x90>)
    df78:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df7a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    df7e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df80:	7028      	strb	r0, [r5, #0]
}
    df82:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    df84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df86:	049b      	lsls	r3, r3, #18
    df88:	d5f4      	bpl.n	df74 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    df8a:	2145      	movs	r1, #69	; 0x45
    df8c:	4808      	ldr	r0, [pc, #32]	; (dfb0 <bus_fault.constprop.0+0xb0>)
    df8e:	e7ef      	b.n	df70 <bus_fault.constprop.0+0x70>
    df90:	e000ed00 	.word	0xe000ed00
    df94:	00020950 	.word	0x00020950
    df98:	0002096b 	.word	0x0002096b
    df9c:	00020981 	.word	0x00020981
    dfa0:	00020999 	.word	0x00020999
    dfa4:	000209b7 	.word	0x000209b7
    dfa8:	000209d1 	.word	0x000209d1
    dfac:	000209f1 	.word	0x000209f1
    dfb0:	00020a0e 	.word	0x00020a0e

0000dfb4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dfb4:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dfb6:	4c29      	ldr	r4, [pc, #164]	; (e05c <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dfb8:	4606      	mov	r6, r0
    dfba:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dfbc:	4828      	ldr	r0, [pc, #160]	; (e060 <mem_manage_fault.constprop.0+0xac>)
    dfbe:	2145      	movs	r1, #69	; 0x45
    dfc0:	f00c fd64 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dfc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dfc6:	06d8      	lsls	r0, r3, #27
    dfc8:	d503      	bpl.n	dfd2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dfca:	2145      	movs	r1, #69	; 0x45
    dfcc:	4825      	ldr	r0, [pc, #148]	; (e064 <mem_manage_fault.constprop.0+0xb0>)
    dfce:	f00c fd5d 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dfd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dfd4:	0719      	lsls	r1, r3, #28
    dfd6:	d503      	bpl.n	dfe0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dfd8:	2145      	movs	r1, #69	; 0x45
    dfda:	4823      	ldr	r0, [pc, #140]	; (e068 <mem_manage_fault.constprop.0+0xb4>)
    dfdc:	f00c fd56 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dfe0:	4c1e      	ldr	r4, [pc, #120]	; (e05c <mem_manage_fault.constprop.0+0xa8>)
    dfe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dfe4:	079a      	lsls	r2, r3, #30
    dfe6:	d510      	bpl.n	e00a <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dfe8:	2145      	movs	r1, #69	; 0x45
    dfea:	4820      	ldr	r0, [pc, #128]	; (e06c <mem_manage_fault.constprop.0+0xb8>)
    dfec:	f00c fd4e 	bl	1aa8c <printk>
		uint32_t temp = SCB->MMFAR;
    dff0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dff4:	061b      	lsls	r3, r3, #24
    dff6:	d508      	bpl.n	e00a <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dff8:	2145      	movs	r1, #69	; 0x45
    dffa:	481d      	ldr	r0, [pc, #116]	; (e070 <mem_manage_fault.constprop.0+0xbc>)
    dffc:	f00c fd46 	bl	1aa8c <printk>
			if (from_hard_fault) {
    e000:	b11e      	cbz	r6, e00a <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    e002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e008:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    e00a:	4c14      	ldr	r4, [pc, #80]	; (e05c <mem_manage_fault.constprop.0+0xa8>)
    e00c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e00e:	07d8      	lsls	r0, r3, #31
    e010:	d503      	bpl.n	e01a <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    e012:	2145      	movs	r1, #69	; 0x45
    e014:	4817      	ldr	r0, [pc, #92]	; (e074 <mem_manage_fault.constprop.0+0xc0>)
    e016:	f00c fd39 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    e01a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e01c:	0699      	lsls	r1, r3, #26
    e01e:	d503      	bpl.n	e028 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    e020:	2145      	movs	r1, #69	; 0x45
    e022:	4815      	ldr	r0, [pc, #84]	; (e078 <mem_manage_fault.constprop.0+0xc4>)
    e024:	f00c fd32 	bl	1aa8c <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    e028:	4b0c      	ldr	r3, [pc, #48]	; (e05c <mem_manage_fault.constprop.0+0xa8>)
    e02a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e02c:	06d2      	lsls	r2, r2, #27
    e02e:	d402      	bmi.n	e036 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    e030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    e032:	079b      	lsls	r3, r3, #30
    e034:	d50a      	bpl.n	e04c <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    e036:	4911      	ldr	r1, [pc, #68]	; (e07c <mem_manage_fault.constprop.0+0xc8>)
    e038:	4811      	ldr	r0, [pc, #68]	; (e080 <mem_manage_fault.constprop.0+0xcc>)
    e03a:	f240 1247 	movw	r2, #327	; 0x147
    e03e:	f00c fd25 	bl	1aa8c <printk>
    e042:	f240 1147 	movw	r1, #327	; 0x147
    e046:	480d      	ldr	r0, [pc, #52]	; (e07c <mem_manage_fault.constprop.0+0xc8>)
    e048:	f00c ffc6 	bl	1afd8 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    e04c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    e04e:	4a03      	ldr	r2, [pc, #12]	; (e05c <mem_manage_fault.constprop.0+0xa8>)
    e050:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e052:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    e056:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e058:	7028      	strb	r0, [r5, #0]
}
    e05a:	bd70      	pop	{r4, r5, r6, pc}
    e05c:	e000ed00 	.word	0xe000ed00
    e060:	00020a42 	.word	0x00020a42
    e064:	00020a5d 	.word	0x00020a5d
    e068:	00020981 	.word	0x00020981
    e06c:	00020a95 	.word	0x00020a95
    e070:	00020ab2 	.word	0x00020ab2
    e074:	00020acd 	.word	0x00020acd
    e078:	00020a0e 	.word	0x00020a0e
    e07c:	00020af1 	.word	0x00020af1
    e080:	0001fb49 	.word	0x0001fb49

0000e084 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    e084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e088:	4b51      	ldr	r3, [pc, #324]	; (e1d0 <z_arm_fault+0x14c>)
{
    e08a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e08c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    e090:	4689      	mov	r9, r1
    e092:	4614      	mov	r4, r2
    e094:	2600      	movs	r6, #0
    e096:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e098:	f3c8 0708 	ubfx	r7, r8, #0, #9
    e09c:	f386 8811 	msr	BASEPRI, r6
    e0a0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e0a4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e0a8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e0ac:	d111      	bne.n	e0d2 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e0ae:	07d0      	lsls	r0, r2, #31
    e0b0:	d40f      	bmi.n	e0d2 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e0b2:	0651      	lsls	r1, r2, #25
    e0b4:	d403      	bmi.n	e0be <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e0b6:	0722      	lsls	r2, r4, #28
    e0b8:	d408      	bmi.n	e0cc <z_arm_fault+0x48>
			*nested_exc = true;
    e0ba:	2601      	movs	r6, #1
    e0bc:	e008      	b.n	e0d0 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e0be:	2145      	movs	r1, #69	; 0x45
    e0c0:	4844      	ldr	r0, [pc, #272]	; (e1d4 <z_arm_fault+0x150>)
    e0c2:	f00c fce3 	bl	1aa8c <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e0c6:	f014 0404 	ands.w	r4, r4, #4
    e0ca:	d000      	beq.n	e0ce <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    e0cc:	464d      	mov	r5, r9
	*nested_exc = false;
    e0ce:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    e0d0:	b95d      	cbnz	r5, e0ea <z_arm_fault+0x66>
    e0d2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    e0d6:	4940      	ldr	r1, [pc, #256]	; (e1d8 <z_arm_fault+0x154>)
    e0d8:	4840      	ldr	r0, [pc, #256]	; (e1dc <z_arm_fault+0x158>)
    e0da:	f00c fcd7 	bl	1aa8c <printk>
    e0de:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    e0e2:	483d      	ldr	r0, [pc, #244]	; (e1d8 <z_arm_fault+0x154>)
    e0e4:	f00c ff78 	bl	1afd8 <assert_post_action>
    e0e8:	2500      	movs	r5, #0
	*recoverable = false;
    e0ea:	2400      	movs	r4, #0
    e0ec:	1efb      	subs	r3, r7, #3
    e0ee:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    e0f2:	2b09      	cmp	r3, #9
    e0f4:	d85a      	bhi.n	e1ac <z_arm_fault+0x128>
    e0f6:	e8df f003 	tbb	[pc, r3]
    e0fa:	4e05      	.short	0x4e05
    e0fc:	59593252 	.word	0x59593252
    e100:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e104:	4f32      	ldr	r7, [pc, #200]	; (e1d0 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e106:	2145      	movs	r1, #69	; 0x45
    e108:	4835      	ldr	r0, [pc, #212]	; (e1e0 <z_arm_fault+0x15c>)
    e10a:	f00c fcbf 	bl	1aa8c <printk>
	*recoverable = false;
    e10e:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e112:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    e114:	f014 0402 	ands.w	r4, r4, #2
    e118:	d005      	beq.n	e126 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    e11a:	2145      	movs	r1, #69	; 0x45
    e11c:	4831      	ldr	r0, [pc, #196]	; (e1e4 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    e11e:	f00c fcb5 	bl	1aa8c <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e122:	2400      	movs	r4, #0
}
    e124:	e01e      	b.n	e164 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e128:	005b      	lsls	r3, r3, #1
    e12a:	d51b      	bpl.n	e164 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    e12c:	2145      	movs	r1, #69	; 0x45
    e12e:	482e      	ldr	r0, [pc, #184]	; (e1e8 <z_arm_fault+0x164>)
    e130:	f00c fcac 	bl	1aa8c <printk>
		if (SCB_MMFSR != 0) {
    e134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    e138:	b12b      	cbz	r3, e146 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    e13a:	2001      	movs	r0, #1
    e13c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e140:	f7ff ff38 	bl	dfb4 <mem_manage_fault.constprop.0>
    e144:	e00d      	b.n	e162 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    e146:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e14a:	b12b      	cbz	r3, e158 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    e14c:	2001      	movs	r0, #1
    e14e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e152:	f7ff fed5 	bl	df00 <bus_fault.constprop.0>
    e156:	e004      	b.n	e162 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    e158:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    e15a:	b29b      	uxth	r3, r3
    e15c:	b113      	cbz	r3, e164 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    e15e:	f7ff fe79 	bl	de54 <usage_fault.constprop.0>
    e162:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e164:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e168:	b993      	cbnz	r3, e190 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e16a:	2220      	movs	r2, #32
    e16c:	4629      	mov	r1, r5
    e16e:	a802      	add	r0, sp, #8
    e170:	f00d feb6 	bl	1bee0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e174:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e176:	b336      	cbz	r6, e1c6 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e178:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e17c:	b922      	cbnz	r2, e188 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e17e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e182:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e186:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e188:	4620      	mov	r0, r4
    e18a:	a902      	add	r1, sp, #8
    e18c:	f7ff fdcc 	bl	dd28 <z_arm_fatal_error>
}
    e190:	b00b      	add	sp, #44	; 0x2c
    e192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e196:	2000      	movs	r0, #0
    e198:	f10d 0107 	add.w	r1, sp, #7
    e19c:	e7d0      	b.n	e140 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    e19e:	2000      	movs	r0, #0
    e1a0:	f10d 0107 	add.w	r1, sp, #7
    e1a4:	e7d5      	b.n	e152 <z_arm_fault+0xce>
	PR_FAULT_INFO(
    e1a6:	2145      	movs	r1, #69	; 0x45
    e1a8:	4810      	ldr	r0, [pc, #64]	; (e1ec <z_arm_fault+0x168>)
    e1aa:	e7b8      	b.n	e11e <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    e1ac:	4910      	ldr	r1, [pc, #64]	; (e1f0 <z_arm_fault+0x16c>)
    e1ae:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e1b2:	4a10      	ldr	r2, [pc, #64]	; (e1f4 <z_arm_fault+0x170>)
    e1b4:	4810      	ldr	r0, [pc, #64]	; (e1f8 <z_arm_fault+0x174>)
    e1b6:	bf08      	it	eq
    e1b8:	460a      	moveq	r2, r1
    e1ba:	f1a7 0310 	sub.w	r3, r7, #16
    e1be:	2145      	movs	r1, #69	; 0x45
    e1c0:	f00c fc64 	bl	1aa8c <printk>
    e1c4:	e7ad      	b.n	e122 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e1c6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e1ca:	f023 0301 	bic.w	r3, r3, #1
    e1ce:	e7da      	b.n	e186 <z_arm_fault+0x102>
    e1d0:	e000ed00 	.word	0xe000ed00
    e1d4:	00020b59 	.word	0x00020b59
    e1d8:	00020af1 	.word	0x00020af1
    e1dc:	0001fb49 	.word	0x0001fb49
    e1e0:	00020b81 	.word	0x00020b81
    e1e4:	00020b9d 	.word	0x00020b9d
    e1e8:	00020bc3 	.word	0x00020bc3
    e1ec:	00020be7 	.word	0x00020be7
    e1f0:	00020b2b 	.word	0x00020b2b
    e1f4:	00020b40 	.word	0x00020b40
    e1f8:	00020c22 	.word	0x00020c22

0000e1fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e1fc:	4b04      	ldr	r3, [pc, #16]	; (e210 <z_arm_fault_init+0x14>)
    e1fe:	695a      	ldr	r2, [r3, #20]
    e200:	f042 0210 	orr.w	r2, r2, #16
    e204:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e206:	695a      	ldr	r2, [r3, #20]
    e208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e20c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e20e:	4770      	bx	lr
    e210:	e000ed00 	.word	0xe000ed00

0000e214 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e214:	4b04      	ldr	r3, [pc, #16]	; (e228 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e216:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e218:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    e21a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e21c:	d003      	beq.n	e226 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e21e:	4903      	ldr	r1, [pc, #12]	; (e22c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e224:	600a      	str	r2, [r1, #0]

0000e226 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e226:	4770      	bx	lr
	ldr r3, =_kernel
    e228:	2000a27c 	.word	0x2000a27c
	ldr r1, =_SCS_ICSR
    e22c:	e000ed04 	.word	0xe000ed04

0000e230 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e230:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e234:	4905      	ldr	r1, [pc, #20]	; (e24c <sys_arch_reboot+0x1c>)
    e236:	4b06      	ldr	r3, [pc, #24]	; (e250 <sys_arch_reboot+0x20>)
    e238:	68ca      	ldr	r2, [r1, #12]
    e23a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e23e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e240:	60cb      	str	r3, [r1, #12]
    e242:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e246:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e248:	e7fd      	b.n	e246 <sys_arch_reboot+0x16>
    e24a:	bf00      	nop
    e24c:	e000ed00 	.word	0xe000ed00
    e250:	05fa0004 	.word	0x05fa0004

0000e254 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e254:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e256:	2120      	movs	r1, #32
    e258:	4803      	ldr	r0, [pc, #12]	; (e268 <z_arm_interrupt_init+0x14>)
    e25a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e25c:	3301      	adds	r3, #1
    e25e:	2b45      	cmp	r3, #69	; 0x45
    e260:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e264:	d1f9      	bne.n	e25a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e266:	4770      	bx	lr
    e268:	e000e100 	.word	0xe000e100

0000e26c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e26c:	b508      	push	{r3, lr}
	if (_current == thread) {
    e26e:	4b0e      	ldr	r3, [pc, #56]	; (e2a8 <z_impl_k_thread_abort+0x3c>)
    e270:	689b      	ldr	r3, [r3, #8]
    e272:	4283      	cmp	r3, r0
    e274:	d107      	bne.n	e286 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e276:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e27a:	b193      	cbz	r3, e2a2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e27c:	4a0b      	ldr	r2, [pc, #44]	; (e2ac <z_impl_k_thread_abort+0x40>)
    e27e:	6853      	ldr	r3, [r2, #4]
    e280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e284:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    e286:	f00a fe2b 	bl	18ee0 <z_thread_single_abort>
	__asm__ volatile(
    e28a:	f04f 0320 	mov.w	r3, #32
    e28e:	f3ef 8011 	mrs	r0, BASEPRI
    e292:	f383 8811 	msr	BASEPRI, r3
    e296:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e29a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e29e:	f00f bec9 	b.w	1e034 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    e2a2:	f00b fc2b 	bl	19afc <z_self_abort>
    e2a6:	bf00      	nop
    e2a8:	2000a27c 	.word	0x2000a27c
    e2ac:	e000ed00 	.word	0xe000ed00

0000e2b0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e2b2:	4c09      	ldr	r4, [pc, #36]	; (e2d8 <z_arm_configure_static_mpu_regions+0x28>)
    e2b4:	4a09      	ldr	r2, [pc, #36]	; (e2dc <z_arm_configure_static_mpu_regions+0x2c>)
    e2b6:	4623      	mov	r3, r4
    e2b8:	2101      	movs	r1, #1
    e2ba:	4809      	ldr	r0, [pc, #36]	; (e2e0 <z_arm_configure_static_mpu_regions+0x30>)
    e2bc:	f000 f976 	bl	e5ac <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e2c0:	2300      	movs	r3, #0
    e2c2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e2c4:	4b07      	ldr	r3, [pc, #28]	; (e2e4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2c6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e2c8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2ca:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e2cc:	9301      	str	r3, [sp, #4]
    e2ce:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2d0:	f000 f988 	bl	e5e4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e2d4:	b004      	add	sp, #16
    e2d6:	bd10      	pop	{r4, pc}
    e2d8:	20070000 	.word	0x20070000
    e2dc:	20008000 	.word	0x20008000
    e2e0:	0001eb18 	.word	0x0001eb18
    e2e4:	200086b8 	.word	0x200086b8

0000e2e8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e2e8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2ea:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e2ec:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2ee:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e2f2:	f004 031f 	and.w	r3, r4, #31
    e2f6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e2f8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e2fa:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e2fc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e300:	4905      	ldr	r1, [pc, #20]	; (e318 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e302:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e306:	f043 0301 	orr.w	r3, r3, #1
    e30a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e30e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e312:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e316:	bd10      	pop	{r4, pc}
    e318:	e000ed00 	.word	0xe000ed00

0000e31c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e31c:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e31e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e320:	680c      	ldr	r4, [r1, #0]
{
    e322:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e324:	890a      	ldrh	r2, [r1, #8]
    e326:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e328:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e32a:	3b01      	subs	r3, #1
    e32c:	f024 041f 	bic.w	r4, r4, #31
    e330:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e332:	f002 021f 	and.w	r2, r2, #31
    e336:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e33a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e33e:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e340:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e342:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e346:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e348:	d909      	bls.n	e35e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e34a:	4602      	mov	r2, r0
    e34c:	2145      	movs	r1, #69	; 0x45
    e34e:	4806      	ldr	r0, [pc, #24]	; (e368 <mpu_configure_region+0x4c>)
    e350:	f00c fb9c 	bl	1aa8c <printk>
    e354:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e358:	4620      	mov	r0, r4
    e35a:	b005      	add	sp, #20
    e35c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e35e:	4669      	mov	r1, sp
    e360:	f7ff ffc2 	bl	e2e8 <region_init>
	return region_allocate_and_init(index,
    e364:	e7f8      	b.n	e358 <mpu_configure_region+0x3c>
    e366:	bf00      	nop
    e368:	00020c3e 	.word	0x00020c3e

0000e36c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e370:	4689      	mov	r9, r1
    e372:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e374:	4606      	mov	r6, r0
    e376:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e37a:	4d59      	ldr	r5, [pc, #356]	; (e4e0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e37c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e37e:	45c8      	cmp	r8, r9
    e380:	da27      	bge.n	e3d2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e382:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e386:	f1ba 0f00 	cmp.w	sl, #0
    e38a:	d045      	beq.n	e418 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    e38c:	f1ba 0f1f 	cmp.w	sl, #31
    e390:	d918      	bls.n	e3c4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e392:	f01a 0f1f 	tst.w	sl, #31
    e396:	d115      	bne.n	e3c4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e398:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e39c:	f01b 0f1f 	tst.w	fp, #31
    e3a0:	d110      	bne.n	e3c4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3a2:	4658      	mov	r0, fp
    e3a4:	f00d fcc5 	bl	1bd32 <arm_cmse_mpu_region_get>
    e3a8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3aa:	eb0a 000b 	add.w	r0, sl, fp
    e3ae:	3801      	subs	r0, #1
    e3b0:	f00d fcbf 	bl	1bd32 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e3b4:	4287      	cmp	r7, r0
    e3b6:	d010      	beq.n	e3da <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    e3b8:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e3bc:	463a      	mov	r2, r7
    e3be:	2145      	movs	r1, #69	; 0x45
    e3c0:	4848      	ldr	r0, [pc, #288]	; (e4e4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e3c2:	e002      	b.n	e3ca <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e3c4:	4642      	mov	r2, r8
    e3c6:	2145      	movs	r1, #69	; 0x45
    e3c8:	4847      	ldr	r0, [pc, #284]	; (e4e8 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e3ca:	f00c fb5f 	bl	1aa8c <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e3ce:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e3d2:	4620      	mov	r0, r4
    e3d4:	b005      	add	sp, #20
    e3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e3da:	f117 0f16 	cmn.w	r7, #22
    e3de:	d0ed      	beq.n	e3bc <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e3e0:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e3e2:	42bb      	cmp	r3, r7
    e3e4:	dbea      	blt.n	e3bc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e3e6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e3ea:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e3ee:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e3f2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e3f6:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e3fa:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e3fe:	e9d6 3200 	ldrd	r3, r2, [r6]
    e402:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e404:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e406:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e40a:	d11d      	bne.n	e448 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e40c:	45d3      	cmp	fp, sl
    e40e:	d107      	bne.n	e420 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e410:	4631      	mov	r1, r6
    e412:	b2f8      	uxtb	r0, r7
    e414:	f7ff ff82 	bl	e31c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e418:	f108 0801 	add.w	r8, r8, #1
    e41c:	360c      	adds	r6, #12
    e41e:	e7ae      	b.n	e37e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e420:	4631      	mov	r1, r6
	MPU->RNR = index;
    e422:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e426:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e42a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e42e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e432:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e434:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e438:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e43a:	f7ff ff6f 	bl	e31c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e43e:	f110 0f16 	cmn.w	r0, #22
    e442:	d0c4      	beq.n	e3ce <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e444:	1c44      	adds	r4, r0, #1
    e446:	e7e7      	b.n	e418 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e448:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e44a:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e44c:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e44e:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e452:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e456:	d108      	bne.n	e46a <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e458:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e45c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e45e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e462:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e464:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e468:	e7e7      	b.n	e43a <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e46a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e46e:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e472:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e474:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e478:	4631      	mov	r1, r6
    e47a:	f7ff ff4f 	bl	e31c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e47e:	f110 0f16 	cmn.w	r0, #22
    e482:	d0a4      	beq.n	e3ce <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e484:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e488:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e48c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e490:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e494:	f362 0304 	bfi	r3, r2, #0, #5
    e498:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e49c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e4a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e4a4:	085b      	lsrs	r3, r3, #1
    e4a6:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e4aa:	e9d6 3100 	ldrd	r3, r1, [r6]
    e4ae:	440b      	add	r3, r1
    e4b0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e4b2:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e4b6:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e4b8:	445b      	add	r3, fp
    e4ba:	eba3 030a 	sub.w	r3, r3, sl
    e4be:	b2c0      	uxtb	r0, r0
    e4c0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e4c4:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4c6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e4ca:	9303      	str	r3, [sp, #12]
    e4cc:	d903      	bls.n	e4d6 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e4ce:	4602      	mov	r2, r0
    e4d0:	2145      	movs	r1, #69	; 0x45
    e4d2:	4806      	ldr	r0, [pc, #24]	; (e4ec <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e4d4:	e779      	b.n	e3ca <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e4d6:	4669      	mov	r1, sp
    e4d8:	f7ff ff06 	bl	e2e8 <region_init>
    e4dc:	e7b2      	b.n	e444 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e4de:	bf00      	nop
    e4e0:	e000ed00 	.word	0xe000ed00
    e4e4:	00020c91 	.word	0x00020c91
    e4e8:	00020c69 	.word	0x00020c69
    e4ec:	00020c3e 	.word	0x00020c3e

0000e4f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e4f0:	2205      	movs	r2, #5
    e4f2:	4b04      	ldr	r3, [pc, #16]	; (e504 <arm_core_mpu_enable+0x14>)
    e4f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e4f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e4fc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e500:	4770      	bx	lr
    e502:	bf00      	nop
    e504:	e000ed00 	.word	0xe000ed00

0000e508 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e508:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e50c:	2200      	movs	r2, #0
    e50e:	4b02      	ldr	r3, [pc, #8]	; (e518 <arm_core_mpu_disable+0x10>)
    e510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e514:	4770      	bx	lr
    e516:	bf00      	nop
    e518:	e000ed00 	.word	0xe000ed00

0000e51c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e51c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e51e:	4d1d      	ldr	r5, [pc, #116]	; (e594 <arm_mpu_init+0x78>)
    e520:	682c      	ldr	r4, [r5, #0]
    e522:	2c08      	cmp	r4, #8
    e524:	d90d      	bls.n	e542 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e526:	f240 123b 	movw	r2, #315	; 0x13b
    e52a:	491b      	ldr	r1, [pc, #108]	; (e598 <arm_mpu_init+0x7c>)
    e52c:	481b      	ldr	r0, [pc, #108]	; (e59c <arm_mpu_init+0x80>)
    e52e:	f00c faad 	bl	1aa8c <printk>
    e532:	4819      	ldr	r0, [pc, #100]	; (e598 <arm_mpu_init+0x7c>)
    e534:	f240 113b 	movw	r1, #315	; 0x13b
    e538:	f00c fd4e 	bl	1afd8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e53c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e540:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e542:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e544:	f7ff ffe0 	bl	e508 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e548:	4b15      	ldr	r3, [pc, #84]	; (e5a0 <arm_mpu_init+0x84>)
    e54a:	4a16      	ldr	r2, [pc, #88]	; (e5a4 <arm_mpu_init+0x88>)
    e54c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e550:	4284      	cmp	r4, r0
    e552:	d117      	bne.n	e584 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e554:	4b14      	ldr	r3, [pc, #80]	; (e5a8 <arm_mpu_init+0x8c>)
    e556:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e558:	f7ff ffca 	bl	e4f0 <arm_core_mpu_enable>
	__ASSERT(
    e55c:	4b10      	ldr	r3, [pc, #64]	; (e5a0 <arm_mpu_init+0x84>)
    e55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e562:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e566:	2b08      	cmp	r3, #8
    e568:	d00a      	beq.n	e580 <arm_mpu_init+0x64>
    e56a:	490b      	ldr	r1, [pc, #44]	; (e598 <arm_mpu_init+0x7c>)
    e56c:	480b      	ldr	r0, [pc, #44]	; (e59c <arm_mpu_init+0x80>)
    e56e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e572:	f00c fa8b 	bl	1aa8c <printk>
    e576:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e57a:	4807      	ldr	r0, [pc, #28]	; (e598 <arm_mpu_init+0x7c>)
    e57c:	f00c fd2c 	bl	1afd8 <assert_post_action>
	return 0;
    e580:	2000      	movs	r0, #0
    e582:	e7dd      	b.n	e540 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e584:	6869      	ldr	r1, [r5, #4]
    e586:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e58a:	f7ff fead 	bl	e2e8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e58e:	3001      	adds	r0, #1
    e590:	e7de      	b.n	e550 <arm_mpu_init+0x34>
    e592:	bf00      	nop
    e594:	0001eb24 	.word	0x0001eb24
    e598:	00020cb9 	.word	0x00020cb9
    e59c:	0001fb49 	.word	0x0001fb49
    e5a0:	e000ed00 	.word	0xe000ed00
    e5a4:	0044ffaa 	.word	0x0044ffaa
    e5a8:	2000e99b 	.word	0x2000e99b

0000e5ac <arm_core_mpu_configure_static_mpu_regions>:
{
    e5ac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e5ae:	4c0a      	ldr	r4, [pc, #40]	; (e5d8 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e5b0:	7822      	ldrb	r2, [r4, #0]
    e5b2:	f7ff fedb 	bl	e36c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e5b6:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e5b8:	3016      	adds	r0, #22
    e5ba:	d10c      	bne.n	e5d6 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e5bc:	4907      	ldr	r1, [pc, #28]	; (e5dc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e5be:	4808      	ldr	r0, [pc, #32]	; (e5e0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e5c0:	f44f 7282 	mov.w	r2, #260	; 0x104
    e5c4:	f00c fa62 	bl	1aa8c <printk>
}
    e5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e5cc:	f44f 7182 	mov.w	r1, #260	; 0x104
    e5d0:	4802      	ldr	r0, [pc, #8]	; (e5dc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e5d2:	f00c bd01 	b.w	1afd8 <assert_post_action>
}
    e5d6:	bd10      	pop	{r4, pc}
    e5d8:	2000e99b 	.word	0x2000e99b
    e5dc:	00020cb9 	.word	0x00020cb9
    e5e0:	0001fb49 	.word	0x0001fb49

0000e5e4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5e8:	4d30      	ldr	r5, [pc, #192]	; (e6ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e5ea:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5ec:	4606      	mov	r6, r0
    e5ee:	f04f 0800 	mov.w	r8, #0
    e5f2:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e5f4:	4f2e      	ldr	r7, [pc, #184]	; (e6b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5f6:	45d0      	cmp	r8, sl
    e5f8:	db02      	blt.n	e600 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e5fa:	b003      	add	sp, #12
    e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e600:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e604:	f1b9 0f00 	cmp.w	r9, #0
    e608:	d04a      	beq.n	e6a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e60a:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e60c:	4608      	mov	r0, r1
    e60e:	9101      	str	r1, [sp, #4]
    e610:	f00d fb8f 	bl	1bd32 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e614:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e616:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e618:	eb09 0001 	add.w	r0, r9, r1
    e61c:	3801      	subs	r0, #1
    e61e:	f00d fb88 	bl	1bd32 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e622:	4284      	cmp	r4, r0
    e624:	f04f 0214 	mov.w	r2, #20
    e628:	4b22      	ldr	r3, [pc, #136]	; (e6b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e62a:	d013      	beq.n	e654 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e62c:	f06f 0315 	mvn.w	r3, #21
    e630:	fb02 f808 	mul.w	r8, r2, r8
    e634:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e638:	f44f 728a 	mov.w	r2, #276	; 0x114
    e63c:	491e      	ldr	r1, [pc, #120]	; (e6b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e63e:	481f      	ldr	r0, [pc, #124]	; (e6bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e640:	f00c fa24 	bl	1aa8c <printk>
    e644:	f44f 718a 	mov.w	r1, #276	; 0x114
    e648:	481b      	ldr	r0, [pc, #108]	; (e6b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e64a:	b003      	add	sp, #12
    e64c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e650:	f00c bcc2 	b.w	1afd8 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e654:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e658:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e65a:	d0ed      	beq.n	e638 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e65c:	7819      	ldrb	r1, [r3, #0]
    e65e:	42a1      	cmp	r1, r4
    e660:	ddea      	ble.n	e638 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e662:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e666:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e66a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e66e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e672:	f100 0108 	add.w	r1, r0, #8
    e676:	7b00      	ldrb	r0, [r0, #12]
    e678:	f364 0004 	bfi	r0, r4, #0, #5
    e67c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e67e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e682:	790c      	ldrb	r4, [r1, #4]
    e684:	0840      	lsrs	r0, r0, #1
    e686:	f360 1447 	bfi	r4, r0, #5, #3
    e68a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e68c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e690:	f021 011f 	bic.w	r1, r1, #31
    e694:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e696:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e69a:	f021 011f 	bic.w	r1, r1, #31
    e69e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e6a0:	f108 0801 	add.w	r8, r8, #1
    e6a4:	3514      	adds	r5, #20
    e6a6:	360c      	adds	r6, #12
    e6a8:	e7a5      	b.n	e5f6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e6aa:	bf00      	nop
    e6ac:	20009ed4 	.word	0x20009ed4
    e6b0:	e000ed00 	.word	0xe000ed00
    e6b4:	2000e99b 	.word	0x2000e99b
    e6b8:	00020cb9 	.word	0x00020cb9
    e6bc:	0001fb49 	.word	0x0001fb49

0000e6c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e6c0:	4b01      	ldr	r3, [pc, #4]	; (e6c8 <__stdout_hook_install+0x8>)
    e6c2:	6018      	str	r0, [r3, #0]
}
    e6c4:	4770      	bx	lr
    e6c6:	bf00      	nop
    e6c8:	200082a4 	.word	0x200082a4

0000e6cc <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e6cc:	2000      	movs	r0, #0
    e6ce:	4b02      	ldr	r3, [pc, #8]	; (e6d8 <remoteproc_mgr_boot+0xc>)
    e6d0:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e6d4:	4770      	bx	lr
    e6d6:	bf00      	nop
    e6d8:	40005000 	.word	0x40005000

0000e6dc <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e6dc:	4b0e      	ldr	r3, [pc, #56]	; (e718 <bt_hex_real+0x3c>)
    e6de:	2940      	cmp	r1, #64	; 0x40
    e6e0:	bf28      	it	cs
    e6e2:	2140      	movcs	r1, #64	; 0x40
{
    e6e4:	b570      	push	{r4, r5, r6, lr}
    e6e6:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e6e8:	4c0c      	ldr	r4, [pc, #48]	; (e71c <bt_hex_real+0x40>)
    e6ea:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e6ec:	42b0      	cmp	r0, r6
    e6ee:	f103 0302 	add.w	r3, r3, #2
    e6f2:	d104      	bne.n	e6fe <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e6f4:	2300      	movs	r3, #0
    e6f6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e6fa:	4807      	ldr	r0, [pc, #28]	; (e718 <bt_hex_real+0x3c>)
    e6fc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e6fe:	7802      	ldrb	r2, [r0, #0]
    e700:	0912      	lsrs	r2, r2, #4
    e702:	5ca2      	ldrb	r2, [r4, r2]
    e704:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e708:	f810 2b01 	ldrb.w	r2, [r0], #1
    e70c:	f002 020f 	and.w	r2, r2, #15
    e710:	5ca2      	ldrb	r2, [r4, r2]
    e712:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e716:	e7e9      	b.n	e6ec <bt_hex_real+0x10>
    e718:	2000e9ba 	.word	0x2000e9ba
    e71c:	00020d22 	.word	0x00020d22

0000e720 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e720:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e722:	7803      	ldrb	r3, [r0, #0]
    e724:	b08b      	sub	sp, #44	; 0x2c
    e726:	4604      	mov	r4, r0
    e728:	ad07      	add	r5, sp, #28
    e72a:	2b03      	cmp	r3, #3
    e72c:	d821      	bhi.n	e772 <bt_addr_le_str_real+0x52>
    e72e:	e8df f003 	tbb	[pc, r3]
    e732:	1a02      	.short	0x1a02
    e734:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e736:	4912      	ldr	r1, [pc, #72]	; (e780 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e738:	4628      	mov	r0, r5
    e73a:	f00d fb77 	bl	1be2c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e73e:	7863      	ldrb	r3, [r4, #1]
    e740:	211e      	movs	r1, #30
    e742:	9304      	str	r3, [sp, #16]
    e744:	78a3      	ldrb	r3, [r4, #2]
    e746:	4a0f      	ldr	r2, [pc, #60]	; (e784 <bt_addr_le_str_real+0x64>)
    e748:	9303      	str	r3, [sp, #12]
    e74a:	78e3      	ldrb	r3, [r4, #3]
    e74c:	9505      	str	r5, [sp, #20]
    e74e:	9302      	str	r3, [sp, #8]
    e750:	7923      	ldrb	r3, [r4, #4]
    e752:	480d      	ldr	r0, [pc, #52]	; (e788 <bt_addr_le_str_real+0x68>)
    e754:	9301      	str	r3, [sp, #4]
    e756:	7963      	ldrb	r3, [r4, #5]
    e758:	9300      	str	r3, [sp, #0]
    e75a:	79a3      	ldrb	r3, [r4, #6]
    e75c:	f00c f9a3 	bl	1aaa6 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e760:	4809      	ldr	r0, [pc, #36]	; (e788 <bt_addr_le_str_real+0x68>)
    e762:	b00b      	add	sp, #44	; 0x2c
    e764:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e766:	4909      	ldr	r1, [pc, #36]	; (e78c <bt_addr_le_str_real+0x6c>)
    e768:	e7e6      	b.n	e738 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e76a:	4909      	ldr	r1, [pc, #36]	; (e790 <bt_addr_le_str_real+0x70>)
    e76c:	e7e4      	b.n	e738 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e76e:	4909      	ldr	r1, [pc, #36]	; (e794 <bt_addr_le_str_real+0x74>)
    e770:	e7e2      	b.n	e738 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e772:	210a      	movs	r1, #10
    e774:	4628      	mov	r0, r5
    e776:	4a08      	ldr	r2, [pc, #32]	; (e798 <bt_addr_le_str_real+0x78>)
    e778:	f00c f995 	bl	1aaa6 <snprintk>
		break;
    e77c:	e7df      	b.n	e73e <bt_addr_le_str_real+0x1e>
    e77e:	bf00      	nop
    e780:	0001f3a8 	.word	0x0001f3a8
    e784:	0001f3d1 	.word	0x0001f3d1
    e788:	2000e99c 	.word	0x2000e99c
    e78c:	0001f3af 	.word	0x0001f3af
    e790:	0001f3b6 	.word	0x0001f3b6
    e794:	0001f3c0 	.word	0x0001f3c0
    e798:	0001f3ca 	.word	0x0001f3ca

0000e79c <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e79c:	2149      	movs	r1, #73	; 0x49
{
    e79e:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e7a0:	4809      	ldr	r0, [pc, #36]	; (e7c8 <save_id+0x2c>)
    e7a2:	f00c f973 	bl	1aa8c <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e7a6:	4909      	ldr	r1, [pc, #36]	; (e7cc <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e7a8:	4809      	ldr	r0, [pc, #36]	; (e7d0 <save_id+0x34>)
    e7aa:	79ca      	ldrb	r2, [r1, #7]
    e7ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e7b0:	f7fd fad2 	bl	bd58 <settings_save_one>
	if (err) {
    e7b4:	4602      	mov	r2, r0
    e7b6:	b128      	cbz	r0, e7c4 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e7b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e7bc:	2145      	movs	r1, #69	; 0x45
    e7be:	4805      	ldr	r0, [pc, #20]	; (e7d4 <save_id+0x38>)
    e7c0:	f00c b964 	b.w	1aa8c <printk>
}
    e7c4:	bd08      	pop	{r3, pc}
    e7c6:	bf00      	nop
    e7c8:	00020d33 	.word	0x00020d33
    e7cc:	20008000 	.word	0x20008000
    e7d0:	00020d42 	.word	0x00020d42
    e7d4:	00020d48 	.word	0x00020d48

0000e7d8 <set>:
{
    e7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e7da:	4616      	mov	r6, r2
    e7dc:	461f      	mov	r7, r3
	if (!name) {
    e7de:	4604      	mov	r4, r0
    e7e0:	b930      	cbnz	r0, e7f0 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e7e2:	2145      	movs	r1, #69	; 0x45
    e7e4:	4819      	ldr	r0, [pc, #100]	; (e84c <set+0x74>)
    e7e6:	f00c f951 	bl	1aa8c <printk>
	return -ENOENT;
    e7ea:	f06f 0401 	mvn.w	r4, #1
    e7ee:	e013      	b.n	e818 <set+0x40>
	len = settings_name_next(name, &next);
    e7f0:	a901      	add	r1, sp, #4
    e7f2:	f00c fc50 	bl	1b096 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e7f6:	4916      	ldr	r1, [pc, #88]	; (e850 <set+0x78>)
	len = settings_name_next(name, &next);
    e7f8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e7fa:	4620      	mov	r0, r4
    e7fc:	f00d fb4e 	bl	1be9c <strncmp>
    e800:	4604      	mov	r4, r0
    e802:	2800      	cmp	r0, #0
    e804:	d1f1      	bne.n	e7ea <set+0x12>
    e806:	4d13      	ldr	r5, [pc, #76]	; (e854 <set+0x7c>)
    e808:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e80c:	075b      	lsls	r3, r3, #29
    e80e:	d506      	bpl.n	e81e <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e810:	2157      	movs	r1, #87	; 0x57
    e812:	4811      	ldr	r0, [pc, #68]	; (e858 <set+0x80>)
    e814:	f00c f93a 	bl	1aa8c <printk>
}
    e818:	4620      	mov	r0, r4
    e81a:	b003      	add	sp, #12
    e81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e81e:	3d94      	subs	r5, #148	; 0x94
    e820:	2207      	movs	r2, #7
    e822:	4629      	mov	r1, r5
    e824:	4638      	mov	r0, r7
    e826:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e828:	2806      	cmp	r0, #6
    e82a:	d80a      	bhi.n	e842 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e82c:	2145      	movs	r1, #69	; 0x45
    e82e:	480b      	ldr	r0, [pc, #44]	; (e85c <set+0x84>)
    e830:	f00c f92c 	bl	1aa8c <printk>
			(void)memset(bt_dev.id_addr, 0,
    e834:	2207      	movs	r2, #7
    e836:	4621      	mov	r1, r4
    e838:	4628      	mov	r0, r5
    e83a:	f00d fb7c 	bl	1bf36 <memset>
			bt_dev.id_count = 0U;
    e83e:	71ec      	strb	r4, [r5, #7]
    e840:	e7ea      	b.n	e818 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e842:	2307      	movs	r3, #7
    e844:	fbb0 f0f3 	udiv	r0, r0, r3
    e848:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e84a:	e7e5      	b.n	e818 <set+0x40>
    e84c:	00020d68 	.word	0x00020d68
    e850:	0001f3bd 	.word	0x0001f3bd
    e854:	20008094 	.word	0x20008094
    e858:	00020d8e 	.word	0x00020d8e
    e85c:	00020db7 	.word	0x00020db7

0000e860 <bt_settings_encode_key>:
{
    e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e864:	b088      	sub	sp, #32
    e866:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e86a:	799c      	ldrb	r4, [r3, #6]
    e86c:	795d      	ldrb	r5, [r3, #5]
    e86e:	791e      	ldrb	r6, [r3, #4]
    e870:	78df      	ldrb	r7, [r3, #3]
    e872:	f893 c002 	ldrb.w	ip, [r3, #2]
    e876:	f893 e001 	ldrb.w	lr, [r3, #1]
    e87a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e87c:	f1b8 0f00 	cmp.w	r8, #0
    e880:	d00e      	beq.n	e8a0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e882:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e886:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e88a:	4613      	mov	r3, r2
    e88c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e890:	e9cd 4500 	strd	r4, r5, [sp]
    e894:	4a08      	ldr	r2, [pc, #32]	; (e8b8 <bt_settings_encode_key+0x58>)
    e896:	f00c f906 	bl	1aaa6 <snprintk>
}
    e89a:	b008      	add	sp, #32
    e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e8a0:	e9cd e305 	strd	lr, r3, [sp, #20]
    e8a4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e8a8:	4613      	mov	r3, r2
    e8aa:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e8ae:	4a03      	ldr	r2, [pc, #12]	; (e8bc <bt_settings_encode_key+0x5c>)
    e8b0:	9400      	str	r4, [sp, #0]
    e8b2:	f00c f8f8 	bl	1aaa6 <snprintk>
}
    e8b6:	e7f0      	b.n	e89a <bt_settings_encode_key+0x3a>
    e8b8:	00020de1 	.word	0x00020de1
    e8bc:	00020e05 	.word	0x00020e05

0000e8c0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e8c0:	4907      	ldr	r1, [pc, #28]	; (e8e0 <bt_settings_save_id+0x20>)
    e8c2:	e8d1 3fef 	ldaex	r3, [r1]
    e8c6:	f043 0201 	orr.w	r2, r3, #1
    e8ca:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e8ce:	2800      	cmp	r0, #0
    e8d0:	d1f7      	bne.n	e8c2 <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e8d2:	07db      	lsls	r3, r3, #31
    e8d4:	d403      	bmi.n	e8de <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e8d6:	4803      	ldr	r0, [pc, #12]	; (e8e4 <bt_settings_save_id+0x24>)
    e8d8:	3908      	subs	r1, #8
    e8da:	f00f bb8d 	b.w	1dff8 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e8de:	4770      	bx	lr
    e8e0:	200082b0 	.word	0x200082b0
    e8e4:	200098e0 	.word	0x200098e0

0000e8e8 <commit>:

static int commit(void)
{
    e8e8:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e8ea:	4c13      	ldr	r4, [pc, #76]	; (e938 <commit+0x50>)
    e8ec:	79e3      	ldrb	r3, [r4, #7]
    e8ee:	b96b      	cbnz	r3, e90c <commit+0x24>
		bt_setup_public_id_addr();
    e8f0:	f001 ffc0 	bl	10874 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e8f4:	79e3      	ldrb	r3, [r4, #7]
    e8f6:	b94b      	cbnz	r3, e90c <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e8f8:	f002 f84a 	bl	10990 <bt_setup_random_id_addr>
		if (err) {
    e8fc:	4604      	mov	r4, r0
    e8fe:	b128      	cbz	r0, e90c <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e900:	2145      	movs	r1, #69	; 0x45
    e902:	480e      	ldr	r0, [pc, #56]	; (e93c <commit+0x54>)
    e904:	f00c f8c2 	bl	1aa8c <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e908:	4620      	mov	r0, r4
    e90a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e90c:	4d0c      	ldr	r5, [pc, #48]	; (e940 <commit+0x58>)
    e90e:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e912:	079b      	lsls	r3, r3, #30
    e914:	d401      	bmi.n	e91a <commit+0x32>
		bt_finalize_init();
    e916:	f001 fc95 	bl	10244 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e91a:	e8d5 4fef 	ldaex	r4, [r5]
    e91e:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e922:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e926:	2a00      	cmp	r2, #0
    e928:	d1f7      	bne.n	e91a <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e92a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e92e:	d0eb      	beq.n	e908 <commit+0x20>
		bt_settings_save_id();
    e930:	f7ff ffc6 	bl	e8c0 <bt_settings_save_id>
	return 0;
    e934:	2400      	movs	r4, #0
    e936:	e7e7      	b.n	e908 <commit+0x20>
    e938:	20008000 	.word	0x20008000
    e93c:	00020e26 	.word	0x00020e26
    e940:	20008094 	.word	0x20008094

0000e944 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e944:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e946:	f7fd fad1 	bl	beec <settings_subsys_init>
	if (err) {
    e94a:	4604      	mov	r4, r0
    e94c:	b120      	cbz	r0, e958 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e94e:	4602      	mov	r2, r0
    e950:	2145      	movs	r1, #69	; 0x45
    e952:	4802      	ldr	r0, [pc, #8]	; (e95c <bt_settings_init+0x18>)
    e954:	f00c f89a 	bl	1aa8c <printk>
		return err;
	}

	return 0;
}
    e958:	4620      	mov	r0, r4
    e95a:	bd10      	pop	{r4, pc}
    e95c:	00020e4f 	.word	0x00020e4f

0000e960 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e960:	4603      	mov	r3, r0
    e962:	b430      	push	{r4, r5}
	switch (src->type) {
    e964:	781a      	ldrb	r2, [r3, #0]
{
    e966:	4608      	mov	r0, r1
	switch (src->type) {
    e968:	2a01      	cmp	r2, #1
    e96a:	d013      	beq.n	e994 <uuid_to_uuid128+0x34>
    e96c:	2a02      	cmp	r2, #2
    e96e:	d026      	beq.n	e9be <uuid_to_uuid128+0x5e>
    e970:	b972      	cbnz	r2, e990 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e972:	4a15      	ldr	r2, [pc, #84]	; (e9c8 <uuid_to_uuid128+0x68>)
    e974:	f102 0410 	add.w	r4, r2, #16
    e978:	f852 5b04 	ldr.w	r5, [r2], #4
    e97c:	42a2      	cmp	r2, r4
    e97e:	f841 5b04 	str.w	r5, [r1], #4
    e982:	d1f9      	bne.n	e978 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e984:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e986:	7812      	ldrb	r2, [r2, #0]
    e988:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e98a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e98c:	0a1b      	lsrs	r3, r3, #8
    e98e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e990:	bc30      	pop	{r4, r5}
    e992:	4770      	bx	lr
		*dst = uuid128_base;
    e994:	4a0c      	ldr	r2, [pc, #48]	; (e9c8 <uuid_to_uuid128+0x68>)
    e996:	f102 0410 	add.w	r4, r2, #16
    e99a:	f852 5b04 	ldr.w	r5, [r2], #4
    e99e:	42a2      	cmp	r2, r4
    e9a0:	f841 5b04 	str.w	r5, [r1], #4
    e9a4:	d1f9      	bne.n	e99a <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e9a6:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e9a8:	7812      	ldrb	r2, [r2, #0]
    e9aa:	700a      	strb	r2, [r1, #0]
    e9ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e9b0:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e9b2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e9b4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e9b6:	0a1b      	lsrs	r3, r3, #8
    e9b8:	7382      	strb	r2, [r0, #14]
    e9ba:	7403      	strb	r3, [r0, #16]
}
    e9bc:	e7e8      	b.n	e990 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e9be:	2211      	movs	r2, #17
}
    e9c0:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e9c2:	4619      	mov	r1, r3
    e9c4:	f00d ba8c 	b.w	1bee0 <memcpy>
    e9c8:	00020e88 	.word	0x00020e88

0000e9cc <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e9cc:	2801      	cmp	r0, #1
{
    e9ce:	b570      	push	{r4, r5, r6, lr}
    e9d0:	4605      	mov	r5, r0
    e9d2:	4616      	mov	r6, r2
    e9d4:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e9d6:	d010      	beq.n	e9fa <bt_buf_get_rx+0x2e>
    e9d8:	2803      	cmp	r0, #3
    e9da:	d00a      	beq.n	e9f2 <bt_buf_get_rx+0x26>
    e9dc:	2805      	cmp	r0, #5
    e9de:	d008      	beq.n	e9f2 <bt_buf_get_rx+0x26>
    e9e0:	490c      	ldr	r1, [pc, #48]	; (ea14 <bt_buf_get_rx+0x48>)
    e9e2:	480d      	ldr	r0, [pc, #52]	; (ea18 <bt_buf_get_rx+0x4c>)
    e9e4:	2233      	movs	r2, #51	; 0x33
    e9e6:	f00c f851 	bl	1aa8c <printk>
    e9ea:	2133      	movs	r1, #51	; 0x33
    e9ec:	4809      	ldr	r0, [pc, #36]	; (ea14 <bt_buf_get_rx+0x48>)
    e9ee:	f00c faf3 	bl	1afd8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e9f2:	4632      	mov	r2, r6
    e9f4:	4623      	mov	r3, r4
    e9f6:	4809      	ldr	r0, [pc, #36]	; (ea1c <bt_buf_get_rx+0x50>)
    e9f8:	e000      	b.n	e9fc <bt_buf_get_rx+0x30>
    e9fa:	4809      	ldr	r0, [pc, #36]	; (ea20 <bt_buf_get_rx+0x54>)
    e9fc:	f00e fd81 	bl	1d502 <net_buf_alloc_fixed>
    ea00:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    ea02:	b12c      	cbz	r4, ea10 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    ea04:	2101      	movs	r1, #1
    ea06:	f104 0008 	add.w	r0, r4, #8
    ea0a:	f006 ff77 	bl	158fc <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ea0e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    ea10:	4620      	mov	r0, r4
    ea12:	bd70      	pop	{r4, r5, r6, pc}
    ea14:	00020e99 	.word	0x00020e99
    ea18:	0001fb49 	.word	0x0001fb49
    ea1c:	20008580 	.word	0x20008580
    ea20:	2000865c 	.word	0x2000865c

0000ea24 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    ea24:	4602      	mov	r2, r0
    ea26:	460b      	mov	r3, r1
    ea28:	b570      	push	{r4, r5, r6, lr}
    ea2a:	f04f 0120 	mov.w	r1, #32
    ea2e:	f3ef 8511 	mrs	r5, BASEPRI
    ea32:	f381 8811 	msr	BASEPRI, r1
    ea36:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    ea3a:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    ea3c:	490b      	ldr	r1, [pc, #44]	; (ea6c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>)
    ea3e:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    ea42:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    ea46:	f385 8811 	msr	BASEPRI, r5
    ea4a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    ea4e:	b924      	cbnz	r4, ea5a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    ea50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ea54:	2001      	movs	r0, #1
    ea56:	f7ff bfb9 	b.w	e9cc <bt_buf_get_rx>
    ea5a:	2101      	movs	r1, #1
		buf->len = 0U;
    ea5c:	81a0      	strh	r0, [r4, #12]
    ea5e:	7521      	strb	r1, [r4, #20]
    ea60:	f104 0008 	add.w	r0, r4, #8
    ea64:	f006 ff4a 	bl	158fc <net_buf_simple_reserve>
}
    ea68:	4620      	mov	r0, r4
    ea6a:	bd70      	pop	{r4, r5, r6, pc}
    ea6c:	20008000 	.word	0x20008000

0000ea70 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    ea70:	b570      	push	{r4, r5, r6, lr}
    ea72:	4604      	mov	r4, r0
	switch (evt) {
    ea74:	2c0f      	cmp	r4, #15
{
    ea76:	460d      	mov	r5, r1
    ea78:	4610      	mov	r0, r2
    ea7a:	4619      	mov	r1, r3
	switch (evt) {
    ea7c:	d805      	bhi.n	ea8a <bt_buf_get_evt+0x1a>
    ea7e:	2c0d      	cmp	r4, #13
    ea80:	d912      	bls.n	eaa8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    ea82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    ea86:	f7ff bfcd 	b.w	ea24 <bt_buf_get_cmd_complete>
	switch (evt) {
    ea8a:	2c13      	cmp	r4, #19
    ea8c:	d10c      	bne.n	eaa8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    ea8e:	480b      	ldr	r0, [pc, #44]	; (eabc <bt_buf_get_evt+0x4c>)
    ea90:	f00e fd37 	bl	1d502 <net_buf_alloc_fixed>
			if (buf) {
    ea94:	4604      	mov	r4, r0
    ea96:	b128      	cbz	r0, eaa4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    ea98:	2101      	movs	r1, #1
    ea9a:	3008      	adds	r0, #8
    ea9c:	f006 ff2e 	bl	158fc <net_buf_simple_reserve>
    eaa0:	2301      	movs	r3, #1
    eaa2:	7523      	strb	r3, [r4, #20]
}
    eaa4:	4620      	mov	r0, r4
    eaa6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    eaa8:	4602      	mov	r2, r0
    eaaa:	460b      	mov	r3, r1
		if (discardable) {
    eaac:	b10d      	cbz	r5, eab2 <bt_buf_get_evt+0x42>
    eaae:	4804      	ldr	r0, [pc, #16]	; (eac0 <bt_buf_get_evt+0x50>)
    eab0:	e7ee      	b.n	ea90 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    eab2:	2001      	movs	r0, #1
}
    eab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    eab8:	f7ff bf88 	b.w	e9cc <bt_buf_get_rx>
    eabc:	20008688 	.word	0x20008688
    eac0:	200085d8 	.word	0x200085d8

0000eac4 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    eac4:	6883      	ldr	r3, [r0, #8]
    eac6:	2157      	movs	r1, #87	; 0x57
    eac8:	781a      	ldrb	r2, [r3, #0]
    eaca:	4801      	ldr	r0, [pc, #4]	; (ead0 <hci_data_buf_overflow+0xc>)
    eacc:	f00b bfde 	b.w	1aa8c <printk>
    ead0:	00020ecf 	.word	0x00020ecf

0000ead4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ead6:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    ead8:	2500      	movs	r5, #0
    eada:	4f09      	ldr	r7, [pc, #36]	; (eb00 <id_find+0x2c>)
    eadc:	79fb      	ldrb	r3, [r7, #7]
    eade:	b2ec      	uxtb	r4, r5
    eae0:	42a3      	cmp	r3, r4
    eae2:	d802      	bhi.n	eaea <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    eae4:	f06f 0401 	mvn.w	r4, #1
    eae8:	e008      	b.n	eafc <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    eaea:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    eaee:	4630      	mov	r0, r6
    eaf0:	4439      	add	r1, r7
    eaf2:	f00d faf3 	bl	1c0dc <bt_addr_le_cmp>
    eaf6:	3501      	adds	r5, #1
    eaf8:	2800      	cmp	r0, #0
    eafa:	d1ef      	bne.n	eadc <id_find+0x8>
}
    eafc:	4620      	mov	r0, r4
    eafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb00:	20008000 	.word	0x20008000

0000eb04 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    eb04:	6843      	ldr	r3, [r0, #4]
{
    eb06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eb08:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    eb0a:	0558      	lsls	r0, r3, #21
    eb0c:	d502      	bpl.n	eb14 <valid_adv_param+0x10>
		return false;
    eb0e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    eb10:	b003      	add	sp, #12
    eb12:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    eb14:	6922      	ldr	r2, [r4, #16]
    eb16:	b10a      	cbz	r2, eb1c <valid_adv_param+0x18>
    eb18:	07d9      	lsls	r1, r3, #31
    eb1a:	d5f8      	bpl.n	eb0e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    eb1c:	4d1a      	ldr	r5, [pc, #104]	; (eb88 <valid_adv_param+0x84>)
    eb1e:	7820      	ldrb	r0, [r4, #0]
    eb20:	79eb      	ldrb	r3, [r5, #7]
    eb22:	4283      	cmp	r3, r0
    eb24:	d9f3      	bls.n	eb0e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    eb26:	2300      	movs	r3, #0
    eb28:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    eb2c:	4669      	mov	r1, sp
    eb2e:	4428      	add	r0, r5
    eb30:	9300      	str	r3, [sp, #0]
    eb32:	f8cd 3003 	str.w	r3, [sp, #3]
    eb36:	f00d fad1 	bl	1c0dc <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    eb3a:	2800      	cmp	r0, #0
    eb3c:	d0e7      	beq.n	eb0e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    eb3e:	6860      	ldr	r0, [r4, #4]
    eb40:	07c2      	lsls	r2, r0, #31
    eb42:	d406      	bmi.n	eb52 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    eb44:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    eb48:	2b08      	cmp	r3, #8
    eb4a:	d802      	bhi.n	eb52 <valid_adv_param+0x4e>
    eb4c:	68a3      	ldr	r3, [r4, #8]
    eb4e:	2b9f      	cmp	r3, #159	; 0x9f
    eb50:	d9dd      	bls.n	eb0e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    eb52:	f010 0f30 	tst.w	r0, #48	; 0x30
    eb56:	d002      	beq.n	eb5e <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    eb58:	6923      	ldr	r3, [r4, #16]
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	d0d7      	beq.n	eb0e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    eb5e:	06c3      	lsls	r3, r0, #27
    eb60:	d401      	bmi.n	eb66 <valid_adv_param+0x62>
    eb62:	6923      	ldr	r3, [r4, #16]
    eb64:	b943      	cbnz	r3, eb78 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    eb66:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    eb6a:	429a      	cmp	r2, r3
    eb6c:	d8cf      	bhi.n	eb0e <valid_adv_param+0xa>
    eb6e:	2a1f      	cmp	r2, #31
    eb70:	d9cd      	bls.n	eb0e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    eb72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    eb76:	d8ca      	bhi.n	eb0e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    eb78:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    eb7c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    eb80:	bf18      	it	ne
    eb82:	2001      	movne	r0, #1
    eb84:	e7c4      	b.n	eb10 <valid_adv_param+0xc>
    eb86:	bf00      	nop
    eb88:	20008000 	.word	0x20008000

0000eb8c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb8c:	6883      	ldr	r3, [r0, #8]
{
    eb8e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb90:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    eb92:	4620      	mov	r0, r4
    eb94:	f002 fd98 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    eb98:	b930      	cbnz	r0, eba8 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eb9a:	4622      	mov	r2, r4
}
    eb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eba0:	2145      	movs	r1, #69	; 0x45
    eba2:	4803      	ldr	r0, [pc, #12]	; (ebb0 <le_data_len_change+0x24>)
    eba4:	f00b bf72 	b.w	1aa8c <printk>
}
    eba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    ebac:	f002 bd68 	b.w	11680 <bt_conn_unref>
    ebb0:	00020efc 	.word	0x00020efc

0000ebb4 <hci_disconn_complete_prio>:
{
    ebb4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    ebb6:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    ebb8:	781a      	ldrb	r2, [r3, #0]
    ebba:	b9aa      	cbnz	r2, ebe8 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ebbc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    ebc0:	4628      	mov	r0, r5
    ebc2:	f002 fd81 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    ebc6:	4604      	mov	r4, r0
    ebc8:	b930      	cbnz	r0, ebd8 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    ebca:	462a      	mov	r2, r5
}
    ebcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    ebd0:	2145      	movs	r1, #69	; 0x45
    ebd2:	4806      	ldr	r0, [pc, #24]	; (ebec <hci_disconn_complete_prio+0x38>)
    ebd4:	f00b bf5a 	b.w	1aa8c <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    ebd8:	2101      	movs	r1, #1
    ebda:	f002 fd7d 	bl	116d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    ebde:	4620      	mov	r0, r4
}
    ebe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ebe4:	f002 bd4c 	b.w	11680 <bt_conn_unref>
}
    ebe8:	bd38      	pop	{r3, r4, r5, pc}
    ebea:	bf00      	nop
    ebec:	00020f25 	.word	0x00020f25

0000ebf0 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    ebf0:	2101      	movs	r1, #1
{
    ebf2:	b508      	push	{r3, lr}
    ebf4:	3008      	adds	r0, #8
    ebf6:	f006 ffcb 	bl	15b90 <net_buf_simple_pull_mem>
}
    ebfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    ebfe:	7802      	ldrb	r2, [r0, #0]
    ec00:	2145      	movs	r1, #69	; 0x45
    ec02:	4801      	ldr	r0, [pc, #4]	; (ec08 <hci_hardware_error+0x18>)
    ec04:	f00b bf42 	b.w	1aa8c <printk>
    ec08:	00020f50 	.word	0x00020f50

0000ec0c <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    ec0c:	8981      	ldrh	r1, [r0, #12]
{
    ec0e:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    ec10:	6880      	ldr	r0, [r0, #8]
    ec12:	f7ff fd63 	bl	e6dc <bt_hex_real>
}
    ec16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    ec1a:	4602      	mov	r2, r0
    ec1c:	2157      	movs	r1, #87	; 0x57
    ec1e:	4801      	ldr	r0, [pc, #4]	; (ec24 <hci_vendor_event+0x18>)
    ec20:	f00b bf34 	b.w	1aa8c <printk>
    ec24:	00020f77 	.word	0x00020f77

0000ec28 <le_conn_update_complete>:
{
    ec28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    ec2a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    ec2c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ec30:	4630      	mov	r0, r6
    ec32:	f002 fd49 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    ec36:	4604      	mov	r4, r0
    ec38:	b938      	cbnz	r0, ec4a <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ec3a:	4632      	mov	r2, r6
    ec3c:	2145      	movs	r1, #69	; 0x45
    ec3e:	4821      	ldr	r0, [pc, #132]	; (ecc4 <le_conn_update_complete+0x9c>)
}
    ec40:	b002      	add	sp, #8
    ec42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ec46:	f00b bf21 	b.w	1aa8c <printk>
	if (!evt->status) {
    ec4a:	782b      	ldrb	r3, [r5, #0]
    ec4c:	b9cb      	cbnz	r3, ec82 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    ec4e:	792a      	ldrb	r2, [r5, #4]
    ec50:	78eb      	ldrb	r3, [r5, #3]
    ec52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec56:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    ec5a:	79aa      	ldrb	r2, [r5, #6]
    ec5c:	796b      	ldrb	r3, [r5, #5]
    ec5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec62:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ec66:	79eb      	ldrb	r3, [r5, #7]
    ec68:	7a2a      	ldrb	r2, [r5, #8]
    ec6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec6e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    ec72:	f002 fb47 	bl	11304 <notify_le_param_updated>
	bt_conn_unref(conn);
    ec76:	4620      	mov	r0, r4
}
    ec78:	b002      	add	sp, #8
    ec7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    ec7e:	f002 bcff 	b.w	11680 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    ec82:	2b1a      	cmp	r3, #26
    ec84:	d1f7      	bne.n	ec76 <le_conn_update_complete+0x4e>
    ec86:	78c3      	ldrb	r3, [r0, #3]
    ec88:	2b01      	cmp	r3, #1
    ec8a:	d1f4      	bne.n	ec76 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ec8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    ec90:	3004      	adds	r0, #4
    ec92:	f00d fa18 	bl	1c0c6 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    ec96:	0543      	lsls	r3, r0, #21
    ec98:	d4ed      	bmi.n	ec76 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    ec9a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    ec9e:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    eca0:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    eca4:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    eca8:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    ecaa:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    ecae:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    ecb2:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    ecb6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ecba:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    ecbe:	f003 fb09 	bl	122d4 <bt_l2cap_update_conn_param>
    ecc2:	e7d8      	b.n	ec76 <le_conn_update_complete+0x4e>
    ecc4:	00020efc 	.word	0x00020efc

0000ecc8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ecc8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ecca:	4c0c      	ldr	r4, [pc, #48]	; (ecfc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    eccc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ecce:	2205      	movs	r2, #5
    ecd0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ecd4:	f002 fe36 	bl	11944 <bt_conn_lookup_state_le>
		if (!conn) {
    ecd8:	b970      	cbnz	r0, ecf8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    ecda:	4b09      	ldr	r3, [pc, #36]	; (ed00 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ecdc:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    ecde:	6818      	ldr	r0, [r3, #0]
    ece0:	889a      	ldrh	r2, [r3, #4]
    ece2:	799b      	ldrb	r3, [r3, #6]
    ece4:	9000      	str	r0, [sp, #0]
    ece6:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ecea:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ecee:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    ecf0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ecf4:	f002 fe26 	bl	11944 <bt_conn_lookup_state_le>
}
    ecf8:	b002      	add	sp, #8
    ecfa:	bd10      	pop	{r4, pc}
    ecfc:	20008000 	.word	0x20008000
    ed00:	0001e7e0 	.word	0x0001e7e0

0000ed04 <handle_event>:
{
    ed04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ed06:	4605      	mov	r5, r0
    ed08:	4614      	mov	r4, r2
    ed0a:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    ed0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    ed10:	7822      	ldrb	r2, [r4, #0]
    ed12:	42aa      	cmp	r2, r5
    ed14:	d010      	beq.n	ed38 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    ed16:	3408      	adds	r4, #8
    ed18:	429c      	cmp	r4, r3
    ed1a:	d1f9      	bne.n	ed10 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    ed1c:	8984      	ldrh	r4, [r0, #12]
    ed1e:	6880      	ldr	r0, [r0, #8]
    ed20:	4621      	mov	r1, r4
    ed22:	f7ff fcdb 	bl	e6dc <bt_hex_real>
    ed26:	4623      	mov	r3, r4
    ed28:	9000      	str	r0, [sp, #0]
    ed2a:	462a      	mov	r2, r5
    ed2c:	2157      	movs	r1, #87	; 0x57
    ed2e:	480b      	ldr	r0, [pc, #44]	; (ed5c <handle_event+0x58>)
    ed30:	f00b feac 	bl	1aa8c <printk>
}
    ed34:	b003      	add	sp, #12
    ed36:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    ed38:	8982      	ldrh	r2, [r0, #12]
    ed3a:	7863      	ldrb	r3, [r4, #1]
    ed3c:	4293      	cmp	r3, r2
    ed3e:	d907      	bls.n	ed50 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ed40:	462b      	mov	r3, r5
    ed42:	2145      	movs	r1, #69	; 0x45
    ed44:	4806      	ldr	r0, [pc, #24]	; (ed60 <handle_event+0x5c>)
}
    ed46:	b003      	add	sp, #12
    ed48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ed4c:	f00b be9e 	b.w	1aa8c <printk>
		handler->handler(buf);
    ed50:	6863      	ldr	r3, [r4, #4]
}
    ed52:	b003      	add	sp, #12
    ed54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    ed58:	4718      	bx	r3
    ed5a:	bf00      	nop
    ed5c:	00020fc7 	.word	0x00020fc7
    ed60:	00020fa0 	.word	0x00020fa0

0000ed64 <hci_le_meta_event>:
{
    ed64:	b510      	push	{r4, lr}
    ed66:	2101      	movs	r1, #1
    ed68:	4604      	mov	r4, r0
    ed6a:	3008      	adds	r0, #8
    ed6c:	f006 ff10 	bl	15b90 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ed70:	4621      	mov	r1, r4
}
    ed72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ed76:	2308      	movs	r3, #8
    ed78:	4a01      	ldr	r2, [pc, #4]	; (ed80 <hci_le_meta_event+0x1c>)
    ed7a:	7800      	ldrb	r0, [r0, #0]
    ed7c:	f7ff bfc2 	b.w	ed04 <handle_event>
    ed80:	0001eb8c 	.word	0x0001eb8c

0000ed84 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ed84:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ed86:	4d18      	ldr	r5, [pc, #96]	; (ede8 <id_create.constprop.0+0x64>)
    ed88:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ed8c:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ed8e:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ed90:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ed92:	b1b1      	cbz	r1, edc2 <id_create.constprop.0+0x3e>
    ed94:	2300      	movs	r3, #0
    ed96:	4620      	mov	r0, r4
    ed98:	a902      	add	r1, sp, #8
    ed9a:	9302      	str	r3, [sp, #8]
    ed9c:	f8cd 300b 	str.w	r3, [sp, #11]
    eda0:	f00d f99c 	bl	1c0dc <bt_addr_le_cmp>
    eda4:	b168      	cbz	r0, edc2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    eda6:	4621      	mov	r1, r4
    eda8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    edaa:	f00d f989 	bl	1c0c0 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    edae:	480f      	ldr	r0, [pc, #60]	; (edec <id_create.constprop.0+0x68>)
    edb0:	f00d f983 	bl	1c0ba <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    edb4:	0783      	lsls	r3, r0, #30
    edb6:	d515      	bpl.n	ede4 <id_create.constprop.0+0x60>
}
    edb8:	b005      	add	sp, #20
    edba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    edbe:	f7ff bd7f 	b.w	e8c0 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    edc2:	4668      	mov	r0, sp
    edc4:	f00d f94a 	bl	1c05c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    edc8:	4668      	mov	r0, sp
    edca:	f7ff fe83 	bl	ead4 <id_find>
    edce:	2800      	cmp	r0, #0
    edd0:	daf7      	bge.n	edc2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    edd2:	4669      	mov	r1, sp
    edd4:	4628      	mov	r0, r5
    edd6:	f00d f973 	bl	1c0c0 <bt_addr_le_copy>
		if (addr) {
    edda:	2c00      	cmp	r4, #0
    eddc:	d0e7      	beq.n	edae <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    edde:	4629      	mov	r1, r5
    ede0:	4620      	mov	r0, r4
    ede2:	e7e2      	b.n	edaa <id_create.constprop.0+0x26>
}
    ede4:	b005      	add	sp, #20
    ede6:	bd30      	pop	{r4, r5, pc}
    ede8:	20008000 	.word	0x20008000
    edec:	20008094 	.word	0x20008094

0000edf0 <hci_rx_thread>:
{
    edf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    edf4:	4f40      	ldr	r7, [pc, #256]	; (eef8 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    edf6:	f8df 8104 	ldr.w	r8, [pc, #260]	; eefc <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    edfa:	4e41      	ldr	r6, [pc, #260]	; (ef00 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    edfc:	f04f 32ff 	mov.w	r2, #4294967295
    ee00:	f04f 33ff 	mov.w	r3, #4294967295
    ee04:	4638      	mov	r0, r7
    ee06:	f006 fd49 	bl	1589c <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ee0a:	7d02      	ldrb	r2, [r0, #20]
    ee0c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    ee0e:	2a01      	cmp	r2, #1
    ee10:	d041      	beq.n	ee96 <hci_rx_thread+0xa6>
    ee12:	2a03      	cmp	r2, #3
    ee14:	d16c      	bne.n	eef0 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ee16:	8983      	ldrh	r3, [r0, #12]
    ee18:	2b03      	cmp	r3, #3
    ee1a:	d80b      	bhi.n	ee34 <hci_rx_thread+0x44>
    ee1c:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ee20:	4631      	mov	r1, r6
    ee22:	4838      	ldr	r0, [pc, #224]	; (ef04 <hci_rx_thread+0x114>)
    ee24:	f00b fe32 	bl	1aa8c <printk>
    ee28:	4040      	eors	r0, r0
    ee2a:	f380 8811 	msr	BASEPRI, r0
    ee2e:	f04f 0003 	mov.w	r0, #3
    ee32:	df02      	svc	2
    ee34:	2104      	movs	r1, #4
    ee36:	f104 0008 	add.w	r0, r4, #8
    ee3a:	f006 fea9 	bl	15b90 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ee3e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ee40:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ee42:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ee46:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ee48:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ee4a:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ee4e:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ee50:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ee52:	d007      	beq.n	ee64 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ee54:	2145      	movs	r1, #69	; 0x45
    ee56:	482c      	ldr	r0, [pc, #176]	; (ef08 <hci_rx_thread+0x118>)
    ee58:	f00b fe18 	bl	1aa8c <printk>
			net_buf_unref(buf);
    ee5c:	4620      	mov	r0, r4
    ee5e:	f006 fd9f 	bl	159a0 <net_buf_unref>
			break;
    ee62:	e015      	b.n	ee90 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ee64:	f002 fc30 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    ee68:	4605      	mov	r5, r0
    ee6a:	b928      	cbnz	r0, ee78 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ee6c:	2145      	movs	r1, #69	; 0x45
    ee6e:	8ae2      	ldrh	r2, [r4, #22]
    ee70:	4826      	ldr	r0, [pc, #152]	; (ef0c <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ee72:	f00b fe0b 	bl	1aa8c <printk>
    ee76:	e7f1      	b.n	ee5c <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ee78:	f003 f85a 	bl	11f30 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ee7c:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ee7e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ee80:	ea4f 3219 	mov.w	r2, r9, lsr #12
    ee84:	4628      	mov	r0, r5
    ee86:	f002 fad5 	bl	11434 <bt_conn_recv>
	bt_conn_unref(conn);
    ee8a:	4628      	mov	r0, r5
    ee8c:	f002 fbf8 	bl	11680 <bt_conn_unref>
	z_impl_k_yield();
    ee90:	f00a fae2 	bl	19458 <z_impl_k_yield>
	while (1) {
    ee94:	e7b2      	b.n	edfc <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ee96:	8983      	ldrh	r3, [r0, #12]
    ee98:	2b01      	cmp	r3, #1
    ee9a:	d80b      	bhi.n	eeb4 <hci_rx_thread+0xc4>
    ee9c:	f241 32fb 	movw	r2, #5115	; 0x13fb
    eea0:	4631      	mov	r1, r6
    eea2:	4818      	ldr	r0, [pc, #96]	; (ef04 <hci_rx_thread+0x114>)
    eea4:	f00b fdf2 	bl	1aa8c <printk>
    eea8:	4040      	eors	r0, r0
    eeaa:	f380 8811 	msr	BASEPRI, r0
    eeae:	f04f 0003 	mov.w	r0, #3
    eeb2:	df02      	svc	2
    eeb4:	2102      	movs	r1, #2
    eeb6:	f104 0008 	add.w	r0, r4, #8
    eeba:	f006 fe69 	bl	15b90 <net_buf_simple_pull_mem>
    eebe:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    eec0:	7800      	ldrb	r0, [r0, #0]
    eec2:	f00d f8d9 	bl	1c078 <bt_hci_evt_get_flags>
    eec6:	0783      	lsls	r3, r0, #30
    eec8:	d40b      	bmi.n	eee2 <hci_rx_thread+0xf2>
    eeca:	f241 32ff 	movw	r2, #5119	; 0x13ff
    eece:	4631      	mov	r1, r6
    eed0:	480c      	ldr	r0, [pc, #48]	; (ef04 <hci_rx_thread+0x114>)
    eed2:	f00b fddb 	bl	1aa8c <printk>
    eed6:	4040      	eors	r0, r0
    eed8:	f380 8811 	msr	BASEPRI, r0
    eedc:	f04f 0003 	mov.w	r0, #3
    eee0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    eee2:	2304      	movs	r3, #4
    eee4:	4642      	mov	r2, r8
    eee6:	4621      	mov	r1, r4
    eee8:	7828      	ldrb	r0, [r5, #0]
    eeea:	f7ff ff0b 	bl	ed04 <handle_event>
	net_buf_unref(buf);
    eeee:	e7b5      	b.n	ee5c <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eef0:	2145      	movs	r1, #69	; 0x45
    eef2:	4807      	ldr	r0, [pc, #28]	; (ef10 <hci_rx_thread+0x120>)
    eef4:	e7bd      	b.n	ee72 <hci_rx_thread+0x82>
    eef6:	bf00      	nop
    eef8:	200080fc 	.word	0x200080fc
    eefc:	0001ebdc 	.word	0x0001ebdc
    ef00:	00020fee 	.word	0x00020fee
    ef04:	0001fb49 	.word	0x0001fb49
    ef08:	00021022 	.word	0x00021022
    ef0c:	0002104b 	.word	0x0002104b
    ef10:	00021072 	.word	0x00021072

0000ef14 <hci_cmd_done>:
{
    ef14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ef18:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ef1a:	7990      	ldrb	r0, [r2, #6]
{
    ef1c:	460f      	mov	r7, r1
    ef1e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ef20:	f006 fbbe 	bl	156a0 <net_buf_pool_get>
    ef24:	4d2a      	ldr	r5, [pc, #168]	; (efd0 <hci_cmd_done+0xbc>)
    ef26:	4285      	cmp	r5, r0
    ef28:	d00e      	beq.n	ef48 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ef2a:	79a4      	ldrb	r4, [r4, #6]
    ef2c:	4620      	mov	r0, r4
    ef2e:	f006 fbb7 	bl	156a0 <net_buf_pool_get>
    ef32:	4623      	mov	r3, r4
    ef34:	e9cd 0500 	strd	r0, r5, [sp]
    ef38:	4632      	mov	r2, r6
    ef3a:	2157      	movs	r1, #87	; 0x57
    ef3c:	4825      	ldr	r0, [pc, #148]	; (efd4 <hci_cmd_done+0xc0>)
    ef3e:	f00b fda5 	bl	1aa8c <printk>
}
    ef42:	b002      	add	sp, #8
    ef44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ef48:	4620      	mov	r0, r4
    ef4a:	f006 fbb1 	bl	156b0 <net_buf_id>
    ef4e:	f04f 080c 	mov.w	r8, #12
    ef52:	4d21      	ldr	r5, [pc, #132]	; (efd8 <hci_cmd_done+0xc4>)
    ef54:	fb08 5000 	mla	r0, r8, r0, r5
    ef58:	8843      	ldrh	r3, [r0, #2]
    ef5a:	42b3      	cmp	r3, r6
    ef5c:	d00a      	beq.n	ef74 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ef5e:	4620      	mov	r0, r4
    ef60:	f006 fba6 	bl	156b0 <net_buf_id>
    ef64:	fb08 5000 	mla	r0, r8, r0, r5
    ef68:	4632      	mov	r2, r6
    ef6a:	8843      	ldrh	r3, [r0, #2]
    ef6c:	2157      	movs	r1, #87	; 0x57
    ef6e:	481b      	ldr	r0, [pc, #108]	; (efdc <hci_cmd_done+0xc8>)
    ef70:	f00b fd8c 	bl	1aa8c <printk>
	if (cmd(buf)->state && !status) {
    ef74:	4620      	mov	r0, r4
    ef76:	f006 fb9b 	bl	156b0 <net_buf_id>
    ef7a:	260c      	movs	r6, #12
    ef7c:	fb06 5000 	mla	r0, r6, r0, r5
    ef80:	6843      	ldr	r3, [r0, #4]
    ef82:	b15b      	cbz	r3, ef9c <hci_cmd_done+0x88>
    ef84:	b957      	cbnz	r7, ef9c <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ef86:	4620      	mov	r0, r4
    ef88:	f006 fb92 	bl	156b0 <net_buf_id>
    ef8c:	fb06 5000 	mla	r0, r6, r0, r5
    ef90:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ef92:	7a1a      	ldrb	r2, [r3, #8]
    ef94:	e9d3 0100 	ldrd	r0, r1, [r3]
    ef98:	f00d f8ae 	bl	1c0f8 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    ef9c:	4620      	mov	r0, r4
    ef9e:	f006 fb87 	bl	156b0 <net_buf_id>
    efa2:	260c      	movs	r6, #12
    efa4:	fb06 5000 	mla	r0, r6, r0, r5
    efa8:	6883      	ldr	r3, [r0, #8]
    efaa:	2b00      	cmp	r3, #0
    efac:	d0c9      	beq.n	ef42 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    efae:	4620      	mov	r0, r4
    efb0:	f006 fb7e 	bl	156b0 <net_buf_id>
    efb4:	4370      	muls	r0, r6
    efb6:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    efb8:	4620      	mov	r0, r4
    efba:	f006 fb79 	bl	156b0 <net_buf_id>
    efbe:	fb06 5500 	mla	r5, r6, r0, r5
    efc2:	68a8      	ldr	r0, [r5, #8]
}
    efc4:	b002      	add	sp, #8
    efc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    efca:	f00a bb87 	b.w	196dc <z_impl_k_sem_give>
    efce:	bf00      	nop
    efd0:	20008630 	.word	0x20008630
    efd4:	0002108b 	.word	0x0002108b
    efd8:	20009ee8 	.word	0x20009ee8
    efdc:	000210c5 	.word	0x000210c5

0000efe0 <hci_cmd_status>:
{
    efe0:	b538      	push	{r3, r4, r5, lr}
    efe2:	2104      	movs	r1, #4
    efe4:	4604      	mov	r4, r0
    efe6:	3008      	adds	r0, #8
    efe8:	f006 fdd2 	bl	15b90 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    efec:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    efee:	7801      	ldrb	r1, [r0, #0]
    eff0:	4622      	mov	r2, r4
    eff2:	8840      	ldrh	r0, [r0, #2]
    eff4:	f7ff ff8e 	bl	ef14 <hci_cmd_done>
	if (ncmd) {
    eff8:	b125      	cbz	r5, f004 <hci_cmd_status+0x24>
}
    effa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    effe:	4802      	ldr	r0, [pc, #8]	; (f008 <hci_cmd_status+0x28>)
    f000:	f00a bb6c 	b.w	196dc <z_impl_k_sem_give>
    f004:	bd38      	pop	{r3, r4, r5, pc}
    f006:	bf00      	nop
    f008:	200080e0 	.word	0x200080e0

0000f00c <hci_cmd_complete>:
{
    f00c:	b538      	push	{r3, r4, r5, lr}
    f00e:	2103      	movs	r1, #3
    f010:	4604      	mov	r4, r0
    f012:	3008      	adds	r0, #8
    f014:	f006 fdbc 	bl	15b90 <net_buf_simple_pull_mem>
	status = buf->data[0];
    f018:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    f01a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    f01c:	4622      	mov	r2, r4
    f01e:	7819      	ldrb	r1, [r3, #0]
    f020:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    f024:	f7ff ff76 	bl	ef14 <hci_cmd_done>
	if (ncmd) {
    f028:	b125      	cbz	r5, f034 <hci_cmd_complete+0x28>
}
    f02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f02e:	4802      	ldr	r0, [pc, #8]	; (f038 <hci_cmd_complete+0x2c>)
    f030:	f00a bb54 	b.w	196dc <z_impl_k_sem_give>
    f034:	bd38      	pop	{r3, r4, r5, pc}
    f036:	bf00      	nop
    f038:	200080e0 	.word	0x200080e0

0000f03c <hci_num_completed_packets>:
{
    f03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    f040:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    f042:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    f044:	6887      	ldr	r7, [r0, #8]
    f046:	f8df 90dc 	ldr.w	r9, [pc, #220]	; f124 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    f04a:	783b      	ldrb	r3, [r7, #0]
    f04c:	429d      	cmp	r5, r3
    f04e:	db01      	blt.n	f054 <hci_num_completed_packets+0x18>
}
    f050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    f054:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    f058:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    f05c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    f060:	4650      	mov	r0, sl
    f062:	f002 fb31 	bl	116c8 <bt_conn_lookup_handle>
		if (!conn) {
    f066:	4604      	mov	r4, r0
    f068:	b1d0      	cbz	r0, f0a0 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f06a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    f06e:	b37e      	cbz	r6, f0d0 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    f070:	f04f 0320 	mov.w	r3, #32
    f074:	f3ef 8211 	mrs	r2, BASEPRI
    f078:	f383 8811 	msr	BASEPRI, r3
    f07c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    f080:	69e3      	ldr	r3, [r4, #28]
    f082:	b1a3      	cbz	r3, f0ae <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    f084:	3b01      	subs	r3, #1
    f086:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    f088:	f382 8811 	msr	BASEPRI, r2
    f08c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    f090:	4620      	mov	r0, r4
    f092:	f002 f933 	bl	112fc <bt_conn_get_pkts>
    f096:	3e01      	subs	r6, #1
    f098:	f00a fb20 	bl	196dc <z_impl_k_sem_give>
    f09c:	b2b6      	uxth	r6, r6
    f09e:	e7e6      	b.n	f06e <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    f0a0:	4652      	mov	r2, sl
    f0a2:	2145      	movs	r1, #69	; 0x45
    f0a4:	4820      	ldr	r0, [pc, #128]	; (f128 <hci_num_completed_packets+0xec>)
    f0a6:	f00b fcf1 	bl	1aa8c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    f0aa:	3501      	adds	r5, #1
    f0ac:	e7cd      	b.n	f04a <hci_num_completed_packets+0xe>
	return list->head;
    f0ae:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    f0b0:	b12b      	cbz	r3, f0be <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0b2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    f0b4:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0b6:	428b      	cmp	r3, r1
	list->head = node;
    f0b8:	6160      	str	r0, [r4, #20]
	list->tail = node;
    f0ba:	bf08      	it	eq
    f0bc:	61a0      	streq	r0, [r4, #24]
    f0be:	f382 8811 	msr	BASEPRI, r2
    f0c2:	f3bf 8f6f 	isb	sy
			if (!node) {
    f0c6:	b93b      	cbnz	r3, f0d8 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    f0c8:	2145      	movs	r1, #69	; 0x45
    f0ca:	4818      	ldr	r0, [pc, #96]	; (f12c <hci_num_completed_packets+0xf0>)
    f0cc:	f00b fcde 	bl	1aa8c <printk>
		bt_conn_unref(conn);
    f0d0:	4620      	mov	r0, r4
    f0d2:	f002 fad5 	bl	11680 <bt_conn_unref>
    f0d6:	e7e8      	b.n	f0aa <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    f0d8:	f04f 0220 	mov.w	r2, #32
    f0dc:	f3ef 8111 	mrs	r1, BASEPRI
    f0e0:	f382 8811 	msr	BASEPRI, r2
    f0e4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    f0e8:	68da      	ldr	r2, [r3, #12]
    f0ea:	61e2      	str	r2, [r4, #28]
	return list->tail;
    f0ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    f0ee:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    f0f2:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    f0f6:	b98a      	cbnz	r2, f11c <hci_num_completed_packets+0xe0>
	list->head = node;
    f0f8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    f0fc:	f381 8811 	msr	BASEPRI, r1
    f100:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f104:	2101      	movs	r1, #1
    f106:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f10a:	f00c ffdc 	bl	1c0c6 <atomic_or>
    f10e:	07c3      	lsls	r3, r0, #31
    f110:	d4be      	bmi.n	f090 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    f112:	4651      	mov	r1, sl
    f114:	4648      	mov	r0, r9
    f116:	f00e ff6f 	bl	1dff8 <k_queue_append>
    f11a:	e7b9      	b.n	f090 <hci_num_completed_packets+0x54>
	parent->next = child;
    f11c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f11e:	6263      	str	r3, [r4, #36]	; 0x24
}
    f120:	e7ec      	b.n	f0fc <hci_num_completed_packets+0xc0>
    f122:	bf00      	nop
    f124:	200098e0 	.word	0x200098e0
    f128:	000210fd 	.word	0x000210fd
    f12c:	0002111e 	.word	0x0002111e

0000f130 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    f130:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    f132:	7803      	ldrb	r3, [r0, #0]
{
    f134:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    f136:	f88d 3004 	strb.w	r3, [sp, #4]
    f13a:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    f13c:	4c24      	ldr	r4, [pc, #144]	; (f1d0 <le_adv_start_add_conn+0xa0>)
{
    f13e:	4605      	mov	r5, r0
    f140:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    f142:	f104 0018 	add.w	r0, r4, #24
    f146:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    f148:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    f14c:	f00c ffe5 	bl	1c11a <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    f150:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f154:	bb93      	cbnz	r3, f1bc <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    f156:	462e      	mov	r6, r5
    f158:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f15c:	a902      	add	r1, sp, #8
    f15e:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    f160:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f164:	9302      	str	r3, [sp, #8]
    f166:	f8cd 300b 	str.w	r3, [sp, #11]
    f16a:	f00c ffb7 	bl	1c0dc <bt_addr_le_cmp>
    f16e:	782a      	ldrb	r2, [r5, #0]
    f170:	4604      	mov	r4, r0
    f172:	b9a8      	cbnz	r0, f1a0 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    f174:	4b17      	ldr	r3, [pc, #92]	; (f1d4 <le_adv_start_add_conn+0xa4>)
    f176:	6818      	ldr	r0, [r3, #0]
    f178:	8899      	ldrh	r1, [r3, #4]
    f17a:	799b      	ldrb	r3, [r3, #6]
    f17c:	9004      	str	r0, [sp, #16]
    f17e:	f8ad 1014 	strh.w	r1, [sp, #20]
    f182:	4610      	mov	r0, r2
    f184:	a904      	add	r1, sp, #16
    f186:	f88d 3016 	strb.w	r3, [sp, #22]
    f18a:	f002 fa4d 	bl	11628 <bt_conn_add_le>
		if (!conn) {
    f18e:	4605      	mov	r5, r0
    f190:	b1d0      	cbz	r0, f1c8 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    f192:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    f194:	f002 faa0 	bl	116d8 <bt_conn_set_state>
	*out_conn = conn;
    f198:	603d      	str	r5, [r7, #0]
	return 0;
}
    f19a:	4620      	mov	r0, r4
    f19c:	b007      	add	sp, #28
    f19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    f1a0:	4631      	mov	r1, r6
    f1a2:	4610      	mov	r0, r2
    f1a4:	f002 fbb2 	bl	1190c <bt_conn_exists_le>
    f1a8:	4604      	mov	r4, r0
    f1aa:	b950      	cbnz	r0, f1c2 <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    f1ac:	7828      	ldrb	r0, [r5, #0]
    f1ae:	4631      	mov	r1, r6
    f1b0:	f002 fa3a 	bl	11628 <bt_conn_add_le>
	if (!conn) {
    f1b4:	4605      	mov	r5, r0
    f1b6:	b138      	cbz	r0, f1c8 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    f1b8:	2105      	movs	r1, #5
    f1ba:	e7eb      	b.n	f194 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    f1bc:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f1c0:	e7eb      	b.n	f19a <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    f1c2:	f06f 0415 	mvn.w	r4, #21
    f1c6:	e7e8      	b.n	f19a <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    f1c8:	f06f 040b 	mvn.w	r4, #11
    f1cc:	e7e5      	b.n	f19a <le_adv_start_add_conn+0x6a>
    f1ce:	bf00      	nop
    f1d0:	20008000 	.word	0x20008000
    f1d4:	0001e7e0 	.word	0x0001e7e0

0000f1d8 <bt_hci_cmd_create>:
{
    f1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    f1dc:	f04f 32ff 	mov.w	r2, #4294967295
    f1e0:	4606      	mov	r6, r0
    f1e2:	f04f 33ff 	mov.w	r3, #4294967295
    f1e6:	481d      	ldr	r0, [pc, #116]	; (f25c <bt_hci_cmd_create+0x84>)
    f1e8:	460f      	mov	r7, r1
    f1ea:	f00e f98a 	bl	1d502 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    f1ee:	4604      	mov	r4, r0
    f1f0:	b950      	cbnz	r0, f208 <bt_hci_cmd_create+0x30>
    f1f2:	491b      	ldr	r1, [pc, #108]	; (f260 <bt_hci_cmd_create+0x88>)
    f1f4:	481b      	ldr	r0, [pc, #108]	; (f264 <bt_hci_cmd_create+0x8c>)
    f1f6:	f44f 7281 	mov.w	r2, #258	; 0x102
    f1fa:	f00b fc47 	bl	1aa8c <printk>
    f1fe:	f44f 7181 	mov.w	r1, #258	; 0x102
    f202:	4817      	ldr	r0, [pc, #92]	; (f260 <bt_hci_cmd_create+0x88>)
    f204:	f00b fee8 	bl	1afd8 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f208:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    f20c:	f104 0a08 	add.w	sl, r4, #8
    f210:	2101      	movs	r1, #1
    f212:	4650      	mov	r0, sl
    f214:	f006 fb72 	bl	158fc <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    f218:	4620      	mov	r0, r4
    f21a:	f884 8014 	strb.w	r8, [r4, #20]
    f21e:	f006 fa47 	bl	156b0 <net_buf_id>
    f222:	f04f 090c 	mov.w	r9, #12
    f226:	4d10      	ldr	r5, [pc, #64]	; (f268 <bt_hci_cmd_create+0x90>)
    f228:	fb09 5000 	mla	r0, r9, r0, r5
    f22c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f22e:	4620      	mov	r0, r4
    f230:	f006 fa3e 	bl	156b0 <net_buf_id>
    f234:	fb09 5000 	mla	r0, r9, r0, r5
    f238:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    f23c:	4620      	mov	r0, r4
    f23e:	f006 fa37 	bl	156b0 <net_buf_id>
    f242:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    f246:	2103      	movs	r1, #3
    f248:	4650      	mov	r0, sl
    f24a:	f8c5 8004 	str.w	r8, [r5, #4]
    f24e:	f006 fcbd 	bl	15bcc <net_buf_simple_add>
	hdr->param_len = param_len;
    f252:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    f254:	8006      	strh	r6, [r0, #0]
}
    f256:	4620      	mov	r0, r4
    f258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f25c:	20008630 	.word	0x20008630
    f260:	00020fee 	.word	0x00020fee
    f264:	0001fb49 	.word	0x0001fb49
    f268:	20009ee8 	.word	0x20009ee8

0000f26c <bt_hci_cmd_send_sync>:
{
    f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f26e:	4607      	mov	r7, r0
    f270:	4615      	mov	r5, r2
	if (!buf) {
    f272:	460c      	mov	r4, r1
{
    f274:	b087      	sub	sp, #28
	if (!buf) {
    f276:	b921      	cbnz	r1, f282 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    f278:	f7ff ffae 	bl	f1d8 <bt_hci_cmd_create>
		if (!buf) {
    f27c:	4604      	mov	r4, r0
    f27e:	2800      	cmp	r0, #0
    f280:	d048      	beq.n	f314 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f282:	2201      	movs	r2, #1
    f284:	2100      	movs	r1, #0
    f286:	4668      	mov	r0, sp
    f288:	f00e ff0e 	bl	1e0a8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f28c:	4620      	mov	r0, r4
    f28e:	f006 fa0f 	bl	156b0 <net_buf_id>
    f292:	230c      	movs	r3, #12
    f294:	4e21      	ldr	r6, [pc, #132]	; (f31c <bt_hci_cmd_send_sync+0xb0>)
    f296:	fb03 6000 	mla	r0, r3, r0, r6
    f29a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    f29e:	4620      	mov	r0, r4
    f2a0:	f006 fbc2 	bl	15a28 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f2a4:	4621      	mov	r1, r4
    f2a6:	481e      	ldr	r0, [pc, #120]	; (f320 <bt_hci_cmd_send_sync+0xb4>)
    f2a8:	f006 fb4c 	bl	15944 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f2ac:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f2b0:	2300      	movs	r3, #0
    f2b2:	4668      	mov	r0, sp
    f2b4:	f00a fa4e 	bl	19754 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f2b8:	b158      	cbz	r0, f2d2 <bt_hci_cmd_send_sync+0x66>
    f2ba:	f240 124d 	movw	r2, #333	; 0x14d
    f2be:	4919      	ldr	r1, [pc, #100]	; (f324 <bt_hci_cmd_send_sync+0xb8>)
    f2c0:	4819      	ldr	r0, [pc, #100]	; (f328 <bt_hci_cmd_send_sync+0xbc>)
    f2c2:	f00b fbe3 	bl	1aa8c <printk>
    f2c6:	4040      	eors	r0, r0
    f2c8:	f380 8811 	msr	BASEPRI, r0
    f2cc:	f04f 0003 	mov.w	r0, #3
    f2d0:	df02      	svc	2
	status = cmd(buf)->status;
    f2d2:	4620      	mov	r0, r4
    f2d4:	f006 f9ec 	bl	156b0 <net_buf_id>
    f2d8:	230c      	movs	r3, #12
    f2da:	4358      	muls	r0, r3
    f2dc:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    f2de:	b186      	cbz	r6, f302 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    f2e0:	4633      	mov	r3, r6
    f2e2:	463a      	mov	r2, r7
    f2e4:	2157      	movs	r1, #87	; 0x57
    f2e6:	4811      	ldr	r0, [pc, #68]	; (f32c <bt_hci_cmd_send_sync+0xc0>)
    f2e8:	f00b fbd0 	bl	1aa8c <printk>
		net_buf_unref(buf);
    f2ec:	4620      	mov	r0, r4
    f2ee:	f006 fb57 	bl	159a0 <net_buf_unref>
			return -EIO;
    f2f2:	2e09      	cmp	r6, #9
    f2f4:	bf0c      	ite	eq
    f2f6:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    f2fa:	f06f 0004 	mvnne.w	r0, #4
}
    f2fe:	b007      	add	sp, #28
    f300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    f302:	b115      	cbz	r5, f30a <bt_hci_cmd_send_sync+0x9e>
	return 0;
    f304:	4630      	mov	r0, r6
		*rsp = buf;
    f306:	602c      	str	r4, [r5, #0]
    f308:	e7f9      	b.n	f2fe <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    f30a:	4620      	mov	r0, r4
    f30c:	f006 fb48 	bl	159a0 <net_buf_unref>
	return 0;
    f310:	4628      	mov	r0, r5
    f312:	e7f4      	b.n	f2fe <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    f314:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f318:	e7f1      	b.n	f2fe <bt_hci_cmd_send_sync+0x92>
    f31a:	bf00      	nop
    f31c:	20009ee8 	.word	0x20009ee8
    f320:	20008118 	.word	0x20008118
    f324:	00020fee 	.word	0x00020fee
    f328:	0001fb49 	.word	0x0001fb49
    f32c:	0002113a 	.word	0x0002113a

0000f330 <hci_le_read_max_data_len>:
{
    f330:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f332:	4606      	mov	r6, r0
    f334:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f336:	f242 002f 	movw	r0, #8239	; 0x202f
    f33a:	2100      	movs	r1, #0
    f33c:	aa01      	add	r2, sp, #4
    f33e:	f7ff ff95 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
    f342:	4604      	mov	r4, r0
    f344:	b130      	cbz	r0, f354 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    f346:	2145      	movs	r1, #69	; 0x45
    f348:	4808      	ldr	r0, [pc, #32]	; (f36c <hci_le_read_max_data_len+0x3c>)
    f34a:	f00b fb9f 	bl	1aa8c <printk>
}
    f34e:	4620      	mov	r0, r4
    f350:	b002      	add	sp, #8
    f352:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f354:	9801      	ldr	r0, [sp, #4]
    f356:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f358:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f35c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f35e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f362:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f364:	f006 fb1c 	bl	159a0 <net_buf_unref>
	return 0;
    f368:	e7f1      	b.n	f34e <hci_le_read_max_data_len+0x1e>
    f36a:	bf00      	nop
    f36c:	0002115b 	.word	0x0002115b

0000f370 <set_random_address>:
{
    f370:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    f372:	4e15      	ldr	r6, [pc, #84]	; (f3c8 <set_random_address+0x58>)
    f374:	2206      	movs	r2, #6
    f376:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    f37a:	4605      	mov	r5, r0
    f37c:	f00c fd9f 	bl	1bebe <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f380:	4604      	mov	r4, r0
    f382:	b1e0      	cbz	r0, f3be <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f384:	2106      	movs	r1, #6
    f386:	f242 0005 	movw	r0, #8197	; 0x2005
    f38a:	f7ff ff25 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    f38e:	4604      	mov	r4, r0
    f390:	b1b8      	cbz	r0, f3c2 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f392:	2206      	movs	r2, #6
    f394:	4629      	mov	r1, r5
    f396:	3008      	adds	r0, #8
    f398:	f00e f8e1 	bl	1d55e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f39c:	4621      	mov	r1, r4
    f39e:	2200      	movs	r2, #0
    f3a0:	f242 0005 	movw	r0, #8197	; 0x2005
    f3a4:	f7ff ff62 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
    f3a8:	4604      	mov	r4, r0
    f3aa:	b940      	cbnz	r0, f3be <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    f3ac:	2206      	movs	r2, #6
    f3ae:	4629      	mov	r1, r5
    f3b0:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    f3b4:	f00c fd94 	bl	1bee0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f3b8:	2301      	movs	r3, #1
    f3ba:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    f3be:	4620      	mov	r0, r4
    f3c0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f3c2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f3c6:	e7fa      	b.n	f3be <set_random_address+0x4e>
    f3c8:	20008000 	.word	0x20008000

0000f3cc <set_le_scan_enable_legacy>:
{
    f3cc:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f3ce:	2102      	movs	r1, #2
{
    f3d0:	4604      	mov	r4, r0
    f3d2:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f3d4:	f242 000c 	movw	r0, #8204	; 0x200c
    f3d8:	f7ff fefe 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    f3dc:	4605      	mov	r5, r0
    f3de:	b348      	cbz	r0, f434 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    f3e0:	2102      	movs	r1, #2
    f3e2:	3008      	adds	r0, #8
    f3e4:	f006 fbf2 	bl	15bcc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f3e8:	2c01      	cmp	r4, #1
    f3ea:	4603      	mov	r3, r0
    f3ec:	d11f      	bne.n	f42e <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f3ee:	4813      	ldr	r0, [pc, #76]	; (f43c <set_le_scan_enable_legacy+0x70>)
    f3f0:	f00c fe63 	bl	1c0ba <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f3f4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f3f8:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    f3fa:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    f3fc:	4b0f      	ldr	r3, [pc, #60]	; (f43c <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    f3fe:	4628      	mov	r0, r5
    f400:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f402:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    f404:	f004 0401 	and.w	r4, r4, #1
    f408:	9302      	str	r3, [sp, #8]
    f40a:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f40e:	f006 f94f 	bl	156b0 <net_buf_id>
    f412:	220c      	movs	r2, #12
    f414:	4b0a      	ldr	r3, [pc, #40]	; (f440 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f416:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f418:	fb02 3300 	mla	r3, r2, r0, r3
    f41c:	aa01      	add	r2, sp, #4
    f41e:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f420:	f242 000c 	movw	r0, #8204	; 0x200c
    f424:	2200      	movs	r2, #0
    f426:	f7ff ff21 	bl	f26c <bt_hci_cmd_send_sync>
}
    f42a:	b005      	add	sp, #20
    f42c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f42e:	2200      	movs	r2, #0
    f430:	7042      	strb	r2, [r0, #1]
    f432:	e7e2      	b.n	f3fa <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f434:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f438:	e7f7      	b.n	f42a <set_le_scan_enable_legacy+0x5e>
    f43a:	bf00      	nop
    f43c:	20008094 	.word	0x20008094
    f440:	20009ee8 	.word	0x20009ee8

0000f444 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f444:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f448:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f44a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f44e:	460e      	mov	r6, r1
    f450:	4691      	mov	r9, r2
    f452:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f454:	d02c      	beq.n	f4b0 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f456:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f538 <le_adv_set_random_addr.isra.0+0xf4>
    f45a:	b12a      	cbz	r2, f468 <le_adv_set_random_addr.isra.0+0x24>
    f45c:	068c      	lsls	r4, r1, #26
    f45e:	d503      	bpl.n	f468 <le_adv_set_random_addr.isra.0+0x24>
    f460:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f464:	0658      	lsls	r0, r3, #25
    f466:	d563      	bpl.n	f530 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f468:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f46c:	f818 3003 	ldrb.w	r3, [r8, r3]
    f470:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f474:	2b01      	cmp	r3, #1
    f476:	d009      	beq.n	f48c <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f478:	ebaa 0505 	sub.w	r5, sl, r5
    f47c:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f480:	f1b9 0f00 	cmp.w	r9, #0
    f484:	d10f      	bne.n	f4a6 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f486:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f488:	703b      	strb	r3, [r7, #0]
    f48a:	e008      	b.n	f49e <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f48c:	2007      	movs	r0, #7
    f48e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f492:	4440      	add	r0, r8
    f494:	f7ff ff6c 	bl	f370 <set_random_address>
				if (err) {
    f498:	4604      	mov	r4, r0
    f49a:	2800      	cmp	r0, #0
    f49c:	d0ec      	beq.n	f478 <le_adv_set_random_addr.isra.0+0x34>
}
    f49e:	4620      	mov	r0, r4
    f4a0:	b002      	add	sp, #8
    f4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f4a6:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f4a8:	bf48      	it	mi
    f4aa:	f043 0302 	orrmi.w	r3, r3, #2
    f4ae:	e7ea      	b.n	f486 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f4b0:	f011 0604 	ands.w	r6, r1, #4
    f4b4:	d014      	beq.n	f4e0 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f4b6:	f8df 8080 	ldr.w	r8, [pc, #128]	; f538 <le_adv_set_random_addr.isra.0+0xf4>
    f4ba:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f4be:	f818 3003 	ldrb.w	r3, [r8, r3]
    f4c2:	00ee      	lsls	r6, r5, #3
    f4c4:	2b01      	cmp	r3, #1
    f4c6:	d105      	bne.n	f4d4 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f4c8:	2007      	movs	r0, #7
    f4ca:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f4ce:	4440      	add	r0, r8
    f4d0:	f7ff ff4e 	bl	f370 <set_random_address>
			*own_addr_type = id_addr->type;
    f4d4:	1b75      	subs	r5, r6, r5
    f4d6:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f4da:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f4dc:	703b      	strb	r3, [r7, #0]
    f4de:	e7de      	b.n	f49e <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f4e0:	4816      	ldr	r0, [pc, #88]	; (f53c <le_adv_set_random_addr.isra.0+0xf8>)
    f4e2:	f00c fdea 	bl	1c0ba <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f4e6:	0682      	lsls	r2, r0, #26
    f4e8:	d417      	bmi.n	f51a <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f4ea:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f4ec:	2106      	movs	r1, #6
    f4ee:	4668      	mov	r0, sp
    f4f0:	f001 fe2a 	bl	11148 <bt_rand>
	if (err) {
    f4f4:	4604      	mov	r4, r0
    f4f6:	b948      	cbnz	r0, f50c <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f4f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f4fc:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f502:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f506:	f7ff ff33 	bl	f370 <set_random_address>
    f50a:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f50c:	2001      	movs	r0, #1
    f50e:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f510:	2d00      	cmp	r5, #0
    f512:	d0c4      	beq.n	f49e <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    f514:	f7ff ff5a 	bl	f3cc <set_le_scan_enable_legacy>
		if (err) {
    f518:	e7c1      	b.n	f49e <le_adv_set_random_addr.isra.0+0x5a>
    f51a:	4808      	ldr	r0, [pc, #32]	; (f53c <le_adv_set_random_addr.isra.0+0xf8>)
    f51c:	f00c fdcd 	bl	1c0ba <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f520:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f522:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f526:	d5e0      	bpl.n	f4ea <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    f528:	4630      	mov	r0, r6
    f52a:	f7ff ff4f 	bl	f3cc <set_le_scan_enable_legacy>
    f52e:	e7dd      	b.n	f4ec <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f530:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f534:	e7b3      	b.n	f49e <le_adv_set_random_addr.isra.0+0x5a>
    f536:	bf00      	nop
    f538:	20008000 	.word	0x20008000
    f53c:	20008094 	.word	0x20008094

0000f540 <hci_set_ad>:
{
    f540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f544:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f546:	2120      	movs	r1, #32
{
    f548:	4682      	mov	sl, r0
    f54a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f54c:	f7ff fe44 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    f550:	4606      	mov	r6, r0
    f552:	2800      	cmp	r0, #0
    f554:	d056      	beq.n	f604 <hci_set_ad+0xc4>
    f556:	2120      	movs	r1, #32
    f558:	3008      	adds	r0, #8
    f55a:	f006 fb37 	bl	15bcc <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f55e:	2220      	movs	r2, #32
    f560:	4681      	mov	r9, r0
    f562:	2100      	movs	r1, #0
    f564:	f00c fce7 	bl	1bf36 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f568:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f56c:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f56e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f572:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f574:	2300      	movs	r3, #0
    f576:	f8d4 8000 	ldr.w	r8, [r4]
    f57a:	6862      	ldr	r2, [r4, #4]
    f57c:	4293      	cmp	r3, r2
    f57e:	d30d      	bcc.n	f59c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f580:	9b00      	ldr	r3, [sp, #0]
    f582:	3408      	adds	r4, #8
    f584:	429c      	cmp	r4, r3
    f586:	d1f5      	bne.n	f574 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f588:	2200      	movs	r2, #0
    f58a:	4631      	mov	r1, r6
    f58c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f58e:	f889 5000 	strb.w	r5, [r9]
}
    f592:	b003      	add	sp, #12
    f594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f598:	f7ff be68 	b.w	f26c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f59c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f5a0:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f5a2:	1881      	adds	r1, r0, r2
    f5a4:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f5a6:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f5aa:	d914      	bls.n	f5d6 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f5ac:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f5b0:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f5b4:	d101      	bne.n	f5ba <hci_set_ad+0x7a>
    f5b6:	2a00      	cmp	r2, #0
    f5b8:	dc0b      	bgt.n	f5d2 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f5ba:	2145      	movs	r1, #69	; 0x45
    f5bc:	4813      	ldr	r0, [pc, #76]	; (f60c <hci_set_ad+0xcc>)
    f5be:	f00b fa65 	bl	1aa8c <printk>
		net_buf_unref(buf);
    f5c2:	4630      	mov	r0, r6
    f5c4:	f006 f9ec 	bl	159a0 <net_buf_unref>
					return -EINVAL;
    f5c8:	f06f 0015 	mvn.w	r0, #21
}
    f5cc:	b003      	add	sp, #12
    f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f5d2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f5d6:	b2d7      	uxtb	r7, r2
    f5d8:	1c79      	adds	r1, r7, #1
    f5da:	f80b 1005 	strb.w	r1, [fp, r5]
    f5de:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f5e0:	b2c9      	uxtb	r1, r1
    f5e2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f5e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f5ea:	fa5b f080 	uxtab	r0, fp, r0
    f5ee:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f5f0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f5f2:	f00c fc75 	bl	1bee0 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f5f6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f5f8:	443d      	add	r5, r7
    f5fa:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f5fc:	3301      	adds	r3, #1
    f5fe:	f108 0808 	add.w	r8, r8, #8
    f602:	e7ba      	b.n	f57a <hci_set_ad+0x3a>
		return -ENOBUFS;
    f604:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f608:	e7e0      	b.n	f5cc <hci_set_ad+0x8c>
    f60a:	bf00      	nop
    f60c:	00021180 	.word	0x00021180

0000f610 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f614:	b087      	sub	sp, #28
    f616:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f61a:	4606      	mov	r6, r0
    f61c:	460c      	mov	r4, r1
    f61e:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f620:	2100      	movs	r1, #0
    f622:	2210      	movs	r2, #16
    f624:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f626:	461d      	mov	r5, r3
    f628:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f62c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f630:	f00c fc81 	bl	1bf36 <memset>
	if (use_name) {
    f634:	f1b8 0f00 	cmp.w	r8, #0
    f638:	d00e      	beq.n	f658 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f63a:	bbb4      	cbnz	r4, f6aa <le_adv_update.constprop.0+0x9a>
    f63c:	2d00      	cmp	r5, #0
    f63e:	d13f      	bne.n	f6c0 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f640:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f6f4 <le_adv_update.constprop.0+0xe4>
    f644:	4658      	mov	r0, fp
    f646:	f00c fc0d 	bl	1be64 <strlen>
    f64a:	2309      	movs	r3, #9
    f64c:	f88d 0001 	strb.w	r0, [sp, #1]
    f650:	f88d 3000 	strb.w	r3, [sp]
    f654:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f658:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f65c:	f1b8 0f00 	cmp.w	r8, #0
    f660:	d030      	beq.n	f6c4 <le_adv_update.constprop.0+0xb4>
    f662:	f1ba 0f00 	cmp.w	sl, #0
    f666:	d12d      	bne.n	f6c4 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f668:	2301      	movs	r3, #1
			d_len = 2;
    f66a:	2202      	movs	r2, #2
			d[1].data = &data;
    f66c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f670:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f672:	f242 0008 	movw	r0, #8200	; 0x2008
    f676:	a902      	add	r1, sp, #8
    f678:	f7ff ff62 	bl	f540 <hci_set_ad>
		if (err) {
    f67c:	4604      	mov	r4, r0
    f67e:	b938      	cbnz	r0, f690 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f680:	f1ba 0f00 	cmp.w	sl, #0
    f684:	d120      	bne.n	f6c8 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f686:	2104      	movs	r1, #4
    f688:	f106 0010 	add.w	r0, r6, #16
    f68c:	f00c fd1b 	bl	1c0c6 <atomic_or>
}
    f690:	4620      	mov	r0, r4
    f692:	b007      	add	sp, #28
    f694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f698:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f69c:	3a08      	subs	r2, #8
    f69e:	2a01      	cmp	r2, #1
    f6a0:	d925      	bls.n	f6ee <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f6a2:	3301      	adds	r3, #1
    f6a4:	429f      	cmp	r7, r3
    f6a6:	d1f7      	bne.n	f698 <le_adv_update.constprop.0+0x88>
    f6a8:	e7c8      	b.n	f63c <le_adv_update.constprop.0+0x2c>
    f6aa:	2300      	movs	r3, #0
    f6ac:	e7fa      	b.n	f6a4 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f6ae:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f6b2:	3a08      	subs	r2, #8
    f6b4:	2a01      	cmp	r2, #1
    f6b6:	d91a      	bls.n	f6ee <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f6b8:	3301      	adds	r3, #1
    f6ba:	4599      	cmp	r9, r3
    f6bc:	d1f7      	bne.n	f6ae <le_adv_update.constprop.0+0x9e>
    f6be:	e7bf      	b.n	f640 <le_adv_update.constprop.0+0x30>
    f6c0:	2300      	movs	r3, #0
    f6c2:	e7fa      	b.n	f6ba <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f6c4:	2201      	movs	r2, #1
    f6c6:	e7d4      	b.n	f672 <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f6c8:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f6ca:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f6ce:	f1b8 0f00 	cmp.w	r8, #0
    f6d2:	d003      	beq.n	f6dc <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f6d4:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f6d6:	2202      	movs	r2, #2
			d[1].data = &data;
    f6d8:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f6dc:	f242 0009 	movw	r0, #8201	; 0x2009
    f6e0:	a902      	add	r1, sp, #8
    f6e2:	f7ff ff2d 	bl	f540 <hci_set_ad>
		if (err) {
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d0cd      	beq.n	f686 <le_adv_update.constprop.0+0x76>
    f6ea:	4604      	mov	r4, r0
    f6ec:	e7d0      	b.n	f690 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f6ee:	f06f 0415 	mvn.w	r4, #21
    f6f2:	e7cd      	b.n	f690 <le_adv_update.constprop.0+0x80>
    f6f4:	0001f79d 	.word	0x0001f79d

0000f6f8 <set_le_adv_enable_legacy>:
{
    f6f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f6fa:	4606      	mov	r6, r0
    f6fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f6fe:	f242 000a 	movw	r0, #8202	; 0x200a
    f702:	2101      	movs	r1, #1
    f704:	f7ff fd68 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    f708:	4604      	mov	r4, r0
    f70a:	b1e8      	cbz	r0, f748 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    f70c:	3008      	adds	r0, #8
	if (enable) {
    f70e:	b1cd      	cbz	r5, f744 <set_le_adv_enable_legacy+0x4c>
    f710:	2101      	movs	r1, #1
    f712:	f00d ff30 	bl	1d576 <net_buf_simple_add_u8>
    f716:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f718:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f71a:	3610      	adds	r6, #16
    f71c:	9302      	str	r3, [sp, #8]
	state->target = target;
    f71e:	9601      	str	r6, [sp, #4]
	state->val = val;
    f720:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f724:	f005 ffc4 	bl	156b0 <net_buf_id>
    f728:	220c      	movs	r2, #12
    f72a:	4b09      	ldr	r3, [pc, #36]	; (f750 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f72c:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f72e:	fb02 3300 	mla	r3, r2, r0, r3
    f732:	aa01      	add	r2, sp, #4
    f734:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f736:	f242 000a 	movw	r0, #8202	; 0x200a
    f73a:	2200      	movs	r2, #0
    f73c:	f7ff fd96 	bl	f26c <bt_hci_cmd_send_sync>
}
    f740:	b004      	add	sp, #16
    f742:	bd70      	pop	{r4, r5, r6, pc}
    f744:	4629      	mov	r1, r5
    f746:	e7e4      	b.n	f712 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    f748:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f74c:	e7f8      	b.n	f740 <set_le_adv_enable_legacy+0x48>
    f74e:	bf00      	nop
    f750:	20009ee8 	.word	0x20009ee8

0000f754 <start_le_scan_legacy>:
{
    f754:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f756:	460e      	mov	r6, r1
    f758:	4605      	mov	r5, r0
    f75a:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f75c:	2100      	movs	r1, #0
    f75e:	2207      	movs	r2, #7
    f760:	4668      	mov	r0, sp
    f762:	f00c fbe8 	bl	1bf36 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f766:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f76a:	4e26      	ldr	r6, [pc, #152]	; (f804 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f76c:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f76e:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f770:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f774:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f778:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f77c:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f780:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f784:	f00c fc99 	bl	1c0ba <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f788:	0641      	lsls	r1, r0, #25
    f78a:	d413      	bmi.n	f7b4 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f78c:	f00c fcda 	bl	1c144 <le_set_private_addr.constprop.0>
			if (err) {
    f790:	4604      	mov	r4, r0
    f792:	b160      	cbz	r0, f7ae <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f794:	2d01      	cmp	r5, #1
    f796:	d02e      	beq.n	f7f6 <start_le_scan_legacy+0xa2>
    f798:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f79c:	f00c fc8d 	bl	1c0ba <atomic_get>
    f7a0:	0642      	lsls	r2, r0, #25
    f7a2:	d528      	bpl.n	f7f6 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f7a4:	4622      	mov	r2, r4
    f7a6:	2157      	movs	r1, #87	; 0x57
    f7a8:	4817      	ldr	r0, [pc, #92]	; (f808 <start_le_scan_legacy+0xb4>)
    f7aa:	f00b f96f 	bl	1aa8c <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f7ae:	2301      	movs	r3, #1
    f7b0:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f7b4:	2107      	movs	r1, #7
    f7b6:	f242 000b 	movw	r0, #8203	; 0x200b
    f7ba:	f7ff fd0d 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    f7be:	4604      	mov	r4, r0
    f7c0:	b1e0      	cbz	r0, f7fc <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f7c2:	2207      	movs	r2, #7
    f7c4:	4669      	mov	r1, sp
    f7c6:	3008      	adds	r0, #8
    f7c8:	f00d fec9 	bl	1d55e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f7cc:	4621      	mov	r1, r4
    f7ce:	2200      	movs	r2, #0
    f7d0:	f242 000b 	movw	r0, #8203	; 0x200b
    f7d4:	f7ff fd4a 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
    f7d8:	4604      	mov	r4, r0
    f7da:	b960      	cbnz	r0, f7f6 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f7dc:	2001      	movs	r0, #1
    f7de:	f7ff fdf5 	bl	f3cc <set_le_scan_enable_legacy>
	if (err) {
    f7e2:	4604      	mov	r4, r0
    f7e4:	b938      	cbnz	r0, f7f6 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f7e6:	1e6b      	subs	r3, r5, #1
    f7e8:	425a      	negs	r2, r3
    f7ea:	f04f 0107 	mov.w	r1, #7
    f7ee:	4807      	ldr	r0, [pc, #28]	; (f80c <start_le_scan_legacy+0xb8>)
    f7f0:	415a      	adcs	r2, r3
    f7f2:	f00c fc81 	bl	1c0f8 <atomic_set_bit_to>
}
    f7f6:	4620      	mov	r0, r4
    f7f8:	b002      	add	sp, #8
    f7fa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f7fc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f800:	e7f9      	b.n	f7f6 <start_le_scan_legacy+0xa2>
    f802:	bf00      	nop
    f804:	20008000 	.word	0x20008000
    f808:	0002119e 	.word	0x0002119e
    f80c:	20008094 	.word	0x20008094

0000f810 <bt_le_scan_random_addr_check>:
{
    f810:	b508      	push	{r3, lr}
    f812:	4802      	ldr	r0, [pc, #8]	; (f81c <bt_le_scan_random_addr_check+0xc>)
    f814:	f00c fc51 	bl	1c0ba <atomic_get>
}
    f818:	2001      	movs	r0, #1
    f81a:	bd08      	pop	{r3, pc}
    f81c:	20008028 	.word	0x20008028

0000f820 <bt_le_create_conn_legacy>:
{
    f820:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f824:	4f2b      	ldr	r7, [pc, #172]	; (f8d4 <bt_le_create_conn_legacy+0xb4>)
{
    f826:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f828:	783b      	ldrb	r3, [r7, #0]
    f82a:	2b01      	cmp	r3, #1
    f82c:	d00b      	beq.n	f846 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f82e:	2119      	movs	r1, #25
    f830:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f834:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f838:	f7ff fcce 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    f83c:	4606      	mov	r6, r0
    f83e:	b950      	cbnz	r0, f856 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f840:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f844:	e004      	b.n	f850 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f846:	1c78      	adds	r0, r7, #1
    f848:	f7ff fd92 	bl	f370 <set_random_address>
			if (err) {
    f84c:	2800      	cmp	r0, #0
    f84e:	d0ee      	beq.n	f82e <bt_le_create_conn_legacy+0xe>
}
    f850:	b004      	add	sp, #16
    f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f856:	2119      	movs	r1, #25
    f858:	3008      	adds	r0, #8
    f85a:	f006 f9b7 	bl	15bcc <net_buf_simple_add>
    f85e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f860:	2219      	movs	r2, #25
    f862:	2100      	movs	r1, #0
    f864:	f00c fb67 	bl	1bf36 <memset>
	cp->own_addr_type = own_addr_type;
    f868:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f86c:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f870:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f874:	1d60      	adds	r0, r4, #5
    f876:	f00c fc23 	bl	1c0c0 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f87a:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f87e:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    f880:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f882:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f884:	89fb      	ldrh	r3, [r7, #14]
    f886:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f888:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f88c:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f890:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f894:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f898:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f89c:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f8a0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f8a4:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f8a8:	4b0b      	ldr	r3, [pc, #44]	; (f8d8 <bt_le_create_conn_legacy+0xb8>)
    f8aa:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f8ac:	230b      	movs	r3, #11
    f8ae:	9302      	str	r3, [sp, #8]
	state->val = val;
    f8b0:	2301      	movs	r3, #1
    f8b2:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f8b6:	f005 fefb 	bl	156b0 <net_buf_id>
    f8ba:	220c      	movs	r2, #12
    f8bc:	4b07      	ldr	r3, [pc, #28]	; (f8dc <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f8be:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    f8c0:	fb02 3300 	mla	r3, r2, r0, r3
    f8c4:	aa01      	add	r2, sp, #4
    f8c6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f8c8:	f242 000d 	movw	r0, #8205	; 0x200d
    f8cc:	4642      	mov	r2, r8
    f8ce:	f7ff fccd 	bl	f26c <bt_hci_cmd_send_sync>
    f8d2:	e7bd      	b.n	f850 <bt_le_create_conn_legacy+0x30>
    f8d4:	20008000 	.word	0x20008000
    f8d8:	20008094 	.word	0x20008094
    f8dc:	20009ee8 	.word	0x20009ee8

0000f8e0 <bt_le_create_conn_cancel>:
{
    f8e0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f8e2:	2100      	movs	r1, #0
{
    f8e4:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f8e6:	f242 000e 	movw	r0, #8206	; 0x200e
    f8ea:	f7ff fc75 	bl	f1d8 <bt_hci_cmd_create>
	state->target = target;
    f8ee:	4b0c      	ldr	r3, [pc, #48]	; (f920 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f8f0:	2500      	movs	r5, #0
	state->target = target;
    f8f2:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f8f4:	230b      	movs	r3, #11
    f8f6:	4604      	mov	r4, r0
    f8f8:	9302      	str	r3, [sp, #8]
	state->val = val;
    f8fa:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f8fe:	f005 fed7 	bl	156b0 <net_buf_id>
    f902:	220c      	movs	r2, #12
    f904:	4b07      	ldr	r3, [pc, #28]	; (f924 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f906:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f908:	fb02 3300 	mla	r3, r2, r0, r3
    f90c:	aa01      	add	r2, sp, #4
    f90e:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f910:	f242 000e 	movw	r0, #8206	; 0x200e
    f914:	462a      	mov	r2, r5
    f916:	f7ff fca9 	bl	f26c <bt_hci_cmd_send_sync>
}
    f91a:	b005      	add	sp, #20
    f91c:	bd30      	pop	{r4, r5, pc}
    f91e:	bf00      	nop
    f920:	20008094 	.word	0x20008094
    f924:	20009ee8 	.word	0x20009ee8

0000f928 <bt_le_scan_update>:
{
    f928:	b570      	push	{r4, r5, r6, lr}
    f92a:	4606      	mov	r6, r0
    f92c:	481c      	ldr	r0, [pc, #112]	; (f9a0 <bt_le_scan_update+0x78>)
    f92e:	f00c fbc4 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f932:	0641      	lsls	r1, r0, #25
    f934:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f938:	d501      	bpl.n	f93e <bt_le_scan_update+0x16>
			return 0;
    f93a:	2000      	movs	r0, #0
    f93c:	e02b      	b.n	f996 <bt_le_scan_update+0x6e>
    f93e:	4818      	ldr	r0, [pc, #96]	; (f9a0 <bt_le_scan_update+0x78>)
    f940:	f00c fbbb 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f944:	0682      	lsls	r2, r0, #26
    f946:	d421      	bmi.n	f98c <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f948:	2100      	movs	r1, #0
    f94a:	2206      	movs	r2, #6
    f94c:	4608      	mov	r0, r1
    f94e:	f001 fff9 	bl	11944 <bt_conn_lookup_state_le>
		if (conn) {
    f952:	4604      	mov	r4, r0
    f954:	bb00      	cbnz	r0, f998 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f956:	2202      	movs	r2, #2
    f958:	4601      	mov	r1, r0
    f95a:	f001 fff3 	bl	11944 <bt_conn_lookup_state_le>
		if (conn) {
    f95e:	4605      	mov	r5, r0
    f960:	2800      	cmp	r0, #0
    f962:	d0ea      	beq.n	f93a <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f964:	f44f 7180 	mov.w	r1, #256	; 0x100
    f968:	480d      	ldr	r0, [pc, #52]	; (f9a0 <bt_le_scan_update+0x78>)
    f96a:	f00c fbac 	bl	1c0c6 <atomic_or>
			bt_conn_unref(conn);
    f96e:	4628      	mov	r0, r5
    f970:	f001 fe86 	bl	11680 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f974:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f976:	4620      	mov	r0, r4
}
    f978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f97c:	bf15      	itete	ne
    f97e:	2230      	movne	r2, #48	; 0x30
    f980:	2212      	moveq	r2, #18
    f982:	2160      	movne	r1, #96	; 0x60
    f984:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f988:	f7ff bee4 	b.w	f754 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f98c:	4618      	mov	r0, r3
    f98e:	f7ff fd1d 	bl	f3cc <set_le_scan_enable_legacy>
		if (err) {
    f992:	2800      	cmp	r0, #0
    f994:	d0d8      	beq.n	f948 <bt_le_scan_update+0x20>
}
    f996:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f998:	f001 fe72 	bl	11680 <bt_conn_unref>
    f99c:	e7cd      	b.n	f93a <bt_le_scan_update+0x12>
    f99e:	bf00      	nop
    f9a0:	20008094 	.word	0x20008094

0000f9a4 <hci_disconn_complete>:
{
    f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f9a6:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f9a8:	7835      	ldrb	r5, [r6, #0]
    f9aa:	bb45      	cbnz	r5, f9fe <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f9ac:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f9b0:	4638      	mov	r0, r7
    f9b2:	f001 fe89 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    f9b6:	4604      	mov	r4, r0
    f9b8:	b930      	cbnz	r0, f9c8 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f9ba:	463a      	mov	r2, r7
}
    f9bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f9c0:	2145      	movs	r1, #69	; 0x45
    f9c2:	480f      	ldr	r0, [pc, #60]	; (fa00 <hci_disconn_complete+0x5c>)
    f9c4:	f00b b862 	b.w	1aa8c <printk>
	conn->err = evt->reason;
    f9c8:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9ca:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f9cc:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9ce:	f001 fe83 	bl	116d8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f9d2:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f9d4:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f9d6:	2b01      	cmp	r3, #1
    f9d8:	d004      	beq.n	f9e4 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f9da:	4620      	mov	r0, r4
}
    f9dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    f9e0:	f001 be4e 	b.w	11680 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f9e4:	1d20      	adds	r0, r4, #4
    f9e6:	f00c fb68 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    f9ea:	07c3      	lsls	r3, r0, #31
    f9ec:	d5f5      	bpl.n	f9da <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    f9ee:	4620      	mov	r0, r4
    f9f0:	2102      	movs	r1, #2
    f9f2:	f001 fe71 	bl	116d8 <bt_conn_set_state>
		bt_le_scan_update(false);
    f9f6:	4628      	mov	r0, r5
    f9f8:	f7ff ff96 	bl	f928 <bt_le_scan_update>
    f9fc:	e7ed      	b.n	f9da <hci_disconn_complete+0x36>
}
    f9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa00:	00020f25 	.word	0x00020f25

0000fa04 <le_adv_report>:
{
    fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    fa08:	f100 0708 	add.w	r7, r0, #8
    fa0c:	b08d      	sub	sp, #52	; 0x34
    fa0e:	4604      	mov	r4, r0
    fa10:	4638      	mov	r0, r7
    fa12:	f00d fd88 	bl	1d526 <net_buf_simple_pull_u8>
    fa16:	f8df 81c8 	ldr.w	r8, [pc, #456]	; fbe0 <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    fa1a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; fbe4 <le_adv_report+0x1e0>
    fa1e:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    fa20:	9b01      	ldr	r3, [sp, #4]
    fa22:	b913      	cbnz	r3, fa2a <le_adv_report+0x26>
}
    fa24:	b00d      	add	sp, #52	; 0x34
    fa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    fa2a:	89a3      	ldrh	r3, [r4, #12]
    fa2c:	2b08      	cmp	r3, #8
    fa2e:	d806      	bhi.n	fa3e <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    fa30:	2145      	movs	r1, #69	; 0x45
    fa32:	486d      	ldr	r0, [pc, #436]	; (fbe8 <le_adv_report+0x1e4>)
}
    fa34:	b00d      	add	sp, #52	; 0x34
    fa36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    fa3a:	f00b b827 	b.w	1aa8c <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    fa3e:	2109      	movs	r1, #9
    fa40:	4638      	mov	r0, r7
    fa42:	f006 f8a5 	bl	15b90 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    fa46:	237f      	movs	r3, #127	; 0x7f
    fa48:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    fa4c:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fa4e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    fa50:	9300      	str	r3, [sp, #0]
    fa52:	18c3      	adds	r3, r0, r3
    fa54:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fa56:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    fa5a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    fa5e:	23ff      	movs	r3, #255	; 0xff
    fa60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    fa64:	2300      	movs	r3, #0
    fa66:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    fa6a:	7802      	ldrb	r2, [r0, #0]
    fa6c:	4606      	mov	r6, r0
    fa6e:	2a04      	cmp	r2, #4
    fa70:	bf98      	it	ls
    fa72:	4b5e      	ldrls	r3, [pc, #376]	; (fbec <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    fa74:	f100 0901 	add.w	r9, r0, #1
    fa78:	bf98      	it	ls
    fa7a:	5c9b      	ldrbls	r3, [r3, r2]
    fa7c:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    fa7e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    fa82:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    fa86:	f00c fb18 	bl	1c0ba <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    fa8a:	0645      	lsls	r5, r0, #25
    fa8c:	d50d      	bpl.n	faaa <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    fa8e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fa92:	0758      	lsls	r0, r3, #29
    fa94:	d509      	bpl.n	faaa <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    fa96:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    fa98:	4638      	mov	r0, r7
    fa9a:	3101      	adds	r1, #1
    fa9c:	f006 f85c 	bl	15b58 <net_buf_simple_pull>
    faa0:	9b01      	ldr	r3, [sp, #4]
    faa2:	1e58      	subs	r0, r3, #1
    faa4:	b2c3      	uxtb	r3, r0
    faa6:	9301      	str	r3, [sp, #4]
    faa8:	e7ba      	b.n	fa20 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    faaa:	7873      	ldrb	r3, [r6, #1]
    faac:	1e9a      	subs	r2, r3, #2
    faae:	2a01      	cmp	r2, #1
    fab0:	d84c      	bhi.n	fb4c <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    fab2:	4649      	mov	r1, r9
    fab4:	a804      	add	r0, sp, #16
    fab6:	f00c fb03 	bl	1c0c0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    faba:	f89d 3010 	ldrb.w	r3, [sp, #16]
    fabe:	3b02      	subs	r3, #2
    fac0:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    fac4:	ab04      	add	r3, sp, #16
    fac6:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    fac8:	f8da 3000 	ldr.w	r3, [sl]
    facc:	b1a3      	cbz	r3, faf8 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    face:	4638      	mov	r0, r7
    fad0:	f00d fd39 	bl	1d546 <net_buf_simple_headroom>
    fad4:	4683      	mov	fp, r0
		buf->len = len;
    fad6:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    fad8:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fada:	a804      	add	r0, sp, #16
		buf->len = len;
    fadc:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fade:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    fae2:	463b      	mov	r3, r7
    fae4:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    fae8:	f8da c000 	ldr.w	ip, [sl]
    faec:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    faee:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    faf0:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    faf2:	fa10 f08b 	uxtah	r0, r0, fp
    faf6:	60a0      	str	r0, [r4, #8]
	return list->head;
    faf8:	4b3d      	ldr	r3, [pc, #244]	; (fbf0 <le_adv_report+0x1ec>)
    fafa:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fafc:	2b00      	cmp	r3, #0
    fafe:	d032      	beq.n	fb66 <le_adv_report+0x162>
    fb00:	f1b3 0208 	subs.w	r2, r3, #8
    fb04:	d02f      	beq.n	fb66 <le_adv_report+0x162>
	return node->next;
    fb06:	681d      	ldr	r5, [r3, #0]
    fb08:	b105      	cbz	r5, fb0c <le_adv_report+0x108>
    fb0a:	3d08      	subs	r5, #8
		if (listener->recv) {
    fb0c:	6813      	ldr	r3, [r2, #0]
    fb0e:	9203      	str	r2, [sp, #12]
    fb10:	b193      	cbz	r3, fb38 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    fb12:	4638      	mov	r0, r7
    fb14:	f00d fd17 	bl	1d546 <net_buf_simple_headroom>
    fb18:	4683      	mov	fp, r0
	state->len = buf->len;
    fb1a:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fb1c:	9a03      	ldr	r2, [sp, #12]
    fb1e:	9302      	str	r3, [sp, #8]
			buf->len = len;
    fb20:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    fb22:	a808      	add	r0, sp, #32
			buf->len = len;
    fb24:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fb26:	4639      	mov	r1, r7
    fb28:	6812      	ldr	r2, [r2, #0]
    fb2a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    fb2c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fb2e:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fb30:	fa10 f08b 	uxtah	r0, r0, fp
    fb34:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    fb36:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fb38:	b1ad      	cbz	r5, fb66 <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fb3a:	f115 0308 	adds.w	r3, r5, #8
    fb3e:	d002      	beq.n	fb46 <le_adv_report+0x142>
	return node->next;
    fb40:	68ab      	ldr	r3, [r5, #8]
    fb42:	b103      	cbz	r3, fb46 <le_adv_report+0x142>
    fb44:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    fb46:	462a      	mov	r2, r5
    fb48:	461d      	mov	r5, r3
    fb4a:	e7df      	b.n	fb0c <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    fb4c:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fb4e:	bf0a      	itet	eq
    fb50:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    fb52:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fb54:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    fb56:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fb58:	bf04      	itt	eq
    fb5a:	9306      	streq	r3, [sp, #24]
    fb5c:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    fb60:	f00c faae 	bl	1c0c0 <bt_addr_le_copy>
    fb64:	e7ae      	b.n	fac4 <le_adv_report+0xc0>
    fb66:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    fb68:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fb6c:	f00c faa5 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fb70:	0641      	lsls	r1, r0, #25
    fb72:	f3c0 1580 	ubfx	r5, r0, #6, #1
    fb76:	d48e      	bmi.n	fa96 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    fb78:	07da      	lsls	r2, r3, #31
    fb7a:	d58c      	bpl.n	fa96 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    fb7c:	2202      	movs	r2, #2
    fb7e:	4628      	mov	r0, r5
    fb80:	a904      	add	r1, sp, #16
    fb82:	f001 fedf 	bl	11944 <bt_conn_lookup_state_le>
	if (!conn) {
    fb86:	4683      	mov	fp, r0
    fb88:	2800      	cmp	r0, #0
    fb8a:	d084      	beq.n	fa96 <le_adv_report+0x92>
    fb8c:	4640      	mov	r0, r8
    fb8e:	f00c fa94 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fb92:	0683      	lsls	r3, r0, #26
    fb94:	d410      	bmi.n	fbb8 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    fb96:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    fb9a:	4649      	mov	r1, r9
    fb9c:	f00c fa90 	bl	1c0c0 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    fba0:	4658      	mov	r0, fp
    fba2:	f7ff fe3d 	bl	f820 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    fba6:	b960      	cbnz	r0, fbc2 <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    fba8:	4658      	mov	r0, fp
    fbaa:	2106      	movs	r1, #6
    fbac:	f001 fd94 	bl	116d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    fbb0:	4658      	mov	r0, fp
    fbb2:	f001 fd65 	bl	11680 <bt_conn_unref>
	return;
    fbb6:	e76e      	b.n	fa96 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    fbb8:	4628      	mov	r0, r5
    fbba:	f7ff fc07 	bl	f3cc <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fbbe:	2800      	cmp	r0, #0
    fbc0:	d0e9      	beq.n	fb96 <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fbc2:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbc4:	2100      	movs	r1, #0
    fbc6:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fbc8:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbcc:	f001 fd84 	bl	116d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    fbd0:	4658      	mov	r0, fp
    fbd2:	f001 fd55 	bl	11680 <bt_conn_unref>
	bt_le_scan_update(false);
    fbd6:	2000      	movs	r0, #0
    fbd8:	f7ff fea6 	bl	f928 <bt_le_scan_update>
    fbdc:	e75b      	b.n	fa96 <le_adv_report+0x92>
    fbde:	bf00      	nop
    fbe0:	20008094 	.word	0x20008094
    fbe4:	20009f0c 	.word	0x20009f0c
    fbe8:	000211d9 	.word	0x000211d9
    fbec:	0002165d 	.word	0x0002165d
    fbf0:	20009f04 	.word	0x20009f04

0000fbf4 <bt_data_parse>:
{
    fbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fbf6:	4604      	mov	r4, r0
    fbf8:	460e      	mov	r6, r1
    fbfa:	4617      	mov	r7, r2
	while (ad->len > 1) {
    fbfc:	88a3      	ldrh	r3, [r4, #4]
    fbfe:	2b01      	cmp	r3, #1
    fc00:	d801      	bhi.n	fc06 <bt_data_parse+0x12>
}
    fc02:	b003      	add	sp, #12
    fc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    fc06:	4620      	mov	r0, r4
    fc08:	f00d fc8d 	bl	1d526 <net_buf_simple_pull_u8>
		if (len == 0U) {
    fc0c:	4605      	mov	r5, r0
    fc0e:	2800      	cmp	r0, #0
    fc10:	d0f7      	beq.n	fc02 <bt_data_parse+0xe>
		if (len > ad->len) {
    fc12:	88a2      	ldrh	r2, [r4, #4]
    fc14:	b283      	uxth	r3, r0
    fc16:	429a      	cmp	r2, r3
    fc18:	d206      	bcs.n	fc28 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    fc1a:	2157      	movs	r1, #87	; 0x57
    fc1c:	480c      	ldr	r0, [pc, #48]	; (fc50 <bt_data_parse+0x5c>)
}
    fc1e:	b003      	add	sp, #12
    fc20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fc24:	f00a bf32 	b.w	1aa8c <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fc28:	4620      	mov	r0, r4
    fc2a:	f00d fc7c 	bl	1d526 <net_buf_simple_pull_u8>
		data.data = ad->data;
    fc2e:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fc30:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fc34:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fc36:	4639      	mov	r1, r7
    fc38:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fc3a:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fc3e:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fc40:	47b0      	blx	r6
    fc42:	2800      	cmp	r0, #0
    fc44:	d0dd      	beq.n	fc02 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fc46:	4629      	mov	r1, r5
    fc48:	4620      	mov	r0, r4
    fc4a:	f005 ff85 	bl	15b58 <net_buf_simple_pull>
    fc4e:	e7d5      	b.n	fbfc <bt_data_parse+0x8>
    fc50:	000211f7 	.word	0x000211f7

0000fc54 <bt_send>:
	return bt_dev.drv->send(buf);
    fc54:	4b02      	ldr	r3, [pc, #8]	; (fc60 <bt_send+0xc>)
    fc56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    fc5a:	691b      	ldr	r3, [r3, #16]
    fc5c:	4718      	bx	r3
    fc5e:	bf00      	nop
    fc60:	20008000 	.word	0x20008000

0000fc64 <bt_hci_cmd_send>:
{
    fc64:	b538      	push	{r3, r4, r5, lr}
    fc66:	4605      	mov	r5, r0
	if (!buf) {
    fc68:	460c      	mov	r4, r1
    fc6a:	b919      	cbnz	r1, fc74 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fc6c:	f7ff fab4 	bl	f1d8 <bt_hci_cmd_create>
		if (!buf) {
    fc70:	4604      	mov	r4, r0
    fc72:	b1c0      	cbz	r0, fca6 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fc74:	f640 4335 	movw	r3, #3125	; 0xc35
    fc78:	429d      	cmp	r5, r3
    fc7a:	d10e      	bne.n	fc9a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fc7c:	4620      	mov	r0, r4
    fc7e:	f7ff ffe9 	bl	fc54 <bt_send>
		if (err) {
    fc82:	4605      	mov	r5, r0
    fc84:	b138      	cbz	r0, fc96 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fc86:	4602      	mov	r2, r0
    fc88:	2145      	movs	r1, #69	; 0x45
    fc8a:	4808      	ldr	r0, [pc, #32]	; (fcac <bt_hci_cmd_send+0x48>)
    fc8c:	f00a fefe 	bl	1aa8c <printk>
			net_buf_unref(buf);
    fc90:	4620      	mov	r0, r4
    fc92:	f005 fe85 	bl	159a0 <net_buf_unref>
}
    fc96:	4628      	mov	r0, r5
    fc98:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    fc9a:	4621      	mov	r1, r4
    fc9c:	4804      	ldr	r0, [pc, #16]	; (fcb0 <bt_hci_cmd_send+0x4c>)
    fc9e:	f005 fe51 	bl	15944 <net_buf_put>
	return 0;
    fca2:	2500      	movs	r5, #0
    fca4:	e7f7      	b.n	fc96 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    fca6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    fcaa:	e7f4      	b.n	fc96 <bt_hci_cmd_send+0x32>
    fcac:	0002120b 	.word	0x0002120b
    fcb0:	20008118 	.word	0x20008118

0000fcb4 <bt_hci_host_num_completed_packets>:
{
    fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcb6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fcb8:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fcba:	7980      	ldrb	r0, [r0, #6]
    fcbc:	f005 fcf0 	bl	156a0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fcc0:	4621      	mov	r1, r4
    fcc2:	f00e f9a4 	bl	1e00e <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    fcc6:	4b24      	ldr	r3, [pc, #144]	; (fd58 <bt_hci_host_num_completed_packets+0xa4>)
    fcc8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    fccc:	069b      	lsls	r3, r3, #26
    fcce:	d541      	bpl.n	fd54 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    fcd0:	7d60      	ldrb	r0, [r4, #21]
    fcd2:	f002 f94d 	bl	11f70 <bt_conn_lookup_index>
	if (!conn) {
    fcd6:	4605      	mov	r5, r0
    fcd8:	b930      	cbnz	r0, fce8 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    fcda:	7d62      	ldrb	r2, [r4, #21]
    fcdc:	2157      	movs	r1, #87	; 0x57
}
    fcde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fce2:	481e      	ldr	r0, [pc, #120]	; (fd5c <bt_hci_host_num_completed_packets+0xa8>)
    fce4:	f00a bed2 	b.w	1aa8c <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fce8:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fcea:	2b01      	cmp	r3, #1
    fcec:	d002      	beq.n	fcf4 <bt_hci_host_num_completed_packets+0x40>
    fcee:	3b07      	subs	r3, #7
    fcf0:	2b01      	cmp	r3, #1
    fcf2:	d80f      	bhi.n	fd14 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    fcf4:	4628      	mov	r0, r5
    fcf6:	f001 fcc3 	bl	11680 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    fcfa:	2105      	movs	r1, #5
    fcfc:	f640 4035 	movw	r0, #3125	; 0xc35
    fd00:	f7ff fa6a 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    fd04:	4604      	mov	r4, r0
    fd06:	b970      	cbnz	r0, fd26 <bt_hci_host_num_completed_packets+0x72>
}
    fd08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    fd0c:	2145      	movs	r1, #69	; 0x45
    fd0e:	4814      	ldr	r0, [pc, #80]	; (fd60 <bt_hci_host_num_completed_packets+0xac>)
    fd10:	f00a bebc 	b.w	1aa8c <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    fd14:	4813      	ldr	r0, [pc, #76]	; (fd64 <bt_hci_host_num_completed_packets+0xb0>)
    fd16:	2157      	movs	r1, #87	; 0x57
    fd18:	f00a feb8 	bl	1aa8c <printk>
		bt_conn_unref(conn);
    fd1c:	4628      	mov	r0, r5
}
    fd1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    fd22:	f001 bcad 	b.w	11680 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    fd26:	f100 0708 	add.w	r7, r0, #8
    fd2a:	2101      	movs	r1, #1
    fd2c:	4638      	mov	r0, r7
    fd2e:	f005 ff4d 	bl	15bcc <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    fd32:	2501      	movs	r5, #1
    fd34:	2104      	movs	r1, #4
    fd36:	7005      	strb	r5, [r0, #0]
    fd38:	4638      	mov	r0, r7
    fd3a:	f005 ff47 	bl	15bcc <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    fd3e:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    fd40:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    fd42:	7085      	strb	r5, [r0, #2]
    fd44:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fd46:	4621      	mov	r1, r4
}
    fd48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fd4c:	f640 4035 	movw	r0, #3125	; 0xc35
    fd50:	f7ff bf88 	b.w	fc64 <bt_hci_cmd_send>
}
    fd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd56:	bf00      	nop
    fd58:	20008000 	.word	0x20008000
    fd5c:	00021232 	.word	0x00021232
    fd60:	00021291 	.word	0x00021291
    fd64:	00021260 	.word	0x00021260

0000fd68 <conn_auto_initiate>:
{
    fd68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fd6a:	7a83      	ldrb	r3, [r0, #10]
{
    fd6c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fd6e:	2b07      	cmp	r3, #7
    fd70:	d15d      	bne.n	fe2e <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    fd72:	1d06      	adds	r6, r0, #4
    fd74:	4630      	mov	r0, r6
    fd76:	f00c f9a0 	bl	1c0ba <atomic_get>
    fd7a:	0483      	lsls	r3, r0, #18
    fd7c:	d41b      	bmi.n	fdb6 <conn_auto_initiate+0x4e>
    fd7e:	78e3      	ldrb	r3, [r4, #3]
    fd80:	b123      	cbz	r3, fd8c <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    fd82:	4b2c      	ldr	r3, [pc, #176]	; (fe34 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    fd84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fd88:	071d      	lsls	r5, r3, #28
    fd8a:	d514      	bpl.n	fdb6 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    fd8c:	2102      	movs	r1, #2
    fd8e:	f242 0016 	movw	r0, #8214	; 0x2016
    fd92:	f7ff fa21 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    fd96:	4605      	mov	r5, r0
    fd98:	b168      	cbz	r0, fdb6 <conn_auto_initiate+0x4e>
    fd9a:	2102      	movs	r1, #2
    fd9c:	3008      	adds	r0, #8
    fd9e:	f005 ff15 	bl	15bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    fda2:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fda4:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    fda6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fda8:	f242 0016 	movw	r0, #8214	; 0x2016
}
    fdac:	b004      	add	sp, #16
    fdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fdb2:	f7ff bf57 	b.w	fc64 <bt_hci_cmd_send>
    fdb6:	4630      	mov	r0, r6
    fdb8:	f00c f97f 	bl	1c0ba <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fdbc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    fdc0:	4d1c      	ldr	r5, [pc, #112]	; (fe34 <conn_auto_initiate+0xcc>)
    fdc2:	f3c0 3100 	ubfx	r1, r0, #12, #1
    fdc6:	d116      	bne.n	fdf6 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    fdc8:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    fdcc:	07d8      	lsls	r0, r3, #31
    fdce:	d512      	bpl.n	fdf6 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    fdd0:	2302      	movs	r3, #2
    fdd2:	4620      	mov	r0, r4
    fdd4:	461a      	mov	r2, r3
    fdd6:	9100      	str	r1, [sp, #0]
    fdd8:	f00c fa23 	bl	1c222 <bt_le_set_phy>
		if (!err) {
    fddc:	4602      	mov	r2, r0
    fdde:	b930      	cbnz	r0, fdee <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fde0:	2180      	movs	r1, #128	; 0x80
    fde2:	4630      	mov	r0, r6
}
    fde4:	b004      	add	sp, #16
    fde6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fdea:	f00c b96c 	b.w	1c0c6 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    fdee:	2145      	movs	r1, #69	; 0x45
    fdf0:	4811      	ldr	r0, [pc, #68]	; (fe38 <conn_auto_initiate+0xd0>)
    fdf2:	f00a fe4b 	bl	1aa8c <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    fdf6:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    fdfa:	069a      	lsls	r2, r3, #26
    fdfc:	d517      	bpl.n	fe2e <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    fdfe:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fe02:	689b      	ldr	r3, [r3, #8]
    fe04:	079b      	lsls	r3, r3, #30
    fe06:	d512      	bpl.n	fe2e <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    fe08:	f10d 010e 	add.w	r1, sp, #14
    fe0c:	a803      	add	r0, sp, #12
    fe0e:	f7ff fa8f 	bl	f330 <hci_le_read_max_data_len>
			if (!err) {
    fe12:	b960      	cbnz	r0, fe2e <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    fe14:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fe18:	4620      	mov	r0, r4
    fe1a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    fe1e:	f00c f9e3 	bl	1c1e8 <bt_le_set_data_len>
				if (err) {
    fe22:	4602      	mov	r2, r0
    fe24:	b118      	cbz	r0, fe2e <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    fe26:	2145      	movs	r1, #69	; 0x45
    fe28:	4804      	ldr	r0, [pc, #16]	; (fe3c <conn_auto_initiate+0xd4>)
    fe2a:	f00a fe2f 	bl	1aa8c <printk>
}
    fe2e:	b004      	add	sp, #16
    fe30:	bd70      	pop	{r4, r5, r6, pc}
    fe32:	bf00      	nop
    fe34:	20008000 	.word	0x20008000
    fe38:	000212b9 	.word	0x000212b9
    fe3c:	000212d8 	.word	0x000212d8

0000fe40 <le_phy_update_complete>:
{
    fe40:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fe42:	6883      	ldr	r3, [r0, #8]
    fe44:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fe48:	4628      	mov	r0, r5
    fe4a:	f001 fc3d 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    fe4e:	4604      	mov	r4, r0
    fe50:	b930      	cbnz	r0, fe60 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe52:	462a      	mov	r2, r5
}
    fe54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe58:	2145      	movs	r1, #69	; 0x45
    fe5a:	480c      	ldr	r0, [pc, #48]	; (fe8c <le_phy_update_complete+0x4c>)
    fe5c:	f00a be16 	b.w	1aa8c <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fe60:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fe62:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fe66:	4628      	mov	r0, r5
    fe68:	f00c f93b 	bl	1c0e2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fe6c:	0603      	lsls	r3, r0, #24
    fe6e:	d507      	bpl.n	fe80 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fe70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fe74:	4628      	mov	r0, r5
    fe76:	f00c f926 	bl	1c0c6 <atomic_or>
		conn_auto_initiate(conn);
    fe7a:	4620      	mov	r0, r4
    fe7c:	f7ff ff74 	bl	fd68 <conn_auto_initiate>
	bt_conn_unref(conn);
    fe80:	4620      	mov	r0, r4
}
    fe82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fe86:	f001 bbfb 	b.w	11680 <bt_conn_unref>
    fe8a:	bf00      	nop
    fe8c:	00020efc 	.word	0x00020efc

0000fe90 <le_remote_feat_complete>:
{
    fe90:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    fe92:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fe94:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    fe98:	4630      	mov	r0, r6
    fe9a:	f001 fc15 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    fe9e:	4604      	mov	r4, r0
    fea0:	b930      	cbnz	r0, feb0 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fea2:	4632      	mov	r2, r6
}
    fea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fea8:	2145      	movs	r1, #69	; 0x45
    feaa:	480b      	ldr	r0, [pc, #44]	; (fed8 <le_remote_feat_complete+0x48>)
    feac:	f00a bdee 	b.w	1aa8c <printk>
	if (!evt->status) {
    feb0:	782b      	ldrb	r3, [r5, #0]
    feb2:	b923      	cbnz	r3, febe <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    feb4:	2208      	movs	r2, #8
    feb6:	1ce9      	adds	r1, r5, #3
    feb8:	30ac      	adds	r0, #172	; 0xac
    feba:	f00c f811 	bl	1bee0 <memcpy>
    febe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fec2:	1d20      	adds	r0, r4, #4
    fec4:	f00c f8ff 	bl	1c0c6 <atomic_or>
	conn_auto_initiate(conn);
    fec8:	4620      	mov	r0, r4
    feca:	f7ff ff4d 	bl	fd68 <conn_auto_initiate>
	bt_conn_unref(conn);
    fece:	4620      	mov	r0, r4
}
    fed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    fed4:	f001 bbd4 	b.w	11680 <bt_conn_unref>
    fed8:	00020efc 	.word	0x00020efc

0000fedc <le_conn_param_neg_reply>:
{
    fedc:	b570      	push	{r4, r5, r6, lr}
    fede:	4606      	mov	r6, r0
    fee0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    fee2:	f242 0021 	movw	r0, #8225	; 0x2021
    fee6:	2103      	movs	r1, #3
    fee8:	f7ff f976 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    feec:	4604      	mov	r4, r0
    feee:	b928      	cbnz	r0, fefc <le_conn_param_neg_reply+0x20>
}
    fef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    fef4:	2145      	movs	r1, #69	; 0x45
    fef6:	4808      	ldr	r0, [pc, #32]	; (ff18 <le_conn_param_neg_reply+0x3c>)
    fef8:	f00a bdc8 	b.w	1aa8c <printk>
    fefc:	2103      	movs	r1, #3
    fefe:	3008      	adds	r0, #8
    ff00:	f005 fe64 	bl	15bcc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    ff04:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ff06:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    ff08:	4621      	mov	r1, r4
}
    ff0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    ff0e:	f242 0021 	movw	r0, #8225	; 0x2021
    ff12:	f7ff bea7 	b.w	fc64 <bt_hci_cmd_send>
    ff16:	bf00      	nop
    ff18:	000212f9 	.word	0x000212f9

0000ff1c <le_conn_param_req>:
{
    ff1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    ff1e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ff20:	78d9      	ldrb	r1, [r3, #3]
    ff22:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ff24:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ff26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff2a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ff2e:	7959      	ldrb	r1, [r3, #5]
    ff30:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ff32:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ff34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff38:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ff3c:	799a      	ldrb	r2, [r3, #6]
    ff3e:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ff40:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ff42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff46:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ff4a:	7a1a      	ldrb	r2, [r3, #8]
    ff4c:	7a5b      	ldrb	r3, [r3, #9]
    ff4e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ff52:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    ff56:	f001 fbb7 	bl	116c8 <bt_conn_lookup_handle>
	if (!conn) {
    ff5a:	4606      	mov	r6, r0
    ff5c:	b950      	cbnz	r0, ff74 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff5e:	2145      	movs	r1, #69	; 0x45
    ff60:	481c      	ldr	r0, [pc, #112]	; (ffd4 <le_conn_param_req+0xb8>)
    ff62:	4622      	mov	r2, r4
    ff64:	f00a fd92 	bl	1aa8c <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    ff68:	2102      	movs	r1, #2
    ff6a:	4620      	mov	r0, r4
    ff6c:	f7ff ffb6 	bl	fedc <le_conn_param_neg_reply>
}
    ff70:	b003      	add	sp, #12
    ff72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    ff74:	4669      	mov	r1, sp
    ff76:	f001 f9f5 	bl	11364 <le_param_req>
    ff7a:	b938      	cbnz	r0, ff8c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ff7c:	211e      	movs	r1, #30
    ff7e:	4620      	mov	r0, r4
    ff80:	f7ff ffac 	bl	fedc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    ff84:	4630      	mov	r0, r6
    ff86:	f001 fb7b 	bl	11680 <bt_conn_unref>
    ff8a:	e7f1      	b.n	ff70 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    ff8c:	210e      	movs	r1, #14
    ff8e:	f242 0020 	movw	r0, #8224	; 0x2020
    ff92:	f7ff f921 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
    ff96:	4605      	mov	r5, r0
    ff98:	2800      	cmp	r0, #0
    ff9a:	d0f3      	beq.n	ff84 <le_conn_param_req+0x68>
    ff9c:	210e      	movs	r1, #14
    ff9e:	3008      	adds	r0, #8
    ffa0:	f005 fe14 	bl	15bcc <net_buf_simple_add>
    ffa4:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ffa6:	220e      	movs	r2, #14
    ffa8:	2100      	movs	r1, #0
    ffaa:	f00b ffc4 	bl	1bf36 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ffae:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffb2:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ffb4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ffb6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ffba:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ffbc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ffbe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffc2:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    ffc6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ffc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ffcc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffce:	f7ff fe49 	bl	fc64 <bt_hci_cmd_send>
    ffd2:	e7d7      	b.n	ff84 <le_conn_param_req+0x68>
    ffd4:	00020efc 	.word	0x00020efc

0000ffd8 <hci_tx_thread>:
{
    ffd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    ffdc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
		BT_ASSERT(err == 0);
    ffe0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1010c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10c>
			ev_count += bt_conn_prepare_events(&events[1]);
    ffe4:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    ffe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ffec:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    ffee:	f36f 3310 	bfc	r3, #12, #5
    fff2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fff6:	f001 fad7 	bl	115a8 <bt_conn_prepare_events>
    fffa:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    fffc:	f04f 32ff 	mov.w	r2, #4294967295
   10000:	f04f 33ff 	mov.w	r3, #4294967295
   10004:	4631      	mov	r1, r6
   10006:	4840      	ldr	r0, [pc, #256]	; (10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>)
   10008:	f00a fb24 	bl	1a654 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1000c:	b158      	cbz	r0, 10026 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x26>
   1000e:	f241 4271 	movw	r2, #5233	; 0x1471
   10012:	4649      	mov	r1, r9
   10014:	483e      	ldr	r0, [pc, #248]	; (10110 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x110>)
   10016:	f00a fd39 	bl	1aa8c <printk>
   1001a:	4040      	eors	r0, r0
   1001c:	f380 8811 	msr	BASEPRI, r0
   10020:	f04f 0003 	mov.w	r0, #3
   10024:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10026:	4d3b      	ldr	r5, [pc, #236]	; (10114 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x114>)
{
   10028:	4f37      	ldr	r7, [pc, #220]	; (10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>)
   1002a:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
   1002e:	b916      	cbnz	r6, 10036 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x36>
	z_impl_k_yield();
   10030:	f009 fa12 	bl	19458 <z_impl_k_yield>
	while (1) {
   10034:	e7d8      	b.n	ffe8 <hci_tx_thread+0x10>
		switch (ev->state) {
   10036:	68fa      	ldr	r2, [r7, #12]
   10038:	f3c2 3204 	ubfx	r2, r2, #12, #5
   1003c:	2a01      	cmp	r2, #1
   1003e:	d953      	bls.n	100e8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe8>
   10040:	2a04      	cmp	r2, #4
   10042:	d15b      	bne.n	100fc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   10044:	7b3b      	ldrb	r3, [r7, #12]
   10046:	2b00      	cmp	r3, #0
   10048:	d151      	bne.n	100ee <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xee>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1004a:	2200      	movs	r2, #0
   1004c:	2300      	movs	r3, #0
   1004e:	4832      	ldr	r0, [pc, #200]	; (10118 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x118>)
   10050:	f005 fc24 	bl	1589c <net_buf_get>
	BT_ASSERT(buf);
   10054:	4604      	mov	r4, r0
   10056:	b958      	cbnz	r0, 10070 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x70>
   10058:	f241 420e 	movw	r2, #5134	; 0x140e
   1005c:	4649      	mov	r1, r9
   1005e:	482c      	ldr	r0, [pc, #176]	; (10110 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x110>)
   10060:	f00a fd14 	bl	1aa8c <printk>
   10064:	4040      	eors	r0, r0
   10066:	f380 8811 	msr	BASEPRI, r0
   1006a:	f04f 0003 	mov.w	r0, #3
   1006e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10070:	f04f 33ff 	mov.w	r3, #4294967295
   10074:	f04f 32ff 	mov.w	r2, #4294967295
   10078:	4658      	mov	r0, fp
   1007a:	f009 fb6b 	bl	19754 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1007e:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
   10082:	b153      	cbz	r3, 1009a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x9a>
		BT_ERR("Uncleared pending sent_cmd");
   10084:	2145      	movs	r1, #69	; 0x45
   10086:	4825      	ldr	r0, [pc, #148]	; (1011c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x11c>)
   10088:	f00a fd00 	bl	1aa8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
   1008c:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   10090:	f005 fc86 	bl	159a0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10094:	2300      	movs	r3, #0
   10096:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
   1009a:	4620      	mov	r0, r4
   1009c:	f005 fcc4 	bl	15a28 <net_buf_ref>
   100a0:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
   100a4:	4620      	mov	r0, r4
   100a6:	f7ff fdd5 	bl	fc54 <bt_send>
	if (err) {
   100aa:	4602      	mov	r2, r0
   100ac:	b1e0      	cbz	r0, 100e8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe8>
		BT_ERR("Unable to send to driver (err %d)", err);
   100ae:	2145      	movs	r1, #69	; 0x45
   100b0:	481b      	ldr	r0, [pc, #108]	; (10120 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x120>)
   100b2:	f00a fceb 	bl	1aa8c <printk>
	z_impl_k_sem_give(sem);
   100b6:	481b      	ldr	r0, [pc, #108]	; (10124 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x124>)
   100b8:	f009 fb10 	bl	196dc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   100bc:	4620      	mov	r0, r4
   100be:	f005 faf7 	bl	156b0 <net_buf_id>
   100c2:	220c      	movs	r2, #12
   100c4:	4b18      	ldr	r3, [pc, #96]	; (10128 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x128>)
   100c6:	211f      	movs	r1, #31
   100c8:	fb02 3000 	mla	r0, r2, r0, r3
   100cc:	4622      	mov	r2, r4
   100ce:	8840      	ldrh	r0, [r0, #2]
   100d0:	f7fe ff20 	bl	ef14 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   100d4:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   100d8:	f005 fc62 	bl	159a0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   100dc:	2300      	movs	r3, #0
		net_buf_unref(buf);
   100de:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   100e0:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
   100e4:	f005 fc5c 	bl	159a0 <net_buf_unref>
	for (; count; ev++, count--) {
   100e8:	3714      	adds	r7, #20
   100ea:	3e01      	subs	r6, #1
   100ec:	e79f      	b.n	1002e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   100ee:	2b01      	cmp	r3, #1
   100f0:	d1fa      	bne.n	100e8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe8>
					conn = CONTAINER_OF(ev->fifo,
   100f2:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   100f4:	3834      	subs	r0, #52	; 0x34
   100f6:	f001 febb 	bl	11e70 <bt_conn_process_tx>
   100fa:	e7f5      	b.n	100e8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe8>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   100fc:	2157      	movs	r1, #87	; 0x57
   100fe:	480b      	ldr	r0, [pc, #44]	; (1012c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x12c>)
   10100:	f00a fcc4 	bl	1aa8c <printk>
   10104:	e7f0      	b.n	100e8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe8>
   10106:	bf00      	nop
   10108:	200082b4 	.word	0x200082b4
   1010c:	00020fee 	.word	0x00020fee
   10110:	0001fb49 	.word	0x0001fb49
   10114:	20008000 	.word	0x20008000
   10118:	20008118 	.word	0x20008118
   1011c:	00021318 	.word	0x00021318
   10120:	0002120b 	.word	0x0002120b
   10124:	200080e0 	.word	0x200080e0
   10128:	20009ee8 	.word	0x20009ee8
   1012c:	00021338 	.word	0x00021338

00010130 <hci_event_prio>:
{
   10130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10134:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   10136:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1013a:	4630      	mov	r0, r6
   1013c:	f00d fa03 	bl	1d546 <net_buf_simple_headroom>
	state->len = buf->len;
   10140:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   10144:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   10146:	f1b8 0f01 	cmp.w	r8, #1
   1014a:	d80b      	bhi.n	10164 <hci_event_prio+0x34>
   1014c:	f641 02ae 	movw	r2, #6318	; 0x18ae
   10150:	491a      	ldr	r1, [pc, #104]	; (101bc <hci_event_prio+0x8c>)
   10152:	481b      	ldr	r0, [pc, #108]	; (101c0 <hci_event_prio+0x90>)
   10154:	f00a fc9a 	bl	1aa8c <printk>
   10158:	4040      	eors	r0, r0
   1015a:	f380 8811 	msr	BASEPRI, r0
   1015e:	f04f 0003 	mov.w	r0, #3
   10162:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   10164:	4630      	mov	r0, r6
   10166:	2102      	movs	r1, #2
   10168:	f005 fd12 	bl	15b90 <net_buf_simple_pull_mem>
   1016c:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1016e:	7800      	ldrb	r0, [r0, #0]
   10170:	f00b ff82 	bl	1c078 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10174:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10176:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10178:	d40b      	bmi.n	10192 <hci_event_prio+0x62>
   1017a:	f641 02b2 	movw	r2, #6322	; 0x18b2
   1017e:	490f      	ldr	r1, [pc, #60]	; (101bc <hci_event_prio+0x8c>)
   10180:	480f      	ldr	r0, [pc, #60]	; (101c0 <hci_event_prio+0x90>)
   10182:	f00a fc83 	bl	1aa8c <printk>
   10186:	4040      	eors	r0, r0
   10188:	f380 8811 	msr	BASEPRI, r0
   1018c:	f04f 0003 	mov.w	r0, #3
   10190:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   10192:	2305      	movs	r3, #5
   10194:	4621      	mov	r1, r4
   10196:	4a0b      	ldr	r2, [pc, #44]	; (101c4 <hci_event_prio+0x94>)
   10198:	7838      	ldrb	r0, [r7, #0]
   1019a:	f7fe fdb3 	bl	ed04 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1019e:	07b3      	lsls	r3, r6, #30
   101a0:	d507      	bpl.n	101b2 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   101a2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   101a4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   101a8:	fa10 f585 	uxtah	r5, r0, r5
   101ac:	60a5      	str	r5, [r4, #8]
}
   101ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   101b2:	4620      	mov	r0, r4
}
   101b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   101b8:	f005 bbf2 	b.w	159a0 <net_buf_unref>
   101bc:	00020fee 	.word	0x00020fee
   101c0:	0001fb49 	.word	0x0001fb49
   101c4:	0001ebfc 	.word	0x0001ebfc

000101c8 <bt_recv>:
{
   101c8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   101ca:	7d02      	ldrb	r2, [r0, #20]
   101cc:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   101ce:	2a01      	cmp	r2, #1
   101d0:	d007      	beq.n	101e2 <bt_recv+0x1a>
   101d2:	2a03      	cmp	r2, #3
   101d4:	d113      	bne.n	101fe <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   101d6:	480f      	ldr	r0, [pc, #60]	; (10214 <bt_recv+0x4c>)
   101d8:	4629      	mov	r1, r5
   101da:	f005 fbb3 	bl	15944 <net_buf_put>
		return 0;
   101de:	2000      	movs	r0, #0
   101e0:	e00c      	b.n	101fc <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   101e2:	6883      	ldr	r3, [r0, #8]
   101e4:	7818      	ldrb	r0, [r3, #0]
   101e6:	f00b ff47 	bl	1c078 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   101ea:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   101ec:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   101ee:	d502      	bpl.n	101f6 <bt_recv+0x2e>
			hci_event_prio(buf);
   101f0:	4628      	mov	r0, r5
   101f2:	f7ff ff9d 	bl	10130 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   101f6:	f014 0002 	ands.w	r0, r4, #2
   101fa:	d1ec      	bne.n	101d6 <bt_recv+0xe>
}
   101fc:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   101fe:	2145      	movs	r1, #69	; 0x45
   10200:	4805      	ldr	r0, [pc, #20]	; (10218 <bt_recv+0x50>)
   10202:	f00a fc43 	bl	1aa8c <printk>
		net_buf_unref(buf);
   10206:	4628      	mov	r0, r5
   10208:	f005 fbca 	bl	159a0 <net_buf_unref>
		return -EINVAL;
   1020c:	f06f 0015 	mvn.w	r0, #21
   10210:	e7f4      	b.n	101fc <bt_recv+0x34>
   10212:	bf00      	nop
   10214:	200080fc 	.word	0x200080fc
   10218:	0002135e 	.word	0x0002135e

0001021c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1021c:	4a08      	ldr	r2, [pc, #32]	; (10240 <bt_hci_driver_register+0x24>)
{
   1021e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   10220:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
   10224:	b930      	cbnz	r0, 10234 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   10226:	68d9      	ldr	r1, [r3, #12]
   10228:	b139      	cbz	r1, 1023a <bt_hci_driver_register+0x1e>
   1022a:	6919      	ldr	r1, [r3, #16]
   1022c:	b129      	cbz	r1, 1023a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1022e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
   10232:	4770      	bx	lr
		return -EALREADY;
   10234:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10238:	4770      	bx	lr
		return -EINVAL;
   1023a:	f06f 0015 	mvn.w	r0, #21
}
   1023e:	4770      	bx	lr
   10240:	20008000 	.word	0x20008000

00010244 <bt_finalize_init>:
{
   10244:	b508      	push	{r3, lr}
   10246:	2102      	movs	r1, #2
   10248:	4803      	ldr	r0, [pc, #12]	; (10258 <bt_finalize_init+0x14>)
   1024a:	f00b ff3c 	bl	1c0c6 <atomic_or>
}
   1024e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   10252:	2000      	movs	r0, #0
   10254:	f7ff bb68 	b.w	f928 <bt_le_scan_update>
   10258:	20008094 	.word	0x20008094

0001025c <bt_init>:
{
   1025c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1025e:	4d60      	ldr	r5, [pc, #384]	; (103e0 <bt_init+0x184>)
   10260:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   10264:	6899      	ldr	r1, [r3, #8]
   10266:	f011 0101 	ands.w	r1, r1, #1
   1026a:	d11e      	bne.n	102aa <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1026c:	f640 4003 	movw	r0, #3075	; 0xc03
   10270:	aa01      	add	r2, sp, #4
   10272:	f7fe fffb 	bl	f26c <bt_hci_cmd_send_sync>
		if (err) {
   10276:	4604      	mov	r4, r0
   10278:	2800      	cmp	r0, #0
   1027a:	f040 80ad 	bne.w	103d8 <bt_init+0x17c>
	uint8_t status = buf->data[0];
   1027e:	9b01      	ldr	r3, [sp, #4]
   10280:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10282:	781b      	ldrb	r3, [r3, #0]
   10284:	b973      	cbnz	r3, 102a4 <bt_init+0x48>
	scan_dev_found_cb = NULL;
   10286:	4a57      	ldr	r2, [pc, #348]	; (103e4 <bt_init+0x188>)
   10288:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1028a:	f105 0394 	add.w	r3, r5, #148	; 0x94
   1028e:	4618      	mov	r0, r3
   10290:	f00b ff13 	bl	1c0ba <atomic_get>
   10294:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10298:	e8d3 2fef 	ldaex	r2, [r3]
   1029c:	e8c3 0fe1 	stlex	r1, r0, [r3]
   102a0:	2900      	cmp	r1, #0
   102a2:	d1f9      	bne.n	10298 <bt_init+0x3c>
		net_buf_unref(rsp);
   102a4:	9801      	ldr	r0, [sp, #4]
   102a6:	f005 fb7b 	bl	159a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   102aa:	2100      	movs	r1, #0
   102ac:	f241 0003 	movw	r0, #4099	; 0x1003
   102b0:	aa01      	add	r2, sp, #4
   102b2:	f7fe ffdb 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   102b6:	4604      	mov	r4, r0
   102b8:	2800      	cmp	r0, #0
   102ba:	f040 808d 	bne.w	103d8 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   102be:	9b01      	ldr	r3, [sp, #4]
   102c0:	2208      	movs	r2, #8
   102c2:	6899      	ldr	r1, [r3, #8]
   102c4:	4848      	ldr	r0, [pc, #288]	; (103e8 <bt_init+0x18c>)
   102c6:	3101      	adds	r1, #1
   102c8:	f00b fe0a 	bl	1bee0 <memcpy>
	net_buf_unref(rsp);
   102cc:	9801      	ldr	r0, [sp, #4]
   102ce:	f005 fb67 	bl	159a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   102d2:	4621      	mov	r1, r4
   102d4:	f241 0001 	movw	r0, #4097	; 0x1001
   102d8:	aa01      	add	r2, sp, #4
   102da:	f7fe ffc7 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   102de:	4604      	mov	r4, r0
   102e0:	2800      	cmp	r0, #0
   102e2:	d179      	bne.n	103d8 <bt_init+0x17c>
	read_local_ver_complete(rsp);
   102e4:	9801      	ldr	r0, [sp, #4]
   102e6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   102e8:	785a      	ldrb	r2, [r3, #1]
   102ea:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   102ee:	78d9      	ldrb	r1, [r3, #3]
   102f0:	789a      	ldrb	r2, [r3, #2]
   102f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   102f6:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   102f8:	791a      	ldrb	r2, [r3, #4]
   102fa:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   102fe:	7a19      	ldrb	r1, [r3, #8]
   10300:	79da      	ldrb	r2, [r3, #7]
   10302:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10306:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10308:	795a      	ldrb	r2, [r3, #5]
   1030a:	799b      	ldrb	r3, [r3, #6]
   1030c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   10310:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   10312:	f005 fb45 	bl	159a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10316:	4621      	mov	r1, r4
   10318:	f241 0002 	movw	r0, #4098	; 0x1002
   1031c:	aa01      	add	r2, sp, #4
   1031e:	f7fe ffa5 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   10322:	4604      	mov	r4, r0
   10324:	2800      	cmp	r0, #0
   10326:	d157      	bne.n	103d8 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
   10328:	9b01      	ldr	r3, [sp, #4]
   1032a:	2240      	movs	r2, #64	; 0x40
   1032c:	6899      	ldr	r1, [r3, #8]
   1032e:	482f      	ldr	r0, [pc, #188]	; (103ec <bt_init+0x190>)
   10330:	3101      	adds	r1, #1
   10332:	f00b fdd5 	bl	1bee0 <memcpy>
	net_buf_unref(rsp);
   10336:	9801      	ldr	r0, [sp, #4]
   10338:	f005 fb32 	bl	159a0 <net_buf_unref>
		err = prng_init();
   1033c:	f000 fed6 	bl	110ec <prng_init>
		if (err) {
   10340:	4604      	mov	r4, r0
   10342:	2800      	cmp	r0, #0
   10344:	d148      	bne.n	103d8 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   10346:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1034a:	069f      	lsls	r7, r3, #26
   1034c:	d40e      	bmi.n	1036c <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
   1034e:	2157      	movs	r1, #87	; 0x57
   10350:	4827      	ldr	r0, [pc, #156]	; (103f0 <bt_init+0x194>)
   10352:	f00a fb9b 	bl	1aa8c <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10356:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1035a:	065e      	lsls	r6, r3, #25
   1035c:	d44c      	bmi.n	103f8 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
   1035e:	2145      	movs	r1, #69	; 0x45
   10360:	4824      	ldr	r0, [pc, #144]	; (103f4 <bt_init+0x198>)
   10362:	f00a fb93 	bl	1aa8c <printk>
		return -ENODEV;
   10366:	f06f 0412 	mvn.w	r4, #18
   1036a:	e035      	b.n	103d8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   1036c:	2107      	movs	r1, #7
   1036e:	f640 4033 	movw	r0, #3123	; 0xc33
   10372:	f7fe ff31 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   10376:	4607      	mov	r7, r0
   10378:	b910      	cbnz	r0, 10380 <bt_init+0x124>
		return -ENOBUFS;
   1037a:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1037e:	e02b      	b.n	103d8 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
   10380:	2107      	movs	r1, #7
   10382:	3008      	adds	r0, #8
   10384:	f005 fc22 	bl	15bcc <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
   10388:	4621      	mov	r1, r4
   1038a:	2207      	movs	r2, #7
   1038c:	4606      	mov	r6, r0
   1038e:	f00b fdd2 	bl	1bf36 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   10392:	231b      	movs	r3, #27
   10394:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   10396:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   10398:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   1039a:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   1039c:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   1039e:	4639      	mov	r1, r7
   103a0:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   103a4:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   103a6:	f7fe ff61 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   103aa:	4604      	mov	r4, r0
   103ac:	b9a0      	cbnz	r0, 103d8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   103ae:	2101      	movs	r1, #1
   103b0:	f640 4031 	movw	r0, #3121	; 0xc31
   103b4:	f7fe ff10 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   103b8:	4606      	mov	r6, r0
   103ba:	2800      	cmp	r0, #0
   103bc:	d0dd      	beq.n	1037a <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
   103be:	2101      	movs	r1, #1
   103c0:	3008      	adds	r0, #8
   103c2:	f00d f8d8 	bl	1d576 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   103c6:	4622      	mov	r2, r4
   103c8:	4631      	mov	r1, r6
   103ca:	f640 4031 	movw	r0, #3121	; 0xc31
   103ce:	f7fe ff4d 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   103d2:	4604      	mov	r4, r0
   103d4:	2800      	cmp	r0, #0
   103d6:	d0be      	beq.n	10356 <bt_init+0xfa>
}
   103d8:	4620      	mov	r0, r4
   103da:	b003      	add	sp, #12
   103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103de:	bf00      	nop
   103e0:	20008000 	.word	0x20008000
   103e4:	20009f0c 	.word	0x20009f0c
   103e8:	2000803c 	.word	0x2000803c
   103ec:	20008044 	.word	0x20008044
   103f0:	00021377 	.word	0x00021377
   103f4:	000213aa 	.word	0x000213aa
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   103f8:	2100      	movs	r1, #0
   103fa:	f242 0003 	movw	r0, #8195	; 0x2003
   103fe:	aa01      	add	r2, sp, #4
   10400:	f7fe ff34 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   10404:	4604      	mov	r4, r0
   10406:	2800      	cmp	r0, #0
   10408:	d1e6      	bne.n	103d8 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1040a:	9b01      	ldr	r3, [sp, #4]
   1040c:	2208      	movs	r2, #8
   1040e:	6899      	ldr	r1, [r3, #8]
   10410:	48a6      	ldr	r0, [pc, #664]	; (106ac <bt_init+0x450>)
   10412:	3101      	adds	r1, #1
   10414:	f00b fd64 	bl	1bee0 <memcpy>
	net_buf_unref(rsp);
   10418:	9801      	ldr	r0, [sp, #4]
   1041a:	f005 fac1 	bl	159a0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1041e:	4621      	mov	r1, r4
   10420:	f242 0002 	movw	r0, #8194	; 0x2002
   10424:	aa01      	add	r2, sp, #4
   10426:	f7fe ff21 	bl	f26c <bt_hci_cmd_send_sync>
		if (err) {
   1042a:	4604      	mov	r4, r0
   1042c:	2800      	cmp	r0, #0
   1042e:	d1d3      	bne.n	103d8 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
   10430:	9b01      	ldr	r3, [sp, #4]
   10432:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10434:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10438:	b291      	uxth	r1, r2
   1043a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
   1043e:	b121      	cbz	r1, 1044a <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10440:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   10442:	489b      	ldr	r0, [pc, #620]	; (106b0 <bt_init+0x454>)
   10444:	4611      	mov	r1, r2
   10446:	f00d fe2f 	bl	1e0a8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1044a:	9801      	ldr	r0, [sp, #4]
   1044c:	f005 faa8 	bl	159a0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10450:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   10454:	f016 0620 	ands.w	r6, r6, #32
   10458:	f000 80d4 	beq.w	10604 <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1045c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   10460:	071c      	lsls	r4, r3, #28
   10462:	d512      	bpl.n	1048a <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10464:	2100      	movs	r1, #0
   10466:	f242 001c 	movw	r0, #8220	; 0x201c
   1046a:	aa01      	add	r2, sp, #4
   1046c:	f7fe fefe 	bl	f26c <bt_hci_cmd_send_sync>
		if (err) {
   10470:	4604      	mov	r4, r0
   10472:	2800      	cmp	r0, #0
   10474:	d1b0      	bne.n	103d8 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
   10476:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10478:	6883      	ldr	r3, [r0, #8]
   1047a:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1047e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   10482:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   10486:	f005 fa8b 	bl	159a0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1048a:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   1048e:	0698      	lsls	r0, r3, #26
   10490:	d524      	bpl.n	104dc <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10492:	4668      	mov	r0, sp
   10494:	f10d 0102 	add.w	r1, sp, #2
   10498:	f7fe ff4a 	bl	f330 <hci_le_read_max_data_len>
		if (err) {
   1049c:	4604      	mov	r4, r0
   1049e:	2800      	cmp	r0, #0
   104a0:	d19a      	bne.n	103d8 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104a2:	2104      	movs	r1, #4
   104a4:	f242 0024 	movw	r0, #8228	; 0x2024
   104a8:	f7fe fe96 	bl	f1d8 <bt_hci_cmd_create>
		if (!buf) {
   104ac:	4606      	mov	r6, r0
   104ae:	2800      	cmp	r0, #0
   104b0:	f43f af63 	beq.w	1037a <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
   104b4:	2104      	movs	r1, #4
   104b6:	3008      	adds	r0, #8
   104b8:	f005 fb88 	bl	15bcc <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   104bc:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104c0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   104c2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   104c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104c8:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   104ca:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104cc:	f242 0024 	movw	r0, #8228	; 0x2024
   104d0:	f7fe fecc 	bl	f26c <bt_hci_cmd_send_sync>
		if (err) {
   104d4:	4604      	mov	r4, r0
   104d6:	2800      	cmp	r0, #0
   104d8:	f47f af7e 	bne.w	103d8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   104dc:	2108      	movs	r1, #8
   104de:	f242 0001 	movw	r0, #8193	; 0x2001
   104e2:	f7fe fe79 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   104e6:	4604      	mov	r4, r0
   104e8:	2800      	cmp	r0, #0
   104ea:	f43f af46 	beq.w	1037a <bt_init+0x11e>
   104ee:	2108      	movs	r1, #8
   104f0:	4408      	add	r0, r1
   104f2:	f005 fb6b 	bl	15bcc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   104f6:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   104fa:	f012 0f02 	tst.w	r2, #2
   104fe:	bf14      	ite	ne
   10500:	232f      	movne	r3, #47	; 0x2f
   10502:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10504:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10506:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1050a:	bf48      	it	mi
   1050c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10510:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   10514:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10518:	bf18      	it	ne
   1051a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   1051e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   10520:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10524:	4621      	mov	r1, r4
   10526:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   10528:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1052a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1052c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1052e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10530:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   10532:	71c2      	strb	r2, [r0, #7]
   10534:	f242 0001 	movw	r0, #8193	; 0x2001
   10538:	f7fe fe98 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   1053c:	4604      	mov	r4, r0
   1053e:	2800      	cmp	r0, #0
   10540:	f47f af4a 	bne.w	103d8 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10544:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10548:	069a      	lsls	r2, r3, #26
   1054a:	d41e      	bmi.n	1058a <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
   1054c:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   10550:	b9d9      	cbnz	r1, 1058a <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10552:	f241 0005 	movw	r0, #4101	; 0x1005
   10556:	aa01      	add	r2, sp, #4
   10558:	f7fe fe88 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   1055c:	4604      	mov	r4, r0
   1055e:	2800      	cmp	r0, #0
   10560:	f47f af3a 	bne.w	103d8 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
   10564:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   10568:	b963      	cbnz	r3, 10584 <bt_init+0x328>
   1056a:	9b01      	ldr	r3, [sp, #4]
   1056c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1056e:	785a      	ldrb	r2, [r3, #1]
   10570:	7899      	ldrb	r1, [r3, #2]
   10572:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10576:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1057a:	889a      	ldrh	r2, [r3, #4]
   1057c:	484c      	ldr	r0, [pc, #304]	; (106b0 <bt_init+0x454>)
   1057e:	4611      	mov	r1, r2
   10580:	f00d fd92 	bl	1e0a8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10584:	9801      	ldr	r0, [sp, #4]
   10586:	f005 fa0b 	bl	159a0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1058a:	2108      	movs	r1, #8
   1058c:	f640 4001 	movw	r0, #3073	; 0xc01
   10590:	f7fe fe22 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   10594:	4604      	mov	r4, r0
   10596:	2800      	cmp	r0, #0
   10598:	f43f aeef 	beq.w	1037a <bt_init+0x11e>
   1059c:	2108      	movs	r1, #8
   1059e:	4408      	add	r0, r1
   105a0:	f005 fb14 	bl	15bcc <net_buf_simple_add>
	dst[0] = val;
   105a4:	2310      	movs	r3, #16
   105a6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   105a8:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   105aa:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   105ac:	7043      	strb	r3, [r0, #1]
   105ae:	2602      	movs	r6, #2
   105b0:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   105b2:	4621      	mov	r1, r4
	dst[0] = val;
   105b4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   105b6:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   105b8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   105ba:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   105bc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   105be:	71c3      	strb	r3, [r0, #7]
   105c0:	f640 4001 	movw	r0, #3073	; 0xc01
   105c4:	f7fe fe52 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   105c8:	4604      	mov	r4, r0
   105ca:	2800      	cmp	r0, #0
   105cc:	f47f af04 	bne.w	103d8 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   105d0:	4601      	mov	r1, r0
   105d2:	aa01      	add	r2, sp, #4
   105d4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   105d8:	f7fe fe48 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   105dc:	4604      	mov	r4, r0
   105de:	b360      	cbz	r0, 1063a <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
   105e0:	2157      	movs	r1, #87	; 0x57
   105e2:	4834      	ldr	r0, [pc, #208]	; (106b4 <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
   105e4:	f00a fa52 	bl	1aa8c <printk>
		err = bt_conn_init();
   105e8:	f001 fcd0 	bl	11f8c <bt_conn_init>
		if (err) {
   105ec:	4604      	mov	r4, r0
   105ee:	2800      	cmp	r0, #0
   105f0:	f47f aef2 	bne.w	103d8 <bt_init+0x17c>
		if (!bt_dev.id_count) {
   105f4:	79eb      	ldrb	r3, [r5, #7]
   105f6:	2b00      	cmp	r3, #0
   105f8:	d150      	bne.n	1069c <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
   105fa:	2149      	movs	r1, #73	; 0x49
   105fc:	482e      	ldr	r0, [pc, #184]	; (106b8 <bt_init+0x45c>)
   105fe:	f00a fa45 	bl	1aa8c <printk>
			return 0;
   10602:	e6e9      	b.n	103d8 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10604:	2102      	movs	r1, #2
   10606:	f640 406d 	movw	r0, #3181	; 0xc6d
   1060a:	f7fe fde5 	bl	f1d8 <bt_hci_cmd_create>
		if (!buf) {
   1060e:	4604      	mov	r4, r0
   10610:	2800      	cmp	r0, #0
   10612:	f43f aeb2 	beq.w	1037a <bt_init+0x11e>
   10616:	2102      	movs	r1, #2
   10618:	3008      	adds	r0, #8
   1061a:	f005 fad7 	bl	15bcc <net_buf_simple_add>
		cp_le->le = 0x01;
   1061e:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10620:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   10622:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10624:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10626:	4632      	mov	r2, r6
   10628:	f640 406d 	movw	r0, #3181	; 0xc6d
   1062c:	f7fe fe1e 	bl	f26c <bt_hci_cmd_send_sync>
		if (err) {
   10630:	4604      	mov	r4, r0
   10632:	2800      	cmp	r0, #0
   10634:	f43f af12 	beq.w	1045c <bt_init+0x200>
   10638:	e6ce      	b.n	103d8 <bt_init+0x17c>
	net_buf_unref(rsp);
   1063a:	9801      	ldr	r0, [sp, #4]
   1063c:	f005 f9b0 	bl	159a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10640:	4621      	mov	r1, r4
   10642:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10646:	aa01      	add	r2, sp, #4
   10648:	f7fe fe10 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   1064c:	4604      	mov	r4, r0
   1064e:	b110      	cbz	r0, 10656 <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
   10650:	2157      	movs	r1, #87	; 0x57
   10652:	481a      	ldr	r0, [pc, #104]	; (106bc <bt_init+0x460>)
   10654:	e7c6      	b.n	105e4 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   10656:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10658:	4632      	mov	r2, r6
   1065a:	6899      	ldr	r1, [r3, #8]
   1065c:	4818      	ldr	r0, [pc, #96]	; (106c0 <bt_init+0x464>)
   1065e:	3101      	adds	r1, #1
   10660:	f00b fc3e 	bl	1bee0 <memcpy>
	net_buf_unref(rsp);
   10664:	9801      	ldr	r0, [sp, #4]
   10666:	f005 f99b 	bl	159a0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1066a:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   1066e:	075b      	lsls	r3, r3, #29
   10670:	d5ba      	bpl.n	105e8 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10672:	4621      	mov	r1, r4
   10674:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10678:	aa01      	add	r2, sp, #4
   1067a:	f7fe fdf7 	bl	f26c <bt_hci_cmd_send_sync>
		if (err) {
   1067e:	b110      	cbz	r0, 10686 <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
   10680:	2157      	movs	r1, #87	; 0x57
   10682:	4810      	ldr	r0, [pc, #64]	; (106c4 <bt_init+0x468>)
   10684:	e7ae      	b.n	105e4 <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
   10686:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   10688:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1068a:	480f      	ldr	r0, [pc, #60]	; (106c8 <bt_init+0x46c>)
   1068c:	6899      	ldr	r1, [r3, #8]
   1068e:	4411      	add	r1, r2
   10690:	f00b fc26 	bl	1bee0 <memcpy>
		net_buf_unref(rsp);
   10694:	9801      	ldr	r0, [sp, #4]
   10696:	f005 f983 	bl	159a0 <net_buf_unref>
   1069a:	e7a5      	b.n	105e8 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1069c:	2104      	movs	r1, #4
   1069e:	480b      	ldr	r0, [pc, #44]	; (106cc <bt_init+0x470>)
   106a0:	f00b fd11 	bl	1c0c6 <atomic_or>
	bt_finalize_init();
   106a4:	f7ff fdce 	bl	10244 <bt_finalize_init>
	return 0;
   106a8:	e696      	b.n	103d8 <bt_init+0x17c>
   106aa:	bf00      	nop
   106ac:	20008098 	.word	0x20008098
   106b0:	200080c8 	.word	0x200080c8
   106b4:	000213d3 	.word	0x000213d3
   106b8:	00021458 	.word	0x00021458
   106bc:	000213fc 	.word	0x000213fc
   106c0:	20008085 	.word	0x20008085
   106c4:	0002142a 	.word	0x0002142a
   106c8:	20008084 	.word	0x20008084
   106cc:	20008094 	.word	0x20008094

000106d0 <init_work>:
{
   106d0:	b510      	push	{r4, lr}
	err = bt_init();
   106d2:	f7ff fdc3 	bl	1025c <bt_init>
	if (ready_cb) {
   106d6:	4b03      	ldr	r3, [pc, #12]	; (106e4 <init_work+0x14>)
   106d8:	681b      	ldr	r3, [r3, #0]
   106da:	b113      	cbz	r3, 106e2 <init_work+0x12>
}
   106dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   106e0:	4718      	bx	r3
}
   106e2:	bd10      	pop	{r4, pc}
   106e4:	20009f00 	.word	0x20009f00

000106e8 <bt_enable>:
{
   106e8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   106ec:	4d35      	ldr	r5, [pc, #212]	; (107c4 <bt_enable+0xdc>)
{
   106ee:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   106f0:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   106f4:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   106f6:	b94b      	cbnz	r3, 1070c <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   106f8:	2145      	movs	r1, #69	; 0x45
   106fa:	4833      	ldr	r0, [pc, #204]	; (107c8 <bt_enable+0xe0>)
   106fc:	f00a f9c6 	bl	1aa8c <printk>
		return -ENODEV;
   10700:	f06f 0412 	mvn.w	r4, #18
}
   10704:	4620      	mov	r0, r4
   10706:	b008      	add	sp, #32
   10708:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1070c:	2101      	movs	r1, #1
   1070e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10712:	f00b fcd8 	bl	1c0c6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10716:	07c2      	lsls	r2, r0, #31
   10718:	d451      	bmi.n	107be <bt_enable+0xd6>
		err = bt_settings_init();
   1071a:	f7fe f913 	bl	e944 <bt_settings_init>
		if (err) {
   1071e:	4604      	mov	r4, r0
   10720:	2800      	cmp	r0, #0
   10722:	d1ef      	bne.n	10704 <bt_enable+0x1c>
	ready_cb = cb;
   10724:	4b29      	ldr	r3, [pc, #164]	; (107cc <bt_enable+0xe4>)
   10726:	f04f 0800 	mov.w	r8, #0
   1072a:	f04f 0900 	mov.w	r9, #0
   1072e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10730:	f06f 0308 	mvn.w	r3, #8
   10734:	e9cd 0000 	strd	r0, r0, [sp]
   10738:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1073c:	9004      	str	r0, [sp, #16]
   1073e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10742:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10746:	4b22      	ldr	r3, [pc, #136]	; (107d0 <bt_enable+0xe8>)
   10748:	4922      	ldr	r1, [pc, #136]	; (107d4 <bt_enable+0xec>)
   1074a:	4823      	ldr	r0, [pc, #140]	; (107d8 <bt_enable+0xf0>)
   1074c:	f009 f8ee 	bl	1992c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10750:	4922      	ldr	r1, [pc, #136]	; (107dc <bt_enable+0xf4>)
   10752:	4821      	ldr	r0, [pc, #132]	; (107d8 <bt_enable+0xf0>)
   10754:	f00d fcc2 	bl	1e0dc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10758:	f06f 0307 	mvn.w	r3, #7
   1075c:	f640 0298 	movw	r2, #2200	; 0x898
   10760:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10764:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10768:	e9cd 4400 	strd	r4, r4, [sp]
   1076c:	4b1c      	ldr	r3, [pc, #112]	; (107e0 <bt_enable+0xf8>)
   1076e:	491d      	ldr	r1, [pc, #116]	; (107e4 <bt_enable+0xfc>)
   10770:	9404      	str	r4, [sp, #16]
   10772:	481d      	ldr	r0, [pc, #116]	; (107e8 <bt_enable+0x100>)
   10774:	f009 f8da 	bl	1992c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10778:	491c      	ldr	r1, [pc, #112]	; (107ec <bt_enable+0x104>)
   1077a:	481b      	ldr	r0, [pc, #108]	; (107e8 <bt_enable+0x100>)
   1077c:	f00d fcae 	bl	1e0dc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   10780:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   10784:	68db      	ldr	r3, [r3, #12]
   10786:	4798      	blx	r3
	if (err) {
   10788:	4604      	mov	r4, r0
   1078a:	b128      	cbz	r0, 10798 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   1078c:	4602      	mov	r2, r0
   1078e:	2145      	movs	r1, #69	; 0x45
   10790:	4817      	ldr	r0, [pc, #92]	; (107f0 <bt_enable+0x108>)
   10792:	f00a f97b 	bl	1aa8c <printk>
		return err;
   10796:	e7b5      	b.n	10704 <bt_enable+0x1c>
	if (!cb) {
   10798:	b926      	cbnz	r6, 107a4 <bt_enable+0xbc>
}
   1079a:	b008      	add	sp, #32
   1079c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   107a0:	f7ff bd5c 	b.w	1025c <bt_init>
   107a4:	2101      	movs	r1, #1
   107a6:	f105 0090 	add.w	r0, r5, #144	; 0x90
   107aa:	f00b fc8c 	bl	1c0c6 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   107ae:	07c3      	lsls	r3, r0, #31
   107b0:	d4a8      	bmi.n	10704 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   107b2:	4810      	ldr	r0, [pc, #64]	; (107f4 <bt_enable+0x10c>)
   107b4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   107b8:	f00d fc1e 	bl	1dff8 <k_queue_append>
   107bc:	e7a2      	b.n	10704 <bt_enable+0x1c>
		return -EALREADY;
   107be:	f06f 0444 	mvn.w	r4, #68	; 0x44
   107c2:	e79f      	b.n	10704 <bt_enable+0x1c>
   107c4:	20008000 	.word	0x20008000
   107c8:	0002148a 	.word	0x0002148a
   107cc:	20009f00 	.word	0x20009f00
   107d0:	0000ffd9 	.word	0x0000ffd9
   107d4:	2000faf8 	.word	0x2000faf8
   107d8:	20008a00 	.word	0x20008a00
   107dc:	000214a8 	.word	0x000214a8
   107e0:	0000edf1 	.word	0x0000edf1
   107e4:	2000f260 	.word	0x2000f260
   107e8:	20008970 	.word	0x20008970
   107ec:	000214ae 	.word	0x000214ae
   107f0:	000214b4 	.word	0x000214b4
   107f4:	200098e0 	.word	0x200098e0

000107f8 <bt_get_name>:
}
   107f8:	4800      	ldr	r0, [pc, #0]	; (107fc <bt_get_name+0x4>)
   107fa:	4770      	bx	lr
   107fc:	0001f79d 	.word	0x0001f79d

00010800 <bt_id_create>:
{
   10800:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10802:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10804:	4605      	mov	r5, r0
   10806:	b918      	cbnz	r0, 10810 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10808:	b314      	cbz	r4, 10850 <bt_id_create+0x50>
		return -EINVAL;
   1080a:	f06f 0415 	mvn.w	r4, #21
   1080e:	e01c      	b.n	1084a <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10810:	2300      	movs	r3, #0
   10812:	4669      	mov	r1, sp
   10814:	9300      	str	r3, [sp, #0]
   10816:	f8cd 3003 	str.w	r3, [sp, #3]
   1081a:	f00b fc5f 	bl	1c0dc <bt_addr_le_cmp>
   1081e:	2800      	cmp	r0, #0
   10820:	d0f2      	beq.n	10808 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10822:	782b      	ldrb	r3, [r5, #0]
   10824:	2b01      	cmp	r3, #1
   10826:	d104      	bne.n	10832 <bt_id_create+0x32>
   10828:	79ab      	ldrb	r3, [r5, #6]
   1082a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1082e:	2bc0      	cmp	r3, #192	; 0xc0
   10830:	d004      	beq.n	1083c <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   10832:	2145      	movs	r1, #69	; 0x45
   10834:	480d      	ldr	r0, [pc, #52]	; (1086c <bt_id_create+0x6c>)
   10836:	f00a f929 	bl	1aa8c <printk>
			return -EINVAL;
   1083a:	e7e6      	b.n	1080a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1083c:	4628      	mov	r0, r5
   1083e:	f7fe f949 	bl	ead4 <id_find>
   10842:	2800      	cmp	r0, #0
   10844:	dbe0      	blt.n	10808 <bt_id_create+0x8>
			return -EALREADY;
   10846:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   1084a:	4620      	mov	r0, r4
   1084c:	b003      	add	sp, #12
   1084e:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10850:	4b07      	ldr	r3, [pc, #28]	; (10870 <bt_id_create+0x70>)
   10852:	79dc      	ldrb	r4, [r3, #7]
   10854:	2c01      	cmp	r4, #1
   10856:	d006      	beq.n	10866 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10858:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   1085a:	4629      	mov	r1, r5
   1085c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1085e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   10860:	f7fe fa90 	bl	ed84 <id_create.constprop.0>
	return new_id;
   10864:	e7f1      	b.n	1084a <bt_id_create+0x4a>
		return -ENOMEM;
   10866:	f06f 040b 	mvn.w	r4, #11
   1086a:	e7ee      	b.n	1084a <bt_id_create+0x4a>
   1086c:	000214d5 	.word	0x000214d5
   10870:	20008000 	.word	0x20008000

00010874 <bt_setup_public_id_addr>:
{
   10874:	b570      	push	{r4, r5, r6, lr}
   10876:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10878:	2100      	movs	r1, #0
   1087a:	f241 0009 	movw	r0, #4105	; 0x1009
   1087e:	aa01      	add	r2, sp, #4
   10880:	f7fe fcf4 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   10884:	4e1d      	ldr	r6, [pc, #116]	; (108fc <bt_setup_public_id_addr+0x88>)
   10886:	4604      	mov	r4, r0
   10888:	b138      	cbz	r0, 1089a <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   1088a:	2157      	movs	r1, #87	; 0x57
   1088c:	481c      	ldr	r0, [pc, #112]	; (10900 <bt_setup_public_id_addr+0x8c>)
   1088e:	f00a f8fd 	bl	1aa8c <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   10892:	2300      	movs	r3, #0
   10894:	71f3      	strb	r3, [r6, #7]
}
   10896:	b006      	add	sp, #24
   10898:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1089a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   1089c:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1089e:	689d      	ldr	r5, [r3, #8]
   108a0:	a904      	add	r1, sp, #16
   108a2:	3501      	adds	r5, #1
   108a4:	9004      	str	r0, [sp, #16]
   108a6:	f8ad 0014 	strh.w	r0, [sp, #20]
   108aa:	4628      	mov	r0, r5
   108ac:	f00b fb07 	bl	1bebe <memcmp>
   108b0:	b918      	cbnz	r0, 108ba <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   108b2:	9801      	ldr	r0, [sp, #4]
   108b4:	f005 f874 	bl	159a0 <net_buf_unref>
   108b8:	e7eb      	b.n	10892 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   108ba:	4b12      	ldr	r3, [pc, #72]	; (10904 <bt_setup_public_id_addr+0x90>)
   108bc:	2206      	movs	r2, #6
   108be:	f8d3 0007 	ldr.w	r0, [r3, #7]
   108c2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   108c6:	9002      	str	r0, [sp, #8]
   108c8:	a902      	add	r1, sp, #8
   108ca:	4628      	mov	r0, r5
   108cc:	f8ad 300c 	strh.w	r3, [sp, #12]
   108d0:	f00b faf5 	bl	1bebe <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   108d4:	2800      	cmp	r0, #0
   108d6:	d0ec      	beq.n	108b2 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   108d8:	4629      	mov	r1, r5
   108da:	2206      	movs	r2, #6
   108dc:	f10d 0011 	add.w	r0, sp, #17
   108e0:	f00b fafe 	bl	1bee0 <memcpy>
	net_buf_unref(rsp);
   108e4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   108e6:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   108ea:	f005 f859 	bl	159a0 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   108ee:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   108f0:	4620      	mov	r0, r4
   108f2:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   108f4:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   108f6:	f7fe fa45 	bl	ed84 <id_create.constprop.0>
   108fa:	e7cc      	b.n	10896 <bt_setup_public_id_addr+0x22>
   108fc:	20008000 	.word	0x20008000
   10900:	00021508 	.word	0x00021508
   10904:	0001e7e0 	.word	0x0001e7e0

00010908 <bt_read_static_addr>:
{
   10908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1090c:	4b1c      	ldr	r3, [pc, #112]	; (10980 <bt_read_static_addr+0x78>)
{
   1090e:	4607      	mov	r7, r0
   10910:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   10914:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   10916:	f014 0401 	ands.w	r4, r4, #1
   1091a:	d104      	bne.n	10926 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   1091c:	2157      	movs	r1, #87	; 0x57
   1091e:	4819      	ldr	r0, [pc, #100]	; (10984 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   10920:	f00a f8b4 	bl	1aa8c <printk>
   10924:	e00c      	b.n	10940 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   10926:	2100      	movs	r1, #0
   10928:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1092c:	aa01      	add	r2, sp, #4
   1092e:	f7fe fc9d 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   10932:	4605      	mov	r5, r0
   10934:	b140      	cbz	r0, 10948 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   10936:	2157      	movs	r1, #87	; 0x57
   10938:	4813      	ldr	r0, [pc, #76]	; (10988 <bt_read_static_addr+0x80>)
   1093a:	f00a f8a7 	bl	1aa8c <printk>
		return 0;
   1093e:	2400      	movs	r4, #0
}
   10940:	4620      	mov	r0, r4
   10942:	b002      	add	sp, #8
   10944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10948:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   1094c:	9b01      	ldr	r3, [sp, #4]
   1094e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   10950:	785c      	ldrb	r4, [r3, #1]
   10952:	42b4      	cmp	r4, r6
   10954:	bf28      	it	cs
   10956:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10958:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1095a:	42a5      	cmp	r5, r4
   1095c:	db07      	blt.n	1096e <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   1095e:	9801      	ldr	r0, [sp, #4]
   10960:	f005 f81e 	bl	159a0 <net_buf_unref>
	if (!cnt) {
   10964:	2c00      	cmp	r4, #0
   10966:	d1eb      	bne.n	10940 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10968:	2157      	movs	r1, #87	; 0x57
   1096a:	4808      	ldr	r0, [pc, #32]	; (1098c <bt_read_static_addr+0x84>)
   1096c:	e7d8      	b.n	10920 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1096e:	fb08 7005 	mla	r0, r8, r5, r7
   10972:	2216      	movs	r2, #22
   10974:	4631      	mov	r1, r6
   10976:	f00b fab3 	bl	1bee0 <memcpy>
	for (i = 0; i < cnt; i++) {
   1097a:	3501      	adds	r5, #1
   1097c:	e7ed      	b.n	1095a <bt_read_static_addr+0x52>
   1097e:	bf00      	nop
   10980:	20008000 	.word	0x20008000
   10984:	0002152b 	.word	0x0002152b
   10988:	0002155c 	.word	0x0002155c
   1098c:	00021581 	.word	0x00021581

00010990 <bt_setup_random_id_addr>:
{
   10990:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   10992:	4d15      	ldr	r5, [pc, #84]	; (109e8 <bt_setup_random_id_addr+0x58>)
{
   10994:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   10996:	79ec      	ldrb	r4, [r5, #7]
   10998:	b9f4      	cbnz	r4, 109d8 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1099a:	2101      	movs	r1, #1
   1099c:	a802      	add	r0, sp, #8
   1099e:	f7ff ffb3 	bl	10908 <bt_read_static_addr>
   109a2:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   109a4:	b1c0      	cbz	r0, 109d8 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   109a6:	2716      	movs	r7, #22
   109a8:	b2e6      	uxtb	r6, r4
   109aa:	ab02      	add	r3, sp, #8
   109ac:	2206      	movs	r2, #6
   109ae:	fb07 3106 	mla	r1, r7, r6, r3
   109b2:	f10d 0001 	add.w	r0, sp, #1
   109b6:	f00b fa93 	bl	1bee0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   109ba:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   109bc:	4669      	mov	r1, sp
   109be:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   109c0:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   109c4:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   109c6:	f7fe f9dd 	bl	ed84 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   109ca:	79ea      	ldrb	r2, [r5, #7]
   109cc:	b2e3      	uxtb	r3, r4
   109ce:	429a      	cmp	r2, r3
   109d0:	d8ea      	bhi.n	109a8 <bt_setup_random_id_addr+0x18>
}
   109d2:	2000      	movs	r0, #0
   109d4:	b009      	add	sp, #36	; 0x24
   109d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   109d8:	2100      	movs	r1, #0
   109da:	4608      	mov	r0, r1
}
   109dc:	b009      	add	sp, #36	; 0x24
   109de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   109e2:	f7ff bf0d 	b.w	10800 <bt_id_create>
   109e6:	bf00      	nop
   109e8:	20008000 	.word	0x20008000

000109ec <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   109ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109f0:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   109f2:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   109f4:	690d      	ldr	r5, [r1, #16]
{
   109f6:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   109f8:	ebb5 0b03 	subs.w	fp, r5, r3
{
   109fc:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   109fe:	4884      	ldr	r0, [pc, #528]	; (10c10 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   10a00:	bf18      	it	ne
   10a02:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   10a06:	9307      	str	r3, [sp, #28]
   10a08:	f00b fb57 	bl	1c0ba <atomic_get>
{
   10a0c:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a0e:	0782      	lsls	r2, r0, #30
{
   10a10:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a12:	f140 80ef 	bpl.w	10bf4 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   10a16:	4608      	mov	r0, r1
   10a18:	f7fe f874 	bl	eb04 <valid_adv_param>
   10a1c:	4607      	mov	r7, r0
   10a1e:	2800      	cmp	r0, #0
   10a20:	f000 80eb 	beq.w	10bfa <bt_le_adv_start_legacy+0x20e>
   10a24:	487a      	ldr	r0, [pc, #488]	; (10c10 <bt_le_adv_start_legacy+0x224>)
   10a26:	f00b fb48 	bl	1c0ba <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   10a2a:	0503      	lsls	r3, r0, #20
   10a2c:	d402      	bmi.n	10a34 <bt_le_adv_start_legacy+0x48>
   10a2e:	4878      	ldr	r0, [pc, #480]	; (10c10 <bt_le_adv_start_legacy+0x224>)
   10a30:	f00b fb43 	bl	1c0ba <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10a34:	f106 0810 	add.w	r8, r6, #16
   10a38:	4640      	mov	r0, r8
   10a3a:	f00b fb3e 	bl	1c0ba <atomic_get>
   10a3e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   10a42:	0640      	lsls	r0, r0, #25
   10a44:	f100 80dc 	bmi.w	10c00 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10a48:	220f      	movs	r2, #15
   10a4a:	a80a      	add	r0, sp, #40	; 0x28
   10a4c:	9105      	str	r1, [sp, #20]
   10a4e:	f00b fa72 	bl	1bf36 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10a52:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   10a54:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10a56:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10a5a:	68e3      	ldr	r3, [r4, #12]
   10a5c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   10a60:	f00b fb1c 	bl	1c09c <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   10a64:	7832      	ldrb	r2, [r6, #0]
   10a66:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   10a68:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   10a6a:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   10a6c:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   10a70:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   10a74:	d004      	beq.n	10a80 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a76:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10a7a:	4865      	ldr	r0, [pc, #404]	; (10c10 <bt_le_adv_start_legacy+0x224>)
   10a7c:	f00b fb31 	bl	1c0e2 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   10a80:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   10a82:	4b64      	ldr	r3, [pc, #400]	; (10c14 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   10a84:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   10a86:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   10a8a:	465a      	mov	r2, fp
   10a8c:	6861      	ldr	r1, [r4, #4]
   10a8e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   10a92:	f7fe fcd7 	bl	f444 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   10a96:	4683      	mov	fp, r0
   10a98:	2800      	cmp	r0, #0
   10a9a:	d169      	bne.n	10b70 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10a9c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   10aa0:	2d00      	cmp	r5, #0
   10aa2:	d042      	beq.n	10b2a <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10aa4:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10aa6:	f00b fb0b 	bl	1c0c0 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10aaa:	6860      	ldr	r0, [r4, #4]
   10aac:	07c1      	lsls	r1, r0, #31
   10aae:	d544      	bpl.n	10b3a <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   10ab0:	2d00      	cmp	r5, #0
   10ab2:	d03f      	beq.n	10b34 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10ab4:	f010 0f10 	tst.w	r0, #16
   10ab8:	bf14      	ite	ne
   10aba:	2304      	movne	r3, #4
   10abc:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10abe:	6921      	ldr	r1, [r4, #16]
   10ac0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10ac4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10ac8:	f00b fafa 	bl	1c0c0 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10acc:	210f      	movs	r1, #15
   10ace:	f242 0006 	movw	r0, #8198	; 0x2006
   10ad2:	f7fe fb81 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   10ad6:	4683      	mov	fp, r0
   10ad8:	2800      	cmp	r0, #0
   10ada:	f000 8094 	beq.w	10c06 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10ade:	220f      	movs	r2, #15
   10ae0:	a90a      	add	r1, sp, #40	; 0x28
   10ae2:	3008      	adds	r0, #8
   10ae4:	f00c fd3b 	bl	1d55e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   10ae8:	2200      	movs	r2, #0
   10aea:	4659      	mov	r1, fp
   10aec:	f242 0006 	movw	r0, #8198	; 0x2006
   10af0:	f7fe fbbc 	bl	f26c <bt_hci_cmd_send_sync>
	if (err) {
   10af4:	2800      	cmp	r0, #0
   10af6:	f040 8089 	bne.w	10c0c <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   10afa:	b34d      	cbz	r5, 10b50 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10afc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10afe:	07da      	lsls	r2, r3, #31
   10b00:	d43a      	bmi.n	10b78 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   10b02:	2101      	movs	r1, #1
   10b04:	4630      	mov	r0, r6
   10b06:	f7fe fdf7 	bl	f6f8 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10b0a:	4683      	mov	fp, r0
   10b0c:	2800      	cmp	r0, #0
   10b0e:	d06a      	beq.n	10be6 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   10b10:	4841      	ldr	r0, [pc, #260]	; (10c18 <bt_le_adv_start_legacy+0x22c>)
   10b12:	2145      	movs	r1, #69	; 0x45
   10b14:	f009 ffba 	bl	1aa8c <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10b18:	9807      	ldr	r0, [sp, #28]
   10b1a:	b348      	cbz	r0, 10b70 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b1c:	2100      	movs	r1, #0
   10b1e:	f000 fddb 	bl	116d8 <bt_conn_set_state>
			bt_conn_unref(conn);
   10b22:	9807      	ldr	r0, [sp, #28]
   10b24:	f000 fdac 	bl	11680 <bt_conn_unref>
   10b28:	e022      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10b2a:	9508      	str	r5, [sp, #32]
   10b2c:	a908      	add	r1, sp, #32
   10b2e:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   10b32:	e7b8      	b.n	10aa6 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   10b34:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10b38:	e7c8      	b.n	10acc <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10b3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b3c:	b933      	cbnz	r3, 10b4c <bt_le_adv_start_legacy+0x160>
   10b3e:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   10b42:	f1c7 0303 	rsb	r3, r7, #3
   10b46:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10b4a:	e7bf      	b.n	10acc <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10b4c:	2701      	movs	r7, #1
   10b4e:	e7f8      	b.n	10b42 <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10b50:	6863      	ldr	r3, [r4, #4]
   10b52:	4652      	mov	r2, sl
   10b54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10b58:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b5e:	4649      	mov	r1, r9
   10b60:	9300      	str	r3, [sp, #0]
   10b62:	4630      	mov	r0, r6
   10b64:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b66:	f7fe fd53 	bl	f610 <le_adv_update.constprop.0>
		if (err) {
   10b6a:	4683      	mov	fp, r0
   10b6c:	2800      	cmp	r0, #0
   10b6e:	d0c5      	beq.n	10afc <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   10b70:	4658      	mov	r0, fp
   10b72:	b00f      	add	sp, #60	; 0x3c
   10b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10b78:	4630      	mov	r0, r6
   10b7a:	a907      	add	r1, sp, #28
   10b7c:	f7fe fad8 	bl	f130 <le_adv_start_add_conn>
		if (err) {
   10b80:	4683      	mov	fp, r0
   10b82:	2800      	cmp	r0, #0
   10b84:	d0bd      	beq.n	10b02 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   10b86:	f110 0f0c 	cmn.w	r0, #12
   10b8a:	d1f1      	bne.n	10b70 <bt_le_adv_start_legacy+0x184>
   10b8c:	2d00      	cmp	r5, #0
   10b8e:	d1ef      	bne.n	10b70 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10b90:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   10b92:	079b      	lsls	r3, r3, #30
   10b94:	d4ec      	bmi.n	10b70 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10b96:	6860      	ldr	r0, [r4, #4]
   10b98:	f080 0002 	eor.w	r0, r0, #2
   10b9c:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   10ba0:	f00b 0201 	and.w	r2, fp, #1
   10ba4:	210c      	movs	r1, #12
   10ba6:	4640      	mov	r0, r8
   10ba8:	f00b faa6 	bl	1c0f8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10bac:	6862      	ldr	r2, [r4, #4]
   10bae:	2107      	movs	r1, #7
   10bb0:	4640      	mov	r0, r8
   10bb2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10bb6:	f00b fa9f 	bl	1c0f8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10bba:	6862      	ldr	r2, [r4, #4]
   10bbc:	2108      	movs	r1, #8
   10bbe:	4640      	mov	r0, r8
   10bc0:	f002 0201 	and.w	r2, r2, #1
   10bc4:	f00b fa98 	bl	1c0f8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10bc8:	463a      	mov	r2, r7
   10bca:	2109      	movs	r1, #9
   10bcc:	4640      	mov	r0, r8
   10bce:	f00b fa93 	bl	1c0f8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10bd2:	6862      	ldr	r2, [r4, #4]
   10bd4:	210b      	movs	r1, #11
   10bd6:	4640      	mov	r0, r8
   10bd8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10bdc:	f00b fa8c 	bl	1c0f8 <atomic_set_bit_to>
	return 0;
   10be0:	f04f 0b00 	mov.w	fp, #0
   10be4:	e7c4      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10be6:	9807      	ldr	r0, [sp, #28]
   10be8:	b108      	cbz	r0, 10bee <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   10bea:	f000 fd49 	bl	11680 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10bee:	2d00      	cmp	r5, #0
   10bf0:	d1d6      	bne.n	10ba0 <bt_le_adv_start_legacy+0x1b4>
   10bf2:	e7d0      	b.n	10b96 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   10bf4:	f06f 0b0a 	mvn.w	fp, #10
   10bf8:	e7ba      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   10bfa:	f06f 0b15 	mvn.w	fp, #21
   10bfe:	e7b7      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   10c00:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   10c04:	e7b4      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   10c06:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   10c0a:	e7b1      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
   10c0c:	4683      	mov	fp, r0
   10c0e:	e7af      	b.n	10b70 <bt_le_adv_start_legacy+0x184>
   10c10:	20008094 	.word	0x20008094
   10c14:	20008000 	.word	0x20008000
   10c18:	000215af 	.word	0x000215af

00010c1c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10c1c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10c1e:	9c04      	ldr	r4, [sp, #16]
   10c20:	e9cd 3400 	strd	r3, r4, [sp]
   10c24:	4613      	mov	r3, r2
   10c26:	460a      	mov	r2, r1
   10c28:	4601      	mov	r1, r0
   10c2a:	4802      	ldr	r0, [pc, #8]	; (10c34 <bt_le_adv_start+0x18>)
   10c2c:	f7ff fede 	bl	109ec <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   10c30:	b002      	add	sp, #8
   10c32:	bd10      	pop	{r4, pc}
   10c34:	20008018 	.word	0x20008018

00010c38 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10c38:	b530      	push	{r4, r5, lr}
   10c3a:	4c29      	ldr	r4, [pc, #164]	; (10ce0 <bt_le_adv_stop+0xa8>)
   10c3c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10c40:	b085      	sub	sp, #20
   10c42:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c46:	f00b fa4c 	bl	1c0e2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c4e:	f00b fa34 	bl	1c0ba <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10c52:	0641      	lsls	r1, r0, #25
   10c54:	d403      	bmi.n	10c5e <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   10c56:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10c58:	4620      	mov	r0, r4
   10c5a:	b005      	add	sp, #20
   10c5c:	bd30      	pop	{r4, r5, pc}
   10c5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c62:	f00b fa2a 	bl	1c0ba <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c66:	05c2      	lsls	r2, r0, #23
   10c68:	d521      	bpl.n	10cae <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10c6a:	2300      	movs	r3, #0
   10c6c:	4669      	mov	r1, sp
   10c6e:	f104 0021 	add.w	r0, r4, #33	; 0x21
   10c72:	9300      	str	r3, [sp, #0]
   10c74:	f8cd 3003 	str.w	r3, [sp, #3]
   10c78:	f00b fa30 	bl	1c0dc <bt_addr_le_cmp>
   10c7c:	7e25      	ldrb	r5, [r4, #24]
   10c7e:	bb58      	cbnz	r0, 10cd8 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10c80:	4b18      	ldr	r3, [pc, #96]	; (10ce4 <bt_le_adv_stop+0xac>)
   10c82:	a902      	add	r1, sp, #8
   10c84:	889a      	ldrh	r2, [r3, #4]
   10c86:	6818      	ldr	r0, [r3, #0]
   10c88:	f8ad 200c 	strh.w	r2, [sp, #12]
   10c8c:	2204      	movs	r2, #4
   10c8e:	799b      	ldrb	r3, [r3, #6]
   10c90:	9002      	str	r0, [sp, #8]
   10c92:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10c96:	4628      	mov	r0, r5
   10c98:	f000 fe54 	bl	11944 <bt_conn_lookup_state_le>
   10c9c:	4604      	mov	r4, r0
	if (conn) {
   10c9e:	b130      	cbz	r0, 10cae <bt_le_adv_stop+0x76>
		conn->err = status;
   10ca0:	2100      	movs	r1, #0
   10ca2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ca4:	f000 fd18 	bl	116d8 <bt_conn_set_state>
		bt_conn_unref(conn);
   10ca8:	4620      	mov	r0, r4
   10caa:	f000 fce9 	bl	11680 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10cae:	2100      	movs	r1, #0
   10cb0:	480d      	ldr	r0, [pc, #52]	; (10ce8 <bt_le_adv_stop+0xb0>)
   10cb2:	f7fe fd21 	bl	f6f8 <set_le_adv_enable_legacy>
		if (err) {
   10cb6:	4604      	mov	r4, r0
   10cb8:	2800      	cmp	r0, #0
   10cba:	d1cd      	bne.n	10c58 <bt_le_adv_stop+0x20>
   10cbc:	480b      	ldr	r0, [pc, #44]	; (10cec <bt_le_adv_stop+0xb4>)
   10cbe:	f00b f9fc 	bl	1c0ba <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10cc2:	0683      	lsls	r3, r0, #26
   10cc4:	d5c7      	bpl.n	10c56 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
   10cc6:	4620      	mov	r0, r4
   10cc8:	f7fe fb80 	bl	f3cc <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
   10ccc:	f00b fa3a 	bl	1c144 <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
   10cd0:	2001      	movs	r0, #1
   10cd2:	f7fe fb7b 	bl	f3cc <set_le_scan_enable_legacy>
   10cd6:	e7bf      	b.n	10c58 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10cd8:	2205      	movs	r2, #5
   10cda:	f104 0121 	add.w	r1, r4, #33	; 0x21
   10cde:	e7da      	b.n	10c96 <bt_le_adv_stop+0x5e>
   10ce0:	20008000 	.word	0x20008000
   10ce4:	0001e7e0 	.word	0x0001e7e0
   10ce8:	20008018 	.word	0x20008018
   10cec:	20008094 	.word	0x20008094

00010cf0 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   10cf0:	b513      	push	{r0, r1, r4, lr}
   10cf2:	4818      	ldr	r0, [pc, #96]	; (10d54 <bt_le_adv_resume+0x64>)
   10cf4:	f00b f9e1 	bl	1c0ba <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   10cf8:	04c1      	lsls	r1, r0, #19
   10cfa:	d529      	bpl.n	10d50 <bt_le_adv_resume+0x60>
   10cfc:	4815      	ldr	r0, [pc, #84]	; (10d54 <bt_le_adv_resume+0x64>)
   10cfe:	f00b f9dc 	bl	1c0ba <atomic_get>
   10d02:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10d04:	f3c0 1480 	ubfx	r4, r0, #6, #1
   10d08:	d422      	bmi.n	10d50 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10d0a:	4812      	ldr	r0, [pc, #72]	; (10d54 <bt_le_adv_resume+0x64>)
   10d0c:	f00b f9d5 	bl	1c0ba <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10d10:	05c3      	lsls	r3, r0, #23
   10d12:	d51d      	bpl.n	10d50 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10d14:	4810      	ldr	r0, [pc, #64]	; (10d58 <bt_le_adv_resume+0x68>)
   10d16:	a901      	add	r1, sp, #4
   10d18:	f7fe fa0a 	bl	f130 <le_adv_start_add_conn>
	if (err) {
   10d1c:	b9c0      	cbnz	r0, 10d50 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10d1e:	2101      	movs	r1, #1
   10d20:	480d      	ldr	r0, [pc, #52]	; (10d58 <bt_le_adv_resume+0x68>)
   10d22:	f7fe fce9 	bl	f6f8 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10d26:	b150      	cbz	r0, 10d3e <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d28:	4621      	mov	r1, r4
   10d2a:	9801      	ldr	r0, [sp, #4]
   10d2c:	f000 fcd4 	bl	116d8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d30:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10d34:	4807      	ldr	r0, [pc, #28]	; (10d54 <bt_le_adv_resume+0x64>)
   10d36:	f00b f9d4 	bl	1c0e2 <atomic_and>
	return (old & mask) != 0;
   10d3a:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10d3e:	9801      	ldr	r0, [sp, #4]
   10d40:	f000 fc9e 	bl	11680 <bt_conn_unref>
	if (persist_paused) {
   10d44:	b124      	cbz	r4, 10d50 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10d4a:	4802      	ldr	r0, [pc, #8]	; (10d54 <bt_le_adv_resume+0x64>)
   10d4c:	f00b f9bb 	bl	1c0c6 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10d50:	b002      	add	sp, #8
   10d52:	bd10      	pop	{r4, pc}
   10d54:	20008028 	.word	0x20008028
   10d58:	20008018 	.word	0x20008018

00010d5c <enh_conn_complete>:
{
   10d5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10d60:	7804      	ldrb	r4, [r0, #0]
{
   10d62:	4605      	mov	r5, r0
	if (evt->status) {
   10d64:	2c00      	cmp	r4, #0
   10d66:	d048      	beq.n	10dfa <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10d68:	2c3c      	cmp	r4, #60	; 0x3c
   10d6a:	d11a      	bne.n	10da2 <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d6c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10d70:	4872      	ldr	r0, [pc, #456]	; (10f3c <enh_conn_complete+0x1e0>)
   10d72:	f00b f9b6 	bl	1c0e2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10d76:	2000      	movs	r0, #0
   10d78:	f7fd ffa6 	bl	ecc8 <find_pending_connect.part.0>
		if (!conn) {
   10d7c:	4605      	mov	r5, r0
   10d7e:	b930      	cbnz	r0, 10d8e <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10d80:	2145      	movs	r1, #69	; 0x45
   10d82:	486f      	ldr	r0, [pc, #444]	; (10f40 <enh_conn_complete+0x1e4>)
}
   10d84:	b004      	add	sp, #16
   10d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10d8a:	f009 be7f 	b.w	1aa8c <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10d8e:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d90:	2100      	movs	r1, #0
   10d92:	f000 fca1 	bl	116d8 <bt_conn_set_state>
		bt_conn_unref(conn);
   10d96:	4628      	mov	r0, r5
}
   10d98:	b004      	add	sp, #16
   10d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10d9e:	f000 bc6f 	b.w	11680 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10da2:	2c02      	cmp	r4, #2
   10da4:	d121      	bne.n	10dea <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10da6:	2100      	movs	r1, #0
   10da8:	2206      	movs	r2, #6
   10daa:	4608      	mov	r0, r1
   10dac:	f000 fdca 	bl	11944 <bt_conn_lookup_state_le>
	if (!conn) {
   10db0:	4605      	mov	r5, r0
   10db2:	b948      	cbnz	r0, 10dc8 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   10db4:	2145      	movs	r1, #69	; 0x45
   10db6:	4863      	ldr	r0, [pc, #396]	; (10f44 <enh_conn_complete+0x1e8>)
   10db8:	f009 fe68 	bl	1aa8c <printk>
			bt_le_scan_update(false);
   10dbc:	2000      	movs	r0, #0
   10dbe:	f7fe fdb3 	bl	f928 <bt_le_scan_update>
}
   10dc2:	b004      	add	sp, #16
   10dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10dc8:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10dca:	2100      	movs	r1, #0
   10dcc:	f000 fc84 	bl	116d8 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10dd0:	1d28      	adds	r0, r5, #4
   10dd2:	f00b f972 	bl	1c0ba <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   10dd6:	07c2      	lsls	r2, r0, #31
   10dd8:	d503      	bpl.n	10de2 <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10dda:	4621      	mov	r1, r4
   10ddc:	4628      	mov	r0, r5
   10dde:	f000 fc7b 	bl	116d8 <bt_conn_set_state>
	bt_conn_unref(conn);
   10de2:	4628      	mov	r0, r5
   10de4:	f000 fc4c 	bl	11680 <bt_conn_unref>
   10de8:	e7e8      	b.n	10dbc <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10dea:	4622      	mov	r2, r4
   10dec:	2157      	movs	r1, #87	; 0x57
   10dee:	4856      	ldr	r0, [pc, #344]	; (10f48 <enh_conn_complete+0x1ec>)
}
   10df0:	b004      	add	sp, #16
   10df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10df6:	f009 be49 	b.w	1aa8c <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10dfa:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10dfc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e00:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e02:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e04:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e06:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10e08:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e0c:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e0e:	d834      	bhi.n	10e7a <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e10:	f00b f956 	bl	1c0c0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10e14:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10e18:	2206      	movs	r2, #6
   10e1a:	3b02      	subs	r3, #2
   10e1c:	f105 0111 	add.w	r1, r5, #17
   10e20:	f10d 0001 	add.w	r0, sp, #1
   10e24:	f88d 3008 	strb.w	r3, [sp, #8]
   10e28:	f00b f85a 	bl	1bee0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10e2c:	2301      	movs	r3, #1
   10e2e:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10e32:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10e34:	bb40      	cbnz	r0, 10e88 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10e36:	2206      	movs	r2, #6
   10e38:	a902      	add	r1, sp, #8
   10e3a:	f000 fd83 	bl	11944 <bt_conn_lookup_state_le>
   10e3e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10e40:	78eb      	ldrb	r3, [r5, #3]
   10e42:	2b01      	cmp	r3, #1
   10e44:	d104      	bne.n	10e50 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e46:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10e4a:	483c      	ldr	r0, [pc, #240]	; (10f3c <enh_conn_complete+0x1e0>)
   10e4c:	f00b f949 	bl	1c0e2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10e50:	78eb      	ldrb	r3, [r5, #3]
   10e52:	b923      	cbnz	r3, 10e5e <enh_conn_complete+0x102>
   10e54:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10e58:	483c      	ldr	r0, [pc, #240]	; (10f4c <enh_conn_complete+0x1f0>)
   10e5a:	f00b f942 	bl	1c0e2 <atomic_and>
	if (!conn) {
   10e5e:	b9dc      	cbnz	r4, 10e98 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10e60:	4630      	mov	r0, r6
   10e62:	f7fd fc5d 	bl	e720 <bt_addr_le_str_real>
   10e66:	2145      	movs	r1, #69	; 0x45
   10e68:	4602      	mov	r2, r0
   10e6a:	4839      	ldr	r0, [pc, #228]	; (10f50 <enh_conn_complete+0x1f4>)
   10e6c:	f009 fe0e 	bl	1aa8c <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10e70:	211f      	movs	r1, #31
   10e72:	4640      	mov	r0, r8
   10e74:	f00b f97c 	bl	1c170 <bt_hci_disconnect>
		return;
   10e78:	e7a3      	b.n	10dc2 <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10e7a:	f00b f921 	bl	1c0c0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10e7e:	4631      	mov	r1, r6
   10e80:	4668      	mov	r0, sp
   10e82:	f00b f91d 	bl	1c0c0 <bt_addr_le_copy>
   10e86:	e7d4      	b.n	10e32 <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10e88:	2801      	cmp	r0, #1
   10e8a:	d103      	bne.n	10e94 <enh_conn_complete+0x138>
   10e8c:	a802      	add	r0, sp, #8
   10e8e:	f7fd ff1b 	bl	ecc8 <find_pending_connect.part.0>
   10e92:	e7d4      	b.n	10e3e <enh_conn_complete+0xe2>
	return NULL;
   10e94:	2400      	movs	r4, #0
   10e96:	e7d3      	b.n	10e40 <enh_conn_complete+0xe4>
	conn->handle = handle;
   10e98:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10e9a:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10e9c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10ea0:	f00b f90e 	bl	1c0c0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10ea4:	7e2a      	ldrb	r2, [r5, #24]
   10ea6:	7deb      	ldrb	r3, [r5, #23]
   10ea8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10eac:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10eb0:	7eaa      	ldrb	r2, [r5, #26]
   10eb2:	7e6b      	ldrb	r3, [r5, #25]
   10eb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10eb8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10ebc:	7f2a      	ldrb	r2, [r5, #28]
   10ebe:	7eeb      	ldrb	r3, [r5, #27]
   10ec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10ec4:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10ec6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10eca:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10ecc:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10ece:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10ed0:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10ed2:	d113      	bne.n	10efc <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10ed4:	4669      	mov	r1, sp
   10ed6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10eda:	f00b f8f1 	bl	1c0c0 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10ede:	7a21      	ldrb	r1, [r4, #8]
   10ee0:	4d1c      	ldr	r5, [pc, #112]	; (10f54 <enh_conn_complete+0x1f8>)
   10ee2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10ee6:	4429      	add	r1, r5
   10ee8:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10eec:	f00b f8e8 	bl	1c0c0 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10ef0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10ef4:	065b      	lsls	r3, r3, #25
   10ef6:	d501      	bpl.n	10efc <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   10ef8:	f7ff fefa 	bl	10cf0 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10efc:	78e3      	ldrb	r3, [r4, #3]
   10efe:	b96b      	cbnz	r3, 10f1c <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10f00:	4669      	mov	r1, sp
   10f02:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10f06:	f00b f8db 	bl	1c0c0 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10f0a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10f0c:	4b11      	ldr	r3, [pc, #68]	; (10f54 <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   10f0e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10f12:	4419      	add	r1, r3
   10f14:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10f18:	f00b f8d2 	bl	1c0c0 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10f1c:	2107      	movs	r1, #7
   10f1e:	4620      	mov	r0, r4
   10f20:	f000 fbda 	bl	116d8 <bt_conn_set_state>
	conn_auto_initiate(conn);
   10f24:	4620      	mov	r0, r4
   10f26:	f7fe ff1f 	bl	fd68 <conn_auto_initiate>
	bt_conn_unref(conn);
   10f2a:	4620      	mov	r0, r4
   10f2c:	f000 fba8 	bl	11680 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10f30:	78e3      	ldrb	r3, [r4, #3]
   10f32:	2b00      	cmp	r3, #0
   10f34:	f47f af45 	bne.w	10dc2 <enh_conn_complete+0x66>
   10f38:	e740      	b.n	10dbc <enh_conn_complete+0x60>
   10f3a:	bf00      	nop
   10f3c:	20008028 	.word	0x20008028
   10f40:	000215cf 	.word	0x000215cf
   10f44:	000215f0 	.word	0x000215f0
   10f48:	00021612 	.word	0x00021612
   10f4c:	20008094 	.word	0x20008094
   10f50:	00021630 	.word	0x00021630
   10f54:	20008000 	.word	0x20008000

00010f58 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10f58:	b570      	push	{r4, r5, r6, lr}
   10f5a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10f5c:	482e      	ldr	r0, [pc, #184]	; (11018 <bt_le_scan_start+0xc0>)
   10f5e:	f00b f8ac 	bl	1c0ba <atomic_get>
   10f62:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10f64:	0781      	lsls	r1, r0, #30
   10f66:	d554      	bpl.n	11012 <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10f68:	782a      	ldrb	r2, [r5, #0]
   10f6a:	2a01      	cmp	r2, #1
   10f6c:	d903      	bls.n	10f76 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10f6e:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10f72:	4620      	mov	r0, r4
   10f74:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10f76:	686b      	ldr	r3, [r5, #4]
   10f78:	f033 030f 	bics.w	r3, r3, #15
   10f7c:	d1f7      	bne.n	10f6e <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10f7e:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10f82:	8928      	ldrh	r0, [r5, #8]
   10f84:	1f03      	subs	r3, r0, #4
   10f86:	b29b      	uxth	r3, r3
   10f88:	42a3      	cmp	r3, r4
   10f8a:	d8f0      	bhi.n	10f6e <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10f8c:	8969      	ldrh	r1, [r5, #10]
   10f8e:	1f0b      	subs	r3, r1, #4
   10f90:	b29b      	uxth	r3, r3
   10f92:	42a3      	cmp	r3, r4
   10f94:	d8eb      	bhi.n	10f6e <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10f96:	4288      	cmp	r0, r1
   10f98:	d3e9      	bcc.n	10f6e <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10f9a:	b94a      	cbnz	r2, 10fb0 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10f9c:	2140      	movs	r1, #64	; 0x40
   10f9e:	481e      	ldr	r0, [pc, #120]	; (11018 <bt_le_scan_start+0xc0>)
   10fa0:	f00b f891 	bl	1c0c6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10fa4:	ea10 0301 	ands.w	r3, r0, r1
   10fa8:	d007      	beq.n	10fba <bt_le_scan_start+0x62>
		return -EALREADY;
   10faa:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10fae:	e7e0      	b.n	10f72 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10fb0:	f7fe fc2e 	bl	f810 <bt_le_scan_random_addr_check>
   10fb4:	2800      	cmp	r0, #0
   10fb6:	d1f1      	bne.n	10f9c <bt_le_scan_start+0x44>
   10fb8:	e7d9      	b.n	10f6e <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10fba:	4817      	ldr	r0, [pc, #92]	; (11018 <bt_le_scan_start+0xc0>)
   10fbc:	f00b f87d 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10fc0:	0682      	lsls	r2, r0, #26
   10fc2:	d50a      	bpl.n	10fda <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10fc4:	4618      	mov	r0, r3
   10fc6:	f7fe fa01 	bl	f3cc <set_le_scan_enable_legacy>
		if (err) {
   10fca:	4604      	mov	r4, r0
   10fcc:	b128      	cbz	r0, 10fda <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10fce:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10fd2:	4811      	ldr	r0, [pc, #68]	; (11018 <bt_le_scan_start+0xc0>)
   10fd4:	f00b f885 	bl	1c0e2 <atomic_and>
		return err;
   10fd8:	e7cb      	b.n	10f72 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10fda:	686a      	ldr	r2, [r5, #4]
   10fdc:	2108      	movs	r1, #8
   10fde:	480e      	ldr	r0, [pc, #56]	; (11018 <bt_le_scan_start+0xc0>)
   10fe0:	f002 0201 	and.w	r2, r2, #1
   10fe4:	f00b f888 	bl	1c0f8 <atomic_set_bit_to>
		if (param->timeout) {
   10fe8:	89ab      	ldrh	r3, [r5, #12]
   10fea:	b13b      	cbz	r3, 10ffc <bt_le_scan_start+0xa4>
   10fec:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10ff0:	4809      	ldr	r0, [pc, #36]	; (11018 <bt_le_scan_start+0xc0>)
   10ff2:	f00b f876 	bl	1c0e2 <atomic_and>
			return -ENOTSUP;
   10ff6:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10ffa:	e7ba      	b.n	10f72 <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10ffc:	896a      	ldrh	r2, [r5, #10]
   10ffe:	8929      	ldrh	r1, [r5, #8]
   11000:	7828      	ldrb	r0, [r5, #0]
   11002:	f7fe fba7 	bl	f754 <start_le_scan_legacy>
	if (err) {
   11006:	4604      	mov	r4, r0
   11008:	2800      	cmp	r0, #0
   1100a:	d1e0      	bne.n	10fce <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   1100c:	4b03      	ldr	r3, [pc, #12]	; (1101c <bt_le_scan_start+0xc4>)
   1100e:	601e      	str	r6, [r3, #0]
	return 0;
   11010:	e7af      	b.n	10f72 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   11012:	f06f 040a 	mvn.w	r4, #10
   11016:	e7ac      	b.n	10f72 <bt_le_scan_start+0x1a>
   11018:	20008094 	.word	0x20008094
   1101c:	20009f0c 	.word	0x20009f0c

00011020 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   11020:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11022:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11026:	4807      	ldr	r0, [pc, #28]	; (11044 <bt_le_scan_stop+0x24>)
   11028:	f00b f85b 	bl	1c0e2 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1102c:	0643      	lsls	r3, r0, #25
   1102e:	d506      	bpl.n	1103e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   11030:	2000      	movs	r0, #0
   11032:	4b05      	ldr	r3, [pc, #20]	; (11048 <bt_le_scan_stop+0x28>)
   11034:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   11036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1103a:	f7fe bc75 	b.w	f928 <bt_le_scan_update>
}
   1103e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   11042:	bd08      	pop	{r3, pc}
   11044:	20008094 	.word	0x20008094
   11048:	20009f0c 	.word	0x20009f0c

0001104c <bt_le_scan_cb_register>:
	parent->next = child;
   1104c:	2300      	movs	r3, #0
   1104e:	6083      	str	r3, [r0, #8]
	return list->tail;
   11050:	4b05      	ldr	r3, [pc, #20]	; (11068 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   11052:	f100 0208 	add.w	r2, r0, #8
   11056:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   11058:	b911      	cbnz	r1, 11060 <bt_le_scan_cb_register+0x14>
	list->head = node;
   1105a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1105e:	4770      	bx	lr
	parent->next = child;
   11060:	600a      	str	r2, [r1, #0]
	list->tail = node;
   11062:	605a      	str	r2, [r3, #4]
}
   11064:	4770      	bx	lr
   11066:	bf00      	nop
   11068:	20009f04 	.word	0x20009f04

0001106c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1106c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1106e:	b08d      	sub	sp, #52	; 0x34
   11070:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   11072:	2700      	movs	r7, #0
   11074:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11076:	2100      	movs	r1, #0
   11078:	f242 0018 	movw	r0, #8216	; 0x2018
   1107c:	aa02      	add	r2, sp, #8
   1107e:	f7fe f8f5 	bl	f26c <bt_hci_cmd_send_sync>
		if (ret) {
   11082:	4604      	mov	r4, r0
   11084:	bb58      	cbnz	r0, 110de <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   11086:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   11088:	2208      	movs	r2, #8
   1108a:	6899      	ldr	r1, [r3, #8]
   1108c:	4630      	mov	r0, r6
   1108e:	3101      	adds	r1, #1
   11090:	f00a ff26 	bl	1bee0 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   11094:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   11096:	9802      	ldr	r0, [sp, #8]
   11098:	f004 fc82 	bl	159a0 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1109c:	2f04      	cmp	r7, #4
   1109e:	f106 0608 	add.w	r6, r6, #8
   110a2:	d1e8      	bne.n	11076 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   110a4:	f00d f87c 	bl	1e1a0 <z_impl_k_uptime_ticks>
   110a8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   110ac:	fba0 3206 	umull	r3, r2, r0, r6
   110b0:	fb06 2101 	mla	r1, r6, r1, r2
   110b4:	0bdb      	lsrs	r3, r3, #15
   110b6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   110ba:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   110bc:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   110c0:	2308      	movs	r3, #8
   110c2:	2220      	movs	r2, #32
   110c4:	9300      	str	r3, [sp, #0]
   110c6:	4629      	mov	r1, r5
   110c8:	4806      	ldr	r0, [pc, #24]	; (110e4 <prng_reseed.constprop.0+0x78>)
   110ca:	446b      	add	r3, sp
   110cc:	f00a fdbe 	bl	1bc4c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   110d0:	b928      	cbnz	r0, 110de <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   110d2:	2145      	movs	r1, #69	; 0x45
   110d4:	4804      	ldr	r0, [pc, #16]	; (110e8 <prng_reseed.constprop.0+0x7c>)
   110d6:	f009 fcd9 	bl	1aa8c <printk>
		return -EIO;
   110da:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   110de:	4620      	mov	r0, r4
   110e0:	b00d      	add	sp, #52	; 0x34
   110e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110e4:	20008a90 	.word	0x20008a90
   110e8:	00021662 	.word	0x00021662

000110ec <prng_init>:

int prng_init(void)
{
   110ec:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   110ee:	4b13      	ldr	r3, [pc, #76]	; (1113c <prng_init+0x50>)
   110f0:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   110f4:	2b00      	cmp	r3, #0
   110f6:	da1d      	bge.n	11134 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   110f8:	2100      	movs	r1, #0
   110fa:	f242 0018 	movw	r0, #8216	; 0x2018
   110fe:	aa01      	add	r2, sp, #4
   11100:	f7fe f8b4 	bl	f26c <bt_hci_cmd_send_sync>
	if (ret) {
   11104:	b988      	cbnz	r0, 1112a <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   11106:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   11108:	2208      	movs	r2, #8
   1110a:	6899      	ldr	r1, [r3, #8]
   1110c:	480c      	ldr	r0, [pc, #48]	; (11140 <prng_init+0x54>)
   1110e:	3101      	adds	r1, #1
   11110:	f00a fd7c 	bl	1bc0c <tc_hmac_prng_init>
   11114:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   11116:	9801      	ldr	r0, [sp, #4]
   11118:	f004 fc42 	bl	159a0 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   1111c:	b93c      	cbnz	r4, 1112e <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   1111e:	4809      	ldr	r0, [pc, #36]	; (11144 <prng_init+0x58>)
   11120:	2145      	movs	r1, #69	; 0x45
   11122:	f009 fcb3 	bl	1aa8c <printk>
		return -EIO;
   11126:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1112a:	b002      	add	sp, #8
   1112c:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1112e:	f7ff ff9d 	bl	1106c <prng_reseed.constprop.0>
   11132:	e7fa      	b.n	1112a <prng_init+0x3e>
		return -ENOTSUP;
   11134:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11138:	e7f7      	b.n	1112a <prng_init+0x3e>
   1113a:	bf00      	nop
   1113c:	20008000 	.word	0x20008000
   11140:	20008a90 	.word	0x20008a90
   11144:	0002167e 	.word	0x0002167e

00011148 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   11148:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1114a:	4a0a      	ldr	r2, [pc, #40]	; (11174 <bt_rand+0x2c>)
{
   1114c:	4604      	mov	r4, r0
   1114e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   11150:	f00a fd95 	bl	1bc7e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   11154:	1c43      	adds	r3, r0, #1
   11156:	d107      	bne.n	11168 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   11158:	f7ff ff88 	bl	1106c <prng_reseed.constprop.0>
		if (ret) {
   1115c:	b948      	cbnz	r0, 11172 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1115e:	4629      	mov	r1, r5
   11160:	4620      	mov	r0, r4
   11162:	4a04      	ldr	r2, [pc, #16]	; (11174 <bt_rand+0x2c>)
   11164:	f00a fd8b 	bl	1bc7e <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   11168:	2801      	cmp	r0, #1
   1116a:	bf14      	ite	ne
   1116c:	f06f 0004 	mvnne.w	r0, #4
   11170:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   11172:	bd38      	pop	{r3, r4, r5, pc}
   11174:	20008a90 	.word	0x20008a90

00011178 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   11178:	2300      	movs	r3, #0
{
   1117a:	4601      	mov	r1, r0
	tx->user_data = NULL;
   1117c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   11180:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   11182:	4801      	ldr	r0, [pc, #4]	; (11188 <tx_free+0x10>)
   11184:	f00c bf38 	b.w	1dff8 <k_queue_append>
   11188:	20008564 	.word	0x20008564

0001118c <notify_connected>:
{
   1118c:	b538      	push	{r3, r4, r5, lr}
   1118e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   11190:	4b08      	ldr	r3, [pc, #32]	; (111b4 <notify_connected+0x28>)
   11192:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   11194:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   11196:	b92d      	cbnz	r5, 111a4 <notify_connected+0x18>
	if (!conn->err) {
   11198:	b951      	cbnz	r1, 111b0 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1119a:	4620      	mov	r0, r4
}
   1119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   111a0:	f004 b8f8 	b.w	15394 <bt_gatt_connected>
		if (cb->connected) {
   111a4:	682b      	ldr	r3, [r5, #0]
   111a6:	b10b      	cbz	r3, 111ac <notify_connected+0x20>
			cb->connected(conn, conn->err);
   111a8:	4620      	mov	r0, r4
   111aa:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   111ac:	692d      	ldr	r5, [r5, #16]
   111ae:	e7f1      	b.n	11194 <notify_connected+0x8>
}
   111b0:	bd38      	pop	{r3, r4, r5, pc}
   111b2:	bf00      	nop
   111b4:	20009f10 	.word	0x20009f10

000111b8 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   111b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111bc:	4604      	mov	r4, r0
   111be:	460e      	mov	r6, r1
   111c0:	4691      	mov	r9, r2
   111c2:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   111c4:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   111c6:	f04f 33ff 	mov.w	r3, #4294967295
   111ca:	f04f 32ff 	mov.w	r2, #4294967295
   111ce:	4847      	ldr	r0, [pc, #284]	; (112ec <send_frag+0x134>)
   111d0:	f008 fac0 	bl	19754 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   111d4:	7aa3      	ldrb	r3, [r4, #10]
   111d6:	2b07      	cmp	r3, #7
   111d8:	d14b      	bne.n	11272 <send_frag+0xba>
	__asm__ volatile(
   111da:	f04f 0320 	mov.w	r3, #32
   111de:	f3ef 8211 	mrs	r2, BASEPRI
   111e2:	f383 8811 	msr	BASEPRI, r3
   111e6:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   111ea:	69a3      	ldr	r3, [r4, #24]
   111ec:	2d00      	cmp	r5, #0
   111ee:	d052      	beq.n	11296 <send_frag+0xde>
	parent->next = child;
   111f0:	2100      	movs	r1, #0
   111f2:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   111f4:	2b00      	cmp	r3, #0
   111f6:	d14b      	bne.n	11290 <send_frag+0xd8>
	list->head = node;
   111f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   111fc:	f382 8811 	msr	BASEPRI, r2
   11200:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   11204:	2104      	movs	r1, #4
   11206:	f106 0008 	add.w	r0, r6, #8
   1120a:	f004 fc87 	bl	15b1c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1120e:	8823      	ldrh	r3, [r4, #0]
   11210:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   11214:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   11218:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1121a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1121e:	3b04      	subs	r3, #4
   11220:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11222:	2302      	movs	r3, #2
	return bt_send(buf);
   11224:	4630      	mov	r0, r6
   11226:	7533      	strb	r3, [r6, #20]
   11228:	f7fe fd14 	bl	fc54 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   1122c:	4602      	mov	r2, r0
   1122e:	2800      	cmp	r0, #0
   11230:	d059      	beq.n	112e6 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   11232:	2145      	movs	r1, #69	; 0x45
   11234:	482e      	ldr	r0, [pc, #184]	; (112f0 <send_frag+0x138>)
   11236:	f009 fc29 	bl	1aa8c <printk>
	__asm__ volatile(
   1123a:	f04f 0320 	mov.w	r3, #32
   1123e:	f3ef 8911 	mrs	r9, BASEPRI
   11242:	f383 8811 	msr	BASEPRI, r3
   11246:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1124a:	2d00      	cmp	r5, #0
   1124c:	d037      	beq.n	112be <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1124e:	2200      	movs	r2, #0
	return list->head;
   11250:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11252:	b153      	cbz	r3, 1126a <send_frag+0xb2>
   11254:	429d      	cmp	r5, r3
   11256:	d12f      	bne.n	112b8 <send_frag+0x100>
	return node->next;
   11258:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   1125a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   1125c:	bb3a      	cbnz	r2, 112ae <send_frag+0xf6>
   1125e:	42a9      	cmp	r1, r5
	list->head = node;
   11260:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   11262:	d100      	bne.n	11266 <send_frag+0xae>
	list->tail = node;
   11264:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   11266:	2300      	movs	r3, #0
   11268:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1126a:	f389 8811 	msr	BASEPRI, r9
   1126e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   11272:	481e      	ldr	r0, [pc, #120]	; (112ec <send_frag+0x134>)
   11274:	f008 fa32 	bl	196dc <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   11278:	b115      	cbz	r5, 11280 <send_frag+0xc8>
		tx_free(tx);
   1127a:	4628      	mov	r0, r5
   1127c:	f7ff ff7c 	bl	11178 <tx_free>
	}

	if (always_consume) {
   11280:	b11f      	cbz	r7, 1128a <send_frag+0xd2>
		net_buf_unref(buf);
   11282:	4630      	mov	r0, r6
   11284:	f004 fb8c 	bl	159a0 <net_buf_unref>
	}
	return false;
   11288:	2700      	movs	r7, #0
}
   1128a:	4638      	mov	r0, r7
   1128c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11290:	601d      	str	r5, [r3, #0]
	list->tail = node;
   11292:	61a5      	str	r5, [r4, #24]
}
   11294:	e7b2      	b.n	111fc <send_frag+0x44>
		if (tail_tx) {
   11296:	b133      	cbz	r3, 112a6 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   11298:	f103 080c 	add.w	r8, r3, #12
   1129c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1129e:	3301      	adds	r3, #1
   112a0:	f8c8 3000 	str.w	r3, [r8]
   112a4:	e7aa      	b.n	111fc <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   112a6:	69e3      	ldr	r3, [r4, #28]
   112a8:	f104 081c 	add.w	r8, r4, #28
   112ac:	e7f7      	b.n	1129e <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   112ae:	42a9      	cmp	r1, r5
	parent->next = child;
   112b0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   112b2:	bf08      	it	eq
   112b4:	61a2      	streq	r2, [r4, #24]
}
   112b6:	e7d6      	b.n	11266 <send_frag+0xae>
	return node->next;
   112b8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   112ba:	681b      	ldr	r3, [r3, #0]
   112bc:	e7c9      	b.n	11252 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   112be:	f8d8 3000 	ldr.w	r3, [r8]
   112c2:	b953      	cbnz	r3, 112da <send_frag+0x122>
   112c4:	490b      	ldr	r1, [pc, #44]	; (112f4 <send_frag+0x13c>)
   112c6:	480c      	ldr	r0, [pc, #48]	; (112f8 <send_frag+0x140>)
   112c8:	f240 4292 	movw	r2, #1170	; 0x492
   112cc:	f009 fbde 	bl	1aa8c <printk>
   112d0:	f240 4192 	movw	r1, #1170	; 0x492
   112d4:	4807      	ldr	r0, [pc, #28]	; (112f4 <send_frag+0x13c>)
   112d6:	f009 fe7f 	bl	1afd8 <assert_post_action>
			(*pending_no_cb)--;
   112da:	f8d8 3000 	ldr.w	r3, [r8]
   112de:	3b01      	subs	r3, #1
   112e0:	f8c8 3000 	str.w	r3, [r8]
   112e4:	e7c1      	b.n	1126a <send_frag+0xb2>
	return true;
   112e6:	2701      	movs	r7, #1
   112e8:	e7cf      	b.n	1128a <send_frag+0xd2>
   112ea:	bf00      	nop
   112ec:	200080c8 	.word	0x200080c8
   112f0:	0002120b 	.word	0x0002120b
   112f4:	000216a7 	.word	0x000216a7
   112f8:	0001fb49 	.word	0x0001fb49

000112fc <bt_conn_get_pkts>:
}
   112fc:	4800      	ldr	r0, [pc, #0]	; (11300 <bt_conn_get_pkts+0x4>)
   112fe:	4770      	bx	lr
   11300:	200080c8 	.word	0x200080c8

00011304 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11304:	1d03      	adds	r3, r0, #4
{
   11306:	b570      	push	{r4, r5, r6, lr}
   11308:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1130a:	4618      	mov	r0, r3
   1130c:	f00a ffed 	bl	1c2ea <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11310:	0582      	lsls	r2, r0, #22
   11312:	d515      	bpl.n	11340 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   11314:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11318:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   1131c:	4291      	cmp	r1, r2
   1131e:	d80f      	bhi.n	11340 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   11320:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   11324:	4291      	cmp	r1, r2
   11326:	d30b      	bcc.n	11340 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   11328:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   1132c:	4291      	cmp	r1, r2
   1132e:	d107      	bne.n	11340 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11330:	e8d3 2fef 	ldaex	r2, [r3]
   11334:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   11338:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1133c:	2900      	cmp	r1, #0
   1133e:	d1f7      	bne.n	11330 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   11340:	4b07      	ldr	r3, [pc, #28]	; (11360 <notify_le_param_updated+0x5c>)
   11342:	681d      	ldr	r5, [r3, #0]
   11344:	b905      	cbnz	r5, 11348 <notify_le_param_updated+0x44>
}
   11346:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   11348:	68ee      	ldr	r6, [r5, #12]
   1134a:	b13e      	cbz	r6, 1135c <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   1134c:	4620      	mov	r0, r4
   1134e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11352:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11356:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1135a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1135c:	692d      	ldr	r5, [r5, #16]
   1135e:	e7f1      	b.n	11344 <notify_le_param_updated+0x40>
   11360:	20009f10 	.word	0x20009f10

00011364 <le_param_req>:
{
   11364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11366:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   11368:	4608      	mov	r0, r1
{
   1136a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1136c:	f00a ff1b 	bl	1c1a6 <bt_le_conn_params_valid>
   11370:	4604      	mov	r4, r0
   11372:	b910      	cbnz	r0, 1137a <le_param_req+0x16>
		return false;
   11374:	2400      	movs	r4, #0
}
   11376:	4620      	mov	r0, r4
   11378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1137a:	4b09      	ldr	r3, [pc, #36]	; (113a0 <le_param_req+0x3c>)
   1137c:	681e      	ldr	r6, [r3, #0]
   1137e:	2e00      	cmp	r6, #0
   11380:	d0f9      	beq.n	11376 <le_param_req+0x12>
		if (!cb->le_param_req) {
   11382:	68b3      	ldr	r3, [r6, #8]
   11384:	b90b      	cbnz	r3, 1138a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   11386:	6936      	ldr	r6, [r6, #16]
   11388:	e7f9      	b.n	1137e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1138a:	4629      	mov	r1, r5
   1138c:	4638      	mov	r0, r7
   1138e:	4798      	blx	r3
   11390:	2800      	cmp	r0, #0
   11392:	d0ef      	beq.n	11374 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   11394:	4628      	mov	r0, r5
   11396:	f00a ff06 	bl	1c1a6 <bt_le_conn_params_valid>
   1139a:	2800      	cmp	r0, #0
   1139c:	d1f3      	bne.n	11386 <le_param_req+0x22>
   1139e:	e7e9      	b.n	11374 <le_param_req+0x10>
   113a0:	20009f10 	.word	0x20009f10

000113a4 <bt_conn_cb_register>:
	cb->_next = callback_list;
   113a4:	4b02      	ldr	r3, [pc, #8]	; (113b0 <bt_conn_cb_register+0xc>)
   113a6:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   113a8:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   113aa:	6102      	str	r2, [r0, #16]
}
   113ac:	4770      	bx	lr
   113ae:	bf00      	nop
   113b0:	20009f10 	.word	0x20009f10

000113b4 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   113b4:	b570      	push	{r4, r5, r6, lr}
   113b6:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   113b8:	f100 0634 	add.w	r6, r0, #52	; 0x34
   113bc:	2200      	movs	r2, #0
   113be:	2300      	movs	r3, #0
   113c0:	4630      	mov	r0, r6
   113c2:	f004 fa6b 	bl	1589c <net_buf_get>
   113c6:	4605      	mov	r5, r0
   113c8:	bb28      	cbnz	r0, 11416 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   113ca:	6963      	ldr	r3, [r4, #20]
   113cc:	b153      	cbz	r3, 113e4 <conn_cleanup+0x30>
   113ce:	4916      	ldr	r1, [pc, #88]	; (11428 <conn_cleanup+0x74>)
   113d0:	4816      	ldr	r0, [pc, #88]	; (1142c <conn_cleanup+0x78>)
   113d2:	f240 520c 	movw	r2, #1292	; 0x50c
   113d6:	f009 fb59 	bl	1aa8c <printk>
   113da:	f240 510c 	movw	r1, #1292	; 0x50c
   113de:	4812      	ldr	r0, [pc, #72]	; (11428 <conn_cleanup+0x74>)
   113e0:	f009 fdfa 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   113e4:	69e3      	ldr	r3, [r4, #28]
   113e6:	b153      	cbz	r3, 113fe <conn_cleanup+0x4a>
   113e8:	490f      	ldr	r1, [pc, #60]	; (11428 <conn_cleanup+0x74>)
   113ea:	4810      	ldr	r0, [pc, #64]	; (1142c <conn_cleanup+0x78>)
   113ec:	f240 520d 	movw	r2, #1293	; 0x50d
   113f0:	f009 fb4c 	bl	1aa8c <printk>
   113f4:	f240 510d 	movw	r1, #1293	; 0x50d
   113f8:	480b      	ldr	r0, [pc, #44]	; (11428 <conn_cleanup+0x74>)
   113fa:	f009 fded 	bl	1afd8 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   113fe:	4620      	mov	r0, r4
   11400:	f00a ffc0 	bl	1c384 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11404:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11408:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   1140a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1140e:	2300      	movs	r3, #0
   11410:	4807      	ldr	r0, [pc, #28]	; (11430 <conn_cleanup+0x7c>)
   11412:	f008 bbc5 	b.w	19ba0 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   11416:	6968      	ldr	r0, [r5, #20]
   11418:	b108      	cbz	r0, 1141e <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   1141a:	f7ff fead 	bl	11178 <tx_free>
		net_buf_unref(buf);
   1141e:	4628      	mov	r0, r5
   11420:	f004 fabe 	bl	159a0 <net_buf_unref>
   11424:	e7ca      	b.n	113bc <conn_cleanup+0x8>
   11426:	bf00      	nop
   11428:	000216a7 	.word	0x000216a7
   1142c:	0001fb49 	.word	0x0001fb49
   11430:	200098e0 	.word	0x200098e0

00011434 <bt_conn_recv>:
{
   11434:	b570      	push	{r4, r5, r6, lr}
   11436:	4616      	mov	r6, r2
   11438:	4604      	mov	r4, r0
   1143a:	460d      	mov	r5, r1
	tx_notify(conn);
   1143c:	f00a ff58 	bl	1c2f0 <tx_notify>
	switch (flags) {
   11440:	2e01      	cmp	r6, #1
   11442:	d01f      	beq.n	11484 <bt_conn_recv+0x50>
   11444:	2e02      	cmp	r6, #2
   11446:	d140      	bne.n	114ca <bt_conn_recv+0x96>
		if (conn->rx) {
   11448:	6923      	ldr	r3, [r4, #16]
   1144a:	b133      	cbz	r3, 1145a <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   1144c:	4826      	ldr	r0, [pc, #152]	; (114e8 <bt_conn_recv+0xb4>)
   1144e:	2145      	movs	r1, #69	; 0x45
   11450:	f009 fb1c 	bl	1aa8c <printk>
			bt_conn_reset_rx_state(conn);
   11454:	4620      	mov	r0, r4
   11456:	f00a ff95 	bl	1c384 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1145a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1145c:	6921      	ldr	r1, [r4, #16]
   1145e:	898a      	ldrh	r2, [r1, #12]
   11460:	2a01      	cmp	r2, #1
   11462:	d93f      	bls.n	114e4 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   11464:	688b      	ldr	r3, [r1, #8]
   11466:	881b      	ldrh	r3, [r3, #0]
   11468:	3304      	adds	r3, #4
   1146a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1146c:	429a      	cmp	r2, r3
   1146e:	d339      	bcc.n	114e4 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   11470:	d931      	bls.n	114d6 <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   11472:	481e      	ldr	r0, [pc, #120]	; (114ec <bt_conn_recv+0xb8>)
   11474:	2145      	movs	r1, #69	; 0x45
   11476:	f009 fb09 	bl	1aa8c <printk>
		bt_conn_reset_rx_state(conn);
   1147a:	4620      	mov	r0, r4
}
   1147c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   11480:	f00a bf80 	b.w	1c384 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   11484:	6920      	ldr	r0, [r4, #16]
   11486:	b938      	cbnz	r0, 11498 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   11488:	2145      	movs	r1, #69	; 0x45
   1148a:	4819      	ldr	r0, [pc, #100]	; (114f0 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   1148c:	f009 fafe 	bl	1aa8c <printk>
			bt_conn_reset_rx_state(conn);
   11490:	4620      	mov	r0, r4
   11492:	f00a ff77 	bl	1c384 <bt_conn_reset_rx_state>
   11496:	e001      	b.n	1149c <bt_conn_recv+0x68>
		if (!buf->len) {
   11498:	89ae      	ldrh	r6, [r5, #12]
   1149a:	b926      	cbnz	r6, 114a6 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   1149c:	4628      	mov	r0, r5
}
   1149e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   114a2:	f004 ba7d 	b.w	159a0 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   114a6:	3008      	adds	r0, #8
   114a8:	f00c f851 	bl	1d54e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   114ac:	4286      	cmp	r6, r0
   114ae:	d902      	bls.n	114b6 <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   114b0:	2145      	movs	r1, #69	; 0x45
   114b2:	4810      	ldr	r0, [pc, #64]	; (114f4 <bt_conn_recv+0xc0>)
   114b4:	e7ea      	b.n	1148c <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   114b6:	6920      	ldr	r0, [r4, #16]
   114b8:	89aa      	ldrh	r2, [r5, #12]
   114ba:	68a9      	ldr	r1, [r5, #8]
   114bc:	3008      	adds	r0, #8
   114be:	f00c f84e 	bl	1d55e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   114c2:	4628      	mov	r0, r5
   114c4:	f004 fa6c 	bl	159a0 <net_buf_unref>
		break;
   114c8:	e7c8      	b.n	1145c <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   114ca:	4632      	mov	r2, r6
   114cc:	2145      	movs	r1, #69	; 0x45
   114ce:	480a      	ldr	r0, [pc, #40]	; (114f8 <bt_conn_recv+0xc4>)
   114d0:	f009 fadc 	bl	1aa8c <printk>
		bt_conn_reset_rx_state(conn);
   114d4:	e7dc      	b.n	11490 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   114d6:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   114d8:	4620      	mov	r0, r4
	conn->rx = NULL;
   114da:	6123      	str	r3, [r4, #16]
}
   114dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   114e0:	f000 bed0 	b.w	12284 <bt_l2cap_recv>
}
   114e4:	bd70      	pop	{r4, r5, r6, pc}
   114e6:	bf00      	nop
   114e8:	000216d7 	.word	0x000216d7
   114ec:	0002176b 	.word	0x0002176b
   114f0:	000216f9 	.word	0x000216f9
   114f4:	0002171c 	.word	0x0002171c
   114f8:	00021748 	.word	0x00021748

000114fc <bt_conn_send_cb>:
{
   114fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11500:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   11502:	7a83      	ldrb	r3, [r0, #10]
{
   11504:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11506:	2b07      	cmp	r3, #7
{
   11508:	460d      	mov	r5, r1
   1150a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1150c:	d009      	beq.n	11522 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   1150e:	4821      	ldr	r0, [pc, #132]	; (11594 <bt_conn_send_cb+0x98>)
   11510:	2145      	movs	r1, #69	; 0x45
   11512:	f009 fabb 	bl	1aa8c <printk>
		net_buf_unref(buf);
   11516:	4628      	mov	r0, r5
   11518:	f004 fa42 	bl	159a0 <net_buf_unref>
			return -ENOTCONN;
   1151c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   11520:	e01a      	b.n	11558 <bt_conn_send_cb+0x5c>
	if (cb) {
   11522:	2a00      	cmp	r2, #0
   11524:	d034      	beq.n	11590 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   11526:	f008 f8d3 	bl	196d0 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1152a:	4b1b      	ldr	r3, [pc, #108]	; (11598 <bt_conn_send_cb+0x9c>)
   1152c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1152e:	481b      	ldr	r0, [pc, #108]	; (1159c <bt_conn_send_cb+0xa0>)
   11530:	bf07      	ittee	eq
   11532:	2200      	moveq	r2, #0
   11534:	2300      	moveq	r3, #0
   11536:	f04f 32ff 	movne.w	r2, #4294967295
   1153a:	f04f 33ff 	movne.w	r3, #4294967295
   1153e:	f007 f861 	bl	18604 <z_impl_k_queue_get>
   11542:	4604      	mov	r4, r0
		if (!tx) {
   11544:	b950      	cbnz	r0, 1155c <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   11546:	2145      	movs	r1, #69	; 0x45
   11548:	4815      	ldr	r0, [pc, #84]	; (115a0 <bt_conn_send_cb+0xa4>)
   1154a:	f009 fa9f 	bl	1aa8c <printk>
			net_buf_unref(buf);
   1154e:	4628      	mov	r0, r5
   11550:	f004 fa26 	bl	159a0 <net_buf_unref>
			return -ENOBUFS;
   11554:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   11558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1155c:	7ab3      	ldrb	r3, [r6, #10]
   1155e:	2b07      	cmp	r3, #7
   11560:	d00a      	beq.n	11578 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   11562:	2157      	movs	r1, #87	; 0x57
   11564:	480f      	ldr	r0, [pc, #60]	; (115a4 <bt_conn_send_cb+0xa8>)
   11566:	f009 fa91 	bl	1aa8c <printk>
			net_buf_unref(buf);
   1156a:	4628      	mov	r0, r5
   1156c:	f004 fa18 	bl	159a0 <net_buf_unref>
			tx_free(tx);
   11570:	4620      	mov	r0, r4
   11572:	f7ff fe01 	bl	11178 <tx_free>
   11576:	e7d1      	b.n	1151c <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   11578:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1157a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1157e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   11580:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   11582:	f106 0034 	add.w	r0, r6, #52	; 0x34
   11586:	4629      	mov	r1, r5
   11588:	f004 f9dc 	bl	15944 <net_buf_put>
	return 0;
   1158c:	2000      	movs	r0, #0
   1158e:	e7e3      	b.n	11558 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   11590:	614a      	str	r2, [r1, #20]
   11592:	e7f6      	b.n	11582 <bt_conn_send_cb+0x86>
   11594:	0002178b 	.word	0x0002178b
   11598:	20009900 	.word	0x20009900
   1159c:	20008564 	.word	0x20008564
   115a0:	0002179f 	.word	0x0002179f
   115a4:	000217c2 	.word	0x000217c2

000115a8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   115a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   115ac:	2500      	movs	r5, #0
   115ae:	4b1c      	ldr	r3, [pc, #112]	; (11620 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   115b0:	462a      	mov	r2, r5
   115b2:	2101      	movs	r1, #1
{
   115b4:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   115b6:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   115b8:	2601      	movs	r6, #1
   115ba:	f009 f815 	bl	1a5e8 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   115be:	f04f 0914 	mov.w	r9, #20
   115c2:	4c18      	ldr	r4, [pc, #96]	; (11624 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   115c4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   115c8:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   115cc:	f00a fe8d 	bl	1c2ea <atomic_get>
   115d0:	b178      	cbz	r0, 115f2 <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   115d2:	7aa3      	ldrb	r3, [r4, #10]
   115d4:	b9ab      	cbnz	r3, 11602 <bt_conn_prepare_events+0x5a>
   115d6:	1d23      	adds	r3, r4, #4
   115d8:	e8d3 2fef 	ldaex	r2, [r3]
   115dc:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   115e0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   115e4:	2800      	cmp	r0, #0
   115e6:	d1f7      	bne.n	115d8 <bt_conn_prepare_events+0x30>
   115e8:	0653      	lsls	r3, r2, #25
   115ea:	d50a      	bpl.n	11602 <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   115ec:	4620      	mov	r0, r4
   115ee:	f7ff fee1 	bl	113b4 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   115f2:	3501      	adds	r5, #1
   115f4:	2d05      	cmp	r5, #5
   115f6:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   115fa:	d1e3      	bne.n	115c4 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   115fc:	4630      	mov	r0, r6
   115fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   11602:	7aa3      	ldrb	r3, [r4, #10]
   11604:	2b07      	cmp	r3, #7
   11606:	d1f4      	bne.n	115f2 <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   11608:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1160c:	2200      	movs	r2, #0
   1160e:	2104      	movs	r1, #4
   11610:	4640      	mov	r0, r8
   11612:	f008 ffe9 	bl	1a5e8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   11616:	2301      	movs	r3, #1
   11618:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   1161c:	441e      	add	r6, r3
   1161e:	e7e8      	b.n	115f2 <bt_conn_prepare_events+0x4a>
   11620:	20008340 	.word	0x20008340
   11624:	20008bc8 	.word	0x20008bc8

00011628 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11628:	b570      	push	{r4, r5, r6, lr}
   1162a:	4606      	mov	r6, r0
   1162c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1162e:	4810      	ldr	r0, [pc, #64]	; (11670 <bt_conn_add_le+0x48>)
   11630:	2105      	movs	r1, #5
   11632:	f00a fe83 	bl	1c33c <bt_conn_new>
	if (!conn) {
   11636:	4604      	mov	r4, r0
   11638:	b1b8      	cbz	r0, 1166a <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1163a:	2230      	movs	r2, #48	; 0x30
   1163c:	2100      	movs	r1, #0
   1163e:	3058      	adds	r0, #88	; 0x58
   11640:	f00a fc79 	bl	1bf36 <memset>
   11644:	4b0b      	ldr	r3, [pc, #44]	; (11674 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11646:	4a0c      	ldr	r2, [pc, #48]	; (11678 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11648:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1164a:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   1164c:	4629      	mov	r1, r5
   1164e:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   11652:	62a3      	str	r3, [r4, #40]	; 0x28
   11654:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   11656:	7226      	strb	r6, [r4, #8]
   11658:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1165c:	f00a fc40 	bl	1bee0 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11660:	2301      	movs	r3, #1
   11662:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11664:	4b05      	ldr	r3, [pc, #20]	; (1167c <bt_conn_add_le+0x54>)
   11666:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1166a:	4620      	mov	r0, r4
   1166c:	bd70      	pop	{r4, r5, r6, pc}
   1166e:	bf00      	nop
   11670:	20008bc8 	.word	0x20008bc8
   11674:	00011ce1 	.word	0x00011ce1
   11678:	0001c337 	.word	0x0001c337
   1167c:	00280018 	.word	0x00280018

00011680 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   11680:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   11682:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11686:	e8d4 3fef 	ldaex	r3, [r4]
   1168a:	1e5a      	subs	r2, r3, #1
   1168c:	e8c4 2fe1 	stlex	r1, r2, [r4]
   11690:	2900      	cmp	r1, #0
   11692:	d1f8      	bne.n	11686 <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   11694:	2b00      	cmp	r3, #0
   11696:	dc0a      	bgt.n	116ae <bt_conn_unref+0x2e>
   11698:	4909      	ldr	r1, [pc, #36]	; (116c0 <bt_conn_unref+0x40>)
   1169a:	480a      	ldr	r0, [pc, #40]	; (116c4 <bt_conn_unref+0x44>)
   1169c:	f240 7265 	movw	r2, #1893	; 0x765
   116a0:	f009 f9f4 	bl	1aa8c <printk>
   116a4:	f240 7165 	movw	r1, #1893	; 0x765
   116a8:	4805      	ldr	r0, [pc, #20]	; (116c0 <bt_conn_unref+0x40>)
   116aa:	f009 fc95 	bl	1afd8 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   116ae:	4620      	mov	r0, r4
   116b0:	f00a fe1b 	bl	1c2ea <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   116b4:	b918      	cbnz	r0, 116be <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   116b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   116ba:	f7ff bb19 	b.w	10cf0 <bt_le_adv_resume>
}
   116be:	bd10      	pop	{r4, pc}
   116c0:	000216a7 	.word	0x000216a7
   116c4:	0001fb49 	.word	0x0001fb49

000116c8 <bt_conn_lookup_handle>:
{
   116c8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   116ca:	2105      	movs	r1, #5
   116cc:	4801      	ldr	r0, [pc, #4]	; (116d4 <bt_conn_lookup_handle+0xc>)
   116ce:	f00a be99 	b.w	1c404 <conn_lookup_handle>
   116d2:	bf00      	nop
   116d4:	20008bc8 	.word	0x20008bc8

000116d8 <bt_conn_set_state>:
{
   116d8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   116da:	7a85      	ldrb	r5, [r0, #10]
{
   116dc:	4604      	mov	r4, r0
	if (conn->state == state) {
   116de:	428d      	cmp	r5, r1
{
   116e0:	460e      	mov	r6, r1
	if (conn->state == state) {
   116e2:	d10b      	bne.n	116fc <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   116e4:	2157      	movs	r1, #87	; 0x57
   116e6:	2d08      	cmp	r5, #8
   116e8:	bf96      	itet	ls
   116ea:	4b6d      	ldrls	r3, [pc, #436]	; (118a0 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   116ec:	4a6d      	ldrhi	r2, [pc, #436]	; (118a4 <bt_conn_set_state+0x1cc>)
   116ee:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   116f2:	486d      	ldr	r0, [pc, #436]	; (118a8 <bt_conn_set_state+0x1d0>)
}
   116f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   116f8:	f009 b9c8 	b.w	1aa8c <printk>
	conn->state = state;
   116fc:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   116fe:	b165      	cbz	r5, 1171a <bt_conn_set_state+0x42>
   11700:	2d06      	cmp	r5, #6
   11702:	d00d      	beq.n	11720 <bt_conn_set_state+0x48>
	switch (conn->state) {
   11704:	7aa3      	ldrb	r3, [r4, #10]
   11706:	2b08      	cmp	r3, #8
   11708:	f200 80c5 	bhi.w	11896 <bt_conn_set_state+0x1be>
   1170c:	e8df f003 	tbb	[pc, r3]
   11710:	c7c70f4a 	.word	0xc7c70f4a
   11714:	278ec7c7 	.word	0x278ec7c7
   11718:	c7          	.byte	0xc7
   11719:	00          	.byte	0x00
		bt_conn_ref(conn);
   1171a:	f00a fe5c 	bl	1c3d6 <bt_conn_ref>
		break;
   1171e:	e7f1      	b.n	11704 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11720:	7883      	ldrb	r3, [r0, #2]
   11722:	2b01      	cmp	r3, #1
   11724:	d1ee      	bne.n	11704 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   11726:	3058      	adds	r0, #88	; 0x58
   11728:	f008 faaa 	bl	19c80 <k_delayed_work_cancel>
   1172c:	e7ea      	b.n	11704 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   1172e:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11730:	4d5e      	ldr	r5, [pc, #376]	; (118ac <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   11732:	f04f 0320 	mov.w	r3, #32
   11736:	f3ef 8211 	mrs	r2, BASEPRI
   1173a:	f383 8811 	msr	BASEPRI, r3
   1173e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11742:	69e3      	ldr	r3, [r4, #28]
   11744:	2b00      	cmp	r3, #0
   11746:	f000 8087 	beq.w	11858 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   1174a:	3b01      	subs	r3, #1
   1174c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1174e:	f382 8811 	msr	BASEPRI, r2
   11752:	f3bf 8f6f 	isb	sy
   11756:	4628      	mov	r0, r5
   11758:	f007 ffc0 	bl	196dc <z_impl_k_sem_give>
}
   1175c:	e7e9      	b.n	11732 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1175e:	78a3      	ldrb	r3, [r4, #2]
   11760:	2b04      	cmp	r3, #4
   11762:	f000 809c 	beq.w	1189e <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   11766:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1176a:	f00c fc38 	bl	1dfde <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   1176e:	2100      	movs	r1, #0
   11770:	484f      	ldr	r0, [pc, #316]	; (118b0 <bt_conn_set_state+0x1d8>)
   11772:	f009 f845 	bl	1a800 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   11776:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   11778:	4620      	mov	r0, r4
	list->tail = NULL;
   1177a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   1177e:	f000 fc8f 	bl	120a0 <bt_l2cap_connected>
		notify_connected(conn);
   11782:	4620      	mov	r0, r4
   11784:	f7ff fd02 	bl	1118c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11788:	78e3      	ldrb	r3, [r4, #3]
   1178a:	2b01      	cmp	r3, #1
   1178c:	f040 8087 	bne.w	1189e <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11790:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   11794:	2300      	movs	r3, #0
   11796:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1179a:	4846      	ldr	r0, [pc, #280]	; (118b4 <bt_conn_set_state+0x1dc>)
}
   1179c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117a0:	f008 b9fe 	b.w	19ba0 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   117a4:	78a3      	ldrb	r3, [r4, #2]
   117a6:	2b04      	cmp	r3, #4
   117a8:	d104      	bne.n	117b4 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   117aa:	4620      	mov	r0, r4
}
   117ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   117b0:	f7ff bf66 	b.w	11680 <bt_conn_unref>
		switch (old_state) {
   117b4:	2d08      	cmp	r5, #8
   117b6:	d872      	bhi.n	1189e <bt_conn_set_state+0x1c6>
   117b8:	a301      	add	r3, pc, #4	; (adr r3, 117c0 <bt_conn_set_state+0xe8>)
   117ba:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   117be:	bf00      	nop
   117c0:	00011825 	.word	0x00011825
   117c4:	000117e5 	.word	0x000117e5
   117c8:	00011817 	.word	0x00011817
   117cc:	000117ab 	.word	0x000117ab
   117d0:	000117ab 	.word	0x000117ab
   117d4:	00011817 	.word	0x00011817
   117d8:	00011817 	.word	0x00011817
   117dc:	00011825 	.word	0x00011825
   117e0:	00011825 	.word	0x00011825
			tx_notify(conn);
   117e4:	4620      	mov	r0, r4
   117e6:	f00a fd83 	bl	1c2f0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   117ea:	78a3      	ldrb	r3, [r4, #2]
   117ec:	2b01      	cmp	r3, #1
   117ee:	d103      	bne.n	117f8 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   117f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   117f4:	f008 fa44 	bl	19c80 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   117f8:	3404      	adds	r4, #4
   117fa:	e8d4 3fef 	ldaex	r3, [r4]
   117fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11802:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11806:	2a00      	cmp	r2, #0
   11808:	d1f7      	bne.n	117fa <bt_conn_set_state+0x122>
}
   1180a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1180e:	2100      	movs	r1, #0
   11810:	4827      	ldr	r0, [pc, #156]	; (118b0 <bt_conn_set_state+0x1d8>)
   11812:	f008 bff5 	b.w	1a800 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   11816:	7a63      	ldrb	r3, [r4, #9]
   11818:	2b00      	cmp	r3, #0
   1181a:	d0c6      	beq.n	117aa <bt_conn_set_state+0xd2>
				notify_connected(conn);
   1181c:	4620      	mov	r0, r4
   1181e:	f7ff fcb5 	bl	1118c <notify_connected>
   11822:	e7c2      	b.n	117aa <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   11824:	4632      	mov	r2, r6
   11826:	2157      	movs	r1, #87	; 0x57
   11828:	4823      	ldr	r0, [pc, #140]	; (118b8 <bt_conn_set_state+0x1e0>)
   1182a:	e763      	b.n	116f4 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1182c:	78a3      	ldrb	r3, [r4, #2]
   1182e:	2b01      	cmp	r3, #1
   11830:	d135      	bne.n	1189e <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   11832:	4b22      	ldr	r3, [pc, #136]	; (118bc <bt_conn_set_state+0x1e4>)
   11834:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11838:	8a9d      	ldrh	r5, [r3, #20]
   1183a:	230a      	movs	r3, #10
   1183c:	f240 30e7 	movw	r0, #999	; 0x3e7
   11840:	2100      	movs	r1, #0
   11842:	435d      	muls	r5, r3
   11844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11848:	2300      	movs	r3, #0
   1184a:	fbc5 0106 	smlal	r0, r1, r5, r6
   1184e:	f7f7 f96d 	bl	8b2c <__aeabi_uldivmod>
   11852:	4602      	mov	r2, r0
   11854:	460b      	mov	r3, r1
   11856:	e79e      	b.n	11796 <bt_conn_set_state+0xbe>
	return list->head;
   11858:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1185a:	b128      	cbz	r0, 11868 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1185c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1185e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11860:	4288      	cmp	r0, r1
	list->head = node;
   11862:	6163      	str	r3, [r4, #20]
	list->tail = node;
   11864:	bf08      	it	eq
   11866:	61a3      	streq	r3, [r4, #24]
   11868:	f382 8811 	msr	BASEPRI, r2
   1186c:	f3bf 8f6f 	isb	sy
		if (!node) {
   11870:	b1a8      	cbz	r0, 1189e <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   11872:	f04f 0220 	mov.w	r2, #32
   11876:	f3ef 8311 	mrs	r3, BASEPRI
   1187a:	f382 8811 	msr	BASEPRI, r2
   1187e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   11882:	68c2      	ldr	r2, [r0, #12]
   11884:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   11886:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   11888:	f383 8811 	msr	BASEPRI, r3
   1188c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   11890:	f7ff fc72 	bl	11178 <tx_free>
   11894:	e75f      	b.n	11756 <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   11896:	4632      	mov	r2, r6
   11898:	2157      	movs	r1, #87	; 0x57
   1189a:	4809      	ldr	r0, [pc, #36]	; (118c0 <bt_conn_set_state+0x1e8>)
   1189c:	e72a      	b.n	116f4 <bt_conn_set_state+0x1c>
}
   1189e:	bd70      	pop	{r4, r5, r6, pc}
   118a0:	0001ec24 	.word	0x0001ec24
   118a4:	000217ed 	.word	0x000217ed
   118a8:	000217f7 	.word	0x000217f7
   118ac:	200080c8 	.word	0x200080c8
   118b0:	20008340 	.word	0x20008340
   118b4:	200098e0 	.word	0x200098e0
   118b8:	0002180d 	.word	0x0002180d
   118bc:	20008000 	.word	0x20008000
   118c0:	00021829 	.word	0x00021829

000118c4 <bt_conn_lookup_addr_le>:
{
   118c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118c8:	4607      	mov	r7, r0
   118ca:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   118cc:	2500      	movs	r5, #0
   118ce:	4e0e      	ldr	r6, [pc, #56]	; (11908 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   118d0:	4630      	mov	r0, r6
   118d2:	f00a fd80 	bl	1c3d6 <bt_conn_ref>
		if (!conn) {
   118d6:	4604      	mov	r4, r0
   118d8:	b120      	cbz	r0, 118e4 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   118da:	7883      	ldrb	r3, [r0, #2]
   118dc:	2b01      	cmp	r3, #1
   118de:	d00a      	beq.n	118f6 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   118e0:	f7ff fece 	bl	11680 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   118e4:	3501      	adds	r5, #1
   118e6:	2d05      	cmp	r5, #5
   118e8:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   118ec:	d1f0      	bne.n	118d0 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   118ee:	2400      	movs	r4, #0
}
   118f0:	4620      	mov	r0, r4
   118f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   118f6:	4642      	mov	r2, r8
   118f8:	4639      	mov	r1, r7
   118fa:	f00a fd4c 	bl	1c396 <bt_conn_is_peer_addr_le>
   118fe:	2800      	cmp	r0, #0
   11900:	d1f6      	bne.n	118f0 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   11902:	4620      	mov	r0, r4
   11904:	e7ec      	b.n	118e0 <bt_conn_lookup_addr_le+0x1c>
   11906:	bf00      	nop
   11908:	20008bc8 	.word	0x20008bc8

0001190c <bt_conn_exists_le>:
{
   1190c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1190e:	f7ff ffd9 	bl	118c4 <bt_conn_lookup_addr_le>
	if (conn) {
   11912:	4604      	mov	r4, r0
   11914:	b170      	cbz	r0, 11934 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   11916:	7a83      	ldrb	r3, [r0, #10]
   11918:	2157      	movs	r1, #87	; 0x57
   1191a:	2b08      	cmp	r3, #8
   1191c:	bf96      	itet	ls
   1191e:	4a06      	ldrls	r2, [pc, #24]	; (11938 <bt_conn_exists_le+0x2c>)
   11920:	4a06      	ldrhi	r2, [pc, #24]	; (1193c <bt_conn_exists_le+0x30>)
   11922:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   11926:	4806      	ldr	r0, [pc, #24]	; (11940 <bt_conn_exists_le+0x34>)
   11928:	f009 f8b0 	bl	1aa8c <printk>
		bt_conn_unref(conn);
   1192c:	4620      	mov	r0, r4
   1192e:	f7ff fea7 	bl	11680 <bt_conn_unref>
		return true;
   11932:	2001      	movs	r0, #1
}
   11934:	bd10      	pop	{r4, pc}
   11936:	bf00      	nop
   11938:	0001ec24 	.word	0x0001ec24
   1193c:	000217ed 	.word	0x000217ed
   11940:	0002184a 	.word	0x0002184a

00011944 <bt_conn_lookup_state_le>:
{
   11944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11948:	4606      	mov	r6, r0
   1194a:	460f      	mov	r7, r1
   1194c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1194e:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11950:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   11954:	f8df a048 	ldr.w	sl, [pc, #72]	; 119a0 <bt_conn_lookup_state_le+0x5c>
   11958:	fb09 a005 	mla	r0, r9, r5, sl
   1195c:	f00a fd3b 	bl	1c3d6 <bt_conn_ref>
		if (!conn) {
   11960:	4604      	mov	r4, r0
   11962:	b120      	cbz	r0, 1196e <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   11964:	7883      	ldrb	r3, [r0, #2]
   11966:	2b01      	cmp	r3, #1
   11968:	d006      	beq.n	11978 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   1196a:	f00a fd34 	bl	1c3d6 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1196e:	3501      	adds	r5, #1
   11970:	2d05      	cmp	r5, #5
   11972:	d1f1      	bne.n	11958 <bt_conn_lookup_state_le+0x14>
	return NULL;
   11974:	2400      	movs	r4, #0
   11976:	e00f      	b.n	11998 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11978:	b147      	cbz	r7, 1198c <bt_conn_lookup_state_le+0x48>
   1197a:	463a      	mov	r2, r7
   1197c:	4631      	mov	r1, r6
   1197e:	f00a fd0a 	bl	1c396 <bt_conn_is_peer_addr_le>
   11982:	b918      	cbnz	r0, 1198c <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   11984:	4620      	mov	r0, r4
   11986:	f7ff fe7b 	bl	11680 <bt_conn_unref>
			continue;
   1198a:	e7f0      	b.n	1196e <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   1198c:	7aa3      	ldrb	r3, [r4, #10]
   1198e:	4543      	cmp	r3, r8
   11990:	d1f8      	bne.n	11984 <bt_conn_lookup_state_le+0x40>
   11992:	7a23      	ldrb	r3, [r4, #8]
   11994:	42b3      	cmp	r3, r6
   11996:	d1f5      	bne.n	11984 <bt_conn_lookup_state_le+0x40>
}
   11998:	4620      	mov	r0, r4
   1199a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1199e:	bf00      	nop
   119a0:	20008bc8 	.word	0x20008bc8

000119a4 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   119a4:	b510      	push	{r4, lr}
	info->type = conn->type;
   119a6:	7882      	ldrb	r2, [r0, #2]
   119a8:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   119aa:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   119ac:	2a01      	cmp	r2, #1
	info->role = conn->role;
   119ae:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   119b0:	7a03      	ldrb	r3, [r0, #8]
   119b2:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   119b4:	d11c      	bne.n	119f0 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   119b6:	f100 0288 	add.w	r2, r0, #136	; 0x88
   119ba:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   119bc:	4a0e      	ldr	r2, [pc, #56]	; (119f8 <bt_conn_get_info+0x54>)
   119be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   119c2:	4413      	add	r3, r2
   119c4:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   119c6:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   119ca:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   119ce:	b964      	cbnz	r4, 119ea <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   119d0:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   119d4:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   119d8:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   119da:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   119de:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   119e0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   119e4:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   119e6:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   119e8:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   119ea:	e9c1 2303 	strd	r2, r3, [r1, #12]
   119ee:	e7f1      	b.n	119d4 <bt_conn_get_info+0x30>
	return -EINVAL;
   119f0:	f06f 0015 	mvn.w	r0, #21
   119f4:	e7f8      	b.n	119e8 <bt_conn_get_info+0x44>
   119f6:	bf00      	nop
   119f8:	20008000 	.word	0x20008000

000119fc <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   119fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11a00:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a02:	4844      	ldr	r0, [pc, #272]	; (11b14 <bt_conn_le_create+0x118>)
   11a04:	f00a fc71 	bl	1c2ea <atomic_get>
   11a08:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a0a:	0781      	lsls	r1, r0, #30
{
   11a0c:	4615      	mov	r5, r2
   11a0e:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a10:	d576      	bpl.n	11b00 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   11a12:	4610      	mov	r0, r2
   11a14:	f00a fbc7 	bl	1c1a6 <bt_le_conn_params_valid>
   11a18:	b928      	cbnz	r0, 11a26 <bt_conn_le_create+0x2a>
		return -EINVAL;
   11a1a:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   11a1e:	4628      	mov	r0, r5
   11a20:	b002      	add	sp, #8
   11a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a26:	483b      	ldr	r0, [pc, #236]	; (11b14 <bt_conn_le_create+0x118>)
   11a28:	f00a fc5f 	bl	1c2ea <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11a2c:	0642      	lsls	r2, r0, #25
   11a2e:	d4f4      	bmi.n	11a1a <bt_conn_le_create+0x1e>
   11a30:	4838      	ldr	r0, [pc, #224]	; (11b14 <bt_conn_le_create+0x118>)
   11a32:	f00a fc5a 	bl	1c2ea <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   11a36:	0503      	lsls	r3, r0, #20
   11a38:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11a3c:	d463      	bmi.n	11b06 <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   11a3e:	f7fd fee7 	bl	f810 <bt_le_scan_random_addr_check>
   11a42:	2800      	cmp	r0, #0
   11a44:	d0e9      	beq.n	11a1a <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   11a46:	4621      	mov	r1, r4
   11a48:	4640      	mov	r0, r8
   11a4a:	f7ff ff5f 	bl	1190c <bt_conn_exists_le>
   11a4e:	2800      	cmp	r0, #0
   11a50:	d1e3      	bne.n	11a1a <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   11a52:	7823      	ldrb	r3, [r4, #0]
   11a54:	3b02      	subs	r3, #2
   11a56:	2b01      	cmp	r3, #1
   11a58:	d847      	bhi.n	11aea <bt_conn_le_create+0xee>
   11a5a:	2207      	movs	r2, #7
   11a5c:	4621      	mov	r1, r4
   11a5e:	4668      	mov	r0, sp
   11a60:	f00a fa3e 	bl	1bee0 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   11a64:	f89d 3000 	ldrb.w	r3, [sp]
   11a68:	3b02      	subs	r3, #2
   11a6a:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   11a6e:	4669      	mov	r1, sp
   11a70:	2000      	movs	r0, #0
   11a72:	f7ff fdd9 	bl	11628 <bt_conn_add_le>
	if (!conn) {
   11a76:	4604      	mov	r4, r0
   11a78:	2800      	cmp	r0, #0
   11a7a:	d047      	beq.n	11b0c <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   11a7c:	882b      	ldrh	r3, [r5, #0]
   11a7e:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11a82:	886b      	ldrh	r3, [r5, #2]
   11a84:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   11a88:	88ab      	ldrh	r3, [r5, #4]
   11a8a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11a8e:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   11a90:	4d21      	ldr	r5, [pc, #132]	; (11b18 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   11a92:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   11a96:	f105 0c08 	add.w	ip, r5, #8
   11a9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11a9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   11aa2:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	bf08      	it	eq
   11aa8:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   11aac:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   11aae:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   11ab0:	b903      	cbnz	r3, 11ab4 <bt_conn_le_create+0xb8>
   11ab2:	89ab      	ldrh	r3, [r5, #12]
   11ab4:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11ab6:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11ab8:	b903      	cbnz	r3, 11abc <bt_conn_le_create+0xc0>
   11aba:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11abc:	2106      	movs	r1, #6
   11abe:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   11ac0:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11ac2:	f7ff fe09 	bl	116d8 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   11ac6:	4620      	mov	r0, r4
   11ac8:	f00a fb50 	bl	1c16c <bt_le_create_conn>
	if (err) {
   11acc:	4605      	mov	r5, r0
   11ace:	b1a8      	cbz	r0, 11afc <bt_conn_le_create+0x100>
		conn->err = 0;
   11ad0:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11ad2:	4620      	mov	r0, r4
   11ad4:	4631      	mov	r1, r6
		conn->err = 0;
   11ad6:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11ad8:	f7ff fdfe 	bl	116d8 <bt_conn_set_state>
		bt_conn_unref(conn);
   11adc:	4620      	mov	r0, r4
   11ade:	f7ff fdcf 	bl	11680 <bt_conn_unref>
		bt_le_scan_update(false);
   11ae2:	4630      	mov	r0, r6
   11ae4:	f7fd ff20 	bl	f928 <bt_le_scan_update>
		return err;
   11ae8:	e799      	b.n	11a1e <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   11aea:	4621      	mov	r1, r4
   11aec:	f00a fb3c 	bl	1c168 <bt_lookup_id_addr>
   11af0:	2207      	movs	r2, #7
   11af2:	4601      	mov	r1, r0
   11af4:	4668      	mov	r0, sp
   11af6:	f00a f9f3 	bl	1bee0 <memcpy>
}
   11afa:	e7b8      	b.n	11a6e <bt_conn_le_create+0x72>
	*ret_conn = conn;
   11afc:	603c      	str	r4, [r7, #0]
	return 0;
   11afe:	e78e      	b.n	11a1e <bt_conn_le_create+0x22>
		return -EAGAIN;
   11b00:	f06f 050a 	mvn.w	r5, #10
   11b04:	e78b      	b.n	11a1e <bt_conn_le_create+0x22>
		return -EALREADY;
   11b06:	f06f 0544 	mvn.w	r5, #68	; 0x44
   11b0a:	e788      	b.n	11a1e <bt_conn_le_create+0x22>
		return -ENOMEM;
   11b0c:	f06f 050b 	mvn.w	r5, #11
   11b10:	e785      	b.n	11a1e <bt_conn_le_create+0x22>
   11b12:	bf00      	nop
   11b14:	20008094 	.word	0x20008094
   11b18:	20008000 	.word	0x20008000

00011b1c <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   11b1c:	b570      	push	{r4, r5, r6, lr}
   11b1e:	4606      	mov	r6, r0
   11b20:	4834      	ldr	r0, [pc, #208]	; (11bf4 <bt_le_set_auto_conn+0xd8>)
   11b22:	f00a fbe2 	bl	1c2ea <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11b26:	0780      	lsls	r0, r0, #30
{
   11b28:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11b2a:	d55c      	bpl.n	11be6 <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11b2c:	b929      	cbnz	r1, 11b3a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   11b2e:	f7fd fe6f 	bl	f810 <bt_le_scan_random_addr_check>
   11b32:	b940      	cbnz	r0, 11b46 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   11b34:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11b38:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11b3a:	4608      	mov	r0, r1
   11b3c:	f00a fb33 	bl	1c1a6 <bt_le_conn_params_valid>
   11b40:	2800      	cmp	r0, #0
   11b42:	d1f4      	bne.n	11b2e <bt_le_set_auto_conn+0x12>
   11b44:	e7f6      	b.n	11b34 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   11b46:	4631      	mov	r1, r6
   11b48:	2000      	movs	r0, #0
   11b4a:	f7ff febb 	bl	118c4 <bt_conn_lookup_addr_le>
	if (!conn) {
   11b4e:	4604      	mov	r4, r0
   11b50:	b928      	cbnz	r0, 11b5e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   11b52:	4631      	mov	r1, r6
   11b54:	f7ff fd68 	bl	11628 <bt_conn_add_le>
		if (!conn) {
   11b58:	4604      	mov	r4, r0
   11b5a:	2800      	cmp	r0, #0
   11b5c:	d046      	beq.n	11bec <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   11b5e:	1d23      	adds	r3, r4, #4
	if (param) {
   11b60:	b365      	cbz	r5, 11bbc <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   11b62:	882a      	ldrh	r2, [r5, #0]
   11b64:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11b68:	886a      	ldrh	r2, [r5, #2]
   11b6a:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   11b6e:	88aa      	ldrh	r2, [r5, #4]
   11b70:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11b74:	88ea      	ldrh	r2, [r5, #6]
   11b76:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b7a:	e8d3 2fef 	ldaex	r2, [r3]
   11b7e:	f042 0101 	orr.w	r1, r2, #1
   11b82:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11b86:	2800      	cmp	r0, #0
   11b88:	d1f7      	bne.n	11b7a <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   11b8a:	07d1      	lsls	r1, r2, #31
   11b8c:	d402      	bmi.n	11b94 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   11b8e:	4620      	mov	r0, r4
   11b90:	f00a fc21 	bl	1c3d6 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11b94:	7aa3      	ldrb	r3, [r4, #10]
   11b96:	b963      	cbnz	r3, 11bb2 <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11b98:	4816      	ldr	r0, [pc, #88]	; (11bf4 <bt_le_set_auto_conn+0xd8>)
   11b9a:	f00a fba6 	bl	1c2ea <atomic_get>
   11b9e:	0783      	lsls	r3, r0, #30
   11ba0:	d507      	bpl.n	11bb2 <bt_le_set_auto_conn+0x96>
		if (param) {
   11ba2:	b11d      	cbz	r5, 11bac <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11ba4:	2102      	movs	r1, #2
   11ba6:	4620      	mov	r0, r4
   11ba8:	f7ff fd96 	bl	116d8 <bt_conn_set_state>
		bt_le_scan_update(false);
   11bac:	2000      	movs	r0, #0
   11bae:	f7fd febb 	bl	f928 <bt_le_scan_update>
	bt_conn_unref(conn);
   11bb2:	4620      	mov	r0, r4
   11bb4:	f7ff fd64 	bl	11680 <bt_conn_unref>
	return 0;
   11bb8:	2000      	movs	r0, #0
   11bba:	e7bd      	b.n	11b38 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11bbc:	e8d3 2fef 	ldaex	r2, [r3]
   11bc0:	f022 0101 	bic.w	r1, r2, #1
   11bc4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11bc8:	2800      	cmp	r0, #0
   11bca:	d1f7      	bne.n	11bbc <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   11bcc:	07d2      	lsls	r2, r2, #31
   11bce:	d5e1      	bpl.n	11b94 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   11bd0:	4620      	mov	r0, r4
   11bd2:	f7ff fd55 	bl	11680 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   11bd6:	7aa3      	ldrb	r3, [r4, #10]
   11bd8:	2b02      	cmp	r3, #2
   11bda:	d1db      	bne.n	11b94 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11bdc:	4629      	mov	r1, r5
   11bde:	4620      	mov	r0, r4
   11be0:	f7ff fd7a 	bl	116d8 <bt_conn_set_state>
   11be4:	e7d6      	b.n	11b94 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   11be6:	f06f 000a 	mvn.w	r0, #10
   11bea:	e7a5      	b.n	11b38 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   11bec:	f06f 000b 	mvn.w	r0, #11
   11bf0:	e7a2      	b.n	11b38 <bt_le_set_auto_conn+0x1c>
   11bf2:	bf00      	nop
   11bf4:	20008094 	.word	0x20008094

00011bf8 <bt_conn_disconnect>:
{
   11bf8:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11bfa:	7883      	ldrb	r3, [r0, #2]
{
   11bfc:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11bfe:	2b01      	cmp	r3, #1
{
   11c00:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c02:	d103      	bne.n	11c0c <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   11c04:	2100      	movs	r1, #0
   11c06:	3088      	adds	r0, #136	; 0x88
   11c08:	f7ff ff88 	bl	11b1c <bt_le_set_auto_conn>
	switch (conn->state) {
   11c0c:	7aa3      	ldrb	r3, [r4, #10]
   11c0e:	3b02      	subs	r3, #2
   11c10:	2b06      	cmp	r3, #6
   11c12:	d805      	bhi.n	11c20 <bt_conn_disconnect+0x28>
   11c14:	e8df f003 	tbb	[pc, r3]
   11c18:	12040408 	.word	0x12040408
   11c1c:	271f      	.short	0x271f
   11c1e:	10          	.byte	0x10
   11c1f:	00          	.byte	0x00
   11c20:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   11c24:	4628      	mov	r0, r5
   11c26:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c28:	4620      	mov	r0, r4
   11c2a:	2100      	movs	r1, #0
		conn->err = reason;
   11c2c:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c2e:	f7ff fd53 	bl	116d8 <bt_conn_set_state>
			bt_le_scan_update(false);
   11c32:	2000      	movs	r0, #0
   11c34:	f7fd fe78 	bl	f928 <bt_le_scan_update>
		return 0;
   11c38:	2500      	movs	r5, #0
   11c3a:	e7f3      	b.n	11c24 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11c3c:	2157      	movs	r1, #87	; 0x57
   11c3e:	4810      	ldr	r0, [pc, #64]	; (11c80 <bt_conn_disconnect+0x88>)
   11c40:	f008 ff24 	bl	1aa8c <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c44:	4620      	mov	r0, r4
		conn->err = reason;
   11c46:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c48:	2100      	movs	r1, #0
   11c4a:	f7ff fd45 	bl	116d8 <bt_conn_set_state>
}
   11c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   11c52:	f7fe bff1 	b.w	10c38 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   11c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11c5a:	f008 f811 	bl	19c80 <k_delayed_work_cancel>
}
   11c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   11c62:	f7fd be3d 	b.w	f8e0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   11c66:	4629      	mov	r1, r5
   11c68:	8820      	ldrh	r0, [r4, #0]
   11c6a:	f00a fa81 	bl	1c170 <bt_hci_disconnect>
	if (err) {
   11c6e:	4605      	mov	r5, r0
   11c70:	2800      	cmp	r0, #0
   11c72:	d1d7      	bne.n	11c24 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   11c74:	2108      	movs	r1, #8
   11c76:	4620      	mov	r0, r4
   11c78:	f7ff fd2e 	bl	116d8 <bt_conn_set_state>
	return 0;
   11c7c:	e7d2      	b.n	11c24 <bt_conn_disconnect+0x2c>
   11c7e:	bf00      	nop
   11c80:	00021872 	.word	0x00021872

00011c84 <send_conn_le_param_update>:
{
   11c84:	b538      	push	{r3, r4, r5, lr}
   11c86:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11c88:	4608      	mov	r0, r1
{
   11c8a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11c8c:	f00a fa8b 	bl	1c1a6 <bt_le_conn_params_valid>
   11c90:	b308      	cbz	r0, 11cd6 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11c92:	4b12      	ldr	r3, [pc, #72]	; (11cdc <send_conn_le_param_update+0x58>)
   11c94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11c98:	0799      	lsls	r1, r3, #30
   11c9a:	d407      	bmi.n	11cac <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11c9c:	78e3      	ldrb	r3, [r4, #3]
   11c9e:	b173      	cbz	r3, 11cbe <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11ca0:	4629      	mov	r1, r5
   11ca2:	4620      	mov	r0, r4
}
   11ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11ca8:	f000 bb14 	b.w	122d4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11cac:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11cb0:	079a      	lsls	r2, r3, #30
   11cb2:	d5f3      	bpl.n	11c9c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11cb4:	1d20      	adds	r0, r4, #4
   11cb6:	f00a fb18 	bl	1c2ea <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11cba:	0543      	lsls	r3, r0, #21
   11cbc:	d4ee      	bmi.n	11c9c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11cbe:	4629      	mov	r1, r5
   11cc0:	4620      	mov	r0, r4
   11cc2:	f00a fbc3 	bl	1c44c <bt_conn_le_conn_update>
		if (rc == 0) {
   11cc6:	b928      	cbnz	r0, 11cd4 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11cc8:	88ab      	ldrh	r3, [r5, #4]
   11cca:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11cce:	88eb      	ldrh	r3, [r5, #6]
   11cd0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11cd4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11cd6:	f06f 0015 	mvn.w	r0, #21
   11cda:	e7fb      	b.n	11cd4 <send_conn_le_param_update+0x50>
   11cdc:	20008000 	.word	0x20008000

00011ce0 <deferred_work>:
{
   11ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11ce2:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   11ce6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11ce8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11cec:	b99b      	cbnz	r3, 11d16 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11cee:	4630      	mov	r0, r6
   11cf0:	f00a fc0c 	bl	1c50c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11cf4:	4b26      	ldr	r3, [pc, #152]	; (11d90 <deferred_work+0xb0>)
   11cf6:	681d      	ldr	r5, [r3, #0]
   11cf8:	b92d      	cbnz	r5, 11d06 <deferred_work+0x26>
		bt_conn_unref(conn);
   11cfa:	4630      	mov	r0, r6
}
   11cfc:	b002      	add	sp, #8
   11cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11d02:	f7ff bcbd 	b.w	11680 <bt_conn_unref>
		if (cb->disconnected) {
   11d06:	686b      	ldr	r3, [r5, #4]
   11d08:	b11b      	cbz	r3, 11d12 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11d0a:	4630      	mov	r0, r6
   11d0c:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   11d10:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11d12:	692d      	ldr	r5, [r5, #16]
   11d14:	e7f0      	b.n	11cf8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11d16:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11d1a:	2b01      	cmp	r3, #1
   11d1c:	d12f      	bne.n	11d7e <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11d1e:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11d22:	b923      	cbnz	r3, 11d2e <deferred_work+0x4e>
}
   11d24:	b002      	add	sp, #8
   11d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11d2a:	f7fd bdd9 	b.w	f8e0 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11d2e:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d32:	e8d5 3fef 	ldaex	r3, [r5]
   11d36:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   11d3a:	e8c5 2fe1 	stlex	r1, r2, [r5]
   11d3e:	2900      	cmp	r1, #0
   11d40:	d1f7      	bne.n	11d32 <deferred_work+0x52>
   11d42:	059b      	lsls	r3, r3, #22
   11d44:	d51d      	bpl.n	11d82 <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11d46:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11d4a:	f8ad 3000 	strh.w	r3, [sp]
   11d4e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11d52:	f8ad 3002 	strh.w	r3, [sp, #2]
   11d56:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11d5a:	f8ad 3004 	strh.w	r3, [sp, #4]
   11d5e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11d62:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11d66:	4669      	mov	r1, sp
   11d68:	4630      	mov	r0, r6
   11d6a:	f7ff ff8b 	bl	11c84 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11d6e:	e8d5 3fef 	ldaex	r3, [r5]
   11d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11d76:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11d7a:	2a00      	cmp	r2, #0
   11d7c:	d1f7      	bne.n	11d6e <deferred_work+0x8e>
}
   11d7e:	b002      	add	sp, #8
   11d80:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   11d82:	466b      	mov	r3, sp
   11d84:	4a03      	ldr	r2, [pc, #12]	; (11d94 <deferred_work+0xb4>)
   11d86:	6810      	ldr	r0, [r2, #0]
   11d88:	6851      	ldr	r1, [r2, #4]
   11d8a:	c303      	stmia	r3!, {r0, r1}
   11d8c:	e7eb      	b.n	11d66 <deferred_work+0x86>
   11d8e:	bf00      	nop
   11d90:	20009f10 	.word	0x20009f10
   11d94:	0001e7d8 	.word	0x0001e7d8

00011d98 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d9a:	4604      	mov	r4, r0
   11d9c:	460d      	mov	r5, r1
   11d9e:	4617      	mov	r7, r2
   11da0:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11da2:	f00c f991 	bl	1e0c8 <k_is_in_isr>
   11da6:	b150      	cbz	r0, 11dbe <bt_conn_create_pdu_timeout+0x26>
   11da8:	490f      	ldr	r1, [pc, #60]	; (11de8 <bt_conn_create_pdu_timeout+0x50>)
   11daa:	4810      	ldr	r0, [pc, #64]	; (11dec <bt_conn_create_pdu_timeout+0x54>)
   11dac:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11db0:	f008 fe6c 	bl	1aa8c <printk>
   11db4:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11db8:	480b      	ldr	r0, [pc, #44]	; (11de8 <bt_conn_create_pdu_timeout+0x50>)
   11dba:	f009 f90d 	bl	1afd8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11dbe:	480c      	ldr	r0, [pc, #48]	; (11df0 <bt_conn_create_pdu_timeout+0x58>)
   11dc0:	463a      	mov	r2, r7
   11dc2:	2c00      	cmp	r4, #0
   11dc4:	bf18      	it	ne
   11dc6:	4620      	movne	r0, r4
   11dc8:	4633      	mov	r3, r6
   11dca:	f00b fb9a 	bl	1d502 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11dce:	4604      	mov	r4, r0
   11dd0:	b928      	cbnz	r0, 11dde <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11dd2:	2157      	movs	r1, #87	; 0x57
   11dd4:	4807      	ldr	r0, [pc, #28]	; (11df4 <bt_conn_create_pdu_timeout+0x5c>)
   11dd6:	f008 fe59 	bl	1aa8c <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11dda:	4620      	mov	r0, r4
   11ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11dde:	1d69      	adds	r1, r5, #5
   11de0:	3008      	adds	r0, #8
   11de2:	f003 fd8b 	bl	158fc <net_buf_simple_reserve>
	return buf;
   11de6:	e7f8      	b.n	11dda <bt_conn_create_pdu_timeout+0x42>
   11de8:	000216a7 	.word	0x000216a7
   11dec:	0001fb49 	.word	0x0001fb49
   11df0:	200085ac 	.word	0x200085ac
   11df4:	0002189e 	.word	0x0002189e

00011df8 <bt_conn_create_frag_timeout>:
{
   11df8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11dfa:	4801      	ldr	r0, [pc, #4]	; (11e00 <bt_conn_create_frag_timeout+0x8>)
   11dfc:	f7ff bfcc 	b.w	11d98 <bt_conn_create_pdu_timeout>
   11e00:	20008604 	.word	0x20008604

00011e04 <create_frag>:
{
   11e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e08:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11e0a:	f04f 33ff 	mov.w	r3, #4294967295
   11e0e:	f04f 32ff 	mov.w	r2, #4294967295
   11e12:	2000      	movs	r0, #0
{
   11e14:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11e16:	f7ff ffef 	bl	11df8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11e1a:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   11e1c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11e1e:	2b07      	cmp	r3, #7
   11e20:	f04f 0600 	mov.w	r6, #0
   11e24:	d005      	beq.n	11e32 <create_frag+0x2e>
		net_buf_unref(frag);
   11e26:	f003 fdbb 	bl	159a0 <net_buf_unref>
		return NULL;
   11e2a:	4635      	mov	r5, r6
}
   11e2c:	4628      	mov	r0, r5
   11e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11e32:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11e34:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11e38:	4e0c      	ldr	r6, [pc, #48]	; (11e6c <create_frag+0x68>)
   11e3a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11e3c:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11e40:	f00b fb85 	bl	1d54e <net_buf_simple_tailroom>
   11e44:	4580      	cmp	r8, r0
   11e46:	d20c      	bcs.n	11e62 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11e48:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11e4c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11e50:	4632      	mov	r2, r6
   11e52:	4638      	mov	r0, r7
   11e54:	f00b fb83 	bl	1d55e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11e58:	4631      	mov	r1, r6
   11e5a:	4620      	mov	r0, r4
   11e5c:	f003 fe7c 	bl	15b58 <net_buf_simple_pull>
   11e60:	e7e4      	b.n	11e2c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11e62:	4638      	mov	r0, r7
   11e64:	f00b fb73 	bl	1d54e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11e68:	b286      	uxth	r6, r0
   11e6a:	e7ef      	b.n	11e4c <create_frag+0x48>
   11e6c:	20008000 	.word	0x20008000

00011e70 <bt_conn_process_tx>:
{
   11e70:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11e72:	7a83      	ldrb	r3, [r0, #10]
{
   11e74:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11e76:	b973      	cbnz	r3, 11e96 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11e78:	1d03      	adds	r3, r0, #4
   11e7a:	e8d3 2fef 	ldaex	r2, [r3]
   11e7e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11e82:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11e86:	2d00      	cmp	r5, #0
   11e88:	d1f7      	bne.n	11e7a <bt_conn_process_tx+0xa>
   11e8a:	0653      	lsls	r3, r2, #25
   11e8c:	d503      	bpl.n	11e96 <bt_conn_process_tx+0x26>
}
   11e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11e92:	f7ff ba8f 	b.w	113b4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11e96:	2200      	movs	r2, #0
   11e98:	2300      	movs	r3, #0
   11e9a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11e9e:	f003 fcfd 	bl	1589c <net_buf_get>
	BT_ASSERT(buf);
   11ea2:	4605      	mov	r5, r0
   11ea4:	b958      	cbnz	r0, 11ebe <bt_conn_process_tx+0x4e>
   11ea6:	f240 525f 	movw	r2, #1375	; 0x55f
   11eaa:	491e      	ldr	r1, [pc, #120]	; (11f24 <bt_conn_process_tx+0xb4>)
   11eac:	481e      	ldr	r0, [pc, #120]	; (11f28 <bt_conn_process_tx+0xb8>)
   11eae:	f008 fded 	bl	1aa8c <printk>
   11eb2:	4040      	eors	r0, r0
   11eb4:	f380 8811 	msr	BASEPRI, r0
   11eb8:	f04f 0003 	mov.w	r0, #3
   11ebc:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11ebe:	4e1b      	ldr	r6, [pc, #108]	; (11f2c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   11ec0:	89aa      	ldrh	r2, [r5, #12]
   11ec2:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11ec6:	429a      	cmp	r2, r3
   11ec8:	d807      	bhi.n	11eda <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11eca:	2300      	movs	r3, #0
   11ecc:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11ece:	4629      	mov	r1, r5
   11ed0:	4620      	mov	r0, r4
   11ed2:	f7ff f971 	bl	111b8 <send_frag>
	if (!send_buf(conn, buf)) {
   11ed6:	b130      	cbz	r0, 11ee6 <bt_conn_process_tx+0x76>
}
   11ed8:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11eda:	4629      	mov	r1, r5
   11edc:	4620      	mov	r0, r4
   11ede:	f7ff ff91 	bl	11e04 <create_frag>
	if (!frag) {
   11ee2:	4601      	mov	r1, r0
   11ee4:	b920      	cbnz	r0, 11ef0 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11ee6:	4628      	mov	r0, r5
}
   11ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11eec:	f003 bd58 	b.w	159a0 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11ef0:	2301      	movs	r3, #1
   11ef2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11ef4:	4620      	mov	r0, r4
   11ef6:	f7ff f95f 	bl	111b8 <send_frag>
   11efa:	2800      	cmp	r0, #0
   11efc:	d0f3      	beq.n	11ee6 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   11efe:	89aa      	ldrh	r2, [r5, #12]
   11f00:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11f04:	429a      	cmp	r2, r3
   11f06:	d802      	bhi.n	11f0e <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11f08:	2300      	movs	r3, #0
   11f0a:	2203      	movs	r2, #3
   11f0c:	e7df      	b.n	11ece <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   11f0e:	4629      	mov	r1, r5
   11f10:	4620      	mov	r0, r4
   11f12:	f7ff ff77 	bl	11e04 <create_frag>
		if (!frag) {
   11f16:	4601      	mov	r1, r0
   11f18:	2800      	cmp	r0, #0
   11f1a:	d0e4      	beq.n	11ee6 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11f1c:	2301      	movs	r3, #1
   11f1e:	461a      	mov	r2, r3
   11f20:	e7e8      	b.n	11ef4 <bt_conn_process_tx+0x84>
   11f22:	bf00      	nop
   11f24:	000216a7 	.word	0x000216a7
   11f28:	0001fb49 	.word	0x0001fb49
   11f2c:	20008000 	.word	0x20008000

00011f30 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11f30:	4b0b      	ldr	r3, [pc, #44]	; (11f60 <bt_conn_index+0x30>)
{
   11f32:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11f34:	1ac0      	subs	r0, r0, r3
   11f36:	4b0b      	ldr	r3, [pc, #44]	; (11f64 <bt_conn_index+0x34>)
   11f38:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11f3a:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
		index = conn - acl_conns;
   11f3e:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11f42:	d90a      	bls.n	11f5a <bt_conn_index+0x2a>
   11f44:	4908      	ldr	r1, [pc, #32]	; (11f68 <bt_conn_index+0x38>)
   11f46:	4809      	ldr	r0, [pc, #36]	; (11f6c <bt_conn_index+0x3c>)
   11f48:	f640 2295 	movw	r2, #2709	; 0xa95
   11f4c:	f008 fd9e 	bl	1aa8c <printk>
   11f50:	f640 2195 	movw	r1, #2709	; 0xa95
   11f54:	4804      	ldr	r0, [pc, #16]	; (11f68 <bt_conn_index+0x38>)
   11f56:	f009 f83f 	bl	1afd8 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11f5a:	b2e0      	uxtb	r0, r4
   11f5c:	bd10      	pop	{r4, pc}
   11f5e:	bf00      	nop
   11f60:	20008bc8 	.word	0x20008bc8
   11f64:	aaaaaaab 	.word	0xaaaaaaab
   11f68:	000216a7 	.word	0x000216a7
   11f6c:	0001fb49 	.word	0x0001fb49

00011f70 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11f70:	2804      	cmp	r0, #4
   11f72:	d806      	bhi.n	11f82 <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11f74:	4b04      	ldr	r3, [pc, #16]	; (11f88 <bt_conn_lookup_index+0x18>)
   11f76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11f7a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11f7e:	f00a ba2a 	b.w	1c3d6 <bt_conn_ref>
}
   11f82:	2000      	movs	r0, #0
   11f84:	4770      	bx	lr
   11f86:	bf00      	nop
   11f88:	20008bc8 	.word	0x20008bc8

00011f8c <bt_conn_init>:

int bt_conn_init(void)
{
   11f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11f8e:	4917      	ldr	r1, [pc, #92]	; (11fec <bt_conn_init+0x60>)
   11f90:	4817      	ldr	r0, [pc, #92]	; (11ff0 <bt_conn_init+0x64>)
   11f92:	f00c f831 	bl	1dff8 <k_queue_append>
   11f96:	4917      	ldr	r1, [pc, #92]	; (11ff4 <bt_conn_init+0x68>)
   11f98:	4815      	ldr	r0, [pc, #84]	; (11ff0 <bt_conn_init+0x64>)
   11f9a:	f00c f82d 	bl	1dff8 <k_queue_append>
   11f9e:	4916      	ldr	r1, [pc, #88]	; (11ff8 <bt_conn_init+0x6c>)
   11fa0:	4813      	ldr	r0, [pc, #76]	; (11ff0 <bt_conn_init+0x64>)
   11fa2:	f00c f829 	bl	1dff8 <k_queue_append>
	}

	bt_att_init();
   11fa6:	f00a fe31 	bl	1cc0c <bt_att_init>

	err = bt_smp_init();
   11faa:	f00b faa7 	bl	1d4fc <bt_smp_init>
	if (err) {
   11fae:	4605      	mov	r5, r0
   11fb0:	b9d0      	cbnz	r0, 11fe8 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11fb2:	f00a fb14 	bl	1c5de <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11fb6:	462e      	mov	r6, r5
   11fb8:	4f10      	ldr	r7, [pc, #64]	; (11ffc <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11fba:	4638      	mov	r0, r7
   11fbc:	f00a fa0b 	bl	1c3d6 <bt_conn_ref>

			if (!conn) {
   11fc0:	4604      	mov	r4, r0
   11fc2:	b160      	cbz	r0, 11fde <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11fc4:	3004      	adds	r0, #4
   11fc6:	f00a f990 	bl	1c2ea <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11fca:	07c3      	lsls	r3, r0, #31
   11fcc:	d504      	bpl.n	11fd8 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11fce:	2102      	movs	r1, #2
   11fd0:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11fd2:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11fd4:	f7ff fb80 	bl	116d8 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11fd8:	4620      	mov	r0, r4
   11fda:	f7ff fb51 	bl	11680 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11fde:	3601      	adds	r6, #1
   11fe0:	2e05      	cmp	r6, #5
   11fe2:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11fe6:	d1e8      	bne.n	11fba <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11fe8:	4628      	mov	r0, r5
   11fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fec:	20009f14 	.word	0x20009f14
   11ff0:	20008564 	.word	0x20008564
   11ff4:	20009f24 	.word	0x20009f24
   11ff8:	20009f34 	.word	0x20009f34
   11ffc:	20008bc8 	.word	0x20008bc8

00012000 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   12000:	b570      	push	{r4, r5, r6, lr}
   12002:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   12004:	2400      	movs	r4, #0
   12006:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   12008:	4b09      	ldr	r3, [pc, #36]	; (12030 <l2cap_accept+0x30>)
   1200a:	fb06 f504 	mul.w	r5, r6, r4
   1200e:	58e8      	ldr	r0, [r5, r3]
   12010:	b148      	cbz	r0, 12026 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   12012:	3401      	adds	r4, #1
   12014:	2c05      	cmp	r4, #5
   12016:	d1f8      	bne.n	1200a <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   12018:	4806      	ldr	r0, [pc, #24]	; (12034 <l2cap_accept+0x34>)
   1201a:	2145      	movs	r1, #69	; 0x45
   1201c:	f008 fd36 	bl	1aa8c <printk>
   12020:	f06f 000b 	mvn.w	r0, #11
   12024:	e003      	b.n	1202e <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   12026:	4a04      	ldr	r2, [pc, #16]	; (12038 <l2cap_accept+0x38>)
   12028:	442b      	add	r3, r5
   1202a:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1202c:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   1202e:	bd70      	pop	{r4, r5, r6, pc}
   12030:	20008f88 	.word	0x20008f88
   12034:	00021936 	.word	0x00021936
   12038:	0001ec68 	.word	0x0001ec68

0001203c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1203e:	4605      	mov	r5, r0
   12040:	460f      	mov	r7, r1
   12042:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   12044:	2300      	movs	r3, #0
   12046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1204a:	2104      	movs	r1, #4
   1204c:	2000      	movs	r0, #0
   1204e:	f7ff fea3 	bl	11d98 <bt_conn_create_pdu_timeout>
	if (!buf) {
   12052:	4604      	mov	r4, r0
   12054:	b930      	cbnz	r0, 12064 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   12056:	462a      	mov	r2, r5
   12058:	2145      	movs	r1, #69	; 0x45
   1205a:	4806      	ldr	r0, [pc, #24]	; (12074 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   1205c:	f008 fd16 	bl	1aa8c <printk>
}
   12060:	4620      	mov	r0, r4
   12062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   12064:	2104      	movs	r1, #4
   12066:	3008      	adds	r0, #8
   12068:	f003 fdb0 	bl	15bcc <net_buf_simple_add>
	hdr->code = code;
   1206c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1206e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   12070:	8046      	strh	r6, [r0, #2]
	return buf;
   12072:	e7f5      	b.n	12060 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   12074:	00021962 	.word	0x00021962

00012078 <l2cap_rtx_timeout>:
{
   12078:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   1207a:	4604      	mov	r4, r0
   1207c:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   12080:	2145      	movs	r1, #69	; 0x45
   12082:	4622      	mov	r2, r4
   12084:	4805      	ldr	r0, [pc, #20]	; (1209c <l2cap_rtx_timeout+0x24>)
   12086:	f008 fd01 	bl	1aa8c <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1208a:	4628      	mov	r0, r5
   1208c:	4621      	mov	r1, r4
   1208e:	f00a fa07 	bl	1c4a0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   12092:	4620      	mov	r0, r4
}
   12094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   12098:	f00a ba23 	b.w	1c4e2 <bt_l2cap_chan_del>
   1209c:	0002198f 	.word	0x0002198f

000120a0 <bt_l2cap_connected>:
{
   120a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   120a4:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   120a6:	4e2d      	ldr	r6, [pc, #180]	; (1215c <bt_l2cap_connected+0xbc>)
   120a8:	4f2d      	ldr	r7, [pc, #180]	; (12160 <bt_l2cap_connected+0xc0>)
   120aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 12164 <bt_l2cap_connected+0xc4>
   120ae:	42be      	cmp	r6, r7
   120b0:	d90a      	bls.n	120c8 <bt_l2cap_connected+0x28>
   120b2:	4641      	mov	r1, r8
   120b4:	482c      	ldr	r0, [pc, #176]	; (12168 <bt_l2cap_connected+0xc8>)
   120b6:	f240 1267 	movw	r2, #359	; 0x167
   120ba:	f008 fce7 	bl	1aa8c <printk>
   120be:	f240 1167 	movw	r1, #359	; 0x167
   120c2:	4640      	mov	r0, r8
   120c4:	f008 ff88 	bl	1afd8 <assert_post_action>
   120c8:	42be      	cmp	r6, r7
   120ca:	d302      	bcc.n	120d2 <bt_l2cap_connected+0x32>
}
   120cc:	b003      	add	sp, #12
   120ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   120d2:	4628      	mov	r0, r5
   120d4:	6873      	ldr	r3, [r6, #4]
   120d6:	a901      	add	r1, sp, #4
   120d8:	4798      	blx	r3
   120da:	2800      	cmp	r0, #0
   120dc:	db38      	blt.n	12150 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   120de:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   120e0:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   120e2:	2230      	movs	r2, #48	; 0x30
   120e4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   120e8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   120ec:	2100      	movs	r1, #0
   120ee:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   120f2:	f8d6 9008 	ldr.w	r9, [r6, #8]
   120f6:	f009 ff1e 	bl	1bf36 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   120fa:	2200      	movs	r2, #0
   120fc:	4b1b      	ldr	r3, [pc, #108]	; (1216c <bt_l2cap_connected+0xcc>)
   120fe:	6163      	str	r3, [r4, #20]
   12100:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12104:	e8d3 1fef 	ldaex	r1, [r3]
   12108:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1210c:	2800      	cmp	r0, #0
   1210e:	d1f9      	bne.n	12104 <bt_l2cap_connected+0x64>
	parent->next = child;
   12110:	60a2      	str	r2, [r4, #8]
	return list->tail;
   12112:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   12114:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   12118:	b9e2      	cbnz	r2, 12154 <bt_l2cap_connected+0xb4>
	list->head = node;
   1211a:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   1211e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   12120:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   12122:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   12124:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   12128:	681b      	ldr	r3, [r3, #0]
   1212a:	b103      	cbz	r3, 1212e <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   1212c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1212e:	9b01      	ldr	r3, [sp, #4]
   12130:	3340      	adds	r3, #64	; 0x40
   12132:	e8d3 2fef 	ldaex	r2, [r3]
   12136:	f042 0201 	orr.w	r2, r2, #1
   1213a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1213e:	2900      	cmp	r1, #0
   12140:	d1f7      	bne.n	12132 <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   12142:	9801      	ldr	r0, [sp, #4]
   12144:	6843      	ldr	r3, [r0, #4]
   12146:	699b      	ldr	r3, [r3, #24]
   12148:	b113      	cbz	r3, 12150 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   1214a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1214e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   12150:	360c      	adds	r6, #12
   12152:	e7ac      	b.n	120ae <bt_l2cap_connected+0xe>
	parent->next = child;
   12154:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12156:	656b      	str	r3, [r5, #84]	; 0x54
}
   12158:	e7e1      	b.n	1211e <bt_l2cap_connected+0x7e>
   1215a:	bf00      	nop
   1215c:	0001e5bc 	.word	0x0001e5bc
   12160:	0001e5e0 	.word	0x0001e5e0
   12164:	000219a4 	.word	0x000219a4
   12168:	0001fb49 	.word	0x0001fb49
   1216c:	00012079 	.word	0x00012079

00012170 <l2cap_recv>:
{
   12170:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   12172:	898b      	ldrh	r3, [r1, #12]
{
   12174:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   12176:	2b03      	cmp	r3, #3
{
   12178:	460d      	mov	r5, r1
   1217a:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1217c:	d804      	bhi.n	12188 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   1217e:	2145      	movs	r1, #69	; 0x45
   12180:	483a      	ldr	r0, [pc, #232]	; (1226c <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   12182:	f008 fc83 	bl	1aa8c <printk>
		return 0;
   12186:	e00d      	b.n	121a4 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   12188:	2104      	movs	r1, #4
   1218a:	f105 0008 	add.w	r0, r5, #8
   1218e:	f003 fcff 	bl	15b90 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   12192:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   12194:	8843      	ldrh	r3, [r0, #2]
   12196:	4604      	mov	r4, r0
	if (buf->len != len) {
   12198:	4293      	cmp	r3, r2
   1219a:	d006      	beq.n	121aa <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1219c:	2145      	movs	r1, #69	; 0x45
   1219e:	4834      	ldr	r0, [pc, #208]	; (12270 <l2cap_recv+0x100>)
   121a0:	f008 fc74 	bl	1aa8c <printk>
}
   121a4:	2000      	movs	r0, #0
   121a6:	b005      	add	sp, #20
   121a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   121aa:	7841      	ldrb	r1, [r0, #1]
   121ac:	b911      	cbnz	r1, 121b4 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   121ae:	2145      	movs	r1, #69	; 0x45
   121b0:	4830      	ldr	r0, [pc, #192]	; (12274 <l2cap_recv+0x104>)
   121b2:	e7e6      	b.n	12182 <l2cap_recv+0x12>
	switch (hdr->code) {
   121b4:	7802      	ldrb	r2, [r0, #0]
   121b6:	2a12      	cmp	r2, #18
   121b8:	d00f      	beq.n	121da <l2cap_recv+0x6a>
   121ba:	2a13      	cmp	r2, #19
   121bc:	d008      	beq.n	121d0 <l2cap_recv+0x60>
   121be:	2a01      	cmp	r2, #1
   121c0:	d0f0      	beq.n	121a4 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   121c2:	2157      	movs	r1, #87	; 0x57
   121c4:	482c      	ldr	r0, [pc, #176]	; (12278 <l2cap_recv+0x108>)
   121c6:	f008 fc61 	bl	1aa8c <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   121ca:	7861      	ldrb	r1, [r4, #1]
   121cc:	6830      	ldr	r0, [r6, #0]
   121ce:	e00d      	b.n	121ec <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   121d0:	2b01      	cmp	r3, #1
   121d2:	d8e7      	bhi.n	121a4 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   121d4:	2145      	movs	r1, #69	; 0x45
   121d6:	4829      	ldr	r0, [pc, #164]	; (1227c <l2cap_recv+0x10c>)
   121d8:	e7d3      	b.n	12182 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   121da:	2b07      	cmp	r3, #7
   121dc:	d802      	bhi.n	121e4 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   121de:	2145      	movs	r1, #69	; 0x45
   121e0:	4827      	ldr	r0, [pc, #156]	; (12280 <l2cap_recv+0x110>)
   121e2:	e7ce      	b.n	12182 <l2cap_recv+0x12>
   121e4:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   121e6:	78e7      	ldrb	r7, [r4, #3]
   121e8:	b11f      	cbz	r7, 121f2 <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   121ea:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   121ec:	f00a f9c0 	bl	1c570 <l2cap_send_reject.constprop.0>
		break;
   121f0:	e7d8      	b.n	121a4 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   121f2:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   121f4:	7850      	ldrb	r0, [r2, #1]
   121f6:	7813      	ldrb	r3, [r2, #0]
   121f8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   121fc:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   12200:	78d0      	ldrb	r0, [r2, #3]
   12202:	7893      	ldrb	r3, [r2, #2]
   12204:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12208:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1220c:	7950      	ldrb	r0, [r2, #5]
   1220e:	7913      	ldrb	r3, [r2, #4]
   12210:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12214:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   12218:	7993      	ldrb	r3, [r2, #6]
   1221a:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1221c:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1221e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12222:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   12224:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12228:	f7ff ff08 	bl	1203c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1222c:	4605      	mov	r5, r0
   1222e:	2800      	cmp	r0, #0
   12230:	d0b8      	beq.n	121a4 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   12232:	a902      	add	r1, sp, #8
   12234:	4620      	mov	r0, r4
   12236:	f7ff f895 	bl	11364 <le_param_req>
   1223a:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1223c:	2102      	movs	r1, #2
   1223e:	f105 0008 	add.w	r0, r5, #8
   12242:	f003 fcc3 	bl	15bcc <net_buf_simple_add>
	if (accepted) {
   12246:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1224a:	b2db      	uxtb	r3, r3
   1224c:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1224e:	462a      	mov	r2, r5
   12250:	463b      	mov	r3, r7
   12252:	2105      	movs	r1, #5
   12254:	4620      	mov	r0, r4
   12256:	9700      	str	r7, [sp, #0]
   12258:	f00a f971 	bl	1c53e <bt_l2cap_send_cb>
	if (accepted) {
   1225c:	2e00      	cmp	r6, #0
   1225e:	d0a1      	beq.n	121a4 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   12260:	4620      	mov	r0, r4
   12262:	a902      	add	r1, sp, #8
   12264:	f00a f8f2 	bl	1c44c <bt_conn_le_conn_update>
   12268:	e79c      	b.n	121a4 <l2cap_recv+0x34>
   1226a:	bf00      	nop
   1226c:	000219d5 	.word	0x000219d5
   12270:	000219f8 	.word	0x000219f8
   12274:	00021a1e 	.word	0x00021a1e
   12278:	00021a8d 	.word	0x00021a8d
   1227c:	00021a44 	.word	0x00021a44
   12280:	00021a65 	.word	0x00021a65

00012284 <bt_l2cap_recv>:
{
   12284:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   12286:	898b      	ldrh	r3, [r1, #12]
{
   12288:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1228a:	2b03      	cmp	r3, #3
{
   1228c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1228e:	d808      	bhi.n	122a2 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   12290:	2145      	movs	r1, #69	; 0x45
   12292:	480e      	ldr	r0, [pc, #56]	; (122cc <bt_l2cap_recv+0x48>)
   12294:	f008 fbfa 	bl	1aa8c <printk>
	net_buf_unref(buf);
   12298:	4620      	mov	r0, r4
}
   1229a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1229e:	f003 bb7f 	b.w	159a0 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   122a2:	2104      	movs	r1, #4
   122a4:	f104 0008 	add.w	r0, r4, #8
   122a8:	f003 fc72 	bl	15b90 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   122ac:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   122ae:	4628      	mov	r0, r5
   122b0:	4611      	mov	r1, r2
   122b2:	f00a f984 	bl	1c5be <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   122b6:	b920      	cbnz	r0, 122c2 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   122b8:	2157      	movs	r1, #87	; 0x57
   122ba:	4805      	ldr	r0, [pc, #20]	; (122d0 <bt_l2cap_recv+0x4c>)
   122bc:	f008 fbe6 	bl	1aa8c <printk>
		net_buf_unref(buf);
   122c0:	e7ea      	b.n	12298 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   122c2:	6843      	ldr	r3, [r0, #4]
   122c4:	4621      	mov	r1, r4
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	4798      	blx	r3
   122ca:	e7e5      	b.n	12298 <bt_l2cap_recv+0x14>
   122cc:	00021ab0 	.word	0x00021ab0
   122d0:	00021ad2 	.word	0x00021ad2

000122d4 <bt_l2cap_update_conn_param>:
{
   122d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122d6:	460c      	mov	r4, r1
	ident++;
   122d8:	4914      	ldr	r1, [pc, #80]	; (1232c <bt_l2cap_update_conn_param+0x58>)
{
   122da:	4605      	mov	r5, r0
	ident++;
   122dc:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   122de:	2208      	movs	r2, #8
	ident++;
   122e0:	3301      	adds	r3, #1
	if (!ident) {
   122e2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   122e6:	bf08      	it	eq
   122e8:	2301      	moveq	r3, #1
   122ea:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   122ec:	2012      	movs	r0, #18
   122ee:	7809      	ldrb	r1, [r1, #0]
   122f0:	f7ff fea4 	bl	1203c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   122f4:	4606      	mov	r6, r0
   122f6:	b1b0      	cbz	r0, 12326 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   122f8:	2108      	movs	r1, #8
   122fa:	4408      	add	r0, r1
   122fc:	f003 fc66 	bl	15bcc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12300:	8822      	ldrh	r2, [r4, #0]
   12302:	2105      	movs	r1, #5
   12304:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   12306:	8862      	ldrh	r2, [r4, #2]
   12308:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1230a:	88a2      	ldrh	r2, [r4, #4]
   1230c:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1230e:	88e2      	ldrh	r2, [r4, #6]
   12310:	2400      	movs	r4, #0
   12312:	80c2      	strh	r2, [r0, #6]
   12314:	4623      	mov	r3, r4
   12316:	4632      	mov	r2, r6
   12318:	4628      	mov	r0, r5
   1231a:	9400      	str	r4, [sp, #0]
   1231c:	f00a f90f 	bl	1c53e <bt_l2cap_send_cb>
	return 0;
   12320:	4620      	mov	r0, r4
}
   12322:	b002      	add	sp, #8
   12324:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   12326:	f06f 000b 	mvn.w	r0, #11
   1232a:	e7fa      	b.n	12322 <bt_l2cap_update_conn_param+0x4e>
   1232c:	2000ea3b 	.word	0x2000ea3b

00012330 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   12330:	4b02      	ldr	r3, [pc, #8]	; (1233c <att_cfm_sent+0xc>)
   12332:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12336:	f00a b965 	b.w	1c604 <att_sent>
   1233a:	bf00      	nop
   1233c:	0001ca13 	.word	0x0001ca13

00012340 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   12340:	4b02      	ldr	r3, [pc, #8]	; (1234c <att_rsp_sent+0xc>)
   12342:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12346:	f00a b95d 	b.w	1c604 <att_sent>
   1234a:	bf00      	nop
   1234c:	0001c9ff 	.word	0x0001c9ff

00012350 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   12350:	4b02      	ldr	r3, [pc, #8]	; (1235c <att_req_sent+0xc>)
   12352:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12356:	f00a b955 	b.w	1c604 <att_sent>
   1235a:	bf00      	nop
   1235c:	0001250d 	.word	0x0001250d

00012360 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   12360:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   12362:	7a83      	ldrb	r3, [r0, #10]
   12364:	2b07      	cmp	r3, #7
   12366:	d005      	beq.n	12374 <att_get+0x14>
		BT_WARN("Not connected");
   12368:	2157      	movs	r1, #87	; 0x57
   1236a:	480e      	ldr	r0, [pc, #56]	; (123a4 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   1236c:	f008 fb8e 	bl	1aa8c <printk>
		return NULL;
   12370:	2400      	movs	r4, #0
   12372:	e008      	b.n	12386 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   12374:	2104      	movs	r1, #4
   12376:	f00a f922 	bl	1c5be <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1237a:	4604      	mov	r4, r0
   1237c:	b928      	cbnz	r0, 1238a <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1237e:	2145      	movs	r1, #69	; 0x45
   12380:	4809      	ldr	r0, [pc, #36]	; (123a8 <att_get+0x48>)
   12382:	f008 fb83 	bl	1aa8c <printk>
	}

	return att_chan->att;
}
   12386:	4620      	mov	r0, r4
   12388:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1238a:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   1238e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   12392:	075b      	lsls	r3, r3, #29
   12394:	d502      	bpl.n	1239c <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   12396:	2157      	movs	r1, #87	; 0x57
   12398:	4804      	ldr	r0, [pc, #16]	; (123ac <att_get+0x4c>)
   1239a:	e7e7      	b.n	1236c <att_get+0xc>
	return att_chan->att;
   1239c:	f850 4c08 	ldr.w	r4, [r0, #-8]
   123a0:	e7f1      	b.n	12386 <att_get+0x26>
   123a2:	bf00      	nop
   123a4:	00021b0c 	.word	0x00021b0c
   123a8:	00021b1f 	.word	0x00021b1f
   123ac:	00021b3f 	.word	0x00021b3f

000123b0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   123b0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   123b2:	3808      	subs	r0, #8
   123b4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   123b6:	a901      	add	r1, sp, #4
   123b8:	4802      	ldr	r0, [pc, #8]	; (123c4 <bt_att_released+0x14>)
   123ba:	f005 fe8d 	bl	180d8 <k_mem_slab_free>
}
   123be:	b003      	add	sp, #12
   123c0:	f85d fb04 	ldr.w	pc, [sp], #4
   123c4:	200084d8 	.word	0x200084d8

000123c8 <find_type_cb>:
{
   123c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123cc:	f642 0301 	movw	r3, #10241	; 0x2801
   123d0:	2500      	movs	r5, #0
{
   123d2:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   123d4:	f8d2 9000 	ldr.w	r9, [r2]
{
   123d8:	4607      	mov	r7, r0
   123da:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123dc:	6800      	ldr	r0, [r0, #0]
   123de:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   123e0:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   123e4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123e6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   123ea:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   123ee:	f009 fdec 	bl	1bfca <bt_uuid_cmp>
   123f2:	2800      	cmp	r0, #0
   123f4:	d060      	beq.n	124b8 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   123f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   123fa:	6838      	ldr	r0, [r7, #0]
   123fc:	a90b      	add	r1, sp, #44	; 0x2c
   123fe:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   12402:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   12406:	f009 fde0 	bl	1bfca <bt_uuid_cmp>
   1240a:	b138      	cbz	r0, 1241c <find_type_cb+0x54>
		if (data->group &&
   1240c:	68a3      	ldr	r3, [r4, #8]
   1240e:	b11b      	cbz	r3, 12418 <find_type_cb+0x50>
   12410:	885a      	ldrh	r2, [r3, #2]
   12412:	42b2      	cmp	r2, r6
   12414:	d200      	bcs.n	12418 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   12416:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   12418:	2001      	movs	r0, #1
   1241a:	e009      	b.n	12430 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1241c:	6861      	ldr	r1, [r4, #4]
   1241e:	4608      	mov	r0, r1
   12420:	f00a f8e8 	bl	1c5f4 <net_buf_frags_len>
   12424:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12428:	1a1b      	subs	r3, r3, r0
   1242a:	2b03      	cmp	r3, #3
   1242c:	d803      	bhi.n	12436 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1242e:	2000      	movs	r0, #0
}
   12430:	b011      	add	sp, #68	; 0x44
   12432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   12436:	4608      	mov	r0, r1
   12438:	f003 fb0e 	bl	15a58 <net_buf_frag_last>
   1243c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1243e:	6860      	ldr	r0, [r4, #4]
   12440:	f00a f8d8 	bl	1c5f4 <net_buf_frags_len>
   12444:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   12448:	f105 0b08 	add.w	fp, r5, #8
   1244c:	ebaa 0a00 	sub.w	sl, sl, r0
   12450:	4658      	mov	r0, fp
   12452:	f00b f87c 	bl	1d54e <net_buf_simple_tailroom>
   12456:	4582      	cmp	sl, r0
   12458:	d231      	bcs.n	124be <find_type_cb+0xf6>
   1245a:	6860      	ldr	r0, [r4, #4]
   1245c:	f00a f8ca 	bl	1c5f4 <net_buf_frags_len>
   12460:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12464:	1a18      	subs	r0, r3, r0
	if (!len) {
   12466:	b970      	cbnz	r0, 12486 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   12468:	6863      	ldr	r3, [r4, #4]
   1246a:	7998      	ldrb	r0, [r3, #6]
   1246c:	f003 f918 	bl	156a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   12470:	2200      	movs	r2, #0
   12472:	2300      	movs	r3, #0
   12474:	f00b f845 	bl	1d502 <net_buf_alloc_fixed>
		if (!frag) {
   12478:	4605      	mov	r5, r0
   1247a:	2800      	cmp	r0, #0
   1247c:	d0d7      	beq.n	1242e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1247e:	4601      	mov	r1, r0
   12480:	6860      	ldr	r0, [r4, #4]
   12482:	f003 fb29 	bl	15ad8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   12486:	2300      	movs	r3, #0
   12488:	9300      	str	r3, [sp, #0]
   1248a:	4639      	mov	r1, r7
   1248c:	f8d7 9004 	ldr.w	r9, [r7, #4]
   12490:	2310      	movs	r3, #16
   12492:	4640      	mov	r0, r8
   12494:	aa02      	add	r2, sp, #8
   12496:	47c8      	blx	r9
	if (read < 0) {
   12498:	1e07      	subs	r7, r0, #0
   1249a:	db0d      	blt.n	124b8 <find_type_cb+0xf0>
	if (read != data->value_len) {
   1249c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1249e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   124a0:	42ba      	cmp	r2, r7
   124a2:	d02b      	beq.n	124fc <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   124a4:	4601      	mov	r1, r0
   124a6:	a80b      	add	r0, sp, #44	; 0x2c
   124a8:	f009 fdbd 	bl	1c026 <bt_uuid_create>
   124ac:	b958      	cbnz	r0, 124c6 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   124ae:	2157      	movs	r1, #87	; 0x57
   124b0:	7c22      	ldrb	r2, [r4, #16]
   124b2:	4814      	ldr	r0, [pc, #80]	; (12504 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   124b4:	f008 faea 	bl	1aa8c <printk>
	data->group = NULL;
   124b8:	2300      	movs	r3, #0
   124ba:	60a3      	str	r3, [r4, #8]
   124bc:	e7ac      	b.n	12418 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   124be:	4658      	mov	r0, fp
   124c0:	f00b f845 	bl	1d54e <net_buf_simple_tailroom>
   124c4:	e7cf      	b.n	12466 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   124c6:	b2fa      	uxtb	r2, r7
   124c8:	a902      	add	r1, sp, #8
   124ca:	a806      	add	r0, sp, #24
   124cc:	f009 fdab 	bl	1c026 <bt_uuid_create>
   124d0:	b918      	cbnz	r0, 124da <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   124d2:	463a      	mov	r2, r7
   124d4:	2157      	movs	r1, #87	; 0x57
   124d6:	480c      	ldr	r0, [pc, #48]	; (12508 <find_type_cb+0x140>)
   124d8:	e7ec      	b.n	124b4 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   124da:	a906      	add	r1, sp, #24
   124dc:	a80b      	add	r0, sp, #44	; 0x2c
   124de:	f009 fd74 	bl	1bfca <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   124e2:	2800      	cmp	r0, #0
   124e4:	d1e8      	bne.n	124b8 <find_type_cb+0xf0>
	data->err = 0x00;
   124e6:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   124e8:	2104      	movs	r1, #4
   124ea:	7463      	strb	r3, [r4, #17]
   124ec:	f105 0008 	add.w	r0, r5, #8
   124f0:	f003 fb6c 	bl	15bcc <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   124f4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   124f6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   124f8:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   124fa:	e78d      	b.n	12418 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   124fc:	a902      	add	r1, sp, #8
   124fe:	f009 fcde 	bl	1bebe <memcmp>
   12502:	e7ee      	b.n	124e2 <find_type_cb+0x11a>
   12504:	00021b68 	.word	0x00021b68
   12508:	00021b8c 	.word	0x00021b8c

0001250c <chan_req_sent>:
	if (chan->req) {
   1250c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   12510:	b13b      	cbz	r3, 12522 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12512:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   12516:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1251a:	2300      	movs	r3, #0
   1251c:	4801      	ldr	r0, [pc, #4]	; (12524 <chan_req_sent+0x18>)
   1251e:	f007 bb3f 	b.w	19ba0 <k_delayed_work_submit_to_queue>
}
   12522:	4770      	bx	lr
   12524:	200098e0 	.word	0x200098e0

00012528 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   12528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1252a:	2300      	movs	r3, #0
{
   1252c:	4606      	mov	r6, r0
   1252e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12530:	2200      	movs	r2, #0
   12532:	4669      	mov	r1, sp
   12534:	4823      	ldr	r0, [pc, #140]	; (125c4 <bt_att_accept+0x9c>)
   12536:	f005 fd75 	bl	18024 <k_mem_slab_alloc>
   1253a:	4604      	mov	r4, r0
   1253c:	b148      	cbz	r0, 12552 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   1253e:	4632      	mov	r2, r6
   12540:	2145      	movs	r1, #69	; 0x45
   12542:	4821      	ldr	r0, [pc, #132]	; (125c8 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12544:	f008 faa2 	bl	1aa8c <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   12548:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1254c:	4620      	mov	r0, r4
   1254e:	b003      	add	sp, #12
   12550:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   12552:	4601      	mov	r1, r0
   12554:	2230      	movs	r2, #48	; 0x30
   12556:	9800      	ldr	r0, [sp, #0]
   12558:	f009 fced 	bl	1bf36 <memset>
	att->conn = conn;
   1255c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1255e:	2200      	movs	r2, #0
	list->head = NULL;
   12560:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   12564:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   12568:	60ac      	str	r4, [r5, #8]
   1256a:	2300      	movs	r3, #0
   1256c:	4817      	ldr	r0, [pc, #92]	; (125cc <bt_att_accept+0xa4>)
   1256e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   12570:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   12572:	f005 fd57 	bl	18024 <k_mem_slab_alloc>
   12576:	4604      	mov	r4, r0
   12578:	b118      	cbz	r0, 12582 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1257a:	2145      	movs	r1, #69	; 0x45
   1257c:	682a      	ldr	r2, [r5, #0]
   1257e:	4814      	ldr	r0, [pc, #80]	; (125d0 <bt_att_accept+0xa8>)
   12580:	e7e0      	b.n	12544 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   12582:	4601      	mov	r1, r0
   12584:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12588:	9801      	ldr	r0, [sp, #4]
   1258a:	f009 fcd4 	bl	1bf36 <memset>
	chan->chan.chan.ops = &ops;
   1258e:	9801      	ldr	r0, [sp, #4]
   12590:	4b10      	ldr	r3, [pc, #64]	; (125d4 <bt_att_accept+0xac>)
   12592:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   12594:	30d0      	adds	r0, #208	; 0xd0
   12596:	f00b fd22 	bl	1dfde <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   1259a:	9801      	ldr	r0, [sp, #4]
   1259c:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   125a0:	2203      	movs	r2, #3
   125a2:	4611      	mov	r1, r2
   125a4:	f00b fd80 	bl	1e0a8 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   125a8:	9b01      	ldr	r3, [sp, #4]
   125aa:	33c8      	adds	r3, #200	; 0xc8
   125ac:	e8d3 2fef 	ldaex	r2, [r3]
   125b0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   125b4:	2900      	cmp	r1, #0
   125b6:	d1f9      	bne.n	125ac <bt_att_accept+0x84>
	chan->att = att;
   125b8:	9b01      	ldr	r3, [sp, #4]
   125ba:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   125be:	603b      	str	r3, [r7, #0]
	return 0;
   125c0:	e7c4      	b.n	1254c <bt_att_accept+0x24>
   125c2:	bf00      	nop
   125c4:	200084bc 	.word	0x200084bc
   125c8:	00021bb0 	.word	0x00021bb0
   125cc:	200084d8 	.word	0x200084d8
   125d0:	00021bda 	.word	0x00021bda
   125d4:	20008350 	.word	0x20008350

000125d8 <read_group_cb>:
{
   125d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   125dc:	f04f 0800 	mov.w	r8, #0
   125e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   125e4:	4605      	mov	r5, r0
   125e6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   125e8:	6800      	ldr	r0, [r0, #0]
   125ea:	a902      	add	r1, sp, #8
{
   125ec:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   125ee:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   125f0:	f88d 8008 	strb.w	r8, [sp, #8]
   125f4:	f8ad 300a 	strh.w	r3, [sp, #10]
   125f8:	f009 fce7 	bl	1bfca <bt_uuid_cmp>
   125fc:	b1a0      	cbz	r0, 12628 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   125fe:	f642 0301 	movw	r3, #10241	; 0x2801
   12602:	6828      	ldr	r0, [r5, #0]
   12604:	a903      	add	r1, sp, #12
   12606:	f88d 800c 	strb.w	r8, [sp, #12]
   1260a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1260e:	f009 fcdc 	bl	1bfca <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12612:	b148      	cbz	r0, 12628 <read_group_cb+0x50>
		if (data->group &&
   12614:	6923      	ldr	r3, [r4, #16]
   12616:	b11b      	cbz	r3, 12620 <read_group_cb+0x48>
   12618:	885a      	ldrh	r2, [r3, #2]
   1261a:	42b2      	cmp	r2, r6
   1261c:	d200      	bcs.n	12620 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1261e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   12620:	2001      	movs	r0, #1
}
   12622:	b004      	add	sp, #16
   12624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12628:	6861      	ldr	r1, [r4, #4]
   1262a:	6828      	ldr	r0, [r5, #0]
   1262c:	f009 fccd 	bl	1bfca <bt_uuid_cmp>
   12630:	b110      	cbz	r0, 12638 <read_group_cb+0x60>
		data->group = NULL;
   12632:	2300      	movs	r3, #0
   12634:	6123      	str	r3, [r4, #16]
   12636:	e7f3      	b.n	12620 <read_group_cb+0x48>
	if (data->rsp->len &&
   12638:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1263a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1263c:	781a      	ldrb	r2, [r3, #0]
   1263e:	b13a      	cbz	r2, 12650 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12640:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   12644:	8981      	ldrh	r1, [r0, #12]
   12646:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   12648:	4293      	cmp	r3, r2
   1264a:	da01      	bge.n	12650 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1264c:	2000      	movs	r0, #0
   1264e:	e7e8      	b.n	12622 <read_group_cb+0x4a>
   12650:	2104      	movs	r1, #4
   12652:	3008      	adds	r0, #8
   12654:	f003 faba 	bl	15bcc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12658:	4b09      	ldr	r3, [pc, #36]	; (12680 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1265a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1265c:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   1265e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12660:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12662:	68a2      	ldr	r2, [r4, #8]
   12664:	9300      	str	r3, [sp, #0]
   12666:	4638      	mov	r0, r7
   12668:	2300      	movs	r3, #0
   1266a:	9401      	str	r4, [sp, #4]
   1266c:	f00a f8bd 	bl	1c7ea <att_chan_read>
	if (read < 0) {
   12670:	2800      	cmp	r0, #0
   12672:	dbeb      	blt.n	1264c <read_group_cb+0x74>
	if (!data->group) {
   12674:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   12676:	3800      	subs	r0, #0
   12678:	bf18      	it	ne
   1267a:	2001      	movne	r0, #1
   1267c:	e7d1      	b.n	12622 <read_group_cb+0x4a>
   1267e:	bf00      	nop
   12680:	0001c76f 	.word	0x0001c76f

00012684 <chan_send>:
{
   12684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12688:	688b      	ldr	r3, [r1, #8]
{
   1268a:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1268c:	781b      	ldrb	r3, [r3, #0]
{
   1268e:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12690:	2bd2      	cmp	r3, #210	; 0xd2
{
   12692:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12694:	d110      	bne.n	126b8 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   12696:	6803      	ldr	r3, [r0, #0]
   12698:	6818      	ldr	r0, [r3, #0]
   1269a:	f00a ff2c 	bl	1d4f6 <bt_smp_sign>
		if (err) {
   1269e:	4606      	mov	r6, r0
   126a0:	b150      	cbz	r0, 126b8 <chan_send+0x34>
			BT_ERR("Error signing data");
   126a2:	2145      	movs	r1, #69	; 0x45
   126a4:	4824      	ldr	r0, [pc, #144]	; (12738 <chan_send+0xb4>)
   126a6:	f008 f9f1 	bl	1aa8c <printk>
		net_buf_unref(buf);
   126aa:	4620      	mov	r0, r4
   126ac:	f003 f978 	bl	159a0 <net_buf_unref>
}
   126b0:	4630      	mov	r0, r6
   126b2:	b003      	add	sp, #12
   126b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   126b8:	f104 0008 	add.w	r0, r4, #8
   126bc:	f00a ff43 	bl	1d546 <net_buf_simple_headroom>
	state->len = buf->len;
   126c0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   126c4:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   126c6:	f1b9 0f00 	cmp.w	r9, #0
   126ca:	d10a      	bne.n	126e2 <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   126cc:	68a3      	ldr	r3, [r4, #8]
   126ce:	7818      	ldrb	r0, [r3, #0]
   126d0:	f009 ffb0 	bl	1c634 <att_op_get_type>
   126d4:	1e43      	subs	r3, r0, #1
   126d6:	b2db      	uxtb	r3, r3
   126d8:	2b04      	cmp	r3, #4
   126da:	bf9c      	itt	ls
   126dc:	4a17      	ldrls	r2, [pc, #92]	; (1273c <chan_send+0xb8>)
   126de:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   126e2:	682b      	ldr	r3, [r5, #0]
   126e4:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   126e6:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   126ea:	681e      	ldr	r6, [r3, #0]
   126ec:	f003 f99c 	bl	15a28 <net_buf_ref>
   126f0:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   126f4:	4b12      	ldr	r3, [pc, #72]	; (12740 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   126f6:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   126f8:	4299      	cmp	r1, r3
   126fa:	d019      	beq.n	12730 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   126fc:	4b11      	ldr	r3, [pc, #68]	; (12744 <chan_send+0xc0>)
   126fe:	4299      	cmp	r1, r3
   12700:	d018      	beq.n	12734 <chan_send+0xb0>
		return att_sent;
   12702:	f8df c044 	ldr.w	ip, [pc, #68]	; 12748 <chan_send+0xc4>
   12706:	4b11      	ldr	r3, [pc, #68]	; (1274c <chan_send+0xc8>)
   12708:	4811      	ldr	r0, [pc, #68]	; (12750 <chan_send+0xcc>)
   1270a:	4561      	cmp	r1, ip
   1270c:	bf18      	it	ne
   1270e:	4603      	movne	r3, r0
				&chan->chan.chan);
   12710:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12712:	4630      	mov	r0, r6
   12714:	2104      	movs	r1, #4
   12716:	9500      	str	r5, [sp, #0]
   12718:	f009 ff11 	bl	1c53e <bt_l2cap_send_cb>
	if (!err) {
   1271c:	4606      	mov	r6, r0
   1271e:	2800      	cmp	r0, #0
   12720:	d0c3      	beq.n	126aa <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   12722:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12724:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12728:	fa10 f787 	uxtah	r7, r0, r7
   1272c:	60a7      	str	r7, [r4, #8]
}
   1272e:	e7bf      	b.n	126b0 <chan_send+0x2c>
		return att_rsp_sent;
   12730:	4b08      	ldr	r3, [pc, #32]	; (12754 <chan_send+0xd0>)
   12732:	e7ed      	b.n	12710 <chan_send+0x8c>
		return att_cfm_sent;
   12734:	4b08      	ldr	r3, [pc, #32]	; (12758 <chan_send+0xd4>)
   12736:	e7eb      	b.n	12710 <chan_send+0x8c>
   12738:	00021c04 	.word	0x00021c04
   1273c:	0001ec88 	.word	0x0001ec88
   12740:	0001c9ff 	.word	0x0001c9ff
   12744:	0001ca13 	.word	0x0001ca13
   12748:	0001250d 	.word	0x0001250d
   1274c:	00012351 	.word	0x00012351
   12750:	0001c605 	.word	0x0001c605
   12754:	00012341 	.word	0x00012341
   12758:	00012331 	.word	0x00012331

0001275c <bt_att_chan_req_send>:
{
   1275c:	b570      	push	{r4, r5, r6, lr}
   1275e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   12760:	4604      	mov	r4, r0
   12762:	b950      	cbnz	r0, 1277a <bt_att_chan_req_send+0x1e>
   12764:	4924      	ldr	r1, [pc, #144]	; (127f8 <bt_att_chan_req_send+0x9c>)
   12766:	4825      	ldr	r0, [pc, #148]	; (127fc <bt_att_chan_req_send+0xa0>)
   12768:	f240 224f 	movw	r2, #591	; 0x24f
   1276c:	f008 f98e 	bl	1aa8c <printk>
   12770:	f240 214f 	movw	r1, #591	; 0x24f
   12774:	4820      	ldr	r0, [pc, #128]	; (127f8 <bt_att_chan_req_send+0x9c>)
   12776:	f008 fc2f 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1277a:	b955      	cbnz	r5, 12792 <bt_att_chan_req_send+0x36>
   1277c:	491e      	ldr	r1, [pc, #120]	; (127f8 <bt_att_chan_req_send+0x9c>)
   1277e:	481f      	ldr	r0, [pc, #124]	; (127fc <bt_att_chan_req_send+0xa0>)
   12780:	f44f 7214 	mov.w	r2, #592	; 0x250
   12784:	f008 f982 	bl	1aa8c <printk>
   12788:	f44f 7114 	mov.w	r1, #592	; 0x250
   1278c:	481a      	ldr	r0, [pc, #104]	; (127f8 <bt_att_chan_req_send+0x9c>)
   1278e:	f008 fc23 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   12792:	686b      	ldr	r3, [r5, #4]
   12794:	b953      	cbnz	r3, 127ac <bt_att_chan_req_send+0x50>
   12796:	4918      	ldr	r1, [pc, #96]	; (127f8 <bt_att_chan_req_send+0x9c>)
   12798:	4818      	ldr	r0, [pc, #96]	; (127fc <bt_att_chan_req_send+0xa0>)
   1279a:	f240 2251 	movw	r2, #593	; 0x251
   1279e:	f008 f975 	bl	1aa8c <printk>
   127a2:	f240 2151 	movw	r1, #593	; 0x251
   127a6:	4814      	ldr	r0, [pc, #80]	; (127f8 <bt_att_chan_req_send+0x9c>)
   127a8:	f008 fc16 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   127ac:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   127b0:	b153      	cbz	r3, 127c8 <bt_att_chan_req_send+0x6c>
   127b2:	4911      	ldr	r1, [pc, #68]	; (127f8 <bt_att_chan_req_send+0x9c>)
   127b4:	4811      	ldr	r0, [pc, #68]	; (127fc <bt_att_chan_req_send+0xa0>)
   127b6:	f240 2252 	movw	r2, #594	; 0x252
   127ba:	f008 f967 	bl	1aa8c <printk>
   127be:	f240 2152 	movw	r1, #594	; 0x252
   127c2:	480d      	ldr	r0, [pc, #52]	; (127f8 <bt_att_chan_req_send+0x9c>)
   127c4:	f008 fc08 	bl	1afd8 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   127c8:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   127cc:	2200      	movs	r2, #0
   127ce:	2300      	movs	r3, #0
   127d0:	4630      	mov	r0, r6
   127d2:	f006 ffbf 	bl	19754 <z_impl_k_sem_take>
   127d6:	2800      	cmp	r0, #0
   127d8:	db0a      	blt.n	127f0 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   127da:	4620      	mov	r0, r4
   127dc:	4629      	mov	r1, r5
   127de:	f00a f8e8 	bl	1c9b2 <chan_req_send>
	if (err < 0) {
   127e2:	1e04      	subs	r4, r0, #0
   127e4:	da02      	bge.n	127ec <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   127e6:	4630      	mov	r0, r6
   127e8:	f006 ff78 	bl	196dc <z_impl_k_sem_give>
}
   127ec:	4620      	mov	r0, r4
   127ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   127f0:	f06f 040a 	mvn.w	r4, #10
   127f4:	e7fa      	b.n	127ec <bt_att_chan_req_send+0x90>
   127f6:	bf00      	nop
   127f8:	00021c1c 	.word	0x00021c1c
   127fc:	0001fb49 	.word	0x0001fb49

00012800 <read_type_cb>:
{
   12800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   12804:	f8d2 8000 	ldr.w	r8, [r2]
{
   12808:	4606      	mov	r6, r0
   1280a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1280c:	6800      	ldr	r0, [r0, #0]
   1280e:	6851      	ldr	r1, [r2, #4]
{
   12810:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   12812:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12816:	f009 fbd8 	bl	1bfca <bt_uuid_cmp>
   1281a:	4607      	mov	r7, r0
   1281c:	2800      	cmp	r0, #0
   1281e:	d13e      	bne.n	1289e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12820:	4628      	mov	r0, r5
   12822:	2215      	movs	r2, #21
   12824:	4631      	mov	r1, r6
   12826:	f00a fd5f 	bl	1d2e8 <bt_gatt_check_perm>
   1282a:	4605      	mov	r5, r0
   1282c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1282e:	b148      	cbz	r0, 12844 <read_type_cb+0x44>
		if (data->rsp->len) {
   12830:	68e3      	ldr	r3, [r4, #12]
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	b923      	cbnz	r3, 12840 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   12836:	2500      	movs	r5, #0
}
   12838:	4628      	mov	r0, r5
   1283a:	b003      	add	sp, #12
   1283c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   12840:	7527      	strb	r7, [r4, #20]
   12842:	e7f8      	b.n	12836 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12844:	68a0      	ldr	r0, [r4, #8]
   12846:	f003 f907 	bl	15a58 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1284a:	2102      	movs	r1, #2
   1284c:	3008      	adds	r0, #8
   1284e:	f003 f9bd 	bl	15bcc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12852:	4b14      	ldr	r3, [pc, #80]	; (128a4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12854:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12856:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   12858:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1285c:	68a2      	ldr	r2, [r4, #8]
   1285e:	9300      	str	r3, [sp, #0]
   12860:	4640      	mov	r0, r8
   12862:	462b      	mov	r3, r5
   12864:	9401      	str	r4, [sp, #4]
   12866:	f009 ffc0 	bl	1c7ea <att_chan_read>
	if (read < 0) {
   1286a:	2800      	cmp	r0, #0
   1286c:	da07      	bge.n	1287e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1286e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   12872:	bf32      	itee	cc
   12874:	200e      	movcc	r0, #14
		return -err;
   12876:	4240      	negcs	r0, r0
   12878:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1287a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1287c:	e7dc      	b.n	12838 <read_type_cb+0x38>
	if (!data->item) {
   1287e:	6923      	ldr	r3, [r4, #16]
   12880:	2b00      	cmp	r3, #0
   12882:	d0d8      	beq.n	12836 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12884:	68a0      	ldr	r0, [r4, #8]
   12886:	f009 feb5 	bl	1c5f4 <net_buf_frags_len>
   1288a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1288e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12890:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12892:	7818      	ldrb	r0, [r3, #0]
   12894:	4285      	cmp	r5, r0
   12896:	bf94      	ite	ls
   12898:	2500      	movls	r5, #0
   1289a:	2501      	movhi	r5, #1
   1289c:	e7cc      	b.n	12838 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1289e:	2501      	movs	r5, #1
   128a0:	e7ca      	b.n	12838 <read_type_cb+0x38>
   128a2:	bf00      	nop
   128a4:	0001c611 	.word	0x0001c611

000128a8 <bt_att_connected>:
{
   128a8:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   128aa:	2104      	movs	r1, #4
{
   128ac:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   128ae:	6800      	ldr	r0, [r0, #0]
   128b0:	f009 fe75 	bl	1c59e <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   128b4:	4605      	mov	r5, r0
   128b6:	b950      	cbnz	r0, 128ce <bt_att_connected+0x26>
   128b8:	4919      	ldr	r1, [pc, #100]	; (12920 <bt_att_connected+0x78>)
   128ba:	481a      	ldr	r0, [pc, #104]	; (12924 <bt_att_connected+0x7c>)
   128bc:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   128c0:	f008 f8e4 	bl	1aa8c <printk>
   128c4:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   128c8:	4815      	ldr	r0, [pc, #84]	; (12920 <bt_att_connected+0x78>)
   128ca:	f008 fb85 	bl	1afd8 <assert_post_action>
	struct bt_att *att = att_chan->att;
   128ce:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   128d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   128d4:	b91b      	cbnz	r3, 128de <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   128d6:	f105 000c 	add.w	r0, r5, #12
   128da:	f00b fb80 	bl	1dfde <z_impl_k_queue_init>
	parent->next = child;
   128de:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   128e0:	f504 739a 	add.w	r3, r4, #308	; 0x134
   128e4:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   128e8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   128ea:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   128ec:	b902      	cbnz	r2, 128f0 <bt_att_connected+0x48>
	list->tail = node;
   128ee:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   128f0:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   128f4:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   128f8:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   128fa:	bf58      	it	pl
   128fc:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   128fe:	f04f 0230 	mov.w	r2, #48	; 0x30
   12902:	bf5c      	itt	pl
   12904:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   12908:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   1290c:	2100      	movs	r1, #0
   1290e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   12912:	f009 fb10 	bl	1bf36 <memset>
   12916:	4b04      	ldr	r3, [pc, #16]	; (12928 <bt_att_connected+0x80>)
   12918:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   1291c:	bd38      	pop	{r3, r4, r5, pc}
   1291e:	bf00      	nop
   12920:	00021c1c 	.word	0x00021c1c
   12924:	0001fb49 	.word	0x0001fb49
   12928:	00013235 	.word	0x00013235

0001292c <bt_att_chan_create_pdu>:
{
   1292c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1292e:	1c53      	adds	r3, r2, #1
   12930:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   12934:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12936:	4293      	cmp	r3, r2
   12938:	d906      	bls.n	12948 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1293a:	2157      	movs	r1, #87	; 0x57
   1293c:	4813      	ldr	r0, [pc, #76]	; (1298c <bt_att_chan_create_pdu+0x60>)
   1293e:	f008 f8a5 	bl	1aa8c <printk>
		return NULL;
   12942:	2400      	movs	r4, #0
}
   12944:	4620      	mov	r0, r4
   12946:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   12948:	4608      	mov	r0, r1
   1294a:	f009 fe73 	bl	1c634 <att_op_get_type>
   1294e:	2802      	cmp	r0, #2
   12950:	d001      	beq.n	12956 <bt_att_chan_create_pdu+0x2a>
   12952:	2804      	cmp	r0, #4
   12954:	d10e      	bne.n	12974 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   12956:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1295a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1295c:	2100      	movs	r1, #0
   1295e:	4608      	mov	r0, r1
   12960:	f009 fdea 	bl	1c538 <bt_l2cap_create_pdu_timeout>
   12964:	4604      	mov	r4, r0
	if (!buf) {
   12966:	b950      	cbnz	r0, 1297e <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12968:	462a      	mov	r2, r5
   1296a:	2145      	movs	r1, #69	; 0x45
   1296c:	4808      	ldr	r0, [pc, #32]	; (12990 <bt_att_chan_create_pdu+0x64>)
   1296e:	f008 f88d 	bl	1aa8c <printk>
		return NULL;
   12972:	e7e7      	b.n	12944 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   12974:	f04f 32ff 	mov.w	r2, #4294967295
   12978:	f04f 33ff 	mov.w	r3, #4294967295
   1297c:	e7ee      	b.n	1295c <bt_att_chan_create_pdu+0x30>
   1297e:	2101      	movs	r1, #1
   12980:	3008      	adds	r0, #8
   12982:	f003 f923 	bl	15bcc <net_buf_simple_add>
	hdr->code = op;
   12986:	7005      	strb	r5, [r0, #0]
	return buf;
   12988:	e7dc      	b.n	12944 <bt_att_chan_create_pdu+0x18>
   1298a:	bf00      	nop
   1298c:	00021c4b 	.word	0x00021c4b
   12990:	00021962 	.word	0x00021962

00012994 <att_indicate>:
{
   12994:	b570      	push	{r4, r5, r6, lr}
   12996:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   12998:	f101 0008 	add.w	r0, r1, #8
   1299c:	460d      	mov	r5, r1
   1299e:	f00a fdca 	bl	1d536 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   129a2:	6826      	ldr	r6, [r4, #0]
   129a4:	4601      	mov	r1, r0
   129a6:	89ab      	ldrh	r3, [r5, #12]
   129a8:	68aa      	ldr	r2, [r5, #8]
   129aa:	6830      	ldr	r0, [r6, #0]
   129ac:	f00a fd2b 	bl	1d406 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   129b0:	211e      	movs	r1, #30
   129b2:	2200      	movs	r2, #0
   129b4:	4620      	mov	r0, r4
   129b6:	f7ff ffb9 	bl	1292c <bt_att_chan_create_pdu>
	if (!buf) {
   129ba:	4601      	mov	r1, r0
   129bc:	b118      	cbz	r0, 129c6 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   129be:	4620      	mov	r0, r4
   129c0:	4a02      	ldr	r2, [pc, #8]	; (129cc <att_indicate+0x38>)
   129c2:	f009 ffb4 	bl	1c92e <bt_att_chan_send_rsp>
}
   129c6:	2000      	movs	r0, #0
   129c8:	bd70      	pop	{r4, r5, r6, pc}
   129ca:	bf00      	nop
   129cc:	0001ca13 	.word	0x0001ca13

000129d0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   129d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129d4:	4688      	mov	r8, r1
   129d6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   129d8:	2101      	movs	r1, #1
   129da:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   129dc:	4605      	mov	r5, r0
   129de:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   129e0:	f7ff ffa4 	bl	1292c <bt_att_chan_create_pdu>
	if (!buf) {
   129e4:	4604      	mov	r4, r0
   129e6:	b178      	cbz	r0, 12a08 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   129e8:	2104      	movs	r1, #4
   129ea:	3008      	adds	r0, #8
   129ec:	f003 f8ee 	bl	15bcc <net_buf_simple_add>
	rsp->request = req;
   129f0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   129f4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   129f6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   129fa:	4621      	mov	r1, r4
   129fc:	4628      	mov	r0, r5
}
   129fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12a02:	4a02      	ldr	r2, [pc, #8]	; (12a0c <send_err_rsp.part.0+0x3c>)
   12a04:	f009 bf93 	b.w	1c92e <bt_att_chan_send_rsp>
}
   12a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a0c:	0001c9ff 	.word	0x0001c9ff

00012a10 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   12a10:	898b      	ldrh	r3, [r1, #12]
{
   12a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a16:	4604      	mov	r4, r0
   12a18:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   12a1a:	b933      	cbnz	r3, 12a2a <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   12a1c:	2145      	movs	r1, #69	; 0x45
   12a1e:	4838      	ldr	r0, [pc, #224]	; (12b00 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   12a20:	f008 f834 	bl	1aa8c <printk>
}
   12a24:	2000      	movs	r0, #0
   12a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12a2a:	2101      	movs	r1, #1
   12a2c:	f108 0008 	add.w	r0, r8, #8
   12a30:	f003 f8ae 	bl	15b90 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12a34:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12a38:	4605      	mov	r5, r0
   12a3a:	2b00      	cmp	r3, #0
   12a3c:	d0f2      	beq.n	12a24 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12a3e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12a40:	7802      	ldrb	r2, [r0, #0]
   12a42:	4930      	ldr	r1, [pc, #192]	; (12b04 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12a44:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   12a48:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   12a4c:	4290      	cmp	r0, r2
   12a4e:	d114      	bne.n	12a7a <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   12a50:	00d8      	lsls	r0, r3, #3
   12a52:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12a56:	789f      	ldrb	r7, [r3, #2]
   12a58:	2f01      	cmp	r7, #1
   12a5a:	d123      	bne.n	12aa4 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12a5c:	34c0      	adds	r4, #192	; 0xc0
   12a5e:	e8d4 3fef 	ldaex	r3, [r4]
   12a62:	f043 0201 	orr.w	r2, r3, #1
   12a66:	e8c4 2fec 	stlex	ip, r2, [r4]
   12a6a:	f1bc 0f00 	cmp.w	ip, #0
   12a6e:	d1f6      	bne.n	12a5e <bt_att_recv+0x4e>
   12a70:	07da      	lsls	r2, r3, #31
   12a72:	d528      	bpl.n	12ac6 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   12a74:	2157      	movs	r1, #87	; 0x57
   12a76:	4824      	ldr	r0, [pc, #144]	; (12b08 <bt_att_recv+0xf8>)
   12a78:	e7d2      	b.n	12a20 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12a7a:	3301      	adds	r3, #1
   12a7c:	2b1c      	cmp	r3, #28
   12a7e:	d1e3      	bne.n	12a48 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12a80:	2157      	movs	r1, #87	; 0x57
   12a82:	4822      	ldr	r0, [pc, #136]	; (12b0c <bt_att_recv+0xfc>)
   12a84:	f008 f802 	bl	1aa8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12a88:	7829      	ldrb	r1, [r5, #0]
   12a8a:	4608      	mov	r0, r1
   12a8c:	f009 fdd2 	bl	1c634 <att_op_get_type>
   12a90:	2800      	cmp	r0, #0
   12a92:	d0c7      	beq.n	12a24 <bt_att_recv+0x14>
	if (!req) {
   12a94:	2900      	cmp	r1, #0
   12a96:	d0c5      	beq.n	12a24 <bt_att_recv+0x14>
   12a98:	2306      	movs	r3, #6
   12a9a:	2200      	movs	r2, #0
   12a9c:	4630      	mov	r0, r6
   12a9e:	f7ff ff97 	bl	129d0 <send_err_rsp.part.0>
   12aa2:	e7bf      	b.n	12a24 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12aa4:	2f05      	cmp	r7, #5
   12aa6:	d10e      	bne.n	12ac6 <bt_att_recv+0xb6>
   12aa8:	34c0      	adds	r4, #192	; 0xc0
   12aaa:	e8d4 3fef 	ldaex	r3, [r4]
   12aae:	f043 0202 	orr.w	r2, r3, #2
   12ab2:	e8c4 2fec 	stlex	ip, r2, [r4]
   12ab6:	f1bc 0f00 	cmp.w	ip, #0
   12aba:	d1f6      	bne.n	12aaa <bt_att_recv+0x9a>
   12abc:	079b      	lsls	r3, r3, #30
   12abe:	d502      	bpl.n	12ac6 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12ac0:	2157      	movs	r1, #87	; 0x57
   12ac2:	4813      	ldr	r0, [pc, #76]	; (12b10 <bt_att_recv+0x100>)
   12ac4:	e7ac      	b.n	12a20 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   12ac6:	180b      	adds	r3, r1, r0
   12ac8:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   12acc:	7859      	ldrb	r1, [r3, #1]
   12ace:	4291      	cmp	r1, r2
   12ad0:	d908      	bls.n	12ae4 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12ad2:	2145      	movs	r1, #69	; 0x45
   12ad4:	782b      	ldrb	r3, [r5, #0]
   12ad6:	480f      	ldr	r0, [pc, #60]	; (12b14 <bt_att_recv+0x104>)
   12ad8:	f007 ffd8 	bl	1aa8c <printk>
	if (handler->type == ATT_REQUEST && err) {
   12adc:	2f01      	cmp	r7, #1
   12ade:	d1a1      	bne.n	12a24 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   12ae0:	2304      	movs	r3, #4
   12ae2:	e008      	b.n	12af6 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   12ae4:	685b      	ldr	r3, [r3, #4]
   12ae6:	4641      	mov	r1, r8
   12ae8:	4630      	mov	r0, r6
   12aea:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12aec:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   12aee:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12af0:	d198      	bne.n	12a24 <bt_att_recv+0x14>
   12af2:	2800      	cmp	r0, #0
   12af4:	d096      	beq.n	12a24 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12af6:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   12af8:	2900      	cmp	r1, #0
   12afa:	d093      	beq.n	12a24 <bt_att_recv+0x14>
   12afc:	e7cd      	b.n	12a9a <bt_att_recv+0x8a>
   12afe:	bf00      	nop
   12b00:	00021c75 	.word	0x00021c75
   12b04:	0001ec9c 	.word	0x0001ec9c
   12b08:	00021c95 	.word	0x00021c95
   12b0c:	00021cfe 	.word	0x00021cfe
   12b10:	00021cb6 	.word	0x00021cb6
   12b14:	00021cda 	.word	0x00021cda

00012b18 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b1c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b1e:	6803      	ldr	r3, [r0, #0]
   12b20:	460e      	mov	r6, r1
   12b22:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b24:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b26:	bf18      	it	ne
   12b28:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b2a:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b2c:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b2e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b30:	f00a fc94 	bl	1d45c <bt_gatt_change_aware>
   12b34:	2800      	cmp	r0, #0
   12b36:	d04b      	beq.n	12bd0 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12b38:	2f00      	cmp	r7, #0
   12b3a:	d04b      	beq.n	12bd4 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12b3c:	2218      	movs	r2, #24
   12b3e:	2100      	movs	r1, #0
   12b40:	4668      	mov	r0, sp
   12b42:	f009 f9f8 	bl	1bf36 <memset>
	if (rsp) {
   12b46:	f1b8 0f00 	cmp.w	r8, #0
   12b4a:	d122      	bne.n	12b92 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12b4c:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   12b4e:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   12b52:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b54:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   12b56:	9300      	str	r3, [sp, #0]
	data.value = value;
   12b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b5a:	4638      	mov	r0, r7
	data.value = value;
   12b5c:	9303      	str	r3, [sp, #12]
	data.len = len;
   12b5e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b62:	4a1d      	ldr	r2, [pc, #116]	; (12bd8 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12b64:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b68:	2301      	movs	r3, #1
   12b6a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b6e:	466b      	mov	r3, sp
	data.req = req;
   12b70:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12b74:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b78:	f009 fda2 	bl	1c6c0 <bt_gatt_foreach_attr>
	if (data.err) {
   12b7c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12b80:	b1f4      	cbz	r4, 12bc0 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   12b82:	f1b8 0f00 	cmp.w	r8, #0
   12b86:	d10e      	bne.n	12ba6 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12b88:	2400      	movs	r4, #0
}
   12b8a:	4620      	mov	r0, r4
   12b8c:	b007      	add	sp, #28
   12b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12b92:	2200      	movs	r2, #0
   12b94:	4641      	mov	r1, r8
   12b96:	4628      	mov	r0, r5
   12b98:	f7ff fec8 	bl	1292c <bt_att_chan_create_pdu>
   12b9c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12b9e:	2800      	cmp	r0, #0
   12ba0:	d1d4      	bne.n	12b4c <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   12ba2:	240e      	movs	r4, #14
   12ba4:	e7f1      	b.n	12b8a <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12ba6:	9801      	ldr	r0, [sp, #4]
   12ba8:	f002 fefa 	bl	159a0 <net_buf_unref>
	if (!req) {
   12bac:	2e00      	cmp	r6, #0
   12bae:	d0eb      	beq.n	12b88 <att_write_rsp.constprop.0+0x70>
   12bb0:	463a      	mov	r2, r7
   12bb2:	4631      	mov	r1, r6
   12bb4:	4628      	mov	r0, r5
   12bb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12bba:	f7ff ff09 	bl	129d0 <send_err_rsp.part.0>
   12bbe:	e7e3      	b.n	12b88 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12bc0:	9901      	ldr	r1, [sp, #4]
   12bc2:	2900      	cmp	r1, #0
   12bc4:	d0e0      	beq.n	12b88 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12bc6:	4628      	mov	r0, r5
   12bc8:	4a04      	ldr	r2, [pc, #16]	; (12bdc <att_write_rsp.constprop.0+0xc4>)
   12bca:	f009 feb0 	bl	1c92e <bt_att_chan_send_rsp>
   12bce:	e7dc      	b.n	12b8a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12bd0:	2412      	movs	r4, #18
   12bd2:	e7da      	b.n	12b8a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12bd4:	2401      	movs	r4, #1
   12bd6:	e7d8      	b.n	12b8a <att_write_rsp.constprop.0+0x72>
   12bd8:	0001c78f 	.word	0x0001c78f
   12bdc:	0001c9ff 	.word	0x0001c9ff

00012be0 <bt_att_create_pdu>:
{
   12be0:	b570      	push	{r4, r5, r6, lr}
   12be2:	460e      	mov	r6, r1
   12be4:	4615      	mov	r5, r2
	att = att_get(conn);
   12be6:	f7ff fbbb 	bl	12360 <att_get>
	if (!att) {
   12bea:	b190      	cbz	r0, 12c12 <bt_att_create_pdu+0x32>
	return list->head;
   12bec:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12bee:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12bf0:	b15b      	cbz	r3, 12c0a <bt_att_create_pdu+0x2a>
   12bf2:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12bf6:	d008      	beq.n	12c0a <bt_att_create_pdu+0x2a>
	return node->next;
   12bf8:	681b      	ldr	r3, [r3, #0]
   12bfa:	b10b      	cbz	r3, 12c00 <bt_att_create_pdu+0x20>
   12bfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12c00:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   12c04:	428a      	cmp	r2, r1
   12c06:	d906      	bls.n	12c16 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c08:	b95b      	cbnz	r3, 12c22 <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12c0a:	2157      	movs	r1, #87	; 0x57
   12c0c:	480a      	ldr	r0, [pc, #40]	; (12c38 <bt_att_create_pdu+0x58>)
   12c0e:	f007 ff3d 	bl	1aa8c <printk>
}
   12c12:	2000      	movs	r0, #0
   12c14:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   12c16:	462a      	mov	r2, r5
   12c18:	4631      	mov	r1, r6
}
   12c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   12c1e:	f7ff be85 	b.w	1292c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c22:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   12c26:	d004      	beq.n	12c32 <bt_att_create_pdu+0x52>
	return node->next;
   12c28:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c2c:	b10c      	cbz	r4, 12c32 <bt_att_create_pdu+0x52>
   12c2e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   12c32:	4618      	mov	r0, r3
   12c34:	4623      	mov	r3, r4
   12c36:	e7e3      	b.n	12c00 <bt_att_create_pdu+0x20>
   12c38:	00021d1d 	.word	0x00021d1d

00012c3c <att_read_group_req>:
{
   12c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c40:	898c      	ldrh	r4, [r1, #12]
{
   12c42:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c44:	3c04      	subs	r4, #4
   12c46:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12c48:	2c02      	cmp	r4, #2
{
   12c4a:	4608      	mov	r0, r1
   12c4c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12c4e:	d001      	beq.n	12c54 <att_read_group_req+0x18>
   12c50:	2c10      	cmp	r4, #16
   12c52:	d16f      	bne.n	12d34 <att_read_group_req+0xf8>
   12c54:	2104      	movs	r1, #4
   12c56:	3008      	adds	r0, #8
   12c58:	f002 ff9a 	bl	15b90 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c5c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12c60:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12c62:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c64:	1d01      	adds	r1, r0, #4
   12c66:	4622      	mov	r2, r4
   12c68:	4640      	mov	r0, r8
   12c6a:	f009 f9dc 	bl	1c026 <bt_uuid_create>
   12c6e:	2800      	cmp	r0, #0
   12c70:	d062      	beq.n	12d38 <att_read_group_req+0xfc>
	if (!start || !end) {
   12c72:	2e00      	cmp	r6, #0
   12c74:	d03a      	beq.n	12cec <att_read_group_req+0xb0>
   12c76:	2400      	movs	r4, #0
   12c78:	2f00      	cmp	r7, #0
   12c7a:	d036      	beq.n	12cea <att_read_group_req+0xae>
	if (start > end) {
   12c7c:	42be      	cmp	r6, r7
   12c7e:	d835      	bhi.n	12cec <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12c80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12c84:	4640      	mov	r0, r8
   12c86:	a901      	add	r1, sp, #4
   12c88:	f88d 4004 	strb.w	r4, [sp, #4]
   12c8c:	f8ad 3006 	strh.w	r3, [sp, #6]
   12c90:	f009 f99b 	bl	1bfca <bt_uuid_cmp>
   12c94:	2800      	cmp	r0, #0
   12c96:	d134      	bne.n	12d02 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12c98:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12c9a:	2214      	movs	r2, #20
   12c9c:	2100      	movs	r1, #0
   12c9e:	a807      	add	r0, sp, #28
   12ca0:	f009 f949 	bl	1bf36 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12ca4:	2201      	movs	r2, #1
   12ca6:	2111      	movs	r1, #17
   12ca8:	4620      	mov	r0, r4
   12caa:	f7ff ff99 	bl	12be0 <bt_att_create_pdu>
   12cae:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12cb0:	2800      	cmp	r0, #0
   12cb2:	d041      	beq.n	12d38 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12cb4:	2101      	movs	r1, #1
   12cb6:	3008      	adds	r0, #8
	data.uuid = uuid;
   12cb8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12cbc:	f002 ff86 	bl	15bcc <net_buf_simple_add>
	data.rsp->len = 0U;
   12cc0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12cc4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12cc6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12cc8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12ccc:	4639      	mov	r1, r7
   12cce:	4630      	mov	r0, r6
   12cd0:	4a1a      	ldr	r2, [pc, #104]	; (12d3c <att_read_group_req+0x100>)
	data.group = NULL;
   12cd2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12cd6:	f009 fcf3 	bl	1c6c0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12cdc:	781c      	ldrb	r4, [r3, #0]
   12cde:	bb1c      	cbnz	r4, 12d28 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ce2:	f002 fe5d 	bl	159a0 <net_buf_unref>
	if (!req) {
   12ce6:	230a      	movs	r3, #10
   12ce8:	e018      	b.n	12d1c <att_read_group_req+0xe0>
			*err = 0U;
   12cea:	463e      	mov	r6, r7
	if (!req) {
   12cec:	2301      	movs	r3, #1
   12cee:	4632      	mov	r2, r6
   12cf0:	2110      	movs	r1, #16
   12cf2:	4628      	mov	r0, r5
   12cf4:	f7ff fe6c 	bl	129d0 <send_err_rsp.part.0>
		return 0;
   12cf8:	2400      	movs	r4, #0
}
   12cfa:	4620      	mov	r0, r4
   12cfc:	b00c      	add	sp, #48	; 0x30
   12cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12d02:	f642 0301 	movw	r3, #10241	; 0x2801
   12d06:	4640      	mov	r0, r8
   12d08:	a907      	add	r1, sp, #28
   12d0a:	f88d 401c 	strb.w	r4, [sp, #28]
   12d0e:	f8ad 301e 	strh.w	r3, [sp, #30]
   12d12:	f009 f95a 	bl	1bfca <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12d16:	2800      	cmp	r0, #0
   12d18:	d0be      	beq.n	12c98 <att_read_group_req+0x5c>
	if (!req) {
   12d1a:	2310      	movs	r3, #16
   12d1c:	4632      	mov	r2, r6
   12d1e:	2110      	movs	r1, #16
   12d20:	4628      	mov	r0, r5
   12d22:	f7ff fe55 	bl	129d0 <send_err_rsp.part.0>
		return 0;
   12d26:	e7e8      	b.n	12cfa <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d28:	4628      	mov	r0, r5
   12d2a:	4a05      	ldr	r2, [pc, #20]	; (12d40 <att_read_group_req+0x104>)
   12d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   12d2e:	f009 fdfe 	bl	1c92e <bt_att_chan_send_rsp>
	return 0;
   12d32:	e7e1      	b.n	12cf8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12d34:	2404      	movs	r4, #4
   12d36:	e7e0      	b.n	12cfa <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12d38:	240e      	movs	r4, #14
   12d3a:	e7de      	b.n	12cfa <att_read_group_req+0xbe>
   12d3c:	000125d9 	.word	0x000125d9
   12d40:	0001c9ff 	.word	0x0001c9ff

00012d44 <att_read_mult_req>:
{
   12d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12d48:	6886      	ldr	r6, [r0, #8]
{
   12d4a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12d4c:	2210      	movs	r2, #16
{
   12d4e:	4604      	mov	r4, r0
   12d50:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12d52:	4668      	mov	r0, sp
   12d54:	2100      	movs	r1, #0
   12d56:	f009 f8ee 	bl	1bf36 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12d5a:	2200      	movs	r2, #0
   12d5c:	210f      	movs	r1, #15
   12d5e:	4630      	mov	r0, r6
   12d60:	f7ff ff3e 	bl	12be0 <bt_att_create_pdu>
   12d64:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12d66:	b360      	cbz	r0, 12dc2 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12d68:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d6c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12dc8 <att_read_mult_req+0x84>
	data.chan = chan;
   12d70:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12d72:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12d76:	89ab      	ldrh	r3, [r5, #12]
   12d78:	2b01      	cmp	r3, #1
   12d7a:	d805      	bhi.n	12d88 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d7c:	4620      	mov	r0, r4
   12d7e:	4a13      	ldr	r2, [pc, #76]	; (12dcc <att_read_mult_req+0x88>)
   12d80:	9902      	ldr	r1, [sp, #8]
   12d82:	f009 fdd4 	bl	1c92e <bt_att_chan_send_rsp>
   12d86:	e018      	b.n	12dba <att_read_mult_req+0x76>
   12d88:	4638      	mov	r0, r7
   12d8a:	f00a fbd4 	bl	1d536 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d8e:	466b      	mov	r3, sp
   12d90:	464a      	mov	r2, r9
   12d92:	4601      	mov	r1, r0
   12d94:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12d96:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d9a:	f009 fc91 	bl	1c6c0 <bt_gatt_foreach_attr>
		if (data.err) {
   12d9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12da2:	2b00      	cmp	r3, #0
   12da4:	d0e7      	beq.n	12d76 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12da6:	9802      	ldr	r0, [sp, #8]
   12da8:	f002 fdfa 	bl	159a0 <net_buf_unref>
	if (!req) {
   12dac:	4632      	mov	r2, r6
   12dae:	210e      	movs	r1, #14
   12db0:	4620      	mov	r0, r4
   12db2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12db6:	f7ff fe0b 	bl	129d0 <send_err_rsp.part.0>
	return 0;
   12dba:	2000      	movs	r0, #0
}
   12dbc:	b005      	add	sp, #20
   12dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12dc2:	200e      	movs	r0, #14
   12dc4:	e7fa      	b.n	12dbc <att_read_mult_req+0x78>
   12dc6:	bf00      	nop
   12dc8:	0001ca27 	.word	0x0001ca27
   12dcc:	0001c9ff 	.word	0x0001c9ff

00012dd0 <att_read_rsp>:
{
   12dd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12dd4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12dd8:	4605      	mov	r5, r0
   12dda:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12ddc:	4640      	mov	r0, r8
   12dde:	2101      	movs	r1, #1
{
   12de0:	4614      	mov	r4, r2
   12de2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12de4:	f00a fb3a 	bl	1d45c <bt_gatt_change_aware>
   12de8:	b390      	cbz	r0, 12e50 <att_read_rsp+0x80>
	if (!handle) {
   12dea:	b39e      	cbz	r6, 12e54 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12dec:	2210      	movs	r2, #16
   12dee:	2100      	movs	r1, #0
   12df0:	4668      	mov	r0, sp
   12df2:	f009 f8a0 	bl	1bf36 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12df6:	2200      	movs	r2, #0
   12df8:	4621      	mov	r1, r4
   12dfa:	4640      	mov	r0, r8
   12dfc:	f7ff fef0 	bl	12be0 <bt_att_create_pdu>
   12e00:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12e02:	b348      	cbz	r0, 12e58 <att_read_rsp+0x88>
	data.offset = offset;
   12e04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e08:	4631      	mov	r1, r6
	data.offset = offset;
   12e0a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12e0e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e10:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12e12:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e16:	4a11      	ldr	r2, [pc, #68]	; (12e5c <att_read_rsp+0x8c>)
   12e18:	466b      	mov	r3, sp
	data.chan = chan;
   12e1a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e1c:	f009 fc50 	bl	1c6c0 <bt_gatt_foreach_attr>
	if (data.err) {
   12e20:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12e24:	b174      	cbz	r4, 12e44 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12e26:	9802      	ldr	r0, [sp, #8]
   12e28:	f002 fdba 	bl	159a0 <net_buf_unref>
	if (!req) {
   12e2c:	4632      	mov	r2, r6
   12e2e:	4639      	mov	r1, r7
   12e30:	4628      	mov	r0, r5
   12e32:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12e36:	f7ff fdcb 	bl	129d0 <send_err_rsp.part.0>
		return 0;
   12e3a:	2400      	movs	r4, #0
}
   12e3c:	4620      	mov	r0, r4
   12e3e:	b004      	add	sp, #16
   12e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12e44:	4628      	mov	r0, r5
   12e46:	4a06      	ldr	r2, [pc, #24]	; (12e60 <att_read_rsp+0x90>)
   12e48:	9902      	ldr	r1, [sp, #8]
   12e4a:	f009 fd70 	bl	1c92e <bt_att_chan_send_rsp>
	return 0;
   12e4e:	e7f5      	b.n	12e3c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12e50:	2412      	movs	r4, #18
   12e52:	e7f3      	b.n	12e3c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12e54:	2401      	movs	r4, #1
   12e56:	e7f1      	b.n	12e3c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12e58:	240e      	movs	r4, #14
   12e5a:	e7ef      	b.n	12e3c <att_read_rsp+0x6c>
   12e5c:	0001ca27 	.word	0x0001ca27
   12e60:	0001c9ff 	.word	0x0001c9ff

00012e64 <att_read_type_req>:
{
   12e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12e68:	898c      	ldrh	r4, [r1, #12]
{
   12e6a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12e6c:	3c04      	subs	r4, #4
   12e6e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12e70:	2c02      	cmp	r4, #2
{
   12e72:	4608      	mov	r0, r1
   12e74:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12e76:	d001      	beq.n	12e7c <att_read_type_req+0x18>
   12e78:	2c10      	cmp	r4, #16
   12e7a:	d150      	bne.n	12f1e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12e7c:	2104      	movs	r1, #4
   12e7e:	3008      	adds	r0, #8
   12e80:	f002 fe86 	bl	15b90 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12e84:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12e88:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12e8a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12e8c:	1d01      	adds	r1, r0, #4
   12e8e:	4622      	mov	r2, r4
   12e90:	4640      	mov	r0, r8
   12e92:	f009 f8c8 	bl	1c026 <bt_uuid_create>
   12e96:	b188      	cbz	r0, 12ebc <att_read_type_req+0x58>
	if (!start || !end) {
   12e98:	b19e      	cbz	r6, 12ec2 <att_read_type_req+0x5e>
   12e9a:	b18f      	cbz	r7, 12ec0 <att_read_type_req+0x5c>
	if (start > end) {
   12e9c:	42b7      	cmp	r7, r6
   12e9e:	d310      	bcc.n	12ec2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12ea0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12ea2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12ea4:	2100      	movs	r1, #0
   12ea6:	eb0d 0002 	add.w	r0, sp, r2
   12eaa:	f009 f844 	bl	1bf36 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12eae:	2201      	movs	r2, #1
   12eb0:	2109      	movs	r1, #9
   12eb2:	4620      	mov	r0, r4
   12eb4:	f7ff fe94 	bl	12be0 <bt_att_create_pdu>
   12eb8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12eba:	b968      	cbnz	r0, 12ed8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12ebc:	240e      	movs	r4, #14
   12ebe:	e007      	b.n	12ed0 <att_read_type_req+0x6c>
			*err = 0U;
   12ec0:	463e      	mov	r6, r7
	if (!req) {
   12ec2:	2301      	movs	r3, #1
   12ec4:	4632      	mov	r2, r6
   12ec6:	2108      	movs	r1, #8
   12ec8:	4628      	mov	r0, r5
   12eca:	f7ff fd81 	bl	129d0 <send_err_rsp.part.0>
		return 0;
   12ece:	2400      	movs	r4, #0
}
   12ed0:	4620      	mov	r0, r4
   12ed2:	b00c      	add	sp, #48	; 0x30
   12ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12ed8:	2101      	movs	r1, #1
   12eda:	3008      	adds	r0, #8
	data.uuid = uuid;
   12edc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12ee0:	f002 fe74 	bl	15bcc <net_buf_simple_add>
	data.rsp->len = 0U;
   12ee4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12ee8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12eea:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12eec:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12eee:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12ef2:	4a0c      	ldr	r2, [pc, #48]	; (12f24 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12ef4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12ef8:	4630      	mov	r0, r6
   12efa:	ab06      	add	r3, sp, #24
   12efc:	f009 fbe0 	bl	1c6c0 <bt_gatt_foreach_attr>
	if (data.err) {
   12f00:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12f04:	b12c      	cbz	r4, 12f12 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12f06:	9808      	ldr	r0, [sp, #32]
   12f08:	f002 fd4a 	bl	159a0 <net_buf_unref>
	if (!req) {
   12f0c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12f10:	e7d8      	b.n	12ec4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12f12:	4628      	mov	r0, r5
   12f14:	4a04      	ldr	r2, [pc, #16]	; (12f28 <att_read_type_req+0xc4>)
   12f16:	9908      	ldr	r1, [sp, #32]
   12f18:	f009 fd09 	bl	1c92e <bt_att_chan_send_rsp>
	return 0;
   12f1c:	e7d8      	b.n	12ed0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12f1e:	2404      	movs	r4, #4
   12f20:	e7d6      	b.n	12ed0 <att_read_type_req+0x6c>
   12f22:	bf00      	nop
   12f24:	00012801 	.word	0x00012801
   12f28:	0001c9ff 	.word	0x0001c9ff

00012f2c <att_find_type_req>:
{
   12f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f30:	4688      	mov	r8, r1
   12f32:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12f34:	2106      	movs	r1, #6
   12f36:	b086      	sub	sp, #24
   12f38:	f108 0008 	add.w	r0, r8, #8
   12f3c:	f002 fe28 	bl	15b90 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12f40:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12f42:	b317      	cbz	r7, 12f8a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12f44:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12f48:	f1b9 0f00 	cmp.w	r9, #0
   12f4c:	d01c      	beq.n	12f88 <att_find_type_req+0x5c>
	if (start > end) {
   12f4e:	454f      	cmp	r7, r9
   12f50:	d81b      	bhi.n	12f8a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12f52:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12f54:	2400      	movs	r4, #0
   12f56:	f8ad 3002 	strh.w	r3, [sp, #2]
   12f5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12f5e:	4668      	mov	r0, sp
   12f60:	a901      	add	r1, sp, #4
	value = buf->data;
   12f62:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12f66:	f88d 4000 	strb.w	r4, [sp]
   12f6a:	f88d 4004 	strb.w	r4, [sp, #4]
   12f6e:	f8ad 3006 	strh.w	r3, [sp, #6]
   12f72:	f009 f82a 	bl	1bfca <bt_uuid_cmp>
   12f76:	4606      	mov	r6, r0
   12f78:	b190      	cbz	r0, 12fa0 <att_find_type_req+0x74>
	if (!req) {
   12f7a:	230a      	movs	r3, #10
   12f7c:	463a      	mov	r2, r7
   12f7e:	2106      	movs	r1, #6
   12f80:	4628      	mov	r0, r5
   12f82:	f7ff fd25 	bl	129d0 <send_err_rsp.part.0>
		return 0;
   12f86:	e007      	b.n	12f98 <att_find_type_req+0x6c>
			*err = 0U;
   12f88:	464f      	mov	r7, r9
	if (!req) {
   12f8a:	2301      	movs	r3, #1
   12f8c:	463a      	mov	r2, r7
   12f8e:	2106      	movs	r1, #6
   12f90:	4628      	mov	r0, r5
   12f92:	f7ff fd1d 	bl	129d0 <send_err_rsp.part.0>
		return 0;
   12f96:	2400      	movs	r4, #0
}
   12f98:	4620      	mov	r0, r4
   12f9a:	b006      	add	sp, #24
   12f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12fa0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12fa4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12fa8:	4601      	mov	r1, r0
   12faa:	2214      	movs	r2, #20
   12fac:	a801      	add	r0, sp, #4
   12fae:	f008 ffc2 	bl	1bf36 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12fb2:	4632      	mov	r2, r6
   12fb4:	2107      	movs	r1, #7
   12fb6:	4640      	mov	r0, r8
   12fb8:	f7ff fe12 	bl	12be0 <bt_att_create_pdu>
   12fbc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12fbe:	b1e0      	cbz	r0, 12ffa <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12fc0:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12fc2:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12fc4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12fc8:	4638      	mov	r0, r7
   12fca:	4a0d      	ldr	r2, [pc, #52]	; (13000 <att_find_type_req+0xd4>)
   12fcc:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12fce:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12fd2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12fd6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12fd8:	f009 fb72 	bl	1c6c0 <bt_gatt_foreach_attr>
	if (data.err) {
   12fdc:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12fe0:	b12c      	cbz	r4, 12fee <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12fe2:	9802      	ldr	r0, [sp, #8]
   12fe4:	f002 fcdc 	bl	159a0 <net_buf_unref>
	if (!req) {
   12fe8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12fec:	e7ce      	b.n	12f8c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12fee:	4628      	mov	r0, r5
   12ff0:	4a04      	ldr	r2, [pc, #16]	; (13004 <att_find_type_req+0xd8>)
   12ff2:	9902      	ldr	r1, [sp, #8]
   12ff4:	f009 fc9b 	bl	1c92e <bt_att_chan_send_rsp>
	return 0;
   12ff8:	e7ce      	b.n	12f98 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12ffa:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12ffc:	e7cc      	b.n	12f98 <att_find_type_req+0x6c>
   12ffe:	bf00      	nop
   13000:	000123c9 	.word	0x000123c9
   13004:	0001c9ff 	.word	0x0001c9ff

00013008 <att_find_info_req>:
{
   13008:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1300a:	688b      	ldr	r3, [r1, #8]
{
   1300c:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1300e:	881e      	ldrh	r6, [r3, #0]
{
   13010:	b085      	sub	sp, #20
	if (!start || !end) {
   13012:	b19e      	cbz	r6, 1303c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   13014:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   13016:	b184      	cbz	r4, 1303a <att_find_info_req+0x32>
	if (start > end) {
   13018:	42b4      	cmp	r4, r6
   1301a:	d30f      	bcc.n	1303c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1301c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1301e:	2210      	movs	r2, #16
   13020:	2100      	movs	r1, #0
   13022:	4668      	mov	r0, sp
   13024:	f008 ff87 	bl	1bf36 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   13028:	2200      	movs	r2, #0
   1302a:	2105      	movs	r1, #5
   1302c:	4638      	mov	r0, r7
   1302e:	f7ff fdd7 	bl	12be0 <bt_att_create_pdu>
   13032:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   13034:	b958      	cbnz	r0, 1304e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   13036:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   13038:	e007      	b.n	1304a <att_find_info_req+0x42>
			*err = 0U;
   1303a:	4626      	mov	r6, r4
	if (!req) {
   1303c:	2301      	movs	r3, #1
   1303e:	4632      	mov	r2, r6
   13040:	2104      	movs	r1, #4
   13042:	4628      	mov	r0, r5
   13044:	f7ff fcc4 	bl	129d0 <send_err_rsp.part.0>
	return 0;
   13048:	2000      	movs	r0, #0
}
   1304a:	b005      	add	sp, #20
   1304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1304e:	4621      	mov	r1, r4
   13050:	466b      	mov	r3, sp
   13052:	4630      	mov	r0, r6
   13054:	4a08      	ldr	r2, [pc, #32]	; (13078 <att_find_info_req+0x70>)
	data.chan = chan;
   13056:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   13058:	f009 fb32 	bl	1c6c0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1305c:	9c02      	ldr	r4, [sp, #8]
   1305e:	b924      	cbnz	r4, 1306a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   13060:	9801      	ldr	r0, [sp, #4]
   13062:	f002 fc9d 	bl	159a0 <net_buf_unref>
	if (!req) {
   13066:	230a      	movs	r3, #10
   13068:	e7e9      	b.n	1303e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1306a:	4628      	mov	r0, r5
   1306c:	4a03      	ldr	r2, [pc, #12]	; (1307c <att_find_info_req+0x74>)
   1306e:	9901      	ldr	r1, [sp, #4]
   13070:	f009 fc5d 	bl	1c92e <bt_att_chan_send_rsp>
   13074:	e7e8      	b.n	13048 <att_find_info_req+0x40>
   13076:	bf00      	nop
   13078:	0001c6d7 	.word	0x0001c6d7
   1307c:	0001c9ff 	.word	0x0001c9ff

00013080 <att_mtu_req>:
{
   13080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   13082:	4603      	mov	r3, r0
   13084:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   13088:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1308a:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1308c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   13090:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   13094:	071b      	lsls	r3, r3, #28
   13096:	d41b      	bmi.n	130d0 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   13098:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1309a:	881b      	ldrh	r3, [r3, #0]
   1309c:	2b16      	cmp	r3, #22
   1309e:	d919      	bls.n	130d4 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   130a0:	2202      	movs	r2, #2
   130a2:	2103      	movs	r1, #3
   130a4:	f7ff fd9c 	bl	12be0 <bt_att_create_pdu>
	if (!pdu) {
   130a8:	4606      	mov	r6, r0
   130aa:	b1a8      	cbz	r0, 130d8 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   130ac:	2102      	movs	r1, #2
   130ae:	3008      	adds	r0, #8
   130b0:	f002 fd8c 	bl	15bcc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   130b4:	2717      	movs	r7, #23
   130b6:	7044      	strb	r4, [r0, #1]
   130b8:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   130ba:	4631      	mov	r1, r6
   130bc:	4628      	mov	r0, r5
   130be:	4a07      	ldr	r2, [pc, #28]	; (130dc <att_mtu_req+0x5c>)
   130c0:	f009 fc35 	bl	1c92e <bt_att_chan_send_rsp>
	return 0;
   130c4:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   130c6:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   130ca:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   130ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   130d0:	2006      	movs	r0, #6
   130d2:	e7fc      	b.n	130ce <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   130d4:	2004      	movs	r0, #4
   130d6:	e7fa      	b.n	130ce <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   130d8:	200e      	movs	r0, #14
   130da:	e7f8      	b.n	130ce <att_mtu_req+0x4e>
   130dc:	0001c9ff 	.word	0x0001c9ff

000130e0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   130e0:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   130e2:	2400      	movs	r4, #0
{
   130e4:	4602      	mov	r2, r0
   130e6:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   130e8:	4807      	ldr	r0, [pc, #28]	; (13108 <bt_att_req_alloc+0x28>)
   130ea:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   130ec:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   130ee:	f004 ff99 	bl	18024 <k_mem_slab_alloc>
   130f2:	4601      	mov	r1, r0
   130f4:	b930      	cbnz	r0, 13104 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   130f6:	2218      	movs	r2, #24
   130f8:	9801      	ldr	r0, [sp, #4]
   130fa:	f008 ff1c 	bl	1bf36 <memset>

	return req;
   130fe:	9801      	ldr	r0, [sp, #4]
}
   13100:	b002      	add	sp, #8
   13102:	bd10      	pop	{r4, pc}
		return NULL;
   13104:	4620      	mov	r0, r4
   13106:	e7fb      	b.n	13100 <bt_att_req_alloc+0x20>
   13108:	200084f4 	.word	0x200084f4

0001310c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1310c:	b507      	push	{r0, r1, r2, lr}
   1310e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   13110:	a901      	add	r1, sp, #4
   13112:	4803      	ldr	r0, [pc, #12]	; (13120 <bt_att_req_free+0x14>)
   13114:	f004 ffe0 	bl	180d8 <k_mem_slab_free>
}
   13118:	b003      	add	sp, #12
   1311a:	f85d fb04 	ldr.w	pc, [sp], #4
   1311e:	bf00      	nop
   13120:	200084f4 	.word	0x200084f4

00013124 <att_handle_rsp>:
{
   13124:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13128:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   1312a:	30f0      	adds	r0, #240	; 0xf0
{
   1312c:	460f      	mov	r7, r1
   1312e:	4690      	mov	r8, r2
   13130:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   13132:	f006 fda5 	bl	19c80 <k_delayed_work_cancel>
	if (!chan->req) {
   13136:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   1313a:	f04f 0a00 	mov.w	sl, #0
   1313e:	b99d      	cbnz	r5, 13168 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   13140:	2157      	movs	r1, #87	; 0x57
   13142:	4818      	ldr	r0, [pc, #96]	; (131a4 <att_handle_rsp+0x80>)
   13144:	f007 fca2 	bl	1aa8c <printk>
	att_req_send_process(chan->att);
   13148:	6820      	ldr	r0, [r4, #0]
   1314a:	f009 fcd4 	bl	1caf6 <att_req_send_process>
	if (func) {
   1314e:	b13d      	cbz	r5, 13160 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   13150:	6820      	ldr	r0, [r4, #0]
   13152:	f8cd 9000 	str.w	r9, [sp]
   13156:	4643      	mov	r3, r8
   13158:	463a      	mov	r2, r7
   1315a:	4631      	mov	r1, r6
   1315c:	6800      	ldr	r0, [r0, #0]
   1315e:	47a8      	blx	r5
}
   13160:	2000      	movs	r0, #0
   13162:	b002      	add	sp, #8
   13164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   13168:	4b0f      	ldr	r3, [pc, #60]	; (131a8 <att_handle_rsp+0x84>)
   1316a:	429d      	cmp	r5, r3
   1316c:	d103      	bne.n	13176 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   1316e:	4655      	mov	r5, sl
		chan->req = NULL;
   13170:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   13174:	e7e8      	b.n	13148 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   13176:	6928      	ldr	r0, [r5, #16]
   13178:	b128      	cbz	r0, 13186 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   1317a:	f002 fc11 	bl	159a0 <net_buf_unref>
		chan->req->buf = NULL;
   1317e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   13182:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   13186:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   1318a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1318e:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   13190:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   13194:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   13198:	f009 fd5b 	bl	1cc52 <att_req_destroy>
	chan->req = NULL;
   1319c:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   131a0:	e7d2      	b.n	13148 <att_handle_rsp+0x24>
   131a2:	bf00      	nop
   131a4:	00021d3d 	.word	0x00021d3d
   131a8:	20009f44 	.word	0x20009f44

000131ac <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   131ac:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   131b0:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   131b2:	b18b      	cbz	r3, 131d8 <att_error_rsp+0x2c>
   131b4:	4a09      	ldr	r2, [pc, #36]	; (131dc <att_error_rsp+0x30>)
   131b6:	4293      	cmp	r3, r2
   131b8:	d00e      	beq.n	131d8 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   131ba:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   131bc:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   131be:	b12a      	cbz	r2, 131cc <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   131c0:	899d      	ldrh	r5, [r3, #12]
   131c2:	89dc      	ldrh	r4, [r3, #14]
   131c4:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   131c6:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   131c8:	442b      	add	r3, r5
   131ca:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   131cc:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   131ce:	2200      	movs	r2, #0
}
   131d0:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   131d2:	4611      	mov	r1, r2
   131d4:	f7ff bfa6 	b.w	13124 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   131d8:	230e      	movs	r3, #14
   131da:	e7f8      	b.n	131ce <att_error_rsp+0x22>
   131dc:	20009f44 	.word	0x20009f44

000131e0 <att_reset>:
{
   131e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   131e2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   131e4:	9803      	ldr	r0, [sp, #12]
   131e6:	2200      	movs	r2, #0
   131e8:	2300      	movs	r3, #0
   131ea:	300c      	adds	r0, #12
   131ec:	f002 fb56 	bl	1589c <net_buf_get>
   131f0:	b948      	cbnz	r0, 13206 <att_reset+0x26>
	att->conn = NULL;
   131f2:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   131f4:	6854      	ldr	r4, [r2, #4]
   131f6:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   131f8:	b944      	cbnz	r4, 1320c <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   131fa:	480d      	ldr	r0, [pc, #52]	; (13230 <att_reset+0x50>)
   131fc:	a903      	add	r1, sp, #12
   131fe:	f004 ff6b 	bl	180d8 <k_mem_slab_free>
}
   13202:	b004      	add	sp, #16
   13204:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   13206:	f002 fbcb 	bl	159a0 <net_buf_unref>
   1320a:	e7eb      	b.n	131e4 <att_reset+0x4>
	return node->next;
   1320c:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   1320e:	6866      	ldr	r6, [r4, #4]
   13210:	b136      	cbz	r6, 13220 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   13212:	6963      	ldr	r3, [r4, #20]
   13214:	210e      	movs	r1, #14
   13216:	9300      	str	r3, [sp, #0]
   13218:	2300      	movs	r3, #0
   1321a:	461a      	mov	r2, r3
   1321c:	4618      	mov	r0, r3
   1321e:	47b0      	blx	r6
		att_req_destroy(req);
   13220:	4620      	mov	r0, r4
   13222:	f009 fd16 	bl	1cc52 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13226:	2d00      	cmp	r5, #0
   13228:	d0e7      	beq.n	131fa <att_reset+0x1a>
   1322a:	462c      	mov	r4, r5
   1322c:	682d      	ldr	r5, [r5, #0]
   1322e:	e7ee      	b.n	1320e <att_reset+0x2e>
   13230:	200084bc 	.word	0x200084bc

00013234 <att_timeout>:
{
   13234:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   13236:	4605      	mov	r5, r0
   13238:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   1323c:	2145      	movs	r1, #69	; 0x45
{
   1323e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   13240:	4808      	ldr	r0, [pc, #32]	; (13264 <att_timeout+0x30>)
   13242:	f007 fc23 	bl	1aa8c <printk>
	att_chan_detach(chan);
   13246:	4628      	mov	r0, r5
   13248:	f009 fd40 	bl	1cccc <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1324c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1324e:	b945      	cbnz	r5, 13262 <att_timeout+0x2e>
	att_reset(att);
   13250:	4630      	mov	r0, r6
   13252:	f7ff ffc5 	bl	131e0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   13256:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   1325a:	f002 f94d 	bl	154f8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1325e:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   13262:	bd70      	pop	{r4, r5, r6, pc}
   13264:	00021d59 	.word	0x00021d59

00013268 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1326c:	460c      	mov	r4, r1
   1326e:	4617      	mov	r7, r2
   13270:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   13272:	4605      	mov	r5, r0
   13274:	b950      	cbnz	r0, 1328c <bt_att_send+0x24>
   13276:	492e      	ldr	r1, [pc, #184]	; (13330 <bt_att_send+0xc8>)
   13278:	482e      	ldr	r0, [pc, #184]	; (13334 <bt_att_send+0xcc>)
   1327a:	f640 32ce 	movw	r2, #3022	; 0xbce
   1327e:	f007 fc05 	bl	1aa8c <printk>
   13282:	f640 31ce 	movw	r1, #3022	; 0xbce
   13286:	482a      	ldr	r0, [pc, #168]	; (13330 <bt_att_send+0xc8>)
   13288:	f007 fea6 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1328c:	b954      	cbnz	r4, 132a4 <bt_att_send+0x3c>
   1328e:	4928      	ldr	r1, [pc, #160]	; (13330 <bt_att_send+0xc8>)
   13290:	4828      	ldr	r0, [pc, #160]	; (13334 <bt_att_send+0xcc>)
   13292:	f640 32cf 	movw	r2, #3023	; 0xbcf
   13296:	f007 fbf9 	bl	1aa8c <printk>
   1329a:	f640 31cf 	movw	r1, #3023	; 0xbcf
   1329e:	4824      	ldr	r0, [pc, #144]	; (13330 <bt_att_send+0xc8>)
   132a0:	f007 fe9a 	bl	1afd8 <assert_post_action>

	att = att_get(conn);
   132a4:	4628      	mov	r0, r5
   132a6:	f7ff f85b 	bl	12360 <att_get>
	if (!att) {
   132aa:	4606      	mov	r6, r0
   132ac:	b938      	cbnz	r0, 132be <bt_att_send+0x56>
		net_buf_unref(buf);
   132ae:	4620      	mov	r0, r4
   132b0:	f002 fb76 	bl	159a0 <net_buf_unref>
		return -ENOTCONN;
   132b4:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   132b8:	b002      	add	sp, #8
   132ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   132be:	b147      	cbz	r7, 132d2 <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   132c0:	463b      	mov	r3, r7
   132c2:	4622      	mov	r2, r4
   132c4:	2104      	movs	r1, #4
   132c6:	4628      	mov	r0, r5
   132c8:	f8cd 8000 	str.w	r8, [sp]
   132cc:	f009 f937 	bl	1c53e <bt_l2cap_send_cb>
   132d0:	e7f2      	b.n	132b8 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   132d2:	f100 070c 	add.w	r7, r0, #12
   132d6:	4621      	mov	r1, r4
   132d8:	4638      	mov	r0, r7
   132da:	f002 fb33 	bl	15944 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   132de:	2200      	movs	r2, #0
   132e0:	2300      	movs	r3, #0
   132e2:	4638      	mov	r0, r7
   132e4:	f002 fada 	bl	1589c <net_buf_get>
	if (!buf) {
   132e8:	4605      	mov	r5, r0
   132ea:	b908      	cbnz	r0, 132f0 <bt_att_send+0x88>
	return 0;
   132ec:	2000      	movs	r0, #0
   132ee:	e7e3      	b.n	132b8 <bt_att_send+0x50>
	return list->head;
   132f0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   132f2:	b1c3      	cbz	r3, 13326 <bt_att_send+0xbe>
   132f4:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   132f8:	d015      	beq.n	13326 <bt_att_send+0xbe>
	return node->next;
   132fa:	681c      	ldr	r4, [r3, #0]
   132fc:	b10c      	cbz	r4, 13302 <bt_att_send+0x9a>
   132fe:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   13302:	2200      	movs	r2, #0
   13304:	4629      	mov	r1, r5
   13306:	f009 fafb 	bl	1c900 <bt_att_chan_send>
		if (err >= 0) {
   1330a:	2800      	cmp	r0, #0
   1330c:	daee      	bge.n	132ec <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1330e:	b154      	cbz	r4, 13326 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13310:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   13314:	d004      	beq.n	13320 <bt_att_send+0xb8>
	return node->next;
   13316:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1331a:	b10b      	cbz	r3, 13320 <bt_att_send+0xb8>
   1331c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   13320:	4620      	mov	r0, r4
   13322:	461c      	mov	r4, r3
   13324:	e7ed      	b.n	13302 <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   13326:	4629      	mov	r1, r5
   13328:	4638      	mov	r0, r7
   1332a:	f00a fe70 	bl	1e00e <k_queue_prepend>
   1332e:	e7dd      	b.n	132ec <bt_att_send+0x84>
   13330:	00021c1c 	.word	0x00021c1c
   13334:	0001fb49 	.word	0x0001fb49

00013338 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   13338:	b538      	push	{r3, r4, r5, lr}
   1333a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1333c:	4605      	mov	r5, r0
   1333e:	b950      	cbnz	r0, 13356 <bt_att_req_send+0x1e>
   13340:	4918      	ldr	r1, [pc, #96]	; (133a4 <bt_att_req_send+0x6c>)
   13342:	4819      	ldr	r0, [pc, #100]	; (133a8 <bt_att_req_send+0x70>)
   13344:	f640 32eb 	movw	r2, #3051	; 0xbeb
   13348:	f007 fba0 	bl	1aa8c <printk>
   1334c:	f640 31eb 	movw	r1, #3051	; 0xbeb
   13350:	4814      	ldr	r0, [pc, #80]	; (133a4 <bt_att_req_send+0x6c>)
   13352:	f007 fe41 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(req);
   13356:	b954      	cbnz	r4, 1336e <bt_att_req_send+0x36>
   13358:	4912      	ldr	r1, [pc, #72]	; (133a4 <bt_att_req_send+0x6c>)
   1335a:	4813      	ldr	r0, [pc, #76]	; (133a8 <bt_att_req_send+0x70>)
   1335c:	f640 32ec 	movw	r2, #3052	; 0xbec
   13360:	f007 fb94 	bl	1aa8c <printk>
   13364:	f640 31ec 	movw	r1, #3052	; 0xbec
   13368:	480e      	ldr	r0, [pc, #56]	; (133a4 <bt_att_req_send+0x6c>)
   1336a:	f007 fe35 	bl	1afd8 <assert_post_action>

	att = att_get(conn);
   1336e:	4628      	mov	r0, r5
   13370:	f7fe fff6 	bl	12360 <att_get>
	if (!att) {
   13374:	4605      	mov	r5, r0
   13376:	b930      	cbnz	r0, 13386 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   13378:	6920      	ldr	r0, [r4, #16]
   1337a:	f002 fb11 	bl	159a0 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1337e:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   13382:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   13384:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   13386:	2300      	movs	r3, #0
   13388:	6023      	str	r3, [r4, #0]
	return list->tail;
   1338a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1338c:	b933      	cbnz	r3, 1339c <bt_att_req_send+0x64>
	list->head = node;
   1338e:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   13392:	4628      	mov	r0, r5
   13394:	f009 fbaf 	bl	1caf6 <att_req_send_process>
	return 0;
   13398:	2000      	movs	r0, #0
   1339a:	e7f3      	b.n	13384 <bt_att_req_send+0x4c>
	parent->next = child;
   1339c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1339e:	6084      	str	r4, [r0, #8]
}
   133a0:	e7f7      	b.n	13392 <bt_att_req_send+0x5a>
   133a2:	bf00      	nop
   133a4:	00021c1c 	.word	0x00021c1c
   133a8:	0001fb49 	.word	0x0001fb49

000133ac <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   133ac:	b510      	push	{r4, lr}
   133ae:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   133b0:	b350      	cbz	r0, 13408 <bt_att_req_cancel+0x5c>
   133b2:	b349      	cbz	r1, 13408 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   133b4:	f7fe ffd4 	bl	12360 <att_get>
	if (!att) {
   133b8:	b330      	cbz	r0, 13408 <bt_att_req_cancel+0x5c>
	return list->head;
   133ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   133bc:	b15b      	cbz	r3, 133d6 <bt_att_req_cancel+0x2a>
   133be:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   133c2:	d008      	beq.n	133d6 <bt_att_req_cancel+0x2a>
	return node->next;
   133c4:	681b      	ldr	r3, [r3, #0]
   133c6:	b10b      	cbz	r3, 133cc <bt_att_req_cancel+0x20>
   133c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   133cc:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   133d0:	4294      	cmp	r4, r2
   133d2:	d006      	beq.n	133e2 <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   133d4:	b96b      	cbnz	r3, 133f2 <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   133d6:	3004      	adds	r0, #4
   133d8:	4621      	mov	r1, r4
   133da:	f009 fad0 	bl	1c97e <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   133de:	4620      	mov	r0, r4
   133e0:	e003      	b.n	133ea <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   133e2:	4620      	mov	r0, r4
	chan->req = &cancel;
   133e4:	4b09      	ldr	r3, [pc, #36]	; (1340c <bt_att_req_cancel+0x60>)
   133e6:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   133ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   133ee:	f009 bc30 	b.w	1cc52 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   133f2:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   133f6:	d004      	beq.n	13402 <bt_att_req_cancel+0x56>
	return node->next;
   133f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   133fc:	b10a      	cbz	r2, 13402 <bt_att_req_cancel+0x56>
   133fe:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   13402:	4619      	mov	r1, r3
   13404:	4613      	mov	r3, r2
   13406:	e7e1      	b.n	133cc <bt_att_req_cancel+0x20>
}
   13408:	bd10      	pop	{r4, pc}
   1340a:	bf00      	nop
   1340c:	20009f44 	.word	0x20009f44

00013410 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   13410:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13412:	4618      	mov	r0, r3
{
   13414:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13416:	4907      	ldr	r1, [pc, #28]	; (13434 <db_hash_set+0x24>)
   13418:	2210      	movs	r2, #16
   1341a:	47a0      	blx	r4
	if (len < 0) {
   1341c:	1e04      	subs	r4, r0, #0
   1341e:	da06      	bge.n	1342e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   13420:	4622      	mov	r2, r4
   13422:	2145      	movs	r1, #69	; 0x45
   13424:	4804      	ldr	r0, [pc, #16]	; (13438 <db_hash_set+0x28>)
   13426:	f007 fb31 	bl	1aa8c <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   1342a:	4620      	mov	r0, r4
   1342c:	bd10      	pop	{r4, pc}
	return 0;
   1342e:	2400      	movs	r4, #0
   13430:	e7fb      	b.n	1342a <db_hash_set+0x1a>
   13432:	bf00      	nop
   13434:	2000ea4c 	.word	0x2000ea4c
   13438:	00021d71 	.word	0x00021d71

0001343c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1343c:	2210      	movs	r2, #16
{
   1343e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13440:	4906      	ldr	r1, [pc, #24]	; (1345c <db_hash_store+0x20>)
   13442:	4807      	ldr	r0, [pc, #28]	; (13460 <db_hash_store+0x24>)
   13444:	f7f8 fc88 	bl	bd58 <settings_save_one>
	if (err) {
   13448:	4602      	mov	r2, r0
   1344a:	b128      	cbz	r0, 13458 <db_hash_store+0x1c>
}
   1344c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   13450:	2145      	movs	r1, #69	; 0x45
   13452:	4804      	ldr	r0, [pc, #16]	; (13464 <db_hash_store+0x28>)
   13454:	f007 bb1a 	b.w	1aa8c <printk>
}
   13458:	bd08      	pop	{r3, pc}
   1345a:	bf00      	nop
   1345c:	2000ea3c 	.word	0x2000ea3c
   13460:	00021d97 	.word	0x00021d97
   13464:	00021d9f 	.word	0x00021d9f

00013468 <find_cf_cfg>:
{
   13468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1346a:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1346c:	2600      	movs	r6, #0
   1346e:	4d0e      	ldr	r5, [pc, #56]	; (134a8 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   13470:	462f      	mov	r7, r5
		if (!conn) {
   13472:	1c6a      	adds	r2, r5, #1
   13474:	b954      	cbnz	r4, 1348c <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13476:	4669      	mov	r1, sp
   13478:	4610      	mov	r0, r2
   1347a:	9400      	str	r4, [sp, #0]
   1347c:	f8cd 4003 	str.w	r4, [sp, #3]
   13480:	f009 fcea 	bl	1ce58 <bt_addr_le_cmp>
   13484:	b940      	cbnz	r0, 13498 <find_cf_cfg+0x30>
}
   13486:	4638      	mov	r0, r7
   13488:	b003      	add	sp, #12
   1348a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1348c:	4620      	mov	r0, r4
   1348e:	7829      	ldrb	r1, [r5, #0]
   13490:	f008 ff81 	bl	1c396 <bt_conn_is_peer_addr_le>
   13494:	2800      	cmp	r0, #0
   13496:	d1f6      	bne.n	13486 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13498:	3601      	adds	r6, #1
   1349a:	2e05      	cmp	r6, #5
   1349c:	f105 0510 	add.w	r5, r5, #16
   134a0:	d1e6      	bne.n	13470 <find_cf_cfg+0x8>
	return NULL;
   134a2:	2700      	movs	r7, #0
   134a4:	e7ef      	b.n	13486 <find_cf_cfg+0x1e>
   134a6:	bf00      	nop
   134a8:	20009f5c 	.word	0x20009f5c

000134ac <find_sc_cfg>:
{
   134ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134ae:	4606      	mov	r6, r0
   134b0:	460f      	mov	r7, r1
   134b2:	2400      	movs	r4, #0
   134b4:	4d09      	ldr	r5, [pc, #36]	; (134dc <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   134b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   134ba:	42b3      	cmp	r3, r6
   134bc:	d107      	bne.n	134ce <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   134be:	4639      	mov	r1, r7
   134c0:	4628      	mov	r0, r5
   134c2:	f009 fcc9 	bl	1ce58 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   134c6:	b910      	cbnz	r0, 134ce <find_sc_cfg+0x22>
			return &sc_cfg[i];
   134c8:	4805      	ldr	r0, [pc, #20]	; (134e0 <find_sc_cfg+0x34>)
   134ca:	4420      	add	r0, r4
}
   134cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   134ce:	340c      	adds	r4, #12
   134d0:	2c3c      	cmp	r4, #60	; 0x3c
   134d2:	f105 050c 	add.w	r5, r5, #12
   134d6:	d1ee      	bne.n	134b6 <find_sc_cfg+0xa>
	return NULL;
   134d8:	2000      	movs	r0, #0
   134da:	e7f7      	b.n	134cc <find_sc_cfg+0x20>
   134dc:	2000e2db 	.word	0x2000e2db
   134e0:	2000e2da 	.word	0x2000e2da

000134e4 <gatt_sub_find>:
{
   134e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134e6:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   134e8:	2600      	movs	r6, #0
   134ea:	4d0e      	ldr	r5, [pc, #56]	; (13524 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   134ec:	462f      	mov	r7, r5
		if (!conn) {
   134ee:	1c6a      	adds	r2, r5, #1
   134f0:	b954      	cbnz	r4, 13508 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   134f2:	4669      	mov	r1, sp
   134f4:	4610      	mov	r0, r2
   134f6:	9400      	str	r4, [sp, #0]
   134f8:	f8cd 4003 	str.w	r4, [sp, #3]
   134fc:	f009 fcac 	bl	1ce58 <bt_addr_le_cmp>
   13500:	b940      	cbnz	r0, 13514 <gatt_sub_find+0x30>
}
   13502:	4638      	mov	r0, r7
   13504:	b003      	add	sp, #12
   13506:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   13508:	4620      	mov	r0, r4
   1350a:	7829      	ldrb	r1, [r5, #0]
   1350c:	f008 ff43 	bl	1c396 <bt_conn_is_peer_addr_le>
   13510:	2800      	cmp	r0, #0
   13512:	d1f6      	bne.n	13502 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13514:	3601      	adds	r6, #1
   13516:	2e05      	cmp	r6, #5
   13518:	f105 0510 	add.w	r5, r5, #16
   1351c:	d1e6      	bne.n	134ec <gatt_sub_find+0x8>
	return NULL;
   1351e:	2700      	movs	r7, #0
   13520:	e7ef      	b.n	13502 <gatt_sub_find+0x1e>
   13522:	bf00      	nop
   13524:	2000a02c 	.word	0x2000a02c

00013528 <find_cf_cfg_by_addr>:
{
   13528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1352a:	4606      	mov	r6, r0
   1352c:	460f      	mov	r7, r1
   1352e:	2400      	movs	r4, #0
   13530:	4d09      	ldr	r5, [pc, #36]	; (13558 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   13532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13536:	42b3      	cmp	r3, r6
   13538:	d107      	bne.n	1354a <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1353a:	4629      	mov	r1, r5
   1353c:	4638      	mov	r0, r7
   1353e:	f009 fc8b 	bl	1ce58 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   13542:	b910      	cbnz	r0, 1354a <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   13544:	4805      	ldr	r0, [pc, #20]	; (1355c <find_cf_cfg_by_addr+0x34>)
   13546:	4420      	add	r0, r4
}
   13548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1354a:	3410      	adds	r4, #16
   1354c:	2c50      	cmp	r4, #80	; 0x50
   1354e:	f105 0510 	add.w	r5, r5, #16
   13552:	d1ee      	bne.n	13532 <find_cf_cfg_by_addr+0xa>
	return NULL;
   13554:	2000      	movs	r0, #0
   13556:	e7f7      	b.n	13548 <find_cf_cfg_by_addr+0x20>
   13558:	20009f5d 	.word	0x20009f5d
   1355c:	20009f5c 	.word	0x20009f5c

00013560 <bt_gatt_attr_write_ccc>:
{
   13560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13564:	461f      	mov	r7, r3
   13566:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1356a:	4604      	mov	r4, r0
   1356c:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1356e:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   13572:	2b00      	cmp	r3, #0
   13574:	d141      	bne.n	135fa <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   13576:	1e7b      	subs	r3, r7, #1
   13578:	2b01      	cmp	r3, #1
   1357a:	d841      	bhi.n	13600 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1357c:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1357e:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   13580:	4649      	mov	r1, r9
   13582:	bf14      	ite	ne
   13584:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   13586:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   13588:	f009 fc69 	bl	1ce5e <find_ccc_cfg>
	if (!cfg) {
   1358c:	4605      	mov	r5, r0
   1358e:	b9b0      	cbnz	r0, 135be <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   13590:	b916      	cbnz	r6, 13598 <bt_gatt_attr_write_ccc+0x38>
			return len;
   13592:	4638      	mov	r0, r7
}
   13594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   13598:	4649      	mov	r1, r9
   1359a:	f009 fc60 	bl	1ce5e <find_ccc_cfg>
		if (!cfg) {
   1359e:	4605      	mov	r5, r0
   135a0:	b930      	cbnz	r0, 135b0 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   135a2:	4819      	ldr	r0, [pc, #100]	; (13608 <bt_gatt_attr_write_ccc+0xa8>)
   135a4:	2157      	movs	r1, #87	; 0x57
   135a6:	f007 fa71 	bl	1aa8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   135aa:	f06f 0010 	mvn.w	r0, #16
   135ae:	e7f1      	b.n	13594 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   135b0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   135b4:	3001      	adds	r0, #1
   135b6:	f009 fc8b 	bl	1ced0 <bt_addr_le_copy>
		cfg->id = conn->id;
   135ba:	7a23      	ldrb	r3, [r4, #8]
   135bc:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   135be:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   135c2:	b973      	cbnz	r3, 135e2 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   135c4:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
	cfg->value = value;
   135c8:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   135ca:	42b3      	cmp	r3, r6
   135cc:	d003      	beq.n	135d6 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   135ce:	4649      	mov	r1, r9
   135d0:	4640      	mov	r0, r8
   135d2:	f009 fbb9 	bl	1cd48 <gatt_ccc_changed>
	if (!value) {
   135d6:	2e00      	cmp	r6, #0
   135d8:	d1db      	bne.n	13592 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   135da:	4628      	mov	r0, r5
   135dc:	f009 fc7b 	bl	1ced6 <clear_ccc_cfg>
   135e0:	e7d7      	b.n	13592 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   135e2:	4632      	mov	r2, r6
   135e4:	4641      	mov	r1, r8
   135e6:	4620      	mov	r0, r4
   135e8:	4798      	blx	r3
		if (write < 0) {
   135ea:	2800      	cmp	r0, #0
   135ec:	dbd2      	blt.n	13594 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   135ee:	1e44      	subs	r4, r0, #1
   135f0:	2c01      	cmp	r4, #1
   135f2:	d9e7      	bls.n	135c4 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   135f4:	f06f 000d 	mvn.w	r0, #13
   135f8:	e7cc      	b.n	13594 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   135fa:	f06f 0006 	mvn.w	r0, #6
   135fe:	e7c9      	b.n	13594 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13600:	f06f 000c 	mvn.w	r0, #12
   13604:	e7c6      	b.n	13594 <bt_gatt_attr_write_ccc+0x34>
   13606:	bf00      	nop
   13608:	00021dca 	.word	0x00021dca

0001360c <cf_write>:
{
   1360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13610:	461f      	mov	r7, r3
   13612:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13616:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   13618:	2b01      	cmp	r3, #1
{
   1361a:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1361c:	d845      	bhi.n	136aa <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   1361e:	443b      	add	r3, r7
   13620:	2b01      	cmp	r3, #1
   13622:	463d      	mov	r5, r7
   13624:	dc44      	bgt.n	136b0 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   13626:	f7ff ff1f 	bl	13468 <find_cf_cfg>
	if (!cfg) {
   1362a:	4604      	mov	r4, r0
   1362c:	b918      	cbnz	r0, 13636 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1362e:	f7ff ff1b 	bl	13468 <find_cf_cfg>
	if (!cfg) {
   13632:	4604      	mov	r4, r0
   13634:	b1d8      	cbz	r0, 1366e <cf_write+0x62>
   13636:	4632      	mov	r2, r6
   13638:	f104 0008 	add.w	r0, r4, #8
   1363c:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   13640:	4596      	cmp	lr, r2
   13642:	d11d      	bne.n	13680 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13644:	b12f      	cbz	r7, 13652 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   13646:	7833      	ldrb	r3, [r6, #0]
   13648:	7a22      	ldrb	r2, [r4, #8]
   1364a:	f003 0307 	and.w	r3, r3, #7
   1364e:	4313      	orrs	r3, r2
   13650:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13652:	f108 0188 	add.w	r1, r8, #136	; 0x88
   13656:	1c60      	adds	r0, r4, #1
   13658:	f009 fc3a 	bl	1ced0 <bt_addr_le_copy>
	cfg->id = conn->id;
   1365c:	4620      	mov	r0, r4
   1365e:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13662:	2101      	movs	r1, #1
   13664:	f800 3b0c 	strb.w	r3, [r0], #12
   13668:	f009 fc43 	bl	1cef2 <atomic_or>
}
   1366c:	e005      	b.n	1367a <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1366e:	2157      	movs	r1, #87	; 0x57
   13670:	4812      	ldr	r0, [pc, #72]	; (136bc <cf_write+0xb0>)
   13672:	f007 fa0b 	bl	1aa8c <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13676:	f06f 0510 	mvn.w	r5, #16
}
   1367a:	4628      	mov	r0, r5
   1367c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   13680:	2300      	movs	r3, #0
   13682:	f812 1b01 	ldrb.w	r1, [r2], #1
   13686:	f810 cb01 	ldrb.w	ip, [r0], #1
   1368a:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1368e:	fa21 f903 	lsr.w	r9, r1, r3
   13692:	f019 0f01 	tst.w	r9, #1
   13696:	d004      	beq.n	136a2 <cf_write+0x96>
   13698:	fa2c f903 	lsr.w	r9, ip, r3
   1369c:	f019 0f01 	tst.w	r9, #1
   136a0:	d109      	bne.n	136b6 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   136a2:	3301      	adds	r3, #1
   136a4:	2b03      	cmp	r3, #3
   136a6:	d1f2      	bne.n	1368e <cf_write+0x82>
   136a8:	e7ca      	b.n	13640 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   136aa:	f06f 0506 	mvn.w	r5, #6
   136ae:	e7e4      	b.n	1367a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   136b0:	f06f 050c 	mvn.w	r5, #12
   136b4:	e7e1      	b.n	1367a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   136b6:	f06f 0512 	mvn.w	r5, #18
   136ba:	e7de      	b.n	1367a <cf_write+0x6e>
   136bc:	00021de9 	.word	0x00021de9

000136c0 <sc_store>:
{
   136c0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   136c2:	4605      	mov	r5, r0
   136c4:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   136c8:	4604      	mov	r4, r0
   136ca:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   136cc:	b1ca      	cbz	r2, 13702 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   136ce:	ae02      	add	r6, sp, #8
   136d0:	2104      	movs	r1, #4
   136d2:	4630      	mov	r0, r6
   136d4:	f007 f940 	bl	1a958 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   136d8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   136da:	462b      	mov	r3, r5
   136dc:	2124      	movs	r1, #36	; 0x24
   136de:	4a0a      	ldr	r2, [pc, #40]	; (13708 <sc_store+0x48>)
   136e0:	a803      	add	r0, sp, #12
   136e2:	f7fb f8bd 	bl	e860 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   136e6:	2204      	movs	r2, #4
   136e8:	f104 0108 	add.w	r1, r4, #8
   136ec:	a803      	add	r0, sp, #12
   136ee:	f7f8 fb33 	bl	bd58 <settings_save_one>
	if (err) {
   136f2:	4602      	mov	r2, r0
   136f4:	b118      	cbz	r0, 136fe <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   136f6:	2145      	movs	r1, #69	; 0x45
   136f8:	4804      	ldr	r0, [pc, #16]	; (1370c <sc_store+0x4c>)
   136fa:	f007 f9c7 	bl	1aa8c <printk>
}
   136fe:	b00c      	add	sp, #48	; 0x30
   13700:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   13702:	9200      	str	r2, [sp, #0]
   13704:	e7e9      	b.n	136da <sc_store+0x1a>
   13706:	bf00      	nop
   13708:	00022139 	.word	0x00022139
   1370c:	00021e1a 	.word	0x00021e1a

00013710 <sc_save>:
{
   13710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13714:	4680      	mov	r8, r0
   13716:	460f      	mov	r7, r1
   13718:	4616      	mov	r6, r2
   1371a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1371c:	f7ff fec6 	bl	134ac <find_sc_cfg>
	if (!cfg) {
   13720:	4604      	mov	r4, r0
   13722:	b998      	cbnz	r0, 1374c <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13724:	4669      	mov	r1, sp
   13726:	9000      	str	r0, [sp, #0]
   13728:	f8cd 0003 	str.w	r0, [sp, #3]
   1372c:	f7ff febe 	bl	134ac <find_sc_cfg>
		if (!cfg) {
   13730:	4604      	mov	r4, r0
   13732:	b930      	cbnz	r0, 13742 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13734:	2145      	movs	r1, #69	; 0x45
   13736:	4813      	ldr	r0, [pc, #76]	; (13784 <sc_save+0x74>)
   13738:	f007 f9a8 	bl	1aa8c <printk>
}
   1373c:	b002      	add	sp, #8
   1373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   13742:	4639      	mov	r1, r7
		cfg->id = id;
   13744:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   13748:	f009 fbc2 	bl	1ced0 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1374c:	8922      	ldrh	r2, [r4, #8]
   1374e:	8963      	ldrh	r3, [r4, #10]
   13750:	b97a      	cbnz	r2, 13772 <sc_save+0x62>
   13752:	b983      	cbnz	r3, 13776 <sc_save+0x66>
		cfg->data.start = start;
   13754:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   13756:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   13758:	4621      	mov	r1, r4
   1375a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1375e:	f008 fd86 	bl	1c26e <bt_addr_le_is_bonded>
   13762:	2800      	cmp	r0, #0
   13764:	d0ea      	beq.n	1373c <sc_save+0x2c>
		sc_store(cfg);
   13766:	4620      	mov	r0, r4
}
   13768:	b002      	add	sp, #8
   1376a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1376e:	f7ff bfa7 	b.w	136c0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   13772:	4296      	cmp	r6, r2
   13774:	d302      	bcc.n	1377c <sc_save+0x6c>
   13776:	429d      	cmp	r5, r3
   13778:	d8ed      	bhi.n	13756 <sc_save+0x46>
   1377a:	e7df      	b.n	1373c <sc_save+0x2c>
	if (*end < new_end) {
   1377c:	429d      	cmp	r5, r3
		*start = new_start;
   1377e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   13780:	d9ea      	bls.n	13758 <sc_save+0x48>
   13782:	e7e8      	b.n	13756 <sc_save+0x46>
   13784:	00021e3b 	.word	0x00021e3b

00013788 <sc_set>:
{
   13788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1378c:	460e      	mov	r6, r1
   1378e:	4690      	mov	r8, r2
   13790:	4699      	mov	r9, r3
	if (!name) {
   13792:	4604      	mov	r4, r0
{
   13794:	b087      	sub	sp, #28
	if (!name) {
   13796:	b948      	cbnz	r0, 137ac <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13798:	2145      	movs	r1, #69	; 0x45
   1379a:	4829      	ldr	r0, [pc, #164]	; (13840 <sc_set+0xb8>)
   1379c:	f007 f976 	bl	1aa8c <printk>
		return -EINVAL;
   137a0:	f06f 0515 	mvn.w	r5, #21
}
   137a4:	4628      	mov	r0, r5
   137a6:	b007      	add	sp, #28
   137a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   137ac:	a902      	add	r1, sp, #8
   137ae:	f008 fbe8 	bl	1bf82 <bt_settings_decode_key>
	if (err) {
   137b2:	4605      	mov	r5, r0
   137b4:	b128      	cbz	r0, 137c2 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   137b6:	4622      	mov	r2, r4
   137b8:	2145      	movs	r1, #69	; 0x45
   137ba:	4822      	ldr	r0, [pc, #136]	; (13844 <sc_set+0xbc>)
   137bc:	f007 f966 	bl	1aa8c <printk>
   137c0:	e7ee      	b.n	137a0 <sc_set+0x18>
	settings_name_next(name, &next);
   137c2:	4620      	mov	r0, r4
   137c4:	a901      	add	r1, sp, #4
   137c6:	f007 fc66 	bl	1b096 <settings_name_next>
	if (!next) {
   137ca:	9801      	ldr	r0, [sp, #4]
   137cc:	b1d8      	cbz	r0, 13806 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   137ce:	220a      	movs	r2, #10
   137d0:	4629      	mov	r1, r5
   137d2:	f008 fab7 	bl	1bd44 <strtol>
   137d6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   137d8:	4638      	mov	r0, r7
   137da:	a902      	add	r1, sp, #8
   137dc:	f7ff fe66 	bl	134ac <find_sc_cfg>
	if (!cfg && len_rd) {
   137e0:	4604      	mov	r4, r0
   137e2:	bb28      	cbnz	r0, 13830 <sc_set+0xa8>
   137e4:	2e00      	cmp	r6, #0
   137e6:	d0dd      	beq.n	137a4 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   137e8:	a904      	add	r1, sp, #16
   137ea:	9004      	str	r0, [sp, #16]
   137ec:	f8cd 0013 	str.w	r0, [sp, #19]
   137f0:	f7ff fe5c 	bl	134ac <find_sc_cfg>
		if (!cfg) {
   137f4:	4604      	mov	r4, r0
   137f6:	b940      	cbnz	r0, 1380a <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   137f8:	2145      	movs	r1, #69	; 0x45
   137fa:	4813      	ldr	r0, [pc, #76]	; (13848 <sc_set+0xc0>)
   137fc:	f007 f946 	bl	1aa8c <printk>
			return -ENOMEM;
   13800:	f06f 050b 	mvn.w	r5, #11
   13804:	e7ce      	b.n	137a4 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   13806:	462f      	mov	r7, r5
   13808:	e7e6      	b.n	137d8 <sc_set+0x50>
		cfg->id = id;
   1380a:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1380e:	a902      	add	r1, sp, #8
   13810:	f009 fb5e 	bl	1ced0 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   13814:	f104 0108 	add.w	r1, r4, #8
   13818:	2204      	movs	r2, #4
   1381a:	4648      	mov	r0, r9
   1381c:	47c0      	blx	r8
		if (len < 0) {
   1381e:	1e04      	subs	r4, r0, #0
   13820:	dac0      	bge.n	137a4 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13822:	4622      	mov	r2, r4
   13824:	2145      	movs	r1, #69	; 0x45
   13826:	4809      	ldr	r0, [pc, #36]	; (1384c <sc_set+0xc4>)
   13828:	f007 f930 	bl	1aa8c <printk>
			return len;
   1382c:	4625      	mov	r5, r4
   1382e:	e7b9      	b.n	137a4 <sc_set+0x1c>
	if (len_rd) {
   13830:	2e00      	cmp	r6, #0
   13832:	d1ef      	bne.n	13814 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13834:	220c      	movs	r2, #12
   13836:	4631      	mov	r1, r6
   13838:	f008 fb7d 	bl	1bf36 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1383c:	e7b2      	b.n	137a4 <sc_set+0x1c>
   1383e:	bf00      	nop
   13840:	00020d68 	.word	0x00020d68
   13844:	00021e5f 	.word	0x00021e5f
   13848:	00021e80 	.word	0x00021e80
   1384c:	00021d71 	.word	0x00021d71

00013850 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   13850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13854:	4606      	mov	r6, r0
   13856:	4688      	mov	r8, r1
   13858:	4617      	mov	r7, r2
	if (params) {
   1385a:	461c      	mov	r4, r3
   1385c:	b31b      	cbz	r3, 138a6 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1385e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13862:	2100      	movs	r1, #0
   13864:	f7ff fc3c 	bl	130e0 <bt_att_req_alloc>
		if (!req) {
   13868:	4605      	mov	r5, r0
   1386a:	b920      	cbnz	r0, 13876 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   1386c:	f06f 040b 	mvn.w	r4, #11
}
   13870:	4620      	mov	r0, r4
   13872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   13876:	2300      	movs	r3, #0
		req->user_data = params;
   13878:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   1387a:	4601      	mov	r1, r0
		req->buf = buf;
   1387c:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   13880:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   13882:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   13884:	4630      	mov	r0, r6
   13886:	f7ff fd57 	bl	13338 <bt_att_req_send>
		if (err) {
   1388a:	4604      	mov	r4, r0
   1388c:	2800      	cmp	r0, #0
   1388e:	d0ef      	beq.n	13870 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   13890:	4628      	mov	r0, r5
   13892:	f7ff fc3b 	bl	1310c <bt_att_req_free>
	if (err) {
   13896:	2c00      	cmp	r4, #0
   13898:	d0ea      	beq.n	13870 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   1389a:	4622      	mov	r2, r4
   1389c:	2145      	movs	r1, #69	; 0x45
   1389e:	4804      	ldr	r0, [pc, #16]	; (138b0 <gatt_send.constprop.0+0x60>)
   138a0:	f007 f8f4 	bl	1aa8c <printk>
   138a4:	e7e4      	b.n	13870 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   138a6:	461a      	mov	r2, r3
   138a8:	f7ff fcde 	bl	13268 <bt_att_send>
   138ac:	4604      	mov	r4, r0
   138ae:	e7f2      	b.n	13896 <gatt_send.constprop.0+0x46>
   138b0:	00021ea7 	.word	0x00021ea7

000138b4 <cf_set>:
{
   138b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138b8:	4689      	mov	r9, r1
   138ba:	4617      	mov	r7, r2
   138bc:	4698      	mov	r8, r3
	if (!name) {
   138be:	4605      	mov	r5, r0
{
   138c0:	b085      	sub	sp, #20
	if (!name) {
   138c2:	b948      	cbnz	r0, 138d8 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   138c4:	2145      	movs	r1, #69	; 0x45
   138c6:	4826      	ldr	r0, [pc, #152]	; (13960 <cf_set+0xac>)
   138c8:	f007 f8e0 	bl	1aa8c <printk>
		return -EINVAL;
   138cc:	f06f 0415 	mvn.w	r4, #21
}
   138d0:	4620      	mov	r0, r4
   138d2:	b005      	add	sp, #20
   138d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   138d8:	a902      	add	r1, sp, #8
   138da:	f008 fb52 	bl	1bf82 <bt_settings_decode_key>
	if (err) {
   138de:	4604      	mov	r4, r0
   138e0:	b128      	cbz	r0, 138ee <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   138e2:	462a      	mov	r2, r5
   138e4:	2145      	movs	r1, #69	; 0x45
   138e6:	481f      	ldr	r0, [pc, #124]	; (13964 <cf_set+0xb0>)
   138e8:	f007 f8d0 	bl	1aa8c <printk>
   138ec:	e7ee      	b.n	138cc <cf_set+0x18>
	settings_name_next(name, &next);
   138ee:	4628      	mov	r0, r5
   138f0:	a901      	add	r1, sp, #4
   138f2:	f007 fbd0 	bl	1b096 <settings_name_next>
	if (!next) {
   138f6:	9801      	ldr	r0, [sp, #4]
   138f8:	b1a8      	cbz	r0, 13926 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   138fa:	220a      	movs	r2, #10
   138fc:	4621      	mov	r1, r4
   138fe:	f008 fa21 	bl	1bd44 <strtol>
   13902:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   13904:	4630      	mov	r0, r6
   13906:	a902      	add	r1, sp, #8
   13908:	f7ff fe0e 	bl	13528 <find_cf_cfg_by_addr>
	if (!cfg) {
   1390c:	4605      	mov	r5, r0
   1390e:	b988      	cbnz	r0, 13934 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   13910:	f7ff fdaa 	bl	13468 <find_cf_cfg>
		if (!cfg) {
   13914:	4605      	mov	r5, r0
   13916:	b940      	cbnz	r0, 1392a <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   13918:	2145      	movs	r1, #69	; 0x45
   1391a:	4813      	ldr	r0, [pc, #76]	; (13968 <cf_set+0xb4>)
   1391c:	f007 f8b6 	bl	1aa8c <printk>
			return -ENOMEM;
   13920:	f06f 040b 	mvn.w	r4, #11
   13924:	e7d4      	b.n	138d0 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   13926:	4626      	mov	r6, r4
   13928:	e7ec      	b.n	13904 <cf_set+0x50>
		cfg->id = id;
   1392a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1392e:	a902      	add	r1, sp, #8
   13930:	f009 face 	bl	1ced0 <bt_addr_le_copy>
	if (len_rd) {
   13934:	f1b9 0f00 	cmp.w	r9, #0
   13938:	d00d      	beq.n	13956 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1393a:	f105 0108 	add.w	r1, r5, #8
   1393e:	2201      	movs	r2, #1
   13940:	4640      	mov	r0, r8
   13942:	47b8      	blx	r7
		if (len < 0) {
   13944:	1e05      	subs	r5, r0, #0
   13946:	dac3      	bge.n	138d0 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13948:	462a      	mov	r2, r5
   1394a:	2145      	movs	r1, #69	; 0x45
   1394c:	4807      	ldr	r0, [pc, #28]	; (1396c <cf_set+0xb8>)
   1394e:	f007 f89d 	bl	1aa8c <printk>
			return len;
   13952:	462c      	mov	r4, r5
   13954:	e7bc      	b.n	138d0 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   13956:	4628      	mov	r0, r5
   13958:	f009 fb00 	bl	1cf5c <clear_cf_cfg>
   1395c:	e7b8      	b.n	138d0 <cf_set+0x1c>
   1395e:	bf00      	nop
   13960:	00020d68 	.word	0x00020d68
   13964:	00021e5f 	.word	0x00021e5f
   13968:	00021ec6 	.word	0x00021ec6
   1396c:	00021d71 	.word	0x00021d71

00013970 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   13970:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   13972:	6881      	ldr	r1, [r0, #8]
{
   13974:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13976:	4a07      	ldr	r2, [pc, #28]	; (13994 <remove_peer_from_attr+0x24>)
   13978:	4291      	cmp	r1, r2
   1397a:	d109      	bne.n	13990 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1397c:	791a      	ldrb	r2, [r3, #4]
   1397e:	6819      	ldr	r1, [r3, #0]
   13980:	68c0      	ldr	r0, [r0, #12]
   13982:	f009 fa8b 	bl	1ce9c <ccc_find_cfg>
	if (cfg) {
   13986:	b118      	cbz	r0, 13990 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13988:	220a      	movs	r2, #10
   1398a:	2100      	movs	r1, #0
   1398c:	f008 fad3 	bl	1bf36 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   13990:	2001      	movs	r0, #1
   13992:	bd08      	pop	{r3, pc}
   13994:	00013561 	.word	0x00013561

00013998 <ccc_load>:
{
   13998:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1399a:	4b21      	ldr	r3, [pc, #132]	; (13a20 <ccc_load+0x88>)
{
   1399c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1399e:	6882      	ldr	r2, [r0, #8]
   139a0:	429a      	cmp	r2, r3
   139a2:	d002      	beq.n	139aa <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   139a4:	2001      	movs	r0, #1
}
   139a6:	b002      	add	sp, #8
   139a8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   139aa:	68a3      	ldr	r3, [r4, #8]
   139ac:	68c6      	ldr	r6, [r0, #12]
   139ae:	b94b      	cbnz	r3, 139c4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   139b0:	4630      	mov	r0, r6
   139b2:	7922      	ldrb	r2, [r4, #4]
   139b4:	6821      	ldr	r1, [r4, #0]
   139b6:	f009 fa71 	bl	1ce9c <ccc_find_cfg>
	if (!cfg) {
   139ba:	2800      	cmp	r0, #0
   139bc:	d0f2      	beq.n	139a4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   139be:	f009 fa8a 	bl	1ced6 <clear_ccc_cfg>
   139c2:	e7ef      	b.n	139a4 <ccc_load+0xc>
	} else if (!load->count) {
   139c4:	68e0      	ldr	r0, [r4, #12]
   139c6:	2800      	cmp	r0, #0
   139c8:	d0ed      	beq.n	139a6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   139ca:	881b      	ldrh	r3, [r3, #0]
   139cc:	4299      	cmp	r1, r3
   139ce:	d00a      	beq.n	139e6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   139d0:	d9e8      	bls.n	139a4 <ccc_load+0xc>
	load->count--;
   139d2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   139d4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   139d6:	3801      	subs	r0, #1
	load->entry++;
   139d8:	3304      	adds	r3, #4
	load->count--;
   139da:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   139dc:	3800      	subs	r0, #0
   139de:	bf18      	it	ne
   139e0:	2001      	movne	r0, #1
	load->entry++;
   139e2:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   139e4:	e7df      	b.n	139a6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   139e6:	4630      	mov	r0, r6
   139e8:	7922      	ldrb	r2, [r4, #4]
   139ea:	6821      	ldr	r1, [r4, #0]
   139ec:	f009 fa56 	bl	1ce9c <ccc_find_cfg>
	if (!cfg) {
   139f0:	4605      	mov	r5, r0
   139f2:	b980      	cbnz	r0, 13a16 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   139f4:	9000      	str	r0, [sp, #0]
   139f6:	4602      	mov	r2, r0
   139f8:	f8cd 0003 	str.w	r0, [sp, #3]
   139fc:	4669      	mov	r1, sp
   139fe:	4630      	mov	r0, r6
   13a00:	f009 fa4c 	bl	1ce9c <ccc_find_cfg>
		if (!cfg) {
   13a04:	4605      	mov	r5, r0
   13a06:	2800      	cmp	r0, #0
   13a08:	d0e3      	beq.n	139d2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   13a0a:	6821      	ldr	r1, [r4, #0]
   13a0c:	3001      	adds	r0, #1
   13a0e:	f009 fa5f 	bl	1ced0 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   13a12:	7923      	ldrb	r3, [r4, #4]
   13a14:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   13a16:	68a3      	ldr	r3, [r4, #8]
   13a18:	885b      	ldrh	r3, [r3, #2]
   13a1a:	812b      	strh	r3, [r5, #8]
   13a1c:	e7d9      	b.n	139d2 <ccc_load+0x3a>
   13a1e:	bf00      	nop
   13a20:	00013561 	.word	0x00013561

00013a24 <ccc_save>:
{
   13a24:	b538      	push	{r3, r4, r5, lr}
   13a26:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a28:	4b0b      	ldr	r3, [pc, #44]	; (13a58 <ccc_save+0x34>)
   13a2a:	6882      	ldr	r2, [r0, #8]
{
   13a2c:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a2e:	429a      	cmp	r2, r3
   13a30:	d10f      	bne.n	13a52 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13a32:	7922      	ldrb	r2, [r4, #4]
   13a34:	6821      	ldr	r1, [r4, #0]
   13a36:	68c0      	ldr	r0, [r0, #12]
   13a38:	f009 fa30 	bl	1ce9c <ccc_find_cfg>
	if (!cfg) {
   13a3c:	b148      	cbz	r0, 13a52 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   13a3e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   13a42:	8901      	ldrh	r1, [r0, #8]
   13a44:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13a48:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   13a4a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   13a4c:	8151      	strh	r1, [r2, #10]
	save->count++;
   13a4e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   13a52:	2001      	movs	r0, #1
   13a54:	bd38      	pop	{r3, r4, r5, pc}
   13a56:	bf00      	nop
   13a58:	00013561 	.word	0x00013561

00013a5c <gatt_indicate>:
{
   13a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a60:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   13a62:	8a92      	ldrh	r2, [r2, #20]
{
   13a64:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13a66:	3202      	adds	r2, #2
   13a68:	211d      	movs	r1, #29
{
   13a6a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13a6c:	f7ff f8b8 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   13a70:	4605      	mov	r5, r0
   13a72:	b1e8      	cbz	r0, 13ab0 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13a74:	f100 0808 	add.w	r8, r0, #8
   13a78:	2102      	movs	r1, #2
   13a7a:	4640      	mov	r0, r8
   13a7c:	f002 f8a6 	bl	15bcc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   13a80:	4606      	mov	r6, r0
   13a82:	8aa1      	ldrh	r1, [r4, #20]
   13a84:	f826 9b02 	strh.w	r9, [r6], #2
   13a88:	4640      	mov	r0, r8
   13a8a:	f002 f89f 	bl	15bcc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   13a8e:	4630      	mov	r0, r6
   13a90:	8aa2      	ldrh	r2, [r4, #20]
   13a92:	6921      	ldr	r1, [r4, #16]
   13a94:	f008 fa24 	bl	1bee0 <memcpy>
	if (!params->func) {
   13a98:	68a3      	ldr	r3, [r4, #8]
   13a9a:	b933      	cbnz	r3, 13aaa <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   13a9c:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13a9e:	4629      	mov	r1, r5
   13aa0:	4638      	mov	r0, r7
}
   13aa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13aa6:	f7ff bed3 	b.w	13850 <gatt_send.constprop.0>
   13aaa:	4623      	mov	r3, r4
   13aac:	4a04      	ldr	r2, [pc, #16]	; (13ac0 <gatt_indicate+0x64>)
   13aae:	e7f6      	b.n	13a9e <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   13ab0:	2157      	movs	r1, #87	; 0x57
   13ab2:	4804      	ldr	r0, [pc, #16]	; (13ac4 <gatt_indicate+0x68>)
   13ab4:	f006 ffea 	bl	1aa8c <printk>
}
   13ab8:	f06f 000b 	mvn.w	r0, #11
   13abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ac0:	0001cd7d 	.word	0x0001cd7d
   13ac4:	00021eed 	.word	0x00021eed

00013ac8 <gatt_notify>:
{
   13ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13acc:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   13ace:	8992      	ldrh	r2, [r2, #12]
{
   13ad0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13ad2:	3202      	adds	r2, #2
   13ad4:	211b      	movs	r1, #27
{
   13ad6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13ad8:	f7ff f882 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   13adc:	4605      	mov	r5, r0
   13ade:	b1c8      	cbz	r0, 13b14 <gatt_notify+0x4c>
   13ae0:	f100 0908 	add.w	r9, r0, #8
   13ae4:	2102      	movs	r1, #2
   13ae6:	4648      	mov	r0, r9
   13ae8:	f002 f870 	bl	15bcc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   13aec:	4606      	mov	r6, r0
   13aee:	89a1      	ldrh	r1, [r4, #12]
   13af0:	f826 8b02 	strh.w	r8, [r6], #2
   13af4:	4648      	mov	r0, r9
   13af6:	f002 f869 	bl	15bcc <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   13afa:	89a2      	ldrh	r2, [r4, #12]
   13afc:	68a1      	ldr	r1, [r4, #8]
   13afe:	4630      	mov	r0, r6
   13b00:	f008 f9ee 	bl	1bee0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   13b04:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13b08:	4629      	mov	r1, r5
   13b0a:	4638      	mov	r0, r7
}
   13b0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   13b10:	f7ff bbaa 	b.w	13268 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   13b14:	2157      	movs	r1, #87	; 0x57
   13b16:	4803      	ldr	r0, [pc, #12]	; (13b24 <gatt_notify+0x5c>)
   13b18:	f006 ffb8 	bl	1aa8c <printk>
}
   13b1c:	f06f 000b 	mvn.w	r0, #11
   13b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b24:	00021f19 	.word	0x00021f19

00013b28 <notify_cb>:
{
   13b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b2c:	4b38      	ldr	r3, [pc, #224]	; (13c10 <notify_cb+0xe8>)
{
   13b2e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b30:	6882      	ldr	r2, [r0, #8]
{
   13b32:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b34:	429a      	cmp	r2, r3
   13b36:	d003      	beq.n	13b40 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13b38:	2001      	movs	r0, #1
}
   13b3a:	b003      	add	sp, #12
   13b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   13b40:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13b44:	4b33      	ldr	r3, [pc, #204]	; (13c14 <notify_cb+0xec>)
   13b46:	4599      	cmp	r9, r3
   13b48:	d01a      	beq.n	13b80 <notify_cb+0x58>
   13b4a:	f04f 0b00 	mov.w	fp, #0
   13b4e:	f109 0701 	add.w	r7, r9, #1
   13b52:	f109 0a33 	add.w	sl, r9, #51	; 0x33
		if (cfg->value != data->type) {
   13b56:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13b5a:	89a3      	ldrh	r3, [r4, #12]
   13b5c:	429a      	cmp	r2, r3
   13b5e:	d10b      	bne.n	13b78 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13b60:	4639      	mov	r1, r7
   13b62:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13b66:	f7fd fead 	bl	118c4 <bt_conn_lookup_addr_le>
		if (!conn) {
   13b6a:	4605      	mov	r5, r0
   13b6c:	b120      	cbz	r0, 13b78 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   13b6e:	7a83      	ldrb	r3, [r0, #10]
   13b70:	2b07      	cmp	r3, #7
   13b72:	d029      	beq.n	13bc8 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13b74:	f7fd fd84 	bl	11680 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13b78:	370a      	adds	r7, #10
   13b7a:	4557      	cmp	r7, sl
   13b7c:	d1eb      	bne.n	13b56 <notify_cb+0x2e>
   13b7e:	e7db      	b.n	13b38 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13b80:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13b82:	4637      	mov	r7, r6
   13b84:	4d24      	ldr	r5, [pc, #144]	; (13c18 <notify_cb+0xf0>)
   13b86:	4669      	mov	r1, sp
   13b88:	4628      	mov	r0, r5
   13b8a:	9700      	str	r7, [sp, #0]
   13b8c:	f8cd 7003 	str.w	r7, [sp, #3]
   13b90:	f009 f962 	bl	1ce58 <bt_addr_le_cmp>
   13b94:	b178      	cbz	r0, 13bb6 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13b96:	2207      	movs	r2, #7
   13b98:	4629      	mov	r1, r5
   13b9a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13b9e:	f7fd fed1 	bl	11944 <bt_conn_lookup_state_le>
			if (!conn) {
   13ba2:	b970      	cbnz	r0, 13bc2 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13ba4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13ba6:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13ba8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13baa:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13bae:	8853      	ldrh	r3, [r2, #2]
   13bb0:	8812      	ldrh	r2, [r2, #0]
   13bb2:	f7ff fdad 	bl	13710 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13bb6:	3601      	adds	r6, #1
   13bb8:	2e05      	cmp	r6, #5
   13bba:	f105 050c 	add.w	r5, r5, #12
   13bbe:	d1e2      	bne.n	13b86 <notify_cb+0x5e>
   13bc0:	e7c3      	b.n	13b4a <notify_cb+0x22>
			bt_conn_unref(conn);
   13bc2:	f7fd fd5d 	bl	11680 <bt_conn_unref>
   13bc6:	e7f6      	b.n	13bb6 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13bc8:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
   13bcc:	b123      	cbz	r3, 13bd8 <notify_cb+0xb0>
   13bce:	4641      	mov	r1, r8
   13bd0:	4798      	blx	r3
   13bd2:	b908      	cbnz	r0, 13bd8 <notify_cb+0xb0>
			bt_conn_unref(conn);
   13bd4:	4628      	mov	r0, r5
   13bd6:	e7cd      	b.n	13b74 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13bd8:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13bda:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13bdc:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   13bde:	88a1      	ldrh	r1, [r4, #4]
   13be0:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   13be2:	d10f      	bne.n	13c04 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13be4:	f7ff ff3a 	bl	13a5c <gatt_indicate>
			if (err == 0) {
   13be8:	4606      	mov	r6, r0
   13bea:	b918      	cbnz	r0, 13bf4 <notify_cb+0xcc>
				data->ind_params->_ref++;
   13bec:	6922      	ldr	r2, [r4, #16]
   13bee:	7d93      	ldrb	r3, [r2, #22]
   13bf0:	3301      	adds	r3, #1
   13bf2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13bf4:	4628      	mov	r0, r5
   13bf6:	f7fd fd43 	bl	11680 <bt_conn_unref>
		if (err < 0) {
   13bfa:	2e00      	cmp	r6, #0
   13bfc:	db06      	blt.n	13c0c <notify_cb+0xe4>
		data->err = 0;
   13bfe:	f8c4 b008 	str.w	fp, [r4, #8]
   13c02:	e7b9      	b.n	13b78 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   13c04:	f7ff ff60 	bl	13ac8 <gatt_notify>
   13c08:	4606      	mov	r6, r0
   13c0a:	e7f3      	b.n	13bf4 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   13c0c:	2000      	movs	r0, #0
   13c0e:	e794      	b.n	13b3a <notify_cb+0x12>
   13c10:	00013561 	.word	0x00013561
   13c14:	200083a0 	.word	0x200083a0
   13c18:	2000e2db 	.word	0x2000e2db

00013c1c <bt_gatt_clear_sc>:
{
   13c1c:	b570      	push	{r4, r5, r6, lr}
   13c1e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13c20:	f7ff fc44 	bl	134ac <find_sc_cfg>
	if (!cfg) {
   13c24:	4604      	mov	r4, r0
   13c26:	b1e8      	cbz	r0, 13c64 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13c28:	4605      	mov	r5, r0
   13c2a:	f815 2b01 	ldrb.w	r2, [r5], #1
   13c2e:	b1e2      	cbz	r2, 13c6a <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13c30:	ae02      	add	r6, sp, #8
   13c32:	2104      	movs	r1, #4
   13c34:	4630      	mov	r0, r6
   13c36:	f006 fe8f 	bl	1a958 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13c3a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13c3c:	4a0c      	ldr	r2, [pc, #48]	; (13c70 <bt_gatt_clear_sc+0x54>)
   13c3e:	462b      	mov	r3, r5
   13c40:	2124      	movs	r1, #36	; 0x24
   13c42:	a803      	add	r0, sp, #12
   13c44:	f7fa fe0c 	bl	e860 <bt_settings_encode_key>
		err = settings_delete(key);
   13c48:	a803      	add	r0, sp, #12
   13c4a:	f007 f9fd 	bl	1b048 <settings_delete>
		if (err) {
   13c4e:	4602      	mov	r2, r0
   13c50:	b118      	cbz	r0, 13c5a <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13c52:	2145      	movs	r1, #69	; 0x45
   13c54:	4807      	ldr	r0, [pc, #28]	; (13c74 <bt_gatt_clear_sc+0x58>)
   13c56:	f006 ff19 	bl	1aa8c <printk>
	memset(cfg, 0, sizeof(*cfg));
   13c5a:	220c      	movs	r2, #12
   13c5c:	2100      	movs	r1, #0
   13c5e:	4620      	mov	r0, r4
   13c60:	f008 f969 	bl	1bf36 <memset>
}
   13c64:	2000      	movs	r0, #0
   13c66:	b00c      	add	sp, #48	; 0x30
   13c68:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13c6a:	9200      	str	r2, [sp, #0]
   13c6c:	e7e6      	b.n	13c3c <bt_gatt_clear_sc+0x20>
   13c6e:	bf00      	nop
   13c70:	00022139 	.word	0x00022139
   13c74:	00021f47 	.word	0x00021f47

00013c78 <sc_clear>:
{
   13c78:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c7a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13c7e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c80:	4631      	mov	r1, r6
   13c82:	7a00      	ldrb	r0, [r0, #8]
   13c84:	f008 faf3 	bl	1c26e <bt_addr_le_is_bonded>
   13c88:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13c8a:	4631      	mov	r1, r6
   13c8c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c8e:	b14d      	cbz	r5, 13ca4 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13c90:	f7ff ffc4 	bl	13c1c <bt_gatt_clear_sc>
		if (err) {
   13c94:	4602      	mov	r2, r0
   13c96:	b170      	cbz	r0, 13cb6 <sc_clear+0x3e>
}
   13c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13c9c:	2145      	movs	r1, #69	; 0x45
   13c9e:	4806      	ldr	r0, [pc, #24]	; (13cb8 <sc_clear+0x40>)
   13ca0:	f006 bef4 	b.w	1aa8c <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13ca4:	f7ff fc02 	bl	134ac <find_sc_cfg>
		if (cfg) {
   13ca8:	b128      	cbz	r0, 13cb6 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13caa:	4629      	mov	r1, r5
}
   13cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13cb0:	220c      	movs	r2, #12
   13cb2:	f008 b940 	b.w	1bf36 <memset>
}
   13cb6:	bd70      	pop	{r4, r5, r6, pc}
   13cb8:	00021f69 	.word	0x00021f69

00013cbc <disconnected_cb>:
{
   13cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc0:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13cc2:	4b25      	ldr	r3, [pc, #148]	; (13d58 <disconnected_cb+0x9c>)
   13cc4:	6882      	ldr	r2, [r0, #8]
{
   13cc6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13cc8:	429a      	cmp	r2, r3
   13cca:	d12f      	bne.n	13d2c <disconnected_cb+0x70>
	ccc = attr->user_data;
   13ccc:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13cce:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   13cd0:	b363      	cbz	r3, 13d2c <disconnected_cb+0x70>
	value_used = false;
   13cd2:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13cd6:	f8df b084 	ldr.w	fp, [pc, #132]	; 13d5c <disconnected_cb+0xa0>
   13cda:	1c6c      	adds	r4, r5, #1
   13cdc:	f105 0a33 	add.w	sl, r5, #51	; 0x33
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13ce0:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13ce4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13ce8:	b19b      	cbz	r3, 13d12 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13cea:	4622      	mov	r2, r4
   13cec:	4630      	mov	r0, r6
   13cee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13cf2:	f008 fb50 	bl	1c396 <bt_conn_is_peer_addr_le>
   13cf6:	b9e0      	cbnz	r0, 13d32 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13cf8:	4621      	mov	r1, r4
   13cfa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13cfe:	f7fd fde1 	bl	118c4 <bt_conn_lookup_addr_le>
			if (tmp) {
   13d02:	b130      	cbz	r0, 13d12 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   13d04:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   13d06:	2b07      	cmp	r3, #7
   13d08:	bf08      	it	eq
   13d0a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13d0e:	f7fd fcb7 	bl	11680 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13d12:	340a      	adds	r4, #10
   13d14:	45a2      	cmp	sl, r4
   13d16:	d1e5      	bne.n	13ce4 <disconnected_cb+0x28>
	if (!value_used) {
   13d18:	f1b8 0f00 	cmp.w	r8, #0
   13d1c:	d106      	bne.n	13d2c <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   13d1e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		ccc->value = 0U;
   13d20:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
		if (ccc->cfg_changed) {
   13d24:	b113      	cbz	r3, 13d2c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   13d26:	4641      	mov	r1, r8
   13d28:	4638      	mov	r0, r7
   13d2a:	4798      	blx	r3
}
   13d2c:	2001      	movs	r0, #1
   13d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d32:	4649      	mov	r1, r9
   13d34:	7a30      	ldrb	r0, [r6, #8]
   13d36:	f008 fa9a 	bl	1c26e <bt_addr_le_is_bonded>
   13d3a:	b940      	cbnz	r0, 13d4e <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   13d3c:	455d      	cmp	r5, fp
   13d3e:	d102      	bne.n	13d46 <disconnected_cb+0x8a>
					sc_clear(conn);
   13d40:	4630      	mov	r0, r6
   13d42:	f7ff ff99 	bl	13c78 <sc_clear>
				clear_ccc_cfg(cfg);
   13d46:	1e60      	subs	r0, r4, #1
   13d48:	f009 f8c5 	bl	1ced6 <clear_ccc_cfg>
   13d4c:	e7e1      	b.n	13d12 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13d4e:	4649      	mov	r1, r9
   13d50:	4620      	mov	r0, r4
   13d52:	f009 f8bd 	bl	1ced0 <bt_addr_le_copy>
   13d56:	e7dc      	b.n	13d12 <disconnected_cb+0x56>
   13d58:	00013561 	.word	0x00013561
   13d5c:	200083a0 	.word	0x200083a0

00013d60 <sc_commit>:
{
   13d60:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d62:	490b      	ldr	r1, [pc, #44]	; (13d90 <sc_commit+0x30>)
   13d64:	e8d1 3fef 	ldaex	r3, [r1]
   13d68:	f023 0302 	bic.w	r3, r3, #2
   13d6c:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13d70:	2a00      	cmp	r2, #0
   13d72:	d1f7      	bne.n	13d64 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d74:	4608      	mov	r0, r1
   13d76:	f009 f8c7 	bl	1cf08 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13d7a:	07c3      	lsls	r3, r0, #31
   13d7c:	d506      	bpl.n	13d8c <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13d7e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13d82:	2300      	movs	r3, #0
   13d84:	4803      	ldr	r0, [pc, #12]	; (13d94 <sc_commit+0x34>)
   13d86:	3930      	subs	r1, #48	; 0x30
   13d88:	f005 ff0a 	bl	19ba0 <k_delayed_work_submit_to_queue>
}
   13d8c:	2000      	movs	r0, #0
   13d8e:	bd08      	pop	{r3, pc}
   13d90:	200093c8 	.word	0x200093c8
   13d94:	200098e0 	.word	0x200098e0

00013d98 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d9c:	4688      	mov	r8, r1
   13d9e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13da0:	2112      	movs	r1, #18
   13da2:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13da4:	4606      	mov	r6, r0
   13da6:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13da8:	f7fe ff1a 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   13dac:	4604      	mov	r4, r0
   13dae:	b1c0      	cbz	r0, 13de2 <gatt_write_ccc.constprop.0+0x4a>
   13db0:	f100 0908 	add.w	r9, r0, #8
   13db4:	2102      	movs	r1, #2
   13db6:	4648      	mov	r0, r9
   13db8:	f001 ff08 	bl	15bcc <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13dbc:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13dbe:	f8a0 8000 	strh.w	r8, [r0]
   13dc2:	4648      	mov	r0, r9
   13dc4:	f009 fbde 	bl	1d584 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13dc8:	2104      	movs	r1, #4
   13dca:	f105 0010 	add.w	r0, r5, #16
   13dce:	f009 f890 	bl	1cef2 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13dd2:	462b      	mov	r3, r5
   13dd4:	4621      	mov	r1, r4
   13dd6:	4630      	mov	r0, r6
}
   13dd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13ddc:	4a03      	ldr	r2, [pc, #12]	; (13dec <gatt_write_ccc.constprop.0+0x54>)
   13dde:	f7ff bd37 	b.w	13850 <gatt_send.constprop.0>
}
   13de2:	f06f 000b 	mvn.w	r0, #11
   13de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13dea:	bf00      	nop
   13dec:	0001cfeb 	.word	0x0001cfeb

00013df0 <sc_indicate_rsp>:
{
   13df0:	b510      	push	{r4, lr}
   13df2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13df4:	4910      	ldr	r1, [pc, #64]	; (13e38 <sc_indicate_rsp+0x48>)
   13df6:	e8d1 3fef 	ldaex	r3, [r1]
   13dfa:	f023 0302 	bic.w	r3, r3, #2
   13dfe:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13e02:	2a00      	cmp	r2, #0
   13e04:	d1f7      	bne.n	13df6 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13e06:	4608      	mov	r0, r1
   13e08:	f009 f87e 	bl	1cf08 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13e0c:	07c2      	lsls	r2, r0, #31
   13e0e:	d505      	bpl.n	13e1c <sc_indicate_rsp+0x2c>
   13e10:	2200      	movs	r2, #0
   13e12:	2300      	movs	r3, #0
   13e14:	4809      	ldr	r0, [pc, #36]	; (13e3c <sc_indicate_rsp+0x4c>)
   13e16:	3930      	subs	r1, #48	; 0x30
   13e18:	f005 fec2 	bl	19ba0 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13e1c:	4620      	mov	r0, r4
   13e1e:	f7ff fb23 	bl	13468 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13e22:	b140      	cbz	r0, 13e36 <sc_indicate_rsp+0x46>
   13e24:	7a03      	ldrb	r3, [r0, #8]
   13e26:	07db      	lsls	r3, r3, #31
   13e28:	d505      	bpl.n	13e36 <sc_indicate_rsp+0x46>
}
   13e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13e2e:	2101      	movs	r1, #1
   13e30:	300c      	adds	r0, #12
   13e32:	f009 b85e 	b.w	1cef2 <atomic_or>
   13e36:	bd10      	pop	{r4, pc}
   13e38:	200093c8 	.word	0x200093c8
   13e3c:	200098e0 	.word	0x200098e0

00013e40 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13e40:	2201      	movs	r2, #1
{
   13e42:	b570      	push	{r4, r5, r6, lr}
   13e44:	4b26      	ldr	r3, [pc, #152]	; (13ee0 <bt_gatt_init+0xa0>)
   13e46:	e8d3 1fef 	ldaex	r1, [r3]
   13e4a:	2900      	cmp	r1, #0
   13e4c:	d103      	bne.n	13e56 <bt_gatt_init+0x16>
   13e4e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13e52:	2800      	cmp	r0, #0
   13e54:	d1f7      	bne.n	13e46 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13e56:	d142      	bne.n	13ede <bt_gatt_init+0x9e>
   13e58:	4b22      	ldr	r3, [pc, #136]	; (13ee4 <bt_gatt_init+0xa4>)
   13e5a:	e8d3 1fef 	ldaex	r1, [r3]
   13e5e:	2900      	cmp	r1, #0
   13e60:	d103      	bne.n	13e6a <bt_gatt_init+0x2a>
   13e62:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13e66:	2800      	cmp	r0, #0
   13e68:	d1f7      	bne.n	13e5a <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13e6a:	d034      	beq.n	13ed6 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13e6c:	4c1e      	ldr	r4, [pc, #120]	; (13ee8 <bt_gatt_init+0xa8>)
   13e6e:	2230      	movs	r2, #48	; 0x30
   13e70:	2100      	movs	r1, #0
   13e72:	4620      	mov	r0, r4
   13e74:	f008 f85f 	bl	1bf36 <memset>
   13e78:	4b1c      	ldr	r3, [pc, #112]	; (13eec <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13e7a:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13e7c:	6063      	str	r3, [r4, #4]
   13e7e:	4c1c      	ldr	r4, [pc, #112]	; (13ef0 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13e80:	2300      	movs	r3, #0
   13e82:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13e86:	481b      	ldr	r0, [pc, #108]	; (13ef4 <bt_gatt_init+0xb4>)
   13e88:	f005 fe8a 	bl	19ba0 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13e8c:	2100      	movs	r1, #0
   13e8e:	f104 0020 	add.w	r0, r4, #32
   13e92:	2230      	movs	r2, #48	; 0x30
   13e94:	f008 f84f 	bl	1bf36 <memset>
   13e98:	4b17      	ldr	r3, [pc, #92]	; (13ef8 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13e9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13e9e:	6263      	str	r3, [r4, #36]	; 0x24
   13ea0:	2102      	movs	r1, #2
}
   13ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13ea6:	f009 b824 	b.w	1cef2 <atomic_or>
		last_static_handle += svc->attr_count;
   13eaa:	4a14      	ldr	r2, [pc, #80]	; (13efc <bt_gatt_init+0xbc>)
   13eac:	6863      	ldr	r3, [r4, #4]
   13eae:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13eb0:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13eb2:	440b      	add	r3, r1
   13eb4:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13eb6:	42ac      	cmp	r4, r5
   13eb8:	d90a      	bls.n	13ed0 <bt_gatt_init+0x90>
   13eba:	4631      	mov	r1, r6
   13ebc:	4810      	ldr	r0, [pc, #64]	; (13f00 <bt_gatt_init+0xc0>)
   13ebe:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13ec2:	f006 fde3 	bl	1aa8c <printk>
   13ec6:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13eca:	4630      	mov	r0, r6
   13ecc:	f007 f884 	bl	1afd8 <assert_post_action>
   13ed0:	42ac      	cmp	r4, r5
   13ed2:	d3ea      	bcc.n	13eaa <bt_gatt_init+0x6a>
   13ed4:	e7ca      	b.n	13e6c <bt_gatt_init+0x2c>
   13ed6:	4c0b      	ldr	r4, [pc, #44]	; (13f04 <bt_gatt_init+0xc4>)
   13ed8:	4d0b      	ldr	r5, [pc, #44]	; (13f08 <bt_gatt_init+0xc8>)
   13eda:	4e0c      	ldr	r6, [pc, #48]	; (13f0c <bt_gatt_init+0xcc>)
   13edc:	e7eb      	b.n	13eb6 <bt_gatt_init+0x76>
}
   13ede:	bd70      	pop	{r4, r5, r6, pc}
   13ee0:	20009fac 	.word	0x20009fac
   13ee4:	2000a028 	.word	0x2000a028
   13ee8:	20009348 	.word	0x20009348
   13eec:	0001d2e3 	.word	0x0001d2e3
   13ef0:	20009378 	.word	0x20009378
   13ef4:	200098e0 	.word	0x200098e0
   13ef8:	000144d1 	.word	0x000144d1
   13efc:	2000e2d8 	.word	0x2000e2d8
   13f00:	0001fb49 	.word	0x0001fb49
   13f04:	0001e5e0 	.word	0x0001e5e0
   13f08:	0001e608 	.word	0x0001e608
   13f0c:	00021f84 	.word	0x00021f84

00013f10 <bt_gatt_attr_get_handle>:
{
   13f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13f14:	4604      	mov	r4, r0
   13f16:	b910      	cbnz	r0, 13f1e <bt_gatt_attr_get_handle+0xe>
		return 0;
   13f18:	2000      	movs	r0, #0
}
   13f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13f1e:	8a00      	ldrh	r0, [r0, #16]
   13f20:	2800      	cmp	r0, #0
   13f22:	d1fa      	bne.n	13f1a <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13f24:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13f28:	4d17      	ldr	r5, [pc, #92]	; (13f88 <bt_gatt_attr_get_handle+0x78>)
   13f2a:	4e18      	ldr	r6, [pc, #96]	; (13f8c <bt_gatt_attr_get_handle+0x7c>)
   13f2c:	4f18      	ldr	r7, [pc, #96]	; (13f90 <bt_gatt_attr_get_handle+0x80>)
   13f2e:	42b5      	cmp	r5, r6
   13f30:	d90a      	bls.n	13f48 <bt_gatt_attr_get_handle+0x38>
   13f32:	4639      	mov	r1, r7
   13f34:	4817      	ldr	r0, [pc, #92]	; (13f94 <bt_gatt_attr_get_handle+0x84>)
   13f36:	f240 522d 	movw	r2, #1325	; 0x52d
   13f3a:	f006 fda7 	bl	1aa8c <printk>
   13f3e:	f240 512d 	movw	r1, #1325	; 0x52d
   13f42:	4638      	mov	r0, r7
   13f44:	f007 f848 	bl	1afd8 <assert_post_action>
   13f48:	42b5      	cmp	r5, r6
   13f4a:	d2e5      	bcs.n	13f18 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13f4c:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13f50:	4564      	cmp	r4, ip
   13f52:	d306      	bcc.n	13f62 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13f54:	f04f 0e14 	mov.w	lr, #20
   13f58:	fb0e c301 	mla	r3, lr, r1, ip
   13f5c:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13f5e:	429c      	cmp	r4, r3
   13f60:	d910      	bls.n	13f84 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13f62:	eb08 0001 	add.w	r0, r8, r1
   13f66:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13f68:	4680      	mov	r8, r0
   13f6a:	3508      	adds	r5, #8
   13f6c:	e7df      	b.n	13f2e <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13f6e:	fb0e c302 	mla	r3, lr, r2, ip
   13f72:	429c      	cmp	r4, r3
   13f74:	d0d1      	beq.n	13f1a <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13f76:	3201      	adds	r2, #1
   13f78:	eb08 0302 	add.w	r3, r8, r2
   13f7c:	4291      	cmp	r1, r2
   13f7e:	b298      	uxth	r0, r3
   13f80:	d1f5      	bne.n	13f6e <bt_gatt_attr_get_handle+0x5e>
   13f82:	e7f1      	b.n	13f68 <bt_gatt_attr_get_handle+0x58>
   13f84:	2200      	movs	r2, #0
   13f86:	e7f7      	b.n	13f78 <bt_gatt_attr_get_handle+0x68>
   13f88:	0001e5e0 	.word	0x0001e5e0
   13f8c:	0001e608 	.word	0x0001e608
   13f90:	00021f84 	.word	0x00021f84
   13f94:	0001fb49 	.word	0x0001fb49

00013f98 <bt_gatt_foreach_attr_type>:
{
   13f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f9c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13fa2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13fa6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13fa8:	2d00      	cmp	r5, #0
   13faa:	bf08      	it	eq
   13fac:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13fae:	4b2b      	ldr	r3, [pc, #172]	; (1405c <bt_gatt_foreach_attr_type+0xc4>)
{
   13fb0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13fb2:	881b      	ldrh	r3, [r3, #0]
{
   13fb4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13fb6:	4283      	cmp	r3, r0
   13fb8:	d24b      	bcs.n	14052 <bt_gatt_foreach_attr_type+0xba>
}
   13fba:	b003      	add	sp, #12
   13fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13fc0:	6873      	ldr	r3, [r6, #4]
   13fc2:	4423      	add	r3, r4
   13fc4:	42bb      	cmp	r3, r7
   13fc6:	d241      	bcs.n	1404c <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13fc8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13fca:	3608      	adds	r6, #8
   13fcc:	4b24      	ldr	r3, [pc, #144]	; (14060 <bt_gatt_foreach_attr_type+0xc8>)
   13fce:	429e      	cmp	r6, r3
   13fd0:	d90a      	bls.n	13fe8 <bt_gatt_foreach_attr_type+0x50>
   13fd2:	4659      	mov	r1, fp
   13fd4:	4823      	ldr	r0, [pc, #140]	; (14064 <bt_gatt_foreach_attr_type+0xcc>)
   13fd6:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13fda:	f006 fd57 	bl	1aa8c <printk>
   13fde:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13fe2:	4658      	mov	r0, fp
   13fe4:	f006 fff8 	bl	1afd8 <assert_post_action>
   13fe8:	4b1d      	ldr	r3, [pc, #116]	; (14060 <bt_gatt_foreach_attr_type+0xc8>)
   13fea:	429e      	cmp	r6, r3
   13fec:	d3e8      	bcc.n	13fc0 <bt_gatt_foreach_attr_type+0x28>
   13fee:	e7e4      	b.n	13fba <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13ff0:	4640      	mov	r0, r8
   13ff2:	5889      	ldr	r1, [r1, r2]
   13ff4:	9301      	str	r3, [sp, #4]
   13ff6:	f007 ffe8 	bl	1bfca <bt_uuid_cmp>
   13ffa:	9b01      	ldr	r3, [sp, #4]
   13ffc:	b198      	cbz	r0, 14026 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13ffe:	3401      	adds	r4, #1
   14000:	f10a 0a01 	add.w	sl, sl, #1
   14004:	b2a4      	uxth	r4, r4
   14006:	6873      	ldr	r3, [r6, #4]
   14008:	4553      	cmp	r3, sl
   1400a:	d9de      	bls.n	13fca <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1400c:	9b00      	ldr	r3, [sp, #0]
   1400e:	429c      	cmp	r4, r3
   14010:	d8d3      	bhi.n	13fba <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   14012:	42bc      	cmp	r4, r7
   14014:	d3f3      	bcc.n	13ffe <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14016:	2314      	movs	r3, #20
   14018:	fb03 f20a 	mul.w	r2, r3, sl
   1401c:	6831      	ldr	r1, [r6, #0]
   1401e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   14020:	f1b8 0f00 	cmp.w	r8, #0
   14024:	d1e4      	bne.n	13ff0 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   14026:	f1b9 0f00 	cmp.w	r9, #0
   1402a:	d10b      	bne.n	14044 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   1402c:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1402e:	4618      	mov	r0, r3
	*num_matches -= 1;
   14030:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   14032:	4621      	mov	r1, r4
   14034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14038:	4798      	blx	r3
	if (!*num_matches) {
   1403a:	2d00      	cmp	r5, #0
   1403c:	d0bd      	beq.n	13fba <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1403e:	2800      	cmp	r0, #0
   14040:	d1dd      	bne.n	13ffe <bt_gatt_foreach_attr_type+0x66>
   14042:	e7ba      	b.n	13fba <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   14044:	68da      	ldr	r2, [r3, #12]
   14046:	4591      	cmp	r9, r2
   14048:	d1d9      	bne.n	13ffe <bt_gatt_foreach_attr_type+0x66>
   1404a:	e7ef      	b.n	1402c <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1404c:	f04f 0a00 	mov.w	sl, #0
   14050:	e7d9      	b.n	14006 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   14052:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14054:	4e04      	ldr	r6, [pc, #16]	; (14068 <bt_gatt_foreach_attr_type+0xd0>)
   14056:	f8df b014 	ldr.w	fp, [pc, #20]	; 1406c <bt_gatt_foreach_attr_type+0xd4>
   1405a:	e7b7      	b.n	13fcc <bt_gatt_foreach_attr_type+0x34>
   1405c:	2000e2d8 	.word	0x2000e2d8
   14060:	0001e608 	.word	0x0001e608
   14064:	0001fb49 	.word	0x0001fb49
   14068:	0001e5e0 	.word	0x0001e5e0
   1406c:	00021f84 	.word	0x00021f84

00014070 <db_hash_gen>:
	uint8_t key[16] = {};
   14070:	2300      	movs	r3, #0
{
   14072:	b530      	push	{r4, r5, lr}
   14074:	b0c9      	sub	sp, #292	; 0x124
   14076:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   14078:	4669      	mov	r1, sp
   1407a:	aa1c      	add	r2, sp, #112	; 0x70
   1407c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1407e:	e9cd 3300 	strd	r3, r3, [sp]
   14082:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   14086:	f007 fb54 	bl	1b732 <tc_cmac_setup>
   1408a:	b928      	cbnz	r0, 14098 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   1408c:	2145      	movs	r1, #69	; 0x45
   1408e:	4812      	ldr	r0, [pc, #72]	; (140d8 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   14090:	f006 fcfc 	bl	1aa8c <printk>
}
   14094:	b049      	add	sp, #292	; 0x124
   14096:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   14098:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1409c:	2001      	movs	r0, #1
   1409e:	4a0f      	ldr	r2, [pc, #60]	; (140dc <db_hash_gen+0x6c>)
   140a0:	ab04      	add	r3, sp, #16
   140a2:	f009 f913 	bl	1d2cc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   140a6:	480e      	ldr	r0, [pc, #56]	; (140e0 <db_hash_gen+0x70>)
   140a8:	a904      	add	r1, sp, #16
   140aa:	f007 fbd8 	bl	1b85e <tc_cmac_final>
   140ae:	b910      	cbnz	r0, 140b6 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   140b0:	2145      	movs	r1, #69	; 0x45
   140b2:	480c      	ldr	r0, [pc, #48]	; (140e4 <db_hash_gen+0x74>)
   140b4:	e7ec      	b.n	14090 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   140b6:	2208      	movs	r2, #8
   140b8:	4b09      	ldr	r3, [pc, #36]	; (140e0 <db_hash_gen+0x70>)
   140ba:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   140be:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   140c0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   140c4:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   140c6:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   140ca:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   140cc:	d1f7      	bne.n	140be <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   140ce:	2c00      	cmp	r4, #0
   140d0:	d0e0      	beq.n	14094 <db_hash_gen+0x24>
		db_hash_store();
   140d2:	f7ff f9b3 	bl	1343c <db_hash_store>
   140d6:	e7dd      	b.n	14094 <db_hash_gen+0x24>
   140d8:	00021fb4 	.word	0x00021fb4
   140dc:	0001cdad 	.word	0x0001cdad
   140e0:	2000ea3c 	.word	0x2000ea3c
   140e4:	00021fd2 	.word	0x00021fd2

000140e8 <db_hash_commit>:
{
   140e8:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   140ea:	4821      	ldr	r0, [pc, #132]	; (14170 <db_hash_commit+0x88>)
   140ec:	f005 fdc8 	bl	19c80 <k_delayed_work_cancel>
	if (!err) {
   140f0:	b908      	cbnz	r0, 140f6 <db_hash_commit+0xe>
		db_hash_gen(false);
   140f2:	f7ff ffbd 	bl	14070 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   140f6:	2210      	movs	r2, #16
   140f8:	491e      	ldr	r1, [pc, #120]	; (14174 <db_hash_commit+0x8c>)
   140fa:	481f      	ldr	r0, [pc, #124]	; (14178 <db_hash_commit+0x90>)
   140fc:	f007 fedf 	bl	1bebe <memcmp>
   14100:	b968      	cbnz	r0, 1411e <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   14102:	481e      	ldr	r0, [pc, #120]	; (1417c <db_hash_commit+0x94>)
   14104:	f005 fdbc 	bl	19c80 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14108:	4b1d      	ldr	r3, [pc, #116]	; (14180 <db_hash_commit+0x98>)
   1410a:	e8d3 2fef 	ldaex	r2, [r3]
   1410e:	f022 0201 	bic.w	r2, r2, #1
   14112:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14116:	2900      	cmp	r1, #0
   14118:	d1f7      	bne.n	1410a <db_hash_commit+0x22>
}
   1411a:	2000      	movs	r0, #0
   1411c:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1411e:	4c19      	ldr	r4, [pc, #100]	; (14184 <db_hash_commit+0x9c>)
   14120:	2101      	movs	r1, #1
   14122:	f104 0050 	add.w	r0, r4, #80	; 0x50
   14126:	f008 fee4 	bl	1cef2 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1412a:	07c2      	lsls	r2, r0, #31
   1412c:	d410      	bmi.n	14150 <db_hash_commit+0x68>
		gatt_sc.start = start;
   1412e:	4b16      	ldr	r3, [pc, #88]	; (14188 <db_hash_commit+0xa0>)
   14130:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14132:	4813      	ldr	r0, [pc, #76]	; (14180 <db_hash_commit+0x98>)
   14134:	f008 fee8 	bl	1cf08 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   14138:	0783      	lsls	r3, r0, #30
   1413a:	d406      	bmi.n	1414a <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1413c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14140:	2300      	movs	r3, #0
   14142:	490e      	ldr	r1, [pc, #56]	; (1417c <db_hash_commit+0x94>)
   14144:	4811      	ldr	r0, [pc, #68]	; (1418c <db_hash_commit+0xa4>)
   14146:	f005 fd2b 	bl	19ba0 <k_delayed_work_submit_to_queue>
	db_hash_store();
   1414a:	f7ff f977 	bl	1343c <db_hash_store>
	return 0;
   1414e:	e7e4      	b.n	1411a <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   14150:	8b23      	ldrh	r3, [r4, #24]
   14152:	8b62      	ldrh	r2, [r4, #26]
   14154:	2b01      	cmp	r3, #1
   14156:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1415a:	d805      	bhi.n	14168 <db_hash_commit+0x80>
   1415c:	429a      	cmp	r2, r3
   1415e:	d0f4      	beq.n	1414a <db_hash_commit+0x62>
		*end = new_end;
   14160:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14164:	8363      	strh	r3, [r4, #26]
   14166:	e7e4      	b.n	14132 <db_hash_commit+0x4a>
	if (*end < new_end) {
   14168:	429a      	cmp	r2, r3
		*start = new_start;
   1416a:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1416c:	d0e1      	beq.n	14132 <db_hash_commit+0x4a>
   1416e:	e7f7      	b.n	14160 <db_hash_commit+0x78>
   14170:	20009348 	.word	0x20009348
   14174:	2000ea3c 	.word	0x2000ea3c
   14178:	2000ea4c 	.word	0x2000ea4c
   1417c:	20009398 	.word	0x20009398
   14180:	200093c8 	.word	0x200093c8
   14184:	20009378 	.word	0x20009378
   14188:	ffff0001 	.word	0xffff0001
   1418c:	200098e0 	.word	0x200098e0

00014190 <ccc_set_direct>:
{
   14190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14194:	b0b9      	sub	sp, #228	; 0xe4
   14196:	4688      	mov	r8, r1
   14198:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1419a:	492c      	ldr	r1, [pc, #176]	; (1424c <ccc_set_direct+0xbc>)
   1419c:	466a      	mov	r2, sp
   1419e:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   141a0:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   141a2:	f006 ff55 	bl	1b050 <settings_name_steq>
   141a6:	b948      	cbnz	r0, 141bc <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   141a8:	2145      	movs	r1, #69	; 0x45
   141aa:	4829      	ldr	r0, [pc, #164]	; (14250 <ccc_set_direct+0xc0>)
   141ac:	f006 fc6e 	bl	1aa8c <printk>
   141b0:	f06f 0515 	mvn.w	r5, #21
}
   141b4:	4628      	mov	r0, r5
   141b6:	b039      	add	sp, #228	; 0xe4
   141b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   141bc:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   141be:	a901      	add	r1, sp, #4
   141c0:	4620      	mov	r0, r4
   141c2:	f006 ff68 	bl	1b096 <settings_name_next>
		if (!name) {
   141c6:	b93c      	cbnz	r4, 141d8 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   141c8:	2145      	movs	r1, #69	; 0x45
   141ca:	4822      	ldr	r0, [pc, #136]	; (14254 <ccc_set_direct+0xc4>)
   141cc:	f006 fc5e 	bl	1aa8c <printk>
			return -EINVAL;
   141d0:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   141d4:	4625      	mov	r5, r4
   141d6:	e7ed      	b.n	141b4 <ccc_set_direct+0x24>
		} else if (!next) {
   141d8:	9801      	ldr	r0, [sp, #4]
   141da:	b978      	cbnz	r0, 141fc <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   141dc:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   141e0:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   141e4:	4649      	mov	r1, r9
   141e6:	4620      	mov	r0, r4
   141e8:	f007 fecb 	bl	1bf82 <bt_settings_decode_key>
		if (err) {
   141ec:	4605      	mov	r5, r0
   141ee:	b150      	cbz	r0, 14206 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   141f0:	4622      	mov	r2, r4
   141f2:	2145      	movs	r1, #69	; 0x45
   141f4:	4818      	ldr	r0, [pc, #96]	; (14258 <ccc_set_direct+0xc8>)
   141f6:	f006 fc49 	bl	1aa8c <printk>
   141fa:	e7e9      	b.n	141d0 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   141fc:	220a      	movs	r2, #10
   141fe:	2100      	movs	r1, #0
   14200:	f007 fda0 	bl	1bd44 <strtol>
   14204:	e7ea      	b.n	141dc <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   14206:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1420a:	f1b8 0f00 	cmp.w	r8, #0
   1420e:	d019      	beq.n	14244 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   14210:	f10d 0820 	add.w	r8, sp, #32
   14214:	22c0      	movs	r2, #192	; 0xc0
   14216:	4641      	mov	r1, r8
   14218:	4638      	mov	r0, r7
   1421a:	47b0      	blx	r6
			if (len < 0) {
   1421c:	1e04      	subs	r4, r0, #0
   1421e:	da05      	bge.n	1422c <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   14220:	4622      	mov	r2, r4
   14222:	2145      	movs	r1, #69	; 0x45
   14224:	480d      	ldr	r0, [pc, #52]	; (1425c <ccc_set_direct+0xcc>)
   14226:	f006 fc31 	bl	1aa8c <printk>
				return len;
   1422a:	e7d3      	b.n	141d4 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   1422c:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1422e:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   14232:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   14234:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14238:	2001      	movs	r0, #1
   1423a:	4a09      	ldr	r2, [pc, #36]	; (14260 <ccc_set_direct+0xd0>)
   1423c:	ab04      	add	r3, sp, #16
   1423e:	f009 f845 	bl	1d2cc <bt_gatt_foreach_attr>
	return 0;
   14242:	e7b7      	b.n	141b4 <ccc_set_direct+0x24>
			load.count = 0;
   14244:	e9cd 0006 	strd	r0, r0, [sp, #24]
   14248:	e7f4      	b.n	14234 <ccc_set_direct+0xa4>
   1424a:	bf00      	nop
   1424c:	00021ff0 	.word	0x00021ff0
   14250:	00021ff7 	.word	0x00021ff7
   14254:	00020d68 	.word	0x00020d68
   14258:	00021e5f 	.word	0x00021e5f
   1425c:	00021d71 	.word	0x00021d71
   14260:	00013999 	.word	0x00013999

00014264 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   14264:	2300      	movs	r3, #0
{
   14266:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   14268:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1426a:	f7ff fe51 	bl	13f10 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1426e:	1c41      	adds	r1, r0, #1
   14270:	b289      	uxth	r1, r1
   14272:	4608      	mov	r0, r1
   14274:	4a03      	ldr	r2, [pc, #12]	; (14284 <bt_gatt_attr_next+0x20>)
   14276:	ab01      	add	r3, sp, #4
   14278:	f009 f828 	bl	1d2cc <bt_gatt_foreach_attr>
}
   1427c:	9801      	ldr	r0, [sp, #4]
   1427e:	b003      	add	sp, #12
   14280:	f85d fb04 	ldr.w	pc, [sp], #4
   14284:	0001cd43 	.word	0x0001cd43

00014288 <bt_gatt_notify_cb>:
{
   14288:	b530      	push	{r4, r5, lr}
   1428a:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   1428c:	460d      	mov	r5, r1
{
   1428e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14290:	b951      	cbnz	r1, 142a8 <bt_gatt_notify_cb+0x20>
   14292:	4940      	ldr	r1, [pc, #256]	; (14394 <bt_gatt_notify_cb+0x10c>)
   14294:	4840      	ldr	r0, [pc, #256]	; (14398 <bt_gatt_notify_cb+0x110>)
   14296:	f640 023d 	movw	r2, #2109	; 0x83d
   1429a:	f006 fbf7 	bl	1aa8c <printk>
   1429e:	f640 013d 	movw	r1, #2109	; 0x83d
   142a2:	483c      	ldr	r0, [pc, #240]	; (14394 <bt_gatt_notify_cb+0x10c>)
   142a4:	f006 fe98 	bl	1afd8 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   142a8:	686b      	ldr	r3, [r5, #4]
   142aa:	b953      	cbnz	r3, 142c2 <bt_gatt_notify_cb+0x3a>
   142ac:	4939      	ldr	r1, [pc, #228]	; (14394 <bt_gatt_notify_cb+0x10c>)
   142ae:	483a      	ldr	r0, [pc, #232]	; (14398 <bt_gatt_notify_cb+0x110>)
   142b0:	f640 023e 	movw	r2, #2110	; 0x83e
   142b4:	f006 fbea 	bl	1aa8c <printk>
   142b8:	f640 013e 	movw	r1, #2110	; 0x83e
   142bc:	4835      	ldr	r0, [pc, #212]	; (14394 <bt_gatt_notify_cb+0x10c>)
   142be:	f006 fe8b 	bl	1afd8 <assert_post_action>
   142c2:	4836      	ldr	r0, [pc, #216]	; (1439c <bt_gatt_notify_cb+0x114>)
   142c4:	f008 fe20 	bl	1cf08 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   142c8:	0782      	lsls	r2, r0, #30
   142ca:	d55d      	bpl.n	14388 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   142cc:	6868      	ldr	r0, [r5, #4]
   142ce:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   142d0:	b114      	cbz	r4, 142d8 <bt_gatt_notify_cb+0x50>
   142d2:	7aa3      	ldrb	r3, [r4, #10]
   142d4:	2b07      	cmp	r3, #7
   142d6:	d15a      	bne.n	1438e <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   142d8:	f7ff fe1a 	bl	13f10 <bt_gatt_attr_get_handle>
   142dc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   142e0:	b918      	cbnz	r0, 142ea <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   142e2:	f06f 0001 	mvn.w	r0, #1
}
   142e6:	b00b      	add	sp, #44	; 0x2c
   142e8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   142ea:	682a      	ldr	r2, [r5, #0]
   142ec:	b9aa      	cbnz	r2, 1431a <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   142ee:	9b05      	ldr	r3, [sp, #20]
   142f0:	a904      	add	r1, sp, #16
   142f2:	6818      	ldr	r0, [r3, #0]
   142f4:	2300      	movs	r3, #0
   142f6:	f88d 3010 	strb.w	r3, [sp, #16]
   142fa:	f642 0303 	movw	r3, #10243	; 0x2803
   142fe:	f8ad 3012 	strh.w	r3, [sp, #18]
   14302:	f007 fe62 	bl	1bfca <bt_uuid_cmp>
   14306:	b1c0      	cbz	r0, 1433a <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   14308:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1430c:	b314      	cbz	r4, 14354 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   1430e:	4601      	mov	r1, r0
   14310:	462a      	mov	r2, r5
   14312:	4620      	mov	r0, r4
   14314:	f7ff fbd8 	bl	13ac8 <gatt_notify>
   14318:	e7e5      	b.n	142e6 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1431a:	a905      	add	r1, sp, #20
   1431c:	9102      	str	r1, [sp, #8]
   1431e:	4920      	ldr	r1, [pc, #128]	; (143a0 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   14320:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14322:	9101      	str	r1, [sp, #4]
   14324:	2101      	movs	r1, #1
   14326:	9100      	str	r1, [sp, #0]
   14328:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1432c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1432e:	f7ff fe33 	bl	13f98 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14332:	9b05      	ldr	r3, [sp, #20]
   14334:	2b00      	cmp	r3, #0
   14336:	d1da      	bne.n	142ee <bt_gatt_notify_cb+0x66>
   14338:	e7d3      	b.n	142e2 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1433a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1433c:	68c3      	ldr	r3, [r0, #12]
   1433e:	799b      	ldrb	r3, [r3, #6]
   14340:	06db      	lsls	r3, r3, #27
   14342:	d402      	bmi.n	1434a <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   14344:	f06f 0015 	mvn.w	r0, #21
   14348:	e7cd      	b.n	142e6 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1434a:	f008 ff71 	bl	1d230 <bt_gatt_attr_value_handle>
   1434e:	f8ad 0018 	strh.w	r0, [sp, #24]
   14352:	e7d9      	b.n	14308 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   14354:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14358:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1435c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1435e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14360:	f8ad 2012 	strh.w	r2, [sp, #18]
   14364:	aa05      	add	r2, sp, #20
   14366:	9202      	str	r2, [sp, #8]
   14368:	4a0e      	ldr	r2, [pc, #56]	; (143a4 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   1436a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1436e:	e9cd 3200 	strd	r3, r2, [sp]
   14372:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14376:	4623      	mov	r3, r4
   14378:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1437a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1437c:	f88d 4010 	strb.w	r4, [sp, #16]
   14380:	f7ff fe0a 	bl	13f98 <bt_gatt_foreach_attr_type>
	return data.err;
   14384:	9807      	ldr	r0, [sp, #28]
   14386:	e7ae      	b.n	142e6 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   14388:	f06f 000a 	mvn.w	r0, #10
   1438c:	e7ab      	b.n	142e6 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   1438e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14392:	e7a8      	b.n	142e6 <bt_gatt_notify_cb+0x5e>
   14394:	00021f84 	.word	0x00021f84
   14398:	0001fb49 	.word	0x0001fb49
   1439c:	20008094 	.word	0x20008094
   143a0:	0001cda1 	.word	0x0001cda1
   143a4:	00013b29 	.word	0x00013b29

000143a8 <bt_gatt_indicate>:
{
   143a8:	b530      	push	{r4, r5, lr}
   143aa:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   143ac:	460c      	mov	r4, r1
{
   143ae:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   143b0:	b951      	cbnz	r1, 143c8 <bt_gatt_indicate+0x20>
   143b2:	4942      	ldr	r1, [pc, #264]	; (144bc <bt_gatt_indicate+0x114>)
   143b4:	4842      	ldr	r0, [pc, #264]	; (144c0 <bt_gatt_indicate+0x118>)
   143b6:	f640 0289 	movw	r2, #2185	; 0x889
   143ba:	f006 fb67 	bl	1aa8c <printk>
   143be:	f640 0189 	movw	r1, #2185	; 0x889
   143c2:	483e      	ldr	r0, [pc, #248]	; (144bc <bt_gatt_indicate+0x114>)
   143c4:	f006 fe08 	bl	1afd8 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   143c8:	6863      	ldr	r3, [r4, #4]
   143ca:	b953      	cbnz	r3, 143e2 <bt_gatt_indicate+0x3a>
   143cc:	493b      	ldr	r1, [pc, #236]	; (144bc <bt_gatt_indicate+0x114>)
   143ce:	483c      	ldr	r0, [pc, #240]	; (144c0 <bt_gatt_indicate+0x118>)
   143d0:	f640 028a 	movw	r2, #2186	; 0x88a
   143d4:	f006 fb5a 	bl	1aa8c <printk>
   143d8:	f640 018a 	movw	r1, #2186	; 0x88a
   143dc:	4837      	ldr	r0, [pc, #220]	; (144bc <bt_gatt_indicate+0x114>)
   143de:	f006 fdfb 	bl	1afd8 <assert_post_action>
   143e2:	4838      	ldr	r0, [pc, #224]	; (144c4 <bt_gatt_indicate+0x11c>)
   143e4:	f008 fd90 	bl	1cf08 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   143e8:	0782      	lsls	r2, r0, #30
   143ea:	d561      	bpl.n	144b0 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   143ec:	6860      	ldr	r0, [r4, #4]
   143ee:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   143f0:	b115      	cbz	r5, 143f8 <bt_gatt_indicate+0x50>
   143f2:	7aab      	ldrb	r3, [r5, #10]
   143f4:	2b07      	cmp	r3, #7
   143f6:	d15e      	bne.n	144b6 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   143f8:	f7ff fd8a 	bl	13f10 <bt_gatt_attr_get_handle>
   143fc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14400:	b918      	cbnz	r0, 1440a <bt_gatt_indicate+0x62>
		return -ENOENT;
   14402:	f06f 0001 	mvn.w	r0, #1
}
   14406:	b00b      	add	sp, #44	; 0x2c
   14408:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1440a:	6822      	ldr	r2, [r4, #0]
   1440c:	b9ba      	cbnz	r2, 1443e <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1440e:	9b05      	ldr	r3, [sp, #20]
   14410:	a904      	add	r1, sp, #16
   14412:	6818      	ldr	r0, [r3, #0]
   14414:	2300      	movs	r3, #0
   14416:	f88d 3010 	strb.w	r3, [sp, #16]
   1441a:	f642 0303 	movw	r3, #10243	; 0x2803
   1441e:	f8ad 3012 	strh.w	r3, [sp, #18]
   14422:	f007 fdd2 	bl	1bfca <bt_uuid_cmp>
   14426:	b1d0      	cbz	r0, 1445e <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   14428:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1442c:	b325      	cbz	r5, 14478 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   1442e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14430:	4601      	mov	r1, r0
   14432:	4622      	mov	r2, r4
   14434:	4628      	mov	r0, r5
		params->_ref = 1;
   14436:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   14438:	f7ff fb10 	bl	13a5c <gatt_indicate>
   1443c:	e7e3      	b.n	14406 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1443e:	a905      	add	r1, sp, #20
   14440:	9102      	str	r1, [sp, #8]
   14442:	4921      	ldr	r1, [pc, #132]	; (144c8 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   14444:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14446:	9101      	str	r1, [sp, #4]
   14448:	2101      	movs	r1, #1
   1444a:	9100      	str	r1, [sp, #0]
   1444c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14450:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14452:	f7ff fda1 	bl	13f98 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14456:	9b05      	ldr	r3, [sp, #20]
   14458:	2b00      	cmp	r3, #0
   1445a:	d1d8      	bne.n	1440e <bt_gatt_indicate+0x66>
   1445c:	e7d1      	b.n	14402 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1445e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14460:	68c3      	ldr	r3, [r0, #12]
   14462:	799b      	ldrb	r3, [r3, #6]
   14464:	069b      	lsls	r3, r3, #26
   14466:	d402      	bmi.n	1446e <bt_gatt_indicate+0xc6>
			return -EINVAL;
   14468:	f06f 0015 	mvn.w	r0, #21
   1446c:	e7cb      	b.n	14406 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1446e:	f008 fedf 	bl	1d230 <bt_gatt_attr_value_handle>
   14472:	f8ad 0018 	strh.w	r0, [sp, #24]
   14476:	e7d7      	b.n	14428 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   14478:	f06f 0338 	mvn.w	r3, #56	; 0x38
   1447c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1447e:	2302      	movs	r3, #2
   14480:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14484:	f642 1302 	movw	r3, #10498	; 0x2902
   14488:	f8ad 3012 	strh.w	r3, [sp, #18]
   1448c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1448e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14490:	9302      	str	r3, [sp, #8]
   14492:	4b0e      	ldr	r3, [pc, #56]	; (144cc <bt_gatt_indicate+0x124>)
   14494:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14498:	9301      	str	r3, [sp, #4]
   1449a:	2301      	movs	r3, #1
   1449c:	aa04      	add	r2, sp, #16
   1449e:	9300      	str	r3, [sp, #0]
   144a0:	462b      	mov	r3, r5
	data.ind_params = params;
   144a2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   144a4:	f88d 5010 	strb.w	r5, [sp, #16]
   144a8:	f7ff fd76 	bl	13f98 <bt_gatt_foreach_attr_type>
	return data.err;
   144ac:	9807      	ldr	r0, [sp, #28]
   144ae:	e7aa      	b.n	14406 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   144b0:	f06f 000a 	mvn.w	r0, #10
   144b4:	e7a7      	b.n	14406 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   144b6:	f06f 0038 	mvn.w	r0, #56	; 0x38
   144ba:	e7a4      	b.n	14406 <bt_gatt_indicate+0x5e>
   144bc:	00021f84 	.word	0x00021f84
   144c0:	0001fb49 	.word	0x0001fb49
   144c4:	20008094 	.word	0x20008094
   144c8:	0001cda1 	.word	0x0001cda1
   144cc:	00013b29 	.word	0x00013b29

000144d0 <sc_process>:
{
   144d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   144d2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   144d6:	4604      	mov	r4, r0
   144d8:	4628      	mov	r0, r5
   144da:	f008 fd15 	bl	1cf08 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   144de:	0783      	lsls	r3, r0, #30
   144e0:	d50a      	bpl.n	144f8 <sc_process+0x28>
   144e2:	491b      	ldr	r1, [pc, #108]	; (14550 <sc_process+0x80>)
   144e4:	481b      	ldr	r0, [pc, #108]	; (14554 <sc_process+0x84>)
   144e6:	f240 32ae 	movw	r2, #942	; 0x3ae
   144ea:	f006 facf 	bl	1aa8c <printk>
   144ee:	f240 31ae 	movw	r1, #942	; 0x3ae
   144f2:	4817      	ldr	r0, [pc, #92]	; (14550 <sc_process+0x80>)
   144f4:	f006 fd70 	bl	1afd8 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   144f8:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   144fc:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   14500:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   14504:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14508:	e8d5 3fef 	ldaex	r3, [r5]
   1450c:	f023 0301 	bic.w	r3, r3, #1
   14510:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14514:	2a00      	cmp	r2, #0
   14516:	d1f7      	bne.n	14508 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14518:	4b0f      	ldr	r3, [pc, #60]	; (14558 <sc_process+0x88>)
	sc->start = 0U;
   1451a:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1451c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14520:	4b0e      	ldr	r3, [pc, #56]	; (1455c <sc_process+0x8c>)
	sc->start = 0U;
   14522:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   14526:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1452a:	ab01      	add	r3, sp, #4
   1452c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   14530:	2304      	movs	r3, #4
	sc->end = 0U;
   14532:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   14536:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1453a:	f1a4 0120 	sub.w	r1, r4, #32
   1453e:	f7ff ff33 	bl	143a8 <bt_gatt_indicate>
   14542:	b918      	cbnz	r0, 1454c <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14544:	2102      	movs	r1, #2
   14546:	4628      	mov	r0, r5
   14548:	f008 fcd3 	bl	1cef2 <atomic_or>
}
   1454c:	b003      	add	sp, #12
   1454e:	bd30      	pop	{r4, r5, pc}
   14550:	00021f84 	.word	0x00021f84
   14554:	0001fb49 	.word	0x0001fb49
   14558:	0001eda4 	.word	0x0001eda4
   1455c:	00013df1 	.word	0x00013df1

00014560 <update_ccc>:
{
   14560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14564:	4b32      	ldr	r3, [pc, #200]	; (14630 <update_ccc+0xd0>)
   14566:	6881      	ldr	r1, [r0, #8]
{
   14568:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1456a:	4299      	cmp	r1, r3
   1456c:	d15c      	bne.n	14628 <update_ccc+0xc8>
	ccc = attr->user_data;
   1456e:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   14570:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   14572:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 14634 <update_ccc+0xd4>
   14576:	1c7d      	adds	r5, r7, #1
   14578:	f107 0833 	add.w	r8, r7, #51	; 0x33
		if (!cfg->value ||
   1457c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14580:	b193      	cbz	r3, 145a8 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14582:	462a      	mov	r2, r5
   14584:	4630      	mov	r0, r6
   14586:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1458a:	f007 ff04 	bl	1c396 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1458e:	b158      	cbz	r0, 145a8 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   14590:	222a      	movs	r2, #42	; 0x2a
   14592:	4621      	mov	r1, r4
   14594:	4630      	mov	r0, r6
   14596:	f008 fea7 	bl	1d2e8 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1459a:	2803      	cmp	r0, #3
   1459c:	d108      	bne.n	145b0 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   1459e:	4622      	mov	r2, r4
   145a0:	2157      	movs	r1, #87	; 0x57
   145a2:	4648      	mov	r0, r9
   145a4:	f006 fa72 	bl	1aa8c <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   145a8:	350a      	adds	r5, #10
   145aa:	4545      	cmp	r5, r8
   145ac:	d1e6      	bne.n	1457c <update_ccc+0x1c>
   145ae:	e03b      	b.n	14628 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   145b0:	4639      	mov	r1, r7
   145b2:	4620      	mov	r0, r4
   145b4:	f008 fbc8 	bl	1cd48 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   145b8:	4b1f      	ldr	r3, [pc, #124]	; (14638 <update_ccc+0xd8>)
   145ba:	429f      	cmp	r7, r3
   145bc:	d134      	bne.n	14628 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   145be:	7a30      	ldrb	r0, [r6, #8]
   145c0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   145c4:	f7fe ff72 	bl	134ac <find_sc_cfg>
	if (!cfg) {
   145c8:	4604      	mov	r4, r0
   145ca:	b368      	cbz	r0, 14628 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   145cc:	8902      	ldrh	r2, [r0, #8]
   145ce:	8943      	ldrh	r3, [r0, #10]
   145d0:	ea52 0103 	orrs.w	r1, r2, r3
   145d4:	d028      	beq.n	14628 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   145d6:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   145d8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   145dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   145e0:	f7fd fca6 	bl	11f30 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   145e4:	2318      	movs	r3, #24
   145e6:	4915      	ldr	r1, [pc, #84]	; (1463c <update_ccc+0xdc>)
   145e8:	4a15      	ldr	r2, [pc, #84]	; (14640 <update_ccc+0xe0>)
   145ea:	fb03 1300 	mla	r3, r3, r0, r1
   145ee:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   145f0:	4a14      	ldr	r2, [pc, #80]	; (14644 <update_ccc+0xe4>)
   145f2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   145f4:	aa01      	add	r2, sp, #4
   145f6:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   145f8:	2204      	movs	r2, #4
   145fa:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   145fc:	b203      	sxth	r3, r0
   145fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14602:	4630      	mov	r0, r6
   14604:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   14608:	f7ff fece 	bl	143a8 <bt_gatt_indicate>
   1460c:	b118      	cbz	r0, 14616 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   1460e:	2145      	movs	r1, #69	; 0x45
   14610:	480d      	ldr	r0, [pc, #52]	; (14648 <update_ccc+0xe8>)
   14612:	f006 fa3b 	bl	1aa8c <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   14616:	2204      	movs	r2, #4
   14618:	2100      	movs	r1, #0
   1461a:	f104 0008 	add.w	r0, r4, #8
   1461e:	f007 fc8a 	bl	1bf36 <memset>
		sc_store(cfg);
   14622:	4620      	mov	r0, r4
   14624:	f7ff f84c 	bl	136c0 <sc_store>
}
   14628:	2001      	movs	r0, #1
   1462a:	b003      	add	sp, #12
   1462c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14630:	00013561 	.word	0x00013561
   14634:	00022008 	.word	0x00022008
   14638:	200083a0 	.word	0x200083a0
   1463c:	20009fb0 	.word	0x20009fb0
   14640:	0001eda4 	.word	0x0001eda4
   14644:	0001d1e7 	.word	0x0001d1e7
   14648:	00022021 	.word	0x00022021

0001464c <bt_gatt_is_subscribed>:
{
   1464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1464e:	460c      	mov	r4, r1
   14650:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   14652:	4606      	mov	r6, r0
   14654:	b950      	cbnz	r0, 1466c <bt_gatt_is_subscribed+0x20>
   14656:	4930      	ldr	r1, [pc, #192]	; (14718 <bt_gatt_is_subscribed+0xcc>)
   14658:	4830      	ldr	r0, [pc, #192]	; (1471c <bt_gatt_is_subscribed+0xd0>)
   1465a:	f640 12b5 	movw	r2, #2485	; 0x9b5
   1465e:	f006 fa15 	bl	1aa8c <printk>
   14662:	f640 11b5 	movw	r1, #2485	; 0x9b5
   14666:	482c      	ldr	r0, [pc, #176]	; (14718 <bt_gatt_is_subscribed+0xcc>)
   14668:	f006 fcb6 	bl	1afd8 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1466c:	b954      	cbnz	r4, 14684 <bt_gatt_is_subscribed+0x38>
   1466e:	492a      	ldr	r1, [pc, #168]	; (14718 <bt_gatt_is_subscribed+0xcc>)
   14670:	482a      	ldr	r0, [pc, #168]	; (1471c <bt_gatt_is_subscribed+0xd0>)
   14672:	f640 12b6 	movw	r2, #2486	; 0x9b6
   14676:	f006 fa09 	bl	1aa8c <printk>
   1467a:	f640 11b6 	movw	r1, #2486	; 0x9b6
   1467e:	4826      	ldr	r0, [pc, #152]	; (14718 <bt_gatt_is_subscribed+0xcc>)
   14680:	f006 fcaa 	bl	1afd8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14684:	7ab3      	ldrb	r3, [r6, #10]
   14686:	2b07      	cmp	r3, #7
   14688:	d130      	bne.n	146ec <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1468a:	2300      	movs	r3, #0
   1468c:	f88d 3004 	strb.w	r3, [sp, #4]
   14690:	f642 0303 	movw	r3, #10243	; 0x2803
   14694:	6820      	ldr	r0, [r4, #0]
   14696:	a901      	add	r1, sp, #4
   14698:	f8ad 3006 	strh.w	r3, [sp, #6]
   1469c:	f007 fc95 	bl	1bfca <bt_uuid_cmp>
   146a0:	b940      	cbnz	r0, 146b4 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   146a2:	68e3      	ldr	r3, [r4, #12]
   146a4:	799b      	ldrb	r3, [r3, #6]
   146a6:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   146aa:	d020      	beq.n	146ee <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   146ac:	4620      	mov	r0, r4
   146ae:	f7ff fdd9 	bl	14264 <bt_gatt_attr_next>
   146b2:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   146b4:	2300      	movs	r3, #0
   146b6:	6820      	ldr	r0, [r4, #0]
   146b8:	f88d 3004 	strb.w	r3, [sp, #4]
   146bc:	f642 1302 	movw	r3, #10498	; 0x2902
   146c0:	a901      	add	r1, sp, #4
   146c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   146c6:	f007 fc80 	bl	1bfca <bt_uuid_cmp>
   146ca:	b118      	cbz	r0, 146d4 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   146cc:	4620      	mov	r0, r4
   146ce:	f7ff fdc9 	bl	14264 <bt_gatt_attr_next>
   146d2:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   146d4:	2500      	movs	r5, #0
   146d6:	f642 1302 	movw	r3, #10498	; 0x2902
   146da:	6820      	ldr	r0, [r4, #0]
   146dc:	a901      	add	r1, sp, #4
   146de:	f88d 5004 	strb.w	r5, [sp, #4]
   146e2:	f8ad 3006 	strh.w	r3, [sp, #6]
   146e6:	f007 fc70 	bl	1bfca <bt_uuid_cmp>
   146ea:	b110      	cbz	r0, 146f2 <bt_gatt_is_subscribed+0xa6>
		return false;
   146ec:	2000      	movs	r0, #0
}
   146ee:	b003      	add	sp, #12
   146f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   146f2:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   146f4:	1c6c      	adds	r4, r5, #1
   146f6:	3533      	adds	r5, #51	; 0x33
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   146f8:	4622      	mov	r2, r4
   146fa:	4630      	mov	r0, r6
   146fc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   14700:	f007 fe49 	bl	1c396 <bt_conn_is_peer_addr_le>
   14704:	b118      	cbz	r0, 1470e <bt_gatt_is_subscribed+0xc2>
   14706:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1470a:	421f      	tst	r7, r3
   1470c:	d1ef      	bne.n	146ee <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1470e:	340a      	adds	r4, #10
   14710:	42ac      	cmp	r4, r5
   14712:	d1f1      	bne.n	146f8 <bt_gatt_is_subscribed+0xac>
   14714:	e7ea      	b.n	146ec <bt_gatt_is_subscribed+0xa0>
   14716:	bf00      	nop
   14718:	00021f84 	.word	0x00021f84
   1471c:	0001fb49 	.word	0x0001fb49

00014720 <bt_gatt_discover>:
{
   14720:	b5f0      	push	{r4, r5, r6, r7, lr}
   14722:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14724:	4605      	mov	r5, r0
{
   14726:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   14728:	b950      	cbnz	r0, 14740 <bt_gatt_discover+0x20>
   1472a:	4989      	ldr	r1, [pc, #548]	; (14950 <bt_gatt_discover+0x230>)
   1472c:	4889      	ldr	r0, [pc, #548]	; (14954 <bt_gatt_discover+0x234>)
   1472e:	f640 5277 	movw	r2, #3447	; 0xd77
   14732:	f006 f9ab 	bl	1aa8c <printk>
   14736:	f640 5177 	movw	r1, #3447	; 0xd77
   1473a:	4885      	ldr	r0, [pc, #532]	; (14950 <bt_gatt_discover+0x230>)
   1473c:	f006 fc4c 	bl	1afd8 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14740:	b10c      	cbz	r4, 14746 <bt_gatt_discover+0x26>
   14742:	6863      	ldr	r3, [r4, #4]
   14744:	b953      	cbnz	r3, 1475c <bt_gatt_discover+0x3c>
   14746:	4982      	ldr	r1, [pc, #520]	; (14950 <bt_gatt_discover+0x230>)
   14748:	4882      	ldr	r0, [pc, #520]	; (14954 <bt_gatt_discover+0x234>)
   1474a:	f640 5278 	movw	r2, #3448	; 0xd78
   1474e:	f006 f99d 	bl	1aa8c <printk>
   14752:	f640 5178 	movw	r1, #3448	; 0xd78
   14756:	487e      	ldr	r0, [pc, #504]	; (14950 <bt_gatt_discover+0x230>)
   14758:	f006 fc3e 	bl	1afd8 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   1475c:	8923      	ldrh	r3, [r4, #8]
   1475e:	b10b      	cbz	r3, 14764 <bt_gatt_discover+0x44>
   14760:	89e3      	ldrh	r3, [r4, #14]
   14762:	b953      	cbnz	r3, 1477a <bt_gatt_discover+0x5a>
   14764:	497a      	ldr	r1, [pc, #488]	; (14950 <bt_gatt_discover+0x230>)
   14766:	487b      	ldr	r0, [pc, #492]	; (14954 <bt_gatt_discover+0x234>)
   14768:	f640 5279 	movw	r2, #3449	; 0xd79
   1476c:	f006 f98e 	bl	1aa8c <printk>
   14770:	f640 5179 	movw	r1, #3449	; 0xd79
   14774:	4876      	ldr	r0, [pc, #472]	; (14950 <bt_gatt_discover+0x230>)
   14776:	f006 fc2f 	bl	1afd8 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1477a:	8922      	ldrh	r2, [r4, #8]
   1477c:	89e3      	ldrh	r3, [r4, #14]
   1477e:	429a      	cmp	r2, r3
   14780:	d90a      	bls.n	14798 <bt_gatt_discover+0x78>
   14782:	4973      	ldr	r1, [pc, #460]	; (14950 <bt_gatt_discover+0x230>)
   14784:	4873      	ldr	r0, [pc, #460]	; (14954 <bt_gatt_discover+0x234>)
   14786:	f640 527b 	movw	r2, #3451	; 0xd7b
   1478a:	f006 f97f 	bl	1aa8c <printk>
   1478e:	f640 517b 	movw	r1, #3451	; 0xd7b
   14792:	486f      	ldr	r0, [pc, #444]	; (14950 <bt_gatt_discover+0x230>)
   14794:	f006 fc20 	bl	1afd8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14798:	7aab      	ldrb	r3, [r5, #10]
   1479a:	2b07      	cmp	r3, #7
   1479c:	f040 80d5 	bne.w	1494a <bt_gatt_discover+0x22a>
	switch (params->type) {
   147a0:	7c22      	ldrb	r2, [r4, #16]
   147a2:	2a05      	cmp	r2, #5
   147a4:	f200 80cc 	bhi.w	14940 <bt_gatt_discover+0x220>
   147a8:	e8df f002 	tbb	[pc, r2]
   147ac:	64640303 	.word	0x64640303
   147b0:	b683      	.short	0xb683
		if (params->uuid) {
   147b2:	6823      	ldr	r3, [r4, #0]
   147b4:	2b00      	cmp	r3, #0
   147b6:	d03e      	beq.n	14836 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   147b8:	2206      	movs	r2, #6
   147ba:	4628      	mov	r0, r5
   147bc:	4611      	mov	r1, r2
   147be:	f7fe fa0f 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   147c2:	4606      	mov	r6, r0
   147c4:	b918      	cbnz	r0, 147ce <bt_gatt_discover+0xae>
		return -ENOMEM;
   147c6:	f06f 000b 	mvn.w	r0, #11
}
   147ca:	b005      	add	sp, #20
   147cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   147ce:	f100 0708 	add.w	r7, r0, #8
   147d2:	2106      	movs	r1, #6
   147d4:	4638      	mov	r0, r7
   147d6:	f001 f9f9 	bl	15bcc <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   147da:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   147dc:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   147de:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   147e0:	89e3      	ldrh	r3, [r4, #14]
   147e2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   147e4:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   147e6:	2b00      	cmp	r3, #0
   147e8:	f642 0301 	movw	r3, #10241	; 0x2801
   147ec:	bf08      	it	eq
   147ee:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   147f2:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   147f4:	780a      	ldrb	r2, [r1, #0]
   147f6:	b15a      	cbz	r2, 14810 <bt_gatt_discover+0xf0>
   147f8:	2a02      	cmp	r2, #2
   147fa:	d016      	beq.n	1482a <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   147fc:	4856      	ldr	r0, [pc, #344]	; (14958 <bt_gatt_discover+0x238>)
   147fe:	2145      	movs	r1, #69	; 0x45
   14800:	f006 f944 	bl	1aa8c <printk>
		net_buf_unref(buf);
   14804:	4630      	mov	r0, r6
   14806:	f001 f8cb 	bl	159a0 <net_buf_unref>
	return -EINVAL;
   1480a:	f06f 0015 	mvn.w	r0, #21
   1480e:	e7dc      	b.n	147ca <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   14810:	4638      	mov	r0, r7
   14812:	8849      	ldrh	r1, [r1, #2]
   14814:	f008 feb6 	bl	1d584 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   14818:	4623      	mov	r3, r4
   1481a:	4a50      	ldr	r2, [pc, #320]	; (1495c <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1481c:	4631      	mov	r1, r6
   1481e:	4628      	mov	r0, r5
}
   14820:	b005      	add	sp, #20
   14822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14826:	f7ff b813 	b.w	13850 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1482a:	2210      	movs	r2, #16
   1482c:	4638      	mov	r0, r7
   1482e:	3101      	adds	r1, #1
   14830:	f008 fe95 	bl	1d55e <net_buf_simple_add_mem>
   14834:	e7f0      	b.n	14818 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   14836:	2204      	movs	r2, #4
   14838:	2110      	movs	r1, #16
   1483a:	4628      	mov	r0, r5
   1483c:	f7fe f9d0 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14840:	4606      	mov	r6, r0
   14842:	2800      	cmp	r0, #0
   14844:	d0bf      	beq.n	147c6 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14846:	f100 0708 	add.w	r7, r0, #8
   1484a:	2104      	movs	r1, #4
   1484c:	4638      	mov	r0, r7
   1484e:	f001 f9bd 	bl	15bcc <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14852:	8923      	ldrh	r3, [r4, #8]
   14854:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14856:	89e3      	ldrh	r3, [r4, #14]
   14858:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1485a:	7c23      	ldrb	r3, [r4, #16]
   1485c:	b93b      	cbnz	r3, 1486e <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   1485e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   14862:	4638      	mov	r0, r7
   14864:	f008 fe8e 	bl	1d584 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   14868:	4623      	mov	r3, r4
   1486a:	4a3d      	ldr	r2, [pc, #244]	; (14960 <bt_gatt_discover+0x240>)
   1486c:	e7d6      	b.n	1481c <bt_gatt_discover+0xfc>
   1486e:	f642 0101 	movw	r1, #10241	; 0x2801
   14872:	e7f6      	b.n	14862 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14874:	2204      	movs	r2, #4
   14876:	2108      	movs	r1, #8
   14878:	4628      	mov	r0, r5
   1487a:	f7fe f9b1 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   1487e:	4606      	mov	r6, r0
   14880:	2800      	cmp	r0, #0
   14882:	d0a0      	beq.n	147c6 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14884:	f100 0708 	add.w	r7, r0, #8
   14888:	2104      	movs	r1, #4
   1488a:	4638      	mov	r0, r7
   1488c:	f001 f99e 	bl	15bcc <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14890:	8923      	ldrh	r3, [r4, #8]
   14892:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14894:	89e3      	ldrh	r3, [r4, #14]
   14896:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14898:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   1489a:	4638      	mov	r0, r7
   1489c:	2b02      	cmp	r3, #2
   1489e:	bf0c      	ite	eq
   148a0:	f642 0102 	movweq	r1, #10242	; 0x2802
   148a4:	f642 0103 	movwne	r1, #10243	; 0x2803
   148a8:	f008 fe6c 	bl	1d584 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   148ac:	4623      	mov	r3, r4
   148ae:	4a2d      	ldr	r2, [pc, #180]	; (14964 <bt_gatt_discover+0x244>)
   148b0:	e7b4      	b.n	1481c <bt_gatt_discover+0xfc>
		if (params->uuid &&
   148b2:	6820      	ldr	r0, [r4, #0]
   148b4:	b380      	cbz	r0, 14918 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   148b6:	2600      	movs	r6, #0
   148b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   148bc:	4669      	mov	r1, sp
   148be:	f88d 6000 	strb.w	r6, [sp]
   148c2:	f8ad 3002 	strh.w	r3, [sp, #2]
   148c6:	f007 fb80 	bl	1bfca <bt_uuid_cmp>
		if (params->uuid &&
   148ca:	2800      	cmp	r0, #0
   148cc:	d09d      	beq.n	1480a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   148ce:	f642 0301 	movw	r3, #10241	; 0x2801
   148d2:	6820      	ldr	r0, [r4, #0]
   148d4:	a901      	add	r1, sp, #4
   148d6:	f88d 6004 	strb.w	r6, [sp, #4]
   148da:	f8ad 3006 	strh.w	r3, [sp, #6]
   148de:	f007 fb74 	bl	1bfca <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   148e2:	2800      	cmp	r0, #0
   148e4:	d091      	beq.n	1480a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   148e6:	f642 0302 	movw	r3, #10242	; 0x2802
   148ea:	6820      	ldr	r0, [r4, #0]
   148ec:	a902      	add	r1, sp, #8
   148ee:	f88d 6008 	strb.w	r6, [sp, #8]
   148f2:	f8ad 300a 	strh.w	r3, [sp, #10]
   148f6:	f007 fb68 	bl	1bfca <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   148fa:	2800      	cmp	r0, #0
   148fc:	d085      	beq.n	1480a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   148fe:	f642 0303 	movw	r3, #10243	; 0x2803
   14902:	6820      	ldr	r0, [r4, #0]
   14904:	a903      	add	r1, sp, #12
   14906:	f88d 600c 	strb.w	r6, [sp, #12]
   1490a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1490e:	f007 fb5c 	bl	1bfca <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   14912:	2800      	cmp	r0, #0
   14914:	f43f af79 	beq.w	1480a <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   14918:	2204      	movs	r2, #4
   1491a:	4628      	mov	r0, r5
   1491c:	4611      	mov	r1, r2
   1491e:	f7fe f95f 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14922:	4606      	mov	r6, r0
   14924:	2800      	cmp	r0, #0
   14926:	f43f af4e 	beq.w	147c6 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1492a:	2104      	movs	r1, #4
   1492c:	3008      	adds	r0, #8
   1492e:	f001 f94d 	bl	15bcc <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14932:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14934:	4a0c      	ldr	r2, [pc, #48]	; (14968 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14936:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14938:	89e3      	ldrh	r3, [r4, #14]
   1493a:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1493c:	4623      	mov	r3, r4
   1493e:	e76d      	b.n	1481c <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14940:	2145      	movs	r1, #69	; 0x45
   14942:	480a      	ldr	r0, [pc, #40]	; (1496c <bt_gatt_discover+0x24c>)
   14944:	f006 f8a2 	bl	1aa8c <printk>
   14948:	e75f      	b.n	1480a <bt_gatt_discover+0xea>
		return -ENOTCONN;
   1494a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1494e:	e73c      	b.n	147ca <bt_gatt_discover+0xaa>
   14950:	00021f84 	.word	0x00021f84
   14954:	0001fb49 	.word	0x0001fb49
   14958:	00022043 	.word	0x00022043
   1495c:	0001d369 	.word	0x0001d369
   14960:	00014971 	.word	0x00014971
   14964:	00014a79 	.word	0x00014a79
   14968:	00014d29 	.word	0x00014d29
   1496c:	0002205d 	.word	0x0002205d

00014970 <gatt_read_group_rsp>:
{
   14970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14974:	b08f      	sub	sp, #60	; 0x3c
   14976:	4681      	mov	r9, r0
   14978:	4617      	mov	r7, r2
   1497a:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   1497c:	b131      	cbz	r1, 1498c <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   1497e:	462a      	mov	r2, r5
   14980:	2100      	movs	r1, #0
   14982:	686b      	ldr	r3, [r5, #4]
}
   14984:	b00f      	add	sp, #60	; 0x3c
   14986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1498a:	4718      	bx	r3
	switch (rsp->len) {
   1498c:	7812      	ldrb	r2, [r2, #0]
   1498e:	2a06      	cmp	r2, #6
   14990:	d00d      	beq.n	149ae <gatt_read_group_rsp+0x3e>
   14992:	2a14      	cmp	r2, #20
   14994:	d021      	beq.n	149da <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   14996:	2145      	movs	r1, #69	; 0x45
   14998:	4836      	ldr	r0, [pc, #216]	; (14a74 <gatt_read_group_rsp+0x104>)
   1499a:	f006 f877 	bl	1aa8c <printk>
	params->func(conn, NULL, params);
   1499e:	462a      	mov	r2, r5
   149a0:	2100      	movs	r1, #0
   149a2:	4648      	mov	r0, r9
   149a4:	686b      	ldr	r3, [r5, #4]
   149a6:	4798      	blx	r3
}
   149a8:	b00f      	add	sp, #60	; 0x3c
   149aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   149ae:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   149b2:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   149b4:	3b01      	subs	r3, #1
   149b6:	b29c      	uxth	r4, r3
   149b8:	f107 0801 	add.w	r8, r7, #1
   149bc:	783b      	ldrb	r3, [r7, #0]
   149be:	42a3      	cmp	r3, r4
   149c0:	d90f      	bls.n	149e2 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   149c2:	2c00      	cmp	r4, #0
   149c4:	d1eb      	bne.n	1499e <gatt_read_group_rsp+0x2e>
   149c6:	2e00      	cmp	r6, #0
   149c8:	d0e9      	beq.n	1499e <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   149ca:	462a      	mov	r2, r5
   149cc:	4631      	mov	r1, r6
   149ce:	4648      	mov	r0, r9
}
   149d0:	b00f      	add	sp, #60	; 0x3c
   149d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   149d6:	f008 bcaa 	b.w	1d32e <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   149da:	2202      	movs	r2, #2
   149dc:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   149e0:	e7e7      	b.n	149b2 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   149e2:	2214      	movs	r2, #20
   149e4:	2100      	movs	r1, #0
   149e6:	a809      	add	r0, sp, #36	; 0x24
   149e8:	f007 faa5 	bl	1bf36 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   149ec:	f8b8 a000 	ldrh.w	sl, [r8]
   149f0:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   149f4:	2b00      	cmp	r3, #0
   149f6:	d0d2      	beq.n	1499e <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   149f8:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   149fc:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   14a00:	2e00      	cmp	r6, #0
   14a02:	d0cc      	beq.n	1499e <gatt_read_group_rsp+0x2e>
   14a04:	42b3      	cmp	r3, r6
   14a06:	d8ca      	bhi.n	1499e <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   14a08:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14a0c:	b323      	cbz	r3, 14a58 <gatt_read_group_rsp+0xe8>
   14a0e:	2b02      	cmp	r3, #2
   14a10:	d02a      	beq.n	14a68 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   14a12:	f04f 0300 	mov.w	r3, #0
   14a16:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14a1a:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a1c:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   14a1e:	2b00      	cmp	r3, #0
   14a20:	f642 0301 	movw	r3, #10241	; 0x2801
   14a24:	bf08      	it	eq
   14a26:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14a2a:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   14a2e:	ab04      	add	r3, sp, #16
   14a30:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14a32:	ab01      	add	r3, sp, #4
   14a34:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   14a36:	ab02      	add	r3, sp, #8
   14a38:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a3a:	4648      	mov	r0, r9
   14a3c:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   14a3e:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   14a42:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a46:	a909      	add	r1, sp, #36	; 0x24
   14a48:	4798      	blx	r3
   14a4a:	2800      	cmp	r0, #0
   14a4c:	d0ac      	beq.n	149a8 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14a4e:	783a      	ldrb	r2, [r7, #0]
   14a50:	1aa4      	subs	r4, r4, r2
   14a52:	b2a4      	uxth	r4, r4
   14a54:	4490      	add	r8, r2
   14a56:	e7b1      	b.n	149bc <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   14a58:	2202      	movs	r2, #2
   14a5a:	f108 0104 	add.w	r1, r8, #4
   14a5e:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14a62:	f007 fa3d 	bl	1bee0 <memcpy>
			break;
   14a66:	e7d4      	b.n	14a12 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14a68:	2210      	movs	r2, #16
   14a6a:	f108 0104 	add.w	r1, r8, #4
   14a6e:	f10d 0011 	add.w	r0, sp, #17
   14a72:	e7f6      	b.n	14a62 <gatt_read_group_rsp+0xf2>
   14a74:	0002207d 	.word	0x0002207d

00014a78 <gatt_read_type_rsp>:
{
   14a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a7c:	b091      	sub	sp, #68	; 0x44
   14a7e:	4607      	mov	r7, r0
   14a80:	4690      	mov	r8, r2
   14a82:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   14a84:	b131      	cbz	r1, 14a94 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   14a86:	462a      	mov	r2, r5
   14a88:	2100      	movs	r1, #0
   14a8a:	686b      	ldr	r3, [r5, #4]
}
   14a8c:	b011      	add	sp, #68	; 0x44
   14a8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14a92:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14a94:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   14a96:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14a98:	2802      	cmp	r0, #2
   14a9a:	f040 8089 	bne.w	14bb0 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   14a9e:	2a06      	cmp	r2, #6
   14aa0:	d01c      	beq.n	14adc <gatt_read_type_rsp+0x64>
   14aa2:	2a08      	cmp	r2, #8
   14aa4:	f040 8088 	bne.w	14bb8 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   14aa8:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14aac:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14aae:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14ab0:	1e5c      	subs	r4, r3, #1
   14ab2:	b2a4      	uxth	r4, r4
   14ab4:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14ab8:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   14abc:	f898 3000 	ldrb.w	r3, [r8]
   14ac0:	42a3      	cmp	r3, r4
   14ac2:	d90e      	bls.n	14ae2 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   14ac4:	2c00      	cmp	r4, #0
   14ac6:	d17b      	bne.n	14bc0 <gatt_read_type_rsp+0x148>
   14ac8:	2e00      	cmp	r6, #0
   14aca:	d079      	beq.n	14bc0 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   14acc:	462a      	mov	r2, r5
   14ace:	4631      	mov	r1, r6
   14ad0:	4638      	mov	r0, r7
}
   14ad2:	b011      	add	sp, #68	; 0x44
   14ad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14ad8:	f008 bc29 	b.w	1d32e <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14adc:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   14ae0:	e7e4      	b.n	14aac <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   14ae2:	f8b9 3000 	ldrh.w	r3, [r9]
   14ae6:	b29e      	uxth	r6, r3
		if (!handle) {
   14ae8:	2e00      	cmp	r6, #0
   14aea:	d069      	beq.n	14bc0 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   14aec:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   14af0:	f8ad 2014 	strh.w	r2, [sp, #20]
   14af4:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   14af6:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   14afa:	b291      	uxth	r1, r2
   14afc:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   14b00:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14b04:	b182      	cbz	r2, 14b28 <gatt_read_type_rsp+0xb0>
   14b06:	2a02      	cmp	r2, #2
   14b08:	d019      	beq.n	14b3e <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14b0a:	6829      	ldr	r1, [r5, #0]
   14b0c:	2900      	cmp	r1, #0
   14b0e:	d036      	beq.n	14b7e <gatt_read_type_rsp+0x106>
   14b10:	4650      	mov	r0, sl
   14b12:	9301      	str	r3, [sp, #4]
   14b14:	f007 fa59 	bl	1bfca <bt_uuid_cmp>
   14b18:	9b01      	ldr	r3, [sp, #4]
   14b1a:	b380      	cbz	r0, 14b7e <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14b1c:	f898 2000 	ldrb.w	r2, [r8]
   14b20:	1aa4      	subs	r4, r4, r2
   14b22:	b2a4      	uxth	r4, r4
   14b24:	4491      	add	r9, r2
   14b26:	e7c9      	b.n	14abc <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14b28:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14b2c:	f899 2006 	ldrb.w	r2, [r9, #6]
   14b30:	f899 1007 	ldrb.w	r1, [r9, #7]
   14b34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14b38:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14b3c:	e7e5      	b.n	14b0a <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14b3e:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14b40:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14b42:	4638      	mov	r0, r7
   14b44:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   14b46:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14b48:	9201      	str	r2, [sp, #4]
   14b4a:	f7fe f849 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14b4e:	4604      	mov	r4, r0
   14b50:	b190      	cbz	r0, 14b78 <gatt_read_type_rsp+0x100>
   14b52:	9a01      	ldr	r2, [sp, #4]
   14b54:	3008      	adds	r0, #8
   14b56:	4611      	mov	r1, r2
   14b58:	f001 f838 	bl	15bcc <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14b5c:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14b5e:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14b60:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14b62:	4a49      	ldr	r2, [pc, #292]	; (14c88 <gatt_read_type_rsp+0x210>)
   14b64:	462b      	mov	r3, r5
   14b66:	4638      	mov	r0, r7
   14b68:	f7fe fe72 	bl	13850 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14b6c:	b286      	uxth	r6, r0
	if (!handle) {
   14b6e:	2e00      	cmp	r6, #0
   14b70:	d1ac      	bne.n	14acc <gatt_read_type_rsp+0x54>
}
   14b72:	b011      	add	sp, #68	; 0x44
   14b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14b78:	f06f 000b 	mvn.w	r0, #11
   14b7c:	e7f6      	b.n	14b6c <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14b7e:	f642 0202 	movw	r2, #10242	; 0x2802
   14b82:	f8ad 200e 	strh.w	r2, [sp, #14]
   14b86:	aa03      	add	r2, sp, #12
   14b88:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14b8c:	aa04      	add	r2, sp, #16
   14b8e:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14b90:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14b94:	462a      	mov	r2, r5
   14b96:	4638      	mov	r0, r7
   14b98:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14b9a:	f88d b00c 	strb.w	fp, [sp, #12]
   14b9e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14ba2:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ba6:	a90b      	add	r1, sp, #44	; 0x2c
   14ba8:	4798      	blx	r3
   14baa:	2800      	cmp	r0, #0
   14bac:	d1b6      	bne.n	14b1c <gatt_read_type_rsp+0xa4>
   14bae:	e7e0      	b.n	14b72 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14bb0:	2a07      	cmp	r2, #7
   14bb2:	d00b      	beq.n	14bcc <gatt_read_type_rsp+0x154>
   14bb4:	2a15      	cmp	r2, #21
   14bb6:	d02e      	beq.n	14c16 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14bb8:	2145      	movs	r1, #69	; 0x45
   14bba:	4834      	ldr	r0, [pc, #208]	; (14c8c <gatt_read_type_rsp+0x214>)
   14bbc:	f005 ff66 	bl	1aa8c <printk>
	params->func(conn, NULL, params);
   14bc0:	462a      	mov	r2, r5
   14bc2:	2100      	movs	r1, #0
   14bc4:	4638      	mov	r0, r7
   14bc6:	686b      	ldr	r3, [r5, #4]
   14bc8:	4798      	blx	r3
	if (!handle) {
   14bca:	e7d2      	b.n	14b72 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   14bcc:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14bd0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14bd2:	1e5c      	subs	r4, r3, #1
   14bd4:	b2a4      	uxth	r4, r4
   14bd6:	f108 0901 	add.w	r9, r8, #1
   14bda:	f10d 0a18 	add.w	sl, sp, #24
   14bde:	f898 3000 	ldrb.w	r3, [r8]
   14be2:	42a3      	cmp	r3, r4
   14be4:	f63f af6e 	bhi.w	14ac4 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   14be8:	f8b9 b000 	ldrh.w	fp, [r9]
   14bec:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   14bf0:	2e00      	cmp	r6, #0
   14bf2:	d0e5      	beq.n	14bc0 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   14bf4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14bf8:	b18b      	cbz	r3, 14c1e <gatt_read_type_rsp+0x1a6>
   14bfa:	2b02      	cmp	r3, #2
   14bfc:	d018      	beq.n	14c30 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14bfe:	6829      	ldr	r1, [r5, #0]
   14c00:	b1f1      	cbz	r1, 14c40 <gatt_read_type_rsp+0x1c8>
   14c02:	4650      	mov	r0, sl
   14c04:	f007 f9e1 	bl	1bfca <bt_uuid_cmp>
   14c08:	b1d0      	cbz	r0, 14c40 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14c0a:	f898 2000 	ldrb.w	r2, [r8]
   14c0e:	1aa4      	subs	r4, r4, r2
   14c10:	b2a4      	uxth	r4, r4
   14c12:	4491      	add	r9, r2
   14c14:	e7e3      	b.n	14bde <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   14c16:	2202      	movs	r2, #2
   14c18:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14c1c:	e7d8      	b.n	14bd0 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14c1e:	f899 3005 	ldrb.w	r3, [r9, #5]
   14c22:	f899 2006 	ldrb.w	r2, [r9, #6]
   14c26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14c2a:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14c2e:	e7e6      	b.n	14bfe <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14c30:	2210      	movs	r2, #16
   14c32:	f109 0105 	add.w	r1, r9, #5
   14c36:	f10d 0019 	add.w	r0, sp, #25
   14c3a:	f007 f951 	bl	1bee0 <memcpy>
			break;
   14c3e:	e7de      	b.n	14bfe <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14c40:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14c44:	f899 3002 	ldrb.w	r3, [r9, #2]
   14c48:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c4c:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14c50:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c54:	2300      	movs	r3, #0
   14c56:	f8ad 200e 	strh.w	r2, [sp, #14]
   14c5a:	aa03      	add	r2, sp, #12
   14c5c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14c60:	aa04      	add	r2, sp, #16
   14c62:	f88d 300c 	strb.w	r3, [sp, #12]
   14c66:	930d      	str	r3, [sp, #52]	; 0x34
   14c68:	920e      	str	r2, [sp, #56]	; 0x38
   14c6a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c6e:	462a      	mov	r2, r5
   14c70:	4638      	mov	r0, r7
   14c72:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14c74:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14c78:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c7c:	a90b      	add	r1, sp, #44	; 0x2c
   14c7e:	4798      	blx	r3
   14c80:	2800      	cmp	r0, #0
   14c82:	d1c2      	bne.n	14c0a <gatt_read_type_rsp+0x192>
   14c84:	e775      	b.n	14b72 <gatt_read_type_rsp+0xfa>
   14c86:	bf00      	nop
   14c88:	00014c91 	.word	0x00014c91
   14c8c:	0002207d 	.word	0x0002207d

00014c90 <read_included_uuid_cb>:
{
   14c90:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14c92:	2b10      	cmp	r3, #16
{
   14c94:	b08e      	sub	sp, #56	; 0x38
   14c96:	4611      	mov	r1, r2
   14c98:	4605      	mov	r5, r0
   14c9a:	461a      	mov	r2, r3
   14c9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14c9e:	d00b      	beq.n	14cb8 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14ca0:	2145      	movs	r1, #69	; 0x45
   14ca2:	4820      	ldr	r0, [pc, #128]	; (14d24 <read_included_uuid_cb+0x94>)
   14ca4:	f005 fef2 	bl	1aa8c <printk>
		params->func(conn, NULL, params);
   14ca8:	4622      	mov	r2, r4
   14caa:	2100      	movs	r1, #0
   14cac:	4628      	mov	r0, r5
   14cae:	6863      	ldr	r3, [r4, #4]
}
   14cb0:	b00e      	add	sp, #56	; 0x38
   14cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14cb6:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14cb8:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14cba:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14cbc:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14cc0:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14cc2:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14cc6:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14cca:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14ccc:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14cce:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14cd2:	f007 f905 	bl	1bee0 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14cd6:	6821      	ldr	r1, [r4, #0]
   14cd8:	b9c9      	cbnz	r1, 14d0e <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14cda:	f642 0202 	movw	r2, #10242	; 0x2802
   14cde:	2300      	movs	r3, #0
   14ce0:	f8ad 2006 	strh.w	r2, [sp, #6]
   14ce4:	aa01      	add	r2, sp, #4
   14ce6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14cea:	f88d 3004 	strb.w	r3, [sp, #4]
   14cee:	930b      	str	r3, [sp, #44]	; 0x2c
   14cf0:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14cf4:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14cf6:	aa02      	add	r2, sp, #8
   14cf8:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14cfa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14cfe:	4622      	mov	r2, r4
   14d00:	4628      	mov	r0, r5
   14d02:	6863      	ldr	r3, [r4, #4]
   14d04:	a909      	add	r1, sp, #36	; 0x24
   14d06:	4798      	blx	r3
   14d08:	b930      	cbnz	r0, 14d18 <read_included_uuid_cb+0x88>
}
   14d0a:	b00e      	add	sp, #56	; 0x38
   14d0c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14d0e:	4630      	mov	r0, r6
   14d10:	f007 f95b 	bl	1bfca <bt_uuid_cmp>
   14d14:	2800      	cmp	r0, #0
   14d16:	d0e0      	beq.n	14cda <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14d18:	4622      	mov	r2, r4
   14d1a:	4628      	mov	r0, r5
   14d1c:	8921      	ldrh	r1, [r4, #8]
   14d1e:	f008 fb06 	bl	1d32e <gatt_discover_next>
	return;
   14d22:	e7f2      	b.n	14d0a <read_included_uuid_cb+0x7a>
   14d24:	0002207d 	.word	0x0002207d

00014d28 <gatt_find_info_rsp>:
{
   14d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d2c:	b08f      	sub	sp, #60	; 0x3c
   14d2e:	4680      	mov	r8, r0
   14d30:	4614      	mov	r4, r2
   14d32:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14d34:	b941      	cbnz	r1, 14d48 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14d36:	7812      	ldrb	r2, [r2, #0]
   14d38:	2a01      	cmp	r2, #1
   14d3a:	d00b      	beq.n	14d54 <gatt_find_info_rsp+0x2c>
   14d3c:	2a02      	cmp	r2, #2
   14d3e:	d022      	beq.n	14d86 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14d40:	2145      	movs	r1, #69	; 0x45
   14d42:	484b      	ldr	r0, [pc, #300]	; (14e70 <gatt_find_info_rsp+0x148>)
   14d44:	f005 fea2 	bl	1aa8c <printk>
	params->func(conn, NULL, params);
   14d48:	4632      	mov	r2, r6
   14d4a:	2100      	movs	r1, #0
   14d4c:	4640      	mov	r0, r8
   14d4e:	6873      	ldr	r3, [r6, #4]
   14d50:	4798      	blx	r3
   14d52:	e08a      	b.n	14e6a <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14d54:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14d58:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14d5c:	3b01      	subs	r3, #1
   14d5e:	b29b      	uxth	r3, r3
	if (length < len) {
   14d60:	4553      	cmp	r3, sl
   14d62:	d3f1      	bcc.n	14d48 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14d64:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14d68:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14d6c:	46cb      	mov	fp, r9
			skip = false;
   14d6e:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14d70:	9300      	str	r3, [sp, #0]
   14d72:	3401      	adds	r4, #1
   14d74:	af04      	add	r7, sp, #16
   14d76:	9b00      	ldr	r3, [sp, #0]
   14d78:	b953      	cbnz	r3, 14d90 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14d7a:	4632      	mov	r2, r6
   14d7c:	4659      	mov	r1, fp
   14d7e:	4640      	mov	r0, r8
   14d80:	f008 fad5 	bl	1d32e <gatt_discover_next>
	return;
   14d84:	e071      	b.n	14e6a <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14d86:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14d8a:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14d8e:	e7e5      	b.n	14d5c <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14d90:	8823      	ldrh	r3, [r4, #0]
   14d92:	9301      	str	r3, [sp, #4]
   14d94:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14d98:	f1b9 0f00 	cmp.w	r9, #0
   14d9c:	d151      	bne.n	14e42 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14d9e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14da2:	2b00      	cmp	r3, #0
   14da4:	d03a      	beq.n	14e1c <gatt_find_info_rsp+0xf4>
   14da6:	2b02      	cmp	r3, #2
   14da8:	d03f      	beq.n	14e2a <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14daa:	6831      	ldr	r1, [r6, #0]
   14dac:	2900      	cmp	r1, #0
   14dae:	d143      	bne.n	14e38 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14db0:	7c33      	ldrb	r3, [r6, #16]
   14db2:	2b04      	cmp	r3, #4
   14db4:	d148      	bne.n	14e48 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14db6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14dba:	4638      	mov	r0, r7
   14dbc:	a902      	add	r1, sp, #8
   14dbe:	f88d 5008 	strb.w	r5, [sp, #8]
   14dc2:	f8ad 300a 	strh.w	r3, [sp, #10]
   14dc6:	f007 f900 	bl	1bfca <bt_uuid_cmp>
   14dca:	b310      	cbz	r0, 14e12 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14dcc:	f642 0301 	movw	r3, #10241	; 0x2801
   14dd0:	4638      	mov	r0, r7
   14dd2:	a903      	add	r1, sp, #12
   14dd4:	f88d 500c 	strb.w	r5, [sp, #12]
   14dd8:	f8ad 300e 	strh.w	r3, [sp, #14]
   14ddc:	f007 f8f5 	bl	1bfca <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14de0:	b1b8      	cbz	r0, 14e12 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14de2:	f642 0302 	movw	r3, #10242	; 0x2802
   14de6:	4638      	mov	r0, r7
   14de8:	a909      	add	r1, sp, #36	; 0x24
   14dea:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14dee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14df2:	f007 f8ea 	bl	1bfca <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14df6:	b160      	cbz	r0, 14e12 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14df8:	f642 0303 	movw	r3, #10243	; 0x2803
   14dfc:	4638      	mov	r0, r7
   14dfe:	a909      	add	r1, sp, #36	; 0x24
   14e00:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14e04:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14e08:	f007 f8df 	bl	1bfca <bt_uuid_cmp>
   14e0c:	b9e0      	cbnz	r0, 14e48 <gatt_find_info_rsp+0x120>
				skip = true;
   14e0e:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14e12:	9b00      	ldr	r3, [sp, #0]
   14e14:	4454      	add	r4, sl
   14e16:	3b01      	subs	r3, #1
   14e18:	9300      	str	r3, [sp, #0]
   14e1a:	e7ac      	b.n	14d76 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14e1c:	78a3      	ldrb	r3, [r4, #2]
   14e1e:	78e2      	ldrb	r2, [r4, #3]
   14e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14e24:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14e28:	e7bf      	b.n	14daa <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14e2a:	2210      	movs	r2, #16
   14e2c:	1ca1      	adds	r1, r4, #2
   14e2e:	f10d 0011 	add.w	r0, sp, #17
   14e32:	f007 f855 	bl	1bee0 <memcpy>
			break;
   14e36:	e7b8      	b.n	14daa <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14e38:	4638      	mov	r0, r7
   14e3a:	f007 f8c6 	bl	1bfca <bt_uuid_cmp>
   14e3e:	2800      	cmp	r0, #0
   14e40:	d0b6      	beq.n	14db0 <gatt_find_info_rsp+0x88>
			skip = false;
   14e42:	f04f 0900 	mov.w	r9, #0
   14e46:	e7e4      	b.n	14e12 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14e48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e4c:	4632      	mov	r2, r6
		attr.handle = handle;
   14e4e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e52:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14e54:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14e58:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e5c:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14e5e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e62:	a909      	add	r1, sp, #36	; 0x24
   14e64:	4798      	blx	r3
   14e66:	2800      	cmp	r0, #0
   14e68:	d1d3      	bne.n	14e12 <gatt_find_info_rsp+0xea>
}
   14e6a:	b00f      	add	sp, #60	; 0x3c
   14e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e70:	00022096 	.word	0x00022096

00014e74 <bt_gatt_read>:
{
   14e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e78:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14e7a:	4605      	mov	r5, r0
   14e7c:	b950      	cbnz	r0, 14e94 <bt_gatt_read+0x20>
   14e7e:	4945      	ldr	r1, [pc, #276]	; (14f94 <bt_gatt_read+0x120>)
   14e80:	4845      	ldr	r0, [pc, #276]	; (14f98 <bt_gatt_read+0x124>)
   14e82:	f640 62a6 	movw	r2, #3750	; 0xea6
   14e86:	f005 fe01 	bl	1aa8c <printk>
   14e8a:	f640 61a6 	movw	r1, #3750	; 0xea6
   14e8e:	4841      	ldr	r0, [pc, #260]	; (14f94 <bt_gatt_read+0x120>)
   14e90:	f006 f8a2 	bl	1afd8 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14e94:	b10c      	cbz	r4, 14e9a <bt_gatt_read+0x26>
   14e96:	6823      	ldr	r3, [r4, #0]
   14e98:	b953      	cbnz	r3, 14eb0 <bt_gatt_read+0x3c>
   14e9a:	493e      	ldr	r1, [pc, #248]	; (14f94 <bt_gatt_read+0x120>)
   14e9c:	483e      	ldr	r0, [pc, #248]	; (14f98 <bt_gatt_read+0x124>)
   14e9e:	f640 62a7 	movw	r2, #3751	; 0xea7
   14ea2:	f005 fdf3 	bl	1aa8c <printk>
   14ea6:	f640 61a7 	movw	r1, #3751	; 0xea7
   14eaa:	483a      	ldr	r0, [pc, #232]	; (14f94 <bt_gatt_read+0x120>)
   14eac:	f006 f894 	bl	1afd8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14eb0:	7aab      	ldrb	r3, [r5, #10]
   14eb2:	2b07      	cmp	r3, #7
   14eb4:	d16a      	bne.n	14f8c <bt_gatt_read+0x118>
	if (params->handle_count == 0) {
   14eb6:	6862      	ldr	r2, [r4, #4]
   14eb8:	bb22      	cbnz	r2, 14f04 <bt_gatt_read+0x90>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14eba:	2204      	movs	r2, #4
   14ebc:	2108      	movs	r1, #8
   14ebe:	4628      	mov	r0, r5
   14ec0:	f7fd fe8e 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14ec4:	4606      	mov	r6, r0
   14ec6:	b918      	cbnz	r0, 14ed0 <bt_gatt_read+0x5c>
		return -ENOMEM;
   14ec8:	f06f 000b 	mvn.w	r0, #11
}
   14ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ed0:	f100 0708 	add.w	r7, r0, #8
   14ed4:	2104      	movs	r1, #4
   14ed6:	4638      	mov	r0, r7
   14ed8:	f000 fe78 	bl	15bcc <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14edc:	8923      	ldrh	r3, [r4, #8]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14ede:	68e1      	ldr	r1, [r4, #12]
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14ee0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   14ee2:	8963      	ldrh	r3, [r4, #10]
   14ee4:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14ee6:	780b      	ldrb	r3, [r1, #0]
   14ee8:	b933      	cbnz	r3, 14ef8 <bt_gatt_read+0x84>
	net_buf_simple_add_le16(&buf->b, val);
   14eea:	4638      	mov	r0, r7
   14eec:	8849      	ldrh	r1, [r1, #2]
   14eee:	f008 fb49 	bl	1d584 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14ef2:	4623      	mov	r3, r4
   14ef4:	4a29      	ldr	r2, [pc, #164]	; (14f9c <bt_gatt_read+0x128>)
   14ef6:	e01a      	b.n	14f2e <bt_gatt_read+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14ef8:	2210      	movs	r2, #16
   14efa:	4638      	mov	r0, r7
   14efc:	3101      	adds	r1, #1
   14efe:	f008 fb2e 	bl	1d55e <net_buf_simple_add_mem>
   14f02:	e7f6      	b.n	14ef2 <bt_gatt_read+0x7e>
	if (params->handle_count > 1) {
   14f04:	2a01      	cmp	r2, #1
   14f06:	d01f      	beq.n	14f48 <bt_gatt_read+0xd4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
   14f08:	210e      	movs	r1, #14
   14f0a:	4628      	mov	r0, r5
   14f0c:	0052      	lsls	r2, r2, #1
   14f0e:	f7fd fe67 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14f12:	4606      	mov	r6, r0
   14f14:	2800      	cmp	r0, #0
   14f16:	d0d7      	beq.n	14ec8 <bt_gatt_read+0x54>
   14f18:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
   14f1a:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
   14f1e:	6862      	ldr	r2, [r4, #4]
   14f20:	b2fb      	uxtb	r3, r7
   14f22:	429a      	cmp	r2, r3
   14f24:	f107 0701 	add.w	r7, r7, #1
   14f28:	d807      	bhi.n	14f3a <bt_gatt_read+0xc6>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
   14f2a:	4623      	mov	r3, r4
   14f2c:	4a1c      	ldr	r2, [pc, #112]	; (14fa0 <bt_gatt_read+0x12c>)
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f2e:	4631      	mov	r1, r6
   14f30:	4628      	mov	r0, r5
}
   14f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f36:	f7fe bc8b 	b.w	13850 <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
   14f3a:	68a2      	ldr	r2, [r4, #8]
   14f3c:	4640      	mov	r0, r8
   14f3e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   14f42:	f008 fb1f 	bl	1d584 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   14f46:	e7ea      	b.n	14f1e <bt_gatt_read+0xaa>
	if (params->single.offset) {
   14f48:	8963      	ldrh	r3, [r4, #10]
   14f4a:	b183      	cbz	r3, 14f6e <bt_gatt_read+0xfa>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
   14f4c:	2204      	movs	r2, #4
   14f4e:	210c      	movs	r1, #12
   14f50:	4628      	mov	r0, r5
   14f52:	f7fd fe45 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14f56:	4606      	mov	r6, r0
   14f58:	2800      	cmp	r0, #0
   14f5a:	d0b5      	beq.n	14ec8 <bt_gatt_read+0x54>
	return net_buf_simple_add(&buf->b, len);
   14f5c:	2104      	movs	r1, #4
   14f5e:	3008      	adds	r0, #8
   14f60:	f000 fe34 	bl	15bcc <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14f64:	8923      	ldrh	r3, [r4, #8]
   14f66:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   14f68:	8963      	ldrh	r3, [r4, #10]
   14f6a:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f6c:	e7c1      	b.n	14ef2 <bt_gatt_read+0x7e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14f6e:	2202      	movs	r2, #2
   14f70:	210a      	movs	r1, #10
   14f72:	4628      	mov	r0, r5
   14f74:	f7fd fe34 	bl	12be0 <bt_att_create_pdu>
	if (!buf) {
   14f78:	4606      	mov	r6, r0
   14f7a:	2800      	cmp	r0, #0
   14f7c:	d0a4      	beq.n	14ec8 <bt_gatt_read+0x54>
   14f7e:	2102      	movs	r1, #2
   14f80:	3008      	adds	r0, #8
   14f82:	f000 fe23 	bl	15bcc <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14f86:	8923      	ldrh	r3, [r4, #8]
   14f88:	8003      	strh	r3, [r0, #0]
   14f8a:	e7b2      	b.n	14ef2 <bt_gatt_read+0x7e>
		return -ENOTCONN;
   14f8c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14f90:	e79c      	b.n	14ecc <bt_gatt_read+0x58>
   14f92:	bf00      	nop
   14f94:	00021f84 	.word	0x00021f84
   14f98:	0001fb49 	.word	0x0001fb49
   14f9c:	00014fa5 	.word	0x00014fa5
   14fa0:	0001cf0f 	.word	0x0001cf0f

00014fa4 <gatt_read_rsp>:
{
   14fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14fa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14faa:	4606      	mov	r6, r0
   14fac:	4690      	mov	r8, r2
   14fae:	461d      	mov	r5, r3
	if (err || !length) {
   14fb0:	460f      	mov	r7, r1
   14fb2:	b901      	cbnz	r1, 14fb6 <gatt_read_rsp+0x12>
   14fb4:	b953      	cbnz	r3, 14fcc <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   14fb6:	2300      	movs	r3, #0
   14fb8:	4622      	mov	r2, r4
   14fba:	4639      	mov	r1, r7
   14fbc:	930a      	str	r3, [sp, #40]	; 0x28
   14fbe:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14fc0:	4630      	mov	r0, r6
   14fc2:	46ac      	mov	ip, r5
}
   14fc4:	b003      	add	sp, #12
   14fc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14fca:	4760      	bx	ip
	if (!params->handle_count) {
   14fcc:	6863      	ldr	r3, [r4, #4]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d141      	bne.n	15056 <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   14fd2:	3d01      	subs	r5, #1
   14fd4:	b2ad      	uxth	r5, r5
   14fd6:	f102 0901 	add.w	r9, r2, #1
   14fda:	b305      	cbz	r5, 1501e <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   14fdc:	f8b9 2000 	ldrh.w	r2, [r9]
   14fe0:	b293      	uxth	r3, r2
		if (!handle) {
   14fe2:	b933      	cbnz	r3, 14ff2 <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   14fe4:	2145      	movs	r1, #69	; 0x45
   14fe6:	482c      	ldr	r0, [pc, #176]	; (15098 <gatt_read_rsp+0xf4>)
}
   14fe8:	b003      	add	sp, #12
   14fea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   14fee:	f005 bd4d 	b.w	1aa8c <printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14ff2:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   14ff6:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14ff8:	42ab      	cmp	r3, r5
   14ffa:	bf8c      	ite	hi
   14ffc:	1eab      	subhi	r3, r5, #2
   14ffe:	3b02      	subls	r3, #2
   15000:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   15002:	9300      	str	r3, [sp, #0]
   15004:	4622      	mov	r2, r4
   15006:	2100      	movs	r1, #0
   15008:	4630      	mov	r0, r6
   1500a:	6827      	ldr	r7, [r4, #0]
   1500c:	f109 0302 	add.w	r3, r9, #2
   15010:	47b8      	blx	r7
   15012:	2800      	cmp	r0, #0
   15014:	d03d      	beq.n	15092 <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   15016:	f898 1000 	ldrb.w	r1, [r8]
   1501a:	428d      	cmp	r5, r1
   1501c:	d20b      	bcs.n	15036 <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   1501e:	4621      	mov	r1, r4
   15020:	4630      	mov	r0, r6
   15022:	f7ff ff27 	bl	14e74 <bt_gatt_read>
   15026:	2800      	cmp	r0, #0
   15028:	da33      	bge.n	15092 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1502a:	2300      	movs	r3, #0
   1502c:	930a      	str	r3, [sp, #40]	; 0x28
   1502e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   15030:	4622      	mov	r2, r4
   15032:	210e      	movs	r1, #14
   15034:	e7c4      	b.n	14fc0 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   15036:	8922      	ldrh	r2, [r4, #8]
   15038:	8960      	ldrh	r0, [r4, #10]
   1503a:	4290      	cmp	r0, r2
   1503c:	d105      	bne.n	1504a <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   1503e:	2300      	movs	r3, #0
   15040:	930a      	str	r3, [sp, #40]	; 0x28
   15042:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   15044:	4622      	mov	r2, r4
   15046:	4619      	mov	r1, r3
   15048:	e7ba      	b.n	14fc0 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   1504a:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1504c:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   1504e:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   15050:	b2ad      	uxth	r5, r5
   15052:	4489      	add	r9, r1
   15054:	e7c1      	b.n	14fda <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   15056:	9500      	str	r5, [sp, #0]
   15058:	4613      	mov	r3, r2
   1505a:	f8d4 c000 	ldr.w	ip, [r4]
   1505e:	4622      	mov	r2, r4
   15060:	47e0      	blx	ip
   15062:	b1b0      	cbz	r0, 15092 <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   15064:	4630      	mov	r0, r6
   15066:	f007 fdd3 	bl	1cc10 <bt_att_get_mtu>
   1506a:	3801      	subs	r0, #1
   1506c:	4285      	cmp	r5, r0
   1506e:	da03      	bge.n	15078 <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   15070:	970a      	str	r7, [sp, #40]	; 0x28
   15072:	463b      	mov	r3, r7
   15074:	6825      	ldr	r5, [r4, #0]
   15076:	e7e5      	b.n	15044 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   15078:	8963      	ldrh	r3, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   1507a:	4621      	mov	r1, r4
	params->single.offset += length;
   1507c:	441d      	add	r5, r3
	if (bt_gatt_read(conn, params) < 0) {
   1507e:	4630      	mov	r0, r6
	params->single.offset += length;
   15080:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   15082:	f7ff fef7 	bl	14e74 <bt_gatt_read>
   15086:	2800      	cmp	r0, #0
   15088:	da03      	bge.n	15092 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1508a:	970a      	str	r7, [sp, #40]	; 0x28
   1508c:	463b      	mov	r3, r7
   1508e:	6825      	ldr	r5, [r4, #0]
   15090:	e7ce      	b.n	15030 <gatt_read_rsp+0x8c>
}
   15092:	b003      	add	sp, #12
   15094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15098:	000220ad 	.word	0x000220ad

0001509c <bt_gatt_subscribe>:
{
   1509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1509e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   150a0:	4606      	mov	r6, r0
   150a2:	b950      	cbnz	r0, 150ba <bt_gatt_subscribe+0x1e>
   150a4:	4944      	ldr	r1, [pc, #272]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150a6:	4845      	ldr	r0, [pc, #276]	; (151bc <bt_gatt_subscribe+0x120>)
   150a8:	f640 72fb 	movw	r2, #4091	; 0xffb
   150ac:	f005 fcee 	bl	1aa8c <printk>
   150b0:	f640 71fb 	movw	r1, #4091	; 0xffb
   150b4:	4840      	ldr	r0, [pc, #256]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150b6:	f005 ff8f 	bl	1afd8 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   150ba:	b10d      	cbz	r5, 150c0 <bt_gatt_subscribe+0x24>
   150bc:	682b      	ldr	r3, [r5, #0]
   150be:	b953      	cbnz	r3, 150d6 <bt_gatt_subscribe+0x3a>
   150c0:	493d      	ldr	r1, [pc, #244]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150c2:	483e      	ldr	r0, [pc, #248]	; (151bc <bt_gatt_subscribe+0x120>)
   150c4:	f640 72fc 	movw	r2, #4092	; 0xffc
   150c8:	f005 fce0 	bl	1aa8c <printk>
   150cc:	f640 71fc 	movw	r1, #4092	; 0xffc
   150d0:	4839      	ldr	r0, [pc, #228]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150d2:	f005 ff81 	bl	1afd8 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   150d6:	89ab      	ldrh	r3, [r5, #12]
   150d8:	b953      	cbnz	r3, 150f0 <bt_gatt_subscribe+0x54>
   150da:	4937      	ldr	r1, [pc, #220]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150dc:	4837      	ldr	r0, [pc, #220]	; (151bc <bt_gatt_subscribe+0x120>)
   150de:	f640 72fd 	movw	r2, #4093	; 0xffd
   150e2:	f005 fcd3 	bl	1aa8c <printk>
   150e6:	f640 71fd 	movw	r1, #4093	; 0xffd
   150ea:	4833      	ldr	r0, [pc, #204]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150ec:	f005 ff74 	bl	1afd8 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   150f0:	896b      	ldrh	r3, [r5, #10]
   150f2:	b953      	cbnz	r3, 1510a <bt_gatt_subscribe+0x6e>
   150f4:	4930      	ldr	r1, [pc, #192]	; (151b8 <bt_gatt_subscribe+0x11c>)
   150f6:	4831      	ldr	r0, [pc, #196]	; (151bc <bt_gatt_subscribe+0x120>)
   150f8:	f241 0203 	movw	r2, #4099	; 0x1003
   150fc:	f005 fcc6 	bl	1aa8c <printk>
   15100:	f241 0103 	movw	r1, #4099	; 0x1003
   15104:	482c      	ldr	r0, [pc, #176]	; (151b8 <bt_gatt_subscribe+0x11c>)
   15106:	f005 ff67 	bl	1afd8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1510a:	7ab3      	ldrb	r3, [r6, #10]
   1510c:	2b07      	cmp	r3, #7
   1510e:	d14b      	bne.n	151a8 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   15110:	4630      	mov	r0, r6
   15112:	f7fe f9e7 	bl	134e4 <gatt_sub_find>
	if (!sub) {
   15116:	4604      	mov	r4, r0
   15118:	b958      	cbnz	r0, 15132 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   1511a:	f7fe f9e3 	bl	134e4 <gatt_sub_find>
		if (sub) {
   1511e:	4604      	mov	r4, r0
   15120:	2800      	cmp	r0, #0
   15122:	d044      	beq.n	151ae <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15124:	f106 0188 	add.w	r1, r6, #136	; 0x88
   15128:	3001      	adds	r0, #1
   1512a:	f007 fed1 	bl	1ced0 <bt_addr_le_copy>
			sub->id = conn->id;
   1512e:	7a33      	ldrb	r3, [r6, #8]
   15130:	7023      	strb	r3, [r4, #0]
	return list->head;
   15132:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   15134:	b90a      	cbnz	r2, 1513a <bt_gatt_subscribe+0x9e>
   15136:	4613      	mov	r3, r2
   15138:	e001      	b.n	1513e <bt_gatt_subscribe+0xa2>
   1513a:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   1513e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   15140:	b97b      	cbnz	r3, 15162 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   15142:	bb41      	cbnz	r1, 15196 <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   15144:	4630      	mov	r0, r6
   15146:	462b      	mov	r3, r5
   15148:	89aa      	ldrh	r2, [r5, #12]
   1514a:	8969      	ldrh	r1, [r5, #10]
   1514c:	f7fe fe24 	bl	13d98 <gatt_write_ccc.constprop.0>
		if (err) {
   15150:	4606      	mov	r6, r0
   15152:	b300      	cbz	r0, 15196 <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   15154:	68a3      	ldr	r3, [r4, #8]
   15156:	b913      	cbnz	r3, 1515e <bt_gatt_subscribe+0xc2>
   15158:	4620      	mov	r0, r4
   1515a:	f007 fef3 	bl	1cf44 <gatt_sub_remove.part.0>
}
   1515e:	4630      	mov	r0, r6
   15160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   15162:	42ab      	cmp	r3, r5
   15164:	d106      	bne.n	15174 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   15166:	b912      	cbnz	r2, 1516e <bt_gatt_subscribe+0xd2>
   15168:	4620      	mov	r0, r4
   1516a:	f007 feeb 	bl	1cf44 <gatt_sub_remove.part.0>
			return -EALREADY;
   1516e:	f06f 0644 	mvn.w	r6, #68	; 0x44
   15172:	e7f4      	b.n	1515e <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   15174:	891f      	ldrh	r7, [r3, #8]
   15176:	8928      	ldrh	r0, [r5, #8]
   15178:	4287      	cmp	r7, r0
   1517a:	d104      	bne.n	15186 <bt_gatt_subscribe+0xea>
   1517c:	899f      	ldrh	r7, [r3, #12]
   1517e:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   15180:	4287      	cmp	r7, r0
   15182:	bf28      	it	cs
   15184:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   15186:	f113 0f14 	cmn.w	r3, #20
   1518a:	d0da      	beq.n	15142 <bt_gatt_subscribe+0xa6>
	return node->next;
   1518c:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1518e:	2b00      	cmp	r3, #0
   15190:	d0d7      	beq.n	15142 <bt_gatt_subscribe+0xa6>
   15192:	3b14      	subs	r3, #20
   15194:	e7d4      	b.n	15140 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   15196:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   15198:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1519a:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   1519e:	616a      	str	r2, [r5, #20]
	list->head = node;
   151a0:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   151a2:	b93e      	cbnz	r6, 151b4 <bt_gatt_subscribe+0x118>
	list->tail = node;
   151a4:	60e3      	str	r3, [r4, #12]
}
   151a6:	e7da      	b.n	1515e <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   151a8:	f06f 0638 	mvn.w	r6, #56	; 0x38
   151ac:	e7d7      	b.n	1515e <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   151ae:	f06f 060b 	mvn.w	r6, #11
   151b2:	e7d4      	b.n	1515e <bt_gatt_subscribe+0xc2>
	return 0;
   151b4:	2600      	movs	r6, #0
   151b6:	e7d2      	b.n	1515e <bt_gatt_subscribe+0xc2>
   151b8:	00021f84 	.word	0x00021f84
   151bc:	0001fb49 	.word	0x0001fb49

000151c0 <bt_gatt_unsubscribe>:
{
   151c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151c4:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   151c6:	4607      	mov	r7, r0
   151c8:	b950      	cbnz	r0, 151e0 <bt_gatt_unsubscribe+0x20>
   151ca:	4947      	ldr	r1, [pc, #284]	; (152e8 <bt_gatt_unsubscribe+0x128>)
   151cc:	4847      	ldr	r0, [pc, #284]	; (152ec <bt_gatt_unsubscribe+0x12c>)
   151ce:	f241 025c 	movw	r2, #4188	; 0x105c
   151d2:	f005 fc5b 	bl	1aa8c <printk>
   151d6:	f241 015c 	movw	r1, #4188	; 0x105c
   151da:	4843      	ldr	r0, [pc, #268]	; (152e8 <bt_gatt_unsubscribe+0x128>)
   151dc:	f005 fefc 	bl	1afd8 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   151e0:	b956      	cbnz	r6, 151f8 <bt_gatt_unsubscribe+0x38>
   151e2:	4941      	ldr	r1, [pc, #260]	; (152e8 <bt_gatt_unsubscribe+0x128>)
   151e4:	4841      	ldr	r0, [pc, #260]	; (152ec <bt_gatt_unsubscribe+0x12c>)
   151e6:	f241 025d 	movw	r2, #4189	; 0x105d
   151ea:	f005 fc4f 	bl	1aa8c <printk>
   151ee:	f241 015d 	movw	r1, #4189	; 0x105d
   151f2:	483d      	ldr	r0, [pc, #244]	; (152e8 <bt_gatt_unsubscribe+0x128>)
   151f4:	f005 fef0 	bl	1afd8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   151f8:	7abb      	ldrb	r3, [r7, #10]
   151fa:	2b07      	cmp	r3, #7
   151fc:	d170      	bne.n	152e0 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   151fe:	4638      	mov	r0, r7
   15200:	f7fe f970 	bl	134e4 <gatt_sub_find>
	if (!sub) {
   15204:	4680      	mov	r8, r0
   15206:	b920      	cbnz	r0, 15212 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   15208:	f06f 0015 	mvn.w	r0, #21
}
   1520c:	b003      	add	sp, #12
   1520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15212:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15214:	b1cc      	cbz	r4, 1524a <bt_gatt_unsubscribe+0x8a>
   15216:	f1b4 0514 	subs.w	r5, r4, #20
   1521a:	d018      	beq.n	1524e <bt_gatt_unsubscribe+0x8e>
	return node->next;
   1521c:	6824      	ldr	r4, [r4, #0]
   1521e:	b104      	cbz	r4, 15222 <bt_gatt_unsubscribe+0x62>
   15220:	3c14      	subs	r4, #20
   15222:	f04f 0900 	mov.w	r9, #0
   15226:	464b      	mov	r3, r9
   15228:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   1522a:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1522e:	b985      	cbnz	r5, 15252 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   15230:	2b00      	cmp	r3, #0
   15232:	d0e9      	beq.n	15208 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   15234:	f1ba 0f00 	cmp.w	sl, #0
   15238:	d047      	beq.n	152ca <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   1523a:	462b      	mov	r3, r5
   1523c:	462a      	mov	r2, r5
   1523e:	4631      	mov	r1, r6
   15240:	4638      	mov	r0, r7
   15242:	6834      	ldr	r4, [r6, #0]
   15244:	47a0      	blx	r4
		return 0;
   15246:	4628      	mov	r0, r5
   15248:	e7e0      	b.n	1520c <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1524a:	4625      	mov	r5, r4
   1524c:	e7e9      	b.n	15222 <bt_gatt_unsubscribe+0x62>
   1524e:	462c      	mov	r4, r5
   15250:	e7e7      	b.n	15222 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   15252:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   15254:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   15258:	d12b      	bne.n	152b2 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   1525a:	696b      	ldr	r3, [r5, #20]
   1525c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   15260:	f1b9 0f00 	cmp.w	r9, #0
   15264:	d11e      	bne.n	152a4 <bt_gatt_unsubscribe+0xe4>
   15266:	4281      	cmp	r1, r0
	list->head = node;
   15268:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   1526c:	d101      	bne.n	15272 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   1526e:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   15272:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15274:	4658      	mov	r0, fp
   15276:	616b      	str	r3, [r5, #20]
   15278:	f007 fe46 	bl	1cf08 <atomic_get>
			if (atomic_test_bit(params->flags,
   1527c:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1527e:	f3c0 0380 	ubfx	r3, r0, #2, #1
   15282:	d51e      	bpl.n	152c2 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   15284:	4631      	mov	r1, r6
   15286:	4638      	mov	r0, r7
   15288:	9301      	str	r3, [sp, #4]
   1528a:	f7fe f88f 	bl	133ac <bt_att_req_cancel>
}
   1528e:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15290:	b1cc      	cbz	r4, 152c6 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15292:	f114 0114 	adds.w	r1, r4, #20
   15296:	d002      	beq.n	1529e <bt_gatt_unsubscribe+0xde>
	return node->next;
   15298:	6961      	ldr	r1, [r4, #20]
   1529a:	b101      	cbz	r1, 1529e <bt_gatt_unsubscribe+0xde>
   1529c:	3914      	subs	r1, #20
   1529e:	4625      	mov	r5, r4
   152a0:	460c      	mov	r4, r1
   152a2:	e7c4      	b.n	1522e <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   152a4:	4288      	cmp	r0, r1
	parent->next = child;
   152a6:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   152aa:	bf08      	it	eq
   152ac:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   152b0:	e7df      	b.n	15272 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   152b2:	892d      	ldrh	r5, [r5, #8]
   152b4:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   152b6:	4689      	mov	r9, r1
   152b8:	4285      	cmp	r5, r0
   152ba:	bf08      	it	eq
   152bc:	f04f 0a01 	moveq.w	sl, #1
   152c0:	e7e6      	b.n	15290 <bt_gatt_unsubscribe+0xd0>
			found = true;
   152c2:	2301      	movs	r3, #1
   152c4:	e7e4      	b.n	15290 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   152c6:	4621      	mov	r1, r4
   152c8:	e7e9      	b.n	1529e <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   152ca:	4633      	mov	r3, r6
   152cc:	4652      	mov	r2, sl
   152ce:	4638      	mov	r0, r7
   152d0:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   152d2:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   152d6:	b003      	add	sp, #12
   152d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   152dc:	f7fe bd5c 	b.w	13d98 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   152e0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   152e4:	e792      	b.n	1520c <bt_gatt_unsubscribe+0x4c>
   152e6:	bf00      	nop
   152e8:	00021f84 	.word	0x00021f84
   152ec:	0001fb49 	.word	0x0001fb49

000152f0 <bt_gatt_mult_notification>:
{
   152f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f4:	b085      	sub	sp, #20
   152f6:	4680      	mov	r8, r0
   152f8:	460c      	mov	r4, r1
   152fa:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   152fc:	f7fe f8f2 	bl	134e4 <gatt_sub_find>
	if (!sub) {
   15300:	4606      	mov	r6, r0
   15302:	b1d0      	cbz	r0, 1533a <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   15304:	464a      	mov	r2, r9
   15306:	4621      	mov	r1, r4
   15308:	a801      	add	r0, sp, #4
   1530a:	f008 f8ff 	bl	1d50c <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1530e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   15312:	2b04      	cmp	r3, #4
   15314:	d911      	bls.n	1533a <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   15316:	2104      	movs	r1, #4
   15318:	eb0d 0001 	add.w	r0, sp, r1
   1531c:	f000 fc38 	bl	15b90 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   15320:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   15324:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   15328:	4605      	mov	r5, r0
		if (len > buf.len) {
   1532a:	4553      	cmp	r3, sl
   1532c:	d208      	bcs.n	15340 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   1532e:	464b      	mov	r3, r9
   15330:	4652      	mov	r2, sl
   15332:	2145      	movs	r1, #69	; 0x45
   15334:	4816      	ldr	r0, [pc, #88]	; (15390 <bt_gatt_mult_notification+0xa0>)
   15336:	f005 fba9 	bl	1aa8c <printk>
}
   1533a:	b005      	add	sp, #20
   1533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15340:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15342:	b303      	cbz	r3, 15386 <bt_gatt_mult_notification+0x96>
   15344:	f1b3 0714 	subs.w	r7, r3, #20
   15348:	d01d      	beq.n	15386 <bt_gatt_mult_notification+0x96>
	return node->next;
   1534a:	681c      	ldr	r4, [r3, #0]
   1534c:	b104      	cbz	r4, 15350 <bt_gatt_mult_notification+0x60>
   1534e:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   15350:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   15354:	893b      	ldrh	r3, [r7, #8]
   15356:	455b      	cmp	r3, fp
   15358:	d10b      	bne.n	15372 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   1535a:	4653      	mov	r3, sl
   1535c:	462a      	mov	r2, r5
   1535e:	4639      	mov	r1, r7
   15360:	4640      	mov	r0, r8
   15362:	f8d7 c000 	ldr.w	ip, [r7]
   15366:	47e0      	blx	ip
   15368:	b918      	cbnz	r0, 15372 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   1536a:	4639      	mov	r1, r7
   1536c:	4640      	mov	r0, r8
   1536e:	f7ff ff27 	bl	151c0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15372:	b144      	cbz	r4, 15386 <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15374:	f114 0314 	adds.w	r3, r4, #20
   15378:	d002      	beq.n	15380 <bt_gatt_mult_notification+0x90>
	return node->next;
   1537a:	6963      	ldr	r3, [r4, #20]
   1537c:	b103      	cbz	r3, 15380 <bt_gatt_mult_notification+0x90>
   1537e:	3b14      	subs	r3, #20
{
   15380:	4627      	mov	r7, r4
   15382:	461c      	mov	r4, r3
   15384:	e7e6      	b.n	15354 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   15386:	4651      	mov	r1, sl
   15388:	a801      	add	r0, sp, #4
   1538a:	f000 fc01 	bl	15b90 <net_buf_simple_pull_mem>
   1538e:	e7be      	b.n	1530e <bt_gatt_mult_notification+0x1e>
   15390:	000220c1 	.word	0x000220c1

00015394 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   15394:	2301      	movs	r3, #1
{
   15396:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15398:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1539c:	b08e      	sub	sp, #56	; 0x38
   1539e:	4605      	mov	r5, r0
	data.conn = conn;
   153a0:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153a2:	4631      	mov	r1, r6
   153a4:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   153a6:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153aa:	f006 ff60 	bl	1c26e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   153ae:	b190      	cbz	r0, 153d6 <bt_gatt_connected+0x42>
		if (conn->id) {
   153b0:	7a2a      	ldrb	r2, [r5, #8]
   153b2:	b30a      	cbz	r2, 153f8 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   153b4:	ac02      	add	r4, sp, #8
   153b6:	2104      	movs	r1, #4
   153b8:	4620      	mov	r0, r4
   153ba:	f005 facd 	bl	1a958 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   153be:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   153c0:	2124      	movs	r1, #36	; 0x24
   153c2:	4a19      	ldr	r2, [pc, #100]	; (15428 <bt_gatt_connected+0x94>)
   153c4:	a805      	add	r0, sp, #20
   153c6:	4633      	mov	r3, r6
   153c8:	f7f9 fa4a 	bl	e860 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   153cc:	aa05      	add	r2, sp, #20
   153ce:	4610      	mov	r0, r2
   153d0:	4916      	ldr	r1, [pc, #88]	; (1542c <bt_gatt_connected+0x98>)
   153d2:	f7f6 fd0d 	bl	bdf0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   153d6:	2001      	movs	r0, #1
   153d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   153dc:	4a14      	ldr	r2, [pc, #80]	; (15430 <bt_gatt_connected+0x9c>)
   153de:	ab03      	add	r3, sp, #12
   153e0:	f007 ff74 	bl	1d2cc <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   153e4:	4628      	mov	r0, r5
   153e6:	f7fe f87d 	bl	134e4 <gatt_sub_find>
	if (!sub) {
   153ea:	b118      	cbz	r0, 153f4 <bt_gatt_connected+0x60>
	return list->head;
   153ec:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   153ee:	b10c      	cbz	r4, 153f4 <bt_gatt_connected+0x60>
   153f0:	3c14      	subs	r4, #20
   153f2:	b91c      	cbnz	r4, 153fc <bt_gatt_connected+0x68>
}
   153f4:	b00e      	add	sp, #56	; 0x38
   153f6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   153f8:	9200      	str	r2, [sp, #0]
   153fa:	e7e1      	b.n	153c0 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   153fc:	4631      	mov	r1, r6
   153fe:	7a28      	ldrb	r0, [r5, #8]
   15400:	f006 ff35 	bl	1c26e <bt_addr_le_is_bonded>
   15404:	b158      	cbz	r0, 1541e <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15406:	f104 0010 	add.w	r0, r4, #16
   1540a:	f007 fd7d 	bl	1cf08 <atomic_get>
   1540e:	0783      	lsls	r3, r0, #30
   15410:	d405      	bmi.n	1541e <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   15412:	4623      	mov	r3, r4
   15414:	4628      	mov	r0, r5
   15416:	89a2      	ldrh	r2, [r4, #12]
   15418:	8961      	ldrh	r1, [r4, #10]
   1541a:	f7fe fcbd 	bl	13d98 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1541e:	f114 0f14 	cmn.w	r4, #20
   15422:	d0e7      	beq.n	153f4 <bt_gatt_connected+0x60>
	return node->next;
   15424:	6964      	ldr	r4, [r4, #20]
   15426:	e7e2      	b.n	153ee <bt_gatt_connected+0x5a>
   15428:	00021ff3 	.word	0x00021ff3
   1542c:	00014191 	.word	0x00014191
   15430:	00014561 	.word	0x00014561

00015434 <db_hash_read>:
{
   15434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15436:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   15438:	4810      	ldr	r0, [pc, #64]	; (1547c <db_hash_read+0x48>)
{
   1543a:	4615      	mov	r5, r2
   1543c:	461f      	mov	r7, r3
   1543e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   15442:	f004 fc1d 	bl	19c80 <k_delayed_work_cancel>
	if (!err) {
   15446:	b910      	cbnz	r0, 1544e <db_hash_read+0x1a>
		db_hash_gen(true);
   15448:	2001      	movs	r0, #1
   1544a:	f7fe fe11 	bl	14070 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1544e:	2101      	movs	r1, #1
   15450:	4620      	mov	r0, r4
   15452:	f008 f803 	bl	1d45c <bt_gatt_change_aware>
	if (offset > value_len) {
   15456:	2e10      	cmp	r6, #16
   15458:	d80c      	bhi.n	15474 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1545a:	f1c6 0410 	rsb	r4, r6, #16
   1545e:	42bc      	cmp	r4, r7
   15460:	bfa8      	it	ge
   15462:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   15464:	4906      	ldr	r1, [pc, #24]	; (15480 <db_hash_read+0x4c>)
   15466:	4622      	mov	r2, r4
   15468:	4628      	mov	r0, r5
   1546a:	4431      	add	r1, r6
   1546c:	f006 fd38 	bl	1bee0 <memcpy>
}
   15470:	4620      	mov	r0, r4
   15472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15474:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   15478:	e7fa      	b.n	15470 <db_hash_read+0x3c>
   1547a:	bf00      	nop
   1547c:	20009348 	.word	0x20009348
   15480:	2000ea3c 	.word	0x2000ea3c

00015484 <bt_gatt_store_ccc>:
	save.count = 0;
   15484:	2300      	movs	r3, #0
{
   15486:	b570      	push	{r4, r5, r6, lr}
   15488:	4604      	mov	r4, r0
   1548a:	b0c0      	sub	sp, #256	; 0x100
   1548c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1548e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   15490:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   15494:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   15496:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1549a:	2001      	movs	r0, #1
   1549c:	4a13      	ldr	r2, [pc, #76]	; (154ec <bt_gatt_store_ccc+0x68>)
   1549e:	ab0d      	add	r3, sp, #52	; 0x34
   154a0:	f007 ff14 	bl	1d2cc <bt_gatt_foreach_attr>
	if (id) {
   154a4:	b1ec      	cbz	r4, 154e2 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   154a6:	ae03      	add	r6, sp, #12
   154a8:	4622      	mov	r2, r4
   154aa:	2104      	movs	r1, #4
   154ac:	4630      	mov	r0, r6
   154ae:	f005 fa53 	bl	1a958 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   154b2:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   154b4:	4a0e      	ldr	r2, [pc, #56]	; (154f0 <bt_gatt_store_ccc+0x6c>)
   154b6:	462b      	mov	r3, r5
   154b8:	2124      	movs	r1, #36	; 0x24
   154ba:	a804      	add	r0, sp, #16
   154bc:	f7f9 f9d0 	bl	e860 <bt_settings_encode_key>
	if (save.count) {
   154c0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   154c2:	b182      	cbz	r2, 154e6 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   154c4:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   154c6:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   154c8:	a804      	add	r0, sp, #16
   154ca:	f7f6 fc45 	bl	bd58 <settings_save_one>
	if (err) {
   154ce:	4604      	mov	r4, r0
   154d0:	b120      	cbz	r0, 154dc <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   154d2:	4602      	mov	r2, r0
   154d4:	2145      	movs	r1, #69	; 0x45
   154d6:	4807      	ldr	r0, [pc, #28]	; (154f4 <bt_gatt_store_ccc+0x70>)
   154d8:	f005 fad8 	bl	1aa8c <printk>
}
   154dc:	4620      	mov	r0, r4
   154de:	b040      	add	sp, #256	; 0x100
   154e0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   154e2:	9400      	str	r4, [sp, #0]
   154e4:	e7e6      	b.n	154b4 <bt_gatt_store_ccc+0x30>
		str = NULL;
   154e6:	4611      	mov	r1, r2
   154e8:	e7ee      	b.n	154c8 <bt_gatt_store_ccc+0x44>
   154ea:	bf00      	nop
   154ec:	00013a25 	.word	0x00013a25
   154f0:	00021ff3 	.word	0x00021ff3
   154f4:	000220df 	.word	0x000220df

000154f8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   154f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154fc:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   154fe:	4603      	mov	r3, r0
   15500:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15504:	2001      	movs	r0, #1
{
   15506:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15508:	4a52      	ldr	r2, [pc, #328]	; (15654 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1550a:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1550e:	f007 fedd 	bl	1d2cc <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15512:	4629      	mov	r1, r5
   15514:	7a20      	ldrb	r0, [r4, #8]
   15516:	f006 feaa 	bl	1c26e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1551a:	b378      	cbz	r0, 1557c <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1551c:	4629      	mov	r1, r5
   1551e:	7a20      	ldrb	r0, [r4, #8]
   15520:	f7ff ffb0 	bl	15484 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   15524:	4620      	mov	r0, r4
   15526:	f7fd ff9f 	bl	13468 <find_cf_cfg>
	if (!cfg) {
   1552a:	4606      	mov	r6, r0
   1552c:	2800      	cmp	r0, #0
   1552e:	d05e      	beq.n	155ee <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15530:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   15532:	3608      	adds	r6, #8
		if (conn->id) {
   15534:	2a00      	cmp	r2, #0
   15536:	d05c      	beq.n	155f2 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15538:	af02      	add	r7, sp, #8
   1553a:	2104      	movs	r1, #4
   1553c:	4638      	mov	r0, r7
   1553e:	f005 fa0b 	bl	1a958 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   15542:	462b      	mov	r3, r5
   15544:	9700      	str	r7, [sp, #0]
   15546:	2124      	movs	r1, #36	; 0x24
   15548:	4a43      	ldr	r2, [pc, #268]	; (15658 <bt_gatt_disconnected+0x160>)
   1554a:	a803      	add	r0, sp, #12
   1554c:	f7f9 f988 	bl	e860 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   15550:	7a23      	ldrb	r3, [r4, #8]
   15552:	2701      	movs	r7, #1
   15554:	b93b      	cbnz	r3, 15566 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   15556:	2300      	movs	r3, #0
   15558:	2124      	movs	r1, #36	; 0x24
   1555a:	9300      	str	r3, [sp, #0]
   1555c:	4a3e      	ldr	r2, [pc, #248]	; (15658 <bt_gatt_disconnected+0x160>)
   1555e:	462b      	mov	r3, r5
   15560:	a803      	add	r0, sp, #12
   15562:	f7f9 f97d 	bl	e860 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   15566:	463a      	mov	r2, r7
   15568:	4631      	mov	r1, r6
   1556a:	a803      	add	r0, sp, #12
   1556c:	f7f6 fbf4 	bl	bd58 <settings_save_one>
	if (err) {
   15570:	4602      	mov	r2, r0
   15572:	b118      	cbz	r0, 1557c <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   15574:	2145      	movs	r1, #69	; 0x45
   15576:	4839      	ldr	r0, [pc, #228]	; (1565c <bt_gatt_disconnected+0x164>)
   15578:	f005 fa88 	bl	1aa8c <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1557c:	4629      	mov	r1, r5
   1557e:	7a20      	ldrb	r0, [r4, #8]
   15580:	f006 fe75 	bl	1c26e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15584:	b150      	cbz	r0, 1559c <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   15586:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15588:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   1558c:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15590:	2001      	movs	r0, #1
   15592:	4a33      	ldr	r2, [pc, #204]	; (15660 <bt_gatt_disconnected+0x168>)
   15594:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   15596:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15598:	f007 fe98 	bl	1d2cc <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1559c:	4620      	mov	r0, r4
   1559e:	f7fd ffa1 	bl	134e4 <gatt_sub_find>
	if (!sub) {
   155a2:	4607      	mov	r7, r0
   155a4:	b3b0      	cbz	r0, 15614 <bt_gatt_disconnected+0x11c>
	return list->head;
   155a6:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   155a8:	b3a3      	cbz	r3, 15614 <bt_gatt_disconnected+0x11c>
   155aa:	f1b3 0b14 	subs.w	fp, r3, #20
   155ae:	d031      	beq.n	15614 <bt_gatt_disconnected+0x11c>
	return node->next;
   155b0:	681e      	ldr	r6, [r3, #0]
   155b2:	b106      	cbz	r6, 155b6 <bt_gatt_disconnected+0xbe>
   155b4:	3e14      	subs	r6, #20
   155b6:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   155ba:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   155bc:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   155c0:	4629      	mov	r1, r5
   155c2:	7a20      	ldrb	r0, [r4, #8]
   155c4:	f006 fe53 	bl	1c26e <bt_addr_le_is_bonded>
   155c8:	b9a8      	cbnz	r0, 155f6 <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   155ca:	465b      	mov	r3, fp
   155cc:	4642      	mov	r2, r8
   155ce:	4639      	mov	r1, r7
   155d0:	4620      	mov	r0, r4
			params->value = 0U;
   155d2:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   155d6:	f007 fcda 	bl	1cf8e <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   155da:	b1de      	cbz	r6, 15614 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   155dc:	f116 0214 	adds.w	r2, r6, #20
   155e0:	d002      	beq.n	155e8 <bt_gatt_disconnected+0xf0>
	return node->next;
   155e2:	6972      	ldr	r2, [r6, #20]
   155e4:	b102      	cbz	r2, 155e8 <bt_gatt_disconnected+0xf0>
   155e6:	3a14      	subs	r2, #20
   155e8:	46b3      	mov	fp, r6
   155ea:	4616      	mov	r6, r2
   155ec:	e7e8      	b.n	155c0 <bt_gatt_disconnected+0xc8>
		len = 0;
   155ee:	4607      	mov	r7, r0
   155f0:	e7b1      	b.n	15556 <bt_gatt_disconnected+0x5e>
   155f2:	2701      	movs	r7, #1
   155f4:	e7af      	b.n	15556 <bt_gatt_disconnected+0x5e>
   155f6:	f10b 0010 	add.w	r0, fp, #16
   155fa:	f007 fc85 	bl	1cf08 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   155fe:	07c3      	lsls	r3, r0, #31
   15600:	d4e3      	bmi.n	155ca <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   15602:	787b      	ldrb	r3, [r7, #1]
   15604:	b11b      	cbz	r3, 1560e <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15606:	4629      	mov	r1, r5
   15608:	4648      	mov	r0, r9
   1560a:	f007 fc61 	bl	1ced0 <bt_addr_le_copy>
			prev = &params->node;
   1560e:	f10b 0814 	add.w	r8, fp, #20
   15612:	e7e2      	b.n	155da <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   15614:	4620      	mov	r0, r4
   15616:	f7fd ff27 	bl	13468 <find_cf_cfg>
	if (!cfg) {
   1561a:	4606      	mov	r6, r0
   1561c:	b1b8      	cbz	r0, 1564e <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1561e:	4629      	mov	r1, r5
   15620:	7a20      	ldrb	r0, [r4, #8]
   15622:	f006 fe24 	bl	1c26e <bt_addr_le_is_bonded>
   15626:	b928      	cbnz	r0, 15634 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   15628:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1562a:	b00d      	add	sp, #52	; 0x34
   1562c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15630:	f007 bc94 	b.w	1cf5c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15634:	1c70      	adds	r0, r6, #1
   15636:	4629      	mov	r1, r5
   15638:	f007 fc4a 	bl	1ced0 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1563c:	360c      	adds	r6, #12
   1563e:	e8d6 3fef 	ldaex	r3, [r6]
   15642:	f023 0302 	bic.w	r3, r3, #2
   15646:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1564a:	2a00      	cmp	r2, #0
   1564c:	d1f7      	bne.n	1563e <bt_gatt_disconnected+0x146>
}
   1564e:	b00d      	add	sp, #52	; 0x34
   15650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15654:	00013cbd 	.word	0x00013cbd
   15658:	00022133 	.word	0x00022133
   1565c:	00022102 	.word	0x00022102
   15660:	00013971 	.word	0x00013971

00015664 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15664:	b570      	push	{r4, r5, r6, lr}
   15666:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15668:	2400      	movs	r4, #0
   1566a:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1566c:	4b09      	ldr	r3, [pc, #36]	; (15694 <bt_smp_accept+0x30>)
   1566e:	fb06 f504 	mul.w	r5, r6, r4
   15672:	58e8      	ldr	r0, [r5, r3]
   15674:	b148      	cbz	r0, 1568a <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15676:	3401      	adds	r4, #1
   15678:	2c05      	cmp	r4, #5
   1567a:	d1f8      	bne.n	1566e <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1567c:	4806      	ldr	r0, [pc, #24]	; (15698 <bt_smp_accept+0x34>)
   1567e:	2145      	movs	r1, #69	; 0x45
   15680:	f005 fa04 	bl	1aa8c <printk>
   15684:	f06f 000b 	mvn.w	r0, #11
   15688:	e003      	b.n	15692 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   1568a:	4a04      	ldr	r2, [pc, #16]	; (1569c <bt_smp_accept+0x38>)
   1568c:	442b      	add	r3, r5
   1568e:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   15690:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   15692:	bd70      	pop	{r4, r5, r6, pc}
   15694:	200093d0 	.word	0x200093d0
   15698:	00022144 	.word	0x00022144
   1569c:	0001eea8 	.word	0x0001eea8

000156a0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   156a0:	222c      	movs	r2, #44	; 0x2c
   156a2:	4b02      	ldr	r3, [pc, #8]	; (156ac <net_buf_pool_get+0xc>)
   156a4:	fb02 3000 	mla	r0, r2, r0, r3
   156a8:	4770      	bx	lr
   156aa:	bf00      	nop
   156ac:	20008580 	.word	0x20008580

000156b0 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   156b0:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   156b2:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   156b4:	4b04      	ldr	r3, [pc, #16]	; (156c8 <net_buf_id+0x18>)
   156b6:	fb01 3302 	mla	r3, r1, r2, r3
   156ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156bc:	1ac0      	subs	r0, r0, r3
}
   156be:	4b03      	ldr	r3, [pc, #12]	; (156cc <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   156c0:	10c0      	asrs	r0, r0, #3
}
   156c2:	4358      	muls	r0, r3
   156c4:	4770      	bx	lr
   156c6:	bf00      	nop
   156c8:	20008580 	.word	0x20008580
   156cc:	aaaaaaab 	.word	0xaaaaaaab

000156d0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   156d0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   156d2:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   156d4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   156d6:	4b09      	ldr	r3, [pc, #36]	; (156fc <fixed_data_alloc+0x2c>)
   156d8:	fb04 3302 	mla	r3, r4, r2, r3
   156dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   156de:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   156e0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   156e2:	6823      	ldr	r3, [r4, #0]
   156e4:	429a      	cmp	r2, r3
   156e6:	bf94      	ite	ls
   156e8:	600a      	strls	r2, [r1, #0]
   156ea:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   156ec:	f7ff ffe0 	bl	156b0 <net_buf_id>
   156f0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   156f4:	fb02 3000 	mla	r0, r2, r0, r3
   156f8:	bd10      	pop	{r4, pc}
   156fa:	bf00      	nop
   156fc:	20008580 	.word	0x20008580

00015700 <net_buf_reset>:
{
   15700:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   15702:	7943      	ldrb	r3, [r0, #5]
{
   15704:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   15706:	b143      	cbz	r3, 1571a <net_buf_reset+0x1a>
   15708:	490c      	ldr	r1, [pc, #48]	; (1573c <net_buf_reset+0x3c>)
   1570a:	480d      	ldr	r0, [pc, #52]	; (15740 <net_buf_reset+0x40>)
   1570c:	224f      	movs	r2, #79	; 0x4f
   1570e:	f005 f9bd 	bl	1aa8c <printk>
   15712:	214f      	movs	r1, #79	; 0x4f
   15714:	4809      	ldr	r0, [pc, #36]	; (1573c <net_buf_reset+0x3c>)
   15716:	f005 fc5f 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1571a:	6823      	ldr	r3, [r4, #0]
   1571c:	b143      	cbz	r3, 15730 <net_buf_reset+0x30>
   1571e:	4907      	ldr	r1, [pc, #28]	; (1573c <net_buf_reset+0x3c>)
   15720:	4807      	ldr	r0, [pc, #28]	; (15740 <net_buf_reset+0x40>)
   15722:	2250      	movs	r2, #80	; 0x50
   15724:	f005 f9b2 	bl	1aa8c <printk>
   15728:	2150      	movs	r1, #80	; 0x50
   1572a:	4804      	ldr	r0, [pc, #16]	; (1573c <net_buf_reset+0x3c>)
   1572c:	f005 fc54 	bl	1afd8 <assert_post_action>
	buf->len  = 0U;
   15730:	2300      	movs	r3, #0
   15732:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   15734:	6923      	ldr	r3, [r4, #16]
   15736:	60a3      	str	r3, [r4, #8]
}
   15738:	bd10      	pop	{r4, pc}
   1573a:	bf00      	nop
   1573c:	00022175 	.word	0x00022175
   15740:	0001fb49 	.word	0x0001fb49

00015744 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15748:	4605      	mov	r5, r0
   1574a:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1574c:	4610      	mov	r0, r2
   1574e:	4619      	mov	r1, r3
{
   15750:	4691      	mov	r9, r2
   15752:	4698      	mov	r8, r3
   15754:	4617      	mov	r7, r2
   15756:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   15758:	f008 fd24 	bl	1e1a4 <z_timeout_end_calc>
   1575c:	4682      	mov	sl, r0
   1575e:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15760:	b945      	cbnz	r5, 15774 <net_buf_alloc_len+0x30>
   15762:	494a      	ldr	r1, [pc, #296]	; (1588c <net_buf_alloc_len+0x148>)
   15764:	484a      	ldr	r0, [pc, #296]	; (15890 <net_buf_alloc_len+0x14c>)
   15766:	22ed      	movs	r2, #237	; 0xed
   15768:	f005 f990 	bl	1aa8c <printk>
   1576c:	21ed      	movs	r1, #237	; 0xed
   1576e:	4847      	ldr	r0, [pc, #284]	; (1588c <net_buf_alloc_len+0x148>)
   15770:	f005 fc32 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   15774:	f04f 0320 	mov.w	r3, #32
   15778:	f3ef 8111 	mrs	r1, BASEPRI
   1577c:	f383 8811 	msr	BASEPRI, r3
   15780:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15784:	8beb      	ldrh	r3, [r5, #30]
   15786:	2b00      	cmp	r3, #0
   15788:	d055      	beq.n	15836 <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1578a:	8baa      	ldrh	r2, [r5, #28]
   1578c:	429a      	cmp	r2, r3
   1578e:	d93e      	bls.n	1580e <net_buf_alloc_len+0xca>
   15790:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   15792:	2200      	movs	r2, #0
   15794:	2300      	movs	r3, #0
   15796:	4628      	mov	r0, r5
   15798:	f002 ff34 	bl	18604 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1579c:	9900      	ldr	r1, [sp, #0]
   1579e:	4604      	mov	r4, r0
   157a0:	2800      	cmp	r0, #0
   157a2:	d034      	beq.n	1580e <net_buf_alloc_len+0xca>
	__asm__ volatile(
   157a4:	f381 8811 	msr	BASEPRI, r1
   157a8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   157ac:	9d01      	ldr	r5, [sp, #4]
   157ae:	2d00      	cmp	r5, #0
   157b0:	d069      	beq.n	15886 <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   157b2:	ea58 0309 	orrs.w	r3, r8, r9
   157b6:	d00f      	beq.n	157d8 <net_buf_alloc_len+0x94>
   157b8:	f1b8 3fff 	cmp.w	r8, #4294967295
   157bc:	bf08      	it	eq
   157be:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   157c2:	d009      	beq.n	157d8 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   157c4:	f004 fd08 	bl	1a1d8 <z_tick_get>
   157c8:	ebba 0700 	subs.w	r7, sl, r0
   157cc:	eb6b 0601 	sbc.w	r6, fp, r1
   157d0:	2e00      	cmp	r6, #0
   157d2:	bfbc      	itt	lt
   157d4:	2700      	movlt	r7, #0
   157d6:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   157d8:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   157dc:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   157de:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15894 <net_buf_alloc_len+0x150>
   157e2:	463a      	mov	r2, r7
   157e4:	fb09 8303 	mla	r3, r9, r3, r8
   157e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   157ea:	4620      	mov	r0, r4
   157ec:	681b      	ldr	r3, [r3, #0]
   157ee:	a901      	add	r1, sp, #4
   157f0:	f8d3 a000 	ldr.w	sl, [r3]
   157f4:	4633      	mov	r3, r6
   157f6:	47d0      	blx	sl
   157f8:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   157fa:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   157fc:	bb58      	cbnz	r0, 15856 <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   157fe:	79a0      	ldrb	r0, [r4, #6]
   15800:	4621      	mov	r1, r4
   15802:	fb00 8009 	mla	r0, r0, r9, r8
   15806:	f008 fc02 	bl	1e00e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1580a:	4634      	mov	r4, r6
}
   1580c:	e01f      	b.n	1584e <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   1580e:	8beb      	ldrh	r3, [r5, #30]
   15810:	1e5a      	subs	r2, r3, #1
   15812:	83ea      	strh	r2, [r5, #30]
   15814:	f381 8811 	msr	BASEPRI, r1
   15818:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1581c:	2018      	movs	r0, #24
   1581e:	8bac      	ldrh	r4, [r5, #28]
   15820:	1ae3      	subs	r3, r4, r3
   15822:	6aac      	ldr	r4, [r5, #40]	; 0x28
   15824:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   15828:	481a      	ldr	r0, [pc, #104]	; (15894 <net_buf_alloc_len+0x150>)
   1582a:	4b1b      	ldr	r3, [pc, #108]	; (15898 <net_buf_alloc_len+0x154>)
   1582c:	1a2d      	subs	r5, r5, r0
   1582e:	10ad      	asrs	r5, r5, #2
   15830:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15832:	71a5      	strb	r5, [r4, #6]
		goto success;
   15834:	e7ba      	b.n	157ac <net_buf_alloc_len+0x68>
   15836:	f381 8811 	msr	BASEPRI, r1
   1583a:	f3bf 8f6f 	isb	sy
   1583e:	464a      	mov	r2, r9
   15840:	4643      	mov	r3, r8
   15842:	4628      	mov	r0, r5
   15844:	f002 fede 	bl	18604 <z_impl_k_queue_get>
	if (!buf) {
   15848:	4604      	mov	r4, r0
   1584a:	2800      	cmp	r0, #0
   1584c:	d1ae      	bne.n	157ac <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1584e:	4620      	mov	r0, r4
   15850:	b003      	add	sp, #12
   15852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   15856:	9b01      	ldr	r3, [sp, #4]
   15858:	429d      	cmp	r5, r3
   1585a:	d90a      	bls.n	15872 <net_buf_alloc_len+0x12e>
   1585c:	490b      	ldr	r1, [pc, #44]	; (1588c <net_buf_alloc_len+0x148>)
   1585e:	480c      	ldr	r0, [pc, #48]	; (15890 <net_buf_alloc_len+0x14c>)
   15860:	f240 124d 	movw	r2, #333	; 0x14d
   15864:	f005 f912 	bl	1aa8c <printk>
   15868:	f240 114d 	movw	r1, #333	; 0x14d
   1586c:	4807      	ldr	r0, [pc, #28]	; (1588c <net_buf_alloc_len+0x148>)
   1586e:	f005 fbb3 	bl	1afd8 <assert_post_action>
	buf->frags = NULL;
   15872:	2300      	movs	r3, #0
   15874:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15876:	2301      	movs	r3, #1
   15878:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1587a:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1587c:	4620      	mov	r0, r4
	buf->size  = size;
   1587e:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   15880:	f7ff ff3e 	bl	15700 <net_buf_reset>
	return buf;
   15884:	e7e3      	b.n	1584e <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   15886:	6125      	str	r5, [r4, #16]
   15888:	e7f3      	b.n	15872 <net_buf_alloc_len+0x12e>
   1588a:	bf00      	nop
   1588c:	00022175 	.word	0x00022175
   15890:	0001fb49 	.word	0x0001fb49
   15894:	20008580 	.word	0x20008580
   15898:	ba2e8ba3 	.word	0xba2e8ba3

0001589c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1589c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158a0:	4606      	mov	r6, r0
   158a2:	f002 feaf 	bl	18604 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   158a6:	4605      	mov	r5, r0
   158a8:	b140      	cbz	r0, 158bc <net_buf_get+0x20>
   158aa:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   158ac:	4f11      	ldr	r7, [pc, #68]	; (158f4 <net_buf_get+0x58>)
   158ae:	f8df 8048 	ldr.w	r8, [pc, #72]	; 158f8 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   158b2:	7963      	ldrb	r3, [r4, #5]
   158b4:	f013 0301 	ands.w	r3, r3, #1
   158b8:	d103      	bne.n	158c2 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   158ba:	6023      	str	r3, [r4, #0]

	return buf;
}
   158bc:	4628      	mov	r0, r5
   158be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   158c2:	2200      	movs	r2, #0
   158c4:	2300      	movs	r3, #0
   158c6:	4630      	mov	r0, r6
   158c8:	f002 fe9c 	bl	18604 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   158cc:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   158ce:	b950      	cbnz	r0, 158e6 <net_buf_get+0x4a>
   158d0:	4639      	mov	r1, r7
   158d2:	4640      	mov	r0, r8
   158d4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   158d8:	f005 f8d8 	bl	1aa8c <printk>
   158dc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   158e0:	4638      	mov	r0, r7
   158e2:	f005 fb79 	bl	1afd8 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   158e6:	7963      	ldrb	r3, [r4, #5]
   158e8:	f023 0301 	bic.w	r3, r3, #1
   158ec:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   158ee:	6824      	ldr	r4, [r4, #0]
   158f0:	e7df      	b.n	158b2 <net_buf_get+0x16>
   158f2:	bf00      	nop
   158f4:	00022175 	.word	0x00022175
   158f8:	0001fb49 	.word	0x0001fb49

000158fc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   158fc:	b538      	push	{r3, r4, r5, lr}
   158fe:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   15900:	4604      	mov	r4, r0
   15902:	b950      	cbnz	r0, 1591a <net_buf_simple_reserve+0x1e>
   15904:	490d      	ldr	r1, [pc, #52]	; (1593c <net_buf_simple_reserve+0x40>)
   15906:	480e      	ldr	r0, [pc, #56]	; (15940 <net_buf_simple_reserve+0x44>)
   15908:	f240 12bb 	movw	r2, #443	; 0x1bb
   1590c:	f005 f8be 	bl	1aa8c <printk>
   15910:	f240 11bb 	movw	r1, #443	; 0x1bb
   15914:	4809      	ldr	r0, [pc, #36]	; (1593c <net_buf_simple_reserve+0x40>)
   15916:	f005 fb5f 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1591a:	88a3      	ldrh	r3, [r4, #4]
   1591c:	b153      	cbz	r3, 15934 <net_buf_simple_reserve+0x38>
   1591e:	4907      	ldr	r1, [pc, #28]	; (1593c <net_buf_simple_reserve+0x40>)
   15920:	4807      	ldr	r0, [pc, #28]	; (15940 <net_buf_simple_reserve+0x44>)
   15922:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   15926:	f005 f8b1 	bl	1aa8c <printk>
   1592a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1592e:	4803      	ldr	r0, [pc, #12]	; (1593c <net_buf_simple_reserve+0x40>)
   15930:	f005 fb52 	bl	1afd8 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   15934:	68a3      	ldr	r3, [r4, #8]
   15936:	442b      	add	r3, r5
   15938:	6023      	str	r3, [r4, #0]
}
   1593a:	bd38      	pop	{r3, r4, r5, pc}
   1593c:	00022175 	.word	0x00022175
   15940:	0001fb49 	.word	0x0001fb49

00015944 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   15944:	b538      	push	{r3, r4, r5, lr}
   15946:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   15948:	4605      	mov	r5, r0
   1594a:	b950      	cbnz	r0, 15962 <net_buf_put+0x1e>
   1594c:	4912      	ldr	r1, [pc, #72]	; (15998 <net_buf_put+0x54>)
   1594e:	4813      	ldr	r0, [pc, #76]	; (1599c <net_buf_put+0x58>)
   15950:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   15954:	f005 f89a 	bl	1aa8c <printk>
   15958:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1595c:	480e      	ldr	r0, [pc, #56]	; (15998 <net_buf_put+0x54>)
   1595e:	f005 fb3b 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   15962:	b954      	cbnz	r4, 1597a <net_buf_put+0x36>
   15964:	490c      	ldr	r1, [pc, #48]	; (15998 <net_buf_put+0x54>)
   15966:	480d      	ldr	r0, [pc, #52]	; (1599c <net_buf_put+0x58>)
   15968:	f240 12f9 	movw	r2, #505	; 0x1f9
   1596c:	f005 f88e 	bl	1aa8c <printk>
   15970:	f240 11f9 	movw	r1, #505	; 0x1f9
   15974:	4808      	ldr	r0, [pc, #32]	; (15998 <net_buf_put+0x54>)
   15976:	f005 fb2f 	bl	1afd8 <assert_post_action>
{
   1597a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1597c:	6811      	ldr	r1, [r2, #0]
   1597e:	b929      	cbnz	r1, 1598c <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   15980:	4621      	mov	r1, r4
   15982:	4628      	mov	r0, r5
}
   15984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   15988:	f002 bde8 	b.w	1855c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1598c:	7953      	ldrb	r3, [r2, #5]
   1598e:	f043 0301 	orr.w	r3, r3, #1
   15992:	7153      	strb	r3, [r2, #5]
   15994:	460a      	mov	r2, r1
   15996:	e7f1      	b.n	1597c <net_buf_put+0x38>
   15998:	00022175 	.word	0x00022175
   1599c:	0001fb49 	.word	0x0001fb49

000159a0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   159a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   159a4:	4605      	mov	r5, r0
   159a6:	b328      	cbz	r0, 159f4 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   159a8:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   159aa:	f04f 082c 	mov.w	r8, #44	; 0x2c
   159ae:	4e1b      	ldr	r6, [pc, #108]	; (15a1c <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   159b0:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   159b2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   159b4:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   159b6:	3b01      	subs	r3, #1
   159b8:	b2db      	uxtb	r3, r3
   159ba:	7123      	strb	r3, [r4, #4]
   159bc:	b9c3      	cbnz	r3, 159f0 <net_buf_unref+0x50>
		if (buf->__buf) {
   159be:	6921      	ldr	r1, [r4, #16]
   159c0:	b159      	cbz	r1, 159da <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   159c2:	7963      	ldrb	r3, [r4, #5]
   159c4:	079b      	lsls	r3, r3, #30
   159c6:	d407      	bmi.n	159d8 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   159c8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   159ca:	4620      	mov	r0, r4
   159cc:	fb08 6303 	mla	r3, r8, r3, r6
   159d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   159d2:	681b      	ldr	r3, [r3, #0]
   159d4:	689b      	ldr	r3, [r3, #8]
   159d6:	4798      	blx	r3
			buf->__buf = NULL;
   159d8:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   159da:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   159dc:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   159de:	fb08 6300 	mla	r3, r8, r0, r6
   159e2:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   159e4:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   159e6:	b193      	cbz	r3, 15a0e <net_buf_unref+0x6e>
			pool->destroy(buf);
   159e8:	4620      	mov	r0, r4
   159ea:	4798      	blx	r3
	while (buf) {
   159ec:	2d00      	cmp	r5, #0
   159ee:	d1df      	bne.n	159b0 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   159f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   159f4:	490a      	ldr	r1, [pc, #40]	; (15a20 <net_buf_unref+0x80>)
   159f6:	480b      	ldr	r0, [pc, #44]	; (15a24 <net_buf_unref+0x84>)
   159f8:	f44f 7202 	mov.w	r2, #520	; 0x208
   159fc:	f005 f846 	bl	1aa8c <printk>
}
   15a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   15a04:	f44f 7102 	mov.w	r1, #520	; 0x208
   15a08:	4805      	ldr	r0, [pc, #20]	; (15a20 <net_buf_unref+0x80>)
   15a0a:	f005 bae5 	b.w	1afd8 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   15a0e:	4621      	mov	r1, r4
   15a10:	fb00 6008 	mla	r0, r0, r8, r6
   15a14:	f008 fafb 	bl	1e00e <k_queue_prepend>
}
   15a18:	e7e8      	b.n	159ec <net_buf_unref+0x4c>
   15a1a:	bf00      	nop
   15a1c:	20008580 	.word	0x20008580
   15a20:	00022175 	.word	0x00022175
   15a24:	0001fb49 	.word	0x0001fb49

00015a28 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   15a28:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   15a2a:	4604      	mov	r4, r0
   15a2c:	b950      	cbnz	r0, 15a44 <net_buf_ref+0x1c>
   15a2e:	4908      	ldr	r1, [pc, #32]	; (15a50 <net_buf_ref+0x28>)
   15a30:	4808      	ldr	r0, [pc, #32]	; (15a54 <net_buf_ref+0x2c>)
   15a32:	f240 2237 	movw	r2, #567	; 0x237
   15a36:	f005 f829 	bl	1aa8c <printk>
   15a3a:	f240 2137 	movw	r1, #567	; 0x237
   15a3e:	4804      	ldr	r0, [pc, #16]	; (15a50 <net_buf_ref+0x28>)
   15a40:	f005 faca 	bl	1afd8 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   15a44:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   15a46:	4620      	mov	r0, r4
	buf->ref++;
   15a48:	3301      	adds	r3, #1
   15a4a:	7123      	strb	r3, [r4, #4]
}
   15a4c:	bd10      	pop	{r4, pc}
   15a4e:	bf00      	nop
   15a50:	00022175 	.word	0x00022175
   15a54:	0001fb49 	.word	0x0001fb49

00015a58 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   15a58:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   15a5a:	4604      	mov	r4, r0
   15a5c:	b950      	cbnz	r0, 15a74 <net_buf_frag_last+0x1c>
   15a5e:	4908      	ldr	r1, [pc, #32]	; (15a80 <net_buf_frag_last+0x28>)
   15a60:	4808      	ldr	r0, [pc, #32]	; (15a84 <net_buf_frag_last+0x2c>)
   15a62:	f44f 721d 	mov.w	r2, #628	; 0x274
   15a66:	f005 f811 	bl	1aa8c <printk>
   15a6a:	f44f 711d 	mov.w	r1, #628	; 0x274
   15a6e:	4804      	ldr	r0, [pc, #16]	; (15a80 <net_buf_frag_last+0x28>)
   15a70:	f005 fab2 	bl	1afd8 <assert_post_action>

	while (buf->frags) {
   15a74:	4620      	mov	r0, r4
   15a76:	6824      	ldr	r4, [r4, #0]
   15a78:	2c00      	cmp	r4, #0
   15a7a:	d1fb      	bne.n	15a74 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   15a7c:	bd10      	pop	{r4, pc}
   15a7e:	bf00      	nop
   15a80:	00022175 	.word	0x00022175
   15a84:	0001fb49 	.word	0x0001fb49

00015a88 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   15a88:	b538      	push	{r3, r4, r5, lr}
   15a8a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   15a8c:	4604      	mov	r4, r0
   15a8e:	b950      	cbnz	r0, 15aa6 <net_buf_frag_insert+0x1e>
   15a90:	490f      	ldr	r1, [pc, #60]	; (15ad0 <net_buf_frag_insert+0x48>)
   15a92:	4810      	ldr	r0, [pc, #64]	; (15ad4 <net_buf_frag_insert+0x4c>)
   15a94:	f240 227f 	movw	r2, #639	; 0x27f
   15a98:	f004 fff8 	bl	1aa8c <printk>
   15a9c:	f240 217f 	movw	r1, #639	; 0x27f
   15aa0:	480b      	ldr	r0, [pc, #44]	; (15ad0 <net_buf_frag_insert+0x48>)
   15aa2:	f005 fa99 	bl	1afd8 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   15aa6:	b955      	cbnz	r5, 15abe <net_buf_frag_insert+0x36>
   15aa8:	4909      	ldr	r1, [pc, #36]	; (15ad0 <net_buf_frag_insert+0x48>)
   15aaa:	480a      	ldr	r0, [pc, #40]	; (15ad4 <net_buf_frag_insert+0x4c>)
   15aac:	f44f 7220 	mov.w	r2, #640	; 0x280
   15ab0:	f004 ffec 	bl	1aa8c <printk>
   15ab4:	f44f 7120 	mov.w	r1, #640	; 0x280
   15ab8:	4805      	ldr	r0, [pc, #20]	; (15ad0 <net_buf_frag_insert+0x48>)
   15aba:	f005 fa8d 	bl	1afd8 <assert_post_action>

	if (parent->frags) {
   15abe:	6823      	ldr	r3, [r4, #0]
   15ac0:	b123      	cbz	r3, 15acc <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   15ac2:	4628      	mov	r0, r5
   15ac4:	f7ff ffc8 	bl	15a58 <net_buf_frag_last>
   15ac8:	6823      	ldr	r3, [r4, #0]
   15aca:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   15acc:	6025      	str	r5, [r4, #0]
}
   15ace:	bd38      	pop	{r3, r4, r5, pc}
   15ad0:	00022175 	.word	0x00022175
   15ad4:	0001fb49 	.word	0x0001fb49

00015ad8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   15ad8:	b538      	push	{r3, r4, r5, lr}
   15ada:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   15adc:	460d      	mov	r5, r1
   15ade:	b951      	cbnz	r1, 15af6 <net_buf_frag_add+0x1e>
   15ae0:	490c      	ldr	r1, [pc, #48]	; (15b14 <net_buf_frag_add+0x3c>)
   15ae2:	480d      	ldr	r0, [pc, #52]	; (15b18 <net_buf_frag_add+0x40>)
   15ae4:	f240 228b 	movw	r2, #651	; 0x28b
   15ae8:	f004 ffd0 	bl	1aa8c <printk>
   15aec:	f240 218b 	movw	r1, #651	; 0x28b
   15af0:	4808      	ldr	r0, [pc, #32]	; (15b14 <net_buf_frag_add+0x3c>)
   15af2:	f005 fa71 	bl	1afd8 <assert_post_action>

	if (!head) {
   15af6:	b924      	cbnz	r4, 15b02 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   15af8:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   15afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   15afe:	f7ff bf93 	b.w	15a28 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   15b02:	4620      	mov	r0, r4
   15b04:	f7ff ffa8 	bl	15a58 <net_buf_frag_last>
   15b08:	4629      	mov	r1, r5
   15b0a:	f7ff ffbd 	bl	15a88 <net_buf_frag_insert>
}
   15b0e:	4620      	mov	r0, r4
   15b10:	bd38      	pop	{r3, r4, r5, pc}
   15b12:	bf00      	nop
   15b14:	00022175 	.word	0x00022175
   15b18:	0001fb49 	.word	0x0001fb49

00015b1c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   15b1c:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   15b1e:	6882      	ldr	r2, [r0, #8]
   15b20:	6803      	ldr	r3, [r0, #0]
{
   15b22:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   15b24:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15b26:	4299      	cmp	r1, r3
{
   15b28:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15b2a:	d90a      	bls.n	15b42 <net_buf_simple_push+0x26>
   15b2c:	4908      	ldr	r1, [pc, #32]	; (15b50 <net_buf_simple_push+0x34>)
   15b2e:	4809      	ldr	r0, [pc, #36]	; (15b54 <net_buf_simple_push+0x38>)
   15b30:	f240 4204 	movw	r2, #1028	; 0x404
   15b34:	f004 ffaa 	bl	1aa8c <printk>
   15b38:	f240 4104 	movw	r1, #1028	; 0x404
   15b3c:	4804      	ldr	r0, [pc, #16]	; (15b50 <net_buf_simple_push+0x34>)
   15b3e:	f005 fa4b 	bl	1afd8 <assert_post_action>
	buf->data -= len;
   15b42:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   15b44:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   15b46:	1b40      	subs	r0, r0, r5
	buf->len += len;
   15b48:	440d      	add	r5, r1
	buf->data -= len;
   15b4a:	6020      	str	r0, [r4, #0]
	buf->len += len;
   15b4c:	80a5      	strh	r5, [r4, #4]
}
   15b4e:	bd38      	pop	{r3, r4, r5, pc}
   15b50:	00022175 	.word	0x00022175
   15b54:	0001fb49 	.word	0x0001fb49

00015b58 <net_buf_simple_pull>:
{
   15b58:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15b5a:	8883      	ldrh	r3, [r0, #4]
{
   15b5c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   15b5e:	428b      	cmp	r3, r1
{
   15b60:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   15b62:	d20a      	bcs.n	15b7a <net_buf_simple_pull+0x22>
   15b64:	4908      	ldr	r1, [pc, #32]	; (15b88 <net_buf_simple_pull+0x30>)
   15b66:	4809      	ldr	r0, [pc, #36]	; (15b8c <net_buf_simple_pull+0x34>)
   15b68:	f240 4264 	movw	r2, #1124	; 0x464
   15b6c:	f004 ff8e 	bl	1aa8c <printk>
   15b70:	f240 4164 	movw	r1, #1124	; 0x464
   15b74:	4804      	ldr	r0, [pc, #16]	; (15b88 <net_buf_simple_pull+0x30>)
   15b76:	f005 fa2f 	bl	1afd8 <assert_post_action>
	buf->len -= len;
   15b7a:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   15b7c:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   15b7e:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   15b80:	4428      	add	r0, r5
	buf->len -= len;
   15b82:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   15b84:	6020      	str	r0, [r4, #0]
}
   15b86:	bd38      	pop	{r3, r4, r5, pc}
   15b88:	00022175 	.word	0x00022175
   15b8c:	0001fb49 	.word	0x0001fb49

00015b90 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   15b90:	8883      	ldrh	r3, [r0, #4]
{
   15b92:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15b94:	428b      	cmp	r3, r1
{
   15b96:	4604      	mov	r4, r0
   15b98:	460d      	mov	r5, r1
	void *data = buf->data;
   15b9a:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   15b9c:	d20a      	bcs.n	15bb4 <net_buf_simple_pull_mem+0x24>
   15b9e:	4909      	ldr	r1, [pc, #36]	; (15bc4 <net_buf_simple_pull_mem+0x34>)
   15ba0:	4809      	ldr	r0, [pc, #36]	; (15bc8 <net_buf_simple_pull_mem+0x38>)
   15ba2:	f44f 628e 	mov.w	r2, #1136	; 0x470
   15ba6:	f004 ff71 	bl	1aa8c <printk>
   15baa:	f44f 618e 	mov.w	r1, #1136	; 0x470
   15bae:	4805      	ldr	r0, [pc, #20]	; (15bc4 <net_buf_simple_pull_mem+0x34>)
   15bb0:	f005 fa12 	bl	1afd8 <assert_post_action>
	buf->len -= len;
   15bb4:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   15bb6:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   15bb8:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   15bba:	4429      	add	r1, r5
}
   15bbc:	4630      	mov	r0, r6
	buf->len -= len;
   15bbe:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   15bc0:	6021      	str	r1, [r4, #0]
}
   15bc2:	bd70      	pop	{r4, r5, r6, pc}
   15bc4:	00022175 	.word	0x00022175
   15bc8:	0001fb49 	.word	0x0001fb49

00015bcc <net_buf_simple_add>:
{
   15bcc:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   15bce:	6803      	ldr	r3, [r0, #0]
   15bd0:	8886      	ldrh	r6, [r0, #4]
   15bd2:	4604      	mov	r4, r0
   15bd4:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15bd6:	f007 fcba 	bl	1d54e <net_buf_simple_tailroom>
   15bda:	4288      	cmp	r0, r1
{
   15bdc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15bde:	d20a      	bcs.n	15bf6 <net_buf_simple_add+0x2a>
   15be0:	4907      	ldr	r1, [pc, #28]	; (15c00 <net_buf_simple_add+0x34>)
   15be2:	4808      	ldr	r0, [pc, #32]	; (15c04 <net_buf_simple_add+0x38>)
   15be4:	f240 3215 	movw	r2, #789	; 0x315
   15be8:	f004 ff50 	bl	1aa8c <printk>
   15bec:	f240 3115 	movw	r1, #789	; 0x315
   15bf0:	4803      	ldr	r0, [pc, #12]	; (15c00 <net_buf_simple_add+0x34>)
   15bf2:	f005 f9f1 	bl	1afd8 <assert_post_action>
	buf->len += len;
   15bf6:	88a1      	ldrh	r1, [r4, #4]
}
   15bf8:	4630      	mov	r0, r6
	buf->len += len;
   15bfa:	440d      	add	r5, r1
   15bfc:	80a5      	strh	r5, [r4, #4]
}
   15bfe:	bd70      	pop	{r4, r5, r6, pc}
   15c00:	00022175 	.word	0x00022175
   15c04:	0001fb49 	.word	0x0001fb49

00015c08 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   15c08:	b570      	push	{r4, r5, r6, lr}
   15c0a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   15c0c:	460c      	mov	r4, r1
	return port->data;
   15c0e:	68c5      	ldr	r5, [r0, #12]
   15c10:	b941      	cbnz	r1, 15c24 <gpio_nrfx_manage_callback+0x1c>
   15c12:	491e      	ldr	r1, [pc, #120]	; (15c8c <gpio_nrfx_manage_callback+0x84>)
   15c14:	481e      	ldr	r0, [pc, #120]	; (15c90 <gpio_nrfx_manage_callback+0x88>)
   15c16:	2224      	movs	r2, #36	; 0x24
   15c18:	f004 ff38 	bl	1aa8c <printk>
   15c1c:	2124      	movs	r1, #36	; 0x24
   15c1e:	481b      	ldr	r0, [pc, #108]	; (15c8c <gpio_nrfx_manage_callback+0x84>)
   15c20:	f005 f9da 	bl	1afd8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15c24:	6863      	ldr	r3, [r4, #4]
   15c26:	b943      	cbnz	r3, 15c3a <gpio_nrfx_manage_callback+0x32>
   15c28:	4918      	ldr	r1, [pc, #96]	; (15c8c <gpio_nrfx_manage_callback+0x84>)
   15c2a:	4819      	ldr	r0, [pc, #100]	; (15c90 <gpio_nrfx_manage_callback+0x88>)
   15c2c:	2225      	movs	r2, #37	; 0x25
   15c2e:	f004 ff2d 	bl	1aa8c <printk>
   15c32:	2125      	movs	r1, #37	; 0x25
   15c34:	4815      	ldr	r0, [pc, #84]	; (15c8c <gpio_nrfx_manage_callback+0x84>)
   15c36:	f005 f9cf 	bl	1afd8 <assert_post_action>
	return list->head;
   15c3a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15c3c:	b15b      	cbz	r3, 15c56 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15c3e:	2200      	movs	r2, #0
   15c40:	429c      	cmp	r4, r3
   15c42:	d112      	bne.n	15c6a <gpio_nrfx_manage_callback+0x62>
	return node->next;
   15c44:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   15c46:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   15c48:	b952      	cbnz	r2, 15c60 <gpio_nrfx_manage_callback+0x58>
   15c4a:	42a1      	cmp	r1, r4
	list->head = node;
   15c4c:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15c4e:	d100      	bne.n	15c52 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   15c50:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15c52:	2300      	movs	r3, #0
   15c54:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15c56:	b96e      	cbnz	r6, 15c74 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15c58:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   15c5a:	bd70      	pop	{r4, r5, r6, pc}
   15c5c:	460b      	mov	r3, r1
   15c5e:	e7ef      	b.n	15c40 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   15c60:	42a1      	cmp	r1, r4
	parent->next = child;
   15c62:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15c64:	bf08      	it	eq
   15c66:	60aa      	streq	r2, [r5, #8]
}
   15c68:	e7f3      	b.n	15c52 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   15c6a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15c6c:	461a      	mov	r2, r3
   15c6e:	2900      	cmp	r1, #0
   15c70:	d1f4      	bne.n	15c5c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   15c72:	b13e      	cbz	r6, 15c84 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   15c74:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15c76:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   15c78:	6023      	str	r3, [r4, #0]
	list->head = node;
   15c7a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15c7c:	2800      	cmp	r0, #0
   15c7e:	d1eb      	bne.n	15c58 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   15c80:	60ac      	str	r4, [r5, #8]
}
   15c82:	e7ea      	b.n	15c5a <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   15c84:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15c88:	e7e7      	b.n	15c5a <gpio_nrfx_manage_callback+0x52>
   15c8a:	bf00      	nop
   15c8c:	000221a1 	.word	0x000221a1
   15c90:	0001fb49 	.word	0x0001fb49

00015c94 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15c94:	6802      	ldr	r2, [r0, #0]
{
   15c96:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15c98:	0953      	lsrs	r3, r2, #5
{
   15c9a:	4604      	mov	r4, r0
    switch (port)
   15c9c:	d029      	beq.n	15cf2 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15c9e:	2b01      	cmp	r3, #1
   15ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15ca4:	bf18      	it	ne
   15ca6:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15ca8:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15cac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15cae:	07db      	lsls	r3, r3, #31
   15cb0:	d40a      	bmi.n	15cc8 <nrf_gpio_pin_port_decode+0x34>
   15cb2:	4912      	ldr	r1, [pc, #72]	; (15cfc <nrf_gpio_pin_port_decode+0x68>)
   15cb4:	4812      	ldr	r0, [pc, #72]	; (15d00 <nrf_gpio_pin_port_decode+0x6c>)
   15cb6:	f240 221a 	movw	r2, #538	; 0x21a
   15cba:	f004 fee7 	bl	1aa8c <printk>
   15cbe:	f240 211a 	movw	r1, #538	; 0x21a
   15cc2:	480e      	ldr	r0, [pc, #56]	; (15cfc <nrf_gpio_pin_port_decode+0x68>)
   15cc4:	f005 f988 	bl	1afd8 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15cc8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15cca:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15cce:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15cd0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15cd2:	d00c      	beq.n	15cee <nrf_gpio_pin_port_decode+0x5a>
   15cd4:	2b01      	cmp	r3, #1
   15cd6:	d00f      	beq.n	15cf8 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15cd8:	4908      	ldr	r1, [pc, #32]	; (15cfc <nrf_gpio_pin_port_decode+0x68>)
   15cda:	4809      	ldr	r0, [pc, #36]	; (15d00 <nrf_gpio_pin_port_decode+0x6c>)
   15cdc:	f240 221f 	movw	r2, #543	; 0x21f
   15ce0:	f004 fed4 	bl	1aa8c <printk>
   15ce4:	f240 211f 	movw	r1, #543	; 0x21f
   15ce8:	4804      	ldr	r0, [pc, #16]	; (15cfc <nrf_gpio_pin_port_decode+0x68>)
   15cea:	f005 f975 	bl	1afd8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15cee:	4805      	ldr	r0, [pc, #20]	; (15d04 <nrf_gpio_pin_port_decode+0x70>)
}
   15cf0:	bd10      	pop	{r4, pc}
    switch (port)
   15cf2:	f04f 33ff 	mov.w	r3, #4294967295
   15cf6:	e7d7      	b.n	15ca8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15cf8:	4803      	ldr	r0, [pc, #12]	; (15d08 <nrf_gpio_pin_port_decode+0x74>)
   15cfa:	e7f9      	b.n	15cf0 <nrf_gpio_pin_port_decode+0x5c>
   15cfc:	000221ce 	.word	0x000221ce
   15d00:	0001fb49 	.word	0x0001fb49
   15d04:	40842500 	.word	0x40842500
   15d08:	40842800 	.word	0x40842800

00015d0c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15d0c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15d0e:	4b09      	ldr	r3, [pc, #36]	; (15d34 <gpio_nrfx_init+0x28>)
   15d10:	781a      	ldrb	r2, [r3, #0]
   15d12:	b96a      	cbnz	r2, 15d30 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15d14:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15d16:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   15d18:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15d1a:	2105      	movs	r1, #5
   15d1c:	f7f7 ff8a 	bl	dc34 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15d20:	202f      	movs	r0, #47	; 0x2f
   15d22:	f7f7 ff69 	bl	dbf8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15d2a:	4b03      	ldr	r3, [pc, #12]	; (15d38 <gpio_nrfx_init+0x2c>)
   15d2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15d30:	2000      	movs	r0, #0
   15d32:	bd08      	pop	{r3, pc}
   15d34:	2000ea5c 	.word	0x2000ea5c
   15d38:	4002f000 	.word	0x4002f000

00015d3c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15d3c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15d44:	4680      	mov	r8, r0
   15d46:	460e      	mov	r6, r1
   15d48:	4617      	mov	r7, r2
   15d4a:	4699      	mov	r9, r3
	return port->data;
   15d4c:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15d4e:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15d52:	f040 80ab 	bne.w	15eac <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15d56:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15d58:	a801      	add	r0, sp, #4
   15d5a:	7a1b      	ldrb	r3, [r3, #8]
   15d5c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   15d60:	9301      	str	r3, [sp, #4]
   15d62:	f7ff ff97 	bl	15c94 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15d66:	9b01      	ldr	r3, [sp, #4]
   15d68:	3380      	adds	r3, #128	; 0x80
   15d6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15d6e:	07d8      	lsls	r0, r3, #31
   15d70:	f100 80bb 	bmi.w	15eea <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15d74:	2101      	movs	r1, #1
   15d76:	68e3      	ldr	r3, [r4, #12]
   15d78:	40b1      	lsls	r1, r6
   15d7a:	4319      	orrs	r1, r3
   15d7c:	60e1      	str	r1, [r4, #12]
   15d7e:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15d80:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15d82:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15d84:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15d86:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   15d8a:	bf0c      	ite	eq
   15d8c:	430b      	orreq	r3, r1
   15d8e:	438b      	bicne	r3, r1
   15d90:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15d92:	69a3      	ldr	r3, [r4, #24]
   15d94:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15d98:	bf0c      	ite	eq
   15d9a:	430b      	orreq	r3, r1
   15d9c:	438b      	bicne	r3, r1
   15d9e:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15da0:	6923      	ldr	r3, [r4, #16]
   15da2:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15da6:	bf0c      	ite	eq
   15da8:	4319      	orreq	r1, r3
   15daa:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15dae:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15db2:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15db4:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15db6:	4a4e      	ldr	r2, [pc, #312]	; (15ef0 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15db8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   15dbc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   15dc0:	f8d8 700c 	ldr.w	r7, [r8, #12]
   15dc4:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15dc6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15dca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   15dce:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15dd2:	428d      	cmp	r5, r1
   15dd4:	d175      	bne.n	15ec2 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   15dd6:	fa23 f100 	lsr.w	r1, r3, r0
   15dda:	07c9      	lsls	r1, r1, #31
   15ddc:	d571      	bpl.n	15ec2 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15dde:	0083      	lsls	r3, r0, #2
   15de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15de4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15de8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15dec:	f021 0101 	bic.w	r1, r1, #1
   15df0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   15df4:	2301      	movs	r3, #1
   15df6:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   15df8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   15dfc:	b2c0      	uxtb	r0, r0
   15dfe:	f001 f9bf 	bl	17180 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15e02:	4628      	mov	r0, r5
   15e04:	2100      	movs	r1, #0
   15e06:	f007 fbe6 	bl	1d5d6 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15e0a:	68f8      	ldr	r0, [r7, #12]
   15e0c:	40f0      	lsrs	r0, r6
   15e0e:	f010 0001 	ands.w	r0, r0, #1
   15e12:	d048      	beq.n	15ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   15e14:	6978      	ldr	r0, [r7, #20]
   15e16:	40f0      	lsrs	r0, r6
   15e18:	f010 0401 	ands.w	r4, r0, #1
   15e1c:	d059      	beq.n	15ed2 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   15e1e:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15e20:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   15e22:	40f3      	lsrs	r3, r6
   15e24:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15e26:	bf57      	itett	pl
   15e28:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15e2a:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15e2c:	fa21 f606 	lsrpl.w	r6, r1, r6
   15e30:	f006 0601 	andpl.w	r6, r6, #1
   15e34:	bf5c      	itt	pl
   15e36:	f1c6 0602 	rsbpl	r6, r6, #2
   15e3a:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15e3c:	f001 f9c0 	bl	171c0 <nrfx_gpiote_channel_alloc>
   15e40:	4b2c      	ldr	r3, [pc, #176]	; (15ef4 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   15e42:	4298      	cmp	r0, r3
   15e44:	d142      	bne.n	15ecc <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e46:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   15e48:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e4c:	022d      	lsls	r5, r5, #8
   15e4e:	008b      	lsls	r3, r1, #2
   15e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15e54:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15e58:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e5c:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15e60:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   15e64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15e68:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e6c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15e70:	4315      	orrs	r5, r2
   15e72:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   15e76:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15e7a:	4b1f      	ldr	r3, [pc, #124]	; (15ef8 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   15e7c:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e7e:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15e80:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15e84:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15e86:	008b      	lsls	r3, r1, #2
   15e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15e8c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15e90:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15e94:	f042 0201 	orr.w	r2, r2, #1
   15e98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15e9c:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   15e9e:	4a14      	ldr	r2, [pc, #80]	; (15ef0 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15ea0:	408b      	lsls	r3, r1
   15ea2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15ea6:	b003      	add	sp, #12
   15ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15eac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15eb0:	f47f af60 	bne.w	15d74 <gpio_nrfx_pin_interrupt_configure+0x38>
   15eb4:	2101      	movs	r1, #1
   15eb6:	fa01 f306 	lsl.w	r3, r1, r6
   15eba:	68e1      	ldr	r1, [r4, #12]
   15ebc:	ea21 0103 	bic.w	r1, r1, r3
   15ec0:	e75c      	b.n	15d7c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15ec2:	3001      	adds	r0, #1
   15ec4:	2808      	cmp	r0, #8
   15ec6:	f47f af7e 	bne.w	15dc6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   15eca:	e79a      	b.n	15e02 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   15ecc:	f06f 0012 	mvn.w	r0, #18
   15ed0:	e7e9      	b.n	15ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15ed2:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15ed4:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15ed6:	40f1      	lsrs	r1, r6
   15ed8:	f001 0101 	and.w	r1, r1, #1
   15edc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15ee0:	b2c9      	uxtb	r1, r1
   15ee2:	f007 fb78 	bl	1d5d6 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15ee6:	4620      	mov	r0, r4
   15ee8:	e7dd      	b.n	15ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   15eea:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15eee:	e7da      	b.n	15ea6 <gpio_nrfx_pin_interrupt_configure+0x16a>
   15ef0:	4002f000 	.word	0x4002f000
   15ef4:	0bad0000 	.word	0x0bad0000
   15ef8:	4002f100 	.word	0x4002f100

00015efc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15efc:	4b2e      	ldr	r3, [pc, #184]	; (15fb8 <gpio_nrfx_config+0xbc>)
{
   15efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f00:	4c2e      	ldr	r4, [pc, #184]	; (15fbc <gpio_nrfx_config+0xc0>)
   15f02:	4013      	ands	r3, r2
   15f04:	42a3      	cmp	r3, r4
	return port->config;
   15f06:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f08:	d044      	beq.n	15f94 <gpio_nrfx_config+0x98>
   15f0a:	d80e      	bhi.n	15f2a <gpio_nrfx_config+0x2e>
   15f0c:	2b06      	cmp	r3, #6
   15f0e:	d043      	beq.n	15f98 <gpio_nrfx_config+0x9c>
   15f10:	d806      	bhi.n	15f20 <gpio_nrfx_config+0x24>
   15f12:	2b00      	cmp	r3, #0
   15f14:	d040      	beq.n	15f98 <gpio_nrfx_config+0x9c>
   15f16:	2b02      	cmp	r3, #2
   15f18:	d040      	beq.n	15f9c <gpio_nrfx_config+0xa0>
   15f1a:	f06f 0015 	mvn.w	r0, #21
   15f1e:	e037      	b.n	15f90 <gpio_nrfx_config+0x94>
   15f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15f24:	d1f9      	bne.n	15f1a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15f26:	2401      	movs	r4, #1
   15f28:	e009      	b.n	15f3e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f2a:	4c25      	ldr	r4, [pc, #148]	; (15fc0 <gpio_nrfx_config+0xc4>)
   15f2c:	42a3      	cmp	r3, r4
   15f2e:	d037      	beq.n	15fa0 <gpio_nrfx_config+0xa4>
   15f30:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15f34:	d036      	beq.n	15fa4 <gpio_nrfx_config+0xa8>
   15f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15f3a:	d1ee      	bne.n	15f1a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15f3c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15f3e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15f40:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15f44:	bf4c      	ite	mi
   15f46:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15f48:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15f4c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15f50:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15f52:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15f56:	d507      	bpl.n	15f68 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15f58:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15f5a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15f5e:	d523      	bpl.n	15fa8 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15f60:	2301      	movs	r3, #1
   15f62:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15f64:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15f68:	7a03      	ldrb	r3, [r0, #8]
   15f6a:	f001 011f 	and.w	r1, r1, #31
   15f6e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15f72:	a801      	add	r0, sp, #4
   15f74:	9101      	str	r1, [sp, #4]
   15f76:	f7ff fe8d 	bl	15c94 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15f7a:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15f7c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15f80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15f84:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15f88:	3280      	adds	r2, #128	; 0x80
   15f8a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15f8e:	2000      	movs	r0, #0
}
   15f90:	b003      	add	sp, #12
   15f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15f94:	2407      	movs	r4, #7
   15f96:	e7d2      	b.n	15f3e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f98:	461c      	mov	r4, r3
   15f9a:	e7d0      	b.n	15f3e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15f9c:	2404      	movs	r4, #4
   15f9e:	e7ce      	b.n	15f3e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15fa0:	2405      	movs	r4, #5
   15fa2:	e7cc      	b.n	15f3e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15fa4:	2403      	movs	r4, #3
   15fa6:	e7ca      	b.n	15f3e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15fa8:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15faa:	bf42      	ittt	mi
   15fac:	2301      	movmi	r3, #1
   15fae:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15fb0:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15fb4:	e7d8      	b.n	15f68 <gpio_nrfx_config+0x6c>
   15fb6:	bf00      	nop
   15fb8:	00f00006 	.word	0x00f00006
   15fbc:	00100006 	.word	0x00100006
   15fc0:	00400002 	.word	0x00400002

00015fc4 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15fc8:	460f      	mov	r7, r1
   15fca:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15fcc:	4604      	mov	r4, r0
   15fce:	b1e0      	cbz	r0, 1600a <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15fd0:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15fd2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 16010 <gpio_fire_callbacks.isra.0+0x4c>
   15fd6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 16014 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   15fda:	68a3      	ldr	r3, [r4, #8]
   15fdc:	421e      	tst	r6, r3
   15fde:	d010      	beq.n	16002 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   15fe0:	6863      	ldr	r3, [r4, #4]
   15fe2:	b943      	cbnz	r3, 15ff6 <gpio_fire_callbacks.isra.0+0x32>
   15fe4:	4641      	mov	r1, r8
   15fe6:	4648      	mov	r0, r9
   15fe8:	2245      	movs	r2, #69	; 0x45
   15fea:	f004 fd4f 	bl	1aa8c <printk>
   15fee:	2145      	movs	r1, #69	; 0x45
   15ff0:	4640      	mov	r0, r8
   15ff2:	f004 fff1 	bl	1afd8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15ff6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15ffa:	4621      	mov	r1, r4
   15ffc:	4638      	mov	r0, r7
   15ffe:	4032      	ands	r2, r6
   16000:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16002:	b115      	cbz	r5, 1600a <gpio_fire_callbacks.isra.0+0x46>
   16004:	462c      	mov	r4, r5
   16006:	682d      	ldr	r5, [r5, #0]
   16008:	e7e7      	b.n	15fda <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   1600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1600e:	bf00      	nop
   16010:	000221a1 	.word	0x000221a1
   16014:	0001fb49 	.word	0x0001fb49

00016018 <gpiote_event_handler>:
{
   16018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1601a:	2600      	movs	r6, #0
   1601c:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16020:	4d28      	ldr	r5, [pc, #160]	; (160c4 <gpiote_event_handler+0xac>)
   16022:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   16026:	b15c      	cbz	r4, 16040 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   16028:	4827      	ldr	r0, [pc, #156]	; (160c8 <gpiote_event_handler+0xb0>)
   1602a:	f007 fb0d 	bl	1d648 <check_level_trigger_pins>
		fired_triggers[0] =
   1602e:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   16030:	4826      	ldr	r0, [pc, #152]	; (160cc <gpiote_event_handler+0xb4>)
   16032:	f007 fb09 	bl	1d648 <check_level_trigger_pins>
		fired_triggers[1] =
   16036:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16038:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   1603c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   16040:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16042:	2601      	movs	r6, #1
   16044:	4694      	mov	ip, r2
{
   16046:	4922      	ldr	r1, [pc, #136]	; (160d0 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   16048:	4d1e      	ldr	r5, [pc, #120]	; (160c4 <gpiote_event_handler+0xac>)
   1604a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1604e:	fa06 f002 	lsl.w	r0, r6, r2
   16052:	4218      	tst	r0, r3
   16054:	d016      	beq.n	16084 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16056:	680b      	ldr	r3, [r1, #0]
   16058:	b1a3      	cbz	r3, 16084 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1605a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   1605e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16062:	af02      	add	r7, sp, #8
   16064:	f3c3 3040 	ubfx	r0, r3, #13, #1
   16068:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1606c:	f850 7c08 	ldr.w	r7, [r0, #-8]
   16070:	f3c3 2304 	ubfx	r3, r3, #8, #5
   16074:	fa06 f303 	lsl.w	r3, r6, r3
   16078:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1607a:	f8c1 c000 	str.w	ip, [r1]
   1607e:	f840 3c08 	str.w	r3, [r0, #-8]
   16082:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16084:	3201      	adds	r2, #1
   16086:	2a08      	cmp	r2, #8
   16088:	f101 0104 	add.w	r1, r1, #4
   1608c:	d1dd      	bne.n	1604a <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   1608e:	9a00      	ldr	r2, [sp, #0]
   16090:	b122      	cbz	r2, 1609c <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   16092:	4b10      	ldr	r3, [pc, #64]	; (160d4 <gpiote_event_handler+0xbc>)
   16094:	490c      	ldr	r1, [pc, #48]	; (160c8 <gpiote_event_handler+0xb0>)
   16096:	6858      	ldr	r0, [r3, #4]
   16098:	f7ff ff94 	bl	15fc4 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1609c:	9a01      	ldr	r2, [sp, #4]
   1609e:	b122      	cbz	r2, 160aa <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   160a0:	4b0d      	ldr	r3, [pc, #52]	; (160d8 <gpiote_event_handler+0xc0>)
   160a2:	490a      	ldr	r1, [pc, #40]	; (160cc <gpiote_event_handler+0xb4>)
   160a4:	6858      	ldr	r0, [r3, #4]
   160a6:	f7ff ff8d 	bl	15fc4 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   160aa:	b144      	cbz	r4, 160be <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   160ac:	4806      	ldr	r0, [pc, #24]	; (160c8 <gpiote_event_handler+0xb0>)
   160ae:	f007 faa5 	bl	1d5fc <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   160b2:	4806      	ldr	r0, [pc, #24]	; (160cc <gpiote_event_handler+0xb4>)
}
   160b4:	b003      	add	sp, #12
   160b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   160ba:	f007 ba9f 	b.w	1d5fc <cfg_level_pins>
}
   160be:	b003      	add	sp, #12
   160c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160c2:	bf00      	nop
   160c4:	4002f000 	.word	0x4002f000
   160c8:	20008498 	.word	0x20008498
   160cc:	200084a8 	.word	0x200084a8
   160d0:	4002f100 	.word	0x4002f100
   160d4:	2000a07c 	.word	0x2000a07c
   160d8:	2000a098 	.word	0x2000a098

000160dc <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   160dc:	4b02      	ldr	r3, [pc, #8]	; (160e8 <vipm_nrf_1_register_callback+0xc>)
   160de:	6059      	str	r1, [r3, #4]
   160e0:	645a      	str	r2, [r3, #68]	; 0x44
   160e2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   160e6:	4770      	bx	lr
   160e8:	2000a0bc 	.word	0x2000a0bc

000160ec <vipm_nrf_0_set_enabled>:
   160ec:	b508      	push	{r3, lr}
   160ee:	2145      	movs	r1, #69	; 0x45
   160f0:	4802      	ldr	r0, [pc, #8]	; (160fc <vipm_nrf_0_set_enabled+0x10>)
   160f2:	f004 fccb 	bl	1aa8c <printk>
   160f6:	f06f 0015 	mvn.w	r0, #21
   160fa:	bd08      	pop	{r3, pc}
   160fc:	0002220f 	.word	0x0002220f

00016100 <vipm_nrf_0_register_callback>:
   16100:	2157      	movs	r1, #87	; 0x57
   16102:	4801      	ldr	r0, [pc, #4]	; (16108 <vipm_nrf_0_register_callback+0x8>)
   16104:	f004 bcc2 	b.w	1aa8c <printk>
   16108:	00022230 	.word	0x00022230

0001610c <vipm_nrf_1_send>:
   1610c:	b508      	push	{r3, lr}
   1610e:	2145      	movs	r1, #69	; 0x45
   16110:	4802      	ldr	r0, [pc, #8]	; (1611c <vipm_nrf_1_send+0x10>)
   16112:	f004 fcbb 	bl	1aa8c <printk>
   16116:	f06f 0015 	mvn.w	r0, #21
   1611a:	bd08      	pop	{r3, pc}
   1611c:	00022267 	.word	0x00022267

00016120 <vipm_nrf_init>:
{
   16120:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   16122:	4d0b      	ldr	r5, [pc, #44]	; (16150 <vipm_nrf_init+0x30>)
   16124:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   16128:	b97c      	cbnz	r4, 1614a <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   1612a:	4a0a      	ldr	r2, [pc, #40]	; (16154 <vipm_nrf_init+0x34>)
   1612c:	490a      	ldr	r1, [pc, #40]	; (16158 <vipm_nrf_init+0x38>)
   1612e:	4620      	mov	r0, r4
   16130:	f001 f87e 	bl	17230 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   16134:	4622      	mov	r2, r4
   16136:	2101      	movs	r1, #1
   16138:	202a      	movs	r0, #42	; 0x2a
   1613a:	f7f7 fd7b 	bl	dc34 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   1613e:	4807      	ldr	r0, [pc, #28]	; (1615c <vipm_nrf_init+0x3c>)
   16140:	f001 f89c 	bl	1727c <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   16144:	2301      	movs	r3, #1
   16146:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   1614a:	2000      	movs	r0, #0
   1614c:	bd38      	pop	{r3, r4, r5, pc}
   1614e:	bf00      	nop
   16150:	2000a0bc 	.word	0x2000a0bc
   16154:	2000a0b4 	.word	0x2000a0b4
   16158:	00016161 	.word	0x00016161
   1615c:	0001ef10 	.word	0x0001ef10

00016160 <vipm_dispatcher>:
{
   16160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16164:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   16166:	4f17      	ldr	r7, [pc, #92]	; (161c4 <vipm_dispatcher+0x64>)
   16168:	f8df 805c 	ldr.w	r8, [pc, #92]	; 161c8 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   1616c:	4e17      	ldr	r6, [pc, #92]	; (161cc <vipm_dispatcher+0x6c>)
	while (event_mask) {
   1616e:	b90d      	cbnz	r5, 16174 <vipm_dispatcher+0x14>
}
   16170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   16174:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   16178:	b30c      	cbz	r4, 161be <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   1617a:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   1617e:	2b0f      	cmp	r3, #15
   16180:	461c      	mov	r4, r3
   16182:	dd08      	ble.n	16196 <vipm_dispatcher+0x36>
   16184:	4639      	mov	r1, r7
   16186:	4640      	mov	r0, r8
   16188:	2283      	movs	r2, #131	; 0x83
   1618a:	f004 fc7f 	bl	1aa8c <printk>
   1618e:	2183      	movs	r1, #131	; 0x83
   16190:	4638      	mov	r0, r7
   16192:	f004 ff21 	bl	1afd8 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   16196:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   16198:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   1619c:	40a3      	lsls	r3, r4
   1619e:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   161a2:	f1b9 0f00 	cmp.w	r9, #0
   161a6:	d0e2      	beq.n	1616e <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   161a8:	2300      	movs	r3, #0
   161aa:	f104 0110 	add.w	r1, r4, #16
   161ae:	3420      	adds	r4, #32
   161b0:	461a      	mov	r2, r3
   161b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   161b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   161ba:	47c8      	blx	r9
   161bc:	e7d7      	b.n	1616e <vipm_dispatcher+0xe>
    return 32U;
   161be:	2420      	movs	r4, #32
   161c0:	e7e0      	b.n	16184 <vipm_dispatcher+0x24>
   161c2:	bf00      	nop
   161c4:	00022288 	.word	0x00022288
   161c8:	0001fb49 	.word	0x0001fb49
   161cc:	2000a0bc 	.word	0x2000a0bc

000161d0 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   161d0:	2a10      	cmp	r2, #16
   161d2:	b508      	push	{r3, lr}
   161d4:	d810      	bhi.n	161f8 <vipm_nrf_0_send+0x28>
   161d6:	b11a      	cbz	r2, 161e0 <vipm_nrf_0_send+0x10>
   161d8:	2157      	movs	r1, #87	; 0x57
   161da:	4809      	ldr	r0, [pc, #36]	; (16200 <vipm_nrf_0_send+0x30>)
   161dc:	f004 fc56 	bl	1aa8c <printk>
   161e0:	9b02      	ldr	r3, [sp, #8]
   161e2:	2b00      	cmp	r3, #0
   161e4:	dd03      	ble.n	161ee <vipm_nrf_0_send+0x1e>
   161e6:	2157      	movs	r1, #87	; 0x57
   161e8:	4806      	ldr	r0, [pc, #24]	; (16204 <vipm_nrf_0_send+0x34>)
   161ea:	f004 fc4f 	bl	1aa8c <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   161ee:	2201      	movs	r2, #1
   161f0:	2000      	movs	r0, #0
   161f2:	4b05      	ldr	r3, [pc, #20]	; (16208 <vipm_nrf_0_send+0x38>)
   161f4:	601a      	str	r2, [r3, #0]
   161f6:	bd08      	pop	{r3, pc}
   161f8:	f06f 0015 	mvn.w	r0, #21
   161fc:	e7fb      	b.n	161f6 <vipm_nrf_0_send+0x26>
   161fe:	bf00      	nop
   16200:	000222b6 	.word	0x000222b6
   16204:	000222ef 	.word	0x000222ef
   16208:	4002a000 	.word	0x4002a000

0001620c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1620c:	6802      	ldr	r2, [r0, #0]
{
   1620e:	b510      	push	{r4, lr}
    switch (port)
   16210:	0953      	lsrs	r3, r2, #5
{
   16212:	4604      	mov	r4, r0
    switch (port)
   16214:	d029      	beq.n	1626a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   16216:	2b01      	cmp	r3, #1
   16218:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1621c:	bf18      	it	ne
   1621e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   16220:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   16224:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16226:	07db      	lsls	r3, r3, #31
   16228:	d40a      	bmi.n	16240 <nrf_gpio_pin_port_decode+0x34>
   1622a:	4912      	ldr	r1, [pc, #72]	; (16274 <nrf_gpio_pin_port_decode+0x68>)
   1622c:	4812      	ldr	r0, [pc, #72]	; (16278 <nrf_gpio_pin_port_decode+0x6c>)
   1622e:	f240 221a 	movw	r2, #538	; 0x21a
   16232:	f004 fc2b 	bl	1aa8c <printk>
   16236:	f240 211a 	movw	r1, #538	; 0x21a
   1623a:	480e      	ldr	r0, [pc, #56]	; (16274 <nrf_gpio_pin_port_decode+0x68>)
   1623c:	f004 fecc 	bl	1afd8 <assert_post_action>
    uint32_t pin_number = *p_pin;
   16240:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16242:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16246:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16248:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1624a:	d00c      	beq.n	16266 <nrf_gpio_pin_port_decode+0x5a>
   1624c:	2b01      	cmp	r3, #1
   1624e:	d00f      	beq.n	16270 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   16250:	4908      	ldr	r1, [pc, #32]	; (16274 <nrf_gpio_pin_port_decode+0x68>)
   16252:	4809      	ldr	r0, [pc, #36]	; (16278 <nrf_gpio_pin_port_decode+0x6c>)
   16254:	f240 221f 	movw	r2, #543	; 0x21f
   16258:	f004 fc18 	bl	1aa8c <printk>
   1625c:	f240 211f 	movw	r1, #543	; 0x21f
   16260:	4804      	ldr	r0, [pc, #16]	; (16274 <nrf_gpio_pin_port_decode+0x68>)
   16262:	f004 feb9 	bl	1afd8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16266:	4805      	ldr	r0, [pc, #20]	; (1627c <nrf_gpio_pin_port_decode+0x70>)
}
   16268:	bd10      	pop	{r4, pc}
    switch (port)
   1626a:	f04f 33ff 	mov.w	r3, #4294967295
   1626e:	e7d7      	b.n	16220 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   16270:	4803      	ldr	r0, [pc, #12]	; (16280 <nrf_gpio_pin_port_decode+0x74>)
   16272:	e7f9      	b.n	16268 <nrf_gpio_pin_port_decode+0x5c>
   16274:	000221ce 	.word	0x000221ce
   16278:	0001fb49 	.word	0x0001fb49
   1627c:	40842500 	.word	0x40842500
   16280:	40842800 	.word	0x40842800

00016284 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16284:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   16286:	794b      	ldrb	r3, [r1, #5]
   16288:	2b01      	cmp	r3, #1
   1628a:	d02b      	beq.n	162e4 <uarte_nrfx_configure+0x60>
   1628c:	2b03      	cmp	r3, #3
   1628e:	d126      	bne.n	162de <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16290:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16292:	798b      	ldrb	r3, [r1, #6]
   16294:	2b03      	cmp	r3, #3
   16296:	d122      	bne.n	162de <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16298:	79cd      	ldrb	r5, [r1, #7]
   1629a:	b125      	cbz	r5, 162a6 <uarte_nrfx_configure+0x22>
   1629c:	2d01      	cmp	r5, #1
   1629e:	d11e      	bne.n	162de <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   162a0:	6843      	ldr	r3, [r0, #4]
   162a2:	791b      	ldrb	r3, [r3, #4]
   162a4:	b1db      	cbz	r3, 162de <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   162a6:	790a      	ldrb	r2, [r1, #4]
   162a8:	2a01      	cmp	r2, #1
   162aa:	d01d      	beq.n	162e8 <uarte_nrfx_configure+0x64>
   162ac:	2a02      	cmp	r2, #2
   162ae:	d01f      	beq.n	162f0 <uarte_nrfx_configure+0x6c>
   162b0:	b9aa      	cbnz	r2, 162de <uarte_nrfx_configure+0x5a>
   162b2:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   162b4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   162b6:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   162b8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   162bc:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   162be:	d06e      	beq.n	1639e <uarte_nrfx_configure+0x11a>
   162c0:	d833      	bhi.n	1632a <uarte_nrfx_configure+0xa6>
   162c2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162c6:	d06d      	beq.n	163a4 <uarte_nrfx_configure+0x120>
   162c8:	d81c      	bhi.n	16304 <uarte_nrfx_configure+0x80>
   162ca:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   162ce:	d06b      	beq.n	163a8 <uarte_nrfx_configure+0x124>
   162d0:	d810      	bhi.n	162f4 <uarte_nrfx_configure+0x70>
   162d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   162d6:	d06a      	beq.n	163ae <uarte_nrfx_configure+0x12a>
   162d8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   162dc:	d06a      	beq.n	163b4 <uarte_nrfx_configure+0x130>
   162de:	f06f 0022 	mvn.w	r0, #34	; 0x22
   162e2:	e05b      	b.n	1639c <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   162e4:	2700      	movs	r7, #0
   162e6:	e7d4      	b.n	16292 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   162e8:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   162ec:	220e      	movs	r2, #14
   162ee:	e7e1      	b.n	162b4 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   162f0:	2400      	movs	r4, #0
   162f2:	e7fb      	b.n	162ec <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   162f4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   162f8:	d05f      	beq.n	163ba <uarte_nrfx_configure+0x136>
   162fa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   162fe:	d1ee      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16300:	4b38      	ldr	r3, [pc, #224]	; (163e4 <uarte_nrfx_configure+0x160>)
   16302:	e03e      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16304:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16308:	d05a      	beq.n	163c0 <uarte_nrfx_configure+0x13c>
   1630a:	d807      	bhi.n	1631c <uarte_nrfx_configure+0x98>
   1630c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16310:	d058      	beq.n	163c4 <uarte_nrfx_configure+0x140>
   16312:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16316:	d1e2      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16318:	4b33      	ldr	r3, [pc, #204]	; (163e8 <uarte_nrfx_configure+0x164>)
   1631a:	e032      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1631c:	f647 2c12 	movw	ip, #31250	; 0x7a12
   16320:	4563      	cmp	r3, ip
   16322:	d1dc      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16324:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16328:	e02b      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1632a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1632e:	d04b      	beq.n	163c8 <uarte_nrfx_configure+0x144>
   16330:	d813      	bhi.n	1635a <uarte_nrfx_configure+0xd6>
   16332:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16336:	d04a      	beq.n	163ce <uarte_nrfx_configure+0x14a>
   16338:	d809      	bhi.n	1634e <uarte_nrfx_configure+0xca>
   1633a:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   1633e:	4563      	cmp	r3, ip
   16340:	d047      	beq.n	163d2 <uarte_nrfx_configure+0x14e>
   16342:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16346:	d1ca      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16348:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1634c:	e019      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1634e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16352:	d1c4      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16354:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16358:	e013      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1635a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1635e:	d03b      	beq.n	163d8 <uarte_nrfx_configure+0x154>
   16360:	d809      	bhi.n	16376 <uarte_nrfx_configure+0xf2>
   16362:	f8df c088 	ldr.w	ip, [pc, #136]	; 163ec <uarte_nrfx_configure+0x168>
   16366:	4563      	cmp	r3, ip
   16368:	d039      	beq.n	163de <uarte_nrfx_configure+0x15a>
   1636a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1636e:	d1b6      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16370:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16374:	e005      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16376:	f8df c078 	ldr.w	ip, [pc, #120]	; 163f0 <uarte_nrfx_configure+0x16c>
   1637a:	4563      	cmp	r3, ip
   1637c:	d1af      	bne.n	162de <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1637e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16382:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16386:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   16388:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1638a:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   1638c:	4322      	orrs	r2, r4
   1638e:	3304      	adds	r3, #4
   16390:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16392:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   16396:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1639a:	2000      	movs	r0, #0
}
   1639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1639e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   163a2:	e7ee      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   163a4:	4b13      	ldr	r3, [pc, #76]	; (163f4 <uarte_nrfx_configure+0x170>)
   163a6:	e7ec      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   163a8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   163ac:	e7e9      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   163ae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   163b2:	e7e6      	b.n	16382 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   163b4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   163b8:	e7e3      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   163ba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   163be:	e7e0      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   163c0:	4b0d      	ldr	r3, [pc, #52]	; (163f8 <uarte_nrfx_configure+0x174>)
   163c2:	e7de      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   163c4:	4b0d      	ldr	r3, [pc, #52]	; (163fc <uarte_nrfx_configure+0x178>)
   163c6:	e7dc      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   163c8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   163cc:	e7d9      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   163ce:	4b0c      	ldr	r3, [pc, #48]	; (16400 <uarte_nrfx_configure+0x17c>)
   163d0:	e7d7      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   163d2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   163d6:	e7d4      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   163d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   163dc:	e7d1      	b.n	16382 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   163de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   163e2:	e7ce      	b.n	16382 <uarte_nrfx_configure+0xfe>
   163e4:	0013b000 	.word	0x0013b000
   163e8:	004ea000 	.word	0x004ea000
   163ec:	0003d090 	.word	0x0003d090
   163f0:	000f4240 	.word	0x000f4240
   163f4:	00275000 	.word	0x00275000
   163f8:	0075c000 	.word	0x0075c000
   163fc:	003af000 	.word	0x003af000
   16400:	013a9000 	.word	0x013a9000

00016404 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   16404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16408:	4606      	mov	r6, r0
   1640a:	4688      	mov	r8, r1
	return dev->data;
   1640c:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1640e:	f007 fe5b 	bl	1e0c8 <k_is_in_isr>
   16412:	b9b8      	cbnz	r0, 16444 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   16414:	4b28      	ldr	r3, [pc, #160]	; (164b8 <uarte_nrfx_poll_out+0xb4>)
   16416:	781b      	ldrb	r3, [r3, #0]
   16418:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1641c:	6872      	ldr	r2, [r6, #4]
   1641e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   16420:	b193      	cbz	r3, 16448 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   16422:	f04f 0320 	mov.w	r3, #32
   16426:	f3ef 8411 	mrs	r4, BASEPRI
   1642a:	f383 8811 	msr	BASEPRI, r3
   1642e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   16432:	6870      	ldr	r0, [r6, #4]
   16434:	f007 f965 	bl	1d702 <is_tx_ready.isra.0>
   16438:	bb38      	cbnz	r0, 1648a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1643a:	f384 8811 	msr	BASEPRI, r4
   1643e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   16442:	e7ee      	b.n	16422 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16444:	2301      	movs	r3, #1
   16446:	e7e9      	b.n	1641c <uarte_nrfx_poll_out+0x18>
   16448:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1644a:	6870      	ldr	r0, [r6, #4]
   1644c:	f007 f959 	bl	1d702 <is_tx_ready.isra.0>
   16450:	b970      	cbnz	r0, 16470 <uarte_nrfx_poll_out+0x6c>
   16452:	2001      	movs	r0, #1
   16454:	f007 f98d 	bl	1d772 <nrfx_busy_wait>
   16458:	3c01      	subs	r4, #1
   1645a:	d1f6      	bne.n	1644a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1645c:	2100      	movs	r1, #0
   1645e:	2021      	movs	r0, #33	; 0x21
   16460:	f003 f906 	bl	19670 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16464:	e7f0      	b.n	16448 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   16466:	f384 8811 	msr	BASEPRI, r4
   1646a:	f3bf 8f6f 	isb	sy
}
   1646e:	e7f5      	b.n	1645c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   16470:	f04f 0320 	mov.w	r3, #32
   16474:	f3ef 8411 	mrs	r4, BASEPRI
   16478:	f383 8811 	msr	BASEPRI, r3
   1647c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   16480:	6870      	ldr	r0, [r6, #4]
   16482:	f007 f93e 	bl	1d702 <is_tx_ready.isra.0>
   16486:	2800      	cmp	r0, #0
   16488:	d0ed      	beq.n	16466 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1648a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1648c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1648e:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16492:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16496:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1649a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1649e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   164a2:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   164a6:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   164aa:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   164ac:	f384 8811 	msr	BASEPRI, r4
   164b0:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   164b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   164b8:	2000ea5e 	.word	0x2000ea5e

000164bc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   164bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c0:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   164c2:	f04f 0800 	mov.w	r8, #0
   164c6:	f04f 0914 	mov.w	r9, #20
   164ca:	2200      	movs	r2, #0
   164cc:	2101      	movs	r1, #1
   164ce:	2008      	movs	r0, #8
   164d0:	f7f7 fbb0 	bl	dc34 <z_arm_irq_priority_set>
   164d4:	2008      	movs	r0, #8
   164d6:	f7f7 fb8f 	bl	dbf8 <arch_irq_enable>
	return config->uarte_regs;
   164da:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   164dc:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   164de:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   164e0:	2701      	movs	r7, #1
   164e2:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164e6:	a801      	add	r0, sp, #4
	data->dev = dev;
   164e8:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   164ea:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164ee:	f7ff fe8d 	bl	1620c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   164f2:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   164f4:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   164f8:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   164fc:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164fe:	a801      	add	r0, sp, #4
   16500:	f8cd 9004 	str.w	r9, [sp, #4]
   16504:	f7ff fe82 	bl	1620c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16508:	f04f 0b16 	mov.w	fp, #22
   1650c:	9b01      	ldr	r3, [sp, #4]
   1650e:	3380      	adds	r3, #128	; 0x80
   16510:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16514:	a801      	add	r0, sp, #4
   16516:	f8cd b004 	str.w	fp, [sp, #4]
   1651a:	f7ff fe77 	bl	1620c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1651e:	9b01      	ldr	r3, [sp, #4]
   16520:	3380      	adds	r3, #128	; 0x80
   16522:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   16526:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1652a:	f04f 0915 	mov.w	r9, #21
   1652e:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16532:	a801      	add	r0, sp, #4
   16534:	f8cd 9004 	str.w	r9, [sp, #4]
   16538:	f7ff fe68 	bl	1620c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1653c:	9b01      	ldr	r3, [sp, #4]
   1653e:	3380      	adds	r3, #128	; 0x80
   16540:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   16544:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16548:	a801      	add	r0, sp, #4
   1654a:	f8cd 8004 	str.w	r8, [sp, #4]
   1654e:	f7ff fe5d 	bl	1620c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16552:	9b01      	ldr	r3, [sp, #4]
   16554:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   16556:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16558:	a801      	add	r0, sp, #4
   1655a:	f8cd 8004 	str.w	r8, [sp, #4]
   1655e:	f7ff fe55 	bl	1620c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16562:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16564:	68e9      	ldr	r1, [r5, #12]
   16566:	3380      	adds	r3, #128	; 0x80
   16568:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   1656c:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   1656e:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   16572:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   16574:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   16578:	f7ff fe84 	bl	16284 <uarte_nrfx_configure>
	if (err) {
   1657c:	4607      	mov	r7, r0
   1657e:	b980      	cbnz	r0, 165a2 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   16580:	686b      	ldr	r3, [r5, #4]
   16582:	799b      	ldrb	r3, [r3, #6]
   16584:	2b00      	cmp	r3, #0
   16586:	d03a      	beq.n	165fe <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   16588:	f106 0012 	add.w	r0, r6, #18
   1658c:	f000 fddc 	bl	17148 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16590:	4b2b      	ldr	r3, [pc, #172]	; (16640 <uarte_0_init+0x184>)
   16592:	4298      	cmp	r0, r3
   16594:	d009      	beq.n	165aa <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   16596:	2145      	movs	r1, #69	; 0x45
   16598:	482a      	ldr	r0, [pc, #168]	; (16644 <uarte_0_init+0x188>)
   1659a:	f004 fa77 	bl	1aa8c <printk>
		return -EIO;
   1659e:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   165a2:	4638      	mov	r0, r7
   165a4:	b003      	add	sp, #12
   165a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   165aa:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   165ae:	f896 8012 	ldrb.w	r8, [r6, #18]
   165b2:	d10a      	bne.n	165ca <uarte_0_init+0x10e>
   165b4:	4924      	ldr	r1, [pc, #144]	; (16648 <uarte_0_init+0x18c>)
   165b6:	4825      	ldr	r0, [pc, #148]	; (1664c <uarte_0_init+0x190>)
   165b8:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   165bc:	f004 fa66 	bl	1aa8c <printk>
   165c0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   165c4:	4820      	ldr	r0, [pc, #128]	; (16648 <uarte_0_init+0x18c>)
   165c6:	f004 fd07 	bl	1afd8 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   165ca:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   165ce:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   165d2:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   165d6:	d10a      	bne.n	165ee <uarte_0_init+0x132>
   165d8:	491b      	ldr	r1, [pc, #108]	; (16648 <uarte_0_init+0x18c>)
   165da:	481c      	ldr	r0, [pc, #112]	; (1664c <uarte_0_init+0x190>)
   165dc:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   165e0:	f004 fa54 	bl	1aa8c <printk>
   165e4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   165e8:	4817      	ldr	r0, [pc, #92]	; (16648 <uarte_0_init+0x18c>)
   165ea:	f004 fcf5 	bl	1afd8 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   165ee:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   165f0:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   165f4:	7cb2      	ldrb	r2, [r6, #18]
   165f6:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   165f8:	4a15      	ldr	r2, [pc, #84]	; (16650 <uarte_0_init+0x194>)
   165fa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   165fe:	2308      	movs	r3, #8
   16600:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16604:	2300      	movs	r3, #0
   16606:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1660a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1660e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16612:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16616:	2301      	movs	r3, #1
   16618:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1661c:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1661e:	686b      	ldr	r3, [r5, #4]
   16620:	799b      	ldrb	r3, [r3, #6]
   16622:	b91b      	cbnz	r3, 1662c <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   16624:	f44f 7380 	mov.w	r3, #256	; 0x100
   16628:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1662c:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1662e:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16630:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16634:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16638:	2301      	movs	r3, #1
   1663a:	60a3      	str	r3, [r4, #8]
   1663c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1663e:	e7b0      	b.n	165a2 <uarte_0_init+0xe6>
   16640:	0bad0000 	.word	0x0bad0000
   16644:	00022332 	.word	0x00022332
   16648:	00022356 	.word	0x00022356
   1664c:	0001fb49 	.word	0x0001fb49
   16650:	40017000 	.word	0x40017000

00016654 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   16654:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   16658:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   1665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   16660:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   16664:	4605      	mov	r5, r0
   16666:	460e      	mov	r6, r1
   16668:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1666a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1666e:	d14f      	bne.n	16710 <z_impl_gpio_pin_interrupt_configure+0xbc>
   16670:	492d      	ldr	r1, [pc, #180]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16672:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   16676:	482d      	ldr	r0, [pc, #180]	; (1672c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16678:	f004 fa08 	bl	1aa8c <printk>
   1667c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16680:	4829      	ldr	r0, [pc, #164]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16682:	f004 fca9 	bl	1afd8 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   16686:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1668a:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1668e:	d10a      	bne.n	166a6 <z_impl_gpio_pin_interrupt_configure+0x52>
   16690:	4925      	ldr	r1, [pc, #148]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16692:	4826      	ldr	r0, [pc, #152]	; (1672c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16694:	f240 12f1 	movw	r2, #497	; 0x1f1
   16698:	f004 f9f8 	bl	1aa8c <printk>
   1669c:	f240 11f1 	movw	r1, #497	; 0x1f1
   166a0:	4821      	ldr	r0, [pc, #132]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166a2:	f004 fc99 	bl	1afd8 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   166a6:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   166aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   166ae:	d10a      	bne.n	166c6 <z_impl_gpio_pin_interrupt_configure+0x72>
   166b0:	491d      	ldr	r1, [pc, #116]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166b2:	481e      	ldr	r0, [pc, #120]	; (1672c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   166b4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   166b8:	f004 f9e8 	bl	1aa8c <printk>
   166bc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   166c0:	4819      	ldr	r0, [pc, #100]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166c2:	f004 fc89 	bl	1afd8 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   166c6:	2701      	movs	r7, #1
   166c8:	f8da 3000 	ldr.w	r3, [sl]
   166cc:	40b7      	lsls	r7, r6
   166ce:	421f      	tst	r7, r3
   166d0:	d10a      	bne.n	166e8 <z_impl_gpio_pin_interrupt_configure+0x94>
   166d2:	4915      	ldr	r1, [pc, #84]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166d4:	4815      	ldr	r0, [pc, #84]	; (1672c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   166d6:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   166da:	f004 f9d7 	bl	1aa8c <printk>
   166de:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   166e2:	4811      	ldr	r0, [pc, #68]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166e4:	f004 fc78 	bl	1afd8 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   166e8:	0423      	lsls	r3, r4, #16
   166ea:	d505      	bpl.n	166f8 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   166ec:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   166f0:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   166f2:	bf18      	it	ne
   166f4:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   166f8:	f8d8 7018 	ldr.w	r7, [r8, #24]
   166fc:	4631      	mov	r1, r6
   166fe:	4628      	mov	r0, r5
   16700:	46bc      	mov	ip, r7
   16702:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   16706:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   1670a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1670e:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16710:	2b00      	cmp	r3, #0
   16712:	d1b8      	bne.n	16686 <z_impl_gpio_pin_interrupt_configure+0x32>
   16714:	4904      	ldr	r1, [pc, #16]	; (16728 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16716:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   1671a:	4804      	ldr	r0, [pc, #16]	; (1672c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1671c:	f004 f9b6 	bl	1aa8c <printk>
   16720:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   16724:	e7ac      	b.n	16680 <z_impl_gpio_pin_interrupt_configure+0x2c>
   16726:	bf00      	nop
   16728:	000223a5 	.word	0x000223a5
   1672c:	0001fb49 	.word	0x0001fb49

00016730 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   16730:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16732:	2501      	movs	r5, #1
   16734:	6843      	ldr	r3, [r0, #4]
   16736:	408d      	lsls	r5, r1
   16738:	681b      	ldr	r3, [r3, #0]
{
   1673a:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1673c:	421d      	tst	r5, r3
{
   1673e:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16740:	d10a      	bne.n	16758 <gpio_pin_set_raw+0x28>
   16742:	490b      	ldr	r1, [pc, #44]	; (16770 <gpio_pin_set_raw+0x40>)
   16744:	480b      	ldr	r0, [pc, #44]	; (16774 <gpio_pin_set_raw+0x44>)
   16746:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1674a:	f004 f99f 	bl	1aa8c <printk>
   1674e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   16752:	4807      	ldr	r0, [pc, #28]	; (16770 <gpio_pin_set_raw+0x40>)
   16754:	f004 fc40 	bl	1afd8 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   16758:	b136      	cbz	r6, 16768 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   1675a:	68a3      	ldr	r3, [r4, #8]
   1675c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1675e:	4629      	mov	r1, r5
   16760:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   16762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   16766:	4718      	bx	r3
   16768:	68a3      	ldr	r3, [r4, #8]
   1676a:	691b      	ldr	r3, [r3, #16]
   1676c:	e7f7      	b.n	1675e <gpio_pin_set_raw+0x2e>
   1676e:	bf00      	nop
   16770:	000223a5 	.word	0x000223a5
   16774:	0001fb49 	.word	0x0001fb49

00016778 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   16778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1677c:	4606      	mov	r6, r0
   1677e:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16780:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   16782:	f8df 8044 	ldr.w	r8, [pc, #68]	; 167c8 <dk_set_leds_state.part.0+0x50>
   16786:	f8df 9044 	ldr.w	r9, [pc, #68]	; 167cc <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1678a:	fa26 f204 	lsr.w	r2, r6, r4
   1678e:	fa27 f304 	lsr.w	r3, r7, r4
   16792:	4313      	orrs	r3, r2
   16794:	07db      	lsls	r3, r3, #31
   16796:	d512      	bpl.n	167be <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   16798:	43d2      	mvns	r2, r2
   1679a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1679e:	7919      	ldrb	r1, [r3, #4]
   167a0:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   167a4:	f002 0201 	and.w	r2, r2, #1
   167a8:	f7ff ffc2 	bl	16730 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   167ac:	4605      	mov	r5, r0
   167ae:	b130      	cbz	r0, 167be <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   167b0:	2145      	movs	r1, #69	; 0x45
   167b2:	4807      	ldr	r0, [pc, #28]	; (167d0 <dk_set_leds_state.part.0+0x58>)
   167b4:	f004 f96a 	bl	1aa8c <printk>
			}
		}
	}

	return 0;
}
   167b8:	4628      	mov	r0, r5
   167ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   167be:	3401      	adds	r4, #1
   167c0:	2c04      	cmp	r4, #4
   167c2:	d1e2      	bne.n	1678a <dk_set_leds_state.part.0+0x12>
	return 0;
   167c4:	2500      	movs	r5, #0
   167c6:	e7f7      	b.n	167b8 <dk_set_leds_state.part.0+0x40>
   167c8:	0001eff8 	.word	0x0001eff8
   167cc:	2000a1c4 	.word	0x2000a1c4
   167d0:	000223cf 	.word	0x000223cf

000167d4 <buttons_scan_fn>:
{
   167d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   167d8:	2400      	movs	r4, #0
   167da:	4e6c      	ldr	r6, [pc, #432]	; (1698c <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   167dc:	4625      	mov	r5, r4
{
   167de:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   167e0:	4f6b      	ldr	r7, [pc, #428]	; (16990 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   167e2:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 16994 <buttons_scan_fn+0x1c0>
   167e6:	f04f 0801 	mov.w	r8, #1
   167ea:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   167ee:	791b      	ldrb	r3, [r3, #4]
   167f0:	f859 bb04 	ldr.w	fp, [r9], #4
   167f4:	fa08 f803 	lsl.w	r8, r8, r3
   167f8:	f8db 3004 	ldr.w	r3, [fp, #4]
   167fc:	681b      	ldr	r3, [r3, #0]
   167fe:	ea18 0f03 	tst.w	r8, r3
   16802:	d10a      	bne.n	1681a <buttons_scan_fn+0x46>
   16804:	4651      	mov	r1, sl
   16806:	4864      	ldr	r0, [pc, #400]	; (16998 <buttons_scan_fn+0x1c4>)
   16808:	f44f 725e 	mov.w	r2, #888	; 0x378
   1680c:	f004 f93e 	bl	1aa8c <printk>
   16810:	f44f 715e 	mov.w	r1, #888	; 0x378
   16814:	4650      	mov	r0, sl
   16816:	f004 fbdf 	bl	1afd8 <assert_post_action>
	return api->port_get_raw(port, value);
   1681a:	f8db 3008 	ldr.w	r3, [fp, #8]
   1681e:	4658      	mov	r0, fp
   16820:	685b      	ldr	r3, [r3, #4]
   16822:	a901      	add	r1, sp, #4
   16824:	4798      	blx	r3
	if (ret == 0) {
   16826:	2800      	cmp	r0, #0
   16828:	d16b      	bne.n	16902 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1682a:	9b01      	ldr	r3, [sp, #4]
   1682c:	ea18 0f03 	tst.w	r8, r3
   16830:	d003      	beq.n	1683a <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16832:	3501      	adds	r5, #1
   16834:	2d04      	cmp	r5, #4
   16836:	d1d6      	bne.n	167e6 <buttons_scan_fn+0x12>
   16838:	e069      	b.n	1690e <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1683a:	2301      	movs	r3, #1
   1683c:	40ab      	lsls	r3, r5
   1683e:	431c      	orrs	r4, r3
   16840:	e7f7      	b.n	16832 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16842:	3d04      	subs	r5, #4
   16844:	2d00      	cmp	r5, #0
   16846:	f000 8087 	beq.w	16958 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   1684a:	46aa      	mov	sl, r5
   1684c:	f85a 3b04 	ldr.w	r3, [sl], #4
   16850:	4641      	mov	r1, r8
   16852:	4620      	mov	r0, r4
   16854:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16856:	f1ba 0f00 	cmp.w	sl, #0
   1685a:	d07d      	beq.n	16958 <buttons_scan_fn+0x184>
	return node->next;
   1685c:	686d      	ldr	r5, [r5, #4]
   1685e:	e078      	b.n	16952 <buttons_scan_fn+0x17e>
		initial_run = false;
   16860:	2200      	movs	r2, #0
   16862:	701a      	strb	r2, [r3, #0]
   16864:	e07b      	b.n	1695e <buttons_scan_fn+0x18a>
	__asm__ volatile(
   16866:	f04f 0320 	mov.w	r3, #32
   1686a:	f3ef 8811 	mrs	r8, BASEPRI
   1686e:	f383 8811 	msr	BASEPRI, r3
   16872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16876:	4849      	ldr	r0, [pc, #292]	; (1699c <buttons_scan_fn+0x1c8>)
   16878:	f003 f91c 	bl	19ab4 <z_spin_lock_valid>
   1687c:	b940      	cbnz	r0, 16890 <buttons_scan_fn+0xbc>
   1687e:	4948      	ldr	r1, [pc, #288]	; (169a0 <buttons_scan_fn+0x1cc>)
   16880:	4845      	ldr	r0, [pc, #276]	; (16998 <buttons_scan_fn+0x1c4>)
   16882:	227c      	movs	r2, #124	; 0x7c
   16884:	f004 f902 	bl	1aa8c <printk>
   16888:	217c      	movs	r1, #124	; 0x7c
   1688a:	4845      	ldr	r0, [pc, #276]	; (169a0 <buttons_scan_fn+0x1cc>)
   1688c:	f004 fba4 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   16890:	4842      	ldr	r0, [pc, #264]	; (1699c <buttons_scan_fn+0x1c8>)
   16892:	f003 f92b 	bl	19aec <z_spin_lock_set_owner>
		switch (state) {
   16896:	4b43      	ldr	r3, [pc, #268]	; (169a4 <buttons_scan_fn+0x1d0>)
   16898:	781a      	ldrb	r2, [r3, #0]
   1689a:	2a01      	cmp	r2, #1
   1689c:	d126      	bne.n	168ec <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   1689e:	2200      	movs	r2, #0
   168a0:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   168a2:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   168a6:	f856 0b04 	ldr.w	r0, [r6], #4
   168aa:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   168ac:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   168b0:	f7ff fed0 	bl	16654 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   168b4:	3401      	adds	r4, #1
   168b6:	2c04      	cmp	r4, #4
   168b8:	4605      	mov	r5, r0
   168ba:	d001      	beq.n	168c0 <buttons_scan_fn+0xec>
   168bc:	2800      	cmp	r0, #0
   168be:	d0f0      	beq.n	168a2 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   168c0:	4836      	ldr	r0, [pc, #216]	; (1699c <buttons_scan_fn+0x1c8>)
   168c2:	f003 f905 	bl	19ad0 <z_spin_unlock_valid>
   168c6:	b940      	cbnz	r0, 168da <buttons_scan_fn+0x106>
   168c8:	4935      	ldr	r1, [pc, #212]	; (169a0 <buttons_scan_fn+0x1cc>)
   168ca:	4833      	ldr	r0, [pc, #204]	; (16998 <buttons_scan_fn+0x1c4>)
   168cc:	22a7      	movs	r2, #167	; 0xa7
   168ce:	f004 f8dd 	bl	1aa8c <printk>
   168d2:	21a7      	movs	r1, #167	; 0xa7
   168d4:	4832      	ldr	r0, [pc, #200]	; (169a0 <buttons_scan_fn+0x1cc>)
   168d6:	f004 fb7f 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   168da:	f388 8811 	msr	BASEPRI, r8
   168de:	f3bf 8f6f 	isb	sy
		if (err) {
   168e2:	2d00      	cmp	r5, #0
   168e4:	d04f      	beq.n	16986 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   168e6:	2145      	movs	r1, #69	; 0x45
   168e8:	482f      	ldr	r0, [pc, #188]	; (169a8 <buttons_scan_fn+0x1d4>)
   168ea:	e047      	b.n	1697c <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   168ec:	22b4      	movs	r2, #180	; 0xb4
   168ee:	492f      	ldr	r1, [pc, #188]	; (169ac <buttons_scan_fn+0x1d8>)
   168f0:	4829      	ldr	r0, [pc, #164]	; (16998 <buttons_scan_fn+0x1c4>)
   168f2:	f004 f8cb 	bl	1aa8c <printk>
   168f6:	21b4      	movs	r1, #180	; 0xb4
   168f8:	482c      	ldr	r0, [pc, #176]	; (169ac <buttons_scan_fn+0x1d8>)
   168fa:	f004 fb6d 	bl	1afd8 <assert_post_action>
		int err = 0;
   168fe:	2500      	movs	r5, #0
			break;
   16900:	e7de      	b.n	168c0 <buttons_scan_fn+0xec>
		if (val < 0) {
   16902:	da96      	bge.n	16832 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   16904:	2145      	movs	r1, #69	; 0x45
   16906:	482a      	ldr	r0, [pc, #168]	; (169b0 <buttons_scan_fn+0x1dc>)
   16908:	f004 f8c0 	bl	1aa8c <printk>
			return 0;
   1690c:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1690e:	4b29      	ldr	r3, [pc, #164]	; (169b4 <buttons_scan_fn+0x1e0>)
   16910:	e8d3 2fef 	ldaex	r2, [r3]
   16914:	e8c3 4fe1 	stlex	r1, r4, [r3]
   16918:	2900      	cmp	r1, #0
   1691a:	d1f9      	bne.n	16910 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   1691c:	4b26      	ldr	r3, [pc, #152]	; (169b8 <buttons_scan_fn+0x1e4>)
   1691e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 169bc <buttons_scan_fn+0x1e8>
   16922:	781a      	ldrb	r2, [r3, #0]
   16924:	2a00      	cmp	r2, #0
   16926:	d19b      	bne.n	16860 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   16928:	f8d9 3000 	ldr.w	r3, [r9]
   1692c:	42a3      	cmp	r3, r4
   1692e:	d016      	beq.n	1695e <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   16930:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   16934:	4b22      	ldr	r3, [pc, #136]	; (169c0 <buttons_scan_fn+0x1ec>)
   16936:	681b      	ldr	r3, [r3, #0]
   16938:	b113      	cbz	r3, 16940 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1693a:	4641      	mov	r1, r8
   1693c:	4620      	mov	r0, r4
   1693e:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16940:	f04f 33ff 	mov.w	r3, #4294967295
   16944:	f04f 32ff 	mov.w	r2, #4294967295
   16948:	481e      	ldr	r0, [pc, #120]	; (169c4 <buttons_scan_fn+0x1f0>)
   1694a:	f001 fc13 	bl	18174 <z_impl_k_mutex_lock>
	return list->head;
   1694e:	4b1e      	ldr	r3, [pc, #120]	; (169c8 <buttons_scan_fn+0x1f4>)
   16950:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16952:	2d00      	cmp	r5, #0
   16954:	f47f af75 	bne.w	16842 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   16958:	481a      	ldr	r0, [pc, #104]	; (169c4 <buttons_scan_fn+0x1f0>)
   1695a:	f001 fcd7 	bl	1830c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1695e:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   16962:	2c00      	cmp	r4, #0
   16964:	f43f af7f 	beq.w	16866 <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16968:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1696c:	2300      	movs	r3, #0
   1696e:	4917      	ldr	r1, [pc, #92]	; (169cc <buttons_scan_fn+0x1f8>)
   16970:	4817      	ldr	r0, [pc, #92]	; (169d0 <buttons_scan_fn+0x1fc>)
   16972:	f003 f915 	bl	19ba0 <k_delayed_work_submit_to_queue>
		if (err) {
   16976:	b130      	cbz	r0, 16986 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   16978:	2145      	movs	r1, #69	; 0x45
   1697a:	4816      	ldr	r0, [pc, #88]	; (169d4 <buttons_scan_fn+0x200>)
}
   1697c:	b003      	add	sp, #12
   1697e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   16982:	f004 b883 	b.w	1aa8c <printk>
}
   16986:	b003      	add	sp, #12
   16988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1698c:	2000a180 	.word	0x2000a180
   16990:	0001efd8 	.word	0x0001efd8
   16994:	000223a5 	.word	0x000223a5
   16998:	0001fb49 	.word	0x0001fb49
   1699c:	2000a1d4 	.word	0x2000a1d4
   169a0:	0001fb83 	.word	0x0001fb83
   169a4:	2000ea5d 	.word	0x2000ea5d
   169a8:	00022464 	.word	0x00022464
   169ac:	00022426 	.word	0x00022426
   169b0:	000223ea 	.word	0x000223ea
   169b4:	2000a1d8 	.word	0x2000a1d8
   169b8:	20008445 	.word	0x20008445
   169bc:	2000a1bc 	.word	0x2000a1bc
   169c0:	2000a190 	.word	0x2000a190
   169c4:	2000a194 	.word	0x2000a194
   169c8:	2000a1a8 	.word	0x2000a1a8
   169cc:	20009790 	.word	0x20009790
   169d0:	200098e0 	.word	0x200098e0
   169d4:	00022404 	.word	0x00022404

000169d8 <button_pressed>:
{
   169d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   169da:	f04f 0320 	mov.w	r3, #32
   169de:	f3ef 8611 	mrs	r6, BASEPRI
   169e2:	f383 8811 	msr	BASEPRI, r3
   169e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   169ea:	4827      	ldr	r0, [pc, #156]	; (16a88 <button_pressed+0xb0>)
   169ec:	f003 f862 	bl	19ab4 <z_spin_lock_valid>
   169f0:	b940      	cbnz	r0, 16a04 <button_pressed+0x2c>
   169f2:	4926      	ldr	r1, [pc, #152]	; (16a8c <button_pressed+0xb4>)
   169f4:	4826      	ldr	r0, [pc, #152]	; (16a90 <button_pressed+0xb8>)
   169f6:	227c      	movs	r2, #124	; 0x7c
   169f8:	f004 f848 	bl	1aa8c <printk>
   169fc:	217c      	movs	r1, #124	; 0x7c
   169fe:	4823      	ldr	r0, [pc, #140]	; (16a8c <button_pressed+0xb4>)
   16a00:	f004 faea 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   16a04:	4820      	ldr	r0, [pc, #128]	; (16a88 <button_pressed+0xb0>)
   16a06:	f003 f871 	bl	19aec <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16a0a:	2400      	movs	r4, #0
   16a0c:	4d21      	ldr	r5, [pc, #132]	; (16a94 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   16a0e:	4f22      	ldr	r7, [pc, #136]	; (16a98 <button_pressed+0xc0>)
   16a10:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   16a14:	f855 0b04 	ldr.w	r0, [r5], #4
   16a18:	7919      	ldrb	r1, [r3, #4]
   16a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16a1e:	3401      	adds	r4, #1
   16a20:	f7ff fe18 	bl	16654 <z_impl_gpio_pin_interrupt_configure>
   16a24:	2c04      	cmp	r4, #4
   16a26:	d006      	beq.n	16a36 <button_pressed+0x5e>
   16a28:	2800      	cmp	r0, #0
   16a2a:	d0f1      	beq.n	16a10 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   16a2c:	2145      	movs	r1, #69	; 0x45
   16a2e:	481b      	ldr	r0, [pc, #108]	; (16a9c <button_pressed+0xc4>)
   16a30:	f004 f82c 	bl	1aa8c <printk>
   16a34:	e001      	b.n	16a3a <button_pressed+0x62>
	if (err) {
   16a36:	2800      	cmp	r0, #0
   16a38:	d1f8      	bne.n	16a2c <button_pressed+0x54>
	switch (state) {
   16a3a:	4b19      	ldr	r3, [pc, #100]	; (16aa0 <button_pressed+0xc8>)
   16a3c:	781a      	ldrb	r2, [r3, #0]
   16a3e:	b9ca      	cbnz	r2, 16a74 <button_pressed+0x9c>
		state = STATE_SCANNING;
   16a40:	2201      	movs	r2, #1
   16a42:	4918      	ldr	r1, [pc, #96]	; (16aa4 <button_pressed+0xcc>)
   16a44:	701a      	strb	r2, [r3, #0]
   16a46:	4818      	ldr	r0, [pc, #96]	; (16aa8 <button_pressed+0xd0>)
   16a48:	2221      	movs	r2, #33	; 0x21
   16a4a:	2300      	movs	r3, #0
   16a4c:	f003 f8a8 	bl	19ba0 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16a50:	480d      	ldr	r0, [pc, #52]	; (16a88 <button_pressed+0xb0>)
   16a52:	f003 f83d 	bl	19ad0 <z_spin_unlock_valid>
   16a56:	b940      	cbnz	r0, 16a6a <button_pressed+0x92>
   16a58:	490c      	ldr	r1, [pc, #48]	; (16a8c <button_pressed+0xb4>)
   16a5a:	480d      	ldr	r0, [pc, #52]	; (16a90 <button_pressed+0xb8>)
   16a5c:	22a7      	movs	r2, #167	; 0xa7
   16a5e:	f004 f815 	bl	1aa8c <printk>
   16a62:	21a7      	movs	r1, #167	; 0xa7
   16a64:	4809      	ldr	r0, [pc, #36]	; (16a8c <button_pressed+0xb4>)
   16a66:	f004 fab7 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   16a6a:	f386 8811 	msr	BASEPRI, r6
   16a6e:	f3bf 8f6f 	isb	sy
}
   16a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   16a74:	22eb      	movs	r2, #235	; 0xeb
   16a76:	490d      	ldr	r1, [pc, #52]	; (16aac <button_pressed+0xd4>)
   16a78:	4805      	ldr	r0, [pc, #20]	; (16a90 <button_pressed+0xb8>)
   16a7a:	f004 f807 	bl	1aa8c <printk>
   16a7e:	21eb      	movs	r1, #235	; 0xeb
   16a80:	480a      	ldr	r0, [pc, #40]	; (16aac <button_pressed+0xd4>)
   16a82:	f004 faa9 	bl	1afd8 <assert_post_action>
		break;
   16a86:	e7e3      	b.n	16a50 <button_pressed+0x78>
   16a88:	2000a1d4 	.word	0x2000a1d4
   16a8c:	0001fb83 	.word	0x0001fb83
   16a90:	0001fb49 	.word	0x0001fb49
   16a94:	2000a180 	.word	0x2000a180
   16a98:	0001efd8 	.word	0x0001efd8
   16a9c:	00022481 	.word	0x00022481
   16aa0:	2000ea5d 	.word	0x2000ea5d
   16aa4:	20009790 	.word	0x20009790
   16aa8:	200098e0 	.word	0x200098e0
   16aac:	00022426 	.word	0x00022426

00016ab0 <dk_leds_init>:
{
   16ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16ab4:	2600      	movs	r6, #0
   16ab6:	4d23      	ldr	r5, [pc, #140]	; (16b44 <dk_leds_init+0x94>)
   16ab8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 16b48 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16abc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 16b4c <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   16ac0:	6828      	ldr	r0, [r5, #0]
   16ac2:	f001 f835 	bl	17b30 <z_impl_device_get_binding>
   16ac6:	4604      	mov	r4, r0
   16ac8:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   16acc:	b940      	cbnz	r0, 16ae0 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   16ace:	2145      	movs	r1, #69	; 0x45
   16ad0:	481f      	ldr	r0, [pc, #124]	; (16b50 <dk_leds_init+0xa0>)
   16ad2:	f003 ffdb 	bl	1aa8c <printk>
			return -ENODEV;
   16ad6:	f06f 0412 	mvn.w	r4, #18
}
   16ada:	4620      	mov	r0, r4
   16adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae0:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   16ae2:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16ae6:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16ae8:	fa03 f80b 	lsl.w	r8, r3, fp
   16aec:	6843      	ldr	r3, [r0, #4]
   16aee:	681b      	ldr	r3, [r3, #0]
   16af0:	ea18 0f03 	tst.w	r8, r3
   16af4:	d10a      	bne.n	16b0c <dk_leds_init+0x5c>
   16af6:	4651      	mov	r1, sl
   16af8:	4816      	ldr	r0, [pc, #88]	; (16b54 <dk_leds_init+0xa4>)
   16afa:	f44f 7211 	mov.w	r2, #580	; 0x244
   16afe:	f003 ffc5 	bl	1aa8c <printk>
   16b02:	f44f 7111 	mov.w	r1, #580	; 0x244
   16b06:	4650      	mov	r0, sl
   16b08:	f004 fa66 	bl	1afd8 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16b0c:	68a3      	ldr	r3, [r4, #8]
   16b0e:	4620      	mov	r0, r4
   16b10:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b14:	4659      	mov	r1, fp
   16b16:	681b      	ldr	r3, [r3, #0]
   16b18:	4798      	blx	r3
	if (ret != 0) {
   16b1a:	4604      	mov	r4, r0
   16b1c:	b968      	cbnz	r0, 16b3a <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16b1e:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16b20:	3601      	adds	r6, #1
   16b22:	ea23 0308 	bic.w	r3, r3, r8
   16b26:	2e04      	cmp	r6, #4
   16b28:	603b      	str	r3, [r7, #0]
   16b2a:	f105 0508 	add.w	r5, r5, #8
   16b2e:	d1c7      	bne.n	16ac0 <dk_leds_init+0x10>
}
   16b30:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b34:	210f      	movs	r1, #15
   16b36:	f7ff be1f 	b.w	16778 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   16b3a:	2145      	movs	r1, #69	; 0x45
   16b3c:	4806      	ldr	r0, [pc, #24]	; (16b58 <dk_leds_init+0xa8>)
   16b3e:	f003 ffa5 	bl	1aa8c <printk>
			return err;
   16b42:	e7ca      	b.n	16ada <dk_leds_init+0x2a>
   16b44:	0001eff8 	.word	0x0001eff8
   16b48:	2000a1c4 	.word	0x2000a1c4
   16b4c:	000223a5 	.word	0x000223a5
   16b50:	0002249f 	.word	0x0002249f
   16b54:	0001fb49 	.word	0x0001fb49
   16b58:	000224bc 	.word	0x000224bc

00016b5c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16b5c:	4b05      	ldr	r3, [pc, #20]	; (16b74 <dk_read_buttons+0x18>)
   16b5e:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16b62:	b100      	cbz	r0, 16b66 <dk_read_buttons+0xa>
		*button_state = current_state;
   16b64:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   16b66:	4804      	ldr	r0, [pc, #16]	; (16b78 <dk_read_buttons+0x1c>)
   16b68:	b111      	cbz	r1, 16b70 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   16b6a:	6802      	ldr	r2, [r0, #0]
   16b6c:	405a      	eors	r2, r3
   16b6e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16b70:	6003      	str	r3, [r0, #0]
}
   16b72:	4770      	bx	lr
   16b74:	2000a1d8 	.word	0x2000a1d8
   16b78:	2000a1c0 	.word	0x2000a1c0

00016b7c <dk_buttons_init>:
	button_handler_cb = button_handler;
   16b7c:	4b4f      	ldr	r3, [pc, #316]	; (16cbc <dk_buttons_init+0x140>)
{
   16b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16b82:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16b84:	4e4e      	ldr	r6, [pc, #312]	; (16cc0 <dk_buttons_init+0x144>)
   16b86:	484f      	ldr	r0, [pc, #316]	; (16cc4 <dk_buttons_init+0x148>)
   16b88:	f007 fa16 	bl	1dfb8 <z_impl_k_mutex_init>
   16b8c:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16b8e:	2700      	movs	r7, #0
   16b90:	4d4d      	ldr	r5, [pc, #308]	; (16cc8 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16b92:	f8df a138 	ldr.w	sl, [pc, #312]	; 16ccc <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   16b96:	6828      	ldr	r0, [r5, #0]
   16b98:	f000 ffca 	bl	17b30 <z_impl_device_get_binding>
   16b9c:	4604      	mov	r4, r0
   16b9e:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16ba2:	b948      	cbnz	r0, 16bb8 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   16ba4:	2145      	movs	r1, #69	; 0x45
   16ba6:	484a      	ldr	r0, [pc, #296]	; (16cd0 <dk_buttons_init+0x154>)
   16ba8:	f003 ff70 	bl	1aa8c <printk>
			return -ENODEV;
   16bac:	f06f 0412 	mvn.w	r4, #18
}
   16bb0:	4620      	mov	r0, r4
   16bb2:	b003      	add	sp, #12
   16bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bb8:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   16bba:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16bbe:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16bc2:	fa03 f30b 	lsl.w	r3, r3, fp
   16bc6:	9301      	str	r3, [sp, #4]
   16bc8:	6843      	ldr	r3, [r0, #4]
   16bca:	9a01      	ldr	r2, [sp, #4]
   16bcc:	681b      	ldr	r3, [r3, #0]
   16bce:	421a      	tst	r2, r3
   16bd0:	d10a      	bne.n	16be8 <dk_buttons_init+0x6c>
   16bd2:	4651      	mov	r1, sl
   16bd4:	483f      	ldr	r0, [pc, #252]	; (16cd4 <dk_buttons_init+0x158>)
   16bd6:	f44f 7211 	mov.w	r2, #580	; 0x244
   16bda:	f003 ff57 	bl	1aa8c <printk>
   16bde:	f44f 7111 	mov.w	r1, #580	; 0x244
   16be2:	4650      	mov	r0, sl
   16be4:	f004 f9f8 	bl	1afd8 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16be8:	68a3      	ldr	r3, [r4, #8]
   16bea:	4620      	mov	r0, r4
   16bec:	f44f 7288 	mov.w	r2, #272	; 0x110
   16bf0:	4659      	mov	r1, fp
   16bf2:	681b      	ldr	r3, [r3, #0]
   16bf4:	4798      	blx	r3
	if (ret != 0) {
   16bf6:	4604      	mov	r4, r0
   16bf8:	bb08      	cbnz	r0, 16c3e <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16bfa:	f8d8 3000 	ldr.w	r3, [r8]
   16bfe:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c00:	3701      	adds	r7, #1
   16c02:	ea23 0302 	bic.w	r3, r3, r2
   16c06:	2f04      	cmp	r7, #4
   16c08:	f8c8 3000 	str.w	r3, [r8]
   16c0c:	f105 0508 	add.w	r5, r5, #8
   16c10:	d1c1      	bne.n	16b96 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c12:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   16c14:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   16c16:	f04f 0a01 	mov.w	sl, #1
   16c1a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 16cc0 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   16c1e:	4b2a      	ldr	r3, [pc, #168]	; (16cc8 <dk_buttons_init+0x14c>)
   16c20:	f859 0b04 	ldr.w	r0, [r9], #4
   16c24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   16c28:	791f      	ldrb	r7, [r3, #4]
   16c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16c2e:	4639      	mov	r1, r7
   16c30:	f7ff fd10 	bl	16654 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   16c34:	4604      	mov	r4, r0
   16c36:	b138      	cbz	r0, 16c48 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   16c38:	2145      	movs	r1, #69	; 0x45
   16c3a:	4827      	ldr	r0, [pc, #156]	; (16cd8 <dk_buttons_init+0x15c>)
   16c3c:	e001      	b.n	16c42 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   16c3e:	2145      	movs	r1, #69	; 0x45
   16c40:	4826      	ldr	r0, [pc, #152]	; (16cdc <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   16c42:	f003 ff23 	bl	1aa8c <printk>
		return err;
   16c46:	e7b3      	b.n	16bb0 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c48:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   16c4a:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c4e:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   16c50:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c54:	d1e3      	bne.n	16c1e <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c56:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16c58:	4f21      	ldr	r7, [pc, #132]	; (16ce0 <dk_buttons_init+0x164>)
   16c5a:	4b22      	ldr	r3, [pc, #136]	; (16ce4 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   16c5c:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   16c60:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16c64:	6883      	ldr	r3, [r0, #8]
   16c66:	69db      	ldr	r3, [r3, #28]
   16c68:	b13b      	cbz	r3, 16c7a <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   16c6a:	2201      	movs	r2, #1
   16c6c:	4639      	mov	r1, r7
   16c6e:	4798      	blx	r3
		if (err) {
   16c70:	4604      	mov	r4, r0
   16c72:	b128      	cbz	r0, 16c80 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   16c74:	2145      	movs	r1, #69	; 0x45
   16c76:	481c      	ldr	r0, [pc, #112]	; (16ce8 <dk_buttons_init+0x16c>)
   16c78:	e7e3      	b.n	16c42 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   16c7a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   16c7e:	e7f9      	b.n	16c74 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c80:	3501      	adds	r5, #1
   16c82:	2d04      	cmp	r5, #4
   16c84:	d1ec      	bne.n	16c60 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16c86:	4d19      	ldr	r5, [pc, #100]	; (16cec <dk_buttons_init+0x170>)
   16c88:	4601      	mov	r1, r0
   16c8a:	2230      	movs	r2, #48	; 0x30
   16c8c:	4628      	mov	r0, r5
   16c8e:	f005 f952 	bl	1bf36 <memset>
	state = STATE_SCANNING;
   16c92:	2201      	movs	r2, #1
   16c94:	4b16      	ldr	r3, [pc, #88]	; (16cf0 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16c96:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16c98:	606b      	str	r3, [r5, #4]
   16c9a:	4b16      	ldr	r3, [pc, #88]	; (16cf4 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16c9c:	4816      	ldr	r0, [pc, #88]	; (16cf8 <dk_buttons_init+0x17c>)
   16c9e:	701a      	strb	r2, [r3, #0]
   16ca0:	2200      	movs	r2, #0
   16ca2:	2300      	movs	r3, #0
   16ca4:	f002 ff7c 	bl	19ba0 <k_delayed_work_submit_to_queue>
	if (err) {
   16ca8:	4604      	mov	r4, r0
   16caa:	b110      	cbz	r0, 16cb2 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   16cac:	2145      	movs	r1, #69	; 0x45
   16cae:	4813      	ldr	r0, [pc, #76]	; (16cfc <dk_buttons_init+0x180>)
   16cb0:	e7c7      	b.n	16c42 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   16cb2:	4601      	mov	r1, r0
   16cb4:	f7ff ff52 	bl	16b5c <dk_read_buttons>
	return 0;
   16cb8:	e77a      	b.n	16bb0 <dk_buttons_init+0x34>
   16cba:	bf00      	nop
   16cbc:	2000a190 	.word	0x2000a190
   16cc0:	2000a180 	.word	0x2000a180
   16cc4:	2000a194 	.word	0x2000a194
   16cc8:	0001efd8 	.word	0x0001efd8
   16ccc:	000223a5 	.word	0x000223a5
   16cd0:	0002249f 	.word	0x0002249f
   16cd4:	0001fb49 	.word	0x0001fb49
   16cd8:	000224fd 	.word	0x000224fd
   16cdc:	000224db 	.word	0x000224db
   16ce0:	2000a1b0 	.word	0x2000a1b0
   16ce4:	000169d9 	.word	0x000169d9
   16ce8:	0002251d 	.word	0x0002251d
   16cec:	20009790 	.word	0x20009790
   16cf0:	000167d5 	.word	0x000167d5
   16cf4:	2000ea5d 	.word	0x2000ea5d
   16cf8:	200098e0 	.word	0x200098e0
   16cfc:	00022404 	.word	0x00022404

00016d00 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   16d00:	2804      	cmp	r0, #4
{
   16d02:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   16d04:	d907      	bls.n	16d16 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   16d06:	2145      	movs	r1, #69	; 0x45
   16d08:	480d      	ldr	r0, [pc, #52]	; (16d40 <dk_set_led+0x40>)
   16d0a:	f003 febf 	bl	1aa8c <printk>
   16d0e:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   16d12:	4620      	mov	r0, r4
   16d14:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   16d16:	fab1 f281 	clz	r2, r1
   16d1a:	4b0a      	ldr	r3, [pc, #40]	; (16d44 <dk_set_led+0x44>)
   16d1c:	0952      	lsrs	r2, r2, #5
   16d1e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16d22:	7919      	ldrb	r1, [r3, #4]
   16d24:	4b08      	ldr	r3, [pc, #32]	; (16d48 <dk_set_led+0x48>)
   16d26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16d2a:	f7ff fd01 	bl	16730 <gpio_pin_set_raw>
	if (err) {
   16d2e:	4604      	mov	r4, r0
   16d30:	2800      	cmp	r0, #0
   16d32:	d0ee      	beq.n	16d12 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   16d34:	2145      	movs	r1, #69	; 0x45
   16d36:	4805      	ldr	r0, [pc, #20]	; (16d4c <dk_set_led+0x4c>)
   16d38:	f003 fea8 	bl	1aa8c <printk>
   16d3c:	e7e9      	b.n	16d12 <dk_set_led+0x12>
   16d3e:	bf00      	nop
   16d40:	00022536 	.word	0x00022536
   16d44:	0001eff8 	.word	0x0001eff8
   16d48:	2000a1c4 	.word	0x2000a1c4
   16d4c:	000223cf 	.word	0x000223cf

00016d50 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   16d50:	4803      	ldr	r0, [pc, #12]	; (16d60 <k_sys_fatal_error_handler+0x10>)
   16d52:	2145      	movs	r1, #69	; 0x45
{
   16d54:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   16d56:	f003 fe99 	bl	1aa8c <printk>
	sys_arch_reboot(0);
   16d5a:	2000      	movs	r0, #0
   16d5c:	f7f7 fa68 	bl	e230 <sys_arch_reboot>

	CODE_UNREACHABLE;
   16d60:	0002256a 	.word	0x0002256a

00016d64 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   16d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d68:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   16d6a:	4c21      	ldr	r4, [pc, #132]	; (16df0 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   16d6c:	4e21      	ldr	r6, [pc, #132]	; (16df4 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d6e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16d72:	f8df 9084 	ldr.w	r9, [pc, #132]	; 16df8 <check_ext_api_requests+0x94>
{
   16d76:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d78:	45a8      	cmp	r8, r5
   16d7a:	d803      	bhi.n	16d84 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   16d7c:	2000      	movs	r0, #0
   16d7e:	b005      	add	sp, #20
   16d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   16d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16d86:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16d8a:	681f      	ldr	r7, [r3, #0]
   16d8c:	ab01      	add	r3, sp, #4
   16d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16d92:	220c      	movs	r2, #12
   16d94:	4619      	mov	r1, r3
   16d96:	4638      	mov	r0, r7
   16d98:	f005 f891 	bl	1bebe <memcmp>
   16d9c:	b990      	cbnz	r0, 16dc4 <check_ext_api_requests+0x60>
   16d9e:	b18f      	cbz	r7, 16dc4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   16da2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16da4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16da6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16da8:	4291      	cmp	r1, r2
   16daa:	d10b      	bne.n	16dc4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   16dac:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   16dae:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16db0:	4291      	cmp	r1, r2
   16db2:	d807      	bhi.n	16dc4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   16db4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16db6:	4291      	cmp	r1, r2
   16db8:	d904      	bls.n	16dc4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   16dba:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16dbc:	695b      	ldr	r3, [r3, #20]
   16dbe:	ea32 0303 	bics.w	r3, r2, r3
   16dc2:	d00a      	beq.n	16dda <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   16dc4:	6a27      	ldr	r7, [r4, #32]
   16dc6:	b167      	cbz	r7, 16de2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   16dc8:	480c      	ldr	r0, [pc, #48]	; (16dfc <check_ext_api_requests+0x98>)
   16dca:	f003 fe5f 	bl	1aa8c <printk>
			k_panic();
   16dce:	4040      	eors	r0, r0
   16dd0:	f380 8811 	msr	BASEPRI, r0
   16dd4:	f04f 0004 	mov.w	r0, #4
   16dd8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   16dda:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16ddc:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   16dde:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16de0:	e7ca      	b.n	16d78 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   16de2:	4648      	mov	r0, r9
   16de4:	f003 fe52 	bl	1aa8c <printk>
			*ext_api_req->ext_api = NULL;
   16de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16dea:	601f      	str	r7, [r3, #0]
   16dec:	e7f5      	b.n	16dda <check_ext_api_requests+0x76>
   16dee:	bf00      	nop
   16df0:	0000823c 	.word	0x0000823c
   16df4:	0001e7c0 	.word	0x0001e7c0
   16df8:	000225b5 	.word	0x000225b5
   16dfc:	0002258c 	.word	0x0002258c

00016e00 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   16e00:	4b04      	ldr	r3, [pc, #16]	; (16e14 <SystemCoreClockUpdate+0x14>)
   16e02:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   16e06:	4b04      	ldr	r3, [pc, #16]	; (16e18 <SystemCoreClockUpdate+0x18>)
   16e08:	f002 0203 	and.w	r2, r2, #3
   16e0c:	40d3      	lsrs	r3, r2
   16e0e:	4a03      	ldr	r2, [pc, #12]	; (16e1c <SystemCoreClockUpdate+0x1c>)
   16e10:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   16e12:	4770      	bx	lr
   16e14:	40005000 	.word	0x40005000
   16e18:	07a12000 	.word	0x07a12000
   16e1c:	200083f4 	.word	0x200083f4

00016e20 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   16e20:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   16e22:	4604      	mov	r4, r0
   16e24:	b940      	cbnz	r0, 16e38 <nrfx_clock_init+0x18>
   16e26:	4909      	ldr	r1, [pc, #36]	; (16e4c <nrfx_clock_init+0x2c>)
   16e28:	4809      	ldr	r0, [pc, #36]	; (16e50 <nrfx_clock_init+0x30>)
   16e2a:	22b3      	movs	r2, #179	; 0xb3
   16e2c:	f003 fe2e 	bl	1aa8c <printk>
   16e30:	21b3      	movs	r1, #179	; 0xb3
   16e32:	4806      	ldr	r0, [pc, #24]	; (16e4c <nrfx_clock_init+0x2c>)
   16e34:	f004 f8d0 	bl	1afd8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16e38:	4b06      	ldr	r3, [pc, #24]	; (16e54 <nrfx_clock_init+0x34>)
   16e3a:	791a      	ldrb	r2, [r3, #4]
   16e3c:	b922      	cbnz	r2, 16e48 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   16e3e:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   16e40:	4805      	ldr	r0, [pc, #20]	; (16e58 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   16e42:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   16e44:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16e46:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16e48:	4804      	ldr	r0, [pc, #16]	; (16e5c <nrfx_clock_init+0x3c>)
    return err_code;
   16e4a:	e7fc      	b.n	16e46 <nrfx_clock_init+0x26>
   16e4c:	000225e8 	.word	0x000225e8
   16e50:	0001fb49 	.word	0x0001fb49
   16e54:	2000a1dc 	.word	0x2000a1dc
   16e58:	0bad0000 	.word	0x0bad0000
   16e5c:	0bad000c 	.word	0x0bad000c

00016e60 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16e60:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16e62:	4b0d      	ldr	r3, [pc, #52]	; (16e98 <nrfx_clock_enable+0x38>)
   16e64:	791b      	ldrb	r3, [r3, #4]
   16e66:	b943      	cbnz	r3, 16e7a <nrfx_clock_enable+0x1a>
   16e68:	490c      	ldr	r1, [pc, #48]	; (16e9c <nrfx_clock_enable+0x3c>)
   16e6a:	480d      	ldr	r0, [pc, #52]	; (16ea0 <nrfx_clock_enable+0x40>)
   16e6c:	22cc      	movs	r2, #204	; 0xcc
   16e6e:	f003 fe0d 	bl	1aa8c <printk>
   16e72:	21cc      	movs	r1, #204	; 0xcc
   16e74:	4809      	ldr	r0, [pc, #36]	; (16e9c <nrfx_clock_enable+0x3c>)
   16e76:	f004 f8af 	bl	1afd8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   16e7a:	2005      	movs	r0, #5
   16e7c:	f7f6 fecc 	bl	dc18 <arch_irq_is_enabled>
   16e80:	b910      	cbnz	r0, 16e88 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16e82:	2005      	movs	r0, #5
   16e84:	f7f6 feb8 	bl	dbf8 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   16e88:	2201      	movs	r2, #1
   16e8a:	4b06      	ldr	r3, [pc, #24]	; (16ea4 <nrfx_clock_enable+0x44>)
   16e8c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16e90:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16e94:	bd08      	pop	{r3, pc}
   16e96:	bf00      	nop
   16e98:	2000a1dc 	.word	0x2000a1dc
   16e9c:	000225e8 	.word	0x000225e8
   16ea0:	0001fb49 	.word	0x0001fb49
   16ea4:	40005000 	.word	0x40005000

00016ea8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ea8:	4b30      	ldr	r3, [pc, #192]	; (16f6c <nrfx_clock_start+0xc4>)
{
   16eaa:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16eac:	791b      	ldrb	r3, [r3, #4]
{
   16eae:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16eb0:	b953      	cbnz	r3, 16ec8 <nrfx_clock_start+0x20>
   16eb2:	492f      	ldr	r1, [pc, #188]	; (16f70 <nrfx_clock_start+0xc8>)
   16eb4:	482f      	ldr	r0, [pc, #188]	; (16f74 <nrfx_clock_start+0xcc>)
   16eb6:	f44f 7284 	mov.w	r2, #264	; 0x108
   16eba:	f003 fde7 	bl	1aa8c <printk>
   16ebe:	f44f 7184 	mov.w	r1, #264	; 0x108
   16ec2:	482b      	ldr	r0, [pc, #172]	; (16f70 <nrfx_clock_start+0xc8>)
   16ec4:	f004 f888 	bl	1afd8 <assert_post_action>
    switch (domain)
   16ec8:	2c03      	cmp	r4, #3
   16eca:	d842      	bhi.n	16f52 <nrfx_clock_start+0xaa>
   16ecc:	e8df f004 	tbb	[pc, r4]
   16ed0:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16ed4:	4b28      	ldr	r3, [pc, #160]	; (16f78 <nrfx_clock_start+0xd0>)
   16ed6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16eda:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   16ede:	03c9      	lsls	r1, r1, #15
   16ee0:	d510      	bpl.n	16f04 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16ee2:	f002 0203 	and.w	r2, r2, #3
   16ee6:	2a02      	cmp	r2, #2
   16ee8:	d10c      	bne.n	16f04 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16eea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16eee:	2200      	movs	r2, #0
   16ef0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16ef4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16ef8:	2202      	movs	r2, #2
   16efa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16efe:	2201      	movs	r2, #1
   16f00:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16f02:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   16f04:	2201      	movs	r2, #1
   16f06:	e7f0      	b.n	16eea <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f08:	2200      	movs	r2, #0
   16f0a:	4b1b      	ldr	r3, [pc, #108]	; (16f78 <nrfx_clock_start+0xd0>)
   16f0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16f10:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16f14:	2201      	movs	r2, #1
   16f16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f1a:	601a      	str	r2, [r3, #0]
}
   16f1c:	e7f1      	b.n	16f02 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f1e:	2200      	movs	r2, #0
   16f20:	4b15      	ldr	r3, [pc, #84]	; (16f78 <nrfx_clock_start+0xd0>)
   16f22:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16f26:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   16f2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f32:	2201      	movs	r2, #1
   16f34:	621a      	str	r2, [r3, #32]
}
   16f36:	e7e4      	b.n	16f02 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f38:	2200      	movs	r2, #0
   16f3a:	4b0f      	ldr	r3, [pc, #60]	; (16f78 <nrfx_clock_start+0xd0>)
   16f3c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16f40:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   16f44:	f44f 7280 	mov.w	r2, #256	; 0x100
   16f48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f4c:	2201      	movs	r2, #1
   16f4e:	619a      	str	r2, [r3, #24]
}
   16f50:	e7d7      	b.n	16f02 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   16f52:	4907      	ldr	r1, [pc, #28]	; (16f70 <nrfx_clock_start+0xc8>)
   16f54:	4807      	ldr	r0, [pc, #28]	; (16f74 <nrfx_clock_start+0xcc>)
   16f56:	f44f 729d 	mov.w	r2, #314	; 0x13a
   16f5a:	f003 fd97 	bl	1aa8c <printk>
}
   16f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   16f62:	f44f 719d 	mov.w	r1, #314	; 0x13a
   16f66:	4802      	ldr	r0, [pc, #8]	; (16f70 <nrfx_clock_start+0xc8>)
   16f68:	f004 b836 	b.w	1afd8 <assert_post_action>
   16f6c:	2000a1dc 	.word	0x2000a1dc
   16f70:	000225e8 	.word	0x000225e8
   16f74:	0001fb49 	.word	0x0001fb49
   16f78:	40005000 	.word	0x40005000

00016f7c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16f7c:	4b42      	ldr	r3, [pc, #264]	; (17088 <nrfx_clock_stop+0x10c>)
{
   16f7e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16f80:	791b      	ldrb	r3, [r3, #4]
{
   16f82:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16f84:	b953      	cbnz	r3, 16f9c <nrfx_clock_stop+0x20>
   16f86:	4941      	ldr	r1, [pc, #260]	; (1708c <nrfx_clock_stop+0x110>)
   16f88:	4841      	ldr	r0, [pc, #260]	; (17090 <nrfx_clock_stop+0x114>)
   16f8a:	f240 1241 	movw	r2, #321	; 0x141
   16f8e:	f003 fd7d 	bl	1aa8c <printk>
   16f92:	f240 1141 	movw	r1, #321	; 0x141
   16f96:	483d      	ldr	r0, [pc, #244]	; (1708c <nrfx_clock_stop+0x110>)
   16f98:	f004 f81e 	bl	1afd8 <assert_post_action>
    switch (domain)
   16f9c:	2c03      	cmp	r4, #3
   16f9e:	d856      	bhi.n	1704e <nrfx_clock_stop+0xd2>
   16fa0:	e8df f004 	tbb	[pc, r4]
   16fa4:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   16fa8:	2202      	movs	r2, #2
   16faa:	4b3a      	ldr	r3, [pc, #232]	; (17094 <nrfx_clock_stop+0x118>)
   16fac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16fb0:	2200      	movs	r2, #0
   16fb2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16fb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16fba:	2201      	movs	r2, #1
   16fbc:	60da      	str	r2, [r3, #12]
   16fbe:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16fc2:	4e34      	ldr	r6, [pc, #208]	; (17094 <nrfx_clock_stop+0x118>)
    switch (domain)
   16fc4:	2c02      	cmp	r4, #2
   16fc6:	d04f      	beq.n	17068 <nrfx_clock_stop+0xec>
   16fc8:	2c03      	cmp	r4, #3
   16fca:	d050      	beq.n	1706e <nrfx_clock_stop+0xf2>
   16fcc:	2c00      	cmp	r4, #0
   16fce:	d151      	bne.n	17074 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16fd0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16fd4:	03db      	lsls	r3, r3, #15
   16fd6:	d51f      	bpl.n	17018 <nrfx_clock_stop+0x9c>
   16fd8:	2001      	movs	r0, #1
   16fda:	f006 fbca 	bl	1d772 <nrfx_busy_wait>
   16fde:	3d01      	subs	r5, #1
   16fe0:	d1f0      	bne.n	16fc4 <nrfx_clock_stop+0x48>
   16fe2:	e019      	b.n	17018 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   16fe4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16fe6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16fe8:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   16fec:	4c29      	ldr	r4, [pc, #164]	; (17094 <nrfx_clock_stop+0x118>)
   16fee:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ff2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16ff6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ffa:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16ffc:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17000:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17004:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17008:	03d2      	lsls	r2, r2, #15
   1700a:	d505      	bpl.n	17018 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1700c:	b123      	cbz	r3, 17018 <nrfx_clock_stop+0x9c>
   1700e:	2001      	movs	r0, #1
   17010:	f006 fbaf 	bl	1d772 <nrfx_busy_wait>
   17014:	3d01      	subs	r5, #1
   17016:	d1f1      	bne.n	16ffc <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   17018:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   1701a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1701e:	4b1d      	ldr	r3, [pc, #116]	; (17094 <nrfx_clock_stop+0x118>)
   17020:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17024:	2200      	movs	r2, #0
   17026:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1702a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1702e:	2201      	movs	r2, #1
   17030:	625a      	str	r2, [r3, #36]	; 0x24
}
   17032:	e7c4      	b.n	16fbe <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   17034:	f44f 7280 	mov.w	r2, #256	; 0x100
   17038:	4b16      	ldr	r3, [pc, #88]	; (17094 <nrfx_clock_stop+0x118>)
   1703a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1703e:	2200      	movs	r2, #0
   17040:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   17044:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17048:	2201      	movs	r2, #1
   1704a:	61da      	str	r2, [r3, #28]
}
   1704c:	e7b7      	b.n	16fbe <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   1704e:	490f      	ldr	r1, [pc, #60]	; (1708c <nrfx_clock_stop+0x110>)
   17050:	480f      	ldr	r0, [pc, #60]	; (17090 <nrfx_clock_stop+0x114>)
   17052:	f240 125d 	movw	r2, #349	; 0x15d
   17056:	f003 fd19 	bl	1aa8c <printk>
   1705a:	f240 115d 	movw	r1, #349	; 0x15d
   1705e:	480b      	ldr	r0, [pc, #44]	; (1708c <nrfx_clock_stop+0x110>)
}
   17060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   17064:	f003 bfb8 	b.w	1afd8 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   17068:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1706c:	e7b2      	b.n	16fd4 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1706e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   17072:	e7af      	b.n	16fd4 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   17074:	4908      	ldr	r1, [pc, #32]	; (17098 <nrfx_clock_stop+0x11c>)
   17076:	4806      	ldr	r0, [pc, #24]	; (17090 <nrfx_clock_stop+0x114>)
   17078:	f240 3242 	movw	r2, #834	; 0x342
   1707c:	f003 fd06 	bl	1aa8c <printk>
   17080:	f240 3142 	movw	r1, #834	; 0x342
   17084:	4804      	ldr	r0, [pc, #16]	; (17098 <nrfx_clock_stop+0x11c>)
   17086:	e7eb      	b.n	17060 <nrfx_clock_stop+0xe4>
   17088:	2000a1dc 	.word	0x2000a1dc
   1708c:	000225e8 	.word	0x000225e8
   17090:	0001fb49 	.word	0x0001fb49
   17094:	40005000 	.word	0x40005000
   17098:	00022625 	.word	0x00022625

0001709c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1709c:	4b28      	ldr	r3, [pc, #160]	; (17140 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1709e:	b510      	push	{r4, lr}
   170a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   170a4:	b152      	cbz	r2, 170bc <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   170a6:	2000      	movs	r0, #0
   170a8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   170ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   170b0:	2201      	movs	r2, #1
   170b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   170b6:	4b23      	ldr	r3, [pc, #140]	; (17144 <nrfx_power_clock_irq_handler+0xa8>)
   170b8:	681b      	ldr	r3, [r3, #0]
   170ba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   170bc:	4b20      	ldr	r3, [pc, #128]	; (17140 <nrfx_power_clock_irq_handler+0xa4>)
   170be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   170c2:	b18a      	cbz	r2, 170e8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   170c4:	2200      	movs	r2, #0
   170c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   170ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   170ce:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   170d2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   170d6:	f002 0203 	and.w	r2, r2, #3
   170da:	2a01      	cmp	r2, #1
   170dc:	f04f 0102 	mov.w	r1, #2
   170e0:	d126      	bne.n	17130 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   170e2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   170e6:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   170e8:	4b15      	ldr	r3, [pc, #84]	; (17140 <nrfx_power_clock_irq_handler+0xa4>)
   170ea:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   170ee:	b162      	cbz	r2, 1710a <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   170f0:	2200      	movs	r2, #0
   170f2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   170f6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   170fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   170fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   17102:	4b10      	ldr	r3, [pc, #64]	; (17144 <nrfx_power_clock_irq_handler+0xa8>)
   17104:	2004      	movs	r0, #4
   17106:	681b      	ldr	r3, [r3, #0]
   17108:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1710a:	4b0d      	ldr	r3, [pc, #52]	; (17140 <nrfx_power_clock_irq_handler+0xa4>)
   1710c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   17110:	b1aa      	cbz	r2, 1713e <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   17112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17116:	2200      	movs	r2, #0
   17118:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1711c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   17120:	f44f 7200 	mov.w	r2, #512	; 0x200
   17124:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   17128:	4b06      	ldr	r3, [pc, #24]	; (17144 <nrfx_power_clock_irq_handler+0xa8>)
   1712a:	2005      	movs	r0, #5
   1712c:	681b      	ldr	r3, [r3, #0]
   1712e:	4718      	bx	r3
   17130:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17134:	4b03      	ldr	r3, [pc, #12]	; (17144 <nrfx_power_clock_irq_handler+0xa8>)
   17136:	2001      	movs	r0, #1
   17138:	681b      	ldr	r3, [r3, #0]
   1713a:	4798      	blx	r3
   1713c:	e7d4      	b.n	170e8 <nrfx_power_clock_irq_handler+0x4c>
}
   1713e:	bd10      	pop	{r4, pc}
   17140:	40005000 	.word	0x40005000
   17144:	2000a1dc 	.word	0x2000a1dc

00017148 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   17148:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1714a:	4c0a      	ldr	r4, [pc, #40]	; (17174 <nrfx_dppi_channel_alloc+0x2c>)
   1714c:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   1714e:	43ce      	mvns	r6, r1
   17150:	d00e      	beq.n	17170 <nrfx_dppi_channel_alloc+0x28>
   17152:	2300      	movs	r3, #0
   17154:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   17156:	fa26 f502 	lsr.w	r5, r6, r2
   1715a:	07ed      	lsls	r5, r5, #31
   1715c:	f103 0301 	add.w	r3, r3, #1
   17160:	d5f8      	bpl.n	17154 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   17162:	2301      	movs	r3, #1
   17164:	4093      	lsls	r3, r2
   17166:	430b      	orrs	r3, r1
    *p_channel = channel;
   17168:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   1716a:	4803      	ldr	r0, [pc, #12]	; (17178 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   1716c:	6023      	str	r3, [r4, #0]
}
   1716e:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   17170:	4802      	ldr	r0, [pc, #8]	; (1717c <nrfx_dppi_channel_alloc+0x34>)
   17172:	e7fc      	b.n	1716e <nrfx_dppi_channel_alloc+0x26>
   17174:	2000a1e4 	.word	0x2000a1e4
   17178:	0bad0000 	.word	0x0bad0000
   1717c:	0bad0002 	.word	0x0bad0002

00017180 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   17180:	2301      	movs	r3, #1
   17182:	fa03 f000 	lsl.w	r0, r3, r0
   17186:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   17188:	b193      	cbz	r3, 171b0 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1718a:	f04f 0320 	mov.w	r3, #32
   1718e:	f3ef 8111 	mrs	r1, BASEPRI
   17192:	f383 8811 	msr	BASEPRI, r3
   17196:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1719a:	4a06      	ldr	r2, [pc, #24]	; (171b4 <nrfx_gpiote_channel_free+0x34>)
   1719c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1719e:	ea23 0000 	bic.w	r0, r3, r0
   171a2:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   171a4:	f381 8811 	msr	BASEPRI, r1
   171a8:	f3bf 8f6f 	isb	sy
   171ac:	4802      	ldr	r0, [pc, #8]	; (171b8 <nrfx_gpiote_channel_free+0x38>)
   171ae:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   171b0:	4802      	ldr	r0, [pc, #8]	; (171bc <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   171b2:	4770      	bx	lr
   171b4:	2000a1e8 	.word	0x2000a1e8
   171b8:	0bad0000 	.word	0x0bad0000
   171bc:	0bad0004 	.word	0x0bad0004

000171c0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   171c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   171c4:	22ff      	movs	r2, #255	; 0xff
{
   171c6:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   171c8:	2601      	movs	r6, #1
{
   171ca:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   171cc:	f8df e054 	ldr.w	lr, [pc, #84]	; 17224 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   171d0:	4815      	ldr	r0, [pc, #84]	; (17228 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   171d2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1722c <nrfx_gpiote_channel_alloc+0x6c>
   171d6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   171d8:	f04f 0120 	mov.w	r1, #32
   171dc:	f3ef 8c11 	mrs	ip, BASEPRI
   171e0:	f381 8811 	msr	BASEPRI, r1
   171e4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   171e8:	fa22 f103 	lsr.w	r1, r2, r3
   171ec:	07c9      	lsls	r1, r1, #31
   171ee:	d50a      	bpl.n	17206 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   171f0:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   171f4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   171f8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   171fa:	bf01      	itttt	eq
   171fc:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   171fe:	4339      	orreq	r1, r7
   17200:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   17204:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   17206:	f38c 8811 	msr	BASEPRI, ip
   1720a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1720e:	4540      	cmp	r0, r8
   17210:	d005      	beq.n	1721e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   17212:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   17216:	439a      	bics	r2, r3
   17218:	f104 0401 	add.w	r4, r4, #1
   1721c:	d1db      	bne.n	171d6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17222:	bf00      	nop
   17224:	2000a1e8 	.word	0x2000a1e8
   17228:	0bad0002 	.word	0x0bad0002
   1722c:	0bad0000 	.word	0x0bad0000

00017230 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17230:	b570      	push	{r4, r5, r6, lr}
   17232:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   17234:	460d      	mov	r5, r1
   17236:	b941      	cbnz	r1, 1724a <nrfx_ipc_init+0x1a>
   17238:	490b      	ldr	r1, [pc, #44]	; (17268 <nrfx_ipc_init+0x38>)
   1723a:	480c      	ldr	r0, [pc, #48]	; (1726c <nrfx_ipc_init+0x3c>)
   1723c:	2232      	movs	r2, #50	; 0x32
   1723e:	f003 fc25 	bl	1aa8c <printk>
   17242:	2132      	movs	r1, #50	; 0x32
   17244:	4808      	ldr	r0, [pc, #32]	; (17268 <nrfx_ipc_init+0x38>)
   17246:	f003 fec7 	bl	1afd8 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1724a:	4c09      	ldr	r4, [pc, #36]	; (17270 <nrfx_ipc_init+0x40>)
   1724c:	7923      	ldrb	r3, [r4, #4]
   1724e:	b943      	cbnz	r3, 17262 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   17250:	202a      	movs	r0, #42	; 0x2a
   17252:	f7f6 fcd1 	bl	dbf8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17256:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   17258:	4806      	ldr	r0, [pc, #24]	; (17274 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1725a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1725c:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1725e:	60a6      	str	r6, [r4, #8]
}
   17260:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   17262:	4805      	ldr	r0, [pc, #20]	; (17278 <nrfx_ipc_init+0x48>)
   17264:	e7fc      	b.n	17260 <nrfx_ipc_init+0x30>
   17266:	bf00      	nop
   17268:	00022659 	.word	0x00022659
   1726c:	0001fb49 	.word	0x0001fb49
   17270:	2000a248 	.word	0x2000a248
   17274:	0bad0000 	.word	0x0bad0000
   17278:	0bad000c 	.word	0x0bad000c

0001727c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1727c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1727e:	4604      	mov	r4, r0
   17280:	b940      	cbnz	r0, 17294 <nrfx_ipc_config_load+0x18>
   17282:	4919      	ldr	r1, [pc, #100]	; (172e8 <nrfx_ipc_config_load+0x6c>)
   17284:	4819      	ldr	r0, [pc, #100]	; (172ec <nrfx_ipc_config_load+0x70>)
   17286:	2244      	movs	r2, #68	; 0x44
   17288:	f003 fc00 	bl	1aa8c <printk>
   1728c:	2144      	movs	r1, #68	; 0x44
   1728e:	4816      	ldr	r0, [pc, #88]	; (172e8 <nrfx_ipc_config_load+0x6c>)
   17290:	f003 fea2 	bl	1afd8 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17294:	4b16      	ldr	r3, [pc, #88]	; (172f0 <nrfx_ipc_config_load+0x74>)
   17296:	791b      	ldrb	r3, [r3, #4]
   17298:	2b01      	cmp	r3, #1
   1729a:	d008      	beq.n	172ae <nrfx_ipc_config_load+0x32>
   1729c:	4912      	ldr	r1, [pc, #72]	; (172e8 <nrfx_ipc_config_load+0x6c>)
   1729e:	4813      	ldr	r0, [pc, #76]	; (172ec <nrfx_ipc_config_load+0x70>)
   172a0:	2245      	movs	r2, #69	; 0x45
   172a2:	f003 fbf3 	bl	1aa8c <printk>
   172a6:	2145      	movs	r1, #69	; 0x45
   172a8:	480f      	ldr	r0, [pc, #60]	; (172e8 <nrfx_ipc_config_load+0x6c>)
   172aa:	f003 fe95 	bl	1afd8 <assert_post_action>
{
   172ae:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   172b0:	4a10      	ldr	r2, [pc, #64]	; (172f4 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   172b2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   172b6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   172ba:	3301      	adds	r3, #1
   172bc:	2b10      	cmp	r3, #16
   172be:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   172c2:	d1f6      	bne.n	172b2 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   172c4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   172c6:	4a0b      	ldr	r2, [pc, #44]	; (172f4 <nrfx_ipc_config_load+0x78>)
   172c8:	f104 0140 	add.w	r1, r4, #64	; 0x40
   172cc:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   172d0:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   172d4:	3301      	adds	r3, #1
   172d6:	2b10      	cmp	r3, #16
   172d8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   172dc:	d1f6      	bne.n	172cc <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   172de:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   172e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   172e6:	bd38      	pop	{r3, r4, r5, pc}
   172e8:	00022659 	.word	0x00022659
   172ec:	0001fb49 	.word	0x0001fb49
   172f0:	2000a248 	.word	0x2000a248
   172f4:	4002a000 	.word	0x4002a000

000172f8 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   172f8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   172fa:	4b0a      	ldr	r3, [pc, #40]	; (17324 <nrfx_ipc_receive_event_enable+0x2c>)
{
   172fc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   172fe:	791b      	ldrb	r3, [r3, #4]
   17300:	2b01      	cmp	r3, #1
   17302:	d008      	beq.n	17316 <nrfx_ipc_receive_event_enable+0x1e>
   17304:	4908      	ldr	r1, [pc, #32]	; (17328 <nrfx_ipc_receive_event_enable+0x30>)
   17306:	4809      	ldr	r0, [pc, #36]	; (1732c <nrfx_ipc_receive_event_enable+0x34>)
   17308:	226a      	movs	r2, #106	; 0x6a
   1730a:	f003 fbbf 	bl	1aa8c <printk>
   1730e:	216a      	movs	r1, #106	; 0x6a
   17310:	4805      	ldr	r0, [pc, #20]	; (17328 <nrfx_ipc_receive_event_enable+0x30>)
   17312:	f003 fe61 	bl	1afd8 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   17316:	2301      	movs	r3, #1
   17318:	fa03 f404 	lsl.w	r4, r3, r4
   1731c:	4b04      	ldr	r3, [pc, #16]	; (17330 <nrfx_ipc_receive_event_enable+0x38>)
   1731e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   17322:	bd10      	pop	{r4, pc}
   17324:	2000a248 	.word	0x2000a248
   17328:	00022659 	.word	0x00022659
   1732c:	0001fb49 	.word	0x0001fb49
   17330:	4002a000 	.word	0x4002a000

00017334 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   17334:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17336:	4b0a      	ldr	r3, [pc, #40]	; (17360 <nrfx_ipc_receive_event_disable+0x2c>)
{
   17338:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1733a:	791b      	ldrb	r3, [r3, #4]
   1733c:	2b01      	cmp	r3, #1
   1733e:	d008      	beq.n	17352 <nrfx_ipc_receive_event_disable+0x1e>
   17340:	4908      	ldr	r1, [pc, #32]	; (17364 <nrfx_ipc_receive_event_disable+0x30>)
   17342:	4809      	ldr	r0, [pc, #36]	; (17368 <nrfx_ipc_receive_event_disable+0x34>)
   17344:	2270      	movs	r2, #112	; 0x70
   17346:	f003 fba1 	bl	1aa8c <printk>
   1734a:	2170      	movs	r1, #112	; 0x70
   1734c:	4805      	ldr	r0, [pc, #20]	; (17364 <nrfx_ipc_receive_event_disable+0x30>)
   1734e:	f003 fe43 	bl	1afd8 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   17352:	2301      	movs	r3, #1
   17354:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   17358:	4b04      	ldr	r3, [pc, #16]	; (1736c <nrfx_ipc_receive_event_disable+0x38>)
   1735a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   1735e:	bd10      	pop	{r4, pc}
   17360:	2000a248 	.word	0x2000a248
   17364:	00022659 	.word	0x00022659
   17368:	0001fb49 	.word	0x0001fb49
   1736c:	4002a000 	.word	0x4002a000

00017370 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   17370:	4b15      	ldr	r3, [pc, #84]	; (173c8 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   17372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17376:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   1737a:	4f14      	ldr	r7, [pc, #80]	; (173cc <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   1737c:	4635      	mov	r5, r6
   1737e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 173d0 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   17382:	b935      	cbnz	r5, 17392 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   17384:	4b13      	ldr	r3, [pc, #76]	; (173d4 <nrfx_ipc_irq_handler+0x64>)
   17386:	4630      	mov	r0, r6
}
   17388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1738c:	681a      	ldr	r2, [r3, #0]
   1738e:	6899      	ldr	r1, [r3, #8]
   17390:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   17392:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   17396:	2301      	movs	r3, #1
  return __builtin_clz(value);
   17398:	fab4 f484 	clz	r4, r4
   1739c:	40a3      	lsls	r3, r4
   1739e:	2c0f      	cmp	r4, #15
   173a0:	ea25 0503 	bic.w	r5, r5, r3
   173a4:	d90a      	bls.n	173bc <nrfx_ipc_irq_handler+0x4c>
   173a6:	4639      	mov	r1, r7
   173a8:	4640      	mov	r0, r8
   173aa:	f240 12e5 	movw	r2, #485	; 0x1e5
   173ae:	f003 fb6d 	bl	1aa8c <printk>
   173b2:	f240 11e5 	movw	r1, #485	; 0x1e5
   173b6:	4638      	mov	r0, r7
   173b8:	f003 fe0e 	bl	1afd8 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173bc:	2200      	movs	r2, #0
   173be:	4b06      	ldr	r3, [pc, #24]	; (173d8 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   173c0:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173c2:	511a      	str	r2, [r3, r4]
}
   173c4:	e7dd      	b.n	17382 <nrfx_ipc_irq_handler+0x12>
   173c6:	bf00      	nop
   173c8:	4002a000 	.word	0x4002a000
   173cc:	00022694 	.word	0x00022694
   173d0:	0001fb49 	.word	0x0001fb49
   173d4:	2000a248 	.word	0x2000a248
   173d8:	4002a100 	.word	0x4002a100

000173dc <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   173dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173e0:	460e      	mov	r6, r1
   173e2:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   173e4:	4d0c      	ldr	r5, [pc, #48]	; (17418 <metal_generic_dev_open+0x3c>)
   173e6:	f855 4f18 	ldr.w	r4, [r5, #24]!
   173ea:	42ac      	cmp	r4, r5
   173ec:	d103      	bne.n	173f6 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   173ee:	f06f 0012 	mvn.w	r0, #18
   173f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   173f6:	4631      	mov	r1, r6
   173f8:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   173fc:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   17400:	f004 fd40 	bl	1be84 <strcmp>
   17404:	b930      	cbnz	r0, 17414 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   17406:	4640      	mov	r0, r8
			*device = dev;
   17408:	f8c7 8000 	str.w	r8, [r7]
}
   1740c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   17410:	f006 ba88 	b.w	1d924 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17414:	6824      	ldr	r4, [r4, #0]
   17416:	e7e8      	b.n	173ea <metal_generic_dev_open+0xe>
   17418:	2000a254 	.word	0x2000a254

0001741c <metal_bus_find>:
{
   1741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17420:	4607      	mov	r7, r0
   17422:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   17424:	4e0b      	ldr	r6, [pc, #44]	; (17454 <metal_bus_find+0x38>)
   17426:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1742a:	42b4      	cmp	r4, r6
   1742c:	d102      	bne.n	17434 <metal_bus_find+0x18>
	return -ENOENT;
   1742e:	f06f 0001 	mvn.w	r0, #1
   17432:	e00a      	b.n	1744a <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   17434:	4639      	mov	r1, r7
   17436:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1743a:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1743e:	f004 fd21 	bl	1be84 <strcmp>
   17442:	b920      	cbnz	r0, 1744e <metal_bus_find+0x32>
   17444:	b11d      	cbz	r5, 1744e <metal_bus_find+0x32>
			*result = bus;
   17446:	f8c5 8000 	str.w	r8, [r5]
}
   1744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1744e:	6824      	ldr	r4, [r4, #0]
   17450:	e7eb      	b.n	1742a <metal_bus_find+0xe>
   17452:	bf00      	nop
   17454:	2000a254 	.word	0x2000a254

00017458 <metal_bus_register>:
{
   17458:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1745a:	4604      	mov	r4, r0
   1745c:	b910      	cbnz	r0, 17464 <metal_bus_register+0xc>
		return -EINVAL;
   1745e:	f06f 0015 	mvn.w	r0, #21
}
   17462:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   17464:	6800      	ldr	r0, [r0, #0]
   17466:	2800      	cmp	r0, #0
   17468:	d0f9      	beq.n	1745e <metal_bus_register+0x6>
   1746a:	f004 fcfb 	bl	1be64 <strlen>
   1746e:	2800      	cmp	r0, #0
   17470:	d0f5      	beq.n	1745e <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   17472:	2100      	movs	r1, #0
   17474:	6820      	ldr	r0, [r4, #0]
   17476:	f7ff ffd1 	bl	1741c <metal_bus_find>
   1747a:	b1c0      	cbz	r0, 174ae <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   1747c:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   17480:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   17484:	4b0c      	ldr	r3, [pc, #48]	; (174b8 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   17486:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1748a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1748c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   17490:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   17492:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   17494:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   17496:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   17498:	781a      	ldrb	r2, [r3, #0]
   1749a:	2a06      	cmp	r2, #6
   1749c:	d905      	bls.n	174aa <metal_bus_register+0x52>
   1749e:	685b      	ldr	r3, [r3, #4]
   174a0:	b143      	cbz	r3, 174b4 <metal_bus_register+0x5c>
   174a2:	2007      	movs	r0, #7
   174a4:	6822      	ldr	r2, [r4, #0]
   174a6:	4905      	ldr	r1, [pc, #20]	; (174bc <metal_bus_register+0x64>)
   174a8:	4798      	blx	r3
	return 0;
   174aa:	2000      	movs	r0, #0
   174ac:	e7d9      	b.n	17462 <metal_bus_register+0xa>
		return -EEXIST;
   174ae:	f06f 0010 	mvn.w	r0, #16
   174b2:	e7d6      	b.n	17462 <metal_bus_register+0xa>
	return 0;
   174b4:	4618      	mov	r0, r3
   174b6:	e7d4      	b.n	17462 <metal_bus_register+0xa>
   174b8:	2000a254 	.word	0x2000a254
   174bc:	000226c6 	.word	0x000226c6

000174c0 <metal_register_generic_device>:
{
   174c0:	b510      	push	{r4, lr}
   174c2:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   174c4:	6800      	ldr	r0, [r0, #0]
   174c6:	b910      	cbnz	r0, 174ce <metal_register_generic_device+0xe>
		return -EINVAL;
   174c8:	f06f 0015 	mvn.w	r0, #21
}
   174cc:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   174ce:	f004 fcc9 	bl	1be64 <strlen>
   174d2:	2800      	cmp	r0, #0
   174d4:	d0f8      	beq.n	174c8 <metal_register_generic_device+0x8>
   174d6:	68a3      	ldr	r3, [r4, #8]
   174d8:	2b01      	cmp	r3, #1
   174da:	d8f5      	bhi.n	174c8 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   174dc:	4b06      	ldr	r3, [pc, #24]	; (174f8 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   174de:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   174e2:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   174e4:	4b05      	ldr	r3, [pc, #20]	; (174fc <metal_register_generic_device+0x3c>)
   174e6:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   174e8:	f103 0018 	add.w	r0, r3, #24
   174ec:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   174ee:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   174f0:	61d9      	str	r1, [r3, #28]
	return 0;
   174f2:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   174f4:	6011      	str	r1, [r2, #0]
}
   174f6:	e7e9      	b.n	174cc <metal_register_generic_device+0xc>
   174f8:	200083f8 	.word	0x200083f8
   174fc:	2000a254 	.word	0x2000a254

00017500 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   17500:	b538      	push	{r3, r4, r5, lr}
   17502:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   17504:	4c0d      	ldr	r4, [pc, #52]	; (1753c <metal_init+0x3c>)
   17506:	2220      	movs	r2, #32
   17508:	4620      	mov	r0, r4
   1750a:	2100      	movs	r1, #0
   1750c:	f004 fd13 	bl	1bf36 <memset>

	_metal.common.log_handler   = params->log_handler;
   17510:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   17512:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   17514:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   17516:	4623      	mov	r3, r4
   17518:	792a      	ldrb	r2, [r5, #4]
   1751a:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   1751e:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   17522:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   17526:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   1752a:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   1752e:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   17532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   17536:	f000 b803 	b.w	17540 <metal_sys_init>
   1753a:	bf00      	nop
   1753c:	2000a254 	.word	0x2000a254

00017540 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17540:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17542:	4802      	ldr	r0, [pc, #8]	; (1754c <metal_sys_init+0xc>)
   17544:	f7ff ff88 	bl	17458 <metal_bus_register>
	return 0;
}
   17548:	2000      	movs	r0, #0
   1754a:	bd08      	pop	{r3, pc}
   1754c:	200083f8 	.word	0x200083f8

00017550 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   17550:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   17552:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   17554:	2b06      	cmp	r3, #6
{
   17556:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   17558:	bf88      	it	hi
   1755a:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1755c:	4b09      	ldr	r3, [pc, #36]	; (17584 <metal_zephyr_log_handler+0x34>)
{
   1755e:	ac05      	add	r4, sp, #20
   17560:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   17564:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17568:	4807      	ldr	r0, [pc, #28]	; (17588 <metal_zephyr_log_handler+0x38>)
   1756a:	f003 fa8f 	bl	1aa8c <printk>

	va_start(args, format);
	vprintk(format, args);
   1756e:	4621      	mov	r1, r4
   17570:	4628      	mov	r0, r5
	va_start(args, format);
   17572:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   17574:	f7f3 fa68 	bl	aa48 <vprintk>
	va_end(args);
}
   17578:	b002      	add	sp, #8
   1757a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1757e:	b003      	add	sp, #12
   17580:	4770      	bx	lr
   17582:	bf00      	nop
   17584:	0001f018 	.word	0x0001f018
   17588:	00020e02 	.word	0x00020e02

0001758c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17590:	b087      	sub	sp, #28
   17592:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   17594:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   17596:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   17598:	4293      	cmp	r3, r2
{
   1759a:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   1759c:	d349      	bcc.n	17632 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1759e:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   175a0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   175a4:	42b4      	cmp	r4, r6
   175a6:	d103      	bne.n	175b0 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   175a8:	2000      	movs	r0, #0
}
   175aa:	b007      	add	sp, #28
   175ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   175b0:	fb0b f704 	mul.w	r7, fp, r4
   175b4:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   175b8:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   175ba:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   175be:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   175c2:	bb02      	cbnz	r2, 17606 <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   175c4:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   175c8:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   175cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   175d0:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   175d2:	f8dc c008 	ldr.w	ip, [ip, #8]
   175d6:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   175d8:	f10c 33ff 	add.w	r3, ip, #4294967295
   175dc:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   175e0:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   175e4:	f1cc 0c00 	rsb	ip, ip, #0
   175e8:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   175ec:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   175f0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   175f4:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   175f8:	4561      	cmp	r1, ip
   175fa:	bf28      	it	cs
   175fc:	f04f 31ff 	movcs.w	r1, #4294967295
   17600:	3306      	adds	r3, #6
   17602:	f006 f956 	bl	1d8b2 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   17606:	f858 3007 	ldr.w	r3, [r8, r7]
   1760a:	9a05      	ldr	r2, [sp, #20]
   1760c:	9302      	str	r3, [sp, #8]
   1760e:	6a2b      	ldr	r3, [r5, #32]
   17610:	4628      	mov	r0, r5
   17612:	6a1b      	ldr	r3, [r3, #32]
   17614:	b2a1      	uxth	r1, r4
   17616:	9301      	str	r3, [sp, #4]
   17618:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1761a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1761e:	9300      	str	r3, [sp, #0]
   17620:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   17624:	464b      	mov	r3, r9
   17626:	f006 f99a 	bl	1d95e <virtqueue_create>
		if (ret)
   1762a:	2800      	cmp	r0, #0
   1762c:	d1bd      	bne.n	175aa <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1762e:	3401      	adds	r4, #1
   17630:	e7b8      	b.n	175a4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   17632:	4801      	ldr	r0, [pc, #4]	; (17638 <virtio_create_virtqueues+0xac>)
   17634:	e7b9      	b.n	175aa <virtio_create_virtqueues+0x1e>
   17636:	bf00      	nop
   17638:	fffff440 	.word	0xfffff440

0001763c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1763c:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   1763e:	8944      	ldrh	r4, [r0, #10]
   17640:	428c      	cmp	r4, r1
   17642:	d312      	bcc.n	1766a <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   17644:	6a03      	ldr	r3, [r0, #32]
   17646:	3c01      	subs	r4, #1
   17648:	885d      	ldrh	r5, [r3, #2]
   1764a:	402c      	ands	r4, r5
   1764c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   17650:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   17652:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   17654:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   17658:	6a02      	ldr	r2, [r0, #32]
   1765a:	8853      	ldrh	r3, [r2, #2]
   1765c:	3301      	adds	r3, #1
   1765e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   17660:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   17662:	3301      	adds	r3, #1
   17664:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   17666:	2000      	movs	r0, #0
}
   17668:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1766a:	4801      	ldr	r0, [pc, #4]	; (17670 <virtqueue_add_consumed_buffer+0x34>)
   1766c:	e7fc      	b.n	17668 <virtqueue_add_consumed_buffer+0x2c>
   1766e:	bf00      	nop
   17670:	fffff441 	.word	0xfffff441

00017674 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   17674:	b4f0      	push	{r4, r5, r6, r7}
   17676:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   17678:	b148      	cbz	r0, 1768e <rpmsg_send_offchannel_raw+0x1a>
   1767a:	6a00      	ldr	r0, [r0, #32]
   1767c:	b138      	cbz	r0, 1768e <rpmsg_send_offchannel_raw+0x1a>
   1767e:	b133      	cbz	r3, 1768e <rpmsg_send_offchannel_raw+0x1a>
   17680:	3401      	adds	r4, #1
   17682:	d004      	beq.n	1768e <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   17684:	6f44      	ldr	r4, [r0, #116]	; 0x74
   17686:	b114      	cbz	r4, 1768e <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17688:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1768a:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1768c:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1768e:	4801      	ldr	r0, [pc, #4]	; (17694 <rpmsg_send_offchannel_raw+0x20>)
}
   17690:	bcf0      	pop	{r4, r5, r6, r7}
   17692:	4770      	bx	lr
   17694:	fffff82d 	.word	0xfffff82d

00017698 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   17698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1769c:	460e      	mov	r6, r1
   1769e:	4690      	mov	r8, r2
   176a0:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   176a2:	4605      	mov	r5, r0
   176a4:	2800      	cmp	r0, #0
   176a6:	d06a      	beq.n	1777e <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   176a8:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   176ac:	4638      	mov	r0, r7
   176ae:	f006 fae8 	bl	1dc82 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   176b2:	1c63      	adds	r3, r4, #1
   176b4:	d11a      	bne.n	176ec <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   176b6:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   176b8:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   176bc:	095a      	lsrs	r2, r3, #5
   176be:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   176c2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   176c6:	f003 011f 	and.w	r1, r3, #31
   176ca:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   176ce:	07e4      	lsls	r4, r4, #31
   176d0:	d407      	bmi.n	176e2 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   176d2:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   176d6:	2301      	movs	r3, #1
   176d8:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   176da:	4313      	orrs	r3, r2
   176dc:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   176e0:	e01d      	b.n	1771e <rpmsg_create_ept+0x86>
	     bit++)
   176e2:	3301      	adds	r3, #1
	for (bit = start;
   176e4:	2b80      	cmp	r3, #128	; 0x80
   176e6:	d1e9      	bne.n	176bc <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   176e8:	4c27      	ldr	r4, [pc, #156]	; (17788 <rpmsg_create_ept+0xf0>)
   176ea:	e044      	b.n	17776 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   176ec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   176f0:	d315      	bcc.n	1771e <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   176f2:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   176f6:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   176f8:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   176fc:	d83a      	bhi.n	17774 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   176fe:	0958      	lsrs	r0, r3, #5
   17700:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   17704:	f003 031f 	and.w	r3, r3, #31
   17708:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   1770c:	07d2      	lsls	r2, r2, #31
   1770e:	d4eb      	bmi.n	176e8 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   17710:	2201      	movs	r2, #1
   17712:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   17716:	ea43 030c 	orr.w	r3, r3, ip
   1771a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1771e:	491b      	ldr	r1, [pc, #108]	; (1778c <rpmsg_create_ept+0xf4>)
   17720:	2220      	movs	r2, #32
   17722:	f1b8 0f00 	cmp.w	r8, #0
   17726:	bf18      	it	ne
   17728:	4641      	movne	r1, r8
   1772a:	4628      	mov	r0, r5
   1772c:	f004 fb88 	bl	1be40 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   17730:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   17732:	4629      	mov	r1, r5
   17734:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   17736:	9b07      	ldr	r3, [sp, #28]
   17738:	4630      	mov	r0, r6
   1773a:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1773c:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   1773e:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   17740:	632b      	str	r3, [r5, #48]	; 0x30
   17742:	f006 fb18 	bl	1dd76 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   17746:	4638      	mov	r0, r7
   17748:	f001 ffc8 	bl	196dc <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1774c:	782c      	ldrb	r4, [r5, #0]
   1774e:	b174      	cbz	r4, 1776e <rpmsg_create_ept+0xd6>
   17750:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   17754:	b15c      	cbz	r4, 1776e <rpmsg_create_ept+0xd6>
   17756:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17758:	3301      	adds	r3, #1
   1775a:	d112      	bne.n	17782 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1775c:	2100      	movs	r1, #0
   1775e:	4628      	mov	r0, r5
   17760:	f006 fac0 	bl	1dce4 <rpmsg_send_ns_message>

	if (status)
   17764:	4604      	mov	r4, r0
   17766:	b110      	cbz	r0, 1776e <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   17768:	4628      	mov	r0, r5
   1776a:	f006 fa90 	bl	1dc8e <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1776e:	4620      	mov	r0, r4
   17770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17774:	4c06      	ldr	r4, [pc, #24]	; (17790 <rpmsg_create_ept+0xf8>)
   17776:	4638      	mov	r0, r7
   17778:	f001 ffb0 	bl	196dc <z_impl_k_sem_give>
}
   1777c:	e7f7      	b.n	1776e <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   1777e:	4c04      	ldr	r4, [pc, #16]	; (17790 <rpmsg_create_ept+0xf8>)
   17780:	e7f5      	b.n	1776e <rpmsg_create_ept+0xd6>
   17782:	2400      	movs	r4, #0
   17784:	e7f3      	b.n	1776e <rpmsg_create_ept+0xd6>
   17786:	bf00      	nop
   17788:	fffff829 	.word	0xfffff829
   1778c:	000227e8 	.word	0x000227e8
   17790:	fffff82d 	.word	0xfffff82d

00017794 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   17794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17798:	4605      	mov	r5, r0
   1779a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   1779c:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1779e:	6a03      	ldr	r3, [r0, #32]
   177a0:	b08d      	sub	sp, #52	; 0x34
   177a2:	681b      	ldr	r3, [r3, #0]
   177a4:	4692      	mov	sl, r2
   177a6:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   177aa:	9103      	str	r1, [sp, #12]
   177ac:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   177ae:	0743      	lsls	r3, r0, #29
   177b0:	d57b      	bpl.n	178aa <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   177b2:	f643 2398 	movw	r3, #15000	; 0x3a98
   177b6:	2f00      	cmp	r7, #0
   177b8:	bf18      	it	ne
   177ba:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   177bc:	f105 0858 	add.w	r8, r5, #88	; 0x58
   177c0:	4640      	mov	r0, r8
   177c2:	f006 fafc 	bl	1ddbe <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   177c6:	4628      	mov	r0, r5
   177c8:	f006 fbbe 	bl	1df48 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   177cc:	4681      	mov	r9, r0
   177ce:	b130      	cbz	r0, 177de <rpmsg_virtio_send_offchannel_raw+0x4a>
   177d0:	42b0      	cmp	r0, r6
   177d2:	da04      	bge.n	177de <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   177d4:	4640      	mov	r0, r8
   177d6:	f006 faf0 	bl	1ddba <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   177da:	4e42      	ldr	r6, [pc, #264]	; (178e4 <rpmsg_virtio_send_offchannel_raw+0x150>)
   177dc:	e061      	b.n	178a2 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   177de:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   177e0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   177e2:	b9f3      	cbnz	r3, 17822 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   177e4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   177e8:	f10d 0212 	add.w	r2, sp, #18
   177ec:	a905      	add	r1, sp, #20
   177ee:	f006 f946 	bl	1da7e <virtqueue_get_buffer>
		if (!data) {
   177f2:	4604      	mov	r4, r0
   177f4:	b948      	cbnz	r0, 1780a <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   177f6:	f44f 7100 	mov.w	r1, #512	; 0x200
   177fa:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   177fe:	f006 fbb6 	bl	1df6e <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   17802:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   17806:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   17808:	9305      	str	r3, [sp, #20]
   1780a:	4640      	mov	r0, r8
   1780c:	f006 fad5 	bl	1ddba <k_sem_give>
		if (buffer || !tick_count)
   17810:	2c00      	cmp	r4, #0
   17812:	d14e      	bne.n	178b2 <rpmsg_virtio_send_offchannel_raw+0x11e>
   17814:	2f00      	cmp	r7, #0
   17816:	d04a      	beq.n	178ae <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   17818:	f1b9 0f00 	cmp.w	r9, #0
   1781c:	d1dd      	bne.n	177da <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   1781e:	3f01      	subs	r7, #1
	while (1) {
   17820:	e7ce      	b.n	177c0 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   17822:	2b01      	cmp	r3, #1
   17824:	d108      	bne.n	17838 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   17826:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1782a:	aa05      	add	r2, sp, #20
   1782c:	f10d 0112 	add.w	r1, sp, #18
   17830:	f006 f95f 	bl	1daf2 <virtqueue_get_available_buffer>
   17834:	4604      	mov	r4, r0
   17836:	e7e8      	b.n	1780a <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   17838:	2400      	movs	r4, #0
   1783a:	e7e6      	b.n	1780a <rpmsg_virtio_send_offchannel_raw+0x76>
   1783c:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1783e:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   17840:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17844:	1ac9      	subs	r1, r1, r3
   17846:	4281      	cmp	r1, r0
   17848:	bf28      	it	cs
   1784a:	f04f 31ff 	movcs.w	r1, #4294967295
   1784e:	4633      	mov	r3, r6
   17850:	465a      	mov	r2, fp
   17852:	4638      	mov	r0, r7
   17854:	f005 fff2 	bl	1d83c <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   17858:	4286      	cmp	r6, r0
   1785a:	d000      	beq.n	1785e <rpmsg_virtio_send_offchannel_raw+0xca>
   1785c:	e7fe      	b.n	1785c <rpmsg_virtio_send_offchannel_raw+0xc8>
   1785e:	4640      	mov	r0, r8
   17860:	f006 faad 	bl	1ddbe <__metal_mutex_acquire>
   17864:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   17866:	9a05      	ldr	r2, [sp, #20]
   17868:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1786a:	b953      	cbnz	r3, 17882 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   1786c:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   17870:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17874:	2201      	movs	r2, #1
   17876:	9400      	str	r4, [sp, #0]
   17878:	a906      	add	r1, sp, #24
   1787a:	f006 f8a0 	bl	1d9be <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1787e:	b148      	cbz	r0, 17894 <rpmsg_virtio_send_offchannel_raw+0x100>
   17880:	e7fe      	b.n	17880 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   17882:	2b01      	cmp	r3, #1
   17884:	d106      	bne.n	17894 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   17886:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1788a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1788e:	f7ff fed5 	bl	1763c <virtqueue_add_consumed_buffer>
   17892:	e7f4      	b.n	1787e <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   17894:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17898:	f006 f9a5 	bl	1dbe6 <virtqueue_kick>
   1789c:	4640      	mov	r0, r8
   1789e:	f006 fa8c 	bl	1ddba <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   178a2:	4630      	mov	r0, r6
   178a4:	b00d      	add	sp, #52	; 0x34
   178a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   178aa:	4e0f      	ldr	r6, [pc, #60]	; (178e8 <rpmsg_virtio_send_offchannel_raw+0x154>)
   178ac:	e7f9      	b.n	178a2 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   178ae:	4e0f      	ldr	r6, [pc, #60]	; (178ec <rpmsg_virtio_send_offchannel_raw+0x158>)
   178b0:	e7f7      	b.n	178a2 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   178b2:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   178b4:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   178b8:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   178ba:	2300      	movs	r3, #0
   178bc:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   178be:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   178c0:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   178c2:	4281      	cmp	r1, r0
   178c4:	bf28      	it	cs
   178c6:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   178ca:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   178cc:	4638      	mov	r0, r7
   178ce:	2310      	movs	r3, #16
   178d0:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   178d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   178d6:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   178da:	f005 ffaf 	bl	1d83c <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   178de:	2810      	cmp	r0, #16
   178e0:	d0ac      	beq.n	1783c <rpmsg_virtio_send_offchannel_raw+0xa8>
   178e2:	e7fe      	b.n	178e2 <rpmsg_virtio_send_offchannel_raw+0x14e>
   178e4:	fffff82b 	.word	0xfffff82b
   178e8:	fffff82c 	.word	0xfffff82c
   178ec:	fffff82e 	.word	0xfffff82e

000178f0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   178f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   178f4:	460d      	mov	r5, r1
   178f6:	b088      	sub	sp, #32
   178f8:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   178fa:	2100      	movs	r1, #0
   178fc:	227c      	movs	r2, #124	; 0x7c
{
   178fe:	4604      	mov	r4, r0
   17900:	461e      	mov	r6, r3
   17902:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   17906:	f004 fb16 	bl	1bf36 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1790a:	2201      	movs	r2, #1
   1790c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17910:	4611      	mov	r1, r2
   17912:	f006 fbc9 	bl	1e0a8 <z_impl_k_sem_init>
   17916:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1791a:	4b5d      	ldr	r3, [pc, #372]	; (17a90 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   1791c:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   17920:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   17922:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   17924:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   17926:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   17928:	d020      	beq.n	1796c <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1792a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1792c:	6a03      	ldr	r3, [r0, #32]
   1792e:	689b      	ldr	r3, [r3, #8]
   17930:	4798      	blx	r3
   17932:	2300      	movs	r3, #0
   17934:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   17936:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1793a:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1793c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17940:	f1b8 0f00 	cmp.w	r8, #0
   17944:	d01e      	beq.n	17984 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   17946:	f1b8 0f01 	cmp.w	r8, #1
   1794a:	d133      	bne.n	179b4 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   1794c:	4b51      	ldr	r3, [pc, #324]	; (17a94 <rpmsg_init_vdev+0x1a4>)
   1794e:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   17950:	4b51      	ldr	r3, [pc, #324]	; (17a98 <rpmsg_init_vdev+0x1a8>)
   17952:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   17954:	4b51      	ldr	r3, [pc, #324]	; (17a9c <rpmsg_init_vdev+0x1ac>)
   17956:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   17958:	4b51      	ldr	r3, [pc, #324]	; (17aa0 <rpmsg_init_vdev+0x1b0>)
   1795a:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1795c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1795e:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   17960:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   17962:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17966:	e023      	b.n	179b0 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   17968:	0743      	lsls	r3, r0, #29
   1796a:	d4de      	bmi.n	1792a <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   1796c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1796e:	6a03      	ldr	r3, [r0, #32]
   17970:	681b      	ldr	r3, [r3, #0]
   17972:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   17974:	0642      	lsls	r2, r0, #25
   17976:	d5f7      	bpl.n	17968 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   17978:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1797a:	2100      	movs	r1, #0
   1797c:	6a03      	ldr	r3, [r0, #32]
   1797e:	685b      	ldr	r3, [r3, #4]
   17980:	4798      	blx	r3
}
   17982:	e7f3      	b.n	1796c <rpmsg_init_vdev+0x7c>
		if (!shpool)
   17984:	f1b9 0f00 	cmp.w	r9, #0
   17988:	d07d      	beq.n	17a86 <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   1798a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1798e:	2b00      	cmp	r3, #0
   17990:	d07b      	beq.n	17a8a <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   17992:	4b41      	ldr	r3, [pc, #260]	; (17a98 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   17994:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   17998:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   1799a:	4b3e      	ldr	r3, [pc, #248]	; (17a94 <rpmsg_init_vdev+0x1a4>)
   1799c:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   1799e:	4b40      	ldr	r3, [pc, #256]	; (17aa0 <rpmsg_init_vdev+0x1b0>)
   179a0:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   179a2:	4b3e      	ldr	r3, [pc, #248]	; (17a9c <rpmsg_init_vdev+0x1ac>)
   179a4:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   179a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   179a8:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   179aa:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   179ac:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   179b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   179b4:	ab04      	add	r3, sp, #16
   179b6:	9300      	str	r3, [sp, #0]
   179b8:	2202      	movs	r2, #2
   179ba:	2100      	movs	r1, #0
   179bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   179be:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   179c2:	ab02      	add	r3, sp, #8
   179c4:	f7ff fde2 	bl	1758c <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   179c8:	4607      	mov	r7, r0
   179ca:	2800      	cmp	r0, #0
   179cc:	d157      	bne.n	17a7e <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   179ce:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   179d2:	f006 f8e2 	bl	1db9a <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   179d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   179d8:	681a      	ldr	r2, [r3, #0]
   179da:	699b      	ldr	r3, [r3, #24]
   179dc:	6296      	str	r6, [r2, #40]	; 0x28
   179de:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   179e0:	f1b8 0f00 	cmp.w	r8, #0
   179e4:	d108      	bne.n	179f8 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   179e6:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   179ea:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   179ec:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   179ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   179f2:	895b      	ldrh	r3, [r3, #10]
   179f4:	4553      	cmp	r3, sl
   179f6:	d81f      	bhi.n	17a38 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   179f8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   179fc:	e9c4 4400 	strd	r4, r4, [r4]
   17a00:	b18b      	cbz	r3, 17a26 <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   17a02:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   17a06:	4927      	ldr	r1, [pc, #156]	; (17aa4 <rpmsg_init_vdev+0x1b4>)
   17a08:	2220      	movs	r2, #32
   17a0a:	4628      	mov	r0, r5
   17a0c:	f004 fa18 	bl	1be40 <strncpy>
	ept->addr = src;
   17a10:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   17a12:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   17a16:	4b24      	ldr	r3, [pc, #144]	; (17aa8 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   17a18:	4629      	mov	r1, r5
   17a1a:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   17a1c:	2300      	movs	r3, #0
   17a1e:	4620      	mov	r0, r4
   17a20:	63a3      	str	r3, [r4, #56]	; 0x38
   17a22:	f006 f9a8 	bl	1dd76 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   17a26:	f1b8 0f00 	cmp.w	r8, #0
   17a2a:	d128      	bne.n	17a7e <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   17a2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   17a2e:	2104      	movs	r1, #4
   17a30:	6a03      	ldr	r3, [r0, #32]
   17a32:	685b      	ldr	r3, [r3, #4]
   17a34:	4798      	blx	r3
}
   17a36:	e022      	b.n	17a7e <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   17a38:	f44f 7100 	mov.w	r1, #512	; 0x200
   17a3c:	4648      	mov	r0, r9
   17a3e:	f006 fa96 	bl	1df6e <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   17a42:	4605      	mov	r5, r0
   17a44:	b1c8      	cbz	r0, 17a7a <rpmsg_init_vdev+0x18a>
   17a46:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   17a48:	9006      	str	r0, [sp, #24]
   17a4a:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17a4c:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   17a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   17a52:	4281      	cmp	r1, r0
   17a54:	bf28      	it	cs
   17a56:	f04f 31ff 	movcs.w	r1, #4294967295
   17a5a:	2200      	movs	r2, #0
   17a5c:	4630      	mov	r0, r6
   17a5e:	f005 ff28 	bl	1d8b2 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   17a62:	2301      	movs	r3, #1
   17a64:	2200      	movs	r2, #0
   17a66:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   17a6a:	9500      	str	r5, [sp, #0]
   17a6c:	a906      	add	r1, sp, #24
   17a6e:	f005 ffa6 	bl	1d9be <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   17a72:	b918      	cbnz	r0, 17a7c <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17a74:	f10a 0a01 	add.w	sl, sl, #1
   17a78:	e7b9      	b.n	179ee <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   17a7a:	480c      	ldr	r0, [pc, #48]	; (17aac <rpmsg_init_vdev+0x1bc>)
   17a7c:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   17a7e:	4638      	mov	r0, r7
   17a80:	b008      	add	sp, #32
   17a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   17a86:	4f0a      	ldr	r7, [pc, #40]	; (17ab0 <rpmsg_init_vdev+0x1c0>)
   17a88:	e7f9      	b.n	17a7e <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   17a8a:	4f08      	ldr	r7, [pc, #32]	; (17aac <rpmsg_init_vdev+0x1bc>)
   17a8c:	e7f7      	b.n	17a7e <rpmsg_init_vdev+0x18e>
   17a8e:	bf00      	nop
   17a90:	00017795 	.word	0x00017795
   17a94:	00022777 	.word	0x00022777
   17a98:	00022771 	.word	0x00022771
   17a9c:	0001ddb9 	.word	0x0001ddb9
   17aa0:	0001de89 	.word	0x0001de89
   17aa4:	0002277d 	.word	0x0002277d
   17aa8:	0001ddcb 	.word	0x0001ddcb
   17aac:	fffff82e 	.word	0xfffff82e
   17ab0:	fffff82d 	.word	0xfffff82d

00017ab4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   17ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17ab6:	4b10      	ldr	r3, [pc, #64]	; (17af8 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   17ab8:	4f10      	ldr	r7, [pc, #64]	; (17afc <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17aba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17abe:	3001      	adds	r0, #1
   17ac0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17ac4:	42ae      	cmp	r6, r5
   17ac6:	d800      	bhi.n	17aca <z_sys_init_run_level+0x16>
		}
	}
}
   17ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   17aca:	e9d5 3400 	ldrd	r3, r4, [r5]
   17ace:	4620      	mov	r0, r4
   17ad0:	4798      	blx	r3
   17ad2:	b170      	cbz	r0, 17af2 <z_sys_init_run_level+0x3e>
   17ad4:	b16c      	cbz	r4, 17af2 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   17ad6:	2301      	movs	r3, #1
				(dev - __device_start));
   17ad8:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17ada:	4a09      	ldr	r2, [pc, #36]	; (17b00 <z_sys_init_run_level+0x4c>)
   17adc:	1124      	asrs	r4, r4, #4
   17ade:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17ae0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17ae4:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   17ae8:	fa03 f404 	lsl.w	r4, r3, r4
   17aec:	4304      	orrs	r4, r0
   17aee:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17af2:	3508      	adds	r5, #8
   17af4:	e7e6      	b.n	17ac4 <z_sys_init_run_level+0x10>
   17af6:	bf00      	nop
   17af8:	0001f038 	.word	0x0001f038
   17afc:	20008448 	.word	0x20008448
   17b00:	200084b8 	.word	0x200084b8

00017b04 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   17b04:	4b08      	ldr	r3, [pc, #32]	; (17b28 <z_device_ready+0x24>)
   17b06:	1ac0      	subs	r0, r0, r3
   17b08:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17b0a:	4b08      	ldr	r3, [pc, #32]	; (17b2c <z_device_ready+0x28>)
   17b0c:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17b0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   17b12:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17b14:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   17b18:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   17b1c:	4210      	tst	r0, r2
}
   17b1e:	bf0c      	ite	eq
   17b20:	4618      	moveq	r0, r3
   17b22:	2000      	movne	r0, #0
   17b24:	4770      	bx	lr
   17b26:	bf00      	nop
   17b28:	20008448 	.word	0x20008448
   17b2c:	200084b8 	.word	0x200084b8

00017b30 <z_impl_device_get_binding>:
{
   17b30:	b570      	push	{r4, r5, r6, lr}
   17b32:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   17b34:	4c0f      	ldr	r4, [pc, #60]	; (17b74 <z_impl_device_get_binding+0x44>)
   17b36:	4e10      	ldr	r6, [pc, #64]	; (17b78 <z_impl_device_get_binding+0x48>)
   17b38:	42b4      	cmp	r4, r6
   17b3a:	d104      	bne.n	17b46 <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   17b3c:	4c0d      	ldr	r4, [pc, #52]	; (17b74 <z_impl_device_get_binding+0x44>)
   17b3e:	42b4      	cmp	r4, r6
   17b40:	d10a      	bne.n	17b58 <z_impl_device_get_binding+0x28>
	return NULL;
   17b42:	2400      	movs	r4, #0
   17b44:	e014      	b.n	17b70 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   17b46:	4620      	mov	r0, r4
   17b48:	f7ff ffdc 	bl	17b04 <z_device_ready>
   17b4c:	b110      	cbz	r0, 17b54 <z_impl_device_get_binding+0x24>
   17b4e:	6823      	ldr	r3, [r4, #0]
   17b50:	42ab      	cmp	r3, r5
   17b52:	d00d      	beq.n	17b70 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   17b54:	3410      	adds	r4, #16
   17b56:	e7ef      	b.n	17b38 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17b58:	4620      	mov	r0, r4
   17b5a:	f7ff ffd3 	bl	17b04 <z_device_ready>
   17b5e:	b908      	cbnz	r0, 17b64 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   17b60:	3410      	adds	r4, #16
   17b62:	e7ec      	b.n	17b3e <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17b64:	4628      	mov	r0, r5
   17b66:	6821      	ldr	r1, [r4, #0]
   17b68:	f004 f98c 	bl	1be84 <strcmp>
   17b6c:	2800      	cmp	r0, #0
   17b6e:	d1f7      	bne.n	17b60 <z_impl_device_get_binding+0x30>
}
   17b70:	4620      	mov	r0, r4
   17b72:	bd70      	pop	{r4, r5, r6, pc}
   17b74:	20008448 	.word	0x20008448
   17b78:	200084b8 	.word	0x200084b8

00017b7c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   17b7c:	4b01      	ldr	r3, [pc, #4]	; (17b84 <z_impl_z_errno+0x8>)
   17b7e:	6898      	ldr	r0, [r3, #8]
}
   17b80:	3070      	adds	r0, #112	; 0x70
   17b82:	4770      	bx	lr
   17b84:	2000a27c 	.word	0x2000a27c

00017b88 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17b8a:	4604      	mov	r4, r0
   17b8c:	460e      	mov	r6, r1
	__asm__ volatile(
   17b8e:	f04f 0320 	mov.w	r3, #32
   17b92:	f3ef 8711 	mrs	r7, BASEPRI
   17b96:	f383 8811 	msr	BASEPRI, r3
   17b9a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   17b9e:	f001 fd97 	bl	196d0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17ba2:	2200      	movs	r2, #0
   17ba4:	2c04      	cmp	r4, #4
   17ba6:	bf98      	it	ls
   17ba8:	4b1d      	ldrls	r3, [pc, #116]	; (17c20 <z_fatal_error+0x98>)
   17baa:	4605      	mov	r5, r0
	switch (reason) {
   17bac:	bf94      	ite	ls
   17bae:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17bb2:	4b1c      	ldrhi	r3, [pc, #112]	; (17c24 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17bb4:	9200      	str	r2, [sp, #0]
   17bb6:	2145      	movs	r1, #69	; 0x45
   17bb8:	4622      	mov	r2, r4
   17bba:	481b      	ldr	r0, [pc, #108]	; (17c28 <z_fatal_error+0xa0>)
   17bbc:	f002 ff66 	bl	1aa8c <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   17bc0:	b13e      	cbz	r6, 17bd2 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   17bc2:	69f3      	ldr	r3, [r6, #28]
   17bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   17bc8:	b11b      	cbz	r3, 17bd2 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   17bca:	2145      	movs	r1, #69	; 0x45
   17bcc:	4817      	ldr	r0, [pc, #92]	; (17c2c <z_fatal_error+0xa4>)
   17bce:	f002 ff5d 	bl	1aa8c <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   17bd2:	b135      	cbz	r5, 17be2 <z_fatal_error+0x5a>
   17bd4:	4628      	mov	r0, r5
   17bd6:	f006 fa84 	bl	1e0e2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   17bda:	4603      	mov	r3, r0
   17bdc:	b108      	cbz	r0, 17be2 <z_fatal_error+0x5a>
   17bde:	7802      	ldrb	r2, [r0, #0]
   17be0:	b902      	cbnz	r2, 17be4 <z_fatal_error+0x5c>
		thread_name = "unknown";
   17be2:	4b13      	ldr	r3, [pc, #76]	; (17c30 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   17be4:	462a      	mov	r2, r5
   17be6:	2145      	movs	r1, #69	; 0x45
   17be8:	4812      	ldr	r0, [pc, #72]	; (17c34 <z_fatal_error+0xac>)
   17bea:	f002 ff4f 	bl	1aa8c <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   17bee:	4631      	mov	r1, r6
   17bf0:	4620      	mov	r0, r4
   17bf2:	f7ff f8ad 	bl	16d50 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   17bf6:	2c04      	cmp	r4, #4
   17bf8:	d108      	bne.n	17c0c <z_fatal_error+0x84>
   17bfa:	490f      	ldr	r1, [pc, #60]	; (17c38 <z_fatal_error+0xb0>)
   17bfc:	480f      	ldr	r0, [pc, #60]	; (17c3c <z_fatal_error+0xb4>)
   17bfe:	228e      	movs	r2, #142	; 0x8e
   17c00:	f002 ff44 	bl	1aa8c <printk>
   17c04:	218e      	movs	r1, #142	; 0x8e
   17c06:	480c      	ldr	r0, [pc, #48]	; (17c38 <z_fatal_error+0xb0>)
   17c08:	f003 f9e6 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   17c0c:	f387 8811 	msr	BASEPRI, r7
   17c10:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   17c14:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   17c16:	b003      	add	sp, #12
   17c18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17c1c:	f7f6 bb26 	b.w	e26c <z_impl_k_thread_abort>
   17c20:	0001f050 	.word	0x0001f050
   17c24:	00022780 	.word	0x00022780
   17c28:	00022796 	.word	0x00022796
   17c2c:	000227c3 	.word	0x000227c3
   17c30:	0002278e 	.word	0x0002278e
   17c34:	000227e9 	.word	0x000227e9
   17c38:	00022806 	.word	0x00022806
   17c3c:	0001fb49 	.word	0x0001fb49

00017c40 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   17c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c42:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   17c44:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   17c46:	4e15      	ldr	r6, [pc, #84]	; (17c9c <idle+0x5c>)
	__asm__ volatile(
   17c48:	f04f 0220 	mov.w	r2, #32
   17c4c:	f3ef 8311 	mrs	r3, BASEPRI
   17c50:	f382 8811 	msr	BASEPRI, r2
   17c54:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   17c58:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   17c5a:	b188      	cbz	r0, 17c80 <idle+0x40>
			cpu->pending_abort = NULL;
   17c5c:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   17c5e:	f383 8811 	msr	BASEPRI, r3
   17c62:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   17c66:	f001 f93b 	bl	18ee0 <z_thread_single_abort>
	__asm__ volatile(
   17c6a:	f04f 0320 	mov.w	r3, #32
   17c6e:	f3ef 8011 	mrs	r0, BASEPRI
   17c72:	f383 8811 	msr	BASEPRI, r3
   17c76:	f3bf 8f6f 	isb	sy
   17c7a:	f006 f9db 	bl	1e034 <z_reschedule_irqlock>
			continue;
   17c7e:	e7e3      	b.n	17c48 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   17c80:	f002 f998 	bl	19fb4 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17c84:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   17c86:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17c88:	2802      	cmp	r0, #2
   17c8a:	bfd8      	it	le
   17c8c:	4608      	movle	r0, r1
   17c8e:	f002 f9c7 	bl	1a020 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   17c92:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   17c94:	f7f6 f830 	bl	dcf8 <arch_cpu_idle>
}
   17c98:	e7d6      	b.n	17c48 <idle+0x8>
   17c9a:	bf00      	nop
   17c9c:	2000a27c 	.word	0x2000a27c

00017ca0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17ca0:	4802      	ldr	r0, [pc, #8]	; (17cac <z_bss_zero+0xc>)
   17ca2:	4a03      	ldr	r2, [pc, #12]	; (17cb0 <z_bss_zero+0x10>)
   17ca4:	2100      	movs	r1, #0
   17ca6:	1a12      	subs	r2, r2, r0
   17ca8:	f004 b945 	b.w	1bf36 <memset>
   17cac:	200086b8 	.word	0x200086b8
   17cb0:	2000ea60 	.word	0x2000ea60

00017cb4 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   17cb4:	2201      	movs	r2, #1
{
   17cb6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17cb8:	4b09      	ldr	r3, [pc, #36]	; (17ce0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17cba:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17cbc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17cbe:	f7ff fef9 	bl	17ab4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17cc2:	f002 f819 	bl	19cf8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17cc6:	2003      	movs	r0, #3
   17cc8:	f7ff fef4 	bl	17ab4 <z_sys_init_run_level>

	z_init_static_threads();
   17ccc:	f001 fe76 	bl	199bc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17cd0:	f7f1 fa02 	bl	90d8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17cd4:	4a03      	ldr	r2, [pc, #12]	; (17ce4 <bg_thread_main+0x30>)
   17cd6:	7b13      	ldrb	r3, [r2, #12]
   17cd8:	f023 0301 	bic.w	r3, r3, #1
   17cdc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17cde:	bd08      	pop	{r3, pc}
   17ce0:	2000ea5e 	.word	0x2000ea5e
   17ce4:	20009850 	.word	0x20009850

00017ce8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17ce8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   17cec:	4b34      	ldr	r3, [pc, #208]	; (17dc0 <z_cstart+0xd8>)
   17cee:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   17cf0:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17cf4:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17cf8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17cfc:	2400      	movs	r4, #0
   17cfe:	23e0      	movs	r3, #224	; 0xe0
   17d00:	4d30      	ldr	r5, [pc, #192]	; (17dc4 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d02:	f04f 0b01 	mov.w	fp, #1
   17d06:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17d0a:	77ec      	strb	r4, [r5, #31]
   17d0c:	762c      	strb	r4, [r5, #24]
   17d0e:	766c      	strb	r4, [r5, #25]
   17d10:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17d12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   17d14:	4e2c      	ldr	r6, [pc, #176]	; (17dc8 <z_cstart+0xe0>)
   17d16:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17d1a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17d1c:	f7f6 fa6e 	bl	e1fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17d20:	f7f5 ffe4 	bl	dcec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17d24:	f04f 33ff 	mov.w	r3, #4294967295
   17d28:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17d2a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   17d2c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17d30:	4d26      	ldr	r5, [pc, #152]	; (17dcc <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   17d32:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17d36:	ab06      	add	r3, sp, #24
   17d38:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17d3a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   17d3c:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   17d40:	f7ff feb8 	bl	17ab4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17d44:	2001      	movs	r0, #1
   17d46:	f7ff feb5 	bl	17ab4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d4a:	f8df a084 	ldr.w	sl, [pc, #132]	; 17dd0 <z_cstart+0xe8>
	z_sched_init();
   17d4e:	f001 fb77 	bl	19440 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d52:	4b20      	ldr	r3, [pc, #128]	; (17dd4 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   17d54:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17d5a:	491f      	ldr	r1, [pc, #124]	; (17dd8 <z_cstart+0xf0>)
   17d5c:	9305      	str	r3, [sp, #20]
   17d5e:	4630      	mov	r0, r6
   17d60:	4653      	mov	r3, sl
   17d62:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17d66:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17d6a:	9400      	str	r4, [sp, #0]
   17d6c:	f001 fd74 	bl	19858 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17d70:	7b73      	ldrb	r3, [r6, #13]
   17d72:	4680      	mov	r8, r0
   17d74:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17d78:	4630      	mov	r0, r6
   17d7a:	7373      	strb	r3, [r6, #13]
   17d7c:	f000 feec 	bl	18b58 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17d80:	230f      	movs	r3, #15
   17d82:	4f16      	ldr	r7, [pc, #88]	; (17ddc <z_cstart+0xf4>)
   17d84:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17d88:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17d8c:	4914      	ldr	r1, [pc, #80]	; (17de0 <z_cstart+0xf8>)
   17d8e:	4b15      	ldr	r3, [pc, #84]	; (17de4 <z_cstart+0xfc>)
   17d90:	4638      	mov	r0, r7
   17d92:	e9cd b404 	strd	fp, r4, [sp, #16]
   17d96:	e9cd 5400 	strd	r5, r4, [sp]
   17d9a:	f001 fd5d 	bl	19858 <z_setup_new_thread>
   17d9e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17da0:	4652      	mov	r2, sl
   17da2:	f023 0304 	bic.w	r3, r3, #4
   17da6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17da8:	f105 031c 	add.w	r3, r5, #28
   17dac:	4641      	mov	r1, r8
   17dae:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   17db0:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   17db4:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   17db6:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   17db8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17dbc:	f7f5 ff7c 	bl	dcb8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17dc0:	20012678 	.word	0x20012678
   17dc4:	e000ed00 	.word	0xe000ed00
   17dc8:	20009850 	.word	0x20009850
   17dcc:	2000a27c 	.word	0x2000a27c
   17dd0:	00017cb5 	.word	0x00017cb5
   17dd4:	00022872 	.word	0x00022872
   17dd8:	20010538 	.word	0x20010538
   17ddc:	200097c0 	.word	0x200097c0
   17de0:	20012538 	.word	0x20012538
   17de4:	00017c41 	.word	0x00017c41

00017de8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   17de8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17dea:	4c0c      	ldr	r4, [pc, #48]	; (17e1c <statics_init+0x34>)
   17dec:	4d0c      	ldr	r5, [pc, #48]	; (17e20 <statics_init+0x38>)
   17dee:	4e0d      	ldr	r6, [pc, #52]	; (17e24 <statics_init+0x3c>)
   17df0:	42ac      	cmp	r4, r5
   17df2:	d908      	bls.n	17e06 <statics_init+0x1e>
   17df4:	4631      	mov	r1, r6
   17df6:	480c      	ldr	r0, [pc, #48]	; (17e28 <statics_init+0x40>)
   17df8:	2215      	movs	r2, #21
   17dfa:	f002 fe47 	bl	1aa8c <printk>
   17dfe:	2115      	movs	r1, #21
   17e00:	4630      	mov	r0, r6
   17e02:	f003 f8e9 	bl	1afd8 <assert_post_action>
   17e06:	42ac      	cmp	r4, r5
   17e08:	d301      	bcc.n	17e0e <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   17e0a:	2000      	movs	r0, #0
   17e0c:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17e0e:	4620      	mov	r0, r4
   17e10:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17e14:	f006 f8c0 	bl	1df98 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17e18:	3418      	adds	r4, #24
   17e1a:	e7e9      	b.n	17df0 <statics_init+0x8>
   17e1c:	20008510 	.word	0x20008510
   17e20:	20008528 	.word	0x20008528
   17e24:	0002287a 	.word	0x0002287a
   17e28:	0001fb49 	.word	0x0001fb49

00017e2c <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e30:	b085      	sub	sp, #20
   17e32:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   17e36:	4606      	mov	r6, r0
   17e38:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   17e3a:	4648      	mov	r0, r9
   17e3c:	4639      	mov	r1, r7
{
   17e3e:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   17e40:	f006 f9b0 	bl	1e1a4 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17e44:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   17e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17e4c:	f04f 0320 	mov.w	r3, #32
   17e50:	f3ef 8411 	mrs	r4, BASEPRI
   17e54:	f383 8811 	msr	BASEPRI, r3
   17e58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e5c:	4628      	mov	r0, r5
   17e5e:	f001 fe29 	bl	19ab4 <z_spin_lock_valid>
   17e62:	b940      	cbnz	r0, 17e76 <k_heap_aligned_alloc+0x4a>
   17e64:	4932      	ldr	r1, [pc, #200]	; (17f30 <k_heap_aligned_alloc+0x104>)
   17e66:	4833      	ldr	r0, [pc, #204]	; (17f34 <k_heap_aligned_alloc+0x108>)
   17e68:	227c      	movs	r2, #124	; 0x7c
   17e6a:	f002 fe0f 	bl	1aa8c <printk>
   17e6e:	217c      	movs	r1, #124	; 0x7c
   17e70:	482f      	ldr	r0, [pc, #188]	; (17f30 <k_heap_aligned_alloc+0x104>)
   17e72:	f003 f8b1 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e76:	4628      	mov	r0, r5
   17e78:	f001 fe38 	bl	19aec <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17e7c:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17e80:	b15b      	cbz	r3, 17e9a <k_heap_aligned_alloc+0x6e>
   17e82:	ea59 0307 	orrs.w	r3, r9, r7
   17e86:	d008      	beq.n	17e9a <k_heap_aligned_alloc+0x6e>
   17e88:	492b      	ldr	r1, [pc, #172]	; (17f38 <k_heap_aligned_alloc+0x10c>)
   17e8a:	482a      	ldr	r0, [pc, #168]	; (17f34 <k_heap_aligned_alloc+0x108>)
   17e8c:	2224      	movs	r2, #36	; 0x24
   17e8e:	f002 fdfd 	bl	1aa8c <printk>
   17e92:	2124      	movs	r1, #36	; 0x24
   17e94:	4828      	ldr	r0, [pc, #160]	; (17f38 <k_heap_aligned_alloc+0x10c>)
   17e96:	f003 f89f 	bl	1afd8 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e9a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17f30 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17e9e:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17ea2:	4642      	mov	r2, r8
   17ea4:	4659      	mov	r1, fp
   17ea6:	4630      	mov	r0, r6
   17ea8:	f7f3 f8c6 	bl	b038 <sys_heap_aligned_alloc>
   17eac:	4607      	mov	r7, r0
		now = z_tick_get();
   17eae:	f002 f993 	bl	1a1d8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   17eb2:	b1a7      	cbz	r7, 17ede <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17eb4:	4628      	mov	r0, r5
   17eb6:	f001 fe0b 	bl	19ad0 <z_spin_unlock_valid>
   17eba:	b940      	cbnz	r0, 17ece <k_heap_aligned_alloc+0xa2>
   17ebc:	491c      	ldr	r1, [pc, #112]	; (17f30 <k_heap_aligned_alloc+0x104>)
   17ebe:	481d      	ldr	r0, [pc, #116]	; (17f34 <k_heap_aligned_alloc+0x108>)
   17ec0:	22a7      	movs	r2, #167	; 0xa7
   17ec2:	f002 fde3 	bl	1aa8c <printk>
   17ec6:	21a7      	movs	r1, #167	; 0xa7
   17ec8:	4819      	ldr	r0, [pc, #100]	; (17f30 <k_heap_aligned_alloc+0x104>)
   17eca:	f003 f885 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   17ece:	f384 8811 	msr	BASEPRI, r4
   17ed2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17ed6:	4638      	mov	r0, r7
   17ed8:	b005      	add	sp, #20
   17eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   17ede:	9b02      	ldr	r3, [sp, #8]
   17ee0:	1a18      	subs	r0, r3, r0
   17ee2:	9b03      	ldr	r3, [sp, #12]
   17ee4:	eb63 0101 	sbc.w	r1, r3, r1
   17ee8:	2801      	cmp	r0, #1
   17eea:	f171 0300 	sbcs.w	r3, r1, #0
   17eee:	dbe1      	blt.n	17eb4 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17ef0:	e9cd 0100 	strd	r0, r1, [sp]
   17ef4:	4652      	mov	r2, sl
   17ef6:	4621      	mov	r1, r4
   17ef8:	4628      	mov	r0, r5
   17efa:	f001 f997 	bl	1922c <z_pend_curr>
	__asm__ volatile(
   17efe:	f04f 0320 	mov.w	r3, #32
   17f02:	f3ef 8411 	mrs	r4, BASEPRI
   17f06:	f383 8811 	msr	BASEPRI, r3
   17f0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f0e:	4628      	mov	r0, r5
   17f10:	f001 fdd0 	bl	19ab4 <z_spin_lock_valid>
   17f14:	b940      	cbnz	r0, 17f28 <k_heap_aligned_alloc+0xfc>
   17f16:	4649      	mov	r1, r9
   17f18:	4806      	ldr	r0, [pc, #24]	; (17f34 <k_heap_aligned_alloc+0x108>)
   17f1a:	227c      	movs	r2, #124	; 0x7c
   17f1c:	f002 fdb6 	bl	1aa8c <printk>
   17f20:	217c      	movs	r1, #124	; 0x7c
   17f22:	4648      	mov	r0, r9
   17f24:	f003 f858 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f28:	4628      	mov	r0, r5
   17f2a:	f001 fddf 	bl	19aec <z_spin_lock_set_owner>
	return k;
   17f2e:	e7b8      	b.n	17ea2 <k_heap_aligned_alloc+0x76>
   17f30:	0001fb83 	.word	0x0001fb83
   17f34:	0001fb49 	.word	0x0001fb49
   17f38:	0002287a 	.word	0x0002287a

00017f3c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   17f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f3e:	4604      	mov	r4, r0
   17f40:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17f42:	f100 0514 	add.w	r5, r0, #20
   17f46:	f04f 0320 	mov.w	r3, #32
   17f4a:	f3ef 8711 	mrs	r7, BASEPRI
   17f4e:	f383 8811 	msr	BASEPRI, r3
   17f52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f56:	4628      	mov	r0, r5
   17f58:	f001 fdac 	bl	19ab4 <z_spin_lock_valid>
   17f5c:	b940      	cbnz	r0, 17f70 <k_heap_free+0x34>
   17f5e:	4916      	ldr	r1, [pc, #88]	; (17fb8 <k_heap_free+0x7c>)
   17f60:	4816      	ldr	r0, [pc, #88]	; (17fbc <k_heap_free+0x80>)
   17f62:	227c      	movs	r2, #124	; 0x7c
   17f64:	f002 fd92 	bl	1aa8c <printk>
   17f68:	217c      	movs	r1, #124	; 0x7c
   17f6a:	4813      	ldr	r0, [pc, #76]	; (17fb8 <k_heap_free+0x7c>)
   17f6c:	f003 f834 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f70:	4628      	mov	r0, r5
   17f72:	f001 fdbb 	bl	19aec <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17f76:	4620      	mov	r0, r4
   17f78:	4631      	mov	r1, r6
   17f7a:	f7f3 f81b 	bl	afb4 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   17f7e:	f104 000c 	add.w	r0, r4, #12
   17f82:	f006 f881 	bl	1e088 <z_unpend_all>
   17f86:	b128      	cbz	r0, 17f94 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   17f88:	4639      	mov	r1, r7
   17f8a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17f90:	f000 bc0e 	b.w	187b0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f94:	4628      	mov	r0, r5
   17f96:	f001 fd9b 	bl	19ad0 <z_spin_unlock_valid>
   17f9a:	b940      	cbnz	r0, 17fae <k_heap_free+0x72>
   17f9c:	4906      	ldr	r1, [pc, #24]	; (17fb8 <k_heap_free+0x7c>)
   17f9e:	4807      	ldr	r0, [pc, #28]	; (17fbc <k_heap_free+0x80>)
   17fa0:	22a7      	movs	r2, #167	; 0xa7
   17fa2:	f002 fd73 	bl	1aa8c <printk>
   17fa6:	21a7      	movs	r1, #167	; 0xa7
   17fa8:	4803      	ldr	r0, [pc, #12]	; (17fb8 <k_heap_free+0x7c>)
   17faa:	f003 f815 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   17fae:	f387 8811 	msr	BASEPRI, r7
   17fb2:	f3bf 8f6f 	isb	sy
}
   17fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fb8:	0001fb83 	.word	0x0001fb83
   17fbc:	0001fb49 	.word	0x0001fb49

00017fc0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17fc2:	4c14      	ldr	r4, [pc, #80]	; (18014 <init_mem_slab_module+0x54>)
   17fc4:	4d14      	ldr	r5, [pc, #80]	; (18018 <init_mem_slab_module+0x58>)
   17fc6:	4e15      	ldr	r6, [pc, #84]	; (1801c <init_mem_slab_module+0x5c>)
   17fc8:	42ac      	cmp	r4, r5
   17fca:	d908      	bls.n	17fde <init_mem_slab_module+0x1e>
   17fcc:	4631      	mov	r1, r6
   17fce:	4814      	ldr	r0, [pc, #80]	; (18020 <init_mem_slab_module+0x60>)
   17fd0:	2242      	movs	r2, #66	; 0x42
   17fd2:	f002 fd5b 	bl	1aa8c <printk>
   17fd6:	2142      	movs	r1, #66	; 0x42
   17fd8:	4630      	mov	r0, r6
   17fda:	f002 fffd 	bl	1afd8 <assert_post_action>
   17fde:	42ac      	cmp	r4, r5
   17fe0:	d301      	bcc.n	17fe6 <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   17fe2:	2000      	movs	r0, #0
	return rc;
}
   17fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17fe6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   17fea:	ea42 0301 	orr.w	r3, r2, r1
   17fee:	f013 0303 	ands.w	r3, r3, #3
   17ff2:	d10b      	bne.n	1800c <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   17ff4:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   17ff6:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17ff8:	4283      	cmp	r3, r0
   17ffa:	d101      	bne.n	18000 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17ffc:	341c      	adds	r4, #28
   17ffe:	e7e3      	b.n	17fc8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   18000:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18002:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   18004:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   18006:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   18008:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1800a:	e7f5      	b.n	17ff8 <init_mem_slab_module+0x38>
	return rc;
   1800c:	f06f 0015 	mvn.w	r0, #21
   18010:	e7e8      	b.n	17fe4 <init_mem_slab_module+0x24>
   18012:	bf00      	nop
   18014:	200084bc 	.word	0x200084bc
   18018:	20008510 	.word	0x20008510
   1801c:	0002289c 	.word	0x0002289c
   18020:	0001fb49 	.word	0x0001fb49

00018024 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18024:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18028:	4604      	mov	r4, r0
   1802a:	460d      	mov	r5, r1
   1802c:	4617      	mov	r7, r2
   1802e:	461e      	mov	r6, r3
	__asm__ volatile(
   18030:	f04f 0320 	mov.w	r3, #32
   18034:	f3ef 8811 	mrs	r8, BASEPRI
   18038:	f383 8811 	msr	BASEPRI, r3
   1803c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18040:	4821      	ldr	r0, [pc, #132]	; (180c8 <k_mem_slab_alloc+0xa4>)
   18042:	f001 fd37 	bl	19ab4 <z_spin_lock_valid>
   18046:	b940      	cbnz	r0, 1805a <k_mem_slab_alloc+0x36>
   18048:	4920      	ldr	r1, [pc, #128]	; (180cc <k_mem_slab_alloc+0xa8>)
   1804a:	4821      	ldr	r0, [pc, #132]	; (180d0 <k_mem_slab_alloc+0xac>)
   1804c:	227c      	movs	r2, #124	; 0x7c
   1804e:	f002 fd1d 	bl	1aa8c <printk>
   18052:	217c      	movs	r1, #124	; 0x7c
   18054:	481d      	ldr	r0, [pc, #116]	; (180cc <k_mem_slab_alloc+0xa8>)
   18056:	f002 ffbf 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1805a:	481b      	ldr	r0, [pc, #108]	; (180c8 <k_mem_slab_alloc+0xa4>)
   1805c:	f001 fd46 	bl	19aec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   18060:	6963      	ldr	r3, [r4, #20]
   18062:	b1c3      	cbz	r3, 18096 <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   18064:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   18066:	681b      	ldr	r3, [r3, #0]
   18068:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   1806a:	69a3      	ldr	r3, [r4, #24]
   1806c:	3301      	adds	r3, #1
   1806e:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18070:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18072:	4815      	ldr	r0, [pc, #84]	; (180c8 <k_mem_slab_alloc+0xa4>)
   18074:	f001 fd2c 	bl	19ad0 <z_spin_unlock_valid>
   18078:	b940      	cbnz	r0, 1808c <k_mem_slab_alloc+0x68>
   1807a:	4914      	ldr	r1, [pc, #80]	; (180cc <k_mem_slab_alloc+0xa8>)
   1807c:	4814      	ldr	r0, [pc, #80]	; (180d0 <k_mem_slab_alloc+0xac>)
   1807e:	22a7      	movs	r2, #167	; 0xa7
   18080:	f002 fd04 	bl	1aa8c <printk>
   18084:	21a7      	movs	r1, #167	; 0xa7
   18086:	4811      	ldr	r0, [pc, #68]	; (180cc <k_mem_slab_alloc+0xa8>)
   18088:	f002 ffa6 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1808c:	f388 8811 	msr	BASEPRI, r8
   18090:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   18094:	e013      	b.n	180be <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18096:	ea57 0206 	orrs.w	r2, r7, r6
   1809a:	d103      	bne.n	180a4 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   1809c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   180a0:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   180a2:	e7e6      	b.n	18072 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   180a4:	4622      	mov	r2, r4
   180a6:	4641      	mov	r1, r8
   180a8:	e9cd 7600 	strd	r7, r6, [sp]
   180ac:	4806      	ldr	r0, [pc, #24]	; (180c8 <k_mem_slab_alloc+0xa4>)
   180ae:	f001 f8bd 	bl	1922c <z_pend_curr>
		if (result == 0) {
   180b2:	4604      	mov	r4, r0
   180b4:	b918      	cbnz	r0, 180be <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   180b6:	4b07      	ldr	r3, [pc, #28]	; (180d4 <k_mem_slab_alloc+0xb0>)
   180b8:	689b      	ldr	r3, [r3, #8]
   180ba:	695b      	ldr	r3, [r3, #20]
   180bc:	602b      	str	r3, [r5, #0]
}
   180be:	4620      	mov	r0, r4
   180c0:	b002      	add	sp, #8
   180c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180c6:	bf00      	nop
   180c8:	2000a274 	.word	0x2000a274
   180cc:	0001fb83 	.word	0x0001fb83
   180d0:	0001fb49 	.word	0x0001fb49
   180d4:	2000a27c 	.word	0x2000a27c

000180d8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   180d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180da:	4604      	mov	r4, r0
   180dc:	460d      	mov	r5, r1
	__asm__ volatile(
   180de:	f04f 0320 	mov.w	r3, #32
   180e2:	f3ef 8611 	mrs	r6, BASEPRI
   180e6:	f383 8811 	msr	BASEPRI, r3
   180ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   180ee:	481e      	ldr	r0, [pc, #120]	; (18168 <k_mem_slab_free+0x90>)
   180f0:	f001 fce0 	bl	19ab4 <z_spin_lock_valid>
   180f4:	b940      	cbnz	r0, 18108 <k_mem_slab_free+0x30>
   180f6:	491d      	ldr	r1, [pc, #116]	; (1816c <k_mem_slab_free+0x94>)
   180f8:	481d      	ldr	r0, [pc, #116]	; (18170 <k_mem_slab_free+0x98>)
   180fa:	227c      	movs	r2, #124	; 0x7c
   180fc:	f002 fcc6 	bl	1aa8c <printk>
   18100:	217c      	movs	r1, #124	; 0x7c
   18102:	481a      	ldr	r0, [pc, #104]	; (1816c <k_mem_slab_free+0x94>)
   18104:	f002 ff68 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18108:	4817      	ldr	r0, [pc, #92]	; (18168 <k_mem_slab_free+0x90>)
   1810a:	f001 fcef 	bl	19aec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1810e:	6967      	ldr	r7, [r4, #20]
   18110:	b97f      	cbnz	r7, 18132 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   18112:	4620      	mov	r0, r4
   18114:	f001 f92c 	bl	19370 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   18118:	b158      	cbz	r0, 18132 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1811a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1811c:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18120:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   18122:	f000 fd19 	bl	18b58 <z_ready_thread>
			z_reschedule(&lock, key);
   18126:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   18128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1812c:	480e      	ldr	r0, [pc, #56]	; (18168 <k_mem_slab_free+0x90>)
   1812e:	f000 bb3f 	b.w	187b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   18132:	682b      	ldr	r3, [r5, #0]
   18134:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18136:	480c      	ldr	r0, [pc, #48]	; (18168 <k_mem_slab_free+0x90>)
   18138:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1813a:	682b      	ldr	r3, [r5, #0]
   1813c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1813e:	69a3      	ldr	r3, [r4, #24]
   18140:	3b01      	subs	r3, #1
   18142:	61a3      	str	r3, [r4, #24]
   18144:	f001 fcc4 	bl	19ad0 <z_spin_unlock_valid>
   18148:	b940      	cbnz	r0, 1815c <k_mem_slab_free+0x84>
   1814a:	4908      	ldr	r1, [pc, #32]	; (1816c <k_mem_slab_free+0x94>)
   1814c:	4808      	ldr	r0, [pc, #32]	; (18170 <k_mem_slab_free+0x98>)
   1814e:	22a7      	movs	r2, #167	; 0xa7
   18150:	f002 fc9c 	bl	1aa8c <printk>
   18154:	21a7      	movs	r1, #167	; 0xa7
   18156:	4805      	ldr	r0, [pc, #20]	; (1816c <k_mem_slab_free+0x94>)
   18158:	f002 ff3e 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1815c:	f386 8811 	msr	BASEPRI, r6
   18160:	f3bf 8f6f 	isb	sy
}
   18164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18166:	bf00      	nop
   18168:	2000a274 	.word	0x2000a274
   1816c:	0001fb83 	.word	0x0001fb83
   18170:	0001fb49 	.word	0x0001fb49

00018174 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18178:	4604      	mov	r4, r0
   1817a:	4617      	mov	r7, r2
   1817c:	461e      	mov	r6, r3
   1817e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18182:	b143      	cbz	r3, 18196 <z_impl_k_mutex_lock+0x22>
   18184:	495c      	ldr	r1, [pc, #368]	; (182f8 <z_impl_k_mutex_lock+0x184>)
   18186:	485d      	ldr	r0, [pc, #372]	; (182fc <z_impl_k_mutex_lock+0x188>)
   18188:	227d      	movs	r2, #125	; 0x7d
   1818a:	f002 fc7f 	bl	1aa8c <printk>
   1818e:	217d      	movs	r1, #125	; 0x7d
   18190:	4859      	ldr	r0, [pc, #356]	; (182f8 <z_impl_k_mutex_lock+0x184>)
   18192:	f002 ff21 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18196:	f04f 0320 	mov.w	r3, #32
   1819a:	f3ef 8811 	mrs	r8, BASEPRI
   1819e:	f383 8811 	msr	BASEPRI, r3
   181a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181a6:	4856      	ldr	r0, [pc, #344]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   181a8:	f001 fc84 	bl	19ab4 <z_spin_lock_valid>
   181ac:	b940      	cbnz	r0, 181c0 <z_impl_k_mutex_lock+0x4c>
   181ae:	4955      	ldr	r1, [pc, #340]	; (18304 <z_impl_k_mutex_lock+0x190>)
   181b0:	4852      	ldr	r0, [pc, #328]	; (182fc <z_impl_k_mutex_lock+0x188>)
   181b2:	227c      	movs	r2, #124	; 0x7c
   181b4:	f002 fc6a 	bl	1aa8c <printk>
   181b8:	217c      	movs	r1, #124	; 0x7c
   181ba:	4852      	ldr	r0, [pc, #328]	; (18304 <z_impl_k_mutex_lock+0x190>)
   181bc:	f002 ff0c 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   181c0:	484f      	ldr	r0, [pc, #316]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   181c2:	f001 fc93 	bl	19aec <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   181c6:	68e3      	ldr	r3, [r4, #12]
   181c8:	4a4f      	ldr	r2, [pc, #316]	; (18308 <z_impl_k_mutex_lock+0x194>)
   181ca:	b1d3      	cbz	r3, 18202 <z_impl_k_mutex_lock+0x8e>
   181cc:	68a0      	ldr	r0, [r4, #8]
   181ce:	6891      	ldr	r1, [r2, #8]
   181d0:	4288      	cmp	r0, r1
   181d2:	d033      	beq.n	1823c <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   181d4:	ea57 0306 	orrs.w	r3, r7, r6
   181d8:	d132      	bne.n	18240 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181da:	4849      	ldr	r0, [pc, #292]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   181dc:	f001 fc78 	bl	19ad0 <z_spin_unlock_valid>
   181e0:	b940      	cbnz	r0, 181f4 <z_impl_k_mutex_lock+0x80>
   181e2:	4948      	ldr	r1, [pc, #288]	; (18304 <z_impl_k_mutex_lock+0x190>)
   181e4:	4845      	ldr	r0, [pc, #276]	; (182fc <z_impl_k_mutex_lock+0x188>)
   181e6:	22a7      	movs	r2, #167	; 0xa7
   181e8:	f002 fc50 	bl	1aa8c <printk>
   181ec:	21a7      	movs	r1, #167	; 0xa7
   181ee:	4845      	ldr	r0, [pc, #276]	; (18304 <z_impl_k_mutex_lock+0x190>)
   181f0:	f002 fef2 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   181f4:	f388 8811 	msr	BASEPRI, r8
   181f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   181fc:	f06f 000f 	mvn.w	r0, #15
   18200:	e019      	b.n	18236 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   18202:	6891      	ldr	r1, [r2, #8]
   18204:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   18208:	3301      	adds	r3, #1
   1820a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1820c:	6893      	ldr	r3, [r2, #8]
   1820e:	483c      	ldr	r0, [pc, #240]	; (18300 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18210:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   18212:	60a3      	str	r3, [r4, #8]
   18214:	f001 fc5c 	bl	19ad0 <z_spin_unlock_valid>
   18218:	b940      	cbnz	r0, 1822c <z_impl_k_mutex_lock+0xb8>
   1821a:	493a      	ldr	r1, [pc, #232]	; (18304 <z_impl_k_mutex_lock+0x190>)
   1821c:	4837      	ldr	r0, [pc, #220]	; (182fc <z_impl_k_mutex_lock+0x188>)
   1821e:	22a7      	movs	r2, #167	; 0xa7
   18220:	f002 fc34 	bl	1aa8c <printk>
   18224:	21a7      	movs	r1, #167	; 0xa7
   18226:	4837      	ldr	r0, [pc, #220]	; (18304 <z_impl_k_mutex_lock+0x190>)
   18228:	f002 fed6 	bl	1afd8 <assert_post_action>
   1822c:	f388 8811 	msr	BASEPRI, r8
   18230:	f3bf 8f6f 	isb	sy
		return 0;
   18234:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   18236:	b002      	add	sp, #8
   18238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1823c:	6921      	ldr	r1, [r4, #16]
   1823e:	e7e3      	b.n	18208 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18240:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18244:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18248:	4299      	cmp	r1, r3
   1824a:	bfa8      	it	ge
   1824c:	4619      	movge	r1, r3
   1824e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18252:	4299      	cmp	r1, r3
   18254:	da3b      	bge.n	182ce <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   18256:	f005 fea7 	bl	1dfa8 <adjust_owner_prio.isra.0>
   1825a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1825c:	4622      	mov	r2, r4
   1825e:	4641      	mov	r1, r8
   18260:	e9cd 7600 	strd	r7, r6, [sp]
   18264:	4826      	ldr	r0, [pc, #152]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   18266:	f000 ffe1 	bl	1922c <z_pend_curr>
	if (got_mutex == 0) {
   1826a:	2800      	cmp	r0, #0
   1826c:	d0e3      	beq.n	18236 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1826e:	f04f 0320 	mov.w	r3, #32
   18272:	f3ef 8611 	mrs	r6, BASEPRI
   18276:	f383 8811 	msr	BASEPRI, r3
   1827a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1827e:	4820      	ldr	r0, [pc, #128]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   18280:	f001 fc18 	bl	19ab4 <z_spin_lock_valid>
   18284:	b940      	cbnz	r0, 18298 <z_impl_k_mutex_lock+0x124>
   18286:	491f      	ldr	r1, [pc, #124]	; (18304 <z_impl_k_mutex_lock+0x190>)
   18288:	481c      	ldr	r0, [pc, #112]	; (182fc <z_impl_k_mutex_lock+0x188>)
   1828a:	227c      	movs	r2, #124	; 0x7c
   1828c:	f002 fbfe 	bl	1aa8c <printk>
   18290:	217c      	movs	r1, #124	; 0x7c
   18292:	481c      	ldr	r0, [pc, #112]	; (18304 <z_impl_k_mutex_lock+0x190>)
   18294:	f002 fea0 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18298:	4819      	ldr	r0, [pc, #100]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   1829a:	f001 fc27 	bl	19aec <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1829e:	6823      	ldr	r3, [r4, #0]
   182a0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   182a2:	42a3      	cmp	r3, r4
   182a4:	d007      	beq.n	182b6 <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   182a6:	b133      	cbz	r3, 182b6 <z_impl_k_mutex_lock+0x142>
   182a8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   182ac:	4299      	cmp	r1, r3
   182ae:	bfa8      	it	ge
   182b0:	4619      	movge	r1, r3
   182b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   182b6:	68a0      	ldr	r0, [r4, #8]
   182b8:	f005 fe76 	bl	1dfa8 <adjust_owner_prio.isra.0>
   182bc:	b900      	cbnz	r0, 182c0 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   182be:	b145      	cbz	r5, 182d2 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   182c0:	4631      	mov	r1, r6
   182c2:	480f      	ldr	r0, [pc, #60]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   182c4:	f000 fa74 	bl	187b0 <z_reschedule>
	return -EAGAIN;
   182c8:	f06f 000a 	mvn.w	r0, #10
   182cc:	e7b3      	b.n	18236 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   182ce:	2500      	movs	r5, #0
   182d0:	e7c4      	b.n	1825c <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182d2:	480b      	ldr	r0, [pc, #44]	; (18300 <z_impl_k_mutex_lock+0x18c>)
   182d4:	f001 fbfc 	bl	19ad0 <z_spin_unlock_valid>
   182d8:	b940      	cbnz	r0, 182ec <z_impl_k_mutex_lock+0x178>
   182da:	490a      	ldr	r1, [pc, #40]	; (18304 <z_impl_k_mutex_lock+0x190>)
   182dc:	4807      	ldr	r0, [pc, #28]	; (182fc <z_impl_k_mutex_lock+0x188>)
   182de:	22a7      	movs	r2, #167	; 0xa7
   182e0:	f002 fbd4 	bl	1aa8c <printk>
   182e4:	21a7      	movs	r1, #167	; 0xa7
   182e6:	4807      	ldr	r0, [pc, #28]	; (18304 <z_impl_k_mutex_lock+0x190>)
   182e8:	f002 fe76 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   182ec:	f386 8811 	msr	BASEPRI, r6
   182f0:	f3bf 8f6f 	isb	sy
   182f4:	e7e8      	b.n	182c8 <z_impl_k_mutex_lock+0x154>
   182f6:	bf00      	nop
   182f8:	000228c1 	.word	0x000228c1
   182fc:	0001fb49 	.word	0x0001fb49
   18300:	2000a278 	.word	0x2000a278
   18304:	0001fb83 	.word	0x0001fb83
   18308:	2000a27c 	.word	0x2000a27c

0001830c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1830c:	b538      	push	{r3, r4, r5, lr}
   1830e:	4604      	mov	r4, r0
   18310:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18314:	b143      	cbz	r3, 18328 <z_impl_k_mutex_unlock+0x1c>
   18316:	4946      	ldr	r1, [pc, #280]	; (18430 <z_impl_k_mutex_unlock+0x124>)
   18318:	4846      	ldr	r0, [pc, #280]	; (18434 <z_impl_k_mutex_unlock+0x128>)
   1831a:	22d8      	movs	r2, #216	; 0xd8
   1831c:	f002 fbb6 	bl	1aa8c <printk>
   18320:	21d8      	movs	r1, #216	; 0xd8
   18322:	4843      	ldr	r0, [pc, #268]	; (18430 <z_impl_k_mutex_unlock+0x124>)
   18324:	f002 fe58 	bl	1afd8 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   18328:	68a3      	ldr	r3, [r4, #8]
   1832a:	2b00      	cmp	r3, #0
   1832c:	d079      	beq.n	18422 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1832e:	4d42      	ldr	r5, [pc, #264]	; (18438 <z_impl_k_mutex_unlock+0x12c>)
   18330:	68aa      	ldr	r2, [r5, #8]
   18332:	4293      	cmp	r3, r2
   18334:	d178      	bne.n	18428 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   18336:	68e3      	ldr	r3, [r4, #12]
   18338:	b943      	cbnz	r3, 1834c <z_impl_k_mutex_unlock+0x40>
   1833a:	493d      	ldr	r1, [pc, #244]	; (18430 <z_impl_k_mutex_unlock+0x124>)
   1833c:	483d      	ldr	r0, [pc, #244]	; (18434 <z_impl_k_mutex_unlock+0x128>)
   1833e:	22ea      	movs	r2, #234	; 0xea
   18340:	f002 fba4 	bl	1aa8c <printk>
   18344:	21ea      	movs	r1, #234	; 0xea
   18346:	483a      	ldr	r0, [pc, #232]	; (18430 <z_impl_k_mutex_unlock+0x124>)
   18348:	f002 fe46 	bl	1afd8 <assert_post_action>
   1834c:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   18350:	b153      	cbz	r3, 18368 <z_impl_k_mutex_unlock+0x5c>
   18352:	493a      	ldr	r1, [pc, #232]	; (1843c <z_impl_k_mutex_unlock+0x130>)
   18354:	4837      	ldr	r0, [pc, #220]	; (18434 <z_impl_k_mutex_unlock+0x128>)
   18356:	f44f 7289 	mov.w	r2, #274	; 0x112
   1835a:	f002 fb97 	bl	1aa8c <printk>
   1835e:	f44f 7189 	mov.w	r1, #274	; 0x112
   18362:	4836      	ldr	r0, [pc, #216]	; (1843c <z_impl_k_mutex_unlock+0x130>)
   18364:	f002 fe38 	bl	1afd8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   18368:	68ab      	ldr	r3, [r5, #8]
   1836a:	7bdb      	ldrb	r3, [r3, #15]
   1836c:	2b01      	cmp	r3, #1
   1836e:	d10a      	bne.n	18386 <z_impl_k_mutex_unlock+0x7a>
   18370:	4932      	ldr	r1, [pc, #200]	; (1843c <z_impl_k_mutex_unlock+0x130>)
   18372:	4830      	ldr	r0, [pc, #192]	; (18434 <z_impl_k_mutex_unlock+0x128>)
   18374:	f240 1213 	movw	r2, #275	; 0x113
   18378:	f002 fb88 	bl	1aa8c <printk>
   1837c:	f240 1113 	movw	r1, #275	; 0x113
   18380:	482e      	ldr	r0, [pc, #184]	; (1843c <z_impl_k_mutex_unlock+0x130>)
   18382:	f002 fe29 	bl	1afd8 <assert_post_action>

	--_current->base.sched_locked;
   18386:	68aa      	ldr	r2, [r5, #8]
   18388:	7bd3      	ldrb	r3, [r2, #15]
   1838a:	3b01      	subs	r3, #1
   1838c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1838e:	68e3      	ldr	r3, [r4, #12]
   18390:	2b01      	cmp	r3, #1
   18392:	d005      	beq.n	183a0 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   18394:	3b01      	subs	r3, #1
   18396:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   18398:	f000 fb38 	bl	18a0c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1839c:	2000      	movs	r0, #0
}
   1839e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   183a0:	f04f 0320 	mov.w	r3, #32
   183a4:	f3ef 8511 	mrs	r5, BASEPRI
   183a8:	f383 8811 	msr	BASEPRI, r3
   183ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   183b0:	4823      	ldr	r0, [pc, #140]	; (18440 <z_impl_k_mutex_unlock+0x134>)
   183b2:	f001 fb7f 	bl	19ab4 <z_spin_lock_valid>
   183b6:	b940      	cbnz	r0, 183ca <z_impl_k_mutex_unlock+0xbe>
   183b8:	4922      	ldr	r1, [pc, #136]	; (18444 <z_impl_k_mutex_unlock+0x138>)
   183ba:	481e      	ldr	r0, [pc, #120]	; (18434 <z_impl_k_mutex_unlock+0x128>)
   183bc:	227c      	movs	r2, #124	; 0x7c
   183be:	f002 fb65 	bl	1aa8c <printk>
   183c2:	217c      	movs	r1, #124	; 0x7c
   183c4:	481f      	ldr	r0, [pc, #124]	; (18444 <z_impl_k_mutex_unlock+0x138>)
   183c6:	f002 fe07 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   183ca:	481d      	ldr	r0, [pc, #116]	; (18440 <z_impl_k_mutex_unlock+0x134>)
   183cc:	f001 fb8e 	bl	19aec <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   183d0:	6921      	ldr	r1, [r4, #16]
   183d2:	68a0      	ldr	r0, [r4, #8]
   183d4:	f005 fde8 	bl	1dfa8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   183d8:	4620      	mov	r0, r4
   183da:	f000 ffc9 	bl	19370 <z_unpend_first_thread>
	mutex->owner = new_owner;
   183de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   183e0:	b160      	cbz	r0, 183fc <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   183e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   183e6:	6122      	str	r2, [r4, #16]
   183e8:	2200      	movs	r2, #0
   183ea:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   183ee:	f000 fbb3 	bl	18b58 <z_ready_thread>
		z_reschedule(&lock, key);
   183f2:	4629      	mov	r1, r5
   183f4:	4812      	ldr	r0, [pc, #72]	; (18440 <z_impl_k_mutex_unlock+0x134>)
   183f6:	f000 f9db 	bl	187b0 <z_reschedule>
   183fa:	e7cd      	b.n	18398 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   183fc:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   183fe:	4810      	ldr	r0, [pc, #64]	; (18440 <z_impl_k_mutex_unlock+0x134>)
   18400:	f001 fb66 	bl	19ad0 <z_spin_unlock_valid>
   18404:	b940      	cbnz	r0, 18418 <z_impl_k_mutex_unlock+0x10c>
   18406:	490f      	ldr	r1, [pc, #60]	; (18444 <z_impl_k_mutex_unlock+0x138>)
   18408:	480a      	ldr	r0, [pc, #40]	; (18434 <z_impl_k_mutex_unlock+0x128>)
   1840a:	22a7      	movs	r2, #167	; 0xa7
   1840c:	f002 fb3e 	bl	1aa8c <printk>
   18410:	21a7      	movs	r1, #167	; 0xa7
   18412:	480c      	ldr	r0, [pc, #48]	; (18444 <z_impl_k_mutex_unlock+0x138>)
   18414:	f002 fde0 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18418:	f385 8811 	msr	BASEPRI, r5
   1841c:	f3bf 8f6f 	isb	sy
   18420:	e7ba      	b.n	18398 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   18422:	f06f 0015 	mvn.w	r0, #21
   18426:	e7ba      	b.n	1839e <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   18428:	f04f 30ff 	mov.w	r0, #4294967295
   1842c:	e7b7      	b.n	1839e <z_impl_k_mutex_unlock+0x92>
   1842e:	bf00      	nop
   18430:	000228c1 	.word	0x000228c1
   18434:	0001fb49 	.word	0x0001fb49
   18438:	2000a27c 	.word	0x2000a27c
   1843c:	000228e3 	.word	0x000228e3
   18440:	2000a278 	.word	0x2000a278
   18444:	0001fb83 	.word	0x0001fb83

00018448 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   18448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1844c:	4604      	mov	r4, r0
   1844e:	460d      	mov	r5, r1
   18450:	4690      	mov	r8, r2
   18452:	4699      	mov	r9, r3
   18454:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18458:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1845c:	f04f 0320 	mov.w	r3, #32
   18460:	f3ef 8711 	mrs	r7, BASEPRI
   18464:	f383 8811 	msr	BASEPRI, r3
   18468:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1846c:	4630      	mov	r0, r6
   1846e:	f001 fb21 	bl	19ab4 <z_spin_lock_valid>
   18472:	b940      	cbnz	r0, 18486 <queue_insert+0x3e>
   18474:	4937      	ldr	r1, [pc, #220]	; (18554 <queue_insert+0x10c>)
   18476:	4838      	ldr	r0, [pc, #224]	; (18558 <queue_insert+0x110>)
   18478:	227c      	movs	r2, #124	; 0x7c
   1847a:	f002 fb07 	bl	1aa8c <printk>
   1847e:	217c      	movs	r1, #124	; 0x7c
   18480:	4834      	ldr	r0, [pc, #208]	; (18554 <queue_insert+0x10c>)
   18482:	f002 fda9 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18486:	4630      	mov	r0, r6
   18488:	f001 fb30 	bl	19aec <z_spin_lock_set_owner>

	if (is_append) {
   1848c:	f1ba 0f00 	cmp.w	sl, #0
   18490:	d000      	beq.n	18494 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   18492:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   18494:	f104 000c 	add.w	r0, r4, #12
   18498:	f000 ff6a 	bl	19370 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1849c:	b160      	cbz	r0, 184b8 <queue_insert+0x70>
   1849e:	2400      	movs	r4, #0
   184a0:	f8c0 8014 	str.w	r8, [r0, #20]
   184a4:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   184a8:	f000 fb56 	bl	18b58 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   184ac:	4630      	mov	r0, r6
   184ae:	4639      	mov	r1, r7
   184b0:	f000 f97e 	bl	187b0 <z_reschedule>
	return 0;
   184b4:	2000      	movs	r0, #0
   184b6:	e019      	b.n	184ec <queue_insert+0xa4>
	if (alloc) {
   184b8:	f1b9 0f00 	cmp.w	r9, #0
   184bc:	d028      	beq.n	18510 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   184be:	2108      	movs	r1, #8
   184c0:	f002 fa12 	bl	1a8e8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   184c4:	b9a0      	cbnz	r0, 184f0 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184c6:	4630      	mov	r0, r6
   184c8:	f001 fb02 	bl	19ad0 <z_spin_unlock_valid>
   184cc:	b940      	cbnz	r0, 184e0 <queue_insert+0x98>
   184ce:	4921      	ldr	r1, [pc, #132]	; (18554 <queue_insert+0x10c>)
   184d0:	4821      	ldr	r0, [pc, #132]	; (18558 <queue_insert+0x110>)
   184d2:	22a7      	movs	r2, #167	; 0xa7
   184d4:	f002 fada 	bl	1aa8c <printk>
   184d8:	21a7      	movs	r1, #167	; 0xa7
   184da:	481e      	ldr	r0, [pc, #120]	; (18554 <queue_insert+0x10c>)
   184dc:	f002 fd7c 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   184e0:	f387 8811 	msr	BASEPRI, r7
   184e4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   184e8:	f06f 000b 	mvn.w	r0, #11
}
   184ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   184f0:	2301      	movs	r3, #1
		anode->data = data;
   184f2:	f8c0 8004 	str.w	r8, [r0, #4]
   184f6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   184f8:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   184fa:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   184fe:	b95d      	cbnz	r5, 18518 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18500:	6823      	ldr	r3, [r4, #0]
   18502:	4313      	orrs	r3, r2
   18504:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   18506:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   18508:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1850a:	b973      	cbnz	r3, 1852a <queue_insert+0xe2>
	list->tail = node;
   1850c:	6060      	str	r0, [r4, #4]
}
   1850e:	e00c      	b.n	1852a <queue_insert+0xe2>
}
   18510:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   18512:	f8c8 9000 	str.w	r9, [r8]
}
   18516:	e7ef      	b.n	184f8 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18518:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1851a:	f033 0303 	bics.w	r3, r3, #3
   1851e:	d110      	bne.n	18542 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18520:	6002      	str	r2, [r0, #0]
	return list->tail;
   18522:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18524:	b93a      	cbnz	r2, 18536 <queue_insert+0xee>
	list->head = node;
   18526:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1852a:	2104      	movs	r1, #4
   1852c:	f104 0014 	add.w	r0, r4, #20
   18530:	f005 fea9 	bl	1e286 <z_handle_obj_poll_events>
   18534:	e7ba      	b.n	184ac <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18536:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18538:	f003 0303 	and.w	r3, r3, #3
   1853c:	4303      	orrs	r3, r0
   1853e:	6013      	str	r3, [r2, #0]
   18540:	e7e4      	b.n	1850c <queue_insert+0xc4>
   18542:	4313      	orrs	r3, r2
   18544:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18546:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18548:	f003 0303 	and.w	r3, r3, #3
   1854c:	4303      	orrs	r3, r0
   1854e:	602b      	str	r3, [r5, #0]
}
   18550:	e7eb      	b.n	1852a <queue_insert+0xe2>
   18552:	bf00      	nop
   18554:	0001fb83 	.word	0x0001fb83
   18558:	0001fb49 	.word	0x0001fb49

0001855c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18560:	4605      	mov	r5, r0
   18562:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   18564:	460c      	mov	r4, r1
   18566:	2900      	cmp	r1, #0
   18568:	d045      	beq.n	185f6 <k_queue_append_list+0x9a>
   1856a:	2a00      	cmp	r2, #0
   1856c:	d043      	beq.n	185f6 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1856e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   18572:	f04f 0320 	mov.w	r3, #32
   18576:	f3ef 8911 	mrs	r9, BASEPRI
   1857a:	f383 8811 	msr	BASEPRI, r3
   1857e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18582:	4638      	mov	r0, r7
   18584:	f001 fa96 	bl	19ab4 <z_spin_lock_valid>
   18588:	b940      	cbnz	r0, 1859c <k_queue_append_list+0x40>
   1858a:	491c      	ldr	r1, [pc, #112]	; (185fc <k_queue_append_list+0xa0>)
   1858c:	481c      	ldr	r0, [pc, #112]	; (18600 <k_queue_append_list+0xa4>)
   1858e:	227c      	movs	r2, #124	; 0x7c
   18590:	f002 fa7c 	bl	1aa8c <printk>
   18594:	217c      	movs	r1, #124	; 0x7c
   18596:	4819      	ldr	r0, [pc, #100]	; (185fc <k_queue_append_list+0xa0>)
   18598:	f002 fd1e 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1859c:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1859e:	f105 080c 	add.w	r8, r5, #12
   185a2:	f001 faa3 	bl	19aec <z_spin_lock_set_owner>
   185a6:	4640      	mov	r0, r8
   185a8:	f000 fee2 	bl	19370 <z_unpend_first_thread>
   185ac:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   185b0:	b920      	cbnz	r0, 185bc <k_queue_append_list+0x60>
	return list->tail;
   185b2:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   185b4:	b9ca      	cbnz	r2, 185ea <k_queue_append_list+0x8e>
	list->head = node;
   185b6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   185b8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   185ba:	e00a      	b.n	185d2 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   185bc:	6144      	str	r4, [r0, #20]
   185be:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   185c2:	f000 fac9 	bl	18b58 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   185c6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   185c8:	4640      	mov	r0, r8
   185ca:	f000 fed1 	bl	19370 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   185ce:	2c00      	cmp	r4, #0
   185d0:	d1ee      	bne.n	185b0 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   185d2:	2104      	movs	r1, #4
   185d4:	f105 0014 	add.w	r0, r5, #20
   185d8:	f005 fe55 	bl	1e286 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   185dc:	4638      	mov	r0, r7
   185de:	4649      	mov	r1, r9
   185e0:	f000 f8e6 	bl	187b0 <z_reschedule>
	return 0;
   185e4:	2000      	movs	r0, #0
}
   185e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   185ea:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   185ec:	f003 0303 	and.w	r3, r3, #3
   185f0:	431c      	orrs	r4, r3
   185f2:	6014      	str	r4, [r2, #0]
}
   185f4:	e7e0      	b.n	185b8 <k_queue_append_list+0x5c>
		return -EINVAL;
   185f6:	f06f 0015 	mvn.w	r0, #21
   185fa:	e7f4      	b.n	185e6 <k_queue_append_list+0x8a>
   185fc:	0001fb83 	.word	0x0001fb83
   18600:	0001fb49 	.word	0x0001fb49

00018604 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18608:	4605      	mov	r5, r0
   1860a:	4690      	mov	r8, r2
   1860c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1860e:	f100 0608 	add.w	r6, r0, #8
   18612:	f04f 0320 	mov.w	r3, #32
   18616:	f3ef 8911 	mrs	r9, BASEPRI
   1861a:	f383 8811 	msr	BASEPRI, r3
   1861e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18622:	4630      	mov	r0, r6
   18624:	f001 fa46 	bl	19ab4 <z_spin_lock_valid>
   18628:	b940      	cbnz	r0, 1863c <z_impl_k_queue_get+0x38>
   1862a:	4921      	ldr	r1, [pc, #132]	; (186b0 <z_impl_k_queue_get+0xac>)
   1862c:	4821      	ldr	r0, [pc, #132]	; (186b4 <z_impl_k_queue_get+0xb0>)
   1862e:	227c      	movs	r2, #124	; 0x7c
   18630:	f002 fa2c 	bl	1aa8c <printk>
   18634:	217c      	movs	r1, #124	; 0x7c
   18636:	481e      	ldr	r0, [pc, #120]	; (186b0 <z_impl_k_queue_get+0xac>)
   18638:	f002 fcce 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1863c:	4630      	mov	r0, r6
   1863e:	f001 fa55 	bl	19aec <z_spin_lock_set_owner>
	return list->head;
   18642:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18644:	b314      	cbz	r4, 1868c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18646:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18648:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1864a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1864e:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18650:	4620      	mov	r0, r4
   18652:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   18656:	602b      	str	r3, [r5, #0]
	list->tail = node;
   18658:	bf08      	it	eq
   1865a:	606b      	streq	r3, [r5, #4]
   1865c:	f005 fcb3 	bl	1dfc6 <z_queue_node_peek>
   18660:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18662:	4630      	mov	r0, r6
   18664:	f001 fa34 	bl	19ad0 <z_spin_unlock_valid>
   18668:	b940      	cbnz	r0, 1867c <z_impl_k_queue_get+0x78>
   1866a:	4911      	ldr	r1, [pc, #68]	; (186b0 <z_impl_k_queue_get+0xac>)
   1866c:	4811      	ldr	r0, [pc, #68]	; (186b4 <z_impl_k_queue_get+0xb0>)
   1866e:	22a7      	movs	r2, #167	; 0xa7
   18670:	f002 fa0c 	bl	1aa8c <printk>
   18674:	21a7      	movs	r1, #167	; 0xa7
   18676:	480e      	ldr	r0, [pc, #56]	; (186b0 <z_impl_k_queue_get+0xac>)
   18678:	f002 fcae 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1867c:	f389 8811 	msr	BASEPRI, r9
   18680:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18684:	4620      	mov	r0, r4
   18686:	b003      	add	sp, #12
   18688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1868c:	ea58 0307 	orrs.w	r3, r8, r7
   18690:	d0e7      	beq.n	18662 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18692:	4649      	mov	r1, r9
   18694:	4630      	mov	r0, r6
   18696:	e9cd 8700 	strd	r8, r7, [sp]
   1869a:	f105 020c 	add.w	r2, r5, #12
   1869e:	f000 fdc5 	bl	1922c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   186a2:	2800      	cmp	r0, #0
   186a4:	d1ee      	bne.n	18684 <z_impl_k_queue_get+0x80>
   186a6:	4b04      	ldr	r3, [pc, #16]	; (186b8 <z_impl_k_queue_get+0xb4>)
   186a8:	689b      	ldr	r3, [r3, #8]
   186aa:	695c      	ldr	r4, [r3, #20]
   186ac:	e7ea      	b.n	18684 <z_impl_k_queue_get+0x80>
   186ae:	bf00      	nop
   186b0:	0001fb83 	.word	0x0001fb83
   186b4:	0001fb49 	.word	0x0001fb49
   186b8:	2000a27c 	.word	0x2000a27c

000186bc <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   186bc:	6883      	ldr	r3, [r0, #8]
{
   186be:	b510      	push	{r4, lr}
   186c0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   186c2:	b953      	cbnz	r3, 186da <pended_on+0x1e>
   186c4:	4906      	ldr	r1, [pc, #24]	; (186e0 <pended_on+0x24>)
   186c6:	4807      	ldr	r0, [pc, #28]	; (186e4 <pended_on+0x28>)
   186c8:	f44f 7201 	mov.w	r2, #516	; 0x204
   186cc:	f002 f9de 	bl	1aa8c <printk>
   186d0:	f44f 7101 	mov.w	r1, #516	; 0x204
   186d4:	4802      	ldr	r0, [pc, #8]	; (186e0 <pended_on+0x24>)
   186d6:	f002 fc7f 	bl	1afd8 <assert_post_action>

	return thread->base.pended_on;
}
   186da:	68a0      	ldr	r0, [r4, #8]
   186dc:	bd10      	pop	{r4, pc}
   186de:	bf00      	nop
   186e0:	0002290e 	.word	0x0002290e
   186e4:	0001fb49 	.word	0x0001fb49

000186e8 <z_reset_time_slice>:
{
   186e8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   186ea:	4c08      	ldr	r4, [pc, #32]	; (1870c <z_reset_time_slice+0x24>)
   186ec:	6823      	ldr	r3, [r4, #0]
   186ee:	b15b      	cbz	r3, 18708 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   186f0:	f7f4 f87a 	bl	c7e8 <z_clock_elapsed>
   186f4:	4603      	mov	r3, r0
   186f6:	6820      	ldr	r0, [r4, #0]
   186f8:	4a05      	ldr	r2, [pc, #20]	; (18710 <z_reset_time_slice+0x28>)
   186fa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   186fc:	2100      	movs	r1, #0
}
   186fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18702:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   18704:	f001 bc8c 	b.w	1a020 <z_set_timeout_expiry>
}
   18708:	bd10      	pop	{r4, pc}
   1870a:	bf00      	nop
   1870c:	2000a2bc 	.word	0x2000a2bc
   18710:	2000a27c 	.word	0x2000a27c

00018714 <k_sched_time_slice_set>:
{
   18714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18716:	4604      	mov	r4, r0
   18718:	460d      	mov	r5, r1
	__asm__ volatile(
   1871a:	f04f 0320 	mov.w	r3, #32
   1871e:	f3ef 8711 	mrs	r7, BASEPRI
   18722:	f383 8811 	msr	BASEPRI, r3
   18726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1872a:	481b      	ldr	r0, [pc, #108]	; (18798 <k_sched_time_slice_set+0x84>)
   1872c:	f001 f9c2 	bl	19ab4 <z_spin_lock_valid>
   18730:	b940      	cbnz	r0, 18744 <k_sched_time_slice_set+0x30>
   18732:	491a      	ldr	r1, [pc, #104]	; (1879c <k_sched_time_slice_set+0x88>)
   18734:	481a      	ldr	r0, [pc, #104]	; (187a0 <k_sched_time_slice_set+0x8c>)
   18736:	227c      	movs	r2, #124	; 0x7c
   18738:	f002 f9a8 	bl	1aa8c <printk>
   1873c:	217c      	movs	r1, #124	; 0x7c
   1873e:	4817      	ldr	r0, [pc, #92]	; (1879c <k_sched_time_slice_set+0x88>)
   18740:	f002 fc4a 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18744:	4814      	ldr	r0, [pc, #80]	; (18798 <k_sched_time_slice_set+0x84>)
   18746:	f001 f9d1 	bl	19aec <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1874a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1874e:	2100      	movs	r1, #0
   18750:	f240 30e7 	movw	r0, #999	; 0x3e7
   18754:	4b13      	ldr	r3, [pc, #76]	; (187a4 <k_sched_time_slice_set+0x90>)
   18756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1875a:	6159      	str	r1, [r3, #20]
   1875c:	2300      	movs	r3, #0
   1875e:	fbe4 0106 	umlal	r0, r1, r4, r6
   18762:	f7f0 f9e3 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   18766:	4b10      	ldr	r3, [pc, #64]	; (187a8 <k_sched_time_slice_set+0x94>)
   18768:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1876a:	4b10      	ldr	r3, [pc, #64]	; (187ac <k_sched_time_slice_set+0x98>)
   1876c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1876e:	f7ff ffbb 	bl	186e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18772:	4809      	ldr	r0, [pc, #36]	; (18798 <k_sched_time_slice_set+0x84>)
   18774:	f001 f9ac 	bl	19ad0 <z_spin_unlock_valid>
   18778:	b940      	cbnz	r0, 1878c <k_sched_time_slice_set+0x78>
   1877a:	4908      	ldr	r1, [pc, #32]	; (1879c <k_sched_time_slice_set+0x88>)
   1877c:	4808      	ldr	r0, [pc, #32]	; (187a0 <k_sched_time_slice_set+0x8c>)
   1877e:	22a7      	movs	r2, #167	; 0xa7
   18780:	f002 f984 	bl	1aa8c <printk>
   18784:	21a7      	movs	r1, #167	; 0xa7
   18786:	4805      	ldr	r0, [pc, #20]	; (1879c <k_sched_time_slice_set+0x88>)
   18788:	f002 fc26 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1878c:	f387 8811 	msr	BASEPRI, r7
   18790:	f3bf 8f6f 	isb	sy
}
   18794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18796:	bf00      	nop
   18798:	2000a2b4 	.word	0x2000a2b4
   1879c:	0001fb83 	.word	0x0001fb83
   187a0:	0001fb49 	.word	0x0001fb49
   187a4:	2000a27c 	.word	0x2000a27c
   187a8:	2000a2bc 	.word	0x2000a2bc
   187ac:	2000a2b8 	.word	0x2000a2b8

000187b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   187b0:	b510      	push	{r4, lr}
   187b2:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   187b4:	460c      	mov	r4, r1
   187b6:	b9c1      	cbnz	r1, 187ea <z_reschedule+0x3a>
   187b8:	f3ef 8205 	mrs	r2, IPSR
   187bc:	b9aa      	cbnz	r2, 187ea <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   187be:	4a14      	ldr	r2, [pc, #80]	; (18810 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   187c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
   187c2:	6892      	ldr	r2, [r2, #8]
   187c4:	4291      	cmp	r1, r2
   187c6:	d010      	beq.n	187ea <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187c8:	f001 f982 	bl	19ad0 <z_spin_unlock_valid>
   187cc:	b940      	cbnz	r0, 187e0 <z_reschedule+0x30>
   187ce:	4911      	ldr	r1, [pc, #68]	; (18814 <z_reschedule+0x64>)
   187d0:	4811      	ldr	r0, [pc, #68]	; (18818 <z_reschedule+0x68>)
   187d2:	22be      	movs	r2, #190	; 0xbe
   187d4:	f002 f95a 	bl	1aa8c <printk>
   187d8:	21be      	movs	r1, #190	; 0xbe
   187da:	480e      	ldr	r0, [pc, #56]	; (18814 <z_reschedule+0x64>)
   187dc:	f002 fbfc 	bl	1afd8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   187e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   187e4:	2000      	movs	r0, #0
   187e6:	f7f5 b9ad 	b.w	db44 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187ea:	4618      	mov	r0, r3
   187ec:	f001 f970 	bl	19ad0 <z_spin_unlock_valid>
   187f0:	b940      	cbnz	r0, 18804 <z_reschedule+0x54>
   187f2:	4908      	ldr	r1, [pc, #32]	; (18814 <z_reschedule+0x64>)
   187f4:	4808      	ldr	r0, [pc, #32]	; (18818 <z_reschedule+0x68>)
   187f6:	22a7      	movs	r2, #167	; 0xa7
   187f8:	f002 f948 	bl	1aa8c <printk>
   187fc:	21a7      	movs	r1, #167	; 0xa7
   187fe:	4805      	ldr	r0, [pc, #20]	; (18814 <z_reschedule+0x64>)
   18800:	f002 fbea 	bl	1afd8 <assert_post_action>
   18804:	f384 8811 	msr	BASEPRI, r4
   18808:	f3bf 8f6f 	isb	sy
   1880c:	bd10      	pop	{r4, pc}
   1880e:	bf00      	nop
   18810:	2000a27c 	.word	0x2000a27c
   18814:	0001fb83 	.word	0x0001fb83
   18818:	0001fb49 	.word	0x0001fb49

0001881c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1881c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1881e:	f04f 0320 	mov.w	r3, #32
   18822:	f3ef 8511 	mrs	r5, BASEPRI
   18826:	f383 8811 	msr	BASEPRI, r3
   1882a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1882e:	4822      	ldr	r0, [pc, #136]	; (188b8 <k_sched_lock+0x9c>)
   18830:	f001 f940 	bl	19ab4 <z_spin_lock_valid>
   18834:	b940      	cbnz	r0, 18848 <k_sched_lock+0x2c>
   18836:	4921      	ldr	r1, [pc, #132]	; (188bc <k_sched_lock+0xa0>)
   18838:	4821      	ldr	r0, [pc, #132]	; (188c0 <k_sched_lock+0xa4>)
   1883a:	227c      	movs	r2, #124	; 0x7c
   1883c:	f002 f926 	bl	1aa8c <printk>
   18840:	217c      	movs	r1, #124	; 0x7c
   18842:	481e      	ldr	r0, [pc, #120]	; (188bc <k_sched_lock+0xa0>)
   18844:	f002 fbc8 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18848:	481b      	ldr	r0, [pc, #108]	; (188b8 <k_sched_lock+0x9c>)
   1884a:	f001 f94f 	bl	19aec <z_spin_lock_set_owner>
   1884e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18852:	b153      	cbz	r3, 1886a <k_sched_lock+0x4e>
   18854:	491b      	ldr	r1, [pc, #108]	; (188c4 <k_sched_lock+0xa8>)
   18856:	481a      	ldr	r0, [pc, #104]	; (188c0 <k_sched_lock+0xa4>)
   18858:	f44f 7289 	mov.w	r2, #274	; 0x112
   1885c:	f002 f916 	bl	1aa8c <printk>
   18860:	f44f 7189 	mov.w	r1, #274	; 0x112
   18864:	4817      	ldr	r0, [pc, #92]	; (188c4 <k_sched_lock+0xa8>)
   18866:	f002 fbb7 	bl	1afd8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1886a:	4c17      	ldr	r4, [pc, #92]	; (188c8 <k_sched_lock+0xac>)
   1886c:	68a3      	ldr	r3, [r4, #8]
   1886e:	7bdb      	ldrb	r3, [r3, #15]
   18870:	2b01      	cmp	r3, #1
   18872:	d10a      	bne.n	1888a <k_sched_lock+0x6e>
   18874:	4913      	ldr	r1, [pc, #76]	; (188c4 <k_sched_lock+0xa8>)
   18876:	4812      	ldr	r0, [pc, #72]	; (188c0 <k_sched_lock+0xa4>)
   18878:	f240 1213 	movw	r2, #275	; 0x113
   1887c:	f002 f906 	bl	1aa8c <printk>
   18880:	f240 1113 	movw	r1, #275	; 0x113
   18884:	480f      	ldr	r0, [pc, #60]	; (188c4 <k_sched_lock+0xa8>)
   18886:	f002 fba7 	bl	1afd8 <assert_post_action>
	--_current->base.sched_locked;
   1888a:	68a2      	ldr	r2, [r4, #8]
   1888c:	7bd3      	ldrb	r3, [r2, #15]
   1888e:	3b01      	subs	r3, #1
   18890:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18892:	4809      	ldr	r0, [pc, #36]	; (188b8 <k_sched_lock+0x9c>)
   18894:	f001 f91c 	bl	19ad0 <z_spin_unlock_valid>
   18898:	b940      	cbnz	r0, 188ac <k_sched_lock+0x90>
   1889a:	4908      	ldr	r1, [pc, #32]	; (188bc <k_sched_lock+0xa0>)
   1889c:	4808      	ldr	r0, [pc, #32]	; (188c0 <k_sched_lock+0xa4>)
   1889e:	22a7      	movs	r2, #167	; 0xa7
   188a0:	f002 f8f4 	bl	1aa8c <printk>
   188a4:	21a7      	movs	r1, #167	; 0xa7
   188a6:	4805      	ldr	r0, [pc, #20]	; (188bc <k_sched_lock+0xa0>)
   188a8:	f002 fb96 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   188ac:	f385 8811 	msr	BASEPRI, r5
   188b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   188b4:	bd38      	pop	{r3, r4, r5, pc}
   188b6:	bf00      	nop
   188b8:	2000a2b4 	.word	0x2000a2b4
   188bc:	0001fb83 	.word	0x0001fb83
   188c0:	0001fb49 	.word	0x0001fb49
   188c4:	000228e3 	.word	0x000228e3
   188c8:	2000a27c 	.word	0x2000a27c

000188cc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   188cc:	4b11      	ldr	r3, [pc, #68]	; (18914 <z_priq_dumb_remove+0x48>)
{
   188ce:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   188d0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   188d4:	4282      	cmp	r2, r0
{
   188d6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   188d8:	d105      	bne.n	188e6 <z_priq_dumb_remove+0x1a>
   188da:	689b      	ldr	r3, [r3, #8]
   188dc:	428b      	cmp	r3, r1
   188de:	d102      	bne.n	188e6 <z_priq_dumb_remove+0x1a>
   188e0:	7b4b      	ldrb	r3, [r1, #13]
   188e2:	06db      	lsls	r3, r3, #27
   188e4:	d114      	bne.n	18910 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   188e6:	4b0c      	ldr	r3, [pc, #48]	; (18918 <z_priq_dumb_remove+0x4c>)
   188e8:	429c      	cmp	r4, r3
   188ea:	d10a      	bne.n	18902 <z_priq_dumb_remove+0x36>
   188ec:	490b      	ldr	r1, [pc, #44]	; (1891c <z_priq_dumb_remove+0x50>)
   188ee:	480c      	ldr	r0, [pc, #48]	; (18920 <z_priq_dumb_remove+0x54>)
   188f0:	f240 32da 	movw	r2, #986	; 0x3da
   188f4:	f002 f8ca 	bl	1aa8c <printk>
   188f8:	f240 31da 	movw	r1, #986	; 0x3da
   188fc:	4807      	ldr	r0, [pc, #28]	; (1891c <z_priq_dumb_remove+0x50>)
   188fe:	f002 fb6b 	bl	1afd8 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   18902:	e9d4 3200 	ldrd	r3, r2, [r4]
   18906:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18908:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1890a:	2300      	movs	r3, #0
	node->prev = NULL;
   1890c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   18910:	bd10      	pop	{r4, pc}
   18912:	bf00      	nop
   18914:	2000a27c 	.word	0x2000a27c
   18918:	200097c0 	.word	0x200097c0
   1891c:	0002290e 	.word	0x0002290e
   18920:	0001fb49 	.word	0x0001fb49

00018924 <z_unpend_thread>:
{
   18924:	b538      	push	{r3, r4, r5, lr}
   18926:	4604      	mov	r4, r0
	__asm__ volatile(
   18928:	f04f 0320 	mov.w	r3, #32
   1892c:	f3ef 8511 	mrs	r5, BASEPRI
   18930:	f383 8811 	msr	BASEPRI, r3
   18934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18938:	4814      	ldr	r0, [pc, #80]	; (1898c <z_unpend_thread+0x68>)
   1893a:	f001 f8bb 	bl	19ab4 <z_spin_lock_valid>
   1893e:	b940      	cbnz	r0, 18952 <z_unpend_thread+0x2e>
   18940:	4913      	ldr	r1, [pc, #76]	; (18990 <z_unpend_thread+0x6c>)
   18942:	4814      	ldr	r0, [pc, #80]	; (18994 <z_unpend_thread+0x70>)
   18944:	227c      	movs	r2, #124	; 0x7c
   18946:	f002 f8a1 	bl	1aa8c <printk>
   1894a:	217c      	movs	r1, #124	; 0x7c
   1894c:	4810      	ldr	r0, [pc, #64]	; (18990 <z_unpend_thread+0x6c>)
   1894e:	f002 fb43 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18952:	480e      	ldr	r0, [pc, #56]	; (1898c <z_unpend_thread+0x68>)
   18954:	f001 f8ca 	bl	19aec <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18958:	4620      	mov	r0, r4
   1895a:	f005 fb81 	bl	1e060 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1895e:	480b      	ldr	r0, [pc, #44]	; (1898c <z_unpend_thread+0x68>)
   18960:	f001 f8b6 	bl	19ad0 <z_spin_unlock_valid>
   18964:	b940      	cbnz	r0, 18978 <z_unpend_thread+0x54>
   18966:	490a      	ldr	r1, [pc, #40]	; (18990 <z_unpend_thread+0x6c>)
   18968:	480a      	ldr	r0, [pc, #40]	; (18994 <z_unpend_thread+0x70>)
   1896a:	22a7      	movs	r2, #167	; 0xa7
   1896c:	f002 f88e 	bl	1aa8c <printk>
   18970:	21a7      	movs	r1, #167	; 0xa7
   18972:	4807      	ldr	r0, [pc, #28]	; (18990 <z_unpend_thread+0x6c>)
   18974:	f002 fb30 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18978:	f385 8811 	msr	BASEPRI, r5
   1897c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18980:	f104 0018 	add.w	r0, r4, #24
}
   18984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18988:	f001 bad8 	b.w	19f3c <z_abort_timeout>
   1898c:	2000a2b4 	.word	0x2000a2b4
   18990:	0001fb83 	.word	0x0001fb83
   18994:	0001fb49 	.word	0x0001fb49

00018998 <update_cache>:
{
   18998:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1899a:	4c19      	ldr	r4, [pc, #100]	; (18a00 <update_cache+0x68>)
{
   1899c:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1899e:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   189a0:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   189a2:	b143      	cbz	r3, 189b6 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   189a4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   189a6:	b1a8      	cbz	r0, 189d4 <update_cache+0x3c>
		if (thread != _current) {
   189a8:	68a3      	ldr	r3, [r4, #8]
   189aa:	42ab      	cmp	r3, r5
   189ac:	d001      	beq.n	189b2 <update_cache+0x1a>
			z_reset_time_slice();
   189ae:	f7ff fe9b 	bl	186e8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   189b2:	62a5      	str	r5, [r4, #40]	; 0x28
}
   189b4:	e023      	b.n	189fe <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   189b6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   189ba:	f005 fb5f 	bl	1e07c <z_priq_dumb_best>
   189be:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   189c0:	7b4b      	ldrb	r3, [r1, #13]
   189c2:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   189c4:	bf44      	itt	mi
   189c6:	f043 0308 	orrmi.w	r3, r3, #8
   189ca:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   189cc:	b905      	cbnz	r5, 189d0 <update_cache+0x38>
   189ce:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   189d0:	b152      	cbz	r2, 189e8 <update_cache+0x50>
   189d2:	e7e9      	b.n	189a8 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   189d4:	b941      	cbnz	r1, 189e8 <update_cache+0x50>
   189d6:	490b      	ldr	r1, [pc, #44]	; (18a04 <update_cache+0x6c>)
   189d8:	480b      	ldr	r0, [pc, #44]	; (18a08 <update_cache+0x70>)
   189da:	2283      	movs	r2, #131	; 0x83
   189dc:	f002 f856 	bl	1aa8c <printk>
   189e0:	2183      	movs	r1, #131	; 0x83
   189e2:	4808      	ldr	r0, [pc, #32]	; (18a04 <update_cache+0x6c>)
   189e4:	f002 faf8 	bl	1afd8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   189e8:	68a3      	ldr	r3, [r4, #8]
   189ea:	7b5a      	ldrb	r2, [r3, #13]
   189ec:	06d2      	lsls	r2, r2, #27
   189ee:	d1db      	bne.n	189a8 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   189f0:	69aa      	ldr	r2, [r5, #24]
   189f2:	2a00      	cmp	r2, #0
   189f4:	d1d8      	bne.n	189a8 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   189f6:	89da      	ldrh	r2, [r3, #14]
   189f8:	2a7f      	cmp	r2, #127	; 0x7f
   189fa:	d9d5      	bls.n	189a8 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   189fc:	62a3      	str	r3, [r4, #40]	; 0x28
}
   189fe:	bd38      	pop	{r3, r4, r5, pc}
   18a00:	2000a27c 	.word	0x2000a27c
   18a04:	0002290e 	.word	0x0002290e
   18a08:	0001fb49 	.word	0x0001fb49

00018a0c <k_sched_unlock>:
{
   18a0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18a0e:	f04f 0320 	mov.w	r3, #32
   18a12:	f3ef 8511 	mrs	r5, BASEPRI
   18a16:	f383 8811 	msr	BASEPRI, r3
   18a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a1e:	4824      	ldr	r0, [pc, #144]	; (18ab0 <k_sched_unlock+0xa4>)
   18a20:	f001 f848 	bl	19ab4 <z_spin_lock_valid>
   18a24:	b940      	cbnz	r0, 18a38 <k_sched_unlock+0x2c>
   18a26:	4923      	ldr	r1, [pc, #140]	; (18ab4 <k_sched_unlock+0xa8>)
   18a28:	4823      	ldr	r0, [pc, #140]	; (18ab8 <k_sched_unlock+0xac>)
   18a2a:	227c      	movs	r2, #124	; 0x7c
   18a2c:	f002 f82e 	bl	1aa8c <printk>
   18a30:	217c      	movs	r1, #124	; 0x7c
   18a32:	4820      	ldr	r0, [pc, #128]	; (18ab4 <k_sched_unlock+0xa8>)
   18a34:	f002 fad0 	bl	1afd8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   18a38:	4c20      	ldr	r4, [pc, #128]	; (18abc <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   18a3a:	481d      	ldr	r0, [pc, #116]	; (18ab0 <k_sched_unlock+0xa4>)
   18a3c:	f001 f856 	bl	19aec <z_spin_lock_set_owner>
   18a40:	68a3      	ldr	r3, [r4, #8]
   18a42:	7bdb      	ldrb	r3, [r3, #15]
   18a44:	b953      	cbnz	r3, 18a5c <k_sched_unlock+0x50>
   18a46:	491e      	ldr	r1, [pc, #120]	; (18ac0 <k_sched_unlock+0xb4>)
   18a48:	481b      	ldr	r0, [pc, #108]	; (18ab8 <k_sched_unlock+0xac>)
   18a4a:	f44f 725d 	mov.w	r2, #884	; 0x374
   18a4e:	f002 f81d 	bl	1aa8c <printk>
   18a52:	f44f 715d 	mov.w	r1, #884	; 0x374
   18a56:	481a      	ldr	r0, [pc, #104]	; (18ac0 <k_sched_unlock+0xb4>)
   18a58:	f002 fabe 	bl	1afd8 <assert_post_action>
   18a5c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   18a60:	b153      	cbz	r3, 18a78 <k_sched_unlock+0x6c>
   18a62:	4917      	ldr	r1, [pc, #92]	; (18ac0 <k_sched_unlock+0xb4>)
   18a64:	4814      	ldr	r0, [pc, #80]	; (18ab8 <k_sched_unlock+0xac>)
   18a66:	f240 3275 	movw	r2, #885	; 0x375
   18a6a:	f002 f80f 	bl	1aa8c <printk>
   18a6e:	f240 3175 	movw	r1, #885	; 0x375
   18a72:	4813      	ldr	r0, [pc, #76]	; (18ac0 <k_sched_unlock+0xb4>)
   18a74:	f002 fab0 	bl	1afd8 <assert_post_action>
		++_current->base.sched_locked;
   18a78:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   18a7a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   18a7c:	7bd3      	ldrb	r3, [r2, #15]
   18a7e:	3301      	adds	r3, #1
   18a80:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18a82:	f7ff ff89 	bl	18998 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a86:	480a      	ldr	r0, [pc, #40]	; (18ab0 <k_sched_unlock+0xa4>)
   18a88:	f001 f822 	bl	19ad0 <z_spin_unlock_valid>
   18a8c:	b940      	cbnz	r0, 18aa0 <k_sched_unlock+0x94>
   18a8e:	4909      	ldr	r1, [pc, #36]	; (18ab4 <k_sched_unlock+0xa8>)
   18a90:	4809      	ldr	r0, [pc, #36]	; (18ab8 <k_sched_unlock+0xac>)
   18a92:	22a7      	movs	r2, #167	; 0xa7
   18a94:	f001 fffa 	bl	1aa8c <printk>
   18a98:	21a7      	movs	r1, #167	; 0xa7
   18a9a:	4806      	ldr	r0, [pc, #24]	; (18ab4 <k_sched_unlock+0xa8>)
   18a9c:	f002 fa9c 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18aa0:	f385 8811 	msr	BASEPRI, r5
   18aa4:	f3bf 8f6f 	isb	sy
}
   18aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   18aac:	f005 bace 	b.w	1e04c <z_reschedule_unlocked>
   18ab0:	2000a2b4 	.word	0x2000a2b4
   18ab4:	0001fb83 	.word	0x0001fb83
   18ab8:	0001fb49 	.word	0x0001fb49
   18abc:	2000a27c 	.word	0x2000a27c
   18ac0:	0002290e 	.word	0x0002290e

00018ac4 <ready_thread>:
{
   18ac4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18ac6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   18aca:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18acc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   18ace:	7b43      	ldrb	r3, [r0, #13]
   18ad0:	db39      	blt.n	18b46 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18ad2:	06db      	lsls	r3, r3, #27
   18ad4:	d137      	bne.n	18b46 <ready_thread+0x82>
   18ad6:	6983      	ldr	r3, [r0, #24]
   18ad8:	2b00      	cmp	r3, #0
   18ada:	d134      	bne.n	18b46 <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18adc:	4b1a      	ldr	r3, [pc, #104]	; (18b48 <ready_thread+0x84>)
   18ade:	4298      	cmp	r0, r3
   18ae0:	d10a      	bne.n	18af8 <ready_thread+0x34>
   18ae2:	491a      	ldr	r1, [pc, #104]	; (18b4c <ready_thread+0x88>)
   18ae4:	481a      	ldr	r0, [pc, #104]	; (18b50 <ready_thread+0x8c>)
   18ae6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18aea:	f001 ffcf 	bl	1aa8c <printk>
   18aee:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18af2:	4816      	ldr	r0, [pc, #88]	; (18b4c <ready_thread+0x88>)
   18af4:	f002 fa70 	bl	1afd8 <assert_post_action>
	return list->head == list;
   18af8:	4a16      	ldr	r2, [pc, #88]	; (18b54 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18afa:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18afe:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b02:	4283      	cmp	r3, r0
   18b04:	d019      	beq.n	18b3a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b06:	b1c3      	cbz	r3, 18b3a <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   18b08:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18b0c:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18b10:	42ae      	cmp	r6, r5
   18b12:	dd0d      	ble.n	18b30 <ready_thread+0x6c>
	node->prev = successor->prev;
   18b14:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18b16:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18b1a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18b1c:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18b1e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   18b20:	2000      	movs	r0, #0
   18b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18b26:	7363      	strb	r3, [r4, #13]
}
   18b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   18b2c:	f7ff bf34 	b.w	18998 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18b30:	428b      	cmp	r3, r1
   18b32:	d002      	beq.n	18b3a <ready_thread+0x76>
   18b34:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b36:	2b00      	cmp	r3, #0
   18b38:	d1e8      	bne.n	18b0c <ready_thread+0x48>
	node->prev = list->tail;
   18b3a:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18b3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18b40:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b42:	6314      	str	r4, [r2, #48]	; 0x30
}
   18b44:	e7eb      	b.n	18b1e <ready_thread+0x5a>
}
   18b46:	bd70      	pop	{r4, r5, r6, pc}
   18b48:	200097c0 	.word	0x200097c0
   18b4c:	0002290e 	.word	0x0002290e
   18b50:	0001fb49 	.word	0x0001fb49
   18b54:	2000a27c 	.word	0x2000a27c

00018b58 <z_ready_thread>:
{
   18b58:	b538      	push	{r3, r4, r5, lr}
   18b5a:	4604      	mov	r4, r0
	__asm__ volatile(
   18b5c:	f04f 0320 	mov.w	r3, #32
   18b60:	f3ef 8511 	mrs	r5, BASEPRI
   18b64:	f383 8811 	msr	BASEPRI, r3
   18b68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b6c:	4812      	ldr	r0, [pc, #72]	; (18bb8 <z_ready_thread+0x60>)
   18b6e:	f000 ffa1 	bl	19ab4 <z_spin_lock_valid>
   18b72:	b940      	cbnz	r0, 18b86 <z_ready_thread+0x2e>
   18b74:	4911      	ldr	r1, [pc, #68]	; (18bbc <z_ready_thread+0x64>)
   18b76:	4812      	ldr	r0, [pc, #72]	; (18bc0 <z_ready_thread+0x68>)
   18b78:	227c      	movs	r2, #124	; 0x7c
   18b7a:	f001 ff87 	bl	1aa8c <printk>
   18b7e:	217c      	movs	r1, #124	; 0x7c
   18b80:	480e      	ldr	r0, [pc, #56]	; (18bbc <z_ready_thread+0x64>)
   18b82:	f002 fa29 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18b86:	480c      	ldr	r0, [pc, #48]	; (18bb8 <z_ready_thread+0x60>)
   18b88:	f000 ffb0 	bl	19aec <z_spin_lock_set_owner>
		ready_thread(thread);
   18b8c:	4620      	mov	r0, r4
   18b8e:	f7ff ff99 	bl	18ac4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b92:	4809      	ldr	r0, [pc, #36]	; (18bb8 <z_ready_thread+0x60>)
   18b94:	f000 ff9c 	bl	19ad0 <z_spin_unlock_valid>
   18b98:	b940      	cbnz	r0, 18bac <z_ready_thread+0x54>
   18b9a:	4908      	ldr	r1, [pc, #32]	; (18bbc <z_ready_thread+0x64>)
   18b9c:	4808      	ldr	r0, [pc, #32]	; (18bc0 <z_ready_thread+0x68>)
   18b9e:	22a7      	movs	r2, #167	; 0xa7
   18ba0:	f001 ff74 	bl	1aa8c <printk>
   18ba4:	21a7      	movs	r1, #167	; 0xa7
   18ba6:	4805      	ldr	r0, [pc, #20]	; (18bbc <z_ready_thread+0x64>)
   18ba8:	f002 fa16 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18bac:	f385 8811 	msr	BASEPRI, r5
   18bb0:	f3bf 8f6f 	isb	sy
}
   18bb4:	bd38      	pop	{r3, r4, r5, pc}
   18bb6:	bf00      	nop
   18bb8:	2000a2b4 	.word	0x2000a2b4
   18bbc:	0001fb83 	.word	0x0001fb83
   18bc0:	0001fb49 	.word	0x0001fb49

00018bc4 <z_sched_start>:
{
   18bc4:	b538      	push	{r3, r4, r5, lr}
   18bc6:	4604      	mov	r4, r0
	__asm__ volatile(
   18bc8:	f04f 0320 	mov.w	r3, #32
   18bcc:	f3ef 8511 	mrs	r5, BASEPRI
   18bd0:	f383 8811 	msr	BASEPRI, r3
   18bd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18bd8:	4818      	ldr	r0, [pc, #96]	; (18c3c <z_sched_start+0x78>)
   18bda:	f000 ff6b 	bl	19ab4 <z_spin_lock_valid>
   18bde:	b940      	cbnz	r0, 18bf2 <z_sched_start+0x2e>
   18be0:	4917      	ldr	r1, [pc, #92]	; (18c40 <z_sched_start+0x7c>)
   18be2:	4818      	ldr	r0, [pc, #96]	; (18c44 <z_sched_start+0x80>)
   18be4:	227c      	movs	r2, #124	; 0x7c
   18be6:	f001 ff51 	bl	1aa8c <printk>
   18bea:	217c      	movs	r1, #124	; 0x7c
   18bec:	4814      	ldr	r0, [pc, #80]	; (18c40 <z_sched_start+0x7c>)
   18bee:	f002 f9f3 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18bf2:	4812      	ldr	r0, [pc, #72]	; (18c3c <z_sched_start+0x78>)
   18bf4:	f000 ff7a 	bl	19aec <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18bf8:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   18bfa:	075a      	lsls	r2, r3, #29
   18bfc:	d411      	bmi.n	18c22 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18bfe:	480f      	ldr	r0, [pc, #60]	; (18c3c <z_sched_start+0x78>)
   18c00:	f000 ff66 	bl	19ad0 <z_spin_unlock_valid>
   18c04:	b940      	cbnz	r0, 18c18 <z_sched_start+0x54>
   18c06:	490e      	ldr	r1, [pc, #56]	; (18c40 <z_sched_start+0x7c>)
   18c08:	480e      	ldr	r0, [pc, #56]	; (18c44 <z_sched_start+0x80>)
   18c0a:	22a7      	movs	r2, #167	; 0xa7
   18c0c:	f001 ff3e 	bl	1aa8c <printk>
   18c10:	21a7      	movs	r1, #167	; 0xa7
   18c12:	480b      	ldr	r0, [pc, #44]	; (18c40 <z_sched_start+0x7c>)
   18c14:	f002 f9e0 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18c18:	f385 8811 	msr	BASEPRI, r5
   18c1c:	f3bf 8f6f 	isb	sy
}
   18c20:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18c22:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   18c26:	4620      	mov	r0, r4
   18c28:	7363      	strb	r3, [r4, #13]
   18c2a:	f7ff ff4b 	bl	18ac4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18c2e:	4629      	mov	r1, r5
}
   18c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   18c34:	4801      	ldr	r0, [pc, #4]	; (18c3c <z_sched_start+0x78>)
   18c36:	f7ff bdbb 	b.w	187b0 <z_reschedule>
   18c3a:	bf00      	nop
   18c3c:	2000a2b4 	.word	0x2000a2b4
   18c40:	0001fb83 	.word	0x0001fb83
   18c44:	0001fb49 	.word	0x0001fb49

00018c48 <z_thread_timeout>:
{
   18c48:	b570      	push	{r4, r5, r6, lr}
   18c4a:	4604      	mov	r4, r0
	__asm__ volatile(
   18c4c:	f04f 0320 	mov.w	r3, #32
   18c50:	f3ef 8611 	mrs	r6, BASEPRI
   18c54:	f383 8811 	msr	BASEPRI, r3
   18c58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c5c:	4819      	ldr	r0, [pc, #100]	; (18cc4 <z_thread_timeout+0x7c>)
   18c5e:	f000 ff29 	bl	19ab4 <z_spin_lock_valid>
   18c62:	b940      	cbnz	r0, 18c76 <z_thread_timeout+0x2e>
   18c64:	4918      	ldr	r1, [pc, #96]	; (18cc8 <z_thread_timeout+0x80>)
   18c66:	4819      	ldr	r0, [pc, #100]	; (18ccc <z_thread_timeout+0x84>)
   18c68:	227c      	movs	r2, #124	; 0x7c
   18c6a:	f001 ff0f 	bl	1aa8c <printk>
   18c6e:	217c      	movs	r1, #124	; 0x7c
   18c70:	4815      	ldr	r0, [pc, #84]	; (18cc8 <z_thread_timeout+0x80>)
   18c72:	f002 f9b1 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c76:	4813      	ldr	r0, [pc, #76]	; (18cc4 <z_thread_timeout+0x7c>)
   18c78:	f000 ff38 	bl	19aec <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   18c7c:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   18c80:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   18c84:	b113      	cbz	r3, 18c8c <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   18c86:	4628      	mov	r0, r5
   18c88:	f005 f9ea 	bl	1e060 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18c8c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   18c90:	4628      	mov	r0, r5
   18c92:	f023 0314 	bic.w	r3, r3, #20
   18c96:	f804 3c0b 	strb.w	r3, [r4, #-11]
   18c9a:	f7ff ff13 	bl	18ac4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c9e:	4809      	ldr	r0, [pc, #36]	; (18cc4 <z_thread_timeout+0x7c>)
   18ca0:	f000 ff16 	bl	19ad0 <z_spin_unlock_valid>
   18ca4:	b940      	cbnz	r0, 18cb8 <z_thread_timeout+0x70>
   18ca6:	4908      	ldr	r1, [pc, #32]	; (18cc8 <z_thread_timeout+0x80>)
   18ca8:	4808      	ldr	r0, [pc, #32]	; (18ccc <z_thread_timeout+0x84>)
   18caa:	22a7      	movs	r2, #167	; 0xa7
   18cac:	f001 feee 	bl	1aa8c <printk>
   18cb0:	21a7      	movs	r1, #167	; 0xa7
   18cb2:	4805      	ldr	r0, [pc, #20]	; (18cc8 <z_thread_timeout+0x80>)
   18cb4:	f002 f990 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18cb8:	f386 8811 	msr	BASEPRI, r6
   18cbc:	f3bf 8f6f 	isb	sy
}
   18cc0:	bd70      	pop	{r4, r5, r6, pc}
   18cc2:	bf00      	nop
   18cc4:	2000a2b4 	.word	0x2000a2b4
   18cc8:	0001fb83 	.word	0x0001fb83
   18ccc:	0001fb49 	.word	0x0001fb49

00018cd0 <move_thread_to_end_of_prio_q>:
{
   18cd0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18cd2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18cd6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18cd8:	2b00      	cmp	r3, #0
   18cda:	da03      	bge.n	18ce4 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18cdc:	4601      	mov	r1, r0
   18cde:	481d      	ldr	r0, [pc, #116]	; (18d54 <move_thread_to_end_of_prio_q+0x84>)
   18ce0:	f7ff fdf4 	bl	188cc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18ce4:	4b1c      	ldr	r3, [pc, #112]	; (18d58 <move_thread_to_end_of_prio_q+0x88>)
   18ce6:	429c      	cmp	r4, r3
   18ce8:	d10a      	bne.n	18d00 <move_thread_to_end_of_prio_q+0x30>
   18cea:	491c      	ldr	r1, [pc, #112]	; (18d5c <move_thread_to_end_of_prio_q+0x8c>)
   18cec:	481c      	ldr	r0, [pc, #112]	; (18d60 <move_thread_to_end_of_prio_q+0x90>)
   18cee:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18cf2:	f001 fecb 	bl	1aa8c <printk>
   18cf6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18cfa:	4818      	ldr	r0, [pc, #96]	; (18d5c <move_thread_to_end_of_prio_q+0x8c>)
   18cfc:	f002 f96c 	bl	1afd8 <assert_post_action>
	return list->head == list;
   18d00:	4a18      	ldr	r2, [pc, #96]	; (18d64 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d02:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18d06:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d0a:	4283      	cmp	r3, r0
   18d0c:	d01c      	beq.n	18d48 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d0e:	b1db      	cbz	r3, 18d48 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   18d10:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18d14:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18d18:	42ae      	cmp	r6, r5
   18d1a:	dd10      	ble.n	18d3e <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   18d1c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18d1e:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18d22:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18d24:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18d26:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   18d28:	6890      	ldr	r0, [r2, #8]
   18d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18d2e:	7363      	strb	r3, [r4, #13]
   18d30:	1b03      	subs	r3, r0, r4
   18d32:	4258      	negs	r0, r3
   18d34:	4158      	adcs	r0, r3
}
   18d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18d3a:	f7ff be2d 	b.w	18998 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18d3e:	428b      	cmp	r3, r1
   18d40:	d002      	beq.n	18d48 <move_thread_to_end_of_prio_q+0x78>
   18d42:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d44:	2b00      	cmp	r3, #0
   18d46:	d1e5      	bne.n	18d14 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   18d48:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18d4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18d4e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18d50:	6314      	str	r4, [r2, #48]	; 0x30
}
   18d52:	e7e8      	b.n	18d26 <move_thread_to_end_of_prio_q+0x56>
   18d54:	2000a2a8 	.word	0x2000a2a8
   18d58:	200097c0 	.word	0x200097c0
   18d5c:	0002290e 	.word	0x0002290e
   18d60:	0001fb49 	.word	0x0001fb49
   18d64:	2000a27c 	.word	0x2000a27c

00018d68 <z_time_slice>:
{
   18d68:	b538      	push	{r3, r4, r5, lr}
   18d6a:	4604      	mov	r4, r0
	__asm__ volatile(
   18d6c:	f04f 0320 	mov.w	r3, #32
   18d70:	f3ef 8511 	mrs	r5, BASEPRI
   18d74:	f383 8811 	msr	BASEPRI, r3
   18d78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d7c:	4824      	ldr	r0, [pc, #144]	; (18e10 <z_time_slice+0xa8>)
   18d7e:	f000 fe99 	bl	19ab4 <z_spin_lock_valid>
   18d82:	b940      	cbnz	r0, 18d96 <z_time_slice+0x2e>
   18d84:	4923      	ldr	r1, [pc, #140]	; (18e14 <z_time_slice+0xac>)
   18d86:	4824      	ldr	r0, [pc, #144]	; (18e18 <z_time_slice+0xb0>)
   18d88:	227c      	movs	r2, #124	; 0x7c
   18d8a:	f001 fe7f 	bl	1aa8c <printk>
   18d8e:	217c      	movs	r1, #124	; 0x7c
   18d90:	4820      	ldr	r0, [pc, #128]	; (18e14 <z_time_slice+0xac>)
   18d92:	f002 f921 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d96:	481e      	ldr	r0, [pc, #120]	; (18e10 <z_time_slice+0xa8>)
   18d98:	f000 fea8 	bl	19aec <z_spin_lock_set_owner>
	if (pending_current == _current) {
   18d9c:	4b1f      	ldr	r3, [pc, #124]	; (18e1c <z_time_slice+0xb4>)
   18d9e:	4a20      	ldr	r2, [pc, #128]	; (18e20 <z_time_slice+0xb8>)
   18da0:	6898      	ldr	r0, [r3, #8]
   18da2:	6811      	ldr	r1, [r2, #0]
   18da4:	4288      	cmp	r0, r1
   18da6:	d113      	bne.n	18dd0 <z_time_slice+0x68>
			z_reset_time_slice();
   18da8:	f7ff fc9e 	bl	186e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dac:	4818      	ldr	r0, [pc, #96]	; (18e10 <z_time_slice+0xa8>)
   18dae:	f000 fe8f 	bl	19ad0 <z_spin_unlock_valid>
   18db2:	b940      	cbnz	r0, 18dc6 <z_time_slice+0x5e>
   18db4:	4917      	ldr	r1, [pc, #92]	; (18e14 <z_time_slice+0xac>)
   18db6:	4818      	ldr	r0, [pc, #96]	; (18e18 <z_time_slice+0xb0>)
   18db8:	22a7      	movs	r2, #167	; 0xa7
   18dba:	f001 fe67 	bl	1aa8c <printk>
   18dbe:	21a7      	movs	r1, #167	; 0xa7
   18dc0:	4814      	ldr	r0, [pc, #80]	; (18e14 <z_time_slice+0xac>)
   18dc2:	f002 f909 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18dc6:	f385 8811 	msr	BASEPRI, r5
   18dca:	f3bf 8f6f 	isb	sy
}
   18dce:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18dd0:	2100      	movs	r1, #0
   18dd2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18dd4:	4a13      	ldr	r2, [pc, #76]	; (18e24 <z_time_slice+0xbc>)
   18dd6:	6812      	ldr	r2, [r2, #0]
   18dd8:	b1ba      	cbz	r2, 18e0a <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18dda:	89c2      	ldrh	r2, [r0, #14]
   18ddc:	2a7f      	cmp	r2, #127	; 0x7f
   18dde:	d814      	bhi.n	18e0a <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   18de0:	7b42      	ldrb	r2, [r0, #13]
   18de2:	06d2      	lsls	r2, r2, #27
   18de4:	d111      	bne.n	18e0a <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18de6:	4a10      	ldr	r2, [pc, #64]	; (18e28 <z_time_slice+0xc0>)
   18de8:	f990 100e 	ldrsb.w	r1, [r0, #14]
   18dec:	6812      	ldr	r2, [r2, #0]
   18dee:	4291      	cmp	r1, r2
   18df0:	db0b      	blt.n	18e0a <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18df2:	4a0e      	ldr	r2, [pc, #56]	; (18e2c <z_time_slice+0xc4>)
   18df4:	4290      	cmp	r0, r2
   18df6:	d008      	beq.n	18e0a <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   18df8:	695a      	ldr	r2, [r3, #20]
   18dfa:	42a2      	cmp	r2, r4
   18dfc:	dc02      	bgt.n	18e04 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   18dfe:	f7ff ff67 	bl	18cd0 <move_thread_to_end_of_prio_q>
   18e02:	e7d1      	b.n	18da8 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   18e04:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   18e06:	615a      	str	r2, [r3, #20]
   18e08:	e7d0      	b.n	18dac <z_time_slice+0x44>
   18e0a:	2200      	movs	r2, #0
   18e0c:	e7fb      	b.n	18e06 <z_time_slice+0x9e>
   18e0e:	bf00      	nop
   18e10:	2000a2b4 	.word	0x2000a2b4
   18e14:	0001fb83 	.word	0x0001fb83
   18e18:	0001fb49 	.word	0x0001fb49
   18e1c:	2000a27c 	.word	0x2000a27c
   18e20:	2000a2b0 	.word	0x2000a2b0
   18e24:	2000a2bc 	.word	0x2000a2bc
   18e28:	2000a2b8 	.word	0x2000a2b8
   18e2c:	200097c0 	.word	0x200097c0

00018e30 <z_impl_k_thread_suspend>:
{
   18e30:	b570      	push	{r4, r5, r6, lr}
   18e32:	4604      	mov	r4, r0
   18e34:	3018      	adds	r0, #24
   18e36:	f001 f881 	bl	19f3c <z_abort_timeout>
	__asm__ volatile(
   18e3a:	f04f 0320 	mov.w	r3, #32
   18e3e:	f3ef 8611 	mrs	r6, BASEPRI
   18e42:	f383 8811 	msr	BASEPRI, r3
   18e46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e4a:	4820      	ldr	r0, [pc, #128]	; (18ecc <z_impl_k_thread_suspend+0x9c>)
   18e4c:	f000 fe32 	bl	19ab4 <z_spin_lock_valid>
   18e50:	b940      	cbnz	r0, 18e64 <z_impl_k_thread_suspend+0x34>
   18e52:	491f      	ldr	r1, [pc, #124]	; (18ed0 <z_impl_k_thread_suspend+0xa0>)
   18e54:	481f      	ldr	r0, [pc, #124]	; (18ed4 <z_impl_k_thread_suspend+0xa4>)
   18e56:	227c      	movs	r2, #124	; 0x7c
   18e58:	f001 fe18 	bl	1aa8c <printk>
   18e5c:	217c      	movs	r1, #124	; 0x7c
   18e5e:	481c      	ldr	r0, [pc, #112]	; (18ed0 <z_impl_k_thread_suspend+0xa0>)
   18e60:	f002 f8ba 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e64:	4819      	ldr	r0, [pc, #100]	; (18ecc <z_impl_k_thread_suspend+0x9c>)
   18e66:	f000 fe41 	bl	19aec <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   18e6a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18e6e:	2b00      	cmp	r3, #0
   18e70:	da07      	bge.n	18e82 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18e72:	4621      	mov	r1, r4
   18e74:	4818      	ldr	r0, [pc, #96]	; (18ed8 <z_impl_k_thread_suspend+0xa8>)
   18e76:	f7ff fd29 	bl	188cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18e7a:	7b63      	ldrb	r3, [r4, #13]
   18e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18e80:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18e82:	4d16      	ldr	r5, [pc, #88]	; (18edc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18e84:	7b63      	ldrb	r3, [r4, #13]
   18e86:	68a8      	ldr	r0, [r5, #8]
   18e88:	f043 0310 	orr.w	r3, r3, #16
   18e8c:	7363      	strb	r3, [r4, #13]
   18e8e:	1b03      	subs	r3, r0, r4
   18e90:	4258      	negs	r0, r3
   18e92:	4158      	adcs	r0, r3
   18e94:	f7ff fd80 	bl	18998 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e98:	480c      	ldr	r0, [pc, #48]	; (18ecc <z_impl_k_thread_suspend+0x9c>)
   18e9a:	f000 fe19 	bl	19ad0 <z_spin_unlock_valid>
   18e9e:	b940      	cbnz	r0, 18eb2 <z_impl_k_thread_suspend+0x82>
   18ea0:	490b      	ldr	r1, [pc, #44]	; (18ed0 <z_impl_k_thread_suspend+0xa0>)
   18ea2:	480c      	ldr	r0, [pc, #48]	; (18ed4 <z_impl_k_thread_suspend+0xa4>)
   18ea4:	22a7      	movs	r2, #167	; 0xa7
   18ea6:	f001 fdf1 	bl	1aa8c <printk>
   18eaa:	21a7      	movs	r1, #167	; 0xa7
   18eac:	4808      	ldr	r0, [pc, #32]	; (18ed0 <z_impl_k_thread_suspend+0xa0>)
   18eae:	f002 f893 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18eb2:	f386 8811 	msr	BASEPRI, r6
   18eb6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18eba:	68ab      	ldr	r3, [r5, #8]
   18ebc:	42a3      	cmp	r3, r4
   18ebe:	d103      	bne.n	18ec8 <z_impl_k_thread_suspend+0x98>
}
   18ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18ec4:	f005 b8c2 	b.w	1e04c <z_reschedule_unlocked>
}
   18ec8:	bd70      	pop	{r4, r5, r6, pc}
   18eca:	bf00      	nop
   18ecc:	2000a2b4 	.word	0x2000a2b4
   18ed0:	0001fb83 	.word	0x0001fb83
   18ed4:	0001fb49 	.word	0x0001fb49
   18ed8:	2000a2a8 	.word	0x2000a2a8
   18edc:	2000a27c 	.word	0x2000a27c

00018ee0 <z_thread_single_abort>:
{
   18ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18ee4:	7b03      	ldrb	r3, [r0, #12]
{
   18ee6:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18ee8:	07dd      	lsls	r5, r3, #31
   18eea:	d50a      	bpl.n	18f02 <z_thread_single_abort+0x22>
   18eec:	4976      	ldr	r1, [pc, #472]	; (190c8 <z_thread_single_abort+0x1e8>)
   18eee:	4877      	ldr	r0, [pc, #476]	; (190cc <z_thread_single_abort+0x1ec>)
   18ef0:	f240 220d 	movw	r2, #525	; 0x20d
   18ef4:	f001 fdca 	bl	1aa8c <printk>
   18ef8:	f240 210d 	movw	r1, #525	; 0x20d
   18efc:	4872      	ldr	r0, [pc, #456]	; (190c8 <z_thread_single_abort+0x1e8>)
   18efe:	f002 f86b 	bl	1afd8 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   18f02:	4e73      	ldr	r6, [pc, #460]	; (190d0 <z_thread_single_abort+0x1f0>)
   18f04:	68b3      	ldr	r3, [r6, #8]
   18f06:	42a3      	cmp	r3, r4
   18f08:	d10d      	bne.n	18f26 <z_thread_single_abort+0x46>
   18f0a:	f3ef 8305 	mrs	r3, IPSR
   18f0e:	b953      	cbnz	r3, 18f26 <z_thread_single_abort+0x46>
   18f10:	496d      	ldr	r1, [pc, #436]	; (190c8 <z_thread_single_abort+0x1e8>)
   18f12:	486e      	ldr	r0, [pc, #440]	; (190cc <z_thread_single_abort+0x1ec>)
   18f14:	f240 220f 	movw	r2, #527	; 0x20f
   18f18:	f001 fdb8 	bl	1aa8c <printk>
   18f1c:	f240 210f 	movw	r1, #527	; 0x20f
   18f20:	4869      	ldr	r0, [pc, #420]	; (190c8 <z_thread_single_abort+0x1e8>)
   18f22:	f002 f859 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18f26:	f04f 0320 	mov.w	r3, #32
   18f2a:	f3ef 8511 	mrs	r5, BASEPRI
   18f2e:	f383 8811 	msr	BASEPRI, r3
   18f32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f36:	4867      	ldr	r0, [pc, #412]	; (190d4 <z_thread_single_abort+0x1f4>)
   18f38:	f000 fdbc 	bl	19ab4 <z_spin_lock_valid>
   18f3c:	b940      	cbnz	r0, 18f50 <z_thread_single_abort+0x70>
   18f3e:	4966      	ldr	r1, [pc, #408]	; (190d8 <z_thread_single_abort+0x1f8>)
   18f40:	4862      	ldr	r0, [pc, #392]	; (190cc <z_thread_single_abort+0x1ec>)
   18f42:	227c      	movs	r2, #124	; 0x7c
   18f44:	f001 fda2 	bl	1aa8c <printk>
   18f48:	217c      	movs	r1, #124	; 0x7c
   18f4a:	4863      	ldr	r0, [pc, #396]	; (190d8 <z_thread_single_abort+0x1f8>)
   18f4c:	f002 f844 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18f50:	4860      	ldr	r0, [pc, #384]	; (190d4 <z_thread_single_abort+0x1f4>)
   18f52:	f000 fdcb 	bl	19aec <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   18f56:	7b63      	ldrb	r3, [r4, #13]
   18f58:	f013 0f28 	tst.w	r3, #40	; 0x28
   18f5c:	d012      	beq.n	18f84 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f5e:	485d      	ldr	r0, [pc, #372]	; (190d4 <z_thread_single_abort+0x1f4>)
   18f60:	f000 fdb6 	bl	19ad0 <z_spin_unlock_valid>
   18f64:	b940      	cbnz	r0, 18f78 <z_thread_single_abort+0x98>
   18f66:	495c      	ldr	r1, [pc, #368]	; (190d8 <z_thread_single_abort+0x1f8>)
   18f68:	4858      	ldr	r0, [pc, #352]	; (190cc <z_thread_single_abort+0x1ec>)
   18f6a:	22a7      	movs	r2, #167	; 0xa7
   18f6c:	f001 fd8e 	bl	1aa8c <printk>
   18f70:	21a7      	movs	r1, #167	; 0xa7
   18f72:	4859      	ldr	r0, [pc, #356]	; (190d8 <z_thread_single_abort+0x1f8>)
   18f74:	f002 f830 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   18f78:	f385 8811 	msr	BASEPRI, r5
   18f7c:	f3bf 8f6f 	isb	sy
}
   18f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18f84:	f043 0320 	orr.w	r3, r3, #32
   18f88:	4852      	ldr	r0, [pc, #328]	; (190d4 <z_thread_single_abort+0x1f4>)
   18f8a:	7363      	strb	r3, [r4, #13]
   18f8c:	f000 fda0 	bl	19ad0 <z_spin_unlock_valid>
   18f90:	b940      	cbnz	r0, 18fa4 <z_thread_single_abort+0xc4>
   18f92:	4951      	ldr	r1, [pc, #324]	; (190d8 <z_thread_single_abort+0x1f8>)
   18f94:	484d      	ldr	r0, [pc, #308]	; (190cc <z_thread_single_abort+0x1ec>)
   18f96:	22a7      	movs	r2, #167	; 0xa7
   18f98:	f001 fd78 	bl	1aa8c <printk>
   18f9c:	21a7      	movs	r1, #167	; 0xa7
   18f9e:	484e      	ldr	r0, [pc, #312]	; (190d8 <z_thread_single_abort+0x1f8>)
   18fa0:	f002 f81a 	bl	1afd8 <assert_post_action>
   18fa4:	f385 8811 	msr	BASEPRI, r5
   18fa8:	f3bf 8f6f 	isb	sy
   18fac:	f104 0018 	add.w	r0, r4, #24
   18fb0:	f000 ffc4 	bl	19f3c <z_abort_timeout>
	__asm__ volatile(
   18fb4:	f04f 0320 	mov.w	r3, #32
   18fb8:	f3ef 8711 	mrs	r7, BASEPRI
   18fbc:	f383 8811 	msr	BASEPRI, r3
   18fc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fc4:	4843      	ldr	r0, [pc, #268]	; (190d4 <z_thread_single_abort+0x1f4>)
   18fc6:	f000 fd75 	bl	19ab4 <z_spin_lock_valid>
   18fca:	b940      	cbnz	r0, 18fde <z_thread_single_abort+0xfe>
   18fcc:	4942      	ldr	r1, [pc, #264]	; (190d8 <z_thread_single_abort+0x1f8>)
   18fce:	483f      	ldr	r0, [pc, #252]	; (190cc <z_thread_single_abort+0x1ec>)
   18fd0:	227c      	movs	r2, #124	; 0x7c
   18fd2:	f001 fd5b 	bl	1aa8c <printk>
   18fd6:	217c      	movs	r1, #124	; 0x7c
   18fd8:	483f      	ldr	r0, [pc, #252]	; (190d8 <z_thread_single_abort+0x1f8>)
   18fda:	f001 fffd 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18fde:	483d      	ldr	r0, [pc, #244]	; (190d4 <z_thread_single_abort+0x1f4>)
   18fe0:	f000 fd84 	bl	19aec <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   18fe4:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18fe6:	06d8      	lsls	r0, r3, #27
   18fe8:	d116      	bne.n	19018 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   18fea:	69a2      	ldr	r2, [r4, #24]
   18fec:	b9a2      	cbnz	r2, 19018 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   18fee:	0619      	lsls	r1, r3, #24
   18ff0:	d507      	bpl.n	19002 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   18ff2:	4621      	mov	r1, r4
   18ff4:	4839      	ldr	r0, [pc, #228]	; (190dc <z_thread_single_abort+0x1fc>)
   18ff6:	f7ff fc69 	bl	188cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18ffa:	7b63      	ldrb	r3, [r4, #13]
   18ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19000:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   19002:	68b0      	ldr	r0, [r6, #8]
   19004:	1b02      	subs	r2, r0, r4
   19006:	4250      	negs	r0, r2
   19008:	4150      	adcs	r0, r2
   1900a:	f7ff fcc5 	bl	18998 <update_cache>
			waiter->base.pended_on = NULL;
   1900e:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   19012:	f104 0930 	add.w	r9, r4, #48	; 0x30
   19016:	e023      	b.n	19060 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   19018:	079b      	lsls	r3, r3, #30
   1901a:	d5f8      	bpl.n	1900e <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1901c:	4620      	mov	r0, r4
   1901e:	f7ff fb4d 	bl	186bc <pended_on>
   19022:	4621      	mov	r1, r4
   19024:	f7ff fc52 	bl	188cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19028:	7b63      	ldrb	r3, [r4, #13]
   1902a:	f023 0302 	bic.w	r3, r3, #2
   1902e:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   19030:	2300      	movs	r3, #0
   19032:	60a3      	str	r3, [r4, #8]
   19034:	e7eb      	b.n	1900e <z_thread_single_abort+0x12e>
   19036:	f105 0018 	add.w	r0, r5, #24
   1903a:	f000 ff7f 	bl	19f3c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1903e:	4628      	mov	r0, r5
   19040:	f7ff fb3c 	bl	186bc <pended_on>
   19044:	4629      	mov	r1, r5
   19046:	f7ff fc41 	bl	188cc <z_priq_dumb_remove>
   1904a:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1904c:	4628      	mov	r0, r5
   1904e:	f023 0302 	bic.w	r3, r3, #2
   19052:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   19054:	f8c5 8008 	str.w	r8, [r5, #8]
   19058:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   1905c:	f7ff fd32 	bl	18ac4 <ready_thread>
	return list->head == list;
   19060:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19062:	454d      	cmp	r5, r9
   19064:	d001      	beq.n	1906a <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   19066:	2d00      	cmp	r5, #0
   19068:	d1e5      	bne.n	19036 <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   1906a:	68b2      	ldr	r2, [r6, #8]
   1906c:	4b1c      	ldr	r3, [pc, #112]	; (190e0 <z_thread_single_abort+0x200>)
   1906e:	429a      	cmp	r2, r3
   19070:	d102      	bne.n	19078 <z_thread_single_abort+0x198>
			update_cache(1);
   19072:	2001      	movs	r0, #1
   19074:	f7ff fc90 	bl	18998 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19078:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   1907a:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1907c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   1907e:	f043 0308 	orr.w	r3, r3, #8
   19082:	7363      	strb	r3, [r4, #13]
   19084:	f104 0338 	add.w	r3, r4, #56	; 0x38
   19088:	e8d3 1fef 	ldaex	r1, [r3]
   1908c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   19090:	2800      	cmp	r0, #0
   19092:	d1f9      	bne.n	19088 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19094:	480f      	ldr	r0, [pc, #60]	; (190d4 <z_thread_single_abort+0x1f4>)
   19096:	f000 fd1b 	bl	19ad0 <z_spin_unlock_valid>
   1909a:	b940      	cbnz	r0, 190ae <z_thread_single_abort+0x1ce>
   1909c:	490e      	ldr	r1, [pc, #56]	; (190d8 <z_thread_single_abort+0x1f8>)
   1909e:	480b      	ldr	r0, [pc, #44]	; (190cc <z_thread_single_abort+0x1ec>)
   190a0:	22a7      	movs	r2, #167	; 0xa7
   190a2:	f001 fcf3 	bl	1aa8c <printk>
   190a6:	21a7      	movs	r1, #167	; 0xa7
   190a8:	480b      	ldr	r0, [pc, #44]	; (190d8 <z_thread_single_abort+0x1f8>)
   190aa:	f001 ff95 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   190ae:	f387 8811 	msr	BASEPRI, r7
   190b2:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   190b6:	2d00      	cmp	r5, #0
   190b8:	f43f af62 	beq.w	18f80 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   190bc:	4620      	mov	r0, r4
   190be:	462b      	mov	r3, r5
}
   190c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   190c4:	4718      	bx	r3
   190c6:	bf00      	nop
   190c8:	0002290e 	.word	0x0002290e
   190cc:	0001fb49 	.word	0x0001fb49
   190d0:	2000a27c 	.word	0x2000a27c
   190d4:	2000a2b4 	.word	0x2000a2b4
   190d8:	0001fb83 	.word	0x0001fb83
   190dc:	2000a2a8 	.word	0x2000a2a8
   190e0:	200097c0 	.word	0x200097c0

000190e4 <unready_thread>:
{
   190e4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   190e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   190ea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   190ec:	2b00      	cmp	r3, #0
   190ee:	da07      	bge.n	19100 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   190f0:	4601      	mov	r1, r0
   190f2:	4808      	ldr	r0, [pc, #32]	; (19114 <unready_thread+0x30>)
   190f4:	f7ff fbea 	bl	188cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   190f8:	7b63      	ldrb	r3, [r4, #13]
   190fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   190fe:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   19100:	4b05      	ldr	r3, [pc, #20]	; (19118 <unready_thread+0x34>)
   19102:	6898      	ldr	r0, [r3, #8]
   19104:	1b03      	subs	r3, r0, r4
   19106:	4258      	negs	r0, r3
   19108:	4158      	adcs	r0, r3
}
   1910a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1910e:	f7ff bc43 	b.w	18998 <update_cache>
   19112:	bf00      	nop
   19114:	2000a2a8 	.word	0x2000a2a8
   19118:	2000a27c 	.word	0x2000a27c

0001911c <add_to_waitq_locked>:
{
   1911c:	b538      	push	{r3, r4, r5, lr}
   1911e:	4604      	mov	r4, r0
   19120:	460d      	mov	r5, r1
	unready_thread(thread);
   19122:	f7ff ffdf 	bl	190e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   19126:	7b63      	ldrb	r3, [r4, #13]
   19128:	f043 0302 	orr.w	r3, r3, #2
   1912c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1912e:	b1ed      	cbz	r5, 1916c <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19130:	4b15      	ldr	r3, [pc, #84]	; (19188 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   19132:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19134:	429c      	cmp	r4, r3
   19136:	d10a      	bne.n	1914e <add_to_waitq_locked+0x32>
   19138:	4914      	ldr	r1, [pc, #80]	; (1918c <add_to_waitq_locked+0x70>)
   1913a:	4815      	ldr	r0, [pc, #84]	; (19190 <add_to_waitq_locked+0x74>)
   1913c:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   19140:	f001 fca4 	bl	1aa8c <printk>
   19144:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   19148:	4810      	ldr	r0, [pc, #64]	; (1918c <add_to_waitq_locked+0x70>)
   1914a:	f001 ff45 	bl	1afd8 <assert_post_action>
	return list->head == list;
   1914e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19150:	429d      	cmp	r5, r3
   19152:	d012      	beq.n	1917a <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19154:	b18b      	cbz	r3, 1917a <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   19156:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1915a:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1915e:	4291      	cmp	r1, r2
   19160:	dd05      	ble.n	1916e <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   19162:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19164:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19168:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1916a:	605c      	str	r4, [r3, #4]
}
   1916c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1916e:	6869      	ldr	r1, [r5, #4]
   19170:	428b      	cmp	r3, r1
   19172:	d002      	beq.n	1917a <add_to_waitq_locked+0x5e>
   19174:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19176:	2b00      	cmp	r3, #0
   19178:	d1ef      	bne.n	1915a <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   1917a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1917c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1917e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19180:	686b      	ldr	r3, [r5, #4]
   19182:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19184:	606c      	str	r4, [r5, #4]
}
   19186:	e7f1      	b.n	1916c <add_to_waitq_locked+0x50>
   19188:	200097c0 	.word	0x200097c0
   1918c:	0002290e 	.word	0x0002290e
   19190:	0001fb49 	.word	0x0001fb49

00019194 <pend>:
{
   19194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19198:	4604      	mov	r4, r0
   1919a:	4688      	mov	r8, r1
   1919c:	4616      	mov	r6, r2
   1919e:	461d      	mov	r5, r3
	__asm__ volatile(
   191a0:	f04f 0320 	mov.w	r3, #32
   191a4:	f3ef 8711 	mrs	r7, BASEPRI
   191a8:	f383 8811 	msr	BASEPRI, r3
   191ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   191b0:	481a      	ldr	r0, [pc, #104]	; (1921c <pend+0x88>)
   191b2:	f000 fc7f 	bl	19ab4 <z_spin_lock_valid>
   191b6:	b940      	cbnz	r0, 191ca <pend+0x36>
   191b8:	4919      	ldr	r1, [pc, #100]	; (19220 <pend+0x8c>)
   191ba:	481a      	ldr	r0, [pc, #104]	; (19224 <pend+0x90>)
   191bc:	227c      	movs	r2, #124	; 0x7c
   191be:	f001 fc65 	bl	1aa8c <printk>
   191c2:	217c      	movs	r1, #124	; 0x7c
   191c4:	4816      	ldr	r0, [pc, #88]	; (19220 <pend+0x8c>)
   191c6:	f001 ff07 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   191ca:	4814      	ldr	r0, [pc, #80]	; (1921c <pend+0x88>)
   191cc:	f000 fc8e 	bl	19aec <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   191d0:	4620      	mov	r0, r4
   191d2:	4641      	mov	r1, r8
   191d4:	f7ff ffa2 	bl	1911c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191d8:	4810      	ldr	r0, [pc, #64]	; (1921c <pend+0x88>)
   191da:	f000 fc79 	bl	19ad0 <z_spin_unlock_valid>
   191de:	b940      	cbnz	r0, 191f2 <pend+0x5e>
   191e0:	490f      	ldr	r1, [pc, #60]	; (19220 <pend+0x8c>)
   191e2:	4810      	ldr	r0, [pc, #64]	; (19224 <pend+0x90>)
   191e4:	22a7      	movs	r2, #167	; 0xa7
   191e6:	f001 fc51 	bl	1aa8c <printk>
   191ea:	21a7      	movs	r1, #167	; 0xa7
   191ec:	480c      	ldr	r0, [pc, #48]	; (19220 <pend+0x8c>)
   191ee:	f001 fef3 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   191f2:	f387 8811 	msr	BASEPRI, r7
   191f6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   191fa:	f1b5 3fff 	cmp.w	r5, #4294967295
   191fe:	bf08      	it	eq
   19200:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19204:	d008      	beq.n	19218 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   19206:	4632      	mov	r2, r6
   19208:	462b      	mov	r3, r5
   1920a:	f104 0018 	add.w	r0, r4, #24
   1920e:	4906      	ldr	r1, [pc, #24]	; (19228 <pend+0x94>)
}
   19210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19214:	f000 bde2 	b.w	19ddc <z_add_timeout>
   19218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1921c:	2000a2b4 	.word	0x2000a2b4
   19220:	0001fb83 	.word	0x0001fb83
   19224:	0001fb49 	.word	0x0001fb49
   19228:	00018c49 	.word	0x00018c49

0001922c <z_pend_curr>:
{
   1922c:	b538      	push	{r3, r4, r5, lr}
   1922e:	4605      	mov	r5, r0
	pending_current = _current;
   19230:	4b0d      	ldr	r3, [pc, #52]	; (19268 <z_pend_curr+0x3c>)
{
   19232:	460c      	mov	r4, r1
	pending_current = _current;
   19234:	6898      	ldr	r0, [r3, #8]
   19236:	4b0d      	ldr	r3, [pc, #52]	; (1926c <z_pend_curr+0x40>)
{
   19238:	4611      	mov	r1, r2
	pending_current = _current;
   1923a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1923c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19240:	f7ff ffa8 	bl	19194 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19244:	4628      	mov	r0, r5
   19246:	f000 fc43 	bl	19ad0 <z_spin_unlock_valid>
   1924a:	b940      	cbnz	r0, 1925e <z_pend_curr+0x32>
   1924c:	4908      	ldr	r1, [pc, #32]	; (19270 <z_pend_curr+0x44>)
   1924e:	4809      	ldr	r0, [pc, #36]	; (19274 <z_pend_curr+0x48>)
   19250:	22be      	movs	r2, #190	; 0xbe
   19252:	f001 fc1b 	bl	1aa8c <printk>
   19256:	21be      	movs	r1, #190	; 0xbe
   19258:	4805      	ldr	r0, [pc, #20]	; (19270 <z_pend_curr+0x44>)
   1925a:	f001 febd 	bl	1afd8 <assert_post_action>
   1925e:	4620      	mov	r0, r4
}
   19260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19264:	f7f4 bc6e 	b.w	db44 <arch_swap>
   19268:	2000a27c 	.word	0x2000a27c
   1926c:	2000a2b0 	.word	0x2000a2b0
   19270:	0001fb83 	.word	0x0001fb83
   19274:	0001fb49 	.word	0x0001fb49

00019278 <z_set_prio>:
{
   19278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1927a:	4604      	mov	r4, r0
   1927c:	460d      	mov	r5, r1
	__asm__ volatile(
   1927e:	f04f 0320 	mov.w	r3, #32
   19282:	f3ef 8611 	mrs	r6, BASEPRI
   19286:	f383 8811 	msr	BASEPRI, r3
   1928a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1928e:	4831      	ldr	r0, [pc, #196]	; (19354 <z_set_prio+0xdc>)
   19290:	f000 fc10 	bl	19ab4 <z_spin_lock_valid>
   19294:	b940      	cbnz	r0, 192a8 <z_set_prio+0x30>
   19296:	4930      	ldr	r1, [pc, #192]	; (19358 <z_set_prio+0xe0>)
   19298:	4830      	ldr	r0, [pc, #192]	; (1935c <z_set_prio+0xe4>)
   1929a:	227c      	movs	r2, #124	; 0x7c
   1929c:	f001 fbf6 	bl	1aa8c <printk>
   192a0:	217c      	movs	r1, #124	; 0x7c
   192a2:	482d      	ldr	r0, [pc, #180]	; (19358 <z_set_prio+0xe0>)
   192a4:	f001 fe98 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   192a8:	482a      	ldr	r0, [pc, #168]	; (19354 <z_set_prio+0xdc>)
   192aa:	f000 fc1f 	bl	19aec <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   192ae:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   192b0:	b26d      	sxtb	r5, r5
   192b2:	06db      	lsls	r3, r3, #27
   192b4:	d14a      	bne.n	1934c <z_set_prio+0xd4>
		if (need_sched) {
   192b6:	69a3      	ldr	r3, [r4, #24]
   192b8:	2b00      	cmp	r3, #0
   192ba:	d147      	bne.n	1934c <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   192bc:	4621      	mov	r1, r4
   192be:	4828      	ldr	r0, [pc, #160]	; (19360 <z_set_prio+0xe8>)
   192c0:	f7ff fb04 	bl	188cc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   192c4:	4b27      	ldr	r3, [pc, #156]	; (19364 <z_set_prio+0xec>)
				thread->base.prio = prio;
   192c6:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   192c8:	429c      	cmp	r4, r3
   192ca:	d10a      	bne.n	192e2 <z_set_prio+0x6a>
   192cc:	4926      	ldr	r1, [pc, #152]	; (19368 <z_set_prio+0xf0>)
   192ce:	4823      	ldr	r0, [pc, #140]	; (1935c <z_set_prio+0xe4>)
   192d0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   192d4:	f001 fbda 	bl	1aa8c <printk>
   192d8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   192dc:	4822      	ldr	r0, [pc, #136]	; (19368 <z_set_prio+0xf0>)
   192de:	f001 fe7b 	bl	1afd8 <assert_post_action>
	return list->head == list;
   192e2:	4a22      	ldr	r2, [pc, #136]	; (1936c <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192e4:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   192e8:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192ec:	4283      	cmp	r3, r0
   192ee:	d027      	beq.n	19340 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   192f0:	b333      	cbz	r3, 19340 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   192f2:	f994 500e 	ldrsb.w	r5, [r4, #14]
   192f6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   192fa:	42af      	cmp	r7, r5
   192fc:	dd1b      	ble.n	19336 <z_set_prio+0xbe>
	node->prev = successor->prev;
   192fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19300:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19304:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19306:	605c      	str	r4, [r3, #4]
			update_cache(1);
   19308:	2001      	movs	r0, #1
   1930a:	f7ff fb45 	bl	18998 <update_cache>
   1930e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19310:	4810      	ldr	r0, [pc, #64]	; (19354 <z_set_prio+0xdc>)
   19312:	f000 fbdd 	bl	19ad0 <z_spin_unlock_valid>
   19316:	b940      	cbnz	r0, 1932a <z_set_prio+0xb2>
   19318:	490f      	ldr	r1, [pc, #60]	; (19358 <z_set_prio+0xe0>)
   1931a:	4810      	ldr	r0, [pc, #64]	; (1935c <z_set_prio+0xe4>)
   1931c:	22a7      	movs	r2, #167	; 0xa7
   1931e:	f001 fbb5 	bl	1aa8c <printk>
   19322:	21a7      	movs	r1, #167	; 0xa7
   19324:	480c      	ldr	r0, [pc, #48]	; (19358 <z_set_prio+0xe0>)
   19326:	f001 fe57 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1932a:	f386 8811 	msr	BASEPRI, r6
   1932e:	f3bf 8f6f 	isb	sy
}
   19332:	4620      	mov	r0, r4
   19334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   19336:	4299      	cmp	r1, r3
   19338:	d002      	beq.n	19340 <z_set_prio+0xc8>
   1933a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1933c:	2b00      	cmp	r3, #0
   1933e:	d1da      	bne.n	192f6 <z_set_prio+0x7e>
	node->prev = list->tail;
   19340:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   19344:	6b13      	ldr	r3, [r2, #48]	; 0x30
   19346:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19348:	6314      	str	r4, [r2, #48]	; 0x30
}
   1934a:	e7dd      	b.n	19308 <z_set_prio+0x90>
			thread->base.prio = prio;
   1934c:	73a5      	strb	r5, [r4, #14]
   1934e:	2400      	movs	r4, #0
   19350:	e7de      	b.n	19310 <z_set_prio+0x98>
   19352:	bf00      	nop
   19354:	2000a2b4 	.word	0x2000a2b4
   19358:	0001fb83 	.word	0x0001fb83
   1935c:	0001fb49 	.word	0x0001fb49
   19360:	2000a2a8 	.word	0x2000a2a8
   19364:	200097c0 	.word	0x200097c0
   19368:	0002290e 	.word	0x0002290e
   1936c:	2000a27c 	.word	0x2000a27c

00019370 <z_unpend_first_thread>:
{
   19370:	b538      	push	{r3, r4, r5, lr}
   19372:	4604      	mov	r4, r0
	__asm__ volatile(
   19374:	f04f 0320 	mov.w	r3, #32
   19378:	f3ef 8511 	mrs	r5, BASEPRI
   1937c:	f383 8811 	msr	BASEPRI, r3
   19380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19384:	482b      	ldr	r0, [pc, #172]	; (19434 <z_unpend_first_thread+0xc4>)
   19386:	f000 fb95 	bl	19ab4 <z_spin_lock_valid>
   1938a:	b940      	cbnz	r0, 1939e <z_unpend_first_thread+0x2e>
   1938c:	492a      	ldr	r1, [pc, #168]	; (19438 <z_unpend_first_thread+0xc8>)
   1938e:	482b      	ldr	r0, [pc, #172]	; (1943c <z_unpend_first_thread+0xcc>)
   19390:	227c      	movs	r2, #124	; 0x7c
   19392:	f001 fb7b 	bl	1aa8c <printk>
   19396:	217c      	movs	r1, #124	; 0x7c
   19398:	4827      	ldr	r0, [pc, #156]	; (19438 <z_unpend_first_thread+0xc8>)
   1939a:	f001 fe1d 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1939e:	4825      	ldr	r0, [pc, #148]	; (19434 <z_unpend_first_thread+0xc4>)
   193a0:	f000 fba4 	bl	19aec <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   193a4:	4620      	mov	r0, r4
   193a6:	f004 fe69 	bl	1e07c <z_priq_dumb_best>
   193aa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193ac:	4821      	ldr	r0, [pc, #132]	; (19434 <z_unpend_first_thread+0xc4>)
   193ae:	f000 fb8f 	bl	19ad0 <z_spin_unlock_valid>
   193b2:	b940      	cbnz	r0, 193c6 <z_unpend_first_thread+0x56>
   193b4:	4920      	ldr	r1, [pc, #128]	; (19438 <z_unpend_first_thread+0xc8>)
   193b6:	4821      	ldr	r0, [pc, #132]	; (1943c <z_unpend_first_thread+0xcc>)
   193b8:	22a7      	movs	r2, #167	; 0xa7
   193ba:	f001 fb67 	bl	1aa8c <printk>
   193be:	21a7      	movs	r1, #167	; 0xa7
   193c0:	481d      	ldr	r0, [pc, #116]	; (19438 <z_unpend_first_thread+0xc8>)
   193c2:	f001 fe09 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   193c6:	f385 8811 	msr	BASEPRI, r5
   193ca:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   193ce:	b37c      	cbz	r4, 19430 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   193d0:	f04f 0320 	mov.w	r3, #32
   193d4:	f3ef 8511 	mrs	r5, BASEPRI
   193d8:	f383 8811 	msr	BASEPRI, r3
   193dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193e0:	4814      	ldr	r0, [pc, #80]	; (19434 <z_unpend_first_thread+0xc4>)
   193e2:	f000 fb67 	bl	19ab4 <z_spin_lock_valid>
   193e6:	b940      	cbnz	r0, 193fa <z_unpend_first_thread+0x8a>
   193e8:	4913      	ldr	r1, [pc, #76]	; (19438 <z_unpend_first_thread+0xc8>)
   193ea:	4814      	ldr	r0, [pc, #80]	; (1943c <z_unpend_first_thread+0xcc>)
   193ec:	227c      	movs	r2, #124	; 0x7c
   193ee:	f001 fb4d 	bl	1aa8c <printk>
   193f2:	217c      	movs	r1, #124	; 0x7c
   193f4:	4810      	ldr	r0, [pc, #64]	; (19438 <z_unpend_first_thread+0xc8>)
   193f6:	f001 fdef 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   193fa:	480e      	ldr	r0, [pc, #56]	; (19434 <z_unpend_first_thread+0xc4>)
   193fc:	f000 fb76 	bl	19aec <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   19400:	4620      	mov	r0, r4
   19402:	f004 fe2d 	bl	1e060 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19406:	480b      	ldr	r0, [pc, #44]	; (19434 <z_unpend_first_thread+0xc4>)
   19408:	f000 fb62 	bl	19ad0 <z_spin_unlock_valid>
   1940c:	b940      	cbnz	r0, 19420 <z_unpend_first_thread+0xb0>
   1940e:	490a      	ldr	r1, [pc, #40]	; (19438 <z_unpend_first_thread+0xc8>)
   19410:	480a      	ldr	r0, [pc, #40]	; (1943c <z_unpend_first_thread+0xcc>)
   19412:	22a7      	movs	r2, #167	; 0xa7
   19414:	f001 fb3a 	bl	1aa8c <printk>
   19418:	21a7      	movs	r1, #167	; 0xa7
   1941a:	4807      	ldr	r0, [pc, #28]	; (19438 <z_unpend_first_thread+0xc8>)
   1941c:	f001 fddc 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   19420:	f385 8811 	msr	BASEPRI, r5
   19424:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   19428:	f104 0018 	add.w	r0, r4, #24
   1942c:	f000 fd86 	bl	19f3c <z_abort_timeout>
}
   19430:	4620      	mov	r0, r4
   19432:	bd38      	pop	{r3, r4, r5, pc}
   19434:	2000a2b4 	.word	0x2000a2b4
   19438:	0001fb83 	.word	0x0001fb83
   1943c:	0001fb49 	.word	0x0001fb49

00019440 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19440:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19442:	4b04      	ldr	r3, [pc, #16]	; (19454 <z_sched_init+0x14>)
   19444:	4608      	mov	r0, r1
   19446:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1944a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1944e:	f7ff b961 	b.w	18714 <k_sched_time_slice_set>
   19452:	bf00      	nop
   19454:	2000a27c 	.word	0x2000a27c

00019458 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   19458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1945a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1945e:	b153      	cbz	r3, 19476 <z_impl_k_yield+0x1e>
   19460:	493d      	ldr	r1, [pc, #244]	; (19558 <z_impl_k_yield+0x100>)
   19462:	483e      	ldr	r0, [pc, #248]	; (1955c <z_impl_k_yield+0x104>)
   19464:	f240 42cf 	movw	r2, #1231	; 0x4cf
   19468:	f001 fb10 	bl	1aa8c <printk>
   1946c:	f240 41cf 	movw	r1, #1231	; 0x4cf
   19470:	4839      	ldr	r0, [pc, #228]	; (19558 <z_impl_k_yield+0x100>)
   19472:	f001 fdb1 	bl	1afd8 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   19476:	4d3a      	ldr	r5, [pc, #232]	; (19560 <z_impl_k_yield+0x108>)
   19478:	4f3a      	ldr	r7, [pc, #232]	; (19564 <z_impl_k_yield+0x10c>)
   1947a:	68ab      	ldr	r3, [r5, #8]
   1947c:	42bb      	cmp	r3, r7
   1947e:	d054      	beq.n	1952a <z_impl_k_yield+0xd2>
	__asm__ volatile(
   19480:	f04f 0320 	mov.w	r3, #32
   19484:	f3ef 8611 	mrs	r6, BASEPRI
   19488:	f383 8811 	msr	BASEPRI, r3
   1948c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19490:	4835      	ldr	r0, [pc, #212]	; (19568 <z_impl_k_yield+0x110>)
   19492:	f000 fb0f 	bl	19ab4 <z_spin_lock_valid>
   19496:	b940      	cbnz	r0, 194aa <z_impl_k_yield+0x52>
   19498:	4934      	ldr	r1, [pc, #208]	; (1956c <z_impl_k_yield+0x114>)
   1949a:	4830      	ldr	r0, [pc, #192]	; (1955c <z_impl_k_yield+0x104>)
   1949c:	227c      	movs	r2, #124	; 0x7c
   1949e:	f001 faf5 	bl	1aa8c <printk>
   194a2:	217c      	movs	r1, #124	; 0x7c
   194a4:	4831      	ldr	r0, [pc, #196]	; (1956c <z_impl_k_yield+0x114>)
   194a6:	f001 fd97 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   194aa:	482f      	ldr	r0, [pc, #188]	; (19568 <z_impl_k_yield+0x110>)
   194ac:	f000 fb1e 	bl	19aec <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   194b0:	68a9      	ldr	r1, [r5, #8]
   194b2:	482f      	ldr	r0, [pc, #188]	; (19570 <z_impl_k_yield+0x118>)
   194b4:	f7ff fa0a 	bl	188cc <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   194b8:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   194ba:	42bc      	cmp	r4, r7
   194bc:	d10a      	bne.n	194d4 <z_impl_k_yield+0x7c>
   194be:	4926      	ldr	r1, [pc, #152]	; (19558 <z_impl_k_yield+0x100>)
   194c0:	4826      	ldr	r0, [pc, #152]	; (1955c <z_impl_k_yield+0x104>)
   194c2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   194c6:	f001 fae1 	bl	1aa8c <printk>
   194ca:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   194ce:	4822      	ldr	r0, [pc, #136]	; (19558 <z_impl_k_yield+0x100>)
   194d0:	f001 fd82 	bl	1afd8 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   194d4:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   194d8:	4925      	ldr	r1, [pc, #148]	; (19570 <z_impl_k_yield+0x118>)
   194da:	428b      	cmp	r3, r1
   194dc:	d036      	beq.n	1954c <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   194de:	2b00      	cmp	r3, #0
   194e0:	d034      	beq.n	1954c <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   194e2:	f994 000e 	ldrsb.w	r0, [r4, #14]
   194e6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   194ea:	4287      	cmp	r7, r0
   194ec:	dd29      	ble.n	19542 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   194ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   194f0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   194f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   194f6:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   194f8:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   194fa:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   194fc:	7b53      	ldrb	r3, [r2, #13]
   194fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19502:	7353      	strb	r3, [r2, #13]
   19504:	f7ff fa48 	bl	18998 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19508:	4817      	ldr	r0, [pc, #92]	; (19568 <z_impl_k_yield+0x110>)
   1950a:	f000 fae1 	bl	19ad0 <z_spin_unlock_valid>
   1950e:	b940      	cbnz	r0, 19522 <z_impl_k_yield+0xca>
   19510:	4916      	ldr	r1, [pc, #88]	; (1956c <z_impl_k_yield+0x114>)
   19512:	4812      	ldr	r0, [pc, #72]	; (1955c <z_impl_k_yield+0x104>)
   19514:	22a7      	movs	r2, #167	; 0xa7
   19516:	f001 fab9 	bl	1aa8c <printk>
   1951a:	21a7      	movs	r1, #167	; 0xa7
   1951c:	4813      	ldr	r0, [pc, #76]	; (1956c <z_impl_k_yield+0x114>)
   1951e:	f001 fd5b 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   19522:	f386 8811 	msr	BASEPRI, r6
   19526:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1952a:	f04f 0320 	mov.w	r3, #32
   1952e:	f3ef 8011 	mrs	r0, BASEPRI
   19532:	f383 8811 	msr	BASEPRI, r3
   19536:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1953a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1953e:	f7f4 bb01 	b.w	db44 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19542:	4293      	cmp	r3, r2
   19544:	d002      	beq.n	1954c <z_impl_k_yield+0xf4>
   19546:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19548:	2b00      	cmp	r3, #0
   1954a:	d1cc      	bne.n	194e6 <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   1954c:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   19550:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   19552:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19554:	632c      	str	r4, [r5, #48]	; 0x30
}
   19556:	e7cf      	b.n	194f8 <z_impl_k_yield+0xa0>
   19558:	0002290e 	.word	0x0002290e
   1955c:	0001fb49 	.word	0x0001fb49
   19560:	2000a27c 	.word	0x2000a27c
   19564:	200097c0 	.word	0x200097c0
   19568:	2000a2b4 	.word	0x2000a2b4
   1956c:	0001fb83 	.word	0x0001fb83
   19570:	2000a2a8 	.word	0x2000a2a8

00019574 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   19574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19578:	4605      	mov	r5, r0
   1957a:	460f      	mov	r7, r1
   1957c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   19580:	b153      	cbz	r3, 19598 <z_tick_sleep+0x24>
   19582:	4934      	ldr	r1, [pc, #208]	; (19654 <z_tick_sleep+0xe0>)
   19584:	4834      	ldr	r0, [pc, #208]	; (19658 <z_tick_sleep+0xe4>)
   19586:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1958a:	f001 fa7f 	bl	1aa8c <printk>
   1958e:	f240 41ed 	movw	r1, #1261	; 0x4ed
   19592:	4830      	ldr	r0, [pc, #192]	; (19654 <z_tick_sleep+0xe0>)
   19594:	f001 fd20 	bl	1afd8 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   19598:	ea55 0307 	orrs.w	r3, r5, r7
   1959c:	d104      	bne.n	195a8 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1959e:	f7ff ff5b 	bl	19458 <z_impl_k_yield>
		k_yield();
		return 0;
   195a2:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   195a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   195a8:	f004 fdf6 	bl	1e198 <z_tick_get_32>
   195ac:	1944      	adds	r4, r0, r5
   195ae:	f04f 0320 	mov.w	r3, #32
   195b2:	f3ef 8811 	mrs	r8, BASEPRI
   195b6:	f383 8811 	msr	BASEPRI, r3
   195ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195be:	4827      	ldr	r0, [pc, #156]	; (1965c <z_tick_sleep+0xe8>)
   195c0:	f000 fa78 	bl	19ab4 <z_spin_lock_valid>
   195c4:	b940      	cbnz	r0, 195d8 <z_tick_sleep+0x64>
   195c6:	4926      	ldr	r1, [pc, #152]	; (19660 <z_tick_sleep+0xec>)
   195c8:	4823      	ldr	r0, [pc, #140]	; (19658 <z_tick_sleep+0xe4>)
   195ca:	227c      	movs	r2, #124	; 0x7c
   195cc:	f001 fa5e 	bl	1aa8c <printk>
   195d0:	217c      	movs	r1, #124	; 0x7c
   195d2:	4823      	ldr	r0, [pc, #140]	; (19660 <z_tick_sleep+0xec>)
   195d4:	f001 fd00 	bl	1afd8 <assert_post_action>
	pending_current = _current;
   195d8:	4e22      	ldr	r6, [pc, #136]	; (19664 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   195da:	4820      	ldr	r0, [pc, #128]	; (1965c <z_tick_sleep+0xe8>)
   195dc:	f000 fa86 	bl	19aec <z_spin_lock_set_owner>
   195e0:	68b0      	ldr	r0, [r6, #8]
   195e2:	4b21      	ldr	r3, [pc, #132]	; (19668 <z_tick_sleep+0xf4>)
   195e4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   195e6:	f7ff fd7d 	bl	190e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   195ea:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   195ec:	462a      	mov	r2, r5
   195ee:	463b      	mov	r3, r7
   195f0:	3018      	adds	r0, #24
   195f2:	491e      	ldr	r1, [pc, #120]	; (1966c <z_tick_sleep+0xf8>)
   195f4:	f000 fbf2 	bl	19ddc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   195f8:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   195fa:	4818      	ldr	r0, [pc, #96]	; (1965c <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   195fc:	7b53      	ldrb	r3, [r2, #13]
   195fe:	f043 0310 	orr.w	r3, r3, #16
   19602:	7353      	strb	r3, [r2, #13]
   19604:	f000 fa64 	bl	19ad0 <z_spin_unlock_valid>
   19608:	b940      	cbnz	r0, 1961c <z_tick_sleep+0xa8>
   1960a:	4915      	ldr	r1, [pc, #84]	; (19660 <z_tick_sleep+0xec>)
   1960c:	4812      	ldr	r0, [pc, #72]	; (19658 <z_tick_sleep+0xe4>)
   1960e:	22be      	movs	r2, #190	; 0xbe
   19610:	f001 fa3c 	bl	1aa8c <printk>
   19614:	21be      	movs	r1, #190	; 0xbe
   19616:	4812      	ldr	r0, [pc, #72]	; (19660 <z_tick_sleep+0xec>)
   19618:	f001 fcde 	bl	1afd8 <assert_post_action>
   1961c:	4640      	mov	r0, r8
   1961e:	f7f4 fa91 	bl	db44 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   19622:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   19624:	7b5b      	ldrb	r3, [r3, #13]
   19626:	06db      	lsls	r3, r3, #27
   19628:	d50a      	bpl.n	19640 <z_tick_sleep+0xcc>
   1962a:	490a      	ldr	r1, [pc, #40]	; (19654 <z_tick_sleep+0xe0>)
   1962c:	480a      	ldr	r0, [pc, #40]	; (19658 <z_tick_sleep+0xe4>)
   1962e:	f240 520b 	movw	r2, #1291	; 0x50b
   19632:	f001 fa2b 	bl	1aa8c <printk>
   19636:	f240 510b 	movw	r1, #1291	; 0x50b
   1963a:	4806      	ldr	r0, [pc, #24]	; (19654 <z_tick_sleep+0xe0>)
   1963c:	f001 fccc 	bl	1afd8 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   19640:	f004 fdaa 	bl	1e198 <z_tick_get_32>
   19644:	1a20      	subs	r0, r4, r0
   19646:	eb63 0303 	sbc.w	r3, r3, r3
   1964a:	2b00      	cmp	r3, #0
   1964c:	bfb8      	it	lt
   1964e:	2000      	movlt	r0, #0
   19650:	e7a8      	b.n	195a4 <z_tick_sleep+0x30>
   19652:	bf00      	nop
   19654:	0002290e 	.word	0x0002290e
   19658:	0001fb49 	.word	0x0001fb49
   1965c:	2000a2b4 	.word	0x2000a2b4
   19660:	0001fb83 	.word	0x0001fb83
   19664:	2000a27c 	.word	0x2000a27c
   19668:	2000a2b0 	.word	0x2000a2b0
   1966c:	00018c49 	.word	0x00018c49

00019670 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19670:	b538      	push	{r3, r4, r5, lr}
   19672:	4605      	mov	r5, r0
   19674:	460c      	mov	r4, r1
   19676:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1967a:	b153      	cbz	r3, 19692 <z_impl_k_sleep+0x22>
   1967c:	4911      	ldr	r1, [pc, #68]	; (196c4 <z_impl_k_sleep+0x54>)
   1967e:	4812      	ldr	r0, [pc, #72]	; (196c8 <z_impl_k_sleep+0x58>)
   19680:	f240 521a 	movw	r2, #1306	; 0x51a
   19684:	f001 fa02 	bl	1aa8c <printk>
   19688:	f240 511a 	movw	r1, #1306	; 0x51a
   1968c:	480d      	ldr	r0, [pc, #52]	; (196c4 <z_impl_k_sleep+0x54>)
   1968e:	f001 fca3 	bl	1afd8 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19692:	f1b4 3fff 	cmp.w	r4, #4294967295
   19696:	bf08      	it	eq
   19698:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1969c:	d106      	bne.n	196ac <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1969e:	4b0b      	ldr	r3, [pc, #44]	; (196cc <z_impl_k_sleep+0x5c>)
   196a0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   196a2:	f7ff fbc5 	bl	18e30 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   196a6:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   196aa:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   196ac:	4628      	mov	r0, r5
   196ae:	4621      	mov	r1, r4
   196b0:	f7ff ff60 	bl	19574 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   196b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   196b8:	fb80 0303 	smull	r0, r3, r0, r3
   196bc:	0bc0      	lsrs	r0, r0, #15
   196be:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   196c2:	e7f2      	b.n	196aa <z_impl_k_sleep+0x3a>
   196c4:	0002290e 	.word	0x0002290e
   196c8:	0001fb49 	.word	0x0001fb49
   196cc:	2000a27c 	.word	0x2000a27c

000196d0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   196d0:	4b01      	ldr	r3, [pc, #4]	; (196d8 <z_impl_k_current_get+0x8>)
   196d2:	6898      	ldr	r0, [r3, #8]
   196d4:	4770      	bx	lr
   196d6:	bf00      	nop
   196d8:	2000a27c 	.word	0x2000a27c

000196dc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   196dc:	b538      	push	{r3, r4, r5, lr}
   196de:	4604      	mov	r4, r0
   196e0:	f04f 0320 	mov.w	r3, #32
   196e4:	f3ef 8511 	mrs	r5, BASEPRI
   196e8:	f383 8811 	msr	BASEPRI, r3
   196ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   196f0:	4815      	ldr	r0, [pc, #84]	; (19748 <z_impl_k_sem_give+0x6c>)
   196f2:	f000 f9df 	bl	19ab4 <z_spin_lock_valid>
   196f6:	b940      	cbnz	r0, 1970a <z_impl_k_sem_give+0x2e>
   196f8:	4914      	ldr	r1, [pc, #80]	; (1974c <z_impl_k_sem_give+0x70>)
   196fa:	4815      	ldr	r0, [pc, #84]	; (19750 <z_impl_k_sem_give+0x74>)
   196fc:	227c      	movs	r2, #124	; 0x7c
   196fe:	f001 f9c5 	bl	1aa8c <printk>
   19702:	217c      	movs	r1, #124	; 0x7c
   19704:	4811      	ldr	r0, [pc, #68]	; (1974c <z_impl_k_sem_give+0x70>)
   19706:	f001 fc67 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1970a:	480f      	ldr	r0, [pc, #60]	; (19748 <z_impl_k_sem_give+0x6c>)
   1970c:	f000 f9ee 	bl	19aec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   19710:	4620      	mov	r0, r4
   19712:	f7ff fe2d 	bl	19370 <z_unpend_first_thread>

	if (thread != NULL) {
   19716:	b150      	cbz	r0, 1972e <z_impl_k_sem_give+0x52>
   19718:	2200      	movs	r2, #0
   1971a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1971e:	f7ff fa1b 	bl	18b58 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19722:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   19724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   19728:	4807      	ldr	r0, [pc, #28]	; (19748 <z_impl_k_sem_give+0x6c>)
   1972a:	f7ff b841 	b.w	187b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1972e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19732:	429a      	cmp	r2, r3
   19734:	bf18      	it	ne
   19736:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19738:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1973a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1973c:	f104 0010 	add.w	r0, r4, #16
   19740:	f004 fda1 	bl	1e286 <z_handle_obj_poll_events>
}
   19744:	e7ed      	b.n	19722 <z_impl_k_sem_give+0x46>
   19746:	bf00      	nop
   19748:	2000a2c0 	.word	0x2000a2c0
   1974c:	0001fb83 	.word	0x0001fb83
   19750:	0001fb49 	.word	0x0001fb49

00019754 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19756:	4604      	mov	r4, r0
   19758:	4616      	mov	r6, r2
   1975a:	461d      	mov	r5, r3
   1975c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19760:	b15b      	cbz	r3, 1977a <z_impl_k_sem_take+0x26>
   19762:	ea52 0305 	orrs.w	r3, r2, r5
   19766:	d008      	beq.n	1977a <z_impl_k_sem_take+0x26>
   19768:	492b      	ldr	r1, [pc, #172]	; (19818 <z_impl_k_sem_take+0xc4>)
   1976a:	482c      	ldr	r0, [pc, #176]	; (1981c <z_impl_k_sem_take+0xc8>)
   1976c:	228c      	movs	r2, #140	; 0x8c
   1976e:	f001 f98d 	bl	1aa8c <printk>
   19772:	218c      	movs	r1, #140	; 0x8c
   19774:	4828      	ldr	r0, [pc, #160]	; (19818 <z_impl_k_sem_take+0xc4>)
   19776:	f001 fc2f 	bl	1afd8 <assert_post_action>
   1977a:	f04f 0320 	mov.w	r3, #32
   1977e:	f3ef 8711 	mrs	r7, BASEPRI
   19782:	f383 8811 	msr	BASEPRI, r3
   19786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1978a:	4825      	ldr	r0, [pc, #148]	; (19820 <z_impl_k_sem_take+0xcc>)
   1978c:	f000 f992 	bl	19ab4 <z_spin_lock_valid>
   19790:	b940      	cbnz	r0, 197a4 <z_impl_k_sem_take+0x50>
   19792:	4924      	ldr	r1, [pc, #144]	; (19824 <z_impl_k_sem_take+0xd0>)
   19794:	4821      	ldr	r0, [pc, #132]	; (1981c <z_impl_k_sem_take+0xc8>)
   19796:	227c      	movs	r2, #124	; 0x7c
   19798:	f001 f978 	bl	1aa8c <printk>
   1979c:	217c      	movs	r1, #124	; 0x7c
   1979e:	4821      	ldr	r0, [pc, #132]	; (19824 <z_impl_k_sem_take+0xd0>)
   197a0:	f001 fc1a 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   197a4:	481e      	ldr	r0, [pc, #120]	; (19820 <z_impl_k_sem_take+0xcc>)
   197a6:	f000 f9a1 	bl	19aec <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   197aa:	68a3      	ldr	r3, [r4, #8]
   197ac:	b1ab      	cbz	r3, 197da <z_impl_k_sem_take+0x86>
		sem->count--;
   197ae:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197b0:	481b      	ldr	r0, [pc, #108]	; (19820 <z_impl_k_sem_take+0xcc>)
   197b2:	60a3      	str	r3, [r4, #8]
   197b4:	f000 f98c 	bl	19ad0 <z_spin_unlock_valid>
   197b8:	b940      	cbnz	r0, 197cc <z_impl_k_sem_take+0x78>
   197ba:	491a      	ldr	r1, [pc, #104]	; (19824 <z_impl_k_sem_take+0xd0>)
   197bc:	4817      	ldr	r0, [pc, #92]	; (1981c <z_impl_k_sem_take+0xc8>)
   197be:	22a7      	movs	r2, #167	; 0xa7
   197c0:	f001 f964 	bl	1aa8c <printk>
   197c4:	21a7      	movs	r1, #167	; 0xa7
   197c6:	4817      	ldr	r0, [pc, #92]	; (19824 <z_impl_k_sem_take+0xd0>)
   197c8:	f001 fc06 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   197cc:	f387 8811 	msr	BASEPRI, r7
   197d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   197d4:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   197d6:	b003      	add	sp, #12
   197d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   197da:	ea56 0305 	orrs.w	r3, r6, r5
   197de:	d113      	bne.n	19808 <z_impl_k_sem_take+0xb4>
   197e0:	480f      	ldr	r0, [pc, #60]	; (19820 <z_impl_k_sem_take+0xcc>)
   197e2:	f000 f975 	bl	19ad0 <z_spin_unlock_valid>
   197e6:	b940      	cbnz	r0, 197fa <z_impl_k_sem_take+0xa6>
   197e8:	490e      	ldr	r1, [pc, #56]	; (19824 <z_impl_k_sem_take+0xd0>)
   197ea:	480c      	ldr	r0, [pc, #48]	; (1981c <z_impl_k_sem_take+0xc8>)
   197ec:	22a7      	movs	r2, #167	; 0xa7
   197ee:	f001 f94d 	bl	1aa8c <printk>
   197f2:	21a7      	movs	r1, #167	; 0xa7
   197f4:	480b      	ldr	r0, [pc, #44]	; (19824 <z_impl_k_sem_take+0xd0>)
   197f6:	f001 fbef 	bl	1afd8 <assert_post_action>
   197fa:	f387 8811 	msr	BASEPRI, r7
   197fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19802:	f06f 000f 	mvn.w	r0, #15
   19806:	e7e6      	b.n	197d6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   19808:	4622      	mov	r2, r4
   1980a:	4639      	mov	r1, r7
   1980c:	e9cd 6500 	strd	r6, r5, [sp]
   19810:	4803      	ldr	r0, [pc, #12]	; (19820 <z_impl_k_sem_take+0xcc>)
   19812:	f7ff fd0b 	bl	1922c <z_pend_curr>
	return ret;
   19816:	e7de      	b.n	197d6 <z_impl_k_sem_take+0x82>
   19818:	00022930 	.word	0x00022930
   1981c:	0001fb49 	.word	0x0001fb49
   19820:	2000a2c0 	.word	0x2000a2c0
   19824:	0001fb83 	.word	0x0001fb83

00019828 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19828:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1982a:	4c08      	ldr	r4, [pc, #32]	; (1984c <k_sys_work_q_init+0x24>)
   1982c:	f04f 33ff 	mov.w	r3, #4294967295
   19830:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19834:	4620      	mov	r0, r4
   19836:	4906      	ldr	r1, [pc, #24]	; (19850 <k_sys_work_q_init+0x28>)
   19838:	f000 f98c 	bl	19b54 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1983c:	4905      	ldr	r1, [pc, #20]	; (19854 <k_sys_work_q_init+0x2c>)
   1983e:	f104 0020 	add.w	r0, r4, #32
   19842:	f004 fc4b 	bl	1e0dc <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   19846:	2000      	movs	r0, #0
   19848:	bd10      	pop	{r4, pc}
   1984a:	bf00      	nop
   1984c:	200098e0 	.word	0x200098e0
   19850:	20012e78 	.word	0x20012e78
   19854:	00022950 	.word	0x00022950

00019858 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19858:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1985c:	4604      	mov	r4, r0
   1985e:	460f      	mov	r7, r1
   19860:	4698      	mov	r8, r3
   19862:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19864:	4b2c      	ldr	r3, [pc, #176]	; (19918 <z_setup_new_thread+0xc0>)
   19866:	4616      	mov	r6, r2
   19868:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1986c:	e8d2 1fef 	ldaex	r1, [r2]
   19870:	e8c2 3fe0 	stlex	r0, r3, [r2]
   19874:	2800      	cmp	r0, #0
   19876:	d1f9      	bne.n	1986c <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   19878:	4299      	cmp	r1, r3
   1987a:	d10a      	bne.n	19892 <z_setup_new_thread+0x3a>
   1987c:	4927      	ldr	r1, [pc, #156]	; (1991c <z_setup_new_thread+0xc4>)
   1987e:	4828      	ldr	r0, [pc, #160]	; (19920 <z_setup_new_thread+0xc8>)
   19880:	f240 2223 	movw	r2, #547	; 0x223
   19884:	f001 f902 	bl	1aa8c <printk>
   19888:	f240 2123 	movw	r1, #547	; 0x223
   1988c:	4823      	ldr	r0, [pc, #140]	; (1991c <z_setup_new_thread+0xc4>)
   1988e:	f001 fba3 	bl	1afd8 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   19892:	2d0f      	cmp	r5, #15
   19894:	d12f      	bne.n	198f6 <z_setup_new_thread+0x9e>
   19896:	4b23      	ldr	r3, [pc, #140]	; (19924 <z_setup_new_thread+0xcc>)
   19898:	4598      	cmp	r8, r3
   1989a:	d130      	bne.n	198fe <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   1989c:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   198a0:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   198a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   198a6:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   198a8:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   198aa:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   198ac:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   198ae:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   198b2:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198b4:	9302      	str	r3, [sp, #8]
   198b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   198b8:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198bc:	9301      	str	r3, [sp, #4]
   198be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   198c0:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   198c2:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198c6:	9300      	str	r3, [sp, #0]
   198c8:	4632      	mov	r2, r6
   198ca:	4643      	mov	r3, r8
   198cc:	4639      	mov	r1, r7
   198ce:	4620      	mov	r0, r4
	node->prev = NULL;
   198d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   198d4:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   198d6:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198d8:	f7f4 f9d2 	bl	dc80 <arch_new_thread>
	if (!_current) {
   198dc:	4b12      	ldr	r3, [pc, #72]	; (19928 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   198de:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   198e2:	689b      	ldr	r3, [r3, #8]
   198e4:	b10b      	cbz	r3, 198ea <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   198e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   198ea:	4630      	mov	r0, r6
   198ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   198f0:	b004      	add	sp, #16
   198f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   198f6:	f105 0310 	add.w	r3, r5, #16
   198fa:	2b1e      	cmp	r3, #30
   198fc:	d9ce      	bls.n	1989c <z_setup_new_thread+0x44>
   198fe:	f240 2226 	movw	r2, #550	; 0x226
   19902:	4906      	ldr	r1, [pc, #24]	; (1991c <z_setup_new_thread+0xc4>)
   19904:	4806      	ldr	r0, [pc, #24]	; (19920 <z_setup_new_thread+0xc8>)
   19906:	f001 f8c1 	bl	1aa8c <printk>
   1990a:	f240 2126 	movw	r1, #550	; 0x226
   1990e:	4803      	ldr	r0, [pc, #12]	; (1991c <z_setup_new_thread+0xc4>)
   19910:	f001 fb62 	bl	1afd8 <assert_post_action>
   19914:	e7c2      	b.n	1989c <z_setup_new_thread+0x44>
   19916:	bf00      	nop
   19918:	1337c0d3 	.word	0x1337c0d3
   1991c:	00022959 	.word	0x00022959
   19920:	0001fb49 	.word	0x0001fb49
   19924:	00017c41 	.word	0x00017c41
   19928:	2000a27c 	.word	0x2000a27c

0001992c <z_impl_k_thread_create>:
{
   1992c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19930:	b087      	sub	sp, #28
   19932:	4604      	mov	r4, r0
   19934:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   19938:	460f      	mov	r7, r1
   1993a:	4690      	mov	r8, r2
   1993c:	4699      	mov	r9, r3
   1993e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   19942:	b153      	cbz	r3, 1995a <z_impl_k_thread_create+0x2e>
   19944:	491a      	ldr	r1, [pc, #104]	; (199b0 <z_impl_k_thread_create+0x84>)
   19946:	481b      	ldr	r0, [pc, #108]	; (199b4 <z_impl_k_thread_create+0x88>)
   19948:	f240 228f 	movw	r2, #655	; 0x28f
   1994c:	f001 f89e 	bl	1aa8c <printk>
   19950:	f240 218f 	movw	r1, #655	; 0x28f
   19954:	4816      	ldr	r0, [pc, #88]	; (199b0 <z_impl_k_thread_create+0x84>)
   19956:	f001 fb3f 	bl	1afd8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1995a:	2300      	movs	r3, #0
   1995c:	9305      	str	r3, [sp, #20]
   1995e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19960:	4642      	mov	r2, r8
   19962:	9304      	str	r3, [sp, #16]
   19964:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19966:	4639      	mov	r1, r7
   19968:	9303      	str	r3, [sp, #12]
   1996a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1996c:	4620      	mov	r0, r4
   1996e:	9302      	str	r3, [sp, #8]
   19970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19972:	9301      	str	r3, [sp, #4]
   19974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19976:	9300      	str	r3, [sp, #0]
   19978:	464b      	mov	r3, r9
   1997a:	f7ff ff6d 	bl	19858 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1997e:	f1b5 3fff 	cmp.w	r5, #4294967295
   19982:	bf08      	it	eq
   19984:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19988:	d005      	beq.n	19996 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1998a:	ea55 0306 	orrs.w	r3, r5, r6
   1998e:	d106      	bne.n	1999e <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   19990:	4620      	mov	r0, r4
   19992:	f7ff f917 	bl	18bc4 <z_sched_start>
}
   19996:	4620      	mov	r0, r4
   19998:	b007      	add	sp, #28
   1999a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1999e:	4632      	mov	r2, r6
   199a0:	462b      	mov	r3, r5
   199a2:	4905      	ldr	r1, [pc, #20]	; (199b8 <z_impl_k_thread_create+0x8c>)
   199a4:	f104 0018 	add.w	r0, r4, #24
   199a8:	f000 fa18 	bl	19ddc <z_add_timeout>
   199ac:	e7f3      	b.n	19996 <z_impl_k_thread_create+0x6a>
   199ae:	bf00      	nop
   199b0:	00022959 	.word	0x00022959
   199b4:	0001fb49 	.word	0x0001fb49
   199b8:	00018c49 	.word	0x00018c49

000199bc <z_init_static_threads>:
{
   199bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199c0:	4c37      	ldr	r4, [pc, #220]	; (19aa0 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   199c2:	4d38      	ldr	r5, [pc, #224]	; (19aa4 <z_init_static_threads+0xe8>)
   199c4:	4f38      	ldr	r7, [pc, #224]	; (19aa8 <z_init_static_threads+0xec>)
{
   199c6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   199c8:	42ac      	cmp	r4, r5
   199ca:	4626      	mov	r6, r4
   199cc:	d90a      	bls.n	199e4 <z_init_static_threads+0x28>
   199ce:	4639      	mov	r1, r7
   199d0:	4836      	ldr	r0, [pc, #216]	; (19aac <z_init_static_threads+0xf0>)
   199d2:	f240 22fd 	movw	r2, #765	; 0x2fd
   199d6:	f001 f859 	bl	1aa8c <printk>
   199da:	f240 21fd 	movw	r1, #765	; 0x2fd
   199de:	4638      	mov	r0, r7
   199e0:	f001 fafa 	bl	1afd8 <assert_post_action>
   199e4:	42ae      	cmp	r6, r5
   199e6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   199ea:	d31b      	bcc.n	19a24 <z_init_static_threads+0x68>
	k_sched_lock();
   199ec:	f7fe ff16 	bl	1881c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   199f0:	4c2b      	ldr	r4, [pc, #172]	; (19aa0 <z_init_static_threads+0xe4>)
   199f2:	4e2d      	ldr	r6, [pc, #180]	; (19aa8 <z_init_static_threads+0xec>)
   199f4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19aac <z_init_static_threads+0xf0>
   199f8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19ab0 <z_init_static_threads+0xf4>
   199fc:	42ac      	cmp	r4, r5
   199fe:	d90a      	bls.n	19a16 <z_init_static_threads+0x5a>
   19a00:	4631      	mov	r1, r6
   19a02:	4640      	mov	r0, r8
   19a04:	f44f 7247 	mov.w	r2, #796	; 0x31c
   19a08:	f001 f840 	bl	1aa8c <printk>
   19a0c:	f44f 7147 	mov.w	r1, #796	; 0x31c
   19a10:	4630      	mov	r0, r6
   19a12:	f001 fae1 	bl	1afd8 <assert_post_action>
   19a16:	42ac      	cmp	r4, r5
   19a18:	d320      	bcc.n	19a5c <z_init_static_threads+0xa0>
}
   19a1a:	b007      	add	sp, #28
   19a1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   19a20:	f7fe bff4 	b.w	18a0c <k_sched_unlock>
		z_setup_new_thread(
   19a24:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19a28:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   19a2c:	9305      	str	r3, [sp, #20]
   19a2e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19a32:	9304      	str	r3, [sp, #16]
   19a34:	f854 3c14 	ldr.w	r3, [r4, #-20]
   19a38:	9303      	str	r3, [sp, #12]
   19a3a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19a3e:	9302      	str	r3, [sp, #8]
   19a40:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19a44:	9301      	str	r3, [sp, #4]
   19a46:	f854 3c20 	ldr.w	r3, [r4, #-32]
   19a4a:	9300      	str	r3, [sp, #0]
   19a4c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19a50:	f7ff ff02 	bl	19858 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   19a54:	f854 3c30 	ldr.w	r3, [r4, #-48]
   19a58:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   19a5a:	e7b5      	b.n	199c8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a5e:	1c5a      	adds	r2, r3, #1
   19a60:	d00f      	beq.n	19a82 <z_init_static_threads+0xc6>
   19a62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   19a66:	f240 30e7 	movw	r0, #999	; 0x3e7
   19a6a:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   19a6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19a70:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19a74:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   19a78:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19a7a:	d104      	bne.n	19a86 <z_init_static_threads+0xca>
	z_sched_start(thread);
   19a7c:	4638      	mov	r0, r7
   19a7e:	f7ff f8a1 	bl	18bc4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19a82:	3430      	adds	r4, #48	; 0x30
   19a84:	e7ba      	b.n	199fc <z_init_static_threads+0x40>
   19a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19a8a:	2300      	movs	r3, #0
   19a8c:	f7ef f84e 	bl	8b2c <__aeabi_uldivmod>
   19a90:	4602      	mov	r2, r0
   19a92:	460b      	mov	r3, r1
   19a94:	f107 0018 	add.w	r0, r7, #24
   19a98:	4649      	mov	r1, r9
   19a9a:	f000 f99f 	bl	19ddc <z_add_timeout>
   19a9e:	e7f0      	b.n	19a82 <z_init_static_threads+0xc6>
   19aa0:	200084bc 	.word	0x200084bc
   19aa4:	200084bc 	.word	0x200084bc
   19aa8:	00022959 	.word	0x00022959
   19aac:	0001fb49 	.word	0x0001fb49
   19ab0:	00018c49 	.word	0x00018c49

00019ab4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19ab4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   19ab6:	b138      	cbz	r0, 19ac8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   19ab8:	4b04      	ldr	r3, [pc, #16]	; (19acc <z_spin_lock_valid+0x18>)
   19aba:	f000 0003 	and.w	r0, r0, #3
   19abe:	7e1b      	ldrb	r3, [r3, #24]
   19ac0:	1ac0      	subs	r0, r0, r3
   19ac2:	bf18      	it	ne
   19ac4:	2001      	movne	r0, #1
   19ac6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   19ac8:	2001      	movs	r0, #1
}
   19aca:	4770      	bx	lr
   19acc:	2000a27c 	.word	0x2000a27c

00019ad0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19ad0:	4905      	ldr	r1, [pc, #20]	; (19ae8 <z_spin_unlock_valid+0x18>)
{
   19ad2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19ad4:	688a      	ldr	r2, [r1, #8]
   19ad6:	7e08      	ldrb	r0, [r1, #24]
   19ad8:	6819      	ldr	r1, [r3, #0]
   19ada:	4302      	orrs	r2, r0
   19adc:	2000      	movs	r0, #0
   19ade:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   19ae0:	bf04      	itt	eq
   19ae2:	6018      	streq	r0, [r3, #0]
	return true;
   19ae4:	2001      	moveq	r0, #1
}
   19ae6:	4770      	bx	lr
   19ae8:	2000a27c 	.word	0x2000a27c

00019aec <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   19aec:	4a02      	ldr	r2, [pc, #8]	; (19af8 <z_spin_lock_set_owner+0xc>)
   19aee:	7e11      	ldrb	r1, [r2, #24]
   19af0:	6893      	ldr	r3, [r2, #8]
   19af2:	430b      	orrs	r3, r1
   19af4:	6003      	str	r3, [r0, #0]
}
   19af6:	4770      	bx	lr
   19af8:	2000a27c 	.word	0x2000a27c

00019afc <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   19afc:	b508      	push	{r3, lr}
	__asm__ volatile(
   19afe:	f04f 0320 	mov.w	r3, #32
   19b02:	f3ef 8511 	mrs	r5, BASEPRI
   19b06:	f383 8811 	msr	BASEPRI, r3
   19b0a:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   19b0e:	4c0e      	ldr	r4, [pc, #56]	; (19b48 <z_self_abort+0x4c>)
   19b10:	6923      	ldr	r3, [r4, #16]
   19b12:	b143      	cbz	r3, 19b26 <z_self_abort+0x2a>
   19b14:	490d      	ldr	r1, [pc, #52]	; (19b4c <z_self_abort+0x50>)
   19b16:	480e      	ldr	r0, [pc, #56]	; (19b50 <z_self_abort+0x54>)
   19b18:	2228      	movs	r2, #40	; 0x28
   19b1a:	f000 ffb7 	bl	1aa8c <printk>
   19b1e:	2128      	movs	r1, #40	; 0x28
   19b20:	480a      	ldr	r0, [pc, #40]	; (19b4c <z_self_abort+0x50>)
   19b22:	f001 fa59 	bl	1afd8 <assert_post_action>
	cpu->pending_abort = _current;
   19b26:	68a0      	ldr	r0, [r4, #8]
   19b28:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   19b2a:	f7ff f981 	bl	18e30 <z_impl_k_thread_suspend>
   19b2e:	4628      	mov	r0, r5
   19b30:	f7f4 f808 	bl	db44 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   19b34:	4905      	ldr	r1, [pc, #20]	; (19b4c <z_self_abort+0x50>)
   19b36:	4806      	ldr	r0, [pc, #24]	; (19b50 <z_self_abort+0x54>)
   19b38:	2230      	movs	r2, #48	; 0x30
   19b3a:	f000 ffa7 	bl	1aa8c <printk>
   19b3e:	2130      	movs	r1, #48	; 0x30
   19b40:	4802      	ldr	r0, [pc, #8]	; (19b4c <z_self_abort+0x50>)
   19b42:	f001 fa49 	bl	1afd8 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19b46:	bf00      	nop
   19b48:	2000a27c 	.word	0x2000a27c
   19b4c:	0002297c 	.word	0x0002297c
   19b50:	0001fb49 	.word	0x0001fb49

00019b54 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   19b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b58:	4604      	mov	r4, r0
   19b5a:	b088      	sub	sp, #32
   19b5c:	460d      	mov	r5, r1
   19b5e:	4616      	mov	r6, r2
   19b60:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19b62:	f004 fa3c 	bl	1dfde <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   19b66:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19b6a:	2200      	movs	r2, #0
   19b6c:	2300      	movs	r3, #0
   19b6e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   19b72:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19b76:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19b7a:	4629      	mov	r1, r5
   19b7c:	4632      	mov	r2, r6
   19b7e:	4640      	mov	r0, r8
   19b80:	4b05      	ldr	r3, [pc, #20]	; (19b98 <k_work_q_start+0x44>)
   19b82:	9400      	str	r4, [sp, #0]
   19b84:	f7ff fed2 	bl	1992c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19b88:	4640      	mov	r0, r8
   19b8a:	4904      	ldr	r1, [pc, #16]	; (19b9c <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   19b8c:	b008      	add	sp, #32
   19b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19b92:	f004 baa3 	b.w	1e0dc <z_impl_k_thread_name_set>
   19b96:	bf00      	nop
   19b98:	0000af55 	.word	0x0000af55
   19b9c:	000229a5 	.word	0x000229a5

00019ba0 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ba4:	4606      	mov	r6, r0
   19ba6:	460d      	mov	r5, r1
   19ba8:	4690      	mov	r8, r2
   19baa:	461f      	mov	r7, r3
   19bac:	f04f 0320 	mov.w	r3, #32
   19bb0:	f3ef 8911 	mrs	r9, BASEPRI
   19bb4:	f383 8811 	msr	BASEPRI, r3
   19bb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19bbc:	482c      	ldr	r0, [pc, #176]	; (19c70 <k_delayed_work_submit_to_queue+0xd0>)
   19bbe:	f7ff ff79 	bl	19ab4 <z_spin_lock_valid>
   19bc2:	b940      	cbnz	r0, 19bd6 <k_delayed_work_submit_to_queue+0x36>
   19bc4:	492b      	ldr	r1, [pc, #172]	; (19c74 <k_delayed_work_submit_to_queue+0xd4>)
   19bc6:	482c      	ldr	r0, [pc, #176]	; (19c78 <k_delayed_work_submit_to_queue+0xd8>)
   19bc8:	227c      	movs	r2, #124	; 0x7c
   19bca:	f000 ff5f 	bl	1aa8c <printk>
   19bce:	217c      	movs	r1, #124	; 0x7c
   19bd0:	4828      	ldr	r0, [pc, #160]	; (19c74 <k_delayed_work_submit_to_queue+0xd4>)
   19bd2:	f001 fa01 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19bd6:	4826      	ldr	r0, [pc, #152]	; (19c70 <k_delayed_work_submit_to_queue+0xd0>)
   19bd8:	f7ff ff88 	bl	19aec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   19bdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19bde:	b1e3      	cbz	r3, 19c1a <k_delayed_work_submit_to_queue+0x7a>
   19be0:	42b3      	cmp	r3, r6
   19be2:	d142      	bne.n	19c6a <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   19be4:	4628      	mov	r0, r5
   19be6:	f004 fa97 	bl	1e118 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   19bea:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   19bee:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   19bf0:	d015      	beq.n	19c1e <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   19bf2:	2800      	cmp	r0, #0
   19bf4:	da14      	bge.n	19c20 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19bf6:	481e      	ldr	r0, [pc, #120]	; (19c70 <k_delayed_work_submit_to_queue+0xd0>)
   19bf8:	f7ff ff6a 	bl	19ad0 <z_spin_unlock_valid>
   19bfc:	b940      	cbnz	r0, 19c10 <k_delayed_work_submit_to_queue+0x70>
   19bfe:	491d      	ldr	r1, [pc, #116]	; (19c74 <k_delayed_work_submit_to_queue+0xd4>)
   19c00:	481d      	ldr	r0, [pc, #116]	; (19c78 <k_delayed_work_submit_to_queue+0xd8>)
   19c02:	22a7      	movs	r2, #167	; 0xa7
   19c04:	f000 ff42 	bl	1aa8c <printk>
   19c08:	21a7      	movs	r1, #167	; 0xa7
   19c0a:	481a      	ldr	r0, [pc, #104]	; (19c74 <k_delayed_work_submit_to_queue+0xd4>)
   19c0c:	f001 f9e4 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   19c10:	f389 8811 	msr	BASEPRI, r9
   19c14:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   19c18:	e01c      	b.n	19c54 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   19c1a:	2e00      	cmp	r6, #0
   19c1c:	d0e2      	beq.n	19be4 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   19c1e:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19c20:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   19c24:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19c26:	d118      	bne.n	19c5a <k_delayed_work_submit_to_queue+0xba>
   19c28:	4811      	ldr	r0, [pc, #68]	; (19c70 <k_delayed_work_submit_to_queue+0xd0>)
   19c2a:	f7ff ff51 	bl	19ad0 <z_spin_unlock_valid>
   19c2e:	b940      	cbnz	r0, 19c42 <k_delayed_work_submit_to_queue+0xa2>
   19c30:	4910      	ldr	r1, [pc, #64]	; (19c74 <k_delayed_work_submit_to_queue+0xd4>)
   19c32:	4811      	ldr	r0, [pc, #68]	; (19c78 <k_delayed_work_submit_to_queue+0xd8>)
   19c34:	22a7      	movs	r2, #167	; 0xa7
   19c36:	f000 ff29 	bl	1aa8c <printk>
   19c3a:	21a7      	movs	r1, #167	; 0xa7
   19c3c:	480d      	ldr	r0, [pc, #52]	; (19c74 <k_delayed_work_submit_to_queue+0xd4>)
   19c3e:	f001 f9cb 	bl	1afd8 <assert_post_action>
   19c42:	f389 8811 	msr	BASEPRI, r9
   19c46:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   19c4a:	4629      	mov	r1, r5
   19c4c:	4630      	mov	r0, r6
   19c4e:	f004 fa4a 	bl	1e0e6 <k_work_submit_to_queue>
		return 0;
   19c52:	2400      	movs	r4, #0
}
   19c54:	4620      	mov	r0, r4
   19c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   19c5a:	4642      	mov	r2, r8
   19c5c:	463b      	mov	r3, r7
   19c5e:	4907      	ldr	r1, [pc, #28]	; (19c7c <k_delayed_work_submit_to_queue+0xdc>)
   19c60:	f105 0010 	add.w	r0, r5, #16
   19c64:	f000 f8ba 	bl	19ddc <z_add_timeout>
   19c68:	e7c5      	b.n	19bf6 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   19c6a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   19c6e:	e7c2      	b.n	19bf6 <k_delayed_work_submit_to_queue+0x56>
   19c70:	2000a2c4 	.word	0x2000a2c4
   19c74:	0001fb83 	.word	0x0001fb83
   19c78:	0001fb49 	.word	0x0001fb49
   19c7c:	0001e10f 	.word	0x0001e10f

00019c80 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   19c80:	b538      	push	{r3, r4, r5, lr}
   19c82:	4604      	mov	r4, r0
	__asm__ volatile(
   19c84:	f04f 0320 	mov.w	r3, #32
   19c88:	f3ef 8511 	mrs	r5, BASEPRI
   19c8c:	f383 8811 	msr	BASEPRI, r3
   19c90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c94:	4815      	ldr	r0, [pc, #84]	; (19cec <k_delayed_work_cancel+0x6c>)
   19c96:	f7ff ff0d 	bl	19ab4 <z_spin_lock_valid>
   19c9a:	b940      	cbnz	r0, 19cae <k_delayed_work_cancel+0x2e>
   19c9c:	4914      	ldr	r1, [pc, #80]	; (19cf0 <k_delayed_work_cancel+0x70>)
   19c9e:	4815      	ldr	r0, [pc, #84]	; (19cf4 <k_delayed_work_cancel+0x74>)
   19ca0:	227c      	movs	r2, #124	; 0x7c
   19ca2:	f000 fef3 	bl	1aa8c <printk>
   19ca6:	217c      	movs	r1, #124	; 0x7c
   19ca8:	4811      	ldr	r0, [pc, #68]	; (19cf0 <k_delayed_work_cancel+0x70>)
   19caa:	f001 f995 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19cae:	480f      	ldr	r0, [pc, #60]	; (19cec <k_delayed_work_cancel+0x6c>)
   19cb0:	f7ff ff1c 	bl	19aec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   19cb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19cb6:	b1b3      	cbz	r3, 19ce6 <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   19cb8:	4620      	mov	r0, r4
   19cba:	f004 fa2d 	bl	1e118 <work_cancel>
   19cbe:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19cc0:	480a      	ldr	r0, [pc, #40]	; (19cec <k_delayed_work_cancel+0x6c>)
   19cc2:	f7ff ff05 	bl	19ad0 <z_spin_unlock_valid>
   19cc6:	b940      	cbnz	r0, 19cda <k_delayed_work_cancel+0x5a>
   19cc8:	4909      	ldr	r1, [pc, #36]	; (19cf0 <k_delayed_work_cancel+0x70>)
   19cca:	480a      	ldr	r0, [pc, #40]	; (19cf4 <k_delayed_work_cancel+0x74>)
   19ccc:	22a7      	movs	r2, #167	; 0xa7
   19cce:	f000 fedd 	bl	1aa8c <printk>
   19cd2:	21a7      	movs	r1, #167	; 0xa7
   19cd4:	4806      	ldr	r0, [pc, #24]	; (19cf0 <k_delayed_work_cancel+0x70>)
   19cd6:	f001 f97f 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   19cda:	f385 8811 	msr	BASEPRI, r5
   19cde:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   19ce2:	4620      	mov	r0, r4
   19ce4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19ce6:	f06f 0415 	mvn.w	r4, #21
   19cea:	e7e9      	b.n	19cc0 <k_delayed_work_cancel+0x40>
   19cec:	2000a2c4 	.word	0x2000a2c4
   19cf0:	0001fb83 	.word	0x0001fb83
   19cf4:	0001fb49 	.word	0x0001fb49

00019cf8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19cf8:	4a02      	ldr	r2, [pc, #8]	; (19d04 <boot_banner+0xc>)
   19cfa:	4903      	ldr	r1, [pc, #12]	; (19d08 <boot_banner+0x10>)
   19cfc:	4803      	ldr	r0, [pc, #12]	; (19d0c <boot_banner+0x14>)
   19cfe:	f000 bec5 	b.w	1aa8c <printk>
   19d02:	bf00      	nop
   19d04:	000227e8 	.word	0x000227e8
   19d08:	000229af 	.word	0x000229af
   19d0c:	000229bc 	.word	0x000229bc

00019d10 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19d10:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19d12:	4806      	ldr	r0, [pc, #24]	; (19d2c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19d14:	4a06      	ldr	r2, [pc, #24]	; (19d30 <z_data_copy+0x20>)
   19d16:	4907      	ldr	r1, [pc, #28]	; (19d34 <z_data_copy+0x24>)
   19d18:	1a12      	subs	r2, r2, r0
   19d1a:	f002 f8e1 	bl	1bee0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19d22:	4a05      	ldr	r2, [pc, #20]	; (19d38 <z_data_copy+0x28>)
   19d24:	4905      	ldr	r1, [pc, #20]	; (19d3c <z_data_copy+0x2c>)
   19d26:	4806      	ldr	r0, [pc, #24]	; (19d40 <z_data_copy+0x30>)
   19d28:	f002 b8da 	b.w	1bee0 <memcpy>
   19d2c:	20008000 	.word	0x20008000
   19d30:	200086b4 	.word	0x200086b4
   19d34:	00022a50 	.word	0x00022a50
   19d38:	00000000 	.word	0x00000000
   19d3c:	00022a50 	.word	0x00022a50
   19d40:	20008000 	.word	0x20008000

00019d44 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   19d44:	4b03      	ldr	r3, [pc, #12]	; (19d54 <elapsed+0x10>)
   19d46:	681b      	ldr	r3, [r3, #0]
   19d48:	b90b      	cbnz	r3, 19d4e <elapsed+0xa>
   19d4a:	f7f2 bd4d 	b.w	c7e8 <z_clock_elapsed>
}
   19d4e:	2000      	movs	r0, #0
   19d50:	4770      	bx	lr
   19d52:	bf00      	nop
   19d54:	2000a2c8 	.word	0x2000a2c8

00019d58 <next_timeout>:
	return list->head == list;
   19d58:	4b11      	ldr	r3, [pc, #68]	; (19da0 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   19d5a:	b510      	push	{r4, lr}
   19d5c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19d5e:	429c      	cmp	r4, r3
   19d60:	bf08      	it	eq
   19d62:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19d64:	f7ff ffee 	bl	19d44 <elapsed>
   19d68:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   19d6a:	b16c      	cbz	r4, 19d88 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19d6c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   19d70:	1ac0      	subs	r0, r0, r3
   19d72:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19d76:	2801      	cmp	r0, #1
   19d78:	f173 0200 	sbcs.w	r2, r3, #0
   19d7c:	db0d      	blt.n	19d9a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19d7e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19d82:	f173 0300 	sbcs.w	r3, r3, #0
   19d86:	db01      	blt.n	19d8c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   19d88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19d8c:	4b05      	ldr	r3, [pc, #20]	; (19da4 <next_timeout+0x4c>)
   19d8e:	695b      	ldr	r3, [r3, #20]
   19d90:	b113      	cbz	r3, 19d98 <next_timeout+0x40>
   19d92:	4298      	cmp	r0, r3
   19d94:	bfa8      	it	ge
   19d96:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19d98:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19d9a:	2000      	movs	r0, #0
   19d9c:	e7f6      	b.n	19d8c <next_timeout+0x34>
   19d9e:	bf00      	nop
   19da0:	20008424 	.word	0x20008424
   19da4:	2000a27c 	.word	0x2000a27c

00019da8 <remove_timeout>:
{
   19da8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   19daa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19dac:	b168      	cbz	r0, 19dca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   19dae:	4a0a      	ldr	r2, [pc, #40]	; (19dd8 <remove_timeout+0x30>)
   19db0:	6852      	ldr	r2, [r2, #4]
   19db2:	4290      	cmp	r0, r2
   19db4:	d009      	beq.n	19dca <remove_timeout+0x22>
	if (next(t) != NULL) {
   19db6:	b143      	cbz	r3, 19dca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19db8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   19dbc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19dc0:	1912      	adds	r2, r2, r4
   19dc2:	eb41 0105 	adc.w	r1, r1, r5
   19dc6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   19dca:	6842      	ldr	r2, [r0, #4]
   19dcc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19dce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19dd0:	2300      	movs	r3, #0
	node->prev = NULL;
   19dd2:	e9c0 3300 	strd	r3, r3, [r0]
}
   19dd6:	bd30      	pop	{r4, r5, pc}
   19dd8:	20008424 	.word	0x20008424

00019ddc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
   19de0:	bf08      	it	eq
   19de2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19de6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19dea:	4604      	mov	r4, r0
   19dec:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19dee:	f000 808c 	beq.w	19f0a <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19df2:	f06f 0601 	mvn.w	r6, #1
   19df6:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   19dfa:	1c55      	adds	r5, r2, #1
   19dfc:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19e00:	1b73      	subs	r3, r6, r5
   19e02:	eb69 0307 	sbc.w	r3, r9, r7
   19e06:	2b00      	cmp	r3, #0
   19e08:	db0d      	blt.n	19e26 <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   19e0a:	f7ff ff9b 	bl	19d44 <elapsed>
   19e0e:	4b44      	ldr	r3, [pc, #272]	; (19f20 <z_add_timeout+0x144>)
   19e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e14:	1ab6      	subs	r6, r6, r2
   19e16:	eb69 0303 	sbc.w	r3, r9, r3
   19e1a:	1b75      	subs	r5, r6, r5
   19e1c:	eb63 0707 	sbc.w	r7, r3, r7
   19e20:	1a2d      	subs	r5, r5, r0
   19e22:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   19e26:	6823      	ldr	r3, [r4, #0]
   19e28:	b143      	cbz	r3, 19e3c <z_add_timeout+0x60>
   19e2a:	493e      	ldr	r1, [pc, #248]	; (19f24 <z_add_timeout+0x148>)
   19e2c:	483e      	ldr	r0, [pc, #248]	; (19f28 <z_add_timeout+0x14c>)
   19e2e:	2268      	movs	r2, #104	; 0x68
   19e30:	f000 fe2c 	bl	1aa8c <printk>
   19e34:	2168      	movs	r1, #104	; 0x68
   19e36:	483b      	ldr	r0, [pc, #236]	; (19f24 <z_add_timeout+0x148>)
   19e38:	f001 f8ce 	bl	1afd8 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   19e3c:	2d01      	cmp	r5, #1
   19e3e:	f177 0300 	sbcs.w	r3, r7, #0
   19e42:	bfbc      	itt	lt
   19e44:	2501      	movlt	r5, #1
   19e46:	2700      	movlt	r7, #0
	to->fn = fn;
   19e48:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   19e4c:	f04f 0320 	mov.w	r3, #32
   19e50:	f3ef 8611 	mrs	r6, BASEPRI
   19e54:	f383 8811 	msr	BASEPRI, r3
   19e58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e5c:	4833      	ldr	r0, [pc, #204]	; (19f2c <z_add_timeout+0x150>)
   19e5e:	f7ff fe29 	bl	19ab4 <z_spin_lock_valid>
   19e62:	b940      	cbnz	r0, 19e76 <z_add_timeout+0x9a>
   19e64:	4932      	ldr	r1, [pc, #200]	; (19f30 <z_add_timeout+0x154>)
   19e66:	4830      	ldr	r0, [pc, #192]	; (19f28 <z_add_timeout+0x14c>)
   19e68:	227c      	movs	r2, #124	; 0x7c
   19e6a:	f000 fe0f 	bl	1aa8c <printk>
   19e6e:	217c      	movs	r1, #124	; 0x7c
   19e70:	482f      	ldr	r0, [pc, #188]	; (19f30 <z_add_timeout+0x154>)
   19e72:	f001 f8b1 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e76:	482d      	ldr	r0, [pc, #180]	; (19f2c <z_add_timeout+0x150>)
   19e78:	f7ff fe38 	bl	19aec <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   19e7c:	f7ff ff62 	bl	19d44 <elapsed>
	return list->head == list;
   19e80:	4a2c      	ldr	r2, [pc, #176]	; (19f34 <z_add_timeout+0x158>)
   19e82:	1945      	adds	r5, r0, r5
   19e84:	6813      	ldr	r3, [r2, #0]
   19e86:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19e8a:	4293      	cmp	r3, r2
   19e8c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19e90:	d002      	beq.n	19e98 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   19e92:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19e96:	b933      	cbnz	r3, 19ea6 <z_add_timeout+0xca>
	node->prev = list->tail;
   19e98:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   19e9a:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   19e9c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19e9e:	6853      	ldr	r3, [r2, #4]
   19ea0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19ea2:	6054      	str	r4, [r2, #4]
}
   19ea4:	e011      	b.n	19eca <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   19ea6:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   19eaa:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   19eae:	4281      	cmp	r1, r0
   19eb0:	eb75 0e07 	sbcs.w	lr, r5, r7
   19eb4:	da2b      	bge.n	19f0e <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   19eb6:	1a41      	subs	r1, r0, r1
   19eb8:	eb67 0505 	sbc.w	r5, r7, r5
   19ebc:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   19ec0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19ec2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19ec6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19ec8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19eca:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ecc:	4293      	cmp	r3, r2
   19ece:	d00b      	beq.n	19ee8 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19ed0:	429c      	cmp	r4, r3
   19ed2:	d109      	bne.n	19ee8 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19ed4:	f7ff ff40 	bl	19d58 <next_timeout>

			if (next_time == 0 ||
   19ed8:	b118      	cbz	r0, 19ee2 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   19eda:	4b17      	ldr	r3, [pc, #92]	; (19f38 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   19edc:	695b      	ldr	r3, [r3, #20]
   19ede:	4283      	cmp	r3, r0
   19ee0:	d002      	beq.n	19ee8 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   19ee2:	2100      	movs	r1, #0
   19ee4:	f7f2 fc4e 	bl	c784 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ee8:	4810      	ldr	r0, [pc, #64]	; (19f2c <z_add_timeout+0x150>)
   19eea:	f7ff fdf1 	bl	19ad0 <z_spin_unlock_valid>
   19eee:	b940      	cbnz	r0, 19f02 <z_add_timeout+0x126>
   19ef0:	490f      	ldr	r1, [pc, #60]	; (19f30 <z_add_timeout+0x154>)
   19ef2:	480d      	ldr	r0, [pc, #52]	; (19f28 <z_add_timeout+0x14c>)
   19ef4:	22a7      	movs	r2, #167	; 0xa7
   19ef6:	f000 fdc9 	bl	1aa8c <printk>
   19efa:	21a7      	movs	r1, #167	; 0xa7
   19efc:	480c      	ldr	r0, [pc, #48]	; (19f30 <z_add_timeout+0x154>)
   19efe:	f001 f86b 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   19f02:	f386 8811 	msr	BASEPRI, r6
   19f06:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   19f0e:	1a09      	subs	r1, r1, r0
   19f10:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19f14:	4563      	cmp	r3, ip
   19f16:	e9c4 1504 	strd	r1, r5, [r4, #16]
   19f1a:	d0bd      	beq.n	19e98 <z_add_timeout+0xbc>
   19f1c:	681b      	ldr	r3, [r3, #0]
   19f1e:	e7ba      	b.n	19e96 <z_add_timeout+0xba>
   19f20:	20009990 	.word	0x20009990
   19f24:	000229e3 	.word	0x000229e3
   19f28:	0001fb49 	.word	0x0001fb49
   19f2c:	2000a2cc 	.word	0x2000a2cc
   19f30:	0001fb83 	.word	0x0001fb83
   19f34:	20008424 	.word	0x20008424
   19f38:	2000a27c 	.word	0x2000a27c

00019f3c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   19f3c:	b538      	push	{r3, r4, r5, lr}
   19f3e:	4604      	mov	r4, r0
	__asm__ volatile(
   19f40:	f04f 0320 	mov.w	r3, #32
   19f44:	f3ef 8511 	mrs	r5, BASEPRI
   19f48:	f383 8811 	msr	BASEPRI, r3
   19f4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f50:	4815      	ldr	r0, [pc, #84]	; (19fa8 <z_abort_timeout+0x6c>)
   19f52:	f7ff fdaf 	bl	19ab4 <z_spin_lock_valid>
   19f56:	b940      	cbnz	r0, 19f6a <z_abort_timeout+0x2e>
   19f58:	4914      	ldr	r1, [pc, #80]	; (19fac <z_abort_timeout+0x70>)
   19f5a:	4815      	ldr	r0, [pc, #84]	; (19fb0 <z_abort_timeout+0x74>)
   19f5c:	227c      	movs	r2, #124	; 0x7c
   19f5e:	f000 fd95 	bl	1aa8c <printk>
   19f62:	217c      	movs	r1, #124	; 0x7c
   19f64:	4811      	ldr	r0, [pc, #68]	; (19fac <z_abort_timeout+0x70>)
   19f66:	f001 f837 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f6a:	480f      	ldr	r0, [pc, #60]	; (19fa8 <z_abort_timeout+0x6c>)
   19f6c:	f7ff fdbe 	bl	19aec <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   19f70:	6823      	ldr	r3, [r4, #0]
   19f72:	b1b3      	cbz	r3, 19fa2 <z_abort_timeout+0x66>
			remove_timeout(to);
   19f74:	4620      	mov	r0, r4
   19f76:	f7ff ff17 	bl	19da8 <remove_timeout>
			ret = 0;
   19f7a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f7c:	480a      	ldr	r0, [pc, #40]	; (19fa8 <z_abort_timeout+0x6c>)
   19f7e:	f7ff fda7 	bl	19ad0 <z_spin_unlock_valid>
   19f82:	b940      	cbnz	r0, 19f96 <z_abort_timeout+0x5a>
   19f84:	4909      	ldr	r1, [pc, #36]	; (19fac <z_abort_timeout+0x70>)
   19f86:	480a      	ldr	r0, [pc, #40]	; (19fb0 <z_abort_timeout+0x74>)
   19f88:	22a7      	movs	r2, #167	; 0xa7
   19f8a:	f000 fd7f 	bl	1aa8c <printk>
   19f8e:	21a7      	movs	r1, #167	; 0xa7
   19f90:	4806      	ldr	r0, [pc, #24]	; (19fac <z_abort_timeout+0x70>)
   19f92:	f001 f821 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   19f96:	f385 8811 	msr	BASEPRI, r5
   19f9a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   19f9e:	4620      	mov	r0, r4
   19fa0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19fa2:	f06f 0415 	mvn.w	r4, #21
   19fa6:	e7e9      	b.n	19f7c <z_abort_timeout+0x40>
   19fa8:	2000a2cc 	.word	0x2000a2cc
   19fac:	0001fb83 	.word	0x0001fb83
   19fb0:	0001fb49 	.word	0x0001fb49

00019fb4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19fb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19fb6:	f04f 0320 	mov.w	r3, #32
   19fba:	f3ef 8511 	mrs	r5, BASEPRI
   19fbe:	f383 8811 	msr	BASEPRI, r3
   19fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fc6:	4813      	ldr	r0, [pc, #76]	; (1a014 <z_get_next_timeout_expiry+0x60>)
   19fc8:	f7ff fd74 	bl	19ab4 <z_spin_lock_valid>
   19fcc:	b940      	cbnz	r0, 19fe0 <z_get_next_timeout_expiry+0x2c>
   19fce:	4912      	ldr	r1, [pc, #72]	; (1a018 <z_get_next_timeout_expiry+0x64>)
   19fd0:	4812      	ldr	r0, [pc, #72]	; (1a01c <z_get_next_timeout_expiry+0x68>)
   19fd2:	227c      	movs	r2, #124	; 0x7c
   19fd4:	f000 fd5a 	bl	1aa8c <printk>
   19fd8:	217c      	movs	r1, #124	; 0x7c
   19fda:	480f      	ldr	r0, [pc, #60]	; (1a018 <z_get_next_timeout_expiry+0x64>)
   19fdc:	f000 fffc 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19fe0:	480c      	ldr	r0, [pc, #48]	; (1a014 <z_get_next_timeout_expiry+0x60>)
   19fe2:	f7ff fd83 	bl	19aec <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   19fe6:	f7ff feb7 	bl	19d58 <next_timeout>
   19fea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19fec:	4809      	ldr	r0, [pc, #36]	; (1a014 <z_get_next_timeout_expiry+0x60>)
   19fee:	f7ff fd6f 	bl	19ad0 <z_spin_unlock_valid>
   19ff2:	b940      	cbnz	r0, 1a006 <z_get_next_timeout_expiry+0x52>
   19ff4:	4908      	ldr	r1, [pc, #32]	; (1a018 <z_get_next_timeout_expiry+0x64>)
   19ff6:	4809      	ldr	r0, [pc, #36]	; (1a01c <z_get_next_timeout_expiry+0x68>)
   19ff8:	22a7      	movs	r2, #167	; 0xa7
   19ffa:	f000 fd47 	bl	1aa8c <printk>
   19ffe:	21a7      	movs	r1, #167	; 0xa7
   1a000:	4805      	ldr	r0, [pc, #20]	; (1a018 <z_get_next_timeout_expiry+0x64>)
   1a002:	f000 ffe9 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a006:	f385 8811 	msr	BASEPRI, r5
   1a00a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1a00e:	4620      	mov	r0, r4
   1a010:	bd38      	pop	{r3, r4, r5, pc}
   1a012:	bf00      	nop
   1a014:	2000a2cc 	.word	0x2000a2cc
   1a018:	0001fb83 	.word	0x0001fb83
   1a01c:	0001fb49 	.word	0x0001fb49

0001a020 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1a020:	b570      	push	{r4, r5, r6, lr}
   1a022:	4604      	mov	r4, r0
   1a024:	460d      	mov	r5, r1
	__asm__ volatile(
   1a026:	f04f 0320 	mov.w	r3, #32
   1a02a:	f3ef 8611 	mrs	r6, BASEPRI
   1a02e:	f383 8811 	msr	BASEPRI, r3
   1a032:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a036:	4816      	ldr	r0, [pc, #88]	; (1a090 <z_set_timeout_expiry+0x70>)
   1a038:	f7ff fd3c 	bl	19ab4 <z_spin_lock_valid>
   1a03c:	b940      	cbnz	r0, 1a050 <z_set_timeout_expiry+0x30>
   1a03e:	4915      	ldr	r1, [pc, #84]	; (1a094 <z_set_timeout_expiry+0x74>)
   1a040:	4815      	ldr	r0, [pc, #84]	; (1a098 <z_set_timeout_expiry+0x78>)
   1a042:	227c      	movs	r2, #124	; 0x7c
   1a044:	f000 fd22 	bl	1aa8c <printk>
   1a048:	217c      	movs	r1, #124	; 0x7c
   1a04a:	4812      	ldr	r0, [pc, #72]	; (1a094 <z_set_timeout_expiry+0x74>)
   1a04c:	f000 ffc4 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a050:	480f      	ldr	r0, [pc, #60]	; (1a090 <z_set_timeout_expiry+0x70>)
   1a052:	f7ff fd4b 	bl	19aec <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1a056:	f7ff fe7f 	bl	19d58 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1a05a:	2801      	cmp	r0, #1
   1a05c:	dd05      	ble.n	1a06a <z_set_timeout_expiry+0x4a>
   1a05e:	42a0      	cmp	r0, r4
   1a060:	dd03      	ble.n	1a06a <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   1a062:	4629      	mov	r1, r5
   1a064:	4620      	mov	r0, r4
   1a066:	f7f2 fb8d 	bl	c784 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a06a:	4809      	ldr	r0, [pc, #36]	; (1a090 <z_set_timeout_expiry+0x70>)
   1a06c:	f7ff fd30 	bl	19ad0 <z_spin_unlock_valid>
   1a070:	b940      	cbnz	r0, 1a084 <z_set_timeout_expiry+0x64>
   1a072:	4908      	ldr	r1, [pc, #32]	; (1a094 <z_set_timeout_expiry+0x74>)
   1a074:	4808      	ldr	r0, [pc, #32]	; (1a098 <z_set_timeout_expiry+0x78>)
   1a076:	22a7      	movs	r2, #167	; 0xa7
   1a078:	f000 fd08 	bl	1aa8c <printk>
   1a07c:	21a7      	movs	r1, #167	; 0xa7
   1a07e:	4805      	ldr	r0, [pc, #20]	; (1a094 <z_set_timeout_expiry+0x74>)
   1a080:	f000 ffaa 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a084:	f386 8811 	msr	BASEPRI, r6
   1a088:	f3bf 8f6f 	isb	sy
		}
	}
}
   1a08c:	bd70      	pop	{r4, r5, r6, pc}
   1a08e:	bf00      	nop
   1a090:	2000a2cc 	.word	0x2000a2cc
   1a094:	0001fb83 	.word	0x0001fb83
   1a098:	0001fb49 	.word	0x0001fb49

0001a09c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   1a09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a0a0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a0a2:	f7fe fe61 	bl	18d68 <z_time_slice>
	__asm__ volatile(
   1a0a6:	f04f 0320 	mov.w	r3, #32
   1a0aa:	f3ef 8511 	mrs	r5, BASEPRI
   1a0ae:	f383 8811 	msr	BASEPRI, r3
   1a0b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0b6:	4842      	ldr	r0, [pc, #264]	; (1a1c0 <z_clock_announce+0x124>)
   1a0b8:	f7ff fcfc 	bl	19ab4 <z_spin_lock_valid>
   1a0bc:	b940      	cbnz	r0, 1a0d0 <z_clock_announce+0x34>
   1a0be:	4941      	ldr	r1, [pc, #260]	; (1a1c4 <z_clock_announce+0x128>)
   1a0c0:	4841      	ldr	r0, [pc, #260]	; (1a1c8 <z_clock_announce+0x12c>)
   1a0c2:	227c      	movs	r2, #124	; 0x7c
   1a0c4:	f000 fce2 	bl	1aa8c <printk>
   1a0c8:	217c      	movs	r1, #124	; 0x7c
   1a0ca:	483e      	ldr	r0, [pc, #248]	; (1a1c4 <z_clock_announce+0x128>)
   1a0cc:	f000 ff84 	bl	1afd8 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1a0d0:	4f3e      	ldr	r7, [pc, #248]	; (1a1cc <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1a0d2:	483b      	ldr	r0, [pc, #236]	; (1a1c0 <z_clock_announce+0x124>)
	return list->head == list;
   1a0d4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1a1d0 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1a0d8:	4e3e      	ldr	r6, [pc, #248]	; (1a1d4 <z_clock_announce+0x138>)
   1a0da:	f7ff fd07 	bl	19aec <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1a0de:	603c      	str	r4, [r7, #0]
   1a0e0:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a0e4:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a0e6:	4544      	cmp	r4, r8
   1a0e8:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   1a0ec:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1a0f0:	d00b      	beq.n	1a10a <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a0f2:	b154      	cbz	r4, 1a10a <z_clock_announce+0x6e>
   1a0f4:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1a0f8:	429a      	cmp	r2, r3
   1a0fa:	eb70 090c 	sbcs.w	r9, r0, ip
   1a0fe:	da23      	bge.n	1a148 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a100:	1a9b      	subs	r3, r3, r2
   1a102:	eb6c 0c00 	sbc.w	ip, ip, r0
   1a106:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1a10a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1a10c:	1852      	adds	r2, r2, r1
   1a10e:	eb4e 0000 	adc.w	r0, lr, r0
   1a112:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1a116:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1a118:	f7ff fe1e 	bl	19d58 <next_timeout>
   1a11c:	4621      	mov	r1, r4
   1a11e:	f7f2 fb31 	bl	c784 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a122:	4827      	ldr	r0, [pc, #156]	; (1a1c0 <z_clock_announce+0x124>)
   1a124:	f7ff fcd4 	bl	19ad0 <z_spin_unlock_valid>
   1a128:	b940      	cbnz	r0, 1a13c <z_clock_announce+0xa0>
   1a12a:	4926      	ldr	r1, [pc, #152]	; (1a1c4 <z_clock_announce+0x128>)
   1a12c:	4826      	ldr	r0, [pc, #152]	; (1a1c8 <z_clock_announce+0x12c>)
   1a12e:	22a7      	movs	r2, #167	; 0xa7
   1a130:	f000 fcac 	bl	1aa8c <printk>
   1a134:	21a7      	movs	r1, #167	; 0xa7
   1a136:	4823      	ldr	r0, [pc, #140]	; (1a1c4 <z_clock_announce+0x128>)
   1a138:	f000 ff4e 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a13c:	f385 8811 	msr	BASEPRI, r5
   1a140:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1a148:	1859      	adds	r1, r3, r1
   1a14a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   1a14e:	1ad3      	subs	r3, r2, r3
   1a150:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   1a152:	2200      	movs	r2, #0
   1a154:	2300      	movs	r3, #0
		curr_tick += dt;
   1a156:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1a15a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1a15e:	4620      	mov	r0, r4
   1a160:	f7ff fe22 	bl	19da8 <remove_timeout>
   1a164:	4816      	ldr	r0, [pc, #88]	; (1a1c0 <z_clock_announce+0x124>)
   1a166:	f7ff fcb3 	bl	19ad0 <z_spin_unlock_valid>
   1a16a:	b940      	cbnz	r0, 1a17e <z_clock_announce+0xe2>
   1a16c:	4915      	ldr	r1, [pc, #84]	; (1a1c4 <z_clock_announce+0x128>)
   1a16e:	4816      	ldr	r0, [pc, #88]	; (1a1c8 <z_clock_announce+0x12c>)
   1a170:	22a7      	movs	r2, #167	; 0xa7
   1a172:	f000 fc8b 	bl	1aa8c <printk>
   1a176:	21a7      	movs	r1, #167	; 0xa7
   1a178:	4812      	ldr	r0, [pc, #72]	; (1a1c4 <z_clock_announce+0x128>)
   1a17a:	f000 ff2d 	bl	1afd8 <assert_post_action>
   1a17e:	f385 8811 	msr	BASEPRI, r5
   1a182:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a186:	4620      	mov	r0, r4
   1a188:	68a3      	ldr	r3, [r4, #8]
   1a18a:	4798      	blx	r3
	__asm__ volatile(
   1a18c:	f04f 0320 	mov.w	r3, #32
   1a190:	f3ef 8511 	mrs	r5, BASEPRI
   1a194:	f383 8811 	msr	BASEPRI, r3
   1a198:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a19c:	4808      	ldr	r0, [pc, #32]	; (1a1c0 <z_clock_announce+0x124>)
   1a19e:	f7ff fc89 	bl	19ab4 <z_spin_lock_valid>
   1a1a2:	b940      	cbnz	r0, 1a1b6 <z_clock_announce+0x11a>
   1a1a4:	4907      	ldr	r1, [pc, #28]	; (1a1c4 <z_clock_announce+0x128>)
   1a1a6:	4808      	ldr	r0, [pc, #32]	; (1a1c8 <z_clock_announce+0x12c>)
   1a1a8:	227c      	movs	r2, #124	; 0x7c
   1a1aa:	f000 fc6f 	bl	1aa8c <printk>
   1a1ae:	217c      	movs	r1, #124	; 0x7c
   1a1b0:	4804      	ldr	r0, [pc, #16]	; (1a1c4 <z_clock_announce+0x128>)
   1a1b2:	f000 ff11 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1b6:	4802      	ldr	r0, [pc, #8]	; (1a1c0 <z_clock_announce+0x124>)
   1a1b8:	f7ff fc98 	bl	19aec <z_spin_lock_set_owner>
	return k;
   1a1bc:	e790      	b.n	1a0e0 <z_clock_announce+0x44>
   1a1be:	bf00      	nop
   1a1c0:	2000a2cc 	.word	0x2000a2cc
   1a1c4:	0001fb83 	.word	0x0001fb83
   1a1c8:	0001fb49 	.word	0x0001fb49
   1a1cc:	2000a2c8 	.word	0x2000a2c8
   1a1d0:	20008424 	.word	0x20008424
   1a1d4:	20009990 	.word	0x20009990

0001a1d8 <z_tick_get>:

int64_t z_tick_get(void)
{
   1a1d8:	b570      	push	{r4, r5, r6, lr}
   1a1da:	f04f 0320 	mov.w	r3, #32
   1a1de:	f3ef 8611 	mrs	r6, BASEPRI
   1a1e2:	f383 8811 	msr	BASEPRI, r3
   1a1e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1ea:	4816      	ldr	r0, [pc, #88]	; (1a244 <z_tick_get+0x6c>)
   1a1ec:	f7ff fc62 	bl	19ab4 <z_spin_lock_valid>
   1a1f0:	b940      	cbnz	r0, 1a204 <z_tick_get+0x2c>
   1a1f2:	4915      	ldr	r1, [pc, #84]	; (1a248 <z_tick_get+0x70>)
   1a1f4:	4815      	ldr	r0, [pc, #84]	; (1a24c <z_tick_get+0x74>)
   1a1f6:	227c      	movs	r2, #124	; 0x7c
   1a1f8:	f000 fc48 	bl	1aa8c <printk>
   1a1fc:	217c      	movs	r1, #124	; 0x7c
   1a1fe:	4812      	ldr	r0, [pc, #72]	; (1a248 <z_tick_get+0x70>)
   1a200:	f000 feea 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a204:	480f      	ldr	r0, [pc, #60]	; (1a244 <z_tick_get+0x6c>)
   1a206:	f7ff fc71 	bl	19aec <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1a20a:	f7f2 faed 	bl	c7e8 <z_clock_elapsed>
   1a20e:	4b10      	ldr	r3, [pc, #64]	; (1a250 <z_tick_get+0x78>)
   1a210:	e9d3 4500 	ldrd	r4, r5, [r3]
   1a214:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a216:	480b      	ldr	r0, [pc, #44]	; (1a244 <z_tick_get+0x6c>)
   1a218:	f145 0500 	adc.w	r5, r5, #0
   1a21c:	f7ff fc58 	bl	19ad0 <z_spin_unlock_valid>
   1a220:	b940      	cbnz	r0, 1a234 <z_tick_get+0x5c>
   1a222:	4909      	ldr	r1, [pc, #36]	; (1a248 <z_tick_get+0x70>)
   1a224:	4809      	ldr	r0, [pc, #36]	; (1a24c <z_tick_get+0x74>)
   1a226:	22a7      	movs	r2, #167	; 0xa7
   1a228:	f000 fc30 	bl	1aa8c <printk>
   1a22c:	21a7      	movs	r1, #167	; 0xa7
   1a22e:	4806      	ldr	r0, [pc, #24]	; (1a248 <z_tick_get+0x70>)
   1a230:	f000 fed2 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a234:	f386 8811 	msr	BASEPRI, r6
   1a238:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a23c:	4620      	mov	r0, r4
   1a23e:	4629      	mov	r1, r5
   1a240:	bd70      	pop	{r4, r5, r6, pc}
   1a242:	bf00      	nop
   1a244:	2000a2cc 	.word	0x2000a2cc
   1a248:	0001fb83 	.word	0x0001fb83
   1a24c:	0001fb49 	.word	0x0001fb49
   1a250:	20009990 	.word	0x20009990

0001a254 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1a258:	6884      	ldr	r4, [r0, #8]
{
   1a25a:	4605      	mov	r5, r0
   1a25c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1a25e:	b1b4      	cbz	r4, 1a28e <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1a260:	7863      	ldrb	r3, [r4, #1]
   1a262:	2b01      	cmp	r3, #1
   1a264:	d145      	bne.n	1a2f2 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1a266:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1a26a:	d10a      	bne.n	1a282 <signal_poll_event+0x2e>
   1a26c:	22e3      	movs	r2, #227	; 0xe3
   1a26e:	492d      	ldr	r1, [pc, #180]	; (1a324 <signal_poll_event+0xd0>)
   1a270:	482d      	ldr	r0, [pc, #180]	; (1a328 <signal_poll_event+0xd4>)
   1a272:	f000 fc0b 	bl	1aa8c <printk>
   1a276:	21e3      	movs	r1, #227	; 0xe3
   1a278:	482a      	ldr	r0, [pc, #168]	; (1a324 <signal_poll_event+0xd0>)
   1a27a:	f000 fead 	bl	1afd8 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1a27e:	7b7b      	ldrb	r3, [r7, #13]
   1a280:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1a282:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a286:	f013 0302 	ands.w	r3, r3, #2
   1a28a:	d10a      	bne.n	1a2a2 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1a28c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a28e:	2000      	movs	r0, #0
	event->state |= state;
   1a290:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1a292:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1a294:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1a298:	430e      	orrs	r6, r1
   1a29a:	f366 3310 	bfi	r3, r6, #12, #5
   1a29e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1a2a0:	e00b      	b.n	1a2ba <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1a2a2:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1a2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a2aa:	bf08      	it	eq
   1a2ac:	f112 0f02 	cmneq.w	r2, #2
   1a2b0:	d105      	bne.n	1a2be <signal_poll_event+0x6a>
		poller->is_polling = false;
   1a2b2:	2300      	movs	r3, #0
		return -EAGAIN;
   1a2b4:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1a2b8:	7023      	strb	r3, [r4, #0]
}
   1a2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1a2be:	4638      	mov	r0, r7
   1a2c0:	f7fe fb30 	bl	18924 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1a2c4:	2e08      	cmp	r6, #8
   1a2c6:	bf0c      	ite	eq
   1a2c8:	f06f 0303 	mvneq.w	r3, #3
   1a2cc:	2300      	movne	r3, #0
   1a2ce:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a2d0:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a2d4:	06db      	lsls	r3, r3, #27
   1a2d6:	d104      	bne.n	1a2e2 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1a2d8:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1a2dc:	f1b8 0f00 	cmp.w	r8, #0
   1a2e0:	d001      	beq.n	1a2e6 <signal_poll_event+0x92>
		poller->is_polling = false;
   1a2e2:	2300      	movs	r3, #0
   1a2e4:	e7d2      	b.n	1a28c <signal_poll_event+0x38>
	z_ready_thread(thread);
   1a2e6:	4638      	mov	r0, r7
   1a2e8:	f7fe fc36 	bl	18b58 <z_ready_thread>
		poller->is_polling = false;
   1a2ec:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1a2f0:	e7cd      	b.n	1a28e <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1a2f2:	2b02      	cmp	r3, #2
   1a2f4:	d1f5      	bne.n	1a2e2 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1a2f6:	7823      	ldrb	r3, [r4, #0]
   1a2f8:	2b00      	cmp	r3, #0
   1a2fa:	d0c8      	beq.n	1a28e <signal_poll_event+0x3a>
   1a2fc:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1a300:	b177      	cbz	r7, 1a320 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1a302:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1a306:	f1a4 0910 	sub.w	r9, r4, #16
   1a30a:	f104 0010 	add.w	r0, r4, #16
   1a30e:	f7ff fe15 	bl	19f3c <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1a312:	4649      	mov	r1, r9
   1a314:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1a316:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1a31a:	f003 ff6e 	bl	1e1fa <k_work_submit_to_queue>
   1a31e:	e7e5      	b.n	1a2ec <signal_poll_event+0x98>
		poller->is_polling = false;
   1a320:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1a322:	e7b4      	b.n	1a28e <signal_poll_event+0x3a>
   1a324:	00022a07 	.word	0x00022a07
   1a328:	0001fb49 	.word	0x0001fb49

0001a32c <register_events>:
{
   1a32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1a330:	2600      	movs	r6, #0
{
   1a332:	4614      	mov	r4, r2
   1a334:	4681      	mov	r9, r0
	int events_registered = 0;
   1a336:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a338:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a4c4 <register_events+0x198>
   1a33c:	4f62      	ldr	r7, [pc, #392]	; (1a4c8 <register_events+0x19c>)
   1a33e:	4d63      	ldr	r5, [pc, #396]	; (1a4cc <register_events+0x1a0>)
{
   1a340:	9100      	str	r1, [sp, #0]
   1a342:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1a344:	9b00      	ldr	r3, [sp, #0]
   1a346:	429e      	cmp	r6, r3
   1a348:	db03      	blt.n	1a352 <register_events+0x26>
}
   1a34a:	4640      	mov	r0, r8
   1a34c:	b003      	add	sp, #12
   1a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1a352:	f04f 0220 	mov.w	r2, #32
   1a356:	f3ef 8b11 	mrs	fp, BASEPRI
   1a35a:	f382 8811 	msr	BASEPRI, r2
   1a35e:	f3bf 8f6f 	isb	sy
   1a362:	4650      	mov	r0, sl
   1a364:	f7ff fba6 	bl	19ab4 <z_spin_lock_valid>
   1a368:	b940      	cbnz	r0, 1a37c <register_events+0x50>
   1a36a:	4639      	mov	r1, r7
   1a36c:	4628      	mov	r0, r5
   1a36e:	227c      	movs	r2, #124	; 0x7c
   1a370:	f000 fb8c 	bl	1aa8c <printk>
   1a374:	217c      	movs	r1, #124	; 0x7c
   1a376:	4638      	mov	r0, r7
   1a378:	f000 fe2e 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a37c:	4650      	mov	r0, sl
   1a37e:	f7ff fbb5 	bl	19aec <z_spin_lock_set_owner>
	switch (event->type) {
   1a382:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a386:	f002 020f 	and.w	r2, r2, #15
   1a38a:	2a04      	cmp	r2, #4
   1a38c:	d848      	bhi.n	1a420 <register_events+0xf4>
   1a38e:	e8df f002 	tbb	[pc, r2]
   1a392:	402f      	.short	0x402f
   1a394:	4703      	.short	0x4703
   1a396:	2b          	.byte	0x2b
   1a397:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1a398:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a39c:	6892      	ldr	r2, [r2, #8]
   1a39e:	b33a      	cbz	r2, 1a3f0 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1a3a0:	2102      	movs	r1, #2
	event->poller = NULL;
   1a3a2:	2000      	movs	r0, #0
	event->state |= state;
   1a3a4:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1a3a8:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1a3ac:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1a3b0:	ea41 010c 	orr.w	r1, r1, ip
   1a3b4:	f361 3210 	bfi	r2, r1, #12, #5
   1a3b8:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1a3bc:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a3be:	4650      	mov	r0, sl
   1a3c0:	f7ff fb86 	bl	19ad0 <z_spin_unlock_valid>
   1a3c4:	b940      	cbnz	r0, 1a3d8 <register_events+0xac>
   1a3c6:	4639      	mov	r1, r7
   1a3c8:	4628      	mov	r0, r5
   1a3ca:	22a7      	movs	r2, #167	; 0xa7
   1a3cc:	f000 fb5e 	bl	1aa8c <printk>
   1a3d0:	21a7      	movs	r1, #167	; 0xa7
   1a3d2:	4638      	mov	r0, r7
   1a3d4:	f000 fe00 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a3d8:	f38b 8811 	msr	BASEPRI, fp
   1a3dc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a3e0:	3601      	adds	r6, #1
   1a3e2:	f109 0914 	add.w	r9, r9, #20
   1a3e6:	e7ad      	b.n	1a344 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1a3e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a3ec:	6812      	ldr	r2, [r2, #0]
   1a3ee:	bb0a      	cbnz	r2, 1a434 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1a3f0:	9b01      	ldr	r3, [sp, #4]
   1a3f2:	2b00      	cmp	r3, #0
   1a3f4:	d1e3      	bne.n	1a3be <register_events+0x92>
   1a3f6:	7822      	ldrb	r2, [r4, #0]
   1a3f8:	2a00      	cmp	r2, #0
   1a3fa:	d0e0      	beq.n	1a3be <register_events+0x92>
	switch (event->type) {
   1a3fc:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a400:	f002 020f 	and.w	r2, r2, #15
   1a404:	2a04      	cmp	r2, #4
   1a406:	d852      	bhi.n	1a4ae <register_events+0x182>
   1a408:	e8df f002 	tbb	[pc, r2]
   1a40c:	51164029 	.word	0x51164029
   1a410:	2e          	.byte	0x2e
   1a411:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1a412:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a416:	6892      	ldr	r2, [r2, #8]
   1a418:	2a00      	cmp	r2, #0
   1a41a:	d0e9      	beq.n	1a3f0 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1a41c:	2101      	movs	r1, #1
   1a41e:	e7c0      	b.n	1a3a2 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1a420:	4628      	mov	r0, r5
   1a422:	2254      	movs	r2, #84	; 0x54
   1a424:	492a      	ldr	r1, [pc, #168]	; (1a4d0 <register_events+0x1a4>)
   1a426:	f000 fb31 	bl	1aa8c <printk>
   1a42a:	2154      	movs	r1, #84	; 0x54
   1a42c:	4828      	ldr	r0, [pc, #160]	; (1a4d0 <register_events+0x1a4>)
   1a42e:	f000 fdd3 	bl	1afd8 <assert_post_action>
		break;
   1a432:	e7dd      	b.n	1a3f0 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a434:	2104      	movs	r1, #4
   1a436:	e7b4      	b.n	1a3a2 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a438:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a43c:	b942      	cbnz	r2, 1a450 <register_events+0x124>
   1a43e:	4628      	mov	r0, r5
   1a440:	4923      	ldr	r1, [pc, #140]	; (1a4d0 <register_events+0x1a4>)
   1a442:	227e      	movs	r2, #126	; 0x7e
   1a444:	f000 fb22 	bl	1aa8c <printk>
   1a448:	217e      	movs	r1, #126	; 0x7e
   1a44a:	4821      	ldr	r0, [pc, #132]	; (1a4d0 <register_events+0x1a4>)
   1a44c:	f000 fdc4 	bl	1afd8 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1a450:	4622      	mov	r2, r4
   1a452:	4649      	mov	r1, r9
   1a454:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a458:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1a45a:	f003 fee2 	bl	1e222 <add_event>
	event->poller = poller;
   1a45e:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1a462:	f108 0801 	add.w	r8, r8, #1
   1a466:	e7aa      	b.n	1a3be <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a468:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a46c:	b942      	cbnz	r2, 1a480 <register_events+0x154>
   1a46e:	4628      	mov	r0, r5
   1a470:	4917      	ldr	r1, [pc, #92]	; (1a4d0 <register_events+0x1a4>)
   1a472:	2282      	movs	r2, #130	; 0x82
   1a474:	f000 fb0a 	bl	1aa8c <printk>
   1a478:	2182      	movs	r1, #130	; 0x82
   1a47a:	4815      	ldr	r0, [pc, #84]	; (1a4d0 <register_events+0x1a4>)
   1a47c:	f000 fdac 	bl	1afd8 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1a480:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a484:	4622      	mov	r2, r4
   1a486:	4649      	mov	r1, r9
   1a488:	3014      	adds	r0, #20
   1a48a:	e7e6      	b.n	1a45a <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a48c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a490:	b942      	cbnz	r2, 1a4a4 <register_events+0x178>
   1a492:	4628      	mov	r0, r5
   1a494:	490e      	ldr	r1, [pc, #56]	; (1a4d0 <register_events+0x1a4>)
   1a496:	2286      	movs	r2, #134	; 0x86
   1a498:	f000 faf8 	bl	1aa8c <printk>
   1a49c:	2186      	movs	r1, #134	; 0x86
   1a49e:	480c      	ldr	r0, [pc, #48]	; (1a4d0 <register_events+0x1a4>)
   1a4a0:	f000 fd9a 	bl	1afd8 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1a4a4:	4622      	mov	r2, r4
   1a4a6:	4649      	mov	r1, r9
   1a4a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a4ac:	e7d5      	b.n	1a45a <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1a4ae:	4628      	mov	r0, r5
   1a4b0:	228d      	movs	r2, #141	; 0x8d
   1a4b2:	4907      	ldr	r1, [pc, #28]	; (1a4d0 <register_events+0x1a4>)
   1a4b4:	f000 faea 	bl	1aa8c <printk>
   1a4b8:	218d      	movs	r1, #141	; 0x8d
   1a4ba:	4805      	ldr	r0, [pc, #20]	; (1a4d0 <register_events+0x1a4>)
   1a4bc:	f000 fd8c 	bl	1afd8 <assert_post_action>
		break;
   1a4c0:	e7cd      	b.n	1a45e <register_events+0x132>
   1a4c2:	bf00      	nop
   1a4c4:	2000a2d0 	.word	0x2000a2d0
   1a4c8:	0001fb83 	.word	0x0001fb83
   1a4cc:	0001fb49 	.word	0x0001fb49
   1a4d0:	00022a07 	.word	0x00022a07

0001a4d4 <clear_event_registrations>:
{
   1a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a4d8:	2414      	movs	r4, #20
   1a4da:	4617      	mov	r7, r2
	while (num_events--) {
   1a4dc:	460e      	mov	r6, r1
   1a4de:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1a4e2:	4d3d      	ldr	r5, [pc, #244]	; (1a5d8 <clear_event_registrations+0x104>)
   1a4e4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1a5dc <clear_event_registrations+0x108>
   1a4e8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a5e0 <clear_event_registrations+0x10c>
	while (num_events--) {
   1a4ec:	b90e      	cbnz	r6, 1a4f2 <clear_event_registrations+0x1e>
}
   1a4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1a4f2:	2300      	movs	r3, #0
   1a4f4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1a4f8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a4fc:	f1a4 0a14 	sub.w	sl, r4, #20
   1a500:	f003 030f 	and.w	r3, r3, #15
   1a504:	2b04      	cmp	r3, #4
   1a506:	d831      	bhi.n	1a56c <clear_event_registrations+0x98>
   1a508:	e8df f003 	tbb	[pc, r3]
   1a50c:	30032539 	.word	0x30032539
   1a510:	1a          	.byte	0x1a
   1a511:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a512:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a516:	b943      	cbnz	r3, 1a52a <clear_event_registrations+0x56>
   1a518:	4629      	mov	r1, r5
   1a51a:	229d      	movs	r2, #157	; 0x9d
   1a51c:	4640      	mov	r0, r8
   1a51e:	f000 fab5 	bl	1aa8c <printk>
   1a522:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a524:	4628      	mov	r0, r5
   1a526:	f000 fd57 	bl	1afd8 <assert_post_action>
	return node->next != NULL;
   1a52a:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1a52e:	b333      	cbz	r3, 1a57e <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1a530:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1a534:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a536:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a538:	2300      	movs	r3, #0
	node->prev = NULL;
   1a53a:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1a53e:	e01e      	b.n	1a57e <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a540:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a544:	2b00      	cmp	r3, #0
   1a546:	d1f0      	bne.n	1a52a <clear_event_registrations+0x56>
   1a548:	4629      	mov	r1, r5
   1a54a:	22a1      	movs	r2, #161	; 0xa1
   1a54c:	4640      	mov	r0, r8
   1a54e:	f000 fa9d 	bl	1aa8c <printk>
   1a552:	21a1      	movs	r1, #161	; 0xa1
   1a554:	e7e6      	b.n	1a524 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a556:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d1e5      	bne.n	1a52a <clear_event_registrations+0x56>
   1a55e:	4629      	mov	r1, r5
   1a560:	22a5      	movs	r2, #165	; 0xa5
   1a562:	4640      	mov	r0, r8
   1a564:	f000 fa92 	bl	1aa8c <printk>
   1a568:	21a5      	movs	r1, #165	; 0xa5
   1a56a:	e7db      	b.n	1a524 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1a56c:	4629      	mov	r1, r5
   1a56e:	4640      	mov	r0, r8
   1a570:	22ac      	movs	r2, #172	; 0xac
   1a572:	f000 fa8b 	bl	1aa8c <printk>
   1a576:	21ac      	movs	r1, #172	; 0xac
   1a578:	4628      	mov	r0, r5
   1a57a:	f000 fd2d 	bl	1afd8 <assert_post_action>
   1a57e:	4648      	mov	r0, r9
   1a580:	f7ff faa6 	bl	19ad0 <z_spin_unlock_valid>
   1a584:	b940      	cbnz	r0, 1a598 <clear_event_registrations+0xc4>
   1a586:	4640      	mov	r0, r8
   1a588:	4916      	ldr	r1, [pc, #88]	; (1a5e4 <clear_event_registrations+0x110>)
   1a58a:	22a7      	movs	r2, #167	; 0xa7
   1a58c:	f000 fa7e 	bl	1aa8c <printk>
   1a590:	21a7      	movs	r1, #167	; 0xa7
   1a592:	4814      	ldr	r0, [pc, #80]	; (1a5e4 <clear_event_registrations+0x110>)
   1a594:	f000 fd20 	bl	1afd8 <assert_post_action>
   1a598:	f387 8811 	msr	BASEPRI, r7
   1a59c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a5a0:	f04f 0320 	mov.w	r3, #32
   1a5a4:	f3ef 8711 	mrs	r7, BASEPRI
   1a5a8:	f383 8811 	msr	BASEPRI, r3
   1a5ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a5b0:	4648      	mov	r0, r9
   1a5b2:	f7ff fa7f 	bl	19ab4 <z_spin_lock_valid>
   1a5b6:	b940      	cbnz	r0, 1a5ca <clear_event_registrations+0xf6>
   1a5b8:	4640      	mov	r0, r8
   1a5ba:	490a      	ldr	r1, [pc, #40]	; (1a5e4 <clear_event_registrations+0x110>)
   1a5bc:	227c      	movs	r2, #124	; 0x7c
   1a5be:	f000 fa65 	bl	1aa8c <printk>
   1a5c2:	217c      	movs	r1, #124	; 0x7c
   1a5c4:	4807      	ldr	r0, [pc, #28]	; (1a5e4 <clear_event_registrations+0x110>)
   1a5c6:	f000 fd07 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a5ca:	4648      	mov	r0, r9
   1a5cc:	f7ff fa8e 	bl	19aec <z_spin_lock_set_owner>
	return k;
   1a5d0:	4654      	mov	r4, sl
   1a5d2:	3e01      	subs	r6, #1
   1a5d4:	e78a      	b.n	1a4ec <clear_event_registrations+0x18>
   1a5d6:	bf00      	nop
   1a5d8:	00022a07 	.word	0x00022a07
   1a5dc:	0001fb49 	.word	0x0001fb49
   1a5e0:	2000a2d0 	.word	0x2000a2d0
   1a5e4:	0001fb83 	.word	0x0001fb83

0001a5e8 <k_poll_event_init>:
{
   1a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5ea:	4605      	mov	r5, r0
   1a5ec:	460f      	mov	r7, r1
   1a5ee:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1a5f0:	4614      	mov	r4, r2
   1a5f2:	b142      	cbz	r2, 1a606 <k_poll_event_init+0x1e>
   1a5f4:	4915      	ldr	r1, [pc, #84]	; (1a64c <k_poll_event_init+0x64>)
   1a5f6:	4816      	ldr	r0, [pc, #88]	; (1a650 <k_poll_event_init+0x68>)
   1a5f8:	222d      	movs	r2, #45	; 0x2d
   1a5fa:	f000 fa47 	bl	1aa8c <printk>
   1a5fe:	212d      	movs	r1, #45	; 0x2d
   1a600:	4812      	ldr	r0, [pc, #72]	; (1a64c <k_poll_event_init+0x64>)
   1a602:	f000 fce9 	bl	1afd8 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1a606:	2f0f      	cmp	r7, #15
   1a608:	d908      	bls.n	1a61c <k_poll_event_init+0x34>
   1a60a:	4910      	ldr	r1, [pc, #64]	; (1a64c <k_poll_event_init+0x64>)
   1a60c:	4810      	ldr	r0, [pc, #64]	; (1a650 <k_poll_event_init+0x68>)
   1a60e:	222f      	movs	r2, #47	; 0x2f
   1a610:	f000 fa3c 	bl	1aa8c <printk>
   1a614:	212f      	movs	r1, #47	; 0x2f
   1a616:	480d      	ldr	r0, [pc, #52]	; (1a64c <k_poll_event_init+0x64>)
   1a618:	f000 fcde 	bl	1afd8 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1a61c:	b946      	cbnz	r6, 1a630 <k_poll_event_init+0x48>
   1a61e:	490b      	ldr	r1, [pc, #44]	; (1a64c <k_poll_event_init+0x64>)
   1a620:	480b      	ldr	r0, [pc, #44]	; (1a650 <k_poll_event_init+0x68>)
   1a622:	2230      	movs	r2, #48	; 0x30
   1a624:	f000 fa32 	bl	1aa8c <printk>
   1a628:	2130      	movs	r1, #48	; 0x30
   1a62a:	4808      	ldr	r0, [pc, #32]	; (1a64c <k_poll_event_init+0x64>)
   1a62c:	f000 fcd4 	bl	1afd8 <assert_post_action>
	event->poller = NULL;
   1a630:	2300      	movs	r3, #0
	event->type = type;
   1a632:	0464      	lsls	r4, r4, #17
   1a634:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1a636:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1a638:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1a63c:	7b2b      	ldrb	r3, [r5, #12]
   1a63e:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1a642:	433c      	orrs	r4, r7
   1a644:	431c      	orrs	r4, r3
	event->obj = obj;
   1a646:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a64c:	00022a07 	.word	0x00022a07
   1a650:	0001fb49 	.word	0x0001fb49

0001a654 <z_impl_k_poll>:
{
   1a654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a658:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1a65a:	4b64      	ldr	r3, [pc, #400]	; (1a7ec <z_impl_k_poll+0x198>)
{
   1a65c:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1a65e:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1a660:	2301      	movs	r3, #1
{
   1a662:	4688      	mov	r8, r1
   1a664:	4616      	mov	r6, r2
   1a666:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1a668:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1a66c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1a670:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1a674:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a678:	b153      	cbz	r3, 1a690 <z_impl_k_poll+0x3c>
   1a67a:	495d      	ldr	r1, [pc, #372]	; (1a7f0 <z_impl_k_poll+0x19c>)
   1a67c:	485d      	ldr	r0, [pc, #372]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a67e:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a682:	f000 fa03 	bl	1aa8c <printk>
   1a686:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a68a:	4859      	ldr	r0, [pc, #356]	; (1a7f0 <z_impl_k_poll+0x19c>)
   1a68c:	f000 fca4 	bl	1afd8 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1a690:	b954      	cbnz	r4, 1a6a8 <z_impl_k_poll+0x54>
   1a692:	4957      	ldr	r1, [pc, #348]	; (1a7f0 <z_impl_k_poll+0x19c>)
   1a694:	4857      	ldr	r0, [pc, #348]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a696:	f240 1205 	movw	r2, #261	; 0x105
   1a69a:	f000 f9f7 	bl	1aa8c <printk>
   1a69e:	f240 1105 	movw	r1, #261	; 0x105
   1a6a2:	4853      	ldr	r0, [pc, #332]	; (1a7f0 <z_impl_k_poll+0x19c>)
   1a6a4:	f000 fc98 	bl	1afd8 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1a6a8:	f1b8 0f00 	cmp.w	r8, #0
   1a6ac:	da0a      	bge.n	1a6c4 <z_impl_k_poll+0x70>
   1a6ae:	4950      	ldr	r1, [pc, #320]	; (1a7f0 <z_impl_k_poll+0x19c>)
   1a6b0:	4850      	ldr	r0, [pc, #320]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a6b2:	f44f 7283 	mov.w	r2, #262	; 0x106
   1a6b6:	f000 f9e9 	bl	1aa8c <printk>
   1a6ba:	f44f 7183 	mov.w	r1, #262	; 0x106
   1a6be:	484c      	ldr	r0, [pc, #304]	; (1a7f0 <z_impl_k_poll+0x19c>)
   1a6c0:	f000 fc8a 	bl	1afd8 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1a6c4:	ea56 0305 	orrs.w	r3, r6, r5
   1a6c8:	bf0c      	ite	eq
   1a6ca:	2301      	moveq	r3, #1
   1a6cc:	2300      	movne	r3, #0
   1a6ce:	4641      	mov	r1, r8
   1a6d0:	464a      	mov	r2, r9
   1a6d2:	4620      	mov	r0, r4
   1a6d4:	f7ff fe2a 	bl	1a32c <register_events>
   1a6d8:	4680      	mov	r8, r0
   1a6da:	f04f 0320 	mov.w	r3, #32
   1a6de:	f3ef 8911 	mrs	r9, BASEPRI
   1a6e2:	f383 8811 	msr	BASEPRI, r3
   1a6e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a6ea:	4843      	ldr	r0, [pc, #268]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a6ec:	f7ff f9e2 	bl	19ab4 <z_spin_lock_valid>
   1a6f0:	b940      	cbnz	r0, 1a704 <z_impl_k_poll+0xb0>
   1a6f2:	4942      	ldr	r1, [pc, #264]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a6f4:	483f      	ldr	r0, [pc, #252]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a6f6:	227c      	movs	r2, #124	; 0x7c
   1a6f8:	f000 f9c8 	bl	1aa8c <printk>
   1a6fc:	217c      	movs	r1, #124	; 0x7c
   1a6fe:	483f      	ldr	r0, [pc, #252]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a700:	f000 fc6a 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a704:	483c      	ldr	r0, [pc, #240]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a706:	f7ff f9f1 	bl	19aec <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1a70a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1a70e:	b9d3      	cbnz	r3, 1a746 <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1a710:	4620      	mov	r0, r4
   1a712:	464a      	mov	r2, r9
   1a714:	4641      	mov	r1, r8
   1a716:	f7ff fedd 	bl	1a4d4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a71a:	4837      	ldr	r0, [pc, #220]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a71c:	f7ff f9d8 	bl	19ad0 <z_spin_unlock_valid>
   1a720:	b940      	cbnz	r0, 1a734 <z_impl_k_poll+0xe0>
   1a722:	4936      	ldr	r1, [pc, #216]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a724:	4833      	ldr	r0, [pc, #204]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a726:	22a7      	movs	r2, #167	; 0xa7
   1a728:	f000 f9b0 	bl	1aa8c <printk>
   1a72c:	21a7      	movs	r1, #167	; 0xa7
   1a72e:	4833      	ldr	r0, [pc, #204]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a730:	f000 fc52 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a734:	f389 8811 	msr	BASEPRI, r9
   1a738:	f3bf 8f6f 	isb	sy
		return 0;
   1a73c:	2500      	movs	r5, #0
}
   1a73e:	4628      	mov	r0, r5
   1a740:	b005      	add	sp, #20
   1a742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1a746:	2300      	movs	r3, #0
   1a748:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a74c:	ea56 0305 	orrs.w	r3, r6, r5
   1a750:	d113      	bne.n	1a77a <z_impl_k_poll+0x126>
   1a752:	4829      	ldr	r0, [pc, #164]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a754:	f7ff f9bc 	bl	19ad0 <z_spin_unlock_valid>
   1a758:	b940      	cbnz	r0, 1a76c <z_impl_k_poll+0x118>
   1a75a:	4928      	ldr	r1, [pc, #160]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a75c:	4825      	ldr	r0, [pc, #148]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a75e:	22a7      	movs	r2, #167	; 0xa7
   1a760:	f000 f994 	bl	1aa8c <printk>
   1a764:	21a7      	movs	r1, #167	; 0xa7
   1a766:	4825      	ldr	r0, [pc, #148]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a768:	f000 fc36 	bl	1afd8 <assert_post_action>
   1a76c:	f389 8811 	msr	BASEPRI, r9
   1a770:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a774:	f06f 050a 	mvn.w	r5, #10
   1a778:	e7e1      	b.n	1a73e <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a77a:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a77e:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a780:	4649      	mov	r1, r9
   1a782:	481d      	ldr	r0, [pc, #116]	; (1a7f8 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a784:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a788:	f7fe fd50 	bl	1922c <z_pend_curr>
   1a78c:	4605      	mov	r5, r0
	__asm__ volatile(
   1a78e:	f04f 0320 	mov.w	r3, #32
   1a792:	f3ef 8611 	mrs	r6, BASEPRI
   1a796:	f383 8811 	msr	BASEPRI, r3
   1a79a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a79e:	4816      	ldr	r0, [pc, #88]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a7a0:	f7ff f988 	bl	19ab4 <z_spin_lock_valid>
   1a7a4:	b940      	cbnz	r0, 1a7b8 <z_impl_k_poll+0x164>
   1a7a6:	4915      	ldr	r1, [pc, #84]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a7a8:	4812      	ldr	r0, [pc, #72]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a7aa:	227c      	movs	r2, #124	; 0x7c
   1a7ac:	f000 f96e 	bl	1aa8c <printk>
   1a7b0:	217c      	movs	r1, #124	; 0x7c
   1a7b2:	4812      	ldr	r0, [pc, #72]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a7b4:	f000 fc10 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a7b8:	480f      	ldr	r0, [pc, #60]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a7ba:	f7ff f997 	bl	19aec <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1a7be:	4620      	mov	r0, r4
   1a7c0:	4632      	mov	r2, r6
   1a7c2:	4641      	mov	r1, r8
   1a7c4:	f7ff fe86 	bl	1a4d4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7c8:	480b      	ldr	r0, [pc, #44]	; (1a7f8 <z_impl_k_poll+0x1a4>)
   1a7ca:	f7ff f981 	bl	19ad0 <z_spin_unlock_valid>
   1a7ce:	b940      	cbnz	r0, 1a7e2 <z_impl_k_poll+0x18e>
   1a7d0:	490a      	ldr	r1, [pc, #40]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a7d2:	4808      	ldr	r0, [pc, #32]	; (1a7f4 <z_impl_k_poll+0x1a0>)
   1a7d4:	22a7      	movs	r2, #167	; 0xa7
   1a7d6:	f000 f959 	bl	1aa8c <printk>
   1a7da:	21a7      	movs	r1, #167	; 0xa7
   1a7dc:	4807      	ldr	r0, [pc, #28]	; (1a7fc <z_impl_k_poll+0x1a8>)
   1a7de:	f000 fbfb 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a7e2:	f386 8811 	msr	BASEPRI, r6
   1a7e6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a7ea:	e7a8      	b.n	1a73e <z_impl_k_poll+0xea>
   1a7ec:	2000a27c 	.word	0x2000a27c
   1a7f0:	00022a07 	.word	0x00022a07
   1a7f4:	0001fb49 	.word	0x0001fb49
   1a7f8:	2000a2d0 	.word	0x2000a2d0
   1a7fc:	0001fb83 	.word	0x0001fb83

0001a800 <z_impl_k_poll_signal_raise>:
{
   1a800:	b570      	push	{r4, r5, r6, lr}
   1a802:	4604      	mov	r4, r0
   1a804:	460d      	mov	r5, r1
	__asm__ volatile(
   1a806:	f04f 0320 	mov.w	r3, #32
   1a80a:	f3ef 8611 	mrs	r6, BASEPRI
   1a80e:	f383 8811 	msr	BASEPRI, r3
   1a812:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a816:	481c      	ldr	r0, [pc, #112]	; (1a888 <z_impl_k_poll_signal_raise+0x88>)
   1a818:	f7ff f94c 	bl	19ab4 <z_spin_lock_valid>
   1a81c:	b940      	cbnz	r0, 1a830 <z_impl_k_poll_signal_raise+0x30>
   1a81e:	491b      	ldr	r1, [pc, #108]	; (1a88c <z_impl_k_poll_signal_raise+0x8c>)
   1a820:	481b      	ldr	r0, [pc, #108]	; (1a890 <z_impl_k_poll_signal_raise+0x90>)
   1a822:	227c      	movs	r2, #124	; 0x7c
   1a824:	f000 f932 	bl	1aa8c <printk>
   1a828:	217c      	movs	r1, #124	; 0x7c
   1a82a:	4818      	ldr	r0, [pc, #96]	; (1a88c <z_impl_k_poll_signal_raise+0x8c>)
   1a82c:	f000 fbd4 	bl	1afd8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a830:	4815      	ldr	r0, [pc, #84]	; (1a888 <z_impl_k_poll_signal_raise+0x88>)
   1a832:	f7ff f95b 	bl	19aec <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1a836:	2101      	movs	r1, #1
	return list->head == list;
   1a838:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1a83a:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a83c:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1a83e:	60a1      	str	r1, [r4, #8]
   1a840:	d112      	bne.n	1a868 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a842:	4811      	ldr	r0, [pc, #68]	; (1a888 <z_impl_k_poll_signal_raise+0x88>)
   1a844:	f7ff f944 	bl	19ad0 <z_spin_unlock_valid>
   1a848:	b940      	cbnz	r0, 1a85c <z_impl_k_poll_signal_raise+0x5c>
   1a84a:	4910      	ldr	r1, [pc, #64]	; (1a88c <z_impl_k_poll_signal_raise+0x8c>)
   1a84c:	4810      	ldr	r0, [pc, #64]	; (1a890 <z_impl_k_poll_signal_raise+0x90>)
   1a84e:	22a7      	movs	r2, #167	; 0xa7
   1a850:	f000 f91c 	bl	1aa8c <printk>
   1a854:	21a7      	movs	r1, #167	; 0xa7
   1a856:	480d      	ldr	r0, [pc, #52]	; (1a88c <z_impl_k_poll_signal_raise+0x8c>)
   1a858:	f000 fbbe 	bl	1afd8 <assert_post_action>
	__asm__ volatile(
   1a85c:	f386 8811 	msr	BASEPRI, r6
   1a860:	f3bf 8f6f 	isb	sy
		return 0;
   1a864:	2400      	movs	r4, #0
   1a866:	e00d      	b.n	1a884 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1a868:	e9d0 3200 	ldrd	r3, r2, [r0]
   1a86c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a86e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a870:	2300      	movs	r3, #0
	node->prev = NULL;
   1a872:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a876:	f7ff fced 	bl	1a254 <signal_poll_event>
	z_reschedule(&lock, key);
   1a87a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a87c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a87e:	4802      	ldr	r0, [pc, #8]	; (1a888 <z_impl_k_poll_signal_raise+0x88>)
   1a880:	f7fd ff96 	bl	187b0 <z_reschedule>
}
   1a884:	4620      	mov	r0, r4
   1a886:	bd70      	pop	{r4, r5, r6, pc}
   1a888:	2000a2d0 	.word	0x2000a2d0
   1a88c:	0001fb83 	.word	0x0001fb83
   1a890:	0001fb49 	.word	0x0001fb49

0001a894 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1a894:	2803      	cmp	r0, #3
{
   1a896:	b538      	push	{r3, r4, r5, lr}
   1a898:	4604      	mov	r4, r0
   1a89a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1a89c:	d901      	bls.n	1a8a2 <k_aligned_alloc+0xe>
   1a89e:	0783      	lsls	r3, r0, #30
   1a8a0:	d008      	beq.n	1a8b4 <k_aligned_alloc+0x20>
   1a8a2:	490e      	ldr	r1, [pc, #56]	; (1a8dc <k_aligned_alloc+0x48>)
   1a8a4:	480e      	ldr	r0, [pc, #56]	; (1a8e0 <k_aligned_alloc+0x4c>)
   1a8a6:	223e      	movs	r2, #62	; 0x3e
   1a8a8:	f000 f8f0 	bl	1aa8c <printk>
   1a8ac:	213e      	movs	r1, #62	; 0x3e
   1a8ae:	480b      	ldr	r0, [pc, #44]	; (1a8dc <k_aligned_alloc+0x48>)
   1a8b0:	f000 fb92 	bl	1afd8 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1a8b4:	1e63      	subs	r3, r4, #1
   1a8b6:	4223      	tst	r3, r4
   1a8b8:	d008      	beq.n	1a8cc <k_aligned_alloc+0x38>
   1a8ba:	4908      	ldr	r1, [pc, #32]	; (1a8dc <k_aligned_alloc+0x48>)
   1a8bc:	4808      	ldr	r0, [pc, #32]	; (1a8e0 <k_aligned_alloc+0x4c>)
   1a8be:	2242      	movs	r2, #66	; 0x42
   1a8c0:	f000 f8e4 	bl	1aa8c <printk>
   1a8c4:	2142      	movs	r1, #66	; 0x42
   1a8c6:	4805      	ldr	r0, [pc, #20]	; (1a8dc <k_aligned_alloc+0x48>)
   1a8c8:	f000 fb86 	bl	1afd8 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a8cc:	462a      	mov	r2, r5
   1a8ce:	4621      	mov	r1, r4
}
   1a8d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a8d4:	4803      	ldr	r0, [pc, #12]	; (1a8e4 <k_aligned_alloc+0x50>)
   1a8d6:	f003 bce4 	b.w	1e2a2 <z_heap_aligned_alloc>
   1a8da:	bf00      	nop
   1a8dc:	00022a28 	.word	0x00022a28
   1a8e0:	0001fb49 	.word	0x0001fb49
   1a8e4:	20008510 	.word	0x20008510

0001a8e8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a8e8:	b538      	push	{r3, r4, r5, lr}
   1a8ea:	4604      	mov	r4, r0
   1a8ec:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a8ee:	f003 fbeb 	bl	1e0c8 <k_is_in_isr>
   1a8f2:	b958      	cbnz	r0, 1a90c <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a8f4:	4b07      	ldr	r3, [pc, #28]	; (1a914 <z_thread_aligned_alloc+0x2c>)
   1a8f6:	689b      	ldr	r3, [r3, #8]
   1a8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1a8fc:	b143      	cbz	r3, 1a910 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a8fe:	462a      	mov	r2, r5
   1a900:	4621      	mov	r1, r4
   1a902:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a908:	f003 bccb 	b.w	1e2a2 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a90c:	4b02      	ldr	r3, [pc, #8]	; (1a918 <z_thread_aligned_alloc+0x30>)
   1a90e:	e7f6      	b.n	1a8fe <z_thread_aligned_alloc+0x16>
}
   1a910:	bd38      	pop	{r3, r4, r5, pc}
   1a912:	bf00      	nop
   1a914:	2000a27c 	.word	0x2000a27c
   1a918:	20008510 	.word	0x20008510

0001a91c <_ZN13DeviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
}
   1a91c:	2001      	movs	r0, #1
   1a91e:	4770      	bx	lr

0001a920 <_ZN13DeviceManager16le_param_updatedEP7bt_connttt>:
{}
   1a920:	4770      	bx	lr

0001a922 <_ZN13DeviceManager10app_led_cbEb>:
{
   1a922:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1a924:	2003      	movs	r0, #3
   1a926:	f7fc b9eb 	b.w	16d00 <dk_set_led>

0001a92a <_ZN13DeviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1a92a:	f7ef b825 	b.w	9978 <_ZN13DeviceManager8initScanEv>

0001a92e <_ZN13DeviceManager14checkAddressesEPcS0_>:

bool DeviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1a92e:	2300      	movs	r3, #0
{
   1a930:	b530      	push	{r4, r5, lr}
   1a932:	1e42      	subs	r2, r0, #1
   1a934:	3901      	subs	r1, #1
   1a936:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1a938:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1a93c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a940:	42a5      	cmp	r5, r4
		{
			cnt++;
   1a942:	bf04      	itt	eq
   1a944:	3301      	addeq	r3, #1
   1a946:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   1a948:	4282      	cmp	r2, r0
   1a94a:	d1f5      	bne.n	1a938 <_ZN13DeviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1a94c:	3b11      	subs	r3, #17
   1a94e:	4258      	negs	r0, r3
   1a950:	4158      	adcs	r0, r3
   1a952:	bd30      	pop	{r4, r5, pc}

0001a954 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1a954:	f001 bd78 	b.w	1c448 <bt_conn_get_dst>

0001a958 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a958:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a95a:	2364      	movs	r3, #100	; 0x64
{
   1a95c:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a95e:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a960:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a962:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a966:	b111      	cbz	r1, 1a96e <u8_to_dec+0x16>
   1a968:	3d01      	subs	r5, #1
   1a96a:	d101      	bne.n	1a970 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a96c:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1a970:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a974:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a976:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a978:	d202      	bcs.n	1a980 <u8_to_dec+0x28>
   1a97a:	2b01      	cmp	r3, #1
   1a97c:	d000      	beq.n	1a980 <u8_to_dec+0x28>
   1a97e:	b130      	cbz	r0, 1a98e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a980:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a982:	3901      	subs	r1, #1
			num_digits++;
   1a984:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a986:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a98a:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a98c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a98e:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1a992:	fbb3 f3fc 	udiv	r3, r3, ip
   1a996:	b2d2      	uxtb	r2, r2
   1a998:	e7e5      	b.n	1a966 <u8_to_dec+0xe>

0001a99a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a99a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a99e:	b2db      	uxtb	r3, r3
   1a9a0:	2b09      	cmp	r3, #9
   1a9a2:	d802      	bhi.n	1a9aa <char2hex+0x10>
		*x = c - '0';
   1a9a4:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a9a6:	2000      	movs	r0, #0
   1a9a8:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a9aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a9ae:	2b05      	cmp	r3, #5
   1a9b0:	d802      	bhi.n	1a9b8 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a9b2:	3857      	subs	r0, #87	; 0x57
   1a9b4:	7008      	strb	r0, [r1, #0]
   1a9b6:	e7f6      	b.n	1a9a6 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a9b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a9bc:	2b05      	cmp	r3, #5
   1a9be:	d801      	bhi.n	1a9c4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a9c0:	3837      	subs	r0, #55	; 0x37
   1a9c2:	e7f7      	b.n	1a9b4 <char2hex+0x1a>
		return -EINVAL;
   1a9c4:	f06f 0015 	mvn.w	r0, #21
}
   1a9c8:	4770      	bx	lr

0001a9ca <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a9ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a9cc:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a9ce:	f001 0001 	and.w	r0, r1, #1
   1a9d2:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1a9d6:	429d      	cmp	r5, r3
   1a9d8:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1a9dc:	d903      	bls.n	1a9e6 <hex2bin+0x1c>
		return 0;
   1a9de:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1a9e0:	4628      	mov	r0, r5
   1a9e2:	b003      	add	sp, #12
   1a9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1a9e6:	b158      	cbz	r0, 1aa00 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1a9e8:	7820      	ldrb	r0, [r4, #0]
   1a9ea:	f10d 0107 	add.w	r1, sp, #7
   1a9ee:	f7ff ffd4 	bl	1a99a <char2hex>
   1a9f2:	2800      	cmp	r0, #0
   1a9f4:	dbf3      	blt.n	1a9de <hex2bin+0x14>
		buf[0] = dec;
   1a9f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1a9fa:	3401      	adds	r4, #1
		buf[0] = dec;
   1a9fc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1aa00:	3401      	adds	r4, #1
   1aa02:	4416      	add	r6, r2
   1aa04:	42b2      	cmp	r2, r6
   1aa06:	d0eb      	beq.n	1a9e0 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1aa08:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1aa0c:	f10d 0107 	add.w	r1, sp, #7
   1aa10:	f7ff ffc3 	bl	1a99a <char2hex>
   1aa14:	2800      	cmp	r0, #0
   1aa16:	dbe2      	blt.n	1a9de <hex2bin+0x14>
		buf[i] = dec << 4;
   1aa18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1aa1c:	011b      	lsls	r3, r3, #4
   1aa1e:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1aa20:	f814 0b02 	ldrb.w	r0, [r4], #2
   1aa24:	f7ff ffb9 	bl	1a99a <char2hex>
   1aa28:	2800      	cmp	r0, #0
   1aa2a:	dbd8      	blt.n	1a9de <hex2bin+0x14>
		buf[i] += dec;
   1aa2c:	7813      	ldrb	r3, [r2, #0]
   1aa2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1aa32:	440b      	add	r3, r1
   1aa34:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1aa38:	e7e4      	b.n	1aa04 <hex2bin+0x3a>

0001aa3a <sys_notify_validate>:
	if (notify == NULL) {
   1aa3a:	4603      	mov	r3, r0
   1aa3c:	b140      	cbz	r0, 1aa50 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1aa3e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1aa40:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1aa44:	2a02      	cmp	r2, #2
   1aa46:	d006      	beq.n	1aa56 <sys_notify_validate+0x1c>
   1aa48:	2a03      	cmp	r2, #3
   1aa4a:	d004      	beq.n	1aa56 <sys_notify_validate+0x1c>
   1aa4c:	2a01      	cmp	r2, #1
   1aa4e:	d005      	beq.n	1aa5c <sys_notify_validate+0x22>
		return -EINVAL;
   1aa50:	f06f 0015 	mvn.w	r0, #21
}
   1aa54:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1aa56:	681a      	ldr	r2, [r3, #0]
   1aa58:	2a00      	cmp	r2, #0
   1aa5a:	d0f9      	beq.n	1aa50 <sys_notify_validate+0x16>
		notify->result = 0;
   1aa5c:	2000      	movs	r0, #0
   1aa5e:	6098      	str	r0, [r3, #8]
   1aa60:	4770      	bx	lr

0001aa62 <arch_printk_char_out>:
}
   1aa62:	2000      	movs	r0, #0
   1aa64:	4770      	bx	lr

0001aa66 <str_out>:
{
   1aa66:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1aa68:	688a      	ldr	r2, [r1, #8]
   1aa6a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1aa6c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1aa6e:	b114      	cbz	r4, 1aa76 <str_out+0x10>
   1aa70:	684b      	ldr	r3, [r1, #4]
   1aa72:	4293      	cmp	r3, r2
   1aa74:	dc01      	bgt.n	1aa7a <str_out+0x14>
		ctx->count++;
   1aa76:	608d      	str	r5, [r1, #8]
}
   1aa78:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1aa7a:	3b01      	subs	r3, #1
   1aa7c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1aa7e:	bf08      	it	eq
   1aa80:	2200      	moveq	r2, #0
   1aa82:	608d      	str	r5, [r1, #8]
   1aa84:	bf0c      	ite	eq
   1aa86:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1aa88:	54a0      	strbne	r0, [r4, r2]
   1aa8a:	e7f5      	b.n	1aa78 <str_out+0x12>

0001aa8c <printk>:
{
   1aa8c:	b40f      	push	{r0, r1, r2, r3}
   1aa8e:	b507      	push	{r0, r1, r2, lr}
   1aa90:	a904      	add	r1, sp, #16
   1aa92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1aa96:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1aa98:	f7ef ffd6 	bl	aa48 <vprintk>
}
   1aa9c:	b003      	add	sp, #12
   1aa9e:	f85d eb04 	ldr.w	lr, [sp], #4
   1aaa2:	b004      	add	sp, #16
   1aaa4:	4770      	bx	lr

0001aaa6 <snprintk>:
{
   1aaa6:	b40c      	push	{r2, r3}
   1aaa8:	b507      	push	{r0, r1, r2, lr}
   1aaaa:	ab04      	add	r3, sp, #16
   1aaac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1aab0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1aab2:	f7ef ffd7 	bl	aa64 <vsnprintk>
}
   1aab6:	b003      	add	sp, #12
   1aab8:	f85d eb04 	ldr.w	lr, [sp], #4
   1aabc:	b002      	add	sp, #8
   1aabe:	4770      	bx	lr

0001aac0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1aac0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1aac2:	f013 0307 	ands.w	r3, r3, #7
   1aac6:	d105      	bne.n	1aad4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1aac8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1aaca:	2b00      	cmp	r3, #0
   1aacc:	bf0c      	ite	eq
   1aace:	2000      	moveq	r0, #0
   1aad0:	2003      	movne	r0, #3
   1aad2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1aad4:	2b02      	cmp	r3, #2
   1aad6:	d105      	bne.n	1aae4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1aad8:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1aada:	2b00      	cmp	r3, #0
   1aadc:	bf14      	ite	ne
   1aade:	2000      	movne	r0, #0
   1aae0:	2004      	moveq	r0, #4
   1aae2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1aae4:	2b01      	cmp	r3, #1
   1aae6:	d105      	bne.n	1aaf4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1aae8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1aaea:	2b00      	cmp	r3, #0
   1aaec:	bf0c      	ite	eq
   1aaee:	2000      	moveq	r0, #0
   1aaf0:	2005      	movne	r0, #5
   1aaf2:	4770      	bx	lr
	int evt = EVT_NOP;
   1aaf4:	2000      	movs	r0, #0
}
   1aaf6:	4770      	bx	lr

0001aaf8 <notify_one>:
{
   1aaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aafc:	460d      	mov	r5, r1
   1aafe:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ab00:	4619      	mov	r1, r3
   1ab02:	1d28      	adds	r0, r5, #4
{
   1ab04:	4690      	mov	r8, r2
   1ab06:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ab08:	f7ef ff64 	bl	a9d4 <sys_notify_finalize>
	if (cb) {
   1ab0c:	4604      	mov	r4, r0
   1ab0e:	b138      	cbz	r0, 1ab20 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ab10:	4633      	mov	r3, r6
   1ab12:	4642      	mov	r2, r8
   1ab14:	4629      	mov	r1, r5
   1ab16:	4638      	mov	r0, r7
   1ab18:	46a4      	mov	ip, r4
}
   1ab1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ab1e:	4760      	bx	ip
}
   1ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ab24 <validate_args>:
{
   1ab24:	b510      	push	{r4, lr}
   1ab26:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ab28:	b140      	cbz	r0, 1ab3c <validate_args+0x18>
   1ab2a:	b139      	cbz	r1, 1ab3c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ab2c:	1d08      	adds	r0, r1, #4
   1ab2e:	f7ff ff84 	bl	1aa3a <sys_notify_validate>
	if ((rv == 0)
   1ab32:	b928      	cbnz	r0, 1ab40 <validate_args+0x1c>
	    && ((cli->notify.flags
   1ab34:	68a3      	ldr	r3, [r4, #8]
   1ab36:	f033 0303 	bics.w	r3, r3, #3
   1ab3a:	d001      	beq.n	1ab40 <validate_args+0x1c>
		rv = -EINVAL;
   1ab3c:	f06f 0015 	mvn.w	r0, #21
}
   1ab40:	bd10      	pop	{r4, pc}

0001ab42 <onoff_manager_init>:
{
   1ab42:	b538      	push	{r3, r4, r5, lr}
   1ab44:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ab46:	4605      	mov	r5, r0
   1ab48:	b158      	cbz	r0, 1ab62 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ab4a:	b151      	cbz	r1, 1ab62 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ab4c:	680b      	ldr	r3, [r1, #0]
   1ab4e:	b143      	cbz	r3, 1ab62 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ab50:	684b      	ldr	r3, [r1, #4]
   1ab52:	b133      	cbz	r3, 1ab62 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ab54:	2220      	movs	r2, #32
   1ab56:	2100      	movs	r1, #0
   1ab58:	f001 f9ed 	bl	1bf36 <memset>
	return 0;
   1ab5c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ab5e:	612c      	str	r4, [r5, #16]
}
   1ab60:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ab62:	f06f 0015 	mvn.w	r0, #21
   1ab66:	e7fb      	b.n	1ab60 <onoff_manager_init+0x1e>

0001ab68 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ab68:	4604      	mov	r4, r0
   1ab6a:	b508      	push	{r3, lr}
   1ab6c:	4608      	mov	r0, r1
   1ab6e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1ab70:	461a      	mov	r2, r3
   1ab72:	47a0      	blx	r4
	return z_impl_k_current_get();
   1ab74:	f7fe fdac 	bl	196d0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1ab78:	f7f3 fb78 	bl	e26c <z_impl_k_thread_abort>

0001ab7c <chunk_field>:
	if (big_heap(h)) {
   1ab7c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ab7e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ab82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1ab86:	bf2c      	ite	cs
   1ab88:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1ab8c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1ab90:	4770      	bx	lr

0001ab92 <chunk_set>:
	void *cmem = &buf[c];
   1ab92:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ab96:	6880      	ldr	r0, [r0, #8]
   1ab98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1ab9c:	bf2c      	ite	cs
   1ab9e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1aba2:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1aba6:	4770      	bx	lr

0001aba8 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1aba8:	2201      	movs	r2, #1
{
   1abaa:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1abac:	f7ff ffe6 	bl	1ab7c <chunk_field>
}
   1abb0:	40d0      	lsrs	r0, r2
   1abb2:	bd08      	pop	{r3, pc}

0001abb4 <set_chunk_used>:
	if (big_heap(h)) {
   1abb4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1abb6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1abba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1abbe:	d308      	bcc.n	1abd2 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abc0:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1abc2:	b11a      	cbz	r2, 1abcc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abc4:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1abc8:	604b      	str	r3, [r1, #4]
   1abca:	4770      	bx	lr
   1abcc:	f023 0301 	bic.w	r3, r3, #1
   1abd0:	e7fa      	b.n	1abc8 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abd2:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1abd4:	b11a      	cbz	r2, 1abde <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abd6:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1abda:	804b      	strh	r3, [r1, #2]
}
   1abdc:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1abde:	f023 0301 	bic.w	r3, r3, #1
   1abe2:	e7fa      	b.n	1abda <set_chunk_used+0x26>

0001abe4 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1abe4:	0053      	lsls	r3, r2, #1
   1abe6:	2201      	movs	r2, #1
   1abe8:	f7ff bfd3 	b.w	1ab92 <chunk_set>

0001abec <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1abec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1abf0:	bf2c      	ite	cs
   1abf2:	2008      	movcs	r0, #8
   1abf4:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1abf6:	3107      	adds	r1, #7
   1abf8:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1abfa:	08c0      	lsrs	r0, r0, #3
   1abfc:	4770      	bx	lr

0001abfe <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1abfe:	b508      	push	{r3, lr}
   1ac00:	460b      	mov	r3, r1
   1ac02:	2101      	movs	r1, #1
   1ac04:	f7ff fff2 	bl	1abec <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1ac08:	3301      	adds	r3, #1
   1ac0a:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1ac0c:	fab3 f083 	clz	r0, r3
}
   1ac10:	f1c0 001f 	rsb	r0, r0, #31
   1ac14:	bd08      	pop	{r3, pc}

0001ac16 <free_list_remove_bidx>:
{
   1ac16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac1a:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1ac1c:	2203      	movs	r2, #3
   1ac1e:	460e      	mov	r6, r1
   1ac20:	4604      	mov	r4, r0
   1ac22:	f7ff ffab 	bl	1ab7c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1ac26:	4286      	cmp	r6, r0
   1ac28:	4605      	mov	r5, r0
   1ac2a:	f107 0804 	add.w	r8, r7, #4
   1ac2e:	d10b      	bne.n	1ac48 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1ac30:	2301      	movs	r3, #1
   1ac32:	fa03 f707 	lsl.w	r7, r3, r7
   1ac36:	68e3      	ldr	r3, [r4, #12]
   1ac38:	ea23 0307 	bic.w	r3, r3, r7
   1ac3c:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1ac3e:	2300      	movs	r3, #0
   1ac40:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1ac48:	4631      	mov	r1, r6
   1ac4a:	2202      	movs	r2, #2
   1ac4c:	4620      	mov	r0, r4
   1ac4e:	f7ff ff95 	bl	1ab7c <chunk_field>
   1ac52:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1ac54:	462b      	mov	r3, r5
   1ac56:	4601      	mov	r1, r0
   1ac58:	2203      	movs	r2, #3
   1ac5a:	4620      	mov	r0, r4
		b->next = second;
   1ac5c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1ac60:	f7ff ff97 	bl	1ab92 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ac64:	4633      	mov	r3, r6
   1ac66:	4629      	mov	r1, r5
   1ac68:	4620      	mov	r0, r4
}
   1ac6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ac6e:	2202      	movs	r2, #2
   1ac70:	f7ff bf8f 	b.w	1ab92 <chunk_set>

0001ac74 <free_list_remove>:
{
   1ac74:	b570      	push	{r4, r5, r6, lr}
   1ac76:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ac78:	6886      	ldr	r6, [r0, #8]
   1ac7a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ac7c:	f7ff ff94 	bl	1aba8 <chunk_size>
   1ac80:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ac84:	4601      	mov	r1, r0
   1ac86:	d301      	bcc.n	1ac8c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1ac88:	2801      	cmp	r0, #1
   1ac8a:	d009      	beq.n	1aca0 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ac8c:	4630      	mov	r0, r6
   1ac8e:	f7ff ffb6 	bl	1abfe <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1ac92:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ac94:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1ac96:	4620      	mov	r0, r4
}
   1ac98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1ac9c:	f7ff bfbb 	b.w	1ac16 <free_list_remove_bidx>
}
   1aca0:	bd70      	pop	{r4, r5, r6, pc}

0001aca2 <alloc_chunk>:
{
   1aca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aca6:	6886      	ldr	r6, [r0, #8]
   1aca8:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1acaa:	4630      	mov	r0, r6
{
   1acac:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1acae:	f7ff ffa6 	bl	1abfe <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1acb2:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1acb4:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1acb6:	4630      	mov	r0, r6
   1acb8:	f7ff ffa1 	bl	1abfe <bucket_idx.isra.0>
   1acbc:	42a8      	cmp	r0, r5
   1acbe:	da03      	bge.n	1acc8 <alloc_chunk+0x26>
		return 0;
   1acc0:	2600      	movs	r6, #0
}
   1acc2:	4630      	mov	r0, r6
   1acc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1acc8:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1accc:	f8da 9010 	ldr.w	r9, [sl, #16]
   1acd0:	f1b9 0f00 	cmp.w	r9, #0
   1acd4:	d019      	beq.n	1ad0a <alloc_chunk+0x68>
   1acd6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1acd8:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1acdc:	4620      	mov	r0, r4
   1acde:	4631      	mov	r1, r6
   1ace0:	f7ff ff62 	bl	1aba8 <chunk_size>
   1ace4:	4540      	cmp	r0, r8
   1ace6:	d305      	bcc.n	1acf4 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1ace8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1acea:	4631      	mov	r1, r6
   1acec:	4620      	mov	r0, r4
   1acee:	f7ff ff92 	bl	1ac16 <free_list_remove_bidx>
		return c;
   1acf2:	e7e6      	b.n	1acc2 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1acf4:	2203      	movs	r2, #3
   1acf6:	4631      	mov	r1, r6
   1acf8:	4620      	mov	r0, r4
   1acfa:	f7ff ff3f 	bl	1ab7c <chunk_field>
		} while (--i && b->next != first);
   1acfe:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1ad00:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1ad04:	d001      	beq.n	1ad0a <alloc_chunk+0x68>
   1ad06:	4581      	cmp	r9, r0
   1ad08:	d1e6      	bne.n	1acd8 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1ad0a:	f04f 32ff 	mov.w	r2, #4294967295
   1ad0e:	68e3      	ldr	r3, [r4, #12]
   1ad10:	3501      	adds	r5, #1
   1ad12:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1ad14:	401a      	ands	r2, r3
   1ad16:	d0d3      	beq.n	1acc0 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1ad18:	fa92 f2a2 	rbit	r2, r2
   1ad1c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ad20:	1d13      	adds	r3, r2, #4
   1ad22:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1ad26:	e7e0      	b.n	1acea <alloc_chunk+0x48>

0001ad28 <split_chunks>:
{
   1ad28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad2c:	4614      	mov	r4, r2
   1ad2e:	460e      	mov	r6, r1
   1ad30:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1ad32:	f7ff ff39 	bl	1aba8 <chunk_size>
	size_t lsz = rc - lc;
   1ad36:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1ad3a:	1b37      	subs	r7, r6, r4
   1ad3c:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ad3e:	4642      	mov	r2, r8
   1ad40:	4631      	mov	r1, r6
   1ad42:	4628      	mov	r0, r5
   1ad44:	f7ff ff4e 	bl	1abe4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ad48:	463a      	mov	r2, r7
   1ad4a:	4621      	mov	r1, r4
   1ad4c:	4628      	mov	r0, r5
   1ad4e:	f7ff ff49 	bl	1abe4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ad52:	4643      	mov	r3, r8
   1ad54:	2200      	movs	r2, #0
   1ad56:	4621      	mov	r1, r4
   1ad58:	4628      	mov	r0, r5
   1ad5a:	f7ff ff1a 	bl	1ab92 <chunk_set>
	return c + chunk_size(h, c);
   1ad5e:	4621      	mov	r1, r4
   1ad60:	4628      	mov	r0, r5
   1ad62:	f7ff ff21 	bl	1aba8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ad66:	463b      	mov	r3, r7
   1ad68:	1821      	adds	r1, r4, r0
   1ad6a:	2200      	movs	r2, #0
   1ad6c:	4628      	mov	r0, r5
}
   1ad6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad72:	f7ff bf0e 	b.w	1ab92 <chunk_set>

0001ad76 <merge_chunks>:
{
   1ad76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad7a:	4616      	mov	r6, r2
   1ad7c:	4604      	mov	r4, r0
   1ad7e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ad80:	f7ff ff12 	bl	1aba8 <chunk_size>
   1ad84:	4631      	mov	r1, r6
   1ad86:	4605      	mov	r5, r0
   1ad88:	4620      	mov	r0, r4
   1ad8a:	f7ff ff0d 	bl	1aba8 <chunk_size>
   1ad8e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1ad90:	462a      	mov	r2, r5
   1ad92:	4639      	mov	r1, r7
   1ad94:	4620      	mov	r0, r4
   1ad96:	f7ff ff25 	bl	1abe4 <set_chunk_size>
	return c + chunk_size(h, c);
   1ad9a:	4631      	mov	r1, r6
   1ad9c:	4620      	mov	r0, r4
   1ad9e:	f7ff ff03 	bl	1aba8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ada2:	462b      	mov	r3, r5
   1ada4:	1831      	adds	r1, r6, r0
   1ada6:	2200      	movs	r2, #0
   1ada8:	4620      	mov	r0, r4
}
   1adaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1adae:	f7ff bef0 	b.w	1ab92 <chunk_set>

0001adb2 <free_list_add>:
{
   1adb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adb6:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1adb8:	6886      	ldr	r6, [r0, #8]
   1adba:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1adbc:	f7ff fef4 	bl	1aba8 <chunk_size>
   1adc0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1adc4:	4601      	mov	r1, r0
   1adc6:	d301      	bcc.n	1adcc <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1adc8:	2801      	cmp	r0, #1
   1adca:	d033      	beq.n	1ae34 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1adcc:	4630      	mov	r0, r6
   1adce:	f7ff ff16 	bl	1abfe <bucket_idx.isra.0>
	if (b->next == 0U) {
   1add2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1add6:	6916      	ldr	r6, [r2, #16]
   1add8:	b99e      	cbnz	r6, 1ae02 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1adda:	2301      	movs	r3, #1
   1addc:	fa03 f000 	lsl.w	r0, r3, r0
   1ade0:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ade2:	4629      	mov	r1, r5
   1ade4:	4303      	orrs	r3, r0
   1ade6:	60e3      	str	r3, [r4, #12]
   1ade8:	4620      	mov	r0, r4
		b->next = c;
   1adea:	6115      	str	r5, [r2, #16]
   1adec:	462b      	mov	r3, r5
   1adee:	2202      	movs	r2, #2
   1adf0:	f7ff fecf 	bl	1ab92 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1adf4:	2203      	movs	r2, #3
   1adf6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1adf8:	4620      	mov	r0, r4
}
   1adfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1adfe:	f7ff bec8 	b.w	1ab92 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ae02:	2202      	movs	r2, #2
   1ae04:	4631      	mov	r1, r6
   1ae06:	4620      	mov	r0, r4
   1ae08:	f7ff feb8 	bl	1ab7c <chunk_field>
   1ae0c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1ae0e:	4603      	mov	r3, r0
   1ae10:	4629      	mov	r1, r5
   1ae12:	4620      	mov	r0, r4
   1ae14:	f7ff febd 	bl	1ab92 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ae18:	2203      	movs	r2, #3
   1ae1a:	4633      	mov	r3, r6
   1ae1c:	4629      	mov	r1, r5
   1ae1e:	4620      	mov	r0, r4
   1ae20:	f7ff feb7 	bl	1ab92 <chunk_set>
   1ae24:	4639      	mov	r1, r7
   1ae26:	462b      	mov	r3, r5
   1ae28:	4620      	mov	r0, r4
   1ae2a:	f7ff feb2 	bl	1ab92 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ae2e:	2202      	movs	r2, #2
   1ae30:	4631      	mov	r1, r6
   1ae32:	e7e1      	b.n	1adf8 <free_list_add+0x46>
   1ae34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae38 <free_chunk>:
{
   1ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae3a:	460c      	mov	r4, r1
   1ae3c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1ae3e:	f7ff feb3 	bl	1aba8 <chunk_size>
   1ae42:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ae44:	2201      	movs	r2, #1
   1ae46:	4631      	mov	r1, r6
   1ae48:	4628      	mov	r0, r5
   1ae4a:	f7ff fe97 	bl	1ab7c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1ae4e:	07c3      	lsls	r3, r0, #31
   1ae50:	d40c      	bmi.n	1ae6c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ae52:	4631      	mov	r1, r6
   1ae54:	4628      	mov	r0, r5
   1ae56:	f7ff ff0d 	bl	1ac74 <free_list_remove>
	return c + chunk_size(h, c);
   1ae5a:	4621      	mov	r1, r4
   1ae5c:	4628      	mov	r0, r5
   1ae5e:	f7ff fea3 	bl	1aba8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ae62:	4621      	mov	r1, r4
   1ae64:	1822      	adds	r2, r4, r0
   1ae66:	4628      	mov	r0, r5
   1ae68:	f7ff ff85 	bl	1ad76 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ae6c:	2200      	movs	r2, #0
   1ae6e:	4621      	mov	r1, r4
   1ae70:	4628      	mov	r0, r5
   1ae72:	f7ff fe83 	bl	1ab7c <chunk_field>
   1ae76:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ae78:	2201      	movs	r2, #1
   1ae7a:	4639      	mov	r1, r7
   1ae7c:	4628      	mov	r0, r5
   1ae7e:	f7ff fe7d 	bl	1ab7c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1ae82:	ea10 0602 	ands.w	r6, r0, r2
   1ae86:	d113      	bne.n	1aeb0 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1ae88:	4639      	mov	r1, r7
   1ae8a:	4628      	mov	r0, r5
   1ae8c:	f7ff fef2 	bl	1ac74 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ae90:	4621      	mov	r1, r4
   1ae92:	4632      	mov	r2, r6
   1ae94:	4628      	mov	r0, r5
   1ae96:	f7ff fe71 	bl	1ab7c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1ae9a:	4622      	mov	r2, r4
   1ae9c:	1a21      	subs	r1, r4, r0
   1ae9e:	4628      	mov	r0, r5
   1aea0:	f7ff ff69 	bl	1ad76 <merge_chunks>
   1aea4:	4621      	mov	r1, r4
   1aea6:	4632      	mov	r2, r6
   1aea8:	4628      	mov	r0, r5
   1aeaa:	f7ff fe67 	bl	1ab7c <chunk_field>
   1aeae:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1aeb0:	4621      	mov	r1, r4
   1aeb2:	4628      	mov	r0, r5
}
   1aeb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1aeb8:	f7ff bf7b 	b.w	1adb2 <free_list_add>

0001aebc <sys_heap_alloc>:
{
   1aebc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1aebe:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aec0:	b909      	cbnz	r1, 1aec6 <sys_heap_alloc+0xa>
		return NULL;
   1aec2:	2000      	movs	r0, #0
}
   1aec4:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1aec6:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aec8:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1aecc:	d9f9      	bls.n	1aec2 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1aece:	f7ff fe8d 	bl	1abec <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1aed2:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1aed4:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1aed6:	4630      	mov	r0, r6
   1aed8:	f7ff fee3 	bl	1aca2 <alloc_chunk>
	if (c == 0U) {
   1aedc:	4604      	mov	r4, r0
   1aede:	2800      	cmp	r0, #0
   1aee0:	d0ef      	beq.n	1aec2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1aee2:	4601      	mov	r1, r0
   1aee4:	4630      	mov	r0, r6
   1aee6:	f7ff fe5f 	bl	1aba8 <chunk_size>
   1aeea:	42a8      	cmp	r0, r5
   1aeec:	d909      	bls.n	1af02 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1aeee:	4425      	add	r5, r4
   1aef0:	4621      	mov	r1, r4
   1aef2:	4630      	mov	r0, r6
   1aef4:	462a      	mov	r2, r5
   1aef6:	f7ff ff17 	bl	1ad28 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1aefa:	4629      	mov	r1, r5
   1aefc:	4630      	mov	r0, r6
   1aefe:	f7ff ff58 	bl	1adb2 <free_list_add>
	set_chunk_used(h, c, true);
   1af02:	4621      	mov	r1, r4
   1af04:	4630      	mov	r0, r6
   1af06:	2201      	movs	r2, #1
   1af08:	f7ff fe54 	bl	1abb4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1af0c:	68b3      	ldr	r3, [r6, #8]
   1af0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1af12:	bf2c      	ite	cs
   1af14:	2308      	movcs	r3, #8
   1af16:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1af18:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1af1c:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1af1e:	e7d1      	b.n	1aec4 <sys_heap_alloc+0x8>

0001af20 <encode_uint>:
{
   1af20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af24:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1af26:	78d3      	ldrb	r3, [r2, #3]
{
   1af28:	4680      	mov	r8, r0
	switch (specifier) {
   1af2a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1af2c:	460f      	mov	r7, r1
   1af2e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1af30:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1af34:	d029      	beq.n	1af8a <encode_uint+0x6a>
   1af36:	d824      	bhi.n	1af82 <encode_uint+0x62>
		return 16;
   1af38:	2b58      	cmp	r3, #88	; 0x58
   1af3a:	bf14      	ite	ne
   1af3c:	260a      	movne	r6, #10
   1af3e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1af40:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1af44:	4632      	mov	r2, r6
   1af46:	2300      	movs	r3, #0
   1af48:	4640      	mov	r0, r8
   1af4a:	4639      	mov	r1, r7
   1af4c:	f7ed fdee 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af50:	2a09      	cmp	r2, #9
   1af52:	b2d4      	uxtb	r4, r2
   1af54:	d81e      	bhi.n	1af94 <encode_uint+0x74>
   1af56:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1af58:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af5a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1af5c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af60:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1af64:	d301      	bcc.n	1af6a <encode_uint+0x4a>
   1af66:	45d1      	cmp	r9, sl
   1af68:	d811      	bhi.n	1af8e <encode_uint+0x6e>
	if (conv->flag_hash) {
   1af6a:	782b      	ldrb	r3, [r5, #0]
   1af6c:	069b      	lsls	r3, r3, #26
   1af6e:	d505      	bpl.n	1af7c <encode_uint+0x5c>
		if (radix == 8) {
   1af70:	2e08      	cmp	r6, #8
   1af72:	d115      	bne.n	1afa0 <encode_uint+0x80>
			conv->altform_0 = true;
   1af74:	78ab      	ldrb	r3, [r5, #2]
   1af76:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1af7a:	70ab      	strb	r3, [r5, #2]
}
   1af7c:	4648      	mov	r0, r9
   1af7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1af82:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1af86:	2b70      	cmp	r3, #112	; 0x70
   1af88:	e7d7      	b.n	1af3a <encode_uint+0x1a>
	switch (specifier) {
   1af8a:	2608      	movs	r6, #8
   1af8c:	e7d8      	b.n	1af40 <encode_uint+0x20>
		value /= radix;
   1af8e:	4680      	mov	r8, r0
   1af90:	460f      	mov	r7, r1
   1af92:	e7d7      	b.n	1af44 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af94:	f1bb 0f19 	cmp.w	fp, #25
   1af98:	bf94      	ite	ls
   1af9a:	3437      	addls	r4, #55	; 0x37
   1af9c:	3457      	addhi	r4, #87	; 0x57
   1af9e:	e7db      	b.n	1af58 <encode_uint+0x38>
		} else if (radix == 16) {
   1afa0:	2e10      	cmp	r6, #16
   1afa2:	d1eb      	bne.n	1af7c <encode_uint+0x5c>
			conv->altform_0c = true;
   1afa4:	78ab      	ldrb	r3, [r5, #2]
   1afa6:	f043 0310 	orr.w	r3, r3, #16
   1afaa:	e7e6      	b.n	1af7a <encode_uint+0x5a>

0001afac <outs>:
{
   1afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afb0:	4607      	mov	r7, r0
   1afb2:	4688      	mov	r8, r1
   1afb4:	4615      	mov	r5, r2
   1afb6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1afb8:	4614      	mov	r4, r2
   1afba:	42b4      	cmp	r4, r6
   1afbc:	eba4 0005 	sub.w	r0, r4, r5
   1afc0:	d302      	bcc.n	1afc8 <outs+0x1c>
   1afc2:	b93e      	cbnz	r6, 1afd4 <outs+0x28>
   1afc4:	7823      	ldrb	r3, [r4, #0]
   1afc6:	b12b      	cbz	r3, 1afd4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1afc8:	4641      	mov	r1, r8
   1afca:	f814 0b01 	ldrb.w	r0, [r4], #1
   1afce:	47b8      	blx	r7
		if (rc < 0) {
   1afd0:	2800      	cmp	r0, #0
   1afd2:	daf2      	bge.n	1afba <outs+0xe>
}
   1afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001afd8 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1afd8:	4040      	eors	r0, r0
   1afda:	f380 8811 	msr	BASEPRI, r0
   1afde:	f04f 0004 	mov.w	r0, #4
   1afe2:	df02      	svc	2
}
   1afe4:	4770      	bx	lr

0001afe6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1afe6:	4770      	bx	lr

0001afe8 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1afe8:	f04f 0320 	mov.w	r3, #32
   1afec:	f3ef 8111 	mrs	r1, BASEPRI
   1aff0:	f383 8811 	msr	BASEPRI, r3
   1aff4:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1aff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1affc:	2201      	movs	r2, #1
   1affe:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1b002:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1b006:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1b00a:	f381 8811 	msr	BASEPRI, r1
   1b00e:	f3bf 8f6f 	isb	sy
}
   1b012:	2000      	movs	r0, #0
   1b014:	4770      	bx	lr

0001b016 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1b016:	f002 bba9 	b.w	1d76c <SystemInit>

0001b01a <virtio_get_status>:
}
   1b01a:	2004      	movs	r0, #4
   1b01c:	4770      	bx	lr

0001b01e <virtio_get_features>:
}
   1b01e:	2001      	movs	r0, #1
   1b020:	4770      	bx	lr

0001b022 <virtio_set_features>:
}
   1b022:	4770      	bx	lr

0001b024 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1b024:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1b026:	21b4      	movs	r1, #180	; 0xb4
   1b028:	2004      	movs	r0, #4
   1b02a:	f7ff fc33 	bl	1a894 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1b02e:	4604      	mov	r4, r0
   1b030:	b118      	cbz	r0, 1b03a <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1b032:	22b4      	movs	r2, #180	; 0xb4
   1b034:	2100      	movs	r1, #0
   1b036:	f000 ff7e 	bl	1bf36 <memset>
	}

	return vqs;
}
   1b03a:	4620      	mov	r0, r4
   1b03c:	bd10      	pop	{r4, pc}

0001b03e <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1b03e:	f002 bea4 	b.w	1dd8a <rpmsg_destroy_ept>

0001b042 <settings_load>:
	return settings_load_subtree(NULL);
   1b042:	2000      	movs	r0, #0
   1b044:	f7f0 beae 	b.w	bda4 <settings_load_subtree>

0001b048 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1b048:	2200      	movs	r2, #0
   1b04a:	4611      	mov	r1, r2
   1b04c:	f7f0 be84 	b.w	bd58 <settings_save_one>

0001b050 <settings_name_steq>:
{
   1b050:	4603      	mov	r3, r0
   1b052:	b530      	push	{r4, r5, lr}
   1b054:	4608      	mov	r0, r1
	if (next) {
   1b056:	b10a      	cbz	r2, 1b05c <settings_name_steq+0xc>
		*next = NULL;
   1b058:	2100      	movs	r1, #0
   1b05a:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1b05c:	b163      	cbz	r3, 1b078 <settings_name_steq+0x28>
   1b05e:	b190      	cbz	r0, 1b086 <settings_name_steq+0x36>
   1b060:	1e41      	subs	r1, r0, #1
   1b062:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1b064:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1b068:	4604      	mov	r4, r0
   1b06a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b06e:	b15d      	cbz	r5, 1b088 <settings_name_steq+0x38>
   1b070:	429d      	cmp	r5, r3
   1b072:	d101      	bne.n	1b078 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1b074:	2d3d      	cmp	r5, #61	; 0x3d
   1b076:	d1f5      	bne.n	1b064 <settings_name_steq+0x14>
	return 0;
   1b078:	2000      	movs	r0, #0
   1b07a:	e004      	b.n	1b086 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1b07c:	2b3d      	cmp	r3, #61	; 0x3d
   1b07e:	d008      	beq.n	1b092 <settings_name_steq+0x42>
   1b080:	fab3 f083 	clz	r0, r3
   1b084:	0940      	lsrs	r0, r0, #5
}
   1b086:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1b088:	2b2f      	cmp	r3, #47	; 0x2f
   1b08a:	d1f7      	bne.n	1b07c <settings_name_steq+0x2c>
		if (next) {
   1b08c:	b10a      	cbz	r2, 1b092 <settings_name_steq+0x42>
			*next = name + 1;
   1b08e:	3401      	adds	r4, #1
   1b090:	6014      	str	r4, [r2, #0]
		return 1;
   1b092:	2001      	movs	r0, #1
   1b094:	e7f7      	b.n	1b086 <settings_name_steq+0x36>

0001b096 <settings_name_next>:
{
   1b096:	4603      	mov	r3, r0
   1b098:	b530      	push	{r4, r5, lr}
	if (next) {
   1b09a:	b109      	cbz	r1, 1b0a0 <settings_name_next+0xa>
		*next = NULL;
   1b09c:	2200      	movs	r2, #0
   1b09e:	600a      	str	r2, [r1, #0]
	if (!name) {
   1b0a0:	b16b      	cbz	r3, 1b0be <settings_name_next+0x28>
   1b0a2:	461a      	mov	r2, r3
   1b0a4:	4614      	mov	r4, r2
   1b0a6:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1b0a8:	f812 5b01 	ldrb.w	r5, [r2], #1
   1b0ac:	b135      	cbz	r5, 1b0bc <settings_name_next+0x26>
   1b0ae:	2d3d      	cmp	r5, #61	; 0x3d
   1b0b0:	d004      	beq.n	1b0bc <settings_name_next+0x26>
   1b0b2:	2d2f      	cmp	r5, #47	; 0x2f
   1b0b4:	d1f6      	bne.n	1b0a4 <settings_name_next+0xe>
		if (next) {
   1b0b6:	b109      	cbz	r1, 1b0bc <settings_name_next+0x26>
			*next = name + 1;
   1b0b8:	3401      	adds	r4, #1
   1b0ba:	600c      	str	r4, [r1, #0]
}
   1b0bc:	bd30      	pop	{r4, r5, pc}
		return 0;
   1b0be:	4618      	mov	r0, r3
   1b0c0:	e7fc      	b.n	1b0bc <settings_name_next+0x26>

0001b0c2 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1b0c2:	2000      	movs	r0, #0
   1b0c4:	4770      	bx	lr

0001b0c6 <set_on_state>:
	__asm__ volatile(
   1b0c6:	f04f 0320 	mov.w	r3, #32
   1b0ca:	f3ef 8211 	mrs	r2, BASEPRI
   1b0ce:	f383 8811 	msr	BASEPRI, r3
   1b0d2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b0d6:	6803      	ldr	r3, [r0, #0]
   1b0d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b0dc:	f043 0302 	orr.w	r3, r3, #2
   1b0e0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b0e2:	f382 8811 	msr	BASEPRI, r2
   1b0e6:	f3bf 8f6f 	isb	sy
}
   1b0ea:	4770      	bx	lr

0001b0ec <async_start>:
{
   1b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0ee:	9f06      	ldr	r7, [sp, #24]
   1b0f0:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1b0f2:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1b0f4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1b0f6:	f04f 0020 	mov.w	r0, #32
   1b0fa:	f3ef 8c11 	mrs	ip, BASEPRI
   1b0fe:	f380 8811 	msr	BASEPRI, r0
   1b102:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b106:	260c      	movs	r6, #12
   1b108:	fb06 4601 	mla	r6, r6, r1, r4
   1b10c:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b110:	f000 0e07 	and.w	lr, r0, #7
   1b114:	f1be 0f01 	cmp.w	lr, #1
   1b118:	d111      	bne.n	1b13e <_flash_used+0x3a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b11a:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1b11e:	2600      	movs	r6, #0
	__asm__ volatile(
   1b120:	f38c 8811 	msr	BASEPRI, ip
   1b124:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1b128:	b93e      	cbnz	r6, 1b13a <_flash_used+0x36>
	subdata->cb = cb;
   1b12a:	200c      	movs	r0, #12
   1b12c:	4341      	muls	r1, r0
   1b12e:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1b130:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1b134:	686b      	ldr	r3, [r5, #4]
   1b136:	585b      	ldr	r3, [r3, r1]
   1b138:	4798      	blx	r3
}
   1b13a:	4630      	mov	r0, r6
   1b13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1b13e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1b142:	4287      	cmp	r7, r0
   1b144:	bf14      	ite	ne
   1b146:	f04f 36ff 	movne.w	r6, #4294967295
   1b14a:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1b14e:	e7e7      	b.n	1b120 <_flash_used+0x1c>

0001b150 <api_start>:
{
   1b150:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1b152:	2480      	movs	r4, #128	; 0x80
   1b154:	9400      	str	r4, [sp, #0]
   1b156:	f7ff ffc9 	bl	1b0ec <async_start>
}
   1b15a:	b002      	add	sp, #8
   1b15c:	bd10      	pop	{r4, pc}

0001b15e <onoff_started_callback>:
	return &data->mgr[type];
   1b15e:	68c0      	ldr	r0, [r0, #12]
   1b160:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1b162:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1b166:	2100      	movs	r1, #0
   1b168:	4710      	bx	r2

0001b16a <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1b16a:	2003      	movs	r0, #3
   1b16c:	f7fb be9c 	b.w	16ea8 <nrfx_clock_start>

0001b170 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1b170:	2002      	movs	r0, #2
   1b172:	f7fb be99 	b.w	16ea8 <nrfx_clock_start>

0001b176 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b176:	2000      	movs	r0, #0
   1b178:	f7fb be96 	b.w	16ea8 <nrfx_clock_start>

0001b17c <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1b17c:	2003      	movs	r0, #3
   1b17e:	f7fb befd 	b.w	16f7c <nrfx_clock_stop>

0001b182 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1b182:	2002      	movs	r0, #2
   1b184:	f7fb befa 	b.w	16f7c <nrfx_clock_stop>

0001b188 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b188:	2000      	movs	r0, #0
   1b18a:	f7fb bef7 	b.w	16f7c <nrfx_clock_stop>

0001b18e <api_stop>:
	return stop(dev, subsys, CTX_API);
   1b18e:	2280      	movs	r2, #128	; 0x80
   1b190:	f7f0 bf38 	b.w	c004 <stop>

0001b194 <blocking_start_callback>:
{
   1b194:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b196:	f7fe baa1 	b.w	196dc <z_impl_k_sem_give>

0001b19a <bt_rpmsg_open>:
{
   1b19a:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1b19c:	f7f1 fa32 	bl	c604 <bt_rpmsg_platform_endpoint_is_bound>
   1b1a0:	b108      	cbz	r0, 1b1a6 <bt_rpmsg_open+0xc>
}
   1b1a2:	2000      	movs	r0, #0
   1b1a4:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1b1a6:	2100      	movs	r1, #0
   1b1a8:	2021      	movs	r0, #33	; 0x21
   1b1aa:	f7fe fa61 	bl	19670 <z_impl_k_sleep>
   1b1ae:	e7f5      	b.n	1b19c <bt_rpmsg_open+0x2>

0001b1b0 <endpoint_cb>:
{
   1b1b0:	b508      	push	{r3, lr}
   1b1b2:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1b1b4:	4611      	mov	r1, r2
   1b1b6:	f7f1 f93b 	bl	c430 <bt_rpmsg_rx>
}
   1b1ba:	2000      	movs	r0, #0
   1b1bc:	bd08      	pop	{r3, pc}

0001b1be <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1b1be:	4770      	bx	lr

0001b1c0 <attr_find_by_handle>:
{
   1b1c0:	b570      	push	{r4, r5, r6, lr}
   1b1c2:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1b1c4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1b1c8:	b1a8      	cbz	r0, 1b1f6 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1b1ca:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1b1cc:	3801      	subs	r0, #1
	while (upper >= lower) {
   1b1ce:	4286      	cmp	r6, r0
   1b1d0:	dd01      	ble.n	1b1d6 <attr_find_by_handle+0x16>
		return NULL;
   1b1d2:	2000      	movs	r0, #0
   1b1d4:	e00f      	b.n	1b1f6 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1b1d6:	1832      	adds	r2, r6, r0
   1b1d8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1b1dc:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1b1de:	1cd5      	adds	r5, r2, #3
   1b1e0:	00eb      	lsls	r3, r5, #3
   1b1e2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1b1e6:	892d      	ldrh	r5, [r5, #8]
   1b1e8:	428d      	cmp	r5, r1
   1b1ea:	d201      	bcs.n	1b1f0 <attr_find_by_handle+0x30>
			lower = m + 1;
   1b1ec:	1c56      	adds	r6, r2, #1
   1b1ee:	e7ee      	b.n	1b1ce <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1b1f0:	d802      	bhi.n	1b1f8 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1b1f2:	3304      	adds	r3, #4
   1b1f4:	18e0      	adds	r0, r4, r3
}
   1b1f6:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1b1f8:	1e50      	subs	r0, r2, #1
   1b1fa:	e7e8      	b.n	1b1ce <attr_find_by_handle+0xe>

0001b1fc <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1b1fc:	2300      	movs	r3, #0
{
   1b1fe:	b510      	push	{r4, lr}
   1b200:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1b202:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1b206:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1b20a:	b910      	cbnz	r0, 1b212 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1b20c:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1b210:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b212:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1b216:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b218:	4290      	cmp	r0, r2
	list->head = node;
   1b21a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1b21e:	bf08      	it	eq
   1b220:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1b224:	f003 f85b 	bl	1e2de <k_free>
   1b228:	e7ed      	b.n	1b206 <svc_attr_memory_release+0xa>

0001b22a <atomic_and>:
{
   1b22a:	4603      	mov	r3, r0
}
   1b22c:	e8d3 0fef 	ldaex	r0, [r3]
   1b230:	ea00 0201 	and.w	r2, r0, r1
   1b234:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b238:	f1bc 0f00 	cmp.w	ip, #0
   1b23c:	d1f6      	bne.n	1b22c <atomic_and+0x2>
   1b23e:	4770      	bx	lr

0001b240 <discovery_complete_not_found>:
{
   1b240:	b510      	push	{r4, lr}
   1b242:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1b244:	f7ff ffda 	bl	1b1fc <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b248:	f06f 0101 	mvn.w	r1, #1
   1b24c:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1b250:	f7ff ffeb 	bl	1b22a <atomic_and>
	if (dm->callback->service_not_found) {
   1b254:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1b258:	685b      	ldr	r3, [r3, #4]
   1b25a:	b123      	cbz	r3, 1b266 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1b25c:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1b264:	4718      	bx	r3
}
   1b266:	bd10      	pop	{r4, pc}

0001b268 <bt_gatt_dm_attr_service_val>:
{
   1b268:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b26a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b26e:	2400      	movs	r4, #0
{
   1b270:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b272:	6801      	ldr	r1, [r0, #0]
   1b274:	4668      	mov	r0, sp
   1b276:	f88d 4000 	strb.w	r4, [sp]
   1b27a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b27e:	f000 fea4 	bl	1bfca <bt_uuid_cmp>
   1b282:	b918      	cbnz	r0, 1b28c <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1b284:	6828      	ldr	r0, [r5, #0]
   1b286:	3808      	subs	r0, #8
}
   1b288:	b003      	add	sp, #12
   1b28a:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1b28c:	f642 0301 	movw	r3, #10241	; 0x2801
   1b290:	6829      	ldr	r1, [r5, #0]
   1b292:	a801      	add	r0, sp, #4
   1b294:	f88d 4004 	strb.w	r4, [sp, #4]
   1b298:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b29c:	f000 fe95 	bl	1bfca <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b2a0:	2800      	cmp	r0, #0
   1b2a2:	d0ef      	beq.n	1b284 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1b2a4:	4620      	mov	r0, r4
   1b2a6:	e7ef      	b.n	1b288 <bt_gatt_dm_attr_service_val+0x20>

0001b2a8 <bt_gatt_dm_attr_chrc_val>:
{
   1b2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b2aa:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2ae:	2400      	movs	r4, #0
{
   1b2b0:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b2b2:	6801      	ldr	r1, [r0, #0]
   1b2b4:	a801      	add	r0, sp, #4
   1b2b6:	f88d 4004 	strb.w	r4, [sp, #4]
   1b2ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b2be:	f000 fe84 	bl	1bfca <bt_uuid_cmp>
   1b2c2:	b918      	cbnz	r0, 1b2cc <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1b2c4:	6828      	ldr	r0, [r5, #0]
   1b2c6:	3808      	subs	r0, #8
}
   1b2c8:	b003      	add	sp, #12
   1b2ca:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1b2cc:	4620      	mov	r0, r4
   1b2ce:	e7fb      	b.n	1b2c8 <bt_gatt_dm_attr_chrc_val+0x20>

0001b2d0 <bt_gatt_dm_conn_get>:
}
   1b2d0:	6800      	ldr	r0, [r0, #0]
   1b2d2:	4770      	bx	lr

0001b2d4 <bt_gatt_dm_service_get>:
}
   1b2d4:	301c      	adds	r0, #28
   1b2d6:	4770      	bx	lr

0001b2d8 <bt_gatt_dm_char_next>:
{
   1b2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1b2da:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1b2de:	b131      	cbz	r1, 1b2ee <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1b2e0:	42a9      	cmp	r1, r5
   1b2e2:	d203      	bcs.n	1b2ec <bt_gatt_dm_char_next+0x14>
	return NULL;
   1b2e4:	2500      	movs	r5, #0
}
   1b2e6:	4628      	mov	r0, r5
   1b2e8:	b003      	add	sp, #12
   1b2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2ec:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b2ee:	2600      	movs	r6, #0
   1b2f0:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1b2f4:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1b2f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1b2fc:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1b300:	3508      	adds	r5, #8
   1b302:	42ac      	cmp	r4, r5
   1b304:	d9ee      	bls.n	1b2e4 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b306:	6829      	ldr	r1, [r5, #0]
   1b308:	a801      	add	r0, sp, #4
   1b30a:	f88d 6004 	strb.w	r6, [sp, #4]
   1b30e:	f8ad 7006 	strh.w	r7, [sp, #6]
   1b312:	f000 fe5a 	bl	1bfca <bt_uuid_cmp>
   1b316:	2800      	cmp	r0, #0
   1b318:	d1f2      	bne.n	1b300 <bt_gatt_dm_char_next+0x28>
   1b31a:	e7e4      	b.n	1b2e6 <bt_gatt_dm_char_next+0xe>

0001b31c <bt_gatt_dm_attr_next>:
{
   1b31c:	4602      	mov	r2, r0
		prev = dm->attrs;
   1b31e:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1b322:	b111      	cbz	r1, 1b32a <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1b324:	4299      	cmp	r1, r3
   1b326:	d30b      	bcc.n	1b340 <bt_gatt_dm_attr_next+0x24>
   1b328:	460b      	mov	r3, r1
		if (++prev < end) {
   1b32a:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1b32e:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1b332:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1b336:	321c      	adds	r2, #28
	return NULL;
   1b338:	4290      	cmp	r0, r2
   1b33a:	bf28      	it	cs
   1b33c:	2000      	movcs	r0, #0
   1b33e:	4770      	bx	lr
   1b340:	2000      	movs	r0, #0
}
   1b342:	4770      	bx	lr

0001b344 <bt_gatt_dm_desc_next>:
{
   1b344:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1b346:	f7ff ffe9 	bl	1b31c <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1b34a:	4604      	mov	r4, r0
   1b34c:	b158      	cbz	r0, 1b366 <bt_gatt_dm_desc_next+0x22>
   1b34e:	2300      	movs	r3, #0
   1b350:	f88d 3004 	strb.w	r3, [sp, #4]
   1b354:	f642 0303 	movw	r3, #10243	; 0x2803
   1b358:	6801      	ldr	r1, [r0, #0]
   1b35a:	a801      	add	r0, sp, #4
   1b35c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b360:	f000 fe33 	bl	1bfca <bt_uuid_cmp>
   1b364:	b900      	cbnz	r0, 1b368 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1b366:	2400      	movs	r4, #0
}
   1b368:	4620      	mov	r0, r4
   1b36a:	b002      	add	sp, #8
   1b36c:	bd10      	pop	{r4, pc}

0001b36e <bt_gatt_dm_desc_by_uuid>:
{
   1b36e:	b570      	push	{r4, r5, r6, lr}
   1b370:	4605      	mov	r5, r0
   1b372:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1b374:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1b376:	4621      	mov	r1, r4
   1b378:	4628      	mov	r0, r5
   1b37a:	f7ff ffe3 	bl	1b344 <bt_gatt_dm_desc_next>
   1b37e:	4604      	mov	r4, r0
   1b380:	b128      	cbz	r0, 1b38e <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1b382:	4630      	mov	r0, r6
   1b384:	6821      	ldr	r1, [r4, #0]
   1b386:	f000 fe20 	bl	1bfca <bt_uuid_cmp>
   1b38a:	2800      	cmp	r0, #0
   1b38c:	d1f3      	bne.n	1b376 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1b38e:	4620      	mov	r0, r4
   1b390:	bd70      	pop	{r4, r5, r6, pc}

0001b392 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1b392:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b394:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1b398:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b39a:	f06f 0102 	mvn.w	r1, #2
   1b39e:	4628      	mov	r0, r5
   1b3a0:	f7ff ff43 	bl	1b22a <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b3a4:	0783      	lsls	r3, r0, #30
   1b3a6:	d509      	bpl.n	1b3bc <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1b3a8:	4620      	mov	r0, r4
   1b3aa:	f7ff ff27 	bl	1b1fc <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3ae:	f06f 0101 	mvn.w	r1, #1
   1b3b2:	4628      	mov	r0, r5
   1b3b4:	f7ff ff39 	bl	1b22a <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1b3b8:	2000      	movs	r0, #0
}
   1b3ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1b3bc:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b3c0:	e7fb      	b.n	1b3ba <bt_gatt_dm_data_release+0x28>

0001b3c2 <bt_scan_stop>:
	return bt_le_scan_stop();
   1b3c2:	f7f5 be2d 	b.w	11020 <bt_le_scan_stop>

0001b3c6 <bt_bas_conn>:
}
   1b3c6:	6800      	ldr	r0, [r0, #0]
   1b3c8:	4770      	bx	lr

0001b3ca <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1b3ca:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1b3cc:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1b3ce:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1b3d0:	bf9c      	itt	ls
   1b3d2:	6880      	ldrls	r0, [r0, #8]
   1b3d4:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1b3d6:	3b01      	subs	r3, #1
   1b3d8:	1a98      	subs	r0, r3, r2
}
   1b3da:	4770      	bx	lr

0001b3dc <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1b3e0:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b3e4:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1b3e6:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b3ea:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1b3ec:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b3ee:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b3f0:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1b3f2:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1b3f4:	d904      	bls.n	1b400 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b3f6:	f000 fd73 	bl	1bee0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1b3fa:	60ec      	str	r4, [r5, #12]
}
   1b3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b400:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1b402:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b406:	f000 fd6b 	bl	1bee0 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b40a:	4622      	mov	r2, r4
   1b40c:	6868      	ldr	r0, [r5, #4]
   1b40e:	eb07 0108 	add.w	r1, r7, r8
   1b412:	e7f0      	b.n	1b3f6 <_WriteNoCheck+0x1a>

0001b414 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b418:	4606      	mov	r6, r0
   1b41a:	4689      	mov	r9, r1
   1b41c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1b41e:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1b422:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1b424:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b426:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1b428:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b42a:	bf28      	it	cs
   1b42c:	18e4      	addcs	r4, r4, r3
   1b42e:	3c01      	subs	r4, #1
   1b430:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1b432:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1b434:	42bc      	cmp	r4, r7
   1b436:	bf28      	it	cs
   1b438:	463c      	movcs	r4, r7
   1b43a:	4294      	cmp	r4, r2
   1b43c:	bf28      	it	cs
   1b43e:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1b440:	6870      	ldr	r0, [r6, #4]
   1b442:	4649      	mov	r1, r9
   1b444:	4428      	add	r0, r5
   1b446:	4622      	mov	r2, r4
   1b448:	f000 fd4a 	bl	1bee0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1b44c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1b44e:	4425      	add	r5, r4
      WrOff = 0u;
   1b450:	42ab      	cmp	r3, r5
   1b452:	bf08      	it	eq
   1b454:	2500      	moveq	r5, #0
  } while (NumBytes);
   1b456:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1b458:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1b45a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1b45c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1b45e:	d1e1      	bne.n	1b424 <_WriteBlocking+0x10>
}
   1b460:	4640      	mov	r0, r8
   1b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b466 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1b466:	f7f2 b999 	b.w	d79c <_DoInit>

0001b46a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1b46a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1b46c:	f7ff fffb 	bl	1b466 <SEGGER_RTT_Init>

	return 0;
}
   1b470:	2000      	movs	r0, #0
   1b472:	bd08      	pop	{r3, pc}

0001b474 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b474:	b538      	push	{r3, r4, r5, lr}
   1b476:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b478:	42ab      	cmp	r3, r5
{
   1b47a:	4611      	mov	r1, r2
   1b47c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b47e:	d804      	bhi.n	1b48a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b480:	461a      	mov	r2, r3
   1b482:	f000 fd2d 	bl	1bee0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b486:	4620      	mov	r0, r4
   1b488:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b48a:	2400      	movs	r4, #0
   1b48c:	e7fb      	b.n	1b486 <_copy+0x12>

0001b48e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b48e:	f000 bd52 	b.w	1bf36 <memset>

0001b492 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b492:	09c3      	lsrs	r3, r0, #7
   1b494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b498:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b49c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b4a0:	b2c0      	uxtb	r0, r0
   1b4a2:	4770      	bx	lr

0001b4a4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b4a4:	78cb      	ldrb	r3, [r1, #3]
   1b4a6:	7802      	ldrb	r2, [r0, #0]
   1b4a8:	4053      	eors	r3, r2
   1b4aa:	7003      	strb	r3, [r0, #0]
   1b4ac:	884b      	ldrh	r3, [r1, #2]
   1b4ae:	7842      	ldrb	r2, [r0, #1]
   1b4b0:	4053      	eors	r3, r2
   1b4b2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b4b4:	680a      	ldr	r2, [r1, #0]
   1b4b6:	7883      	ldrb	r3, [r0, #2]
   1b4b8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b4bc:	7083      	strb	r3, [r0, #2]
   1b4be:	680a      	ldr	r2, [r1, #0]
   1b4c0:	78c3      	ldrb	r3, [r0, #3]
   1b4c2:	4053      	eors	r3, r2
   1b4c4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b4c6:	79cb      	ldrb	r3, [r1, #7]
   1b4c8:	7902      	ldrb	r2, [r0, #4]
   1b4ca:	4053      	eors	r3, r2
   1b4cc:	7103      	strb	r3, [r0, #4]
   1b4ce:	88cb      	ldrh	r3, [r1, #6]
   1b4d0:	7942      	ldrb	r2, [r0, #5]
   1b4d2:	4053      	eors	r3, r2
   1b4d4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b4d6:	684a      	ldr	r2, [r1, #4]
   1b4d8:	7983      	ldrb	r3, [r0, #6]
   1b4da:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b4de:	7183      	strb	r3, [r0, #6]
   1b4e0:	684a      	ldr	r2, [r1, #4]
   1b4e2:	79c3      	ldrb	r3, [r0, #7]
   1b4e4:	4053      	eors	r3, r2
   1b4e6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b4e8:	7acb      	ldrb	r3, [r1, #11]
   1b4ea:	7a02      	ldrb	r2, [r0, #8]
   1b4ec:	4053      	eors	r3, r2
   1b4ee:	7203      	strb	r3, [r0, #8]
   1b4f0:	7a42      	ldrb	r2, [r0, #9]
   1b4f2:	894b      	ldrh	r3, [r1, #10]
   1b4f4:	4053      	eors	r3, r2
   1b4f6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b4f8:	688a      	ldr	r2, [r1, #8]
   1b4fa:	7a83      	ldrb	r3, [r0, #10]
   1b4fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b500:	7283      	strb	r3, [r0, #10]
   1b502:	688a      	ldr	r2, [r1, #8]
   1b504:	7ac3      	ldrb	r3, [r0, #11]
   1b506:	4053      	eors	r3, r2
   1b508:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b50a:	7bcb      	ldrb	r3, [r1, #15]
   1b50c:	7b02      	ldrb	r2, [r0, #12]
   1b50e:	4053      	eors	r3, r2
   1b510:	7303      	strb	r3, [r0, #12]
   1b512:	89cb      	ldrh	r3, [r1, #14]
   1b514:	7b42      	ldrb	r2, [r0, #13]
   1b516:	4053      	eors	r3, r2
   1b518:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b51a:	68ca      	ldr	r2, [r1, #12]
   1b51c:	7b83      	ldrb	r3, [r0, #14]
   1b51e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b522:	7383      	strb	r3, [r0, #14]
   1b524:	68ca      	ldr	r2, [r1, #12]
   1b526:	7bc3      	ldrb	r3, [r0, #15]
   1b528:	4053      	eors	r3, r2
   1b52a:	73c3      	strb	r3, [r0, #15]
}
   1b52c:	4770      	bx	lr

0001b52e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b52e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b530:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b532:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b534:	f88d 2000 	strb.w	r2, [sp]
   1b538:	7942      	ldrb	r2, [r0, #5]
   1b53a:	f88d 2001 	strb.w	r2, [sp, #1]
   1b53e:	7a82      	ldrb	r2, [r0, #10]
   1b540:	f88d 2002 	strb.w	r2, [sp, #2]
   1b544:	7bc2      	ldrb	r2, [r0, #15]
   1b546:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b54a:	7902      	ldrb	r2, [r0, #4]
   1b54c:	f88d 2004 	strb.w	r2, [sp, #4]
   1b550:	7a42      	ldrb	r2, [r0, #9]
   1b552:	f88d 2005 	strb.w	r2, [sp, #5]
   1b556:	7b82      	ldrb	r2, [r0, #14]
   1b558:	f88d 2006 	strb.w	r2, [sp, #6]
   1b55c:	78c2      	ldrb	r2, [r0, #3]
   1b55e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b562:	7a02      	ldrb	r2, [r0, #8]
   1b564:	f88d 2008 	strb.w	r2, [sp, #8]
   1b568:	7b42      	ldrb	r2, [r0, #13]
   1b56a:	f88d 2009 	strb.w	r2, [sp, #9]
   1b56e:	7882      	ldrb	r2, [r0, #2]
   1b570:	f88d 200a 	strb.w	r2, [sp, #10]
   1b574:	79c2      	ldrb	r2, [r0, #7]
   1b576:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b57a:	7b02      	ldrb	r2, [r0, #12]
   1b57c:	f88d 200c 	strb.w	r2, [sp, #12]
   1b580:	7842      	ldrb	r2, [r0, #1]
   1b582:	f88d 200d 	strb.w	r2, [sp, #13]
   1b586:	7982      	ldrb	r2, [r0, #6]
   1b588:	f88d 200e 	strb.w	r2, [sp, #14]
   1b58c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b590:	2310      	movs	r3, #16
   1b592:	466a      	mov	r2, sp
   1b594:	4619      	mov	r1, r3
   1b596:	f7ff ff6d 	bl	1b474 <_copy>
}
   1b59a:	b005      	add	sp, #20
   1b59c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5a0 <mult_row_column>:
{
   1b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5a2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b5a4:	7808      	ldrb	r0, [r1, #0]
{
   1b5a6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b5a8:	f7ff ff73 	bl	1b492 <_double_byte>
   1b5ac:	4605      	mov	r5, r0
   1b5ae:	7860      	ldrb	r0, [r4, #1]
   1b5b0:	f7ff ff6f 	bl	1b492 <_double_byte>
   1b5b4:	78a2      	ldrb	r2, [r4, #2]
   1b5b6:	7863      	ldrb	r3, [r4, #1]
   1b5b8:	4053      	eors	r3, r2
   1b5ba:	78e2      	ldrb	r2, [r4, #3]
   1b5bc:	4053      	eors	r3, r2
   1b5be:	405d      	eors	r5, r3
   1b5c0:	4045      	eors	r5, r0
   1b5c2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b5c4:	7860      	ldrb	r0, [r4, #1]
   1b5c6:	7827      	ldrb	r7, [r4, #0]
   1b5c8:	f7ff ff63 	bl	1b492 <_double_byte>
   1b5cc:	4605      	mov	r5, r0
   1b5ce:	78a0      	ldrb	r0, [r4, #2]
   1b5d0:	f7ff ff5f 	bl	1b492 <_double_byte>
   1b5d4:	78a3      	ldrb	r3, [r4, #2]
   1b5d6:	405f      	eors	r7, r3
   1b5d8:	78e3      	ldrb	r3, [r4, #3]
   1b5da:	405f      	eors	r7, r3
   1b5dc:	407d      	eors	r5, r7
   1b5de:	4045      	eors	r5, r0
   1b5e0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b5e2:	78a0      	ldrb	r0, [r4, #2]
   1b5e4:	7865      	ldrb	r5, [r4, #1]
   1b5e6:	7827      	ldrb	r7, [r4, #0]
   1b5e8:	f7ff ff53 	bl	1b492 <_double_byte>
   1b5ec:	406f      	eors	r7, r5
   1b5ee:	4605      	mov	r5, r0
   1b5f0:	78e0      	ldrb	r0, [r4, #3]
   1b5f2:	f7ff ff4e 	bl	1b492 <_double_byte>
   1b5f6:	78e3      	ldrb	r3, [r4, #3]
   1b5f8:	405f      	eors	r7, r3
   1b5fa:	407d      	eors	r5, r7
   1b5fc:	4045      	eors	r5, r0
   1b5fe:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b600:	7820      	ldrb	r0, [r4, #0]
   1b602:	f7ff ff46 	bl	1b492 <_double_byte>
   1b606:	7863      	ldrb	r3, [r4, #1]
   1b608:	7825      	ldrb	r5, [r4, #0]
   1b60a:	405d      	eors	r5, r3
   1b60c:	78a3      	ldrb	r3, [r4, #2]
   1b60e:	405d      	eors	r5, r3
   1b610:	4045      	eors	r5, r0
   1b612:	78e0      	ldrb	r0, [r4, #3]
   1b614:	f7ff ff3d 	bl	1b492 <_double_byte>
   1b618:	b2ed      	uxtb	r5, r5
   1b61a:	4045      	eors	r5, r0
   1b61c:	70f5      	strb	r5, [r6, #3]
}
   1b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b620 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b620:	b570      	push	{r4, r5, r6, lr}
   1b622:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b624:	4605      	mov	r5, r0
{
   1b626:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b628:	2800      	cmp	r0, #0
   1b62a:	d049      	beq.n	1b6c0 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b62c:	2900      	cmp	r1, #0
   1b62e:	d049      	beq.n	1b6c4 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b630:	2a00      	cmp	r2, #0
   1b632:	d049      	beq.n	1b6c8 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b634:	2310      	movs	r3, #16
   1b636:	460a      	mov	r2, r1
   1b638:	4668      	mov	r0, sp
   1b63a:	4619      	mov	r1, r3
   1b63c:	f7ff ff1a 	bl	1b474 <_copy>
	add_round_key(state, s->words);
   1b640:	4621      	mov	r1, r4
   1b642:	4668      	mov	r0, sp
   1b644:	f7ff ff2e 	bl	1b4a4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b648:	3410      	adds	r4, #16
   1b64a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b64e:	4668      	mov	r0, sp
   1b650:	f7f2 f904 	bl	d85c <sub_bytes>
		shift_rows(state);
   1b654:	4668      	mov	r0, sp
   1b656:	f7ff ff6a 	bl	1b52e <shift_rows>
	mult_row_column(t, s);
   1b65a:	4669      	mov	r1, sp
   1b65c:	a804      	add	r0, sp, #16
   1b65e:	f7ff ff9f 	bl	1b5a0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b662:	a901      	add	r1, sp, #4
   1b664:	a805      	add	r0, sp, #20
   1b666:	f7ff ff9b 	bl	1b5a0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b66a:	a902      	add	r1, sp, #8
   1b66c:	a806      	add	r0, sp, #24
   1b66e:	f7ff ff97 	bl	1b5a0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b672:	a903      	add	r1, sp, #12
   1b674:	a807      	add	r0, sp, #28
   1b676:	f7ff ff93 	bl	1b5a0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b67a:	2310      	movs	r3, #16
   1b67c:	4668      	mov	r0, sp
   1b67e:	4619      	mov	r1, r3
   1b680:	eb0d 0203 	add.w	r2, sp, r3
   1b684:	f7ff fef6 	bl	1b474 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b688:	4621      	mov	r1, r4
   1b68a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b68c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b68e:	f7ff ff09 	bl	1b4a4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b692:	42a6      	cmp	r6, r4
   1b694:	d1db      	bne.n	1b64e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b696:	f7f2 f8e1 	bl	d85c <sub_bytes>
	shift_rows(state);
   1b69a:	4668      	mov	r0, sp
   1b69c:	f7ff ff47 	bl	1b52e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b6a0:	4631      	mov	r1, r6
   1b6a2:	4668      	mov	r0, sp
   1b6a4:	f7ff fefe 	bl	1b4a4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b6a8:	2310      	movs	r3, #16
   1b6aa:	466a      	mov	r2, sp
   1b6ac:	4619      	mov	r1, r3
   1b6ae:	4628      	mov	r0, r5
   1b6b0:	f7ff fee0 	bl	1b474 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b6b4:	4668      	mov	r0, sp
   1b6b6:	2210      	movs	r2, #16
   1b6b8:	2100      	movs	r1, #0
   1b6ba:	f7ff fee8 	bl	1b48e <_set>

	return TC_CRYPTO_SUCCESS;
   1b6be:	2001      	movs	r0, #1
}
   1b6c0:	b008      	add	sp, #32
   1b6c2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b6c4:	4608      	mov	r0, r1
   1b6c6:	e7fb      	b.n	1b6c0 <tc_aes_encrypt+0xa0>
   1b6c8:	4610      	mov	r0, r2
   1b6ca:	e7f9      	b.n	1b6c0 <tc_aes_encrypt+0xa0>

0001b6cc <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b6cc:	460a      	mov	r2, r1
{
   1b6ce:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b6d0:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b6d4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b6d6:	2b00      	cmp	r3, #0
   1b6d8:	bfb4      	ite	lt
   1b6da:	2387      	movlt	r3, #135	; 0x87
   1b6dc:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b6de:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b6e2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b6e6:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b6e8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b6ec:	d002      	beq.n	1b6f4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b6ee:	7813      	ldrb	r3, [r2, #0]
   1b6f0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b6f2:	e7f4      	b.n	1b6de <gf_double+0x12>
	}
}
   1b6f4:	bd10      	pop	{r4, pc}

0001b6f6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b6f6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b6f8:	b120      	cbz	r0, 1b704 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b6fa:	2258      	movs	r2, #88	; 0x58
   1b6fc:	2100      	movs	r1, #0
   1b6fe:	f7ff fec6 	bl	1b48e <_set>
   1b702:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b704:	bd08      	pop	{r3, pc}

0001b706 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b706:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b708:	4604      	mov	r4, r0
   1b70a:	b188      	cbz	r0, 1b730 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b70c:	2210      	movs	r2, #16
   1b70e:	2100      	movs	r1, #0
   1b710:	f7ff febd 	bl	1b48e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b714:	2210      	movs	r2, #16
   1b716:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b71a:	2100      	movs	r1, #0
   1b71c:	f7ff feb7 	bl	1b48e <_set>
	s->leftover_offset = 0;
   1b720:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b722:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b724:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b72a:	2001      	movs	r0, #1
   1b72c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b730:	bd10      	pop	{r4, pc}

0001b732 <tc_cmac_setup>:
{
   1b732:	b570      	push	{r4, r5, r6, lr}
   1b734:	460d      	mov	r5, r1
   1b736:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b738:	4604      	mov	r4, r0
   1b73a:	b310      	cbz	r0, 1b782 <tc_cmac_setup+0x50>
   1b73c:	b311      	cbz	r1, 1b784 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1b73e:	2258      	movs	r2, #88	; 0x58
   1b740:	2100      	movs	r1, #0
   1b742:	f7ff fea4 	bl	1b48e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b746:	4629      	mov	r1, r5
   1b748:	4630      	mov	r0, r6
	s->sched = sched;
   1b74a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b74c:	f7f2 f892 	bl	d874 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b750:	2210      	movs	r2, #16
   1b752:	2100      	movs	r1, #0
   1b754:	4620      	mov	r0, r4
   1b756:	f7ff fe9a 	bl	1b48e <_set>
	gf_double (s->K1, s->iv);
   1b75a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b75e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b760:	4621      	mov	r1, r4
   1b762:	4620      	mov	r0, r4
   1b764:	f7ff ff5c 	bl	1b620 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b768:	4621      	mov	r1, r4
   1b76a:	4628      	mov	r0, r5
   1b76c:	f7ff ffae 	bl	1b6cc <gf_double>
	gf_double (s->K2, s->K1);
   1b770:	4629      	mov	r1, r5
   1b772:	f104 0020 	add.w	r0, r4, #32
   1b776:	f7ff ffa9 	bl	1b6cc <gf_double>
	tc_cmac_init(s);
   1b77a:	4620      	mov	r0, r4
   1b77c:	f7ff ffc3 	bl	1b706 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b780:	2001      	movs	r0, #1
}
   1b782:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b784:	4608      	mov	r0, r1
   1b786:	e7fc      	b.n	1b782 <tc_cmac_setup+0x50>

0001b788 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b78c:	460d      	mov	r5, r1
   1b78e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b790:	4604      	mov	r4, r0
   1b792:	2800      	cmp	r0, #0
   1b794:	d061      	beq.n	1b85a <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b796:	b912      	cbnz	r2, 1b79e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b798:	2001      	movs	r0, #1
}
   1b79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b79e:	2900      	cmp	r1, #0
   1b7a0:	d05b      	beq.n	1b85a <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1b7a2:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b7a6:	ea53 0102 	orrs.w	r1, r3, r2
   1b7aa:	d056      	beq.n	1b85a <tc_cmac_update+0xd2>
	s->countdown--;
   1b7ac:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1b7ae:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b7b2:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b7b6:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b7ba:	f1b8 0f00 	cmp.w	r8, #0
   1b7be:	d02a      	beq.n	1b816 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b7c0:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b7c4:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b7c8:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b7ca:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b7cc:	d208      	bcs.n	1b7e0 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b7ce:	462a      	mov	r2, r5
   1b7d0:	4633      	mov	r3, r6
   1b7d2:	4631      	mov	r1, r6
   1b7d4:	f7ff fe4e 	bl	1b474 <_copy>
			s->leftover_offset += data_length;
   1b7d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b7da:	4432      	add	r2, r6
   1b7dc:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b7de:	e7db      	b.n	1b798 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b7e0:	463b      	mov	r3, r7
   1b7e2:	462a      	mov	r2, r5
   1b7e4:	4639      	mov	r1, r7
   1b7e6:	f7ff fe45 	bl	1b474 <_copy>
		s->leftover_offset = 0;
   1b7ea:	2300      	movs	r3, #0
   1b7ec:	3e10      	subs	r6, #16
   1b7ee:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b7f0:	4446      	add	r6, r8
		data += remaining_space;
   1b7f2:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7f4:	1e63      	subs	r3, r4, #1
   1b7f6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b7fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b7fe:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b802:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b804:	ea82 0200 	eor.w	r2, r2, r0
   1b808:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b80a:	d1f6      	bne.n	1b7fa <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b80c:	4621      	mov	r1, r4
   1b80e:	4620      	mov	r0, r4
   1b810:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b812:	f7ff ff05 	bl	1b620 <tc_aes_encrypt>
   1b816:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b81a:	2e10      	cmp	r6, #16
   1b81c:	d80a      	bhi.n	1b834 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b81e:	2e00      	cmp	r6, #0
   1b820:	d0ba      	beq.n	1b798 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b822:	4633      	mov	r3, r6
   1b824:	462a      	mov	r2, r5
   1b826:	4631      	mov	r1, r6
   1b828:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b82c:	f7ff fe22 	bl	1b474 <_copy>
		s->leftover_offset = data_length;
   1b830:	6466      	str	r6, [r4, #68]	; 0x44
   1b832:	e7b1      	b.n	1b798 <tc_cmac_update+0x10>
   1b834:	1e63      	subs	r3, r4, #1
   1b836:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b838:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b83c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b840:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b842:	ea82 0200 	eor.w	r2, r2, r0
   1b846:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b848:	d1f6      	bne.n	1b838 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b84a:	4621      	mov	r1, r4
   1b84c:	4620      	mov	r0, r4
   1b84e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b850:	f7ff fee6 	bl	1b620 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b854:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b856:	3e10      	subs	r6, #16
   1b858:	e7df      	b.n	1b81a <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b85a:	2000      	movs	r0, #0
   1b85c:	e79d      	b.n	1b79a <tc_cmac_update+0x12>

0001b85e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b85e:	b570      	push	{r4, r5, r6, lr}
   1b860:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b862:	4605      	mov	r5, r0
   1b864:	b1f0      	cbz	r0, 1b8a4 <tc_cmac_final+0x46>
   1b866:	b371      	cbz	r1, 1b8c6 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b868:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b86a:	2a10      	cmp	r2, #16
   1b86c:	d11b      	bne.n	1b8a6 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b86e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b870:	1e63      	subs	r3, r4, #1
   1b872:	3901      	subs	r1, #1
   1b874:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b878:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b87c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b880:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b882:	ea82 0206 	eor.w	r2, r2, r6
   1b886:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b88a:	ea82 0206 	eor.w	r2, r2, r6
   1b88e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b890:	d1f2      	bne.n	1b878 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b892:	4621      	mov	r1, r4
   1b894:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b896:	4628      	mov	r0, r5
   1b898:	f7ff fec2 	bl	1b620 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b89c:	4620      	mov	r0, r4
   1b89e:	f7ff ff2a 	bl	1b6f6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b8a2:	2001      	movs	r0, #1
}
   1b8a4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b8a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b8aa:	2100      	movs	r1, #0
   1b8ac:	f1c2 0210 	rsb	r2, r2, #16
   1b8b0:	4420      	add	r0, r4
   1b8b2:	f7ff fdec 	bl	1b48e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b8b6:	2280      	movs	r2, #128	; 0x80
   1b8b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b8ba:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b8be:	4423      	add	r3, r4
   1b8c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b8c4:	e7d4      	b.n	1b870 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b8c6:	4608      	mov	r0, r1
   1b8c8:	e7ec      	b.n	1b8a4 <tc_cmac_final+0x46>

0001b8ca <tc_sha256_update>:
{
   1b8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8cc:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b8ce:	b110      	cbz	r0, 1b8d6 <tc_sha256_update+0xc>
   1b8d0:	b1f9      	cbz	r1, 1b912 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b8d2:	b90a      	cbnz	r2, 1b8d8 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b8d4:	2001      	movs	r0, #1
}
   1b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b8d8:	2600      	movs	r6, #0
   1b8da:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b8dc:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1b8e0:	42a5      	cmp	r5, r4
   1b8e2:	d0f7      	beq.n	1b8d4 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1b8e4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b8e6:	1c5a      	adds	r2, r3, #1
   1b8e8:	6682      	str	r2, [r0, #104]	; 0x68
   1b8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b8ee:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b8f0:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b8f2:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b8f6:	d9f3      	bls.n	1b8e0 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1b8f8:	4639      	mov	r1, r7
   1b8fa:	f7f2 f80f 	bl	d91c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b8fe:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b902:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b906:	f142 0200 	adc.w	r2, r2, #0
   1b90a:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b90e:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b910:	e7e6      	b.n	1b8e0 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1b912:	4608      	mov	r0, r1
   1b914:	e7df      	b.n	1b8d6 <tc_sha256_update+0xc>

0001b916 <tc_sha256_final>:
{
   1b916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b918:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b91a:	4605      	mov	r5, r0
   1b91c:	2800      	cmp	r0, #0
   1b91e:	d055      	beq.n	1b9cc <tc_sha256_final+0xb6>
   1b920:	2900      	cmp	r1, #0
   1b922:	d054      	beq.n	1b9ce <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1b924:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b926:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b92a:	00d8      	lsls	r0, r3, #3
   1b92c:	1812      	adds	r2, r2, r0
   1b92e:	f141 0100 	adc.w	r1, r1, #0
   1b932:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b936:	2280      	movs	r2, #128	; 0x80
   1b938:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b93a:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b93c:	4423      	add	r3, r4
   1b93e:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b940:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b948:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b94c:	d90a      	bls.n	1b964 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b94e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b952:	4639      	mov	r1, r7
   1b954:	4430      	add	r0, r6
   1b956:	f7ff fd9a 	bl	1b48e <_set>
		compress(s->iv, s->leftover);
   1b95a:	4631      	mov	r1, r6
   1b95c:	4620      	mov	r0, r4
   1b95e:	f7f1 ffdd 	bl	d91c <compress>
		s->leftover_offset = 0;
   1b962:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b964:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b966:	2100      	movs	r1, #0
   1b968:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b96c:	4430      	add	r0, r6
   1b96e:	f7ff fd8e 	bl	1b48e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b972:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b974:	4631      	mov	r1, r6
   1b976:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b978:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b97a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b97c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b97e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b982:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b986:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b988:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1b98a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b98c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b990:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b994:	f7f1 ffc2 	bl	d91c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b998:	1f26      	subs	r6, r4, #4
   1b99a:	1d2b      	adds	r3, r5, #4
   1b99c:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b9a0:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b9a4:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1b9a6:	0e11      	lsrs	r1, r2, #24
   1b9a8:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1b9ac:	0c11      	lsrs	r1, r2, #16
   1b9ae:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1b9b2:	0a11      	lsrs	r1, r2, #8
   1b9b4:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1b9b8:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b9bc:	4283      	cmp	r3, r0
   1b9be:	d1ef      	bne.n	1b9a0 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1b9c0:	4620      	mov	r0, r4
   1b9c2:	2270      	movs	r2, #112	; 0x70
   1b9c4:	2100      	movs	r1, #0
   1b9c6:	f7ff fd62 	bl	1b48e <_set>
	return TC_CRYPTO_SUCCESS;
   1b9ca:	2001      	movs	r0, #1
}
   1b9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b9ce:	4608      	mov	r0, r1
   1b9d0:	e7fc      	b.n	1b9cc <tc_sha256_final+0xb6>

0001b9d2 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1b9d2:	b530      	push	{r4, r5, lr}
   1b9d4:	1e43      	subs	r3, r0, #1
   1b9d6:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1b9d8:	42a9      	cmp	r1, r5
   1b9da:	d106      	bne.n	1b9ea <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b9dc:	2136      	movs	r1, #54	; 0x36
   1b9de:	245c      	movs	r4, #92	; 0x5c
   1b9e0:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b9e2:	1a13      	subs	r3, r2, r0
   1b9e4:	2b3f      	cmp	r3, #63	; 0x3f
   1b9e6:	d90c      	bls.n	1ba02 <rekey+0x30>
	}
}
   1b9e8:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1b9ea:	780c      	ldrb	r4, [r1, #0]
   1b9ec:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1b9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1b9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b9f8:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1b9fc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1ba00:	e7ea      	b.n	1b9d8 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1ba02:	f802 1b01 	strb.w	r1, [r2], #1
   1ba06:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1ba0a:	e7ea      	b.n	1b9e2 <rekey+0x10>

0001ba0c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1ba0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba0e:	460e      	mov	r6, r1
   1ba10:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1ba12:	4605      	mov	r5, r0
{
   1ba14:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1ba16:	b1b8      	cbz	r0, 1ba48 <tc_hmac_set_key+0x3c>
   1ba18:	b341      	cbz	r1, 1ba6c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1ba1a:	b34a      	cbz	r2, 1ba70 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1ba1c:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1ba1e:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1ba22:	d813      	bhi.n	1ba4c <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1ba24:	a810      	add	r0, sp, #64	; 0x40
   1ba26:	f7f2 f861 	bl	daec <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1ba2a:	4622      	mov	r2, r4
   1ba2c:	4669      	mov	r1, sp
   1ba2e:	a810      	add	r0, sp, #64	; 0x40
   1ba30:	f7ff ff4b 	bl	1b8ca <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1ba34:	a910      	add	r1, sp, #64	; 0x40
   1ba36:	a834      	add	r0, sp, #208	; 0xd0
   1ba38:	f7ff ff6d 	bl	1b916 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1ba3c:	4622      	mov	r2, r4
   1ba3e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1ba40:	4638      	mov	r0, r7
   1ba42:	f7ff ffc6 	bl	1b9d2 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1ba46:	2001      	movs	r0, #1
}
   1ba48:	b04d      	add	sp, #308	; 0x134
   1ba4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1ba4c:	f7f2 f84e 	bl	daec <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1ba50:	4622      	mov	r2, r4
   1ba52:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1ba54:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1ba58:	4628      	mov	r0, r5
   1ba5a:	f7ff ff36 	bl	1b8ca <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1ba5e:	4629      	mov	r1, r5
   1ba60:	4620      	mov	r0, r4
   1ba62:	f7ff ff58 	bl	1b916 <tc_sha256_final>
		rekey(ctx->key,
   1ba66:	2220      	movs	r2, #32
   1ba68:	4621      	mov	r1, r4
   1ba6a:	e7e9      	b.n	1ba40 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1ba6c:	4608      	mov	r0, r1
   1ba6e:	e7eb      	b.n	1ba48 <tc_hmac_set_key+0x3c>
   1ba70:	4610      	mov	r0, r2
   1ba72:	e7e9      	b.n	1ba48 <tc_hmac_set_key+0x3c>

0001ba74 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1ba74:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1ba76:	4604      	mov	r4, r0
   1ba78:	b140      	cbz	r0, 1ba8c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1ba7a:	f7f2 f837 	bl	daec <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1ba7e:	2240      	movs	r2, #64	; 0x40
   1ba80:	4620      	mov	r0, r4
   1ba82:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1ba86:	f7ff ff20 	bl	1b8ca <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1ba8a:	2001      	movs	r0, #1
}
   1ba8c:	bd10      	pop	{r4, pc}

0001ba8e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1ba8e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1ba90:	b110      	cbz	r0, 1ba98 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1ba92:	f7ff ff1a 	bl	1b8ca <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1ba96:	2001      	movs	r0, #1
}
   1ba98:	bd08      	pop	{r3, pc}

0001ba9a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1ba9a:	b570      	push	{r4, r5, r6, lr}
   1ba9c:	460e      	mov	r6, r1
   1ba9e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1baa0:	4605      	mov	r5, r0
   1baa2:	b1f0      	cbz	r0, 1bae2 <tc_hmac_final+0x48>
   1baa4:	2920      	cmp	r1, #32
   1baa6:	d11c      	bne.n	1bae2 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1baa8:	b1ea      	cbz	r2, 1bae6 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1baaa:	4611      	mov	r1, r2
   1baac:	f7ff ff33 	bl	1b916 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1bab0:	4620      	mov	r0, r4
   1bab2:	f7f2 f81b 	bl	daec <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1bab6:	2240      	movs	r2, #64	; 0x40
   1bab8:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1babc:	4620      	mov	r0, r4
   1babe:	f7ff ff04 	bl	1b8ca <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1bac2:	4632      	mov	r2, r6
   1bac4:	4629      	mov	r1, r5
   1bac6:	4620      	mov	r0, r4
   1bac8:	f7ff feff 	bl	1b8ca <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1bacc:	4621      	mov	r1, r4
   1bace:	4628      	mov	r0, r5
   1bad0:	f7ff ff21 	bl	1b916 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1bad4:	4620      	mov	r0, r4
   1bad6:	22f0      	movs	r2, #240	; 0xf0
   1bad8:	2100      	movs	r1, #0
   1bada:	f7ff fcd8 	bl	1b48e <_set>

	return TC_CRYPTO_SUCCESS;
   1bade:	2001      	movs	r0, #1
}
   1bae0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1bae2:	2000      	movs	r0, #0
   1bae4:	e7fc      	b.n	1bae0 <tc_hmac_final+0x46>
   1bae6:	4610      	mov	r0, r2
   1bae8:	e7fa      	b.n	1bae0 <tc_hmac_final+0x46>

0001baea <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1baea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baee:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1baf0:	f04f 0b01 	mov.w	fp, #1
{
   1baf4:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1baf6:	2300      	movs	r3, #0
{
   1baf8:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bafa:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1bafe:	4631      	mov	r1, r6
{
   1bb00:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb02:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1bb04:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1bb08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1bb0c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bb10:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb14:	f7ff ff7a 	bl	1ba0c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1bb18:	4620      	mov	r0, r4
   1bb1a:	f7ff ffab 	bl	1ba74 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bb1e:	2220      	movs	r2, #32
   1bb20:	4629      	mov	r1, r5
   1bb22:	4620      	mov	r0, r4
   1bb24:	f7ff ffb3 	bl	1ba8e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1bb28:	465a      	mov	r2, fp
   1bb2a:	4620      	mov	r0, r4
   1bb2c:	f10d 0106 	add.w	r1, sp, #6
   1bb30:	f7ff ffad 	bl	1ba8e <tc_hmac_update>

	if (data && datalen)
   1bb34:	f1b8 0f00 	cmp.w	r8, #0
   1bb38:	d007      	beq.n	1bb4a <update+0x60>
   1bb3a:	f1b9 0f00 	cmp.w	r9, #0
   1bb3e:	d004      	beq.n	1bb4a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1bb40:	464a      	mov	r2, r9
   1bb42:	4641      	mov	r1, r8
   1bb44:	4620      	mov	r0, r4
   1bb46:	f7ff ffa2 	bl	1ba8e <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bb4a:	b13f      	cbz	r7, 1bb5c <update+0x72>
   1bb4c:	f1ba 0f00 	cmp.w	sl, #0
   1bb50:	d004      	beq.n	1bb5c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bb52:	4652      	mov	r2, sl
   1bb54:	4639      	mov	r1, r7
   1bb56:	4620      	mov	r0, r4
   1bb58:	f7ff ff99 	bl	1ba8e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bb5c:	4622      	mov	r2, r4
   1bb5e:	2120      	movs	r1, #32
   1bb60:	4630      	mov	r0, r6
   1bb62:	f7ff ff9a 	bl	1ba9a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb66:	2220      	movs	r2, #32
   1bb68:	4631      	mov	r1, r6
   1bb6a:	4620      	mov	r0, r4
   1bb6c:	f7ff ff4e 	bl	1ba0c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bb70:	4620      	mov	r0, r4
   1bb72:	f7ff ff7f 	bl	1ba74 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bb76:	2220      	movs	r2, #32
   1bb78:	4629      	mov	r1, r5
   1bb7a:	4620      	mov	r0, r4
   1bb7c:	f7ff ff87 	bl	1ba8e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bb80:	4622      	mov	r2, r4
   1bb82:	2120      	movs	r1, #32
   1bb84:	4628      	mov	r0, r5
   1bb86:	f7ff ff88 	bl	1ba9a <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1bb8a:	f1b8 0f00 	cmp.w	r8, #0
   1bb8e:	d03a      	beq.n	1bc06 <update+0x11c>
   1bb90:	f1b9 0f00 	cmp.w	r9, #0
   1bb94:	d037      	beq.n	1bc06 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb96:	2220      	movs	r2, #32
   1bb98:	4631      	mov	r1, r6
   1bb9a:	4620      	mov	r0, r4
   1bb9c:	f7ff ff36 	bl	1ba0c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1bba0:	4620      	mov	r0, r4
   1bba2:	f7ff ff67 	bl	1ba74 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bba6:	2220      	movs	r2, #32
   1bba8:	4629      	mov	r1, r5
   1bbaa:	4620      	mov	r0, r4
   1bbac:	f7ff ff6f 	bl	1ba8e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1bbb0:	2201      	movs	r2, #1
   1bbb2:	f10d 0107 	add.w	r1, sp, #7
   1bbb6:	4620      	mov	r0, r4
   1bbb8:	f7ff ff69 	bl	1ba8e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1bbbc:	464a      	mov	r2, r9
   1bbbe:	4641      	mov	r1, r8
   1bbc0:	4620      	mov	r0, r4
   1bbc2:	f7ff ff64 	bl	1ba8e <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bbc6:	b13f      	cbz	r7, 1bbd8 <update+0xee>
   1bbc8:	f1ba 0f00 	cmp.w	sl, #0
   1bbcc:	d004      	beq.n	1bbd8 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bbce:	4652      	mov	r2, sl
   1bbd0:	4639      	mov	r1, r7
   1bbd2:	4620      	mov	r0, r4
   1bbd4:	f7ff ff5b 	bl	1ba8e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bbd8:	4622      	mov	r2, r4
   1bbda:	2120      	movs	r1, #32
   1bbdc:	4630      	mov	r0, r6
   1bbde:	f7ff ff5c 	bl	1ba9a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bbe2:	2220      	movs	r2, #32
   1bbe4:	4631      	mov	r1, r6
   1bbe6:	4620      	mov	r0, r4
   1bbe8:	f7ff ff10 	bl	1ba0c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bbec:	4620      	mov	r0, r4
   1bbee:	f7ff ff41 	bl	1ba74 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bbf2:	2220      	movs	r2, #32
   1bbf4:	4629      	mov	r1, r5
   1bbf6:	4620      	mov	r0, r4
   1bbf8:	f7ff ff49 	bl	1ba8e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bbfc:	4622      	mov	r2, r4
   1bbfe:	2120      	movs	r1, #32
   1bc00:	4628      	mov	r0, r5
   1bc02:	f7ff ff4a 	bl	1ba9a <tc_hmac_final>
}
   1bc06:	b003      	add	sp, #12
   1bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bc0c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1bc0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc0e:	460c      	mov	r4, r1
   1bc10:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bc12:	4605      	mov	r5, r0
   1bc14:	b1b0      	cbz	r0, 1bc44 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1bc16:	b1b9      	cbz	r1, 1bc48 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1bc18:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1bc1a:	2220      	movs	r2, #32
   1bc1c:	2100      	movs	r1, #0
   1bc1e:	30f0      	adds	r0, #240	; 0xf0
   1bc20:	f7ff fc35 	bl	1b48e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1bc24:	2220      	movs	r2, #32
   1bc26:	2101      	movs	r1, #1
   1bc28:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1bc2c:	f7ff fc2f 	bl	1b48e <_set>
	update(prng, personalization, plen, 0, 0);
   1bc30:	4628      	mov	r0, r5
   1bc32:	4633      	mov	r3, r6
   1bc34:	463a      	mov	r2, r7
   1bc36:	4621      	mov	r1, r4
   1bc38:	9600      	str	r6, [sp, #0]
   1bc3a:	f7ff ff56 	bl	1baea <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1bc3e:	2001      	movs	r0, #1
	prng->countdown = 0;
   1bc40:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1bc44:	b003      	add	sp, #12
   1bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1bc48:	4608      	mov	r0, r1
   1bc4a:	e7fb      	b.n	1bc44 <tc_hmac_prng_init+0x38>

0001bc4c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1bc4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc4e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bc50:	4605      	mov	r5, r0
   1bc52:	b180      	cbz	r0, 1bc76 <tc_hmac_prng_reseed+0x2a>
   1bc54:	b179      	cbz	r1, 1bc76 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1bc56:	2a1f      	cmp	r2, #31
   1bc58:	d90d      	bls.n	1bc76 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1bc5a:	b153      	cbz	r3, 1bc72 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1bc5c:	b16c      	cbz	r4, 1bc7a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1bc5e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1bc60:	f7ff ff43 	bl	1baea <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1bc64:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1bc68:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1bc6a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1bc6e:	b003      	add	sp, #12
   1bc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1bc72:	9300      	str	r3, [sp, #0]
   1bc74:	e7f4      	b.n	1bc60 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1bc76:	2000      	movs	r0, #0
   1bc78:	e7f9      	b.n	1bc6e <tc_hmac_prng_reseed+0x22>
   1bc7a:	4620      	mov	r0, r4
   1bc7c:	e7f7      	b.n	1bc6e <tc_hmac_prng_reseed+0x22>

0001bc7e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1bc7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bc82:	460d      	mov	r5, r1
   1bc84:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1bc86:	4680      	mov	r8, r0
   1bc88:	b3d8      	cbz	r0, 1bd02 <tc_hmac_prng_generate+0x84>
   1bc8a:	b3d2      	cbz	r2, 1bd02 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1bc8c:	1e4b      	subs	r3, r1, #1
   1bc8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1bc92:	d236      	bcs.n	1bd02 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1bc94:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1bc98:	b3ab      	cbz	r3, 1bd06 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1bc9a:	3b01      	subs	r3, #1
   1bc9c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bca0:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bca4:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bca8:	2220      	movs	r2, #32
   1bcaa:	4649      	mov	r1, r9
   1bcac:	4620      	mov	r0, r4
   1bcae:	f7ff fead 	bl	1ba0c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1bcb2:	4620      	mov	r0, r4
   1bcb4:	f7ff fede 	bl	1ba74 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bcb8:	2220      	movs	r2, #32
   1bcba:	4639      	mov	r1, r7
   1bcbc:	4620      	mov	r0, r4
   1bcbe:	f7ff fee6 	bl	1ba8e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bcc2:	4622      	mov	r2, r4
   1bcc4:	2120      	movs	r1, #32
   1bcc6:	4638      	mov	r0, r7
   1bcc8:	f7ff fee7 	bl	1ba9a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1bccc:	2d20      	cmp	r5, #32
   1bcce:	462e      	mov	r6, r5
   1bcd0:	bf28      	it	cs
   1bcd2:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1bcd4:	4640      	mov	r0, r8
   1bcd6:	4633      	mov	r3, r6
   1bcd8:	463a      	mov	r2, r7
   1bcda:	4631      	mov	r1, r6
   1bcdc:	f7ff fbca 	bl	1b474 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1bce0:	2d20      	cmp	r5, #32
   1bce2:	bf38      	it	cc
   1bce4:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1bce6:	3d20      	subs	r5, #32
		out += bufferlen;
   1bce8:	44b0      	add	r8, r6
	while (outlen != 0) {
   1bcea:	d1dd      	bne.n	1bca8 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1bcec:	4620      	mov	r0, r4
   1bcee:	462b      	mov	r3, r5
   1bcf0:	462a      	mov	r2, r5
   1bcf2:	4629      	mov	r1, r5
   1bcf4:	9500      	str	r5, [sp, #0]
   1bcf6:	f7ff fef8 	bl	1baea <update>

	return TC_CRYPTO_SUCCESS;
   1bcfa:	2001      	movs	r0, #1
}
   1bcfc:	b003      	add	sp, #12
   1bcfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1bd02:	2000      	movs	r0, #0
   1bd04:	e7fa      	b.n	1bcfc <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1bd06:	f04f 30ff 	mov.w	r0, #4294967295
   1bd0a:	e7f7      	b.n	1bcfc <tc_hmac_prng_generate+0x7e>

0001bd0c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1bd0c:	2100      	movs	r1, #0
   1bd0e:	2001      	movs	r0, #1
   1bd10:	f7f2 b80a 	b.w	dd28 <z_arm_fatal_error>

0001bd14 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1bd14:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1bd16:	f383 880b 	msr	PSPLIM, r3
}
   1bd1a:	4770      	bx	lr

0001bd1c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1bd1c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1bd1e:	6800      	ldr	r0, [r0, #0]
   1bd20:	f7f2 b802 	b.w	dd28 <z_arm_fatal_error>

0001bd24 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1bd24:	b508      	push	{r3, lr}
	handler();
   1bd26:	f7f2 f82d 	bl	dd84 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1bd2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1bd2e:	f7f2 ba71 	b.w	e214 <z_arm_exc_exit>

0001bd32 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1bd32:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1bd36:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1bd3a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1bd3c:	bf08      	it	eq
   1bd3e:	f06f 0015 	mvneq.w	r0, #21
   1bd42:	4770      	bx	lr

0001bd44 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1bd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bd48:	4684      	mov	ip, r0
   1bd4a:	4688      	mov	r8, r1
	register const char *s = nptr;
   1bd4c:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1bd4e:	4621      	mov	r1, r4
   1bd50:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bd54:	2b20      	cmp	r3, #32
   1bd56:	d0fa      	beq.n	1bd4e <strtol+0xa>
   1bd58:	f1a3 0009 	sub.w	r0, r3, #9
   1bd5c:	2804      	cmp	r0, #4
   1bd5e:	d9f6      	bls.n	1bd4e <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1bd60:	2b2d      	cmp	r3, #45	; 0x2d
   1bd62:	d12d      	bne.n	1bdc0 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1bd64:	784b      	ldrb	r3, [r1, #1]
   1bd66:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1bd68:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bd6a:	2a00      	cmp	r2, #0
   1bd6c:	d05a      	beq.n	1be24 <strtol+0xe0>
   1bd6e:	2a10      	cmp	r2, #16
   1bd70:	d109      	bne.n	1bd86 <strtol+0x42>
   1bd72:	2b30      	cmp	r3, #48	; 0x30
   1bd74:	d107      	bne.n	1bd86 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bd76:	7823      	ldrb	r3, [r4, #0]
   1bd78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bd7c:	2b58      	cmp	r3, #88	; 0x58
   1bd7e:	d14c      	bne.n	1be1a <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1bd80:	2210      	movs	r2, #16
		c = s[1];
   1bd82:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bd84:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bd86:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1bd88:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1bd8c:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1bd8e:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1bd92:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1bd94:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bd98:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bd9c:	2d09      	cmp	r5, #9
   1bd9e:	d815      	bhi.n	1bdcc <strtol+0x88>
			c -= '0';
   1bda0:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bda2:	429a      	cmp	r2, r3
   1bda4:	dd22      	ble.n	1bdec <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1bda6:	1c75      	adds	r5, r6, #1
   1bda8:	d007      	beq.n	1bdba <strtol+0x76>
   1bdaa:	4570      	cmp	r0, lr
   1bdac:	d81b      	bhi.n	1bde6 <strtol+0xa2>
   1bdae:	d101      	bne.n	1bdb4 <strtol+0x70>
   1bdb0:	454b      	cmp	r3, r9
   1bdb2:	dc18      	bgt.n	1bde6 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1bdb4:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bdb6:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bdba:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bdbe:	e7eb      	b.n	1bd98 <strtol+0x54>
	} else if (c == '+') {
   1bdc0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bdc2:	bf04      	itt	eq
   1bdc4:	784b      	ldrbeq	r3, [r1, #1]
   1bdc6:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1bdc8:	2100      	movs	r1, #0
   1bdca:	e7ce      	b.n	1bd6a <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bdcc:	f043 0520 	orr.w	r5, r3, #32
   1bdd0:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bdd2:	2d19      	cmp	r5, #25
   1bdd4:	d80a      	bhi.n	1bdec <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bdd6:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bdda:	2d1a      	cmp	r5, #26
   1bddc:	bf34      	ite	cc
   1bdde:	2537      	movcc	r5, #55	; 0x37
   1bde0:	2557      	movcs	r5, #87	; 0x57
   1bde2:	1b5b      	subs	r3, r3, r5
   1bde4:	e7dd      	b.n	1bda2 <strtol+0x5e>
			any = -1;
   1bde6:	f04f 36ff 	mov.w	r6, #4294967295
   1bdea:	e7e6      	b.n	1bdba <strtol+0x76>
		}
	}

	if (any < 0) {
   1bdec:	1c73      	adds	r3, r6, #1
   1bdee:	d109      	bne.n	1be04 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1bdf0:	f7fb fec4 	bl	17b7c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1bdf4:	2326      	movs	r3, #38	; 0x26
   1bdf6:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1bdf8:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1bdfa:	f1b8 0f00 	cmp.w	r8, #0
   1bdfe:	d107      	bne.n	1be10 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1be00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1be04:	b101      	cbz	r1, 1be08 <strtol+0xc4>
		acc = -acc;
   1be06:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1be08:	f1b8 0f00 	cmp.w	r8, #0
   1be0c:	d0f8      	beq.n	1be00 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1be0e:	b10e      	cbz	r6, 1be14 <strtol+0xd0>
   1be10:	f104 3cff 	add.w	ip, r4, #4294967295
   1be14:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1be18:	e7f2      	b.n	1be00 <strtol+0xbc>
	if (base == 0) {
   1be1a:	2330      	movs	r3, #48	; 0x30
   1be1c:	2a00      	cmp	r2, #0
   1be1e:	d1b2      	bne.n	1bd86 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1be20:	2208      	movs	r2, #8
   1be22:	e7b0      	b.n	1bd86 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1be24:	2b30      	cmp	r3, #48	; 0x30
   1be26:	d0a6      	beq.n	1bd76 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1be28:	220a      	movs	r2, #10
   1be2a:	e7ac      	b.n	1bd86 <strtol+0x42>

0001be2c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1be2c:	4603      	mov	r3, r0
   1be2e:	3901      	subs	r1, #1
   1be30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1be34:	b90a      	cbnz	r2, 1be3a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1be36:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1be38:	4770      	bx	lr
		*d = *s;
   1be3a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1be3e:	e7f7      	b.n	1be30 <strcpy+0x4>

0001be40 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1be40:	b570      	push	{r4, r5, r6, lr}
   1be42:	4605      	mov	r5, r0
   1be44:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1be46:	b142      	cbz	r2, 1be5a <strncpy+0x1a>
   1be48:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1be4c:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1be4e:	b92c      	cbnz	r4, 1be5c <strncpy+0x1c>
   1be50:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1be52:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1be56:	429a      	cmp	r2, r3
   1be58:	d1fb      	bne.n	1be52 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1be5a:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1be5c:	4632      	mov	r2, r6
		*d = *s;
   1be5e:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1be62:	e7ef      	b.n	1be44 <strncpy+0x4>

0001be64 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1be64:	4603      	mov	r3, r0
	size_t n = 0;
   1be66:	2000      	movs	r0, #0

	while (*s != '\0') {
   1be68:	5c1a      	ldrb	r2, [r3, r0]
   1be6a:	b902      	cbnz	r2, 1be6e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1be6c:	4770      	bx	lr
		n++;
   1be6e:	3001      	adds	r0, #1
   1be70:	e7fa      	b.n	1be68 <strlen+0x4>

0001be72 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1be72:	4603      	mov	r3, r0
	size_t n = 0;
   1be74:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1be76:	5c1a      	ldrb	r2, [r3, r0]
   1be78:	b10a      	cbz	r2, 1be7e <strnlen+0xc>
   1be7a:	4288      	cmp	r0, r1
   1be7c:	d100      	bne.n	1be80 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1be7e:	4770      	bx	lr
		n++;
   1be80:	3001      	adds	r0, #1
   1be82:	e7f8      	b.n	1be76 <strnlen+0x4>

0001be84 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1be84:	1e43      	subs	r3, r0, #1
   1be86:	3901      	subs	r1, #1
   1be88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1be8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1be90:	4282      	cmp	r2, r0
   1be92:	d101      	bne.n	1be98 <strcmp+0x14>
   1be94:	2a00      	cmp	r2, #0
   1be96:	d1f7      	bne.n	1be88 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1be98:	1a10      	subs	r0, r2, r0
   1be9a:	4770      	bx	lr

0001be9c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1be9c:	b510      	push	{r4, lr}
   1be9e:	3901      	subs	r1, #1
   1bea0:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1bea2:	4282      	cmp	r2, r0
   1bea4:	d009      	beq.n	1beba <strncmp+0x1e>
   1bea6:	7803      	ldrb	r3, [r0, #0]
   1bea8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1beac:	42a3      	cmp	r3, r4
   1beae:	d100      	bne.n	1beb2 <strncmp+0x16>
   1beb0:	b90b      	cbnz	r3, 1beb6 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1beb2:	1b18      	subs	r0, r3, r4
   1beb4:	e002      	b.n	1bebc <strncmp+0x20>
		s1++;
   1beb6:	3001      	adds	r0, #1
		n--;
   1beb8:	e7f3      	b.n	1bea2 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1beba:	2000      	movs	r0, #0
}
   1bebc:	bd10      	pop	{r4, pc}

0001bebe <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bebe:	4603      	mov	r3, r0
   1bec0:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bec2:	b15a      	cbz	r2, 1bedc <memcmp+0x1e>
   1bec4:	3901      	subs	r1, #1
   1bec6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1bec8:	f813 0b01 	ldrb.w	r0, [r3], #1
   1becc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bed0:	42a3      	cmp	r3, r4
   1bed2:	d001      	beq.n	1bed8 <memcmp+0x1a>
   1bed4:	4290      	cmp	r0, r2
   1bed6:	d0f7      	beq.n	1bec8 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1bed8:	1a80      	subs	r0, r0, r2
}
   1beda:	bd10      	pop	{r4, pc}
		return 0;
   1bedc:	4610      	mov	r0, r2
   1bede:	e7fc      	b.n	1beda <memcmp+0x1c>

0001bee0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1bee0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1bee2:	ea81 0400 	eor.w	r4, r1, r0
   1bee6:	07a5      	lsls	r5, r4, #30
   1bee8:	4603      	mov	r3, r0
   1beea:	d00b      	beq.n	1bf04 <memcpy+0x24>
   1beec:	3b01      	subs	r3, #1
   1beee:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1bef0:	4291      	cmp	r1, r2
   1bef2:	d11b      	bne.n	1bf2c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1bef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1bef6:	2a00      	cmp	r2, #0
   1bef8:	d0fc      	beq.n	1bef4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1befa:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1befe:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1bf00:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1bf04:	079c      	lsls	r4, r3, #30
   1bf06:	d1f6      	bne.n	1bef6 <memcpy+0x16>
   1bf08:	f022 0403 	bic.w	r4, r2, #3
   1bf0c:	1f1d      	subs	r5, r3, #4
   1bf0e:	0896      	lsrs	r6, r2, #2
   1bf10:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1bf12:	42b9      	cmp	r1, r7
   1bf14:	d105      	bne.n	1bf22 <memcpy+0x42>
   1bf16:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1bf1a:	4423      	add	r3, r4
   1bf1c:	fb05 2206 	mla	r2, r5, r6, r2
   1bf20:	e7e4      	b.n	1beec <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1bf22:	f851 cb04 	ldr.w	ip, [r1], #4
   1bf26:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1bf2a:	e7f2      	b.n	1bf12 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1bf2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bf30:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1bf34:	e7dc      	b.n	1bef0 <memcpy+0x10>

0001bf36 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1bf36:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1bf38:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1bf3a:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1bf3c:	07a3      	lsls	r3, r4, #30
   1bf3e:	d111      	bne.n	1bf64 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1bf40:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1bf44:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1bf48:	f022 0303 	bic.w	r3, r2, #3
   1bf4c:	0896      	lsrs	r6, r2, #2
   1bf4e:	4423      	add	r3, r4
   1bf50:	429c      	cmp	r4, r3
   1bf52:	d10d      	bne.n	1bf70 <memset+0x3a>
   1bf54:	f06f 0403 	mvn.w	r4, #3
   1bf58:	fb04 2206 	mla	r2, r4, r6, r2
   1bf5c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1bf5e:	4293      	cmp	r3, r2
   1bf60:	d109      	bne.n	1bf76 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1bf62:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1bf64:	2a00      	cmp	r2, #0
   1bf66:	d0fc      	beq.n	1bf62 <memset+0x2c>
		*(d_byte++) = c_byte;
   1bf68:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1bf6c:	3a01      	subs	r2, #1
   1bf6e:	e7e5      	b.n	1bf3c <memset+0x6>
		*(d_word++) = c_word;
   1bf70:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1bf74:	e7ec      	b.n	1bf50 <memset+0x1a>
		*(d_byte++) = c_byte;
   1bf76:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bf7a:	e7f0      	b.n	1bf5e <memset+0x28>

0001bf7c <_stdout_hook_default>:
}
   1bf7c:	f04f 30ff 	mov.w	r0, #4294967295
   1bf80:	4770      	bx	lr

0001bf82 <bt_settings_decode_key>:
{
   1bf82:	b570      	push	{r4, r5, r6, lr}
   1bf84:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1bf86:	2100      	movs	r1, #0
{
   1bf88:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1bf8a:	f7ff f884 	bl	1b096 <settings_name_next>
   1bf8e:	280d      	cmp	r0, #13
   1bf90:	d118      	bne.n	1bfc4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1bf92:	7b23      	ldrb	r3, [r4, #12]
   1bf94:	2b30      	cmp	r3, #48	; 0x30
   1bf96:	d111      	bne.n	1bfbc <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1bf98:	2300      	movs	r3, #0
   1bf9a:	702b      	strb	r3, [r5, #0]
   1bf9c:	f104 060c 	add.w	r6, r4, #12
   1bfa0:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bfa2:	462a      	mov	r2, r5
   1bfa4:	4620      	mov	r0, r4
   1bfa6:	2301      	movs	r3, #1
   1bfa8:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1bfaa:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bfac:	f7fe fd0d 	bl	1a9ca <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1bfb0:	42b4      	cmp	r4, r6
   1bfb2:	f105 35ff 	add.w	r5, r5, #4294967295
   1bfb6:	d1f4      	bne.n	1bfa2 <bt_settings_decode_key+0x20>
	return 0;
   1bfb8:	2000      	movs	r0, #0
}
   1bfba:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1bfbc:	2b31      	cmp	r3, #49	; 0x31
   1bfbe:	d101      	bne.n	1bfc4 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1bfc0:	2301      	movs	r3, #1
   1bfc2:	e7ea      	b.n	1bf9a <bt_settings_decode_key+0x18>
		return -EINVAL;
   1bfc4:	f06f 0015 	mvn.w	r0, #21
   1bfc8:	e7f7      	b.n	1bfba <bt_settings_decode_key+0x38>

0001bfca <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1bfca:	b510      	push	{r4, lr}
   1bfcc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1bfce:	7801      	ldrb	r1, [r0, #0]
   1bfd0:	7822      	ldrb	r2, [r4, #0]
{
   1bfd2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1bfd4:	428a      	cmp	r2, r1
   1bfd6:	d00f      	beq.n	1bff8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1bfd8:	4669      	mov	r1, sp
   1bfda:	f7f2 fcc1 	bl	e960 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1bfde:	4620      	mov	r0, r4
   1bfe0:	a905      	add	r1, sp, #20
   1bfe2:	f7f2 fcbd 	bl	e960 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1bfe6:	2210      	movs	r2, #16
   1bfe8:	f10d 0115 	add.w	r1, sp, #21
   1bfec:	f10d 0001 	add.w	r0, sp, #1
   1bff0:	f7ff ff65 	bl	1bebe <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1bff4:	b00a      	add	sp, #40	; 0x28
   1bff6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1bff8:	2a01      	cmp	r2, #1
   1bffa:	d006      	beq.n	1c00a <bt_uuid_cmp+0x40>
   1bffc:	2a02      	cmp	r2, #2
   1bffe:	d007      	beq.n	1c010 <bt_uuid_cmp+0x46>
   1c000:	b972      	cbnz	r2, 1c020 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1c002:	8840      	ldrh	r0, [r0, #2]
   1c004:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1c006:	1ac0      	subs	r0, r0, r3
   1c008:	e7f4      	b.n	1bff4 <bt_uuid_cmp+0x2a>
   1c00a:	6840      	ldr	r0, [r0, #4]
   1c00c:	6863      	ldr	r3, [r4, #4]
   1c00e:	e7fa      	b.n	1c006 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c010:	2210      	movs	r2, #16
   1c012:	1c61      	adds	r1, r4, #1
   1c014:	3001      	adds	r0, #1
}
   1c016:	b00a      	add	sp, #40	; 0x28
   1c018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c01c:	f7ff bf4f 	b.w	1bebe <memcmp>
	switch (u1->type) {
   1c020:	f06f 0015 	mvn.w	r0, #21
   1c024:	e7e6      	b.n	1bff4 <bt_uuid_cmp+0x2a>

0001c026 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1c026:	2a04      	cmp	r2, #4
{
   1c028:	b510      	push	{r4, lr}
	switch (data_len) {
   1c02a:	d00a      	beq.n	1c042 <bt_uuid_create+0x1c>
   1c02c:	2a10      	cmp	r2, #16
   1c02e:	d00d      	beq.n	1c04c <bt_uuid_create+0x26>
   1c030:	2a02      	cmp	r2, #2
   1c032:	f04f 0300 	mov.w	r3, #0
   1c036:	d10f      	bne.n	1c058 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1c038:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1c03a:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1c03c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1c03e:	2001      	movs	r0, #1
}
   1c040:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1c042:	2301      	movs	r3, #1
   1c044:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1c046:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1c048:	6042      	str	r2, [r0, #4]
		break;
   1c04a:	e7f8      	b.n	1c03e <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1c04c:	2302      	movs	r3, #2
   1c04e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1c052:	f7ff ff45 	bl	1bee0 <memcpy>
		break;
   1c056:	e7f2      	b.n	1c03e <bt_uuid_create+0x18>
	switch (data_len) {
   1c058:	4618      	mov	r0, r3
   1c05a:	e7f1      	b.n	1c040 <bt_uuid_create+0x1a>

0001c05c <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1c05c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1c05e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1c060:	2106      	movs	r1, #6
{
   1c062:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1c064:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1c068:	f7f5 f86e 	bl	11148 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1c06c:	b918      	cbnz	r0, 1c076 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1c06e:	79a3      	ldrb	r3, [r4, #6]
   1c070:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c074:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1c076:	bd10      	pop	{r4, pc}

0001c078 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1c078:	280f      	cmp	r0, #15
   1c07a:	d806      	bhi.n	1c08a <bt_hci_evt_get_flags+0x12>
   1c07c:	280d      	cmp	r0, #13
   1c07e:	d80b      	bhi.n	1c098 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1c080:	2805      	cmp	r0, #5
   1c082:	bf14      	ite	ne
   1c084:	2002      	movne	r0, #2
   1c086:	2003      	moveq	r0, #3
   1c088:	4770      	bx	lr
	switch (evt) {
   1c08a:	2813      	cmp	r0, #19
   1c08c:	d004      	beq.n	1c098 <bt_hci_evt_get_flags+0x20>
   1c08e:	281a      	cmp	r0, #26
   1c090:	bf14      	ite	ne
   1c092:	2002      	movne	r0, #2
   1c094:	2001      	moveq	r0, #1
   1c096:	4770      	bx	lr
   1c098:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1c09a:	4770      	bx	lr

0001c09c <get_adv_channel_map>:
{
   1c09c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1c09e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1c0a2:	bf0c      	ite	eq
   1c0a4:	2007      	moveq	r0, #7
   1c0a6:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1c0a8:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1c0aa:	bf48      	it	mi
   1c0ac:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1c0b0:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1c0b2:	bf48      	it	mi
   1c0b4:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1c0b8:	4770      	bx	lr

0001c0ba <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c0ba:	e8d0 0faf 	lda	r0, [r0]
}
   1c0be:	4770      	bx	lr

0001c0c0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1c0c0:	2207      	movs	r2, #7
   1c0c2:	f7ff bf0d 	b.w	1bee0 <memcpy>

0001c0c6 <atomic_or>:
{
   1c0c6:	4603      	mov	r3, r0
}
   1c0c8:	e8d3 0fef 	ldaex	r0, [r3]
   1c0cc:	ea40 0201 	orr.w	r2, r0, r1
   1c0d0:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c0d4:	f1bc 0f00 	cmp.w	ip, #0
   1c0d8:	d1f6      	bne.n	1c0c8 <atomic_or+0x2>
   1c0da:	4770      	bx	lr

0001c0dc <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1c0dc:	2207      	movs	r2, #7
   1c0de:	f7ff beee 	b.w	1bebe <memcmp>

0001c0e2 <atomic_and>:
{
   1c0e2:	4603      	mov	r3, r0
}
   1c0e4:	e8d3 0fef 	ldaex	r0, [r3]
   1c0e8:	ea00 0201 	and.w	r2, r0, r1
   1c0ec:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c0f0:	f1bc 0f00 	cmp.w	ip, #0
   1c0f4:	d1f6      	bne.n	1c0e4 <atomic_and+0x2>
   1c0f6:	4770      	bx	lr

0001c0f8 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1c0f8:	460b      	mov	r3, r1
   1c0fa:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c0fc:	f001 041f 	and.w	r4, r1, #31
   1c100:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c102:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c104:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c106:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1c10a:	b112      	cbz	r2, 1c112 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1c10c:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c10e:	f7ff bfda 	b.w	1c0c6 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c112:	43c9      	mvns	r1, r1
}
   1c114:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c116:	f7ff bfe4 	b.w	1c0e2 <atomic_and>

0001c11a <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1c11a:	f100 0210 	add.w	r2, r0, #16
{
   1c11e:	b508      	push	{r3, lr}
   1c120:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c122:	4610      	mov	r0, r2
   1c124:	f7ff ffc9 	bl	1c0ba <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1c128:	0640      	lsls	r0, r0, #25
   1c12a:	d50a      	bpl.n	1c142 <adv_id_check_connectable_func+0x28>
   1c12c:	4610      	mov	r0, r2
   1c12e:	f7ff ffc4 	bl	1c0ba <atomic_get>
   1c132:	05c2      	lsls	r2, r0, #23
   1c134:	d505      	bpl.n	1c142 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1c136:	781a      	ldrb	r2, [r3, #0]
   1c138:	780b      	ldrb	r3, [r1, #0]
   1c13a:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1c13c:	bf1c      	itt	ne
   1c13e:	2301      	movne	r3, #1
   1c140:	704b      	strbne	r3, [r1, #1]
}
   1c142:	bd08      	pop	{r3, pc}

0001c144 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1c144:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c146:	2106      	movs	r1, #6
   1c148:	4668      	mov	r0, sp
   1c14a:	f7f4 fffd 	bl	11148 <bt_rand>
	if (err) {
   1c14e:	b940      	cbnz	r0, 1c162 <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1c150:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1c154:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c15a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1c15e:	f7f3 f907 	bl	f370 <set_random_address>
}
   1c162:	b003      	add	sp, #12
   1c164:	f85d fb04 	ldr.w	pc, [sp], #4

0001c168 <bt_lookup_id_addr>:
}
   1c168:	4608      	mov	r0, r1
   1c16a:	4770      	bx	lr

0001c16c <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1c16c:	f7f3 bb58 	b.w	f820 <bt_le_create_conn_legacy>

0001c170 <bt_hci_disconnect>:
{
   1c170:	b570      	push	{r4, r5, r6, lr}
   1c172:	4606      	mov	r6, r0
   1c174:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c176:	f240 4006 	movw	r0, #1030	; 0x406
   1c17a:	2103      	movs	r1, #3
   1c17c:	f7f3 f82c 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   1c180:	4604      	mov	r4, r0
   1c182:	b168      	cbz	r0, 1c1a0 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1c184:	2103      	movs	r1, #3
   1c186:	3008      	adds	r0, #8
   1c188:	f7f9 fd20 	bl	15bcc <net_buf_simple_add>
	disconn->reason = reason;
   1c18c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1c18e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c190:	4621      	mov	r1, r4
}
   1c192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c196:	2200      	movs	r2, #0
   1c198:	f240 4006 	movw	r0, #1030	; 0x406
   1c19c:	f7f3 b866 	b.w	f26c <bt_hci_cmd_send_sync>
}
   1c1a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c1a4:	bd70      	pop	{r4, r5, r6, pc}

0001c1a6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1c1a6:	8803      	ldrh	r3, [r0, #0]
   1c1a8:	8842      	ldrh	r2, [r0, #2]
{
   1c1aa:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c1ac:	4293      	cmp	r3, r2
   1c1ae:	d819      	bhi.n	1c1e4 <bt_le_conn_params_valid+0x3e>
   1c1b0:	2b05      	cmp	r3, #5
   1c1b2:	d917      	bls.n	1c1e4 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c1b4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1c1b8:	d814      	bhi.n	1c1e4 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1c1ba:	8883      	ldrh	r3, [r0, #4]
   1c1bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1c1c0:	d210      	bcs.n	1c1e4 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c1c2:	f640 4476 	movw	r4, #3190	; 0xc76
   1c1c6:	88c0      	ldrh	r0, [r0, #6]
   1c1c8:	f1a0 010a 	sub.w	r1, r0, #10
   1c1cc:	b289      	uxth	r1, r1
   1c1ce:	42a1      	cmp	r1, r4
   1c1d0:	d808      	bhi.n	1c1e4 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1c1d2:	3301      	adds	r3, #1
   1c1d4:	b29b      	uxth	r3, r3
   1c1d6:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c1d8:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1c1dc:	bf34      	ite	cc
   1c1de:	2001      	movcc	r0, #1
   1c1e0:	2000      	movcs	r0, #0
}
   1c1e2:	bd10      	pop	{r4, pc}
		return false;
   1c1e4:	2000      	movs	r0, #0
   1c1e6:	e7fc      	b.n	1c1e2 <bt_le_conn_params_valid+0x3c>

0001c1e8 <bt_le_set_data_len>:
{
   1c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1ea:	4607      	mov	r7, r0
   1c1ec:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c1ee:	f242 0022 	movw	r0, #8226	; 0x2022
   1c1f2:	2106      	movs	r1, #6
{
   1c1f4:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c1f6:	f7f2 ffef 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   1c1fa:	4604      	mov	r4, r0
   1c1fc:	b170      	cbz	r0, 1c21c <bt_le_set_data_len+0x34>
   1c1fe:	2106      	movs	r1, #6
   1c200:	3008      	adds	r0, #8
   1c202:	f7f9 fce3 	bl	15bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c206:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c208:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c20a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c20c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c20e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c210:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1c214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c218:	f7f3 bd24 	b.w	fc64 <bt_hci_cmd_send>
}
   1c21c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c222 <bt_le_set_phy>:
{
   1c222:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c226:	4680      	mov	r8, r0
   1c228:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c22a:	f242 0032 	movw	r0, #8242	; 0x2032
   1c22e:	2107      	movs	r1, #7
{
   1c230:	4616      	mov	r6, r2
   1c232:	461d      	mov	r5, r3
   1c234:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c238:	f7f2 ffce 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   1c23c:	4604      	mov	r4, r0
   1c23e:	b190      	cbz	r0, 1c266 <bt_le_set_phy+0x44>
   1c240:	2107      	movs	r1, #7
   1c242:	3008      	adds	r0, #8
   1c244:	f7f9 fcc2 	bl	15bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c248:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1c24c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1c24e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c250:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c252:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1c254:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c258:	4621      	mov	r1, r4
}
   1c25a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c25e:	f242 0032 	movw	r0, #8242	; 0x2032
   1c262:	f7f3 bcff 	b.w	fc64 <bt_hci_cmd_send>
}
   1c266:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c26e <bt_addr_le_is_bonded>:
}
   1c26e:	2000      	movs	r0, #0
   1c270:	4770      	bx	lr

0001c272 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1c272:	6880      	ldr	r0, [r0, #8]
   1c274:	f7f4 bd72 	b.w	10d5c <enh_conn_complete>

0001c278 <le_legacy_conn_complete>:
{
   1c278:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c27a:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1c27c:	6881      	ldr	r1, [r0, #8]
{
   1c27e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1c280:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c282:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1c284:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1c288:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c28c:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1c28e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1c292:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1c296:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1c29a:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1c29e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1c2a2:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1c2a6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1c2aa:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1c2ae:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1c2b2:	7b4b      	ldrb	r3, [r1, #13]
   1c2b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c2b8:	f7ff ff02 	bl	1c0c0 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1c2bc:	4669      	mov	r1, sp
   1c2be:	2206      	movs	r2, #6
   1c2c0:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c2c4:	9400      	str	r4, [sp, #0]
   1c2c6:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c2ca:	f7ff fe09 	bl	1bee0 <memcpy>
   1c2ce:	2206      	movs	r2, #6
   1c2d0:	4669      	mov	r1, sp
   1c2d2:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1c2d6:	9400      	str	r4, [sp, #0]
   1c2d8:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c2dc:	f7ff fe00 	bl	1bee0 <memcpy>
	enh_conn_complete(&enh);
   1c2e0:	a802      	add	r0, sp, #8
   1c2e2:	f7f4 fd3b 	bl	10d5c <enh_conn_complete>
}
   1c2e6:	b00a      	add	sp, #40	; 0x28
   1c2e8:	bd10      	pop	{r4, pc}

0001c2ea <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c2ea:	e8d0 0faf 	lda	r0, [r0]
}
   1c2ee:	4770      	bx	lr

0001c2f0 <tx_notify>:
{
   1c2f0:	b570      	push	{r4, r5, r6, lr}
   1c2f2:	4604      	mov	r4, r0
	__asm__ volatile(
   1c2f4:	f04f 0220 	mov.w	r2, #32
   1c2f8:	f3ef 8311 	mrs	r3, BASEPRI
   1c2fc:	f382 8811 	msr	BASEPRI, r2
   1c300:	f3bf 8f6f 	isb	sy
	return list->head;
   1c304:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1c306:	b920      	cbnz	r0, 1c312 <tx_notify+0x22>
	__asm__ volatile(
   1c308:	f383 8811 	msr	BASEPRI, r3
   1c30c:	f3bf 8f6f 	isb	sy
}
   1c310:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c312:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1c314:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c316:	4288      	cmp	r0, r1
	list->tail = node;
   1c318:	bf08      	it	eq
   1c31a:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1c31c:	6222      	str	r2, [r4, #32]
   1c31e:	f383 8811 	msr	BASEPRI, r3
   1c322:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1c326:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1c32a:	f7f4 ff25 	bl	11178 <tx_free>
		cb(conn, user_data);
   1c32e:	4631      	mov	r1, r6
   1c330:	4620      	mov	r0, r4
   1c332:	47a8      	blx	r5
	while (1) {
   1c334:	e7de      	b.n	1c2f4 <tx_notify+0x4>

0001c336 <tx_complete_work>:
	tx_notify(conn);
   1c336:	3828      	subs	r0, #40	; 0x28
   1c338:	f7ff bfda 	b.w	1c2f0 <tx_notify>

0001c33c <bt_conn_new>:
{
   1c33c:	b538      	push	{r3, r4, r5, lr}
   1c33e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1c340:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c342:	2501      	movs	r5, #1
   1c344:	428b      	cmp	r3, r1
   1c346:	d102      	bne.n	1c34e <bt_conn_new+0x12>
		return NULL;
   1c348:	2400      	movs	r4, #0
}
   1c34a:	4620      	mov	r0, r4
   1c34c:	bd38      	pop	{r3, r4, r5, pc}
   1c34e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1c352:	e8d2 0fef 	ldaex	r0, [r2]
   1c356:	2800      	cmp	r0, #0
   1c358:	d104      	bne.n	1c364 <bt_conn_new+0x28>
   1c35a:	e8c2 5fec 	stlex	ip, r5, [r2]
   1c35e:	f1bc 0f00 	cmp.w	ip, #0
   1c362:	d1f6      	bne.n	1c352 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1c364:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c368:	d002      	beq.n	1c370 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1c36a:	4604      	mov	r4, r0
   1c36c:	3301      	adds	r3, #1
   1c36e:	e7e9      	b.n	1c344 <bt_conn_new+0x8>
	if (!conn) {
   1c370:	2c00      	cmp	r4, #0
   1c372:	d0ea      	beq.n	1c34a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1c374:	22b8      	movs	r2, #184	; 0xb8
   1c376:	2100      	movs	r1, #0
   1c378:	4620      	mov	r0, r4
   1c37a:	f7ff fddc 	bl	1bf36 <memset>
	return conn;
   1c37e:	e7e4      	b.n	1c34a <bt_conn_new+0xe>

0001c380 <bt_conn_get_security>:
}
   1c380:	2001      	movs	r0, #1
   1c382:	4770      	bx	lr

0001c384 <bt_conn_reset_rx_state>:
{
   1c384:	b510      	push	{r4, lr}
   1c386:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c388:	6900      	ldr	r0, [r0, #16]
   1c38a:	b118      	cbz	r0, 1c394 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c38c:	f7f9 fb08 	bl	159a0 <net_buf_unref>
	conn->rx = NULL;
   1c390:	2300      	movs	r3, #0
   1c392:	6123      	str	r3, [r4, #16]
}
   1c394:	bd10      	pop	{r4, pc}

0001c396 <bt_conn_is_peer_addr_le>:
{
   1c396:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c398:	7a03      	ldrb	r3, [r0, #8]
{
   1c39a:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c39c:	428b      	cmp	r3, r1
{
   1c39e:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c3a0:	d115      	bne.n	1c3ce <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c3a2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c3a6:	2207      	movs	r2, #7
   1c3a8:	4628      	mov	r0, r5
   1c3aa:	f7ff fd88 	bl	1bebe <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1c3ae:	b180      	cbz	r0, 1c3d2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1c3b0:	78e3      	ldrb	r3, [r4, #3]
   1c3b2:	2207      	movs	r2, #7
   1c3b4:	b943      	cbnz	r3, 1c3c8 <bt_conn_is_peer_addr_le+0x32>
   1c3b6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c3ba:	4628      	mov	r0, r5
   1c3bc:	f7ff fd7f 	bl	1bebe <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1c3c0:	fab0 f080 	clz	r0, r0
   1c3c4:	0940      	lsrs	r0, r0, #5
}
   1c3c6:	bd38      	pop	{r3, r4, r5, pc}
   1c3c8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1c3cc:	e7f5      	b.n	1c3ba <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c3ce:	2000      	movs	r0, #0
   1c3d0:	e7f9      	b.n	1c3c6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c3d2:	2001      	movs	r0, #1
   1c3d4:	e7f7      	b.n	1c3c6 <bt_conn_is_peer_addr_le+0x30>

0001c3d6 <bt_conn_ref>:
{
   1c3d6:	4603      	mov	r3, r0
   1c3d8:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1c3da:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1c3de:	4610      	mov	r0, r2
   1c3e0:	f7ff ff83 	bl	1c2ea <atomic_get>
		if (!old) {
   1c3e4:	b160      	cbz	r0, 1c400 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1c3e6:	1c41      	adds	r1, r0, #1
   1c3e8:	e8d2 4fef 	ldaex	r4, [r2]
   1c3ec:	4284      	cmp	r4, r0
   1c3ee:	d104      	bne.n	1c3fa <bt_conn_ref+0x24>
   1c3f0:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c3f4:	f1bc 0f00 	cmp.w	ip, #0
   1c3f8:	d1f6      	bne.n	1c3e8 <bt_conn_ref+0x12>
   1c3fa:	d1f0      	bne.n	1c3de <bt_conn_ref+0x8>
}
   1c3fc:	4618      	mov	r0, r3
   1c3fe:	bd10      	pop	{r4, pc}
			return NULL;
   1c400:	4603      	mov	r3, r0
   1c402:	e7fb      	b.n	1c3fc <bt_conn_ref+0x26>

0001c404 <conn_lookup_handle>:
{
   1c404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c408:	4607      	mov	r7, r0
   1c40a:	460e      	mov	r6, r1
   1c40c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c40e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c410:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c414:	42b4      	cmp	r4, r6
   1c416:	d103      	bne.n	1c420 <conn_lookup_handle+0x1c>
	return NULL;
   1c418:	2300      	movs	r3, #0
}
   1c41a:	4618      	mov	r0, r3
   1c41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c420:	fb09 7004 	mla	r0, r9, r4, r7
   1c424:	f7ff ffd7 	bl	1c3d6 <bt_conn_ref>
   1c428:	4603      	mov	r3, r0
		if (!conn) {
   1c42a:	b158      	cbz	r0, 1c444 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c42c:	7a85      	ldrb	r5, [r0, #10]
   1c42e:	2d01      	cmp	r5, #1
   1c430:	d002      	beq.n	1c438 <conn_lookup_handle+0x34>
   1c432:	3d07      	subs	r5, #7
   1c434:	2d01      	cmp	r5, #1
   1c436:	d803      	bhi.n	1c440 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c438:	881a      	ldrh	r2, [r3, #0]
   1c43a:	4542      	cmp	r2, r8
   1c43c:	d0ed      	beq.n	1c41a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c43e:	4618      	mov	r0, r3
   1c440:	f7f5 f91e 	bl	11680 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c444:	3401      	adds	r4, #1
   1c446:	e7e5      	b.n	1c414 <conn_lookup_handle+0x10>

0001c448 <bt_conn_get_dst>:
}
   1c448:	3088      	adds	r0, #136	; 0x88
   1c44a:	4770      	bx	lr

0001c44c <bt_conn_le_conn_update>:
{
   1c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c44e:	4607      	mov	r7, r0
   1c450:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c452:	f242 0013 	movw	r0, #8211	; 0x2013
   1c456:	210e      	movs	r1, #14
   1c458:	f7f2 febe 	bl	f1d8 <bt_hci_cmd_create>
	if (!buf) {
   1c45c:	4606      	mov	r6, r0
   1c45e:	b1d0      	cbz	r0, 1c496 <bt_conn_le_conn_update+0x4a>
   1c460:	210e      	movs	r1, #14
   1c462:	3008      	adds	r0, #8
   1c464:	f7f9 fbb2 	bl	15bcc <net_buf_simple_add>
   1c468:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c46a:	220e      	movs	r2, #14
   1c46c:	2100      	movs	r1, #0
   1c46e:	f7ff fd62 	bl	1bf36 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c472:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c474:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c476:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c478:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c47a:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c47c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c47e:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c480:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c484:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c486:	88ab      	ldrh	r3, [r5, #4]
   1c488:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c48a:	88eb      	ldrh	r3, [r5, #6]
   1c48c:	8123      	strh	r3, [r4, #8]
}
   1c48e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c492:	f7f2 beeb 	b.w	f26c <bt_hci_cmd_send_sync>
}
   1c496:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c49c <l2cap_connected>:
}
   1c49c:	4770      	bx	lr

0001c49e <l2cap_disconnected>:
   1c49e:	4770      	bx	lr

0001c4a0 <bt_l2cap_chan_remove>:
	return list->head;
   1c4a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c4a2:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c4a4:	b17b      	cbz	r3, 1c4c6 <bt_l2cap_chan_remove+0x26>
   1c4a6:	2200      	movs	r2, #0
   1c4a8:	3b08      	subs	r3, #8
   1c4aa:	b163      	cbz	r3, 1c4c6 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1c4ac:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1c4ae:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1c4b2:	d10e      	bne.n	1c4d2 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1c4b4:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1c4b6:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1c4b8:	b932      	cbnz	r2, 1c4c8 <bt_l2cap_chan_remove+0x28>
   1c4ba:	42ac      	cmp	r4, r5
	list->head = node;
   1c4bc:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1c4be:	d100      	bne.n	1c4c2 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1c4c0:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1c4c2:	2200      	movs	r2, #0
   1c4c4:	609a      	str	r2, [r3, #8]
}
   1c4c6:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c4c8:	42ac      	cmp	r4, r5
	parent->next = child;
   1c4ca:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1c4cc:	bf08      	it	eq
   1c4ce:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1c4d0:	e7f7      	b.n	1c4c2 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c4d2:	2c00      	cmp	r4, #0
   1c4d4:	d0f7      	beq.n	1c4c6 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1c4d6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c4d8:	2b00      	cmp	r3, #0
   1c4da:	d0f4      	beq.n	1c4c6 <bt_l2cap_chan_remove+0x26>
   1c4dc:	4622      	mov	r2, r4
   1c4de:	3b08      	subs	r3, #8
   1c4e0:	e7e3      	b.n	1c4aa <bt_l2cap_chan_remove+0xa>

0001c4e2 <bt_l2cap_chan_del>:
{
   1c4e2:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1c4e4:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1c4e8:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c4ea:	b123      	cbz	r3, 1c4f6 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c4ec:	686b      	ldr	r3, [r5, #4]
   1c4ee:	b103      	cbz	r3, 1c4f2 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c4f0:	4798      	blx	r3
	chan->conn = NULL;
   1c4f2:	2300      	movs	r3, #0
   1c4f4:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c4f6:	68e3      	ldr	r3, [r4, #12]
   1c4f8:	b10b      	cbz	r3, 1c4fe <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c4fa:	4620      	mov	r0, r4
   1c4fc:	4798      	blx	r3
	if (ops->released) {
   1c4fe:	69eb      	ldr	r3, [r5, #28]
   1c500:	b11b      	cbz	r3, 1c50a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c502:	4620      	mov	r0, r4
}
   1c504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c508:	4718      	bx	r3
}
   1c50a:	bd70      	pop	{r4, r5, r6, pc}

0001c50c <bt_l2cap_disconnected>:
	return list->head;
   1c50c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c50e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c510:	b18b      	cbz	r3, 1c536 <bt_l2cap_disconnected+0x2a>
   1c512:	f1b3 0008 	subs.w	r0, r3, #8
   1c516:	d00e      	beq.n	1c536 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1c518:	681c      	ldr	r4, [r3, #0]
   1c51a:	b104      	cbz	r4, 1c51e <bt_l2cap_disconnected+0x12>
   1c51c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c51e:	f7ff ffe0 	bl	1c4e2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c522:	b144      	cbz	r4, 1c536 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c524:	f114 0308 	adds.w	r3, r4, #8
   1c528:	d002      	beq.n	1c530 <bt_l2cap_disconnected+0x24>
	return node->next;
   1c52a:	68a3      	ldr	r3, [r4, #8]
   1c52c:	b103      	cbz	r3, 1c530 <bt_l2cap_disconnected+0x24>
   1c52e:	3b08      	subs	r3, #8
{
   1c530:	4620      	mov	r0, r4
   1c532:	461c      	mov	r4, r3
   1c534:	e7f3      	b.n	1c51e <bt_l2cap_disconnected+0x12>
}
   1c536:	bd10      	pop	{r4, pc}

0001c538 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c538:	3104      	adds	r1, #4
   1c53a:	f7f5 bc2d 	b.w	11d98 <bt_conn_create_pdu_timeout>

0001c53e <bt_l2cap_send_cb>:
{
   1c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c542:	4614      	mov	r4, r2
   1c544:	4605      	mov	r5, r0
   1c546:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c548:	f102 0008 	add.w	r0, r2, #8
   1c54c:	2104      	movs	r1, #4
   1c54e:	461e      	mov	r6, r3
   1c550:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c554:	f7f9 fae2 	bl	15b1c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c558:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c55a:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c55c:	3a04      	subs	r2, #4
   1c55e:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1c560:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c562:	4632      	mov	r2, r6
   1c564:	4621      	mov	r1, r4
   1c566:	4628      	mov	r0, r5
}
   1c568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c56c:	f7f4 bfc6 	b.w	114fc <bt_conn_send_cb>

0001c570 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1c570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c572:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c574:	2202      	movs	r2, #2
   1c576:	2001      	movs	r0, #1
   1c578:	f7f5 fd60 	bl	1203c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c57c:	4604      	mov	r4, r0
   1c57e:	b160      	cbz	r0, 1c59a <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1c580:	2102      	movs	r1, #2
   1c582:	3008      	adds	r0, #8
   1c584:	f7f9 fb22 	bl	15bcc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c588:	2300      	movs	r3, #0
   1c58a:	4622      	mov	r2, r4
   1c58c:	7003      	strb	r3, [r0, #0]
   1c58e:	7043      	strb	r3, [r0, #1]
   1c590:	2105      	movs	r1, #5
   1c592:	4628      	mov	r0, r5
   1c594:	9300      	str	r3, [sp, #0]
   1c596:	f7ff ffd2 	bl	1c53e <bt_l2cap_send_cb>
}
   1c59a:	b003      	add	sp, #12
   1c59c:	bd30      	pop	{r4, r5, pc}

0001c59e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1c59e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c5a0:	b160      	cbz	r0, 1c5bc <bt_l2cap_le_lookup_tx_cid+0x1e>
   1c5a2:	3808      	subs	r0, #8
   1c5a4:	b900      	cbnz	r0, 1c5a8 <bt_l2cap_le_lookup_tx_cid+0xa>
   1c5a6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c5a8:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c5ac:	428b      	cmp	r3, r1
   1c5ae:	d005      	beq.n	1c5bc <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c5b0:	f110 0308 	adds.w	r3, r0, #8
   1c5b4:	d001      	beq.n	1c5ba <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1c5b6:	6880      	ldr	r0, [r0, #8]
   1c5b8:	e7f2      	b.n	1c5a0 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1c5ba:	4618      	mov	r0, r3
}
   1c5bc:	4770      	bx	lr

0001c5be <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c5be:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c5c0:	b160      	cbz	r0, 1c5dc <bt_l2cap_le_lookup_rx_cid+0x1e>
   1c5c2:	3808      	subs	r0, #8
   1c5c4:	b900      	cbnz	r0, 1c5c8 <bt_l2cap_le_lookup_rx_cid+0xa>
   1c5c6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c5c8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1c5cc:	428b      	cmp	r3, r1
   1c5ce:	d005      	beq.n	1c5dc <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c5d0:	f110 0308 	adds.w	r3, r0, #8
   1c5d4:	d001      	beq.n	1c5da <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1c5d6:	6880      	ldr	r0, [r0, #8]
   1c5d8:	e7f2      	b.n	1c5c0 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1c5da:	4618      	mov	r0, r3
}
   1c5dc:	4770      	bx	lr

0001c5de <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1c5de:	4770      	bx	lr

0001c5e0 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c5e0:	4603      	mov	r3, r0
	return list->head;
   1c5e2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c5e4:	b128      	cbz	r0, 1c5f2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c5e6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c5e8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c5ea:	4288      	cmp	r0, r1
	list->head = node;
   1c5ec:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c5ee:	bf08      	it	eq
   1c5f0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c5f2:	4770      	bx	lr

0001c5f4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c5f4:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c5f6:	2000      	movs	r0, #0

	while (buf) {
   1c5f8:	b903      	cbnz	r3, 1c5fc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c5fa:	4770      	bx	lr
		bytes += buf->len;
   1c5fc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c5fe:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c600:	4410      	add	r0, r2
		buf = buf->frags;
   1c602:	e7f9      	b.n	1c5f8 <net_buf_frags_len+0x4>

0001c604 <att_sent>:
	if (chan->ops->sent) {
   1c604:	684b      	ldr	r3, [r1, #4]
{
   1c606:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1c608:	695b      	ldr	r3, [r3, #20]
   1c60a:	b103      	cbz	r3, 1c60e <att_sent+0xa>
		chan->ops->sent(chan);
   1c60c:	4718      	bx	r3
}
   1c60e:	4770      	bx	lr

0001c610 <attr_read_type_cb>:
{
   1c610:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c612:	68d4      	ldr	r4, [r2, #12]
   1c614:	3102      	adds	r1, #2
   1c616:	7823      	ldrb	r3, [r4, #0]
   1c618:	b913      	cbnz	r3, 1c620 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c61a:	7021      	strb	r1, [r4, #0]
	return true;
   1c61c:	2001      	movs	r0, #1
   1c61e:	e006      	b.n	1c62e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c620:	428b      	cmp	r3, r1
   1c622:	d0fb      	beq.n	1c61c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c624:	8983      	ldrh	r3, [r0, #12]
   1c626:	3b02      	subs	r3, #2
   1c628:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c62a:	2000      	movs	r0, #0
   1c62c:	6110      	str	r0, [r2, #16]
}
   1c62e:	bd10      	pop	{r4, pc}

0001c630 <att_prepare_write_req>:
}
   1c630:	2006      	movs	r0, #6
   1c632:	4770      	bx	lr

0001c634 <att_op_get_type>:
	switch (op) {
   1c634:	281e      	cmp	r0, #30
   1c636:	d816      	bhi.n	1c666 <att_op_get_type+0x32>
   1c638:	b308      	cbz	r0, 1c67e <att_op_get_type+0x4a>
   1c63a:	1e43      	subs	r3, r0, #1
   1c63c:	2b1d      	cmp	r3, #29
   1c63e:	d81e      	bhi.n	1c67e <att_op_get_type+0x4a>
   1c640:	e8df f003 	tbb	[pc, r3]
   1c644:	23172317 	.word	0x23172317
   1c648:	23172317 	.word	0x23172317
   1c64c:	23172317 	.word	0x23172317
   1c650:	23172317 	.word	0x23172317
   1c654:	1d172317 	.word	0x1d172317
   1c658:	2317231d 	.word	0x2317231d
   1c65c:	1d191d17 	.word	0x1d191d17
   1c660:	0f1b      	.short	0x0f1b
   1c662:	2004      	movs	r0, #4
   1c664:	4770      	bx	lr
   1c666:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c66a:	2b52      	cmp	r3, #82	; 0x52
   1c66c:	d107      	bne.n	1c67e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c66e:	2000      	movs	r0, #0
}
   1c670:	4770      	bx	lr
		return ATT_RESPONSE;
   1c672:	2002      	movs	r0, #2
   1c674:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c676:	2003      	movs	r0, #3
   1c678:	4770      	bx	lr
		return ATT_INDICATION;
   1c67a:	2005      	movs	r0, #5
   1c67c:	4770      	bx	lr
		return ATT_COMMAND;
   1c67e:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c682:	bf0c      	ite	eq
   1c684:	2006      	moveq	r0, #6
   1c686:	2000      	movne	r0, #0
   1c688:	4770      	bx	lr
		return ATT_REQUEST;
   1c68a:	2001      	movs	r0, #1
   1c68c:	4770      	bx	lr

0001c68e <att_notify_mult>:
{
   1c68e:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1c690:	6803      	ldr	r3, [r0, #0]
   1c692:	898a      	ldrh	r2, [r1, #12]
   1c694:	6818      	ldr	r0, [r3, #0]
   1c696:	6889      	ldr	r1, [r1, #8]
   1c698:	f7f8 fe2a 	bl	152f0 <bt_gatt_mult_notification>
}
   1c69c:	2000      	movs	r0, #0
   1c69e:	bd08      	pop	{r3, pc}

0001c6a0 <att_notify>:
{
   1c6a0:	b538      	push	{r3, r4, r5, lr}
   1c6a2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c6a4:	f101 0008 	add.w	r0, r1, #8
   1c6a8:	460c      	mov	r4, r1
   1c6aa:	f000 ff44 	bl	1d536 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c6ae:	682d      	ldr	r5, [r5, #0]
   1c6b0:	4601      	mov	r1, r0
   1c6b2:	89a3      	ldrh	r3, [r4, #12]
   1c6b4:	6828      	ldr	r0, [r5, #0]
   1c6b6:	68a2      	ldr	r2, [r4, #8]
   1c6b8:	f000 fea5 	bl	1d406 <bt_gatt_notification>
}
   1c6bc:	2000      	movs	r0, #0
   1c6be:	bd38      	pop	{r3, r4, r5, pc}

0001c6c0 <bt_gatt_foreach_attr>:
{
   1c6c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c6c2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c6c6:	2300      	movs	r3, #0
   1c6c8:	461a      	mov	r2, r3
   1c6ca:	9300      	str	r3, [sp, #0]
   1c6cc:	f7f7 fc64 	bl	13f98 <bt_gatt_foreach_attr_type>
}
   1c6d0:	b005      	add	sp, #20
   1c6d2:	f85d fb04 	ldr.w	pc, [sp], #4

0001c6d6 <find_info_cb>:
{
   1c6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c6d8:	6893      	ldr	r3, [r2, #8]
{
   1c6da:	4605      	mov	r5, r0
   1c6dc:	460e      	mov	r6, r1
   1c6de:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c6e0:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c6e2:	b963      	cbnz	r3, 1c6fe <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c6e4:	6850      	ldr	r0, [r2, #4]
   1c6e6:	2101      	movs	r1, #1
   1c6e8:	3008      	adds	r0, #8
   1c6ea:	f7f9 fa6f 	bl	15bcc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c6ee:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c6f0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c6f2:	781b      	ldrb	r3, [r3, #0]
   1c6f4:	2b00      	cmp	r3, #0
   1c6f6:	bf0c      	ite	eq
   1c6f8:	2301      	moveq	r3, #1
   1c6fa:	2302      	movne	r3, #2
   1c6fc:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c6fe:	68a3      	ldr	r3, [r4, #8]
   1c700:	781b      	ldrb	r3, [r3, #0]
   1c702:	2b01      	cmp	r3, #1
   1c704:	d003      	beq.n	1c70e <find_info_cb+0x38>
   1c706:	2b02      	cmp	r3, #2
   1c708:	d019      	beq.n	1c73e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c70a:	2000      	movs	r0, #0
   1c70c:	e016      	b.n	1c73c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c70e:	682b      	ldr	r3, [r5, #0]
   1c710:	781b      	ldrb	r3, [r3, #0]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d1f9      	bne.n	1c70a <find_info_cb+0x34>
   1c716:	6860      	ldr	r0, [r4, #4]
   1c718:	2104      	movs	r1, #4
   1c71a:	3008      	adds	r0, #8
   1c71c:	f7f9 fa56 	bl	15bcc <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c720:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c722:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c724:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c726:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c728:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c72a:	6863      	ldr	r3, [r4, #4]
   1c72c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c730:	899b      	ldrh	r3, [r3, #12]
   1c732:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c734:	2804      	cmp	r0, #4
   1c736:	bf94      	ite	ls
   1c738:	2000      	movls	r0, #0
   1c73a:	2001      	movhi	r0, #1
}
   1c73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c73e:	682b      	ldr	r3, [r5, #0]
   1c740:	781b      	ldrb	r3, [r3, #0]
   1c742:	2b02      	cmp	r3, #2
   1c744:	d1e1      	bne.n	1c70a <find_info_cb+0x34>
   1c746:	6860      	ldr	r0, [r4, #4]
   1c748:	2112      	movs	r1, #18
   1c74a:	3008      	adds	r0, #8
   1c74c:	f7f9 fa3e 	bl	15bcc <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c750:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c752:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c754:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c756:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c75a:	3101      	adds	r1, #1
   1c75c:	f7ff fbc0 	bl	1bee0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c760:	6863      	ldr	r3, [r4, #4]
   1c762:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c766:	899b      	ldrh	r3, [r3, #12]
   1c768:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c76a:	2812      	cmp	r0, #18
   1c76c:	e7e3      	b.n	1c736 <find_info_cb+0x60>

0001c76e <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c76e:	68d0      	ldr	r0, [r2, #12]
   1c770:	3104      	adds	r1, #4
   1c772:	7803      	ldrb	r3, [r0, #0]
   1c774:	b913      	cbnz	r3, 1c77c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c776:	7001      	strb	r1, [r0, #0]
	return true;
   1c778:	2001      	movs	r0, #1
}
   1c77a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c77c:	428b      	cmp	r3, r1
   1c77e:	d0fb      	beq.n	1c778 <attr_read_group_cb+0xa>
		data->group = NULL;
   1c780:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c782:	6891      	ldr	r1, [r2, #8]
   1c784:	898b      	ldrh	r3, [r1, #12]
   1c786:	3b04      	subs	r3, #4
   1c788:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c78a:	6110      	str	r0, [r2, #16]
		return false;
   1c78c:	4770      	bx	lr

0001c78e <write_cb>:
{
   1c78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c790:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c792:	4601      	mov	r1, r0
{
   1c794:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c796:	222a      	movs	r2, #42	; 0x2a
   1c798:	6820      	ldr	r0, [r4, #0]
   1c79a:	f000 fda5 	bl	1d2e8 <bt_gatt_check_perm>
   1c79e:	4605      	mov	r5, r0
   1c7a0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c7a2:	bb00      	cbnz	r0, 1c7e6 <write_cb+0x58>
	if (!data->req) {
   1c7a4:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c7a6:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c7a8:	2b00      	cmp	r3, #0
   1c7aa:	bf14      	ite	ne
   1c7ac:	2300      	movne	r3, #0
   1c7ae:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c7b0:	9301      	str	r3, [sp, #4]
   1c7b2:	8a63      	ldrh	r3, [r4, #18]
   1c7b4:	68b7      	ldr	r7, [r6, #8]
   1c7b6:	9300      	str	r3, [sp, #0]
   1c7b8:	68e2      	ldr	r2, [r4, #12]
   1c7ba:	8a23      	ldrh	r3, [r4, #16]
   1c7bc:	6820      	ldr	r0, [r4, #0]
   1c7be:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c7c0:	1e03      	subs	r3, r0, #0
   1c7c2:	db05      	blt.n	1c7d0 <write_cb+0x42>
   1c7c4:	8a22      	ldrh	r2, [r4, #16]
   1c7c6:	4293      	cmp	r3, r2
   1c7c8:	d10b      	bne.n	1c7e2 <write_cb+0x54>
	data->err = 0U;
   1c7ca:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c7cc:	2501      	movs	r5, #1
   1c7ce:	e005      	b.n	1c7dc <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c7d0:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c7d4:	d305      	bcc.n	1c7e2 <write_cb+0x54>
		return -err;
   1c7d6:	425b      	negs	r3, r3
   1c7d8:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c7da:	7523      	strb	r3, [r4, #20]
}
   1c7dc:	4628      	mov	r0, r5
   1c7de:	b003      	add	sp, #12
   1c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c7e2:	230e      	movs	r3, #14
   1c7e4:	e7f9      	b.n	1c7da <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c7e6:	2500      	movs	r5, #0
   1c7e8:	e7f8      	b.n	1c7dc <write_cb+0x4e>

0001c7ea <att_chan_read>:
{
   1c7ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7ee:	4680      	mov	r8, r0
   1c7f0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c7f2:	4610      	mov	r0, r2
{
   1c7f4:	4699      	mov	r9, r3
   1c7f6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c7f8:	f7ff fefc 	bl	1c5f4 <net_buf_frags_len>
   1c7fc:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1c800:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c802:	4283      	cmp	r3, r0
   1c804:	d97a      	bls.n	1c8fc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c806:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1c80a:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c80c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c80e:	f7f9 f923 	bl	15a58 <net_buf_frag_last>
	size_t len, total = 0;
   1c812:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c816:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c818:	4630      	mov	r0, r6
   1c81a:	f7ff feeb 	bl	1c5f4 <net_buf_frags_len>
   1c81e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c822:	f105 0708 	add.w	r7, r5, #8
   1c826:	1a24      	subs	r4, r4, r0
   1c828:	4638      	mov	r0, r7
   1c82a:	f000 fe90 	bl	1d54e <net_buf_simple_tailroom>
   1c82e:	4284      	cmp	r4, r0
   1c830:	d211      	bcs.n	1c856 <att_chan_read+0x6c>
   1c832:	4630      	mov	r0, r6
   1c834:	f7ff fede 	bl	1c5f4 <net_buf_frags_len>
   1c838:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c83c:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c83e:	bb34      	cbnz	r4, 1c88e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c840:	79b0      	ldrb	r0, [r6, #6]
   1c842:	f7f8 ff2d 	bl	156a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c846:	2200      	movs	r2, #0
   1c848:	2300      	movs	r3, #0
   1c84a:	f000 fe5a 	bl	1d502 <net_buf_alloc_fixed>
			if (!frag) {
   1c84e:	4605      	mov	r5, r0
   1c850:	b930      	cbnz	r0, 1c860 <att_chan_read+0x76>
	return total;
   1c852:	4657      	mov	r7, sl
   1c854:	e02c      	b.n	1c8b0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c856:	4638      	mov	r0, r7
   1c858:	f000 fe79 	bl	1d54e <net_buf_simple_tailroom>
   1c85c:	4604      	mov	r4, r0
   1c85e:	e7ee      	b.n	1c83e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c860:	4601      	mov	r1, r0
   1c862:	4630      	mov	r0, r6
   1c864:	f7f9 f938 	bl	15ad8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c868:	4630      	mov	r0, r6
   1c86a:	f7ff fec3 	bl	1c5f4 <net_buf_frags_len>
   1c86e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c872:	f105 0708 	add.w	r7, r5, #8
   1c876:	1a24      	subs	r4, r4, r0
   1c878:	4638      	mov	r0, r7
   1c87a:	f000 fe68 	bl	1d54e <net_buf_simple_tailroom>
   1c87e:	4284      	cmp	r4, r0
   1c880:	d21a      	bcs.n	1c8b8 <att_chan_read+0xce>
   1c882:	4630      	mov	r0, r6
   1c884:	f7ff feb6 	bl	1c5f4 <net_buf_frags_len>
   1c888:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c88c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c88e:	68a9      	ldr	r1, [r5, #8]
   1c890:	89aa      	ldrh	r2, [r5, #12]
   1c892:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c896:	440a      	add	r2, r1
   1c898:	9803      	ldr	r0, [sp, #12]
   1c89a:	4659      	mov	r1, fp
   1c89c:	f8cd 9000 	str.w	r9, [sp]
   1c8a0:	b2a3      	uxth	r3, r4
   1c8a2:	47b8      	blx	r7
		if (read < 0) {
   1c8a4:	1e07      	subs	r7, r0, #0
   1c8a6:	da0c      	bge.n	1c8c2 <att_chan_read+0xd8>
				return total;
   1c8a8:	f1ba 0f00 	cmp.w	sl, #0
   1c8ac:	bf18      	it	ne
   1c8ae:	4657      	movne	r7, sl
}
   1c8b0:	4638      	mov	r0, r7
   1c8b2:	b005      	add	sp, #20
   1c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8b8:	4638      	mov	r0, r7
   1c8ba:	f000 fe48 	bl	1d54e <net_buf_simple_tailroom>
   1c8be:	4604      	mov	r4, r0
   1c8c0:	e7e5      	b.n	1c88e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c8c4:	b993      	cbnz	r3, 1c8ec <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c8c6:	4639      	mov	r1, r7
   1c8c8:	f105 0008 	add.w	r0, r5, #8
   1c8cc:	f7f9 f97e 	bl	15bcc <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c8d0:	4630      	mov	r0, r6
   1c8d2:	f7ff fe8f 	bl	1c5f4 <net_buf_frags_len>
   1c8d6:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c8da:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c8dc:	4283      	cmp	r3, r0
		total += read;
   1c8de:	44ba      	add	sl, r7
		offset += read;
   1c8e0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c8e4:	d9b5      	bls.n	1c852 <att_chan_read+0x68>
   1c8e6:	42a7      	cmp	r7, r4
   1c8e8:	d096      	beq.n	1c818 <att_chan_read+0x2e>
   1c8ea:	e7b2      	b.n	1c852 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c8ec:	4639      	mov	r1, r7
   1c8ee:	4628      	mov	r0, r5
   1c8f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c8f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c8f4:	4798      	blx	r3
   1c8f6:	2800      	cmp	r0, #0
   1c8f8:	d1e5      	bne.n	1c8c6 <att_chan_read+0xdc>
   1c8fa:	e7aa      	b.n	1c852 <att_chan_read+0x68>
		return 0;
   1c8fc:	2700      	movs	r7, #0
   1c8fe:	e7d7      	b.n	1c8b0 <att_chan_read+0xc6>

0001c900 <bt_att_chan_send>:
{
   1c900:	b570      	push	{r4, r5, r6, lr}
   1c902:	4604      	mov	r4, r0
   1c904:	460e      	mov	r6, r1
	if (!cb) {
   1c906:	4615      	mov	r5, r2
   1c908:	b132      	cbz	r2, 1c918 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1c90a:	462a      	mov	r2, r5
   1c90c:	4631      	mov	r1, r6
   1c90e:	4620      	mov	r0, r4
}
   1c910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1c914:	f7f5 beb6 	b.w	12684 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1c918:	2200      	movs	r2, #0
   1c91a:	2300      	movs	r3, #0
   1c91c:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1c920:	f7fc ff18 	bl	19754 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1c924:	2800      	cmp	r0, #0
   1c926:	daf0      	bge.n	1c90a <bt_att_chan_send+0xa>
}
   1c928:	f06f 000a 	mvn.w	r0, #10
   1c92c:	bd70      	pop	{r4, r5, r6, pc}

0001c92e <bt_att_chan_send_rsp>:
{
   1c92e:	b538      	push	{r3, r4, r5, lr}
   1c930:	4604      	mov	r4, r0
   1c932:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1c934:	f7ff ffe4 	bl	1c900 <bt_att_chan_send>
	if (err) {
   1c938:	b130      	cbz	r0, 1c948 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c93a:	4629      	mov	r1, r5
   1c93c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1c940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c944:	f7f8 bffe 	b.w	15944 <net_buf_put>
}
   1c948:	bd38      	pop	{r3, r4, r5, pc}

0001c94a <process_queue>:
{
   1c94a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c94c:	2200      	movs	r2, #0
{
   1c94e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c950:	2300      	movs	r3, #0
   1c952:	4608      	mov	r0, r1
{
   1c954:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c956:	f7f8 ffa1 	bl	1589c <net_buf_get>
	if (buf) {
   1c95a:	4605      	mov	r5, r0
   1c95c:	b160      	cbz	r0, 1c978 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c95e:	4601      	mov	r1, r0
   1c960:	2200      	movs	r2, #0
   1c962:	4620      	mov	r0, r4
   1c964:	f7f5 fe8e 	bl	12684 <chan_send>
		if (err) {
   1c968:	4604      	mov	r4, r0
   1c96a:	b118      	cbz	r0, 1c974 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c96c:	4629      	mov	r1, r5
   1c96e:	4630      	mov	r0, r6
   1c970:	f001 fb4d 	bl	1e00e <k_queue_prepend>
}
   1c974:	4620      	mov	r0, r4
   1c976:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c978:	f06f 0401 	mvn.w	r4, #1
   1c97c:	e7fa      	b.n	1c974 <process_queue+0x2a>

0001c97e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c97e:	2200      	movs	r2, #0
   1c980:	b510      	push	{r4, lr}
	return list->head;
   1c982:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c984:	b153      	cbz	r3, 1c99c <sys_slist_find_and_remove.isra.0+0x1e>
   1c986:	428b      	cmp	r3, r1
   1c988:	d10e      	bne.n	1c9a8 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c98a:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c98c:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c98e:	b932      	cbnz	r2, 1c99e <sys_slist_find_and_remove.isra.0+0x20>
   1c990:	42a1      	cmp	r1, r4
	list->head = node;
   1c992:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c994:	d100      	bne.n	1c998 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c996:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c998:	2300      	movs	r3, #0
   1c99a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c99c:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c99e:	42a1      	cmp	r1, r4
	parent->next = child;
   1c9a0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c9a2:	bf08      	it	eq
   1c9a4:	6042      	streq	r2, [r0, #4]
}
   1c9a6:	e7f7      	b.n	1c998 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c9a8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9aa:	681b      	ldr	r3, [r3, #0]
   1c9ac:	e7ea      	b.n	1c984 <sys_slist_find_and_remove.isra.0+0x6>

0001c9ae <att_exec_write_req>:
   1c9ae:	2006      	movs	r0, #6
   1c9b0:	4770      	bx	lr

0001c9b2 <chan_req_send>:
{
   1c9b2:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c9b4:	690e      	ldr	r6, [r1, #16]
{
   1c9b6:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c9b8:	4630      	mov	r0, r6
   1c9ba:	f7ff fe1b 	bl	1c5f4 <net_buf_frags_len>
   1c9be:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1c9c2:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c9c4:	4283      	cmp	r3, r0
   1c9c6:	d317      	bcc.n	1c9f8 <chan_req_send+0x46>
	chan->req = req;
   1c9c8:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1c9cc:	f106 0008 	add.w	r0, r6, #8
   1c9d0:	f000 fdb9 	bl	1d546 <net_buf_simple_headroom>
	state->len = buf->len;
   1c9d4:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1c9d6:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1c9d8:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1c9da:	6920      	ldr	r0, [r4, #16]
   1c9dc:	f7f9 f824 	bl	15a28 <net_buf_ref>
   1c9e0:	2200      	movs	r2, #0
   1c9e2:	4601      	mov	r1, r0
   1c9e4:	4628      	mov	r0, r5
   1c9e6:	f7f5 fe4d 	bl	12684 <chan_send>
	if (err) {
   1c9ea:	4605      	mov	r5, r0
   1c9ec:	b110      	cbz	r0, 1c9f4 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1c9ee:	6920      	ldr	r0, [r4, #16]
   1c9f0:	f7f8 ffd6 	bl	159a0 <net_buf_unref>
}
   1c9f4:	4628      	mov	r0, r5
   1c9f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c9f8:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1c9fc:	e7fa      	b.n	1c9f4 <chan_req_send+0x42>

0001c9fe <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c9fe:	30c8      	adds	r0, #200	; 0xc8
   1ca00:	e8d0 3fef 	ldaex	r3, [r0]
   1ca04:	f023 0301 	bic.w	r3, r3, #1
   1ca08:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ca0c:	2a00      	cmp	r2, #0
   1ca0e:	d1f7      	bne.n	1ca00 <chan_rsp_sent+0x2>
}
   1ca10:	4770      	bx	lr

0001ca12 <chan_cfm_sent>:
   1ca12:	30c8      	adds	r0, #200	; 0xc8
   1ca14:	e8d0 3fef 	ldaex	r3, [r0]
   1ca18:	f023 0302 	bic.w	r3, r3, #2
   1ca1c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ca20:	2a00      	cmp	r2, #0
   1ca22:	d1f7      	bne.n	1ca14 <chan_cfm_sent+0x2>
}
   1ca24:	4770      	bx	lr

0001ca26 <read_cb>:
{
   1ca26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ca2a:	4606      	mov	r6, r0
	data->err = 0x00;
   1ca2c:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1ca2e:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ca32:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1ca34:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ca38:	4631      	mov	r1, r6
	data->err = 0x00;
   1ca3a:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ca3c:	2215      	movs	r2, #21
   1ca3e:	f000 fc53 	bl	1d2e8 <bt_gatt_check_perm>
   1ca42:	4604      	mov	r4, r0
   1ca44:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1ca46:	b9a0      	cbnz	r0, 1ca72 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ca48:	e9cd 0000 	strd	r0, r0, [sp]
   1ca4c:	88ab      	ldrh	r3, [r5, #4]
   1ca4e:	4631      	mov	r1, r6
   1ca50:	4640      	mov	r0, r8
   1ca52:	68aa      	ldr	r2, [r5, #8]
   1ca54:	f7ff fec9 	bl	1c7ea <att_chan_read>
	if (ret < 0) {
   1ca58:	1e03      	subs	r3, r0, #0
   1ca5a:	da0c      	bge.n	1ca76 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1ca5c:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1ca60:	bf32      	itee	cc
   1ca62:	230e      	movcc	r3, #14
		return -err;
   1ca64:	425b      	negcs	r3, r3
   1ca66:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1ca68:	732b      	strb	r3, [r5, #12]
}
   1ca6a:	4620      	mov	r0, r4
   1ca6c:	b002      	add	sp, #8
   1ca6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1ca72:	463c      	mov	r4, r7
   1ca74:	e7f9      	b.n	1ca6a <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1ca76:	2401      	movs	r4, #1
   1ca78:	e7f7      	b.n	1ca6a <read_cb+0x44>

0001ca7a <bt_att_sent>:
{
   1ca7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1ca7c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1ca80:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1ca82:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ca86:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1ca8a:	b10b      	cbz	r3, 1ca90 <bt_att_sent+0x16>
		chan->sent(chan);
   1ca8c:	4638      	mov	r0, r7
   1ca8e:	4798      	blx	r3
   1ca90:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1ca94:	e8d3 2fef 	ldaex	r2, [r3]
   1ca98:	f022 0210 	bic.w	r2, r2, #16
   1ca9c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1caa0:	2900      	cmp	r1, #0
   1caa2:	d1f7      	bne.n	1ca94 <bt_att_sent+0x1a>
	if (!att) {
   1caa4:	b335      	cbz	r5, 1caf4 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1caa6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1caaa:	b98b      	cbnz	r3, 1cad0 <bt_att_sent+0x56>
   1caac:	686b      	ldr	r3, [r5, #4]
   1caae:	b17b      	cbz	r3, 1cad0 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cab0:	1d28      	adds	r0, r5, #4
   1cab2:	f7ff fd95 	bl	1c5e0 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cab6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cab8:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1caba:	4638      	mov	r0, r7
   1cabc:	f7ff ff79 	bl	1c9b2 <chan_req_send>
   1cac0:	2800      	cmp	r0, #0
   1cac2:	da17      	bge.n	1caf4 <bt_att_sent+0x7a>
	parent->next = child;
   1cac4:	686b      	ldr	r3, [r5, #4]
   1cac6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cac8:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1caca:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cacc:	b903      	cbnz	r3, 1cad0 <bt_att_sent+0x56>
	list->tail = node;
   1cace:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1cad0:	4638      	mov	r0, r7
   1cad2:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1cad6:	f7ff ff38 	bl	1c94a <process_queue>
	if (!err) {
   1cada:	b158      	cbz	r0, 1caf4 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1cadc:	4638      	mov	r0, r7
   1cade:	f105 010c 	add.w	r1, r5, #12
   1cae2:	f7ff ff32 	bl	1c94a <process_queue>
	if (!err) {
   1cae6:	b128      	cbz	r0, 1caf4 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1cae8:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1caec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1caf0:	f7fc bdf4 	b.w	196dc <z_impl_k_sem_give>
   1caf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001caf6 <att_req_send_process>:
{
   1caf6:	b570      	push	{r4, r5, r6, lr}
   1caf8:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1cafa:	3004      	adds	r0, #4
   1cafc:	f7ff fd70 	bl	1c5e0 <sys_slist_get>
	if (!node) {
   1cb00:	4606      	mov	r6, r0
   1cb02:	b1c0      	cbz	r0, 1cb36 <att_req_send_process+0x40>
	return list->head;
   1cb04:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb06:	b153      	cbz	r3, 1cb1e <att_req_send_process+0x28>
   1cb08:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1cb0c:	d007      	beq.n	1cb1e <att_req_send_process+0x28>
	return node->next;
   1cb0e:	681c      	ldr	r4, [r3, #0]
   1cb10:	b10c      	cbz	r4, 1cb16 <att_req_send_process+0x20>
   1cb12:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1cb16:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1cb1a:	b13b      	cbz	r3, 1cb2c <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb1c:	b964      	cbnz	r4, 1cb38 <att_req_send_process+0x42>
	parent->next = child;
   1cb1e:	686b      	ldr	r3, [r5, #4]
   1cb20:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cb22:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1cb24:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cb26:	b933      	cbnz	r3, 1cb36 <att_req_send_process+0x40>
	list->tail = node;
   1cb28:	60ae      	str	r6, [r5, #8]
}
   1cb2a:	e004      	b.n	1cb36 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cb2c:	4631      	mov	r1, r6
   1cb2e:	f7f5 fe15 	bl	1275c <bt_att_chan_req_send>
   1cb32:	2800      	cmp	r0, #0
   1cb34:	dbf2      	blt.n	1cb1c <att_req_send_process+0x26>
}
   1cb36:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cb38:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1cb3c:	d004      	beq.n	1cb48 <att_req_send_process+0x52>
	return node->next;
   1cb3e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb42:	b10b      	cbz	r3, 1cb48 <att_req_send_process+0x52>
   1cb44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1cb48:	4620      	mov	r0, r4
   1cb4a:	461c      	mov	r4, r3
   1cb4c:	e7e3      	b.n	1cb16 <att_req_send_process+0x20>

0001cb4e <bt_att_status>:
{
   1cb4e:	b538      	push	{r3, r4, r5, lr}
   1cb50:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cb52:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1cb56:	07db      	lsls	r3, r3, #31
   1cb58:	d519      	bpl.n	1cb8e <bt_att_status+0x40>
	if (!chan->att) {
   1cb5a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1cb5e:	b1b0      	cbz	r0, 1cb8e <bt_att_status+0x40>
	if (chan->req) {
   1cb60:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1cb64:	b99b      	cbnz	r3, 1cb8e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1cb66:	3004      	adds	r0, #4
   1cb68:	f7ff fd3a 	bl	1c5e0 <sys_slist_get>
	if (!node) {
   1cb6c:	4604      	mov	r4, r0
   1cb6e:	b170      	cbz	r0, 1cb8e <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cb70:	4601      	mov	r1, r0
   1cb72:	f1a5 0008 	sub.w	r0, r5, #8
   1cb76:	f7f5 fdf1 	bl	1275c <bt_att_chan_req_send>
   1cb7a:	2800      	cmp	r0, #0
   1cb7c:	da07      	bge.n	1cb8e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1cb7e:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1cb82:	685a      	ldr	r2, [r3, #4]
   1cb84:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cb86:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1cb88:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cb8a:	b902      	cbnz	r2, 1cb8e <bt_att_status+0x40>
	list->tail = node;
   1cb8c:	609c      	str	r4, [r3, #8]
}
   1cb8e:	bd38      	pop	{r3, r4, r5, pc}

0001cb90 <att_write_req>:
{
   1cb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb92:	460c      	mov	r4, r1
   1cb94:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1cb96:	f101 0008 	add.w	r0, r1, #8
   1cb9a:	f000 fccc 	bl	1d536 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1cb9e:	89a2      	ldrh	r2, [r4, #12]
   1cba0:	4603      	mov	r3, r0
   1cba2:	9201      	str	r2, [sp, #4]
   1cba4:	68a2      	ldr	r2, [r4, #8]
   1cba6:	2112      	movs	r1, #18
   1cba8:	9200      	str	r2, [sp, #0]
   1cbaa:	4628      	mov	r0, r5
   1cbac:	2213      	movs	r2, #19
   1cbae:	f7f5 ffb3 	bl	12b18 <att_write_rsp.constprop.0>
}
   1cbb2:	b003      	add	sp, #12
   1cbb4:	bd30      	pop	{r4, r5, pc}

0001cbb6 <att_write_cmd>:
{
   1cbb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cbb8:	460c      	mov	r4, r1
   1cbba:	4605      	mov	r5, r0
   1cbbc:	f101 0008 	add.w	r0, r1, #8
   1cbc0:	f000 fcb9 	bl	1d536 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1cbc4:	89a2      	ldrh	r2, [r4, #12]
   1cbc6:	4603      	mov	r3, r0
   1cbc8:	9201      	str	r2, [sp, #4]
   1cbca:	68a2      	ldr	r2, [r4, #8]
   1cbcc:	4628      	mov	r0, r5
   1cbce:	9200      	str	r2, [sp, #0]
   1cbd0:	2200      	movs	r2, #0
   1cbd2:	4611      	mov	r1, r2
   1cbd4:	f7f5 ffa0 	bl	12b18 <att_write_rsp.constprop.0>
}
   1cbd8:	b003      	add	sp, #12
   1cbda:	bd30      	pop	{r4, r5, pc}

0001cbdc <att_read_blob_req>:
{
   1cbdc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1cbde:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1cbe0:	210c      	movs	r1, #12
   1cbe2:	8813      	ldrh	r3, [r2, #0]
   1cbe4:	8852      	ldrh	r2, [r2, #2]
   1cbe6:	9200      	str	r2, [sp, #0]
   1cbe8:	220d      	movs	r2, #13
   1cbea:	f7f6 f8f1 	bl	12dd0 <att_read_rsp>
}
   1cbee:	b003      	add	sp, #12
   1cbf0:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbf4 <att_read_req>:
{
   1cbf4:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cbf6:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1cbf8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cbfa:	210a      	movs	r1, #10
   1cbfc:	881b      	ldrh	r3, [r3, #0]
   1cbfe:	9200      	str	r2, [sp, #0]
   1cc00:	220b      	movs	r2, #11
   1cc02:	f7f6 f8e5 	bl	12dd0 <att_read_rsp>
}
   1cc06:	b003      	add	sp, #12
   1cc08:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc0c <bt_att_init>:
	bt_gatt_init();
   1cc0c:	f7f7 b918 	b.w	13e40 <bt_gatt_init>

0001cc10 <bt_att_get_mtu>:
{
   1cc10:	b508      	push	{r3, lr}
	att = att_get(conn);
   1cc12:	f7f5 fba5 	bl	12360 <att_get>
	if (!att) {
   1cc16:	b1d8      	cbz	r0, 1cc50 <bt_att_get_mtu+0x40>
	return list->head;
   1cc18:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc1a:	b1c8      	cbz	r0, 1cc50 <bt_att_get_mtu+0x40>
   1cc1c:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   1cc20:	d015      	beq.n	1cc4e <bt_att_get_mtu+0x3e>
	return node->next;
   1cc22:	6803      	ldr	r3, [r0, #0]
   1cc24:	b10b      	cbz	r3, 1cc2a <bt_att_get_mtu+0x1a>
   1cc26:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1cc2a:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1cc2c:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1cc30:	4290      	cmp	r0, r2
   1cc32:	bf38      	it	cc
   1cc34:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc36:	b15b      	cbz	r3, 1cc50 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc38:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1cc3c:	d004      	beq.n	1cc48 <bt_att_get_mtu+0x38>
	return node->next;
   1cc3e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1cc42:	b10a      	cbz	r2, 1cc48 <bt_att_get_mtu+0x38>
   1cc44:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1cc48:	4619      	mov	r1, r3
   1cc4a:	4613      	mov	r3, r2
   1cc4c:	e7ee      	b.n	1cc2c <bt_att_get_mtu+0x1c>
		return 0;
   1cc4e:	4608      	mov	r0, r1
}
   1cc50:	bd08      	pop	{r3, pc}

0001cc52 <att_req_destroy>:
{
   1cc52:	b510      	push	{r4, lr}
   1cc54:	4604      	mov	r4, r0
	if (req->buf) {
   1cc56:	6900      	ldr	r0, [r0, #16]
   1cc58:	b108      	cbz	r0, 1cc5e <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1cc5a:	f7f8 fea1 	bl	159a0 <net_buf_unref>
	if (req->destroy) {
   1cc5e:	68a3      	ldr	r3, [r4, #8]
   1cc60:	b10b      	cbz	r3, 1cc66 <att_req_destroy+0x14>
		req->destroy(req);
   1cc62:	4620      	mov	r0, r4
   1cc64:	4798      	blx	r3
	bt_att_req_free(req);
   1cc66:	4620      	mov	r0, r4
}
   1cc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1cc6c:	f7f6 ba4e 	b.w	1310c <bt_att_req_free>

0001cc70 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1cc70:	898a      	ldrh	r2, [r1, #12]
   1cc72:	2300      	movs	r3, #0
   1cc74:	6889      	ldr	r1, [r1, #8]
   1cc76:	f7f6 ba55 	b.w	13124 <att_handle_rsp>

0001cc7a <att_handle_find_type_rsp>:
   1cc7a:	f7ff bff9 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc7e <att_handle_read_type_rsp>:
   1cc7e:	f7ff bff7 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc82 <att_handle_read_rsp>:
   1cc82:	f7ff bff5 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc86 <att_handle_read_blob_rsp>:
   1cc86:	f7ff bff3 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc8a <att_handle_read_mult_rsp>:
   1cc8a:	f7ff bff1 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc8e <att_handle_read_group_rsp>:
   1cc8e:	f7ff bfef 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc92 <att_handle_write_rsp>:
   1cc92:	f7ff bfed 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc96 <att_handle_prepare_write_rsp>:
   1cc96:	f7ff bfeb 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc9a <att_handle_exec_write_rsp>:
   1cc9a:	f7ff bfe9 	b.w	1cc70 <att_handle_find_info_rsp>

0001cc9e <att_confirm>:
   1cc9e:	f7ff bfe7 	b.w	1cc70 <att_handle_find_info_rsp>

0001cca2 <att_mtu_rsp>:
{
   1cca2:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1cca4:	6889      	ldr	r1, [r1, #8]
{
   1cca6:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cca8:	880c      	ldrh	r4, [r1, #0]
{
   1ccaa:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1ccac:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1ccae:	bf89      	itett	hi
   1ccb0:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1ccb2:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1ccb4:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1ccb8:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1ccbc:	bf99      	ittee	ls
   1ccbe:	2304      	movls	r3, #4
   1ccc0:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1ccc2:	2300      	movhi	r3, #0
   1ccc4:	8992      	ldrhhi	r2, [r2, #12]
}
   1ccc6:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1ccc8:	f7f6 ba2c 	b.w	13124 <att_handle_rsp>

0001cccc <att_chan_detach>:
{
   1cccc:	b538      	push	{r3, r4, r5, lr}
   1ccce:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1ccd0:	6800      	ldr	r0, [r0, #0]
   1ccd2:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1ccd6:	3028      	adds	r0, #40	; 0x28
   1ccd8:	f7ff fe51 	bl	1c97e <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1ccdc:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1cce0:	4628      	mov	r0, r5
   1cce2:	f7fc fcfb 	bl	196dc <z_impl_k_sem_give>
   1cce6:	4628      	mov	r0, r5
   1cce8:	f7fc fcf8 	bl	196dc <z_impl_k_sem_give>
   1ccec:	4628      	mov	r0, r5
   1ccee:	f7fc fcf5 	bl	196dc <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1ccf2:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1ccf6:	2200      	movs	r2, #0
   1ccf8:	2300      	movs	r3, #0
   1ccfa:	4628      	mov	r0, r5
   1ccfc:	f7f8 fdce 	bl	1589c <net_buf_get>
   1cd00:	4602      	mov	r2, r0
   1cd02:	b950      	cbnz	r0, 1cd1a <att_chan_detach+0x4e>
	if (chan->req) {
   1cd04:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1cd08:	b123      	cbz	r3, 1cd14 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cd0a:	4601      	mov	r1, r0
   1cd0c:	230e      	movs	r3, #14
   1cd0e:	4620      	mov	r0, r4
   1cd10:	f7f6 fa08 	bl	13124 <att_handle_rsp>
	chan->att = NULL;
   1cd14:	2300      	movs	r3, #0
   1cd16:	6023      	str	r3, [r4, #0]
}
   1cd18:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1cd1a:	f7f8 fe41 	bl	159a0 <net_buf_unref>
   1cd1e:	e7ea      	b.n	1ccf6 <att_chan_detach+0x2a>

0001cd20 <bt_att_disconnected>:
{
   1cd20:	b538      	push	{r3, r4, r5, lr}
   1cd22:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1cd24:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1cd28:	f7ff ffd0 	bl	1cccc <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1cd2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cd2e:	b93b      	cbnz	r3, 1cd40 <bt_att_disconnected+0x20>
	att_reset(att);
   1cd30:	4628      	mov	r0, r5
   1cd32:	f7f6 fa55 	bl	131e0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1cd36:	6820      	ldr	r0, [r4, #0]
}
   1cd38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1cd3c:	f7f8 bbdc 	b.w	154f8 <bt_gatt_disconnected>
}
   1cd40:	bd38      	pop	{r3, r4, r5, pc}

0001cd42 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1cd42:	6010      	str	r0, [r2, #0]
}
   1cd44:	2000      	movs	r0, #0
   1cd46:	4770      	bx	lr

0001cd48 <gatt_ccc_changed>:
{
   1cd48:	460b      	mov	r3, r1
   1cd4a:	8a49      	ldrh	r1, [r1, #18]
   1cd4c:	8b9a      	ldrh	r2, [r3, #28]
   1cd4e:	4291      	cmp	r1, r2
   1cd50:	bf38      	it	cc
   1cd52:	4611      	movcc	r1, r2
   1cd54:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1cd56:	4291      	cmp	r1, r2
   1cd58:	bf38      	it	cc
   1cd5a:	4611      	movcc	r1, r2
   1cd5c:	891a      	ldrh	r2, [r3, #8]
   1cd5e:	4291      	cmp	r1, r2
   1cd60:	bf38      	it	cc
   1cd62:	4611      	movcc	r1, r2
		if (ccc->cfg[i].value > value) {
   1cd64:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   1cd66:	4291      	cmp	r1, r2
   1cd68:	bf38      	it	cc
   1cd6a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1cd6c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1cd6e:	428a      	cmp	r2, r1
   1cd70:	d003      	beq.n	1cd7a <gatt_ccc_changed+0x32>
		ccc->value = value;
   1cd72:	8659      	strh	r1, [r3, #50]	; 0x32
		if (ccc->cfg_changed) {
   1cd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1cd76:	b103      	cbz	r3, 1cd7a <gatt_ccc_changed+0x32>
			ccc->cfg_changed(attr, value);
   1cd78:	4718      	bx	r3
}
   1cd7a:	4770      	bx	lr

0001cd7c <gatt_indicate_rsp>:
{
   1cd7c:	b510      	push	{r4, lr}
   1cd7e:	9c02      	ldr	r4, [sp, #8]
   1cd80:	460a      	mov	r2, r1
	params->_ref--;
   1cd82:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1cd84:	4621      	mov	r1, r4
	params->_ref--;
   1cd86:	3b01      	subs	r3, #1
   1cd88:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1cd8a:	68a3      	ldr	r3, [r4, #8]
   1cd8c:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1cd8e:	68e3      	ldr	r3, [r4, #12]
   1cd90:	b12b      	cbz	r3, 1cd9e <gatt_indicate_rsp+0x22>
   1cd92:	7da2      	ldrb	r2, [r4, #22]
   1cd94:	b91a      	cbnz	r2, 1cd9e <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1cd96:	4620      	mov	r0, r4
}
   1cd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1cd9c:	4718      	bx	r3
}
   1cd9e:	bd10      	pop	{r4, pc}

0001cda0 <match_uuid>:
	data->attr = attr;
   1cda0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1cda2:	8091      	strh	r1, [r2, #4]
}
   1cda4:	2000      	movs	r0, #0
   1cda6:	4770      	bx	lr

0001cda8 <ccc_set_cb>:
}
   1cda8:	2000      	movs	r0, #0
   1cdaa:	4770      	bx	lr

0001cdac <gen_hash_m>:
{
   1cdac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cdae:	6807      	ldr	r7, [r0, #0]
{
   1cdb0:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cdb2:	783d      	ldrb	r5, [r7, #0]
{
   1cdb4:	4614      	mov	r4, r2
   1cdb6:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cdb8:	b10d      	cbz	r5, 1cdbe <gen_hash_m+0x12>
	switch (u16->val) {
   1cdba:	2501      	movs	r5, #1
   1cdbc:	e014      	b.n	1cde8 <gen_hash_m+0x3c>
   1cdbe:	887b      	ldrh	r3, [r7, #2]
   1cdc0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1cdc4:	d004      	beq.n	1cdd0 <gen_hash_m+0x24>
   1cdc6:	d812      	bhi.n	1cdee <gen_hash_m+0x42>
   1cdc8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1cdcc:	2b03      	cmp	r3, #3
   1cdce:	d8f4      	bhi.n	1cdba <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cdd0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cdd4:	2202      	movs	r2, #2
   1cdd6:	4620      	mov	r0, r4
   1cdd8:	f10d 010e 	add.w	r1, sp, #14
   1cddc:	f7fe fcd4 	bl	1b788 <tc_cmac_update>
   1cde0:	b9e0      	cbnz	r0, 1ce1c <gen_hash_m+0x70>
			state->err = -EINVAL;
   1cde2:	f06f 0315 	mvn.w	r3, #21
   1cde6:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1cde8:	4628      	mov	r0, r5
   1cdea:	b009      	add	sp, #36	; 0x24
   1cdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1cdee:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1cdf2:	33ff      	adds	r3, #255	; 0xff
   1cdf4:	b29b      	uxth	r3, r3
   1cdf6:	2b04      	cmp	r3, #4
   1cdf8:	d8df      	bhi.n	1cdba <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cdfa:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cdfe:	2202      	movs	r2, #2
   1ce00:	4620      	mov	r0, r4
   1ce02:	f10d 010e 	add.w	r1, sp, #14
   1ce06:	f7fe fcbf 	bl	1b788 <tc_cmac_update>
   1ce0a:	2800      	cmp	r0, #0
   1ce0c:	d0e9      	beq.n	1cde2 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1ce0e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce10:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1ce12:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce16:	f10d 010e 	add.w	r1, sp, #14
   1ce1a:	e017      	b.n	1ce4c <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ce1c:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce1e:	2202      	movs	r2, #2
   1ce20:	4620      	mov	r0, r4
   1ce22:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1ce26:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce2a:	f7fe fcad 	bl	1b788 <tc_cmac_update>
   1ce2e:	2800      	cmp	r0, #0
   1ce30:	d0d7      	beq.n	1cde2 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ce32:	2000      	movs	r0, #0
   1ce34:	2310      	movs	r3, #16
   1ce36:	4631      	mov	r1, r6
   1ce38:	eb0d 0203 	add.w	r2, sp, r3
   1ce3c:	6877      	ldr	r7, [r6, #4]
   1ce3e:	9000      	str	r0, [sp, #0]
   1ce40:	47b8      	blx	r7
		if (len < 0) {
   1ce42:	1e02      	subs	r2, r0, #0
   1ce44:	da01      	bge.n	1ce4a <gen_hash_m+0x9e>
			state->err = len;
   1ce46:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ce48:	e7ce      	b.n	1cde8 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ce4a:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce4c:	4620      	mov	r0, r4
   1ce4e:	f7fe fc9b 	bl	1b788 <tc_cmac_update>
   1ce52:	2800      	cmp	r0, #0
   1ce54:	d1b1      	bne.n	1cdba <gen_hash_m+0xe>
   1ce56:	e7c4      	b.n	1cde2 <gen_hash_m+0x36>

0001ce58 <bt_addr_le_cmp>:
   1ce58:	2207      	movs	r2, #7
   1ce5a:	f7ff b830 	b.w	1bebe <memcmp>

0001ce5e <find_ccc_cfg>:
{
   1ce5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ce60:	4606      	mov	r6, r0
   1ce62:	1c4c      	adds	r4, r1, #1
   1ce64:	f101 0533 	add.w	r5, r1, #51	; 0x33
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ce68:	1e67      	subs	r7, r4, #1
		if (conn) {
   1ce6a:	b14e      	cbz	r6, 1ce80 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ce6c:	4622      	mov	r2, r4
   1ce6e:	4630      	mov	r0, r6
   1ce70:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1ce74:	f7ff fa8f 	bl	1c396 <bt_conn_is_peer_addr_le>
   1ce78:	b158      	cbz	r0, 1ce92 <find_ccc_cfg+0x34>
}
   1ce7a:	4638      	mov	r0, r7
   1ce7c:	b003      	add	sp, #12
   1ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ce80:	4669      	mov	r1, sp
   1ce82:	4620      	mov	r0, r4
   1ce84:	9600      	str	r6, [sp, #0]
   1ce86:	f8cd 6003 	str.w	r6, [sp, #3]
   1ce8a:	f7ff ffe5 	bl	1ce58 <bt_addr_le_cmp>
   1ce8e:	2800      	cmp	r0, #0
   1ce90:	d0f3      	beq.n	1ce7a <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ce92:	340a      	adds	r4, #10
   1ce94:	42ac      	cmp	r4, r5
   1ce96:	d1e7      	bne.n	1ce68 <find_ccc_cfg+0xa>
	return NULL;
   1ce98:	2700      	movs	r7, #0
   1ce9a:	e7ee      	b.n	1ce7a <find_ccc_cfg+0x1c>

0001ce9c <ccc_find_cfg>:
{
   1ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cea0:	4604      	mov	r4, r0
   1cea2:	460f      	mov	r7, r1
   1cea4:	4690      	mov	r8, r2
   1cea6:	2500      	movs	r5, #0
   1cea8:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1ceaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1ceae:	4543      	cmp	r3, r8
   1ceb0:	d107      	bne.n	1cec2 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1ceb2:	4639      	mov	r1, r7
   1ceb4:	4630      	mov	r0, r6
   1ceb6:	f7ff ffcf 	bl	1ce58 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1ceba:	b910      	cbnz	r0, 1cec2 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1cebc:	1960      	adds	r0, r4, r5
}
   1cebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cec2:	350a      	adds	r5, #10
   1cec4:	2d32      	cmp	r5, #50	; 0x32
   1cec6:	f106 060a 	add.w	r6, r6, #10
   1ceca:	d1ee      	bne.n	1ceaa <ccc_find_cfg+0xe>
	return NULL;
   1cecc:	2000      	movs	r0, #0
   1cece:	e7f6      	b.n	1cebe <ccc_find_cfg+0x22>

0001ced0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ced0:	2207      	movs	r2, #7
   1ced2:	f7ff b805 	b.w	1bee0 <memcpy>

0001ced6 <clear_ccc_cfg>:
{
   1ced6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ced8:	2500      	movs	r5, #0
{
   1ceda:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cedc:	4669      	mov	r1, sp
   1cede:	3001      	adds	r0, #1
   1cee0:	9500      	str	r5, [sp, #0]
   1cee2:	f8cd 5003 	str.w	r5, [sp, #3]
   1cee6:	f7ff fff3 	bl	1ced0 <bt_addr_le_copy>
	cfg->id = 0U;
   1ceea:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1ceec:	8125      	strh	r5, [r4, #8]
}
   1ceee:	b003      	add	sp, #12
   1cef0:	bd30      	pop	{r4, r5, pc}

0001cef2 <atomic_or>:
{
   1cef2:	4603      	mov	r3, r0
}
   1cef4:	e8d3 0fef 	ldaex	r0, [r3]
   1cef8:	ea40 0201 	orr.w	r2, r0, r1
   1cefc:	e8c3 2fec 	stlex	ip, r2, [r3]
   1cf00:	f1bc 0f00 	cmp.w	ip, #0
   1cf04:	d1f6      	bne.n	1cef4 <atomic_or+0x2>
   1cf06:	4770      	bx	lr

0001cf08 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf08:	e8d0 0faf 	lda	r0, [r0]
}
   1cf0c:	4770      	bx	lr

0001cf0e <gatt_read_mult_rsp>:
{
   1cf0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cf10:	9d08      	ldr	r5, [sp, #32]
   1cf12:	4606      	mov	r6, r0
	if (err || !length) {
   1cf14:	460c      	mov	r4, r1
	params->func(conn, 0, params, pdu, length);
   1cf16:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   1cf18:	b901      	cbnz	r1, 1cf1c <gatt_read_mult_rsp+0xe>
   1cf1a:	b94b      	cbnz	r3, 1cf30 <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   1cf1c:	2300      	movs	r3, #0
   1cf1e:	462a      	mov	r2, r5
   1cf20:	4621      	mov	r1, r4
   1cf22:	9308      	str	r3, [sp, #32]
	params->func(conn, 0, params, NULL, 0);
   1cf24:	4630      	mov	r0, r6
   1cf26:	46bc      	mov	ip, r7
}
   1cf28:	b003      	add	sp, #12
   1cf2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   1cf2e:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   1cf30:	9300      	str	r3, [sp, #0]
   1cf32:	4613      	mov	r3, r2
   1cf34:	462a      	mov	r2, r5
   1cf36:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   1cf38:	9408      	str	r4, [sp, #32]
   1cf3a:	4623      	mov	r3, r4
   1cf3c:	462a      	mov	r2, r5
   1cf3e:	4621      	mov	r1, r4
   1cf40:	682f      	ldr	r7, [r5, #0]
   1cf42:	e7ef      	b.n	1cf24 <gatt_read_mult_rsp+0x16>

0001cf44 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cf44:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1cf46:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cf48:	3001      	adds	r0, #1
   1cf4a:	4669      	mov	r1, sp
   1cf4c:	9300      	str	r3, [sp, #0]
   1cf4e:	f8cd 3003 	str.w	r3, [sp, #3]
   1cf52:	f7ff ffbd 	bl	1ced0 <bt_addr_le_copy>
}
   1cf56:	b003      	add	sp, #12
   1cf58:	f85d fb04 	ldr.w	pc, [sp], #4

0001cf5c <clear_cf_cfg>:
{
   1cf5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cf5e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cf60:	2500      	movs	r5, #0
   1cf62:	4669      	mov	r1, sp
   1cf64:	3001      	adds	r0, #1
   1cf66:	9500      	str	r5, [sp, #0]
   1cf68:	f8cd 5003 	str.w	r5, [sp, #3]
   1cf6c:	f7ff ffb0 	bl	1ced0 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1cf70:	f104 0008 	add.w	r0, r4, #8
   1cf74:	2201      	movs	r2, #1
   1cf76:	4629      	mov	r1, r5
   1cf78:	f7fe ffdd 	bl	1bf36 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cf7c:	340c      	adds	r4, #12
   1cf7e:	e8d4 3fef 	ldaex	r3, [r4]
   1cf82:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1cf86:	2a00      	cmp	r2, #0
   1cf88:	d1f9      	bne.n	1cf7e <clear_cf_cfg+0x22>
}
   1cf8a:	b003      	add	sp, #12
   1cf8c:	bd30      	pop	{r4, r5, pc}

0001cf8e <gatt_sub_remove>:
{
   1cf8e:	b570      	push	{r4, r5, r6, lr}
   1cf90:	460c      	mov	r4, r1
	if (params) {
   1cf92:	4619      	mov	r1, r3
   1cf94:	b16b      	cbz	r3, 1cfb2 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1cf96:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1cf9a:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1cf9c:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1cf9e:	b97a      	cbnz	r2, 1cfc0 <gatt_sub_remove+0x32>
   1cfa0:	42ae      	cmp	r6, r5
	list->head = node;
   1cfa2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cfa4:	d100      	bne.n	1cfa8 <gatt_sub_remove+0x1a>
	list->tail = node;
   1cfa6:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1cfa8:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1cfaa:	680d      	ldr	r5, [r1, #0]
   1cfac:	461a      	mov	r2, r3
   1cfae:	614b      	str	r3, [r1, #20]
   1cfb0:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1cfb2:	68a3      	ldr	r3, [r4, #8]
   1cfb4:	b94b      	cbnz	r3, 1cfca <gatt_sub_remove+0x3c>
   1cfb6:	4620      	mov	r0, r4
}
   1cfb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cfbc:	f7ff bfc2 	b.w	1cf44 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1cfc0:	42ae      	cmp	r6, r5
	parent->next = child;
   1cfc2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1cfc4:	bf08      	it	eq
   1cfc6:	60e2      	streq	r2, [r4, #12]
}
   1cfc8:	e7ee      	b.n	1cfa8 <gatt_sub_remove+0x1a>
   1cfca:	bd70      	pop	{r4, r5, r6, pc}

0001cfcc <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1cfcc:	2a02      	cmp	r2, #2
{
   1cfce:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1cfd0:	d108      	bne.n	1cfe4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1cfd8:	461a      	mov	r2, r3
   1cfda:	7a00      	ldrb	r0, [r0, #8]
   1cfdc:	f7f6 fb98 	bl	13710 <sc_save>
}
   1cfe0:	2002      	movs	r0, #2
   1cfe2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1cfe4:	f7f6 fe48 	bl	13c78 <sc_clear>
   1cfe8:	e7fa      	b.n	1cfe0 <sc_ccc_cfg_write+0x14>

0001cfea <gatt_write_ccc_rsp>:
{
   1cfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfee:	4606      	mov	r6, r0
   1cff0:	460d      	mov	r5, r1
   1cff2:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cff4:	f104 0310 	add.w	r3, r4, #16
   1cff8:	e8d3 2fef 	ldaex	r2, [r3]
   1cffc:	f022 0204 	bic.w	r2, r2, #4
   1d000:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d004:	2900      	cmp	r1, #0
   1d006:	d1f7      	bne.n	1cff8 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1d008:	b1dd      	cbz	r5, 1d042 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1d00a:	f7f6 fa6b 	bl	134e4 <gatt_sub_find>
		if (!sub) {
   1d00e:	4601      	mov	r1, r0
   1d010:	b300      	cbz	r0, 1d054 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1d012:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d014:	b143      	cbz	r3, 1d028 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1d016:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1d018:	f104 0014 	add.w	r0, r4, #20
   1d01c:	4283      	cmp	r3, r0
   1d01e:	d10b      	bne.n	1d038 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1d020:	4623      	mov	r3, r4
   1d022:	4630      	mov	r0, r6
   1d024:	f7ff ffb3 	bl	1cf8e <gatt_sub_remove>
	if (params->write) {
   1d028:	6863      	ldr	r3, [r4, #4]
   1d02a:	b19b      	cbz	r3, 1d054 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1d02c:	4629      	mov	r1, r5
   1d02e:	4630      	mov	r0, r6
}
   1d030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1d034:	2200      	movs	r2, #0
   1d036:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d038:	2a00      	cmp	r2, #0
   1d03a:	d0f5      	beq.n	1d028 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1d03c:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d03e:	6812      	ldr	r2, [r2, #0]
   1d040:	e7ec      	b.n	1d01c <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1d042:	89a3      	ldrh	r3, [r4, #12]
   1d044:	2b00      	cmp	r3, #0
   1d046:	d1ef      	bne.n	1d028 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1d048:	462b      	mov	r3, r5
   1d04a:	462a      	mov	r2, r5
   1d04c:	4621      	mov	r1, r4
   1d04e:	6827      	ldr	r7, [r4, #0]
   1d050:	47b8      	blx	r7
   1d052:	e7e9      	b.n	1d028 <gatt_write_ccc_rsp+0x3e>
}
   1d054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d058 <read_ppcp>:
{
   1d058:	b513      	push	{r0, r1, r4, lr}
   1d05a:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1d05c:	2218      	movs	r2, #24
   1d05e:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1d062:	2228      	movs	r2, #40	; 0x28
   1d064:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1d068:	2200      	movs	r2, #0
   1d06a:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1d06e:	222a      	movs	r2, #42	; 0x2a
{
   1d070:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1d074:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d078:	2908      	cmp	r1, #8
   1d07a:	d80b      	bhi.n	1d094 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1d07c:	f1c1 0408 	rsb	r4, r1, #8
   1d080:	429c      	cmp	r4, r3
   1d082:	bfa8      	it	ge
   1d084:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d086:	4469      	add	r1, sp
   1d088:	4622      	mov	r2, r4
   1d08a:	f7fe ff29 	bl	1bee0 <memcpy>
}
   1d08e:	4620      	mov	r0, r4
   1d090:	b002      	add	sp, #8
   1d092:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d094:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1d098:	e7f9      	b.n	1d08e <read_ppcp+0x36>

0001d09a <read_appearance>:
{
   1d09a:	b513      	push	{r0, r1, r4, lr}
   1d09c:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1d09e:	2200      	movs	r2, #0
{
   1d0a0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1d0a4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d0a8:	2902      	cmp	r1, #2
   1d0aa:	d80d      	bhi.n	1d0c8 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1d0ac:	f1c1 0402 	rsb	r4, r1, #2
   1d0b0:	429c      	cmp	r4, r3
   1d0b2:	bfa8      	it	ge
   1d0b4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0b6:	f10d 0306 	add.w	r3, sp, #6
   1d0ba:	4622      	mov	r2, r4
   1d0bc:	4419      	add	r1, r3
   1d0be:	f7fe ff0f 	bl	1bee0 <memcpy>
}
   1d0c2:	4620      	mov	r0, r4
   1d0c4:	b002      	add	sp, #8
   1d0c6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0c8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d0cc:	e7f9      	b.n	1d0c2 <read_appearance+0x28>

0001d0ce <read_name>:
{
   1d0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0d2:	4698      	mov	r8, r3
   1d0d4:	4615      	mov	r5, r2
   1d0d6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1d0da:	f7f3 fb8d 	bl	107f8 <bt_get_name>
   1d0de:	4607      	mov	r7, r0
				 strlen(name));
   1d0e0:	f7fe fec0 	bl	1be64 <strlen>
	if (offset > value_len) {
   1d0e4:	b283      	uxth	r3, r0
   1d0e6:	42b3      	cmp	r3, r6
   1d0e8:	d30c      	bcc.n	1d104 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1d0ea:	1b9c      	subs	r4, r3, r6
   1d0ec:	4544      	cmp	r4, r8
   1d0ee:	bfa8      	it	ge
   1d0f0:	4644      	movge	r4, r8
   1d0f2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0f4:	4622      	mov	r2, r4
   1d0f6:	4628      	mov	r0, r5
   1d0f8:	19b9      	adds	r1, r7, r6
   1d0fa:	f7fe fef1 	bl	1bee0 <memcpy>
}
   1d0fe:	4620      	mov	r0, r4
   1d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d104:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d108:	e7f9      	b.n	1d0fe <read_name+0x30>

0001d10a <cf_read>:
{
   1d10a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d10c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1d10e:	2300      	movs	r3, #0
{
   1d110:	4615      	mov	r5, r2
   1d112:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1d116:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1d11a:	f7f6 f9a5 	bl	13468 <find_cf_cfg>
	if (cfg) {
   1d11e:	b128      	cbz	r0, 1d12c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1d120:	f100 0108 	add.w	r1, r0, #8
   1d124:	2201      	movs	r2, #1
   1d126:	a801      	add	r0, sp, #4
   1d128:	f7fe feda 	bl	1bee0 <memcpy>
	if (offset > value_len) {
   1d12c:	2e01      	cmp	r6, #1
   1d12e:	d80d      	bhi.n	1d14c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1d130:	f1c6 0401 	rsb	r4, r6, #1
   1d134:	42bc      	cmp	r4, r7
   1d136:	bfa8      	it	ge
   1d138:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d13a:	ab01      	add	r3, sp, #4
   1d13c:	4622      	mov	r2, r4
   1d13e:	4628      	mov	r0, r5
   1d140:	1999      	adds	r1, r3, r6
   1d142:	f7fe fecd 	bl	1bee0 <memcpy>
}
   1d146:	4620      	mov	r0, r4
   1d148:	b003      	add	sp, #12
   1d14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d14c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1d150:	e7f9      	b.n	1d146 <cf_read+0x3c>

0001d152 <bt_gatt_attr_read_service>:
{
   1d152:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1d154:	68c9      	ldr	r1, [r1, #12]
{
   1d156:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1d158:	780b      	ldrb	r3, [r1, #0]
{
   1d15a:	4610      	mov	r0, r2
   1d15c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1d160:	b993      	cbnz	r3, 1d188 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d162:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1d164:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d166:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1d16a:	d819      	bhi.n	1d1a0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d16c:	f1c5 0202 	rsb	r2, r5, #2
   1d170:	4294      	cmp	r4, r2
   1d172:	bfa8      	it	ge
   1d174:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d176:	4622      	mov	r2, r4
   1d178:	f10d 0306 	add.w	r3, sp, #6
   1d17c:	1959      	adds	r1, r3, r5
   1d17e:	f7fe feaf 	bl	1bee0 <memcpy>
}
   1d182:	4620      	mov	r0, r4
   1d184:	b003      	add	sp, #12
   1d186:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1d188:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1d18a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1d18e:	d807      	bhi.n	1d1a0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d190:	f1c5 0210 	rsb	r2, r5, #16
   1d194:	4294      	cmp	r4, r2
   1d196:	bfa8      	it	ge
   1d198:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d19a:	4429      	add	r1, r5
   1d19c:	4622      	mov	r2, r4
   1d19e:	e7ee      	b.n	1d17e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d1a0:	f06f 0406 	mvn.w	r4, #6
   1d1a4:	e7ed      	b.n	1d182 <bt_gatt_attr_read_service+0x30>

0001d1a6 <bt_gatt_attr_read_ccc>:
{
   1d1a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1d1a8:	68c9      	ldr	r1, [r1, #12]
{
   1d1aa:	4615      	mov	r5, r2
   1d1ac:	461f      	mov	r7, r3
   1d1ae:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1d1b2:	f7ff fe54 	bl	1ce5e <find_ccc_cfg>
	if (cfg) {
   1d1b6:	b100      	cbz	r0, 1d1ba <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1d1b8:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1d1ba:	2e02      	cmp	r6, #2
   1d1bc:	f8ad 0006 	strh.w	r0, [sp, #6]
   1d1c0:	d80e      	bhi.n	1d1e0 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1d1c2:	f1c6 0402 	rsb	r4, r6, #2
   1d1c6:	42bc      	cmp	r4, r7
   1d1c8:	bfa8      	it	ge
   1d1ca:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d1cc:	f10d 0306 	add.w	r3, sp, #6
   1d1d0:	4622      	mov	r2, r4
   1d1d2:	4628      	mov	r0, r5
   1d1d4:	1999      	adds	r1, r3, r6
   1d1d6:	f7fe fe83 	bl	1bee0 <memcpy>
}
   1d1da:	4620      	mov	r0, r4
   1d1dc:	b003      	add	sp, #12
   1d1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d1e0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1d1e4:	e7f9      	b.n	1d1da <bt_gatt_attr_read_ccc+0x34>

0001d1e6 <sc_restore_rsp>:
{
   1d1e6:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1d1e8:	f7f6 f93e 	bl	13468 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d1ec:	b140      	cbz	r0, 1d200 <sc_restore_rsp+0x1a>
   1d1ee:	7a03      	ldrb	r3, [r0, #8]
   1d1f0:	07db      	lsls	r3, r3, #31
   1d1f2:	d505      	bpl.n	1d200 <sc_restore_rsp+0x1a>
}
   1d1f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d1f8:	2101      	movs	r1, #1
   1d1fa:	300c      	adds	r0, #12
   1d1fc:	f7ff be79 	b.w	1cef2 <atomic_or>
   1d200:	bd08      	pop	{r3, pc}

0001d202 <bt_gatt_attr_read>:
{
   1d202:	b538      	push	{r3, r4, r5, lr}
   1d204:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d208:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1d20c:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d20e:	42a9      	cmp	r1, r5
   1d210:	d80b      	bhi.n	1d22a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d212:	1a6d      	subs	r5, r5, r1
   1d214:	429d      	cmp	r5, r3
   1d216:	bfa8      	it	ge
   1d218:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d21a:	9b05      	ldr	r3, [sp, #20]
   1d21c:	b2ad      	uxth	r5, r5
   1d21e:	462a      	mov	r2, r5
   1d220:	4419      	add	r1, r3
   1d222:	f7fe fe5d 	bl	1bee0 <memcpy>
}
   1d226:	4628      	mov	r0, r5
   1d228:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d22a:	f06f 0506 	mvn.w	r5, #6
   1d22e:	e7fa      	b.n	1d226 <bt_gatt_attr_read+0x24>

0001d230 <bt_gatt_attr_value_handle>:
{
   1d230:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d232:	4604      	mov	r4, r0
   1d234:	b910      	cbnz	r0, 1d23c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d236:	2000      	movs	r0, #0
}
   1d238:	b002      	add	sp, #8
   1d23a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d23c:	2300      	movs	r3, #0
   1d23e:	f88d 3004 	strb.w	r3, [sp, #4]
   1d242:	f642 0303 	movw	r3, #10243	; 0x2803
   1d246:	6800      	ldr	r0, [r0, #0]
   1d248:	a901      	add	r1, sp, #4
   1d24a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d24e:	f7fe febc 	bl	1bfca <bt_uuid_cmp>
   1d252:	2800      	cmp	r0, #0
   1d254:	d1ef      	bne.n	1d236 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d256:	68e3      	ldr	r3, [r4, #12]
   1d258:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d25a:	2800      	cmp	r0, #0
   1d25c:	d1ec      	bne.n	1d238 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d25e:	4620      	mov	r0, r4
   1d260:	f7f6 fe56 	bl	13f10 <bt_gatt_attr_get_handle>
   1d264:	3001      	adds	r0, #1
   1d266:	b280      	uxth	r0, r0
	return handle;
   1d268:	e7e6      	b.n	1d238 <bt_gatt_attr_value_handle+0x8>

0001d26a <bt_gatt_attr_read_chrc>:
{
   1d26a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d26c:	68cf      	ldr	r7, [r1, #12]
{
   1d26e:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1d270:	79bb      	ldrb	r3, [r7, #6]
{
   1d272:	b087      	sub	sp, #28
   1d274:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d276:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d27a:	4615      	mov	r5, r2
   1d27c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d280:	f7ff ffd6 	bl	1d230 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d284:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d286:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d28a:	780b      	ldrb	r3, [r1, #0]
   1d28c:	b99b      	cbnz	r3, 1d2b6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d28e:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1d290:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d292:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1d296:	42b1      	cmp	r1, r6
   1d298:	d315      	bcc.n	1d2c6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d29a:	1b89      	subs	r1, r1, r6
   1d29c:	42a1      	cmp	r1, r4
   1d29e:	bfa8      	it	ge
   1d2a0:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d2a2:	ab01      	add	r3, sp, #4
   1d2a4:	b28c      	uxth	r4, r1
   1d2a6:	4622      	mov	r2, r4
   1d2a8:	4628      	mov	r0, r5
   1d2aa:	1999      	adds	r1, r3, r6
   1d2ac:	f7fe fe18 	bl	1bee0 <memcpy>
}
   1d2b0:	4620      	mov	r0, r4
   1d2b2:	b007      	add	sp, #28
   1d2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d2b6:	3101      	adds	r1, #1
   1d2b8:	2210      	movs	r2, #16
   1d2ba:	f10d 0007 	add.w	r0, sp, #7
   1d2be:	f7fe fe0f 	bl	1bee0 <memcpy>
		value_len += 16U;
   1d2c2:	2113      	movs	r1, #19
   1d2c4:	e7e7      	b.n	1d296 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d2c6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d2ca:	e7f1      	b.n	1d2b0 <bt_gatt_attr_read_chrc+0x46>

0001d2cc <bt_gatt_foreach_attr>:
{
   1d2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d2ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d2d2:	2300      	movs	r3, #0
   1d2d4:	461a      	mov	r2, r3
   1d2d6:	9300      	str	r3, [sp, #0]
   1d2d8:	f7f6 fe5e 	bl	13f98 <bt_gatt_foreach_attr_type>
}
   1d2dc:	b005      	add	sp, #20
   1d2de:	f85d fb04 	ldr.w	pc, [sp], #4

0001d2e2 <db_hash_process>:
	db_hash_gen(true);
   1d2e2:	2001      	movs	r0, #1
   1d2e4:	f7f6 bec4 	b.w	14070 <db_hash_gen>

0001d2e8 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1d2e8:	07d3      	lsls	r3, r2, #31
{
   1d2ea:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d2ec:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d2ee:	d504      	bpl.n	1d2fa <bt_gatt_check_perm+0x12>
   1d2f0:	f014 0f15 	tst.w	r4, #21
   1d2f4:	d017      	beq.n	1d326 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d2f6:	684b      	ldr	r3, [r1, #4]
   1d2f8:	b1ab      	cbz	r3, 1d326 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d2fa:	0793      	lsls	r3, r2, #30
   1d2fc:	d504      	bpl.n	1d308 <bt_gatt_check_perm+0x20>
   1d2fe:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1d302:	d012      	beq.n	1d32a <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d304:	688b      	ldr	r3, [r1, #8]
   1d306:	b183      	cbz	r3, 1d32a <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1d308:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d30a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d30e:	d104      	bne.n	1d31a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d310:	f014 000c 	ands.w	r0, r4, #12
   1d314:	bf18      	it	ne
   1d316:	200f      	movne	r0, #15
}
   1d318:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d31a:	f7ff f831 	bl	1c380 <bt_conn_get_security>
   1d31e:	2802      	cmp	r0, #2
   1d320:	d8f6      	bhi.n	1d310 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1d322:	2005      	movs	r0, #5
   1d324:	e7f8      	b.n	1d318 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d326:	2002      	movs	r0, #2
   1d328:	e7f6      	b.n	1d318 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d32a:	2003      	movs	r0, #3
   1d32c:	e7f4      	b.n	1d318 <bt_gatt_check_perm+0x30>

0001d32e <gatt_discover_next>:
{
   1d32e:	b570      	push	{r4, r5, r6, lr}
   1d330:	4605      	mov	r5, r0
   1d332:	4614      	mov	r4, r2
	if (!last_handle)
   1d334:	b929      	cbnz	r1, 1d342 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1d336:	4621      	mov	r1, r4
   1d338:	4628      	mov	r0, r5
   1d33a:	f7f7 f9f1 	bl	14720 <bt_gatt_discover>
   1d33e:	b928      	cbnz	r0, 1d34c <gatt_discover_next+0x1e>
}
   1d340:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1d342:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d346:	4291      	cmp	r1, r2
   1d348:	d107      	bne.n	1d35a <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1d34a:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1d34c:	4622      	mov	r2, r4
   1d34e:	4628      	mov	r0, r5
   1d350:	6863      	ldr	r3, [r4, #4]
   1d352:	2100      	movs	r1, #0
}
   1d354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1d358:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1d35a:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1d35c:	1c4b      	adds	r3, r1, #1
   1d35e:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1d360:	429a      	cmp	r2, r3
		params->start_handle++;
   1d362:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1d364:	d2e7      	bcs.n	1d336 <gatt_discover_next+0x8>
   1d366:	e7f1      	b.n	1d34c <gatt_discover_next+0x1e>

0001d368 <gatt_find_type_rsp>:
{
   1d368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d36c:	b088      	sub	sp, #32
   1d36e:	4607      	mov	r7, r0
   1d370:	4614      	mov	r4, r2
   1d372:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1d376:	b911      	cbnz	r1, 1d37e <gatt_find_type_rsp+0x16>
   1d378:	f013 0803 	ands.w	r8, r3, #3
   1d37c:	d008      	beq.n	1d390 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1d37e:	464a      	mov	r2, r9
   1d380:	2100      	movs	r1, #0
   1d382:	4638      	mov	r0, r7
   1d384:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1d388:	b008      	add	sp, #32
   1d38a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1d38e:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d390:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d392:	f642 0a01 	movw	sl, #10241	; 0x2801
   1d396:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1d39a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1d39e:	42ac      	cmp	r4, r5
   1d3a0:	d107      	bne.n	1d3b2 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1d3a2:	464a      	mov	r2, r9
   1d3a4:	4641      	mov	r1, r8
   1d3a6:	4638      	mov	r0, r7
}
   1d3a8:	b008      	add	sp, #32
   1d3aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1d3ae:	f7ff bfbe 	b.w	1d32e <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1d3b2:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d3b6:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d3b8:	2900      	cmp	r1, #0
   1d3ba:	bf0c      	ite	eq
   1d3bc:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1d3c0:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1d3c2:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d3c6:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1d3ca:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1d3ce:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1d3d0:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d3d2:	ab01      	add	r3, sp, #4
   1d3d4:	f8ad 1002 	strh.w	r1, [sp, #2]
   1d3d8:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1d3da:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d3de:	4638      	mov	r0, r7
   1d3e0:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d3e2:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d3e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d3ea:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d3ee:	f8cd d00c 	str.w	sp, [sp, #12]
   1d3f2:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d3f6:	a903      	add	r1, sp, #12
   1d3f8:	4798      	blx	r3
   1d3fa:	3404      	adds	r4, #4
   1d3fc:	2800      	cmp	r0, #0
   1d3fe:	d1ce      	bne.n	1d39e <gatt_find_type_rsp+0x36>
}
   1d400:	b008      	add	sp, #32
   1d402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d406 <bt_gatt_notification>:
{
   1d406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d40a:	4607      	mov	r7, r0
   1d40c:	4688      	mov	r8, r1
   1d40e:	4691      	mov	r9, r2
   1d410:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1d412:	f7f6 f867 	bl	134e4 <gatt_sub_find>
	if (!sub) {
   1d416:	b1f8      	cbz	r0, 1d458 <bt_gatt_notification+0x52>
	return list->head;
   1d418:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d41a:	b1eb      	cbz	r3, 1d458 <bt_gatt_notification+0x52>
   1d41c:	f1b3 0614 	subs.w	r6, r3, #20
   1d420:	d01a      	beq.n	1d458 <bt_gatt_notification+0x52>
	return node->next;
   1d422:	681c      	ldr	r4, [r3, #0]
   1d424:	b104      	cbz	r4, 1d428 <bt_gatt_notification+0x22>
   1d426:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1d428:	8933      	ldrh	r3, [r6, #8]
   1d42a:	4543      	cmp	r3, r8
   1d42c:	d10a      	bne.n	1d444 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1d42e:	4653      	mov	r3, sl
   1d430:	464a      	mov	r2, r9
   1d432:	4631      	mov	r1, r6
   1d434:	4638      	mov	r0, r7
   1d436:	6835      	ldr	r5, [r6, #0]
   1d438:	47a8      	blx	r5
   1d43a:	b918      	cbnz	r0, 1d444 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1d43c:	4631      	mov	r1, r6
   1d43e:	4638      	mov	r0, r7
   1d440:	f7f7 febe 	bl	151c0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d444:	b144      	cbz	r4, 1d458 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d446:	f114 0514 	adds.w	r5, r4, #20
   1d44a:	d002      	beq.n	1d452 <bt_gatt_notification+0x4c>
	return node->next;
   1d44c:	6965      	ldr	r5, [r4, #20]
   1d44e:	b105      	cbz	r5, 1d452 <bt_gatt_notification+0x4c>
   1d450:	3d14      	subs	r5, #20
{
   1d452:	4626      	mov	r6, r4
   1d454:	462c      	mov	r4, r5
   1d456:	e7e7      	b.n	1d428 <bt_gatt_notification+0x22>
}
   1d458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d45c <bt_gatt_change_aware>:
{
   1d45c:	b510      	push	{r4, lr}
   1d45e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1d460:	f7f6 f802 	bl	13468 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d464:	b910      	cbnz	r0, 1d46c <bt_gatt_change_aware+0x10>
		return true;
   1d466:	2401      	movs	r4, #1
}
   1d468:	4620      	mov	r0, r4
   1d46a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d46c:	7a03      	ldrb	r3, [r0, #8]
   1d46e:	07db      	lsls	r3, r3, #31
   1d470:	d5f9      	bpl.n	1d466 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d472:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d476:	4618      	mov	r0, r3
   1d478:	f7ff fd46 	bl	1cf08 <atomic_get>
   1d47c:	07c1      	lsls	r1, r0, #31
   1d47e:	d4f2      	bmi.n	1d466 <bt_gatt_change_aware+0xa>
	if (!req) {
   1d480:	2c00      	cmp	r4, #0
   1d482:	d0f1      	beq.n	1d468 <bt_gatt_change_aware+0xc>
   1d484:	4618      	mov	r0, r3
   1d486:	f7ff fd3f 	bl	1cf08 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1d48a:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d48c:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1d490:	d50c      	bpl.n	1d4ac <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d492:	e8d3 2fef 	ldaex	r2, [r3]
   1d496:	f022 0202 	bic.w	r2, r2, #2
   1d49a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d49e:	2900      	cmp	r1, #0
   1d4a0:	d1f7      	bne.n	1d492 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d4a2:	2101      	movs	r1, #1
   1d4a4:	4618      	mov	r0, r3
   1d4a6:	f7ff fd24 	bl	1cef2 <atomic_or>
}
   1d4aa:	e7dd      	b.n	1d468 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d4ac:	2102      	movs	r1, #2
   1d4ae:	e7f9      	b.n	1d4a4 <bt_gatt_change_aware+0x48>

0001d4b0 <bt_smp_recv>:
{
   1d4b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d4b2:	2100      	movs	r1, #0
   1d4b4:	f04f 32ff 	mov.w	r2, #4294967295
   1d4b8:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d4bc:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d4be:	4608      	mov	r0, r1
   1d4c0:	f7ff f83a 	bl	1c538 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1d4c4:	f100 0608 	add.w	r6, r0, #8
   1d4c8:	4604      	mov	r4, r0
   1d4ca:	2101      	movs	r1, #1
   1d4cc:	4630      	mov	r0, r6
   1d4ce:	f7f8 fb7d 	bl	15bcc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d4d2:	2505      	movs	r5, #5
   1d4d4:	2101      	movs	r1, #1
   1d4d6:	7005      	strb	r5, [r0, #0]
   1d4d8:	4630      	mov	r0, r6
   1d4da:	f7f8 fb77 	bl	15bcc <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d4de:	7005      	strb	r5, [r0, #0]
   1d4e0:	2500      	movs	r5, #0
   1d4e2:	4622      	mov	r2, r4
   1d4e4:	462b      	mov	r3, r5
   1d4e6:	2106      	movs	r1, #6
   1d4e8:	4638      	mov	r0, r7
   1d4ea:	9500      	str	r5, [sp, #0]
   1d4ec:	f7ff f827 	bl	1c53e <bt_l2cap_send_cb>
}
   1d4f0:	4628      	mov	r0, r5
   1d4f2:	b003      	add	sp, #12
   1d4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d4f6 <bt_smp_sign>:
   1d4f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d4fa:	4770      	bx	lr

0001d4fc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d4fc:	2000      	movs	r0, #0
   1d4fe:	4770      	bx	lr

0001d500 <fixed_data_unref>:
}
   1d500:	4770      	bx	lr

0001d502 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d502:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d504:	6849      	ldr	r1, [r1, #4]
   1d506:	6809      	ldr	r1, [r1, #0]
   1d508:	f7f8 b91c 	b.w	15744 <net_buf_alloc_len>

0001d50c <net_buf_simple_init_with_data>:
	buf->size  = size;
   1d50c:	b292      	uxth	r2, r2
	buf->__buf = data;
   1d50e:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1d510:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1d512:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1d514:	8082      	strh	r2, [r0, #4]
}
   1d516:	4770      	bx	lr

0001d518 <net_buf_simple_push_u8>:
{
   1d518:	b510      	push	{r4, lr}
   1d51a:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d51c:	2101      	movs	r1, #1
   1d51e:	f7f8 fafd 	bl	15b1c <net_buf_simple_push>
	*data = val;
   1d522:	7004      	strb	r4, [r0, #0]
}
   1d524:	bd10      	pop	{r4, pc}

0001d526 <net_buf_simple_pull_u8>:
{
   1d526:	b510      	push	{r4, lr}
	val = buf->data[0];
   1d528:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1d52a:	2101      	movs	r1, #1
	val = buf->data[0];
   1d52c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d52e:	f7f8 fb13 	bl	15b58 <net_buf_simple_pull>
}
   1d532:	4620      	mov	r0, r4
   1d534:	bd10      	pop	{r4, pc}

0001d536 <net_buf_simple_pull_le16>:
{
   1d536:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d538:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d53a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d53c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d53e:	f7f8 fb0b 	bl	15b58 <net_buf_simple_pull>
}
   1d542:	4620      	mov	r0, r4
   1d544:	bd10      	pop	{r4, pc}

0001d546 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d546:	6802      	ldr	r2, [r0, #0]
   1d548:	6880      	ldr	r0, [r0, #8]
}
   1d54a:	1a10      	subs	r0, r2, r0
   1d54c:	4770      	bx	lr

0001d54e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d54e:	8883      	ldrh	r3, [r0, #4]
   1d550:	88c2      	ldrh	r2, [r0, #6]
   1d552:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d554:	6803      	ldr	r3, [r0, #0]
   1d556:	6880      	ldr	r0, [r0, #8]
   1d558:	1a18      	subs	r0, r3, r0
}
   1d55a:	1a10      	subs	r0, r2, r0
   1d55c:	4770      	bx	lr

0001d55e <net_buf_simple_add_mem>:
{
   1d55e:	b538      	push	{r3, r4, r5, lr}
   1d560:	460d      	mov	r5, r1
   1d562:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d564:	4611      	mov	r1, r2
   1d566:	f7f8 fb31 	bl	15bcc <net_buf_simple_add>
   1d56a:	4622      	mov	r2, r4
   1d56c:	4629      	mov	r1, r5
}
   1d56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d572:	f7fe bcb5 	b.w	1bee0 <memcpy>

0001d576 <net_buf_simple_add_u8>:
{
   1d576:	b510      	push	{r4, lr}
   1d578:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d57a:	2101      	movs	r1, #1
   1d57c:	f7f8 fb26 	bl	15bcc <net_buf_simple_add>
	*u8 = val;
   1d580:	7004      	strb	r4, [r0, #0]
}
   1d582:	bd10      	pop	{r4, pc}

0001d584 <net_buf_simple_add_le16>:
{
   1d584:	b510      	push	{r4, lr}
   1d586:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1d588:	2102      	movs	r1, #2
   1d58a:	f7f8 fb1f 	bl	15bcc <net_buf_simple_add>
	dst[0] = val;
   1d58e:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1d590:	0a24      	lsrs	r4, r4, #8
   1d592:	7044      	strb	r4, [r0, #1]
}
   1d594:	bd10      	pop	{r4, pc}

0001d596 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d596:	6843      	ldr	r3, [r0, #4]
}
   1d598:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d59a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d59c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d59e:	600b      	str	r3, [r1, #0]
}
   1d5a0:	4770      	bx	lr

0001d5a2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5a2:	6843      	ldr	r3, [r0, #4]
   1d5a4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d5a6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d5a8:	4042      	eors	r2, r0
   1d5aa:	400a      	ands	r2, r1
   1d5ac:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d5ae:	605a      	str	r2, [r3, #4]
}
   1d5b0:	2000      	movs	r0, #0
   1d5b2:	4770      	bx	lr

0001d5b4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5b4:	6843      	ldr	r3, [r0, #4]
}
   1d5b6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5b8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d5ba:	6099      	str	r1, [r3, #8]
}
   1d5bc:	4770      	bx	lr

0001d5be <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5be:	6843      	ldr	r3, [r0, #4]
}
   1d5c0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5c2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d5c4:	60d9      	str	r1, [r3, #12]
}
   1d5c6:	4770      	bx	lr

0001d5c8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5c8:	6843      	ldr	r3, [r0, #4]
}
   1d5ca:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5cc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d5ce:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d5d0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d5d2:	6053      	str	r3, [r2, #4]
}
   1d5d4:	4770      	bx	lr

0001d5d6 <nrf_gpio_cfg_sense_set>:
{
   1d5d6:	b513      	push	{r0, r1, r4, lr}
   1d5d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d5da:	a801      	add	r0, sp, #4
{
   1d5dc:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d5de:	f7f8 fb59 	bl	15c94 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d5e2:	9b01      	ldr	r3, [sp, #4]
   1d5e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d5e8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d5ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d5f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1d5f4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1d5f8:	b002      	add	sp, #8
   1d5fa:	bd10      	pop	{r4, pc}

0001d5fc <cfg_level_pins>:
{
   1d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d600:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d602:	2500      	movs	r5, #0
	return port->data;
   1d604:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1d606:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d60a:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d60c:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1d610:	4313      	orrs	r3, r2
   1d612:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1d616:	b90c      	cbnz	r4, 1d61c <cfg_level_pins+0x20>
}
   1d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d61c:	4226      	tst	r6, r4
   1d61e:	d010      	beq.n	1d642 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d620:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d622:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d626:	40e9      	lsrs	r1, r5
   1d628:	f001 0101 	and.w	r1, r1, #1
   1d62c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d630:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d634:	b2c9      	uxtb	r1, r1
   1d636:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d63a:	f7ff ffcc 	bl	1d5d6 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d63e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d642:	3501      	adds	r5, #1
		bit <<= 1;
   1d644:	0076      	lsls	r6, r6, #1
   1d646:	e7e6      	b.n	1d616 <cfg_level_pins+0x1a>

0001d648 <check_level_trigger_pins>:
{
   1d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d64c:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d64e:	2700      	movs	r7, #0
	return port->data;
   1d650:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1d652:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d656:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d658:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1d65c:	430a      	orrs	r2, r1
   1d65e:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1d662:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d666:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1d668:	6915      	ldr	r5, [r2, #16]
   1d66a:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1d66c:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1d670:	b914      	cbnz	r4, 1d678 <check_level_trigger_pins+0x30>
}
   1d672:	4628      	mov	r0, r5
   1d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d678:	4234      	tst	r4, r6
   1d67a:	d00a      	beq.n	1d692 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d67c:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d680:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d684:	2100      	movs	r1, #0
   1d686:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1d68a:	f7ff ffa4 	bl	1d5d6 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d68e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d692:	3701      	adds	r7, #1
		bit <<= 1;
   1d694:	0076      	lsls	r6, r6, #1
   1d696:	e7eb      	b.n	1d670 <check_level_trigger_pins+0x28>

0001d698 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1d698:	6883      	ldr	r3, [r0, #8]
   1d69a:	689b      	ldr	r3, [r3, #8]
   1d69c:	4718      	bx	r3

0001d69e <vipm_nrf_max_id_val_get>:
}
   1d69e:	2000      	movs	r0, #0
   1d6a0:	4770      	bx	lr

0001d6a2 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1d6a2:	b508      	push	{r3, lr}
   1d6a4:	b139      	cbz	r1, 1d6b6 <vipm_nrf_1_set_enabled+0x14>
   1d6a6:	202a      	movs	r0, #42	; 0x2a
   1d6a8:	f7f0 faa6 	bl	dbf8 <arch_irq_enable>
   1d6ac:	2001      	movs	r0, #1
   1d6ae:	f7f9 fe23 	bl	172f8 <nrfx_ipc_receive_event_enable>
   1d6b2:	2000      	movs	r0, #0
   1d6b4:	bd08      	pop	{r3, pc}
   1d6b6:	2001      	movs	r0, #1
   1d6b8:	f7f9 fe3c 	bl	17334 <nrfx_ipc_receive_event_disable>
   1d6bc:	e7f9      	b.n	1d6b2 <vipm_nrf_1_set_enabled+0x10>

0001d6be <uarte_nrfx_config_get>:
{
   1d6be:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d6c0:	68c2      	ldr	r2, [r0, #12]
   1d6c2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d6c6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d6ca:	2000      	movs	r0, #0
   1d6cc:	4770      	bx	lr

0001d6ce <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d6ce:	6843      	ldr	r3, [r0, #4]
   1d6d0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d6d2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d6d6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d6da:	4770      	bx	lr

0001d6dc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d6dc:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d6de:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1d6e0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d6e6:	b148      	cbz	r0, 1d6fc <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6e8:	2000      	movs	r0, #0
	*c = data->rx_data;
   1d6ea:	7c52      	ldrb	r2, [r2, #17]
   1d6ec:	700a      	strb	r2, [r1, #0]
   1d6ee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d6f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6f6:	2201      	movs	r2, #1
   1d6f8:	601a      	str	r2, [r3, #0]
	return 0;
   1d6fa:	4770      	bx	lr
		return -1;
   1d6fc:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d700:	4770      	bx	lr

0001d702 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d702:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d704:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d706:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d70a:	b938      	cbnz	r0, 1d71c <is_tx_ready.isra.0+0x1a>
   1d70c:	799b      	ldrb	r3, [r3, #6]
   1d70e:	b933      	cbnz	r3, 1d71e <is_tx_ready.isra.0+0x1c>
   1d710:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d714:	3800      	subs	r0, #0
   1d716:	bf18      	it	ne
   1d718:	2001      	movne	r0, #1
   1d71a:	4770      	bx	lr
   1d71c:	2001      	movs	r0, #1
}
   1d71e:	4770      	bx	lr

0001d720 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d720:	6843      	ldr	r3, [r0, #4]
   1d722:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d724:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d728:	05d2      	lsls	r2, r2, #23
   1d72a:	d518      	bpl.n	1d75e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d72c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d730:	b1aa      	cbz	r2, 1d75e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1d732:	f04f 0120 	mov.w	r1, #32
   1d736:	f3ef 8211 	mrs	r2, BASEPRI
   1d73a:	f381 8811 	msr	BASEPRI, r1
   1d73e:	f3bf 8f6f 	isb	sy
   1d742:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d746:	b131      	cbz	r1, 1d756 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d748:	2100      	movs	r1, #0
   1d74a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d74e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d752:	2101      	movs	r1, #1
   1d754:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d756:	f382 8811 	msr	BASEPRI, r2
   1d75a:	f3bf 8f6f 	isb	sy
}
   1d75e:	4770      	bx	lr

0001d760 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d760:	2101      	movs	r1, #1
   1d762:	f7f9 bacd 	b.w	16d00 <dk_set_led>

0001d766 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d766:	2100      	movs	r1, #0
   1d768:	f7f9 baca 	b.w	16d00 <dk_set_led>

0001d76c <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1d76c:	f7f9 bb48 	b.w	16e00 <SystemCoreClockUpdate>

0001d770 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d770:	4700      	bx	r0

0001d772 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d772:	f000 bcaf 	b.w	1e0d4 <z_impl_k_busy_wait>

0001d776 <metal_device_open>:
{
   1d776:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d778:	460c      	mov	r4, r1
   1d77a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1d77c:	4606      	mov	r6, r0
   1d77e:	b918      	cbnz	r0, 1d788 <metal_device_open+0x12>
		return -EINVAL;
   1d780:	f06f 0015 	mvn.w	r0, #21
}
   1d784:	b002      	add	sp, #8
   1d786:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1d788:	f7fe fb6c 	bl	1be64 <strlen>
   1d78c:	2800      	cmp	r0, #0
   1d78e:	d0f7      	beq.n	1d780 <metal_device_open+0xa>
   1d790:	2c00      	cmp	r4, #0
   1d792:	d0f5      	beq.n	1d780 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1d794:	4620      	mov	r0, r4
   1d796:	f7fe fb65 	bl	1be64 <strlen>
   1d79a:	2800      	cmp	r0, #0
   1d79c:	d0f0      	beq.n	1d780 <metal_device_open+0xa>
   1d79e:	2d00      	cmp	r5, #0
   1d7a0:	d0ee      	beq.n	1d780 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1d7a2:	4630      	mov	r0, r6
   1d7a4:	a901      	add	r1, sp, #4
   1d7a6:	f7f9 fe39 	bl	1741c <metal_bus_find>
	if (error)
   1d7aa:	2800      	cmp	r0, #0
   1d7ac:	d1ea      	bne.n	1d784 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1d7ae:	9801      	ldr	r0, [sp, #4]
   1d7b0:	6883      	ldr	r3, [r0, #8]
   1d7b2:	b11b      	cbz	r3, 1d7bc <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1d7b4:	462a      	mov	r2, r5
   1d7b6:	4621      	mov	r1, r4
   1d7b8:	4798      	blx	r3
	if (error)
   1d7ba:	e7e3      	b.n	1d784 <metal_device_open+0xe>
		return -ENODEV;
   1d7bc:	f06f 0012 	mvn.w	r0, #18
   1d7c0:	e7e0      	b.n	1d784 <metal_device_open+0xe>

0001d7c2 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1d7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d7c4:	6804      	ldr	r4, [r0, #0]
   1d7c6:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d7c8:	1c66      	adds	r6, r4, #1
   1d7ca:	d00f      	beq.n	1d7ec <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d7cc:	42a9      	cmp	r1, r5
   1d7ce:	d232      	bcs.n	1d836 <metal_io_block_read+0x74>
		: NULL);
   1d7d0:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d7d2:	185e      	adds	r6, r3, r1
   1d7d4:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d7d6:	bf88      	it	hi
   1d7d8:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1d7da:	6a05      	ldr	r5, [r0, #32]
   1d7dc:	b155      	cbz	r5, 1d7f4 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1d7de:	9300      	str	r3, [sp, #0]
   1d7e0:	2305      	movs	r3, #5
   1d7e2:	47a8      	blx	r5
   1d7e4:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1d7e6:	4618      	mov	r0, r3
   1d7e8:	b002      	add	sp, #8
   1d7ea:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d7ec:	42a9      	cmp	r1, r5
   1d7ee:	d222      	bcs.n	1d836 <metal_io_block_read+0x74>
   1d7f0:	2400      	movs	r4, #0
   1d7f2:	e7ee      	b.n	1d7d2 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1d7f4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1d7f8:	4621      	mov	r1, r4
   1d7fa:	4618      	mov	r0, r3
   1d7fc:	2800      	cmp	r0, #0
   1d7fe:	d0f2      	beq.n	1d7e6 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1d800:	ea42 0401 	orr.w	r4, r2, r1
   1d804:	07a4      	lsls	r4, r4, #30
   1d806:	d10a      	bne.n	1d81e <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d808:	2803      	cmp	r0, #3
   1d80a:	dc0e      	bgt.n	1d82a <metal_io_block_read+0x68>
   1d80c:	3901      	subs	r1, #1
   1d80e:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1d810:	4282      	cmp	r2, r0
   1d812:	d0e8      	beq.n	1d7e6 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1d814:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1d818:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1d81c:	e7f8      	b.n	1d810 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1d81e:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1d822:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1d824:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1d828:	e7e8      	b.n	1d7fc <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1d82a:	f851 4b04 	ldr.w	r4, [r1], #4
   1d82e:	3804      	subs	r0, #4
   1d830:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d834:	e7e8      	b.n	1d808 <metal_io_block_read+0x46>
		return -ERANGE;
   1d836:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1d83a:	e7d4      	b.n	1d7e6 <metal_io_block_read+0x24>

0001d83c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1d83c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d83e:	6804      	ldr	r4, [r0, #0]
   1d840:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d842:	1c66      	adds	r6, r4, #1
   1d844:	d00e      	beq.n	1d864 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d846:	42a9      	cmp	r1, r5
   1d848:	d230      	bcs.n	1d8ac <metal_io_block_write+0x70>
		: NULL);
   1d84a:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d84c:	185e      	adds	r6, r3, r1
   1d84e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d850:	bf88      	it	hi
   1d852:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1d854:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d856:	b94d      	cbnz	r5, 1d86c <metal_io_block_write+0x30>
   1d858:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1d85a:	b991      	cbnz	r1, 1d882 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1d85c:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1d860:	4618      	mov	r0, r3
   1d862:	e006      	b.n	1d872 <metal_io_block_write+0x36>
	if (offset >= io->size)
   1d864:	42a9      	cmp	r1, r5
   1d866:	d221      	bcs.n	1d8ac <metal_io_block_write+0x70>
   1d868:	2400      	movs	r4, #0
   1d86a:	e7ef      	b.n	1d84c <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1d86c:	9300      	str	r3, [sp, #0]
   1d86e:	2305      	movs	r3, #5
   1d870:	47a8      	blx	r5
	}
	return retlen;
}
   1d872:	b002      	add	sp, #8
   1d874:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1d876:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1d87a:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1d87c:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1d880:	e7eb      	b.n	1d85a <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1d882:	ea44 0002 	orr.w	r0, r4, r2
   1d886:	0780      	lsls	r0, r0, #30
   1d888:	d1f5      	bne.n	1d876 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d88a:	2903      	cmp	r1, #3
   1d88c:	dc08      	bgt.n	1d8a0 <metal_io_block_write+0x64>
   1d88e:	3a01      	subs	r2, #1
   1d890:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1d892:	428c      	cmp	r4, r1
   1d894:	d0e2      	beq.n	1d85c <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1d896:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1d89a:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1d89e:	e7f8      	b.n	1d892 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1d8a0:	f852 0b04 	ldr.w	r0, [r2], #4
   1d8a4:	3904      	subs	r1, #4
   1d8a6:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d8aa:	e7ee      	b.n	1d88a <metal_io_block_write+0x4e>
		return -ERANGE;
   1d8ac:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1d8b0:	e7df      	b.n	1d872 <metal_io_block_write+0x36>

0001d8b2 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1d8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d8b4:	6804      	ldr	r4, [r0, #0]
   1d8b6:	461d      	mov	r5, r3
		: NULL);
   1d8b8:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d8ba:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1d8bc:	d00e      	beq.n	1d8dc <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d8be:	4299      	cmp	r1, r3
   1d8c0:	d22d      	bcs.n	1d91e <metal_io_block_set+0x6c>
		: NULL);
   1d8c2:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d8c4:	186e      	adds	r6, r5, r1
   1d8c6:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1d8c8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1d8ca:	bf88      	it	hi
   1d8cc:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1d8ce:	b186      	cbz	r6, 1d8f2 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1d8d0:	2305      	movs	r3, #5
   1d8d2:	9500      	str	r5, [sp, #0]
   1d8d4:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1d8d6:	4628      	mov	r0, r5
   1d8d8:	b002      	add	sp, #8
   1d8da:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d8dc:	4299      	cmp	r1, r3
   1d8de:	d21e      	bcs.n	1d91e <metal_io_block_set+0x6c>
   1d8e0:	2400      	movs	r4, #0
   1d8e2:	e7ef      	b.n	1d8c4 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1d8e4:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d8e8:	3b01      	subs	r3, #1
   1d8ea:	b923      	cbnz	r3, 1d8f6 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1d8ec:	f3bf 8f5b 	dmb	ish
   1d8f0:	e7f1      	b.n	1d8d6 <metal_io_block_set+0x24>
   1d8f2:	462b      	mov	r3, r5
   1d8f4:	e7f9      	b.n	1d8ea <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d8f6:	07a1      	lsls	r1, r4, #30
   1d8f8:	d1f4      	bne.n	1d8e4 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1d8fa:	0611      	lsls	r1, r2, #24
   1d8fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1d900:	4311      	orrs	r1, r2
   1d902:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d906:	2b03      	cmp	r3, #3
   1d908:	dc05      	bgt.n	1d916 <metal_io_block_set+0x64>
   1d90a:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1d90c:	429c      	cmp	r4, r3
   1d90e:	d0ed      	beq.n	1d8ec <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1d910:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1d914:	e7fa      	b.n	1d90c <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1d916:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d91a:	3b04      	subs	r3, #4
   1d91c:	e7f3      	b.n	1d906 <metal_io_block_set+0x54>
		return -ERANGE;
   1d91e:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1d922:	e7d8      	b.n	1d8d6 <metal_io_block_set+0x24>

0001d924 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1d924:	2000      	movs	r0, #0
   1d926:	4770      	bx	lr

0001d928 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1d928:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1d92a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1d92c:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1d92e:	b984      	cbnz	r4, 1d952 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1d930:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1d932:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1d934:	291f      	cmp	r1, #31
   1d936:	bf98      	it	ls
   1d938:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1d93c:	b165      	cbz	r5, 1d958 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1d93e:	6881      	ldr	r1, [r0, #8]
   1d940:	428b      	cmp	r3, r1
   1d942:	d209      	bcs.n	1d958 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1d944:	6900      	ldr	r0, [r0, #16]
   1d946:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1d948:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d94c:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1d94e:	bc30      	pop	{r4, r5}
   1d950:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1d952:	4623      	mov	r3, r4
}
   1d954:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1d956:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1d958:	f04f 30ff 	mov.w	r0, #4294967295
   1d95c:	e7f7      	b.n	1d94e <metal_io_phys+0x26>

0001d95e <virtqueue_create>:
{
   1d95e:	b570      	push	{r4, r5, r6, lr}
   1d960:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1d962:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1d964:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1d966:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1d96a:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1d96c:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1d96e:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d970:	1c96      	adds	r6, r2, #2
   1d972:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1d974:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1d978:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1d97c:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d97e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1d982:	1c6e      	adds	r6, r5, #1
   1d984:	4433      	add	r3, r6
   1d986:	426d      	negs	r5, r5
   1d988:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1d98a:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d98c:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1d98e:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1d992:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1d994:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d996:	b96b      	cbnz	r3, 1d9b4 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1d998:	3a01      	subs	r2, #1
   1d99a:	4293      	cmp	r3, r2
   1d99c:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1d9a0:	db0a      	blt.n	1d9b8 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d9a2:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1d9a4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d9a8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1d9ac:	7393      	strb	r3, [r2, #14]
   1d9ae:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d9b2:	73d3      	strb	r3, [r2, #15]
}
   1d9b4:	2000      	movs	r0, #0
   1d9b6:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1d9b8:	3301      	adds	r3, #1
   1d9ba:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1d9bc:	e7ed      	b.n	1d99a <virtqueue_create+0x3c>

0001d9be <virtqueue_add_buffer>:
{
   1d9be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9c2:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1d9c4:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1d9c8:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9ca:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d9cc:	46ba      	mov	sl, r7
{
   1d9ce:	b085      	sub	sp, #20
	needed = readable + writable;
   1d9d0:	18d6      	adds	r6, r2, r3
{
   1d9d2:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1d9d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d9d6:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1d9da:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1d9dc:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1d9de:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1d9e0:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9e2:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1d9e6:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9e8:	42be      	cmp	r6, r7
   1d9ea:	dc19      	bgt.n	1da20 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1d9ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d9ee:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1d9f0:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d9f2:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1d9f4:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1d9f6:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d9f8:	1e51      	subs	r1, r2, #1
   1d9fa:	885a      	ldrh	r2, [r3, #2]
}
   1d9fc:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1d9fe:	400a      	ands	r2, r1
   1da00:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1da04:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1da08:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1da0c:	69e2      	ldr	r2, [r4, #28]
   1da0e:	8853      	ldrh	r3, [r2, #2]
   1da10:	3301      	adds	r3, #1
   1da12:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1da14:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1da16:	3301      	adds	r3, #1
   1da18:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1da1a:	b005      	add	sp, #20
   1da1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1da20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1da22:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1da24:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1da28:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1da2c:	9302      	str	r3, [sp, #8]
   1da2e:	6803      	ldr	r3, [r0, #0]
   1da30:	9203      	str	r2, [sp, #12]
   1da32:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1da34:	6883      	ldr	r3, [r0, #8]
   1da36:	f108 0808 	add.w	r8, r8, #8
   1da3a:	4299      	cmp	r1, r3
   1da3c:	bf28      	it	cs
   1da3e:	f04f 31ff 	movcs.w	r1, #4294967295
   1da42:	f7ff ff71 	bl	1d928 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1da46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1da4a:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1da4c:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1da50:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1da54:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1da56:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1da58:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1da5c:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1da5e:	bfb6      	itet	lt
   1da60:	2201      	movlt	r2, #1
		dp->flags = 0;
   1da62:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1da66:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1da68:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1da6a:	bfd8      	it	le
   1da6c:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1da6e:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1da72:	bfdc      	itt	le
   1da74:	f042 0202 	orrle.w	r2, r2, #2
   1da78:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1da7a:	89ed      	ldrh	r5, [r5, #14]
   1da7c:	e7b4      	b.n	1d9e8 <virtqueue_add_buffer+0x2a>

0001da7e <virtqueue_get_buffer>:
{
   1da7e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1da80:	b350      	cbz	r0, 1dad8 <virtqueue_get_buffer+0x5a>
   1da82:	6a05      	ldr	r5, [r0, #32]
   1da84:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1da86:	886c      	ldrh	r4, [r5, #2]
   1da88:	429c      	cmp	r4, r3
   1da8a:	d030      	beq.n	1daee <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1da8c:	1c5c      	adds	r4, r3, #1
   1da8e:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1da90:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1da92:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1da96:	3c01      	subs	r4, #1
   1da98:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1da9a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1da9e:	686b      	ldr	r3, [r5, #4]
   1daa0:	b29e      	uxth	r6, r3
	if (len)
   1daa2:	b109      	cbz	r1, 1daa8 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1daa4:	68ad      	ldr	r5, [r5, #8]
   1daa6:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1daa8:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1daac:	b29b      	uxth	r3, r3
   1daae:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1dab2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1dab6:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1dab8:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1daba:	442f      	add	r7, r5
	dxp->ndescs--;
   1dabc:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1dabe:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1dac0:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1dac2:	898d      	ldrh	r5, [r1, #12]
   1dac4:	076f      	lsls	r7, r5, #29
   1dac6:	d50e      	bpl.n	1dae6 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1dac8:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1daca:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1dacc:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1dace:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1dad0:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1dad2:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1dad4:	b102      	cbz	r2, 1dad8 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1dad6:	8014      	strh	r4, [r2, #0]
}
   1dad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1dada:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1dadc:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1dade:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1dae0:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1dae4:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1dae6:	898d      	ldrh	r5, [r1, #12]
   1dae8:	07ed      	lsls	r5, r5, #31
   1daea:	d4f6      	bmi.n	1dada <virtqueue_get_buffer+0x5c>
   1daec:	e7ec      	b.n	1dac8 <virtqueue_get_buffer+0x4a>
		return NULL;
   1daee:	2000      	movs	r0, #0
   1daf0:	e7f2      	b.n	1dad8 <virtqueue_get_buffer+0x5a>

0001daf2 <virtqueue_get_available_buffer>:
{
   1daf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1daf6:	f3bf 8f5b 	dmb	ish
{
   1dafa:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dafc:	69c2      	ldr	r2, [r0, #28]
{
   1dafe:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1db00:	8853      	ldrh	r3, [r2, #2]
   1db02:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1db04:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1db06:	428b      	cmp	r3, r1
   1db08:	d045      	beq.n	1db96 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1db0a:	1c4b      	adds	r3, r1, #1
   1db0c:	8603      	strh	r3, [r0, #48]	; 0x30
   1db0e:	8943      	ldrh	r3, [r0, #10]
   1db10:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1db14:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1db16:	400b      	ands	r3, r1
   1db18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1db1c:	889a      	ldrh	r2, [r3, #4]
   1db1e:	b293      	uxth	r3, r2
   1db20:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1db22:	6982      	ldr	r2, [r0, #24]
   1db24:	011b      	lsls	r3, r3, #4
   1db26:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1db2a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1db2e:	bb5b      	cbnz	r3, 1db88 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1db30:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1db34:	1c62      	adds	r2, r4, #1
   1db36:	bf09      	itett	eq
   1db38:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1db3c:	ea09 0404 	andne.w	r4, r9, r4
   1db40:	681c      	ldreq	r4, [r3, #0]
   1db42:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1db46:	4621      	mov	r1, r4
   1db48:	4640      	mov	r0, r8
   1db4a:	f7ff feed 	bl	1d928 <metal_io_phys>
   1db4e:	4581      	cmp	r9, r0
   1db50:	d009      	beq.n	1db66 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1db52:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1db56:	3301      	adds	r3, #1
   1db58:	441c      	add	r4, r3
		} while (offset < io->size);
   1db5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1db5e:	429c      	cmp	r4, r3
   1db60:	d3f1      	bcc.n	1db46 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1db62:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1db66:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1db6a:	1c43      	adds	r3, r0, #1
   1db6c:	d011      	beq.n	1db92 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1db6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1db72:	42a3      	cmp	r3, r4
   1db74:	d90d      	bls.n	1db92 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1db76:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1db78:	8832      	ldrh	r2, [r6, #0]
   1db7a:	69ab      	ldr	r3, [r5, #24]
   1db7c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1db80:	689b      	ldr	r3, [r3, #8]
   1db82:	603b      	str	r3, [r7, #0]
}
   1db84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1db88:	4649      	mov	r1, r9
   1db8a:	4640      	mov	r0, r8
   1db8c:	4798      	blx	r3
   1db8e:	4604      	mov	r4, r0
   1db90:	e7e9      	b.n	1db66 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1db92:	2000      	movs	r0, #0
   1db94:	e7f0      	b.n	1db78 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1db96:	2000      	movs	r0, #0
   1db98:	e7f4      	b.n	1db84 <virtqueue_get_available_buffer+0x92>

0001db9a <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1db9a:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1db9c:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1db9e:	6912      	ldr	r2, [r2, #16]
   1dba0:	0092      	lsls	r2, r2, #2
   1dba2:	d515      	bpl.n	1dbd0 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1dba4:	b94b      	cbnz	r3, 1dbba <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1dba6:	69c2      	ldr	r2, [r0, #28]
   1dba8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1dbaa:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1dbac:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1dbae:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1dbb2:	1a1b      	subs	r3, r3, r0
   1dbb4:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1dbb6:	8093      	strh	r3, [r2, #4]
   1dbb8:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1dbba:	2b01      	cmp	r3, #1
   1dbbc:	d10e      	bne.n	1dbdc <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1dbbe:	6a02      	ldr	r2, [r0, #32]
   1dbc0:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1dbc2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1dbc4:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1dbc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1dbca:	1a1b      	subs	r3, r3, r0
   1dbcc:	3b01      	subs	r3, #1
   1dbce:	e7f2      	b.n	1dbb6 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1dbd0:	b92b      	cbnz	r3, 1dbde <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1dbd2:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1dbd4:	8813      	ldrh	r3, [r2, #0]
   1dbd6:	f043 0301 	orr.w	r3, r3, #1
   1dbda:	8013      	strh	r3, [r2, #0]
}
   1dbdc:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1dbde:	2b01      	cmp	r3, #1
   1dbe0:	d1fc      	bne.n	1dbdc <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1dbe2:	6a02      	ldr	r2, [r0, #32]
   1dbe4:	e7f6      	b.n	1dbd4 <virtqueue_disable_cb+0x3a>

0001dbe6 <virtqueue_kick>:
{
   1dbe6:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1dbe8:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1dbec:	6803      	ldr	r3, [r0, #0]
{
   1dbee:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1dbf0:	691a      	ldr	r2, [r3, #16]
   1dbf2:	699b      	ldr	r3, [r3, #24]
   1dbf4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1dbf8:	d019      	beq.n	1dc2e <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1dbfa:	b97b      	cbnz	r3, 1dc1c <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1dbfc:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1dbfe:	6a02      	ldr	r2, [r0, #32]
   1dc00:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1dc02:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1dc04:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1dc08:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1dc0a:	1a9b      	subs	r3, r3, r2
   1dc0c:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1dc0e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1dc10:	b29b      	uxth	r3, r3
   1dc12:	429a      	cmp	r2, r3
   1dc14:	d813      	bhi.n	1dc3e <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1dc16:	2300      	movs	r3, #0
   1dc18:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1dc1a:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1dc1c:	2b01      	cmp	r3, #1
   1dc1e:	d1fa      	bne.n	1dc16 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1dc20:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1dc22:	69c2      	ldr	r2, [r0, #28]
   1dc24:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1dc26:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1dc28:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1dc2c:	e7ec      	b.n	1dc08 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1dc2e:	b963      	cbnz	r3, 1dc4a <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1dc30:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1dc32:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1dc34:	43db      	mvns	r3, r3
   1dc36:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1dc3a:	2b00      	cmp	r3, #0
   1dc3c:	d0eb      	beq.n	1dc16 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1dc3e:	6923      	ldr	r3, [r4, #16]
   1dc40:	2b00      	cmp	r3, #0
   1dc42:	d0e8      	beq.n	1dc16 <virtqueue_kick+0x30>
		vq->notify(vq);
   1dc44:	4620      	mov	r0, r4
   1dc46:	4798      	blx	r3
   1dc48:	e7e5      	b.n	1dc16 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1dc4a:	2b01      	cmp	r3, #1
   1dc4c:	d1e3      	bne.n	1dc16 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1dc4e:	69c3      	ldr	r3, [r0, #28]
   1dc50:	e7ef      	b.n	1dc32 <virtqueue_kick+0x4c>

0001dc52 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dc52:	69c2      	ldr	r2, [r0, #28]
   1dc54:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1dc56:	8853      	ldrh	r3, [r2, #2]
   1dc58:	428b      	cmp	r3, r1
   1dc5a:	d00a      	beq.n	1dc72 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1dc5c:	8943      	ldrh	r3, [r0, #10]
   1dc5e:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1dc60:	400b      	ands	r3, r1
   1dc62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1dc66:	889a      	ldrh	r2, [r3, #4]
   1dc68:	6983      	ldr	r3, [r0, #24]
   1dc6a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1dc6e:	6898      	ldr	r0, [r3, #8]
	return len;
   1dc70:	4770      	bx	lr
		return 0;
   1dc72:	2000      	movs	r0, #0
}
   1dc74:	4770      	bx	lr

0001dc76 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1dc76:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1dc7a:	68c3      	ldr	r3, [r0, #12]
   1dc7c:	b103      	cbz	r3, 1dc80 <virtqueue_notification+0xa>
		vq->callback(vq);
   1dc7e:	4718      	bx	r3
}
   1dc80:	4770      	bx	lr

0001dc82 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1dc82:	f04f 32ff 	mov.w	r2, #4294967295
   1dc86:	f04f 33ff 	mov.w	r3, #4294967295
   1dc8a:	f7fb bd63 	b.w	19754 <z_impl_k_sem_take>

0001dc8e <rpmsg_unregister_endpoint>:
{
   1dc8e:	b570      	push	{r4, r5, r6, lr}
   1dc90:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1dc92:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1dc94:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1dc98:	4630      	mov	r0, r6
   1dc9a:	f7ff fff2 	bl	1dc82 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1dc9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dca0:	1c5a      	adds	r2, r3, #1
   1dca2:	d010      	beq.n	1dcc6 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1dca4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1dca8:	2b7f      	cmp	r3, #127	; 0x7f
   1dcaa:	d80c      	bhi.n	1dcc6 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dcac:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dcae:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1dcb0:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dcb2:	f003 031f 	and.w	r3, r3, #31
   1dcb6:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dcba:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1dcbe:	ea22 0203 	bic.w	r2, r2, r3
   1dcc2:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1dcc6:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1dcca:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1dcce:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1dcd0:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1dcd2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1dcd6:	2300      	movs	r3, #0
   1dcd8:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1dcda:	4630      	mov	r0, r6
}
   1dcdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dce0:	f7fb bcfc 	b.w	196dc <z_impl_k_sem_give>

0001dce4 <rpmsg_send_ns_message>:
{
   1dce4:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1dce6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1dce8:	b08c      	sub	sp, #48	; 0x30
   1dcea:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1dcec:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dcee:	2220      	movs	r2, #32
   1dcf0:	4601      	mov	r1, r0
   1dcf2:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1dcf4:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dcf6:	f7fe f8a3 	bl	1be40 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1dcfa:	2328      	movs	r3, #40	; 0x28
   1dcfc:	2201      	movs	r2, #1
   1dcfe:	4620      	mov	r0, r4
   1dd00:	e9cd 3200 	strd	r3, r2, [sp]
   1dd04:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1dd06:	2235      	movs	r2, #53	; 0x35
   1dd08:	ab02      	add	r3, sp, #8
   1dd0a:	f7f9 fcb3 	bl	17674 <rpmsg_send_offchannel_raw>
}
   1dd0e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1dd12:	b00c      	add	sp, #48	; 0x30
   1dd14:	bd10      	pop	{r4, pc}

0001dd16 <rpmsg_get_endpoint>:
{
   1dd16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd1a:	4680      	mov	r8, r0
   1dd1c:	4689      	mov	r9, r1
   1dd1e:	4615      	mov	r5, r2
   1dd20:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1dd22:	6807      	ldr	r7, [r0, #0]
   1dd24:	45b8      	cmp	r8, r7
   1dd26:	d101      	bne.n	1dd2c <rpmsg_get_endpoint+0x16>
	return NULL;
   1dd28:	2400      	movs	r4, #0
   1dd2a:	e021      	b.n	1dd70 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1dd2c:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1dd2e:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1dd32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd34:	d006      	beq.n	1dd44 <rpmsg_get_endpoint+0x2e>
   1dd36:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1dd38:	d01a      	beq.n	1dd70 <rpmsg_get_endpoint+0x5a>
		if (name)
   1dd3a:	f1b9 0f00 	cmp.w	r9, #0
   1dd3e:	d106      	bne.n	1dd4e <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1dd40:	683f      	ldr	r7, [r7, #0]
   1dd42:	e7ef      	b.n	1dd24 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1dd44:	3301      	adds	r3, #1
   1dd46:	d1f8      	bne.n	1dd3a <rpmsg_get_endpoint+0x24>
   1dd48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dd4a:	42b3      	cmp	r3, r6
   1dd4c:	e7f4      	b.n	1dd38 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1dd4e:	2220      	movs	r2, #32
   1dd50:	4649      	mov	r1, r9
   1dd52:	4620      	mov	r0, r4
   1dd54:	f7fe f8a2 	bl	1be9c <strncmp>
		if (!name || !name_match)
   1dd58:	2800      	cmp	r0, #0
   1dd5a:	d1f1      	bne.n	1dd40 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1dd5c:	1c72      	adds	r2, r6, #1
   1dd5e:	d002      	beq.n	1dd66 <rpmsg_get_endpoint+0x50>
   1dd60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dd62:	42b3      	cmp	r3, r6
   1dd64:	d004      	beq.n	1dd70 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1dd66:	1c6b      	adds	r3, r5, #1
   1dd68:	d1ea      	bne.n	1dd40 <rpmsg_get_endpoint+0x2a>
   1dd6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dd6c:	3301      	adds	r3, #1
   1dd6e:	d1e7      	bne.n	1dd40 <rpmsg_get_endpoint+0x2a>
}
   1dd70:	4620      	mov	r0, r4
   1dd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001dd76 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1dd76:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1dd78:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1dd7c:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1dd80:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1dd82:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1dd84:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1dd86:	6013      	str	r3, [r2, #0]
}
   1dd88:	4770      	bx	lr

0001dd8a <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1dd8a:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1dd8c:	4604      	mov	r4, r0
   1dd8e:	b190      	cbz	r0, 1ddb6 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1dd90:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1dd92:	b183      	cbz	r3, 1ddb6 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1dd94:	7802      	ldrb	r2, [r0, #0]
   1dd96:	b14a      	cbz	r2, 1ddac <rpmsg_destroy_ept+0x22>
   1dd98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1dd9c:	b133      	cbz	r3, 1ddac <rpmsg_destroy_ept+0x22>
   1dd9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1dda0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1dda4:	d302      	bcc.n	1ddac <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1dda6:	2101      	movs	r1, #1
   1dda8:	f7ff ff9c 	bl	1dce4 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1ddac:	4620      	mov	r0, r4
}
   1ddae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1ddb2:	f7ff bf6c 	b.w	1dc8e <rpmsg_unregister_endpoint>
}
   1ddb6:	bd10      	pop	{r4, pc}

0001ddb8 <rpmsg_virtio_tx_callback>:
}
   1ddb8:	4770      	bx	lr

0001ddba <k_sem_give>:
   1ddba:	f7fb bc8f 	b.w	196dc <z_impl_k_sem_give>

0001ddbe <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ddbe:	f04f 32ff 	mov.w	r2, #4294967295
   1ddc2:	f04f 33ff 	mov.w	r3, #4294967295
   1ddc6:	f7fb bcc5 	b.w	19754 <z_impl_k_sem_take>

0001ddca <rpmsg_virtio_ns_callback>:
{
   1ddca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1ddce:	2a28      	cmp	r2, #40	; 0x28
{
   1ddd0:	4680      	mov	r8, r0
   1ddd2:	460e      	mov	r6, r1
   1ddd4:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1ddd6:	d12b      	bne.n	1de30 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1ddd8:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1ddda:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1dddc:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1dde0:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dde2:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1dde4:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dde6:	1a71      	subs	r1, r6, r1
   1dde8:	42a1      	cmp	r1, r4
   1ddea:	bf28      	it	cs
   1ddec:	f04f 31ff 	movcs.w	r1, #4294967295
   1ddf0:	f7ff fce7 	bl	1d7c2 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1ddf4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1ddf8:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1ddfc:	4638      	mov	r0, r7
   1ddfe:	f7ff ffde 	bl	1ddbe <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1de02:	464b      	mov	r3, r9
   1de04:	f04f 32ff 	mov.w	r2, #4294967295
   1de08:	4669      	mov	r1, sp
   1de0a:	4628      	mov	r0, r5
   1de0c:	f7ff ff83 	bl	1dd16 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1de10:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1de12:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1de14:	07db      	lsls	r3, r3, #31
   1de16:	d50f      	bpl.n	1de38 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1de18:	b110      	cbz	r0, 1de20 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1de1a:	f04f 33ff 	mov.w	r3, #4294967295
   1de1e:	6283      	str	r3, [r0, #40]	; 0x28
   1de20:	4638      	mov	r0, r7
   1de22:	f7ff ffca 	bl	1ddba <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1de26:	b11c      	cbz	r4, 1de30 <rpmsg_virtio_ns_callback+0x66>
   1de28:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1de2a:	b10b      	cbz	r3, 1de30 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1de2c:	4640      	mov	r0, r8
   1de2e:	4798      	blx	r3
}
   1de30:	2000      	movs	r0, #0
   1de32:	b009      	add	sp, #36	; 0x24
   1de34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1de38:	b950      	cbnz	r0, 1de50 <rpmsg_virtio_ns_callback+0x86>
   1de3a:	4638      	mov	r0, r7
   1de3c:	f7ff ffbd 	bl	1ddba <k_sem_give>
			if (rdev->ns_bind_cb)
   1de40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1de42:	2b00      	cmp	r3, #0
   1de44:	d0f4      	beq.n	1de30 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1de46:	464a      	mov	r2, r9
   1de48:	4669      	mov	r1, sp
   1de4a:	4628      	mov	r0, r5
   1de4c:	4798      	blx	r3
   1de4e:	e7ef      	b.n	1de30 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1de50:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1de54:	4638      	mov	r0, r7
   1de56:	f7ff ffb0 	bl	1ddba <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1de5a:	e7e9      	b.n	1de30 <rpmsg_virtio_ns_callback+0x66>

0001de5c <rpmsg_virtio_get_rx_buffer>:
{
   1de5c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1de5e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1de60:	4613      	mov	r3, r2
   1de62:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1de64:	b925      	cbnz	r5, 1de70 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1de66:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1de68:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1de6c:	f7ff be07 	b.w	1da7e <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1de70:	2d01      	cmp	r5, #1
   1de72:	d106      	bne.n	1de82 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1de74:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1de76:	460a      	mov	r2, r1
   1de78:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1de7c:	4619      	mov	r1, r3
   1de7e:	f7ff be38 	b.w	1daf2 <virtqueue_get_available_buffer>
}
   1de82:	2000      	movs	r0, #0
   1de84:	bc30      	pop	{r4, r5}
   1de86:	4770      	bx	lr

0001de88 <rpmsg_virtio_rx_callback>:
{
   1de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1de8c:	6803      	ldr	r3, [r0, #0]
{
   1de8e:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1de90:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1de92:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1de96:	4638      	mov	r0, r7
   1de98:	f7ff ff91 	bl	1ddbe <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1de9c:	4630      	mov	r0, r6
   1de9e:	f10d 020a 	add.w	r2, sp, #10
   1dea2:	a903      	add	r1, sp, #12
   1dea4:	f7ff ffda 	bl	1de5c <rpmsg_virtio_get_rx_buffer>
   1dea8:	4604      	mov	r4, r0
   1deaa:	4638      	mov	r0, r7
   1deac:	f7ff ff85 	bl	1ddba <k_sem_give>
	while (rp_hdr) {
   1deb0:	b914      	cbnz	r4, 1deb8 <rpmsg_virtio_rx_callback+0x30>
}
   1deb2:	b006      	add	sp, #24
   1deb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1deb8:	4638      	mov	r0, r7
   1deba:	f7ff ff80 	bl	1ddbe <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1debe:	f04f 33ff 	mov.w	r3, #4294967295
   1dec2:	2100      	movs	r1, #0
   1dec4:	4630      	mov	r0, r6
   1dec6:	6862      	ldr	r2, [r4, #4]
   1dec8:	f7ff ff25 	bl	1dd16 <rpmsg_get_endpoint>
   1decc:	4605      	mov	r5, r0
   1dece:	4638      	mov	r0, r7
   1ded0:	f7ff ff73 	bl	1ddba <k_sem_give>
		if (ept) {
   1ded4:	b185      	cbz	r5, 1def8 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1ded6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1ded8:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1deda:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dedc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1dede:	bf08      	it	eq
   1dee0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dee2:	89a2      	ldrh	r2, [r4, #12]
   1dee4:	9100      	str	r1, [sp, #0]
   1dee6:	4628      	mov	r0, r5
   1dee8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1deec:	f104 0110 	add.w	r1, r4, #16
   1def0:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1def2:	2800      	cmp	r0, #0
   1def4:	da00      	bge.n	1def8 <rpmsg_virtio_rx_callback+0x70>
   1def6:	e7fe      	b.n	1def6 <rpmsg_virtio_rx_callback+0x6e>
   1def8:	4638      	mov	r0, r7
   1defa:	f7ff ff60 	bl	1ddbe <__metal_mutex_acquire>
   1defe:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1df00:	9b03      	ldr	r3, [sp, #12]
   1df02:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1df04:	b9b2      	cbnz	r2, 1df34 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1df06:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1df08:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1df0c:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1df10:	2301      	movs	r3, #1
   1df12:	a904      	add	r1, sp, #16
   1df14:	f7ff fd53 	bl	1d9be <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1df18:	4630      	mov	r0, r6
   1df1a:	f10d 020a 	add.w	r2, sp, #10
   1df1e:	a903      	add	r1, sp, #12
   1df20:	f7ff ff9c 	bl	1de5c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1df24:	4604      	mov	r4, r0
   1df26:	2800      	cmp	r0, #0
   1df28:	d1bf      	bne.n	1deaa <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1df2a:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1df2e:	f7ff fe5a 	bl	1dbe6 <virtqueue_kick>
   1df32:	e7ba      	b.n	1deaa <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1df34:	2a01      	cmp	r2, #1
   1df36:	d1ef      	bne.n	1df18 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1df38:	461a      	mov	r2, r3
   1df3a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1df3e:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1df42:	f7f9 fb7b 	bl	1763c <virtqueue_add_consumed_buffer>
   1df46:	e7e7      	b.n	1df18 <rpmsg_virtio_rx_callback+0x90>

0001df48 <_rpmsg_virtio_get_buffer_size>:
{
   1df48:	b508      	push	{r3, lr}
   1df4a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1df4c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1df4e:	b14b      	cbz	r3, 1df64 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1df50:	2b01      	cmp	r3, #1
   1df52:	d10a      	bne.n	1df6a <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1df54:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1df58:	f7ff fe7b 	bl	1dc52 <virtqueue_get_desc_size>
   1df5c:	3810      	subs	r0, #16
   1df5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1df62:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1df64:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1df68:	e7fb      	b.n	1df62 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1df6a:	2000      	movs	r0, #0
	return length;
   1df6c:	e7f9      	b.n	1df62 <_rpmsg_virtio_get_buffer_size+0x1a>

0001df6e <rpmsg_virtio_shm_pool_get_buffer>:
{
   1df6e:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1df70:	6842      	ldr	r2, [r0, #4]
{
   1df72:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1df74:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1df76:	bf29      	itett	cs
   1df78:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1df7a:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1df7c:	1a84      	subcs	r4, r0, r2
   1df7e:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1df80:	bf22      	ittt	cs
   1df82:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1df84:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1df86:	605a      	strcs	r2, [r3, #4]
}
   1df88:	bd10      	pop	{r4, pc}

0001df8a <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1df8a:	b110      	cbz	r0, 1df92 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1df8c:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1df90:	6001      	str	r1, [r0, #0]
}
   1df92:	4770      	bx	lr

0001df94 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1df94:	f7fd b913 	b.w	1b1be <z_clock_idle_exit>

0001df98 <k_heap_init>:
{
   1df98:	b410      	push	{r4}
   1df9a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1df9e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1dfa2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1dfa4:	f7ed b8ba 	b.w	b11c <sys_heap_init>

0001dfa8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1dfa8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1dfac:	428b      	cmp	r3, r1
   1dfae:	d001      	beq.n	1dfb4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1dfb0:	f7fb b962 	b.w	19278 <z_set_prio>
}
   1dfb4:	2000      	movs	r0, #0
   1dfb6:	4770      	bx	lr

0001dfb8 <z_impl_k_mutex_init>:
{
   1dfb8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dfba:	2000      	movs	r0, #0
   1dfbc:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1dfc0:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1dfc4:	4770      	bx	lr

0001dfc6 <z_queue_node_peek>:
{
   1dfc6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1dfc8:	4604      	mov	r4, r0
   1dfca:	b130      	cbz	r0, 1dfda <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dfcc:	6802      	ldr	r2, [r0, #0]
   1dfce:	0793      	lsls	r3, r2, #30
   1dfd0:	d003      	beq.n	1dfda <z_queue_node_peek+0x14>
		ret = anode->data;
   1dfd2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1dfd4:	b109      	cbz	r1, 1dfda <z_queue_node_peek+0x14>
			k_free(anode);
   1dfd6:	f000 f982 	bl	1e2de <k_free>
}
   1dfda:	4620      	mov	r0, r4
   1dfdc:	bd10      	pop	{r4, pc}

0001dfde <z_impl_k_queue_init>:
	list->head = NULL;
   1dfde:	2300      	movs	r3, #0
	list->tail = NULL;
   1dfe0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1dfe4:	6083      	str	r3, [r0, #8]
   1dfe6:	f100 030c 	add.w	r3, r0, #12
   1dfea:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1dfee:	f100 0314 	add.w	r3, r0, #20
   1dff2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1dff6:	4770      	bx	lr

0001dff8 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1dff8:	2301      	movs	r3, #1
{
   1dffa:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1dffc:	9300      	str	r3, [sp, #0]
   1dffe:	2300      	movs	r3, #0
{
   1e000:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1e002:	4619      	mov	r1, r3
   1e004:	f7fa fa20 	bl	18448 <queue_insert>
}
   1e008:	b003      	add	sp, #12
   1e00a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e00e <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1e00e:	2300      	movs	r3, #0
{
   1e010:	b507      	push	{r0, r1, r2, lr}
   1e012:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e014:	9300      	str	r3, [sp, #0]
   1e016:	4619      	mov	r1, r3
   1e018:	f7fa fa16 	bl	18448 <queue_insert>
}
   1e01c:	b003      	add	sp, #12
   1e01e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e022 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1e022:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e026:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e02a:	4298      	cmp	r0, r3
   1e02c:	bfac      	ite	ge
   1e02e:	2000      	movge	r0, #0
   1e030:	2001      	movlt	r0, #1
   1e032:	4770      	bx	lr

0001e034 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e034:	4603      	mov	r3, r0
   1e036:	b920      	cbnz	r0, 1e042 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e038:	f3ef 8205 	mrs	r2, IPSR
   1e03c:	b90a      	cbnz	r2, 1e042 <z_reschedule_irqlock+0xe>
   1e03e:	f7ef bd81 	b.w	db44 <arch_swap>
   1e042:	f383 8811 	msr	BASEPRI, r3
   1e046:	f3bf 8f6f 	isb	sy
}
   1e04a:	4770      	bx	lr

0001e04c <z_reschedule_unlocked>:
	__asm__ volatile(
   1e04c:	f04f 0320 	mov.w	r3, #32
   1e050:	f3ef 8011 	mrs	r0, BASEPRI
   1e054:	f383 8811 	msr	BASEPRI, r3
   1e058:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e05c:	f7ff bfea 	b.w	1e034 <z_reschedule_irqlock>

0001e060 <unpend_thread_no_timeout>:
{
   1e060:	b510      	push	{r4, lr}
   1e062:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e064:	f7fa fb2a 	bl	186bc <pended_on>
   1e068:	4621      	mov	r1, r4
   1e06a:	f7fa fc2f 	bl	188cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e06e:	7b63      	ldrb	r3, [r4, #13]
   1e070:	f023 0302 	bic.w	r3, r3, #2
   1e074:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e076:	2300      	movs	r3, #0
   1e078:	60a3      	str	r3, [r4, #8]
}
   1e07a:	bd10      	pop	{r4, pc}

0001e07c <z_priq_dumb_best>:
{
   1e07c:	4603      	mov	r3, r0
	return list->head == list;
   1e07e:	6800      	ldr	r0, [r0, #0]
}
   1e080:	4283      	cmp	r3, r0
   1e082:	bf08      	it	eq
   1e084:	2000      	moveq	r0, #0
   1e086:	4770      	bx	lr

0001e088 <z_unpend_all>:
{
   1e088:	b538      	push	{r3, r4, r5, lr}
   1e08a:	4605      	mov	r5, r0
	int need_sched = 0;
   1e08c:	2000      	movs	r0, #0
   1e08e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e090:	42a5      	cmp	r5, r4
   1e092:	d000      	beq.n	1e096 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e094:	b904      	cbnz	r4, 1e098 <z_unpend_all+0x10>
}
   1e096:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e098:	4620      	mov	r0, r4
   1e09a:	f7fa fc43 	bl	18924 <z_unpend_thread>
		z_ready_thread(thread);
   1e09e:	4620      	mov	r0, r4
   1e0a0:	f7fa fd5a 	bl	18b58 <z_ready_thread>
		need_sched = 1;
   1e0a4:	2001      	movs	r0, #1
   1e0a6:	e7f2      	b.n	1e08e <z_unpend_all+0x6>

0001e0a8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1e0a8:	b15a      	cbz	r2, 1e0c2 <z_impl_k_sem_init+0x1a>
   1e0aa:	428a      	cmp	r2, r1
   1e0ac:	d309      	bcc.n	1e0c2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e0ae:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e0b2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e0b6:	e9c0 0000 	strd	r0, r0, [r0]
   1e0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e0be:	2000      	movs	r0, #0
   1e0c0:	4770      	bx	lr
		return -EINVAL;
   1e0c2:	f06f 0015 	mvn.w	r0, #21
}
   1e0c6:	4770      	bx	lr

0001e0c8 <k_is_in_isr>:
   1e0c8:	f3ef 8005 	mrs	r0, IPSR
}
   1e0cc:	3800      	subs	r0, #0
   1e0ce:	bf18      	it	ne
   1e0d0:	2001      	movne	r0, #1
   1e0d2:	4770      	bx	lr

0001e0d4 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1e0d4:	b108      	cbz	r0, 1e0da <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1e0d6:	f7ed bc6b 	b.w	b9b0 <arch_busy_wait>
}
   1e0da:	4770      	bx	lr

0001e0dc <z_impl_k_thread_name_set>:
}
   1e0dc:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e0e0:	4770      	bx	lr

0001e0e2 <k_thread_name_get>:
}
   1e0e2:	2000      	movs	r0, #0
   1e0e4:	4770      	bx	lr

0001e0e6 <k_work_submit_to_queue>:
{
   1e0e6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e0e8:	f101 0308 	add.w	r3, r1, #8
   1e0ec:	e8d3 2fef 	ldaex	r2, [r3]
   1e0f0:	f042 0c01 	orr.w	ip, r2, #1
   1e0f4:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e0f8:	f1be 0f00 	cmp.w	lr, #0
   1e0fc:	d1f6      	bne.n	1e0ec <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e0fe:	07d3      	lsls	r3, r2, #31
   1e100:	d403      	bmi.n	1e10a <k_work_submit_to_queue+0x24>
}
   1e102:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e106:	f7ff bf77 	b.w	1dff8 <k_queue_append>
}
   1e10a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e10e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1e10e:	f1a0 0110 	sub.w	r1, r0, #16
   1e112:	6980      	ldr	r0, [r0, #24]
   1e114:	f7ff bfe7 	b.w	1e0e6 <k_work_submit_to_queue>

0001e118 <work_cancel>:
{
   1e118:	b570      	push	{r4, r5, r6, lr}
   1e11a:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1e11c:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e120:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1e124:	07db      	lsls	r3, r3, #31
   1e126:	d52f      	bpl.n	1e188 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e128:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1e12a:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1e12c:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e12e:	b913      	cbnz	r3, 1e136 <work_cancel+0x1e>
			return -EINVAL;
   1e130:	f06f 0015 	mvn.w	r0, #21
}
   1e134:	bd70      	pop	{r4, r5, r6, pc}
   1e136:	429c      	cmp	r4, r3
   1e138:	d121      	bne.n	1e17e <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e13a:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1e13c:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e13e:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1e142:	b991      	cbnz	r1, 1e16a <work_cancel+0x52>
   1e144:	42b4      	cmp	r4, r6
	list->head = node;
   1e146:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e148:	d100      	bne.n	1e14c <work_cancel+0x34>
	list->tail = node;
   1e14a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e14c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e14e:	f003 0303 	and.w	r3, r3, #3
   1e152:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1e154:	2000      	movs	r0, #0
   1e156:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e158:	e8d5 3fef 	ldaex	r3, [r5]
   1e15c:	f023 0301 	bic.w	r3, r3, #1
   1e160:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e164:	2a00      	cmp	r2, #0
   1e166:	d0e5      	beq.n	1e134 <work_cancel+0x1c>
   1e168:	e7f6      	b.n	1e158 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e16a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e16c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e16e:	f003 0303 	and.w	r3, r3, #3
   1e172:	ea43 0300 	orr.w	r3, r3, r0
   1e176:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1e178:	bf08      	it	eq
   1e17a:	6051      	streq	r1, [r2, #4]
}
   1e17c:	e7e6      	b.n	1e14c <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e17e:	6818      	ldr	r0, [r3, #0]
   1e180:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e182:	f020 0303 	bic.w	r3, r0, #3
   1e186:	e7d2      	b.n	1e12e <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1e188:	3010      	adds	r0, #16
   1e18a:	f7fb fed7 	bl	19f3c <z_abort_timeout>
		if (err) {
   1e18e:	2800      	cmp	r0, #0
   1e190:	d0e0      	beq.n	1e154 <work_cancel+0x3c>
			return -EALREADY;
   1e192:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1e196:	e7cd      	b.n	1e134 <work_cancel+0x1c>

0001e198 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1e198:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1e19a:	f7fc f81d 	bl	1a1d8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e19e:	bd08      	pop	{r3, pc}

0001e1a0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1e1a0:	f7fc b81a 	b.w	1a1d8 <z_tick_get>

0001e1a4 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e1a4:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e1a8:	bf08      	it	eq
   1e1aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e1ae:	b538      	push	{r3, r4, r5, lr}
   1e1b0:	4605      	mov	r5, r0
   1e1b2:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e1b4:	d01d      	beq.n	1e1f2 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e1b6:	ea51 0300 	orrs.w	r3, r1, r0
   1e1ba:	d103      	bne.n	1e1c4 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1e1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1e1c0:	f7fc b80a 	b.w	1a1d8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e1c4:	f06f 0301 	mvn.w	r3, #1
   1e1c8:	1a18      	subs	r0, r3, r0
   1e1ca:	f04f 33ff 	mov.w	r3, #4294967295
   1e1ce:	eb63 0101 	sbc.w	r1, r3, r1
   1e1d2:	2900      	cmp	r1, #0
   1e1d4:	da0c      	bge.n	1e1f0 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1e1d6:	f7fb ffff 	bl	1a1d8 <z_tick_get>
   1e1da:	2d01      	cmp	r5, #1
   1e1dc:	4622      	mov	r2, r4
   1e1de:	f174 0400 	sbcs.w	r4, r4, #0
   1e1e2:	462b      	mov	r3, r5
   1e1e4:	bfbc      	itt	lt
   1e1e6:	2301      	movlt	r3, #1
   1e1e8:	2200      	movlt	r2, #0
   1e1ea:	1818      	adds	r0, r3, r0
   1e1ec:	eb41 0102 	adc.w	r1, r1, r2
}
   1e1f0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1e1f2:	f04f 30ff 	mov.w	r0, #4294967295
   1e1f6:	4601      	mov	r1, r0
   1e1f8:	e7fa      	b.n	1e1f0 <z_timeout_end_calc+0x4c>

0001e1fa <k_work_submit_to_queue>:
{
   1e1fa:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e1fc:	f101 0308 	add.w	r3, r1, #8
   1e200:	e8d3 2fef 	ldaex	r2, [r3]
   1e204:	f042 0c01 	orr.w	ip, r2, #1
   1e208:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e20c:	f1be 0f00 	cmp.w	lr, #0
   1e210:	d1f6      	bne.n	1e200 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e212:	07d3      	lsls	r3, r2, #31
   1e214:	d403      	bmi.n	1e21e <k_work_submit_to_queue+0x24>
}
   1e216:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e21a:	f7ff beed 	b.w	1dff8 <k_queue_append>
}
   1e21e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e222 <add_event>:
{
   1e222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e224:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e226:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e22a:	4290      	cmp	r0, r2
   1e22c:	4604      	mov	r4, r0
   1e22e:	460d      	mov	r5, r1
   1e230:	d106      	bne.n	1e240 <add_event+0x1e>
	node->prev = list->tail;
   1e232:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e234:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1e236:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e238:	6863      	ldr	r3, [r4, #4]
   1e23a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e23c:	6065      	str	r5, [r4, #4]
}
   1e23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e240:	2b00      	cmp	r3, #0
   1e242:	d0f6      	beq.n	1e232 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e244:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e246:	b100      	cbz	r0, 1e24a <add_event+0x28>
   1e248:	386c      	subs	r0, #108	; 0x6c
   1e24a:	b107      	cbz	r7, 1e24e <add_event+0x2c>
   1e24c:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e24e:	4639      	mov	r1, r7
   1e250:	f7ff fee7 	bl	1e022 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e254:	2800      	cmp	r0, #0
   1e256:	d1ec      	bne.n	1e232 <add_event+0x10>
	return list->head == list;
   1e258:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e25a:	42b4      	cmp	r4, r6
   1e25c:	d0e9      	beq.n	1e232 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e25e:	2e00      	cmp	r6, #0
   1e260:	d0e7      	beq.n	1e232 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e262:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e264:	b101      	cbz	r1, 1e268 <add_event+0x46>
   1e266:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e268:	4638      	mov	r0, r7
   1e26a:	f7ff feda 	bl	1e022 <z_is_t1_higher_prio_than_t2>
   1e26e:	b128      	cbz	r0, 1e27c <add_event+0x5a>
	node->prev = successor->prev;
   1e270:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e272:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e276:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e278:	6075      	str	r5, [r6, #4]
			return;
   1e27a:	e7e0      	b.n	1e23e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e27c:	6863      	ldr	r3, [r4, #4]
   1e27e:	429e      	cmp	r6, r3
   1e280:	d0d7      	beq.n	1e232 <add_event+0x10>
   1e282:	6836      	ldr	r6, [r6, #0]
   1e284:	e7eb      	b.n	1e25e <add_event+0x3c>

0001e286 <z_handle_obj_poll_events>:
{
   1e286:	4603      	mov	r3, r0
	return list->head == list;
   1e288:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e28a:	4283      	cmp	r3, r0
   1e28c:	d008      	beq.n	1e2a0 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1e28e:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e292:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e294:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e296:	2300      	movs	r3, #0
	node->prev = NULL;
   1e298:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e29c:	f7fb bfda 	b.w	1a254 <signal_poll_event>
}
   1e2a0:	4770      	bx	lr

0001e2a2 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e2a2:	2904      	cmp	r1, #4
{
   1e2a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e2a8:	460d      	mov	r5, r1
   1e2aa:	bf38      	it	cc
   1e2ac:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e2ae:	1952      	adds	r2, r2, r5
{
   1e2b0:	4606      	mov	r6, r0
   1e2b2:	d209      	bcs.n	1e2c8 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1e2b4:	f04f 0800 	mov.w	r8, #0
   1e2b8:	f04f 0900 	mov.w	r9, #0
   1e2bc:	e9cd 8900 	strd	r8, r9, [sp]
   1e2c0:	f7f9 fdb4 	bl	17e2c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e2c4:	4604      	mov	r4, r0
   1e2c6:	b918      	cbnz	r0, 1e2d0 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1e2c8:	2000      	movs	r0, #0
}
   1e2ca:	b002      	add	sp, #8
   1e2cc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1e2d0:	462a      	mov	r2, r5
   1e2d2:	21ff      	movs	r1, #255	; 0xff
   1e2d4:	f7fd fe2f 	bl	1bf36 <memset>
	*heap_ref = heap;
   1e2d8:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1e2da:	1960      	adds	r0, r4, r5
   1e2dc:	e7f5      	b.n	1e2ca <z_heap_aligned_alloc+0x28>

0001e2de <k_free>:
	if (ptr != NULL) {
   1e2de:	b138      	cbz	r0, 1e2f0 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e2e0:	1f03      	subs	r3, r0, #4
   1e2e2:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1e2e4:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e2e8:	1c42      	adds	r2, r0, #1
   1e2ea:	d0fa      	beq.n	1e2e2 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1e2ec:	f7f9 be26 	b.w	17f3c <k_heap_free>
}
   1e2f0:	4770      	bx	lr

0001e2f2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1e2f2:	4770      	bx	lr
